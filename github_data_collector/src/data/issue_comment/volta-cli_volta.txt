Upon installing [git-mob](https://github.com/findmypast-oss/git-mob) with volta (`volta install git-mob`), I noticed that it didn't work. When I invoke any of the commands (e.g. `git mob`), I get the following error:

```
$ git mob
env: node\r: No such file or directory
```

The reason, it turns out, is that the package was published to NPM incorrectly on a Windows machine, and the shebang line ended up being `#! /usr/bin/env node\r`, so `"node\r"` is passed to `env` and it's complaining about that.

You can inspect the published package using `npm view git-mob latest dist.tarball` and see the issue for yourself (the files are inside `bin/*` of the tarball).

Since this effectively means this tool is broken for everyone on unix (which is, presumably, what that shebang line is for in the first place), I figured someone must have already reported the issue. To my surprise, everyone else seems to be running this tool just fine without issues. I tried following the instructions and install it via `npm install -g` without volta, and surprisingly, it worked.

When I inspected the files installed by `npm`,  I noticed that all the CRLF in the files are still present – except in the shebang line. This leads me to believe that this must be a common-enough problem that npm (and probably yarn) already corrects for (specifically, shebang lines that ends in CRLF in "bin" files). Because I am using volta to install the tool, it is also bypassing the correction that npm/yarn would have performed.

So, I think `volta install` should also do the same fix automatically, even though it is ultimately a mistake by the package maintainer.
From a discussion on Discord: While in most cases, a shim delegating to a local version of a tool (specified in `dependencies` or `devDependencies`) makes sense, there are some use-cases where the user explicitly wants to use the default version of the tool.

In those cases, we should have some method for the user to tell Volta how to resolve the binary, overriding the default triage that would normally be performed.
It does not seem like Volta can detect system installations of tools. In my case, I already had Node and Yarn installed via Homebrew, and I noticed that Volta does not list them.
When you use `volta install` to install a package binary from NPM, volta chooses a node version to pin to that package using the following rules (from the docs):

> If the package has engines specified in package.json, use the latest LTS version of Node that meets the requirements
> If no LTS versions meet the requirements then use the latest overall version that satisfies engines
> If engines isn’t available, use the most recent LTS version of Node

This often results in a good choice. However, sometimes you need to pick a different version than volta would have picked to workaround bugs. For example, if a dependency of the binary is broken under latest node, there is currently no supported way to downgrade.

A current workaround is to manually edit json files under `~/.volta/tools/user/bins` and `~/.volta/tools/user/packages`.

A related issue is that the only supported way to upgrade the pinned node version is to uninstall and reinstall the package binary. A solution to the downgrade problem could probably be designed to also offer upgrades, without needing to reinstall the whole package binary.
Recently, openssl-sys added support for libressl. The openssl crate already had that support for some time. So please add the support.
This is an alternative approach to the sourcing, achieving the same goal as #625, but in a different way:

* `PlatformSpec` is now a trait, which exposes methods that return the various sourced versions.
* Concrete structs now exist for `DefaultPlatformSpec`, `ProjectPlatformSpec`, `BinaryPlatformSpec`, and `MergedPlatformSpec`, each of which has simpler creation semantics since the sources are known ahead of time.
* This makes creating a `PlatformSpec` more ergonomic, since you create the specific concrete type.
* It also allows for more type-safety, since we can ensure that `Project` only ever contains a `ProjectPlatformSpec`.
* The read-side of things is about the same as in #625, but that wasn't a problem ergonomically anyway.

@chriskrycho Thoughts on which is more usable / understandable?
As part of support for installing / pinning `npm`, we need to handle all combinations of the Versions in `PlatformSpec` coming from different sources. Currently we handle sources with a single enum that only supports 3 values: `Project`, `Default`, and `ProjectNodeDefaultYarn`. This was already unwieldy and adding support for new Package Managers will result in an exponential expansion in the variants of the enum.

Instead, we want each Version to have an associated `Source`, independent from the other versions, so that each tool can specify where it came from easily. This should also simplify the merging logic by removing the need to set a top-level "Source" value.
[As of now](https://github.com/prisma/prisma2/issues/1054), Volta looks into the `devDependencies` of a package, that is being installed through `volta install`.

However, by definition, these `devDependencies` don't need to be installed for a library, so it would be great, if volta would ignore these.

This would fix the situation, that a version scheme is being used, which Volta doesn't know, in the linked issue, it's the `workspace:` version protocol, supported by yarn and pnpm.

It's a separate issue, that this `workspace:` protocol shouldn't even end up in the `devDependencies`, which is being tracked here: https://github.com/pnpm/pnpm/pull/2203
Using Volta to add the NPM package `empty-trash-cli`, this is my console output

```bash
alexdiliberto@AlexBookPro: ~/.volta/bin
$ volta install empty-trash-cli
Package empty-trash-cli@1.0.1 is already installed

alexdiliberto@AlexBookPro: ~/.volta/bin
$ which -a empty-trash 
/Users/alexdiliberto/.volta/bin/empty-trash

alexdiliberto@AlexBookPro: ~/.volta/bin
$ VOLTA_LOGLEVEL=debug RUST_BACKTRACE=full empty-trash 
Volta error: Could not determine path to executable 'empty-trash'

Please rerun the command that triggered this error with the environment
variables `VOLTA_LOGLEVEL` set to `debug` and `RUST_BACKTRACE` set to `full`, and open
an issue at https://github.com/volta-cli/volta/issues with the details!
[verbose] Error cause: No such file or directory (os error 2)

stack backtrace:
   0: backtrace::backtrace::trace::haa64515333367434 (0x1022ac55c)
   1: backtrace::capture::Backtrace::new_unresolved::hed822f3deb5bab22 (0x1022ab848)
   2: failure::backtrace::internal::InternalBacktrace::new::he4e485359fae4acb (0x1022aaf85)
   3: <failure::backtrace::Backtrace as core::default::Default>::default::h047799f9c4ee0416 (0x1022ab185)
   4: <E as volta_fail::FailExt>::with_context::h5ddf5cb489fd6bf0 (0x101f6ea2d)
   5: volta_core::tool::package::bin_full_path::hc23047158f24eb23 (0x101f4be4b)
   6: volta_core::run::binary::DefaultBinary::from_config::h2f62779c68c56def (0x101f51b68)
   7: volta_core::run::binary::DefaultBinary::from_name::h5f4673d41c3767e8 (0x101f522bf)
   8: volta_core::run::execute_tool::h0d31734251e3d5e5 (0x101f52f5b)
   9: shim::execute::run_shim::h8d9fb7c8ec58508f (0x101f03ef3)
  10: std::rt::lang_start::{{closure}}::h1b9027d55f6f07ad (0x101f02e86)
  11: std::panicking::try::do_call::ha1a4587e2a4eb439 (0x1022c8428)
  12: ___rust_maybe_catch_panic (0x1022d0e0f)
  13: std::rt::lang_start_internal::hcf96e32a124891dc (0x1022c8ece)
  14: _main (0x101f02b39)
Error details written to /Users/alexdiliberto/.volta/log/volta-error-2019-11-29_14_38_46.478.log
[verbose] No custom hooks found

```
Volta uses the `.volta` directory to store state about the user's settings as well as cached tool installs. However, we currently don't make any guarantees around concurrent access to that state. While most access is read-only (running a shim after you've already downloaded the versions), it is possible to have multiple processes trying to modify the directory at the same time (e.g. two different commands trying to download the same version of `node` concurrently). Additionally, with the introduction of migrations, there is an additional set of possible mutations that can happen on multiple simultaneous invocations of Volta or one of the shims.

Given the potential for conflicting changes to the Volta directory, we should try to perform any mutations in an atomic and concurrency-safe way, so that we don't wind up overwriting the same location with multiple processes.

The goal should be that we can recover from any failure in a way that prevents corruption to the Volta directory. Corruption here means that there is no way for us to detect and fix the problems programmatically. We should also try to provide a `volta repair` command that can recover from the more complicated of such situations and get Volta back into a working state for the user. We want them to neither have to manually edit files / directory nor file an issue, but rather people able to recover based on the tools that Volta itself provides.