Hi Dear,

SwiftMessage is working on iOS 12 and below , Simulator.
After update my phone in 13.2 then app will be crashed, Please le me explain how to resolved this issue.

Find  the snap-short.

![Screenshot 2020-01-06 at 12 43 09 PM (2)](https://user-images.githubusercontent.com/41286397/71802363-7fba8280-3083-11ea-88fb-efe0c4ee1268.png)


I couldn't find anything regarding support for multiple windows in iOS 13 (see https://developer.apple.com/videos/play/wwdc2019/212/), am I right?

Would be great to see another `SwiftMessages.PresentationContext` case to specify the scene window. In the meantime I'll try to hack something or use the `viewController` context.

BTW: Really loving Swift Message! Great work!


Is there a simple way to control the animation speed. I can extend the Animator and copy it over and change the value, but in doing so I lose the `Presenter` logic which looks for `.bottom`. Now I need to copy over vast quantities of code just to make the hide animation the same length as the show.

Is there a simple way to a simple change the animation duration?
Is it possible to make it compatible with Swift Package Manager ?
Thanks!
when message show on my iPad Pro(11-inch), the whole UI doesn't respond to touch event; but it's OK on iOS13.1 simulator. The code below: 

var config = SwiftMessages.defaultConfig
config.presentationContext = .window(windowLevel: .normal)
config.preferredStatusBarStyle = .lightContent
config.duration = .seconds(seconds: 3)

SwiftMessages.show(config: config)
Select "case viewController(_: UIViewController)",  and set duration == .forever. When dismiss or pop vc, we get retain cycle.
I'm not sure if this is the way you prefer to solve it, but this fixes https://github.com/SwiftKickMobile/SwiftMessages/issues/355 by introducing a new message type.
We use `CardView.xib` to display a pure text message, without an icon, title or button. We set the body label's text alignment to `center`, since we want the text centered in the card.

The problem is that the content is only centered when the text is long enough to wrap over two lines. We can fix this by opening `CardView.xib` and set `Alignment` to `Fill` for the vertical, innermost stack view.

We considered a couple of ways this could be done, but ended up in that it would be nice to have a "pure text card" view, for which the content is centered. We will add such a xib to our project now, but it would be nice if the library could include such a xib as well.
So I guess we're all currently in the phase of stumbling all over weird kinks of iOS 13.
The app I'm working on right now is not dark mode ready, so we overrode the user interface style in our app delegate:

    if #available(iOS 13.0, *) {
        window?.overrideUserInterfaceStyle = .light
    }

This does the trick, however at one place we use SwiftMessages like this:

    private func openAmountPicker(withInitialAmount initialAmount: Int) {
        var config = SwiftMessages.Config()
        config.presentationStyle = .bottom
        config.presentationContext = .window(windowLevel: .statusBar) // <-- the important bit
        config.duration = .forever
        config.dimMode = .gray(interactive: true)
        config.interactiveHide = false
        config.preferredStatusBarStyle = .lightContent

        let picker = AmountPicker() // <-- view containing a picker view and a close button
        picker.initialAmount = initialAmount
        picker.delegate = self
        SwiftMessages.show(config: config, view: picker)
    }

Now if my phone is set to dark mode iOS will try to use dark mode colors for UI elements inside even though I overrode the user interface style for the window.
If I use `.view(someView)` for `presentationContext` the label colors in the view are back to what they should be as the `someView` is inside the window defined in the AppDelegate and that is forced to `.light` mode.

So I guess that SwiftMessages creates a new window for `.window` and doesn't copy over the `overrideUserInterface` value.

Now the question is whether this is a bug or not. Difficult to say, but it definitely is behavior one wouldn't neccessarily expect.
`SwiftMessagesSegue`'s `messageView` is a `BaseView`, and since `BaseView` does not conform to `AccessibleMessage`, presented view controllers will not be accessible via Accessibility Inspector or Voice Over.

I implemented a subclass of `BaseView` that does conform to `AccessibleMessage`, and set it to the `messageView` property of `SwiftMessagesSegue`. This should work in most cases...

Expect where the presented view controller is wrapped inside of a `UINavigationController`.

During the `install` phase of `Presenter`, the `UINavigationController`'s rootViewController is not added to the `messageView`'s view hierarchy yet, and the elements are also not exposed.

Any thoughts or suggestions?
