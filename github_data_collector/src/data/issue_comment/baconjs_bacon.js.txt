It swallows `startWith` and `mapEnd` values:

### expected behaviour
Calling `.startWith` or `.mapEnd` multiple times on a stream injects those values just fine in the right order:
```javascript
Bacon.fromArray([1, 2, 3])
.startWith(-1)
.startWith(-2)
.mapEnd(10)
.mapEnd(11)
.flatMap(x => Bacon.once(x))
// -> -2, -1, 1, 2, 3, 10, 11
```
### observed behaviour
```javascript
Bacon.fromArray([1, 2, 3])
.startWith(-1) // <- missing after flatMapLatest(Bacon.once)
.startWith(-2)
.mapEnd(10) // <- missing after flatMapLatest(Bacon.once)
.mapEnd(11)
.flatMapLatest(x => Bacon.once(x))
// -> -2, 1, 2, 3, 11
```

I'd expect `.flatMapLatest(Bacon.once)` to behave like `.flatMap(Bacon.once)`.

Somehow the following `startWith` and `mapEnd` events are delivered too quickly to allow `Bacon.once` to emit just it's only value.
I'd like to discuss the things I've done here. It's not very elegant and more the brute force (speak: shell scripts) code.

Good things first:
- In another test step all existing unit tests are transpiled to use the new aggregated ES6 module `dist/Bacon.mjs`.
- Those tests identified another issue in `src/topromise.ts`, where the TS compiler did generate ES6 code which breaks when invoked. (This again underlines that one **cannot blindly trust the TS compiler output**, and running tests on the dist files may always be necessary. Personally I find this really scary. - Didn't they always say, TS was compatible to JS?)
- Unit tests all green üçè 

Lacking much TypeScript or Chai knowledge and being new to ES6 modules, these bad things happened:
- Transpiling unit tests takes ages
- Transpiling to a directory inside the test sources may be not wise.
- In the preparation shell script I had to "fix" some import paths using a hammer, i.e. `sed`
- Cleanup shell script uses some scary `rm` instructions. (At least I did not `rm -rf` though.)
- I struggled with `Bluebird`'s and `zen-observable`'s module format when used as custom Promise constructor and "Standard ES Observable" (will there ever be such a thing? Still at proposal Stage 1, last presented July 2017 :-/ ) in the tests.
Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/baconjs/bacon.js/network/alerts).

</details>
- For consistency the seed value is optional in `.fold` and `.scan` too.
- Type signature for `.fold` and `.scan` similar to the proposed signature of `.flatScan`.
- Implementation of `.scanSeedless` is rather naive. 
    - Maybe that's why I had to mark many unit tests `unstable` ("switching aggressively" mode did always fail - don't know why)
    - In doubt what `UpdateBarrier.whenDoneWith()` is, so I simply removed it for `.scanSeedless`
- Duplicated most unit tests to check the seedless methods.

TODO: Update documentation
This is probably not exactly an issue with bacon itself but since I'm new to FRP I would like to hear opinions.

For the project I'm working on I came to a stage where I need a kind of feedback mechanism. Since I still think mostly in imperative programming terms, I can't figure out a way to avoid it.

Basically I have a simple `Requests` stream that has to be transformed into `Responses` stream. This is a node.js project and the requests are actually send over a serial port, thus requests have to be send synchronously. So far I have used `.flatMapConcat()` which did great in queuing the requests and dispatching them one by one.
But for some technical reasons I have to avoid the queue. I'm not going into details but in short, in specific situations the requests have to be dispatched either immediately or not at all (let's say that executing the queued requests _later_ is of no use).

Of course the logical thing is to use `.flatMapFirst()` which does exactly the above. My problems started when the requirement emerged that the dropped requests have to be redirected to another stream - for simplicity, let's say to a logger.

I created a property which indicates whether there's an active request and tried to modulate the request stream with it. Here's a simplified diagram:
![image](https://user-images.githubusercontent.com/9365881/60326167-c1aa9380-9991-11e9-9c43-987ee2202bbf.png)


The problem with this approach is that it introduces a _cyclic dependency_. When I try to run this I get stack overflow:

```
RangeError: Maximum call stack size exceeded
    at flushDepsOf (...\node_modules\baconjs\dist\Bacon.js:457:21)
    at flushDepsOf (...\node_modules\baconjs\dist\Bacon.js:463:9)
    at flushDepsOf (...\node_modules\baconjs\dist\Bacon.js:463:9)
```

I found a way around this by breaking the dependency chain by separating the flow graph with a `Bus()`:
![image](https://user-images.githubusercontent.com/9365881/60326136-b0fa1d80-9991-11e9-8677-e96f567d2990.png)


This works as expected since `busy` no longer seems to be dependent on `Requests`. But it's little ugly of course.

I looked into the code related to `flushDepsOf()` and the problem is that the `flushed` map gets filled in for a given observable only when all it's dependencies are flushed. Of course if the same observable is found somewhere within these dependencies it becomes infinite recursion.

I tried moving the [`flushed[obs.id] = true;`](https://github.com/baconjs/bacon.js/blob/d135be0a82223f1ade3559d5d811fd8e4c9f90be/src/internal/updatebarrier.ts#L169) line _before_ iterating through the dependencies. This of course avoids the infinite recursion but probably can cause troubles in some cases.

This is my first ever work with FRP so I don't really know what I'm up against here.

First: is cyclic dependence really a sign of wrong approach to the problem? Feedback mechanisms exist in all domains of engineering, programming, etc, so probably it should be allowed in FRP too. If it is not, is there some trick that can rearrange the flow in a such a way that cycles can be avoided (so far I haven't thought of one)?

Second: if cyclic dependencies are _not_ strictly forbidden, does this mean that bacon can be improved to better handle them (like the solution with moving the `flushed` line above)?

Thank you!

`Array.filter` can change the type of the array when passed [a user-defined type guard](https://www.typescriptlang.org/docs/handbook/advanced-types.html#user-defined-type-guards). See for example this:
```
// this gets inferred as (number | string)[]
const numberOrStringArray = [1, 2, 'jee']
// this is inferred as number[] thanks to the type guard
const numberArray = numberOrStringArray
  .filter((x): x is number => typeof x === 'number')
```

Could `Observable.filter` support a similar type guard? The type definition for `Array.filter` in the example is:
```
filter<S extends T>(callbackfn: (value: T, index: number, array: T[]) => value is S, thisArg?: any): S[];
```
If just the reducer function is given, the first value of the source stream will be passed as initial event of the resulting Property and used as the left argument when the reducer is first invoked on the second source event. 

I've found this useful to save meaningless lines of code. It should be easy understand because JS users are familiar with `Array.reduce` where the seed value is also optional. It should also be 100% non-breaking.

```javascript
Bacon.fromArray([10, 20]).flatScan((a, b) => a + b).log();
// --> 10, 30
```
If you are in favour of this change, perhaps `.scan` should be extended as well.

#### Remarks:
* I've found it very difficult to please the TypeScript's type checking. Because the first parameter to `.flatScan` is mow "multi-morphic" (i.e. a value or a function). Which IMO is naturally for dynamic JavaScript however TypeScript makes it really hard to enable this at all?
* I've not updated the documentation yet.
My superficial issue is to document explicitly that the side-effect `f` in [`observable.onValue(f)`](http://baconjs.github.io/api2.html#observable-subscribe) like `observable.subscribe(f)` has the ability to cancel its subscription of stream updates by returning `Bacon.noMore`. 

After hours of debugging (see code example below) this really came as a surprise for me because I've never had an event consumer function to update the event flow logic. Up to now I did not care what my side-effects return: Promises, Strings or whatever...

Is this an API which is worth supporting? I mean: 
- Does this encourage good programming practise?
- Can this break for innocent-looking side-effect functions? (E.g. returning a WebComponent tag which could be `<no-more>`, or the example below ?)

Breaking a stable API is bad but IMO this feature is dangerous. 

What does everybody think?

Here my example of two nested `Bacon.fromBinder`s. Can you spot why `outerStream` is unsubscribed even though nobody calls `unsubscribe` or returns `Bacon.noMore` explicitly? 
```javascript
var outerStream = Bacon.fromBinder(function myOuterBinder(sinkOutside) {
    const innerStream = Bacon.fromBinder(function myInnerBinder(sinkInside) {
	 	// quasi sinking sinkInside into sinkOutside
	 	setTimeout(sinkOutside, 2000, sinkInside);
		return () => console.log("cleaning inner"); 
	});
	innerStream.take(1).onValue(x => console.log("inner consumer", x));
	return () => console.log("outer clean up");
});
outerStream.onValue(f => f("inner value")); // f is sinkInside actually
/* The output is:
cleaning inner <-- OK because take(1)
inner consumer inner value <-- OK
outer clean up  <--- THIS WAS A SURPISE! 
*/
```
The solution begins with that `sinkInside` of the inner stream's binder returns `Bacon.noMore` because of `take(1)`. This is then fed to the outer stream's `.onValue()` side-effect invoker by the ES6 arrow `=>` function in the last line.

I could blame it on ES6 arrow functions because re-writing the side-effect to a "regular" function expression fixes the behaviour. 
```javascript
// ...
outer.onValue(function(f){ f("inner value"); });
/*
cleaning inner
inner consumer inner value
*/
```
However, if someone comes along and refactors it back into an arrow function the bug reappears!
I've read (and answered to) numerous complaints that code involving `bus.toProperty()` "does not work". And I totally agree that it's counterintuitive that something like [this (from Bacon FAQ)](https://github.com/baconjs/bacon.js/wiki/FAQ#why-isnt-my-property-updated) does not work:

```javascript
var bus = new Bacon.Bus;
var property = bus.toProperty('FIRST');
bus.push('SECOND');
property.onValue(function(val) {
  console.log(val);
});
```

You'd like the console to log 'SECOND' but it logs 'FIRST' instead.

What's happening here is that your Property won't get updated when there are no listeners. Before you add an actual listener using onValue, the Property is not active; it's not listening to the underlying Bus. It ignores input until someone's interested. So it all boils down to the "laziness" of all Bacon streams and properties. This is a key feature too: the streams automatically "plug in" to their sources when a subscriber is added, and "unplug" when there are no more subscribers.

A simple patch for this would be to have `Bus::toProperty()` always add a dummy subscriber to the resulting Property. Then, again, it would fail in setups like this:

```
bus.map(x => x*2).toProperty();
```
... so it's not such a great patch after all. Or is it? Because if you flipped it like 

```
bus.toProperty().map(x => x*2);
```

it would be good again!

The underlying problem is that the subscriber-count-based mechanism for change propagation in Bacon.js doesn't serve you well in cases when you create a stateful Property on top of a stateless EventStream unless you always have at least one subscriber on the Property.

One option I'm half-seriously considering is to have Properties throw an error in cases where you re-subscribe after the last subscriber has been removed. This is probably always a bug in application code, because it can lead to propagating outdated values.

Thoughts?

