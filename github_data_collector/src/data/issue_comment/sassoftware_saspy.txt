**Describe the bug**
I am reading in datasets with columns that have dates/times with 'funny' formats.  In the first column `filedate` has dates like `11MAR2016` .  In the second column `filetime`, only contains the time no date like 16:34:04.  When I read in the dataset to saspy, convert it to a dataframe, and then convert it back into a sas7bdat dataset the `filetime` has changed. Instead of remaining with a count up from POSIX time, it is converted to today's date at the same time.  SO before it was 01/01/1970 16:45:32 it becomes 1/14/2020 16:45:32 (today's date).  


**Expected behavior**
I would expect the time to remain a count up from POSIX time and not have today's date added to the time stamp

**Screenshots**

**before:**
![image](https://user-images.githubusercontent.com/866921/72395821-9ac66b80-36ef-11ea-947d-1dc44b1d6ba9.png)
`without formats`
![image](https://user-images.githubusercontent.com/866921/72395845-ab76e180-36ef-11ea-9be1-2a1041d4443b.png)


**After:**
![image](https://user-images.githubusercontent.com/866921/72395890-c77a8300-36ef-11ea-9a53-bb8287ffc620.png)

`without formats`
![image](https://user-images.githubusercontent.com/866921/72395952-f5f85e00-36ef-11ea-8a5d-c20047a19d05.png)

I can provide sample datasets, for troubleshooting if desired. 

**Desktop (please complete the following information):**
 - OS: Linux
 - SAS Version: 9.04.01M2P07232014
 - SASPy Version: 3.1.9

**Additional context**
Add any other context about the problem here.

**Describe the bug**
**I attempted to use the proc generation code to add proc STDIZE to the sas stat object. I successfully added the proc statement but when I run the function I get the following error:** 

95666      %macro proccall(d);
95667      proc stdize data=WORK._df plot=all  ;
95668      var age education_num capital_gain capital_loss hours_per_week;
95669      run; quit; %mend;
95670      %mangobj(std0002,stdize,_df);

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Libref STD0002 was successfully assigned as follows: 
      Engine:        BASE 
      Physical Name: C:\Users\negraj\AppData\Local\Temp\SAS Temporary Files\_TD9068_l10c252_\Prc2\f505db6e-0104-4dbd-8385-81e01878c6a4
NOTE: Line generated by the invoked macro "PROCCALL".
95670                proc stdize data=WORK._df plot=all  ; var age education_num capital_gain capital_loss hours_per_week; run;
                                               ____
                                               22
                                               76

ERROR 22-322: Syntax error, expecting one of the following: ;, (, ADD, DATA, FUZZ, INITIAL, KEEPLEN, METHOD, MISSING, MULT, NMARKERS, NOMISS, NORM, OPREFIX, OUT, OUTSTAT, PCTLDEF, PCTLMTD, PCTLPTS, PSTAT, REPLACE, REPONLY, SNORM, SPREFIX, UNSTD, 
              UNSTDIZE, VARDEF.  

ERROR 76-322: Syntax error, statement will be ignored.

**I took a deeper look at the documentation and I thought I needed to add the method statement to specify my option (even though it should default to std). So I went ahead and added it and then I got the following error message:**

95648      %macro proccall(d);
95649      proc stdize data=WORK._df plot=all  ;
95650      method std;
95651      var age education_num capital_gain capital_loss hours_per_week;
95652      run; quit; %mend;
95653      %mangobj(std0002,stdize,_df);

NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

NOTE: Libref STD0002 was successfully assigned as follows: 
      Engine:        BASE 
      Physical Name: C:\Users\negraj\AppData\Local\Temp\SAS Temporary Files\_TD14128_l10c252_\Prc2\368cd448-ca55-43cb-b877-9d6cbe0b9f3c
NOTE: Line generated by the invoked macro "PROCCALL".
95653                proc stdize data=WORK._df plot=all  ; method std; var age education_num capital_gain capital_loss hours_per_week; run;
                                               ____        ______
                                               22          180
                                               76

ERROR 22-322: Syntax error, expecting one of the following: ;, (, ADD, DATA, FUZZ, INITIAL, KEEPLEN, METHOD, MISSING, MULT, NMARKERS, NOMISS, NORM, OPREFIX, OUT, OUTSTAT, PCTLDEF, PCTLMTD, PCTLPTS, PSTAT, REPLACE, REPONLY, SNORM, SPREFIX, UNSTD, 
              UNSTDIZE, VARDEF.  

ERROR 180-322: Statement is not valid or it is used out of proper order.

ERROR 76-322: Syntax error, statement will be ignored.
The method statement has been separated from where it should be:

Proc stdize data= WORK._df method= std;
Var â€¦.
Run;

**So after messing around with the statement I decided to go back to SAS and try it out:**

proc stdize data=SASuser.test_data;
      var age education_num capital_gain capital_loss hours_per_week;
run;

**This statement ran correctly. I did not need to include the method statement as it defaults to STD. So I decided to try and run the statement from SASPy in SAS to see if I got the same error message:**

proc stdize data=SASuser.cendata6 plot=all;
      var age education_num capital_gain capital_loss hours_per_week;
run;
808  proc stdize data=SASuser.cendata6 plot=all;
                                       ----
                                       22
                                       76
ERROR 22-322: Syntax error, expecting one of the following: ;, (, ADD, DATA, FUZZ, INITIAL,
              KEEPLEN, METHOD, MISSING, MULT, NMARKERS, NOMISS, NORM, OPREFIX, OUT, OUTSTAT,
              PCTLDEF, PCTLMTD, PCTLPTS, PSTAT, REPLACE, REPONLY, SNORM, SPREFIX, UNSTD,
              UNSTDIZE, VARDEF.
ERROR 76-322: Syntax error, statement will be ignored.

**It seems the statement has an issue with the plot=all statement. Now I am unsure why that statement is there but it seems to be causing the error. So I am reaching out to see if you may have an idea on what could be causing this issue.** 


**To Reproduce**
Steps to reproduce the behavior:
1. Follow the instructions to add proc stdize to SASPy
2. Attempt to use stdize function from the sas stat object
3. observe the error in the log
4. 

**Expected behavior**
the procedure should normalize the data

**Screenshots**


**Desktop (please complete the following information):**
 - WIN 10
 - SAS 9.4 TS1M3
 - SASPy Version: 2.4.3

**Additional context**


Setup:
```
import saspy
sas = saspy.SASsession()
ets = sas.sasets()
air = sas.sasdata('air', 'sashelp')
outAir = sas.sasdata('air')
```
Call the method:
```
b = ets.arima(data=air, identify='var=air(1,12)', out=outAir, procopts='plots=none')
```
The code produced is this:
```
Proc code submission:
 %macro proccall(d);
proc arima data=sashelp.air plot=all out=output out=WORK.air
; plots=none ;
identify var=air(1,12);
run; quit; %mend;
%mangobj(ari0002,arima,air);
```
Which is wrong. I'll fix it after my other PR.

**Desktop (please complete the following information):**
 - OS: [All]
 - SAS Version: [All]
 - SASPy Version: [2.4.0]

From #136 we've found at least 2 issues with %%IML. The original issue was that there was no output. I get the log displayed, but that wasn't being displayed for the user.
Trying to see the log (via saslog()), we tried to share the session we already had, via the new ability to pass a SASsession object to %%SAS. We found the following 2 issues.

1) %%SAS has to be submitted before %%IML else there is no SASsession for IML to use. It fails with a traceback, since self.mva is None. self.MVA is only ever set in %%SAS.
2) If passing a SASsession to %%SAS, %%SAS uses that session only for that one submission, and self.mva is still not set. So the subsequent %%IML still fails with traceback as self.mva is None.

These magics ought to be reworked so they can share the sessions correctly.
Tom