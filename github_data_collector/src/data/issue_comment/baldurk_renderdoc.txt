##  Description

renderdoccmd crashes on Linux-based systems when performing simple commands like 'thumb' or 'extract'. The problem lies with the fact that all the command's Execute method calls RENDERDOC_InitGlobalEnv() which starts a new thread which call into graphics driver to enumerate devices and whatnot.

The main thread may process and quit quickly since extracting a thumbnail or section of .rdc file could be relatively fast operation, compared to all the work that the thread started from RenderDoc::ProcessGlobalEnvironment() is doing.

When the main thread finishes before the secondary one, C++ runtime starts executing global destructors. Some GPU drivers might have global C++ objects as well and while main thread call global destructors, the secondary thread might still be running and still use those globals, leading to segfaults.

Technically, we should probably wait for that thread to terminate before exiting renderdoccmd. So, calling RenderDoc::SyncAvailableGPUThread() before exit would solve the problem but it is not available through public API at the moment.

## Steps to reproduce

execute the following command (reproduced on Stadia platform):

> renderdoccmd extract --section=renderdoc/internal/exthumb --file=exthumb.bin frame.rdc

## Environment

* RenderDoc version: 1.6 (commit 9ff7b04f6fa3ae5cb54ebd84a73fe3de2ea940a2)
* Operating System: Stadia
* Graphics API: Vulkan


Hi I have implemented the unit test for the backdoor context. I noticed that with my setup of NVidia Quadro P4000 running on Win10 that wglMakeCurrent would randomly fail. After a little bit of trial and error I stumbled upon a solution; please let me know if the solution is a good idea or not.
This implements the backdoor context so that resources created by non-current contexts can be retrieved and serialised.
## Description
When debugging data layout of cbuffers, it could be handy to see the offsets the shader expects for certain cbuffer elements. You can view the buffer's contents, but this is the data that is uploaded by the cpu and can mismatch what the gpu expects. 
I tried finding this feature, but I couldn't find it in RenderDoc v1.5

## Steps to reproduce
Open up a cbuffer, it would be nice to see a column besides Name, Value, Type that said Offset. Since this is already present in RenderDoc, it should be doable to display that (since it looks up the memory at that offset in the buffer).

## Environment
* RenderDoc version: v1.5 (built from https://github.com/baldurk/renderdoc/commit/a94f238e37cfe2f142093eb8e5da7775abaa88c6)
* Operating System: Win10 1809 17763.914
* Graphics API: D3D12 11_0
## Description

This PR merges the `ImageLayouts` and `ImgRefs`, and additionally

- Adds support for the VK_KHR_separate_depth_stencil_layouts extension
- Adds correct image-subresource queue family tracking

Most of these changes are currently behind an off-by default compile time flag (RDOC_NEW_IMAGE_STATE).

I intend to do more testing, and I would like to add some more explanation for some of the changes here, but tests are passing (unit tests, python tests, and manual tests on games), and I don't expect to need any more big changes to this code. I wanted to get the PR rolling so that it can hopefully make it in time for the next release.
## Description

With D3D11/D3D12, the texture viewer overlays referencing a "pass" span all draws with the same set of render targets. Often it is unclear where the beginning of this pass actually is.

Having a visual and/or text indicator to inform where the pass begins would help. This could be information in the status bar of the texture viewer, or highlighting rows in the event browser that correlate to the draws occurring after the clear.

## Environment

* RenderDoc version: latest from source (currently 82745ce56262bd313ea2c9d83b0802fcee99bfeb)
* Operating System: Windows 10
* API: D3D11, D3D12
## Description

It would be great if I could configure breakpoints in the shader debugger to not break, but only increase their hit count.

I guess with that would come a little debugger UI revamp, i.e. add a little additional breakpoint panel which lists all breakpoints, let's me enable and disable them and show me the current hit count.

https://docs.microsoft.com/en-us/visualstudio/debugger/using-breakpoints?view=vs-2019
https://renderdoc.org/docs/how/how_debug_shader.html

I prototyped a hack that replaces textures with checkerboard pattern for DirectX 11. A lot of people showed interest in this and I decided it's worth making a feature request.

The way it works in my hack is by supporting a set of replaced ResourceIds and a cache for ResourceId->SRV and then checking for that mapping in places like [this](https://github.com/baldurk/renderdoc/blob/4b2d753521c029fdd0bfeb3bb651651237c52e72/renderdoc/driver/d3d11/d3d11_context_wrap.cpp#L2788) for VS, CS and PS. The result is that the replacement texture now appears on all render targets and on the thumbnails. It doesn't alter the UAVs and RTVs, just SRV replacement.

I don't have enough experience with the sources so I don't know what is the best architecture for such a feature. But I do have an approximate list of UI knobs:
* Select the checkerboard parameters: 1st value, 2nd value, step in pixels
  * Not sure how to set up values for different types. In my example I restricted to 32bit per pixel
* Select the checkerboard format i.e. R32_FLOAT, R8G8B8A8_UNORM etc
* A button to remove all replacements
* A button to update all replacements with new parameters
* A context menu item for the selected texture 

A more advanced approach would be to dispatch a compute shader and bind the copied texture as a UAV, in that way the user can choose it's own pattern or even replace only part of the texture without being restricted to the checkerboard. This is similar to the custom visualization shaders with an extra step of replacement.

Thanks

Example(the captured frame is unrelevant):
https://youtu.be/mwFNchuA4jc

## Feature Request

#### Background

A lot of times I find myself trying to figure out why something is not rendering when it should or rendering when some other unrelated state is active. In order to investigate the issue I take multiple captures and have to manually compare their event browser draw calls and/or renderer state. This takes time because of the loading and unloading of captures and when there are many events in the browser.

#### Feature

It would be nice to have a feature that could, at the very least, **compare two captures' events or draw calls and list what is different between them.**

## Description

___NOTE: Metal or iOS support is not planned at the moment and I can't say anything about when I might look at it. Please keep discussion here to GL & Vulkan issues as that's the scope for an initial shipping version.___

As found in the [survey I ran at the end of 2018](https://renderdoc.org/survey-2018) there is a noticeable segment of users who strongly want macOS support. I've looked into what would be involved and done some initial work, but I have no familiarity with macOS so input and assistance from domain experts would be very helpful here.

This issue tracks any known problems or missing features on macOS, with an aim to stabilising it enough to ship in an official build. As of c289290ffa5956fdcaacb874a76ad83089749c86 the build should be considered early alpha: It works well enough for the basics on Vulkan, GL, etc, but certainly requires a lot more work before it ships. I currently have no planned timeline for when mac support would ship and it remains medium priority, so these things will get fixed as/when I have time.

Any help with any of the below - particularly the very mac specific issues like sorting out building and packaging - would be greatly appreciated. 

* [ ] The build needs significantly more testing and bugfixing. At the moment I've really only tried it on a handful of demo programs, so more real-world testing is desperately needed. If you have any non-trivial projects please share them so I can use them for testing.

    This also just means testing the build for any weird UI bugs or strange behaviour on mac. E.g. I seem to sometimes get 'sticky' context menus where right clicking will pop one up but then left clicking will continue to pop it up. This might be a holdover of mac not really having right clicking as a very native concept?
* [ ] On GL we always create a 4.1 core context whenever we need one. In theory we should work OK on 3.3 as well - is it necessary to detect what versions are available and downscale, or are 3.3 devices/OSs not relevant anymore?
* [ ] Key input in the injected application for triggering captures is not supported yet, so the only way to trigger captures is via the UI. I'm not sure what library/input method is best for minimally-intrusive keyboard input in windows created by the application that I don't control.
* [ ] High-DPI screens aren't handled properly in at least the GL overlay, we need to detect the DPI scaling factor and multiply up the detected window bounds and the size of the rendering.
* [ ] High-DPI screens may also have issues with sizing widgets in the UI, and with rendering displays on at least GL and maybe Vulkan.
* [ ] When launching .app folders we need to parse the Info.plist to determine the executable to launch.
* [ ] A couple of key functions in GL rely on compute shaders which thus aren't implemented on macOS. Namely: min/max texture range, histogram, and mesh picking. The simplest workaround is just to emulate on the CPU and take the performance hit on that, but it's possible the min/max/histogram shaders could still run on the GPU with pixel shaders doing a smaller downsample pyramid.
* [ ] Performance in the UI seems very slow for some reason. I don't know if it's because of my hardware though.
* [ ] renderdoccmd has some stubs that need to find a way to create a window on apple to display previews.
* [ ] Is there a minimum macOS version that should be tested against? what about minimum hardware support? Currently I only have one apple device - a mid-2013 macbook air running 10.14.3. This is probably close to the minimum end on hardware I'd guess but it's the latest OS.
* [ ] Some dialog boxes in the Qt UI have a large question mark - I don't know if that's normal for the OS or if that's a missing resource/setup on my side to provide RenderDoc's icon.
* [ ] Currently the Xcode generator in cmake doesn't produce a working build. It seems to run into issues with the GL/vulkan driver projects and doesn't build them correctly.
   
  If there is a simple/minimal impact fix to get this working then that would be great, but since it compiles fine on the command line this isn't critical.
* [ ] Some modern mac programs are likely to require OpenCL interop for compute, which would need at least minimal hooking to serialise data at sync points (similar to the DX interop).
* [x] There seems to be an issue with MVK not getting initial contents of PREINITIALIZED linear images - which repros with vkcube. The memory has the right contents but the image isn't handling properly.
* [x] Related to the above, there are GL warnings that fire when opening a capture that indicate 'degraded hardware support'. We should hardcode these to never fire on mac as the support is software related not hardware, and will never appear later so there's no point annoying users about it.
* [x] macOS GL contexts are assumed to be core contexts, but it's valid (and the default) to create a legacy 2.1 context. We should be able to detect this from the attributes in a pixel format on creation
* [x] There's no package build process for macOS.

    At the moment the cmake build produces a qrenderdoc.app, but it also needs to package the vulkan loader and a MoltenVK build as backup, and also include android apps. I don't know if anything else is expected to be packaged in a macOS binary that's packaged up, and I don't know how such a package is typically distributed or constructed. Is there an equivalent of an `.msi` installer on macOS?
* [x] At the moment I don't have any nightly builds set up for macOS, and it seems like doing this one way or another would require apple hardware running constantly. Possibly the travis builds could be repurposed to store their output on S3 for macOS, which can then be downloaded each night and have the packaging script run from linux instead.

To build the mac build, consult the information in [CONTRIBUTING.md](https://github.com/baldurk/renderdoc/blob/v1.x/docs/CONTRIBUTING.md), in particular [the dependencies](https://github.com/baldurk/renderdoc/blob/v1.x/docs/CONTRIBUTING/Dependencies.md#mac). To build it is the same cmake build steps as on linux, running `mkdir build && cd build && cmake -DCMAKE_BUILD_TYPE=Debug .. && make -j4`.

GL capture _should_ mostly work as expected out of the box. Of course bugs are likely and expected.

Vulkan capture will require a bit more setup. If you have vulkan registered with the system properly it should work the same as on other platforms - this means `libvulkan.1.dylib` should be in the dylib search path somewhere - I put it in `~/lib`. Also the driver should be registered in `~/.local/share/vulkan/icd.d`. You can also use `VK_ICD_FILENAMES` but be sure it's set when running `qrenderdoc`. The vulkan layer will be registered as on other platforms when running a loose build, which writes its json into `~/.local/share/vulkan/implicit_layer.d`.

On recent mac vulkan SDKs the default install location from the `install_vulkan.py` script should be detected by similarly recent RenderDoc builds.

## Environment

* RenderDoc build: Latest HEAD code.
* Operating System: macOS 10.14.3 (minimum spec to be determined)
* API: Vulkan and OpenGL only