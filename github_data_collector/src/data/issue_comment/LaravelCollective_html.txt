Adding scripts and styles can be done with an array

Before :

script
```
{!! Html::script('scrip01.js'); !!}
```
style
```
{!! Html::style('style01.js'); !!}
```
After :

script
```
{!! Html::script('scrip01.js'); !!}
{!! Html::scripts('scrip02.js'); !!}
{!! Html::scripts(['scrip03.js']); !!}
{!! Html::scripts(['scrip04.js','script05.js']); !!}
```
style
```
{!! Html::style('style01.js'); !!}
{!! Html::styles('style02.js'); !!}
{!! Html::styles(['style03.js']); !!}
{!! Html::styles(['style04.js', 'style05.js']); !!}
```
This attempts to fix a bug with routes having an array with two values.

This bugfix was tested and works with the following.

Non-route model binding:
```
{{ Form::open(['route' => ['mytest', [$file->id]]]) }}
```

Another non-route model binding:
```
{{ Form::open(['route' => ['mytest', $file->id]]) }}
```

Multiple models into route model binding:
```
{{ Form::open(['route' => ['manage.files.delete', [$currentPodcast, $file]]]) }}
```

Single model into route model binding:
```
{{ Form::open(['route' => ['manage.podcast.delete', $currentPodcast]]) }}
```

There is no need of having null value by default in constructor for two reasons. 
Firstly, when this class is being registered in ServiceProvider - `$app['url']` already has UrlGenerator inside Laravel's container.
```
$this->app->singleton('html', function ($app) {
    return new HtmlBuilder($app['url'], $app['view']);
});
```
Secondly, even if hypothetically we give `null` as a first argument to HtmlBuilder's constructor - then the class will raise an Exception. Because inside of the class `$url` is used directly without any check for null value, like: `$this->url->asset($url, $secure);`;
There is no need to call `transformKey()` method  for the second time in the last return statement. Instead of this we can use the `$key` variable.
Learned wisdom from a BASIC+2 class. Thanks for all the good work.
```
class User extends Model
{
    use FormAccessible;
    /**
     * Get the user's first name.
     *
     * @param  string  $value
     * @return string
     */
    public function getDateOfBirthAttribute($value)
    {
        return Carbon::parse($value)->format('m/d/Y');
    }
    /**
     * Get the user's first name for forms.
     *
     * @param  string  $value
     * @return string
     */
    public function formDateOfBirthAttribute($value)
    {
        return Carbon::parse($value)->format('Y-m-d');
    }
}
```
BTW: I can't seem to get "@error" to emit correct expansion in the generated file for that error-related CSS class.
Which relates to: how do you read tables while bypassing "reading" and "saving" events on models? I use a trait that implements encryption-at-rest, and the form accessor (the reason for this issue) receives the encrypted value. Easy enough to work around, but unexpected.
I'm not sure I want or will get an answer to the above. No offense, just wanted to put the questions out there for others to read.
When I try to add an icon html code in title, on Html::linkRoute() method, it is escaped by default. This change fix this limitation.
The 6.0 branch was updated to check if the error bag was countable instead of checking the SAPI name in 2f181aba73390eec13d398bf57877b1cc3bc2588 but the 5.8 branch was not.

This PR makes the same change to the 5.8 branch.
There is an error when trying to install laravel collective in project of laravel 6. * as it is currently in version 6.1. * and the package only allows for 6.0. * please fix that problem so we can all use the package
--<option ' . $this->html->attributes($options) . '>' . e($display, false) . '</option>'
++<option disabled ' . $this->html->attributes($options) . '>' . e($display, false) . '</option>'
