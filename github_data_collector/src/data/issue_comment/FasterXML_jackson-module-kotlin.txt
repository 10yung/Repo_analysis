```
KotlinModule::class.createInstance()
```

Fails in runtime with:
```
Exception in thread "main" java.lang.IllegalArgumentException: Class should have a single no-arg constructor: class com.fasterxml.jackson.module.kotlin.KotlinModule
```

If I create exactly the same class declaration in my own code (with default parameters), then my class works with `KClass.createInstance()`. It's probably an issue with some non-default compiler options or version of Kotlin compiler that you are using?

Tested with 2.10.2 and Kotlin 1.3.61

I have Json to deserialize(copying the problematic chunk below)
`    "values" : [ {
            "IEnumerationValueClass" : "EnumerationValueName",
            "@id" : 243,
            "value" : 0,
            "id" : 3038,
            "comment" : "Indicates the calculation in net values.",
            "name" : "MonetaryNet",
            "type" : {
              "IDataTypeClass" : "EnumerationType",
              "values" : [ 243, {
                "IEnumerationValueClass" : "EnumerationValueName",
                "@id" : 244,
                "value" : 1,
                "id" : 3039,
                "comment" : "Indicates the calculation in gross values.",
                "name" : "MonetaryGross",
                "type" : {
                  "IDataTypeClass" : "EnumerationType",
                  "values" : [ 243, 244, {
                    "IEnumerationValueClass" : "EnumerationValueName",
                    "@id" : 245,
                    "value" : 2,
                    "id" : 3040,
                    "comment" : "Indicates the calculation is using times as unit.",
                    "name" : "Time",
                    "type" : {
                      "IDataTypeClass" : "EnumerationType",
                      "values" : [ 243, 244, 245, {
                        "IEnumerationValueClass" : "EnumerationValueName",
                        "@id" : 246,
                        "value" : 3,
                        "id" : 3041,
                        "comment" : "Indicates the calculation is using volume as unit.",
                        "name" : "Volume",
                        "type" : {
                          "IDataTypeClass" : "EnumerationType",
                          "values" : [ 243, 244, 245, 246, {
                            "IEnumerationValueClass" : "EnumerationValueName",
                            "@id" : 247,
                            "value" : 4,
                            "id" : 3042,
                            "comment" : "Indicates the calculation is using bonus specific unit.",
                            "name" : "Bonus",
                            "type" : {
                              "IDataTypeClass" : "EnumerationType",
                              "values" : [ 243, 244, 245, 246, 247 ],
                              "name" : "GLOBAL.UnitType",
                              "comment" : "",
                              "type" : 10440,
                              "baseType" : [ "DataType", "Integer" ],
                              "kind" : "mixed",
                              "global" : true,
                              "code" : 10440
                            }
                          } ],
                          "name" : "GLOBAL.UnitType",
                          "comment" : "",
                          "type" : 10440,
                          "baseType" : [ "DataType", "Integer" ],
                          "kind" : "mixed",
                          "global" : true,
                          "code" : 10440
                        }
                      }, 247 ],
                      "name" : "GLOBAL.UnitType",
                      "comment" : "",
                      "type" : 10440,
                      "baseType" : [ "DataType", "Integer" ],
                      "kind" : "mixed",
                      "global" : true,
                      "code" : 10440
                    }
                  }, 246, 247 ],
                  "name" : "GLOBAL.UnitType",
                  "comment" : "",
                  "type" : 10440,
                  "baseType" : [ "DataType", "Integer" ],
                  "kind" : "mixed",
                  "global" : true,
                  "code" : 10440
                }
              }, 245, 246, 247 ]`

When I try to deserialize following exception is thrown 
`com.fasterxml.jackson.databind.exc.InvalidTypeIdException: Missing type id when trying to resolve subtype of [simple type, class IEnumerationValue]: missing type id property 'IEnumerationValueClass' (for POJO property 'values')
 at [Source: (StringReader); line: 91774, column: 28] (through reference chain: MainModel["searchActions"]->java.lang.Object[][3]->Table["columns"]->java.util.ArrayList[1]->TableColumn["types"]->java.util.ArrayList[0]->ColumnDataType["type"]->EnumerationType["values"]->java.util.ArrayList[0]->EnumerationValue["type"]->EnumerationType["values"]->java.util.ArrayList[0])`

From what I see 
After serializing the the json have the type info 
`
 "IEnumerationValueClass" : "EnumerationValueName",
            "@id" : 243,
`
but when the same id is refer in the json later on 
` "values" : [ 243, {`
Jackson is not able to recognize the type.

Interface 
`@JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "IEnumerationValueClass")
@JsonSubTypes({
        @JsonSubTypes.Type(value = EnumerationValue.class , name = "EnumerationValueName"),
})
public interface IEnumerationValue { 
....
}
`
Child class
`
@JsonIdentityInfo(generator= ObjectIdGenerators.IntSequenceGenerator.class, property="@id")
public class EnumerationValue implements IEnumerationValue, Serializable, Cloneable {
......
}
`


Really appreciate the help.

Thanks 
So: looks like there is a minor regression in `master` (for 3.0.0-SNAPSHOT), regarding fix (and one of tests) for #22. I will refactor test to have failing case for this issue, in `master` branch.

I have a `Either` definition:

```kotlin
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME)
@JsonSubTypes(
    JsonSubTypes.Type(Either.Left::class, name = "left"),
    JsonSubTypes.Type(Either.Right::class, name = "right")
)
sealed class Either<out A, out B> {
    class Left<A>(val value: A): Either<A, Nothing>()
    class Right<B>(val value: B): Either<Nothing, B>()
}
```

that I use in a simple data class:

```kotlin
data class Foo(
    val bar: Either<String, String>,
    val second: String
)
```

I create an instance and try to serialize:

```kotlin
return Foo(
    bar = Either.Left("aaa"),
    second = "bbbb"
)
```

but jackson throws an `IndexOutOfBoundsException`:

```
Caused by: java.lang.IndexOutOfBoundsException: Index: 0
        at java.base/java.util.Collections$EmptyList.get(Collections.java:4481)
        at com.fasterxml.jackson.databind.type.TypeFactory._resolveTypePlaceholders(TypeFactory.java:478)
        at com.fasterxml.jackson.databind.type.TypeFactory._bindingsForSubtype(TypeFactory.java:451)
        at com.fasterxml.jackson.databind.type.TypeFactory.constructSpecializedType(TypeFactory.java:423)
        at com.fasterxml.jackson.databind.cfg.MapperConfig.constructSpecializedType(MapperConfig.java:305)
        at com.fasterxml.jackson.databind.DatabindContext.constructSpecializedType(DatabindContext.java:163)
        at com.fasterxml.jackson.databind.ser.BeanPropertyWriter._findAndAddDynamic(BeanPropertyWriter.java:893)
        at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:705)
        at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:722)
        ... 85 common frames omitted
```

Is it some misconfiguration on my side? I am using jackson `2.10.1`.
The introduction of [`KotlinObjectSingletonDeserializer`](https://github.com/FasterXML/jackson-module-kotlin/blob/master/src/main/kotlin/com/fasterxml/jackson/module/kotlin/KotlinObjectSingletonDeserializer.kt) in 2.10.1 breaks the deserialization of Kotlin structures that could successfully be deserialized in 2.10.0.

I've forked jackson-module-kotlin and introduced three branches that demonstrate the problem and show a solution:

* I branched from tag 2.10.0 and introduced a test that passes successfully for this release - see the test [here](https://github.com/george-hawkins/jackson-module-kotlin/commit/12ca397f2cde0c0da24bc4d63bdabfa3ac1e0f90).
* I branched from tag 2.10.1 and in this branch, the same test now fails.
* I branched from master and introduced a change to `KotlinObjectSingletonDeserializer` that fixes this particular issue such that the test passes again - see the change [here](https://github.com/george-hawkins/jackson-module-kotlin/commit/f6659547be5bc12e47a36bcfa4339e8df3916281).

To quickly try this all out just do:

```
$ git clone git@github.com:george-hawkins/jackson-module-kotlin.git
$ cd jackson-module-kotlin

$ git checkout 2.10.0-object-id
$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test
...
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0
...

$ git checkout 2.10.1-object-id-bug 
$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test
...
[ERROR] Errors: 
[ERROR]   TestGithubX.test reading involving type, id and object:63 Â» InvalidTypeId Miss...
...

$ git checkout master-object-id-fix 
$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubX test
...
[INFO] Tests run: 2, Failures: 0, Errors: 0, Skipped: 0
...
```

Above I check out the three branches in turn and for each ask Maven to run the test that I've added - for the 2.10.0 based branch everything works fine, for the 2.10.1 based branch things break and then in the master based branch things are fixed.

You could merge my master-object-id-fix branch to fix this particular problem. But I'm actually going to suggest reverting the addition of `KotlinObjectSingletonDeserializer` instead.

`KotlinObjectSingletonDeserializer` was introduced to try and resolve issue #244. It's certainly confusing for people if they deserialize an `object` and get a different instance of what was supposed to be a singleton. But Jackson has so many special cases and so much clever logic for dealing with e.g. things like cycles (`@JsonIdentityInfo` etc.) and with things like generics (`@JsonTypeInfo` etc.) that it's extremely difficult to cover all situations where Jackson deserializes, stores and reuses objects. `KotlinObjectSingletonDeserializer`, as it is, is just the beginning and it would require quite invasive changes elsewhere in Jackson (not just the Kotlin module) to be able to handle all cases.

Even with my change, it's still fairly trivial to construct a case where a new instance is returned by deserialization rather than the original singleton.

E.g. see [this test](https://github.com/george-hawkins/jackson-module-kotlin/commit/425ffc01765032607a74cab24c23c9b84c7db758) that fails (irrespective of whether the change I made above to `KotlinObjectSingletonDeserializer` is applied or not). To try this just do:

```
$ git checkout master-object-instance-bug
$ mvn -Dtest=com.fasterxml.jackson.module.kotlin.test.TestGithubY test
...
[ERROR] test reading a list of objects with id(com.fasterxml.jackson.module.kotlin.test.TestGithubY)  Time elapsed: 0.321 s  <<< FAILURE!
java.lang.AssertionError: second element is not the same instance as Child.
...
```

I've added a detailed explanation of what's going on in this particular situation below. But in short, I think the problem is too complex to be easily addressed for all possible cases. So I think it's maybe better to just accept that unfortunately Kotlin singletons get deserialized to a different instance than to go with a solution that only works in a certain subset of simpler cases. As such I think the addition of `KotlinObjectSingletonDeserializer` should be reverted.

---

### Longer explanation

The new `KotlinObjectSingletonDeserializer` wraps an instance of `JsonDeserializer`. `JsonDeserializer` has quite a number of potentially overrideable methods (see below) but currently `KotlinObjectSingletonDeserializer` only delegates the three that I've marked with an asterisk. Of the remaining 16 methods, all but one of them (marked with a minus below) is overridden in at least one subclass in the standard Jackson libraries. So it would be surprising if the fact that `KotlinObjectSingletonDeserializer` doesn't delegate these methods doesn't cause problems in circumstances where the given behavior is overridden in the wrapped deserializer.

```
* createContextual(ctxt: DeserializationContext, property: BeanProperty ): JsonDeserializer<*>
* deserialize(p: JsonParser, ctxt: DeserializationContext): T
  deserialize(p: JsonParser, ctxt: DeserializationContext, intoValue: T): T
  deserializeWithType(p: JsonParser, ctxt: DeserializationContext, typeDeserializer: TypeDeserializer): Any
- deserializeWithType(p: JsonParser, ctxt: DeserializationContext, typeDeserializer: TypeDeserializer, intoValue: T): Any
  findBackReference(refName: String): SettableBeanProperty
  getDelegatee(): JsonDeserializer<*>
  getEmptyAccessPattern(): AccessPattern
  getEmptyValue(ctxt: DeserializationContext): Any
  getKnownPropertyNames(): Collection<Any>
  getNullAccessPattern(): AccessPattern
  getNullValue(ctxt: DeserializationContext): Any
  getObjectIdReader(ctxt: DeserializationContext): ObjectIdReader
  handledType(): Class<*>
  isCachable(): Boolean
  replaceDelegatee(delegatee: JsonDeserializer<*>): JsonDeserializer<*>
* resolve(ctxt: DeserializationContext)
  supportsUpdate(config: DeserializationConfig): Boolean
  unwrappingDeserializer(ctxt: DeserializationContext, unwrapper: NameTransformer): JsonDeserializer<T>
```

And even if you do delegate to the wrapped deserializer for these methods, there are still issues that `KotlinObjectSingletonDeserializer` can't address.

E.g. in [the test](https://github.com/george-hawkins/jackson-module-kotlin/commit/425ffc01765032607a74cab24c23c9b84c7db758) I mentioned above `@JsonIdentityInfo` is used. When using `@JsonIdentityInfo` it's the delegate that stores identified instances. The following stacktrace shows where the ID based storage happens initially in this test. As you can see it happens in `ObjectIdValueProperty.deserializeSetAndReturn` which is called fairly deep down after `KotlinObjectSingletonDeserializer` has passed over control to the delegate:

```
* deserializeSetAndReturn:101, ObjectIdValueProperty (com.fasterxml.jackson.databind.deser.impl)
  deserializeAndSet:83, ObjectIdValueProperty (com.fasterxml.jackson.databind.deser.impl)
  deserializeFromObject:510, BeanDeserializer (com.fasterxml.jackson.databind.deser)
  deserializeWithObjectId:1212, BeanDeserializerBase (com.fasterxml.jackson.databind.deser)
  _deserializeOther:220, BeanDeserializer (com.fasterxml.jackson.databind.deser)
  deserialize:189, BeanDeserializer (com.fasterxml.jackson.databind.deser)
* deserialize:28, KotlinObjectSingletonDeserializer (com.fasterxml.jackson.module.kotlin)
  _deserializeTypedForId:122, AsPropertyTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)
  deserializeTypedFromObject:89, AsPropertyTypeDeserializer (com.fasterxml.jackson.databind.jsontype.impl)
  deserializeWithType:237, AbstractDeserializer (com.fasterxml.jackson.databind.deser)
  _deserializeWithObjectId:384, CollectionDeserializer (com.fasterxml.jackson.databind.deser.std)
```

In the case of a singleton, the delegate stores its deserialized duplicate of the original object rather than the original singleton that only `KotlinObjectSingletonDeserializer` knows about.

When Jackson then encounters an ID for an already stored instance it will use this deserialized duplicate - it doesn't even give `KotlinObjectSingletonDeserializer` a chance to be involved in this process. In the above stacktrace we can see that we're deserializing a list (so `CollectionDeserializer` is being used) and that we're storing an element of this list that's identified with an ID. In this stacktrace below the same `CollectionDeserializer` has hit that ID again and, as you can see, it just looks up the ID directly, via `findObjectId` - it doesn't involve `KotlinObjectSingletonDeserializer` at all, so the stored duplicate is retrieved rather than the original singleton instance:

```
* findObjectId:78, DefaultDeserializationContext (com.fasterxml.jackson.databind.deser)
  _deserializeFromObjectId:303, AbstractDeserializer (com.fasterxml.jackson.databind.deser)
  deserializeWithType:220, AbstractDeserializer (com.fasterxml.jackson.databind.deser)
* _deserializeWithObjectId:384, CollectionDeserializer (com.fasterxml.jackson.databind.deser.std)
```

Hence if you look at the test you'll see the problem just with the _second_ occurrence of the given singleton object (and you would see the same issue with any further occurrences in a longer list).

```
class Bar(
    tempVar: SomeEnum? = null
) {
    var id: Long
}
```
this class will fail to deserialize from the response of a restTemplate like:
```
restTemplate.postForObject("http://localhost:8080/api", mapOf<String, String>(), Bar::class.java)
```

Interestingly, if you make class Bar in Java instead, there aren't any issues.  
Also, if you change the `SomeEnum` into another class or `Long`, `String`, etc, there aren't any issues.  
Also, it works when deserializing from `@RequestParam`.  

It exclusively fails when being deserialized from RestTemplate response when the class is defined in Kotlin, has a constructor, has a required/optional parameter that is not a field(var/val) while having a type of Enum.  

issue demo: https://github.com/gyuhyeon/KotlinSerializationIssueDemo

If this is actually a Spring framework bug, please close the issue.
With the following data class:

```kotlin
import com.fasterxml.jackson.annotation.JsonPropertyOrder

@JsonPropertyOrder(alphabetic=true)
data class Object(val a: String, val c: Int) {
    val b = false
}
```

and the following main function:

```kotlin
fun main(args: Array<String>) {
    println(ObjectMapper().registerModule(KotlinModule()).writeValueAsString(Object("a", 1)))
}
```

I get the following output:

```
{"a":"a","c":1,"b":false}
```

i.e. constructor parameters first, then fields. I'd expect all properties to be alphabetically sorted.
I wasn't sure if I was supposed to create these changes off of master or the 2.10 branch (since I was told "Update any work to be current with the 2.10 branch", so for now, I created one off the 2.10 branch. Let me know for future PRs if I should be branching off master instead. I'm not sure what your workflow is for maintaining multiple branches and releases.
I am trying to do:
```kotlin
class Id(val name: String, val scope: Int = 3)
class Foo(name: String, val age: Int) { val id = Id(name) }
val mapper = ObjectMapper(YAMLFactory()).registerKotlinModule()
val foo = Foo("Mary", 33)
val s = mapper.writeValueAsString(foo)
val bar = mapper.readValue<Foo>(s)
```
This fails with `com.fasterxml.jackson.module.kotlin.MissingKotlinParameterException: Instantiation of [simple type, class com.metricstream.metadata.service.Foo] value failed for JSON property name due to missing (therefore NULL) value for creator parameter name which is a non-nullable type
 at [Source: (StringReader); line: 6, column: 1] (through reference chain: com.metricstream.metadata.service.Foo["name"])`

It works if I change `Foo` to
```kotlin
class Foo(val id: Id, val age: Int) { constructor(name: String, age: Int) : this(Id(name), age) }
```
but I would like to keep the original `Foo` definition.

```kotlin
import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo
import com.fasterxml.jackson.databind.annotation.NoClass
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue

sealed class Entity
data class Bacteria(val speciesName: String): Entity()
data class Disease(val diseaseId: Long): Entity()

enum class EntityType {
    MY_Bacteria,
    MY_Disease
}

data class MyRequestBody(
    val entityType: EntityType,
    @JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.EXTERNAL_PROPERTY,
        property = "entityType",
        defaultImpl = NoClass::class,
        visible = true
    )
    @JsonSubTypes(
        JsonSubTypes.Type(value = Disease::class, name = "MY_Disease"),
        JsonSubTypes.Type(value = Bacteria::class, name = "MY_Bacteria")
    )
    val entity: Entity? = null
)

fun main() {
    val jsonString = """{
        |  "entityType": "MY_Bacteria"
        |}""".trimMargin()
    val reader = jacksonObjectMapper()
    val deserialized = reader.readValue<MyRequestBody>(jsonString)
    println(deserialized)
}
```

results in 
```
Exception in thread "main" com.fasterxml.jackson.databind.exc.MismatchedInputException: Missing property 'entity' for external type id 'entityType'
 at [Source: (String)"{
  "entityType": "MY_Bacteria"
}"; line: 3, column: 1]
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:59)
	at com.fasterxml.jackson.databind.DeserializationContext.reportInputMismatch(DeserializationContext.java:1356)
	at com.fasterxml.jackson.databind.deser.impl.ExternalTypeHandler.complete(ExternalTypeHandler.java:281)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeUsingPropertyBasedWithExternalTypeId(BeanDeserializer.java:1001)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeWithExternalTypeId(BeanDeserializer.java:853)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:324)
	at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159)
	at com.fasterxml.jackson.databind.ObjectMapper._readMapAndClose(ObjectMapper.java:4013)
	at com.fasterxml.jackson.databind.ObjectMapper.readValue(ObjectMapper.java:3023)
	at MainKt.main(Main.kt:40)
	at MainKt.main(Main.kt)
```

However, if we change it to use `JsonTypeInfo.As.PROPERTY`, it works for the missing field
```kotlin
import com.fasterxml.jackson.annotation.JsonSubTypes
import com.fasterxml.jackson.annotation.JsonTypeInfo
import com.fasterxml.jackson.databind.annotation.NoClass
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import com.fasterxml.jackson.module.kotlin.readValue

sealed class Entity(val entityType: EntityType)
data class Bacteria(val speciesName: String): Entity(EntityType.MY_Bacteria)
data class Disease(val diseaseId: Long): Entity(EntityType.MY_Disease)

enum class EntityType {
    MY_Bacteria,
    MY_Disease
}

data class MyRequestBody(
    @JsonTypeInfo(
        use = JsonTypeInfo.Id.NAME,
        include = JsonTypeInfo.As.PROPERTY,
        property = "entityType",
        defaultImpl = NoClass::class,
        visible = true
    )
    @JsonSubTypes(
        JsonSubTypes.Type(value = Disease::class, name = "MY_Disease"),
        JsonSubTypes.Type(value = Bacteria::class, name = "MY_Bacteria")
    )
    val entity: Entity? = null
)

fun main() {
    val jsonString = "{}"
    val reader = jacksonObjectMapper()
    val deserialized = reader.readValue<MyRequestBody>(jsonString)
    println(deserialized)
}
```
It successfully prints `MyRequestBody(entity=null)`