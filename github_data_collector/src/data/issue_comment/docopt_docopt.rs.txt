The following example:
```rust
use docopt::Docopt;
use serde::Deserialize;

const USAGE: &'static str = "
Test.

Usage:
  test [--cache_dir=<cache_dir>]

Options:
  --cache_dir=<cache_dir>  enables cache
";

#[derive(Debug, Deserialize)]
struct Args {
    flag_cache_dir: Option<String>,
}

fn main() {
    let args: Args = Docopt::new(USAGE)
        .and_then(|d| d.deserialize())
        .unwrap_or_else(|e| e.exit());
    println!("{:?}", args);
}
```
Gives result:
```
$ cargo run -- --cache_dir=abc
    Finished dev [unoptimized + debuginfo] target(s) in 0.03s
     Running `target\debug\docopt-test.exe --cache_dir=abc`
Args { flag_cache_dir: None }
```
If option name is changed to `--cache-dir`, then it parses the optional argument correctly:
```
Test.

Usage:
  test [--cache-dir=<cache_dir>]

Options:
  --cache-dir=<cache_dir>  enables cache
```
```
$ cargo run -- --cache-dir=abc
    Finished dev [unoptimized + debuginfo] target(s) in 0.04s
     Running `target\debug\docopt-test.exe --cache-dir=abc`
Args { flag_cache_dir: Some("abc") }
```
When calling a binary, some users forget how some arguments work and simply add a `-h` to see the help again, without removing all parameters.

    job a/long/path.gz another/long/path.gz a/long/path/again.gz -h

In some libs, like argparse, this prints the complete help message, as if you used `job -h`. With docopt-rs, it does print the usage message, but doesn't actually care about the `-h`. It would print the same thing with a non-existing parameter.

    Invalid arguments.
    
    Usage:
        job ...

**tl;rd** it would be nice to print the whole help message with `-h`, even if there are other args.
I'm trying to write the following doc string to have a form for the `-s` flag, and also provide it documentation.

```
Usage:
    oursh -c [options] <command_string> [<command_name> [<arguments>...]]

Options:
    -c  read commands from the `command_string` operand. set the value of
        special parameter 0 (see section 2.5.2, special parameters) from the
        value of the `command_name` operand and the positional parameters
        ($2, $2, and so on) in sequence from the remaining `arguments`
        operands. no commands shall be read from the standard input.
```

Is this possible?

The following works in Python:

```python
import docopt

__doc__ = """\
Usage: test.py [--flag]
               [--another]
"""

args = docopt.docopt(__doc__)
print(args)
```

```
$ ./test.py --flag          
{'--another': False,
 '--flag': True}
$ ./test.py --another
{'--another': True,
 '--flag': False}
$ ./test.py --flag --another
{'--another': True,
 '--flag': True}
```

The equivalent has trouble in docopt.rs:

```rust
#[macro_use]
extern crate serde_derive;
extern crate docopt;

const USAGE: &str = "\
Usage: test [--flag]
            [--another]
";

#[derive(Debug, Deserialize)]
struct Args {
    flag_flag: bool,
    flag_another: bool,
}

fn main() {
    let args: Args = docopt::Docopt::new(USAGE)
        .and_then(|d| d.deserialize())
        .unwrap_or_else(|e| e.exit());
    println!("{:?}", args);
}
```

```
$ ./test --flag
Args { flag_flag: true, flag_another: false }
$ ./test --another
Args { flag_flag: false, flag_another: true }
$ ./test --flag --another
Invalid arguments.

Usage: test [--flag]
            [--another]
```

It seems like the Rust implementation is interpreting those two lines as two separate argument lists (where the second one is allowed to omit the executable name?), rather than combining them into one. Does that sound like the right interpretation? Do you know of any workarounds currently, besides just avoiding newlines in the docstring?
Sorry for the title... essentially when `[-a... | --long-a=<val>]` the value is only deserialised for the one specified in the struct. Contrast `[-b | --bee]` as Boolean flags, when the value of whichever is given is available as e.g. `flag_bee`; `flag_b` need not be specified.

---

Here's a reproduction:

```toml
[dependencies]
docopt = { version = "1.0.1"}
log = {version = "0.4.5"}
serde = { version = "1.0.76" }
serde_derive = { version = "1.0.76" }
stderrlog = { version = "0.4.1"}
```

```rust
extern crate docopt;
#[macro_use]
extern crate log;
#[macro_use]
extern crate serde_derive;
extern crate stderrlog;

use docopt::Docopt;

const USAGE: &'static str = "
Reproduction.

Usage:
  repro [-q | --quiet | -v... | --verbosity=<v>]

Options:
  -q --quiet                Disable stderr logging.
  -v... --verbosity=<v>     Verbosity of stderr logging.
";

#[derive(Debug, Deserialize)]
struct Args {
    flag_quiet: bool,
    flag_verbosity: usize,
}

fn main() {
   let args: Args = Docopt::new(USAGE)
        .and_then(|d| d.deserialize())
        .unwrap_or_else(|e| e.exit());

    println!("{:?}", args);

    stderrlog::new()
            .module(module_path!())
            .quiet(args.flag_quiet)
            .timestamp(stderrlog::Timestamp::Second)
            .verbosity(args.flag_verbosity)
            .init()
            .unwrap();
    trace!("trace message");
    debug!("debug message");
    info!("info message");
    warn!("warn message");
    error!("error message");
}
```

---

Then:

```
$ cargo run -- --verbosity=2
Args { flag_quiet: false, flag_verbosity: 2 }
2018-09-03T20:50:56+01:00 - INFO - info message
2018-09-03T20:50:56+01:00 - WARN - warn message
2018-09-03T20:50:56+01:00 - ERROR - error message
```

so far so good.

```
$ cargo run -- -vvv
Args { flag_quiet: false, flag_verbosity: 0 }
2018-09-03T20:51:43+01:00 - ERROR - error message
```

Not so good. I thought maybe the issue was using the short while deserialising the long name, but:

```
$ cargo run -- -q
Args { flag_quiet: true, flag_verbosity: 0 }
```

so it does appear to be the interaction between `...` and `=<v>`.

---

Less-than-ideal workaround with particular respect to integer flags, just in case someone stumbles here with a similar use case:
  - separate lines in `Options`
  - add `flag_v: usize,` to`Args`
  - `.verbosity(args.flag_verbosity + args.flag_v)` (since docopt takes care of at most one being non-zero)
I'm not sure whether this is expected behavior, but the following seems a bit strange to me:

```rust
static USAGE: &'static str = "
Description

Usage:
    prog subcommand <arg>

";

fn main() {
    let d = docopt::Docopt::new(USAGE).unwrap().help(true).parse().unwrap();
    println!("{:?}", d);
}
```

The above program works fine  (`cargo run -- subcommand arg`). However, if the subcommand is changed to start with the binary name (new usage string: `prog progsubcommand <arg>
`), running `cargo run -- progsubcommand arg` will fail with 'Invalid arguments...'. But running `cargo run -- subcommand arg` will again work. The problem does not occurr on http://try.docopt.org/.
When I try to use docopt_macros v0.8.1, I found compile error like that,

```bash
-> % cargo run
    Updating registry `https://github.com/rust-lang/crates.io-index`
   Compiling docopt_macros v0.8.1
error[E0308]: mismatched types
   --> /Users/Khigashiguchi/.cargo/registry/src/github.com-1ecc6299db9ec823/docopt_macros-0.8.1/src/macro.rs:187:20
    |
187 |              .map(|(ident, ty)| {
    |                    ^^^^^^^^^^^ expected struct `std::vec::Vec`, found tuple
    |
    = note: expected type `std::vec::Vec<(syntax::ast::Ident, syntax::ptr::P<syntax::ast::Ty>)>`
               found type `(_, _)`

error: aborting due to previous error

error: Could not compile `docopt_macros`.
```

My code is above...

- src/main.rs

```rust
#![feture(plugin)]
#![plugin(docopt_macros)]

#[macro_use]
extern crate serde_derive;
extern crate docopt;

use docopt::Docopt;

docopt!(Args derive Debug, "
Usage:
    cref
    cref import <import-repo>...
    cref list
    cref update [<update-repo>...]
    cref delete <delete-repo>
    cref (--help | --version)

Options:
    -h, --help     Show this screen
    -v, --version  Show version
");

fn main() {
    let args: Args = Args::docopt().deserialize().unwrap_or_else(|e| e.exit());
    println!("{:?}", args);
}
```

- Cargo.toml

```
[package]
name = "cli_search_proper_english_message"
version = "0.1.0"
authors = ["Khigashiguchi"]

[dependencies]
docopt = "0.8"
docopt_macros = "*"
serde = "1.0"
serde_derive = "1.0"
```

```
cargo --version
cargo 0.24.0-nightly (5bb478a51 2017-11-29)

rustc --version
rustc 1.24.0-nightly (1956d5535 2017-12-03)
```

Please teach me how to solve it.

Was slightly confusing for me when trying to understand the example but couldn't find the `moored` flag in the struct.
When an argument has an `_` in the docopt, deserialising it to the Args struct fails as it is looking for an argument with an `_`

Example error
```
18:10 $ cargo run -- /
    Finished dev [unoptimized + debuginfo] target(s) in 0.0 secs
     Running `target/debug/bar /`
Could not find argument '<foo-path>' (from struct field 'arg_foo_path').
Note that each struct field must have the right key prefix, which must
be one of `cmd_`, `flag_` or `arg_`.
```

Code sample causing error
```
#[macro_use]
extern crate serde_derive;
extern crate docopt;

use docopt::Docopt;

const USAGE: &'static str = "
JSON XPather

Usage:
  bar <foo_path>

";

#[derive(Debug, Deserialize)]
struct Args {
    arg_foo_path: String,
}


fn main() {
    let args: Args = Docopt::new(USAGE)
                            .and_then(|d| d.deserialize())
                            .unwrap_or_else(|e| e.exit());
    println!("{:?}", args);
}
```