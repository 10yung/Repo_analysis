Statistics encoded in `run.istats` were limited to a maximum number of 13 due to encoding in a `uint64_t` variable.
This approach has multiple limitations:
- a maximum number of 13 statistics were allowed
- a subtle bug can be triggered if many more statistics are added - independent of the selected statistics for `run.istats`

Depending on the linking order, statistics will get a different ID. Previously, the ID was used to shift a `1` to its position marking the statistic as being used.
This will lead to undefined behaveour if more than 63 statistics are used.

Using an `llvm::SmallBitVector` instead fixes both problems.
Remove support for old tr1 unordered set and map.

And check hashes using call-by-reference instead of call-by-value to avoid inc/dec of reference counters.
This patch enables easily adding statistics to the `run.stats` file. This both cleans up StatsTracker a bit and makes adding stats effortless, by simply adidng ad `SQLIntStatistic` variable and incrementing it as desired.

It moves most of the existing stats to this system. Since there are some statistics that are gathered but not used I added a verbosity flag that enables the option of writing those unused statistics too.

A nice property of this is that `klee-stats` should now work with any addition to the stats file and will ignore additional columns. 
Add option to generate xml testcases. This patch generates test cases as XML files.

In addition, test-comp-specific, additional arguments are specific to generate experiment descriptions.
KLEE flushes uninitialised memory, which I encountered during sqlite runs. Given this program:

```C
#include "assert.h"
int main() {
    char* a = malloc(2048);
    unsigned i;

    klee_make_symbolic(&i, sizeof(i), "i");
    klee_assume(i < 2); 
    a[0] = i;
    a[1] = 'a';
    a[2] = 'b';
    if(a[i+1] == 'b')
        printf("HA!");
    else
       assert((a[i+1] == 'a'));

   return 0;
}
```

KLEE issues queries like this:
```
# Query 3 -- Type: Value, Instructions: 39
array const_arr1[2048] : w32 -> w8 = [0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0array i[4] : w32 -> w8 = symbolic
(query [(Ult N0:(ReadLSB w32 0 i)
              2)  
         (Eq false
             (Eq 98
                 (Read w8 (Extract w32 0 N1:(ZExt w64 (Add w32 1 N0)))
                          [2047=171, 2046=171, 2045=171, 2044=171, 2043=171, 2042=171, 2041=171, 2040=171, 2039=1        false [(Add w64 15099904 N1)])
#   OK -- Elapsed: 1.024250e-04s
#   Result: 15099905
```

It is really annoying that the uninitialised memory gets flushed to the update list.

This is because `ObjectState::flushRangeForRead` creates a new flushMask if it is not present yet. That means that all bytes are unflushed, which means that the uninitialized memory is read from concrete store and added to the updatelist. Because there is also a symbolic write at the start, those concrete updates don't get folded into an array.

One solution disccused with @MartinNowack  is to enhance handling for uninitialised memory. For example we could consider bytes `0xAB` in `concreteStore` as uninitialised and then handle writes of `0xAB` byte as symbolic (so they don't get written into concrete store). Any opinions on this? Or other ideas how to make it more efficient.
This patch fixes RandomPathSearcher to respect the calls to `update` method and therefore supports use cases where you only want it to work on subset on states. It uses pointer bit stealing(`llvm::PointerIntPair`), so it's limited to just 3 instances/subsets.

Because currently the `update` method is a noop, this is of course slower, but I never saw it in the flamegraphs. The `selectState` should have similar performance as before as this patch adds only a couple of arithmetic instructions.

This should deprecate #762 and in general enable subset searcher extensions.

I had to revert @251 `unqiue_ptr` patch as it is very difficult/annoying/unclear to have bit-stolen pointers with `unqiue_ptr`.
In the `AssignmentGenerator::helperGenerateAssignment` method the `Select` case is not handled.
I encountered this while fuzzing the Rust url crate, but it took over 20 minutes to manifest. This may  (or may not) be related to the `-optimize-array=all` flag.

I'm not entirely certain what `helperGenerateAssignment` is used _for_, but I assume it has to do with simplifying the SMT query before actually creating it.
Hi,

During my experiment, I found that when using klee-2.0 with "-write-cvcs --libc=uclibc --posix-runtime maze.bc A --sym-files 1 30", it generates CVC files like the following:

```
 A-data-stat0  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
 model_version1  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
 A-data2  : ARRAY BITVECTOR(32) OF BITVECTOR(8);
%----------------------------------------------------
 ASSERT( ( NOT( (0b0000000000000000000000000000000 = (A-data-stat0[0x0000000B] @ (A-data-stat0[0x0000000A] @ (A-data-stat0[0x00000009] @ A-data-stat0[0x00000008]
 )
 )
 )[30:0]
 ))) );
```

STP-2.3.3 reports the following errors:

```
syntax error: line 1
Illegal input character.
Fatal Error:
STP Error:
```

STP works fine when replacing "A_data_stat0" with " A_data_stat0" and " A-data2" with " A_data2".

I found that file "fd_init.c" affects the variable names in CVC files. The output files are OK when changing two ad-hoc strings in the file.

Since I'm not familiar with KLEE, I'm not sure whether my modification has any side-effect.

BTW, it is necessary to do similar things (change some dashs to underscores) in gen-bout.cpp (e.g., [A-data](https://github.com/klee/klee/blob/649c8bce588f04ed9099686f0d9ed9c326567c44/tools/gen-bout/gen-bout.cpp#L153)

Thanks.


Is there a better way of opening the csv file in the klee-last directory than hard coding it (line 27 of PTree.cpp)?

And is it worth having a local variable (PTree.h) to store whether we should dump the process tree or just call the StatsTracker::dumpProcessTree() function?
KLEE has been used by many software systems like [Angelix](https://github.com/mechtaev/angelix) for providing symbolic information of a program. It would be nice if there's API interfacing with KLEE's core symbolic execution engine, just like Z3 which has both CLI interface and API bindings for different languages. This task might be too time-consuming though, but I do see it's a very good to have feature that KLEE should have.

The good thing is that I can see KLEE's structure is modularized already, maybe just a class dedicated for exposing high-level API functions with proper documentation are required to be done for this?

Thanks