Hi,

I have a ReactiveSystem which collect entities with ComponentA removed, This system will be triggered when I call Entity.Destroy on the entity who has a ComponentA, the collected entity is fully empty (has no component), Is this the proper behaviour of Entitas? In my original thought, destoryed entity would not be conllected any way. If So What should I do to prevent the destroyed
entity to be collected

Cheers

Friends,

I have bought Entities.
But I am not able to understand much from github source pages

Is there any free or Paid video tutorial available that teaches how to use Entitas to create games?
I did not find anything on Udemy or skillshare.

**Youtube Desperate Dev videos are going way over the head ..**.

Please guide me in this.

I really wish there were some free or paid course in Entitas, so that one can digest this entity component system methods slowly, surely and, completely 

Thanks
If you have a component with multiple member variables, the AddComponent and ReplaceComponent methods require specifying every single member.

```CSharp
[Game]
public struct ExampleComponent : IComponent {
   public Vector3 Position;
   public Quaternion Rotation;
   public int Layer;
   public bool Visible;
}
```

When I first started using Entitas I expected that I would need to create the component and add it.  But instead you need to do this:

```CSharp
   entity.AddComponent(newPosition, newRotation, newLayer, isVisible);
```

The problem is this can be tedious if some of the values should default to false/null.  If you supported the ability to take ExampleComponent as a parameter, I could do this:

```CSharp
   entity.AddComponent(new ExampleComponent() { Position = newPosition });
```

Or alternatively define my own constructors (if it is a class not a struct).

I like the existing syntax for some cases, but in other cases it is not a fit.  So I'd actually like flexibility by having an attribute for the class that defines how the signature of AddComponent/ReplaceComponent work.
Sometimes there is a component which, at any given moment, can be applied to one, and only one, entity.  I called this a "singleton" although that's more of an object-oriented term and I'm not sure is right here, but let's go with it for a minute.

An example might be which entity has focus (is being controlled by the player).  Only one entity at any given time can have focus.  If one entity is given focus the existing entity which had focus needs to lose it.

I can attach an "empty" component to an entity which functions as a boolean flag, and this makes it easy to query which entities have focus, or do not have focus.  But when I have a component which should function as a singleton, I'd additionally like:

- A simple way to get which entity has focus
- A simple way to switch which entity has focus, that will add the component to one entity and take it from another

If there's an attribute to say a component should behave in this way, then I think setting one entity to have "isFocused" to true should clear any others.  Instead of having it be a boolean member of every entity, the generated code should be a property accessor and setting it would change which entity is focused.

Of course one can already do stuff like this outside of Entitas but then you can't use the component as a filter in a GroupMatch.  So I think it would be great if Entitas could help here.
Unity doesn't support namespaces all that well.  They tend to dump all user-created scripts into the unnamed namespace, which is a mess.  Entitas seems to inherit this problem and I'd like to see it improved.

The first thing I do when adding any script is put it into a namespace.  But when I put Entitas components into a namespace, it causes compile issues.  There is an option "ignore namespaces" but that doesn't really do what I want.

What I'd like to see is that for any given context (e.g. Game) I have a way to put all classes related to it into a namespace of my choosing.  Both my source classes with the components defined, and the generated code, need to be in the namespace(s) that I define.
I have a suggestion to simplify access to components that have only a single member.  Let's say I have an entity that looks like this:

```csharp
[Game]
public struct InterstellarPosition : IComponent {
   public double3 Position;
```

I need to access this value as follows:

```csharp
entity.interstellarPosition.Position = newPosition;
```

But if the component only has one member, it would be nice if I could just do this:

```csharp
entity.interstellarPosition = newPosition;
```

My suggestion is to add an optional attribute to the component which enables it to do this.  Note that in this case, I think that the component is never actually created, it functions only as a template which describes what type the component is.  So you could define a generic class and perhaps all they need to do is something like this:

```csharp
[Game]
public struct InterstellarPosition : SingleMemberComponent<double3> {}
```



What would be the correct way of fully removing all Entitas items from the scene? Currently I do like this:

`
m_systems.TearDown();
m_systems.DeactivateReactiveSystems();
Contexts.sharedInstance.Reset();
m_systems = null;
`

But e.g. DebugSystemsBehaviour objects are still persistent in the Unity scene. How can I get rid of those. When I init new systems I get duplicate debug objects.

Best, Hu
Hi, 
I am following examples in video "Entitas ECS Unity Tutorial - Git & Unit Tests" and run into problems on the way.

I am getting error "ECall methods must be packaged into a system module" when instantiating GameObject in nspec Test method or trying to run Execute() method of a system with Debug.Log in it.

```
        it["update position test"] = () =>
         {
             var contexts = new Contexts();
             var system = new RenderPositionSystem(contexts);

             Vector3 newPos = new Vector3(1, 1, 1);
             Vector3 initPos = new Vector3(0, 0, 0);
             GameObject go = new GameObject("test object");
             go.transform.position = initPos;

             CoreEntity ent = contexts.core.CreateEntity();
             ent.AddView(go);
             ent.AddPosition(newPos);

             system.Execute();

             ent.view.gameObject.transform.position.should_be(newPos);
         };
```

Errors:
```
    update position test (3ms) - FAILED - ECall methods must be packaged into a system module.

**** FAILURES ****

nspec. describe RenderPositionSystem. when executing. update position test.
ECall methods must be packaged into a system module.
   w describe_RenderPositionSystem.<>c.<when_executing>b__1_2()
```
```
    update position test (3ms) - FAILED - ECall methods must be packaged into a system module.

**** FAILURES ****

nspec. describe RenderPositionSystem. when executing. update position test.
ECall methods must be packaged into a system module.
   w RenderPositionSystem.Execute(List`1 entities)
   w Entitas.ReactiveSystem`1.Execute()
   w describe_RenderPositionSystem.<>c.<when_executing>b__1_2()
```

Best Regards