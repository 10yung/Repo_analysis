Currently there is a deprecation warning coming from the `github_api` gem:

```text
NOTE: Inheriting Faraday::Error::ClientError is deprecated; use Faraday::ClientError instead. It will be removed in or after version 1.0
Faraday::Error::ClientError.inherited called from /usr/local/bundle/gems/github_api-0.18.2/lib/github_api/response/follow_redirects.rb:11.
```

https://github.com/piotrmurach/github/blob/master/lib/github_api/response/follow_redirects.rb#L11

Would be great if you could release a new version with this fixed

The new class should be just `Faraday::ClientError`
I've added `list` and `delete` functionality for repo collaborator invitations 

No specs yet. I'll try to find some time to do those before this merges, of course. Unless anyone else gets time before I do and wants to jump in! This is working in my own app now though. 
Hello, 

Just being automating some releases and after successfully uploading the asset related to a release the file seems to be corrupt (is not possible to untar/unzip it the file seems to have another format). Is this perhaps a problem while using the API to do it so? while using the web interface this works smoothly..

Here is my upload code 

`curl -X POST -H "Content-Type:application/gzip" -H "Authorization: token $token"  -F "file=@$release_name.tar.gz; type=application/gzip" https://uploads.github.com/repos/foo/foo/releases/$ID/assets?name=$release_name.tar.gz)`

Thanks for your kind help

Regards

There is review request API documented in https://developer.github.com/v3/pulls/review_requests/ .
But I cannot find the API in this gem.
If there's no implementation for that, maybe I can implement it.

So, I just want to know why there's no implementation of the API.
Quotting https://developer.github.com/v3/repos/#edit

```
has_projects  boolean  Either true to enable projects for this
                       repository or false to disable them. Default:
                       true. Note: If you're creating a repository in an
                       organization that has disabled repository
                       projects, the default is false, and if you pass
                       true, the API returns an error.
```
The Github Licenses API uses the open source Ruby Gem Licensee to
attempt to identify the project's license. Licensee matches the contents
of a project's LICENSE file (if it exists) against a short list of known
licenses. As a result, the API does not take into account the licenses
of project dependencies or other means of documenting a project's license
such as references to the license name in the documentation.

If a license is matched, the license key and name returned conforms to
the SPDX specification.

Signed-off-by: zachwick <zach@zachwick.com>
Here is the code I am using to upload.

```
$ echo "uploading asset to release to url : $upload_url"
uploading asset to release to url : https://uploads.github.com/repos/zhanghongtong/test-trello/releases/13626806/assets?client_id=559b37ca1dfdad45d224&client_secret=a39a8fd8b5a2ce54eaa07axxxxxxxxxxxxxx

$ curl -s  \
        -H "Content-Type: application/zip" \
        --data-binary @test.zip  \
        "$upload_url&name=test.zip&label=some-binary.zip"
{"message":"Not Found","request_id":"F743:6DD1:903D2:CCF7E:5BDBAE02","documentation_url":"https://developer.github.com/v3"}%
```

Any idea what is going sour here?
On Oct 4th: https://blog.travis-ci.com/2018-09-27-deprecating-github-commit-status-api-for-github-apps-managed-repositories
and this is the new endpoint:
https://developer.github.com/v3/checks/runs/#list-check-runs-for-a-specific-ref

When can we add support for this endpoint
I am trying to get sorted repository list, but it seems the request is not considering other params that I passed to the `repos` object. I am getting a default list all the time which is sorted by `full_name`.
PFB my code -

```ruby
github.repos(user: user_name, repo: repo_name, sort: 'pushed', direction: 'desc')
```
> Note: `github` is an object of `Github::Client`

I need to use the PATCH /user/repository_invitations/:invitation_id endpoint ASAP. My question is if there is a way to directly send a message like that without modifying the github_api gem? If not, where should I get started with the pull request? I quickly looked around in the source code, but I felt a bit lost.