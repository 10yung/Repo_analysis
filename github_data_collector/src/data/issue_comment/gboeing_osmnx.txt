Installation is now documented for usage without conda or docker containers.
Refactor of #343 to use [`demquery`](https://github.com/kylebarron/demquery).

**Overview**:

- I split my code into a new Python package on PyPI. 
- Since learning about [Virtual Rasters](https://gdal.org/drivers/raster/vrt.html), the code to find elevations is an order of magnitude simpler. I don't do any joining of nearby rasters; GDAL does all of that.
- I discovered that `interp2d` gives those warnings only when the grid is not the expected size for the type of interpolation: 3x3 for linear interpolation, 5x5 for cubic interpolation, and 7x7 for quintic interpolation. So I removed the option to manually choose the size of the interpolation region. If `interp_kind` is `linear`, it creates a 3x3 grid.
- Checks for nodata values; the virtual raster can have regions with no data that are inside the file's bounds, if the provided files didn't create an exact rectangle. My package raises an error if it sees those values in the interpolation region.
- I'm working on writing tests in the demquery package. ~~I'm having issues with rasterio working on Travis CI~~ the osmnx `.travis.yml` was quite helpful.
- Do you have plans to deprecate Python 2.7 and 3.4? Python 3.4 is already end of life, and 2.7 is in a month. I made `demquery` 3.5+ compatible, but haven't tested Python 2.7.
- Right now, `demquery` is only on PyPI, and I think that's why the current Travis build is failing.

**Example**:

Download both the files 
[`USGS_NED_13_n33w117_IMG`](https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/IMG/USGS_NED_13_n33w117_IMG.zip) 
[`USGS_NED_13_n34w117_IMG`](https://prd-tnm.s3.amazonaws.com/StagedProducts/Elevation/13/IMG/USGS_NED_13_n34w117_IMG.zip) 
450MB extracted each

```py
import osmnx as ox
west = -116.66587829589844
south = 32.90120475753773
north = 33.094201303793194
east = -116.46263122558594
G = ox.graph_from_bbox(north=north, south=south, west=west, east=east)
dem_paths = ['USGS_NED_13_n33w117_IMG.img', 'USGS_NED_13_n34w117_IMG.img']
# interp_kind can be None, linear, cubic, or quintic
G = add_node_elevations_from_dem(G, dem_paths, interp_kind=None)
G = add_edge_grades(G)
```
Similar to the closed PR #240. 

Functions are modified to accept a `tags` argument, which is a dictionary of different key-value pairs. Similar to #240, values of the `dict` can be `True`, `str`, or list of `str`. I.e.
```
tags = {
    'amenity':True,
    'landuse':['retail','commercial'],
    'highway':'bus_stop'
}
```
I didn't try to implement `key=False`, to remove any items of `key` from the search.

In contrast to #240, this leaves the `amenity` parameter in the POI functions, so it doesn't break backwards compatibility. If both `amenities` and `tags['amenity']` are supplied, then they are combined before the Overpass request.

```py
tags = {'tourism': 'motel'}
west = -118.455619
south = 37.330447
east = -118.380432
north = 37.390072
test = create_poi_gdf(north=north, south=south, west=west, east=east, tags=tags)
print(test[['osmid', 'geometry', 'name', 'tourism']].head(5))
```
```
                 osmid                     geometry                     name  \
1925945217  1925945217  POINT (-118.39579 37.36566)          Townhouse Motel   
1925945246  1925945246  POINT (-118.39458 37.36557)       Econo Lodge Bishop   
1925945270  1925945270  POINT (-118.39414 37.36592)        Travelodge Bishop   
1925945363  1925945363  POINT (-118.39573 37.35655)           Super 8 Bishop   
2934354040  2934354040  POINT (-118.39274 37.36029)  Americas Best Value Inn   

           tourism  
1925945217   motel  
1925945246   motel  
1925945270   motel  
1925945363   motel  
2934354040   motel  
```
Hello! This is an amazing project, and I'm happy to finally have a project to test out osmnx.

I'm working with OSM data of trails, and adding elevation data to trails is important. Currently, the only elevation provider supported is Google Maps, and this has a couple drawbacks. For one they're currently restricting API usage: 
> Notice: New customers will need to contact sales for access to the Elevation API.

This might mean they only care about large-scale, large-budge projects, and in any case restricts small developers from using it. There are a couple other elevation APIs, but they all have the drawbacks of being web services.

I wrote code for myself to import elevations from a local DEM using `rasterio`. Would you accept a PR for this? 

Using local DEMs are more scalable than APIs. They can be more accurate since most APIs use at most 30m SRTM data, and there exists 10m data for the contiguous US and 1m for some cities from new LIDAR data.

Maybe there could also be a helper function to download predefined types of elevation DEMs, like SRTM, 3DEP for the US, etc. for the area covered by the current Graph.

Drawbacks:

Using `rasterio` would add a dependency on GDAL, which is not insignificant. I'd propose that it not be included in `requirements.txt`, but that a user who's interested in using this function could self install, and it would be imported conditionally.
This PR is meant to fix issue #338 that I myself raised. I had the code implemented anyway because I needed this functionality. 

This is my first PR to osmnx. I would like to have your feedback, even in case this PR does not fit the project or significant changes are needed. 
I would like a functionality to convert a larger street network to one with less amount of nodes: Created by merging nodes that are closer than a threshold. 

Sample usage would be something like:
```python
>>> G = ox.graph_from_address("Berlin, Germany", distance=1000, distance_type='bbox')
>>> G.number_of_nodes(), G.number_of_edges()
(2417, 6163)
>>> H = ox.simplify.coarse_grain(G, radius=100) # collapses all nodes within 100m radius
>>> H.number_of_nodes(), H.number_of_edges() # H is a smaller graph
(800, 2400)
```


