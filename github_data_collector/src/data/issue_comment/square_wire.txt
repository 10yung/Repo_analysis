will follow up with emitting rules application + exclusivity logic.
This is required to create a proto target which needs protofiles information to generate the schema properly.

The consumed set is wack and weak though.

`PruningRules` was also used for emission decision. Since no pruning is involved, I've splitten the logic into its own class. Moreover, `member`s were not supported, and it's explicit now.
The logic is taken from `PruningRules` minus what concerns pruning only.

From the point of view of the Gradle Plugin, it's an explicit split between `root/prune` at the root, which is modelled by the pruning rules, and `include/exclude` inside the target modelled by the emitting rules.
Based on #1210.

```java
// Java
public Builder foo(Integer foo) {
  this.foo = foo;
  this.bar = null;
  this.baz = null;
  return this;
}
```

Passing null as the argument will break the oneof contract, marking the parameter with `@NonNull` can at least hint at the potential problem.

Likely in need for a rebase
Based on prep for my KotlinConf talk

Closes #1333 