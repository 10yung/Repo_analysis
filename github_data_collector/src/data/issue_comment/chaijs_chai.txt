The documentation for [`.above`](https://www.chaijs.com/api/bdd/#method_above) states:

> The aliases `.gt` and `.greaterThan` can be used interchangeably with `.above`.

However, for [`.least`](https://www.chaijs.com/api/bdd/#method_least):

> The alias `.gte` can be used interchangeably with `.least`.

To my mind, there should be a `.greaterThanOrEqual` alias for `.least` in addition to the current `.gte` alias, for conformity in the use of these APIs.

The same applies to `.below` and `.most`; the latter would benefit from a `.lessThanOrEqual` alias.
I'm trying to test if an array increases in length by 1 after executing a certain operation.
The test is written in typescript and runs with the usual `mocha -r ts-node/register mytest.ts`. The chai version is 4.2.0. Unfortunately, it does not compile with the error: `TS2339: Property 'by' does not exist on type 'Assertion'.` Here is a simplified test to reproduce the error:
```
import {expect} from "chai";

describe("OneTest", function() {
	it("bugz", function(done) {

		const aa = [1, 2, 3];

		const len = aa.length;

		expect(aa.push(88)).to.increase({len}, "len").by(1);

		done();
	});
});
```
I don't see any definition for `by()` in `@types/chai` file `index.d.ts` and if I add the line `by(delta: number): Assertion;` at the end of `interface Assertion` it compiles. Well, the test fails, but this is another problem.

Thanks for investigating!
mario
On [expect documentation page](https://www.chaijs.com/api/bdd/) the entry for `fail` is duplicated. One is enough.

Thanks!
mario
This code passes the test, however it shouldn't.
```ts
const test = {
    data: 123,
    data2: 123,
    data3: 123
};

expect(test).not.to.have.keys(['data']);
```

mocha: 6.2.0
chai: 4.2.0


Hi,

I have a little library that requires chai for tests. I have to generate a d.ts file in order to use my lib with TypeScript.

Here's what happens:

```
Unexpected crash! Please log a bug with the commandline you specified.
/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/run.js:125
        throw e;
        ^

Error: Invalid Chai property: equal.length. See docs for proper usage of "equal".
    at Function.get (/home/yoannpicquenot/dev/blabla/test-helpers/node_modules/chai/lib/chai/utils/addLengthGuard.js:54:13)
    at Object.get (<anonymous>)
    at Object.proxyGetter [as get] (/home/yoannpicquenot/dev/blabla/test-helpers/node_modules/chai/lib/chai/utils/proxify.js:98:22)
    at getParameterListAndReturnType (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:304:33)
    at getPrototypeMember (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:279:26)
    at names.filter.map.name (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:270:22)
    at Array.map (<anonymous>)
    at getClassPrototypeMembers (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:270:10)
    at getResult (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:140:17)
    at getTopLevelDeclarations (/home/yoannpicquenot/.nvm/versions/node/v10.17.0/lib/node_modules/dts-gen/bin/lib/index.js:129:17)
```

I have tried to generate d.ts file separately.

```
$> npm install -g chai

$> dts-gen -m chai
```

I got the same error. It says I have to log a bug, how am I supposed to do that?

EDIT.
> node v10.16.0
> npm 6.11.3
> chai 4.2.0



The Buffer() and new Buffer() constructors are not recommended for use due to security and usability concerns. Please use the new Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() construction methods instead.
Probably there is missing info in the content for installing Chai Assertions for Promises.
It is supposed to be "npm install chai-as-promised"

Link: [https://www.chaijs.com/plugins/chai-as-promised/
![Screenshot from 2019-11-01 21-02-19](https://user-images.githubusercontent.com/8256637/68036066-f5ece280-fcea-11e9-98c7-e4c92d5caa0c.png)
](https://www.chaijs.com/plugins/chai-as-promised/)
Is there a chai plugin with html diff?
Something like the `chai-xml`, which is excellent, but does not digest `<img .. />` and similars.
I've to compare two html strings.
Original: https://stackoverflow.com/questions/58384761/node-mocha-0-passing

----

I've seen numerous posts on stack overflow about this issue, however none of the solutions that I have read thus far, have worked in my specific case. I'm generally quite confused as to why this might be happening.

Things I've already tested:

* Adding test scripts to test/ folder
* Adding test script folder path to test command
* Adding test script file path to test command

The weirdest thing of all is that Moca is definitely finding the files, and executing them, and running the tests. In fact if a test fails, Moca will throw an error e.g.

```js
AssertionError: expected 1 to equal 0
    at Object.<anonymous> (/Users/Sancarn/Documents/Programming/Github/node-macUIAutomation/test/TSEnum.test.js:33:14)
```

So the tests are definitely running, and the tests are definitely passing. As you can see from the `TSEnum.test.js` file below I should have 5 passes. However when run it says 0 passed:

```js
npm test

> macuiautomation@1.0.0 test /Users/Sancarn/Documents/Programming/Github/node-macUIAutomation
> mocha ./test/*.test.js

|CoolSuite|


  0 passing (0ms)
```

Why does it say 0 passed? How can I fix this? Any ideas?

## My project folder structure:

```
package.json
lib/
|- TSEnum.js
test/
|- TSEnum.test.js
...
```

## Package.json:

```
{
  ...
  "scripts": {
    "test": "./node_modules/.bin/mocha ./test/*.test.js"
  },
  ...
}
```

## In `TSEnum.test.js`:

```
...js
const assert = require('chai').assert;
console.log("|"+tse.suite+"|")   // returns "|CoolSuite|"
assert(tse.suite == "CoolSuite","Suite no initialised");
assert(1==1,"zomg")
assert(1==1,"zomg")
assert(1==1,"zomg")
assert(1==1,"zomg")
```

So does anyone have any idea why it says 0 passed? Everything else seems to work fine except this issue. It's not a major issue but is very confusing...

Thanks