I know this was previously an issue, that was supposed to be fixed in 1.5, However, we're still seeing this happen.

We're currently using beanstalk 1.10, and noticed that our binlog directory has grown to over 265GB in usage.

When looking at beanstalk stats, we have roughly 10K jobs in a delayed state. Even with our maximum job size of 10MB (99.9% of jobs are going to be less than 1 or 2MB each), that only puts us at 100GB of storage.

It appears as though jobs that have been purged, are not being removed from disk.

Is there a safe way to clean up after this? How can we prevent it from happening?
This is from PR #203: 

Add a command: `wait <id>\r\n` that responds with `DELETED <id>\r\n` or `BURIED <id>\r\n` only once a job has been deleted or buried.

This allows a client to be notified about the status of a job without polling.
### From the docs

The wait command waits until a particular job is out of the system before responding. It can be used to block a client until a job is completed. It looks like this:

```
wait <id>\r\n
```
##### `wait` options
- `<id>` is the job id to wait for.
##### `wait` responses

The client expects one line of response once the state of the job has changed, which may be:
- `DELETED <id>\r\n` to indicate the job was deleted via the `delete` command (normal success).
- `BURIED <id>\r\n` to indicate the job was buried via the `bury` command.
- `NOT_FOUND\r\n` if the job id does not exist.

A response won't be sent by the server until the specified job is deleted or buried. The wait command can be issued multiple times before a response is received in order to wait on a collection of jobs.

![IMG_8252](https://user-images.githubusercontent.com/140245/63290761-d38e2000-c2ca-11e9-934f-833bebf10f10.jpg)

Not sure that it has much of use really. Just created while was exploring sources.

Should we add it to sources as an ASCII diagram? 

Hi, I'v got this errors on syslog and process killed, could you explain it to me?!

```
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: *** Error in `/usr/bin/beanstalkd': free(): invalid size: 0x00005600f0fd3020 ***
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: ======= Backtrace: =========
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /lib/x86_64-linux-gnu/libc.so.6(+0x70bfb)[0x7f59eecf3bfb]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /lib/x86_64-linux-gnu/libc.so.6(+0x76fc6)[0x7f59eecf9fc6]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /lib/x86_64-linux-gnu/libc.so.6(+0x7780e)[0x7f59eecfa80e]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /usr/bin/beanstalkd(+0x6472)[0x5600f03be472]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /usr/bin/beanstalkd(+0x7918)[0x5600f03bf918]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /usr/bin/beanstalkd(+0x82dd)[0x5600f03c02dd]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /usr/bin/beanstalkd(+0x1a24)[0x5600f03b9a24]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf1)[0x7f59eeca32e1]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: /usr/bin/beanstalkd(+0x1caa)[0x5600f03b9caa]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: ======= Memory map: ========
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 5600f03b8000-5600f03c5000 r-xp 00000000 fe:01 29209                      /usr/bin/beanstalkd
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 5600f05c5000-5600f05c6000 r--p 0000d000 fe:01 29209                      /usr/bin/beanstalkd
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 5600f05c6000-5600f05c7000 rw-p 0000e000 fe:01 29209                      /usr/bin/beanstalkd
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 5600f05c7000-5600f05df000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 5600f0fcc000-56019f539000 rw-p 00000000 00:00 0                          [heap]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59e4000000-7f59e4021000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59e4021000-7f59e8000000 ---p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59e995d000-7f59eb95e000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed64c000-7f59ed662000 r-xp 00000000 fe:01 4180                       /lib/x86_64-linux-gnu/libgcc_s.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed662000-7f59ed861000 ---p 00016000 fe:01 4180                       /lib/x86_64-linux-gnu/libgcc_s.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed861000-7f59ed862000 r--p 00015000 fe:01 4180                       /lib/x86_64-linux-gnu/libgcc_s.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed862000-7f59ed863000 rw-p 00016000 fe:01 4180                       /lib/x86_64-linux-gnu/libgcc_s.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed863000-7f59ed876000 r-xp 00000000 fe:01 1094                       /lib/x86_64-linux-gnu/libgpg-error.so.0.21.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ed876000-7f59eda75000 ---p 00013000 fe:01 1094                       /lib/x86_64-linux-gnu/libgpg-error.so.0.21.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eda75000-7f59eda76000 r--p 00012000 fe:01 1094                       /lib/x86_64-linux-gnu/libgpg-error.so.0.21.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eda76000-7f59eda77000 rw-p 00013000 fe:01 1094                       /lib/x86_64-linux-gnu/libgpg-error.so.0.21.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eda77000-7f59eda7a000 r-xp 00000000 fe:01 11911                      /lib/x86_64-linux-gnu/libdl-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eda7a000-7f59edc79000 ---p 00003000 fe:01 11911                      /lib/x86_64-linux-gnu/libdl-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edc79000-7f59edc7a000 r--p 00002000 fe:01 11911                      /lib/x86_64-linux-gnu/libdl-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edc7a000-7f59edc7b000 rw-p 00003000 fe:01 11911                      /lib/x86_64-linux-gnu/libdl-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edc7b000-7f59edced000 r-xp 00000000 fe:01 753                        /lib/x86_64-linux-gnu/libpcre.so.3.13.3
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edced000-7f59edeec000 ---p 00072000 fe:01 753                        /lib/x86_64-linux-gnu/libpcre.so.3.13.3
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edeec000-7f59edeed000 r--p 00071000 fe:01 753                        /lib/x86_64-linux-gnu/libpcre.so.3.13.3
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edeed000-7f59edeee000 rw-p 00072000 fe:01 753                        /lib/x86_64-linux-gnu/libpcre.so.3.13.3
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edeee000-7f59edf06000 r-xp 00000000 fe:01 11928                      /lib/x86_64-linux-gnu/libpthread-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59edf06000-7f59ee105000 ---p 00018000 fe:01 11928                      /lib/x86_64-linux-gnu/libpthread-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee105000-7f59ee106000 r--p 00017000 fe:01 11928                      /lib/x86_64-linux-gnu/libpthread-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee106000-7f59ee107000 rw-p 00018000 fe:01 11928                      /lib/x86_64-linux-gnu/libpthread-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee107000-7f59ee10b000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee10b000-7f59ee212000 r-xp 00000000 fe:01 3688                       /lib/x86_64-linux-gnu/libgcrypt.so.20.1.6
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee212000-7f59ee412000 ---p 00107000 fe:01 3688                       /lib/x86_64-linux-gnu/libgcrypt.so.20.1.6
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee412000-7f59ee414000 r--p 00107000 fe:01 3688                       /lib/x86_64-linux-gnu/libgcrypt.so.20.1.6
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee414000-7f59ee41b000 rw-p 00109000 fe:01 3688                       /lib/x86_64-linux-gnu/libgcrypt.so.20.1.6
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee41b000-7f59ee42c000 r-xp 00000000 fe:01 1168                       /usr/lib/x86_64-linux-gnu/liblz4.so.1.7.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee42c000-7f59ee62b000 ---p 00011000 fe:01 1168                       /usr/lib/x86_64-linux-gnu/liblz4.so.1.7.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee62b000-7f59ee62c000 r--p 00010000 fe:01 1168                       /usr/lib/x86_64-linux-gnu/liblz4.so.1.7.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee62c000-7f59ee62d000 rw-p 00011000 fe:01 1168                       /usr/lib/x86_64-linux-gnu/liblz4.so.1.7.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee62d000-7f59ee652000 r-xp 00000000 fe:01 778                        /lib/x86_64-linux-gnu/liblzma.so.5.2.2
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee652000-7f59ee851000 ---p 00025000 fe:01 778                        /lib/x86_64-linux-gnu/liblzma.so.5.2.2
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee851000-7f59ee852000 r--p 00024000 fe:01 778                        /lib/x86_64-linux-gnu/liblzma.so.5.2.2
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee852000-7f59ee853000 rw-p 00025000 fe:01 778                        /lib/x86_64-linux-gnu/liblzma.so.5.2.2
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee853000-7f59ee85a000 r-xp 00000000 fe:01 11930                      /lib/x86_64-linux-gnu/librt-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ee85a000-7f59eea59000 ---p 00007000 fe:01 11930                      /lib/x86_64-linux-gnu/librt-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eea59000-7f59eea5a000 r--p 00006000 fe:01 11930                      /lib/x86_64-linux-gnu/librt-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eea5a000-7f59eea5b000 rw-p 00007000 fe:01 11930                      /lib/x86_64-linux-gnu/librt-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eea5b000-7f59eea80000 r-xp 00000000 fe:01 2681                       /lib/x86_64-linux-gnu/libselinux.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eea80000-7f59eec7f000 ---p 00025000 fe:01 2681                       /lib/x86_64-linux-gnu/libselinux.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eec7f000-7f59eec80000 r--p 00024000 fe:01 2681                       /lib/x86_64-linux-gnu/libselinux.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eec80000-7f59eec81000 rw-p 00025000 fe:01 2681                       /lib/x86_64-linux-gnu/libselinux.so.1
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eec81000-7f59eec83000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eec83000-7f59eee18000 r-xp 00000000 fe:01 11908                      /lib/x86_64-linux-gnu/libc-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59eee18000-7f59ef018000 ---p 00195000 fe:01 11908                      /lib/x86_64-linux-gnu/libc-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef018000-7f59ef01c000 r--p 00195000 fe:01 11908                      /lib/x86_64-linux-gnu/libc-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef01c000-7f59ef01e000 rw-p 00199000 fe:01 11908                      /lib/x86_64-linux-gnu/libc-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef01e000-7f59ef022000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef022000-7f59ef045000 r-xp 00000000 fe:01 11904                      /lib/x86_64-linux-gnu/ld-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef1aa000-7f59ef1b1000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef1b1000-7f59ef235000 r-xp 00000000 fe:01 6640                       /lib/x86_64-linux-gnu/libsystemd.so.0.17.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef235000-7f59ef236000 ---p 00084000 fe:01 6640                       /lib/x86_64-linux-gnu/libsystemd.so.0.17.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef236000-7f59ef239000 r--p 00084000 fe:01 6640                       /lib/x86_64-linux-gnu/libsystemd.so.0.17.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef239000-7f59ef23a000 rw-p 00087000 fe:01 6640                       /lib/x86_64-linux-gnu/libsystemd.so.0.17.0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef23a000-7f59ef23b000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef241000-7f59ef245000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef245000-7f59ef246000 r--p 00023000 fe:01 11904                      /lib/x86_64-linux-gnu/ld-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef246000-7f59ef247000 rw-p 00024000 fe:01 11904                      /lib/x86_64-linux-gnu/ld-2.24.so
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7f59ef247000-7f59ef248000 rw-p 00000000 00:00 0
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7ffc379f3000-7ffc37a14000 rw-p 00000000 00:00 0                          [stack]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7ffc37be5000-7ffc37be7000 r--p 00000000 00:00 0                          [vvar]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: 7ffc37be7000-7ffc37be9000 r-xp 00000000 00:00 0                          [vdso]
Aug 16 11:11:20 nl-kjg-queue-ba beanstalkd[617]: ffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]
Aug 16 11:11:20 nl-kjg-queue-ba systemd[1]: beanstalkd.service: Main process exited, code=killed, status=6/ABRT
Aug 16 11:11:20 nl-kjg-queue-ba systemd[1]: beanstalkd.service: Unit entered failed state.
Aug 16 11:11:20 nl-kjg-queue-ba systemd[1]: beanstalkd.service: Failed with result 'signal'.
```
The somewhat reliable way to run beanstalkd is to have "-f 0", fsync on every command. That means very bad performance. The default option "-F" - never fsync is a bad idea. If machine crashes user can lose everything since last time kernel flushed buffers instead of just couple of milliseconds of data.

Let's look at the benchmarks to get an idea of good default value for -f:

```
ctbench_put_delete_1024			    5000	    321840 ns/op	   4.83 MB/s
ctbench_put_delete_wal_1024_fsync_000ms	     100	  10783976 ns/op	   0.10 MB/s
ctbench_put_delete_wal_1024_fsync_050ms	    3000	    401186 ns/op	   3.01 MB/s
ctbench_put_delete_wal_1024_fsync_200ms	    3000	    372918 ns/op	   3.04 MB/s
ctbench_put_delete_wal_1024_no_fsync	    3000	    358677 ns/op	   3.05 MB/s

ctbench_put_delete_8192			    5000	    389117 ns/op	  37.42 MB/s
ctbench_put_delete_wal_8192_fsync_000ms	     200	   9642472 ns/op	   1.50 MB/s
ctbench_put_delete_wal_8192_fsync_050ms	    2000	    555952 ns/op	  16.20 MB/s
ctbench_put_delete_wal_8192_fsync_200ms	    2000	    524707 ns/op	  16.30 MB/s
ctbench_put_delete_wal_8192_no_fsync	    3000	    505258 ns/op	  23.37 MB/s
```

Performance degrades only for the fsync period -> zero. 50ms is a good enough tradeoff between performance and the amount of data lost in a powerloss crash.

We can measure performance for other -f values around the value of 50ms to get more accurate measurement. 

@beanstalkd/maintainers what do you think?
Problem description: this is a specific solution meant to address raised in #240, #332, and #427
The idea is to have a pipeline command which causes a fixed set of subsequent commands to be handled atomically. This could be used to reduce the number of round trips to the server, or for use cases where a set of actions needs to be atomic.
Proposed solution: new command

```
pipeline <bytes>\r\n<the commands in the pipeline>\r\n
```
response:
```
OK <bytes>\r\n<responses to those commands>\r\n
```
The commands following "pipeline" would be exactly as they would be if not in a pipeline. The data following a pipeline OK would be the responses from each of the command in the same order as the commands were included in the pipeline. Semantically, they would be processed the same way, except if any command failed, the others would also fail.

We would add two new error codes:
PIPELINE_ERROR: one of the other commands in the pipeline failed
PIPELINE_INVALID: one of the commands in the pipeline can't be used in a pipeline

The set of commands allowed in a pipeline could be limited to put, reserve-with-timeout 0, delete, use, watch, and ignore. We might also want to include kick, touch and bury.
With pipeline:
- put-in-tube becomes pipeline, use, put
- move becomes pipeline, delete, use, put (admittedly not exactly the same thing)
- reserve-batch becomes pipeline, reserve-with-timeout, reserve-with-timeout, [...]

On some OSX `fsync` does not affect performance that much. I was staggered by this and started looking. What I have found:

> For applications that require tighter guarantees about the integrity of
>      their data, Mac OS X provides the F_FULLFSYNC fcntl.  The F_FULLFSYNC
>      fcntl asks the drive to flush all buffered data to permanent storage.
>      Applications, such as databases, that require a strict ordering of writes
>      should use F_FULLFSYNC to ensure that their data is written in the order
>      they expect.

https://developer.apple.com/library/archive/documentation/System/Conceptual/ManPages_iPhoneOS/man2/fsync.2.html

`fsync` usage on OSX should be replaced with `fcntl(fd, F_FULLFSYNC, 0)` if `F_FULLFSYNC` is defined, otherwise fallback to 'fsync'.
In case of IO error in `walwrite()`: 
* the `srv->wal` is disabled
* command is not completed 
* INTERNAL_ERROR is replied to the user. 

But that happens only once in a lifetime of a process. All further commands will not touch the disk and jobs will be just stored in the memory. Client will have no clue that his next retry was not fully successful, that is beanstalkd no longer stores jobs to the WAL. 

This is not a robust solution. Client should have a better chance to understand that storage is broken except for transient "INTERNAL_ERROR" reply.

ADDON: also walmaint() should be error checked before returning  a success to the user. Related issue #477 
Protocol states:
> If a client violates the protocol (such as by sending a request that is not
> well-formed or a command that does not exist) or if the server has an error,
> the server will reply with one of the following error messages:
> 
>  - "OUT_OF_MEMORY\r\n" The server cannot allocate enough memory for the job.
>    The client should try again later.
> 
>  - "INTERNAL_ERROR\r\n" This indicates a bug in the server. It should never
>    happen. If it does happen, please report it at
>    http://groups.google.com/group/beanstalk-talk.

But often the program throws INT_ERROR into the face of user when job cannot be written to the disk:
```c
    r = enqueue_job(c->srv, j, j->r.delay, 1);
    if (r < 0) {
        reply_serr(c, MSG_INTERNAL_ERROR);
        return;
    }
```
At the same time when WAL file cannot be allocated program respond by OOM:
```c
        /* We want to update the delay deadline on disk, so reserve space for
         * that. */
        if (delay) {
            int z = walresvupdate(&c->srv->wal);
            if (!z) {
                reply_serr(c, MSG_OUT_OF_MEMORY);
                return;
            }
```
Returning OOM for the case of error with IO is too optimistic, unless we can extract a special case of ENOSPC, No space left on device, and report OOM only for that case. All other IO errors should be reported as some kind of IO ERROR, so the user should stop using this server and check beanstalkd's output for the clues and maybe check disk for consistency.

If INTERNAL_ERROR was chosen to indicate a bug in a software it means that it should not be used for disk IO errors, because they can happen and it is not in a power of beanstalkd to prevent this, so user should take measures with his hardware. And INTERNAL_ERROR should be used only for bugs, unexpected cases, for which should be generated a log message, that could be reported to the maintainers of beanstalkd.
kick-job should return MSG_INTERNAL_ERROR on IO error so the client will get a clue what is going on.