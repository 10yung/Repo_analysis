Sharing a new theme, inc. screenshot as close as possible to the guidelines.

Is the reason for this problem the same as #22 ?

<img width="730" alt="default" src="https://user-images.githubusercontent.com/4166765/49027370-04797280-f1db-11e8-8ce4-82cacc4375fe.PNG">

Hi Scott,

Thank you so much for implementing and sharing this repository, it's very appreciated! I'm working in R2018a, and having trouble finding the *.prf color setting for Matlab's so-called "Validation sections":

```Preferences / Colors / MATLAB syntax highlighting colors / Validation sections```

Within classdef files, this controls the color of per-property class type declarations, as explained [here](https://www.mathworks.com/help/matlab/matlab_oop/validate-property-values.html). I believe property validation was introduced into Matlab in R2016a.

Please let me know your thoughts on adding support for this, within the schemer *.prf files?

Thanks,
Brad
It would be easier for Matlab users unfamiliar with GitHub to upload any schemes they create without leaving the Matlab environment.

To this end, it might be worthwhile setting up a server which can hold and serve the Matlab schemes, and a function which can upload them to the server using a simple UI running in Matlab.
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/32308326-create-function-to-upload-schemes-to-a-central-server?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github).
</bountysource-plugin>
We should check if the user is exporting from a version of MATLAB which supports the language being exported due to the following scenario:
- User is in older version of MATLAB which does not support all the languages in the most up to date version. (Language ABC is not included in their version.)
- User imports scheme X which contains additional languages, with every language specified in the .prf file (including ABC). Now user has settings saved in matlab.prf for languages which their GUI will not present.
- User designs a new scheme for MATLAB syntax.
- User ignores advised instructions for the creation of a scheme with additional languages (which specify to create MATLAB syntax, export, import, fix additional languages) and designs the additional languages colours without importing the MATLAB syntax as a base.
- User exports the colour scheme to Y.prf, with additional languages included. The exported scheme will have colours for ABC from scheme X because these settings will exist in matlab.prf, but they do not match the background etc specified for their scheme, Y.
- User distributes their scheme, Y. Others import it into up-to-date MATLAB. Colours for ABC syntax do not work.

This scenario will presumably happen eventually, but it is not a high priority. I anticipate the majority of designers will not do anything for the Additional Languages.
## <bountysource-plugin>

Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28816797-version-check-for-additional-languages?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github).
</bountysource-plugin>

I expect a reasonable number of people will want to create a new color scheme based on an existing one implemented for a different editor.

At the moment people can port the color scheme across by manually choosing how to map the between the entities in the two formats and converting any hexadecimal colours with `color2javaRGBint`. However, having to convert all the colours into RGB integer format one at a time is tedious. Also, it becomes hard to keep track of what colour the value encodes. 

It would make it much easier for users to simply copy over the hexadecimal values into the template `prf` file. Not only would such a thing be much faster, it will also make porting a colour scheme more accessible.

This will make the format incompatible with the actual MATLAB `.prf` format (which does not have any hexadecimal values), but this can be fixed by importing the color scheme and exporting it again with `schemer_export`. After the hex values are successfully imported, the colour values will be exported into RGB int format instead.
## 


<bountysource-plugin>
---
Want to back this issue? **[Post a bounty on it!](https://www.bountysource.com/issues/28132465-import-hex-values?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github)** We accept bounties via [Bountysource](https://www.bountysource.com/?utm_campaign=plugin&utm_content=tracker%2F19271142&utm_medium=issues&utm_source=github).
</bountysource-plugin>