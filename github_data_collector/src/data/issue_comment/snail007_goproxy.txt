Right now goproxy eats over 3 full CPU cores(320-350%). 
Where the problem is: DNS resolving code.

## Expected Behavior
Working well without resolving when there is no need.
for example(ips are random in example) : 
client requests connection to 7.7.7.7:65332
server does it directly without doing any DNS requests.

## Current Behavior
Horribly big CPU load even if no traffic goes anymore thru goproxy after using torrent client on a popular torrent.
Why? Because it FLOODS my DNS server taking lot of resources to do it.

## Possible Solution
do not resolve IPs if not requested to resolve. 

## Steps to Reproduce
1. Configure qBitTorrent to use socks5 for everyting
2. Start any popular torrent with thousands of peers
3. Observe huge CPU load and flood to DNS server for a long time (for me it eaten over 1h of CPU time already).

## Context (Environment)
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
1. proxy version is : commercial_8.3
1. full command is : ./proxy socks  --lb-method=roundrobin -p 192.168.4.252:9990
1. system is : linux x86_64
1. full log is: not required as it can be miles long and issue is easy to reproduce.

<!--- Provide a general summary of the issue in the Title above -->

## Expected Behavior
<!--- Tell us what should happen -->

## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->

## Steps to Reproduce
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
本机可以上网，但是一直说网络验证失败，有木有遇到过类似情况的啊

## Context (Environment)
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
1. proxy version is : v?
1. full command is :?
1. system is :
1. full log is: ?

<!--- Provide a general summary of the issue in the Title above -->

## Detailed Description
<!--- Provide a detailed description of the change or addition you are proposing -->
![image](https://user-images.githubusercontent.com/20569072/71976903-716e9100-3252-11ea-8b22-cb69fa26d629.png)

## Possible Implementation
<!--- Not obligatory, but suggest an idea for implementing addition or change -->

我在 SwitchyOmega 里有个 https proxy 设置 ，
protool 为 https 
server 为  www.abcd.com
port  为 443

这个proxy 是别人的，在SwitchyOmega里设置好能用，现在没有  proxy.crt  proxy.key 这两个文件。请问 goproxy怎么设置使用这样的proxy
IE早一些版本如IE7，在访问abc:8000端口后继续访问相同域名abc:8080端口的资源，会返回404错误，目前根据源码分析，问题可能是第一次访问8000端口时在func (s *HTTP) callback(inConn net.Conn)里建立了client->proxy-server的链路，后续再切换至访问8080端口资源时，client端没有发起新的tcp链接，而是直接走了已经建立的链路导致请求被发送到了abc:8000端口所以被返回404。
而后又测试了一下最新的8.8版本的binary包，发现没有这类问题。不知是否是已经修复此类问题？可否提供一下解决思路？十分感谢。
最新的linux amd64 8.7 版本，cpu 用了一段时间后，变得很高

1. proxy version is : proxy-darwin-386_commercial.tar.gz
1. full command is : ./proxy
1. system is : mac os 10.15.1 (19B88)

error log :   "bad CPU type in executable: ./proxy"
在heroku中部署了几个proxy，想通过同时并发多个的请求实现合并带宽的功能，@snail007是否此功能已实现了？
<!--- Provide a general summary of the issue in the Title above -->
我在服务器上通过`./proxy sps -p :80,:443 --log proxy.log --daemon`的方式运行代理服务，然后在客户机上运行 `curl -vvvvvv https://www.oschina.net --resolve 'www.oschina.net:443:113.55.17.2'` 是没有问题的，但是运行 `curl https://pubs.acs.org --resolve 'pubs.acs.org:443:113.55.17.2'`就会有如下错误提示
```
C:\Users\Liu.D.H>curl -vvv https://pubs.acs.org --resolve 'pubs.acs.org:443:113.55.17.2'
* Address in ''pubs.acs.org:443:113.55.17.2'' found illegal!
* Rebuilt URL to: https://pubs.acs.org/
*   Trying 113.55.17.2...
* TCP_NODELAY set
* Connected to pubs.acs.org (113.55.17.2) port 443 (#0)
* schannel: SSL/TLS connection with pubs.acs.org port 443 (step 1/3)
* schannel: checking server certificate revocation
* schannel: sending initial handshake data: sending 177 bytes...
* schannel: sent initial handshake data: sent 177 bytes
* schannel: SSL/TLS connection with pubs.acs.org port 443 (step 2/3)
* schannel: failed to receive handshake, need more data
* schannel: SSL/TLS connection with pubs.acs.org port 443 (step 2/3)
* schannel: failed to receive handshake, SSL/TLS connection failed
* Closing connection 0
* schannel: shutting down SSL/TLS connection with pubs.acs.org port 443
* schannel: clear security context handle
curl: (35) schannel: failed to receive handshake, SSL/TLS connection failed

C:\Users\Liu.D.H>
```

这是服务端相关日志信息
```
2019/11/18 03:30:57 SNI:https://pubs.acs.org:443
2019/11/18 03:30:57 conn 113.55.127.140:12957 - 113.55.17.2:45619 connected [pubs.acs.org:443]
2019/11/18 03:31:13 conn 113.55.127.140:12957 - 113.55.17.2:45619 released [pubs.acs.org:443]

```

## Expected Behavior
<!--- Tell us what should happen -->
可以正常的获得请求内容

## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->
代理请求失败

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
## Context (Environment)
<!--- How has this issue affected you? What are you trying to accomplish? -->
<!--- Providing context helps us come up with a solution that is most useful in the real world -->
1. proxy version is : v8.6
1. full command is :./proxy sps -p :80,:443 --log proxy.log --daemon
1. system is :Ubuntu 18.04.2 LTS

<!--- Provide a general summary of the issue in the Title above -->

## Detailed Description
<!--- Provide a detailed description of the change or addition you are proposing -->

## Possible Implementation
<!--- Not obligatory, but suggest an idea for implementing addition or change -->

最新版(v8.5)内网穿透dns使用普通方法，，无法正常解析(完全按照官方教程)
```
vps上执行
./proxy bridge -p ":33080" -C proxy.crt -K proxy.key
./proxy server --udp -r ":53@:53" -P "127.0.0.1:33080" -C proxy.crt -K proxy.key

在公司机器A上面执行
./proxy client -P "22.22.22.22:33080" -C proxy.crt -K proxy.key
```
* server日志
```
2019/11/04 21:00:04 session[0] created
2019/11/04 21:00:04 udp conn 35962b5355fb0f7d291fed4776bc3f2453001ca1 connected
2019/11/04 21:00:04 udp conn read udp packet fail , err: EOF 
2019/11/04 21:00:04 udp conn 35962b5355fb0f7d291fed4776bc3f2453001ca1 released
2019/11/04 21:00:05 session[6] created
2019/11/04 21:00:05 udp conn 01d4bbb2df938397587e0aadb52be1e06a31f07b connected
2019/11/04 21:00:05 udp conn read udp packet fail , err: EOF 
2019/11/04 21:00:05 udp conn 01d4bbb2df938397587e0aadb52be1e06a31f07b released
```
* 公司A机器日志
```
2019/11/04 21:02:22 udp conn 819a670529d83aaa5f594f31777d0ddf229f554b connected
2019/11/04 21:02:22 udp conn read udp packet fail , err: read udp 127.0.0.1:37393->127.0.0.1:53: read: connection refused 
2019/11/04 21:02:22 udp packet revecived from bridge fail, err: io: read/write on closed pipe
2019/11/04 21:02:22 udp conn 819a670529d83aaa5f594f31777d0ddf229f554b released
2019/11/04 21:02:23 worker[3] signal revecived,server 8ba884a3a2bf497fb413183ed3cca67fcd59db0b stream 8b69a963c46669adfdaeb91335b1bd409ac1e6bd udp:127.0.0.1:53
2019/11/04 21:02:23 udp conn 8b69a963c46669adfdaeb91335b1bd409ac1e6bd connected
2019/11/04 21:02:23 udp conn read udp packet fail , err: read udp 127.0.0.1:44593->127.0.0.1:53: read: connection refused 
2019/11/04 21:02:23 udp conn 8b69a963c46669adfdaeb91335b1bd409ac1e6bd released
2019/11/04 21:02:23 udp packet revecived from bridge fail, err: io: read/write on closed pipe
```


请问大佬啥子原因，案例不可行吗？？就是按照内网穿透UDP普通用法做的，，那个环节有流程(vps服务器应开放了udp53端口的)