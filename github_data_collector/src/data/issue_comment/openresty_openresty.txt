root@localhost:/home/dwf/openresty-1.15.8.2# ./configure
platform: linux (linux)
cp -rp bundle/ build
cd build
cd LuaJIT-2.1-20190507
cc: error: unrecognized command line option ‘-msse4.2’
WARNING: -msse4.2 not supported in cc.
make TARGET_STRIP=@: CCDEBUG=-g XCFLAGS='-DLUAJIT_ENABLE_LUA52COMPAT' CC=cc PREFIX=/usr/local/openresty/luajit
==== Building LuaJIT 2.1.0-beta3 ====
make -C src
make[1]: Entering directory '/home/dwf/openresty-1.15.8.2/build/LuaJIT-2.1-20190507/src'
HOSTCC    host/minilua.o

i try to install openresty on my fedora and follow the command
sudo dnf install -y dnf-plugins-core
sudo dnf config-manager --add-repo https://openresty.org/package/fedora/openresty.repo
sudo dnf install -y openresty
but i got an error
Failed to download metadata for repo 'openresty'

I has search on the internet but cannot resolve this issue.
OpenSSL 1.1.1 was implemented in https://github.com/openresty/openresty/issues/456 . There is a comment that it should be a new ticket to create the CentOS repo packages. However, I cannot find such a ticket. So here it is.

Please let us know what we can do to help. If there is any documentation/guidelines on doing the actual packaging, we would be willing to contribute.

Tagging @agentzh just in case
I am Testing the Performance of openresty lua on own server

location / {
            default_type text/html;
            content_by_lua_block {
                ngx.header["Content-Length"]="1"; 
                ngx.say("")
            }
        }

not sure why got a very bad QPS.
[root@client ~]# wrk -t 12 -c 50 -d 60s http://192.168.1.100/0kb.lua
Running 1m test @ http://192.168.1.100/0kb.lua
  12 threads and 50 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   438.67us  330.97us  22.78ms   92.46%
    Req/Sec     5.41k     1.74k    6.88k    83.21%
  147409 requests in 1.00m, 19.54MB read
  Socket errors: connect 48, read 0, write 0, timeout 0
Requests/sec:   2456.05
Transfer/sec:    333.39KB

My server and client are two separate servers and using 1Gbps link between two servers.
Server configuration:
Intel(R) Xeon(R) CPU D-1531 @ 2.20GHz
16GB RAM

without ngx LUA I got **Requests/sec:  78127.02**

wrk -t 12 -c 50 -d 60s http://192.168.1.100/0kb.dat 
Running 1m test @ http://192.168.1.100/0kb.dat
  12 threads and 50 connections
  Thread Stats   Avg      Stdev     Max   +/- Stdev
    Latency   517.74us    3.22ms 200.36ms   99.80%
    Req/Sec     6.54k   368.64     7.13k    96.99%
  4695427 requests in 1.00m, 1.06GB read
Requests/sec:  78127.02

I see a strange problem here when I start test from client using wrk ,  nginx server got 8% cpu usage but after about 3 seconds nginx server stay at 0.x% cpu usage, Until the end of the test, it remained at 0.x% cpu usage. So I suspect that nginx may be dead, but I tested nginx from another client and returned normal content, and the response was very fast.

If without ngx LUA test I can see the whole process  nginx server stays at 7 ~ 12% cpu usage Life cycle


Is this due a wrk problem?  but with out ngxLUA, wrk tool test results are normal


OpenResty version - 1.15.8.1-1~stretch1

We are running openresty in fargate. Fargate has a limitation of 10GB per task.

We received the below error 
`pwritev() "/usr/local/openresty/nginx/proxy_temp/xxxxxxxxxxxxxxxx" failed (28: No space left on device) while reading upstream`

Is there a way to mitigate this issue by setting a max space or something else.

Thanks & Regards
Sunil
$ cat 1.lua
local r, n, err = ngx.re.gsub("2", "^(\\s*)", "#", "jo")
print(r)
$ resty 1.lua
#


$ cat 1.lua
local r, n, err = ngx.re.gsub("222", "^(\\s*)", "#", "jo")
print(r)
$ resty 1.lua
#222

$ resty -v
resty 0.23
nginx version: openresty/1.15.8.1
built by gcc 4.8.5 20150623 (Red Hat 4.8.5-36) (GCC)
built with OpenSSL 1.1.0h  27 Mar 2018

I'm trying to modify proxy_pass upstream servers with access_by_lua_block and balancer_by_lua_block, but it seems it has no effect to upstream itself. I can modify headers from variables, but not upstream servers itself, looks like it is done when nginx starts and never changes.

[nginx_conf.txt](https://github.com/openresty/openresty/files/3982549/nginx_conf.txt)
originally i wanted to Import data:
When Lua programs and Mysql are on the same server，use LOAD DATA FILE no problem；
But When Lua programs and Mysql Not on the same server，use LOAD DATA **LOCAL** FILE  Encounter a mistake。
FILE : resty / mysql.lua
ROW : 861
ERROR : lua entry thread aborted: runtime error: /resty/mysql.lua:861: attempt to concatenate local 'typ' (a nil value)
I use the systemd service

`
[Unit]
Description=openresty
After=auditd.service systemd-user-sessions.service time-sync.target network.target
 
[Service]
Type=forking
PIDFile=/data/local/openresty-1.15.8.2/nginx/logs/nginx.pid
ExecStartPre=/usr/sbin/openresty -t
ExecStart=/usr/sbin/openresty
ExecReload=/usr/sbin/openresty -s reload
ExecStop=/usr/sbin/openresty -s stop
PrivateTmp=true
 
[Install]
WantedBy=multi-user.target
`

when I do "systemctl start openresty", it tell me:


[root@node1 nginx]# systemctl start openresty
Job for openresty.service failed because a timeout was exceeded.
See "systemctl status openresty.service" and "journalctl -xe" for details.
[root@node1 nginx]# journalctl -xe
 The result is RESULT.
Dec 10 22:59:59 node1 groupadd[26812]: group added to /etc/group: name=www, GID=1000
Dec 10 22:59:59 node1 groupadd[26812]: group added to /etc/gshadow: name=www
Dec 10 22:59:59 node1 groupadd[26812]: new group: name=www, GID=1000

Dec 10 23:00:46 node1 systemd[1]: Starting openresty...
  Subject: Unit openresty.service has begun start-up
  Defined-By: systemd
  Support: https://access.redhat.com/support
  
  Unit openresty.service has begun starting up.
Dec 10 23:00:46 node1 openresty[26823]: nginx: the configuration file /data/local/openresty-1.15.8.2/nginx/conf/nginx.conf syntax is ok
Dec 10 23:00:46 node1 openresty[26823]: nginx: configuration file /data/local/openresty-1.15.8.2/nginx/conf/nginx.conf test is successful 
Dec 10 23:00:46 node1 systemd[1]: openresty.service: Can't convert PID files /data/local/openresty-1.15.8.2/nginx/logs/nginx.pid O_PATH file descriptor to proper file descriptor: Permiss  Deny
Dec 10 23:00:46 node1 systemd[1]: openresty.service: Can't convert PID files /data/local/openresty-1.15.8.2/nginx/logs/nginx.pid O_PATH file descriptor to proper file descriptor: Permiss Deny
Dec 10 23:01:01 node1 CROND[26829]: (root) CMD (run-parts /etc/cron.hourly)
Dec 10 23:01:01 node1 run-parts[26832]: (/etc/cron.hourly) starting 0anacron
Dec 10 23:01:01 node1 anacron[26838]: Anacron started on 2019-12-10
Dec 10 23:01:01 node1 anacron[26838]: Will run job `cron.daily' in 44 min.
Dec 10 23:01:01 node1 anacron[26838]: Will run job `cron.weekly' in 64 min.
Dec 10 23:01:01 node1 anacron[26838]: Will run job `cron.monthly' in 84 min.
Dec 10 23:01:01 node1 anacron[26838]: Jobs will be executed sequentially
Dec 10 23:01:01 node1 run-parts[26840]: (/etc/cron.hourly) finished 0anacron
Dec 10 23:02:16 node1 systemd[1]: openresty.service: Start operation timed out. Terminating.
Dec 10 23:02:16 node1 systemd[1]: openresty.service: Failed with result 'timeout'.
Dec 10 23:02:16 node1 systemd[1]: Failed to start openresty.
    Subject: Unit openresty.service has failed
    Defined-By: systemd
    Support: https://access.redhat.com/support
    
    Unit openresty.service has failed.
     The result is RESULT.
[root@node1 nginx]# 


Hi,
We recently deployed a node app in production that talks to a API endpoint over https. Of late, we started noticing that the call to the API was failing with error as 'Parser Error : Duplicate Content-Length' and there were a minimum of 6-7 occurrences daily. Though the error message clearly indicates that the API is sending multiple content-length header in the response, we couldn't log these headers in the node app as the call were failing in the underlying node module before reaching our code.
Below are the open issues related to this in nodejs GitHub page.
nodejs/http-parser#435
nodejs/http-parser#460

In order to troubleshoot the issue better, we decided to introduce a nginx proxy between the node app and the API endpoint. We decided to use OpenResty as it allows us to use lua language and provides the ability to log the entire request and response including the headers in JSON format. Once we capture the error condition, we were planning to share it with the API team and press them for a fix.

To our surprise the error that used to occur at least 6-7 times a day stopped altogether. The log entries were all clean with only one content-length header and no failures in the app as such.
We are pretty sure that the API team didn't fix their code as they are waiting on us to capture the error scenario.

My queries here are as below.

1. Does OpenResty or nginx or luajson that we are using is removing the duplicate content-length header if the values are same ?
2. If the above is true, can you please point me to the docs. Also, is there a way for us to log the headers before it gets removed ?
3. Are we inadvertently removing it as part of the lua script ? We are logging the entire request and response as JSON via this script. Please refer attachment.

The docker image we are using is "openresty/openresty:jessie" version is 1.13.6.1 and we are using "luajson" package. I have attached the docker file, nginx.conf and lua script as a zip file.

Please clarify as we are lost on what exactly is happening here.

Below are the version information.
nginx version: openresty/1.13.6.1
built by gcc 4.9.2 (Debian 4.9.2-10+deb8u1) 
built with OpenSSL 1.0.2k  26 Jan 2017
TLS SNI support enabled
configure arguments: --prefix=/usr/local/openresty/nginx --with-cc-opt=-O2 --add-module=../ngx_devel_kit-0.3.0 --add-module=../echo-nginx-module-0.61 --add-module=../xss-nginx-module-0.05 --add-module=../ngx_coolkit-0.2rc3 --add-module=../set-misc-nginx-module-0.31 --add-module=../form-input-nginx-module-0.12 --add-module=../encrypted-session-nginx-module-0.07 --add-module=../srcache-nginx-module-0.31 --add-module=../ngx_lua-0.10.11 --add-module=../ngx_lua_upstream-0.07 --add-module=../headers-more-nginx-module-0.33 --add-module=../array-var-nginx-module-0.05 --add-module=../memc-nginx-module-0.18 --add-module=../redis2-nginx-module-0.14 --add-module=../redis-nginx-module-0.3.7 --add-module=../rds-json-nginx-module-0.15 --add-module=../rds-csv-nginx-module-0.08 --add-module=../ngx_stream_lua-0.0.3 --with-ld-opt=-Wl,-rpath,/usr/local/openresty/luajit/lib --with-openssl=/tmp/openssl-1.0.2k --with-pcre=/tmp/pcre-8.41 --with-file-aio --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_geoip_module=dynamic --with-http_gunzip_module --with-http_gzip_static_module --with-http_image_filter_module=dynamic --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-http_xslt_module=dynamic --with-ipv6 --with-mail --with-mail_ssl_module --with-md5-asm --with-pcre-jit --with-sha1-asm --with-stream --with-stream_ssl_module --with-threads --with-stream --with-stream_ssl_module

OS information:
Linux c6fdf1a53d29 4.9.87-linuxkit-aufs #1 SMP Wed Mar 14 15:12:16 UTC 2018 x86_64 GNU/Linux

Thanks,
Sudharsan N.

[Archive.zip](https://github.com/openresty/openresty/files/3936547/Archive.zip)
