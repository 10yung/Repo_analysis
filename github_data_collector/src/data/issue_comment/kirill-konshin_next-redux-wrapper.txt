I'm currently on **next** 9.1.7 and **next-redux-wrapper** 4.0.1.

I have the wrap on the `_app.js`:

```
import React from 'react';
import App from 'next/app';
import { ApolloProvider } from 'react-apollo';
import apolloClient from '../apollo';
import { Provider } from 'react-redux';
import withRedux from 'next-redux-wrapper';
import { makeStore } from '../store';

class MyApp extends App {
  static async getInitialProps({ Component, ctx }) {
    const pageProps = Component.getInitialProps ? await Component.getInitialProps(ctx) : {};
    return { pageProps };
  };

  return () {
    const { Component, pageProps, store } = this.props;
    return (
      <ApolloProvider client={apolloClient}>
        <Provider store={store}>
          <Component {...pageProps} />
        </Provider>
      </ApolloProvider>
    );
  }
}

export default withRedux(makeStore, { debug: true })(MyApp);
```

But when I `connect` my pages to Redux, I get this error:

<img width="884" alt="Screen Shot 2020-01-13 at 9 20 17 PM" src="https://user-images.githubusercontent.com/3037893/72316280-811f1880-364a-11ea-93f3-89d01a47ce0c.png">

How can I get around this?

I have a question regarding the implementation of redux in getInitialProps in  _app.js.

In order to make the new next api work (getStaticProps, getServerProps) one must get rid of getInitialProps in _app.js. Otherwise  `Warning: You have opted-out of Automatic Static Optimization due to getInitialProps in pages/_app.`

Is there any way using the store provider outside the _app.js and at the same time using the store within the components of static pages or am I too optimistic?

As I understand the store must be provided on each SSide call. Which makes static pages basically impossible?

It would be helpful to have some documentation of what the library is and why the library should be used, near the top of the readme (i.e. a sort of justification for the library's existence). Also, perhaps, an explanation of when _not_ to use the library. There is some information like this scattered throughout the readme, but you have to read the whole thing to find it.

For example, I found these snippets really helpful, but they're all the way at the bottom of the doc:

> The main purpose of this library is to make sure actions are consistently dispatched on all pages on client and on server from getInitialProps function...

> If you need a static website you don't need this lib at all because you can always dispatch at client side on componentDidMount just like you normally would with bare React Redux, and let server only serve initial/static markup.

Hi everyone,

I am wondering if there is a reason why next-redux-wrapper declares its own `NextJSPageContext` and `NextJSAppContext` instead of merging the context props `store` and `isServer` into the `NextPageContext` interface?

Background: I am having problems setting up my _app component with TypeScript because the `App` class from "next/app" can only be extended when getInitialProps takes an `AppContext` as its parameter.
Augmenting `NextPageContext` would be a nice solution in my opinion. Also, `store` and `isServer` would be available on every `NextPage`'s `getInitialProps` context without any extra configuration.

If this approach is welcome I would be happy to create a PR! In this case, I would augment `NextPageContext` and deprecate `NextJSPageContext` and `NextJSAppContext`.
NPM: `hoist-non-react-statics`