The method `from_file()` for Writer from BurntSushi's CSV crate has been deprecated a while ago and replaced by `from_path()`. As a relatively new person to Rust, this kind of got me stuck with the presented examples for writing into a CSV file until I dug into the documentation :).

Instead of: 

    let dollar_films = vec![
        ("A Fistful of Dollars", "Rojo", 1964),
        ("For a Few Dollars More", "El Indio", 1965),
        ("The Good, the Bad and the Ugly", "Tuco", 1966),
    ];
    let path = "westerns.csv";
    let mut writer = Writer::from_file(path).unwrap();
    for row in dollar_films {
        writer.encode(row).expect("CSV writer error");
    }


The following works just fine using the current version of **CSV** crate (**1.1.1**):

    let dollar_films = vec![
        ["A Fistful of Dollars", "Rojo", "1964"],
        ["For a Few Dollars More", "El Indio", "1965"],
        ["The Good, the Bad and the Ugly", "Tuco", "1966"],
    ];
    let path = "westerns.cvs";
    let mut writer = Writer::from_path(path).unwrap();
    for row in dollar_films {
        writer.write_record(&row).expect("CSV writer error");
        writer.flush();
    }
bo brakuje dobrych stron o ruscie
![24days_postgres](https://user-images.githubusercontent.com/28787/43451885-49683016-94b6-11e8-8303-e06c4844905f.png)

![24days_postgres_blog](https://user-images.githubusercontent.com/28787/43451934-6855e2fc-94b6-11e8-89d6-d15c062a16ee.png)

Hey, thanks for writing up these tutorials. I found that using the auto_unmount option with FUSE was a real timesaver in development, since it lets you ^c the program and then re-run it without running a separate `fusermount -u <path>` in between. It doesn't seem to be documented very well and this is probably the best introduction to the crate, so it might be nice to demonstrate its use in this book. 
```
fuse::mount(JsonFilesystem, &mountpoint, &["-o,auto_unmount".as_ref()]);
```
Tracked in the `serde-0.9` branch.

Waiting for https://github.com/softprops/envy/issues/6.
It may be worth switching now that `serde` is so popular. See [`json!`](https://docs.serde.rs/serde_json/macro.json.html).
The package you mentioned already says that they implement https://tools.ietf.org/html/rfc4180. In that regard that wording is misleading:
```
Note that I said some variation - CSV itself isn't standardized and there are lots of quirks in different implementations.
```

That being said, I understand what you mean: there are many implementations which just don't follow the RFC and provide a naive implementation which does not handle delimeters or escape characters properly.