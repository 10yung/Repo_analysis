"Insufficient control flow in certain data structures for some Intel(R) Processors with Intel(R) Processor Graphics may allow an unauthenticated user to potentially enable information disclosure via local access."

Intel Security Advisory: https://www.intel.com/content/www/us/en/security-center/advisory/intel-sa-00314.html

https://cve.mitre.org/cgi-bin/cvename.cgi?name=%20CVE-2019-14615

I've s-m-c installed
```
	git log | head
		commit a1a35c9b35463d30fa99eea2b3046db8ad34ab8e
		Author: Stéphane Lesimple <speed47_github@speed47.net>
		Date:   Fri Jan 10 13:19:36 2020 +0100

		    chore: github: add check run on pull requests

		commit eec77e1ab9e15de0174a6dee2ca2aa6045166b1c
		Author: Stéphane Lesimple <speed47_github@speed47.net>
		Date:   Tue Dec 10 19:16:58 2019 +0100

	spectre-meltdown-checker.sh --version
		Spectre and Meltdown mitigation detection tool v0.43
```

on a Xen server,
```
	xl info | egrep "release|xen_version"
		release                : 5.4.11-24.g2d02eb4-default
		xen_version            : 4.13.0_04-lp151.688	

	lsb_release -rd
		Description:    openSUSE Leap 15.1
		Release:        15.1
```

verifying, my cmdline,
```
	cat /proc/cmdline
		... mds=full l1tf=flush ...
```

and /proc
```
	cat /sys/devices/system/cpu/vulnerabilities/l1tf
		Mitigation: PTE Inversion
```

both have l1tf mitigation

but, on exec, s-m-c returns,
```
	...
	CVE-2018-3646 aka 'Foreshadow-NG (VMM), L1 terminal fault'
	* Information from the /sys interface: Mitigation: PTE Inversion
	* This system is a host running a hypervisor:  YES
	* Mitigation 1 (KVM)
	  * EPT is disabled:  N/A  (the kvm_intel module is not loaded)
	* Mitigation 2
	  * L1D flush is supported by kernel:  YES  (found flush_l1d in /proc/cpuinfo)
	  * L1D flush enabled:  UNKNOWN  (unrecognized mode)
	  * Hardware-backed L1D flush supported:  YES  (performance impact of the mitigation will be greatly reduced)
	  * Hyper-Threading (SMT) is enabled:  NO
	> STATUS:  VULNERABLE  (disable EPT or enable L1D flushing to mitigate the vulnerability)
	...
```

busybox's ps command does not have 'ax' option.
----
CVE-2018-3620: OK (your CPU vendor reported your CPU model as not vulnerable)
ps: invalid option -- 'a'
BusyBox v1.30.1 (2020-01-07 07:47:10 UTC) multi-call binary.
Usage: ps
----

And busybox's ps command provides output similar to ax.
This supports busybox's ps command.

Signed-off-by: Nobuhiro Iwamatsu <nobuhiro1.iwamatsu@toshiba.co.jp>
Hello, I would very much like to help on your script. When I remove all your shellcheck disable lines, I get a bunch of infos and warnings. Here's a start:

Useless cat. Consider 'cmd < file | ..' or 'cmd file | ..' instead.

I don't get why you wouldn't do:

```
gzip -c /proc/cpuinfo 2> /dev/null | base64 -w0
```

Please let me know if to continue or not, cheers.
Hi,

Is the date for 2005/06/10 correct for this microcode? Is it because I'm using a KVM CPU? The system is running Centos 7.7.1908 and have microcode 53.7.el7_7 installed.
  * CPU microcode is known to cause stability problems:  NO  (model 0x6 family 0xf stepping 0x1 ucode 0x1 cpuid 0xf61)
  * CPU microcode is the latest known available version:  NO  (latest version is 0x8 dated 2005/06/10 according to local firmwares DB v130.20191104+i20191027)

This is a virtual machine KVM with the following CPU:
```
processor	: 2
vendor_id	: GenuineIntel
cpu family	: 15
model		: 6
model name	: Common KVM processor
stepping	: 1
microcode	: 0x1
cpu MHz		: 2394.998
cache size	: 16384 KB
physical id	: 0
siblings	: 4
core id		: 2
cpu cores	: 4
apicid		: 2
initial apicid	: 2
fpu		: yes
fpu_exception	: yes
cpuid level	: 13
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx lm constant_tsc nopl xtopology eagerfpu pni cx16 x2apic hypervisor lahf_lm
bogomips	: 4789.99
clflush size	: 64
cache_alignment	: 128
address sizes	: 40 bits physical, 48 bits virtual
power management:
```

A new way to mess with the SGX secure enclave if you have OS access has been reported, and Intel has released microcode that fixes the issue by locking down CPU voltage adjustment.

https://threatpost.com/intel-cpus-plundervolt-attack/151006/
What about the **Jump Conditional Code (JCC) Erratum**?

Some pointers:

- Intel: [Mitigations for Jump Conditional Code Erratum](https://www.intel.com/content/dam/support/us/en/documents/processors/mitigations-jump-conditional-code-erratum.pdf) whitepaper (pdf)
- Red Hat: [Intel November 2019 Microcode Update ](https://access.redhat.com/solutions/2019-microcode-nov) - _"Under a corner case condition, such a sequence will incorrectly attempt to execute code that does not exist, leading to a range of errors from #UD (Undefined Instruction kernel panic) and spurious page faults (which may also panic the system). Red Hat product security has **not ruled out that privilege escalation is possible using this bug**."_
- Phoronix: [JCC article collection](https://www.phoronix.com/scan.php?page=search&q=JCC%20Erratum) - Great resource with lots of information and tests on the topic.

The **executive summary** is that the latest Intel CPU microcodes will fix this erratum at the cost of performance. Some of the performance loss can be mitigated by changing the code generator of LLVM and GCC and the assemblers. However, this comes with a cost for CPUs **not** affected by this erratum (e.g. AMD). See e.g. [this very interesting discussion of the LLVM developers](https://reviews.llvm.org/D70157#1747640).

What could `spectre-meltdown-checker` offer?

- Report the affected CPUs and the status of the (mitigated) microcode levels
- Show if the kernel was compiled with the conditional jump compiler mitigations to prevent performance loss

Please notice that e.g. the proposed LLVM fix is still in review and not released yet.
Hi, thanks for this awesome script!

I wanted to report that there appear to be false positives on AWS. I tried two different AMIs: Amazon Linux 2 AMI and Ubuntu Server 18.04 LTS. Both report a number of vulnerabilities (before and after upgrading packages):

- CVE-2018-3640
- CVE-2018-3639
- CVE-2018-12126
- CVE-2018-12130
- CVE-2018-12127
- CVE-2019-11091

AWS has released a few posts about the status:

- [Post](https://aws.amazon.com/security/security-bulletins/AWS-2018-015/) - CVE-2018-3640, CVE-2018-3639 (CVE-2018-3640 is not tagged in AWS post, but is mentioned in the Intel release it links to)
- [Post](https://aws.amazon.com/security/security-bulletins/AWS-2019-004/) - CVE-2018-12126, CVE-2018-12130, CVE-2018-12127, CVE-2019-11091 

I noticed some checks say "your CPU vendor reported your CPU model as not vulnerable", so it probably makes sense to do something similar for these. I think this would help reduce confusion for AWS users.
Component: spectre-meltdown-checker.noarch 0.42-2.fc31 @fedora

Enhancements request – While running tool's command on a new computer, some new observations came to mind.

Command executed to get the widest coverage of that powerful tool is `spectre-meltdown-checker -v --paranoid --explain`.

- Color codes' significances do rely on one's deduction alone as long as it is not documented in manual's pages.

- Due to the use of **same-named** color-coded status, such as `YES`, `NO`, for subjects of different nature, their significations have to rely then exclusively on use of oolor codes. Therefore red-, green-, yellow-colored status names may have opposite significations, such as _bad_ or _good_. Thus running that command without option `--no-color` is a requirement in order to get sense to the produced report. 

![spectre-meltdown-checker_v0 42_1](https://user-images.githubusercontent.com/26058215/67761034-29a9dd00-fa4b-11e9-8098-292d98e49ede.png)

- In red colored characters are certainly inconvenient to read, when they cannot be readable at all.

![spectre-meltdown-checker_v0 42_2](https://user-images.githubusercontent.com/26058215/67761705-85289a80-fa4c-11e9-8f0e-98727cfe0102.png)

Due to that fact, specifying  the use of option `--no-color` may be required to avoid being dealing with that specific case; though it makes at the same time all status significations to be lost. Therefore a signification sheme relying on a non-colored code is needed. As example, a `YES` whose signification is _good_ would be `YES+` while one whose signification is _bad_  would be `YES-`.

- Existence of option `--paranoid` is well appropriate. Its use may modify from green to red, characters that would not be if option would not be part of the command. Since there is a single redt color produced in report to cover targets resulting from use of that option or without it, the natures of those targets cannot be identified, as either related to that option or not.

![spectre-meltdown-checker_v0 42_3](https://user-images.githubusercontent.com/26058215/67763132-a939ab00-fa4f-11e9-9e93-337dae1294d5.png)

Addition of a dedicated color code regarding target covered by use of that option would solve that case.

- Such relevant sentence located at the end of the report produced, is at the best place to produce the desired effect.

![spectre-meltdown-checker_v0 42_4](https://user-images.githubusercontent.com/26058215/67762903-257fbe80-fa4f-11e9-95da-8db953e38956.png)

It would certainly deserve to be separated from the report by at least blank line, eventually better, a graphical bar and recognized explicitly as such by honouring grammatical conventions, in this context, ,a dot at the end of sentence.
Hello, 

First, thanks for the great script.
I run it on ARM64 device, and believe there are false positive in Variant 1 and 4 (it reports Vulnerable in Variant 1, 3a, and 4)

**1. Variant 1**
My system use kernel 4.19. But the script reports Vulnerable as below
```
CVE-2017-5753 aka 'Spectre Variant 1, bounds check bypass'
...
* Kernel has mask_nospec64 (arm64): NO
...
> STATUS: VULNERABLE (Kernel source needs to be patched to mitigate the vulnerability)

> How to fix: Your kernel is too old to have the mitigation for Variant 1 ...
```
For ARM64, [the code](https://github.com/speed47/spectre-meltdown-checker/blob/f5ec320fe52891384570bdc29bd0ed3ca5acec3d/spectre-meltdown-checker.sh#L2798-L2809) checks for `mask_nospec64` in arch/arm64/kernel/entry.S
However, from 4.19 these code lines are removed and replaced with `array_index_nospec` in arch/arm64/kernel/syscall.c (by commit https://github.com/torvalds/linux/commit/4141c85).
Thus the script always judges this as positive.

```diff
arch/arm64/kernel/entry.S 
- 	mask_nospec64 xscno, xsc_nr, x19	// enforce bounds for syscall number
...
arch/arm64/kernel/syscall.c 
+		syscall_fn = syscall_table[array_index_nospec(scno, sc_nr)];
```

**2. Variant 4**
For variant 4, my system already runs arm-trusted-firmware with [mitigation from ARM](https://git.trustedfirmware.org/TF-A/trusted-firmware-a.git/about/docs/security_advisories/security-advisory-tfv-7.rst).
But the script reports VULNERABLE as below. It believes my system do not have SSBD because currently [the code](https://github.com/speed47/spectre-meltdown-checker/blob/f5ec320fe52891384570bdc29bd0ed3ca5acec3d/spectre-meltdown-checker.sh#L2353-L2390) only set cpuid_ssbd for Intel, AMD, or Hygon. For ARM64, cpuid_ssbd is not set, and the script always judge as positive.
I believe SSBD for ARM64 was added with this patch set https://lkml.org/lkml/2018/5/22/582
```
CVE-2018-3639 aka 'Variant 4, speculative store bypass'
* Kernel supports disabling speculative store bypass (SSB): YES (found in /proc/self/status)
* SSB mitigation is enabled and active: NO (not vulnerable)
> STATUS: VULNERABLE (Your CPU doesn't support SSBD)
```