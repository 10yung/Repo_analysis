Close #409 
I have following structure:
```
data
├── section
│   └── file1.json
└── section_2
    └── file2.json
```

When I run
```
glob.sync('**', { ignore: ['!data/section/**'] }
```
I expect to get `[ 'data/section/file1.json' ]` but got an empty array.

In a real-world scenario (for similar files structure) I receive a set of project-root globs, but I need to get files from specific section only (without modifying globs). That's why I need for negative pattern in ignore
@isaacs , good day!

We would be very pleased about attention at #374 pull request.

Thanks!
This is a re-up of #385, which is approved, with the conflicts fixed. The original author seems to have lost interest.


> Node 6 and earlier are EOL, and the polyfill package has been deprecated and its repository archived.
> Reduce the dependency complexity for upstream projects like rimraf and puppeteer, by removing this dependency.

Fixes https://github.com/isaacs/node-glob/issues/376.
Fixes https://github.com/isaacs/node-glob/issues/380.
Fixes https://github.com/isaacs/node-glob/pull/385
JavaScript has come a long way since I wrote this, and while it's used by a lot of people, it has some definite shortcomings that make it hard to improve and modify.

- Rather than the "pile of functions" approach, with everything re-implemented for sync globbing, this should use a class-based approach, where all fs ops are abstracted into methods that can be overridden in a sync child class, like how the internals of node-tar or npm-packlist work.
- Consider not relying on regular expressions or minimatch.  Ie, write a parser that can take a glob pattern (after splitting up the `{,}` sections) and a path, and return the following possible states:
    - NO: definitely not a match, and cannot match children, stop
    - NO, BUT: not a match, but child entries may be a match. Return the portions of the pattern that may match child entries.  Eg `a/**/x/y` against `a/x` would return `**/x/y` and `y` as patterns that could match against child entries.  If the entry is not a dir, this is a NO response.
    - YES AND: a match, and may match child entries (eg `**/x` would match both `a/x` and `a/x/x`, so comparing it to the `a/x` path should say "yes, and").  Return value should include the bits that can match child entries.  So, `a/**/x/**` against `a/x` would return a "yes and" response with `**/x/**` and `x/**` as remaining patterns.  If the entry is not a dir, this is a YES BUT response.
    - YES BUT: a match, but cannot match child entries
    - YES IF: a match, but only if it's a dir (eg `a/*/` matches the dir `a/x/`, but not the file `a/x`)

    For all of these, walk the string and compare with a finite state machine rather than converting to a regexp.
- Fix all the windows stuff.  Not sure what to use as a reference implementation here.  Mingw bash? LSW?
- Consider using a WASM'ed implementation of glob written in rust?  Especially if we're not reliant on JS regexps, this makes a lot of sense.
- Create a custom error type

I will set aside some vacation time to do this if a handful of people decide to [fund this library](https://github.com/sponsors/isaacs).

I found some unused variables and removed them.
I guess `node benchclean.js` can be used for the `profclean` script: https://github.com/isaacs/node-glob/blob/master/package.json

I have my Sass files organized in a set of subdirectories: `dir1/dir2/dir3/dir4/dir5 ` 
And I set up the following rule to watch the changes in there: `src('**/*.scss', { cwd: './dir1' })`

Changes on `dir1/dir2/dir3/dir4/_somefile.scss` are picked correctly, however changes on `dir1/dir2/dir3/dir4/dir5/_someotherfile.scss` are ignored for some reason. Is there a max limit for nesting that I'm not aware of?

Because the user cannot merely remove the callback function for the blog to be done synchronously. What *actually* makes it run synchronously is setting `sync: true` in `options`.
Hello Isaac, thank you for a fantastic library, I'm planning to use it with [Blot](https://blot.im/) to look up files in a case-insensitive manner. I encountered unexpected behaviour when I set the ```nocase``` flag to ```true``` and searched for files containing accents. Here's a minimal example which demonstrates the issue:

```javascript
var fileNameWithAccent = "å";

fs.writeFileSync(fileNameWithAccent, "");

glob.sync(fileNameWithAccent);
// returns [ 'å' ] as expected

glob.sync(fileNameWithAccent, { nocase: true });
// returns []
```

| | | 
|-|-|
| glob | 7.1.3| 
| OS            | macOS 10.12.6   | 
| node            | v8.12.0    | 
| npm            | 6.4.1   | 