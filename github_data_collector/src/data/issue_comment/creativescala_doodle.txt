Create a stable Java2D specific method to convert a `Picture` to a `BufferedImage`. This will allow fun pixel art in conjunction with #85. This should be a new kind of effect type class, I think.
The `Bitmap` algebra provides some basic support for loading bitmaps. I think it would be better to have support for working with `BufferedImage`:

* utility methods to load `BufferedImage` from disk, with various forms of error handling (e.g. don't care, return `Either`, etc.)
* algebra to insert a `BufferedImage` into a `Picture`
Filling with gradients is supported by both SVG and Java2D (I think). It would be useful to expose this functionality within Doodle as it opens up more creative possibilities.

- [ ] See what SVG and Java2D support
- [ ] Model as an algebraic data type (probably gradient = linear | radial)
- [ ] Extend `DrawingContext` to allow gradient fills
- [ ] Implement in backends
Basic support for charts exists on `feature/plotting`. This currently supports only scatter plots, and 2D numeric data. I'd like to implement bar charts as the next chart type. This requires supporting categorical data.

Longer term we'll need more complex data types. Part of the work here is exploring different representations. A non-goal, at this point, is to support multiple plots / series per chart.

Here are some of the tasks: 

- [ ]  Extend `Series` to support categorical data
- [ ]  Factor chart interpreter into reusable components
- [ ]  Implement bar charts
Text layout on both Java2D and SVG seems wrong (see, e.g. `BoxesAndArrows.flatMap.draw`). Investigate this and resolve if possible.

Text in SVG supports separate stroke and fill. They way we currently draw text on Java2D uses the stroke color as the fill. We can get more control over text rendering using the `TextLayout` API, and in particular either the `draw` or `getOuline` methods on `TextLayout`.
