Currently, function execution seems to block the UI, would it be possible to modify function bindings to have their own goroutine like Lorca? 

Or is it possible using channels? I tried to modify the basic example for non-blocking function execution using channels, but wasn't able to do so.
Currently, Linux users that want to load shared objects from a non system path must use `LD_LIBRARY_PATH` which is not ideal if the application is being run on a system that doesn't have the environment variable set ahead of time.

This can be resolved by using `-rpath -Wl,\$ORIGIN` in `LDFLAGS` however, further consideration needs to be taken to decide if this should be added in the `go build` command similar to how we handle [windows console hiding](https://github.com/ImVexed/muon#q-how-do-i-get-rid-of-the-console-window-on-windows) or if it should be included in the `c-for-go` generated bindings.
Currently, Ultralight libraries are versioned inside of [`ultralight/libs`](https://github.com/ImVexed/muon/tree/master/ultralight/libs) and are used to resolve symbols during the linking phase ([ex](https://github.com/ImVexed/muon/blob/master/ultralight/ultralight.go#L10))

This is less than ideal since the folder is ~100MB to download with most of that data likely being inapplicable to the users OS.

I think a path forward would be to explore solutions other projects employ to version binary dependencies while not storing them in git, as well as discriminating based on the operating system to only download relevant dependencies (caveat being `GOOS` changing).
Running the example on Mac using the 1.1 Ultralight pre-release seems to fail with:

```
2019-10-08 11:46:40.523 cra-go[11569:2169766] Failed to create pipeline state, error Error
Domain=CompilerError Code=1 "Function fragmentShader is using language version 2.1 which is
incompatible with this OS." UserInfo={NSLocalizedDescription=Function fragmentShader is using
language version 2.1 which is incompatible with this OS.}
```
[Currently](https://github.com/ImVexed/muon/blob/master/muon_test.go) our testing is non-exhaustive and cannot be run consecutively due to Ultralight raising exceptions if we try to open two windows in the same process, even after closing all handles to the previous window.

While the window issue might be upstream, other work can be done to test more of the codebase.
In many places throughout the code we have to type cast to and from cgo types. 

Currently ([ex](https://github.com/ImVexed/muon/blob/master/muon.go#L278).), we're not handling errors during those conversions and will likely lead to panics during edge cases. 
As the title implies I'd like to remove all `panic`'s in favor of proper error handling wherever possible.