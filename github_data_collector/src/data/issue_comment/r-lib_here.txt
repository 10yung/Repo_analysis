I am bit puzzled about the way here() breaks the workflow.
When I use several R scripts from different projects in one Session (e.g. RStudio) and I switch between them it seems not to be possible to reset the location of here(). I would have to close the session and start a new one. This is obviously corrupting the workflow since in e.g. RStudio you might have objects in the environment that you have calculated for a long time, saving takes time and additional effort, etc.

If there is no way to do switch the location of here in one session, I would like to request this feature.
Otherwise, the here package is completely useless for my purposes.
This should allow the user to interactively switch a session between projects without having to setwd() and restarting. All it does:
1. Checks the path is legitimate
2. Moves to directory if path is a file
3. Changes the work directory
4. Uses the same code from `.onLoad()` to set `here`
`here()` keeps consecutive separators, and it allows mixing slashes and backslashes. It would be nice to  be able to specify an option "standardize" or likewise, to get a clean path with no duplicate separators and only forward slashes (or only the operator system's "prefered" separator).
I would expect the output of `here::here(NA)` to be `NA`, or maybe the same as `here::here()`, but not a path ending with the characters "NA"..
I have been trying to use here() within a project where I am importing data from an online Research database. 

I have then attempt to use here() within the saveRDS() function e.g.

`saveRDS(mydfname, file= here("02_data", "mydfname.rda"))`

This would ensure I have a local copy of the data for if I need to work on the project but I am offline. 

When I execute the code my data import runs as expected, but the saveRDS function returns the following error

`Error in here("02_data", "mydfname.rda") : 
  unused arguments ("02_data", "mydfname.rda")`

I have searched the issues listed here and online but have not found any other reports of this issue. 

My work around is that I am having to input the file directory in full for saveRDS() but here is working for file calls using readRDS() and source()

I may be missing something simple so excuse my ignorance if that is the case.

Currently, if you create a file path to a directory using `here()`, then it will be expanded to an absolute path. If you try to use `here()` again with that directory and a file name, then the absolute reference gets repeated. 

```
# define a directory using here() and a file within that directory
my_dir <- here::here("data", "iris")
my_file <- "iris.csv"

# doesn't work
read_csv(here::here(my_dir, my_file))
> Error: '/Users/name//Users/name/data/iris/iris.csv' does not exist.

# works
read_csv(file.path(my_dir, my_file))
```

I am requesting a feature or better documentation if this feature already exists to be able to append to an absolute path created by `here()`. I understand if this is out of scope because `file.path()` can already do this functionality, but it seems reasonable that the **here** package could have something like "append to path" functionality like this: 

```
my_dir <- here::here("data", "iris")
my_file <- "iris.csv"
read_csv(here::here(my_dir, my_file, append = TRUE))
```
I started using `here::here` to make files more robust. If there are multiple nested functions using `here::here` I have to know whether my path is already an absolute path, moreover if I use `here::here` inside a function the user must not supply absolute paths. My workaround is having 
``` r
if (startsWith(path, '/')) {path} else {here::here(path)}
```

 but I wonder if this could be part of the {here} package itself.

(here is hard to reprex, but this issue is not related to that, if you apply here to a valid absolute path you will end up with a non existent path)

``` r
here::here("/Users")
#> [1] "/private/var/folders/rw/ky5hq6q95kd66vw7mpbsnx5w0000gp/T/RtmpfIF2tO//Users"
```

Created on 2019-04-15 by the [reprex package](http://reprex.tidyverse.org) (v0.2.0).
<details><summary>Session info</summary>

``` r
devtools::session_info()
#> ─ Session info ──────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.5.0 (2018-04-23)
#>  os       macOS Sierra 10.12.6        
#>  system   x86_64, darwin15.6.0        
#>  ui       X11                         
#>  language (EN)                        
#>  collate  en_US.UTF-8                 
#>  ctype    en_US.UTF-8                 
#>  tz       Europe/Budapest             
#>  date     2019-04-15                  
#> 
#> ─ Packages ──────────────────────────────────────────────────────────────
#>  package     * version date       lib source                     
#>  assertthat    0.2.0   2017-04-11 [1] CRAN (R 3.5.0)             
#>  backports     1.1.3   2018-12-14 [1] CRAN (R 3.5.0)             
#>  callr         3.1.1   2018-12-21 [1] CRAN (R 3.5.0)             
#>  cli           1.0.1   2018-09-25 [1] CRAN (R 3.5.0)             
#>  crayon        1.3.4   2017-09-16 [1] CRAN (R 3.5.0)             
#>  desc          1.2.0   2018-05-01 [1] CRAN (R 3.5.0)             
#>  devtools      2.0.1   2018-10-26 [1] CRAN (R 3.5.0)             
#>  digest        0.6.18  2018-10-10 [1] CRAN (R 3.5.0)             
#>  evaluate      0.13    2019-02-12 [1] CRAN (R 3.5.2)             
#>  fs            1.2.6   2018-08-23 [1] CRAN (R 3.5.0)             
#>  glue          1.3.0   2018-07-17 [1] CRAN (R 3.5.0)             
#>  here          0.1-11  2019-04-15 [1] Github (r-lib/here@d22ff63)
#>  highr         0.7     2018-06-09 [1] CRAN (R 3.5.0)             
#>  htmltools     0.3.6   2017-04-28 [1] CRAN (R 3.5.0)             
#>  knitr         1.21    2018-12-10 [1] CRAN (R 3.5.0)             
#>  magrittr      1.5     2014-11-22 [1] CRAN (R 3.5.0)             
#>  memoise       1.1.0   2017-04-21 [1] CRAN (R 3.5.0)             
#>  pkgbuild      1.0.2   2018-10-16 [1] CRAN (R 3.5.0)             
#>  pkgload       1.0.2   2018-10-29 [1] CRAN (R 3.5.0)             
#>  prettyunits   1.0.2   2015-07-13 [1] CRAN (R 3.5.0)             
#>  processx      3.2.1   2018-12-05 [1] CRAN (R 3.5.0)             
#>  ps            1.3.0   2018-12-21 [1] CRAN (R 3.5.0)             
#>  R6            2.4.0   2019-02-14 [1] CRAN (R 3.5.2)             
#>  Rcpp          1.0.1   2019-03-17 [1] CRAN (R 3.5.2)             
#>  remotes       2.0.2   2018-10-30 [1] CRAN (R 3.5.0)             
#>  rlang         0.3.1   2019-01-08 [1] CRAN (R 3.5.2)             
#>  rmarkdown     1.11    2018-12-08 [1] CRAN (R 3.5.0)             
#>  rprojroot     1.3-2   2018-01-03 [1] CRAN (R 3.5.0)             
#>  sessioninfo   1.1.1   2018-11-05 [1] CRAN (R 3.5.0)             
#>  stringi       1.3.1   2019-02-13 [1] CRAN (R 3.5.2)             
#>  stringr       1.4.0   2019-02-10 [1] CRAN (R 3.5.0)             
#>  testthat      2.0.1   2018-10-13 [1] CRAN (R 3.5.0)             
#>  usethis       1.4.0   2018-08-14 [1] CRAN (R 3.5.0)             
#>  withr         2.1.2   2018-03-15 [1] CRAN (R 3.5.0)             
#>  xfun          0.5     2019-02-20 [1] CRAN (R 3.5.2)             
#>  yaml          2.2.0   2018-07-25 [1] CRAN (R 3.5.0)             
#> 
#> [1] /Library/Frameworks/R.framework/Versions/3.5/Resources/library
```

</details>
Thanks a ton for the package. I love it and am following in Jenny's path in advocating its use instead of `setwd()`.

My issue is closely related to jennybc/here_here#3 and #24.

Problem:

You need to create a `.here` file in a directory because it isn't big nor important enough to justify doing version control on it. But that directory is nested in another one which has a `.something` file that `here` will use to set the "project" root. Now, using `set_here()` will create the `.here` file just fine, but `here` has already been set and there is no way to update it unless restarting the R process (which creates a very awkward workflow and impairs automation).

As mentioned in other issues re-running `library(here)` (which wouldn't be a great solution anyway) has no effect. And I even tried running `here::set_here()` *before* running `library(here)`, but that does not work either. Reloading R is the only solution.

Suggestion:

`set_here()` does what it should and work great when `here` hasn't been set on a wrong target (due to something higher in the path than the intended project root), but fails when a wrong target was found. Having a function that would automatically run while using `set_here()` to reset here to the location of the `.here` file that has just been created would be more robust and cover situations such as the one I am describing.
It would be interesting to consider an `assert_here()` function.

Inspired by this [Twitter conversation](
https://twitter.com/emilelatour/status/1033019785087315968) with Emile Latour (@emilelatour).

Problem: *you* use Projects and the here package and life is awesome. But your *collaborator* still clicks on an Rmd in the Finder and it just opens in RStudio, in whatever Project (or non-Project) they happen to have open. Now all the path-building code doesn't work as planned when they run chunks interactively (knitting the whole document still works fine for them).

If you want to make a `.R` or `.Rmd` file more resilient to this and you feel like the Project's name is pretty stable, you could put `here::assert_here("PROJECT_NAME")` at the top as a way of raising an alarm when the workflow violates expectations.

`assert_here()` would be something like `assertthat::assert_that(identical(basename(here::here()), “PROJECT_NAME”))`.
* Just realised we have the tidytemplate applied to rprojroot and here packages, which are, in fact, r-lib packages! 😳