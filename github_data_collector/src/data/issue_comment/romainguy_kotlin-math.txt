Consider renaming PI to FPI since clients often want to do `import kotlin.math.*`, which defines PI as a double.
First of all, thank you for making this library open-source, it helps me a great amount writing some 2d-math related works. I think this library is a great source, but my implementation will differ in a couple aspects.

This is more like something I would like to get feedback on rather than having implemented in this library. I am interested in your opinions if the differences below would actually make sense.

### Immutability and mutability

The Kotlin library shows a great example how immutability and mutability can be separated to different classes, thus reducing the possible errors. The classes I think should be implemented in the `List<T>` - `MutableList<T>` pattern. 

```Kotlin
sealed class Float2
// Create the MFloat2 type instead every time.
// They are the same.
private constructor(
    open val x: Float,
    open val y: Float
) {

...

   // Functions always create a new object
   fun normalized(): MFloat2 {
        val l = 1.0f / this.length()
        return MFloat2(this.x * l, this.y * l)
    }

}

class MFloat2(
    override var x: Float,
    override var y: Float
) : Float2(x, y) {

...
    /** Set operators, etc */

   // Functions can mutate in place
   inline fun normalize(): Unit {
        val l = 1.0f / this.length()
        x *= l
        y *= l
    }

```

### Kotlin standards

As a sidenote, I think that the function below is confusing:

```Kotlin
   package com.curiouscreature.kotlin.math

   ...

   operator fun inc(): Float2 {
        x += 1.0f
        y += 1.0f
        return this
    }

```

From [kotlinlang](https://kotlinlang.org/docs/reference/operator-overloading.html#increments-and-decrements):

> The inc() and dec() functions must return a value, which will be assigned to the variable on which the ++ or -- operation was used. They shouldn't mutate the object on which the inc or dec was invoked.

I don't understand the intention behind the current version of kotlin-math. In other functions (div / times ...) a new object is created (even distance calculates by creating a new object) so why not returning a new object here too?

### Less object allocation

I am writing my classes to be used on Android, maybe even doing a couple calculations for each frame, so I assume the object allocations should be kept at a minimum.

I noticed that the `transpose` is recalculated each time for the matrix if it is used inside a multiplication.

```Kotlin
    /**    Mat2 class */

   operator fun times(v: Float2): Float2 {
        val t = transpose(this)
        return Float2(dot(t.x, v), dot(t.y, v))
    }
```

This actually makes sense, because the class itself is mutable. A different approach would be to have a `Mat2` class which is immutable and have an `MMat2` class that is mutable. The `transpose` would be cached and invalidated when the data changes. A possible approach would look like this:

```Kotlin

sealed class Mat2 private constructor(
    protected val _x: MFloat2,
    protected val _y: MFloat2
) {

    inline val x: Float2
        get() = _x

    inline val y: Float2
        get() = _y

    protected val invalidatorObserver = InvlazyObservable()

    val transpose by invLazy(invalidatorObserver) { transpose(this) }

    ...

}

class MMat2(
    x: MFloat2,
    y: MFloat2
) : Mat2(x, y) {

    private fun contentChanged() {
        invalidatorObserver.invalidate()
    }

    operator fun set(column: Int, v: Float2) = when (column) {
        0 -> _x.set(v)
        1 -> _y.set(v)
        else -> throw IllegalArgumentException("column must be in 0..1")
    }.also { contentChanged() }

    ...

}

```

It could be further improved to change the data in-place, instead of creating a new transpose matrix, but the code written above might already be some improvement over the current solution in terms of performance.

--------------------------

TLDR:
IMHO allocating new objects is bad - based on my experience - and there could be a solution that offers usage with low-memory footprint and more efficient calculation.

Thanks for reading and any feedback is appreciated.
Vectors could be implemented as views over float arrays. This would allow the client to control the allocations. This would be the closest thing to a linear allocator.

