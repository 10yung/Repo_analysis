**Problem:**
`com.codahale.metrics.httpclient.HttpClientMetricNameStrategies` should also provide `PATH_AND_METHOD` because most of the time we are interested only in path information.

Currently, to get path metrics we use `QUERYLESS_URL_AND_METHOD`. This is not a good practice because endpoints change frequently. Suppose if we have dashboards, alerting system or other dependents in place, we need to change all of them with new metric names each time endpoint changes, it will be really painful.

**Solution**
we need something like this
```
public static final HttpClientMetricNameStrategy PATH_AND_METHOD =
            (name, request) -> {
                final URIBuilder url = new URIBuilder(requestURI(request));
                return name(HttpClient.class,
                        name,
                        url.getPath(),
                        methodNameString(request));
            };
```
Bumps [junit](https://github.com/junit-team/junit4) from 4.12 to 4.13.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/junit-team/junit4/releases">junit's releases</a>.</em></p>
<blockquote>
<h2>JUnit 4.13</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit/blob/master/doc/ReleaseNotes4.13.md">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 2</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit4/wiki/4.13-Release-Notes">release notes</a> for details.</p>
<h2>JUnit 4.13 RC 1</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit4/wiki/4.13-Release-Notes">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 3</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit4/wiki/4.13-Release-Notes">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 2</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit4/wiki/4.13-Release-Notes">release notes</a> for details.</p>
<h2>JUnit 4.13 Beta 1</h2>
<p>Please refer to the <a href="https://github.com/junit-team/junit4/wiki/4.13-Release-Notes">release notes</a> for details.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/junit-team/junit4/commit/038f7518fc1018b26df608e3e5dce6db4611be29"><code>038f751</code></a> [maven-release-plugin] prepare release r4.13</li>
<li><a href="https://github.com/junit-team/junit4/commit/8fd0197cd3710786212a5bba1545bc9513fe74cc"><code>8fd0197</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href="https://github.com/junit-team/junit4/commit/c0bdd7d4312862dbc6e1a8430cf75024a18158c9"><code>c0bdd7d</code></a> [maven-release-plugin] prepare release r4.13-rc-2</li>
<li><a href="https://github.com/junit-team/junit4/commit/ea2e22933c76f6fb64b802e3645306d4d2414406"><code>ea2e229</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li><a href="https://github.com/junit-team/junit4/commit/0a5a2f81563bbc61ca55301f104aa3a90c9d09cd"><code>0a5a2f8</code></a> [maven-release-plugin] prepare release r4.13-rc-2</li>
<li><a href="https://github.com/junit-team/junit4/commit/b51fa17fc6a750a17436f9f38c139a7b5228171f"><code>b51fa17</code></a> Ensure classes annotated with <a href="https://github.com/OrderWith">@OrderWith</a> do not have <a href="https://github.com/FixMethodOrder">@FixMethodOrder</a>.</li>
<li><a href="https://github.com/junit-team/junit4/commit/7c2f12c92bd5c66f4cac65dfdf86863c665a13ec"><code>7c2f12c</code></a> Never reorder classes annotated with <a href="https://github.com/FixMethodOrder">@FixMethodOrder</a></li>
<li><a href="https://github.com/junit-team/junit4/commit/6c5de817e7e0afdd4d09354693535520712595fc"><code>6c5de81</code></a> Remove reference to obsolete mailing list</li>
<li><a href="https://github.com/junit-team/junit4/commit/6c7cb4b23659ce877ceef230aeef73404485220f"><code>6c7cb4b</code></a> Delete outdated docs</li>
<li><a href="https://github.com/junit-team/junit4/commit/fc3938ac16947d6e62b844b92dfae103fffb9ce9"><code>fc3938a</code></a> [maven-release-plugin] prepare for next development iteration</li>
<li>Additional commits viewable in <a href="https://github.com/junit-team/junit4/compare/r4.12...r4.13">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13)](https://dependabot.com/compatibility-score.html?dependency-name=junit:junit&package-manager=maven&previous-version=4.12&new-version=4.13)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Currently interface Reservoir has a method: 
`void update(long value)`
migrating to `double value` would extend the use `Reservoir` for stats purposes with real numbers, with no significative loss.

### Problem Statement

The current implementation of `ScheduledReporter` relies on a `ScheduledExecutorService` scheduled at fixed rate:
```
this.scheduledFuture = executor.scheduleAtFixedRate(runnable, initialDelay, period, unit);
```

Every `period`, a thread will report, except when one of the Gauge implementations (`getValue()`) is slower than that `period` (for example, network latency). In that case, threads will start to accumulate. When the latency is resolved, there will be a spike of report requests.

### Reproducible Scenario
To reproduce, have:
- a gauge that sleeps 10 seconds the first three times, then 0 the upcoming times before returning a value
- a ScheduledReporter with a delay of 5 seconds that prints all gauges.

You will get reports at 0, 10, 20, 30, 30, 30, 30, 35, and 40.

### Possible solution

I suggest to replace `executor.scheduleAtFixedRate` with `executor.scheduleWithFixedDelay`, so that the next call to `report` is separated by `period` with respect to the previous call, instead of having an absolute `period`.


We got `NoClassDefFoundError` on loading `com/sun/management/UnixOperatingSystemMXBean`  when accessing `FileDescriptorRatioGauge` on OpenJDK8 OpenJ9 build, suspected
https://github.com/dropwizard/metrics/blob/9438c91679eba570e3a7fa1aa43a82801af7a33f/metrics-jvm/src/main/java/com/codahale/metrics/jvm/FileDescriptorRatioGauge.java#L33
using Sun/Oracle internal class which should only works on Oracle/ HotSpot JDK. Suggest to check class accessibility before type casting.

Stacktrace:
```
java.lang.NoClassDefFoundError: com/sun/management/UnixOperatingSystemMXBean
	at com.codahale.metrics.jvm.FileDescriptorRatioGauge.getRatio(FileDescriptorRatioGauge.java:33)
	at com.codahale.metrics.RatioGauge.getValue(RatioGauge.java:64)
	at com.codahale.metrics.RatioGauge.getValue(RatioGauge.java:11)
	at com.codahale.metrics.json.MetricsModule$GaugeSerializer.serialize(MetricsModule.java:42)
	at com.codahale.metrics.json.MetricsModule$GaugeSerializer.serialize(MetricsModule.java:26)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serializeFields(MapSerializer.java:722)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:643)
	at com.fasterxml.jackson.databind.ser.std.MapSerializer.serialize(MapSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper.writeValue(ObjectMapper.java:2795)
	at com.fasterxml.jackson.core.base.GeneratorBase.writeObject(GeneratorBase.java:388)
	at com.fasterxml.jackson.core.JsonGenerator.writeObjectField(JsonGenerator.java:1769)
	at com.codahale.metrics.json.MetricsModule$MetricRegistrySerializer.serialize(MetricsModule.java:210)
	at com.codahale.metrics.json.MetricsModule$MetricRegistrySerializer.serialize(MetricsModule.java:193)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectWriter$Prefetch.serialize(ObjectWriter.java:1433)
	at com.fasterxml.jackson.databind.ObjectWriter._configAndWriteValue(ObjectWriter.java:1135)
	at com.fasterxml.jackson.databind.ObjectWriter.writeValue(ObjectWriter.java:960)
	at com.codahale.metrics.servlets.MetricsServlet.doGet(MetricsServlet.java:179)
        ...
```
During a heap dump analysis for a long running process, I noticed the `com.codahale.metrics.WeightedSnapshot$WeightedSample` class being in the top 10 of my histogram for number of items (currently 1,959,523). A heap analysis tool determined that 1,943,542 of these instances are garbage. While this doesn't take up a large amount of memory, it appears that they aren't getting gc'd. 

 I am wondering under what circumstances might this occur and if upgrading from our current use of 3.2.2 would help this issue at all?
There is a warning here:
https://metrics.dropwizard.io/4.1.0/manual/core.html#man-core-reporters-jmx
that says 

> We don’t recommend that you try to gather metrics from your production environment. JMX’s RPC API is fragile and bonkers. For development purposes and browsing, though, it can be very useful.

Is this implying the JmxReporter isn't ready for production use, or it's the opinion of the metrics team that JMX itself or metrics in general shouldn't be used in production?
Add unit tests for InstrumentedExecutorService.invokeAll() methods
I am getting this exception write failed .I am checking for isConnected()  before and then doing send and flush 

> java.net.SocketException: Connection timed out (Write failed)
> 	at java.net.SocketOutputStream.socketWrite0(Native Method)
> 	at java.net.SocketOutputStream.socketWrite(SocketOutputStream.java:111)
> 	at java.net.SocketOutputStream.write(SocketOutputStream.java:155)
> 	at sun.nio.cs.StreamEncoder.writeBytes(StreamEncoder.java:221)
> 	at sun.nio.cs.StreamEncoder.implFlushBuffer(StreamEncoder.java:291)
> 	at sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:295)
> 	at sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:141)
> 	at java.io.OutputStreamWriter.flush(OutputStreamWriter.java:229)
> 	at java.io.BufferedWriter.flush(BufferedWriter.java:254)
> 	at com.codahale.metrics.graphite.Graphite.flush(Graphite.java:161)
> 	at com.walmart.rum.pools.GraphiteConnection.flush(GraphiteConnection.scala:94)



Adding a new function removeAll inverse to registerAll to remove all the metrics in the metrics set.