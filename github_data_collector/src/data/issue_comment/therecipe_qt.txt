During the execution of the program there are no errors but the inscription why the console says "no code space found" constantly appears. What does it mean?
|ubuntu| 19.10|
|:---|:---|
|Go| 1.13.5
|Qt|  5.13.0|

```
ERRO[0015] failed to run command  _func=RunCmd cmd="bash -c /opt/go/bin/go build -p 4 -v -trimpath -o xxx -tags=minimal -ldflags=all=\"-s\" \"-w\"" 
....
flag provided but not defined: -w
```

`-w` flag is lonely

https://github.com/therecipe/qt/blob/2b818d970888dab6bbf6aa2702bc28c1e6fbdb83/internal/cmd/deploy/build.go#L70
https://github.com/therecipe/qt/blob/2b818d970888dab6bbf6aa2702bc28c1e6fbdb83/internal/cmd/deploy/build.go#L116

`escapedFlags` might need `''` like this:
```
cmd.Args = append(cmd.Args, fmt.Sprintf("-ldflags=%v'%v'", pattern, escapeFlags(ldFlags, ldFlagsCustom)))
```

@therecipe 
Looking at the Qt Documentation there should be a function `QPlainTextEdit::setExtraSelections` and further the type `QTextEdit::ExtraSelection` (https://doc.qt.io/qt-5/qplaintextedit.html#setExtraSelections) but I can't find those in the Go packages?
This should fix some instances of error warning that `__ANDROID_API__` macro is redefinied when system `$ANDROID_NDK_PLATFORM` was different than default value (android-21)
Hello,

I am working on an application that uses OpenCV to grab frames from a Raspberry Pi camera, and I would like to display those frames in a QT window.
If I understand things correctly I should be using an Image to display those frames?

I am using QML to define the UI for my application, but I am a little confused on how to interact with the QML elements, specifically how I could overwrite the image data of an Image element.

I am using the Gallery example from the QML folder as a jumping off point, and I am just looking now to overwrite the Image (logo) in that example with my video frames.
Any pointers?
When I ran the qt example, I encountered `vendor/github.com/therecipe/qt/core/core.go: 15: 42: undefined: NewQByteArrayFromPointer`.

The relevant environment configuration is as follows:

```
INFO[0000] GOOS:                        'darwin'        
INFO[0000] GOARCH:                      'amd64'         
INFO[0000] GOVERSION:                   'go1.13.1'      
INFO[0000] GOROOT:                   *  '/usr/local/Cellar/go/1.13.1/libexec' 
INFO[0000] GOPATH:                   *  '/Users/barry/gopath' 
INFO[0000] GOBIN:                       '/Users/barry/gopath/bin' 
INFO[0000] GOMOD:                       '/Users/barry/gopath/src/github.com/pubgo/examples/go.mod' 
INFO[0000] QT_HASH:                     'v0.0.0-20200103041036-2b818d970888' 
INFO[0000] QT_API:                      ''              
INFO[0000] QT_VERSION:                  '5.13.0'        
INFO[0000] QT_DIR:                   *  '/Users/barry/gopath/src/github.com/pubgo/examples/vendor/github.com/therecipe/env_darwin_amd64_513' 
INFO[0000] QT_STUB:                     'false'         
INFO[0000] QT_DEBUG:                    'false'         
INFO[0000] QT_QMAKE_DIR:                ''              
INFO[0000] QT_WEBKIT:                   'false'         
INFO[0000] QT_STATIC:                   'false'         
INFO[0000] QT_GEN_TSD:                  'false'         
INFO[0000] QT_GEN_OPENGL:               'false'         
INFO[0000] QT_GEN_QUICK_EXTRAS:         'false'         
INFO[0000] QT_RESOURCES_BIG:            'false'         
INFO[0000] QT_NOT_CACHED:               'false'         
INFO[0000] QT_HOMEBREW:                 'false'         
INFO[0000] QT_MACPORTS:                 'false'         
INFO[0000] QT_NIX:                      'false'         
INFO[0000] QT_FELGO:                    'false'         
INFO[0000] XCODE_DIR:                   '/Applications/Xcode.app' 
INFO[0000] QT_PKG_CONFIG:               'false'    
```
and my `env_darwin_amd64_513` is also configured.

I found this problem when I ran qtsetup.

qtdeploy test desktop github.com/therecipe/examples/basic/widgets
the error following occured

core-minimal.cpp:10:3: error: ------------------------------------------------------------------
core-minimal.cpp:11:3: error: please run: '$(go env GOPATH)/bin/qtsetup'
core-minimal.cpp:12:3: error: more info here: https://github.com/therecipe/qt/wiki/Installation
core-minimal.cpp:13:3: error: ------------------------------------------------------------------
core-minimal.cpp:15:10: fatal error: 'QTextDocument' file not found
We have discussed graphs where the series are set in Go before, however it seemed like the approach was going to be quite complex. Qt offer this example which seems that the series are populated from C++. 
Any chance you or someone has ported this? I'm still interested in using the Graphing modules, but have continously had issues populating the series for a graph from the Go side. I was before attempting bar charts and pie charts, but this would be a good start!

https://doc.qt.io/qt-5/qtcharts-modeldata-example.html
Windows 10, Firefox 71. Pressing Alt + Shift + KEY (the standard way in Firefox) when in the text editor tab inserts a capital letter in the editor widget, basically ignoring the Alt key.

Expected result: Open the menu.

In Edge, access keys seem to work. I suspect - since Edge uses Alt + KEY - that this functionality was ported without considering different browser shortkeys.
Hard to describe title there...

If I have the slot

```
_ func(row int) `signal:"changeFile"`
```

Then when I want to wire that up to a function, I can do

```
c.ConnectChangeFile(c.changeFile)
...
...
func (c *Controller) changeFile(row int) {
...
}
```
and thats great. But strangely, when I do something like

```
_ func(index *core.QModelIndex) `signal:"patchDiff"`
```
Then I need to do 
```
a.ConnectPatchDiff(func(index *core.QModelIndex) {
	controller.Instance().PatchDiff(index)
})
```
to connect the Moc'd function to the function I want to call. The error is

> cannot use controller.Instance().PatchDiff (type func(core.QModelIndex_ITF)) as type func(*core.QModelIndex) in argument to a.ConnectPatchDiff

Is the reason anything to do with a QModelIndex not being a standard Go type or something?

It's more a general knowledge question, as the func approach works.


Second question :)

With regard to the calendar example we have [discussed here](https://github.com/amlwwalker/go-qml-calendar), I want to be able to get the index (and by index I mean the `*core.QModelIndex`) when an event is clicked in the left hand `eventsListView`. At the moment we are populating it with an array from the EventsForDate function, and when I look at other examples this is 'ok'. 

The reason I want to get the QModelIndex, that relates back to the database entry is;
I have two views for my database entries - 1. the calendar view so you can select by date and 2. A TableView where you can see all of them just in order. From both views I want to be able to delete/edit the events. From the TableView I can successfully get the QModelIndex and then in Go, 'extract' the database ID and act accordingly. I want to have the events for a calendar date, appear on the left (we already have this working) and then be able to click on one and get the same QModelIndex so that I can use the same functions in Go to delete the event there.

I think the confusion I have is because the events come from the calendar and then populate the ListView, the QModelIndex is changing from the underlying model. In any event, I have tried variations of "stuff" to get the QModelIndex:

```
console.log("row ", detailEventModel.currentRow)
console.log("patch: ", detailEventModel.data(detailEventModel.index(detailEventModel.currentRow, 0), Qt.UserRole + 1), detailEventModel.index(detailEventModel.currentRow, 0), Qt.UserRole + 1)
// detailEventModel.model.index(tableView.currentRow, 0)
patchFileShowRequest(detailEventModel.index(detailEventModel.currentRow, 0))
```
, but when I try to convert it to the underlying ID with something such as 

```
if patchID := index.Data(int(core.Qt__UserRole) + 1).ToInt(&ok); !ok {
```
I get `ok == false`.

I *think* the `func (e *eventModel) data(index *core.QModelIndex, role int) *core.QVariant {` is where this conversion between QModelIndex and Go data type is defined, however we don't particularly have a data() function defined that well so I am not sure whether `index.Data(int(core.Qt__UserRole) + 1)` can be currently converted to the ID.

Note using the above approaches to retrieve the QModelIndex in QML, I receive console logs a bit like `QModelIndex(0,0,0x0,eventModelb56ca1(0x65283c0))` - however when the QModelIndex is correct, (ie from my TableView) I get indexes looking more like: `QModelIndex(0,0,0x36259e2,eventModelb56ca1(0x2936c1))` - i.e the third entry is not `0x0` which is currently the clue that I'm doing something wrong....

EDIT:
Perhaps to make it clearer... 
My plan is that the left list view gives more details about the underlying event than the calendar can display. When a user clicks one, I want to be able to edit/delete it from the database. To do so, I believe that I should be getting the QModelIndex from qml when its clicked, and sending that to Go to then 'act on'. The issue is getting the QModelIndex is not as trivial as I expected. I have hacked around by passing the database index to the calendar, and that populating the listview from QML, but that really is a hack. What I want to do is connect the listview to the same model as the calendar. This works. I still however am struggling to get the correct index.
Where it gets more complicated is as its a 'detail' view of events, and I have multiple ways to view events (one is on a calendar, another is just as a list in a tableView).
When an event is clicked in the tableView (which is a view/sort model) I also want that to display it in the listview on the left. This means that the listview can be populated from two different models.
I guess the way is to create a specific model for this listView that somehow can items can be added to from either the calendar event model or the treeViewmodel?? 
In whatever case, i somehow need the QModelIndex from the listview so that I can access the entry in the database

EDIT 2:
After further work, I have some more specific examples of the model I am trying to put together.


This is the model that I am putting together that will populate the listView, once a calendar date is selected:

```
var DetailModel *detailModel

type DiffDetail struct {
	core.QObject

	_ int             `property:"id"`
	_ string          `property:"name"`
	_ string          `property:"description"`
	_ string          `property:"startTime"`
	_ string          `property:"screenshot"`
	_ *core.QDateTime `property:"startDate"`
	_ *core.QDateTime `property:"endDate"`
}

type detailModel struct {
	core.QAbstractListModel
	manager *logic.Manager
	details []*DiffDetail
	_       func(diffs []*DiffDetail, reset bool) `signal:"update"`
}

func (m *detailModel) InitWith(manager *logic.Manager) {
	DetailModel = m
	DetailModel.manager = manager
	DetailModel.ConnectRowCount(DetailModel.rowCount)
	DetailModel.ConnectData(DetailModel.data)
	DetailModel.ConnectUpdate(DetailModel.update)
}

func (m *detailModel) rowCount(parent *core.QModelIndex) int {
	return len(m.details)
}

/*
so the controller needs to read the events from the calendar and pass them to the update method here. the model
*/
func (m *detailModel) data(index *core.QModelIndex, role int) *core.QVariant {
	if role != int(core.Qt__DisplayRole) {
		fmt.Println("role is not equal to displayRole ", role)
		return core.NewQVariant()
	}
	fmt.Println("detailModel index.Row() ", index.Row(), " role ", role)

	fmt.Printf("detail from index returned %+v -- %+v\r\n", m.detailFromIndex(index))
	fmt.Printf("description for index %d is %s\r\n", index.Row(), m.detailFromIndex(index).Description())

	return core.NewQVariant1(m.detailFromIndex(index).Description())
}

//needed only for qml
func (m *detailModel) roleNames() map[int]*core.QByteArray {
	return map[int]*core.QByteArray{
		int(core.Qt__UserRole) + 1: core.NewQByteArray2("ID", -1),
		int(core.Qt__UserRole) + 2: core.NewQByteArray2("Name", -1),
		int(core.Qt__UserRole) + 3: core.NewQByteArray2("Description", -1),
		int(core.Qt__UserRole) + 4: core.NewQByteArray2("StartTime", -1),
		int(core.Qt__UserRole) + 5: core.NewQByteArray2("Screenshot", -1),
		int(core.Qt__UserRole) + 6: core.NewQByteArray2("StartDate", -1),
		int(core.Qt__UserRole) + 7: core.NewQByteArray2("EndDate", -1),
	}
}

func (m *detailModel) detailFromIndex(index *core.QModelIndex) *DiffDetail {
	for _, v := range m.details {
		fmt.Printf("vId: %+v -- index %d\r\n", v.Id(), index.Row())
		if v.Id() == index.Row()+1 { //does it need to be +1?
			fmt.Println("found it ", v)
			return v
		}
	}
	return &DiffDetail{}
}

func (m *detailModel) update(diffs []*DiffDetail, reset bool) {
	m.BeginResetModel()
	if reset {
		m.details = diffs
	} else {
		m.details = append(m.details, diffs...)
	}
	m.EndResetModel()
}
```

Based on the calendar example mentioned before, I have renamed CalendarEvent to DiffDetail for a) it is more relevant to my project and b) more importantly, it is no longer only used by the calendar, but a tableView aswell, that when a row is clicked, can also append to this detailModel.

The controller for the listView starts like...

```
func init() {
	detailController_QmlRegisterType2("Detail", 1, 0, "DetailController")
}

type detailController struct {
	quick.QQuickItem

	_ func()                   `constructor:"init"`
	_ *core.QAbstractItemModel `property:"detailModel"`
```
and then the ListView looks like 
```
ListView {
    id: eventsListView
    model: detailModel
    header: eventListHeader
    delegate: 
    Rectangle {
      Text {
        text: {
          console.log("index", index, "model ", eventsListView.model.data(eventsListView.model.index(index, 0), Qt.DisplayRole))
          // console.log("patch: ", detailView.model.data(detailView.model.index(detailView.currentRow, 0), Qt.UserRole + 1), detailView.model.index(detailView.currentRow, 0), Qt.UserRole + 1)
          return display
        }
      }
```

Now, from the main controller, when the calendarDate is clicked, I can push to the detailModel with `c.DetailUpdate(events, true)`

I think perhaps the reason I am not able to get an index that allows me to reference the correct backend (database) object from clicking an item in the listView, is that I am confused about the data(index, role) function of Qt? 
What I think confused me is the job and use of roles, and from the front end how and when I can use `modelData` and `styleData` because I seem not to have a `styleData` available to me, so I think I am supposed to use roles?

Does what I am saying here at all make any sense as to what my problem is?