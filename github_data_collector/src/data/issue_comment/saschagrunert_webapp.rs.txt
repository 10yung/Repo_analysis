The build works just fine on ubuntu but I'm receiving this elusive rust error on 'sudo docker run' 
```
Error: Os { code: 2, kind: NotFound, message: "No such file or directory" }
```
This is a clean install on ubuntu 16.04, instructions worked fine but the image did not start up, i then ran manually and found this error.
The resulting internet searches for this error are not very helpful and this may be an easy fix. Any ideas anyone? Thanks.
I thought it might be helpful for newcomers, for some of the packages required for building or installing this project to be enumerated. 

Note that this is on Debian, which doesn't seem to have podman in the repos, so I substituted docker.

Also, in the Makefile, $(PWD) did not seem to work, so I substituted $(shell pwd).

Here are steps that build and deploy the project on current Debian.

## install docker on Debian
sudo apt-get install -y apt-transport-https ca-certificates curl gnupg2 software-properties-common
curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install -y docker-ce docker-ce-cli containerd.io
## install rust
wget https://sh.rustup.rs -O rustup-init
sudo sh rustup-init -y
## install cargo-web
sudo apt-get install -y pkg-config libssl-dev
sudo cargo install cargo-web
## build the project
cd /opt                         
git clone https://github.com/saschagrunert/webapp.rs.git
cd webapp.rs
sed -si 's/$(PWD)/$(shell pwd)/' Makefile
sed -si 's/^CONTAINER_RUNTIME.*/CONTAINER_RUNTIME=docker/' Makefile
## modify app URL and docker conn as needed
sed -i 's|^url.*|url = "http://127.0.0.1:8888"|' Config.toml
sed -i 's/^host.*/host = "127.0.0.1"/' Config.toml
sed -i 's/^username.*/username = "webapp"/' Config.toml
sed -i 's/^password.*/password = "abcd1234"/' Config.toml
sed -i 's/^database.*/database = "webapp"/' Config.toml
make all
## deploy the web app
sudo apt install -y postgresql-client
cargo install diesel_cli --no-default-features --features "postgres"
sudo make deploy
make run-app
docker ps -a


Also, note that the build should be done on a local filesystem so that it can be mapped as a volume in a container.

I'd be glad to help put this in a project wiki page if needed.
When running `make deploy`, I get the following error:

```
Status: Downloaded newer image for ekidd/rust-musl-builder:latest
    Updating registry `https://github.com/rust-lang/crates.io-index`
    Updating git repository `https://github.com/DenisKolodin/yew`
    Updating git repository `https://github.com/saschagrunert/yew-router`
error: failed to open: /home/rust/src/target/release/.cargo-lock

Caused by:
  Permission denied (os error 13)
make: *** [deploy] Error 101
```

My docker version is "Version 18.06.1-ce-mac73 (26764)". I'd imagine there's not much other helpful info I can give about my machine since it looks like this is an error inside the docker container, but let me know if you need anything else.
I'm running into an error trying to deploy this app on Windows:

```
C:\Users\allen\Projects\webapp.rs>make deploy
   Compiling webapp v0.3.0 (file:///C:/Users/allen/Projects/webapp.rs)
    Finished release [optimized] target(s) in 7.14s
    Garbage collecting "app.wasm"...
    Processing "app.wasm"...
    Finished processing of "app.wasm"!
The `app` was deployed to "C:\\Users\\allen\\Projects\\webapp.rs\\target\\deploy"!
error: could not find `Cargo.toml` in `/home/rust/src` or any parent directory
make: *** [deploy] Error 101

C:\Users\allen\Projects\webapp.rs>
```

Though while I'm making this issue, I can provide some extra notes on what I needed to get closer to building the app:

* [Make for Windows](https://chocolatey.org/packages/make)
* sed (this came with [Git Bash](https://gitforwindows.org/) I believe)
* Additional SDKs provided by Visual Studio (specifically the Windows 8.1 SDK and Universal CRT SDK to compile [sass-rs](https://github.com/compass-rs/sass-rs))

I understand that this might not be a big priority since Windows is somewhat of a second-class citizen for webdev stuff, but I think it would be really cool to see this work there too.

Thanks for making this, by the way!