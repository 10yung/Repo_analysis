#### Checklist
- ~~Updated CHANGELOG.md.~~

Experiencing a naughty crash with buttons and all inheriting classes inside NSStackView with enabled `Detaches Hidden Views` when the window gets closed and deallocated in the latest Catalina build:

```
2019-10-06 15:04:27.548688+0100 App[4474:58829] [general] Caught exception during runloop's autorelease pool drain of client objects NSRangeException: Cannot remove an observer <NSStackView 0x10461aca0> for the key path "hidden" from <NSButton 0x10461c7f0> because it is not registered as an observer. userInfo: (null)
2019-10-06 15:04:27.550252+0100 App[4474:58829] [General] An uncaught exception was raised
2019-10-06 15:04:27.550313+0100 App[4474:58829] [General] Cannot remove an observer <NSStackView 0x10461aca0> for the key path "hidden" from <NSButton 0x10461c7f0> because it is not registered as an observer.
	0   CoreFoundation                      0x00007fff36166d63 __exceptionPreprocess + 250
	1   libobjc.A.dylib                     0x00007fff6bf56bd4 objc_exception_throw + 48
	2   Foundation                          0x00007fff387a7395 -[NSObject(NSKeyValueObserverRegistration) _removeObserver:forProperty:] + 578
	3   Foundation                          0x00007fff387a7106 -[NSObject(NSKeyValueObserverRegistration) removeObserver:forKeyPath:] + 74
	4   Foundation                          0x00007fff387bf963 -[NSObject(NSKeyValueObserverRegistration) removeObserver:forKeyPath:context:] + 190
	5   AppKit                              0x00007fff334e0cc9 -[NSStackView dealloc] + 233
	6   CoreFoundation                      0x00007fff360c5176 -[__NSArrayI dealloc] + 73
	7   libobjc.A.dylib                     0x00007fff6bf6653a _ZN19AutoreleasePoolPage12releaseUntilEPP11objc_object + 134
	8   libobjc.A.dylib                     0x00007fff6bf4cc70 objc_autoreleasePoolPop + 175
	9   CoreFoundation                      0x00007fff3608767e _CFAutoreleasePoolPop + 22
	10  CoreFoundation                      0x00007fff360b59fc __CFRunLoopRun + 2404
	11  CoreFoundation                      0x00007fff360b4e13 CFRunLoopRunSpecific + 499
	12  HIToolbox                           0x00007fff34c41b2d RunCurrentEventLoopInMode + 292
	13  HIToolbox                           0x00007fff34c4186d ReceiveNextEventCommon + 600
	14  HIToolbox                           0x00007fff34c415f7 _BlockUntilNextEventMatchingListInModeWithFilter + 64
	15  AppKit                              0x00007fff332eaac4 _DPSNextEvent + 990
	16  AppKit                              0x00007fff332e9834 -[NSApplication(NSEvent) _nextEventMatchingEventMask:untilDate:inMode:dequeue:] + 1352
	17  AppKit                              0x00007fff332e3fd4 -[NSApplication run] + 658
	18  AppKit                              0x00007fff332d5e7d NSApplicationMain + 777
```

As far as I can tell this has been happening since Catalina Beta was released and still occurs on the latest GM seed, which is worryingâ€¦ Builds produced with the latest stable Xcode and Xcode 11.2 Beta suffer from the same problem. Everything pre-Catalina works 100% fine.

All of the above narrows down to ReactiveCocoa bindings. Removing the following `observeValues` line fixes the issue:

```swift
override func viewDidLoad() {
     self.launchOnStartupCheckbox.reactive.boolValues.observeValues({ Swift.print($0) })
}
```

It seems like there's something wrong with ObjC swizzling that ReactiveCocoa does behind the scenes? It also looks there're some observer-related issues, is this something related or already known? Otherwise happy to try isolating the issue into a sample project, but there's really not much details besides that: NSStackView with enabled `Detaches Hidden Views` + NSButton + reactive observer on button's IBOutlet = ðŸ’¥ on window deallocation!
https://travis-ci.org/ReactiveCocoa/ReactiveCocoa/jobs/588775554#L2247

```
2019-09-24 05:24:19.848 xcodebuild[4308:12288] [MT] IDETestOperationsObserverDebug: (572DACB9-175A-4D65-B907-D439A7C04B10) Finished requesting crash reports. Continuing with testing.
    âœ— NSObject_signal_for____a_reactive_key_value_observer_using_Swift_4_Smart_Key_Path__stress_tests__async_disposal_of_signal_with_in_flight_changes, Test crashed
```
It would make the CI jobs faster with the much higher usage limits than Travis: https://help.github.com/en/articles/workflow-syntax-for-github-actions#usage-limits

> - You can execute up to 20 workflows concurrently per repository.
> - ...
> - You can run up to 20 jobs concurrently per repository across all workflows.

@ReactiveCocoa/reactivecocoa Could someone with the admin right sign up for the beta?

https://github.com/features/actions
Is there any reason that text signals of `UISearchBar` still emit optional values, while those of `UITextField` and `UITextView` no longer do?

I ran into a compilation failure just like what #3659 described, after updating ReactiveCocoa from V8 to V10. Compilation failures are totally OK to me but the error message was quite confusing:
```
Property 'continuousTextValues' requires that 'UITextField' inherit from 'UISearchBar'
```

While the message was given by the compiler, I think this confusion can be avoided if these text signals with same names work in a consistent way.
internal class DelegateProxy<Delegate: NSObjectProtocol>: NSObject {

We can't extend for our agents
Why can't we extend DelegateProxy in the case of pods.
I met a crash when rac dispose,  in iPhone 7 Plus, iOS 12.3.1ï¼Œv3.0.1. Anybody can help me?

![image](https://user-images.githubusercontent.com/7882115/62619060-65e80880-b948-11e9-85b2-841b327bf4cf.png)

0               __destroy_helper_block_ (in News)
1               ___21-[RACSubscriber init]_block_invoke (in News) 52
2               -[RACDisposable dispose] (in News) 96
3               -[RACCompoundDisposable dispose] (in News) 192
4               -[RACSubscriber sendCompleted] (in News) 120
5               -[RACPassthroughSubscriber sendCompleted] (in News) 128
6               -[RACSubscriber sendCompleted] (in News) 144
7               -[RACPassthroughSubscriber sendCompleted] (in News) 128
8               -[RACSubject enumerateSubscribersUsingBlock:] (in News) 284
9               -[RACReplaySubject sendCompleted] (in News) 76
10              -[RACDisposable dispose] (in News) 96
11              -[RACCompoundDisposable dispose] (in News) 192
12              ___swizzleDeallocIfNeeded_block_invoke (in News) 68
13  libobjc.A   (anonymous namespace)::AutoreleasePoolPage::pop(void*) (in libobjc.A.dylib)
14  UIKitCore   -[UIView dealloc] (in UIKitCore)
15  libobjc.A   (anonymous namespace)::AutoreleasePoolPage::pop(void*) (in libobjc.A.dylib)
16  UIKitCore   -[UIView dealloc] (in UIKitCore)
17  libobjc.A   (anonymous namespace)::AutoreleasePoolPage::pop(void*) (in libobjc.A.dylib)
Currently says 3.0.x, which is a deterrent for adoption by people comparing to Rx.

I'd make a PR myself, but my employer makes that complicated. ðŸ˜‰ 
Been using RAC for quite long time since it first came out.

From the past few months, we found out that our applications are using RAC with animation quite a lot.

So instead of writing subscribers every time , we made something kinda handy.

**ReactiveAnimator**

Here is how it looks

```swift
protocol ReactiveAnimatable: AnyObject {}

struct Animator<Base: ReactiveAnimatable> {
  let reactive: Reactive<Base>
  let duration: TimeInterval
  init(_ reactive: Reactive<Base>, duration: TimeInterval) {
    self.reactive = reactive
    self.duration = duration
  }
}

extension Reactive where Base: ReactiveAnimatable {
  var animator: Animator<Base> {
    return animator(duration: 0.3)
  }
  
  func animator(duration: TimeInterval) -> Animator<Base> {
    return Animator(self, duration: duration)
  }
}
```



And using it is quite straightforward

```swift
extension UIView: ReactiveAnimatable {}
extension Animator where Base: UIView {
  var isHidden: BindingTarget<Bool> {
    return reactive.makeBindingTarget(on: UIScheduler(), { [duration = self.duration] view, value in
      guard view.isHidden != value else { return }
      let toAlpha: CGFloat = value ? 0: 1
      view.alpha = 1.0 - toAlpha
      view.isHidden = false
      UIView.animate(withDuration: duration, animations: {
        view.alpha = toAlpha
      }, completion: { finished in
        view.isHidden = value
      })
    })
  }
  
  var borderColor: BindingTarget<UIColor?> {
    return reactive.makeBindingTarget(on: UIScheduler()) { [duration = self.duration] view, value in
      let animationKey = "reactive.animator.borderColor"
      view.layer.removeAnimation(forKey: animationKey)
      CATransaction.begin()
      CATransaction.setCompletionBlock {
        view.layer.borderColor = value?.cgColor
      }
      let animation = CABasicAnimation(keyPath: "borderColor")
      animation.duration = duration
      animation.toValue = value?.cgColor
      animation.isRemovedOnCompletion = false
      animation.fillMode = .forwards
      view.layer.add(animation, forKey: animationKey)
      
      CATransaction.commit()
    }
  }
}
```



With `UILabel`

```swift
extension Animator where Base: UILabel {
  var text: BindingTarget<String?> {
    return reactive.makeBindingTarget(on: UIScheduler()) { [duration = self.duration] view, value in
      let transitionType = CATransitionType.moveIn
      view.layer.removeAnimation(forKey: transitionType.rawValue)
      let animation: CATransition = CATransition()
      animation.timingFunction = CAMediaTimingFunction(name: .easeIn)
      animation.type = transitionType
      animation.subtype = .fromBottom
      animation.duration = duration
      view.layer.add(animation, forKey: transitionType.rawValue)
      view.text = value
    }
  }
}
```



Binding

```swift
label.reactive.animator.isHidden <~ viewModel.isHidden
label.reactive.animator(duration: 0.8).text <~ viewModel.text
label.reactive.animator(duration: 0.5).borderColor <~ viewModel.borderColor
```


![ReactiveAnimator](https://user-images.githubusercontent.com/1229438/55367516-39a32200-5539-11e9-96f3-1d2ac19b9e7e.gif)

 
Just our $.20c

Not sure what tags should be applied Â¯\\\_(ãƒ„)_/Â¯