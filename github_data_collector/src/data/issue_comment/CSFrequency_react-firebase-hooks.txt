Hi, I have some data structured something like the following:

- Root doc
    - Middle collection of node docs (only 1 layer deep for now)
        - Collection of leaf docs

Normally, I might break this up into separate components that each have their own hook, but I am using a library that accepts the data in hierarchical form.  Is there a way I can query the whole structure at once?  Alternatively, do people have best practices for structuring data like this so it can be queried in parts and then assembled in an efficient way (for reading, say)?

Playing around with it now, may update with work in progress as I go.

Thanks for this library I guess this issue is related with `Firebase/auth` itself and not the hook but this is the journey:

### Steps to reproduce
1. Not register user go to a registration form in Tab1
2. the Registration form shows a `user.emailVerified: false` on the top 
3. The user register using the form
4. A verification email is sent to the user
5. The form now shows a message pending verify email
6. The user goes to the email and clicks in the verification link opening Tab2

### Current result

- Returning to the Tab1 the message `user.emailVerified: false` remains
- if in the console I access the `user` entity  `user.emailVerified -> true`

### Expected result
`user.emailVerified` changes triggers a component re-render
- Returning to the Tab1 the message is `user.emailVerified:  true` 




What is the currently recommended way to fetch references from within a loaded document snapshot? 
Could we add an option to automatically hydrate child references into a snapshot or data object? 
Use reset instead of set value when no value is present
Should fix: https://github.com/CSFrequency/react-firebase-hooks/issues/17
I couldn't find anything about refreshing data for a document that is loaded using `useDocumentDataOnce`. My app will have a refresh button or a pull-to-refresh gesture.

I tried using a dummy local state to force the re-render but it doesn't work since the document refs are the same across renders.

```js
const [refreshCount, setRefreshCount] = useState(0);
const refresh = () => setRefreshCount(refreshCount + 1);
```

Is this possible to implement this behaviour?

Still fleshing the idea out but wanted to note in case there was interest. It'd be handy for our use case to be able to apply transformations to returned object(s). Often times the data we have stored is not necessarily the data we want to display so we often wind up running the same transformations after fetch.

### A few examples:

- Our users always have a `first_name` and a `last_name`. Sometimes they also have a `display_name`. We always want the `display_name` to take precendence and run a transformation on retrieved data to do so.

- We use Firebase timestamps which are really handy on the server and really not-so-handy on the client since they always need to be coerced with at least `.toDate()`

- Currency formatting always winds up with something like `.toLocaleString()` or something. I can't even remember off the top of my head and would need to look into our codebase for how we typically format.

### Suggested enhacnement
Provide a `transformations` property in `options` that all data is run through. A `transformation` could either be added to an object or overwrite a property of an incoming object.

For example, let's say my source object is a user:
```js
{
  first_name: 'John',
  last_name: 'Smith',
  created_at: firebase.firestore.Timestamp
}
```

With `transformations`:
```js
const [user, userLoading, userError] = useDocumentData(
  myCollectionRef.users('1234')
, {
  transformations: {
    display_name: (data) => {
      return data.display_name 
        ? data.display_name 
        : `${data.first_name} ${data.last_name}`
    },
    created_at: (data) => {
      return data.created_at.toDate().toDateString();
    }
  }
})
```

Expected output from `console.log(user)`:
```js
{
  first_name: 'John',
  last_name: 'Smith',
  display_name: 'John Smith',
  created_at: 'Wed Dec 18 2019',
}
```

I could see this coming in handy for us since we could store a handful of "schema" transformations and add to them with spread syntax. eg.

```js
{
  transformations: {
    randomOneOffProp: (data) => data.field.toLowercase(),
    ...commonPeopleTransformsFromFile,
  }
}
```

Ideally the same could be applied to collection data
For Firestore collections and docs, it would be nice if each of the `...Data` hooks would automatically add the `idField` (if provided) as a key/value to the `<T>` generic.

For example, the `useDocumentData` hook would return something like `T & { idField: string }` instead of just `T`. In this case, `idField` should be represented by the actual string value entered into `options.idField`.

Does this make sense?  I feel like it should be trivial to do something like this, but couldn't quite get it to work myself.  I'd be happy to make a pull request if anyone has some extra insight.

Thanks!


I'm trying to figure out how to use this. 

My best attempt is copied below, although it generates an error that says:

> ReferenceError: Cannot access 'snapshot' before initialization


```
[const GeneralTest = props => {
  const { register, handleSubmit, setValue, errors, reset } = useForm();
  const { action } = useStateMachine(updateAction);
  const onSubit = data => {
    action(data);
    props.history.push("./ProposalMethod");
  };


  const [snapshot, loading, error] = useDocumentOnce(
    firebase.firestore().collection('abs_for_codes'),
    snapshot.push({
      value: snapshot.data().title.replace(/( )/g, ''),
      label: snapshot.data().title + ' - ABS ' + snapshot.id
    }),
  );

  const [valuesField, setField ] = useState({
    selectedOptionField: []
  });

  const handleMultiChangeField = selectedOption => {
    setValue("field", selectedOption);
    setField({ selectedOption });
  };

  const handleMultiChangeField = selectedOption => {
    setValue("field", selectedOption);
    setField({ selectedOption });
  };

  useEffect(() => {
    register({name: "field"});
  }, []);

]


```



Before hooks, I was able to use componentDidMount like so: 

```
[class Form extends React.Component {
    state = {
      options: [],
    }

    async componentDidMount() {
        // const fsDB = firebase.firestore(); // Don't worry about this line if it comes from your config.
        let options = [];
        await fsDB.collection("abs_for_codes").get().then(function (querySnapshot) {
        querySnapshot.forEach(function(doc) {
            console.log(doc.id, ' => ', doc.data());
            options.push({
                value: doc.data().title.replace(/( )/g, ''),
                label: doc.data().title + ' - ABS ' + doc.id
            });
            });
        });
        this.setState({
            options
        });
    }]

```
I'm looking to figure out how to use this tool to extract data from the database and then use it to populate a select menu, like so:

```
<Select 
            className="reactSelect"
            name="field"
            placeholder="Select at least one"
            value={valuesField.selectedOption}
            options={snapshot}
            onChange={handleMultiChangeField}
            isMulti
            ref={register}
          />
```

Any chance it might get implemented? I don't understand it is not in here yet. Am I the first to ask?
Just tried the example you provided

```
import { useAuthState } from 'react-firebase-hooks/auth';

const CurrentUser = () => {
  const [user, initialising, error] = useAuthState(firebase.auth());
  const login = () => {
    firebase.auth().signInWithEmailAndPassword('test@test.com', 'password');
  };
  const logout = () => {
    firebase.auth().signOut();
  };

  if (initialising) {
    return (
      <div>
        <p>Initialising User...</p>
      </div>
    );
  }
  if (error) {
    return (
      <div>
        <p>Error: {error}</p>
      </div>
    );
  }
  if (user) {
    return (
      <div>
        <p>Current User: {user.email}</p>
        <button onClick={logout}>Log out</button>
      </div>
    );
  }
  return <button onClick={login}>Log in</button>;
};
```

Same result. Uncaught error. Using v2.1.0