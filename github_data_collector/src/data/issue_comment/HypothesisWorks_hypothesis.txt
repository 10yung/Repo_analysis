Hello!

Some time ago I created an issue - https://github.com/HypothesisWorks/hypothesis/issues/2087
 and recently got back to the investigations regarding the cause of the observed behavior. A took this case:

`one_of(none(), none(), booleans())` 

That was generating 85 examples, while there are only possible 3 cases (`None`, `True`, `False`).

I found this code in `OneOfStrategy` that should remove duplicates (I assume):

```
pruned = []
seen = set()
for s in strategies:
    if s is self:
        continue
    if s in seen:
        continue
    seen.add(s)
    pruned.append(s)
```

But `if s in seen` doesn't work for `st.none()`:

```
In [3]: seen = set()                                                                                                                                                                                                                                                                                                    

In [4]: seen.add(st.none())                                                                                                                                                                                                                                                                                             

In [5]: seen.add(st.none())                                                                                                                                                                                                                                                                                             

In [6]: seen                                                                                                                                                                                                                                                                                                            
Out[6]: {none(), none()}
```

And for `just` (which is used in `none`). I assume that "just" strategy instances can be deduplicated at least in some cases (for `just(None)` for example). What do you think? Could you, please, share some information about this behavior?

I've recently published a [`hypothesis-geometry` package](https://pypi.org/project/hypothesis-geometry/) for generating geometric objects like concave/convex planar contours, and I guess it can be helpful to the community, what should I do to add it to ["External Strategies" docs section](https://hypothesis.readthedocs.io/en/latest/strategies.html#external-strategies)?

(Also as a maintainer of [`hypothesis_sqlalchemy` package](https://pypi.org/project/hypothesis-sqlalchemy/) I think it will make given list more consistent if we rename it there to `hypothesis-sqlalchemy`).
I use Hypothesis with great enthusiasm. However, I have issues with its code completion.

A minimal environment could be created via

```bash
conda create --name testenv python=3.7 hypothesis jedi mypy
```

A test python file would be:

```python
# test.py
from hypothesis import strategies as st

n = st.integers(min_=123)
```

Using `mypy` detects erroneous usage:

```bash
$ mypy test.py
test.py:3: error: Unexpected keyword argument "min_" for "integers"
Found 1 error in 1 file (checked 1 source file)
```

However, `jedi-vim` is not able to pick up the definitions. Thus, neither code completion nor displaying the doc string do work. On the other hand, PyCharm manages to to so.

On tweak I tried out was to adapt the python path.
```bash
export PYTHONPATH="export PYTHONPATH=$HOME/.miniconda3/envs/testenv/lib/python3.7/site-packages/:$PYTHONPATH"
```
This gives completion for `st.intege`, but still no docstring detection and still no argument completion.

Other packages, e.g. `requests` work flawlessly.

I would be very glad if I hypothesis would support the IDE-like setup that is common to many Vim users.
Fixes #2320.
This is designed to prevent problems like #2318 - in #2315 I tried to to add a CI job for Python 3.5.1, but it turns out that `tox` doesn't support patch versions... and so I thought the best option was to explicitly drop 3.5.0 and 3.5.1 and get ahead of the cleanups.

We're not the only project to be thinking about this: e.g. there's https://github.com/pytest-dev/pytest/pull/6470, https://github.com/python-trio/trio/issues/880, and https://github.com/python/mypy/issues/7420.  Ubuntu has shipped Python >= 3.5.2 since their 16.04.05, and [PyPI stats](https://pypistats.org/packages/hypothesis) show low 3.5 usage (much lower than 2.7), of which we think only a small portion will be affected.
I've gotten `from_type(Set[Hashable])` to reliably fail during generation. It seems that `Hashable` generates `Decimal` objects, which is fine. However, hypothesis fails when trying to hash signaling NaNs.

I'm not too familiar with the inner workings of strategy generation, but I think it would be reasonable to "turn off" signaling NaNs in composite strategies whenever they might need to be hashed (`sets`, `frozensets`, the keys of `dictionaries`, etc...).

Here's a minimal example.

```py
Python 3.7.4 (default, Sep  7 2019, 18:27:02) 
[Clang 10.0.1 (clang-1001.0.46.4)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import hypothesis
>>> hypothesis.__version__
'5.1.5'
>>> from hypothesis.strategies import decimals, sets
>>> s = sets(decimals())
>>> s.example()
{Decimal('-NaN'), Decimal('-0.5'), Decimal('0.294355'), Decimal('Infinity'), Decimal('3.00472547')}
>>> s.example()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 314, in example
    example_generating_inner_function()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 302, in example_generating_inner_function
    @settings(
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 1080, in wrapped_test
    raise the_error_hypothesis_found
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 1049, in wrapped_test
    state.run_engine()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 723, in run_engine
    runner.run()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py", line 420, in run
    self._run()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py", line 815, in _run
    self.generate_new_examples()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py", line 667, in generate_new_examples
    self.test_function(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py", line 155, in test_function
    self.__stoppable_test_function(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/engine.py", line 137, in __stoppable_test_function
    self._test_function(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 676, in _execute_once_for_engine
    escalate_hypothesis_internal_error()
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 647, in _execute_once_for_engine
    result = self.execute_once(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 602, in execute_once
    result = self.test_runner(data, run)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/executors.py", line 52, in default_new_style_executor
    return function(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/core.py", line 543, in run
    args, kwargs = data.draw(self.search_strategy)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 879, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 57, in do_draw
    return tuple(data.draw(e) for e in self.element_strategies)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 57, in <genexpr>
    return tuple(data.draw(e) for e in self.element_strategies)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 639, in do_draw
    result = self.pack(data.draw(self.mapped_strategy))
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py", line 150, in do_draw
    return data.draw(self.wrapped_strategy)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 639, in do_draw
    result = self.pack(data.draw(self.mapped_strategy))
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 57, in do_draw
    return tuple(data.draw(e) for e in self.element_strategies)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 57, in <genexpr>
    return tuple(data.draw(e) for e in self.element_strategies)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py", line 150, in do_draw
    return data.draw(self.wrapped_strategy)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 639, in do_draw
    result = self.pack(data.draw(self.mapped_strategy))
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/lazy.py", line 150, in do_draw
    return data.draw(self.wrapped_strategy)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/internal/conjecture/data.py", line 874, in draw
    return strategy.do_draw(self)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 158, in do_draw
    data=data, filter_strategy=filtered
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 352, in do_filtered_draw
    return filter_strategy.default_do_filtered_draw(data)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/strategies.py", line 729, in default_do_filtered_draw
    if self.condition(value):
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 153, in <lambda>
    key(val) not in seen for (key, seen) in zip(self.keys, seen_sets)
  File "/usr/local/lib/python3.7/site-packages/hypothesis/strategies/_internal/collections.py", line 153, in <genexpr>
    key(val) not in seen for (key, seen) in zip(self.keys, seen_sets)
TypeError: Cannot hash a signaling NaN value
```

Thanks for such an awesome library! If this is an easy fix, I'm happy to take it... but a quick scan of the relevant code seemed a bit complex.
Keyword-only arguments are great, because - assuming you have sensible names - they make complicated function signatures readable at the call site *without* needing to check the definition for e.g. the order of all the boolean flags.  This PR:

- Converts all arguements with default values into keyword-only arguments, with only a few exceptions
  - `min_value` and `max_value`, because call sites are still clear with positional arguments.
  - `alphabet` in `st.text()`, `subdtype_strategy` in the Numpy extra, and `columns` in the Pandas extra.  The first argument in these cases has a clear interpretation, so positional is fine.
  - `extra.pandas.range_indices()`, where min_size and max_size are obvious even by position
- Adds the `@deprecated_posargs` decorator, which inserts a `*__deprecated_posargs` argument.  This ensures that existing code continues to work (albeit with deprecation warnings), while raising an error if passed too many posargs or if any argument is passed by both name and position.

Closes #2130. 
Now that Hypothesis is Python-3-only (:tada:), there are some useful things we can rely on having available - like [the `ipaddress` module](https://docs.python.org/3/library/ipaddress.html)!  This patch:

- Adds a strategy `ip_addresses(*, v=None, network=None)`.  `v` may be either `4` or `6`; `network` may be an `IPv4Network` or `IPv6Network` object (or string - the ergonomics justify handling the cast internally).
- Deprecates `hypothesis.provisional.ip{4,6}_addr_strings()` in favor of `ip_addresses(v=...).map(str)`
- Registers strategies for `IPv{4,6}{Address,Network,Interface}` by entering them in the `_global_type_lookup` mapping in `hypothesis.strategies._internal.types`

Closes #2306.
Hi folks.

I maintain an internal tool at my company and have been very happily using hypothesis as part of my test suite.

Over the past month, I've noticed a significant change in the duration of my test suite (a change in duration by a couple orders of magnitude, from ~5 minutes to >3 hours, when I run under a CI profile with `max_examples=1000`).

I've made an example that doesn't exhibit quite that severe difference, but illustrates using a simplified version of my data structures and test strategy, and run this example across several versions of Hypothesis.

It appears that the regressions I'm seeing in the performance were introduced in versions 4.51.1 and 4.55.3.

My hope is to make you folks aware of this and move toward figuring out how to improve the situation.  If there's anything you'd like me to try, let me know.

# Environment
* Ubuntu 16.04 VM on Windows 10
* Python 3.8.1
* pytest 5.3.2

# Test

See the following Gist (which includes a description of how I ran the test).
https://gist.github.com/jasongraham/177e4f854c0c52a0bf032707e574d65d

# Results

Hypothesis Version | Trial 1 | Trial 2 | Trial 3 | Average
-- | -- | -- | -- | --
4.48.1 | 39.48 | 35.39 | 40.09 | 38.32
4.51.0 | 38.51 | 47.83 | 39.29 | 41.87667
4.51.1 | 96.29 | 99.97 | 94.53 | 96.93
4.53.3 | 96.09 | 94.25 | 96.15 | 95.49667
4.54.2 | 95.28 | 91.61 | 88.14 | 91.67667
4.55.2 | 98.53 | 92.6 | 100.7 | 97.27667
4.55.3 | 260.82 | 281.43 | 263.06 | 268.4367
4.55.4 | 247.1 | 267.03 | 251.14 | 255.09
4.57.1 | 272.13 | 255.11 | 262.63 | 263.29
5.0.1 | 250.1 | 269.7 | 245.83 | 255.21
5.1.0 | 251.97 | 246.43 | 258.3 | 252.2333

![image](https://user-images.githubusercontent.com/399471/71759957-dff7cb80-2ead-11ea-929d-6f34b401ce70.png)

I see more severe increases using with larger `max_examples`, but the increase is also easily visible with `max_examples=100` (not really visible with `max_examples=10`) if you don't want to waste as much time as I did.

---
Edit ~06 Jan 2020 09:31:12 AM PST: I must have been very tired writing text.  I've cleaned it up and actually finished all of my thoughts.
Another small but pleasant\* feature that is much easier now that we're Python-3-only :grin: 

\*assuming you want to find bugs, of course

Replaces #2246.