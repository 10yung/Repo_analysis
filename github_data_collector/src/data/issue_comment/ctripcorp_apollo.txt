- 比如，我有个业务开关的配置，我希望在中午12点定时生效，现在的做法是只能在指定的时间去发布配置，希望 Apollo 能够支持定时生效配置的功能
- 有些配置，比如限流规则，我修改后，希望这个配置生效 1h，过了 1h 之后仍然使用原来的配置


apollo-portal 启动的时候报错
CPU占用太高，三个容器启动100%，四核心16G机子呀
您好，启动portal的时候报错：pid - 7102 just quit unexpectedly, please check logs under /opt/logs/100003173 and /tmp for more information! 查看日志找到一个error:Table 'apolloconfigdb.role' doesn't exist，我使用的是分布式部署指南里面的apolloconfigdb.sql和apolloportaldb.sql手动创建的数据库，请问这个怎么解决。
# question
1. k8s下非跨k8s集群部署,eureka是否还有存在必要呢?
2. 非K8s环境下,如具有动态域名解析功能,eureka是否还有存在必要呢?
3. 目前对Apollo的了解是eureka的所有注册中心需要写db中,之后启动读取进行互相注册,但是假如pods环境下ip都是动态的,所以是需要进行指定node的地址映射吗?是不是后续直接走service可以让apollo的结构更加无状态化
 
目前对于这些问题有一些困惑,也想了解Apollo对于云原生下配置中心的理解,目前看到Apollo处于CNCF landscape, 谢谢

## What's the purpose of this PR
优化精简了EventManager，语义和逻辑更流畅。

## Brief changelog
EventManager优化，主要是精简了发布和订阅的部分。
用的1.5.1版本
springboot项目，2.1.5，原先项目中有logback-spring.xml日志配置文件，将application.properties文件迁移到配置中心之后
1. 设置eagerLoad enabled 为true，在apollo配置中心配置logging.config=classpath：logback-xxxx.xml 服务端启动日志无法打印，启动成功后的所有日志都无法输出，logback-xxxx中的配置完全没有生效

2.取消eagerload设置，服务端启动日志可以打印到控制台，但是启动日志和启动后的业务日志都无法输出到文件

如果想把logback-spring.xml完全移到apollo配置中心需要怎么配置？如果留在项目中又需要怎么配置？
使用xml获取apollo配置时，在加载xml时出现了个错误
Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'cZKRcFacade': Initialization of bean failed; nested exception is org.springframework.beans.TypeMismatchException: Failed to convert property value of type 'java.lang.String' to required type 'java.lang.Integer' for property 'timeout'; nested exception is java.lang.NumberFormatException: For input string: "${frwp.rc.facility.bps.timeout}"

但是apollo和本地缓存里面都是有这个key的，frwp.rc.facility.bps.timeout = 30000
而且检查了也没有空格，回车之类的字符，不知道为什么会出现这个问题
**Is your feature request related to a problem? Please describe.**

在微服务架构中，推崇“应用配置分离”的原则。在未使用配置中心之前，我们的配置都是以文件的方式存储，有properties，json等等格式。Apollo抽象了Namespace模型与传统的配置文件相对应，并且支持了Namespace级别的审计，灰度发布等高级特性。

但是在传统的配置文件中，还包含了第三方证书等二进制文件。Namespace模型并没有包含到，尽管Namespace支持多种类型，如properties，yaml，json，txt等，但是这些都是文本，并非二进制。由于二进制配置文件无法支持，目前并无法做到真正的“应用配置分离”，期望能在Apollo之上扩展该功能，当然如何做希望大家能一起探讨下。

**Describe the solution you'd like**

当前文本类型的配置都是结合`ApolloConfigDB`.`Item`表使用的，如何是propeteis类型的配置，每一个配置项会对应`item`表的一行；如果是非properties类型的Namespace，则是该Namespace的所有内容，对应`item`表的一行，存放到longtext类型的Value字段上。

扩展Namespace，新增一张管理二进制文件的表，与Namespace模型关联，也是为了复用Namespace的权限管理等操作。

**Describe alternatives you've considered**

当前Apollo不支持二进制文件，我们的方案暂时分为两种：
1. 所有环境的的二进制文件打包到jar里，在利用profile来区分文件或apollo配置文件路径
2. 二进制文件由运维分发到服务器指定路径，apollo配置路径读取。（但是对于容器应用来说不太友好）

**Additional context**
None
