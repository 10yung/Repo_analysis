As titled.

#### Checklist

- [x] run `npm run test` and `npm run benchmark`
- [x] tests and/or benchmarks are included
- [ ] documentation is changed or added
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

- [ ] Project Charter is published on website or github

I followed [this template](https://github.com/openjs-foundation/cross-project-council/blob/master/PROJECT_CHARTER_TEMPLATE.md)

I think we should write down a process on the `Section 4.2: Decision-making, Voting, and/or Elections` since there is not a written standard right now in our CONTRIBUTING.md.

Ref https://github.com/openjs-foundation/project-onboarding/issues/35

#### Checklist

- [ ] run `npm run test` and `npm run benchmark`
- [ ] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

Added a reference to chainable methods on 'inject' function based on the update of 'light-my-request'

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Tip: `npm run bench` to compare branches interactively.

Contributors guide: https://github.com/fastify/fastify/blob/master/CONTRIBUTING.md
-->

#### Checklist

- [x] run `npm run test` and `npm run benchmark`
- [x] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

<!--
Thank you for your pull request. Please provide a description above and review
the requirements below.

Bug fixes and new features should include tests and possibly benchmarks.

Tip: `npm run bench` to compare branches interactively.

Contributors guide: https://github.com/fastify/fastify/blob/master/CONTRIBUTING.md
-->

#### Checklist

- [x] run `npm run test` and `npm run benchmark`
- [x] tests and/or benchmarks are included
- [ ] documentation is changed or added -> #1966 
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

Draft PR in conjunction with #2014 . Can also merge this work into that PR if @delvedor wants. 
Closes #2040 

Currently missing async hook function definitions. Will add those next either in this branch or another one.
Ref https://github.com/openjs-foundation/project-onboarding/issues/35

[x] Update legal copyright notice on ~~project website~~ and github

#### Checklist

- [ ] run `npm run test` and `npm run benchmark`
- [ ] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

## 🐛 Bug Report

```
npm test

 FAIL  test/sample.test.js
 ✖ timeout!

  test: TAP
  signal: SIGTERM
  handles:
    - type: Server
      events:
        - request
        - connection
        - clientError
      connectionKey: 4:127.0.0.1:3000
  expired: TAP
  stack: |
    emit (node_modules/signal-exit/index.js:77:11)
    process.listener (node_modules/signal-exit/index.js:91:7)

 FAIL  test/sample.test.js 1 failed of 6 28s
 ✖ timeout!

```

This test case not finishing and it says timeout error

## To Reproduce

Steps to reproduce the behavior:

app.js

```
const Fastify = require('fastify')

function buildFastify () {
  const fastify = Fastify()

  fastify.get('/', function (request, reply) {
    reply.send({ hello: 'world' })
  })
  fastify.lesten(3000)
  return fastify
}

module.exports = buildFastify
```
**test.js**

```
const tap = require('tap')
const buildFastify = require('./app')

tap.test('GET `/` route', t => {
  t.plan(4)

  const fastify = buildFastify()

  // At the end of your tests it is highly recommended to call `.close()`
  // to ensure that all connections to external services get closed.
  t.tearDown(() => fastify.close())

  fastify.inject({
    method: 'GET',
    url: '/'
  }, (err, response) => {
    t.error(err)
    t.strictEqual(response.statusCode, 200)
    t.strictEqual(response.headers['content-type'], 'application/json; charset=utf-8')
    t.deepEqual(JSON.parse(response.payload), { hello: 'world' })
  })
})
```
// run `npm test`

## Current behavior
This program should quit and test result must be shown. 

A clear and concise description of what you expected to happen.
```
Paste the results here:
 FAIL  admin/auth/auth.test.js
 ✖ timeout!

  test: TAP
  signal: SIGTERM
  handles:
    - type: Server
      events:
        - request
        - connection
        - clientError
      connectionKey: 4:127.0.0.1:3000
  expired: TAP
  stack: |
    emit (node_modules/signal-exit/index.js:77:11)
    process.listener (node_modules/signal-exit/index.js:91:7)

 FAIL  admin/auth/auth.test.js 1 failed of 6 28s
 ✖ timeout!
```

## Expected Behavior
```
Suites:   0 of 1 completed
Asserts:  4 passed, of 4
Time:     8s
----------|----------|----------|----------|----------|-------------------|
File      |  % Stmts | % Branch |  % Funcs |  % Lines | Uncovered Line #s |
----------|----------|----------|----------|----------|-------------------|
All files |      100 |      100 |      100 |      100 |                   |
 appt.js  |      100 |      100 |      100 |      100 |                   |
----------|----------|----------|----------|----------|-------------------|
```


## Your Environment

- *node version*: v12.13.0
- *fastify version*: 2.11.0
- *os*: Mac
- *any other relevant information*

I'm opening this PR to get feedback about how I would like to refactor the validation and serialization.
The code of this PR is not working yet, it is only a blueprint of how I would like to proceed.

The main targets are:

- drop the `shared schema` feature for these reasons:
  - it is not standard
  - the standard admin the `/definitions` that can be used with `$ref` to works as the shared schema does
  - a lot of less code to maintain: we don't need to traverse the schemas and apply logic, the validators (ajv, joi, etc...) and the serializer (fast-json-stringify) will do the job for us
- improve the usability of the compiler function to let the user less pain in the configuration of custom modules

If we reach these goals, I think we will have fewer issues on this piece of code.

The impact on actual users would be:

- refactor of the setup of custom validators
- change the schemas used with shared schema feature adding a standard `$id` and adding `$ref: "newId"` in the routes schema.

What do you think?

#### Checklist

- [ ] run `npm run test` and `npm run benchmark`
- [ ] tests and/or benchmarks are included
- [ ] documentation is changed or added
- [ ] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

Hello folks! As you know, we have decided to remove middlewares support from Fastify core and move it to an external plugin, which will be [middie](https://github.com/fastify/middie) and [fastify-express](https://github.com/fastify/fastify-express).
If you want to know more about this decision, take a look at https://github.com/fastify/fastify/issues/1503.

In this pr, we are removing any line of code that handled our middlewares, the request lifecycle has been updated, same for test and documentation.
@Ethan-Arrowood  would you like to work on the type definitions?

All the tests that I have removed from Fastify core will be added to fastify-express and middie, so we can be sure that the behavior of the API will be the same.

Closes: #1503 

#### Checklist

- [x] run `npm run test` and `npm run benchmark`
- [x] tests and/or benchmarks are included
- [x] documentation is changed or added
- [x] commit message and code follows [Code of conduct](https://github.com/fastify/fastify/blob/master/CODE_OF_CONDUCT.md)

https://github.com/fastify/fastify/blob/e22492757660152e270f2092d80d0d17d7756ee6/lib/route.js#L221-L242

Related: https://github.com/fastify/fastify/issues/1598
Maybe it is a nodejs bug, but in handleRequest.js:
function preValidationCallback (err, request, reply) {
  if (reply.sent === true || reply.res.**finished** === true) return
  if (err != null) {
    reply.send(err)
    return
  }
...
function preHandlerCallback (err, request, reply) {
  if (reply.sent || reply.res.**finished** === true) return
  if (err != null) {
    reply.send(err)
    return
  }
...

when handle **HEAD** request, reply.res.**finished** will be true, but reply.res.**writableEnded** is false. 
use .finished would cause client pending because server early returns. 
I changed my node_modules/fastify source, use **writableEnded**, then everything is Ok.

Since .finished is Deprecated in Nodejs  v13.4.0, I think use .writableEnded (if it exists) is the right thing.