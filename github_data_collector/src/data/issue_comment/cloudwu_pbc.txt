wmessage.c里面的pbc_wmessage_integer函数对LABEL_OPTIONAL当要打包的数据与默认值相等时，直接不会pack进去。导致对端无法区分isSet和setDefault两种状态。
Hello, how to write a logical given. For example: 
pbc_message_bool (msg,  "key",   true,  -1);
想在C++调用lua的相关代码，lua里面调用了pbc的相关内容，使用了老板的test.lua作为测试：
extern "C"
{
        #include "lua.h"
        #include "lualib.h"
        #include "lauxlib.h"
};

#include <iostream>
#include <string>

int main()
{
        lua_State* __L = luaL_newstate();

        luaL_openlibs(__L);

        int rst = luaL_dofile(__L, "./test.lua");
        std::string value = lua_tostring(__L, -1);
        std::cout << rst << std::endl;
        std::cout << value << std::endl;
}

g++ test_lua.cpp  -I /export/game/MX-MMO/lua/include /export/game/MX-MMO/lua/lib/liblua64.a -ldl


[game@VM_109_84_centos script]$ ./a.out 
1
### error loading module 'protobuf.c' from file './protobuf.so':
        ./protobuf.so: undefined symbol: lua_checkstack

需要怎么调用呢，谢谢老板！
*(uint8_t *)out = (uint16_t)i->low;
hi, 现在这个pbc还在维护中吗
lua.decode gives the result not the same as origin data 

When I ran the program pattern. A issue occurred, it's a heap use after free issue.
Details:
```
=================================================================
==16823==ERROR: AddressSanitizer: heap-use-after-free on address 0x619000002219 at pc 0x7f115cdc32d5 bp 0x7ffc43fae170 sp 0x7ffc43fad918
READ of size 16 at 0x619000002219 thread T0
    #0 0x7f115cdc32d4  (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x472d4)
    #1 0x41f8f4 in _pbcM_sp_query src/map.c:391
    #2 0x417e53 in _pbcP_get_message src/proto.c:21
    #3 0x4131fa in pbc_pattern_new src/pattern.c:1070
    #4 0x402b8a in main ../test/pattern.c:149
    #5 0x7f115c9d282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #6 0x401678 in _start (/home/mfc_fuzz/pbc/build/pattern+0x401678)

0x619000002219 is located 921 bytes inside of 1032-byte region [0x619000001e80,0x619000002288)
freed by thread T0 here:
    #0 0x7f115ce142ca in __interceptor_free (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x982ca)
    #1 0x4210d2 in _pbcM_free src/alloc.c:14
    #2 0x42151e in _pbcH_delete src/alloc.c:55
    #3 0x4268b3 in pbc_rmessage_delete src/rmessage.c:333
    #4 0x41778f in pbc_register src/register.c:337
    #5 0x402b43 in main ../test/pattern.c:145
    #6 0x7f115c9d282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)

previously allocated by thread T0 here:
    #0 0x7f115ce14602 in malloc (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x98602)
    #1 0x42102e in _pbcM_malloc src/alloc.c:8
    #2 0x4216dc in _pbcH_alloc src/alloc.c:70
    #3 0x4227ff in read_string src/rmessage.c:53
    #4 0x4237b7 in read_value src/rmessage.c:140
    #5 0x425da7 in _pbc_rmessage_new src/rmessage.c:297
    #6 0x424b6f in push_value_array src/rmessage.c:228
    #7 0x425ba2 in _pbc_rmessage_new src/rmessage.c:290
    #8 0x424b6f in push_value_array src/rmessage.c:228
    #9 0x425ba2 in _pbc_rmessage_new src/rmessage.c:290
    #10 0x424b6f in push_value_array src/rmessage.c:228
    #11 0x425ba2 in _pbc_rmessage_new src/rmessage.c:290
    #12 0x4265a6 in pbc_rmessage_new src/rmessage.c:319
    #13 0x41734e in pbc_register src/register.c:307
    #14 0x402b43 in main ../test/pattern.c:145
    #15 0x7f115c9d282f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)

SUMMARY: AddressSanitizer: heap-use-after-free ??:0 ??
Shadow bytes around the buggy address:
  0x0c327fff83f0: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8400: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8410: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8420: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8430: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
=>0x0c327fff8440: fd fd fd[fd]fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8450: fd fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c327fff8460: fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa fa
  0x0c327fff8470: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8480: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
  0x0c327fff8490: fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd fd
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==16823==ABORTING
```
The command line I used is just: ./pattern testcase.
The testcase of this issue has been put at:https://github.com/fCorleone/fuzz_programs/blob/master/pbc/testcase3
#1: A global buffer overflow has been detected
When I was running program pbc, a global buffer overflow has been detected. The input file has been put at :https://github.com/fCorleone/fuzz_programs/blob/master/pbc/testcase1
Details provided by ASAN:
```
=================================================================
==23750==ERROR: AddressSanitizer: global-buffer-overflow on address 0x000000431c61 at pc 0x7f129017220b bp 0x7ffd4f964360 sp 0x7ffd4f963b08
READ of size 1 at 0x000000431c61 thread T0
    #0 0x7f129017220a in __interceptor_strlen (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x7020a)
    #1 0x4093bf in calc_hash src/map.c:35
    #2 0x40d9f7 in _pbcM_sp_query src/map.c:384
    #3 0x417c5e in set_field_one src/bootstrap.c:170
    #4 0x418386 in _pbcB_register_fields src/bootstrap.c:198
    #5 0x404e15 in _register src/register.c:246
    #6 0x40553b in _register_no_dependency src/register.c:296
    #7 0x405b47 in pbc_register src/register.c:329
    #8 0x401d5b in test_des ../test/pbc.c:37
    #9 0x401f25 in main ../test/pbc.c:49
    #10 0x7f128fd5882f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #11 0x401588 in _start (/home/mfc_fuzz/pbc/build/pbc+0x401588)

0x000000431c61 is located 0 bytes to the right of global variable '*.LC5' defined in 'src/bootstrap.c' (0x431c60) of size 1
  '*.LC5' is ascii string ''
SUMMARY: AddressSanitizer: global-buffer-overflow ??:0 __interceptor_strlen
Shadow bytes around the buggy address:
  0x00008007e330: f9 f9 f9 f9 00 00 00 00 02 f9 f9 f9 f9 f9 f9 f9
  0x00008007e340: 00 00 00 00 04 f9 f9 f9 f9 f9 f9 f9 00 00 00 03
  0x00008007e350: f9 f9 f9 f9 00 00 00 00 00 00 f9 f9 f9 f9 f9 f9
  0x00008007e360: 00 00 00 00 00 00 00 04 f9 f9 f9 f9 00 00 00 00
  0x00008007e370: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
=>0x00008007e380: 00 00 00 00 00 00 00 00 00 00 00 00[01]f9 f9 f9
  0x00008007e390: f9 f9 f9 f9 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008007e3a0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008007e3b0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008007e3c0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008007e3d0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==23750==ABORTING
```
When I ran the program addressbook. ASAN found a global buffer overflow:
```
=================================================================
==545==ERROR: AddressSanitizer: global-buffer-overflow on address 0x0000004391a7 at pc 0x00000041ade3 bp 0x7ffcea768b30 sp 0x7ffcea768b20
READ of size 1 at 0x0000004391a7 thread T0
    #0 0x41ade2 in pbc_wmessage_string src/wmessage.c:300
    #1 0x4022a8 in test_wmessage ../test/addressbook.c:78
    #2 0x402500 in main ../test/addressbook.c:105
    #3 0x7f034e49982f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #4 0x401618 in _start (/home/mfc_fuzz/pbc/build/addressbook+0x401618)

0x0000004391a7 is located 0 bytes to the right of global variable '*.LC25' defined in '../test/addressbook.c' (0x4391a0) of size 7
  '*.LC25' is ascii string 'MOBILE'
SUMMARY: AddressSanitizer: global-buffer-overflow src/wmessage.c:300 pbc_wmessage_string
Shadow bytes around the buggy address:
  0x00008007f1e0: f9 f9 f9 f9 05 f9 f9 f9 f9 f9 f9 f9 00 00 f9 f9
  0x00008007f1f0: f9 f9 f9 f9 05 f9 f9 f9 f9 f9 f9 f9 00 07 f9 f9
  0x00008007f200: f9 f9 f9 f9 00 00 02 f9 f9 f9 f9 f9 00 00 00 f9
  0x00008007f210: f9 f9 f9 f9 06 f9 f9 f9 f9 f9 f9 f9 00 05 f9 f9
  0x00008007f220: f9 f9 f9 f9 00 01 f9 f9 f9 f9 f9 f9 00 04 f9 f9
=>0x00008007f230: f9 f9 f9 f9[07]f9 f9 f9 f9 f9 f9 f9 00 00 00 00
  0x00008007f240: 00 07 f9 f9 f9 f9 f9 f9 00 00 00 00 00 00 00 00
  0x00008007f250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  0x00008007f260: 00 00 00 00 00 00 00 00 06 f9 f9 f9 f9 f9 f9 f9
  0x00008007f270: 05 f9 f9 f9 f9 f9 f9 f9 07 f9 f9 f9 f9 f9 f9 f9
  0x00008007f280: 01 f9 f9 f9 f9 f9 f9 f9 05 f9 f9 f9 f9 f9 f9 f9
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Heap right redzone:      fb
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack partial redzone:   f4
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
==545==ABORTING

```
A SEGV signal occurred when running program pbc:
```
=================================================================
==31549==ERROR: AddressSanitizer: SEGV on unknown address 0x000000000000 (pc 0x7fa5a7083746 bp 0x7ffff026f650 sp 0x7ffff026edd8 T0)
    #0 0x7fa5a7083745 in strlen (/lib/x86_64-linux-gnu/libc.so.6+0x8b745)
    #1 0x7fa5a740dc0a  (/usr/lib/x86_64-linux-gnu/libasan.so.2+0x4bc0a)
    #2 0x4016b2 in read_file ../test/readfile.h:9
    #3 0x4019f2 in test_des ../test/pbc.c:12
    #4 0x401e3d in main ../test/pbc.c:49
    #5 0x7fa5a701882f in __libc_start_main (/lib/x86_64-linux-gnu/libc.so.6+0x2082f)
    #6 0x401588 in _start (/home/mfc_fuzz/pbc/build/pbc+0x401588)

AddressSanitizer can not provide additional info.
SUMMARY: AddressSanitizer: SEGV ??:0 strlen
==31549==ABORTING
```