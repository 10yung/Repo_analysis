Fixed https://github.com/javascript-obfuscator/javascript-obfuscator/issues/505
`import.meta` emits an error.
dynamic `import( './module.js' )` also emits an error.

I tried to avoid the issue with `// javascript-obfuscator:disable`, but that didn't help 🐙 

## Current Behavior
throws `Error: Unexpected token import`

## Minimal working example that will help to reproduce issue

1. import.meta

    console.log( import.meta );

2. dynamic import

    import( './module.js' );

3. dynamic import with an attempt to avoid obfuscating

    // javascript-obfuscator:disable
    import( './module.js' );
    // javascript-obfuscator:enable



Is there a way to exclude entire directories instead of files?
I think that it will be good idea to disable these features when **target=node** with throwing exceptions to console:
- debugProtection
- domainLock
- sourceMap
- sourceMapBaseUrl
- sourceMapFileName
- sourceMapMode
When deadCodeInjection enabled:
```
if (_0x5abbc0[_0x58af('0x18a', 'Mg$V')](_0x5abbc0[_0x58af('0x18b', 'TB25')], _0x5abbc0[_0x58af('0x18c', 'gyn0')])) {
                throw new TypeError(_0x4c3a6f[_0x58af('0x18d', '3dd^')]);
            } else {
----->       function _0x556570(_0x2b416c, _0x3ba7ab, _0x5148c6) {
                    var _0x2b0d32 = _0x4c3a6f[_0x58af('0x18e', 'WFsi')][_0x58af('0x18f', 'VjCx')]('|');
                    var _0x21f712 = 0x0;
                    while (!![]) {
                        switch (_0x2b0d32[_0x21f712++]) {
```

I think that it is caused by 'use strict' statement
<!-- Love javascript-obfuscator? Please consider supporting our collective:
👉  https://opencollective.com/javascript-obfuscator/donate -->

<!--- Provide a general summary of the issue in the Title above -->
When I run the sample code below, the result returned is obfuscated code with two instances of `new Function('_FUNCTION_STRING_WILL_BE_HERE_');`.
In my use case, I obfuscate the code and later on replace `'_FUNCTION_STRING_WILL_BE_HERE_'` with other obfuscated code, so having 2 instances of that string really blows up my code and makes it too large.

## Expected Behavior
<!--- Tell us what should happen -->
Only one instance of `new Function('_FUNCTION_STRING_WILL_BE_HERE_');` should be found in the obfuscated code.
## Current Behavior
<!--- Tell us what happens instead of the expected behavior -->
Two instances of `new Function('_FUNCTION_STRING_WILL_BE_HERE_');` are found in the obfuscated code.
## Steps to Reproduce
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
Just run the sample code below, it will obfuscate the code and print out the obfuscated result.

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Obfuscator version used: `0.20.4`, but the issue reproduced in `0.12.0` as well (I didn't check earlier versions)
* Node version used: `v12.6.0`

# Stack trace
<!--- Include stack trace -->

## Minimal working example that will help to reproduce issue
<!--- Include code -->
```javascript
const obfuscatorConfig = {
    "deadCodeInjection": true,
    "deadCodeInjectionThreshold": 1,
    "reservedStrings": ["_FUNCTION_STRING_WILL_BE_HERE_"],
  }
;
const javaScriptObfuscator = require('javascript-obfuscator');
const FUNCTION_STRING_WILL_BE_HERE = "_FUNCTION_STRING_WILL_BE_HERE_";

const code = `function foo() {
  if (true) {
    return;
  }
}

  function boo() {
    if (true) {
      if (true) {
        new Function("${FUNCTION_STRING_WILL_BE_HERE}");
      }
    }
  }
`;

for (let i = 0; i < 10; i++) {
  console.log(`Obfuscation #${i + 1}`);
  let obfuscatedCode = javaScriptObfuscator.obfuscate(String(code), obfuscatorConfig).getObfuscatedCode();

  let _FUNCTION_STRING_WILL_BE_HERE_instanceCount = (
    obfuscatedCode.match(new RegExp(`${FUNCTION_STRING_WILL_BE_HERE}`, "g")) || []
  ).length;

  if (_FUNCTION_STRING_WILL_BE_HERE_instanceCount > 1) {
    console.log(obfuscatedCode);
    process.exit(1);
  }
}
```
**Is your feature request related to a problem? Please describe.**
Now use this tool to obfuscate bin file will throw a error. eg.
```javascript
#!/usr/bin/env node

const process = require('process')
const path = require('path')
const cmd = require('commander')
const pkgInfo = require('../package.json')
```
output:
```bash
Error: Line 1: Unexpected character '#'
> ...#!/usr/bin/env n...
```

**Describe the solution you'd like**
Don't obfuscate this first line for this file will be ok.

**Describe alternatives you've considered**
None

**Additional context**
![image](https://user-images.githubusercontent.com/48240828/71706052-9b245400-2e1d-11ea-98f9-ae0c4f9621cf.png)


![image](https://user-images.githubusercontent.com/48240828/71706061-aa0b0680-2e1d-11ea-960e-76ddeb88ff22.png)

* Obfuscator version used: 0.18.1

It is pretty easy to circumvent the domainLock. Just replace "{data;}else{return;}"  with "{return;}else{return;}"
Hi,

I was thinking if there's an option in Javascript-Obfuscator e.g.

```
*Domain Redirect: {redirect to the selected domain if the code is use in other domain}

*Expire Date: {the obfuscated code will be valid for a period of time after that the code wont work}

```

Wouldn't it be so amazing to have such function?

Please try to add this kind of function if possible. Thanks
The RC4 encoding is incredibly easy to bypass by finding the cache variable. From my testing it appears to always be in the second function, which is declared as

```
var decoder = function(cacheIndexStr, key)
```

The cache can be identified by going to the bottom in the last `if` statement and looking for the last line which should be similar to

```
decoder['cache'][index] = decodedValue
```

If you can identify that line you just have to obtain the first part

```
decoder['cache']
```

or

```
decoder.cache
```

and enter it into a debug console to get the decoded string cache, from there the index in the cache matches the first parameter of the decoder call. After that it is easy to match up all of the strings (and function names) in the code.

Identifying the cache is not at all affected by self defending. Debug protection also does not affect the ability to print the cache, the console will still function when the code has hit a breakpoint.


## Environment
* Obfuscator version used: 1.1.5
* Node version used: 6.9.5