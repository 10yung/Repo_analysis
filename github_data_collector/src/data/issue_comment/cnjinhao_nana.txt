I have nana 1.7.2 on Windows 10 pro and building nanapro on the latest vs2019 fails with the following 4 errors:

> Error	C2440	'return': cannot convert from 'std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>' to 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' (compiling source file ..\..\source\filesystem\filesystem.cpp)	nana	D:\nanapro\downloads\nana\include\nana\filesystem\filesystem_ext.hpp	44	
> Error	C2679	binary '=': no operator found which takes a right-hand operand of type 'std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>' (or there is no acceptable conversion)	nana	D:\nanapro\downloads\nana\source\gui\msgbox.cpp	1250	
> Error	C2440	'return': cannot convert from 'std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>' to 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' (compiling source file ..\..\source\paint\image.cpp)	nana	D:\nanapro\downloads\nana\include\nana\filesystem\filesystem_ext.hpp	44	
> Error	C2440	'return': cannot convert from 'std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>' to 'std::basic_string<char,std::char_traits<char>,std::allocator<char>>' (compiling source file ..\..\source\gui\filebox.cpp)	nana	D:\nanapro\downloads\nana\include\nana\filesystem\filesystem_ext.hpp	44	
> 

when I try to comment out the lines with the errors the build goes well and finishes. But then I cant get to build a couple of samples which throw an error at the filesystem. Kindly advise on the way forward?

vs2019
Windows 7
cmake: 3.16.0
develop分支

错误：
```
CMake Error at build/cmake/select_filesystem.cmake:57 (check_include_file_cxx):
  Unknown CMake command "check_include_file_cxx".
Call Stack (most recent call first):
  CMakeLists.txt:135 (include)
```
57行加上：
`include (CheckIncludeFileCXX)`

解决之后：
```
Looking for C++ include filesystem
Looking for C++ include filesystem - found
Looking for C++ include experimental/filesystem
Looking for C++ include experimental/filesystem - found
C++ Filesystem header:      <filesystem>
Performing Test CXX17_BUILTIN
Performing Test CXX17_BUILTIN - Failed
Performing Test CXX17_FLAG
Performing Test CXX17_FLAG - Failed
CMake Warning at build/cmake/select_filesystem.cmake:115 (message):
  nana requires C++17??, but your compiler does not support it.
Call Stack (most recent call first):
  CMakeLists.txt:135 (include)
```
`__cplusplus < 201703L` 在msvc下似乎要加：
`/Zc:__cplusplus /std:c++latest`

改成：
`set (CMAKE_REQUIRED_FLAGS       "/Zc:__cplusplus /std:c++latest ${CMAKE_CXX_FLAGS}")`
可以正常编译。

参考链接：
https://devblogs.microsoft.com/cppblog/msvc-now-correctly-reports-__cplusplus/
I just complied nana to a static library by following  [this page](http://nanapro.org/en-us/blog/2016/05/an-introduction-to-nana-c-library/). 
Next, I successfully run the first two helloworld demos in the page. Everything was fine until I tried to run the third helloworld demo(pasted below) and got "unresolved external symbol" link errors.
```cpp
#include <nana/gui.hpp>
int main()
{
	using namespace nana;
	form fm;
	drawing{ fm }.draw([](paint::graphics& graph)
		{
			std::string hw = "Hello, world!";
			auto hw_size = graph.text_extent_size(hw); 
			graph.string(
				point{ static_cast<int>(graph.width() - hw_size.width) / 2,
						static_cast<int>(graph.height() - hw_size.height) / 2 }
			, hw);
		});
	fm.show();
	exec();
}
```
> Error	LNK2001	unresolved external symbol "public: struct nana::size __cdecl nana::paint::graphics::text_extent_size(class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)const " (?text_extent_size@graphics@paint@nana@@QEBA?AUsize@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)
Error	LNK2001	unresolved external symbol "public: void __cdecl nana::paint::graphics::string(struct nana::basic_point<int> const &,class std::basic_string<char,struct std::char_traits<char>,class std::allocator<char> > const &)" (?string@graphics@paint@nana@@QEAAXAEBU?$basic_point@H@3@AEBV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z)

I want to add real-time plotting function to nana. Is there any document or demo that using cairo as the backend for plotting?
../../source/gui/filebox.cpp:1594:37: 错误：‘weakly_canonical’不是‘fs’的成员
   : impl_(new implement{ owner, fs::weakly_canonical(init_path).make_preferred(), title, false})

这个接口是C++17才支持的,makefile中std=C++11,编译失败,修改为C++17可以编过

I believe this line triggers a weird problem in `mingw32-g++ 6.3.0` and possibly in other versions too:

https://github.com/cnjinhao/nana/blob/3cb7dfae0245d364bc46851195622727b2c68aeb/source/paint/image.cpp#L173

it is related in a way or another to these vague reports [1](https://gcc.gnu.org/bugzilla/show_bug.cgi?format=multiple&id=48547), [2](https://stackoverflow.com/questions/34124994/is-this-simple-c-program-using-locale-correct), [3](https://trac.filezilla-project.org/ticket/5168). 

Calling `form.icon()` leads there - and in the debugger it looks like the copy constructor of `std::locale` is called on some rubbish on the stack, despite the binary mode being specified, where locale wouldn't be used. Might be related to some name-mangling / ABI changes but as turning off optimizations is a quick fix I did not look into it further.

The bottom line is: it is not an issue in **nana** at all. 

However, what do you think, should we document this behaviour - besides this issue - in a comment somewhere in the source too?
代码是master的，直接打开vc2019下的工程，编译报错
vs版本是16.2.3

1>D:\nana-master\include\nana\filesystem\filesystem_ext.hpp(44,29): error C2440:  “return”: 无法从“std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>”转换为“std::basic_string<char,std::char_traits<char>,std::allocator<char>>” (编译源文件 ..\..\source\filesystem\filesystem.cpp)

1>D:\nana-master\include\nana\filesystem\filesystem_ext.hpp(44,29): error C2440:  “return”: 无法从“std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>”转换为“std::basic_string<char,std::char_traits<char>,std::allocator<char>>” (编译源文件 ..\..\source\gui\filebox.cpp)

1>D:\nana-master\source\gui\msgbox.cpp(1253,3): message :  尝试匹配参数列表“(std::string, std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>)”时

1>D:\nana-master\include\nana\filesystem\filesystem_ext.hpp(44,29): error C2440:  “return”: 无法从“std::basic_string<char8_t,std::char_traits<char8_t>,std::allocator<char8_t>>”转换为“std::basic_string<char,std::char_traits<char>,std::allocator<char>>” (编译源文件 ..\..\source\paint\image.cpp)

filling out the list is nothing complicated.
HANDLE const hFind = FindFirstFileA((LPCSTR)FPUPath, &wfdfpu);
			if (INVALID_HANDLE_VALUE != hFind)
			{
				char num[16];
				int i = 0;
				do
				{
					sprintf(num, "%d", i);
					data_list.at(0).append({ num, &wfdfpu.cFileName[0] });
					listrule.push_back(&wfdfpu.cFileName[0]);
					i++;
				} while (NULL != FindNextFileA(hFind, &wfdfpu));

				FindClose(hFind);
			}
but I can’t find a solution to how to access the contents of the column.
forced to duplicate the list, and get the contents by the index of the selected element already from it
auto index = data_list.selected().at(0);
				for (int i = 0; i < listrule.size(); ++i)
				{
					if (index.item == i)
					{
						long sPos;
						while ((sPos = myStr.find(FPU, 5)) != string::npos)
						{
							myStr.replace(sPos, 5, (string)listrule[i]);
							yes = true;
						}
						break;
					}
				}
I did not find anything on the documentation.
If possible, give a code example to get the contents of the selected column in a row
On Linux at revision 38cdf4779456ba697d7da863f7c623e25d30f650, calling graphics::gradual_rectangle() results in a rectangle that is 1 pixel wider than the given width. For example this rect:

nana::rectangle r(0, 0, 10, 10);

will result in the area [0-11] to be filled horizontally, and [0-10] vertically. From a quick look at source/paint/graphics.cpp:1480, I see that XDrawLine() gets invoked with good_rct.right(). The [documentation](https://linux.die.net/man/3/xdrawline) of XDrawLine() says: *draw a line between the specified set of points (x1, y1) and (x2, y2)* which to me sounds like the coordinates are inclusive on both ends of the line.
Conversely, rect.right is usually exclusive, so that right - left = width (which is consistent with nana's behaviour).
It's a bit confusing but take the example of a 1-pixel wide rect, which would be given as left=0, right=1 (right - left = 1 - 0 = 1 width). Connecting pixels 0 to 1 actually means lighting the pixel at column 0 and the pixel at column 1, thus 2 pixels, which results in the bug I'm describing.
This does not work:
```
 std::vector<nana::inputbox::integer> items;
 items.emplace_back(nana::inputbox::integer{ "foo", 42, 1, 1000, 1 });
```

As no move constructor is available for the nana fundamental types, and all of these contain: 
`std::unique_ptr<implement> impl_;`
