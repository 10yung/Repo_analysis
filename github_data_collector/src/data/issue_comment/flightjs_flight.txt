
Discussed briefly with @phuu and mentioned to @lawnsea.

Right now the `canWriteProtect` function in utils behaves different in debug mode from production/normal mode:
https://github.com/flightjs/flight/blob/master/lib/utils.js#L12

If `debug.enabled` is true, mixins cannot overwrite functions from earlier mixins. Otherwise, later mixins clobber functions from earlier mixins.

This can lead to nasty bugs where a component will behave differently when debugging from production mode.

I'd like to remove the `setWritability` calls entirely from `compose.mixin`, since that's how the library behaves in production. The alternative way to eliminate the discrepancy would be to always write protect, which is much slower.

Thoughts?

Hi there, 

I'm a researcher studying software evolution. As part of my current research, I'm studying the implications of open-sourcing a proprietary software, for instance, if the project succeed in attracting newcomers. **Flight** was in my list. However, I observed that the software history of when the software was developed as a proprietary software was not kept after the transition to Github.

Knowing that software history is indispensable for developers (e.g., developers need to refer to history several times a day), I would like to ask **Flight** developers the following four brief questions:
1. Why did you decide to not keep the software history?
2. Do the _core developers_ faced any kind of problems, when trying to refer to the old history? If so, how did they solve these problems?
3. Do the _newcomers_ faced any kind of problems, when trying to refer to the old history? If so, how did they solve these problems?
4. How does the lack of history impacted on software evolution? Does it placed any burden in understanding and evolving the software?

Thanks in advance for your collaboration,

Gustavo Pinto, PhD
http://www.gustavopinto.org

The mixin API documentation has a section on [overriding defaults](https://github.com/flightjs/flight/blob/v1.x/doc/mixin_api.md#overriding-defaults-in-a-mixin):

> The attributes method is available to both component and mixin modules. When used with mixins it will not overwrite attributes already defined in the component module.

My impression was that default attributes defined in components would never be overridden by default attributes defined in mixins. However, the opposite seems to be the case for me:

``` javascript
module.exports = withCookies;

function withCookies() {
  this.attributes({
    wantsCookies: false
  });
}
```

``` javascript
module.exports = flight.component(cookieMonster, withCookie);

function cookieMonster() {
  this.attributes({
    wantsCookies: true
  });

  this.after('initialize', function initialize() {
    console.log(this.attr.wantsCookies); // false
  });
}
```

If I want the component's default attribute to take precedence over the mixin's, I need to change the order they are passed into `flight.component()`:

``` javascript
module.exports = flight.component(withCookie, cookieMonster);

function cookieMonster() {
  this.attributes({
    wantsCookies: true
  });

  this.after('initialize', function initialize() {
    console.log(this.attr.wantsCookies); // true
  });
}
```

Is this the intended behavior? If so, can we clarify this in the documentation?

While writing some tests, I noticed that flight components can still fire off events or take other actions on their `node` after they're town down, which seems like something that shouldn't be possible.

In my particular case, a component had an in-flight XHR that completed after the end of the test and wound up affecting the next test (even though I'm careful to tear down all components after each test). I fully understand that a well-behaved component should keep track of all its timers/xhrs/callbacks and clean them up before/after `teardown` is called, but I also think this is something that people could easily forget to do.

Explicitly setting `node` and `$node` to `null` (or perhaps setting them to a new DOM element that isn't in the document) would go pretty far towards neutering a component's ability to accidentally do things after teardown.

So I'm looking to switch from a in-house framework to Flight, they're very similar except that Flight is obviously supported by many more developers. I had a question about attributes though.

In our in-house solution we define defaultAttributes as:

```
{ events: {
    'bob': 'blahblah',
    'bill': 'bloobloo' },
  selectors: {
    'anne': 'meepmeep',
    'ariel': 'moopmoop' },
  ...
}
```

as opposed to flight which suggest defining the defaultAttributes as:

```
{ 'bobEvent': 'blahblah',
  'billEvent': 'bloobloo',
  'anneSelector': 'meepmeep',
  'arielSelector': 'moopmoop',
  ...
}
```

We found that the Flight standard is very verbose. and results in a lot of repetition in our code. Is this really the best practice? We've thought about creating a mixin which will use `'selector.'` for `.select()` but that seems really hacky and I would rather not have to do that.
Also it looks like if I were to create a mixin I would also have to do it for `.on` as well. :\

Thoughts?

P.S. Posted this same question on Gitter but no replies, sorry for the double post.

As mentioned [here](https://groups.google.com/forum/#!topic/twitter-flight/toD3i89RPHM), it would be nice to unbind events of specific child elements inside components, like:

``` javascript
this.on('click', { 
  buttonSelector: this.calculateShippingPrice,
  inputSelector: this.calculateShippingPrice 
});

this.off('buttonSelector', 'click'); // <--- this
```

Currently the documentation for this.on reads

> Optional. Specify the DOM node(s) that should listen for the event. Defaults to the component instance's node value.

I've made the mistake to believe that the selector (if it's a string) is interpreted as relative to this.$node. Please make it clear that it's a global selector.

I know the browser dev tools are slowly coming up to speed on this stuff, but I'd love to be able to break on a certain event.

Something like:

```
DEBUG.events.breakOn('uiTweetFaved');
```
