
mozbuild.configure.options.InvalidOptionError: --disable-shared-js is not available in this configuration
make: *** No targets specified and no makefile found.  Stop.
Thank you for this great project. Is there any way to use it on scale? `(--networkMaster=host:port)`
and how slaves collaborate with master to avoid redundant work? Also, it does not use all the cores in the system, is there any specific switch to do that?
After applying [webkit.patch](https://github.com/googleprojectzero/fuzzilli/blob/8d36345b5363689025e04cb3970cb86cbc04eb6b/Targets/JavaScriptCore/webkit.patch) to the WebKit commit [d6913c0043553080fa46caa49041e0b137db38a1](https://github.com/WebKit/webkit/tree/d6913c0043553080fa46caa49041e0b137db38a1) and running [fuzzbuild.sh](https://github.com/googleprojectzero/fuzzilli/blob/8d36345b5363689025e04cb3970cb86cbc04eb6b/Targets/JavaScriptCore/fuzzbuild.sh), I receive a bunch of "invalid section group" errors from clang.

Any ideas?

Full JSC build log: https://gist.github.com/GarrettVD/8d397d1d125b3d99cb49d253a51aed1f
I'm trying to get fuzzili running on a CentOS machine but I'm running into issues due to the usage of Swift. Are there any recommendations for how I can get this running?
As with any fuzzer, Fuzzilli can trigger crashes that do not reproduce later on. There can be various reasons for that, e.g. memory pressure of the system during the time of the crash or simply non-deterministic behaviour of the target. As JavaScript engines are quite complex, it is expected that there will be non-reproducible crashes during fuzzing.

It would, however, be nice to have some more information about how a sample originally crashed so root-causing of non-reproducible crashes becomes easier/possible. This could e.g. be done by adding a commandline flag that, when enabled, causes Fuzzilli to record stdout + stderr of the target during fuzzing and include that in the crashing testcases. That way, it should at least be somewhat clear how the sample originally crashed.

There could also be a bug in Fuzzilli that causes it to incorrectly treat some files as crashes under some circumstances. One approach to debug this would be to comment out this line: https://github.com/googleprojectzero/fuzzilli/blob/2e7c967d171a5059aff6f9ab8df6be0e36216018/Sources/libreprl/libreprl.c#L106 and thus log stderr of the target during fuzzing. That should show whether the target actually crashed and roughly how it crashed (e.g. with an assertion failure).
During long fuzzing sessions, Fuzzilli may eventually use a considerable amount of memory (multiple gigabytes as reported by e.g. `top`). This can then quickly become a problem if not enough memory is left for the target engine (which also tend to require quite a bit of memory). This issue is meant to track efforts to reduce the memory consumption of Fuzzilli.

I did some quick tests on macOS using the `leaks` tool and xcode's memory graph viewer and it doesn't immediately look like memory is being leaked. The `heaps` tool reports quite a bit of memory usage from the data structures associated with programs (instructions, variables, operations), though so it is probably worth optimizing them. It should also be noted that the sharing of Operation instances doesn't currently happen for imported programs, which might be another thing worth optimizing. However, further investigation of the main factors contributing to the high memory usage are also still necessary. 

 
Currently, variable types are only computed statically with the AbstractInterpreter. This is generally pretty conservative and at times incorrect as the execution semantics of FuzzIL and JavaScript differ slightly (e.g. FuzzIL has no concept of prototypes).
As such it would be nice to be able to also collect precise variable types at runtime, e.g. for programs that are afterwards stored into the corpus.

This will require at least the following:

- A (lightweight) implementation of the type system in JavaScript
- A way to attach existing type information to a program
- A way to instrument programs so that type information is collected and afterwards send to the fuzzer process via the fuzzilli output channel 
Similar to the [NetworkSync module](https://github.com/googleprojectzero/fuzzilli/blob/master/Sources/Fuzzilli/Modules/NetworkSync.swift) but over some IPC channel instead of TCP sockets.
The best way to fix https://github.com/googleprojectzero/fuzzilli/blob/d201a9a376a88eeadf9a349dddabf6444c7e01f2/Sources/Fuzzilli/Fuzzer.swift#L178, which currently causes some warnings to be printed during mostly normal operations, is probably to somehow split up minimization into multiple small steps. Ideally each step would only be a single execution. Alternatively, each minimizer could run as its own task.