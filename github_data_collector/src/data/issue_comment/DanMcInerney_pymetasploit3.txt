When using msgpack 1.0.0rc1, I receive the following error message:

```
File "/home/usr/.virtualenvs/msgpack/lib/python3.7/site-packages/pymetasploit3-1.0-py3.7.egg/pymetasploit3/utils.py", line 44, in decode
  File "msgpack/_unpacker.pyx", line 195, in msgpack._cmsgpack.unpackb
ValueError: int is not allowed for map key
```
Apparently there are some [breaking changes with msgpack 1.0](https://pypi.org/project/msgpack/).

I came across this issue because my project uses setup tools and includes "pymetasploit3" in the requirements.txt - and more to the point, setuptools **allows for release candidates** while pip does not.

Here is an example of a message that failed to decode with msgpack1.0.0rc1:

```
$ cat poc.py 
#!/usr/bin/env python3.7

import msgpack

msg = b"\x81\x01\xde\x00\x11\xc4\x04type\xc4\x0bmeterpreter\xc4\x0ctunnel_local\xc4\x13192.168.30.200:4444\xc4\x0btunnel_peer\xc4\x12192.168.30.99:3007\xc4\x0bvia_exploit\xc4#exploit/windows/smb/ms17_010_psexec\xc4\x0bvia_payload\xc4'payload/windows/meterpreter/reverse_tcp\xc4\x04desc\xc4\x0bMeterpreter\xc4\x04info\xc4\x19NT AUTHORITY\\SYSTEM @ HMI\xc4\tworkspace\xc4\x07default\xc4\x0csession_host\xad192.168.30.99\xc4\x0csession_port\xcd\x01\xbd\xc4\x0btarget_host\xad192.168.30.99\xc4\x08username\xc4\x04root\xc4\x04uuid\xc4\x08qoudbsk9\xc4\x0cexploit_uuid\xc4\x08bxohlxve\xc4\x06routes\xa0\xc4\x04arch\xc4\x03x86\xc4\x08platform\xa7windows"

print(msgpack.unpackb(msg))
$ ./poc.py 
Traceback (most recent call last):
  File "./poc.py", line 7, in <module>
    print(msgpack.unpackb(msg))
  File "msgpack/_unpacker.pyx", line 195, in msgpack._cmsgpack.unpackb
ValueError: int is not allowed for map key
```

**WORKAROUND**

In my project's requirements.txt I added:

```
msgpack==0.6.2
pymetasploit3
```

But eventually pymetasploit3 will need to be updated to work with msgpack 1.0.



Hi,
First of all, thanks for your python client, it's amazing.
I have encountered a problem when trying to set ACTION option, it isn't listed on msfrpc client neither, however, if you inspect the ruby code, it can be set using the key ACTION.
If you try to do the same in python, it fails (because it isn't listed in options) during key validation.

```
def _run_auxiliary(mod, opts)
    uuid, job = Msf::Simple::Auxiliary.run_simple(mod, {
      'Action'   => opts['ACTION'],
      'RunAsJob' => true,
      'Options'  => opts
    })
    {
      "job_id" => job,
      "uuid" => uuid
    }
  end
```
> 
>  \>\> opts = {'RHOSTS' => '10.10.0.4', 'ACTION' => 'KEYS'}
> => {"RHOSTS"=>"10.10.0.4", "ACTION"=>"KEYS"}
> \>\> rpc.call('module.execute', 'auxiliary', 'scanner/ssl/openssl_heartbleed', opts)
> => {"job_id"=>3, "uuid"=>"a9otl7jb"}
> \>\> rpc.call('job.info', 3)
> => {"jid"=>3, "name"=>"Auxiliary: scanner/ssl/openssl_heartbleed", "start_time"=>1577799485, "datastore"=>{"WORKSPACE"=>nil, "VERBOSE"=>false, "RPORT"=>443, "SSL"=>false, "SSLVersion"=>"Auto", "SSLVerifyMode"=>"PEER", "SSLCipher"=>nil, "Proxies"=>nil, "CPORT"=>nil, "CHOST"=>nil, "ConnectTimeout"=>10, "TCP::max_send_size"=>0, "TCP::send_delay"=>0, "RHOSTS"=>"10.10.0.4", "THREADS"=>1, "ShowProgress"=>true, "ShowProgressPercent"=>10, "TLS_CALLBACK"=>"None", "TLS_VERSION"=>"1.0", "MAX_KEYTRIES"=>50, "STATUS_EVERY"=>5, "DUMPFILTER"=>nil, "RESPONSE_TIMEOUT"=>10, "LEAK_COUNT"=>1, "HEARTBEAT_LENGTH"=>65535, "XMPPDOMAIN"=>"localhost", "ACTION"=>"KEYS", "RHOST"=>nil}}

>  root@3d6bd6d80ad4: \~/.msf4/loot# ls
20191231133816_default_10.10.0.4_openssl.heartble_617683.txt


Edit: Looks like it's possible to get ACTIONS available for auxiliary/post modules calling rpc.info, being able to get that information from python would be great.
```
  def rpc_info(mtype, mname)
    ...
    ...
    if m.type == 'auxiliary' || m.type == 'post'
      res['actions'] = {}
      m.actions.each_index do |i|
        res['actions'][i] = m.actions[i].name
      end

      if m.default_action
        res['default_action'] = m.default_action
      end
     ...
     ...
    res
  end
```

Add an encoding arguments to MsfRpcClient constructor, to fix UnicodeDecodeError exception in some OS. Such as Chinese version of windows.
When session died automatically `rexploit` and write loop for commands ex: `record_mic -d 15`
If 'RHOST' is set for an exploit even then it shows missing_required 'RHOSTS' while in Metasploit when RHOST is set RHOSTS is not required. how to cater this while using exploit.required_missing?
I want to get the exploit uuid which in case of exploit.execute is following:
```

>>> exploit.execute(payload='cmd/unix/interact')
{'job_id': 1, 'uuid': '3whbuevf'}
>>>
```

but when running with output, that is

`(client.consoles.console(cid).run_module_with_output(exploit, payload='cmd/unix/interact'))`

 there is no such type of dictionary available.
What i actually want to do is match the 'uuid' (as given by `exploit.execute()`) with the 'exploit uuid' with any of the available sessions from sessions list `client.sessions.list`

for example: in case of `exploit.execute()` :


```
>>> exploit.execute(payload='cmd/unix/interact')
{'job_id': 1, 'uuid': '3whbuevf'}
>>>

>>> client.sessions.list
{1: {'info': '', 'username': 'jsmith', 'session_port': 21, 'via_payload': 'payload/cmd/unix/interact',
'uuid': '5orqnnyv', 'tunnel_local': '172.16.14.1:58429', 'via_exploit': 'exploit/unix/ftp/vsftpd_234_backdoor',
'exploit_uuid': '3whbuevf', 'tunnel_peer': '172.16.14.145:6200', 'workspace': 'false', 'routes': '',
'target_host': '172.16.14.145', 'type': 'shell', 'session_host': '172.16.14.145', 'desc': 'Command shell'}}
>>>
```

the 'uuid' of `exploit.execute()` and 'exploit_uuid' of session:1 from `client.sessions.list` matches.

That is what i want to do with `(client.consoles.console(cid).run_module_with_output(exploit, payload='cmd/unix/interact'))`

