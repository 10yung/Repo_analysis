Hi @patr0nus,

First of all, this project is a god given to all of us because I'm so sick of shipping GUIs that has a single button and 80+ MBs when packed. Electron really is great but rarely practical. I really appreciate the work you have done. Your framework is the only functional lightweight one that's out there.

But I'm having so much trouble not being able to debug either of the instances (Webview and Node). I'm on Windows 10 build 18363. The app simply doesn't show up on devtools. 

![image](https://user-images.githubusercontent.com/6711514/71314601-30fcce00-2471-11ea-882c-ff7c2123cbab.png)

And for the node process, `--inspect` doesn't work and there's no way to attach a debugger or get any kind of an output. I saw somebody else have mentioned this in https://github.com/patr0nus/DeskGap/issues/22#issuecomment-543647164 too. Trying to get this very urgent project up and running but can't go on blindly. I also have no idea how to have other node modules running when distributed inside the app directory.

I would really love it if you can give me some insight on how to get this up and running.

It'll would be great if this lib support Webview2 :)
https://docs.microsoft.com/en-us/microsoft-edge/hosting/webview2
Could you implement handleOpenURL on mac?

In order for your app to respond when it receives a custom URL call, you must implement the application:handleOpenURL method in the application delegate class:
```
- (BOOL)application:(UIApplication *)application handleOpenURL:(NSURL *)url {
  callbacks_.onOpenURL(url.absoluteString);    
  return YES;
}
```

The rest of the coding is above my paygrade ;)

I am testing out DeskGap for a new project, but really require fullscreen support. I can't see any mention of this on the site (API, etc.). Is it possible to achieve this?
What would it take to port the [global shortcuts](https://electronjs.org/docs/api/global-shortcut) from electron to deskgap?

Hi,
I'm trying to figure out how `asyncNode` is supposed to be used. I'd like to call node code (that returns a result) from the webview side. I guess one option would be to use the ipc mechanism and build some sort of map of request ids on top of that (similar to [electron-promise-ipc](https://www.npmjs.com/package/electron-promise-ipc)), but it looks like `asyncNode` may have been designed to solve this exact problem, except I can't figure out how to use it. Any tips / examples?

What I'm looking for is something like this:
**On the node.js side**
```ts
function coolNodeFunction(argument: string): Promise<string> {
  return Promise.resolve('from node');
}
```

**On the webview side**
```ts
let result = await magic.invoke('coolNodeFunction', 'argument from web');
```

I've tried various combinations of ```deskgap.asyncNode.getGlobal().invoke()``` to no avail.

Thank you!
I tried using 
```js
new BrowserWindow({ icon: 'favicon.ico' });
```
I tried with `.ico`, `.png` and `.icns`, too.
I even tried to set it using `.setIcon()`.
Does anyone know how to make it show a custom icon?

(Note: using Windows 10)
Hi @patr0nus and thanks for amazing tool which we love to see and use.

I'm built [app](https://github.com/dalisoft/appsocket) with DeskGap, but can't make it Name of app work.

Can you help me with this?

Also, is there any guide to built, distrubute (DMG convert)?

_Note: It's my first app and i decided to use DeskGap instead of Electron because of app size and performance, so, please don't just leave or close issue as is_
"Can't find variable: require" is displayed in the bowser javascript console when trying to use fs native node library with :

`var fs = require('fs');`

Any idea to solve the issue ?