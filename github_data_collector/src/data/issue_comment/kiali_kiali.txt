fixed #2111 

Because an ingress into a cluster can vary wildly in their desired configuration, a new setting in the Kiali CR is being introduced to allow the user to override complete portions of the ingress resource configuration (Ingress on Kubernetes and Route on OpenShift).

See the new setting in the Kiali CR for an example and the docs commenting the new setting.

For users that use these overrides, they are required to make sure the new configuration is valid - the operator will just blindly copy those settings into the resource - no validation is performed other than the validation the k8s master performs when it applies the new config to the resource.

@tillig can you see if this provides what you need? Based on your comments in the issue, you will want something like this in your Kiali CR:

```
spec:
  deployment:
    override_ingress_yaml:
      metadata:
        annotations:
          kubernetes.io/ingress.class: nginx
      spec:
        tls:
          ...your tls settings...
        rules:
        - host: your.host.here
          http:
            paths:
            - path: /kiali
              backend:
                serviceName: kiali
                servicePort: 20001
```
I think it is a bit weird to see the "Istio Config status" text and "success" icon on namespaces where istio isn't enabled (no sidecar on any of the pods) :

![Capture d’écran de 2020-01-17 10-02-40](https://user-images.githubusercontent.com/2153442/72598766-c2484e80-3910-11ea-8bbc-f88cee11112e.png)

Maybe we should either show a "not available" grey icon, or maybe just remove the whole text / icon in this situation?

cc @xeviknal @lucasponce 
**Is your feature request related to a problem? Please describe.**

We have a Kubernetes cluster with both the Istio ingress and nginx ingress enabled. The nginx ingress has a specific IP address and routes traffic based on host header along with IP address.

The ingress configuration in the Kiali CR only allows me to enable or disable the ingress; I have no ability to add a `host` entry to the ingress, specify that the ingress should be nginx vs Istio (e.g, `kubernetes.io/ingress.class: nginx`), or provide any other guiding annotations. You also can't specify any `tls` settings to get LetsEncrypt or `cert-manager` into the mix.

**Describe the solution you'd like**

Ability to control the ingress (`annotations`, `spec.rules.host`, `spec.tls`, etc.) at a more granular level; or more guidance on writing a custom ingress definition - where to get the service name/port, where to deploy the ingress, what things in the CR YAML correspond to things that show up in the ingress.

**Describe alternatives you've considered**

I'm currently exporting the existing ingress, setting the CR to disable the ingress, and deploying a custom ingress that's based on what the operator generates but has proper markup for our environment.

Fixes https://github.com/kiali/kiali/issues/2102
In a case that we have problems getting information from a service

Use Case that we found
**/api/threescale/namespaces/bookinfo/services/productpage**

the information returned is 
```json
{"error":"rules.config.istio.io \"threescale-bookinfo-productpage\" not found"}
```

Problems found:

1. We can't see this error in Kiali-Ui messageCenter. So the user can't know what is happening.
2. Should this error block all the information about the service? Can we create somekind of "error_found" in the json and return the information that we found?
3. ErrorTraces Icon is hidden because there is not information about them because kiali return this information in the same call and the user could see error Traces in the chart.

Impact https://github.com/kiali/kiali-ui/pull/1577

cc @xeviknal @lucasponce @jotak @hhovsepy 
** Describe the change **
1. Removing all the outdated validations that Galley takes care of.
2. Adding one warning validation for the following scenario:

```yaml
kind: VirtualService
apiVersion: networking.istio.io/v1alpha3
metadata:
  name: reviews
  namespace: bookinfo
spec:
  hosts:
    - reviews
  http:
    - route:
        - destination:
            host: reviews
            subset: v1
          weight: 80
```
This is the scenario where there is only one destinationRouteWeight but there is a weight different to 100. In this case, Istio assumes the weight to be 100. Independently the value set in the weight field.

The validation message is the following:
`The weight is assumed to be 100 because there is only one route destination`

** Issue reference **
Relates to https://github.com/kiali/kiali/issues/1528

** Screeeenshot **
![Screenshot of localhost_8000_api_namespaces_bookinfo_istio_virtualservices_reviews_validate=true](https://user-images.githubusercontent.com/613814/72531503-ea34a500-3871-11ea-8da8-221221897c5c.jpg)


Spans in metrics page have a span id and (iirc) trace id associated with. So, when clicking on it, we could open the Traces page focused on that trace id.

What I'm unsure, is if it's ok to abruptly switch to trace view (might be too abrupt), or if we should display a contextual menu with a "View trace" option.

I think when Alberto's work is done, this is the next logical step in our Metrics & Traces work

cc @lucasponce @aljesusg 

Related to https://github.com/kiali/kiali-ui/pull/1416

When auto enabling display options on graph as needed by the desired graph find/hide expression, there is a message generated to user explaining about auto enabling those options.
This seems to be the correct approach, except that the message is displayed in red and with "X", and it should be instead informational.
The  version of k8s cluster  is v1.11.1 and istio is v1.4.0. After I installed istio,I try to get graph and the result as follows:
![image](https://user-images.githubusercontent.com/28983979/72511200-b5324d80-3885-11ea-91ee-9ca29fa2c5f0.png)

the logs show 
![image](https://user-images.githubusercontent.com/28983979/72511305-e9a60980-3885-11ea-8bc8-950fa2bc780c.png)

but when the k8s is v1.15.3,everything is ok. If it is the version issue?  
 

Happens on:

Kiali UI 1.13.0 (3318b1a9a053383333fb5e3c4b8f090497403f95)
Kiali Server v1.13.0-SNAPSHOT (31845b6f8dec9aedca85c8f3d085220bba7270fd)
Istio 1.4.3


Create the following objects

`apiVersion: "networking.istio.io/v1alpha3"
kind: "DestinationRule"
metadata:
  name: "default"
  namespace: "bookinfo"
spec:
  host: "*.bookinfo.svc.cluster.local"
  trafficPolicy:
    tls:
      mode: ISTIO_MUTUAL

apiVersion: "authentication.istio.io/v1alpha1"
kind: "MeshPolicy"
metadata:
  name: "default"
  namespace: "istio-system"
spec:
  peers:
  - mtls:
      mode: STRICT`

The expected error message on MeshPolicy is "'Mesh-wide Destination Rule enabling mTLS is missing'".
Error icon is shown in config list, but not in YAML editor.

![Screenshot from 2020-01-15 17-13-46](https://user-images.githubusercontent.com/604313/72451505-5359e100-37bc-11ea-8a3c-df2c596d6498.png)
![Screenshot from 2020-01-15 17-14-03](https://user-images.githubusercontent.com/604313/72451506-5359e100-37bc-11ea-8572-693b1b184e92.png)
