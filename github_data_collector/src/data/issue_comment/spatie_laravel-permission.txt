Hi there,

It appears that scopeRole fires off a query to check each string or int that has been passed to it, scopeWhereRole aims to reduce these additional queries by only using the query builder.

Examples:
`App\User::role(['User', 'Admin'])->get();` will run the following queries:

``select * from `roles` where `name` = 'User' and `guard_name` = 'web' limit 1``
``select * from `roles` where `name` = `Admin' and `guard_name` = 'web' limit 1``

``select * from `users` where exists (select * from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `users`.`id` = `model_has_roles`.`model_id` and `model_has_roles`.`model_type` = 'App\User' and (`roles`.`id` = 1 or `roles`.`id` = 2)) and `users`.`deleted_at` is null``

While `App\User::whereRole(['User', 'Admin'])->get();` will only run the one query:
``select * from `users` where exists (select * from `roles` inner join `model_has_roles` on `roles`.`id` = `model_has_roles`.`role_id` where `users`.`id` = `model_has_roles`.`model_id` and `model_has_roles`.`model_type` = 'App\User' and ((`roles`.`name` = 'User' and `roles`.`guard_name` = 'web') or (`roles`.`name` = 'Admin' and `roles`.`guard_name` = 'web'))) and `users`.`deleted_at` is null``

It seems that the reason for the additional ``select * from `roles` where ...`` queries in the original scopeRole function are because it does a check to see if the role exists or not, if the role is not already an `instanceof Role` then it will query to see if the int (id) or string (name) are roles that actually exist, if any do not exist then an exception will be triggered.

Personally I'd prefer that scopeRole worked in the way that this PR has for scopeWhereRole, as I'd be willing to lose the exception in favour of reducing additional queries, however I understand not everyone would want to, hence opting to instead call the function scopeWhereRole.

Thanks.
Updated `scopePermission()` in trait `HasPermissions.php`
- faster/prettier than multiple orWhere
- faster/prettier than multiple ```orWhere```
Hello, I'm working on integrating auth0 into my project but I want to manage roles/perms at the DB level. so I've created a customRepository to store user profile in my local database. 

but when trying to use Spatie can middleware I have this error thrown 

```
Symfony\Component\Debug\Exception\FatalThrowableError
Argument 1 passed to Spatie\Permission\PermissionRegistrar::Spatie\Permission\{closure}() must implement interface Illuminate\Contracts\Auth\Access\Authorizable, instance of Auth0\Login\Auth0User given, called in /code/vendor/laravel/framework/src/Illuminate/Auth/Access/Gate.php on line 487
```

I understand that the auth0user model doesn't implement the authorizable contract.

Question is, how can I work around this limitation? my first instinct was to bind the authorizable contract to the auth0user model but that didn't work.

```
$this->app->bind(
            \Illuminate\Contracts\Auth\Access\Authorizable::class,
            \Auth0\Login\Auth0User::class
        );
```

Help would be greatly appreciated
Hi there. I have a database structure as follows:

![image](https://user-images.githubusercontent.com/6769984/71972161-0a29f000-3204-11ea-9ce3-fedd398644d7.png)

I have web guards all setup and working fantastically. I'm using them fantastically in my web routes:

![image](https://user-images.githubusercontent.com/6769984/71972268-39d8f800-3204-11ea-8c24-c391ebc93c64.png)

However, when trying to use them in API's they do not function . Every user is blocked, even a super admin. (assuming because in the database the roles are listed as "web" only? This is an example of my API route file...

![image](https://user-images.githubusercontent.com/6769984/71972338-5aa14d80-3204-11ea-90cd-921ce1b76819.png)

What is the best way to do this? Is there a way to tell it to use web permissions for APIs? Or am I missing something silly here?


> v2 guard lookup currently looks to the model's guard_name property, with fallbacks down to finally the first available guard in your config array of guards (not the one listed as "default"). Null doesn't disable this lookup.
> So, wherever you don't specify a guard when doing a permission check, it does the lookup according to that pattern I just described.

Shouldn't it check the guard of logged in user?
like this
```
function activeGuard()
{
    foreach (array_keys(config('auth.guards')) as $guard) {

        if (auth()->guard($guard)->check()) return $guard;
    }
    return null;
}
```

How can I check based on the guard of user?

_Originally posted by @Daniyal-Javani in https://github.com/spatie/laravel-permission/issues/892#issuecomment-569771727_
Hi
I add choosing specific guard for middleware.
i had really needed it.
Hi, thanks for this awesome package,

i have a problem that is:

i have multiple guards [ 'web', 'admin' ]

in Admin Model i have 
`protected $guard_name = 'admin';`

and i have guard name for each permission in
> permissions table

like the image below 
![p](https://user-images.githubusercontent.com/15928500/69720519-78669780-111b-11ea-8a1d-148146662e5f.png)

the problem is when use @can directive like: 
`@can('admin.users.view')`
it doesn't work, not show the code that in it, even if this admin is Super Admin or Admin

also when use 
`@can('admin.users.view', 'admin')`
it doesn't work also

but when use 
`@if(auth('admin')->user()->can('admin.users.view'))`
it works fine

how i can use @can only because is simple for code.

thanks in advance
https://github.com/spatie/laravel-permission/blob/753ce00d91bb2b5a2f03ecb7d1740de29c0a24fa/src/PermissionRegistrar.php#L131

For cases 200+ permissions and 100+ permission checks for request usage of `\Illuminate\Support\Collection::where` utilize up to 20% of CPU.

Also why clone `$permissions`?

https://github.com/spatie/laravel-permission/blob/753ce00d91bb2b5a2f03ecb7d1740de29c0a24fa/src/PermissionRegistrar.php#L128

Some patch reduces CPU consumption by 20% for large complex applications

```patch
Index: vendor/spatie/laravel-permission/src/PermissionRegistrar.php
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- vendor/spatie/laravel-permission/src/PermissionRegistrar.php	(date 1574166891415)
+++ vendor/spatie/laravel-permission/src/PermissionRegistrar.php	(date 1574166891415)
@@ -136,11 +136,12 @@
             });
         }
 
-        $permissions = clone $this->permissions;
+        $permissions = $this->permissions;
 
+        $permissions = $this->cache->remember(self::$cacheKey . implode(',', $params) . implode(',', array_keys($params)), self::$cacheExpirationTime, function () {
         foreach ($params as $attr => $value) {
             $permissions = $permissions->where($attr, $value);
-        }
+        }});
 
         return $permissions;
     }

```
Recently I have updated laravel to 6.0 and spatie/laravel-permission package to 3.2 version. And found out that permissions starts working very slow.
If it's more than 50 permission and 2 roles for them it could even fail by execution time error within 30 secons.
So I started to test it only with 4 permission and 1 role.
They process for 3500ms on average (that's not a good result for 4 perm).
I tried to change cache driver, no matter it is file or redis. Works the same.
So I started to downgrade package step by step throug the releses list and found out that on version 2.34 it works fine, same 4 permissions process only for 250ms (that's 14 times faster).
When I upgraded to 2.35 the issue backed to 3500ms.

So I think the problem somewhere in 2.35 release. Can you help me? It becames very critical for my project and I can't back to 2.34 because I've updated laravel as well