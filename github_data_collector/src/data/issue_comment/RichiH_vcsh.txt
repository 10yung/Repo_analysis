See #270 and the log messages for details.

@okapia FYI

Compare:

https://github.com/RichiH/vcsh/commits/master/_vcsh
https://github.com/zsh-users/zsh/commits/master/Completion/Unix/Command/_vcsh

First of all, they are functionally different.  At least `vcsh foo add <TAB>` works in the former but not in the latter.

The latter has only one commit that isn't in the former: https://github.com/zsh-users/zsh/commit/13fc579343b24d298fb8905933b6000d7fcda114#diff-9394f5dc325d8a13da62fcaf4172a892  That commit unfortunately mixes functional and non-functional changes, but I think the important parts of it are two: adding `_call_program` and setting `ret`.  So I suggest to cherry-pick those two changes and then to remove `_vcsh` completion from zsh upstream.


I use vcsh in conjunction with zsh and vcs_info and I'd like to share the following recipe:

```zsh
zstyle -e ':vcs_info:git+post-backend:*' hooks 'reply=( ${${(k)functions[(I)[+]vi-git-post-backend*]}#+vi-} )'
+vi-git-post-backend-vcsh() {
  if git config --get 'vcsh.vcsh' > /dev/null; then
    hook_com[branch]+="%f/vcsh${GIT_DIR:+":${${GIT_DIR:t}%.git}"}" # %f ends coloring
  fi
}
```

With this recipe, after doing `vcsh enter foo`, the vcs_info prompt says `(git)-[master/vcsh:foo]-` rather than `(git)-[master]-`.
This adds the `locate` subcommand, which takes an existing file and
returns the repository that's tracking the file.

Signed-off-by: martin f. krafft <madduck@madduck.net>
```
lotus:~/.gitignore.d% cat .gitignore
- *.bak
lotus:~/.gitignore.d% vcsh list-untracked -a
awesome.bak
[â€¦]
```
Arguably, this should not happen, since a file that's being per-directory ignored from Git will almost never be considered a trackable file, and thus it makes no sense to include it in the output of untracked files.
Other popular dotfiles managers have the [dotfile-manager](https://github.com/topics/dotfile-manager) and other handy tags on their project. For example:

https://github.com/TheLocehiliosan/yadm
https://github.com/andsens/homeshick

It would be helpful if this project could add some of those too to make be more discoverable.
I have set a global ignore file. It is honored by normal repos:

```
$ git check-ignore --verbose --no-index --non-matching '.#sth'
/Users/evar/.gitignore_global:14:.\#*	.#sth
```

But not by `vcsh`:

```
$ vcsh .shells check-ignore --verbose --no-index --non-matching ~'/scripts/zsh/.#load-first.zsh'
::	/Users/evar/scripts/zsh/.#load-first.zsh
```
I tried creating the file at `~/.gitattributes.d/REPO_NAME`. I also did `export VCSH_GITATTRIBUTES=y` in my `.zshenv`. But it seems this doesn't work? Do I need to change sth in `~/.config/vcsh/repo.d/REPO_NAME.git/`?
Hi,

When cloning / manipulating repos that have files in protected directories, `sudo` is required.

However, the environment must be preserved or vcsh will add configuration files into /root.

I figure we can save someone some potential future grief by mentioning the need for `sudo -E` in such cases.

Not sure what part of the docs you would want to stick that into so I haven't done a PR yet.
I've just taken ownership of the vcsh-git pkg in the AUR. It has been pointing to the debian branch, so I'm trying to update it to master.

I got the test dependencies installed, but am I missing something further as I'm getting these errors+fail on attempting to make install;

```
...
==> Starting package()...
t/000-tear-env.t ... skipped: No need to tear down previous env.
t/001-setup-env.t .. ok   
t/100-init.t ....... 1/? 
#   Failed test 'No repos set up yet.'
#   at t/100-init.t line 17.
t/100-init.t ....... 2/? 
#   Failed test at t/100-init.t line 21.

#   Failed test 'Our new repo is there'
#   at t/100-init.t line 25.
No such file or directory at t/100-init.t line 27.
# Tests were run but no plan was declared and done_testing() was not seen.
# Looks like your test exited with 2 just after 3.
t/100-init.t ....... Dubious, test returned 2 (wstat 512, 0x200)
Failed 3/3 subtests 
t/300-add.t ........ 1/? 
#   Failed test 'Adding a file works'
#   at t/300-add.t line 27.
t/300-add.t ........ 2/? 
#   Failed test 'Terse output works'
#   at t/300-add.t line 34.
# Looks like you failed 2 tests of 2.
t/300-add.t ........ Dubious, test returned 2 (wstat 512, 0x200)
Failed 2/2 subtests 
t/950-delete.t ..... 1/? 
#   Failed test 'No repos set up anymore.'
#   at t/950-delete.t line 17.
# Looks like you failed 1 test of 1.
t/950-delete.t ..... Dubious, test returned 1 (wstat 256, 0x100)
Failed 1/1 subtests 
t/999-tear-env.t ... ok   

Test Summary Report
-------------------
t/100-init.t     (Wstat: 512 Tests: 3 Failed: 3)
  Failed tests:  1-3
  Non-zero exit status: 2
  Parse errors: No plan found in TAP output
t/300-add.t      (Wstat: 512 Tests: 2 Failed: 2)
  Failed tests:  1-2
  Non-zero exit status: 2
t/950-delete.t   (Wstat: 256 Tests: 1 Failed: 1)
  Failed test:  1
  Non-zero exit status: 1
Files=6, Tests=10,  3 wallclock secs ( 0.07 usr  0.02 sys +  1.85 cusr  1.08 csys =  3.02 CPU)
Result: FAIL
make: *** [Makefile:48: test] Error 1
==> ERROR: A failure occurred in package().
...
```

(I have a hunch the PKGBUILD was pointing to the debian branch *because* of the above because the test dependency package names were in the PKGBUILD but not actually a part of the depends statement.)

Is there an easy fix, or is master just broken atm and I shouldn't bother yet?