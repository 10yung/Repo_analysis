When using mixins, autoprefixer still throws this warning.
In reference to this comment in the tailwind grid support pull request:
https://github.com/tailwindcss/tailwindcss/pull/1274#issuecomment-568920481

I think autoprefixer should translate `gap` to `grid-gap`.

Note that this should happen even if the grid prefixing setting is set to `false` since this is not an IE Grid compatibility issue. It is a modern CSS Grid issue.

**Input CSS:**

```css
.gap-20 {
  gap: 20px;
}
```

**Expected output:**

```css
.gap-20 {
  grid-gap: 20px;
  gap: 20px;
}
```

**Current output:**

```css
.gap-20 {
  gap: 20px;
}
```

`grid-gap` is essentially just a prefixed version of `gap` now, so I'm not sure why Autoprefixer wouldn't support it.
NodeJs v10.15.2
NPM v6.13.1

I'm testing `postcss` with `autoprefixer`, and also `gulp-autoprefixer`.
`browserslist` setting is default.

Source scss:
```scss
body {
    appearance: none;
    user-select: none;
}

@-moz-document domain('example.com') {
    body {
        appearance: none;
        user-select: none;
    }
}
```

Output css:
```css
body {
    -webkit-appearance: none;
       -moz-appearance: none;
            appearance: none;
    -webkit-user-select: none;
       -moz-user-select: none;
        -ms-user-select: none;
            user-select: none;
}

@-moz-document domain('example.com') {
    body {
        -moz-appearance: none;
             appearance: none;
        -moz-user-select: none;
             user-select: none;
    }
}
```

Same result on http://autoprefixer.github.io/
Hi,

In this scenario involve:
- Vue ( Single File Component )
- Nuxt.js
- PostCss ( autoprefixer, preset-env )


Problem:
Tell browser fetch image for a particular resolution using `background-image` property with [image-set](https://cssdb.org/#image-set-function) as value...
Example:
```
p {
  background-image: image-set(
    "foo.png" 1x,
    "foo-2x.png" 2x,
    "foo-print.png" 600dpi
  );
}
```
There is a clever way to pass dynamically image src data url using css variable, like this:

```
<template>

<div>
  <style>
    :root {
      --hero-image: url('{{ heroImage }}');
    }
  </style>
  <div class="punchy">
    <h1>Pow.</h1>
  </div>
</div>

</template>
<script>

export default {
  data() { 
    return {
       heroImage: 'https://vuejs.org/images/logo.png',
     }
  },
}

</script>
<style lang="postcss">
.punchy {
  background-image: var(--hero-image);
  display: inline-block;
  width: 250px; height: 250px;
}
</style>
```

So far everything is fine.

But when i want to create some basic fallback, something like this.
```
<template>
<div>
  <style>
    :root {
      --hero-image: url({{ heroImage }});
      --hero-imageSet:  image-set(url({{ heroImage }}) 1x, url({{ heroImage1 }}) 2x);
    }
  </style>
  <div class="punchy">
    <h1>Pow.</h1>
  </div>
</div>
</template>

<script>

export default {
  data() { 
    return {
       heroImage: 'https://vuejs.org/images/logo.png',
       heroImage1: https://vuejs.org/images/logo1.png
     }
  },
}

</script>

<style lang="postcss">
.punchy {
  background-image: var(--hero-image);
  background-image: var(--hero-imageSet);
  display: inline-block;
  width: 250px; height: 250px;
}
</style>
```

![Screenshot from 2019-11-27 19-02-33](https://user-images.githubusercontent.com/12874996/69765064-db225800-1148-11ea-9cc7-0328f9800a72.png)

Browser is able to see the proper value, but it seems, autoprefixer are not able to issue the proper vendor prefix

This test was made on Firefox & Chrome ( the last only support `image-set` )

![Screenshot from 2019-11-27 19-02-46](https://user-images.githubusercontent.com/12874996/69765069-e2496600-1148-11ea-8831-89dcdb8a394d.png)

![Screenshot from 2019-11-27 19-02-50](https://user-images.githubusercontent.com/12874996/69765115-0f961400-1149-11ea-8b8e-b22235db70c3.png)


`autoprefixer@9.7.2`

### Browserslist config
```json
"browserslist": [
  "last 2 versions",
  "not < 1%",
  "last 2 edge versions",
  "not ie < 11"
],
```

### postcss.config.js
```javascript
module.exports = {
  plugins: {
    autoprefixer: {
      supports: false,
    },
    'postcss-import': {},
    'postcss-custom-properties': {
      preserve: false,
    },
    'postcss-custom-media': {
      preserve: false,
    },
  },
};
```

### Input CSS
```css
@supports (position: sticky) {
  .search-results {
    position: sticky;
    top: 0;
  }
}
```

### Output CSS
```css
@supports (position: sticky) {
  .search-results {
    position: -webkit-sticky;
    position: sticky;
    top: 0;
  }
}
```

### Expected output CSS
```css
@supports (position: sticky) {
  .search-results {
    position: sticky;
    top: 0;
  }
}
```

Given the configuration option, and the fact that the `@supports` block effectively causes non-supporting browsers to skip over the content inside — wouldn't it make sense that autoprefixer _didn't_ prefix anything inside said `@supports` block? 
It seems that `mask-position` supported but `mask-position-x` aren't

I think it will be better to add all the properties that Chrome DevTools shows:
```
-webkit-mask-box-image-outset
-webkit-mask-box-image-repeat
-webkit-mask-box-image-slice
-webkit-mask-box-image-source
-webkit-mask-box-image-width
-webkit-mask-clip
-webkit-mask-composite
-webkit-mask-image
-webkit-mask-origin
-webkit-mask-position-x
-webkit-mask-position-y
-webkit-mask-repeat-x
-webkit-mask-repeat-y
-webkit-mask-size
```
Possibly the same as #1181 and #1241

In IE 11, even though each item was given the right row & column by default, when the `.change` class added, the row and columns ignore the gap given to the .container class style and assign b & c to the gaps.

Codepen: https://codepen.io/silverAndroid/pen/RwbMPpe
I have this grid code:

```css
.grid {
    display: grid;

    /* This is producing a warning in Autoprefixer. */
    /* This code works perfectly in IE though. */
    grid-gap: 30px;
}

@media (min-width: 601px) {
    .grid {
        grid-template:
            "a    b" auto /
             1fr  1fr;
    }
}

@media (max-width: 600px) {
    .grid {
        grid-template:
            "a" auto
            "b" auto /
             1fr;
    }
}

.a { grid-area: a; }

.b { grid-area: b; }
```

Both the grid template declarations are wrapped in media queries. The grid gap is a default that applies to both.

This code works fine in IE with Autoprefixer so there should not be any warning given.
As mentioned in #1064, I'm seeing similar behaviour with `span x` not prefixing correctly with `grid-gap`. 

When declaring `grid-area: 1 / 2 / 1 / span 4;`, it is being prefixed to the following: 

```
    -ms-grid-row: 1;
    -ms-grid-column: 2;
    -ms-grid-column-span: 4;
    grid-area: 1 / 2 / 1 / span 4;
```

But `-ms-grid-column-span: 4;` should actually be `-ms-grid-column-span: 7;` to account for the grid gaps.

Test case: https://codepen.io/davecross/pen/ce7e08421ea29a8464ff82b84fcc7d12?editors=1100
Support of Grid for IE is hard to guarantee since it does not support auto placement. Autoprefixer can ensure support when either `autoplace` mode is activated, or `grid-template-areas` are being used. The former is not applicable for all situations (e.g. the order should be different than in the DOM). [The latter only works when `grid-template-areas`, `grid-template-rows` and `grid-template-columns` are provided in the same rule](https://twitter.com/yepninja/status/992280342932291584).

The problem is that when writing CSS that follows neither approach, IE compatibility might break silently. E.g. when not using areas but `grid-column/row` on child elements directly - which would be totally supported by IE, but only when not using auto placement for any child. PostCSS cannot check this, as it does not know anything about the DOM structure.  So the safe way would be to dissallow it.

I would suggest to add an option that throws an error when using any css rule combination that does not enable the „areas“ or „autoplacement“ algorithms, and also when `grid-column/row` is encountered. Plus a control comment to opt out and use manual placement with `grid-column/row` on ones own risk. Combined with „Treat Warnings as Errors“ (#1165) this would enable a rather resilient backward compatibility with IE. 