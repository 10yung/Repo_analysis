As far as I can tell, the `.OnTransition()` "event" fires _after_ `.OnExit()` methods have been called, and _before_ `.OnEntry()` methods have been called.

It would be really useful (esp. for debugging logging, for example) to be able to track "I'm about to start calling `OnExit` methods for this transition", and "I'm about to start calling `OnEntry` methods for this transition.

It also feels like it ought to be quite easy to add to the API?

Is this something you'd be willing to add? (and/or would accept a PR for?)
I think the answer is currently "No". But It wouldbe great to have that confirmed.

Assuming I'm right, then would it be possible to get this added?
When a state machine is configured with FiringMode.Immediate and a trigger is fired in OnEntry() the resulting state is wrong.

Sample program:

```C#
using System;
using Stateless;

namespace TestStateless
{
    class Program
    {
        enum State
        {
            S1,
            S2,
            S3,
        }

        enum Trigger
        {
            T1,
        }

        private static StateMachine<State, Trigger> sm = new StateMachine<State, Trigger>(State.S1, FiringMode.Immediate);
        
        static void Main(string[] args)
        {
            sm.Configure(State.S1)
                .Permit(Trigger.T1, State.S2);

            sm.Configure(State.S2)
                .OnEntry(OnEntryS2)
                .Permit(Trigger.T1, State.S3);
            
            sm.Configure(State.S3)
                .OnEntry(OnEntryS3)
                .Permit(Trigger.T1, State.S1);

            System.Console.WriteLine("state before: " + sm.State);

            sm.Fire(Trigger.T1);

            System.Console.WriteLine("state after: " + sm.State);

            var k = Console.ReadKey();
        }

        private static void OnEntryS2()
        {
            System.Console.WriteLine("OnEntryS2()");
            sm.Fire(Trigger.T1);
        }

        private static void OnEntryS3()
        {
            System.Console.WriteLine("OnEntryS3()");
        }
    }
}
```

Program output with stateless 4.3.0: (wrong)
```
state before: S1
OnEntryS2()
OnEntryS3()
state after: S2
```

Program output with stateless 4.2.1: (as expected)
```
state before: S1
OnEntryS2()
OnEntryS3()
state after: S3
```

**Feature Request**
When using methods such as `OnTransitionedAsync` and `OnUnhandledTriggerAsync`, it would be useful if these returned a `Task` to make them awaitable.

This would greatly help when unit testing an asynchronous state machine.
Note: All other async methods in [StateMachine.Async.cs](https://github.com/dotnet-state-machine/stateless/blob/master/src/Stateless/StateMachine.Async.cs) already return a `Task`.
Hi, I was doing some prototyping for my work and come across this unexpected behaviour. Since it's working in the version 4.2.1 just fine and occurs since version 4.3.0 I assume it's a bug.

![image](https://user-images.githubusercontent.com/29312172/70603935-ec16a300-1bf7-11ea-934a-b0ab9a9893fd.png)

I have the full example as well, you can get it [here](https://github.com/MiroslavMikus/Exercies.Stateless/blob/master/Exercise.Stateless.Car/Car.cs)

Great lib and thanks in advice
https://github.com/dotnet-state-machine/stateless/issues/288  

nobody cared to fix it for a year?
Hi team,

I need async external state storage and am willing to do the work and submit a PR for it.

I basically need a `StateMachine` constructor that looks something like:

```
/// <summary>
/// Construct a state machine with async external state storage.
/// </summary>
/// <param name="stateAccessor">A function that will be called to read the current state value.</param>
/// <param name="stateMutator">An action that will be called to write new state values.</param>
public StateMachine(Func<Task<TState>> stateAccessor, Func<TState, Task> stateMutator)
{
}
```
1. We would then need two mutually exclusive sets of state storage readers/writers: sync and async.
2. Async storage access causes a significant ripple effect through the `StateMachine` helper methods.

To  retain backwards compatibility with the current mix of sync state storage + async transition methods in `StateMachine`, I propose creating a separate `AsyncStateMachine`  class that has the above constructor and is async all the way through.

Before I get too far, does anyone have any feedback or strong opinions on this approach?

Hello, since updating to v4.3.0 something in the behaviour of the state machine has changed and a single unit test which worked with 4.2.1 stopped passing. Here is  what I am doing in my unit test:

1. Create a statemachine and put it in the state A
2. Fire an "Operational" trigger which should move it to state B and into substate C through initial transition of state B.
3. Before moving to C there is an _OnEntry_  for B  which calls a function that should Fire an "_Act_OperationalErrorTrigger" trigger and move the machine to state E (error) I provoke this behavour using **Moq** library using a callback like this:
`controller_mock.As<IMOTION_CONTROLLER>().Setup(m => m.SetExposureDefaultsAndStop()).Callback(() => machine.Fire(inputControls.TriggersCommon._Act_OperationalErrorTrigger, "Function", "Error on Exposure defaults")).Verifiable();`

_(note SetExposureDefaultsAndStop is the function that is called as part of B's OnEntry())_

What I am seeing instead is that I get an exception saying that :

> No valid leaving transitions are permitted from state 'E'(error) for trigger '_Act_OperationalErrorTrigger'. Consider ignoring the trigger.

What I also see upon debugging is that the OnEntry (or the contents of the OnEntry), seems to be called **twice** inside state B. And executing `SetExposureDefaultsAndStop()` function second time fires the same `_Act_OperationalErrorTrigger `another time but since the first firing of `_Act_OperationalErrorTrigger ` already moved state to E(error), the E(error) state is not prepared to treat the `_Act_OperationalErrorTrigger` trigger, casuing the above exception. 

I know I can work around by addin additional state configrations for the E(error) state, however it seems this will be patching unclear behavour, espectially since it was working just fine in version 4.2.1.  Could you please look into this or at least let me know if some behavouor change is expected by upgrading to 4.3.0 from 4.2.1. 
Add note that stateless Targets .NET Standard 2.0, too. Furthermore I built stateless with VS 2019, no problem.
I really love this amazing library and appreciate all of the contributors hard work.

I noticed the 4.3.0 release was published to nuget.  I went to see what changed and found no release notes.  No biggie, so, I checked the repo to see what changes were made.

I'll admit, I was surprised to find it appears the release was created from the dev branch (it's the only branch that has recently changed), but even more so there's no way to coordinate the code from 4.3.0 to the repo as the commit isn't tagged.  

The build indicator in the readme links to appveyor that shows a lot of builds, but no new releases.  If I switch to the appveyor dev builds, I can see multiple builds create a Stateless.4.3.0.nupkg.

Perhaps I've missed something, but right now I'm hesitant to upgrade.  Any thoughts would be appreciated.