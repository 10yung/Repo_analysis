This step uses the [Github Releases](https://github.com/marketplace/actions/github-releases) action.

**PLEASE NOTE**: While merging this PR, make sure to also add a `GITHUB_TOKEN` environment variable for this repository in the repository Settings page.

Closes #765 
I tried to download the latest windows binaries on https://github.com/facebook/watchman/runs/351164043.

![image](https://user-images.githubusercontent.com/2276718/71453242-36d21680-27c5-11ea-9ab4-2cc18dcf4f48.png)

But When I click the link and try to download, the downloaded file changes everytime. I have tried many times, all failed.

![image](https://user-images.githubusercontent.com/2276718/71453297-8284c000-27c5-11ea-8dcd-6cabab85aaaf.png)

Could we publish the files in the github release. It is more easy for downloading.

Here I am trying to use `watchman-make` to run tests on file changes:

    watchman-make --root feed2exec/ -p '**/*.py' --run tox

My project is called `feed2exec` and I used the `--root` argument to keep changes to `.tox` and egg files from being picked up, otherwise it would constantly rerun because tox would trigger itself...

... except it *still* triggers itself because tox touches the `feed2exec/_version.py` file on build. I can't figure out a way to use watchman in this use case...

I did manage to use watchman this way:

    $ watchman watch feed2exec/
    {
        "version": "4.9.0",
        "watch": "/home/anarcat/src/feed2exec/feed2exec",
        "watcher": "inotify"
    }
    $ watchman -j <<EOF
    ["trigger", "feed2exec", {
    "name": "test",
    "expression": ["pcre", "^[^_].*\\.(py)$"],
    "command": ["tox", "--", "-v"], 
    "append_files": false
    }]
    EOF
    {
        "version": "4.9.0",
        "triggerid": "test",
        "disposition": "created"
    }

But that's really kind of nasty, and it doesn't show the actual output of the commands. I need to tail this arbitrary file in `/tmp/anarcat-state/log` to get any idea of what's going on. And worse, all the colors are gone from there...

So it would be great (and so much simpler) to have `watchman-make` support more complicated patterns... It looks like the `patterns_to_terms` function is where the action happens. 

Note that I noticed that I could make that file "hidden" (prepend path name with a dot), but those files are notoriously hard to import in Python, so I'd rather avoid that.

Thanks!
in artifacts dropdown, size of 5.54 mb is shown.
actual download says 63mb in safari download list.
shows zero bytes in finder.
double clicking on it shows either no files in subdir, or you get a permissions error and zip won't open.
using macos catalina, latest production build. 
When on the installation page https://facebook.github.io/watchman/docs/install.html and following the install instructions below

![image](https://user-images.githubusercontent.com/58296429/69805068-276ca700-11e0-11ea-8b96-608127327975.png)
I come to a 404 page on github

![image](https://user-images.githubusercontent.com/58296429/69805112-45d2a280-11e0-11ea-8a79-4d5e1945d083.png)

Clearly, this is an error on githubs side, they should not give me a 404 if I'm not logged in, they should ask me to log in.
But until they have sorted that out, it would be nice if watchman supplied a workaround.

**Suggestion** Clarify on the install page https://facebook.github.io/watchman/docs/install.html that you need to be logged in to github to be able to access the actions section.
I'm using Git's fsmonitor tool with Watchman to speed up performance when there are many files. However, after using the repo, I'm unable to delete it without closing the watchman process (on Windows). There must be an open handle somewhere still.

I'm using the `watch-del` command to remove the watch, but the handle still is not closed.

```
$ watchman watch-list
{
    "version": "4.9.4",
    "roots": [
        "C:/_git/ForTests/src"
    ]
}

$ rm -rf ForTests
rm: cannot remove 'ForTests/src': Device or resource busy

$ watchman watch-del "C:/_git/ForTests/src"

$ watchman watch-list
{
    "version": "4.9.4",
    "roots": []
}

$ rm -rf ForTests
rm: cannot remove 'ForTests/src': Device or resource busy

$ handle.exe | grep -B 1 ForTests
cmd.exe pid: 24192 DESKTOP-LE3SIE3\stole
   40: File  (RW-)   C:\_git\ForTests\src
--
watchman.exe pid: 22960 DESKTOP-LE3SIE3\stole
   44: File  (RW-)   C:\_git\ForTests\src
```

(The "cmd.exe" process reported by `handle.exe` is the background runner that is running `watchman.exe` as a child.)

I'm struggling to read the code and connect the dots (especially because I've failed to build it locally). I see that `FileDescriptor` has a destructor that will clear the handle, and that should be part of the destructor for `WinDirHandle` (which extends `watchman_dir_handle`). What I don't see is any connection between the code in `watchlist.cpp` and those types.

If it helps, it is important to note that a query must be asked of `watchman` in order to trigger this failure. This Python test _may_ demonstrate the bug:

```
@WatchmanTestCase.expand_matrix
class TestHandles(WatchmanTestCase.WatchmanTestCase):
    def checkOSApplicability(self):
        if sys.platform != "win32":
            self.skipTest("N/A unless Windows")

    def test_handles(self):

        root = self.mkdtemp()
        self.watchmanCommand("watch", root)
        self.touchRelative(root, "file")
        self.watchmanCommand("watch-del", root)
        os.rmdir(root)
        self.assertFalse(os.path.isdir("root"))
```

I'm happy to commit time to fix this issue, but I'll need a little guidance for where to look. My initial inspection has led me in circles so I figured I would write this issue while everything is fresh.
We're seeing a test failure on the Debian/s390x architecture build:

Package: watchman
Version: 4.9.0-1
Source Version: 4.9.0-1
Distribution: sid
Machine Architecture: s390x
Host Architecture: s390x
Build Architecture: s390x

```
not ok 213 - raw bser comparison [1, 123, 12345, 1234567, 12345678912345678]
    Failed test (tests/bser.cpp:check_serialization() at line 186)
not ok 214 - raw bser comparison [1, 123, 12345, 1234567, 12345678912345678]
    Failed test (tests/bser.cpp:check_serialization() at line 186)
```

[s390x_debian_build.txt](https://github.com/facebook/watchman/files/3832049/s390x_debian_build.txt)

Thoughts appreciated. thanks.
I tried this build:

https://github.com/facebook/watchman/runs/289290807

And after extracting the zip and cd'ing into `linux/bin`, `chmod u+x watchman`, running `./watchman` gives:

```
$ ./watchman
./watchman: error while loading shared libraries: _artifacts/linux/lib/libglog.so.0: cannot open shared object file: No such file or directory
```

After some guessing/googling, what technically (not sure if it's "correct") works is, while in the same `bin` directory, doing `mkdir -p _artifacts/linux` `mv ../lib _artifacts_linux`. I.e. just put the libs at the `_artifacts/...` path it was looking for.

Now `./watchman` almost works but I get:

```
$ ./watchman
2019-11-05T13:23:28,518: [watchman] while computing sockname: failed to create /tmp/fbcode_builder_getdeps-ZhomeZrunnerZworkZwatchmanZwatchmanZbuildZfbcode_builder/installed/watchman/var/run/watchman/stephen-state: No such file or directory
```

I'm going to fallback to the non-binary / install-from-source route.
Hi!

First off all, let me say thank you for maintaining awesome docs for watchman: they are really thorough, and are greatly appreciated! 

However, when I was recently familiarizing myself with watchmen, I've noticed that it took me a long time to get a solid understanding of the big picture. It looks like the docs do a good job at providing a comprehensive reference, but don't have a guide-like page which talks about all the concepts of watchman and how they relate to each other. I might want to use watchmen in [rust-analyzer](https://github.com/rust-analyzer/rust-analyzer), an experimental language server for rust, and for me it is important to understand how watchman works as a whole, rather than to figure out how to do a specific thing, like running a command if a css files changes.

Here are some concepts which I struggled with painting clearly in my mind:

* clocks
* roots (especially, what happens if a set of roots changes dynamically)
* guarantees that are provided by watchman (ie, initial scan makes sure that no file is missed)
* ways to interact with watchman (it is a daemon, but the docs mainly talk about CLI tool, but there's also a socket interface)

I think that the pages which helped me most were:

* https://facebook.github.io/watchman/docs/socket-interface.html
* https://facebook.github.io/watchman/docs/cmd/watch-project.html
* https://facebook.github.io/watchman/docs/cmd/query.html
* https://facebook.github.io/watchman/docs/clockspec.html
* https://facebook.github.io/watchman/docs/file-query.html
* https://facebook.github.io/watchman/docs/cmd/subscribe.html

It would awesome if there was a centralized document which talks, in brief, about each one of them.
Hello, may I use regular expressions to ignore files or directories