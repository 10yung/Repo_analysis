While darwinbuild has served us well so far, as I work towards building an ISO from scratch (cf #38), I find that it is not well-suited for building a complete Darwin OS image from source. The main issue is that it is stateless. There is no way to tell _a priori_ that a given project has already been built. Because of this, the only way I could implement `darwinbuild -recursive` is to blindly build all detected dependencies every time. This is wasteful of time if invoked repeatedly, as it has no way to tell if a project is up-to-date. As far as darwinbuild knows, it may be wildly out-of-date and therefore must be rebuilt, even though _we_ know it was just built two minutes ago by a previous darwinbuild invocation. Furthermore, the use of darwinbuild plists to orchestrate the build does not work well with any sort of CI system; it is also IMHO a very chaotic method to handle versioning of dependencies. All the changes made to [PD18_2.plist](https://github.com/PureDarwin/PureDarwin/commits/master/plists/PD18_2.plist) also required a tag be made in the source repository, a completely ad-hoc and non-standardized process.

In addition, I am growing personally disillusioned with the increasingly locked-down nature of Apple macOS. As a result, I was looking into ways to potentially build PureDarwin without needing to use xcodebuild, as Xcode requires the use of macOS. (Yes, there is xcbuild, but while it once showed promise it is now so bit-rotten that it no longer works at all due to changes in Xcode; furthermore, even when it was comparable in functionality with Apple xcodebuild, it had a nasty habit of segfaulting.) The Darling project uses CMake to build a Darwin-esque environment (everything but kernel-mode) from source using CMake. While one benefit of this technique is that it works on Linux as well on Darwin/macOS, I feel that moving PureDarwin to a build system like Darling's (using CMake and possibly a vendored copy of cctools/ld64), and using submodules to organize the code would have benefits even if we stick to building PureDarwin on macOS (or itself!) only.

If this proposal is accepted, I would start work by creating an "SDK" repository that contains the common CMake modules that handle things such as cross-compiling or processing MIG files, as well as a copy of the headers and `*.tbd` stub library files that are used to build an arbitrary PureDarwin component. (This would essentially be a freely-licensed version of the Xcode MacOSX.sdk directory.) I would then add CMakeLists.txt files to the various repositories under the PureDarwin organization. Once that's done, I would add those repositories as submodules under the `projects/` directory. When the root PureDarwin repo is cloned, the SDK would be included as a submodule and the other projects would be pointed to it via a CMake variable. (If a component repo is cloned on its own, for example in a CI scenario, then the SDK would need to be downloaded separately before the build and CMake given its location manually.)

The build process for XNU would not change much. XNU will still be built using the existing Makefile-based system, integrated into the CMake build using the [ExternalProject](https://cmake.org/cmake/help/v3.16/module/ExternalProject.html) system. Its dependencies (dtrace, libdispatch, and a few others) would be built using CMake, and passed into the XNU makefiles using a file containing paths generated using the CMake `configure_file` feature.

Tell me what you think!
I have tried booting PD 17.4 under Xen (FreeBSD is dom0) with a following config file:

````
builder = "hvm"
name = "puredarwin"
disk = [
        '/home/saper/dist/pd_17_4.iso,raw,xvda,w'
]
boot = "c"
usbdevice = 'tablet'
#nographics = 1
serial = [ "/dev/nmdm0A" ]
vnc = 1
#vnclisten = '0.0.0.0'
vif = ['bridge=bridge1,mac=00:02:04:08:bb:aa' ]
memory= 8192
vcpus = 2
vga = "stdvga"
videoram = 16
xen_platform_pci=0
on_crash = "preserve"
on_reboot = "preserve"
````

It starts to boot but at some point there is a triple fault:

````
(XEN) d36v0 Triple fault - invoking HVM shutdown action 1
(XEN) *** Dumping Dom36 vcpu#0 state: ***
(XEN) ----[ Xen-4.7.2  x86_64  debug=n  Not tainted ]----
(XEN) CPU:    0
(XEN) RIP:    0008:[<ffffff80003193c3>]
(XEN) RFLAGS: 0000000000010086   CONTEXT: hvm guest (d36v0)
(XEN) rax: 0000000000000000   rbx: ffffff800097b58b   rcx: 0000000000000000
(XEN) rdx: 0000000000000000   rsi: 0000000000000001   rdi: 0000000000000000
(XEN) rbp: ffffff8000177f70   rsp: ffffff8000177e50   r8:  0000000000000000
(XEN) r9:  0000000000000001   r10: 0000000000000000   r11: 0000000000000000
(XEN) r12: 0000000000000000   r13: 0000000000000001   r14: 0000000000000000
(XEN) r15: 0000000000000000   cr0: 0000000080010011   cr4: 0000000000000020
(XEN) cr3: 00000000015bb000   cr2: 00000000000000e0
(XEN) ds: 0000   es: 0000   fs: 0000   gs: 0000   ss: 0000   cs: 0008
````

![Screenshot of the VGA console](https://user-images.githubusercontent.com/248374/66393145-136faa80-e9d2-11e9-89f5-76c88c0010ab.png)

Any ideas how to troubleshoot it?
The SSL cert doesn't seem to cover www., and slashes are required.
The markdown syntax appears to be invalid for the vmware.gif image link on https://github.com/PureDarwin/PureDarwin/wiki/vmware .
Now this project need more people work together ,but I can't find a easily way and a clear document about how to build the puredarwin and create iso or vmdk image tourital . 
I'm a Mac user and I have tried to build a Darwin-based operating system, but I didn't find information on building the basic operating system in Apple and PureDarwin's documents.It caused me to try many times without building success.

I believe that many people like me want to build their own Darwin-based systems because of their interest,so I hope you can provide a document like Linux From Scratch for us.
Thank you.
The "impurities" can be removed later. Is there a working ISO that can be released, for developers to play with?
Originally reported on Google Code with ID 23

```
bash and nano should be the defaults, as these are most friendly to beginners. 

Users who intentionally want to use zsh and vi can know how to install these and change
the 
settings accordingly.
```

Reported by `appengine@puredarwin.org` on 2010-01-10 19:53:54

Originally reported on Google Code with ID 20

```
I don't know why, but the 1234 MB ISO generated by pd_setup is faulty and creates error
on boot
http://omploader.org/vMzR2dw

However, if one uses HD Utility to restore the same ISO to a USB drive and then installs
the 
bootloader, the resulting system boots fine on real HW.

Don't know what's going on. 
```

Reported by `appengine@puredarwin.org` on 2010-01-03 12:30:25

Originally reported on Google Code with ID 19

```
This is just a placeholder:

chmod -R root /S/L/LaunchDaemons needed if multiuser login doesn't work
```

Reported by `appengine@puredarwin.org` on 2010-01-03 12:13:43
