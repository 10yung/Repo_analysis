### System Details

- posh-git version/path: 0.7.3  C:\Program Files\WindowsPowerShell\Modules\posh-git\0.7.3
- PowerShell version: 5.1.17763.771
- git version 2.25.0.windows.1
- OS: Microsoft Windows NT 10.0.17763.0

### Issue Description

ConEmu supports setting the status bar text. It would be extremely nice if we could output the path and the Git status to the ConEmu status bar _instead_ of to the prompt.

You can use raw escape codes or the command-line utility, e.g.,:

ConEmuC -GuiMacro Status 1 "My path and my git status"

You can see the documentation for this ConEmu GuiMacro here:

https://conemu.github.io/en/GuiMacro.html#Status

And the escape codes behind it are here:

https://conemu.github.io/en/AnsiEscapeCodes.html

Thanks!

### System Details

- posh-git version/path: Not installed
- PowerShell version: 5.1.17763.771
- Git version: 2.22.0.windows.1
- Operating system name and version: Microsoft Windows 10 Enterprise - 10.0.17763 N/A Build 17763

### Issue Description

I have been trying to execute some powershell script using Powershell ISE and for that I have been trying to add the SSH-Agent for that - on which I failed.

But when I tried to reset my old .ssh folder (I kept back of it before I started), it stopped working for my Git Bash and now I cannot push my changes to GitHub.

I have verified link1 but that's correct on my machine.

I have even checked my Environment Variables to make sure no unnecessary Git path set to that and that's on the correct side too.

Also, I have tried to push the branch by having the OpenSSH service in Start and Stop state.

Please let me know what check I missed here and how can I solve this issue.

<!--
Check the FAQ https://github.com/dahlbyk/posh-git/wiki/FAQ to see if your issue is addressed there.
If not, PLEASE fill in the following details so that we can help you!
-->

### System Details

- posh-git version/path:
- PowerShell version: 5.1
- Git version:
- Operating system name and version: Windows 10

<!--
To retrieve the system details, paste the following line into PowerShell, press Enter
and then copy/paste the resulting output above.

"- posh-git version/path: $($m = Get-Module posh-git; '{0} {1} {2}' -f $m.Version,$m.PrivateData.PSData.Prerelease,$m.ModuleBase.Replace($HOME,'~'))`n- PowerShell version: $($PSVersionTable.PSVersion)`n- $(
git --version)`n- OS: $([System.Environment]::OSVersion)"
-->

### Issue Description
The readme mentions Chocolatey, but its also on Scoop.
```
scoop bucket add extras
scoop install posh-git
```
<!--
Check the FAQ https://github.com/dahlbyk/posh-git/wiki/FAQ to see if your issue is addressed there.
If not, PLEASE fill in the following details so that we can help you!
-->

### System Details

- posh-git version/path: 1.0.0 beta3 ~/.local/share/powershell/Modules/posh-git/1.0.0
- PowerShell version: 6.2.3
- git version 2.21.0 (Apple Git-122.2)
- OS: Unix 18.7.0.0

<!--
To retrieve the system details, paste the following line into PowerShell, press Enter
and then copy/paste the resulting output above.

"- posh-git version/path: $($m = Get-Module posh-git; '{0} {1} {2}' -f $m.Version,$m.PrivateData.PSData.Prerelease,$m.ModuleBase.Replace($HOME,'~'))`n- PowerShell version: $($PSVersionTable.PSVersion)`n- $(
git --version)`n- OS: $([System.Environment]::OSVersion)"
-->

### Issue Description

My abbreviated path can be pretty long and maybe there could be an option to abbreviate based on the closest git root (including the folder name), so it would essentially show the path within the project I'm working.

e.g.
```
~/company/work/projects/client/project-name/src [master] >
```
Could be further shortened to:
```
-/project-name/src [master] >
```

<!--
Check the FAQ https://github.com/dahlbyk/posh-git/wiki/FAQ to see if your issue is addressed there.
If not, PLEASE fill in the following details so that we can help you!
-->

### System Details

- posh-git version/path: 0.7.3.1  C:\tools\poshgit\dahlbyk-posh-git-9bda399\src
- PowerShell version: 5.1.17763.771
- git version 2.23.0.windows.1
- OS: Microsoft Windows NT 10.0.17763.0

<!--
To retrieve the system details, paste the following line into PowerShell, press Enter
and then copy/paste the resulting output above.

"- posh-git version/path: $($m = Get-Module posh-git; '{0} {1} {2}' -f $m.Version,$m.PrivateData.PSData.Prerelease,$m.ModuleBase.Replace($HOME,'~'))`n- PowerShell version: $($PSVersionTable.PSVersion)`n- $(
git --version)`n- OS: $([System.Environment]::OSVersion)"
-->

### Issue Description

When I got to a repository that isn't clean on status, I'm getting a null ref exception

`
VERBOSE: 00092:Getting status
VERBOSE: 00195:Parsing status
VERBOSE: 00205:Status: ## master...origin/master
VERBOSE: 00219:Status: ?? Feature.MySQL.UnitTests/app.config
 [Error: You cannot call a method on a null-valued expression.
VERBOSE: PoshGitVcsPrompt error details:

PSMessageDetails      :
Exception             : System.Management.Automation.RuntimeException: You cannot call a method on a null-valued expression.
                           at System.Management.Automation.ExceptionHandlingOps.CheckActionPreference(FunctionContext funcContext, Exception exception)
                           at System.Management.Automation.Interpreter.ActionCallInstruction`2.Run(InterpretedFrame frame)
                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
                           at System.Management.Automation.Interpreter.EnterTryCatchFinallyInstruction.Run(InterpretedFrame frame)
TargetObject          :
CategoryInfo          : InvalidOperation: (:) [], RuntimeException
FullyQualifiedErrorId : InvokeMethodOnNull
ErrorDetails          :
InvocationInfo        : System.Management.Automation.InvocationInfo
ScriptStackTrace      : at Get-GitStatus, C:\tools\poshgit\dahlbyk-posh-git-9bda399\src\GitUtils.ps1: line 256
                        at <ScriptBlock>, C:\tools\poshgit\dahlbyk-posh-git-9bda399\src\GitPrompt.ps1: line 330
                        at <ScriptBlock>, C:\tools\poshgit\dahlbyk-posh-git-9bda399\src\GitPrompt.ps1: line 324
                        at Global:Write-VcsStatus, C:\tools\poshgit\dahlbyk-posh-git-9bda399\src\GitPrompt.ps1: line 324
                        at <ScriptBlock>, C:\tools\poshgit\dahlbyk-posh-git-9bda399\src\posh-git.psm1: line 56
                        at <ScriptBlock>, <No file>: line 1
PipelineIterationInfo : {}
`

I haven't been able to track down what is exactly null at this point, the $filesAdded list exists, the $matches is filled in, and the $matches['path1] expression seems to have data.  Not really familiar with writing powershell scripts though.

<!--
Check the FAQ https://github.com/dahlbyk/posh-git/wiki/FAQ to see if your issue is addressed there.
If not, PLEASE fill in the following details so that we can help you!
-->

### System Details

- posh-git version/path: 0.7.3  ~\Documents\WindowsPowerShell\Modules\posh-git\0.7.3
- PowerShell version: 5.1.14409.1018
- git version 2.23.0.windows.1
- OS: Microsoft Windows NT 6.1.7601 Service Pack 1

<!--
To retrieve the system details, paste the following line into PowerShell, press Enter
and then copy/paste the resulting output above.

"- posh-git version/path: $($m = Get-Module posh-git; '{0} {1} {2}' -f $m.Version,$m.PrivateData.PSData.Prerelease,$m.ModuleBase.Replace($HOME,'~'))`n- PowerShell version: $($PSVersionTable.PSVersion)`n- $(
git --version)`n- OS: $([System.Environment]::OSVersion)"
-->

### Issue Description

Can this module be used to list all projects that my login has access to or that my group has access to?

Fixes https://github.com/dahlbyk/posh-sshell/issues/21
PID and WINPID mismatch was introduced in the recent cygwin release,
see https://github.com/git-for-windows/git/issues/2274
Related: #692
This targets the `master` branch.

It creates the module in an `out` folder by copying the content of the `src` folder into it first and then merging the `.ps1` files into the main `.psm1` files that are dot sourced by looking for the pattern `$PSScriptRoot\ScriptName.ps1` and replacing it with the content and wrapping it into a `#region` block. The result is stored in a folder with the name being the version, so that one can just add to to the PSModulePath env variable if one wanted to.

This cuts the import time roughly in half for a pure import from a started up PS (from 800 to 400 ms on my machine) or reduced the import time by 25% when the import happens in the $PROFILE (don't know why the benefit is smaller in this case but probably because the import is generally slow in the $Profile due to PS being busy at the start)

I've adapted the test logic to use the built module if the `CI` env variable is set and the path exists and in AppVeyor I keep running tests the old way, then build and then make them run against the built module
I've adapted the test logic to use the 
Adds Support for Azure CLI #695 
- Includes Support for 
   - Sub-Command Expansion
   - Target/Source Branch expansion
   - Parameter=Value expansion
- Updates VSTS CLI Support
   - Fills in gaps for missing commands
   - Feature parity with AZ (branch/parameter expansion)
- Both AZ/VSTS can be installed at the same time (with different aliases)
- Added Tests for all cases
The VSTS CLI has been deprecated and replaced with the Azure CLI (`az repos`). 

The aliases that are added via [`--use-git-aliases`](https://docs.microsoft.com/en-us/azure/devops/cli/auto-detect-and-git-aliases?view=azure-devops) are the same as the Vsts ones, `pr` being the primary one. Would need to add a new known alias to support both Vsts and az. Additionally, some of the [sub-commands](https://docs.microsoft.com/en-us/cli/azure/ext/azure-devops/repos/pr?view=azure-cli-latest) have changed; many of them are pluralization (`reviewer` vs `reviewers`) but some options have been removed and a few added.

Any chance the module will be updated to officially support the aliases added by the Azure CLI?

I've updated my local copy of the module and would gladly submit a PR if you'd like.
