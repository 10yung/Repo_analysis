- Passport Version: #.#.#
- Laravel Version: #.#.#
- PHP Version: #.#.#
- Database Driver & Version:

### Description:


### Steps To Reproduce:

- Passport Version: 7.5.1
- Laravel Version: 6.6.2
- PHP Version: 7.2.24
- Database Driver & Version: n/a 

### Description:

When using inherited scopes and you attempt to set scope inside `Passport::actingAs($user, ['api'])` the can method returns false when checking scope `api:users:index`

### Steps To Reproduce:

```
    public function test_acting_as_ignores_with_inherited_scopes()
    {
        Passport::$withInheritedScopes = true;

        $user = Passport::actingAs(factory(User::class)->create(), ['api']);

        $this->assertTrue($user->tokenCan('api')); // Works as expected
        $this->assertTrue($user->tokenCan('api:users')); // Fails
        $this->assertTrue($user->tokenCan('api:users:index')); // Fails
    }

    public function test_acting_as_ingores_wildcard()
    {
        Passport::$withInheritedScopes = true;

        $user = Passport::actingAs(factory(User::class)->create(), ['*']);

        $this->assertTrue($user->tokenCan('api')); // Fails
    }
``` 

The issue related to `Passport.php` acting as method:

```
    public static function actingAs($user, $scopes = [], $guard = 'api')
    {
        $token = Mockery::mock(self::tokenModel())->shouldIgnoreMissing(false);

        // This check is different to the logic performed inside the standard token model
        foreach ($scopes as $scope) {
            $token->shouldReceive('can')->with($scope)->andReturn(true);
        }

        $user->withAccessToken($token);

        if (isset($user->wasRecentlyCreated) && $user->wasRecentlyCreated) {
            $user->wasRecentlyCreated = false;
        }

        app('auth')->guard($guard)->setUser($user);

        app('auth')->shouldUse($guard);

        return $user;
    }
```
 
`Token.php` here logic to handle wildcard and inherited scopes is checked

```
    public function can($scope)
    {
        if (in_array('*', $this->scopes)) {
            return true;
        }

        $scopes = Passport::$withInheritedScopes
            ? $this->resolveInheritedScopes($scope)
            : [$scope];

        foreach ($scopes as $scope) {
            if (array_key_exists($scope, array_flip($this->scopes))) {
                return true;
            }
        }

        return false;
    }
```
It would be great if Passport supported hashing tokens, similar to the way [you can hash tokens with the API guard](https://laravel.com/docs/5.8/api-authentication#hashing-tokens).

I looked through the existing issues and saw #641 but that issue is about hashing the client ID and secret.

Hashing the access and refresh tokens is a bigger win for security in my opinion because:
- The client secret needs to be stored in plaintext by the client anyway but the tokens do not.
- Stealing a client secret lets you impersonate the client, but won't normally give you access to user's data. Stealing an access or refresh token does give you access to user's data.

It would be great if we could ship this feature for 8.0. I would be willing to write the PR.
- Passport Version: 7.3.4
- Laravel Version: 5.8.12
- PHP Version: 7.2
- Database Driver & Version:

### Description:
My user_id is a big Integer, so cannot insert to oauth_clients. I can change column type myself. I think all coumn integer in `https://github.com/laravel/passport/tree/7.0/database/migrations` should change to BigInteger for fresh install.

- Passport Version: 7.0

### Description:
Since Passport uses Laravel's own url Validator to check for valid redirect URIs it's impossible to use most private or provisional schemes as recommended by "RFC8252 - OAuth 2.0 for Native Apps" (see:  https://tools.ietf.org/html/rfc8252#page-4) for use with mobile apps or non-web-clients that can't listen on the loopback interface in general. (The latter is recommended for computer software, but isn't possible with the permission structure of modern mobile device operating systems)

The Laravel URL validator is made for forms on websites and will in 99% of all cases be used to validate a web URL. It's not good at all  for private or provisional URI schemes that are either registered with IANA or used in private contexts (like inter-app communication).

### Steps To Reproduce:
Option A: Try to use a valid permanent scheme that isn't hierarchicallly structured and therefore doesn't use the double forward slashes like urn:ietf:params:oauth:grant-type:device_code
You will not be able to pass through any authorization that requires a redirect and will instead see the "One or more redirects have an invalid url format." error-message.

Option B: Use a provisional or private URI scheme not included in the scheme list of the Laravel URL Regex like the android scheme. (see: https://www.iana.org/assignments/uri-schemes/prov/android)
Again you will not be able to pass through any authorization that requires a redirect and will instead see the "One or more redirects have an invalid url format." error-message.

There has been a previous attempt at fixing that behaviour, but I think that went the wrong direction when the author wanted to fix the widely used Laravel URL Validator.

I'd rather fix the broken behaviour of that validation rule separately from simply allowing all kinds of URIs conforming to the scheme set in RFC 3986 for the purpose of redirects.

Here's the corresponding bug report at the main Laravel repo: https://github.com/laravel/framework/issues/29301
There I suggested limiting the current `url` Validator to the most common URI schemes and instead adding a secondary generic URI validator that just checks if the format is valid.
I can see why one wouldn't want a too broad URI validation in the framework when that is used in form validation and stuff like that where one woudl want to prevent website users from doing bad things.
Therefore I would very much welcome it if we could throw the half-hearted URL validator from the main framework out the window in this library and instead use a custom regex to validate just the format.
-Passport Version: v7.3.0
-Laravel Version: 5.8.19
-PHP Version: PHP 7.3.3-1+020190307202245.32+stretch1.gbp32ebb2 (cli) (built: Mar 7 2019 20:22:46) ( NTS )
-Database Driver & Version: Mysql

### Description:
 If we use  `Passport::actingAs($user)`
and then we try to get the `expires_at`, it will return `false` instead of the expires date.
### Steps To Reproduce:
Assuming you have a Passport oAuth login in place already:
create a test and execute: 
 `Passport::actingAs($user);`
`$user->token()->expires_at; // return false instead of the Date`
Cordially
In core framework, `getAuthIdentifier()` is used to get user identifier for authentication.
However, in passport `getKey()` is used to get user identifier.

Below are the places where made us confused:
https://github.com/laravel/passport/blob/4e3390e67a5a74850698e1e991fd324b4dfa0ffa/src/Http/Controllers/AuthorizedAccessTokenController.php#L35-L42
https://github.com/laravel/passport/blob/55c1c546332db7bbbb95e0e4fd50ee8a690afc11/src/Http/Controllers/AuthorizationController.php#L107-L116

In our case, we used uuid as auth identifier but kept primary key as `$primaryKey` field for relationships.

Would you consider to change to use `getAuthIdentifier()` to be in sync with core framework design?
Since https://github.com/laravel/passport/issues/161 has been locked we are no longer able to discuss the issue. Before I submit a PR I want to make sure we have a common ground on what the expected behavior is for multi-provider support in Passport. More specifically, should the provider be defined at the oauth client level? This would limit that client id/secret pair to always return from a specific provider. If the gate requested another provider than what the client has defined it would return a 401.

This is the functionality I have built into my current project and I would be more than willing to issue a PR for it but I want to make sure that is what everyone is expecting.

EDIT: I should note, that if no provider is set on the oauth client then it will follow the same logic as what is in place now, so it should be backward compatible outside of the migration.
## Brief overview
The main purpose of this feature is to make Laravel Passport more "unified" with the main application.
## Detailed
The session token name is generating with the following formula:
`Str::slug(env('APP_NAME', 'laravel'), '_').'_session'`
And this is how the Passport is "making" the name:
`public static $cookie = 'laravel_token';`

Why not implement this thing to the Passport by default? This will likely remove most "cookie name override" needs.

Thanks in advance.
When using the api authentication with cookie we might have silent error. The `try/catch` in the `getTokenViaCookie` function on the `TokenGuard` class wraps the `decodeJwtTokenCookie` function, so an error occured while executing `decodeJwtTokenCookie` we won't know about it and it will return 
`{"error":"Unauthenticated."}`.

https://github.com/laravel/passport/blob/aadf603c1f45cfa4bbf954bfc3abc30cdd572683/src/Guards/TokenGuard.php#L224-L228

In my case it took me half a day to understand that the authentication was failling.

```
{
    "message": "Allowed memory size of 134217728 bytes exhausted (tried to allocate 65015808 bytes)",
    "exception": "Symfony\\Component\\Debug\\Exception\\FatalErrorException",
    "file": "/var/www/vendor/laravel/passport/src/Guards/TokenGuard.php",
    "line": 218,
    "trace": []
}
```

And I fixed the problem (for now) by adding: `Passport::$unserializesCookies = true;` in my `AuthServiceProvider`;

Anyway, it could be nice to know that something has failed :) (maybe I did something wrong during the install process)
