usage can see  example.CompletableFutures
Hi @slandelle, I offer PR with a new factory for Netty's Channels #1584. I've also added a specific prefix for that group.

Was not sure about `config.getThreadPoolName() + "-timer"`, decided to keep it as we have it now.
Hi, I find the delay between RequestTimeout and the time corresponding future completes by a timeout exception is quite long. Below is my test.

version:  

```xml
<dependency>
	<groupId>org.asynchttpclient</groupId>
	<artifactId>async-http-client</artifactId>
	<version>2.10.4</version>
</dependency>
```

test code:

```java
@RequestMapping("/api/timeout_test")
public BaseApiResponse<Long> timeoutTest() {
    long timeout = 1000;
    try {
        Thread.sleep(timeout);
    } catch (InterruptedException e) {
        e.printStackTrace();
    }
    BaseApiResponse<Long> objectBaseApiResponse = new BaseApiResponse<>();
    objectBaseApiResponse.setData(timeout);
    return objectBaseApiResponse;
}

@RequestMapping("/api/timeout")
public BaseApiResponse<String> timeout() {

    DefaultAsyncHttpClientConfig.Builder builder = new DefaultAsyncHttpClientConfig.Builder();
    builder.setConnectTimeout(5);
    AsyncHttpClient client = asyncHttpClient(builder);
    int timeout = 20;
    String url = "http://localhost:8080/api/timeout_test";

    BaseApiResponse<String> response = new BaseApiResponse<>();
    RequestBuilder requestBuilder = new RequestBuilder();
    Request request = requestBuilder.setUrl(url).setRequestTimeout(timeout).build();

    long beforeFutureCreated = System.currentTimeMillis();
    ListenableFuture<Response> responseListenableFuture = client.executeRequest(request);
    long futureCreated = System.currentTimeMillis();

    responseListenableFuture.addListener(() -> {
        long futureComplete = System.currentTimeMillis();
        String msg = String.format("future creation: %s, future complete: %s", futureCreated - beforeFutureCreated, futureComplete - beforeFutureCreated);
        response.setMessage(msg);
    }, Runnable::run);
    try {
        responseListenableFuture.get();
    } catch (Exception e) {
        e.printStackTrace();
    }
    return response;
}
```


result:

I tried many times, and the future complete time is always much longer than 20ms. It doesn't matter if I use a pre-created AsyncHttpClient or create a new one on each request.


```json
{"code":0,"message":"future creation: 0, future complete: 103","data":null}
{"code":0,"message":"future creation: 0, future complete: 85","data":null}
{"code":0,"message":"future creation: 1, future complete: 87","data":null}
{"code":0,"message":"future creation: 1, future complete: 113","data":null}
```

log: 

```
java.util.concurrent.TimeoutException: Request timeout to localhost/127.0.0.1:8080 after 20 ms
```
What if I want to provide the community with the ability to support the unix domain socket protocol? If yes, how long will the code be incorporated?
Run up a socks proxy, for example Tor browser proxy on port 9150

Run this code


```
> import org.asynchttpclient.AsyncHttpClient;
> import org.asynchttpclient.Response;
> import org.asynchttpclient.proxy.ProxyType;
> 
> import java.util.concurrent.Future;
> 
> import static org.asynchttpclient.Dsl.*;
> 
> public class TorDNSIssue {
> 
>     public static void main(String[] args) throws Exception {
> 
>         AsyncHttpClient c = asyncHttpClient(config().setProxyServer(proxyServer("localhost", 9150).setProxyType(ProxyType.SOCKS_V5)));
> 
>         Future<Response> whenResponse = c.prepareGet("http://check.expyuzz4wqqyqhjn.onion").execute();
> 
>         Response response = whenResponse.get();
> 
>         System.out.println(response);
> 
>     }
> }
```

I get 

```
Exception in thread "main" java.util.concurrent.ExecutionException: java.net.UnknownHostException: check.expyuzz4wqqyqhjn.onion
	at java.util.concurrent.CompletableFuture.reportGet(CompletableFuture.java:357)
	at java.util.concurrent.CompletableFuture.get(CompletableFuture.java:1895)
	at org.asynchttpclient.netty.NettyResponseFuture.get(NettyResponseFuture.java:201)
	at playpen.sttp.TorDNSIssue.main(TorDNSIssue.java:19)
Caused by: java.net.UnknownHostException: check.expyuzz4wqqyqhjn.onion
	at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)
	at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:929)
	at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1324)
	at java.net.InetAddress.getAllByName0(InetAddress.java:1277)
	at java.net.InetAddress.getAllByName(InetAddress.java:1193)
	at java.net.InetAddress.getAllByName(InetAddress.java:1127)
	at io.netty.util.internal.SocketUtils$9.run(SocketUtils.java:159)
	at io.netty.util.internal.SocketUtils$9.run(SocketUtils.java:156)
	at java.security.AccessController.doPrivileged(Native Method)
	at io.netty.util.internal.SocketUtils.allAddressesByName(SocketUtils.java:156)
```

If I point it at ```https://check.torproject.org/``` it works fine

Do I have to do something else to make it not fail?

Thanks
Hello, dear open source contributors! When can you support the Unix domain socket protocol? I have simply verified the feasibility of this function through intrusive modification, and the workload is within three hundred lines of code; but limited by the company's internal open source process, I can not provide you with the source code.

Discussed in #1627, but spinning off as it's a separate issue.

Under load, when using the `NettyReactiveStreamsBody`, I can reliably reproduce the following error:

```
[info] java.lang.IllegalArgumentException: Duplicate handler name: request-body-streamer
[info] 	at io.netty.channel.DefaultChannelPipeline.checkDuplicateName(DefaultChannelPipeline.java:1066)
[info] 	at io.netty.channel.DefaultChannelPipeline.filterName(DefaultChannelPipeline.java:284)
[info] 	at io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:204)
[info] 	at io.netty.channel.DefaultChannelPipeline.addLast(DefaultChannelPipeline.java:195)
[info] 	at org.asynchttpclient.netty.request.body.NettyReactiveStreamsBody.write(NettyReactiveStreamsBody.java:59)
[info] 	at org.asynchttpclient.netty.request.NettyRequestSender.writeRequest(NettyRequestSender.java:426)
[info] 	at org.asynchttpclient.netty.request.NettyRequestSender.sendRequestWithOpenChannel(NettyRequestSender.java:259)
[info] 	at org.asynchttpclient.netty.request.NettyRequestSender.sendRequestWithCertainForceConnect(NettyRequestSender.java:141)
[info] 	at org.asynchttpclient.netty.request.NettyRequestSender.sendRequest(NettyRequestSender.java:113)
[info] 	at org.asynchttpclient.DefaultAsyncHttpClient.execute(DefaultAsyncHttpClient.java:241)
[info] 	at org.asynchttpclient.DefaultAsyncHttpClient.executeRequest(DefaultAsyncHttpClient.java:210)
```

I have a [Scala reproduction with http4s](https://github.com/rossabaker/http4s-bugs/blob/issue-2779).  It can be seen with `sbt run`.

The problem is that that AHC offers the channel back to the pool manager as soon as the last response chunk is read, which causes a race condition against the `NettySubscriber`'s completion.  If `removeFromPipeline` is not called before the channel is offered back to the pool and polled out to another reactive streams request, we hit the exception.

A workaround is to remove the pipeline in a hook in `AsyncHandler`:

```scala
      override def onConnectionOffer(channel: Channel) {
        try channel.pipeline.remove("request-body-streamer")
        catch {
          case nse: NoSuchElementException => // this is just a cleanup of last resort
        }
      }
```

This works, but is bad for a couple reasons:

1. It runs regardless of the body type of the request.
2. The name of the pipeline is a private detail of the `NettySubscriber`.

Alternatively, `NettyReactiveStreamsBody` could remove the existing one if the `addLast` call fails, and then retry adding a subscriber.  This isn't the cleanest solution, but at least keeps it to one class.  I'm going with the `onConnectionOffer` hack for now, but can work on a PR for this alternative solution unless there's a better hook that I'm missing.

# Task Description

In our company we've had to fork the [sonar-stash](https://github.com/AmadeusITGroup/sonar-stash) project and make it support SPNEGO using our in-house library which handles the SPNEGO/Kerberos authentication. We forked the [sonar-stash](https://github.com/AmadeusITGroup/sonar-stash) project in order to make it support SPNEGO/Kerberos via our own in-house library. The [sonar-stash](https://github.com/AmadeusITGroup/sonar-stash) uses the `async-http-client` for handling it's HTTP requests.

What happens is that both our in-house SPNEGO/Kerberos library and the `async-http-client` library are trying to set the `Authorization` header. From the looks of it, our library kicks in and does it's job, but then the `async-http-client` also kicks in and wipes out the token and sets an incorrect one and then the authentication and authorization negotiation fails.

# Proposal

We would like to propose adding a simple boolean property in the `SPNEGO` part of the switch case in `perConnectionAuthorizationHeader` in `AuthenticatorUtils`. This way it will be possible to disable SPNEGO by passing a property like `org.asynchttpclient.disable.spnego.interceptor=true`.

This fixes things for us and we'd be happy to submit a pull request for it.

Please, advise!

Both **Request timeout** and **Read timeout** throw the same java.util.concurrent.TimeoutException
`java.util.concurrent.TimeoutException: Request timeout to www.baidu.com after 3000 ms`

it`s not convenient to catch the real exception

i suggest to throw **AhcRequestTimeoutException And AhcReadTimeoutException** instead of logging the timeout message in RequestTimeoutTimerTask.java or ReadTimeoutTimerTask.java
