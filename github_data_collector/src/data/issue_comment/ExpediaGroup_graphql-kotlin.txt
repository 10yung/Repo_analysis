### :pencil: Description
First pass at the upgrade. Opening draft for comments. The only thing failing right now is the tests that validate the schema printer for federation.

We need to exclude directive definitions with the new description format of using `"` instead of `#`. I am not a RegEx master so does someone have a better way of doing that?

This PR would make it a lot simpler: https://github.com/graphql-java/graphql-java/pull/1756

### :link: Related Issues
* Fixes https://github.com/ExpediaGroup/graphql-kotlin/issues/565
* Fixes https://github.com/ExpediaGroup/graphql-kotlin/issues/533
* Depends on https://github.com/graphql-java/graphql-java/pull/1756
**Is your feature request related to a problem? Please describe.**
We are using Spring Boot 2.2.2. The latest version released is 2.2.3. We should update to include all the latest bug fixes in Spring.

This is not required for our 2.0 release and can be picked up at any time.

**Additional context**
https://github.com/spring-projects/spring-boot/releases/tag/v2.2.3.RELEASE

**Describe the solution you'd like**
GraphQL Java released a new major version, 14.0. There are some breaking changes which look like they will impact us and it will not be a simple version update. However there are lots of bug fixes and other issues that we were hoping to be fixed that have been closed in this release.

We should try to get this out in 2.0.0. There shouldn't be any additional breaking changes for our library users but it will be a great finisher to add into this release

**Additional context**
https://github.com/graphql-java/graphql-java/releases/tag/v14.0

### :pencil: Description
Following the Message Flow section of the spec closer, there should be the following callbacks:

onConnect (this would occur on GQL_CONNECTION_INIT and result should be added to the context for subscriptions)
onOperation (this would occur on GQL_START before running the subscription)
onOperationDone (this would occur on GQL_STOP before? stopping the subscription)
In the Apollo Subscription Server, they have two differences from above:

They call onOperationDone onOperationComplete
They added an onDisconnect event (this would occur on GQL_CONNECTION_TERMINATE before? terminating the session)

### :link: Related Issues
#543 
How would you recommend hooking into the onConnect event for subscriptions, similar to here: 

https://www.apollographql.com/docs/graphql-subscriptions/authentication/
**Is your feature request related to a problem? Please describe.**
Currently, the schema generator can only produce descriptions for functions, types, etc. with # comments instead of quote descriptions (with " or """). This is problematic as Apollo servers with Federation strip these # descriptions away but allows quoted descriptions, this is intentional as # comments for descriptions are depreciated.

**Describe the solution you'd like**
Graphql-java has already fixed this but the fix isn't out as a major release yet. Either wait for that to come out, use a daily release version that has this feature (unlikely), or find a way to support it within this library (I don't see how that is possible without making a custom schema printer).

**Additional context**
The changes graphql-java made can be seen in this PR: https://github.com/graphql-java/graphql-java/pull/1609.

**Library Version**
1.4.2

**Describe the bug**
Declaring a Kotlin Boolean property with a prefix of "is" causes the default `KotlinDataFetcherFactoryProvider` to return a graphql-java `PropertyDataFetcher` with a name that does not resolve as expected.

Kotlin Boolean properties with an "is" prefix generate get methods without an additional prefix, e.g: `val isFancy: Boolean` yields a generated method of `boolean isFancy()` but `PropertyDataFetcher`'s [reflective method lookup](https://github.com/graphql-java/graphql-java/blob/master/src/main/java/graphql/schema/PropertyDataFetcher.java#L166) only considers methods with an _additional_ "is" or "get" prefix. This causes data fetching to fail at query time.

This results in additional unexpected behavior if Boolean properties `isFancy` and `fancy` are exposed on the same object (though this is admittedly a contrived scenario). `PropertyDataFetcher` will resolve `fancy` to point at the `isFancy` property when queried, and attempting to fetch `isFancy` will produce an error.

**To Reproduce**
Steps to reproduce the behavior.
- Schema Configuration
Default
- Kotlin code used to generate the schema
```kotlin
class Test {
    val isFancy: Boolean get() = true
    val fancy: Boolean get() = false
}

// Pass TopLevelObject(Query()) to toSchema()
class Query {
    fun test() = Test()
}
```
Queries to reproduce:
```graphql
# Cannot fetch the isFancy property
query LookupError {
  test {
    isFancy
  }
}

# Fetches the isFancy property, not fancy (returns true rather than false)
query WrongProperty {
  test {
    fancy
  }
}
```

**Expected behavior**
The generated data fetchers fetch the Kotlin object properties with names matching the generated schema.

**Workaround**
Solving the issue completely may involve either upstream changes for graphql-java's `PropertyDataFetcher` or reimplementing it with Kotlin-aware behavior in graphql-kotlin to resolve the ambiguity between is-prefixed and unprefixed Boolean properties. The first issue illustrated can be worked around by replacing the `KotlinDataFetcherFactoryProvider` as follows:

```kotlin
class FixedDataFetcherFactoryProvider(
    hooks: SchemaGeneratorHooks = NoopSchemaGeneratorHooks
) : KotlinDataFetcherFactoryProvider(hooks) {
    @ExperimentalStdlibApi // for typeOf
    override fun propertyDataFetcherFactory(
        kClass: KClass<*>,
        kProperty: KProperty<*>
    ) = DataFetcherFactory<Any> {
        if (kProperty.name.startsWith("is")
            && kProperty.returnType == typeOf<Boolean>()
            && kProperty.name.length > 2
        ) {
            // Omit "is" prefix that PropertyDataFetcher will add back
            PropertyDataFetcher(kProperty.name.substring(2))
        } else PropertyDataFetcher(kProperty.name)
    }
}
```

**Library Version**
1.4.2

**Describe the bug**
Im using graphql-kotlin to build the schema for graphql-java (because I can't switch to WebFlux at the moment). I'd like to use Apollo uploads but they don't quite work. The schema is created correctly but the datafetcher throws at runtime.

<details>
  <summary>Stack trace</summary>

```
java.lang.IllegalArgumentException: No serializer found for class java.io.FileDescriptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.apache.catalina.core.ApplicationPart["inputStream"]->java.io.FileInputStream["fd"])
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3922)
	at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3853)
	at com.expediagroup.graphql.execution.FunctionDataFetcher.convertParameterValue(FunctionDataFetcher.kt:85)
	at com.expediagroup.graphql.execution.FunctionDataFetcher.mapParameterToValue(FunctionDataFetcher.kt:79)
	at com.expediagroup.graphql.execution.FunctionDataFetcher.get(FunctionDataFetcher.kt:58)
	at graphql.execution.instrumentation.dataloader.DataLoaderDispatcherInstrumentation.lambda$instrumentDataFetcher$0(DataLoaderDispatcherInstrumentation.java:86)
	at graphql.execution.ExecutionStrategy.fetchField(ExecutionStrategy.java:270)
	at graphql.execution.ExecutionStrategy.resolveFieldWithInfo(ExecutionStrategy.java:198)
	at graphql.execution.AsyncExecutionStrategy.execute(AsyncExecutionStrategy.java:74)
	at graphql.execution.Execution.executeOperation(Execution.java:161)
	at graphql.execution.Execution.execute(Execution.java:102)
	at graphql.GraphQL.execute(GraphQL.java:605)
	at graphql.GraphQL.parseValidateAndExecute(GraphQL.java:538)
	at graphql.GraphQL.executeAsync(GraphQL.java:502)
	at graphql.servlet.core.GraphQLQueryInvoker.query(GraphQLQueryInvoker.java:106)
	at graphql.servlet.core.GraphQLQueryInvoker.query(GraphQLQueryInvoker.java:102)
	at graphql.servlet.core.GraphQLQueryInvoker.queryAsync(GraphQLQueryInvoker.java:51)
	at graphql.servlet.core.GraphQLQueryInvoker.query(GraphQLQueryInvoker.java:47)
	at graphql.servlet.AbstractGraphQLHttpServlet.query(AbstractGraphQLHttpServlet.java:374)
	at graphql.servlet.AbstractGraphQLHttpServlet.lambda$init$4(AbstractGraphQLHttpServlet.java:220)
	at graphql.servlet.AbstractGraphQLHttpServlet.doRequest(AbstractGraphQLHttpServlet.java:342)
	at graphql.servlet.AbstractGraphQLHttpServlet.doRequestAsync(AbstractGraphQLHttpServlet.java:333)
	at graphql.servlet.AbstractGraphQLHttpServlet.doPost(AbstractGraphQLHttpServlet.java:365)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:186)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:126)
	at org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:90)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:118)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:158)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.AbstractAuthenticationProcessingFilter.doFilter(AbstractAuthenticationProcessingFilter.java:200)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.csrf.CsrfFilter.doFilterInternal(CsrfFilter.java:117)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:92)
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:77)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:358)
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:271)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119)
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202)
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526)
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861)
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579)
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
	at java.lang.Thread.run(Thread.java:748)
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: No serializer found for class java.io.FileDescriptor and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: org.apache.catalina.core.ApplicationPart["inputStream"]->java.io.FileInputStream["fd"])
	at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:77)
	at com.fasterxml.jackson.databind.SerializerProvider.reportBadDefinition(SerializerProvider.java:1191)
	at com.fasterxml.jackson.databind.DatabindContext.reportBadDefinition(DatabindContext.java:403)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.failForEmpty(UnknownSerializer.java:71)
	at com.fasterxml.jackson.databind.ser.impl.UnknownSerializer.serialize(UnknownSerializer.java:33)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:721)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.BeanPropertyWriter.serializeAsField(BeanPropertyWriter.java:727)
	at com.fasterxml.jackson.databind.ser.std.BeanSerializerBase.serializeFields(BeanSerializerBase.java:721)
	at com.fasterxml.jackson.databind.ser.BeanSerializer.serialize(BeanSerializer.java:166)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider._serialize(DefaultSerializerProvider.java:480)
	at com.fasterxml.jackson.databind.ser.DefaultSerializerProvider.serializeValue(DefaultSerializerProvider.java:319)
	at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3900)
	... 105 common frames omitted
```

</details>

The object passed to `FunctionDataFetcher.convertParameterValue()` already is of type `ApplicationPart`. It is passed to the jackson object mapper anyway. The object mapper then fails to deserialize the object.

https://github.com/ExpediaGroup/graphql-kotlin/blob/bd530a86049989206c946061172ab06b25e27728/graphql-kotlin-schema-generator/src/main/kotlin/com/expediagroup/graphql/execution/FunctionDataFetcher.kt#L86-L93

Code changed in master but has the same behavior:

https://github.com/ExpediaGroup/graphql-kotlin/blob/2259b9d9a23fd609952640bc7be2ee4a3906783d/graphql-kotlin-schema-generator/src/main/kotlin/com/expediagroup/graphql/execution/FunctionDataFetcher.kt#L74-L80

**To Reproduce**
Provide `graphql.servlet.core.ApolloScalars.Upload` as a ScalarType with Java type `org.apache.catalina.core.ApplicationPart` via `SchemaGeneratorHooks`. The correct Java type should be `javax.servlet.http.Part` but interfaces cannot be used as parameters. (Side question: why are interfaces forbidden for scalars?)

Create a mutation function that takes an `ApplicationPart` as a parameter.

Call the mutation, see https://github.com/jaydenseric/apollo-upload-examples

**Expected behavior**
The `Part` object should not be deserialized but passed to the function directly. Maybe skip mapping if actual and desired type are the same?

**Describe the bug**
Currently GH actions do not allow sharing secrets to build from forks (including PRs). This means that currently it is not possible to correctly integrate with codecov.io (which requires secret token) using GH actions.

**Expected behavior**
Codecov coverage diff is calculated for all PRs

**Related**
* [codecov issue](https://github.com/codecov/codecov-action/issues/29) - Is there a way to make this work with a PR from a fork
* [GH Action issue - make secrets available to builds of forks](https://github.community/t5/GitHub-Actions/Make-secrets-available-to-builds-of-forks/td-p/30678/highlight/true)
**Library Version**
1.4.2

**Describe the bug**
Annotation used for field inside input object seems to be ignored

**To Reproduce**
Run following test which executes a mutation with an object Input that has GraphQLName for field set

```
package expediabug

import com.expediagroup.graphql.TopLevelObject
import com.expediagroup.graphql.annotations.GraphQLName
import com.expediagroup.graphql.federation.FederatedSchemaGeneratorConfig
import com.expediagroup.graphql.federation.FederatedSchemaGeneratorHooks
import com.expediagroup.graphql.federation.execution.FederatedTypeRegistry
import com.expediagroup.graphql.federation.toFederatedSchema
import graphql.ExecutionInput
import graphql.GraphQL
import org.junit.jupiter.api.Test
import kotlin.test.assertTrue

val schema = """
    type Mutation {
      setActive(input: MutationInput!): String!
    }
    
    input MutationInput {
      itemID: String!
    }
    """.trimIndent()

data class Input(
    @GraphQLName("itemID")
    val itemId: String
)

class Mutation {
    fun setActive(input: Input) = input.itemId
}

class ExpediaBugTest {

    @Test
    fun shouldExecuteQuery() {
        // given:
        val config = FederatedSchemaGeneratorConfig(
            supportedPackages = listOf("expediabug"),
            hooks = FederatedSchemaGeneratorHooks(FederatedTypeRegistry())
        )
        val graphQL =
            GraphQL.newGraphQL(toFederatedSchema(config, mutations = listOf(TopLevelObject(Mutation())))).build()

        // and: a query
        val query = ExecutionInput.newExecutionInput().query("mutation { setActive (input: { itemID: \"1\" } ) }")

        // when:
        val executionResult = graphQL.execute(query)

        // then: no errors
        assertTrue(executionResult.errors.isEmpty())
    }
}
``` 

Actual behaviour: error contains
```
Exception while fetching data (/setActive) : Instantiation of [simple type, class expediabug.Input] value failed for JSON property itemId due to missing (therefore NULL) value for creator parameter itemId which is a non-nullable type
 at [Source: UNKNOWN; line: -1, column: -1] (through reference chain: expediabug.Input["itemId"])
```

**Expected behavior**
Query is executed

