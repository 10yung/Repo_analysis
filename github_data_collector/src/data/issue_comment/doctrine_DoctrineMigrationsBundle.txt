Related to https://github.com/symfony/symfony/pull/28810
This PR adds the new cofiguration options available in 3.x (see https://github.com/doctrine/DoctrineMigrationsBundle/pull/278) and deprecates the current settings.

This should allow a smooth transition to 3.x
We would like to reach the zero downtime deployment. The bottleneck is the database migration. There are existing theoretical solutions for this: https://www.youtube.com/watch?v=hMO63IC6R7c and here is a free book which covers this topic in the Chapter 3: https://developers.redhat.com/books/migrating-microservice-databases-relational-monolith-distributed-data/ .

For this support sometimes we would need 2 different migraiton files (eg: rename or remove column):
- pre deployment
- post deployment

Example:

We have this User Entity:

```php
<?php

namespace Example\UserBundle\Entity;
use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Table(name="user")
 * @ORM\Entity
 */
class User {

    /**
     * @var integer
     *
     * @ORM\Id
     * @ORM\Column(name="user_id", type="integer")
     * @ORM\GeneratedValue(strategy="AUTO")
     */
    protected $id;

    /**
     * @var string
     *
     * @ORM\Column(name="name", type="string", length=255, nullable=false)
     */
    protected $name;

    /**
     * @var string
     *
     * @ORM\Column(name="email", type="string", length=255, nullable=false)
     */
    protected $email;
}
```

And we want to rename the `email` field to `public_email`:

```php
    /**
     * @var string
     *
     * @ORM\Column(name="public_email", type="string", length=255, nullable=false)
     */
    protected $public_email;
```

Now I can run the `doctrine:migration:diff` command and I will get a new `VersionXXXXXXXXX.php` file. In that case we would get 2 version file, eg:

- `Version20191128125832pre.php` or `Version201911281258320.php` (add an extra `0`)
- `Version20191128125832post.php` or `Version201911281258321.php` (add an extra `1`)

> The numbers at the end may be better because of the natural sort.

Every version class would get a `@preDeploy` and a `@postDeploy` tag:

```php
/**
 * @preDeployment
 */
class Version201911281258320
{
    // ALTER TABLE ... ADD COLUMN public_email DEFAULT NULL, ALGORITHM=INPLACE, LOCK=NONE;
}
```

```php
/**
 * @postDeployment
 */
class Version201911281258321
{
    // In a for cycle: UPDATE ... SET public_email = email WHERE public_email IS NULL LIMIT 1000 <-- this limitation would come from config.
    // ALTER TABLE ... DROP COLUMN email;
}
```

If I want to use the zero downtime support, I could run `pre` and `post` migration files differently:

```shell
$ bin/console doctrine:migration:migrate -n --pre-only
$ make update-source-code
$ bin/console doctrine:migration:migrate -n --post-only
```

Of course, if somebody want to run both of them he/she can call without any option as earlier was used:

```shell
$ bin/console doctrine:migrations:migrate -n
# it runs every new "Version class"
```

This solution is:

- backward compatible
- supports the zero downtime deploy

If you think it may be interesting for you, I can start working on it. But if you think you don't want to implement this feature, I will create a custom bundle.
Adds to the bundle the support for https://github.com/doctrine/migrations/pull/858 (proposed doctrine/migrations 3.0)

Since doctrine/migrations 3.0 uses properly dependency injection, most of the stuff done before mo get entity manger, connection shard can be done via Symfony DI.

Closes https://github.com/doctrine/DoctrineMigrationsBundle/pull/270 https://github.com/doctrine/DoctrineMigrationsBundle/pull/264
Todo:

- [x] update documentation
- [x] tests
- [x] phpstan ?
- [x] xml schema
Composer updated this Bundle from 1.3.2 to 2.0.0. I wondered what has changed, but the [CHANGELOG](https://github.com/doctrine/DoctrineMigrationsBundle/blob/master/Changelog.md) file in this bundle was last updated in May 2015.
Since doctrine/migrations 2.1.0 (https://github.com/doctrine/migrations/pull/784) version there are new option `check_database_platform`.

I added support for this option.

My questions:
1) Should I specify in doc comment about `available since version`?
2) PR should be to master, or 2.0 branch? **master**
3) Should I update composer dependencies, or increase minimal `doctrine/migrations` version to `^2.1` to avoid `method_exists` check? **Yes**
As mentioned in #190 there's no setting for the diff command's schema provider. This adds a `schema_provider` setting.

Refs https://github.com/libero/content-store/pull/8#discussion_r279656101.
[+] new Parameter `connection` to the DoctrineMigrationsBundle that accept connection name like --db option.
After installing `doctrine/dbal` and `doctrine/doctrine-migrations-bundle` in a new `symfony/skeleton` project, I see this error:
```
Symfony operations: 3 recipes (578c60b4ddf56f6d595cb6a3655adeca)
  - Configuring doctrine/doctrine-cache-bundle (>=1.3.3): From auto-generated recipe
  - Configuring doctrine/doctrine-bundle (>=1.6): From github.com/symfony/recipes:master
  - Configuring doctrine/doctrine-migrations-bundle (>=1.2): From github.com/symfony/recipes:master
Executing script cache:clear [KO]
 [KO]
Script cache:clear returned with error code 1
!!
!!  In DoctrineExtension.php line 63:
!!
!!    To configure the ORM layer, you must first install the doctrine/orm package
!!    .
!!
!!
!!
Script @auto-scripts was called via post-update-cmd
```
A call to `bin/console` resulted in the same error.

To resolve this issue I have to manually edit `config/packages/doctrine.yaml` and remove the `orm`section (the code in `DoctrineExtension.php` does not return and continues with the ORM initialisation because the config key for `orm` exists). Does a recipe automatically assume the ORM is also being installed?
Use case:

We have two separate connections - one for general doctrine flow and one with administer permissions to perform migrations and schema maintenance. In order to perform migrations all our CI jobs and manual commands should be provided with `--db=migrations` command-line option.

It would be much easier if we can have a confiig option like

```yml
doctrine_migrations:
    connection: migrations
```

to skip this options for further calls