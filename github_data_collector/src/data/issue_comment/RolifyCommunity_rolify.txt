partial fix for #530 without the documentation update

* set appropriate version constraints for activerecord 5
* add additional constraint for mongoid 7 to help bundler find a resolvable set of gems
* specify gem has a dependency on Railties in the gemspec
- [ ] Rails version on active_record5 needs correct pinning to actually test against r5 and not r6 (#531)
- [ ] Mongoid 7 specs are timing out at 50 minutes with what appears to be a dependency resolution issue, so appraisal won't run locally
- [ ] Outdated documentation in spec/readme.md
We just upgraded to Ruby 2.7 and are seeing a deprecation warning from Rolify:

`/Users/nateburt/.rvm/gems/ruby-2.7.0/gems/rolify-5.2.0/lib/rolify.rb:30: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call`

Is there any work planned on this? If not I'm happy to take a stab at it and open up a PR.
https://github.com/RolifyCommunity/rolify/blob/199ca1e602da831cc06e37d36e820ba26ac65970/lib/rolify/adapters/active_record/role_adapter.rb#L60

The line of code above does not take into consideration other models that may be using the role. It will allow the system to delete a role that is not technically "empty".

Example: `Dog` and `Cat` are two models that uses rolify. They both have a role named `pet`. One day a `Cat` loses his `pet` role (via `remove_role`). The above line of code will check to see if any other `Cat` has the `pet` role. If we only had one `Cat`, that would mean the role is now empty, so the system then proceeds to delete the `pet` role. This is bad because no one checked `Dog`, who still has a `pet` role.

Sorry I do not have time to make a PR to fix this, but I just want to note it here so everyone is aware of this bug.

The resource relation in Role mode template should be marked as optional for rails 5+ compatibility.
Save people from having to look this up
I just discovered this repo and it seems like a great functionality that I'm looking for. It looks like there are a lot of open issues and even pull requests. Is this repo still maintained? Do you need help?

I'd like to add :display_name and :description fields to the Role model for clarity when assigning roles in my User management screen.

Will it break anything in Rolify if I just make a migration adding these fields to the model?
Lets say I have models: `course`, `course_questions`.  A user can be an `editor` of a course. being an editor of a course means you can modify related models, like `course_questions`

I want to find all of the `course_questions` a user can modify. I should be able to do that with a query like:

```
managed_courses = Course.with_role(:editor, user)
CourseQuestion.joins(:course).merge(managed_courses)
```

But, b/c `with_role` is using a `select`, it messes up the ids! So instead of selecting the attributes of `course_question`, it actually selects the attributes of `course` and this swapping out the id.

If I do
```
course_questions = CourseQuestion.joins(:course).merge(managed_courses)
course_questions.first.id # This is actually the id of the course, not the id course_modules.
```

TL;DR: Don't use the active record `#merge` method to determine if a user's role works on sub-resources.

My quick fix is:
```
managed_courses = Course.with_role(:editor, user)
CourseQuestion.joins(:course).where(courses: {id: managed_courses.pluck(:id)})
```
Rather than iterate through the entire roles array and then report if
there are any values returned, we can instead use any? with a block
that will short-circuit when the first truthy value is returned.

This changes the call signature for RoleAdapter#find_cached* to return
boolean rather than an array