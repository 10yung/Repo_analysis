Hey team, really enjoying using garden so far. I've been running into this issue where the default value of `fancy` for `--logger-type` does not play nicely with the terminal in my IDE (webstorm), and I'm constantly forgetting to pass the flag to change it to `basic`, which made me think this may be a useful feature. Apologies if this functionality is available and I somehow missed it, I've gone through the docs pretty thoroughly and haven't seen it mentioned.

### What should the user be able to do
Set a default value for global CLI options. I've thought of two ways this of implementing this (though I'm not familiar with the internals of the project so I'm sure you'll have better ideas).

**Idea A**. Set the default value for a global cli option via the `garden config` command. Example: 
```
$ garden config logger-type basic
âœ” Global default for CLI flag --logger-type set to 'basic'
```

**Idea B**: A `cli` key in the project configuration file. Example:
```yaml
kind: Project
name: myProject
cli:
    loggerType: basic
...
```
### Why do they want to do this
Like I mentioned above, I have an immediate need for this because remembering to pass the `--logger-type=basic` flag for every command is quite tedious. Other global options where I could see this being useful is `--log-level`, `--env`, and `--output`. 

#### Priority: Probably pretty low, though I would greatly appreciate it :)

Thanks!
Parker
The 3.0 version of the Terraform Google provider changed the usage of the region, zone and location fields, which resulted in errors when running `garden plugins kubernetes cluster-init`.
<!--  Thanks for sending a pull request!  Here are some tips for you:

1. If this is your first time, please read our contributor guidelines in the https://github.com/garden-io/garden/blob/master/CONTRIBUTING.md file.
2. Please label this pull request according to what type of issue you are addressing (see "What type of PR is this?" below)
3. Ensure you have added or run the appropriate tests for your PR.
4. If the PR is unfinished, add `WIP:` at the beginning of the title or use the Github Draft PR feature.
5. Please add at least two reviewers to the PR. Currently active maintainers are: @edvald, @thsig, @eysi09, @10ko and @solomonope.
-->

**What this PR does / why we need it**:
This PR introduces the ability of passying a `dataFormat` to the logging methods like:
```js
const someData: {
  key: "value",
}
log.info({ data: someData, dataFormat: "json" })
```
This way we can choose if we want to render the data as `json` or `yaml` (the current default).

The second commit removes some js files I found while writing the tests and adds a new tslint rule [tslint-no-focused-test](https://github.com/jasonmendes/tslint-no-focused-test) which fails if you forget `only` in your tests. :)

<!--  Thanks for sending a pull request!  Here are some tips for you:

1. If this is your first time, please read our contributor guidelines in the https://github.com/garden-io/garden/blob/master/CONTRIBUTING.md file.
2. Please label this pull request according to what type of issue you are addressing (see "What type of PR is this?" below)
3. Ensure you have added or run the appropriate tests for your PR.
4. If the PR is unfinished, add `WIP:` at the beginning of the title or use the Github Draft PR feature.
5. Please add at least two reviewers to the PR. Currently active maintainers are: @edvald, @thsig, @eysi09, @10ko and @solomonope.
-->

**What this PR does / why we need it**:

Before this fix, failing tasks (e.g. with an invalid command or args configured) would succeed.

Also added integration tests for the failing case for tests and tasks for our k8s plugins, and fixed/improved logging of test/task logs and errors.
**What this PR does / why we need it**:

What it says on the tin ^ 

**Which issue(s) this PR fixes**:

Closes #1493

**What this PR does / why we need it**:

This adds an optional `disabled` boolean field to all modules, and
where applicable to service, task and test config schemas.

The semantics are explained both in docs and unit tests, but they are
as follows:

- Disabling a module disables all services, tasks and tests within it.
- A disabled module may still be built if it is a build dependency of
  another module.
- Disabled services are never deployed and are ignored if listed as
  runtime dependencies.
- Disabled tasks are never run and are ignored if listed as
  runtime dependencies.
- Disabled tests are never run.
- An error if throw if trying to explicitly run a service, task or test
  via `garden run ...`, unless the `--force` flag is set.

**Which issue(s) this PR fixes**:

#1250

**Special notes for your reviewer**:

I've added a lot of tests here, but this is fairly difficult to cover. Please look for potential holes, both in terms of test coverage and functionality, and perhaps try testing manually if you're unsure if something works as expected.

## Bug

### Current Behavior

`garden run test <module> <test>` completely locks its process after `Getting build status for v-xxxx Done(took **0.7sec)` if a key within a secret is not available on kubernetes.
It uses 0% cpu and the process cannot be terminated with ctrl+c; only after terminating the garden process from system monitor the terminal is usable again.

This does not happen with `garden dev` for example which throws an error that a key within the secret is undefined.

### Expected behavior

`garden run test <module> <test>` should fail gracefully if secret referenced in garden.yml does not exist.

### Reproducible example

Define a test for a container module with environment variable that refers a secret which doesn't exist.

The exact config that failed for me was the following:

```
name: api
kind: Module
description: API Service
type: container
include:
  - packages/api/**
  - packages/service-contracts/**
  - package*.json
  - lerna.json
dockerfile: packages/api/Dockerfile
hotReload:
  sync:
    - source: ./packages/api/dist
      target: /app/packages/api/dist
tests:
  - name: it-postgres
    command: [lerna, run, test:it:postgres]
    dependencies:
      - cloudsql-proxy
    env:
      PGHOST: cloudsql-proxy
      PGDATABASE: postgres
      PGPORT: 5432
      PGUSER: 
        secretRef:
          name: cloudsql-db-credentials
          key: username
      PGPASSWORD:
        secretRef:
          name: cloudsql-db-credentials
          key: password

```
The key `username` wasn't defined in the secret `cloudsql-db-credentials`.


### Workaround

Fix the faulty secret reference.

### Your environment
MacOS
`garden version`: 0.11.0

This is basically the issue version of PR #1244 which was never completed.

There are likely several different ways of achieving this, so all tips and pointers would be greatly appreciated. The PR referenced above uses `entr` to restart the process inside the container when the binary it watches changes. See that link for more details.
Similar to our Maven module type, we could add a Go module type that is optimised for Go workflows.

Potential features:

* Downloads the `go` binary for users
* Ships with a default Dockerfile that is setup to support hot-reload
* Builds the binary locally and adds only the build to the image

Would be great to get feedback from more seasoned Go developers on design and potential optimisations.

Some preliminary work was made in #1271. 
<!--  Thanks for sending a pull request!  Here are some tips for you:

1. If this is your first time, please read our contributor guidelines in the https://github.com/garden-io/garden/blob/master/CONTRIBUTING.md file.
2. Please label this pull request according to what type of issue you are addressing (see "What type of PR is this?" below)
3. Ensure you have added or run the appropriate tests for your PR.
4. If the PR is unfinished, add `WIP:` at the beginning of the title or use the Github Draft PR feature.
5. Please add at least two reviewers to the PR. Currently active maintainers are: @edvald, @thsig, @eysi09, @10ko and @solomonope.
-->

**What this PR does / why we need it**:
This PR introduces two changes:
- Detail page about telemetry with samples of data we collect.
- Workaround for a race condition in the segment client which would cause the first event to potentially never been sent to Segment. See [here](https://github.com/segmentio/analytics-node/issues/219).

**Which issue(s) this PR fixes**:

Fixes #1489

**Special notes for your reviewer**:
