Currently when UglifyJS compresses a given input file that comes
with a source-map, but the source-map does not have mappings for
all code parts in the input file. e.g. the input file has been generated
and some specific code-parts have been generated and are not
originating from any source-file.

In that case if mappings before the "generated code" are collected, and
the original file location for the "generated code" is determined after previous
mappings for the same line have been recorded, UglifyJS just ignores the fact that
there is no original location and the previous segment is not terminated. This causes
the "generated code" incorrectly to be mapped to the previous segment/
original source location.


----

This change also causes some difference for the `pr-3040` test which contained a completely misleading source-map.. so while being at it order to adjust for the correct expected source-map, I've updated
the input source-map to actually map properly.. using the following mappings:

```ts
s.addMapping({generated: {line: 3, column: 0}, original: {line: 1, column: 0}, source: 'input2.js'}); // const
s.addMapping({generated: {line: 3, column: 4}, original: {line: 1, column: 14}, source: 'input2.js'}); // _require = require("bar")
s.addMapping({generated: {line: 4, column: 1}, original: {line: 1, column: 7}, source: 'input2.js'}); // {foo}

s.addMapping({generated: {line: 6, column: 0}, original: {line: 2, column: 0}, source: 'input2.js'}); // const
s.addMapping({generated: {line: 6, column: 4}, original: {line: 2, column: 16}, source: 'input2.js'}); // require require("world")
s.addMapping({generated: {line: 7, column: 1}, original: {line: 2, column: 7}, source: 'input2.js'}); // {hello}

s.addMapping({generated: {line: 9, column: 0}, original: {line: 4, column: 0}, source: 'input2.js'}); // foo.x()
s.addMapping({generated: {line: 9, column: 17}, original: {line: 4, column: 6}, source: 'input2.js'}); // "..." / spread
s.addMapping({generated: {line: 9, column: 36}, original: {line: 4, column: 9}, source: 'input2.js'}); // foo.y(hello.z)
```

---

We should also note that this causes sauce-maps to be larger than before because the termination segments are added, and these are unavoidable if correct source-maps need to be generated..
Recently, @lwr found that there was something wrong when using `uglify-es@3.3.9` to uglify a code snippet where there were inline functions, accessing variables through more than two level of scopes, in comparison with using `uglify-js@3.3.9`. It seemed like the bug of `uglify-es`, please check it.

### How Do We Reproduce?

input:

```js
!function () {
    var one = 1;
    var two = 2;

    f1();

    function f1() { f2(); }

    function f2() { f3(two); }

    function f3(two) {
        console.log(one, two); // 1, 2
    }
}();
```

output with `uglify-es@3.3.9`:

```js
!function() {
    var n = 1, o = 2;
    !function() {
        o = o, console.log(n, o); // 1, undefined
        var o;
    }();
}();
```

output with `uglify-js@3.3.9`:

```js
!function() {
    var o, n = 1;
    o = 2, console.log(n, o); // 1, 2
}();
```
**Bug report**

**Uglify version uglify-es@3.1.9**
````javascript
class B {
    constructor(one, two, emptyVal, boolVal, callback) {
        console.log(one + two + emptyVal + boolVal);
        this._callback = callback;
    }
    runAction() {
        return this._callback();
    }
}

let A = class A1 {
    constructor() {}
    configureAction() {
        // This is the important line. 
        let run = () => { this.runConfigureTasks(); return Promise.resolve('success'); };
        return new class extends B {
            constructor() {
                super('one', 'two', undefined, true, run);
            }
        };
    }

    runConfigureTasks() {
        console.log('configuring');
    }
}
````

````javascript
var uglifyes = require("uglify-es");
const code = `paste in code from above`
const ugly = uglifyes.minify(code);
console.log(ugly);
````
<!--
    A complete parsable JS program exhibiting the issue with
    UglifyJS alone - without third party tools or libraries.
    Ideally the input should be as small as possible.
    Post a link to a gist if necessary.

    Issues without a reproducible test case will be closed.
-->

**JavaScript output or error produced.**
If you run the above, you'll see the minification result in (new lines and comment added for easier reading). **Note that the command line doesn't have this bug** This only occurs when using the API.
````javascript
class B { 
    constructor(s, o, c, n, r) { console.log(s + o + c + n), this._callback = r } 
    runAction() { 
        return this._callback() 
    } 
} 
let A = class { 
    constructor() { }
    configureAction() { 
        return new class extends B { 
            constructor() { 
                // This is a problem. "this" now refers to new class extends B, not A.
                super("one", "two", void 0, !0, () => (this.runConfigureTasks(), Promise.resolve("success"))) 
            } 
        } 
    }
    runConfigureTasks() { 
        console.log("configuring") 
    } 
};


With this change, parsing
```
var x = {
  raw: 3,
  "quoted": 5
};
```
in say acorn, then running `from_mozilla_ast`, then printing it, will emit the same output as the input, that is, the quoted property remains quoted.
**Bug report or feature request?**
Bug
<!-- Note: sub-optimal but correct code is not a bug -->

**Uglify version (`uglifyjs -V`)**
uglify-es 3.3.9

**JavaScript input**

<!--
    A complete parsable JS program exhibiting the issue with
    UglifyJS alone - without third party tools or libraries.
    Ideally the input should be as small as possible.
    Post a link to a gist if necessary.

    Issues without a reproducible test case will be closed.
-->
```javascript
function foo() {
    {
        const bar = [];
        bar.push("foo");
        return test(bar);
    }

    function test(bar) {
        {
            console.log(bar[0]);
        }
    }
}
```
**The `uglifyjs` CLI command executed or `minify()` options used.**
uglifyjs .\uglifyJS.js -c -m -o out.js --verbose

**JavaScript output or error produced.**
function foo(){{const o=[];return o.push("foo"),o=o,void console.log(o[0])}var o}

o=o is not valid in this case.

<!--
    Note: `uglify-js` only supports JavaScript.
    Those wishing to minify ES6+ should transpile first.
-->

As per the change help shows up if the user fires in `uglifyjs` without any further arguments.
For instance, the user may fire in `uglifyjs` just to ensure that the installation went right.
ðŸ¤” 
**Feature request**

**Uglify version (`uglifyjs -V`)**
uglify-es 3.3.9
https://www.npmjs.com/package/uglify-es

**JavaScript input**

```js
// Calculator.js
class Calculator {
    evaluate(str, op, i) {
        str = str.split(' ');
        for (op of [
            ['-', (a, b) => a - b],
            ['+', (a, b) => a + b]
        ]) {
            while (~(i = str.indexOf(op))) {
                str.splice(--i, 3, o[op](+str[i], +str[i + 2]));
            }
        }
        return +str;
    }
}
```

**The `uglifyjs` CLI command executed or `minify()` options used.**
`uglifyjs Calculator.js --compress`

**JavaScript output**

```js
class Calculator{evaluate(str,op,i){for(op of(str=str.split(" "),[["-",(a,b)=>a-b],["+",(a,b)=>a+b]]))for(;~(i=str.indexOf(op));)str.splice(--i,3,o[op](+str[i],+str[i+2]));return+str}}
```

There is more compact output:

```js
class Calculator{evaluate(str,op,i){str=str.split(" ");for(op of [["-",(a,b)=>a-b],["+",(a,b)=>a+b]])for(;~(i=str.indexOf(op));)str.splice(--i,3,o[op](+str[i],+str[i+2]));return+str}}
```

As of now, uglify-es minifies

```js
str = str.split(' ');
for (op of [...])
```

into comma expression and parentheses

```js
for(op of(str=str.split(" "),[...]))
```

but straight variant is shorter:

```js
str=str.split(' ');for(op of [...])
```
**Feature request**

Idea to mangle repetitive object properties.

<!-- Note: sub-optimal but correct code is not a bug -->

**Uglify version (`uglifyjs -V`)**
3.4.9

**Uglify script**
Lets assume this default code to test compression:
```js
var UglifyJS = require('uglify-js');
var code = ``; // see following examples
var result = UglifyJS.minify(code, {
  toplevel: true,
  mangle: {
    properties: false,
    toplevel: true
  }
});
console.log(result.code);
```

**Repetitive object properties access example**
Lets assume a script which inserts 10 text nodes in the DOM, or in a more generic manner, a script which gets many times the same property name from same or different objects.
```js
var code = `
(function() {
  var doc = new DocumentFragment();
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  doc.appendChild(new Text('a'));
  document.body.appendChild(doc);
})();
`;
```
In this example, the property `appendChild` is called 11 times.
The output code is:
```js
!function(){var e=new DocumentFragment;e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),e.appendChild(new Text("a")),document.body.appendChild(e)}();
```
The length is **303B**
As we can see, `appendChild` is repeated many times.

If we use `properties: true` the output becomes:
```js
!function(){var e=new DocumentFragment;e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),e.e(new Text("a")),document.n.e(e)}();
```
The length is **210B**
**But the code becomes invalid !**

**Repetitive object properties access optimization**
Lets rewrite the code in such a manner than an object property, is not accessed with _dot_ but with a function instead. `doc.appendChild` becomes `appendChild(doc)`.
```js
var code = `
function appendChild(obj) {
  return obj.appendChild.bind(obj);
}
(function() {
  var doc = new DocumentFragment();
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(doc)(new Text('a'));
  appendChild(document.body)(doc);
})();
`;
```
The output is:
```js
function e(e){return e.appendChild.bind(e)}var n;e(n=new DocumentFragment)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(n)(new Text("a")),e(document.body)(n);
```
The length is **250B**
And more important: the code is totally valid !

`obj.property1.property2.property3.property4` could be written as ` property4( property3( property2( property1(obj))))`  which could potentially compress to `a(b(c(d(e))))`

**Introducing this method to uglify js**
The parser could detect repetitive properties access, and convert them to functions to enable stronger compression. I suggest kind of: `properties: true | false | 'none' | 'hard' | 'soft'`.
Where `false` map to `'none'`, `true`map to `'hard'` and have the same current behavior. Plus the introduction of `'soft'` which tries to convert properties to functions (only if resulting size is smaller).
This technique could save a lot of bytes in classes using long property names.

**Performances**
This is a simple test of performances on chrome 70 : 
```js
function appendChild(obj) {
  return obj.appendChild.bind(obj);
}
(function() {
  var doc = new DocumentFragment();
  console.time('perf');
  for (let i = 0; i < 1e6; i++) {
    // doc.appendChild(new Text(Math.random().toString())); // 1450ms
    appendChild(doc, new Text(Math.random().toString())); // 1823ms~1500ms
  }
  console.timeEnd('perf');
  console.log(doc.firstChild.wholeText.length);
})();
```
As we can see, V8 keeps really good performances on this pattern.

**PS:** I present here a generic idea how to optimize object's properties with functions for compression.
This method would probably requires some adjustments according to the access context: call, set, get ?
```js
function appendChildCall(obj) {
  return obj.appendChild.bind(obj);
}
// document.body.appendChild(new Text('a'));
appendChildCall(document.body)(new Text('a'));

// --- OR
function appendChildCall(obj) {
  return obj.appendChild.apply(obj, slice.call(arguments, 1));
}
// document.body.appendChild(new Text('a'));
appendChildCall(document.body, new Text('a'));


// ----
function appendChildGet(obj) {
  return obj.appendChild;
}
// console.log(document.body.appendChild === document.documentElement.appendChild);
console.log(appendChildGet(document.body) === appendChildGet(document.documentElement));

// ----
function appendChildSet(obj, value) {
  obj.appendChild = value;
}
// document.body.appendChild = function() { console.log('appendChild '); };
appendChildSet(document.body, function() { console.log('appendChild '); });
```
**Bug report or feature request?**

feature req

**Uglify version (`uglifyjs -V`)**

3.4.9

**JavaScript input**

```
for(var i = 0; i < 3; i += 1){
  console.log(i);
}
```

**The `uglifyjs` CLI command executed or `minify()` options used.**

```uglifyjs [filename.js]```

**JavaScript output or error produced.**

```for(var i=0;i<3;i+=1){console.log(i)}```


maybe this is a source code issue and outside the scope of minification, just wondering if there was/could be an option to turn +=1 and -=1 to ++ and -- ?

Feature request: magic-comments to keep classnames/function names.
eg).
```
// UGLIFYJS:KEEP_FUNCTION_NAME
class User extends Typegoose {
  ...
}
```

 Why: I had problems with Webpack's uglifyjs mangling class names, when some libraries depended on constructor.name property to work.

specifically, when using Typegoose:

```
class User extends Typegoose { // 'User' becomes aqw, so it's stored as 'aqw' on mongodb
   // ..
```


related: https://github.com/webpack/webpack/issues/1659#issuecomment-415651353