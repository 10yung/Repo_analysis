<!--
# Pull Request Checklist

* [X] Have you read through the [contributor guidelines](./CONTRIBUTING.md)?
* [X] Have you signed the [Lightbend CLA](https://www.lightbend.com/contribute/cla)?
* [X] Have you updated the documentation?

-->
## Purpose
Fix the API link in Readme

thanks @johanandren for pointing me in the right direction.
## Purpose

Add a new discovery method for Akka in ECS Fargate using TaskSets.

## Changes

1. Add `aws-api-ecs-task-set-async`
2. Update aws docs
3. Tested on our own instances using AWS CodeDeploy

## Background Context

ECS can be used together with AWS CodeDeploy to support blue/green deployments.
These new nodes are spawned in the same service-group. Therefore, we need a new approach to make sure nodes only form a cluster with only newly spawned nodes.
Otherwise, the new nodes will join the existing AkkaCluster forming 1 large cluster instead of 2 smaller ones.

## Purpose

Extends the `aws-ecs-async` discovery method to also be able to filter nodes based on tags.

## Changes

* Adds new `tags` configuration key 
* Filter based on `tags` configuration

## Background Context

Be able to only form a cluster with specific tasks using certain tags

```
[info] - should form a cluster *** FAILED *** (10 seconds, 73 milliseconds)
3702[info]   The code passed to eventually never returned normally. Attempted 19 times over 10.012518683 seconds. Last failure message: List(Up, Joining, Joining) did not equal List(Up, Up, Up). (LocalBootstrapTest.scala:110)
3703[info]   org.scalatest.exceptions.TestFailedDueToTimeoutException:
3704[info]   at org.scalatest.concurrent.Eventually$class.tryTryAgain$1(Eventually.scala:421)
3705[info]   at org.scalatest.concurrent.Eventually$class.eventually(Eventually.scala:439)
3706[info]   at akka.management.LocalBootstrapTest.eventually(LocalBootstrapTest.scala:58)
3707[info]   at akka.management.LocalBootstrapTest$$anonfun$1$$anonfun$apply$mcV$sp$5.apply$mcV$sp(LocalBootstrapTest.scala:110)
3708[info]   at akka.management.LocalBootstrapTest$$anonfun$1$$anonfun$apply$mcV$sp$5.apply(LocalBootstrapTest.scala:108)
3709[info]   at akka.management.LocalBootstrapTest$$anonfun$1$$anonfun$apply$mcV$sp$5.apply(LocalBootstrapTest.scala:108)
```
None
I am using the pod label selection mechanism. It assumes that every pod in the cluster has the same label selector. However this is not always the case - such as during an upgrade that changes the label selector. As a result the cluster can get into a weird state and fail in different ways.

I expect the discovery algorithm to be:
1. Given pod label selector X
2. Select all pods P that match X
3. Exclude any pod p in P whose label selector is not X

(3) is missing in the current discovery implementation. This means we could inadvertently include pods that have their own idea of what a cluster looks like - leading to an ill-defined state.

An example of this is:
1. Create a pod with a broken label selector - it fails to bootstrap as it can't select itself.
2. Fix the label selector, and apply the new `Deployment`
3. Observe that the new pod cannot form a cluster - because it considers the broken pod part of its cluster, despite having a different label selector.



When installing Kubernetes, you can configure your DNS server with `pods disabled` to disabled producing DNS records for individual pods.

Currently our kubernetes-api discovery mechanism requires pod DNS entries to be enabled, which is the default setting. It looks like we could support the other setting as well, though.

There is a work-in-progress PR that adds this, but it is unfinished and closed due to lack of interest. If you need this feature do get in touch ;) #340
Since people prefer looking at code examples rather than reading bullet lists ;)
Do we need a minor release for that? Seems surprising to do it in a patch release

The @akka/akka-team don't have any experience or test environments for the Consul, Matathon and AWS discovery mechanisms. We'd like to invite new maintainers to assist with these. 

Original contributors + users that have contributed:
* Consul: @mlosiewicz-pl
* Marathon: @ygree @longshorej
* ECS: @dhpiggott
* EC2 tag based: @sebastianharko @StephenKing 

Would any of you be interested in becoming maintainers to help with reviewing / testing / merging PRs related to these areas?

This would also be open to people who have not contributed but use them and can test they work in their environment.
