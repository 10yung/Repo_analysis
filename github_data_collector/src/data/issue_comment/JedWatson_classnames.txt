It's not possible to use `classnames` with typescript because types are not published.
`classnames()` returns a single string. While the DOM API function `<element>.classList.add()` expects a rest parameter, which can be given by either supplying individual arguments `add(a, b, c)` or array spread: `add(...[a, b, c])`.

To use `classnames()` with `classList.add()` you will either have to call `add()` multiple times with a single argument to `classnames()`, or split the result and applying array spread: 
```js
add(...(classnames(a, b, c).split(" ")))
```

Internally `classnames` [joins the array of classnames](https://github.com/JedWatson/classnames/blob/master/index.js#L38) before returning, so the array is there. What do you think about an option to return the array without joining, so those in need of an array does not have to do an unnecessary split?

I guess this could be placed under `classnames/list` or something.

Just wanted to bring up the suggestion in case others face a similar need :-)

(Tried to look through all issues to see if this was suggested before, but couldn't find any).
Reworked all implementations (regular, dedupe, bind).
No breaking changes.

Benchmarks:
```bash
> node ./benchmarks/run

* local#strings x 15,466,941 ops/sec ±0.36% (92 runs sampled)
*   npm#strings x 3,646,035 ops/sec ±1.69% (88 runs sampled)
* local/dedupe#strings x 2,648,941 ops/sec ±0.19% (93 runs sampled)
*   npm/dedupe#strings x 1,470,214 ops/sec ±1.71% (94 runs sampled)

> Fastest is local#strings

* local#object x 17,545,632 ops/sec ±0.42% (93 runs sampled)
*   npm#object x 3,899,880 ops/sec ±1.32% (93 runs sampled)
* local/dedupe#object x 7,118,462 ops/sec ±0.26% (91 runs sampled)
*   npm/dedupe#object x 2,632,530 ops/sec ±0.16% (94 runs sampled)

> Fastest is local#object

* local#strings, object x 11,379,569 ops/sec ±0.44% (95 runs sampled)
*   npm#strings, object x 3,259,972 ops/sec ±0.40% (94 runs sampled)
* local/dedupe#strings, object x 2,525,953 ops/sec ±1.49% (93 runs sampled)
*   npm/dedupe#strings, object x 1,548,802 ops/sec ±0.14% (92 runs sampled)

> Fastest is local#strings, object

* local#mix x 7,226,283 ops/sec ±0.20% (95 runs sampled)
*   npm#mix x 2,521,931 ops/sec ±1.39% (93 runs sampled)
* local/dedupe#mix x 907,851 ops/sec ±0.39% (93 runs sampled)
*   npm/dedupe#mix x 667,852 ops/sec ±0.84% (95 runs sampled)

> Fastest is local#mix

* local#arrays x 3,571,391 ops/sec ±0.17% (94 runs sampled)
*   npm#arrays x 919,980 ops/sec ±0.22% (91 runs sampled)
* local/dedupe#arrays x 1,028,421 ops/sec ±1.41% (95 runs sampled)
*   npm/dedupe#arrays x 743,585 ops/sec ±0.17% (94 runs sampled)

> Fastest is local#arrays
```
Main purpose is to define both, named and default export which package does;
`.d.ts` files size reduced making direct exports where it is possible;
My hope is that this represents a baby-step towards #150 that might be easier to merge, since it's not a breaking change. All of the files remain in-place, but the main module (`index.js`) also has an ES Modules version.

The effect this has is more visible when bundled via Webpack or Rollup, but here's the raw size improvement just looking at minified versions of master VS this PR:

| Current Master | After this PR | Difference
|--|--|--
| 339b | 255b | _-84b / 25%_

I know this seems like a small value! But for a module downloaded 3M times per month, that's quite a few bytes over the wire. It also helps ensure `classnames` gets concatenated effectively by Webpack and Rollup, which makes the module more likely to be moved into shared code chunks that avoid duplication.

/cc @JedWatson @Andarist
This is a bit weird to explain, so please bear with me.

Edit: I've just realised this probably belongs in @types/classnames.

In the Typescript definitions, the 'classnames/bind' utility accepts a `Record<string, string>`. When passing in a map of values like this, Typescript can extract a set of keys as a string literal type. Currently this is discarded and when using the 'bound' returned function it will allow any random string through.

Using some generics, we can pass these keys down the chain into the returned function, like so:
```ts
type ClassValue<T extends string> = T | T[] | {[k in T]?: any};
    
export default function bind<T extends string>(styles: Record<T, string>)
    : (...classes: ClassValue<T>[]) => string;
```

This means when using the bound function elsewhere, we can be sure that the strings being passed actually exist in the map:
```ts
const styles = { foo: 'xx_foo', bar: 'yy_bar' };
const cx = cn.bind(styles);

cx('foo', 'bar');  // => 'xx_foo yy_bar'
cx({foo: true, bar: false}); // => 'xx_foo'
cx('foobar'); // => TypeError: 'foobar' does not exist in [...]
cx({foobaz: true}); // => TypeError: 'foobaz' does not exist in [...]
```

I haven't submitted a PR because this is pretty fresh and probably needs some input before it's ready. Like, it doesn't re-use any types from 'index.d.ts' and such, so it's not super portable.

Thoughts?
Fixes https://github.com/JedWatson/classnames/issues/182
like https://github.com/axios/axios/blob/master/lib/axios.js#L53
when use typescrit with requirejs and webpack only one can work.



@adidahiya @JKillian @seansfkelley @mradamczyk @marvinhagemeister @ccapndave this should be enough?

As follow up to https://github.com/JedWatson/classnames/pull/103 (ref https://github.com/JedWatson/classnames/pull/103#issuecomment-426866682)

IANAL,  but,  I think this is ok.
Pinged the authors anyway...

- [x] @adidahiya 
- [ ] @JKillian
- [x] @seansfkelley 
- [x] @mradamczyk
- [x] @marvinhagemeister
- [ ] @ccapndave
- [x] @bradleyayers 
- [x] @cwmacdon 
See #173 for benchmark numbers.