The latest update with the auto update for the omnisharp.json file breaks the project initialization if the project also includes custom paths for other analyzers. It ends up duplicating the json block containing the paths.

It looks like this:

`{
    "RoslynExtensionsOptions": {
        "enableAnalyzersSupport": true,
        "locationPaths": [
            "/Users/jdenton/customanalyzerpath",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/common",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/analyzers",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/refactorings",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/fixes"
        ],
        "EnableAnalyzersSupport": true,
        "LocationPaths": [
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/common",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/analyzers",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/refactorings",
            "/Users/jdenton/.vscode/extensions/josefpihrt-vscode.roslynator-2.3.0/roslyn/fixes"
        ]
    },`
Try [Orang](https://github.com/JosefPihrt/Orang), cross-platform command-line tool from the author of Roslynator.

Search, replace, rename and delete directories, files and its content using the power of .NET regular expressions.
I met with similar situation like #402.

1. `<summary/>` on the main part of the class.
2. `<remarks/>` on any additional partials that require separate documentation.

RCS1139 displayed on the partial class file where only the `<remarks>` was there.
**Product and Version Used**: 
Roslynator.Analyzers 2.2.0

**Steps to Reproduce**:
Create a switch expression.

Example:

```chsarp
public static RGBColor FromRainbow(Rainbow colorBand) =>
    colorBand switch
    {
        Rainbow.Red    => new RGBColor(0xFF, 0x00, 0x00),
        Rainbow.Orange => new RGBColor(0xFF, 0x7F, 0x00),
        Rainbow.Yellow => new RGBColor(0xFF, 0xFF, 0x00),
        Rainbow.Green  => new RGBColor(0x00, 0xFF, 0x00),
        Rainbow.Blue   => new RGBColor(0x00, 0x00, 0xFF),
        Rainbow.Indigo => new RGBColor(0x4B, 0x00, 0x82),
        Rainbow.Violet => new RGBColor(0x94, 0x00, 0xD3),
        _              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand))
    }; 
```

**Actual Behavior**:
```chsarp
public static RGBColor FromRainbow(Rainbow colorBand) =>
    colorBand switch
    {
        **Rainbow.Red**    => new RGBColor(0xFF, 0x00, 0x00),
        **Rainbow.Orange** => new RGBColor(0xFF, 0x7F, 0x00),
        **Rainbow.Yellow** => new RGBColor(0xFF, 0xFF, 0x00),
        **Rainbow.Green**  => new RGBColor(0x00, 0xFF, 0x00),
        **Rainbow.Blue**   => new RGBColor(0x00, 0x00, 0xFF),
        **Rainbow.Indigo** => new RGBColor(0x4B, 0x00, 0x82),
        **Rainbow.Violet** => new RGBColor(0x94, 0x00, 0xD3),
        _              => throw new ArgumentException(message: "invalid enum value", paramName: nameof(colorBand))
    }; 
```
The case match expression (shown with **) shows a RCS1163 warning. It seems to be a false positive due to the new switch expressions in C# 8.0

**Expected Behavior**:

No warnings.

In cross-platform development (and probably at all), you should not use a hard-coded path.
For example,
```csharp
var path = @"paTh\To\subfOlder";
```
Will not behave as expected on Linux.
Each path must be by using `Path.Combine`, and with awareness about the case.

In addition, identify a line in the text:
```csharp
var secondLine = text.split("\r\n")[1];
```

Will not run as expected on Linux, and will need to use:
```csharp
var secondLine = text.split(Environment.NewLine)[1];
```

Is there such an analyzer?
Is it possible to develop?

(I'm new in the Analyzers, but know AST and so on, so with some general intent or design, I believe I can develop myself)
To complement [CS4014](https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/compiler-messages/cs4014) that detects `async` calls not `await`'ed, it could be nice to have an analyzer to detect implicit conversions from async delegates to sync ones.

```csharp
async Task FooAsync<T>(Func<T> func)
{
    await Task.Delay(0);
    func(); // the async delegate is not await'ed!
}

Task BarAsync(Func<Task> func)
{
    return FooAsync(func); // implicit conversion to Func<T>
}
```

It's not always easily detectable using Intellisense
![image](https://user-images.githubusercontent.com/919634/67692328-489f6500-f9a0-11e9-829e-77f1aa60d50a.png)

**Product and Version Used**: 2.2.0

**Steps to Reproduce**:

get refactorings for `a ? false : b`

**Actual Behavior**:
no simplification

**Expected Behavior**:
simplification: `!a && b`
What is benefice between `Roslynator.Analyzers` and https://github.com/dotnet/roslyn-analyzers

It's recommended work with both together?
**Product and Version Used**: 
2.2.0+VS2019 16.4.0Preview1

**Steps to Reproduce**:
1. Create an csproj(`ClassLibrary2`) in VS, and modify to multi targetFrameworks 
```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net472</TargetFrameworks>
  </PropertyGroup>

</Project>
```
2. Create `Class1.cs` at `ClassLibrary2/NewFolder/Class1.cs`;
3. Add another class `Class2` in the file;
```cs
namespace ClassLibrary2.NewFolder
{
    public class Class1
    {
    }
    public class Class2
    {
    }
}
```
4. Call quick action at `Class2`, and choose `Extract 'Class2' to a new file`



**Actual Behavior**:
`Class2.cs` should be created at `ClassLibrary2/NewFolder/Class2.cs`

**Expected Behavior**:
`Class2.cs` be created at `ClassLibrary2/ClassLibrary2 (netstandard2.0)/NewFolder/Class2.cs`

Calls to `ValueTuple.Create` can be simplified to just parens. 

Example:

    m_Base.TryGetValue(ValueTuple.Create(key1, key2), out value);
    return m_Base.Remove(ValueTuple.Create(key1, key2));

Simplified version

    m_Base.TryGetValue((key1, key2), out value);
    return m_Base.Remove((key1, key2));

