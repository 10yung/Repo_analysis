ðŸ˜ŠðŸ˜ŠðŸ˜Š
I met same problem at 3.0.8:

```
Fatal Exception: java.nio.channels.CancelledKeyException
       at sun.nio.ch.SelectionKeyImpl.ensureValid + 73(SelectionKeyImpl.java:73)
       at sun.nio.ch.SelectionKeyImpl.interestOps + 82(SelectionKeyImpl.java:82)
       at com.koushikdutta.async.AsyncNetworkSocket.handleRemaining + 113(AsyncNetworkSocket.java:113)
       at com.koushikdutta.async.AsyncNetworkSocket.write + 91(AsyncNetworkSocket.java:91)
       at com.koushikdutta.async.BufferedDataSink.write + 79(BufferedDataSink.java:79)
       at com.koushikdutta.async.AsyncSSLSocketWrapper.write + 494(AsyncSSLSocketWrapper.java:494)
       at com.koushikdutta.async.BufferedDataSink.write + 79(BufferedDataSink.java:79)
       at com.koushikdutta.async.http.WebSocketImpl.lambda$send$0 + 239(WebSocketImpl.java:239)
       at com.koushikdutta.async.http.-$$Lambda$WebSocketImpl$5NBIaX1nvYBX3mbDX2Puj7dd1Lg.run(-.java)
       at com.koushikdutta.async.AsyncServer$Scheduled.run + 236(AsyncServer.java:236)
       at com.koushikdutta.async.AsyncServer.lockAndRunQueue + 788(AsyncServer.java:788)
       at com.koushikdutta.async.AsyncServer.runLoop + 806(AsyncServer.java:806)
       at com.koushikdutta.async.AsyncServer.run + 717(AsyncServer.java:717)
       at com.koushikdutta.async.AsyncServer.access$800 + 46(AsyncServer.java:46)
       at com.koushikdutta.async.AsyncServer$11.run + 671(AsyncServer.java:671)
```

_Originally posted by @3c133ps3d in https://github.com/koush/AndroidAsync/issues/407#issuecomment-568168558_
I send huge request at short time
then get this
how can I  fix it

Fatal Exception: java.util.NoSuchElementException
       at com.koushikdutta.async.ArrayDeque.removeFirst(ArrayDeque.java:255)
       at com.koushikdutta.async.ArrayDeque.remove(ArrayDeque.java:420)
       at com.koushikdutta.async.ByteBufferList.recycle(ByteBufferList.java:345)
       at com.koushikdutta.async.Util$2.cleanup(Util.java:79)
       at com.koushikdutta.async.Util$2.onWriteable(Util.java:111)
       at com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1$1.run(AsyncHttpServerResponseImpl.java:133)
       at com.koushikdutta.async.AsyncServer.lockAndRunQueue(AsyncServer.java:740)
       at com.koushikdutta.async.AsyncServer.runLoop(AsyncServer.java:758)
       at com.koushikdutta.async.AsyncServer.run(AsyncServer.java:658)
       at com.koushikdutta.async.AsyncServer.access$800(AsyncServer.java:44)
       at com.koushikdutta.async.AsyncServer$14.run(AsyncServer.java:600)




can I use this lib with https proxy?
I am getting ` No 'Access-Control-Allow-Origin' header is present on the requested resource` this error while UI calling the service(service hosted in android). To overcome this issue, I have to add the Access-Control-Allow-Origin header. Can you help me to resolve the above issue or help me to add header in AsyncHttpServerResponse.
The protocol is  "ws",Exception :connection closed before headers received.
Hi!

I'm trying to structure my app using modules. 

One of the modules is intended to be a HTTP component using this library. 
I tried to use it  in a Java Library (Android Studio - New Module - Java Library) using Kolin but the dependency will not be resolved correctly. Using an Android Library (Android Studio - New Module - Android Library) allows me to use the AsyncHttpServer for example. 

Therefore, my question: Can this library only be used in specific Android librarys or in the app/ structure? 

My project build.gradle file looks like this: 

```
buildscript { 
    ext.kotlin_version = '1.3.50'

    apply from: 'versions.gradle'
    ext {
        versionName = version
        versionCode = 1
        compileSdkVersion = build_versions.target_sdk
        buildToolsVersion = build_versions.build_tools
        targetSdkVersion = build_versions.target_sdk
        minSdkVersion = build_versions.min_sdk
    }
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath deps.android_gradle_plugin
        classpath deps.kotlin.plugin
        classpath deps.jfrog
 }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
```

My app build.gradle looks like this:

```
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


android {

    kotlinOptions {
        jvmTarget = '1.8'
    }

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.example.android"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
    }



    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
}

dependencies {
  //app dependencies
}

```

And my java lib build.gradle looks like this:

```
apply plugin: 'java-library'
apply plugin: 'kotlin'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.3.50"
    implementation 'com.koushikdutta.async:androidasync:2.2.1'
    implementation 'com.google.code.gson:gson:2.8.5'
}

repositories {
    jcenter()
    google()
}
```
![image](https://user-images.githubusercontent.com/4952555/64468834-c478f000-d15b-11e9-89fd-af5f029e1124.png)
above the picture,the variable param is null 
Is the AndroidAsync framework support MessagePack?How can I deserialize it?
It is possible to support reading byte[] of a specified length. Reading a very long byte[] now requires writing a lot of unpacking logic.Like thisï¼š

> public static ByteString read(InputStream in, int byteCount) throws IOException {

   

>  if (in == null) throw new IllegalArgumentException("in == null");

   

>  if (byteCount < 0) throw new IllegalArgumentException("byteCount < 0: " + byteCount);

    

> byte[] result = new byte[byteCount];

    

> for (int offset = 0, read; offset < byteCount; offset += read) {

     

>  read = in.read(result, offset, byteCount - offset);

> if (read == -1) throw new EOFException();

> }

> return new ByteString(result);

>   }


I often get this crash recently, is it something on my end?

```log
07-29 17:44:04.221 E/AndroidRuntime(28479): java.lang.AssertionError: double connect callback 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.http.AsyncHttpClient$3.onConnectCompleted(AsyncHttpClient.java:262) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1.onHandshakeCompleted(AsyncSSLSocketMiddleware.java:83) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.handleHandshakeStatus(AsyncSSLSocketWrapper.java:331) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.write(AsyncSSLSocketWrapper.java:401) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.handleHandshakeStatus(AsyncSSLSocketWrapper.java:276) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.access$000(AsyncSSLSocketWrapper.java:30) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncSSLSocketWrapper$5.onDataAvailable(AsyncSSLSocketWrapper.java:213) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.Util.emitAllData(Util.java:23) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncNetworkSocket.onReadable(AsyncNetworkSocket.java:152) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncServer.runLoop(AsyncServer.java:821) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncServer.run(AsyncServer.java:658) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncServer.access$800(AsyncServer.java:44) 
07-29 17:44:04.221 E/AndroidRuntime(28479): at com.koushikdutta.async.AsyncServer$14.run(AsyncServer.java:600) 
07-29 17:44:04.223 E/ACRA    (28479): java.lang.AssertionError: double connect callback 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.http.AsyncHttpClient$3.onConnectCompleted(AsyncHttpClient.java:262) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1.onHandshakeCompleted(AsyncSSLSocketMiddleware.java:83) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.handleHandshakeStatus(AsyncSSLSocketWrapper.java:331) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.write(AsyncSSLSocketWrapper.java:401) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.handleHandshakeStatus(AsyncSSLSocketWrapper.java:276) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncSSLSocketWrapper.access$000(AsyncSSLSocketWrapper.java:30) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncSSLSocketWrapper$5.onDataAvailable(AsyncSSLSocketWrapper.java:213) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.Util.emitAllData(Util.java:23) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncNetworkSocket.onReadable(AsyncNetworkSocket.java:152) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncServer.runLoop(AsyncServer.java:821) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncServer.run(AsyncServer.java:658) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncServer.access$800(AsyncServer.java:44) 
07-29 17:44:04.223 E/ACRA    (28479): at com.koushikdutta.async.AsyncServer$14.run(AsyncServer.java:600) 
```