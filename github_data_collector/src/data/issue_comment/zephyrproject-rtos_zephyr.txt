reg field from gpioe node was incorrect.

Signed-off-by: Ioannis Konstantelias <ikonstadel@gmail.com>
Add the missing syscalls for the counter API and fix the ones already present. Switch most of the counter API basic test to run in usermode.
Fix for #21869. A neighbor solicitation packet for an address that is not ours should not cause the sender to be added to the neighbor cache. Instead, add the neighbor when we have decided to respond to the NS packet.

Also: Refactoring to use the same code when parsing source link-layer address option for both RA and NS packets. It looked like handle_ns_neighbor() could actually read too much data into lladdr.addr when handling 8-byte addresses (802.15.4).
This adds the necessary bits to enable SMP to work on `intel_s1000` SoC and `intel_s1000_crb` board.

- Adds a new entry point for core other than #0. This is due to the fact that Xtensa reset vector for all cores is the same. So only core #0 need to go through the kernel startup routines. The other cores can jump to the function pointed to by `arch_start_cpu()` once basic core initialization is done.
- Adds a sys init level for SMP where the functions are called after `z_smp_init()` where all cores are up and running.
- Adds a driver for the CAVS wall clock timer which is being used as the timer under SMP. This wall clock is external to the CPU cores where it is used as a synchronized timer for all cores.
- Adds a driver to use the CAVS Intra-DSP Communication (IDC) channel as IPI for scheduler.

This passes the SMP test (`tests/kernel/smp`).
building the i2c_scanner on olimexino_stm32 , with the sht3xd sensor connected to i2c1 , I keep getting this error when running i2c_scanner 

[00:00:00.051,000] <dbg> i2c_ll_stm32_v1.msg_end: stm32_i2c_msg_write: NACK 

is there need extra kernel config when using the i2c API in stm32  ? 

Starting i2c scanner...

     0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f
00: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
10: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
20: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
30: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
40: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
50: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
60: -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- 
70: -- -- -- -- -- -- -- --                         

0 devices found on I2C_1
prj.conf
CONFIG_I2C=y
CONFIG_LOG=y
CONFIG_STDOUT_CONSOLE=y
CONFIG_PRINTK=y
CONFIG_I2C_LOG_LEVEL_DBG=y



**Describe the bug**
Python exception when attempting to use the openocd runner with west for boards that do not contain support/openocd.cfg

Lines 27-36 of openocd.py 
```
        if not config:
            default = path.join(cfg.board_dir, 'support', 'openocd.cfg')
            if path.exists(default):
                config = default
        self.openocd_config = config

        if path.exists(self.openocd_config):
            search_args = ['-s', path.dirname(self.openocd_config)]
        else:
            search_args = []
```
When config is None, and openocd.cfg is not present, self.openocd_config is None.
path.exists(None) results in a TypeError

For the nordic development kits, the openocd settings are initialised in board.cmake and openocd-nrf5.board.cmake
This is presumably why they are missing openocd.cfg files even through openocd is supported.

Modifying the above to the following allows flashing to succeed.
```
        if self.openocd_config is not None and path.exists(self.openocd_config):
```
Alternatively, manually specifying an empty configuration file also works.

**To Reproduce**
```
west build -b nrf52840_pca10056 zephyr\samples\basic\blinky
west flash -r openocd
```

**Expected behavior**
Flashing should succeed

**Impact**

Affected boards can't be flashed with openocd without modifying the core repo, or specifying some empty configuration file via `west flash -r openocd --config empty.cfg`

**Environment (please complete the following information):**
 - OS: Windows
 - Commit SHA: 5af54075703c248fae2bf69a50909bf2e3cc977e

Toggling this symbol probably doesn't make sense, because the
architecture is already known when Kconfig runs.

SCHED_IPI_SUPPORTED is enabled through being selected by the ARC_CONNECT
(maybe that one shouldn't be configurable either) and X86_64 symbols.

Note that it's not possible to disable the symbol when it's being
selected, so trying to turn it off on e.g. x86 64 won't work either.
Updating west.yml to point to the TI HAL repo updated with the RF
driver and the associated changes in the DPL.

Signed-off-by: Vincent Wan <vincent.wan@linaro.org>
Convert usb disconnect gpio to new gpio api.
Updates device tree for the olimexino_stm32.

Tested on olimexino_stm32 using cdc_acm.

Signed-off-by: Yannis Damigos <giannis.damigos@gmail.com>
I think a lot of the confusion with promptless symbols being assigned
might come from opening zephyr/.config, seeing that it assigns a bunch
of promptless symbols, and assuming that Kconfig must respect those
assignments, even though it doesn't.

Explain why zephyr/.config assigns promptless symbols (it's because it
doubles as configuration output). That should clarify things a bit.

Also mention what "invisible" means for symbols early on in the page.