Bumps [flake8-bugbear](https://github.com/PyCQA/flake8-bugbear) from 19.8.0 to 20.1.2.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/PyCQA/flake8-bugbear/releases">flake8-bugbear's releases</a>.</em></p>
<blockquote>
<h2>20.1.2</h2>
<p>Refer to README.rst for changes.</p>
<h2>20.1.1</h2>
<p>Refer to README.rst for changes.</p>
<h2>20.1.0</h2>
<p>Refer to README.md for changes.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/9e5c19ddcf0237fd2bc9113512725cb831543fbc"><code>9e5c19d</code></a> Move to Version 20.1.2 + Update CHANGES in README.rst</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/238001dfd222b26a3c45d1a5e13da14979f3a961"><code>238001d</code></a> Fix error on attributes-of-attributes in <code>except (...):</code> clauses (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/109">#109</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/3731237969029ccc1a33960d9ea1ae6baa10a0ea"><code>3731237</code></a> Move to Version 20.1.1 + Update CHANGES in README.rst</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/e35343c69526b89b52a400d00ad18ba1a8c76a64"><code>e35343c</code></a> Add new checks for except (...): clauses (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/105">#105</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/04dd13bc9c03a45c9437186a8f04ed0cdd105af9"><code>04dd13b</code></a> B012 Fix false positive with continue/break in loops in finally (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/107">#107</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/be0022dd6d543a884affa199f6fbc3e03a36607c"><code>be0022d</code></a> Uncomment some test asserts + Fix (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/104">#104</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/52b989212ef72d7e1e02d90075bfcabe2febfc95"><code>52b9892</code></a> Move to Version 20.1.0 + add Upload GitHub Action (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/103">#103</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/aef4e17ed50c9f757eba8be593b922e00ca95e5f"><code>aef4e17</code></a> Remove 3.5 Classifiers + Cleanup CI (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/101">#101</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/514bfc4b1c12b13561026123c079463414b21afb"><code>514bfc4</code></a> Remove any mention of Python 2 in README (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/102">#102</a>)</li>
<li><a href="https://github.com/PyCQA/flake8-bugbear/commit/07d842f64ecd6f4a3b98cc9d21b9f0ca4b6f3d9a"><code>07d842f</code></a> Warn about continue/return/break in finally block (<a href="https://github-redirect.dependabot.com/PyCQA/flake8-bugbear/issues/100">#100</a>)</li>
<li>Additional commits viewable in <a href="https://github.com/PyCQA/flake8-bugbear/compare/19.8.0...20.1.2">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=flake8-bugbear&package-manager=pip&previous-version=19.8.0&new-version=20.1.2)](https://dependabot.com/compatibility-score.html?dependency-name=flake8-bugbear&package-manager=pip&previous-version=19.8.0&new-version=20.1.2)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
Dependabot will **not** automatically merge this PR because it includes a major update to a development dependency.

[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
In Homebrew we install `doitlive` with:

```
python3 setup.py install --prefix=/usr/local/Cellar/doitlive/4.3.0_5/libexec
```

where `python3` in `PATH` is `/usr/local/bin/python3`, which is a symlink to `/usr/local/Cellar/python/3.7.6/bin/python3`. However, when we do this, the `doitlive` in `/usr/local/Cellar/doitlive/4.3.0_5/libexec/bin` contains this as a shebang:

```
#!/usr/local/Cellar/python/3.7.6/bin/python3
```

which is not desirable at all for us. Other python packages don't do that, so I think it's an issue specific to doitlive. It would be nice if `setup.py` could simply use the python path that is given to it, rather than try to guess.
Closes #156 
Should read occurred rather than occured.
It would be cool if we could have some more documentation in the help text.

- Explain how to use Ctrl-C and Ctrl-Z in a presentation (this is self explanatory for CLI veterans, but many users might not be so experienced. Ctrl-C and Crtl-Z are really a great part of how to use the programm in a presentation)
- Explain how <prompt_themes> work: How can I create my own? Where can I find premade ones?

(1) When I copy-paste with mouse (ie: paste more than 30 characters), only first bytes go to the console. Only top 10-20 characters are ingested.

(2) up-arrow doesn't work with
```
/tmp/tmpt_i6n40m: line 4: $'\E[A': command not found
prompt $ 
```

Thanks for such an awesome tool. There are a couple of bugs in the terminal handling. 

First, we see staircase when running background command
```
(for i in `seq 10`; do echo hello; sleep 0.1; done) &
```

Got:
```
prompt $ hello
                                    hello
                                         hello
                                              hello
                                                   hello
                                                        hello
                                                             hello
                                                                  hello
                                                                       hello
```
While in normal bash it is not staircased.

I have two features I think would make doitlive better, but I see something similar is supported, though not documented.

The first feature is typing out a whole line with a key combination. Basically, if I'm at the start of a long line, I can press some combination and have the entire line typed out. I don't think this is currently possible, but also I'm not sure about this feature. I want it for showing presentation "topics" as comments which are too cumbersome to type out, but maybe echoed comments will do.

The second feature is being able to pause and resume the stream. I see that pressing tab will pause, but I get erratic behavior where it will skip the entire line, press enter mid-type and odd things like that? I need it in case I'm in a Python shell and the audience asks me to make changes or so I can take control if something goes wrong, while being able to resume afterwards.

This isn't documented, so I had to discover it in the code. Tab and Ctrl-Z do different things in the code, but in my testing, Ctrl-Z doesn't work (the process just gets backgrounded).

Can you explain a bit about how these are supposed to work, maybe document them, and discuss whether a pausing feature would be acceptable?
I sometimes press Escape while typing as a reflex, and it would be *very* inconvenient if this exits the presentation while I'm presenting. Could we have an option to disable this key?
I have added typed comments. Comments that start with `#dilc:` will get typed out as normal:

```
#dilc: This comment will get typed to the console with the `dilc:` part removed.
```