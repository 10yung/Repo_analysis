Added an example project which has no security.
It provides how-to steps to enable encryption with SSL/TLS for three scenarios:
- one way authentication - server communicates over https and identifies itself with a certificate
- two way authentication - both server and client needs to identify itself and trust each other
- two way authentication based on trusting the certificate authority - same as above one but trusting the root-ca is enough to get the same result

Java spring based web server
A variation of http clients which are supported

Helps the person to learn about certificates, keystores, ssl commands and basic web security based on certificates.
cool non-profit community
i figured portswigger's Web Security Academy would be a great addition to this repo:
 https://portswigger.net/web-security
Cybering is a course on YouTube. Actively being released.
This is a bit of shameless self-promotion (well, my publisher asked me to), but I wonder if you would be willing to add a link to my book, API Security in Action? (I can send you a link for a free copy if you want to read it first - it is still in "early access" so not complete yet).

It has a chapter on basic secure application development techniques, and then chapters covering CSRF, etc. It covers JWT because it is hard not to, but is clear to point out the security weaknesses and covers alternatives like Macaroons and Paseto :-) (I also mention CipherSweet in a section on database hardening, so Paragon IE is well covered...)
Also, it has some changes related to: #10, #35, #48, #49, #50, #52.
After running _src/compiler.php_ the date is ignored: 
```
$ grep -r date data/C/books-and-ebooks/0002-fedora-defensive-coding.json 
    "date": "2012",
```
- **README.md**:
```
-      * [Defensive Coding: A Guide to Improving Software Security by the Fedora Security Team](#defensive-coding-a-guide-to-improving-software-security-by-the-fedora-security-team-2018) (2018)
+      * [Defensive Coding: A Guide to Improving Software Security by the Fedora Security Team](#defensive-coding-a-guide-to-improving-software-security-by-the-fedora-security-team-2019) (2019)
```

- **src/Util.php**:
```
        if (!empty($fd['date'])) {
            $dt = new \DateTime($fd['date']);
            $header .= ' ('.$dt->format('Y').')';
        }
```

- [DateTime](https://www.php.net/manual/pt_BR/datetime.construct.php):
> Instead of just using the year, it seems working when date matches the pattern "YYYY-MM"

https://github.com/paragonie/awesome-appsec/blob/master/data/C/books-and-ebooks/0002-fedora-defensive-coding.json#L2

- Notes:
> OK: Four digit year and month (GNU) YY "-" mm "2008-6", "2008-06", "1978-12"
> NOK: Year (and just the year) YY "1978", "2008"
https://www.php.net/manual/pt_BR/datetime.construct.php#123882
https://www.php.net/manual/pt_BR/datetime.construct.php#119591
https://www.php.net/manual/en/datetime.formats.date.php)

- [Enhancement](https://github.com/paragonie/awesome-appsec/blob/master/CONTRIBUTING.md): 
> Include optional fields and examples.

ModSecurity is a pretty decent open-source WAF that can be placed in front of applications. Can this be added to this repo? https://modsecurity.org/

Also OWASP updated its cheatsheet series and placed them on Github, these are a good resource as well: https://github.com/OWASP/CheatSheetSeries/tree/master/cheatsheets

***Can I make a pull request that adds 1 or both of these to the repo?
Is there a place for this on awesome-appsec?

This API has been unmaintained for several years, I'm the new owner and keeping it maintained now

* [The API code](https://github.com/zaproxy/zap-api-nodejs)
* [Now official](https://github.com/zaproxy/zaproxy/wiki/ApiDetails)
* [Official announcement](https://twitter.com/zaproxy/status/1063378335928131585)
* [Main issue](https://github.com/zaproxy/zaproxy/issues/5044)
* [Main PR](https://github.com/zaproxy/zap-api-nodejs/pull/1)
* [What's changed](https://github.com/zaproxy/zap-api-nodejs/blob/master/CHANGELOG.md)

Interested in a PR?