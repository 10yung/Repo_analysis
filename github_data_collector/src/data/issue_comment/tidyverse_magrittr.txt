I have some problem with these three good friends.
I would like to use a %>% operator with . placeholder in an ~ function.
But it seems that it does not work as I expect.

Here is a triangle:
```r
library(tidyverse)
library(magrittr)

(triangle <- tibble(a = 1:5,
                    b = c(6:9,NA),
                    c = c(10:12,rep(NA,2)),
                    d = c(13:14,rep(NA,3)),
                    e = c(0L,rep(NA,4))))
#> # A tibble: 5 x 5
#>       a     b     c     d     e
#>   <int> <int> <int> <int> <int>
#> 1     1     6    10    13     0
#> 2     2     7    11    14    NA
#> 3     3     8    12    NA    NA
#> 4     4     9    NA    NA    NA
#> 5     5    NA    NA    NA    NA
```
I would like to fill the NA values from the first column.
I don't understand why this does not work:
```r
(triangle %>% map_dfc(~coalesce(.x, .[[1]])))
#> # A tibble: 5 x 5
#>       a     b     c     d     e
#>   <int> <int> <int> <int> <int>
#> 1     1     6    10    13     0
#> 2     2     7    11    14     0
#> 3     3     8    12    13     0
#> 4     4     9    10    13     0
#> 5     5     6    10    13     0
```
It handles the . placeholder as the .x argument of the ~ function, instead of the object 'triangle'.

This code works, but I don't understand why the previous does not do the same.
```r
(triangle %>% map_dfc(function(x) coalesce(x, .[[1]])))
#> # A tibble: 5 x 5
#>       a     b     c     d     e
#>   <int> <int> <int> <int> <int>
#> 1     1     6    10    13     0
#> 2     2     7    11    14     2
#> 3     3     8    12     3     3
#> 4     4     9     4     4     4
#> 5     5     5     5     5     5
```
Any idea?
Thanks!


I use R version 3.4.4 (2018-03-15) -- "Someone to Lean On"
I would expect that `f <- . %<>% head` either fails, or creates a function that modifies in place, instead it just work as if we'd call `f <- . %>% head`

``` r
library(magrittr)
f <- . %<>% head
x <- cars
f(cars)
#>   speed dist
#> 1     4    2
#> 2     4   10
#> 3     7    4
#> 4     7   22
#> 5     8   16
#> 6     9   10
dim(cars)
#> [1] 50  2
```

<sup>Created on 2019-09-27 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Please take a look at the following code.
Version 5 should be equivalent to version 6
But only v5 works. Not v6...

```r
x <- list(a=1:10, b=11:20, c=21:30)
########## version 5 ##########
f2 <- function(f){function(x){x %>% f}}

ff  <- function(x){ mean(x) > 10 }
x %>% Filter(f=f2(ff))
###############################

########## version 6 ##########
# failed
f2 <- function(f){function(x){x %>% f}}

ff  <- function(x){ mean(x) > 10 }
FunIt <- function(y){Filter(f=f2(y))}
x %>% FunIt(ff)
###############################
```

It would be useful to add some global options that make either %>%  print the called verb at the beginning of the activity and the elapsed time at the end of it. In order to spot bottlenecks in long-chained sequences of functions.

I tried to develop at least the process time part with:
```
`%>l%` <- function (lhs, rhs) 
{
    start <- Sys.time()
    parent <- parent.frame()
    env <- new.env(parent = parent)
    chain_parts <- magrittr:::split_chain(match.call(), env = env)
    pipes <- chain_parts[["pipes"]]
    rhss <- magrittr::chain_parts[["rhss"]]
    lhs <- chain_parts[["lhs"]]
    env[["_function_list"]] <- lapply(1:length(rhss), function(i) magrittr:::wrap_function(rhss[[i]], pipes[[i]], parent))
    env[["_fseq"]] <- `class<-`(eval(quote(function(value) freduce(value, `_function_list`)), env, env), c("fseq", "function"))
    env[["freduce"]] <- freduce
    
    out <- {
        if (is_placeholder(lhs)) {
            env[["_fseq"]]
        }
        else {
            env[["_lhs"]] <- eval(lhs, parent, parent)
            result <- withVisible(eval(quote(`_fseq`(`_lhs`)), env, env))
            if (magrittr:::is_compound_pipe(pipes[[1L]])) {
                eval(call("<-", lhs, result[["value"]]), parent, parent)
            }
            else {
                if (result[["visible"]]) 
                    result[["value"]]
                else invisible(result[["value"]])
            }
        }
    }
    
    message('Elapsed: ', difftime(Sys.time, start))
    out
}
```

But I get: `Error in pipes[[i]] : subscript out of bounds`
```r
library(magrittr)

gen <- function(x) function() eval(quote(x))

fn <- gen(1)
fn()
#> [1] 1

fn <- 1 %>% gen()
fn()
#> $value
#> function () 
#> eval(quote(x))
#> <bytecode: 0x7fcef8570800>
#> <environment: 0x7fcef89f5520>
#> 
#> $visible
#> [1] TRUE
```

Fixed if forced:

```r
gen <- function(x) {
  force(x)
  function() eval(quote(x))
}

fn <- 1 %>% gen()
fn()
#> [1] 1
```
This is *almost* a feature rather than a bug: Using `%>%` without importing the whole magrittr package (e.g. via any of the packages that import it, such as dplyr) pulls other functions from magrittr into scope. MWE:

```r
`%>%` = magrittr::`%>%`
`%<>%` = function (x, y) {
    message("%<>% was called")
    y
}

x = 1
x %<>% `+`(2)
# %<>% was called
# [1] 2

x %<>% `+`(2) %>% `*`(2); x
# ACTUAL:
# 6
# EXPECTED:
# %<>% was called
# 4
```

… in other words: *inside a pipeline*, magrittr’s `` `%<>%` `` is called rather than our own. This mostly leads to confusion for users of purrr and dplyr, who observe that using `%<>%` sometimes works and sometimes breaks, e.g. https://stackoverflow.com/q/55381321/1968.

Note that this behaviour doesn’t seem to extend to other magrittr functions (e.g. using `x %>% subtract(5)` will not call `magrittr::subtract`).

(This might also be related to #159 but it’s not obvious how. Possibly also related to #57?)
Though not as frequently as piping first argument it's often needed to pipe the last argument.

Would you mind adding the `%>>%` operator?

```R
x %>>% append(y) # is equivalent to
append(y, x)
```

`>>` because in clojure these operators are `->` and `->>` respectively. Racket uses [f> and l>](https://docs.racket-lang.org/heresy/pipes.html). 
`!!!.` should not be considered as a function call.

Current behaviour:

```r
library("magrittr")

letters[1:3] %>% rlang::list2(!!!.)
#> [[1]]
#> [1] "a" "b" "c"
#>
#> [[2]]
#> [1] "a"
#>
#> [[3]]
#> [1] "b"
#>
#> [[4]]
#> [1] "c"
```

Expected behaviour:

```r
letters[1:3] %>% rlang::list2(!!!.)
#> [[1]]
#> [1] "a"
#>
#> [[2]]
#> [1] "b"
#>
#> [[3]]
#> [1] "c"
```
```
mtcars %T>% {. <- iris; print(dim(.))} %>% head(2)
# [1] 150   5
#   Sepal.Length Sepal.Width Petal.Length Petal.Width Species
# 1          5.1         3.5          1.4         0.2  setosa
# 2          4.9         3.0          1.4         0.2  setosa
```

`.` might be used as a temp variable so this is not safe. 

It could be solved by using local :

```
wrap_function <- function (body, pipe, env) 
{
    if (is_tee(pipe)) {
        body <- substitute({local(b); .}, list(b = body)) # instead of call("{", body, quote(.))
    }
    else if (is_dollar(pipe)) {
        body <- substitute(with(., b), list(b = body))
    }
    eval(call("function", as.pairlist(alist(. = )), body), env, 
        env)
}
```

Which would output :

```
mtcars %T>% {. <- iris; print(dim(.))} %>% head(2)
# [1] 150   5
#               mpg cyl disp  hp drat    wt  qsec vs am gear carb
# Mazda RX4      21   6  160 110  3.9 2.620 16.46  0  1    4    4
# Mazda RX4 Wag  21   6  160 110  3.9 2.875 17.02  0  1    4    4
```
