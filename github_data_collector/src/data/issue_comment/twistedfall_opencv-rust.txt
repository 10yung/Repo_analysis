```
operator[]()
FileNodeÂ cv::FileNode::operator[]  ( const char * nodename ) const

Python:
retval	=	cv.FileNode.at(	i	)
retval	=	cv.FileNode.getNode(	nodename	)
```
Can I detect text with that thing?
I noticed bunch of trivial methods have result return types that are barely due to ffi or barely end in error. For example, the [Mat::size](https://github.com/twistedfall/opencv-rust/blob/98153aa337e15cd2b22fe0430307f1e0f5b41013/src/manual/core/mat.rs#L385), Mat::rows and Mat::cols. I think it can simply panic if it's due to implementation error.

In my opinion, we can look at [tch::Tensor](https://docs.rs/tch/0.1.1/tch/struct.Tensor.html)'s approach. It's a crate that ports libtorch to rust. It generates a series of methods named  `f_METHOD()`, indicating a fallible method, along with `METHOD()` that wraps around the former. For example, `add()` always return the value of `f_add()` and panics if `f_add()` fails.

EDIT:
Plus that we can add a fallible `f_clone()` and implement `Clone` trait for `Mat`. I would give us some convenience in the case that I can derive `Clone` on struct with a `Mat` field.

I tried to build this on os x but it can't find TBB:

```
$ cargo build

---- 8< ---- snip long long long list of repetitive output ---- >8 ----

running: "ar" "crus" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/libocvrs.a" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/core.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/imgproc.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/highgui.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/features2d.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/photo.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/video.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/objdetect.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/calib3d.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfDMatch.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfKeyPoint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfMat.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfObjectDetection.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfPoint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfPoint2f.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfRect.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfString.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVec4f.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVec6f.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfDMatch.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfKeyPoint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfPoint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfPoint2f.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfchar.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfVectorOfuchar.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfchar.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfdouble.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOffloat.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfint.type.o" "/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out/VectorOfuchar.type.o"
ExitStatus(Code(0))
cargo:rustc-link-lib=static=ocvrs
cargo:rustc-link-search=native=/Users/phi/Documents/workspace/opencv-rust/target/debug/build/opencv-3f6c0a5fece25784/out
TARGET = Some("x86_64-apple-darwin")
cargo:rustc-link-lib=c++

--- stderr
ld: library not found for -llibtbb.dylib
clang: error: linker command failed with exit code 1 (use -v to see invocation)
thread '<main>' panicked at 'assertion failed: e.success()', build.rs:117

```

I have tbb installed via homebrew in:

```
/usr/local/Cellar/tbb/4.4-20150728 (107 files, 1.7M) *
  Built from source
```

Any ideas why the build won't work?
