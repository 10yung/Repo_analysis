<!--- Provide a general summary of your changes in the Title above -->

## Description
You can now do this : 
```
$("File1.ps1","File2.ps1") | Include
Get-ChildItem | Include
```

## Related Issue
<!--- This project only accepts pull requests related to open issues -->
<!--- If suggesting a new feature or change, please discuss it in an issue first -->
<!--- If fixing a bug, there should be an issue describing it with steps to reproduce -->
<!--- Please link to the issue here: -->
#289 

## Motivation and Context
<!--- Why is this change required? What problem does it solve? -->
Allows users to write slightly more concise code, rather than writing for loops.

## How Has This Been Tested?
<!--- Please describe in detail how you tested your changes. -->
<!--- Include details of your testing environment, and the tests you ran to -->
<!--- see how your change affects other areas of the code, etc. -->
New Pester tests have been added to verify that it can accept pipeline input both in the form of strings and FileInfo objects.

I also manually tested that it was backwards compatible, and could still work with the fileNamePathToInclude parameter.

## Screenshots (if appropriate):

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [x] My change requires a change to the documentation.
- [x] I have updated the documentation accordingly.
- [x] I have read the **CONTRIBUTING** document.
- [x] I have added tests to cover my changes.
- [x] All new and existing tests passed.

<!--- Provide a general summary of the issue in the Title above -->

## Expected Behavior
It would be nice to be able to do this :
`Get-ChildItem $somePath | Include;`

## Current Behavior
Currently, you would have to use a more verbose syntax üëç 
`Get-ChildItem $somePath | ForEach-Object {Include $_}`

## Possible Solution
Should just be a case of adding ValueFromPipeline=$true to the parameter, and putting the function's content into a process block.

I'm happy to implement this; just creating an issue to associate it with. This could probably be applied to other functions too (I've not had a thorough look yet). If I find them I can either add them to this issue, or log separate issues.

## Steps to Reproduce (for bugs)
N/A

## Context
This is just a minor improvement that makes user's code more concise.

## Your Environment
N/A

The `dot sourcing operator` (`.`) behaves differently between versions `4.7.4` and `4.8.0`. The properties I define in external (helper) scripts don't seem to be added to the scope of the `psakefile.ps1` script anymore, but they used to.

Better to explain with an example:

`pre.ps1`:
```ps
Properties {
  $a = 1
}
```

`post.ps1`:
```ps
Properties {
  $c = $a + $b
}
```

`psakefile.ps1`:
```ps
. .\pre.ps1

Properties {
  $b = $a + 1
}

. .\post.ps1

Task default -depends Main

Task Main {
  Write-Host "a=$a b=$b c=$c"
}
```

When run using `4.7.4` this script gives:
>a=1 b=2 c=3

When run using `4.8.0` this script gives:

>a=1 b=1 c=

If I use the `Include` function, instead of the dot (`.`) then the properties added are available to the `psakefile.ps1` script, but not to the `post.ps1` one (If I recall correctly, it outputs `a=1 b=2 c=2`, I only tried it once).

Is there a way to revert to the previous behavior in `4.8.0`? Unfortunately all of my build scripts are structured that way...
Build Time Report currently flattens tree-like structure of tasks. That obscures structure of the build for team members not that involved in the matter. Moreover, it's not easy to tell what's the total time required for task with all its subtasks.

## Expected Behavior
For A -> B, A -> C, B -> D, the output should be configurable to look like:

```
----------------------------------------------------------------------
Build Time Report
----------------------------------------------------------------------
Name                             Duration excl.    Duration incl.   
----                             --------------    --------------
A                                00:00:03.845      00:00:12.246
‚ï†‚ïê B                             00:00:07.215      00:00:07.243
‚ïë  ‚ïö‚ïê D                          00:00:00.028
‚ïö‚ïê C                             00:00:01.158
```

## Current Behavior
```
----------------------------------------------------------------------
Build Time Report
----------------------------------------------------------------------
Name                                        Duration
----                                        ------------ 
A                                           00:00:03.845
B                                           00:00:07.215
D                                           00:00:00.028
C                                           00:00:01.158
```

## Possible Solution
I can try to make required changes in WriteTaskTimeSummary, I just wonder what you think about the idea.
## Description
This removes the ability to specify multiple tasks (which is a non-backwards compatible change). This parses the values passed in and splats it as arguments to the task's action.

## Related Issue
https://github.com/psake/psake/issues/112

## Motivation and Context
Existing properties and parameters makes it difficult to cleanly specify task arguments. Having the ability to define parameters at the task level allows for cleaner scripts.

## How Has This Been Tested?
Ran all tests included in the psake project. Ran tests from Powershell command line, Powershell scripts and batch command line to ensure parameterization works as intended.

Some more info available here: https://github.com/dmarlow/psake/wiki/Task-Parameters

## Types of changes
<!--- What types of changes does your code introduce? Put an `x` in all the boxes that apply: -->
- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [x] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:
<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
<!--- If you're unsure about any of these, don't hesitate to ask. We're here to help! -->
- [x] My code follows the code style of this project.
- [x] My change requires a change to the documentation.
- [ ] I have updated the documentation accordingly.
- [x] I have read the **CONTRIBUTING** document.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.


Regarding the unchecked items in the checklist. I left out tweaking documentation until these changes have been discussed and approved as something that will be added.
## Context

1. I want to use a parameter passed via command line to initialize some properties which are used in multiple tasks, instead of initializing them in each task.
`Invoke-psake script.ps1 -parameters @{"baseDir" = "...some_path_here..."}`

2. And I want to validate that parameter first.


## Example
```
Properties {
$reusedPath = Join-Path $baseDir "smth"
}

Task Default -Depends Validate, TaskDB, TaskServer

Task Validate {
Assert (![string]::IsNullOrEmpty($baseDir)) '$baseDir was null or empty'
Assert (Test-Path $baseDir) "`$baseDir does not exist"
}

Task TaskDB {
$x = Join-Path $reusedPath "smth1"
}

Task TaskServer {
$x = Join-Path $reusedPath "smth2"
}
```

## Problem
Properties are initialized before any task. So my validation task doesn't do any work at all. For instance, if I don't pass **$baseDir** as a parameter or leave it empty, I will not reach Validate task. It will fail on a step of Properties initialization (`$reusedPath = Join-Path $baseDir "smth"`) with really not informative error:
`~~~~~~~~~~~ [<<==>>] Exception: Cannot bind argument to parameter 'Path' because it is null.`

## Question
Is there way to validate parameters before Properties initialization? Or is there other way how to achieve the same goal?

## Environment
* Module version used: 4.7.0
* Operating System and PowerShell version: Windows 10, PowerShel 5.1

Just wanted to make sure you'd seen this, given conversations about including a set of tasks 

https://github.com/SeatwaveOpenSource/psakify
Help seems to work but I'm not sure how.  
This commit updates the spec tests for the .net version to look at the major version number of the msbuild tools instead of trying to inspect the output of `msbuild /v`. I also am not convinced the old tests were working correctly as they would pass even without the correct version of msbuild on my machine. .
