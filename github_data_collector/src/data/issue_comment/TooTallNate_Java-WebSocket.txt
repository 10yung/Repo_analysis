I start the websocketserver by call start().
after it start, the server work well.
If I call start() again, my android application will be crashed.
so, how can I check if the websocket server is started?

Hi, I've found this issue by "up-for-grabs" label. Please, tell me if I missed something in the process
On January 1 2019 there was a commit (https://github.com/TooTallNate/Java-WebSocket/commit/15d6e0aa32007754870b855a24dfd0b5b1d84b84) to extend all license texts to 2019. Since it's 2020, should we update the licenses again?

   Somebody can't connect to websocket. Checked out nginx access log. I got "HTTP/1.0 404"
Normal user requests HTTP1.1 , The exception user requested http1.0 
   I'm not sure if it's websocket jar sent "HTTP/1.0" Protocol.
   thanks,Best regards
Hi. Broadcasting uses connections without synchronization:

```
	/**
	 * Send a text to all connected endpoints
	 * @param text the text to send to the endpoints
	 */
	public void broadcast(String text) {
		broadcast( text, connections );
	}

```

even trying to override this method with:
```
  override void broadcast(String: text) = {
    broadcast( text, getConnections() );
  }
```

will lead to

```
java.util.ConcurrentModificationException: null
	at java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)
	at java.util.HashMap$KeyIterator.next(HashMap.java:1469)
	at java.util.AbstractCollection.toArray(AbstractCollection.java:141)
	at java.util.ArrayList.<init>(ArrayList.java:178)
	at org.java_websocket.server.WebSocketServer.getConnections(WebSocketServer.java:282)
```


I just wanted to tell you that I developed a web chat app that uses this websocket library.
Thank you for publishing it. It works really well.

[FamChat](https://github.com/nalizadeh/FamChat)


We are running this wss server under android. There is no any problem to connect with this server using wss client under android. The wss client of chrome can also work with this server firstly. But if we close the wss connection and connect with this WSS server again, it failed mostly. We found that the chrome  omitted the "Client Key Exchange..." after the first established connection. The IOS websocket client had the same problem.
**Describe the bug**
`java.lang.NullPointerException: Attempt to invoke virtual method 'void java.net.Socket.close()' on a null object reference`
I have encountered this error many times, but I cannot reproduce it because I found that the error seems to be caused by multi-threaded concurrency.
I found that socket.close () appears in two different threads.
One is the reconnect() and it will call the reset():


	private void reset() {

		Thread current = Thread.currentThread();
		if (current == writeThread || current == connectReadThread) {
			throw new IllegalStateException("You cannot initialize a reconnect out of the websocket thread. Use reconnect in another thread to insure a successful cleanup.");
		}
		try {
			closeBlocking();
			if( writeThread != null ) {
				this.writeThread.interrupt();
				this.writeThread = null;
			}
			if( connectReadThread != null ) {
				this.connectReadThread.interrupt();
				this.connectReadThread = null;
			}
			this.draft.reset();
			if( this.socket != null ) {
				this.socket.close();
				this.socket = null;
			}
		} catch ( Exception e ) {
			onError( e );
			engine.closeConnection( CloseFrame.ABNORMAL_CLOSE, e.getMessage() );
			return;
		}
		connectLatch = new CountDownLatch( 1 );
		closeLatch = new CountDownLatch( 1 );
		this.engine = new WebSocketImpl( this, this.draft );
	}



One is in the WebsocketWriteThread:


	private class WebsocketWriteThread implements Runnable {


		@Override
		public void run() {
			Thread.currentThread().setName( "WebSocketWriteThread-" + Thread.currentThread().getId() );
			try {
				runWriteData();
			} catch ( IOException e ) {
				handleIOException( e );
			} finally {
				closeSocket();
				writeThread = null;
			}
		}

		/**
		 * Closing the socket
		 */
		private void closeSocket() {
			try {
				if( socket != null ) {
					socket.close();
				}
			} catch ( IOException ex ) {
				onWebsocketError( webSocketClient, ex );
			}
		}
	}


Obviously the reconnect thread and the write thread are not the same thread.This reminds me of a piece of code I saw elsewhere.


	public class GcsTest {

    private static String mStr = null;

    private static void printStrLength() {
        if (null != mStr) {
            int len = mStr.length();
            System.out.println("length = " + len);
        }
    }

    public static void main(String[] args) {
        GThreadA threadA = new GThreadA();
        GThreadB threadB = new GThreadB();
        threadA.start();
        threadB.start();
    }

    static class GThreadA extends Thread {
        @Override
        public void run() {
            while (true) {
                if (null == mStr) {
                    mStr = "Gcs";
                } else {
                    mStr = null;
                }
            }
        }
    }

    static class GThreadB extends Thread {
        @Override
        public void run() {
            while (true) {
                printStrLength();
            }
        }
    }}

It will have a null pointer error.It may take some time to run before the error occurs.After threadB just judged if (null! = mStr), it switched to threadA. At this time, threadA also judged that mStr was not null, so it set mStr to null, and then switched to threadB. When threadB gets the length A null pointer exception occurred.

So when reconnect () happens, is it possible that there are some conditions that triggered closeSocket in writeThread.And when reconnectThread sets the socket to null, just writeThread switches to socket.close().So it happened a null pointer exception and WebsocketWriteThread does not catch null pointer exception,it only catches IOException,so the entire application crashed.

**Environment(please complete the following information):**
 - Version used:1.4.0
 - Java version:1.8.0_131
 - Operating System and version: Android 9


We're getting connection timeout on Android devices for specific networks

On WebSocket Error:java.net.ConnectException: failed to connect to api.chat.com/2600:1f14:c6f:b001:cef6:15bd:ef49:28d1 (port 3002) from /:: (port 54802): connect failed: ETIMEDOUT (Connection timed out).

Please suggest us how to fix this

Thanks,
I was looking for an alternative to the chat server instructions (https://tootallnate.github.io/Java-WebSocket/) mentioned in #937. 

Apparently, running the examples used to be as simple as this:
```shell
ant
java -cp build/examples:dist/java_websocket.jar ChatServer
java -cp build/examples:dist/java_websocket.jar ChatClient
```

When I tried building it now using Maven or Gradle, the classes under `src/main/example/` weren't being compiled so I had to manually `javac` them and then download SLF4J dependency jars.

Maybe there should be a simple build task so you can do, for example `gradle example` or `mvn example` to run the examples.
