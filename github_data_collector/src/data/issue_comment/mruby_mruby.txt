- Add `mrbc_cleanup_local_variables()` function with `MRB_API`
- In `mirb` command, the `_` variable is defined after the `-r` switch
* The `Fixnum` constant is now an alias for the `Integer` class.
* Remove `struct mrb_state::fixnum_class` member.
  If necessary, use `struct mrb_state::integer_class` instead.
Is the following behavior intentional?

#### Files

  ```ruby
  # a.rb
  a = 1
  ```

  ```ruby
  # b.rb
  p a
  ```

#### mruby

  ```console
  $ bin/mruby -r ./a.rb b.rb
  1
  ```

#### Ruby

  ```console
  $ ruby -r ./a.rb b.rb
  Traceback (most recent call last):
  b.rb:1:in `<main>': undefined local variable or method `a' for main:Object (NameError)
  ```
build mruby in ubuntu18.04 64 bit with ASAN

poc:
```
a=0
b="asdfasdfasdf adaf asdf asdfa sdf asdfasdfasdfa sdf"
c={1=>1, 2=>"foo", "foo"=>nil, nil=> nil}
d=[1,nil," sdfg"]
srand(1337)
a = d.__id__(){||  }
a = d.initialize(a,){||  }
```


result:
```
result:
==128448==ERROR: AddressSanitizer: requested allocation size 0x8000000000000 (0x8000000001000 after adjustments for alignment, red zones etc.) exceeds maximum supported size of 0x10000000000 (thread T0)
    #0 0x4a9388 in realloc /home/casper/fuzz/fuzzdeps/llvm-9.0.0.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:164
    #1 0x543a35 in mrb_default_allocf /home/casper/targets/gramma/mruby/dbg/BUILD/src/state.c:56:12
    #2 0x4f56ab in mrb_realloc_simple /home/casper/targets/gramma/mruby/dbg/BUILD/src/gc.c:209:8
    #3 0x4f5dae in mrb_realloc /home/casper/targets/gramma/mruby/dbg/BUILD/src/gc.c:223:8
    #4 0x4f6563 in mrb_malloc /home/casper/targets/gramma/mruby/dbg/BUILD/src/gc.c:245:10
    #5 0x5478e1 in ary_expand_capa /home/casper/targets/gramma/mruby/dbg/BUILD/src/array.c:215:44
    #6 0x54d8ed in mrb_ary_set /home/casper/targets/gramma/mruby/dbg/BUILD/src/array.c:680:7
    #7 0x5585b4 in mrb_ary_aset /home/casper/targets/gramma/mruby/dbg/BUILD/src/array.c:935:7
    #8 0x59356f in mrb_vm_exec /home/casper/targets/gramma/mruby/dbg/BUILD/src/vm.c:1444:18
    #9 0x583324 in mrb_vm_run /home/casper/targets/gramma/mruby/dbg/BUILD/src/vm.c:947:12
    #10 0x5da14f in mrb_top_run /home/casper/targets/gramma/mruby/dbg/BUILD/src/vm.c:2850:12
    #11 0x6a450d in mrb_load_exec /home/casper/targets/gramma/mruby/dbg/BUILD/mrbgems/mruby-compiler/core/parse.y:6438:7
    #12 0x6a521d in mrb_load_file_cxt /home/casper/targets/gramma/mruby/dbg/BUILD/mrbgems/mruby-compiler/core/parse.y:6447:10
    #13 0x4f24ff in main /home/casper/targets/gramma/mruby/dbg/BUILD/mrbgems/mruby-bin-mruby/tools/mruby/mruby.c:327:11
    #14 0x7f3e7269cb96 in __libc_start_main /build/glibc-OTsEL5/glibc-2.27/csu/../csu/libc-start.c:310

==128448==HINT: if you don't care about these errors you may set allocator_may_return_null=1
SUMMARY: AddressSanitizer: allocation-size-too-big /home/casper/fuzz/fuzzdeps/llvm-9.0.0.src/projects/compiler-rt/lib/asan/asan_malloc_linux.cc:164 in realloc
==128448==ABORTING
```
For better scripting side UTF-8 support
Latest success: https://github.com/take-cheeze/mruby/runs/360977798
Supports:
- Ubuntu 16.04
- Ubuntu 18.04 gcc
- Ubuntu 18.04 clang
- macOS
- MinGW
- MSVC
- Cygwin
When supporting mruby 2.1 in go-mruby it caused some stack unwinding error. 
https://github.com/mitchellh/go-mruby/pull/75
https://github.com/mrbgems/go-mruby/tree/mruby-2
Unexpected `NULL` stack pointer occur in the `mrb_protect`

Logs: https://gist.github.com/take-cheeze/399dee626b9d085dfaf247121a660f23
Logs with sanitizer: https://gist.github.com/take-cheeze/c8369086e8f07744870e3a1bf968dc75
Note that this bit flags are not compatible with the native flags defined in `#include <fcntl.h>`.

