For using in VS2008:
#include <stdint.h>
#define ASMJIT_STATIC
#define ASMJIT_SUPPRESS_STD_TYPES
#include "asmjit/asmjit.h"
Hi!
what is the difference when encoding if the operand is not equal rax&eax and (rip+disp) = pointer ?
mov rax(or eax),[decode_pointer]&mov[decode_pointer],rax(or eax)
after coding instructions
movabs rax(eax),[imm_pointer]&movabs [imm_pointer],rax(or eax)

AsmJit is available as a port in vcpkg. Adding installation instructions will help users get started by providing a single command they can use to build AsmJit and include it into their projects
This is a question rather than an issue. One of the most useful additions in avx512 is its more flexible and general masking but I wasn't able to find examples/documentations how to use it in asjmjit. Any pointer would be really appreciated.
AsmJit's register allocator can now change register operand to memory operand in case that a virtual register is spilled. There are, however, few special cases that require details about the available CPU features, otherwise such change could change the feature requirements of the code:

  - `pextrw r32, xmm, imm` [SSE2] -> `pextrw r32/m16, xmm, imm` [SSE4.1]
  - `vpslldq vec, vec, imm` [AVX/AVX2] -> `vpslldq vec, vec/mem, imm` [AVX-512]
  - `vpsrldq vec, vec, imm` [AVX/AVX2] -> `vpsrldq vec, vec/mem, imm` [AVX-512]

At the moment these 3 instructions are workarounded to never change reg to mem.
I would like to use the `cc.newStack(n, a);` funciton in `X86Compiler` but be able to change the size of that region of memory as I am compiling funciton. Is it possible to change the `n` in the argument after it was created?

With the resurgence of the ppc64le architecture on the desktop as a blob-free alternative to buggy, insecure x86 machines*, there is strong interest in ppc64el support for asmjit (blocking among other things GZDoom on this libre-friendly architecture).

We're willing to provide access to development hardware (VPS) if needed.

* See Talos II / Blackbird / etc. and the Linux community surrounding the POWER9 chip.
If I have multiple code holders (say from different pauses of my JIT engine), it would be nice to be able to share the address table with future invocations in case they call the same external functions.  I would have to guarantee the table is within 2GB of the new code but that is easy to satisfy.
![image](https://user-images.githubusercontent.com/19886504/48675925-90b3e600-eb9a-11e8-8105-9195939c3e32.png)
![image](https://user-images.githubusercontent.com/19886504/48675932-98738a80-eb9a-11e8-8df3-4d2e373907e3.png)

Hello, I noticed that ja/jb/etc instructions allow Imm argument, and thus `imm_ptr()`.
I see that on x86-64, jmp with `imm_ptr` produces trampoline correctly if necessary.
However, it's not possible in the case of conditional jumps, they silently generate invalid code.

Possibly improve trampolines for conditional jumps? Could be solved by emitting additional jmp instruction implicitly somewhere at the end of function.