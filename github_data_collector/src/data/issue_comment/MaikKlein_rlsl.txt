Hi Maik,

It would be nice to get some instructions to build rlsl from scratch.
rlsl depends on the nightly compiler and therefore requires a specific version of it. I don't want to update the nightly compiler every week or so just to make rlsl build.

The problem is targeting specific nightlies is a bit difficult with rustup. I am currently experimenting with a custom CI and an install script that downloads the artefacts for the user.
* spir-v differentiates between runtime arrays and static arrays

* Slices can't be supported in rlsl at the moment

* Things like `len` on a static array currently maps to `Slice::len()` in Rust, which can't be expressed.

* Const generics aren't a thing yet.

Because slices are not supported, we need to abstract over arrays with generics 

```
fn foo(arr: &impl Array<f32>) { .. }
```

Have you given any thought on how the binding model from the CPU part of rust could look like? I have been thinking about this and wanted to ask what would you think to have something along the lines of this on the GPU side:

```rust
#[spirv(DescriptorLayout)]
struct InputData
{
	#[spirv(ShaderVisible_PS ...)]
	diffuse_textures: &[Texture],  //dynamic (un)bounded array slice
	
	#[spirv(ShaderVisible_ALL ...)]
	some_constant: u32,
	
	...
}

#[spirv(Interpolants)]
struct Interpolants
{
	color : vec3,
	uv: vec2,
	#[spirv(NoInterpolation)]
	index: u32,
}

#[spirv(vertex)]
fn vertex_shader(..., input: InputData) -> Interpolants
{ ... }

#[spirv(OutputMerger)]
struct OutputData
{
	#[spirv(Blendmode_Additive, ...)]
	color : vec3
}

#[spirv(fragment)]
fn fragment_shader(... , interp: Interpolants, input: InputData) -> OutputData
{
 	let color = input.diffuse_textures[interp.index].Sample(interp.uv);
 	...
}

#[spirv(ShaderPipeline)]
struct VSPSPipeline
{
	descriptor: InputData
	blendmode: OutputData
	vertex: typeof(vertex_shader)
	pixel: typeof(pixel_shader)
}
```

and some code similar to this on the CPU to create and launch a draw:
```rust
fn main()
{	
	let some_textures : Vec<Texture> = get_textures();
	let some_constant = 42;
	let input_data = InputData::new(some_textures , some_constant);

	let rendertarget: RenderTarget<vec3> = get_rendertarget()
	let output_data = OutputData::new(rendertarget);
	
	let pipeline = VSPSPipeline::new(input_data, output_data, vertex_shader, fragment_shader);
	
	cmd_buffer.set_pipeline(pipeline);
	cmd_buffer.draw_indexed(...);
}
```

One reason behind this is that I would like to have a typesafe interface between CPU and GPU maybe even go further down the road of having units of measure and types like NormalMapTexture to bind against. And the other reason would be that I am really really sick of writing all that CPU binding code which is super super boring. I am not attached to any particular syntax maybe you have another proposal? 
Right now everything inside a `bin` file is one shader module. I think this is relatively convenient but there may be better ways, especially since we need to add configuration for each shader module. See also https://github.com/MaikKlein/rlsl/issues/67
What is the best way to tell rlsl which extensions should be enabled? We still need to stay compatible with rustc/cargo.

Also extensions should be enabled per shader module, and not the whole project. That means we also need a way to make it easy to share the configuration between different shader modules.

Most extensions should be trivial to support. All features should be enabled by default and a simple pass can check which features are currently used in a shader module, and outputs an error if the extension hasn't been enabled, but it used.


I'm curious how RLSL handles vulkan extensions. For example, I'm interested in doing some GPGPU stuff with RLSL, which means I'd probably want to use e.g. [vulkan subgroups](https://www.khronos.org/blog/vulkan-subgroup-tutorial) for efficient sorts and stuff. Is there a way to opt-in to these extensions in a shader?
http://fire-face.com/personal/water/

![](http://fire-face.com/personal/water/water_assets/water4_0.gif)
I've already professed my excitement for RLSL in #40, but here I'd like to get a stronger idea about the kind of future you envisage for the project and the ways in which it might be able to inter-operate with regular Rust code.

Also, I apologise ahead of time if any of the following questions seem silly - I'm still new to SPIR-V and have a very limited understanding of what's possible and what is not!

### cargo

In the README you mention that one of the goals is to support cargo - could you elaborate on your plans for this? In particular, I'm curious where the boundaries lie. For example, could I write a crate that may be depended upon downstream by both RLSL and rust code? I can imagine it would be particularly useful to be able to use a math crate (something like `cgmath`) both in regular cpu code and in RLSL.

Further, is it necessary to have separate, specific files for RLSL code? E.g. could I one day write my RLSL shaders within my regular `.rs` rust modules, perhaps using a decorator of some sort to indicate entry/exit points?

### compute shaders

I would love to be able to use something like RLSL for doing general compute - is this something you would like to see at some point?

I think one of the things I love about the idea of RLSL is the reduction of friction between programming for the CPU and programming for the GPU. I've had a dream for a little while that one day we might be able to do something like pass a closure to a function which executes the closure in parallel on the GPU, returning either a Future or the result directly. I realise it is not possible to execute arbitrary Rust code on the GPU, but perhaps there would be some way to constrain the kinds of functions that could be executed on the GPU using a trait of some sort that extended `Fn`? I guess a similar/easier alternative might be to pass an instance of some type that implements some `GpuFn` trait?

### RLSL & Rust

I wonder if at some point down the track yourself and the rust-lang team might be interested in including (lower tier) support for something like RLSL out of the box, treating SPIR-V as an alternative target to LLVM or something along these lines? I realise I'm getting way ahead of myself here, but it can be fun to theorize and plant seeds :)

Anyway, thanks again for all your work on this - looking forward to watching (and hopefully taking-part-in one day) RLSL progress!
Hi, I'm making updates for Open Collective. Either you or a supporter signed this repo up for Open Collective. This pull request adds backers and sponsors from your Open Collective https://opencollective.com/rlsl ‚ù§Ô∏è
  
  It adds two badges at the top to show the latest number of backers and sponsors. It also adds placeholders so that the avatar/logo of new backers/sponsors can automatically be shown without having to update your README.md. [[more info](https://github.com/opencollective/opencollective/wiki/Github-banner)]. See how it looks on [this repo](https://github.com/apex/apex#backers).
You can also add a "Donate" button to your website and automatically show your backers and sponsors there with our widgets. Have a look here: https://opencollective.com/widgets

  P.S: As with any pull request, feel free to comment or suggest changes. The only thing "required" are the placeholders on the README because we believe it's important to acknowledge the people in your community that are contributing (financially or with code!).

  Thank you for your great contribution to the open source community. You are awesome! üôå
  And welcome to the open collective community! üòä

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other open source sustainers!
  