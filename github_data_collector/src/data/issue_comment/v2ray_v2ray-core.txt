In last 3 months, I'm verifying  [the patent claim](https://files.catbox.moe/vmzj04.pdf) by replicating it with code and data.

First, I spent two months to write a [TCP packet sorter](https://github.com/rickyzhang82/PacketSorter).  Then I collected home traffic for a month where I mixed v2ray traffic with other normal network traffic.

Last night, I stopped capturing packet data and started to build a classifier. I spent two hours to write a 1D Convolution Neutral Network to do binary classification on v2ray traffic and non-v2ray traffic. 

To my surprise, I can achieve classification accuracy rate up to 98.86%. In a nutshell, the patent claim is real. 

I shared my [classification model in Python notebook](https://github.com/rickyzhang82/V2Ray-Deep-Packet-Inspection/blob/master/V2Ray%20Deep%20Packet%20Inspection.ipynb) and findings in [my blog post](https://fr33land.net/2020/01/18/we-are-fucked/).
I'm sorry for report this error by screenshot. The network I use do not allow me ssh to my VPS, so I could not paste the error messages. Following is `systemctl status v2ray` after `systemctl start v2ray`:
![screenshot](https://user-images.githubusercontent.com/31679941/72673900-4b938880-3aab-11ea-9ad8-87c83fcd89a3.png)
My configuration for v2ray is simple: 
![config](https://user-images.githubusercontent.com/31679941/72673938-bfce2c00-3aab-11ea-9684-41c02c8773cb.png)
V4.22.0 has no problem.

As per my understanding of [RFC 1928](https://tools.ietf.org/html/rfc1928), the following handshake is required when connecting to a SOCKS5 server:
 * client -> server: SOCKS version + supported authentication methods
 * server -> client: selected method
 * client <-> server: method dependent negotiation
 * client -> server: SOCKS request
 * server -> client: SOCKS reply

The current implementation of this handshake in *v2ray-core* ([here](https://github.com/v2ray/v2ray-core/blob/5dd85717fcbc2f6b2175c6e9e258e8e964c0d0d3/proxy/socks/protocol.go#L393)) does not wait for the server to indicate which authentication method the server wants to use, it sends the username/password authentication related data along the version identifier/method selection message. This, in my opinion, makes *v2ray-core* non-RFC compliant (when username/password authentication is enabled), but my interpretation might be wrong, so I would like to hear the inputs of authors and contributors. Furthermore, the fact that most SOCKS5 client implementations act according to my interpretation makes me think that that is the expected behaviour ([curl](https://github.com/curl/curl/blob/f128c00a99ffb7482740f3579f42f5e026a1ee74/lib/socks.c#L354), [dante](https://github.com/notpeter/dante/blob/490f343af585a9be345cd775bf2569b21bc5fdf7/dante/lib/authneg.c#L51), [gosocks5](https://github.com/ginuerzh/gosocks5/blob/master/conn.go#L65) - *used in [gost](https://github.com/ginuerzh/gost)*, etc.)
你正在使用哪个版本的 V2Ray？（如果服务器和客户端使用了不同版本，请注明）
服务端使用：
V2Ray 4.22.1 (V2Fly, a community-driven edition of V2Ray.) Custom (go1.13.5 linux/amd64)
客户端使用：
V2Ray 4.21.3 (V2Fly, a community-driven edition of V2Ray.) Custom 



你的使用场景是什么？比如使用 Chrome 通过 Socks/VMess 代理观看 YouTube 视频。
Chrome VMess 代理 访问Google



你看到的不正常的现象是什么？（请描述具体现象，比如访问超时，TLS 证书错误等）
我使用的是：WebSocket+TLS+Web
我是使用bt.cn的脚本安装的 nginx+SSL，网站和SSL一切正常。
客户端显示如下错误：
``` Shell
2020/01/13 11:49:32 tcp:127.0.0.1:4682 accepted tcp:clients1.google.com:443 [proxy] 
2020/01/13 11:49:32 tcp:127.0.0.1:4685 accepted tcp:www.googleapis.com:443 [proxy] 
2020/01/13 11:49:33 [Warning] failed to handler mux client connection > v2ray.com/core/proxy/vmess/outbound: connection ends > v2ray.com/core/proxy/vmess/outbound: failed to read header > v2ray.com/core/proxy/vmess/encoding: failed to read response header > websocket: close 1000 (normal)
```

你期待看到的正确表现是怎样的？
网页正常显示



请附上你的配置（提交 Issue 前请隐藏服务器端IP地址）。
客户端配置：
``` json
{
  "policy": null,
  "log": {
    "access": "",
    "error": "",
    "loglevel": "warning"
  },
  "inbounds": [
    {
      "tag": "proxy",
      "port": 10808,
      "listen": "127.0.0.1",
      "protocol": "socks",
      "sniffing": {
        "enabled": true,
        "destOverride": [
          "http",
          "tls"
        ]
      },
      "settings": {
        "auth": "noauth",
        "udp": true,
        "ip": null,
        "address": null,
        "clients": null
      },
      "streamSettings": null
    }
  ],
  "outbounds": [
    {
      "tag": "proxy",
      "protocol": "vmess",
      "settings": {
        "vnext": [
          {
            "address": "host.net",
            "port": 443,
            "users": [
              {
                "id": "873cb57a-8910-4281-a3be-75f7901ddaae",
                "alterId": 64,
                "email": "t@t.tt",
                "security": "aes-128-gcm"
              }
            ]
          }
        ],
        "servers": null,
        "response": null
      },
      "streamSettings": {
        "network": "ws",
        "security": "tls",
        "tlsSettings": {
          "allowInsecure": true,
          "serverName": null
        },
        "tcpSettings": null,
        "kcpSettings": null,
        "wsSettings": {
          "connectionReuse": true,
          "path": "/aaaa/",
          "headers": null
        },
        "httpSettings": null,
        "quicSettings": null
      },
      "mux": {
        "enabled": true
      }
    },
    {
      "tag": "direct",
      "protocol": "freedom",
      "settings": {
        "vnext": null,
        "servers": null,
        "response": null
      },
      "streamSettings": null,
      "mux": null
    },
    {
      "tag": "block",
      "protocol": "blackhole",
      "settings": {
        "vnext": null,
        "servers": null,
        "response": {
          "type": "http"
        }
      },
      "streamSettings": null,
      "mux": null
    }
  ],
  "stats": null,
  "api": null,
  "dns": null,
  "routing": {
    "domainStrategy": "IPIfNonMatch",
    "rules": [
      {
        "type": "field",
        "port": null,
        "inboundTag": [
          "api"
        ],
        "outboundTag": "api",
        "ip": null,
        "domain": null
      }
    ]
  }
}
```


服务器端配置:
nginx配置一：
```Nginx
server
{
    listen 80;
	listen 443 ssl http2;
    server_name host.net;
    index index.php index.html index.htm default.php default.htm default.html;
    root /www/wwwroot/host.net;
    
    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则
    #error_page 404/404.html;
    #HTTP_TO_HTTPS_START
    if ($server_port !~ 443){
        rewrite ^(/.*)$ https://$host$1 permanent;
    }
    #HTTP_TO_HTTPS_END
    ssl_certificate    /www/server/panel/vhost/cert/host.net/fullchain.pem;
    ssl_certificate_key    /www/server/panel/vhost/cert/host.net/privkey.pem;
    ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    error_page 497  https://$host$request_uri;

    #SSL-END
    
    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改
    #error_page 404 /404.html;
    #error_page 502 /502.html;
    #ERROR-PAGE-END
    
    #PHP-INFO-START  PHP引用配置，可以注释或修改
    include enable-php-56.conf;
    #PHP-INFO-END
    
    #REWRITE-START URL重写规则引用,修改后将导致面板设置的伪静态规则失效
    include /www/server/panel/vhost/rewrite/host.net.conf;
    #REWRITE-END
    
    #禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)
    {
        return 404;
    }
    
    #一键申请SSL证书验证目录相关设置
    location ~ \.well-known{
        allow all;
    }
    
    location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
    {
        expires      30d;
        error_log off;
        access_log /dev/null;
    }
    
    location ~ .*\.(js|css)?$
    {
        expires      12h;
        error_log off;
        access_log /dev/null; 
    }
    
    location /aaaa/
    {
        proxy_redirect off;
        proxy_pass http://127.0.0.1:20001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;

        # Show realip in v2ray access.log
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    
    access_log  /www/wwwlogs/host.net.log;
    error_log  /www/wwwlogs/host.net.error.log;
}
```

nginx配置二：
```Nginx
user  www www;
worker_processes auto;
error_log  /www/wwwlogs/nginx_error.log  crit;
pid        /www/server/nginx/logs/nginx.pid;
worker_rlimit_nofile 51200;

events
    {
        use epoll;
        worker_connections 51200;
        multi_accept on;
    }

http
    {
        include       mime.types;
		#include luawaf.conf;

		include proxy.conf;

        default_type  application/octet-stream;

        server_names_hash_bucket_size 512;
        client_header_buffer_size 32k;
        large_client_header_buffers 4 32k;
        client_max_body_size 50m;

        sendfile   on;
        tcp_nopush on;

        keepalive_timeout 60;

        tcp_nodelay on;

        fastcgi_connect_timeout 300;
        fastcgi_send_timeout 300;
        fastcgi_read_timeout 300;
        fastcgi_buffer_size 64k;
        fastcgi_buffers 4 64k;
        fastcgi_busy_buffers_size 128k;
        fastcgi_temp_file_write_size 256k;
		fastcgi_intercept_errors on;

        gzip on;
        gzip_min_length  1k;
        gzip_buffers     4 16k;
        gzip_http_version 1.1;
        gzip_comp_level 2;
        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;
        gzip_vary on;
        gzip_proxied   expired no-cache no-store private auth;
        gzip_disable   "MSIE [1-6]\.";

        limit_conn_zone $binary_remote_addr zone=perip:10m;
		limit_conn_zone $server_name zone=perserver:10m;

        server_tokens off;
        access_log off;

server
    {
        listen 888;
        server_name phpmyadmin;
        index index.html index.htm index.php;
        root  /www/server/phpmyadmin;

        #error_page   404   /404.html;
        include enable-php.conf;

        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$
        {
            expires      30d;
        }

        location ~ .*\.(js|css)?$
        {
            expires      12h;
        }

        location ~ /\.
        {
            deny all;
        }

        access_log  /www/wwwlogs/access.log;
    }
include /www/server/panel/vhost/nginx/*.conf;
}
```

v2ray配置：
```json
{
  "log" : {
    "access": "/var/log/v2ray/access.log",
    "error": "/var/log/v2ray/error.log",
    "loglevel": "warning"
  },
  "inbound": {
    "port": 20001,
    "listen":"127.0.0.1",
    "protocol": "vmess",
    "settings": {
      "clients": [
        {
          "id": "873cb57a-8910-4281-a3be-75f7901ddaae",
          "level": 1,
          "alterId": 64,
          "email": "akcp1234@gmail.com"
        }
      ]
    },
     "streamSettings": {
      "network": "ws",
      "wsSettings": {
         "path": "/aaaa/"
        }
     }
  },
  "outbound": {
    "protocol": "freedom",
    "settings": {}
  }
}
```



比如DNS配置里的"expectIPs": ["geoip:!cn"]
这样就不用单独为非cn的ip单独弄一个IP列表。
使用国外的dns时可以只得到国外IP
Some commits of #2122
1) What version of V2Ray are you using (If you deploy different version on server and client, please explicitly point out)?

V2Ray 4.22.0 linux-64 on centos 7.7.1908 

4) What's your expectation?

I expect it listen on 22334(vmess+quic), 22335 (shadowsocks)
But the result is, it only listen on 22335, and shadowsocks protocol working well,
but 22334 is Connection refused

5) Please attach your configuration file (**Mask IP addresses before submit this issue**).

At first, following two version config all working well on my another VPS.

but, when i deploy to a new google cloud, install from a fresh CentOS 7, one of them not working at all.

not working version:

```json
{
    "log": {
        //"access": "/var/log/v2ray/access.log",
        // "error": "/var/log/v2ray/error.log",
        "loglevel": "debug"
    },
    "dns": {
        "servers": [
            "https+local://dns.google/dns-query"
        ]
    },
    "inbounds": [
        {
            "protocol": "vmess",
            "port": 22334,
            "settings": {
                "clients": [
                    {
                        "id": "some_id",
                        "alterId": 4,
                        "security": "none" // set none only if use quic
                    }
                ]
            },
            "streamSettings": {
                "network": "quic",
                "quicSettings": {
                    "security": "chacha20-poly1305",
                    "key": "password",
                    "header": {
                        "type": "wechat-video"
                    }
                }
            }
        },
        {
            "protocol": "shadowsocks",
            "port": 22335, // 监听端口
            "settings": {
                "method": "chacha20-ietf-poly1305",
                "password": "password"
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {}
        }
    ]
}
```
start log, only 22335 is listening, vmess broken, **but no any exception is raised.**
following is log.

```sh
V2Ray 4.22.0 (V2Fly, a community-driven edition of V2Ray.) Custom
A unified platform for anti-censorship.
2020/01/09 18:19:05 [Debug] v2ray.com/core/app/log: Logger started
2020/01/09 18:19:05 [Info] v2ray.com/core/app/dns: DNS: created Local DOH client for https://dns.google/dns-query
2020/01/09 18:19:05 [Debug] v2ray.com/core/app/proxyman/inbound: creating stream worker on 0.0.0.0:22334
2020/01/09 18:19:05 [Debug] v2ray.com/core/app/proxyman/inbound: creating stream worker on 0.0.0.0:22335
2020/01/09 18:19:05 [Info] v2ray.com/core/transport/internet/tcp: listening TCP on 0.0.0.0:22335
2020/01/09 18:19:05 [Warning] v2ray.com/core: V2Ray 4.22.0 started
```

```json
working version: (After remove quic config)

{
    "log": {
        //"access": "/var/log/v2ray/access.log",
        // "error": "/var/log/v2ray/error.log",
        "loglevel": "debug"
    },
    "dns": {
        "servers": [
            "https+local://dns.google/dns-query"
        ]
    },
    "inbounds": [
        {
            "protocol": "vmess",
            "port": 22334,
            "settings": {
                "clients": [
                    {
                        "id": "0b798ac5-d247-4785-ba87-47f44d44f147",
                        "alterId": 4,
                        "security": "none" // set none only if use quic
                    }
                ]
            },
            "streamSettings": {
                "network": "tcp"
            }
        },
        {
            "protocol": "shadowsocks",
            "port": 22335, // 监听端口
            "settings": {
                "method": "chacha20-ietf-poly1305",
                "password": "1wentao1"
            }
        }
    ],
    "outbounds": [
        {
            "protocol": "freedom",
            "settings": {}
        }
    ]
}
```
```sh
V2Ray 4.22.0 (V2Fly, a community-driven edition of V2Ray.) Custom
A unified platform for anti-censorship.
2020/01/09 18:20:34 [Debug] v2ray.com/core/app/log: Logger started
2020/01/09 18:20:34 [Info] v2ray.com/core/app/dns: DNS: created Local DOH client for https://dns.google/dns-query
2020/01/09 18:20:34 [Debug] v2ray.com/core/app/proxyman/inbound: creating stream worker on 0.0.0.0:22334
2020/01/09 18:20:34 [Debug] v2ray.com/core/app/proxyman/inbound: creating stream worker on 0.0.0.0:22335
**2020/01/09 18:20:34 [Info] v2ray.com/core/transport/internet/tcp: listening TCP on 0.0.0.0:22334**
2020/01/09 18:20:34 [Info] v2ray.com/core/transport/internet/tcp: listening TCP on 0.0.0.0:22335
2020/01/09 18:20:34 [Warning] v2ray.com/core: V2Ray 4.22.0 started
```

8) Other configurations (such as Nginx) and logs.

Not used it.
Hi,

I have a question: The version `v4.22.1` is it reposted? since i am maintaining a v2ray chromebook distribution.

https://github.com/skycocker/chromebrew/pull/3739

So i would be very confused if the same version is released twice. I have a project to auto build the new v2ray version to publish to chromebrew, will not be built if the version already exists.

I wish when publish a new version should be change version number.

查看了V2Ray的Api并没有明确提出如何使用只是简单描绘了grpc调用，我如何使用api的StatsService和HandlerService还有内置日志功能呢

1 制定统一的url订阅协议，方便生态的统一和发展，支持批量服务器订阅和更新，支持qr扫码订阅。
2 增加服务器分组功能。
3 制定统一的标准格式，支持可分组的服务器批量导入导出，基于文件交换的方式。

主要就是一些标准化制定的建议，现在各家的gui程序多少都不太统一，不利于生态发展。
可以考虑单独开一个项目，用于起草，编号，维护制定一些标准。