Dear Creator

Would it be okay to use your work [CocoaLumberjack-3.2.1.zip] under Creative Commons CC0 v1.0 Universal License (CC0 v1.0)?

The Swiss law do not recognize a permanent relinquishment of Copyrights as the Public Domain provides for.

Thank you very much and kind regards
Philipp

### New Issue Checklist

* [x] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [x] I have read the [Documentation](https://github.com/CocoaLumberjack/CocoaLumberjack#documentation) or [CocoaDocs](cocoadocs.org/docsets/CocoaLumberjack)
* [x] I have searched for a similar issue in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/issues) and found none

### Issue Info

 Info                    | Value                               |
-------------------------|-------------------------------------|
 Platform Name           | ios
 Platform Version        | 13.2.2
 CocoaLumberjack Version | 3.6.0
 Integration Method      | carthage
 Xcode Version           |  Xcode 11.2
 Repro rate              | all the time (100%)
 Demo project link       | n.a.

### Issue Description and Steps

After upgrade my code to new xcode version and recompiled all used carthage frameworks i dont see any logs in the cosole. When i comment the filelogger part then it works. Someone has an idea?

```swift
    // File logger
    if AppConstants.USE_FEATURE_SEND_LOGS {
      let logManager = CustomDDFileManager()
      fileLogger = CustomDDFileLogger(logFileManager: logManager)
      if let fileLogger = fileLogger {
        fileLogger.rollingFrequency = -1
        fileLogger.logFileManager.maximumNumberOfLogFiles = 2
        DDLog.add(fileLogger)
      }
    }

    DDLog.add(DDTTYLogger.sharedInstance)
    DDLog.add(XCDLumberjackNSLogger())
```



### New Pull Request Checklist

* [x] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [x] I have read the [Documentation](http://cocoadocs.org/docsets/CocoaLumberjack/)
* [x] I have searched for a similar pull request in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/pulls) and found none

* [x] I have updated this branch with the latest master to avoid conflicts (via merge from master or rebase)
* [] I have added the required tests to prove the fix/feature I am adding
* [x] I have updated the documentation (if necessary)
* [ ] I have run the tests and they pass
* [ ] I have run the lint and it passes (`pod lib lint`)

This merge request fixes / refers to the following issues: #1103 

### Pull Request Description

As outlined in #1103, we might return nil from `-[DDLogFileManagerDefault createNewLogFile]` if critical errors occurred a few times in a row. 
I've changed the API now to allow propagating the errors (since `DDLogFileManager` is a protocol) and deal with them in `DDFileLogger`. Still, the nullability annotation of `currentLogFileInfo` had to change to `nullable` since we have to return null there, if the creation of a log file fails.

### New Pull Request Checklist

* [X] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [X] I have read the [Documentation](http://cocoadocs.org/docsets/CocoaLumberjack/)
* [X] I have searched for a similar pull request in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/pulls) and found none

* [X] I have updated this branch with the latest master to avoid conflicts (via merge from master or rebase)
* [ ] I have added the required tests to prove the fix/feature I am adding
* [ ] I have updated the documentation (if necessary)
* [X] I have run the tests and they pass
* [X] I have run the lint and it passes (`pod lib lint`)

### Pull Request Description

Hello there,

#### The problem

Right now, if you will try to reuse `CocoaLumberjack` built with Swift 5.1 Toolchain with Xcode 11.2 (11.2.1GM) you get an error:

```
./Badoo/Platform/Foundation/source/logging/BPFLog.swift:6:8: 
    Module compiled with Swift 5.1 cannot be imported by the Swift 5.1.2 compiler: 
    ./Badoo/ThirdParty/Carthage/Build/iOS/CocoaLumberjackSwift.framework/Modules/CocoaLumberjackSwift.swiftmodule/x86_64-apple-ios-simulator.swiftmodule
```

#### Solution

Swift 5.1 is here with Module Stability support, and to be able to reuse `CocoaLumberjack` binaries between Swift Toolchains >= 5.1 we have to build it with `BUILD_LIBRARY_FOR_DISTRIBUTION = YES` option. In this pull request, the `BUILD_LIBRARY_FOR_DISTRIBUTION` option is enabled for the `Release` configuration.

This is the year when we blame Apple for missing documentation and this is the case. In general, this option does the following: 

> Ensures that your libraries are built for distribution. For Swift, this enables support for library evolution and generation of a module interface file.

If you want to know more, check ["Binary Frameworks in Swift"](https://developer.apple.com/videos/play/wwdc2019/416/) session from WWDC'19.

We tested the solution, and it works just fine. You can build `CocoaLumberjack` with Swift 5.1 Toolchain and it will work/link for both Xcode 11.1-11.2 (aka, Swift 5.1 and Swift 5.1.1).

Cheers,
Artem | Badoo
### New Issue Checklist

* [x] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [x] I have read the [Documentation](https://github.com/CocoaLumberjack/CocoaLumberjack#documentation) or [CocoaDocs](cocoadocs.org/docsets/CocoaLumberjack)
* [x] I have searched for a similar issue in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/issues) and found none

### Issue Info

 Info                    | Value                               |
-------------------------|-------------------------------------|
 CocoaLumberjack Version | 3.6.0
 Integration Method      | cocoapods
 Xcode Version           | Xcode 11.1

### Issue Description and Steps

When integrating CocoaLumberjack with the following experimental CocoaPods options, the `CLIColor.h` file is not found in the generated umbrella header. Specifically this affects other Pods that depend on CocoaLumberjack.

```ruby
# Podfile
install! 'cocoapods', :generate_multiple_pod_projects => true
```

If `generate_multiple_pod_projects` is set to false, it compiles as expected.
https://github.com/CocoaLumberjack/CocoaLumberjack/blob/ded5f5999c853e7fef61fc27db100b169db0e21f/Sources/CocoaLumberjack/include/DDFileLogger.h#L151

createNewLogFile can return nil, as it's signature seems to confirm, but due to the `NS_ASSUME_NONNULL_BEGIN` wrapping the whole file, it bridges to Swift as `String` instead of its true behaviour of `String?`, which can cause a crash when the function returns nil.
- The `didArchiveLogFile:` returns the `filePath` instead of the `fileName`. The commit 62e4ef1 introduced this mistake.

### New Pull Request Checklist

* [x] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [x] I have read the [Documentation](http://cocoadocs.org/docsets/CocoaLumberjack/)
* [x] I have searched for a similar pull request in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/pulls) and found none

* [x] I have updated this branch with the latest master to avoid conflicts (via merge from master or rebase)
* [ ] I have added the required tests to prove the fix/feature I am adding
* [ ] I have updated the documentation (if necessary)
* [ ] I have run the tests and they pass
* [ ] I have run the lint and it passes (`pod lib lint`)

This merge request fixes / refers to the following issues: ...

### Pull Request Description

...


I add a property `useStandardStyleForCustomFormatters` in DDTTYLogger, It will allow user apply the NSLogger Style to the custom logger formatter. And it will fix the #1080, too.
I use the DDTTYLogger:

```
class MyFormatter: DDLogFormatter {
    func format(message logMessage: DDLogMessage) -> String? {
        if logMessage.message == "\n" { return logMessage.message }
        return logMessage.message.split(separator: "\n").map { ">> \($0)" }.joined(separetor: "\n")
    }
}
let console = DDTTYLogger.sharedInstance!
console.logFormatter = MyFormatter()
logger.add(console, with: .info)

logger.log("A")
logger.log("\n")
logger.log("B")
```
I get the output:
```
>> A
2019-07-03 22:11:09:508 XX[34846:4138957]

>> B
```

The timestamp could not be disable, the `DDTTYLogger.m` said:
```
- (void)logMessage:(DDLogMessage *)logMessage {
    NSString *logMsg = logMessage->_message;
    BOOL isFormatted = NO;

    if (_logFormatter) {
        logMsg = [_logFormatter formatLogMessage:logMessage];
        isFormatted = logMsg != logMessage->_message;
    }
    ....
    if (isFormatted) {
        // Will not add the timestamp
   } else {
      // Will add the timestamp
   }
```
My formatter will return origin string when the message is `\n`, it is very bad. I think we could have a variable to disable the timestamp instead of check the `isFormatted`.
### New Issue Checklist

* [X] I have read and understood the [CONTRIBUTING guide](https://github.com/CocoaLumberjack/CocoaLumberjack/blob/master/.github/CONTRIBUTING.md)
* [X] I have read the [Documentation](https://github.com/CocoaLumberjack/CocoaLumberjack#documentation) or [CocoaDocs](cocoadocs.org/docsets/CocoaLumberjack)
* [X] I have searched for a similar issue in the [project](https://github.com/CocoaLumberjack/CocoaLumberjack/issues) and found none

### Issue Info

 Info                    | Value                               |
-------------------------|-------------------------------------|
 Platform Name           | ios
 Platform Version        | 12.2
 CocoaLumberjack Version | 3.5.3
 Integration Method      | cocoapods
 Xcode Version           | 10.2
 Repro rate              | all the time (100%)
 Demo project link     | none

### Issue Description and Steps

The `didArchiveLogFile:` specifies that it returns the file path, `logFilePath`, but it seems to return the file name instead.
See: `NSString *archivedLogFilePath = [logFileInfo.fileName copy];`
```
- (BOOL)lt_shouldUseLogFile:(nonnull DDLogFileInfo *)logFileInfo isResuming:(BOOL)isResuming {
...
   if (isResuming && (_doNotReuseLogFiles || [self lt_shouldLogFileBeArchived:logFileInfo])) {
        logFileInfo.isArchived = YES;
        NSString *archivedLogFilePath = [logFileInfo.fileName copy];

        if ([_logFileManager respondsToSelector:@selector(didArchiveLogFile:)]) {
            dispatch_async(_completionQueue, ^{
                [self->_logFileManager didArchiveLogFile:archivedLogFilePath];
            });
        }

        return NO;
    }
```

Is this the intended behavior? 
This seems to be a change introduced in version `3.5.0`. Version `3.4.2` had the correct file path as expected.

If this needs correction, I am willing to create a pull request of course.

Thanks.