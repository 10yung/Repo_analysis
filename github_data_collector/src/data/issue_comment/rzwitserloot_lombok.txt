![image](https://user-images.githubusercontent.com/38677722/72673862-b2647200-3aaa-11ea-8400-5f71c164d457.png)

Action:

Consider defining a bean of type 'java.lang.String' in your configuration.

As you can see, an error is reported if a property of type String is defined.
Is there any good solution,pleas
## Problem

Given:

```java
    @Builder @NoArgsConstructor @AllArgsConstructor class Example {
        int a;
        @Builder.Default int x = 10;

        public Example(int i) {
            this.a = i + 15;
        }
    }
```

The code compiles, and if I were to invoke `new Example(5)`, then the value for `x` ends up being.... 0. Because the default expression (here, `10`) is moved, and 'only' used by lombok-generated code (so, the generated no-args constructor uses it, as does the builder).

## the common case: the field is final

Right now, if the field is `final`, then the above code example does not compile, because the manually written constructor does not definitely assign `x`. If a manually written constructor DOES 'definitely assign' it, I don't think we have a problem here. So that's easy; we need not change anything.

## the uncommon case: the field is not final

For non-final fields with defaults, we check if manually written constructors exist. If they do, we analyse the default value and check if it is either a literal, or, a 'field reference', such as `Integer.MAX_VALUE`. If it is, we make the initializing expression of the field an invocation to the default-generating method (because we know for sure this is side effect free, so any double-invoke doesn't matter). If it is not (for example, it is `counter++` or `LocalDate.now()`), we generate a warning. This warning cannot be removed, which effectively means that you can't use lombok at all. Let's hope the combination of manually written constructors + non-constant defaults are rare enough that it doesn't matter. Even if the 'non-constant default' is constant after all. For example, `LocalDate.of(2020, 1, 1)` is constant, but lombok doesn't know that.

OPEN QUESTION: Should we have a parameter on `Builder.Default` to say: yeahyeah just generate the invoke, I'm aware this means any attempt to construct this thing will neccessarily resolve the initializer expression once EVEN IF an explicit value is set?

I just want to use `@Delegate` on two `List<String>` fields. 
It would allow to have convenient `add*` methods instead of `getX().add(X)`.

```java
	@lombok.Data
	public static class Data {

		@Delegate(types = { ElementAdders.class })
		private List<String> elements = new ArrayList<String>();

		@Delegate(types = { ItemAdders.class })
		private List<String> items = new ArrayList<String>();

		public interface ElementAdders extends List<String> {
			
		}

		public interface ItemAdders extends List<String> {
		}
	}
```

The code above produces multiple "Duplicate method" compiler errors.

Is there any way to do it with Lombok?
It seems not support java13.

My compile failed with below message.

`
warning: You aren't using a compiler supported by lombok, so lombok will not work and has been disabled.
  Your processor is: org.gradle.api.internal.tasks.compile.processing.IncrementalProcessingEnvironment
  Lombok supports: sun/apple javac 1.6, ECJ
warning: You aren't using a compiler supported by lombok, so lombok will not work and has been disabled.
`
IDEA Mac OpenJDK11
Build 
---------
Error:java: Compilation failed: internal java compiler error

--------
Configuring IDEA still fails
When I try to upgrade lombok from 1.16.14 to version after 1.18.4. The following code breaks.

```
public class OriginFilterForFrontend implements OriginFilter {

    @Delegate
    private final OriginFilter.Default defaultOriginFilter;

    @SneakyThrows(MalformedURLException.class)
    public OriginFilterForFrontend(@NonNull String frontendDomain) {
        defaultOriginFilter = new OriginFilter.Default(Lists.newArrayList(new URL("https://www."
                + frontendDomain), new URL("https://" + frontendDomain)), Lists.newArrayList(
                        "localhost", "0.0.0.0", "127.0.0.1"));
    }

}
```

```
public interface OriginFilter {

	public default boolean isOriginAllowed(@NonNull String originHeaderField) {
		try {
			URL originURL = new URL(originHeaderField);
			return isOriginAllowed(originURL);
		} catch (MalformedURLException e) {
			return false;
		}
	}

	public boolean isOriginAllowed(URL origin);

	@EqualsAndHashCode
	public static class Default implements OriginFilter {
		@NonNull
		private final List<String> allowedOrigins;

		@NonNull
		private final List<String> allowedOriginHosts;

		@Override
		public boolean isOriginAllowed(@NonNull URL origin) {
			return allowedOrigins.contains(origin.toExternalForm()) || allowedOriginHosts.contains(origin.getHost());
		}

		public Default(@NonNull List<URL> allowedOrigins, @NonNull List<String> allowedOriginHosts) {
			this.allowedOrigins = allowedOrigins.stream().map(URL::toExternalForm).collect(Collectors.toList());
			this.allowedOriginHosts = allowedOriginHosts;
		}

	}
}
```


The code should pass, but it throws an error:
```
OriginFilterForFrontend.java:[29,5] method isOriginAllowed(java.net.URL) is already defined in class 
 OriginFilterForFrontend
```



I hope this is not a duplicate, but I could not find anything similar. It would be great if Lombok could be used to generate different versions of a method with and without optional parameters. For this, a new annotation `@optional(default)` could be introduced that can be added to parameters of methods (or constructors). For example, consider the "lomboked" method:
```
public void doSomething(String a, @optional(42) int b, @optional(false) boolean c) {
   // method body
}
```

The default value itself could be optional, too, resulting in defaults like `0`, `false`, or `null` depending on the type of the parameter. This would result in 4 different versions of the method (in general: 2^(number of @optional) versions):

```
public void doSomething(String a) {
    doSomething(a, 42, false);
}
public void doSomething(String a, int b) {
    doSomething(a, b, false);
}
public void doSomething(String a, boolean c) {
    doSomething(a, 42, b);
}
public void doSomething(String a, int b, boolean c) {
   // method body
}
```

Whereas the following would result in an error and thus would not be allowed, as there are two optional parameters of the same type (without a non-optional parameter in between) so the different methods would have the same signature:

`public void doesNotWork(A a, @optional(42) int b, @optional(23) int c) {
`

Optionally, optional parameters could also be paired or grouped. E.g. in the following example, there would only be two versions of the method: One with all parameters, and one with only the required parameters, but none with the individual optional parameters. (This would also allow for multiple optional parameters of the same type in a row.)

```
public void doSomething(String a, @optional(42, group=0) int b, @optional(false, group=0) boolean c) {
   // method body
}
```


Often Java code contains many versions of the same methods (or constructors) with different parameters, some of which are optional. Usually, there is one "full" version of the method that gets called by all the others with appropriate default values. With the `@optional(defaultValue)` annotation this would not be needed any more.

**Describe the feature**

We have to provide a no arg constructor and the full constructor needed by Builder, if I want to have a no arg constructor and a builder for my class: 

```
@Builder
@NoArgsConstructor // I need also a no arg constructor
@AllArgsConstructor // redundant information because lombok knows I want a @Builder
public class User {
..
}
```

But why do I have to explicitly add `@AllArgsConstructor`? Lombok should automatically add the appropriate constructor if I annotate the class with `@Builder`, even if I also add `@NoArgsConstructor`.

**Please allow this in lombok:**

```
@Builder
@NoArgsConstructor
public class User {
..
}
```
When `Javac` tried to `parse (attr)` the `JCLambda` node in the `LazyGetter Method Body` generated by `@Getter(lazy = true)`, it crashed because the `cache type` at that `location` did not match what was `expected`.

__And in addition to crashing it can cause type inference to fail.__

JDK: OpenJDK 13.0.1+9
Lombok: 1.18.11 (2019-09-26 08:56:18 UTC)

Reproduced by the following code: 
```java
import lombok.Getter;

public class TestLombokBugLazyGetter {
    
    public static String bar() { return ""; }
    
    @Getter(lazy = true)
    private final Object field = foo(bar(), null, () -> { });
    
    public static Object foo(final Object arg0, final Object arg1, final Runnable arg3) { return null; }
    
}
```

```stacktrace
 An exception has occurred in the compiler (13.0.1). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program, the following diagnostic, and the parameters passed to the
 Java compiler in your report. Thank you.
  java.lang.ClassCastException: class com.sun.tools.javac.tree.JCTree$JCLambda cannot be cast to class com.sun.tools.javac.tree.JCTree$JCMethodInvocation (com.sun.tools.javac.tree.JCTree$JCLambda and com.sun.tools.javac.tree.JCTree$JCMethodInvocation are in module jdk.compiler of loader 'app')
   at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr$ResolvedMethodType.dup(ArgumentAttr.java:673)
   at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.processArg(ArgumentAttr.java:242)
   at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.visitLambda(ArgumentAttr.java:301)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCLambda.accept(JCTree.java:1914)
   at jdk.compiler/com.sun.tools.javac.comp.ArgumentAttr.attribArg(ArgumentAttr.java:199)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:664)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribArgs(Attr.java:766)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitApply(Attr.java:2141)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodInvocation.accept(JCTree.java:1737)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribExpr(Attr.java:710)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitVarDef(Attr.java:1191)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCVariableDecl.accept(JCTree.java:966)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:758)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1311)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1030)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitIf(Attr.java:1856)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1492)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:758)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1311)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1030)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitSynchronized(Attr.java:1575)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCSynchronized.accept(JCTree.java:1348)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:758)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1311)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1030)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitIf(Attr.java:1856)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCIf.accept(JCTree.java:1492)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStats(Attr.java:758)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitBlock(Attr.java:1311)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCBlock.accept(JCTree.java:1030)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.visitMethodDef(Attr.java:1115)
   at jdk.compiler/com.sun.tools.javac.tree.JCTree$JCMethodDecl.accept(JCTree.java:876)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribTree(Attr.java:666)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribStat(Attr.java:739)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClassBody(Attr.java:4843)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4734)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attribClass(Attr.java:4663)
   at jdk.compiler/com.sun.tools.javac.comp.Attr.attrib(Attr.java:4608)
   at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.attribute(JavaCompiler.java:1346)
   at jdk.compiler/com.sun.tools.javac.main.JavaCompiler.compile(JavaCompiler.java:972)
   at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:318)
   at jdk.compiler/com.sun.tools.javac.main.Main.compile(Main.java:176)
   at jdk.compiler/com.sun.tools.javac.Main.compile(Main.java:57)
   at jdk.compiler/com.sun.tools.javac.Main.main(Main.java:43)

```

Cause of error:

https://github.com/rzwitserloot/lombok/blob/a81df33c10f69d49425bdd0606052178a172a66f/src/core/lombok/javac/handlers/HandleGetter.java#L254-L255
__This should not be done here.__

com/sun/tools/javac/comp/ArgumentAttr.java
```java
    /**
     * Process a method argument; this method allows the caller to specify a custom speculative attribution
     * logic (this is used e.g. for lambdas).
     */
    @SuppressWarnings("unchecked")
    <T extends JCExpression, Z extends ArgumentType<T>> void processArg(T that, Supplier<Z> argumentTypeFactory) {
        UniquePos pos = new UniquePos(that);
        // in UniquePos <init>
        // this.pos = that.pos;
        Z cached = (Z)argumentTypeCache.get(pos);
        // got com.sun.tools.javac.comp.ArgumentAttr.ResolvedMethodType extends ResolvedMemberType<JCMethodInvocation>
        // <T extends JCExpression> T => JCMethodInvocation
        // but in arg (T that) : T => JCLambda
        if (cached != null) {
            //dup existing speculative type
            setResult(that, cached.dup(that, env));
            // ArgumentType<JCMethodInvocation> dup(JCMethodInvocation tree, Env<AttrContext> env)
            // (JCMethodInvocation) tree => java.lang.ClassCastException
            // class JCTree$JCLambda cannot be cast to class JCTree$JCMethodInvocation
        } else {
            Z res = argumentTypeFactory.get();
            argumentTypeCache.put(pos, res);
            setResult(that, res);
        }
    }
```

Maybe we should discuss this issue or I send a PR to fix it.
At the moment 1.7.25(26) version of Slf4j is used in lombok. In Jun 2019 Slf4j team released 2.0a. It adds ability to use supplier as an argument to log. API is not so pretty, but does it job:

`logger.atDebug().addArgument(() -> heavyMethod())
.log(msg, "Temperature set to {}. Old temperature was {}.", oldT);`
