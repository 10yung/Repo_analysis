This library looks very cool! Really exciting to see this possibility :D

How does it differ from Sodium, given the work-in-progress push-pull Rust port? https://github.com/clinuxrulz/sodium-rust-push-pull



Tried to implement something that accumulates all the stream values into a `Vec` using `Stream::fold`, but found that it clones the accumulator values multiple times during it's operation. Example code:

```Rust
extern crate carboxyl;
use carboxyl::Sink;
use std::fmt::Debug;

#[derive(Debug)]
struct Storage<T>
{
    vec: Vec<T>,
}

impl<T> Storage<T>
{
    fn new() -> Self
    {
        Storage{ vec: Vec::new() }
    }

    fn push(mut self, item: T) -> Self
    {
        self.vec.push(item);
        self
    }
}

impl<T: Clone + Debug> Clone for Storage<T>
{
    fn clone(&self) -> Self
    {
        println!("storage cloned! {:?}", self.vec);
        Storage{ vec: self.vec.clone() }
    }
}

fn main()
{
    let sink = Sink::new();
    let signal = sink.stream().fold(Storage::new(), Storage::push);

    sink.send(11);
    sink.send(22);
    sink.send(33);

    println!("result: {:?}", signal.sample());
}
```

output:
```
storage cloned! []
storage cloned! []
storage cloned! [11]
storage cloned! [11]
storage cloned! [11]
storage cloned! [11, 22]
storage cloned! [11, 22]
storage cloned! [11, 22]
storage cloned! [11, 22, 33]
storage cloned! [11, 22, 33]
storage cloned! [11, 22, 33]
result: Storage { vec: [11, 22, 33] }
```

Don't know if I'm using it wrong, but this seems pretty inefficient. A fold operation shouldn't require cloning the accumulator.

The result of creating new events and signals in Carboxyl depends on when it is done. This is necessary to avoid space-leaks, i.e. memorizing the entire history of these objects. By design of the implementation, Carboxyl cannot memorize this, as it does not rely on a garbage collector to clean it up, but rather only has one memory location, where the current value of a signal is stored.

However, this behaviour could be expressed more explicitly. At the moment the semantics of an expression implicitly depend on when it is executed, which is somewhat undesirable. The API would have to be changed to allow this, so this is something to be considered for version 0.2.

The main offender is `snapshot`. In the paper on FRPNow (see below) it is argued that this could be alleviated by not returning the stream/signal directly, but rather a signal containing it to make the dependence on evaluation time explicit.

**Background infos**
- [FRP - Dynamic Event Switching](http://apfelmus.nfshost.com/blog/2011/05/15-frp-dynamic-event-switching.html), Heinrich Apfelmus
- [Practical Principled FRP](http://www.cse.chalmers.se/~atze/papers/prprfrp.pdf) (FRPNow), Atze van der Ploeg & Koen Claessen

Essentially, `impl<T> FromIterator<T> for Stream<T>`. It should be clear that this will not consume the iterator directly but rather spawn a background thread to do so.

Currently it is a bit hacky to return an intermediate value from inside the defining closure passed to `Signal::cyclic`. There should be a more convenient alternative API method to do this.

This is currently a fairly significant limitation of this crate. Only types `T: 'static` are allowed for streams and signals. It should in principle be possible to lift this restriction but it might require some tweaks to the implementation. Also, not all parts of the API can work that way. For instance, one cannot feed a sink non-statics in a detached background thread. But the borrow checker should take care of such limitations.

It is currently not well tested, how the primitives behave when functions panic.


- [x] Looping of streams.
- [ ] Looping of signals. How is this supposed to be defined?

Edit: terminology cell -> stream, stream -> signal