Certificate validation in general requires asynchronous operations such as: OCSP/CRL fetch.
On the other hand, the callback from `SSL_CTX_set_cert_verify_callback` expects a synchronous result: 1 (success) / 0 (failure). [(reference)](https://www.openssl.org/docs/man1.1.1/man3/SSL_CTX_set_cert_verify_callback.html).

I find it kind of odd that **any** validation of this type is expected to be synchronous.
Is there an alternative API for certificate chain validation that supports asynchronous operations?
Or perhaps that's a feature worth implementing?
Configure creates an empty crypto/include which
gets not cleaned up with make distclean.

This is for 1.1.1 only at the time, master has more to clean up.
Mea culpa...

This broke with
87bea6550ae0dda7c40937cff2e86cc2b0b09491

where AES_ASM was no longer defined, since AES_encrypt is no longer done in assembler,
but what this function really needs is AESNI_ASM.
The common routine ossl_prov_print_labeled_bignum() didn't print the
BIGNUM quite the way it should.  It treated the limbs in a big endian
fashion, when they are really organised in a little endian fashion.

Furthermore, we make it inherit the behaviour from the print of legacy
keys, where a number starting with the high bit set gets an extra zero
printed first.

The BIO_f_buffer() documentation tells in enough detail how it affects
BIO_gets(), but not how it affects BIO_read_ex().  This change
remedies that.

Fixes #10859

-----

This is an alternative to #10876
I think it would be good to say explicitly (on the page SSL_CTX_set_psk_client_callback) whether the `max_identity_len` parameter of `SSL_psk_client_cb_func` includes the terminating NUL byte or not.
The documentation of SSL_read states:
> In this case a call to SSL_get_error(3) with the return value of the read function will yield SSL_ERROR_WANT_READ or SSL_ERROR_WANT_WRITE. [...] When using a non-blocking socket, nothing is to be done, [...]

However, if there has been a call to SSL_write previously, which also did not fully complete (e.g. also returned SSL_ERROR_WANT_WRITE), I would think that a SSL_ERROR_WANT_WRITE error of SSL_read indicates that the previous SSL_write should be retried (instead of "nothing is to be done"). Is this not correct?

Thanks
the openssl speed command could not benchmark FFDH speed, but it could
benchmark ECDH, making comparisons between the two hard

this commit adds this feature

fixes #9475
There are over 175 options in this command. One hundred and seventy bleedin' five.  And 45 of them aren't documented.  This PR is intended to add that documentation.

The first commit re-orders the options to put them in the same order the ```-help``` output, and puts them into sub-heads.  Subsequent commits will add the missing documentation.

This PR is based on #10873, but it also probably needs to wait for #10132, and #10191 as well.
This adds an analog to the (currently unused) "2x" optimization from vpaes-armv8.pl and a ctr128_f implementation.

This PR probably should *not* be merged as-is. I haven't integrated it into the C portions or even tested that it works in OpenSSL. Rather, this PR is so @bernd-edlinger can look into integrating it into #9677 if it helps remove bsaes-x86_64.pl which, while constant-time, is currently integrated with other bits that are not constant-time and is a little awkward at small inputs.

In BoringSSL, we found that, while bsaes-x86_64.pl is still faster, the gap became small enough that we were comfortable removing bsaes-x86_64.pl and reducing the number of AES implementations we carried around. Perhaps this'll help you all too.

See also https://github.com/openssl/openssl/pull/9677#issuecomment-575374166 and https://boringssl-review.googlesource.com/c/boringssl/+/35364. (Note that, by then, we had already batched the non-constant-time fallback for small inputs in `bsaes_ctr32_encrypt_blocks`.)

##### Checklist
- [ ] tests are added or updated
