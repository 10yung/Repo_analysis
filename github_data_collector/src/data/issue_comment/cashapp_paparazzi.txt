```
  // fails
  @Test
  fun textViewInCode() {
    val textView = AppCompatTextView(paparazzi.context).apply {
      typeface = ResourcesCompat.getFont(context, R.font.cashmarket_medium)
      text = "Hello, world!"
    }

    paparazzi.snapshot(textView, "text in code")
  }

  // passes
  @Test
  fun textViewInXml() {
    val textView = paparazzi.inflate<TextView>(R.layout.textview)
    paparazzi.snapshot(textView, "text in xml")
  }
```

related xml for the latter:
```
<?xml version="1.0" encoding="utf-8"?>
<TextView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:fontFamily="@font/cashmarket_medium"
    android:text="Hello, world!"
    tools:ignore="HardcodedText"
    />
```
Follow-up to https://github.com/cashapp/paparazzi/pull/115.  
Better user documentation once it matures. Right now it's a little hard to get how to use it from the sample app.
example1.xml:
```
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    ...>
  <path android:pathData="...">
    <aapt:attr name="android:fillColor">
      <gradient ... />
    </aapt:attr>
  </path>
</vector>
```

workaround: extract the inlined resource

example2.xml
```
<vector xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:aapt="http://schemas.android.com/aapt"
    ...>
  <path android:pathData="..." android:fillColor="@color/other" />
</vector>
```

other.xml
```
 <gradient ... />
```
Android Studio 4.0 switched to Skia for its layout rendering (from java2d) which means it should support more rendering features. I think it's missing some things like PathMeasure.getSegment if I remember correctly.

If Paparazzi is able to use skia, I would consider switching the Lottie regression tests to it.
Currently, the plugin can only parse merged resources from library modules since they're in XML format, while application modules output merged resources to a binary format.  This limits Paparazzi to library modules for now.

Not sure if there's anything we can do to fix the problem but I figured it would be worth filing anyway. Basically getting this Jetifier error: 
```wrap
> Could not resolve all artifacts for configuration ':features:notification-center:impl:debugUnitTestCompileClasspath'.
   > Failed to transform artifact 'common.jar (com.android.tools:common:26.5.0)' to match attributes {artifactType=android-classes, org.gradle.libraryelements=jar, org.gradle.usage=java-runtime}.
      > Execution failed for JetifyTransform: /Users/zhukov/.gradle/caches/modules-2/files-2.1/com.android.tools/common/26.5.0/6ac94244acf356790ac8d6fa41c3158636422e67/common-26.5.0.jar.
         > Failed to transform '/Users/zhukov/.gradle/caches/modules-2/files-2.1/com.android.tools/common/26.5.0/6ac94244acf356790ac8d6fa41c3158636422e67/common-26.5.0.jar' using Jetifier. Reason: The given artifact contains a string literal with a package reference 'android.support.design.widget' that cannot be safely rewritten. Libraries using reflection such as annotation processors need to be updated manually to add support for androidx.. (Run with --stacktrace for more details.)
```

As a workaround blacklisting the library seems to work: `android.jetifier.blacklist=com.android.tools.common` in your gradle properties. 

When running paparazzi getting this error:
```
   java.io.FileNotFoundException: /usr/local/share/android-sdk/platforms/android-Q/build.prop (No such file or directory)
        at java.io.FileInputStream.open0(Native Method)
        at java.io.FileInputStream.open(FileInputStream.java:195)
        at java.io.FileInputStream.<init>(FileInputStream.java:138)
        at app.cash.paparazzi.DeviceConfig$Companion.loadProperties(DeviceConfig.kt:202)
        at app.cash.paparazzi.internal.Renderer.prepare(Renderer.kt:76)
        at app.cash.paparazzi.Paparazzi.prepare(Paparazzi.kt:106)
        at app.cash.paparazzi.Paparazzi$apply$1.evaluate(Paparazzi.kt:89)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:305)
        at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
        at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:365)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
        at org.junit.runners.ParentRunner$4.run(ParentRunner.java:330)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:78)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:328)
        at org.junit.runners.ParentRunner.access$100(ParentRunner.java:65)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:292)
        at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:305)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:412)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.runTestClass(JUnitTestClassExecutor.java:110)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:58)
        at org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecutor.execute(JUnitTestClassExecutor.java:38)
        at org.gradle.api.internal.tasks.testing.junit.AbstractJUnitTestClassProcessor.processTestClass(AbstractJUnitTestClassProcessor.java:62)
        at org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:51)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:33)
        at org.gradle.internal.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:94)
        at com.sun.proxy.$Proxy2.processTestClass(Unknown Source)
        at org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:118)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
        at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
        at java.lang.reflect.Method.invoke(Method.java:498)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:36)
        at org.gradle.internal.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)
        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:182)
        at org.gradle.internal.remote.internal.hub.MessageHubBackedObjectConnection$DispatchWrapper.dispatch(MessageHubBackedObjectConnection.java:164)
        at org.gradle.internal.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:412)
        at org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:64)
        at org.gradle.internal.concurrent.ManagedExecutorImpl$1.run(ManagedExecutorImpl.java:48)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at org.gradle.internal.concurrent.ThreadFactoryImpl$ManagedThreadRunnable.run(ThreadFactoryImpl.java:56)
        at java.lang.Thread.run(Thread.java:748)
```

Turns out I had empty (possibly leftover) directory `/usr/local/share/android-sdk/platforms/android-Q` which is why it fails. We could make `Environment` smarter by filtering out platform directories that don't have `build.prop` which is what we ultimately care about.