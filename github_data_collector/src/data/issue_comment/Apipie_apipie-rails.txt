I have two controllers that are related, each with a GET /index action. The controllers use the same resource_id, which groups them together, but the generated documentation does not include methods from Both controller. It skips/overwrites one.

I have also tried the solution from this issue https://github.com/Apipie/apipie-rails/issues/561 But it did not resolve the issue.

GET '/api/v1/products/favorites' in products/favorites#index
GET '/api/v1/products/trending' in products/trending#index

, and apipie only shows one.
- Rails version: 5.2.3
- Apipie-rails version: 0.5.16
- Rspec version: 3.8.2

**The issue:** When I try to validate responses in controller specs, I got this error:

```text
Failure/Error: get :index, params: { group_id: group.to_param }, session: valid_session, format: :json

NameError:
  uninitialized constant JSON::Validator
# ./spec/controllers/api/logs_controller_spec.rb:21:in `block (4 levels) in <top (required)>'
# ------------------
# --- Caused by: ---
# NameError:
#   uninitialized constant JSON::Validator
#   ./spec/controllers/api/logs_controller_spec.rb:21:in `block (4 levels) in <top (required)>'
```

Controller spec is as follow:

```rb
require 'rails_helper'
require 'apipie/rspec/response_validation_helper'

RSpec.describe Api::LogsController, type: :controller, show_in_doc: true do
  auto_validate_rendered_views

  let(:current_user) { FactoryBot.create :user_active }
  let(:group) { current_user.groups.first }

  let(:valid_session) { {} }

  before do
    sign_in current_user
  end

  context 'with a group in which the user is' do
    describe 'GET #index' do
      it 'returns a success response' do
        # Create an element that's loggable
        FactoryBot.create :container, group: group, user: current_user

        get :index, params: { group_id: group.to_param }, session: valid_session, format: :json
        expect(response).to be_successful
        # expect(response).to match_declared_responses
      end
    end
  end
end
```
The test returns the same error with `match_declared_responses` or `auto_validate_rendered_views`.

The controller:
```rb
module Api
  class LogsController < ApiGroupSubcontroller
    resource_description do
      short 'Logs for a group'
      formats [:json]
      error 401, 'Unauthorized.'
      error 404, 'Missing or not yours.'
      error 403, "Forbidden - You can't perform this action."
      error 500, 'Internal server error - Oops, our bad.'
      description 'This is a read-only resource, that returns logs for a given group.'
    end

    def_param_group :log_entry do
      property :id, :number, 'Log entry identifier.'
      property :loggable_type, String, 'The type of the logged element.'
      property :loggable_id, :number, 'The identifier of logged element.'
      property :action, String, 'The action performed. Can be <code>create</code>, <code>update</code> or <code>destroy</code>.'
      property :user_id, :number, 'The identifier of the user who performed the action. It can be null in some cases.'
      property :group_id, :number, 'The identifier of the group impacted by the action. It can be null in some cases.'
    end

    api :GET, '/groups/:group_id/logs', 'List all the logs of a group'
    param :group_id, :number, 'Group ID', required: true
    returns array_of: :log_entry, code: 200
    def index
      @logs = model_scope
    end
  end
end
```

The initializer, if that can help
```rb
Apipie.configure do |config|
  config.app_name                = 'OrderlySquirrel'
  config.api_base_url            = '/api'
  config.doc_base_url            = '/apipie'
  config.default_version         = '0.1'
  config.translate               = false
  # where is your API defined?
  config.api_controllers_matcher = Rails.root.join('app', 'controllers', '**', '*.rb')
end
```

Do you have any idea on this ?
I am using param and defining an Integer as required.
```ruby
param :id, Integer, desc: 'id of the requested company', required: true
```

In the web page it shows:

> **Validations:**
>    *  Must be a Integer

"**a** Integer" it should be "**an** Integer"

69c5bdcf51cb0d6a73a6cbf75dc4f58097f1f7e0 introduced a regression described in #559:

```bash
deltik@demo:~/apipie-rails$ git bisect log
git bisect start
# bad: [b56351f7bfae5e7fb4c55f2fa0e3f70d0015acdc] added the required param to the docs
git bisect bad b56351f7bfae5e7fb4c55f2fa0e3f70d0015acdc
# good: [c9da7603035b82523822e75d3cec10ed8e99a877] Bump version to 0.5.1
git bisect good c9da7603035b82523822e75d3cec10ed8e99a877
# bad: [e9075fcc5aeea8dcdc7e1c8a4b80eaab06559685] new validator - DecimalValidator
git bisect bad e9075fcc5aeea8dcdc7e1c8a4b80eaab06559685
# bad: [71f96079addc0bc7b884ce1ebbf9166cf3c1e96c] Prevent missing translation span in title
git bisect bad 71f96079addc0bc7b884ce1ebbf9166cf3c1e96c
# bad: [a4e8127c7d18cbc73552389420bda0bb28da6b4c] Bump version to 0.5.3
git bisect bad a4e8127c7d18cbc73552389420bda0bb28da6b4c
# good: [cfb42198bc39b5b30d953ba5a8b523bafdb4f897] A way to extend an exiting API via concern
git bisect good cfb42198bc39b5b30d953ba5a8b523bafdb4f897
# good: [21894283fac5bcf43b62c530bc7d75b815032227] Fix example recording when using send_file
git bisect good 21894283fac5bcf43b62c530bc7d75b815032227
# bad: [69c5bdcf51cb0d6a73a6cbf75dc4f58097f1f7e0] Fix reloading when extending the apidoc from concern
git bisect bad 69c5bdcf51cb0d6a73a6cbf75dc4f58097f1f7e0
# first bad commit: [69c5bdcf51cb0d6a73a6cbf75dc4f58097f1f7e0] Fix reloading when extending the apidoc from concern
```

No tests were added to describe what would happen when this change was applied in that commit:

```diff
@@ -236,12 +236,12 @@ module Apipie
 
     # initialize variables for gathering dsl data
     def init_env
-      @resource_descriptions = HashWithIndifferentAccess.new { |h, version| h[version] = {} }
-      @controller_to_resource_id = {}
-      @param_groups = {}
+      @resource_descriptions ||= HashWithIndifferentAccess.new { |h, version| h[version] = {} }
+      @controller_to_resource_id ||= {}
+      @param_groups ||= {}
 
       # what versions does the controller belong in (specified by resource_description)?
-      @controller_versions = Hash.new { |h, controller| h[controller] = [] }
+      @controller_versions ||= Hash.new { |h, controller| h[controller.to_s] = [] }
     end
 
     def recorded_examples
```

Replacing `||=` with `=` fixes the regression, and all the existing tests still pass as a result of the change.

I have not been able to figure out what Rails does differently when `Rails.application.config.cache_classes == false` that triggers #559, so I couldn't craft a new test to prevent this regression from happening again.

----

Fixes: #559
When I include the returns attribute in the resource description, it does not show on the controller's methods. 

I have to include the returns attribute under each method description.
Hi,

I'm having a pretty big API where the documentation is generated with ApiPie. Now I can lock down specific actions to specific controllers by regular authorisation techniques, however the documentation it self, displays every single action for every single controller to everyone, not matter their access level. 

Is there a way I can change/hack that behaviour, so e.g. people view documentation pages within their access scope (e.g. an API key), and do not get overwhelmed by documentation for all kinds of API endpoints, which then eventually don't have access to anyway? 
I have a module defined in `controllers/concerns`as follows:
```
#controllers/concerns/error_serializer.rb

module ErrorSerializer
  extend ActiveSupport::Concern
  extend Apipie::DSL::Concern  

  def self.serialize(object)
    errors = []
    object.errors.messages.map do |field, errors|
      errors.map do |error_message|
        {
          status: 422,
          title: 'Invalid attribute',
          source: { pointer: "/data/attributes/#{field}" },
          detail: error_message
        }
      end
    end.flatten
  end
end
```
When I run `rake apipie:static_swagger_json` I get the below error:
```
rake aborted!
LoadError: Unable to autoload constant Concerns::ErrorSerializer, expected /Users/Serguei/projects/decastore/decastore-api/app/controllers/concerns/error_serializer.rb to define it
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:503:in `load_missing_constant'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/bootsnap-1.3.2/lib/bootsnap/load_path_cache/core_ext/active_support.rb:58:in `block in load_missing_constant'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/bootsnap-1.3.2/lib/bootsnap/load_path_cache/core_ext/active_support.rb:16:in `allow_bootsnap_retry'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/bootsnap-1.3.2/lib/bootsnap/load_path_cache/core_ext/active_support.rb:57:in `load_missing_constant'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/dependencies.rb:193:in `const_missing'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/inflector/methods.rb:285:in `const_get'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/inflector/methods.rb:285:in `block in constantize'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/inflector/methods.rb:281:in `each'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/inflector/methods.rb:281:in `inject'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/inflector/methods.rb:281:in `constantize'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/activesupport-5.2.0/lib/active_support/core_ext/string/inflections.rb:68:in `constantize'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/apipie/application.rb:438:in `load_controller_from_file'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/apipie/application.rb:327:in `block in reload_documentation'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/apipie/application.rb:326:in `each'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/apipie/application.rb:326:in `reload_documentation'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/apipie/apipie_module.rb:34:in `method_missing'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/tasks/apipie.rake:285:in `with_loaded_documentation'
/Users/Serguei/.rvm/gems/ruby-2.5.0/gems/apipie-rails-0.5.14/lib/tasks/apipie.rake:56:in `block (2 levels) in <main>'
```
I just tried to see how it works for the only controller:
```
#controllers/v1/languages_controller.rb

module V1
  class LanguagesController < ApplicationController
    before_action :find_language, only: :show

    api!
    def index
      @languages = Language.all
      json_response @languages, :ok
    end

    api!
    def show
      json_response @language
    end

    private

    def find_language
      @language = Language.find(params[:id])
    end
  end
end
``` 
Used environment:
- macOS Mojave 10.14.1
- Ruby 2.5.0
- Rails 5.2.0 (api mode)
- apipie-rails',          '~> 0.5.14'


What am I missing ?

`SwaggerGenerator#swagger_atomic_param` method gets `allow_nulls` argument and manage types of the parameter, but I think we could not pass `allow_nulls = true` to this method.

How can I pass `allow_nulls = true` to the method?
And I think It'd be better to use `allow_nil` parameter to manage null types (simple example is here https://github.com/nullnull/apipie-rails/pull/1/commits/421b27d542f1001ba12135cf812f748d5f5844be), What do you think?
OpenAPI 2.0 specification defines [produces section](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields) but `rake apipie:static_swagger_json` doesn't output the section.
Especially I'm troubled when I use [committee](https://github.com/interagent/committee) with apipie-rails.

Simple solution is like this https://github.com/nullnull/apipie-rails/pull/1/commits/2622bf6bcf5fe51726b9ace5bfa5dfd9189eb839, but I'm worried we may need option like `swagger_content_type_output`.
