When using this UIKit, buttons in Touch Bar do not have a bezelColor (except standard buttons like ESC).
When commenting "_layer = [[[[self class] layerClass] alloc] init];" in UIView, bezelColor works, however (of course) UIViews do not show anymore. 

For me the compiler complained here. Adding extern fixed it.

At Toushay, we recently ported a large iOS codebase to OS X via Chameleon. In the process, we encountered several differences between iOS UIKit and Chameleon. This pull request is a compilation of all the changes we needed to make to Chameleon to get our application behaving properly.

Sorry for lumping a bunch of unrelated changes into one pull request. Let me know if you'd like me to split it apart or exclude any commits.

This patch set fixes a 'drifting' issue in the autoresizing logic. This behaviour is caused by the rounding bias introduced by the use of `floorf` function in `-[UIView _superviewSizeDidChangeFrom:(CGSize)oldSize to:(CGSize)newSize]`.

It fixes it by keeping an internal CGRect for the UIView's frame using unrounded floats. When updating the internal CGLayer for the view, it rounds it using CGRectIntegral to prevent sub-pixel blurring when the autoresizing puts a view at non-integer coordinates.

It then removes the unnecessary calls to `floorf` in the autoresizing calculations.

Fixes BigZaphod/Chameleon#82.


Love this project, but I'd like to be able to access Passbook on Mac OSX Mountain Lion 10.8.2+. Will the PassKit Framework be added anytime soon? It isn't a very large framework.

I did some testing, and the real iOS (at least in the emulator) doesn't re-order the subviews to match sublayer order.

```
NSLog(@"View %@ \n", [[self.window subviews] objectAtIndex:0]);
NSLog(@"Layer %@ \n", [[windowLayer sublayers] objectAtIndex:0]);
[self.window exchangeSubviewAtIndex:0 withSubviewAtIndex:1];
NSLog(@"View after view swap %@ \n", [[self.window subviews] objectAtIndex:0]); //Swapped
NSLog(@"Layer after view swap %@ \n", [[windowLayer sublayers] objectAtIndex:0]); //Swapped
[magentaLayer removeFromSuperlayer];
[yellowLayer removeFromSuperlayer];
[windowLayer insertSublayer:yellowLayer atIndex:1];
[windowLayer insertSublayer:magentaLayer atIndex:0];
NSLog(@"View after layer swap %@ \n", [[self.window subviews] objectAtIndex:0]); //Still the same
NSLog(@"Layer after layer swap %@ \n", [[windowLayer sublayers] objectAtIndex:0]); //Swapped
```

Seems that the Chameleon implementation of UIWebView doesn't have a scrollView property. It's just... not there.

... build other iOS libs on Mac (such as PSTCollectionView)
