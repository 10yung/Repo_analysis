So when being debugged by react-native-debugger, for whatever reason dispatching an action from a React Native Switch component's `onValueChange` causes the error: `Actions must be plain objects. Use custom middleware for async actions.` This error isn't displayed when I use Chrome with react devtools to debug. Example screen and reducer:

```js
...

const Screen = () => {
    return(
        <Switch onValueChange={value => dispatch(setAlertAccessibility(id, value))} />
    )
}
```

``` js
export const setAlertAvailability = (id, availability) => (
  dispatch,
  getState,
) => {
  const {alerts} = getState().alerts;
  alerts.map(alert => {
    if (alert.id === id) {
      alert.enabled = availability;
    }
  });

...

};

...

const actionHandler = {
  [SET_ALERT_AVAILABILITY]: (state, {alerts}) => ({...state, alerts}),
};

export default function(state = initialState, action) {
  const handler = actionHandler[action.type];
  return handler ? handler(state, action) : state;
}
```

React Native Debugger app version: v0.10.5
React Native version: 0.61.5
Platform: iOS 13 simulator
Is real device of platform: NO
Operating System: macOS 10.15.2

React Native Debugger app version: 10.15.1
React Native version: 35.0.0
Platform: iOS 13.1
Is real device of platform: No; simulator
Operating System: macOS 10.15.1 Catalina

When there is some kind of version mismatch between React Native (with or without Expo) and RND cannot connect, you get this window:
![Screenshot of React Native Debugger waiting for client connection](https://user-images.githubusercontent.com/3335181/71523162-cc3cdb80-2895-11ea-9ce9-46a585358976.png)

It's very frustrating - I only work in this area sporadically, and it seems like every month I get this and have to piece together (1) why it's happening and (2) which versions are out of date.

Could there be some kind of debug / diagnostics info about what the responses were on the port? Some kind of  _"we tried to talk to port ABC but the response was declined with XYZ"_ would be swell.

/cc @jonsamp, who has previously listened to me gripe about RN versioning.
this old issue seems to be back https://github.com/zalmoxisus/redux-devtools-extension/issues/193

But to me it seems like an RN Debugger bug. It is in RN Debugger in the console log I see the error. I'm not using the Chrome extension.

seems to happen randomly in the RN Debugger console it says "[React DevTools] Connection to RN closed" same time app shows error below

React Native Debugger app version: 0.10.5
React Native version: 0.61.5
Platform: iOS
Is real device of platform: simulator
Operating System: macOS

```
Runtime is not ready for debugging. Make sure Packager server is running.

RCTFatal
-[RCTCxxBridge handleError:]
__21-[RCTCxxBridge start]_block_invoke
invocation function for block in facebook::react::(anonymous namespace)::RCTObjcExecutor::RCTObjcExecutor(id<RCTJavaScriptExecutor>, void (NSError*) block_pointer, std::__1::shared_ptr<facebook::react::MessageQueueThread>, std::__1<facebook::react::ExecutorDelegate>)
__58-[RCTWebSocketExecutor _executeJSCall:arguments:callback:]_block_invoke
__44-[RCTWebSocketExecutor sendMessage:onReply:]_block_invoke
_dispatch_call_block_and_release
_dispatch_client_callout
_dispatch_lane_serial_drain
_dispatch_lane_invoke
_dispatch_workloop_worker_thread
_pthread_wqthread
start_wqthread
```

https://developers.google.com/web/updates/2019/10/devtools#blockedcookies
 as `Chrome 79` add a  Cookies tab in `developer tools`'s  NetWork tab, how can i use this feature in `react-native-debugger`? 
I don't no if this is the right place for this issue

----
React Native Debugger app version: `0.10.5`
React Native version: `0.61.5`
Platform: `iOS`
Is real device of platform:  `No`
Operating System: `macOS`
I am trying to use the library @cparram/use-redux-api to connect my app to the backend. I have read the npm instructions and looked at the codesandbox example but cannot figure out how to implement it the correct way into my app. 

This is my Configure store js file
	import { createStore, combineReducers, applyMiddleware } from 'redux';
	import { Posts } from './posts';
	import { Comments } from './comments';
	import thunk from 'redux-thunk';
	import logger from 'redux-logger';


	import useReduxApi, { apiReducer } from "@cparram/use-redux-api";

	export const appReducer = combineReducers({
	  api: apiReducer
	  // ... other reducers.
	  // als
	});

	export const ConfigureStore = () => {
		const store = createStore(
			combineReducers({
				posts: Posts,
				comments: Comments
			}),
			appReducer,
			applyMiddleware(thunk,logger)
		);

		return store;
	}

and this is my ActionCreators.js

	import  * as ActionTypes from './ActionTypes';
	import { baseUrl } from '../shared/baseUrl';
	import React, { useEffect, useState } from "react";
	import useReduxApi, { apiReducer } from "@cparram/use-redux-api";


	export const addComment = (comment) => ({
		type: ActionTypes.ADD_COMMENT,
		payload: comment
	});

	export const postComment = (postId, email, name, body) => (dispatch) => {

		const newComment = {
			postId: postId,
			email: email,
			name: name,
			body: body
		};

		return fetch(baseUrl + 'comments', {
			method: "POST",
			body: JSON.stringify(newComment),
			headers: {
			  "Content-Type": "application/json"
			},
			credentials: "same-origin"
		})
		.then(response => {
			if (response.ok) {
			  return response;
			} else {
			  var error = new Error('Error ' + response.status + ': ' + response.statusText);
			  error.response = response;
			  throw error;
			}
		  },
		  error => {
				throw error;
		  })
		.then(response => response.json())
		.then(response => dispatch(addComment(response)))
		.catch(error =>  { console.log('post comments', error.message); alert('Your comment could not be posted\nError: '+error.message); });
	};


	export const fetchPosts = () => (dispatch) => {
		dispatch(postsLoading(true));

	const [api, apiCall] = useReduxApi("posts");

		return  useEffect(() => {
		apiCall({
		  endpoint: "https://jsonplaceholder.typicode.com/posts"
		});
	  }, []).then(response => {
				if(response.ok) {
					return response;
				}else{
					var error = new Error('Error' + response.status +': '+response.statusText);
					error.response = response;
					throw error;
				}
			},
			error => {
				var errmess = new Error(error.message);
				throw errmess;
			})
			.then(response => response.json() )
			.then(posts => dispatch(addPosts(posts)))
			.catch(error => dispatch(postsFailed(error.message)));
	}

	export const postsLoading = () => ({
		type:ActionTypes.POSTS_LOADING
	});

	export const postsFailed = (errmess) => ({
		type:ActionTypes.POSTS_FAILED,
		payload:errmess
	});

	export const addPosts = (posts) => ({
		type:ActionTypes.ADD_POSTS,
		payload:posts
	});

	export const fetchComments = () => (dispatch) => {
		return fetch(baseUrl + 'comments')
			.then(response => {
				if(response.ok) {
					return response;
				}else{
					var error = new Error('Error' + response.status +': '+response.statusText);
					error.response = response;
					throw error;
				}
			},
			error => {
				var errmess = new Error(error.message);
				throw errmess;
			})
			.then(response => response.json() )
			.then(comments => dispatch(addComments(comments)))
			.catch(error => dispatch(commentsFailed(error.message)));
	}

	export const commentsFailed = (errmess) => ({
		type:ActionTypes.COMMENTS_FAILED,
		payload:errmess
	});

	export const addComments = (comments) => ({
		type:ActionTypes.ADD_COMMENTS,
		payload:comments
	});

I have tried implementing this method with the library in the const fetchPosts but I am getting this error

Ã—
Error: It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.
createStore
D:/Documents/job_application/tasks/interfell/node_modules/redux/es/redux.js:66
ConfigureStore
D:/Documents/job_application/tasks/interfell/src/redux/configureStore.js:17
  14 | });
  15 | 
  16 | export const ConfigureStore = () => {
> 17 |     const store = createStore(
  18 |         combineReducers({
  19 |             posts: Posts,
  20 |             comments: Comments

I am new to react and have never used this library before so I am a bit lost on how to do the get and post.
log record lines number not correct ~
the right lines number is 96 
![image](https://user-images.githubusercontent.com/12725144/70843835-6d2d9e80-1e73-11ea-9e29-fc4f1d6aa363.png)

React Native Debugger app version: [FILL THIS OUT]
React Native version: 0.58.4
Platform: iOS
Is real device of platform: no
Operating System: Mac OS


React Native Debugger 0.10.5

There are many bugs. I want to fix an old version, because it has affected the normal work.
React Native Debugger app version: 0.10.5
React Native version: 0.59.10
Platform: iOS
Is real device of platform: No
Operating System: macOS 10.15.1

Related to #376 and #365, a recent update to `react-native-debugger` has stopped the network inspect output from showing.

The network inspect output was working fine on a previous version with the same `react-native` version.

It also happens with Android and also happened before I updated to macOS Catalina.

Downgrading to v0.9.14 causes network inspect to work again (https://github.com/jhen0409/react-native-debugger/issues/423#issuecomment-555666247, but incidentally #423 still occurs on v0.9.14).

![image](https://user-images.githubusercontent.com/3957608/70138224-b4ec4300-1687-11ea-86cc-aafd0f86e465.png)

This PR is integration for [`xstate-devtools`](https://github.com/amitnovick/xstate-devtools) browser extension (https://github.com/statecharts/xstate-viz/issues/30). Implemented in a simple way like #298. 

The XState core is used [`__REDUX_DEVTOOLS_EXTENSION__.connect`](https://github.com/davidkpiano/xstate/blob/a12c1a4a2cf2bf5ab78ce952f086d8835ccf9637/packages/core/src/interpreter.ts#L1177), so it have simple logging feature with `redux-devtools`. The `xstate-devtools` wrapped the method and provided `machine` argument.

For RNDebugger, I added `useXStateViz` devTools option, allows users to choose simple logging on `redux-devtools` or the visualizer of `xstate-devtools`.

```js
import { useMachine } from '@xstate/react'

const [current, send] = useMachine(machine, {
  devTools: { useXStateViz: true },
})
```

I think the final goal will be integrate `xstate-viz` into [`redux-devtools-core`](https://github.com/reduxjs/redux-devtools/tree/master/packages/redux-devtools-core), it can be made more features that `redux-devtools-extension` has.
<!--
Before submitting the issue:

- You're using the latest version of react-native-debugger
Yes.
- You have read the documentation
Yes.
- For the feature requests / issues of devtools integration like React / Redux / Apollo, you should submit an issue to that repo
  - https://github.com/facebook/react-devtools/issues
  - https://github.com/reduxjs/redux-devtools/issues
  - https://github.com/apollographql/apollo-client-devtools/issues
-->
This appears to be a bug with the debugger.

<!--
Please provide the following information for bug report or question, if you can provide a minimal example project or screenshot or even video would be helpful for reproduce the problem. You can just removed these if you want to submit a feature request:
-->

React Native Debugger app version: 0.10.4
React Native version: 0.59.8
Platform: iOS
Is real device of platform: Reproduces in simulator and on devices 
Operating System: iOS app, debugging on MacOS 10.14.6.
Generally, devs are using iOS 12 variants in the simulator.

<!-- Love react-native-debugger? Please consider supporting our collective:
ðŸ‘‰  https://opencollective.com/react-native-debugger/donate -->
Noted.

Issue:

I work on a commercial application that has been using the React Native Debugger for at least two years. When we upgraded to React Native 0.59.8 we found that suddenly touch events are not seen by the application in React Native views when the React Native Debugger is attached.

Touch events work fine in native views.

We have resorted to telling our devs to use Chrome Tools to debug, but many would still prefer to use the React Native Debugger.

If the debugger is not attached the application operates normally.
