I noticed the README has the word "performance".

I don't use loggers, but when I do, it's for debugging, and often relates to something with that word.

when -ea is not used, this is a very high performance logger.
 
public class log {
    /**
     * conditional debug output assert log(Object,[prefix[,suffix]])
     * 
     */
    public static void log(Object ob, String... prefixSuffix) {
        assert log$(ob, prefixSuffix);
    }

    /**
     * conditional debug output assert log(Object,[prefix[,suffix]])
     *
     * @param ob
     * @param prefixSuffix
     * @return
     */
    public static boolean log$(Object ob, String...prefixSuffix) {
        //[bla bla bla]
        return true;
    }
}
This brings in support for linux x64. This is done via an upstream library [zf log](https://github.com/wonder-mice/zf_log)

This library will also work for android, iOs, mac os, etc. That being said I've only configured this for linux x64. I'm not familiar with Mac or mobile development.

**Build Process Changes**

As the library will not be present on most systems. It needs to be compiled and included.  I have included a build script, and copied the source and header from the upstream repo with attribution to the initial authors.

**Clarification Points**

* Configuration Items (*How to configure this.*)
   * Log Level
   * Format String (*Left Blank for now*)



As issue https://github.com/MicroUtils/kotlin-logging/issues/21 was only dedicated for Kotlin/JVM and Kotlin/JS multi platform support, this issue is for Kotlin/Native support.

Kotlin/Native target platform is seen in ```org.jetbrains.kotlin.konan.target.KonanTarget.kt``` file 
[line 43](https://github.com/JetBrains/kotlin-native/blob/master/shared/src/main/kotlin/org/jetbrains/kotlin/konan/target/KonanTarget.kt#L43)  as of 2018 August 16th:

```kotlin
sealed class KonanTarget(override val name: String, val family: Family, val architecture: Architecture) : Named {
    object ANDROID_ARM32 :  KonanTarget( "android_arm32",   Family.ANDROID, Architecture.ARM32)
    object ANDROID_ARM64 :  KonanTarget( "android_arm64",   Family.ANDROID, Architecture.ARM64)
    object IOS_ARM32 :      KonanTarget( "ios_arm32",       Family.IOS,     Architecture.ARM32)
    object IOS_ARM64 :      KonanTarget( "ios_arm64",       Family.IOS,     Architecture.ARM64)
    object IOS_X64 :        KonanTarget( "ios_x64",         Family.IOS,     Architecture.X64)
    object LINUX_X64 :      KonanTarget( "linux_x64",       Family.LINUX,   Architecture.X64)
    object MINGW_X64 :      KonanTarget( "mingw_x64",       Family.MINGW,   Architecture.X64)
    object MACOS_X64 :      KonanTarget( "macos_x64",       Family.OSX,     Architecture.X64)
    object LINUX_ARM32_HFP :KonanTarget( "linux_arm32_hfp", Family.LINUX,   Architecture.ARM32)
    object LINUX_MIPS32 :   KonanTarget( "linux_mips32",    Family.LINUX,   Architecture.MIPS32)
    object LINUX_MIPSEL32 : KonanTarget( "linux_mipsel32",  Family.LINUX,   Architecture.MIPSEL32)
    object WASM32 :         KonanTarget( "wasm32",          Family.WASM,    Architecture.WASM32)

    // Tunable targets
    class ZEPHYR(val subName: String, val genericName: String = "zephyr") : KonanTarget("${genericName}_$subName", Family.ZEPHYR, Architecture.ARM32)

    override fun toString() = name
}
```

Above list can give idea for implementation for different platforms.