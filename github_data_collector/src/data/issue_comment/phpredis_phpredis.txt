Fixes two memory leaks.  For some reason PHP isn't always reporting these, so I'm going to look for more w/valgrind.

Addresses #1701
#0  0x0000000000977dd5 in zend_mm_find_leaks_small (p=0x7fa5afc00000, i=509, j=19, leak=0x7fff9cf9d4c0)
    at /home/www/softwares/php-7.1.33/Zend/zend_alloc.c:1985
        empty = 0
        count = 0
        bin_num = 20
        dbg = 0x7fa5afe001e0

#1  0x0000000000977f3c in zend_mm_find_leaks (heap=0x7fa5b8a00040, p=0x7fa5afc00000, i=509, leak=0x7fff9cf9d4c0)
    at /home/www/softwares/php-7.1.33/Zend/zend_alloc.c:2013
        bin_num = 20
        count = 0

#2  0x0000000000978413 in zend_mm_check_leaks (heap=0x7fa5b8a00040) at /home/www/softwares/php-7.1.33/Zend/zend_alloc.c:2117
        bin_num = 5
        dbg = 0x7fa5b8a5e6a0
        list = 0x0
        p = 0x7fa5b8a00000
        leak = {addr = 0x7fa5b8a5e690, size = 16, filename = 0x7fa5b853f2c8 "/home/www/softwares/redis-5.1.1/redis_cluster.c", orig_filename = 0x0, 
          lineno = 1020, orig_lineno = 0}
        repeated = 0
        total = 0
        i = 94
        j = 35

#3  0x00000000009786ce in zend_mm_shutdown (heap=0x7fa5b8a00040, full=0, silent=0) at /home/www/softwares/php-7.1.33/Zend/zend_alloc.c:2182
        p = 0x476fec <php_libxml_post_deactivate+167>
        list = 0x7fff9cf9d710

#4  0x0000000000979446 in shutdown_memory_manager (silent=0, full_shutdown=0) at /home/www/softwares/php-7.1.33/Zend/zend_alloc.c:2607
No locals.

#5  0x000000000091db66 in php_request_shutdown (dummy=0x0) at /home/www/softwares/php-7.1.33/main/main.c:1925
        __orig_bailout = 0x7fff9cf9d8d0
        __bailout = {{__jmpbuf = {0, 5307750469741905538, 4391712, 140735827008704, 0, 0, 5307750469429429890, -5307542471060420990}, 
            __mask_was_saved = 0, __saved_mask = {__val = {0, 0, 0, 0, 0, 0, 0, 0, 34359738368, 140349743833088, 140349743824960, 140349743833088,                 140349743833136, 140735827007584, 9921893, 140735827007552}}}}
        report_memleaks = 1 '\001'

#6  0x0000000000a9f111 in main (argc=1, argv=0x7fff9cf9dcc8) at /home/www/softwares/php-7.1.33/sapi/fpm/fpm/fpm_main.c:1994
        primary_script = 0x7fa5b8a020f0 "p\303Æ¯\245\177"
        __orig_bailout = 0x0
        __bailout = {{__jmpbuf = {0, 5307750469844665986, 4391712, 140735827008704, 0, 0, 5307750469735614082, -5307542402033449342}, 
            __mask_was_saved = 0, __saved_mask = {__val = {140349826666832, 4294967295, 140349770645592, 0, 140349770533904, 0, 140349826667688, 
                140735827007872, 140735827007856, 4131212846, 4298479, 4294967295, 140349826603456, 140349777666992, 140349826589896, 
                140735827008712}}}}
        exit_status = 0
        cgi = 0
        c = -1
        use_extended_info = 0
        file_handle = {handle = {fd = 0, fp = 0x0, stream = {handle = 0x0, isatty = 8064, mmap = {len = 0, pos = 0, map = 0x0, buf = 0x0, 
                old_handle = 0x0, old_closer = 0x0}, reader = 0x0, fsizer = 0x0, closer = 0x0}}, filename = 0x7fa5b8a02000 "\360 \240\270\245\177", 
          opened_path = 0x0, type = ZEND_HANDLE_FILENAME, free_filename = 0 '\000'}
        orig_optind = 1
        orig_optarg = 0x0
        ini_entries_len = 0
        max_requests = 10000
        requests = 5713
        fcgi_fd = 12
        request = 0x3128510
        fpm_config = 0x0
        fpm_prefix = 0x0
        fpm_pid = 0x0
        test_conf = 0
        force_daemon = -1
        force_stderr = 0
        php_information = 0
        php_allow_to_run_as_root = 0
        __func__ = "main"

redis_cluster.c
```
/* {{{ proto array RedisCluster::mget(array keys) */
PHP_METHOD(RedisCluster, mget) {
    zval *z_ret = emalloc(sizeof(*z_ret));   // line 1020 

    array_init(z_ret);

    // Parse args, process
    if (cluster_mkey_cmd(INTERNAL_FUNCTION_PARAM_PASSTHRU, "MGET",
                        sizeof("MGET")-1, z_ret, cluster_mbulk_mget_resp) < 0)
    {
        zval_dtor(z_ret);
        efree(z_ret);
        RETURN_FALSE;
    }
}
```



Hi,

I think the Documentation is missing the redis commands "PUNSUBSCRIBE (https://redis.io/commands/punsubscribe) and UNSUBSCRIBE (https://redis.io/commands/unsubscribe).
The functions are implemented, but missing in the documentation: https://github.com/phpredis/phpredis/blob/develop/README.markdown#pubsub
### Expected behaviour

Save session

### Actual behaviour

Session not saving

### I'm seeing this behaviour on
- OS: CentOS
- Redis: 3.2.12
- PHP: 7.3.13
- phpredis: 5.1.1

```
session.save_handler = redis
session.save_path =  "tcp://127.0.0.1:6379"

Redis Support => enabled
Redis Version => 5.1.1
Available serializers => php, json, igbinary, msgpack
Available compression => lzf, zstd

Directive => Local Value => Master Value
redis.arrays.algorithm => no value => no value
redis.arrays.auth => no value => no value
redis.arrays.autorehash => 0 => 0
redis.arrays.connecttimeout => 0 => 0
redis.arrays.consistent => 0 => 0
redis.arrays.distributor => no value => no value
redis.arrays.functions => no value => no value
redis.arrays.hosts => no value => no value
redis.arrays.index => 0 => 0
redis.arrays.lazyconnect => 0 => 0
redis.arrays.names => no value => no value
redis.arrays.pconnect => 0 => 0
redis.arrays.previous => no value => no value
redis.arrays.readtimeout => 0 => 0
redis.arrays.retryinterval => 0 => 0
redis.clusters.auth => no value => no value
redis.clusters.cache_slots => 0 => 0
redis.clusters.persistent => 0 => 0
redis.clusters.read_timeout => 0 => 0
redis.clusters.seeds => no value => no value
redis.clusters.timeout => 0 => 0
redis.pconnect.connection_limit => 0 => 0
redis.pconnect.pooling_enabled => 1 => 1
redis.session.lock_expire => 60 => 60
redis.session.lock_retries => 10 => 10
redis.session.lock_wait_time => 2000 => 2000
redis.session.locking_enabled => 1 => 1

```

### Steps to reproduce, backtrace or example script

```php
session_start();
$count = $_SESSION['count'] ?? 0;
$_SESSION['count'] = ++$count;
echo $count;
```

This script works fine with **files** session handler.

### I've checked
- [x] There is no similar issue from other users
- [x] Issue isn't fixed in `develop` branch: `5.2.0-dev`(in same environment/machine) has same issue

### Expected behaviour
Running a cluster and using the slot cache. When I migrate keys I would expect the slot cache to update if it receives an ASK or MOVE.

### Actual behaviour
Upon requesting the data from a key on a migrated slot, the cache does not seem to update and continually requests keys from the wrong node. If I restart apache the slot cache is refreshed and works fine.

### I'm seeing this behaviour on
- OS: linux
- Redis: 5.05
- PHP: 7.1
- phpredis: 5.0.2 and 5.1.1

### Steps to reproduce, backtrace or example script

### I've checked
- [ x ] There is no similar issue from other users
- [ x ] Issue isn't fixed in `develop` branch

While reviewing the README for information on `popen`, I found that some of the functions listed in the doc were missing deprecation notices. I went through the [deprecated aliases](https://github.com/phpredis/phpredis/blob/develop/redis.c#L447-L476) and updated the notes in the README for those that appear to have been missed.

This also removes how `substr` is described as deprecated as it was inconsistent with the rest of the document.
### Expected behaviour
Redis command line execution results are as follows
```
127.0.0.1:6379> xadd mystream * t1 redis type nosql
"1576829752164-0"
127.0.0.1:6379> xrange mystream - +
1) 1) "1576829752164-0"
   2) 1) "t1"
      2) "redis"
      3) "type"
      4) "nosql"
127.0.0.1:6379>
```
### Actual behaviour
php test demo
```
try{
    $redis = new redis();
    $redis->connect('127.0.0.1',6379);
} catch (\Exception $e){
    file_put_contents('/tmp/redis-test',$e->getMessage()."\r\n");
}
$key = 'mystream';
echo "<pre>";
$data = $redis->xrange($key,'-','+');
var_dump($data);
```
But I got the following in the result
```
array(1) {
  ["1576829752164-0"]=>
  array(2) {
    ["1576829752164-0"]=>
    *RECURSION*
    ["type"]=>
    string(5) "nosql"
  }
}
```
I tried both phpredis versions 5.0.0 and 5.1.1 and got the same results

### I'm seeing this behaviour on
- OS: Linux
- Redis:5.0.7
- PHP:7.0.7
- phpredis:5.1.1

### Steps to reproduce, backtrace or example script

### I've checked
- [x] There is no similar issue from other users
- [x] Issue isn't fixed in `develop` branch

I'm not sure about `getMasterAddrByName`. It returns result as array `[host, port]`, maybe string `host:port` would be better?
TODO: documentation, more tests
Reflection can not work correctly so I can't make my package compatible with earlier versions of phpredis by a easy way (Of course I have given up doing this now...)
```php
echo (new ReflectionMethod(Redis::class, 'connect'))->getNumberOfParameters(); // 4
```

fix [issues#1674]https://github.com/phpredis/phpredis/issues/1674