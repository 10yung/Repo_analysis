Hi!

Is it possible to build up the query in several steps somehow? We are currently trying to move away from Chewy as we want to upgrade Elasticsearch and Chewy doesn't seem to support the newest versions.

What we do today is that we first apply some filtering, then later we add more to the query.

1. In a Pundit PolicyScope, add the basic filters that the user is allowed to fetch.
1. Later, add more search specific filters to the query (filter by name or whatever) which doesn't belong in the PolicyScope.

Is this kind of chainable/composable approach possible with the elasticsearch gems somehow?
If not, how do you people handle similar cases? :)
`Async::HTTP` is an asynchronous persistent and scalable HTTP client which works very well within the Falcon server.

I have been reading https://github.com/elastic/elasticsearch-ruby/blob/master/elasticsearch-transport/README.md#transport-implementations but it's not clear how you achieve thread safety.

Do you use one faraday connection instance per client?

Are you aware of the new hooks to manage life-cycle of persistent connections? e.g. `Faraday::Connection#close`?

Do you expose those methods from the client?

Just wondering how best to support elasticsearch.
hey so i have a model A that has a column "deleted",  and that column is referenced and used in another model B which is done through index json, now i do get the data but when i update the deleted column and save it, elastic search does update the relevant column but when i get the column data from model B it still has the old data, only if i reindex that model does it update with the right information. How am i to go about fixing this and getting the data to update in all instances where it is used. 
im fairly new to elastic search (was put onto a project that uses it so i had to get familiar with it) because of that i dont exactly know how to search for the correct answer on google for this.

Calling `update_by_query_rethrottle` throws the following. The reason is that while `task_id` is a required argument it is not whitelisted with the `ParamsRegistry.register`.
This PR fixes this by whitelisting `task_id` and making sure it is not propagated further on as a param to `perform_request`

```
/home/inokentii.mykhailov/.gem/ruby/2.4/gems/elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:158:in `block in __validate_params': URL parameter 'task_id' is not supported (ArgumentError)
	from /home/inokentii.mykhailov/.gem/ruby/2.4/gems/elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:157:in `each'
	from /home/inokentii.mykhailov/.gem/ruby/2.4/gems/elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:157:in `__validate_params'
	from /home/inokentii.mykhailov/.gem/ruby/2.4/gems/elasticsearch-api-7.4.0/lib/elasticsearch/api/utils.rb:151:in `__validate_and_extract_params'
	from /home/inokentii.mykhailov/.gem/ruby/2.4/gems/elasticsearch-api-7.4.0/lib/elasticsearch/api/actions/update_by_query_rethrottle.rb:20:in `update_by_query_rethrottle'
	from cli.rb:73:in `rethrottle'
	from cli.rb:166:in `<main>'
```
I haven't run this in production yet but i assume it works.

Btw i couldn't find `auto_generate_phrase_queries` in the documentation - is it maybe outdated syntax?

We're currently using ES6, and this client bug is causing us some trouble.  Could the fix be backported?

This is just a cherry-pick of dfbfdea4c7c0f9ce48214889a82345b63e4b7429.
all of the examples show mixing it into the global scope, which in practice no would would ever do. How do I use the DSL with rails / models, which is probably the typical use-case? all of the rails examples show passing a hash into `SomeModel.search({})`. In all my searching, I failed to find a concise example that used both elasticsearch-model/rails and elasticsearch-dsl. 
I added track_total_hits support for Elasticsearch::DSL::Search::Search.

Reference: https://github.com/elastic/elasticsearch-ruby/issues/715
Is my understanding correct that if i want to do 

```
{
    "query": {
        "bool": {
            "must": [
                {
                    "term": {"shape": "round"}
                },
                {
                    "bool": {
                        "should": [
                            {"term": {"color": "red"}},
                            {"term": {"color": "blue"}}
                        ]
                    }
                }
            ]
        }
    }
}
```

I would have to write:

```
query do 
  bool do
   must do
    term shape: round
   end
   must do
    bool do
      should do
        term color: red
      end
      should do
        term color: blue
      end
    end
   end
  end
end
```

(notice the multiple must/should blocks)

i didn't receive any error message when putting multiple terms into one must block - it just swallowed the further ones

did i do something wrong? am i misunderstanding something? is there a way to do "array-like" syntax that i am unaware off?

If this is by design - are there any other differences to the JSON syntax i should be aware off?