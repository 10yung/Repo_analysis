Fixing issue #399 headers not sent if buffer length exceeds value defined in ini.output_buffering

It's better to flush buffer after sending response.
https://github.com/klein/klein.php/issues/399
Several references to apc are found, but not apcu. https://pecl.php.net/apcu_bc is helpful for the shared memory caching to work in php 7.

Expected: Check for apcu_fetch, apcu_store in addition to apc_fetch, apc_store. Possibly also suggest the apcu/apc module in composer.json

e.g. these references were seen:

```
src/Klein/Klein.php
440:        $apc = function_exists('apc_fetch');
556:                            $regex = apc_fetch("route:$expression");
559:                                apc_store("route:$expression", $regex);
```
Hi, the problem is that you get a 404 error when you try to display an SVG image on a page.
For example, I have such a structure
![phpstorm64_9FOqyJXI2X](https://user-images.githubusercontent.com/23498262/62010464-ca021400-b173-11e9-975a-eae41e1d06fc.png)

I specify the path "/img/icons/Twitter_Logo_Blue.svg".
And it turns out that the image is not loaded, and in the browser developer console error 404.

However, if you specify a file in PNG format, it is quietly displayed.

I don't understand what the problem is. Can you help?

Because I'm sure it has to do with Klein
Previously "magical" call version of the functions 'keys' , 'all' would break as the call : 
        keys( "key1" , "key2" , "key3" , false );
 would result in $mask = ( "key1" , "key2" , "key3" , false ) whereas $fill_with_nulls = "key2" (ultimately translating to true) thus breaking the intended function call which is $mask = ( "key1" , "key2" , "key3" ) and $fill_with_nulls = false

Same is applicable for the function 'all'
Headers defined with `$response->header()` not sent if buffer length exceedes value defined in `ini.output_buffering` (4096 by default).

Solution may be setting `output_buffering` to `"On"` (unlimited) but it's not always good idea.

I found out that in this case output without headers starts at [Klein.php:695](https://github.com/klein/klein.php/blob/master/src/Klein/Klein.php#L695) and then it tries to send headers at [706](https://github.com/klein/klein.php/blob/master/src/Klein/Klein.php#L706) but fails due to output already happened (`headers_sent() == true`).

Shouldn't `$this->response->send()` be called before [694](https://github.com/klein/klein.php/blob/master/src/Klein/Klein.php#L694)?
In my website I have a clientarea that should have the login and register page always accessible and the other pages only if logged in. If the user is not logged in the other pages should redirect. I'am struggling with this for a few hours already in Klein.

Of course I can do the check inside every route but with the session check before loading the routes I would like to prevent any accidental code executions by not even loading the client routes at all when the client is not logged in.

I currently have the following setup:

```
if (!$_SESSION['user']) {
    
    $router->with('/clientarea', function () {

        $router->respond(['POST', 'GET'], '@^$', function ($request, $response) {
            // login page
        });

        $router->respond(['POST', 'GET'], '/register', function ($request, $response) {
            // register page
        });

        // Here I would like to redirect all pages that are not the login or register page

    });

}
else {

     $router->with('/clientarea', function () {
        
        $router->respond(['POST', 'GET'], '@^$', function ($request, $response) use ($data, $twig) {
            header('Location: /clientarea');
            exit;
        });
        
        $router->respond(['POST', 'GET'], '/register', function ($request, $response) use ($data, $twig) {
            header('Location: /clientarea');
            exit;
        });

        $router->respond('GET', '/page1', function ($request, $response) use ($data, $twig) {
            // clientarea page 1
        });

        $router->respond('GET', '/page2', function ($request, $response) use ($data, $twig) {
            // clientarea page 2
        });

        $router->respond('GET', '/page3', function ($request, $response) use ($data, $twig) {
            // clientarea page 3
        });

     });

}
```
As title indicates, i am wondering whther it is possible to create a method like

`$app->register('abc', function($a, $b) {
       
       return $a."<br>".$b;
 });`

and then use it like
`echo $app->abc("hello", "xxx");`

Thanks.
Hi guys

I have a problem with calling callbacks in this package, if I write controller full qualified name in the `respond` method, my controller's action will be called statically, and if I want to instantiate my controller in `respond` method, I have to inject all dependencies of my controller when I want to instantiate it.


Can i call multiple instances of klein in:
`/index.php` and let's say `/modules/board/index.php`
so they have routes of their own without being in one huge `/index.php`
(p.s. also interested how this will workout for .htaccess in both paths)
PHP Warning:  array_flip(): Can only flip STRING and INTEGER values! in /var/www/html/site/vendor/klein/klein/src/Klein/DataCollection/DataCollection.php on line 135

I am running PHP version 7.2.5 And I get the warning consistently when hitting routes where I use GET parameters.

So I went into DataCollection.php and found the all() function that seemed to be causing the problem.
I var_dump($mask) just before it is passed into array_flip().  To my surprise, I see that one of the values passed in is actually a BOOLEAN (false).

```
array(2) { [0]=> string(3) "new" [1]=> bool(false) } 
```
I did not use that as part of my mask, but I notice that the mask is modified within the function, the rest of the function arguments are added in.

So I went over to Request.php, lines 282 thru 285 (the params() function)
```
return array_merge(
            $attributes,
            $this->params_get->all($mask, false),
            $this->params_post->all($mask, false),
            $this->cookies->all($mask, false),
            $this->params_named->all($mask, false) // Add our named params last
        );
```
There it is! A boolean is being passed in.  

