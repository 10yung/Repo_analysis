<!--
Thank you for contributing to TiDB! Please read TiDB's [CONTRIBUTING](https://github.com/pingcap/community/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.
-->

### What problem does this PR solve? <!--add issue link with summary if exists-->
`setval` is specialized for sequence function with `(tableName, num)` as parameter.
here `setval("string", num)` is voluntary function tested for generated column error. 
So we rename it here cleaning the way for sequence `setval` function.

### What is changed and how it works?
just rename `setval` in error generated column code test.

### Check List <!--REMOVE the items that are not applicable-->

Tests <!-- At least one of them must be included. -->

 - Unit test
 - Integration test

Release note

 - rename `setval` func for generated column.

## Feature Request

TiDB's EXPLAIN uses the terminology of "Tablescan" to show that the clustered index is being accessed, and "IndexScan" to show any other index is being accessed.

Whether or not this is efficient depends on the row estimate + if there is any attached range.

**Describe the feature you'd like:**

I like the SQL Server terminology of "Table Seek" and "Index Seek" for the case that the whole structure is not being read. Consider https://github.com/pingcap/tidb/issues/14525: 

I believe to the user, it looked like this is the difference between a Point Get and a Tablescan, but the second query is still very efficient:

```
TableReader_5	1.03	root	data:TableScan_4
└─TableScan_4	1.03	cop	table:sys_task_inst, range:[61099,61099], keep order:false, stats:pseudo
```

I would like it to instead say:
```
TableReader_5	1.03	root	data:TableScan_4
└─TableSeek_4	1.03	cop	table:sys_task_inst, range:[61099,61099], keep order:false, stats:pseudo
```

**Describe alternatives you've considered:**

It is somewhat fine when you are used to it.

**Teachability, Documentation, Adoption, Migration Strategy:**

A lot of people are conditioned to "table scans are bad". It is useful to prevent this conversation by calling it a Table seek. That makes TiDB slightly easier to teach.

## Performance Questions

- What version of TiDB are you using?

```
mysql> select tidb_version()\G
*************************** 1. row ***************************
tidb_version(): Release Version: v4.0.0-beta-24-g5527c582e
Git Commit Hash: 5527c582e0ae92470bca88d4ccfeff9e14871da5
Git Branch: master
UTC Build Time: 2020-01-18 02:18:37
GoVersion: go1.13
Race Enabled: false
TiKV Min Version: v3.0.0-60965b006877ca7234adaced7890d7b029ed1306
Check Table Before Drop: false
1 row in set (0.00 sec)
```

- What's the observed and your expected performance respectively?

I imported the ontime flight statistics database (180 million rows, ~80GiB data uncompressed) into TiDB. It is the same dataset in [this blog post](https://www.percona.com/blog/2019/01/24/a-quick-look-into-tidb-performance-on-a-single-server/). The schema contains no secondary indexes:

```
mysql> SHOW CREATE TABLE ontime\G
*************************** 1. row ***************************
       Table: ontime
Create Table: CREATE TABLE `ontime` (
  `Year` year(4) DEFAULT NULL,
  `Quarter` tinyint(4) DEFAULT NULL,
  `Month` tinyint(4) DEFAULT NULL,
  `DayofMonth` tinyint(4) DEFAULT NULL,
  `DayOfWeek` tinyint(4) DEFAULT NULL,
  `FlightDate` date DEFAULT NULL,
  `UniqueCarrier` char(7) DEFAULT NULL,
  `AirlineID` int(11) DEFAULT NULL,
  `Carrier` char(2) DEFAULT NULL,
  `TailNum` varchar(50) DEFAULT NULL,
  `FlightNum` varchar(10) DEFAULT NULL,
  `OriginAirportID` int(11) DEFAULT NULL,
  `OriginAirportSeqID` int(11) DEFAULT NULL,
  `OriginCityMarketID` int(11) DEFAULT NULL,
  `Origin` char(5) DEFAULT NULL,
  `OriginCityName` varchar(100) DEFAULT NULL,
  `OriginState` char(2) DEFAULT NULL,
  `OriginStateFips` varchar(10) DEFAULT NULL,
  `OriginStateName` varchar(100) DEFAULT NULL,
  `OriginWac` int(11) DEFAULT NULL,
  `DestAirportID` int(11) DEFAULT NULL,
  `DestAirportSeqID` int(11) DEFAULT NULL,
  `DestCityMarketID` int(11) DEFAULT NULL,
  `Dest` char(5) DEFAULT NULL,
  `DestCityName` varchar(100) DEFAULT NULL,
  `DestState` char(2) DEFAULT NULL,
  `DestStateFips` varchar(10) DEFAULT NULL,
  `DestStateName` varchar(100) DEFAULT NULL,
  `DestWac` int(11) DEFAULT NULL,
  `CRSDepTime` int(11) DEFAULT NULL,
  `DepTime` int(11) DEFAULT NULL,
  `DepDelay` int(11) DEFAULT NULL,
  `DepDelayMinutes` int(11) DEFAULT NULL,
  `DepDel15` int(11) DEFAULT NULL,
  `DepartureDelayGroups` int(11) DEFAULT NULL,
  `DepTimeBlk` varchar(20) DEFAULT NULL,
  `TaxiOut` int(11) DEFAULT NULL,
  `WheelsOff` int(11) DEFAULT NULL,
  `WheelsOn` int(11) DEFAULT NULL,
  `TaxiIn` int(11) DEFAULT NULL,
  `CRSArrTime` int(11) DEFAULT NULL,
  `ArrTime` int(11) DEFAULT NULL,
  `ArrDelay` int(11) DEFAULT NULL,
  `ArrDelayMinutes` int(11) DEFAULT NULL,
  `ArrDel15` int(11) DEFAULT NULL,
  `ArrivalDelayGroups` int(11) DEFAULT NULL,
  `ArrTimeBlk` varchar(20) DEFAULT NULL,
  `Cancelled` tinyint(4) DEFAULT NULL,
  `CancellationCode` char(1) DEFAULT NULL,
  `Diverted` tinyint(4) DEFAULT NULL,
  `CRSElapsedTime` int(11) DEFAULT NULL,
  `ActualElapsedTime` int(11) DEFAULT NULL,
  `AirTime` int(11) DEFAULT NULL,
  `Flights` int(11) DEFAULT NULL,
  `Distance` int(11) DEFAULT NULL,
  `DistanceGroup` tinyint(4) DEFAULT NULL,
  `CarrierDelay` int(11) DEFAULT NULL,
  `WeatherDelay` int(11) DEFAULT NULL,
  `NASDelay` int(11) DEFAULT NULL,
  `SecurityDelay` int(11) DEFAULT NULL,
  `LateAircraftDelay` int(11) DEFAULT NULL,
  `FirstDepTime` varchar(10) DEFAULT NULL,
  `TotalAddGTime` varchar(10) DEFAULT NULL,
  `LongestAddGTime` varchar(10) DEFAULT NULL,
  `DivAirportLandings` varchar(10) DEFAULT NULL,
  `DivReachedDest` varchar(10) DEFAULT NULL,
  `DivActualElapsedTime` varchar(10) DEFAULT NULL,
  `DivArrDelay` varchar(10) DEFAULT NULL,
  `DivDistance` varchar(10) DEFAULT NULL,
  `Div1Airport` varchar(10) DEFAULT NULL,
  `Div1AirportID` int(11) DEFAULT NULL,
  `Div1AirportSeqID` int(11) DEFAULT NULL,
  `Div1WheelsOn` varchar(10) DEFAULT NULL,
  `Div1TotalGTime` varchar(10) DEFAULT NULL,
  `Div1LongestGTime` varchar(10) DEFAULT NULL,
  `Div1WheelsOff` varchar(10) DEFAULT NULL,
  `Div1TailNum` varchar(10) DEFAULT NULL,
  `Div2Airport` varchar(10) DEFAULT NULL,
  `Div2AirportID` int(11) DEFAULT NULL,
  `Div2AirportSeqID` int(11) DEFAULT NULL,
  `Div2WheelsOn` varchar(10) DEFAULT NULL,
  `Div2TotalGTime` varchar(10) DEFAULT NULL,
  `Div2LongestGTime` varchar(10) DEFAULT NULL,
  `Div2WheelsOff` varchar(10) DEFAULT NULL,
  `Div2TailNum` varchar(10) DEFAULT NULL,
  `Div3Airport` varchar(10) DEFAULT NULL,
  `Div3AirportID` int(11) DEFAULT NULL,
  `Div3AirportSeqID` int(11) DEFAULT NULL,
  `Div3WheelsOn` varchar(10) DEFAULT NULL,
  `Div3TotalGTime` varchar(10) DEFAULT NULL,
  `Div3LongestGTime` varchar(10) DEFAULT NULL,
  `Div3WheelsOff` varchar(10) DEFAULT NULL,
  `Div3TailNum` varchar(10) DEFAULT NULL,
  `Div4Airport` varchar(10) DEFAULT NULL,
  `Div4AirportID` int(11) DEFAULT NULL,
  `Div4AirportSeqID` int(11) DEFAULT NULL,
  `Div4WheelsOn` varchar(10) DEFAULT NULL,
  `Div4TotalGTime` varchar(10) DEFAULT NULL,
  `Div4LongestGTime` varchar(10) DEFAULT NULL,
  `Div4WheelsOff` varchar(10) DEFAULT NULL,
  `Div4TailNum` varchar(10) DEFAULT NULL,
  `Div5Airport` varchar(10) DEFAULT NULL,
  `Div5AirportID` int(11) DEFAULT NULL,
  `Div5AirportSeqID` int(11) DEFAULT NULL,
  `Div5WheelsOn` varchar(10) DEFAULT NULL,
  `Div5TotalGTime` varchar(10) DEFAULT NULL,
  `Div5LongestGTime` varchar(10) DEFAULT NULL,
  `Div5WheelsOff` varchar(10) DEFAULT NULL,
  `Div5TailNum` varchar(10) DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1 COLLATE=latin1_bin
1 row in set (0.01 sec)
```

I am a bit surprised by the time difference between these two queries:

```
mysql> analyze table ontime;
Query OK, 0 rows affected (8 min 48.77 sec)

mysql> explain analyze select count(*) from ontime;
+------------------------+--------------+-----------+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------+------+
| id                     | count        | task      | operator info                                     | execution info                                                                                                                                                                     | memory      | disk |
+------------------------+--------------+-----------+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------+------+
| StreamAgg_16           | 1.00         | root      | funcs:count(Column#113)->Column#111               | time:7.076575792s, loops:2, rows:1                                                                                                                                                 | 9.484375 KB | N/A  |
| └─TableReader_17       | 1.00         | root      | data:StreamAgg_8                                  | time:7.076525913s, loops:3, rows:1236, rpc num: 1236, rpc max:171.247896ms, min:39.389044ms, avg:85.407748ms, p80:102.653831ms, p95:121.583953ms, proc keys max:221932, p95:209701 | 468 Bytes   | N/A  |
|   └─StreamAgg_8        | 1.00         | cop[tikv] | funcs:count(1)->Column#113                        | proc max:156ms, min:20ms, p80:80ms, p95:104ms, rows:1236, iters:180312, tasks:1236                                                                                                 | N/A         | N/A  |
|     └─TableScan_15     | 183953732.00 | cop[tikv] | table:ontime, range:[-inf,+inf], keep order:false | proc max:152ms, min:20ms, p80:80ms, p95:104ms, rows:183953732, iters:180312, tasks:1236                                                                                            | N/A         | N/A  |
+------------------------+--------------+-----------+---------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-------------+------+
4 rows in set (7.08 sec)

mysql> explain analyze select min(arrdelay) from ontime;
+----------------------------+--------------+-----------+---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------+
| id                         | count        | task      | operator info                                     | execution info                                                                                                                                                                      | memory    | disk |
+----------------------------+--------------+-----------+---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------+
| StreamAgg_13               | 1.00         | root      | funcs:min(ontime.ontime.arrdelay)->Column#111     | time:30.89370497s, loops:2, rows:1                                                                                                                                                  | 372 Bytes | N/A  |
| └─TopN_14                  | 1.00         | root      | ontime.ontime.arrdelay:asc, offset:0, count:1     | time:30.89369976s, loops:2, rows:1                                                                                                                                                  | 136 Bytes | N/A  |
|   └─TableReader_23         | 1.00         | root      | data:TopN_22                                      | time:30.89364719s, loops:4, rows:1236, rpc num: 1236, rpc max:754.020653ms, min:126.531215ms, avg:373.280145ms, p80:435.54212ms, p95:525.389004ms, proc keys max:221932, p95:209701 | 537 Bytes | N/A  |
|     └─TopN_22              | 1.00         | cop[tikv] | ontime.ontime.arrdelay:asc, offset:0, count:1     | proc max:536ms, min:112ms, p80:348ms, p95:408ms, rows:1236, iters:180312, tasks:1236                                                                                                | N/A       | N/A  |
|       └─Selection_21       | 183769778.27 | cop[tikv] | not(isnull(ontime.ontime.arrdelay))               | proc max:536ms, min:112ms, p80:344ms, p95:404ms, rows:183953732, iters:180312, tasks:1236                                                                                           | N/A       | N/A  |
|         └─TableScan_20     | 183953732.00 | cop[tikv] | table:ontime, range:[-inf,+inf], keep order:false | proc max:536ms, min:112ms, p80:340ms, p95:404ms, rows:183953732, iters:180312, tasks:1236                                                                                           | N/A       | N/A  |
+----------------------------+--------------+-----------+---------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------+------+
6 rows in set (30.89 sec)
```

Also showing with the cascades planner enabled (suboptimally chosing HashAgg, but I think the idea behind the min(avgdelay) plan is better?):

```
mysql> set tidb_enable_cascades_planner = 1;
Query OK, 0 rows affected (0.00 sec)

mysql> explain analyze select count(*) from ontime;
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
| id                     | count    | task      | operator info                                                   | execution info                                                                                                                                                                  | memory        | disk |
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
| HashAgg_11             | 1.00     | root      | funcs:count(Column#112)->Column#111                             | time:6.93479915s, loops:2, rows:1, PartialConcurrency:4, FinalConcurrency:4                                                                                                     | 13.5546875 KB | N/A  |
| └─TableReader_12       | 1.00     | root      | data:HashAgg_13                                                 | time:6.934664069s, loops:3, rows:1236, rpc num: 1236, rpc max:172.591748ms, min:35.120557ms, avg:83.695843ms, p80:99.174274ms, p95:116.7091ms, proc keys max:221932, p95:209701 | 468 Bytes     | N/A  |
|   └─HashAgg_13         | 1.00     | cop[tikv] | funcs:count(1)->Column#112                                      | proc max:168ms, min:24ms, p80:80ms, p95:100ms, rows:1236, iters:180312, tasks:1236                                                                                              | N/A           | N/A  |
|     └─TableScan_10     | 10000.00 | cop[tikv] | table:ontime, range:[-inf,+inf], keep order:false, stats:pseudo | proc max:168ms, min:24ms, p80:80ms, p95:100ms, rows:183953732, iters:180312, tasks:1236                                                                                         | N/A           | N/A  |
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
4 rows in set (6.94 sec)

mysql> explain analyze select min(arrdelay) from ontime;
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
| id                     | count    | task      | operator info                                                   | execution info                                                                                                                                                                        | memory        | disk |
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
| HashAgg_11             | 1.00     | root      | funcs:min(Column#113)->Column#111                               | time:30.659240357s, loops:2, rows:1, PartialConcurrency:4, FinalConcurrency:4                                                                                                         | 13.5546875 KB | N/A  |
| └─TableReader_12       | 1.00     | root      | data:HashAgg_13                                                 | time:30.659079787s, loops:3, rows:1236, rpc num: 1236, rpc max:683.164793ms, min:132.505192ms, avg:370.549992ms, p80:433.085238ms, p95:522.008013ms, proc keys max:221932, p95:209701 | 490 Bytes     | N/A  |
|   └─HashAgg_13         | 1.00     | cop[tikv] | funcs:min(ontime.ontime.arrdelay)->Column#113                   | proc max:544ms, min:108ms, p80:344ms, p95:404ms, rows:1236, iters:180312, tasks:1236                                                                                                  | N/A           | N/A  |
|     └─TableScan_10     | 10000.00 | cop[tikv] | table:ontime, range:[-inf,+inf], keep order:false, stats:pseudo | proc max:540ms, min:108ms, p80:340ms, p95:404ms, rows:183953732, iters:180312, tasks:1236                                                                                             | N/A           | N/A  |
+------------------------+----------+-----------+-----------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------+------+
4 rows in set (30.67 sec)

```

I also observed very high CPU usage in the `select min(arrdelay)` query on TiKV. My assumption is that TiKV is _actually sorting_ data in the min function? What I would expect from it, is to use a priority queue, where for each region as it is scanning it just retains the `min` value.

- Have you compared TiDB with other databases? If yes, what's their difference?

MySQL can priority queue here, but it will still be slower because it does not have parallel query.

This is not for a real use-case. I am researching edge-cases where TiDB will perform worse than MySQL. I have not tested other variations of queries that benefit from a priority queue, such as an `ORDER BY <unindexed> LIMIT <small number>`, but I believe this might worth documenting as a difference in optimizer/execution capabilities between TiDB and MySQL (similar to https://github.com/pingcap/tidb/issues/14460 ).
<!--
Thank you for contributing to TiDB! Please read TiDB's [CONTRIBUTING](https://github.com/pingcap/community/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.
-->

### What problem does this PR solve? <!--add issue link with summary if exists-->
add statement pessimistic retry count

### What is changed and how it works?
add statement pessimistic retry count

### Check List <!--REMOVE the items that are not applicable-->

Tests <!-- At least one of them must be included. -->

 - No code

Related changes

 - Need to cherry-pick to the release branch


### What problem does this PR solve? 
This PR adds Transformation rule TransformAggregateCaseToSelection for #14042.

### What is changed and how it works?
add a transformation rule TransformAggregateCaseToSelection.This rule tries to convert Agg(case when) to Agg->Selection.

### Check List

Tests 

 - Unit test

Code changes

 - Has exported function/method change
## Bug Report

Please answer these questions before submitting your issue. Thanks!

1. What did you do?
table(60000 rows of data)：

```
CREATE TABLE `sys_task_inst` (
  `INST_ID` int(11) NOT NULL AUTO_INCREMENT COMMENT '',
  `TASK_ID` int(11) NOT NULL COMMENT '',
  `PARENT_ID` int(11) DEFAULT NULL COMMENT '',
  `TASK_SEQ` varchar(100) COLLATE utf8mb4_general_ci NOT NULL COMMENT '',
  `TASK_NAME` varchar(100) COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '',
  `STATUS` char(1) COLLATE utf8mb4_general_ci NOT NULL DEFAULT 'N' COMMENT '',
  `TASK_PARAM` json DEFAULT NULL COMMENT '',
  `EXEC_TIME` datetime DEFAULT NULL COMMENT '',
  `FINISH_TIME` datetime DEFAULT NULL COMMENT '',
  `COST` int(10) DEFAULT NULL COMMENT '',
  `MSG` text COLLATE utf8mb4_general_ci DEFAULT NULL COMMENT '',
  PRIMARY KEY (`INST_ID`),
  KEY `INDEX_TASK_ID` (`TASK_ID`),
  KEY `INDEX_TASK_EXECTIME` (`EXEC_TIME`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci AUTO_INCREMENT=60001;

```

```
explain 
UPDATE SYS_TASK_INST 
SET TASK_NAME = '1'
WHERE
	INST_ID = 61099;
	
explain 
UPDATE SYS_TASK_INST 
SET TASK_NAME = '1'
WHERE
	(INST_ID = 61099);

```



2. What did you expect to see?
They can all use primary key.



3. What did you see instead?

The first can use primary key,
`Point_Get_1	1.00	root	table:sys_task_inst, handle:61099
`
The other can not.
```
TableReader_5	1.03	root	data:TableScan_4
└─TableScan_4	1.03	cop	table:sys_task_inst, range:[61099,61099], keep order:false, stats:pseudo

```

4. What version of TiDB are you using (`tidb-server -V` or run `select tidb_version();` on TiDB)?
3.0.8

<!--
Thank you for contributing to TiDB! Please read TiDB's [CONTRIBUTING](https://github.com/pingcap/community/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.
-->

### What problem does this PR solve? <!--add issue link with summary if exists-->

It's a fix for the `pre-commit` script. It fixes the path for a `goword` tools.

### What is changed and how it works?

`$ make goword` builds it into `./tools/bin/goword`. 
But `pre-commit` script tries to find it in `$PATH` only.

Without the fix:

```bash
➜ git commit ...
Checking for files that need gofmt... OK

Checking for files that need goword... .git/hooks/pre-commit: line 56: goword: command not found
OK
```

with the fix:

```bash
➜ git commit ...
Checking for files that need gofmt... OK

Checking for files that need goword... OK
```

of the fail case:

```bash
➜ git commit ...
Checking for files that need gofmt... OK

Checking for files that need goword... ERROR!
Some files may have spelling errors.
copy and paste the following for where fails this test:
  $ ./tools/bin/goword ddl/db_integration_test.go

Aborting commit
```
<!--
Thank you for contributing to TiDB! Please read TiDB's [CONTRIBUTING](https://github.com/pingcap/community/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.
-->

### What problem does this PR solve? <!--add issue link with summary if exists-->
Fix wrong behavior when `ENUM` and `SET` column meet Aggregation as #13027 .
(Cherry-pick 9bf17e6 from #14035 to release-2.1)

### What is changed and how it works?
Add `firstRow4Enum`, the `first_row` executor for `ENUM`.
Add `firstRow4Set`, the `first_row` executor for `SET`.

### Check List <!--REMOVE the items that are not applicable-->

Tests <!-- At least one of them must be included. -->

 - Unit test
 - Manual test (add detailed scripts or steps below)
```sql
mysql> create table t(a enum('a', 'b'));
Query OK, 0 rows affected (0.01 sec)

mysql> insert into t values('a'), ('b');
Query OK, 2 rows affected (0.00 sec)
Records: 2  Duplicates: 0  Warnings: 0

mysql> select cast(a as signed) from (select a from t group by a) t;
+-------------------+
| cast(a as signed) |
+-------------------+
|                 1 |
|                 2 |
+-------------------+
2 rows in set (0.00 sec)

mysql> create table t1(f set('a', 'b', 'c'));
Query OK, 0 rows affected (0.01 sec)

mysql> insert into t1 values('a'), ('b'), ('a,b,c');
Query OK, 3 rows affected (0.00 sec)

mysql> select cast(f as signed) from (select f from t1 group by f) t1;
+-------------------+
| cast(f as signed) |
+-------------------+
|                 1 |
|                 2 |
|                 7 |
+-------------------+
3 rows in set (0.00 sec)
```


### What problem does this PR solve? <!--add issue link with summary if exists-->

Better default configuration

### What is changed and how it works?

When the binlog is enabled, the txn-total-size-limit value should not be too large.

See also https://github.com/pingcap/tidb/pull/14006

### Check List <!--REMOVE the items that are not applicable-->

Tests <!-- At least one of them must be included. -->

 - No code


<!--
Thank you for contributing to TiDB! Please read TiDB's [CONTRIBUTING](https://github.com/pingcap/community/blob/master/CONTRIBUTING.md) document **BEFORE** filing this PR.
-->

### What problem does this PR solve? <!--add issue link with summary if exists-->
Add metric_summary table to query all summary metrics. This table can quickly help User to find abnormal metrics between two different times.

eg:

```sql
-- query all metric in specified time range.
>select * from `METRIC_SUMMARY` where time > "2020-01-16 16:00:54.933" and time < "2020-01-16 16:20:54.933" order by `SUM_VALUE` desc;
+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+
| METRIC_NAME                                      | TIME                       | SUM_VALUE                  | AVG_VALUE                   | MIN_VALUE                | MAX_VALUE                 |
+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+
| pd_scheduler_store_status                        | 2020-01-16 16:00:54.935000 |          6.07010244119e+13 | 37938140257.5               |        0.0               |         4.99963170816e+11 |
| pd_cluster_status                                | 2020-01-16 16:00:54.935000 |          4.99993793161e+13 |           2.27269905982e+11 |        0.0               |         2.49981585408e+12 |
| heap_mem_usage                                   | 2020-01-16 16:00:54.935000 | 4599581104.0               |    76659685.0667            | 13458600.0               | 144483352.0               |
| pd_scheduler_config                              | 2020-01-16 16:00:54.935000 |    4043868.0               |       10641.7578947         |        0.0               |    200000.0               |
| pd_schedule_filter                               | 2020-01-16 16:00:54.935000 |    2177780.39715           |        5731.00104513        |        0.0               |     16819.2               |
| pd_checker_event_count                           | 2020-01-16 16:00:54.935000 |     983775.596047          |        6148.59747529        |        0.0               |     12340.8               |
| pd_balance_scheduler_status                      | 2020-01-16 16:00:54.935000 |     854400.000068          |        2848.00000023        |        0.0               |     18000.3600072         |
| pd_server_etcd_state                             | 2020-01-16 16:00:54.935000 |     136190.0               |        2269.83333333        |        2.0               |      3614.0               |
| pd_scheduler_balance_leader                      | 2020-01-16 16:00:54.935000 |      24000.0000019         |          75.000000006       |        0.0               |       120.002400048       |
| tidb_gc_config                                   | 2020-01-16 16:00:54.935000 |      24000.0               |         600.0               |      600.0               |       600.0               |
| pd_region_syncer_status                          | 2020-01-16 16:00:54.935000 |      16220.0               |         270.333333333       |        0.0               |       411.0               |
| goroutines_count                                 | 2020-01-16 16:00:54.935000 |      13374.0               |         222.9               |       58.0               |       494.0               |
| qps_ideal                                        | 2020-01-16 16:00:54.935000 |      10659.8168425         |         532.990842126       |      272.970938769       |       658.660271834       |
| kv_write_size_0.999                              | 2020-01-16 16:00:54.935000 |       2812.672             |         140.6336            |      127.872             |       255.488             |
...
...
...
-- compare 2 different time range metrics and order by ratio.
>select t1.sum_value /t2.sum_value as ratio, t1.*,t2.* from 
  metric_summary as t1 join metric_summary as t2 
where
  t1.metric_name = t2.metric_name and  
  t1.time > "2020-01-16 16:00:54.933" and t1.time < "2020-01-16 16:10:54.933" and  
  t2.time > "2020-01-16 16:10:54.933" and t2.time < "2020-01-16 16:20:54.933" 
  order by ratio desc;
+----------------+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+
| ratio          | METRIC_NAME                                      | TIME                       | SUM_VALUE                  | AVG_VALUE                   | MIN_VALUE                | MAX_VALUE                 | METRIC_NAME                                      | TIME                       | SUM_VALUE                  | AVG_VALUE                   | MIN_VALUE                | MAX_VALUE                 |
+----------------+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+--------------------------------------------------+----------------------------+----------------------------+-----------------------------+--------------------------+---------------------------+
| 3.98099801726  | etcd_wal_fsync_duration_0.999                    | 2020-01-16 16:00:54.935000 |          0.76241939798     |           0.076241939798    |        0.0159746666667   |         0.507648          | etcd_wal_fsync_duration_0.999                    | 2020-01-16 16:10:54.935000 |          0.191514638961    |           0.0191514638961   |        0.0159805714286   |         0.031904          |
| 3.80554485331  | etcd_wal_fsync_duration_0.99                     | 2020-01-16 16:00:54.935000 |          0.712193979798    |           0.0712193979798   |        0.0157466666667   |         0.46848           | etcd_wal_fsync_duration_0.99                     | 2020-01-16 16:10:54.935000 |          0.18714638961     |           0.018714638961    |        0.0158057142857   |         0.03104           |
| 1.70232615487  | parse_duration_0.999                             | 2020-01-16 16:00:54.935000 |          0.00581689417069  |           0.000581689417069 |        0.000159655652174 |         0.00241664        | parse_duration_0.999                             | 2020-01-16 16:10:54.935000 |          0.00341702684532  |           0.000341702684532 |        0.0001596832      |         0.00062416        |
| 1.58604950456  | compile_duration_0.999                           | 2020-01-16 16:00:54.935000 |          0.0426435966904   |           0.00426435966904  |        0.00063736        |         0.0097536         | compile_duration_0.999                           | 2020-01-16 16:10:54.935000 |          0.0268866744498   |           0.00268866744498  |        0.000636741818182 |         0.00973312        |
| 1.2205518808   | pd_client_cmd_duration_0.9                       | 2020-01-16 16:00:54.935000 |          0.036912249279    |           0.00111855300845  |        0.00045           |         0.0152            | pd_client_cmd_duration_0.9                       | 2020-01-16 16:10:54.935000 |          0.0302422616028   |           0.000916432169783 |        0.00045           |         0.0076            |
| 1.21517165667  | pd_client_cmd_duration_0.8                       | 2020-01-16 16:00:54.935000 |          0.0314422818744   |           0.000952796420435 |        0.0004            |         0.0144            | pd_client_cmd_duration_0.8                       | 2020-01-16 16:10:54.935000 |          0.0258747656776   |           0.000784083808412 |        0.0004            |         0.0072            |
| 1.16797177117  | distsql_execution_duration_0.999                 | 2020-01-16 16:00:54.935000 |          0.156865116139    |           0.0156865116139   |        0.00399307692308  |         0.03128           | distsql_execution_duration_0.999                 | 2020-01-16 16:10:54.935000 |          0.134305571429    |           0.0134305571429   |        0.00399357142857  |         0.06328           |
| 1.16745022159  | tidb_cop_duration_0.999                          | 2020-01-16 16:00:54.935000 |          0.156865116139    |           0.0156865116139   |        0.00399307692308  |         0.03128           | tidb_cop_duration_0.999                          | 2020-01-16 16:10:54.935000 |          0.134365571429    |           0.0134365571429   |        0.00399357142857  |         0.06328           |
| 1.150920075    | etcd_wal_fsync_duration_0.9                      | 2020-01-16 16:00:54.935000 |          0.177468686869    |           0.0177468686869   |        0.0134666666667   |         0.0352            | etcd_wal_fsync_duration_0.9                      | 2020-01-16 16:10:54.935000 |          0.154197229437    |           0.0154197229437   |        0.0140571428571   |         0.0224            |
| 1.13597971803  | compile_duration_0.99                            | 2020-01-16 16:00:54.935000 |          0.0175244688645   |           0.00175244688645  |        0.0006136         |         0.005376          | compile_duration_0.99                            | 2020-01-16 16:10:54.935000 |          0.0154267444976   |           0.00154267444976  |        0.000607418181818 |         0.0051712         |
| 1.08059627511  | distsql_execution_duration_0.99                  | 2020-01-16 16:00:54.935000 |          0.128651161388    |           0.0128651161388   |        0.00393076923077  |         0.0248            | distsql_execution_duration_0.99                  | 2020-01-16 16:10:54.935000 |          0.119055714286    |           0.0119055714286   |        0.00393571428571  |         0.0568            |
| 1.07517774772  | tidb_cop_duration_0.99                           | 2020-01-16 16:00:54.935000 |          0.128651161388    |           0.0128651161388   |        0.00393076923077  |         0.0248            | tidb_cop_duration_0.99                           | 2020-01-16 16:10:54.935000 |          0.119655714286    |           0.0119655714286   |        0.00393571428571  |         0.0568            |
| 1.05729231864  | parse_duration_0.99                              | 2020-01-16 16:00:54.935000 |          0.00263294170692  |           0.000263294170692 |        0.000156556521739 |         0.0006464         | parse_duration_0.99                              | 2020-01-16 16:10:54.935000 |          0.0024902684532   |           0.00024902684532  |        0.000156832       |         0.0004816         |
| 1.04348646467  | load_schema_ops                                  | 2020-01-16 16:00:54.935000 |          0.47999960012     |           0.023999980006    |        0.0               |         0.060001200024    | load_schema_ops                                  | 2020-01-16 16:10:54.935000 |          0.459996000304    |           0.0229998000152   |        0.0               |         0.06              |
| 1.042526244    | pd_grpc_completed_commands_duration_0.8          | 2020-01-16 16:00:54.935000 |          0.310166666667    |           0.00424885844749  |        0.004             |         0.022             | pd_grpc_completed_commands_duration_0.8          | 2020-01-16 16:10:54.935000 |          0.297514492754    |           0.00407554099662  |        0.004             |         0.009             |
| 1.0407349867   | pd_grpc_completed_commands_duration_0.9          | 2020-01-16 16:00:54.935000 |          0.3476875         |           0.00476284246575  |        0.0045            |         0.0235            | pd_grpc_completed_commands_duration_0.9          | 2020-01-16 16:10:54.935000 |          0.334078804348    |           0.00457642197737  |        0.0045            |         0.0095            |
| 1.02876387364  | query_duration_0.9                               | 2020-01-16 16:00:54.935000 |          0.0714184896476   |           0.00714184896476  |        0.00542857142857  |         0.0078            | query_duration_0.9                               | 2020-01-16 16:10:54.935000 |          0.0694216539652   |           0.00694216539652  |        0.0065            |         0.00764705882353  |
| 1.02746618532  | pd_scheduler_region_heartbeat                    | 2020-01-16 16:00:54.935000 |        224.399256025       |           0.897597024102    |        0.0               |        10.8               | pd_scheduler_region_heartbeat                    | 2020-01-16 16:10:54.935000 |        218.400624012       |           0.87360249605     |        0.0               |        13.2               |
| 1.02423649562  | qps_ideal                                        | 2020-01-16 16:00:54.935000 |       5393.72423646        |         539.372423646       |      466.344551745       |       658.660271834       | qps_ideal                                        | 2020-01-16 16:10:54.935000 |       5266.09260607        |         526.609260607       |      272.970938769       |       595.209594103       |
| 1.01268997302  | pd_client_cmd_duration_0.99                      | 2020-01-16 16:00:54.935000 |          0.0469550537352   |           0.00142288041622  |        0.000495          |         0.01592           | pd_client_cmd_duration_0.99                      | 2020-01-16 16:10:54.935000 |          0.0463666620448   |           0.001405050365    |        0.000495          |         0.00796           |
| 1.01211730991  | pd_handle_transactions_rate                      | 2020-01-16 16:00:54.935000 |          3.33999360038     |           0.333999360038    |        0.319993600128    |         0.36              | pd_handle_transactions_rate                      | 2020-01-16 16:10:54.935000 |          3.30000640013     |           0.330000640013    |        0.32              |         0.36              |
| 1.01181788224  | tidb_cop_duration_0.9                            | 2020-01-16 16:00:54.935000 |          0.0372473107775   |           0.00372473107775  |        0.00330769230769  |         0.00391666666667  | tidb_cop_duration_0.9                            | 2020-01-16 16:10:54.935000 |          0.0368122677323   |           0.00368122677323  |        0.00335714285714  |         0.0041            |
| 1.01100358616  | distsql_execution_duration_0.9                   | 2020-01-16 16:00:54.935000 |          0.0373073840375   |           0.00373073840375  |        0.00330769230769  |         0.00391666666667  | distsql_execution_duration_0.9                   | 2020-01-16 16:10:54.935000 |          0.0369013369963   |           0.00369013369963  |        0.00335714285714  |         0.0041            |
| 1.00936300186  | go_gc_cpu_usage                                  | 2020-01-16 16:00:54.935000 |          0.00196395458919  |           6.54651529731e-05 |       -4.82018280819e-06 |         0.000175346847331 | go_gc_cpu_usage                                  | 2020-01-16 16:10:54.935000 |          0.00194573665329  |           6.48578884429e-05 |       -4.84387043513e-06 |         0.000173825324795 |
...
...
...


```

### What is changed and how it works?


### Check List <!--REMOVE the items that are not applicable-->

Tests <!-- At least one of them must be included. -->

 - Manual test (add detailed scripts or steps below)
