This detection is triggered if `RSTUDIO` is set.

There are a number of cases:

- [ ] 1. Console.
- [ ] 2. R process started from console, via `callr::r` or `system`, etc.
- [ ] 3. Terminal.
- [ ] 4. R subprocess started from an R process in the RStudio terminal.
- [ ] 5. Build pane.
- [ ] 6. R subprocess of an R process in the build pane.

We do not deal with the cases where a terminal app (xterm) or another RStudio process is started from within RStudio, as these cases are not very common.

In general also need to check for `RSTUDIO_CONSOLE_COLOR`, because if it is not set, then RStudio does not support colors, anywhere.

An additional difficulty is that when RStudio starts up, many of its informative environment variables are not yet set, so we need to be careful in this case.

We will also cache the detection, and use it, unless a `sink()` is active.

## Solutions:

### 1. Console.

`isatty(stdout()) == FALSE` but `rstudioapi::isAvailable() == TRUE`. Need special case at startup time.

### 2. R process started from console, via `callr::r` or `system`, etc.

`isatty(stdout()) == FALSE`, and `rstudioapi::isAvailable() == FALSE`. `RSTUDIO_TERM` is not set.

### 3. Terminal.

`RSTUDIO_TERM` is set. `isatty(stdout()) == TRUE`.

### 4. R subprocess started from an R process in the RStudio terminal.

`RSTUDIO_TERM` is set, but `isatty(stdout()) == FALSE`.

### 5. Build pane.

???

### 6. R subprocess of an R process in the build pane.

???
Seen this in revdepcheck.
Currently `has_color()` checks if `stdout()` is a tty, and if it is not then colors are disabled.

https://github.com/r-lib/crayon/blob/84be62074ad5b3ede54dd035ef4003f808f34f12/R/has_color.r#L64

However it is possible users would still want color if stdout is redirected (so is no longer a tty) but stderr is still a tty and the colors are being used in messages to stderr. In fact perhaps it is actually more common for colors to be used in output to stderr than stdout?

I am not sure how best to address this, as crayon has no way of knowing where the output is going to, but the current behavior seems too conservative.
Coming from https://github.com/r-lib/crayon/issues/86#issuecomment-484255984

We just give up on Windows, before we get to the emacs part.
Context: I'm writing tests for a crayon-using package and want the joy of testing the UI w/o ANSI escape codes. I struggle to remember how to turn crayon off ...

I end up reminding myself re: `crayon.enabled` by reading source.

Can we advertise `crayon.enabled` in some high-level doc? Maybe README? I'd be happy to make a PR.
This seems related to #56, except this is running R from an Rstudio terminal, instead of the normal Rstudio console.  Setting forget to TRUE fixes it.

<img width="481" alt="image" src="https://user-images.githubusercontent.com/6105908/51286317-7c387200-19c0-11e9-90b6-e39fc46204d9.png">

This is a pretty obscure use case, so probably not worth dealing with unless its trivial to fix.  The `tempfile` thing is unrelated.
`has_color()` returns `TRUE` within non-interactive RStudio:

```r
# Within RStudio:
callr::r(function() crayon::has_color())
#> [1] TRUE

# Outside RStudio:
callr::r(function() crayon::has_color())
#> [1] FALSE
```

I think this is because the `rstudio_with_ansi_support()` check comes before the `isatty()` check:

```r
# Within RStudio:
callr::r(function() crayon:::rstudio_with_ansi_support() && sink.number() == 0)
#> [1] TRUE
callr::r(function() isatty(stdout()))
#> [1] FALSE

# Outside RStudio:
callr::r(function() crayon:::rstudio_with_ansi_support() && sink.number() == 0)
#> [1] FALSE
callr::r(function() isatty(stdout()))
#> [1] FALSE
```

Happy to send a PR to inverse the branches if that diagnostic looks right.
I'm colorblind and use a dark theme in my editor. Whenever a package uses `crayon::red()`, I can't see the text at all. Would it be possible to add an options system to let users to specify different colors to use for the base `crayon` color functions? For example, the option to specify `options(crayon.red = "coral3")` to use the `"coral3"` color instead of the base R `"red"` color for red text. 

If this is reasonable, I would be happy to do a pull request.
So that apps can opt in.
I am on Win10, neovim 3.1 and neovim-qt. When I use `:terminal` to run `ls --color=always` I get nicely colored output. When I open `R` and run `library(tidyverse)`, which uses `crayon`, I see escape sequences instead of colors:

    -- ?[1mAttaching packages?[22m --------------------------------------- tidyverse 1.2.1 --
    ?[32mv?[39m ?[34mggplot2?[39m 3.0.0     ?[32mv?[39m ?[34mpurrr  ?[39m 0.2.5
    ?[32mv?[39m ?[34mtibble ?[39m 1.4.2     ?[32mv?[39m ?[34mdplyr  ?[39m 0.7.7
    ?[32mv?[39m ?[34mtidyr  ?[39m 0.8.1     ?[32mv?[39m ?[34mstringr?[39m 1.3.1
    ?[32mv?[39m ?[34mreadr  ?[39m 1.1.1     ?[32mv?[39m ?[34mforcats?[39m 0.3.0

Is neovim-qt :terminal on Windows not supported or am I doing something wrong? If this is not the right place to address this issue, could you point in the right direction?