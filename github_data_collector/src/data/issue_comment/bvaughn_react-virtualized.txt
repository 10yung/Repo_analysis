### Do you want to request a *feature* or report a *bug*?

According to mozilla.org:
> The HTML Table Caption element (`<caption>`) specifies the caption (or title) of a table, 
> and if used is always the first child of a `<table>`

Ref: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/caption

As of react-virtualized `9.21.2`, the source code of Table.js provides no option to insert a caption element as the first child of the table component. This is particularly helpful for accessibility since a screen reader can use the tag to announce the purpose of the table.

Example:
```
<table>
  <caption>Example Caption</caption>
  <tr>
    <th>Login</th>
    <th>Email</th>
  </tr>
  <tr>
    <td>user1</td>
    <td>user1@sample.com</td>
  </tr>
</table>
```

Any chance we can add a simple `caption` attribute to the table component? The code should simply conditionally render based on the property:

```
{caption && <caption>{caption}</caption>}
```
## Asking a Question?

I tried to  list the huge amount of data, using infinite scroller , But in my case, List of data need to render in reverse order, But i didn't get the result its keep on loading the record Down wise I have updated the code in codepen (https://codepen.io/john0075081/pen/qBExxqR), kindly refer.


### Which versions of React and react-virtualized, and which browser / OS are affected by this issue? Did this work in previous versions of react-virtualized?
|                   |          |
|-------------------|----------|
| Browser           |   Chrome       |
| OS                |   Ubuntu       |
| React             |     16.12.0     |
| React DOM         |  16.12.0        |
| react-virtualized |    9.21.2      |

Hi @bvaughn , 
I'm currently using react-virtualized and react-custom-scrollbars to produce a chat list in my project. The chat list has a button that can scroll the list to the bottom.

First, the list stopped at the position far away from the bottom, and then some mutil-line messages  were added to the list. What I want is when I click the button, the list will scroll to the bottom position. It actually scrolled, but it stopped at the position a few distance away from the bottom. It can't reach the bottom.

After I debugged many times, I found the total height of the list is not correct. I think this may be the cause of the problem. 

The following is how I use it in my project:
```
import React from "react";
import Types from "prop-types";
import { List, AutoSizer, CellMeasurer, CellMeasurerCache } from "react-virtualized";
import { Scrollbars } from "react-custom-scrollbars";

const overscanRowCount = 10;
const listStyle = {
    overflowX: false,
    overflowY: false,
};

class MessageList extends React.PureComponent {
    static propTypes = {
        chatList: Types.arrayOf(Types.object),
    };

    constructor(props) {
        super(props);
        this.cache = new CellMeasurerCache({
            fixedWidth: true,
        });
        this.list = React.createRef();
        this.scrollbar = React.createRef();
    }
    onScroll = event => {
        const { scrollLeft, scrollTop } = event.target;
        const { Grid } = this.list.current;
        return Grid.handleScrollEvent({ scrollTop, scrollLeft });
    };

    scrollToBottom = () => setTimeout(
        () => {
            this.scrollbar.current.scrollToBottom();
        },
        0,
    );

    renderThumbVertical = () => <div className="scrollbar" />;

    rowRenderer = ({ index, key, style, parent }) => {
        const { chatList } = this.props;
        const msg = chatList[index];
        return (
            <CellMeasurer 
                key={key}
                cache={this.cache}
                parent={parent}
                columnIndex={0}
                rowIndex={index}
            >
                <div style={{ padding: "0 17px", ...style }}>
                    <MsgWrapper msg={msg} />
                </div>
            </CellMeasurer>
        );
    }
    
    render() {
        const { chatList } = this.props;
        return (
            <div className="message-list-container">
                <div className="message-list">
                    <AutoSizer>
                        {({ width, height }) => (
                            <Scrollbars
                                onScroll={this.onScroll}
                                style={{ height, width }}
                                autoHide
                                ref={this.scrollbar}
                                renderThumbVertical={this.renderThumbVertical}
                            >
                                <List
                                    ref={this.list}
                                    width={width}
                                    height={height}
                                    overscanRowCount={overscanRowCount}
                                    rowCount={chatList.length}
                                    rowHeight={this.cache.rowHeight}
                                    deferredMeasurementCache={this.cache}
                                    rowRenderer={this.rowRenderer}
                                    style={listStyle}
                                />
                            </Scrollbars>
                        )}
                    </AutoSizer>
                </div>
                <div
                        className="new-message-tip"
                        onClick={this.scrollToBottom}
                 >
                        new message
                 </div>
            </div>
        );
    }
}

export default MessageList;
```
Finally, the problem always happens with multi-line messages. One-line messages will work well.
Hi @bvaughn  , I'm loving this Table and it provides almost all the required features. 
Two quick questions though. 
1. Is it possible to have a footer or something of that sort? Let's say i have 1000 rows and the last row is total. I want that to be displayed always. 
2. Is there any way to freeze the right columns as we do on the left? 
Any help would be appreciated. Thanks!
For my use case, I can have up to 1000 rows, and since the user is able to scroll all the way to the end immediately, I don't want to load _every_ row that the user has scrolled past, but only the ones in view where they finally ended up. So, I'm throttling `loadMoreRows`, then only loading the data for the items around the last given `stopIndex`, then resolving the promise that `loadMoreRows` returns. It seems to almost work, but the rows in view don't render when I resolve the promise. I'm basically using the exact code from the `InfiniteLoader` example, with a throttle and calculating the `startIndex` based on the given `endIndex`:

```
  _loadMoreRows = throttle(({ stopIndex }) => {
    const actualStopIndex = stopIndex < 20 ? 20 : stopIndex;
    const startIndex = actualStopIndex - 20;
    const { loadedRowsMap } = this.state;

    for (let i = startIndex; i <= actualStopIndex; i++) {
      loadedRowsMap[i] = STATUS_LOADING;
    }
    console.log('loadMoreRows:', { stopIndex, loadedRowsMap });

    const timeoutId = setTimeout(() => {
      delete this._timeoutIdMap[timeoutId];

      for (let i = startIndex; i <= actualStopIndex; i++) {
        loadedRowsMap[i] = STATUS_LOADED;
      }

      console.log('resolving promise. actualStopIndex: ', actualStopIndex);
      promiseResolver();
    }, 1000 + Math.round(Math.random() * 2000));

    this._timeoutIdMap[timeoutId] = true;

    let promiseResolver;

    return new Promise(resolve => {
      promiseResolver = resolve;
    });
  }, 200);
```

From what the docs say, it seems like resolving the promise should trigger the call to  `rowRenderer`, but that doesn't happen. Then if I scroll just a tiny bit, that _does_ render the rows. Am I misunderstanding the docs or is this a bug?

Thanks for contributing to react-virtualized!

**Before submitting a pull request,** please complete the following checklist:

- [x] The existing test suites (`npm test`) all pass
- [x] For any new features or bug fixes, both positive and negative test cases have been added
- [x] For any new features, documentation has been added
- [ ] For any documentation changes, the text has been proofread and is clear to both experienced users and beginners.
- [x] Format your code with [prettier](https://github.com/prettier/prettier) (`yarn run prettier`).
- [x] Run the [Flow](https://flowtype.org/) typechecks (`yarn run typecheck`).

## Motivation

This enables a way to use `CellMeasurer` without `findDOMNode`, e.g. in React `StrictMode`. Here's an example usage:

```
<CellMeasurer {...}>
  {({registerChild}) => <div ref={registerChild} />}
</CellMeasurer>
```
Thanks for contributing to react-virtualized!

**Before submitting a pull request,** please complete the following checklist:

- [x] The existing test suites (`npm test`) all pass
- [ ] For any new features or bug fixes, both positive and negative test cases have been added
- [ ] For any new features, documentation has been added
- [ ] For any documentation changes, the text has been proofread and is clear to both experienced users and beginners.
- [x] Format your code with [prettier](https://github.com/prettier/prettier) (`yarn run prettier`).
- [x] Run the [Flow](https://flowtype.org/) typechecks (`yarn run typecheck`).

See: https://github.com/bvaughn/react-virtualized/issues/1316

This patch changes the following:
- removes **required** from Column's `width` and assigns **auto** to `flex-basis` by default;
- allows to use any string and number value for Column's `width`.


In React virtualized multigrid, If we have the fixedRowCount as 0 and fixedColumnCount as N. If we scroll the left grid, The right grid is not synced.

In order to replicate this issue:
Take this example: https://bvaughn.github.io/react-virtualized/#/components/MultiGrid
Change the fixedRowCount to 0
## What is the current behavior?

When I scroll like a crazy man, I have issue with viewing components. 
I have only white space without any markup - see screencast.  

[Code Sandbox](https://codesandbox.io/s/react-virtualized-list-with-width-100-flcv8)
[ScreenCast](http://img.serpstat.com/wnetking/ezgif.com-video-to-gif.gif)

![ScreenCast](http://img.serpstat.com/wnetking/ezgif.com-video-to-gif.gif)
### What is the expected behavior?

No have  only white space without any markup. 

If you have any ideas, I will be very grateful. 

P.S. Do not scroll like crazy does not fit. :-)

### Which versions of React and react-virtualized, and which browser / OS are affected by this issue? Did this work in previous versions of react-virtualized?
|                   |          |
|-------------------|----------|
| Browser           |    Version 78.0.3904.97 (Official Build) (64-bit)      |
| OS                |    Ubuntu 18.04.3 LTS       |
| React             |     ^16.8.0     |
| React DOM         |     ^16.8.0     |
| react-virtualized |   ^9.21.1       |

Is the `will-change: transform` property still needed in https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/Grid.js#L991 ? It's causing Firefox to print the warning 'Will-change memory consumption is too high' in console when used in a resource-intensive app.

From CHANGELOG (https://github.com/bvaughn/react-virtualized/blob/master/CHANGELOG.md#553):  ''Added will-change property to Grid to work around a Chrome bug(?) that caused the entire grid to be repainted whenever a new row or column was added. This was negatively impacting scrolling performance for Chrome under certain conditions. This change is not expected to impact Firefox, Safari, or IE.' 

That was introduced back in early 2016. No noticeable scrolling performance was affected when I removed the property and tested in recent Chrome (Mac Chrome 79.0.3945)


Issue was produced on Firefox 70.0, Mac OS 10.14

