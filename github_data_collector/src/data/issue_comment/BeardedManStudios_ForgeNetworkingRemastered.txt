An example of this is in the SomeNetworkObject.cs used for additive scenes
There is a new function which you can override in a NetworkBehaviour called RegisterCustomRPCs(NetworkObject)

This is called before NetworkStart so the behaviour.networkObject will still be null at this time
hence why it has a argument NetworkObject which is a valid NetworkObject

Inside the RegisterCustomRPCs
you can register RPCs like you normally would except you have can register the RPC and you'll get the id back

for example

`
        private byte RPC_SERVER_TEST_RPC;

	protected override void RegisterCustomRPCs(NetworkObject networkObject)
	{
		base.RegisterCustomRPCs(networkObject);

		RPC_SERVER_TEST_RPC = networkObject.RegisterRpc("ServerTestRPC", ServerTestRPC, typeof(int), typeof(string));
	}
`

then like then you can use the RPC like you normally would

Aside from that you can also register rpcs from another MonoBehaviour
its completely the same as hooking into the 

networkBehaviour.networkStarted event but instead we have a custom one for registering rpcs which is networkBehaviour.registerCustomRPCs its completely the same as the parent one and is invoked just after RegisterCustomRPCs(NetworkObject networkObject)

-----------------------------------------------------------------------------------------
For as testing goes, I use this in Wobbly Life and works for very complicated NetworkBehaviours with multiple Monobehaviours registering rpcs

For testing in the current branch, I've added some example code in SomeNetworkObject.cs



Dotnet core is more perfomant and suited to running backend console applications.

This has been tested and works without any issues.
### Version Number and Operating System(s):
Latest Unity 2019, Forge Remastered Git

### Summary:
Connecting between MultiplayerMenu over Master Server to a different device on different IP works.
Player 1 hosts, Player 2 (on different ip and device) puts in IP on MultiplayerMenu, clicks join, both players are now in Lobby scene, chatting, setting team colours changing name etc (works perfectly, master server shows they registered, nats working great etc)
- Added 2 screenshots, one showing MultiplayerMenu and Lobby (working fine) and other showing ServerBrowser and Lobby (with its error).

But not when a player tries to join using ServerBrowser it does not.
The host shows up on ServerBrowser, code looks same for joining in ServerBrowser as MultiplayerMenu, but the game acts as if networkObjects do not exist.

### Reproduce:
Using the default 3 scenes provided, unchanged, except for IP's.
2 builds/projects, one to host, and one to view hosts, both go to lobby.

Add yours/mine (if requested) master server and nat IP on the canvas/ServerBrowser script, and on /canvas/MultiplayerMenu script on their scenes.

Build 1:
Add MultiplayerMenu as 0, Lobby as 1 in build settings.
Play, click host on MultiplayerMenu, on the master server exe you can see they connect and get registered.

Build 2:
Add ServerBrowser as 0, Lobby as 1 in build settings.
Play, build 1 host shows on screen, click join on the host.
Lobby scene loads, the joining player to host flashes up for a second before disappearing, 
type in chat for example on players side, any interaction with rpc's or syncvars displays errors that seem to link to networkObjects not being there.
NetworkManager has been instantiated and initialised, everything looks to be same as MultiplayerMenu joining, but the outcomes are not.


#### [Optional] Discord Username:
JesusLuvsYooh

![MMconnect](https://user-images.githubusercontent.com/57072365/67855535-83251100-fb0a-11e9-9816-a9f273645be0.jpg)
![SBconnect](https://user-images.githubusercontent.com/57072365/67855536-83251100-fb0a-11e9-8953-b6e748d0c3ef.jpg)

When debugging issue #322, I noticed a bit of inconsistency in task/thread management, especially when it comes to joining all background threads on shutdown/session reset. This pull request is aimed to improve this situation.

- use BeardedManStudios.Threading.Task for all task needs, instead of System.Threading directly;
- added thread join support: BMS.Threading.Task.WaitAll();
- in any infinite loops, use NetWorker.IsActiveSession checks instead of just IsBound, to cover EndingSession requests;
- NetWorker.EndSession now uses Task.WaitAll instead of an arbitrary 1s wait;
- fixed NetworkingPlayer.BackgroundServerPing to use non-zero wait time and actually ping the server.
### Version Number and Operating System(s):
b69d15bf34598e2f498c70bf735cc11ec0aa6543

### Expected behavior:
Loading a list of servers via a master server list should show game name, player count, ping etc 

### Actual behavior:
Instead shows "Server Offline". The game can still be connected to as normal using NAT punchthrough

### Steps to reproduce:
In settings disable LAN discovery and enable master server list with a working master server
(feel free to use mine at 3.19.219.203:15940 if you haven't got one running).
Run two instances, and have one host.  The server will appear in browser with "Server offline" and no ping/playercount.

Go to your router settings and open the port used by SQP (default 15900).  The server info now correctly displays.


I'm not too familiar with the NAT punchthrough code but from looking it it briefly, it looks like it could do with a refactor so it can be re-used by the SQP.   Does that sound right?  If so I can find some time to take a deeper look at it and potentially fix but I'd need to know if the NatHolePunch server dll would need updating also.

#### [Optional] Discord Username:
Cerzi
### Version Number and Operating System(s):
Windows 10 64-bit
Unity 2018.4 / 2019.2 https://github.com/BeardedManStudios/ForgeNetworkingRemastered/commit/b69d15bf34598e2f498c70bf735cc11ec0aa6543

### Actual behavior:
Attempting to send 1 reliable RPC per FixedUpdate causes the system to overflow and no further RPCs can be sent

### Steps to reproduce:
Clone this fork: https://github.com/Cerzi/ForgeNetworkingRemastered/tree/reliableRPCexample
Build the game, Run two instances.  Note the values in the top right of the screen for the CLIENT

Every fixedupdate the client attempts to a single reliable RPC.  Around 10 or 15 are sent successfully before they stop being received.

Load CubeForgeGame scene in UnityEditor and toggle "reliable" on the RPC Tester component to off.  Re-join and note that the RPCs are successfully received.

Yes sending 60 reliable RPCs a second is probably a bad idea, but the fact that this used to work mostly but now causes catastrophic failure suggests a bug somewhere in recent refactored code.

#### [Optional] Discord Username:
Cerzi
By default only the owner will be able to send RPCs to a network object. You can also assign a master networking player that can call RPCs(while not being allowed to set fields) using:
```csharp
networkObject.AssignMaster(NetworkingPlayer);
```

If you want to allow anyone to send RPCs(like before the change), you can use:
```csharp
networkObject.AllowPublicRpcs = true;
```
`AssignMaster` and `AllowPublicRpcs` should be only used on the server.
### Version Number and Operating System(s):
Forge Networking Remastered Version 03/10/2018-19.53.38,04
Unity 2018.3.8f1 Personal

### Expected behavior:
The client joins without an InvalidCastException.

### Actual behavior:
The client joins with an InvalidCastException, this error refers to the SyncPlayerNetworkObject.
As a result the clients game experience is not what it should be.

### Steps to reproduce:
Download Link: [Download](https://drive.google.com/file/d/1eTsTvbFTGuDc1rIlNxMsH_X0EQhwqD1k/view?usp=sharing)
Build and run the project, host the game with the builded one and connect with Unity in play mode. Click the start game button on the host.

#### [Optional] Discord Username:
Lijpe Lynn#4689
After a discussion on discord it was discovered that the ReadThread could encounter a Connection Reset Socket exception while trying to connect to a server that is not running.

The expected behaviour here would be to trigger a connectAttempFailed event, but the exception will close the socket and the loop checking for the connection attempts will be terminated early without firing the event.

Thank you for @andreivreja for finding the possible solution.
### Version Number and Operating System(s):
Latest master and develop

Currently proximity checks are done based on the sending and receiving player's proximity location.
This setup works fine if the server only owns one object. Eg. in a listen server setup where each client has one network object it owns.

This setup on the other-hand would not work if the server would own multiple objects as there is no easy way to set the correct proximity location in this case.