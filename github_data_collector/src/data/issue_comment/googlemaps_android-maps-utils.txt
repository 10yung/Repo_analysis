*Please do not merge - work-in-progress*

This PR adds a new demo activity that includes the following to a single map to test multiple layer interactions:

* a cluster manager with markers
* a GeoJSON polyline layer
* 2 KML layers (polyline and polygon)
* a normal marker (unclustered)

![image](https://user-images.githubusercontent.com/928045/72092328-184d3e80-32e0-11ea-83dc-6c0a0498d694.png)

This PR is currently being used to test PR https://github.com/googlemaps/android-maps-utils/pull/380. This PR is also based on https://github.com/googlemaps/android-maps-utils/pull/380 branch.
when user select a marker I save a reference to it. but when user zoom out and marker goes into cluster and I want to do anything to marker get NullPointerException. How can I find that the marker is in cluster or is null? or have any listener to it when it cluster?
Version 0.6.2 of com.google.maps.android:android-maps-utils:0.6.2 in Android Studio 3.5.3

_GeoJsonFeature.markerOptions_ has ..
.title
.snippet

But there can be an overhead in determining what title and snippet values should be.
To set this in **thousands** of features as they are plotted is wasteful in time and machine resources.

Better to be able to simply add a link to the _GeoJsonFeature_ in a **.tag** attribute as _GeoJsonPoints_ are plotted, and only determine the .title and .snippet for a **single feature** when a _GeoJsonPoint_ marker is tapped.

Note that taps of _GeoJsonPoints_ **do not** go through the _GeoJsonLayer_ listener.

```
geojsonLayer!!.setOnFeatureClickListener(object : Layer.OnFeatureClickListener {
      override fun onFeatureClick(feature: com.google.maps.android.data.Feature?) {
             // code here
      }
})
```

That is, have ..
_GeoJsonFeature.markerOptions_
.title
.snippet
.tag

Version 0.6.2 of com.google.maps.android:android-maps-utils:0.6.2 in Android Studio  3.5.3

Testing on Nexus 5x - Android 8.1.0

Activity set up like so ..

```
class MainActivity : FragmentActivity(), OnMapReadyCallback, OnMapClickListener, OnMapLongClickListener, OnCameraMoveListener,
        OnCameraIdleListener, GoogleMap.OnPolylineClickListener,
        ActivityCompat.OnRequestPermissionsResultCallback, OnInfoWindowClickListener,
        OnInfoWindowCloseListener, PurchasesUpdatedListener {
                     :         :
        // In onMapReady ..
        mMap!!.setOnPolylineClickListener(this)
                     :         :
        // After geojson is read from file ..
        geojsonLayer!!.setOnFeatureClickListener(object : Layer.OnFeatureClickListener {
            override fun onFeatureClick(feature: com.google.maps.android.data.Feature?) {
                        displayGeojsonPopup(feature)
            }
        })
        geojsonLayer!!.addLayerToMap()
```

When I click on a Polyline, after plotting the Polylines on app start, my code works (as it has for a couple of years - this is a production system).

After I retrieve and plot Geoson data on the same map view, the GeojsonLayer listener works as expected, but there is no response from clicking any of the Polylines.

Hi,
**API ver**: android-maps-utils:0.6.2
**OS**: android
**issue**: when adding multiple KmlLayers, the app crashes when clicking on any item in the KmlLayer.
**How to reproduce:**
- add 2 KmlLayers (for example using "`new KmlLayer`" twice)
- click on any item. It will crash, since feature is null in the onFeatureClick!!

               KmlLayer kmlLayer = new KmlLayer(mMap, new ByteArrayInputStream(byteArr), 
               KmlDemoActivity.this);
                kmlLayer.addLayerToMap();
                kmlLayer.setOnFeatureClickListener(new KmlLayer.OnFeatureClickListener() {
                    @Override
                    public void onFeatureClick(Feature feature) {
                        Toast.makeText(KmlDemoActivity.this,
                                "Feature clicked: " + feature.getId(),
                                Toast.LENGTH_SHORT).show();
                    }
                });

Unfortunately tests using `org.json`, `org.xmlpull` and `android.graphics.Color` remain instrumented. It is possible to provide JSON and XML dependencies and offload even more tests to JVM but it feels like cheating since it is unknown which versions are bundled in the Android framework. A better approach would be unbundle from Android and use own JSON and XML dependencies.

At this point 99 tests are instrumented, 88 are on JVM.
I am currently getting black polygon straight lines in maps after adding the KML layer and it was not at all looking good. 

But in ios it was loaded with nice colors and without any black lines ... showing the KML layer like a heat map.. which is looking good.

So, is the KML utility for android not yet fully rolled or is this a bug?
I am trying to add KML layer on to the maps. It was working okay with just a ms of freeze when i try to load the small size KML file. But some files are large with size more than 1Mb - 10Mb.. in these all cases app is getting frozen for some time while the layer is adding to the map. 

Below is the Asynctask class i am using to read the kml file from local storage path and adding it to maps.

I tried this in many ways using handlers, threads, asynctasks... as i cannot update the UI in background thread... this is causing my app to freeze for some time.

Eventhough it freezes I wouldn't mind but in some device while the app is frozen if the user interacts with the app then app is getting crashed. In some devices it is displaying "wait" dialog.

Please help me out.

`
private static class AddKMLLayerToMaps extends AsyncTask<String, String, KmlLayer> {

        //added weakreference to avoid memory leaks
        private WeakReference<CoverageFragment> weakReferencedFragment;

        AddKMLLayerToMaps(CoverageFragment reference) {

            this.weakReferencedFragment = new WeakReference<>(reference);

            weakReferencedFragment.get().showLoading();
        }

        @Override
        protected KmlLayer doInBackground(String... strings) {

            try {

                TraceUtils.logE("Coverage kml Path", strings[0]);

                FileInputStream fileInputStream = new FileInputStream(strings[0]);

                CoverageFragment fragment = weakReferencedFragment.get();
                if (fragment == null || fragment.getActivity() == null || fragment.getActivity().isFinishing()) {
                    return null;
                }

                KmlLayer kmlLayer = new KmlLayer(fragment.mMap, fileInputStream, getApplicationContext());

                fileInputStream.close();

                File file = new File(strings[0]);
                if (file.exists()) file.delete();

                return kmlLayer;

            } catch (Exception e) {

                weakReferencedFragment.get().hideLoading();

                TraceUtils.logException(e);

            }

            return null;
        }

        @Override
        protected void onPostExecute(KmlLayer kmlLayer) {

            super.onPostExecute(kmlLayer);

            if (kmlLayer != null) {

                //add the KML layer to map using the UI thread
                weakReferencedFragment.get().mActivity.runOnUiThread(() -> {
                    try {

                        kmlLayer.addLayerToMap();

                    } catch (Exception e) {

                        weakReferencedFragment.get().hideLoading();

                        TraceUtils.logException(e);

                    }
                });

                //zoom to the center of KML layer containers
                new MoveMapToKMLLayer(weakReferencedFragment.get()).execute(kmlLayer);
            }
        }

    }`
Hello,

When we clearItems in ClusterManager, it seems the markers cache of DefaultClusterRenderer is not cleared. Calling getMarker() on it will return a marker not matching the current Map, causing an exception.

I resorted to recreate the whole renderer on each clear to avoid that.

Thank you.
Hello,

The following function:
`protected Collection<QuadItem<T>> getClusteringItems(PointQuadTree<QuadItem<T>> quadTree, float zoom) {
        return mItems;
    }`
can't be overriden in another package because QuadItem is of visibility `internal`.

I wanted to override this function to return items based on their density so that the cluster center item selection is not random.

Thank you.