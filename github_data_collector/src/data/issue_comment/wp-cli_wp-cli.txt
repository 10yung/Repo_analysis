fix typos and docs standards
* Using version 2.4.0 (latest version as of this ticket)

My web site's DocumentRoot points to `/www/wordpress`, and my site's URL should be `https://wordpress.localdomain/`. I use the following commands to install Wordpress from the `/www/wordpress` directory:

`wp core download --locale=fr_CA`

`wp core config --dbhost=localhost --dbname=wordpress --dbuser=wpuser --dbpass=wpuser`

`wp core install --url=https://wordpress.localdomain/ --title="Wordpress Local" --admin_name=wpadmin --admin_password=wpadmin --admin_email=myemail@localdomain.com`

When I try to access the site, the theme is broken (css not loading, missing images, etc...) and I see it's looking for https://wordpress.localdomain/wordpress/... instead of looking for files at the root.

If I undo the install and use the web installer instead, it's fine.

If I use the wp-cli method, and use the `wp option get siteurl` command, I see it has added /wordpress to the URL.

I can fix it by resetting the siteurl correctly using `wp option set siteurl https://wordpress.localdomain`, but why should I have to do this?

I saw a [previous ticket](https://github.com/wp-cli/wp-cli/issues/2563) dating from 2016 that was reporting the same thing but it had been fixed since. Would this be a regression?

Edit: The `home` option is also affected and has `/wordpress` added. Can also be fixed with the `wp option set` command.
## Bug Report

**Describe the current, buggy behavior**

When I run a command against multiple aliases using the group alias `@clients`, I get the following error:
``` ssh is not recognized as an internal or external command, operable program or batch file. ``` (see attachment)
![error](https://user-images.githubusercontent.com/47913749/71992488-be903a00-3235-11ea-939a-884e6036e14e.png)

The weird thing though is that when I run a command with just an regular alias, like ```wp @client_name core update```, everything works fine. Besides, everything is just set up accordingly to the documentation in the config.yml file.

**Describe what you expect as the correct outcome**

The command should just run against all the listed aliased in the group `@clients`.
```
@clients:
  - @client1
  - @client2
  - @client3

```
(Paste the output of "wp cli info" into this box)
```OS:     Windows NT 10.0 build 17763 (Windows 10) AMD64
Shell:  C:\Program Files\Git\usr\bin\bash.exe
PHP binary:     C:\xampp\php\php.exe
PHP version:    7.3.2
php.ini used:   C:\xampp\php\php.ini
WP-CLI root dir:        phar://wp-cli.phar/vendor/wp-cli/wp-cli
WP-CLI vendor dir:      phar://wp-cli.phar/vendor
WP_CLI phar path:       C:\Users\Pieter
WP-CLI packages dir:
WP-CLI global config:   C:\Users\Pieter/.wp-cli/config.yml
WP-CLI project config:
WP-CLI version: 2.4.0```


## Bug Report

**Describe the current, buggy behavior**

Running wp-cli without any arguments tries to open less. This will not work if less is not installed.

**Describe how other contributors can replicate this bug**

- run `wp-cli`
- wait a couple seconds
- it returns `sh: 1: less: not found`

**Describe what you expect as the correct outcome**

Maybe a simple manual page like you would get with `--help`

**Let us know what environment you are running this on**
Ubuntu Docker

```
OS:     Linux 5.3.16-300.fc31.x86_64 #1 SMP Fri Dec 13 17:59:04 UTC 2019 x86_64
Shell:
PHP binary:     /usr/local/bin/php
PHP version:    7.2.4
php.ini used:
WP-CLI root dir:        phar://wp-cli.phar/vendor/wp-cli/wp-cli
WP-CLI vendor dir:      phar://wp-cli.phar/vendor
WP_CLI phar path:       /var/www/html
WP-CLI packages dir:
WP-CLI global config:
WP-CLI project config:  /var/www/html/wp-cli.yml
WP-CLI version: 2.4.0

```

**Provide a possible solution**

**Provide additional context/screenshots**
![grafik](https://user-images.githubusercontent.com/10533763/71366702-19256700-25a3-11ea-97f6-f5980b0cb82e.png)

## Bug Report

- [x] Yes, I reviewed the [contribution guidelines](https://make.wordpress.org/cli/handbook/contributing/).
- [x] Yes, more specifically, I reviewed the guidelines on [how to write clear bug reports](https://make.wordpress.org/cli/handbook/bug-reports/).

**Describe the current, buggy behavior**

Defining a constant in `wp-config.php` that includes `__FILE__` in the _name_ of the constant, causes wp-cli to fail with this error message:

```
Parse error: syntax error, unexpected 'var' (T_VAR) in phar:///usr/local/bin/wp/vendor/wp-cli/wp-cli/php/WP_CLI/Runner.php(1197) : eval()'d code on line 66
```

Using latest v2.4.0 phar executable.

**Describe how other contributors can replicate this bug**

1. Add this line to `wp-config.php`  
    ```php
    define( 'WP_CONFIG__FILE__', __FILE__ );
    ```
1. Run `wp`
1. See the above error, command fails

**Describe what you expect as the correct outcome**

I would expect the wp command list to display.

**Let us know what environment you are running this on**

```
OS:	Linux 4.9.184-linuxkit #1 SMP Tue Jul 2 22:58:16 UTC 2019 x86_64
Shell:	
PHP binary:	/usr/local/bin/php
PHP version:	7.3.9
php.ini used:	/usr/local/etc/php/php.ini
WP-CLI root dir:	phar://wp-cli.phar/vendor/wp-cli/wp-cli
WP-CLI vendor dir:	phar://wp-cli.phar/vendor
WP_CLI phar path:	/var/www/html
WP-CLI packages dir:	
WP-CLI global config:	
WP-CLI project config:	
WP-CLI version:	2.4.0
```

Fixes #5267.

Note: I don't know if returning $e->getMessage() or converting exception to string is preferred. PR does the former.
## Bug Report

- [x] Yes, I reviewed the [contribution guidelines](https://make.wordpress.org/cli/handbook/contributing/).
- [x] Yes, more specifically, I reviewed the guidelines on [how to write clear bug reports](https://make.wordpress.org/cli/handbook/bug-reports/).

**Describe the current, buggy behavior**

When using `WP_CLI::colorize()` for values that are to be displayed in a table, the line wrapping breaks the colorization and the calculated line length.

<img width="832" alt="Image 2019-12-16 at 2 36 56 PM" src="https://user-images.githubusercontent.com/83631/70911563-7739d380-2012-11ea-928b-0a39c02082f9.png">

**Describe what you expect as the correct outcome**

The table formatting should be aware of colorization (as it already has an optional argument to denote pre-colorized content) and adapt the color codes when it manipulates the strings.

**Provide a possible solution**

The formatting code should:
- terminate the left part with a `%n` and prefix the right part with the color code that was active when detecting a colorized string it needs to break up for wrapping.
- take the manipulated color codes into account for each single line when calculating the column length.
Except the abstract Base class in Fetchers folder, all other files were removed since version 1.2.0,
but Runner.php still contain a line that try to instantiate a new object of type \WP_CLI\Fetchers\User.

The fatal error happens if the command line is invoked with --user='any-name' and the constant WP_INSTALLING has not been defined. 

Note: WP_INSTALLING is a constant which gets defined by Wordpress when it start installation for a fresh site.


When I try to create an alias, I get an error. (see printscreen) Any thoughts on how to solve this problem?
![image](https://user-images.githubusercontent.com/47913749/70805018-3f375400-1db8-11ea-8f73-cc69ba474600.png)

Strangely enough I can get this to work without problem:

```bash
wp --ssh=ssh-config-alias --path=path/to/wp-on-remote-server rewrite flush
```

but if I create a `wp-cli.yml` on my project root with the following:
```yml
ssh: ssh-config-alias
path: path/to/wp-on-remote-server
```
I then get:
```bash
$ wp rewrite flush
Error: This does not seem to be a WordPress installation.
Pass --path=`path/to/wordpress` or run `wp core download`.
```
It seems that the config file is only applying the `ssh` option but not `path` as If I then run the below, it works.

```sh
wp --path=path/to/wp-on-remote-server rewrite flush 
```
So apparently, I am unable to get `wp-cli.yml` working with SSH.