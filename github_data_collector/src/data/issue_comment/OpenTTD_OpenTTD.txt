

## Version of OpenTTD
1.10.0-beta2
## Expected result
Cost of dock + cost of clearing sloped tile
## Actual result
Cost of dock
## Steps to reproduce
Dock 1: Build a dock, see total cost
Dock 2: Clear sloped tile before building a dock, see total cost

## Version of OpenTTD
1.10.0-beta2
## Expected result
River is restored at the middle tile
## Actual result
River is not restored at the middle tile
## Steps to reproduce
Use NewGRF OpenGFX+ Landscape 1.1.2
Place Rocky land object on sloped river.
Build a lock.
Demolish lock.
Basic workflow but logs should be less hidden and easier to read.
It can probably be improved with annotations and other stuff.
After watching OpenTTD trains for many hours I conclude that the most notable pathfinding problem is that when a train has left a station but stopped (due to breakdown or waiting at a signal) with the last car on the tile after the station exit, where a signal is, the next trains sees that the whole station track is free and decides to wait for that particular station track, possibly indefinitely, even though another station track is available. Thus it blocks the whole queue of trains to the station.

This could be fixed in either of the following 2 ways:
1. The pathfinder only picks a station track for a train when it can reserve the station track AND the track beyond to the next signal.
2. Station exits are considered to have built-in signals (like depots have). This is the solution that I would prefer (even if someone would decide that then the train length capacity of stations would have to be reduced by 1 car to compensate).
This is rather a feature request than an issue and I would like to see if this is something other people may also be interested in.

## Expected result
One can prospect industries already and there are settings in the game to open or limit this feature.  Likewise, it would be cool to have a feature to "slightly" move an existing industry to a nearby location (e.g. with a "Move" button in the industry window).  What 'nearby' is could be definable in the settings.  Industries, which have logical constraints (e.g. mines have mineshafts), should remain immutable or can be relocated considerably less than others (maybe just 1-2 squares).

One way I can imagine this is to have a "catch area" by industry type for it and you can move it inside that catch area.  This relocation should really cost something (up to the price of prospecting a new industry), so that abuse would be hampered and could be scaled with the distance.  If the old and new location partially overlaps it costs less, depending on the overlap.  Otherwise it costs like prospecting a new company

Also, industries should not be able to be moved into another authority zone of another town, e.g. if an industry at the new location would be called "Town Z Industry" instead of "Town Y Industry", the catch area should show the border and refuse a location further in that direction.

Primary industries may produce less the further away they are being relocated from their original location to indicate that where they had been was their sweet spot.  How many squares one can move an industry free of penalty could be defined in the settings, but should realistically between 0-2 squares.  The catch area could be thought of as the furthest the industry is willing to be moved, so they can still produce something.

Program-wise (yes, I also think about the coders implementing stuff like this), it would mean that an industry needs to have an additional "original" location, so that moving it once does not reset its original location.  It also needs a catch area (coordinates it can be moved to).  A calculation could be done for the distance penalty.  Industries may be marked as "building up".  So, for a month or two, they are not producing anything due to the move.

## Actual result
Once the industry has been placed (either by the player or by itself), it is immutable.

Feature: Build on competitor canal

1) Major feature: Canal Owners, it allows everything that is a canal or was built over a canal to have a 'canal owner'. Stuff like Canal, Ship Depot, Dock, Buoy, Lock, Oil Rig, Object, if built on a
canal or if it is a canal, will have a 'canal owner'.
- Querying these tiles will display 'Canal owner:' to retrieve the respective owner of that canal.
- Added a game setting allowing or disallowing building over canals of competitors.
- Savegame conversion.

2) Another semi-major feature: Permanent rivers, which mean, rivers are indestructible, unless cheating or in the scenario editor.
- Demolishing a canal that was built on rivers will restore the river.
- Added a game setting that can turn on or off this feature.
- Savegame conversion.

3) Less relevant stuff:
- Improved Lock pricing and infrastructure counting, to achieve better consistency.
The original algorithm pays intermediate legs in feeder systems based
on the start and end stations of that particular leg.
This tends to result in large negative payments on the final leg for
journeys with many feeder legs, as the overall feeder payment increases
with the number of legs, and the final leg is penalised for discrepancies
between the previous leg payments and the actual payment for delivery
from the source to the destination.
The feeder share setting is a partial mitigation, however it is difficult
to tune as a suitable value depends on the number of legs and the network
topology, which are often not the same for all vehicles.

The new incremental algorithm pays the cargo payment from the source
station to the end station of the current leg, minus any previous
transfer feeder payments for each leg.
This prevents unbounded increase of feeder payments and therefore avoids
the issue of excessive negative payments on the final leg.
Feeder payments may be negative, e.g. in the case of poorly performing
or highly indirect legs. This is better than penalising the final leg.
This mode reduces the need to tune the feeder shares setting to the
current network.

The feeder share setting applies in the existing way for both modes.