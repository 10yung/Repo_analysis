In Intern 4, the server listens on localhost, which is fine when running a browser on the local machine, but doesn't necessarily work when trying to serve to browsers on other hosts or in VMs. This option would be distinct from serverUrl, which is the address a remote uses to get back to the host.
In Intern 4, the test server run son port 9000 by default, or a port specified by the user. Intern should understand a `serverPort` option of 'auto' (or something similar) that would allow it to auto-select an open port.
Run the websocket server and the http server over the same port. This would simplify configuration (no more `socketPort`) and the server code itself (the websocket init code would be initialized with the http server).
When killing Intern 5-pre with ctrl+c, the console output is repeated.

```
Tunnel started

‣ Created remote session internet explorer 11 on WINDOWS (225f78d3ae83bea32b57872afc30d44037eb6062)
Suite internet explorer 11 on WINDOWS ERROR
Error: Syntax error
  @ src/core/loaders/default.ts:6:25
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get URL (0.002s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get local file (0s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get coverage (0.002s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #quit coverage (0s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #setHeartbeatInterval (0.358s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - initialiser throws (0.033s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - invalid async command (0.104s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - catch recovery (0.001s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - initialisation (0.001s)
^CCommand was canceled: node -r tsconfig-paths/register _testIntern/bin/intern.js run -C --config @ci --environments ie
Listening on localhost:9000 (ws 9001)
Tunnel started

‣ Created remote session internet explorer 11 on WINDOWS (225f78d3ae83bea32b57872afc30d44037eb6062)
Suite internet explorer 11 on WINDOWS ERROR
Error: Syntax error
  @ src/core/loaders/default.ts:6:25
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get URL (0.002s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get local file (0s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #get coverage (0.002s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #quit coverage (0s)
✓ internet explorer 11 on WINDOWS - functional/lib/ProxiedSession (functional) - #setHeartbeatInterval (0.358s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - initialiser throws (0.033s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - invalid async command (0.104s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - error handling - catch recovery (0.001s)
✓ internet explorer 11 on WINDOWS - functional/webdriver/Command - initialisation (0.001s)
Done testing
npm ERR! Test failed.  See above for more details.
```
Now that Edge Chromium is out, verify that Intern 4 and 5-pre work with it.
In Intern 5.0-pre, if a test session is started for IE (and possibly other browsers) and killed with ctrl-C, webdriver servers may be left running. Intern should try to ensure that any child processes are killed if it is interrupted.
The goal of this ticket is to propose improvements to Intern's WebDriver API. What changes, if any, would make the WebDriver API easier to use in Intern 5?

Several improvements that have been suggested:

* #1039 would give Intern a more flexibly way to specify and use locators throughout the rest of the API
* #1032 would allow method chaining on Elements as well as commands
* #1024 would simplify the process creating webdriver helper functions


Description: During the feature detection tests before my functional tests run IE11 is stalling at the purple "foo" step in the test. After 'foo' displays it maximizes the window before it stalls so maybe it's related to that.

Steps to reproduce:
Run the attached tests (`npm run server` then `npm test`)

Expected result: Feature detection should complete fairly quickly.
Actual result: Feature detection stalls for about ten minutes, then continues to the functional tests.

Intern version: 4.4.3

Any additional information:
Selenium 3.141.59, IE driver 3.14.
![image](https://user-images.githubusercontent.com/39064853/61228375-ca1e0080-a6eb-11e9-926c-c63c464a9980.png)
[intern-test.zip](https://github.com/theintern/leadfoot/files/3393033/intern-test.zip)


According to the JSONWireProtocol spec, which is what defines the [moveto](https://github.com/SeleniumHQ/selenium/wiki/JsonWireProtocol#sessionsessionidmoveto) command can take a `null` element, in which case the command operates relative to the current mouse position. 

However, `Session.prototype.moveMouseTo` currently fills in an empty/null element with a reference to the `documentElement`. At least in Mac Chrome 66 with chromedriver 2.36, this causes an error in the `moveMouseTo` command:

```
unknown error: Failed to execute 'getComputedStyle' on 'Window': parameter 1 is not of type 'Element'.
```

This error does not occur for Firefox with geckodriver 0.20.1.

Regardless, `moveMouseTo` shouldn't behave this way by default since `null` should be a valid element.
The goal of this issue is to consider how Intern's general testing API can be improved for version 5.

For example, Intern 4 presents its plugin API, which requires an `intern` global, as the default way to add user functionality and to access built in functionality such as test interfaces. For example, the canonical way to access the "object" interface is with

```ts
const { describe, it } = intern.getPlugin('interface.bdd');
```

This was done primarily to enable interoperability with browsers, which don't have native loaders. However, the non-loader case is more the exception than the rule, and the `getPlugin` API is a non-standard way to load modules. Many/most users tend to just import the object interface directly from `intern/lib/interfaces/object`, and rely on something like webpack to handle in-browser module loading.

So, one potential minor API improvement would be to make importing the testing interfaces simpler:

```ts
import { describe, it } from 'intern';
// or
import { describe, it } from 'intern/interfaces';
```

A more general improvement would be to clearly indicate what parts of Intern are intended to be consumed by users and which are internal (e.g., `intern/lib/xxx` is internal).