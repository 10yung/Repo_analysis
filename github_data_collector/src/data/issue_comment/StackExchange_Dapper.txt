Method:
```csharp
        public async Task<int> GetLastChapterNumberAsync(int storyId)
        {
            var query = $"SELECT MAX(chapters.number) FROM chapters WHERE chapters.fiction_id = @{nameof(storyId)}";

            using (var connection = new NpgsqlConnection(_databaseOptions.ConnectionString))
            {
                return await connection.QueryFirstOrDefaultAsync<int>(query, new { storyId });
                
            }
        }
```
A zero is expected when storyId is not found. However I receive an exception. Method works correctly when chapter exist.

Exception:

Object reference not set to an instance of an object.

```
   at Dapper.SqlMapper.<QueryRowAsync>d__34`1.MoveNext() in C:\projects\dapper\Dapper\SqlMapper.Async.cs:line 526
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult()
   at Data.Repositories.ChapterRepository.<GetLastChapterNumberAsync>d__6.MoveNext() in C:\src\App\App.Data\Repositories\ChapterRepository.cs:line 71
```
# update
It seems to have no problem when using a nullable int.
	I set the maximum number of threads is 512, and now I do stress testing with jmeter, I set up in 200 the number of threads started to access an interface, this interface is a single table query, I monitor database links created only 16, without executing SQL statements, such as dozens of seconds, an error, my program using the docker in Linux running in a container, there is no problem in the Windows environment, under Linux is problematic

.net core 3.1  +dapper 2.0.3

Error message is:
Input:;Message:Timeout expired.  The timeout period elapsed prior to obtaining a connection from the pool.  This may have occurred because all pooled connections were in use and max pool size was reached.

Think you  help me 
`SingleOrDefault<(int, int)?>(query)` always returned null because the IsValueTuple did not handle nullable types and thus the `GenerateValueTupleDeserializer` method was never called.

I've added test for the case when the query does not return something (the tuple should be null) and when it does return something. Additionally added tests for the edge-case where you select 8 or 15 element tuples to make sure nothing broke there. 
Currently, this code always returns null:

```csharp
connection.QuerySingleOrDefault<(int id, string name)?>("select 1, 'Bob'");
```

That is because `IsValueTuple` does not handle the case where it's a `Nullable<ValueTuple<>>` and because of that the special logic for value tuple deserializer generation (`GenerateValueTupleDeserializer`) is not called. Then presumably it follows the normal deserializer logic for structs and it would expect the above query to return columns called Item1 and Item2. 
Hello
I face huge slowness when using DynamicParameters with a list.

/**** The setup ****/ 
I am using Dapper 2.0.30 framework .Net 4.6.2.
My Db is Azure SQL Server As a service from Azure.

The table I request has this structure:
```
TABLE [MY_TABLE](
	[first_id] [numeric](12, 0) NOT NULL,
	[second_id] [int] NOT NULL,
	[entry_start] [datetime] NOT NULL,
	[entry_end] [datetime] NOT NULL,
	[value] [numeric](20, 10) NULL,
 CONSTRAINT [PK_MyTable] PRIMARY KEY CLUSTERED 
(
	[first_id] ASC,
	[second_id] ASC,
	[entry_start] ASC,
	[entry_end] ASC
)
```

/**** The prove that this is not an index problem ****/ 
When I do the following, there is no problem, it is almost instantaneous:

```
var request = "select first_id, second_id, entry_start, entry_end, value MY_TABLE where first_id in (2, 3) and entry_start >= @start_date and entry_end <= @end_date";

var param = new DynamicParameters();
param.Add("start_date", startDate);
param.Add("end_date", endDate);
var result = connection.Query<MyTableDto>(request, param);
```

/**** The problem ****/ 

But when I want to use a param for first_id, the request remains stucked!!

```
var request = "select first_id, second_id, entry_start, entry_end, value MY_TABLE where first_id in @ids and entry_start >=  @start_date and entry_end <= @end_date;";
var ids = new List<int> { 2, 3 };
var param = new DynamicParameters();
param.Add("ids", ids);
param.Add("start_date", startDate);
param.Add("end_date", endDate);
var result = connection.Query<MyTableDto>(request, param);
```

/**** Help please :) ****/
Do you have any idea of what causes this slowness? 

Regards!

With PostgreSQL, the manner in which a key property name is quoted is inconsistent between the `Update`/`Delete` and `Get`/`Insert` methods, causing either `Update` and `Delete`, or `Get` and `Insert` to potentially fail depending on database configuration.

`Update` and `Delete` use `PostgresAdapter.AppendColumnNameEqualsValue` when appending the key field to sql, which puts `"` around the field as expected:
https://github.com/StackExchange/Dapper/blob/981cfe4ddfde421b9d572d8f5c2cda259be20a65/Dapper.Contrib/SqlMapperExtensions.cs#L1039

However, `Get` and `Insert` fail to put quotes around the key field:
- `Get` inserts the key field into the sql string directly ([link](https://github.com/StackExchange/Dapper/blob/master/Dapper.Contrib/SqlMapperExtensions.cs#L179))
- `Insert` calls `PostgresAdapter.Insert` which fails to include quotes as part of the `RETURNING` sql ([link](https://github.com/StackExchange/Dapper/blob/master/Dapper.Contrib/SqlMapperExtensions.cs#L1004))

The result of this is if the id property is not all lower-case (both in the .NET class and in Postgres), then either `Get` and `Insert`, or `Update` and `Delete` will fail, because Postgres is case sensitive and will automatically transform any column identifier to lower-case unless it is wrapped in double quotes. E.g.:
- if the key field is `ID` in .NET and `ID` in Postgres, `Get` and `Insert` will fail because Postgres will automatically transform `ID` to `id`, as it is not enclosed in double quotes
- if the key field is `ID` in .NET and `id` in Postgres, `Update` and `Delete` will fail because Postgres won't automatically transform `"ID"` to lower-case because it is enclosed in double quotes

A solution for this would be:
- `Get` should append the ID field with an adapter-specific call much like `Update` and `Delete` call `ISqlAdapter.AppendColumnNameEqualsValue`
- `PostgresAdapter.Insert` should use double quotes when appending the key field to the sql StringBuilder
Fix for #818 
I annotated the public API in https://github.com/StackExchange/Dapper/pull/1392I for fun and in case it could be helpful. I don't have a use case for this feature as a Dapper user right now, and I'm not asking for it.

@NickCraver had good thoughts and asked me to open an issue for discussion. There are some big drawbacks:

- It would hose pretty much all open PRs.
- Fixing the new warnings results in a big change to review. (Flip side: there are definitely bugs that got caught.)
- Using C# 8 with any target framework other than .NET Core 3+ is officially unsupported by Microsoft, even though [they tell library authors to use this unsupported configuration](https://devblogs.microsoft.com/dotnet/embracing-nullable-reference-types/) for the purpose of NRT annotation.
- If I'm paraphrasing correctly, Nick is concerned that enabling NRTs could make it easier for nulls to leak in or out of Dapper APIs in places where they are currently supposed to never be null.

Is there anything that Dapper would stand to gain by paying these costs?

üìù https://github.com/tunnelvisionlabs/ReferenceAssemblyAnnotator aims to fill the tooling gap by copying nullability annotations from .NET Core 3+ into the reference assemblies you compile against and by providing internal nullability attributes as source. I use it for active projects from net35 to net48 and netstandard2.0. There aren't any technical limitations I know of compared to the NRT experience on .NET Core 3 itself. (Besides bugs in this community tool, of course.)
https://github.com/StackExchange/Dapper/blob/61fa083ca3b711067b6b2a0448b156836d696794/Dapper/DynamicParameters.cs#L276

If the DbString Length is set smaller than the value of the actual string, whether or not the IsAnsi flag is true or false, the value passed into the DbString will be silently truncated in the database call.

We experienced this in one of our apps when the value we passed in was greater than the length value specified in the dapper code and the resulting search came back with different data. Our fix was to build our own nuget package that would set the DbString length to the size of the string value.