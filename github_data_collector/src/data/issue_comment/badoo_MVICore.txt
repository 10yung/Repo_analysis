I have a NavFeature which handles routes.
NavWish(path: String) goes in and NavState(module: String, args : ...) goes out.
All my code depends on Store<NavWish, NavState>.
Now I want to use a stack with NavStates, but I don't want the rest of my code to know that I'm using a Stack.

What is the best way to expose a Store-interface without the stack, but use the stack interrnally?
This may be by design but it was not immediately obvious and drove me insane this morning. I was looking for the logging for an `Actor` in one of my `Feature`s but I was not getting any output. Turned out that a refactor recently had the side-effect of the `Feature` being instantiated before the `LoggingMiddleware` was added. 

Is this a case that could be handled or if not, maybe it is worth calling attention to in the wiki.
If `SameThreadVerifier` is enabled we can capture stack trace where this object was created and then print it on assertion error (or add it as a cause). It should help with debugging such errors.
How can I handle multiple Feature to View bindings? Where ViewModels should be merged into one to render in View? Do you have any examples of this?
Multiplatform / framework implementation of MVICore.

Consists of several steps:
- [ ] Move current implementation of MVICore to mpp module without any dependencies
    ✅ `Source` / `Sink` / `Cancellable` types 
    ✅ `Binder`
    ✅ `BaseFeature` / `ActorReducerFeature` / `ReducerFeature`
    ⬜️ `Middleware`
- [ ] Setup build and publishing for mpp modules
- [x] Create a wrapped version for RxJava based on mpp implementation
- [ ] Deprecate current implementation and replace it with typealiases to help with migration
- [ ] Implement wrapped versions for coroutines and Reaktive
- [ ] Document changes
Hi guys. Do you have any examples, best practices how you tests yours features?

Could you please help me to find out better solutions to configurate custom views?
I have 20 different features on one screen. Each feature has its own view. The app has a dynamic theme. Each view has one input/state. I need to set theme settings for each view.
I hope that anybody has some ideas or any examples of how to do it in the best way.
Hi.
In [best practices](https://badoo.github.io/MVICore/bestpractices/) you wrote next code

```
class BootstrapperImpl(
        private val feature1: Feature1
    ) : Bootstrapper<Wish> {
        override fun invoke(): Observable<Wish> =
            feature1.news.map { SomeWishOfFeature2  }
    }
```

But i can't understand best way to do this map , because news is ObservableSource and don't have map function.
Maybe you have some ktx extensions for this?

Now i do this.
 ```
class  BootstrapperImpl(
        private val feature: Feature1
    ) : Bootstrapper<Wish> {
        override fun invoke(): Observable<Wish> =
           Observable.create {
               emitter ->
               val newsListener = object : Observer<Feature1.News>{
                   override fun onNext(news: Feature1.News) {
                       when(news){
                           else->emitter.onNext(Wish.Update())
                       }
                   }
                   override fun onComplete() {
                      emitter.onComplete() 
                   }
                   override fun onSubscribe(d: Disposable) {}
                   override fun onError(e: Throwable) {}
               }
               feature.news.subscribe(newsListener)
            }
    }
```

We need to decide what to do in `Bootstrapper` based in the initial state quite often. Right now this needs to be passed manually to implementation constructor, which is quite inconvenient when e.g deciding the initial state based on `TimeCapsule`, as a reference cannot be stored for it inside constructor.

Proposed solution is to change `Bootstrapper` and `BaseFeature` so that initial state is passed automatically to invocation.
Tracking issue of what has been/will be done and for which milestone.

## 1.2.0
- [x] Source parameter in connection (#66)
- [x] Connector - transformer from source to source (#73)
- [x] MemoFeature (#76)
- [x] Model watcher (#82)

## 2.0.0
- [ ] Previous state in newsPublisher and postProcessor (#88)
- [ ] Add initial state to Bootrstrapper invocation (#92)
- [ ] Multi platform / framework support (#90)
- [ ] ~~Parameter to delay feature start (#89)~~
