It would be nice to get a list of N biggest files in the repo. Both compressed and uncompressed sizes to be shown.
If you [follow these build instructions](https://github.com/github/git-sizer/blob/master/docs/BUILDING.md#build-using-make) and run `make test` on one of the `.tar.gz` releases you get:

```
$ make test; echo $?
[...]
        Messages:       command failed; output: "error: couldn't open Git repository: git rev-parse failed: fatal: not a git repository (or any of the parent directories): .git\n\n"
[...]
make: *** [gotest] Error 1
2
```

Just running `git init` in the build directory works around it, but I don't know how much this breaks the tests, if at all:

```
$ make test; echo $?
[...]
ok      github.com/github/git-sizer     0.123s
ok      github.com/github/git-sizer/counts      (cached)
?       github.com/github/git-sizer/git [no test files]
?       github.com/github/git-sizer/isatty      [no test files]
?       github.com/github/git-sizer/meter       [no test files]
?       github.com/github/git-sizer/sizes       [no test files]
0
```

So now I do `git init` in my packaging script, but it would be neat if this worked out of the box.
I have a largish bare repo with Git LFS installed (SVN to Git migration):

```console
proj.git (BARE:master) $ git-sizer
Processing blobs: 1107392
Processing trees: 178226
Processing commits: 29412
Matching commits to trees: 29412
Processing annotated tags: 0
Processing references: 24
| Name                         | Value     | Level of concern               |
| ---------------------------- | --------- | ------------------------------ |
| Overall repository size      |           |                                |
| * Blobs                      |           |                                |
|   * Total size               |  12.8 GiB | *                              |
|                              |           |                                |
| Biggest objects              |           |                                |
| * Trees                      |           |                                |
|   * Maximum entries      [1] |  1.96 k   | *                              |
| * Blobs                      |           |                                |
|   * Maximum size         [2] |   113 MiB | ***********                    |
|                              |           |                                |
| Biggest checkouts            |           |                                |
| * Number of directories  [3] |  13.3 k   | ******                         |
| * Maximum path depth     [4] |    18     | *                              |
| * Maximum path length    [5] |   232 B   | **                             |
| * Number of files        [6] |   910 k   | ******************             |
| * Total size of files    [7] |  3.37 GiB | ***                            |
```

I've written a little `git lfs ls-file` helper [git_lfs_calculate_size_by_type.py](https://gist.github.com/mloskot/a648d11468f56e3b7a4f3ffb5fe7a9c0) which reports for `proj.git` repo this:

```console
Git LFS objects summary:
.lib:   count: 1111     size: 8764.66 MB
.dll:   count: 749      size: 1427.98 MB
.pdb:   count: 612      size: 2814.09 MB
.exe:   count: 786      size: 2005.72 MB
.zip:   count: 24       size: 1153.65 MB
Total:  count: 3282     size: 16166.11 MB
```

Does the latter `16166.11 MB` relate to the former `12.8 GiB` in any way?
Or, is the _grand_ total of the repo, Git and Git LFS objects, a sum of the two figure?

This adds the explanation given in https://github.com/github/git-sizer/issues/35#issuecomment-379434713 by @mhagger to include some more details of what the provided size values for total size mean an what purpose they can be used for.

See also: Issue #35
For automation purposes, it would be a great feature to be able to analyze repositories and get a machine readable exit code that states that critical issues were found.

One way is to directly have --critical set the exit code or add another flag that does that if critical issues were found.

Thanks for creating this great tool.

Git objects reachable only from `refs/notes/` are peculiar and not likely to be checked out, so probably it would be better not to include them for the items under "biggest checkouts". OTOH it probably *does* make sense to include them in the other statistics.

Are there other reference namespaces in common use that should get similar special treatment?
