# Repro

Here's my repro case:
https://jsfiddle.net/sethwieder/L46en8b2/40/

### Expected
We're passing in an object as the input and expected it to denormalize nested objects based on the provided schema.

### Actual
The output duplicate the same item for each index in the input array.


# Context
This used to work in 3.2.3, but no longer works as of 3.2.4.

It's unclear to me if this is even correct usage of denormalize(), as the docs just say:
"the normalized result that should be de-normalized. Usually the same value that was given in the result key of the output of normalize." - is this expected to only work with IDs as inputs?

It's also unclear from the [tag changelog](https://github.com/paularmstrong/normalizr/compare/v3.2.3...v3.2.4) what exactly caused this change in behavior and if it's expected or not

fix #427

# Problem

Project in examples/redux does not run #427

Babel was updated to 7.
Refs #377, #318

I think it's necessary to upgrade babel in examples too.

# Solution

This is work in progress right now.

I just upgraded modules and copied babel configs.

But it’s still has an issue with module importing.
```
➜  redux git:(master) ✗ yarn start
yarn run v1.19.2
$ babel-node ./
/PATH/TO/normalizr/src/index.js:1
import * as ImmutableUtils from './schemas/ImmutableUtils';
^^^^^^

SyntaxError: Cannot use import statement outside a module
    at Module._compile (internal/modules/cjs/loader.js:895:18)
```


# TODO

- [ ] Fix import problem described in above.
- [ ] Add & update tests
- [ ]  Ensure CI is passing (lint, tests)
- [ ]  Update relevant documentation

Maybe it's nice to check validity of code in examples using CI.
# Problem

When following the instructions in the README in the redux example project, a crash occurs.

**Input**

Here's how I'm using normalizr:
clone this repo
run yarn in the root dir
run yarn in the examples/redux dir
run yarn start

**Output**

Here's what I expect to see when I run the above:
An inquirer prompt.

Here's what I _actually_ see when I run the above:
```
> normalizr-redux-example@0.0.0 start /home/daffodil11/in-part-dev/normalizr/examples/redux
> babel-node ./

/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babel-core/lib/transformation/file/index.js:600
      throw err;
      ^

SyntaxError: /home/daffodil11/in-part-dev/normalizr/src/index.js: Unexpected token (69:71)
  67 |   if (!cache[schema.key][id]) {
  68 |     // Ensure we don't mutate it non-immutable objects
> 69 |     const entityCopy = ImmutableUtils.isImmutable(entity) ? entity : { ...entity };
     |                                                                        ^
  70 | 
  71 |     // Need to set this first so that if it is referenced further within the
  72 |     // denormalization the reference will already exist.
    at Parser.pp$5.raise (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:4246:13)
    at Parser.pp.unexpected (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:1627:8)
    at Parser.pp$3.parseIdentifier (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:4122:10)
    at Parser.pp$3.parsePropertyName (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3945:103)
    at Parser.pp$3.parseObj (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3862:12)
    at Parser.pp$3.parseExprAtom (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3555:19)
    at Parser.pp$3.parseExprSubscripts (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3331:19)
    at Parser.pp$3.parseMaybeUnary (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3311:19)
    at Parser.pp$3.parseExprOps (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3241:19)
    at Parser.pp$3.parseMaybeConditional (/home/daffodil11/in-part-dev/normalizr/examples/redux/node_modules/babylon/lib/index.js:3218:19)
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! normalizr-redux-example@0.0.0 start: `babel-node ./`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the normalizr-redux-example@0.0.0 start script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
```

**Context**
Tested on:
openSUSE Tumbleweed, Node 10.16.3, yarn 1.19.1
MacOS High Sierra, node: v10.16.3 , yarn: 1.19.1
I need to be able to retrieve the position (index) of an id (item) on an normalized array. I know I can do this externally, but I wanted to know if this library supports it somehow.

I couldn't find it anything of the sorts in the docs

### Data
In my use case I have the following (simplified) data:
```javascript
[
  { id: "10", value: 1 },
  { id: "20", value: 2 },
  { id: "30", value: 3 },
  { id: "40", value: 4 },
];
```

and I want to achieve the following:
```javascript
{
  entities: {
    indexes: { // or other similar name
      "10": 0,
      "20": 1,
      "30": 2,
      "40": 3,
    },
    items: {
      "10": { id: "10", value: 1 },
      "20": { id: "20", value: 2 },
      "30": { id: "30", value: 3 },
      "40": { id: "40", value: 4 },
    },
  },
  result: ["10", "20", "30", "40"],
}
```
As a note: I could not make a value belong to two schemas at the same time, but that's fine, I think I can achieve this by calling `normalize` twice with different schemas, so this is a non issue

### If not supported

Is there a way to get the "index" of an item inside it's parent during the normalization process?

I am not familiar with the code base, so I am sorry if I misunderstood something.
https://github.com/paularmstrong/normalizr/blob/df459545714ecd3cfb4bafe0f7010a012b25f716/src/schemas/Array.js#L21

Here: I think that passing index as `key` parameter would solve my problem, but also introduce some backward incompatible changes. Maybe control it via a flag or something?

So someone could do the following:

```javascript
const indexes = new schema.Entity("indexes", {}, { 
  processStrategy: (_value, _parent, key) => key
});
const normalized = normalize(data, [indexes]);
```
<!--
Thank you so much for contributing to open source and the Normalizr project!
-->

# Problem

In some cases I would like to denormalize a structure with a list of Ids instead of a list of subobjects (reasons could be to limit fetched data). When i normalize this structure the normalization works, I am left with the entity ids, but there is no way to create stubs for the entities itself, which I find ok since there could be an instance of the same object somewhere else in the structure.

But when denormalizing this I will get back an array with undefined items. 

# Solution

A possible solution to this could be to add a possibility to add a fallbackStrategy option to the EntitySchema where we could write our own fallback method for denormalization.
# TODO

- [x] Add & update tests
- [x] Ensure CI is passing (lint, tests, flow)
- [ ] Update relevant documentation

<!--
When trying to solve more solutions with Normalizr, please keep in mind some of the following goals of the package:
* Be lightweight: small package size (single-digit KiBs, gzipped)
* Be easy: too many options in an API can become confusing
* Be clear: the intended purpose of every method should be as obvious as possible
* Is it easy to do this in "userland"? Would it be better off done there?
-->

# Problem

In some cases I would like to denormalize a structure with a list of Ids instead of a list of subobjects (reasons could be to limit fetched data). When i normalize this structure the normalization works, I am left with the entity ids, but there is no way to create stubs for the entities itself, which I find ok since there could be an instance of the same object somewhere else in the structure.

But when denormalizing this I will get back an array with undefined items. 

# Solution

A possible solution to this could be to add a possibility to add a fallbackStrategy option to the EntitySchema where we could write our own fallback method for denormalization.

I would be glad to create a pull request for this.
<!--
Thank you so much for contributing to open source and the Normalizr project!
-->
# Problem
Applications using webpack or other libraries using rollup can't take full advantage of es modules when the babel runtime helpers are just copied to every file. Including this doesn't change a thing about the non-es bundles but potentially saves great bundle sizes.

# Solution

This does add @babel/runtime as a dependency to ensure it's on the node path in case they are using es modules. For non-es builds it will simply be ignored so no problem. Most of the time if they are also using @babel/runtime the packager will hoist them to the same version if they can match. Worst case scenario is there are two versions which degrades bundle size to where it was previously.

# TODO

- [ ] Add & update tests
- [x] Ensure CI is passing (lint, tests, flow)
- [x] Update relevant documentation

Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/paularmstrong/normalizr/network/alerts).

</details>
<!--
When trying to solve more solutions with Normalizr, please keep in mind some of the following goals of the package:
* Be lightweight: small package size (single-digit KiBs, gzipped)
* Be easy: too many options in an API can become confusing
* Be clear: the intended purpose of every method should be as obvious as possible
* Is it easy to do this in "userland"? Would it be better off done there?
-->

# Problem

The `processStrategy` option is available for `Entity` schemas but not `Object` schemas.

I have an `Object` schema which I'd like to do some pre-processing on.

I can of course do this myself after the `normalize` function has been ran, but ideally this processing would be done everywhere this `Object` schema is referenced, so I want the processing to live with the schema.

Example:

``` ts
const userSchema = new schema.Entity('users');
const myObjectSchema = new schema.Object({ user: userSchema });

const denormalized = { user: { id: 1 } };

const result = normalize(denormalized, myObjectSchema);
```

The normalized value will look like:

``` ts
const normalized = { user: 1 };
```

However, I want the normalized value to look like:

``` ts
const normalized = { userId: 1 };
```

That is, the `user` property has been renamed to `userId`.

# Solution

`Object` should accept a `processStrategy` option like `Entity` does.

``` ts
const myObjectSchema = new schema.Object(
  { user: userSchema },
  {
    processStrategy: (value, parent, key) => {
      const copy = { ...value };
      copy.userId = copy.user.id;

      return copy;
    }
  }
);
```

I can raise a PR for this, if you agree.

Related:
- https://github.com/paularmstrong/normalizr/issues/181
- https://github.com/paularmstrong/normalizr/issues/315
<!--
Thank you so much for contributing to open source and the Normalizr project!
-->
# Problem

Reinstates https://github.com/paularmstrong/normalizr/pull/159, which [was unfortunately lost when v3 was released](https://github.com/paularmstrong/normalizr/issues/130#issuecomment-285012859).

Fixes https://github.com/paularmstrong/normalizr/issues/413

Related: https://github.com/paularmstrong/normalizr/issues/130

I will update documentation once the code side of things has been approved.

/cc @paularmstrong @jgutta @fxck @joewestcott

# TODO

- [x] Add & update tests
- [x] Ensure CI is passing (lint, tests, flow)
- [ ] Update relevant documentation
