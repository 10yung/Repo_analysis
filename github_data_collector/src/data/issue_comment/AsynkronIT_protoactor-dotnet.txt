When we want (under the same process execution time) to reset & reuse an already used remote.
Under our usage of Proto-Actor this FIX a bug.
You may remove comments if you wish, while merging back on your repo side if you validate the PR.
Thanks
Hello,
I'm trying to use Proto.Actor (0.2.0) in a WPF application (targeting .net core 3.0).  I created a RootContext in the app startup and spawn an actor.  When the actor gets the Started message, it arrives on a thread pool thread (thread 4) as expected.  Then I spawn another actor ".WithDispatcher(new Proto.Mailbox.CurrentSynchronizationContextDispatcher())".  That actor receives Started on the UI thread (thread 1) as expected, then sends a message using "context.Send" to the first actor.  The first actor receives the message on the UI thread instead of thread pool.

When I receive the message and inspect the context in the debugger, it shows context._props.Dispatcher is ThreadPoolDispatcher, yet Thread.CurrentThread shows that we're in the main thread (thread 1)

Any idea why the first actor would receive on the UI thread, and not the thread pool?  I cannot seem to figure out how to make actors receive messages on the thread pool.  I've even tried, "WithDispatcher(new Proto.Mailbox.ThreadPoolDispatcher())", but that has no effect.

Basically, it seems any message sent from a "UI" actor always gets received on the UI regardless of the dispatcher the receiver was spawned with.
I wonder if `Props `class should be actually sealed. In my case I have some custom spawn logic where it would be nice to intercept `Props ` when using `ISpawnContext`. I would like to narrow down my Props just to specific class type, so to have something like this: 

`class MyProps<TActor> : Props where TActor : IActor`

So when I intercept Spawn call I could cast props against `MyProps` to see if my custom logic can be executed and to get custom parameter.
So I can process the response on the same scope of the sender/caller.
```
pid.Tell(message, delegate {
  // oncomplete
});
```
or in Go:
```
context.Send(pid, message, func() {
 // oncomplete
})
```

the problem I was facing was, I'm using Unity3D on the caller/client, and Go on the server side. From the server side I can't contact the client if they doesn't use real IP, which leads to few solution:
1. whether callback exists
2. create my own proxy using other protocol (TCP or others) which have 2nd Actor that receive the response of the 1st Actor and send back to the client
I am considering using headers to store a bearer token for the user who is responsible for a particular message. I have used a similar approach in Orleans and it works well. Each Actor/Grain can check the token to see if the user is authorised to perform the action or enable features. 

I am wondering if there is a different way to handle this in the protoactor world?

It would be very useful to have these headers available to the Started message too so there is context around who started the actor and a decision can be made about where to retrieve persisted data from. It seems at least for Actors spawned by Cluster.GetAsync, there isn't a way to pass headers. would it be acceptable to pass any headers that are available on the sender context by default or is this an anti-pattern in your opinion?
I made a simple test kit to help me test some of my actors. It might not be perfect but i thought it might be a good start. It's very similar to the Akka.net kit in terms of what you can test with it, although some names might be slightly different
Hi there!

Would you appreciate if I create some F# examples?

My personal target is to learn photo.actor and popularize wonderful programming language.
Already learned that actor goes to the endless Restart loop on unhandled errors.
I recently started looking into what's upcoming in .NET Core 3.0, in particular the new ability to host gRPC services within ASP.NET Core. I did a small request/reply PoC with a normal Proto.Remote client application and an ASP.NET-hosted server application (see https://github.com/cpx86/protoactor-dotnet/tree/aspnetcore3.0-grpc) and while I did get it to work, there are a few things which don't feel natural.

A few thoughts that occured to me that might be interesting to discuss:
1. The biggest pain of all is the way Proto.Remote is designed. `Remote.Start` is not usable at all since it will spin up a separate gRPC server. One thing this highlights is the fact that the concerns of hosting Proto.Remote and of wiring it up are completely mixed into the static `Remote` class. Perhaps we should pick up #411 again and see how we can simplify the design as well as make it natural/easy to use in the .NET Core hosting infrastructure?
2. The static `Proto.Log` class goes very much against the typical way of handling logging, mainly due to the fact that it's static and not injected. As I recall we were never quite happy with this design originally, but went with it because going the injection route might force too much of a change on the rest of the API surface.
3. The `Microsoft.Extensions.*` packages do seem to be part of the "core infrastructure" of .NET Core nowadays. We made the decision some time ago that we did not want to depend on those in Proto.Actor in order to keep it as lightweight as possible. Is this a decision we might want to re-evaluate given how the landscape looks today?

Is the .Net version of Proto.Actor dead? The reason I ask:

* Gitter chat goes unresponded.
* An issue opened here almost a month ago goes unresponded.
* No commits in months.
* Large swaths of documentation pages are skeletons. 
* 0 Releases

Orleans community seems vibrant in comparison, but it's also very "heavy" compared to Proto.Net.

Akka is out of the question for us,a s the system screams for virtual actors. I've have a Love-Hate relationship with Service Fabric: I love to hate it. ;-)

I plan on evaluating both Proto.Net and Orleans, but if this is dead and none of the original contributors are planning on coming back to it, I'll probably bail...
`
        public async Task ReceiveAsync(IContext context)
        {
            throw new Exception();
        }`

when exception occurs on the IActor.ReceiveAsync(IContext context) 

how can I catch this exception or message?


context.Message deliver only restarting, no reason

thanks