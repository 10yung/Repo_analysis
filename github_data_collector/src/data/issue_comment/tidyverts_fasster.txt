Hi @mitchelloharawild,

When using a switching model, both stream() and forecast() parse the new_data in a way that is inconsistent with the already trained model. 

Consider the following model:
```r
elec_tr <- tsibbledata::vic_elec %>%
  filter(
    yearmonth(Time) == yearmonth("2012 Mar")
  ) %>% 
  mutate(WorkDay = wday(Time) %in% 2:6 & !Holiday)

elec_fit <- elec_tr %>%
  model(
    fasster = fasster(Demand ~ 
      WorkDay %S% (trig(48, 16) + poly(1)) + Temperature + I(Temperature^2)
    )
  )

elec_fit
```
It is trained on the boolean switch WorkDay, however if the new_data input is too short, like in this case:
```r
elec_update <- tsibbledata::vic_elec %>%
  filter(
    yearmonth(Time) == yearmonth("2012 Apr")
  ) %>% 
  head(2) %>%
  mutate(WorkDay = wday(Time) %in% 2:6 & !Holiday)

elec_fit_upd <- elec_fit %>% stream(elec_update)
elec_fit_upd
```
then internal DLM states and X will have wrong dimensions as they don't account for unseen states (say, holidays/weekends when the data contains only weekdays):
```
Error in rbind(object$dlm$X, X) : 
  number of columns of matrices must match (see arg 2)
Calls: <Anonymous> ... .f -> stream.mdl_ts -> stream -> stream.FASSTER -> rbind
```

Just to try out the streaming functionality, I fixed it by patching stream() to always use longer new_data, but then tail()'ing X/est/residuals when needed. Obviously, this is extremely ugly.

Not sure how to fix it at the moment. Am I missing something? If you have any ideas to share, I'd love to try fixing it and submitting a PR.

Thanks!
- [x] augment
- [ ] tidy
- [ ] glance
Potential directions include loess and sampling techniques.
Automatic model specification should also be considered with this.
Ideally, improving speed, functionality, and object structures.
Potential UI:
```r
FASSTER(y ~ poly(1) + G %S% (trig(12)) + (G == "A") %only% (x + z))
```