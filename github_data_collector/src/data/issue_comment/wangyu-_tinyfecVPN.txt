环境： Windows 10 64bit+ Virtual Box v6.0.14 +Openwrt (intel 32bit)--v18.06.5
Tinyfec版本：intel 32位版本，git version: 79d5e4dee8    build date: Aug 20 2018 12:20:44
使用top发现 tinyfecvpn cpu占用100%，cpu占用和流量关系不大，静默40-50kbps或看测速iperf3跑满时，cpu都是100%。 
CPU:  62% usr  37% sys   0% nic   0% idle   0% io   0% irq   0% sirq
Load average: 1.02 1.01 1.00 2/49 4033
  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND
 1755     1 root     R    18092   7% 100% /usr/tinyfecvpn/tinyvpn_x86 -c -r serverip:serverport -f 10:10 --sub-net 10.222.20.0 --tun-dev tun100  --keep-reconnect   -k password

使用strace -p tinyfecPID ,日志如下， 不停的访问/etc/localtime，
从ubuntu复制了zoneinfo文件夹至 openwrt的/usr/share目录下，并将Shanghai链接到/etc/localtime
 ls -ali localtime， 重启后，tinyfec仍占用CPU 100%， openwrt WEB页面时区也设置成了上海。
    142 lrwxrwxrwx    1 root     root            33 Dec  9 19:23 localtime -> /usr/share/zoneinfo/Asia/Shanghai

stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=3614188}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=3742794}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=4561055}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=4687123}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=5491653}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=5614414}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=6370095}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=6493283}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=7232297}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=7355754}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=8047434}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=8170207}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=8874063}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=8996961}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=9666432}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=9898250}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=10618593}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=10762934}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=11432130}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=11554750}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_size=528, ...}) = 0
write(1, "\33[32m[2019-12-24 14:31:22][INFO]"..., 56) = -1 EPIPE (Broken pipe)
--- SIGPIPE {si_signo=SIGPIPE, si_code=SI_USER, si_pid=1755, si_uid=0} ---
sigreturn({mask=[]})                    = -1 EPIPE (Broken pipe)
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=12258771}) = 0
epoll_wait(3, [], 64, 0)                = 0
clock_gettime(CLOCK_MONOTONIC, {tv_sec=66583, tv_nsec=12381448}) = 0
time([1577169082 /* 2019-12-24T14:31:22+0800 */]) = 1577169082 (2019-12-24T14:31:22+0800)
stat64("/etc/localtime", {st_mode=S_IFREG|0644, st_s


For English speaking user：
https://github.com/wangyu-/UDPspeeder/wiki/Issue-Guide

中文用户请看：
https://github.com/wangyu-/UDPspeeder/wiki/发Issue前请看
(否则Issue可能被忽略，或被直接关掉)

我想用systemd管理服务。自己写了个service文件。我直接执行启动命令可以启动tinyfecvpn，但是我写进service以后用systemctl启动会被selinux拒绝。我也试过用setcap cap_net_admin+ep ./tinyvpn_amd64，但是没用。只能关掉selinux使用嘛？？

tinyfecvpn.service文件
```
[Unit]
Description=tinyfecvpn
After=network-online.target network-online.target

[Service]
Type=simple
User=root
Group=root
ExecStart=/tinyvpn_amd64 -s -l0.0.0.0:4096 -f20:10 -k "passwd" --sub-net 10.22.22.0

[Install]
WantedBy=multi-user.target
```

错误日志

```
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]argc=8 /tinyvpn_amd64 -s -l0.0.0.0:4096 -f20:10 -k passwd --sub-net 10.22.22.0
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]parsing address: 0.0.0.0:4096
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]its an ipv4 adress
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]ip_address is {0.0.0.0}, port is {4096}
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]sub_net 10.22.22.0
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]jitter_min=0 jitter_max=0 output_interval_min=0 output_interval_max=0 fec_timeout=8 fec_mtu=1250 fec_queue_len=200 fec_mode=0
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]fec_str=20:10
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]fec_inner_parameter=1:10,2:10,3:10,4:10,5:10,6:10,7:10,8:10,9:10,10:10,11:10,12:10,13:10,14:10,15:10,16:10,17:10,18:10,19:10,20:10
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][INFO]using interface tun534
Nov 21 07:05:15 centos8 tinyvpn_amd64[15856]: [2019-11-21 07:05:15][FATAL]open /dev/net/tun failed
```

audit日志

```
type=AVC msg=audit(1574339380.860:351): avc:  denied  { ioctl } for  pid=16014 comm="tinyvpn_amd64" path="/dev/net/tun" dev="devtmpfs" ino=21999 ioctlcmd=0x54ca scontext=system_u:system_r:init_t:s0 tcontext=system_u:object_r:tun_tap_device_t:s0 tclass=chr_file permissive=1


type=AVC msg=audit(1574339380.860:351): avc:  denied  { create } for  pid=16014 comm="tinyvpn_amd64" scontext=system_u:system_r:init_t:s0 tcontext=system_u:system_r:init_t:s0 tclass=tun_socket permissive=1


type=SYSCALL msg=audit(1574339380.860:351): arch=x86_64 syscall=ioctl success=yes exit=0 a0=5 a1=400454ca a2=7ffdab44fa50 a3=7f44491bf580 items=0 ppid=1 pid=16014 auid=4294967295 uid=0 gid=0 euid=0 suid=0 fsuid=0 egid=0 sgid=0 fsgid=0 tty=(none) ses=4294967295 comm=tinyvpn_amd64 exe=/tinyvpn_amd64 subj=system_u:system_r:init_t:s0 key=(null)ARCH=x86_64 SYSCALL=ioctl AUID=unset UID=root GID=root EUID=root SUID=root FSUID=root EGID=root SGID=root FSGID=root
```

This will integrate UDPSpeeder PR: https://github.com/wangyu-/UDPspeeder/pull/227
如题，我想在校园网中穿透dhcp 67端口达到无限流量上网，但这个好像不太行？
找了很多教程，测试了很多次，都出问题。

在阿里国际云试用机上富强给ps4加速，遇到点问题请教各位大哥。

某服务端口12345，安全组规则添加12345和7777的tcp，udp入站允许，
某客户端访问本地3333端口

客户端运行在路由上。
#UDPspeeder+udp2raw
#server
./udpspeeder/speederv2_amd64 -s -l0.0.0.0:28900 -r127.0.0.1:12345 -f2:4 --mode 0 -q1
./udp2raw/udp2raw_amd64 -s -l0.0.0.0:7777 -r127.0.0.1:28900 -a -k "passwd" --raw-mode faketcp
#client
./udp2raw/udp2raw_arm -c -l0.0.0.0:28900 -r11.22.33.44:7777 -a -k "passwd" --raw-mode faketcp
./udpspeeder/speederv2_arm -c -l0.0.0.0:3333 -r127.0.0.1:28900 -f2:4 --mode 0 -q1

上面的方案连不通，我单独运行udpspeeder或udp2raw，也连不通，
启动upd2raw时，服务端日志貌似有显示服务端和客户端连接成功，可是某服务连不上。

#tinyv*p&n+udp2raw+tinyPortMapper
#server
./tinyv*p&n/tinyv*p&n_amd64 -s -l0.0.0.0:3322 -f2:4 --sub-net 10.22.22.0 
./udp2raw/udp2raw_amd64 -s -l0.0.0.0:7777  -r127.0.0.1:3322   -k "passwd" --raw-mode faketcp   --cipher-mode xor  -a
#client
./udp2raw/udp2raw_arm -c -l0.0.0.0:3333  -r11.22.33.44:7777 -k "passwd" --raw-mode faketcp   --cipher-mode xor  -a 
./tinyv*p&n/tinyv*p&n_arm -c -r127.0.0.1:3333 -f2:4 --sub-net 10.22.22.0
./tinymapper/tinymapper_arm -l0.0.0.0:3333 -r10.22.22.1:12345 -t -u

上面的方案可以正常连通，但是tinyv*p&n不支持一对多，我跟朋友一起加速ps4用的，听说是udpspeeder支持一对多。

请问问题出在哪？
server:

./root/tinyvpn_amd64 -s -l 0.0.0.0:8099 --sub-net 10.22.22.0 -f20:10 -k "passwd" --report 10 >2.txt
./root/udp2raw_amd64 -s -l0.0.0.0:9977 -r 127.0.0.1:8099 -k "passwd" --raw-mode faketcp -a > 1.txt

client:
./root/udp2raw_amd64 -c -r11.22.33.44:9977 -l 0.0.0.0:8099 --raw-mode faketcp -a -k "passwd" > 1.txt
./root/tinyvpn_amd64 -c -r0.0.0.0:8099 --sub-net 10.22.22.0 -f20:10 -k "passwd" --keep-reconnect --report 10 >2.txt

服务器配置 kvm 2h 4g 10G us  cn2-gia vps.
客户机配置 hyper-v 4h 1g 100mb 电信cn2
下面是客户机直接测试外网传输速率
iperf3 -c  11.22.33.44

`root@tripodcloud_vps_1224690:~# iperf3 -s
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------
Accepted connection from 88.88.888.88, port 42868
[  5] local 11.22.33.44 port 5201 connected to 88.88.88.88 port 42870
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-1.00   sec  43.8 KBytes   358 Kbits/sec
[  5]   1.00-2.00   sec   291 KBytes  2.38 Mbits/sec
[  5]   2.00-3.00   sec   356 KBytes  2.91 Mbits/sec
[  5]   3.00-4.00   sec   320 KBytes  2.62 Mbits/sec
[  5]   4.00-5.00   sec   334 KBytes  2.73 Mbits/sec
[  5]   5.00-6.00   sec   314 KBytes  2.58 Mbits/sec
[  5]   6.00-7.00   sec   329 KBytes  2.70 Mbits/sec
[  5]   7.00-8.00   sec   357 KBytes  2.92 Mbits/sec
[  5]   8.00-9.00   sec   269 KBytes  2.21 Mbits/sec
[  5]   9.00-10.00  sec   288 KBytes  2.36 Mbits/sec
[  5]  10.00-10.20  sec  62.9 KBytes  2.62 Mbits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  5]   0.00-10.20  sec  2.97 MBytes  2.45 Mbits/sec    1             sender
[  5]   0.00-10.20  sec  2.90 MBytes  2.38 Mbits/sec                  receiver
-----------------------------------------------------------
Server listening on 5201
-----------------------------------------------------------

`


下面是挂上vpn测试的tcp速率

Server listening on 5201
-----------------------------------------------------------
Accepted connection from 10.22.22.2, port 53222
[  5] local 10.22.22.1 port 5201 connected to 10.22.22.2 port 53224
[ ID] Interval           Transfer     Bandwidth
[  5]   0.00-1.00   sec  0.00 Bytes  0.00 bits/sec
[  5]   1.00-2.00   sec  22.0 KBytes   181 Kbits/sec
[  5]   2.00-3.00   sec  13.9 KBytes   114 Kbits/sec
[  5]   3.00-4.00   sec  37.1 KBytes   304 Kbits/sec
[  5]   4.00-5.00   sec  13.9 KBytes   114 Kbits/sec
[  5]   5.00-6.00   sec  13.9 KBytes   114 Kbits/sec
[  5]   6.00-7.00   sec  33.6 KBytes   276 Kbits/sec
[  5]   7.00-8.00   sec   103 KBytes   846 Kbits/sec
[  5]   8.00-9.00   sec  40.6 KBytes   333 Kbits/sec
[  5]   9.00-10.00  sec  54.5 KBytes   447 Kbits/sec
[  5]  10.00-11.00  sec   161 KBytes  1.32 Mbits/sec
[  5]  11.00-11.02  sec  0.00 Bytes  0.00 bits/sec
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Retr
[  5]   0.00-11.02  sec   602 KBytes   448 Kbits/sec    1             sender
[  5]   0.00-11.02  sec   494 KBytes   367 Kbits/sec                  receiver


 下面是测试udp的速率

`Server listening on 5201
-----------------------------------------------------------
Accepted connection from 10.22.22.2, port 53226
[  5] local 10.22.22.1 port 5201 connected to 10.22.22.2 port 47894
[ ID] Interval           Transfer     Bandwidth       Jitter    Lost/Total Datagrams
[  5]   0.00-1.00   sec  97.5 KBytes   798 Kbits/sec  4.932 ms  0/84 (0%)
[  5]   1.00-2.00   sec   129 KBytes  1.06 Mbits/sec  3.619 ms  0/111 (0%)
[  5]   2.00-3.00   sec   128 KBytes  1.05 Mbits/sec  3.997 ms  0/110 (0%)
[  5]   3.00-4.00   sec   128 KBytes  1.05 Mbits/sec  3.013 ms  0/110 (0%)
[  5]   4.00-5.00   sec   129 KBytes  1.05 Mbits/sec  3.895 ms  0/111 (0%)
[  5]   5.00-6.00   sec   126 KBytes  1.04 Mbits/sec  3.409 ms  0/109 (0%)
[  5]   6.00-7.00   sec   128 KBytes  1.05 Mbits/sec  3.325 ms  0/110 (0%)
[  5]   7.00-8.00   sec   130 KBytes  1.06 Mbits/sec  3.140 ms  0/112 (0%)
[  5]   8.00-9.00   sec   128 KBytes  1.05 Mbits/sec  3.644 ms  0/110 (0%)
[  5]   9.00-10.00  sec   128 KBytes  1.05 Mbits/sec  4.308 ms  0/110 (0%)
[  5]  10.00-10.24  sec  31.3 KBytes  1.07 Mbits/sec  3.459 ms  0/27 (0%)
- - - - - - - - - - - - - - - - - - - - - - - - -
[ ID] Interval           Transfer     Bandwidth       Jitter    Lost/Total Datagrams
[  5]   0.00-10.24  sec  1.25 MBytes  1.02 Mbits/sec  3.459 ms  0/1104 (0%)
`


是我哪里设置不对吗？ 能帮忙看一下吗？谢谢！！！
已查看
https://github.com/wangyu-/UDPspeeder/wiki/发Issue前请看
(否则Issue可能被忽略，或被直接关掉)

在 tinyvpn client -> udp2raw client -> udp2raw server -> tinyvpn server 场景下
故意重启或者停止再开启 tinyvpn server ， 会导致 tinyvpn client 服务挂掉
```
tinyvpn_amd64[3472]: [2019-04-25 03:39:26][INFO]jitter_min=0 jitter_max=0 output_interval_min=0 output_interval_max=0 fec_ti...ec_mode=0
tinyvpn_amd64[3472]: [2019-04-25 03:39:26][INFO]fec_str=2:4
tinyvpn_amd64[3472]: [2019-04-25 03:39:26][INFO]fec_inner_parameter=1:4,2:4
tinyvpn_amd64[3472]: [2019-04-25 03:39:26][INFO]using interface tun643
tinyvpn_amd64[3472]: [2019-04-25 03:39:55][INFO]connection accepted by server
tinyvpn_amd64[3472]: [2019-04-25 03:41:25][FATAL]server restarted or switched to handle another client,exited. maybe you nee...reconnect
```
目前暂时用 **systemctl** 的 **Restart=always** 参数解决。 
能否在 tinyvpn client 端加上断线重连机制， udp2raw 是可以自动重连， 但无法带动 tinyvpn 重连。 

For English speaking user：
https://github.com/wangyu-/UDPspeeder/wiki/Issue-Guide

中文用户请看：
https://github.com/wangyu-/UDPspeeder/wiki/发Issue前请看
(否则Issue可能被忽略，或被直接关掉)

For English speaking user：
https://github.com/wangyu-/UDPspeeder/wiki/Issue-Guide

中文用户请看：
https://github.com/wangyu-/UDPspeeder/wiki/发Issue前请看
(否则Issue可能被忽略，或被直接关掉)

并且也无法使用。。服务端就一个new conv 然后就什么日志都没了。。
请教下大神，使用这里的已编译版本udp2raw和tinyvpn，ip地址就被解释成server13.tinyhappymoment.com，这是正常的吗？

