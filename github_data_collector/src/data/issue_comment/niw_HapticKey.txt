Hi, I like the app and have been using it for quite some time now (about 2 or 3 weeks) and I just realised that a Volume control for the Sound Feedback option could be a great addition.

Thank you so much for the great app :)


<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/niw/haptickey/28)
<!-- Reviewable:end -->

I have a feeling that the vibration would feel really nice if every physical keyboard press triggers a vibration. Also, if we are able to choose the audio sound we can make our physical keys make interesting noises like old school type writer or high precision clickity clack keyboards. 
While debugging the application on MacBook Pro 2018 (#23), there are reports that haptic feedback is weaker on MacBook Pro 2018.
Need to investigate how it’s weak and what solutions can be taken.
When updating the application using “Check for updates…” menu (by using Sparkle,) after updating the application binary, system asks permission for Accessibility in Privacy settings again, even if it’s previously approved and the application appears in the list with a checkmark.

For short-term solution, to workaround this behavior, toggle the checkmark and enable HapticKey again from the menu item.
Currently there are 2 options to trigger haptic feedback;

1. _All Taps on Touch Bar_
2. _Esc and F1, F2, etc. keys_

The first Isn't ideal as it means you get fedback when you tap the bar even if there's no button there

The second Is quite limiting, as app-specific Touch Bar buttons do not trigger the haptics

Is it possible to add an option for _Taps on any Touch Bar buttons_?

This would trigger haptics whenever the user touches a button on the touch bar, but not when they tap an empty area of the bar.

* Add new delegate callback that can take `CGEvent` directly without converting to `NSEvent`
* Check if the event is for Touch Bar or not by using undocumented `kCGEventFieldTouchContextID` before converting `NSEvent` to reduce `eventWithCGEvent:` call.
Every mouse event causes the `EventTapCallback` to be called, which over time results in a constant 1-2% CPU usage.

I did a basic time profile and found that the main culprit is calling `[NSEvent eventWithCGEvent:eventRef]`, which seems extremely slow for something that I assumed would be "toll-free". There are a few things I'm going to try to reduce CPU usage in the callback, but I was wondering if you had a preferred approach.

<img width="887" alt="screen shot 2018-02-17 at 11 25 04 am" src="https://user-images.githubusercontent.com/518687/36344878-c149b8a0-13d5-11e8-8b61-5f858404808d.png">
Since flashing screen is a little bit aggressive or confusing because it used for alerting in terms of Accessibility feature on macOS.
Possible solution could be
* Displaying a tapped key name in HUD style
* Shows a indicator around the mouse cursor or text cursor (if exists.)

<img width="398" alt="screen shot 2018-02-03 at 1 32 45 pm" src="https://user-images.githubusercontent.com/518687/35771769-e67a35f4-08e6-11e8-887b-6738a7c1734e.png">

Implements feature discussed in #9:

* Splits macOS system sound into separate files for up/down events
* Allows user to choose a different sound for up/down events (or none)
* Customizable volume
* Live preview when changing sound selection or volume
* Allows user to add/remove their own sound files in Finder. The `00550 wcls`, etc listings aren't there normally, just the two defaults, but I wanted to show how custom sound files would be displayed. 
* Localizable interface strings

Questions:

> And... it's very common comment in open source world though, it would be really appreciate if you can use same coding format as the one used on master.

Can you elaborate what you mean by this comment?

I'm sure there are other things that could be cleaned up (like deleting the old system sound player), but I wanted to open this PR for your feedback, as I feel like it's now feature complete. I tried to leave edits to upstream as minimal as possible, and keep all of the new functionality as self-contained as possible.