`./configure` does not exist in the repository. Users need to run `./autogen.sh` in order to generate it.

This PR adds this step in the README file.
I love lnav and it's *so* close to do what I want in viewing log files, however I'm finding its "philosophy" a bit off for my use cases.   It feels like lnav is built for coming at a huge log file and looking for something in particular - e.g. finding some set of interactions in a web log - whereas what I am usually doing is getting a firehose of junk and trying to pare it down and make sense of it while debugging applications.  To that end what I really desperately want is two things:  1) compound filters - e.g. I want to be able to AND / intersect the "in" filters so that I can incrementally make them more stringent.  I know that I could partially achieve this with single filters and regexs but that requires more thought and is harder to edit.  2) I would give anything for a "clear" key and maybe start/stop tailing keys... What I want to do is (logically) remove everything surrounding the stuff I care about and slowly whittle it down.  I know that I can mark lines and there is a hide facility, but it's awkward to use for this and I end up bailing out and using vim to edit the file down.

Please correct me if I'm missing some obvious ways to achieve the effects above. 

(Also, are key bindings coming?  I'd love to add some more vim style movement operations... I am constantly hitting 1G to try to go to the top of the file)

Just food for thought.  Thanks for your work on lnav!

This is causing a crash:

```
"rewriter": ";select :xid || 'bork'"
```
I have a JSON field that appears in several of my log messages, but not all. I don't want to include it in the `line-format` setting, as it would just be noise for 90% of my log messages. However, the places it appear I'd really like to run a transformation on the text. Specifically, the field contains nanoseconds, and I want to display it in a more human-readable format. Is it possible to run transformations on JSON fields that are not part of the format defined in `line-format`? Or optionally, is it possible to define multiple `line-format`s, differentiating between them on either a regex or which fields are present?
I have a server running on UTC, with apps that log UTC dates without a timezone specifier:
```
2019-12-10 21:37:55,685 WARN .....
```
I also have pesky users who report problems in non-UTC, like "4pm in Los Angeles".

I would love to be able to run:
```
TZ='America/Los_Angeles' lnav atlassian-confluence.log
```
and have lnav translate those UTC dates to (in this case) PST.

Sometimes i'm using lnav over a flaky network connection that gets dropped in the middle of the session. It appears that lnav's internal state isn't being autosaved while running, so when my connection gets dropped I lose things like filter state, marked lines etc. It would save me some frustration if lnav periodically saved its state.
lnav 0.8.5 seems non-linearly slow when running SQL on more than one file. 

Here are two sample files:
````
$ ls -lah /var/log/syslog.{5,6}.gz
-rw-r----- 1 syslog adm 735K Nov  9 10:04 /var/log/syslog.5.gz
-rw-r----- 1 syslog adm 1.6M Nov  8 09:16 /var/log/syslog.6.gz
````
Parsing syslog.5.gz on its own takes 0.887s:
````
$ time TERM=xterm lnav /var/log/syslog.5.gz -n -c ";select * from syslog_log;" >/dev/null

real    0m0.887s
user    0m0.845s
sys     0m0.040s
````
Parsing syslog.6.gz on its own takes 1.978s:
````
$ time TERM=xterm lnav /var/log/syslog.6.gz -n -c ";select * from syslog_log;" >/dev/null

real    0m1.978s
user    0m1.888s
sys     0m0.088s
````
but parsing syslog.5.gz and syslog.6.gz together takes.. 13.7s:
````
$ time TERM=xterm lnav /var/log/syslog.{5,6}.gz -n -c ";select * from syslog_log;" >/dev/null

real    0m13.701s
user    0m13.564s
sys     0m0.124s
````

Another real-world example with access logs:

````
-rw-r-----  1 jturner adm      108M Nov 12 16:57 access.log
-rw-r-----  1 jturner adm      222M Nov 12 01:25 access.log.1
````

 Command | Time
------------ | -----------
time TERM=xterm lnav access.log -n -c ";select * from access_log;" >/dev/null | 6.3s 
time TERM=xterm lnav access.log.1 -n -c ";select * from access_log;" >/dev/null | 12.5s 
time TERM=xterm lnav access.log access.log.1 -n -c ";select * from access_log;" >/dev/null | **4m 13s**
Title says it all, ideally keep an updates LINES in environ table at any resize?
Crash log attached:

[crash-2019-11-05-10-41-50.14461.log](https://github.com/tstack/lnav/files/3825423/crash-2019-11-05-10-41-50.14461.log)

It's not always clear why a file is not matching a log format.  We have some clear diagnostics for the sample lines in a log format, we should do the same when detecting any file.