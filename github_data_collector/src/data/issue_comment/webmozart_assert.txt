Would be nice to be able to use #164 
Currently assertions cannot be used in pure/immutable contexts when running psalm.
This PR aims to add `@psalm-pure` annotations where applicable.
This *should* fix the psalm assertion failure.
All PHP versions < 7.2  are end of life and should no longer be used. It is harmful to support these outdated versions in the future.

Why?

 - PHPUnit cannot be upgraded to 8 and above
 - Newer language features cannot be adopted resulting in bloated or less readable code
 - Users should not be encouraged to build technical debt
Related:

 * [x] https://github.com/vimeo/psalm/issues/2449
 * [x] https://github.com/vimeo/psalm/issues/2450
 * [x] https://github.com/vimeo/psalm/issues/2451
 * [x] https://github.com/vimeo/psalm/issues/2452
 * [x] https://github.com/vimeo/psalm/issues/2456
Hi, before preparing a Pull Request I wanted to know if there is a reason why these are not implemented.

Maybe there is another method to use which I don't see?! ðŸ¤” 

Thanks
I think it would be very useful to have a static class `Valid` that would have the same methods of `Assert`, but instead of throwing an exception when the condition is invalid it would return false.

```
if (!Valid:uuid('test')) {
    return new Response('', 404);
}
```
Many times I want to integrate this library in contexts - taking advantage of its working validation code - where throwing an exception is not desired.

Do you think would that be useful? Or even pertinent to this library scope?
Added ability to provide a custom exception to each method signature. Also added new unit test and updated comments.
The `generate.php` in this PR is really a quick and dirty implementation of a generator and it should not be looked too closely: the final implementation would be re-done almost entirely (though the idea would be kept).

What I want to suggest you for discussion is the `Webmozart\Assert\Extra` class.

In the final implementation I suggest to rename the currently existing `Webmozart\Assert\Assert` to `Webmozart\Assert\Base`, and then `Webmozart\Assert\Extra` to `Webmozart\Assert\Assert` so that it was all transparent for the users.

The final implementation would come with a test that checks that the currently generated version and committed version is identical to the one that would have been generated now should you run `php generate.php`.

The current implementation generates 47 functions out of the list of all `allX` or `nullOrX` functions, and 9 are not supported probably due to possible psalm bugs (need investigation). You can see list of those in the `$temporaryUnsupported` variable.

Thoughts?

/cc @Ocramius
Some assertions call functions that may generate a warning if called with incorrect parameters, e.g. preg_match, strlen.

It would be better if they do not generate a warning when called, but either pass the assertion, or throw the exception.

This can be solved in one of two ways:

* Silence errors using `@` where possible
* Assert the input is of the correct type, and throw an exception when it is not.

The issue with the second type is that it is a theoretical BC break. For example, the user may input an object that can be cast to a string, in which case most functions will do so, in which case it *may* pass the assertion.

Silencing the errors will however not save us from the `TypeErrors` that php 8.0 will start throwing: https://wiki.php.net/rfc/consistent_type_errors.

There is also the current issue of all the `count` related assertions, which do not check if the passed value is countable. So before php 7.2 everything is fine, but after that an warning is generated.

Personally i'm fine with the theoretical BC break, as it isn't really intended behaviour, as it is dependent on the implementation.
