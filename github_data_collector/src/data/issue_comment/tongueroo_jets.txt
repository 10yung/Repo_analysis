## My Environment


| Software         | Version |
| ---------------- | ------- |
| Operating System |   MacOS 10.14.6      |
| Jets             |    2.3.11     |
| Ruby             |     2.5.7    |

---

## Expected Behaviour

I would expect `Time.zone` to return the system's timezone.
```
> Time.zone
 => #<ActiveSupport::TimeZone:0x00007fb0da39f200 @name="Eastern Time (US & Canada)", @utc_offset=nil, @tzinfo=#<TZInfo::DataTimezone: America/New_York>>
```

## Current Behavior

```
> Time.zone
# => nil
```

## Solution Suggestion

My guess is its not being initialized properly?
## Summary

I was checking if I use pry console for debugging. It seems there are no gems like pry-rails. I assume this is because  `Jets::Turbine` currently doesn't support `console` option. See https://github.com/rweng/pry-rails/blob/master/lib/pry-rails/railtie.rb how an external gem can extend the behavior.

## Motivation

For debugging

## Guide-level explanation

<!--
Explain the proposal as if it was already included in the project and you were teaching it to another programmer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- If applicable, provide sample error messages, deprecation warnings, or upgrade guidance.

If this is a small feature, you may omit this section.
-->

## Reference-level explanation

<!--
This is the technical portion of the feature request. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

If you do not know how to answer this, you can omit it. No worries!
-->

## Drawbacks

<!--
Why should we *not* do this?
-->

## Unresolved Questions

<!--
What related issues do you consider out of scope for this feature that could be addressed in the future independently of the solution that comes out of this feature?
-->

## Checklist

<!--
Make sure that you've done all of these.  To mark a checkbox done, replace [ ] with [x]. Or after you create the issue you can click the checkbox.
-->

- [x] Upgrade Jets: Are you using the latest version of Jets? This allows Jets to fix issues fast. There's a `jets upgrade` command that makes this a simple task. There's also an Upgrading Guide: http://rubyonjets.com/docs/upgrading/
- [x] Reproducibility: Are you reporting a bug others will be able to reproduce and not asking a question. If you're unsure or want to ask a question, do so on https://community.rubyonjets.com
- [x] Code sample: Have you put together a code sample to reproduce the issue and make it available?  Code samples help speed up fixes dramatically. If it's an easily reproducible issue, then code samples are not needed. If you're unsure, please include a code sample.

## My Environment

<!-- Please fill out the table below with debugging info to help: -->

| Software         | Version |
| ---------------- | ------- |
| Operating System |     OSX    |
| Jets             |     2.3.5    |
| Ruby             |    2.5.7     |

---

## Expected Behaviour

When a gem is removed from the Gemfile or Gemfile.lock, it is not deployed.

## Current Behavior

When a gem is removed from the Gemfile or Gemfile.lock, it remains in your gems directory and is still deployed.

## Step-by-step reproduction instructions

1. Add a very large gem to your Gemfile (like `bootstrap-sass`)
2. bundle install
3. Deploy the app
4. Remove the gem from your Gemfile
5. bundle install
6. Deploy the app
7. Notice how the the gems directory (`open /tmp/jets/{project_name}/stage/code/vendor/gems/ruby/2.5.0/`) still has the gem inside it.
8. If your lambda package is too large, then it rejects the deploy.

## Solution Suggestion

1. Quick and easy: Offer a "clean" command to clear out the cache
2. If your Gemfile.lock file changes since the last deploy, clean the gem cache
3. Only remove the gems that are not inside your Gemfile.lock

<!--
Hi! Thanks for considering to file a bug with Jets. Please take the time to
answer the basic questions. Please try to be as detailed as possible.
To be sensitive to everyone's time, if not enough details are provided, the
issue may be closed without comment. If you repeatedly fail to provide enough
details, you may be blocked from ever submitting issues to Jets again.
Please use your best judgment. 👍

If you are unsure this is a bug in Jets, please consider asking your question at:
https://community.rubyonjets.com

Thanks!
-->

## Checklist

<!--
Make sure that you've done all of these.  To mark a checkbox done, replace [ ] with [x]. Or after you create the issue you can click the checkbox.
-->

- [x] Upgrade Jets: Are you using the latest version of Jets? This allows Jets to fix issues fast. There's a `jets upgrade` command that makes this a simple task. There's also an Upgrading Guide: http://rubyonjets.com/docs/upgrading/
- [x] Reproducibility: Are you reporting a bug others will be able to reproduce and not asking a question. If you're unsure or want to ask a question, do so on https://community.rubyonjets.com
- [x] Code sample: Have you put together a code sample to reproduce the issue and make it available?  Code samples help speed up fixes dramatically. If it's an easily reproducible issue, then code samples are not needed. If you're unsure, please include a code sample.

## My Environment

<!-- Please fill out the table below with debugging info to help: -->

| Software         | Version |
| ---------------- | ------- |
| Operating System |   OSX 10.14.6 (18G1012)      |
| Jets             |    2.3.5     |
| Ruby             |     2.5.3    |

---

## Expected Behaviour

After deployment, my service is accessible myapp.mydomain.com
<!--
What is it you expected to happen? This should be a description of how the functionality you tried to use is supposed to work. Try to keep this to one-paragraph.
-->

## Current Behavior

Deployment fails because it cannot create the domain

<!--
Describe the details of the bug.  Try to keep this to one-paragraph.
-->

## Step-by-step reproduction instructions

1. Configure the service
  1. Create custom domain on Route53
  2. Create certificate on AWS ACM
  3.  `application.rb`
```ruby
Jets.application.configure do
  # ....
  config.domain.route53 = true
  config.domain.name = 'myapp'
  config.domain.hosted_zone_name = "mydomain.com."
  config.domain.cert_arn = "arn:aws:acm:us-east-1:1111111:certificate/certificate-id"
  config.domain.endpoint_type = "EDGE"
end
```

2. Run `jets deploy`

Logs here: https://gist.github.com/vnorguet/0268b8e7fde2f3b817c2ab7468d0c5f3

<!--
Be sure to include any steps you took for the problem to exist. This is likely the longest part of the report.

Please include any logs you think relevant here. If the logs are long (more than 50 lines) please make a gist of the logs and link to it. https://gist.github.com

With long logs, you can also use the <details> tag to keep the report readable. Example:

<details>
 <summary>Summary Goes Here</summary>

 ...this is hidden, collapsable content. start with a blank line to get terminal output to format right...
</details>
-->

## Code Sample

<!--
Please provide a code repository, gist, code snippet or sample files to reproduce the issue.
-->

## Solution Suggestion

Comment `config.domain.hosted_zone_name`, and the deployment is successfull.

Note: I deploy in the zone: eu-west-1, and the certificate is in us-east-1 zone

<!--
Please provide possible solutions. If you can't think of anything, feel free to omit. Please be kind and add helpful possible solutions.  For example, "Fix it!" is not a helpful solution suggestion. We are mere mortals. Please be constructive.
-->

Hi ! 

Is it possible to filter parameters in logs as Rails is actually doing. 
We tried to add `Jets.application.config.filter_parameters += [:password, :password_confirmation]` in an initializer, without any success.

Thanks for your help, and keep up the good work !
## Summary

Option for more control over current Auto Replace API gateway behavior that can happen with a  `jets deploy`.

## Motivation

Currently, a `jets deploy` can possibly replace the API Gateway.  Jets does some "Routes Change Detection". Jets computes and figures out whether or not it needs to replace the REST API as part of a deployment. Jets does this because it is sometimes the only way to deploy successfully. Otherwise, the CloudFormation stacks rollback. It also removes the need to do the blue-green deployment manually.

If the app does not yet have a [Custom Domain](https://rubyonjets.com/docs/routing/custom-domain/) setup, replacing the API Gateway can cause issues as the API Gateway endpoint is changed.

## Guide-level explanation

The option could be `config.deploy.api.auto_replace` with 3 possible values:

Value | Description
--- | ---
nil | This is the default behavior. Jets checks if a Custom Domain is configured. If a Custom Domain is set, there is no prompt. If Custom Domain not set, then it depends on Routes Change Detection.  When an API replacement is required: it'll prompt the user, let them know that the API endpoint will change, and let the user decide.  
false | Never replace the API Gateway, even if Routes Change Detection is positive.  So the CloudFormation stack will always rollback in that case.
true | Replace the API Gateway if Routes Change Detection is positive.

Note: The default nil behavior can block CI/CD setups, but it's better than causing issues post-deploy.  Maybe timeout after some time. The prompt should point users to documentation explaining their options and answering questions that they will likely have.

## Reference-level explanation

Can be configured in `config/application.rb`. Example:

```ruby
Jets.application.configure do
  config.deploy.api.auto_replace = nil # default
```

Note: Would also like a `JETS_AUTO_REPLACE_API` env variable option also that overrides the application-level config, so demo presentation won't accidentally run into the prompt.

## Drawbacks

* Mentioned it earlier. It can block CI/CD builds. The prompt should point users to documentation explaining their options and answering questions that they will likely have.
* Can lead to users not setting up Custom Domains. Think will handle with encouraging messaging to set up a Custom Domain name.  Manual blue-green deployments quickly become an annoyance anyway.

## Unresolved Questions

Can't think of any at the moment.

## Related

#389
<!--
Hi! Thanks for considering to file a feature request with Jets. Please take the time to answer the basic questions. Please try to be as detailed as possible.

Thanks!
-->

## Summary
When "jets server" is run in local development mode all jobs should be running.  Specifically I would like any jobs based on sqs_event to be running and to respond to events pushed into the queue they are attached to when in local development mode.  Ideally all jobs would work, no matter the type.

## Motivation
Without supporting local jobs doing local development becomes very problematic.  A developer ends up having to continuously deploy any changes to the their jobs any time a modification has been made - this is, obviously, very slow.  It also forces every developer to have an cloudfront stack running in AWS rather than being able to do development locally and then deploy to a common integration environment as is common with many git flows.  

The only alternative to this (that I can find) is to manually run the jobs but even running the manually is a problem as you have fetch the sqs events by hand before executing the jobs.  

## Guide-level explanation

<!--
Explain the proposal as if it was already included in the project and you were teaching it to another programmer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- If applicable, provide sample error messages, deprecation warnings, or upgrade guidance.

If this is a small feature, you may omit this section.
-->

## Reference-level explanation

<!--
This is the technical portion of the feature request. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

If you do not know how to answer this, you can omit it. No worries!
-->

## Drawbacks
Ideally this would work consistently for all different types of jobs.  This seems complex and expensive to implement.

## Unresolved Questions

<!--
What related issues do you consider out of scope for this feature that could be addressed in the future independently of the solution that comes out of this feature?
-->

This is a 🙋‍♂️ feature or enhancement.

- [x] I've added tests (if it's a bug, feature or enhancement)
- [x] I've adjusted the documentation (if it's a feature or enhancement)
- [x] The test suite passes (run `bundle exec rspec` to verify this)

## Summary

This will allow i18n to be used out of the box on jets.
As there is already some international adoption this seems like
a good idea.
<!--
Provide a description of what your pull request changes.
-->

## Context

Relevant issue: https://community.rubyonjets.com/t/i18n-is-not-working/212/3

<!--
Is this related to any GitHub issue(s) or another relevant link?
-->

## Version Changes

<!--
Which semantic version change would you recommend?
If you don't know, feel free to omit it.
-->

This is a minor patch in my opinion. 

Hi, thanks for your job,

Could we remove activerecord (and actionmailer) as the gem dependency?
For example, I'm using dynamoid and I don't need activerecord at all. 
In other words, developers can choose any other ORM, depending on their own cases

Thanks,
I can send a pull request if you agree with me :)

<!--
Hi! Thanks for considering to file a feature request with Jets. Please take the time to answer the basic questions. Please try to be as detailed as possible.

Thanks!
-->

## Summary

I need an [AWS::SQS::QueuePolicy](https://amzn.to/2Y1mTX0).  

I noticed that the SNS resource has an associated topic policy and so I have modeled a Jets "core" implementation for AWS Queue Policy (soon to be PR) to match.  The SNS topic policy implementation looks incomplete / unused and doesn't have spec coverage, or I'm missing something...
<!--
A one-paragraph explanation of the feature.
-->

## Motivation

I need an SQS queue policy (specialized resource) for Amazon MWS Subscription API integration. MWS uses a specific policy to enable subscription to events from Amazon stores.  I'm sure this pattern is used in other places.  A generalized AWS::SQS::QueuePolicy resource implementation would be useful to all.

<!--
Why do you want to see this feature in Jets? What use cases does it support?

How the feature would be relevant to 80% or more of Jets users.
-->

## Guide-level explanation

<!--
Explain the proposal as if it was already included in the project and you were teaching it to another programmer. That generally means:

- Introducing new named concepts.
- Explaining the feature largely in terms of examples.
- If applicable, provide sample error messages, deprecation warnings, or upgrade guidance.

If this is a small feature, you may omit this section.
-->

A general implementation of AWS::SQS::QueuePolicy (linked above) modeled after the existing SNS Topic Policy.

## Reference-level explanation

<!--
This is the technical portion of the feature request. Explain the design in sufficient detail that:

- Its interaction with other features is clear.
- It is reasonably clear how the feature would be implemented.
- Corner cases are dissected by example.

If you do not know how to answer this, you can omit it. No worries!
-->

## Drawbacks

<!--
Why should we *not* do this?
-->
I could implement this as an extension, but it is a core feature and would be a nice addition for others.

## Unresolved Questions

Extension or core?  Does SNS Topic Policy work now? Where should I add a spec for this?

<!--
What related issues do you consider out of scope for this feature that could be addressed in the future independently of the solution that comes out of this feature?
-->
