Support FilesizeBase that is used to calculate the filesize. In which you can change this to 1024 if you would rather display kibibytes, mebibytes, etc...
Revert url is only called after chunk uploads are complete and you press the delete button. Is there a way to during chunk uploads processing when cancelled.
### Summary
First of all. This is a great library. Thanks for that.

Uploading files to the server (POST to the url, configured with the 'server' option) works ok.
However, loading 'local' files (added with 'files' option during the FilePond.create(). Didn't work. 
The server got the request, but did not get the requestParameter which would contain the serverId.
It took a while before I found the cause:
My sever url is kind of generated AND does contain already some parameters. (and thus also a '?').
It seems that filePond just adds '?load=&lt;serverId>' to the server property, while in this case, it should have added '&load=&lt;serverId>'.

### How to reproduce
Just use a server url with already a parameter in it.
...

### Expected behaviour
add the load query paramter with a '&' prefix instead of a '?' prefix when the server url does already contain a '?'

| WIndows Chrome | Version 4.9.3

From my experience, the error object looks like this 
```javascript
{type: "error", code: 0, body: "Network Error"}
```
### Summary
Hi,
I'm running into an issue in IE 11, with the file "card" not updating colors when the file has finished processing. Whether it is a success or error, the file "card" remains a grey color. Currently it will only update when the browse button is selected and/or you click any where within the FilePond instance. 

![iexplore_RbSWDtSEuL](https://user-images.githubusercontent.com/6749048/66066544-57186f00-e50f-11e9-8f37-0f79e40614f7.png)

![iexplore_SL8Ry3QOim](https://user-images.githubusercontent.com/6749048/66066545-57186f00-e50f-11e9-956b-88875fc0f589.png)

Below is the code that is meant to be used as a modal:
```html
<template>
   <div class="g-media-upload-content">
        <FilePond
            name="dragDropFileUpload"
            ref="pond"
            class-name="g-multi-upload"
            label-idle="Drop files here or <span class='filepond--label-action'>Browse</span>"
            allow-multiple="true"
            allowRevert="false"
            instantUpload="false"
            server="/api"
        />
   </div>
</template>

<script>
import vueFilePond from 'vue-filepond';
import FilePondPolyfill from 'filepond-polyfill';
import 'filepond/dist/filepond.min.css';

const FilePond = vueFilePond();

export default {
    components: {
        FilePond,
    },
    data: function () {
        return {
            files: []
        }
    }
}
</script>
<style lang="scss">
.g-media-upload-content {
    box-sizing: border-box;
    padding: $space-5;
    min-width: 500px;
    max-width: 100%;
}

.g-multi-upload {
    max-height: 500px;
}
</style>
```
### How to reproduce
Run vue-filepond in IE 11


### Expected behaviour
When processing a file, the file "card" color should automatically update from grey to green/red depending on success/error.


### Additional information
 In all the other browsers it updates the color as expected, so it currently is just an issue with IE 11.


| Environment  | Version
|------------- | -----------
| OS           | Windows 
| Device       | Desktop
| Browser      | IE 11

Added getItemWidth function to be used in dragItem to get the number of rows and columns. Combining this information with our drag position we can find out where in the grid (column mod is a grid of one column) we are and how the index should update.

Known issue: If user drags item left or right outside of root it will continue updating the index.
This branch removes the `aria-relevant="additions"` attribute from the screen reader assistant element. This attribute currently prevents assistant text from being announced by screen readers in Firefox (tested using NVDA).

It's my understanding that there are few advantage to setting `aria-relevant` unless you want to encourage screen readers to announce more changes (using `"all"` to announce content removals). The default value of `aria-relevant` is `"additions text"`. Is it necessary to exclude text changes from being announced here?

resolves #403
### Summary

Content added to the live region (`filepond--assistant`) is not read by screen reader (NVDA) in Firefox. This appears to be related to the `aria-relevant="additions"` attribute.


### How to reproduce
Run NVDA and add, upload, or remove a file from filePond in Firefox.


### Expected behaviour
The appropriate text is added to the `aria-live="polite"` element, and announced by the screen reader.

Currently, the text is added to the element, but the content is not announced.


### Additional information
When the `aria-relevent` attribute is removed from the live region element, or the attribute is set to`aria-relevant="additions text"`, Firefox *will* announce the status updates.

This appears to be due to one of several inconsistencies with `aria-relevant` across browsers. It is recommended to avoid this attribute if possible:
https://medium.com/dev-channel/why-authors-should-avoid-aria-relevant-5d3164fab1e3

A fix may be as simple as removing this attribute from the assistant element.


| Environment  | Version
|------------- | -----------
| OS           | Windows
| Device       | Desktop
| Browser      | Firefox 70.0

Hello, if the max height is set as described here: https://pqina.nl/filepond/docs/patterns/api/style/#limiting-the-height-of-filepond

When the filepond is disabled, it`s not possible to scroll, I can see the scrollbar but im stuck it doesn't scroll. 

![image](https://user-images.githubusercontent.com/2874967/66710876-b39f4800-edb3-11e9-8f0d-0e022d648162.png)

Hey,

Thanks for your work. This is within a react application. 

When I try to create a new FilePond instance and provide it a file prop from the controlled state of another FilePond instance it throws a 'File is of invalid type' error while looking like it attempts to make a get request to the current url + the source id or something. This only occurs when source FilePond state was created with a mock file. It looks like the mock file is processed and displayed correctly by the source FilePond but after post-processing by FilePond the mock file is not a Blob or File but a plain Object... so I think this issue is isolated to mock files. I'm unable to avoid passing a processed mock file.

Apologies if this is an issue you've already addressed.

Best,

rowrowrowrow