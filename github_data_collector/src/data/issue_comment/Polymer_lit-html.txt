I often I run into use cases where I want to run a piece of code on a node, and express this declaratively in a lit-html template. For example to maintain an expanded/collapsed state of an element, it would be great to be able to do something like this:

```js
html`
  <my-element ${expandCollapse(expanded)}>

  </my-element>
`
```

This isn't possible, directives that operate on an element must be applied to an attribute even when it doesn't do anything with the attribute name. 

So we either need to make up a fake attribute:

```js
html`
  <my-element ~=${expandCollapse(expanded)}>

  </my-element>
`
```

Or make it a directive that must be used in a `NodePart` and query the first rendered element:

```js
html`
${expandCollapse(expanded, () => html`
  <my-element></my-element>
`)}
```

I'm wondering if it's possible to support directives that operate on a node like in the first example, without being associated with any attribute. 

I've seen something similar being proposed before, but then to be able to add arbitrary attributes/properties on a tag. This understandably isn't within the design goal of lit-html, but allowing this for directives will not cause any changes to the output HTML so it seems like something that should be feasible.
Added in #1000 
Added in #1058 
# Description

Only the last ifDefined() instance is respected. If the last value is defined, the committer is dirtied and setAttribtue() is called, causing the attribute to be rendered with the ToString value of the directive rendered to the attribute.

# Steps to Reproduce

1. Write this code

```ts
html`<div foo="${ifDefined('a')}${ifDefined(undefined)}"></div>">`
```

2. See this output...

ðŸ˜¬


<!--
Please read our contribution guidelines:
  https://github.com/Polymer/lit-html/blob/master/CONTRIBUTING.md#filing-issues
-->

# Description
When some one wants to submit small changes its to much overhead to run npm install and npm formart the project should change its pipeline to apply formart changes on merge if needed not in the inital pull request.

# Steps to Reproduce

1. Edit a ts file Write this code

```ts
longCondition ? notSolong : thisWillbeLonger ? yesITisLongerThenTheAllowedLineLengthYaa : FinalyAFormartErrorYaaa : WeDidItaFormartErrorInOneLineOfCode;
```

2. See this output...
jenkins will fail with a formart suggestion if you submit a pr with that code while the code is maybe 100% valid legit and well tought and formed.

## Expected Results
All Tests do finish and can be merged into a extra branch to apply codestyles or additional stuff that the developer don't needs to be aware of.

## Actual Results
Jenkins will error with formart suggestions

## Browsers Affected
<!-- Check all that apply -->
- [x ] Chrome
- [x] Firefox
- [x] Edge
- [x] Safari 11
- [x] Safari 10
- [x] IE 11

It's used to check against the actual DOM value (attribute, property, or boolean attribute only) instead of the previous values set though lit-html. This is useful in cases where the underlying value might change underneath lit-html, but the template author wants the lit-html provided version to overwrite the DOM value. The classic case is:

```js
html`<input .value=${x}>`
```

Added in #1057 
Came here to fix a broken link, got more than I bargained for. Other recommendations (like linting and IDE plugins) may need updating as well.
To allow server side rendered templates we need to be able to create a template result from existing template tags.

Take this example:
https://stackblitz.com/edit/lit-element-demo-trexqs

If you have a `select` with its `value` property bound to something, things work fine:

```ts
render(html`<select .value=${foo}>
  <option value="a">A</option>
  <option value="b">B</option>
</select>`, node);
```

However, if the options are computed (i.e. sub-templates):

```ts
const options = someArray.map((i) => html`<option>${i}</option>`);

render(html`<select .value=${foo}>
  ${options}
</select>`, node);
```

The options are added to DOM **after** the `value` property of the select is set, meaning the select ultimately defaults to the first option every time.

We should probably document this somewhere or decide what to do with it. Its expected behaviour, i think, but could lead to a fair amount of confusion seeing as this is a fairly common use case.

cc @justinfagnani 
<!--
Please read our contribution guidelines:
  https://github.com/Polymer/lit-html/blob/master/CONTRIBUTING.md#filing-issues
-->

# Description
I'm at the airport and cloned the repo so I could read the docs offline on the plane.  Installing, downloading, and compiling Ruby and the required Jekyll deps took a long time (> 5mins).  What do you think of converting the docs from Jekyll (Ruby) to 11ty (JavaScript) to keep the docs within the JS stack?  Happy to take this on if everyone would find it beneficial to remove the Ruby dependency and migrate to JavaScript/npm.

# Steps to Reproduce

```bash
$ time gem install bundler jekyll
```
