If I'm not mistaken AspectIdentifier is what being returned by `aspect_hookSelector…` method
If so it's advertised that it would conform to `AspectToken` protocol
It does it in informal way (by just implementing required methods)
What it means is that if we check the object returned by `aspect_hookSelector…` method at runtime for the protocol conformance it will actually fail which can impact user logic relying on that
[NSMethodSignature signatureWithObjCTypes:]: type signature is empty.
       Hello, I am newer. I read code from aspects. And see OSSpinLock in use, but apple develop says "This is a replacement for the deprecated OSSpinLock. "
      Please check if I'm wrong.Hopefully for your concern

---
There's known issues with this approach, and to this date (February 2019) I STRICTLY DO NOT RECOMMEND TO USE Aspects IN PRODUCTION CODE. 
---

I found you wrote this in read.me. I'm curious about what is known issues.
Would you mind show some details?



It can not hook AppDelegate func in iOS13Beta,like 
```application:openURL:options:```
```application:didFinishLaunchingWithOptions:```
@steipete  It's not very convenient to use Aspects in Swift now, so this mr created AspectsSwift for improving swift support
Compiling IB documents for earlier than iOS 7 is no longer supported
