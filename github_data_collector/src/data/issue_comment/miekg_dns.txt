I found that the new version of the code is missing a folder---'vendor/golang.org/x'. 
Should I add these files directly, what is the corresponding version?
This includes code from #1052 and add a tests

See for further discussion: #997
Resolves #1064

TODO:
- Needs to be declared private, which I don't know how to.
- HTTPSSVC too

Implements for draft-ietf-tls-esni-05, thus if we don't declare it private people will try to use with Cloudflare's servers, which are draft-ietf-tls-esni-02 that is incompatible with the SVCB record.
See https://tools.ietf.org/html/draft-ietf-dnsop-svcb-httpssvc-01. We should add this record as a private RR type for the time being. Wireformat is fairly straight forward, except for the value field, which resembles TXT but not entirely and it can be switched to something else by a previous value in the RR.

I was thinking off:

~~~
// SVCB RR. See RFC xxxx (https://tools.ietf.org/html/draft-ietf-dnsop-svcb-httpssvc-01)
type SVCB struct {
	Hdr      RR_Header
	Priority uint16
	Target   string   `dns:"domain-name"`
	Value    []string `dns:"txt"` // this is wrong, if priority == 0 this must be something else entirely
} 
~~~
The draft talks about SvcFieldPriority instead of `Priority`, which I really dislike, hence `Priority` in the above example. `Target` is a better name than "SvcDomainName" which is used in the draft - this also mimics the SRV record a bit.
There is a new zone parser that works better than the old. It's time to start thinking about deprecating the old parser somewhere in 2020.

Specially this means removing: `ParseZone` and `parseZone` and cleaning up the tests.
Do a go get -u and go mod tidy

This updates all deps to a newer version.
A newly created Server which has had `Server.Shutdown()` called on it returns `&Error{err: "server not started"}`.  However, unlike go's http server, `dns.Server` still allows you to call `Server.ListenAndServe()` after a `Shutdown()` call.

Is this expected behavior? Or would it be better to follow `http.Server`'s lead and once a server is `Shutdown()`, it will forever return `&Error{err: "Server closed"}`?
This follows up #426. This time around I thought I'd try adjusting the lengths after packing the values which is probably a bit simpler. I haven't considered performance - if this approach seems okay, avoiding the `packUintX`'s might be worthwhile.

Also I'm a bit rusty so I may have missed some things.
Hi, I'm Yevgeny Founder of [Fuzzit](https://fuzzit.dev) - Continuous fuzzing as a service platform.

I saw that you implemented Fuzz targets but they are currently not running as part of the CI.

We have a free plan for OSS and I would be happy to contribute a PR if that's interesting.
The PR will include the following
- Continuous Fuzzing of master branch which will generate new corpus and look for new crashes
- Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step. This will prevent new or old bugs from crippling into master.

You can see our basic example [here](https://github.com/fuzzitdev/example-go) and you can see and example of in the wild integration [here](https://github.com/google/syzkaller).

Let me know if this is something worth working on.

Cheers,
Yevgeny

@miekg 


Hi,
i'm use this in windows10.  When I use 200 threads to nslookup and send UDP package to dns server, it finds that there are too many goroutines and occupying large memory of heaps.

So I review the code, and find that there is no limits when proccess UDP packages in server.go. I don't sure if it is all right.  May anybody help me?

my code:
```
func serveDNS(laddr string) error {
	serveMux := dns.NewServeMux()
	serveMux.HandleFunc(".", handleDnsRequest)
	glog.Errorf("serveDNS Begin...")
	e := make(chan error)
	for _, _net := range [...]string{"udp", "tcp"} {
		srv := &dns.Server{Addr: laddr, Net: _net, Handler: serveMux}
		go func(srv *dns.Server) {
			e <- srv.ListenAndServe()
		}(srv)
	}
	return <-e
}
```
dns code:
```
github.com/miekg/dns/server.go

for srv.isStarted() {
		m, s, err := reader.ReadUDP(l, rtimeout)
		if err != nil {
			if !srv.isStarted() {
				return nil
			}
			if netErr, ok := err.(net.Error); ok && netErr.Temporary() {
				continue
			}
			return err
		}
		if len(m) < headerSize {
			if cap(m) == srv.UDPSize {
				srv.udpPool.Put(m[:srv.UDPSize])
			}
			continue
		}
		wg.Add(1)
		go srv.serveUDPPacket(&wg, m, l, s)
	}
```

