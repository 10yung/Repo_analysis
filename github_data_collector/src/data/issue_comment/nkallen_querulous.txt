Hi guys,
I have been happily using querulous-generic for 2 years and I think it's brilliant !
I would like to take advantage of new features in Scala 2.10 and was wondering if you could port it to that version ?
I did try porting it myself but hasn't been very successful so far.,

thank you
Nasko



Can there be examples for doing the above?

I am using ApachePoolingDatabaseFactory as shown in the example,
There is no way to shutdown the connection Pool.

The app just hangs.

Seing the code as well, there is no Method to shutdown the App.

We have this object from which we are fetching our queryEvaluator

object MyDataSource {
    val queryFactory = new SqlQueryFactory
    val apachePoolingDatabaseFactory = new ApachePoolingDatabaseFactory(
      "SELECT 1",
      10,
      10,
      new Duration(1000),
      new Duration(10),
      true,
      new Duration(30000))
    val queryEvaluatorFactory = new StandardQueryEvaluatorFactory(apachePoolingDatabaseFactory, queryFactory)
    val queryEvaluator = queryEvaluatorFactory(dbConfig.driverClassName, dbConfig.url, dbConfig.username, dbConfig.password)
  }

We are not explicitly closing connections, assuming that it is handled. We seem to be running out of connections on our MySQL db. 

We are using the following dependencies

libraryDependencies += "com.twitter" % "querulous" % "1.2.0-generic"

libraryDependencies += "mysql" % "mysql-connector-java" % "5.1.12"

On line 55 of https://github.com/nkallen/querulous/blob/master/src/main/scala/com/twitter/querulous/database/ApachePoolingDatabase.scala, config.testWhileIdle is set to false. According to http://commons.apache.org/pool/apidocs/org/apache/commons/pool/impl/GenericObjectPool.html, this means that timeBetweenEvictionRunsMillis has no effect, the connections are never checked when idle, and the pool sometimes returns invalid connections. 

Is there a reason to not let this be configurable (or at least default to true)?

I am new to Scala and building Scala projects. I'm currently using buildr but it doesn't work, because it can't find configgy 1.5.2 in the recommended maven repositories. Lots of other versions, including 1.5.x, are available at: http://scala-tools.org/repo-releases/net/lag/configgy/. Can you update the pom file?

```
$ buildr
Downloading com.twitter:querulous:pom:1.1.11
Downloading http://scala-tools.org/repo-releases/com/twitter/querulous/1.1.11/querulous-1.1.11.pom
Downloading net.lag:configgy:pom:1.5.2
Buildr aborted!
RuntimeError : Failed to download net.lag:configgy:pom:1.5.2, tried the following repositories:
http://scala-tools.org/repo-releases/
http://scala-tools.org/repo-snapshots/
http://www.ibiblio.org/maven2/
```

The Querulous ReadMe elegantly forgets to mention that Querulous only supports MySQL. I hope this is not a purposeful deception but rather indicates the plan to support other databases.  It looks like the design of the framework is database-agnostic and support of other databases can be done without major redesign.

I would like to use this framework but cannot because for this project we use Oracle. I had a look at other forks of this project but it doesn't look like there is anything working there. 

Please be nice and support general JDBC.

Please see inline comments.
Code will result in "java.sql.SQLException: Can't call commit when autocommit=true"

``` scala
def test(): Boolean =
  queryEvaluator.transaction {
    t => {
      t.execute("SELECT 1")
      t.execute("SELECT 1")

      val everythingWentSuccessful = false

      if(everythingWentSuccessful) {
        true
      } else {
        t.rollback()//causes the Transaction to be rolled back, autoCommit will be set to true
        false
      }
    } // no exception occurred so query evaluator will call commit on the transaction which yields exception
}
```

It seems to me the only way to roll back a transaction right now is to 
a) raise an error
b) set auto commit to false after calling rollback.
