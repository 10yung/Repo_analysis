In Go 1.14Beta1, the file and function information logged when ReportCaller is set to true reports logrus code, not the calling code.

## POC

```go
package main

import "github.com/sirupsen/logrus"

func init() {
	logrus.SetReportCaller(true)
	logrus.Info("Logging from init")
}

func main() {
	logrus.Info("Logging from main")
	foo()
}

func foo() {
	logrus.Info("Logging from foo")
}
```

### 1.13.6 Output
INFO[0000]/tmp/poc/main.go:7 main.init.0() Logging from init                            
INFO[0000]/tmp/poc/main.go:13 main.main() Logging from main                            
INFO[0000]/tmp/poc/main.go:19 main.foo() Logging from foo

### 1.14Beta1 Output
INFO[0000]/home/nzb301/go/pkg/mod/github.com/sirupsen/logrus@v1.4.2/logger.go:192 github.com/sirupsen/logrus.(*Logger).Log() Logging from init                            
INFO[0000]/home/nzb301/go/pkg/mod/github.com/sirupsen/logrus@v1.4.2/logger.go:192 github.com/sirupsen/logrus.(*Logger).Log() Logging from main                            
INFO[0000]/home/nzb301/go/pkg/mod/github.com/sirupsen/logrus@v1.4.2/logger.go:192 github.com/sirupsen/logrus.(*Logger).Log() Logging from foo 


Instead of relying on EnableVirtualTerminalProcessing from
github.com/konsorten/go-windows-terminal-sequences which just calls
GetConsoleMode, sets ENABLE_VIRTUAL_TERMINAL_PROCESSING and calls
SetConsoleMode with the new modified mode, implement it directly inside
checkIfTerminal. This also avoids the duplicate call to GetConsoleMode.
Note: I have not created an issue for this and don't really feel all that strongly one way or another about it.  I was experimenting with some logging options and it seemed to me that logging fields in their GoString output format was clearer when they weren't quoted.

Without this, given a type like this (the Stringer and GoStringer are the same mainly for illustration):

```
type Walrus struct {
        name   string
        weight float64
}

func (w Walrus) GoString() string {
        return fmt.Sprintf("Walrus{name: %q, weight: %g}", w.name, w.weight)
}
func (w Walrus) String() string {
        return fmt.Sprintf("Walrus{name: %q, weight: %g}", w.name, w.weight)
}
...
        log.WithField("walrus", Walrus{"Fred", 300}).Debug("walrus details")
```

produces (I've trimmed a bit of interior whitespace for this PR text):
```
DEBU[0000] walrus details                walrus="Walrus{name: \"Fred\", weight: 300}"
```
With GoString enabled we get:
```
DEBU[0000] walrus details                walrus=Walrus{name: "Fred", weight: 300}
```
which just seems prettier.  A well-formed GoString should produce unambiguously encoded results, so it won't need quotes.

Commit message text follows...

---

Allow logging fields with their GoString result.  When using
GoString, never add extra quotes, regardless of the ForceQuote
setting: the GoString format should take care of this.

Note that if some field does not implement the GoString
interface, we fall through to the remaining logic, which
obeys ForceQuote as usual.
In case of:
* ReportCaller=true
* `func` and/or `file` fields are clased (set by `WithField()` or `WithFields()`)

**The `TextFormatter` duplicates the clashed `func` and/or `file` fields.**

Root cause: `prefixFieldClashes()` does not delete `func` and/or `file` fields, if it are renamed to `fileds.func` and/or `fields.file`. The `TextFormatter.Format()` merges `keys` and `fixedKeys`, so `func` and `file` are duplicated in the merged slice, because `TextFormatter.Format()` does not use unique list.

`TestJSONFieldClashWithCaller` didn't detect this problem, because it uses unique data model (map instead of slice)

Solution: 
* deleting `func` and/or `file` fields in `prefixFieldClashes()`, if it are renamed.
* new unit tests

logrus.Warn and logrus.Warnln differenceï¼Ÿ 

I try to use logrus.xx and logrus.xxln, the output is the same, and they all wrap.

![image](https://user-images.githubusercontent.com/16982786/71543186-8bcf8180-29ab-11ea-9f22-9b5172896a4b.png)

The [current godoc](https://godoc.org/github.com/sirupsen/logrus#Logger) says of Logger.Out:

> It's common to set this to a file, or leave it default which is `os.Stderr`.

However, this is in the struct doc rather than the documentation for `logrus.New`. The default when declaring a logrus.Logger as a struct is, of course, `nil`, and leaving it that way results in a panic [whenever a log would be written.](https://github.com/sirupsen/logrus/blob/master/entry.go#L260) This is not necessarily incorrect, from the point of view that both the `StandardLogger` and any `New` Logger would come with this value set, but since many Go packages (including [logrus, in other places!](https://github.com/sirupsen/logrus/blob/master/json_formatter.go#L79)) also use "default" to mean "the value that will be used if the caller leaves it at the zero-value", this is at least a little more ambiguous/confusing than it needs to be.

I do not think it would be reasonable to ["make the zero-value useful"](https://golang.org/doc/effective_go.html#data) in this case, as there are just way too many methods that would need to check whether `Out` is `nil` and set it (even doing this in one place, such as within `Entry.write()`, seems cumbersome).

Instead, I would suggest either discouraging the style where the caller declares a struct instance directly, or otherwise altering the documentation to avoid describing `os.Stderr` as a default value, except in the specific context of `logrus.New()` and `logrus.StandardLogger()`.
Fix typo in doc
https://github.com/sirupsen/logrus/blob/67a7fdcf741f4d5cee82cb9800994ccfd4393ad0/json_formatter.go#L64

Consider 
`data[k] = fmt.Sprintf("%+v", err)`

instead of
`data[k] = v.Error()`

not to loose stack trace when using github.com/pkg/errors
AddSkipPackageFromStackTrace excludes package names from the caller report when
SetReportCaller set to true. Commonly used to skip a custom logrus wrapper package frames.
ex. log.AddSkipPackageFromStackTrace("mycoolapp/mylogger") // skip mycoolapp/mylogger wrapper.

Merging changes discussed in https://github.com/sirupsen/logrus/pull/898/files with minor changes.
l := logrus.New()
l.ExitFunc = func(int) { fmt.Println("exit") }

l.Log(logrus.FatalLevel, "test") //  The exit function was not called!
l.Fatal("test") // The exit function is called!

Designed so?
