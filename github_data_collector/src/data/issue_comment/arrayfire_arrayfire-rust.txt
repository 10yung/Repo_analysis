
Right now arrayfire has to be used by linking to the DLL. Since the only parts of arrayfire that are included in the Rust bindings are BSD 3-clause, there should be no problem statically linking arrayfire. Is it possible that we could choose whether or not arrayfire is statically linked to ease distribution? Also, is there any downside to just always statically linking arrayfire? I feel like that would be more in-line with what the Rust community expects: adding a crate to your `Cargo.toml` should "just work".

The following functions currently return `f64` values irrespective of the input `Array` data's native type.
* `sum_all`
* `sum_nan_all`
* `product_all`
* `product_nan_all`
* `min_all`
* `max_all`
* `all_true_all`
* `any_true_all`
* `count_all`
* `imin_all`
* `imax_all`

The above functions need to return the appropriate type value instead of `f64`. This change is probably going to be
easier to implemented once [Typed Arrays](https://github.com/arrayfire/arrayfire-rust/issues/98) are implemented.
I've found that calling SVD functions more than once in the same program cause it to stall and start eating up lots of memory. It seems to be independent of whether you use ```svd``` or ```svd_inplace```. It is also independent of whether you use the same array repeatedly or not. An example program:

```rust
extern crate arrayfire as af;

use af::*;

fn main() {
    set_backend(Backend::CPU);

    for x in 40000..50000 {
        let w = 400u64;
        let h = x as u64;

        let dims = Dim4::new(&[w, h, 1, 1]);
        let mut d: Array = randu::<f32>(dims);
        let mut e: Array = randu::<f32>(dims);
        if x == 40000 {
            println!("{}", d.dims());
        } else {
            println!("{}", e.dims());
        }

        println!("before svd");
        if x == 40000 {
            let (u, s, vt) = svd(&mut d);
        } else {
            let (u, s, vt) = svd(&mut e);
        }
        println!("after svd");
    }
}
```

On my Mac with 8GB of RAM, the second iteration of the loop hangs and starts eating up RAM. I'm using ArrayFire from the installer, Rust 1.16.0, and the latest version of this crate from crates.io. I will be able to test on a Linux machine later.
Closely related to #52 but it might be nice if there was a sort of translation table for people coming from Matlab:

| Matlab | arrayfire-rust |
|---------|----------------|
| `a = zeros(3, 4)` | `let mut a = constant::<f32>(0.0, Dim4::new(&[3, 4, 1, 1]));` |
| `b = a * 2` | `let mut b = a * 2.0f32;` |
| `c = 0:10` | `let mut c = range::<f32>(Dim4::new(&[10, 1, 1, 1]), 0);` |
| `d = (0:10)'` | `let mut d = range::<f32>(Dim4::new(&[1, 10, 1, 1]), 1);` |
| `e = d * c` | `let mut e = d * c` |
| `f = 1 - e` | ??? |
| `g = max(c, 5)` | ??? |
| `g(2:4) = 4` | ??? |

[Here is an example of this for NumPy](https://docs.scipy.org/doc/numpy-dev/user/numpy-for-matlab-users.html#general-purpose-equivalents).


Apart from improving the code examples, the following improvements are also required.

- [ ] perhaps a table with input combinations and corresponding output type for `constant_t()`
- [ ] http://erickt.github.io/blog/2015/09/22/if-you-use-unsafe/
- [x] https://github.com/Manishearth/rust-clippy
