Updates [org.typelevel:discipline-scalatest](https://github.com/typelevel/discipline-scalatest) [from 1.0.0-RC2 to 1.0.0-RC4](https://github.com/typelevel/discipline-scalatest/compare/v1.0.0-RC2...v1.0.0-RC4).
[Release Notes/Changelog](https://github.com/typelevel/discipline-scalatest/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.typelevel", artifactId = "discipline-scalatest" } ]
```
</details>

labels: library-update, semver-pre-release
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.2.8 to 1.3.7](https://github.com/sbt/sbt/compare/v1.2.8...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-minor
Replaces https://github.com/julien-truffaut/Monocle/pull/781
I did some experiment with Dotty in the following repo: https://github.com/julien-truffaut/Monocly

The type inference is so much better in Dotty than it looks like we can have fully inferred polymorphic optics, here is an example: https://github.com/julien-truffaut/Monocly/blob/master/src/main/scala/Main.scala#L19

Since the type inference drives a significant portion of our design decisions, I think we should mainly target Dotty and Scala 3 when it is available. We might want to cross-compile to Scala 2 when Monocle 3.x is mature.
Should include https://github.com/julien-truffaut/Monocle/pull/793 and all other backward compatible changes.
I started to play with an encoding of `Prism` and `Optional` that can provide details when these optics fail ([branch](https://github.com/julien-truffaut/Monocle/tree/error-reporting)).

```
trait Optional[+E, A, B] extends Fold[A, B] with Setter[A, B] {
  def getEither(from: A): Either[E, B]
  def modifyE(f: B => B): A => Either[E, A]
  def setE(to: B): A => Either[E, A]
  ...
}

trait Prism[+E, A, B] extends Optional[E, A, B] { ... }

trait Lens[A, B] extends Optional[Nothing, A, B] with Getter[A, B] { ... }
```

Here are some examples:

```scala
case class Foo(map: Map[Int, Option[Boolean]])

  val map: Lens[Foo, Map[Int, Option[Boolean]]] =
    Lens[Foo, Map[Int, Option[Boolean]]](_.map)((foo, newVal) => foo.copy(map = newVal))

  def at(i: Int): Optional[String, Map[Int, Option[Boolean]], Option[Boolean]] =
    UOptional.index[Map[Int, Option[Boolean]], Int, Option[Boolean]](i).withError(s"Missing value at index $i")

  def some[A]: Prism[String, Option[A], A] =
    UPrism.some[A].withError("Expected Some but got None")

  val foo = Foo(Map(1 -> Some(true), 2 -> None))

  def optic(i: Int): Optional[String, Foo, Boolean] =
    map.compose(at(i)).compose(some[Boolean])

  test("get error reporting") {
    optic(1).getEither(foo) shouldEqual Right(true)
    optic(2).getEither(foo) shouldEqual Left("Expected Some but got None")
    optic(3).getEither(foo) shouldEqual Left(s"Missing value at index 3")
  }

  test("set error reporting") {
    optic(1).setE(false)(foo) shouldEqual Right(Foo(Map(1 -> Some(false), 2 -> None)))
    optic(2).setE(false)(foo) shouldEqual Left("Expected Some but got None")
    optic(3).setE(false)(foo) shouldEqual Left(s"Missing value at index 3")
  }
```

Names need to be changed. 
@joroKr21 pointed out that we can use variance for Getter and Fold even in the monomorphic case.

https://github.com/julien-truffaut/Monocle/issues/771#issuecomment-570255879
Optics, like most functional programming concepts, follow some principles (also called laws). FP libraries tend to have two kinds of operations:
Constructors, where users need to verify the constructed object, follow those rules, usually via property-based testing.

Combinators, where users are guaranteed properties are preserved. For example, if you have a valid optic, applying any combinator gives you another correct optic.
Now, the problem is that some methods are incredibly convenient for users, but they may break optics principles. // TODO add examples.

In Monocle 1.x and 2.x, we told users: "Sorry, we understand what you want. It is useful but potentially unsafe, so we don't put this in the library". It has been very frustrating to users. In my opinion, we should allow those combinators, but we need a way to mark them as dangerous. 

Many libraries use `unsafe` prefix, e.g. `unsafeFilter`. Other languages use a `!` suffix like `filter!`. Ideally, it shouldn't be too verbose. 
Hi, thank you very much for this library, it helps me a lot every day, but I've faced a strange issue, I'm not sure if it is a bug or not, but it's behavior is unexpected for me. What I want to do is to have a `Lens` for a collection like `Map`, that allows me to do something like this:
```scala
val map: Map[String, Vector[String]] = Map.empty
val result = map.applyLens(defaultIndex("foo")).modify(_ +: "foo")
assert(result == Map("foo" -> Vector("foo")))
```
But with the default implementation of `monocle.function.Index` and all it's implicits it doesn't work, I had to define a custom `fromAt` for it.

Here is my code:
```scala
def fromAt[S, I, A](implicit ev: At[S, I, Option[A]]): Index[S, I, A] =
  Index { i =>
    val lens = ev.at(i)
    Optional(lens.get)(a => s => lens.set(Some(a))(s))
  }
```

Would that be a good idea to add something like this to the Monocle? Or maybe there is something that solves my problem better? I have a working implementation already.

I think however that `Index` might not be the best solution for this use case, and maybe it should be a different abstraction for it.

A `Getter[A, B]` is equivalent to `A => B`. So the variance of `Getter` should be the same as `Function1`, covariant in A, the input and contravariant in B, the output. If you are like me and have trouble putting your head around variance, you will find a great resource in [Thinking with types](https://leanpub.com/thinking-with-types).

```scala
trait Getter[-A, +B] {
  def get(from: A): B
}
```

On the other hand, a `Lens[A, B]` is equivalent to a pair of function `(get: A => B, set: (A, B) => A)`. Both A and B appear in covariant and contravariant positions, which means `Lens` must be invariant in A and B.

```scala
trait Lens[A, B] extends Getter[A, B] { 
  // A is both an input and ouput of set
  def set(from: A, newValue: B): A 
}
```

All write optics are invariant, but it turns out that their polymorphic version is not. For example, a `PolyLens[A1, A2, B1, B2]`  is a pair of function `(get: A1 => B1, set: (A1, B2) => A2)`. Now, both A1 and B2 are in contravariant position and A2 and B1 are in covariant position.

```scala
trait PolyLens[-A1, +A2, +B1, -B2] extends Getter[A1, B1] { 
  def set(from: A1, newValue: B2): A2
}
```
 
Thank you, Adam Fraser and John De Goes for the idea. Also, thanks to Georgi Krastev for pointing out monomorphic `Lens` can inherit `Getter` with variance.

This issue is directly conflicting with removing polymorphic optics in [#770](https://github.com/julien-truffaut/Monocle/issues/770). 

**So the question is, does variance in polymorphic optics brings enough benefits to compensate for their inconvenience?**

EDIT: I removed the section where I said monomorphic Lens cannot inherit Fold with variance