Updating users.email will update the uid.
Is this correct behavior?
The expected behavior is that user.update (email: "xxxxx") does not update uid and email.
We expect these to be updated when we complete the change from the token given in the authentication email.

rails console
```
$ user = User.find(1)
$ user.update(email: "hoge@example.com")
User Update (0.5ms)  UPDATE `users` SET `users`.`uid` = 'hoge@example.com', `users`.`confirmation_token` = 'xxxxxxxxxxxxxx', `users`.`confirmation_sent_at` = '2020-01-16 08:55:22', `users`.`unconfirmed_email` = 'hoge@example.com
', `users`.`updated_at` = '2020-01-16 08:55:22' WHERE `users`.`id` = 1
```

app/models/user.rb
```
# frozen_string_literal: true                                                                                                                                                                                                                 

class User < ActiveRecord::Base
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :confirmable
  include DeviseTokenAuth::Concerns::User

  def postpone_email_change?
    true
  end
end

```

devise_token_auth gem version : 1.1.3
devise gem version : 4.7.1
ruby version : 2.6.5
rails version : 6.0.2.1
Also, does it have JWT support? I'd like to have silent refresh support.
After upgrading from 1.1.0 to 1.1.3, we've encountered some issues in our project that are related to the new `DeviseTokenAuth::TokenFactory` approach.

One of those is the fact, that it is not guaranteed that `set_request_start` is called before `current_user` (e.g. if using `current_user` in logstasher's custom fields), which leads to `@token` being overwritten by a blank Token and `update_auth_header` not working properly, since `@token.client` is going to be nil.

Is there anything that speaks against the following approach?

```ruby
@token ||= DeviseTokenAuth::TokenFactory.new
```

**Version**: 1.1.3
Hi. How can i override authenticate_user! error response method ?
Added Travis config for Rails 6 and Ruby 2.7 for all databases. 
The change expands the documentation with an endpoint re-sending the confirmation of the e-mail address. 
The project I'm on has an overridden `::Time::DATE_FORMATS[:default]` that does not include the seconds in the serialized time string. This broke batch detection in a way that was very difficult to track down. This PR calls `as_json` before serializing, just like the [default json serializer](https://github.com/rails/rails/blob/b2eb1d1c55a59fee1e6c4cba7030d8ceb524267c/activesupport/lib/active_support/json/encoding.rb#L35)
In our case it happened that the client was an empty hash, because the user was authenticated from a different place. Although, in order to get the access to swagger, with was mounted into the api, we needed to go through the main Api controller.

That resolved in ```undefined method `[]=' for nil:NilClass```

The solution is quite simple and it's just a nil check
# issue

#1356 

# WHAT

I removed `Trackable` option of resource model (ex: `User`) from generator code.

# WHY

Most of devise_token_auth users would encountered following errors, because devise_token_auth's install command does not generate columns of Trackable option by default but in the model that was created by install command is including `:trackable` option.
So I want remove it.
```
Started POST "/api/auth/sign_in" for 172.24.0.1 at 2019-11-16 07:01:57 +0000
Processing by DeviseTokenAuth::SessionsController#create as */*
  Parameters: {"email"=>"admin@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]", "session"=>{"email"=>"admin@example.com", "password"=>"[FILTERED]", "password_confirmation"=>"[FILTERED]"}}
Unpermitted parameters: :password_confirmation, :session
Unpermitted parameters: :password_confirmation, :session
  User Load (1.3ms)  SELECT `users`.* FROM `users` WHERE (BINARY email = 'admin@example.com' AND provider= 'email') ORDER BY `users`.`id` ASC LIMIT 1
Unpermitted parameters: :password_confirmation, :session
Unpermitted parameters: :password_confirmation, :session
   (0.6ms)  BEGIN
  User Update (0.8ms)  UPDATE `users` SET `users`.`tokens` = '{\"Yyo_9HeIa8IWPe4HlWl_KQ\":{\"token\":\"$2a$10$xezZ80NcEPTNGSLtM9hf1OTGwcXrtxG/KCXLncn61OhLjemZVGQW.\",\"expiry\":1576479431},\"7QLXe4cmya6gSgUpyqnhqg\":{\"token\":\"$2a$10$D62DWXQWOXGw7wcWaiAu1.JZkxHBZ3ae/zDvEzFssu6NWLtMnMWbC\",\"expiry\":1576479651},\"Pv2_ppcBK05SmSlTA7QVfA\":{\"token\":\"$2a$10$fRTY3j6wJFTqrBh5dZJZU.iqGwreW3ZdE2CWNjJv9mr6.XSFRNs/O\",\"expiry\":1576479717}}', `users`.`updated_at` = '2019-11-16 07:01:57.655591' WHERE `users`.`id` = 1
   (4.2ms)  COMMIT
Completed 500 Internal Server Error in 192ms (ActiveRecord: 6.9ms | Allocations: 5801)

NoMethodError (undefined method `current_sign_in_at' for #<User:0x000055586157b638>):

activemodel (6.0.1) lib/active_model/attribute_methods.rb:431:in `method_missing'
devise (4.7.1) lib/devise/models/trackable.rb:21:in `update_tracked_fields'
devise (4.7.1) lib/devise/models/trackable.rb:39:in `update_tracked_fields!'
devise (4.7.1) lib/devise/hooks/trackable.rb:9:in `block in <main>'
warden (1.2.8) lib/warden/hooks.rb:15:in `block in _run_callbacks'
warden (1.2.8) lib/warden/hooks.rb:10:in `each'
warden (1.2.8) lib/warden/hooks.rb:10:in `_run_callbacks'
warden (1.2.8) lib/warden/manager.rb:52:in `_run_callbacks'
warden (1.2.8) lib/warden/proxy.rb:191:in `set_user'
devise (4.7.1) lib/devise/controllers/sign_in_out.rb:53:in `sign_in'
devise_token_auth (1.1.3) app/controllers/devise_token_auth/sessions_controller.rb:32:in `create'
```

DTA was merged  a PR(https://github.com/lynndylanhurley/devise_token_auth/commit/7eeed8695280b83c9e408ac59a1c186f45769c4e) that removed columns for Trackable option.

The [devise](https://github.com/plataformatec/devise) is also not including Trackable option by default to support GDPR. [PR]([a PR that the trackable option was removed])




I would suggest move email regexp to config. The same as devise did.

Now the customization of validation is not very obvious.