We're seeing errors building KeyDerivation.xcworkspace using the most current carthage and at least Xcode 11 beta 4.

**Fails**:
- Command Line tools: 11M374r
- Carthage: 0.33

**Succeeds**:
- Command Line tools: 10E1001
- Carthage: 0.33

what shoud i do , I can't find this file " rncryptor.h"
We are using RNCryptor to encrypt API data in our iOS app, the data gets decrypted on the server. This works well for all the devices except **iPhone SE**.

The PHP server is not able to decrypt the data sent by **iPhone SE**, for all other devices it is just perfect.

The code is same for all the devices so I doubt the issue is related to this particular device, but we cannot remove support for this device right now. Please help.

Any help is appreciated.


Deploying to a Linux server (Ubuntu 16.04)

I'm getting this error...

```
Compile Cryptor Cryptor.c
In file included from /perfectbuild/.build/checkouts/RNCryptor.git--3806749195951240672/Sources/Cryptor/Cryptor.c:1:
/perfectbuild/.build/checkouts/RNCryptor.git--3806749195951240672/Sources/Cryptor/include/RNCryptor.h:188:10: fatal error: 'CoreFoundation/CFAvailability.h' file not found
#include <CoreFoundation/CFAvailability.h>
         ^
1 error generated.
```
-the iOS framework contains a proper modulemap file
- the file is missing for watchOS and tvOS
These error codes should be in the documentation:

```
/// It is not possible to distinguish between these cases in the v3 data format.
case HMACMismatch = 1

/// Unrecognized data format. Usually this means the data is corrupt.
case UnknownHeader = 2

/// `final()` was called before sufficient data was passed to `updateWithData()`
case MessageTooShort

/// Memory allocation failure. This should never happen.
case MemoryFailure

/// A password-based decryptor was used on a key-based ciphertext, or vice-versa.
case InvalidCredentialType
```

I was under the mistaken impression that I could create a decryptor and then reuse it multiple times to decrypt the data.  That doesn't appear to be allowed, but it took me a bit to track down my problem.  When I call decryptData a second time, I don't get an error I'd expect.  Instead, it throws `RNCryptorError.HMACMismatch`, which makes it look like the data is the problem.

e.g., psuedo - 

```
let decryptor = RNCryptor.DecryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)

...

let decrypted1 = try! decryptor.decryptData(dataPackage1)
let decrypted2 = try! decryptor.decryptData(dataPackage2)  // throws .HMACMismatch
```

Looking at the `encryptData` function comment block, it includes the comment `invalidates the cryptor.`.  `decryptData` does not include that comment and probably should.  

Suggestion - add an error code for reusing a cryptor after it's been invalidated?

Unit test - 

```
    func testTwoDecodesOnOneDecryptorV3() {
        let encryptionKey = RNCryptor.randomDataOfLength(RNCryptor.FormatV3.keySize)
        let hmacKey = RNCryptor.randomDataOfLength(RNCryptor.FormatV3.keySize)

        let message = "Attack at dawn".dataUsingEncoding(NSUTF8StringEncoding)!

        // Encrypting
        let ciphertext = RNCryptor.EncryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)
            .encryptData(message)

        // Decrypting
        let plaintext = try! RNCryptor.DecryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)
            .decryptData(ciphertext)

        // try example with storing and reusing decryptor
        let decryptor = RNCryptor.DecryptorV3(encryptionKey: encryptionKey, hmacKey: hmacKey)
        let plaintext2 = try! decryptor.decryptData(ciphertext)
        var plaintext3 = NSData()
        do {
            plaintext3 = try decryptor.decryptData(ciphertext)
        } catch let rnError as RNCryptorError {
            XCTFail("RNCryptorError = \(rnError.rawValue)")  // fails RNCryptorError = 1
        } catch {
            XCTFail("Error = \(error)")
        }

        // Did it work? Should be true
        if plaintext != message {
            XCTFail("plaintext mismatch")
        }
        if plaintext2 != message {
            XCTFail("plaintext2 mismatch")
        }
        if plaintext3 != message {
            XCTFail("plaintext3 mismatch")  // fails
        }
    }
```

I have implemented RNCryptor in my app IOS, i'm looking for who has written a utility on "OS X" for mutual interest. 

thanks.

1. Set default value of decrypt_flag to 0 so that encoding works (uninitalized was a positive number interfering with the decode value - it was basically always trying to invoke the decode function)
2. Added more detailed usage
