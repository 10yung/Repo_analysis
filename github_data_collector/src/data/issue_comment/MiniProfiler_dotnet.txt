Hi,

I am using MiniProfiler v4.1.0 on ASP.NET Core 3.1.

I am using the web ui script (in swashbuckle custom index.html):

```
<script async="async" id="mini-profiler" src="/profiler/includes.min.js?v=4.0.138+gcc91adf599" data-version="4.0.138+gcc91adf599" data-path="/profiler/" data-current-id="4ec7c742-49d4-4eaf-8281-3c1e0efa748a" data-ids="" data-position="Left" data-authorized="true" data-max-traces="15" data-toggle-shortcut="Alt+P" data-trivial-milliseconds="2.0" data-ignored-duplicate-execute-types="Open,OpenAsync,Close,CloseAsync"></script>
```
I get the following error thrown that seems to come from MiniProfiler. It seems to only happens when the swagger UI first loads.

```
The JSON value could not be converted to System.Nullable`1[System.Guid]. Path: $.Id | LineNumber: 0 | BytePositionInLine: 8.
```
Stacktrace:

```   at System.Text.Json.ThrowHelper.ReThrowWithPath(ReadStack& readStack, Utf8JsonReader& reader, Exception ex)
   at System.Text.Json.JsonSerializer.ReadCore(JsonSerializerOptions options, Utf8JsonReader& reader, ReadStack& readStack)
   at System.Text.Json.JsonSerializer.ReadCore(JsonReaderState& readerState, Boolean isFinalBlock, ReadOnlySpan`1 buffer, JsonSerializerOptions options, ReadStack& readStack)
   at System.Text.Json.JsonSerializer.<ReadAsync>d__14`1.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Threading.Tasks.ValueTask`1.get_Result()
   at System.Runtime.CompilerServices.ValueTaskAwaiter`1.GetResult()
   at StackExchange.Profiling.MiniProfilerMiddleware.<GetSingleProfilerResultAsync>d__16.MoveNext() in C:\projects\dotnet\src\MiniProfiler.AspNetCore\MiniProfilerMiddleware.cs:line 323
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable`1.ConfiguredTaskAwaiter.GetResult()
   at StackExchange.Profiling.MiniProfilerMiddleware.<HandleRequest>d__11.MoveNext() in C:\projects\dotnet\src\MiniProfiler.AspNetCore\MiniProfilerMiddleware.cs:line 217
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter.GetResult()
   at StackExchange.Profiling.MiniProfilerMiddleware.<Invoke>d__7.MoveNext() in C:\projects\dotnet\src\MiniProfiler.AspNetCore\MiniProfilerMiddleware.cs:line 74
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.<Invoke>d__5.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.<Invoke>d__4.MoveNext()
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at System.Runtime.CompilerServices.TaskAwaiter.GetResult()
   at xxxxxx.AspNetCore.Middleware.ExceptionResponseCodes.ExceptionResponseCodeMiddleware.<InvokeAsync>d__3.MoveNext() in C:\Users\ckarcz\dev\code\xxxxx\sources\xxxxx.AspNetCore\Middleware\ExceptionResponseCodes\ExceptionResponseCodeMiddleware.cs:line 38```
I just want to use it in the .net standard class library and I didn't find the appropriate way to use it
Hi,

I would like to work on Blazor support for miniprofiler. Before anything : are you interested by this ? I can work on my side but it might be better here. 

Here are the thing I would like to do
- start with blazor client side
- create a component that renders miniprofiler
- display server timings
- display timing gathered in blazor app
- add automatic timings for rendering, event handler
- save client side timing to server
- handle blazor server side

If this fit in this repo : do you think I should translate all the typescript code to blazor ? It'll force the repo to maintain 2 version (ts and razor) but it'll remove any need for jquery.

What do you think ?
Hello,

I have the same issue (.net Framework 4.7), WPF Application.
     MiniProfilerEF6.Initialize is the first line in my program.cs/main function.

And I'm getting that : (I'm creating/starting the profiler when the user clicks on a button)
AGP00038 at 20/11/2019 15:09:43
Activate all 328 794,3ms
>> Activation 328 770,8ms (sql = 34 525,9ms in 36824 cmds)
>> Counting 21,3ms (sql = 17,3ms in 3 cmds)

(you can see why i'm interested in getting query details...)

_Originally posted by @guillaumejay in https://github.com/MiniProfiler/dotnet/issues/340#issuecomment-556046190_
Got a asp.net core 2 app I would like to profile ef core for.

The docs rely on razor taghelpers. This issue mentions the same thing as I'm wondering but I don't really know what the answer recommends :)

Can anyone clarify what the recommended way of loading the client part of MiniProfiler when using React is?

Ref: https://github.com/MiniProfiler/dotnet/issues/307
This is related to #354, however I am not able to use synchronous code here without duplicating the logic for the authorization. Specifically we are using policy based authorization using `IAuthorizationService` which only provides an async method. We are having to force the execution to be synchronous (which is working fine because behind the scenes there really isnt anything that requires the call to be async).

```csharp
services
    .AddMiniProfiler(x =>
    {
        x.ResultsAuthorize = request => request.HttpContext.RequestServices.GetRequiredService<IAuthorizationService>().AuthorizeAsync(request.HttpContext.User, "CanProfile").Result.Succeeded;
    });
```
I'm Currently using MiniProfiler V3 with WebAPI (Owin), how I'm seeing at times intermittently errors related to the using MiniProfiler.Stop(). Actual Exception:

Object reference not set to an instance of an object.
   at StackExchange.Profiling.MiniProfiler.StopImpl() in c:\TeamCity\buildAgent\work\a743336045964cbc\StackExchange.Profiling\MiniProfiler.cs:line 485
I'm using the SingletonProfileProvider, from what I read this is not considered thread safe but not sure what the alternative as I had a look around but seems a bit all over the place. If I don't use this particular Provider then find my actual MiniProfiler.Current instance is always null. Any ideas?
[This line of code](
https://github.com/MiniProfiler/dotnet/blob/master/src/MiniProfiler.AspNetCore/MiniProfilerMiddleware.cs#L109) in MiniProfilerMiddleware eventually leads to [this call](https://github.com/MiniProfiler/dotnet/blob/6b3a42a65fed15b8f8b35804668fbc2ea429402b/src/MiniProfiler.Shared/ProfileProviders/DefaultProfilerProvider.cs#L112) to save the timing information to the storage provider.  On each request.  

It would be nice to have an option on the Middleware to invoke the StopAsync() as `_ = mp.StopAsync().ConfigureAwait(false);` or `Task.Run(() => ...);` so we don't block on the write to the provider, slowing down the request.  Especially when the provider is a networked database. 

An alternative would be to add that option to the provider, but I count 6 different networked database providers.  The option would have to be added to each new provider created.

Would MiniProfiler's maintainers consider such a pull request as described in the second paragraph?

I'm profiling a web service API.  I would like to record additional metrics, like some of the input parameters, number of data points requested, and the size of the response. I realize this might not be what MiniProfiler was designed for, but might it be possible?
### Issue
MiniProfiler does not catch exceptions thrown from a storage provider, so they end-up being propagated to the caller app and therefore can crash the app that uses MiniProfiler (or a request in a web api).

I've encountered the issue when using PostgreSqlStorage, but from looking at the source code of other storage providers I believe they are also affected.

### Workaround
I've created a `SanitizedDefaultProfilerProvider` that catches any exceptions thrown in the Save[Async] method and just writes it to the logger (which also makes the configuration a bit more ugly)
```
public SanitizedDefaultProfilerProvider(ILogger<SanitizedDefaultProfilerProvider> logger)
            => _logger = logger;
...
        protected async Task SaveAsync(MiniProfiler profiler)
        {
           ....
            try
            {
                await storage.SaveAsync(profiler).ConfigureAwait(false);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Unable to save trace from MiniProfiler.");
            }
        }
```
But I don't think that resolves the issues completely as any method in `IAsyncStorage` can throw an exception due to various issues with DB (server down/invalid credentials/nonexisting...) and therefore crash the app. Similar issue: #358. 