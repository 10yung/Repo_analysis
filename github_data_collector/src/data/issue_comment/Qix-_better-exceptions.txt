This PR removes the color from logfiles while keeping them if they are outputted to the console. This is done by additionally filtering for `FileHandlers` during the hook call.

I also added a new test that explicitly creates a log file. The file doesn't contain any ANSI codes after the test has run.

I am not sure if the output has to be re-generated. Best would be if you could take a look before merging it. If they do need ot re-generate, let me know. I'll add them in a new commit.

Closes #87.


<!-- Issuehunt content -->

---

<details>
<summary>
<b>IssueHunt Summary</b>
</summary>

### Referenced issues

This pull request has been submitted to:
- [#87: Logged exceptions shouldn't contain colour](https://issuehunt.io/repos/84720080/issues/87)
---

IssueHunt has been backed by the following sponsors. [Become a sponsor](https://issuehunt.io/membership/members)
</details>
<!-- /Issuehunt content-->
Hello, I used your project in my own code. I download it by pypi, but I found some differences with your project just like:
code in your project
https://github.com/Qix-/better-exceptions/blob/master/better_exceptions/__init__.py#L52
```python
def excepthook(exc, value, tb):
    formatted = u''.join(format_exception(exc, value, tb))
    write_stream(formatted, STREAM)
```
code in pypi
```python
def excepthook(exc, value, tb):
    formatted = format_exception(exc, value, tb)
    write_stream(formatted, STREAM)
```
MD5 (better_exceptions-0.2.2.tar.gz) = 94bd5de2cf77e5b4189bd5e74637bd8c
It seems that you didn't update in pypi after you changed the code.
this commit: https://github.com/Qix-/better-exceptions/commit/f10e1fb1540d5241e658a632f9eae6f52af15084#diff-6093ef9883a0cd5b3837559bac19babd
Initial implementation of hyperlinks, set BETTER_EXCEPTIONS_HYPERLINKS=1 to activate.

This is not as useful as I expected as there line numbers can't be implemented yet [1], I'd probably still use this though.

I assume this needs tests, I haven't looked at how to do these yet.

[1]
https://gist.github.com/egmontkob/eb114294efbcd5adb1944c9f3cb5feda#gistcomment-2872221

TODO:   Don't output hyperlink for filenames like `<console>`
I'm a little unsure if this is what the issue here is cited: https://github.com/Qix-/better-exceptions/issues/51

But I believe this stops producing colorized output for my version of better-exceptions.
I find it annoying when tracebacks only show a single line for a frame, when that frame may be executing a multiline expression or frame and that single line leaves out critical context. I see that better_exceptions doesn't address this. Here's an example:

```python
import better_exceptions

better_exceptions.hook()


def div(x, y):
    return y / x


a = 1
b = 0
div(
    b,
    a,
)
```

Output:

```
Traceback (most recent call last):
  File "/Users/alexhall/Library/Preferences/PyCharm2018.3/scratches/scratch_400.py", line 14, in <module>
    a,
    └ 1
  File "/Users/alexhall/Library/Preferences/PyCharm2018.3/scratches/scratch_400.py", line 7, in div
    return y / x
           │   └ 0
           └ 1
ZeroDivisionError: division by zero
```

In particular this doesn't show the function `div` or the argument `b` (which causes the exception) at the top. It seems that multiline function calls generally show the last line containing significant tokens (i.e. not the trailing `)`) which is often not going to be what the user wants.

There was a discussion about solving this and showing all the lines of a multiline statement in the traceback: https://bugs.python.org/issue12458 It doesn't look like that's going to happen anytime soon, but a change has been merged which shows the first line instead of the last, so in the example above it shows `div(` in Python 3.8 (I just tested it). 

Some tools such as IPython (https://github.com/Qix-/better-exceptions/issues/10#issuecomment-513497696) and Sentry show a few lines of context before and after the line that the traceback points to. This context may be useful in its own right and some users may want something like that. But I don't know how useful it is and it makes tracebacks significantly longer. I don't think that should be the default. And I suspect it's partly done as a crude solution to the multiline statement problem.

It's easy to parse the source file and find the statement node containing a given line. I've done it in other projects. We'd need to think a bit about what to display for compound statements (e.g. `if` statements) but overall I think it's very doable. Then we can show the whole statement being executed without unwanted additional context. In most cases it would still be just one line.

The obvious problem is how to format the display of variables when showing multiple lines of source code. I'd like to brainstorm this issue. Some thoughts:

1. The current system of labels with vertical lines looks great. I think it should still be used where possible, even if that introduces inconsistency and some frames are displayed differently from others.
2. For statements with two lines, the current system can still work by showing variables both above and below the source lines, i.e. some label lines point up and others down, and the whole thing would look somewhat symmetric. The problem really arises with 3 or more lines.
3. Theoretically we could just insert the current variable labels below each line, so the variables and source lines would be interleaved. This is probably a bad idea as it would make the source much less readable.
4. The simplest option is to just list the variables below the source lines.
    1. https://github.com/cknd/stackprinter enhances this method slightly by highlighting each variable in the source and in the list with a unique colour instead of using syntax highlighting. I don't know if this actually improves readability.
    2. It may be useful to (optionally?) show all the local variables in a frame and not just the ones directly relevant to a line or statement. This is probably the only suitable way to do that.
5. Variables could be shown at the end of a line. This is what the PyCharm debugger does:
![Screen Shot 2019-07-20 at 22 26 29](https://user-images.githubusercontent.com/3627481/61583977-3f506200-ab40-11e9-9a67-f32733fbbfbd.png)
However horizontal space runs out fast.
6. Similar to point 1, a single frame could have multiple systems for displaying variables, e.g. a mix of 2, 4, and 5. But that would probably be confusing and a bad idea.
7. One day we may want to display the value of expressions like `a[b]` where evaluating that is safe, e.g. if `type(a) is dict`. The current system of labels would not work well for labelling all three of `a`, `b`, and `a[b]`.
I am using **Macos** and I am unable to use the navigation keys to jump into my previous Repl line, Instead it showing me escape characters. 

```
Abduls-Air:better-exceptions abdulniyas$ python3 -m better_exceptions
Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(BetterExceptionsConsole)
>>> import sys
>>> ^[[A # This is what I am getting when I press Up arrow.
```
I tried the same in my python interpreter but it does shows me the correct result.

```
Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import platform
>>> import platform # It shows the correct result when I press Up arrow.
```

I think `sys.__interactivehook__`  is not getting called([in order register the readline](https://github.com/python/cpython/blob/master/Lib/site.py#L405)) while initialising  `better-exception` Repl. So if I do the following in `better-exception` Repl I am getting correct result.

```
Python 3.6.2 (v3.6.2:5fd33b5926, Jul 16 2017, 20:11:06) 
[GCC 4.2.1 (Apple Inc. build 5666) (dot 3)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
(BetterExceptionsConsole)
>>> a = 0     
>>> ^[[A # while clicking up arrow.
Traceback (most recent call last):
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/code.py", line 64, in runsource
    code = self.compile(source, filename, symbol)
           │            │       │         └ 'single'
           │            │       └ '@@@REPL@@@1'
           │            └ '\x1b[A'
           └ <better_exceptions.repl.BetterExceptionsConsole object at 0x10249a048>
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codeop.py", line 168, in __call__
    return _maybe_compile(self.compiler, source, filename, symbol)
           │              │              │       │         └ 'single'
           │              │              │       └ '@@@REPL@@@1'
           │              │              └ '\x1b[A'
           │              └ <codeop.CommandCompiler object at 0x10249a080>
           └ <function _maybe_compile at 0x1024961e0>
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codeop.py", line 99, in _maybe_compile
    raise err1
          └ SyntaxError('invalid syntax', ('@@@REPL@@@1', 1, 1, '\x1b[A\n'))
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codeop.py", line 87, in _maybe_compile
    code1 = compiler(source + '
'", filename, symbol)
    │       │        │              │         └ 'single'
    │       │        │              └ '@@@REPL@@@1'
    │       │        └ '\x1b[A'
    │       └ <codeop.Compile object at 0x10249a0b8>
    └ None
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/codeop.py", line 133, in __call__
    codeob = compile(source, filename, symbol, self.flags, 1)
                     │       │         │       └ <codeop.Compile object at 0x10249a0b8>
                     │       │         └ 'single'
                     │       └ '@@@REPL@@@1'
                     └ '\x1b[A\n'
File "@@@REPL@@@1", line 1
    ^
SyntaxError: invalid syntax
>>> import sys
>>> sys.__interactivehook__() # Register the readline
>>> # Now onwards the navigation keys are working
```


Hi.

This is intended to fix #53, finally. :)

As discussed, I replaced `locale.getpreferredencoding()` with `STREAM.encoding`. Just in case, I added a fallback to `ascii` if `STREAM` has no or invalid `encoding` attribute. For the tests, the encoding can be configured with the [`PYTHONIOENCODING`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING) environment variable in place of `LANG` and `LC_ALL`. Also, I had to remove `encoding.py` and include it directly into `color.py` to avoid circular dependency.

Hopefully, this should solve reported encoding issues. ;)
<!-- Issuehunt Badges -->
[<img alt="Issuehunt badges" src="https://img.shields.io/badge/IssueHunt-%2450%20Funded-%2300A156.svg" />](https://issuehunt.io/r/Qix-/better-exceptions/issues/87)
<!-- /Issuehunt Badges -->


Currently if the output is to a terminal, then an exception that gets logged will also include the colour escape codes. This is not really ideal since they will just show up as raw escape codes in most editors, making the log harder to read. So it would be great if the logged exceptions could skip the colour-coding even if the current terminal supports colours. The output to the terminal itself should still be coloured of course. Thanks!


<!-- Issuehunt content -->

---

<details>
<summary>
<b>IssueHunt Summary</b>
</summary>


### Backers (Total: $50.00)

- [<img src='https://avatars3.githubusercontent.com/u/44827199?v=4' alt='issuehunt' width=24 height=24> issuehunt](https://issuehunt.io/u/issuehunt) ($50.00)
### Submitted pull Requests
- [#99 remove color from log files](https://issuehunt.io/r/Qix-/better-exceptions/pull/99)
---

#### [Become a backer now!](https://issuehunt.io/r/Qix-/better-exceptions/issues/87)
#### [Or submit a pull request to get the deposits!](https://issuehunt.io/r/Qix-/better-exceptions/issues/87)
### Tips

- Checkout the [Issuehunt explorer](https://issuehunt.io/r/Qix-/better-exceptions/) to discover more funded issues.
- Need some help from other developers? [Add your repositories](https://issuehunt.io/r/new) on IssueHunt to raise funds.
---
IssueHunt has been backed by the following sponsors. [Become a sponsor](https://issuehunt.io/membership/members)
</details>
<!-- /Issuehunt content-->
`repr()` might trigger database queries in Django, and then e.g. pytest-django
might throw an exception that disallows this.

Therefore when using better-exceptions from a debugger it might crash it there.

I think the call to `repr` should be protected against this.

```
.venv/lib/python3.7/site-packages/pdb.py:1325: in _format_extra_exception
    fmt_exc = list(better_formatter.format_exception(etype, evalue, tb))
../../Vcs/better-exceptions/better_exceptions/formatter.py:322: in format_exception
    for line in self._format_exception(value, tb):
../../Vcs/better-exceptions/better_exceptions/formatter.py:311: in _format_exception
    formatted, colored_source = self.format_traceback(exc_traceback)
../../Vcs/better-exceptions/better_exceptions/formatter.py:274: in format_traceback
    formatted, colored = self.format_traceback_frame(tb)
../../Vcs/better-exceptions/better_exceptions/formatter.py:234: in format_traceback_frame
    filename, lineno, function, source, color_source, relevant_values = self.get_traceback_information(tb)
../../Vcs/better-exceptions/better_exceptions/formatter.py:227: in get_traceback_information
    relevant_values = self.get_relevant_values(source, frame, tree)
../../Vcs/better-exceptions/better_exceptions/formatter.py:135: in get_relevant_values
    values.append((text, col, self.format_value(val)))
../../Vcs/better-exceptions/better_exceptions/formatter.py:117: in format_value
    v = repr(v)
../../Vcs/django/django/db/models/query.py:250: in __repr__
    data = list(self[:REPR_OUTPUT_SIZE + 1])
../../Vcs/django/django/db/models/query.py:274: in __iter__
    self._fetch_all()
../../Vcs/django/django/db/models/query.py:1242: in _fetch_all
    self._result_cache = list(self._iterable_class(self))
../../Vcs/django/django/db/models/query.py:55: in __iter__
    results = compiler.execute_sql(chunked_fetch=self.chunked_fetch, chunk_size=self.chunk_size)
../../Vcs/django/django/db/models/sql/compiler.py:1098: in execute_sql
    cursor = self.connection.cursor()
../../Vcs/django/django/db/backends/base/base.py:260: in cursor
    return self._cursor()
../../Vcs/django/django/db/backends/base/base.py:235: in _cursor
    self.ensure_connection()
E   Failed: Database access not allowed, use the "django_db" mark, or the "db" or "transactional_db" fixtures to enable it.
```

