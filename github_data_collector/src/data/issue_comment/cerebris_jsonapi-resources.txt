Require all Files in `jsonapi` and its subdirectories . 
```
Dir[File.expand_path('jsonapi/**/*.rb', __dir__)].reverse.each do |f|
  require f
end
```
Reduces file line by 90%. 
I stand to be corrected.

## This issue is a (choose one):

- [X] Problem/bug report.
- [ ] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [ ] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [ ] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

Travis builds are failing semi randomly now that we're testing against Postgres. Tests pass when rerun manually. I suspect a database contention or cleaning issue, but I haven't reproduced it reliably yet.
## This issue is a (choose one):

- [ ] Problem/bug report.
- [X] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [X] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [ ] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.


### Features:

Include this library and it's type definitions  to [sorbet-typed](https://github.com/sorbet/sorbet-typed). 

This project does use a lot **YARD** annotations should be some what easy to convert into `rbi `signatures by using something like [Sord](https://github.com/AaronC81/sord)
## This issue is a (choose one):

- [X] Problem/bug report.
- [ ] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [X] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [X] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [X] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description
### Bug reports:
After version 0.10, the relationships have a circular reference with other records.

I this example, I've three resources: car, brand and country. See bug report template:
```ruby
begin
  require 'bundler/inline'
  require 'bundler'
rescue LoadError => e
  STDERR.puts 'Bundler version 1.10 or later is required. Please update your Bundler'
  raise e
end

gemfile(true, ui: ENV['SILENT'] ? Bundler::UI::Silent.new : Bundler::UI::Shell.new) do
  source 'https://rubygems.org'
  git_source(:github) { |repo| "https://github.com/#{repo}.git" }
  ruby '2.6.5'
  gem 'rails', '~> 6.0.1'
  gem 'sqlite3', '~> 1.4'
  gem 'puma', '~> 4.1'
  gem 'bootsnap', '>= 1.4.2', require: false
  group :development, :test do
    gem 'byebug', platforms: [:mri, :mingw, :x64_mingw]
  end
  group :development do
    gem 'listen', '>= 3.0.5', '< 3.2'
    gem 'spring'
    gem 'spring-watcher-listen', '~> 2.0.0'
  end
  gem 'jsonapi-resources', '~> 0.10.1'
  # gem 'jsonapi-resources', '~> 0.9.10'
end

# prepare active_record database
require 'active_record'

class NullLogger < Logger
  def initialize(*_args)
  end

  def add(*_args, &_block)
  end
end

ActiveRecord::Base.establish_connection(adapter: 'sqlite3', database: ':memory:')
ActiveRecord::Base.logger = ENV['SILENT'] ? NullLogger.new : Logger.new(STDOUT)
ActiveRecord::Migration.verbose = !ENV['SILENT']

ActiveRecord::Schema.define do
  create_table "brands", force: :cascade do |t|
    t.string "name"
    t.integer "country_id", null: false
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
    t.index ["country_id"], name: "index_brands_on_country_id"
  end
  create_table "cars", force: :cascade do |t|
    t.string "name"
    t.integer "brand_id", null: false
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
    t.index ["brand_id"], name: "index_cars_on_brand_id"
  end
  create_table "countries", force: :cascade do |t|
    t.string "name"
    t.datetime "created_at", precision: 6, null: false
    t.datetime "updated_at", precision: 6, null: false
  end
  add_foreign_key "brands", "countries"
  add_foreign_key "cars", "brands"
end

# create models
class Car < ApplicationRecord
  belongs_to :brand
end
class Brand < ApplicationRecord
  belongs_to :country
  has_many :cars
end
class Country < ApplicationRecord
  has_many :brand
end


# prepare rails app
require 'action_controller/railtie'
# require 'action_view/railtie'
require 'jsonapi-resources'

class ApplicationController < ActionController::API
  include JSONAPI::ActsAsResourceController
end

# prepare jsonapi resources and controllers
class CarsController < ApplicationController
end
class BrandsController < ApplicationController
end
class CountriesController < ApplicationController
end


class CarResource < JSONAPI::Resource
  attributes :name
  has_one :brand
end
class BrandResource < JSONAPI::Resource
  attributes :name
  has_one :country
  has_many :cars
end
class CountryResource < JSONAPI::Resource
  attributes :name
  has_many :brands
end


# initialize app
Rails.application.initialize!

JSONAPI.configure do |config|
  # config.json_key_format = :underscored_key
  # config.route_format = :underscored_key
end

# draw routes
Rails.application.routes.draw do
  jsonapi_resources :cars do end
  jsonapi_resources :brands do end
  jsonapi_resources :countries do end
end

Rails.application
```

Make request "GET http://localhost:3000/cars?include=brand.country", the code above response this JSON:
```json
{
  "data": [
    {
      "id": "1",
      "type": "cars",
      "attributes": {
        "name": "Cruze"
      },
      "relationships": {
        "brand": {
          "data": {
            "type": "brands",
            "id": "1"
          }
        }
      }
    }
  ],
  "included": [
    {
      "id": "1",
      "type": "brands",
      "attributes": {
        "name": "Chevrolet"
      },
      "relationships": {
        "country": {
          "data": {
            "type": "countries",
            "id": "1"
          }
        },
        "cars": {
          "data": [
            {
              "type": "cars",
              "id": "1"
            }
          ]
        }
      }
    },
    {
      "id": "1",
      "type": "countries",
      "links": {
        "self": "http://localhost:3000/countries/1"
      },
      "attributes": {
        "name": "USA"
      },
      "relationships": {
        "brands": {
          "data": [
            {
              "type": "brands",
              "id": "1"
            }
          ]
        }
      }
    }
  ]
}
```

In version 0.9.10 (change GEMFILE), same code response this JSON:
```json
{
  "data": [
    {
      "id": "1",
      "type": "cars",
      "attributes": {
        "name": "Cruze"
      },
      "relationships": {
        "brand": {
          "data": {
            "type": "brands",
            "id": "1"
          }
        }
      }
    }
  ],
  "included": [
    {
      "id": "1",
      "type": "brands",
      "attributes": {
        "name": "Chevrolet"
      },
      "relationships": {
        "country": {
          "data": {
            "type": "countries",
            "id": "1"
          }
        }
      }
    },
    {
      "id": "1",
      "type": "countries",
      "links": {
        "self": "http://localhost:3000/countries/1"
      },
      "attributes": {
        "name": "USA"
      }
    }
  ]
}
```

Please, see the diferences between both responses. For example: In version 0.10 the country node have circular reference to others records.

I don't found in JSON:API documentation any explain about this behavor.

I think is a bug, because is breaking change. In my software, I've a feature to read all relationships and stack overflow error happened (in version 0.10).



## This issue is a (choose one):

Feature request

## Checklist before submitting:

- [x] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [x] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

Choose one section below and delete the other:

### Features:

In previous versions, a single resource instance was used for performing the operation and generating the response. Now these parts of the request handling are split into distinct steps which each use their own resource instances. As a result, any instance variables stored on the resource during the operation are not present when generating the response.

Any resource instances that are created for the operation processing should be used for the response generation as well.
## This issue is a (choose one):

- [ ] Problem/bug report.
- [x] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [x] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [ ] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

The JSON:API specification now recommends "Member names SHOULD be camel-cased." As such, we should update the default key formatter.

- [ ] Update code
- [ ] Update [docs](https://jsonapi-resources.com/v0.10/guide/formatting.html#Key-Format)
## This issue is a (choose one):

- [x] Problem/bug report.
- [ ] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [x] I've searched for an existing issue.
- [x] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [x] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

Choose one section below and delete the other:

### Bug reports:

When multiple invalid parameters are provided, only the first error is included in the response. This behavior changed in d177c228510e122ccb069c5f3eb3ad36b2261430: https://github.com/cerebris/jsonapi-resources/blob/a7447ac7d51dcc5c4d5ccc8a59bef5e4d3b744ea/lib/jsonapi/request_parser.rb#L629-L634
## This issue is a (choose one):

- [x] Problem/bug report.
- [ ] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [x] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [x] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [x] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

If you create a polymorphic association with custom `key_type` `id` is always taken which leads to a wrong data sharing.

### Bug reports:
Everything is on `lib/jsonapi/resource_serializer.rb:464`
When calling `source.public_send("#{relationship.name}_id")`, it is fine (faster) but it does not take care about custom `key_type`.
But if you call `source.public_send(relationship.name).try(:id)`, you're using the custom `key_type`. 


### Features:

We can set another argument to `has_one` to be able to mention that the `key_type` has been modified. 
Here is my proposition:
```ruby
# app/resources/my_awesome_resource
has_one :positionable, polymorphic: true, foreign_key: :positionable_id, foreign_key_type_changed: true

# jsonapi/resource_serializer.rb

  def foreign_key_value(source, relationship)
      # If you have changed the key_name, don't even try to look at `"#{relationship.name}_id"` 
      # just load the association and call the custom key_name
      foreign_key_type_changed = relationship.options[:foreign_key_type_changed] || false
      related_resource_id =
        if source.preloaded_fragments.has_key?(format_key(relationship.name))
          source.preloaded_fragments[format_key(relationship.name)].values.first.try(:id)
        elsif !foreign_key_type_changed && source.respond_to?("#{relationship.name}_id")
          # If you have direct access to the underlying id, you don't have to load the relationship
          # which can save quite a lot of time when loading a lot of data.
          # This does not apply to e.g. has_one :through relationships.
          source.public_send("#{relationship.name}_id")
        else
          source.public_send(relationship.name).try(:id)
        end
      return nil unless related_resource_id
      @id_formatter.format(related_resource_id)
    end
```
https://github.com/cerebris/jsonapi-resources/blob/41df1475876dd7cfa3459e9cf0241a82e71c59c9/lib/jsonapi/processor.rb#L89

## Configuration for JSONAPI http://jsonapi-resources.com/v0.8/guide/configuration.html
JSONAPI.configure do |config|
  # # :none, :offset, :paged, or a custom paginator name
  config.default_paginator = :paged
  config.default_page_size = 10
  config.maximum_page_size = 50config.top_level_meta_include_record_count = true
  config.top_level_meta_record_count_key = :record_count
  config.top_level_meta_include_page_count = true
  config.top_level_meta_page_count_key = :page_count
end


class ContactResource < BaseResource
  attributes :name, :email

  paginator :none
end

When paginator is set to :none in resource level, Then it shows undefined method `calculate_page_count' for nil:NilClass


solution:
https://github.com/cerebris/jsonapi-resources/blob/41df1475876dd7cfa3459e9cf0241a82e71c59c9/lib/jsonapi/processor.rb#L89

if (paginator && JSONAPI.configuration.top_level_meta_include_page_count && record_count)
        page_count = paginator.calculate_page_count(record_count)
      end
## This issue is a (choose one):

- [ ] Problem/bug report.
- [x] Feature request.
- [ ] Request for support. **Note: Please try to avoid submitting issues for support requests. Use [Gitter](https://gitter.im/cerebris/jsonapi-resources) instead.** 

## Checklist before submitting:

- [x] I've searched for an existing issue.
- [ ] I've asked my question on [Gitter](https://gitter.im/cerebris/jsonapi-resources) and have not received a satisfactory answer.
- [ ] I've included a complete [bug report template](https://github.com/cerebris/jsonapi-resources/blob/master/lib/bug_report_templates/rails_5_master.rb). This step helps us and allows us to see the bug without trying to reproduce the problem from your description. It helps you because you will frequently detect if it's a problem specific to your project.
- [ ] The feature I'm asking for is compliant with the [JSON:API](http://jsonapi.org/) spec.

## Description

Choose one section below and delete the other:

### Features:

If I set my attribute casing to be say camelCased, but the request comes in with attributes that are snake_cased or kebab-cased, when we throw a "param not allowed" can we instead check if the cases just mismatch and instead throw an error indicating that you may have been using the wrong case. This is something that happens occasionally especially with new engineers getting on a project, but would instantly save a bunch of frustration here and there when these bugs happen.