The default shell on the latest macOS is Z shell and it seem to have issues with Resty:

The problem is that when running under `zsh` the special characters in the JSON responses are printed as is, so, for example, the new line character is actually printed to the terminal instead of being outputted like `"first line\nsecond line"`. JSON spec requires all control characters to be escaped, so piping `resty` output to a JSON parser is impossible now. E.g. `GET /some/api | jq` will fail.

Given that curl works fine with Z, the issue is probably on the Resty side.

Thank you
When a subshell is created the resty functions are not exported.

That patch fix the problem on bash shell, others shells can not have this kind of functionality.
It was brought to my attention today, that the screencast has been been removed from the source at screencast.com, so I updated by blog post accordingly. As such, I believe the link to my blog is no longer of interest in this README.
After upgrading to newest resty ( version 3 ) my bash scripts stopped to work.

I found that  aliases for example  **GET=resty-get**  where not resolved. I tested with `type -a GET`.

For me adding a bash option solved the problem.

```
#!/bin/bash
shopt -s expand_aliases
```

See also on:
[https://unix.stackexchange.com/questions/1496/why-doesnt-my-bash-script-recognize-aliases]

Bernd
In a somewhat more ambitious move, provided that you have the api specification yaml e.g: [tesla api](https://app.swaggerhub.com/apis/fehguy/tesla/2.0.1).
Press tab to autocomplete the features that are implemented..


Hi Micha

First of all thank you for developing resty.

I'm trying to write a bash file to automatically execute some steps, but if I execute each command in a terminal everything works fine, but in bash all my POST/GET commands fail with the message command not found....

I read up online about PATH settings that could be causing this, I read on github the examples and everything seems perfect to me, and still it's not working....

```
#!/bin/bash

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin

source /sbin/resty 'http://abu/api'

POST /login '{"username" : "report", "password" : "XXXXXXXX"}' | jshon -e auth_token -u
```

I added the PATH manually just to make sure it's correct, and for security reasons I replaced the real password with XXXX
If I would execute ./checkben.sh the output would be:

./checkben.sh: line 11: POST: command not found
warning: nothing to read

If I would execute each command manually at the terminal the output would be:

djA6MDUwNzc3MzMtZjg5OC00YTdiLWI2OGQtNGUzMDgzMjg5ODVhOjM3Oi91c3IvYnAvbG9ncy5kaXIvZ3VpX3JlcG9ydC5sb2c6MA==

Which is EXACTLY what I needed, so it is working fine at the terminal prompt....
I'm following the git instructions, but I am unable to successfully load resty in the shell on a Mac.   I wanted to ask if I'm mis-understanding the `source` syntax

When trying to execute the following script, it seems resty takes no action (there are no errors being thrown on the target server), nor in the Terminal

I've installed resty via the git install method.  The same POST command works on a single file I execute in the shell via  resty (so I know resty is correctly added to my Path, and I know the command syntax is good...)

Also - the script below works to upload all files in the referenced folder if I replace the resty line with a curl command - it's just the resty `source` part that seems not to work.

Any help appreciated - I'd much prefer resty to using straight curl syntax!

```
#!/bin/bash
dir="/Users/bewheele/Downloads/Images"
 for file in `find $dir -type f`
  do
  filename=`basename $file`;
  echo $file
   # Load resty, don't write to the history file, and set the URI base
  . /Users/bewheele/resty -W 'http://localhost:4504 -u admin:admin' POST /api/assets/myfolder/* -F"name=$filename" -F"file=@$file"
done
```



Fixing the scope of curl_opt so that it does not leak between requests. Before this fix, if you issue a HEAD and then a GET, you are still getting the `-I` parameter and causes the GET to be treated as a HEAD.

This includes the fixes from https://github.com/micha/resty/pull/80 and will wait for that to get merged (soon?) and then rebase mine.
Not sure if I was doing something wrong but after
```
git clone git@github.com:micha/resty.git
. resty
resty HOST
GET /URL
```
The ~/.resty/c was not created and the cookies were not saved.
I had to create ~/.resty/c myself before the cookies were saved.

Also it looks like the previous code to create the cookie file only ran if the cookie file already exists and overwrote the host file (but not $_RESTY_HOST).
This allows to overwrite existing files on output redirect with `>`.

Fixes issues:
https://github.com/micha/resty/issues/78
and
https://github.com/sorin-ionescu/prezto/issues/1527