I have c/c++ code that I want to convert gradually to Rust, the C/C++ code uses windows headers and uses com interfaces heavily, how do you pass compatible pointers to com interfaces between Rust and C/C++? When I try to do this the naive way, just passing *mut dyn IOleObject through ffi boundary, then rustc warns that interface is not ffi safe:
>warning: `extern` block uses type `dyn mshtml::IOleObject` which is not FFI-safe: trait objects have no C equivalent

Everything still compiles but my program crashes.

How do you do this correctly?
For example, I have an AutoCAD COM's TBL file, I want to use this tbl file to generate all the interface.
Continuing conversation that started in #97, it is currently possible to call interface methods after `CoUninitialize` has been called. It is uncertain whether this is actually unsafe or whether the program will be properly aborted once an interface method is actually called.

One possible solution is to tie the lifetime of the runtime to the lifetime of each interface but this makes the crate much less ergonomic. One other solution is to get rid of the explicit runtime struct and simply expose an unsafe `CoUninitialize` function that requires the user verifies that no active interfaces are still alive when it is called. 

On top of this other constructs could be built that make things easier to handle but might require some sort of runtime cost (e.g., a reference counter construct that only call CoUninitialize when all interface references have been dropped).
I was looking into adding support for generic types into `[co_class]` attribute to enable easy way for a generic class factory implementation (for #32). Ironically this causes problems, because it's impossible to implement a class factory for such classes.

Ignoring the generic type support, The use case for `[co_class]` without a class factory is COM classes that the library wants to implement for the purpose of implementing an interface but which do not need to be available for construction through `CoCreateInstance` (they don't even need to have CLSID).

Currently `com-rs` is a bit ambiguous in this situation with part of the class factory infrastructure being implemented in `[co_class]` while the CLSIDs aren't defined until the class is exposed through `inproc_dll_module`.

Although excluding the generic type scenario, the current `co_class`-generates-class-factory implementation doesn't prevent implementing `co_class`es that are never intended to be constructed by a COM client. The class objects are just a bit unneeded in such case. So the only scenario that I can think of, which is blocked by the current implementation, is the generic type support.

And even that can technically be implemented by conditionally avoiding the class object generation if there are type parameters in the struct.
The `#[com_interface]` macro didn't take the unsafety into account when implementing the traits on `InterfaceRc`/`InterfacePtr`.

One solution for the safety problem in issue #97 would be to mark the traits themselves as `unsafe`. While this does nothing to the callers, it would serve as a hint to the trait `impl` that the implementation can be called from outside of Rust's usual safety model. I was about to even suggest that `#[com_interface]` might _require_ for the traits to be marked as `unsafe`.

Also added a rudimentary compile test for this case. It might be worth it to look into an actual compile test crate, such as [trybuild](https://github.com/dtolnay/trybuild).
Any plans to add windows com examples?

Context menu perhaps
[https://code.msdn.microsoft.com/windowsapps/CppShellExtContextMenuHandl-410a709a](url)
[https://docs.microsoft.com/en-us/windows/win32/ad/implementing-the-context-menu-com-object](url)
The following use case:

```C++
// C++ COM client

CComPtr<ILogic> logic = ...;
CComPtr<IData> data = ...;
logic.DoLogic(data);  // C++ holds reference count. This is essentially "a borrow".
```

```rust
// Rust COM server

impl ILogic for CoLogic {
    fn do_logic(&self, data: *mut c_void) {
        // Safety requirements for InterfacePtr::new.
        // - ptr is valid pointer of 'T'
        // - ptr must live as long as InterfacePtr
        let ptr = unsafe {
            InterfacePtr<IData>::new(data);
        }

        // Rust wants ownership and turns the 'ptr' into a Rc.

        // This should increment reference count (but doesn't currently).
        let rc = InterfaceRc::new(data);

        // This would increment reference count, but is not implemented for InterfacePtr.
        let rc = InterfacePtr::get_interface<IOtherData>(ptr);
    }
}
```

So couple of needs:
- Provide unsafe "`InterfacePtr` into `InterfaceRc` without `add_ref`" method.
  - Currently `InterfaceRc::new` does this, but isn't marked as unsafe, thus leading to easy double-release, if the user forgets to manually call `add_ref`.
- Provide safe "`InterfacePtr` into `InterfaceRc` with `add_ref`" method.
  - As long as `InterfaceRc` does `add_ref`, there should be no other safety concerns, assuming the pointer itself is valid (which `InterfacePtr` seems to imply based on the safety requirements on its `new` method).
- Implement `get_interface` on `InterfacePtr`.
  - Currently the user _must_ turn any pointer into `Rc` type just to call `get_interface`

_Maybe_ look into implementing a lifetime scoped variant of `InterfacePtr`:
```rust
#[repr(transparent)]
ScopedInterfacePtr<'a, TInterface> {
    ptr: *mut c_void,
    phantom: &'a PhantomData<TInterface>
}
```
This should prevent accidentally moving the pointer somewhere that would outlive the function call.
```rust
#[com_interface(00000000-0000-0000-C000-000000000046)]
pub trait IUnknown {
    unsafe fn query_interface(
        &self,
        riid: winapi::shared::guiddef::REFIID,
        ppv: *mut *mut winapi::ctypes::c_void
    ) -> winapi::shared::winerror::HRESULT;
    fn add_ref(&self) -> u32;
    unsafe fn release(&self) -> u32;
}
```

This way of declaring COM interfaces is really convenient, but IMO it provides a wrong feeling of safety. An erroneous COM server may cause memory errors, even in simple functions like ``add_ref``. Further I would argue this functions are all special kinds of FFI calls (using the COM ABI), so like every normal FFI function they should always be unsafe. Currently the easiest way to use the ``com_interface`` macro (to not use unsafe at all) is probably the most dangerous one.

This extends to the ``com::InterfaceRc`` type. I think constructing this struct should also be unsafe. The user should be forced to verify the called COM server or signal their trust by constructing this type within an unsafe block.

This would lead to a less convenient usage, but I think this would still be a better approach, because most of the time the COM interfaces will probably not be used directly in idiomatic Rust code. Most of the time their will probably be behind another layer of abstraction and I think this should also be the layer providing the safe interface for the COM types.

However I see that especially in cases where COM is used as a system for plugin-like components it is in general impossible to verify the correctness, so their is probably a practical compromise needed.
I was trying to look through the examples, but couldn't find a way to implement something similar to:

https://github.com/Rantanen/intercom/blob/15d8af0d22114ebf619513293b79dfa1e7613973/test/testlib/src/return_interfaces.rs#L18-L20

I got as far as constructing the `CreatedClass` with `CreatedClass::allocate(..)`, but got stuck turning it into `ICreatedClass` in a safe way. The only approach I found was going through the raw `query_interface` API, such as:

```rust
let s = CreatedClass::allocate(..);
s.add_ref();
let rc = unsafe {
    let mut ptr : *mut winapi::ctypes::c_void = std::ptr::null_mut();
    s.query_interface(
        &IID_ICREATEDCLASS as *const _,
        &mut ptr as *mut _,);

    com::InterfaceRc::<dyn ICreatedClass>::new(
        unsafe { com::InterfacePtr::new(ptr) }
    )
};
```

Encountered this as part of my benchmarking effort for Intercom. Current results show Intercom as an order of magnitude slower for simple method calls, with com-rs managing four COM calls (and their simple implementation) in 10 ns/iteration while Intercom spends 66 ns/iteration on them (135ns/iter after introducing logging, but not using it). Makes me re-consider whether I should put logging in Intercom behind a non-default feature.

Then again, a struct that does nothing but `set`/`add`/`get` a `u32` value into a `Cell<u32>` is a bit extreme benchmark... :)
To reduce the amount of generated code, we can look to refactor `get_relevant_registry_keys` out