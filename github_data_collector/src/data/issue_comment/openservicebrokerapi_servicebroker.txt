**What is the problem?**

We have been trying to figure out a way to implement [credential rotation](https://blog.heroku.com/rotate_database_credentials_on_heroku_postgres_) of individual bindings through the OSB specification.  Additionally we need to support credential rotations on a schedule either initiated by the broker, or defined by the broker.  This discussion has been ongoing and with previous discussions taking place in multiple issues / PRs.

* Binding Expiration [here](https://github.com/openservicebrokerapi/servicebroker/issues/612) and [here](https://github.com/openservicebrokerapi/servicebroker/pull/697)
* Bind / Unbind vs PATCH [here](https://github.com/openservicebrokerapi/servicebroker/issues/176) and [here](https://github.com/openservicebrokerapi/servicebroker/issues/123)

We have been discussing Bind / Unbind vs PATCH and would like some clarification around the following line in the specification.


> When a Service Broker receives an unbind request from a Platform, it MUST delete any resources associated with the Service Binding. In the case where credentials were generated, this might result in requests to the Service Instance failing to authenticate.


This seems to indicate that when a binding is deleted that resources associated with the service binding should be deleted.  Using multiple service bindings as a way to support credential rotation for all partners has the potential to be an unsafe assumption. We have been talking through various options to extending the OSB specification to allow for us to make credential rotation available to all service brokers in the platform.  

We have sketched out how these steps could work but wanted to get some feedback around our assumption of possible data loss on unbind.  We had discussed having another level of indirection between the platform and broker to mask this, which also seems complicate the user experience.  Additionally we would need to save parameter bindings which might contain confidential information according to this paragraph, which while about instances, I assume may also apply to bindings.


> Service Brokers MAY choose to not return some or all parameters when a Service Instance is fetched - for example, if it contains sensitive information.

### Use-case: Datastore

A service binding represents a database role and the associated permissions. No user data is “owned” by the binding.  Performing an unbind operation would just involve removing the role and leaving the data created using the role present in the database. This scenario has some ambiguity. 

* If a bind / unbind approach is used, the platform must coordinate the credential rotation and the broker must support multiple bindings representing the same permissions. 
* If a PATCH approach is used, the broker must track the multiple credentials inside the single binding and the associated permissions and support creating and revoking the credentials. 

### Use-case: Logging / Metrics

A service binding represents not only authentication and connection information, but also a stream of logs or metric data.  Performing an unbind operation in these situations has some ambiguity. 

* Should I mark records associated with this binding for removal or should the data remain after the binding removal?
* How and when should the data created using the service binding be deleted?
* If a bind / unbind approach is used, a broker would need an identifier to correlate the two bindings as a single data stream which is not available in a general manner currently.
* If the PATCH approach is used, a broker would need less context and only need to support creating and revoking credentials for a single binding. 

**Who does this affect?**

This affects both service broker authors and platform authors.

**Do you have any proposed solutions?**

Depending on the discussion around this issue, we would develop a PR to outline the following protocol:

* Platform should notify broker that new credentials have been requested
* Broker supplies the platform with new credentials
* Platform notifies broker that old credentials are no longer needed


**What is the problem this PR solves?**

The PR adds an optional expiration date and time to a binding. It should indicate applications and platforms that this binding should not be used anymore after this date. It may also be used to initiate automatic rotation of bindings and credentials.

The new `expires_at` field is enclosed in a new `metadata` object, which may be used for other binding management data in the future.


**Checklist:**
- [x] The [swagger.yaml](swagger.yaml) doc has been updated with any required changes
- [x] The [openapi.yaml](openapi.yaml) doc has been updated with any required changes

Signed-off-by: leonwanghui <wanghui71leon@gmail.com>

**What is the problem this PR solves?**
See https://github.com/openservicebrokerapi/osb-checker/issues/43#issuecomment-547807440

**Checklist:**
- [ ] The [swagger.yaml](swagger.yaml) doc has been updated with any required changes
- [ ] The [openapi.yaml](openapi.yaml) doc has been updated with any required changes

Hi,

1. Generate Java code from the [swagger.yaml](https://github.com/openservicebrokerapi/servicebroker/blob/e953ad2b478264900f6376ec886bb5921073aac2/swagger.yaml) using swagger-codegen-cli with this command:

`java -jar modules/swagger-codegen-cli/target/swagger-codegen-cli.jar generate -i "/tmp/swagger.yaml" -l jaxrs-cxf -o /tmp/project`

2. Use the generated classes in a spring boot application and enable the Swagger2Feature:

`endpoint.setFeatures(Collections.singletonList(new Swagger2Feature()));`

You get a `java.lang.NullPointerException: null at io.swagger.models.refs.GenericRef.<init>(GenericRef.java:44)` attached [npe.log](https://github.com/openservicebrokerapi/servicebroker/files/3588975/npe.log)


The cause is probably the generated model class [Object.java.txt](https://github.com/openservicebrokerapi/servicebroker/files/3588979/Object.java.txt) which is generated without properties according to the definition in https://github.com/openservicebrokerapi/servicebroker/blob/e953ad2b478264900f6376ec886bb5921073aac2/swagger.yaml#L799


The workaround is to delete the generated Object.java file and let all the classes that uses it (for example, `ServiceBindingVolumeMountDevice.mountConfig`) to use `java.lang.Object` instead.
**What is the problem this PR solves?**
Closes #676 

**Checklist:**
- [x] The [swagger.yaml](swagger.yaml) doc has been updated with any required changes
- [x] The [openapi.yaml](openapi.yaml) doc has been updated with any required changes

**What is the problem?**
A description of what the problem is.

Currently the binding response from the service broker is not structured, brokers can returns anything in binding response, which is sometimes challenging for application developers to interpret. 

**Who does this affect?**
Broker authors and application developers

**Do you have any proposed solutions?**
Lets introduce a concept of a "Kind" for a service, which can help us predict/interpret the binding response 

**Additional context**
I have created a proposal here: https://docs.google.com/document/d/1VTDc_uAKOtIpYZCYMruGVHn2Gj7cKeyuTP9fmDwp46M/edit# please feel free to leave comments


Similar to 
https://github.com/openservicebrokerapi/servicebroker/issues/116


**What is the problem?**
When the service broker is used across multiple platform instances, it would be nice to understand which instance is making a call.

It seems that Spring Cloud Open Service Broker implementation has such a header defined, however, I could not find traces of it in the spec..

**Who does this affect?**
Does this affect service broker authors, platform authors or developers?
- developers,
- platform authors
- broker authors

**Do you have any proposed solutions?**
Include an **X-Api-Info-Location** header as a part of the specification and allow for platforms to set this header during all requests (catalog, provision, bind, unbind, update, deprovision)

The format of the header MUST be:
```
X-Api-Info-Location: Platform value
```
Example:
```
X-Api-Info-Location: cloudfoundry ewogICJpbmZvX2xvY2F0aW9uX3VybCI6ICJodHRwczovL2FwaS5wbGF0Zm9ybS5leGFtcGxlLmNvbS92Mi9pbmZvIgp9
```
Where the value, when decoded, is:

```
{
  "info_location_url": "https://api.platform.example.com/v2/info"
}
```

**Additional context**
Here is how Pivotal describes the usage:

> X-Api-Info-Location Header
>
>All calls to the broker from Cloud Foundry include an X-Api-Info-Location header containing >the /v2/info url for that instance. The /v2/info endpoint will return further information, >including the location of that Cloud Foundry instance’s UAA.
>
>Support for this header was introduced in cf-release v212.
[Pivotal Docs](https://docs.pivotal.io/pivotalcf/2-5/services/supporting-multiple-cf-instances.html)
## Why

The specification defines endpoints that allow the lifecycle management of service instances and service bindings. However, a common complaint is that it does not support some of those important “day 2” operations that developers might want, e.g backup and restore. Also that it does not allow service specific operations, e.g. MySQL set leader. To accomplish this Service Brokers authors have the option to either go off-spec or to misuse the spec (e.g. `cf update-service -p ‘{“trigger-backup”: true}’`).

The specification needs an extension mechanism to allow authors to define new endpoints.

There was a previous [PR attempt](https://github.com/openservicebrokerapi/servicebroker/pull/431) to provide this functionality through “generic extensions” which was opened in 26 Jan 2018. This PR proved complex to implement in part extensions could be hosted anywhere and it allowed any authentication via [OpenAPI security schemas](https://swagger.io/docs/specification/authentication/). 

## What

This is our first attempt to revive generic extensions!

This PR is similar to the [previous PR](https://github.com/openservicebrokerapi/servicebroker/pull/431) in that:
* It provides extensions that act on a service instance.
* It uses OpenAPI to describe the extension.
* It has an URN for each extension. The hope is services share extension specs and common tooling can be created.

It differs in that:
* The extensions are discoverable from the catalog - allowing users to know what extensions are available before provisioning an instance.
* All extensions must be hosted on the service broker itself (although the service broker may act as a proxy if it likes). Since platforms already talk to brokers this simplifies things, e.g. networking issues.
* All extensions must have the same authentication method already used between platform and broker. This makes it easier to implement both platforms and broker.

In order to not limit platform implementations we have not provided guidance on HOW the extension is triggered.  Since the endpoint is hosted by the broker it is likely that platform makes a request to trigger the extension on the user’s behalf. This is the same as how all endpoints are called today from known platforms.

## Open questions:
* Should the OpenAPI document be required?  OpenAPI allows clients to discover how to consume the endpoints. There are [tools](https://openapi.tools/) that allow for auto generated clients/UX. However it is unknown whether this would be used. Will the people who write tools for the extensions just **know** how the extension works?
* Is it confusing that the OpenAPI paths live on a base route?
* Should we be more opinionated about how the extension gets trigger? 
* Should extensions description be optional?
* Do we need to be explicit about how brokers do async operations using this model?

## Notes

* We have not updated the OSBAPI OpenAPI yet for this PR since we wanted to get feedback first.

This PR came from [this doc](https://docs.google.com/document/d/1OKlsQKUab3yvOyQjvh8HFFcIfkILyFMaq0xngTdTcek/edit#).

Sam & @georgi-lozev 

_(If this is unmerged in 2025, please close)_

Closes #114 
When an instance update or delete fails, the platform doesn't know the state of the instance and doesn't know if the operation can be repeated.
This PR allows brokers to provide this additional information to the platform in case of a failure.

This PR replaces PR #570.
We sometimes encounter use cases where it's demanded that credentials created by service bindings carry an explicit expiry policy. For example, a credential created for a database must be rotated at least every 180 days. A similar issue exists around service keys (though they are Cloud Foundry specific and mostly unnecessary in my experience when `cf ssh` tunnels are available).

I see this has not been discussed before within the context of the OSB API spec and want to check in with the community to see if there's a wider demand/recognition of this topic? 

There are multiple ways to attack this i.e. the responsibility matrix `[expiry policy configuration, expiry enforcement] * [service broker, platform]` but I think it makes sense to gather a few other interested parties first before discussing this in detail.