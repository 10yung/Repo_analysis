We have been using pubsub1 and starting today I've seen some serious issues stemming from undelying I/O. I find my application sitting in the following stack trace pretty much indefinitely:

```
    #0  0x00007fc104cb6876 in recv () from /nix/store/6yaj6n8l925xxfbcd65gzqx3dz7idrnn-glibc-2.27/lib/libpthread.so.0
    #1  0x000055d65f83466a in <std::net::tcp::TcpStream as std::io::Read>::read ()
    #2  0x000055d65f3ccb8a in <hyper::net::HttpStream as std::io::Read>::read ()
    #3  0x000055d65f3da2f5 in rustls::msgs::deframer::MessageDeframer::read ()
    #4  0x000055d65f3d58e1 in <rustls::client::ClientSession as rustls::session::Session>::read_tls ()
    #5  0x000055d65f3cd006 in <hyper_rustls::TlsStream as std::io::Read>::read ()
    #6  0x000055d65f3cd63f in <hyper_rustls::WrappedStream as std::io::Read>::read ()
    #7  0x000055d65f278086 in <hyper::net::HttpsStream<S> as std::io::Read>::read ()
    #8  0x000055d65f453ec4 in <hyper::http::h1::Http11Message as hyper::http::message::HttpMessage>::get_incoming ()
    #9  0x000055d65f457947 in hyper::client::response::Response::with_message ()
    #10 0x000055d65f46792d in hyper::client::request::Request<hyper::net::Streaming>::send ()
    #11 0x000055d65f45ef20 in hyper::client::RequestBuilder::send ()
    #12 0x000055d65f38f23c in google_pubsub1::ProjectTopicPublishCall<C,A>::doit ()
```

which seems to suggest that there has been some change in how google handles responses (for the worse) and it is effectively DoSing me. I would have just gone ahead and set some timeout, but this library doesn't appear to expose that functionality!

FWIW noting the sad results from https://medium.com/@shnatsel/smoke-testing-rust-http-clients-b8f2ee5db4e6 the sensible solution might be having these libraries not make the choice for http library at all and just generate `Request`s which people would then use with whatever version of whatever library they want?
I am trying to encrypt and decrypt a small text using the CloudKMS API provided by this repo. I am able to encrypt using  
``` rust
let req = EncryptRequest {
            plaintext: Some(base64::encode(data)),
            additional_authenticated_data: None
        };
        let res = self.hub
            .projects()
            .locations_key_rings_crypto_keys_encrypt(
                req,
                self.symmetric.as_str()
            ).doit()?;
```

However when I try to decrypt the output in the integration test I obtaint `Error404` from Google API. The Decrypt is done as follows:
```rust
        let req = DecryptRequest {
            ciphertext: Some( String::from_utf8(data.to_vec()).unwrap()),
            additional_authenticated_data: None
        };
        let res = self.hub
            .projects()
            .locations_key_rings_crypto_keys_decrypt(
                req,
                self.symmetric.as_str()
        ).doit()?;
```

and error obtained is 
```
Error: GoogleKMS(Failure(Response { status: NotFound, headers: Headers { Date: Thu, 02 Jan 2020 10:08:22 GMT
, Content-Type: text/html; charset=UTF-8
, Server: ESF
, Content-Length: 1696
, X-XSS-Protection: 0
, X-Frame-Options: SAMEORIGIN
, X-Content-Type-Options: nosniff
, Alt-Svc: quic=":443"; ma=2592000; v="46,43",h3-Q050=":443"; ma=2592000,h3-Q049=":443"; ma=2592000,h3-Q048=":443"; ma=2592000,h3-Q046=":443"; ma=2592000,h3-Q043=":443"; ma=2592000
, }, version: Http11, url: "https://cloudkms.googleapis.com/v1/projects/{OurProject}/locations/northamerica-northeast1/keyRings/{OUR_KEYRING}/cryptoKeys/{OUR_KEY}/cryptoKeyVersions/1:decrypt?alt=json", status_raw: RawStatus(404, "Not Found"), message: Http11Message { is_proxied: false, method: None, stream: Wrapper { obj: Some(Reading(SizedReader(remaining=0))) } } }))
```

I am sure that `self.symmetric` is pointing to the same key, I have also trying to create a new one and hardcoded into the code. Same result. ServiceAccount used in my testing has Project Owner role, to make sure that it cannot be Privilages problem.

Any help would be much appriciated. 
How do I read a part of a large file using google_storage1? It looks like the only way is to add a "Range: from-to" HTTP header, but I can't find a way to do that in code generated using google-apis-rs. Can we somehow allow setting an arbitrary header in an HTTP request? 
Thank you for the very impressive group of API examples!

In using the docs1-cli example, I am able to create a new blank document.  However, I am not able to insert data into the document using the batch-update.  I have read through the google api docs, but do not understand how to access the features of the api.

Could you provide an example that would 

1. Insert text into a blank document
2. Replace text in a current document

Thank you!
A lot of the examples show that to use `google-storage1` or any other `google-*` crate that you need to include the crate and the correct version of hyper and some other things in `Cargo.toml`. Would you consider doing something like 
```
pub mod deps {
    pub use yup_oauth2;
}
```
so that consumers of the api could do 
```
use google_storage1::deps::*;
```
and then we wouldn't have to exactly match hyper versions or have clients depend on crates that are part of the public api to be able to use them?
Running `calendar.events.list` fails when it isn't given a scope.

```rust
let result = hub
              .events()
              .list(&calendar.id)
              .time_min(&start.to_rfc3339())
              .time_max(&end.to_rfc3339())
              .max_results(100)
              .single_events(true)
              .order_by("startTime")
              .doit();
```

fails with

```rust
Err(MissingToken(StringError { error: "Invalid Scope: \'no description provided\'\n" }))
```

However, by adding `.add_scope(gcal::Scope::Readonly)`, the call succeeds:

```rust
let result = hub
              .events()
              .list(&calendar.id)
              .add_scope(gcal::Scope::Readonly)
              .time_min(&start.to_rfc3339())
              .time_max(&end.to_rfc3339())
              .max_results(100)
              .single_events(true)
              .order_by("startTime")
              .doit();
```

It appears that the default scope if none is given is `gcal::Scope::EventReadonly` (https://docs.rs/google-calendar3/1.0.10+20190702/src/google_calendar3/lib.rs.html#11260). I wasn't able to figure out how to change the default in `/etc/api/calendar/v3/calendar-api.json` (or even if the default should be changed).

---

Note: My application only uses `calendar.calendarList.list` and `calendar.events.list`; the former works without specifying a scope, the latter does not.

I once had an application running with 1.0.7+something and it worked without adding a scope. I believe 1.0.8+something did not work without adding a scope. I just updated to 1.0.10 and found the scope workaround.
Given spreadsheet with the number 5 on cell A1, the following request:
```
hub
        .spreadsheets()
        .values_get(spreadsheet_id, "Sheet1!A1:A1")
        .value_render_option("UNFORMATTED_VALUE")
        .add_scope(Scope::Spreadsheet)
        .doit()
        .unwrap();
```

panics with:
```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: JsonDecodeError("{\n  \"range\": \"\'Sheet1\'!A1\",\n  \"majorDimension\": \"ROWS\",\n  \"values\": [\n    [\n
   5\n    ]\n  ]\n}\n", Error("invalid type: integer `5`, expected a string", line: 6, column: 7))', src/libcore/result.rs:997:5
```

This happens because, with the `UNFORMATTED_VALUE` render option, the API will return numbers instead of strings as the cell value, however, `google_sheets4::ValueRange` only accepts Strings as cell values.
Hope someone can help, I am trying to rename a file on google drive using this library, but I simple cannot get it to work.

From what I can read on in the documentation here and the official one from Google it should be something like this, but the fucktion doit() is private and cannot only called by update() and upload_resumable(), but I don't want to overwrite the file, I just want to update its name.
```Rust
type HubType = DriveHub<Client, Authenticator<DefaultAuthenticatorDelegate, DiskTokenStorage, Client>>;

fn rename(hub: &HubType, file_id: &str, new_name: String) {
    let mut file = File::default();
    file.name = Some(new_name);

    let result = hub.files()
        .update(file, file_id)
        .supports_all_drives(true)
        .doit();

    info!("Rename - {:?}", result)
}
```

I hope someone can help, because from what I can see this will also be a problem if I want to move the file.
The `google_sheets4::Request` structure is composed of an enormous number of fields, however, as indicated in the Google Sheets API Reference, those fields are ['union fields'](https://developers.google.com/sheets/api/reference/rest/v4/spreadsheets/request), so only one may be present for each `Request`. 

As the number of fields seems extremely large, I decided to lookup the `std::mem::size_of::<google_sheets4::Request>()`, which returned `13336`. This seems really too unnecessarily expensive, given that we will only use one field at a time.

I think this could be easily made much more efficient if those 'union fields' were represented as a rust `enum` (which also makes the "only one variant should be used per request" more clear to the users). Is there anything in the way the code is generated that makes it hard to do so? I genuinely don't know because, honestly, I don't really know how the API generator even works.

I don't think backwards compatibility should be seen as an issue, because the current type is so big to the point of being almost unusable. However, if that is the case, I see two other options:
- Making the new enum type and impl Into<new_type> for the old one (the function could then accept Into<new_type> as the parameter)
- Make a new function that takes in a &str with the structure as a JSON. As an user, I would gladly use serde represent the type in JSON myself and this way avoid the enormous memory waste.
If `google_pubsub1::Error` is used in a `failure` error as follows will be reported:

```
error[E0277]: `(dyn std::error::Error + 'static)` cannot be shared between threads safely
  --> src/main.rs:23:17
   |
23 | #[derive(Debug, Fail)]
   |                 ^^^^ `(dyn std::error::Error + 'static)` cannot be shared between threads safely
   |
   = help: the trait `std::marker::Sync` is not implemented for `(dyn std::error::Error + 'static)`
   = note: required because of the requirements on the impl of `std::marker::Sync` for `std::ptr::Unique<(dyn std::error::Error + 'static)>`
   = note: required because it appears within the type `std::boxed::Box<(dyn std::error::Error + 'static)>`
   = note: required because it appears within the type `google_pubsub1::cmn::Error`
   = note: required because it appears within the type `Error`
```