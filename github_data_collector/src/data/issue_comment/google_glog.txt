I made this reference in the cmakelistes
![image](https://user-images.githubusercontent.com/39330916/72672948-ba69e500-3a9d-11ea-8345-3668e29e2eb0.png)
But an error occurred in CMAKE as shown below
----------------------------------------------------------------------------------------------
-- Boost version: 1.58.0
CMake Error at CMakeLists.txt:26 (find_package):
  By not providing "FindGlog.cmake" in CMAKE_MODULE_PATH this project has
  asked CMake to find a package configuration file provided by "Glog", but
  CMake did not find one.

  Could not find a package configuration file provided by "Glog" with any of
  the following names:

    GlogConfig.cmake
    glog-config.cmake

  Add the installation prefix of "Glog" to CMAKE_PREFIX_PATH or set
  "Glog_DIR" to a directory containing one of the above files.  If "Glog"
  provides a separate development package or SDK, be sure it has been
  installed.
----------------------------------------------------------------------------------------------
But I'm sure glog has installed
My English is not very good, but I really need your help
Glog is available as a port in vcpkg, a C++ library manager that simplifies installation for glog and other project dependencies. Documenting the install process here will help users get started by providing a single set of commands to build glog, ready to be included in their projects.

We also test whether our library ports build in various configurations (dynamic, static) on various platforms (OSX, Linux, Windows: x86, x64, UWP, ARM) to keep a wide coverage for users.

I'm a maintainer for vcpkg, and here is what the port script looks like. We try to keep the library maintained as close as possible to the original library.
Hello! There seems to be an edge case that occurs when the year switches while we are in the midst of writing glogs.

For instance, if we are writing glogs at 11:59 pm on 12/31/2019, and the year switches to 2020, the mmdd timestamp written on each line of the glog will not capture this year difference. Therefore, it looks like the glogs jump from 12/31/2019 to 01/01/2019 if we are only extrapolating the year from the file name, or the file creation date written at the top of each glog file.

I think some possible solutions include:

- Appending the year to each glog line in the format of [IWEF]**yyyy**mmdd hh:mm:ss.uuuuuu threadid file:line] msg
- Splitting the glog file when the year changes.

Was there a reason for not including the year in the line-by-line output format?
We should give users of the library some guidance on the difference of the log levels, especially between WARNING and ERROR.
Incompatible flag --incompatible_no_implicit_file_export will be enabled by default in a future Bazel release [1], thus breaking Google Logging.

The flag is documented here: https://github.com/bazelbuild/bazel/issues/10225

Please check the following CI builds for build and test results:

* <a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/361#70032555-5e9d-4cdc-88d1-b599d98d92bf" target="_blank"><img src="https://raw.githubusercontent.com/buildkite/emojis/master/img-buildkite-64/ubuntu.png" height="16"/>Ubuntu 16.04, OpenJDK 8</a>
* <a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/361#296899cc-2f48-406e-8557-b6d1cbb31c59" target="_blank"><img src="https://raw.githubusercontent.com/buildkite/emojis/master/img-buildkite-64/mac.png" height="16"/>macOS, OpenJDK 8</a>

Never heard of incompatible flags before? We have [documentation](https://docs.bazel.build/versions/master/backward-compatibility.html) that explains everything.

If you don't want to receive any future issues for Google Logging or if you have any questions,
please file an issue in https://github.com/bazelbuild/continuous-integration

**Important**: Please do NOT modify the issue title since that might break our tools.

[1] The target release hasn't been determined yet. Our tool will update the issue title once the flag flip has been scheduled.

i have install glog (0.4.0) in centos7. In clion, when the title included in my project like # include <glog/logging.h>  

the error happened like this: 
/usr/local/include/glog/logging.h:374:1: error: ‘FLAGS_v’ is already declared in this scope
 DECLARE_int32(v);  // in vlog_is_on.cc

how can i fix the problem? thanks.
```
 $ grep -i gtest configure.ac CMakeLists.txt
configure.ac:AC_CHECK_PROG(GTEST_CONFIG, gtest-config, "yes")
configure.ac:AC_CHECK_LIB(gtest, main, have_gtest_lib="yes")
configure.ac:if test x"$GTEST_CONFIG" = "xyes" -a x"$have_gtest_lib" = "xyes"; then
configure.ac:  GTEST_CFLAGS=`gtest-config --cppflags --cxxflags`
configure.ac:  GTEST_LIBS=`gtest-config --ldflags --libs`
configure.ac:  AC_DEFINE(HAVE_LIB_GTEST, 1, [define if you have google gtest library])
configure.ac:  GTEST_CFLAGS=
configure.ac:  GTEST_LIBS=
configure.ac:AC_SUBST(GTEST_CFLAGS)
configure.ac:AC_SUBST(GTEST_LIBS)
$ grep -r HAVE_LIB_GTEST *
configure.ac:  AC_DEFINE(HAVE_LIB_GTEST, 1, [define if you have google gtest library])
src/config.h.cmake.in:#cmakedefine HAVE_LIB_GTEST
src/googletest.h:#ifdef HAVE_LIB_GTEST
src/googletest.h:#endif  // ! HAVE_LIB_GTEST
```
When using CMake, `#cmakedefine HAVE_LIB_GTEST` is currently always expanded to `/* #undef HAVE_LIB_GTEST */`.
`configure.ac` sets variables for **three** attributes:
```
# We only care about these two attributes.
if test x"$ac_cv___attribute__" = x"yes"; then
  ac_cv___attribute___noreturn="__attribute__ ((noreturn))"
  ac_cv___attribute___noinline="__attribute__ ((noinline))"
  ac_cv___attribute___printf_4_5="__attribute__((__format__ (__printf__, 4, 5)))"
else
  ac_cv___attribute___noreturn=
  ac_cv___attribute___noinline=
  ac_cv___attribute___printf_4_5=
fi
```
But `CMakeLists.txt` sets only **two**:
```
if (HAVE___ATTRIBUTE__)
  set (ac_cv___attribute___noreturn "__attribute__((noreturn))")
  set (ac_cv___attribute___noinline "__attribute__((noinline))")
elseif (HAVE___DECLSPEC)
  set (ac_cv___attribute___noreturn "__declspec(noreturn)")
  #set (ac_cv___attribute___noinline "__declspec(noinline)")
endif (HAVE___ATTRIBUTE__)
```
There is also unnecessary difference in presence/absence of space between `__attribute__` and `((`, which results in unnecessary difference between installed headers:
```
--- autotools-generated/glog/logging.h
+++ cmake-generated/glog/logging.h
@@ -652,7 +652,7 @@
 // Build the error message string. Specify no inlining for code size.
 template <typename T1, typename T2>
 std::string* MakeCheckOpString(const T1& v1, const T2& v2, const char* exprtext)
-    __attribute__ ((noinline));
+    __attribute__((noinline));
 
 namespace base {
 namespace internal {
@@ -1247,7 +1247,7 @@
   void SendToSyslogAndLog();  // Actually dispatch to syslog and the logs
 
   // Call abort() or similar to perform LOG(FATAL) crash.
-  static void __attribute__ ((noreturn)) Fail();
+  static void __attribute__((noreturn)) Fail();
 
   std::ostream& stream();
 
...
```
Incompatible flag --incompatible_load_cc_rules_from_bzl will break Google Logging once Bazel 1.2.1 is released.

Please see the following CI builds for more information:

* [:darwin: (OpenJDK 8)](<a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/342#30e070a5-91b7-4d69-84ed-08fcf96936df" target="_blank">:darwin: (OpenJDK 8)</a>)
* [:ubuntu: 16.04 (OpenJDK 8)](<a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/342#d40e52b6-06a5-416e-bb14-386828d962c6" target="_blank">:ubuntu: 16.04 (OpenJDK 8)</a>)

Questions? Please file an issue in https://github.com/bazelbuild/continuous-integration

**Important**: Please do NOT modify the issue title since that might break our tools.

Incompatible flag --incompatible_no_implicit_file_export will break Google Logging once Bazel 1.2.1 is released.

Please see the following CI builds for more information:

* [:darwin: (OpenJDK 8)](<a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/342#30e070a5-91b7-4d69-84ed-08fcf96936df" target="_blank">:darwin: (OpenJDK 8)</a>)
* [:ubuntu: 16.04 (OpenJDK 8)](<a href="https://buildkite.com/bazel/bazelisk-plus-incompatible-flags/builds/342#d40e52b6-06a5-416e-bb14-386828d962c6" target="_blank">:ubuntu: 16.04 (OpenJDK 8)</a>)

Questions? Please file an issue in https://github.com/bazelbuild/continuous-integration

**Important**: Please do NOT modify the issue title since that might break our tools.
