I still get "Overflow" when I used *JsonConfig* with **data()**.

Then I found it may not work with *data*.

```rust
let (limit, err, ctype) = req
            .app_data::<Self::Config>()
            .map(|c| (c.limit, c.ehandler.clone(), c.content_type.clone()))
            .unwrap_or((32768, None, None));
```

And after all, thank you for your awesome work.
# Summary

In this PR I use `async_std` instead of blocking. Moreover, I treat all errors. I hope this makes the code more streamlined.
https://github.com/actix/examples/blob/master/websocket-tcp-chat/README.md  
https://github.com/actix/examples/blob/master/websocket-chat/README.md  

They look like most of the text is exactly the same, which is not friendly for beginners.

https://github.com/actix/actix/tree/master/examples/chat

Especially after reading this code, if you want to know what the next step is, you must read the code in the above two projects carefully.

There are some suggestions:

Explain their differences and even point to this issue. Or merge their code, if their differences are pointed out it is not necessary.
Look at these lines . . .

https://github.com/actix/examples/blob/998f92d2e3d524366531a1acb19204420f6eed58/cookie-auth/src/main.rs#L5-L42

I would expect when going from `127.0.0.1:8080` to `127.0.0.1:8080/login` and then back to `127.0.0.1:8080` to arrive at a webpage saying

Hello user1

What you actually get is 

Hello Anonymous!
I found this [actix web oauth 2](https://github.com/pka/actix-web-oauth2) and I thought it belonged here. 
having some trouble with the http-proxy example. It seems ClientRequest.send_stream results in a 400 response for any request that actually has a request body. It never even seems to hit the thing being proxied to. Not sure if I'm missing something or if the example is broken.
I just cloned `actix/examples`, installed diesel via `cargo install diesel_cli`, left the default `DATABASE_URL` (`test.db`, using SQLite), then ran `cargo run`

The web server started and I opened it up in a browser: http://localhost:8080/test

This opened a blank page, but I saw an access log in the console were `cargo run` was running

I then killed the program (CTRL+C) and checked out the database by running `sqlite3 test.db`, `select * from users;` -- and there was nothing in the table

I'm pretty new to Rust and ***extremely*** new to Actix and Diesel. Was kind of hoping it would just work to prove to me that it's easy to get up and running.
I was following the example at [actix-web/juniper](https://github.com/actix/examples/blob/master/juniper/src/main.rs)  but tried to implement context with out luck. Could someone update the example to include a simple context? 

I have tried to also follow from the juniper docs but it seems like context is implemented from the framework side.

```rs

struct Context {
}
impl juniper::Context for Context {};
stuct MyData {
  scema: Scema,
  context: Context
}

fn graphql(
    st: web::Data<Arc<MyData>>,
    data: web::Json<GraphQLRequest>,
) -> impl Future<Item = HttpResponse, Error = Error> {
    web::block(move || {
         //let res = data.execute(schema, &());
        let res = data.execute(&st.schema, &st.context); 
        // expecting &() rather then &st.context
        Ok::<_, serde_json::error::Error>(serde_json::to_string(&res)?)
    })
    .map_err(Error::from)
    .and_then(|user| {
        Ok(HttpResponse::Ok()
            .content_type("application/json")
            .body(user))
    })
}
```

I saw @fafhrd91 added the example blob are you able to help?
something like this package but for Actix
1. https://github.com/matthijs2704/vapor-apns
2. https://github.com/saroar/PoutouPush

also, Outh2 for social media login back end for ios users 
without both i cant use Actix i really want to try Rust web framework
rusqlite have some [breaking changes and new features](https://github.com/jgallagher/rusqlite/releases), this PR

1. updates rusqlite in async_db and r2d2 example
2. adds a note about the use of `web::block`
3. deduplicates repetitive code
4. uses the types with `Iterator::collect` to be idiomatic