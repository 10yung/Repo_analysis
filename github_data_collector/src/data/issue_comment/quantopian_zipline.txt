The function get_stock_dividends shouldn't read from tuple as the order of the columns is not known. This lead to errors when upgrading the dependencies to higher releases. 
Adding a dictionary (fast) to get the id for the each datum is safer. 
I have observed that AppVeyor pipelines time out sometimes, even when the changes should clearly not affect the CI process:

- https://github.com/quantopian/zipline/pull/2558
- https://github.com/quantopian/zipline/pull/2372
- https://github.com/quantopian/zipline/pull/2512

Se how https://github.com/quantopian/zipline/pull/2558 is only updating the README file.

The only pattern I see is: those people opening the PR are not part of Quantopian. Could it be that AppVeyor executes the pipelines differently when the PR is opened by a member of the organization? Do you, Quantopian, have a paying AppVeyor account?

Otherwise I cannot explain the behavior. Any other ideas?
Dear Zipline Maintainers,

Before I tell you about my issue, let me describe my environment:

# Environment

<details>

* Operating System: (Windows Version or `$ uname --all`)
* Python Version: `$ python --version`
* Python Bitness: `$ python -c 'import math, sys;print(int(math.log(sys.maxsize + 1, 2) + 1))'`
* How did you install Zipline: (`pip`, `conda`, or `other (please explain)`)
* Python packages: `$ pip freeze` or `$ conda list`

</details>

Now that you know a little about me, let me tell you about the issue I am
having:

# Description of Issue

* What did you expect to happen?
* What happened instead?

Here is how you can reproduce this issue on your machine:

## Reproduction Steps

1.
2.
3.
...

## What steps have you taken to resolve this already?

...

# Anything else?

...

Sincerely,
`$ whoami`

## Background

Zipline currently officially supports running on Python 2.7 and Python 3.5. These are the Python versions [currently available on Quantopian](https://www.quantopian.com/posts/upgrading-to-python-3).

These are both relatively old versions of Python, and many Zipline users (including users internally at Quantopian) would like to be able to use Zipline on more modern versions of Python. Supporting newer Python versions is particularly important because Python 2.7 is no longer supported by the Python Software Foundation, and Python 3.5 will reach end of life in [September 2020](https://devguide.python.org/#status-of-python-branches).

We'd like to support a range of modern Python versions without dramatically increasing the cost of maintaining Zipline. In the short term, this probably means adding CI builds for Zipline on 3.6 and 3.7 (possibly also 3.8?). In the medium-to-long term, we need a more sustainable process for adding new Python versions without having to expend a ton of effort. This is especially important now that Python has adopted an [annual release cadence](https://www.python.org/dev/peps/pep-0602/).

## Challenges

Supporting new Python versions is more challenging for Zipline than the average Python project, for a few reasons:

1. We maintain backwards compatibility for older Python versions, so adding support for newer Pythons increases the total range of versions that we need to test, package, and triage issues for.
2. We also maintain backwards compatibility for relatively old versions of NumPy and Pandas. At the time of this writing, Quantopian supports pandas 0.18.1, which was released in May of 2016. That version of pandas has a few notable bugs on Python 3.6, and it doesn't work at all on Python 3.7+ and above due to an [issue in Cython](https://github.com/cython/cython/issues/1978). Supporting newer versions of Python requires us to also support a larger range of numpy and pandas versions, which further increases our maintenance burden.
3. We currently build our own conda packages are part of Zipline's Travis and Appveyor builds. These package builds take a while, and (I believe) can't be easily updated by non-Quantopian employees, which effectively means that only Q employees can work on this.

## Additional Thoughts

- One of the biggest costs of adding new Python versions is that it adds new entries to the Travis/Appveyor build matrices. Since the number of workers in these builds are limited, adding new entries causes the builds to run in serial, which slows down development. One promising alternative would be to switch to using Github Actions, which provides a pretty generous number of workers for open source projects. @gmanoim-quantopian has prototyped a version of this over in [trading-calendars](https://github.com/quantopian/trading_calendars/pull/102/files). I think we could replace a lot of the complexity in our Travis/Appveyor config with a much simpler Github Actions setup.
- Another big maintenance headache here is building our own conda packages. We might benefit from switching to [Conda Forge](https://conda-forge.org/) for many of these dependencies.x

Dear Zipline Maintainers,

Before I tell you about my issue, let me describe my environment:

# Environment

<details>

* Operating System: (Windows Version or `$ uname --all`): **Windows-10-10.0.18362-SP0**
* Python Version: `$ python --version`: **Python 3.5.6 :: Anaconda, Inc.** : Running on Jupyter Lab. 
* Python Bitness: `$ python -c 'import math, sys;print(int(math.log(sys.maxsize + 1, 2) + 1))'` **64**
* How did you install Zipline: (`pip`, `conda`, or `other (please explain)`) **conda clean install within env python=3.5**
* Python packages: `$ pip freeze` or `$ conda list`

# packages in environment at C:\Users\Jaepil\Anaconda3\envs\finance35:
#
# Name                    Version                   Build  Channel
alembic                   0.7.7                    py35_0    quantopian
asn1crypto                0.24.0                   py35_0  
backcall                  0.1.0                    py35_0  
bcolz                     0.12.1              np114py35_0    quantopian
blas                      1.0                         mkl  
bleach                    3.1.0                      py_0  
blosc                     1.16.3               h7bd577a_0  
bottleneck                1.2.1            py35h452e1ab_1  
bzip2                     1.0.8                he774522_0  
ca-certificates           2019.11.27                    0  
certifi                   2018.8.24                py35_1  
cffi                      1.11.5           py35h74b6da3_1  
chardet                   3.0.4                    py35_1  
click                     7.0                        py_0  
colorama                  0.4.3                      py_0  
contextlib2               0.6.0.post1                py_0  
cryptography              2.3.1            py35h74b6da3_0  
cycler                    0.10.0           py35hcc71164_0  
cyordereddict             0.2.2                    py35_0    quantopian
cython                    0.28.5           py35h6538335_0  
decorator                 4.4.1                      py_0  
defusedxml                0.6.0                      py_0  
empyrical                 0.5.0                    py35_0    quantopian
entrypoints               0.2.3                    py35_2  
freetype                  2.9.1                ha9979f8_1  
hdf5                      1.10.2               hac2f561_1  
icc_rt                    2019.0.0             h0cc432a_1  
icu                       58.2                 ha66f8fd_1  
idna                      2.7                      py35_0  
inflection                0.3.1                    py35_1  
intel-openmp              2019.4                      245  
intervaltree              2.1.0                    py35_0    quantopian
ipykernel                 4.10.0                   py35_0  
ipython                   6.5.0                    py35_0  
ipython_genutils          0.2.0            py35ha709e79_0  
jedi                      0.12.1                   py35_0  
jinja2                    2.10.3                     py_0  
jpeg                      9b                   hb83a4c4_2  
json5                     0.8.5                      py_0  
jsonschema                2.6.0            py35h27d56d3_0  
jupyter_client            5.3.3                      py_0  
jupyter_core              4.5.0                      py_0  
jupyterlab                1.2.4              pyhf63ae98_0  
jupyterlab_server         1.0.0                      py_0  
kiwisolver                1.0.1            py35h6538335_0  
libiconv                  1.15                 h1df5818_7  
libpng                    1.6.37               h2a8f88b_0  
libsodium                 1.0.16               h9d3ae62_0  
libxml2                   2.9.9                h464c3ec_0  
libxslt                   1.1.33               h579f668_0  
logbook                   0.12.5                   py35_0    quantopian
lru-dict                  1.1.4                    py35_0    quantopian
lxml                      4.2.5            py35hef2cd61_0  
lz4-c                     1.8.1.2              h2fa13f4_0  
lzo                       2.10                 h6df0209_2  
m2w64-gcc-libgfortran     5.3.0                         6  
m2w64-gcc-libs            5.3.0                         7  
m2w64-gcc-libs-core       5.3.0                         7  
m2w64-gmp                 6.1.0                         2  
m2w64-libwinpthread-git   5.0.0.4634.697f757               2  
mako                      1.1.0                      py_0  
markupsafe                1.0              py35hfa6e2cd_1  
matplotlib                3.0.0            py35hd159220_0  
mistune                   0.8.3            py35hfa6e2cd_1  
mkl                       2018.0.3                      1  
more-itertools            8.0.2                      py_0  
msys2-conda-epoch         20160418                      1  
multipledispatch          0.6.0                    py35_0  
nbconvert                 5.5.0                      py_0  
nbformat                  4.4.0            py35h908c9d9_0  
networkx                  1.11                     py35_1  
notebook                  5.6.0                    py35_0  
numexpr                   2.6.1               np114py35_0    quantopian
numpy                     1.14.2           py35h5c71026_0  
openssl                   1.0.2u               he774522_0  
pandas                    0.22.0           py35h6538335_0  
pandas-datareader         0.8.1                      py_0  
pandoc                    2.2.3.2                       0  
pandocfilters             1.4.2                    py35_1  
parso                     0.5.2                      py_0  
patsy                     0.5.0                    py35_0  
pickleshare               0.7.4            py35h2f9f535_0  
pip                       19.2.3                   pypi_0    pypi
prometheus_client         0.7.1                      py_0  
prompt_toolkit            1.0.15           py35h89c7cb4_0  
pycparser                 2.19                     py35_0  
pygments                  2.5.2                      py_0  
pyopenssl                 18.0.0                   py35_0  
pyparsing                 2.4.5                      py_0  
pyqt                      5.9.2            py35h6538335_2  
pysocks                   1.6.8                    py35_0  
pytables                  3.4.4            py35he6f6034_0  
python                    3.5.6                he025d50_0  
python-dateutil           2.7.3                    py35_0  
pytz                      2019.2                     py_0  
pywin32                   223              py35hfa6e2cd_1  
pywinpty                  0.5.4                    py35_0  
pyzmq                     17.1.2           py35hfa6e2cd_0  
qt                        5.9.6            vc14h1e9a669_2  
quandl                    3.4.2                    py35_0  
requests                  2.19.1                   py35_0  
requests-file             1.4.3                    py35_0  
scipy                     1.1.0            py35hc28095f_0  
send2trash                1.5.0                    py35_0  
setuptools                40.2.0                   py35_0  
simplegeneric             0.8.1                    py35_2  
sip                       4.19.8           py35h6538335_0  
six                       1.11.0                   py35_1  
snappy                    1.1.7                h777316e_3  
sortedcontainers          1.4.4                    py35_0    quantopian
sqlalchemy                1.2.11           py35hfa6e2cd_0  
sqlite                    3.30.1               he774522_0  
statsmodels               0.9.0            py35h452e1ab_0  
terminado                 0.8.1                    py35_1  
testpath                  0.4.4                      py_0  
toolz                     0.10.0                     py_0  
tornado                   5.1.1            py35hfa6e2cd_0  
trading-calendars         1.11.1                   py35_0    quantopian
traitlets                 4.3.2            py35h09b975b_0  
urllib3                   1.23                     py35_0  
vc                        14.1                 h0510ff6_4  
vs2015_runtime            14.16.27012          hf0eaf9b_0  
wcwidth                   0.1.7            py35h6e80d8a_0  
webencodings              0.5.1                    py35_1  
wheel                     0.31.1                   py35_0  
win_inet_pton             1.0.1                    py35_1  
win_unicode_console       0.5              py35h56988b5_0  
wincertstore              0.2              py35hfebbdb8_0  
winpty                    0.4.3                         4  
xz                        5.2.4                h2fa13f4_4  
zeromq                    4.2.5                he025d50_1  
zipline                   1.3.0               np114py35_0    quantopian
zlib                      1.2.11               h62dcd97_3  
zstd                      1.3.7                h508b16e_0  


</details>

Now that you know a little about me, let me tell you about the issue I am
having:

# Description of Issue

* What did you expect to happen? 
I expected the custom csv data to be ingested and my data bundle to be registered. 

* What happened instead?
It _seems_ the data bundle has been added to `bundle` but when I try to ingest it, it says there's no such bundle registered. 

Here is how you can reproduce this issue on your machine:

## Reproduction Steps

1. Get AAPL data from yahoo, using `pandas_datareader`

```
import pandas as pd
import pandas_datareader.data as web
from zipline.api import order, symbol, record
from zipline.data.bundles import register
from zipline.data.bundles.csvdir import csvdir_equities
import datetime
import matplotlib.pyplot as plt
import os, sys, platform

start = datetime.datetime(2015, 1, 1)
end = datetime.datetime(2020, 1, 10)

data = web.DataReader('AAPL', 'yahoo', start, end)
```

2. Change column names to fit zipline's data format (OHLCV + dividend, split)

```
data = data[['Open', 'High', 'Low', 'Adj Close', 'Volume']] # To OHLCV format. 
data = data.rename(columns={'Open':'open', 'High':'high', 'Low':'low', 'Adj Close':'close', 'Volume':'volume'})
data.index.names = ['date']
data['dividend'] = 0
data['split'] = 1
```

`data.tail()`
  >>

```
	open	high	low	close	volume	dividend	split
date							
2020-01-06	293.790009	299.959991	292.750000	299.799988	29596800.0	0	1
2020-01-07	299.839996	300.899994	297.480011	298.390015	27218000.0	0	1
2020-01-08	297.160004	304.440002	297.160004	303.190002	33019800.0	0	1
2020-01-09	307.239990	310.429993	306.200012	309.630005	42527100.0	0	1
2020-01-10	310.600006	312.670013	308.250000	310.329987	35161200.0	0	1

```
`data.head()`
  >>

```
	open	high	low	close	volume	dividend	split
date							
2014-12-31	112.820000	113.129997	110.209999	101.419060	41403400.0	0	1
2015-01-02	111.389999	111.440002	107.349998	100.454300	53204600.0	0	1
2015-01-05	108.290001	108.650002	105.410004	97.624336	64285500.0	0	1
2015-01-06	106.540001	107.430000	104.629997	97.633545	65797100.0	0	1
2015-01-07	107.199997	108.199997	106.699997	99.002556	40105900.0	0	1
```

3. Export it to csv
```
data.to_csv('AAPL.csv')
```
4. Follow [custom csv ingesting tutorial](https://www.zipline.io/bundles.html#ingesting-data-from-csv-files) in the documentation, then you get an error. 

```
# We’ll then want to specify the start and end sessions of our bundle data:
start_session = pd.Timestamp('2014-12-31', tz='utc')
end_session = pd.Timestamp('2020-01-10', tz='utc')

AAPL_path = os.getcwd() + '\AAPL.csv'
print(AAPL_path)
>> 
E:\VSCodeProjects\BOOK-python_algorithm_trading\64-bit-jupyter_notes\AAPL.csv

# And then we can register() our bundle, and pass the location of the directory in which our .csv files exist:
register(
    'custom-csvdir-bundle',
    csvdir_equities(
        ['daily'],
        AAPL_path,
    ),
    calendar_name='NYSE', # US equities
    start_session=start_session,
    end_session=end_session
)

```
>>

> C:\Users\Jaepil\Anaconda3\envs\finance35\lib\site-packages\ipykernel_launcher.py:11: UserWarning: Overwriting bundle with name 'custom-csvdir-bundle'
>   `#This is added back by InteractiveShellApp.init_path()`

```
! zipline ingest -b custom-csvdir-bundle 
# Which is equivalent to: $ zipline ingest -b ... 
```
>>

> Error: No bundle registered with the name 'custom-csvdir-bundle'

...

## What steps have you taken to resolve this already?

I can't understand how my custom bundle could be overwritten (which indicates that it has already existed) and not have been registered at the same time. 

I searched existing issues and tried [this](https://github.com/quantopian/zipline/issues/2275#issuecomment-418196965) to change `C:\Users\Jaepil\Anaconda3\envs\finance35\Lib\site-packages\zipline\data\bundles\csvdir.py`

> And so I changed the line from . import core as bundles to from zipline.data.bundles import core as bundles; the extension.py doesn't know about the . the quandl bundle is referencing because the extension code lives in .zipline/.

However, it didn't work. @freddiev4 seems to have managed to make 'No bundle' issue go away but I didn't even get there. 

...

# Anything else?

On [zipline's official documentation](https://www.zipline.io/bundles.html#ingesting-data-from-csv-files), it says: 

> Once you have your data in the correct format, you can edit your extension.py file in ~/.zipline/extension.py and import the csvdir bundle, along with pandas.

However, it is extremely unclear how I should edit my `extension.py`. I really could use some help. 

...

Sincerely,
`$ whoami`

**jaepil-pc\jaepil**
- Upgrades known-good pip version
- Upgrades to latest setuptools (which resolves an error message)
- Uses pip env vars instead of options
- Removes the need to forward positional args
- Reduces the number of 'pip install' invocations
Let's hold off on merging until we're sure this won't break anything downstream.
Dear Zipline Maintainers,

Before I tell you about my issue, let me describe my environment:

# Environment

* Operating System: (Windows Version or `$ uname --all`)
```
$ uname -rvmo
4.9.0-9-amd64 #1 SMP Debian 4.9.168-1+deb9u3 (2019-06-16) x86_64 GNU/Linux
```
* Python Version: `$ python --version`
```
$ python --version
Python 3.5.3
```
* Python Bitness: `$ python -c 'import math, sys;print(int(math.log(sys.maxsize + 1, 2) + 1))'`
```
$ python -c 'import math, sys;print(int(math.log(sys.maxsize + 1, 2) + 1))'
64
```
* How did you install Zipline: (`pip`, `conda`, or `other (please explain)`)
```
$ pip show zipline
Name: zipline
Version: 1.3.0
Summary: A backtester for financial algorithms.
Home-page: http://zipline.io
Author: Quantopian Inc.
Author-email: opensource@quantopian.com
License: Apache 2.0
Location: /home/jupyter/env/lib/python3.5/site-packages
Requires: numexpr, pytz, lru-dict, bcolz, multipledispatch, sortedcontainers, numpy, alembic, empyrical, Mako, python-dateutil, tables, trading-calendars, click, intervaltree, requests-file, setuptools, bottleneck, statsmodels, Cython, cyordereddict, networkx, patsy, pandas-datareader, MarkupSafe, pandas, requests, Logbook, six, toolz, pip, scipy, decorator, sqlalchemy, contextlib2
Required-by:
```

Now that you know a little about me, let me tell you about the issue I am
having:

# Description of Issue

`zipline.run_algorithm` is failing because internally it calls `zipline.data.benchmarks.get_benchmark_returns`, which then tries to fetch some data from the `https://api.iextrading.com/1.0/stock/{}/chart/5y`, however the site returns `403 Forbidden`.

Example:

```
In [8]: r = requests.get('https://api.iextrading.com/1.0/stock/{}/chart/5y'.format('AAPL'))                                                                                                                                                   

In [9]: r.status_code                                                                                                                                                                                                                         
Out[9]: 403

In [10]: r.reason                                                                                                                                                                                                                             
Out[10]: 'Forbidden'
```

Relevant zipline stack trace:
```
<...>
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/utils/run_algo.py", line 430, in run_algorithm
    blotter=blotter,
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/utils/run_algo.py", line 159, in _run
    trading_days=trading_calendar.schedule[start:end].index,
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/finance/trading.py", line 103, in __init__
    self.bm_symbol,
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/data/loader.py", line 149, in load_market_data
    environ,
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/data/loader.py", line 216, in ensure_benchmark_data
    data = get_benchmark_returns(symbol)
  File "/home/jupyter/env/lib/python3.5/site-packages/zipline/data/benchmarks.py", line 35, in get_benchmark_returns
    data = r.json()
  File "/home/jupyter/env/lib/python3.5/site-packages/requests/models.py", line 897, in json
    return complexjson.loads(self.text, **kwargs)
  File "/usr/lib/python3.5/json/__init__.py", line 319, in loads
    return _default_decoder.decode(s)
  File "/usr/lib/python3.5/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/lib/python3.5/json/decoder.py", line 357, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)
```

Here is how you can reproduce this issue on your machine:

```
In [11]: from zipline.data.benchmarks import get_benchmark_returns                                                                                                                                                                            

In [12]: get_benchmark_returns('AAPL')                                                                                                                                                                                                        
---------------------------------------------------------------------------
JSONDecodeError                           Traceback (most recent call last)
<ipython-input-12-2a3dcf6e4f20> in <module>
----> 1 get_benchmark_returns('AAPL')

~/env/lib/python3.5/site-packages/zipline/data/benchmarks.py in get_benchmark_returns(symbol)
     33         'https://api.iextrading.com/1.0/stock/{}/chart/5y'.format(symbol)
     34     )
---> 35     data = r.json()
     36 
     37     df = pd.DataFrame(data)

~/env/lib/python3.5/site-packages/requests/models.py in json(self, **kwargs)
    895                     # used.
    896                     pass
--> 897         return complexjson.loads(self.text, **kwargs)
    898 
    899     @property

/usr/lib/python3.5/json/__init__.py in loads(s, encoding, cls, object_hook, parse_float, parse_int, parse_constant, object_pairs_hook, **kw)
    317             parse_int is None and parse_float is None and
    318             parse_constant is None and object_pairs_hook is None and not kw):
--> 319         return _default_decoder.decode(s)
    320     if cls is None:
    321         cls = JSONDecoder

/usr/lib/python3.5/json/decoder.py in decode(self, s, _w)
    337 
    338         """
--> 339         obj, end = self.raw_decode(s, idx=_w(s, 0).end())
    340         end = _w(s, end).end()
    341         if end != len(s):

/usr/lib/python3.5/json/decoder.py in raw_decode(self, s, idx)
    355             obj, end = self.scan_once(s, idx)
    356         except StopIteration as err:
--> 357             raise JSONDecodeError("Expecting value", s, err.value) from None
    358         return obj, end

JSONDecodeError: Expecting value: line 1 column 1 (char 0)
```
Importing ABC from collections module was removed in Python 3.9. `collections.abc` can be used for better compatibility. Below is a sample instance but there are other places also where this is done and would raise DeprecationWarning before Python 3.9.

Thanks for the library!

https://github.com/quantopian/zipline/blob/7056a9091423d1465968d21498b18de75ba7c6c6/zipline/utils/cache.py#L4
Dear Zipline Maintainers,

I attempted to use zipline according to the tutorial
[https://github.com/quantopian/zipline/blob/master/docs/source/beginner-tutorial.rst]

And I tried to create environment with python=3.5, and imported zipline, but encountered a problem in using the %load_ext magic , which states "The zipline module is not an IPython extension."
'%load_ext zipline'


The following is my environment:

# Environment
'conda create -n env_zipline2 python=3.5
activate env_zipline2
conda install -c Quantopian zipline
conda install ipykernel
python -m ipykernel install --user --name env_zipline2 --display-name "env_zipline2"
jupyter notebook'


<details>

* Operating System: (Windows 7)
* Python Version: `$ python --3.5`
* How did you install Zipline: conda install -c Quantopian zipline
* Python packages: `
# Name                    Version                   Build  Channel
alembic                   0.7.7                    py35_0    quantopian
asn1crypto                0.24.0                   py35_0
backcall                  0.1.0                    py35_0
bcolz                     0.12.1              np114py35_0    quantopian
blas                      1.0                         mkl
bleach                    3.1.0                      py_0    anaconda
blosc                     1.16.3               h7bd577a_0
bottleneck                1.2.1            py35h452e1ab_1
bzip2                     1.0.8                he774522_0
ca-certificates           2019.11.27                    0    anaconda
certifi                   2018.8.24                py35_1    anaconda
cffi                      1.11.5           py35h74b6da3_1
chardet                   3.0.4                    py35_1
click                     7.0                        py_0
colorama                  0.4.3                      py_0
contextlib2               0.6.0.post1                py_0
cryptography              2.3.1            py35h74b6da3_0
cyordereddict             0.2.2                    py35_0    quantopian
cython                    0.28.5           py35h6538335_0
decorator                 4.4.1                      py_0
defusedxml                0.6.0                      py_0    anaconda
empyrical                 0.5.0                    py35_0    quantopian
entrypoints               0.2.3                    py35_2    anaconda
hdf5                      1.10.2               hac2f561_1
icc_rt                    2019.0.0             h0cc432a_1
icu                       57.1                     vc14_0  [vc14]  anaconda
idna                      2.7                      py35_0
intel-openmp              2019.4                      245
intervaltree              2.1.0                    py35_0    quantopian
ipykernel                 4.10.0                   py35_0
ipython                   6.5.0                    py35_0
ipython_genutils          0.2.0            py35ha709e79_0
ipywidgets                7.4.1                    py35_0    anaconda
jedi                      0.12.1                   py35_0
jinja2                    2.10.3                     py_0    anaconda
jpeg                      9b               vc14h4d7706e_1  [vc14]  anaconda
jsonschema                2.6.0            py35h27d56d3_0    anaconda
jupyter                   1.0.0                    py35_7    anaconda
jupyter_client            5.3.3                      py_0
jupyter_console           5.2.0                    py35_1    anaconda
jupyter_core              4.5.0                      py_0
libiconv                  1.15                 h1df5818_7
libpng                    1.6.32           vc14h5163883_3  [vc14]  anaconda
libsodium                 1.0.16               h9d3ae62_0
libxml2                   2.9.9                h464c3ec_0
libxslt                   1.1.33               h579f668_0
logbook                   0.12.5                   py35_0    quantopian
lru-dict                  1.1.4                    py35_0    quantopian
lxml                      4.2.5            py35hef2cd61_0
lz4-c                     1.8.1.2              h2fa13f4_0
lzo                       2.10                 h6df0209_2
m2w64-gcc-libgfortran     5.3.0                         6
m2w64-gcc-libs            5.3.0                         7
m2w64-gcc-libs-core       5.3.0                         7
m2w64-gmp                 6.1.0                         2
m2w64-libwinpthread-git   5.0.0.4634.697f757               2
mako                      1.1.0                      py_0
markupsafe                1.0              py35hfa6e2cd_1
mistune                   0.8.3            py35hfa6e2cd_1    anaconda
mkl                       2018.0.3                      1
msys2-conda-epoch         20160418                      1
multipledispatch          0.6.0                    py35_0
nbconvert                 5.5.0                      py_0    anaconda
nbformat                  4.4.0            py35h908c9d9_0    anaconda
networkx                  1.11                     py35_1
notebook                  5.6.0                    py35_0    anaconda
numexpr                   2.6.1               np114py35_0    quantopian
numpy                     1.14.2           py35h5c71026_0
openssl                   1.0.2u               he774522_0    anaconda
pandas                    0.22.0           py35h6538335_0
pandas-datareader         0.8.1                      py_0
pandoc                    2.2.3.2                       0    anaconda
pandocfilters             1.4.2                    py35_1    anaconda
parso                     0.5.2                      py_0
patsy                     0.5.0                    py35_0
pickleshare               0.7.4            py35h2f9f535_0
pip                       10.0.1                   py35_0
prometheus_client         0.7.1                      py_0    anaconda
prompt_toolkit            1.0.15           py35h89c7cb4_0
pycparser                 2.19                     py35_0
pygments                  2.5.2                      py_0
pyopenssl                 18.0.0                   py35_0
pyqt                      5.6.0                    py35_2    anaconda
pysocks                   1.6.8                    py35_0
pytables                  3.4.4            py35he6f6034_0
python                    3.5.6                he025d50_0
python-dateutil           2.8.1                      py_0
pytz                      2019.3                     py_0
pywinpty                  0.5.4                    py35_0    anaconda
pyzmq                     17.1.2           py35hfa6e2cd_0
qt                        5.6.2                    vc14_6  [vc14]  anaconda
qtconsole                 4.6.0                      py_0    anaconda
requests                  2.20.1                   py35_0    quantopian
requests-file             1.4.3                    py35_0
scipy                     1.1.0            py35hc28095f_0
send2trash                1.5.0                    py35_0    anaconda
setuptools                40.2.0                   py35_0
simplegeneric             0.8.1                    py35_2
sip                       4.19.12          py35h6538335_0    anaconda
six                       1.11.0                   py35_1
snappy                    1.1.7                h777316e_3
sortedcontainers          1.4.4                    py35_0    quantopian
sqlalchemy                1.2.11           py35hfa6e2cd_0
statsmodels               0.9.0            py35h452e1ab_0
terminado                 0.8.1                    py35_1    anaconda
testpath                  0.4.4                      py_0    anaconda
toolz                     0.10.0                     py_0
tornado                   5.1.1            py35hfa6e2cd_0
trading-calendars         1.11.1                   py35_0    quantopian
traitlets                 4.3.2            py35h09b975b_0
urllib3                   1.23                     py35_0
vc                        14.1                 h0510ff6_4
vs2015_runtime            14.16.27012          hf0eaf9b_1
wcwidth                   0.1.7            py35h6e80d8a_0
webencodings              0.5.1                    py35_1    anaconda
wheel                     0.31.1                   py35_0
widgetsnbextension        3.4.1                    py35_0    anaconda
win_inet_pton             1.0.1                    py35_1
win_unicode_console       0.5              py35h56988b5_0
wincertstore              0.2              py35hfebbdb8_0
winpty                    0.4.3                         4    anaconda
xz                        5.2.4                h2fa13f4_4
zeromq                    4.2.5                he025d50_1
zipline                   1.3.0               np114py35_0    quantopian
zlib                      1.2.11               h62dcd97_3
zstd                      1.3.7                h508b16e_0


</details>

Here is how you can reproduce this issue on your machine:

## Reproduction Steps

1. Create the environment as mentioned above in anaconda prompt
2. import zipline
3.  %load_ext zipline
...

## What steps have you taken to resolve this already?
I removed my environment and repeats the steps still got the same result

Many thanks for your help!
...

Sincerely,
`Felix`
