Some methods to make sure that trimeshes are watertight and correctly wound would be valuable.
This could use ray casting.

## Workaround

```rust
fn mesh_contains_point<T: RealField>(mesh: &TriMesh<T>, point: &Point3<T>) -> bool {
    if !mesh.aabb().contains_local_point(point) {
        return false;
    }

    match mesh.toi_and_normal_with_ray(
        &Isometry3::identity(),
        &Ray::new(*point, Vector::new(T::one(), T::zero(), T::zero())),
        false,  // unused
    ) {
        Some(intersection) => mesh.is_backface(intersection.feature),
        None => false,
    }
}
```

## Issues

1. Assumes mesh is well-formed (watertight and correctly wound)
2. Depends on ray casting for point queries, which is not necessarily ideal for keeping things modular
The code below panics after `world.update();` . These triangles are part of a larger model. Luckily, I was able to pinpoint these two triangles. There seemed to be other combinations too, but I don't what they are.

```
extern crate nalgebra as na;
use na::Point3;

fn main() {
    let mut world = ncollide3d::pipeline::CollisionWorld::<f32, ()>::new(0.02);
    let group = ncollide3d::pipeline::CollisionGroups::default();
    let origin = na::Isometry3::identity();

    let tri1 = ncollide3d::shape::ShapeHandle::new(ncollide3d::shape::Triangle::new(
        Point3::from_slice(&[6.292823, 6.456138, 19.66036]),
        Point3::from_slice(&[6.280472, 6.421245, 19.57066]),
        Point3::from_slice(&[6.275294, 6.449808, 19.57066]),
    ));
    let tri2 = ncollide3d::shape::ShapeHandle::new(ncollide3d::shape::Triangle::new(
        Point3::from_slice(&[6.292823, 6.456138, 19.66036]),
        Point3::from_slice(&[6.299445, 6.421245, 19.66036]),
        Point3::from_slice(&[6.280472, 6.421245, 19.57066]),
    ));

    let query_type = ncollide3d::pipeline::object::GeometricQueryType::Contacts(0.0, 0.0);

    world.add(origin, tri1, group, query_type, ());
    world.add(origin, tri2, group, query_type, ());
    world.update();
}
```

Here's the full backtrace:

```
thread 'main' panicked at 'index out of bounds: the len is 2 but the index is 2', /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/slice/mod.rs:2721:14
stack backtrace:
   0:     0x55555569f9cb - backtrace::backtrace::libunwind::trace::h89fcc71e59e3bc5b
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/libunwind.rs:88
   1:     0x55555569f9cb - backtrace::backtrace::trace_unsynchronized::h0bad9be1379e729a
                               at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.34/src/backtrace/mod.rs:66
   2:     0x55555569f9cb - std::sys_common::backtrace::_print::hd3382a1f33c473da
                               at src/libstd/sys_common/backtrace.rs:47
   3:     0x55555569f9cb - std::sys_common::backtrace::print::h0ec6f03cfb8e76a6
                               at src/libstd/sys_common/backtrace.rs:36
   4:     0x55555569f9cb - std::panicking::default_hook::{{closure}}::h96cbf7b454e3f557
                               at src/libstd/panicking.rs:200
   5:     0x55555569f6a6 - std::panicking::default_hook::h95a8f00337383d83
                               at src/libstd/panicking.rs:214
   6:     0x5555556a008d - std::panicking::rust_panic_with_hook::h92f98b46e22f14ed
                               at src/libstd/panicking.rs:477
   7:     0x55555569fc12 - std::panicking::continue_panic_fmt::h25abfbb4e5b7043a
                               at src/libstd/panicking.rs:384
   8:     0x55555569faf6 - rust_begin_unwind
                               at src/libstd/panicking.rs:311
   9:     0x5555556b7bfd - core::panicking::panic_fmt::h7e9f94035af782b3
                               at src/libcore/panicking.rs:85
  10:     0x5555556b7bb5 - core::panicking::panic_bounds_check::hf0c95c4cc84d34ca
                               at src/libcore/panicking.rs:61
  11:     0x5555555c41d7 - <usize as core::slice::SliceIndex<[T]>>::index_mut::hbf6c8f008e4606d3
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/slice/mod.rs:2721
  12:     0x555555569107 - core::slice::<impl core::ops::index::IndexMut<I> for [T]>::index_mut::h70c677233e5fdd82
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libcore/slice/mod.rs:2576
  13:     0x55555559f983 - <alloc::vec::Vec<T> as core::ops::index::IndexMut<I>>::index_mut::h38150e6ef0ae3286
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/liballoc/vec.rs:1803
  14:     0x555555566aaf - ncollide3d::query::algorithms::epa3::EPA<N>::closest_points::h10a8c6a5a3b3d5e7
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/algorithms/epa3.rs:408
  15:     0x5555555639ef - ncollide3d::query::contact::contact_support_map_support_map::contact_support_map_support_map_with_params::hf054da9b12ed13b2
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/contact/contact_support_map_support_map.rs:72
  16:     0x55555557368f - <ncollide3d::pipeline::narrow_phase::contact_generator::convex_polyhedron_convex_polyhedron_manifold_generator::ConvexPolyhedronConvexPolyhedronManifoldGenerator<N> as ncollide3d::pipeline::narrow_phase::contact_generator::contact_manifold_generator::ContactManifoldGenerator<N>>::generate_contacts::h9c532b85c41141ad
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/contact_generator/convex_polyhedron_convex_polyhedron_manifold_generator.rs:95
  17:     0x5555555bcb52 - ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update_contact::hf1a7db2698f9ee56
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:73
  18:     0x5555555bdd50 - ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update_interaction::h54c765df7188d224
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:152
  19:     0x5555555be565 - ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update::ha6ddc4773b728240
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:180
  20:     0x55555564e255 - ncollide3d::pipeline::glue::update::perform_narrow_phase::h057f30cb8be09135
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/glue/update.rs:93
  21:     0x55555564e21c - ncollide3d::pipeline::glue::update::perform_all_pipeline::h3fa81fff950f1417
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/glue/update.rs:109
  22:     0x5555555a1cdb - ncollide3d::pipeline::world::CollisionWorld<N,T>::update::hc2d3713b47a99cbe
                               at /home/me/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/world.rs:105
  23:     0x5555555642af - ncollide_bug::main::hfc0790fbffefbd02
                               at src/main.rs:24
  24:     0x5555555c6600 - std::rt::lang_start::{{closure}}::h428e54d2bded33b9
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
  25:     0x55555569fae3 - std::rt::lang_start_internal::{{closure}}::h4e93c1949c7a1955
                               at src/libstd/rt.rs:49
  26:     0x55555569fae3 - std::panicking::try::do_call::h9440ccd4dc467eaa
                               at src/libstd/panicking.rs:296
  27:     0x5555556a1d9a - __rust_maybe_catch_panic
                               at src/libpanic_unwind/lib.rs:80
  28:     0x5555556a059d - std::panicking::try::hc046e7ee42ee744f
                               at src/libstd/panicking.rs:275
  29:     0x5555556a059d - std::panic::catch_unwind::h27dfc457c200aee0
                               at src/libstd/panic.rs:394
  30:     0x5555556a059d - std::rt::lang_start_internal::hea1b49a567afe309
                               at src/libstd/rt.rs:48
  31:     0x5555555c65d9 - std::rt::lang_start::h84cf55c96701a481
                               at /rustc/625451e376bb2e5283fc4741caa0a3e8a2ca4d54/src/libstd/rt.rs:64
```

Below are the crates I use:
```
approx   = "0.3.2"
alga     = "0.9.1"
nalgebra = "0.18.1"
ncollide3d = "0.20.1"
```

`rustc 1.38.0 (625451e37 2019-09-23)`

Here's an OBJ file made out of these triangles.

```
o Triangles
v 6.292823 6.456138 19.66036
v 6.280472 6.421245 19.57066
v 6.275294 6.449808 19.57066
v 6.292823 6.456138 19.66036
v 6.299445 6.421245 19.66036
v 6.280472 6.421245 19.57066

s off
f 1 2 3
f 4 5 6
```
Here's the stack:

```
thread '<unnamed>' panicked at 'assertion failed: self.pts[2] == id', /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/algorithms/epa3.rs:143:13
stack backtrace:
   0: std::panicking::default_hook::{{closure}}
   1: std::panicking::default_hook
   2: <std::panicking::begin_panic::PanicPayload<A> as core::panic::BoxMeUp>::get
   3: std::panicking::begin_panic
   4: ncollide3d::query::algorithms::epa3::EPA<N>::compute_silhouette
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/algorithms/epa3.rs:0
   5: ncollide3d::query::algorithms::epa3::EPA<N>::closest_points
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/algorithms/epa3.rs:364
   6: ncollide3d::query::contact::contact_support_map_support_map::contact_support_map_support_map_with_params
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/query/contact/contact_support_map_support_map.rs:72
   7: <ncollide3d::pipeline::narrow_phase::contact_generator::convex_polyhedron_convex_polyhedron_manifold_generator::ConvexPolyhedronConvexPolyhedronManifoldGenerator<N> as ncollide3d::pipeline::narrow_phase::contact_generator::contact_manifold_generator::ContactManifoldGenerator<N>>::generate_contacts
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/contact_generator/convex_polyhedron_convex_polyhedron_manifold_generator.rs:95
   8: ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update_contact
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:73
   9: ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update_interaction
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:152
  10: ncollide3d::pipeline::narrow_phase::narrow_phase::NarrowPhase<N,Handle>::update
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/narrow_phase/narrow_phase.rs:180
  11: ncollide3d::pipeline::glue::update::perform_narrow_phase
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/glue/update.rs:93
  12: ncollide3d::pipeline::glue::update::perform_all_pipeline
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/glue/update.rs:109
  13: ncollide3d::pipeline::world::CollisionWorld<N,T>::update
             at /Users/duncan/.cargo/registry/src/github.com-1ecc6299db9ec823/ncollide3d-0.20.1/src/pipeline/world.rs:105
```

I'm not really sure what leads to this. All I know is that it happens more often with large density of cuboids in my world.

My code is generating a bunch of random (integer size and location) axis-aligned cuboids inside some 3D region. Then it runs this loop:

```
// Resolve intersections by pushing rooms apart along the contact normal.
loop {
    // Need to do this for changes in position to take effect.
    world.update();

    let mut move_actions = HashMap::new();

    for (h1, h2, _, manifold) in world.contact_pairs(true) {
        handle_contact(h1, h2, manifold, &mut move_actions);
    }

    // Need to perform movements after releasing the borrow on world.
    for (handle, push_v) in move_actions.iter() {
        let move_obj = world.get_mut(*handle)
            .expect("Collision object does not exist for handle");
        let mut pos = move_obj.position().clone();
        pos.append_translation_mut(&Translation::from(*push_v));
        move_obj.set_position(pos);
    }

    if move_actions.is_empty() {
        break;
    }
}

fn handle_contact(
    h1: CollisionObjectSlabHandle,
    h2: CollisionObjectSlabHandle,
    manifold: &ContactManifold<f32>,
    move_actions: &mut HashMap<CollisionObjectSlabHandle, Vector3<f32>>
) {
    // Once a cuboid from a contact has been moved, it may invalidate other contacts that
    // it was a part of, so skip them.
    if move_actions.contains_key(&h1) || move_actions.contains_key(&h2) {
        return;
    }

    let contact = &manifold.deepest_contact().expect("No penetration in contact").contact;

    if contact.depth < 0.5 {
        return;
    }

    // The normal should be parallel to some axis. To ensure that there are no endless
    // cycles of resolutions, only allow resolutions to push in the positive direction
    // along each axis.
    let n = contact.depth * contact.normal.into_inner();
    let (push_v, move_handle) = if n.x > 0.5 || n.y > 0.5 || n.z > 0.5 {
        (-n, h1)
    } else {
        (n, h2)
    };

    move_actions.insert(move_handle, push_v);
}
```

It also seems that more stress I put on this code (more densely packed cuboids), the more likely it is to terminate without actually resolving all of the collisions. Sometimes it leaves about 5% of the cuboids still colliding. I'm actually using this algorithm for a voxel world, so I convert between integer and floating points coordinates by rounding. Then I check for overlap using the integer extents of the cuboids. And it doesn't seem like rounding error, since the overlaps are much greater than 1 in each dimension.
I have a short repro:

```
use nalgebra::{Isometry3, Translation, Vector3, zero};
use ncollide3d::{
    shape::{Cuboid, ShapeHandle},
    world::{CollisionGroups, CollisionWorld, GeometricQueryType},
};
use std::collections::HashMap;

fn two_colliding_cuboids() {
    let mut world = CollisionWorld::new(0.0);

    // Add two intersecting cuboids to the world.
    let mut groups = CollisionGroups::new();
    groups.set_membership(&[1]);
    groups.set_whitelist(&[1]);
    let contacts_query = GeometricQueryType::Contacts(0.0, 0.0);
    let shape = ShapeHandle::new(Cuboid::new(Vector3::new(1.0, 1.0, 1.0)));
    let pos = Isometry3::new(zero(), zero());
    world.add(pos, shape.clone(), groups, contacts_query, 1);
    world.add(pos, shape, groups, contacts_query, 2);

    loop {
        // BUG: updating doesn't clear out the old contact pairs, so in the loop below, we will try
        // pushing apart objects that, according to their positions and shapes, should not be
        // in contact anymore.
        world.update();

        // Resolve intersections by pushing cubes apart along the contact normal.
        let mut move_actions = HashMap::new();
        for (handle1, handle2, _, manifold) in world.contact_pairs(true) {
            // Once a room from a contact has been moved, it may invalidate other contacts that
            // it was a part of, so skip them.
            if move_actions.contains_key(&handle1) || move_actions.contains_key(&handle2) {
                continue;
            }

            let contact = &manifold.deepest_contact()
                .expect("No penetration in contact").contact;

            if contact.depth == 0.0 {
                continue;
            }

            // The normal should be parallel to some axis. To ensure that there are no endless
            // cycles of resolutions, only allow resolutions to push in the positive direction
            // along each axis.
            let n: Vector3<f32> = contact.depth * contact.normal.into_inner();
            let (push_v, move_handle) = if n.x > 0.0 || n.y > 0.0 || n.z > 0.0 {
                println!("Pushing room 1");
                (-n, handle1)
            } else {
                println!("Pushing room 2");
                (n, handle2)
            };

            move_actions.insert(move_handle, push_v);

            let obj1 = world.collision_object(handle1).unwrap();
            let obj2 = world.collision_object(handle2).unwrap();
            println!("C1 = {:?}", obj1.shape().as_shape::<Cuboid<f32>>());
            println!("C2 = {:?}", obj2.shape().as_shape::<Cuboid<f32>>());
            println!("C1 = {:?}", obj1.position().translation.vector);
            println!("C2 = {:?}", obj2.position().translation.vector);
            println!("Depth = {}", contact.depth);
            println!("N = {}", contact.normal.into_inner());
        }

        // Need to perform movements after releasing the borrow on world.
        for (handle, push_v) in move_actions.iter() {
            let move_obj = world.collision_object_mut(*handle)
                .expect("Collision object does not exist for handle");
            let mut pos = move_obj.position().clone();
            pos.append_translation_mut(&Translation::from(*push_v));
            move_obj.set_position(pos);
        }

        if move_actions.is_empty() {
            break;
        }
    }
}

fn main() {
    two_colliding_cuboids();
}
```

Basically, I'm trying to use a `CollisionWorld` to push apart a bunch of colliding cuboids. I've simplified the example here to just 2 cubes. You'll see that with `ncollide3d = "0.19"`, the example will loop forever because it never realizes that the cubes are not in contact after being pushed apart.

This must be a regression in behavior according to the [documentation](https://docs.rs/ncollide/0.14.1/x86_64-pc-windows-msvc/ncollide/world/struct.CollisionWorld.html#method.contact_pairs) of an older version (0.14.1).

It states that `contact_pairs` "iterates through all the contact pairs detected since the last update." So you can see the problem is that it also iterates through pairs detected *before* the last update.

I think maybe I can work around this using the `contact_events` function, but it makes things more complicated because of my particular application. I don't want to push the objects more than necessary, so, for each iteration over the contacts, I will only push an object the first time I see it in a contact pair. By pushing an object, it might resolve more collisions that come up in the contact iterator later, and I don't want to try resolving these unnecessarily. If I have to use `contact_events`, then when I ignore a "stale" contact, I may never see the contact pair again if the collision is left unresolved. At least this is my interpretation of the docs [here](https://www.ncollide.org/rustdoc/ncollide3d/pipeline/narrow_phase/enum.ContactEvent.html). Specifically, this part about `ContactEvent::Started`: "This event is generated whenever the narrow-phase finds a contact between two collision objects that did not have any contact at the last update."

It would be greatly appreciated if someone could suggest another workaround while this bug is addressed. Thanks!
The docs here: https://www.ncollide.org/rustdoc/ncollide2d/pipeline/world/struct.CollisionWorld.html#method.interferences_with_point state that the interesction test is done with the broad_phase, which is incorrect, as it is done for the entire pipeline.
This is also the case for `CollisionWorld::interferences_with_aabb`. 
Presently, supporting a new shape requires defining a new `ContactDispatcher`, which is boilerplate-heavy, awkward to compose, and does not account for CCD or high-level query functions. This could be improved by relying something like on one or more dynamic containers that map `(TypeId, TypeId) -> T` for various query functions `T`, and which can easily be mutated by the user to add new cases. However, implementation of some queries in terms of abstract interfaces like `&dyn SupportMap` complicates this as the desired algorithm is associated with an unbounded set of concrete `TypeId`s.
The scaling methods on various shapes scale the points of the shape but not the BVT, which seems to lead to collision detection using the wrong shape.
This issue is related to rustsim/nphysics#203. It is about implementing (de)serialization capabilities to ncollide so they can be used when adding those capabilities to nphysics.

As said in the linked issue I'm willing to make a PR for this myself and I will use this issue to discuss the questions specific to ncollide.

The first thing I did in my temporary fork was adding `#![deny(bare_trait_objects)]` to src/lib.rs and using [cargo fix](https://github.com/rust-lang-nursery/rustfix) to put `dyn` in front of every trait object, thereby making them easily recognisable. This was ~250 changes and originally meant only for development purposes but I think it is sufficiently handy and non-intrusive that it may be a good idea to keep it. If this is done it should most likely be in a different PR to keep changes manageable.

Then I started `derive`-ing the crap out of everything and doing a few manual implementations which only contained `unimplemented!` when I ran into problems. I'm still looking at the problem of trait objects but [typetag](https://crates.io/crates/typetag), as suggested by @Ralith, seems to fix it without security concerns by basically making an enum out of things. I  also looked at [serde_traitobject](https://crates.io/crates/serde_traitobject) but that serialized the vtable pointer and could allow arbitrary code execution (I think, about 99% sure and the crate also warns of its insecurity) and is specific to a binary. Question: Is a dependency like typetag acceptable? Otherwise I would end up probably implementing about the same thing but less mature.

I have also looked at the serialization support of some dependencies:
- petgraph supports serialization when using the feature "serde-1"
- nalgebra supports serialization when using the feature "serde-serialize"
- slab does **not** support serialization but has [as of yet unreleased functionality](https://github.com/carllerche/slab/pull/62) which should make it easier and only leave a simple manual implementation left to do.
- smallvec supports serialization but I'm not even sure if it's in use anymore (couldn't find it at least).

I'm currently in the middle of my test week and will resume work on this next weekend, sorry for being a bit slow right now.
Since the old *Collectors are removed, this is an API-breaking change.
They could easily be re-added on top of the Visitors though.