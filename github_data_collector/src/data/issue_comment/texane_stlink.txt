- [x] Programmer/board type: Stlink/v2 Clone (specifically [this one](https://www.amazon.com/Aideepen-ST-Link-Programming-Emulator-Downloader/dp/B01J7N3RE6/ref=pd_sbs_147_t_0/131-8360886-6233443))
- [x] Programmer firmware version: V2.J34.S7 as reported by Windows STM32 ST-LINK Utility software
- [x] Operating system: Linux (specifically Ubuntu 18.04)
- [x] Stlink tools version and/or git commit hash: e.g master (3690de9f)
- [x] Stlink commandline tool name: `st-flash`
- [x] Target chip (and optional board): STM32L072CZ

I am looking to simply load a HEX file onto the target using this programmer. When I run the following command: `st-flash --format ihex write myapp.hex`

I get the following error trace / output:
```
st-flash 1.5.1-50-g3690de9
2020-01-13T16:19:45 INFO usb.c: -- exit_dfu_mode
2020-01-13T16:19:45 INFO common.c: Loading device parameters....
2020-01-13T16:19:45 WARN common.c: Invalid flash type, please check device declaration
  core status: unknown
Unknown memory region
```

And if I run `st-info --chipid` I just get: `0x0000`.

...and `st-info --probe` outputs the following when the programmer is plugged into USB:
```
Found 1 stlink programmers
 serial: 2c0f03013212354d434b4e00
openocd: "\x2c\x0f\x03\x01\x32\x12\x35\x4d\x43\x4b\x4e\x00"
  flash: 0 (pagesize: 0)
   sram: 0
 chipid: 0x0000
  descr: unknown device
```

I'm not sure what, if anything, I might be doing wrong. I built the repository from source and I can obviously run the resultant binaries without a problem. Please can someone help set on the right course? If there is an easier path than using the tools in this repository, I'm also open to hearing that.
- [X] Programmer/board type: e.g Stlink/v2-onboard
- [X] Programmer firmware version: From programmer's (mbed) USB Mass Storage NODE_F103RB/DETAILS.TXT: Version: 0221, Build:   Jun 23 2017 17:43:45.
- [X] Operating system: Linux, Ubuntu 16.04
- [X] Stlink tools version: 3690de9fddeed49d304a1afab6410ceb64c70e1b
- [X] Stlink commandline tool name: `st-util`
- [X] Target chip (and optional board): e.g STM32F103RB (NUCLEO-F103RB)

The flashing of the onboard STM32F103RB fails.

Output:

```
fadedbee@purple:~/github/stlink$ ./build/Release/src/gdbserver/st-util
st-util 1.5.1-50-g3690de9
2020-01-08T09:35:16 INFO common.c: Loading device parameters....
2020-01-08T09:35:16 INFO common.c: Device connected is: F1 Medium-density device, id 0x20036410
2020-01-08T09:35:16 INFO common.c: SRAM size: 0x5000 bytes (20 KiB), Flash: 0x20000 bytes (128 KiB) in pages of 1024 bytes
2020-01-08T09:35:16 INFO gdb-server.c: Chip ID is 00000410, Core ID is  1ba01477.
2020-01-08T09:35:16 INFO gdb-server.c: Listening at *:4242...
2020-01-08T09:49:00 INFO gdb-server.c: Found 6 hw breakpoint registers
2020-01-08T09:49:00 INFO gdb-server.c: GDB connected.
2020-01-08T09:49:06 INFO common.c: Attempting to write 1024 (0x400) bytes to stm32 address: 134217728 (0x8000000)
Flash page at addr: 0x08000000 erased
2020-01-08T09:49:06 INFO common.c: Finished erasing 1 pages of 1024 (0x400) bytes
2020-01-08T09:49:06 INFO common.c: Starting Flash write for VL/F0/F3/F1_XL core id
2020-01-08T09:49:06 INFO flash_loader.c: Successfully loaded flash loader in sram

2020-01-08T09:49:06 INFO common.c: Starting verification of write complete
2020-01-08T09:49:06 INFO common.c: Flash written and verified! jolly good!
2020-01-08T09:49:06 INFO common.c: Attempting to write 1024 (0x400) bytes to stm32 address: 134218752 (0x8000400)
Flash page at addr: 0x08000400 erased
2020-01-08T09:49:06 INFO common.c: Finished erasing 1 pages of 1024 (0x400) bytes
2020-01-08T09:49:06 INFO common.c: Starting Flash write for VL/F0/F3/F1_XL core id
2020-01-08T09:49:06 INFO flash_loader.c: Successfully loaded flash loader in sram
2020-01-08T09:49:06 ERROR flash_loader.c: write error, count == 511
2020-01-08T09:49:06 ERROR common.c: stlink_flash_loader_run(0x8000400) failed! == -1
^C
```

```
fadedbee@purple:~/vx4000-platform/nucleo-f103rb-blinky$ arm-none-eabi-gdb build/nucleo-f103rb-blinky.elf 
GNU gdb (GNU Tools for Arm Embedded Processors 7-2018-q3-update) 8.1.0.20180315-git
Copyright (C) 2018 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "--host=x86_64-pc-linux-gnu --target=arm-none-eabi".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
<http://www.gnu.org/software/gdb/documentation/>.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from build/nucleo-f103rb-blinky.elf...done.
(gdb) target extended-remote :4242
Remote debugging using :4242
0x080021d8 in ?? ()
(gdb) load
Loading section .isr_vector, size 0x10c lma 0x8000000
Loading section .text, size 0xe4c lma 0x800010c
Loading section .rodata, size 0x2c lma 0x8000f58
Loading section .init_array, size 0x4 lma 0x8000f84
Loading section .fini_array, size 0x4 lma 0x8000f88
Loading section .data, size 0xc lma 0x8000f8c
Error finishing flash operation
(gdb) quit
```

Expected/description:

I had expected the flashing to complete successfully.

I noticed this dead link and would like to suggest to remove the release name (cosmic) from the link.  
In that case packages.ubuntu.com will list the releases where this package is available.
Hello,

I connected my STM32 board and it's blinking.
However, I get "Found 0 stlink programmers" when I run
```
st-info --probe
```
I am running Catalina 10.15.2. No USB device was added to /dev, so maybe I am missing a driver?

The hardware is from Amazon:
[initeq] STM32 ARM STM32F103C8T6 Blue Pill Minimum System Development Board with ST-Link V2 USB Programmer (2-Pack + ST-Link V2)

Would anyone know how to resolve this? I looked for info/drivers but did not find anything.
st-info was built manually from git.

Thanks so much for your help!
Itamar
Thanks a lot for "stlink". I started to make myself a little bit more familiar with the software structure. 
I added a document (developer.txt) and some comments here and there.
Of course still a lot more could be done...

Maybe it is useful to others (especially because you look for a new maintainer).

There no code changes in this pull request, just comments...
I have a fix.

- [X] Programmer/board type: Stlink/v2-onboard
- [X] Programmer firmware version: e.g STSW-LINK007 3.3.2 (FW V2J35M26)
- [X] Operating system: e.g Linux, Ubuntu 19.10
- [X] Stlink tools version and/or git commit hash: 3690de9
- [X] Stlink commandline tool name: `st-util`
- [X] Target chip (and optional board): e.g STM32G031K8 (STM32G0 Nucleo-32 board [MB1455])

A as-detailed description possible of the problem with debug output when available.
When trying to flash and debug my Nucleo-32 with the STM32G031K8 st-util failed to recognize the smaller 'G0 part with IDCODE[DEV_ID] = 0x466.

Output:

$ ./src/gdbserver/st-util
st-util 1.5.1-50-g3690de9
2019-12-23T14:03:25 INFO common.c: Loading device parameters....
2019-12-23T14:03:25 WARN common.c: unknown chip id! 0x10016466

Expected/description:
I got it to work with the following changes:

1. First I renamed STLINK_CHIPID_STM32_G0X1 --> STLINK_CHIPID_STM32_G07X and added STLINK_CHIPID_STM32_G03X to better reflect the large vs. small chips. The larger G07X includes the 'G070, 'G071, and 'G080 while the smaller G03X includes the 'G030, 'G031, and 'G041.

2. Then I updated the .description fields in stlink_chipid_params devices[].

3. Then I added an entry to the devices[] array to match the G3X parameters.

4. Then I added an OR to the sl->chip_id checks in stlink_write_option_bytes() to allow the new G03X part.

Now I get the following output:
$ src/gdbserver/st-util
st-util 1.5.1-50-g3690de9
2019-12-23T14:14:20 INFO common.c: Loading device parameters....
2019-12-23T14:14:20 INFO common.c: Device connected is: G030/G031/G041 device, id 0x10016466
2019-12-23T14:14:20 INFO common.c: SRAM size: 0x2000 bytes (8 KiB), Flash: 0x10000 bytes (64 KiB) in pages of 2048 bytes
2019-12-23T14:14:20 INFO gdb-server.c: Chip ID is 00000466, Core ID is  0bc11477.
2019-12-23T14:14:20 INFO gdb-server.c: Listening at *:4242...

and I can connect with arm-none-eabi-gdb --version
GNU gdb (GNU Tools for Arm Embedded Processors 8-2018-q4-major) 8.2.50.20181213-git

My ELF file gets flashed properly and I can set breakpoints, single-step, inspect variables, etc.

**NOTICE: The issue may be closed without notice when not enough information is provided!**

Thank you for giving feedback to the stlink project. Take some time to fill out
 check boxes with a X in the following items so developers and other people can try to
 to find out what is going on. And add/remove what is appropriate to your problem.

When submitting a feature request, try to reuse the list and add/remove what is appropriate.
 Place a `X` between the brackets `[X]` to mark the list item.

- [ ] Programmer/board type: e.g Stlink/v1, Stlink/v2, Stlink/v2-onboard
- [ ] Programmer firmware version: e.g STSW-LINK007 2.27.15
- [ ] Operating system: e.g Linux, Mac OS X, Windows (with specific version)
- [ ] Stlink tools version and/or git commit hash: e.g v1.1.0/git-c722056
- [ ] Stlink commandline tool name: e.g `st-info`, `st-flash`, `st-util`
- [ ] Target chip (and optional board): e.g STM32F402VG (STM32Fxxx Discovery)

A as-detailed description possible of the problem with debug output when available.

Output:

```
OUTPUT/ERROR of the commandline tool(s)
```

Expected/description:
`short description of the expected value`

Thank you,
The stlink project maintainers

1) STM32L4 has single 32-bit word with all needed options. I just works.
2) STM32L1 is a bit more complicated. There are two 32-bit words to modify. Sometimes you need to change only one. When reprogramming a device with RDP level 1 you only have to change RDP to 0,
everything else is erased. But even with RDP 0 you can't reflash large code while IWDG_SW is cleared. So I've decided to allow writing to 0x1ff80000 and 0x1ff80004.
- [X] Programmer/board type: Stlink/v2
- [ ] Programmer firmware version: 
- [X] Operating system: Windows 7
- [X] Stlink tools version and/or git commit hash: v1.3.0
- [X] Stlink commandline tool name: `st-util`
- [X] Target chip (and optional board): STM32L082

On using **"st-util"** of v1.3.0, we face issue on connecting with GDB tool. We see an inappropriate driver is considered instead of ST-Link driver. The driver information has been viewed using **"st-info --serial"**.

Output:
**GDB error**
```
warning: while parsing target memory map (at line 1): Can't convert length="0xzx" to an integer
```
**STLink driver issue**
```
C:\stlink\bin>st-info.exe --serial
libusb: info [windows_get_device_list] The following device has no driver: '\\.\
USB#VID_147E&PID_2016#6&32FEB3AB&0&3'
libusb: info [windows_get_device_list] libusb will not be able to access it.
493f72063f7853533956193f
```

Attached the screenshot of driver highlighted with red rectangle.

Later we cloned the source of v1.5.1 and build them, the st-util here works as expected and proper driver is seen.

Thank you,
Dhinesh

Hello.

Debian package created with 'make package' does not contain **postinst** script.
I do not know how to add it, but installation should run  **depmod** after sucess.
