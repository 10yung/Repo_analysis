Hello,

It would be nice if `docopt(strip_names = TRUE)` would also convert command line arguments invoked like `--do-the-thing` so that from R they were accessible as `opt$do_the_thing`
Newbie here.
Here is example from http://docopt.org/:
```
Naval Fate.

Usage:
  naval_fate ship new <name>...
  naval_fate ship <name> move <x> <y> [--speed=<kn>]
  naval_fate ship shoot <x> <y>
  naval_fate mine (set|remove) <x> <y> [--moored|--drifting]
  naval_fate -h | --help
  naval_fate --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
```

Trying to make it work from R:
```r
library(docopt)
doc ='
Naval Fate.

Usage:
  naval_fate ship new <name>...
  naval_fate ship <name> move <x> <y> [--speed=<kn>]
  naval_fate ship shoot <x> <y>
  naval_fate mine (set|remove) <x> <y> [--moored|--drifting]
  naval_fate -h | --help
  naval_fate --version

Options:
  -h --help     Show this screen.
  --version     Show version.
  --speed=<kn>  Speed in knots [default: 10].
  --moored      Moored (anchored) mine.
  --drifting    Drifting mine.
'
opt = docopt(doc)
```
Getting uninformative error:
```
Error: 
 usage: naval_fate ship new <name>...
  
 usage: naval_fate ship <name> move <x> <y> [--speed=<kn>]
  
 usage: naval_fate ship shoot <x> <y>
  
 usage: naval_fate mine (set|remove) <x> <y> [--moored|--drifting]
  
 usage: naval_fate -h | --help
  
 usage: naval_fate --version
```
It is often natural to split up the `Usage` line based on length when there are multiple options, but this is apparently not possible? The following MWE:
```r
library(docopt)
doc <- "Usage: example.r [-a <ABCEDARIAN>] [-b <BOTHER>] [-t <TOOLONG>] [-q <QUIT_ALREADY>] \
 [-O <OOOPS>]
-a ABCEDARIAN               just an example. [default: abcde]
-b BOTHER                   just an example. [default: bother]
-t TOOLONG                  just an example. [default: 1234]
-q QUIT_ALREADY             just an example. [default: noquit]
-O OOOPS                    just an example. [default: ooops]
"
opt <- docopt(doc,args='-O nofooz')
```
yields the error
```r
Error:
 usage: example.r [-a <ABCEDARIAN>] [-b <BOTHER>] [-t <TOOLONG>] [-q <QUIT_ALREADY>]
```
I have tried dropping the backslash, doubling the backslash, adding another `Usage:` prefix (which causes a different error about multiple `Usage:` lines) and so on.

```r
sessionInfo()
```
```r
R version 3.2.2 (2015-08-14)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Red Hat Enterprise Linux Server release 6.9 (Santiago)

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C
 [9] LC_ADDRESS=C               LC_TELEPHONE=C
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base

other attached packages:
[1] docopt_0.4.5   fortunes_1.5-4 drat_0.1.2

loaded via a namespace (and not attached):
[1] magrittr_1.5  tools_3.2.2   stringi_1.1.5 stringr_1.2.0
```

(see also https://github.com/docopt/docopt/issues/130 , which was of no help).

Hello there,

Thank you for bringing this phenomenal tool to R!

I'm on docopt_0.4.5 and I've noticed a strange behaviour regarding order of arguments. Here's an example:

```
' Usage: combine_germline_files.R -p PATHS -o OUTPUT [ -n GENENAME ]
 ' -> doc

 library(docopt)
 args = docopt(doc)
```

When I run 

```
Rscript scripts/pipelines/pog-germline/combine_germline_files.R -p paths/germline_paths.txt -o meta/mutyh_germline.txt -n MUTYH
```

it works just fine, but if I reverse the argument order of -p and -o as follows:

```
Rscript scripts/pipelines/pog-germline/combine_germline_files.R -o meta/mutyh_germline.txt -p paths/germline_paths.txt -n MUTYH
```

I get an error. The script loads ```meta/mutyh_germline``` into ```PATHS``` instead of correctly loading ```paths/germline_paths.txt``` into ```PATHS```. This seems to suggest a hidden dependency on the order of arguments, not just which flags they follow.
Since the current implementation supports also info for positional parameters (and even arbitrary  text, which is really useful), it would be great if the examples in the README or via `?docopt` could mention this as well.

```

suppressMessages(require(docopt))

doc <- '
Analyze the effect of the batch removal on the clustering
Usage: batch_effect_removal.R [options] <count_matrix> <fancy_input>

Inputs:
count_matrix                    The input data
fancy_input                      Another very important input for this cool program

Options:
--contrasts=<tab_delim_table>   Table with sample pairs for which dge analysis should be performed
--pcutoff <pcutoff>             Override q-value filter and filter by p-value instead
'

#valid
opts <- docopt(doc, args=list("foo.txt"))
#invalid
opts <- docopt(doc, args=list())

# do wee see the Inputs when asking for help?
opts <- docopt(doc, args="--help")
```
See the "Inputs" and header line in the example.
Is it possible to pass arguments to a script using docopt when sourcing this script?

I tried redefining commandArgs as suggested in http://stackoverflow.com/a/14526329/1878788, but this fails.

for instance, my docopt text (named `doc`) contains the following rule:

```
-o, --out_dir <out_dir>  out_dir
```

If, in my interactive R session, I redefine `commandArgs` as follows:

```
 commandArgs <- function() {c("--out_dir", "interactive_session")}
```

and then source my script, when I examine the result of `docopt(doc)`, I see the following:

```
$`--out_dir`
NULL
```

Any help appreciated.

I found some strange behavior where required options results in an error:

``` r
'usage: my_program.R [-a -r -m <msg>] <file>

options:
 -a         Add
 -r         Remote
 -m <msg>   Message' -> doc

docopt(doc)

## Error: 
##  usage: my_program.R [-a -r -m <msg>] <file>
```

It's fixed if you place it as an optional argument:

``` r
'usage: my_program.R [-a -r -m <msg>] [<file>]

options:
 -a         Add
 -r         Remote
 -m <msg>   Message' -> doc

docopt(doc)

## List of 8
##  $ -a    : logi FALSE
##  $ -r    : logi FALSE
##  $ -m    : NULL
##  $ <file>: NULL
##  $ a     : logi FALSE
##  $ r     : logi FALSE
##  $ m     : NULL
##  $ file  : NULL
## NULL

```

Here's the most MWE:

``` r
'usage: my_program.R <file>' -> doc
docopt(doc)
## Error: 
##  usage: my_program.R <file>
```

Session Information:

```
> devtools::session_info()
Session info -------------------------------------------------------------------------------------
 setting  value                       
 version  R version 3.3.1 (2016-06-21)
 system   x86_64, darwin13.4.0        
 ui       RStudio (1.0.8)             
 language (EN)                        
 collate  en_US.UTF-8                 
 tz       America/Los_Angeles         
 date     2016-09-09                  

Packages -----------------------------------------------------------------------------------------
 package  * version date       source        
 devtools   1.12.0  2016-06-24 CRAN (R 3.3.0)
 digest     0.6.10  2016-08-02 CRAN (R 3.3.0)
 docopt   * 0.4.5   2016-06-13 CRAN (R 3.3.0)
 magrittr   1.5     2014-11-22 CRAN (R 3.2.0)
 memoise    1.0.0   2016-01-29 CRAN (R 3.2.3)
 stringi    1.1.1   2016-05-27 CRAN (R 3.3.0)
 stringr    1.0.0   2015-04-30 CRAN (R 3.2.0)
 withr      1.0.2   2016-06-20 cran (@1.0.2) 
```

```
doc <- "Usage: demo1 [options] <x> <y> <z>

Options:
  -h, --help
  -i, --invert
"
str(docopt::docopt(doc,args='1 -2 -3'))
```

Results in an error because it tries to treat -2 and -3 as options.

```
doc <- "Usage: demo2 [options] [--] <x> <y> <z>

Options:
  -h, --help
  -i, --invert
"
str(docopt::docopt(doc,args='-- 1 -2 -3'))
```

Works just fine, but requires that -- be used, even when there are no options provided, which is annoying.

In the python version of docopt, there is an `options_first=` parameter to `docopt`. Can this be exposed/implemented in R?

This is likely related to #21.

``` R
doc1 <- "
prog
Usage:
  prog [(--foo=X --bar=Y)]
"
doc2 <- "
prog
Usage:
  prog [options] [(--foo=X --bar=Y)]
"
```

This call errors as expected:

``` R
> str(docopt::docopt(doc1, "--foo=bar", strict = TRUE))
```

```
 Error:
  usage: prog [(--foo=X --bar=Y)]
```

This call succeeds as expected:

``` R
> str(docopt::docopt(doc1, "--foo=bar --bar=foo", strict = TRUE))
```

```
 List of 2
  $ --foo: chr "bar"
  $ --bar: chr "foo"
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

This call _should_ error, but doesn't:

``` R
> str(docopt::docopt(doc2, "--foo=bar", strict = TRUE))
```

```
 List of 2
  $ --foo: chr "bar"
  $ --bar: list()
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

Here are 4 docopt docs, and an option-less call results in the same 4 outputs for all cases in the reference implementation... but in the R package one of the docs results in `list()` instead of `NULL`.

Case 1 :

``` R
doc <- "
prog
Usage:
  prog [(--foo=X --bar=X)]
"
str(docopt::docopt(doc, "", strict = TRUE))
```

```
 List of 2
  $ --foo: NULL
  $ --bar: NULL
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

Case 2:

``` R
doc <- "
prog
Usage:
  prog [(--foo=X --bar=X)]
Options:
  --foo=X  some description
  --bar=X  some other description
"
str(docopt::docopt(doc, "", strict = TRUE))
```

```
 List of 2
  $ --foo: NULL
  $ --bar: NULL
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

Case 3:

``` R
doc <- "
prog
Usage:
  prog [options] [(--foo=X --bar=X)]
"
str(docopt::docopt(doc, "", strict = TRUE))
```

```
 List of 2
  $ --foo: list()
  $ --bar: list()
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

Case 4:

``` R
doc <- "
prog
Usage:
  prog [options] [(--foo=X --bar=X)]
Options:
  --foo=X  some description
  --bar=X  some other description
"
str(docopt::docopt(doc, "", strict = TRUE))
```

```
 List of 2
  $ --foo: NULL
  $ --bar: NULL
  - attr(*, "class")= chr [1:2] "docopt" "list"
```

Cases 1, 2, and 4 give `--foo` and `--bar` as `NULL`.
Case 3 give `--foo` and `--bar` as `list()`.
The Python reference implementation gives `null` for all four cases.
