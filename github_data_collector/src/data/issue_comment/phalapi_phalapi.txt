无巧  16:38:33
@打杂-dogstar 
在pgsql数据库中
$where['abc'] = ['2','3'];  应该是abc in ('2','3')

$where['abc IN'] = '2,3' 应该也是 abc in ('2','3')

但返回是错误的，请留意新版需要处理一下！

![image](https://user-images.githubusercontent.com/5896512/67463676-702ac080-f674-11e9-96b5-75e373ecc791.png)
ajax请求生成的base64
是我在docs.php里面请求的测试数据
我想把主数据体使用Json的方式进行提交，需要修改哪些地方和参数？
你好！
我已经开启 'enable_uri_match' => true
并且配置apache如下
<IfModule mod_rewrite.c>
    RewriteEngine on
    RewriteBase /

    RewriteCond %{HTTP_HOST} ^dev.api.net$

    RewriteCond %{REQUEST_FILENAME} !-f
    RewriteCond %{REQUEST_FILENAME} !-d

    RewriteCond %{REQUEST_URI} !^/phalapi/public/
    RewriteRule ^(.*)$ /phalapi/public/$1
    RewriteRule ^(/)?$ index.php [L]
</IfModule>

报错如下：
Not Found
The requested URL /phalapi/public/App/Hello/World was not found on this server.

Additionally, a 404 Not Found error was encountered while trying to use an ErrorDocument to handle the request.

请问怎么配置呢？
sqlserver使用limit分页：
`$this->getORM()
            ->select('*')
            ->limit(($page - 1) * $perpage, $perpage)
            ->fetchAll();`
会出现偏移量不起作用的情况，返回的结果始终是($page - 1) * $perpage的条数

有提供设置响应头的相关设置吗? 想设置Cache-Control 时间.

看到现在只能获取response去设置,不太方便. 

Reverts phalapi/phalapi#92
@phalapi 谢谢，已经改了。麻烦加下。

_Originally posted by @logmecn in https://github.com/phalapi/phalapi/issues/71#issuecomment-496064839_
首先第一步, 注释规范化. . 建议使用[apidocjs](http://apidocjs.com/)的方案. 比如下面是我的代码:
```php
    /**
     * @api {post} /auth/register/email 邮箱注册
     * @apiDescription 注册时, 请求体将不可避免地用明文传参.所以建议开启SSL.
     * @apiVersion 2.0.0
     * @apiPermission none
     * @apiName registerByEmail
     * @apiGroup Auth
     *
     * @apiParam {String{3..16}} username  用户名.
     * @apiParam {String{..32}} email  用户邮箱.
     * @apiParam {String{6}} captch  验证码.
     * @apiParam {String} password  密码.
     *
     * @apiSuccessExample 成功响应:
            {
                "ret": 200,
                "data": {},
                "msg": ""
            }
     */
    public function registerByEmail()
    {
        $domain = new Domain();
        /** ============== 格式检查 ============== */
        /** ------- 用户名检查 ------- */
        $this->username = trim($this->username);
        if (!\App\Helper\Validator::checkUsernameFormat($this->username)) {
            throw new BadRequestException('用户名格式错误, 请检查用户名格式是否正确. 只可以含有?.@_所有中英文和emoji.');
        }
        /** ------- 邮箱检查   ------- */
        $this->email = trim($this->email);
        if (!\App\Helper\Validator::checkEmailFormat($this->email)) {
            throw new BadRequestException('邮箱格式错误, 必须形如 username@website.domain 的格式');
        }
        /** ============== 正式检查 ============== */
        // 检查可用性(重复)
        if (!$domain->isEmailAvailable($this->email)) {
            throw new BadRequestException('邮箱已被使用');
        }
        /** ------- captch validating ------- */
        $this->captch = trim($this->captch);
        $correctCaptch = $domain->getLastCaptch($this->email);
        if ($correctCaptch == null) {
            throw new BadRequestException('未发送验证码');
        }
        if ($this->captch != $correctCaptch) {
            throw new BadRequestException('验证码错误或过期');
        }
        /** ------- password validating ------- */
        // 密码不进行 trim()
        /** ------- 完成注册 ------- */
        $domain->registerUserByEmail($this->username, $this->email, $this->password, 1);

        // 目前规定, 失败才返回消息
        //\PhalApi\DI()->response->setMsg("注册成功");

        return array();
    }
```

1. 在目前的设计中, getRules 和 API 实现距离太远, 无论是查找和修改都麻烦, 降低了开发效率. 建议直接从注释中读取规则.
2. 建议能够从注释直接生成fastroute的配置. 比如上面这个就是post方式, 地址为/auth/register/email
3. 建议直接从注释中判断执行权限, 比如这里 @apiPermission none, 就表示任何人都有权限.

apidoc 已经能够直接生成json, 读取json再生成相应所需php文件, 并不困难.
```
<?php
namespace App\Api;
use PhalApi\Api as Api;

class User extends Api {
    public function getRules() {
        return array(
            'loginAcct' => array(
                'area' => array('name' => 'area', 'require' => true,'min' => 1, 'source' => 'post', 'desc' => '区号'),
                'num' => array('name' => 'num', 'require' => true, 'min' => 1, 'source' => 'post', 'desc' => '手机号')
            ),
        );
    }
    public function loginAcct() {
        $area = $this->area;
        $num = $this->num;
        return array('is_login' => true, 'user_id' => 8);
    }
}

```
post请求:xxx/?service=App.User.LoginAcct
参数:area=86&num=1234

请求结果:
```
{
    "ret": 400,
    "data": {
        
    },
    "msg": "Bad Request: area require, but miss"
}
```
