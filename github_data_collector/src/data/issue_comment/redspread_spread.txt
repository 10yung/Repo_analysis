
I've added in the same for a header in Contributing.md. Let me know if you want to change the name of the PR title or anything similar.
to maybe look at how much work would be required to switch away from go ask types.

:-)
- https://github.com/redspread/spread/releases/tag/v1.0.0

README Instructions for make appear to be incorrect. I needed to run `SPREAD_VERSION=v1.0.0 make build` instead of `make build/spread`. 

Why are the binaries not available to download directly for the latest release?

README Instructions for installation from brew are also outdated. `brew install spread-versioning` should be replaced with `brew install spread`.

Documentation has the same outdated instructions: https://redspread.readme.io/docs/getting-started



I've installed libgit2, I've setup LD_LIBRARY_PATH and running `ld -v -lgit2` tells me the compiler is able to find it at /usr/local/lib/libgit2.so.

But when I run `make build-gitlab` or `build/spread-linux-static` gcc seems to fail.

I've not meddled around with Go before, so I might be missing something obvious here?

```
GOOS=linux go build -o build/spread-linux-static -i -v -ldflags "-X main.Version=v0.0.0 -extldflags "-static" --s -w" rsprd.com/spread/cmd/spread
rsprd.com/spread/cmd/spread
# rsprd.com/spread/cmd/spread
/usr/local/go/pkg/tool/linux_amd64/link: running gcc failed: exit status 1
/usr/bin/ld: cannot find -lgit2
/tmp/go-link-587612200/000003.o: In function `mygetgrouplist':
/tmp/workdir/go/src/os/user/getgrouplist_unix.go:15: warning: Using 'getgrouplist' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/tmp/go-link-587612200/000003.o: In function `mygetgrgid_r':
/tmp/workdir/go/src/os/user/lookup_unix.go:38: warning: Using 'getgrgid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/tmp/go-link-587612200/000003.o: In function `mygetgrnam_r':
/tmp/workdir/go/src/os/user/lookup_unix.go:43: warning: Using 'getgrnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/tmp/go-link-587612200/000003.o: In function `mygetpwnam_r':
/tmp/workdir/go/src/os/user/lookup_unix.go:33: warning: Using 'getpwnam_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/tmp/go-link-587612200/000003.o: In function `mygetpwuid_r':
/tmp/workdir/go/src/os/user/lookup_unix.go:28: warning: Using 'getpwuid_r' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/tmp/go-link-587612200/000002.o: In function `_cgo_7a2d42f1a351_C2func_getaddrinfo':
/tmp/workdir/go/src/net/cgo_unix.go:66: warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
collect2: error: ld returned 1 exit status

Makefile:100: recipe for target 'build/spread-linux-static' failed
make: *** [build/spread-linux-static] Error 2
```

When deploying with Gitlab CI a lot of projects use conditional statements within their script definition.
In combination with the Gitlab CI triggers and their variables it's possible to only execute the deploy based on these variables. (Good example is a repo that's made of multiple micro-services and it's most efficient to only run the build/deploy scripts of the micro-services that have actually changed their versions)

Currently this image runs the deploy command straight from the entrypoint.sh, but flexibility would be much improved if we are able to run the command ourselves from the script section in our build definition using this image. This way we could conditionally trigger the actual deploy with spread when all requirements are met.

I discovered I had to install cmake to build libgit2, and update my PKG_CONFIG_PATH along with my LD_LIBRARY_PATH in order to build on my Fedora 24 workstation
