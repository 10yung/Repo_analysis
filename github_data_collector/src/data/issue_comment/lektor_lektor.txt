Hello,
is there a variable that outputs the build date? I wish to use it in the footer "last updated" info.
Thank you.
During the creation of several documents in asciidoc (I'm pretty sure this might also happen in markdown) I've been forced to create field templates for the body of some pages; essentially adding html content I want to particular parts of the body. This tends to end in a set of templates that should be used to create the content usin a model's field. This seems common practice in asciidoc and markdown.

It would be great if it were possible to configure field templates and have that field popup pre-filled with its template content. Could you please comment your thoughts on this?
It would be great to get ids/anchors to headers for deep-linking. More specifically, assume you've got a markdown content like this in `content/example/contents.lr`:

```
body:

# Example page
## sub paragraph 1
### some details
## additional sub paragraph
### some details
```

Then it would be great to generate html like this:

```
<h1 id="example-page">Example page</h1>
<h2 id="sub-paragraph-1">sub paragraph 1</h2>
<h3 id="some-details">some details</h3>
<h2 id="additional-sub-paragraph">additional sub paragraph</h2>
<h3 id="some-detials-1">some details</h3>
```

This allows very easily allows doing deep-links to every header, for example:
* `https://.../example/#example-page`
* `https://.../example/#sub-paragraph-1`
* `https://.../example/#some-details`
* `https://.../example/#additional-sub-paragraph`
* `https://.../example/#some-details-1`

Some markdown engines like githubs readme renderer do this automatically. (eg. `https://github.com/lektor/lektor#how-do-i-use-this`)
### Issue(s) Resolved
Fixes #713

### Description of Changes
* [x] Wrote at least one-line docstrings (for any new functions)
* [x] Added unit test(s) covering the changes (if testable)
* [ ] Included a screenshot or animation (if affecting the UI, see [Licecap](https://www.cockos.com/licecap/))
* [ ] Link to corresponding documentation pull request for [getlektor.com](https://github.com/lektor/lektor-website)

Actual relative URLs that omit unnecessary folder traversing.

Example:
`/articles/2019/07/brownies` -> link to ->
`/articles/2019/07/brownies/image-gallery`

Previous output:
`../../../../articles/2019/07/brownies/image-gallery/`
Ouput with this PR:
`image-gallery/`

**Note:**
Resources in the same directory are linked without `./` in front.
With the only exception if the link target is the same.
`/blog/`
-> link to `/blog/` will result in `./`
-> link to `/blog/a.jpg` will result in `a.jpg`

Tiny URLs for all :)
Can we have relative URLs that do not always go to the lowest folder and then back up again?

For example if I browse the following page:
`/articles/2019/07/brownies`
which has a subpage I would like to link to:
`/articles/2019/07/brownies/image-gallery`

The resulting relative url will be:
`../../../../articles/2019/07/brownies/image-gallery/`
instead of just:
`image-gallery/`

Also linking to any other resource may be shorter (e.g., same folder):
`../chocolate-cake/`
Hi, how can I specify files that always have to be rebuild?

I generate a `manifest.appcache` very similar to the [Sitemap Guide](https://www.getlektor.com/docs/guides/sitemap/).
However, in order for the cache to properly update, I need to regenerate the file (so that `now()` is evaluated again).

Currently this will be triggered once I change that file, or anything that changes the site structure. But not if I change my `style.css` for example.

```
CACHE MANIFEST
# Date build: {{ now('%Y-%m-%d %H:%M:%S') }}
{% set xx = [] -%}

{%- for asset in site.get('/').pad.asset_root.children if asset != this recursive -%}
{%- if asset.__class__.__name__ != 'Directory' -%}
{{- xx.append(asset) or pass -}}
{%- endif -%}
{{- loop(asset.children) -}}
{%- endfor -%}

{{- xx.append(site.get('/')) or pass -}}

{%- for page in site.query('/', this.alt) if page != this recursive -%}
{{- xx.append(page) or pass -}}
{%- set img = page.attachments.images|sort(attribute='record_label')|first -%}
{%- if img -%}
{{- xx.append(img.thumbnail(200, 150, 'crop')) or pass -}}
{%- endif -%}
{{- loop(page.children) -}}
{%- endfor -%}

{%- for item in xx %}
{{ item|url|replace('../', '', 1) }}
{%- endfor %}

NETWORK:
*
```
Hi there, given the following model:
```
[fields.name]
label = Name
type = string

[fields.date]
label = Added
type = date

[fields.time]
label = Duration
type = integer
addon_label = min
```

And using alternates `de` and `en`, I'd like to keep the following file structure:

**contents.lr:**
```
date: 2019-11-22
time: 42
```
**contents+de.lr:**
```
name: Die Antwort
```
**contents+de.lr:**
```
name: The answer
```

In short, I'd like to have fields that should be translatable and others that are not. E.g., properties that are valid regardless of alternates. However, every time I edit the English or German alternate in the editor, all field will be stored into that file.

Not only does this create duplicate entries of the same data, but editing those fields later on is a pain too. E.g, once I change something in the overlay or alternate I will not be able to change back to the Primary content. Even if I delete that field it is not deleted but rather set to an empty string instead. (This is an additional bug or feature request; to be able to reset field to a non-set value instead of an empty value!)

This can only be fixed via manual content file editing which defies the purpose of the CMS editor :/
I have a page composed of flow blocks and one of these blocks is an "image" block where the user can pick one of the attached image files. The model looks like this:
```ini
[block]
name = Image
button_label = IMG

[fields.image]
label = Image
type = select
source = record.attachments.images.order_by('name')
width = 1/2
```
This works, but for the user it is a bit uncomfortable since the list shows only the file names (often timestamps, sequential numbers etc.). Is there some way I could modify the admin interface to also show a preview of the image next to the file name? (Maybe injecting a small JavaScript like https://codepen.io/ndmtg/pen/rdwQza into the admin interface HTML?)
### Issue(s) Resolved

Fixes #705 

### Related Issues / Links

### Description of Changes

* [x] added `--delete` argline option
* [x] added `--exclude` argline options
* [x] added tests for `--delete`
* [x] added tests for `--exclude`
The build/publish step as performed from the GUI dialog can be a long running task. For my site, this can take 30+ minutes if a full rebuild is required.

This obviously shouldn't be a sync API call, as forcing the user to have a browser page open for 30 minutes while a HTTP request completes is insane. Even for smaller sites, it makes much more sense to have this as an async call to, say `/buildpublish-start/` which starts a background task, and then another `/buildpublish-status/` which reports the status of the build/publish.

I also think (as shown in the example above) that there should be a single API endpoint for this, rather than the two as it is at the moment. This would allow someone to click publish, and then shutdown their machine and go and have coffee, whilst the background task builds the site and publishes it.

I'm not overly sure what the best way of achieving this is. I've created a simple version of it working [in my fork of lektor](https://github.com/mathshistory/mathshistory-lektor/commit/69f5b5234be80dc81054fab2e1c47d570d534f3e) if you want to have a look at that, but I'd be interested in comments on what we thing the best way of doing this is. With the current admin API being a single event bus and not supporting multiple sessions, we don't need anything fancy like redis/celery (I think?). In my early version it doesn't report the current status too which is a shame - I couldn't figure out how to do that with `click`.

Thoughts? @nixjdm @runfalk 