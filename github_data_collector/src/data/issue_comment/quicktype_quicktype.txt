Use this TypeScript as input and convert to Python 3.7 (with dataclasses):

```ts
export interface Config {
    fooBar: number;
}
```

Result:

```python
# ...

@dataclass
class Config:
    fooBar: float

    # ...

    def to_dict(self) -> dict:
        result: dict = {}
        result["fooBar"] = to_float(self.fooBar)
        return result

# ...
```

When I try to create a `Config` instance in Python and serialize it, however, I get an error:

```
In[2]: Config(fooBar=10).to_dict()
---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
<ipython-input-2-a3f5b1bbb6e2> in <module>
----> 1 Config(fooBar=10).to_dict()

<ipython-input-1-2171edd126f5> in to_dict(self)
     41     def to_dict(self) -> dict:
     42         result: dict = {}
---> 43         result["fooBar"] = to_float(self.fooBar)
     44         return result
     45

<ipython-input-1-2171edd126f5> in to_float(x)
     20
     21 def to_float(x: Any) -> float:
---> 22     assert isinstance(x, float)
     23     return x
     24

AssertionError:
```

(full example [here][1])

The issue is that the `Config` dataclass requires that its property be a `float`. But there's no reason an `int` shouldn't be allowed, too. `number` in TypeScript covers both.

[1]: https://app.quicktype.io?share=FM0CsCDEfE240UWcQoGg

![image](https://user-images.githubusercontent.com/2631639/72004145-a7cef080-31ff-11ea-8686-6ea74440bd03.png)


You can see more here in the screencast: https://d.pr/v/JF4fYw

Appstore shows that i have 8.2.22 installed but the app itself is showing the incorrect version string (6.0.52)

<img width="1439" alt="Screen Shot 2020-01-06 at 4 05 27 PM" src="https://user-images.githubusercontent.com/6367998/71848825-899daf00-309e-11ea-83e0-0744563466f9.png">
<img width="1180" alt="Screen Shot 2020-01-06 at 4 05 07 PM" src="https://user-images.githubusercontent.com/6367998/71848826-899daf00-309e-11ea-9fb7-20faa3211e31.png">

I thought that #266 fixed what I am after, but maybe not. Basically, say that I have the following JSON code:

```json
{
  "object": "user",
  "url": "https://api.wanikani.com/v2/user",
  "data_updated_at": "2018-04-06T14:26:53.022245Z",
  "data": {
    "id": "5a6a5234-a392-4a87-8f3f-33342afe8a42",
    "username": "example_user",
    "level": 5,
    "max_level_granted_by_subscription": 60,
    "profile_url": "https://www.wanikani.com/users/example_user",
    "started_at": "2012-05-11T00:52:18.958466Z",
    "subscribed": true,
    "current_vacation_started_at": null,
    "subscription": {
      "active": true,
      "type": "recurring",
      "max_level_granted": 60,
      "period_ends_at": "2018-12-11T13:32:19.485748Z"
    },
    "preferences": {
      "default_voice_actor_id": 1,
      "lessons_autoplay_audio": false,
      "lessons_batch_size": 10,
      "lessons_presentation_order": "ascending_level_then_subject",
      "reviews_autoplay_audio": false,
      "reviews_display_srs_indicator": true
    }
  }
}
```

then, for Dart and with a name of `WaniKaniUser`, I will end up with the `WaniKaniUser`, `Data`, `Preferences` and `Subscription` classes while I would find it much better if I was to end up with the `WaniKaniUser`, `WaniKaniUserData`, `WaniKaniUserDataPreferences` and `WaniKaniUserDataSubscription` classes instead.
When using Kotlin with no framework, capitalizing acronyms could cause parsing issues.
Fixes #1369
https://launchpad.net/~jonathonf/+archive/ubuntu/python-3.6

We need to find another way to install Python 3.6 on Ubuntu Xenial.
Using the input example

`{
  "annotations": [
    {
      "segmentation": [
        [
          757.8740234375,
          1534.2109375,
          3512.189697265625,
          1534.2109375,
          3512.189697265625,
          2904.7373046875,
          757.8740234375,
          2904.7373046875
        ]
      ],
      "area": 3775734.0,
      "bbox": [
        758.0,
        1534.0,
        2754.0,
        1371.0
      ]
    }
  ]
}`

Generated python code is 
```
@dataclass
class Annotation:
    segmentation: List[List[float]]
    area: int
    bbox: List[int]

    @staticmethod
    def from_dict(obj: Any) -> 'Annotation':
        assert isinstance(obj, dict)
        segmentation = from_list(lambda x: from_list(from_float, x), obj.get("segmentation"))
        area = from_int(obj.get("area"))
        bbox = from_list(from_int, obj.get("bbox"))
        return Annotation(segmentation, area, bbox)

    def to_dict(self) -> dict:
        result: dict = {}
        result["segmentation"] = from_list(lambda x: from_list(to_float, x), self.segmentation)
        result["area"] = from_int(self.area)
        result["bbox"] = from_list(from_int, self.bbox)
        return result
```

It interprets 'bbox' and 'area' as int but I get an error when using the above code.
updating the json to _"area": 3775734.1_
Forces the python code to update to area = from_float(obj.get("area"))
This now works.

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.11 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.11...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.11&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/quicktype/quicktype/network/alerts).

</details>
Hello

When I generate Kotlin code for many JSON schema files that refer to some common enum, code cannot be used because of the redeclaration issue.
I think that there should be an option like in swift language **--multi-file-output**  to avoid this issue.
Without it, quicktype code generator is useless for cases when you have multiple files with a common enum, because you must clear all the files by hand