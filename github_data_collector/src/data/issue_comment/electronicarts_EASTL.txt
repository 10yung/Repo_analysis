Add push_back move (rvalue) flavour in order to code like
eastl::move(container.begin(), container.end(), eastl::back_inserter(container))
to work as intended (which is to use move-version of push_back obviously)
deque seems to explicitly require a copyable type even if it's movable. Other STL implementations aren't this strict, instead using move construction/assignment for basic operations like emplace_back and pop_front.

Offending line:
https://github.com/electronicarts/EASTL/blob/master/include/EASTL/deque.h#L2493
Why does `eastl::rbtree` have to provide these:

```
template <typename U, typename Compare2> iterator       find_as(const U& u, Compare2 compare2);
template <typename U, typename Compare2> const_iterator find_as(const U& u, Compare2 compare2) const;
```

instead of using the std way of achieving this by supplying an explicit `std::less<>` instead of relying on the default `std::less<T>` as the compare class template argument, and using the following transparent [query methods](https://en.cppreference.com/w/cpp/container/map/find) instead:

```
template< class K > iterator find( const K& x );
template< class K > const_iterator find( const K& x ) const;
```

which do not require an (explicit) compare object to be passed. That way one can just pass `std::string_view` for instance to a `std::map` with `std::string` keys without having to construct an actual `std::string` for the lookup.

Maybe it is possible to even go one step further and just use  `std::less<>`  and  `eastl::less<>` as defaults?
Hi,

We have some issue using `eastl::fixed_vector`  that forbids heap allocations (i.e. has `bEnableOverflow = false`) when compiling code as simple as that:
```
eastl::fixed_vector<int, 32, false> v;
...
v.insert(v.begin(), 1);
```
This compiles fine when using MSVC (v141 toolset, both Windows PC and Xbox One), latest PS4 Clang and WSL Ubuntu's GCC 7.3.0) but fails missurably when I try to compile it on CentOS 7 using GCC 7.4:

```
../../EASTL/include/EASTL/internal/copy_help.h: In member function 'void eastl::vector<T, Allocator>::DoInsertValue(eastl::vector<T, Allocator>::const_iterator, Args&& ...) [with Args = {const int&}; T = int; Allocator = eastl::fixed_vector_allocator<4, 32, 4, 0, false, eastl::dummy_allocator>]':
../../EASTL/include/EASTL/internal/copy_help.h(116,22): error G67F0193A: argument 1 null where non-null expected [-Werror=nonnull]
       return (T*)memmove(result, first, (size_t)((uintptr_t)last - (uintptr_t)first)) + (last - first);
                  ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   In file included from /home/builduser/gnu/gcc/include/c++/7.4.0/cstring:42:0,
                    from ../../code/inc/Core/Core.h:63,
                    from ../../code/src/Game/Precompiled.h:9:
/usr/include/string.h:46:14: note: in a call to function 'void* memmove(void*, const void*, size_t)' declared here
    extern void *memmove (void *__dest, const void *__src, size_t __n)
                 ^~~~~~~
```

Note that GCC (with -O1) issues `-Wnonnull` warning (which we treat as error) . I believe it somehow manages to reveal that `eastl::fixed_vector_allocator` returns nullptr when fixed storage is exhausted even though we want to ignore that kind of checks as we disabled overflow on purpose.

The problem is somewhat subtle and is very hard to reproduce. After all, we observe that only when using CentOS + manually installed compiler toolchain (if I remember correctly, CentOS 7 comes with GCC 4.8 by default which is pretty old by any means). My collegue kind of managed to reproduce this behaviour in Compiler Explorer:  https://godbolt.org/z/LF-WLc
Here `v.DoAllocate(1)` is passed as an arguement to `memmove()` through the call to an intermediate function. Changing anything in the example will likely hide the problem, but there it is.

I'm not sure what to do with the error. For now I plan to disable `-Wnonnull`, but may be there's a better way?
I'm using eastl to build my own engine and I'm surprised that something as simple as splice it calling a copy operator.
This causing both performance problem and annoying architecture problem for me (especially when I want to use stuff like Atomic<>)

here is a test code to isolate the problem:
```
#include <list>
#include <EASTL/list.h>

class C {
public:
        C() = default;
        C(const C&) = delete;
        C(C&&) = delete;
};

#define useEA

#ifdef useEA
typedef eastl::list<C> list;
#else
typedef std::list<C> list;
#endif

int main() {
        list l0;
        l0.emplace_back();
        l0.emplace_back();

        list l1;
        l1.emplace_back();
        l1.emplace_back();

        l0.splice(l0.end(), l1, l1.begin());
}
```

if you comment the line `#define useEA` it will compile properly without any problem but if you keep it you will get something like:
```
include/EASTL/list.h:2003:34: error: call to deleted constructor of 'eastl::list<C, eastl::allocator>::value_type' (aka 'C')
                                ::new((void*)&pNode->mValue) value_type(eastl::forward<Args>(args)...);
/include/EASTL/list.h:1478:28: note: in instantiation of function template specialization 'eastl::list<C, eastl::allocator>::DoCreateNode<const C &>' requested here
                node_type* const pNode = DoCreateNode(value);
include/EASTL/list.h:1669:4: note: in instantiation of member function 'eastl::list<C, eastl::allocator>::insert' requested here
                        insert(position, *i);
```
(using clang++ with -std=c++14)
According to the original STL: https://en.cppreference.com/w/cpp/container/list/splice "No elements are copied or moved, only the internal pointers of the list nodes are re-pointed" which is definitely super useful when you want to move heavy object or having conditions where it's not a good idea to copy.