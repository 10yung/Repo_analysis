I started working on #66 but haven't been able to come up with a good solution yet.  Not much in this pull request, but figured I'd submit it anyway.
This package is very exciting, great work!  Our `dataspice` team was thrilled to see how nicely it already handles common requests on a `dataspice.json` file, e.g.: 

```r
library(roomba)
json <- jsonlite::read_json("https://raw.githubusercontent.com/ropenscilabs/dataspice/master/inst/metadata-tables/dataspice.json")

## Works nicely when all columns come from same level of nesting:
json %>% roomba(c("givenName", "familyName"))
json %>% roomba(c("value", "unitText", "description"))
```


But not clear how to get a repeated column from a different level of nesting:

```r
json %>% roomba(c("value", "unitText", "description", "box"))
```

Probably requires some kind of notation to indicate the different levels, e.g. in this case maybe something like

```r
json %>% roomba(c("variableMeasured.value", 
                                   "variableMeasured.unitText", 
                                   "variableMeasured.description", 
                                   "spatialCoverage.geo.box"))

```

would be possible?  

This package is very exciting, great work!  Our `dataspice` team was thrilled to see how nicely it already handles common requests on a `dataspice.json` file, e.g.: 

```r
library(roomba)
json <- jsonlite::read_json("https://raw.githubusercontent.com/ropenscilabs/dataspice/master/inst/metadata-tables/dataspice.json")

## Works nicely when all columns come from same level of nesting:
json %>% roomba(c("givenName", "familyName"))
json %>% roomba(c("value", "unitText", "description"))
```

It would be great if the `cols` argument could take a named list that could also rename the output columns on the fly: 

```r
json %>% roomba(c("value", units = "unitText", "description")),
```

Maybe this requires another argument like `keep_all_rows`. 

In the example below, I think we should allow the user some way to end up with 4 rows instead of 3. The third row corresponding to `baz` should be all `NA`s. 

It would be useful in cases I can imagine for the user to know that they got 4 distinct outputs back and that one of them was fully null.

```
library(magrittr)

some_json <- '
{
  "foo": [{
    "a": 1,
    "b": 2,
    "c": 3
  }],
  "bar":[{
    "a": 4,
    "b": null,
    "c": 6
  }],
  "baz": [],
  "bing":[{
    "c": 12
  }]
}
'

lst <- some_json %>% jsonlite::fromJSON()

lst %>% roomba::roomba(cols = c("a", "b", "c"), keep = any)
#>    a b c
#> 1  1 2 3
#> 2  4 NA 6
#> 3  NA NA 12
```

So what I think this should look like is:

```
#>    a  b  c
#> 1  1  2  3
#> 2  4  NA 6
#> 3  NA NA NA
#> 4  NA NA 12
```

Mostly useful when the user knows they're passing x number inputs to an API and expecting x outputs, even if some of those outputs are empty.

Right now the shiny app is hardwired to work with specific values returned from the twitter data. Should eventually be smart about figuring out what's a date item.



