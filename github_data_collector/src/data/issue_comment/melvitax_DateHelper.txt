For iso formats, the `Locale.current` don't works as expected, if the user set the device for a AM/PM based hour this will return a:

``4:00`` instead a ``16:00``, Apple assumes that's it's the correct behaviour for `NSDateFormat`, see [this](https://forums.developer.apple.com/thread/106031#322269)

I have implemented the Apple recommendation, using the `ISO8601DateFormatter` class and setting the locale to `en_US_POSIX` as fallback for previous system versions
Also rewrite toStringWithRelativeTime(strings:) to use toRelativeTime()

In reference to #94 
Currently [toStringWithRelativeTime](https://github.com/melvitax/DateHelper/blob/f3c896beb529e86eba46483121276c74390856de/Sources/DateHelper.swift#L123) uses `RelativeTimeStringType` to output Strings. However, there is no way to determine which `RelativeTimeStringType` a `Date` falls into without looking at the output string of `toStringWithRelativeTime`.

It would be nice to be able to get the `RelativeTimeStringType` of a `Date` directly with something like

```swift
Date().toRelativeTime() // .nowPast
```

or

```swift
Date().is(.nowPast) // true
```

This could allow for additional logic switching off of the `RelativeTimeStringType` of a `Date`, rather than just converting to a String.
Looking at dateHelper.siwft lines 367 - 370:

     
`case .startOfWeek:
            return calendar.date(from: calendar.dateComponents([.yearForWeekOfYear, .weekOfYear], from: self))!`
        
`case .endOfWeek:
            let offset = 7 - component(.weekday)!`

note: "case .endOfWeek:"  does not include the value of calendar

Consider replacing line 370 with:

`return calendar.date(from: calendar.dateComponents([.yearForWeekOfYear, .weekOfYear], from: self))!.adjust(.day, offset: 6)`
right now, we can get a date object for the following options:

```
public enum DateForType {
    case startOfDay, endOfDay, startOfWeek, endOfWeek, startOfMonth, endOfMonth, tomorrow, yesterday, nearestMinute(minute:Int), nearestHour(hour:Int)
}
```

Can we have additional options like:

`startOfYear` and `endOfYear`.

Usage example:

```
let date = Date()
let df = DateFormatter()
df.dateFormat = "yyyy-MM-dd"
let fromDate: String = df.string(from: date.dateFor(.startOfYear))
let toDate: String = df.string(from: date.dateFor(.endOfYear))
```
As the title, i can not update to new version by using Pod update. Can you check it?

Thanks
Can I get an example of using the custom tuple to create a date?

case custom(String): a custom date format string

Hi,
I have saved a date yesterday and it reads -- 2018-04-11 21:09:27 +0000

Though today I printed todays date which should be  2018-04-12 21:09:27 +0000
reads â†’ 2018-04-11 21:59:18 +0000

This is fixed when I print it to a string but it is not correct when working with the raw" Date".
I'm trying to compare the date I saved yesterday to today and it returns it is the same day.

Thanks in advance for your help.
    let d = Date(fromString:  "1500-01-01", format: .isoDate, timeZone: .utc)
    d.toString(format: .isoDateTimeSec)

Output: `1499-12-31T16:07:02-075258`

This is not a valid ISO date.

This gives me a valid ISO date

    let d = Date(fromString:  "1500-01-01", format: .isoDate, timeZone: .utc)
    let f2 = ISO8601DateFormatter()
    f2.string(from: d)

Output: `1500-01-01T00:00:00Z`
Even w/ `format: .custom` it returns nil.

![afdate_error](https://user-images.githubusercontent.com/3869458/27763684-5ed058d2-5e5e-11e7-8bfa-916bfb1132b6.png)

