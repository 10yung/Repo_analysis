Updates [org.typelevel:discipline-scalatest](https://github.com/typelevel/discipline-scalatest) [from 1.0.0-RC2 to 1.0.0-RC4](https://github.com/typelevel/discipline-scalatest/compare/v1.0.0-RC2...v1.0.0-RC4).
[Release Notes/Changelog](https://github.com/typelevel/discipline-scalatest/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.typelevel", artifactId = "discipline-scalatest" } ]
```
</details>

labels: test-library-update, semver-pre-release
Updates [org.typelevel:discipline-scalatest](https://github.com/typelevel/discipline-scalatest) [from 1.0.0-RC2 to 1.0.0-RC3](https://github.com/typelevel/discipline-scalatest/compare/v1.0.0-RC2...v1.0.0-RC3).
[Release Notes/Changelog](https://github.com/typelevel/discipline-scalatest/blob/master/CHANGELOG.md)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.typelevel", artifactId = "discipline-scalatest" } ]
```
</details>

labels: test-library-update, semver-pre-release
closes #62
Added instances for:

- **ContravariantK**: Foldable, UnorderedFoldable
- **InvariantK**: Monad, Traverse, FlatMap, Applicative, UnorderedTraverse, UnorderedFoldable, ContravariantMonoidal, Apply, Alternative, ContravariantSemigroupal, MonoidK, InvariantMonoidal, Distributive, SemigroupK, InvariantSemigroupal, Functor, Contravariant, Semigroupal, Invariant
- **FunctorK**: FunctionK[A, *[_]]
- **SemigroupalK**: Monad, Traverse, FlatMap, Applicative, UnorderedTraverse, UnorderedFoldable, ContravariantMonoidal, Apply, Alternative, MonoidK, InvariantMonoidal, Distributive, InvariantSemigroupal, SemigroupK, Functor, Contravariant, Semigroupal, Invariant
The readme mentions to only use the compiler plugin on 2.12 - how should build.sbt be set up for a project that's cross-building 2.13 and 2.13?

Intellij needs a special plugin to expand macro annotations.
See https://blog.jetbrains.com/scala/2015/10/14/intellij-api-to-build-scala-macros-support/

I couldn't find enough info about this so we might want to check how simulacrum has implemented it.
Currently only `autoFunctorK` and `autoInvariantK` define fully refined instances in a special `fullyRefined` object inside the companion object of algebras.

We have at least three options:

1. Generate only fully refined instances:
    - :+1: No awkward imports, everything is in the companion object.
    - :-1: It's not clear if that would work in all cases (needs investigation).

2. Add a `fullyRefined` flag to macro annotations:
    - :+1: Easy to opt-in / opt-out for users.
    - :+1: Easy to distinguish which annotations support fully refined instances.
    - :-1: More complexity on both implementation and usage sides.

3. Automatically decide whether to generate fully refined instances based on the presence of type members:
    - :+1: Less overhead for algebras without type members.
    - :+1: Fully automatic, no need for special flags.
    - :-1: No way to opt-out for users.
    - :-1: Removing all type members later might cause imports to stop compiling.
The microsite with tut snippets is great, but those are not fully-fledged examples.
Example:
```scala
case class ServerDependencies[F[_]](
  foo: FooService[F],
  bar: BarService[F],
  other: NotTaglessThing
)
```
I'd expect it to generate something like:
```scala
def mapK[G[_]](f: F ~> G): ServerDependencies[G] =
  ServerDependencies(foo.mapK(f), bar.mapK(f), other)
```