1. appendRow
I want to do appendRow continuously.
However, the rowKey value was not added after the appendRow run.
The following code does not appendRow to the desired location.
```js
focusChange ({rowKey}) {
  this.$refs.grid.invoke("appendRow", {}, { at: rowKey + 1 });
}
```

2. click
I want to give an event only when I click the plus icon in the picture below.
Currently, it is a grid focusChange event, but there is no response when you click the icon and it runs when click the cell.
The code below is the plus icon code.
  ```js
  {
    header: "Add / Delete",
    name: "col0",
    width: 100,
    formatter:() =>
     '<button
       type="button"
       class="btn btn-sm text-primary ml-1"
     >
       <i class="fas fa-plus fa-smm"
     </button>',
    align: "center"
},
```
**Version**
"@toast-ui/vue-grid": "^4.8.1"


<img width="1385" alt="·Ñâ·Ö≥·Ñè·Ö≥·ÑÖ·Öµ·Ü´·Ñâ·Ö£·Ü∫ 2020-01-17 ·Ñã·Ö©·Ñí·ÖÆ 5 24 53" src="https://user-images.githubusercontent.com/50858429/72596762-c3e53700-394f-11ea-815c-cfd0dbee2ea9.png">

**Describe the bug**
The child column of complex header couldn't be hidden

**To Reproduce**
```js
const columns = [{ name: 'id' }, { name: 'name' }, { name: 'score' }, { name: 'grade' }];
const grid = new Grid({
  data,
  columns,
  header: {
    height: 100,
    complexColumns: [
      {
         header: 'name',
         name: 'nameHeader',
         childNames: ['id', 'name'],
         hideChildHeaders: true
       },
       {
         header: 'scoreInfo',
         name: 'complexColumn',
         childNames: ['score', 'grade']
       }
    ]
  }
});

// cannot hide the `grade` column
grid.hideColumn('grade');
```

**Expected behavior**
The child column of complex header could be hidden through calling `hideColumn` API

**Desktop (please complete the following information):**
 - grid version: `v4.8.1`


<!-- EDIT TITLE PLEASE -->
<!-- It should be one of them
  <ISSUE TYPE>: Short Description (<CLOSING TYPE> #<ISSUE NUMBERS>)
  ex)
  feat: add new feature (close #111)
  fix: wrong behavior (fix #111)
  chore: change build tool (ref #111)
-->

<!-- SPECIFY A ISSUE TYPE AT HEAD
  feat: A new feature
  fix: A bug fix
  docs: Documentation only changes
  style: Changes that do not affect the meaning of the code (white-space, formatting etc)
  refactor: A code change that neither fixes a bug or adds a feature
  perf: A code change that improves performance
  test: Adding missing tests
  chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
-->

<!-- ADD CLOSING TYPE AND ISSUE NUMBER AT TAIL
  (<CLOSING TYPE> #<ISSUE NUMBERS>)
  close: resolve not a bug(feature, docs, etc) completely
  fix: resolve a bug completely
  ref: not fully resolved or related to
-->

### Please check if the PR fulfills these requirements
- [x] It's submitted to right branch according to our branching model
- [x] It's right issue type on title
- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where "xxx" is the issue number)
- [x] The commit message follows our guidelines
- [x] Tests for the changes have been added (for bug fixes/features)
- [ ] Docs have been added/updated (for bug fixes/features)
- [ ] It does not introduce a breaking change or has description for the breaking change

### Description
* related issue(#868)
* added missing type definition to `index.d.ts`
* removed `I` prefix in `index.d.ts`


---
Thank you for your contribution to TOAST UI product. üéâ üòò ‚ú®

<!--
Thank you for your contribution.

When it comes to write an issue, please, use the template below.
To use the template is mandatory for submit new issue and we won't reply the issue that without the template.

And you can write template's contents in Korean also.
-->

<!-- TEMPLATE -->

## Version
<!-- Write the version of the grid you are currently using. -->
* `v4.8.1`

## Current Behavior
<!-- Write a description of the current operation. You can add sample code, 'CodePen' or 'jsfiddle' links. -->
* Using the `dataSource`, the common parameters may be needed on communicating with the server. In that case, user cannot register the common parameters to grid to request through `dataSource`.

## Expected Behavior
<!-- Write a description of the future action. -->
* The `setRequestParams` API make the common parameters for every request using `dataSource`. Only object type is allowed as the `setRequestParams` parameter.

  ### Code
  ```js
  grid.setRequestParams({ common: 'common' });
  ```
<!-- EDIT TITLE PLEASE -->
<!-- It should be one of them
  <ISSUE TYPE>: Short Description (<CLOSING TYPE> #<ISSUE NUMBERS>)
  ex)
  feat: add new feature (close #111)
  fix: wrong behavior (fix #111)
  chore: change build tool (ref #111)
-->

<!-- SPECIFY A ISSUE TYPE AT HEAD
  feat: A new feature
  fix: A bug fix
  docs: Documentation only changes
  style: Changes that do not affect the meaning of the code (white-space, formatting etc)
  refactor: A code change that neither fixes a bug or adds a feature
  perf: A code change that improves performance
  test: Adding missing tests
  chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
-->

<!-- ADD CLOSING TYPE AND ISSUE NUMBER AT TAIL
  (<CLOSING TYPE> #<ISSUE NUMBERS>)
  close: resolve not a bug(feature, docs, etc) completely
  fix: resolve a bug completely
  ref: not fully resolved or related to
-->

### Please check if the PR fulfills these requirements
- [x] It's submitted to right branch according to our branching model
- [x] It's right issue type on title
- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where "xxx" is the issue number)
- [x] The commit message follows our guidelines
- [x] Tests for the changes have been added (for bug fixes/features)
- [ ] Docs have been added/updated (for bug fixes/features)
- [ ] It does not introduce a breaking change or has description for the breaking change

### Description
* related issue(#866)


---
Thank you for your contribution to TOAST UI product. üéâ üòò ‚ú®

<!--
Thank you for your contribution.

When it comes to write an issue, please, use the template below.
To use the template is mandatory for submit new issue and we won't reply the issue that without the template.

And you can write template's contents in Korean also.
-->

<!-- TEMPLATE -->

## Version
<!-- Write the version of the grid you are currently using. -->
* `v4.8.1`

## Current Behavior
<!-- Write a description of the current operation. You can add sample code, 'CodePen' or 'jsfiddle' links. -->
* There is not custom event as all data of grid is updated. For example, communicating with server using `dataSource` or calling `resetData`, `restore`.

## Expected Behavior
<!-- Write a description of the future action. -->
* The `onGridUpdated` custom event needs to be added. This event will be fired after updating the grid and also user can **access the DOM** through this event. The **grid instance** is passed as the parameters on the event.

`onGridUpdated` event occurs only in the following API as below.
* `resetData`
* `restore`
* `reloadData`
* `readData`
* `setPerPage` with `dataSource`
* using `dataSource`

  ### Code
  ```js
  const gridOptions = {
    data,
    columns,
    // write your callback
    onGridUpdated: (ev) => {}
  }
  const grid = new Grid(gridOptions);
  ```
<!-- EDIT TITLE PLEASE -->
<!-- It should be one of them
  <ISSUE TYPE>: Short Description (<CLOSING TYPE> #<ISSUE NUMBERS>)
  ex)
  feat: add new feature (close #111)
  fix: wrong behavior (fix #111)
  chore: change build tool (ref #111)
-->

<!-- SPECIFY A ISSUE TYPE AT HEAD
  feat: A new feature
  fix: A bug fix
  docs: Documentation only changes
  style: Changes that do not affect the meaning of the code (white-space, formatting etc)
  refactor: A code change that neither fixes a bug or adds a feature
  perf: A code change that improves performance
  test: Adding missing tests
  chore: Changes to the build process or auxiliary tools and libraries such as documentation generation
-->

<!-- ADD CLOSING TYPE AND ISSUE NUMBER AT TAIL
  (<CLOSING TYPE> #<ISSUE NUMBERS>)
  close: resolve not a bug(feature, docs, etc) completely
  fix: resolve a bug completely
  ref: not fully resolved or related to
-->

### Please check if the PR fulfills these requirements
- [x] It's submitted to right branch according to our branching model
- [x] It's right issue type on title
- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. `fix #xxx[,#xxx]`, where "xxx" is the issue number)
- [x] The commit message follows our guidelines
- [x] Tests for the changes have been added (for bug fixes/features)
- [ ] Docs have been added/updated (for bug fixes/features)
- [ ] It does not introduce a breaking change or has description for the breaking change

### Description
* related issue(#864)


---
Thank you for your contribution to TOAST UI product. üéâ üòò ‚ú®

**Describe the bug**
* version: 4.8.1
* The sort comparator is ambiguous when the type of data is mixed by `string`, `number`

**To Reproduce**
Steps to reproduce the behavior:
1. sort the data with mixed type data

**Expected behavior**
* should sort the data clearly

**Screenshots**
![·Ñâ·Ö≥·Ñè·Ö≥·ÑÖ·Öµ·Ü´·Ñâ·Ö£·Ü∫ 2020-01-15 ·Ñã·Ö©·Ñí·ÖÆ 4 39 21](https://user-images.githubusercontent.com/37766175/72414518-c6138e00-37b5-11ea-9838-f101a2d1dbfb.png)



"@toast-ui/vue-grid": "^4.8.1" version in use.

After the screen rendering,

Aside when folded, the grid is cut as shown below.

If you force the browser window size to change, the grid width value is automatically set.

Is there a solution?

![·Ñâ·Ö≥·Ñè·Ö≥·ÑÖ·Öµ·Ü´·Ñâ·Ö£·Ü∫ 2020-01-13 ·Ñã·Ö©·Ñí·ÖÆ 4 51 44](https://user-images.githubusercontent.com/50858429/72239640-fc6dd380-3624-11ea-9c7c-bde3bce2c7fc.png)
![·Ñâ·Ö≥·Ñè·Ö≥·ÑÖ·Öµ·Ü´·Ñâ·Ö£·Ü∫ 2020-01-13 ·Ñã·Ö©·Ñí·ÖÆ 4 52 00](https://user-images.githubusercontent.com/50858429/72239651-05f73b80-3625-11ea-829c-fd6946d1d3dd.png)


<!--
  To make it easier for us to help you, please include as much useful information as possible.

  Useful Links:
  - tutorial: https://github.com/nhn/tui.grid/tree/master/docs
  - API/Example: https://nhn.github.io/tui.grid/latest

  Before opening a new issue, please search existing issues https://github.com/nhn/tui.grid/issues
-->

**Summary**
I have tried toast-ui.react-grid examples on React. But i have following isses.
Please let me know how to solve it.

1. How to use external Grid handler in custom render (ref : https://nhn.github.io/tui.grid/latest/tutorial-example11-row-headers)

From ref, i have tried event handler from CustomRenderer to Grid. But i get that EventHandler is undefined.

```javascript
  
  const ToastGrid = React.createRef();
  class Test extends React.component {
      /* 1. Add EventHandler */
       componentDidMount() {
        ToastGrid.current.getInstance().on("click", ev => {
            console.log("Grid Event:", ev);
        });
    }
    render() {
      class CustomRenerer {
          this.el.addEventListener("click", () => {
                /* 2. i checked click handler,  but always print : click is undefined */
                console.log("Custom AddEventLister", "clicked", ToastGrid.current.getInstance().click);    
           });
      }
   }
```


2.  how to add checkbox in column on React.

i tried to add checkbox in random column from tast-ui examples but i cannot get checkbox displayed.  
The following is my buggy code for reproducing it.

```javascript
const headCells = [
    { header: "Î≤àÌò∏", name: "id", align: "center", editor: "text" },
    { header: "Ïù¥Î¶Ñ", name: "name", align: "center", editor: "text", width: "200" },
    {
        header: "Genre",
        name: "genreCode",
        onBeforeChange: function(ev) {
            console.log("Before change:" + ev);
        },
        onAfterChange: function(ev) {
            console.log("After change" + ev); // call api
        },
        editOptions: {
            type: "checkbox",
            useViewMode: false    <---- false/true Î™®Îëê ÏïäÎê®.
        }
    },
    { header: "ÎßàÏßÄÎßâ", name: "display", editor: "text" },
];

  render() {
        <Grid
            ref={ToastGrid}
            data={rows}
            columns={headCells}
            rowHeight={25}
            virtualScrolling={true}
            heightResizable={true}
            scrollX={false}
            scrollY={false}
            pageOptions={{
               useClient: true,
                perPage: rowsPerPage
            }}
         />
  }
```


**Screenshots**
If applicable, add screenshots to help explain your question.

**Version**
Write the version of the grid you are currently using.
 - tru-grid : 4.8.1
 - @toast-ui/react-grid: 4.8.1

**Additional context**
Add any other context about the problem here.
