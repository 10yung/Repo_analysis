也有可能是我不会用GORM导致代码报错，希望作者能帮助我解决这个困惑，谢谢！
例如：
db.Table("table1 as t1")
db.Where(mapWhere)
db.Select("t1.*,t2.*").Joins("left join table2 t2 on t1.id=t2.id").Rows()

生成的 SQL 语句会报错，因为 scope.og 的 573 行代码直接使用 tableName 组装 map 的 key 条件
> sqls = append(sqls, fmt.Sprintf("(%v.%v %s %v)", quotedTableName, scope.Quote(key), equalSQL, scope.AddToVars(value)))

这行代码是否可做一个判断，如果 map 的 key 里包含 （表别名|表名.字段名）就使用另一种组装条件的方式，比如
> sqls = append(sqls, fmt.Sprintf("(%v %s %v)", scope.Quote(key), equalSQL, scope.AddToVars(value)))

The reason to update this package was goroutine leak in v1.4.1, which occurred when used idle MySQL connections.
I am instrumenting the code with opentracing. The library I used is [smacker
/opentracing-gorm](https://github.com/smacker/opentracing-gorm), which take the advantages of gorm callbacks to add the trace points.

Nevertheless, the `Exec` queries are not reported to the tracing backend. After some lookup, it seems that gorm does not implement the callbacks of `Exec`. Therefore smacker/opentracing-gorm is unable to add trace point to it. It would be great if it supports callbacks on all the queries.

Your issue may already be reported! Please search on the [issue track](https://github.com/jinzhu/gorm/issues) before creating one.

### What version of Go are you using (`go version`)?


### Which database and its version are you using?


### Please provide a complete runnable program to reproduce your issue. **IMPORTANT**

Need to runnable with [GORM's docker compose config](https://github.com/jinzhu/gorm/blob/master/docker-compose.yml) or please provides your config.

```go
package main

import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mssql"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
)

var db *gorm.DB

func init() {
	var err error
	db, err = gorm.Open("sqlite3", "test.db")
	// db, err = gorm.Open("postgres", "user=gorm password=gorm DB.name=gorm port=9920 sslmode=disable")
	// db, err = gorm.Open("mysql", "gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&parseTime=True")
	// db, err = gorm.Open("mssql", "sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm")
	if err != nil {
		panic(err)
	}
	db.LogMode(true)
}

func main() {
	if /* failure condition */ {
		fmt.Println("failed")
	} else {
		fmt.Println("success")
	}
}
```

The gorm update from v1.9.11 to v1.9.12 has led to all callback registrations getting logged like: 


```
[info] registering callback `dd-trace-go:before_create` from /Users/nilswerner/Code/Golang/service/app/services/persistence/postgres/utilities.go:32
```

I can't turn it off using `db.LogMode(false)` and I feel like it should be off by default.

I'm on: `github.com/jinzhu/gorm v1.9.12`
Your issue may already be reported! Please search on the [issue track](https://github.com/jinzhu/gorm/issues) before creating one.

### What version of Go are you using (`go version`)?


### Which database and its version are you using?


### Please provide a complete runnable program to reproduce your issue. **IMPORTANT**

Need to runnable with [GORM's docker compose config](https://github.com/jinzhu/gorm/blob/master/docker-compose.yml) or please provides your config.

```go
package main

import (
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/mssql"
	_ "github.com/jinzhu/gorm/dialects/mysql"
	_ "github.com/jinzhu/gorm/dialects/postgres"
	_ "github.com/jinzhu/gorm/dialects/sqlite"
)

var db *gorm.DB

func init() {
	var err error
	db, err = gorm.Open("sqlite3", "test.db")
	// db, err = gorm.Open("postgres", "user=gorm password=gorm DB.name=gorm port=9920 sslmode=disable")
	// db, err = gorm.Open("mysql", "gorm:gorm@tcp(localhost:9910)/gorm?charset=utf8&parseTime=True")
	// db, err = gorm.Open("mssql", "sqlserver://gorm:LoremIpsum86@localhost:9930?database=gorm")
	if err != nil {
		panic(err)
	}
	db.LogMode(true)
}

func main() {
	if /* failure condition */ {
		fmt.Println("failed")
	} else {
		fmt.Println("success")
	}
}
```

How to get data with "FROM ONLY _tablename" from a postgreSQL INHERITS table
When I use ```db.Exec("SELECT * FROM sometable")```,  ```Error 1103: Incorrect table name ' ' ``` return 

### go version
go version go1.13.6 linux/amd64

### mysql version
mysql 8.0 

### gorm version
v1.9.11

### code

```
package main

import (
    "fmt"
    _ "github.com/go-sql-driver/mysql"
    "github.com/jinzhu/gorm"
)

type RealTimeQPS struct {
    Id int `grom:"primary_key" json:"id"`
    DomainName string `json:"domain_name"`
    DomainPathId string `json:"domain_path_id"`
    DomainPath string `json:"domain_path"`
}

func main() {

    var err error

    db, err := gorm.Open("mysql", "test:test@tcp(127.0.0.1:3306)/test?charset=utf8mb4&parseTime=True&loc=Local")
    if err != nil {
        fmt.Printf("Open Error: %s\n", err)
        return
    }
    defer db.Close()

    err = db.Debug().Error
    if err != nil {
        fmt.Println(err)
    }


    err = db.DB().Ping()
    if err != nil {
        fmt.Printf("Ping Error: %s\n", err.Error())
        return
    }

    var r []RealTimeQPS

    errs := db.Exec("SELECT * FROM real_time_qps").Scan(&r).GetErrors()
    if len(errs) != 0 {
        for _, e := range errs {
            fmt.Println(e.Error())
        }
    }
    return
}

```

I use gorm in a web application and I divide the pacage according to the module. I want to define the struct and the handler function in a same package but it is an import cycle occurs. How can I use the many to many relation in this case?

For example, there are use and language in different package.

**user.go**
```go
type User struct {
    gorm.Model
    Languages         []language.Language `gorm:"many2many:user_languages;"`
}
```
**language.go**
```go
type Language struct {
    gorm.Model
    Name string
    Users             []user.User `gorm:"many2many:user_languages;"`
}
```

请问如何在我的Model结构体中添加自定义的默认字段值（这个字段在表中不存在的），我的默认值是int类型的，默认值一直都是0,我想设置成其他的值，请问如何设置呢？