a page can have multiple links to multiple feeds but it is only possible to get hold of the first link found via `#feed`.

while keeping the old behavior, this adds two new methods:

- `#feeds_with_title` which gives you a collection of arrays of the form `[ href, title ]`
- `#feeds` which gives you an array of all hrefs, e.g., `[ href ]`

Getting following error in Production environment alone. Tried to reproduce the same in development environment but no luck.

**Error:**
undefined method `headers' for nil:NilClass

**Code:**
```
MetaInspector.new("<some_url>", :connection_timeout => 5, :read_timeout => 5)
```

**Error Trace:**

bundler/gems/metainspector-dd8336538164/lib/meta_inspector/request.rb:50:in `content_type': undefined method `headers' for nil:NilClass (NoMethodError)

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/document.rb:107:in `document'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/document.rb:83:in `to_s'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/parser.rb:33:in `parsed'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/parser.rb:20:in `initialize'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/document.rb:41:in `new'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector/document.rb:41:in `initialize'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector.rb:22:in `new'

from bundler/gems/metainspector-dd8336538164/lib/meta_inspector.rb:22:in `new'

I know that this is a know issue and that it has been handled in the past, but it was my understanding after looking at the previous issues (#190, #187, #220) that I should expect a `MetaInspector::RequestError` when there's a problem decoding a site, but I have one url that is actually throwing an ArgumentError, which is kind of unexpected and a bit broad to handle.

Here's a sample session showing the issue:

```shell
root@b9d862866991:/app# cat Gemfile | grep metainspector
gem 'metainspector', '= 5.6.0'
root@b9d862866991:/app# bundle exec rails c
Loading development environment (Rails 5.1.6.2)
[1] pry(main)> MetaInspector.new('http://pharmaagentur.ch/')
(pry) output error: #<ArgumentError: invalid byte sequence in UTF-8>
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/parsers/texts.rb:60:in `gsub'
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/parsers/texts.rb:60:in `block in find_best_title'
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/parsers/texts.rb:60:in `map!'
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/parsers/texts.rb:60:in `find_best_title'
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/parsers/texts.rb:13:in `best_title'
/bundle/gems/metainspector-5.6.0/lib/meta_inspector/document.rb:64:in `to_hash'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/formatter.rb:118:in `convert_to_hash'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/formatter.rb:47:in `awesome_self'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/formatter.rb:28:in `format'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/inspector.rb:115:in `unnested'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/inspector.rb:74:in `awesome'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/core_ext/kernel.rb:10:in `ai'
/bundle/gems/awesome_print-1.8.0/lib/awesome_print/custom_defaults.rb:45:in `block in pry!'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:399:in `show_result'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:368:in `block in handle_line'
/bundle/gems/pry-0.12.2/lib/pry/pry_class.rb:401:in `critical_section'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:367:in `handle_line'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:274:in `block (2 levels) in eval'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:273:in `catch'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:273:in `block in eval'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:272:in `catch'
/bundle/gems/pry-0.12.2/lib/pry/pry_instance.rb:272:in `eval'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:77:in `block in repl'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:67:in `loop'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:67:in `repl'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:38:in `block in start'
/bundle/gems/pry-0.12.2/lib/pry/input_lock.rb:59:in `__with_ownership'
/bundle/gems/pry-0.12.2/lib/pry/input_lock.rb:77:in `with_ownership'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:38:in `start'
/bundle/gems/pry-0.12.2/lib/pry/repl.rb:13:in `start'
/bundle/gems/pry-0.12.2/lib/pry/pry_class.rb:200:in `start'
/bundle/gems/pry-byebug-3.6.0/lib/pry-byebug/pry_ext.rb:11:in `start_with_pry_byebug'
/bundle/gems/railties-5.1.6.2/lib/rails/commands/console/console_command.rb:62:in `start'
/bundle/gems/railties-5.1.6.2/lib/rails/commands/console/console_command.rb:17:in `start'
/bundle/gems/railties-5.1.6.2/lib/rails/commands/console/console_command.rb:97:in `perform'
/bundle/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'
/bundle/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'
/bundle/gems/thor-0.19.4/lib/thor.rb:369:in `dispatch'
/bundle/gems/railties-5.1.6.2/lib/rails/command/base.rb:63:in `perform'
/bundle/gems/railties-5.1.6.2/lib/rails/command.rb:44:in `invoke'
/bundle/gems/railties-5.1.6.2/lib/rails/commands.rb:16:in `<top (required)>'
script/rails:6:in `require'
script/rails:6:in `<main>'
```

Not sure what the issue is as I haven't really digged into it, but I assume the site is partially correct but some part of the metadata is incorrect?

In any case, I suppose that this should be `rescued` somewhere and converted into a `RequestError`.
I had a use-case where it was helpful to avoid network requests and simply save the same response into a cache store (in my case it was redis) to improve the response time in the case that having some (potentially) stale data is acceptable.
https://www.bloomberg.com/opinion/articles/2019-03-12/college-admissions-scandal-sports-teams-have-too-much-influence

Any suggestions?
Hey, when you request a page with many images (eg 80) and use `page.images.with_size` the request is so slow that our applications times out (>30s).

Is there a way to limit the number of images it calculates the size for? It would love to be able to only fetch the size of the first 10 images for example.
Some pages like https://www.delta.com/us/en have a relative base href tag:

```html
<base href="/">
```

This makes the scraping fail because we expect it to be an absolute URL.

To fix this, we should also absolutify this base href with the url of the scraped page. If the base href was already an absolute one, it won't get changed.
Related to #221, my use case for this feature is if I discover a URL that points to a large file (like a video or a PDF) that I know I'm not going to scrape, then there's no need to issue the full HTTP GET request to download the entire thing, just to throw up a "non HTML content" error.

This gives us a point to inspect the server response headers (like Content-Type in this case) to make a decision if we still want to request the full body (or not).
First of all, thanks for the great gem!

It seems when inspecting pages that have a lot of links to big files like PDFs, that the entire file is downloaded (HTTP GET) before checking the Content-Type header to see that it's not an HTML file and then raising the MetaInspector::ParserError.

It would be really nice if there was an option or something to pass in so that MetaInspector first just does an HTTP HEAD request on the URL to get the response headers back from the webserver so it can check things like response HTTP Status Code and Content-Type more efficiently, without having to download the entire large PDF file first to do so.

Thanks!
Hi @jaimeiniesta, I finally managed to get some time to work on the PRs for (#213 and #214). This PR adds the following -

1. Support for the `author` and `best_author` method.
2. Support for `parsely` and `sailthru` tags as fallbacks in determining `best_*` methods.

Let me know if this looks good!