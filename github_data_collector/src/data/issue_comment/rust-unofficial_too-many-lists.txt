
Hi

Rust 1.40 interduced `as_deref()` and `as_deref_mut()`.

instead of doing it this way:
`self.head.as_ref().map(|node| &**node)`
same can be achieved this way
`self.head.as_deref()`
and 
instead of doing it this way:
`self.head.as_mut().map(|node| &mut **node)`
same can be achieved this way
`self.head.as_deref_mut()`

Thanks,,
Early on, the book talks about a node "not being allocated at all": https://rust-unofficial.github.io/too-many-lists/first-layout.html

The book assumes an allocated-always-means-heap-allocated parlance:
- "not allocated at all" implies "stack-allocated"
- "allocated" implies "heap-allocated"

However, some folks were taught using an allocated-means-either-stack-or-heap-allocated parlance:
- "not allocated at all" implies "the object does not exist" (which is nonsensical in this context)
- "allocated" is ambiguous and implies either "stack-allocated" or "heap-allocated"

For folks in the second camp, the book's phrasing is super confusing until they realize a different parlance is being used.
- The node with junk should have a comma, similar to the other nodes
- Make clear that "allocated" means "heap-allocated"


Closes  #138 
The text doesnt mention the requirement to change the import to:
```
use std::cell::{Ref, RefCell, RefMut};
```
In https://rust-unofficial.github.io/too-many-lists/first-pop.html
I would appreciate clarification on exactly where and why the first node on the list gets deallocated from the heap by pop after pop uses mem::replace or take.  I'm loving your tutorial and I'm hoping to get more clarity on Rust's deallocation strategies.
In the second version of push in
https://rust-unofficial.github.io/too-many-lists/fifth-layout.html
it is confusing to have two definitions of new_tail, the second shadowing the first
```rust
pub fn push(&mut self, elem: T) {
    // FIRST DEFINITION:
    let new_tail = Box::new(Node {
        elem: elem,
        // When you push onto the tail, your next is always None
        next: None,
    });

    // Put the box in the right place, and then grab a reference to its Node
    // SECOND DEFINITION SHADOWING FIRST ONE
    let new_tail = match self.tail.take() {
        Some(old_tail) => {
            // If the old tail existed, update it to point to the new tail
            old_tail.next = Some(new_tail);
            old_tail.next.as_mut().map(|node| &mut **node)
        }
        None => {
            // Otherwise, update the head to point to it
            self.head = Some(new_tail);
            self.head.as_mut().map(|node| &mut **node)
        }
    };

    self.tail = new_tail;
}
```
Is this a hint that they will wind up having the same value?