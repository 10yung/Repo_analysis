Greetings, I would appreciate if you help me with the following question. How can I invoke a function after making the payment? This will help me to issue an invoice
I installed complete package but I am running this project through `artisan ` command I am facing this error.
What is the issue ???
And also Facing this exception
`SQLSTATE[HY000]: General error: 1005 Can't create table `ecommerce_app_db`.`users_address` (errno: 150 ER TABLE users_address ADD CONSTRAINT fk_lvuad_pid FOREIGN KEY (parentid) REFERENCES users (id) ON UPDATE CASCADE ON DELETE CASCADE`
Hi,

I think most ecommerce sites implement a single coupon code feature, in which when a new coupon code is added, any previously entered one is removed. It would be great if Aimeos had a built-in option to choose between multi coupon code and single coupon code functionality in the basket.

To have single coupon code functionality in my project, I just modified the js so that an ajax get request is sent to /shop/basket?b_action=coupon-delete&b_coupon=[name_of_previous_coupon] when a coupon code is entered in the input.

Hope this helps!

**Is your feature request related to a problem?**
A clear and concise description of what the problem is.

**Describe the solution you'd like**
A clear and concise description of what you want to happen.

**Describe alternatives you've considered**
Any alternative solutions or features you've considered.

**Additional context**
Add any other context or screenshots about the feature request here.

**Environment**
1. Version  2018.10
2. Operating system - Windows

**Describe the bug**
run php artisan aimeos:setup later

show:
Checking table "mshop_text_list":                                   OK
  Checking table "mshop_catalog_list":                                OK
  Checking table "mshop_product_list":                                OK
  Checking table "mshop_service_list":                                OK
  Checking table "mshop_media_list":                                  OK
Add locale data for languages and currencies
  Adding data for MShop locale languages                              PHP Aimeos\MShop\Exception:  Locale object not available in E:\workspace\ecom-srv\vendor\aimeos\aimeos-core\lib\mshoplib\src\MShop\Context\Item\Standard.php on line 354
PHP Stack trace:
PHP   1. {main}() E:\workspace\ecom-srv\artisan:0
PHP   2. App\Console\Kernel->handle($input = class Symfony\Component\Console\Input\ArgvInput { private $tokens = array (0 => 'aimeos:setup'); private $parsed = array (); protected $definition = class Symfony\Component\Console\Input\InputDefinition { private $arguments = array (...); private $requiredCount = 1; private $hasAnArrayArgument = FALSE; private $hasOptional = TRUE; private $options = array (...); private $shortcuts = array (...) }; protected $options = array (); protected $arguments = array ('command' => 'aimeos:setup'); protected $interactive = TRUE }, $output = class Symfony\Component\Console\Output\ConsoleOutput { private $stderr = class Symfony\Component\Console\Output\StreamOutput { private $stream = resource(63) of type (stream); 



External JavaScript/CSS references without any security hashes are potential security issues as malicious code could be injected into websites (as browsers load and execute them). It is better (and conform with Laravel's asset system) to have local references that are bundled in `app.css` and `app.js`.

Laravel 5.6 uses NodeJS' `npm` to handle packages. All what you have to do is to add them to `resources/assets/js/app.js` and `resources/assets/sass/app.scss` accordingly.

Copied from https://github.com/aimeos/ai-admin-jqadm/issues/44
If you install (same for admin interface) the shop under a sub path, like `/myshop/` only the index pages (dashboard in admin) work, but not any sub page. This is because of a static `/` is being used all over the place. Instead, you should use `route()` or at least `url()` for dynamically generating URLs.

Not all people will have the option of having your shop being installed in document root directory.
i've seen it now in several places and it forces me to manually define what interface is available each time.

this would work with phpstorm see here http://stackoverflow.com/a/1763425/533426 :

```
     * @return \Aimeos\MShop\Common\Item\Iface[] some more text
     */
    public function getRefItems( $domain = null, $type = null, $listtype = null );
```

your current implementation does not work:

```
 * @return array List of items implementing \Aimeos\MShop\Common\Item\Iface
     */
    public function getRefItems( $domain = null, $type = null, $listtype = null );
```

you could just move the definition, and add [] and all phpstorm users will be happy (it is a very common editor as you can see by the amount of views on stackoverflow)
