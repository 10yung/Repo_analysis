I took me a few hours but I finally got the matrix build to run and Laravel 7 support in. I discovered that the matrix build wasn't really running and was always testing on 6.x. I took some inspiration from Spatie's builds to set things up. And also added Laravel 7 support in the meantime. I also cleaned up the composer.json file to be more similar to Laravel's one. I needed to set minimum stability for example. I also added a minimum PHP version to it which is the same one as the minimum Laravel one (5.6).

As you can see I needed to do quite some circumventing to get things to work. In the future it might be best to consider to drop support for older Laravel versions. 

Feel free to add comments on the pieces of code where you have questions and I'll answer them.
This will throw `Unable to set component data. Public property [$1] not found on component`:
```php
<a href="#" wire:click.prevent="$set('showChat',true)">
```
After a lot of head scratching I found out that this will work as expected:
```php
<a href="#" wire:click.prevent="$set('showChat', true)">
```
Not putting a space after the comma and before the `value`, will make livewire want to evaluate the string for some reason. It evaluates `true` to `1` and tries to find a public property with that name.

**To Reproduce**
Just omit the space before tha `value`.

**Expected behavior**
The space should not have any effect.
**Is your feature request related to a problem? Please describe.**
Please clarify in the documents whether [this](https://github.com/turbolinks/turbolinks#loading-your-applications-javascript-bundle) should be followed for @livewireScripts.

**Describe the solution you'd like**
Update [this page](https://laravel-livewire.com/docs/spa-mode/) as needed.



Any function called with wire:keydown uses the last updated binding from wire:model.lazy instead of the current when both on the same input.
I have a nested component, and within that nested component I'm using the `@this` blade directive to have livewire send an update on a javascript event.

Unfortunately `@this` this doesn't work when you update the component because that javascript does not get updated when the component updates. `@this` will always reference the first component.

_In the example below, I understand that I could change the `onclick` to a `wire:click` and it would work. I've just used this to simplify what is a more complex implementation where I cannot do that in my case._

#### Top Component

```php
class TopComponent extends Component
{
    public $currentItem = 'first';

    protected $listeners = ['next' => 'next'];

    public function next()
    {
        $this->currentItem = 'second';
    }
```
    
```html
<div>
    @livewire('nested-component', $currentItem, key($currentItem))
</div>
```

#### Nested Component

```php
class NestedComponent extends Component
{
    public $name = '';
    public $value = 'change_me';

    public function mount($name)
    {
        $this->name = $name;
    }
```
    
```html
<div>
    Component Name: {{$name}}<br/>
    Value: {{$value}}<br/>
    <button onclick="myFunction()">Update Value to "Changed"</button>
    <button wire:click="$emit('next')">Move to Next Component</button>
</div>

<script>
    function myFunction() {
        // This works on the first component but not on the second
        @this.set('value', 'changed');
    }
</script>
```

#### The Issue

When the page loads, `@this.set('value', 'changed')` becomes this`window.livewire.find('original-nested-id-string').set('value', 'changed');`

When the nested component is changed, the new component has a different id, but that javascript remains the same and references 'original-nested-id-string` so the update fails.

Is there a way to update the javascript with the new component ID when a nested component is updated?
**Is your feature request related to a problem? Please describe.**
When you do a defer loading `<div wire:init="getData">` I would like to be able to target a loading action just for that event. You don't always need a loading screen on other types of actions within that component.

**Describe the solution you'd like**
```
<div wire:init="getData">
    <div wire:loading wire:target="init">Loading...</div>
</div>
```

**Describe the bug**
A listener with the parameter named `$date` will contain an instance of `Illuminate\Support\DateFactory` despite we are not sending any date object. 

Changing the parameter name to `$test` fix the problem.

**To Reproduce**
```php
<?php

namespace App\Http\Livewire;

use Livewire\Component;

class Pagination extends Component
{
    public int $month;
    public int $year;

    public function mount()
    {
        $this->month = now()->month;
        $this->year = now()->year;
    }

    public function updated($name, $value)
    {
        $this->emit('paginate', "{$this->year}-{$this->month}-01");
    }

    public function render()
    {
        return view('livewire.pagination');
    }
}
```
```php
<?php

namespace App\Http\Livewire;

use Livewire\Component;

class Account extends Component
{
    protected $listeners = [
        'paginate' => 'loadTransactions',
    ];

    public function loadTransactions($date)
    {
        // Expect "2020-1-01" 
        // but receive an instance of `Illuminate\Support\DateFactory` instead
        dd($date);
    }

    public function render()
    {
        return view('livewire.account');
    }

}
```

**Expected behavior**
The parameter `$date` should contain the emitted value.

**Desktop (please complete the following information):**
 - Tested on Firefox

**Additional context**
 - Tested with PHP 7.4
 - Tested with livewire `0.5.3` and `dev-master`
 - Using `$collection` returns the expected string "2020-1-01"

**Describe the bug**
Strange behavior with comma separated parameter

**To Reproduce**
Steps to reproduce the behavior:
1) Install latest Laravel and latest livewire (0.5.3)
2) Create livewire component:
`$ php artisan make:livewire test`
3) Update view and component class:
resources/views/livewire/test.blade.php:
```
<div>
    @php
    $text = 'test, test';
    @endphp
    <button wire:click="test('{{ $text }}')">Test</button>
</div>
```

app/Http/Livewire/Test.php
```
<?php

namespace App\Http\Livewire;

use Livewire\Component;

class Test extends Component
{
    private $text;

    public function render()
    {
        return view('livewire.test');
    }

    public function test($text)
    {
        $this->text = $text;
    }
}
```
**Expected behavior**
In browser console:
```
SyntaxError: '' literal not terminated before end of script
```

But if you change the view to (delete one space in `$text`):
```
<div>
    @php
    $text = 'test,test';
    @endphp
    <button wire:click="test('{{ $text }}')">Test</button>
</div>
```
Everything works fine. 

**Desktop (please complete the following information):**
 - Browser is any: FF, Chrome, Safari and etc.

I am following the [episode](https://laracasts.com/series/guest-spotlight/episodes/3) on Laracasts on how to make a Livewire table. Everything seems to work fine until I change the select option more than 2 times. The first 2 times I can see a request is made to my controller in the "network" section of Chrome. On the 3rd change there is no longer any requests being made

Add `wire:model="perPage" ` to a select field like so:
```
 <select wire:model="perPage" class="bg-transparent w-full px-4 py-2 cursor-pointer capitalize">
                    <option>10</option>
                    <option>15</option>
                    <option>25</option>
                </select>
```

on the backend I have the controller set ups as so:
```
<?php

namespace App\Http\Livewire;

use Livewire\Component;
use App\Conference;
use App\Session;
use Livewire\WithPagination;

class SessionsTable extends Component
{
    use WithPagination;

    public $search = '';
    public $perPage = 25;
    public $sortField = 'title';
    public $sortAsc = true;

    public function sortBy($field)
    {
        if ($this->sortField === $field) {
            $this->sortAsc = !$this->sortAsc;
        } else {
            $this->sortAsc = true;
        }
        $this->sortField = $field;
    }


    public function render()
    {
        $conference = Conference::latest()->first();

        $sessions = Session::search(
            $this->search
        )
            ->orderBy($this->sortField, $this->sortAsc ? 'asc' : 'desc')
            ->paginate($this->perPage);

        return view('livewire.sessions-table', compact('sessions'));
    }
}

```
now if you select the perPage 3 different times to change the collection it stops working all together. Again the first and second change work just fine. 


You should be able to select "per page" as many times as you want


**Describe the bug**
I have a search Input and I am showing a list of items in a list with a pagination count of 5 on each page.

The search only works when I am on page 1. If I go to another page and search something over the input the results dont get listed and the pagination still shows up even when the search count is small than the pagination count.

**Expected behavior**
I was expecting to see my results without pagination. If I press on the pagination i cant see the results of my search.

**Video**
 https://youtu.be/uWFiGDlw7cg (Take a look at 0:32)

*I am not sure if this is a bug or I am missing something out.*

Controller:
```
<?php

namespace App\Http\Livewire\Tags;

use App\Tag;
use Exception;
use Illuminate\Contracts\View\Factory;
use Illuminate\View\View;
use Livewire\Component;
use Livewire\WithPagination;

class TagEdit extends Component
{
    use WithPagination;

    public $searchInput;
    protected $searchList;
    protected $pagination = '5';

    /**
     * @param $id
     * @throws Exception
     */
    public function deleteTags($id): void
    {
        $deleteID = Tag::findOrFail($id);
        $deleteID->delete();
    }

    /**
     * @return Factory|View
     */
    public function render()
    {
        $this->searchList = Tag::where('schlagwort', 'like', '%' . $this->searchInput . '%')
            ->orderBy('created_at', 'desc')
            ->paginate($this->pagination);

        return view('livewire.tags.tag-edit', [
            'searchList' => $this->searchList,
        ]);
    }
}

```
View:
```
<div>
    <div class="text-left mb-5">
        <label for="labelSchlagwort" class="font-weight-bold">Schlagwort Suchen:</label>
        <input class="form-control" placeholder="Schlagwort Suchen" type="text" wire:model="searchInput">
    </div>

    @if($searchList->total() > 0)
        {{ $searchList->links() }}
        <table class="table table-striped table-hover">
            <thead>
            <tr>
                <th scope="col" class="text-left">Schlagwort</th>
                <th scope="col" class="text-left">Angelegt am</th>
                <th scope="col" class="text-left"></th>
            </tr>
            </thead>
            <tbody>
            @foreach($searchList as $searchedItem)
                <tr>
                    <td class="text-left">{{ $searchedItem->schlagwort }}</td>
                    <td class="text-left">{{ $searchedItem->created_at }}</td>
                    <td class="text-left">
                        <button class="btn btn-success">Editieren</button>
                        <button class="btn btn-danger" wire:click="deleteTags({{ $searchedItem->id }})">Löschen</button>
                    </td>
                </tr>
            @endforeach
            </tbody>
        </table>
        {{ $searchList->links() }}
    @endif
</div>

```