It doesn't affect us but worthwhile to add the test to prevent regression

https://github.com/ollypwn/cve-2020-0601
I noticed that amalgamation doesn't work on ARM64 and PowerPC (tested on Travis CI, it works fine on AMD64) because the target values used in the GCC pragmas are not valid:

**ARM64**
```
   INFO: Writing amalgamation header to botan_all.h
   INFO: Writing amalgamation header to botan_all_internal.h
   INFO: Writing amalgamation source to botan_all.cpp
   INFO: Writing amalgamation source to botan_all_neon.cpp
   INFO: Writing amalgamation source to botan_all_armv8crypto.cpp
   INFO: Writing amalgamation source to botan_all_armv8crypto_neon.cpp
   INFO: Botan 2.13.0 (revision git:ed360ab268544fd801b8ea68ff08b07610680052) (unreleased undated) build setup is complete
botan_all_armv8crypto_neon.cpp:12:34: error: target pragma ‘armv8crypto’ is invalid
 #pragma GCC target ("armv8crypto")
                                  ^
botan_all_armv8crypto_neon.cpp:15:27: error: target pragma ‘neon’ is invalid
 #pragma GCC target ("neon")
                           ^
make: *** [build/obj/lib/botan_all_armv8crypto_neon.o] Error 1
make: *** Waiting for unfinished jobs....
botan_all_armv8crypto.cpp:12:34: error: target pragma ‘armv8crypto’ is invalid
 #pragma GCC target ("armv8crypto")
                                  ^
make: *** [build/obj/lib/botan_all_armv8crypto.o] Error 1
botan_all_neon.cpp:12:27: error: target pragma ‘neon’ is invalid
 #pragma GCC target ("neon")
                           ^
make: *** [build/obj/lib/botan_all_neon.o] Error 1
```
**PowerPC**
```
   INFO: Writing amalgamation header to botan_all.h
   INFO: Writing amalgamation header to botan_all_internal.h
   INFO: Writing amalgamation source to botan_all.cpp
   INFO: Writing amalgamation source to botan_all_altivec.cpp
   INFO: Writing amalgamation source to botan_all_powercrypto.cpp
   INFO: Botan 2.13.0 (revision git:ed360ab268544fd801b8ea68ff08b07610680052) (unreleased undated) build setup is complete
botan_all_powercrypto.cpp:12:34: error: #pragma GCC target "powercrypto" is invalid
 #pragma GCC target ("powercrypto")
                                  ^
make: *** [build/obj/lib/botan_all_powercrypto.o] Error 1
```

May be somewhat related to #2159.
Release planned for April 6 2020, feature freeze starting March 27th.

- [ ] Cert path building #1790
- [ ]  TLS handshake internals refactoring
- [ ]  Fix BoGo shim to handle PSS tests
- [ ]  Support timeout in BoGo DTLS tests
- [ ]  Resolve/examine remaining BoGo test failures
- [ ] #2216
- [ ] #2159
Hello All,

I'm using Botan::TLS_Server on top of standalone ASIO.
I'm using a self-signed certificate as CA and another one as server certificate (signed with that self-signed one), both made with botan command line using ECDSA algorithm; session manager is Session_Manager_Noop, rng is AutoSeeded_RNG  and the policy is Strict_Policy.

I'm using version 2.11, and everything works fine on Windows and ArchLinux.

Now my question/problem:
If I upgrade botan on my ArchLinux, going to version 2.12.4 or when I built it on an Ubuntu 18.04 box (botan 2.4.0), I get an "alert TLS handshake failure." on the client side.

At the moment I have no idea what is wrong, or what else to look for.
If I use openssl as a client, I get the following:


```
openssl s_client -enable_pha -tls1_2 -state -msg -showcerts -connect localhost:8989 -CAfile /tmp/cert/tempcerts.pem

CONNECTED(00000003)
SSL_connect:before SSL initialization
>>> ??? [length 0005]
    16 03 01 00 db
>>> TLS 1.2, Handshake [length 00db], ClientHello
    01 00 00 d7 03 03 04 78 82 59 cd 66 a7 fe 49 17
    9c a6 cb b8 22 80 c9 d9 d3 cd f2 21 64 3d 8e 8b
    cd cd aa 5a 75 1a 00 00 38 c0 2c c0 30 00 9f cc
    a9 cc a8 cc aa c0 2b c0 2f 00 9e c0 24 c0 28 00
    6b c0 23 c0 27 00 67 c0 0a c0 14 00 39 c0 09 c0
    13 00 33 00 9d 00 9c 00 3d 00 3c 00 35 00 2f 00
    ff 01 00 00 76 00 00 00 1a 00 18 00 00 15 61 74
    65 6c 69 65 72 64 61 73 61 75 64 65 2e 65 73 70
    2e 62 72 00 0b 00 04 03 00 01 02 00 0a 00 0c 00
    0a 00 1d 00 17 00 1e 00 19 00 18 00 23 00 00 00
    16 00 00 00 17 00 00 00 0d 00 30 00 2e 04 03 05
    03 06 03 08 07 08 08 08 09 08 0a 08 0b 08 04 08
    05 08 06 04 01 05 01 06 01 03 03 02 03 03 01 02
    01 03 02 02 02 04 02 05 02 06 02
SSL_connect:SSLv3/TLS write client hello
<<< ??? [length 0005]
    15 03 03 00 02
<<< TLS 1.2, Alert [length 0002], fatal handshake_failure
    02 28
SSL3 alert read:fatal:handshake failure
SSL_connect:error in error
140040023487744:error:14094410:SSL routines:ssl3_read_bytes:sslv3 alert handshake failure:ssl/record/rec_layer_s3.c:1543:SSL alert number 40
---
no peer certificate available
---
No client certificate CA names sent
---
SSL handshake has read 7 bytes and written 224 bytes
Verification: OK
---
New, (NONE), Cipher is (NONE)
Secure Renegotiation IS NOT supported
Compression: NONE
Expansion: NONE
No ALPN negotiated
SSL-Session:
    Protocol  : TLSv1.2
    Cipher    : 0000
    Session-ID: 
    Session-ID-ctx: 
    Master-Key: 
    PSK identity: None
    PSK identity hint: None
    SRP username: None
    Start Time: 1578354362
    Timeout   : 7200 (sec)
    Verify return code: 0 (ok)
    Extended master secret: no
---
```
Am I missing some initialization/configuring for other versions of botan?


This is PR allows wrapping TLS::Server using TLS::Stream.

 - [x] how to configure timeouts -> [see comment](https://github.com/randombit/botan/pull/2229#issuecomment-569042082)
 - [ ] [what happens on short read](https://github.com/hrantzsch/botan-tls-stream-server-example/blob/master/server.cpp#L220)
 - [x] implement async_shutdown
 - [x] drop commit that adds the spike
 - [x] sort out licensing issues regarding the Beast example / the CLI tool -> removed the example and opted for a simpler unit test instead
 - [x] outsource Beast example, link in manual
 - [x] restore `lowest_layer` accessors or decide that we didn't need them

### Testing

In addition to the TODOs above, I'm wondering how we should best unit and integration test this.
The existing `tls_asio_stream` unit tests are not really meaningful here, as the underlying `Channel` is mocked and does not care whether we want it to do a client-side or server-side handshake.
The spike that is included could be adjusted to become a kind of integration test, if we want to have something like that.
https://tools.ietf.org/html/rfc8452

(Sorry for original title typo)
"fuzzer" build runs with ASan only right now, I think because UbSan wasn't supported by GCC 4.8. Should enable UbSan
socket.cpp, socket_udp.cpp and cli/socket_utils.h have a lot of shared/duplicated code for handling differences in socket interface between BSD and Windsock. Consolidate into a single internal header which can be used across all three.
I'm trying to verify ECDSA signatures, but I don't understand how to verify hashes directly. 

Is there a way to use pre-hashed data, instead of having the PK_Verifier calculate the hashes?
Only ever seen this in CI, not been able to reproduce:

gost_3410_sign:
pubkey/gost_3410_sign.vec ran 1 tests 1 FAILED
Failure 1: Test # 1  failed with exception 'OID::encode_into: OID is invalid' [Key=01456C64BA4642A1653C235A98A60249BCD6D3F746B631DF928014F6C5BF9C4041AA28D2F1AB148280CD9ED56FEDA41974053554A42767B83AD043FD39DC0493]

It seems more common on the Aarch64 fuzzer build which has 32 cores, so it may be some kind of threading bug. The EC group being tested here is a custom registered one which I suspect is part of the issue.