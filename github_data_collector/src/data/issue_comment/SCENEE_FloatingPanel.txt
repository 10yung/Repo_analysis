This issue is that a panel sometimes moved up in dragging it down if content offset of the tracking scroll view in a content view controller was greater than its top interaction buffer.

Ref. #293
I ve implemented Floating panel exactly same as you've shown in Map example. Only difference in my implementation is i've used collection view instead of table view & Im loading bottom sheet from nib. Apart from this each and every line of code is exact same. Even checked hierarchy , searchbar is on top of all views. Also added textfield on bottomSheet. not getting selection for that either. Please help me as this is a huge blocker for me RN.Thank you
### Short description
When i set UINavigationController controller as contentViewController and use prefersLargeTitles for rootviewcontroller of it. i am not able to get title back to its position when scroll down the floatingpanelcontroller. and title sticks to the top. Is there any solution for this in FloatingPanel

Thanks.

![ezgif-2-4f403aed2ea3](https://user-images.githubusercontent.com/29978287/71877951-7814df80-3150-11ea-9cd7-86accff3bf4f.gif)

### Expected behavior
- title should go back to large title when scrolled down.
### Actual behavior
- It breaks the title UI. some time it goes back and some times it stays on top.

**Code example that reproduces the issue**
`let nav = UINavigationController(rootViewController: self.nearByVC)
			self.floatingPanelController.set(contentViewController: nav)
			self.floatingPanelController.track(scrollView: self.nearByVC.tableView)
			self.floatingPanelController.isRemovalInteractionEnabled = false
			self.floatingPanelController.surfaceView.contentInsets = .init(top: 20, left: 0, bottom: 0, right: 0)`
### Environment
Debug
**Library version**
1.71
**Installation method**
pod 'FloatingPanel'

**iOS version(s)**
13.3
**Xcode version**
11.3

### Short description
Once we started tracking a table view inside the floating panel we obtain a strange behaviour. Indeed the content view contains a vertical stack with a 100px height view (lets call it header) and below a table view. 

When the panel is in `.full` position and table view has a `contentOffset > 0.0`, then the only way to pull down the panel is to scroll down the table view back to top or to use the very small grabber. 

While when the panel is in `.middle` or `.tip` position then the header view detects `panGesture` and makes panel position changes much easier (whatever the tracked table view content offset is). --> that's the behaviour I would always expect. 

### Environment

**Library version**
1.7.0

**Installation method**
- [x] CocoaPods
- [ ] Carthage
- [ ] Git submodules

**iOS version(s)**
13.3

**Xcode version**
11.3
### Short description
I have 2 floating panels in my VC. One only covers half the screen, while the other needs to take the complete screen.
I will refer to the panels as such in the rest of the issue
Half Screen Panel - Panel 1
Full Screen Panel - Panel 2 
I am using an intrinsic layout, so that Panel 1 cannot be expanded completely. However, using the intrinsic layout, I am not able to cover the full screen using Panel 2.
### Expected behavior
Open Panel 1 and it should not be able to be expanded more than the height set in the insetFor(position: FloatingPanelPosition).
Open Panel 2 and it should be expanded to the height of the complete screen.
### Actual behavior
Panel 1 works as required.
Panel 2 does not show up at all, and if I set a height in insetFor(position: FloatingPanelPosition) function. It crashes. However, if I do not set it, it will be nil and the Panel does not slide up at all.
### Steps to reproduce

**Code example that reproduces the issue**
`   
     private func setupFloatingPanel(viewController: UIViewController, floatingPanelPosition: FloatingPanelPosition) {
        
        slidingViewIsDisplayed = true
        fpc = FloatingPanelController()
        fpc.delegate = self
        fpc.view.backgroundColor = StyleSheet.Color.panelBackgroundColor
        fpc.surfaceView.backgroundColor = StyleSheet.Color.panelBackgroundColor
        self.view.addSubview(fpc.view)
        fpc.view.frame = self.view.bounds
        fpc.view.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
          fpc.view.topAnchor.constraint(equalTo: self.view.topAnchor, constant: 0.0),
          fpc.view.leftAnchor.constraint(equalTo: self.view.leftAnchor, constant: 0.0),
          fpc.view.rightAnchor.constraint(equalTo: self.view.rightAnchor, constant: 0.0),
          fpc.view.bottomAnchor.constraint(equalTo: self.view.bottomAnchor, constant: 0.0)
        ])
        fpc.set(contentViewController: viewController)
        fpc.addPanel(toParent: self, belowView: stackView, animated: true)
        self.addChild(fpc)
        fpc.show(animated: true, completion: {
            self.fpc.didMove(toParent: self)
        })
        fpc.move(to: floatingPanelPosition, animated: true)
    }

    class MyFloatingPanelLayout: FloatingPanelIntrinsicLayout {
    public var initialPosition: FloatingPanelPosition {
        return .tip
    }
    
    public func insetFor(position: FloatingPanelPosition) -> CGFloat? {
        switch position {
        case .half: return 310.0 // A bottom inset from the safe area
        case .tip: return 0.0 // A bottom inset from the safe area
        default: return nil // Or `case .hidden: return nil`
        }
    }
    var supportedPositions: Set<FloatingPanelPosition> {
        return [.tip, .half, .full]
    }
}
`

### Environment
**Library version**
1.7.1
**Installation method**

- [X] CocoaPods
- [ ] Carthage
- [ ] Git submodules

**iOS version(s)**
iOS 13 - iPhone 11 Simulator
**Xcode version**
11.2.1
### Short description
Any Object in ContentView Cann't tap

### Expected behavior
UIButton, Segment Control and so on 
Cann't response tap

### Actual behavior

### Steps to reproduce
When using this Layout

```swift

    func floatingPanel(_ vc: FloatingPanelController, layoutFor newCollection: UITraitCollection) -> FloatingPanelLayout? {
        return TNXPanelLayout()
    }


class TNXPanelLayout: FloatingPanelIntrinsicLayout {
    var supportedPositions: Set<FloatingPanelPosition> {
        return [.tip, .half]
    }
    var initialPosition: FloatingPanelPosition {
        return .half
    }
    func insetFor(position: FloatingPanelPosition) -> CGFloat? {
        switch position {
        case .tip: return 10
        case .half: return 514.0
        default: return nil  // Must return nil for .full
        }
    }
}
```

**Code example that reproduces the issue**

### Environment

**Library version**

**Installation method**

- [x] CocoaPods
- [ ] Carthage
- [ ] Git submodules

**iOS version(s)**
13.2
**Xcode version**
Version 11.2.1 (11B500)
Floating panel does not behave correctly when added to a modal ViewController presented using the new card style presentation on iOS 13. (modalPresentationStyle = .automatic)

If you remove line 286 inside ViewController.swift inside the samples project this should now present the ViewController as a card. Run and hit show modal. The panel tracking when dragging up works but as soon as you drag down things go wrong.

iOS 13 Simulator iPhone 11
Xcode 11.2.1
Floating Panel 1.7.1

https://imgur.com/a/bLIcDdw
  
### Short description
I want Floating panel work as it is except returning to supported key positions after I stop dragging it.

### Expected behavior
When I drag panel up and down and then release it, it should stay at same position where I released it.

### Actual behavior
Panel is returning to the closest supported position (.tip, .full ...) after release


### Steps to reproduce
Usual code for using panel

**Installation method**
- [ ] CocoaPods

**iOS version(s)**
11.0

**Xcode version**
11.2
### Short description
Is it possible to add another view between `surfaceView` & `backdropView`. And then dragging up let middle view slightly appearing. 

### Expected behavior
Something like google map behavior. Once the user sliding up the details, the photos will appear from the middle, behind the top view.

Thanks in advance!.

Happy coding
### Short description

First of all. Thank for very useful and awesome library. ðŸ¥°

I have facing with this very weird effect when Floating Controller contain `scroll-view` like `TextView` - `TableView`, etc...

After scroll down for example `text-view`. After that when I try to drag down the Floating Controller, it's very hard to drag down and it's cause some damping effect. It's make a the contain view move up then down.

But when scroll to top of scroll-view then everything become normal.

Please take a look at the video below

https://imgur.com/2NOYwhI

**Code example that reproduces the issue**

Actually I using Map example from FloatingPanel's source. Just create many datasource for tableview inside FloatingController

### Environment

Simulator from iOS 11 -> iOS 13

Real device iPhone XSMax iOS 13.x

**Library version**
1.7.0

I also try with 1.6.6.

**Installation method**

- [x] Direct from source code
- [x] CocoaPods
- [ ] Carthage
- [ ] Git submodules

**iOS version(s)**
from iOS 11 -> iOS 13
**Xcode version**
11.0