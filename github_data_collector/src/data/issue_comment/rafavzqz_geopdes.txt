
Dear Rafa
Thank you for your previous help.
As you mentioned  the estimator for linear elasticity should read
h_Q (\int_Q (f + div(\sigma(u)) : (f + div(\sigma(u)))^{1/2}
I think displacement field is the error estimator in above equation.
I would like to know how we can make one of the components of stress or von Mises stress as our error estimator? 

Best
Hamid
Dear Rafa
Two different posteriori error indicators have been introduced in your paper entitled "Algorithms for the implementation of adaptive isogeometric methods using hierarchical splines" for the scalar field. Are these indicators applicable to the vector field approximations like elasticity problems?
I mean without the exact solution at hand, can we estimate the residual error for the vector field using the above-mentioned error estimators?
Dear Rafa
Thank you for your previous help.
I would like to implement HB splines related computation.I have read the documents in the appendix and GeoPDEs code libraries this week.However,my code level is very limited.
I feel a little embrassed ... Would you please give me a example like how to 
compute and plot the HB basis functions with the GeoPDEs source code?If the GeoPDEs source code has the above function,please tell me about that.(Sry,I can't understand this code very well...)
Would you give me some guidance,please?

Deeply grateful,
Jim








Dear Rafa
Hi
First, thank you for the time you provide me.
I have solved Fichera corner example, and I could capture the singularity and the results for three steps of refinement are as follows
![Capture](https://user-images.githubusercontent.com/23305243/57950128-97c67180-78fb-11e9-90fa-f0f11ee94885.PNG)
Now I want to compare the results of the energy norm with GeoPDE, would you mind telling me how I should provide the input data? 
My input data is as follows

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% PHYSICAL DATA OF THE PROBLEM
clear problem_data  
% Physical domain, defined as NURBS map given in a text file
problem_data.geo_name = 'geo_fichera.txt';

% Type of boundary conditions for each side of the domain
problem_data.nmnn_sides   = [];
problem_data.drchlt_sides = 1;

% Physical parameters
problem_data.c_diff  = @(x, y, z) ones(size(x));
problem_data.grad_c_diff = @(x, y, z) cat (1, ...
            reshape (zeros(size(x)), [1, size(x)]), ...
            reshape (zeros(size(x)), [1, size(x)]), ...
            reshape (zeros(size(x)), [1, size(x)]));

% Source and boundary terms

radius                = @(x,y,z) (x.^2 + y.^2 + z.^2);
uex                    = @(x,y,z) (radius(x,y,z)).^(1/4);
problem_data.f  = @(x,y,z) ((-3/4)*radius(x,y,z)).^(-3/4);
problem_data.h = @(x,y,z,ind) uex(x,y,z);

% Exact solution (optional)
problem_data.uex     = uex;
problem_data.graduex = @(x, y, z) cat (1, ...
            reshape (x./(2*(x.^2 + y.^2 + z.^2).^(3/4)), [1, size(x)]), ...
            reshape (y./(2*(x.^2 + y.^2 + z.^2).^(3/4)), [1, size(x)]), ...
            reshape (z./(2*(x.^2 + y.^2 + z.^2).^(3/4)), [1, size(x)]));

% CHOICE OF THE DISCRETIZATION PARAMETERS (Coarse mesh)
clear method_data
method_data.degree             = [2 2 2];      % Degree of the splines
method_data.regularity         = [1 1 1];      % Regularity of the splines
method_data.nsub_coarse     = [2 2 2];      % Number of subdivisions of the coarsest mesh
method_data.nsub_refine      = [2 2 2];      % Number of subdivisions for each refinement
method_data.nquad              = [3 3 3];      % Points for the Gaussian quadrature rule
method_data.space_type       = 'standard';   % 'simplified' (only children functions) or 'standard' 
method_data.truncated         = 1;            % 0: False, 1: True

% ADAPTIVITY PARAMETERS
clear adaptivity_data
adaptivity_data.flag                  = 'elements';
% adaptivity_data.flag              = 'functions';
adaptivity_data.C0_est             = 1.0;
adaptivity_data.mark_param    = .5;
adaptivity_data.mark_strategy = 'MS';
adaptivity_data.max_level        = 10;
adaptivity_data.max_ndof        = 5000;
adaptivity_data.num_max_iter  = 5;
adaptivity_data.max_nel           = 5000;
adaptivity_data.tol                    = 1e-5;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Best regards
Hamid
Dear Rafa
I appreciate the time you spend guiding me.
I am writing to ask if you could help me with how I can translate control points between different hierarchical levels?
suppose I have control points of level one, how can I calculate the control points of (T)HB space?
I have written the following code to calculate all control points of each level, is there any way to directly calculate the control points of each element separately?

%%
coeff_lev   = cell(size(hmsh.nel_per_level));
CntrlPts     = cell(size(hspace.space_of_level));
% Control points of first level
CntrlPts{1} = geometry.nurbs.coefs;
% Control points of other levels using subdivision matrix
for i = 1:numel(hspace.Proj)
    CntrlPts{i+1} = CntrlPts{i}*hspace.Proj{i}';
end
for ilev = 1:numel(hspace.space_of_level)  
    [~,jj]=find(hspace.Csub{ilev}(hspace.active{ilev},:));
    coeff_lev{ilev} = CntrlPts{ilev}(:,hspace.active{ilev})*hspace.Csub{ilev}(hspace.active{ilev},jj);
end

Best Regards
Hamid
Hi Rrafavzqz !
I want to construct a hierarchical vector space from a hierachical scalar space obtained from your package. But, I can not get the right stiffness matrix and the matrix operation is  singular if I construct the hierarchical vector space as the following code. Moreover, if the level of the hierachical vector space equals to 1, the matrix is right and the matrix operation is no longer singular. Could you help me to fix it?

```
1. for ilev = 1:numel(hspace.space_of_level)
2.       msh = hmsh.mesh_of_level(ilev);
3.       space_scalar = hspace.space_of_level(ilev);
4.       scalar_spaces = repmat ({space_scalar}, 1, msh.rdim);
5.       spaces = sp_vector (scalar_spaces, msh);
6.       if ilev==1
7.          sp_hier.space_of_level= spaces;
8.       else
9.           sp_hier.space_of_level(ilev)= spaces;
10.       end
11.       clear spaces
12.   end
13.   for ilev = 1:numel(hspace.space_of_level)
14.       cumsum_ndof(1) = 0;
15.       cumsum_ndof(2 : hmsh.rdim+1) = cumsum (cellfun (@(x) x.ndof, sp_hier.space_of_level(ilev).scalar_spaces));
16.       if ~isempty(hspace.active{ilev})
17.          sp_hier.active{ilev} = repmat(hspace.active{ilev},1,msh.rdim)+repmat(cumsum_ndof(1:msh.rdim),numel(hspace.active{ilev}),1);
18.       else
19.          sp_hier.active{ilev}=[];
20.       end
21.       if ~isempty(hspace.deactivated{ilev})
22.          sp_hier.deactivated{ilev} = repmat(hspace.deactivated{ilev},1,msh.rdim)+repmat(cumsum_ndof(1:msh.rdim),numel(hspace.deactivated{ilev}),1);
23.       else
24.          sp_hier.deactivated{ilev}=[];
25.       end
26.       sp_hier.active{ilev} = sp_hier.active{ilev}(:);
27.       sp_hier.deactivated{ilev} = sp_hier.deactivated{ilev}(:);
28.       Id1=zeros(size(hspace.Csub{ilev}));
29.       Id2=zeros(size(hspace.Csub{ilev}));
30.       sp_hier.Csub{ilev} =[hspace.Csub{ilev}, Id1; Id2,hspace.Csub{ilev}] ;
31.   end

```

Best!
didadidadada
