As `crossbeam` from `laminar` is not semver-compatible with latest-stable it's not possible to name it, so not possible to store it in a struct.
I'm trying to achieve broadcast so that I don't need to resend a large amount of datagrams to a different address. Is there a way to achieve sending UDP datagrams to multiple parties?
Currently RTT information is captured but not exposed to laminar users. 
Sometimes Laminar sends duplicated reliable messages.

Here's the code I tested reliable messages with:
https://github.com/mvlabat/laminar_test_reliable
It's built on `amethyst_net` (that's the simplest way I could make a working reproducible example).

This is the log I've got for `server` binary:
```
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:60,abs_time:2.0129027"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:120,abs_time:4.0126003"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:180,abs_time:6.0121002"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:240,abs_time:8.0118525"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:300,abs_time:10.0112636"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:360,abs_time:12.0107855"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:420,abs_time:14.0102495"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:480,abs_time:16.0098564"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:540,abs_time:18.009468"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:600,abs_time:20.0090189"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:660,abs_time:22.0084704"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:720,abs_time:24.0078973"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:780,abs_time:26.0074167"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:840,abs_time:28.0138444"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:900,abs_time:30.0133461"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:960,abs_time:32.0129481"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1020,abs_time:34.0125258"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1080,abs_time:36.0120126"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1140,abs_time:38.011648"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1200,abs_time:40.0111007"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1260,abs_time:42.0106031"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1320,abs_time:44.0101689"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1380,abs_time:46.0097797"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1440,abs_time:48.0093349"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1500,abs_time:50.0087834"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1560,abs_time:52.0084059"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1620,abs_time:54.0078647"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1680,abs_time:56.0074363"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1740,abs_time:58.010088801"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1800,abs_time:60.009485601"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1860,abs_time:62.008991301"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1920,abs_time:64.007861001"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:1980,abs_time:66.007326101"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:2040,abs_time:68.011057001"
[INFO][server] 127.0.0.1:3455: b"CL: sim_frame:60,abs_time:2.0129027"
```
Note the first and the last lines ^ (the first message sent on 60'th frame was received twice).

I'm not sure this is 100% reproducible, but with some "luck" it is (I've got the same log two times in a row). I suppose the key to see it is to wait for at least `REDUNDANT_PACKET_ACKS_SIZE` (32) packets.
As far as I understand if a user tries to send a message and it fails to any reason, Laminar will try to resend it after getting 32 packets without acknowledging the failed message.

We discussed the following case with @jstnlef on Discord:
> Let's say if a user tries connecting with sending a reliable Handshake message and keeps doing it for several times (if they can't because of AddrNotAvailable error, for instance), then on success a server will get lots of handshakes from the same peer

I believe that in this case we should give a user possibility to decide what to do with such messages on error handling
```
~/Local/laminar (master) $ cargo bench
    Updating crates.io index
  Downloaded bincode v1.2.0
  Downloaded quickcheck v0.9.0
  Downloaded rand v0.7.2
  Downloaded either v1.5.3
  Downloaded libc v0.2.64
  Downloaded crossbeam-channel v0.3.9
  Downloaded bitflags v1.2.1
  Downloaded arrayvec v0.4.12
  Downloaded quickcheck_macros v0.8.0
  Downloaded ryu v1.0.2
  Downloaded env_logger v0.6.2
  Downloaded nodrop v0.1.14
  Downloaded regex v1.3.1
  Downloaded regex-syntax v0.6.12
  Downloaded aho-corasick v0.7.6
   Compiling semver-parser v0.7.0
   Compiling libc v0.2.64
   Compiling arrayvec v0.4.12
   Compiling getrandom v0.1.12
   Compiling winapi v0.3.8
   Compiling nodrop v0.1.14
   Compiling lazy_static v1.4.0
   Compiling byteorder v1.3.2
   Compiling proc-macro2 v1.0.5
   Compiling cfg-if v0.1.10
   Compiling memchr v2.2.1
   Compiling serde v1.0.101
   Compiling scopeguard v1.0.0
   Compiling ryu v1.0.2
   Compiling proc-macro2 v0.4.30
   Compiling unicode-xid v0.2.0
   Compiling bitflags v1.2.1
   Compiling log v0.4.8
   Compiling unicode-xid v0.1.0
   Compiling ppv-lite86 v0.2.5
   Compiling syn v1.0.5
   Compiling autocfg v0.1.6
   Compiling build_const v0.2.1
   Compiling rayon-core v1.6.0
   Compiling unicode-width v0.1.6
   Compiling syn v0.15.44
   Compiling itoa v0.4.4
   Compiling regex-syntax v0.6.12
   Compiling either v1.5.3
   Compiling cast v0.2.2
   Compiling thread_local v0.3.6
   Compiling crossbeam-utils v0.6.6
   Compiling semver v0.9.0
   Compiling textwrap v0.11.0
   Compiling crc v1.8.1
   Compiling itertools v0.8.0
   Compiling c2-chacha v0.2.2
   Compiling num-traits v0.2.8
   Compiling bincode v1.2.0
   Compiling num_cpus v1.10.1
   Compiling rand_core v0.5.1
   Compiling crossbeam-queue v0.1.2
   Compiling crossbeam-channel v0.3.9
   Compiling regex-automata v0.1.8
   Compiling rustc_version v0.2.3
   Compiling criterion-plot v0.4.0
   Compiling clap v2.33.0
   Compiling aho-corasick v0.7.6
   Compiling csv-core v0.1.6
   Compiling rand_chacha v0.2.1
   Compiling rand_os v0.2.2
   Compiling rand_pcg v0.2.0
   Compiling rand_xoshiro v0.3.1
   Compiling memoffset v0.5.1
   Compiling quote v1.0.2
   Compiling winapi-util v0.1.2
   Compiling atty v0.2.13
   Compiling rand v0.7.2
   Compiling quote v0.6.13
   Compiling same-file v1.0.5
   Compiling crossbeam-epoch v0.7.2
   Compiling walkdir v2.2.9
   Compiling bstr v0.2.8
   Compiling serde_json v1.0.41
   Compiling laminar v0.3.2 (C:\Users\Mooma\Local\laminar)
   Compiling crossbeam-deque v0.7.1
   Compiling csv v1.1.1
   Compiling regex v1.3.1
   Compiling rayon v1.2.0
   Compiling tinytemplate v1.0.2
   Compiling serde_derive v1.0.101
   Compiling env_logger v0.6.2
   Compiling quickcheck v0.9.0
   Compiling quickcheck_macros v0.8.0
   Compiling criterion v0.3.0
error[E0432]: unresolved imports `laminar::DeliveryMethod`, `laminar::ProtocolVersion`, `laminar::VirtualConnection`
 --> benches\packet_processing.rs:6:23
  |
6 | use laminar::{Config, DeliveryMethod, ProtocolVersion, VirtualConnection};
  |                       ^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^ no `VirtualConnection` in the root
  |                       |               |
  |                       |               no `ProtocolVersion` in the root
  |                       |               help: a similar name exists in the module: `protocol_version`
  |                       no `DeliveryMethod` in the root

warning: unused import: `ReadBytesExt`
 --> benches\packet_processing.rs:3:28
  |
3 | use byteorder::{BigEndian, ReadBytesExt, WriteBytesExt};
  |                            ^^^^^^^^^^^^
  |
  = note: #[warn(unused_imports)] on by default

error: aborting due to previous error

For more information about this error, try `rustc --explain E0432`.
error: Could not compile `laminar`.
warning: build failed, waiting for other jobs to finish...
error: build failed
```

```
~/Local/laminar (master) $ rustup show
Default host: x86_64-pc-windows-gnu

installed toolchains
--------------------

stable-x86_64-pc-windows-msvc (default)
nightly-x86_64-pc-windows-msvc

active toolchain
----------------

stable-x86_64-pc-windows-msvc (default)
rustc 1.36.0 (a53f9df32 2019-07-03)

```
Simple as that.
[`SendError`](https://docs.rs/crossbeam-channel/0.1.2/crossbeam_channel/struct.SendError.html) can never happen within laminar, because of crossbeam's `Sender` and `Receiver` always exists together.
> ... can **only** fail if the receiving end of a channel is disconnected ...

Breaking changes in API:
* Changed "pub fn send(&mut self, packet: Packet)~~->Result<()>~~" in `Socket`.
* Removed `SendError` from `ErrorKind`.

Add `cargo udeps` to Jenkins

# Task Description
Currently, we haven't really validated the guaranteed reliabity yet. We do have unit tests but it would be nice to see an integration test that uploads a 10..50MB file to another endpoint where after it validates the transferred file. 

We already have a test environment set up in `/bin` which can be used for this purpose.

# Task TODO
- [ ] Add file transfer test [here](https://github.com/amethyst/laminar/blob/master/src/bin/laminar-tester.rs#L152)
- [ ] Create similar function as [this one](https://github.com/amethyst/laminar/blob/master/src/bin/laminar-tester.rs#L165)
- [ ] Make sure the file get's validated on the [server](https://github.com/amethyst/laminar/blob/master/src/bin/laminar-tester.rs#L123)