## Example code:
```
Class A
    include Contracts::Core
    include Contracts::Builtin

   Contract Integer, Integer => String
   def self.hello
      return "Hello world!"
   end
end

puts A.hello
```
## Actual behavior
No errors are raised

## Expected behavior
I would expect this would an error, because the contract specifies `hello` takes two integers as arguments, and it is being passed none. I understand that this could be considered fine, as the code would work fine (without type errors) without the contract, but that is no different from any other incorrectly specified contract. 

Fixes #275 
`1 - 1` is not a positive natural number
When running `ruby -w -e 'require "contracts"; class Foo; include Contracts; end'` or `ruby -w -e 'require "contracts"; class Foo; include Contracts::Core; end'`

I get this warnings
```
/home/tiago/.gem/ruby/2.4.3/gems/contracts-0.16.0/lib/contracts/core.rb:21: warning: method redefined; discarding old functype
/home/tiago/.gem/ruby/2.4.3/gems/contracts-0.16.0/lib/contracts/core.rb:47: warning: previous definition of functype was here
```
The KeywordArgs contract appears to have two deficiencies:

1) A missing arg with a `Maybe[]` contract is valid despite not being declared optional

```
[9] development (main)> kk = Contracts::KeywordArgs[a: Contracts::Maybe[String]]
[10] development (main)> kk.valid?({})
=> true
```

In practice, this is often not an issue because the function definition would be like

```
Contract Contracts::KeywordArgs[a: Contracts::Maybe[String]]
def foo(a: )
end
```

and Ruby would enforce the presence of `a`.

However this would break in the more esoteric case of 

```
Contract Contracts::KeywordArgs[a: Contracts::Maybe[String]]
def foo(**kwargs)
end
```

2) Default values for optional args are not validated by Contracts

```
[6] development (main)> module Foo
[6] development (main)*   Contract KeywordArgs[a: Optional[String]] => Any
[6] development (main)*   def self.foo(a: 2)
[6] development (main)*   end
[6] development (main)* end

[7] development (main)> Foo.foo
=> nil
```

Hacking in a fix for Issue #279 (Method 'validate_decorators!' raises NameError) causes (in my app) that same method to raise RuntimeError with a message (see below) claiming that there are multiple contracts on method 'psych_yaml_as', which is in <ruby>/lib/ruby/2.2.0/psych/core_ext.rb.

I don't know what to make of this.  I'm not optimistic about crafting a simple example that shows the error, but hope that the trace (see below) will be a clue for some guru.

--- begin message --
c:/Ruby22/lib/ruby/gems/2.2.0/gems/contracts-0.16.0/lib/contracts/method_handler
.rb:159:in `validate_decorators!':  (RuntimeError)
Oops, it looks like method 'psych_yaml_as' has multiple contracts:
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
Symbol
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>
#<Contracts::Builtin::Or:0x1e45dc8 @vals=[Symbol, Array]>

Did you accidentally put more than one contract on a single function, like so?

Contract String => String
Contract Num => String
def foo x
end

If you did NOT, then you have probably discovered a bug in this library.
Please file it along with the relevant code at:
https://github.com/egonSchiele/contracts.ruby/issues

--- end message---

--- begin trace ---
        from c:/Ruby22/lib/ruby/gems/2.2.0/gems/contracts-0.16.0/lib/contracts/m
ethod_handler.rb:31:in `handle'
        from c:/Ruby22/lib/ruby/gems/2.2.0/gems/contracts-0.16.0/lib/contracts/d
ecorators.rb:13:in `method_added'
        from c:/Ruby22/lib/ruby/2.2.0/psych/core_ext.rb:21:in `<class:Module>'
        from c:/Ruby22/lib/ruby/2.2.0/psych/core_ext.rb:20:in `<top (required)>'

        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/psych.rb:11:in `<top (required)>'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/yaml.rb:5:in `<top (required)>'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/gems/2.2.0/gems/watir-6.10.0/lib/watir/cookies.r
b:1:in `<top (required)>'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in
`require'
        from c:/Ruby22/lib/ruby/gems/2.2.0/gems/watir-6.10.0/lib/watir.rb:14:in
`<top (required)>'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in
 `require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:128:in
 `rescue in require'
        from c:/Ruby22/lib/ruby/2.2.0/rubygems/core_ext/kernel_require.rb:39:in
`require'
        from c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/ui/ui_c
lient.rb:1:in `<top (required)>'
        from c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/base_cl
asses/base_class_for_test.rb:5:in `require_relative'
        from c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/base_cl
asses/base_class_for_test.rb:5:in `<top (required)>'
        from c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/tester_
tour/tests/meet_test.rb:1:in `require_relative'
        from c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/tester_
tour/tests/meet_test.rb:1:in `<main>'
rake aborted!
Errno::ENOENT: No such file or directory @ rb_sysopen - C:/Users/Burdette/AppDat
a/Roaming/RubyTest/logs/github_api/2017.12.13-Wed-14.47.46/test_meet.xml
c:/Users/Burdette/Documents/GitHub/RubyTest/lib/log/log.rb:385:in `initialize'
c:/Users/Burdette/Documents/GitHub/RubyTest/lib/log/log.rb:385:in `open'
c:/Users/Burdette/Documents/GitHub/RubyTest/lib/log/log.rb:385:in `get_counts_fr
om_file'
c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/Rakefile:190:in `blo
ck (3 levels) in <top (required)>'
c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/Rakefile:174:in `eac
h'
c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/Rakefile:174:in `blo
ck (2 levels) in <top (required)>'
c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/Rakefile:171:in `eac
h_pair'
c:/Users/Burdette/Documents/GitHub/RubyTest/examples/github/Rakefile:171:in `blo
ck in <top (required)>'
--- end trace ---
Since #242 (Func contract's return value isn't enforced with blocks) was fixed in contracts-0.15, given blocks are being put into a lambda. So the forwarded block isn't 100% identical with the original one. Especially it's `arity` and it's `source_location` changed.

Please keep as many properties as possible of the original block, especially the arity.

Or find a way to forward the original block without breaking #242 again. So the original block could be kept. I'd really appreciate any ideas for this, because it might be the cleanest solution!

&nbsp;

---

&nbsp;

Commit for #242, introducing this bug: https://github.com/egonSchiele/contracts.ruby/commit/13e56bdf859a54c569d1a7fe4680251880c6d089#diff-a45dd775c2769b9ab16a23f9d4560adc
`lib/contracts/call_with.rb`
```
@@ -73,7 +75,8 @@ module Contracts
                  method.call(*args, &blk)
                else
                  # original method name referrence
-                 method.send_to(this, *args, &blk)
+                 added_block = blk ? lambda { |*params| blk.call(*params) } : nil
+                 method.send_to(this, *args, &added_block)
                end
 
       unless @ret_validator[result]
```

&nbsp;

---

&nbsp;

I especially need the arity to stay unchanged. Some examples about arity:
```
def a(&b)
  puts b.arity
end

a {|x| puts x}
=> 1

a {|x,y| puts x+y}
=> 2

a {puts ''}
=> 0

a {|*x| puts x}                                                                                                   
=> -1                                                                                                                                   
```

&nbsp;

A very "simple" way how to keep the arity is using eval (see below). But I hope we find a better way.
```
--- a/lib/contracts/call_with.rb
+++ b/lib/contracts/call_with.rb
@@ -81,7 +81,15 @@ module Contracts
                  method.call(*args, &blk)
                else
                  # original method name reference
-                 added_block = blk ? lambda { |*params| blk.call(*params) } : nil
+                 added_block = nil
+                 if blk
+                    params_ary = []
+                    for i in 1..blk.arity
+                      params_ary << 'x_'+i.to_s
+                    end
+                    params_str = params_ary.join(',')
+                    added_block = eval('lambda { |'+params_str+'| blk.call('+params_str+') }')
+                 end
                  method.send_to(this, *args, &added_block)
                end
```
When debugging code, I need to go trough all the Contracts code when stepping into a method guarded by a Contract.

Example:
```
# ruby -rdebug /home/user/mycode/app.rb
[...]
/home/user/mycode/app.rb:2:method_a()
(rdb:1) step
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_handler.rb:111:        engine = current_engine.nearest_decorated_ancestor
```

----

Is there any way to hide the Contracts code when stepping into a method?

Maybe something about breakpoints!?

Or maybe there could be a global (not environment) variable to disable contracts, which can be manually set before stepping into a method. E.g.:
```
(rdb:1) $no_contracts = true
true
(rdb:1) step
/home/user/mycode/app.rb:23:  puts 'Entering method_a'
(rdb:1) $no_contracts = false
false
```
Simply doing `ENV['NO_CONTRACTS'] = '1'` doesn't work. Looks like that variable is only evaluated at start, when Ruby goes through `Contract ... def method_a ...`.

----

Same problem for the byebug debugger. (https://github.com/deivid-rodriguez/byebug)

I know I could set a breakpoint, but it's not always clear where a method call goes (think of polymorphism) And I know I can use the NO_CONTRACTS environment variable. But sadly that's not always a practical solution.

Maybe related: #276
In general I'm very happy with Contracts and I don't want to miss it anymore. Nevertheless, there's one annoying problem. With Contracts in use backtraces (stacktraces) become quite messed up.

I know I can use the NO_CONTRACTS environment variable. But that's not always a practical solution, because I need to restart the application and reproduce whatever took me to the backtrace.

----

Example 1: Backtrace from Contract violation
```
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts.rb:49:in `block in <class:Contract>'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts.rb:155:in `call'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts.rb:155:in `failure_callback'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_handler.rb:143:in `rescue in block in redefine_method'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_handler.rb:136:in `block in redefine_method'
/home/user/mycode/app.rb:42:in `some_method_b'
[...]
```

----

Example 2: An exception in a method guided by a Contract
```
/home/user/mycode/app.rb:23:in `raise'
/home/user/mycode/app.rb:23:in `some_method_a'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_reference.rb:43:in `send_to'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/call_with.rb:79:in `call_with'
/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_handler.rb:138:in `block in redefine_method'
/home/user/mycode/app.rb:42:in `some_method_b'
[...]
```

----

Could you please look for a way to clean the backtrace from all lines with internal Contracts code?
E.g.: ``/usr/lib64/ruby/gems/2.1.0/gems/contracts-0.16.0/lib/contracts/method_handler.rb:138:in *`block in redefine_method'``

If that's possible, an global option to enable/disable that backtrace cleaning would be wonderful.
PR #256 dropped support for Ruby 1.8. However, this is not enforced in the gemspec. This means contracts 0.16.0 will install fine on 1.8, only to fail at runtime. Please consider setting `required_ruby_version` in the gemspec.