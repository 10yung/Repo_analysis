I found by guessing that something like

```
exclude:
  - "vendor/**/*.scss"
  - "node_modules/**/*.scss"
```

works nicely for allowing multiple exclude globs, but AFAICS this is not documented.
Hi,

I wrote this small script to generate a config where the existing offending files are excluded for each linter instead of disabling the whole linter for the project.

Maybe the config reporter should do something like it?

```ruby
output = %x[scss-lint]
todo_config = {
  "linters" => {}
}

output.scan(/^(.+):(\d+):(\d+) \[(.)\] (.+?): (.+)$/) do |match|
  file_path, line, column, offence_type, linter_name, description = match

  todo_config.fetch("linters")[linter_name] ||= {"exclude" => []}

  unless todo_config.fetch("linters").fetch(linter_name).fetch("exclude").include?(file_path)
    todo_config.fetch("linters").fetch(linter_name).fetch("exclude") << file_path
  end
end

puts todo_config.to_yaml
```
Similar to #214, 4- and 8-digit hex codes are a W3C standard (meaning `#RGBA` and `#RRGGBBAA`, respectively). The linter should allow these, perhaps with an optional toggle flag.

Further reading: [W3C](https://drafts.csswg.org/css-color/#hex-notation) | [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#RGB_colors)
Hi, I looked through all the feature request (open and closed) and did not see the issue being asked. 

The Feature Request is so Scss will look through all the files to see if the class name or HTML selector has been called before in at least one different SCSS file and if so it will throw a warning/error in the terminal to inform the user the name has been used so they might need to merge them/check it so they can check it and do the appropriate response of either editing/removing or refactoring the SCSS or simply adding a disable and reenable. It would help track down SCSS bugs and help make sure to make reusable SCSS that will help keep code clean and modular.

.scss-lint.yml (Using version 0.5.0)
```yml
PseudoElement:
    enabled: true
```

Error Message: `PseudoElement: Begin pseudo classes with a single colon: ':'`

Code:
```scss
&::placeholder {
    color: blue;
}
```

[MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder) says: The placeholder property is written with two colons.
I have replicated a bug I saw in my own project in the test suite: https://github.com/brigade/scss-lint/compare/master...jlw:defect/block-disable

In my project, I added a re-enabling control comment after to pass the linter, but that shouldn't be necessary.

My uneducated guess is that this is actually a parsing error rather than a bug in the control comment logic, but I'm not familiar enough with the `scss-lint` internals to go further at this time.
I'm using CSS Modules with SCSS (via https://gatsbyjs.org). I'm using the CSS Modules `:export` feature to send my SCSS variables to Javascript:

```css
:export {
    headerHeight: $header-height;
}
```
When I do this, I get a scss-lint error "Unknown property: 'headerHeight'". 

I'd like the ability with scss-lint to use arbitrary property names within an `:export` block (possibly behind a rule toggle). 
Hi! While I love SpaceAroundOperator for equations, I wouldn't want them applied to my font shorthand rules, but they seem to be:

SpaceAroundOperator: `1.9rem/1.5` should be written with a single space on each side of the operator: `1.9rem / 1.5`

![image](https://user-images.githubusercontent.com/69822/42960542-1c63c108-8b5a-11e8-878c-f8bd4003257f.png)

In the documentation, it does not seem that this should be occuring

> Note that this linter only applies to actual, evaluated operators. So values like nth-child(2n+1), 10px/12px, and my-font will not be linted, as they are valid CSS.

my scss-lint.yml is set to:

```
SpaceAroundOperator:
    enabled: true
    style: one_space # or 'at_least_one_space', or 'no_space'
```
Question
I used to have a setting that enforced to have a separate file for variables. So, I had to @import these variables in order to have no errors after linting.  But, unfortunately, I lost this setting.
Does anyone know this rule?

This is a snippet of main.scss file
When using my old setting, this would throw an error. Just because I am using a variable in line 4 that I have just defined in the same "main.scss" file, in line 1.

 1 $bg-color: rgb(239, 239, 245);
 2
 3 body {
 4 background-color: $bg-color;
 5 }
With a rule that includes an intersection [selector](https://css-tricks.com/multiple-class-id-selectors/), like

```
.has-image {
    .share-buttons-top {
        .share-button.google {
            // ...
       }
    }
}
```

The `NestingDepth` linter complains 

```
Nesting should be no greater than 3, but was 4
```

In my opinion this is incorrect - there are three levels of nesting in this rule, not four. The linter is counting one node as two.

