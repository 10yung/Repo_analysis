Hey,
has anyone tried KIF with SwiftUI? I did some quick experiments and it doesn't seem to work. I will have more time for digging into this later. Just wanted to know if someone has already tried that.
Thanks.
Hi there,

I'm still experimenting with KIF to test a view controller, but I'm stuck because I can't get the tap simulation to work.

```swift
tester().waitForView(withAccessibilityIdentifier: "help_cell") // This is OK
tester().tapView(withAccessibilityIdentifier: "help_cell") // This is not working
```

Upon investigation to the framework's code, I found out that the reason `tapView` is not working is because the private selector `_touchesEvent` in `UIApplication` returns nil, therefore we got a nil `UIEvent` passed to `UIApplication`'s `sendEvent`.

<img width="823" alt="Screen Shot 2019-12-19 at 17 59 13" src="https://user-images.githubusercontent.com/16622452/71168775-0997dc80-228a-11ea-8804-b06c921c61dd.png">

My questions:
1. What is `UIApplication`'s `_touchesEvent`, and why it returns nil in my test case?
2. Any suggestions on how to fix that?

Thanks!

We have an issue where we have a ScrollView that is being scrolled in the background behind a modal. This is causing issues because hitting the bottom of the scrollview causes some network requests to get kicked off and the UI's backing data model gets refreshed. We'd prefer to be able to avoid this scrolling in this case. Some possible overlapping paths to mitigating this:

1. Don't scroll scrollviews that aren't `isProbablyTappable` (e.g. they're covered by a modal)
2. Add an opt-out method to the `viewTester` for auto-scroll behavior when trying when finding matches (similar to how `validateEnteredText:` modifies the behavior of actor text typing)
3. Add an opt-out/in for allowing the tableview/collectionview matcher auto-scrolling behavior to scroll the last row (or few rows?) into view, preventing batched fetches on hitting the end of the view.
4. Some annotation on views (maybe via `accessibilityTrait` or `accessibilityIdentifier`) in the app to indicate that they're paginated results controller and may fetch more results at the end. This could be used to alter default behavior in approach 3.

The first approach is more likely to break some tests and have collateral damage because it alters the matching behavior always. That said, it does seem like generally reasonable behavior. 

The second approach is a bit safer, because it is opt-in, but it isn't nearly as nice of a developer friendly API. It is weird to need to think about this when writing a test, and seems like it should be able to be handled automatically. That said, I'm sure that some apps are more reliant on paginated scroll on hitting the bottom of the list and KIF probably triggers that quite a bit. The first approach still doesn't help in the case where the scrollview is tappable on the screen. Something like this would probably help in the case called out in issue #1123 (CC: @ElyasNaranjeeSani).

For the third approach, it seems generally safe to do, but like approach 2 it isn't the most intuitive thing to need to think about when writing a test. There is some risk also that different apps have different behaviors of when they decide to prefetch data, might need to be configurable (e.g. last N rows). Changing the default behavior to not scroll to the bottom would likely break a bunch of tests. However, combined with something like approach 4, it'd probably cause less breakage.

For the fourth approach, I'm concerned about the contract being too informal (esp. if relying on the identifier or something like that). I don't see any clearly correct accessibility traits that make sense to key off of. Maybe there is a better variant I'm not thinking of...
_UIModernBarButton's  userInteractionEnabled property has a default value NO, this can be fixed by append a class type for `- (void)isNavigationItemView;`
I can't seem to find any documentation about such a feature... am I missing something?
I wanted to add KIF in my project with a new package manager in Xcode 11 Swift Package but that error is encountered  **https://github.com/kif-framework/KIF has no Package.swift manifest for version 3.7.8** :/. what i should do?

Within an XCTest target, I'm trying to create wrappers to move our app into the background and foreground using XCUIDevice to click on the home button and XCUIApplication to move it to the foreground within our Kif tests.

The code is simple.  To move the app to the background, I'm using this
XCUIDevice.shared.press(XCUIDevice.Button.home)

And to move it to the foreground, I'm using this.
XCUIApplication().activate() 

Yet, XCUIApplication().activate() causes an NSInternalInconsistancyException, "No target application path specified via test configuration".  

Am I simply doing this wrong or is XCUIApplication not compatible with KIF tests?

Thanks.

caught "NSInternalInconsistencyException", "App called -statusBar or -statusBarWindow on UIApplication: this code must be changed as there's no longer a status bar or status bar window. Use the statusBarManager object on the window scene instead."
(
	0   CoreFoundation                      0x00007fff23b98bde __exceptionPreprocess + 350
	1   libobjc.A.dylib                     0x00007fff503b5b20 objc_exception_throw + 48
	2   CoreFoundation                      0x00007fff23b98958 +[NSException raise:format:arguments:] + 88
	3   Foundation                          0x00007fff255eb6f5 -[NSAssertionHandler handleFailureInMethod:object:file:lineNumber:description:] + 191
	4   UIKitCore                           0x00007fff47163f36 -[UIApplication _createStatusBarWithRequestedStyle:orientation:hidden:] + 255
	5   UIKitCore                           0x00007fff47164407 -[UIApplication statusBarWindow] + 24
	6   GreenLight                          0x000000011f5eaa1c -[KIFUITestActor tapStatusBar] + 108
	7   GreenLight                          0x000000011f16db64 -[WBKifHomeTimeLineSub1Tests testFeedRepostToComposer_400216] + 1588
	8   CoreFoundation                      0x00007fff23b9f95c __invoking___ + 140
	9   CoreFoundation                      0x00007fff23b9cd8f -[NSInvocation invoke] + 287
	10  XCTest                              0x000000011edbd121 __24-[XCTestCase invokeTest]_block_invoke.208 + 78
	11  XCTest                              0x000000011ee171e2 -[XCTestCase(Failures) performFailableBlock:testCaseRun:shouldInterruptTest:] + 57
	12  XCTest                              0x000000011ee17100 -[XCTestCase(Failures) _performTurningExceptionsIntoFailuresInterruptAfterHandling:block:] + 96
	13  XCTest                              0x000000011edbcc0a __24-[XCTestCase invokeTest]_block_invoke + 1153
	14  XCTest                              0x000000011edbc6e2 -[XCTestCase testContextPerformInScope:] + 211
	15  XCTest                              0x000000011edbc77c -[XCTestCase invokeTest] + 137
	16  XCTest                              0x000000011edbe4ed __26-[XCTestCase performTest:]_block_invoke_2 + 43
	17  XCTest                              0x000000011ee171e2 -[XCTestCase(Failures) performFailableBlock:testCaseRun:shouldInterruptTest:] + 57
	18  XCTest                              0x000000011ee17100 -[XCTestCase(Failures) _performTurningExceptionsIntoFailuresInterruptAfterHandling:block:] + 96
	19  XCTest                              0x000000011edbe404 __26-[XCTestCase performTest:]_block_invoke.334 + 88
	20  XCTest                              0x000000011ee2a492 +[XCTContext runInContextForTestCase:block:] + 219
	21  XCTest                              0x000000011edbdb73 -[XCTestCase performTest:] + 668
	22  XCTest                              0x000000011ee03077 -[XCTest runTest] + 57
	23  XCTest                              0x000000011edb814a __27-[XCTestSuite performTest:]_block_invoke + 365
	24  XCTest                              0x000000011edb7874 -[XCTestSuite _performProtectedSectionForTest:testSection:] + 54
	25  XCTest                              0x000000011edb7b71 -[XCTestSuite performTest:] + 355
	26  XCTest                              0x000000011ee03077 -[XCTest runTest] + 57
	27  XCTest                              0x000000011edb814a __27-[XCTestSuite performTest:]_block_invoke + 365
	28  XCTest                              0x000000011edb7874 -[XCTestSuite _performProtectedSectionForTest:testSection:] + 54
	29  XCTest                              0x000000011edb7b71 -[XCTestSuite performTest:] + 355
	30  XCTest                              0x000000011ee03077 -[XCTest runTest] + 57
	31  XCTest                              0x000000011edb814a __27-[XCTestSuite performTest:]_block_invoke + 365
	32  XCTest                              0x000000011edb7874 -[XCTestSuite _performProtectedSectionForTest:testSection:] + 54
	33  XCTest                              0x000000011edb7b71 -[XCTestSuite performTest:] + 355
	34  XCTest                              0x000000011ee03077 -[XCTest runTest] + 57
	35  XCTest                              0x000000011ee3943e __44-[XCTTestRunSession runTestsAndReturnError:]_block_invoke + 171
	36  XCTest                              0x000000011ee39541 __44-[XCTTestRunSession runTestsAndReturnError:]_block_invoke.84 + 118
	37  XCTest                              0x000000011edd1e83 -[XCTestObservationCenter _observeTestExecutionForBlock:] + 588
	38  XCTest                              0x000000011ee391fd -[XCTTestRunSession runTestsAndReturnError:] + 623
	39  XCTest                              0x000000011ed9b6d7 -[XCTestDriver runTestsAndReturnError:] + 456
	40  XCTest                              0x000000011ee266e4 _XCTestMain + 2484
	41  libXCTestBundleInject.dylib         0x000000011ce11be7 __copy_helper_block_e8_32s + 0
	42  CoreFoundation                      0x00007fff23afb8ec __CFRUNLOOP_IS_CALLING_OUT_TO_A_BLOCK__ + 12
	43  CoreFoundation                      0x00007fff23afb058 __CFRunLoopDoBlocks + 312
	44  CoreFoundation                      0x00007fff23af5ee4 __CFRunLoopRun + 1284
	45  CoreFoundation                      0x00007fff23af56b6 CFRunLoopRunSpecific + 438
	46  GraphicsServices                    0x00007fff3815cbb0 GSEventRunModal + 65
	47  UIKitCore                           0x00007fff47162a67 UIApplicationMain + 1621
	48  Weibo                               0x000000010c8c28e1 main + 65
	49  libdyld.dylib                       0x00007fff5123bcf5 start + 1
	50  ???                                 0x0000000000000007 0x0 + 7
)

ps: use Xcode11(11A420a)
This PR fix issue #1119 

I just changed UIWebView by WKWebview because first one is deprecated in iOS 12 and each time to upload binary to Apple you receive a warning.


Just submitted my app to TestFlight and got an email with the error:

ITMS-90809: Deprecated API Usage - Apple will stop accepting submissions of apps that use UIWebView APIs . See https://developer.apple.com/documentation/uikit/uiwebview for more information.

I was wondering if all the code related to UIWebView will have to be removed and only keep WKWebView.

It was just a warning, the build ended up being available on TestFlight, but I think this is something that will have to be addressed at some point.