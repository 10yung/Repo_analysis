The scheduler in charge should be the "leader", and the api should reflect this name change. 

Hi, just considering using node-resque combined with sidekiq. I am having some problems with the integration, so I am leaving my feedback here:

- Workers started from node-resque do not show in Sidekiq web. Sidekiq when starting new workers add the name of the worker to the set _processes_, node-resque doesn't seem like it does. https://github.com/mperham/sidekiq/blob/4deadba37200bf7812109a2d6de2371727b2ee3f/lib/sidekiq/launcher.rb#L133
- Adding new jobs from node-resque to Sidekiq works fine.
- Stats shown in Sidekiq Web are correctly updated, both failed and processed jobs.
- Scheduled jobs from node-resque are not shown in Sidekiq web (Scheduled tab). 
- Scheduled jobs from node-resque requires a worker from node-resque. I add a scheduled job from node-resque using `enqueueIn`, scheduler is also run in this same process. Sidekiq worker is started and ready to run jobs all the time. After the delay time, nothing happens. To be able to run this job, a worker from node-request must be started.

Please, it would be highly appreciated to document all these caveats (and some others that may exist) in the README for future developers. I don't think that with current features, and caveats between sidekiq and node-resque should be stated that node-resque is API compatible with Sidekiq because it does not.

Node version: 12.2.0
Ruby version: 2.5.0
Sidekiq Version: 6.0.3. I also checked older versions just in case some fully works.
Node-resque version: 6.0.6
This project needs a logo!  
The issue is a part of #284 which appears when we try to enqueue jobs with a difference of less than 1 second at a very high-rate. The exact issue happens since the enqueue methods convert the millisecond timestamp into seconds, thereby rounding off a large portion of the timestamp, which then means that conflicts appear if a similar job is scheduled before the first one is picked up by a worker.
I do not all the intricacies of JS but the following line seems weird to me

https://github.com/taskrabbit/node-resque/blob/1a2def9f46f9be5a80a5dd8630b89d23aff2ca53/lib/pluginRunner.js#L24

Is there a reason why the plugin is instantiated to just get name?
New-ing a custom plugin to just get its name breaks error sanity checks in my plugin's constructor to make sure required options are not null.

Are there any problems with it being 
`pluginName = PluginRefrence.name`

If so, I can create a pull request.
I would like to know if it is possible to create a job as a class. For instance, would something like this be possible?

```js
class SendNotificationMails extends someBaseJobClass {
  constructor() {
    this.attach("notification-mails", /*... other settings */)
  }
  async run() {
    // Execute job...
  }
}
```

It would make organizing a lot of background jobs much easier to write everything in classes and just have them register at an initial script.