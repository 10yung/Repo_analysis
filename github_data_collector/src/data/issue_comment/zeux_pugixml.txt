Hi,

First thanks for your great work.
I met a problem that pugixml does not support data format like below
<Data x=0.172109 y=0.392026 z=9.504243/>
It seems like some single quote or double quotes must be added.
I have some xml created by TinyXML and wrote in the format as above without quotes and I want to change to pugi as my tool to process XML files.
What is you suggestion to deal with these cases?

Best
Yanming
The <xml_memory_pool> interface is a simplified version of the C++17's std::pmr::memory_resource. Allows construction of pugi::xml_document/pugi::xpath_query objects using preallocated memory buffers. Two specific memory pools are provided:
1) xml_monotonic_memory_pool - similar to std::pmr::monotonic_memory_resource;
2) memory_resource_adapter<T> - wrapper for classes which implement interface similar to std::pmr::memory_resource;

Some limitations:
1) <xml_memory_pool> cannot be used with all xpath-related classes due to binary incompatibility, only <xpath_query> is supported;
2) <xpath_query> swaps memory pools in move assignment operator since functionality to clone internal structures is missing;
Static analyser of Xcode (version 11.2.1) reports potential null pointer dereference in `node_copy_tree()` function:

<img width="1169" alt="Screenshot 2019-12-03 at 11 00 13" src="https://user-images.githubusercontent.com/1630974/70040833-70e03c00-15bc-11ea-8f4d-e518c3b6a556.png">

One thing that disturbs me when working with pugi is, that the lib is based upon an *internal* string encoding, that is either UTF-8 (for ``char``) or UTF-16/32 (for ``wchar``). As the rest of the C++ world still haven't agreed upon a standard encoding for Strings (also there is no datatype for that yet!), one has to work often with applications that rely on **other** encodings internally than that. So in order to work with pugi, one has always to convert between the used encoding of once program and the chosen UTF-* encoding used by pugi for string data.

It would be great, if those conversion functions would be part of the public API in order to make it easier to do those stuff! (They must be existent, but I haven't understood / found the location in the source where those conversions happen).

I would think of something like that:

    // decode a source string into UTF-* (based upon ``PUGIXML_WCHAR_MODE``)
    std::string decode(const std::string &value, xml_encoding encoding);

    // encode a pugi internal string from UTF-* into the chosen destination encoding
    std::string encode(const std::string &value, xml_encoding encoding);

That would be imho a big improvement!
Assuming node visitor interface is a good idea (is it? not 100% clear), there are several problems with existing xml_tree_walker:
1. ::begin/::end are pretty pointless - could be called from external code
2. No way to get callbacks before/after the subtree - this is what begin/end could have been. This was mentioned (if memory serves) in https://code.google.com/p/pugixml/issues/detail?id=219 but this link is now dead.
3. No way to skip a subtree. This is mentioned in issue #77.

While manually implementing a recursive traversal is pretty trivial, all traversals that pugixml implements are stackless (which is not as simple/concise to write yourself), so there seems to be some value in a generic traversal. There are still several implementation options though:
1. Interface with virtual functions. This will have to be a new interface to maintain binary compatibility - xml_tree_visitor or something like that.
2. Pseudo-interface with templated member functions. This can be faster, although in a non-LTO build it's a weird tradeoff - templated implementations can't inline node structure accessors, while an implementation based on virtual dispatch can't inline user code. With LTO or header-only mode the approach based on compile-time polymorphism should be faster though. This can be seen as an extension of xml_node::find_node.
3. Tree iterator with ability to descend into a subtree or skip it, so that the user code is in control of the flow.

These need to be evaluated for the performance and versatility in various scenarios. 1 and 2 are extensions of existring ::traverse() support while 3 is basically a separate idea.

Finally, there is - as it is - quite a few ways to traverse the nodes in pugixml. Ideally if we do need a new way it has to supplant the old one - that is, we should at the minimum deprecate existing ::traverse in favor of whatever the new interface is.

Hi and thanks for amazing library!

Do you plan to add std::string overloads for most setters/constructors? It makes code usage much more convenient.

- Narrow-char interface on Windows is useless because it automatically makes its users Unicode-broken.
- This would enable supporting Unicode seamlessly in portable code. 
- Would let us open XMLs referenced from another XML document, external databases or configuration files (all UTF-8), without platform dependent re-encoding logic.
- See how SQLite does it. I had never ever worried about Unicode with SQLite, because of this.

its still a huge difference if there is a attribute with valid or invalid content or complete absent of the attribute itself

```
xml_value<int> try_int()

usage 
xml_value<int> value = attribute("xyz").try_int();

value.exists() = true/false (const)
value.valid() = successfull converted (const)
int x = value // conversion operator (const&)
```

This issue was filed on Google Code: https://code.google.com/p/pugixml/issues/detail?id=237

There are concerns about using errno on some platforms; even on platforms that have MT-safe errno, parsing denormal numbers will set errno to ERANGE but keep the parsed output as far as I know.

Checking the end pointer can potentially be a breaking change if applications relied on parsing numbers like "1.2f".

This issue was filed on Google Code: https://code.google.com/p/pugixml/issues/detail?id=79

Sometimes the current offset information is hard to use and users are willing to sacrifice some additional performance/memory to translate offsets into lines.

Right now it can be done externally (http://stackoverflow.com/questions/21003471/convert-pugixmls-result-offset-to-column-line/21014028#21014028) but this does not work if encoding conversion has to be performed.
