
I have a schema generated by a hasura instance that is causing the rust compiler to panic.
```
thread 'rustc' has overflowed its stack
```
Schema and query causing the issue:
[rustc_panic.zip](https://github.com/graphql-rust/graphql-client/files/4044332/rustc_panic.zip)

I had some code working successfully with a previous schema, but I added some tables and now I'm getting a stack overflow.

I'm wondering if there's some recursive relationships in my schema that are causing issues, or just the size of the schema itself (hasura generates a *ton* of schema)... mine is currently 732kb of JSON
Hi,
I've got the following mutation:

```
mutation InsertTransaction ($amount: Int!, $creditor: uuid!, $debitor: uuid!, $product: uuid!, $note: String ) {
  insert_transactions(objects: {amount: $amount, credit_id: $creditor, debit_id: $debitor, product_id: $product, note: $note}) {
    affected_rows
  }
}
```
Furthermore I use the following code to generate my structs:
 ```
#[derive(GraphQLQuery)]
#[graphql(
    schema_path = "graphql/schema.graphql",
    query_path = "graphql/transaction.graphql",
)]
struct InsertTransaction;
```
If I send a request with a transaction to my server it answers with the following body:

```
"{\"data\":{\"insert_transactions\":{\"affected_rows\" : 1}}}"
```
but deserializing with serde leads to the following struct instance:

```
ResponseData {
    insert_transactions: None,
},
```
even as insert_transactions cleary is not `None`.

```
 #[derive(GraphQLQuery)]
  |          ^^^^^^^^^^^^
  |
  = help: message: unnamed operation
```
Project fails to compile with the error above.


here are my imports: 
```
use graphql_client::*;
use wasm_bindgen::prelude::*;
use web_sys::console;

#[derive(GraphQLQuery)]
#[graphql(
  query_path = "backend/users.graphql",
  schema_path = "backend/schema.json",
  response_derives = "Debug",
  deprecated = "warn"
)]
pub struct Users;
```

users.graphql: 
```
query {
  users {
    id
    email
  }
}
```
query.graphql:
```gql
query Q {
  a {
    ...BFragment
  }
}

fragment BFragment on TypeOne {
  b {
    ...AFragment
  }
}

fragment AFragment on TypeTwo {
  c
}
```
schema.graphql: 
```gql
type Query {
  a: [TypeOne]
}

type TypeOne {
  b: [TypeTwo]
}

type TypeTwo {
  c: Int!
}
```
during compiling: 
```rust
   Compiling graphql_client v0.8.0 (<local_storage>\graphql-client\graphql_client)
error[E0412]: cannot find type `AFragment` in this scope
 --> graphql_client\tests\fragment_complex_chain.rs:4:10
  |
4 | #[derive(GraphQLQuery)]
  |          ^^^^^^^^^^^^ help: a struct with a similar name exists: `BFragment`

error: aborting due to previous error
```

Is this my mistake? The actual query that i've tried works on server side but not library.
Maybe related to #286, The test on this issue was done on master branch(183489eb). and 0.8 shows same error.
See https://github.com/graphql-rust/graphql-client/pull/289

cc @mathstuf 
This is a placeholder/WIP issue to gather what we need before a 1.0 release. The library has settled down a lot in the recent months and I think we can commit to stability in the `GraphqlQuery` trait and the generated code soon, with a bit more work. Feedback and ideas on things we have to do before 1.0 is very much welcome.

## Features

- [ ] Cut down unnecessary prefixing
- [ ] Figure out whether the CLI should be considered 1.0 at the same time. I would be interested in feedback from people using it
- [ ] Migrate the `web` client to futures 0.3. We may want to switch it to an external library at the same time. My preference would be `surf`. Issue: https://github.com/graphql-rust/graphql-client/issues/272
- [ ] Improve the validation of the derive attributes
- [ ] Evaluate whether new features in the GraphQL spec (input unions...) would require breaking changes

## Bugs

- [x] https://github.com/graphql-rust/graphql-client/issues/286
- [ ] https://github.com/graphql-rust/graphql-client/issues/250

## Breaking changes

- Remove `graphql-client-web` (it is a feature of `graphql-client` now)
I think this comes down to there only being 3 tracks right now. It would be faster to do the WASM tests in a separate job pipeline. `cargo fmt`/`prettier` and `cargo clippy` can also be separate jobs as well (`cargo fmt` is fast since there's no download and `cargo clippy` is just doing `cargo check` under the hood). It also highlights their issues rather than putting them in the middle of the gigantic log. I see just `cargo install wasm-bindgen-cli` taking 450 s (almost 8 minutes). This could almost certainly be cached somehow. Caching the `target` directory may also be useful if some good way of fingerprinting the thing can be found.

I think the biggest problem is the `examples` directories starting everything from scratch again. I think it may be useful to fold them into the standard `examples/foo/bin.rs` pattern and add their oddball deps to `dev-dependencies` (with comments as to why they're there). Each one is taking 4+ minutes and there's only 3 right now.

Thoughts?
I'm generating the client code with the CLI tool.

The generated file for a query "GetData" will look something like this, with a custom scalar "URL":
```rust
pub struct GetData;

pub mod get_data {

    #[doc = "URL string"]
    type URL = super::URL;
[...]
```
I'm struggling to find a way of defining those custom scalars _outside_ of the generated file. Is there a way to do that?
Or will that only be possible after https://github.com/graphql-rust/graphql-client/issues/245 ?