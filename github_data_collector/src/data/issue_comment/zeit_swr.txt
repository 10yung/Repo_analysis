I use refreshInterval to implement the Interval polling. But I'd know how to cancel it when it's running

This attempts to resolve #212 

## Implementation Notes

I created a CacheInterface and make the global config create a default instance of the cache, also exported both the interface and the Cache class.

I also updated `useSWR` to read from the cache instance received through the context object.

I was not able, yet, to find a way to make `mutate` and `trigger` read from the correct cache instance, because they are global my only idea so far was to pass the cache instance as a third argument (probably optional), but that could make it hard to test components using a custom cache for tests and a default cache for the mutate call.

## Missing things
- `useSWRPages` is still using global cache (I haven't tried yet to use it here but I believe is the same as `mutate` and `trigger`)
- `mutate` is still using global cache
- `trigger` is still using global cache

Any feedback is welcomed!
as described, will add a demo asap
A bit of context, we introduced `swr` two weeks ago to our codebase. Everything is working fine, but we started to get some reports about some parts of the app being broken in slightly older browsers (Chrome 49, Firefox 59, Edge 18, etc…) 

We found out that `swr` was causing a syntax error in these browsers because webpack by default picked the ESM build (rightly so) but because it's not transpiled it ended in the bundle without going through our babel config. Which broken these older browsers. So I'd like to add a not in README file, about the ESM build & webpack, what do you think?
Using Graphql with SWR via the `graphql-request` library and it appears that I'm not getting updates when I call `mutate` with my mutated data. I've stored my graphql query as a constant and pass it both to `useSWR` and `mutate`, and I've validated the data structure I'm passing into `mutate`. Alternatively, mutating works as expected when I use REST API endpoints via traditional HTTP/fetch calls.

Is SWR/`mutate` capable of working with graphql strings as keys? Is that the issue?
For example, say I have two components, A and B. A uses `/messages?before=2020-01-12&after=2020-01-10`. B uses `/messages?starred=true`. Let's say the user stars a message with id `message-8` from 2020-01-11 in component B and we issue a POST to star the message. If we just called `mutate('/messages?starred=true', [...otherMessages, {...message, is_starred: true}])`, B would be up-to-date and show the starred message, but A wouldn't. 

Would you recommend keeping a mapping from object id to URLs that we could use to call mutate with all the URLs? In the example above, the map would be `{'message-8': ["/messages?before=2020-01-12&after=2020-01-10", "/messages?starred=true"]}`. Or is there something else that would be better?

And a big thank you for all your work on this awesome project!!!
Hi there,
we're currently using useSWR but we have found conditional revalidation a bit limiting.

For example we have some occurences where we want to trigger revalidation only after a certain action is being taken (could be a button click).
With current conditional revalidation techniques we are forced to use an additional state just to prevent first validation on mount.

This PR aims to add a simple autoLoad (or whatever other name) flag in the options so that automatic revalidation on mount can be prevented and we can simply trigger it directly in a callback (for example a button onClick).

Best,
Gabriele
From version `0.1.16` the `isValidating` flag doesn't seem to change anymore, it just stays at false, even when there is a request going on. Has the "API" of it changed after #186? Do I need to read it differently or something? Is it because I have wrapped `useSWR` in my own hook?

```js
export default function useRequest(request, { initialData, ...config } = {}) {
  const { data: response, ...returned } = useSWR(
    request && JSON.stringify(request),
    () => axios(request),
    {
      ...config,
      initialData: initialData && {
        status: 200,
        statusText: 'InitialData',
        headers: {},
        data: initialData,
      },
    }
  );

  return {
    ...returned,
    data: response && response.data,
    response,
  };
}
```

Is there something in the way I get and pass on the returned values from `useSWR` here which is causing the `isValidating` flag not to change? If so, how would you suggest I do it instead?

Adding the following where I use my hook, just results in a single log message of `undefined`.

```js
  useEffect(() => console.log(isValidating), [isValidating]);
```
This addresses #213 where passing initialData when there's an error in the cache will still return the error.

I'm not sure if this is the correct way to fix this as it means the cache and state would be out of sync but maybe that's ok? It did pass all tests 🤷‍♂ 
