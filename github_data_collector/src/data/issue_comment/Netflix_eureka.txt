Hi,

I have a eureka+zuul application running on my server in order to have service discovery and API gateway for my microservices. When i make a request to any microservice on the same machine localhost it is working fine, but when i try with another instance and from another machine i am getting this error:

```
{
    "timestamp": "2020-01-17T12:56:06.677+0000",
    "status": 500,
    "error": "Internal Server Error",
    "message": "Connect to {server ip address}:{8003} [/{server ip address}] failed: Connection refused (Connection refused)"
}
```

My Eureka+Zuul Config:

```
server.port=8761
spring.application.name=servicediscovery
eureka.client.registerWithEureka=false
eureka.client.fetchRegistry=false
eureka.instance.preferIpAddress=true
eureka.server.waitTimeInMsWhenSyncEmpty=5
eureka.instance.nonSecurePort=80
spring.cloud.inetutils.preferredNetworks=192.
eureka.server.expectedClientRenewalIntervalSeconds=30
eureka.instance.leaseExpirationDurationInSeconds=40
eureka.instance.registry.expected-number-of-clients-sending-renews=5
eureka.server.evictionIntervalTimerInMs=60000
eureka.server.renewalPercentThreshold=0.85
eureka.server.renewalThresholdUpdateIntervalMs=20000
eureka.server.enableSelfPreservation=true
zuul.routes.microservice.url=http://{the ip address of my server machine}:8003/
zuul.routes.microservice.sensitiveHeaders=
```
My Microservice Config:

```
eureka.client.serviceUrl.defaultZone=http://{ip address of my server machine}:8761/eureka
eureka.client.fetchRegistry=true
eureka.client.registryFetchIntervalSeconds=30
eureka.instance.preferIpAddress=true
eureka.client.registerWithEureka=true
eureka.client.healthcheck.enabled=true
eureka.instance.healthCheckUrlPath=/actuator/health
eureka.instance.statusPageUrlPath=/actuator/info
eureka.instance.leaseRenewalIntervalInSeconds=30
eureka.instance.leaseExpirationDurationInSeconds=40
eureka.client.eurekaServiceUrlPollIntervalSeconds=60
eureka.client.instanceInfoReplicationIntervalSeconds=30
eureka.client.initialInstanceInfoReplicationIntervalSeconds=40
```

Please let me know what i am missing, should i add more URLs to `zuul.routes.microservice.url=http://{the ip address of my server machine}:8003/` so i mention all ip addresses of my machines and how is it possible?
We're removing archaius from spring-cloud-netflix but the eureka client still depends on it.

https://github.com/spring-cloud/spring-cloud-netflix/tree/remove-maint

I know there's archaius2 version, but looking for something pluggable.
When I look at eureka has been a source of confusion in "selfPreservationMode", I saw the sorce code with mater branch,
when we see register or cancel method, there will be update "expectedNumberOfClientsSendingRenews", just like the code:

```java
// The lease does not exist and hence it is a new registration
synchronized (lock) {
    if (this.expectedNumberOfClientsSendingRenews > 0) {
        // Since the client wants to register it, increase the number of clients sending renews
        this.expectedNumberOfClientsSendingRenews = this.expectedNumberOfClientsSendingRenews + 1;
        updateRenewsPerMinThreshold();
    }
}
```

i have read the code with "evict" method in "AbstractInstanceRegistry" class, but i didn't find where to update the "expectedNumberOfClientsSendingRenews" when we evict a instance according to a timed task. 

can you tell me where to update the "expectedNumberOfClientsSendingRenews" when we evict a instance ? 

Steps to reproduce:

1. Download the `tar.gz` file from the [1.9.14 Releases page](https://github.com/Netflix/eureka/releases/tag/v1.9.14).
1. Extract the tarball.
1. `./gradlew build`

Error:

```
./gradlew build

...

FAILURE: Build failed with an exception.

* Where:
Build file '/Users/matthewj/Downloads/eureka-1.9.14/build.gradle' line: 10

* What went wrong:
An exception occurred applying plugin request [id: 'nebula.netflixoss', version: '3.6.0']
> Failed to apply plugin [id 'nebula.netflixoss']
   > Cannot set property 'defaultVersionStrategy' on null object

* Try:
Run with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output.

BUILD FAILED

Total time: 24.677 secs
```

The issue is that the Nebula plugin depends on the existence of tags within a Git repo.

If you clone the repo, checkout the v1.9.14 tag and build from there, then it succeeds.


I was trying out eureka endpoints as mentioned [here](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations)

After doing PUT /eureka/v2/apps/appID/instanceID/status?value=OUT_OF_SERVICE for 1 instance, it is going out of service in service registry, but still I see traffic flowing through this instance.

Any help here is appreciated.
Hi,There is two Eureka Servers named ServerA and ServerB, a part of services with Eureka Client named ClientA,ClientB were setted eureka.client.serviceUrl.defaultZone value to ServerA, the rest of services with Eureka Client named ClientC,ClientD were setted eureka.client.serviceUrl.defaultZone value to ServerB. ServerA and ServerB defaultZone were setted each other. I expected ServerA and ServerB could replicate client instances,ServerA has all clients, the same as ServerB, but ServerA only has ClientA,ClientB(ServerB only has ClientC,ClientD). Even ServerA and ServerB were started with fetchRegistry=true setting had all clents, ServerA would lost clientC and clientD later(no heate beat). Why Eureka Servers do not exchange instances each other? Need the Client must set eureka.client.serviceUrl.defaultZone value to all eureka servers(ServerA and ServerB)?
eureka-client version: 1.9.12
JDK version: 11.0.4
spring-cloud-netflix-eureka-client version: 2.1.2.RELEASE

On eureka-server-side we have 4 servers in 2 zones:

|           | zone 1 | zone 2 |
|-----------|--------|--------|
| server 1 | discovery-1       |        |
| server 2 | discovery-2       |        |
| server 3 |        |  discovery-3      |
| server 4 |        |  discovery-4      |

After server 1 crashed it was unreachable (NoRouteToHostException), the other server had no problem when contacting them per HTTP manually.

However, cache-refresh requests from the eureka-clients in our services produce errors for all server instances:

- The first request that is done by the RetryableEurekaHttpClient tries to contact discovery-1 and fails because of the NoRouteToHostException
-  Afterwards the RetryableEurekaHttpClient tries discovery-2. Unfortunately it fails with `com.fasterxml.jackson.core.JsonParseException: processing aborted
 at [Source: (GZIPInputStream); line: 1, column: 18]`
- As a last step it tries to contact discovery-3 which results in the same Exception as the request to discovery-2. Afterwars, because the retries reache the maximum numberOfRetries (3) it throws `TransportException("Retry limit reached; giving up on completing the request")`.

The requests to discovery-2 and discovery-3 result in a JsonParseException because the Thread was interrupted: https://github.com/Netflix/eureka/blob/743af8be0fa37118a3a9ee0d39f3ba8a89621119/eureka-client/src/main/java/com/netflix/discovery/converters/EurekaJacksonCodec.java#L500.
I think that the failed request to discovery-1 leads to the thread-interruption. Per remote debugging I was able to see, that the non-completed future was cancelled in https://github.com/Netflix/eureka/blob/743af8be0fa37118a3a9ee0d39f3ba8a89621119/eureka-client/src/main/java/com/netflix/discovery/TimedSupervisorTask.java#L96 which interrupts the thread in line 173 of FutureTask. The thread which is interrupted is the same thread that tries to contact discovery-2 and discovery-3.

Can you please advice me, are we doing something wrong or could this be a bug?

Full stack traces following in the order of occurence, everything in thread "DiscoveryClient-CacheRefreshExecutor-0":

https://pastebin.com/RkuvPgJH
https://pastebin.com/Qyf1pHjF (2 times)
https://pastebin.com/Jp5u3e5p
In this issue (https://github.com/Netflix/eureka/issues/1221), eureka client try to re - register but throw TransportException, so the re - register logic not executed, in my opinion, throw ThranportException show that server-side processing logic errors, Therefore, I personally think that DiscoveryClient should re-register when receiving TransportException. Please review the pull request and make Suggestions. I will track this problem, thank you
Hi all,

Is there any way to stablish a whitelist or blacklist in order to enable registry only microservices deployed in several hosts? 
I know that we could use AWS zones, but currently we have deployed all microservices in our internal intranet.

Thanks & Regards
I just cloned the repo in my local machine and was trying to follow the instructions provided at https://github.com/Netflix/eureka/wiki/Running-the-Demo-Application. However,

1. when i have launched the server using the war and tomcat it shows the replica as unavailable.

2. when i run the example service application it throws, the following error:-

5:40:10 PM: Executing task 'ExampleEurekaService.main()'...

Inferred project: eureka, version: 1.9.13-SNAPSHOT
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
The testJar task is deprecated.  Please place common test harness code in its own project and publish separately.
Publication nebula not found in project :.
[buildinfo] Not using buildInfo properties file for this build.
Publication named 'nebula' does not exist for project ':' in task ':artifactoryPublish'.
:eureka-client:compileJava UP-TO-DATE
:eureka-client:processResources UP-TO-DATE
:eureka-client:classes UP-TO-DATE
:eureka-client:writeManifestProperties UP-TO-DATE
:eureka-client:jar
Note: /home/abdur/IdeaProjects/eureka/eureka-examples/src/main/java/com/netflix/eureka/ExampleEurekaGovernatedService.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
:eureka-examples:compileJava
:eureka-examples:processResources UP-TO-DATE
:eureka-examples:classes
[main] WARN com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[main] INFO com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[main] INFO com.netflix.config.DynamicPropertyFactory - DynamicPropertyFactory is initialized with configuration sources: com.netflix.config.ConcurrentCompositeConfiguration@621be5d1
[main] WARN com.netflix.discovery.internal.util.Archaius1Utils - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
[main] INFO com.netflix.appinfo.providers.EurekaConfigBasedInstanceInfoProvider - Setting initial instance status as: STARTING
[main] WARN com.netflix.discovery.internal.util.Archaius1Utils - Cannot find the properties specified : eureka-client. This may be okay if there are other environment specific properties or the configuration is installed with a different mechanism.
[main] INFO com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[main] INFO com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[main] INFO com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[main] ERROR com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Cannot resolve to any endpoints from provided configuration: {defaultZone=[]}
[main] ERROR com.netflix.discovery.shared.transport.EurekaHttpClients - Initial resolution of Eureka server endpoints failed. Check ConfigClusterResolver logs for more info
[main] INFO com.netflix.discovery.DiscoveryClient - Disable delta property : false
[main] INFO com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[main] INFO com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[main] INFO com.netflix.discovery.DiscoveryClient - Application is null : false
[main] INFO com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[main] INFO com.netflix.discovery.DiscoveryClient - Application version is -1: true
[main] INFO com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[main] ERROR com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti - was unable to refresh its cache! status = There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134)
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069)
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:268)
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:260)
	at com.netflix.eureka.ExampleEurekaService.initializeEurekaClient(ExampleEurekaService.java:52)
	at com.netflix.eureka.ExampleEurekaService.main(ExampleEurekaService.java:63)
[main] WARN com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[main] INFO com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[main] INFO com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[main] INFO com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1567858216224 with initial instances count: 0
:eureka-examples:ExampleEurekaService.main()
Registering service to eureka with STARTING status
Simulating service initialization by sleeping for 2 seconds...
Done sleeping, now changing status to UP
[main] INFO com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1567858218229, current=UP, previous=STARTING]
Waiting ... verifying service registration with eureka ...
[DiscoveryClient-InstanceInfoReplicator-0] INFO com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti: registering service...
[DiscoveryClient-InstanceInfoReplicator-0] WARN com.netflix.discovery.DiscoveryClient - DiscoveryClient_UNKNOWN/rtx2080ti - registration failed There is no known eureka server; cluster server list is empty
com.netflix.discovery.shared.transport.TransportException: There is no known eureka server; cluster server list is empty
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:108)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59)
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77)
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56)
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847)
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121)
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)