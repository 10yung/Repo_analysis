Fixes #1004


### Steps to reproduce
I'm not sure if this is an error on my part or on the library's part. I'm attempting to force a collation of `utf8mb4_unicode_ci` on a string column. I'm doing something similar to this:
```
builder.Property(p => p.Value).HasCollation("utf8mb4_unicode_ci");
```
However, when I make a migration from the Package Manager Console using `Add-Migration`, like so:
```
Add-Migration MigrationName -Project NetStandardProject -StartupProject NetCoreProject
```
The generated `Migration` class does not contain an annotation on the field. I'll see only the following in the migration under the table's columns:
```
Value = table.Column<string>(nullable: true)
```
Also, when I look at the debugging of the create table command for one of the above when I use the `Migrate()` command from a .NET Core project, I'll see:
```
`Value` longtext CHARACTER SET utf8mb4 NULL
```
It doesn't seem to matter if the column in question is a key or not, the result is the same. Because of the lack of collation, I end up getting all my string-based columns as `utf8mb4_general_ci` instead. I've also tried to turn off character set appending in the configuration using:
```
optionsBuilder.UseMySql(connection, b => b.CharSetBehavior(CharSetBehavior.NeverAppend));
```
This also seems to be having no effect as I am still getting the character set appended.

### The issue
I expected that doing the above would set the collation of the column properly, but instead it is being ignored completely.

### Further technical details
MySQL version: MariaDB 10.4.11
Operating system: Windows 10 64-bit 1909 (client) / FreeBSD 12.1-RELEASE-p1 (server)
Pomelo.EntityFrameworkCore.MySql version: 3.1.0
Microsoft.AspNetCore.App version: (Not ASP.NET) .NET Standard 2.1 / .NET Core 3.1

Other details about my project setup:
I've got my DbContext and entities in a .NET Standard 2.1 project and I create the migration by using a separate .NET Core 3.1 project that stores the connection details. The migration is saved to the .NET Standard project.

As far as on the server end, I've got the following in my `my.cnf` file:
```
[client]
default_character_set=utf8mb4

[server]
collation_server=utf8mb4_unicode_ci
init_connect='SET CHARACTER SET utf8mb4'
character_set_server=utf8mb4
character_set_client_handshake=OFF
innodb_compression_default=ON
innodb_compression_level=9
```
### Steps to reproduce
Ideally include a complete code listing that we can run to reproduce the issue.
Alternatively, you can provide a project/solution that we can run.
```
public class TestModel {

public int Id { set; get; }
public Guid? TestId { set; get; }

//To be added in next migration
public string Name { set; get; }
}
```

In Package manager console type:
add-migration TestModelAddedName
remove-migration
add-migration TestModelAddedName
> Unable to cast object of type 'System.Guid' to type 'System.String'

### The issue
Describe what is not working as expected.
ApplicationDbContextModelSnapshot.cs have been reverted but the guid is now a string.
If you are seeing an exception, include the full exceptions details (message and stack trace).

```
Exception message:
Stack trace:
System.InvalidCastException: Unable to cast object of type 'System.Guid' to type 'System.String'.
   at lambda_method(Closure , ValueBuffer )
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalShadowEntityEntry..ctor(IStateManager stateManager, IEntityType entityType, ValueBuffer& valueBuffer)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory.NewInternalEntityEntry(IStateManager stateManager, IEntityType entityType, Object entity, ValueBuffer& valueBuffer)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.InternalEntityEntryFactory.Create(IStateManager stateManager, IEntityType entityType, Object entity, ValueBuffer& valueBuffer)
   at Microsoft.EntityFrameworkCore.ChangeTracking.Internal.StateManager.CreateEntry(IDictionary`2 values, IEntityType entityType)
   at Microsoft.EntityFrameworkCore.Update.Internal.UpdateAdapter.CreateEntry(IDictionary`2 values, IEntityType entityType)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.TrackData(IModel source, IModel target)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.Diff(IModel source, IModel target, DiffContext diffContext)
   at Microsoft.EntityFrameworkCore.Migrations.Internal.MigrationsModelDiffer.GetDifferences(IModel source, IModel target)
   at Microsoft.EntityFrameworkCore.Migrations.Design.MigrationsScaffolder.ScaffoldMigration(String migrationName, String rootNamespace, String subNamespace, String language)
   at Microsoft.EntityFrameworkCore.Design.Internal.MigrationsOperations.AddMigration(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigrationImpl(String name, String outputDir, String contextType)
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.AddMigration.<>c__DisplayClass0_0.<.ctor>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.<>c__DisplayClass3_0`1.<Execute>b__0()
   at Microsoft.EntityFrameworkCore.Design.OperationExecutor.OperationBase.Execute(Action action)
```

### Workaround
If using GIT you can just revert changes on ApplicationDbContextModelSnapshot.cs or manualy edit it.

### Further technical details

MySQL version: `(new Version(10, 1, 31), ServerType.MariaDb`
Operating system: Windows 10
Pomelo.EntityFrameworkCore.MySql version: 3.1.0
Microsoft.AspNetCore.App version: 3.1

Other details about my project setup:
Migration Assembly in a different project.

See https://github.com/aspnet/EntityFrameworkCore/pull/19376 for further details.
See https://github.com/aspnet/EntityFrameworkCore/pull/19368#event-2905414096 for further details.
### The issue

Using the 2.2 provider with a LINQ query with a Where() and a StartsWith() filter generates the following SQL

```
SELECT `b`.`bib_id` AS `Id`, `b`.`fast_add` AS `FastAdd`, `b`.`staff_only` AS `StaffOnly`, `b`.`created_by` AS `CreationUserName`, `b`.`date_created` AS `CreationTime`, `b`.`updated_by` AS `LastWriteUserName`, `b`.`date_updated` AS `LastWriteTime`, `b`.`status`, `b`.`status_updated_by` AS `StatusLastWriteUserName`, `b`.`status_updated_date` AS `StatusLastWriteTime`, `b.BibExt`.`title` AS `BibExt`
FROM `ole_ds_bib_t` AS `b`
LEFT JOIN `uc_bib_ext` AS `b.BibExt` ON `b`.`bib_id` = `b.BibExt`.`id`
WHERE `b.BibExt`.`title` LIKE CONCAT('death', '%') AND (LEFT(`b.BibExt`.`title`, CHAR_LENGTH('death')) = 'death')
ORDER BY `LastWriteTime` DESC
LIMIT 100 OFFSET 0
```

The same query using the 3.1 provider generates the following SQL

```
SELECT `o`.`bib_id` AS `Id`, `o`.`fast_add` AS `FastAdd`, `o`.`staff_only` AS `StaffOnly`, `o`.`created_by` AS `CreationUserName`, `o`.`date_created` AS `CreationTime`, `o`.`updated_by` AS `LastWriteUserName`, `o`.`date_updated` AS `LastWriteTime`, `o`.`status` AS `Status`, `o`.`status_updated_by` AS `StatusLastWriteUserName`, `o`.`status_updated_date` AS `StatusLastWriteTime`, `u`.`title` AS `BibExt`
FROM `ole_ds_bib_t` AS `o`
LEFT JOIN `uc_bib_ext` AS `u` ON `o`.`bib_id` = `u`.`id`
WHERE `u`.`title` IS NOT NULL AND ((`u`.`title` LIKE CONCAT('death', '%')) AND (LEFT(`u`.`title`, CHAR_LENGTH(CONVERT('death' USING utf8mb4) COLLATE utf8mb4_bin)) = CONVERT('death' USING utf8mb4) COLLATE utf8mb4_bin))
ORDER BY `o`.`date_updated` DESC
LIMIT 100 OFFSET 0
```

Note the extra calls to CONVERT() and the COLLATE clause. This is causing the query to not return any results when it should be.

Why is it doing this? Is there a way to turn it off?

### Further technical details

MySQL version: 5.7.28
Operating system: RedHat Linux
Pomelo.EntityFrameworkCore.MySql version: 3.1.0

Other details about my project setup:

The server's default character set is set to utf8mb4 using the following settings

[client]
default-character-set = utf8mb4

[mysql]
default-character-set = utf8mb4

### Steps to reproduce
Ideally include a complete code listing that we can run to reproduce the issue.
Alternatively, you can provide a project/solution that we can run.

### The issue
I get  {2019/12/19 22:58:12 +08:00} using ado.net, but {2019/12/19 22:58:12 +00:00} using ef linq to SQL



### Further technical details

MySQL version: 
Operating system: 
Pomelo.EntityFrameworkCore.MySql version:
Microsoft.AspNetCore.App version:

Other details about my project setup:

Threre are currently 3 options to choose from:

```c#
// Throw an exception, if a schema is being used. This is the default.
options.UseMySql(myConnectionString, b => b.SchemaBehavior(MySqlSchemaBehavior.Throw))

// Silently ignore any schema definitions.
options.UseMySql(myConnectionString, b => b.SchemaBehavior(MySqlSchemaBehavior.Ignore))

// Use the specified translator delegate to translate from an input schema and object name to
// an output object name whenever a schema is being used.
options.UseMySql(myConnectionString, b => b.SchemaBehavior(MySqlSchemaBehavior.Translate,
    (schema, entity) => $"{schema ?? "dbo"}_{entity}"))
```
This still needs some testing.

Fixes #972
This is a continuation of the discussion from #923 about alternatives to throwing, in case Pomelo is being used as one of many providers in conjunction with the "single migration for multiple providers" approach and other providers must use schemas.

To make this very clear:

This is **not** a discussion about reimplementing the previously dropped version, where schemas were misused as a way to access objects from multiple databases by a single `DbContext`.

It is about alternatives that are compliant with EF Core's understanding of schemas.

Proposed alternative options have been to either just ignore schemas (but not throw) or allow users to define their own translation function, that translates an input schema and an input object name to an output object name (within the same database).

Any option implemented here is going to be opt-in, because MySQL does not support the EF Core concept of schemas and therefore should throw by default if a schema is being used anyway. The exception should hint at the alternative options.
The simplest way to fill out the application is probably just do it together here in the PR before copying it over to https://github.com/dotnet-foundation/projects/issues/new/choose.

Feel free to edit or review the file.

This is related to #646.