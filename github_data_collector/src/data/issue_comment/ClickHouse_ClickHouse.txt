(you don't have to strictly follow this form)

**Describe the bug or unexpected behaviour**
```root@be22fd9abd2a:/# clickhouse-client
ClickHouse client version 19.16.10.44 (official build).
Connecting to localhost:9000 as user default.
Connected to ClickHouse server version 19.16.10 revision 54427.

be22fd9abd2a :) CREATE TABLE test
:-] (
:-]     foobar Nested(
:-]         name String,
:-]         value String
:-]     )
:-] )
:-] ENGINE = Null

CREATE TABLE test
(
    `foobar` Nested(
    name String,
    value String)
)
ENGINE = Null

Ok.

0 rows in set. Elapsed: 0.008 sec.

be22fd9abd2a :) SHOW CREATE TABLE test

SHOW CREATE TABLE test

┌─statement───────────────────────────────────────────────────────────────────────────────────────────┐
│ CREATE TABLE default.test (`foobar.name` Array(String), `foobar.value` Array(String)) ENGINE = Null │
└─────────────────────────────────────────────────────────────────────────────────────────────────────┘

1 rows in set. Elapsed: 0.003 sec.

be22fd9abd2a :) Bye.
```
```
root@be22fd9abd2a:/# clickhouse-format <<< clickhouse-format <<< "CREATE TABLE default.test (foobar.name Array(String), foobar.value Array(String)) ENGINE = Null"
Code: 62, e.displayText() = DB::Exception: Syntax error (query): failed at position 34: .name Array(String), foobar.value Array(String)) ENGINE = Null
. Expected one of: identifier with optional parameters, DEFAULT, MATERIALIZED, ALIAS, function, COMMENT, CODEC, identifier, nested table, identifier with parameters, Stack trace:

0. 0x5617816a6a00 StackTrace::StackTrace() /usr/bin/clickhouse
1. 0x5617816a67d5 DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int) /usr/bin/clickhouse
2. 0x5617814fda8f ? /usr/bin/clickhouse
3. 0x561781810918 mainEntryClickHouseFormat(int, char**) /usr/bin/clickhouse
4. 0x5617815e310d main /usr/bin/clickhouse
5. 0x7fce5dabfb97 __libc_start_main /lib/x86_64-linux-gnu/libc-2.27.so
6. 0x56178164c53a _start /usr/bin/clickhouse
 (version 19.16.10.44 (official build))
root@be22fd9abd2a:/#
```

**How to reproduce**
* Which ClickHouse server version to use 
yandex/clickhouse-server:19.16.10.44

The token 'NOT' didn't work in 'SHOW TABLES NOT LIKE' query with version 19.13.3.26, the following queries both show the tables start with 'example'.
```SQL
SHOW TABLES LIKE 'example%';
SHOW TABLES NOT LIKE 'example%';
```

`jdbc-bridge` sometimes runs into below errors. They can be reproduced by issuing same query repeatedly in multiple threads. Perhaps `PooledReadWriteBufferFromHTTP` should be used along with retry like in #4837?

1. not running
```
2020.01.18 23:30:14.811797 [ 25 ] {47d43ffc-64c4-45c5-ad35-047ba3c665c8} <Error> HTTPHandler: Code: 410, e.displayText() = DB::Exception: jdbc-bridge is not running. Please, start it manually, Stack trace:

0. /usr/bin/clickhouse-server(StackTrace::StackTrace()+0x30) [0x7d37f50]
1. /usr/bin/clickhouse-server(DB::Exception::Exception(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, int)+0x25) [0x3bbc1e5]
2. /usr/bin/clickhouse-server(DB::XDBCBridgeHelper<DB::JDBCBridgeMixin>::startBridgeSync() const+0x2e2) [0x69e8f72]
3. /usr/bin/clickhouse-server(DB::XDBCBridgeHelper<DB::JDBCBridgeMixin>::getIdentifierQuotingStyle()+0x40) [0x69e8680]
4. /usr/bin/clickhouse-server(DB::StorageXDBC::getReadPOSTDataCallback(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum&, unsigned long) const+0x47) [0x6eac197]
5. /usr/bin/clickhouse-server(DB::IStorageURLBase::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int)+0xf27) [0x6eaaf07]
6. /usr/bin/clickhouse-server(DB::StorageXDBC::read(std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&, DB::SelectQueryInfo const&, DB::Context const&, DB::QueryProcessingStage::Enum, unsigned long, unsigned int)+0x6d) [0x6eab75d]
7. /usr/bin/clickhouse-server(DB::InterpreterSelectQuery::executeFetchColumns(DB::QueryProcessingStage::Enum, DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::PrewhereInfo> const&, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > > const&)+0x1fda) [0x6c332fa]
8. /usr/bin/clickhouse-server(DB::InterpreterSelectQuery::executeImpl(DB::InterpreterSelectQuery::Pipeline&, std::shared_ptr<DB::IBlockInputStream> const&, bool)+0x794) [0x6c36234]
9. /usr/bin/clickhouse-server(DB::InterpreterSelectQuery::executeWithMultipleStreams()+0x51) [0x6c38b81]
10. /usr/bin/clickhouse-server(DB::InterpreterSelectWithUnionQuery::executeWithMultipleStreams()+0x63) [0x6c479d3]
11. /usr/bin/clickhouse-server(DB::InterpreterSelectWithUnionQuery::execute()+0x3f) [0x6c47f5f]
12. /usr/bin/clickhouse-server() [0x6d4a44f]
13. /usr/bin/clickhouse-server(DB::executeQuery(DB::ReadBuffer&, DB::WriteBuffer&, bool, DB::Context&, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>, std::function<void (std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)>)+0x112) [0x6d4b6a2]
14. /usr/bin/clickhouse-server(DB::HTTPHandler::processQuery(Poco::Net::HTTPServerRequest&, HTMLForm&, Poco::Net::HTTPServerResponse&, DB::HTTPHandler::Output&)+0x197e) [0x3bd0fee]
15. /usr/bin/clickhouse-server(DB::HTTPHandler::handleRequest(Poco::Net::HTTPServerRequest&, Poco::Net::HTTPServerResponse&)+0x52b) [0x3bd340b]
16. /usr/bin/clickhouse-server(Poco::Net::HTTPServerConnection::run()+0x2a9) [0x7718009]
17. /usr/bin/clickhouse-server(Poco::Net::TCPServerConnection::start()+0x10) [0x7712de0]
18. /usr/bin/clickhouse-server(Poco::Net::TCPServerDispatcher::run()+0xed) [0x77134fd]
19. /usr/bin/clickhouse-server(Poco::PooledThread::run()+0x81) [0x7e36ca1]
20. /usr/bin/clickhouse-server(Poco::ThreadImpl::runnableEntry(void*)+0x3c) [0x7e34a4c]
21. /usr/bin/clickhouse-server() [0xb80a200]
22. /lib/x86_64-linux-gnu/libpthread.so.0(+0x76db) [0x7f5cd479b6db]
23. /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f) [0x7f5cd3f2288f]
 (version 19.11.8.46 (official build))
```
2. timeout
```
2020.01.18 23:30:15.687281 [ 34 ] {3cab6ea4-3752-4a89-a527-230bc0121c0e} <Error> executeQuery: Poco::Exception. Code: 1000, e.code() = 0, e.displayText() = Timeout: connect timed out: 192.168.6.110:8080 (version 19.11.8.46 (official build)) (from 172.19.0.1:40500) (in query: select * from jdbc('ch', '', 'select * from system.processes') FORMAT TabSeparatedWithNamesAndTypes;)
```

Update:
To reproduce the issues, please use https://github.com/zhicwu/clickhouse-jdbc-bridge-test and follow instructions there.
Changelog category (leave one):
- Other

Changelog entry (up to few sentences, required except for Non-significant/Documentation categories):
Continuation of #8649 
Changelog category (leave one):
- Other


Changelog entry (up to few sentences, required except for Non-significant/Documentation categories):
Continuation of #8571 
I hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en

Changelog category (leave one):
- Non-significant (changelog entry is not needed)

**Describe the bug or unexpected behaviour**
Inserting `'2020-00-00 00:00:00'` into a DateTime field makes ClickHouse write `2106-02-07 06:28:16` into the DB. Note that the month and day value should not be 0, but CK accepts it and writes some garbage into the DB without any warnings.

**How to reproduce**
* Which ClickHouse server version to use
ClickHouse 19.17.6.36
* Which interface to use, if matters
http://ui.tabix.io/
* Non-default settings, if any
None
* `CREATE TABLE` statements for all tables involved
```
CREATE TABLE IF NOT EXISTS test.datetime_test (
    dt DateTime CODEC(DoubleDelta, LZ4)
)
ENGINE = MergeTree() 
ORDER BY dt
```
* Queries to run that lead to unexpected result
`INSERT INTO test.datetime_test VALUES ('2020-00-00 00:00:00');`

**Expected behavior**
Should probably raise an error like it does if the inserted field is not in the right form (like it does if you use e.g. `'2020-01-01 00:00'` (which is of course not the form for a DateTime field - seconds missing). So the expected behavior would probably be returning some kind of an error and not let the DB accept the value and silently corrupt it. Returning e.g. `DB::Exception: Cannot parse datetime` would be OK.


There are cases when data is naturally grouped by field X.
In those case grouping by X,Y can be executed more efficiently. 

Samples are:

```
select a, b, sum(c) from  (select a, max(x) as b, sum(y) as c from table group by a)  group by a, b; 

select a,  arrayJoin(x) as b, sum(c) from table group by a, b;  -- do arrayJoin AFTER group by a
```
I hereby agree to the terms of the CLA available at: https://yandex.ru/legal/cla/?lang=en

Changelog category (leave one):
- Improvement


Changelog entry (up to few sentences, required except for Non-significant/Documentation categories):
Early stage.

Changelog category (leave one):
- Bug Fix

Changelog entry (up to few sentences, required except for Non-significant/Documentation categories):
Fixed the issue "Method create is not implemented for data type Function". This fixes #8689
