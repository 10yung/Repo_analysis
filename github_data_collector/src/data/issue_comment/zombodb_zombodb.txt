ZomboDB version:   5.6.4
Postgres version: PostgreSQL 9.5.19 on x86_64-pc-linux-gnu, compiled by gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-36), 64-bit
Elasticsearch version: 5.6.4

Problem Description:

A postgres function is inserting into a table which has a zombodb index in it.
After the function ends, the table in postgress has the info  but the zombodb index is missing this inserts inside the function.

Error Message (if any):
No

ZomboDB version: 
Postgres version: 10.7
Elasticsearch version:

Problem Description:
I am wondering if there is a way to specify a join on two or more tables when creating a zombo index. Here is my use case:

```sql
CREATE TABLE A (
    id int4 NOT NULL,
    title varchar(512) NOT NULL,
    description varchar(512),
    CONSTRAINT a_id_fkey FOREIGN KEY (id) REFERENCES B(id),
    PRIMARY KEY (id)
);

CREATE TABLE B (
    id int4 NOT NULL,
    created_at timestamp,
    organization_id int4 NOT NULL,
    PRIMARY KEY (id)
);
```

For the following two tables, how can i create an index that allows me to lookup all elements in table A when field "organization_id" of B is a certain value? Notice that you can join the two tables on A.id == B.id


Elasticsearch 6 started to have support for [index sorting](https://www.elastic.co/blog/index-sorting-elasticsearch-6-0).

Index sorting can only be enabled at index creation time by specifying the "sort.field" and "sort.order" options: [Document](https://www.elastic.co/guide/en/elasticsearch/reference/6.8/index-modules-index-sorting.html).

Is it possible to have zombodb pass these additional options to ES at CREATE INDEX time?

ZomboDB version: 
Postgres version:
Elasticsearch version:

Problem Description:
May relate to #290 (but that was fixed). When I run a query returning many rows and use zdb.highlight on the results, sometimes I get a json parse error. That is to say, this works:
```
select 
    doc_id, 
    text                       
from docs d;
where              
   d ==> 'wh*'; 
```

and this does not:
```
select 
    doc_id, 
        zdb.highlight(
            ctid, 'text'  
        )  as text_highlighted,                                                     
    text                       
from docsd 
where              
   d ==> 'wh*';
```
I have no particular reason to move to ES 7, but I thought I would ask:

1) Have folks here used ES7 successfully with zombodb?
2) How are new ES versions added? PR, part of roadmap, other?

Thx.


So I have this problem with accurate + fast counting.
I have this table that keeps track of who is online right now ( basically just ids )
And this table is fairly small hundreds to thousands.

And I have a table with all of the meta data about all of the users. Large table - Millions.
This table has a zombodb index on it. When querying these tables individually, it is fine.
I can apply a limit in ES and is generally not a problem.

```sql
WHERE table ==> dsl.limit(
 100
, dsl.bool(...)
)
```
If I need to join these two tables, I can't apply a limit through elastic search and it is returning everything in the index, on a table with 1M+ things, this is pretty slow, especailly when users first trigger the query, there are no filters to pass through to ES, so it basically just returns everything

```sql
SELECT ou.*
FROM online_users ou
INNER JOIN user_attributes ua on
  ou.id = ua.user_id
WHERE ua ==> '{"bool": {"must": []}'
```

What I tried to do was pass IDs of the smaller table as subquery

```sql
SELECT ou.*
FROM online_users ou
INNER JOIN user_attributes ua on ou.id = ua.user_id and ou.organization_id = $1
WHERE ua ==>
 dsl.bool(
  dsl.must(
  	dsl.terms(
          'user_id'
        , (SELECT id FROM online_users where organzation_id = $1 )
       )
    )
  )
```

but that doesn't work. 
ZomboDB version:  `10-1.0.3`
Postgres version: 10.7
Elasticsearch version: 6

Problem Description:

We're seeing some unacceptably slow insert on a table w/ a zombodb index. I was able to tweak of index settings and improve write throughput by 1 to 2 order of magnatude ( individual inserts not batch inserts)

The docs layout a few settings that can be controlled with the `ALTER INDEX` command, but none of the ones i'm looking for. 

Possible to expose more of them? I'm particularly looking for tweaking some of the default [translog](https://www.elastic.co/guide/en/elasticsearch/reference/current/index-modules-translog.html) settings

Other Discussion:

I tried the increasing the batch size to 20mb and the concurrency to 50 prior to manually changing some index settings. that didn't seem to help very much.
ZomboDB version: 10-1.0.3
Postgres version:10.7
Elasticsearch version: 6.x

Problem Description:

Looking for a way to do deep pagination. I see the limit / offset API which maps to size and from, but that will only go so far. I'm aware of `search_from` and the `scroll` api. The scroll api has a bit of over head and I'm not so sure I'd want to expose the to end users.


Is there a way to use the `search_from` option? w/ postgres + zombo db?


ZomboDB version: v10-1.0.0 release
Postgres version: 11.1
Elasticsearch version: -

## Problem Description

`make clean install` fails.

## Error Message

```
src/c/indexam/create_index.c:225:30: error: use of undeclared identifier 'ACL_KIND_NAMESPACE'
                        aclcheck_error(aclresult, ACL_KIND_NAMESPACE,
                                                  ^
src/c/indexam/create_index.c:252:30: error: use of undeclared identifier 'ACL_KIND_TABLESPACE'; did you mean 'RELOPT_KIND_TABLESPACE'?
                        aclcheck_error(aclresult, ACL_KIND_TABLESPACE,
                                                  ^~~~~~~~~~~~~~~~~~~
                                                  RELOPT_KIND_TABLESPACE
/usr/local/Cellar/postgresql/11.1/include/server/access/reloptions.h:47:2: note: 'RELOPT_KIND_TABLESPACE' declared here
        RELOPT_KIND_TABLESPACE = (1 << 7),
        ^
src/c/indexam/create_index.c:396:33: error: no member named 'ii_KeyAttrNumbers' in 'struct IndexInfo'; did you mean 'ii_IndexAttrNumbers'?
                AttrNumber      attno = indexInfo->ii_KeyAttrNumbers[i];
                                                   ^~~~~~~~~~~~~~~~~
                                                   ii_IndexAttrNumbers
/usr/local/Cellar/postgresql/11.1/include/server/nodes/execnodes.h:154:13: note: 'ii_IndexAttrNumbers' declared here
        AttrNumber      ii_IndexAttrNumbers[INDEX_MAX_KEYS];
                        ^
src/c/indexam/create_index.c:471:26: error: too many arguments to function call, expected 19, have 21
                                                 stmt->concurrent, !check_rights,
                                                                   ^~~~~~~~~~~~~~
/usr/local/Cellar/postgresql/11.1/include/server/catalog/index.h:54:1: note: 'index_create' declared here
extern Oid index_create(Relation heapRelation,
^
src/c/indexam/create_index.c:578:65: error: too few arguments to function call, expected 6, have 5
        index_build(rel, indexRelation, indexInfo, stmt->primary, false);
        ~~~~~~~~~~~                                                    ^
/usr/local/Cellar/postgresql/11.1/include/server/catalog/index.h:107:1: note: 'index_build' declared here
extern void index_build(Relation heapRelation,
^
src/c/indexam/create_index.c:869:15: error: no member named 'ii_KeyAttrNumbers' in 'struct IndexInfo'; did you mean 'ii_IndexAttrNumbers'?
                        indexInfo->ii_KeyAttrNumbers[attn] = attform->attnum;
                                   ^~~~~~~~~~~~~~~~~
                                   ii_IndexAttrNumbers
/usr/local/Cellar/postgresql/11.1/include/server/nodes/execnodes.h:154:13: note: 'ii_IndexAttrNumbers' declared here
        AttrNumber      ii_IndexAttrNumbers[INDEX_MAX_KEYS];
                        ^
src/c/indexam/create_index.c:897:16: error: no member named 'ii_KeyAttrNumbers' in 'struct IndexInfo'; did you mean 'ii_IndexAttrNumbers'?
                                indexInfo->ii_KeyAttrNumbers[attn] = ((Var *) expr)->varattno;
                                           ^~~~~~~~~~~~~~~~~
                                           ii_IndexAttrNumbers
/usr/local/Cellar/postgresql/11.1/include/server/nodes/execnodes.h:154:13: note: 'ii_IndexAttrNumbers' declared here
        AttrNumber      ii_IndexAttrNumbers[INDEX_MAX_KEYS];
                        ^
src/c/indexam/create_index.c:901:16: error: no member named 'ii_KeyAttrNumbers' in 'struct IndexInfo'; did you mean 'ii_IndexAttrNumbers'?
                                indexInfo->ii_KeyAttrNumbers[attn] = 0; /* marks expression */
                                           ^~~~~~~~~~~~~~~~~
                                           ii_IndexAttrNumbers
/usr/local/Cellar/postgresql/11.1/include/server/nodes/execnodes.h:154:13: note: 'ii_IndexAttrNumbers' declared here
        AttrNumber      ii_IndexAttrNumbers[INDEX_MAX_KEYS];
                        ^
src/c/indexam/zdbam.c:811:17: error: too many arguments to function call, expected 5, have 6
                                                                                                                         NULL);
                                                                                                                         ^~~~
/Library/Developer/CommandLineTools/usr/lib/clang/10.0.0/include/stddef.h:105:16: note: expanded from macro 'NULL'
#  define NULL ((void*)0)
               ^~~~~~~~~~
/usr/local/Cellar/postgresql/11.1/include/server/catalog/namespace.h:67:1: note: 'RangeVarGetRelidExtended' declared here
extern Oid RangeVarGetRelidExtended(const RangeVar *relation,
^
src/c/indexam/zdbam.c:1134:108: error: too few arguments to function call, expected 7, have 6
        reltuples = IndexBuildHeapScan(heapRelation, indexRelation, indexInfo, true, zdbbuildCallback, &buildstate);
                    ~~~~~~~~~~~~~~~~~~                                                                            ^
/usr/local/Cellar/postgresql/11.1/include/server/catalog/index.h:114:1: note: 'IndexBuildHeapScan' declared here
extern double IndexBuildHeapScan(Relation heapRelation,
^
src/c/indexam/create_index.c:1086:24: error: too few arguments to function call, expected 5, have 4
                                                                           namespaceId);
                                                                                      ^
/usr/local/Cellar/postgresql/11.1/include/server/commands/defrem.h:43:1: note: 'ChooseRelationName' declared here
extern char *ChooseRelationName(const char *name1, const char *name2,
^
src/c/indexam/create_index.c:1093:24: error: too few arguments to function call, expected 5, have 4
                                                                           namespaceId);
                                                                                      ^
/usr/local/Cellar/postgresql/11.1/include/server/commands/defrem.h:43:1: note: 'ChooseRelationName' declared here
extern char *ChooseRelationName(const char *name1, const char *name2,
^
2 errors generated.
make: *** [src/c/indexam/zdbam.o] Error 1
make: *** Waiting for unfinished jobs....
src/c/indexam/create_index.c:1100:24: error: too few arguments to function call, expected 5, have 4
                                                                           namespaceId);
                                                                                      ^
/usr/local/Cellar/postgresql/11.1/include/server/commands/defrem.h:43:1: note: 'ChooseRelationName' declared here
extern char *ChooseRelationName(const char *name1, const char *name2,
^
src/c/indexam/create_index.c:1107:24: error: too few arguments to function call, expected 5, have 4
                                                                           namespaceId);
                                                                                      ^
/usr/local/Cellar/postgresql/11.1/include/server/commands/defrem.h:43:1: note: 'ChooseRelationName' declared here
extern char *ChooseRelationName(const char *name1, const char *name2,
^
12 errors generated.
```

## Other Discussion

In #319 @esatterwhite mentioned that ZomboDB seems to install fine with PG 11.

My intention was to submit ZomboDB formula to Homebrew to facilitate installation on macOS. Homebrew's default Postgres is 11.1, and for some reason [they don't support installing extensions for `postgres@10` formula](https://github.com/Homebrew/brew/pull/5426).
ZomboDB version: 10-1.0.0b9
Postgres version: 10.5
Elasticsearch version: 6

Problem Description:

When removing a column from a table, the related field is left in the index mapping in elastic search.
This means you can't drop a column and add it back with a different column type. The only thing that seems to get a round the problem is a full `REINDEX`.

or add a suffix to the column names.

Is this expected?



