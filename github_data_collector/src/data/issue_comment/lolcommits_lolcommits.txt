




Here is everything you need to know about this upgrade. Please take a good look at what changed and the test results before merging this pull request.

### What changed?

#### ✳️ mini_magick (~> 4.9.3 → ~> 4.10.1) · [Repo](https://github.com/minimagick/minimagick) · [Changelog](https://github.com/minimagick/minimagick/blob/master/CHANGELOG.md)

<details>
<summary>Release Notes</summary>
<h4><a href="https://github.com/minimagick/minimagick/releases/tag/v4.10.1">4.10.1</a></h4>

<blockquote><ul>
<li>Still pick up ImageMagick over GraphicsMagick if both are installed</li>
</ul></blockquote>
<p><em>Does any of this look wrong? <a href="https://depfu.com/packages/rubygem/mini_magick/feedback">Please let us know.</a></em></p>
</details>

<details>
<summary>Commits</summary>
<p><a href="https://github.com/minimagick/minimagick/compare/adb8283194815a8f65b731d934293ba3d4b85a8c...4206a74d374a84a91e429628045e44559e042dc4">See the full diff on Github</a>. The new version differs by 2 commits:</p>

<ul>
<li><a href="https://github.com/minimagick/minimagick/commit/4206a74d374a84a91e429628045e44559e042dc4"><code>Bump to 4.10.1</code></a></li>
<li><a href="https://github.com/minimagick/minimagick/commit/4749aabd381b5a14c19aa5afc37a4c1de505559c"><code>Still prioritize ImageMagick before GraphicsMagick</code></a></li>
</ul>
</details>






---
![Depfu Status](https://depfu.com/badges/f1979e64fba0e032d990ae6865b1e276/stats.svg)

[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.

<details><summary>All Depfu comment commands</summary>
<blockquote><dl>
<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>
<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>
<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>
<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>
<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>
<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>
<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>
<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>
</dl></blockquote>
</details>


Looks like [the time has finally come](https://developer.apple.com/documentation/macos_release_notes/macos_10_15_beta_release_notes#3318257) when we should reconsider how we package this gem...

> Scripting language runtimes such as Python, Ruby, and Perl are included in macOS for compatibility with legacy software. Future versions of macOS won’t include scripting language runtimes by default, and might require you to install additional packages. If your software depends on scripting languages, it’s recommended that you bundle the runtime within the app. (49764202)

In the short-term, I can update our docs to include help installing Ruby on MacOS.. (homebrew will probably be the easiest approach).

Other options might include:

* a downloadable executable with Ruby binary and gem dependencies baked in - using a [packaging tool](https://www.ruby-toolbox.com/categories/packaging_to_executables)
* re-write in Rust?! and build for multiple platforms
* something else?

@mroth - any thoughts? 

Whatever we do could make up a 1.0 release.
I recently moved to a new computer with a fresh install of macOS Mojave and since then [Fork](https://fork.dev) hangs on commit/amend when lolcommits is enabled. The commit happens and the photo taken, but that commit process just hangs. This didn't happen on my old MacBook with the same version of Mojave (10.14.4).

I can't figure out what's going on. Adding the `--fork` and/or `--stealth` flags does nothing.

<img width="1162" alt="Screen Shot 2019-04-24 at 09 43 57" src="https://user-images.githubusercontent.com/37392/56834355-0b59ef00-6826-11e9-8393-bfccfa13d6ee.png">

Video of the issue: https://www.rightthisminute.com/tools/jw/videos/EQtYHKgA/play?force_hq=1

(In the video you see this happening on an iMac. I was using that while I waited for a new computer. I'm also experiencing this on a 2018 15" MBP).

```
lolcommits 0.13.0
fork 1.0.76
git 2.21.0
```
This project is now [more than 6 years old](https://github.com/mroth/lolcommits/blob/master/CHANGELOG.md#001-29-march-2012) and should probably be considered "production ready" at this point. As the [project claims to follow semver](https://github.com/mroth/lolcommits/blob/master/CHANGELOG.md#lolcommits-change-log), you should probably consider releasing the next version as 1.0.0 to convey the maturity of the project and follow [semver rules](https://semver.org/#how-do-i-know-when-to-release-100).
Sometimes I see a picture and I think, where the hell was I sitting back then.

So would it be possible to add the Geo location to the metadata of the image. I'm not sure yet how to fetch that location, but it would be awesome cool and the possibilities of mapping locations of all the lolcommits afterwards would be awesome.
* Global config is copied into new project directories
  when they are made.
Currently in the CLI we have this fun snippet, designed to handle the case where you are in a subdirectory of a git repo and want to do a lolcommits command:

```ruby
      def self.change_dir_to_root_or_repo!
        debug 'Walking up dir tree'
        loop do
          cur = File.expand_path('.')
          nxt = File.expand_path('..', cur)
          if nxt == cur
            warn 'Repository root not found'
            return
          end
          return if VCSInfo.repo_root?
          Dir.chdir(nxt)
        end
      end
```

This is actually invoked as part of the CLI logic, and the main library just assumes the PWD is in the correct place.

Rather, instead of manually walking the directory hierarchy upwards, we should use the built-in VCS support in both git and hg to determine the proper paths. This could/should be handled transparently in the `lib/backends` library, outside of the CLI, so things "just work" when using lolcommits as an API.

For reference, the commands we would probably be utilizing are:
 - `git rev-parse --show-toplevel`
 - `git rev-parse --git-dir`
 - `hg root`

This will have the added benefit of making lolcommits work with git submodules (which store their info somewhere else besides `PWD/.git`, but `--git-dir` will find it successfully.)
Currently, in `lib/lolcommits.rb`, we require all external gems and libraries at the root level of the library:
```ruby
require 'mini_magick'
require 'core_ext/mini_magick/utilities'
require 'fileutils'
require 'git'
require 'open3'
require 'methadone'
require 'date'
require 'mercurial-ruby'
require 'core_ext/mercurial-ruby/shell'
```

We should refactor to have only the files that actually use these gem deps require them, this is best practice for a project of this size, and will aide in future refactors because we can understand where our deps actually come from.
_WIP SAMPLE CODE -- BROKEN DO NOT MERGE._

For discussion with @matthutchinson (at your convenience! a slow burn on this makes sense, no rush), beginning of a patch that refactors the CLI UI of lolcommits to be significantly more modular and easy to understand, byusing subcommands.  Previously, there was only one lolcommits "command", and actions were emulated by a bunch of logic around now different option flags were treated.  All flags were global so it was unclear what options were compatible with which actions, etc.  Now, with subcommands:

```
$ lolcommits --help
Usage:
    lolcommits [OPTIONS] SUBCOMMAND [ARG] ...

Parameters:
    SUBCOMMAND                    subcommand
    [ARG] ...                     subcommand arguments

Subcommands:
    enable                        Install lolcommits for current repository
    disable                       Uninstall lolcommits for current repository
    capture                       Capture image for most recent git commit
    history                       Historic archives of captured moments
    devices                       Detect and list attached camera devices
    plugins                       List or configure lolcommits plugins

Options:
    --version                     display version and exit
    --debug                       debug output (default: $LOLCOMMITS_DEBUG)
    -h, --help                    print help

$ lolcommits capture --help
Usage:
    lolcommits capture [OPTIONS]

Options:
    --device NAME                 Optional device name, see `lolcommits devices`.
                                   (default: $LOLCOMMITS_DEVICE)
    -a, --animate SECONDS         Enable animated .GIF capture for duration.
                                   (default: $LOLCOMMITS_ANIMATE, or 0)
    -w, --delay SECONDS           Delay capture to enable camera warmup.
                                   (default: $LOLCOMMITS_DELAY, or 0)
    --fork                        Fork capture process to background.
                                   (default: $LOLCOMMITS_FORK, or false)
    --stealth                     Capture image in stealth mode, e.g. no output.
                                   (default: $LOLCOMMITS_STEALTH, or false)
    -h, --help                    print help

$ lolcommits plugins --help
Usage:
    lolcommits plugins [OPTIONS] SUBCOMMAND [ARG] ...

Parameters:
    SUBCOMMAND                    subcommand
    [ARG] ...                     subcommand arguments

Subcommands:
    list                          List all available plugins
    config                        Configure a plugin
    show-config                   show config file

Options:
    -h, --help                    print help

$ lolcommits plugins list
# list of plugins outputted...

$ lolcommits plugins config slack
# etc...
```

Since we haven't hit v1.0 yet, we have a chance to make breaking changes to the UI.  So on the "road to 1.0" along with the plugin extraction, I'd like to bring this up for consideration.

The `bin/lolcommits` was one of the messiest areas of the code, so this also _starts_ on a refactor and cleanup (but trying to confine to the UI changes for now).

We get a lot for free from using Clamp here, such as automatic handling of environment variables linked to option flags (with validation of content type). This removes quite a bit of boilerplate from the code and I believe makes things more reliable.

Main purpose of this PR at present is to have a discussion about the UI tradeoffs here.

---

If we decide we _do_ want to go down this path, some other things we'll need to discuss:

- This  sets the stage for each of the commands to be broken into its own file and isolated, that can happen pretty quickly but I didn't want to do it just yet so we could more easily see where the duplication and redundancy was after porting over the CLI.  Obviously the BDD tests would need to be updated as well.
- This breaks the ability to pass a set of default options to the Installer stub on `enable`. Previously this took advantage of the side effect that all flags were global. While we could certainly duplicate the flags for enable, I think it's worth considering a different approach -- I'm not convinced putting UI flags in the stub is a good idea. (At a minimum, we'd probably want to change to installing these options as environment variable sets in the stub instead.)
- Rationalize what is going on with `change_dir_to_root_or_repo!`.  I think there might be a better way to accomplish this, but need to look into what the original impetus was. (Either way, it should probably be moved into a library and out of the CLI logic).
- Right now, this introduces one small dependency, but does not allow us to eliminate the Methadone dependency, since we rely on `Methadone::CLILogging` across the application.  We can preserve this dependency for logging but perhaps worth thinking about whether something else fits the needs better.  In any event, we also would need to refactor the CLILogging imports better, since previously it was Included into global scope in the main bin and all the places we called it sprinkled across the code seem to just rely on it being present.

P.S. Out of scope for this initial PR, but it makes me realize that it may be worthwhile longer term to refactor and rationalize the API of lolcommits outside of the command line binary.  It should probably be possible to move all the logic into the library such that the gem could be used from within Ruby with signature such as `Lolcommits.action_name(path, options)` taking a string and a *defined* Options struct, and the CLI code would simply then handle constructing the correct Options and displaying errors that are bubbled back up. This is obviously a fairly large project however.
Lolcommits works with Tower, only the `--fork` option doesn't work. Is this a known issue?