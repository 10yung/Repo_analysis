
Is there a way to extract the affected triangles after a runtime navmesh update?
As per the title, seems this feature set has been abandoned - isn't on the package manager...is it still worth using if future support is non existent now?
# Summary

- Bake a NavMesh using the NavMeshSurface
- Save the prefab (make sure no overrides in scene)
- Create a new object using the prefab -- NavMesh is not present

# Images showing an example 

Here is my prefab with the NavMeshBaked
![Screen Shot 2019-11-27 at 10 47 34 pm](https://user-images.githubusercontent.com/15642823/69721171-6101cb80-1168-11ea-8a8e-ee9547eedc9a.png)

Here is a copy of the prefab (obtained from the project folder)
![Screen Shot 2019-11-27 at 10 48 05 pm](https://user-images.githubusercontent.com/15642823/69721231-81ca2100-1168-11ea-8d4f-9027925f082c.png)

Notice how the new copy of the prefab does not have the NavMesh attached to it. 


Any guidance would be greatly appretiated! 

Observed throughout 19.3 preview releases, most recently on 2019.3.0b11. Crashes Samsung Galaxy S7 and Oculus Quest (and probably all Android based devices)

**Summary:** A baked NavMeshSurface crashes Android devices on enable when built with IL2CPP

**Detail:** The crash appears to happen within the NavMesh.AddNavMeshData() call from NavMeshSurface.AddData()

**Reproducibility:** 100% (5/5)

**Reproduction steps:**

1. Create a new project on 2019.3
2. Switch platform to Android, enable IL2CPP and .NET 4.x in player settings
3. Import NavMeshComponents
4. Add a NavMeshSurface and bake it (doesn't matter if there are any meshes to bake)
5. Run on an Android device, it should crash as soon as the scene loads

**ADB output:**
[adboutput.txt](https://github.com/Unity-Technologies/NavMeshComponents/files/3863394/adboutput.txt)

**Android Tombstone attached:**
[tombstone_02.txt](https://github.com/Unity-Technologies/NavMeshComponents/files/3863391/tombstone_02.txt)

**Reproduction Project:**
[NavMeshCrash.zip](https://github.com/Unity-Technologies/NavMeshComponents/files/3863505/NavMeshCrash.zip)
I have this horizontal elevator (white color) with moving NavMeshSurface and a NavMeshLink on the edge of a static platform. How to check if the NavMeshLink has turned blue i.e valid?
![image](https://user-images.githubusercontent.com/25344807/68844865-7995ce80-06f0-11ea-88d2-f905803042f9.png)

Is it possible to create a navmesh to represent a more complicated navigable scene. An example use case would be a solution to navigate ants/bugs in a kitchen. Able to walk on floors, walls, ceilings, counters, table/chair legs, etc..

Floors and counters are accomplished fairly easy with the demos that I've seen. Things start to break down for me when I want to navmesh the walls of a room and the sides of the counters and completely fall apart when trying to add tables/chairs as navigation surfaces.

Should I be making a navmesh surface for every surface group? 
How many navmesh surfaces can I use before performance issues will start to become an issue?
I think This would make sense to make this A Package in the Package Manager for easy access and smaller project sizes.
At the moment this would have to be editor time because GameObject.isStatic is an editor only check (if possible it would be cool to have this exposed at runtime but I imagine there are other ramifications there). This is ideal because now we have to rely on layers or some custom markup to tell objects whether or not to bake.
I've heard a common issue for folks using probuilder is that islands will appear inside buildings objects aligned flush with a ground object will have islands inside even if that's not intended. An obvious way to fix this would be to use an algorithm after baking to detect such cases and then remove those islands, but this isn't currently possible. First we need an API that allows the user to directly add or remove faces/islands from the bake result (maybe that's setting triangulation, maybe not). Second we need a callback to subscribe to after surfaces/navigation window finish baking.