Here is a checklist you should tick through before submitting a pull request: 
 - [x] Implementation is clean
 - [x] Code adheres to the existing coding standards; e.g. no curlies for one-line blocks, no redundant empty lines between methods or code blocks, spaces rather than tabs, etc.
 - [x] No ReSharper warnings
 - [x] There is proper unit test coverage
 - [ ] If the code is copied from StackOverflow (or a blog or OSS) full disclosure is included. That includes required license files and/or file headers explaining where the code came from with proper attribution
 - [x] There are very few or no comments (because comments shouldn't be needed if you write clean code)
 - [ ] Xml documentation is added/updated for the addition/change
 - [x] Your PR is (re)based on top of the latest commits from the `dev` branch (more info below)
 - [x] Link to the issue(s) you're fixing from your PR description. Use `fixes #<the issue number>`
 - [ ] Readme is updated if you change an existing feature or add a new one
 - [x] Run either `build.cmd` or `build.ps1` and ensure there are no test failures

Hello, now we have spanish translations:
1 => primero (Masculine)
3 => tercero (Masculine)
But when they come before nouns that are singular and masculine, primero and tercero are shortened to primer and tercer, respectively.

For example,
el primer presidente
el tercer capítulo

Need to fix it.
Hello, can you say something about the progress on this?  The report was published back in February 2018 and was answered after 1.5 years only in March 2019 ...
https://github.com/Humanizr/Humanizer/issues/689
Does this only work for English ?
Given this code

```
using System;
using System.Globalization;
using System.Threading;
using Humanizer;

namespace SingularAndPlural
{
    class Program
    {
        static void Main(string[] args)
        {
            string[] cultures = { "en-US", "no", "no-NB", "sv", "da", "fi-FI" };
            string[,] words =
            {
                {"School", "Sack", "Car", "Chicken", "Person", "Gastation","Man"},
                {"Skole", "Sekk", "Bil", "Kylling", "Person", "Bensinstasjon","Mann"},
                {"Skole", "Sekk", "Bil", "Kylling", "Person", "Bensinstasjon","Mann"},
                {"Skola", "säck", "Bil", "kyckling", "Person", "bensinstation","Man"},
                {"Skole", "Sæk", "Bil", "Kylling", "Person", "Tankstation", "Mand" },
                {"Koulu", "säkki", "auto", "kana", "henkilö", "huoltoasema", "ihminen"}
            };

            Console.WriteLine("\nBegin singular and plural words demo");
            Console.WriteLine("Example of Humanizer\n");

            Console.WriteLine("Current Culture "+ CultureInfo.CurrentCulture.Name);
            Console.WriteLine("Current UICulture " + CultureInfo.CurrentUICulture.Name);

            //foreach (string culture in cultures)
            for(int i = 0; i < cultures.Length;i++)
            {
                string culture = cultures[i];
                Console.WriteLine();
                Console.WriteLine("Setting CurrentThread Culture to");
                CultureInfo newCulture = CultureInfo.CreateSpecificCulture(culture);
                Thread.CurrentThread.CurrentUICulture = newCulture;
                CultureInfo ci = Thread.CurrentThread.CurrentCulture;
                CultureInfo ciUi = Thread.CurrentThread.CurrentUICulture;

                Console.WriteLine("CurrentThread Culture " + ci.Name);
                Console.WriteLine("CurrentThread UICulture " + ciUi.Name);
                Console.WriteLine();

                Console.WriteLine("Entall\t\tFlertall");
                //foreach (string word in words)
                for(int y = 0; y<7;y++)
                {
                    Console.WriteLine(words[i,y] + "\t\t" + words[i,y].Pluralize());
                }

                Console.WriteLine();
                Console.WriteLine(DateTime.Now.AddHours(-30).Humanize());
                Console.WriteLine(DateTime.UtcNow.AddHours(-2).Humanize());
                Console.WriteLine(DateTime.Now.AddHours(-30).Humanize(culture: ciUi));
                Console.WriteLine(3501.ToWords());
                Console.WriteLine(2019.ToRoman());
            }

            Console.WriteLine("\nEnd demo\n");
            Console.ReadLine();
        } // Main
    } // Program
}
```

Produces this output:



> Begin singular and plural words demo
> Example of Humanizer
> 
> Current Culture nb-NO
> Current UICulture nb-NO
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture en-US
> 
> Entall          Flertall
> School          Schools
> Sack            Sacks
> Car             Cars
> Chicken         Chickens
> Person          People
> Gastation               Gastations
> Man             Men
> 
> yesterday
> 2 hours ago
> yesterday
> three thousand five hundred and one
> MMXIX
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture nb-NO
> 
> Entall          Flertall
> Skole           Skoles
> Sekk            Sekks
> Bil             Bils
> Kylling         Kyllings
> Person          People
> Bensinstasjon           Bensinstasjons
> Mann            Manns
> 
> i går
> 2 timer siden
> i går
> tretusenfemhundreogen
> MMXIX
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture no-NB
> 
> Entall          Flertall
> Skole           Skoles
> Sekk            Sekks
> Bil             Bils
> Kylling         Kyllings
> Person          People
> Bensinstasjon           Bensinstasjons
> Mann            Manns
> 
> yesterday
> 2 hours ago
> yesterday
> three thousand five hundred and one
> MMXIX
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture sv-SE
> 
> Entall          Flertall
> Skola           Skolas
> säck            säcks
> Bil             Bils
> kyckling                kycklings
> Person          People
> bensinstation           bensinstations
> Man             Men
> 
> igår
> för 2 timmar sedan
> igår
> tre tusen femhundraett
> MMXIX
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture da-DK
> 
> Entall          Flertall
> Skole           Skoles
> Sæk             Sæks
> Bil             Bils
> Kylling         Kyllings
> Person          People
> Tankstation             Tankstations
> Mand            Mands
> 
> i går
> 2 timer siden
> i går
> three thousand five hundred and one
> MMXIX
> 
> Setting CurrentThread Culture to
> CurrentThread Culture nb-NO
> CurrentThread UICulture fi-FI
> 
> Entall          Flertall
> Koulu           Koulus
> säkki           säkkis
> auto            autos
> kana            kanas
> henkilö         henkilös
> huoltoasema             huoltoasemas
> ihminen         ihminens
> 
> eilen
> 2 tuntia sitten
> eilen
> kolmetuhatta viisisataayksi
> MMXIX
> 
> End demo



---
Am I to conclude that Pluralize() only supports English language or am I missing something here?

regards Harald
In the Readme, the documentation implies that default precision is .75 but it is not.

Upon rereading I think that the docs are not clear on this front - I can see how the sentence talking about the default precision referred to the example above it, as opposed to "default globally".  Maybe there is a wording change that can make it clear?
This fixes an issue I saw on SO below:
https://stackoverflow.com/questions/56550059/humanizer-months-weeks-days-hours

Basically you can't seem to get a value like "3 Months, 2 Weeks, 3 Days, 4 Hours" from calling the below:
new TimeSpan(109, 4, 0, 0, 0).Humanize(3, maxUnit: TimeUnit.Month)

This fixes that (and tests that therefore broke) by changing how we calculate Weeks and Days.

Also fixes #862 
Hi,

I get this error:

```
Nov 10 00:07:15 hypeproxy hypeproxy[15951]: System.ArgumentException: The resource object with key 'DateHumanize_MultipleMonthsAgo' was not found
Nov 10 00:07:15 hypeproxy hypeproxy[15951]: Parameter name: resourceKey
Nov 10 00:07:15 hypeproxy hypeproxy[15951]:    at Humanizer.Localisation.Formatters.DefaultFormatter.Format(String resourceKey, Int32 number, Boolean toWords) in d:\a\1\s\src\Humanizer\Localisation\Formatters\DefaultFormatter.cs:line 118
Nov 10 00:07:15 hypeproxy hypeproxy[15951]:    at Humanizer.DateTimeHumanizeStrategy.DateTimeHumanizeAlgorithms.DefaultHumanize(DateTime input, DateTime comparisonBase, CultureInfo culture) in d:\a\1\s\src\Humanizer\DateTimeHumanizeStrategy\DateTimeHumanizeAlgorithms.cs:line 171
Nov 10 00:07:15 hypeproxy hypeproxy[15951]:    at Humanizer.DateTimeHumanizeStrategy.DefaultDateTimeHumanizeStrategy.Humanize(DateTime input, DateTime comparisonBase, CultureInfo culture) in d:\a\1\s\src\Humanizer\DateTimeHumanizeStrategy\DefaultDateTimeHumanizeStrategy.cs:line 16
Nov 10 00:07:15 hypeproxy hypeproxy[15951]:    at Humanizer.DateHumanizeExtensions.Humanize(DateTime input, Boolean utcDate, Nullable`1 dateToCompareAgainst, CultureInfo culture) in d:\a\1\s\src\Humanizer\DateHumanizeExtensions.cs:line 24
```
Fixes #816 

Add support for the `Humanize()` method to work with other time expressions so that the user can select from the predefined.

@MehdiKhalili, @onovotny, @hazzik, @mexx Could you please review this? If the approach is good  I can continue updating the documentation and apply your suggestions.
Thank you.

##
Here is a checklist you should tick through before submitting a pull request: 
 - [x] Implementation is clean
 - [x] Code adheres to the existing coding standards; e.g. no curlies for one-line blocks, no redundant empty lines between methods or code blocks, spaces rather than tabs, etc.
 - [x] No ReSharper warnings
 - [x] There is proper unit test coverage
 - [x] If the code is copied from StackOverflow (or a blog or OSS) full disclosure is included. That includes required license files and/or file headers explaining where the code came from with proper attribution
 - [x] There are very few or no comments (because comments shouldn't be needed if you write clean code)
 - [ ] Xml documentation is added/updated for the addition/change
 - [x] Your PR is (re)based on top of the latest commits from the `dev` branch (more info below)
 - [x] Link to the issue(s) you're fixing from your PR description. Use `fixes #<the issue number>`
 - [ ] Readme is updated if you change an existing feature or add a new one
 - [x] Run either `build.cmd` or `build.ps1` and ensure there are no test failures

The [documentation](https://github.com/Humanizr/Humanizer#humanize-timespan) says: 

> In addition, a minimum unit of time may be specified to avoid rolling down to a smaller unit. For example:
`TimeSpan.FromMilliseconds(122500).Humanize(minUnit: TimeUnit.Second) => "2 minutes, 2 seconds"    // instead of 2 minutes, 2 seconds, 500 milliseconds`

When you run it on latest version you get different actual result:
`TimeSpan.FromMilliseconds(122500).Humanize(minUnit: Humanizer.Localisation.TimeUnit.Second) => "2 minutes"`

One scenario is when using `ToQuantity()`, which returns a string, format is most of the time necessary if it will be displayed to a user. One of the common formats is digit grouping, or using thousands separator.

Example:
`"second".ToQuantity(1000000)`

I believe in the above example, it would be better understood immediately if the digits are grouped, which is done by formatting the string such as `$"{1000000:n0}"` ([see MSDN document](https://docs.microsoft.com/en-us/dotnet/api/system.int32.tostring?view=netframework-4.8#System_Int32_ToString_System_String_)).

Without native Humanizer support for this, I need to implement something like the following to combine the **digit grouping, and humanizing**.

```
public static string ReplaceNumberInsideQuantifiedString(int number, string input)
{
    string stringNumber = number.ToString();
    string text = input.ToQuantity(number);
    return $"{number:n0} {text.Remove(0, stringNumber.Length)}";
}
```

Anyways, `ToQuantity()` is just a sample usage. Digit grouping may also be applicable to other Humanizer methods.