Using `set -x` in TAP mode breaks bats scripts if the test fails. The cause of the failure is that the `set -x` debug output interleaves with the regular output and breaks bats' parsing for extraction of the failure reason.

This problem can be fixed without modifications to bats. Bash allows setting the file descriptor written to by `set -x` with the variable `BASH_XTRACEFD`. To get the `set -x` debug output visible within a TAP mode bats test, set `BASH_XTRACEFD` to file descriptor 3. For example:

test.bats
```
#!/usr/bin/env bats

@test "foo" {
  BASH_XTRACEFD=3
  set -x

  ls $HOME && 0
}
```

and execute this with
```
bats -t test.bats
```

Please document this somewhere, the technique is very useful for troubleshooting bats scripts.
...in favor of bats-core.

@sstephenson Can you also archive this repository as well?
Reassigning IFS breaks things like when the test suite then attempts to check if `[[ $output = "${list[*]}". See https://github.com/exercism/bash/issues/382

I use bats with the other maintainers and mentors on the bash track at [exercism.io](https://exercism.io).

We include skips on our tests to encourage TDD, but when checking work it is often desirable to ignore the skips.  Most of us handle this with sed, but we are hoping to add a noskip flag option to bats.

Looking at your source it doesn't seem like it will be a big deal.
1. Add an agreed upon flag and option to the bats file.
2. Add a simple check inside the skip function.

If you all like this idea, then one of us can make the PR.  Thank you all for your hard work üòÅ
I am just started to learn the Docker technology. Using book "Docker on Amazon Web Services" by Justin Menga.
There is an example using the acceptance.bats file with the script

setup() {
  url=${APP_URL:-localhost:8000}
  item='{"title": "Wash the car", "order": 1}'
  location='Location: ([^[:space:]]*)'
  curl -X DELETE $url/todos
}
...
@test "create todo item" {
  run curl -i -X POST -H "Content-Type: application/json" $url/todos -d "$item"
  [ $status = 0 ]
  [[ $output =~ "201 Created" ]] || false
  [[ $output =~ $location ]] || false
  [ $(curl ${BASH_REMATCH[1]} | jq '.title') = $(echo "$item" | jq '.title') ]  <------- this gives the error
}

While run I get error message
acceptance_1  | # (in test file acceptance.bats, line 26)
acceptance_1  | #   `[ $(curl ${BASH_REMATCH[1]} | jq '.title') = $"Wash the car" ]' failed with status 2
acceptance_1  | #   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
acceptance_1  | #                                  Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
acceptance_1  | #   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
acceptance_1  | #                                  Dload  Upload   Total   Spent    Left  Speed
100    84  100    84    0     0   2470      0 --:--:-- --:--:-- --:--:--  2470
acceptance_1  | # /tmp/bats.1.src: line 26: [: too many arguments

Other tests run OK.
Can someone help to understand what is the bug in the script?
I am using Mac OSx
Thanks in advance
I've spent the last week using this library and only realized last night that I should be using bats-core as this one is no longer maintained. Could you change the status of this repo to mark it as no longer maintained please? Thanks!
Very often, tests have pre-requisites. This may be services to be on, packages to be installed, or others. When these pre-requisites are not present, depending tests fail with cryptic messages, generally causing a bunch of errors to be displayed, forcing the user to decrypt that all these errors have the same root cause.

The change proposed here adds a mechanism to check whether one or more previous tests succeeded. The idea is to skip depending tests when one or more pre-requisite tests fail. In such case, you will get only significant failure(s) and avoid a cascade of useless and disturbing error messages.

More details in the README.md file.
This looks like trouble.  Is it possible to use `printf %q` instead?  I can make a PR when I have a better understanding of your code.

https://github.com/sstephenson/bats/blob/03608115df2071fff4eaaff1605768c275e5f81f/libexec/bats-preprocess#L41-L42
Bats allows for setup and teardown functions inside individual test cases. Is there a way to have a setup script sourced at the start of the test run to establish convenience functions and the like? It's a pain to have to remember to `load` such a script at the top of every test script. Thanks.