[*] Checking for usernames. This may take a bit...
[*] Example command that will run: python2 /home/tester/Documents/icebreaker/submodules/ridenum/ridenum.py 10.3.10.43 500 50000 | tee -a logs/ridenum.log
Traceback (most recent call last):
  File "./icebreaker.py", line 1602, in <module>
    main(report, args)
  File "./icebreaker.py", line 1538, in main
    prev_creds, prev_users, domains = smb_reverse_brute(loop, hosts, args, passwords, prev_creds, prev_users, DCs)
  File "./icebreaker.py", line 618, in smb_reverse_brute
    ip_users, prev_users = get_usernames(ridenum_output, prev_users)
  File "./icebreaker.py", line 449, in get_usernames
    out_lines = host.splitlines()
AttributeError: 'NoneType' object has no attribute 'splitlines'
The script identified SMB signed hosts using smb-signing-mode. This script will not work for identifying Windows 10. You will need to update the script to include "smb2-security-mode".
Hey, would it be possible to have a flag to not add the local admin flag when running? As I run into lots of solutions which kill the connection immediately if this happens. Many thanks! 
Hi Dan,

Firstly, wow, what an amazing tool. I can see this making my life so much easier! Thanks so much. I have a couple of suggestions for improvements/enhancements:

1) It would be great to have an option to provide a list of addition usernames/emails in a text file that have been enumerated separately. This could also be automated by adding tool such as LinkedInt/Prowl/InSpy (Can do multiple as they use different methods, linkedint by company name on the site, prowl by search engine results). Incorporating these to scrape & generate usernames based on LinkedIn OSINT.

2) I know DeathStar uses bloodhound & empire to escalate through the network, but would it be possible to include Kerberoasting in here somewhere? Part of initial access using GetUserSPNs to get the tickets, run them through John with your custom list and add successes into Deathstar to give it more to work with? Putting the kerberos tickets into a separate file thats clearly marked would be great so they can be extracted & run through a more intensive cracking process if needed. 

Per the research by SensePost here:

https://sensepost.com/blog/2018/a-new-look-at-null-sessions-and-user-enumeration/ 

_"I found that when I used rpcclient against known vulnerable systems, that it would often produce error messages and fail to enumerate user information. In a penetration test scenario, this behaviour could make one believe that the remote system does not allow one to access the IPC$ share and execute RPC calls, while it could be possible."_

"_By default, rpcclient first opens the LSARPC pipe and then requests the remote system to execute the LsaOpenPolicy and LsaQueryInformationPolicy functions. If an anonymous user is not allowed to execute these function, rpcclient exits. Most RPC calls however donâ€™t require the information provided by these functions. In our test for example, the smb-enum-users script could still execute QueryDisplayInfo, and enumerate user information, without access to these functions."_

It seems that relying on rcpcclient could produce a false negative. 
would be really nice..
If the Responder-Session.log contains chars that are not UTF-8, when the program tries to call `readlines()` it crashes.  This can be fixed by appended `error='replace'` to the arguments when calling `open` on the file.
Would it be possible to have icebreaker send hashes to be cracked on a remote server over ssh as opposed to locally by JTR?
Just an enhancement/extra thing to work on for the future. It would be nice to be able to specify the added username and password if exploitation is successful. It will be useful in larger scope engagements where 'icebreaker' will not be quite as stealthy and the password can follow domain password complexity requirements.

Also reduce the possibility that third parties can potentially access internet facing devices that have had the icebreaker account added with the hardcoded credentials. 

*Edit for grammar