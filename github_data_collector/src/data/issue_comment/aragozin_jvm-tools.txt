I've analysed your codebase and noticed that `org.gridkit.jvmtool.jackson.NumberOutput` is not fully tested.
I've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).

Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important in a subsequent PR.

it would be nice to add more security to`mxpr`, for example, ability to specify user name & password for remote connection.

It would be also useful to add SSL, but it could be too much work.
The 0.13 was released several days ago, but there was no entry for it in the NEWS.

Also, added the `mprx` command to README
I'm trying to use your nice library in order to compute the retained size of an object, because I have a huge hprof file.

I used `HeapFactory.createHeap()`, because I see that `getRetainedSize()` is not implemeted for `FastHprofHeap`.

It works, the only thing is that it gives a different result compared with Yourkit or Eclipse Memory Analyzer (those two give the exact same number of bytes each time).

Example
```
                Map<Integer, String> map = new HashMap<>();
		for (int i = 0; i < numberOfItems; i++) {
			map.put(i, Integer.toString(i));
		}
```

The bigger the `numberOfItems`, the bigger the difference in retained size between this api and the standard tools.
E.g 
for 5 items, this library returns 730 and Yourkit and EMA return 544
for 10_000 items, this library returns 1,366,404 and Yourkit and EMA return 1,023,568

Any ideas? Thank you!
Hi, I had a bit of trouble working out how to connect your tool to my VM, and noticed that someone else had already raised that issue. So, when I made some progress, I figured I'd try to write up what I found in hopes it might be useful to others. 

Obviously, I'm totally new to your tool, so might have made all kinds of mistakes, but if you think this is close enough to be helpful, well, here it is. Also, if you think it needs more (or less) to be useful, don't hesitate to say so, and I'll attempt to improve this with your guidance.

Meanwhile, thanks for a very interesting looking tool. I'm excited to start discovering what it can do for me.
https://github.com/aragozin/jvm-tools/blob/0f9fcb920848423cb0103f2e015002adf0908a59/hprof-heap/src/main/java/org/netbeans/lib/profiler/heap/Bundle.properties#L1

Is this file really in the correct folder?
I ran into a trouble with 
```
Exception in thread "main" java.util.MissingResourceException: Can't find bundle for base name org/netbeans/lib/profiler/heap/Bundle, locale en_US
 	at java.util.ResourceBundle.throwMissingResourceException(ResourceBundle.java:1573)
 	at java.util.ResourceBundle.getBundleImpl(ResourceBundle.java:1396)
 	at java.util.ResourceBundle.getBundle(ResourceBundle.java:782)
 	at org.netbeans.lib.profiler.heap.HprofByteBuffer.readHeader(HprofByteBuffer.java:140)
```
and if I look into http://central.maven.org/maven2/org/gridkit/jvmtool/hprof-heap/0.10.1/hprof-heap-0.10.1.jar into folder `/org/netbeans/lib/profiler/heap` I don't see the Bundle.properties file there. 
AFAIK, the file should be located in `src/main/resources/org/netbeans/lib/profiler/heap`  instead of `src/main/java/org/netbeans/lib/profiler/heap`.
The reference relationship of objects on Java Heap is needed to debug memory leak
I know there are some tests exists, but javadoc for packages involved + minimal general description will be nice to have.