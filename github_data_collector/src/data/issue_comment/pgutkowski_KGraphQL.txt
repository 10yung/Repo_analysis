Hi there,

I'd love to use the context functionality mentioned in #42, #47. But it seems as if release 0.3.1 that contains the relevant changes (omit introspection of the Context type) has never been build. @pgutkowski can you help here?

Cheers,
Martin


I have a class that has an `id` field, but I don't want to use it directly. Instead, I want to replace its implementation with a derivative function and type with another type. I want to do this by just adding a replacement field of the same name. But this requires to `ignore` the original property, which is strange.

My expectation is that if creating a new field with the same name that it would automatically ignore the original property. 
Allows reusing the same kotlin type (with a different name attribute) in a gql type and a gql inputType.

Avoids many useless kotlin type duplication to circumvent GraphQL constraint that output types cannot be input types (even when it's totally legit).

Example use :

val schema = KGraphQL.schema {
    inputType<MyKotlinType>() {
        name="TypeAsInput"
    }
    type<MyKotlinType>() {
        name="TypeAsObject"
    }
}
Many times a project already has Services with methods.  These methods can have many arguments and it is tedious to expose them with the lambda style that is currently supported.  

These changes allow using KFunction method references which include all argument information and reduce boilerplate.

For example:
```kotlin
val mlService = MovieLensService(MovieRepository, GenresRepository, OccupationRepository, RatingRepository, UserRepository)

val schema = KGraphQL.schema{
    query("allUsers"){
        resolver{ -> mlService.getAllUsers() }
    }

    query("getUser"){
        resolver{ id: Int -> mlService.getUser(id) }
    }

    mutation("createUser"){
        resolver{ age: Int, gender: String, occupationId: Long, zipCode: String ->  mlService.createUser(age, gender, occupationId, zipCode) }
    }
}
```

becomes:

```kotlin
val mlService = MovieLensService(MovieRepository, GenresRepository, OccupationRepository, RatingRepository, UserRepository)

val schema = KGraphQL.schema{
    query("allUsers"){
        mlService::getAllUsers.toResolver()
    }

    query("getUser"){
        mlService::getUser.toResolver()
    }

    mutation("createUser"){
        mlService::createUser.toResolver()
    }
}
```
when creating     val appSchema = AppSchema(userServiceImpl) get error, somth wrong with coroutines syntax. Error appear when we try to create schema     val schema = KGraphQL.schema {

```
> 
> Exception in thread "main" java.lang.reflect.InvocationTargetException
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97)
> 	at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Static.call(CallerImpl.kt:106)
> 	at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflect_api(KCallableImpl.kt:166)
> 	at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:110)
> 	at io.ktor.server.engine.ApplicationEngineEnvironmentReloading.callFunctionWithInjection(ApplicationEngineEnvironmentReloading.kt:349)
> 	at io.ktor.server.engine.ApplicationEngineEnvironmentReloading.executeModuleFunction(ApplicationEngineEnvironmentReloading.kt:299)
> 	at io.ktor.server.engine.ApplicationEngineEnvironmentReloading.instantiateAndConfigureApplication(ApplicationEngineEnvironmentReloading.kt:275)
> 	at io.ktor.server.engine.ApplicationEngineEnvironmentReloading.createApplication(ApplicationEngineEnvironmentReloading.kt:127)
> 	at io.ktor.server.engine.ApplicationEngineEnvironmentReloading.start(ApplicationEngineEnvironmentReloading.kt:247)
> 	at io.ktor.server.netty.NettyApplicationEngine.start(NettyApplicationEngine.kt:106)
> 	at io.ktor.server.netty.NettyApplicationEngine.start(NettyApplicationEngine.kt:18)
> 	at io.ktor.server.engine.ApplicationEngine$DefaultImpls.start$default(ApplicationEngine.kt:52)
> 	at io.ktor.server.netty.EngineMain.main(EngineMain.kt:17)
> 	at com.fashion.ApplicationKt.main(Application.kt:34)
> Caused by: java.lang.NoClassDefFoundError: kotlinx/coroutines/experimental/CommonPool
> 	at com.github.pgutkowski.kgraphql.schema.dsl.SchemaConfigurationDSL.<init>(SchemaConfigurationDSL.kt:16)
> 	at com.github.pgutkowski.kgraphql.schema.dsl.SchemaBuilder.<init>(SchemaBuilder.kt:18)
> 	at com.github.pgutkowski.kgraphql.KGraphQL$Companion.schema(KGraphQL.kt:8)
> 	at db.graphql.AppSchema.<init>(AppSchema.kt:8)
> 	at web.UserRoutesKt.users(UserRoutes.kt:18)
> 	at com.fashion.ApplicationKt$module$5.invoke(Application.kt:94)
> 	at com.fashion.ApplicationKt$module$5.invoke(Application.kt)
> 	at io.ktor.routing.Routing$Feature.install(Routing.kt:92)
> 	at io.ktor.routing.Routing$Feature.install(Routing.kt:78)
> 	at io.ktor.application.ApplicationFeatureKt.install(ApplicationFeature.kt:59)
> 	at io.ktor.routing.RoutingKt.routing(Routing.kt:121)
> 	at com.fashion.ApplicationKt.module(Application.kt:87)
> 	at com.fashion.ApplicationKt.module$default(Application.kt:38)
> 	... 18 more
> Caused by: java.lang.ClassNotFoundException: kotlinx.coroutines.experimental.CommonPool
> 	at java.net.URLClassLoader.findClass(URLClassLoader.java:381)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
> 	at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)
> 	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
> 	... 31 more
```

Implement [DataLoader](https://github.com/facebook/dataloader) style.

I've been thinking about a structure like this:

```kotlin
...
data class Tree(val id: String, val parentId: String?)
...
type<Tree> {
    // String - defines the key that will be sent from the [prepare] into [loader]
    // List<Tree> - defines the return type that the [loader] is required to return.
    // the loader is then required to return it in a map format like Map<String, List<Tree>>
    dataProperty<String, List<Tree>>("children") {
        // Step 2: This will only be called once.
        loader { keys: List<String> ->
            keys.map{ id -> id to listOf(Tree("SomeId", id)) }.toMap()
        }
    
        // Step 1: This will be called for each node in the list, or only once if it's not a list
        prepare { parent: Tree -> parent.id }
    }
}
```

_Anyone is welcome with some input on how this could be achieved._
It should be possible to use suspendable unionproperty resolvers also.

_With a few more lines of code, this should be possible to fix alongside #38_ 
There are a number of variables and functions that are declared at top level and leak through since they are not marked as `internal`. 

An example could be the `val OPERANDS = ...` in `RequestPreProcessing.kt`. There are many more. 

This pollutes the global scope. 
I ran into an exception when trying to send a query with windows line endings. 

This PR adds `\r` to the ignored characters. 
Defining variables that either have an array or required array, didn't get parsed correctly. This fixes both `$ids: [Int]` and `$ids: [Int!]!`