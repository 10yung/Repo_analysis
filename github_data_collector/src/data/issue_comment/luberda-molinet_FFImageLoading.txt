## üêõ Bug Report

The following exception is thrown when trying to load an SVG via SvgCachedImage in a Xamarin Forms Tizen .NET TV (6.0.0.14995) project. I've attached a sample project demonstrating this.

Could not load file or assembly 'SkiaSharp, Version=1.68.0.0, Culture=neutral, PublicKeyToken=0738eb9f132ed756'. The located assembly's manifest definition does not match the assembly reference. (0x80131040)

Regular images (e.g. png) load fine using the CachedImage control.

SVGs work as expected in an Android project using the same code.

### Expected behavior

The SVG should render.

### Reproduction steps

- Use the Visual Studio templates to create a Tizen.NET Xamarin Forms project.
- Add FFImageLoading dependencies as described in the docs
- Add an SvgCachedImage
- Run the application and see the exception

[TizenXamlApp1.zip](https://github.com/luberda-molinet/FFImageLoading/files/4043452/TizenXamlApp1.zip)

### Configuration

**Version:**

2.4.11.982



**Platform:** 
- [ ] :iphone: iOS
- [ ] :robot: Android
- [ ] :checkered_flag: WPF
- [ ] :earth_americas: UWP
- [ ] :apple: MacOS
- [ ] :tv: tvOS
- [x] :monkey: Xamarin.Forms (Tizen)


Hi,

I had a question concerning the documentation for Xamarin.Native SVG support [here](https://github.com/luberda-molinet/FFImageLoading/wiki/SVG-support#xamarinandroid):

In the sample code it calls `LoadFile`:

    ImageService.Instance
		.LoadFile("image.svg")
        .
        .

In order for this to work, where in the project must image.svg be placed?
And what is the Build Type for image.svg (Content, AndroidRersource, etc.)?
And is it the same behavior for iOS?

I'm having trouble getting it to work. I placed my svg in the drawable directory with a build type of AndroidResource.

 of the cached image file and consistently call `FileWriteFinished` event handler. 

### :sparkles: What kind of change does this PR introduce? (Bug fix, feature, docs update...)
Bug fix

### :arrow_heading_down: What is the current behavior?
The `FileWriteInfo.FilePath` is consistently set to `null` when `FileWriteFinished` is called. 

### :new: What is the new behavior (if this is a feature change)?
`FileWriteInfo.FilePath` contains the path the the cached image file.

### :boom: Does this PR introduce a breaking change?
Yes, I'm looking to release my app, [Spitzer](https://github.com/gitizenme/spitzer) by the end of the month to coincide with the decommissioning of the [Spitzer Space Telescope](http://www.spitzer.caltech.edu/final-voyage)

### :bug: Recommendations for testing
Review the code changes in this PR, run the FFImageLoading sample apps and unit tests. 

### :memo: Links to relevant issues/docs
#446 is related, which this PR also addresses.
Also of note: I am forcing a call to `CachedImage.InvalidateCache` in order to generate a call to `FileWriteFinished`, otherwise the image is returned from the cache and the `ImageInformation.FilePath` property is null on the call to `Success`.

### :thinking: Checklist before submitting

- [x] All projects build - I am unable to build on Windows or Tizen
- [x] Follows style guide lines 
- [x] Relevant documentation was updated - no updates necessary
- [x] Rebased onto current develop - current with master branch

## üí¨ Questions and Help

Hi I am trying to crop an image using this package. Unfortunately the image does not return cropped. It is returning with no changes made from `CachedImage`. Are we doing it wrong?

```
private byte[] CropImage(byte[] photoData, int crop_x, int crop_y, int width, int height)
{
    var cachedImage = new CachedImage()
    {
        HorizontalOptions = LayoutOptions.FillAndExpand,
        VerticalOptions = LayoutOptions.FillAndExpand,
        DownsampleToViewSize = true,
        Transformations = new System.Collections.Generic.List<FFImageLoading.Work.ITransformation>() {
            new CropTransformation(0, crop_x, crop_y, width, height)
        },
        Source = ImageSource.FromStream(() => new MemoryStream(photoData))
    };
    cachedImage.ReloadImage();

    Image img = new Image();
    img.Source = cachedImage.Source;

    StreamImageSource streamImageSource = (StreamImageSource)img.Source;
    System.Threading.CancellationToken cancellationToken 
        = System.Threading.CancellationToken.None;
    Task<Stream> task = streamImageSource.Stream(cancellationToken);
    Stream stream = task.Result;

    using (MemoryStream ms = new MemoryStream())
    {
        stream.CopyTo(ms);
        return ms.ToArray();
    }
}
```
## üêõ Bug Report
Not all svg images are rendered properly. Some of them are not shown in the screen.
I just opened these svgs, trying to find the differences and see that the svgs that are not working are those that contain a tag attribute.



 

### Expected behavior
All svg images that are shown in the browser, expected to rendered properly on the devices.

### Reproduction steps
Create a new project. Follow the set up instructions of the plugin.
Download the attached SVGs from here. 
[svgs.zip](https://github.com/luberda-molinet/FFImageLoading/files/3967085/svgs.zip)
Import the svgs into your project and try to show them in the screen. 



### Configuration

**Version:** 2.4.11.982

**Platform:** 
- [x] :robot: Android
- [x] :monkey: Xamarin.Forms

Hi,
Firstly, thank you for this wonderful package.
I use SvgCachedImage and i set the color of the images dynamically. 
But for some reason doesn't work with triggers. 
See the code below:
`<?xml version="1.0" encoding="utf-8" ?>
<ContentPage xmlns="http://xamarin.com/schemas/2014/forms"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:d="http://xamarin.com/schemas/2014/forms/design"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             mc:Ignorable="d"
             x:Class="DemoFFImageLoading.MainPage"
             xmlns:ffSvg="clr-namespace:FFImageLoading.Svg.Forms;assembly=FFImageLoading.Svg.Forms"
             xmlns:ffTransformation="clr-namespace:FFImageLoading.Transformations;assembly=FFImageLoading.Transformations">
             

    <StackLayout VerticalOptions="FillAndExpand" HorizontalOptions="FillAndExpand" Margin="20">
        <!-- Place new controls here -->
        <StackLayout VerticalOptions="Center" HorizontalOptions="Center">
            <Label Text="" FontAttributes="Bold" 
                   HorizontalOptions="Center"
                    VerticalOptions="CenterAndExpand">
                <Label.Triggers>
                    <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference btnSwitch},Path=IsToggled}" Value="True">
                        <Setter Property="Text" Value="The Switch is Toggled"/>
                    </DataTrigger>
                    <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference btnSwitch},Path=IsToggled}" Value="False">
                        <Setter Property="Text" Value="The Switch is NOT Toggled"/>
                    </DataTrigger>
                </Label.Triggers>
            </Label>
            <ffSvg:SvgCachedImage x:Name="svgImage" Source="eye.svg" HeightRequest="100" WidthRequest="100">
                <ffSvg:SvgCachedImage.Transformations>
                    <ffTransformation:TintTransformation HexColor="#03fc41" EnableSolidColor="True"/>
                </ffSvg:SvgCachedImage.Transformations>
                <ffSvg:SvgCachedImage.Triggers>
                    <DataTrigger TargetType="ffSvg:SvgCachedImage" Binding="{Binding Source={x:Reference btnSwitch},Path=IsToggled}" Value="True">
                        <Setter Property="Transformations">
                            <Setter.Value>
                                <ffTransformation:TintTransformation HexColor="#00bef6" EnableSolidColor="True"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger TargetType="ffSvg:SvgCachedImage" Binding="{Binding Source={x:Reference btnSwitch},Path=IsToggled}" Value="False">
                        <Setter Property="Transformations">
                            <Setter.Value>
                                <ffTransformation:TintTransformation HexColor="#000000" EnableSolidColor="True"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </ffSvg:SvgCachedImage.Triggers>
            </ffSvg:SvgCachedImage>
            <Switch x:Name="btnSwitch" IsToggled="False" HorizontalOptions="Center"/>
        </StackLayout>
    </StackLayout>

</ContentPage>
`
If set the Transformation in code behind it works but with the use of Triggers doesn't.
I would like to know if i miss something.
Thanks 

## üí¨ Questions and Help
Hi,

I don't remember exactly, but from some time, if I apply CircularTransform to the image in one place, in another place the image is displayed as circular even the Circular Transform is not applied in another place. 

I am using a custom cache key for every Image URL. Here is the code for more understanding,

```
public class CustomCacheKeyFactory : ICacheKeyFactory
    {
        public string GetKey(Xamarin.Forms.ImageSource imageSource, object bindingContext)
        {
            if (imageSource == null)
                return null;

            if (imageSource is CustomStreamImageSource customStreamImageSource)
                return customStreamImageSource.Key;

            if (imageSource is StreamImageSource streamImageSource)
                return streamImageSource.Stream.GetHashCode().ToString();

            if (imageSource is FileImageSource fileImageSource)
                return fileImageSource.File;

            throw new NotImplementedException("ImageSource type not supported");
        }
    }

public class CustomStreamImageSource : StreamImageSource
    {
        public string Key { get; set; }
        public string Url { get; set; }

        public static CustomStreamImageSource FromUrlAndKey(string url, string key, bool saveInGallery = false)
        {
            var source = new CustomStreamImageSource
            {
                Key = key,
                Url = url
            };

            source.Stream = new ImageStreamFetcher(url, key, saveInGallery).GetStream;
            return source;
        }
    }

public class ImageStreamFetcher
    {
        public string Url { get; set; }
        public string Key { get; set; }
        public bool SaveInGallery { get; set; }

        public ImageStreamFetcher(string url, string key)
        {
            this.Url = url;
            this.Key = key;
            this.SaveInGallery = false;
        }

        public ImageStreamFetcher(string url, string key, bool saveInGallery)
        {
            this.Url = url;
            this.Key = key;
            this.SaveInGallery = saveInGallery;
        }

        public async Task<Stream> GetStream(CancellationToken token)
        {
            try
            {
                byte[] byteArray;

                var task = ImageService.Instance.LoadUrl(this.Url).CacheKey(this.Key).WithCache(FFImageLoading.Cache.CacheType.All);
                var cacheStream = await ImageService.Instance.Config.DownloadCache.DownloadAndCacheIfNeededAsync(this.Url, task, ImageService.Instance.Config, token);

                using (cacheStream.ImageStream)
                using (var memoryStream = new MemoryStream())
                {
                    await cacheStream.ImageStream.CopyToAsync(memoryStream);
                    byteArray = memoryStream.ToArray();
                }

                if (this.SaveInGallery)
                {
#if __ANDROID__
                    var imagePlugin = AutofacUtil.Instance.Resolve<IImagePlugin>();
                    imagePlugin.StoreChatPhotoBytesIntoGallery(Url, byteArray);
#endif
                }

                return new MemoryStream(byteArray);
            }
            catch (Exception ex)
            {
                IraTripsLog.Error(ex);
                return null;
            }
        }
    }

                                    <ffimageloading:CachedImage
                                        Aspect="AspectFill"
                                        HeightRequest="48"
                                        IsVisible="{Binding Participant.User, Converter={StaticResource NullVisibilityConverter}}"
                                        Source="{Binding ProfilePhotoTag, Converter={StaticResource ImageSourceConverter}, ConverterParameter=profile}"
                                        WidthRequest="48">
                                        <ffimageloading:CachedImage.CacheKeyFactory>
                                            <imaging:CustomCacheKeyFactory />
                                        </ffimageloading:CachedImage.CacheKeyFactory>
                                    </ffimageloading:CachedImage>
```


For us, this issue is open for a long time. Any clue/help would be very helpful.

## üêõ Bug Report

When the CSS style has multiple attributes for a same key, Item already exists in dictionary Exception was thrown. 

### Expected behavior
It should render the SVG image if it has multiple attributes with the same key in the CSS style.

### Reproduction steps
Try to load the given style.
`<style>.a,.b,.h,.k,.n{fill:none;}.b{clip-rule:evenodd;}.c,.m{fill:#fff;}.c,.h,.k,.n{stroke:#000;}.d{font-size:12px;font-family:segoe ui, Mobile Akkurat;}.e{clip-path:url(#a);}.f{font-size:10px;font-family:Helvetica;letter-spacing:0.001em;}.g{clip-path:url(#b);}.h{stroke-linecap:square;}.h,.k{stroke-linejoin:round;}.i{clip-path:url(#c);}.j{fill:#d7d7d7;}.l{clip-path:url(#f);}.n{stroke-width:2px;}.o{stroke:none;}</style>`

### Configuration

**Version:** 2.4.11.982

**Platform:** 
- :iphone: iOS
- :robot: Android
- :monkey: Xamarin.Forms

### :sparkles: What kind of change does this PR introduce? (Bug fix, feature, docs update...)
 * Remove all interop call to the native libs
 Fix : https://github.com/luberda-molinet/FFImageLoading/issues/1388


### :arrow_heading_down: What is the current behavior?
 * Some Tizen devices was not allow interop call to the  builtins native libs, so can't run on these device

### :new: What is the new behavior (if this is a feature change)?
 * Remove All interop call, so can run on all tizen devices, but some version of tizen does not support Downsample feature

### :boom: Does this PR introduce a breaking change?
 No

### :bug: Recommendations for testing
 No

### :memo: Links to relevant issues/docs
 Fix : https://github.com/luberda-molinet/FFImageLoading/issues/1388

### :thinking: Checklist before submitting

- [ ] All projects build
- [x] Follows style guide lines 
- [x] Relevant documentation was updated
- [x] Rebased onto current develop



I'm using a Api to fill a my listview with products There are  2 Types Simple(Single) Variations(Multi)
The Image directory for both are different I dont want to use 2 separate listviews for this is there a way to bind to one and if that one is empty bind to another

I did try 

Source="{Binding images[0], TargetNullValue={Binding image.src}}">

Dint seem to the job unless I have something wrong


