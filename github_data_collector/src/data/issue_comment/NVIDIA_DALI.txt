Signed-off-by: Janusz Lisiecki <jlisiecki@nvidia.com>

#### Why we need this PR?
*Pick one, remove the rest*
- It adds new feature needed because of may need to support python 2.7 a bit longer

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
     Fixes test dependencies to support python 2.7
 - Affected modules and functionalities:
     SSD test
 - Key points relevant for the review:
     NA
 - Validation and testing:
     CI
 - Documentation (including examples):
     NA


**JIRA TASK**: *[NA]*

Signed-off-by: Joaquin Anton <janton@nvidia.com>

#### Why we need this PR?
*Pick one, remove the rest*
- It fixes a bug in ImageDecoder benchmark tests

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
Setting external source data in every iteration, as it is required now
 - Affected modules and functionalities:
ImageDecoder benchmark
 - Key points relevant for the review:
All
 - Validation and testing:
Changes are in test code itself
 - Documentation (including examples):
N/A

**JIRA TASK**: *[Use DALI-XXXX or NA]*

#### Why we need this PR?
- It adds Normalize operator
- Refactoring to improve usability of NormalizeCPU kernel

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
     * Normalize operator setup - broken down into many use cases
 - Affected modules and functionalities:
     * operators
     * NormalizeCPU kernel
 - Key points relevant for the review:
     * Operator setup (and to lesser extent) run
 - Validation and testing:
     * Kernel: unit tests
     * Operator: **TODO**
 - Documentation (including examples):
     * Docstrings
     * Examples: ** TODO **


**JIRA TASK**: DALI-1242

- MXNet model function expects NDArray or DataIter so DALIGenericIterator  fails to work in that case

Signed-off-by: Janusz Lisiecki <jlisiecki@nvidia.com>

#### Why we need this PR?
- It fixes a bug that MXNet DALIGenericIterator is not descendant of DataIter and model function expecting NDArray or DataIter fails to work with DALI

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
     Make DataIter a base class for MXNet DALIGenericIterator
    Relates to https://github.com/NVIDIA/DALI/issues/1663
 - Affected modules and functionalities:
     plugin/mxnet.py
 - Key points relevant for the review:
     NA
 - Validation and testing:
     A test is added
 - Documentation (including examples):
     No


**JIRA TASK**: *[NA]*

#### Why we need this PR?
Add new kernel: MovingMeanSquared, which is required for NonsilenceRegion operator

**JIRA TASK**: *[NA]*

Hi,

Is there any way to figure out which video sequence I'm getting from the VideoReader?
In other words, is it possible to know which video file is read, and which frames in the video files are read?

I have a model that uses another feature of the video and I need to know what exactly happened to the video so that I can load the correct feature.

Thank you in advance.
#### Why we need this PR?
- It adds new feature - GPU TorchPythonFunction

#### What happened in this PR?
 - What solution was applied:
     *Almost no work was needed, as current TorchPythonFunction was able to handle gpu data. The only thing needed was proper synchronization.*
 - Affected modules and functionalities:
     *PyTorch plugin*
 - Key points relevant for the review:
     *GPU synchronization and documentation.*
 - Validation and testing:
     *Extended existing tests to GPU*
 - Documentation (including examples):
     *operator documentation*


**JIRA TASK**: *[NA]*



I'm currently using NVIDIA Dali `0.17.0` nightly built for Python. I'm working with video and I'm keen to try out data augmentation on video frames such as:

 **Random Scaling** - Apply scale the aspect ratio to `height:width` a sequence of video frames, where aspect ratio  is chosen randomly from e.g. [0.8, 1.25] for frames in entire sequence

** Random Crop** - Apply random crop for `crop_size =(w, h)` for video frames at random point, but still within the original frame size.

**Random Horizontal Flip** - Apply Flip randomly with probability e.g. 0.5

I noted that those operations are supported already for Image. But how about for input videos from `ops.VideoReader()`. It would be nice if I can do some sort of:

```
# video pipeline definition
self.video_reader = ops.VideoReader(.....)
self.video_scale = ops.RandomlyScaleVideo(...)  # input NFCHW or NFHWC
self.video_random_crop = ops.RandomlyCropVideo(...)  # input NFCHW or NFHWC
self.video_horizontal_crop = ops/RandomlyFlip(...) # input NFCHW or NFHWC
...
```

### Issue

I tried using the available operations in NVIDIA DALI:
- `ops.Flip`
- `ops.RandomResizedCrop` with `random_aspect_ratio`

But it seems those operations only support image input `HWC` . The program I run output an error complaining mismatch for shape, and only expect output_layout `HWC`.

### Questions
So my questions are:
1. Can I used the available operations for video? Please do point me out if I can use those operations for video frames with `NFCHW` or `NFHWC` input. I notice some operations only support Image `HWC`?
2. If do, how do I specify to the operations that I'm inputing video frames, not single image.


- uses the custom read-write-seek libav API that allows providing custom accessing function. This function opens the required file on demand. The previously accessed file is closed automatically.
- it is faster than calling avformat_open_input after each file reopen
- add test to check if DALI can handle more than 1024 video files at once

Signed-off-by: Janusz Lisiecki <jlisiecki@nvidia.com>

#### Why we need this PR?
*Pick one, remove the rest*
- It adds new feature needed because of VideoReader can easily hit the OS file-max limit of opened files (usually 1024)

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
     Uses the custom read-write-seek libav API that allows providing custom accessing function. This function opens the required file on demand. The previously accessed file is closed automatically.
     It is faster than calling avformat_open_input after each file reopen
 - Affected modules and functionalities:
     VideoReader
 - Key points relevant for the review:
     get_or_open_file function 
 - Validation and testing:
     Test is added
 - Documentation (including examples):
     NA

Related to https://github.com/NVIDIA/DALI/issues/1651

**JIRA TASK**: *[]*

This operator is required for RNN-T support in Dali.
Operator performs silence detection in an audio buffer. It returns begin index of nonsilent region and its length.

#### Why we need this PR?
*Pick one, remove the rest*
- To support RNN-T in Dali

#### What happened in this PR?
*Fill relevant points, put NA otherwise. Replace anything inside []*
 - What solution was applied:
     *Added new operator*
 - Validation and testing:
     *Python and GTest unit tests*
 - Documentation (including examples):
     *Documentation in tests*


**JIRA TASK**: *NA*
