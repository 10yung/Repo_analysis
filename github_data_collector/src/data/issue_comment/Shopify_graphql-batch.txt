I want to use GraphQL::Batch to load arguments for running mutations and it's not clear to me from reading the documentation if it is safe for me to use GraphQL::Batch.batch wherever I feel the need in my application. The note in the documentation refers only to using this in unit tests.

Can you provide clarification on whether GraphQL::Batch.batch can be safely used outside the test environment?
Hi:

My graphql-ruby version is 1.9.6, and I use the [association loader](https://github.com/Shopify/graphql-batch/blob/master/examples/association_loader.rb) in the example directory


I have these models: Route, RoutesStop, and Stop

Route has this association:
`has_many :stops, -> { order 'route_stops.order' }, through: :route_stops`

When I use association loader to load `stops` field in my RouteType, I got this kind of issue:
`ActiveRecord::StatementInvalid (PG::UndefinedTable: ERROR:  missing FROM-clause entry for table "route_stops"` 

and the sql it actually execute is: 
`SELECT "stops".* FROM "stops" WHERE "stops"."id" IN (1, 12) ORDER BY route_stops.order`

How can I unscope the order scope of ActiveRecord::Relation to avoid the exception OR what can I do to deal with the exception, under the premise of not *removing* the scope in the has_many relationship definition

Thanks!


Can you explain this to me a little bit more?
```
  # We want to load the associations on all records, even if they have the same id
  def cache_key(record)
    record.object_id
  end
```
Which situation are we talking about here?
I don't know if this is a bug or just a dumb question, but let me explain it ðŸ˜„ 

Starting with this simple type:

```
class Types::ProjectType < Types::BaseNode
  graphql_name 'Project'

  field :title, String, null: false
  field :milestones, Types::MilestoneType.connection_type, null: false

  def milestones
    object.milestones
  end
end
```

And running this query:

```
query {
  projects(perPage: 10) {
    edges {
      node {
        title
        milestones {
          edges {
            node {
              title
            }
          }
        }
      }
    }
  }
}
```

Returns the desired result, but leads to this:

```
  Milestone Load (0.9ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 1]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 2]]
  Milestone Load (0.7ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 3]]
  Milestone Load (0.6ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 4]]
  Milestone Load (0.6ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 5]]
  Milestone Load (0.7ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 6]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 7]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 8]]
  Milestone Load (0.8ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 9]]
  Milestone Load (0.8ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 10]]
```

So I thought it would be good to use the AssociationLoader to eager load the milestones using this:

```
def milestones
  Loaders::AssociationLoader.for(Project, :milestones).load(object)
end
```

But this ends up in this:

```
  Milestone Load (0.7ms)  SELECT "milestones".* FROM "milestones" WHERE "milestones"."project_id" IN ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)  [["project_id", 1], ["project_id", 2], ["project_id", 3], ["project_id", 4], ["project_id", 5], ["project_id", 6], ["project_id", 7], ["project_id", 8], ["project_id", 9], ["project_id", 10]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 1]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 2]]
  Milestone Load (0.4ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 3]]
  Milestone Load (0.7ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 4]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 5]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 6]]
  Milestone Load (1.0ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 7]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 8]]
  Milestone Load (0.5ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 9]]
  Milestone Load (0.6ms)  SELECT milestones.*, milestones.id AS cursor_0 FROM "milestones" WHERE "milestones"."project_id" = $1 ORDER BY milestones.id asc  [["project_id", 10]]
Completed 200 OK in 497ms (Views: 0.4ms | ActiveRecord: 34.6ms)


user: peter_goebel
POST /graphql
AVOID eager loading detected
  Project => [:milestones]
  Remove from your finder: :includes => [:milestones]
Call stack
```

Why are all milestones still queried individually even with eager loading/preloading?
Hi everyone!

First, i would like to thank you for your awesome job on the OSS community!

I've probably a bug using `graphql-batch`.  I've duplicate reads of `replacements` associated records when i use the `AssociationLoader` class, only after a succeed mutation, not when i use a query. If i disable the batch it works well.

Any idea of what's going bad?

```
data: {,â€¦}
createMandate: {...}
errors: []
mandate: {â€¦}
[...]
replacements: [{id: "144", flexibleTime: false, endsAt: "2019-04-12T01:00:00Z", priority: false,â€¦},â€¦]
0: {id: "144", flexibleTime: false, endsAt: "2019-04-12T01:00:00Z", priority: false,â€¦}
1: {id: "145", flexibleTime: false, endsAt: "2019-04-13T01:00:00Z", priority: false,â€¦}
2: {id: "144", flexibleTime: false, endsAt: "2019-04-12T01:00:00Z", priority: false,â€¦}
3: {id: "145", flexibleTime: false, endsAt: "2019-04-13T01:00:00Z", priority: false,â€¦}
[...]
success: true
``` 

```ruby
# app/models/mandate.rb
class Mandate < ApplicationRecord
  has_many :replacements, class_name: 'Replacement', autosave: true, dependent: :destroy
  has_many :proposals, through: :replacements, class_name: 'Proposal'

  accepts_nested_attributes_for :replacements, allow_destroy: true
end
```

```ruby
# app/graphql/types/mandate.rb
class Types::Mandate < Types::BaseObject
  [..]
  field :replacements, [::Types::Replacement], "Mandate's replacements", null: false
  [..]

  def replacements
    AssociationLoader.for(Mandate, :replacements).load(object)
  end
end
```

```ruby
# app/graphql/association_loader.rb
class AssociationLoader < GraphQL::Batch::Loader
  def self.validate(model, association_name)
    new(model, association_name)
    nil
  end

  def initialize(model, association_name)
    @model = model
    @association_name = association_name
    validate
  end

  def load(record)
    raise TypeError, "#{@model} loader can't load association for #{record.class}" unless record.is_a?(@model)
    return Promise.resolve(read_association(record)) if association_loaded?(record)
    super
  end

  # We want to load the associations on all records, even if they have the same id
  def cache_key(record)
    record.object_id
  end

  def perform(records)
    preload_association(records)
    records.each { |record| fulfill(record, read_association(record)) }
  end

  private

  def validate
    unless @model.reflect_on_association(@association_name)
      raise ArgumentError, "No association #{@association_name} on #{@model}"
    end
  end

  def preload_association(records)
    ::ActiveRecord::Associations::Preloader.new.preload(records, @association_name)
  end

  def read_association(record)
    record.public_send(@association_name)
  end

  def association_loaded?(record)
    record.association(@association_name).loaded?
  end
end
```
cc @Shopify/component-patterns

## Problem

We have tended to avoid using promises throughout out codebase and have instead relied on preloading associations.  However, as we split our codebase into components that aren't coupled to each other models, we are needing to stop relying on these associations for this purpose.

Instead, I would like a simple primitive that avoids the N+1 problem without having to think about promises, so that we can easily use a non-promise based component APIs.

## Solution

Add the concept of a batch loaded field which can be specified next to the field declaration like a typical resolver method.  However, instead of an instance method for the batch resolve method, a class method is used which is given an array of objects to load the field on.  For example,

```ruby
class Product < GraphQL::Schema::Object
  field :inventory_quantity, Int, null: false do
    extension GraphQL::Batch::LoadedFieldExtension
  end
  def self.inventory_quantity(instances)
    product_ids = instances.map { |instance| instance.object.id }
    quantities = ProductVariant.group(:product_id).where(product_id: product_ids).sum(:inventory_quantity)
    instances.each do |instance|
      instance.inventory_quantity = quantities.fetch(instance.object.id, 0)
    end
  end
```

The result is just assigned to an attribute writer on the GraphQL::Schema::Object instance, which fulfills the promise.  Since this relies on there being a graphql object to assign the result to, this
feature depends on the graphql gem's class-based API.

In addition to not having to think about promises, this feature also simplifies grouping.  It will automatically group by the graphql object class, field and arguments.  If either the `lookahead` or `irep_node` extras are used, it will group by their `ast_nodes` since that means it depends on the selections on the field.
The resolve_type seems to get the promise rather than the solved value:

      Target = GraphQL::UnionType.define do
        name 'MyTarget'

        possible_types [X::Type, Y::Type]
        resolve_type ->(obj, _ctx) do
            binding.pry #                            -> obj.class == GraphQL::Batch::Promise
            case o
              when X then X::Type
              when Y then Y::Type
            end
          end
        end

      Type = GraphQL::ObjectType.define do
        name 'MyType'

        field :id, !GraphQL::Common::ObjectId

        field :targets, !types[!Target]  do
          resolve ->(obj, _args, _ctx) do
            case obj.target_type
              when 'X' then obj.targets.map { |t| RecordLoader.for(X).load(t) }
              when 'Y' then obj.targets.map { |t| RecordLoader.for(Y).load(t) }
            end
          end
        end

```
This library is fantastic and thanks for publishing it!

In my testing, IDs are not always aggregated across multiple queries when `Schema#multiplex` is used. The promises do resolve correctly, but one DB query is made per multiplexed gql query.

[I found a test in this repo](https://github.com/Shopify/graphql-batch/blob/69a14c58dc27ab0f16fe55b99d51210dda0bd253/test/multiplex_test.rb#L23), which runs queries with `multiplex` and uses `QueryNotifier.subscriber` to assert that only 1 query is made, but my loader does not behave.

Current gem versions:

```ruby
gem "graphql", "=1.6.0"
gem "graphql-batch", "=0.3.9"
```

The loader in question is very simple:

```ruby
module Loaders
  class Single < ::GraphQL::Batch::Loader

    attr_reader :model, :options, :key

    def initialize(model_arg, options_arg = {})
      @model = model_arg
      @options = options_arg
      @key = options.fetch(:key, :id)
    end

    def perform(ids)
      model.where(key => ids).all.each(&method(:fulfill_record))
      ids.reject(&method(:fulfilled?)).each(&method(:fulfill_nil))
    end

    private

    def fulfill_record(record)
      fulfill(record.send(key), record)
    end

    def fulfill_nil(id)
      fulfill(id, nil)
    end

  end
end
```
In the README, a `CountLoader` example is named, but it's not particularly detailed:

```ruby
CountLoader.for(Shop, :smart_collections).load(context.shop_id),
CountLoader.for(Shop, :custom_collections).load(context.shop_id),
```

A clear example that demonstrates "You can also batch other stuff, not only load records from a DB" could be very helpful for new users. A great example would be something that does a HTTP request to some external API, combining two non-record-from-db-loading use cases.
Hey everyone,
i am searching for a possibility use the Loader for other columns then the key-column  to work with the following case:
I have some ContactModes and every ContactMode is either an Email or a Telephone number, the problem with the Loader is that the foreign-key is in the other table so I have to load email.contact_mode_id == self.id instead of email.id == contact_mode.email_id
```
In Types::ContactModeType:
  field :email do
    type types[Types::EmailType]
    resolve -> (contact_mode, args, ctx){
      Email.where(contact_mode_id: contact_mode.id)
    }
  end
  field :address do
    type types[Types::AddressType]
    resolve -> (contact_mode, args, ctx) {
      Address.where(contact_mode_id: contact_mode.id)
    }
  end
```

Is there any possibility to call the loader use Table.column instead of Table.id for Loading?
Thanks for answer