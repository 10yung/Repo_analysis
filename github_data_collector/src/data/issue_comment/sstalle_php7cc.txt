If I have some code that will not throw an error should not that be a warning instead? Here is the code that is throwing an error:

```
> Line 5: [Error] Name "object" that is reserved for future use (does not cause an error in PHP 7) used as a class, interface or trait name
    class Object implements \ArrayAccess, \Iterator
    {
    }
```

Related issue: https://github.com/EasyPost/easypost-php/issues/52
I am getting this error:
```
File:
> [Error] file_get_contents(): Filename cannot be empty. Processing aborted.
```

But is not showing the location (file) of the error.


Have anyone run into a similar issue?
I am getting some warnings that should not be warnings. Please correct me if I am wrong.

According to the PHP docs:

> Caution
> 
> If you use yield in an expression context (for example, on the right hand side of an assignment), you must surround the yield statement with parentheses in PHP 5. For example, this is valid:
> $data = (yield $value);
> 
> But this is not, and will result in a parse error in PHP 5:
> $data = yield $value;
> 
> The parenthetical restrictions do not apply in PHP 7. 

This means that in PHP 7 does not matter if yield uses `()` or not. However, If you are supporting backward compatible you should add the `()` around yield.

I am using an external package that is giving me this error: `[Warning] "yield" usage in expression context`

File: `/aws/aws-sdk-php/src/S3/S3MultiRegionClient.php`
```

    \GuzzleHttp\Promise\coroutine(function () use($handler, $command, $cacheKey) {
        try {
            (yield $handler($command));
        } catch (\Aws\S3\Exception\PermanentRedirectException $e) {
            if (empty($command['Bucket'])) {
                throw $e;
            }
            $result = $e->getResult();
            $region = null;
            if (isset($result['@metadata']['headers']['x-amz-bucket-region'])) {
                $region = $result['@metadata']['headers']['x-amz-bucket-region'];
                $this->cache->set($cacheKey, $region);
            } else {
                $region = (yield $this->determineBucketRegionAsync($command['Bucket']));
            }
            $command['@region'] = $region;
            (yield $handler($command));
        } catch (\Aws\Exception\AwsException $e) {
            if ($e->getAwsErrorCode() === 'AuthorizationHeaderMalformed') {
                $region = $this->determineBucketRegionFromExceptionBody($e->getResponse()->getBody());
                if (!empty($region)) {
                    $this->cache->set($cacheKey, $region);
                    $command['@region'] = $region;
                    (yield $handler($command));
                } else {
                    throw $e;
                }
            } else {
                throw $e;
            }
        }
    });

```

Looking over the `yield` implementations, it looks like we are wrapping them around `().` Any particular reason why I still get this error? Should we avoid this error if there is `()` around `yield`?
WTF: 
https://wiki.php.net/rfc/nullable_types

Error:
```
File: /app/vendor/symfony/config/Definition/BaseNode.php
> [Error] Syntax error, unexpected '?', expecting T_VARIABLE on line 39. Processing aborted.
```

Code:
```
    public function __construct(?string $name, NodeInterface $parent = null, array $values = array())
```


$var[not_defined_constant] = $other_var.

It is a warning in php 7 and will throw error in future versions. 

It should be $var['not_defined_constant'] = $other_var.

Are you planning on implementing it?

Thanks
The largest set of things that were missed in the code I checked was assignment of a reference to new object that was caught fine when it had =& but was missed everywhere the code had a space between the = and the &. Might be poor practice, but that's the code I had to work with.

I'm getting the above message on a file, but it doesn't tell me which line or any context. Is this some internal error, or a possibly a legit problem (`php -l` on the file says "no syntax errors detected"). If the former, I think php7cc should print out additional information so that the offending part can be easily identified.
- Migrated from PHP Parser 1.4 to PHP Parser 2.1

Applied https://github.com/nikic/PHP-Parser/blob/v3.1.1/UPGRADE-2.0.md

Tried non breaking approach using PREFER_PHP5.
Everything works.

- Migrated from PHP Parser 2.1 to PHP Parser 3.1

Applied https://github.com/nikic/PHP-Parser/blob/v3.1.1/UPGRADE-3.0.md

Dropped the support for older versions of PHP, as PHP Parser v3.1 requires 5.5+.
Removed older PHP versions from CI
Reformatted code to CS

**TODO**

fix visitors broken by new AST
- [ ] fix src/NodeVisitor/IndirectVariableOrMethodAccessVisitor.php

- [ ] fix src/NodeVisitor/YieldExpressionVisitor.php

- [ ] fix src/NodeVisitor/YieldInExpressionContextVisitor.php

- [ ] fix src/NodeVisitor/GlobalVariableVariableVisitor.php

- [ ] fix src/NodeVisitor/InvalidOctalLiteralVisitor.php

- [ ] fix src/NodeVisitor/NewAssignmentByReferenceVisitor.php
Would it be possible to allow globbing patterns in the exclude option? 
At least on OSX it should be 

    export PATH="$PATH:$HOME/.composer/vendor/bin"

not 

    export PATH="$PATH:$HOME/.config/composer/vendor/bin"

Not sure if the `.config` is working on other *nix versions?