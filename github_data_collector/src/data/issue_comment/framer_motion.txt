One common pattern seen in both iOS and Android is [Shared Element Transitions](https://developer.android.com/training/transitions/start-activity). Meaning that you can have an element transform from one state or place, into another. A good example of this is when you open an app in iOS, where you see the app icon transform into the app. That particular example is already possible with framer motion, but what is not possible is having that element change it's position in your app hierarchy. A good example is the video in the Android example I linked to above.

There's a [react-morph](https://github.com/brunnolou/react-morph), that does a similar thing. I think this feature would make for a great addition to framer-motion.

In terms of API, I'm not familiar enough with hooks still to give a good example on that front, but I could certainly see it working pretty well with the already existing exit prop and some kind of additional ID on the motion element that would detect when a motion element with the same ID has moved to another place in the app and transition the changes between those states.
**Is your feature request related to a problem? Please describe.**

When using regular target objects or variants with the `animate` attribute and setting `initial={false}`, it is easy to set initial style.

However, when using Animation Controls, there doesn't seem to be a way to set initial state.

**Describe the solution you'd like**

The ability to set an initial target object or variant using Animation Controls.

**Describe alternatives you've considered**

Initial styles can be set with other mechanisms, but then they must be overridden properly by the animation variants. It would be nice if you could just specify an initial variant.

## FAQs

### Does Framer Motion support Preact?
It might work with Preact, but we don't explicitly support it, so if it does currently work you'd be using it at your own risk.

I'm using Framer Motion with Reach Router to do page transitions. To do custom handling whenever an element is exiting or entering (to prep the element for animation, like `position: absolute`), I use the callbacks for `onAnimationStart` and `onAnimationComplete`. However, `onAnimationStart` seem to be triggered by other non-Framer Motion animations as well.  See  CodeSandbox https://codesandbox.io/s/elated-fog-23h6i where callback for `onAnimationStart` is confused by child CSS animation.

More specifically, this is my usecase: One of my screens has a fairy long animation that takes over 1s to finish (long after the actual animation done thru this lib), and when that CSS only driven animation ends, `onAnimationComplete` seem to be called twice. This is the order of calls:

1. Page enters, and  `onAnimationStart` is called
2. Page is done, and `onAnimationComplete` is called (600ms has now passed)
3. Other child component of Page now has a pure CSS animation that finishes, and `onAnimationStart` is now called twice. (around ~2s have now passed)

If I remove that animation, everything works like expected and only 1 and 2 happens. If I make the animation longer, the events still match up like above. 

The documentation makes it clear that these callbacks are only supposed to be called for properties in `animate,` and `onAnimationComplete` is also named differently, but that is not true for `onAnimationStart`.  Even so, capturing events in the custom component and doing `e.stopPropagation()` did not help. 

Is there something I'm missing here? Is this a  documentation problem? Essentially I  need to apply styling to an element _while_ it is animating, but not persist beyond that, how could I then do that without using these events?
**Is your feature request related to a problem? Please describe.**

It would be nice to be able to cancel tap events in `onTapStart()`, such that `onTap` and `onTapCancel` don't fire. See https://codesandbox.io/s/framer-motion-simple-animation-3iwmr for example. 

**Describe the solution you'd like**

 `event.preventDefault()` is called in `onTapStart()` or something is returned from `onTapStart()` that cancels the event.

**Describe alternatives you've considered**

Managing the state with refs.

# The useTransform bug framer-motion@1.7.0

A lot of MotionValues is retained generating a memory leak in server side render (SSR) on request several time a single page.

this is the test case:

```tsx
import { useViewportScroll, useTransform } from 'framer-motion';

const IndexPage: NextPage = () => {
  const { scrollYProgress } = useViewportScroll()
  const heroBackgroundSize = useTransform(scrollYProgress, value => `auto ${value*100+100}%`)
  return (
    <div>hello</div>
  )
}
export default IndexPage
```

going deep in this problem I found that if you don't use `useTransform` the problem is gone.
and then I try to destroy the motion value and that works too.

`if (!process.browser) heroBackgroundSize.destroy()`

clearly useTransform is not destroying the listeners when the page is destroyed. 

Also I test the same but creating all inside a component consumed by the index page and the problem persist. 




**1. Describe the bug
I have a problem with variants effect while using iPhone 6,7,8 plus. The others device work fine but in iphone 6,7,8 plus the effect need to touch again the screen or scroll then the sidebar or nav will show. Please help me tks so much

**2. IMPORTANT: Provide a CodeSandbox reproduction of the bug**
https://codesandbox.io/s/framer-motion-side-menu-mx2rw?fontsize=14&module=%2Fsrc%2FExample.tsx

With this example in iphone 6,7,8 it's not working with the background. Please help me to fix it please. 


Is there a way to chain animations together? React Spring has something called useChain and other examples would be GSAP's timeline? would be great to know how to start an animation when another has finished without using delays or anything like that.
**2. Describe the bug**

Image a hierarchy of two motion components, where the parent has both `whileHover` variant and `onHoverStart` callback defined. If `onHoverStart`, while being called, results in the change of its own value due to the containing component being re-rendered, `hover` variant will function correctly on the parent but won't be propagated to the child. The codesandbox provided below should make this more clear.

Same behaviour applies to `onHoverEnd`.

**3. IMPORTANT: Provide a CodeSandbox reproduction of the bug**

https://codesandbox.io/s/interesting-wildflower-5qk26

Try replacing `onHoverStart` and `onHoverStop` callbacks with their commented out and memoized versions — this eliminates the bug. 

**4. Steps to reproduce**

Steps to reproduce the behavior:
1. Hover over the first line of text. Background color becomes gray (as defined on the parent), text color becomes red (as defined on the child).
2. Hover over the second line of text. Only the background color changes.
3. Hover again over the first line of text. Once again, only the background color changes.
4. Move the mouse pointer up and then hover again over the first line. Both colors will change.

**5. Expected behavior**

Both background and text color change on hover.


If a user tries to touch scroll on a horizontally-draggable element we currently have to block scrolling due to issues with event handlers. It might be possible to control this with the `touch-action` CSS prop https://mobile-first-animation.netlify.com/49
I'd like to ask what's the purpose of single number min, max of Inertia on drag transition which changes both x and y. The current behaviour seems to apply it to both values but I'm not sure it should be this way.