**How to replicate**
Put mouse on one of the element menus, and move it up and down really fast repeatedly. Some of the element menus will continue to show the hover border.

![image](https://user-images.githubusercontent.com/7342352/71782074-f2ecc780-2fa3-11ea-82d9-a32ccc20f430.png)

I've tried testing with other buttons but I haven't seemed to replicate it, it seems to occur when a lot of buttons switch at once.

Update: It appears OnMouseLeave sometimes runs on the wrong button. Here are some logs of the menu buttons (Position: a.X, a.Y), I filtered out any enter-exit events that matched up:
```
Enter 631, 360 FROM -11, -172
Enter 631, 120 FROM 2, 69
Leave 631, 104 FROM 10, 8
Enter 631, 120 FROM 13, -13
Leave 631, 152 FROM 13, 9
Enter 631, 184 FROM 13, -23
Leave 631, 248 FROM 13, 9
Leave 631, 296 FROM 11, 6
Enter 631, 264 FROM 11, 27
Leave 631, 232 FROM 11, 14
```
There are a lot of Enters that don't have a Leave, and Leaves that don't have an Enter

users report that the mac version is broken due to a problem with the build server:
https://powdertoy.co.uk/Discussions/Thread/View.html?Thread=11117&PageNum=149#Message=310426
title.

Probably due to sending one update request to the official server and one to my server.
https://pybin.pw/48Lg
If I’m correct the builds do not use GCC’s link time optimization (from what I see in SConscript). I suggest to start using it for release builds. It can be easily enabled with the -flto switch and provides a (quite) smaller and more optimized binary.

Tested on Linux and worked without any changes. 
This PR adds new Velocity sensor element to the game.
Already supports serialization features
Usefull for detecting particle velocities in game
This changeset makes the game store `powder.pref` in the preferred user-specific directory, obtained through calling `SDL_GetPrefPath()`. 

**Question 1:** This probably should also be expanded to also cover screenshots and saved simulations. Do you agree? If so, I will amend the patch to also cover those cases.

**Question 2**: Should this feature be optional and selectable at compile time (e.g. via a `Sconscript` option)?
At the moment, a lot of functions in TPT's codebase have most/all of their variables declared at the beginning of the function. The goal of this WIP PR is to fix that.

Why I'm presenting my changes so early: So I can receive feedback to make sure I'm not messing something up :)

The large number of commits is to make reverting or fixing any one file easier (For me, who is bad at git), and they will be squashed as I move to different parts of the codebase.
This PR adds a new element LITH or Lithium ion battery.
This PR implements keyboard bindings for The Powder Toy. It adds an option in the options window that opens up a new view to which the user can configure hot keys for the main switch block of hotkeys found in GameView::OnKeyPress. These are stored as prefs and whenever a key or combination of keys is pressed we look up if we have a binding for it and if we do it executes the identified function.

By default, all the current hotkeys in the GameView::OnKeyPress switch block are added and stored in prefs if the user does not have any keyboard binding prefs already.

New functions/routines that need to be added as a future default keyboard hotkey can be done so in KeyboardBindingsMap.h.

Reserved keys (and key combinations) can likewise be added in ReservedKeys.h.

Note that configuring a key that has already been added as a binding or is a reserved key will not work and the UI control will revert to the previous assigned hotkey.