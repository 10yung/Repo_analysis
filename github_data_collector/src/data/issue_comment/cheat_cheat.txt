Bumps [github.com/alecthomas/chroma](https://github.com/alecthomas/chroma) from 0.7.0 to 0.7.1.
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/alecthomas/chroma/commit/bac74c10162702fc81843c48b824150f0f4d793a"><code>bac74c1</code></a> Fix Makefile.</li>
<li><a href="https://github.com/alecthomas/chroma/commit/19d5ee688c20e03921137a36d78d113ec2d68dc7"><code>19d5ee6</code></a> Highlight the line number targeted by the URL anchor</li>
<li><a href="https://github.com/alecthomas/chroma/commit/110f671e7c0477849eaf9a598c1d04b9a47c90ad"><code>110f671</code></a> Update languages supported</li>
<li><a href="https://github.com/alecthomas/chroma/commit/a41c89767d07cc9bd9dce4c5ba2541bbe715f050"><code>a41c897</code></a> Add the option of making the line numbers linkable</li>
<li><a href="https://github.com/alecthomas/chroma/commit/2d9ac06785eafe61475fd646febae95878eff961"><code>2d9ac06</code></a> Fix PowerShell error on drive letters.</li>
<li><a href="https://github.com/alecthomas/chroma/commit/67fb64311aecbe5105eb07a96eb9f05ca178d05c"><code>67fb643</code></a> add SML lexer (<a href="https://github-redirect.dependabot.com/alecthomas/chroma/issues/310">#310</a>)</li>
<li><a href="https://github.com/alecthomas/chroma/commit/ec2ba48433edd67558af250beb124338cf32af02"><code>ec2ba48</code></a> Add lexer for LLVM TableGen (<a href="https://github-redirect.dependabot.com/alecthomas/chroma/issues/311">#311</a>)</li>
<li><a href="https://github.com/alecthomas/chroma/commit/352e19d7f2323bbdb0aa7a01110764f57657736c"><code>352e19d</code></a> Avoid empty matches in MLIR lexer</li>
<li><a href="https://github.com/alecthomas/chroma/commit/15c7468f3754f677572535378612d0a6c3eb30d9"><code>15c7468</code></a> Add simple MLIR lexer (<a href="https://github-redirect.dependabot.com/alecthomas/chroma/issues/308">#308</a>)</li>
<li><a href="https://github.com/alecthomas/chroma/commit/9fb54c5f75769e5f9850376fab0fd67ad4677f33"><code>9fb54c5</code></a> Add separate go module for ./cmd/chromad.</li>
<li>Additional commits viewable in <a href="https://github.com/alecthomas/chroma/compare/v0.7.0...v0.7.1">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=github.com/alecthomas/chroma&package-manager=go_modules&previous-version=0.7.0&new-version=0.7.1)](https://dependabot.com/compatibility-score.html?dependency-name=github.com/alecthomas/chroma&package-manager=go_modules&previous-version=0.7.0&new-version=0.7.1)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
I propose to extend the behavior of the program in the following ways:
- The search should also include multiple terms (Feature 1);
- When you search a phrase in the _dotfiles_ using the new context option (example: -x), the search should include the comments associated (Feature 2);
- Shell variable interpolation in the search output, if variable exists and if using a new option (example: -n) (Feature 3);
- Any entry shoud have an ID (Autoadded during the search phase), so you can execute  easily the command using a new option (example: -r) (Feature 4).

### Example of dotfiles.
`cat tar`
```bash
# To create an uncompressed archive:
tar -cvf /path/to/foo.tar /path/to/foo/

# To extract an uncompressed archive:
tar -xvf /path/to/foo.tar
```

`cat my_tar`
```bash
# To extract an archive.
# Tag: archive, extract
tar xf ${ARCHIVE_1}

# To extract an archive, verbose output.
# Tag: archive, extract
tar xvf ${ARCHIVE_2}
```

### Example of search command
Set variable for shell variable interpolation
`ARCHIVE_1='myfile.tar'`

so, calls cheat program:
`cheat -n -x tar extract`

**Expected output:**
```bash
# To extract an uncompressed archive:
# ID: 143
tar -xvf /path/to/foo.tar

# Extracts an archive.
# Tag: archive, extract
# ID: 151
tar xf myfile.tar

# Extracts an archive, verbose output.
# Tag: archive, extract
# ID: 152
tar xvf ${ARCHIVE_2}
```

Note:
- Dynamic ID appears in the output. The ID doesn't change if the search context (tag and loading path) remains the same;
- Shell variable interpolarion is performed using variable defined previously.

### Example of run command
To recall and execute a cheat:
`cheat -r 151`

### Workaround
I wrote a small Python3 script to accomplish the described operations (Features 1 and 2), but it's dirty, without color, etc... It would be better if integrated into official Python and GO projects following the business logic of official projects.

`cat cs.py`

```python
# Requirements:
# - Install cheat (available at link: https://github.com/cheat/cheat) into 'bin' directory.

# Import Python libraries.
import sys, subprocess, re

# Set variables.
terms = sys.argv[1:]
re_flags = re.MULTILINE + re.IGNORECASE

# Regular expressions.
line_re = r'(?:^.+\n)*'
term_start_re = r'^.*'
term_end_re = r'.*$\n'
filename_re = r'^\w+(?=:$)'

# Calls cheat.
data = subprocess.run(['cheat', '-s', terms[0]], capture_output=True).stdout.decode('utf-8')
dbs = re.findall(filename_re, data, re_flags)

data = ""
for db in dbs:
    data += '\n' + subprocess.run(['cheat', db], capture_output=True).stdout.decode('utf-8')

    # Filters output.
    for term in terms:
        term_re = term_start_re + term + term_end_re
        search_re = line_re + term_re + line_re
        data = re.findall(search_re, data, re_flags)
        data = '\n'.join(data)

# Prints result.
data = data.strip()
print(data)
```
Hi @chrisallenlane 
**Is your feature request related to a problem? Please describe.**
I finally got to create an rpm package and i found out that there is no straightforward way how to package cheatsheets. I can download them from cheatsheets repository but since i need to install them under /usr/share directory, cheat can not access them out of the box. Rpm package does not install files under user directory so i need to set environmental variable CHEAT_CONFIGURATION_PATH to /etc/cheat.yml and there set path to cheatsheets to /usr/share/cheat. All this results in need to restart running bash instances to load environmental variable.

**Describe the solution you'd like**
There are multiple possible solutions. For example cheat could by default look into /usr/share/cheat and tag sheets found there as a distribution cheats. Something similar could work with configuration. Cheat could look into /etc/cheat.yml and take content of that file as default values but if user provides configuration in ~/.config/cheat/conf.yml then this configuration would override the systemwide one.
I think these changes could all fail silently on failure and thus not change current cheats behavior  on any system.

**Describe alternatives you've considered**
As i said i've managed to workaround this by creating script in /etc/profile.d with export of CHEAT_CONFIGURATION_PATH variable.

**Additional context**
This results in discomfort when installing cheats rpm package. Also user would have to change script in profile.d to set configuration path back to his home directory.

I know that attempts to solve this issue previously resulted in issues on other systems but if attempts to access those files will be non-mandatory and fail silently then i think it is safe. Feel free to propose some other solution. I just need a way how to make cheat work out of box without touching users home directory in installation and with cheatsheets located in /usr/share/cheat.
I'm doing this not only because it will provide more comfort to Fedora users but also because it is the right thing to do because of https://en.wikipedia.org/wiki/Filesystem_Hierarchy_Standard

Thanks for any help you can provide.

To simplify the installation of cheat & cheatsheets, I created [docker-cheat](https://github.com/bannmann/docker-cheat) which packages both projects in a single 9 MB docker image. As it may be useful to others as well, I went ahead and linked the project here - specifically from the ['Related Projects'](https://github.com/cheat/cheat/wiki/Related-Projects) and ['Installing'](https://github.com/cheat/cheat/wiki/Installing) wiki pages.

However, I noticed neither page is linked by the README. Is that intentional? For example, I was quite surprised when I read on ['Installing'](https://github.com/cheat/cheat/wiki/Installing) that there are 'cheat' OS packages, a fact that the README fails to mention.
**Is your feature request related to a problem? Please describe.**
I prefer to keep my shell/text editor rather narrow and to the side. The problem is when listing all my available cheatsheets, the shell output is rather cramped and hard to read. In addition, I've created sub-folders inside my `personal` directory to scope cheatsheets further, it would be much more readable to be able to list cheatsheets by scope.

**Describe the solution you'd like**
I'd like to propose an alternative format for the `cheat -l` command. 

```
css
  bem               css, webdevelopment
  selectors         css, webdevelopment
  transition        animation, css, webdevelopment

js
  array             array, datasctructure, javascript
  fetch             api, http, javascript, webdevelopment
```
This way, output is much more readable and friendlier to the narrower shell users.

**Describe alternatives you've considered**
An alternative to this approach would be to remove the `file:` output from `cheat -l`. It's rare that I'm interested in the exact filepath of the cheatsheet (since I've scoped them, I know basically where they are). In the case that I would like to find the filepath, a `cheat <cheatsheet> --info` command could be useful.

**Additional context**
This is my current output:
![Screen Shot 2019-11-15 at 12 35 04](https://user-images.githubusercontent.com/6670659/68940868-92f85280-07a4-11ea-9e6a-222407aa8ace.png)

Rails 6 recently added something similar for its `rails routes` command. This was notoriously messy output. The addition of an `--expanded` flag outputs much more streamlined.

[Rails 6 shows routes in expanded format - BigBinary](https://blog.bigbinary.com/2019/03/27/rails-6-shows-routes-in-expanded-format.html)

I've created a FreeBSD port for ```cheat```, and got this feedback:

```
This port is a little strange. It installs a binary that just displays
an error message about needing a config file. Perhaps pkg-message
could say how to generate that file?

Except once you generate the config file as upstream instructs, cheat
still can't find it. I'm not sure where it's actually looking for it.

Once you set the env var to point it to the config file, it just
errors out because there's no actual data files installed. The cheat
data files (https://github.com/cheat/cheatsheets) should probably be
installed along with the cheat binary.
Thanks for submitting a bug report. Please provide the following information:
```

Could you please address these concerns and update the code?

Thanks,
Yuri


github.com/docopt/docopt-go has been renamed.

https://github.com/cheat/cheat/blob/master/go.mod#L8




**Is your feature request related to a problem? Please describe.**
Currently, `cheat` will apply syntax-highlighting to markdown documents, but it does not _render_ them the way one may expect to view them on Github. See #488 for context.

**Describe the solution you'd like**
It would perhaps be useful if `cheat` could render markdown documents, in addition to simply applying syntax-highlighting to them.

Because we do not want to make an assumption regarding which behavior the user would prefer, perhaps cheatsheets that should be rendered could be prefaced with `render: true` front-matter. Additionally, perhaps the equivalent configuration option could be added to `conf.yml`.

**Additional context**
Does there exist a layout-engine (written in Go) that could be imported into the project?

Glad to see the new release of cheat, thanks for all the work! I'm sure it will be at least as useful as the previous version :)

I noticed there are no more autocompletion files on the current master branch. I really valued the tab completion for cheatsheets in the past. This gets especially interesting when package maintainers start packaging cheat v3.

I assume completions for the most widely used shells are needed:

- [x] bash (#479)
- [ ] zsh
- [x] fish (#496)
@m3nu [recommended][upx] UPX for shrinking Go executable sizes:

https://upx.github.io/

Investigate it and other tools/techniques for shrinking the executables.

[upx]: https://github.com/cheat/cheat/issues/470#issuecomment-544257828
