**Describe the bug**
We have an abstract class with one protected member. And another class that inherits from abstract one.
```kotlin
abstract class ClassA {
    protected abstract val color: String
}

class ClassB : ClassA() {
    override val color: String
        get() = TODO("not implemented")
}
```

**Expected behaviour**
We expect `color` property to be effectively private for final classes.  And so it is. It's inaccessible.
Dokka generates properties [without](https://github.com/Kotlin/dokka/issues/445) visibility modifiers. Okay. I expect property `color` to be shown in ClassA doc, but I don't expect it to be shown in ClassB as it's private for this class. But it does.
```kotlin
val b = ClassB()
println(b.color) // error!
```

**Screenshots**
![image](https://user-images.githubusercontent.com/13679188/72668265-c8801d00-3a2d-11ea-9363-bc4e12f616d5.png)
![image](https://user-images.githubusercontent.com/13679188/72668270-d170ee80-3a2d-11ea-9414-e2a507f5c5b8.png)

**Dokka configuration**
```kotlin
tasks.dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/dokka"

    configuration {
        includeNonPublic = false
        skipDeprecated = false
        reportUndocumented = true
        skipEmptyPackages = true
        includes = listOf("packages.md")
    }
}
```

**Installation**
- Operating system: macOS/Windows/Linux
- Build tool: Gradle v6.1
- Dokka version: 0.10.0



Requires #531

Once we have working 1.3.61 compiler on 0.10 it should be trivial to port changes to 0.11.
Right now file extensions lives both as extension point and as a property of `OutputWriter`. It is also passed as a parameter to `write` function of `OutputWriter`. To complete this task make sure that default file extension fro given format is handled by extension point or propose alternative way to get rid of this redundancy.
`KotlinTypeWrapper` and `TypeReference` seems to be holding the same information. To complete this task merge them and their usages.
`DokkaConsoleLogger` is logging information about warnings count after completed generation. To complete this task add similar behavior for all runners and both warnings and exceptions.
For some reason comments for functions and classes defined on multiple platforms (for example in common source set) are repeated and rendered without any spaces between them.

Example:
```kt
/**
 * foo comment
 *
 * @receiver receiver comment
 * @param bar bar comment
 */
fun <T> T.foo(bar:T) {}
```
creates something that looks like: 
![this](https://user-images.githubusercontent.com/11855167/72447700-1559be80-37b6-11ea-87cc-46c2afd5eb4e.png)
but should be:
![obraz](https://user-images.githubusercontent.com/11855167/72448024-a3ce4000-37b6-11ea-800f-0b2b37927ae9.png)

Requires #578

To complete this task:
- create extension to pageMergerStrategy that takes all pages for functions with the same name from the group and returns them as single page
- assure that newly created extension is necessarily executed BEFORE default extension for this ep.

As a reference https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.collections/all.html can be used. Note that all functions are on the same page, but they are grouped in such a way that no documentation is lost nor repeated.
Requires #577

To complete this task:
- add extension point named `pageMergerStrategy` to core extensions. Implementations of this extension should have one method `tryMerge` that takes list of pages and returns list of pages.
- change behavior of PageMerger: it should now have list of merger strategies from context and for each group it merges it should apply them one by one, feeding output of one strategy to the input of next, stopping when some strategy returns list containing only one element
- move current behavior of PageMerger (choosing first page from group and reporting warnings if there are more) to newly created default strategy.