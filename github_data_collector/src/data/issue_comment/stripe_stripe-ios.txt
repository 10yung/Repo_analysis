## Summary
Part 2 of https://github.com/stripe/stripe-ios/pull/1469

1. Change `Stripe.setDefaultPublishableKey` behavior

Make this a proxy for `STPAPIClient.shared.publishableKey`, in line with what you'd expect this to do (change the publishable key the SDK uses unless otherwise specified).

2. Deprecate `STPPaymentConfiguration.{publishableKey, stripeAccount}`

For legacy reasons, make this a proxy for `STPAPIClient.shared.{publishableKey, stripeAccount}` if using the singleton.

3. Remove `apiKey` private property APIClient
4. Simplify the APIClient initializers by removing the dependency on PaymentConfiguration.  PaymentConfiguration is just another property in APIClient, instead of the sorta-source-of-truth of publishableKey.  It defaults to [PaymentConfiguration sharedConfiguration].

## Motivation

https://paper.dropbox.com/doc/psyduck-why-iOS-SDK-API-Configuration-LTvIMxj6CBy1Mw4ntaU0l#:uid=989210153385098517970797&h2=Risks

If users ignore the deprecation warnings, the updated behavior of these deprecated properties should result in no change for most (~everyone except for Connect users cloning PMs and direct charging their connected accounts).

## Testing
Existing tests still pass.
## Summary
Make `STPPaymentContext`, `STPCustomerContext`, `STPPinManagementService`, `STPPushProvisioningContext`, `STPAddCardViewController`:
1. Use an explicit APIClient property to make API requests
2. Expose that property publicly
3. Default that property value to `STPAPIClient.shared`

Previously, they used various APIClient instances, leading to inconsistent and unclear configurations of APIClient properties like `stripeAccount`.

## Motivation
https://paper.dropbox.com/doc/psyduck-why-iOS-SDK-API-Configuration-LTvIMxj6CBy1Mw4ntaU0l#:uid=436909486618175148450143&h2=Proposal

https://jira.corp.stripe.com/browse/IOS-1437

## Testing
Manually test basic integration app and make sure customer things work.

## Summary
When calling presentPaymentOptionsViewController() and selects the already selected card then no delegate methods are calling.

## Code to reproduce
           let customerContext = STPCustomerContext(keyProvider: StripePayment.stripeClient!)
            let config = STPPaymentConfiguration.shared()
            config.publishableKey = App.Config.stripeKey
            config.companyName = Constants.appName
            config.requiredBillingAddressFields = .none
            config.requiredShippingAddressFields = .none
            let paymentContext = STPPaymentContext(customerContext: customerContext,configuration : config,theme : .default())
            paymentContext.delegate = self
            paymentContext.hostViewController = delegate?.stripeController
            paymentContext.paymentAmount = 0
            paymentContext.modalPresentationStyle = .fullScreen
            paymentContext.presentPaymentOptionsViewController()

Select the already selected card, no delegate methods are called.  

## iOS version
iOS 13.2.2

## Installation method
through pod installation 

## SDK version

18.3.0

How to integrate a cardio with stripe so that once card is scanned the stripe should give a call back when card info is provided.

## Summary
Support for Chinese (Traditional) and Chinese (Hong Kong)

## Code to reproduce
Localizable.strings for the aforementioned 2 languages. I actually already translated them myself for my own project. Just wondering if the team would support these two languages going forward.

## iOS version
nil

## Installation method
nil
## SDK version
nil

## Other information
nil
## Secure text entry expected
***
In **STPPaymentCardTextField** we're expecting `secure text entry` for `cvv` field. This is enabled in SDK for Android. But in iOS the cvv is in plain text. And I could not find any property that toggles it.
***
Since cvv raises security concerns, please help me find any property as mentioned (if any), or please add it.

### Thanks!
Thanks for all the hard work on this. I know it’s not easy and requires a lot of energy and effort. Question: Is there any plan to have a Native swift implementation? I just noticed the Android SDK is written in pure Kotlin which is amazing and is forward looking. Just wondering if there has ever been any talks or discussions potentially for a native swift SDK? It’s be pretty cool and would be nice to have a swift first approach to a stripe API for iOS. 
## Summary
We are using STPPAYMENT Context and STPPAYMENTOPTIONS view controller to display card list in our application. When user delete/add the card, we are not able to find out which card has been deleted/Added. We need an event where we come to know which card has been deleted/Added so that we can remove/add that card locally from our global Card Array (in our application). Please tell us any particular event or method to get the desired result.

Note : We have already implemented Apple Pay & Card Payment flow. We just need the above information. 
Team @yuki-stripe  @dackerman-stripe  @daved-stripe ,
Please guide us through.

## iOS version
12.2

## Installation method
POD

## SDK version
17.0.1

## Other information
<!-- Anything else you can include that'll make it easier for us to help you! -->

<!--
Please only file issues here that you believe represent actual bugs or feature requests for the Stripe iOS SDK.

If you're having general trouble with your Stripe integration, please reach out to support using the form at https://support.stripe.com/ (preferred) or via email to support@stripe.com.

Otherwise, to make it easier to diagnose your issue, please fill out the following:
-->

## Summary
`Codable` support for `StripePaymentMethod`

## Code to reproduce
`StripePaymentMethod` now conforms to a custom `STPAPIResponseDecodable` to enable basic parsing from a serialized network response.

```swift 
decodedObject(fromAPIResponse: try JSONSerialization.jsonObject(with: data, options: []) as? [AnyHashable: Any])
```

However, this provides no conformance to the actual `Decodable` protocol, introduced in Swift 4. Since some of the developers may rely on generic wrappers around network calls, to reduce boilerplate, thus achieve cleaner code, `Decodable` conformance would be needed.

With the current interface a `Codable` (or just `Decodable`) wrapper has to be introduced around `StripePaymentMethod`. 

*as far as I know, this is the only solution, please correct me if I'm wrong*

## iOS version
iOS 13

## Installation method
Manual

## SDK version
17.0.1

## Other
Please flag as feature request if approved

## Summary
The ability to easily integrate the CardIO library with the stripe SDK is great. However, as the CardIO library hasn't been maintained for a long time and has now been archived I don't think it makes sense to rely on it any more.

There are other options available for card scanning, the best I have found is [cardscan](https://github.com/getbouncer/cardscan-ios). It is actively maintained and is offered for free to small business/those who do not want to use the commercial fraud prevention offering.

I think it would be great to support CardScan as well as or instead of CardIO or maybe open up the `STPAddCardViewController` for easy custom integration?