Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.0.12 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.0.12...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.0.12&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/aurelia/framework/network/alerts).

</details>
Bumps [mixin-deep](https://github.com/jonschlinkert/mixin-deep) from 1.3.1 to 1.3.2.
<details>
<summary>Commits</summary>

- [`754f0c2`](https://github.com/jonschlinkert/mixin-deep/commit/754f0c20e1bc13ea5a21a64fbc7d6ba5f7b359b9) 1.3.2
- [`90ee1fa`](https://github.com/jonschlinkert/mixin-deep/commit/90ee1fab375fccfd9b926df718243339b4976d50) ensure keys are valid when mixing in values
- See full diff in [compare view](https://github.com/jonschlinkert/mixin-deep/compare/1.3.1...1.3.2)
</details>
<details>
<summary>Maintainer changes</summary>

This version was pushed to npm by [doowb](https://www.npmjs.com/~doowb), a new releaser for mixin-deep since your current version.
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=mixin-deep&package-manager=npm_and_yarn&previous-version=1.3.1&new-version=1.3.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/aurelia/framework/network/alerts).

</details>
<!--
ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED.

SUPPORT REQUESTS/QUESTIONS: If you have a support request or question please
submit them to StackOverflow using the tags aurelia and aurelia-framework
http://stackoverflow.com/questions/tagged/aurelia
or the Aurelia Gitter https://gitter.im/aurelia/discuss

SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED.

BUGS: Please use this template. 

Blue Spire offers paid support agreements. Further information regarding paid support
may be obtained by emailing support@bluespire.com

The HTML comments below are for your reference, and are not displayed
when your issue is submitted, feel free to leave them.

Choose one of the two headings, delete the other.
-->
**I'm submitting a bug report**

* **Library Version:**
1.3.1


**Please tell us about your environment:**
* **Operating System:**
Linux (LinuxMint 19.2)

* **Node Version:**
10.16.1
<!--
Minimum supported Node version is latest Node 4.x LTS
run `node -v`
-->

* **NPM Version:**
6.9.0
<!--
Minimum supported NPM version is 3.x
run `npm -v`
-->

* **Aurelia CLI OR JSPM OR Webpack AND Version**
JSPM 0.16.55
<!--
If using Aurelia CLI
run `au -v` in project root.
If using JSPM
run `jspm -v` in project root.
If using Webpack
run `webpack --help | grep webpack`
-->

* **Browser:**
all

* **Language:**
TypeScript 3.6.3


**Current behavior:**
Executing the app and loading views with @useView('resources/panels/data-table-panel.html') works, but running a component test fails. Caused by 404 html-file not found.
By changing the path to @useView('src/resources/panels/data-table-panel.html') the component can be staged, which the leads to a 404 if the app gets started later by serving it with gulp.

![aurelia_file_tree](https://user-images.githubusercontent.com/532180/65953612-a04fbc80-e444-11e9-8b4a-517adb8f49ec.png)

![aurelia_stockvalue_custom_element](https://user-images.githubusercontent.com/532180/65953615-a0e85300-e444-11e9-8038-e4c957019267.png)

![aurelia_karma conf js](https://user-images.githubusercontent.com/532180/65953614-a04fbc80-e444-11e9-9364-0fea501c491b.png)

![aurelia_component spec ts](https://user-images.githubusercontent.com/532180/65953610-9fb72600-e444-11e9-9868-5d5fb8b68379.png)

![aurelia_gulp_tdd_output](https://user-images.githubusercontent.com/532180/65953613-a04fbc80-e444-11e9-9f52-8d54417a8272.png)



<!--
**Expected/desired behavior:**
If the current behavior is a bug, please provide the steps to reproduce and, if possible, a minimal demo of the
problem along with a runnable gist, if possible.
To create a runnable gist, go to https://gist.run/?id=7542e061bc940cde506b&sha=6821c521a6c7bae6f59a36fb8628ecd1032b2d10
Then click "Fork to Public Gist".
Create your gist, then finally click "Update Gist." Include a link to the gist.run below.
-->


<!--
ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED.

SUPPORT REQUESTS/QUESTIONS: If you have a support request or question please
submit them to StackOverflow using the tags aurelia and aurelia-framework
http://stackoverflow.com/questions/tagged/aurelia
or the Aurelia Gitter https://gitter.im/aurelia/discuss

SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED.

BUGS: Please use this template. 

Blue Spire offers paid support agreements. Further information regarding paid support
may be obtained by emailing support@bluespire.com

The HTML comments below are for your reference, and are not displayed
when your issue is submitted, feel free to leave them.

Choose one of the two headings, delete the other.
-->
**I'm submitting a bug report**

* **Library Version:**
1.3.1


**Please tell us about your environment:**
* **Operating System:**
Windows 10

* **Node Version:**
12.8.0
<!--
Minimum supported Node version is latest Node 4.x LTS
run `node -v`
-->

* **NPM Version:**
6.11.3
<!--
Minimum supported NPM version is 3.x
run `npm -v`
-->

* **Aurelia CLI OR JSPM OR Webpack AND Version**
none
<!--
If using Aurelia CLI
run `au -v` in project root.
If using JSPM
run `jspm -v` in project root.
If using Webpack
run `webpack --help | grep webpack`
-->

* **Browser:**
all

* **Language:**
all


**Current behavior:**
Unable to build with node 12 because gulp 3 is not supported (https://github.com/gulpjs/gulp/issues/2324)

**Expected/desired behavior:**
<!--
If the current behavior is a bug, please provide the steps to reproduce and, if possible, a minimal demo of the
problem along with a runnable gist, if possible.
To create a runnable gist, go to https://gist.run/?id=7542e061bc940cde506b&sha=6821c521a6c7bae6f59a36fb8628ecd1032b2d10
Then click "Fork to Public Gist".
Create your gist, then finally click "Update Gist." Include a link to the gist.run below.
-->
It should be possible to build after checkout with node 12.
I tried briefly to upgrade to gulp 4, but I think this requires more talented people:) It is the same reason why I am unable to compile https://github.com/aurelia/pal/pull/39

* **What is the motivation / use case for changing the behavior?**
I need to fix https://github.com/aurelia/framework/issues/940.
<!--
ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED.

SUPPORT REQUESTS/QUESTIONS: If you have a support request or question please
submit them to StackOverflow using the tags aurelia and aurelia-framework
http://stackoverflow.com/questions/tagged/aurelia
or the Aurelia Gitter https://gitter.im/aurelia/discuss

SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED.

BUGS: Please use this template. 

Blue Spire offers paid support agreements. Further information regarding paid support
may be obtained by emailing support@bluespire.com

The HTML comments below are for your reference, and are not displayed
when your issue is submitted, feel free to leave them.

Choose one of the two headings, delete the other.
-->
**I'm submitting a feature request**

* **Library Version:**
1.3.1

**Please tell us about your environment:**
* **Operating System:**
Windows 10

* **Node Version:**
12.8.0

* **NPM Version:**
6.11.3

* **Aurelia CLI OR JSPM OR Webpack AND Version**
none

* **Browser:**
all

* **Language:**
TypeScript

**Current behavior:**
During intial configuration when modules are included, the module configuration argument is of type any:

```
aurelia.use.plugin("my-module", options?: any)
```

It is currently not possible for module authors to improve typings for their module, as `aurelia.use` is of type `FrameworkConfiguration`, and it is not possible to extend classes with typings in typescript.


**Expected/desired behavior:**
<!--
If the current behavior is a bug, please provide the steps to reproduce and, if possible, a minimal demo of the
problem along with a runnable gist, if possible.
To create a runnable gist, go to https://gist.run/?id=7542e061bc940cde506b&sha=6821c521a6c7bae6f59a36fb8628ecd1032b2d10
Then click "Fork to Public Gist".
Create your gist, then finally click "Update Gist." Include a link to the gist.run below.
-->

It would be really neat if the `FramworkConfiguration` implemented an interface, say `IFramworkConfiguration` for the builder api instead of the `FrameworkConfiguration` itself.
The interface should of cause contain all all the properties/methods of `FramworkConfiguration`, and the return type for the methods should be changed to `IFrameworkConfiguration`.

This change would enable module authors to include typing aided configuration. Say for example:

```
import { IFrameworkConfiguration } from "aurelia-framework";
import { CacheOptions } from "./cache-options";

declare module "aurelia-framework" {
    interface IFrameworkConfiguration {
        plugin(plugin: "aurelia-workbox-cachecontrol", configureAction?: (options: CacheOptions) => unknown): FrameworkConfiguration;
    }
}
```

To make this work with `PLATFORM.moduleName()` in webpack environments, its typing definitation should be changed from:

```
moduleName(moduleName: string, options?: ModuleNameOptions): string;
moduleName(moduleName: string, chunk?: string): string;
```
to:
```
moduleName<T extends string>(moduleName: T, options?: ModuleNameOptions): T;
moduleName<T extends string>(moduleName: T, chunk?: string): T;
```
to specifically tell typescript that the same module name is returned.

![image](https://user-images.githubusercontent.com/2112306/65672592-95161e80-e049-11e9-920b-06fb087e81ba.png)


* **What is the motivation / use case for changing the behavior?**
To make for a more robust plugin experience where configuration is typed.
**I'm submitting a feature request**

* **Library Version:**
v1.0.2


* **Operating System:**
Windows 10

* **Node Version:**
v12.5.0

* **NPM Version:**
v6.9.0

* **Aurelia CLI Version**
CLI v1.0.2

* **Browser:**
all

* **Language:**
ESNext


**Current behavior:**
Currently there are two options to develop a custom-attribute in aurelia. One to use dynamicOptions and one to not.
If `dynamicOptions` is not used, I can mark a `bindable` as `primaryProperty`, but in other way, when `dynamicOptions` is used, I can't find a way to specify a `primaryProperty`. And if I use `dynamicOptions` and also define a `@bindable`, the `dynamicOptions` stops working.

**Expected/desired behavior:**
I think it will be a good possibility to be able to use both `@dynamicOptions` and `@bindable({ primaryProperty: true }) ...` in a component or attribute. Because I have some predefined properties that I want to have configurations like `primaryProperty` on them and also I want to be able to receive dynamic options.

* **What is the motivation / use case for changing the behavior?**
‌Being able to have benefits of `@dynamicOptions` and `primaryPropert` in a place.
If you use a compose element (who's activate function returns a promise) within a ViewModel, the router complete event seems to fire before the promise is resolved which causes a jumpiness in the navigation. If we remove the compose element from the view model everything works fine.

Is this behavior intended? Shouldn't the router wait for the entire view to compose include any composed elements (<compose></compose> before considering navigation complete?


The process looks like this:
- Navigate from page A to Page B
- Router.IsNavigating = true
- Router.IsNavigating = false (at this point page A still shows as Page B hasn't fully been composed)
- Page B is fully composed and shown.


I am trying to setup an app, but I am not really happy with the project structure. I use aurelia-cli to build app. My which is to have all files like ts, less,  in `src` folder, and after build move it to `www` so that this folder becomes app web root and contains only website files. My root of the project might have so many other configuration files, so I do not want to have that mess in the project root.

I have been able to configure everything as I want and only one thing is not working. First let me say what I did in `aurelia.json`

```
"platform": {
    "port": 9000,
    "index": "index.html",
    "baseDir": "www",
    "output": "www/scripts"
  },
  "build": {
    "targets": [
      {
        "port": 9000,
        "index": "index.html",
        "baseDir": "www",
        "output": "www/scripts"
      }
    ],
```

this is places where ш added `www`. Output for build process mode bundles to www folder. baseDir so that web server on `au run --watch` starts in the www folder as root.

But I have problem that `vendor-bundle.js` at the end generate

```
function _aureliaConfigureModuleLoader(){window.define=SystemJS.amdDefine; window.require=window.requirejs=SystemJS.amdRequire; SystemJS.config({
  "map": {
    "text": "text",
    "app-bundle": "www/scripts/app-bundle.js"
  },
  "bundles": {
    "app-bundle": [
      "app",
      "app.html!text",
      "ext/home/home",
      "ext/home/index",
      "ext/home/tmpl/home.html!text",
      "ext/home/tmpl/index.html!text",
      "main",
      "unknow",
      "unknow.html!text",
    ]
  }
});
```

You can see that it adds `www/` to `app-bundle.js` directory. So that when it is loaded, it cannot load app-bundle. If I fix it by hand, everything works until the new update of vendor-bundle file.

And there is not way to fix it from configuration as I can see. If I delete www in `aurelia.json` then is generates scripts in the other folder, not inside www, if ш keep it, it adds www to that path.

I think that `baseDir` has to be deleted from the path to file. So fix have to be applied in aurelia-cli. I tried to find it and make PR, but I could not find, it is too complicated for me.  

**I'm submitting a feature request**

* **Library Version:**
aurelia-script 1.3.1

**Current behavior:**
If you make a typo, or on this case I forgot to add `async` to a function, you get a long but useless stacktrace pointing to inside of aurelia but nowhere in the stack trace does it give me any clue of what view, class, file is at fault. I've had this issue for years, ever since Aurelia was still in beta and it's been my biggest problem with aurelia ever since. Because despite having `.developmentLogging()` enabled I'm subjected to tearing my app down and uncommenting it line by line until I find the needle in the haystack

![image](https://user-images.githubusercontent.com/3995401/54070417-1c43a680-4260-11e9-9b0b-1a03a0285ffc.png)

**Expected Behavior:**
Some general information about origin of the error - the file, line, or a class/method
**I'm submitting a bug report**

* **Library Version:**
```
    "aurelia-bootstrapper": "2.3.1",
    "aurelia-fetch-client": "1.7.0",
    "aurelia-framework": "1.3.0",
    "aurelia-history-browser": "1.2.0",
    "aurelia-loader-webpack": "2.2.1",
    "aurelia-logging-console": "1.0.0",
    "aurelia-pal-browser": "1.8.0",
    "aurelia-polyfills": "1.3.0",
    "aurelia-router": "1.6.3",
    "aurelia-templating": "1.10.1",
    "aurelia-templating-binding": "1.5.2",
    "aurelia-templating-resources": "1.7.1",
    "aurelia-templating-router": "1.3.3",
```
and

```
    "aurelia-loader-nodejs": "1.0.1",
    "aurelia-pal-nodejs": "1.2.0",
    "aurelia-protractor-plugin": "1.0.6",
    "aurelia-testing": "1.0.0",
    "aurelia-tools": "1.0.0",
    "aurelia-webpack-plugin": "2.0.0-rc.5",
```
**Please tell us about your environment:**
* **Operating System:**
Windows 10

* **Node Version:**
v8.9.0
<!--
Minimum supported Node version is latest Node 4.x LTS
run `node -v`
-->

* **NPM Version:**
6.7.0
<!--
Minimum supported NPM version is 3.x
run `npm -v`
-->

* **Aurelia CLI OR JSPM OR Webpack AND Version**
webpack 3.12.0

* **Browser:**
All

* **Language:**
ESNext

**Current behavior:**
When injecting a variable into the constructor of app.js, it is not initialized on the first screen loaded in the application. When navigating to a subsequent screen, it becomes available for use in the <template> tags of all viewModels.

**Expected/desired behavior:**
A variable initialized in the constructor of app.js should be available to all viewModels within <template> tags without needing to inject them into each individual viewModel

* **What is the motivation / use case for changing the behavior?**
This previously worked with aurelia-framework 1.1.5

***Example Code based on skeleton-esnext-webpack, after updating dependencies in package.json***

**constants.js :**
`export const TEST_CONST = "Constant!";`

**app.js:**
```
import {PLATFORM} from 'aurelia-pal';
import * as Constants from './constants';
import {inject} from 'aurelia-framework';

@inject(Constants)
export class App {
  constructor(constants) {
    this.constants = constants;
  }

  configureRouter(config, router) {
    config.title = 'Aurelia';
    config.map([
      { route: ['', 'welcome'], name: 'welcome',      moduleId: PLATFORM.moduleName('./welcome'),      nav: true, title: 'Welcome' },
      { route: 'users',         name: 'users',        moduleId: PLATFORM.moduleName('./users'),        nav: true, title: 'Github Users' },
      { route: 'child-router',  name: 'child-router', moduleId: PLATFORM.moduleName('./child-router'), nav: true, title: 'Child Router' }
    ]);

    this.router = router;
  }
}
```
**welcome.html:**
```
<template>
  <section class="au-animate">
    <h2>${heading}</h2>
    <h2>CONSTANT: ${constants.TEST_CONST}</h2>
</template>
```
The above constant does not print in welcome.html. However, if I put it inside users.html, it does print on that screen.