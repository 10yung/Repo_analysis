### Issue

 Advanced Options such as `double` can interfere with chords being registered

### Example

an `a click` + `b click` chord cannot be bound while `a double` is also bound.


### Other Issue's (design decision?)

- Chords not having access to advanced features
  - I.E. Can't make a chord `double a` + `double b`
  - also can't make a chord such as `long press a` + `press b`

- Empty Action needs to be present to see option
  - I.e. If you want to bind `b click` you must have a action for a `b button` even if its empty.
Suppose I am writing an OpenVR driver to represent the HMD. I can see the game content inside SteamVR View.

I want to know how to direct the game content to another monitor that I have. I want to emulate the monitor to be a VR screen. So I expect to see the monitor to have splitted content for the left and right eye.

1. How do I send game content to another monitor in OpenVR driver? In terms of code for both legacy and direct mode.
2. What's the difference between the Vive screen and the normal monitor screen? How can they behave differently when connected to the PC (in direct mode)? 
3. How to emulate direct mode using a normal monitor? What are the properties that the monitor need to have to use direct mode?
Hooked up a Vive Pro Eye  Yesterday and today I suddenly started receiving a 204 error. No web search has given any clue as to what this error means. It asks me to restart steamVR however this has no effect on the error and I can not see or use the Vive pro or index  controllers. Controllers wont even pair.

Using SteamVR 1.9.16
![Error204](https://user-images.githubusercontent.com/49215195/72392707-e9730600-36ed-11ea-8e56-ee2c4e895088.PNG)

I'm trying to create a new set of bindings for a new project. But for some reason I do not appear to be able to edit Pose/Haptics in the SteamVR controller binding UI (beta and non-beta; desktop window and in-HMD).

I have a mandatory pose action on my default action set and a haptics action, but the buttons to edit pose and haptics bindings is not available.

![Screenshot (17)](https://user-images.githubusercontent.com/53399/72229292-5194e100-3562-11ea-829f-3313835da00f.png)

Looking at the No Man Sky bindings the Pose button is also not available, though the haptics button does show up. (Side note, the bindings UI really needs a way to handle bindings with a large number of action sets. Right now there is no scroll bar behaviour for the top bar.)
![Screenshot (18)](https://user-images.githubusercontent.com/53399/72229312-8a34ba80-3562-11ea-911c-b690320bc0e9.png)

I've actually had similar issues before. Those the UI has a big problem with those buttons being crammed into a space they don't fit and then wrapping and ending up out of view. I noticed this back when the bindings UI was opened in Chrome by the Unity plugin. Though now that the Unity plugin is opening the bindings UI in a dedicated window I can't easily workaround/debug this like I can in Chrome's inspector.
TriggerHapticVibrationAction has the signature `virtual EVRInputError TriggerHapticVibrationAction( VRActionHandle_t action, float fStartSecondsFromNow, float fDurationSeconds, float fFrequency, float fAmplitude, VRInputValueHandle_t ulRestrictToDevice )` but documentation in wiki (https://github.com/ValveSoftware/openvr/wiki/SteamVR-Input) doesn't mention last parameter.
New struct Compositor_StageRenderSettings has inline initialisers which don't compile under VS2013:

```
openvr.h(3110): error C2797: 'vr::Compositor_StageRenderSettings::m_PrimaryColor': list initialization inside member initializer list or non-static data member initializer is not implemented
openvr.h(3111): error C2797: 'vr::Compositor_StageRenderSettings::m_SecondaryColor': list initialization inside member initializer list or non-static data member initializer is not implemented
```
Hello

I am the technical development leader of nolo. We have developed a software that uses NOLO's 6DoF hardware, accesses the OPENVR protocol, and simulates HTC to report data to SteamVR. At present, the button does not take effect in boneworks. This game uses htc vive The keys are normal during the game. With the nolo device, there is no key response in the game, only the location.

What factors will affect the button not responding, such as profile other factors? (The attachment contains the profile file that nolo is using, please check)

In addition, if controller_type adds a nolo_controller, what do we need to do?

Thanks for your continued support and help!
I'm trying to set the black levels directly in the HMD instead of relying on debug tools, I understand this can have a side effect of black smearing. 

I have only HMD connected, I run lighthouse_console.exe in  \steamapps\common\SteamVR\tools\lighthouse\bin\win32

I download the config, 

line 30:         "black_clamp":  0.0117647061124444
I tried changing it to another value, but there seems to be no effect.
As I understand it's set to 3, because  0.0117647061124444*255 is 3
I tried 0.0 and 1 (0.00392156862) and even 10 (0.03921568627), no difference in black levels

Is that not the same as black_clamp debug console command that was in steamvr a few versions ago?

Please advise


Could we get some documentation on what exactly **simulated_controller_type** does under the hood? From what I've observed when simulating Index as Oculus:
The HMD and both controllers return `"oculus"` for `Prop_TrackingSystemName_String` and `Prop_Axis0Type_Int32` becomes `k_eControllerAxis_Joystick`

Feature Request: Expose **simulated_controller_type** to settings somehow.

The reason I would like this property exposed is I am converting the legacy input system of an older game to be a hybrid approach of the legacy system and actions where I have intercepted and re-created the functionality of `GetControllerState` which is normally disabled when `SetActionManifest` is called and have created/processed the same set of legacy action bindings using [this as reference](https://github.com/SteamDatabase/GameTracking-SteamVR/blob/master/resources/config/legacy_actions.json). However, since the game is not normally aware of controller types beyond Vive, Oculus and WindowsMR and the controller simulation seems to be non-functional when using the new system but seems to still be possible to enable the setting in the binding file via 
`	"options" : [
		{
			"name" : "mirror_actions",
			"type" : "bool",
			"default" : false
		},
		{
			"name" : "simulated_controller_type",
			"type" : "string",
			"default" : "none"
		}
	],` I can more or less emulate what **simulated_controller_type** does by intercepting calls and modifying their returns to the game but have no way to determine if this setting is actually in use by the bindings (not about to hook vrclient_x64)
`EVRButtonId` seems to imply that the Joystick for Index is on Axis3:
`k_EButton_IndexController_JoyStick	= k_EButton_Axis3,`
However, when querying the Axis type using `Prop_Axis3Type_Int32` it returns `k_eControllerAxis_None`, which seems inconsistent with other controller types such as Oculus where Axis0 is reported as: `k_eControllerAxis_Joystick`. For the Index it seems that no Axis from 0-4 report as Joystick. I am not certain if this is intentional or a mistake.