I think this is caused by https://github.com/rust-lang-nursery/failure/issues/258 and https://github.com/rust-lang-nursery/failure/issues/110, but I thought it worth mentioning, as I hit this upgrading from quicli 0.3 to 0.4.

I'm not sure there's anything that can be done in this crate though, so feel free to close if you want.

### Reproduction:

#### Source

```rust
use quicli::prelude::*;

fn main() -> CliResult {
    bail!("This does not work!");
}
```

#### Reproduction

```bash
cargo new quicli_bail; cd quicli_bail
cargo install cargo-edit
cargo add quicli
echo -e 'use quicli::prelude::*;\n\nfn main() -> CliResult {\n    bail!("This does not work!");\n}' >src/main.rs
cargo build
```

#### Result:

```rust
   Compiling test_quicli v0.1.0 (/Users/gib/tmp/test_quicli)
error[E0308]: mismatched types
 --> src/main.rs:4:5
  |
4 |     bail!("This doesn't work!");
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected struct `exitfailure::ExitFailure`, found struct `failure::error::Error`
  |
  = note: expected type `exitfailure::ExitFailure`
             found type `failure::error::Error`
  = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)

error: aborting due to previous error

For more information about this error, try `rustc --explain E0308`.
error: Could not compile `test_quicli`.

To learn more, run the command again with --verbose.
```
My crate [`read_input`](https://crates.io/crates/read_input) seems to line up well with the aims of `quicli`. It helps make CLI tools quicker and easier to make.

It would be awesome if it could be included with `quicli`. Any feedback on my crate would also be welcome. 
After I finished the thumbnail tutorial, I tried to test it and got this error 
```
Error: No files match pattern `rust_memes/*`
```

After seeing that, I progressively commented out more code to get a minimal reproduction, and I was able to find that this block of code doesn't match anything
```rust
use quicli::prelude::*;

fn main() -> CliResult {
    let files = glob("src/*")?;
    println!("{:?}", files);
    Ok(())
}
```
```
~/dev/rust/thumbify master
❯ cargo run --
   Compiling thumbify v0.1.0 (/home/chris.pickard/dev/rust/thumbify)
    Finished dev [unoptimized + debuginfo] target(s) in 1.11s
     Running `target/debug/thumbify`
Error: No files match pattern `src/*`
```
Even though I clearly have matching files in my `src/` directory
```
~/dev/rust/thumbify master
❯ ls src
main.rs
```

I'm sorry, I feel like I'm quite a thorn in your side at the moment

Related to #90
As it is right now, the `-vvv` enables logging only for the main crate. For some use-cases, the ability to log everything would make more sense. Any way to achieve it?

Right now even `RUST_LOG` no longer works.
I love `quicli`, here is a suggestion on how to improve it (in the form of a PR).

Since we control the main method, there is no way that the logging init can fail. Given this, we can use the logging functionality for outputting any errors that are returned from the main method. This is what I have implemented in this PR.

Apart from this, there are a few small improvements, for example removing a warning in an edge case where all paths lead to an error, and adding tests for the different forms of the `main!` macro.

Let me know what you think!
Would it make sense for `human-panic` to be part of `quicli`? I feel it'd make a lot of sense for it to be part of almost every CLI application, but I'm not sure if it exceeds `quicli`'s scope.

I think it might be an interesting addition to consider. Keen to hear thoughts on this!

## Refs
- https://github.com/yoshuawuyts/human-panic
Instead of glob, let's use https://github.com/Gilnaa/globwalk which is more powerful. This is also a good opportunity to review if [this](https://docs.rs/quicli/0.2.0/quicli/fs/fn.glob.html) is still a good API to export.
It will be great if I could just set some flag and callback to get an ability to read from stdin and write to stdout.