It would be nice to able to do a search and replace on an entire tree of files.
Using `fd` (also `find`) with `--exec` should provide more easy and comfortable ways.

ref) https://github.com/sharkdp/fd#parallel-command-execution
When trying some search & replace where I wanted to match something only if the line was starting with it, I wanted to use the usual `^` to flag the beginning of the line. The result was a fail of the match wail getting rid of it resulted in fine matching.
I tried to escaping it, guessing that as `$` is used for variables, it probably needs some escaping to flag the end of a line the same way, but this didn't work as well.

I guess that `^`and `$` should somehow be usable to flag beginning and end of the line.
replacements.txt:

```txt
value replacement
test TEST
```

```sh
sd --replacements replacements.txt file.txt
```

I am trying to use `sd` to remove some values from a NUL-separated file, but it does nothing to the file.

```zsh
# zsh
sd --flags m --string-mode $'\0'"$i" '' "$attic"
```

```
# cat -v $attic
^@this is 1.
this is 2.
this is 3.
^@hi
^@blue boy
```

```
# cat -v <<<"$i"
this is 1.
this is 2.
this is 3.

```
# Issue

In benchmark, I've noticed that you weren't using `-p` option for `sd` to print everything to stdout. Nevertheless, `sed`-commands print everything to stdout.

Also, once `sd "(\w+)" "$1$1" dump.json >/dev/null` is performed, every word in file is deleted. This happens because `$1` is replaced by shell with `(empty string)` and `sd` performs 'in-place' (or 'inline') replacement.

# Experiment

Here is my run for a simple thing

```
➜  ~/tmp echo '{"hello": "world"}' > test.txt

➜  ~/tmp cat test.txt
{"hello": "world"}

➜  ~/tmp hyperfine 'sd "(\w+)" "$1$1" test.txt'
Benchmark #1: sd "(\w+)" "$1$1" test.txt
  Time (mean ± σ):       6.7 ms ±   1.1 ms    [User: 3.2 ms, System: 1.8 ms]
  Range (min … max):     5.6 ms …  12.2 ms    245 runs

➜  ~/tmp cat test.txt
{"": ""}
```

Please pay attention to the second `cat` output. 
This is the reason why almost every run of `sd` is so fast (except the first one) — it doesn't do anything but just reading the file.

The following command should be used to compete with `sed`:

```
hyperfine 'sd -p "(\w+)" "\$1\$1" test.txt > /dev/null'
```

Please note the escaped groups `\$1` and the preview option `-p`

# Experiment Results

Here are my results for a 120 MB file

```
➜  ~/tmp l dump.json
.rw-r--r--@ 120M sergey  2 Aug 22:20 dump.json

➜  ~/tmp hyperfine \
'sed -E "s:(\w+):\1\1:g" dump.json >/dev/null' \
"sed 's:\(\w\+\):\1\1:g' dump.json >/dev/null" \
'sd -p "(\w+)" "\$1\$1" dump.json >/dev/null'
Benchmark #1: sed -E "s:(\w+):\1\1:g" dump.json >/dev/null
  Time (mean ± σ):      5.724 s ±  0.056 s    [User: 5.489 s, System: 0.146 s]
  Range (min … max):    5.656 s …  5.849 s    10 runs

Benchmark #2: sed 's:\(\w\+\):\1\1:g' dump.json >/dev/null
  Time (mean ± σ):      2.614 s ±  0.034 s    [User: 2.493 s, System: 0.084 s]
  Range (min … max):    2.569 s …  2.676 s    10 runs

Benchmark #3: sd -p "(\w+)" "\$1\$1" dump.json >/dev/null
  Time (mean ± σ):     12.590 s ±  0.216 s    [User: 12.087 s, System: 0.303 s]
  Range (min … max):   12.403 s … 13.150 s    10 runs

Summary
  'sed 's:\(\w\+\):\1\1:g' dump.json >/dev/null' ran
    2.19 ± 0.04 times faster than 'sed -E "s:(\w+):\1\1:g" dump.json >/dev/null'
    4.82 ± 0.10 times faster than 'sd -p "(\w+)" "\$1\$1" dump.json >/dev/null'

➜  ~/tmp l dump.json
.rw-r--r--@ 120M sergey  2 Aug 22:20 dump.json
```

# Thoughts

~Even if we fixed the benchmark, I do think that we are capped with pipe throughput.~

UPD: Ok, apparently pipe is not a problem. 

### Platform

MBP 2015, 2.7 GHz Intel Core i5
`apt install sd`  doesn't work . 

I have found that cargo is need before install sd. 
Do you have a plan publish sd to ubuntu apt ?
I assume the majority of users who come across `sd` are likely also using other popular Rust-based CLI tools like `fd` and `rg`:
- [`sharkdp/fd@app.rs#L70-L75`](https://github.com/sharkdp/fd/blob/fe53af064b5c27c996c326fc84436ef9a38af664/src/app.rs#L70-L75)
- [`BurntSushi/ripgrep@app.rs#L1175-L1178`](https://github.com/BurntSushi/ripgrep/blob/8ebc113847926922bb85fb5a01c175319fb1e8d4/src/app.rs#L1175-L1178)

For consistency with the above, it would be neat if `sd`'s options were consistent with these to make context switching a bit easier.

Ref: https://github.com/TankerHQ/ruplacer/tree/bf39991b#subvert-mode

While I use `sd` day-to-day for common replacement tasks, I find myself falling back to [`ruplacer`](https://github.com/TankerHQ/ruplacer) whenever I need its `--subvert` functionality.

It would be _amazing_ if `sd` supported this (via a new option or flag) so I could fully switch to `sd` for all my replacement needs!
I'm using the Windows version 0.65 and this is the command. It's working with many other tools but not with sd.
```
set pattern="(.*)Call ((List|Text)\d+_Key(Down|Up))\((.*), (vbKeyReturn|13), (.*)\)"
set replace="$1Call $2($5, GetFM20ReturnKey(), $6)"
sd.exe %pattern% %replace% "Test.txt"
```

Test.txt contains this Text

```text
Call Text3_KeyDown(Index, vbKeyReturn, 0)
    Call Text3_KeyDown(Index, vbKeyReturn, 0)
        Call Text3_KeyDown(Index, vbKeyReturn, 0)
Call Text3_KeyDown(Index, vbKeyReturn, 0)
```

It gets replaced with

```text
 Text3_KeyDown(Index, GetFM20ReturnKey(), vbKeyReturn)
 Text3_KeyDown(Index, GetFM20ReturnKey(), vbKeyReturn)
 Text3_KeyDown(Index, GetFM20ReturnKey(), vbKeyReturn)
 Text3_KeyDown(Index, GetFM20ReturnKey(), vbKeyReturn)
```

I'm Missing the first capture group and the Call word.
Can you tell me if I'm doing something wrong or if it's a bug.
As other tools are working with the same pattern and replace strings, I think it's a bug in sd.
