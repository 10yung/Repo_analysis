Lets pretend, timer interrupt occurs and we enter interrupt as one task and we want to exit it as new task (created during execution of the first one).

```
el1_irq:
	kernel_entry 
	bl	handle_irq
	kernel_exit
```

`kernel_entry` macro will store registers including `elr_el1` and `spsr_el1`, `handle_irq` will perform task switching, but `kernel_exit` macro will try to load registers from stack, but they were never written into it, weren't they?

And the second question, regarding kernel_entry and kernel_exit macro: if we perform task switching inside interrupt, it seems we store and restore x19-x30 registers twice:
1. in cpu_switch_to
2. in el1_irq
Or I misunderstand something?
Hello, I would like to start on stuff like this as well, but I don't know which IDE to use.
I used CLion before for my code in C and C++, but afaik, it lacks assembly support.
Which IDE would you recommend? I am using Windows, but have a Ubuntu distribution as VM, which I could use as well, in case Windows isn't the best choice
Definitely related to #127, but I didn't want to reopen an older thread.

I've completed lesson 1 on my pi 4b, and made the modifications mentioned in the above thread, specifically:

Replaced the contents of config.txt with:
```
arm64bit=1
```

and then modified src/mini_uart.c to change the baud rate:
```
    put32(AUX_MU_BAUD_REG,541);
```

I've verified my code against both this repo and @vikash876, and it appears to match up.

But, using putty, I just get gibberish output. I tried the serial monitor in my arduino app to see if there's a difference, and it's a little less muddled:

![image](https://user-images.githubusercontent.com/4335834/70846980-f10f7700-1ec3-11ea-93db-78e0243a3b6c.png)

But, it _is_ still incorrect. Everything I'm seeing currently indicates this could just be attributed to the mini uart being tied to the GPU clock as compared to the PL011 uart.  Would that seem reasonable? I'm inclined to move forward as-is if so -- I see the same behaviour when I tried to set to 9600 baud.

Is there anything else obvious I might be missing?
I am working on the second exercise of [lesson1](https://github.com/s-matyukevich/raspberry-pi-os/blob/master/docs/lesson01/exercises.md) and not really clear about the order of enabling UART. Below is my order of setting different register to enable UART but this is not working to print any character.
```c
    put32(UART_CR, 0);                      // Disable the UART.  CR is control register.
    put32(UART_LCRH, (1<<4)|(3<<5));     // Enable FIFO and 8bit in a frame to transmit/receive
    put32(UART_IBRD, 26);                // Set the Integer baud rate divisor 
    put32(UART_FBRD, 3);                 // Set the Fraction baud rate divisor register
    put32(UART_CR, (1 | 1<<8 | 1<<9));      // enable UART and enable UART's Transmit and Receive
```

Then I try to check the reference solution and all guys did like the following order:
```c
    put32(UART_IBRD, 26);                // Set the baud rate divisor register
    put32(UART_FBRD, 3);
    put32(UART_LCRH, (1<<4)|(3<<5));     // Enable FIFO and 8bit in a frame to transmit/receive
```
You will set the baud rate divisor register(IBRD & FBRD) first and then LCRT register (the line control register).

I checkout the BCM2837 ARM Peripherals manual but I can not find any section talking about the order of setting these register. Can anyone share about why the order of enabling
 UART register is like this or any background knowledge to this order? Thank you.
you mentioned "**_when we enter el1_entry function the execution should be already at EL1 mode._**", but 

`
int el = get_el();
printf("Exception level: %d \r\n", el);
`

the code shows it is exception level 3, seems self contradiction, 

also, without calling "svc", how did you change the exception level from 3 to 1? 

thanks in advance!
I was trying to implement printing to real screen using the already made code found on this repo: https://jsandler18.github.io/tutorial/hdmi.html maybe someone can help me with this!
I just finished lesson01 and was wondering if the `proc_hang` endless loop that all non-primary cores go into wouldn't put 100% load on these three cores?

I was looking into the ARM documentation trying to find an instruction that basically disables a core and found `wfe` (wait for event) which will completely disable the clock for that core until an interrupt occurs. I think that is a bit nicer than a loop.

So I suggest:

```
proc_hang: 
	wfe
	b 	proc_hang
```
In the main while loop,we send char back which receive from host.
But I find that uart already got some chars  before I send.
Приветствую!

Did you think about UART booting to reduce wear of SD card, and overall development speedup, at least for development/debugging period?

When some new lessons will delight us?
I'm reading lesson05, I can build the kernel and run it on my PI. It works as expected, two user task are started and I can get different message from them. But I have a question.

When forking a user process, in function `copy_process`,  we need allocate kernel stack for new task, and copy current  task's `pt_regs` to new task's `pt_regs`. `cur_regs` point to current task's `pt_regs` and `childregs` point to new task's `pt_regs`. But why we use [`*cur_regs = *childregs;`](https://github.com/s-matyukevich/raspberry-pi-os/blob/87ab517d3f337a0257c7569200dacdd516a6bff0/src/lesson05/src/fork.c#L27) ,rather than `*childregs = *cur_regs;` ?

Thanks for this tutorial, I think it is much interesting than the OS class in college. I really control the hardware and make it work rather than talking about many algorithms.