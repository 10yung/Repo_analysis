Reproducer

```python
#pythran export t(float64[:,:], int[], float64[:,:], int)
import numpy as np
def t(dat, dat_filter, dat_points, iterations):
    aggregation = 0
    for i in range(iterations):
        aggregation += np.sum(np.linalg.norm(dat[dat_filter==i] - dat_points[i], axis=1))
    return aggregation
```

launched through

```shell
python -m timeit -s 'import numpy as np; n = 200000;d = 100;iterations = 2000;np.random.seed(42);dat = np.random.random((n, d));dat_filter = np.random.randint(0, n, size=n); dat_points = np.random.random((n, d)); from t import t;' '(t(dat, dat_filter, dat_points, iterations))'
```

original code from: https://stackoverflow.com/questions/59601987/make-loop-with-matrix-slice-more-efficient/59602932#59602932
Not-minimal-but-works example:
```python
# cython: boundscheck=False
# cython: wraparound=False
# cython: cdivision=True
# cython: infer_types=True
# cython: np_pythran=True
"""
Created on Tue Jan  7 18:18:06 2020

@author: Chronum
"""

import numpy as np
cimport cython
cimport numpy as np


cdef double PI = 3.141592653589793


cpdef np.ndarray create_overlap_matrix(double[:] in_alpha_array):
    cdef double[:, :] s
    s = np.empty([4, 4])
    
    cdef double[:] alpha_array
    alpha_array = in_alpha_array
    
    cdef unsigned int p, q
    
    for p in range(4):
        for q in range(4):
            s[p, q] = (PI / (alpha_array[p] + alpha_array[q])) ** 1.5
    
    return np.asarray(s, dtype = np.float64)
```

setup.py:
```python
"""
Created on Mon Jan  6 00:47:52 2020

@author: Chronum
"""
from setuptools import setup
from setuptools.extension import Extension
from Cython.Build import cythonize
import Cython.Compiler.Options
Cython.Compiler.Options.annotate = True
import numpy as np


extensionlist = Extension('minimal', ['minimal.pyx'],
                          include_dirs = [np.get_include()])

setup(ext_modules = cythonize(extensionlist, language_level = '3', force = True))
```

Compiles fine on Ubuntu/gcc.
On Windows, the following error:
https://hastebin.com/raw/olonatacek

I've pasted it in hastebin since the linebreaks were being weird with a direct paste.
The following functions show a discrepancy between python and pythran
```
#pythran export init(int)
def init(x):
    w = [ii for ii in range(x)]
    return ([w,])

#pythran export test(int list list)
def test(state):
    print(state[0])
    state[0][1]*=-2
    print(state[0])
    return state
```
Using with ```python -c "from newBug import test,init; A=init(2);test(A);print(A)"```
Pythran output:
```
[0, 1]
[0, -2]
[[0, 1]]
```
Python output:
```
[0, 1]
[0, -2]
[[0, -2]]
```
test is passed a list by id in python, so modifying elements of the list impacts the original list. Not so in pythran. 
The following code behaves differently in python and in pythran
```
#pythran export test()
def test():
    AA=[[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3],[1,2,3]]
    for ii in range(len(AA)):
        AA.pop()
        print(len(AA))
```
In python, AA ends up empty, not so with pythran.
This does not compile, python 3.7.4 MacOS.
```
# pythran export test()
def test():
    X = tuple([[1,2,3,4],[1,2,3,4]])
    B = X[0:1]
    B[0][3]=20
    print(B)
    print(X)
```
There is nothing on cross-compilation in Pythran documentation. I understand that it is a subject in itself but sometimes, adding `-march=native` really speedup computations, but then the binary is no longer "generalist".

Would it be possible to compile for different CPU architectures so that the binaries would be both able to run on "old" machines and able to use advanced instructions where they are available?

Unfortunately, I am already using a file called 'site.cfg' for other purposes.  It would be good to either:
1. choose a different (more specific) name for pythran
2. A command line option or config option to specify a different name
I was trying to compile [my module](https://www.dropbox.com/s/pkkzoehxbpnt0pc/GLNetEISimLib.py?dl=0) and got the error below, even though pythran successfully generates a [cpp source](https://www.dropbox.com/s/lmqpoai9dt2qeih/GLNetEISimLib.cpp?dl=0) from my module. Besides, it takes very long to generate and compile this module.

Any thoughts? Any other info that I should attach to this issue?

<pre><font color="#EF2929"><b>mschappo</b></font>@<font color="#CC0000">giraneuro</font>(<font color="#555753"><b>~/Dropbox/p/neuromat/programas/python/balanced_net_gl</b></font>) pythran GLNetEISimLib.py -v
INFO:      sys file exists: /home/mschappo/.local/lib/python3.6/site-packages/pythran/pythran.cfg
INFO: platform file exists: /home/mschappo/.local/lib/python3.6/site-packages/pythran/pythran-linux.cfg
WARNING:     user file does not exist: /home/mschappo/.pythranrc
INFO: pythranrc section [pythran] is valid and options are correct
INFO: pythranrc section [typing] is valid and options are correct
INFO: pythranrc section [compiler] is valid and options are correct
running build_ext
<font color="#06989A">new_compiler returns &lt;class &apos;distutils.unixccompiler.UnixCCompiler&apos;&gt;</font>
building &apos;GLNetEISimLib&apos; extension
C compiler: x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC

creating /tmp/tmph73gipw6/tmp
compile options: &apos;-DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/mschappo/.local/lib/python3.6/site-packages/pythran -I/home/mschappo/.local/lib/python3.6/site-packages/numpy/core/include -I/usr/include/python3.6m -c&apos;
extra options: &apos;-std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv&apos;
x86_64-linux-gnu-gcc: /tmp/tmp00xtcn8d.cpp
<b>x86_64-linux-gnu-gcc:</b> <font color="#EF2929"><b>internal compiler error: </b></font>Killed (program cc1plus)
Please submit a full bug report,
with preprocessed source if appropriate.
See &lt;file:///usr/share/doc/gcc-7/README.Bugs&gt; for instructions.
WARNING: Compilation error, trying hard to find its origin...
WARNING: Nop, I&apos;m going to flood you with C++ errors!
CRITICAL: Cover me Jack. Jack? Jaaaaack!!!!
E: error: Command &quot;x86_64-linux-gnu-gcc -pthread -DNDEBUG -g -fwrapv -O2 -Wall -g -fstack-protector-strong -Wformat -Werror=format-security -Wdate-time -D_FORTIFY_SOURCE=2 -fPIC -DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/mschappo/.local/lib/python3.6/site-packages/pythran -I/home/mschappo/.local/lib/python3.6/site-packages/numpy/core/include -I/usr/include/python3.6m -c /tmp/tmp00xtcn8d.cpp -o /tmp/tmph73gipw6/tmp/tmp00xtcn8d.o -std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv&quot; failed with exit status 4</pre>
Hi,

First, thanks a lot for your great work ! I've started to introduce Pythran in my Python trainings as it is a nice way to speed up Python !

I'm just started with it and I'm not really used in exporting functions.

I've tried this in a jupyter notebook:

```python
%%pythran -fopenmp -march=native
import numpy as np

#pythran export mandelbrot_set(float, float, float, float, float, float, int, float)
def mandelbrot_set(xmin, xmax, ymin, ymax, xn, yn, maxiter, horizon):
    X = np.linspace(xmin, xmax, int(xn), dtype=np.float32)
    Y = np.linspace(ymin, ymax, int(yn), dtype=np.float32)
    C = X + Y[:, None]*1j
    N = np.zeros(C.shape, dtype=np.int64)
    Z = np.zeros(C.shape, np.complex64)
    for n in range(maxiter):
        I = np.less(np.abs(Z), horizon)
        N[I] = n
        Z[I] = Z[I]**2 + C[I]
    N[N == maxiter-1] = 0
    return Z, N
``` 

And I've got the following output I do not understand.
I guess it is due to the double returned value, but my C++ is a bit far away.  
Could you help me solving the issue ?

Thanks a lot !

```
WARNING: Compilation error, trying hard to find its origin...
WARNING: Nop, I'm going to flood you with C++ errors!

---------------------------------------------------------------------------
DistutilsExecError                        Traceback (most recent call last)
~/anaconda/lib/python3.7/site-packages/numpy/distutils/unixccompiler.py in UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
     57         self.spawn(self.compiler_so + cc_args + [src, '-o', obj] + deps +
---> 58                    extra_postargs, display = display)
     59     except DistutilsExecError:

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in <lambda>(self, *args, **kw)
     91         # Py3k does not have unbound method anymore, MethodType does not work
---> 92         m = lambda self, *args, **kw: func(self, *args, **kw)
     93     setattr(klass, method_name, m)

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in CCompiler_spawn(self, cmd, display)
    171     raise DistutilsExecError('Command "%s" failed with exit status %d%s' %
--> 172                             (cmd, s, msg))
    173 

DistutilsExecError: Command "gcc -pthread -B /home/aliquis/anaconda/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/aliquis/anaconda/lib/python3.7/site-packages/pythran -I/home/aliquis/anaconda/lib/python3.7/site-packages/numpy/core/include -I/usr/local/include -I/usr/include -I/home/aliquis/anaconda/include -I/home/aliquis/anaconda/include/python3.7m -c /tmp/tmpvqhbc2xb.cpp -o /tmp/tmpk42ptrjz/tmp/tmpvqhbc2xb.o -std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv -fopenmp" failed with exit status 1

During handling of the above exception, another exception occurred:

CompileError                              Traceback (most recent call last)
~/anaconda/lib/python3.7/distutils/core.py in setup(**attrs)
    147         try:
--> 148             dist.run_commands()
    149         except KeyboardInterrupt:

~/anaconda/lib/python3.7/distutils/dist.py in run_commands(self)
    965         for cmd in self.commands:
--> 966             self.run_command(cmd)
    967 

~/anaconda/lib/python3.7/distutils/dist.py in run_command(self, command)
    984         cmd_obj.ensure_finalized()
--> 985         cmd_obj.run()
    986         self.have_run[command] = 1

~/anaconda/lib/python3.7/distutils/command/build_ext.py in run(self)
    339         # Now actually compile and link everything.
--> 340         self.build_extensions()
    341 

~/anaconda/lib/python3.7/distutils/command/build_ext.py in build_extensions(self)
    448         else:
--> 449             self._build_extensions_serial()
    450 

~/anaconda/lib/python3.7/distutils/command/build_ext.py in _build_extensions_serial(self)
    473             with self._filter_build_errors(ext):
--> 474                 self.build_extension(ext)
    475 

~/anaconda/lib/python3.7/site-packages/pythran/dist.py in build_extension(self, ext)
     91         try:
---> 92             return super(PythranBuildExt, self).build_extension(ext)
     93         finally:

~/anaconda/lib/python3.7/distutils/command/build_ext.py in build_extension(self, ext)
    533                                          extra_postargs=extra_args,
--> 534                                          depends=ext.depends)
    535 

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in <lambda>(self, *args, **kw)
     91         # Py3k does not have unbound method anymore, MethodType does not work
---> 92         m = lambda self, *args, **kw: func(self, *args, **kw)
     93     setattr(klass, method_name, m)

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in CCompiler_compile(self, sources, output_dir, macros, include_dirs, debug, extra_preargs, extra_postargs, depends)
    362         for o in build_items:
--> 363             single_compile(o)
    364 

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in single_compile(args)
    322             with _job_semaphore:
--> 323                 self._compile(obj, src, ext, cc_args, extra_postargs, pp_opts)
    324         finally:

~/anaconda/lib/python3.7/site-packages/numpy/distutils/ccompiler.py in <lambda>(self, *args, **kw)
     91         # Py3k does not have unbound method anymore, MethodType does not work
---> 92         m = lambda self, *args, **kw: func(self, *args, **kw)
     93     setattr(klass, method_name, m)

~/anaconda/lib/python3.7/site-packages/numpy/distutils/unixccompiler.py in UnixCCompiler__compile(self, obj, src, ext, cc_args, extra_postargs, pp_opts)
     60         msg = str(get_exception())
---> 61         raise CompileError(msg)
     62 

CompileError: Command "gcc -pthread -B /home/aliquis/anaconda/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/aliquis/anaconda/lib/python3.7/site-packages/pythran -I/home/aliquis/anaconda/lib/python3.7/site-packages/numpy/core/include -I/usr/local/include -I/usr/include -I/home/aliquis/anaconda/include -I/home/aliquis/anaconda/include/python3.7m -c /tmp/tmpvqhbc2xb.cpp -o /tmp/tmpk42ptrjz/tmp/tmpvqhbc2xb.o -std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv -fopenmp" failed with exit status 1

During handling of the above exception, another exception occurred:

SystemExit                                Traceback (most recent call last)
~/anaconda/lib/python3.7/site-packages/pythran/toolchain.py in compile_cxxfile(module_name, cxxfile, output_binary, **kwargs)
    311                            '--build-lib', builddir,
--> 312                            '--build-temp', buildtmp]
    313               )

~/anaconda/lib/python3.7/site-packages/numpy/distutils/core.py in setup(**attr)
    170 
--> 171     return old_setup(**new_attr)
    172 

~/anaconda/lib/python3.7/distutils/core.py in setup(**attrs)
    162             else:
--> 163                 raise SystemExit("error: " + str(msg))
    164 

SystemExit: error: Command "gcc -pthread -B /home/aliquis/anaconda/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/aliquis/anaconda/lib/python3.7/site-packages/pythran -I/home/aliquis/anaconda/lib/python3.7/site-packages/numpy/core/include -I/usr/local/include -I/usr/include -I/home/aliquis/anaconda/include -I/home/aliquis/anaconda/include/python3.7m -c /tmp/tmpvqhbc2xb.cpp -o /tmp/tmpk42ptrjz/tmp/tmpvqhbc2xb.o -std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv -fopenmp" failed with exit status 1

During handling of the above exception, another exception occurred:

CompileError                              Traceback (most recent call last)
<ipython-input-11-8b30082655e7> in <module>
----> 1 get_ipython().run_cell_magic('pythran', '-fopenmp', 'import numpy as np\n\n#pythran export mandelbrot_set(float, float, float, float, float, float, int, float)\ndef mandelbrot_set(xmin, xmax, ymin, ymax, xn, yn, maxiter, horizon):\n    X = np.linspace(xmin, xmax, int(xn), dtype=np.float32)\n    Y = np.linspace(ymin, ymax, int(yn), dtype=np.float32)\n    C = X + Y[:, None]*1j\n    N = np.zeros(C.shape, dtype=np.int64)\n    Z = np.zeros(C.shape, np.complex64)\n    for n in range(maxiter):\n        I = np.less(np.abs(Z), horizon)\n        N[I] = n\n        Z[I] = Z[I]**2 + C[I]\n    N[N == maxiter-1] = 0\n    return Z, N\n')

~/anaconda/lib/python3.7/site-packages/IPython/core/interactiveshell.py in run_cell_magic(self, magic_name, line, cell)
   2321             magic_arg_s = self.var_expand(line, stack_depth)
   2322             with self.builtin_trap:
-> 2323                 result = fn(magic_arg_s, cell)
   2324             return result
   2325 

<decorator-gen-801> in pythran(self, line, cell)

~/anaconda/lib/python3.7/site-packages/IPython/core/magic.py in <lambda>(f, *a, **k)
    185     # but it's overkill for just that one bit of state.
    186     def magic_deco(arg):
--> 187         call = lambda f, *a, **k: f(*a, **k)
    188 
    189         if callable(arg):

~/anaconda/lib/python3.7/site-packages/pythran/magic.py in pythran(self, line, cell)
     65         m.update(cell.encode('utf-8'))
     66         module_name = "pythranized_" + m.hexdigest()
---> 67         module_path = pythran.compile_pythrancode(module_name, cell, **kwargs)
     68         module = imp.load_dynamic(module_name, module_path)
     69         self._import_all(module)

~/anaconda/lib/python3.7/site-packages/pythran/toolchain.py in compile_pythrancode(module_name, pythrancode, specs, opts, cpponly, pyonly, output_file, module_dir, **kwargs)
    410                                           str(module),
    411                                           output_binary=output_file,
--> 412                                           **kwargs)
    413         except CompileError:
    414             logger.warn("Compilation error, trying hard to find its origin...")

~/anaconda/lib/python3.7/site-packages/pythran/toolchain.py in compile_cxxcode(module_name, cxxcode, output_binary, keep_temp, **kwargs)
    353     fdpath = _write_temp(cxxcode, '.cpp')
    354     output_binary = compile_cxxfile(module_name, fdpath,
--> 355                                     output_binary, **kwargs)
    356     if not keep_temp:
    357         # remove tempfile

~/anaconda/lib/python3.7/site-packages/pythran/toolchain.py in compile_cxxfile(module_name, cxxfile, output_binary, **kwargs)
    313               )
    314     except SystemExit as e:
--> 315         raise CompileError(str(e))
    316 
    317     def copy(src_file, dest_file):

CompileError: error: Command "gcc -pthread -B /home/aliquis/anaconda/compiler_compat -Wl,--sysroot=/ -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -DENABLE_PYTHON_MODULE -D__PYTHRAN__=3 -DPYTHRAN_BLAS_BLAS -I/home/aliquis/anaconda/lib/python3.7/site-packages/pythran -I/home/aliquis/anaconda/lib/python3.7/site-packages/numpy/core/include -I/usr/local/include -I/usr/include -I/home/aliquis/anaconda/include -I/home/aliquis/anaconda/include/python3.7m -c /tmp/tmpvqhbc2xb.cpp -o /tmp/tmpk42ptrjz/tmp/tmpvqhbc2xb.o -std=c++11 -fno-math-errno -w -fvisibility=hidden -fno-wrapv -fopenmp" failed with exit status 1

```
[This silly module][1] takes 5 min to compile, while [this][2] can do it in just one. This is not really a big problem for using Pythran, but it becomes annoying when trying to debug it.

(I would be perfectly happy if this gets closed with WONTFIX.)


   [1]:https://github.com/Dapid/toy_sudoku_solver/blob/master/simple_solver.py
   [2]: https://github.com/Dapid/toy_sudoku_solver/blob/master/simple_solver_2.py