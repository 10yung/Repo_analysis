Proper documentation for State Synchronization Protocol other than a reference implementation would be much appreciated, and probably improve adaptation. Personally, it's hard to get a general flow of how to open a server running SSP or connect to a server via SSP from the C++.
Running into this really weird bug with one particular server. When I'm done with my SSH/mosh sessions I like to run `exit` to tell the server to "cleanly" break off the connection. On most of my servers this works well. However, on one shared server that I use with others, when I run `exit` from the shell, it is immediately followed by the output `logout`, but nothing happens.

The only way to quit mosh in this state is to issue the Ctrl-^ and then the period (.) command to quit mosh on my side (client), which is a bit annoying. Why isn't mosh terminating the connection?

Just to test, I spun up a fresh Ubuntu server and installed mosh, and mosh correctly kills both client and server when I issue the `exit` command. What could be going wrong?
My cursor changes style from pipe to rectangle in ZSH shell when use vim mode but also in vim when switching from Normal and Insert modes. The cursor changes styles when I use ssh but in a mosh session, I see only the pipe-style cursor and it never changes.

Is there a way to fix that behavior?

I'm using the latest git version build on the server and on the client.
Server - archlinux: `mosh 1.3.2 [build mosh-1.3.2-86-g0cc492d]`
Client - macosx: `mosh 1.3.2 [build mosh-1.3.2-86-g0cc492d]`
our company use jumpserver as a boston server.
but it was really slow while do some work in ssh,
I try to use mosh, but it seems need to install mosh in server , and I not certain if it can work with jumpserver, cause it is not a really ssh.
SIXEL is an image format that allows high-quality image display in terminal.
For detailed information, check `libsixel` repo and Wikipedia:

- https://github.com/saitoha/libsixel
- https://en.wikipedia.org/wiki/Sixel

As shown in the comparison below, it seems that sixel graphics are supported by SSH but not mosh.
The terminal emulator tested with is [wsl-terminal](https://github.com/goreliu/wsl-terminal/) v0.8.13, which is based on [mintty](https://mintty.github.io/). On Linux, [mlterm](https://sourceforge.net/projects/mlterm/) also has sixel support out-of-the-box.

## SSH
![img2sixel-ssh](https://user-images.githubusercontent.com/1129506/69897760-9f2f0300-1393-11ea-88d2-7d221f1156f4.PNG)

## mosh
![img2sixel-mosh](https://user-images.githubusercontent.com/1129506/69897763-a81fd480-1393-11ea-96c5-374a85a7fecb.PNG)
What could possibly go wrong?

```shell
$ mosh --server=/usr/bin/mosh host.example.com
Option s is ambiguous (server, ssh, ssh-pty)
Usage: /usr/bin/mosh [options] [--] [user@]host [command...]
        --client=PATH        mosh client on local machine
                                (default: "mosh-client")
… etc …
```

Oops, I meant `/usr/bin/mosh-server`

How about,  "Hey, this looks like the client and not the server?" 
As you can see, the display leaves characters from a previous screen and some characters disappear. You can see some content from running two `ls` commands before opening vim.

![Screen Glitches](https://user-images.githubusercontent.com/4714862/69394412-ce0cf100-0c90-11ea-9d69-ae64fc43b62f.png)

mosh 1.3.2 from macOS to Ubuntu 18 LTS. Terminal emulator is iTerm2.


Mosh breaks with `tmux -CC`. After running the command, it freezes and all input is ignored.
12.0R
<img width="507" alt="fb12" src="https://user-images.githubusercontent.com/1435951/68412618-e6c8d180-01cf-11ea-803c-61e20ecfa7de.PNG">

12.1R
<img width="522" alt="fb12 1" src="https://user-images.githubusercontent.com/1435951/68412625-e8929500-01cf-11ea-9117-aa1e46d2da17.PNG">

It was displayed correctly in 12.0.

12 and 12.1 were installed newly newly, and tried whether you recurred.

This phenomenon recurred by an upgrade to 12.1 and 12.1.

This problem doesn't form by 12.0R.

If it's in case of ssh, a problem doesn't occur.
Hi, I am having a strange issue with mosh.

In general, mosh has been working great across a wide range of computers that I have.

Today I installed mosh on a desktop computer of mine.

For testing, my laptop and my desktop are both connected via WiFi to the same access point.

## Computers and mosh versions involved

**Laptop**: MacBook Air 2018, running macOS Catalina 10.15.1

mosh version on laptop: mosh 1.3.2, installed with homebrew

**Desktop**: MSI Cubi, running KDE neon 5.17 User Edition (based on Ubuntu 18.04)

mosh version on desktop: mosh 1.3.2, installed with apt using the default repos of KDE neon

## Network

Both computers are connected to the same Access Point, which in turn is connected to a router by cable.

## Things that work

I am able to SSH from the laptop to the desktop.

```text
user@laptop ~ % ssh 203.0.113.220
```

I am able to SSH from the desktop to the laptop.

```text
user@desktop:~$ ssh 203.0.113.221
```

I am able to listen on UDP port 60001 on the desktop, and send a message to it from the laptop.

```text
user@desktop:~$ nc -w 0 -lu 60001
```

```text
user@laptop ~ % nc -w 0 -u 203.0.113.220 60001 <<EOF
hello
EOF
```

```text
hello
```

I am able to listen on UDP port 60001 on the laptop, and send a message to it from the desktop.

```text
user@laptop ~ % nc -w 0 -lu 60001
```

```text
user@desktop:~$ nc -w 0 -u 203.0.113.221 60001 <<EOF
hello
EOF
```

```text
hello
```

I am able to connect to the laptop with mosh from the desktop

```text
user@desktop:~$ mosh 203.0.113.221
```

## Problem

I am unable to connect to the desktop with mosh from the laptop

```text
user@laptop ~ % mosh 203.0.113.220
```

Shows the following message at the top of the terminal with a blue background:

```text
mosh: Nothing received from server on UDP port 60001. [To quit: Ctrl-^ .]
```

After about 15 seconds without contact, mosh times out and then it exits a few seconds after that with the following output:

```text
mosh did not make a successful connection to 203.0.113.220:60001.
Please verify that UDP port 60001 is not firewalled and can reach the server.

(By default, mosh uses a UDP port between 60000 and 61000. The -p option
selects a specific UDP port number.)
[mosh is exiting.]
```