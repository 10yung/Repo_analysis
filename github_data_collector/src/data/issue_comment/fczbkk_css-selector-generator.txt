I rewrote the library from scratch to get rid of all the old stuff (CoffeeScript, Grunt, etc.). It is now written in ES6 and uses Webpack/Babel to build.

The selectors should be the same as in previous version, some may be a bit better ([combining between selector types](https://github.com/fczbkk/css-selector-generator/tree/dev#combine-between-selectors) is new).

The interface is changed, should be simpler now. All the original features are there, but some options are renamed or merged. You can see the migration instructions in documentation:
https://github.com/fczbkk/css-selector-generator/tree/dev#migrate-from-v1-to-v2
Same as #31 but without jasmine update as requested in #30.

Florent
When I ran `npm audit`, I got a lot of security issues reported.

So I updated the packages.

Also note that I use browserlist in order to transpile into code supported by browsers whose market share is above 0.25% using this line in package.json. Is it fine for you?
```
"browserslist": "> 0.25%, not dead",
```

Florent
A quite simple patch to fix test stability.
feat: Added id_whitelist and class_whitelist options
feat: Added root_node option to get relative CSS selector
feat: Added a `get_options` option. Setting get_options to a function that accepts an element as a parameter invokes the function for updating the options before the selector is generated. In effect, options become dynamic per element.
refactor: Polyfill `Array.find` is moved from the test to src module.
refactor: Removed polyfill `Array.find`
updated: README.md

@fczbkk I need the root_node option for one of my projects. Since, the option doesn't change the original behaviour, I will be grateful if it is kept :). Otherwise, I need to maintain a fork.
works 100% on Chrome
should work on Firefox
and any browser that supports the `javascript:...` synthax for URLs

You might want to externally load the class for maintenance sake, but as a proof of concept I found that simply including the minfied version was the easiest and good enough.

you might not like the phrasing I chose so feel free to change it.
Looks like a robust library... Might you consider moving from CoffeeScript to ES6, including with ES6 Modules export (I'd recommend Rollup)? Thanks!
Hi - me again (sorry).

I'm running this bit of code in the console

`document.addEventListener( "mouseover", function(event) { var CSSstring = findCSSPath(event.target); console.log(CSSstring); });`

where the findCSSPath function is just a wrapper for your css selector generator.

On the whole, this works as expected. I've tested it on quite a few sites. However, on 

`http://observer.com/`

I'm getting a silent failure from the code. No errors, but no CSS path sent to the console. Eventually it causes Chrome to crash. There's clearly something odd about the structure of the site.

I don't know if this is the kind of thing you want reported, but I'm struggling to find the problem.

This works fine for most cases but breaks down with an error for some elements with "Uncaught TypeError: Cannot read property 'querySelectorAll' of null"

<img width="1273" alt="screen shot 2016-05-23 at 3 00 31 pm" src="https://cloud.githubusercontent.com/assets/2356550/15466452/58c14cc6-20f7-11e6-9f90-f62eb60eabd3.png">

The error in my case came when using this on this page https://cloud.digitalocean.com/droplets/new?size=2gb&region=nyc2 and clicking on a div in "Choose a datacenter region".

I'm seeing an issue where a website with a large amount of classes on the `<html>` element causes the `getCombinations` to lock up on the following code:

```
for (i = k = 0, ref = items.length - 1; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
  for (j = l = 0, ref1 = result.length - 1; 0 <= ref1 ? l <= ref1 : l >= ref1; j = 0 <= ref1 ? ++l : --l) {
    result.push(result[j].concat(items[i]));
  }
}
```

In my case, I have 47 classes that are returned by `getAllSelectors`, which I assume are generated by the UI libraries running on the website.
