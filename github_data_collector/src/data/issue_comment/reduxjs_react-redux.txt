**TL;DR:** With the introduction of [`@reduxjs/toolkit`](/reduxjs/redux-toolkit), we can now use it in place of `redux`, thus making both peer dependencies **optional**.

As suggested by @markerikson in https://github.com/reduxjs/redux-toolkit/issues/238#issuecomment-547237742,
> One other small downside is that React-Redux says it wants Redux as a peer, and logs a warning if only RSK is installed.

Currently, this warning may very well give the false impression that `@reduxjs/toolkit` must be installed **alongside** `redux` for it to work properly.

Ideally, an `UNMET PEER DEPENDENCY` warning should by displayed **iff** neither `redux`  nor `@reduxjs/toolkit` is installed, but neither `npm` nor `yarn` has a way to specify such a requirement AFAIK. That leaves us no choice but to mark both as optional (similar to the [`react-dom`-vs-`react-native` situation](https://github.com/reduxjs/react-redux/pull/1390#issuecomment-528940544)), if we are to avoid being misleading.

In the future, leaving `redux` as is might pose a bigger problem still with `npm` v7, which will install peer dependencies automatically, as outlined in the [npm CLI Roadmap](https://github.com/npm/cli/wiki/Roadmap#proper-peerdependencies-support) among other places:
> ### Proper `peerDependencies` Support
> Part of the installer rewrite involves taking a fresh look at how `peerDependencies` are handled (and, quite often, _not_ handled) to maximize the cases where the CLI does the right thing. Since npm v3, `peerDependencies` were not installed by default, putting the onus on users to resolve them. We'll be bringing back this functionality in version 7.
**Do you want to request a _feature_ or report a _bug_?**

Yes

**What is the current behavior?**

I got on https://react-redux.js.org/api most likely from a DDG search or somebody linking it in SO or something. Documentation lists `createProvider` which we were using but was removed since version 6 or so, however label on top shows version 7.1 so it was very confusing that API documentation is outdated and there are no references to `createProvider` in documentation source  

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to a CodeSandbox (https://codesandbox.io/s/new) or RN Snack (https://snack.expo.io/) example below:**

1. Open up https://react-redux.js.org/api#createprovider
2. See version at top say "7.1" 
3. Try to use `createProvider` - it's gone
4. (optional) Look all over source code for it to see if it was removed and why documentation lists it and if removal was intended or accident or what
5. (optional) Make this bug report 


**What is the expected behavior?**

https://react-redux.js.org/api redirects to most recent documentation or gives 404 or updated to reflect recent changes or show correct version.

**Which versions of React, ReactDOM/React Native, Redux, and React Redux are you using?  Which browser and OS are affected by this issue? Did this work in previous versions of React Redux?**

Firefox.

Related to #1001 

Potential solutions:
- Link to guide in the list of guides in the side navigation pane
- Duplicate the content of the style guide to both documentation sites
- Migrate the `react-redux` specific guide only
**Do you want to request a _feature_ or report a _bug_?**
Bug, possibly.
(If this is a _usage question_, please **do not post it here**—post it on [Stack Overflow](http://stackoverflow.com/questions/tagged/redux) instead. If this is not a “feature” or a “bug”, or the phrase “How do I...?” applies, then it's probably a usage question.)


**What is the current behavior?**
A component's `useSelector` value is not updated when an action is fired from a utility function that changes that state. The action that is fired is clearly visible (and successful) in the Redux state timeline.
See discussion and code sample below; unable so far to get a sandox demo running... sorry.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to a CodeSandbox (https://codesandbox.io/s/new) or RN Snack (https://snack.expo.io/) example below:**



**What is the expected behavior?**
Since `useSelector` is subscribing to changes to it's values, its value should be updated upon the change.


**Which versions of React, ReactDOM/React Native, Redux, and React Redux are you using?  Which browser and OS are affected by this issue? Did this work in previous versions of React Redux?**
This is a new use case for me, so cannot compare to previous versions. 
Redux : 4.0.4
React : 16.12.0
React-Redux : 7.1.1
(FYI: already [posted on SO](https://stackoverflow.com/questions/59219784/react-redux-state-change-gets-overwritten): 

**Discussion**
I have several components that use a Modal to upload files and then submit them for processing by our backend. The user may upload one or more files and they are stored in Redux and then listed on the main page. The submission to the backend is done by a utility function which issues the API calls and checks status to ensure that the backend processing was correctly submitted. Each file submitted to the backend is identified by a groupId. The upload and subsequent submission is kicked off when the user clicks the "CONTINUE" button on the FileDrop component.

This was all working just fine until the requirement came along to exclude any duplicate files (by fileName for now). If a duplicate file is detected (by querying the list of files in the Redux store), the user is offered the opportunity to cancel the request or replace the existing file... and that's where the trouble is.

Here's a skeleton of the code, showing the relevant pieces. Cancelling a request works just fine; but I'm unable to correctly update the Redux store when replacing a file.

The flow through the code is as follows:
[1] User requests a file upload and component `ModalFileDropPage` is invoked
[2] The `FileDrop` component is invoked; the modal is displayed, the user selects a file, and clicks the "CONTINUE" button.
[3] The `handleModalUpload` function is invoked, which submits the uploaded file to the backend. It is passed the function `removeGroupIdFromRedux` as a parameter.
[4] If the file is a duplicate and the user requests that it replace the previous file, we delete the file from the backend and then request the associated Redux item be removed via the link to the `removeGroupIdFromRedux` function. The current request for the uploaded file is handled in the normal fashion, returning to `continueToNextPage` with the `mediaInfo` (or possibly an error)
```
// The main component that requests the file upload and submits it for processing
import React from 'react';

// [1]
const ModalFileDropPage = props => {
  const logos = useSelector(state => state.files.logos);

// [4]
  const removeGroupIdFromRedux = async id => {
    await dispatch(storeLogos([...logos.filter(({ groupId }) => groupId !== id)]));
  };

  const continueToNextPage = async currentPage => {
    setMediaRoleId(mediaRoles);
// [3]
    const mediaInfo = await handleModalUpload();
    if (!mediaInfo.response) { // update redux if no errors
      await dispatch(storeLogos([...logos, {
        // SUCCESS: store uploaded file info in Redux
      }]));
    } else {
      // ERROR: clear file data and cancel FileDrop modal
    }
  };

// [2]
  return (
    <FileDrop>
      <Button onClick={event => continueToNextPage(1, event)}>CONTINUE</Button>
    </FileDrop>
  );
};

// from the separate file containing handleModalUpload utility function
const handleModalUpload = async (
  file,                 // file name being processed
  allFiles,             // function to provide all files data from Redux
  removeGroupFromRedux, // function to delete original file from Redux
  setUploading,         // Uploading state function
) => {
  setUploading(true);

  try {
    /* Test for duplicate fileName and prompt user to either:
     * 1) cancel the upload
     * 2) replace the original file with the new copy of the file
     */
    const replace = swal('cancel or replace', { buttons : true }); // uses SweetAlert
  } catch (err) {
    if (!replace) {
      throw new DuplicateFileName('Duplicate file name'); // this works just fine
    } else {
      const success = await deleteMediaAsset(oldFile.groupId); // Delete file from backend
      if (!success) {
        throw new ReplaceDeleteError('Unable to delete existing file for replacement');
      }

// Excerpt from the reducers...
import { filesActions } from '../actions/actionTypes';
import filesInitialState from '../../components/Files/initialState';

export default function reducer(state = filesInitialState, action) {
  switch (action.type) {
    case filesActions.STORE_LOGOS: {
      return {
        ...state,
        logos : action.payload
      };
    }
    case filesActions.STORE_LOGOS_PAGE: {
      return {
        ...state,
        logosPage : action.payload
      };
    }
    case filesActions.STORE_LOGOS_URL: {
      const { logos, logosPageCurrentGroup } = state;
      const logoIndex = logos.findIndex(item => item.groupId === logosPageCurrentGroup);
      const logo = logos[logoIndex];
      logo.url = action.payload;
      logos[logoIndex] = logo;
      return {
        ...state,
        logos
      };
    }
    default:
      return state;
  }
```
When the user opts to replace the existing file, the removeGroupIdFromRedux function is successfully called and the log shows that the action was successfully performed and there is now one less item in Redux (in the image below, there was only one file for testing, so the result from this call is an empty logos array).

The next thing that happens is that the SUCCESS code in continueToNextPage is executed and it sets the logos array to two items -- the original one and the newly-added one. The previous update to the Redux store is not recognized.
![image](https://user-images.githubusercontent.com/486/70359291-675f0a00-1830-11ea-9408-f80f21c68228.png)

 Thanks



In v7, we added a hard dependency on either `react-dom` _or_ `react-native`, because we need to pull in `unstable_batchedUpdates`.  For those users who happen to not be using RD or RN, we added an "alternate renderers" entry point that drops the batching.

This entry point was described in the v7 release notes at https://github.com/reduxjs/react-redux/releases/tag/v7.0.1 , but we do not have it formally documented.  We should add some kind of a usage guide page for using RR with other renderers.

This came up in #1457 .
fix https://github.com/reduxjs/react-redux/issues/1351

>  Hi folks.
> My idea is to change forceRender into useSelector hook, let instead set a state, and return that state.
> This should transform redux state changes into react useState changes that should batched and eventually paused form react concurrent mode



**Do you want to request a _feature_ or report a _bug_?**

Originally commented https://github.com/reduxjs/react-redux/pull/1412#issuecomment-537546848 to respond @salazarm 's question.

It's a hypothetical bug.

**What is the current behavior?**

checkForUpdates read `equalityFn` from the stale closure, so even if `equalityFn` is changed after the first render, the change doesn't affect.

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to a CodeSandbox (https://codesandbox.io/s/new) or RN Snack (https://snack.expo.io/) example below:**

https://codesandbox.io/s/pensive-bhabha-nxt3y
This example is tried to be realistic possible.
The equalityFn is null at the first render and later changed to shallowEqual.
In the result, checkUpdates triggers unnecessary rerenders.

**What is the expected behavior?**

Use `equalityFn` from the latest render.

**Which versions of React, ReactDOM/React Native, Redux, and React Redux are you using?  Which browser and OS are affected by this issue? Did this work in previous versions of React Redux?**

react-redux 7.1.1
Hey, in recent issue we found test case which violates principle of top-down state update behaviour when state change propagates through mapStateToProps: https://github.com/reduxjs/react-redux/issues/1397.

This PR is adding reproducible test-case to highlight this issue, I believe this is important due to statement in this part of codebase:
```
if (lastThrownError) {
    // It's possible that we caught an error due to a bad mapState function, but the
    // parent re-rendered without this component and we're about to unmount.
    // This shouldn't happen as long as we do top-down subscriptions correctly, but
    // if we ever do those wrong, this throw will surface the error in our tests.
    // In that case, throw the error from here so it doesn't get lost.
    throw lastThrownError
}
```

I would be grateful if you will help me to find how to fix this test case in react-redux or at least merge this test to make sure that issue will be fixed eventually.
When a dispatch is triggered from a lifecycle method as a side-effect of a re-render from a previous dispatch, we wind up calling mapStateToProps on components that are never going to be rendered and are about to be unmounted.

https://github.com/reduxjs/react-redux/pull/1263 fixed a very similar issue when multiple dispatches are triggered simultaneously.

Minimal repro is here: https://codesandbox.io/embed/react-redux-issue-debug-rvr-8whlb
**Do you want to request a _feature_ or report a _bug_?**

A bug

**What is the current behavior?**

When the wrapped component dispatches any action in `cDU` or `uLE` as a reaction to external prop change, an unnecessary re-render is made

**If the current behavior is a bug, please provide the steps to reproduce and if possible a minimal demo of the problem. Your bug will get fixed much faster if we can run your code and it doesn't have dependencies other than React. Paste the link to a CodeSandbox (https://codesandbox.io/s/new) or RN Snack (https://snack.expo.io/) example below:**

https://codesandbox.io/s/unruffled-glitter-ofxmq?fontsize=14

Open console, click "Activate"

**What is the expected behavior?**

`Child` re-renders only once after clicking the button

**Which versions of React, ReactDOM/React Native, Redux, and React Redux are you using?  Which browser and OS are affected by this issue? Did this work in previous versions of React Redux?**

See codesandbox above

The probable reason of the bug is that `lastWrapperProps.current` is outdated at the moment of dispatch: 
https://github.com/reduxjs/react-redux/blob/master/src/components/connectAdvanced.js#L322-L325
This leads to `ownProps` reference being reset to an older value:
https://github.com/reduxjs/react-redux/blob/master/src/connect/selectorFactory.js#L78

One possible workaround is to introduce a separate `recentWrapperProps` ref and set in immediately inside `render`

```
const recentWrapperProps = useRef()
recentWrapperProps.current = wrapperProps
```