Here's an example. I've put a lot of Requires() to demonstrate that the issue is somehow related with decimal having fractional part, and also with placement in argument list.

``` C#
using System;
using System.Diagnostics.Contracts;

namespace FodyTest
{
    class Worker
    {
        public static decimal CalcSmth(decimal foo, decimal bar, decimal buz, decimal qwe)
        {
            Contract.Requires(foo > bar);
            Contract.Requires(foo > buz);
            Contract.Requires(foo < qwe);
            Contract.Requires(bar < foo);
            Contract.Requires(bar < buz);
            Contract.Requires(bar < qwe);
            Contract.Requires(buz < foo);
            Contract.Requires(buz > bar);
            Contract.Requires(buz < qwe);
            Contract.Requires(qwe > foo);
            Contract.Requires(qwe > bar);
            Contract.Requires(qwe > buz);
            return (foo + bar + buz + qwe) / 2;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine($"Worker.CalcSmth() returned {Worker.CalcSmth(12.0M, 1.5M, 2, 35.1M)}");
        }
    }
}
```
As you can see, no contracts are actually broken, but cccheck doesn't agree:
```
1>  CodeContracts: Task manager is unavailable (unable to run in background).
1>  CodeContracts: FodyTest: Run static contract analysis.
1>  CodeContracts: FodyTest: Time spent connecting to the cache: 00:00:03.5008095
1>  CodeContracts: FodyTest: Cache used: (LocalDb)\v11.0
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: Suggested requires: This precondition is redundant: Consider removing it
1>  CodeContracts: FodyTest: Validated: 77.8 %
1>  CodeContracts: FodyTest: Checked 18 assertions: 14 correct 4 unknown
1>  CodeContracts: FodyTest: Contract density: 2.68
1>  CodeContracts: FodyTest: Total methods analyzed 4
1>  CodeContracts: FodyTest: Methods analyzed with a faster abstract domain 0
1>  CodeContracts: FodyTest: Method analyses read from the cache 4
1>  CodeContracts: FodyTest: Methods not found in the cache 0
1>  CodeContracts: FodyTest: Methods with 0 warnings 3
1>  CodeContracts: FodyTest: Total time 1.981sec. 495ms/method
1>  CodeContracts: FodyTest: Retained 0 preconditions after filtering
1>  CodeContracts: FodyTest: Inferred 0 object invariants
1>  CodeContracts: FodyTest: Retained 0 object invariants after filtering
1>  CodeContracts: FodyTest: Detected 0 code fixes
1>  CodeContracts: FodyTest: Proof obligations with a code fix: 0
1>C:\Users\user\source\repos\FodyTest\Program.cs(30,13,30,103): warning : CodeContracts: requires unproven: foo > bar
1>C:\Users\user\source\repos\FodyTest\Program.cs(10,13,10,42): warning : CodeContracts: location related to previous warning
1>C:\Users\user\source\repos\FodyTest\Program.cs(30,13,30,103): warning : CodeContracts: requires unproven: foo > buz
1>C:\Users\user\source\repos\FodyTest\Program.cs(11,13,11,42): warning : CodeContracts: location related to previous warning
1>C:\Users\user\source\repos\FodyTest\Program.cs(30,13,30,103): warning : CodeContracts: requires unproven: foo < qwe
1>C:\Users\user\source\repos\FodyTest\Program.cs(12,13,12,42): warning : CodeContracts: location related to previous warning
1>C:\Users\user\source\repos\FodyTest\Program.cs(30,13,30,103): warning : CodeContracts: requires unproven: bar < buz
1>C:\Users\user\source\repos\FodyTest\Program.cs(14,13,14,42): warning : CodeContracts: location related to previous warning
1>  CodeContracts: Checked 18 assertions: 14 correct 4 unknown
1>  CodeContracts: FodyTest: 
1>  CodeContracts: FodyTest: Static contract analysis done.
========== Build: 1 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
```

Visual Studio 2019 16.3.10
.NET Framework 4.8.03752
Installed NuGet packages System.Diagnostic.Contracts 4.3.0 and CodeContracts.MSBuild.v2 1.13.0.
In a method that has a local function within it, adding a precondition will lead to the rewrite tool to mess up compile generated class used by the local function.

Here is the IL of the method when compiled with no precondition
```
private void HandleCrossSection(CrossSection crossSection, bool isLeftSide, AnimationCurve rangeMinCurve, AnimationCurve rangeMaxCurve, bool hasMorphing, string sectionName, Transform parentTransform, CurvyGenerator curvyGenerator, Dictionary<CurvySpline, InputSplineShape> trackSectionCreatedShapeModules, Dictionary<(Material Material, bool IsMagnetized, string sectionName), List<BuildShapeExtrusion>> buildShapeExtrusions, ref Vector3 startOriginTranslation, ref Quaternion startOriginRotation, ref Vector3 endOriginTranslation, ref Quaternion endOriginRotation, InputSplinePath inputSplinePath)
{
	<>c__DisplayClass41_0 <>c__DisplayClass41_ = default(<>c__DisplayClass41_0);
	<>c__DisplayClass41_.trackSectionCreatedShapeModules = trackSectionCreatedShapeModules;
	<>c__DisplayClass41_.<>4__this = this;
	<>c__DisplayClass41_.sectionName = sectionName;
	<>c__DisplayClass41_.parentTransform = parentTransform;
	<>c__DisplayClass41_.crossSection = crossSection;
	<>c__DisplayClass41_.isLeftSide = isLeftSide;
	Debug.LogWarning((object)<>c__DisplayClass41_.crossSection);
	BuildShapeExtrusion buildShapeExtrusion = curvyGenerator.AddModule<BuildShapeExtrusion>();
	buildShapeExtrusion.Resolution = 19;
	buildShapeExtrusion.CrossResolution = 30;
	buildShapeExtrusion.Optimize = false;
	buildShapeExtrusion.CrossOptimize = false;
	buildShapeExtrusion.CrossReverseNormals = false;
	buildShapeExtrusion.Initialize();
	buildShapeExtrusion.set_name("Extrusion_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
	buildShapeExtrusion.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
	bool flag = rangeMinCurve != null && rangeMaxCurve != null;
	ModifierShapeVariableRange modifierShapeVariableRange;
	if (flag)
	{
		modifierShapeVariableRange = curvyGenerator.AddModule<ModifierShapeVariableRange>();
		modifierShapeVariableRange.Initialize();
		modifierShapeVariableRange.set_name("VariableRange_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
		modifierShapeVariableRange.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
		modifierShapeVariableRange.MinCurve = rangeMinCurve;
		modifierShapeVariableRange.MaxCurve = rangeMaxCurve;
		modifierShapeVariableRange.OutShape.LinkTo(buildShapeExtrusion.InCross);
	}
	else
	{
		modifierShapeVariableRange = null;
	}
	CGModuleInputSlot cGModuleInputSlot = flag ? modifierShapeVariableRange.InShape : buildShapeExtrusion.InCross;
	MorphShapes morphShapes;
	if (hasMorphing)
	{
		morphShapes = curvyGenerator.AddModule<MorphShapes>();
		morphShapes.Initialize();
		morphShapes.set_name("Morph_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
		morphShapes.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
		morphShapes.MorphingCurve = AnimationCurveExtension.LinearAnimationCurve;
		morphShapes.OutShape.LinkTo(cGModuleInputSlot);
	}
	else
	{
		morphShapes = null;
	}
	<HandleCrossSection>g__CreateInputShapeModules|41_0(<>c__DisplayClass41_.crossSection.StartShape, ref startOriginTranslation, ref startOriginRotation, hasMorphing ? morphShapes.InShapeA : cGModuleInputSlot, ref <>c__DisplayClass41_);
	if (hasMorphing)
	{
		<HandleCrossSection>g__CreateInputShapeModules|41_0(<>c__DisplayClass41_.crossSection.EndShape, ref endOriginTranslation, ref endOriginRotation, morphShapes.InShapeB, ref <>c__DisplayClass41_);
	}
	inputSplinePath.Path.LinkTo(buildShapeExtrusion.InPath);
	(Material, bool, string) key = (<>c__DisplayClass41_.crossSection.Material, <>c__DisplayClass41_.crossSection.IsMagnetized, <>c__DisplayClass41_.sectionName);
	if (!buildShapeExtrusions.ContainsKey(key))
	{
		buildShapeExtrusions[key] = new List<BuildShapeExtrusion>();
	}
	buildShapeExtrusions[key].Add(buildShapeExtrusion);
}

```

And here it is with a precondition

```
private void HandleCrossSection(CrossSection crossSection, bool isLeftSide, AnimationCurve rangeMinCurve, AnimationCurve rangeMaxCurve, bool hasMorphing, string sectionName, Transform parentTransform, CurvyGenerator curvyGenerator, Dictionary<CurvySpline, InputSplineShape> trackSectionCreatedShapeModules, Dictionary<(Material Material, bool IsMagnetized, string sectionName), List<BuildShapeExtrusion>> buildShapeExtrusions, ref Vector3 startOriginTranslation, ref Quaternion startOriginRotation, ref Vector3 endOriginTranslation, ref Quaternion endOriginRotation, InputSplinePath inputSplinePath)
{
	TrackGenerator_<>c__DisplayClass41_0_0 trackGenerator_<>c__DisplayClass41_0_ = default(TrackGenerator_<>c__DisplayClass41_0_0);
	trackGenerator_<>c__DisplayClass41_0_.trackSectionCreatedShapeModules = trackSectionCreatedShapeModules;
	trackGenerator_<>c__DisplayClass41_0_.<>4__this = this;
	trackGenerator_<>c__DisplayClass41_0_.sectionName = sectionName;
	trackGenerator_<>c__DisplayClass41_0_.parentTransform = parentTransform;
	trackGenerator_<>c__DisplayClass41_0_.crossSection = crossSection;
	trackGenerator_<>c__DisplayClass41_0_.isLeftSide = isLeftSide;
	System.Diagnostics.Contracts.__ContractsRuntime.Requires(rangeMinCurve != null == (rangeMaxCurve != null), null, "(rangeMinCurve != null) == (rangeMaxCurve != null)");
	<>c__DisplayClass41_0 <>c__DisplayClass41_ = default(<>c__DisplayClass41_0);
	Debug.LogWarning((object)<>c__DisplayClass41_.crossSection);
	BuildShapeExtrusion buildShapeExtrusion = curvyGenerator.AddModule<BuildShapeExtrusion>();
	buildShapeExtrusion.Resolution = 19;
	buildShapeExtrusion.CrossResolution = 30;
	buildShapeExtrusion.Optimize = false;
	buildShapeExtrusion.CrossOptimize = false;
	buildShapeExtrusion.CrossReverseNormals = false;
	buildShapeExtrusion.Initialize();
	buildShapeExtrusion.set_name("Extrusion_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
	buildShapeExtrusion.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
	bool flag = rangeMinCurve != null && rangeMaxCurve != null;
	ModifierShapeVariableRange modifierShapeVariableRange;
	if (flag)
	{
		modifierShapeVariableRange = curvyGenerator.AddModule<ModifierShapeVariableRange>();
		modifierShapeVariableRange.Initialize();
		modifierShapeVariableRange.set_name("VariableRange_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
		modifierShapeVariableRange.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
		modifierShapeVariableRange.MinCurve = rangeMinCurve;
		modifierShapeVariableRange.MaxCurve = rangeMaxCurve;
		modifierShapeVariableRange.OutShape.LinkTo(buildShapeExtrusion.InCross);
	}
	else
	{
		modifierShapeVariableRange = null;
	}
	CGModuleInputSlot cGModuleInputSlot = flag ? modifierShapeVariableRange.InShape : buildShapeExtrusion.InCross;
	MorphShapes morphShapes;
	if (hasMorphing)
	{
		morphShapes = curvyGenerator.AddModule<MorphShapes>();
		morphShapes.Initialize();
		morphShapes.set_name("Morph_" + <>c__DisplayClass41_.sectionName + "_" + <>c__DisplayClass41_.crossSection.StartShape.get_name() + "/" + <>c__DisplayClass41_.crossSection.EndShape.get_name());
		morphShapes.get_transform().set_parent(<>c__DisplayClass41_.parentTransform);
		morphShapes.MorphingCurve = AnimationCurveExtension.LinearAnimationCurve;
		morphShapes.OutShape.LinkTo(cGModuleInputSlot);
	}
	else
	{
		morphShapes = null;
	}
	<HandleCrossSection>g__CreateInputShapeModules|41_0(<>c__DisplayClass41_.crossSection.StartShape, ref startOriginTranslation, ref startOriginRotation, hasMorphing ? morphShapes.InShapeA : cGModuleInputSlot, ref <>c__DisplayClass41_);
	if (hasMorphing)
	{
		<HandleCrossSection>g__CreateInputShapeModules|41_0(<>c__DisplayClass41_.crossSection.EndShape, ref endOriginTranslation, ref endOriginRotation, morphShapes.InShapeB, ref <>c__DisplayClass41_);
	}
	inputSplinePath.Path.LinkTo(buildShapeExtrusion.InPath);
	(Material, bool, string) key = (<>c__DisplayClass41_.crossSection.Material, <>c__DisplayClass41_.crossSection.IsMagnetized, <>c__DisplayClass41_.sectionName);
	if (!buildShapeExtrusions.ContainsKey(key))
	{
		buildShapeExtrusions[key] = new List<BuildShapeExtrusion>();
	}
	buildShapeExtrusions[key].Add(buildShapeExtrusion);
}

```

Note that <>c__DisplayClass41_ had its fields not filled correctly in the second version

Fixed minor misspelling.
How to reproduce:

1. Clone https://github.com/FubarDevelopment/QuickGraph
2. Build
3. Run the `Boost` test

Used version: 1.10.20606.1 (rc2) via [CodeContracts.MSBuild](https://github.com/Igorbek/CodeContracts.MSBuild) version 1.12.0

This are the properties:

```xml
  <PropertyGroup Condition=" '$(TargetFramework)' == 'net461' and '$(Configuration)' == 'Debug' ">
    <CodeContractsEnableRuntimeChecking>True</CodeContractsEnableRuntimeChecking>
    <CodeContractsRuntimeOnlyPublicSurface>False</CodeContractsRuntimeOnlyPublicSurface>
    <CodeContractsRuntimeThrowOnFailure>True</CodeContractsRuntimeThrowOnFailure>
    <CodeContractsRuntimeCallSiteRequires>False</CodeContractsRuntimeCallSiteRequires>
    <CodeContractsRuntimeSkipQuantifiers>False</CodeContractsRuntimeSkipQuantifiers>
    <CodeContractsRunCodeAnalysis>False</CodeContractsRunCodeAnalysis>
    <CodeContractsNonNullObligations>True</CodeContractsNonNullObligations>
    <CodeContractsBoundsObligations>True</CodeContractsBoundsObligations>
    <CodeContractsArithmeticObligations>False</CodeContractsArithmeticObligations>
    <CodeContractsEnumObligations>False</CodeContractsEnumObligations>
    <CodeContractsPointerObligations>False</CodeContractsPointerObligations>
    <CodeContractsRedundantAssumptions>False</CodeContractsRedundantAssumptions>
    <CodeContractsInferRequires>False</CodeContractsInferRequires>
    <CodeContractsInferEnsures>False</CodeContractsInferEnsures>
    <CodeContractsSuggestRequires>True</CodeContractsSuggestRequires>
    <CodeContractsSuggestEnsures>False</CodeContractsSuggestEnsures>
    <CodeContractsDisjunctiveRequires>False</CodeContractsDisjunctiveRequires>
    <CodeContractsRunInBackground>True</CodeContractsRunInBackground>
    <CodeContractsShowSquigglies>False</CodeContractsShowSquigglies>
    <CodeContractsUseBaseLine>False</CodeContractsUseBaseLine>
    <CodeContractsEmitXMLDocs>False</CodeContractsEmitXMLDocs>
    <CodeContractsCustomRewriterAssembly />
    <CodeContractsCustomRewriterClass />
    <CodeContractsLibPaths />
    <CodeContractsExtraRewriteOptions />
    <CodeContractsExtraAnalysisOptions />
    <CodeContractsBaseLineFile />
    <CodeContractsCacheAnalysisResults>True</CodeContractsCacheAnalysisResults>
    <CodeContractsRuntimeCheckingLevel>Full</CodeContractsRuntimeCheckingLevel>
    <CodeContractsReferenceAssembly>Build</CodeContractsReferenceAssembly>
    <CodeContractsAnalysisWarningLevel>0</CodeContractsAnalysisWarningLevel>
  </PropertyGroup>
```

When in project used package Unity version="5.0.2" and CodeContracts.MSBuild version="1.12.0" then build error with output:

2>  Reading assembly 'Unity.Abstractions' from 'C:\Work.NET\GitHub\NewPlatform.Flexberry.ORM.ODataService\packages\Unity.5.0.2\lib\net45\Unity.Abstractions.dll' resulted in errors.
2>  	Выдано исключение типа "System.OutOfMemoryException".
2>ccrewrite : error : Rewrite aborted due to metadata errors. Check output window
2>  elapsed time: 1341,929ms

For the reference version 1.12.0 CodeContracts.MSBuild is using CodeContracts binaries version 1.10.20606.1-rc2 (released on 6 Jun 2016), the latest version by now.

[Initial issue](https://github.com/Igorbek/CodeContracts.MSBuild/issues/17)
See #202 and #482.

VS2017 doesn't install `NETFX 4.6 Tools` inside `%ProgramFiles(x86)\Microsoft SDKs\Windows\v10.0A\bin`, but it does install:

- `NETFX 4.6.1 Tools`
- `NETFX 4.6.2 Tools`
- `NETFX 4.7 Tools`
- `NETFX 4.7.1 Tools`

We could assume we should use 4.6.1 instead, or we could try and resolve this path based on the project's `$(TargetFramework)`, then fall back to an assumption.

I'm still not quite sure how VS resolves the path internally.
This PR adds build status badge to Readme page.
The issue is similar to #191. However, it reproduces with the latest sources. The difference is that an argument is also used in an expression for a local variable, and then both used in a lambda. Here is a test class:
```c#

    class A
    {
        public A(object o)
        {
            Contract.Requires(o != null);

            var local = o;
            Action a = () => ReferenceEquals(local, o);
        }
    }
```
Is there any document for Code Contracts' implementation like _Book of runtime_ for CoreCLR? With documents, more people are able to evolved in the project and make it better.