# Description

- I prepared an update to the next version of kotlinx-coroutines.
- I have chosen [kotlinx-coroutines 1.2.2](https://github.com/Kotlin/kotlinx.coroutines/blob/master/CHANGES.md#version-122) and the [kotlin 1.3.41](https://github.com/JetBrains/kotlin/releases/tag/v1.3.41) since kotlinx-coroutines 1.2.2 has a transitive dependency to kotlin 1.3.40.
- I also documented the changes in the dependency tree in the commit messages (see below).

# Releasing

- I suggest releasing this update as `ru.gildor.coroutines:kotlin-coroutines-retrofit:2.0.0` to allow users to update gradually.
- The next version - [kotlinx-coroutines 1.3.2](https://github.com/Kotlin/kotlinx.coroutines/blob/master/CHANGES.md#version-132) - should be released as `ru.gildor.coroutines:kotlin-coroutines-retrofit:3.0.0` later on.

# Commits in order

- Use kotlinx-coroutines-core v.1.2.2.
  - Changelog: https://github.com/Kotlin/kotlinx.coroutines/blob/master/CHANGES.md#version-122
  - Updates in the dependency tree:
    ``` java
    org.jetbrains.kotlin:kotlin-stdlib:1.3.21 -> 1.3.40
    org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2
    -> org.jetbrains.kotlin:kotlin-stdlib:1.3.40
    ```

- Use kotlin 1.3.41.
  - Changelog: https://github.com/JetBrains/kotlin/releases/tag/v1.3.41
  - Updates in the dependency tree:
    ``` java
    org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2
    -> org.jetbrains.kotlin:kotlin-stdlib:1.3.40 -> 1.3.41
    ```
hey gildor,
smart work :)
Do you plan to support "Async stack recording" to see the origin caller in case of an exception within retrofit?
Similar as you did in https://github.com/gildor/kotlin-coroutines-okhttp
Hi,
I am trying to use this library .Here is my code :-
```
@GET(ApiEndPoint.API_MODELS)
Call<ModelResponse> getCarModelsAsync2(@Query("itemsPerPage") String itemsPerPage);
```

```
fun getModelData() = runBlocking {
        try {
            // Wait (suspend) for response
            val result: Result<ModelResponse> = dataManager.getCarModelsAsync2("100").awaitResult()
            // Check result type
            when (result) {
                //Successful HTTP result
                is Result.Ok -> {

                }
                // Any HTTP error
                is Result.Error -> {
//                    log("HTTP error with code ${result.error.code()}", result.error)
                }
                // Exception while request invocation
                is Result.Exception -> {
//                    log("Something broken", e)
                }
            }
//            if (response) {
//                // Now we can work with response object
//                println("User ${response.body().toString()} loaded")
//            }
        } catch (e: Throwable) {
            // All other exceptions (non-http)
            e.printStackTrace()
        }
    }
```

```
public suspend fun <T : Any> Call<T>.awaitResult(): Result<T> {
    return suspendCancellableCoroutine { continuation ->
        enqueue(object : Callback<T> {
            override fun onResponse(call: Call<T>?, response: Response<T>) {
                continuation.resumeWith(runCatching {
                    if (response.isSuccessful) {
                        val body = response.body()
                        if (body == null) {
                            Result.Exception(NullPointerException("Response body is null"))
                        } else {
                            Result.Ok(body, response.raw())
                        }
                    } else {
                        Result.Error(HttpException(response), response.raw())
                    }
                })
            }

            override fun onFailure(call: Call<T>, t: Throwable) {
                // Don't bother with resuming the continuation if it is already cancelled.
                if (continuation.isCancelled) return
                continuation.resume(Result.Exception(t))
            }
        })

        registerOnCompletion(continuation)
    }
}
```


I can see the response in log but nowhere callback is coming. I have attached debug everywhere