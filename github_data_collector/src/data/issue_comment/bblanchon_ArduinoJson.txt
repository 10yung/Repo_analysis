Hi,

I am using ArduinoJson to parse large JSON files on Arduino platform. In order to decrease the RAM usage, I  parse the input using the stream.find / stream.findUntil approach. It works perfectly for simple JSON objects stored in an JSON array.  Instead of deserializing whole array I loop through the array with stream.findUntil and deserialize individual objects separately. It is great.

The problem:

I have now a JSON where the top level array consists of JSON objects that consist of other objects and arrays. I would like to deserialize these nested objects using the same memory saving technique, ie. find / findUntil and limit the NESTING_LIMIT to 1. But I am of course running into problem with file position pointer, as well as it seems that the NESTING_LIMIT stops parsing when it encounters first occurrence of a nested object. ie. not skipping it, but not parsing from them point further.

This is short version of the JSON. Especially the "rules" arrays can be huge and I would like to parse its items individually. It would be ideal, however, if I could parse each level of nesting individually. Any suggestions how to approach it?

```JSON
{
   "devices":[
      {
         "id":1,
         "name":"Yamaha DX7",
         "instrument":"dx7",
         "port":1,
         "channel":1,
         "patch":[
            {
               "request":[
                  "43",
                  "20",
                  "00"
               ],
               "responses":[
                  {
                     "header":[
                        "43",
                        "00",
                        "00",
                        "01",
                        "1B"
                     ],
                     "rules":[
                        {
                           "id":136,
                           "pPos":0,
                           "byte":136,
                           "bPos":0,
                           "size":1
                        },
                        {
                           "id":144,
                           "pPos":0,
                           "byte":144,
                           "bPos":0,
                           "size":6
                        }
                     ]
                  },
                  {
                     "header":[
                        "43",
                        "00",
                        "00",
                        "01",
                        "1C"
                     ],
                     "rules":[
                        {
                           "id":146,
                           "pPos":0,
                           "byte":136,
                           "bPos":0,
                           "size":1
                        },
                        {
                           "id":154,
                           "pPos":0,
                           "byte":144,
                           "bPos":0,
                           "size":6
                        }
                     ]
                  }

               ]
            },
            {
               "request":[
                  "43",
                  "20",
                  "01"
               ],
               "responses":[
                  {
                     "header":[
                        "43",
                        "00",
                        "01",
                        "00",
                        "5E"
                     ],
                     "rules":[
                        {
                           "id":161,
                           "pPos":0,
                           "byte":2,
                           "bPos":0,
                           "size":7
                        }
                     ]
                  }
               ]
            }
         ]
      },
      {
         "id":2,
         "name":"Generic MIDI",
         "instrument":"cc",
         "port":2,
         "channel":1
      }
   ]
}
```

<!--
Before opening an issue, please read the FAQ:
https://arduinojson.org/faq/

Please provide all the relevant information:
* good title
* short description of the problem
* target platform
* compiler model and version
* MVCE (https://stackoverflow.com/help/mcve)
* compiler output

Good questions get fast answers!
-->
<!--
Before opening an issue, please read the FAQ:
https://arduinojson.org/faq/

Please provide all the relevant information:
* good title
* short description of the problem
* target platform
* compiler model and version
* MVCE (https://stackoverflow.com/help/mcve)
* compiler output

Good questions get fast answers!
-->

Hi,
I am using ArduinoJson to communicate on arduino and esp8266.
Arduino is sending data to esp using `serializeJson(saveDataDoc, EspSerial);`
Esp is using `deserializeJson(doc, Serial);` to get data.
I want to debug/look json data which creates **`DeserializationError`** when esp try to deserialize data came from Arduino Serial. So i can understand whats wrong in data.

<!--
Before opening an issue, please read the FAQ:
https://arduinojson.org/faq/

Please provide all the relevant information:
* good title
* short description of the problem
* target platform
* compiler model and version
* MVCE (https://stackoverflow.com/help/mcve)
* compiler output

Good questions get fast answers!
-->

i use an esp32-cam for my project, and i want to parse a big json file from the client response.
So, in order to calculate a possible capacity i took a big json response and duplicate it in arduinoJson assistance. 
It gave me: const size_t capacity = JSON_ARRAY_SIZE(382) + 382 * JSON_OBJECT_SIZE(8) + 64440;

When i use it (even with much smaller json) i get "no memory" error.

When i change to the "real" capacity of my current json response to:
const size_t capacity = JSON_ARRAY_SIZE(30) + 30*JSON_OBJECT_SIZE(8) + 4880;

it works fine..

So my questions are:
1) why i get this error even i give so much space? is there any limit for capacity in esp32 
2) i guess deserializeJson(doc, client) is much more efficient in speed and memory compared to get the payload String and do deserializeJson(doc, payload)..am i correct?

I ran into a problem where my Arduino has several JSON documents created, even after clearing the object the memory is still full

can you show me how to destroy a JSON document after creating it. "I don't want to clear it I want to destroy it"
I use ArduinoJson V6 with the current ESP8266 Core 2.6.2
The same problems also occurs with an ESP32.

I'm facing a strange issue with the function below I call during void setup();
Http-Connection is established and the parsing also works fine.
Calling the next function in setup, the ESP crashes and reboots with "Exception 9 (LoadStoreAlignmentCause)".

My function:
```
void getNews() {
  WiFiClient client;
  HTTPClient http;

   for (uint8_t w=0; w<newssources; w++){                    //loop for number of news sources
  
    String url;
    uint8_t newsmultiplier = numofarticles * w;
  
   if (w==0){
    url = "http://newsapi.org/v2/top-headlines?sources=spiegel-online&pageSize=3&page=1&apiKey=" + na_APIKEY;
  }
  if (w==1){
    url = "http://newsapi.org/v2/everything?domains=derstandard.at&pageSize=3&page=1&apiKey=" + na_APIKEY;
  }
  if (w==2){
    url = "http://newsapi.org/v2/everything?domains=tirol.orf.at&pageSize=3&page=1&apiKey=" + na_APIKEY;
  }

  if(http.begin(client,url)){    

   int httpCode = http.sendRequest("GET");

 
  if(httpCode == 200) {

   DynamicJsonDocument doc(5000);

    DeserializationError error = deserializeJson(doc, http.getStream());
    if (error) {
      Serial.println("deserializeJson() failed: ");
      Serial.println(error.c_str());
      return;
      }
  
   else { 
    JsonArray articles = doc["articles"];

    JsonObject articles_0 = articles[0];
    const char* name0 = articles_0["source"]["name"]; 
    const char* title0 = articles_0["title"]; 
    const char* url0 = articles_0["url"]; 

    JsonObject articles_1 = articles[1];
    const char* name1 = articles_1["source"]["name"];
    const char* title1 = articles_1["title"]; 
    const char* url1 = articles_1["url"]; 

    JsonObject articles_2 = articles[2];
    const char* name2 = articles_2["source"]["name"]; 
    const char* title2 = articles_2["title"]; 
    const char* url2 = articles_2["url"]; 
    
    

    snprintf(table[newsmultiplier].newscur, sizeof(table[newsmultiplier].newscur), "%s %s: %s", msgNews, name0, title0);
    snprintf(table[newsmultiplier].newslink, sizeof(table[newsmultiplier].newslink), "%s", url0);

    snprintf(table[newsmultiplier+1].newscur, sizeof(table[newsmultiplier+1].newscur), "%s %s: %s", msgNews, name1, title1);
    snprintf(table[newsmultiplier+1].newslink, sizeof(table[newsmultiplier+1].newslink), "%s", url1);

    snprintf(table[newsmultiplier+2].newscur, sizeof(table[newsmultiplier+2].newscur), "%s %s: %s", msgNews, name2, title2);
    snprintf(table[newsmultiplier+2].newslink, sizeof(table[newsmultiplier+2].newslink), "%s", url2);

    }
  }
  else {
   Serial.printf("http error: ", http.errorToString(httpCode).c_str());
   }


  Serial.println(table[newsmultiplier].newscur);
  Serial.println(table[newsmultiplier+1].newscur);
  Serial.println(table[newsmultiplier+2].newscur);
  Serial.println(table[newsmultiplier].newslink);
  Serial.println(table[newsmultiplier+1].newslink);
  Serial.println(table[newsmultiplier+2].newslink);

   }
   else {
    Serial.println("Unable to connect to news API"); 
   }
   http.end();
   }
   }
```

I used Json Assistant which calculated a doc size of about 2800.
I tried doc size with 3000, 4000, 5000 an higher, but that didn't change anything - ESP keeps crashing though parsing and printing into the arrays had worked!

I have no idea what happens - any ideas would be appreciated. Thank you!
I have read through the API docs but didn't find such a basic functionality so I have to implement my own. A `containsElement` method would help:

```
jsonArray.containsElement<String>("third") // == 2 . find out at index 2
jsonArray.containsElement<String>("none") // == -1 . didn't find out
```
Hi,

I have to parse a big String obj coming from PubSubClient callback. Every thing is running on a Arduino MKR zero (SAMD21).
I passed it to the parseObject method but I can't get it to parse. 
The string is a JSON object and I verified it was read right by printing it on Serial.
The same string defined in the code is parsed without any problem. Even when read from SD is okay.
Here the string
[CONFIG.TXT](https://github.com/bblanchon/ArduinoJson/files/3865359/CONFIG.TXT)
Here the callback method
```
void mqttCallback(char* topic, byte* payload, unsigned int len) {
#ifdef DEBUG
  SerialUSB.print("Message arrived [");
  SerialUSB.print(topic);
  SerialUSB.print("]: ");
  SerialUSB.write(payload, len);
  SerialUSB.println();
#endif
  String strPayload = String((char*)payload);
  if (String(topic) == mqttOtaTopic) {
    readJSONConfigFromString(strPayload);
    saveJSONConfig();
    readConfig();
  } else if (String(topic) == mqttCtrlTopic) {
    readJSONCommand(strPayload);
  }
}
```

Here the parsing method (a bit modified from your assistant)
```
void readJSONConfigFromString(String json) {
  DynamicJsonBuffer jsonBuf(8192);
  JsonObject& root = jsonBuf.parseObject(json);
  JsonObject& global = root["global"];
  deviceName = global["name"].as<String>(); // "KAON"
  pollTime = global["poll"]; // 1
  snoozeTime = global["snooze"]; // 300
  updTime = global["upd"]; // 2
  alarmOn = global["alarm"]["on"]; // 8
  alarmOff = global["alarm"]["off"]; // 18
  adcBit = global["adc"]; // 16

  JsonArray& digital = root["digital"];
  for (int i = 0; i < 6; i++) {
    JsonObject& obj = digital[i];
    Dnames[i] = obj["name"].as<String>(); // "channel1"
    obj["type"].as<String>() == "INPUT" ? Dtype[i] = INPUT : Dtype[i] = OUTPUT; // "INPUT"
    Dalarm[i] = obj["alarm"]; // false
    Dthres[i] = obj["thres"]; // 0
    Dpriority[i] = obj["priority"]; // 0
    Ddelay[i] = obj["delay"]; // 0
  }
  JsonObject& ch7 = root["counters"]["CH7"];
  Cnames[0] = ch7["name"].as<String>(); // "channel1"
  Cunits[0] = ch7["unit"].as<String>(); // "m"
  Cmult[0] = ch7["mult"]; //1.0
  vals[6] = ch7["off"]; //1.0
  Calarm[0] = ch7["alarm"]; // false
  Cthres[0] = ch7["thres"]; // 0
  Cpriority[0] = ch7["priority"]; // 0
  Chour[0] = ch7["time"]; // 0

  JsonObject& ch8 = root["counters"]["CH8"];
  Cnames[1] = ch8["name"].as<String>(); // "channel1"
  Cunits[1] = ch8["unit"].as<String>(); // "m"
  Cmult[1] = ch8["mult"]; //1.0
  vals[7] = ch8["off"]; //1.0
  Calarm[1] = ch8["alarm"]; // false
  Cthres[1] = ch8["thres"]; // 0
  Cpriority[1] = ch8["priority"]; // 0
  Chour[1] = ch8["time"]; // 0

  JsonArray& analogIn = root["analogInput"];
  for (int i = 0; i < 4; i++) {
    JsonObject& obj = analogIn[i];
    Anames[i] = obj["name"].as<String>(); // "ai1"
    Aunits[i]  = obj["unit"].as<String>(); // "m3"
    Amult[i] = obj["mult"]; // 1
    Aoffset[i] = obj["off"]; // 0
    obj["type"].as<String>() == "4-20 mA" ? Atype[i] = mA_p : Atype[i] = V10_p; // "mA"
    Aalarm[i]  = obj["alarm"]; // false
    Alow[i] = obj["low"]; // 0
    Ahigh[i] = obj["high"]; // 0
    Apriority[i] = obj["priority"]; // 0
    Adelay[i] = obj["delay"]; // 0
  }
  JsonObject& aOut = root["analogOutput"];
  JsonObject& obj = aOut["AO1"];
  AOnames[0] = obj["name"].as<String>(); // "ai1"
  obj["type"].as<String>() == "4-20 mA" ? AOtype[0] = mA_p : AOtype[0] = V10_p; // "m3"
  JsonObject& obj2 = aOut["AO2"];
  AOnames[1] = obj2["name"].as<String>(); // "ai1"
  obj2["type"].as<String>() == "4-20 mA" ? AOtype[1] = mA_p : AOtype[1] = V10_p; // "m3"

  JsonObject& comp1 = root["logic"]["comp1"];
  comp1_a = charToChannel(comp1["a"]); // "CH1"
  comp1_b = charToChannel(comp1["b"]); // "CH2"
  comp1_fun = comp1["fun"].as<String>().charAt(0); // "="
  comp1_out = charToChannel(comp1["out"]); // "CH7"

  JsonObject& comp2 = root["logic"]["comp2"];
  comp2_a = charToChannel(comp2["a"]); // "AI1"
  comp2_b = charToChannel(comp2["b"]); // "AI2"
  comp2_fun = comp2["fun"].as<String>().charAt(0); // "<"
  comp2_out = charToChannel(comp2["out"]); // "CH8"

  JsonObject& pid = root["pid"];
  pidInput = charToChannel(pid["in"]); // "AI1"
  pidSet = pid["set"]; // 11
  pidMin = pid["min"]; // 0
  pidMax = pid["max"]; // 100
  pidP = pid["p"]; // 0.1
  pidI = pid["i"]; // 0
  pidD = pid["d"]; // 0.001
  pid["out"] == "AO1" ? pidOutput = 0 : pidOutput = 1; // "AO1"

  JsonObject& sms = root["sms"];
  smsAlive = sms["alive"]; // false
  smsTele = sms["tele"]; // false
  smsAlarm = sms["alarm"]; // true
  JsonArray& sms_target = sms["target"];
  nSms = sms_target.size();
  for (int i = 0; i < nSms; i++) smsTargets[i] = sms_target[i].as<String>();
  JsonObject& network = root["network"];
  JsonObject& network_apn = network["apn"];
  apnName = network_apn["name"].as<String>(); // "TM"
  apnUser = network_apn["user"].as<String>();
  apnPwd = network_apn["pw"].as<String>();

  JsonObject& network_mqtt = network["mqtt"];
  mqttUser = network_mqtt["user"].as<String>();
  mqttPwd = network_mqtt["pw"].as<String>();
  #ifdef DEBUG
    network_mqtt.printTo(SerialUSB);
    #endif
  mqttBroker = network_mqtt["broker"].as<String>(); // "mqtt.eclipse.org"
  mqttPort = network_mqtt["port"]; // 1883
  mqttId = network_mqtt["id"].as<String>(); // "dev1234"
  mqttAlive = network_mqtt["alive"]; // false
  mqttTele = network_mqtt["tele"]; // false
  mqttAlarm = network_mqtt["alarm"]; // true
  mqttCtrl = network_mqtt["control"]; // false
  mqttOta = network_mqtt["ota"]; // true

  JsonObject& network_rest = network["rest"];
  restUrl = network_rest["url"].as<String>();
  restPort = network_rest["port"]; // 8
  restId = network_rest["id"].as<String>(); // "dev1234"
  restAlive = network_rest["alive"]; // false
  restTele = network_rest["tele"]; // false
  restAlarm = network_rest["alarm"]; // true
  restCtrl = network_rest["control"]; // false
  restOta = network_rest["ota"]; // true
  jsonBuf.clear();
}

I'm storing configuration in SPIFFS and so I have to size the `DynamicJsonDocument` large enough that it won't unexpectedly fail to read/write the whole configuration file.

The problem I have is that this allocation is then always quite large and made in one request from the heap, which significantly fragments the heap. I'd like it to make additional allocations as required from the heap up to a specified limit instead. I don't need it to free the memory until the document is destroyed.

I know you've discounted this on the basis that it causes more heap fragmentation but I disagree. The fragmentation of the heap is affected by the size of allocations being made. By always making one big allocation (5% of total memory) there's a significant risk that once freed the space occupied by that allocation will be reused by smaller allocations and a contiguous block of that size will no longer be available from the heap.

<!--
Before opening an issue, please read the FAQ:
https://arduinojson.org/faq/

Please provide all the relevant information:
* good title
* short description of the problem
* target platform
* compiler model and version
* MVCE (https://stackoverflow.com/help/mcve)
* compiler output

Good questions get fast answers!
-->

Currently, [it is not possible to rename an object key efficiently](https://github.com/bblanchon/ArduinoJson/issues/977#issuecomment-489309197). However, renaming an object key can be handy at times. 

For example, I am currently implementing a [Json-RPC library](https://gitlab.com/tue-umphy/co2mofetten/arduino-libraries/ArduinoJsonRPC). The library also provides a server class which processes Json-RPC requests (a `JsonVariant`) and calls appropriate callback methods which in turn fill a Json-RPC response (also a `JsonVariant`). Depending on the success of the callback, either the `"result"` member or the `"error"` member must be filled according to [the specification](https://www.jsonrpc.org/specification). If renaming object keys would be possible with ArduinoJson, the callbacks could just care about filling a `JsonVariant` with a result or an error object and the server would take care of choosing the right key name depending on the callback's success. Currently, the callbacks need to be aware of the Json-RPC specification which I consider a rather clumsy style.

This is just my use case of renaming object keys but I am sure other people would also benefit from this feature.

BTW Thank you so much for this awesome library! :-)

Yann
I would like to deserialize a JsonObject partly to save memory by not deserializing properties of unknown size. 

Example:

I have a string containing a serialized partly known object:

```
{
    "UnknownProperty": "valueWithUnknownSize",
    "KnownProperty": "valueWithKnownSize"
}
```

Is it possible to only deserialize a known specific property from a serialized object?

E.g.:

```
StaticJsonDocument<64> doc;
deserializeJsonSpecificProperty(doc, example, "KnownProperty");
```

This would be helpful for a library that only knows (the required size for deserializing) part of the object.  Thanks!