Hello,
I have  scenario where i have to implement sectionList with large data. So for that i have used nestedRecyclerView. But inside child RecyclerView i am not able to trigger onScroll callback in android i am able to trigger onScroll callback in IOS.

Parent List:
<RecyclerListView 
     ref = { (RecyclerListView) => this.parentRLVRef = RecyclerListView} 
     initialRenderIndex = {0} 
     style={{ flex: 1 }} 
     showsVerticalScrollIndicator={true} 
     rowHasChanged={ true } 
     contextProvider={this._parentContextProvider} 
     layoutProvider={_parentRLVLayoutProvider} 
     extendedState={this.state.extendedState} 
     dataProvider={this.state.parentRLVDataProvider} 
     rowRenderer={this._parentRowRenderer} 
     nestedScrollEnabled={ true } />;

_parentRowRenderer

    _parentRowRenderer = (type, data, index) => {  
        console.log("_parentRowRenderer")
        // console.log(data.data)
        return (
          <View style={{ flex: 1  , backgroundColor:"Gray"}}>
          <TouchableOpacity style={{ backgroundColor: "#B82240" }} onPress={
              () => {
                  console.log("TouchableOpacity")
                  if(collapseIndexes.includes(index)){
                      collapseIndexes.splice( collapseIndexes.indexOf(this.props.index), 1 );
                  } else{
                      collapseIndexes.push(index);    
                  }
                  let expandStatus = !(this.state.extendedState.extState);
                  let expandStatusState = Object.assign({}, this.state.extendedState, { extState: expandStatus });
                  this.setState({expandStatusState})
            }}>
            <Text style = {{fontFamily: "HelveticaNeue-Bold", fontSize: size(18), paddingHorizontal: size(17.5), color: "white", paddingVertical: size(5)}}>
                {data.title}
            </Text>
          </TouchableOpacity>

            <TaskCellUpdated 
                changeHeightOfRowProp = { this.changeHeightOfRow } 
                indexProp = { index } 
                item = {data.data} 
                setNoOfLine = { parseInt(global.setNoOfLine) } />
          </View>
        );

TaskCellUpdated is a component which contains child recyclerView.

render() {
    console.log("RowRenderer render() TaskCellUpdated")
    console.log(this.props)
    let renderElement = (this.state.loading == true) ? <LoaderChild /> : null;
    return (
      <View style={{flex: 1,
        flexDirection: 'column'}}>
      	<RecyclerListView
               style = {{ flex: 1, backgroundColor:"Red" }}
               scrollEnabled = { true }
               nestedScrollEnabled={ true }
               onScroll={ this.onEndReachedCallBack }
               refreshControl={
                    

> <RefreshControl 

                           refreshing={false} 
                          onRefresh={this.onRefresh}/> 

> 

  
               }
              dataProvider = {this._childDataProvider}
              contextProvider = {this._childContextProvider}
  	      layoutProvider = {this._childRLVLayoutProvider}
              rowRenderer = {this._childRowRenderer}
        /> 
        {renderElement}
      </View>
    );
  }
First of all thank you for developing such a good and amazing project.  üôè

**Issue ** 
When I drag the screen to the bottom to update the data, the screen moves about 100 pixels up and the screen flickers.  I am using rn0.6 version(functional component)

Like this  : [](https://stackoverflow.com/questions/59573435/recyclerlistview-scrolls-to-top-onendreached-with-functional-component)

![avatar](https://i.stack.imgur.com/BoiwX.gif)


The current behavior of recyclerlistview is to render an empty scrollview and then wait for its on layout event to get its actual size before rendering all the children inside it. If an estimated scroll view size is passed, then the children can also be rendered in the first pass based on those estimates removing an initial blank render. When the onlayout event comes with the actual size, the scroll component and all its children will readjust accordingly 
I am hopeful that this is not a bug but wanted to cross-post here just in case. Please see SO below.

https://stackoverflow.com/questions/59573435/recyclerlistview-scrolls-to-top-onendreached-with-functional-component
I see many references to this, but no examples.  In my use case, the dimensions for each item will be in the data and will vary.  How can I access the data from within the layoutprovider?
I am facing an issue in the recycler list view. The scenario is i am using nested recycler list as i need a section based on the grouping of data. In my scenario i can change the data provided to the list by selecting the different sort strategy of my data. Basically i have three sorting scenario like:
1. based on id
2. based on alphabet
3. based on date of joining.

grouping based on id is by default selected and it only groups 5-6 rows inside the inner recycler list. But sorting based on alphabet has 50-60 rows in them. But when we change the sorting strategy from id to alphabet only 6 rows of inner list is shown for each header. 6 rows because it's loaded initially so how can i make sure that this situation can be handled.

NOTE: re render only showing the number of items previously scrolled
If you change the data it throws an exeption 
See in this snack https://snack.expo.io/SJY6NU00B
Instructions to reproduce:

1. Scroll to the bottom
2. Type letter 'A' in the TextInput

**Result** :

`No layout available for index: 233
LayoutUnavailableException: No layout available for index: 233
    at new e (module://recyclerlistview.js:3:1527)
    at e.getOffsetForIndex (module://recyclerlistview.js:3:5917)
    at t.refreshWithAnchor (module://recyclerlistview.js:3:26794)
    at e._checkAndChangeLayouts (module://recyclerlistview.js:3:16117)
    at e.componentWillReceiveProps (module://recyclerlistview.js:3:11983)
    at Hi ([snack internals]
    at ha ([snack internals]
    at Js ([snack internals]
    at js ([snack internals]
    at Ps (https://s3.us-west-1.amazonaws.com/snack-web-player/36/static/js/2.d51b9d02.chunk.js:1:1086639)`



I import the `DefaultJSItemAnimator` and pass it as the itemAnimator prop as following.
```javascript
import { DefaultJSItemAnimator } from 'recyclerlistview/dist/reactnative/platform/reactnative/itemanimators/defaultjsanimator/DefaultJSItemAnimator'
...
this._itemAnimator = new DefaultJSItemAnimator()
...
<RecyclerListView
          itemAnimator={this._itemAnimator}
...
```

But I got the following warning while running the code.
```
Warning: Failed prop type: Invalid prop `itemAnimator` of type `DefaultJSItemAnimator` supplied to `RecyclerListView`, expected instance of `BaseItemAnimator`.
```

Versions
- recyclerlistview@2.0.12
- react-native@0.60.5
Hello !

I have a big list of items that I render using RecyclerListView (around 2000+ items). The thing is when I filter the data and I would get to 10 items, the app crashes on android and I have no idea why. On iOS, it works fine. On android emulator it works fine as well. 

The problem is when I create an unrelased APK and I test the app on real device, I don't see any error message so I have no idea how to fix this problem.

Any idea? 
Changed the expo link for extendedState demo