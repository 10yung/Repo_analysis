hello @LeaVerou thanks for your great plugin ❤️ 
as u see in `ul list` mark tag makes the Persian or Arabic text show separately

![Screenshot (16)](https://user-images.githubusercontent.com/17789047/70546270-36f6d300-1b84-11ea-9165-b47e4a285714.png)

``` html
<mark>He</mark>
"llo"
```
"Hello"

``` html 
<mark>مش</mark>
"هد"
```

"مش هد" :x: 
"مشهد" :heavy_check_mark:

I was working with this for a project, and one of the things I wanted to do was use HTML entities in some of my Labels. When rendering from a list with other elements I see the rendered HTML entity as I would expect in my Label. When rendering a solo label with a HTML Entity I see the raw text.

More details. When I have no text typed, and I activate the Awesomplete it shows an unrendered Awesomplete label (raw HTML entities like you'd see in a text-editor).

### Received

<img width="212" alt="Screenshot 2019-11-29 at 02 37 23" src="https://user-images.githubusercontent.com/2605791/69839862-3d668000-1251-11ea-91ce-ec050dd39db5.png">

### Desired (not including france, just the HTML entity)

<img width="212" alt="Screenshot 2019-11-29 at 02 37 34" src="https://user-images.githubusercontent.com/2605791/69839863-3d668000-1251-11ea-8174-77c1d5bdb790.png">


### Here's a CodePen

https://codepen.io/Lewiscowles1986/pen/PooMgXE?editors=1010

### Known workaround

The workaround so-far has just been to paste the character literal in.

### Background

This is also an example of Live AJAX listing which I know some people have asked for.

I'm unsure if it's the best pattern, and sure writing my own debounce and using native DOM would be more accessible to a wider group of people. It also really spams data.
Hi! I use awesomplete to get a list of food products in a textbox that we will call 'textArticoli', when I insert a new food product, in another form called 'newArticolo', I reset the array 'arr' which I pass to 'new Awesomplete ( ) and call 'new Awesomplete (textArticoli, {list: arr});', this creates me a double list, one with the old items and one with the new item, how is it possible to reset the previous Awesomplete list associated with ' textArticoli '?

`<html>
	<head>
		<meta charset="utf-8" />
		<link rel="stylesheet" href="awesomplete.css" />
		<script src="awesomplete.js" async></script>
	</head>    
	 
	<body>
		<h2 style="color:white; text-align:center; font-family:arial;" >Registro Spesa</h2>
		<div style="text-align:center;"> 
			<div class="specchietto">
				<h4 class="titoli">Inserimento Articolo</h3>
				<form name="form" >
					<input class="input" id="textarticolo" placeholder="articolo" type="text" required/>
					<p><input class="input" id="textcosto" placeholder="costo" type="number" required step="0.01" />
					<p><input class="input" id="textquantita" placeholder="quantità"type="number" required/>
					<p><input class="input" id="textnegozio" placeholder="negozio" type="text" required/>
					<!--<p><select class="inputselect" id="textnegozio" placeholder="negozio" type="text" required/>
						<option value="" disabled selected>negozio</option>
					</select>-->
					<p><input class="input" id="textdata" placeholder="data" onfocus="(this.type='date')" onfocusout="(this.type='text')" required />
					<p><input class="pulsanti" type="button" value="Inserisci" onClick="inviaDati()">
				</form>
			</div>
			<div class="specchietto">
				<h4 class="titoli">Creazione Nuovo Articolo</h3>
				<form name="formNuovoArticolo" >
					<input class="input" id="textnewarticolo" placeholder="articolo" type="text" required/>
					<p><input class="input" id="textcategoria" placeholder="categoria" type="text" required/>
					<p><input class="pulsanti" type="button" value="Inserisci" onClick="inviaNuovoArticolo()">
				</form>
			</div>
		</div>

		<script>

		var arrArticoli = new Array();
		var arrNegozi = new Array();
		var arrCategorie = new Array();

		caricaArticoli();
		caricaNegozi();
		caricaCategorie();

		function popola(textbx, arr){
			
			var textbox = document.getElementById(textbx);
			new Awesomplete(textbox, {list:arr});

		}

		// recupera gli articoli e li mette nell array arrArticoli
		function caricaArticoli() {

			return new Promise((resolve, reject) => {

				const xhr = new XMLHttpRequest();
				xhr.open('get','http://localhost:8080/getArticoli', true);
				xhr.onload = () => resolve(xhr.responseText);
				xhr.onerror = () => reject(xhr.statusText);
				xhr.send();

			}).then(responseText => {

				var parsedRT = JSON.parse(responseText);
				var parsedRTLenght = Object.keys(parsedRT).length;
		  		
		  		arrArticoli = [];
		  		
				for(let i = 0; i < parsedRTLenght; i++) {
					arrArticoli.push(parsedRT[i].articolo);
			  	}
				
				popola("textarticolo", arrArticoli);
				
			}).catch((statusText) => {
		
				// Log the rejection reason
       			console.log('Errore: ('+statusText+')');
				alert("Errore:"+statusText);
        		
			});
		}

		// recupera i negozi e li mette nell array arrNegozi
		function caricaNegozi() {
			
			return new Promise((resolve, reject) => {

				const xhr = new XMLHttpRequest();
				xhr.open('get','http://localhost:8080/getNegozi', true);
				xhr.onload = () => resolve(xhr.responseText);
				xhr.onerror = () => reject(xhr.statusText);
				xhr.send();

			}).then(responseText => {

				var parsedRT = JSON.parse(responseText);
				var parsedRTLenght = Object.keys(parsedRT).length;

				arrNegozi = [];

	  			for(let i = 0; i < parsedRTLenght; i++) 
					arrNegozi.push(parsedRT[i].negozio);

				popola("textnegozio", arrNegozi);

			}).catch((statusText) => {
		
				// Log the rejection reason
       			console.log('Errore: ('+statusText+')');
				alert("Errore:"+statusText);
        		
			});

		}

	function caricaCategorie() {

			return new Promise((resolve, reject) => {

				const xhr = new XMLHttpRequest();
				xhr.open('get','http://localhost:8080/getCategorie', true);
				xhr.onload = () => resolve(xhr.responseText);
				xhr.onerror = () => reject(xhr.statusText);
				xhr.send();

			}).then(responseText => {

				var parsedRT = JSON.parse(responseText);
				var parsedRTLenght = Object.keys(parsedRT).length;
		  		
		  		arrCategorie = [];
		  		
				for(let i = 0; i < parsedRTLenght; i++) {
					arrCategorie.push(parsedRT[i].categoria);
			  	}
				
				popola("textcategoria", arrCategorie);
				
			}).catch((statusText) => {
		
				// Log the rejection reason
       			console.log('Errore: ('+statusText+')');
				alert("Errore:"+statusText);
        		
			});
		}

		// invia i dati al server server-express_promiseAll		
		function inviaDati(){						

			console.log("inviaDati");

			articolo = document.getElementById("textarticolo").value;
			costo = document.getElementById("textcosto").value;
			quantita = document.getElementById("textquantita").value;
			negozio = document.getElementById("textnegozio").value;
			data = document.getElementById("textdata").value;

			if( arrArticoli.includes(articolo) && arrNegozi.includes(negozio) ){

				return new Promise((resolve, reject) => {
				
					//invio al server
					const xhr = new XMLHttpRequest();
					var params="articolo="+articolo+"&costo="+costo+"&quantita="+quantita+"&negozio="+negozio+"&data="+data;
					xhr.open('get','http://localhost:8080/inserisciDati'+'?'+params, true);
					//xhr.setRequestHeader('Access-Control-Allow-Origin','*');
					//xhr.setRequestHeader('Content-type','application/json');
					//xhr.setRequestHeader('Access-Control-Allow-Methods','GET');
					xhr.onload = () => resolve(xhr.responseText);
					xhr.onerror = () => reject(xhr.statusText);
					xhr.send();

					// codici di risposta dal server
					xhr.onreadystatechange = function (){

						if(xhr.readystate == 4){

							switch(xhr.status){

								case 200:
									alert("dati inseriti correttamente");
									break;

								case 404:
									alert("la pagina non esiste");
									break;

								case 500:
									alert("si è verificato un' errore sul server");
									break;
		
								default:
									alert("switch non risolto");

							}

						}

					}

				}).then(responseText =>	{

					if(responseText=="OK"){
						alert("dati inseriti correttamente");
						//resetta le textbox
						document.getElementById("textarticolo").value = "";
						document.getElementById("textcosto").value = "";
						document.getElementById("textquantita").value = "";
					}else
						alert("errore dal Server, controllare i log del server nodejs");

				}).catch((statusText) => {
		
			        // Log the rejection reason
       				console.log('Errore: ('+statusText+')');
					alert("Errore:"+statusText);
        		
				});

			} else{
	
				if(!arrArticoli.includes(articolo))
					alert("Articolo inesistente");

				if(!arrNegozi.includes(negozio))
					alert("Negozio inesistente");
			}
		}
		
	function inviaNuovoArticolo(){						

			console.log("inviaNuovoArticolo");

			articolo = document.getElementById("textnewarticolo").value;
			categoria = document.getElementById("textcategoria").value;
			
			document.getElementById("textnewarticolo").value = "";
			document.getElementById("textcategoria").value = "";

			return new Promise((resolve, reject) => {
			
				//invio al server
				const xhr = new XMLHttpRequest();
				var params="articolo="+articolo+"&categoria="+categoria;
				xhr.open('get','http://localhost:8080/inserisciNuovoArticolo'+'?'+params, true);
				xhr.onload = () => resolve(xhr.responseText);
				xhr.onerror = () => reject(xhr.statusText);
				xhr.send();

				xhr.onreadystatechange = function (){

					if(xhr.readystate == 4){

						switch(xhr.status){

							case 200:
								alert("dati inseriti correttamente");
								break;

							case 404:
								alert("la pagina non esiste");
								break;

							case 500:
								alert("si è verificato un' errore sul server");
								break;
	
							default:
								alert("switch non risolto");

						}

					}

				}

			}).then(responseText =>	{

				if(responseText=="OK"){
					
					alert("dati inseriti correttamente");
					caricaArticoli();
				}else
					alert("errore dal Server, controllare i log del server nodejs");

			}).catch((statusText) => {
	
		        // Log the rejection reason
   				console.log('Errore: ('+statusText+')');
				alert("Errore promise:"+statusText);
    		
			});

		}

		</script>
	</body>
</html>`
…default verbiage to fix issue #17200, add documentation to readme regarding options
I just implemented a form for contact data that is related to a contract with our firms customers where I used awesomeplete for autocompletion on multiple input fields.

Because it occurs very often that the contact data for the new contract is already known to the database I wanted the autocompletion to fill out all fields if the user selects a suggestion from the list. 

I had all the contract data instances from the database converted into JSON and used that as the list for each awesomeplete instance. 

Configuring each awesomeplete instance to set it's input's value to the field value from the contract data object selected by the user was easy, but i also needed to set the values of the other inputs.

To do this I would need to know at the time when the user selects a suggestion which contract data object was the one whose representation was selected by the user. 
This proved itself relatively uneasy since the 'awesomeplete-select'-event only has a reference to the selected html-representation of the contract data instance that was selected by the user and not to the contract data itself.

My solution was to give each contract data instance a unique id (the primary key from the database) and write that id as a data-attribute into the representation and read that in the handler function for the 'awesomeplete-select'-event.

This feels kind of hacky.

Is there a "cleaner" way to do this, which i missed?
I'm using the Axe Coconut Chrome extension (https://chrome.google.com/webstore/detail/axe-coconut/iobddmbdndbbbfjopjdgadphaoihpojp?hl=en) to test for accessibility and ADA compliance, and I'm seeing an issue being raised on the UL generated by Awesomplete with the role "listbox". Here is the error:

> **ARIA input fields have an accessible name**
> To solve this violation, you need to:
> - Fix at least one (1) of these issues:
> - aria-label attribute does not exist or is empty
> - aria-labelledby attribute does not exist, references elements that do not exist or references elements that are empty
> - Element has no title attribute or the title attribute is empty

**Possible solutions:**

1. It seems like the least repetitive experience for the user would be to use aria-labelledby on the listbox and have it point back to the label associated with the input element
2. Plucking the text from the associated label and using it inside aria-label or title on the listbox
3. Allowing another attribute to be passed through to Awesomplete via the input, similar to how the data-list works, and then using that inside a new attribute aria-label or title on the listbox
Anyone has any idea how to deactive the autofill? It's really annoying because for some countries I can't even see the list:

![image](https://user-images.githubusercontent.com/6035220/64702513-9ae4ff00-d4a2-11e9-8b07-6313806dae53.png)

my list is below
I am using the awesome awesomplete on a wide input-field where it would make perfect sense to use it several times. 
To make the keyboard-lovers happy, I have set `tabSelect:true` and that works fine - but now Tab  changes the focus, which is not so nice. 

How can that be avoided...either with any of awesomeplete's options or JS?

Fiddle: https://jsfiddle.net/mbaas/e9xy8rbf/
 I have the following autocomplete which uses the **awesomplete** plugin. The thing is this is an autocomplete, where the value selected is different from the label that should be showned.

       <input
          id="{{options.elementId}}"
          #autocomplete
          class="c-awesomplete__input dropdown-input"
          [formControl]="control"
          [label]="options.label"
          (click)="toggleDropdown()">

Awesomplete component:

    import { AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild } from "@angular/core";
    
    import Awesomplete from "awesomplete";
    import { FormControl } from "@angular/forms";
    import { IAwesompleteOptions } from "@core-module/interfaces/awesomeplete/iawesomplete-options.interface";
    
    @Component({
      selector: "awesomplete",
      templateUrl: "./awesomplete.component.html",
      styleUrls: ["./awesomplete.component.scss"],
      host: {class: "c-awesomplete"}
    })
    export class AwesompleteComponent implements OnInit, AfterViewInit {
    
      @ViewChild("awesomplete", {static: false}) public awesompleteRef: ElementRef;
      @Input() public control: FormControl;
      @Input() public options: IAwesompleteOptions;
      public awesomplete: Awesomplete;
    
      constructor() { }
    
      ngOnInit() {
        this.control.enable();
      }
    
      ngAfterViewInit() {
        this.awesomplete = new Awesomplete(this.awesompleteRef.nativeElement, this.options);
        this.awesomplete.input.addEventListener("awesomplete-selectcomplete", (event) => {
          this.control.setValue(event.target.value);
        });
      }
    
      public toggleDropdown(): void {
        this.awesomplete.evaluate();
        this.awesomplete.open();
      }
    
      public clearText(): void {
        this.control.setValue("");
      }
    
    }

And this are the options that I'm passing to the component:

    this.options = { 
          minChars: 0,
          list: [
            { label: "brasil", value: "br"},
            { label: "portugal", value: "pt"},
            { label: "france", value: "fr"},
          ]
    }

So when I click the Input I have a list of Brasil, Portugal, France and when I choose one, for instance, France, what I see on the input is fr. I want the control to have the fr value, but I want the input to display France. 





`"awesomplete": "1.1.4"`

Make an option to totally hide `visible-hidden` elements like this
```
<span class="visually-hidden" role="status" aria-live="assertive" aria-atomic="true" hidden="">No results found</span>
```

Because in some use-cases it can break HTML pages adding a horizontal scroll. The workaround is to downgrade to `1.1.2`.