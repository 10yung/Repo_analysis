Updates [com.github.gseitz:sbt-release](https://github.com/sbt/sbt-release) [from 1.0.12 to 1.0.13](https://github.com/sbt/sbt-release/compare/v1.0.12...v1.0.13).
[Release Notes/Changelog](https://github.com/sbt/sbt-release/releases/tag/v1.0.13)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.gseitz", artifactId = "sbt-release" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
`@op` annotation causing compilation error on 2.13.1
`@typeclass` works perfectly fine

Reference project [hicolour/simulacrum-2.13-op](https://github.com/hicolour/simulacrum-2.13-op)

Reference build:
 * [without `@op`](https://travis-ci.org/hicolour/simulacrum-2.13-op/builds/635383233)
 * [with `@op`](https://travis-ci.org/hicolour/simulacrum-2.13-op/builds/635384936)


```
sbt.version=1.3.6

lazy val root = (project in file("."))
  .settings(
    name := "simulacrum-2.13-op",
    organization := "com.prochera",
    version := "0.1",
    libraryDependencies ++= Seq(
      "org.typelevel"        %% "simulacrum" % "1.0.0",
    ),
    scalaVersion := "2.13.1",
    scalacOptions ++= List(
      "-unchecked",
      "-deprecation",
      "-Ymacro-annotations",
      "-language:higherKinds",
      "-language:implicitConversions"
    )
  )

```

Fail with `@op` annotation


```scala
  import simulacrum._

  @typeclass trait Semigroup[A] {
    @op("|+|") def append(x: A, y: A): A
  }
```

```
simulacrum-2.13-op/src/main/scala/OpAnnotationException.scala:5:4: exception during macro expansion: 
[error] scala.reflect.macros.TypecheckException: not found: type op
[error]         at scala.reflect.macros.contexts.Typers.$anonfun$typecheck$3(Typers.scala:44)
[error]         at scala.reflect.macros.contexts.Typers.$anonfun$typecheck$2(Typers.scala:38)
[error]         at scala.reflect.macros.contexts.Typers.doTypecheck$1(Typers.scala:37)
[error]         at scala.reflect.macros.contexts.Typers.$anonfun$typecheck$7(Typers.scala:50)
[error]         at scala.reflect.internal.Trees.wrappingIntoTerm(Trees.scala:1866)
[error]         at scala.reflect.internal.Trees.wrappingIntoTerm$(Trees.scala:1863)
[error]         at scala.reflect.internal.SymbolTable.wrappingIntoTerm(SymbolTable.scala:28)
[error]         at scala.reflect.macros.contexts.Typers.typecheck(Typers.scala:50)
[error]         at scala.reflect.macros.contexts.Typers.typecheck$(Typers.scala:32)
[error]         at scala.reflect.macros.contexts.Context.typecheck(Context.scala:18)
[error]         at scala.reflect.macros.contexts.Context.typecheck(Context.scala:18)
[error]         at simulacrum.TypeClassMacros.$anonfun$generateTypeClass$5(typeclass.scala:142)
[error]         at simulacrum.TypeClassMacros.$anonfun$generateTypeClass$5$adapted(typeclass.scala:141)
[error]         at scala.collection.immutable.List.filter(List.scala:487)
[error]         at simulacrum.TypeClassMacros.filterSimulacrumAnnotations$1(typeclass.scala:141)
[error]         at simulacrum.TypeClassMacros.$anonfun$generateTypeClass$65(typeclass.scala:453)
[error]         at scala.collection.immutable.List.map(List.scala:219)
[error]         at simulacrum.TypeClassMacros.modify$1(typeclass.scala:451)
[error]         at simulacrum.TypeClassMacros.generateTypeClass(typeclass.scala:493)
[error]   @typeclass trait Semigroup[A] {
[error]    ^
[error] one error found
[error] (Compile / compileIncremental) Compilation failed
```


Compile without `@op`

```scala


  import simulacrum._

  @typeclass trait Semigroup[A] {
    def append(x: A, y: A): A
  }
```

```
[success] Total time: 0 s, completed
```

After playing around a bit with simulacrum i have seen a few weird (maybe) behaviours

```
@typeclass trait TestClass[S[_]] {
  def test[P[_], I](a1: S[P[I]]): I
}
```

Works.

Adding second argument to test

 ```
@typeclass trait TestClass2[S[_]] {
  def test[P[_], I](a1: S[P[I]], x: I): I
}
```

results in:
```
type mismatch;
found   : S[P[I]]
required: S[P[Any]]
@typeclass trait TestClass2[S[_]] {
```

Going back to the first example. Lets add a Constraint on `P[_]`

```
  @typeclass trait TestClass3[S[_]] {
    def test[P[_]: Foldable, I](a1: S[P[I]]): I
  }
```
also works. So lets add a constraint on `I`

```
  @typeclass trait TestClass4[S[_]] {
    def test[P[_]: Foldable, I: Eq](a1: S[P[I]]): I
  }
```
results in:
```
 found   : cats.Eq[A]
    (which expands to)  cats.kernel.Eq[A]
 required: cats.Eq[I]
    (which expands to)  cats.kernel.Eq[I]
  @typeclass trait TestClass4[S[_]] {
```

Is this the desired behaviour?

Hi, I've been working on the issue at cats (https://github.com/typelevel/cats/issues/3141), and have found strange behavior of simulacrum. I've implemented a method `def foldA[G[_], A](fga: F[G[A]])(implicit G: Applicative[G], A: Monoid[A]): G[A]` for `Foldable` and it's compiled to `def foldA[G[_], A](implicit ev$macro$49: <:<[D, G[A]], G: Applicative[G], A: Monoid[D]) = typeClassInstance.foldA(self.asInstanceOf[F[G[A]]])(G, A);` which fails with this error:
```
type mismatch;
found   : cats.Monoid[D]
   (which expands to)  cats.kernel.Monoid[D]
required: cats.Monoid[A]
   (which expands to)  cats.kernel.Monoid[A]
@typeclass trait Foldable[F[_]] extends UnorderedFoldable[F] { self =>
^
```

Is it a bug or am I doing something wrong?
Hi,

If I try and use Simulcrum on the following:

```
@typeclass trait Functor[F[_]] { self =>
  def map[A, B](fa: F[A])(f: A => B): F[B]

  def widen[A, B >: A](fa: F[A]): F[B] = fa.asInstanceOf[F[B]]

  def xyz[A, B](ff: F[A => B])(a: A): F[B]
}
```

I get a compiler error:

```
<pastie>:18: error: not found: type A
  def widen[A, B >: A](fa: F[A]): F[B] = fa.asInstanceOf[F[B]]
                    ^
<pastie>:15: error: type arguments [C,B] do not conform to method widen's type parameter bounds [A,B >: A]
@typeclass trait Functor[F[_]] { self =>
 ^
```

If I rewrite `widen` not to use a type bound:

```
@typeclass trait Functor[F[_]] { self =>
  def map[A, B](fa: F[A])(f: A => B): F[B]

  def widen[A, B](fa: F[A])(implicit ev: A <:< B): F[B] = fa.asInstanceOf[F[B]]

  def xyz[A, B](ff: F[A => B])(a: A): F[B]
}
```

then I don't get any compilation errors.

Am I using Simulcrum incorrectly or is this a bug?
Hi,
how can define function with  varargs ? 

b can not be A*, does works with List[A]. Any idea how to make it works? Thanks
@typeclass trait CanTruthy[A] { self =>
  /** Return true, if `a` is truthy. */
  def truthy(a: A, b: A*): Boolean
}
object CanTruthy {
  def fromTruthy[A](f: A => Boolean): CanTruthy[A] = new CanTruthy[A] {
    def truthy(a: A, b: A*): Boolean = f(a)
  }
}
Currently annotating a type with `@typeclass` generates members that don't have explicit return types. This conflicts with the `Wart.PublicInference` WartRemover rule.

You can see this issue with the simulacrum library by making adding this wart to `build.sbt` (see diff below). This results in a bunch of errors similar to the following:

```
src/test/scala/simulacrum/examples/examples.scala:13:8: [wartremover:PublicInference] Public member must have an explicit type ascription
[error]       @typeclass trait Semigroup[A] {                                                                                                                                                
[error]        ^
```

```diff
diff --git a/build.sbt b/build.sbt
index 7f9479d..2e50f40 100644
--- a/build.sbt
+++ b/build.sbt
@@ -85,7 +85,8 @@ lazy val commonSettings = Seq(
   useGpgAgent := true,
   wartremoverErrors in (Test, compile) ++= Seq(
     Wart.ExplicitImplicitTypes,
-    Wart.ImplicitConversion)
+    Wart.ImplicitConversion,
+    Wart.PublicInference)
 ) ++ Seq(Compile, Test).map{ scope =>
   scalacOptions in (scope, compile) := {
     CrossVersion.partialVersion(scalaVersion.value) match {
```
See the sibling issue at:

https://github.com/scalameta/scalagen/issues/22

I will consider scalagen production ready once that issue is closed.

With scalagen simulacrum should be able to support SN/SJS/Scala2.10/11/12/13 + Dotty all with one jar.

Scalagen most likely will not be ready to do this till end of Jan.
The following

```scala
@typeclass trait Local[F[_]] {
  def lmap[@sp(Int, Double) A](self: F[A], f: A => A): F[A]
}
```
is specialized, and we see nice performance if we call it manually, say via:
```scala
val arr: Array[Int] = ???

Local[Array].lmap(arr, f)
```
but the specialization is lost if we use the injected "ops" method:
```scala
arr.lmap(f)
```
Checking simulacrum's output, we see:
```scala
trait Local[F[_]] extends _root_.scala.Any with _root_.scala.Serializable {
  def lmap[@sp(Int, Double) A](self: F[A], f: _root_.scala.Function1[A, A]): F[A];
}

object Local {
  @scala.inline def apply[F[_]](implicit instance: Local[F]): Local[F] = instance;
  trait Ops[F[_], A] {
    type TypeClassType <: Local[F];
    val typeClassInstance: TypeClassType;
    def self: F[A];
    def lmap(f: _root_.scala.Function1[A, A]) = typeClassInstance.lmap[A](self, f);
  }
... // etc
}
```
and notice that `A` in `Ops` isn't specialized. Okay, so let's add write it in manually ourselves. We write this `A` as `@specialized(Int, Double) A`, and do the same in `ToLocalOps`:
```scala
  trait ToLocalOps {
    @java.lang.SuppressWarnings(scala.Array("org.wartremover.warts.ExplicitImplicitTypes", "org.wartremover.warts.ImplicitConversion")) implicit def toLocalOps[F[_], @sp(Int, Double) A](target: F[A])(implicit tc: Local[F]): Ops[F, A] {
      type TypeClassType = Local[F]
    } = {
      final class $anon extends Ops[F, A] {
        type TypeClassType = Local[F];
        val self = target;
        val typeClassInstance: TypeClassType = tc
      };
      new $anon()
    }
  }
```
but when we compile...
```
type mismatch;
[error]  found   : geotrellis.Local[F[_]]
[error]  required: geotrellis.Local[F]
[error]         val typeClassInstance: TypeClassType = tc
[error]                                                ^
```
which is very perplexing error. `tc` clearly has the type `Local[F]`, as we can see from `implicit tc: Local[F]`. Any idea what's happening here?