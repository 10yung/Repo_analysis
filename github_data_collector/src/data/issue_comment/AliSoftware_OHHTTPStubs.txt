<!-- Thanks for contributing to OHHTTPStubs! Before you submit your pull request, please make sure to check the following boxes by putting an x in the [ ] -->

### Checklist

- [x] I've checked that all new and existing tests pass
- [x] I've updated the documentation if necessary
- [x] I've added an entry in the CHANGELOG to credit myself

### Description

I've added a matcher called `hasFormBody` that tests whether the `NSURLRequest` content-type is `application/x-www-form-urlencoded` and body contains query parameters.

### Motivation and Context

In POST request with `application/x-www-form-urlencoded`, parameters are handled in httpBody.
For that reason, `containsQueryParams` function is useless for this situation.
Also for the same reason as #265, I need a new matcher that takes query items from httpBody and matches with expected pairs.
<!-- Thanks for contributing to OHHTTPStubs! Before you submit your pull request, please make sure to check the following boxes by putting an x in the [ ] -->

### Checklist

- [ ] I've checked that all new and existing tests pass
- [ ] I've updated the documentation if necessary
- [ ] I've added an entry in the CHANGELOG to credit myself

### Description

<!--- Describe your changes in detail -->

### Motivation and Context

<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
<!--- Please describe in detail how you tested your changes. --->

<!-- Thanks for contributing to OHHTTPStubs! Before you submit your pull request, please make sure to check the following boxes by putting an x in the [ ] -->

### Checklist

- [x] I've checked that all new and existing tests pass
- [x] I've updated the documentation if necessary
- [x] I've added an entry in the CHANGELOG to credit myself

### Description
Add missing import to support building with Bazel, since it doesn't import underlying system modules by default.

<!--- Describe your changes in detail -->

### Motivation and Context

<!--- Why is this change required? What problem does it solve? -->
<!--- If it fixes an open issue, please link to the issue here. -->
<!--- Please describe in detail how you tested your changes. --->
<!-- Thanks for taking the time to report your issue with OHHTTPStubs! When submitting your issue, please make sure to check the following boxes by putting an x in each appropriate [ ] so we can fully understand the context of your problem and help you better -->

### New Issue Checklist

- [x] I have tried with the latest version of OHHTTPStubs
- [x] I have read the [README](https://github.com/AliSoftware/OHHTTPStubs/blob/master/README.md)
- [x] I have read the [Using the right Swift Version of `OHHTTPStubs` for your project](https://github.com/AliSoftware/OHHTTPStubs#using-the-right-swift-version-of-ohhttpstubs-for-your-project) section
- [x] I have searched in the [existing issues](https://github.com/AliSoftware/OHHTTPStubs/issues?utf8=✓&q=is%3Aissue)
- [x] I have read [the OHHTTPStubs wiki](https://github.com/AliSoftware/OHHTTPStubs/wiki) to see if there wasn't a detailed page talking about my issue

### Environment

- version of OHHTTPStubs: 6.2.0
- integration method you are using:
  * [x ] Cocoapods
  * [ ] Carthage
  * [ ] submodule
  * [ ] other
- version of the tool you use: 1.7.5

### Issue Description

Xcode and Swift 5,1 have both been shipped recently and it would be great to get support added for Swift 5.1. 

The project that I am working on using OHHTTPStubs is working in Swift5.0 and Xcode 10.3 but not in Xcode 11 and Swift 5.1
<!-- Thanks for taking the time to report your issue with OHHTTPStubs! When submitting your issue, please make sure to check the following boxes by putting an x in each appropriate [ ] so we can fully understand the context of your problem and help you better -->

### New Issue Checklist

- [x] I have tried with the latest version of OHHTTPStubs
- [x] I have read the [README](https://github.com/AliSoftware/OHHTTPStubs/blob/master/README.md)
- [x] I have read the [Using the right Swift Version of `OHHTTPStubs` for your project](https://github.com/AliSoftware/OHHTTPStubs#using-the-right-swift-version-of-ohhttpstubs-for-your-project) section
- [x] I have searched in the [existing issues](https://github.com/AliSoftware/OHHTTPStubs/issues?utf8=✓&q=is%3Aissue)
- [x] I have read [the OHHTTPStubs wiki](https://github.com/AliSoftware/OHHTTPStubs/wiki) to see if there wasn't a detailed page talking about my issue

### Environment

- version of OHHTTPStubs: [LIB VERSION HERE]
- integration method you are using:
  * [x] Cocoapods
  * [ ] Carthage
  * [ ] submodule
  * [ ] other
- version of the tool you use: [INSERT VERSION HERE]

### Issue Description

[DESCRIBE YOUR ISSUE HERE]

##### Complete output when you encounter the issue (if any)

```
[INSERT OUTPUT HERE]
```

### Checklist

- [x] I've checked that all new and existing tests pass
- [x] I've updated the documentation if necessary
- [x] I've added an entry in the CHANGELOG to credit myself

### Description

Fixes #290

Also does more idiomatic error handling:

#### Wrong:

```objc
NSError *error;
NSArray *result = [someObject someMethod error:&error];
if (!error) {
    // assume success
}
```

#### Correct:
```objc
NSError *error;
NSArray *result = [someObject someMethod error:&error];
if (result) {
    // assume success
}
```

### Motivation and Context

The main motivation was addressing static analysis warnings I encountered when analyzing an Objective-C project. The error handling was just something I fixed along the way.

Note: I also added a couple of missing generics annotations which may affect the public interface. If they are imported into Swift, they will go from `[Any]` to `[OHHTTPStubsDescriptor]`. ~This is a breaking change for anyone who is using the output of this method in Swift.~ Actually, it may not be breaking, since in Swift, they were probably already doing something like `for descriptor in descriptors as! [OHHTTPStubsDescriptor]`, and after this update, that line will throw a compile warning, not an error. So this can probably be a bugfix, not a major release.

Testing: I added a couple of missing tests for error throwing cases, and made sure all the tests were passing.
Updating gitignore.
Adding Package.swift
Adding Swift tests, getting all builds working.
Downgrading swift package version to be compatible with Xcode 9.1.
Disabling xcode 9.1 tests and redirect tests in other xcode versions.
Changing iPhone types depending on Xcode version.
Passing conditional compilation flags to swift test to disable redirect tests in CI.
Bumping podspec version.
Cleaning up podspec.
Updating example projects.
Adding SPM Example.
Moving Example Stubs to shared folder.
Adding building example apps to CI.
Adding Carthage builds to CI.
Updating rake file for SPM tests.
Passing Swift Versions to carthage.
Updating SPM example to use URLSession instead of URLConnection.
Updating documentation.

### Checklist

- [x] I've checked that all new and existing tests pass
- [x] I've updated the documentation if necessary
- [x] I've added an entry in the CHANGELOG to credit myself

### Description

This PR is for adding Swift Package Manager support.  

### Motivation and Context

[Apple integrated Swift Package Manager into Xcode 11 this year](https://developer.apple.com/videos/play/wwdc2019/408/) and these are the changes to support it.  

#### File Structure: 

The [apple docs](https://developer.apple.com/documentation/swift_packages/creating_a_swift_package_with_xcode) tell us to have the `Package.swift` at  the root of the repository.

```To turn your existing component into a Swift package, you don’t need to create a new Swift package from scratch. Instead, keep your existing project and add a README.md and a Package.swift file inside the root directory of your library project to turn your library into a Swift package.```

While SPM does not require a specific structure, `OHHTTPStubs`'s SPM support will be easier to maintain if we conform to the standard style of foldering in SPM: `Sources` and `Tests` at the root of the repo, and then folders matching the names of the targets inside of those.  This required moving most of the files up a level by removing the `OHHTTPStubs` folder that was previously at the root of the project and also renaming `UnitTests` to become `Tests`.

The pod specs were updated for the new file structure.  To validate them, I ran a `pod install` in the ObjC and Swift Example projects, I verified that the same files exist, their visibility did not change, and that the example projects still work as expected.

The `OHHTTPStub` project was also updated for the new file structure.  To validate it, I ran unit tests on several Xcode versions (9.1, 10.1, 10.2, 11).

#### Package Naming:

I went through several revisions on the right design for the package targets.

##### Original Design

I originally went down the path of trying to recreate the subspecs that exist in our `Cocoapods` integration.  This was a bit painful, but worked.  Once I started on the SPM example project, I saw the awkwardness of having to import each of the targets to my swift example code.

<img width="483" alt="Screen Shot 2019-08-10 at 8 12 49 PM" src="https://user-images.githubusercontent.com/2142301/62865958-c4610e00-bcdd-11e9-888c-b162aa273e85.png">

##### Second Design

I then decided to modify the package design to be 2 targets: `OHHTTPStubs` and `OHHTTPStubsSwift`, but ran into problems with this approach also.

As soon as I created the `OHHTTPStubs` target, I started receiving warnings about certain headers not being included in our `OHHTTPStubs.h` umbrella header.  SPM started seeing this existing file as our umbrella header and wasn't generating one on its own anymore.  I was tempted to rename our `OHHTTPStubs.h` file to be something else to get SPM to create an umbrella header again, but wanted to retain backwards compatibility with this PR.

##### Final Design

I then changed the design to be 2 targets: `OHHTTPStubsCore` and `OHHTTPStubsSwift`.

Importing these in Swift will look like this:

<img width="265" alt="Screen Shot 2019-08-12 at 8 48 54 AM" src="https://user-images.githubusercontent.com/2142301/62866142-1e61d380-bcde-11e9-9b12-81edd8f78d30.png">

#### Example Projects:

- A Swift Package Manager project with `OHHTTPStubs` integration (Xcode-11 beta 5) was added to the `Examples/SwiftPackageManager` folder.  This example project uses `URLSession` APIs.
- The `Stubs` folder and files used in the example apps is now shared to remove the previously duplicate stub files in each example.

#### CI Support:

I added a lot more (is this overkill?) travis tasks in this PR.  These are the new tasks:
- `xcodebuild test` in Xcode 11 for iOS Static, iOS Dynamic, MacOS, and tvOS
- `swift test` in Xcode 10.1, 10.2, 11.
- `carthage build` commands in 9.1, 10.1, 10.2, 11 and several versions of swift: 3.2, 4.0, 4.1, 4.2, 5.0, 5.1.
- `xcodebuild build` to build all example projects in Xcode 11.

#### Other:
- `Mocktail` and `HTTPMessage` targets were not created in this PR.  [Mocktail does not support SPM, and hasn't actually been updated in several years](https://github.com/puls/objc-mocktail).  I added a comment in the `README` for anyone to open an issue if they see a need for these.  I would be happy to create a follow-up PR for `OHHTTPStubsHTTPMessage` if we desire it.
- Fixes #311.

I have been able to implement mock tests for my upload requests based on [this Stackoverflow answer](https://stackoverflow.com/a/20663781/5098984). 

As a result, I have removed every `OHHttpStubs` dependency from my project, to not mix libraries. Maybe you could change your internal approach to stubbing the web requests and support upload tasks as well, based on `OCMock`? 

If you do not want to depend on an external library, I think you could implement similar behaviour as `OCMock` with **Method Swizzling**. 
### New Issue Checklist

- [x] I have tried with the latest version of OHHTTPStubs
- [x] I have read the [README](https://github.com/AliSoftware/OHHTTPStubs/blob/master/README.md)
- [x] I have read the [Using the right Swift Version of `OHHTTPStubs` for your project](https://github.com/AliSoftware/OHHTTPStubs#using-the-right-swift-version-of-ohhttpstubs-for-your-project) section
- [x] I have searched in the [existing issues](https://github.com/AliSoftware/OHHTTPStubs/issues?utf8=✓&q=is%3Aissue)
- [x] I have read [the OHHTTPStubs wiki](https://github.com/AliSoftware/OHHTTPStubs/wiki) to see if there wasn't a detailed page talking about my issue

### Environment

- version of OHHTTPStubs: Any
- integration method you are using:
  * [ ] Cocoapods
  * [ ] Carthage
  * [ ] submodule
  * [x] other
- version of the tool you use: Xcode 11

### Issue Description

Any plans to Integrate Swift Package Manager? 
It is now a first class citizen on Xcode 11

##### Complete output when you encounter the issue (if any)
Installed OHHTTPStubs using pods but getting error some time for not finding it on the derived data of build machine. Following is the error logs:

⚠️  ld: directory not found for option '-F/Users/greenhouse/Library/Developer/Xcode/DerivedData/Halo-gtngiaipxuhhfpfjxfwgtnylckkw/Build/Intermediates.noindex/ArchiveIntermediates/HaloDebug/BuildProductsPath/Debug-iphoneos/OHHTTPStubs-b1c8d455'

❌  ld: framework not found OHHTTPStubs



❌  clang: error: linker command failed with exit code 1 (use -v to see invocation)


