There is a new delayed Var called `default-client-https`. Using this instead of the standard `default-client` will make your client object behave like `URL.openStream()`, which i think is desirable. Addresses #344  - at the very least on Java11+.  

"error:" #error {
 :cause "exceed max line 16192"
 :via
 [{:type org.httpkit.LineTooLargeException
   :message "exceed max line 16192"
   :at [org.httpkit.LineReader readLine "LineReader.java" 36]}]
 :trace
 [[org.httpkit.LineReader readLine "LineReader.java" 36]
  [org.httpkit.client.Decoder readHeaders "Decoder.java" 150]
  [org.httpkit.client.Decoder decode "Decoder.java" 92]
  [org.httpkit.client.HttpClient doRead "HttpClient.java" 212]
  [org.httpkit.client.HttpClient run "HttpClient.java" 488]

https://github.com/http-kit/http-kit/blob/6bbb88c26ea2aaa0555777276f02b8e3da1728c8/src/java/org/httpkit/client/HttpClient.java#L283

I'd like to propose a feature for parity with `clj-http`, the ability to "ignore" certain hosts via the `proxy-ignore-hosts` variable, if set, this'll trigger a simple regex to ensure that we don't pass the URL through the proxy. Any issues with this? It seems fairly straight forward to implement, unless I'm missing something. I'm willing to implement, just checking if there's a problem before hand.
Java verison
```
openjdk version "12" 2019-03-19
OpenJDK Runtime Environment (build 12+33)
OpenJDK 64-Bit Server VM (build 12+33, mixed mode, sharing)
```
Lein version
`Leiningen 2.9.1 on Java 12 OpenJDK 64-Bit Server VM
`
http-kit versions 2.3.0, 2.4.0-alpha3


I expect the request to succeed but return 411 status, instead it blows up with a Timeout Exception.

I was trying to find a fix, any pointers on best places to start?


Here is a minimal example. 

```
(ns app.core
  (:require [org.httpkit.client :as http])
  )

(defn options [body] {:timeout 2       
                      :body body})

(defn create-resource [request-body]
  (http/post "https://google.com" (options request-body)))

(defn -main
  [& args]
  (let [test-resp (create-resource "{\"foo\": 1}")]
    (println @test-resp)))
```

```
/Library/Java/JavaVirtualMachines/openjdk-12.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -XX:-OmitStackTraceInFastThrow -Dclojure.compile.path=/Users/kellieenglish/wonderkind/app/target/classes -Dapp.version=0.1.0-SNAPSHOT -Dclojure.debug=false "-javaagent:/Users/kellieenglish/Applications/IntelliJ IDEA CE.app/Contents/lib/idea_rt.jar=64368:/Users/kellieenglish/Applications/IntelliJ IDEA CE.app/Contents/bin" -classpath /Users/kellieenglish/wonderkind/app/test:/Users/kellieenglish/wonderkind/app/src:/Users/kellieenglish/wonderkind/app/dev-resources:/Users/kellieenglish/wonderkind/app/resources:/Users/kellieenglish/wonderkind/app/target/classes:/Users/kellieenglish/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar:/Users/kellieenglish/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar:/Users/kellieenglish/.m2/repository/org/clojure/core.specs.alpha/0.2.44/core.specs.alpha-0.2.44.jar:/Users/kellieenglish/.m2/repository/http-kit/http-kit/2.3.0/http-kit-2.3.0.jar:/Users/kellieenglish/.m2/repository/nrepl/nrepl/0.6.0/nrepl-0.6.0.jar:/Users/kellieenglish/.m2/repository/clojure-complete/clojure-complete/0.2.5/clojure-complete-0.2.5.jar clojure.main -i /private/var/folders/dd/dn0rwdy932z0tr6lp5vzvh_00000gn/T/form-init850616921077774897.clj
Thu Aug 29 13:05:46 CEST 2019 [client-loop] ERROR - select exception, should not happen
java.lang.IllegalStateException: Client/Server mode has not yet been set.
	at java.base/sun.security.ssl.SSLEngineImpl.beginHandshake(SSLEngineImpl.java:98)
	at org.httpkit.client.HttpClient.finishConnect(HttpClient.java:395)
	at org.httpkit.client.HttpClient.run(HttpClient.java:472)
	at java.base/java.lang.Thread.run(Thread.java:835)
Thu Aug 29 13:05:46 CEST 2019 [client-loop] ERROR - select exception, should not happen
java.lang.IllegalStateException: Client/Server mode has not yet been set.
	at java.base/sun.security.ssl.SSLEngineImpl.beginHandshake(SSLEngineImpl.java:98)
	at org.httpkit.client.HttpClient.finishConnect(HttpClient.java:395)
	at org.httpkit.client.HttpClient.run(HttpClient.java:472)
	at java.base/java.lang.Thread.run(Thread.java:835)
{:opts {:timeout 2, :body {"foo": 1}, :method :post, :url https://google.com}, :error #error {
 :cause idle timeout: 2ms
 :via
 [{:type org.httpkit.client.TimeoutException
   :message idle timeout: 2ms
   :at [org.httpkit.client.HttpClient clearTimeout HttpClient.java 120]}]
 :trace
 [[org.httpkit.client.HttpClient clearTimeout HttpClient.java 120]
  [org.httpkit.client.HttpClient run HttpClient.java 481]
  [java.lang.Thread run Thread.java 835]]}}

Process finished with exit code 0
```
Hello,

I found this PR that is eerily similar but  had no resolution for what I'm about to ask: https://github.com/http-kit/http-kit/issues/76

The problem I am seeing is this error:

`close handler exist: ...` and you can see it is thrown here 
https://github.com/http-kit/http-kit/blob/321502b0f56a513aebf8175b06ae8a1c38f30af8/src/java/org/httpkit/server/AsyncChannel.java#L197

At first it seemed to be random, but now I'm realizing it may be load related. This started happening when I introduced websocket handlers because I wanted a different close handler for websockets. I think the problem is possibly around channel reuse or pooling, and when I set the close handler function in `with-channel`, it throws because it's actually using a channel that already has a handler.  And more specifically, only seems to be an issue with lots of requests which made me think of pooling or reuse.

Typically one wouldn't need to change the close handler on a case by case basis (especially given a typical server setup with handlers) however, when you introduce websockets, it begins to have some validity.

With that being said, IF this is an issue with pooling of channels, is there a way to separate those pools between `:websocket? true` requests and vice versa? Or perhaps there is a more creative solution or configuration I'm not aware of?

Thanks!
Hi,

Is there a way to get the current queue depth of the HTTP server - the number of requests waiting in queue that we haven't started processing.

The use case is:
1. monitoring
2. using this number to respond with 429 Too many requests to pushback clients in case we're having issues in a service.

Also, the time a requests waits in queue until it starts getting processed is an interesting number I'd like to be able to receive.

Thanks in advance for any help!
Been working on the backend too long. Now trying to update my sente-boot example and running headlong into a dependency issue (methinks) with http-kit. My build-boot file is located here: https://github.com/laforge49/sente-boot/blob/master/build.boot 

Below is the error. Any help would be appreciated. Bill

      clojure.lang.ExceptionInfo: clojure/lang/IFn
    data: {:file "org\\httpkit\\server.clj", :line 66}
  java.lang.NoClassDefFoundError: clojure/lang/IFn
java.lang.ClassNotFoundException: clojure.lang.IFn
                                   ...
                  clojure.core/load/fn                          core.clj: 6007
        clojure.core/load/invokeStatic                          core.clj: 6006
                     clojure.core/load                          core.clj: 5990
                                   ...

I might be wrong about this, so I'm double checking before submitting a fix. When [successfully reusing a connection from the keepalives cache](https://github.com/http-kit/http-kit/blob/master/src/java/org/httpkit/client/HttpClient.java#L423), it doesn't look like the request updates its `isConnected` and `timeoutTs` fields like it does after connecting for the first time in the [setConnected](https://github.com/http-kit/http-kit/blob/master/src/java/org/httpkit/client/Request.java#L41) method. This seems like a bug which could cause unwanted consequences in [clearTimeout](https://github.com/http-kit/http-kit/blob/master/src/java/org/httpkit/client/HttpClient.java#L123) in which we use the wrong timeout as defined in request params and the wrong error message. 
It looks like http-kit automatically sets "accept-encoding" to "gzip, deflate", and it automatically decompresses the data.

If say, I wanted to download a remote gzipped resource, but receive it as gzipped, without the automatic decoding, how do I go about that?

Thanks!
We've been having some problems dealing with shutdown of http-kit at CircleCI - here is a quick and dirty patch that we are testing presently. I'm opening this PR to get some feedback and share what we are up to - I don't have any expectation of this being merged as is:

## Shutdown more gracefully in the presence of HTTP keep alives.

A two phase approach:

- keep track of the currently kept-alive connections in a set, so that
we can close them when we are shutting down.
- Set a boolean flag true when we are shutting down, so that we can use
it to force isKeepAlive to false when shutting down.

Bonus Features:

Change the error message in RingHandler,.java to be correct when the
ExecutorService is being shutdown. This error message happens when the
server is overloaded _and_ when it is being shutdown.

Add logging to the empty `catch` blocks in HttpServer.java