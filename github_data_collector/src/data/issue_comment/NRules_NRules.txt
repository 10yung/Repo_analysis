You state that the bulk versions of the add and insert are better, but how does one deal with a way of inserting a lot of facts that may contain some that are already inserted ?

Can the API's be extended that do the equivalent of  _bool noFailIfDuplicate=true_
```c#
    /// <summary>Inserts new facts to the rules engine memory.</summary>
    /// <remarks>Bulk session operations are more performant than individual operations on a set of facts.</remarks>
    /// <param name="facts">Facts to insert.</param>
    /// <param name="noFail">Do not throw exception if a fact is already in the Session</param>
    void InsertAll(IEnumerable<object> facts, bool noFail=true); 
```
A situation has arisen where I have a need to calculate a set of facts down to a certain level (i.e. facts are missing thus preventing further rules from firing).
I then need to take a snapshot of the facts and create a new session, add some new facts for new objects, and run the new session again.

As the depth of the facts progress, then the number of facts and rules that are being exercised increases, thus if I have from the above a number of items requiring a common base at a level 5 iteration (number is just for demonstration) and I need to run this level a 1000 times against additional facts, this overhead of just setting up the level 5 becomes onerous.

What would be be great is for a level 5 session to be duplicated (deep clone) so that all previous conditions that have been set in the Rete tree etc are kept and thus do not need to be retested, and only the new facts and hence the unused rules need to be tested and "fired".
I am about to take on a new project where dynamic business rules are required. I have stumbled onto NRules and it looks like a great library. The current system is outdated, uses custom parsing of plain text to generate c# "validation" rules and it simply doesn't scale well and we want to streamline and modularize the application to be micro service based, step functions and server less. Putting the rest of the potential design aside, I was curious if anyone has come up with a standardized way to load dynamic rules into the RuleBuilder. I don't know much about RuleML, but that seems to be a standard with some cross community support.

Has anyone successfully loaded a RulesRepository using JSON, RuleML or some standard format? One thing that makes our situation a little less "dynamic" is rules are done prior to the client application being live, and it is also acceptable to recompile or reload the application when business validation rules change. I envision storing a bunch of rules in a database as rows, such as varchar columns and then parsing them in C# into expressions in the load method of a RulesRepository is probably clunky and error prone.

I'd love any insight to how people have done production scenarios where rules can be dynamic, call functions via Do() and how they designed this process.

Thanks in advance.
@snikolayev I've found a closed  #84 issue labeled "wontfix". I've tried to implement the FireAsync() as you described and it was quite straightforward. BTW I haven't replaced Fire() with FireAsync() but implemented it in parallel.
So the question is why did you close this issue? Were there any hidden issues which I haven't faced yet, or it was just a decision to put it aside for a while?
Currently, we're investigating your project and potentially can collaborate :) 
Reduce the number and extent of allocations during fact propagation.
Also improve performance of Rete graph, particularly when joining facts.
Hello, I'm a programming freshman. Can someone tell me more about how to get the debug visualizer to work? Which file exactly do I have to build? Unfortunately, I only get error messages when I execute the debug visualizer executable file. 

Thank you !

I’m trying to create a ”ForAll” rule using the RuleBuilder API where additional facts are joined onto the fact type used in the ForAll rule.

This can be achieved with Any/None rules by using the GroupBuilder, but the patterns collection on ForAll does not work in the same way. See below:

```
using NRules.IntegrationTests.TestAssets;
using NRules.RuleModel;
using NRules.RuleModel.Builders;
using System;
using System.Linq.Expressions;
using Xunit;

namespace NRules.IntegrationTests
{
    public class ThreeFactForAllRuleBuilderTest : BaseRuleTestFixture
    {
        [Fact]
        public void ThreeFacts()
        {
            //Arrange
            var builder = new RuleBuilder();
            builder.Name("Test Rule");

            var lhs = builder.LeftHandSide();
            var patternBuilder1 = lhs.Pattern(typeof(FactType1), "fact1");

            Expression<Func<FactType1, FactType2, bool>> fact1_2_Join = (fact1, fact2) => fact2.JoinProperty == fact1.TestProperty;
            
            // Adding this makes it work as a workaround, but exports a FactType2 pattern
            //lhs.Pattern(typeof(FactType2), "f2");
            //
            var patternBuilder2_Base = new PatternBuilder(typeof(FactType2), "fact2");
            patternBuilder2_Base.Condition(fact1_2_Join);

            var patternBuilder2_Actual = new PatternBuilder(typeof(FactType2), "f2"); // Use f2 to avoid collision of names, Fluent also uses different names for BasePattern and Pattern
            Expression<Func<FactType2, bool>> condition21 = f2 => f2.TestProperty.StartsWith("Valid");
            patternBuilder2_Actual.Condition(condition21);

            var patternBuilder3 = new PatternBuilder(typeof(FactType3), "fact3");
            Expression<Func<FactType2, FactType3, bool>> fact2_3_Join = (f2, fact3) => fact3.JoinProperty == f2.TestProperty;
            patternBuilder3.Condition(fact2_3_Join);

            var allBuilder = lhs.ForAll();
            allBuilder.BasePattern(patternBuilder2_Base);
            allBuilder.Pattern(patternBuilder2_Actual);
            allBuilder.Pattern(patternBuilder3); // Commenting out this line, the test passes

            Expression<Action<IContext, FactType1>> action = (context, fact1) => NoOp();
            builder.RightHandSide().Action(action);

            //Act
            var rule = builder.Build();
        }

        [Fact]
        public void ThreeFacts_WorksForExists()
        {
            //Arrange
            var builder = new RuleBuilder();
            builder.Name("Test Rule");

            var lhs = builder.LeftHandSide();
            var patternBuilder1 = lhs.Pattern(typeof(FactType1), "fact1");

            var patternBuilder2 = new PatternBuilder(typeof(FactType2), "fact2");
            Expression<Func<FactType1, FactType2, bool>> fact1_2_Join = (fact1, fact2) => fact2.JoinProperty == fact1.TestProperty;
            Expression<Func<FactType2, bool>> condition21 = fact2 => fact2.TestProperty.StartsWith("Valid");
            patternBuilder2.Condition(fact1_2_Join);
            patternBuilder2.Condition(condition21);

            var patternBuilder3 = new PatternBuilder(typeof(FactType3), "fact3");
            Expression<Func<FactType2, FactType3, bool>> fact2_3_Join = (fact2, fact3) => fact3.JoinProperty == fact2.TestProperty;
            patternBuilder3.Condition(fact2_3_Join);

            var groupBuilder = new GroupBuilder();
            groupBuilder.Pattern(patternBuilder2);
            groupBuilder.Pattern(patternBuilder3);

            var existsBuilder = lhs.Exists();
            existsBuilder.Group(groupBuilder);

            Expression<Action<IContext, FactType1>> action = (context, fact1) => NoOp();
            builder.RightHandSide().Action(action);

            //Act
            var rule = builder.Build();
        }

        public static void NoOp()
        {
        }

        protected override void SetUpRules()
        {
        }

        public class FactType1
        {
            public string TestProperty { get; set; }
        }

        public class FactType2
        {
            public string TestProperty { get; set; }
            public string JoinProperty { get; set; }
        }

        public class FactType3
        {
            public string TestProperty { get; set; }
            public string JoinProperty { get; set; }
        }
    }
}
```

From investigation, it appears that the ForAll patterns cannot “import” parameters from each other and require their dependent patterns to be added to the left hand side of the rule rather than just the ForAllBuilder.

I’m not sure if this is a bug, feature request or support issue. Am I using the ForAllPattern incorrectly and is there any reason Any/None take a group but ForAll cant?

Trying to load the visualizer with Visual Studio Community 2019 version 16.1.4.
Cloned the repository at https://github.com/NRules/NRules.git (which appears to be 0.9.0 as of this writing)
Using NRules version 0.9.0 in my application.
I'm following the instructions on this page: https://github.com/NRules/NRules/wiki/Diagnostics

Started up Visual Studio 2019.  Started up my application. Hit a breakpoint after all the facts have been loaded and a magnifying glass shows up over my ISession variable.  I click on it and get:

> Unable to cast object of type 'NRules.Debugger.Visualizer.SessionVisualizer' to type 'Microsoft.VisualStudio.DebuggerVisualizers.DialogDebuggerVisualizer'.

We're using NRules in an interactive realtime application that needs to compile the rule factory on application start. We're starting to notice that our rule factory compilation is taking a long time. (10 seconds and growing so far on my PC, and about 40 seconds on the low power device we'll eventually be supporting.)

Specifically, this time is spent in RuleRepositoryExtensions.Compile() method.

Doing some initial profiling, the bulk of the time spent seems to be in RuleElementVisitor`1.Visit().

Drilling into this a bit, at first glance I see the bulk of the time spent in ExpressionComparer and LambdaCompiler methods.

A few screenshots of profiling are attached in case this is helpful.
<img width="1440" alt="Screen Shot 2019-06-26 at 10 12 48 PM" src="https://user-images.githubusercontent.com/19980048/60237529-accde300-985f-11e9-9f85-d5cf369f25c4.png">
<img width="1440" alt="Screen Shot 2019-06-26 at 10 11 36 PM" src="https://user-images.githubusercontent.com/19980048/60237531-accde300-985f-11e9-9c78-7c5e4b05653c.png">
<img width="1440" alt="Screen Shot 2019-06-26 at 10 10 28 PM" src="https://user-images.githubusercontent.com/19980048/60237533-accde300-985f-11e9-9c22-11bfe878d8f8.png">
<img width="1439" alt="Screen Shot 2019-06-26 at 10 09 44 PM" src="https://user-images.githubusercontent.com/19980048/60237535-accde300-985f-11e9-8705-665d91bba930.png">








Create an aggregator that supports the following:

```csharp
ILookup<TKey, TValue> l;
IEnumerable<TValue> e;

When()
    .Query(() => l, q => q
        .Match<TKey>()
        .ToLookup(t => t.Key)) // has optional value selector override just like ToLookup in LINQ
    .Let(() => e, () => l[someKey]);
```

This fits well with how programmers will expect `ILookup` to perform in LINQ.

Currently this can be implemented as

```csharp
When()
    .Query(() => l, q => q
        .Match<TKey>()
        .Collect()
        .Select(c => c.ToLookup(t => t.Key))
```

which is less performant because the `Select()` is not reactively updated and instead created newly each time.

I intend to implement this so that ToLookup produces `ILookupQuery<TKey, TValue>` (similar to the IOrderedQuery mentioned in issue #171 