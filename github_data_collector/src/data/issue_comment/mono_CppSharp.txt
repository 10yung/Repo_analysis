I'm playing around OpenCascade simple wrapper. I use one header "Geom2d_Line.hxx", class Geom2d_Line inherited from Geom2d_Curve which contain next method:

```
  Standard_EXPORT virtual Standard_Boolean IsPeriodic() const = 0;
```
in Geom2d_Line class this method overrides:

``` //! Returns False
  Standard_EXPORT Standard_Boolean IsPeriodic() const Standard_OVERRIDE;
```
OS: Windows

when it converted to C#, I have property in Geom2dCurve
 ```
public abstract bool IsPeriodic
{
      get;
}

```
but in Geom2dLine I have these two members:

```
        /// <summary>Returns False</summary>
        public virtual bool IsPeriodic()
        {
            var __slot = *(void**) ((IntPtr) __OriginalVTables[0] + 13 * 8);
            var ___IsPeriodicDelegate = (global::UniCad.Delegates.Func_bool_IntPtr) Marshal.GetDelegateForFunctionPointer(new IntPtr(__slot), typeof(global::UniCad.Delegates.Func_bool_IntPtr));
            var __ret = ___IsPeriodicDelegate((__Instance + __PointerAdjustment));
            return __ret;
        }
```
and this in same CS class:

```
public override bool IsPeriodic { get; }
```

There are two issues:

1. We have property and method with same names
2. Property not overrided correctly (as a minimum should return IsPeriodic() method, but issue 1 in this case)

What should I do in this case, can I solve it with custom pass or something?
Thanks.

##### Used headers
Geom2d_Line.hxx


##### Used settings


Target: MSVC






##### Brief Description

Invalid generated code for template class

Follow up to https://github.com/mono/CppSharp/issues/1268

##### Used headers

```cpp
template <typename T>
class Abstract {
  public:
    virtual void func() = 0;
};

class Derived: public Abstract<int> {
  public:
    void func() override {}
};
```

##### Used settings

`GenerateClassOptions = true`

##### Stack trace or incompilable generated code

```
Generated 'Encodings.cs'
../gen/Encodings/Encodings.cs(53,52): error CS1525: Unexpected symbol `Internal', expecting `(', `[', or `{'
../gen/Encodings/Encodings.cs(58,52): error CS1525: Unexpected symbol `Internal', expecting `(', `[', or `{'
```

```
    public unsafe abstract partial class Abstract<T> : IDisposable
    {
        public global::System.IntPtr __Instance { get; protected set; }

        protected int __PointerAdjustment;
        internal static readonly global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Encodings.Abstract<T>> NativeToManagedMap = new global::System.Collections.Concurrent.ConcurrentDictionary<IntPtr, global::Encodings.Abstract<T>>();
        protected internal void*[] __OriginalVTables;

        protected bool __ownsNativeInstance;

        internal static global::Encodings.Abstract<T> __CreateInstance(global::System.IntPtr native, bool skipVTables = false)
        {
            return new global::Encodings.Abstract<T>Internal(native.ToPointer(), skipVTables);
        }

        internal static global::Encodings.Abstract<T> __CreateInstance(global::Encodings.Abstract.__Internal native, bool skipVTables = false)
        {
            return new global::Encodings.Abstract<T>Internal(native, skipVTables);
        }
```

This invalid code: `global::Encodings.Abstract<T>Internal` 
##### Brief Description

Cppsharp generates the classes from cpp code as public.
Is there some way to generate it as internal

OS: Windows / OS X / Linux (include version and/or distro)


##### Used headers



##### Used settings


Target: MSVC/GCC/Clang

Other settings 


##### Stack trace or incompilable generated code




##### Brief Description
Hi,

When using the CppSharp libs through NuGet, looking at the assemblies files properties it appears that the version is always set as 0.0.0.0. Any good reason for that behaviour?

Also, is there an available build pipeline that someone can use to create a test release/artifact of CppSharp when making changes, rather than building it locally?

Thanks.

This keeps the original functions instead of ignoring them which helps when rearranging passes - in particular when the pass for symbols is involved.
##### Brief Description

Previously I had been using CppSharp 0.8.23. After upgrading to 0.10.1, I noticed this bug:

This is the diff in generation after updating:
```diff
        public static string UUIDToChar(global::System.Guid uid, char* str, ulong len)
        {
            var __arg0 = iFaceRec.FixGuid(uid);
-            var __arg1 = (sbyte*) str;
+            var __arg1 = (sbyte*) &str;
            var __ret = __Internal.UUIDToChar(__arg0, __arg1, len);
            return __ret;
        }
```

Original function prototype is:
```C
extern const char *ifr_UUIDToChar(IFR_UUID uid, char *str, size_t len);
```
I also apply a rename to IFR_UUID with a FixGUID, which I don't think is relevant here because this affects the char*. If you need info about the IFR_UUID type, please mention this.

OS: Windows


##### Used headers

string.h

##### Used settings


Target: MSVC 2017



Hi,

I'm facing a similar issue as #836.

I have a template class and am trying to generate a C++/CLI equivalent. So far nothing is generated for such classes. Does this support exist yet or not? If not, what recommended approaches are there to generate C++/CLI wrappers for template classes?

Thanks
##### Brief Description
Please refer to [this repo](https://github.com/IIFE/CppSharpTest) for a reproducible example. If you build and run the app you'll get the issue faced.

I have a simple class with one constructor that takes a `LPCSTR` (typedef for `const char*`) param, and has a member of the same type.

The member generation is fine, however the constructor generation is incorrect. The constructor is imported as:
`internal static extern global::System.IntPtr ctor(global::System.IntPtr __instance, global::System.IntPtr lpsz);`

With the generated C# equivalent looking like:
```
        public Consumer(string lpsz)
        {
            __Instance = Marshal.AllocHGlobal(sizeof(global::CppSharpTestNative.dll.Consumer.__Internal));
            __ownsNativeInstance = true;
            NativeToManagedMap[__Instance] = this;
            __Internal.ctor((__Instance + __PointerAdjustment), lpsz);
        }
```

The last line is failing because the imported signature is expecting an `IntPtr`, but the generated class is using a `System.String`.

Is there a way to generate the import signature with the correct type, or modify the generated code to correctly convert to and from `LPCSTR`.

The `LPCSTR` member is generated fine with the correct marshaling:
```
        public string MLpsz
        {
            get
            {
                return Marshal.PtrToStringAnsi(((global::CppSharpTestNative.dll.Consumer.__Internal*) __Instance)->m_lpsz);
            }

            set
            {
                ((global::CppSharpTestNative.dll.Consumer.__Internal*)__Instance)->m_lpsz = (global::System.IntPtr) Marshal.StringToHGlobalAnsi(value);
            }
        }
```

The constructor however is not.

Thanks.

OS: Windows


Target: MSVC


Hi

Is it possible to customize the genertation of the `DllImport` lines? For example, rather than:
```
[SuppressUnmanagedCodeSecurity]
[DllImport("Generated", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="<entry point>")]
internal static extern int GetValueForExternalName(global::System.IntPtr name);
```

I wish to have

```
[SuppressUnmanagedCodeSecurity]
[DllImport("Generated", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="<entry point>")]
internal static extern int GetValueForExternalName([MarshalAs(UnmanagedType.LPStr)] string name);
```

Notice that the desired parameter is `[MarshalAs(UnmanagedType.LPStr)] string name` rather than `global::System.IntPtr name`.

Similarly I wish to modify the declared return type. For example rather than:
```
[SuppressUnmanagedCodeSecurity]
[DllImport("Generated", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
EntryPoint="entry point")]
internal static extern void GetCode(global::System.IntPtr __instance, global::System.IntPtr @return);
```

I wish to have:
```
[SuppressUnmanagedCodeSecurity]
[DllImport("Generated", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl, EntryPoint="entry point")]
[return: MarshalAs(UnmanagedType.BStr)]
internal static extern string GetCode(global::System.IntPtr __instance);
```

Again instead of an out IntPtr, the return is marshaled as System.String.

Thanks