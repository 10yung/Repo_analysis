1. Support `immediate` in `runOnceInNextFrame`
2. Export utils/hooks
3. Export utils/nextFrame
4. Export utils/component/event-handler
5. Export utils/component/AnimateHeight
6. Export utils/scroll
- 添加表头吸顶功能
- checkbox禁用状态下支持鼠标hover展示原因
- 一些样式调整

https://github.com/stereobooster/react-ideal-image/blob/master/introduction.md

# Select 组件tags为true 无法限制多选最大个数

## [bug fix] Select：多选标签无法限制最大个数

**Do you want to request a *feature* or report a *bug*?**
bug

**What is the current behavior?**
1. 首先clone整个zent仓库到本地
2. 安装依赖
3.  packages/zent/src/select/demos/tag.md 文件中的 js 部分修改为以下例子
```
import { Select, Button, Notify } from 'zent';

class TagsDemo extends Component {

	state = {
		selected: ["2"],
		data: [
			{ value: '1', text: 'Option 1' },
			{ value: '2', text: 'Option 2' },
			{ value: '3', text: 'Option 3' },
		]
	};

	reset = () => {
		this.setState({
			selected: []
		});
	};

	upgradeData = () => {
		this.setState({
			data: [
				{ value: '1', text: 'Option 1' },
				{ value: '2', text: 'Option 2' },
				{ value: '3', text: 'Option 3' },
				{ value: '4', text: 'Option 4' }
			]
		});
	};

	increaseHandler = (event, item) => {
		this.setState({
			selected: [...this.state.selected]
		});
		Notify.success(<span>{i18n.optionAdded} {item.value}</span>);
	}

	deleteHandler = (item) => {

		// 可以使用效率更高或者更优雅的数组定点删除方法，比如 lodash.remove
		const newSelected = this.state.selected.filter(value => {
			return value !== item.value;
		});
		this.setState({
			selected: newSelected
		});
		Notify.success(<span>{i18n.optionDeleted} {item.value}</span>);
	}

	render() {
		return (
			<div>
				<span>{i18n.external}: {this.state.selected.join(',')}</span>
					<br />
					<br />
				<Select
					data={this.state.data}
					onChange={this.increaseHandler}
					onDelete={this.deleteHandler}
					tags
    			filter={(item, keyword) => item.text.indexOf(keyword) > -1}
					value={this.state.selected} />
				<Button onClick={this.reset}>{i18n.reset}</Button>
				<Button onClick={this.upgradeData}>{i18n.refill}</Button>
			</div>
		);
	}
}

ReactDOM.render(
  <TagsDemo />
  , mountNode
);
```
4.  启动项目
5. 在本地启动的项目中 找到刚刚修改的例子
6. 在下拉框选中 `option 1` 这时，输入框内还是只有 `option 2`。这是对的，因为选择 `option 1`的时候，并没有把选中的`value`更新为 `[option1, option2]`
7. 这个时候点击输入框。预期应该再次出现下拉列表，但是输入框中出现两个`tag`—— `option 1` 和 `option 2`

**What is the expected behavior?**
选中的tags受外部控制

**Which versions of Zent and React, and which browser / OS are affected by this issue? Did this work in previous versions of Zent?**
zent - master

https://github.com/youzan/zent/blob/029794958bed3840c12c0841e9c9bfee1842f18d/packages/zent/src/select/Popup.js#L265

已经是选中某个值的时候，再次点击该值依然会触发 onChange 事件。
配合自动补全结尾符号实现。

例如：

当输入 ${ 时，自动补全 } 并将光标移动到 ${|} 括号中间。这样可以避免对空格的需求。
[DEMO](https://jsfiddle.net/n879nke7/22/)
- [ ] 滚动加载更多选项
- [ ] 多选模式, 事件函数的参数