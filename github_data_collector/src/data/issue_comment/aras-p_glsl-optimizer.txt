In the function ir_print_glsl_visitor::print_precision the following block of code skips writing the default lowp precision when possible:

```
// skip precision for samplers that end up being lowp (default anyway) or undefined;
// except always emit it for shadowmap samplers (some drivers don't implement
// default EXT_shadow_samplers precision) and 3D textures (they always require precision)
if (type && type->is_sampler() && !type->sampler_shadow && !type->sampler_array && !(type->sampler_dimensionality > GLSL_SAMPLER_DIM_2D))
{
	if (prec == glsl_precision_low || prec == glsl_precision_undefined)
		return;
}
```
This wrongly skips writing precision for 2D array textures. The fixed conditional should also check for sampler_array:

`	if (type && type->is_sampler() && !type->sampler_shadow && !type->sampler_array && !(type->sampler_dimensionality > GLSL_SAMPLER_DIM_2D))`


A few allocations made in the constructor were not being freed.
glsl_types::interface_types wasn't being free'd, added cleanup to _mesa_glsl_release_types
Just a feature request to make the build process faster for users of glsl_optimizer
What is the proper way to cross compile the GL_EXT_shader_framebuffer_fetch extension to Metal? I get an extension not supported error if I include: #extension GL_EXT_shader_framebuffer_fetch : enable in the shader. Searching the code I do find [[color(%d)]] in ir_print_metal_visitor.cpp.
This makes it easier to use the library in C or another programming language like Rust which can interface with the C ABI.

instead of approximations

with the recent advent of panorama rendering, it is crucial to have native acos and atan functions emitted into the shader code, because the approximations not always lead to optimal results in edge cases

Hello,
I've struggled for 2 days now trying to build this for Android. I've managed to build the static libs, but linking them to the project is a bloody nightmare. Undefined variables all over the place. Does anyone have any source code I can browse to find the solution?

Thanks

It seems like switch statements don't work, which are supported in GLSL 1.3+.
I think part of the issue is the MESA code which isn't outputting correct instructions, For example `_mesa_print_ir()` outputs instructions like this:

```
(assign (expression bool all_equal (constant int (0)) (var_ref compiler_temp@4) )  (x) (var_ref compiler_temp)  (constant bool (1)) )

(assign (var_ref compiler_temp@2)  (x) (var_ref compiler_temp)  (constant bool (0)) )
```

Which `_mesa_print_ir_glsl()` turns into something like:

```
(0 == b1) tmpvar_1 = bool(1);
tmpvar_2 tmpvar_1 = bool(0);
```

Which of course is invalid code. Any plans to upgrade to the latest MESA? I'm interested in trying to add GLSL 3.30 support to this project.

Thanks

E.g

```
#version 130
uniform int b1;

void main()
{
    switch (b1)
    {
        case 0:
            gl_FragColor = vec4(1.0);
            break;
        case 1:
            gl_FragColor = vec4(1.0);
            break;
    }
}
```

Creates:

```
#version 130
uniform int b1;
void main ()
{
  bool tmpvar_1;
  tmpvar_1 = bool(0);
  bool tmpvar_2;
  tmpvar_2 = bool(0);
  (0 == b1) tmpvar_1 = bool(1);
  tmpvar_2 tmpvar_1 = bool(0);
  if (tmpvar_1) {
    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    tmpvar_2 = bool(1);
  };
  (1 == b1) tmpvar_1 = bool(1);
  tmpvar_2 tmpvar_1 = bool(0);
  if (tmpvar_1) {
    gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);
    tmpvar_2 = bool(1);
  };
}
```

```
duplicate symbol __mesa_error_no_memory in:
    CMakeFiles/glsl_compiler.dir/src/glsl/main.cpp.o
    libglsl_optimizer.a(standalone_scaffolding.cpp.o)
ld: 1 duplicate symbol for architecture x86_64
```

``` sh
$ clang -v
Apple LLVM version 7.0.2 (clang-700.1.81)
Target: x86_64-apple-darwin14.5.0
Thread model: posix
```
