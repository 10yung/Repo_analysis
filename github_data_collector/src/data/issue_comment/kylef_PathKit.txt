Hello.
Thank you for PathKit.
In this pull request I replaced all `internal` `var` with `let` because all such properties are not mutable. To fix compile errors I added new `init` functions.
Thanks for useful library üòÑ 

While investigating performance problem, I found this library converts `Swift.String` into `NSString` and it's very high cost operation.

Why this library uses NSString instead of implementing its own logic?
I added a method which computes the relative path which goes between two paths. I added this downstream to yonaskolb/XcodeGen#524, but since it seems generally useful I figured I'd try to add it back to PathKit. This is similar to [`Pathname#relative_path_from`](https://ruby-doc.org/stdlib-2.1.0/libdoc/pathname/rdoc/Pathname.html#method-i-relative_path_from) in the ruby stdlib and [`PurePath.relative_to`](https://docs.python.org/3.7/library/pathlib.html#pathlib.PurePath.relative_to) in python. Let me know if this is something you'd be interested in adding, and if there's anything I can do to help!

### Declaration

```swift
  /// Returns the relative path necessary to go from `base` to `self`.
  ///
  /// Both paths must be absolute or relative paths.
  /// - throws: Throws an error when the path types do not match, or when `base` has so many parent path components
  ///           that it refers to an unknown parent directory.
  public func relativePath(from base: Path) throws -> Path
```

### Examples

```swift
Path("a/b").relativePath(from: Path("a/c"))       == Path("../b")
Path("/a/b/c/d").relativePath(from: Path("/a/b")) == Path("c/d")
Path("/a/../../b").relativePath(from: Path("/b")) == Path(".")
```

### Changes to `normalize()`

One would expect that a path like "a/../../b" could normalize to "b". Foundation's `standardizingPath` method only removes redundant parent directory references if the path is absolute, so "/a/../../b" normalizes to "/b" but the former case doesn't normalize at all. I realized that PathKit already has logic to remove redundant ".."s in its + operator, so I added a case to `normalize()` that adds up all the path components if the path is relative.

It'd be awesome if you could support a recursive glob, e.g `/some/path/**/*.swift` which would match arbitrary nesting.

Thanks for PathKit, love it ü§òüèº
I am not interested in maintaining this project anymore. I think the problems that I was trying to solve in PathKit should just be solved in the standard library for Swift. Often enough, I think you might just be better off when avoiding the complexity of introducing a dependency for such convience when you can use `FileManager` from Foundation.

If anyone is actively using PathKit, or wants to maintain it then please let me know in these comments.
### tl;dr

[This](https://github.com/kylef/PathKit/issues/50#issuecomment-384150261) is the current support status.

---

There are 4 tests being skipped:

[Here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L363), [here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L384), [here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L418) and [here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L439).

There are 2 tests not being compiled: [here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L197) and [here](https://github.com/kylef/PathKit/blob/870c17f488d8aaa221a657b2b82bbc0d543e6f0e/Tests/PathKitTests/PathKitSpec.swift#L271).

Why is that? What is missing?
How can I help?

Also, maybe what we should have for the 2 tests that are not being compiled is a skip, like for the other 4. That way at least they are being visibly skipped.
## Context
I am using macOS High Sierra v10.13.3. Using with framework xcproj.

## What
So there is this path to an xcodeproj (valid, I checked) and xcproj uses the glob function to find the project.pbxproj in it.
`let pbxprojPaths = path.glob("*.pbxproj")`

This only returns one path (good)
with the url being "/" (bad)
I just added Carthage support to PathKit.
I think the following joining behavior is unnatural.

```
let path = Path("/usr/bin") + Path("/swift") // becomes "/swift" instead of "/usr/bin/swift"
```

Implemented here:
https://github.com/kylef/PathKit/blob/62dca49ee33b16f209b9f2074d109e0a7191ae9e/Sources/PathKit.swift#L668

I think it is common to build paths with, left hand side not ending with "/" and right handing side starting with "/".

Hi, nice framework, it's the best replacement for NSURL in Swift I've seen.

Have you considered splitting Path into DirectoryPath and FilePath? Path has a lot of methods which are only valid for either directories or files, but not both. By separating the functionality into 2 types we can catch more bugs at compile time. Then we could turn Path into a protocol for the functionality that is common to both directories and files.
