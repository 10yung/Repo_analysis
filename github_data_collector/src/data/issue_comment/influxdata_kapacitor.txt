I have a batch node combined with a query node that uses a groupBy. This groupBy groups on runtime-name, so the runtime-name appears in the Tag map. Further, I have two string variables that reference that runtime-name Tag. These are the variables (**See template below**):

var start_summary = ‘[PROBLEM] Start summary text for runtime {{ index .Tags “runtime-name” }}’

var end_summary = ‘[FIXED] End summary text for runtime {{ index .Tags “runtime-name” }}’

I added these variables to the Tag map by using the DefaultNode so I can reference them via a Golang template via the construction with the curly braces.

Then, following the batch node is the deadman function. For the deadman function I use the following message (this message refers to the Tags that were created for the variables):

var message = ‘{{ if eq .Level “CRITICAL” }} {{index .Tags “start_summary”}} {{ else if eq .Level “OK” }} {{index .Tags “end_summary”}} {{ end }}’

The deadman function is used to detect if during a certain period of time data were missing. If for a certain amount of time there was no data, and Level gets the value CRITICAL, I want to see the value of variable start_summary, and when the value of Level changes to OK again, I want to see the value of the variable end_summary.
Lets assume that the name of the involved runtime is ‘system.container’.

When Level gets the value CRITICAL, I want to see:

[PROBLEM] Start summary text for runtime system.container

But what I see is:

[PROBLEM] Start summary text for runtime {{ index .Tags “runtime-name” }}

The runtime-Tag in the curly braces doesn’t get evaluated. The same happens when Level goes from CRITICAL to OK again. Then, I want to see the message:

[FIXED] End summary text for runtime system.container

I get:

[FIXED] End summary text for runtime {{ index .Tags “runtime-name” }}

Is it possible to let the deadman function output a message, depending on values of alert data where the messages are in the Tag map and where the messages themselves reference a Tag? Is it possible to fix that the Tag in those messages gets evaluated? Or is a different approach is needed for letting messages depend on values of alert data? What are the possibilities?

**Template:**

var message = ‘{{ if eq .Level “CRITICAL” }} {{index .Tags “start_summary”}} {{ else if eq .Level “OK” }} {{index .Tags “end_summary”}} {{ end }}’

var dayRestriction lambda
var timeRestriction lambda

var qry = ‘SELECT count(*) FROM "’ + db + ‘"."’ + rp + ‘"."’ + measurement + '" WHERE ’ + whereClause

var data = batch
|query(qry)
.period(period)
.cron(qryCronExpr)
.groupBy(‘environment’, ‘runtime-name’)
|default().tag(‘start_summary’, start_summary)
|default().tag(‘end_summary’, end_summary)

var trigger = data
|deadman(threshold, interval, lambda: dayRestriction AND timeRestriction)
.message(message)
.stateChangesOnly()
.details(’’)
.post(‘http://…’)
We have a very long tick script that is only a single file because we want to share a bunch of variables (like a POST url, the database to query, etc).

One way to solve this is to use env vars, as suggested in #1454 (which is still not supported).

Another way would be to allow an `import` statement of some kind that allows in-lining other tick scripts into a tick file. This would also help with the load directory feature, as then we could also separate tick files for better code separation, but still define a single template-id in the "task templates".  

If using importing, then you need a way for the load directory feature to only load "top-level" tick scripts.  For example, you could then start all library file names with an underscore or change the extension or something like that.
Hi all,

I'm pretty new to tick script and I'm trying to make a window of 30s and emits every 15s.

Here is a my code:
```
var source = stream
    |from()
        .measurement('measurement')
        .where(lambda: isPresent("retxPacketsReceived") AND isPresent("packetsReceived"))
    |groupBy('device')
    |log()
    |window()
        .period(30s)
        .every(10s)

var retxPercentage = source
    |first('retxPacketsReceived')
        .as('firstRetxPacketsReceived')
    |last('retxPacketsReceived')
        .as('lastRetxPacketsReceived')    
    |first('packetsReceived')    
        .as('firstPacketsReceived')        
    |last('packetsReceived')
        .as('lastPacketsReceived')
    |eval(lambda: int("lastRetxPacketsReceived") - int("firstRetxPacketsReceived"))
        .as('retxPercentageValue')
    |log()    
           
 retxPercentage 
    |alert()
        .warn(lambda: "retxPercentageValue" >= RETX_PACKETS_PERCENTAGE_WARN)
        .warnReset(lambda: "retxPercentageValue" < RETX_PACKETS_PERCENTAGE_WARN)
        .message('')
        .id('{{index .Tags "device"}})
        .idTag(idTag)
        .levelTag(levelTag)
        .messageField(messageField)
        .durationField(durationField)
```

Here are the code I insert in Influx:
```
insert measurement,device=101 retxPacketsReceived=100,packetsReceived=100
insert measurement,device=101 retxPacketsReceived=100,packetsReceived=200
insert measurement,device=101 retxPacketsReceived=100,packetsReceived=300
```

The error I see in logs:
```
ts=2020-01-09T21:42:28.535Z lvl=error msg="failed to realize reduce context from fields" service=kapacitor task_master=main task=argo-dev node=last48 err="field \"retxPacketsReceived\" missing from point"
```
If I remove the `last` and only call single time to `first` then I can make it work. It's like calling `first` removes the field from the window or something like that...
Any idea?
In my kapactior config file, I defined a httppost handler named after `wechat`
```
[[httppost]]
  endpoint = "wechat"
  url = "https://qyapi.weixin.qq.com/cgi-bin/webhook/send?key=mykey"
  headers = {Content-Type = "application/json"}
  alert-template = "{{.Message}}"
  row-template = "{{.Message}}"
```

In chronograf, my alram rule was set as below:
![image](https://user-images.githubusercontent.com/7309388/71458102-27aa9300-27dc-11ea-866c-626d2e3f3cef.png)

But in kapacitor, I got this error:
```
ts=2019-12-26T04:36:01.958Z lvl=error msg="failed to POST alert data" service=httppost task=chronograf-v1-2378c0fc-f058-486c-96c6-6052543d2d02 err="Post wechat: unsupported protocol scheme \"\""
```

I have no idea about where the problem is...
fix: Update RPM specific packaging to match RPM naming convention

RPM naming convention says that:
 1. We should use dashes not underscores in the package filename
 2. We should include a package version (iteration) in the package name

This change removes the code which swapped underscores for dashes in the RPM specific code. 
It also moves the code which removes the package_iteration in to an else block and adds an rpm specific work around to not do that.  This was done so that non-rpm builds are not affected by this change.

Fixes: https://github.com/influxdata/feature-requests/issues/95

###### Required for all non-trivial PRs
- [ ] Rebased/mergable
- [ ] Tests pass
- [ ] CHANGELOG.md updated
- [ ] Sign [CLA](https://influxdata.com/community/cla/) (if not already signed)




Hello everybody,
I'm trying to create an MQTT alert on kapacitor writing to a queue on RabbitMQ. I configured kapacitor.config like this:

[[mqtt]]
  enabled = true
  name = "localhost"
  default = true
  url = "tcp://localhost:1883"

[[mqtt]]
  enabled = true
  name = "alerts-broker"
  default = false
  url = "ssl://123.45.67.89:1883"
  ssl-ca = "/etc/kapacitor/ca.pem"
  ssl-cert = "/etc/kapacitor/cert.pem"
  ssl-key = "/etc/kapacitor/key.pem"
  client-id = "alerts-broker"
  username = "mqadmin"
  password = "mqadminpassword"

and a tickScript like this:
stream
    |from()
        .measurement('cpu')
    |alert()
        .crit(lambda: "usage_idle" < 45)
        .message('Tom Test OK')
        .topic('cpu')

But it doesn't work. Can you help me?

Tommaso
Hi 
when i test kapacitor with influx i can see a bad datetime it's while late by 1 hour it is 16h55 and it's request the DB for 15h55

Thanks you for the help
```
 kapacitor watch atick
ts=2019-11-13T16:51:09.397+01:00 lvl=debug msg="starting next batch query" service=kapacitor task_master=main task=atick node=influxdb_out3 query="SELECT last(value) AS last FROM example.autogen.load WHERE time >= '2019-11-13T14:51:09.3960963Z' AND time < '2019-11-13T15:51:09.3960963Z'"
```
(yes the name of script is a.tick and atick 🥇)


python script test : 
```py
from influxdb import InfluxDBClient
from datetime import datetime
import time

client = InfluxDBClient('localhost', 8086, 'root', 'root', 'example')
client.create_database('example')

X = 0.0
while True :
    time.sleep(5)
    now = datetime.now()
    print("{} valeur: {}".format(now, X))
    json_body = [
        {
            "measurement": "load",
            "tags": {
                "host": "server01",
                "region": "us-west"
            },
            "time": now,
            "fields": {
                "value": X
            }
        }
    ]
    X += 0.1
    if X>1:
        X = 0.0
    client.write_points(json_body)

```

the tickScript : 
```


// Get batch data
var views = batch
    |query('SELECT last(value) as last FROM "example"."autogen".load')
        .period(1h)
        .every(5s)


// Join errors and views
views
    // Calculate percentage
    |eval(lambda: "last" > 0.5 )
        // Give the resulting field a name
        .as('value')

    |influxDBOut()
        .database('example')
        .measurement('alert')
        .retentionPolicy('autogen')
```


result in influx : 
```
> select last(*) from alert
name: alert
time                           last_value  
----                           ----------  
2019-11-13T15:53:48.765645056Z false       
> SELECT last(*) FROM example.autogen.load 
name: load                                 
time                           last_value  
----                           ----------  
2019-11-13T16:54:00.598865152Z 0     

```

the kapacitor config is "kapacitord config > kapacitor.conf" without change
i'm french 
kapacitor version is 1.5.3 
influx version is 1.7.8
Adding a Webex Teams Alertnode (https://developer.webex.com/). 

Tests were ran via
```bash
$ go test -v $(go list ./... | grep -v /vendor/)
```
Two failures did occur at the following tests...
```bash
--- FAIL: TestServer_UDFStreamAgents (0.95s)
    server_test.go:5341: open service *udf.Service: failed to load process info for "movingAvg": exec: "python2": executable file not found in $PATH
```
and
```bash
2019/11/08 14:02:45 Agent for connection 1 finished
--- FAIL: TestServer_UDFStreamAgentsSocket (333.39s)
    server_test.go:5520: open service *udf.Service: failed to load process info for "mirror": dial unix /var/folders/sw/nz0vtk5n1m312x9v2x401fn00000gn/T/kapacitor_server_test233099002/mirror.py.sock: connect: no such file or directory
2019/11/08 14:08:18 Server stopped
```


###### Required for all non-trivial PRs
- [ ] Rebased/mergable
- [ ] Tests pass
- [ ] CHANGELOG.md updated
- [ ] Sign [CLA](https://influxdata.com/community/cla/) (if not already signed)

###### Required only if applicable
_You can erase any checkboxes below this note if they are not applicable to your Pull Request._
- [ ] [TICKscript Spec](https://github.com/influxdata/kapacitor/blob/master/tick/TICKscript.md) updated

Hi Team,

We are using kapacitor-1.5.3-1.x86_64 and chronograf-1.7.14-1.x86_64 and influxdb-1.7.6-1.x86_64.

Kapacitor and Chronograf are running on one server and InfluxDB is running on another server.
I can see all Tables and other details on Chronograf under "Build Alert Rule" but unable to generate Alert. 

I have added InfluxDB server IP in kapacitor config file.

Please help to know, why no alert is generating through kapacitor ?

is there any configuration required because InfluxDB is running in another server.
Hi,
I have below installed to my window OS:
InfluxDB v1.7, Telegraf v1.12 and Kapacitor v1.5

###kapacitor list tasks###
ID             Type      Status    Executing Databases and Retention Policies
slack_alert    stream    enabled   true      ["mydb"."autogen"]
telegram_alert stream    enabled   true      ["mydb"."autogen"]

###kapacitor service-tests slack telegram###
Service             Success   Message
slack               false     service is not enabled
telegram            false     service is not enabled





###kapacitord error log###
ts=2019-11-08T15:51:40.004+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.004+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:40.013+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=telegram_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu10 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 98.59375 0 0 0 0 0 0 1.40625]]}"
ts=2019-11-08T15:51:40.014+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.020+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=slack_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[host:DESKTOP-DJBDJUU cpu:cpu10 dc:denver-1] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 98.59375 0 0 0 0 0 0 1.40625]]}"
ts=2019-11-08T15:51:40.020+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:40.027+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=telegram_alert node=alert2 level=CRITICAL id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu9 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 20.307692307692307 0 1.5384615384615385 0 0 0 30.307692307692307 47.84615384615385]]}"
ts=2019-11-08T15:51:40.027+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.034+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=slack_alert node=alert2 level=WARNING id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu9 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 20.307692307692307 0 1.5384615384615385 0 0 0 30.307692307692307 47.84615384615385]]}"
ts=2019-11-08T15:51:40.034+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:40.040+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=telegram_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu8 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 97.8125 0 0 0 0 0 0.9375 1.25]]}"
ts=2019-11-08T15:51:40.041+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.048+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=slack_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu8 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 97.8125 0 0 0 0 0 0.9375 1.25]]}"
ts=2019-11-08T15:51:40.048+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:40.054+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=telegram_alert node=alert2 level=CRITICAL id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu2 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 32.5 0 0 0 0 0 14.53125 52.96875]]}"
ts=2019-11-08T15:51:40.054+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.060+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=slack_alert node=alert2 level=WARNING id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu2 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 32.5 0 0 0 0 0 14.53125 52.96875]]}"
ts=2019-11-08T15:51:40.061+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:40.067+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=telegram_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[dc:denver-1 host:DESKTOP-DJBDJUU cpu:cpu1] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 86.40625 0 0 0 0 0 6.875 6.71875]]}"
ts=2019-11-08T15:51:40.068+09:00 lvl=error msg="failed to send event to Telegram" service=telegram task=telegram_alert err="service is not enabled"
ts=2019-11-08T15:51:40.074+09:00 lvl=debug msg="alert triggered" service=kapacitor task_master=main task=slack_alert node=alert2 level=OK id=cpu:nil event_message="Hey, check your CPU" data="&{cpu map[cpu:cpu1 dc:denver-1 host:DESKTOP-DJBDJUU] [time usage_guest usage_guest_nice usage_idle usage_iowait usage_irq usage_nice usage_softirq usage_steal usage_system usage_user] [[2019-11-08 06:51:40 +0000 UTC 0 0 86.40625 0 0 0 0 0 6.875 6.71875]]}"
ts=2019-11-08T15:51:40.075+09:00 lvl=error msg="failed to send event" service=slack task=slack_alert err="service is not enabled"
ts=2019-11-08T15:51:42.526+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:51:42.5253964+09:00 method=POST uri=/write?consistency=&db=_internal&precision=ns&rp=monitor protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=38d37e4c-01f4-11ea-8005-000000000000 duration=971.1µs
ts=2019-11-08T15:51:43.285+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:51:43.2853367+09:00 method=GET uri=/kapacitor/v1/tasks?dot-view=attributes&fields=type&fields=status&fields=executing&fields=dbrps&limit=100&offset=0&pattern=&replay-id=&script-format=formatted protocol=HTTP/1.1 status=200 referer=- user-agent=KapacitorClient request-id=39477377-01f4-11ea-8006-000000000000 duration=0s
ts=2019-11-08T15:51:50.003+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:51:50.0033642+09:00 method=POST uri=/write?consistency=&db=mydb&precision=ns&rp=autogen protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=3d488a6a-01f4-11ea-8007-000000000000 duration=0s
ts=2019-11-08T15:51:52.525+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:51:52.5256157+09:00 method=POST uri=/write?consistency=&db=_internal&precision=ns&rp=monitor protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=3ec967dd-01f4-11ea-8008-000000000000 duration=0s
ts=2019-11-08T15:52:02.524+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:52:02.5244073+09:00 method=POST uri=/write?consistency=&db=_internal&precision=ns&rp=monitor protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=44bf19a9-01f4-11ea-8009-000000000000 duration=0s
ts=2019-11-08T15:52:10.003+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:52:10.0034802+09:00 method=POST uri=/write?consistency=&db=mydb&precision=ns&rp=autogen protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=493450f2-01f4-11ea-800a-000000000000 duration=0s
ts=2019-11-08T15:52:12.525+09:00 lvl=info msg="http request" service=http host=::1 username=- start=2019-11-08T15:52:12.5256881+09:00 method=POST uri=/write?consistency=&db=_internal&precision=ns&rp=monitor protocol=HTTP/1.1 status=204 referer=- user-agent=InfluxDBClient request-id=4ab52cb1-01f4-11ea-800b-000000000000 duration=0s
ts=2019-11-08T15:52:17.112+09:00 lvl=debug msg="linking subscription for cluster" service=influxdb cluster=default cluster=default


###kapacitor. conf###
[[slack]]
  enabled = true
  default = true
  workspace = "....."
  url = "......"
  channel = "#....."
  username = "....."
  global = false
  state-changes-only = false

[telegram]
  enabled = true
  url = "https://api.telegram.org/bot"
  token = "....."
  chat-id = "....."
  disable-web-page-preview = false
  disable-notification = false
  global = true
  state-changes-only = false



###tick file###
dbrp "..."."..."

stream
  |from()
    .measurement('cpu')
  |alert()
    .warn(lambda: "usage_idle" < 50)
    .stateChangesOnly()
    .message('Hey, check your CPU')
    .slack()   
or
    .telegram()  



how to enable kapacitor slack or telegram service?