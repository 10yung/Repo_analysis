Currently there's a number of issues related to websockets - specifically:

- [Add documentation for `hs.http.websocket`](https://github.com/Hammerspoon/hammerspoon/issues/2228)
- [`hs.http.websocket` crashes hammerspoon if send is called too soon](https://github.com/Hammerspoon/hammerspoon/issues/2230)
- [`hs.http.websocket` needs onopen and onclose callbacks](https://github.com/Hammerspoon/hammerspoon/issues/2229)
- [How to use websocket schemes `ws://` or `wss://`](https://github.com/Hammerspoon/hammerspoon/issues/2056)

Given that `hs.http.websocket` is currently undocumented (at least until #2293 lands), this is probably a good time to review the websocket functionality and see if it can be improved.

As discussed in #2292, my attempts to use `hs.http.websocket` have been fairly unsuccessful, as I keep running into this error:

```lua
2020-01-17 02:00:48: 02:00:48    LuaSkin: (secondary thread): hs.http.webSocket: didFail: Error Domain=PSWebSocketErrorDomain Code=3 "Output stream end encountered" UserInfo={NSLocalizedDescription=Output stream end encountered}
```

...which seems to be a bug/issue in the [PocketSocket](https://github.com/zwopple/PocketSocket/issues/57) Framework.

[PocketSocket](https://github.com/zwopple/PocketSocket) hasn't been updated since 14 Aug 2017, so I wonder if it's worthwhile creating a new `hs.websocket` extension that replaces `hs.http.websocket`, and potentially uses a more recently updated websocket framework?

[SocketRocket](https://github.com/facebook/SocketRocket) seems like a popular alternative, but it also hasn't been updated since 29 Apr 2018, and currently has a whole heap of pull requests awaiting review.

[Jetfire](https://github.com/acmacalister/jetfire) also seems popular, but again hasn't been updated since 12 Aug 2017. However, interestingly sonos [forked it](https://github.com/sonos/jetfire) on 20 Oct 2018.

The [Pusher Channels websocket client](https://github.com/pusher/pusher-websocket-swift) looks like it's actively developed and also works with Objective-C and macOS - so this is something we could potentially fork and modify? This probably falls into the too-hard basket though.

Another idea I had was to do the websocket work in NodeJS and use something like [NodObjC](https://github.com/TooTallNate/NodObjC) as a bridge, but again that probably complicates things a bit too much.

Long story short... my main focus for now is trying to "convert" this [Loupedeck CT Node.js module](https://github.com/bitfocus/loupedeck-ct), into something I can use in Hammerspoon, and currently my attempts using `hs.http.websocket` have failed (whilst it all works great in NodeJS-land), so I'd love to come up with a solution.

Based on some existing open issues, it seems websockets are important to quite a few users in the Hammerspoon community, so very much open to ideas and suggestions.

Thoughts @asmagill @jeffmikels @Robert-M-Muench @seanfarley ?
```
hs.eventtap.event.newKeyEvent('_', true):post()
hs.eventtap.event.newKeyEvent(94, true):post()
```
I'm trying to write a automation script with the marvelous hammerspoon for the first time.
I found that I cann't fire an underscore key event, namely the _ char, and the virtual code didn't work either.  I cann't find it in  hs.keycodes.map or anywhere else.  Other characters like hyphen - and arrow key **left** work. By the way, I intend to add the underscore as prefix for the name field of the SAVE AS modal dialog of PHOTOSHOP.

Source code: https://gist.github.com/BigSully/4eb3bf7e4a989d678fca9fdb69c5e93e

- `hs.http.websocket` has been removed and replaced with `hs.websocket` which uses SocketRocket instead of PocketSocket.
- Closes #2229
- Closes #2056
- Closes #2230
- Closes #2228
Similar to `hs.streamdeck`, I'd like to add native support for the [Loupedeck CT](https://loupedeck.com/en/products/loupedeck-ct) in Hammerspoon.

It seems this team has already done some awesome reverse engineering work here:

https://github.com/bitfocus/loupedeck-ct

It uses websockets, so I'm hoping to make use of the currently undocumented `hs.http.websocket`.

There's quite a few issues open regarding websockets, so I'm hoping I can close up a few of them at the same time.
Hello everyone,

Ever since I first started using HS, I’ve been using `hs.application.watcher` to respond to app events and specifically to enter an app’s associated `hs.hotkey.modal` object when it gains focus, and exit that modal when it loses focus.

Naturally, I want an app’s modal to be active only when that app is truly the focused object.  Many times however, the focus is taken by windows belonging to other apps. Those are mainly “helper” windows, input bars or other components (usually accompanying the main app)  — think 1Password 7 mini, the Emoji & Symbols window, Spotlight’s search bar.

Those windows are never detected by `hs.application.watcher`, and this conflicts with the keybindings I set for the previously active app. Instead of sending the keypresses to the app that's truly focused (or simply exiting the modal), HS still sends those to the keybinding’s target app, as in the configuration. And this usually does nothing since the target app doesn’t have the focus.

This leads me to having to check if the active app (as `hs.application.watcher` sees it) is indeed the active up — I do that by calling what I regard as the source of truth in this case —  `hs.window.focusedWindow:application()`, and comparing the results. I have to do that for almost every `hs.hotkey` I bind so the code can become extremely verbose.

`hs.window` is insanely powerful — it detects even negligible windows (like the aforementioned Emoji & Symbols one) and never fails me when detecting the truly focused app.

So, I was wondering are there any downsides to using `hs.window.filter` to responds to app events instead of `hs.application.watcher`? (performance and/or stability wise).

Thanks!

I am trying to assign a shortcut to focus one of my menu done in Hammerspoon. The only way I found on how to do that is with Applescript

`tell application "System Events" to tell process "Hammerspoon" to tell menu bar item 1 of menu bar 2 to click`

this works, but when calling this from Hammerspoon

`hs.osascript.applescript("tell application \"System Events\" to tell process \"Hammerspoon\" to tell menu bar item 1 of menu bar 2 to click")`  

I get an index error:  

`{
  NSLocalizedDescription = 'System Events got an error: Can\\U2019t get menu bar 2 of process \\"Hammerspoon\\". Invalid index.',
  NSLocalizedFailureReason = 'Can\\U2019t get menu bar 2 of process \\"Hammerspoon\\". Invalid index.',
  OSAScriptErrorAppAddressKey = '<NSAppleEventDescriptor: [0x0,93093 \\"System Events\\"]>',
  OSAScriptErrorAppNameKey = "System Events",
  OSAScriptErrorBriefMessageKey = 'Can\\U2019t get menu bar 2 of process \\"Hammerspoon\\". Invalid index.',
  OSAScriptErrorMessageKey = 'System Events got an error: Can\\U2019t get menu bar 2 of process \\"Hammerspoon\\". Invalid index.',
  OSAScriptErrorNumberKey = -1719,
  OSAScriptErrorOffendingObjectKey = "<NSAppleEventDescriptor: 'obj '{ 'form':'indx', 'want':'mbar', 'seld':2, 'from':'obj '{ 'form':'name', 'want':'prcs', 'seld':'utxt'(\\\"Hammerspoon\\\"), 'from':null() } }>",
  OSAScriptErrorRangeKey = "NSRange: {142, 5}"
}`

I also tried call from file `hs.osascript.applescriptFromFile`but I got the same error.

btw I am an absolute newb in applescript so maybe I am missing something

I've encountered the performance problem seems like those in #233 and #908.

```text
> hs.window._timed_allWindows()
took 6.00s for com.microsoft.VSCode
```

Please consider adding `com.microsoft.VSCode` to `SKIP_APPS`  in `extensions/window/init.lua`.

https://github.com/Hammerspoon/hammerspoon/blob/d50e2c955cdc9d55f9a4cfcccebca0c3d9d57d59/extensions/window/init.lua#L80-L83

Add item:

```text
['com.microsoft.VSCode']=true
```
I am loving hammerspoon, but could not yet figure out a way to maximize a window when I drag it to the top edge of my screen. I am simply looking for actions that trigger when a window touches or "is being pushed" against an edge of the screen.

I want to replicate the resizing options that windows or other programs for mac offer. Dragging window to the top: maximize. Dragging to the right: right half. Dragging to the left: left half.

Any idea how I can get these events?
I created 2 windows on 2 spaces, when I use 

`  local wins = hs.window.filter.new(false):setAppFilter('Google Chrome',{}):getWindows()`

can only get the current space windows.

how can I get all windows in all space?
My script enables it so that when I press <kbd>CAPSLOCK</kbd>+<kbd>→</kbd>, it converts and sends <kbd>⌘</kbd><kbd>⌃</kbd><kbd>⇧</kbd><kbd>⌥</kbd>+<kbd>→</kbd>. This works well for all key characters *except* for the arrow keys where the key event doesn't appear to be triggering. For example, pressing:

- <kbd>CAPSLOCK</kbd>+<kbd>v</kbd> properly sends <kbd>⌘</kbd><kbd>⌃</kbd><kbd>⇧</kbd><kbd>⌥</kbd>+<kbd>v</kbd>
- <kbd>CAPSLOCK</kbd>+<kbd>→</kbd> doesn't properly send <kbd>⌘</kbd><kbd>⌃</kbd><kbd>⇧</kbd><kbd>⌥</kbd>+<kbd>→</kbd>

Is there something different I need to do in order to trigger arrow keys?

Here's the script (please excuse the other stuff but I thought I'd include everything in case there's something I'm not doing correctly). The part that's relevant is the "Passthrough" section. Note: this also relies on Karabiner Elements which sets it up so that pressing <kbd>CAPSLOCK</kbd> sends the virtual key <kbd>F18</kbd>. 

```lua
-- A global variable for the Hyper Mode
k = hs.hotkey.modal.new({}, "F17")
hyper = {'cmd', 'ctrl', 'shift', 'alt'}

-- Enter Hyper Mode when F18 (Hyper/Capslock) is pressed
pressedF18 = function()
  k.triggered = false
  k.modifier = false
  k:enter()

  trigger_modifier = function()
    k.modifier = true
  end

  -- Only trigger as modifier if held longer than thisj
  hs.timer.doAfter(0.25, trigger_modifier)
  -- hs.alert.show('in')
end

-- https://github.com/Hammerspoon/hammerspoon/issues/1011#issuecomment-261114434
-- Necessary to define a new function to get faster key strokes for repeating
fastKeyStroke = function(modifiers, key)
  local event = require("hs.eventtap").event
  event.newKeyEvent(modifiers, string.lower(key), true):post()
  event.newKeyEvent(modifiers, string.lower(key), false):post()

  k.triggered = true
end

-- Passthrough
passthrough_definitions = {
  -- 1Password
  {hyper, '1'},

  -- Alfred
  {hyper, 'v'},

  -- Fantastical
  {hyper, 'c'},

  -- macOS Sidebar
  {hyper, '\\'},

  -- Mate Translate
  {hyper, 't'},

  -- Moom
  {hyper, 'up'},
  {hyper, 'right'},
  {hyper, 'down'},
  {hyper, 'left'},
  {hyper, '='},
  {hyper, 'tab'},
  {hyper, '9'},
  {hyper, '0'},
}

for i, definition in pairs(passthrough_definitions) do
  -- Note that Lua copies by reference so assigning variable doesn't work
  -- modifier is definition[1]
  -- key is definition[2]

  passthrough = function()
    print('Triggering passthrough: hyper + ' .. definition[2])

    fastKeyStroke(definition[1], definition[2])
    -- k.triggered = true
  end

  -- Uncomment line below when binding new
  k:bind({}, definition[2], passthrough, nil, nil)
end

-- Applications
apps = {
  {'a', 'Anki'},
  {'w', 'Bear'},
  {';', 'Discord'},
  {'e', 'Evernote'},
  {'f', 'Finder'},
  {'r', 'Google Chrome'},
  {'/', 'Intercom'},
  {'n', 'iTerm2'},
  {'i', 'Polymail'},
  {'u', 'Slack'},
  {'b', 'Firefox'},
  {'p', 'Spotify'},
  {'m', 'Sublime Text'},
  {'g', 'Telegram'},
  {'o', 'Todoist'},
  {'y', 'WhatsApp'},
}

for i, app in ipairs(apps) do
  launchApplication = function()
    hs.application.launchOrFocus(app[2])
    k.triggered = true
  end

  k:bind({}, app[1], launchApplication, nil, nil)
end

-- function onAppLaunched(appName, eventType, app)
--   if eventType == hs.application.watcher.launched then
--     if appName == 'Firefox' then
--       browser = 'Firefox'
--       safariPid = app:pid()

--       print("Firefox launched, setting browser to Firefox with PID " .. safariPid)
--     end
--   elseif eventType == hs.application.watcher.terminated then
--     if app:pid() == safariPid then
--       browser = 'Google Chrome'
--       safariPid = nil

--       print("Application with PID " .. safariPid .. " matching Safari terminated, setting browser to Google Chrome")
--     end
--   end
-- end

-- Open specific browser depending on what's open
-- appWatcher = hs.application.watcher.new(onAppLaunched)
-- appWatcher:start()

-- Arrow keys
hs.fnutils.each({
  { modifiers={}, key='h', direction='Left' },
  { modifiers={'shift'}, key='h', direction='Left' },
  { modifiers={'cmd'}, key='h', direction='Left' },
  { modifiers={'shift', 'cmd'}, key='h', direction='Left' },
  { modifiers={}, key='j', direction='Down' },
  { modifiers={'shift'}, key='j', direction='Down' },
  { modifiers={'cmd'}, key='j', direction='Down' },
  { modifiers={'shift', 'cmd'}, key='j', direction='Down' },
  { modifiers={}, key='k', direction='Up' },
  { modifiers={'shift'}, key='k', direction='Up' },
  { modifiers={'cmd'}, key='k', direction='Up' },
  { modifiers={'shift', 'cmd'}, key='k', direction='Up' },
  { modifiers={}, key='l', direction='Right' },
  { modifiers={'shift'}, key='l', direction='Right' },
  { modifiers={'cmd'}, key='l', direction='Right' },
  { modifiers={'shift', 'cmd'}, key='l', direction='Right' }
}, function(config)
  k:bind(config.modifiers, config.key,
    function() fastKeyStroke(config.modifiers, config.direction) end,
    nil,
    function() fastKeyStroke(config.modifiers, config.direction) end
  )
end)

-- k:bind({'shift'}, 'k', function() fastKeyStroke({'shift'}, 'Up') end, fastKeyStroke({'shift'}, 'Up'), nil)
-- Leave Hyper Mode when F18 (Hyper/Capslock) is pressed,
--   send ESCAPE if no other keys are pressed.
releasedF18 = function()
  k:exit()

  if not k.triggered then
    -- If hotkey held longer than this amount of time
    -- let it remain as modifier and don't send ESCAPE
    if not k.modifier then
      hs.eventtap.keyStroke({}, 'ESCAPE')
    else
      print("Modifier detected")
    end
  end
end

-- Bind the Hyper key
hs.hotkey.bind({}, 'F18', pressedF18, releasedF18)

-- Bind so that modifiers can be pressed first before Hyper
-- key for combinations
hs.hotkey.bind({'shift'}, 'F18', pressedF18, releasedF18)
hs.hotkey.bind({'cmd'}, 'F18', pressedF18, releasedF18)

-- Reload config when any lua file in config directory changes
function reloadConfig(files)
    doReload = false
    for _,file in pairs(files) do
        if file:sub(-4) == '.lua' then
            doReload = true
        end
    end
    if doReload then
        hs.reload()
        print('reloaded')
    end
end
local myWatcher = hs.pathwatcher.new(os.getenv('HOME') .. '/.hammerspoon/', reloadConfig):start()
```

Thanks for the great tool!