I have a sticky header which receives a class as soon as the user scrolls past another element.

On safari and iOS it is so jumpy and jittery its unusable.
I read that position: sticky and the waypoint's plugin don't go well together, so I separated them that the sticky wrapper doesn't act as a waypoint listener.

html:
```
<div class="siteNavi"> 
  <div class="triggerWrapper"> 
      <div class="layoutHolder"> 
        <!-- The navigation links  -->
    </div>
  </div>
</div>

<div class="content">
    <!-- All content of the website.
     If I scroll past here, waypoints.js adds a class to the triggerWrapper -->
</div>
```

My js code:

```
if ($(".siteNavi").length) {
    var nailElement = 'content';
    var triggerElement = 'triggerWrapper';
    var waypoint = new Waypoint({
        element: document.getElementsByClassName(nailElement),
        handler: function (direction) {
            if (direction === "down") {
                $("." + triggerElement).addClass("triggered");
            }
            if (direction === "up") {
                $("." + triggerElement).removeClass("triggered");
            }
            console.log("Basic waypoint triggered" + "Direction: " + direction);
        },
        offset: 0
    });
}
```

css

```
.content {
    position: relative;
}
.siteNavi {
    position: sticky;
    position: -webkit-sticky;
    backface-visibility: hidden;
    -webkit-backface-visibility: hidden;
    top: 0;
    width: 100%;
    height: 50px;
    background-color: #27292b;
    z-index: 1000;
}
```

Can I optimize this in any way? The class `.triggered` is added  to `.triggerWrapper` which has no css directives, so I think `position:sticky` is out of the equation, no?
Thanks, Caleb, for putting this library together, it's really great.

How can I programmatically scroll to a waypoint?  I'm highlighting the text in the middle of the screen

```javascript
$('.waypoint').each(function(index, element) {
    const waypoint = new Waypoint({
        element: element,
        offset: '50%', 
        handler: (e) => {
            let $el = $(this);
            let text = $el.first();
            $('.expand').removeClass('expand');

            // get the text span (dialogue) element
            let $dialogElement = $el.find('.dialogue-text').addClass('expand');
        });
});
```

I've been trying to use the jquery-scrollto plugin, but running into issues with webpack, so figured I'd ask here just in case there's an easy way to do it.  You've obviously done a lot of work with the scrolling and positioning events.

Thanks.


Or how to pass script overload from 9000ms to 1000ms in Script Evaluation at lighthouse! 

I was faced with very low lighthouse ratings mainly because of waypoints script.
My application runs close to 20 waitpoints on one page.

The way that waypoint is coded does not help any application to be responsible with lot of waypoint.

Here is the main problem. waypoint can not know when the page has finished loading all the waypoints of the current page, so each time it calculates the value of a waypoint it displays and recalculates and redisplay all previous waypoints already calculated.

here the result of the process...
calcul(n waypoint)=calcul(0..(n-1)waypoint) +calcul(n waypoint)

```
Context.prototype.add = function (waypoint) {
	var axis = waypoint.options.horizontal ? 'horizontal' : 'vertical'
	this.waypoints[axis][waypoint.key] = waypoint
       this.refresh() ///-< refresh for one and all previous waypoint added ðŸ‘Ž 
}

```
my solution for now is to comment  this.refresh() in add.

```
Context.prototype.add = function (waypoint) {
	var axis = waypoint.options.horizontal ? 'horizontal' : 'vertical'
	this.waypoints[axis][waypoint.key] = waypoint
       //this.refresh() ///no more refresh in added waypoint
}

```

and trigger manually Waypoint.refreshAll() to calculate all waypoint points stored in memory.

Because the developper know better than a script where the refresh should to be start it's important to put that in a manual form

As well i removed horizontal axis so.. i could again divide the computation by 2 (not a lot of application need to watch horizontal scroll)
The best will be to add an "manual option" and add an option 'strict' to avoid horizontal computation.
As well store the innerwidth outerwidth element in memory avoid some reflowding (to be refreshed in resize)

Yeah this script seems to be not maintained this is shame because lot of wordpress theme and jQuery stuff use it.. I think better to pass to other one if this is not resolved.. or make some hack like me. (i'm lazy to change my code for IntersectionObserver by example)

Use case:
I use isotopescript coupled to waypoint:
here all element isotope are computed in a loop, only one call to refresh display them
```

_each(items, function (val) {
				var elInner = $(val).children('.t-inside'); 
				if (elInner.hasClass('animate_when_almost_visible') && !elInner.hasClass('force-anim')) {
					new Waypoint({
						element: val,
						handler: function () {
							var element = $(this.element).children('.t-inside'), 
								currentIndex = parent.index();
                                                         element.show();
							this.destroy();
						},
						offset: '100%'
					})
				}
				index++;
			});

Waypoint.refreshAll();

```






This is likely a user error, but I am trying to prevent the direction up/direction down from triggering unless it's 20% from the top of the page, NOT the default which is the top of the window.

The reason for this is because if someone refreshes the page, the animation runs again and overlaps content. 

I have the issue documented here: https://stackoverflow.com/questions/56189635/is-there-a-way-to-in-waypoints-to-say-offset-from-actual-website-top-vs-the-curr/56238385#56238385 

However, nobody seems to know the answer to this and I'm not sure where else to look.

Thank you if you have any insight!
Currently if I scroll through my site, waypoints appears to be working correctly, but if I scroll up and down too much features that are meant to fade out stay visible.

I'm sure there is a more concise way of doing this, but here is my code so far: 

`		var inviewOne = new Waypoint.Inview({
			  element: $('#one'),
			  enter: function(direction) {
			  	if(direction === 'down'){
			  		$("#messageOne").fadeIn(InSpeed);
			  	} else {
			  		$("#messageOne").fadeOut(2);
			  	}
			  },
			  entered: function() {
			    
			  },
			  exit: function(direction) {
			  	if(direction ==='down'){
			  		$("#messageOne").fadeOut(OutSpeed);
			  	} else {
			  		$("#messageOne").fadeIn(UpSpeed);
			  	}
			    
			  },
			  exited: function(direction) {
			    if (direction === 'down'){

			   	} else {
			   		$("#messageOne").fadeOut(UpSpeed);
			   	}
			  }
			})

		var inviewTwo = new Waypoint.Inview({
			  element: $('#two')[0],
			  enter: function(direction) {
			  	if(direction === 'down'){
			  		$("#messageTwo").fadeIn(InSpeed);
			   		$("#map1").fadeIn(InSpeed)
			   } else {
			   		$("#messageTwo").fadeOut(OutSpeed);
			   		$("#map1").fadeOut(OutSpeed)
			   }
			   	
			  }, 
			  entered: function() {
			    
			  },
			  exit: function(direction) {
			  	if (direction === 'down'){
			  		$("#messageTwo").fadeOut(OutSpeed);
			  	} else {
			  		$("#messageTwo").fadeIn(InSpeed);
			  	}
			    
			  },
			  exited: function(direction) {
			    if (direction === 'down'){

			   	} else {
			   		$("#messageTwo").fadeOut(OutSpeed);
			   		$("#map1").fadeOut(OutSpeed);
			   	}
			  }
			})

		var inviewThree = new Waypoint.Inview({
			  element: $('#three')[0],
			  enter: function(direction) {
			  	if (direction === 'down'){
			  		$("#messageThree").fadeIn(InSpeed);
			   		$("#map1").fadeOut(OutSpeed)
			    	$("#map2").fadeIn(InSpeed)
			  	} else {
			  		$("#messageThree").fadeOut(OutSpeed);
			   		$("#map1").fadeIn(InSpeed)
			    	$("#map2").fadeOut(OutSpeed)
			  	}
			   	
			  }, 
			  entered: function() {
			    
			  },
			  exit: function(direction) {
			  	if (direction === 'down'){
			  		$("#messageThree").fadeOut(OutSpeed);
			  	} else {
			  		$("#messageThree").fadeIn(InSpeed);
			  	}
			    
			  },
			  exited: function(direction) {
			   if (direction === 'down'){

			   	} else {
			   		$("#messageThree").fadeOut(OutSpeed);
			   	}
			  }
			})

		var inviewFour = new Waypoint.Inview({
			  element: $('#four')[0],
			  enter: function(direction) {
			  	if(direction ==="down"){
				   	$("#messageFour").fadeIn(InSpeed);
				   	$("#map2").fadeOut(OutSpeed)
			  	} else {
			    	$("#messageFour").fadeOut(OutSpeed);
				   	$("#map2").fadeIn(InSpeed)
			    }
			  },
			  entered: function() {
			    
			  },
			  exit: function(direction) {
			  	if(direction ==="down"){
			    	$("#messageFour").fadeOut(OutSpeed);
			    	} else {
			    	$("#messageFour").fadeIn(InSpeed);
			    } else {
			    	$("#map2").fadeOut(OutSpeed)
			    }
			  },
			  exited: function(direction) {
			   	if (direction === 'down'){

			   	} else {
			   		$("#messageFour").fadeOut(OutSpeed);
			   	}
			  }
			})
`
Failed to download imakewebthings/waypoints from dist: The "https://api.github.com/repos/imakewebthings/waypoints/zipball/releases/tag/4.0.1" file could not be downloaded (HTTP/1.1 302 Found)
    Now trying to download from source
  - Installing imakewebthings/waypoints (4.0.1): Cloning releases/tag/4.0.1
    releases/tag/4.0.1 is gone (history was rewritten?)
Check out my page: www.picturepunches.com

I load waypoint once the page is loaded and every time the user reach to the bottom.
I want waypoint to excute once everytime it reaches a point. But the problem is that it execute twice once new content in loaded via ajax.

Can anyone help?
When using waypoints in combination with internal anchors like `<a href="#my_anchor">` the anchor link is not scolling to the correct point of the `<a name="my_anchor">`

But if you scroll through the whole document first and trigger all waypoint elements then the anchor links works as expected and scrolls to `<a name="my_anchor">`..

Somehow the height of waypoint elements doesn't have the correct height before they are triggered

```
elm.waypoint(function(){
	elm.delay(200).fadeTo(500, 1);
}, {
	offset : '90%'
});
```
Unfortunately, it has not been updated for a long time
This solution saved my project as all the solutions I implemented before did not work fine on mobile devices.

My question however is, can anyone share a sample php script to load more data from mysql database on the main page?

Thanks