It makes sense to set this for the user if they haven't provided it, but the fact that someone has provided data as a string does not make the content type text/plain. I was attempting to use this library to test some Graphql endpoints and unfortunately can't do it because of this.
Hi! great project - question, I see that there's a possibility to perform async requests, my question is, is there any plans for this library to support HTTP/2 ? Or, what is the current HTTP/2 status with this library?

https://khttp.readthedocs.io/en/latest/user/advanced.html

thanks!

When using a simple khttp.get("...") access, on Ubuntu with OpenJDK 11, you immediately get a massive warning, telling you that:

```
WARNING: An illegal reflective access operation has occurred
WARNING: Illegal reflective access by khttp.requests.GenericRequest (file:/home/zordid/.gradle/caches/modules-2/files-2.1/khttp/khttp/0.1.0/810c5e89d44b032c2d079aa1c05230e5e7cfcc81/khttp-0.1.0.jar) to field java.net.URL.host
WARNING: Please consider reporting this to the maintainers of khttp.requests.GenericRequest
WARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access operations
WARNING: All illegal access operations will be denied in a future release
```

Can this be avoided and/or fixed? Thanks!
This proposal is about adding a `data class FormData(val value: Any, val type: String)` to khttp, and accept it in `data` as `Map<String, FormData>`. When GenericRequest sees this combination, it sets the `Content-Type` header to `multipart/form-data; boundary=%s`, and adds the right Content-Type to every part in that multipart request body. If there are some files to be added to the requests, they can be added too, but this will be optional.

**Motivation:**

On a previous project of mine, we needed to integrate with a system that accepted JSON as long as we send it encoded with `multipart/form-data` setting the respected headers.

Looking at GenericRequest.kt, there is almost a way to hack it with khttp by providing data as Map and a files handle that is empty - the only thing missing is an ability to provide the Content-Type for the parts in the Map of the data.

Currently, I have created a workaround as described here: https://kerestey.net/writing/2019-10-26-post-multipart-form-data-using-khttp.html but I'd like to see this resolved in the library itself.

I am certain this needs a little bikeshedding, and maybe there is a better idea of how to handle this out there, therefore the proposal. If there is a consensus on how to resolve this and needs some changes in the library, I would also be happy to try providing a pull request...
Add a gradle dependency to the README file
When use GET with body it will alway request as POST
I found an issue with cookie extraction on our test environment:
<img width="907" alt="Evaluate" src="https://user-images.githubusercontent.com/2995576/61654642-c6bee200-acb4-11e9-8f99-303f9029943e.png">

Upon further investigation, we realised the issue has to do with the `set-cookie` header (and potentially other headers?) not being treated in a case insensitive manner.

I presume the culprit is here https://github.com/jkcclemens/khttp/blob/master/src/main/kotlin/khttp/responses/GenericResponse.kt#L35 and it should be easy to patch (happy to provide a PR if that's acceptable).

Sending a POST-request to a site which is then redirecting back to itself results in reposting the request. This can result in an endless loop which eventually throws a StackOverflowException.

At least 303 Redirects should overwrite the request method to GET. Please read here:

https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections#Temporary_redirections
Sending a _POST_-request to a site which is then redirecting back to itself results in reposting the request. This can result in an endless loop which eventually throws a _StackOverflowException_.

At least 303 Redirects should overwrite the request method to _GET_. Please read here:
https://developer.mozilla.org/en-US/docs/Web/HTTP/Redirections#Temporary_redirections
It seems like it is impossible to post any sort of XML content via `khttp.post`.

On doing the following - 
```
val response = post(
                    url = soapEndpoint,
                    headers = mapOf(
                            "Accept-Encoding" to "gzip,deflate",
                            "Content-Type" to "text/xml;charset=UTF-8"
                    ),
                    data = getSoapRequest()
            )
```

I receive an error from the server saying `Content-Type` cannot be `text/plain`. But, if you look at my POST invocation above, I explicitly set the `Content-Type` to be `text/xml`. 

I suspected that my `Content-Type` header was being overwritten somewhere by the khttp library. I investigated into this and I landed up at the following lines of code within the `khttp.requests.GenericRequest` class on line 45 - 
```
val DEFAULT_DATA_HEADERS = mapOf(
            "Content-Type" to "text/plain"
        )
```
And on line 134
```
if (json == null) {
            this.data = data
            if (data != null) {
                mutableHeaders += GenericRequest.DEFAULT_DATA_HEADERS
            }
        }
```

So it does seem like your Content-Type header always ends up being over-written in case you're posting XML content.