Given this schema, the second definition overwrites the first rather than extending it.

```
input InputType {
  fieldA: String
}

extend input InputType {
  fieldB: String
}
```


This fixes #347.

I added the `maven-enforcer-plugin` with the `dependencyConvergence` rule and fixed the resulting dependency errors.
A while ago, I opened an issue on https://github.com/graphql-java/graphql-java/issues/1680 about a `ClassCastException` occuring while using a default value in the context of Relay/SimpleListConnection.

By browsing the stacktrace, it seemed to me it was due to graphql-java, but the maintainer says it's not; seems like graphql-java-tools is sending the wrong type of value (a `BigInteger` instead of an `Integer`).

Can you have a look please?
using this version of the kickstart:
```
		<dependency>
			<groupId>com.graphql-java-kickstart</groupId>
			<artifactId>graphql-spring-boot-starter</artifactId>
			<version>5.10.0</version>
		</dependency>
```

my GraphQL schema:
```
interface Mother {
  # Mother fields
}

type Child implements Mother {
  # Child & Mother's fields
}
```
my Java classes:
```
public class Mother {
    // Mother's fields
}
```
```
public class Child extends Mother {
    // Child's fields
}
```
```
@Component
public abstract class MotherResolver<T extends Mother> implements GraphQLResolver<T> {
    // Resolving methods for Mother's fields
}
```
```
@Component
public class ChildResolver extends MotherResolver<Child> {
    // Resolving methods for Child's fields
}
```

Starting my Spring Boot app, I get the following stack trace:
```
Caused by: com.coxautodev.graphql.tools.ResolverError: Unable to determine data class for resolver 'com.company.app.graphql.resolver.ChildResolver' from generic interface! This is most likely a bug with graphql-java-tools.
	at com.coxautodev.graphql.tools.NormalResolverInfo.findDataClass(ResolverInfo.kt:31) ~[graphql-java-tools-5.6.1.jar:na]
	at com.coxautodev.graphql.tools.NormalResolverInfo.<init>(ResolverInfo.kt:19) ~[graphql-java-tools-5.6.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner$resolverInfos$1.invoke(SchemaClassScanner.kt:38) ~[graphql-java-tools-5.6.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner$resolverInfos$1.invoke(SchemaClassScanner.kt:26) ~[graphql-java-tools-5.6.1.jar:na]
	at kotlin.sequences.TransformingSequence$iterator$1.next(Sequences.kt:174) ~[kotlin-stdlib-1.3.10.jar:1.3.10-release-253 (1.3.10)]
	at kotlin.sequences.SequencesKt___SequencesKt.toCollection(_Sequences.kt:691) ~[kotlin-stdlib-1.3.10.jar:1.3.10-release-253 (1.3.10)]
	at kotlin.sequences.SequencesKt___SequencesKt.toMutableList(_Sequences.kt:721) ~[kotlin-stdlib-1.3.10.jar:1.3.10-release-253 (1.3.10)]
	at kotlin.sequences.SequencesKt___SequencesKt.toList(_Sequences.kt:712) ~[kotlin-stdlib-1.3.10.jar:1.3.10-release-253 (1.3.10)]
	at com.coxautodev.graphql.tools.SchemaClassScanner.<init>(SchemaClassScanner.kt:38) ~[graphql-java-tools-5.6.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:164) ~[graphql-java-tools-5.6.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:206) ~[graphql-java-tools-5.6.1.jar:na]
	at com.oembedler.moon.graphql.boot.GraphQLJavaToolsAutoConfiguration.schemaParser(GraphQLJavaToolsAutoConfiguration.java:98) ~[graphql-spring-boot-autoconfigure-5.10.0.jar:na]
	at com.oembedler.moon.graphql.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$3914e3f2.CGLIB$schemaParser$3(<generated>) ~[graphql-spring-boot-autoconfigure-5.10.0.jar:na]
	at com.oembedler.moon.graphql.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$3914e3f2$$FastClassBySpringCGLIB$$27868fdb.invoke(<generated>) ~[graphql-spring-boot-autoconfigure-5.10.0.jar:na]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	at com.oembedler.moon.graphql.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$3914e3f2.schemaParser(<generated>) ~[graphql-spring-boot-autoconfigure-5.10.0.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_212]
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_212]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[na:1.8.0_212]
	at java.lang.reflect.Method.invoke(Unknown Source) ~[na:1.8.0_212]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.1.9.RELEASE.jar:5.1.9.RELEASE]
	... 138 common frames omitted
```

I've seen these (somehow) related issues:
https://github.com/graphql-java-kickstart/graphql-java-tools/issues/145
https://github.com/graphql-java-kickstart/graphql-java-tools/issues/163
but with the solution you give in the last comment, I don't understand how I would be able to do something like:
```
class BazResolver extends FooResolver<Baz> {

}
```
... because that means this resolver is actually a `GraphQLResolver<Bar>` which makes no sense at all (from a Java inheritance scheme point of view)!!

Or maybe it's just an erroneous copy/paste from https://github.com/graphql-java-kickstart/graphql-java-tools/issues/331...? (but that's doesn't solve my problem still...)
First of all, thank you for this great library!

However, I have experienced a minor issue when using this library while also using the `maven-enforcer-plugin` with the `dependencyConvergence` rule as part of the build process. The plugin reveals that there are conflicting dependency versions defined in `graphql-java-tools`:

```
[WARNING] 
Dependency convergence error for org.jetbrains.kotlin:kotlin-stdlib:1.3.31 paths to dependency are:
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlin:kotlin-stdlib:1.3.31
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlin:kotlin-reflect:1.3.31
      +-org.jetbrains.kotlin:kotlin-stdlib:1.3.31
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.2.1
      +-org.jetbrains.kotlin:kotlin-stdlib:1.3.30
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.2.1
      +-org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1
        +-org.jetbrains.kotlin:kotlin-stdlib:1.3.30
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlinx:kotlinx-coroutines-reactive:1.2.1
      +-org.jetbrains.kotlin:kotlin-stdlib:1.3.30

[WARNING] 
Dependency convergence error for org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31 paths to dependency are:
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlin:kotlin-stdlib:1.3.31
      +-org.jetbrains.kotlin:kotlin-stdlib-common:1.3.31
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.2.1
      +-org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.1
        +-org.jetbrains.kotlin:kotlin-stdlib-common:1.3.30

[WARNING] 
Dependency convergence error for org.jetbrains.kotlin:kotlin-reflect:1.3.31 paths to dependency are:
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-org.jetbrains.kotlin:kotlin-reflect:1.3.31
and
+-com....
  +-com.graphql-java-kickstart:graphql-java-tools:5.7.1
    +-com.fasterxml.jackson.module:jackson-module-kotlin:2.9.9
      +-org.jetbrains.kotlin:kotlin-reflect:1.3.10
```

While `graphql-java-tools` depends on `kotlin-stdlib:1.3.31`, it also depends on `kotlinx-coroutines-*:1.2.1` which in turn depends on `kotlin-stblib:1.3.30`. A similar thing happens with `kotlin-reflect`.

Normally, Maven simply chooses one of the dependencies and ignores the different version requirements. However, as we are using the `maven-enforcer-plugin` as part of the build process, adding `graphql-java-tools` makes the build fail because of them. While I can work around this issue by manually adding `kotlin-stdlib` and `kotlin-reflect` as dependencies, this is not really a good solution in my opinion as it makes it less clear where dependencies come from and also makes it more difficult to upgrade dependency versions later on.

Therefore, I would greatly appreciate it if those conflicting dependencies could be resolved so that we can use the library without adding any additional dependencies. I can make a PR to try and solve this issue myself, if you are interested.
Declaring a custom scalar input argument non-nullable causes Jakson InvalidDefinitionException

Schema
```
myQuery(version: SemVer!): Output
```

Type declaration
```
GraphQLScalarType.newScalar()
            .name("SemVer")
            .description("Semantic version type")
            .coercing(new Coercing<Version, String>() {
                ...
            }).build();
```

Log after executing query
```
Cannot construct instance of `de.skuzzle.semantic.Version` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)
 at [Source: UNKNOWN; line: -1, column: -1]

java.lang.IllegalArgumentException: Cannot construct instance of `de.skuzzle.semantic.Version` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)
 at [Source: UNKNOWN; line: -1, column: -1]
        at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3922) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.ObjectMapper.convertValue(ObjectMapper.java:3863) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.coxautodev.graphql.tools.MethodFieldResolver$createDataFetcher$$inlined$forEachIndexed$lambda$1.invoke(MethodFieldResolver.kt:103) ~[graphql-java-tools-5.7.1.jar!/:na]
        at com.coxautodev.graphql.tools.MethodFieldResolver$createDataFetcher$$inlined$forEachIndexed$lambda$1.invoke(MethodFieldResolver.kt:28) ~[graphql-java-tools-5.7.1.jar!/:na]
        at com.coxautodev.graphql.tools.MethodFieldResolverDataFetcher.get(MethodFieldResolver.kt:194) ~[graphql-java-tools-5.7.1.jar!/:na]
        at graphql.execution.instrumentation.dataloader.DataLoaderDispatcherInstrumentation.lambda$instrumentDataFetcher$0(DataLoaderDispatcherInstrumentation.java:86) ~[graphql-java-13.0.jar!/:na]
        at graphql.execution.ExecutionStrategy.fetchField(ExecutionStrategy.java:270) [graphql-java-13.0.jar!/:na]
        at graphql.execution.ExecutionStrategy.resolveFieldWithInfo(ExecutionStrategy.java:198) [graphql-java-13.0.jar!/:na]
        at graphql.execution.AsyncExecutionStrategy.execute(AsyncExecutionStrategy.java:74) ~[graphql-java-13.0.jar!/:na]
        at graphql.execution.Execution.executeOperation(Execution.java:161) ~[graphql-java-13.0.jar!/:na]
        at graphql.execution.Execution.execute(Execution.java:102) ~[graphql-java-13.0.jar!/:na]
        at graphql.GraphQL.execute(GraphQL.java:605) ~[graphql-java-13.0.jar!/:na]
        at graphql.GraphQL.parseValidateAndExecute(GraphQL.java:538) ~[graphql-java-13.0.jar!/:na]
        at graphql.GraphQL.executeAsync(GraphQL.java:502) ~[graphql-java-13.0.jar!/:na]
        at graphql.kickstart.execution.GraphQLInvoker.executeAsync(GraphQLInvoker.java:26) ~[graphql-java-kickstart-9.0.0.jar!/:na]
        at graphql.kickstart.execution.GraphQLInvoker.query(GraphQLInvoker.java:38) ~[graphql-java-kickstart-9.0.0.jar!/:na]
        at graphql.kickstart.execution.GraphQLInvoker.query(GraphQLInvoker.java:31) ~[graphql-java-kickstart-9.0.0.jar!/:na]
        at graphql.servlet.HttpRequestHandlerImpl.invoke(HttpRequestHandlerImpl.java:68) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at graphql.servlet.HttpRequestHandlerImpl.execute(HttpRequestHandlerImpl.java:54) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at graphql.servlet.HttpRequestHandlerImpl.handle(HttpRequestHandlerImpl.java:39) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at graphql.servlet.AbstractGraphQLHttpServlet.doRequest(AbstractGraphQLHttpServlet.java:147) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at graphql.servlet.AbstractGraphQLHttpServlet.doRequestAsync(AbstractGraphQLHttpServlet.java:137) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at graphql.servlet.AbstractGraphQLHttpServlet.doPost(AbstractGraphQLHttpServlet.java:169) ~[graphql-java-servlet-9.0.0.jar!/:na]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:660) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at javax.servlet.http.HttpServlet.service(HttpServlet.java:741) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53) ~[tomcat-embed-websocket-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:92) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.springframework.boot.actuate.metrics.web.servlet.WebMvcMetricsFilter.doFilterInternal(WebMvcMetricsFilter.java:108) ~[spring-boot-actuator-2.2.1.RELEASE.jar!/:2.2.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:119) ~[spring-web-5.2.1.RELEASE.jar!/:5.2.1.RELEASE]
        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:202) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:526) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:861) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1579) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) ~[na:1.8.0_211]
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) ~[na:1.8.0_211]
        at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.27.jar!/:9.0.27]
        at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_211]
Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: Cannot construct instance of `de.skuzzle.semantic.Version` (no Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator)
 at [Source: UNKNOWN; line: -1, column: -1]
        at com.fasterxml.jackson.databind.exc.InvalidDefinitionException.from(InvalidDefinitionException.java:67) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.DeserializationContext.reportBadDefinition(DeserializationContext.java:1589) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.DeserializationContext.handleMissingInstantiator(DeserializationContext.java:1055) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.deser.BeanDeserializerBase.deserializeFromObjectUsingNonDefault(BeanDeserializerBase.java:1297) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserializeFromObject(BeanDeserializer.java:326) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.deser.BeanDeserializer.deserialize(BeanDeserializer.java:159) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        at com.fasterxml.jackson.databind.ObjectMapper._convert(ObjectMapper.java:3917) ~[jackson-databind-2.10.0.jar!/:2.10.0]
        ... 65 common frames omitted
```

It seems that this issue was fixed partly in [Pull Request #320](https://github.com/graphql-java-kickstart/graphql-java-tools/pull/320) but the issue remains for custom scalars when the field argument is non-nullable.
My team and I are using graphql-java-kickstart for our kotlin server and want to start using federation.

We succeeded in removing duplicates from the executable schema to pass it into Federation's SchemaTransformer, as will be fixed by the release of [this PR](https://github.com/graphql-java-kickstart/graphql-java-tools/pull/327) provided by @mkaulig.

Now we want to define our entities and their keys in the schema, as described in [Apollo's Federation Core Concepts](https://www.apollographql.com/docs/apollo-server/federation/core-concepts/).
When doing so, Federation's SchemaTransformer requires us to provide a TypeResolver for _Entity and DataFetcher for _entities as described [here](https://github.com/apollographql/federation-jvm#graphql-java-schema-transformation) and there is a very basic example [here](https://github.com/apollographql/federation-jvm/blob/master/spring-example/src/main/java/com/apollographql/federation/springexample/InventorySchemaProvider.java#L23).

I wasn't able to find any support within graphql-java-tools to define the required TypeResolver and DataFetcher. Am I missing something? Is there any support for that in the library?

What I ended up doing for now was to build my own federationEntitiesDictionary as a list of my own EntityDefinition data class:
```kotlin
data class EntityDefinition<T : Any>(
    val graphQlTypeName: String,
    val typeClass: KClass<T>,
    val fetchByIdCallable: KFunction<T?>,
    val fetcherInstance: Any
)
```
I populate this dictionary with EntityDefinition objects for every `@key` annotated type in the schema and use it in the required implementations of the TypeResolver and DataFetcher interfaces.

It is working, but I'm not too fond of my low level approach.

Any feedback if this can be done with graphql-java-tools and how is much appreciated!
I'm running into an issue with a list of default Int values in my schema.  If I pass in a list of values as arguments in my query, they are passed in as Integers to my Resolver, however, if I don't specify any values in my query, the default values are sent in as BigIntegers resulting in cast exceptions.  Here is an example:

Here is my Venue Type:
```javascript
type Venue {
    venueId: ID!
    name: String!
    location: String!
    meetings(type: [Int] = [1,2,3,4,5,6,7,8,9,10]): [Meeting!]!
}
```
Meeting type
```javascript
type Meeting {
  meetingId: ID!
  subject: String
  type: Int
}
```
MyQuery
```javascript
{findVenues(hotelId: 512){
  venue{
    venueId,
    name,
    meetings(type:[1,2])   {
      meetingId,
      type
    }
  }
}}
```
if I specify type:[1,2], they are sent in Integers to the "getMeetings" method of my VenueResolver.  If I don't send in any values as in:
```javascript
{findVenues(hotelId: 512){
  venue{
    venueId,
    name,
    meetings  {
      meetingId,
      type
    }
  }
}}
```
The default type List is sent in as BigIntegers to my getMeetings method of my VenueResolver.    I could work around this by accepting the arguments as a csv and then parsing the argument, but it seems counterintuitive to pass in a csv when the field is an Int.  Can you please let me know what I'm doing wrong?

Thanks!
Raj
Caused by: org.springframework.beans.BeanInstantiationException: Failed to instantiate [com.coxautodev.graphql.tools.SchemaParser]: Factory method 'schemaParser' threw exception; nested exception is com.coxautodev.graphql.tools.SchemaClassScannerError: Two different classes used for type Page:
- interface org.springframework.data.domain.Page:
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllAuthors(java.lang.Integer,java.lang.Integer)
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllMyAuthors(java.lang.Integer,java.lang.Integer)

- interface org.springframework.data.domain.Page:
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllBooks(java.lang.Integer,java.lang.Integer)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:185) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]
	... 142 common frames omitted
Caused by: com.coxautodev.graphql.tools.SchemaClassScannerError: Two different classes used for type Page:
- interface org.springframework.data.domain.Page:
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllAuthors(java.lang.Integer,java.lang.Integer)
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllMyAuthors(java.lang.Integer,java.lang.Integer)

- interface org.springframework.data.domain.Page:
|   return type of method public org.springframework.data.domain.Page com.erduo.FirstGraphql.resolver.Query.findAllBooks(java.lang.Integer,java.lang.Integer)
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleFoundType(SchemaClassScanner.kt:319) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleFoundType(SchemaClassScanner.kt:293) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanResolverInfoForPotentialMatches(SchemaClassScanner.kt:268) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner.handleRootType(SchemaClassScanner.kt:119) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaClassScanner.scanForClasses(SchemaClassScanner.kt:77) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaParserBuilder.scan(SchemaParserBuilder.kt:169) ~[graphql-java-tools-5.7.1.jar:na]
	at com.coxautodev.graphql.tools.SchemaParserBuilder.build(SchemaParserBuilder.kt:210) ~[graphql-java-tools-5.7.1.jar:na]
	at graphql.kickstart.tools.boot.GraphQLJavaToolsAutoConfiguration.schemaParser(GraphQLJavaToolsAutoConfiguration.java:115) ~[graphql-kickstart-spring-boot-autoconfigure-tools-6.0.0.jar:na]
	at graphql.kickstart.tools.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$555cbf8c.CGLIB$schemaParser$1(<generated>) ~[graphql-kickstart-spring-boot-autoconfigure-tools-6.0.0.jar:na]
	at graphql.kickstart.tools.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$555cbf8c$$FastClassBySpringCGLIB$$16f0171.invoke(<generated>) ~[graphql-kickstart-spring-boot-autoconfigure-tools-6.0.0.jar:na]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.0.RELEASE.jar:5.2.0.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.0.RELEASE.jar:5.2.0.RELEASE]
	at graphql.kickstart.tools.boot.GraphQLJavaToolsAutoConfiguration$$EnhancerBySpringCGLIB$$555cbf8c.schemaParser(<generated>) ~[graphql-kickstart-spring-boot-autoconfigure-tools-6.0.0.jar:na]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_181]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_181]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_181]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_181]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.0.RELEASE.jar:5.2.0.RELEASE]
	... 143 common frames omitted



java code

`import org.springframework.data.domain.Page;

import com.coxautodev.graphql.tools.GraphQLQueryResolver;
import com.erduo.FirstGraphql.model.entity.business.Author;
import com.erduo.FirstGraphql.model.entity.business.Book;
import com.erduo.FirstGraphql.model.input.OffsetBasedPageRequest;
import com.erduo.FirstGraphql.service.AuthorService;
import com.erduo.FirstGraphql.service.BookService;

public class Query implements GraphQLQueryResolver {
	private BookService bookService;
	private AuthorService authorService;

	public Query(AuthorService authorService, BookService bookService) {
		this.authorService = authorService;
		this.bookService = bookService;
	}

	public Page<Book> findAllBooks(Integer skip, Integer first) {		
		System.out.println("--------findAllBooks");
		return bookService.findAllBooks(new OffsetBasedPageRequest(skip.intValue(), first.intValue()));
	}

	public Page<Book> findAllMyBooks(Integer skip, Integer first) {
		System.out.println("--------findAllMyBooks");
		return bookService.findAllBooksByUser(new OffsetBasedPageRequest(skip.intValue(), first.intValue()));
	}

	public Page<Author> findAllAuthors(Integer skip, Integer first) {
		System.out.println("--------findAllAuthors");
		return authorService.findAllAuthors(new OffsetBasedPageRequest(skip.intValue(), first.intValue()));
	}

	public Page<Author> findAllMyAuthors(Integer skip, Integer first) {
		System.out.println("--------findAllMyAuthors");
		return authorService.findAllAuthorsByUser(new OffsetBasedPageRequest(skip.intValue(), first.intValue()));
	}

	public long countAllBooks() {
		return bookService.countAllBooks();
	}

	public long countAllMyBooks() {
		return bookService.countAllBooksByUser();
	}

	public long countAllAuthors() {
		return authorService.countAllAuthors();
	}

	public long countAllMyAuthors() {
		return authorService.countAllAuthorsByUser();
	}
}
`


schema code

`union SearchResult = Book | Author

type Page {
	number: Int
	size: Int
	totalPages: Int
	totalElements: Int
	content: [SearchResult]
}

type Book{
    id: ID!
    title: String!
    isbn: String!
    pageCount: Int
    author: Author
}

input CreateBookInput {
    title: String!
    isbn: String!
    pageCount: Int
    author: ID!
}

extend type Query {
    findAllBooks(skip: Int = 0, first: Int = 0) : Page!
    findAllMyBooks(skip: Int = 0, first: Int = 0) : Page!
    countAllBooks: Long!
    countAllMyBooks: Long!
}

extend type Mutation {
    newBook(input:CreateBookInput!) : Book!
    deleteBook(id: ID!) : Boolean
    updateBookPageCount(pageCount: Int!, id: ID!) : Book!
}

type Author {
  id: ID!
  firstName: String!
  lastName: String!
}

input CreateAuthorInput {
  firstName: String!
  lastName: String!
}

type Query {
  findAllAuthors(skip: Int = 0, first: Int = 0) : Page!
  findAllMyAuthors(skip: Int = 0, first: Int = 0) : Page!
  countAllAuthors: Long!
  countAllMyAuthors: Long!
}

type Mutation {
  newAuthor(input: CreateAuthorInput!) : Author!
}
`


The issue is similar to https://github.com/graphql-java-kickstart/graphql-java-tools/issues/240 but this time because of changes in Jackson 2.10.0. See https://github.com/FasterXML/jackson-databind/issues/2220. As mentioned by @ophelie in this reply, https://github.com/graphql-java-kickstart/graphql-java-tools/issues/240#issuecomment-474903456, it used to work because Jackson ObjectMapper had short circuit logic until 2.9.9. Now file upload breaks in all cases. The same applies for any class whose fields doesn't have Jackson serializer. 

I feel this issue is in `com.coxautodev.graphql.tools.MethodFieldResolver#isScalarType`. It returns false for custom scalar types.

I added test to replicate the issue here, https://github.com/adisesha/graphql-java-tools/tree/jackson_2_10_0_bug. 

Please suggest a work around for this. Also let me know if you need any other details. Thanks . 