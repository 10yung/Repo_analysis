Version: 1.41.1 (system setup)
Date: 2019-12-18T14:58:56.166Z
Electron: 6.1.5
Chrome: 76.0.3809.146
Node.js: 12.4.0 V8: 7.6.303.31-electron.0
OS: Windows_NT x64 10.0.18363

- REST Client Version:  0.23.0 

**Steps to Reproduce:**
1. Define the Rest API request in "Request.rest" file
@authToken = ----AAD user Id Token Value----
@hostUrl = http://localhost:7071 
get {{hostUrl}}/api/GetUserResources
content-type: application/json
Authorization: Bearer {{authToken}}
fiscalYear: 2020

2. Start Debugging in VS 2019 for the Azure Function App and put the debug point in the entry function.

3. Click on the SendRequest link visible in the file.

4. For one time click, same api is called three times. Debug point hits 3 times. The response in VS code is shown after all 3 calls are complete. This causes very slow feedback loop.

dotenv variables do not resolve when used as environment variable value.

- VSCode Version: 1.41.1
- OS Version:  kubuntu 19.10, 5.3.0-26
- REST Client Version:  0.23.0

Steps to Reproduce:
1. create a .env file and add variables such as `PASSWORD_PRODUCTION=TkVuZtnoeEPYr`
2. create an environment variable in the workspace settings.json that references the dotenv file such as `"password": "{{$dotenv PASSWORD_PRODUCTION}}"`
3. In an .http file create a request that uses the environment variable such as ` "password": "{{password}}" in a POST body.
4. generate a code snip it and observe '{{$dotenv PASSWORD_PRODUCTION}}' in the code rather than the value of the env var.
4.5 verify other non-dotenv environment variables are working as expected.
5. create a file variable of the same name such as, `@password = {{$dotenv CMIX_PASSWORD_PRODUCTION}}`
6. generate a code snip it and observe the proper value in the code.
7. move the .env file to the same dir as the .http file and repeat.
 

And, thank you, this is an awesome tool!
- VSCode Version: Version: 1.41.1
- OS Version: mac OS 10.15.2
- REST Client Version: 0.23.0

Steps to Reproduce:

1. Tried to execute a curl or request to download a file from amazon advertising API

```
curl --request GET \
  --url https://advertising-api.amazon.com/v1/reports/amzn1.clicksAPI.v1.p1.xxxxx/download \
  --header 'amazon-advertising-api-clientid: xxxxxx \
  --header 'amazon-advertising-api-scope: xxxxxxx \
  --header 'authorization: Bearer xxxxxxxxxxxx \
  --header 'content-type: application/json'
```

or

```
GET {{reportLocationUrl}}
Authorization: {{authorization}}
amazon-advertising-api-scope: {{apiScope}}
amazon-advertising-api-clientid: {{clientId}}

```
2. Got 

```
HTTP/1.1 400 Bad Request
x-amz-request-id: 4F1B5ACD8107D2D4
x-amz-id-2: R3UjUVDooN2fsv1hJOuLPXC6ad/RHCZC/f8wsrdyTeJmEiNbNtm1veOa9HFdG6yjQYGmVNjzXDw=
Content-Type: application/xml
Transfer-Encoding: chunked
Date: Wed, 15 Jan 2020 21:38:13 GMT
Connection: close
Server: AmazonS3

<?xml version="1.0" encoding="UTF-8"?>
<Error>
  <Code>InvalidArgument</Code>
  <Message>Only one auth mechanism allowed; only the X-Amz-Algorithm query parameter, Signature query string parameter or the Authorization header should be specified</Message>
  <ArgumentName>Authorization</ArgumentName>
  <ArgumentValue>Bearer xxxxxxxxx</ArgumentValue>
  <RequestId>4F1B5ACD8107D2D4</RequestId>
  <HostId>R3UjUVDooN2fsv1hJOuLPXC6ad/RHCZC/f8wsrdyTeJmEiNbNtm1veOa9HFdG6yjQYGmVNjzXDw=</HostId>
</Error>
```

3. I tried the exact same request on imsomnia , postman and terminal (using output to choose location). All previous works perfectly (imsomnia and postman I need to save the body after the request , what is the correct response) 


I. e. `:4000/foo` for `http://localhost:4000/foo` and `:/bar` for `http://localhost/bar` â€“ [HTTPie does this](https://httpie.org/doc#url-shortcuts-for-localhost) and some (me :) find it very convenient.

Thank you for this awesome project BTW!
For my use case, I need a `viewer` header to be encoded from `userId` that I have in environment variables. I can encode manually and add the encoded ID to the environment too, but that's doubling up.

I'd really like to generate the encoded variable with a JS or bash script when the request is sent. Is that possible?

I find for some HTTP requests I use I almost always use a unique value for a variable (e.g. `logId`, `sessionId`, etc.). I usually just change the variable in the file but I think it would be even nicer if I could get prompted in a pop-up/modal/dialog window for any undefined variables, they can default to the last used value but the first time it is used it could just be blank and allow me to enter it in.
Some people may accidentally run a `DELETE` request in a file which can be detrimental.

I suggest adding a confirmation pop-up for, at a minimum, DELETE requests. Probably something that can be turned off/on in settings maybe per method type or something that is done via an annotation on the request itself.

e.g.

```http
@confirm-send("Task deletion cannot be undone. Are you sure you want to delete this task?")
DELETE /tasks/{{taskId}} HTTP/1.1
```
Swagger supports adding examples along with spec: https://swagger.io/docs/specification/2-0/adding-examples/

We can add support to use swagger file as an input to vscode-restclient. This will save developers from maintaining 2 separate files for documenting REST APIs, swagger.yaml and restclient.http
Hi, 

I'm using `vscode-restclient` to try some complex api. I find this tool easy to use, while allowing to connect multiple calls.

As a few other people out there, I would like to use it for api validation, executing complex api orchestrations, and batch running for CI.

There are some of the Issues asking for features related to this PR:

* Send all requests in a file #444 
* Automatic runs #291 
* How to write tests on top of the requests? #267 
* [Feature Request] Support Response Scripting #238 
* Execute the same request N time #211 
* could you please add some before/after script ? #209 
* Run all requests one after another does not work #199 

With this pull request, I'm trying to remove dependency from Visual Studio Code internals from the modules that can be reused to create a command line tool.

Before explaining the changes, bear in mind that this is the first time I write code in Typescript, so forgive me if I did some silly mistakes. 

To remove `vscode` dependencies, I have mainly used three strategies:
- for classes with few dependencies, I have splitted in two classes: a base class, without the features depending on `vscode`, and a derived class adding those features. for example, `RestClientSettings` was divided in the base `RestClientSettings` (keeeping the name to minimise renaming changes), and `RestClientSettingsVS`. A very important class modified this way is `RequestController`, almost all the code went to `RestClient` class, and this class have only the Selection and Range handling. To aid this separation, also for `Selector` class some code went to `SelectorVS`.  
-  the class `TextDocument` was used in some places. to isolate the dependency, a new interface named `DocumentWrapper` (yes, I know, not a great name...), was created, and implemented in `DocumentWrapperVS` using TextDocument.
- To create the right instance of a class, some factory was needed. To avoid changing too much, I took advantage of `RestClientSettings` class, already widely used. On this class I have put some methods to hide dependencies on `window`, and some helpers to get information from current document.

I couldn't find a way to remove `vscode` dependencies from `SystemVariableProvider`, so by default the code uses a `DummyVariableProvider`, and the real class is set at startup. Also the EventEmitter class used in somewhere was a bit of problem. I don't think we need those events on a command line interface, but not being able to remove the dependency, I've implemented an interface to hide the dependency.

To check that all this work enables us to create a command line program, I created a bare-bone program. See [restclient-cli](https://github.com/saurus/restclient-cli).

Ok, let me know what you think about all this.

Thanks,

Dino


- VSCode Version: 1.41.1
- OS Version: Windows 10
- REST Client Version: 0.23.0

Steps to Reproduce:

Create a new project in [google apps script](https://script.google.com/home)
Add this code to a script, publish with anonymous permission.

```js
function doGet(e) {
 var request = JSON.parse(JSON.stringify(e));
  return buildErrorResponse(request,200);
}

function doPost(e) {
  var request = JSON.parse(JSON.stringify(e));
  return buildErrorResponse(request,200);
}

function buildErrorResponse(message, code) {

  var output = JSON.stringify({
    status: 'error',
    code: code,
    message: message
  });

  return ContentService.createTextOutput(output).setMimeType(ContentService.MimeType.JSON);
}
```

A curl works

`curl -d "" -L https://script.google.com/macros/s/AKfycbyW_I75HOxOrLhsm4x4ZJTF71VRP2-1Ey3gsijORAOywKGLG18/exec`

remove the "" and it gives similar incorrect response

`curl -d -L https://script.google.com/macros/s/AKfycbyW_I75HOxOrLhsm4x4ZJTF71VRP2-1Ey3gsijORAOywKGLG18/exec`

```html
<HTML>
<HEAD>
<TITLE>Moved Temporarily</TITLE>
</HEAD>
<BODY BGCOLOR="#FFFFFF" TEXT="#000000">
<H1>Moved Temporarily</H1>
The document has moved <A HREF="https://script.googleusercontent.com/macros/echo?user_content_key=5JVyAwDxUguj-RbYIr9ep9fJ_jX4rComNtUPz1nAl0vJvbOCWLJcgJYGGECPa10BnsxKxLRmHvKS9VizC6IJ51bwRlj_zf1hm5_BxDlH2jW0nuo2oDemN9CCS2h10ox_1xSncGQajx_ryfhECjZEnPQ-NNAGf-reMhKa49GYIy13feRkyntKDJT1G02xdYRamd8znjb4TYRDR4Evaeworpcdv3aNHr6K&amp;lib=M4gjLbtG2y_MJRH4TTygoOoj2lYWGeOP2">here</A>.
</BODY>
</HTML>
```

expected response
```json
{"status":"error","code":200,"message":{"parameter":{},"contextPath":"","contentLength":0,"queryString":"","parameters":{}}}
```

### solution:
I suspect something changed in the vscode version or the body is not attaching properly.