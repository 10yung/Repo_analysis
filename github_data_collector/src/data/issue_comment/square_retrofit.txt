What kind of issue is this?

 - [ ] Question. This issue tracker is not the place for questions. If you want to ask how to do
       something, or to understand why something isn't working the way you expect it to, use Stack
       Overflow. https://stackoverflow.com/questions/tagged/retrofit

 - [ ] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests
       get fixed. Here’s an example: https://gist.github.com/swankjesse/6608b4713ad80988cdc9

 - [X] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution
       already exists! Don’t send pull requests to implement new features without first getting our
       support. Sometimes we leave features out on purpose to keep the project small.

Description of the issue:

I'm trying to achieve a scenario that is very common, but with Moshi isn't so trivial as I thought (I'm coming from Gson, that is simpler to use, but I'm aware of its many disadvantages).

I have endpoint definitions that use generic types, like this:
```
    @GET("api.json")
    suspend fun <T> test(): Result<T>
```
This is used because `Result<T>` contains a standard structure, basically as defined below:
```
@JsonClass(generateAdapter = true)
data class Result<T> (

    var data: T? = null,

    var timestamp: OffsetDateTime? = null
)
```
As you may see, it is used to track common information (like the server timestamp and, eventually, in the future, may have the ID of the request to match logs or something like that).

But the problem is that Moshi adapter for this class isn't called how it should by Retrofit (I explain below), which results in this error:

```
2020-01-18 15:38:59.913 7097-7202/com.example.myapplication E/MainActivity: Error handling JSON data: 
    java.lang.IllegalArgumentException: Unable to create converter for com.example.myapplication.api.Result<T>
        for method RemoteService.test
        at retrofit2.Utils.methodError(Utils.java:53)
        at retrofit2.HttpServiceMethod.createResponseConverter(HttpServiceMethod.java:115)
        at retrofit2.HttpServiceMethod.parseAnnotations(HttpServiceMethod.java:82)
        at retrofit2.ServiceMethod.parseAnnotations(ServiceMethod.java:37)
        at retrofit2.Retrofit.loadServiceMethod(Retrofit.java:192)
        at retrofit2.Retrofit$1.invoke(Retrofit.java:149)
        at java.lang.reflect.Proxy.invoke(Proxy.java:813)
        at $Proxy4.test(Unknown Source)
        at com.example.myapplication.MainActivity.handleWithMoshiRetrofitConverter(MainActivity.kt:72)
        at com.example.myapplication.MainActivity$onCreate$1$1.invokeSuspend(MainActivity.kt:48)
        at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33)
        at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:56)
        at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:561)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:727)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:667)
        at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:655)
     Caused by: java.lang.IllegalArgumentException: No JsonAdapter for T (with no annotations)
    for T data
    for com.example.myapplication.api.Result<T>
        at com.squareup.moshi.Moshi$LookupChain.exceptionWithLookupStack(Moshi.java:349)
        at com.squareup.moshi.Moshi.adapter(Moshi.java:150)
        at com.example.myapplication.api.ResultJsonAdapter.<init>(ResultJsonAdapter.kt:29)
        at java.lang.reflect.Constructor.newInstance0(Native Method)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:430)
        at com.squareup.moshi.internal.Util.generatedAdapter(Util.java:540)
        at com.squareup.moshi.StandardJsonAdapters$1.create(StandardJsonAdapters.java:60)
        at com.squareup.moshi.Moshi.adapter(Moshi.java:138)
        at com.squareup.moshi.Moshi.adapter(Moshi.java:98)
        at retrofit2.converter.moshi.MoshiConverterFactory.responseBodyConverter(MoshiConverterFactory.java:91)
        at retrofit2.Retrofit.nextResponseBodyConverter(Retrofit.java:352)
        at retrofit2.Retrofit.responseBodyConverter(Retrofit.java:335)
        at retrofit2.HttpServiceMethod.createResponseConverter(HttpServiceMethod.java:113)
        	... 14 more
     Caused by: java.lang.IllegalArgumentException: No JsonAdapter for T (with no annotations)
        at com.squareup.moshi.Moshi.adapter(Moshi.java:148)
        	... 25 more
```
Firstly, I thought the problem was with Moshi generated adapter. But then I [made a simple test code](https://github.com/luanmm/moshi-test) that uses Moshi directly to parse the text and then try the same with a Retrofit call. The Moshi part of handling it is a little bit confusing (maybe the generated adapter code could be improved for this kind of scenarios), but it works very well.

So I ended up thinking that this may be the way Retrofit call Moshi converter. Any thoughts or ideas?

PS: I know I could create a response model for each of my response possibilities, but I really don't think that this would be a solution. I don't see, at least right now, why Retrofit + Moshi couldn't handle this kind of use case (except for the fact that it isn't implemented yet, which seems to be the case).
When I added MultiDex to the Android project, In lower versions of Android like the 4.2 I get the following error
```
E/dalvikvm: Could not find class 'java.lang.invoke.MethodHandles$Lookup', referenced from method retrofit2.Platform.invokeDefaultMethod
```
Here's how I added Multiplex

My gradle module:
``` 
defaultConfig {
    multiDexEnabled = true
    // other code
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.squareup.okhttp3:okhttp:1.12.7'

    implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.0'
    // other code
}

```

My application class:
```
public class BaseApplication extends MultiDexApplication {
 // other code
}
```

My Manifest:
```
<application
    android:name=".BaseApplication">
    <!-- other code -->
</application>
```

My retrofit clinte:
```
public class ApiClient {

    private static final String BASE_URL = BaseApplication.API_URL;
    private static Retrofit retrofit = null;

    public static Retrofit getClient() {

        if (retrofit == null) {
            retrofit = new Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .client(getOkHttpClient())
                    .addConverterFactory(GsonConverterFactory.create())
                    .build();
        }
        return retrofit;
    }

    public static OkHttpClient getOkHttpClient() {

        return new OkHttpClient.Builder()
                .readTimeout(20, TimeUnit.SECONDS)
                .connectTimeout(20, TimeUnit.SECONDS)
                .addInterceptor(new Interceptor() {
                                    @Override
                                    public Response intercept(@NonNull Interceptor.Chain chain) throws IOException {
                                        Request original = chain.request();
                                        Request request = original.newBuilder()
                                                .method(original.method(), original.body())
                                                .build();

                                        return chain.proceed(request);
                                    }
                                }
                ).build();
    }
}
```

**Some of the solutions I found in search were:**

 - Use retrofit version 2.2.0 or below

 - Disable Multiplex and resize the project to the point that it does not need to be multiplexed

But I don't want to use these methods because I always want to use the latest version of retrofit, also cannot reduce the project size
It seems the newest version `implementation 'com.squareup.retrofit2:converter-scalars:2.7.1'` has not convertFactory support. Follow code:
```
        val retrofit: Retrofit = Retrofit.Builder()
            .baseUrl("http://www.example.com")
            .addConverterFactory(ScalarsConverterFactory.create())
            .build()
```
It will report a no metafactory error, if I downgrade to 1.5.0, this code will work as well.
I know that Retrofit does not allow the Call without any return types, developer should have to add some object in return type like
 
```
@GET
 Call<Response<JsonObject>> checkStatus(@Url String url);
```

Above is client application request checking status of data. In this request, client app gets two types of different responses `200 success` with body & `202 accepted` without body. Client app have to call this request with an interval of 5 or n seconds whenever in response client app gets` 202 accepted` response. If other than `202` it gets different status code then client app stops this calling this request. 

So in this case, client app accept return type of `Response<JsonObject>` In `202` accepted response there is no body. So it is gives error :

`Retrofit2 error java.io.EOFException: End of input at line 1 column 1`

I changed this `Response<JsonObject>` to `Response<Object>` & `Response<String>`, but still gives same above error.

So I solved this issue by changing return type of request from `Response<JsonObject>` to `Response<Void> ` as it is suggested [here](https://stackoverflow.com/a/35745341/5015103)
```
@GET
 Call<Response<Void>> checkStatus(@Url String url);
```
Now above request is working fine for `202` accepted response.  But not working when client app gets `200` success response & in that response server sends body in it. In Response object app can not gets body because of return type `Void`.

In above request of return type I use `Response` object like `Call<Response>`. I use this object because client app needs to check `HTTP` status code like `200`, `202` etc. I changed from `Call<Response>` to `Call<ResponseBody>` but it does not return status code. Only `Call<Response>` object returns `HTTP` status code.

In same request, how can I handle null/empty body if I get `202` accepted status code & body data if I get `200` success status code? 

I know that, Retrofit does not allow Call without type like `Call<Response<Void>>` or `Call<Response<JsonObject>>` and is not able to map empty body, but what if one of developer have above use case? How can it will be solve? I don't know about any standardization of accepting body only if `200` & not in `202`,  is there any standard way to do this?
    @POST("/driver/login")
    suspend fun login(@Body param:Map<String,Any>): Result<String>

ex:
 `   {
                var param= mapOf(
                    "password" to "123123",
                "phone" to "123456789")
                service.login(param)
            }`


 use Map<String,Any>   when use it case Throwable
 throwabel is  < java.lang.IllegalArgumentException: Parameter type must not include a type variable or wildcard: java.util.Map<java.lang.String, ?> (parameter #1) >



I'm calling an api & getting weird values returned with key values being totally mixed up. 
On postman I'm getting the correct values returned but with retrofit it's not correct. 

Postman :
"companyLogo": "CompanyLogo/EZYCOMP_8923_2016_08_17.jpg",


Retrofit :
companyLog
2019-12-28 21:11:03.443 22368-22405/net.myapp.mvvm D/OkHttp: o

I tried adding a custom converter but it does not work 

  return Retrofit.Builder()
                .client(okkHttpclient)
                .baseUrl(apiConstants.URL)               
                .addConverterFactory(HtmlGsonConverter())
                .addConverterFactory(GsonConverterFactory.create(gson))
                .build()

 - [x] Bug report. If you’ve found a bug, spend the time to write a failing test. Bugs with tests
       get fixed. Here’s an example: https://gist.github.com/swankjesse/6608b4713ad80988cdc9



Getting 302 response in retrofit get url parameter whereas same get url works with httpurl connection with same configuration any idea? 
My application is crashing when I am launching it and I can see the reason is Retrofit in Android Studio Logcat:

java.lang.NoClassDefFoundError: Failed resolution of: Lretrofit2/Platform;
        at retrofit2.Retrofit$Builder.<init>(Retrofit.java:408)
        at com.myapp.webservices.WSClient.getRetroFitAPIListener(WSClient.java:71)
        at com.myapp.base.MyApplication.onCreate(MyApplication.kt:40)
        at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1141)
        at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5854)
        at android.app.ActivityThread.-wrap1(Unknown Source:0)
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1697)
        at android.os.Handler.dispatchMessage(Handler.java:106)
        at android.os.Looper.loop(Looper.java:164)
        at android.app.ActivityThread.main(ActivityThread.java:6626)
        at java.lang.reflect.Method.invoke(Native Method)
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438)
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811)
     Caused by: java.lang.ClassNotFoundException: Didn't find class "retrofit2.Platform" on path: DexPathList[[zip file "/data/app/com.myapp-vSwSFvUUzjH91IiAxsw1SA==/base.apk"],nativeLibraryDirectories=[/data/app/com.myapp-vSwSFvUUzjH91IiAxsw1SA==/lib/arm, /system/lib, /system/vendor/lib]]
        at dalvik.system.BaseDexClassLoader.findClass(BaseDexClassLoader.java:125)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:379)
        at java.lang.ClassLoader.loadClass(ClassLoader.java:312)
        at retrofit2.Retrofit$Builder.<init>(Retrofit.java:408) 
        at com.myapp.webservices.WSClient.getRetroFitAPIListener(WSClient.java:71) 
        at com.myapp.base.MyApplication.onCreate(MyApplication.kt:40) 
        at android.app.Instrumentation.callApplicationOnCreate(Instrumentation.java:1141) 
        at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5854) 
        at android.app.ActivityThread.-wrap1(Unknown Source:0) 
        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1697) 
        at android.os.Handler.dispatchMessage(Handler.java:106) 
        at android.os.Looper.loop(Looper.java:164) 
        at android.app.ActivityThread.main(ActivityThread.java:6626) 
        at java.lang.reflect.Method.invoke(Native Method) 
        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:438) 
        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:811) 
2019-12-14 14:17:04.710 32665-32665/? E/AndroidRuntime: FATAL EXCEPTION: main

In build.gradle I am using: 
   implementation 'com.squareup.retrofit2:retrofit:2.7.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.7.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.7.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.0.0'

Two days ago I was able to run the application successfully after of 5 hours effort and found success with a clean and build the Gradle, answer provided here: [Retrofit Issue](https://readyandroid.wordpress.com/2019/12/09/java-lang-noclassdeffounderror-failed-resolution-of-lretrofit2-platform-at-retrofit2-retrofitbuilder/)

But now again I am facing this issue and cannot able to run the app from the last 8 hours of effort which is impacting my project delivery without any cause. Anyone is here who can help me asap?

My line of code where I am meeting this exception is:

public static WSClientListener getRetroFitAPIListener() {
        Retrofit retrofit = new Retrofit.Builder() //This retrofit builder say no class deffound error
                .baseUrl(WSUtils.BASE_URL)
                .client(getHttpClient().build())
                .addConverterFactory(GsonConverterFactory.create(new GsonBuilder()
                        .setLenient()
                        .create()))
                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())
                .build();
        return retrofit.create(WSClientListener.class);
    }

 - [ ] Documentation:

It would be nice if the official documentation explains how to use Retrofit together with co-routines together with the best practices regarding the asynchronous handling of requests. My students need to implement their calls using Retrofit and co-routines (following the tutorials in the [Udacity course](https://classroom.udacity.com/courses/ud9012), but for documentation I'm relying on (not always the best) medium articles instead of official docs. 

Kind regards

Jens
What kind of issue is this?

 - [x] Feature Request. Start by telling us what problem you’re trying to solve. Often a solution
       already exists! Don’t send pull requests to implement new features without first getting our
       support. Sometimes we leave features out on purpose to keep the project small.


<img width="1440" alt="Screenshot 2019-12-03 at 9 47 32 AM" src="https://user-images.githubusercontent.com/20471162/70020241-0aeeb700-15b2-11ea-9bd8-1418076c7451.png">


it will be good if we can show where to find the new version by providing them with a link 