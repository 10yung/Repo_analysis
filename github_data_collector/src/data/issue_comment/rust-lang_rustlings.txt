Hi there,

I'm working through rustlings on a Windows machine. It's a wonderful resource - thank-you so much for putting the effort into making it.

One thing I have yet to figure out is how to view the output of the current exercise. Currently I just see if an exercise compiles (and the compile errors if not). However, if an exercise uses `println!` it would be lovely to be able to see that output somewhere.

Am I doing something wrong or is this something that's yet to be implemented?

first pod

There are several new concepts in the `arc1.rs` exercise, and I wonder if it would be useful to have a few gentle lead ins before this exercise.

In particular threads are a big leap in complexity with some new syntax (closures).

It would also be helpful to know what the arc1 code is trying to do in the first place. Reverse engineering the logic (with known missing lines of code) and figuring out threads and figuring out Arc, seems like too much for one exercise.
I'm doing the exercises but I get the following error with if1:

thread 'main' panicked at 'Failed to run 'run' command: Os { code: 5, kind: PermissionDenied, message: "Access is denied." }', src\libcore\result.rs:1165:5

F-Secure also warns about Suspicious:W32/Malware!DeepGuard:
Application blocked
File: temp_16356
Reason: Suspicious:W32/Malware!DeepGuard.n
Hi!

It's possible to "pass" test4 with incorrect macro. For example this gives message that the code is successfully compile.

```
macro_rules! my_macro {                                                                                                                 
    ($e:expr) => {
        $e
    }
}

fn main() {
    if my_macro!("world!") != "Hello world!" {
        panic!("Oh no! Wrong output!");
    }
 }
```

It compiles, yes, but it's obviously incorrect
Is it a suitable start for someone with 0 Rust experience? (my guess: yes, but it is a guess and it turned out to be wrong)

> small exercises to get you used to reading and writing Rust code

indicates that it is for beginners, but it is unclear is it for someone just starting from hello world.

> Alternatively, for a first-time Rust learner, there's several other resources:

Is it supposed to mean "first-time Rust learner, you will be better served by this alternatives", or "for first-time Rust learner this also may be useful"?
So I was going through rustlings (which has been great, thanks!) and as it happens, the next unit after `tests3.rs` is `test3.rs` in the root. It took me some hard staring to figure out why the code didn't look like I expected it to before I noticed the one-character difference in the filenames.

I'm not sure what the best solution here is - perhaps `test*.rs` in the root directory could be renamed to `quiz*.rs`, since that also describes what they are, and that doesn't collide with a concept being taught?
Currently rustlings is lacking any exercises dealing with traits. To address this, I'm submitting two exercises related to implementing a simple trait. 
I am trying to run rustlings on NetBSD. When I issue `cargo install --force --path .` command things began to build but failed when building termios. 

In the `.cargo/registry/src/github.com-1ecc6299db9ec823/termios-0.3.1/src/os` directory I did see freebsd.rs, dragonflybsd.rs and openbsd.rs.

### What I did to "fix" the issue:
Copied freebsd.rs to netbsd.rs (freebsd is closer to netbsd than the other two options)

Added netbsd as an option to `termios-0.3.1/src/os/mod.rs` at lines 7 and 15 respectively.

```rust
#[cfg(target_os = "netbsd")] pub use self::netbsd as target
<snip>
#[cfg(target_os = "netbsd")] pub mod netbsd;
```
Added the following to lib.rs -- as a noob I am not sure if it matters:

```rust
//! #[cfg(target_os = "netbsd")]
//! fn set_fastest_speed(termios: &mut Termios) -> io::Result<()> {
//!     cfsetspeed(termios, termios::os::freebsd::B921600)
//! }
```
Everything did compile and it seems to be working.