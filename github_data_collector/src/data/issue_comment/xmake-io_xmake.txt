> 注：提问题时若使用`不能用/没效果/有问题/报错`此类模糊表达，但又没有根据下面的模板给出任何相关辅助信息的，将绝对不会有任何反馈。

### 描述问题

请尽量清晰精准地描述你碰到的问题。
![图片](https://user-images.githubusercontent.com/13471233/72673552-03726700-3aa7-11ea-9b24-e2f82ff4a39d.png)


### 期待的结果

请尽量清晰精准地描述你所期待的结果。

### 错误信息

```
xmake l os.getwinsize
{
  height = 30,
  width = 65
}
xmake f -h
```

如果可能，请尽量附加程序运行过程中的错误输出信息。

> 如果是xmake相关编译问题，请加上`-v -D`参数运行，并给出详细编译输出信息。

### 相关环境

xmake -dev, win 10

### 其他信息

请提供其他附加信息帮助我们诊断问题。

* Before adding new features and new modules, please go to issues to submit the relevant feature description first.
* Write good commit messages and use the same coding conventions as the rest of the project.
* Please commit code to dev branch and we will merge into master branch in feature
* Ensure your edited codes with four spaces instead of TAB.

------

* 增加新特性和新模块之前，请先到issues提交相关特性说明，经过讨论评估确认后，再进行相应的代码提交，避免做无用工作。
* 编写友好可读的提交信息，并使用与工程代码相同的代码规范，代码请用4个空格字符代替tab缩进。
* 请提交代码到dev分支，如果通过，我们会在特定时间合并到master分支上。
* 为了规范化提交日志的格式，commit消息，不要用中文，请用英文描述。


最好是直接支持 *nix style 的参数输入

_Originally posted by @OpportunityLiu in https://github.com/xmake-io/xmake/issues/639#issuecomment-563025781_

要是你觉得可以的话，刚好趁着放假搞一下 @waruqi 
## 环境
* Ubuntu 18.04
* x86_64
* opencv4
![image](https://user-images.githubusercontent.com/35724924/72035275-60656480-32d2-11ea-95dc-13a7a16ff114.png)
![image](https://user-images.githubusercontent.com/35724924/72035320-812dba00-32d2-11ea-8447-4960fac728eb.png)


## 问题
![image](https://user-images.githubusercontent.com/35724924/72035246-488de080-32d2-11ea-8e03-166ca855ff74.png)

## xmake脚本
```
add_syslinks("pthread","gxiapi","cjson")
add_requires( "opencv4")

includes("Main")
includes("Interface")
includes("Share")
includes("Detector")
includes("Infantry")
includes("Sentry")
includes("Hero")
includes("Buff")


target("CV")
    set_kind("binary")
    set_rules("mode.debug", "mode.release")
    set_optimize("fastest")
    add_packages( "opencv4")

set_languages("c99", "cxx11")
```

## 补充说明
相同的脚本配置在opencv3的情况下是可以使用的，但是换到opencv4之后就无法使用了。网上说是lib库链接的原因，但是我又不想手动添加太多的静态库进来。请问如何像在opencv3一样直接链接入所有的静态文件呢？
### 描述问题
早先的版本，不論是否為靜態庫的專案，編譯後將會自動生成 `TargetName.pdb` 放在 `TargetName.lib`同一層的資料夾中。

現在這個版本中
- 如果為靜態庫專案，編譯後則生成`compile.TargetName.pdb`
- 如果是動態庫專案，編譯後則同時生成兩個pdb檔案`compile.TargetName.pdb` 和 `TargetName.pdb` 

    ``` lua
    if is_plat("windows") then
        if is_mode("debug") or is_mode("profile") then
            local symbolfile = path.absolute(target:symbolfile())
            if targetkind == "binary" then
                -- copy symbolfile to install bin_dir
            else
                -- copy symbolfile to install lib_dir
            end
        end
    end
    ```

### 期待的结果

想請問這麼設計的目的是什麼?  因為庫的debug模式我也都會打包pdb給其他人使用，現在有兩個檔案造成了些困惑。

最期望的結果就是，生成的pdb檔案名稱維持`TargetName.pdb` 
## 环境
所使用的版本是xmake v2.2.9+201912201704
操作系统是win10 x64 Pro1809

## 背景
尝试使用xmake来构建android的app
由于xmake（在我的认知里）只能生成so文件，无法将so文件打包成.apk文件。
只能手动编写打包程序，其中在打包的步骤中有一个叫dx的程序，它是本质上是一个.bat的批处理文件。还有一个aapt的程序

### 问题一
```
os.exec("dx --version")
```
会得到
![image](https://user-images.githubusercontent.com/7008358/71640922-bb95c680-2cd6-11ea-804c-4dfbb2b4e976.png)

而在命令行执行dx --version确能得到正确的输出。 从xmake提供的错误信息中也完全无法推测出问题所在。
### 解决办法
经过了一段时间的摸索，发现只要将命令从os.exec("dx --version")改为os.exec("dx.bat --version")就可以获得想要的结果。
### 建议
希望os.exec能输出更多更详细的错误信息而不是只有一行error。


### 问题二
```
import("core.project.config")
os.cd(android_build_dir)
os.exec("aapt add -v hello.unaligned.apk lib/arm64-v8a/libhello.so") 
```
![image](https://user-images.githubusercontent.com/7008358/71641089-85a61180-2cd9-11ea-9d21-eba410ba8c35.png)

lib/arm64-v8a/libhello.so会被转换为lib\arm64-v8a\libhello.so导致打包失败。
```
iimport("core.project.config")
--os.cd(android_build_dir)
os.exec("aapt add -v hello.unaligned.apk lib/arm64-v8a/libhello.so") 
```
不执行 os.cd(android_build_dir)的话，不会发生转换，但是由于目录不对，无法打包
![image](https://user-images.githubusercontent.com/7008358/71641085-60190800-2cd9-11ea-8724-b094bc54b0ab.png)
### 解决办法
直接直接调用process模块来避免发生转换
```
local proc = process.open("aapt add -v hello.unaligned.apk lib/arm64-v8a/libhello.so", outfile, errfile)
if proc then
    local waitok, status = process._subprocess.wait(proc, -1)
    process._subprocess.close(proc)
end
```

官方文档上process的使用示例中是process.wait，然而在我的环境中会出现错误。
````
error: attempt to call field 'wait' (a nil value)
````
将process.wait改为process._subprocess.wait(proc, -1)程序就能正常运行。

### 建议
希望os.exec()可以提供一个选项，不解析命令本身的内容，而是直接执行后返回结果。





对我来说，xmake是一个不错的工具，使用起来虽然小问题不断，但是总体体验不错。希望xmake能越来越好。

谢谢你们创造了xmake. :)
### 描述问题

之前由于在chroot容器中使用xmake忘记重新挂载/dev/shm （同时还映射了UID），导致 xmake 运行时无法正常创建临时文件，但是由于报错没有提供足够的有效信息，导致很长一段时间里都没有排查出具体原因，最后是通过在源代码里寻找才发现的。

### 期待的结果

任何涉及系统API的调用失败都应该返回具体的错误代码（at least）和关于此代码的简单文本描述
而只不是一个xmake自身的调用堆栈（很可能没有意义）

### 错误信息

```
> os.runv("unzip -v")
@programdir/core/sandbox/modules/os.lua:311: runv(unzip -v) failed(-1)!
stack traceback:
  [C]: in function 'error'
  @programdir/core/base/os.lua:762: in function 'raise'
  @programdir/core/sandbox/modules/os.lua:311: in function <@programdir/core/sandbox/modules/os.lua:303>
  [C]: in function 'interactive'
  ...dir/core/sandbox/modules/import/core/sandbox/sandbox.lua:93: in function 'interactive'
  @programdir/plugins/lua/xmake.lua:92: in function <@programdir/plugins/lua/xmake.lua:28>
  [C]: in function 'load'
  @programdir/core/base/task.lua:508: in function 'run'
  @programdir/core/main.lua:233: in function <@programdir/core/main.lua:171>
```
可见，从这个错误信息中，要得出/dev/shm/.xmake0目录不可写这个结论是十分困难的
（本身这个错误也是在种种巧合下出现，本质上和xmake无关）
而如果在os.runv中能直接发现给出的临时文件不可写并且报告的话，就可以减少类似问题的发生

### 相关环境

OS: ArchLinux x64
（简易复现方法：设置/dev/shm/.xmake<uid>权限使之无法访问。）

### 其他信息

前面提到的/dev/shm/.xmake0权限错误并非xmake本身的问题，但是它暴露出了xmake的其他问题即错误报告方式不合理，对解决问题的帮助不大
（不过既然用了一个绝对路径表示的文件，理应考虑这种边界情况的发生。。。）
```
~/repos/jni $ xmake f -p android --ndk=~/Documents/sdk/android/android-ndk-r20/ -v
checking for the architecture ... armv7-a
checking for the NDK directory ... /Users/admin/Documents/sdk/android/android-ndk-r20
checking for the SDK version of NDK ... 21
checking for the toolchains version of NDK ... 4.9
error: unable to parse semver 'android-4.4.2'
~/repos/jni $ xmake -h
xmake v2.2.9+201912210926, A cross-platform build utility based on Lua
```


系统里有装vs2017 ，llvm全套（独立于msys安装），msys mingw-gcc 9.2.0全套
执行xmake f -p mingw之后
再执行xmake -v
结果：
configure
{
    arch = x86_64
    debugger = D:\application\compiler\LLVM\bin
    bin = D:\msys2\mingw64\bin
    ccache = true
    buildir = build
    mode = release
    ndk_stdcxx = true
    host = windows
    cross = wasm-
    mingw = D:\msys2\mingw64
    kind = static
    theme = default
    vs = 2017
    vcpkg = D:\C-project\vcpkg
    plat = mingw
}
checking for the c compiler (cc: gcc) ... no
checking for the c compiler (cc: gcc) ... no
error: cannot get program for cc

使用xmake f --cross=x86_64-w64-mingw32- 尝试手动恢复之后还是没找到gcc
 xmake -v
configure
{
    arch = x64
    ccache = true
    host = windows
    ndk_stdcxx = true
    buildir = build
    mode = release
    plat = windows
    cross = x86_64-w64-mingw32-
    mingw = D:\msys2\mingw64
    kind = static
    theme = default
    vs = 2017
    vcpkg = D:\C-project\vcpkg
    debugger = D:\application\compiler\LLVM\bin
}
checking for the c compiler (cc) ... cl.exe
checking for the ccache ... no
checking for the flags (-Ox -fp:fast) ... ok
[  0%]: compiling.release entr_spec.c
cl.exe -c -Ox -fp:fast -nologo -Fobuild\\.objs\\entr\\windows\\x64\\release\\.\\entr_spec.c.obj entr_spec.c
error: entr_spec.c
d:\c-project\entr\entr.c(17): fatal error C1083: ▒޷▒▒򿪰▒▒▒▒ļ▒: ▒▒sys/param.h▒▒: No such file or directory
看上面报错还是用的默认的vs cl编译器，是不是需要全部手动设置一遍才能正常生效？
I didn't find *BSD systems on a supported platforms list. I also couldn't find what's the reason for this. 

If it's only for technical reasons and there would be someone to guide me through this I would be more than happy to try to contribute and work on supporting *BSD platforms. 