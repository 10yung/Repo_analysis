Commit 390497831094034ad4d0e27d7a0f8ffc6d743542 removed some checks for needs_api from PyUFunc_Accumulate, but it neglected to remove the call to NpyIter_IterationNeedsAPI(iter) that set needs_api. This function call is now unnecessary and can be safely removed.
We are trying to upgrade our company software to python3.  After completing this we realised all our services were using too much memory and the reason is that the numpy unicode arrays uses 4x as much memory as the python2 numpy strings.  This is because it uses 4 byte characters rather than 1 byte characters.

I know there is the bytestring np.bytes_ but it is not equivalent to a string and using this would require rewriting a substantial part of our codebase.  For example you would have to convert it to a string anytime you wanted to use the column for our purposes.  For example in order to check equality, to merge with other datasets etc.

Can you provide a way to have more memory efficient string arrays.  At the moment we are likely to revert our codebase to python2 again and this is the only reason. 
>>> np.exp(1e-99) - 1
0.0
>>> np.expm1(1e-99)
1e-99
>>> 

<!-- Please be sure you are following the instructions in the dev guidelines
http://www.numpy.org/devdocs/dev/development_workflow.html
-->

<!-- We'd appreciate it if your commit message is properly formatted
http://www.numpy.org/devdocs/dev/development_workflow.html#writing-the-commit-message
-->

### Reproducing code example:

```python
import numpy as np
```

### Error message:

PS D:\Google Drive\code\Machine Learning A-Z> cd 'd:\Google Drive\code\Machine Learning A-Z'; ${env:PYTHONIOENCODING}='UTF-8'; ${env:PYTHONUNBUFFERED}='1'; & 'C:\Users\tzman\.conda\envs\MLEnv\python.exe' 'c:\Users\tzman\.vscode\extensions\ms-python.python-2020.1.58038\pythonFiles\ptvsd_launcher.py' '--default' '--client' '--host' 'localhost' '--port' '60451' 'd:\Google Drive\code\Machine Learning A-Z\HelloWorld.py' 
C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\__init__.py:140: UserWarning: mkl-service package failed to import, therefore Intel(R) MKL initialization ensuring its correct out-of-the box operation under condition when Gnu OpenMP had already been loaded by Python process is not assured. Please install mkl-service package, see http://github.com/IntelPython/mkl-service
  from . import _distributor_init
Traceback (most recent call last):
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\core\__init__.py", line 24, in <module>
    from . import multiarray
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\core\multiarray.py", line 14, in <module>
    from . import overrides
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\core\overrides.py", line 7, in <module>
    from numpy.core._multiarray_umath import (
ImportError: DLL load failed: The specified module could not be found.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\tzman\.vscode\extensions\ms-python.python-2020.1.58038\pythonFiles\ptvsd_launcher.py", line 43, in <module>
    main(ptvsdArgs)
  File "c:\Users\tzman\.vscode\extensions\ms-python.python-2020.1.58038\pythonFiles\lib\python\old_ptvsd\ptvsd\__main__.py", line 432, in main
    run()
  File "c:\Users\tzman\.vscode\extensions\ms-python.python-2020.1.58038\pythonFiles\lib\python\old_ptvsd\ptvsd\__main__.py", line 316, in run_file
    runpy.run_path(target, run_name='__main__')
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\runpy.py", line 263, in run_path
    pkg_name=pkg_name, script_name=fname)
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\runpy.py", line 96, in _run_module_code
    mod_name, mod_spec, pkg_name, script_name)
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "d:\Google Drive\code\Machine Learning A-Z\HelloWorld.py", line 1, in <module>
    import numpy as np
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\__init__.py", line 142, in <module>
    from . import core
  File "C:\Users\tzman\.conda\envs\MLEnv\lib\site-packages\numpy\core\__init__.py", line 54, in <module>
    raise ImportError(msg)
ImportError: 

IMPORTANT: PLEASE READ THIS FOR ADVICE ON HOW TO SOLVE THIS ISSUE!

Importing the numpy c-extensions failed.
- Try uninstalling and reinstalling numpy.
- If you have already done that, then:
  1. Check that you expected to use Python3.7 from "C:\Users\tzman\.conda\envs\MLEnv\python.exe",
     and that you have no directories in your PATH or PYTHONPATH that can
     interfere with the Python and numpy version "1.18.1" you're trying to use.
  2. If (1) looks fine, you can open a new issue at
     https://github.com/numpy/numpy/issues.  Please include details on:
     - how you installed Python
     - how you installed numpy
     - your operating system
     - whether or not you have multiple versions of Python installed
     - if you built from source, your compiler versions and ideally a build log

- If you're working with a numpy git repository, try `git clean -xdf`
  (removes all files not under version control) and rebuild numpy.

Note: this error has many possible causes, so please don't comment on
an existing issue about this - open a new one instead.

Original error was: DLL load failed: The specified module could not be found.

### Numpy/Python version information:

Python 3.7, 64-bit    
numpy 1.18.1

### How I installed Python

I installed miniconda in 'MS Visual Studio 2019' and created an 'Conda Environment'

### your operating system

Windows 10 Home

### Whether or not you have multiple versions of Python installed

No


Hi, I run the [MacPorts automated build system](https://build.macports.org) and we have been [experiencing an issue](https://trac.macports.org/ticket/59022) for awhile where `import numpy` causes Python to crash. I don't know if this happens for any users running macOS directly on their Macs but it does happen on one of our build machinesâ€”the one running macOS Sierra 10.12. The other build machines (which run earlier and later macOS versions) don't experience the problem. All the build machines are virtual machines running under VMware ESXi 6 on 2009-model Xserves.

I believe this is similar to or the same as #13059 but in case it's not I didn't want to mix up my information in that issue. In that issue, @eric-wieser speculated that `HAVE_XGETBV` is being set incorrectly. As my lldb trace below shows, we are crashing at the `xgetbv` instruction.

@seberg asked in #13095 if the problem was the VM claiming to support AVX when it does not. I have used the [sample program](https://github.com/numpy/numpy/issues/10330#issuecomment-355837109) posted by @ulido in #10330 to check whether the machine claims to have avx support (using `__builtin_cpu_supports("avx")`). In my case here in this macOS 10.12 VM, the sample program says "AVX not supported!"

### Reproducing code example:

```python
import numpy
```

### Error message:

I am sorry, I am not familiar with gdb, but here's what happens under lldb:

```
Process 3114 resuming
Python 3.7.6 (default, Jan 17 2020, 18:32:15)
[Clang 9.0.0 (clang-900.0.39.2)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import numpy
Process 3114 stopped
* thread #2, queue = 'com.apple.main-thread', stop reason = EXC_BAD_INSTRUCTION (code=EXC_I386_INVOP, subcode=0x0)
    frame #0: 0x000000010391c691 _multiarray_umath.cpython-37m-darwin.so`npy_cpu_supports + 118
_multiarray_umath.cpython-37m-darwin.so`npy_cpu_supports:
->  0x10391c691 <+118>: xgetbv
    0x10391c694 <+121>: andl   $0x76, %eax
    0x10391c697 <+124>: movl   $0x76, %ecx
    0x10391c69c <+129>: jmp    0x10391c6dc               ; <+193>
Target 0: (Python) stopped.
```

### Numpy/Python version information:

<!-- Output from 'import sys, numpy; print(numpy.__version__, sys.version)' -->

Python 3.7.6
Numpy 1.18.1
macOS 10.12.6 Build version 16G2136
Xcode 9.2 Build version 9C40b
Apple LLVM version 9.0.0 (clang-900.0.39.2)

<!-- Please describe the issue in detail here, and fill in the fields below -->
Hi, I am trying to install a package that has a several dependencies by writing a dockerfile.
It's using python 2.7.15, and I was trying to install numpy 1.16.5

### Reproducing code example:

RUN wget https://www.python.org/ftp/python/2.7.15/Python-2.7.15.tgz
RUN tar -xzf Python-2.7.15.tgz ; cd Python-2.7.15 ; ./configure ; make ; sudo make install
RUN sudo apt-get install -y python-dev python-tk python-pip
ENV PYTHONPATH "$PYTHONPATH:/usr/local/lib/python2.7/dist-packages:/usr/lib:/usr/lib/python2.7/site-packages"

RUN pip install opencv-python --force-reinstall --ignore-installed
RUN pip install --force-reinstall numpy==1.16.5

CMD python /data/test.py (which just has import numpy in its code)
I
<!-- A short code example that reproduces the problem/missing feature. It should be
self-contained, i.e., possible to run as-is via 'python myproblem.py' -->

```python
import numpy as np
<< your code here >>
```

<!-- Remove these sections for a feature request -->

### Error message:

Traceback (most recent call last):
  File "/data/test.py", line 1, in <module>
    import numpy
  File "/usr/local/lib/python2.7/dist-packages/numpy/__init__.py", line 142, in <module>
    from . import core
  File "/usr/local/lib/python2.7/dist-packages/numpy/core/__init__.py", line 71, in <module>
    raise ImportError(msg)
ImportError: 

<!-- If you are reporting a segfault please include a GDB traceback, which you
can generate by following
https://github.com/numpy/numpy/blob/master/doc/source/dev/development_environment.rst#debugging -->

<!-- Full error message, if any (starting from line Traceback: ...) -->

### Numpy/Python version information:

<!-- Output from 'import sys, numpy; print(numpy.__version__, sys.version)' -->


Fixes gh-14286

Add references to `site.cfg.example` to the docs, and fix the example file's `DEFAULT` section name.
More sys.version cleanups (these are not limited to test files like #15305 was), after this change only a handful sys.versions exist which I'll add remove/convert/simplify in a final PR.

#15306 
Hi.

The page at https://numpy.org/devdocs/user/basics.types.html does not include a valid data type in numpy, that is, int0.
Request to edit the datatype into the doc.

<------ reproducing code example ------>

```python
>>> import numpy as np
>>> np.int0 is np.int64
True
>>> np.__version__
'1.81.1'
>>> exit()
```

# After exiting

[user@linux~]$ python --version
Python 3.8.1

<!------ End reproducing code example ------>

The code example is provided thanks to user 'Right leg' from here, 
 https://stackoverflow.com/questions/48350693/what-is-numpy-method-int0 .

Thank you.

----

**EDIT by seberg: In gh-11025 Robert notes that "In Numeric, Int0 is indeed equivalent to Int8"** if this is documented, we have to make sure to be correct as to whether this is an alias to `intp` or to `int8`.

For the special case shown below, `histogram_bin_edges` with strategy `doane` hangs forever and wastes a single CPU and all system memory.

### Reproducing code example:

Attention, will start to eat up all system memory!

```python
import numpy as np
np.histogram_bin_edges([0.0, 0.0, 1.0], "doane", range=(0.0, 1056964608.0))
```

The error will not appear if only a single `0.0` is passed in the array.

Same thing happens with:
```python
import numpy as np
np.histogram_bin_edges([0.0, 1.0, -1.0], "doane", range=(-1.0, 4294967296.0))
```

### Error message:

No error message, code just hangs and wastes all memory.

### Numpy/Python version information:

```
1.18.1 3.8.1 (default, Jan  8 2020, 23:09:20) 
[GCC 9.2.0]
```

the same thing happens with:
```
1.17.4 3.7.4 (default, Nov 21 2019, 11:30:33) 
[GCC 9.2.0]
```

(Issue found in a unit test using hypothesis)