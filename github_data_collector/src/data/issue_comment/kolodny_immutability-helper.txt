```ts
interface UpdateArray {
  $updateArrayById: string;
}

export function myUpdate<T>(object: T, spec: Spec<T, CustomCommands<UpdateArray>>) {
  // Type instantiation is excessively deep and possibly infinite. ts(2589)
  return update(object, spec);
}
```
```
update(acc, {
        [time]: {
          $set: { "value": "data" }
        }
      })
```

This is the update call from a MWE that inexplicably returns objects with key 'undefined' rather than 'value'
![image](https://user-images.githubusercontent.com/23560829/63931253-8c462300-ca72-11e9-8539-962b352c36e0.png)

In fact, the first few calls work as expected
![image](https://user-images.githubusercontent.com/23560829/63931508-08d90180-ca73-11e9-9818-791ccf3f56c3.png)
, but then it starts setting undefined
![image](https://user-images.githubusercontent.com/23560829/63931561-27d79380-ca73-11e9-9f8b-d8221ed3820a.png)
, and by the end of my reduce, all the keys are undefined, as shown in the first image.
`delete array[index]` leaves a gap in the array. Using `array.splice(index, 1)` would be better.
It's a nice utility, the readme should give a description of it and provide an example.
Some operations working with Map/Set doesn't work in IE 11.
Just Increase the judgment of instanceof in index.ts can fix it maybe.
Seems imutability-helper far away from Immutable.js when mutating. Are there any benchmarks or comparing imutability-helper with alternatives (seemless-immutable\timm\etc..)?
For lists of checkboxes like this:

![image](https://user-images.githubusercontent.com/1112998/34587397-0e3fd590-f15d-11e7-9f01-3a28c8385465.png)

I like to store the IDs of the checked elements in a `Set`.

To "toggle" a checkbox right now I have to do this:
   
```js
checkOccasion = id => ev => {
    const spec = {
        enabled: {
            [ev.target.checked ? '$add' : '$remove']: [id],
        }
    };
    this::updateState(spec);
}
```

```jsx
<CheckboxLabel value={occ.id} checked={enabled.has(occ.id)} onChange={this.checkOccasion(occ.id)}>{occ.name}</CheckboxLabel>
```

Would be nicer if instead I could just do:

```js
const spec = {
    enabled: {
        $toggle: [id],
    }
};
```

i.e. `enabled` is a `Set`, so if `id` is already contained in the set, it would be removed, otherwise it would be added.

----

Actually, alternatively `$toggle` could accept an object [too] which would explicitly let you add or remove specific elements:

```js
const spec = {
    enabled: {
        $toggle: {
            [id]: ev.target.checked
        },
    }
};
```

That'd let us skip the `.has` check too.
  