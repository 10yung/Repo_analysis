Closes: #15 
For konform:0.1.0 version, it is "must have at least 2 characters" not "must be at least 2 characters" by default

```
UserProfile::age ifPresent {
    minimum(0)
    maximum(150)
}
```
Why it is neccesary to have `ifPresent`? 
Just apply validation rules ony if value is not null in any case.
For example a login field can be a phone or and email.
For example I want to validate an email field, I want to validate it against a regexp pattern, and only it is a valid email I want to check if it is already taken(persisted in database).
https://swagger.io/specification/#schema-object

Swagger/OpenAPI schema contains class/object definition and validation rules.
It will be great if this library will provide this information in order to be able to integrate it for full schema generation from code.

For example Spring or Micronaut can generate endpoints schema and integrate class definitions from this library.
Adds functionality described in #4 

Tests are included.
Inspired by [this reddit comment](https://old.reddit.com/r/Kotlin/comments/bbjwk9/konform_validation_dsl_for_kotlin/ekk0ypz/).

Instead of writing
```
minimum(0)
maximum(150)
```
the user could instead use
```
inRange(0..5)
between(0, 5)
betweenExclusive(0, 5)
```
Currently a `ValidationResult<T>` can be used to get errors for a specific field:
```kotlin
result[UserProfile::fullName]
```

Is there any way to get a map of all errors for a given validation (not a separate list for every field)?

