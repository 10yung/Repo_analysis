- See: https://github.com/rspec/rspec-mocks/issues/1250
To match
```ruby
hash = {OpenStruct.new(value: :special) => true}
```
a workaround had to be used
```ruby
expect(hash.to_a)
  .to contain_exactly([have_attributes(value: :special), true])
```

This change makes it simpler:
```ruby
expect(hash)
  .to include(have_attributes(value: :special) => true)
```

Found here: https://github.com/rubocop-hq/rubocop-rspec/pull/851#discussion_r362733064

See: https://github.com/rspec/rspec-dev/pull/233
### Subject of the issue
Custom matchers with keyword arguments cause the following warning:

> ~/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/gems/rspec-expectations-3.9.0/lib/rspec/matchers/dsl.rb:467: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call

### Your environment
* Ruby version: 2.7.0
* rspec-expectations version: 3.9.0

### Steps to reproduce
```ruby
require 'rspec'

RSpec::Matchers.define(:be_foo) do |bar: nil|
  match { expect(true).to be true }
end

RSpec.describe 'Foo' do
  it 'works' do
    expect(:foo).to be_foo(bar: :qux)
  end
end

RSpec::ExampleGroups::Foo.run
```

### Expected behavior
No warning is emitted.

### Actual behavior
A warning is emitted.

The purpose of this (rather controversial) change is to discourage the usage of a so-called implicit block expectation syntax:

```ruby
subject { -> { do_something } }
it { is_expected.to change(something).to(new_value) }
```

In case this syntax is being used, a deprecation warning will be printed.

This syntax was referenced to as:

> pretty obtuse and not something I’d recommend, generally.
https://github.com/rspec/rspec-expectations/issues/805#issuecomment-112239820

> We should mention they’re not supported.
https://github.com/rspec/rspec-expectations/issues/805#issuecomment-112238533

This is a less strict follow-up to #1125, which was released as part of a patch release 3.8.5, and later reverted in 3.8.6 due to a number of complaints.
Even though [workarounds are possible for the most desperate usages of this syntax](https://github.com/rodjek/rspec-puppet/pull/767), introducing a deprecation warning in pre-4.0 version of RSpec and removal (coincidental, but still) of support for the implicit block syntax in a major release makes more sense than removal of it in a minor/patch version, since it's used quite often across different codebases I've seen.

### Example Deprecation Message

```
Deprecation Warnings:

You must pass a block rather than an argument to `expect` to use the provided block expectation matcher (change `1`), or the matcher must implement `supports_value_expectations?`.
```

I'm not quite certain it's the best one possible, since it does not refer to the code that led to this deprecation message.
Appreciate any hint how to make it better.

### Additional Things to Notice

According to https://github.com/rspec/rspec-expectations/pull/1125#issuecomment-539429318, the following works with no disruptions:

```ruby
RSpec.describe 'introspect' do
  it do
    expect(-> {}).to be_a(Proc)
  end
end
```

### Related Links

https://github.com/rspec/rspec-expectations/issues/526
https://github.com/rspec/rspec-expectations/pull/530
https://github.com/rspec/rspec-expectations/issues/536
https://github.com/rspec/rspec-expectations/pull/1066
https://github.com/rspec/rspec-expectations/pull/1125

https://blog.rubystyle.guide/rspec/2019/07/17/rspec-implicit-block-syntax.html
https://www.reddit.com/r/ruby/comments/cejl3q/call_for_discussion_rspec_implicit_block
https://github.com/rubocop-hq/rspec-style-guide/issues/76
https://github.com/rubocop-hq/rubocop-rspec/pull/789

Example fix for matcher libraries that are forced to keep the interface to provide the syntax for their users https://github.com/rodjek/rspec-puppet/pull/767
### Subject of the issue
When a duplicate matcher is introduced, a warning should be produced by RSpec.

### Your environment
* Ruby version: 2.5.3
* rspec-expectations version: 3.8.4

### Steps to reproduce
```ruby
RSpec::Matchers::DSL::Matcher.new(:duplicate_matcher, {}, self, nil)
RSpec::Matchers::DSL::Matcher.new(:duplicate_matcher, {}, self, nil)
```

### Expected behavior
It should create a warning

### Actual behavior
There is no warning for the user about the duplicate matcher.

### New Behavior
Introduces a warning when a duplicate matcher is introduced into the testing system

Issue link: https://github.com/rspec/rspec-expectations/issues/1135


Expecting a hash to include another when using composable matchers gives a misleading diff for the subset of the hash that _did_ match:

```
  1) includes should include {:a => /2/, :b => "bar"}
     Failure/Error:
       expect(
         {
           a: '123',
           b: 'foo',
         }
       ).to include(a: /2/, b: 'bar')
     
       expected {:a => "123", :b => "foo"} to include {:b => "bar"}
       Diff:
       @@ -1,3 +1,3 @@
       -:a => /2/,
       -:b => "bar",
       +:a => "123",
       +:b => "foo",
```
Notice that
```diff
-:a => /2/,
+:a => "123",
```
is in the diff, despite `"123"` being matched by `/2/` - this can make it harder to determine what the problem is, with a larger hash.

N.b. that the `expected {:a => "123", :b => "foo"} to include {:b => "bar"}` part of the failure message is good, and does indicate the problem - this issue is only about the "Diff:" part.

### Your environment
```
Resolving dependencies...
Using bundler 1.17.3
Using diff-lcs 1.3
Using rspec-support 3.7.1
Using rspec-core 3.7.1
Using rspec-expectations 3.7.0
Using rspec-mocks 3.7.0
Using rspec 3.7.0
Ruby version is: 2.5.3
```

### Steps to reproduce
```ruby
# frozen_string_literal: true

begin
  require "bundler/inline"
rescue LoadError => e
  $stderr.puts "Bundler version 1.10 or later is required. Please update your Bundler"
  raise e
end

gemfile(true) do
  source "https://rubygems.org"

  gem "rspec", "3.7.0" # Activate the gem and version you are reporting the issue against.
end

puts "Ruby version is: #{RUBY_VERSION}"
require 'rspec/autorun'

RSpec.describe 'includes' do
  it do
    expect(
      {
        a: '123',
        b: 'foo',
      }
    ).to include(a: /2/, b: 'bar')
  end
end
```

### Expected behavior
The diff does _not_ highlight matched entries as different:
```diff
@@ -1,3 +1,3 @@
 :a => "123",
-:b => "bar",
+:b => "foo",
```

### Actual behavior
The diff _does_ highlight matched entries as different:
```diff
@@ -1,3 +1,3 @@
-:a => /2/,
-:b => "bar",
+:a => "123",
+:b => "foo",
```

## Previous Behavior

The aliased matcher implementation of a description currently replaces all instance of the old matcher's name in the new matcher's name. If it happens that the expected values include the old matcher's name, these also get overwritten. In the examples below, the string `"include"` is replaced in both the outputs by the new matcher's name.

```ruby
it 'overwrites data for a_string_including' do
  my_string = "a string with 'include'"
  expect("some random string").to match(a_string_including(my_string))
end

# => expected "some random string" to match 
#       (a string including "a string with 'a string including'")
```

```ruby
it 'overwrites data for a_hash_including' do
  my_hash = { my_string: "a string with 'include'" }
  expect({}).to match(a_hash_including(my_hash))
end

# => expected {} to match 
#       (a hash including {:my_string => "a string with 'a hash including'"})
```

## New Behavior

This change makes it so it only replaces the first instance of the original name so none of the expected data is also overwritten. The two above error outputs would be the following:

`expected {} to match (a hash including {:my_string => "a string with 'include'"})`
`expected "some random string" to match (a string including "a string with 'include'")`

I saw this in https://github.com/rspec/rspec-rails/issues/1835.
### Subject of the issue
I would like to write a spec where I assert that a value should not be included in an enumerable that is lazy and infinite. For example:

```ruby
expect(fibonacci_sequence).not_to include(4)
# or
expect(1..).not_to include(0)
```

However, the rspec include matcher goes into an infinite loop and never returns for these specs, despite the fact that `(1..).include?(0)` does return `false` immediately (for `fibonaccci_sequence` it would depend on your implementation).

### Your environment
* Ruby version: 2.6.0
* rspec-expectations version: 3.8.2

### Steps to reproduce

I've created a simple test case on github [here](https://github.com/iainbeeston/rspec-test), which reproduces the issue using an infinite range. It's run on travis [here](https://travis-ci.org/iainbeeston/rspec-test)

### Expected behavior

If `include?` returns false, the expectation should fail.

### Actual behavior

It goes into an infinite loop and the expectation never completes.

It [looks like](https://github.com/rspec/rspec-expectations/blob/v3.8.2/lib/rspec/matchers/built_in/include.rb#L131) this is because the matcher calls `any?` *after* `include?` and that does never return.