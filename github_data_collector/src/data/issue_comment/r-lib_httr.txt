In some  cases checking if is **interactive** mode are not as we need.
Since is_interactive parameter are deprecated and the is_interactive function enable to mocked  the native interactive function.
This pull request  add  just two lines to **export**  _is_interactive_ function that is in 
oauth-init.R,  **enabling** developers to **override** _is_interactive_.

I use this to help me use R and Google Drive / Sheets in Google Colaboratory, which are also useful to many users.
But its also useful to others cases and tests.




Small typo
I am attempting to make an authenticated GET request that retrieves a presigned URL to file sitting in Amazon S3. However, I am getting a 400 response with the following error: 

"Only one auth mechanism allowed; only the X-Amz-Algorithm query parameter, Signature query string parameter or the Authorization header should be specified". 

I can make the same request in Postman and successfully retrieve my file. Seems like I need to drop my authorization headers on the redirect that is happening. Is this possible with httr?
Probably not an issue but I have asked the question [here](https://stackoverflow.com/questions/58770233/from-python-to-httr)

I have a weird api setting an additional static variable in the call `grant_type=password`. I am not sure how to pass it within `authenticate` method? any pointers would be helpful.

Ps I can authenticate using python without any issues
Hello Team, sorry to bother you guys with this issue, I am new in R+ and I am trying to pull data from Trello, I am using get_token and trello_get_token but both of them I am getting the following error:


Error in init_oauth1.0(self$endpoint, self$app, permission = self$params$permission,  : 
  Internal Server Error (HTTP 500). 

Here is my code 

`

library(trelloR)
library(httr)
library(httpuv)
library(httr)


source("C:/Users/cgalv/Desktop/Trello/trello_get_token.R")
token = trello_get_token("???", "???", "trello")

source("C:/Users/cgalv/Desktop/Trello/get_token.R")
token = get_token("???", "???", scope = c("read", "write"))

thanks for your help !!!
`
I am testing an internal FHIR api, to pull the data into R. This is a test environment with basic HTTP authentication. It works when I try with python `http.client.HTTPSConnection`. Also works with API tested online. I am not sure what I am missing when using the httr package in R.I get the following message `"Authentication information not present or not in the correct format"`. 
 Appreciate your help

```r
require("httr")
require("jsonlite")

username <- "userid"
password <- "****"
token<- authenticate(username, password, type = "basic")

url <-"https://host//Interconnect-fhir/api/FHIR/DSTU2/Patient?family=Joe&Given=Mother&Birthdate=2222-12-22", headers=headers"

headers<- httr::add_headers(
	`Content-Type` = "application/json",
	`Authorization` = 'Basic dsdsdsdsdsdsd',
         'epic-client-id': "alphanumericnumber",
        'epic-user-id': "userid",
        'epic-user-idtype': "EXTERNAL")

token_request <- GET(url = url, config = list(headers,token))
token_body <- content(token_request, as = 'parsed')
token_body
```
Could we set the default handling for mime type "application/json+geo" to be the same as for "application/ json" so it does not need to be specified manually? Or even more general, does it make sense to strip away the "+..." always before deciding how to parse the output, so all "json+xyz" would fall back to "json"? 

``` r
response <- httr::GET("https://api3.geo.admin.ch/rest/services/all/MapServer/identify?geometry=2679593.28515719,1249208.93603668&geometryType=esriGeometryPoint&layers=all:ch.are.bauzonen&mapExtent=312250,-77500,1007750,457500&imageDisplay=1391,1070,96&lang=de&tolerance=0&geometryFormat=geojson&sr=2056")
response
#> Response [https://api3.geo.admin.ch/rest/services/all/MapServer/identify?geometry=2679593.28515719,1249208.93603668&geometryType=esriGeometryPoint&layers=all:ch.are.bauzonen&mapExtent=312250,-77500,1007750,457500&imageDisplay=1391,1070,96&lang=de&tolerance=0&geometryFormat=geojson&sr=2056]
#>   Date: 2019-10-16 08:25
#>   Status: 200
#>   Content-Type: application/geo+json
#>   Size: 4.94 kB
#> <BINARY BODY>
head(httr::content(response))
#> [1] 7b 22 72 65 73 75
str(httr::content(response, as = "parsed", type = "application/json"), max.level = 3)
#> List of 1
#>  $ results:List of 1
#>   ..$ :List of 8
#>   .. ..$ geometry  :List of 2
#>   .. ..$ layerBodId: chr "ch.are.bauzonen"
#>   .. ..$ bbox      :List of 4
#>   .. ..$ featureId : int 18642
#>   .. ..$ layerName : chr "Bauzonen Schweiz (harmonisiert)"
#>   .. ..$ type      : chr "Feature"
#>   .. ..$ id        : int 18642
#>   .. ..$ properties:List of 9
```

<sup>Created on 2019-10-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Fixes r-lib/httr#619
Fixes r-lib/httr#607
I got a different behavior using httr in windows and in linux. It apeared first time at the end of August on the automatic build of my bioconductor package (ndexr).

It seems that omitting the protocol in the url causes an error on windows machines since:
```r
httr::GET(url="www.ndexbio.org/v2/admin/status")
#Error in if (is_http) { : argument is of length zero
```
linux or mac os are not affected.

