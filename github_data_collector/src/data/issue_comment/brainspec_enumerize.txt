I've tried to use pluck on the enumerized value, but instead of returning the databased stored value, it gets casted into a string. Making it impossible for me to do an `upsert` as it needs the value itself. 

Is there a way to make the pluck to return the values themselves (using `_value` doesn't work, as I get an SQL error saying there is no such column) or looking the value up in some other way, just from a string?
Rails 6 ships with a nice set of 'bulk insert' features, while these are not working properly with enumerized attributes (inserting `nil`s)...

This PR attempts to add a support for these features into `enumerize`
Guys, I think that the way this library sets default values for enumerized attributes is wrong.
I am referring to this part of [this method](https://github.com/brainspec/enumerize/blob/master/lib/enumerize/base.rb#L91):

```ruby
if (!attr_value || attr_value.empty?) && (!value_for_validation || value_for_validation.empty?)
  value = Utils.call_if_callable(attr.default_value, self)
  public_send("#{attr.name}=", value)
end
```

It seems convenient in most cases. But not in my case :)

I use `multiple: true` and have multiple default values.
And if an empty array was stored **intentionally** - this `if` statement is getting triggered, and here we got a set of default values instead of an empty set.

So generally, it seems like this `if` statement should not be triggered for empty arrays.

---

But that is still tricky, isn't it? Seems like this library is just "guessing" what is the desired behavior.

So maybe instead of guessing, it could be configurable? We could have an additional option like "allow_blank/empty".

Maybe not, maybe we just have to treat empty arrays different.

For singular enums, that's kinda hard to figure out whether that blank value is desired or should it be replaced with a default one. And nobody complained before, so it's most likely not worth it. :wink: 