- [ ] https://github.com/OGRECave/ogre-next/commit/6532b3ec1e0e602f553dfff025ef5f21f17b83f6 & https://github.com/OGRECave/ogre-next/commit/7154e7cc57d090851d9f5f9faa8f1928ac2a58ab
- [ ] https://github.com/OGRECave/ogre-next/commit/5a06a8959152efd738aeb49f6bc6876856c74bc3
- [ ] https://github.com/OGRECave/ogre-next/commit/7c1cb5d875dcadacb9071b36791f00d46a06b73b
following intuition. instead using the reverse order as of now.
Also drop the setPriority mechanism.
like is done for UBOs and SSBOs. As they are unnamed, we can not attach them to an shared_paramater set.

workaround: use SSBOs
to efficiently map to constant buffers/ UBOs
similar to GL3, implement the follwing buffer types:
- [ ] UBO -> Constant Buffer (binding to shared_params missing) [forums thread](https://forums.ogre3d.org/viewtopic.php?f=5&t=95444&p=546387)
- [ ] SSBO -> RWStructuredBuffer
- [ ] AtomicCounterBuffer -> RWStructuredBuffer + D3D11_BUFFER_UAV_FLAG_COUNTER
#### System Information
- Ogre Version: 1.12.4 
- Operating System / Platform: Ubuntu 18.04 
- RenderSystem: :grey_question:

#### Detailled description
I'm trying to update the ogre package released for Debian (and Ubuntu) to the current 1.12.4 and to enable some language bindings as well. As imgui is not included in the release tarball I'm currently disabling it (I read about #1332 ) by setting `-DOGRE_BUILD_COMPONENT_OVERLAY_IMGUI:BOOL=FALSE`

However it then fails to find the imgui include later on if I enable python bindings generation:



#### log
```
[ 97%] Building CXX object Components/Python/CMakeFiles/_Overlay.dir/OgreOverlayPYTHON_wrap.cxx.o
cd /home/simon/proggn/ogre/salsa_ogre/ogre/obj-x86_64-linux-gnu/Components/Python && /usr/bin/c++  -D_Overlay_EXPORTS -I/usr/include/python3.6m -I/home/simon/proggn/ogre/salsa_ogre/ogre/obj-x86_64-linux-gnu/include -I/home/simon/proggn/ogre/salsa_ogre/ogre/OgreMain/include -I/home/simon/proggn/ogre/salsa_ogre/ogre/Components/Overlay/include  -Wall -Winit-self -Wcast-qual -Wwrite-strings -Wextra -Wundef -Wmissing-declarations -Wno-unused-parameter -Wshadow -Wno-missing-field-initializers -Wno-long-long -g -O2 -fdebug-prefix-map=/home/simon/proggn/ogre/salsa_ogre/ogre=. -fstack-protector-strong -Wformat -Werror=format-security -pipe -Wall -Wdate-time -D_FORTIFY_SOURCE=2 -Wdate-time -D_FORTIFY_SOURCE=2 -msse -fPIC -fvisibility=hidden -fvisibility-inlines-hidden   -Wno-cast-qual -Wno-shadow -Wno-maybe-uninitialized -Wno-unused-label -Wno-unused-but-set-variable -Wno-missing-declarations -std=c++11 -o CMakeFiles/_Overlay.dir/OgreOverlayPYTHON_wrap.cxx.o -c /home/simon/proggn/ogre/salsa_ogre/ogre/obj-x86_64-linux-gnu/Components/Python/OgreOverlayPYTHON_wrap.cxx
/home/simon/proggn/ogre/salsa_ogre/ogre/obj-x86_64-linux-gnu/Components/Python/OgreOverlayPYTHON_wrap.cxx:4673:10: fatal error: imgui.h: Datei oder Verzeichnis nicht gefunden
 #include "imgui.h"
          ^~~~~~~~~
compilation terminated.
```
#### fix

seems to be a missing conditional in OgreOverlay.i if I change lines 23& 24 to 

```
#ifdef HAVE_IMGUI
#include "imgui.h"
#include "OgreImGuiOverlay.h"
#endif
```
it compiles successfully
#### System Information
- Ogre Version: 1.12-master
- Operating System / Platform: Windows 10 64-bit
- RenderSystem: OpenGL3+

#### Detailled description
This issue has existed for a long time (at least since 1.9), but it has started occuring more and more with every major update of Ogre. Now with 1.12 and especially with relatively flat surfaces this occurs quite consistently.

Only way that I've found how to detect that this is happening is to compare the terrain root scene node AABB vs. the terrain WorldAABB like this:

`camera->isVisible(terrain->_getRootSceneNode()->_getWorldAABB()) != camera->isVisible(terrain->getWorldAABB())`

If that is true, then also the terrain will not be visible. I've still been unable to locate the real reason why those AABB's would be different in that case and what could cause it.
and derive UnifiedHighLevelGpuProgram and NullProgram from GpuProgramPtr

fixes #1368 

we cannot unify any further as:
- HighLevelProgramManager has its own resource namespace right now, merging with low level would cause conflicts in user code
- The factory classes do not consider syntax, which requires special hacks
with #1369, we can now delegate to low-level programs as well. We should make this clear in the API. Also there is nothing high-level to the Unified programs.

- [ ] typedef HighLevelGpuProgramPtr to GpuProgramPtr
