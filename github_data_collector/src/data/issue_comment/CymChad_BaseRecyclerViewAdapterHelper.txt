如果adapter数据泛型为Object
public class XXXProviderMultiAdapter extends BaseProviderMultiAdapter<Object>{}，
添加的ItemProvider也要写成Object
public class RecordPercentItemProvider extends BaseItemProvider<Object>,
conver()里面每次都要加上类型转换
 @Override
 public void convert(@NotNull BaseViewHolder helper, @Nullable Object data) {
        if(data instanceof RecordPercentGroupBean ){
            RecordPercentGroupBean item = (RecordPercentGroupBean) data;
            //...
        }
  }
使用 kotlin 开发
Type mismatch: inferred type is Any? but MainModule?（自定义类名） was expected
代码 如下 ：
class MainModule : BaseData {
    var moduleName: String = ""
    var iconUrl: String = ""
    var isOpen: Boolean = false


    constructor(id: Int, moduleName: String, iconUrl: String) {
        this.moduleName = moduleName
        this.iconUrl = iconUrl
        this.id = id

    }

    constructor(moduleName: String, iconUrl: String, isOpen: Boolean) : super() {
        this.moduleName = moduleName
        this.iconUrl = iconUrl
        this.isOpen = isOpen
    }

}
class MainModuleAdapter(list: MutableList<MainModule>) :
    BaseQuickAdapter<MainModule, BaseViewHolder>(R.layout.item_main_module,list){

//    constructor(list: MutableList<MainModule?>) : this() {
//
//    }

    override fun convert(helper: BaseViewHolder, item: MainModule?) {
        helper.getView<TextView>(R.id.module_name).setText(item?.moduleName)
        //helper.getView<ImageView>(R.id.module_icon).loadImage(item?.iconUrl)
       // if (!item?.isOpen!!) ToastUtil.showErrorToast(context, "在未开放${item?.moduleName}功能")

    }

}
   var mainModules: ArrayList<MainModule> = ArrayList()
  moduleAdapter.setOnItemClickListener { adapter, view, position ->
            val module:MainModule? = adapter.getItem(position)
           when(module?.moduleName){
             

            }

        }
直接在  val module:MainModule? = mainModules.get(position)  取数据 没有问题  调用
  val module:MainModule? = adapter.getItem(position) 报 Type mismatch: inferred type is Any? but MainModule? was expected  泛型也写了 




version:2.9.50
issue: 
recyclerView.setLayoutManager(new GridLayoutManager(this, 2)); 如果使用这个布局，
setEmptyView显示的时候也是按照了GridLayoutManager 来分成两列显示，导致显示只显示在第一个单元格
这是demo中不加载更多数据的代码，但是我要做分页加载更多要怎么做呢，请大佬赐教
    private ArrayList<MultiItemEntity> generateData() {
        int lv0Count = 9;
        int lv1Count = 3;
        int personCount = 5;

        String[] nameList = {"Bob", "Andy", "Lily", "Brown", "Bruce"};
        Random random = new Random();

        ArrayList<MultiItemEntity> res = new ArrayList<>();
        for (int i = 0; i < lv0Count; i++) {
            Level0Item lv0 = new Level0Item("This is " + i + "th item in Level 0", "subtitle of " + i);
            for (int j = 0; j < lv1Count; j++) {
                Level1Item lv1 = new Level1Item("Level 1 item: " + j, "(no animation)");
                for (int k = 0; k < personCount; k++) {
                    lv1.addSubItem(new Person(nameList[k], random.nextInt(40)));
                }
                lv0.addSubItem(lv1);
            }
            res.add(lv0);
        }

        return res;
    }
**版本号：2.9.46**
列表添加了两个headerView,在headerView下方有个刷新数据的按钮，点击刷新按钮，数据刷新然后会滚动到列表顶部，我用了BaseMultiItemQuickAdapter和上拉加载，请问有什么办法不要滚动到列表顶部
Normal solutions of taking recycler view screenshot were not working with this library.

So i found  way to do this.

```
   public  Bitmap getRecyclerViewScreenshot(RecyclerView view) {
        int size = view.getAdapter().getItemCount();
        int topheight = adapter.getHeaderLayout().getMeasuredHeight();
        int bottomheight = adapter.getFooterLayout().getMeasuredHeight();
        RecyclerView.ViewHolder holder = view.getAdapter().createViewHolder(view, 0);
        view.getAdapter().onBindViewHolder(holder, 0);
        holder.itemView.measure(View.MeasureSpec.makeMeasureSpec(view.getWidth(), View.MeasureSpec.EXACTLY),
                View.MeasureSpec.makeMeasureSpec(0, View.MeasureSpec.UNSPECIFIED));
        holder.itemView.layout(0, 0, holder.itemView.getMeasuredWidth(), holder.itemView.getMeasuredHeight());
        Bitmap bigBitmap = Bitmap.createBitmap(view.getMeasuredWidth(), (holder.itemView.getMeasuredHeight() * size)+topheight+bottomheight,
                Bitmap.Config.ARGB_8888);
        Canvas bigCanvas = new Canvas(bigBitmap);
        bigCanvas.drawColor(Color.WHITE);
        Paint paint = new Paint();
        int iHeight = 0;
        holder.itemView.setDrawingCacheEnabled(true);
        holder.itemView.buildDrawingCache();

        Bitmap headerBitmap= loadBitmapFromView(adapter.getHeaderLayout());
        bigCanvas.drawBitmap(headerBitmap, 0f, iHeight, paint);
        iHeight+=topheight;
        bigCanvas.drawBitmap(holder.itemView.getDrawingCache(), 0f, iHeight, paint);
        holder.itemView.setDrawingCacheEnabled(false);
        holder.itemView.destroyDrawingCache();
        iHeight += holder.itemView.getMeasuredHeight();
        for (int i = 1; i < size; i++) {
            view.getAdapter().onBindViewHolder(holder, i);
            holder.itemView.setDrawingCacheEnabled(true);
            holder.itemView.buildDrawingCache();
            bigCanvas.drawBitmap(holder.itemView.getDrawingCache(), 0f, iHeight, paint);
            iHeight += holder.itemView.getMeasuredHeight();
            holder.itemView.setDrawingCacheEnabled(false);
            holder.itemView.destroyDrawingCache();
        }
        Bitmap footerBitmap= loadBitmapFromView(adapter.getFooterLayout());
        bigCanvas.drawBitmap(footerBitmap, 0f, iHeight, paint);

        return bigBitmap;
    }

    public  Bitmap loadBitmapFromView(View v1) {
//        v.layout(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());

//        Bitmap b = Bitmap.createBitmap( v.getLayoutParams().width, v.getLayoutParams().height, Bitmap.Config.ARGB_8888);
//        Canvas c = new Canvas(b);
//        v.layout(v.getLeft(), v.getTop(), v.getRight(), v.getBottom());
//        v.draw(c);
//        return b;
        Bitmap bitmap;
        v1.setDrawingCacheEnabled(true);
// bitmap = Bitmap.createBitmap(v1.getDrawingCache());
        bitmap = loadBitmapFromView(v1, v1.getWidth(), v1.getHeight());
        v1.setDrawingCacheEnabled(false);
        return bitmap;
    }

    public static Bitmap loadBitmapFromView(View v, int width, int height) {
        Bitmap b = Bitmap.createBitmap(width , height, Bitmap.Config.ARGB_8888);
        Canvas c = new Canvas(b);
        v.layout(0, 0, width, height);
//Get the view’s background
        Drawable bgDrawable =v.getBackground();
        if (bgDrawable!=null)
//has background drawable, then draw it on the canvas
            bgDrawable.draw(c);
        else
//does not have background drawable, then draw white background on the canvas
            c.drawColor(Color.WHITE);
        v.draw(c);
        return b;
    }


    public void scrollUp() {
        new Handler().post(new Runnable() {
            @Override
            public void run() {
                final MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_DOWN, rvInvoice.getWidth() / 2, rvInvoice.getHeight() / 2, 0);
                dispatchTouchEvent(event);
                event.recycle();
            }
        });

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                final MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_MOVE, rvInvoice.getWidth() / 2, rvInvoice.getHeight() / 2, 0);
                dispatchTouchEvent(event);
                event.recycle();
            }
        }, 50);

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                final MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_MOVE, rvInvoice.getWidth() / 2, rvInvoice.getHeight() / 2 - 400, 0);
                dispatchTouchEvent(event);
                event.recycle();
            }
        }, 100);

        new Handler().postDelayed(new Runnable() {
            @Override
            public void run() {
                final MotionEvent event = MotionEvent.obtain(System.currentTimeMillis(), System.currentTimeMillis(), MotionEvent.ACTION_UP, rvInvoice.getWidth() / 2, rvInvoice.getHeight() / 2 - 400, 0);
                dispatchTouchEvent(event);
                event.recycle();
            }
        }, 200);
    }

```


Before calling  getRecyclerViewScreenshot(),
I have to manually load footer by programatically scrolling to bottom,

```
 rvInvoice.scrollToPosition(adapter.getData().size());
//Reached last element,footer still not loaded,swipe up to bring footer on screen 
  scrollUp(); 
getRecyclerViewScreenshot();
```
版本：2.9.50
使用StaggeredGridLayoutManager时position异常。
场景：瀑布流列表，两竖列，使用ItemDecoration增加间距
正常排序时：
0 1
2 3
4 5
异常时，位置交换了。
0 1
3 2
5 4
使用recyclerView.getChildAdapterPosition(view)，拿到的真实下标。

我在一个多type的      RecyclerView中这样设置间距没有效果  我使用的方式对吗
GridSectionMultiAvgGapItemDecoration gs = new GridSectionMultiAvgGapItemDecoration();
        GridSectionMultiAvgGapItemDecoration.SectionDecoration s = new GridSectionMultiAvgGapItemDecoration.SectionDecoration(30,30,30,30);
        gs.addSectionDecoration(1, s);
        gs.setLastSectionBottomMarginDp(100);
        mRecyclerView.addItemDecoration(gs);

