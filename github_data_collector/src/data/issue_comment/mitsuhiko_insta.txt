I've got some tests using Insta, to test the output of templating for my webapp. On macOS these work just great, with filenames that are relevant to the test in question. (e.g. `tests__no_templates.snap`, `tests__simple_template.snap`, etc).

When I'm running the exact same build on my CI setup, which runs on Linux instead, this fails. And it fails because the filenames it is looking for are `tests__main.snap`, `tests__main-2.snap`, etc.

In both cases I'm using the latest nightly Cargo `cargo 1.41.0-nightly (626f0f40e 2019-12-03)` and Rust `rustc 1.42.0-nightly (0de96d37f 2019-12-19)`, and I'm using Insta 0.12.0, with a Cargo.lock file so CI should be using the identical version. I'm also doing all of the assertions with the `assert_debug_snapshot!` macro from the crate.

Cheers
This adds the correct syntax highlighting to the markdown snippets in the readme

Recently the `ty` module in `rust-analyzer` was extracted to a separate crate; afterwards I couldn't use `cargo insta review` in the workspace root anymore, it always just quit with `error: No such file or directory (os error 2)`. I now finally got annoyed enough with that that I ran it with strace, and it turns out the problem was a pending snapshot file that had no corresponding source file anymore. It would be nice if such a file just got ignored.

This is easy to reproduce: E.g. in rust-analyzer, just do `touch crates/ra_hir/src/ty/.tests.rs.pending-snap` and try to run `cargo insta review`.
I can see that snapshot names include module name (typically just `test`). I think there might be conflicts when a couple of modules at the same level have a "test" submodule with identical test functions. For example:

mod1.rs has a submodule "test" with a test "test_foo()"

and

mod2.rs  has a submodule "test" with a test "test_foo()".

There are few ways to avoid this situation: put modules into subdirectories, rename test submodules or test functions. But I think it could be the most convenient to have snapshot names include super modules too: `mod1__test__foo.snap`, `mod2__test__foo.snap`, etc.
I'm trying to port a project from using a custom redaction implementation (mentioned in #73) to the new dynamic redaction system in 0.12.0.

The struct I'm trying to redact is recursive:

```rust
#[derive(Serialize, Deserialize)]
pub struct ViewedInstance {
    id: Uuid,
    children: Vec<ViewedInstance>,
}
```

I tried to use `.id` as my selector, but it only targets the top-level `id` field. I don't see any way to select _any_ key named `id`, regardless of depth, in the documented selector syntax.

Since I'm using a dynamic redaction, I can match on `Content` fairly precisely to make sure I'm only impacting the correct content. My redaction function would be okay to run on _all_ content values.
The new dynamic redactions feature in 0.12.0 is cool! However, it depends on the user interacting with types from the [`internals`](https://docs.rs/insta/0.12.0/insta/internals/index.html) module, notably `Redaction` and `Content`.

Additionally, `Content` has some variants that are explicitly hidden from documentation that are necessary to do some dynamic redactions, like `Content::NewtypeStruct`.

Are these types stable? Should I depend on them in my crate using Insta, or was depending on them an unintended artifact?
I've run `--force-update-snapshots` today. It worked flawlessly for most of the cases, expect this single problem:

![image](https://user-images.githubusercontent.com/1711539/68934475-cbe5f680-07a7-11ea-866c-b2f301e642b7.png)

Here, insta adds leading indentation to the otherwise blank line, which doesn't work great with editors which strip trailing ws on save. 
Closes https://github.com/mitsuhiko/insta/issues/78

Is this the right design? A good case is the `insta__test__embedded.snap` change below. I suspect those cases are rare; though it's a breaking change where they do exist.

I need to adds a whatsnew
I'm trying to update a snapshot with the `cargo insta review` but get the error message `Incorrect function. (os error 1). It only happens when I use Git Bash on Windows. Using cmd.exe works fine.

Steps to reproduce:

1. Open Git Bash on Windows
2. Change the directory to a project that has a snapshot test
3. Modify a test so the snapshot doesn't match
4. Run `cargo insta review`
5. Notice the normal message that the snapshot has changed and that you get options to accept, reject or skip.
6. Notice that you cannot enter your choice because of the error message `error: Incorrect function. (os error 1).

Again, using cmd.exe works fine.
If I define a test in a file like `src/foo.rs`, but my tests are in a `mod test` block, as is convention for Rust tests, the resulting snapshots are named with `test` as the prefix, not `foo`.

For example:

```rust
// src/foo.rs

pub fn add_one(value: u32) -> u32 {
    value + 1
}

#[cfg(test)]
mod test {
    use insta::assert_yaml_snapshot;

    #[test]
    fn it_adds_one() {
        let one = add_one(0);
        assert_yaml_snapshot!(one);
    }
}
```

The snapshot this test produces will be `src/snapshots/test__it_adds_one.snap`. It should be (and would be without the `mod test` wrapper) `src/snapshots/foo__it_adds_one.snap`.

This naming is problematic when there are multiple modules in the same folder that each have snapshot tests.