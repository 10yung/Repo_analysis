It wasn't clear I needed to use this env var within the view configuration.



It seems, that the documentation for usage with Laravel framework doesn't cover the current Laravel Framwork 6.*

They are some bootstraping differences and when calling `mkdir(config('view.compiled'), 0755, true);` in `AppServiceProvider.php` throws and exception `mkdir(): Invalid path`
PHP 7.4.2 will be released the 23rd of Januari. It contains some bugfixes that allow us to use preloading on an actual project. 

I am super excited to try it out. I've actually already started writing a blog post about it. Could we please merge this PR after PHP 7.4.2 is released so I can finish my blog post and brag about performance on Lambda?
It took me a while to understand what was happening so I decided to share here.
To deploy with bitbucket pipeline it is necessary to split the deploy into 2 steps:
1) download composer dependencies
2) run serverless deploy

Because the steps are performed separately, you must share the _vendor_ and _bootstrap/cache_ artifacts.

So the bitbucket-pipelines.yml file looks like this:

```
pipelines:
  branches:
    master:
      - step:
          name: Composer install
          image: php:7.3
          caches:
            - composer
          script:
            - apt-get update && apt-get install -y unzip
            - curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer
            - composer install --prefer-dist --optimize-autoloader --no-dev
          artifacts:
            - vendor/**
            - bootstrap/cache/*.php
      - step:
          name: Deploy Lambda
          deployment: production
          image: node:11.13.0-alpine
          trigger: manual
          caches:
            - node
          script:
            - apk add python3
            - npm install -g serverless
            - serverless config credentials --stage prod --provider aws --key ${AWS_DEV_LAMBDA_KEY} --secret ${AWS_DEV_LAMBDA_SECRET}
            - serverless deploy --stage prod
```

I always deploy bitbucket, but it's the first time with serverless. The difference is that on a normal server (write permission) if not send the _bootstrap/cache_ files laravel generates in the first run, as in lambda does not have permission in this folder happens the following error:

`"[2019-12-24 10:50:21] production.ERROR: The /var/task/bootstrap/cache directory must be present and writable. {"exception":"[object] (Exception(code: 0): The /var/task/bootstrap/cache directory must be present and writable. at /var/task/vendor/laravel/framework/src/Illuminate/Foundation/PackageManifest.php:168)"`

I  hope this helps others with the same problem save time.

Thanks.
FYI @mnapoli 
This PR is a massive one, sorry for the diff, but everything is finally coming together!

## Typed events and event handlers

**This concerns the ["PHP function" runtime](https://bref.sh/docs/runtimes/function.html)**, not the PHP-FPM runtime.

Currently it is possible to define PHP lambda functions via an *untyped* callable taking an *untyped* event:

```php
lambda(function ($event) {
    return 'Hello ' . $event['name'];
});
```

This is in line with JavaScript support in Lambda. The goal with Bref is to be like if AWS implemented PHP support natively, so I stayed with that approach to mimic JS.

I recently discovered that in more typed languages, Lambda handlers are classes that take typed events ([Java example](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-create-package.html#with-sqs-example-deployment-pkg-java), [C# example](https://docs.aws.amazon.com/lambda/latest/dg/with-sqs-create-package.html#with-sqs-example-deployment-pkg-dotnet)). Since PHP allows both dynamic typing and strict typing, I think this makes sense to support both options in Bref.

To sum up:

- we keep anonymous function handlers
- we keep untyped events (i.e. arrays)
- we offer the possibility to write typed handlers taking typed events via PHP interfaces

Bref will detect what you use and call it accordingly.

I have currently implemented:

- `SqsHandler`
- `Psr7Handler` (more details in the next sections)

The system is in place, more events can be supported along the way thanks to contributions.

Here is an example:

```php
class MyHandler implements SqsHandler
{
        public function handleSqs(SqsEvent $event, Context $context): void
        {
            // do something
            // Notice $event is typed, we can call methods on it:
            $event->getRecords()[0]->getMessageId();
            
            // if AWS adds a new field to SQS events,
            // users can still access the raw event data via:
            $array = $event->toArray();
        }
}

// Now we declare that our handler is an instance of our class
lambda(new MyHandler());
```

As you can see, the `$event` parameter is typed as `SqsEvent`. That allows you to skip any kind of validation: you are sure that you get the event you expect. If not, Bref will throw a clear error.

As a side benefit, those handler classes will be easier to test than anonymous functions.

## The removal of the `lambda()` function

Still in the spirit of implementing a runtime that would look like an official AWS runtime, I think we need to get rid of the `lambda()` function.

For the moment, BC is kept and it will still work.

Before:

```php
lambda(function ($event) {
    return 'Hello ' . $event['name'];
});

// or

lambda(new MyHandler());
```

After:

```php
return function ($event) {
    return 'Hello ' . $event['name'];
};

// or

return new MyHandler();
```

Much simpler and less opinionated!

## Native HTTP functions with PSR-7 and PSR-15

Creating HTTP applications with Bref is easy thanks to the [PHP-FPM layer](https://bref.sh/docs/runtimes/http.html). It runs your application in the same environment as any server, and that lets you run Laravel, Symfony or any framework without much changes.

However, sometimes we want to create a small HTTP lambda. Using a framework is sometimes overkill, especially since we have the PSR-7 standard for HTTP requests and responses now.

Using the typed handlers introduced above + reviving old Bref 0.2 code + building upon the efforts of @Nyholm in #446 and @marcusirgens in #513, this PR introduces native support for PSR-7 and PSR-15 `RequestHandlerInterface`:

```php
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;
use Psr\Http\Server\RequestHandlerInterface;
use GuzzleHttp\Psr7\Response;

class MyHandler implements RequestHandlerInterface
{
    public function handle(ServerRequestInterface $request): ResponseInterface
    {
        return new Response(200, [], 'Hello world!');
    }
}

return new MyHandler();
```

That means you can now write controllers using PSR-7 and skip using a framework: Bref will convert HTTP event data (API Gateway or ALB) into PSR-7 requests, and handle the responses as well.

And yes, there is support for form data POST, cookies, multi-value headers, multipart form post, file uploads…

>  Side note: what about supporting Symfony requests? I think it would be worth supporting, but maybe via a 3rd party package, WDYT?

But that doesn't stop here: **since we support PSR-15 handlers, we support PSR-15 compliant frameworks natively!** For example [Slim](https://www.slimframework.com/).

I haven't tested yet, but we should be able to run Slim like this without needing the FPM layer:

```php
<?php
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use Slim\Factory\AppFactory;

require __DIR__ . '/../vendor/autoload.php';

$app = AppFactory::create();

$app->get('/hello/{name}', function (Request $request, Response $response, array $args) {
    $name = $args['name'];
    $response->getBody()->write("Hello, $name");
    return $response;
});

// Instead of running $app->run() we return it: $app is the HTTP handler!
return $app;
```

## Performances?

Let's be straight: running HTTP applications with the "Function" runtime (as shown above) is slower than using the PHP-FPM layer.

The reason for that is that PHP-FPM reuses processes in memory, as PHP as always done. On the other hand, the function layer creates a brand new PHP process for every invocation/request. This is slower, but this is in line with how PHP has always run (and what users will expect): a blank slate every time.

For cases where performances do not matter, e.g. a very small endpoint, like a webhook, that is fine. The benefit: we don't need a framework yet we get HTTP request/response objects instead of `$_GET` and `$_POST`.

But, there is one last thing :)

## Keep-alive layers

There is one way we can accelerate PHP and make it faster than the PHP function runtime, and even the FPM runtime. That involves **keeping the PHP process alive between requests** (just like ReactPHP, PHP-PM, etc.).

We have been playing with this idea since Bref 0.2, and @Nyholm raised that topic again in #446.

Thanks to the typed events + the PSR-15 handlers + the removal of the `lambda()` function, we can now implement keep-alive layers:

- without introducing separate layers
- without breaking the default behavior of PHP (which is to restart the process by default)
- and apply it to HTTP as well as any other kind of Lambda event!

**How it works?**

The "Function" runtime is now keeping the PHP process alive between events. However, by default it will handle only 1 event and then terminate (to be started again in the next event).

That default behavior reproduces Bref's current behavior: by default Bref creates a new process for every event.

But, by simply setting the `BREF_LOOP_MAX` environment variable to a different value than `1`, e.g. `1000`, the same layer will now act as a keep-alive layer! The same process will handle 1000 events before terminating.

That can accelerate performances by a lot in some cases. Be careful though: just like ReactPHP, you need to be careful not keeping state across requests! This is an execution mode that I would only recommend for advanced use cases.

> Side note: should we allow a value of `0` to allow handling events in a loop without ever restarting?

## TODO

- [x] add a truckload of new tests :tada:
- [x] rename `SqsHandler::handleSqs()` to `handle()`
- [x] reorganize the namespaces
- [ ] mark the `lambda()` function as deprecated
- [ ] update the documentation
- [ ] go over #446 and #513 again to make sure we haven't forgotten anything
- [x] build beta layers
- [ ] tests
- [ ] test performances

If you want to help, I would really appreciate if you could test the layers, as well as test performances and see if it's interesting.

@marcusirgens & @Nyholm: I have tried as much as I could to start from your PRs, or at least try to include your commits in this branch. But I haven't managed to do that, I'm really sorry. Since I wanted to build the PSR-7 and keep-alive features on top of the typed events, I had to change core pieces of Bref first and that made reusing your code impossible. I ended up doing a bit of: new code + code from Bref 0.2 + your code.
<!--
Please explain the motivation behind the changes.

In other words, explain **WHY** instead of **WHAT**.
-->
A lot of modern frameworks communicate using PSR-7 objects instead of dumping data out. PSR-7 objects can easily be converted to API Gateway data objects. This should make stuff faster™️, as we won't need to initialize the CGI runtime.

The values of the event and context are passed to the ServerRequestInterface, so they can be accessed wherever the request is used. 
Thank you for your great work with this tool, bringing the Serverless universe to the PHP community.
I have added a new documentation page to configure an Antidot Framework application using Bref, with the intention of opening more options to the users of this new framework.