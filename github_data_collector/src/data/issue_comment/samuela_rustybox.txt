This isn't the case if you call it through the raw binary, e.g:
```bash
$ rustybox yes test
```

This will print something like the following:
```bash
yes test
yes test
yes test
```

Where it should be printing the following instead:
```bash
test
test
test
```

This is because it doesn't use the args that were passed into the function but instead get's the args from the `env` crate directly.
It seems like c2rust has removed a lot of the named constants so we've ended up with a bunch of magic numbers which are a lot less readable.

A good example might [dumpkmap](https://github.com/samuela/rustybox/blob/master/console_tools/dumpkmap.rs) which has the following on [line 77](https://github.com/samuela/rustybox/blob/master/console_tools/dumpkmap.rs#L77):
```rust
write(
  1i32,
  bb_common_bufsiz1.as_mut_ptr() as *const libc::c_void,
  (7i32 + 256i32) as size_t,
);
```

Versus the [busybox](https://git.busybox.net/busybox/tree/console-tools/dumpkmap.c) version:
```c
write(
  STDOUT_FILENO,
  flags,
  7 + MAX_NR_KEYMAPS
);
```

If and when someone gets `c2rust refactor` going this might be something good to tackle.
The shape on sed looked pretty bad so I took a stab at improving things a bit.
I tested using the [busybox tests](https://git.busybox.net/busybox/tree/testsuite/sed.tests) (with `SKIP_KNOWN_BUGS=true`).

The line count is down from 9284 to 1916 but there's still a bit of weird logic from switch/case statements hanging around. I'll take another look to see if I can get it down to around the same size as sed.c (1639 lines) but I thought it'd be good to post a PR in case anyone else started in this area.
Just to make sure you get that I can use some "harsh language" from time to time, but it is getting cool here? Guess it's this project! (and somethings can get lost by translation as well).

Nice done!
Cargo.toml should probably have the licence in and inclusion in the root.

I think you want this in Cargo.toml:
`license = "GPL-2.0-only"`

Perhaps the AUTHORS file from busybox as well.

Great work!