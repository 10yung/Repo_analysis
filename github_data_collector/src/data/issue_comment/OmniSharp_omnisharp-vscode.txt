##  Issue Description ##

When a user executes the `workbench.action.debug.configure` command, all extensions that contribute a debugger are activated, to provide entries for the quick pick list*. When OmniSharp is activated, it starts downloading its dependencies and does not provide entries for the quick pick list until those downloads are complete. Thus, OmniSharp considerably delays completion of the command. This is a serious UX issue when I am working in any other language.

*Activating extensions like this is expected behavior: https://github.com/microsoft/vscode-python/issues/9557#issuecomment-574259357, https://github.com/microsoft/vscode-node-debug/issues/170#issuecomment-368344394.

## Steps to Reproduce ##

  1. Open Windows Sandbox
  2. Install Visual Studio Code
  3. Install OmniSharp and immediately exit VSCode (otherwise OmniSharp immediately installs dependencies)
  4. Reopen VSCode, open a folder
  5. Open the command dialog, execute "Debug: Open launch.json"

## Expected Behavior ##

The "Select Environment" quick pick shows up immediately.

## Actual Behavior ##

Nothing visibly happens (except in the logs) until OmniSharp is finished downloading everything, then the quick pick shows up.

## Logs ##

### OmniSharp log ###
(empty)

### C# log ###
<details>
Installing C# dependencies...
Platform: win32, x86_64

Downloading package '.NET Core Debugger (Windows / x64)' (47489 KB).................... Done!
Validating download...
Integrity Check succeeded.
Installing package '.NET Core Debugger (Windows / x64)'

Downloading package 'Razor Language Server (Windows / x64)' (50022 KB).................... Done!
Installing package 'Razor Language Server (Windows / x64)'

Finished

Failed to spawn 'dotnet --info'
</details>

## Environment information ##

**VSCode version**: 1.41.1
**C# Extension**: 1.21.9


<details><summary>Dotnet Information</summary>
A valid dotnet installation could not be found.</details>
<details><summary>Visual Studio Code Extensions</summary>

|Extension|Author|Version|
|---|---|---|
|csharp|ms-vscode|1.21.9|;

</details>


## Issue Description ##
When using the `<typeparam>` XML doc tag, its description is shown without preceding with a new-line nor its name.

## Steps to Reproduce ##
Add the `<typeparam>` tag to the XML doc comment of a class or method that accepts generic types.

## Expected Behavior ##
Type parameters should be shown just like normal parameters with the `<param>` tag, each on a new line with their name followed by its description.

## Actual Behavior ##
Only the description of `<typeparam>` is shown on the same line with `<param>`.
![image](https://user-images.githubusercontent.com/20059164/72665673-98dd0f00-3a45-11ea-8e40-4163fd974a1f.png)

If multiple `<typeparam>` tags are used they are all shown on the same line.
![image](https://user-images.githubusercontent.com/20059164/72665682-b7dba100-3a45-11ea-81c7-ad2174b8a008.png)


## Environment information ##

**VSCode version**: 1.41.1
**C# Extension**: 1.21.9


<details><summary>Dotnet Information</summary>
.NET Core SDK (reflecting any global.json):
 Version:   3.0.101
 Commit:    bc5f8df0f5

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.17763
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.0.101\

Host (useful for support):
  Version: 3.0.1
  Commit:  32085cbc72

.NET Core SDKs installed:
  3.0.101 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.0.1 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
</details>


## Issue Description ##
## Steps to Reproduce ##
(1) Setup a docker-compose file with a asp.net core 3.1 hello world application in the container. As follows:
```
--docker-compose.yml----
version: "3.2" 
services:
  app: 
    build: 
      context: ./netcore
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - db
    ports:
      - "8080:80"
  db: 
    image: "microsoft/mssql-server-linux"
    volumes: 
      - mssql-server-dev-linux-data:/var/opt/mssql/data
    restart: always
    environment:
      SA_PASSWORD: "Abcd1234!"
      ACCEPT_EULA: "Y"
    expose: 
      - "1433"
      - "1434"
    ports:
      - "1433:1433"
      - "1434:1434"
volumes:
  mssql-server-dev-linux-data:
```
(2) Setup the dockerfile in netcore folder:

---netcore/Dockerfile:
```
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 AS build-env
WORKDIR /app

# Copy csproj and restore as distinct layers

COPY ./ ./
WORKDIR /app/HelloWorld
RUN dotnet restore

# Copy everything else and build

WORKDIR /app
COPY . ./
ADD entrypoint.sh /app/HelloWorld/.
RUN chmod +x /app/HelloWorld/entrypoint.sh
CMD /bin/bash /app/HelloWorld/entrypoint.sh
WORKDIR /app/HelloWorld

RUN dotnet publish -c Debug -o out

# Build runtime image
FROM mcr.microsoft.com/dotnet/core/aspnet:3.1
WORKDIR /app
COPY --from=build-env /app/HelloWorld/out .

ENTRYPOINT ["dotnet", "HelloWorld.dll"]
```
(3) Run the application using docker-compose up. Wait for services to be ready. 
(4) verify that your application is running as expected with the hello world whatever showing.
(5) Identify the name of the container by running "docker ps"
(6) Create a .vscode/launch.json file containing the following, replacing the variable in square brackets with the name of the container found in 5: 
```
{
    "version": "0.2.0",
    "configurations": [
        
        {
            "name": ".NET Core Docker Attach",
            "type": "coreclr",
            "request": "attach",
            "preLaunchTask": "preDockerDebug",
            "processId": "${command:pickRemoteProcess}",
            "sourceFileMap": {
                "/app": "${workspaceFolder}/netcore"
            },
            "pipeTransport": {
                "pipeProgram": "docker",
                "pipeArgs": [ "exec", "-i", "[name of hello world container]" ],
                "debuggerPath": "/publish/vsdbg/vsdbg",
                "pipeCwd": "${workspaceFolder}/netcore",
                "quoteArgs": false
            }
        }
    ]
}
```
(7) Create a file called ./.vscode/tasks.json with the following:

```
{
    // See https://go.microsoft.com/fwlink/?LinkId=733558
    // for the documentation about the tasks.json format
    "version": "2.0.0",
    "tasks": [
        {
            "label": "publishApp",
            "command": "dotnet",
            "type": "shell",
            "args": [
                "publish", "-c", "Debug", "--no-restore"
            ],
            "group": "none",
            "presentation": {
                "reveal": "silent"
            },
            "problemMatcher": "$msCompile"
        },
        {
            "label": "restartAppContainer",
            "command": "docker-compose",
            "type": "shell",
            "args": [
                "restart", "app"
            ],
            "group": "none",
            "presentation": {
                "reveal": "silent"
            },
            "problemMatcher": "$msCompile"
        },
        {
            "label": "preDockerDebug",
            "type": "shell",
            "command": "echo Starting pre docker debug scripts...",
            "dependsOrder": "sequence",
            "dependsOn": ["publishApp", "restartAppContainer"],
            "group": "none"
        }
    ],
    "options": {
        "cwd": "${workspaceRoot}/netcore/HelloWorld"
    }
}
```
(8) With the applicaiton still running, attempt to attach the debugger by clicking on the VS Code green debugger icon.

## Expected Behavior ##

When I click the debugger button in (8), the application rebuilds the application and restarts the container, and then attaches the debugger. This allows me to enter break points, etc. 

## Actual Behavior ##

When I click the debugger icon, the remote-attach process fails with the following error text: 

```
Executing: docker exec -i hello-world_app_1 sh -s < C:\Users\My.User\.vscode\extensions\ms-vscode.csharp-1.21.9\scripts\remoteProcessPickerScript
Linux
stderr: sh: 1: ps: not found
Error Message: Command failed: docker exec -i hello-world_app_1 sh -s < C:\Users\My.User\.vscode\extensions\ms-vscode.csharp-1.21.9\scripts\remoteProcessPickerScript
sh: 1: ps: not found
```

## Logs ##

### OmniSharp log ###
<details>Post the output from Output-->OmniSharp log here</details>

### C# log ###
<details>Post the output from Output-->C# here</details>

## Environment information ##

**VSCode version**: 1.41.1
**C# Extension**: 1.21.9


<details><summary>Dotnet Information</summary>
.NET Core SDK (reflecting any global.json):
 Version:   3.1.100
 Commit:    cd82f021f4

Runtime Environment:
 OS Name:     Windows
 OS Version:  10.0.16299
 OS Platform: Windows
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.5 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.0.9 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.2 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.4 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.5 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.3 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.6 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
</details>
<details><summary>Visual Studio Code Extensions</summary>

|Extension|Author|Version|
|---|---|---|
|angular-console|nrwl|10.0.0|
|angular-essentials|johnpapa|0.6.3|
|Angular2|johnpapa|8.3.0|
|angular2-inline|natewallace|0.0.17|
|beautify|HookyQR|1.5.0|
|cloudcode|googlecloudtools|1.0.1|
|code-eol|sohamkamani|0.3.3|
|code-runner|formulahendry|0.9.15|
|code-settings-sync|Shan|3.4.3|
|csharp|ms-vscode|1.21.9|
|cypher-query-language|jakeboone02|1.0.2|
|debugger-for-chrome|msjsdiag|4.12.3|
|dotenv|mikestead|1.0.1|
|dotnet-test-explorer|formulahendry|0.7.1|
|EditorConfig|EditorConfig|0.14.4|
|gc-excelviewer|GrapeCity|2.1.32|
|gitlens|eamodio|10.2.0|
|intellij-idea-keybindings|k--kato|0.2.37|
|java|redhat|0.54.2|
|MagicPython|magicstack|1.1.0|
|material-icon-theme|PKief|3.9.2|
|mono-debug|ms-vscode|0.15.8|
|mssql|ms-mssql|1.8.0|
|ng-template|Angular|0.900.3|
|npm-intellisense|christian-kohler|1.3.0|
|pip-packages|etmoffat|0.4.3|
|prettier-vscode|esbenp|3.16.1|
|python|ms-python|2019.11.50794|
|remote-containers|ms-vscode-remote|0.94.0|
|remote-ssh|ms-vscode-remote|0.48.0|
|remote-ssh-edit|ms-vscode-remote|0.48.0|
|remote-ssh-explorer|ms-vscode-remote|0.48.0|
|remote-wsl|ms-vscode-remote|0.41.6|
|Spell|seanmcbreen|1.0.0|
|vscode-docker|ms-azuretools|0.9.0|
|vscode-java-debug|vscjava|0.23.0|
|vscode-java-dependency|vscjava|0.6.0|
|vscode-java-pack|vscjava|0.8.1|
|vscode-java-test|vscjava|0.22.0|
|vscode-kubernetes-tools|ms-kubernetes-tools|1.0.9|
|vscode-markdownlint|DavidAnson|0.33.0|
|vscode-maven|vscjava|0.20.1|
|vscode-npm-script|eg2|0.3.10|
|vscode-remote-extensionpack|ms-vscode-remote|0.19.0|
|vscode-typescript-tslint-plugin|ms-vscode|1.2.3|
|vscode-yaml|redhat|0.6.1|
|vscode-zipexplorer|slevesque|0.3.1|
|vscodeintellicode|VisualStudioExptTeam|1.2.0|
|winteriscoming|johnpapa|1.3.0|
|xml|DotJoshJohnson|2.5.0|;

</details>

## Issue Description ##
Adding ,h or ,b to a watch doesn't not show the hex or binary in the watched variable in the debugger.

## Steps to Reproduce ##
Add ,h or ,b to a watched variable

## Expected Behavior ##
variable is shown with binary or hex

## Actual Behavior ##
variable is shown in decimal

## Environment information ##

**VSCode version**: 1.41.1
**C# Extension**: 1.21.9

<details><summary>Mono Information</summary>
        OmniSharp using global mono :6.4.0</details>
<details><summary>Dotnet Information</summary>
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     Mac OS X
 OS Version:  10.15
 OS Platform: Darwin
 RID:         osx.10.15-x64
 Base Path:   /usr/local/share/dotnet/sdk/3.0.100/

Host (useful for support):
  Version: 3.0.0
  Commit:  7d57652f33

.NET Core SDKs installed:
  2.1.401 [/usr/local/share/dotnet/sdk]
  2.1.508 [/usr/local/share/dotnet/sdk]
  2.1.802 [/usr/local/share/dotnet/sdk]
  2.2.106 [/usr/local/share/dotnet/sdk]
  2.2.203 [/usr/local/share/dotnet/sdk]
  2.2.401 [/usr/local/share/dotnet/sdk]
  3.0.100 [/usr/local/share/dotnet/sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.All 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.3 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.5 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.8 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.12 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.1.13 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.4 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 2.2.6 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.0.0 [/usr/local/share/dotnet/shared/Microsoft.NETCore.App]

To install additional .NET Core runtimes or SDKs:
  https://aka.ms/dotnet-download
</details>
<details><summary>Visual Studio Code Extensions</summary>

|Extension|Author|Version|
|---|---|---|
|better-toml|bungcip|0.3.2|
|code-spell-checker|streetsidesoftware|1.7.20|
|codedox|wiggin77|1.3.1|
|cpptools|ms-vscode|0.26.2|
|crates|serayuzgur|0.4.7|
|csharp|ms-vscode|1.21.9|
|debugger-for-chrome|msjsdiag|4.12.5|
|gruvbox-themes|tomphilbin|1.0.0|
|haxe-extension-pack|vshaxe|1.3.0|
|haxe-hl|HaxeFoundation|0.9.2|
|hxcpp-debugger|vshaxe|1.2.4|
|indent-rainbow|oderwat|7.4.0|
|Ionide-FAKE|Ionide|1.2.3|
|Ionide-fsharp|Ionide|4.4.4|
|Ionide-Paket|Ionide|1.12.0|
|markdown-all-in-one|yzhang|2.7.0|
|markdown-preview-enhanced|shd101wyy|0.5.1|
|mono-debug|ms-vscode|0.15.8|
|phantypist|paulofallon|1.0.3|
|rainbow-brackets|2gua|0.0.6|
|read-time|johnpapa|0.2.0|
|reason-vscode|jaredly|1.7.5|
|rust|rust-lang|0.7.0|
|rust-pack|Swellaby|0.2.23|
|Theme-FlatlandMonokai|gerane|0.0.6|
|theme-oceanicnext|naumovs|0.0.4|
|Theme-TomorrowKit|ms-vscode|0.1.4|
|tomorrow-and-tomorrow-night-operator-mono-theme|chiragpat|0.0.6|
|vscode-custom-css|be5invis|3.0.9|
|vscode-lldb|vadimcn|1.4.5|
|vscode-nupkg|eridem|1.0.1|
|vscode-wasm|dtsvet|1.2.1|
|vshaxe|nadako|2.17.0|
|wordcount|rido3|0.1.33|
|xml|DotJoshJohnson|2.5.0|;

</details>

While investigating which debugger extensions are using deprecated extension API I found two issues with coreclr:

- In the package.json "enableBreakpointsFor" is used as a property of the "debuggers" extension point (see [here](https://github.com/OmniSharp/omnisharp-vscode/blob/5c4d5c73361b1d023d89c4fe6c796bcc67c113f9/package.json#L880-L887)). This is deprecated and it is flagged as an error in the editor. Please use the "breakpoints" extension point (on the same level as "debuggers") instead:
  ```js
  "contributes": {
    "breakpoints": [
      { "language": "csharp" },
      { "language": "razor" },
      { "language": "qsharp" ,
      { language": "aspnetcorerazor" }
    ],
    "debuggers": [
      // ...
    [
  ```
- In the package.json the deprecated "debuggers.adapterExecutableCommand" is used. Please use the "vscode.DebugAdapterDescriptorFactory" and a "vscode.DebugAdapterExecutable" instead like shown [here](https://github.com/microsoft/vscode-mock-debug/blob/28b4fde41228b0aabe93eab9064992e276859405/src/extension.ts#L91-L116) with Mock debug.
You can register the adapter factory in the extensions "activate" function like this:
  ```js
  
  context.subscriptions.push(vscode.debug.registerDebugAdapterDescriptorFactory('coreclr', factory));;
  ```


<!-- To prefill this information:
1. Open Visual Studio Code
2. Bring up the command palette (press <kbd>F1</kbd>)
3. Type `CSharp: Report an issue`

If the `CSharp: Report an issue` command doesn't appear, make sure that you have C# extension version 1.17.0 or newer installed.
-->

## Environment data
.NET Core SDK (reflecting any global.json):
 Version:   3.0.100
 Commit:    04339c3a26

Runtime Environment:
 OS Name:     debian
 OS Version:  9
 OS Platform: Linux
 RID:         debian.9-x64
 Base Path:   /usr/share/dotnet/sdk/3.0.100/

Host (useful for support):
  Version: 3.0.0
  Commit:  95a0a61858

.NET Core SDKs installed:
  3.0.100 [/usr/share/dotnet/sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 3.0.0 [/usr/share/dotnet/shared/Microsoft.NETCore.App]

VS Code version:Version: 1.39.2
C# Extension version: 1.21.9

## Steps to reproduce
1. Create Hello World app. 
2. Publish as self-contained and linux-arm.
3. Copy it to the target, start the app. 
4. Remote debugging works fine with: 

``` json
{
    "version": "0.2.0",
    "configurations": [
        {
            "name": ".NET Core Attach",
            "type": "coreclr",
            "request": "attach",
            "processId": "${command:pickProcess}"
        },
        {
            "name": ".NET Core SSH Attach",
            "type": "coreclr",
            "request": "attach",
            "processId": "${command:pickRemoteProcess}",
            "pipeTransport": {
                "pipeProgram": "ssh",
                "pipeArgs": [
                    "-T",
                    "admin@192.168.0.10"
                ],
                "debuggerPath": "~/.vs-debugger/vs2019/vsdbg",
                "pipeCwd": "${workspaceRoot}",
                "quoteArgs": true
            },
            "justMyCode": false,
            "symbolOptions": {
                "searchPaths": ["~/apps"],
                "searchMicrosoftSymbolServer": false
            },
            "requireExactSource": false,
        }
    ]
}
```
5. Add the property: *PublishTrimmed = true*. It doesn't work any more. 
Project file: 

```xml
<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>Exe</OutputType>
    <TargetFramework>netcoreapp3.0</TargetFramework>
    <PublishTrimmed>true</PublishTrimmed>  
    <PublishSingleFile>true</PublishSingleFile> 
    <RuntimeIdentifier>linux-x64</RuntimeIdentifier>  
  </PropertyGroup>
</Project>
```
The Debugger console writes: **Module was built without symbols.**
Thanks for any support.

## Expected  behavior

```
Starting: "ssh" -T admin@192.168.0.10 "~/.vs-debugger/vs2019/vsdbg --interpreter=vscode"
-------------------------------------------------------------------
You may only use the Microsoft .NET Core Debugger (vsdbg) with
Visual Studio Code, Visual Studio or Visual Studio for Mac software
to help you develop and test your applications.
-------------------------------------------------------------------
Loaded '/var/volatile/tmp/.net/HelloWorld/vp3ilmdt.nde/System.Private.CoreLib.dll'. Cannot find or open the PDB file.
Loaded '/var/volatile/tmp/.net/HelloWorld/vp3ilmdt.nde/HelloWorld.dll'. Symbols loaded.
Loaded '/var/volatile/tmp/.net/HelloWorld/vp3ilmdt.nde/System.Runtime.dll'. Cannot find or open the PDB file.
Loaded '/var/volatile/tmp/.net/HelloWorld/vp3ilmdt.nde/System.Console.dll'. Cannot find or open the PDB file.
```

## Actual behavior

```
Starting: "ssh" -T admin@192.168.224.41 "~/.vs-debugger/vs2019/vsdbg --interpreter=vscode"
-------------------------------------------------------------------
You may only use the Microsoft .NET Core Debugger (vsdbg) with
Visual Studio Code, Visual Studio or Visual Studio for Mac software
to help you develop and test your applications.
-------------------------------------------------------------------
Loaded '/var/volatile/tmp/.net/HelloWorld/xcxtqtit.mgz/System.Private.CoreLib.dll'. Cannot find or open the PDB file.
Loaded '/var/volatile/tmp/.net/HelloWorld/xcxtqtit.mgz/HelloWorld.dll'. Module was built without symbols.
Loaded '/var/volatile/tmp/.net/HelloWorld/xcxtqtit.mgz/System.Console.dll'. Module was built without symbols.
```
## Environment data
`dotnet --info` output:
```
SDK .NET Core (reflétant tous les global.json) :
 Version:   3.1.100        
 Commit:    cd82f021f4     

Environnement d'exécution :
 OS Name:     Windows      
 OS Version:  10.0.18363   
 OS Platform: Windows      
 RID:         win10-x64
 Base Path:   C:\Program Files\dotnet\sdk\3.1.100\

Host (useful for support):
  Version: 3.1.0
  Commit:  65f04fb6db

.NET Core SDKs installed:
  3.1.100 [C:\Program Files\dotnet\sdk]

.NET Core runtimes installed:
  Microsoft.AspNetCore.All 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.All]
  Microsoft.AspNetCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.AspNetCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.AspNetCore.App]
  Microsoft.NETCore.App 2.1.14 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.NETCore.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.NETCore.App]
  Microsoft.WindowsDesktop.App 3.1.0 [C:\Program Files\dotnet\shared\Microsoft.WindowsDesktop.App]
```
VS Code version: 1.41.1
C# Extension version: 1.21.9

## Steps to reproduce
1. Open Visual Studio Code
2. Add a a xml with the documentation like this:
```xml
<docs>
    <members name="refitWarning">
        <refitWarning>
            <summary>
                Lots of problems with Refit
                First, Refit does not work with nullable references. For instance we couldn't do (SearchParamsDto searchParams).
                Ref: https://github.com/reactiveui/refit/issues/738
                Second: Refit does not understand query parameters that are arrays of objects (for example, the IEnumerable&lt;SearchFilterDto&gt; in SearchParamsDto).
                It cannot produce queries in this format: ?array[0].property1=value&amp;array[0].property2=value&amp;array[1].property1=value&amp;array[1].property2=value
                We tried various solutions but none worked.
                Ref: https://github.com/reactiveui/refit/issues/777 and other issues.
                Workaround for now: use POST instead of GET and pass the SearchParamsDto in the body instead of the query.
            </summary>
        </refitWarning>
    </members>
</docs>
```
3. Add the include tag on a class
```c#
/// <include file="docs.xml" path='docs/members[@name="refitWarning"]/refitWarning/*' />
public interface IOptionalFeatureController {
    // ...
}
```

## Expected  behavior
See the summary (at least) like Visual studio

![image](https://user-images.githubusercontent.com/1498932/72473823-80ef5c00-37b5-11ea-8561-cf5d5f8e9961.png)


## Actual behavior
In VSCode
![image](https://user-images.githubusercontent.com/1498932/72473702-45ed2880-37b5-11ea-90d1-df3f91acebb1.png)

in VS 2019
![image](https://user-images.githubusercontent.com/1498932/72473980-dfb4d580-37b5-11ea-9687-c375ae80174f.png)


Hi VS Code dev here :wave:

Last milestone we have introduced a Start View for debugging. More about this can be found here https://github.com/microsoft/vscode/issues/84677
So when the user has no `launch.json` file this view should help him start debugging.

This view is currently language agnostic and not very cluttered thus we are slowly looking in opening it up to extensions. We have two options:

1) Allow extensions to contribute commands / text to the current view. Those commands would be rendered as additional blue buttons or as some menu
2) Allow extensions to contribute a whole view which would be below the start view. The C# extension could choose what to render in that view and it would give a bit more control to the extension. Using context keys this view would only be visible in the "start" experience

What I would be interested in is what C# would like to contribute to improve the start experience. If it is only commands, than I think it makes sense to show those commands in the start view (for example with additional blue buttons). If it is much more then it makes more sense that C# contributes the whole view. 
What are the biggest pain points that C# users hit when setting up debugging?


Related python discussion: https://github.com/microsoft/vscode-python/issues/9268

Let me know what you think and how you envision the C# debug start experience.
Thanks!

fyi @gregg-miskelly 
Current look of debug start view

![Screenshot 2020-01-13 at 11 27 54](https://user-images.githubusercontent.com/1926584/72248554-c2d2a380-35f7-11ea-9a8b-07433034b9c4.png)

## Environment data
C# Extension version: 1.21.9

## Steps to reproduce
* Create the following project.
* Set a breakpoint at the specified line
* Evaluate `sequence.ToArray()`

```
using System;
using System.Buffers;
using System.Text;

namespace DNC31Con
{
    class Program
    {
        static void Main(string[] args)
        {
            byte[] bytes = { (Byte)'h', (Byte)'e', (Byte)'l', (Byte)'l', (Byte)'o', (Byte)'!' };
            ReadOnlySequence<Byte> sequence = new ReadOnlySequence<byte>(bytes);

            Console.WriteLine("Hello World!"); // breakpoint here
        }
    }
}
```

## Expected  behavior
Evaluation should succeed like it does in Visual Studio

## Actual behavior
`error CS8107: Feature 'ref extension methods' is not available in C# 7.0. Please use language version 7.2 or greater.`

## Notes
I believe the cause is that we need to upgrade the version of the C# EE that we ship in this extension to something more recent.