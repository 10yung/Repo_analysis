At the moment only RedisClient and RedisBlockingClient accepts connectTimeout. This PR adds `connectTimeout` field to `RedisServer` which can then be used in any redis connection.
Fixes #231
SMEMBERS is a read only command therefore it should be run on slaves.

Although it is a read only command, `Smembers` is set as `isMasterOnly = true`. Therefore `SMEMBERS` calls are run against master in `RedisClientMasterSlaves` mode.

One workaround could be using `SINTER` with one key as it is set as `isMasterOnly = false`.
The current stable(1.9.0) release still doesn't have https://github.com/etaty/rediscala/commit/aac07d28aadf876c68d33b4042ea205a5f32c8db this fix.
Hi there!

As noted in my previous pull request, I've made some changes to support redis 5.0 and the new Streams commands. This branch is based on my features/redis-4.0 branch, so please disregard the common changes. (I'll rebase this if the other pull request is accepted.)

This is still a work-in-progress, but I think there is enough here to get meaningful feedback, especially on the interface and reply decoding for stream commands.  If the current approach looks good, I'll add support for consumer groups and blocking stream commands.

Thanks,
-David
Not sure how we got this though

rediscala 1.8.0 / scala 2.12.x

```
java.lang.Exception: Redis Protocol error: Got 43 as initial reply byte for Operation: Operation(Get(waylay:default:publickey.6ccc8843-d78d-49e8-84c4-3734a4af9929),Future(Failure(redis.actors.InvalidRedisReply$: Could not decode the redis reply (Connection closed))))
    at redis.actors.RedisReplyDecoder.decodeRedisReply(RedisReplyDecoder.scala:72)
    at redis.actors.RedisReplyDecoder.decodeRepliesRecur(RedisReplyDecoder.scala:50)
    at redis.actors.RedisReplyDecoder.decodeReplies(RedisReplyDecoder.scala:35)
    at redis.actors.RedisReplyDecoder$$anonfun$receive$1.applyOrElse(RedisReplyDecoder.scala:28)
    at akka.actor.Actor.aroundReceive(Actor.scala:539)
    at akka.actor.Actor.aroundReceive$(Actor.scala:537)
    at redis.actors.RedisReplyDecoder.aroundReceive(RedisReplyDecoder.scala:11)
    at akka.actor.ActorCell.receiveMessage(ActorCell.scala:612)
    at akka.actor.ActorCell.invoke(ActorCell.scala:581)
    at akka.dispatch.Mailbox.processMailbox(Mailbox.scala:268)
    at akka.dispatch.Mailbox.run(Mailbox.scala:229)
    at akka.dispatch.Mailbox.exec(Mailbox.scala:241)
    at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
    at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
    at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
    at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
```
I'm wondering if version 1.8.0 or 1.9.0 were compiled using JVM 11 since I'm getting the following error when I run it using JVM 8:

```
java.lang.UnsupportedClassVersionError: redis/util/CRC16 has been compiled by a more recent version of the Java Runtime (class file version 55.0), this version of the Java Runtime only recognizes class file versions up to 52.0
```

Thanks!
Starting from version 5.0, Redis provides a new Stream data type with a bunch of new commands: https://redis.io/topics/streams-intro

Do you have any plans for supporting it?

I've been playing with the code a bit, and it looks like it's not super hard to add new commands. I could probably try to implement streams support. Will you be interested?

Thanks.
hi @etaty when a connection fails when using redisscala it seems to go into an endless retry loop. is there some config somewhere to change this?

thanks
One can set connect timeout for a simple RedisClient. It's not the case with RedisClientPool. The latter extends RedisClientPoolLike which creates RedisClientActors with following way:
`def makeRedisClientActor(server: RedisServer, active: Ref[Boolean]): ActorRef = {
    system.actorOf(RedisClientActor.props(new InetSocketAddress(server.host, server.port),
      getConnectOperations(server), onConnectStatus(server, active), redisDispatcher.name)
      .withDispatcher(redisDispatcher.name),
      name + '-' + Redis.tempName()
    )
  }`

So, there is no way to provide a connection timeout in the `RedisClientActor.props` method. 