I'm seeing some strange behavior involving selecting multiple lines with the keyboard. Once a line is selected, the arrow keys do not deselect lines. Is this intended behavior?

#### What's the current behavior?

GIF:
![Kapture 2020-01-18 at 17 06 54](https://user-images.githubusercontent.com/8746094/72672828-8e0a8600-3a15-11ea-8bd2-e070540962db.gif)


[codesandbox repro](https://codesandbox.io/s/slate-reproductions-dyvs3)

Steps for repro:
1. Hit enter several times (gif hits enter about 5 times)
2. Type <shift> + <up arrow> until the entire document is selected
3. While still holding shift, press <down arrow> several times
4. Notice the document is not unselected properly



Slate: 0.57.1
Browser: Chrome
OS: Mac

#### What's the expected behavior?
Expected behavior for the above steps is that the document unselects similar to "undoing" the previous selection.



This will allow a prop change of the placeholder text to re-render.

#### Is this adding or improving a _feature_ or fixing a _bug_?

Bug.

#### What's the new behavior?

The appropriate components check in the memoization comparison if two decorator range list items are placeholders, and if they are, if their text equals.

![Demo](https://media.giphy.com/media/SwJAwvKljEhJUWvgK2/giphy.gif)

#### How does this change work?

By checking if decorator ranges are placeholders, and if they are, make sure the text value is equal. The is performed in the memoization checks.

#### Have you checked that...?

- [x] The new code matches the existing patterns and styles.
- [x] The tests pass with `yarn test`.
- [x] The linter passes with `yarn lint`. (Fix errors with `yarn fix`.)
- [x] The relevant examples still work. (Run examples with `yarn start`.)

#### Does this fix any issues or need any specific reviewers?

Fixes: #3423, #3432
Reviewers: @

This change builds on top of PR #3389 (I can rebase when it is merged since I copied into the commit).

That PR allows void nodes to have any kind of element in them and the editor events will not respond to them if the void node renders with `contentEditable={false}`, this will treat all it's children as not editable unless specified otherwise, therefore events within the void node will be treated like they are outside the editor. Currently they cannot have inputs or any other content editable areas or the editor event handlers try to interpret them as part of the main editor document, when if they are in void nodes with `contentEditable` turned off, they should be treated as isolated islands.

This behavior could be achieved with the pre 0.50.x versions, therefore some of our projects will have regressions.

That PR will fix #3425 and #3426.

This PR fixes a bug specific to Firefox where input events within a void nodes prevent inputs from working.

I included an example of having these isolated void nodes in case it's of value for future testing and and to serve as an example.

#### Is this adding or improving a _feature_ or fixing a _bug_?

Bug

#### What's the new behavior?

See the example. A void node can be made to be completely isolated.

#### How does this change work?

The previous PR would stop all events on the editor from responding to non editable targets. This CR will stop the Firefox specific onBeforeInput event from firing in the same case.

#### Have you checked that...?

- [x] The new code matches the existing patterns and styles.
- [x] The tests pass with `yarn test`.
- [x] The linter passes with `yarn lint`. (Fix errors with `yarn fix`.)
- [x] The relevant examples still work. (Run examples with `yarn start`.)

#### Does this fix any issues or need any specific reviewers?

Fixes: #3425, #3426, the other PR (#3389) listed above fixes it mostly, this makes it work in Firefox to resolve the same issues.

Reviewers: @ianstormtaylor 

#### Do you want to request a _feature_ or report a _bug_?
Feature (maybe a bug)

Currently there is no way to insertBreak after void element. The enter key press does nothing and editor.insertBreak method is not called.

In my attempt to find a workaround for this problem I encountered the following behaviour:
If void element is selected and enter key is pressed, my code manually inserts new empty non-void element after the void element and **selects it**. Now that non-void element is selected, slate editor starts capturing enter key presses again, including the one that was just manually intercepted. Slate calls insertBreak and the result is 2 new empty non-void elements after the void element instead of 1.







<!--
If you have a question, ask it in our Slack channel instead:

https://slate-slack.herokuapp.com/
-->

#### What's the current behavior?

Whenever highlighting multiple lines containing list-items, and then deleting those, the fragment is deleted (`editor.deleteFragment` is triggered). However, there is a single remaining empty list-item with no parent ul or ol element.

[codesandbox repro](https://codesandbox.io/s/slate-reproductions-bd2rt)


GIF Repro:
![Kapture 2020-01-17 at 0 38 53](https://user-images.githubusercontent.com/8746094/72597215-2263d400-38c2-11ea-9154-607090074176.gif)

Notice how after deleting, the remaining bullet is no longer indented indicating there is no wrapper list element.

![image](https://user-images.githubusercontent.com/8746094/72597288-4f17eb80-38c2-11ea-9ea5-e16a8950d450.png)



<!--
For bugs, you **must** include the following:

- A GIF showing the issue in action.
- A sandbox that minimally reproduces the issue.
- Information about your OS, browser, Slate version, etc.

If you don't include these, there's a very good chance your issue will be closed, because it's much too hard to figure out exactly what is going wrong, and it makes maintenance much harder.

We need to keep the issues actionable, or else maintaining Slate becomes overwhelming. Thank you for understanding!

https://codesandbox.io/s/slate-reproductions-k0tpx
http://recordit.co/
-->

Slate: 0.57.1
Browser: Chrome
OS: Mac

#### What's the expected behavior?
Expectation is the entire list would be deleted including all list-items, wrapper ul/ol element, and no orphaned list-item remains.


1.click button,execution method  onclick (main content)ï¼š
`Editor.addMark(editor,'type','bold');console.log(editor);`
 result: editor.selection **is null**  and editor. marks is null
![image](https://user-images.githubusercontent.com/42568594/72597338-84671c80-3948-11ea-8cc9-2ba67a86eb5f.png)

 and the text entered **is not bold** !


2.when I put the above same code in the onKeyDown method on Editable
 result: editor.selection **is not null**  and editor.marks **is not** null
![image](https://user-images.githubusercontent.com/42568594/72597272-600b4000-3948-11ea-809b-7a18e4959cc2.png)

 and the text entered **is bold** !

Why?

3.marks becomes null when Editable is focused
![image](https://user-images.githubusercontent.com/42568594/72598007-eb390580-3949-11ea-98be-0947b8647bfb.png)



#### Reporting a bug

#### What's the current behavior?
On `0.57.1`, the placeholder decorator is not re-rendered when the number of children change, but the `Editor.string` stays the same

![Screen Recording 2020-01-16 at 11 02 AM](https://user-images.githubusercontent.com/203992/72541131-f9a2f680-384f-11ea-87b5-d4a3119f633c.gif)
https://codesandbox.io/s/slate-reproductions-fjf24

Slate: 0.57.1
Browser: Chrome
OS: Mac

#### What's the expected behavior?
When adding/removing a node, the editor should recalculate if the placeholder needs to be visible or not.

The Getting Started and Walkthroughs links both currently lead to a 404 page. The modification in this change should fix them to link to the correct location.

#### Is this adding or improving a _feature_ or fixing a _bug_?

Fixing a documentation bug

#### What's the new behavior?

The Getting Started and Walkthroughs links on the Readme page should now correctly link to the walkthroughs

#### How does this change work?

Removed the part at the end of the URLs that probably worked at one point but does not because the URL formats have apparently changed. Linking to /walkthroughs seems to auto-redirect to the first walkthrough.

#### Have you checked that...?

- [N/A] The new code matches the existing patterns and styles.
- [N/A] The tests pass with `yarn test`.
- [N/A] The linter passes with `yarn lint`. (Fix errors with `yarn fix`.)
- [N/A] The relevant examples still work. (Run examples with `yarn start`.)

#### Does this fix any issues or need any specific reviewers?

Fixes: #
Reviewers: @

#### Do you want to request a _feature_ or report a _bug_?

A bug

#### What's the current behavior?

Performance while editing documents with paragraphs that have lots of inline elements becomes really bad really quickly.

**Sandbox** (used also in the following gifs): [codesandbox.io here](https://codesandbox.io/s/slate-inline-cursor-positioning-minch?fontsize=14&hidenavigation=1&theme=dark) (just try to type a sentence)
This following gif shows how slow copy pasting junks of such a document can be.

![slow-single-paragraph-lots-of-inline](https://user-images.githubusercontent.com/101926/72449043-5357e200-37b8-11ea-91c2-abc37f77b4ff.gif)

Even worse though is typing and deleting single letters via backspace, which can take really long. The following gif is not ideal as you can't see my key strokes but you should get an idea:

![slow-single-paragraph-lots-of-inline-test-writing](https://user-images.githubusercontent.com/101926/72449417-e8f37180-37b8-11ea-9fec-38585d8f374e.gif)

From what I understand, this is due to current normalization performance, but I could be wrong. Workarounds would also appreciated if anything is known.

**OS, Versions, etc.**

I am using latest Slate 57.1 (as can be seen in the sandbox) and Chromium 79.0 on recent Manjaro Linux on a high-end mobile workstation laptop (I saw the same issue on other systems like a Mac as well)

#### What's the expected behavior?

Interacting with such a document should still be responsive and offer a good user experience.
#### Do you want to request a _feature_ or report a _bug_?
A bug

<!--
If you have a question, ask it in our Slack channel instead:

https://slate-slack.herokuapp.com/
-->

#### What's the current behavior?
If an inline element has padding on the left side, the cursor for text selection in front of the node will appear after the padding instead of before the padding:
![inline with padding](https://user-images.githubusercontent.com/5554373/72392101-2c88a580-36fd-11ea-80a1-534484bddba7.gif)

Here is a sandbox reproduction:
https://codesandbox.io/s/slate-inline-cursor-positioning-4tsw0




<!--
For bugs, you **must** include the following:

- A GIF showing the issue in action.
- A sandbox that minimally reproduces the issue.
- Information about your OS, browser, Slate version, etc.

If you don't include these, there's a very good chance your issue will be closed, because it's much too hard to figure out exactly what is going wrong, and it makes maintenance much harder.

We need to keep the issues actionable, or else maintaining Slate becomes overwhelming. Thank you for understanding!

https://codesandbox.io/s/slate-reproductions-k0tpx
http://recordit.co/
-->

Slate: 0.57.0
Browser: Chrome
OS: Mac

#### What's the expected behavior?
The expected behavior is that when text is being inserted as a neighbor to an inline node, the cursor will appear outside of the inline node.

<!--
The fastest, and most appreciated way to have your issue fixed is to create a pull request with working, tested code and we will help get it merged. Don't be scared to open a pull request that isn't completed and ask for input. We're happy to give direction! Also, researching how other editors handle this issue is super helpful.

Slate is solving a pretty complex problem, and we can't do it without active contributors, so thank you so much for your help!

https://docs.google.com/
https://paper.dropbox.com/
https://draftjs.org/
http://prosemirror.net/
https://quilljs.com/
-->
