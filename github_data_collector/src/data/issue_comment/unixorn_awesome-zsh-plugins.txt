The link doesn't work except `#generic-zsh` in the TOC.

```
- [Tutorials](#tutorials)
  - [Generic ZSH](#generic-zsh)
  - [Antigen](#antigen)
  - [Oh-My-Zsh](#oh-my-zsh)
  - [Prezto](#prezto)
  - [Zgen](#zgen)
  - [Zplugin](#zplugin)
```

I suggest to append substring like `Installation`

```
- [Installation](#installation)
  - [Antibody](#antibody-1)
  - [Antigen](#antigen-1)
  - [dotzsh](#dotzsh-1)
  - [Oh-My-Zsh](#oh-my-zsh-1)
  - [Prezto](#prezto-1)
  - [Zgen](#zgen-1)
  - [zplug](#zplug-1)
```

First of all, let me say I think this project is incredible, and remains well-organized despite the sheer volume of what's been collectively amassed. When I have a shitty day and need something to settle my weary mind, just 30-45 minutes of cruising through the links is usually more than enough to restore my perspective (and usually add one or two new cool baubles to my rather ornate shell, haha).

I want to throw out a thought I had recently while doing so, which is that GitHub is as great for assembling a diverse and productive team of contributors as it is atrocious at letting them do anything more sophisticated than plop changes into plain text and keep it all in one piece. (Just my opinion, naturally; I'm sure others would disagree.) If there were a way to, say, gain the layout advantages found in a more robust framework like what is found in WikiBooks, this already magnificent resource could easily acquire a couple more orders of magnitude of awesomeness. It leads me to a couple of fundamental questions:

- Does anyone know of any libraries or other tools that are targeted at converting/migrating GFM Markdown to something close to WikiMedia syntax?
- If someone were masochistic enough to want to experiment with what that might look like, would you have any objection to the attempt?

I'm not na√Øve enough to think that the evolution of the list could ever move away from GitHub. What it's already grown into makes it self-evident that this is the way to keep it in front of the right type and volume of eyeballs to keep it growing. I see it as akin to the way source usually needs to be compiled into a different form altogether to become truly useful, so too it might be that a natural symbiosis could happen between the list as it is here and a downstream "fork" that was focused on applying digital typography to it. This list of resources + the ability to tastefully and easily embed images + multiple pages looping back in on each other + collapsible tables...well, I'm sure you get the idea. :grin:

I'm interested to hear any and all thoughts on the matter.
<!--- Provide a general summary of your changes in the Title above -->
<!--- If you're unsure about anything in this checklist, don't hesitate to create a PR and ask. I'm happy to help! -->

# Description

<!--- Describe your changes in detail -->
Added a description for the **zsh-starterkit** framework, as well as the navigation.

# Type of changes

- [ ] A link to an external resource like a blog post
- [ ] Add/remove a tab completion
- [x] Add/remove a framework
- [ ] Add/remove a plugin
- [ ] Add/remove a theme
- [ ] Text cleanups/typo fixes

# Copyright Assignment

- [x] This document is covered by the [BSD License](https://github.com/unixorn/awesome-zsh-plugins/blob/master/LICENSE), and I agree to contribute this PR under the terms of the license.

# Checklist:

<!--- Go over all the following points, and put an `x` in all the boxes that apply. -->
- [x] I have confirmed that the link(s) in my PR are valid.
- [x] My entries are single lines and are in the appropriate (plugins, themes or completions) section, and in alphabetical order in their section.
- [x] I have read the **CONTRIBUTING** document.
- [x] All new and existing tests passed.
- [ ] I have stripped leading and trailing **zsh-** or **oh-my-zsh-** substrings from the link name. This makes it easier to find plugins/themes/completions by name since there aren't big clusters in the **O** and **Z** sections of the list.

**NOTE**: I did not choose to remove the leading "zsh-", mainly because that's the actual name of the framework. Being that this isn't a plugin, I wasn't sure if this should be done and am open to changing it if that is an issue.
Hello, can you please add my plugin to your list?

omz-hist: Provides convenient alias to examine your command line history in Zsh.
https://github.com/lfromanini/omz-hist

Thanks in advance!
Hello!
I was browsing the awesome list recently and had bad impression of old not-updated plugins that clutter it. This is a problem.

I thought: a Perl script could (a) download and parse `awesome-zsh-plugins` list via `WWW::Mechanize`, (b) extract the plugins that are contained in it and (c) again use `WWW::Mechanize` on each of the plugins' Github pages, to get the time of last commit.

So basically: filtering-out plugins that were updated in the last 6 months.

Then it becomes obvious: the README.md could have section "Active plugins" where the recently updated plugins would be listed. The README.md could be updated by the script automatically.

First version of the script could use `git clone --depth 1 ...` for the second step (getting time of last commit). It would be slow, but the main task would be to update README.md. So this reduces to a single basic WWW::Mechanize use and a few `git` instructions, and to builting the "Active plugins" section.

I could try coding this script, would it be accepted (it would be in this repo, via PR) and used?

PS. Another section could be build, "Mature plugins", where plugins with commit count >= 100 (or 50 maybe) would be listed.
Hi! Right now all plugins are in the same category. It is absolutely impossible to navigate through them.
May be it will be wise to separate them?
