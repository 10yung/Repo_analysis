Since Xcode 11 includes Swift Package Manager, it would be a really nice way to include SwiftValidator
If you install the latest version of SwiftValidator and you get an error inside the ValidationResult.swift file make sure you add "**return**" inform of "self == .valid" like so:

     public var isValid: Bool {
        
        return self == .valid // add return infront
    }
Hi guys:

After updating to Xcode 10.2 and Swift 5, when executing carthage update I get the following error:

**error: An empty identity is not valid when signing a binary for the product type 'Application'. (in target 'Validator')**

Try again on a new project and throw the same error.

Can someone help me please?

Best regards.

Adrián López Rendón

Hi guys,

Are you planning to add support for Swift 5.0 ?

I've tested to recompile the framework using Swift 5.0 and no issues arise, so you only need to recompile it and that's all.

Best regards,

Albert Arredondo
With the new changes and inclusion of the CardParser Library, SwiftValidator is now able to check credit/debit card numbers for validity using their prefixes, length, and the LUHN algorithm. Verve card from Interswitch Nigeria has also been added to the list of cards it can verify. cool huh?
evaluateWithObject' has been renamed to 'evaluate(with:)

Hello, Is there any plan for supporting osx targets? 
So, it cannot be inherited outside of the library
When dynamically creating controls and registering them, they are not deallocated when they are unregistered, I figured the cause could probably be the fields dictionary keeping a reference to them.
Here is my snippet of code:

     merchant.visibleParams?.map { $0.associatedControl }.forEach { control in
                control.onChange = { _ in self.validate() }
                self.validator.registerField(control, rules: [RequiredRule()]) //here I register
                section.elements.append(control)
       }

When I update the UI and unregister those controls, they are not deallocated:

       node.subnodes?.filter { $0.debugName == "dynamic" }.forEach {  control in
            self.validator.unregisterField(control as! ValidatableField)
        }

Noticed you released and tagged version 5.0.0 but the podspec still points to 4.0.0, also there is an unreleased 4.0.1 (nor even 4.0.0 was released)

As these specs were not sent yet, you could delete the tag, update the podspec and tag it again before sending these podspec to cocoapods