Replace offset_from() with checked_sub() in sgx_urts::env.rs::u_getpwuid_r_ocall
Intel just released 2.8 Linux SGX SDK. The SDK changelog says:
> Intel® Software Guard Extensions SDK includes the following changes in version 2.8:
> - Supported open source version of Intel® Integrated Performance Primitives (Intel® IPP)
cryptography library.
> - Support for the Intel® Deep Neural Network Library (DNNL) library, OpenMP library*
and POSIX Threads (Pthread) library*.
> (*) Limited support only. Refer to the Developer Reference for additional details.
> - Refactored the switchless library. Developers have to opt-in, i.e. import the
sgx_tswitchless.edl into their enclave EDL file and link with the trusted library
(sgx_tswitchless.a) and untrusted library (sgx_uswitchless.a), in order to do enclave
> transitions using threads.
> - Removed sgx_uae_platform.h, sgx_tae_service.h, sgx_tae_service.edl,
libsgx_platform.so and libsgx_platform_sim.so
> - Updated Local Attestation sample project to demonstrate key exchange flow between
multiple processes.
> - Fixed bugs.

PSW changelog:

> Intel® Software Guard Extensions PSW includes the following changes in 2.8.100:
> - Added support for modularized installation.
> - Added support for running SGX applications inside Docker containers.
> - Fixed bugs

Will move to 2.8. But it seems that Intel missed some packages:

```
$ apt-get update && apt-get install -y gnupg2 apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL  https://download.01.org/intel-sgx/sgx_repo/ubuntu/intel-sgx-deb.key | apt-key add -
$ add-apt-repository "deb https://download.01.org/intel-sgx/sgx_repo/ubuntu bionic main"
$ apt-get update
$ apt-get install libsgx-aesm-ecdsa-plugin-dbgsym libsgx-aesm-launch-plugin libsgx-ae-pce libsgx-dcap-pccs libsgx-ae-qe3 libsgx-dcap-default-qpl-dbgsym libsgx-ae-qve libsgx-quote-ex libsgx-aesm-pce-plugin libsgx-epid-dev libsgx-quote-ex-dev libsgx-enclave-common-dev libsgx-aesm-ecdsa-plugin libsgx-aesm-epid-plugin-dbgsym libsgx-dcap-ql-dbg libsgx-dcap-ql-dev libsgx-epid-dbgsym libsgx-aesm-quote-ex-plugin-dbgsym libsgx-aesm-launch-plugin-dbgsym libsgx-ae-le libsgx-epid libsgx-urts-dbgsym libsgx-enclave-common-dbgsym libsgx-aesm-epid-plugin libsgx-aesm-quote-ex-plugin libsgx-enclave-common libsgx-launch libsgx-launch-dbgsym libsgx-dcap-ql-dbgsym libsgx-dcap-default-qpl-dbg libsgx-dcap-default-qpl-dev libsgx-ae-epid libsgx-uae-service-dbgsym libsgx-launch-dev libsgx-aesm-pce-plugin-dbgsym libsgx-dcap-default-qpl libsgx-quote-ex-dbgsym libsgx-uae-service libsgx-urts libsgx-dcap-ql
The following packages have unmet dependencies:
 libsgx-dcap-default-qpl-dbg : Depends: libsgx-dcap-default-qpl (= 1.3.101.3-bionic1) but 1.4.100.4-bionic1 is to be installed
 libsgx-dcap-ql-dbg : Depends: libsgx-dcap-ql (= 1.3.101.3-bionic1) but 1.4.100.4-bionic1 is to be installed
E: Unable to correct problems, you have held broken packages.
```
When Compile it on Ubuntu 18.04, there is a warning in `sgx_ustdc/file.c`

```
file.c: In function _u_readdir64_r_ocall_:
file.c:276:5: warning: _readdir64_r_ is deprecated [-Wdeprecated-declarations]
     return readdir64_r(dirp, entry, result);
     ^~~~~~
In file included from file.c:29:0:
/usr/include/dirent.h:201:12: note: declared here
 extern int readdir64_r (DIR *__restrict __dirp,
            ^~~~~~~~~~~
```

Since glibc 2.24, `_readdir64_r_ ` is deprecated. (source : http://man7.org/linux/man-pages/man3/readdir_r.3.html)
I'm trying to build the `sgx-types` dependency for [my project](https://github.com/encointer/encointer-app/commit/d55f748d915fc701a023eab86fcf2cc777d0b07b). I get the following error:

```
error[E0512]: cannot transmute between types of different sizes, or dependently-sized types
    --> /home/abrenzikofer/.cargo/git/checkouts/rust-sgx-sdk-fc8771c5c45bde9a/4508450/sgx_types/src/macros.rs:115:24
     |
115  |                   unsafe{macros::transmute([0u8; $size])}
     |                          ^^^^^^^^^^^^^^^^^
     | 
    ::: /home/abrenzikofer/.cargo/git/checkouts/rust-sgx-sdk-fc8771c5c45bde9a/4508450/sgx_types/src/types.rs:1413:1
     |
1413 | / impl_struct_default! {
1414 | |     sgx_ql_qv_supplemental_t, 120;
1415 | | }
     | |_- in this macro invocation
     |
     = note: source type: `[u8; 120]` (960 bits)
     = note: target type: `types::sgx_ql_qv_supplemental_t` (928 bits)


```


I'm building with 

```
export CC=i686-linux-android16-clang
cargo +nightly-2019-10-04-x86_64-unknown-linux-gnu build --target i686-linux-android --release
```

The same thing worked with v1.0.9 but it fails with v1.1.0
Also, it works with other targets (armv7-linux-androideabi and aarch64-linux-android)
I'm recently reading the source code of `sgx_tstd`,`sgx_types`,`sgx_libc`,and so on.
It's quite interesting and useful for  users and developers to  know about the design details of `mesatee-sgx`.

I would like to create a documents about architecture of source code, but it may be weeks ago.
By the way, I'm not at english writing but I'll try my best to do it and the documents may need to be reviewed. :smile:


Hi all,

This project now belongs to apache, and has a new repo path at: https://github.com/apache/mesatee-sgx

Currently if one uses the forked crates, he/she still needs to use the old repo URL as `git = "https://github.com/baidu/rust-sgx-sdk", rev = "v1.0.9"`, **because all the forked crates are using the old repo URL**.

Now, mixed usage of this SDK, like the following Cargo.toml would trigger collision between two sgx_tstd:

```toml
sgx_tstd = { rev = "v1.0.9", git = "https://github.com/apache/mesatee-sgx.git" }
wasmi = { git = "https://github.com/mesalock-linux/wasmi-sgx" }
```

You'll see
```
error: the `#[global_allocator]` in sgx_tstd conflicts with this global allocator in: sgx_tstd
error: duplicate lang item in crate `sgx_tstd`: `f32_runtime`.
  |
  = note: first defined in crate `sgx_tstd`.

error: duplicate lang item in crate `sgx_tstd`: `f64_runtime`.
  |
  = note: first defined in crate `sgx_tstd`.

error: duplicate lang item in crate `sgx_tstd`: `panic_impl`.
  |
  = note: first defined in crate `sgx_tstd`.

error: duplicate lang item in crate `sgx_tstd`: `begin_panic`.
  |
  = note: first defined in crate `sgx_tstd`.

error: duplicate lang item in crate `sgx_tstd`: `oom`.
  |
  = note: first defined in crate `sgx_tstd`.

error: aborting due to 6 previous errors

error: Could not compile `Helloworldsampleenclave`.
```

So I'm planning to have thorough update on all of the forked crates to use the new repo URL, and it would affect all of the projects which are depending on the old URL.

Any ideas?

Best,
Yu
The following rust-lang PR should give us better debug info for `duplicate lang item`issues:

Issue:
https://github.com/rust-lang/rust/issues/60561

PR:
https://github.com/rust-lang/rust/pull/64883

Can we get support for recent nightly including this PR?
Dear @dingelish 

So far we've only done RA in debug mode, which is pointless for a real application. After talking to Intel we've learned that RA is possible in production mode without obtaining any special license with Intel. The pointers they gave us were:

https://github.com/intel/SGXDataCenterAttestationPrimitives
https://download.01.org/intel-sgx/dcap-1.0.1/docs/Intel_SGX_DCAP_ECDSA_Orientation.pdf
https://01.org/intel-softwareguard-extensions/downloads/intel-sgx-dcap-linux-1.0.1-release
https://software.intel.com/sites/default/files/managed/f1/b8/intel-sgx-support-for-third-party-attestation.pdf
https://api.portal.trustedservices.intel.com/ (See the section titled “Attestation Services Utilizing ECDSA”)

Now the question for this rust SDK: Do you already have some samplecode to perform RA in production mode with this new procedure? 

Dears,
I saw asylo support grpc server running inside enclave. Is there a similar demo in rust-sgx-sdk which can run a http/rpc server inside enclave ?
I've tried to fix this:
https://github.com/mesalock-linux/wabt-rs-sgx/pull/1

but I realized I might be in the wrong place.

Would you mind forking wabt as well? Or wabt-core, like you did here