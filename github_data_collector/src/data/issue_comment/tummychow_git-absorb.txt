I don't want to go making fixups before the last merge commit, it will destroy the history. But because my master branch is always the latest feature branch merged in, I am always happy to fixup every commit until the last merge. IMHO this should be the default behaviour.
Hi, thanks for this very nice tool! After installing it with `cargo install git-absorb` I don't get any bash completions and `git absorb --help` fails.

To remedy the `--help` situation I ran did the following:

```
help2man git-absorb > .local/share/man/man1/git_absorb.1
mandb
```

Now that I know that `-r` exists, the autocompletion is not so important anymore...
I ran `git absorb` and it created a number of fixup commits, but still left many staged changes. The documentation doesn't say what to do here, or what this means. I'm assuming that it means that absorb couldn't find any existing commits to fixup?

It could be good to explain what this means in the documentation, and give suggested remediation steps. If you have any staged changes then you can't proceed to the next step of `git rebase -i --autosquash`.

Apologies if I'm misunderstanding something!
Currently running git-absorb with non-trivial changes creates LOTS of fixup commits with the same message, because a separate fixup commit is created for each hunk. Is there a reason to do this or could we squash those into a few commits?
After fixing #6, I noticed another issue with the testcase from that issue.

In the testcase the commit to absorb is removing all instances of `#[cfg(feature = "rsa_keygen")]` and there is an intermediate commit adding a function with that attribute:

```
83      }
84   
85      #[cfg(feature = "rsa_keygen")]
86   +  pub fn limbs_even_add_one(r: &mut [Limb]) {
     +      // ...
91   +  }
92   +  
93   +  #[cfg(feature = "rsa_keygen")]
94      pub fn limbs_count_low_zero_bits(v: &[Limb]) -> u16 {
```

git-absorb decides to fix up this intermediate commit with both the hunk removing the `cfg` attribute at line 85 and at line 93, while arguably line 85 removal doesn't belong to the intermediate commit, as line 85 wasn't added by the commit.

It's clear why git-absorb does it, and if it produced a fixup for an older commit introducing line 85, that fixup would conflict with the intermediate commit. Still, git-absorb could:

* Keep the removal of line 85 in the index
* Warn about this
* It's also possible rewrite the history to remove line 85 from an older commit, if we don't limit ourselves to producing fixup commits on top of existing history, but that's probably out of scope for git-absorb?
Specifically, since I'm using signed commits in a repo, I would love to be able to also create signed commits with absorb. This can of course be generalized down to "specify options to be used when running commit".
I have the current commit tree in my repository

```
* f2a4584 (min-version) Get min versions build working
* 5261bac (origin/all-the-ci) Cirrus CI
* 3ca1ca4 Circle CI
* a2e3d45 (HEAD -> travis, origin/travis) Fix clippy issues in tests
* c85d370 cargo fmt, again
* 37b490a Add travis config
* 8ea0653 (origin/master, origin/HEAD) Merge pull request #4 from Nemo157/fixes
```

I have changed the `.travis.yml` file and staged it, which should be absorbed into `37b490a`, running `git-absorb -v -n` gives

```
Feb 09 17:23:06.222 DEBG repository found, path: /Users/nemo157/sources/cbor-diag-rs/.git/, line: 22, module: git_absorb
Feb 09 17:23:06.223 DEBG head found, head: refs/heads/travis, line: 26, module: git_absorb::stack
Feb 09 17:23:06.224 DEBG head pushed, head: refs/heads/travis, line: 35, module: git_absorb::stack
Feb 09 17:23:06.224 DEBG branch hidden, branch: refs/heads/fixes, line: 48, module: git_absorb::stack
Feb 09 17:23:06.225 DEBG branch hidden, branch: refs/heads/master, line: 48, module: git_absorb::stack
Feb 09 17:23:06.225 DEBG branch hidden, branch: refs/heads/min-version, line: 48, module: git_absorb::stack
Feb 09 17:23:06.225 DEBG branch not hidden, branch: refs/heads/travis, line: 51, module: git_absorb::stack
Feb 09 17:23:06.229 DEBG commuting hunk, header: -26,5 +25,0, path: .travis.yml, line: 93, module: git_absorb
Feb 09 17:23:06.230 DEBG could not find noncommutative commit, line: 156, module: git_absorb
```

Because it has hidden commits from `min-version`, a downstream branch from the one I'm currently fixing up, there are no commits available to absorb the change into. Deleting `min-version` and running `git absorb -v -n` again gives:

```
Feb 09 17:23:41.229 DEBG repository found, path: /Users/nemo157/sources/cbor-diag-rs/.git/, line: 22, module: git_absorb
Feb 09 17:23:41.230 DEBG head found, head: refs/heads/travis, line: 26, module: git_absorb::stack
Feb 09 17:23:41.231 DEBG head pushed, head: refs/heads/travis, line: 35, module: git_absorb::stack
Feb 09 17:23:41.232 DEBG branch hidden, branch: refs/heads/fixes, line: 48, module: git_absorb::stack
Feb 09 17:23:41.232 DEBG branch hidden, branch: refs/heads/master, line: 48, module: git_absorb::stack
Feb 09 17:23:41.232 DEBG branch not hidden, branch: refs/heads/travis, line: 51, module: git_absorb::stack
Feb 09 17:23:41.234 DEBG commit pushed onto stack, commit: a2e3d45c498c4693c2197b8125d98f5e65e93cf0, line: 75, module: git_absorb::stack
Feb 09 17:23:41.235 DEBG commit pushed onto stack, commit: c85d370703849bf12196e91b78cb410fc14e057e, line: 75, module: git_absorb::stack
Feb 09 17:23:41.236 DEBG commit pushed onto stack, commit: 37b490a805ca4b94ba68f88acb2347cdbc76ea0f, line: 75, module: git_absorb::stack
Feb 09 17:23:41.237 WARN merge commit found, commit: 8ea0653e9d2e1a83f48a3aefa15424bbe09352ef, line: 62, module: git_absorb::stack
Feb 09 17:23:41.249 DEBG commuting hunk, header: -26,5 +25,0, path: .travis.yml, line: 93, module: git_absorb
Feb 09 17:23:41.249 DEBG skipped commit with no path, commit: a2e3d45c498c4693c2197b8125d98f5e65e93cf0, line: 117, module: git_absorb
Feb 09 17:23:41.250 DEBG skipped commit with no path, commit: c85d370703849bf12196e91b78cb410fc14e057e, line: 117, module: git_absorb
Feb 09 17:23:41.250 DEBG found noncommutative commit by add, commit: 37b490a805ca4b94ba68f88acb2347cdbc76ea0f, line: 122, module: git_absorb
Feb 09 17:23:41.251 INFO would have committed, header: -26,5 +25,0, fixup: Add travis config, line: 185, module: git_absorb
```

I'm not sure of the best solution here to support all usecases, I think personally what I would want is for `git-absorb` to walk down the first parent line from the current commit until it encounters any branch (local or remote) and hide commits from that point, you might notice I don't use a local `master` branch so the current behaviour of only hiding local branches would fail to correctly identify the point at which to stop anyway.

(EDIT: Sorry, accidentally submitted this with an old issue I was writing before I managed to debug where this was actually going wrong)
It would be nice if the algorithm was documented at a high-level, not just so that people can more easily contribute to the code, but also so that users can be aware of any particular strengths or caveats.  For example it seems that it doesn't use libgit2's `blame` APIs - is that right?  In which case, does it just iterate through the `N` most recent commits (where `N` seems to default to 10) looking for commits which change the same lines altered by the fixup hunks?