The advantage of dynamically generating elements such as tuple, array, and arrow types is that there's no maximum arity of such generic types. However, this interferes with being able to compile packages separately, since separate packages may decide to generate the same elements, leading to conflicts when loading or linking.

The easiest fix would be to pre-generate these types up to a maximum arity. Scala currently does this (with a cap of 22) but it looks like Scala 3 will no longer have this limit: https://github.com/lampepfl/dotty/pull/1758. It may be possible to have our cake and eat it too if we borrow some of those techniques.
This fixes issues with compiled module names being context-sensitive and inconsistent when compiled separately into DLLs. See Test/dafny0/DafnyLib.dfy for the regression test and more details.

Passes all tests although I suspect it may break untested use of nested modules in target languages other than C#. It should not be overly difficult to handle fully-qualified names though.

This is currently off by default and enabled by the `/optimize` flag, only because this library was not previously available for some platforms (e.g. Mono). However, it is an available dependency in all the more modern frameworks, and it should be reasonable to make this a hard dependency.

See #507 (which this depends on).
Dafny assigns sequentially instead of what supposed to be a parallel assignment.

This is an example of a code that runs just fine with no RunTimeErrors.
https://www.riseforfun.com/Dafny/mieKE

And this is the same code with a change in the order of assignment in line 117. **This code has an RTE.**
https://www.riseforfun.com/Dafny/uaMz
I get verification timeout on the code snippet:

var a:int := 0x0000_0010_DEAD_BEEF;
var testbv:bv64 := a as bv64;
var testval:int := testbv as int;

assert testval == a;   // "Timed out on: assertion violation"

the command I use is Dafny.exe /trace /errorTrace:0 /timeLimit:10 /ironDafny /allocated:1 /induction:1 /arith:10 /compile:0 test1.dfy
The dafny version I use is the commits on 10/24/2019, cc0b23c. I fail to compile the latest Dafny source code on windows with VS 2019, as I see DafnyPipeline uses Mono.Cesil and not sure if I need to install Mono alongside with .Net Core. 

```
module List {
  datatype t<A> = Nil | Cons(A, t<A>)
}
  
module Bug1 {
  import List

  function method foo(x: List.t<char>, y: List.t<char>): List.t<char> {
    match (x, y) 
      case (Cons(_, _), _) => List.Cons('-', List.Nil)
      case (Nil, _) => List.Nil
  }
}
```

```
$ dafny Bug2.dfy
Dafny 2.3.0.10506
Bug2.dfy(2,32): Error: Undeclared top-level type or type parameter: t (did you forget to qualify a name or declare a module import 'opened?')
Bug2.dfy(11,12): Error: the declared type of the formal (t<?>) does not agree with the corresponding type in the constructor's signature (t<char>)
2 resolution/type errors detected in Bug2.dfy
```


```
module Option {
  datatype t<A> = None | Some(A)
}

module P {
  datatype t = P
}

module Bug {
  import Option
  import P
  datatype input = Input(z: Option.t<P.t>)
  type t = input -> bool
  const Foo: t := (x: input) =>
    match x
      case Input(Some(_)) => true
}
```

```
$ dafny Bug3.dfy
Dafny 2.3.0.10506
Bug3.dfy(14,18): Error: command assigns to a global variable that is not in the enclosing procedure's modifies clause: $Heap
1 type checking errors detected in /var/folders/85/f0tdypl56qj4hllhy6_37wmd0nr39q/T/Bug3__4_Bug.bpl

*** Encountered internal translation error - re-running Boogie to get better debug information

/var/folders/85/f0tdypl56qj4hllhy6_37wmd0nr39q/T/Bug3__4_Bug.bpl(2829,8): Error: command assigns to a global variable that is not in the enclosing procedure's modifies clause: $Heap
1 type checking errors detected in /var/folders/85/f0tdypl56qj4hllhy6_37wmd0nr39q/T/Bug3__4_Bug.bpl
```
The Java compiler produces wrong output regarding constructors for a current test (comp/Class.dfy).  In particular the code below produces a zero-argument constructor that initializes a, b, c, but then produces a method named __ctor that is the translation of the given Dafny constructor

```
class MyClass {
  var a: int
  const b: int
  const c := 17
  static const d: int
  static const e := 18
  constructor (x: int) {
    a := 100 + x;
    b := 200 + x;
  }

function method F(): int { 8 }
  static function method G(): int { 9 }
  method M() returns (r: int) { r := 69; }
  static method N() returns (r: int) { return 70; }
}
```
This is a high level feature request with a few different related issues/PRs:

* ~~#464 (Stop the dafny CLI from trying to dynamically resolve all dependent DLLs)~~
* ~~#487 (Needed to support extern code properly)~~
* ~~#491 (Dafny runtime nuget package)~~
* #510 (Otherwise compiled module names are not stable across DLLs)
* https://github.com/dafny-lang/dafny.msbuild/issues/2 (Make the MSBuild tasks aware of this support and include dependent DLLs when compiling)
