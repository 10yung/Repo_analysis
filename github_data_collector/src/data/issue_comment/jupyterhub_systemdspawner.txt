https://github.com/jupyterhub/systemdspawner/pull/53 Fixes an issue with using systemdspawner with CentOS. The changes have been in master since June. It would be nice to release this to users.
i have jupyterhub on my machine(ubuntu 18.04) and i'm trying to use docker with continuumio/anaconda3 image, but after making right config while jupyter trying to spawn server for me after loggin in. So i got 404 error. [error](https://i.imgur.com/iWgmJK4.png). Can someome help me with this error? Also, this image already downloaded in my docker list
jupyterhub_config.py
```
c.JupyterHub.ip = '*'
c.JupyterHub.port = *
c.Jupyterhub.jupyterhub_cookie_secret = "./jupyterhub_cookie_secret"
c.JupyterHub.ssl_key="*"
c.JupyterHub.ssl_cert="*"
#SPAWNER
from dockerspawner import DockerSpawner
c.JupyterHub.spawner_class = DockerSpawner
import netifaces
docker0 = netifaces.ifaddresses('docker0')
docker0_ipv4=docker0[netifaces.AF_INET][0]
c.JupyterHub.hub_ip=docker0_ipv4['addr']
c.DockerSpawner.image = 'continuumio/anaconda3:cd83b04b8169'
```


```
server: 404 Client Error: Not Found ("manifest for continuumio/anaconda3:cd83b04b8169 not found")
ERROR:asyncio:Task exception was never retrieved
future: <Task finished coro=<BaseHandler.spawn_single_user() done, defined at /usr/local/lib/python3.6/dist-packages/jupyterhub/handlers/base.py:697> exception=NotFound(HTTPError('404 Client Error: Not Found for url: http+docker://localhost/v1.39/images/create?tag=cd83b04b8169&fromImage=continuumio%2Fanaconda3',),)>
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/docker/api/client.py", line 261, in _raise_for_status
    response.raise_for_status()
  File "/usr/lib/python3/dist-packages/requests/models.py", line 935, in raise_for_status
    raise HTTPError(http_error_msg, response=self)
requests.exceptions.HTTPError: 404 Client Error: Not Found for url: http+docker://localhost/v1.39/images/create?tag=cd83b04b8169&fromImage=continuumio%2Fanaconda3

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/jupyterhub/handlers/base.py", line 889, in spawn_single_user
    timedelta(seconds=self.slow_spawn_timeout), finish_spawn_future
  File "/usr/local/lib/python3.6/dist-packages/jupyterhub/handlers/base.py", line 807, in finish_user_spawn
    await spawn_future
  File "/usr/local/lib/python3.6/dist-packages/jupyterhub/user.py", line 642, in spawn
    raise e
  File "/usr/local/lib/python3.6/dist-packages/jupyterhub/user.py", line 546, in spawn
    url = await gen.with_timeout(timedelta(seconds=spawner.start_timeout), f)
  File "/usr/local/lib/python3.6/dist-packages/tornado/gen.py", line 742, in run
    yielded = self.gen.throw(*exc_info)  # type: ignore
  File "/usr/local/lib/python3.6/dist-packages/dockerspawner/dockerspawner.py", line 968, in start
    yield self.pull_image(image)
  File "/usr/local/lib/python3.6/dist-packages/tornado/gen.py", line 735, in run
    value = future.result()
  File "/usr/local/lib/python3.6/dist-packages/tornado/gen.py", line 742, in run
    yielded = self.gen.throw(*exc_info)  # type: ignore
  File "/usr/local/lib/python3.6/dist-packages/dockerspawner/dockerspawner.py", line 931, in pull_image
    yield self.docker('pull', repo, tag)
  File "/usr/local/lib/python3.6/dist-packages/tornado/gen.py", line 735, in run
    value = future.result()
  File "/usr/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/usr/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/usr/lib/python3.6/concurrent/futures/thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/usr/local/lib/python3.6/dist-packages/dockerspawner/dockerspawner.py", line 743, in _docker
    return m(*args, **kwargs)
  File "/usr/local/lib/python3.6/dist-packages/docker/api/image.py", line 414, in pull
    self._raise_for_status(response)
  File "/usr/local/lib/python3.6/dist-packages/docker/api/client.py", line 263, in _raise_for_status
    raise create_api_error_from_http_exception(e)
  File "/usr/local/lib/python3.6/dist-packages/docker/errors.py", line 31, in create_api_error_from_http_exception
    raise cls(e, response=response, explanation=explanation)
docker.errors.NotFound: 404 Client Error: Not Found ("manifest for continuumio/anaconda3:cd83b04b8169 not found")
```
Would it be possible to launch this systemd containers inside remote machines (via ssh or something like that)?
This adds a `post_start_hook` that is similar to [`spawner.pre_spawn_hook`](https://github.com/jupyterhub/jupyterhub/blob/master/jupyterhub/spawner.py#L599), but runs just after we successfully start the systemd service.

This is helpful when running code in the hook that depends on dynamic users being allocated, which happens after the service is started. For example, referencing the dynamic user name in `chown`.

With this logic we can do something like this in `jupyterhub_config.py`:

```
import subprocess

c.JupyterHub.spawner_class = 'systemdspawner.SystemdSpawner'
c.SystemdSpawner.dynamic_users = True
c.SystemdSpawner.unit_name_template = 'jupyter-{USERID}'

def get_examples(spawner):
    unit_name = f"jupyter-{spawner.user.id}"
    examples_dir = f"/var/lib/private/{spawner.user.name}/examples"
    # copy examples from an external loc to examples_dir
    # these files will be owned by `root`, so make them owned by the dynamic user with:
    subprocess.call(['chown', '-R', f"{unit_name}:{unit_name}", examples_dir])

c.SystemdSpawner.post_start_hook = get_examples
```
The files that are created by the jupyterlab instance run under this spawner have permissions -rw-r--r-- 

For some use cases, it would make sense that the files of one user could not be readable by other users. The usual way to set a default umask (in bashrc or profile) does not work since thet apply at login time, whereas the spawner does not log in.

Could you add an option to set the umask for the jupyter process?
I noticed this while getting a conda-forge package ready for systemdspawner: https://github.com/conda-forge/staged-recipes/pull/8810
I installed JupyterHub on CentOS 7 and config the spawner using sudospawner. I can access to the web interface but the spawner failed to start. Does anyone know what's wrong here?

```
[D 2019-07-10 19:57:08.470 JupyterHub base:289] Refreshing auth for w0lfvn
[D 2019-07-10 19:57:08.471 JupyterHub user:240] Creating <class 'systemdspawner.systemdspawner.SystemdSpawner'> for w0lfvn:
[D 2019-07-10 19:57:08.478 JupyterHub systemdspawner:96] user:w0lfvn Initialized spawner with unit jupyter-w0lfvn-singleuser
[I 2019-07-10 19:57:08.479 JupyterHub log:174] 302 GET /jupyter/hub/ -> /jupyter/hub/spawn (w0lfvn@14.161.31.200) 33.27ms
[D 2019-07-10 19:57:08.514 JupyterHub pages:165] Triggering spawn with default options for w0lfvn
[D 2019-07-10 19:57:08.514 JupyterHub base:780] Initiating spawn for w0lfvn
[D 2019-07-10 19:57:08.515 JupyterHub base:787] 0/100 concurrent spawns
[D 2019-07-10 19:57:08.515 JupyterHub base:792] 0 active servers
[W 2019-07-10 19:57:08.956 JupyterHub auth:941] Failed to open PAM session for w0lfvn: [PAM Error 14] Cannot make/remove an entry for the specified session
[W 2019-07-10 19:57:08.956 JupyterHub auth:942] Disabling PAM sessions from now on.
[D 2019-07-10 19:57:08.977 JupyterHub user:542] Calling Spawner.start for w0lfvn
[D 2019-07-10 19:57:08.979 JupyterHub systemdspawner:144] Bad message (ValueError("unsupported format character 'U' (0x55) at index 7",)): {'name': 'JupyterHub', 'msg': 'user:% Using port %s to start spawning for user %s', 'args': ('w0lfvn', 36034), 'levelname': 'DEBUG', 'levelno': 10, 'pathname': '/usr/lib/python3.6/site-packages/systemdspawner/systemdspawner.py', 'filename': 'systemdspawner.py', 'module': 'systemdspawner', 'exc_info': None, 'exc_text': None, 'stack_info': None, 'lineno': 144, 'funcName': 'start', 'created': 1562763428.9799898, 'msecs': 979.989767074585, 'relativeCreated': 8066.693067550659, 'thread': 140526989694784, 'threadName': 'MainThread', 'processName': 'MainProcess', 'process': 6626}
[I 2019-07-10 19:57:09.036 JupyterHub systemdspawner:160] user:w0lfvn Unit jupyter-w0lfvn-singleuser in failed state, resetting
[D 2019-07-10 19:57:09.039 JupyterHub systemdspawner:240] user:w0lfvn Running systemd-run with: /usr/bin/systemd-run --unit jupyter-w0lfvn-singleuser --uid 1104 --gid 1104 --setenv=PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin --setenv=LANG=en_US.UTF-8 --setenv=JUPYTERHUB_API_TOKEN=cf1284755a9a4d858976cece7887b70e --setenv=JPY_API_TOKEN=cf1284755a9a4d858976cece7887b70e --setenv=JUPYTERHUB_CLIENT_ID=jupyterhub-user-w0lfvn --setenv=JUPYTERHUB_HOST= --setenv=JUPYTERHUB_OAUTH_CALLBACK_URL=/jupyter/user/w0lfvn/oauth_callback --setenv=JUPYTERHUB_USER=w0lfvn --setenv=JUPYTERHUB_SERVER_NAME= --setenv=JUPYTERHUB_API_URL=http://phoenix.data:9091/jupyter/hub/api --setenv=JUPYTERHUB_ACTIVITY_URL=http://phoenix.data:9091/jupyter/hub/api/users/w0lfvn/activity --setenv=JUPYTERHUB_BASE_URL=/jupyter/ --setenv=JUPYTERHUB_SERVICE_PREFIX=/jupyter/user/w0lfvn/ --setenv=SHELL=/bin/bash /bin/bash -c cd /home/w0lfvn && exec jupyterhub-singleuser --port=36034 '--notebook-dir=~/notebooks' --NotebookApp.default_url=/tree
Running as unit jupyter-w0lfvn-singleuser.service.
[D 2019-07-10 19:57:09.068 JupyterHub systemdspawner:265] user:w0lfvn unit jupyter-w0lfvn-singleuser is active
[D 2019-07-10 19:57:09.084 JupyterHub spawner:1084] Polling subprocess every 30s
[I 2019-07-10 19:57:09.517 JupyterHub log:174] 302 GET /jupyter/hub/spawn -> /jupyter/hub/spawn-pending/w0lfvn (w0lfvn@14.161.31.200) 1019.93ms
[I 2019-07-10 19:57:09.562 JupyterHub pages:303] w0lfvn is pending spawn
[I 2019-07-10 19:57:09.629 JupyterHub log:174] 200 GET /jupyter/hub/spawn-pending/w0lfvn (w0lfvn@14.161.31.200) 87.84ms
[D 2019-07-10 19:57:18.535 JupyterHub systemdspawner:268] user:w0lfvn unit jupyter-w0lfvn-singleuser is not active
ERROR:asyncio:Task exception was never retrieved
future: <Task finished coro=<BaseHandler.spawn_single_user() done, defined at /usr/lib/python3.6/site-packages/jupyterhub/handlers/base.py:697> exception=HTTPError()>
Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/jupyterhub/handlers/base.py", line 889, in spawn_single_user
    timedelta(seconds=self.slow_spawn_timeout), finish_spawn_future
tornado.util.TimeoutError: Timeout

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3.6/site-packages/jupyterhub/handlers/base.py", line 922, in spawn_single_user
    % (status, spawner._log_name),
tornado.web.HTTPError: HTTP 500: Internal Server Error (Spawner failed to start [status=3]. The logs for w0lfvn may contain details.)
[W 2019-07-10 19:57:36.370 JupyterHub user:678] w0lfvn's server never showed up at http://127.0.0.1:36034/jupyter/user/w0lfvn/ after 30 seconds. Giving up
[D 2019-07-10 19:57:36.371 JupyterHub user:724] Stopping w0lfvn
[D 2019-07-10 19:57:36.387 JupyterHub systemdspawner:268] user:w0lfvn unit jupyter-w0lfvn-singleuser is not active
[D 2019-07-10 19:57:36.407 JupyterHub user:752] Deleting oauth client jupyterhub-user-w0lfvn
[D 2019-07-10 19:57:36.430 JupyterHub user:755] Finished stopping w0lfvn
[E 2019-07-10 19:57:36.445 JupyterHub gen:974] Exception in Future <Task finished coro=<BaseHandler.spawn_single_user.<locals>.finish_user_spawn() done, defined at /usr/lib/python3.6/site-packages/jupyterhub/handlers/base.py:800> exception=TimeoutError("Server at http://127.0.0.1:36034/jupyter/user/w0lfvn/ didn't respond in 30 seconds",)> after timeout
    Traceback (most recent call last):
      File "/usr/lib64/python3.6/site-packages/tornado/gen.py", line 970, in error_callback
        future.result()
      File "/usr/lib/python3.6/site-packages/jupyterhub/handlers/base.py", line 807, in finish_user_spawn
        await spawn_future
      File "/usr/lib/python3.6/site-packages/jupyterhub/user.py", line 654, in spawn
        await self._wait_up(spawner)
      File "/usr/lib/python3.6/site-packages/jupyterhub/user.py", line 701, in _wait_up
        raise e
      File "/usr/lib/python3.6/site-packages/jupyterhub/user.py", line 669, in _wait_up
        http=True, timeout=spawner.http_timeout, ssl_context=ssl_context
      File "/usr/lib/python3.6/site-packages/jupyterhub/utils.py", line 234, in wait_for_http_server
        timeout=timeout,
      File "/usr/lib/python3.6/site-packages/jupyterhub/utils.py", line 177, in exponential_backoff
        raise TimeoutError(fail_message)
    TimeoutError: Server at http://127.0.0.1:36034/jupyter/user/w0lfvn/ didn't respond in 30 seconds
```
First of all: many thanks for creating this tool!  It's super awesome.

We use jupyterhub on an academic computer cluster where the home directories are exported from another machine via NFS.  With root squashing, this means that root can't see or cd into users' home directories.  As such, when systemd-run is run and by default sets the WorkingDir to the spawning user's home directory, this fails and the service fails with the 200/CHDIR error.  

I guess this relates to the order in which systemd does the chdir to the WorkingDir and becoming the User?  Once it has become the specified user it *can* chdir into the home directory, but as root it can't!

(In our case, jupyterhub runs as a special "jupyterhub" user who has sudo power to run systemd-run, but I don't *think* this matters.)

I can override this with the "user_workingdir" setting -- nice! -- but actually I would like it if jupyterhub session started in the user's home directory.

From what I can see, you are not explicitly setting the WorkingDir in the systemd-run call, so I guess I am proposing adding a config option that would allow setting this -- its default of the user's home dir doesn't work in this case.  It looks like later systemd-run commands support a --working-dir option, but my old systemd 229 does not -- maybe a --property=WorkingDir=XXX works?

I can probably figure out how to do this and send a PR if you think this is reasonable.

Thanks again!

fix to run jupyterhub with systemdspawner on rhea account.

it also set corrently memory limit
If jupyterhub wasn't run in system environment,
user cannot run jupyterhub-singleuser and fail to spawn.