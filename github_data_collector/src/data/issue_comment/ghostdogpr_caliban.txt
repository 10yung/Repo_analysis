This PR adds source location mapping to fields and fragments. It is primarily used for outputting when errors occur.
In Several implementations of graphql there exists possibility to extend scalar types.
Blog: [blog](https://medium.com/open-graphql/top-5-graphql-scalars-3f8a38965b53) also mentions JSON scalar extension for an implementation of graphql.
I canâ€™t  see any easy way how to do it with current implementation of caliban.
If you folks agree that it should be implemented, I can try to make some PR in near future.

an HTTP adapter for https://github.com/finagle/finch would be useful to us. We're very interested in Caliban
Add support for the `extensions` data for each error as defined in the [GraphQL spec](https://graphql.github.io/graphql-spec/June2018/#sec-Errors):
```json
{
  "errors": [
    {
      "message": "Name for character with ID 1002 could not be fetched.",
      "locations": [ { "line": 6, "column": 7 } ],
      "path": [ "hero", "heroFriends", 1, "name" ],
      "extensions": {
        "code": "CAN_NOT_FETCH_BY_ID",
        "timestamp": "Fri Feb 9 14:33:09 UTC 2018"
      }
    }
  ]
}
```

See initial discussion in https://github.com/ghostdogpr/caliban/issues/140
Add support for the `locations` data for each error as defined in the [GraphQL spec](https://graphql.github.io/graphql-spec/June2018/#sec-Errors):
```json
{
  "errors": [
    {
      "message": "Name for character with ID 1002 could not be fetched.",
      "locations": [ { "line": 6, "column": 7 } ],
      "path": [ "hero", "heroFriends", 1, "name" ],
      "extensions": {
        "code": "CAN_NOT_FETCH_BY_ID",
        "timestamp": "Fri Feb 9 14:33:09 UTC 2018"
      }
    }
  ]
}
```

This will require extracting the line and column information of each field when parsing queries.
See initial discussion in https://github.com/ghostdogpr/caliban/issues/140
`StreamStep` return a `StreamValue` after execution, but this only makes sense when using subscriptions. For queries and mutations, we could run the stream and return a `ListValue` of the result instead.
With support for Play Json serialization and routing. 
**Target and solved questions**

Add the Schema for `cats.data.OptionT` and and `fs2.Stream` so that users can use these two data types in Query, Mutation and Subscription directly.

**Problems**

* Because I cannot find a way to convert from `fs2.Stream` to `ZStream` directly, so I just convert `fs2.Stream` to a Vector and then change it to `ZStream`. I have no idea if there will be any performance issue
Say having such the Queries:

```scala
final case class Queries[F[_]: Effect]( // Or any other traits?
    users: F[List[User]],
    userById: UserId => F[Option[User]],
    userByEmail: Email => F[Option[User]]
)

final case class PrettierQueries[F[_]: Effect]( // Or any other traits?
    users: fs2.Stream[F, User],
    userById: UserId => OptionT[F, User],
    userByEmail: Email => OptionT[F, User]
)
```

Neither of them can pass the compile. Just throw the errors:
```
Cannot find a Schema for type com.ukonnra.wonderland.user.endpoint.graphql.Queries[F].
[error]      Caliban derives a Schema automatically for basic Scala types, case classes and sealed traits, but
[error]      you need to manually provide an implicit Schema for other types that could be nested in endpoint.graphql.Queries[F].
[error]      If you use a custom type as an argument, you also need to provide an implicit ArgBuilder for that type.
[error]      See https://ghostdogpr.github.io/caliban/docs/schema.html for more information.
[error]   val interpreter = GraphQL.graphQL(RootResolver(queries)).interpreter
```
See Relay specs here: https://relay.dev/docs/en/graphql-server-specification.html