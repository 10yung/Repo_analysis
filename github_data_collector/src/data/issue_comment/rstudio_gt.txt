latest from github (GithubSHA1: 883df9ad23e49e7e7ede9ea3cce91940fc59f189)  

My use case is an empty table showing what information will be displayed. The end user will enter info in a Shiny app and then the table will update. My workaround will be to populate the table with 0s. Edit: this also happens with 0. The error happened in the print method, when it is applying the functions to the columns.

```r
library(gt)
grand_summary_rows(gt(data.frame(a = c(1,2), b = NA_real_)), columns = vars(b),
                   fns = list(max = ~max(.)))
#> Error: Column `b` must be length 1 (the number of rows), not 0
```
Created on 2020-01-17 by the reprex package (v0.3.0)
When I was creating a `gt` table in a shiny app, I noticed that group subtotals in summary rows didn't equal the sum of the individual group values. I have since reproduced it on several other machines, including a vm with a fresh install of `gt`.

When preparing a reprex, I noticed that calling `dplyr::arrange()` on the grouping variable solved the issue. I'm curious to know if you can reproduce this.

``` r
library(tidyverse)
library(gt)

df <- tibble::tibble(
  name = c("carl", "abbie", "leonard", "paul", "roman", "sheila"), 
  value = runif(6, 50000, 2000000), 
  group = sample(letters[1:3], 6, replace = TRUE)
) 

gttblnoarr <- df %>%
  group_by(group) %>%
  gt(rowname_col = "name") %>%
  summary_rows(groups = TRUE, columns = vars(value), fns = list("sum", "mean"))

gttblnoarr
```

<!--html_preserve-->

<div id="wpedgqriwq" style="overflow-x:auto;overflow-y:auto;width:auto;height:auto;">

<table class="gt_table">

<thead class="gt_col_headings">

<tr>

<th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">

</th>

<th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1">

value

</th>

</tr>

</thead>

<tbody class="gt_table_body">

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

a

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

carl

</td>

<td class="gt_row gt_right">

1356767.0

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

1,356,766.95

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

1,356,766.95

</td>

</tr>

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

c

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

abbie

</td>

<td class="gt_row gt_right gt_striped">

690275.5

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

paul

</td>

<td class="gt_row gt_right">

1527398.6

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

sheila

</td>

<td class="gt_row gt_right gt_striped">

1298380.2

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

3,126,151.35

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

1,042,050.45

</td>

</tr>

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

b

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

leonard

</td>

<td class="gt_row gt_right">

908477.2

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

roman

</td>

<td class="gt_row gt_right gt_striped">

185499.7

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

1,483,879.91

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

741,939.95

</td>

</tr>

</tbody>

</table>

</div>

<!--/html_preserve-->

``` r

gttblarr <- df %>%
  group_by(group) %>%
  arrange(group) %>%
  gt(rowname_col = "name") %>%
  summary_rows(groups = TRUE, columns = vars(value), fns = list("sum", "mean"))

gttblarr
```

<!--html_preserve-->

<div id="mkwezumtku" style="overflow-x:auto;overflow-y:auto;width:auto;height:auto;">

<table class="gt_table">

<thead class="gt_col_headings">

<tr>

<th class="gt_col_heading gt_columns_bottom_border gt_left" rowspan="1" colspan="1">

</th>

<th class="gt_col_heading gt_columns_bottom_border gt_right" rowspan="1" colspan="1">

value

</th>

</tr>

</thead>

<tbody class="gt_table_body">

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

a

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

carl

</td>

<td class="gt_row gt_right">

1356767.0

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

1,356,766.95

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

1,356,766.95

</td>

</tr>

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

b

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

leonard

</td>

<td class="gt_row gt_right gt_striped">

908477.2

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

roman

</td>

<td class="gt_row gt_right">

185499.7

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

1,093,976.89

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

546,988.45

</td>

</tr>

<tr class="gt_group_heading_row">

<td colspan="2" class="gt_group_heading">

c

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

abbie

</td>

<td class="gt_row gt_right gt_striped">

690275.5

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

paul

</td>

<td class="gt_row gt_right">

1527398.6

</td>

</tr>

<tr>

<td class="gt_row gt_left gt_stub">

sheila

</td>

<td class="gt_row gt_right gt_striped">

1298380.2

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row gt_first_summary_row">

sum

</td>

<td class="gt_row gt_right gt_summary_row gt_first_summary_row">

3,516,054.36

</td>

</tr>

<tr>

<td class="gt_row gt_stub gt_right gt_summary_row">

mean

</td>

<td class="gt_row gt_right gt_summary_row">

1,172,018.12

</td>

</tr>

</tbody>

</table>

</div>

<!--/html_preserve-->

``` r

rsummary <- df %>%
  group_by(group) %>%
  summarize(sum = sum(value), mean = mean(value))

rsummary
#> # A tibble: 3 x 3
#>   group      sum     mean
#>   <chr>    <dbl>    <dbl>
#> 1 a     1356767. 1356767.
#> 2 b     1093977.  546988.
#> 3 c     3516054. 1172018.
```

<sup>Created on 2020-01-16 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
Thank you for the work put into gt. It's such a joy to use!

I've noted that when using gt tables in presentations, that with wider data, the distinction between one tab spanner and another can be hard to interpret. 

Recommend a feature such as spanner width to change the distance between tab spanners and/or a logical to add a vertical line as a separator.

``` r
library(tidyverse)
library(gt)

packageVersion("tidyverse")
#> [1] '1.3.0'
packageVersion("gt")
#> [1] '0.1.0'

gtcars %>% head(10) %>%
  select(mfr,model,year,bdy_style,hp,hp_rpm,trq,trq_rpm,mpg_c,mpg_h) %>%
  gt() %>%
  tab_spanner(
    label = "Car Model",
    columns = vars(mfr,model,year)
  ) %>%
  tab_spanner(
    label = "Performance",
    columns = vars(bdy_style,hp,hp_rpm,trq,trq_rpm,mpg_c,mpg_h)
  ) %>%
  tab_header("gtcars dataset")
```
<sup>Created on 2020-01-15 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

![image](https://user-images.githubusercontent.com/3580210/72492769-6d131c80-37ec-11ea-8b66-a509fba186cd.png)

Note above that the distinction between where "Car Model" and "Performance" starts/ends is more of an interpretation of the center of both titles, and less the gap width between the tab spanners.
This PR would fix https://github.com/rstudio/gt/issues/465. 

Basically the underlying issue was the the `create_summary_rows` function was including the grouping and rowname columns in its creation of the latex summary row lines. This resulted in two extra columns being added somewhere in each summary row (one for group column and one for rowname column). 

The changes I made add an additional argument to `create_summary_rows` named `summary_vars` which is meant to be all of the column names in the table. To accomplish this in `create_body_component_l` I just used the `default_vars` variable before `::rowname` was added to it. I also renamed the `default_vars`-post `::rowname` addition to `body_vars` since it is being used for the body portion of the table. 

In the `create_summary_rows` function, I added a line that will only select for the column names that are passed into the `summary_vars` function. 

Using these changed functions, the example shown in the above example works as expected. 

Let me know if there is anything else I need to do to get this PR merged!

Thanks!
When a `gt` table with `summary_rows` is converted to LaTeX, additional columns are added to the summary rows section causing the alignment to be incorrect. Here is a minimal example (using the example from the `summary_rows` help page with only two columns getting the summary row):

````
---
title: "gt issue"
author: "Tyler Bradley"
date: "1/13/2020"
output:
  pdf_document: default
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(gt)
library(tidyverse)
```

```{r}
sp500 %>%
    dplyr::filter(
        date >= "2015-01-05" &
            date <="2015-01-16"
    ) %>%
    dplyr::arrange(date) %>%
    dplyr::mutate(
        week = paste0(
            "W", strftime(date, format = "%V"))
    ) %>%
    dplyr::select(-adj_close, -volume) %>%
    gt(
        rowname_col = "date",
        groupname_col = "week"
    ) %>%
    summary_rows(
        groups = TRUE,
        columns = vars(open, high, low, close),
        fns = list(
            min = ~min(.),
            max = ~max(.),
            avg = ~mean(.)),
        formatter = fmt_number,
        use_seps = FALSE
    )

```
````

![image](https://user-images.githubusercontent.com/23705496/72260984-f276b100-35e1-11ea-89e0-00a4a565782c.png)


If you render to HTML or just run the code in the console than it is rendered correctly. If you use the `as_latex` function then it returns the LaTeX with the extra spaces. I have found some tables that add two extra columns rather than one as well. 

Any help with this is greatly appreciated!
PR to resolve: [Issue 463](https://github.com/rstudio/gt/issues/463)

When using Knitr to render LaTeX table, ```dt_heading_has_subtitle()``` returns ```TRUE``` when subtitle is not present. If ```TRUE```  is returned when no subtitle is actually present, the ```create_heading_component()``` with ```context='latex'``` constructs a heading component that looks like this in LaTeX output:
```
\caption*{
\large TAB_HEADER \\ 
\small \\
} \\ 
```

The ```\small \\``` line gives the error:

> ! LaTeX Error: There's no line here to end.

Because small is a command that is being preformed on nothing so it returns nothing. The ```\\``` signifies newline when used in the ```longtable``` environment, but it can't be used if no line is actually present (i.e. there's nothing there).. so it is erroring

In the issue I posted, I proposed the solution of changing:

```
dt_heading_has_subtitle <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading) > 0 && !is.null(heading$subtitle)
}

```

To:

```
dt_heading_has_subtitle <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading$subtitle) > 0 && !is.null(heading$subtitle)
}
```

Because with a title and no subtitle present, ```dt_heading_get``` returns:
```
>>>$title
[1] "TAB_HEADER"

$subtitle
character(0)
```

With ``` length(heading) > 0 && !is.null(heading$subtitle)``` in the original function is returning ```True``` because it is counting the length of ```heading``` which is a list of length 2, not the subtitle component of the list- which is actually length zero. 

When I changed it to ```length(heading$subtitle) > 0 && !is.null(heading$subtitle)``` , two of the HTML tests failed (commit 7ac149c), so I  assumed the length of the list needed to be used for proper HTML rendering and the length of the subtitle component needed to be used for proper latex rendering.

In the most recent commit:

- I added a conditional and context variable to the ```dt_heading_has_subtitle```. 
    - With ```context=HTML```(default) it will preform with ``` length(heading) > 0 && !is.null(heading$subtitle)```. 
    - With ```context=latex``` it will preform with ```length(heading$subtitle) > 0 && !is.null(heading$subtitle)``` .

- I adjusted the ```create_heading_component()``` so that when it calls to ```dt_heading_has_subtitle``` under the latex context, it also passes ```context=latex```
**Problem Description**
When using ```as_latex``` and knitr in RStudio, gt LaTeX table fails giving the following error:

>! LaTeX Error: There's no line here to end.

**Reproducible Example**
```
library(gt)
library(tidyverse)

summary_single_table <- tribble(~study, ~N, ~Observation,
                                1,      25,     0.555, 
                                2,      55,     0.777,
                                3,     109,     0.355)



gt_tab <- summary_single_table %>% 
          gt(rowname_col = "study") %>%
  tab_header(title = "Table S1: Summary of Clinical Study Data by Study")


gt_tab %>% as_latex()
```


The LaTeX is failing because gt is registering a subtitle that is not actually present. If I do:

```
g <- gt:::build_data(gt_tab, context='latex')
gt:::dt_heading_has_subtitle(data = g)

>>> [1] TRUE

gt:::dt_heading_get(data = g)

>>>$title
[1] "Table S1: Summary of Clinical Study Data by Study"

$subtitle
character(0)
```

The ```dt_heading_has_subtitle``` function is:

```
dt_heading_has_subtitle <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading) > 0 && !is.null(heading$subtitle)
}
```

If I change this to:

```
dt_heading_has_subtitle <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading$subtitle) > 0 && !is.null(heading$subtitle)
}
```

It accurately returns ```FALSE```  instead of ```TRUE``` and knitr does not fail to render the LaTeX table. 


Note the ```dt_heading_has_title``` should also probably be changed from:

```
dt_heading_has_title <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading) > 0 && !is.null(heading$title)
}
```
To:
```
dt_heading_has_title <- function(data) {

  heading <- dt_heading_get(data = data)

  length(heading$title) > 0 && !is.null(heading$title)
}
```


Right now, widths in `col_width` must be specified as a number of pixels. I would love to be able to specify column widths relative to each other. For example, I'd love to be able to put in something like
```r
cols_width(gt, vars(double_wide_col) ~ 2, vars(half_wide_col) ~ 0.5, TRUE ~ 1)
``` 
or even having the `TRUE ~ 1` implied, so it'd be 
```r
cols_width(gt, vars(double_wide_col) ~ 2, vars(half_wide_col) ~ 0.5)
```
This would mainly be useful because I don't know the width of my table in px as I'm writing it, but I do know how relatively wide I want my columns.
Updating min version of scales so that alpha parameters is now available in the col_factor function
Fixes #456 
I was unable to successfully run R CMD check (`devtools::check()`) due to a failure  of one unit test in the test-data_color.R file (line 36 "the correct color values are obtained when defining a palette"). 

The test fails because the call to `data_color` throws an error which is due to call to `scales::col_factor` having an unused argument (alpha = TRUE). The alpha argument was [added on Aug 18 2018](https://github.com/r-lib/scales/commit/7cd81215ba1f0da3e03418871ffccef7dbc7b523), just after the release of v1.0.0.

Currently the DESCRIPTION file list scales >=1.0.0 as an import. When I updated my local setup to have version 1.1.0 of scales package I no longer have these errors. My proposed fix would be to update the DESCRIPTION file to scales >= 1.1.0. 

``` r
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union

test_tbl <- tibble::tibble(x = 1:12)
# Obtain a palette of 12 colors in #RRGGBB format
pal_12 <-
  paletteer::paletteer_d(palette = "rcartocolor::Vivid") %>% as.character() %>%
  gsub("FF$", "", .)

color_fn <- scales::col_factor(pal_12, domain = test_tbl$x)
color_fn <- scales::col_factor(pal_12, domain = test_tbl$x, alpha = TRUE)
#> Error in scales::col_factor(pal_12, domain = test_tbl$x, alpha = TRUE): unused argument (alpha = TRUE)
```

<sup>Created on 2019-12-29 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>```
