Firstly, I'd say sorry to ask question here. I read the **Timeline.swift** file, there is a private **Node** class in it. But I didn't see anywhere outside invoking it. So, could you help me to understand the usage of the Node? Many thanks.

## Issue #161 
This change adds an Xcode template for generating Imagine Engine game project for tvOS.

Just a heads-up; I've never actually created a project template for Xcode before so thought it would be nice to try it out and also contributing a little bit ;)
Running the Asteroid Blaster tutorial in Xcode 9.2 playground doesn't render scene. Had to search on google for "Playground live view is black" and found a StackOverflow answer that fixed my issue. 

Visit https://stackoverflow.com/questions/43020859/xcode-8-playground-live-view-doesnt-work/43022086

`PlaygroundPage.current.needsIndefiniteExecution = true`

Hi John! I'm resuming work on my platformer and am trying to figure out the best way of determining if a user is in contact with a block/actor in a group. 

My use-case is I have my player who will walk off the edge of an obstacle. When he walks off the edge I want to get a notification that he's no longer in contact with the ground so that I can apply gravity. 

See GIF for my current behavior:
![gravity](https://user-images.githubusercontent.com/814431/38156242-1c189846-3442-11e8-9690-000622ff4e67.gif)

I've accomplished this by adding the following methods to Actor:
```swift
public func isInContact(withBlockGroup group: Group) -> Bool {
        for block in blocksInContact {
            if block.group == group {
                return true
            }
        }
        
        return false
    }
    
    public func isInContact(withActorGroup group: Group) -> Bool {
        for actor in actorsInContact {
            if actor.group == group {
                return true
            }
        }
        
        return false
    }
```

I have a plugin that watches for rectChanges and flips a flag which changes gravity behavior:
```swift
actor.events.rectChanged.addObserver(self) { (scene, player, stuff) in
            if !player.isInContact(withBlockGroup: self.floorGroup) {
                if self.isGrounded {
                    self.isGrounded = false
                }
            }
        }
```

Is there a better/more efficient way of doing this? If not I'd be happy to open a PR with the change.

Hi!

I just tried gave ImagineEngine a try and followed the Walkabout tutorial. Somehow I'm seeing weird behavior, when I click on a horizontal axis right of the player (see attached gif). Sometimes, the player just jumps to the top-left corner of the scene.

To be sure that this isn't a bug caused by me, I copied the content of `FinalCode.swift` and it still happens.

Afterwards I modified the code to print some stuff:
```diff
events.clicked.observe { _, point in
+   print("click: \(point)")
    moveToken?.cancel()

    let speed: Metric = 100
    let horizontalTarget = Point(x: point.x, y: player.position.y)
    let horizontalDuration = TimeInterval(abs(player.position.x - point.x) / speed)
    let verticalTarget = Point(x: point.x, y: point.y)
    let verticalDuration = TimeInterval(abs(player.position.y - point.y) / speed)

    moveToken = player.move(to: horizontalTarget, duration: horizontalDuration)
        .then(player.move(to: verticalTarget, duration: verticalDuration))
        .then(player.playAnimation(idleAnimation))
+       .then { print("horizontalTarget: \(horizontalTarget), verticalTarget: \(verticalTarget), player.position: \(player.position)") }
}
```

This are the print statements when the bug occured:
```
click: (268.0, 309.0)
horizontalTarget: (268.0, 384.0), verticalTarget: (268.0, 309.0), player.position: (268.0, 309.0)
click: (387.0, 309.5)
horizontalTarget: (387.0, 309.0), verticalTarget: (387.0, 309.5), player.position: (387.0, 309.5)
click: (506.0, 309.5)
horizontalTarget: (506.0, 309.5), verticalTarget: (506.0, 309.5), player.position: (16.0, 23.0)
```

Somehow the position of the player is `(16.0, 23.0)` when it should be `(506.0, 309.5)` ðŸ¤”
Its quite easy to reproduce by clicking top-left of the player and then twice on the right side of the player as in the gif and seen in the logs.

![player_jumping_top_left](https://user-images.githubusercontent.com/7734806/37916919-5c527cf6-311d-11e8-9b5b-73f151ff398f.gif)
There must be a way to run scripts from project template and do "pod install" or "swift build"

Worst case this could be in the tool chain pre scripts. I have done similar stuff for AngularJS and Google Closure in XCode 5 utilizing PLOVR.

Also how does XCode compile pods such as ImagineEngine? Does it just cp this to the app bundle as if it was an .so or does it recompile skipping all the parts not used in the my project?
Anyone know how to add Playground template to XcodeTemplates? When Creating new Project I get in iOS section a new iOS Game under the "Imagine Engine"-section; yet I believe it would be cool to have Image Engine Game as template for New Playground.

A copy of /Applications/Xcode.app/Contents/Developer/Library/Xcode/Templates/File\ Templates/Playground/Game.xctemplate may or may not suffice, not sure where to put my very own custom playground template file however.



I would like to rotate `Actor` with `UIImage` to rotate around a defined pivot point but I have not been able to find how to achieve this. 

When I tried to find a solution, the best answer was this: https://stackoverflow.com/questions/27658454/swift-rotating-an-image-in-an-uiimageview-defined-in-the-main-storyboard

What I am trying to achieve: 

![demo](https://raw.githubusercontent.com/fortmarek/issue_images/master/Apple%20Watch%2038mm_0-20.gif)
## Issue #149 
OK, it may be that it's more a _code review_ request rather than an actually _pull_ request, but still. Having a discussion is also great.

Since we want to look for higher resolutions first, we need to set a maximum limit for the scale.

```
    /// The maximum screen scale value allowed
    /// It's used when there are no assets for textures in proper scales are found
    private let maxAllowedScale: Int = Int(Screen.maxScreenScale)
```

I've added that to Screen.maxScreenScale, but there may be a _better_ way to do this.

Also, there most probably is something I _haven't understood_ in the tests and I may have broken them. Or fixed them. There is an issue with loading a texture without having created an image - it starts looking for other resolutions and thus adding more filenames to `imageLoader.imageNames` and I'm _pretty sure_ there should be a better way.

I _may have_ missed something obvious ðŸ™„ 