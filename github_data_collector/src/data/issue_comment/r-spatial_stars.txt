Is there a way to convert stars format file to netcdf or other raster format?
I'm confused as to why a `mutate` example that is given for regular `stars` objects does not work on `stars_proxy` objects. 

```` r
library(stars)
#> Loading required package: abind
#> Loading required package: sf
#> Linking to GEOS 3.6.1, GDAL 2.2.3, PROJ 4.9.3
library(tidyverse)

system.file("tif/L7_ETMs.tif", package = "stars") %>%
  read_stars( proxy = TRUE) -> x

x %>% mutate(band2 = 2* L7_ETMs.tif) 
#> Error in 2 * L7_ETMs.tif: non-numeric argument to binary operator
```

<sup>Created on 2019-12-31 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
`
I have a case where when I use `stars::read_stars(..., proxy = TRUE)` I usually get a `Cannot allocate memory` error and R crashes.

Case 1: use `stars::read_stars` - crashes
Case 2: use `library(stars); library(ncmeta); read_stars` - crashes
Case 3: use `library(ncmeta); stars::read_stars` - works
Case 4: use `library(ncmeta); library(stars); read_stars` - works

Any help troubleshooting the root cause of this? While this workaround is fine, I'm sure others in the world will face this. It's definitely somehow related to the particular netCDF build on my server as I can read the file fine on my desktop computer. Is it just that `stars` uses a different strategy to read `netCDF` when `ncmeta` is loaded first?

Full output:
Case 1:
```r
[kendon.bell@mahuika02 myproject]$ R

R version 3.6.1 (2019-07-05) -- "Action of the Toes"
...
Type 'q()' to quit R.

> stars::read_stars("fn.nc", var = "smd", proxy = TRUE)
netcdf: NC_var_shape: Cannot allocate memory
```
Case 2:
```
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
...
Type 'q()' to quit R.

> library(stars)
Loading required package: abind
Loading required package: sf
Linking to GEOS 3.7.1, GDAL 3.0.1, PROJ 6.0.0
> library(ncmeta)
Definition of "au" in "/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-accepted.xml", line 123, overrides prefixed-unit "1.6605402e-45 kilogram"Definition of "kt" in ...
"/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-common.xml", line 1889, overrides prefixed-unit "1e-06 kilogram"> read_stars("fn.nc", var = "smd", proxy = TRUE)
netcdf: NC_var_shape: Cannot allocate memory
[kendon.bell@mahuika02 myproject]$
```
Case 3:
```
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
...
Type 'q()' to quit R.

> library(ncmeta)
Definition of "au" in "/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-accepted.xml", line 123, overrides prefixed-unit "1.6605402e-45 kilogram"
...
Definition of "nt" in "/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-common.xml", line 1889, overrides prefixed-unit "1e-06 kilogram"
> stars::read_stars("fn.nc", var = "smd", proxy = TRUE)
stars_proxy object with 1 attribute in file:
$`SMD_VCSN_BCC-CSM1.1_1971-1980_RCPpast.nc`
[1] "fn.nc"

dimension(s):
     from   to                  offset  delta  refsys point values
x       1  243                   166.4   0.05      NA    NA   NULL [x]
y       1  260                  -34.35  -0.05      NA    NA   NULL [y]
time    1 3653 1970-12-31 12:00:00 UTC 1 days POSIXct    NA   NULL
```
Case 4:
```
R version 3.6.1 (2019-07-05) -- "Action of the Toes"
...
Type 'q()' to quit R.

> library(ncmeta)
Definition of "au" in "/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-accepted.xml", line 123, overrides prefixed-unit "1.6605402e-45 kilogram"
...
Definition of "nt" in "/scale_wlg_persistent/filesets/home/kendon.bell/udunits/local/share/udunits/udunits2-common.xml", line 1889, overrides prefixed-unit "1e-06 kilogram"
> library(stars)
Loading required package: abind
Loading required package: sf
Linking to GEOS 3.7.1, GDAL 3.0.1, PROJ 6.0.0
> read_stars("fn.nc", var = "smd", proxy = TRUE)
stars_proxy object with 1 attribute in file:
$`SMD_VCSN_BCC-CSM1.1_1971-1980_RCPpast.nc`
[1] "fn.nc"

dimension(s):
     from   to                  offset  delta  refsys point values
x       1  243                   166.4   0.05      NA    NA   NULL [x]
y       1  260                  -34.35  -0.05      NA    NA   NULL [y]
time    1 3653 1970-12-31 12:00:00 UTC 1 days POSIXct    NA   NULL
```
I had an array with only one dimension named and I was getting an error converting it to a stars object.  After some digging, I realized it was because I only had one dimension named.  It looks like `st_as_stars` works if all the dimensions are named, as well as if the dimensions are not named, but does not work if only one dimension is named.

    ar <- array(runif(27), dim=c(3, 3, 3))
    
    #no dimnames, works 
    stars_object <- st_as_stars(ar) 
    
    #full dimnames, also works
    dimnames(ar) <- list(d1=c('a', 'b', 'c'), d2=c('a', 'b', 'c'), d3=c('a', 'b', 'c'))
    stars_object <- st_as_stars(ar)
    
    #partial dimnames, fails
    dimnames(ar) <- list(NULL, NULL, d3=c('a', 'b', 'c'))
    stars_object <- st_as_stars(ar)

Kind of a small thing, but it would be nice if stars was flexible enough to handle these cases.
When executing `write_stars(dsn = "myfile.gpkg", driver = "GPKG")` I get not only a `gpkg` file (which I would expect) but also an xml file `myfile.gpkg.aux.xml` with following contents:

```
<PAMDataset>
  <Metadata domain="IMAGE_STRUCTURE">
    <MDI key="INTERLEAVE">PIXEL</MDI>
  </Metadata>
  <Metadata>
    <MDI key="IDENTIFIER">myfile</MDI>
  </Metadata>
</PAMDataset>
```
What is this file? In other usecases (`sf`, `raster`), the file is not generated and at first sight it seems not necessary to me to have it. Can it be prevented from being generated, for the sake of neat workflows? Is it GDAL doing this?

Thanks for your time and your splendid work.
The `stars` package implements methods—`slice.stars()`, `pull.stars()`, etc.—for the generic `dplyr` verbs `slice()`, `pull()`: , etc. Since the dispatch starts with the generic function (which is exported by `dplyr`) before going to the class-specific method, you can't `slice` or `pull` a `stars` object if `dplyr` isn't loaded.

That may be obvious to experienced R users, but I don't think it would be obvious to a user just starting out in the use of R for interrogating NetCDFs. I'm not sure whether it's possible to return a more informative error than `Error in pull(., temperature) : could not find function "pull"` when `dplyr` isn't loaded, but it would be great to also explicitly document the fact that `dplyr` (or `tidyverse`, since I'd expect that many beginners are using that interactively) should be loaded on [the reference page for these verbs](https://r-spatial.github.io/stars/reference/dplyr.html), rather than just implicitly referring to it by calling them "dplyr verbs".
I have created this patch to ensure st_apply to make sure units are retained. I encountered the issue that all units are dropped when using apply functions. I have added test for functions that drop the units or and attributes that do not have units. I tried to be conservative with setting units. This approach fails when `FUN` changes the units. One could alternatively just assign the output units of `FUN`
 
Building upon the code in #181 I encountered an issue when converting the extracted values to data.frame/tibble.

Conversion to data.table fails in the first example, but works with the multiband tif. Both `as.data.frame` and `as_tibble` works if `st_as_sf()` is called first.

``` r
library(stars)
#> Loading required package: abind
#> Loading required package: sf
#> Linking to GEOS 3.6.1, GDAL 2.1.3, PROJ 4.9.3
suppressPackageStartupMessages(library(tidyverse))

tif <- system.file("tif/olinda_dem_utm25s.tif", package = "stars")
tif_proxy <- read_stars(tif, proxy = TRUE)
points <- st_sample(st_as_sfc(st_bbox(st_dimensions(tif_proxy))), size = 10)

plot(tif_proxy, reset = FALSE)
plot(points, add = TRUE, col = "red")
```

![](https://i.imgur.com/vcy4Mjv.png)

``` r

# Extract values
vals <- aggregate(tif_proxy, points, function(x) x[1], as_points = FALSE) 
class(vals)
#> [1] "stars"

# Convert to data.frame
vals %>% as.data.frame()
#> Error in data.frame(st_coordinates(x, add_max = add_max, center = center), : arguments imply differing number of rows: 1024, 10
vals %>% st_as_sf() %>% as.data.frame()
#>    olinda_dem_utm25s.tif                 geometry
#> 1                     12 POINT (291345.8 9115373)
#> 2                      7 POINT (292871.6 9113988)
#> 3                     10 POINT (294479.6 9118016)
#> 4                     21   POINT (290070 9114552)
#> 5                     48   POINT (292022 9116070)
#> 6                      6 POINT (294631.8 9112668)
#> 7                     41 POINT (290056.4 9120515)
#> 8                     34 POINT (293551.2 9116549)
#> 9                     10 POINT (297911.5 9118027)
#> 10                    17 POINT (290273.7 9112515)

# Convert to tibble
vals %>% as_tibble()
#> Error: Argument 11 must be length 1024, not 10
vals %>% st_as_sf() %>% as_tibble()
#> # A tibble: 10 x 2
#>    olinda_dem_utm25s.tif           geometry
#>                    <dbl>        <POINT [m]>
#>  1                    12 (291345.8 9115373)
#>  2                     7 (292871.6 9113988)
#>  3                    10 (294479.6 9118016)
#>  4                    21   (290070 9114552)
#>  5                    48   (292022 9116070)
#>  6                     6 (294631.8 9112668)
#>  7                    41 (290056.4 9120515)
#>  8                    34 (293551.2 9116549)
#>  9                    10 (297911.5 9118027)
#> 10                    17 (290273.7 9112515)

# With a multiband tif
tif <- system.file("tif/L7_ETMs.tif", package = "stars")
tif_proxy <- read_stars(tif, proxy = TRUE)
points <- st_sample(st_as_sfc(st_bbox(st_dimensions(tif_proxy))), size = 10)

# Extract values
vals <- aggregate(tif_proxy, points, function(x) x[1], as_points = FALSE) 

# Conversion to data.frame
vals %>% as.data.frame() %>% head()
#>                   geometry band L7_ETMs.tif
#> 1 POINT (289480.6 9113228)    1          70
#> 2 POINT (297595.3 9115527)    1          87
#> 3 POINT (291748.8 9118904)    1          69
#> 4 POINT (297374.7 9117326)    1          68
#> 5 POINT (292634.7 9113022)    1          75
#> 6 POINT (291045.9 9116386)    1          60
vals %>% as_tibble()
#> Error: Argument 1 must be a data frame or a named atomic vector, not a sfc_POINT/sfc
vals %>% st_as_sf() %>% as_tibble()
#> # A tibble: 10 x 7
#>    L7_ETMs.tif.V1 L7_ETMs.tif.V2 L7_ETMs.tif.V3 L7_ETMs.tif.V4
#>             <dbl>          <dbl>          <dbl>          <dbl>
#>  1             70             57             55             67
#>  2             87             80             55             13
#>  3             69             62             59             80
#>  4             68             53             46             72
#>  5             75             64             68             59
#>  6             60             42             36             52
#>  7             61             51             42             67
#>  8             61             44             37             48
#>  9             87             76             54             14
#> 10             73             59             57             47
#> # … with 3 more variables: L7_ETMs.tif.V5 <dbl>, L7_ETMs.tif.V6 <dbl>,
#> #   geometry <POINT [m]>
```

<sup>Created on 2019-08-15 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

<details>

<summary>Session info</summary>

``` r
devtools::session_info()
#> ─ Session info ──────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.6.1 (2019-07-05)
#>  os       macOS Mojave 10.14.6        
#>  system   x86_64, darwin15.6.0        
#>  ui       X11                         
#>  language (EN)                        
#>  collate  en_US.UTF-8                 
#>  ctype    en_US.UTF-8                 
#>  tz       Europe/Copenhagen           
#>  date     2019-08-15                  
#> 
#> ─ Packages ──────────────────────────────────────────────────────────────
#>  package     * version    date       lib source                          
#>  abind       * 1.4-5      2016-07-21 [1] CRAN (R 3.6.0)                  
#>  assertthat    0.2.1      2019-03-21 [1] CRAN (R 3.6.0)                  
#>  backports     1.1.4      2019-04-10 [1] CRAN (R 3.6.0)                  
#>  broom         0.5.2      2019-04-07 [1] CRAN (R 3.6.0)                  
#>  callr         3.3.1      2019-07-18 [1] CRAN (R 3.6.0)                  
#>  cellranger    1.1.0      2016-07-27 [1] CRAN (R 3.6.0)                  
#>  class         7.3-15     2019-01-01 [1] CRAN (R 3.6.1)                  
#>  classInt      0.4-1      2019-08-06 [1] CRAN (R 3.6.0)                  
#>  cli           1.1.0      2019-03-19 [1] CRAN (R 3.6.0)                  
#>  colorspace    1.4-1      2019-03-18 [1] CRAN (R 3.6.0)                  
#>  crayon        1.3.4      2017-09-16 [1] CRAN (R 3.6.0)                  
#>  curl          4.0        2019-07-22 [1] CRAN (R 3.6.0)                  
#>  DBI           1.0.0      2018-05-02 [1] CRAN (R 3.6.0)                  
#>  desc          1.2.0      2018-05-01 [1] CRAN (R 3.6.0)                  
#>  devtools      2.1.0      2019-07-06 [1] CRAN (R 3.6.0)                  
#>  digest        0.6.20     2019-07-04 [1] CRAN (R 3.6.0)                  
#>  dplyr       * 0.8.3      2019-07-04 [1] CRAN (R 3.6.0)                  
#>  e1071         1.7-2      2019-06-05 [1] CRAN (R 3.6.0)                  
#>  evaluate      0.14       2019-05-28 [1] CRAN (R 3.6.0)                  
#>  fansi         0.4.0      2018-10-05 [1] CRAN (R 3.6.0)                  
#>  forcats     * 0.4.0      2019-02-17 [1] CRAN (R 3.6.0)                  
#>  fs            1.3.1      2019-05-06 [1] CRAN (R 3.6.0)                  
#>  generics      0.0.2      2018-11-29 [1] CRAN (R 3.6.0)                  
#>  ggplot2     * 3.2.1      2019-08-10 [1] CRAN (R 3.6.1)                  
#>  glue          1.3.1.9000 2019-08-14 [1] Github (tidyverse/glue@7ac044a) 
#>  gtable        0.3.0      2019-03-25 [1] CRAN (R 3.6.0)                  
#>  haven         2.1.1      2019-07-04 [1] CRAN (R 3.6.0)                  
#>  highr         0.8        2019-03-20 [1] CRAN (R 3.6.0)                  
#>  hms           0.5.0      2019-07-09 [1] CRAN (R 3.6.0)                  
#>  htmltools     0.3.6      2017-04-28 [1] CRAN (R 3.6.0)                  
#>  httr          1.4.1      2019-08-05 [1] CRAN (R 3.6.0)                  
#>  jsonlite      1.6        2018-12-07 [1] CRAN (R 3.6.0)                  
#>  KernSmooth    2.23-15    2015-06-29 [1] CRAN (R 3.6.1)                  
#>  knitr         1.24       2019-08-08 [1] CRAN (R 3.6.1)                  
#>  lattice       0.20-38    2018-11-04 [1] CRAN (R 3.6.1)                  
#>  lazyeval      0.2.2      2019-03-15 [1] CRAN (R 3.6.0)                  
#>  lubridate     1.7.4      2018-04-11 [1] CRAN (R 3.6.0)                  
#>  lwgeom        0.1-7      2019-05-06 [1] CRAN (R 3.6.0)                  
#>  magrittr      1.5        2014-11-22 [1] CRAN (R 3.6.0)                  
#>  memoise       1.1.0      2017-04-21 [1] CRAN (R 3.6.0)                  
#>  mime          0.7        2019-06-11 [1] CRAN (R 3.6.0)                  
#>  modelr        0.1.5      2019-08-08 [1] CRAN (R 3.6.0)                  
#>  munsell       0.5.0      2018-06-12 [1] CRAN (R 3.6.0)                  
#>  nlme          3.1-141    2019-08-01 [1] CRAN (R 3.6.1)                  
#>  pillar        1.4.2      2019-06-29 [1] CRAN (R 3.6.0)                  
#>  pkgbuild      1.0.4      2019-08-05 [1] CRAN (R 3.6.0)                  
#>  pkgconfig     2.0.2      2018-08-16 [1] CRAN (R 3.6.0)                  
#>  pkgload       1.0.2      2018-10-29 [1] CRAN (R 3.6.0)                  
#>  prettyunits   1.0.2      2015-07-13 [1] CRAN (R 3.6.0)                  
#>  processx      3.4.1      2019-07-18 [1] CRAN (R 3.6.0)                  
#>  ps            1.3.0      2018-12-21 [1] CRAN (R 3.6.0)                  
#>  purrr       * 0.3.2      2019-03-15 [1] CRAN (R 3.6.0)                  
#>  R6            2.4.0      2019-02-14 [1] CRAN (R 3.6.0)                  
#>  Rcpp          1.0.2      2019-07-25 [1] CRAN (R 3.6.0)                  
#>  readr       * 1.3.1      2018-12-21 [1] CRAN (R 3.6.0)                  
#>  readxl        1.3.1      2019-03-13 [1] CRAN (R 3.6.0)                  
#>  remotes       2.1.0      2019-06-24 [1] CRAN (R 3.6.0)                  
#>  rlang         0.4.0      2019-06-25 [1] CRAN (R 3.6.0)                  
#>  rmarkdown     1.14       2019-07-12 [1] CRAN (R 3.6.0)                  
#>  rprojroot     1.3-2      2018-01-03 [1] CRAN (R 3.6.0)                  
#>  rvest         0.3.4      2019-05-15 [1] CRAN (R 3.6.0)                  
#>  scales        1.0.0      2018-08-09 [1] CRAN (R 3.6.0)                  
#>  sessioninfo   1.1.1      2018-11-05 [1] CRAN (R 3.6.0)                  
#>  sf          * 0.7-7      2019-07-24 [1] CRAN (R 3.6.0)                  
#>  stars       * 0.3-2      2019-08-15 [1] Github (r-spatial/stars@4ec5842)
#>  stringi       1.4.3      2019-03-12 [1] CRAN (R 3.6.0)                  
#>  stringr     * 1.4.0      2019-02-10 [1] CRAN (R 3.6.0)                  
#>  testthat      2.2.1      2019-07-25 [1] CRAN (R 3.6.0)                  
#>  tibble      * 2.1.3      2019-06-06 [1] CRAN (R 3.6.0)                  
#>  tidyr       * 0.8.3      2019-03-01 [1] CRAN (R 3.6.0)                  
#>  tidyselect    0.2.5      2018-10-11 [1] CRAN (R 3.6.0)                  
#>  tidyverse   * 1.2.1      2017-11-14 [1] CRAN (R 3.6.0)                  
#>  units         0.6-3      2019-05-03 [1] CRAN (R 3.6.0)                  
#>  usethis       1.5.1      2019-07-04 [1] CRAN (R 3.6.0)                  
#>  utf8          1.1.4      2018-05-24 [1] CRAN (R 3.6.0)                  
#>  vctrs         0.2.0      2019-07-05 [1] CRAN (R 3.6.0)                  
#>  withr         2.1.2      2018-03-15 [1] CRAN (R 3.6.0)                  
#>  xfun          0.8        2019-06-25 [1] CRAN (R 3.6.0)                  
#>  xml2          1.2.2      2019-08-09 [1] CRAN (R 3.6.0)                  
#>  yaml          2.2.0      2018-07-25 [1] CRAN (R 3.6.0)                  
#>  zeallot       0.1.0      2018-01-28 [1] CRAN (R 3.6.0)                  
#> 
#> [1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library
```

</details>
There are two cases to consider. The input stars objects either have:
1.  same deltas and the offsets differ by delta*N (N integer).
2. Above condition doesn't hold (i.e. the input objects come from different parent grids)

One approach could be to:
- get the bbox of the union of the bboxs of the objects to be combined
- Make a new stars object from this bbox with the smallest dx and dy (in absolute value)
    - For 2., use something similar to st_warp to get the stars objects into the new specification
    - Fill in the values of the new stars object from the input objects in the right places.

A real life example that currently fails (case 2.):

[elevation_nz.zip](https://github.com/r-spatial/stars/files/3507291/elevation_nz.zip)

``` r
library(stars)
library(raster)
library(tidyverse)
library(cowplot)

stars_objects = list.files("elevation_nz", full.names = TRUE) %>% 
  str_subset(".tif") %>% 
  map(read_stars)

stars_objects = stars_objects %>% 
  map(as, "Raster") %>% 
  map(raster::aggregate, fact = 30) %>% 
  map(st_as_stars)

plot1 = ggplot() + 
  geom_stars(data = stars_objects[[1]]) +
  coord_equal() + 
  theme(legend.position = "none",
        axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank()) + 
  ggtitle("object 1")

plot2 = ggplot() + 
  geom_stars(data = stars_objects[[2]]) + 
  coord_equal() + 
  theme(legend.position = "none",
        axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank()) + 
  ggtitle("object 2")


plot3 = ggplot() + 
  geom_stars(data = stars_objects[[1]]) +
  geom_stars(data = stars_objects[[2]]) + 
  coord_equal() + 
  theme(legend.position = "none",
        axis.title = element_blank(),
        axis.text = element_blank(),
        axis.ticks = element_blank(),
        axis.line = element_blank()) + 
  ggtitle("objects 1 and 2")


plot_grid(plot_grid(plot1, plot2, ncol = 1, rel_heights = c(1, 1.65)), plot3, nrow = 1)
```

![](https://i.imgur.com/6a7F8r0.png)

``` r

# Offsets don't quite align and don't have the same x range
st_dimensions(stars_objects[[1]])
#>   from  to  offset delta                       refsys point values    
#> x    1 187 1498853   750 +proj=tmerc +lat_0=0 +lon...    NA   NULL [x]
#> y    1 112 6227902  -750 +proj=tmerc +lat_0=0 +lon...    NA   NULL [y]
st_dimensions(stars_objects[[2]])
#>   from  to  offset delta                       refsys point values    
#> x    1 186 1499155   750 +proj=tmerc +lat_0=0 +lon...    NA   NULL [x]
#> y    1 209 6144000  -750 +proj=tmerc +lat_0=0 +lon...    NA   NULL [y]

# Fails
c(stars_objects[[1]], stars_objects[[2]])
#> Error in c.stars(stars_objects[[1]], stars_objects[[2]]): don't know how to merge arrays: please specify parameter along
# Fails
c(stars_objects[[1]], stars_objects[[2]], along = "x")
#> Error in (function (..., along = N, rev.along = NULL, new.names = NULL, : arg 'X2' has dims=186, 209; but need dims=X, 112
```

<sup>Created on 2019-08-14 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

I came upon this issue while trying to assign an `sfc` column dimension to a stars object derived from a point-timeseries netCDF file. Ideally sooner or later `stars` will understand these files directly (#30), but in the meantime I am trying to manually force the correct dimensions.  
The object has two dimensions, station number and time, and I would like to assign lat-lon coordinates to each station.

Use [this file](https://drive.google.com/file/d/1a9kNX0TSukE51f2RIyo7a6aRX0FaoMOk/view?usp=sharing) (2.9MB) for testing.

```R
library(ncdf4)
library(stars)

fin = '201001.nc'

nc = nc_open(fin)
lon = ncvar_get(nc, 'lon')
lat = ncvar_get(nc, 'lat')
nc_close(nc)

s = read_ncdf(fin)
sfc = st_as_sf(data.frame(lon = lon, lat = lat), coords = 1:2, crs = 4326)$geometry
s2 = st_set_dimensions(s, 'stat', sfc, point = TRUE)
```
Returns this error:
```
Error in xy_from_colrow(cbind(0, seq(x$from, x$to) - 1 + where), geotransform) : 
  length(geotransform) == 6 is not TRUE
```