When moving the serialize() method to the implementation, I get the following warning: 

```
data.serialize(ar);
^
-Wundefined-func-template warning: instantiation of function Data::serialize<cereal::JSONInputArchive> required here, but no definition is available
```

The compilation works, because the template is instantiated. To solve the warning we just have to add an extern template declaration in the header file:

```c++
extern template void Data::serialize<cereal::JSONOutputArchive>(cereal::JSONOutputArchive&);
extern template void Data::serialize<cereal::JSONInputArchive>(cereal::JSONInputArchive&);
```

Maybe this is something we can add to the documentation?

Cheers!
`boost::rtree` does not provide stable code for serialization, and it only has some [experimental codes](https://www.boost.org/doc/libs/1_64_0/boost/geometry/index/detail/serialization.hpp).

So, can `cereal` support serialization for ``boost::rtree`?
The LICENSE file only talks about the license for cereal itself.
However, cereal bundles rapidjson and rapidxml, each with their own licenses. Users should be made aware of this bundling by specifying it in the LICENSE file, either by pointing to the respective license files for rapidjson and rapidxml (although such file is not present for rapidjson), or by copying that info into the main LICENSE file.

Same comment is actually true for the base64.hpp file.
Could we change the Cereal documentation to reflect the below information, please?

I'm talking specifically of the second "Important!" remark at https://uscilab.github.io/cereal/polymorphism.html

The remark says:

> If you are building a dynamic library on Windows, registration must occur within the header file. Source file registration will not properly occur outside of the DLL. This issue is not present on Linux or Mac.

This following is also shared by a reply at https://stackoverflow.com/questions/24604304/vs2013-create-several-dll-files-with-different-classes-to-serialize-with-cereal/59413263#59413263

The problem of using CEREAL_REGISTER_TYPE across DLLs can be solved with cereal 1.3.0 (should work with 1.1 too) by having the following statements in an hpp in a DLL at the bottom of a DLL dependency chain. Let's call it core.dll. In that DLL one will have a file called config.hpp with the following traditional macro. CMake will define core_EXPORTS when generating the build scripts for core.dll. This is all very familiar to Windows developers, I'm sure.

```
#if defined(_MSC_VER) || defined(__MINGW32__) || defined(__MINGW64__)
#  if defined(core_EXPORTS)
#    define CORE_DECL __declspec(dllexport)
#  else
#    define CORE_DECL __declspec(dllimport)
#  endif
#endif
```

Then in another export.hpp in core.dll have the following

```
namespace cereal {
    namespace detail {
        // these declspecs will ensure that the polymorphic loader/saver registrations will
        // all happen against the binding maps in core.dll
        template class CORE_DECL StaticObject<InputBindingMap<PortableBinaryInputArchive>>;
        template class CORE_DECL StaticObject<InputBindingMap<JSONInputArchive>>;
        template class CORE_DECL StaticObject<OutputBindingMap<PortableBinaryOutputArchive>>;
        template class CORE_DECL StaticObject<OutputBindingMap<JSONOutputArchive>>;
        // add similar statements for other archive types as needed
        template class CORE_DECL StaticObject<Versions>;
    } // namespace detail
} // namespace cereal
```

All other **cpp files** (no need to include in hpp) in the other dll projects will #include <core/export.hpp> thereby telling the linker to use the cereal StaticObjects in core.dll. If you debug the InputBindingCreator constructor you will notice that every class is now being registered in the same binding map.

Hope this helps.
Regards
I found a particular 100MB bin file (CarveObj_k5_rgbThreshold10_triangleCameraMatches.bin in minimal example), where cereal fails to load throwing exception "Failed to read 368 bytes from input stream! Read 288"

The respective 900MB XML file (CarveObj_k5_rgbThreshold10_triangleCameraMatches.xml in minimal example), built from the same data, loads normally.

The XML file was produced by 
```
	// {
		// std::ofstream outFile(base + "_triangleCameraMatches.xml");
		// cereal::XMLOutputArchive  oarchive(outFile);
		// oarchive(m_triangleCameraMatches);
	// }
```
and the binary version was produced by
```
	// { 
		// std::ofstream outFile(base + "_triangleCameraMatches.bin");
		// cereal::BinaryOutputArchive  oarchive(outFile);
		// oarchive(m_triangleCameraMatches);
	// }
```

Minimal example: https://www.dropbox.com/sh/fu9e8km0mwbhxvu/AAAfrbqn_9Tnokj4BVXB8miea?dl=0

Version of Cereal used: 1.3.0
MSVS 2017
Windows 10

We have been having some trouble with polymorphic types using ICC 19.0.3.199 20190206 (as installed at NERSC on Cori).

Trying to serialize a derived class by pointer-to-base results in an exception about an unregistered polymorphic type.

A very small test case can be found here:

https://github.com/mhasself/cereal_testing (ultra-minimal branch)

The error is "Trying to save an unregistered polymorphic type (MyClass1)", where MyClass1 is a derived type serialized by pointer to MyClass0, its parent. If serialized through a pointer to type MyClass1, everything works fine.
I'm writing a CMake project to Deserialize an XML schema (.xsd) to an C++ class. I have read the document and most of them are covered with Serialization. I hope someone can help me to find out if cereal can use for Deserialize or not? If yes which part of the document is used for it? Thanks in advance, I'm a newbie.

I'm seeing this with Visual Studio 16.3.5

The access violation happens at include/cereal/types/memory.hpp line 299 because of the following code

```
      // Allocate our storage, which we will treat as
      //  uninitialized until initialized with placement new
      using NonConstT = typename std::remove_const<T>::type;
      std::shared_ptr<NonConstT> ptr(reinterpret_cast<NonConstT *>(new ST()),
          [=]( NonConstT * t )
          {
            if( *valid )
              t->~T();

            delete reinterpret_cast<ST *>( t );
          } );
```

The access violation occurs when evaluating `(_Px && _Px->_Wptr.expired())` in the following method of std::shared_ptr. I actually added a memset call to zero out the aligned_storage block, but the debugger still shows all the base class objects (incl. enable_shared_from_this) as "Unable to read memory". The _Px pointer looks fine.

```
    template <class _Ux>
    void _Set_ptr_rep_and_enable_shared(_Ux* const _Px, _Ref_count_base* const _Rx) noexcept { // take ownership of _Px
        this->_Ptr = _Px;
        this->_Rep = _Rx;
#if _HAS_IF_CONSTEXPR
        if constexpr (conjunction_v<negation<is_array<_Ty>>, negation<is_volatile<_Ux>>, _Can_enable_shared<_Ux>>) {
            if (_Px && _Px->_Wptr.expired()) {
                _Px->_Wptr = shared_ptr<remove_cv_t<_Ux>>(*this, const_cast<remove_cv_t<_Ux>*>(_Px));
            }
        }
#else // ^^^ _HAS_IF_CONSTEXPR // !_HAS_IF_CONSTEXPR vvv
        _Enable_shared_from_this1(*this, _Px,
            bool_constant<
                conjunction_v<negation<is_array<_Ty>>, negation<is_volatile<_Ux>>, _Can_enable_shared<_Ux>>>{});
#endif // _HAS_IF_CONSTEXPR
    }
```

At the moment the only thing that seems to work is constructing the object before the shared_ptr. Which means object loops will fail to deserialize.

It does seem like the C++ runtime I'm using is no longer working with the EnableSharedStateHelper mechanism
```c++
inline std::uint8_t is_little_endian()
    {
      static std::int32_t test = 1;
      return *reinterpret_cast<std::int8_t*>( &test ) == 1;
    }
```

Here we are dereferencing pointer via unrelated type. This violates strict aliasing rules and UB. See [this](http://eel.is/c++draft/basic.lval#11).

The fix is to do this:

```c++
inline std::uint8_t is_little_endian()
    {
      static std::uint32_t test = 1;
      return *reinterpret_cast<unsigned char*>( &test ) == 1;
    }
```

Here I avoid the problem of signedness and use `unsigned char` that can alias other types.