use by-name implicits
https://github.com/scalaz/scalaz/commit/12b69fe56867cd81a19ffd6bbfac5cd6857056f6
What happened to docs at scalaz.github.io? I don't see anything at the moment, it's just empty.

<img width="2552" alt="Screenshot 2019-12-11 at 11 41 15" src="https://user-images.githubusercontent.com/15850565/70614739-fa1df100-1c02-11ea-8d60-bd589b73cce1.png">
<img width="2550" alt="Screenshot 2019-12-11 at 11 41 01" src="https://user-images.githubusercontent.com/15850565/70614741-fa1df100-1c02-11ea-9529-2e5abbfcfa9c.png">



In Scala 2.13, `scala.collection.immutable.Stream` is [deprecated](https://www.scala-lang.org/files/archive/api/2.13.1/scala/collection/immutable/Stream.html) and `scala.collection.immutable.LazyList` is recommend for replacement.

> Deprecated
(Since version 2.13.0) Use LazyList (which is fully lazy) instead of Stream (which has a lazy tail only)

Scalaz doesn't not have `LazyListInstance` for 2.13. I was thinking about adding `LazyListInstance` but it's not as simple as adding one typeclass instance since other types and typeclasses use `Stream` (e.g. `scalaz.Zipper`, `scalaz.Foldable`, etc.).

Could you please add `LazyListInstance`? I'm not sure what can be the best solution for this though. Replacing `Stream` with `LazyList` in Scalaz would be nontrival work.

Consistent Foldable and Foldable1 for #2051 
scalaz introduces better versions of the standard datatypes, such as
`==>>` (Map),
`Maybe`,
`IList` , but does not use it itself (for instance `Map` api returns `List` instead of `IList` and `Option` instead of `Maybe`) , which makes very cumbersome to utilise them.

I identified those places:

DataTypes:
- IList
- ==>>
- These
- Ephemeral Stream

Typeclasses:
- Enum
- Foldable

I discussed it in gitter and going to link corresponding PRs to this issue. 
I think it makes sense to change `Foldable` and `Enum` typeclass as well. What do you think?
- Save some boilerplate when creating instances. For eg. `Monad` and `Traversable` which share `Functor`'s code.
- Users don't need to import `scalaz.Scalaz._` if they only need less powerful TC, for eg. `Functor`. This reduces implicit scope and speedup compile time.

To illustrate, console setup (note that there is no `import scalaz.Scalaz._`):
```scala
scala> import scalaz.tc._

scala> import scala.List

scala> def ft[F[_]](implicit F: Functor[F]): Functor[F] = F
ft: [F[_]](implicit F: scalaz.tc.Functor[F])scalaz.tc.Functor[F]

scala> def mn[F[_]](implicit F: Monad[F]): Monad[F] = F
mn: [F[_]](implicit F: scalaz.tc.Monad[F])scalaz.tc.Monad[F]
```
Before the change
```scala
scala> ft[List]
<console>:17: error: could not find implicit value for parameter F: scalaz.tc.Functor[List]
       ft[List]
```
After the change
```scala
scala> mn[List]
res0: scalaz.tc.Monad[List] = scalaz.tc.instances.list$$anon$1@382dacc3

scala> ft[List]
res1: scalaz.tc.Functor[List] = scalaz.tc.instances.list$$anon$1@382dacc3

scala> mf[List]
res2: scalaz.tc.Functor[List] = scalaz.tc.instances.list$$anon$1@382dacc3
```
In this PR only `List` has the new scheme of instances, but other data types can have the same too. Further steps might be to move hierarchical implicits to the respective "target" *Class so that they get resolved without importing.
With Task gone, it's now time to look at IO. Instead of deleting scalaz.effect outright however, I thought it best to raise an issue to see if `MonadIO` or any typeclasses in effect are worth salvaging. If they are should should `scalaz-effect` as a module remain and should these typeclasses be moved to `core`?
Implementation of [Distributive](https://github.com/scalaz/scalaz/blob/series/7.3.x/core/src/main/scala/scalaz/Distributive.scala) looks like this:

```scala
trait Distributive[F[_]] extends Functor[F] { self =>
  def distribute[G[_]:Functor,A,B](fa: G[A])(f: A => F[B]): F[G[B]]
  def cosequence[G[_]:Functor,A](fa: G[F[A]]): F[G[A]]
}
```

But in [Haskell](https://hackage.haskell.org/package/distributive-0.5.3/docs/Data-Distributive.html) and [Purescript](https://pursuit.purescript.org/packages/purescript-distributive/4.0.0/docs/Data.Distributive) this looks differently:

```haskell
collect :: Functor f => (a -> g b) -> f a -> g (f b)
distribute :: Functor f => f (g a) -> g (f a)
```

So probably in Scala implementation should be more like this:
```scala
trait Distributive[F[_]] extends Functor[F] {
  def collect[G[_]:Functor,A,B](fa: G[A])(f: A => F[B]): F[G[B]]
  def distribute[G[_]:Functor,A](fa: G[F[A]]): F[G[A]]
}
```
well, if we want to have co-name then maybe:
```scala
trait Distributive[F[_]] extends Functor[F] {
  def cotraverse[G[_]:Functor,A,B](fa: G[A])(f: A => F[B]): F[G[B]]
  def distribute[G[_]:Functor,A](fa: G[F[A]]): F[G[A]]
}
```
Maybe I am missing something :)
I just came across the fact that a `Show[Throwable]` exists.

1) It is not wired up into `import Scalaz._`, one needs to `import scalaz.std.java.throwable._`
2) It discards the stack trace entirely.

What's going on with this? :D
Is it OK if I fix both of these (for 7.2 and 7.3)?