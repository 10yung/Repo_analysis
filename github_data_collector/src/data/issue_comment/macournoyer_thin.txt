![image](https://user-images.githubusercontent.com/6527366/51945796-7d13cf80-23d4-11e9-9092-c0d5436106f3.png)

Hello,

I am getting this error when running a test from cmd line
`thin start -e production -p x`

Currently using ruby 2.5.0 on windows
If starting Thin using SSL option listening on port 443, the SERVER_PORT value should be 443.
Instead the value is set to the non-SSL default of 80.

Example
**config.ru**
```ruby
require_relative 'server'
run Server.new
```
**server.rb**
```ruby
require 'rack'
class Server
  def call(env)
    server = env['HTTP_ORIGIN']
    port = env['SERVER_PORT']
    html = "<html><head/><body><form method='post' action='/'><input type='text' name='field'/><input type='submit'/></form></body></html>"
    [200, {"Content-Type" => "text/html"}, [html+"<br/>We are #{server} on #{port}"] ]
  end
end
```
thin start -p 443 --ssl
=> reports port 80 in SERVER_PORT (incorrectly)

thin start -p 832 --ssl
=> reports port 832 in SERVER_PORT (correctly)

This causes Rack::Protection::HttpOrigin to incorrectly trigger a 403/Forbidden response.

I think somewhere in thin_parser.c a default of 443 should be set instead of 80, based on the request scheme being used.
thin               
Traceback (most recent call last):                 
        7: from /usr/local/bin/thin:23:in `<main>' 
        6: from /usr/local/bin/thin:23:in `load'   
        5: from /usr/local/lib/ruby/gems/2.5.0/gems/thin-1.7.2/bin/thin:5:in `<top (required)>'        
        4: from /usr/local/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require'          
        3: from /usr/local/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require'          
        2: from /usr/local/lib/ruby/gems/2.5.0/gems/thin-1.7.2/lib/thin.rb:39:in `<top (required)>'    
        1: from /usr/local/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require'          
/usr/local/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require': cannot load such file --
thin_parser (LoadError)                           
Cross posting from SO: https://stackoverflow.com/questions/53067147/how-to-configure-thin-web-server-from-sinatra

I can't figure out how to configure Thin from Sinatra. Please, help.
see https://tools.ietf.org/html/rfc6585
As Ruby 2.3 is reaching EOL soon, I recently updated my Windows machine to Ruby2.5.1. Thin depends on Eventmachine, on my machine it depends on `eventmachine-1.2.5-x86-mingw32` to be precise. Somehow this binary gem fails to work with the following reason:

`Unable to load the EventMachine C extension; To use the pure-ruby reactor, require 'em/pure_ruby'`

Manually installing using `gem install eventmachine --platform ruby` works a treat. It invokes the compiler and builds the native parts correctly. Still, Thin depends on the precompiled gem in my Bundle. 

Is there a way around this, i.e. having thin depend on the already installed gem instead of downloading the binary version? Or better still to optionally ignore the pre-built gems and do a local compilation.
`eventmachine.rb:531:in `start_tcp_server': no acceptor (port is in use or requires root privileges) (RuntimeError)` - see ZIP for attached test case
[thin_test.zip](https://github.com/macournoyer/thin/files/2376918/thin_test.zip)


One-line fix, as suggested by https://stackoverflow.com/users/2785377/alec-rooney in https://stackoverflow.com/a/25631436/446106

This would be a helpful addition when debugging problems with Thin.
When thin is started as root but configured to drop privileges, the pidfile is chown()ed to the runtime user.  Later, calls to "thin restart" or "thin stop" will as root, read the pidfile and kill() the identified process.

This privilege imbalance means a vulnerability in the application overwrite the pidfile or replace it with a symlink, leading to arbitrary root-owned processes being killed or other impacts ("thin stop" hanging or possibly information disclosure).

Controllers#stop should make some effort to validate the process being killed.  Dropping privileges before sending the kill signal would be ideal.

This issue was first identified at https://bugs.gentoo.org/show_bug.cgi?id=642200 and has some further discussion at https://bugzilla.redhat.com/show_bug.cgi?id=1529154 .
Ruby changed the way Kernel#warn reports the error [1], but mocking the
method on the class, which is calling it, should be universal [2].

[1] https://bugs.ruby-lang.org/issues/12944
[2] https://www.reddit.com/r/ruby/comments/2nki9q/rspec_how_do_you_mock_or_stub_kernel_methods_like/