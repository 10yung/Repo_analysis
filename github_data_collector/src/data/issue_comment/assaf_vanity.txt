When I attempt to run the basic vanity generator, I get the following error:

```
Could not find generator 'vanity'. Maybe you meant 'vanity', 'task' or 'mailer'
Run `rails generate --help` for more options.
```
(of course, that error message brings up all kinds of existentialistic questions, Shroedinger's Cat and a nice vacation in Copenhagen)

I've tried a large number of variations of the command, including but not limited to:

> rails generate vanity
> rails generate Vanity:vanity
> rails generate vanity:vanity
> rails generate Vanity

Nothing seems to work. In reading the [compatibility](https://github.com/assaf/vanity#compatibility) information in the README, I noticed that ruby 2.5.5 isn't mentioned as having been tested, and neither has Rails 5.2.3. I'm wondering if there's an issue in this or if my local setup is somehow compromised.

My next step was to clone vanity and run the specs. I got 12 failures, each ones being exactly like this one:

> 1) NotificationType#compute_display_time when the rollup_schedule is valid natural language expression returns the next occurence on the schedule after the given date
>      Failure/Error:
>        expect(notification_type.compute_display_time(occurred_at)).to eq(
>          Time.zone.parse("2019-04-26 09:15")
>        )
> 
>       expected: 2019-04-26 09:15:00.000000000 -0500
>       got: 2019-04-26 09:15:00.000000000 -0400
> 
>       (compared using ==)
> 
>       Diff:
>       @@ -1,2 +1,2 @@
>       -Fri, 26 Apr 2019 09:15:00 CDT -05:00
>       +2019-04-26 09:15:00 -0400
> 
>       ./spec/models/notification_type_spec.rb:89:in `block (4 levels) in <top (required)>'

That set of failures might be on me--I'm using my laptop far from home this week and the output suggests a timezone issue. 

Anyway, I guess it would be good to know if vanity is compatible with Ruby 2.5.5 & Rails 5.2.x. If it isn't, is that compatibility in the works?

Please note that I posted a related question on Stackoverflow: https://stackoverflow.com/questions/57185533/vanity-gem-strange-rails-generate-vanity-error
Hello there, we have tried to set up progressive tests and it seems it's not possible? So what we need to do it's to start two experiments at the same time with the same alternative. 
For example: 
One experiment is: landing_page_cvr(alternatives: a,b), 
Second experiment is: landing_page_cta(alternatives: a,b)
We should start both in the same time and it should be same alternative(for example a for both)

What we tried so far:
1) We use Vanity.playground.experiments[:experiment_name].chooses(alternative) and test start with chosen alternative. But when we have to finish that test like this Vanity.track!(:experiment_name) that didn't work.
2) We try to start the second test and after that, we try to update VanityParticipants.update_columns(seen: alternative_index)
3) Also, we try to add a variable in an experiment for alternatives.

We think the best solution will be if we can somehow pass alternative as a variable(ex: Vanity.ab_test(:experiment_name, :alternative)) on the starting experiment. Do you have any solutions for this?
When we choose winner of a/b test and then click on link "make permanent" we confirm with, for example "Finish this experiment and assign all current and future participants to option B?". What I need to do if I don't want to assign all future participants to option B? I just want to close test without assign participants any more.
I'm not sure if this is an issue or me misinterpreting this section of the docs:
> A Vanity::Metric object responds to track! and increments a record in the database (an O(1) operation). It creates one record for each day, accumulating that dayâ€™s count. When generating reports, the values method fetches the values of all these keys (also O(1)).

In practice, calling `track!(:metric)` creates a new row in the `vanity_metric_values` table for each call, such that we're seeing thousands of rows that are of the form

id | vanity_metric_id | index | value | date
--|-----------------|------|-------|----
123456  | 1 | 0 | 1 | 2018-04-24
123457  | 1 | 0 | 1 | 2018-04-24

I noticed this when we started failing to load the vanity dashboard, since the query required to populate the metrics graph was timing out.
I am trying to write a controller test in Rspec where I am forcing Vanity to choose a value, but the forced value is not respected

```      
before do
    Vanity.context = controller
     Vanity.playground.experiment(key).chooses(value)
 end
```
What does it mean: converted = nil, converted = 0, converted = 1 ? converted field from vanity_participants table.
What is 'show me' and how it works in admin panel? (/vanity)
When I try to run ```assets:precompile``` task on production server (Rails 5.1.4, Vanity - last version), I get this error:
```
NoMethodError: undefined method `set_experiment_created_at' for nil:NilClass
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/base.rb:156:in `save'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/ab_test.rb:536:in `save'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/definition.rb:21:in `define'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/ab_test.rb:700:in `ab_test'
./experiments/expanded_coupon_code.rb:1:in `new_binding'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/base.rb:24:in `eval'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/base.rb:24:in `block in load'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/base.rb:22:in `instance_eval'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/experiment/base.rb:22:in `load'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/playground.rb:248:in `block in set_experiments'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/playground.rb:247:in `each'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/playground.rb:247:in `set_experiments'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/playground.rb:26:in `initialize'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/vanity.rb:152:in `new'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/vanity.rb:152:in `load!'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/vanity-2.2.9/lib/vanity/vanity.rb:142:in `playground'
/var/www/oneclass/current/config/environments/feature.rb:26:in `block (2 levels) in <top (required)>'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:67:in `block in execute_hook'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:60:in `with_execution_control'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:65:in `execute_hook'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:50:in `block in run_load_hooks'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:49:in `each'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/lazy_load_hooks.rb:49:in `run_load_hooks'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/application/finisher.rb:73:in `block in <module:Finisher>'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/initializable.rb:30:in `instance_exec'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/initializable.rb:30:in `run'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/initializable.rb:59:in `block in run_initializers'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/initializable.rb:58:in `run_initializers'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/application.rb:353:in `initialize!'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/railtie.rb:185:in `public_send'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/railtie.rb:185:in `method_missing'
/var/www/oneclass/current/config/environment.rb:7:in `<top (required)>'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:292:in `require'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:292:in `block in require'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:258:in `load_dependency'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/activesupport-5.1.4/lib/active_support/dependencies.rb:292:in `require'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/application.rb:329:in `require_environment!'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/railties-5.1.4/lib/rails/application.rb:445:in `block in run_tasks_blocks'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/airbrake-6.2.1/lib/airbrake/rake.rb:19:in `execute'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/sprockets-rails-3.2.1/lib/sprockets/rails/task.rb:62:in `block (2 levels) in define'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/airbrake-6.2.1/lib/airbrake/rake.rb:19:in `execute'
/var/www/oneclass/shared/bundle/ruby/2.3.0/gems/rake-12.3.0/exe/rake:27:in `<top (required)>'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli/exec.rb:74:in `load'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli/exec.rb:74:in `kernel_load'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli/exec.rb:27:in `run'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli.rb:365:in `exec'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/vendor/thor/lib/thor/command.rb:27:in `run'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/vendor/thor/lib/thor.rb:369:in `dispatch'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli.rb:22:in `dispatch'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/vendor/thor/lib/thor/base.rb:444:in `start'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/cli.rb:13:in `start'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/exe/bundle:30:in `block in <top (required)>'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/lib/bundler/friendly_errors.rb:121:in `with_friendly_errors'
/home/ubuntu/.rvm/gems/ruby-2.3.0/gems/bundler-1.15.3/exe/bundle:22:in `<top (required)>'
/home/ubuntu/.rvm/gems/ruby-2.3.0/bin/bundle:23:in `load'
/home/ubuntu/.rvm/gems/ruby-2.3.0/bin/bundle:23:in `<main>'
/home/ubuntu/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `eval'
/home/ubuntu/.rvm/gems/ruby-2.3.0/bin/ruby_executable_hooks:15:in `<main>'
```
Prior to this fix, stubbing a specific outcome with AbTest#chooses
would occasionally set the 'shown' bit on a participant
because the code at
https://github.com/assaf/vanity/blob/469917acf/lib/vanity/experiment/ab_test.rb#L242
noticed that the persisted participant's alternative differed
from the alternative selected by the hashing algorithm in #alternative_for

This would cause problems downstream in the conversion code
because #ab_showing returns true on this participant.

Another alternative to fix my specific issue would be to remove the `alternative_for(identity) != index` check from AbTest#chooses entirely, because I'm not sure what it's for. But it weirds me out in general that #alternative_for might disagree with the values in the database, and I'm not sure where else that could cause problems.

I didn't write a test exposing this behavior because it would probably require finessing the identity of a vanity participant so the hash code goes a specific way, which seemed brittle. But I can backfill one if it's required to get this merged.
While testing Vanity (2.2.7) behavior in situation when Redis is down, we discovered that the following code  `Vanity.playground.participant_info(vanity_identity)`  throws an error `NoMethodError (undefined method `to_i' for true:TrueClass):` with no stack trace in Vanity code.

We traced how the error and found a workaround, but it probably makes sense to get fixed on Vanity side.

1. Here is Vanity.playground.participant_info code:
```ruby
    def participant_info(participant_id)
      participant_array = []
      experiments.values.sort_by(&:name).each do |e|
        index = connection.ab_assigned(e.id, participant_id)
        if index
          participant_array << [e, e.alternatives[index.to_i]]
        end
      end
      participant_array
    end
```
Looks like when the connection to Redis is down, ab_assigned returns true instead of nil or 0, which is being converted to int

2. This is the code of RedisAdapter.ab_assigned
```ruby
      def ab_assigned(experiment, identity)
        call_redis_with_failover do
          Vanity.playground.experiments[experiment].alternatives.each do |alternative|
            if @experiments.sismember "#{experiment}:alts:#{alternative.id}:participants", identity
              return alternative.id
            end
          end
          nil
        end
      end
```
So it either return alternative.id or nil. But we get true, how come? Lets check call_redis_with_failover method

3. This is RedisAdapter.call_redis_with_failover
```ruby
     def call_redis_with_failover(*arguments)
        calling_method = caller[0][/`.*'/][1..-2]
        begin
          yield
        rescue => e
          if Vanity.configuration.failover_on_datastore_error
            Vanity.configuration.on_datastore_error.call(e, self.class, calling_method, arguments)
          else
            raise e
          end
        end
      end
```
It either rethrows exception, or return blocks return value, or... it returns result of on_datastore_error callback.

4. This is the callback we have (documentation says that return value will be ignored, but looks like it is not http://www.rubydoc.info/gems/vanity/Vanity/Configuration#on_datastore_error=-instance_method)
```ruby
Vanity.configure do |config|
  config.failover_on_datastore_error = true
  config.on_datastore_error =  Proc.new do |error, klass, method, arguments|
    Rails.logger.error("Vanity error: #{error}. Called by #{klass.inspect}, method #{method.inspect} with arguments #{arguments}")
  end
end
```
5. If we add nil as return value of on_datastore_error callback, everything works ok. Without it, Rails.logger.error seems to return true which is being returned from ab_assigned and breaks participants_info method logic. 

We are not sure how it should be fixed, probably documentation just should mention returning nil.


