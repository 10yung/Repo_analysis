Hey MAST makers,

Big fan of your work. The best single-cell RNA-seq analysis package currently out there that I know of. Apologies if I am not doing this in the right spot, I am new to making R packages and new to GitHub, and this seemed like the only spot to ask questions. 

I have come across and issue that I can't seem to solve, but it appears to be related to how my package (currently in development) is pulling in and using the glmer function in MAST. I am using this line of code in one of my functions:

zlmCond <- suppressMessages(MAST::zlm(~ Status + (1 | DonorID), sca, method='glmer',ebayes = F))

which spits back this error when I run the function in my code:

Error in fixef(object@fitC) : could not find function "fixef" 

If I load the 'lme4' package within my function prior to running that component, it works (which I read in Wickham's "R packages" that this is something to avoid, so I am trying to avoid doing it this way). At first it was a problem with the 'fixef' function somewhere missing 'lme4::', but when I looked through your .R files, I noticed this was not the case, all are lme4::fixef() . Any ideas what I am doing incorrectly? Again, sorry to waste your time with this if I am doing something stupid here. I am still very new to all of this.

Thanks so much!

Kip
R 4.0 changes the signature to `C_influence` dropping the `do.coef` argument.  I think we may have just [copied the source of lm.influence](https://github.com/RGLab/MAST/blob/0c3beabe41492ec9864a8bf7460e6fdca084a359/R/zlmHooks.R#L109) with some minor modifications.  So it probably needs to be updated for the interface in R 4.0 + whatever minor modifications occurred.  I can't really tell, and don't think this was my code (and even if it was..the code is nearly 5 years old now.) @gfinak do you have any recollection?

One of our vignettes depends on this code and is making our builds fail.  I am going to remove the dependency on`deviance_residuals_hook` in the vignette, but `deviance_residuals_hook` is exported so we probably can't just remove it...
Hi guys,

Not sure if this forum or Seurat forum is better to ask this but I'm running into an issue specifically when I try to use Mast within the Seurat package (all other DGE tests still work). The error reads:

`Assuming data assay in position 1, with name et is log-transformed.
Error in .nextMethod(.Object = .Object, ... = ..., design = design) : 
  invalid name for slot of class “BayesGLMlike”: print.bar`

I can't seem to find much on this error, have tried reinstalling the Mast package but didn't really seem to fix the issue.

Hello:

I believe there is a bug in bayesglm.R. I attached bayesglm_A_1.R where I inserted a few cat statements. If you run it using the code from the other file, you'll see from the output that the last two weights that correspond to pseudo-data are initialized but never updated.

The problem is that in .bayesglm.fit.loop.updateState() the working weights are computed as:

w.star <- c(w, sqrt(state$dispersion)/priors$scale)

but to update them one needs to use state$prior.sd in the denominator, which should be equal to priors$scale only in the beginning. It looks like you only need to change one line to fix it.

Regards,
Nik Tuzov

[bayesglm_issue.zip](https://github.com/RGLab/MAST/files/3086718/bayesglm_issue.zip)

Hi, 
I have been running MAST on scRNAdata set, containing 96 samples. 
After running the zlm on sca object, I run summary, and only get coefficient "c", "D", "S" and "logFC" but no "H" coefficient. I am not sure why is that and was wondering if you could help me with it or give some input. 
Here is the code I run:
```
sca <- SceToSingleCellAssay(sce = sce, class = "SingleCellAssay", check_sanity = FALSE)

cdr2 <-colSums(assay(sca)>0)
colData(sca)$cngeneson <- scale(cdr2)
colnames(colData(sca))

cond <- factor(colData(sca)$category)
cond<-relevel(cond,"NR")
colData(sca)$condition<-cond
cond
zlmCond <- zlm(~ cond + cngeneson,  sca)


summaryCond <- MAST::summary(zlmCond)
summaryDt <- summaryCond$datatable


print(summaryCond, n=4, by='D')
print(summaryCond, n=4, by='C')
print(summaryCond, n=4, by='S')


fcHurdle <- merge(summaryDt[contrast =='condall3' & component=='H', .(primerid, 'Pr(>Chisq)' )] , summaryDt[contrast=='condall3' & component=='logFC', .(primerid, coef, ci.hi, ci.lo)], by='primerid') 

fcHurdle[,fdr:=p.adjust('Pr(>Chisq)', 'fdr')]
```
Hope you will have time to check it and give some input.
Thank you in advance.

Regards, 
Kristina
Hi!

I'm trying MAST for differential analysis in a scRNA-seq experiment after clustering, i.e. I don't have any treatment vs control, but I'm interested in all possible differences in expression between two or more clusters.
I tried following the examples:

```
obj.mast <- FromMatrix(logcounts(reads.qc.endog), cData = data.frame(wellKey = colnames(reads.qc.endog), sc3k12 = reads.qc.endog$sc3_12_clusters))
                       
colData(obj.mast)$cngeneson <- scale(colSums(assay(obj.mast) > 0))
                       
zlm.k12 <- zlm(~sc3k12 + cngeneson, obj.mast)
summary.k12 <- summary(zlm.k12, doLRT = "sc3k12")
summaryDt.k12 <- summary.k12$datatable

```

While it works, this only gives the DE of clusters 1v2, 1v3, 1v4 and so on, as the first level is taken as reference.

I unsuccessfully tried to modify the code to get all other comparisons, i.e. 2v3, 2v4, 3v4...11v12.
What am I missing?

Thanks!
Andrea
Hi there!

I've just recently encountered this issue and was hoping to see whether you guys could help with understanding what's going on: I want to identify differentially expressed genes between 2 conditions. We have 4 replicates (samples from different animals) per condition, which were processed in 2 batches (2 from each condition/batch).

The formula I used to fit the model is: ~ Condition + Batch + nGenes + (1|animal) . One of the known differences between the 2 conditions is that a transgene is only expressed in one of them (and the signal is very robust). From previous posts, I understand that the continuous component of the model can't be computed in that scenario, which is what I see if I fit the model with the formula as above, just without the mixed effect. However, when fitting with the mixed effect, the discrete component is no longer estimated, and a coefficient appears for the continuous component (although not significant). I'm trying to understand why this is happening, since this transgene is essentially a positive control for differential expression, and isn't showing up. Do you have any insights on what's causing this (/how to resolve it)?

Here are the relevant rows from the summary object ("sum.lrt <- MAST::summary(mast.zlmFit, doLRT = T)") using the 2 formulas:

~ Condition + Batch + nGenes:
![image](https://user-images.githubusercontent.com/21261841/43538758-e2f30e74-9590-11e8-92d9-d6953951b5b1.png)

~ Condition + Batch + nGenes + (1|animal):
![image](https://user-images.githubusercontent.com/21261841/43538878-3632febe-9591-11e8-9a9a-3b12c741ecb8.png)

Thanks!

Gabriela
Hi!

I was wondering if you might be able to help me with an issue I've been having. I am trying to run MAST with a nested batch effect. 

I have data from an experiment with 6 mice in 2 conditions (3 mice each), spread over 6 plates (condition & control spread half-half per plate). Now I'd like to run MAST on normalized, but not batch-corrected data and include the batch as a covariate. 

First I ran `~condition + sample + chip + ngeneson`, where `sample` is just the mouse. I got expected genes out of this, although down-regulated when I expected them to be up-regulated. Then, I noticed that `sample` is just a higher resolution of `condition` (each mouse is either condition or control). So that would lead to a non-full-rank design matrix and should have output wrong results I assume.

Running just `~condition + chip + ngeneson` however gives me far fewer DE genes, and not the ones I would expect. I assume this has to do with the variability between mice making the background noise quite high.

I was wondering if I can add the mouse covariate so that it is fit separately per condition to account for variation between mice without interfering with the condition covariate.

Thanks for any help you can provide!
I am using MAST on log-transformed tpm data. The scRNA-seq matrix is composed by 1346 cells × 27933 genes. I used a similar matrix before and I had not any problem in getting meaningful results from MAST. Earlier I was using a different preprocessing procedure:
- Removal of ribosomal genes
- Filtering of cells based on spike-ins, mitochondrial genes, and removal of such genes
- Removal of genes expressed in few cells (less than 10%)
- Upper quartile normalization and log-transformation

Reading the original MAST paper, I decided to use the proposed `log(1+TPM)` normalization. However in this case I get no significant False Discovery Rate for all genes. What may be the problem here?

Thanks,
Francesco
Hi there!

I had a question regarding the interpretation of the hurdle model coefficients, in particular with respect to genes expressed at low levels. Specifically: after running MAST to obtain differentially expressed genes on single-cell RNA-Seq data, we have noticed that the genes with the largest continuous model coefficients correspond to genes that barely/don't change in expression between conditions, and are also barely expressed. We're unsure how to interpret this: intuitively we would interpret that large coefficients would mean these genes play a role in explaining the differences between groups, but this doesn't make sense if they don't change/almost aren't expressed. Is this an artifact of how the model fitting occurs in MAST, and should one pre-filter the data to only include genes expressed in a larger fraction of cells?

I've attached 2 plots to illustrate what I'm talking about. The first plots the coefficient for the continuous component vs the logFC, and the 2nd plots it vs the number of cells each gene is expressed in.

Any guidance would be appreciated, thanks!

Gabriela


![](http://10.100.1.212:8787/chunk_output/s/932AFFE6/c8dx8qq60xgb1/000028.png)

![](http://10.100.1.212:8787/chunk_output/s/932AFFE6/csl8zsdkzitbx/000017.png)

