- 2018 edition
- slightly more functional style
- using `?` operator over `unwrap()`
Implementation of [http://rosettacode.org/wiki/Van_Eck_sequence](http://rosettacode.org/wiki/Van_Eck_sequence)
Refer to :  https://github.com/rust-lang/rust/issues/34417

In std, the linked list was implemented based on `Box` type. But it's wrong. 

> `Box` uses `Unique`, which requires that it "the referent of the pointer should not be modified without a unique path to the Unique reference". This effectively means that `Unique` doesn't allow aliases, but this rule violated by the prev pointer which point to the same node as a `Unique`.
Probably related to the latest changes in travis-cargo.

Hello there.

I noticed the follow solutions (possibly more I may have missed) use the `libc` crate and are written in ways that will fail to compile on non-Unix system:

```
handle_a_signal.rs (use libc::SIGINT declaration)
input_is_terminal.rs (use of the libc::STDIN_FILENO constant)
output_is_terminal.rs (use of the libc::STDOUT_FILENO constant)
```

Re-implementing the solutions such that they are cross-platform would be ideal. However, if that's not the direction of this project, I still feel as though a small comment warning about OS requirements would be a courtesy for people trying to build them.

There has to be a way to sanely do anonymous recursion with closures but this is the best I could come up with:

``` rust
use std::cell::Cell;
fn main() {
    let id = &(|a| a) as &Fn(u64) -> u64;
    let (fib, fib_p): (_, Cell<&Fn(u64) -> u64>);
    fib_p = Cell::new(id);

    fib = |n: u64| {
        if n < 2 {
            n
        } else {
            (fib_p.get())(n - 2) + (fib_p.get())(n - 1)
        }
    };
    fib_p.set(&fib as &Fn(u64) -> u64);

    println!("{}", fib(10));
}
```

I'm not planning on submitting a pull request/posting this to Rosetta Code because no one should ever do this _but_, I'm posting it here in the hopes that someone knows how to do better.

I'd like to open a discussion about how/what we could do to help smooth the process of getting the solutions here on Rosetta code, and the solutions on Rosetta code here (less of a priority).

This would definitely be a cool problem and likely involve using html5ever or whatnot.

**For a first go, it'd be best to start with some sort of `cargo run` invocation that would go and check, notifying the user if any aren't the same.**

Hi,
I was working on the power set problem, only after finding that there is already one

I have taken a different approach https://gist.github.com/niconiconico9/fa9d84b2dd778aae70f9

Is there a reason why the Rust power set present in this repository is not present in Rosetta Code?

### Replace `Vec` usage by iterators

The issues below lead people to collect iterators into a `Vec`, instead of returning them.

Blocking issues:
- Lack of a `yield` keyword. This forces you sometimes to declare a new struct if you want to return an iterator. Of course you must implement the `Iterator` trait for it and write a function which returns an iterator of this kind.
- Lack of anonymous return types. This makes iterator composition very painful.

Affected code:
- [Roots of unity](https://github.com/Hoverbear/rust-rosetta/blob/master/src/roots_of_unity.rs)
- [Sieve of Erathostenes](https://github.com/Hoverbear/rust-rosetta/blob/master/src/sieve_eratosthenes.rs)
- [Aks test for primes](https://github.com/Hoverbear/rust-rosetta/blob/master/src/aks_test_for_primes.rs)
- [Range expansion](https://github.com/Hoverbear/rust-rosetta/blob/master/src/range_expansion.rs)
- [Anagrams](https://github.com/Hoverbear/rust-rosetta/blob/master/src/anagrams.rs)
- [Almost prime](https://github.com/Hoverbear/rust-rosetta/blob/master/src/almost_prime.rs)
- [Isaac Cipher](https://github.com/Hoverbear/rust-rosetta/blob/master/src/isaac.rs)
### Return unboxed closures

Blocking issues:
- Lack of anonymous return types.

Affected code:
- [Function composition](https://github.com/Hoverbear/rust-rosetta/blob/master/src/function_composition.rs)
- [Currying](https://github.com/Hoverbear/rust-rosetta/blob/master/src/currying.rs)
### Other
- We should be able to use `const fn` to replace our compiler plugin in in [Compile Time Calculation](https://github.com/Hoverbear/rust-rosetta/blob/master/src/compile_time_calculation.rs)

Should we port the tasks that are already on rosettacode.org to current Rust?
Some of them are in Rust 0.7 and I believe will need some adjusting to keep compiling. Others may not even be possible at all with the current status of closures (e.g. the [Y combinator](http://rosettacode.org/wiki/Y_combinator#Rust) one ).
I believe modifying them and holding them here would be a good way to make sure they stay up to speed with the language changes, instead of letting them slowly bitrot.

Below is a list of tasks that currently have a Rust solution. Some of them have already been recreated here too, but a good number of them aren't.

I think it would be also a nice task for people new to the language who want to try their hand at modifying something that is "almost working". What do you think?
- [x] 100 doors | http://rosettacode.org/wiki/100_doors#Rust 
- [x] 99 Bottles of Beer | http://rosettacode.org/wiki/99_Bottles_of_Beer#Rust
- [x] A+B | http://rosettacode.org/wiki/A%2BB#Rust
- [x] Ackermann function | http://rosettacode.org/wiki/Ackermann_function#Rust
- [x] AKS test for primes | http://rosettacode.org/wiki/AKS_test_for_primes#Rust
- [x] Anagrams |  http://rosettacode.org/wiki/Anagrams#Rust
- [x] Arithmetic/Complex |  http://rosettacode.org/wiki/Arithmetic/Complex#Rust
- [x] Averages/Arithmetic mean | http://rosettacode.org/wiki/Averages/Arithmetic_mean#Rust
- [x] Binary digits | http://rosettacode.org/wiki/Binary_digits#Rust
- [x] Binary search | http://rosettacode.org/wiki/Binary_search#Rust
- [x] Bitmap/Write a PPM file | http://rosettacode.org/wiki/Bitmap/Write_a_PPM_file#Rust
- [x] Bitwise operations | http://rosettacode.org/wiki/Bitwise_operations#Rust
- [x] Bulls and cows | http://rosettacode.org/wiki/Bulls_and_cows#Rust
- [x] Check input device is a terminal | http://rosettacode.org/wiki/Check_input_device_is_a_terminal#Rust
- [x] Check output device is a terminal | http://rosettacode.org/wiki/Check_output_device_is_a_terminal#Rust
- [x] Closures/Value capture | http://rosettacode.org/wiki/Closures/Value_capture#Rust
- [x] Combinations |  http://rosettacode.org/wiki/Combinations#Rust
- [x] Comma quibbling | http://rosettacode.org/wiki/Comma_quibbling#Rust
- [x] Command-line arguments | http://rosettacode.org/wiki/Command-line_arguments#Rust
- [x] Comments |  http://rosettacode.org/wiki/Comments#Rust
- [x] Concurrent computing | http://rosettacode.org/wiki/Concurrent_computing#Rust
- [x] Count in octal |   http://rosettacode.org/wiki/Count_in_octal#Rust
- [x] Deal cards for FreeCell |  http://rosettacode.org/wiki/Deal_cards_for_FreeCell#Rust
- [x] Dining philosophers | http://rosettacode.org/wiki/Dining_philosophers#Rust
- [x] Empty program | http://rosettacode.org/wiki/Empty_program#Rust
- [x] Entropy |  http://rosettacode.org/wiki/Entropy#Rust
- [x] Enumerations |  http://rosettacode.org/wiki/Enumerations#Rust
- [x] Even or odd |   http://rosettacode.org/wiki/Even_or_odd#Rust
- [x] Factorial |  http://rosettacode.org/wiki/Factorial#Rust
- [x] Fibonacci n-step number sequences |  http://rosettacode.org/wiki/Fibonacci_n-step_number_sequences#Rust
- [x] Fibonacci sequence | http://rosettacode.org/wiki/Fibonacci_sequence#Rust
- [x] File IO | http://rosettacode.org/wiki/File_IO#Rust
- [x] File size | http://rosettacode.org/wiki/File_size#Rust
- [x] Find limit of recursion |  http://rosettacode.org/wiki/Find_limit_of_recursion#Rust
- [x] FizzBuzz |  http://rosettacode.org/wiki/FizzBuzz#Rust
- [x] Gray code | http://rosettacode.org/wiki/Gray_code#Rust
- [x] Greatest common divisor |   http://rosettacode.org/wiki/Greatest_common_divisor#Rust
- [x] Guess the number |   http://rosettacode.org/wiki/Guess_the_number#Rust
- [x] Guess the number/With feedback |  http://rosettacode.org/wiki/Guess_the_number/With_feedback#Rust
- [x] Guess the number/With feedback (player) | http://rosettacode.org/wiki/Guess_the_number/With_feedback_(player)#Rust
- [x] Hello world/Standard error |   http://rosettacode.org/wiki/Hello_world/Standard_error#Rust
- [x] Hello world/Text | http://rosettacode.org/wiki/Hello_world/Text#Rust
- [x] Hello world/Web server |   http://rosettacode.org/wiki/Hello_world/Web_server#Rust
- [x] Horner's rule for polynomial evaluation | http://rosettacode.org/wiki/Horner%27s_rule_for_polynomial_evaluation#Rust
- [x] Increment a numerical string |  http://rosettacode.org/wiki/Increment_a_numerical_string#Rust
- [x] Infinity |  http://rosettacode.org/wiki/Infinity#Rust
- [x] Integer sequence | http://rosettacode.org/wiki/Integer_sequence#Rust
- [x] Knapsack problem/0-1 | http://rosettacode.org/wiki/Knapsack_problem/0-1#Rust
- [x] Knuth shuffle | http://rosettacode.org/wiki/Knuth_shuffle#Rust
- [x] Letter frequency | http://rosettacode.org/wiki/Letter_frequency#Rust
- [x] Levenshtein distance | http://rosettacode.org/wiki/Levenshtein_distance#Rust
- [x] Look-and-say sequence | http://rosettacode.org/wiki/Look-and-say_sequence#Rust
- [x] Loop over multiple arrays simultaneously | http://rosettacode.org/wiki/Loop_over_multiple_arrays_simultaneously#Rust
- [x] Loops/Break |  http://rosettacode.org/wiki/Loops/Break#Rust
- [x] Loops/Continue |  http://rosettacode.org/wiki/Loops/Continue#Rust
- [x] Loops/Downward for | http://rosettacode.org/wiki/Loops/Downward_for#Rust
- [x] Loops/For with a specified step | http://rosettacode.org/wiki/Loops/For_with_a_specified_step#Rust
- [x] Loops/Infinite |  http://rosettacode.org/wiki/Loops/Infinite#Rust
- [x] Loops/Nested |  http://rosettacode.org/wiki/Loops/Nested#Rust
- [x] Luhn test of credit card numbers | http://rosettacode.org/wiki/Luhn_test_of_credit_card_numbers#Rust
- [x] Middle three digits |   http://rosettacode.org/wiki/Middle_three_digits#Rust
- [x] Mouse position | http://rosettacode.org/wiki/Mouse_position#Rust
- [x] Mutual recursion | http://rosettacode.org/wiki/Mutual_recursion#Rust
- [x] N-queens problem | http://rosettacode.org/wiki/N-queens_problem#Rust
- [x] Ordered words | http://rosettacode.org/wiki/Ordered_words#Rust
- [x] Playing cards | http://rosettacode.org/wiki/Playing_cards#Rust
- [x] Program name | http://rosettacode.org/wiki/Program_name#Rust
- [x] Quine |  http://rosettacode.org/wiki/Quine#Rust
- [x] Random numbers | http://rosettacode.org/wiki/Random_numbers#Rust
- [x] Read entire file |   http://rosettacode.org/wiki/Read_entire_file#Rust
- [x] Reverse a string |   http://rosettacode.org/wiki/Reverse_a_string#Rust
- [x] Roman numerals/Decode | http://rosettacode.org/wiki/Roman_numerals/Decode#Rust
- [x] Roman numerals/Encode | http://rosettacode.org/wiki/Roman_numerals/Encode#Rust
- [x] Rot-13 |  http://rosettacode.org/wiki/Rot-13#Rust
- [ ] Scripted main | http://rosettacode.org/wiki/Scripted_main#Rust
- [x] Sieve of Eratosthenes |   http://rosettacode.org/wiki/Sieve_of_Eratosthenes#Rust
- [x] Singly-linked list/Element definition |   http://rosettacode.org/wiki/Singly-linked_list/Element_definition#Rust
- [x] Sort an integer array |  http://rosettacode.org/wiki/Sort_an_integer_array#Rust
- [x] Sorting algorithms/Insertion sort |   http://rosettacode.org/wiki/Sorting_algorithms/Insertion_sort#Rust
- [x] Sorting algorithms/Quicksort | http://rosettacode.org/wiki/Sorting_algorithms/Quicksort#Rust
- [x] Sorting algorithms/Sleep sort |   http://rosettacode.org/wiki/Sorting_algorithms/Sleep_sort#Rust
- [x] String case | http://rosettacode.org/wiki/String_case#Rust
- [x] String concatenation | http://rosettacode.org/wiki/String_concatenation#Rust
- [x] Strip whitespace from a string/Top and tail | http://rosettacode.org/wiki/Strip_whitespace_from_a_string/Top_and_tail#Rust
- [x] Sum and product of an array | http://rosettacode.org/wiki/Sum_and_product_of_an_array#Rust
- [x] Sum of squares |   http://rosettacode.org/wiki/Sum_of_squares#Rust
- [x] The Twelve Days of Christmas | http://rosettacode.org/wiki/The_Twelve_Days_of_Christmas#Rust
- [x] Towers of Hanoi |   http://rosettacode.org/wiki/Towers_of_Hanoi#Rust
- [x] Unicode variable names |   http://rosettacode.org/wiki/Unicode_variable_names#Rust
- [x] Unix/ls |  http://rosettacode.org/wiki/Unix/ls#Rust
- [x] Vigenère cipher | http://rosettacode.org/wiki/Vigen%C3%A8re_cipher#Rust
- [x] Y combinator | http://rosettacode.org/wiki/Y_combinator#Rust
