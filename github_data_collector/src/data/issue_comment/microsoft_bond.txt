[WORK IN PROGRESS]

Support for xmldoc comments:

```
namespace example.some

/// foobar
enum FooBar
{
    /// foo
    /// two lines
    Foo = 1,

    /// bar
    Bar = 2,

    // not included
    Baz = 3
}

/// This is my struct
/// 2nd line
struct SomeStruct
{
    /// some field
    /// <code>someField = 42</code>
    // this is ignored
    /// last line
    0: int32 someField = 123;
    // this is ignored

    /// not ignored
    1: int32 otherField = 234;

    2: int32 notDocumented = 345;
}
```

Gets converted to C# where the xmldoc comments are moved over.
BinSkim analysis shows error BA2022 for following dlls:
Bond.Attributes.dll
Bond.dll
Bond.IO.dll
Bond.JSON.dll

Error message:
Images should be correctly signed by trusted publishers using cryptographically secure signature algorithms. This rule invokes WinTrustVerify to validate that binary hash, signing and public key algorithms are secure and, where configurable, that key sizes meet acceptable size thresholds.

Cryptographically weak signatures: [digest algorithm: 'sha1NoSign' + digest encryption algorithm: 'RSA']
Customers have huge and complex pipelines. Bond serialization is buried deep in the code, and sporadic errors like a null value in some record may require an humongous amount of time such as connecting to the cloud service for debugging (before getting clearance for doing so), or adding more logs elsewhere (which would be duplicated when `Bond` is used for logging), and deploying again.

Therefore, this error message is not being helpful at all. It should state at very minimum the field that is not satisfying the condition, and ideally the schema name as well.
An API which I am using requires me to provide the serialized data as a `std::string`. So I am wondering what is the most efficient way to serialize bond data to a `std::string`.

```
  Some::Custom::Type msg_;
  std::string buffer_;
  
  ::bond::OutputBuffer output_buffer;
  ::bond::SimpleBinaryWriter<::bond::OutputBuffer> writer(output_buffer);
  ::bond::Serialize(msg_, writer);
  auto blob = output_buffer.GetBuffer();
  buffer_.clear();
  buffer_.assign(blob.content(), blob.size());
```

The following code works, but I guess that it is not very efficient.
I would assume that I have a least 2 memcopies, once copying from `output_buffer` to `blob`, and then from `blob` to `buffer_` (the target `std::string`).

Do you know if / how I can get either the SimpleBinaryWriter or the OutputBuffer to directly serialize to a `std::string`, or do you have another proposal how I can achieve that?

Also, is there a way to reset / clear the Output buffer, so that I can reuse the buffer als well as the writer? If I repeatedly call the `Serialize` method, the data gets aggregated in the `OutputBuffer` object.

Thanks for your help!
I am trying to integrate Bond with our buildsystem to evaluate it properly, but I am running into various problems:

- Bond installation does not provide a `BondConfig.cmake` file, which can be consumed by other projects
- Bond does not export CMake functions to generate code from bond files (though they are defined in `cmake/Bond.cmake`, like the `add_bond_codegen` function.
- Bond exports its targets to `bond.cmake` (which is good), but they include absolute paths to the boost library. Hence, the bond package is not relocatable, and I cannot distribute a bond package build by a CI server to be consumed by the users.

If bond used modern CMake, imported targets for libraries, code generation functions and provided a `BondConfig.cmake` file, it would be much easier to integrate.

Would you be interested for me to work on a PR to address this issues? I am not quite sure how much work it will be,  I have not yet looked at all of the CMake files for this project yet.
I added /std:c++17  option in so that I could make use of std::string_view. I got this error in Bond:

c:\dev\vcpkg\installed\x86-windows\include\bond\core\detail\visit_any.h(23): error C4996: 'std::result_of_t': warning STL4014: std::result_of and std::result_of_t are deprecated in C++17. They are superseded by std::invoke_result and std::invoke_result_t. You can define _SILENCE_CXX17_RESULT_OF_DEPRECATION_WARNING or _SILENCE_ALL_CXX17_DEPRECATION_WARNINGS to acknowledge that you have received this warning.

Please would you add an option to cmake which only builds static libraries and installs headers, e.g. without requiring ghc.  This would address situations where it is not possible to run gbc on the client, e.g. Raspberry Pi with 1GB where the gbc has been run elsewhere and gbc generated code is part of the client's project.


I would like to be able to validate the format of a serialized object at runtime using the RuntimeSchema instead of compile time information. I am thinking it would be a dry run of the deserializer but using only the schema.

As far as I can tell it can't be done at present, and it even seems the deserializer is ignorant of the supplied schema (at least that's the case when using the tagged format where it does sort-of make sense).

Any good ideas for how to approach this?
We use Bond to persist the state of our C++/C# applications and it's very efficient. Our only problem is that we can't completely define the initial state of the application in the *.bond files, because explicit default values are not supported for containers and structures. Is this something that could be implemented?