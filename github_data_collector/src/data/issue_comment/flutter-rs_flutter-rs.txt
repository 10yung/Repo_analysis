The main reason for this is to avoid parsing cargo cli flags.
We currently only have a `flutter-app-template`.
`cargo-flutter` supports `flutter_driver` now:

`cargo flutter --dart-main test_driver/app.dart --drive run`

Still need to add support to `flutter-winit` to run in headless mode so the `flutter_driver` tests can be run in CI.
```sh
note: D:\a\flutter-rs\flutter-rs\target\flutter\debug\deps\flutter_engine.dll.lib : fatal error LNK1107: invalid or corrupt file: cannot read at 0x3E0
```
Tracks the status and blocking issues for each platform
- [x] Linux
- [ ] MacOS
  - [x] icu symbols missing in dylib was reported by (@ea2973929)
  - [ ] crash on button press in debug mode
  - [ ] fails to start in release mode
  - [ ] add packaging support to `cargo-flutter`
- [ ] Android
  - [ ] handling redrawing and orientation changes it tricky (https://github.com/rust-windowing/winit/pull/1328)
  - [ ] jni is required for locating `app.so`. Attaching the javavm to a thread crashes (https://github.com/flutter-rs/flutter-app-template/pull/2)
  - [ ] `x86_64-linux-android` and `i686-linux-android` fail to link with engine on ci
- [ ] Windows
  - [x] building engine for windows (#98)
  - [ ] flutter-rs fails to link agains `flutter_engine.dll.lib` (#106)
  - [ ] add packaging support to `cargo-flutter`
- [ ] iOS
  - [x] Creating bindings for `flutter-engine-sys` fails, possibly related to (https://github.com/rust-lang/rust-bindgen/issues/1211)
  - [x] copypasta needs to be ported to ios (https://github.com/jwilm/alacritty/issues/3179)
  - [ ] add packaging support to `cargo-flutter`
Can anyone guide me on the approach to plugins.

For example I want to attempt to make a video player that uses flutter rs that works in desktop and mobile ( and web ,) using the same rust code 

I saw that winit replaces glfw and so this will make desktop and mobile unified.

But for video encode and decode I am not sure what cross platform rusty libs are out there 

I also want to use an approach where the player encode / decode and networking runs in a background app ( aka a service ) and uses a binary buffer to output / input the frames / audio to the foreground app in flutter . So then on each OS I will need to use IPC.

The reason is because I need the video to keep running even if the user switches applications 
I don't know if this is an issue on other platform or not, but in macOS, when you resize the window, it flush black then it render! so it's like there is no mechanism that resize the flutter content dynamically so it feel more natural.

If you take a look to [feather-apps](https://feather-apps.com), their application flush black less when resizing.

That's the behavior, we suppose to get

![](https://cdn-images-1.medium.com/max/800/1*Z7gmjdcuw9O26mM9Zaqnmg.gif)
