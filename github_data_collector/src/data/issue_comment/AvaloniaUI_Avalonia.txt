macOS High Sierra 10.13.6

Any newly opened window appears fully black.

![Screen Shot 2020-01-18 at 17 09 41](https://user-images.githubusercontent.com/13300194/72666733-5bf92400-3a15-11ea-879b-1f61f11add1c.png)

Usually comes back to life after mouseover, move, resize etc.
![Screen Shot 2020-01-18 at 17 10 21](https://user-images.githubusercontent.com/13300194/72666742-6f0bf400-3a15-11ea-8461-d5ff12455662.png)

When resizing, it flickers between black and working.

cibuild5570

Couldn't find any lower cibuilds and azure seems to be glitching so I can't check which builds exist? I tried stable 0.9.1 from NuGet, works fine there





As the title says,

The event only fires when there is 1 item selected, or the selection changed from Multiple items to a single item.

When the selection changes from Multiple to Single, the RemovedItems correctly holds the previous Selection.

I would expect the event to be fired even when the selection changes from Single to Multiple.
MainWindow.xaml.cs:

```
using Avalonia;
using Avalonia.Controls;
using Avalonia.Markup.Xaml;
using System.Collections.Generic;
using System;

namespace SelectionTest
{
    public class MainWindow : Window
    {
        public List<string> items { get; set; }
        ListBox listBox;
        public MainWindow()
        {
            InitializeComponent();
#if DEBUG
            this.AttachDevTools();
#endif
            listBox = this.FindControl<ListBox>("MyListBox");
            listBox.SelectionChanged += ListBox_SelectionChanged;
            items = new List<string>() { "1", "2", "3", "4", "5", "6", "7" };
            DataContext = this;
        }

        private void ListBox_SelectionChanged(object sender, SelectionChangedEventArgs e)
        {
            Console.WriteLine($"Added: {e.AddedItems.Count} Removed:{e.RemovedItems.Count}");
        }

        private void InitializeComponent()
        {
            AvaloniaXamlLoader.Load(this);
        }
    }
}
```

MainWindow.xaml:

```
<Window xmlns="https://github.com/avaloniaui"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        mc:Ignorable="d" d:DesignWidth="800" d:DesignHeight="450"
        x:Class="SelectionTest.MainWindow"
        Title="SelectionTest">
  <ListBox x:Name="MyListBox" Items="{Binding items}" SelectionMode="Multiple">
    
  </ListBox>

</Window>
```






I've installed the DataGrid package from nuget,
And in the xaml is show all options for datagrid.
Yet:
```
        <DataGrid Items="{Binding SessionList}" Grid.Row="1">
          <DataGrid.Columns>
            <DataGridTextColumn  Header="Title" Binding="{Binding Title}"/>
            <DataGridTextColumn  Header="Description" Binding="{Binding Description}"/>
          </DataGrid.Columns>
        </DataGrid>
```
Throws an error.
```xaml
          <StackPanel>
            <StackPanel.Styles>
              <Style Selector="StackPanel.collapseAnimation">
                <Setter Property="Transitions">
                  <Transitions>
                    <DoubleTransition Property="MaxHeight" Duration="0:0:0.2" />
                  </Transitions>
                </Setter>
              </Style>
            </StackPanel.Styles>

            <StackPanel Classes="collapseAnimation" Margin="5 0" x:Name="BottomPane" MaxHeight="0" Spacing="5">
              <!-- contents -->
            </StackPanel>
          </StackPanel>
```

```cs
BottomPane.MaxHeight = (BottomPane.MaxHeight == 0)? 1000 : 0;
```

I should really be animating Height here, because I don't know ahead of time how high the StackPanel is, but I couldn't animate Bounds.Height so this was the next best thing. Setting the height to any value, including well below the actual StackPanel height (say, 5) also results in the same crash.

```
Exception has occurred: CLR/System.InvalidOperationException
An unhandled exception of type 'System.InvalidOperationException' occurred in Avalonia.Layout.dll: 'Invalid size returned for Measure.'
   at Avalonia.Layout.Layoutable.Measure(Size availableSize)
   at Avalonia.Layout.LayoutManager.Measure(ILayoutable control)
   at Avalonia.Layout.LayoutManager.ExecuteMeasurePass()
   at Avalonia.Layout.LayoutManager.ExecuteLayoutPass()
   at Avalonia.Threading.JobRunner.RunJobs(Nullable`1 priority)
   at Avalonia.Win32.Win32Platform.WndProc(IntPtr hWnd, UInt32 msg, IntPtr wParam, IntPtr lParam)
   at Avalonia.Win32.Interop.UnmanagedMethods.DispatchMessage(MSG& lpmsg)
   at Avalonia.Win32.Win32Platform.RunLoop(CancellationToken cancellationToken)
   at Avalonia.Threading.Dispatcher.MainLoop(CancellationToken cancellationToken)
   at Avalonia.Controls.ApplicationLifetimes.ClassicDesktopStyleApplicationLifetime.Start(String[] args)
   at Avalonia.ClassicDesktopStyleApplicationLifetimeExtensions.StartWithClassicDesktopLifetime[T](T builder, String[] args, ShutdownMode shutdownMode)
   at Apollo.Core.Program.Main(String[] args) in C:\Users\mat1jaczyyy\Desktop\apollo-studio\Apollo\Core\Program.cs:line 123
```
## What does the pull request do?
Making binding DataGridTextColumn to nullable numeric types possible


## What is the current behavior?
Binding DataGridTextColumn text property to a nullable number fails, while nullable string and non-nullable number works.

## Repro
..\samples\ControlCatalog\Models\Person.cs
Change FirstName property type from string to int?
..\samples\ControlCatalog\Pages\DataGridPage.xaml.cs
Update FirstName instantiations by adding integer numbers
Run demo and switch to DataGrid->Editable
FirstName cells are empty


## What is the updated/expected behavior with this PR?
FirstName cells are no longer empty

## Fixed issues
Fixes #3423 

Perhaps something like `<Grid ColumnDefinitions="1*,2*,(SharedSizeGroupLabel)" ...`; Just want to bring this up if there's any interest on this. 
## What does the pull request do?
This PR introduces multiple things

**TextFormatter**
The TextFormatter will be responsible for doing all the heavy lifting for all the text processing that is needed to build up a text layout. It functions as a service to implement your own layouts and it makes it possible to implement text editors etc.

**TextBlock**
The TextBlock control currently uses a FormattedText implementation that doesn't work well with advanced Unicode scenarios. This PR replaces FormattedText with the TextLayout class that is able to deal with all kinds of Unicode texts and produces expected results.


## What is the current behavior?
<!--- If the PR is a fix, describe the current incorrect behavior, otherwise delete this section. -->


## What is the updated/expected behavior with this PR?
<!--- Describe how to test the PR. -->


## How was the solution implemented (if it's not obvious)?
<!--- Include any information that might be of use to a reviewer here. -->


## Checklist

- [x] Added unit tests (if possible)?
- [x] Added XML documentation to any related classes?
- [ ] Consider submitting a PR to https://github.com/AvaloniaUI/Avaloniaui.net with user documentation

## Breaking changes
<!--- List any breaking changes here. When the PR is merged please add an entry to https://github.com/AvaloniaUI/Avalonia/wiki/Breaking-Changes -->


## Fixed issues
<!--- If the pull request fixes issue(s) list them like this: 
Fixes #123
Fixes #456
-->

The PVS studio analysis at https://www.viva64.com/en/b/0701/ uncovered a couple of bugs related to argument ordering with `SelectionChangedEventArgs` and `ItemsRepeaterElementIndexChangedEventArgs`.

In short: we swap the order of arguments in the constructors of these classes, but some code that has been ported from WPF and WinUI still uses the WPF/UWP ordering.

We should revert the constructors to use the WPF/UWP ordering.
## What does the pull request do?

A minimal implementation of [scroll anchoring](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.iscrollanchorprovider) which is intended to improve scrolling in the `ItemsPresenter` with items of differing heights/widths.

This functionality is defined in UWP but this PR doesn't attempt to implement all of UWP's features here, in particular:

- No equivalent of [`UIElement.CanBeScrollAnchor`](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.uielement.canbescrollanchor#Windows_UI_Xaml_UIElement_CanBeScrollAnchor): my thoughts here are that this functionality is too niche to deserve a property being added to every control
- No equivalent of [`ScrollViewer.AnchorRequested`](https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.scrollviewer.anchorrequested): this can be added later when needed


## What does the pull request do?
<!--- Give a bit of background on the PR here, together with links to with related issues etc. -->
This is more of a investigation and not a typical PR.

When investigating a few UI freezes in my project at work I've discovered that `ListBox.SelectedItems` is quite problematic since it spams with single item change events causing a flurry of side effects. For example we have one list that contains 10k elements and when pressing `Ctrl+A` collection bound to `SelectedItems` will raise 10k `CollectionChanged` events. WPF is struggling with the same issue due to https://github.com/dotnet/corefx/issues/10752.

So both in Avalonia and WPF `SelectedItems` serves as merely a convenience helper for pure MVVM user and shouldn't be used for anything bigger since it lacks any control over grouping of sent/received events. One could buffer said events, but it introduces another level of complexity and potential bugs.

`SelectionChanged` event on `ListBox` can be used to achieve better results by writing a bit of code behind code since this one is supposed to batch changes (and it does so in WPF). This leads us to Avalonia which has `SelectionChanged` event which is only fired for a few operations (like selecting a single item) and nothing is raised for multiple selection scenarios or even removing items. And I think even after getting these events to raise at all, in current state we would also raise too many events.

I reckon `TreeView` has the same issue since it has similar implementation to `SelectableItemsControl`.

## What is the current behavior?
<!--- If the PR is a fix, describe the current incorrect behavior, otherwise delete this section. -->
`SelectingItemsControl.SelectionChange` is not raised when changing selection.

## What is the updated/expected behavior with this PR?
<!--- Describe how to test the PR. -->
`SelectingItemsControl.SelectionChange` is raised for all operations that would change selection and it raises meaningful events (batched as a whole operation and not sending an event for each add/remove).

## How was the solution implemented (if it's not obvious)?
<!--- Include any information that might be of use to a reviewer here. -->


## Checklist

- [x] Added unit tests (if possible)?
- [ ] Added XML documentation to any related classes?
- [ ] Consider submitting a PR to https://github.com/AvaloniaUI/Avaloniaui.net with user 