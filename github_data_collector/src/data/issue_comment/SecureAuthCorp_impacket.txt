smbexec.py and samrdump.py modules always use "NT LM 0.12" dialect of SMB while connecting to a remote host. So, if the host supports a minimum SMB version higher than SMB1, then the following error occurs:

```
Impacket v0.9.21-dev - Copyright 2019 SecureAuth Corporation

[-] [Errno 104] Connection reset by peer
```

Before the fix

![x0](https://user-images.githubusercontent.com/2904679/72563862-9a7cca80-38bf-11ea-99da-6bf5114700fa.png)

After the fix

![x1](https://user-images.githubusercontent.com/2904679/72563863-9b156100-38bf-11ea-883b-d0a7221af79a.png)

Simple script to quickly list all delegation relationships (unconstrained, constrained, constrained w/ protocol transition, resource-based constrained) in an AD environment.  Useful for enum / identifying escalation paths.

![findDelegationScreenshot](https://user-images.githubusercontent.com/28241763/72472507-4e8c3180-37aa-11ea-9bbd-876054f83f74.png)
The different LDAP attacks were not working on the network I'm currently testing, so I created a LDAP shell to allow an attacker to manually perform basic operations like:

- Creating a new user
- Adding a user to a group
- Search users and groups
- Retrieve all groups a user is a member of
- Retrieve all members of a group
- Dump the AD

This works pretty much the same way as the SMB interactive mode: A new console accessible via netcat will be created after each successful relay.

Note: This PR is dependent on PR #746 
I kept getting an UnsupportedOperation('not writable') when trying to use the interactive shell with Python 3.7.

It seems like socket.makefile doesn't support reading and writing at the same time.

I created two different files: one for forwarding stdin and one for forwarding stdout/stderr.
### Configuration  
impacket version:  it should be 0.9.20 as thats the latest version and i did a git clone https://github.com/SecureAuthCorp/impacket.git but for whatever reason the changelog (in the root directory) says 0.9.15 (see https://github.com/SecureAuthCorp/impacket/blob/master/ChangeLog)
Python version:  2.7.17
Target OS:  kali linux

### Debug Output With Command String  

```
 sudo ./ntlmrelayx.py -debug
Traceback (most recent call last):
  File "./ntlmrelayx.py", line 357, in <module>
    c = start_servers(options, threads)
  File "./ntlmrelayx.py", line 148, in start_servers
    c.setLDAPOptions(options.no_dump, options.no_da, options.no_acl, options.no_validate_privs, options.escalate_user, options.add_computer, options.delegate_access)
TypeError: setLDAPOptions() takes exactly 5 arguments (8 given)

```

### Additional context  
Exact steps taken:
1. git clone https://github.com/SecureAuthCorp/impacket.git
2. cd impacket
3. pip install .
4. cd examples
5. sudo ./ntlmrelayx.py

also tried with a valid command such as 
`sudo ./ntlmrelayx.py -t ldap://dchere --delegate-access --escalate-user MACHINEHERE$ --serve-image ./test.jpg`
but getting same error.
It seems impacket inherited the requirement on the ldap3 dependency from ldapdomaindump. Hence it is pinned to `ldap3==2.5.1`.

This causes conflicts in some package managers which already contain newer versions.

Since ldap3 v2.6.1 contains fixes for the compatibility issues and the recently published ldapdomaindump v0.6.2 is fine with modern ldap3 versions again, I propose to also loosen the requirements here for impacket.
### Configuration  
impacket version:  0.9.21.dev0
Python version:  3.5.6
Target OS:  MacOS MOJAVE 10.14.5

### Context
I want to connect to my NVIDIA SHILED shared folder, which is accessible from all my other machines MacOS 10.14.5, Raspberry..
 
#### Code :
```python
from impacket.smbconnection import SMBConnection
conn = SMBConnection('Shield', '192.168.0.15', preferredDialect=smb.SMB_DIALECT)
conn.login('anass.raissouni', 'password' )
```

#### Output:
~~~~
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
<ipython-input-119-16ec58e71142> in <module>()
      1 conn = SMBConnection('Shield', '192.168.0.15')
      2 
----> 3 conn.login('anass.raissouni', 'password' )

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/smbconnection.py in login(self, user, password, domain, lmhash, nthash, ntlmFallback)
    267         try:
    268             if self.getDialect() == smb.SMB_DIALECT:
--> 269                 return self._SMBConnection.login(user, password, domain, lmhash, nthash, ntlmFallback)
    270             else:
    271                 return self._SMBConnection.login(user, password, domain, lmhash, nthash)

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/smb.py in login(self, user, password, domain, lmhash, nthash, ntlm_fallback)
   3421         if self._dialects_parameters['Capabilities'] & SMB.CAP_EXTENDED_SECURITY:
   3422             try:
-> 3423                 self.login_extended(user, password, domain, lmhash, nthash, use_ntlmv2 = True)
   3424             except:
   3425                 # If the target OS is Windows 5.0 or Samba, let's try using NTLMv1

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/smb.py in login_extended(self, user, password, domain, lmhash, nthash, use_ntlmv2)
   3285             sessionData       = SMBSessionSetupAndX_Extended_Response_Data(flags = smb['Flags2'])
   3286             sessionData['SecurityBlobLength'] = sessionParameters['SecurityBlobLength']
-> 3287             sessionData.fromString(sessionResponse['Data'])
   3288             respToken = SPNEGO_NegTokenResp(sessionData['SecurityBlob'])
   3289 

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/structure.py in fromString(self, data)
    140             if self.debug:
    141                 print("fromString( %s | %s | %r )" % (field[0], field[1], data))
--> 142             size = self.calcUnpackSize(field[1], data, field[0])
    143             if self.debug:
    144                 print("  size = %d" % size)

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/structure.py in calcUnpackSize(self, format, data, field)
    486         two = format.split('=')
    487         if len(two) >= 2:
--> 488             return self.calcUnpackSize(two[0], data)
    489 
    490         # length specifier

/anaconda3/envs/factory/lib/python3.5/site-packages/impacket/structure.py in calcUnpackSize(self, format, data, field)
    522         # asciiz specifier
    523         if format[:1] == 'u':
--> 524             l = data.index(b('\x00\x00'))
    525             return l + (l & 1 and 3 or 2)
    526 

ValueError: substring not found
~~~~

### Additional context  

I tried unsuccessfully without prefferedDialect and with the other dialects which I import like this:
```python
from impacket import smb
from impacket.smb3structs import SMB2_DIALECT_002, SMB2_DIALECT_21, SMB2_DIALECT_30
```


Before the fix, in python 2 (I know I know, it's almost deprecated) we get the following error when trying to decrypt a masterkey using the domain backup key:
```
$ dpapi.py masterkey -file c1bb00eb-99a9-469e-bda8-2204fc87ada6 -pvk backup_key.pvk
Impacket v0.9.21-dev - Copyright 2019 SecureAuth Corporation

[MASTERKEYFILE]
Version     :        2 (2)
Guid        : c1bb00eb-99a9-469e-bda8-2204fc87ada6
Flags       :        0 (0)
Policy      :        0 (0)
MasterKeyLen: 00000088 (136)
BackupKeyLen: 00000068 (104)
CredHistLen : 00000000 (0)
DomainKeyLen: 00000174 (372)

local variable 'long' referenced before assignment
```
After the patch, everything works as intended
I Receiving the following error after Getting TGT
[*] Getting TGT for *******
[-] <ConstraintsIntersection object at 0xb7555f2c consts <ConstraintsUnion object at 0xb7555dac consts <SingleValueConstraint object at 0xb7555d6c consts 10>, <SingleValueConstraint object at 0xb7555d8c consts 12>>> failed at: ValueConstraintError('<ConstraintsUnion object at 0xb7555dac consts <SingleValueConstraint object at 0xb7555d6c consts 10>, <SingleValueConstraint object at 0xb7555d8c consts 12>> failed at: ValueConstraintError(\'all of (<SingleValueConstraint object at 0xb7555d6c consts 10>, <SingleValueConstraint object at 0xb7555d8c consts 12>) failed for "11"\',)',) at Integer
Add Flake8 F63 tests which are usually about the confusion between identity and equality in Python. Use ==/!= to compare str, bytes, and int literals is the classic case. These are areas where a == b is True but a is b is False (or vice versa). Python >= 3.8 will raise SyntaxWarnings on these instances.