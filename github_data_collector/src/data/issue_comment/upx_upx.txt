<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?

I am trying to modify the UPX pre-compiled stub and just want to add a simple delay before the stub decompresses my compressed application. What I want to achieve is the executable to loaded in memory and unpacked after a delay.

## What should have happened?

`section         ZED1`
`mov     cx, 0x02FA`
`mov     dx, 0xF080`
`mov     ah, 0x86`
`mov     al, 0`
`int     0x15`

As the stubs are in assembly I was expecting to add an interrupt based delay to achieve this functionality.But every time I implemented the delay the program loaded instantly.

## Do you have an idea for a solution?

I believe that the approach of using an interrupt to generate is based on 16 bit assembly and the stub is 32 bit assembly and that does not uses interrupts. the interrupt in question is 21H


## Please tell us details about your environment.

* UPX version used (`upx --version`):
upx 3.95-git-7a3637ff5a80+
UCL data compression library 1.03
zlib data compression library 1.2.11
LZMA SDK version 4.43

* Host Operating System and version:
Ubuntu 18.04 
* Host CPU architecture:
x86-64
* Target Operating System and version:
Ubuntu 18.04
* Target CPU architecture:
x86-64

<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
On Debian 10 "buster" x86_64 (with `qemu-uset-static` and `upx-ucl` ):
```
wget https://busybox.net/downloads/binaries/1.28.1-defconfig-multiarch/busybox-armv7l
chmod a+x busybox-armv7l
```
Then:
```
user@host:/tmp$ upx busybox-armv7l 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2018
UPX 3.95        Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   1079156 ->    622660   57.70%    linux/arm    busybox-armv7l                

Packed 1 file.
user@host:/tmp$ ./busybox-armv7l 
./busybox-armv7l: Invalid argument
```

The compressed executable reported `Invalid argument`

## What should have happened?
The compressed `busybox-armv7l` should run as the uncompressed one.

## Do you have an idea for a solution?
* I have no idea :disappointed: 
* After uncompressed this, the busybox-armv7l worked (w/o errors):
```
user@host:/tmp$ upx -d busybox-armv7l 
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2018
UPX 3.95        Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
   1079156 <-    622660   57.70%    linux/arm    busybox-armv7l

Unpacked 1 file.
user@host:/tmp$ ./busybox-armv7l 
BusyBox v1.28.1 (2018-02-15 14:34:02 CET) multi-call binary.
BusyBox is copyrighted by many authors between 1998-2015.
Licensed under GPLv2. See source distribution for detailed
copyright notices.
```
* On Debian 10 arm64, It works perfectly.
* `master` and `devel` branch of `upx` does *NOT* work, either (with libucl-dev 1.03+repack-5)
* Not sure if it's related to `qemu-user-static`

## How can we reproduce the issue?
<!--- Provide unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1. Get a computer running Debian 10 "buster" **x86_64**
2. `apt install qemu-user-static upx-ucl`
3. `wget https://busybox.net/downloads/binaries/1.28.1-defconfig-multiarch/busybox-armv7l && chmod a+x busybox-armv7l`
4. `upx busybox-armv7l`
5. `./busybox-armv7l`

## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX version used (`upx --version`): `upx 3.95`
* Host Operating System and version: `Debian 10 "buster"`
* Host CPU architecture: `x86_64`
* Target Operating System and version: `Debian 10 "buster"` and "OpenWRT 18.06"
* Target CPU architecture: `arm`

commit/f056ecdcd50dbf881194ba6998e5e1d2e8cc10f3

Examples:
1. `LordPE` optimized header
![LordPE-optm-0](https://user-images.githubusercontent.com/19585474/60780228-245d1580-a170-11e9-97e0-a427c79ae45b.png)
2. very shortened header
![fsg2-hdr-1](https://user-images.githubusercontent.com/19585474/60780312-83228f00-a170-11e9-9829-72ab06bd0274.png)
<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
1. compress native-lib.so use upx 3.9.5 with --android-shlib  parameter, compress success. then use the so file which has compressed, crash on android phone
2. use the develop branch source code, compress native-lib.so,  throwCantPack.

## What should have happened?
1. for problem 1,  should not crash
2. for problem 2, should compress success

## Do you have an idea for a solution?
1. I have no idea with problem 1.
2. for problem 2. 

- in p_unix.cpp

change 
`
#define __S_IEXEC 0100  /* Execute by owner.  */ 
`
to
`
#define __S_IEXEC 0x0100  /* Execute by owner.  */
`

- in p_lx_elf.cpp

add other r_type value
`
if (Elf32_Ehdr::EM_ARM == e_machine
                                    &&  R_ARM_RELATIVE == r_type) {
                                        user_init_va = get_te32(&file_image[user_init_off]);
                                    }
                                    else {
                                        char msg[50]; snprintf(msg, sizeof(msg),
                                            "bad relocation %#x DT_INIT_ARRAY[0]",
                                            r_info);
                                        throwCantPack(msg);
                                    }
                                    break;
 `
in my case r_type is number 2
`
if (Elf32_Ehdr::EM_ARM == e_machine  &&  (R_ARM_RELATIVE == r_type || xxxx == r_type))
`

## How can we reproduce the issue?
<!--- Provide unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1. create new native project use android studio
2. modify the native-lib.c :
`
#include <jni.h>
#include <string>
#include <android/log.h>

void testBeforeMain101() __attribute__((constructor(101)));

extern "C" JNIEXPORT jint JNICALL
JNI_OnLoad(JavaVM *vm, void *reserved) {
    __android_log_print(ANDROID_LOG_DEBUG, "demo", "eyas JNI_OnLoad\n");
    return JNI_VERSION_1_4;
}

extern "C" JNIEXPORT jstring JNICALL
Java_com_example_eyas_MainActivity_stringFromJNI(
        JNIEnv *env,
        jobject /* this */) {
    std::string hello = "Hello from eyas";
    __android_log_print(ANDROID_LOG_DEBUG, "demo", "eyas Java_com_example_reforceapk_MainActivity_stringFromJNI\n");
    return env->NewStringUTF(hello.c_str());
}

void testBeforeMain101() {
    __android_log_print(ANDROID_LOG_DEBUG, "demo", "testBeforeMain 101\n");
}
`
3. build apk, compress native-lib.so, resign apk 
4. install & run the apk

## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX 3.9.5 and upx dev branch
* win 10:
* intel:
* armeabi-v7a:
* arm

<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
upx.out -9 --brute --android-shlib lib**.so (arm64-v8a)
Error: CantPackException: bad PT_DYNAMIC phdr[2]

## What should have happened?
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->

## Do you have an idea for a solution?
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## How can we reproduce the issue?
<!--- Provide unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
i use android studio and ndk-build  a test project so

## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX version used (`upx --version`): 3.95
* Host Operating System and version: macos 10.15
* Host CPU architecture: x86-64
* Target Operating System and version: android
* Target CPU architecture: arm64-v8a

I compiled a binary executable program, in the mobile terminal is no problem, when to install the program in vmos is executed up inside, hope to be able to help me, thank you very much!

UPX 3.95 

upx -f -o   xxx  xxx 

Here is to capture the error:

11-04 17:44:44.194 31517 31517 F DEBUG   : Build fingerprint: 'Rock/odin/odin:7.1.1/NMF26F/1565941878:user/dev-keys'
11-04 17:44:44.194 31517 31517 F DEBUG   : Revision: '0'
11-04 17:44:44.194 31517 31517 F DEBUG   : ABI: 'arm'
11-04 17:44:44.194 31517 31517 F DEBUG   : pid: 31514, tid: 31514, name: initlinker32  >>> /data/data/com.touchsprite.android/files/jar/armeabi/core <<<
11-04 17:44:44.194 31517 31517 F DEBUG   : signal 7 (SIGBUS), code 2 (BUS_ADRERR), fault addr 0xf686d880
11-04 17:44:44.194 31517 31517 F DEBUG   :     r0 f6b7688e  r1 000006f1  r2 f686d880  r3 00000000
11-04 17:44:44.194 31517 31517 F DEBUG   :     r4 ff000000  r5 ffffffff  r6 f6b76880  r7 f6b76f7d
11-04 17:44:44.194 31517 31517 F DEBUG   :     r8 00000000  r9 0030756c  sl ffcf7000  fp ff9bb5dc
11-04 17:44:44.194 31517 31517 F DEBUG   :     ip ff9bb530  sp ff9bb5a4  lr f6b765ec  pc f6b765e0  cpsr b00d0010
11-04 17:44:44.195 31517 31517 F DEBUG   :
11-04 17:44:44.195 31517 31517 F DEBUG   : backtrace:
11-04 17:44:44.195 31517 31517 F DEBUG   :     #00 pc 003075e0  /data/data/com.vmos.app/osimg/r/ot01/data/data/com.touchsprite.android/files/jar/armeabi/core
11-04 17:44:44.195 31517 31517 F DEBUG   :     #01 pc 003075e8  /data/data/com.vmos.app/osimg/r/ot01/data/data/com.touchsprite.android/files/jar/armeabi/core
11-04 17:44:44.404   589   933 I AudioFlinger: BUFFER TIMEOUT: remove(4096) from active list on thread 0xf4f83a40
11-04 17:44:44.437   589   828 I APM_AudioPolicyManager: stopOutput() output 29, stream 3, session 169
11-04 17:44:44.438   589   828 I APM_AudioPolicyManager: setOutputDevice() io 29 prevDevice 0x0002, cur 0x0000
<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
Upx can produce binaries which would segfault when run, if the program segment is of specific size (when the padding it has is less than 4 bytes). Normally the program segment is page size-aligned, meaning that it can have at most 4095 unused bytes in its last page, so there's a good chance it would have at least 4 bytes. However, that's not guaranteed, and there's roughly a 0.1% chance the space would not be there.

<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->

## What should have happened?
The compressed binary should run normally, irrespective of the program segment size.
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->

## Do you have an idea for a solution?
I tracked down the issue to the function make_hatch_x86_64() not being able to find space for the hatch, at the following location: https://github.com/upx/upx/blob/7a3637ff5a800b8bcbad20ae7f668d8c8449b014/src/stub/src/amd64-linux.elf-main.c#L233
None of the conditions match, and the function returns 0. Later the hatch is attempted to be used at https://github.com/upx/upx/blob/7a3637ff5a800b8bcbad20ae7f668d8c8449b014/src/stub/src/amd64-linux.elf-fold.S#L169
...and, since it's zero, jump happens to 0 and it all segfaults.

<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## How can we reproduce the issue?
<!--- Provide unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
Since this happens when there's no padding space left after program segment, we generate binaries of increasing sizes and run them until one of them crash. A test program and a shell script to do this are included. Run `./test-all.sh` and see it segfault at some point.

test.c
```
#include <unistd.h>

int main()
{
  _exit(0);
}

#define NOP2 asm("nop"); asm("nop");
#define NOP4 NOP2 NOP2
#define NOP8 NOP4 NOP4
#define NOP16 NOP8 NOP8
#define NOP32 NOP16 NOP16
#define NOP64 NOP32 NOP32
#define NOP128 NOP64 NOP64
#define NOP256 NOP128 NOP128
#define NOP512 NOP256 NOP256
#define NOP1024 NOP512 NOP512
#define NOP2048 NOP1024 NOP1024

void  __attribute__((section(".fini"))) foo()
{
  NOP2048
  NOP2048
  NOP2048
  NOP1024

  #if (VAL&1)
    asm("nop");
  #endif
  #if (VAL&2)
    NOP2
  #endif
  #if (VAL&4)
    NOP4
  #endif
  #if (VAL&8)
    NOP8
  #endif
  #if (VAL&16)
    NOP16
  #endif
  #if (VAL&32)
    NOP32
  #endif
  #if (VAL&64)
    NOP64
  #endif
  #if (VAL&128)
    NOP128
  #endif
  #if (VAL&256)
    NOP256
  #endif
  #if (VAL&512)
    NOP512
  #endif
  #if (VAL&1024)
    NOP1024
  #endif
  #if (VAL&2048)
    NOP2048
  #endif
}
```

test-all.sh
```
#!/bin/bash

set -xue

for x in `seq 0 4095`; do
gcc -DVAL=$x test.c -o test
upx test
./test
done
```

Here is what I get (it takes 537 iterations to find the right size in my case, only the final output is included):
```
...

+ for x in '`seq 0 4095`'
+ gcc -DVAL=537 test.c -o test
+ upx test
                       Ultimate Packer for eXecutables
                          Copyright (C) 1996 - 2018
UPX 3.95        Markus Oberhumer, Laszlo Molnar & John Reiser   Aug 26th 2018

        File size         Ratio      Format      Name
   --------------------   ------   -----------   -----------
     20728 ->      5448   26.28%   linux/amd64   test                          

Packed 1 file.
+ ./test
./test-all.sh: line 5: 29621 Segmentation fault      ./test
```


## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX version used (`upx --version`): upx 3.95 (or any other version, including current devel tip)
* Host Operating System and version: linux/amd64
* Host CPU architecture: linux/amd64
* Target Operating System and version: linux/amd64
* Target CPU architecture: amd64

<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
unity libil2cpp.so crash on x86 platform after upx compress, while on arm platform, it works fine.


## What should have happened?
should not crash after upx compress on x86 platform.

## Do you have an idea for a solution?
No solution here, only found that the unity internal function "Debug.log()" will cause the crash, but it should not be the reason, because it works fine on the arm platform

## How can we reproduce the issue?
1. Write a unity Demo app, it's better that include the "Debug.log()" statement, build with il2cpp, and do not forget include the armv7 and x86 platform when export a apk file.
2. unpack the apk, and use upx to compress the libil2cpp.so in folder armv7 and x86, and then repack it.
3. run the apk on an android phone, and use logcat to check the log, it works fine.
4. run the apk on an android simulator, and use logcat to check the log, it crashed. 

![image](https://user-images.githubusercontent.com/30288072/66823476-ed6d7b80-ef78-11e9-892a-9461d73775f7.png)


## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX version used (`upx --version`): both upx 3.95 and upx3.94 tried. 
* Host Operating System and version: linux 64
* Host CPU architecture: Amd64
* Target Operating System and version: x86
* Target CPU architecture: intel

Last release has been quite a while ago and especially with https://github.com/upx/upx/issues/245 being fixed in the `devel` branch I think it's quite important to get that fix into stable.

What do you think?
<!---

IF YOU REMOVE THIS TEMPLATE WE WILL CLOSE YOUR ISSUE WITHOUT RESPONSE.
Just read it and fill in the details we're asking, it saves so much of our time. Thanks!

-->

## What's the problem (or question)?
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
I used the following command to pack .so for android device.
upx  --android-shlib libs/arm64-v8a/libnative-lib.so
upx --android-shlib libs/armeabi/libnative-lib.so
upx --android-shlib libs/armeabi-v7a/libnative-lib.so
upx --android-shlib libs/x86/libnative-lib.so
upx --android-shlib libs/x86_64/libnative-lib.so

I tested arm .so in real device and it worked well. However, .so crashed in x86/x86_64 android emulator.

08-21 12:16:28.266  5782  5782 F libc    : Fatal signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0 in tid 5782 (ty.abctest.app), pid 5782 (ty.abctest.app)
08-21 12:16:28.258  5782  5801 D EGL_emulation: eglMakeCurrent: 0x78dceede6ac0: ver 3 0 (tinfo 0x78dcf66f3720)
08-21 12:16:28.326  5808  5808 I crash_dump64: obtaining output fd from tombstoned, type: kDebuggerdTombstone
08-21 12:16:28.327  1777  1777 I /system/bin/tombstoned: received crash request for pid 5782
08-21 12:16:28.328  5808  5808 I crash_dump64: performing dump of process 5782 (target tid = 5782)
08-21 12:16:28.331  5808  5808 F DEBUG   : *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** ***
08-21 12:16:28.332  5808  5808 F DEBUG   : Build fingerprint: 'google/sdk_gphone_x86_64/generic_x86_64:9/PSR1.180720.093/5456446:userdebug/dev-keys'
08-21 12:16:28.332  5808  5808 F DEBUG   : Revision: '0'
08-21 12:16:28.332  5808  5808 F DEBUG   : ABI: 'x86_64'
08-21 12:16:28.332  5808  5808 F DEBUG   : pid: 5782, tid: 5782, name: ty.abctest.app  >>> com.jtest.abctest.app <<<
08-21 12:16:28.332  5808  5808 F DEBUG   : signal 11 (SIGSEGV), code 1 (SEGV_MAPERR), fault addr 0x0
08-21 12:16:28.332  5808  5808 F DEBUG   : Cause: null pointer dereference
08-21 12:16:28.332  5808  5808 F DEBUG   :     rax 0000000000000000  rbx 0000000000000000  rcx 000078dcdcbd4f92  rdx 00007ffdabe7f580
08-21 12:16:28.332  5808  5808 F DEBUG   :     r8  0000000000000000  r9  0000000000000000  r10 0000000000000032  r11 0000000000000246
08-21 12:16:28.332  5808  5808 F DEBUG   :     r12 000078dd7bcf6710  r13 000078dd7bcb7470  r14 000078dd7bcb7610  r15 000078dcdcbde400
08-21 12:16:28.332  5808  5808 F DEBUG   :     rdi 0000000000000006  rsi 00007ffdabe7f548
08-21 12:16:28.332  5808  5808 F DEBUG   :     rbp 000078dd7bcb7470  rsp 00007ffdabe78718  rip 000078dcdcbd43c0
08-21 12:16:28.360  5808  5808 F DEBUG   :
08-21 12:16:28.360  5808  5808 F DEBUG   : backtrace:
08-21 12:16:28.361  5808  5808 F DEBUG   :     #00 pc 00000000000003c0  <anonymous:000078dcdcbd4000>
08-21 12:16:28.361  5808  5808 F DEBUG   :     #01 pc 000000000002dd76  /system/bin/linker64 (__dl__ZN6soinfo17call_constructorsEv+534)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #02 pc 000000000000070f  [anon:linker_alloc_small_objects:000078dd7bcf6000]
08-21 12:16:28.361  5808  5808 F DEBUG   :     #03 pc 000000000001784b  /system/bin/linker64 (__dl__Z9do_dlopenPKciPK17android_dlextinfoPKv+1979)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #04 pc 0000000000000002  <unknown>
08-21 12:16:28.361  5808  5808 F DEBUG   :     #05 pc 0000000000012f89  /system/bin/linker64 (__loader_android_dlopen_ext+57)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #06 pc 00000000007f7b7b  [stack:00007ffdab682000]
08-21 12:16:28.361  5808  5808 F DEBUG   :     #07 pc 0000000000003fa5  /system/lib64/libnativeloader.so (android::OpenNativeLibrary(_JNIEnv*, int, char const*, _jobject*, _jstring*, bool*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+389)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #08 pc 0000000000000071  <unknown>
08-21 12:16:28.361  5808  5808 F DEBUG   :     #09 pc 000000000032124b  /system/lib64/libart.so (art::JavaVMExt::LoadNativeLibrary(_JNIEnv*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> const&, _jobject*, std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>*)+1483)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #10 pc 000000000000005b  <unknown>
08-21 12:16:28.361  5808  5808 F DEBUG   :     #11 pc 0000000000003f39  /system/lib64/libopenjdkjvm.so (JVM_NativeLoad+393)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #12 pc 00000000007f7c07  [stack:00007ffdab682000]
08-21 12:16:28.361  5808  5808 F DEBUG   :     #13 pc 0000000000110d20  /system/framework/x86_64/boot.oat (offset 0x110000) (java.lang.Runtime.nativeLoad [DEDUPED]+256)
08-21 12:16:28.361  5808  5808 F DEBUG   :     #14 pc 0000000000252e6f  /data/dalvik-cache/x86_64/system@framework@boot.art
08-21 12:16:28.361  5808  5808 F DEBUG   :     #15 pc 00000000005c3e16  /system/lib64/libart.so (art_quick_invoke_static_stub+806)

## What should have happened?
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->


## Do you have an idea for a solution?
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->

## How can we reproduce the issue?
<!--- Provide unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1. compile android .so in android-ndk-r14b and generate .so file
2. use latest upx to compress .so file with the command: upx --android-shlib libs/x86_64/libnative-lib.so
3. Use an android app to load the upx-packed .so file in android emulator Pixel 3 API 28 (Android 9, API 28)

## Please tell us details about your environment.
<!--- Include as many relevant details about the environment you experienced the bug in -->
* UPX version used (`upx --version`):
upx 3.95 and upx 3.96-git-6a53c0b3d499
* Host Operating System and version:
Linux ubuntu-16 4.15.0-55-generic #60~16.04.2-Ubuntu SMP Thu Jul 4 09:03:09 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
* Host CPU architecture:
X86_64
* Target Operating System and version:
Android 9 (API level 28)
* Target CPU architecture:
x86_64
