In https://github.com/mikefarah/yq/issues/107#issuecomment-575660454 @hassbert points out that the version 3 of `yq` handles double-quoted values differently from the currently released version.

In the currently released version if you pass in a value with double quotes around it, it takes the characters between the quotes as a string.  In version 3 it is treating the entire value, including the double quotes, as a string.

It might be nice if `yq` were backwards compatible in this regard.

On the other hand, the double-quotes are kind of a hack, and are handled inconsistently from single quotes (which are not removed in either version).  It might be nice to adopt a new, more consistent and elegant approach to handling input values.

Two such approaches come to mind:

1. Always parse values as a string (no quote removal), unless a special option is provided that says the value should be parsed as yaml text.  e.g. `yq n b -y true` --> `b: true` and `yq n b true` --> `b: "true"`
2. Always parse values as yaml text, unless a special option is provided that says the value should be always considered a string, e.g. `yq n b true` --> `b: true` and `yq n b -s true` --> `b: "true"`

See also https://github.com/mikefarah/yq/issues/107



I noticed you are switching to a new script format that is very similar to [RFC 6902 - JSON Patch](https://tools.ietf.org/html/rfc6902)

The main incompatibility seems to be the use of `op` instead of `command` and slight differences in the name of the commands/ops (`replace` vs `update`)

I wonder if it would make sense to either (1) adopt that format as-is or (2) support it as an alternative

Not to say that RFC 6902 is some kind of famous standard with wide-spread adoption, but it is used in `kustomize` which is fairly popular for kubernetes users.  If `yq` supported the same patch format then `kustomize` users could use `yq` to run an RFC 6902 patch as a way to preview its effects.

If you adopted it as a standard you could potentially publish your own RFC - YAML Patch.

i tryed to merge two yaml files, but something is wrong.

a.yaml
```
version: "3.7"
services:
  hello:
    image: hello-world
    port:
      - 80
```
b.yaml
```
version: "3.7"
services:
  hello:
    port:
      - 90
```

i run yq like this
`yq m -x a.yaml b.yaml`

what i expect:
```
version: "3.7"
services:
  hello:
    image: hello-world
    port:
      - 90
```
and what i get is (yq version 2.4.1)
```
services:
  hello:
    image: hello-world
    port:
    - 90
version: "3.7"
```
and (yq version 3.0.0 beta)
```
version: '3.7'
services:
  hello:
    image: hello-world
    port:
    - 90
```

the main problem in latest version is the wrong order and indentation
in the first beta order is fixed but still issues with the indentation



I would expect `input_filename` to work like it does in jq, with yq however it always outputs `<stdin>`.

Actual result:
```
$ yq 'input_filename' */problem.yaml
"<stdin>"
"<stdin>"
"<stdin>"
"<stdin>"
"<stdin>"
"<stdin>"
```

Expected result:
```
$ yq 'input_filename' */problem.yaml
"project_alpha/problem.yaml"
"project_zero/problem.yaml"
"questions/problem.yaml"
"research/problem.yaml"
"stuff/problem.yaml"
"test/problem.yaml"
```
It would be helpful for the merge feature to get an option to show the source filename for each value.

If you merge few files and want to easily track where did the specific value came from it could be printed just after the value as a comment. The tricky part is to skip the not simple values containing yml objects.

For instance one could invoke merge:
`yq -s merge file-a.yml file-b.yml file-c.yml `
or
`yq  --showSource merge file-a.yml file-b.yml file-c.yml `

where option `-s` or `--showSource` could indicate to print the value source

output:
<pre>a:
  z: 5  # file-a.yml
  x: 6  # file-b.yml
b:
  name: "Abcd"  # file-c.yml</pre>


  
When i run a command to replace a value in yaml
for example 
yq w fileName.yaml global.containerTags.site 1212121 > values.new
expected value is
gloabl:
  containerTags:
    site: 1212121

actual value is 1.212121e+06

this only happen if i try to write a number with 7 digits or more 6 digits or less works fine
I would like to delete the nodes which have a matching nested key for example schema which has description but not schema that has $ref
```
paths:
  /xxxxxxx/symbols/{symbols}:
    get:
      description: Fetches symbol 
      operationId: GetSymbols
      parameters:
      - description: List of symbols 
        in: path
        name: symbols
        required: true
   =>   schema:
          description: List of symbols
          type: string <= delete this
        type: string
      responses:
    =>     schema:
            $ref: '#/definitions/ErrorResponse' <= don't delete this
```
   what i have tried;
`#yd d -i swagger.yaml "paths.[*].[*].[*].[*].schema" `
deletes both - any way to delete only the schema node that have an underlying node as description?
Hi Mike,

This PR includes package spec for Chocolatey, as per our email discussion.

To build the package on Linux:
* I'm not sure if you need PowerShell at all, but I think you need mono and chocolatey for this, my google-fu gave only [this link](https://stackoverflow.com/questions/39386471/can-i-build-chocolatey-packages-on-linux)
* navigate to `choco` directory and execute something like `mono /path/to/choco.exe pack yq.nuspec`. it will either work, or not. if not, consider changing the `tools` path in the `.nuspec` file (see comment).
* when it works, it will output `yq.2.4.1.nupkg` file, send it to me for verification to be sure everything is okay

after we're done with it, basically two more things to mention:

1. publishing a package. sign up on [chocolatey community packages](https://chocolatey.org/packages) and basically just submit the `yq.2.4.1.nupkg` file through web UI. there's also a CLI helper for that step (`choco push`).
2. if you will release a new version, change `version` in `.nuspec`, `Url`, `Url64`, `Url64bit` and `Checksum64` in `.ps1`. then pack, then push.

I believe, that's it. Drop me a note with the resulting `.nupkg` and whether I need to update `tools` path in the `.nuspec` (I'll update the PR if you won't do it already).

P.S. this PR does not document `choco` installation yet, let's get a package submitted and only then document this way of installing.
## Version

Using yq 2.4.1 -- latest stable release at time of writing.

## Description

yq's appears to just drop merge keys (`<<:`), rather than produce any output or an error.

### Example 1:

**Input:**

```
foo: &foo
  a: 1

bar: &bar
  b: 2

foobar:
  <<: [*foo,*bar]
  c: 3
```

**Expected output:**

```
bar:
  b: 2
foo:
  a: 1
foobar:
  a: 1
  b: 2
  c: 3
```

**Actual output:**

```
foo:
  a: 1
bar:
  b: 2
foobar:
  c: 3
```

### Example 2:

**Input:**

```
foo: &foo
  a: 1

foobar:
  <<: *foo
  c: 3
```

**Expected output:**

```
foo:
  a: 1
foobar:
  a: 1
  c: 3
```

**Actual output:**

```
foo:
  a: 1
foobar:
  c: 3
```

### Example 3:

**Input:**

```
list:
  - &foo
    a: 1
  - &bar
    b: 2

foobar:
  <<: [*foo,*bar]
  c 3
```

**Expected output:**

```
list:
- a: 1
- b: 2
foobar:
  a: 1
  b: 2
  c: 3
```

**Actual output:**

```
list:
- a: 1
- b: 2
foobar:
  c: 3
```

### Example 4:

yq does handle simple aliases correctly.

**Input:**

```
foo: &foo "foo"
bar: &bar "bar"

foobar:
  foo: *foo
  bar: *bar
  foobar: "foobar"
```

**Expected output:**

```
foo: foo
bar: bar
foobar:
  foo: foo
  bar: bar
  foobar: foobar
```

**Actual output:**

```
foo: foo
bar: bar
foobar:
  foo: foo
  bar: bar
  foobar: foobar
```

It would be very beneficial if there was an option to keep comments and formatting when updating the data for example with `yq w ...`.