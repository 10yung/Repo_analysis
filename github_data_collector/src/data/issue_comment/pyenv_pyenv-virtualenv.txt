Hi,

I try to create a virtualenv based on miniconda3-4.3.30, see the following steps:

```
$ pyenv install miniconda3-4.3.30
$ pyenv local miniconda3-4.3.30
$ python --version
Python 3.6.3 :: Anaconda, Inc.
$ pyenv virtualenv miniconda3-4.3.30 test-miniconda3-4.3.30
$ pyenv local test-miniconda3-4.3.30
$ python --version
Python 3.8.1
```

As you can see, the python version of miniconda3-4.3.30 is 3.6.3, while I obtained a python version of 
3.8.1.  

Any hints for this issue?

Regards
 
Hi,

I try to create the environment for this project based on anaconda3-4.3.0 with pyenv-virtualenv:

https://github.com/mbeyeler/opencv-machine-learning.git

But, the pyenv-virtualenv failed to do this job.  See the following steps I've done:
```

$ git clone https://github.com/mbeyeler/opencv-machine-learning.git opencv-machine-learning.git
$ pyenv install anaconda3-4.3.0
$ cd opencv-machine-learning.git
$ pyenv local anaconda3-4.3.0
$ pyenv virtualenv ml
$ pyenv local ml
$ conda install --file requirements.txt
Collecting package metadata (current_repodata.json): done
Solving environment: failed with initial frozen solve. Retrying with flexible solve.
Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.
Collecting package metadata (repodata.json): done
Solving environment: failed with initial frozen solve. Retrying with flexible solve.
Solving environment: / 
Found conflicts! Looking for incompatible packages.
This can take several minutes.  Press CTRL-C to abort.
- failed

CondaError: KeyboardInterrupt

```

But the following steps without using pyenv-virtualenv will do the trick:

```
$ git clone https://github.com/mbeyeler/opencv-machine-learning.git opencv-machine-learning.git
$ pyenv install anaconda3-4.3.0
$ cd opencv-machine-learning.git
$ pyenv local anaconda3-4.3.0
$ conda create -n ml --file requirements.txt
```

I noticed that the conda-based env create will install  l lot of packages while the pyenv-virtualenv based method will only install fewer packages.  But if pyenv-virtualenv cannot construct the env successfully, I still cannot use this method.

Any hints for this issue?
Regards  
Hi *,

thanks for this awesome project at first :).

I noticed that my fish shell got really slow when just pressing enter compared to bash and I figured out that the line "status --is-interactive; and source (pyenv virtualenv-init -|psub)" in my fish config caused this to happen. It looks like this line creates a function that listens to the fish_prompt event:

```shell
function _pyenv_virtualenv_hook --on-event fish_prompt
	set -l ret $status
  if [ -n "$VIRTUAL_ENV" ]
    pyenv activate --quiet; or pyenv deactivate --quiet; or true
  else
    pyenv activate --quiet; or true
  end
  return $ret
end
```
I'm not sure what this function does, but it seems to get executed every time the fish_prompt is shown, which causes indeed performance problems. Would it maybe be enough to just listen to "--on-variable PWD" which would cause it to be executed every time the working directory changes?

best,
jochen
- Corrects outdated bats source location
- Makes it easier to test the code by using `make`
- Configure travis to use the same make file
It would be great if I could use the next commnad:
`pyenv virtualenv 3.6 my-virtualenv-py36`
And this case the latest installed py3.6 would be used. And, in the feature, the last installed py3.6 would be used even if I installed a new one.
Because without this I have to recreate my every virtualenv when I would like to use the newer patch version.
It seems to create conda env fine, but they are not listed.  Can be related to issue #329 

**current virtualenv**

> (anaconda3-2019.10) Kuns-MacBook-Pro:~ kundeng$ pyenv version
> anaconda3-2019.10 (set by /Users/kundeng/.pyenv/version)

**create one based on anaconda**

> (anaconda3-2019.10) Kuns-MacBook-Pro:~ kundeng$ pyenv virtualenv coursera
> Collecting package metadata (current_repodata.json): done
> Solving environment: done
> Preparing transaction: done
> Verifying transaction: done
> Executing transaction: done
>  \#
>  \# To activate this environment, use
>  \#
>  \#     $ conda activate coursera
>  \#
>  \# To deactivate an active environment, use
>  \#
>  \#     $ conda deactivate
> 
> Looking in links: /var/folders/8z/1zdx7_0n4zg70ll0xtk_3w400000gn/T/tmpptb45a67
> Requirement already satisfied: setuptools in /Users/kundeng/.pyenv/versions/anaconda3-2019.10/envs/coursera/lib/python3.8/site-packages (42.0.2.post20191203)
> Requirement already satisfied: pip in /Users/kundeng/.pyenv/versions/anaconda3-2019.10/envs/coursera/lib/python3.8/site-packages (19.3.1)
> 

** The following should list  the newly created one, but it doesnt**

> (anaconda3-2019.10) Kuns-MacBook-Pro:~ kundeng$ pyenv virtualenvs
> * anaconda3-2019.10 (created from /Users/kundeng/.pyenv/versions/anaconda3-2019.10)

**If you list the versions, the newly created virtualenv is there, but it is somewhat wrong, and can't be activated by pyenv activate, You can however use conda activate to activate it.** 

Too many issues will kill our team's development velocity, drastically.
Make sure you have checked all steps below.

### Prerequisite
* [x] Make sure your problem is not listed in [the common build problems](https://github.com/pyenv/pyenv/wiki/Common-build-problems).
* [x] Make sure no duplicated issue has already been reported in [the pyenv issues](https://github.com/pyenv/pyenv/issues). You should look for closed issues, too.
* [x] Make sure you are not asking us to help solving your specific issue.
  * GitHub issues is opened mainly for development purposes. If you want to ask someone to help solving your problem, go to some community site like [Gitter](https://gitter.im/yyuu/pyenv), [StackOverflow](https://stackoverflow.com/questions/tagged/pyenv), etc.
* [x] Make sure your problem is not derived from packaging (e.g. [Homebrew](https://brew.sh)).
  * Please refer to the package documentation for the installation issues, etc.
* [x] Make sure your problem is not derived from plugins.
  * This repository is maintaining `pyenv` and the default `python-build` plugin only. Please refrain from reporting issues of other plugins here.

### Description
- [x] Platform information (e.g. Ubuntu Linux 16.04):Manjaro latest
- [x] OS architecture (e.g. amd64):x86-64
- [x] pyenv version:1.2.15
- [x] Python version:system 3.8

I'm using `zsh`, and got the completions as below when input `pyenv`:

```
hmank ~/./versions Â» pyenv --version
pyenv                    PYENV_ROOT               pyenv-uninstall          pyenv-virtualenv-init                           
pyenv-activate           pyenv-sh-activate        PYENV_VERSION_OLD        PYENV_VIRTUALENV_INIT                           
pyenv-deactivate         pyenv-sh-deactivate      pyenv-virtualenv         pyenv-virtualenv-prefix                         
pyenv-install            PYENV_SHELL              pyenv-virtualenv-delete  pyenv-virtualenvs
```

I install a python3.7 version by `pyenv install 3.7.4`, then create a virtualenv by `pyenv-virtualenv` by `pyenv virtualenv 3.7.4 nn`.

And `pyenv activate nn` active the `nn` successfully. 

But the zsh completion `pyenv-activate nn` failed, got error:

```
Failed to activate virtualenv.

Perhaps pyenv-virtualenv has not been loaded into your shell properly.
Please restart current shell and try again.
```

Same error when I use `pyenv-activate 3.7.4`.


---

What's the difference between `pyenv-activate` and `pyenv activate `?

Why `pyenv-activate` not work?



I have noticed that using pyenv "system" can cause PATH issues for the running python program. This is because for "system" pyenv adds the python system path to PATH. So all the executables in that system path are overridden.

Here is an example:
User has the PATH "~/myjava:/usr/bin". In `~/my/java` is the executable `java`.
Their system python is at `/usr/bin/python`.
They have a script `dojavastuff.py` that runs calls "java".
They have pyenv set to "system".

If user runs `java` it runs `~/myjava/java`.
If user runs `/usr/bin/python dojavastuff.py` the script also runs `~/myjava/java`.
But, if user runs `python dojavastuff.py` the script runs `/usr/bin/java`. This is because pyenv has prefixed the path with `/usr/bin`.

This isn't a problem with non-system pyenvs because they only have the python executables. But with system, that prefixing overrides a lot more methods.

One possible fix might be for pyenv to create a `.pyenv/version/system` directory with links for the python executables. It would then  prefix `.pyenv/version/system` rather than `/usr/bin`. So, like non-system pyenvs, only the python executables would be added.

The readme file has this tidbit:
![image](https://user-images.githubusercontent.com/2521942/70707638-40498200-1ce1-11ea-83b3-1ed83ee73dde.png)

I guess it's nice to finally have an answer as to why pyenv uninstalled the virtualenv I didn't ask for... But what I am not guessing, but am very confidently and adamantly saying is that this kind of thing shouldn't happen! If I order `pyenv` to uninstall something, it should clearly say what other virtualenvs (symlinks) it is going to delete.

If anything, `pyenv virtualenvs` command should better tell that there are symlinks and what installations/symlinks are connected.
When `pyenv virtualenv-delete -f non-existent-virtualenv` is run then an error message is displayed and the return code is 1

This is contrary to the behavior described by `pyenv virtualenv-delete --help`:
```
Usage: pyenv virtualenv-delete [-f|--force] <virtualenv>

   -f  Attempt to remove the specified virtualenv without prompting
       for confirmation. If the virtualenv does not exist, do not
       display an error message.

See `pyenv virtualenvs` for a complete list of installed versions.
```

Specifically for the force flag: `If the virtualenv does not exist, do not display an error message.`

This PR addresses this by checking that the force flag is not set before continuing with standard behavior (displaying the error message and returning the non-zero code).