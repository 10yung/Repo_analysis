It will be awesome to be able to register to more types events on my repository,

The main ones i'm thinking about:
* scheduled job (lambda have this kind of triggers)
* docker image published / new version of it published to a registry (via webhook)
* new version of npm package is available  (via webhook)

Using scheduled job you can get the behaviour of 2 & 3 by running every 5 minutes and query for it  
Hi guys,

First, thanks a lot for this great project! Solved a lot of confusions and headaches for me and team around AWS Lambda. 

We are building and deploying python projects in AWS Lambda and one of the dependencies in Pystan. Installing the latest version of pystan (2.19.0) requires gcc 5 compared to gcc 4.8.3 on the lambci python2.7 images. 

Is there a way to prep a build image with, say, gcc 5.4.0? I'm happy to do the legwork but need some guidance.
Proposed fix for: https://github.com/lambci/ecs/issues/25

This PR contains the following changes:

1. Properly end loguploader after ecs build has started to prevent lambda timeouts
2. Subscribe to status event of github (needs to be enabled in webhook) to fix badges and logs after ecs build has finished

This works but it is sort of hack. Triggering the build lambda from ecs directly might be cleaner than going through github.
`MOCHA_COLORS` is deprecated (as redundant) and will be removed from Mocha; `FORCE_COLOR` already provides this same functionality.

Updates to Lambda limits allow us to increase memory to 3008 mb and timeout to 900 seconds. These should be parameterized in the cloudformation template to allow configuring that setting while deploying.

Tested in my account and everything looks good.

![](https://i.imgur.com/thfUQey.png)

![](https://i.imgur.com/035ZnCp.png)

Amazon ECS is very efficient, but it imposes limits on what environment your tests can run in.  It would be awesome if lambci could spin up a full VM for tests.  While slower than ECS, it would still be more efficient than leaving a VM running 24x7.
Hi @mhart, 

In the interest of helping out with the project, is there a contributing guide that I can see? If not then could someone bullet point the process here?

Cheers,
Niall 
The GitHub Checks API (https://developer.github.com/v3/checks/) is a new integration for CI tools.

It's only supported by GitHub Apps, so #105 is a prerequisite. 
Can you provide the makefile or build instructions that you used to create the `https://lambci.s3.amazonaws.com/binaries/gcc-4.8.5.tgz` archive?

Being able to reproduce the archive locally and checksum it would allow the S3 version to be validated, or possibly replaced with other versions more easily.
GitHub is perpetually showing the orange 'pending' icon rather than a 'failure' red cross for builds that have failed. Strangely the green 'success' tick is coming through correctly though.

I have checked the DynamoDB table and the failed builds have a `status` of `failure` and `success` correctly, and the build log page is also correctly showing if a build has failed rather than showing it perpetually pending.

When first installing lambci the red crosses were working. I think the only thing I changed since then is to manually edit the lambci-config DynamoDB table to change the slack notification room from one room to another.

Any ideas?!