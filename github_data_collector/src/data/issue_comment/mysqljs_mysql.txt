Recently, AWS RDS had a required maintenance for updating certs.

https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html

After this maintenance was completed, we are no longer able to connect to AWS RDS Aurora Postgres using the "Amazon RDS" Profile for SSL.

We are getting below error.

Error:
Cannot connect to Database
2020-01-14 14:43:35{ Error: unable to get local issuer certificate
2020-01-14 14:43:35at TLSSocket.<anonymous> (/opt/app/node_modules/mysql/lib/Connection.js:320:48)
2020-01-14 14:43:35at TLSSocket.emit (events.js:182:13)
2020-01-14 14:43:35at TLSSocket.EventEmitter.emit (domain.js:442:20)
2020-01-14 14:43:35at TLSSocket._finishInit (_tls_wrap.js:629:8)
2020-01-14 14:43:35--------------------
2020-01-14 14:43:35at Protocol._enqueue (/opt/app/node_modules/mysql/lib/protocol/Protocol.js:144:48)
2020-01-14 14:43:35at Protocol.handshake (/opt/app/node_modules/mysql/lib/protocol/Protocol.js:51:23)
2020-01-14 14:43:35at PoolConnection.connect (/opt/app/node_modules/mysql/lib/Connection.js:119:18)
2020-01-14 14:43:35at Pool.getConnection (/opt/app/node_modules/mysql/lib/Pool.js:48:16)
2020-01-14 14:43:35at /opt/app/node_modules/typeorm/driver/mysql/MysqlDriver.js:757:18
2020-01-14 14:43:35at new Promise (<anonymous>)
2020-01-14 14:43:35at MysqlDriver.createPool (/opt/app/node_modules/typeorm/driver/mysql/MysqlDriver.js:754:16)
2020-01-14 14:43:35at MysqlDriver.<anonymous> (/opt/app/node_modules/typeorm/driver/mysql/MysqlDriver.js:267:51)
2020-01-14 14:43:35at step (/opt/app/node_modules/tslib/tslib.js:133:27)
2020-01-14 14:43:35at Object.next (/opt/app/node_modules/tslib/tslib.js:114:57)
2020-01-14 14:43:35at /opt/app/node_modules/tslib/tslib.js:107:75
2020-01-14 14:43:35at new Promise (<anonymous>)
2020-01-14 14:43:35at Object.__awaiter (/opt/app/node_modules/tslib/tslib.js:103:16)
2020-01-14 14:43:35at MysqlDriver.connect (/opt/app/node_modules/typeorm/driver/mysql/MysqlDriver.js:252:24)
2020-01-14 14:43:35at Connection.<anonymous> (/opt/app/node_modules/typeorm/connection/Connection.js:113:58)
2020-01-14 14:43:35at step (/opt/app/node_modules/tslib/tslib.js:133:27)
2020-01-14 14:43:35at Object.next (/opt/app/node_modules/tslib/tslib.js:114:57)
2020-01-14 14:43:35at /opt/app/node_modules/tslib/tslib.js:107:75
2020-01-14 14:43:35at new Promise (<anonymous>)
2020-01-14 14:43:35at Object.__awaiter (/opt/app/node_modules/tslib/tslib.js:103:16)
2020-01-14 14:43:35at Connection.connect (/opt/app/node_modules/typeorm/connection/Connection.js:105:24)
2020-01-14 14:43:35at Object.<anonymous> (/opt/app/node_modules/typeorm/index.js:196:82) code: 'HANDSHAKE_SSL_ERROR', fatal: true }

Since AWS RDS has updated their certs, would the "Amazon RDS" Profile need to be updated in this repo?

Any help would be appreciated.

Mysqljs is used in Node Red mysql-node.
We have here a discussion about the Error:  ER_HANDSHAKE_ERROR
[https://discourse.nodered.org/t/node-red-node-mysql-0-0-19-er-handshake-error-bad-handshake/20098](https://discourse.nodered.org/t/node-red-node-mysql-0-0-19-er-handshake-error-bad-handshake/20098)

MySQL conversion dump:
```
Frame 4: 128 bytes on wire (1024 bits), 128 bytes captured (1024 bits)
Linux cooked capture
Internet Protocol Version 4, Src: 192.168.130.188, Dst: 192.168.130.172
Transmission Control Protocol, Src Port: 3306, Dst Port: 51504, Seq: 1, Ack: 1, Len: 60
MySQL Protocol
    Packet Length: 56
    Packet Number: 0
    Server Greeting
        Protocol: 10
        Version: 5.0.77-log
        Thread ID: 3555
        Salt: YB{gp"PO
        Server Capabilities: 0xa22c
        Server Language: latin1 COLLATE latin1_swedish_ci (8)
        Server Status: 0x0002
        Extended Server Capabilities: 0x0000
        Authentication Plugin Length: 0
        Unused: 00000000000000000000
        Salt: }F$!wW/$cGxI

Frame 6: 146 bytes on wire (1168 bits), 146 bytes captured (1168 bits)
Linux cooked capture
Internet Protocol Version 4, Src: 192.168.130.172, Dst: 192.168.130.188
Transmission Control Protocol, Src Port: 51504, Dst Port: 3306, Seq: 1, Ack: 61, Len: 78
MySQL Protocol
    Packet Length: 74
    Packet Number: 1
    Login Request
        Client Capabilities: 0xf3cf
        Extended Client Capabilities: 0x0007
        MAX Packet: 0
        Charset: utf8 COLLATE utf8_general_ci (33)
        Username: xxxxxxxxxxxx
        Password: xxxxxxxxxxxxxxxx
        Schema: test


Frame 8: 73 bytes on wire (584 bits), 73 bytes captured (584 bits)
Linux cooked capture
Internet Protocol Version 4, Src: 192.168.130.188, Dst: 192.168.130.172
Transmission Control Protocol, Src Port: 3306, Dst Port: 51504, Seq: 61, Ack: 79, Len: 5
MySQL Protocol
    Packet Length: 1
    Packet Number: 2
    EOF marker: 254
        [Expert Info (Warning/Protocol): EOF Marker found while connection in wrong state.]
            [EOF Marker found while connection in wrong state.]
            [Severity level: Warning]
            [Group: Protocol]



Frame 9: 80 bytes on wire (640 bits), 80 bytes captured (640 bits)
Linux cooked capture
Internet Protocol Version 4, Src: 192.168.130.172, Dst: 192.168.130.188
Transmission Control Protocol, Src Port: 51504, Dst Port: 3306, Seq: 79, Ack: 66, Len: 12
MySQL Protocol
    Packet Length: 8
    Packet Number: 3
    Request Command Unknown (67)
        Command: Unknown (67)
        Payload: 4e5a5355474f4b
            [Expert Info (Warning/Protocol): Unknown/invalid command code]
                [Unknown/invalid command code]
                [Severity level: Warning]
                [Group: Protocol]

Frame 10: 94 bytes on wire (752 bits), 94 bytes captured (752 bits)
Linux cooked capture
Internet Protocol Version 4, Src: 192.168.130.188, Dst: 192.168.130.172
Transmission Control Protocol, Src Port: 3306, Dst Port: 51504, Seq: 66, Ack: 91, Len: 26
MySQL Protocol
    Packet Length: 22
    Packet Number: 4
    Error Code: 1043
    SQL state: 08S01
    Error message: Bad handshake
```

We have tested serveral things, without any success. Are any additional information required which are not posted in the node red forum thread?

Thanks a lot, Frank
Amazon RDS has released their 2019-2024 CA’s and has given a formal warning to all RDS users to upgrade their CA’s to the new one before February 5th 2020.

All new RDS Instances will have the new 2019-2024 CA’s starting in November 2019.

You can read about it here:
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL-certificate-rotation.html

And their CA’s are posted here:
https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/UsingWithRDS.SSL.html

This PR adds their new 2019-2024 Global CA that works for all AWS Regions
I'm trying to do the following. I have one big (~1M rows) table that I want to **stream** (using `.stream()`). Then, for each of the rows I get, I use the `accountId` field and then query 1 other table by this `accountId`. I want it to work "in parallel, while streaming". So, on each row I get from the stream I invoke a callback function, in which I execute query like `select * from Table2 where id = "<my id here>"`.

Expected behaviour: streaming goes **in parallel** with these queries in the callback. So, for example, I can see my `console.log` AFTER inner query is done.

Actual behaviour: inner queries do not **finish** executing **until streaming is fully finished** (all 1M rows). I can't say at this point why - and this is my main question in this issue.

Important note that streaming is done on Table1 and inner query is on Table2 (so, different tables).

Yes, I DO use `pool` and get connection from the pool. Also tried to open many connections in preparation step and just give it to my stream and queries (like, "manual pooling"), but same results.

I connect to locally installed MySQL on Mac (installed with `brew install mysql`).

If it's not enough info - I can provide a minimal reproduction repo, since it's important for me to understand and resolve this.

ps: BTW, I've tried the same script on `mysql2` package, which claims to be API-compatible. I've got exactly same behaviour as with `mysql` package.
Mirror change to this project to align with the node-mysql2 PR here: https://github.com/sidorares/node-mysql2/pull/1026
I had previously set `.#a5a#5aa5A5aA5` as my password for MySQL. This password works when logging in through MySQL Workbench, but when I tried to connect using this password to my database, it returned an error.
```js
{
  ...
  code: 'ER_ACCESS_DENIED_ERROR',
  errno: 1045,
  sqlMessage: 'Access denied for user ' +
    "'admin'@'45-23-138-38.lightspeed.sntcca.sbcglobal.net' " +
    '(using password: YES)',
  sqlState: '28000',
  fatal: true
}
```

Connection code:

```js
var mysql      = require('mysql');
var connection = mysql.createConnection({
  host     : 'localhost',
  user     : 'me',
  password : '.#a5a#5aa5A5aA5',
  database : 'my_db'
});

connection.connect();

connection.query('SELECT 1 + 1 AS solution', function (error, results, fields) {
  if (error) throw error;
  console.log('The solution is: ', results[0].solution);
});

connection.end();
```

When I changed the password for the user to `a5a5aa5A5aA5`, the same connection code was able to successfully connect and return the expected result.
Hello,

I cannot use socket_auth to identify via this library on my ARM device. I read several issues about this problem, without quite understanding wether this is a new feature or a bug and whether it is already implemened. The most current issue seem to be #2001 which indicates this is a new feature request. 

However using socket_auth works fine on my desktop, but not on my arm board, despite running the same MariaDB Version `5.5.5-10.1.38-MariaDB`. So I can only assume that my MariaDB behaves differently or the mysql.js lib behaves differently on the arm board. The mariadb on arm is self build and has non standard build options. However the native mysql utility still works with `socket_auth`.

So my main question probably is: What is the current status of this? It seems to be assumed that socket_auth is not yet implemented. However this cannot be since it works on my desktop.

And maybe someone even has more "specific" help for me? See below for more informations.

So the server sends its initial Handshake:
```
<-- HandshakeInitializationPacket {
  protocolVersion: 10,
  serverVersion: '5.5.5-10.1.38-MariaDB',
  threadId: 955,
  scrambleBuff1: <Buffer 58 36 46 3b 36 3d 6c 2d>,
  filler1: <Buffer 00>,
  serverCapabilities1: 63487,
  serverLanguage: 33,
  serverStatus: 2,
  serverCapabilities2: 41023,
  scrambleLength: 21,
  filler2: <Buffer 00 00 00 00 00 00 00 00 00 00>,
  scrambleBuff2: <Buffer 38 72 57 3b 62 59 7a 78 6a 2f 45 50>,
  filler3: <Buffer 00>,
  pluginData: 'mysql_native_password',
  protocol41: true }
```
The mysql.js client replies with 
```hexdump
00  2c 00 00 01 cf f3 06 00  00 00 00 00 21 00 00 00  |,...........!...|
10  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
20  00 00 00 00 72 6f 6f 74  00 00 77 75 74 64 62 00  |....root..wutdb.|

--> (990) ClientAuthenticationPacket {
  clientFlags: 455631,
  maxPacketSize: 0,
  charsetNumber: 33,
  filler: undefined,
  user: 'root',
  scrambleBuff: <Buffer >,
  database: 'wutdb',
  protocol41: true }
```
mysql.js options: 
```json
{
  user: 'root',
  socketPath: '/tmp/mysqld.sock',
  database: 'wutdb',
  debug: true
}
```

The answer of the native mysqlclient is a bit longer:
```
00  a0 00 00 01 85 a6 3f 20  00 00 00 01 21 00 00 00  |......? ....!...|
10  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
20  00 00 00 00 72 6f 6f 74  00 00 6d 79 73 71 6c 5f  |....root..mysql_|
30  6e 61 74 69 76 65 5f 70  61 73 73 77 6f 72 64 00  |native_password.|
40  63 03 5f 6f 73 05 4c 69  6e 75 78 0c 5f 63 6c 69  |c._os.Linux._cli|
50  65 6e 74 5f 6e 61 6d 65  08 6c 69 62 6d 79 73 71  |ent_name.libmysq|
60  6c 04 5f 70 69 64 04 31  35 38 37 0f 5f 63 6c 69  |l._pid.1587._cli|
70  65 6e 74 5f 76 65 72 73  69 6f 6e 07 31 30 2e 31  |ent_version.10.1|
80  2e 33 38 09 5f 70 6c 61  74 66 6f 72 6d 03 61 72  |.38._platform.ar|
90  6d 0c 70 72 6f 67 72 61  6d 5f 6e 61 6d 65 05 6d  |m.program_name.m|
a0  79 73 71 6c                                       |ysql|
a4
```


Closes https://github.com/mysqljs/mysql/issues/2253.
This issue come up in https://github.com/blakeembrey/sql-template-tag/issues/2, based on the code in https://github.com/mysqljs/mysql/blob/master/lib/Connection.js#L39-L41 the `query` object copies properties verbatim from the input object. However, this is an issue for anyone wanting to have computed properties that are not enumerable (any `get` is not enumerable by default).

Happy if this will be denied, it's workaround-able, but it would be nicer to copy just the properties you need (e.g. `['sql', 'values', 'timeout']`). 
I've been wondering what the best way to achieve a bulk insert as part of a multi statement transaction is. 

I have 3 tables that I need to update all at once, and here is the SQL query I use for that. 

```BEGIN;
INSERT INTO `FAB_BCGH` (`OCNO`, `CUSTNAME`, `STYLENO`, `STYLDESC`) VALUES(1, 'FATFACE', 'w2526', '12t1g13g')
on duplicate key update BCGUNIQ = LAST_INSERT_ID(BCGUNIQ);
SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_1;
INSERT INTO FAB_BCGD(BCGUNIQ, ITEMCODE, ITEMDESC, TTLROLLGEN) VALUES (@last_inserted_id_var_1, '2i2ht12t', 'white', 1000)
on duplicate key update BCGLINE = LAST_INSERT_ID(BCGLINE), TTLROLLGEN = TTLROLLGEN + VALUES(TTLROLLGEN);
SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_2;
INSERT INTO FAB_BCGR (`BCGUNIQ`, `BCGLINE`, `ROLLNO`, `RLENGTH`, `RWIDTH`, `PONO`) VALUES (@last_inserted_id_var_1, @last_inserted_id_var_2, '123456', 100, 50, '21t8h12h'), (@last_inserted_id_var_1, @last_inserted_id_var_2, '12367', 100, 50, '21t8h12h')
on duplicate key update BCGREVL = LAST_INSERT_ID(BCGREVL);
COMMIT;
```

As you can see, I update the third table with two sets of values. However, the insertion of those values depends on the @last_inserted_id_var_1 and @last_inserted_id_var_2 variables. 

I tried to do the same with this library in the following format.

(Here nestedData is of the following format):

```
[ [ 79, 56, 1, 15, 'NJPO1603761' ],
  [ 79, 56, 2, 15, 'NJPO1603761' ],
  [ 79, 56, 3, 15, 'NJPO1603761' ],
  [ 79, 56, 4, 15, 'NJPO1603761' ] ]
```

```
connection.query(`
 BEGIN;
 INSERT INTO FAB_BCGH (OCNO, CUSTNAME, STYLENO, STYLDESC) VALUES(${mysql.escape(OC)}, ${mysql.escape(CustName)}, ${mysql.escape(StyleNo)}, ${mysql.escape(StyleDesc)})
      on duplicate key update BCGUNIQ = LAST_INSERT_ID(BCGUNIQ);
      SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_1;
      INSERT INTO FAB_BCGD(BCGUNIQ, ITEMCODE, ITEMDESC, TTLROLLGEN) VALUES (@last_inserted_id_var_1, ${mysql.escape(ItemNo)}, ${mysql.escape(ItemDesc)}, ${mysql.escape(tableData.length)})
      on duplicate key update BCGLINE = LAST_INSERT_ID(BCGLINE), TTLROLLGEN = TTLROLLGEN + VALUES(TTLROLLGEN);
      SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_2;
      INSERT INTO FAB_BCGR (BCGUNIQ, BCGLINE, ROLLNO, RLENGTH, RWIDTH, PONO) VALUES (@last_inserted_id_var_1, @last_inserted_id_var_2, (?), (?), (?))
      on duplicate key update BCGREVL = LAST_INSERT_ID(BCGREVL);
      COMMIT;`, [nestedData], function(err, results, fields) {
      console.log(results)
      connection.release()
      if (err) {
        throw err
      }
    })
```

However, this doesn't work. I get the following error when I run the above transaction. 

```You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '?), (?)) on duplicate key update BCGREVL = LAST_INSERT_ID(BCGREVL);```

Now, presumably, the library doesn't allow partially parameterized queries like the above for bulk inserts? I'm not sure. 

I had to hack my way around it by doing the following

 ```
 connection.query(`
      BEGIN;
      INSERT INTO FAB_BCGH (OCNO, CUSTNAME, STYLENO, STYLDESC) VALUES (${mysql.escape(OC)}, ${mysql.escape(CustName)}, ${mysql.escape(StyleNo)}, ${mysql.escape(StyleDesc)})
      on duplicate key update BCGUNIQ = LAST_INSERT_ID(BCGUNIQ);
      SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_1;
      INSERT INTO FAB_BCGD(BCGUNIQ, ITEMCODE, ITEMDESC, TTLROLLGEN) VALUES (@last_inserted_id_var_1, ${mysql.escape(ItemNo)}, ${mysql.escape(ItemDesc)}, ${mysql.escape(tableData.length)})
      on duplicate key update BCGLINE = LAST_INSERT_ID(BCGLINE), TTLROLLGEN = TTLROLLGEN + VALUES(TTLROLLGEN);
      SELECT LAST_INSERT_ID() INTO @last_inserted_id_var_2;
      SELECT @last_inserted_id_var_1 as index1, @last_inserted_id_var_2 as index2;
      COMMIT;
    `, function(err, results, fields) {
      if (err) throw err
      const { index1, index2 } = results.map(r => {
        if (Array.isArray(r)) {
          return r
        }
      }).filter(r => r)
        .flat()[0]
      const nestedData = tableData.map(rollObj => {
        return [index1, index2, rollObj.roll, rollObj.length, PONumber]
      })
      connection.query(`
        INSERT INTO FAB_BCGR (BCGUNIQ, BCGLINE, ROLLNO, RLENGTH, PONO) VALUES ?
        on duplicate key update BCGREVL = LAST_INSERT_ID(BCGREVL);
      `, [nestedData], function(err, results, field) {
        if (err) throw err
      })
      connection.release()
    })
```

Now, I don't believe that this is the best way to achieve the results I want. Is there a better way to do what I want?