Hi everybody,

Given the bootstrapping capabilities of Akka Management, I don't think ConstructR adds any value any longer. At least not to me.

Therefore I will at least retire as an owner/maintainer of this project. If there is interest, others could take over â€“ please let me know. If not, I will retire the project as well.
Ay! 

Thank to have released version 1.8.1 so fast ! 
However I saw that there is only a release for scala 2.12  : https://dl.bintray.com/hseeberger/maven/de/heikoseeberger/constructr_2.12

VS 

https://dl.bintray.com/hseeberger/maven/de/heikoseeberger/constructr_2.11


It's a issue or you don't release for scala 2.11 anymore ? 
Today, the path in etcd doesn't be modifiable. It is hardcoded in the source code ("constructR")
I think it could be useful to allow one customisation of this path. 
This issue regards only root and the subdirectories but not the final key. 
Use case : Some companies want to organise their etcd and give a formal structure of their etcd's threes
Have you seen Akka Cluster Bootstrap (part of Akka Management): https://github.com/akka/akka-management?

This allows for bootstrapping clusters without central coordination. Pretty cool IMHO. I have tried it with docker-compose: https://github.com/hseeberger/trial-cluster-bootstrap. Works fine.

Now I wonder whether we need ConstructR any longer. What do you think?
As discussed in #171 I have removed the actor-system stopping behavior, modernized the `ConstructrExtension` by switching to the new style of extension implementation and added the ability to hook up event handlers to ConstructR failures, for which I added a couple of tests as well. In the context of this work I also removed the deprecated `ActorDSL` stuff from the multi-jvm test and replaced it with regular actor creation code, as per akka guidelines.
The Constructr supervisor actor has a logic according to which:
1. Leaving the cluster also leads to actor-system termination
2. Failure of the underlying FSM must eventually lead to actor-system termination

About the first point, it seems redundant and restrictive at the same time to take that decision at the Constructr level: `MemberRemoved` is an event that can be easily handled by the user-space (as it is akka public API), and there may be multiple cases (like our own) that the actor-system must resume operations even after leaving the cluster. Generally, shutting down the actor-system just seems to be out of the scope of Constructr as an extension.

About the second point, for reasons similar to the above, what would seem more appropriate would be for Constructr to notify the user-space about its terminated state, and let it decide how to handle it (e.g. continue operation without clustering, or shutdown but perform some sort of cleanup first, etc)

The suggested approach here would be to propagate the failure related decision making to the user-space by elevating the `ConstructrExtension` class; its functionality can be extended so that consumers may register event handlers for Constructr failure, in the same fashion as the akka "native" extensions (e.g. the 'registerOn...` handlers of the `Cluster` extension). 

If backwards compatibility is required for these behaviors (i.e. terminate actor system on failures), we can add some configuration setting that will switch them on/off.

Also, given that the `ConstructrExtension` will be used to provide new functionality, it will be also a good chance to make it abide by the latest [akka extension interface](https://doc.akka.io/docs/akka/2.5/extending-akka.html?language=scala), as per akka 2.5.0 the `ExtensionKey` class has been deprecated. This will have the extra benefit of course that the `ConstructrExtension` will be initializable both from configuration and source code as well. 
Both lock and seed-node entries get a TTL after which they expire at the backend. Given this, there is no attempt at the codebase to delete them when it is actually allowed. These cases would be:
* Lock entries can be deleted when single cluster node has successfully joined cluster and added itself to the backend.
* Seed node entries can be deleted when a node is gracefully leaving the cluster.

While not deleting these entries does not create some catastrophic failure (since they will eventually expire), they do have some annoying side effects: 
* I have happened to experience the generation of a huge amount of occurences of the log message `Couldn't acquire lock, going to GettingNodes` due to the existence of a lock that could have been released, but has just been left to expire (the reason becomes more frequent in the context of #168)
* Newcomers to the cluster will have to wait for a whole TTL to join successfully in the case that previously existing nodes have just exited the cluster. (assuming #168 will be addressed)

My suggestion would be to add two extra methods on the `Coordination` trait:
* unlock
* removeSelf

with default implementations that would do nothing (to keep backwards compatibility) and that would attempt to delete lock and seed node entries respectively on a **best effort** basis. This means that the _ConstructrMachine_ would fire & forget these commands so as not to make the FSM code any more complex. In the best case, firing these commands will achieve the desired results and in the worst one, nothing changes compared to how the FSM works at the moment.

As mentioned at #168 this is one of the improvements my team would need in the context of our work, which of course we will be more than happy to contribute via PR. Your thoughts?
Closes #167.
Hi, because of Tecsisa/constructr-consul#49, I think it is necessary to add a `close()` method to `Coordination`, in order to perform resource release on system shutdown in a clean, elegant way. An example of such resource cleanup would be destroying the Consul session instead of just relying on TTL.

`close()` would be invoked by the `ConstructrMachine` implementation of the `onTermination` hook.

If this is not useful to etcd, we can just have a dummy implementation of `close()`, returning something like `Future.successful(Done)`.
I see this issue currently in constructr head
https://github.com/coursier/coursier/issues/464

Removing scalafmt allows me to test, compile.