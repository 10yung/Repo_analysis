**Describe the bug**
 startOf function not working.

**Expected behavior**
I compared this with moment in follow example in code sandbox
https://codesandbox.io/s/moment-dayjs-zozqm

**Information**
 - Day.js Version [e.g. v1.8.19]
 - Codesandbox
 - Firefox
 - GMT+0530

AM/PM should come after the time, according to https://lh.2xlibre.net/locale/ml_IN/
**Describe the bug**
`dayjs('cat-1').isValid()` returns `true`

**Expected behavior**
`dayjs('cat-1').isValid()` should return `false`

**Information**
 - Day.js Version v1.8.19
 - OS: MacOS Catalina
 - Browser: Chrome Version 79.0.3945.88 (Official Build) (64-bit)
 - Time zone: /

**UPDATE**
After a fast analysis, I found that Dayjs uses `Date` inside `parseDate` method and the problem is really inside `Date` indeed `new Date("cat-1")` returns `2000-12-31T23:00:00.000Z`.
After that, I think that Dayjs should manage this case.
My idea is,

```typescript
function safeParse (s: any): Dayjs {
  if (typeof s === 'string') {
    let m: RegExpExecArray | null = null

    if (typeof s !== 'string') {
      throw new Error(`Not a string: ${s} -- ${typeof s}`)
    }

    if (m = /(\d{4})(\d{2})(\d{2})?/.exec(s)) {
      return dayjs(`${m[1].padStart(2, '0')}-${m[2].padStart(2, '0')}-${(m[3] || '1').padStart(2, '0')}`)
    }

    if (/[-+]?(?:\d+(?:\.\d+)?|\.\d+)/.test(s)) {
      throw new Error(`Is an invalid Number string: ${s}`)
    }

    return dayjs(s)
  }
  ...
}
```

Actually, I have already implemented this, with testing, here. -- https://github.com/patarapolw/q2object/tree/master/packages/is-datestring

```
  Is a valid Number string
    ✓ '20190101'

    ✓ '201902'


  Is an invalid Number string
    ✓ '1'

    ✓ '0'

    ✓ '-1'

    ✓ '1.1'

    ✓ '0.1'

    ✓ '.1'

    ✓ '-.1'


  Not a string
    ✓ 1

    ✓ true

    ✓ null

    ✓ !<tag:yaml.org,2002:js/undefined> ''

    ✓ !<tag:yaml.org,2002:js/function> 'function () { }'

    ✓ 2020-01-07T18:24:03.053Z
```
add isoWeekOfYear plugin
**Describe the bug**
In IE, when the dayjs object is generated by Date object, the formatted string of milli seconds show '000' always.
Please see this JSFiddle.
(https://jsfiddle.net/7jrdo1bz/)

It seems be correct behavior when dayjs object is generated by unix milliseconds.
(like: dayjs(1575441029123))

**Expected behavior**
Show correct milli seconds.

**Information**
 - Day.js Version v1.8.15
 - OS: Windows 10.
 - Browser Internet Exploler 11(KB4530677)
 - Time zone: GMT+09:00

Introducing GitHub Action which statically analyzes tests and provides a brief summary:

* Tests added by this Pull Request
* Tests removed by this Pull Request
* Tests skipped by this Pull Request
* Adds label 'has tests' if PR contains tests
* Fails when found `.only` exclusive tests

Read more about it here: https://github.com/testomatio/check-tests

### Sample Report

See it live: https://github.com/DavertMik/dayjs/pull/1#issuecomment-568574989

This report was generated by github action in my fork
Here is a sample comment that will be posted to pull requests :point_down: 

---

🌀 Tests overview by [Testomatio](https://testomat.io)


Found **61** jest tests in 40 files 
No new tests added or removed

<details>
  <summary>📑 List all tests</summary>

---


📝 [test/comparison.test.js](https://github.com/DavertMik/dayjs/tree/c7fb50d608bad8c849deadc770bb3291ad4882b8/test/comparison.test.js)
* `is same without units`
* `is same year`
* `is same month`
* `is same day`
* `is same hour`
* `is same minute`
* `is same second`
* `is same millisecond`
* `is same with invalid moments`
* `is after year`
* `is after month`
* `is after day`
* `is after hour`
* `is after minute`
* `is after second`
* `is after millisecond`
* `is after without units`
* `is after invalid`
* `is after without units`
* `is before year`
* `is before month`
* `is before day`
* `is before hour`
* `is before minute`
* `is before second`
* `is before millisecond`
* `is before invalid`

📝 [test/plugin/isBetween.test.js](https://github.com/DavertMik/dayjs/tree/c7fb50d608bad8c849deadc770bb3291ad4882b8/test/plugin/isBetween.test.js)
* `bounds can be swapped`
* `bounds can be swapped with inclusivity`
* `is between without units`
* `is between year`
* `is between month`
* `is between day`
* `is between hour`
* `is between minute`
* `is between second`
* `is between millisecond`
* `is between without units inclusivity`
* `is between milliseconds inclusivity`

📝 [test/plugin/isSameOrAfter.test.js](https://github.com/DavertMik/dayjs/tree/c7fb50d608bad8c849deadc770bb3291ad4882b8/test/plugin/isSameOrAfter.test.js)
* `is same or after year`
* `is same or after without units`
* `is same or after month`
* `is same or after day`
* `is same or after hour`
* `is same or after minute`
* `is same or after second`
* `is same or after millisecond`
* `is same or after with invalid moments`

📝 [test/plugin/isSameOrBefore.test.js](https://github.com/DavertMik/dayjs/tree/c7fb50d608bad8c849deadc770bb3291ad4882b8/test/plugin/isSameOrBefore.test.js)
* `is same or before without units`
* `is same or before year`
* `is same or before month`
* `is same or before day`
* `is same or before hour`
* `is same or before minute`
* `is same or before second`
* `is same or before millisecond`
* `is same with invalid moments`

📝 [test/plugin/utc-utcOffset.test.js](https://github.com/DavertMik/dayjs/tree/c7fb50d608bad8c849deadc770bb3291ad4882b8/test/plugin/utc-utcOffset.test.js)
* `UTC mode`
* `change hours when changing the utc offset in UTC mode`
* `utc costrustor`
* `utc startOf`

</details>


```
var now = dayjs(new Date('Sat Dec 21 2019 00:00:00 GMT+0100')).utc().utcOffset(240)
var birthday = dayjs('1999-12-21')
```

I have current UTC+1 in my node process.
So 2019-12-21 => in UTC : 2019-12-20 23:00:00 => offset +240 => 2019-12-21 3:00:00

1999-12-21 <=> 2019-12-21 3:00:00 => ouput 19.999663978494624 🤔  ????
(`now.diff(birthday, 'year', true)`)

Other test :
```
var now = dayjs('2019-12-21T00:00:00.000Z').utcOffset(5999000)
var birthday = dayjs('1999-12-21T00:00:00.000Z')

now.diff(birthday, 'year', true) => output: 8.97341696535245, so buggy
```
…not proceed.

"TypeError: Cannot read property '0' of null
    at node_modules\dayjs\plugin\customParseFormat.js:99:70
```
console.log(dayjs("2020-02-14").diff(dayjs("2020-02-01"), "month", true));
console.log(dayjs("2020-03-01").diff(dayjs("2020-02-14"), "month", true));
console.log(dayjs("2020-02-14").diff(dayjs("2020-02-01"), "month", true) + dayjs("2020-03-01").diff(dayjs("2020-02-14"), "month", true));
console.log(dayjs("2020-03-01").diff(dayjs("2020-02-01"), "month", true));
```

The result is the following:
```
0.41935483870967744
0.5517241379310345
0.971078976640712
1
```

I have tried with different time units, including adding time and timezone, but no change in the behavior. Other months produce different results, looks like only January and July has it correct.

Chrome 78, Windows 10 if it matters.