### Describe the change
Allow Pastel::Detached objects to be given as colors.

### Why are we doing this?
Allows for more coloring options.

### Benefits

### Drawbacks
None that I am aware of.

### Requirements
Put an X between brackets on each line if you have done the item:
[] Tests written & passing locally?
[] Code style checked?
[X] Rebased with `master` branch?
[] Documentation updated?

### Describe the problem
This goal of this ticket is to make it possible to give a `Pastel::Detached` instance as `help_color` argument to `TTY::Prompt#new`. This would make sense since Pastel is used anyway and it would allow for more options.

### Steps to reproduce the problem
```
irb(main):001:0> require 'tty-prompt'
=> true
irb(main):002:0> require 'pastel'               
=> false
irb(main):003:0> pastel = Pastel.new
=> #<Pastel @styles=[]>
irb(main):004:0> fancy_color = pastel.cyan.on_white.underline.detach
=> #<Pastel::Detached styles=[:cyan, :on_white, :underline]>
irb(main):005:0> prompt = TTY::Prompt.new(help_color: fancy_color)
=> #<TTY::Prompt: {:input=>#<IO:<STDIN>>, :output=>#<IO:<STDOUT>>, :prefix=>"", :active_color=>:green, :error_color=>:red, :enabled_color=>nil, :help_color=>#<Pastel::Detached styles=[:cyan, :on_white, :underline]>}
irb(main):006:0> prompt.select('Whats ya eatin?', %i[hamburger fries salad])
Traceback (most recent call last):
       16: from /usr/local/bundle/gems/tty-prompt-0.20.0/lib/tty/prompt/list.rb:404:in `render'
       15: from /usr/local/bundle/gems/tty-prompt-0.20.0/lib/tty/prompt/list.rb:455:in `render_question'
       14: from /usr/local/bundle/gems/tty-prompt-0.20.0/lib/tty/prompt/list.rb:491:in `render_header'
       13: from /usr/local/lib/ruby/2.6.0/forwardable.rb:230:in `decorate'
       12: from /usr/local/lib/ruby/2.6.0/forwardable.rb:230:in `decorate'
       11: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:60:in `decorate'
       10: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:140:in `lookup'
        9: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:140:in `fetch'
        8: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:141:in `block in lookup'
        7: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:153:in `code'
        6: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:153:in `each'
        5: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:158:in `block in code'
        4: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:236:in `validate'
        3: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:195:in `valid?'
        2: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:195:in `all?'
        1: from /usr/local/bundle/gems/pastel-0.7.3/lib/pastel/color.rb:195:in `block in valid?'
NoMethodError (undefined method `to_sym' for #<Pastel::Detached styles=[:cyan, :on_white, :underline]>)
Did you mean?  to_s
```

### Actual behaviour
Only instance of Symbol or responding to `to_sym` is allowed.

### Expected behaviour
I hoped an instance of `Pastel::Detached` would also work.

### Describe your environment
* OS version: `Ubuntu 18.04.3 LTS`
* Ruby version: `ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]` (in docker, `FROM ruby:2.6.5`)
* TTY version:
```
gem list tty

*** LOCAL GEMS ***

tty-color (0.5.0)
tty-cursor (0.7.0)
tty-prompt (0.20.0)
tty-reader (0.7.0)
tty-screen (0.7.0)```
### Describe the problem
The default help_color given to the Prompt constructor is used for `select`, but not for `multi_select`. On a first glance the intention was for `multi_select` to use this color, as 

### Steps to reproduce the problem
```
irb(main):001:0> require 'tty-prompt'
=> true
irb(main):002:0> @prompt = TTY::Prompt.new(help_color: :cyan)
=> #<TTY::Prompt: {:input=>#<IO:<STDIN>>, :output=>#<IO:<STDOUT>>, :prefix=>"", :active_color=>:green, :error_color=>:red, :enabled_color=>nil, :help_color=>:cyan}
irb(main):003:0> @prompt.select('Which option?', %i[first second third])
Which option? first
=> :first
irb(main):004:0> @prompt.multi_select('Which options?', %i[first second third])
Which options? first
=> [:first]
```

### Actual behaviour
`select` uses help_color configured, while `multi_select` always shows dark gray.

### Expected behaviour
The expected behaviour is for both classes to use `help_color`. I expect this, because `MultiList#render_header` seems to `decorate` based on inherited  `@help_color`.

### Describe your environment
* OS version: `Ubuntu 18.04.3 LTS`
* Ruby version: `ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-linux]` (in docker, `FROM ruby:2.6.5`)
* TTY version:
```
gem list tty

*** LOCAL GEMS ***

tty-color (0.5.0)
tty-cursor (0.7.0)
tty-prompt (0.20.0)
tty-reader (0.7.0)
tty-screen (0.7.0)```


### Describe the problem
tty don't read cyrillic symbols
P.S. i start program in standard cmd

### Steps to reproduce the problem
```ruby
require 'tty-prompt'

prompt = TTY::Prompt.new

name = prompt.ask('Введите имя?')

puts "Ваше имя: #{name}"
```

### Actual behaviour
i write word `Тест` and press `Enter`
what i see
![Wrong word](https://i.ibb.co/nD1JfFG/2019-10-12-204408.png)

### Expected behaviour
i expect see word `Тест` instead of `??aa`

### Describe your environment

* OS version: Windows 7 SP1 x64 
* Ruby version: 2.6.5
* TTY version: 0.19.0

### Describe the change

Hi Piotr, loving the libraries! I wanted a way to make a menu system using `Prompt#select` without it leaving the 'breadcrumb trail' of all the previous selections. For example, before:

```
$ # https://gist.github.com/slowbro/c4c1fbb9f972117079a117ea5d19dc17
$ ruby ./example.rb 
Really Cool Menu Coolness Status
Coolness Status Back
Really Cool Menu Manage Coolness
Coolness is at 0.
Manage Add coolness
Coolness is at 1.
Manage Add coolness
Coolness is at 2.
Manage 
  1. Add coolness
  2. Back
_ 3. Exit

```

It's a little hard to see what's going on (and all the terminal recording software I tried did not like all the line-clearing..) - but every time a line-item is selected, a new 'breadcrumb' is added - i.e. at the root, "Really Cool Menu", upon selecting "Coolness Status", a line is left behind: "Really Cool Menu Coolness Status"

Compare that to the version with `:quiet`:

```
$ # https://gist.github.com/slowbro/8517a8e04c41719edcee821f823d351c
$ ruby ./example-quiet.rb                                                                                                                                                                            
Coolness is at 2.
Manage 
  1. Add coolness
  2. Back
_ 3. Exit
```

I did the same exact keystrokes - into status, back, into manage, add twice. But the output is a lot cleaner!

This also applies to a number of other classes:

- slider
- question (and derivatives)
- enum_list
- expander
- mask
- yes

I hope this is a desirable change!

Other minor changes:
- Added vim modeline to lib/*
- Updated some confusing/broken docs
- misc formatting fixes

### Why are we doing this?
I really want to be able to have a clean menu system using tty-prompt :)

### Benefits
Broader customization will expand usage possibility.

### Drawbacks
None that I can see - It's a new feature that should not overlap with anything.

### Requirements
Put an X between brackets on each line if you have done the item:
[x] Tests written & passing locally?
[x] Code style checked?
[x] Rebased with `master` branch?
[x] Documentaion updated?

The hardware cursor is not moved to the focussed option in select and multi_select, which causes problems in software such as terminal screenreaders for the blind.

```
require 'tty'
p=TTY::Prompt.new
p.select("Choice?", %w(First Second Third))
```

Search source for a matching input and display matching list as characters are entered.
