I can't get the Commands work for the `CaseApp.parse[T]` method. The compiler can't find the implicit Parser. 

What am I missing?

```
import caseapp._

sealed trait DemoCommand
case class First() extends DemoCommand
case class Second() extends DemoCommand

object MyApp extends App{
  CaseApp.parse[DemoCommand](List())
}
```

**could not find implicit value for evidence parameter of type caseapp.core.parser.Parser[DemoCommand]**

We need to access the default value of each arg of a CaseApp. with version 1.2.0, we used to do something like:
```
val caseApp:  CaseApp[T] = ???
for (arg <- app.parser.args) {
arg.defaultDescription
}
```
In version 2.0.0-M3, `defaultDescription` seems removed, are there any alternative way to do that please?

If you run following example without providing any arguments, app exits with zero exit code without help/usage

```scala
sealed trait DemoCommand
case class First(foo: Int, bar: String) extends DemoCommand
case class Second(baz: Double) extends DemoCommand

object MyApp extends CommandApp[DemoCommand] {
  def run(command: DemoCommand, args: RemainingArgs): Unit = {}
}
```
```scala
case class Options(length: Option[Int] = Some(10),
                   interval: Option[Int] = Some(3),
                   parallelRequests: Option[Int] = Some(4096))


import caseapp._

val options = CaseApp.parse[Options](args)

```

This gives a compile time error: `No implicits found for parameter eveidence$1: Parser[Options]`

<img width="615" alt="Screenshot 2019-07-05 at 11 33 11 AM" src="https://user-images.githubusercontent.com/3396271/60701234-bb2f9500-9f18-11e9-9eec-c731a08cca24.png">



With version 1.2.0, it seems that `defaultDescription` are always set to `None`

Here is a small example to reproduce the bug : https://scastie.scala-lang.org/YgickCTpTkWDK7xpoVTOJw

```
Arg(i,List(Name(i)),None,None,false,false,int,None)
Arg(s,List(Name(s)),None,None,false,false,string,None)
Arg(b,List(Name(b)),None,None,false,true,bool,None)
Arg(li,List(Name(li)),None,None,false,false,int*,None)
```

And it works with version 1.2.0-M2

```
Arg(i,List(Name(i)),None,None,false,false,int,Some(2))
Arg(s,List(Name(s)),None,None,false,false,string,Some("defaultt"))
Arg(b,List(Name(b)),None,None,false,true,bool,Some(false))
Arg(li,List(Name(li)),None,None,false,false,int*,Some(List()))
```
Hi

I'm trying to abstract over parsing arguments and preparing general class skeleton, but this code does not compile and it shows implicits missing:

```
import caseapp._
import caseapp.core.help.Help

case class Arguments(foo: Int, bar: String)

object MyApp extends AbstractApp[Arguments] {
  run[Arguments]()
}

trait AbstractApp[T] extends App {
  def run[T: Parser: Help]() = {
    val parsedArgs = CaseApp.parse[T](args)
    println(parsedArgs)
  }
}
```

How can I make this work?


Also where does those implicits come from when used in just a single file?
It seems that caseapp can't find annotations on commands.

When running the following command in sbt:
```
sbt:case-app-root> testsJVM/test:runMain caseapp.demo.CommandAppTest --help
```

I expect to see:

```
Demo
Usage: demo-cli [options] [command] [command-options]

Available commands: first, second

Type  demo-cli command --help  for help on an individual command
```

Actual result:

```
None.type
Usage: none.type [options] [command] [command-options]

Available commands: first, second

Type  none.type command --help  for help on an individual command
```

I have the following common options

```scala
case class CommonOptions(
    prod: Boolean = false,
    dry: Boolean = false,
    @Recurse slack: SlackOptions
)
```

with slack options defined with

```scala
case class SlackOptions(
    slackToken: Option[String],
    slackChannel: Option[String]
)
```

I would like to be able to define my case class like this

```scala
case class SlackOptions(
    token: Option[String],
    channel: Option[String]
)
```

But I want to keep context informations when I use command line
```sh
--slack-token=... --slack-channel=...
```

It should be great to have one annotation "@PrefixRecurse" (or similar) that uses the name used in parent in command line

```sh
--slack.token=... --slack.channel=...
```

Maybe do you have some tricks to do that? Using "ExtraName" is for the moment the best solution I found but I will have conflict If I have same keys in different context

```scala
case class SlackOptions(
    @ExtraName("slack-token")
    token: Option[String],
    @ExtraName("slack-channel")
    channel: Option[String]
)
```
It would be great if a bash autocompletion string could be generated from the options adt. It could then be called by an sbt task that drops it in the target folder to be included by in a native packager. In the Rust world, Clap has this built in: https://github.com/kbknapp/clap-rs/blob/ebe14558e65e961f4340e2e74ec4eaa5f566e440/src/completions/bash.rs#L1