The RStudio Rproj defaults reinforce bad workspace developing habits, which have been discussed in the community quite a lot. 

<img width="650" alt="Screen Shot 2020-01-10 at 8 11 48 AM" src="https://user-images.githubusercontent.com/1755487/72155424-1edfc280-3381-11ea-8c4c-6157f35de75c.png">

Can you please change the defaults to the following?

<img width="630" alt="Screen Shot 2020-01-10 at 8 14 48 AM" src="https://user-images.githubusercontent.com/1755487/72155511-4b93da00-3381-11ea-8896-a6fb0a640072.png">


It would make more sense to have a temp yaml for config, launched at runtime, and completed with the opts of with_golem_options(), so that the usage of both is consistent
Good morning, I'm having trouble incorporating an auth0 authentication package in Golem. It is possible ?
Right now rsconnect is a hard dependency, while it should be a Suggests, and check if installed when using the RStudio deploy scripts
We should refactor this part:

``` r 
usethis::use_mit_license( name = "Golem User" )  # You can set another license here
usethis::use_readme_rmd( open = FALSE )
usethis::use_code_of_conduct()
usethis::use_lifecycle_badge( "Experimental" )

usethis::use_news_md( open = FALSE )
usethis::use_git()
```

Into one function

Creates : 

- the dockerfile + the tar.gz
- deployment yaml 
- service yaml
I created a golem app and tested the deployment on shinyapp.io where it worked smoothly.

Then I created a docker file and tried to deploy it but for some reason it told me `run_app` wasn't an exported function.

This was fixed by replacing in the docker file `mypkg::run_app()` by `mypkg:::run_app()` (adding third `:`).

This is puzzling to me as the "#' @export" line is definitely there (I didn't tweak the boilerplate), and again, this works locally and on shinyapps.io.

Then I ran into issues because my datasets were not recognized, this could be solved by replacing the last line of the docker file by : 

    CMD R -e 'data(dataset1,package = "mypkg");data(dataset2,package = "mypkg");options("shiny.port"=80,shiny.host="0.0.0.0");mypkg:::run_app()'

This kind of namespace issues happened to me in the past when passing in my package expressions to functions from other packages that would use NSE.

Finally a simple solution could solve all at once, just add a library call to attach my package.

    CMD R -e 'library(mypkg);run_app()'
`golem::add_dockerfile()` adds a line of code to `.Rbuildignore` but it uses backslashes which makes `devtools::build()` crash. In my case the line is `^C:\R\00 packages\kpiFRA/DESCRIPTION$` and `devtools::build()` 's error is :

```
devtools::build()
√  checking for file 'C:\R\00 packages\kpiFRA/DESCRIPTION' (546ms)
-  preparing 'kpiFRA': (884ms)
√  checking DESCRIPTION meta-information ... 
   Warning in grepl(e, files, perl = TRUE, ignore.case = TRUE) :
     PCRE pattern compilation error
   	'\k is not followed by a braced, angle-bracketed, or quoted name'
   	at 'kpiFRA/Dockerfile$'
   Error in grepl(e, files, perl = TRUE, ignore.case = TRUE) : 
     invalid regular expression '^C:\R\00 packages\kpiFRA/Dockerfile$'
   Execution halted
Error in (function (command = NULL, args = character(), error_on_status = TRUE,  : 
  System command error
```

It might be `devtools::build()` 's fault, but this is solved by changing the backward slashes to forward slashes so maybe it'd be more robust for you to write forward slashes by default ?
First thanks a lot for this package, I think it boosts my learning curve significantly, and gives me confidence that I'm doing things right or not too wrong.

`rsconnect::deployApp()` is not happy because I have big files, it tells me : 

> Error in bundleFiles(appDir) : 
>  The directory C:\R\00 packages\kpiFRA cannot be deployed because it is too large (the maximum size is 3145728000 bytes). Remove some files or adjust the rsconnect.max.bundle.size option.

The same as what the rstudio blue icon tells me.

I indeed have big files (several gigabytes), that constitute my raw input, and that are referenced in .Rbuildignore and .gitignore, would it be acceptable/feasible to make `deployApp()` ignore those files too ? This could be done by providing booleans arguments not to deploy what matches `.gitignore` or `.Rbuildignore`, or by providing a custom specification, or by having a dedicated configuration file.

The alternative is that I move those to a new folder (and in the future that I do my data prep in a different project), which I did but I think the idea of working in a single project is compelling and that spoils it a bit. Moreover the presence of `usethis::use_data_raw()` in your boilerplate seems to indicate that you're not opposed to the idea of doing the data prep in the same project. What do you think ?



Dockerfile fails at :
```
Step 9/16 : RUN Rscript -e 'remotes::install_github("thinkr-open/golem@3a878f0632701a6737e7c3b953dc1b1892004ec0")'
 ---> Running in dde7268cdbcd
Downloading GitHub repo thinkr-open/golem@3a878f0632701a6737e7c3b953dc1b1892004ec0
Error in vapply(remote, function(x) remote_sha(x), character(1)) :
  values must be length 1,
 but FUN(X[[46]]) result is length 110
Calls: <Anonymous> ... dev_package_deps -> combine_deps -> nrow -> package_deps -> vapply
Execution halted
The command '/bin/sh -c Rscript -e 'remotes::install_github("thinkr-open/golem@3a878f0632701a6737e7c3b953dc1b1892004ec0")'' returned a non-zero code: 1
```