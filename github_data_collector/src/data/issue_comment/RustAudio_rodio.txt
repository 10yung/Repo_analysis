hello

I am trying to figure out how to increase the volume without decreasing the quality of the audio.

I've found that increasing it beyond 1.3x and 1.4x adds little crackles to the base, at least on my built in external speakers.

Is there any way to prevent this, or is it not really possible.

Thanks.
We should consider switching to a pure-rust mp3 decoder.

There seem to be two alternatives, puremp3 and sonata:

* https://github.com/pdeljanov/Sonata
* https://github.com/Herschel/puremp3

We should study their quality as well as their speed to find out whether adoption is feasible.
When playing a mono ogg file that is a different sample rate than your output device's through `ChannelVolume` the audio switches between the left and right channels.  (I think it has to do with compression because it usually happens on the beat of a song)

I've narrowed the issue down to `SampleRateConverter`'s [Iterator.next() function](https://github.com/RustAudio/rodio/blob/e5474a2ef15f2d0a3bae2538de159b6d3e5bdf79/src/conversions/sample_rate.rs#L123), but I don't know much about converting sample rate so I'm lost as to where the problem actually is.

This issue could be related to the lower level decoding library `lewton`, but since the ogg plays perfectly fine when the sample rates match, I think it's related to `SampleRateConverter` in rodio.

I found this issue when using Windows 10 with my output sample rate set to 48000 in the sound settings.  I was trying to play a 44100 Hz sound through the `SpatialSink`, which in turn uses `ChannelVolume`.

Here's a minimal repro-repo: https://github.com/SpiralP/rust-rodio-samplerate-bug

Thanks!
Hello,
I'm just getting started with Rust for Audio manipulation.  Very happy I found **rodio!** Lots of frameworks already in place and support for different media.

My goal is to implement **crossfading** between two sources. This operation seems common enough to include in the library.

Client code will be responsible for chaining clips:
  ```[sound A] -> [Crossfade: end of sound A & start of sound B] -> [middle of sound B] -> ...```

`Crossfade` crates a mix of the existing filter `FadeIn`, and a new filter `FadeOut`. 
Based on the previous pull request for `FadeOut` (#217), I decided to add the filter to a structure that already knows the remaining and total duration: `TakeDuration`.

I couldn't find a clean way to add a slot in `TakeDuration` (to accept user-created filters), so instead the `FadeOut` is baked-in. Not sure how this may effect existing `TakeDuration` usage. 

Please let me know if you have any concerns or suggestions.
Reworks to use cpal with the event loop removed https://github.com/RustAudio/cpal/pull/301.

The upstream work isn't finished, but I thought I'd raise this anyway as I wrote the code to investigate https://github.com/RustAudio/cpal/issues/322.
The decoder seems not working with audio files generated by youtubedl and ffmpeg.
Here's a minimal repro
1. Run
```Bash
youtube-dl ytsearch1:okay --extract-audio --audio-format mp3 --output music.mp3
``` 
2. Build and run
```Rust
use rodio::Sink;
use std::io::BufReader;

fn main() {
    let device = rodio::default_output_device().unwrap();
    let sink = Sink::new(&device);
    let file = std::fs::File::open("music.mp3").unwrap();
    sink.append(rodio::Decoder::new(BufReader::new(file)).unwrap());
    sink.sleep_until_end();
}
```
**Output** 
```
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: UnrecognizedFormat', src/libcore/result.rs:999:5
note: Run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```
This is the same case for .wav files too.
The audio files works perfectly with other players.
It's done in games like Geometry Dash. In GD, the orbs get bigger if the music gets louder as a visual effect. I want to do something similar to that.

This isn't the `volume` method, since that just gets a multiplier that we multiply with the samples to make it louder/quieter. I want the actual, current volume that the person hears.
Can we please specify the platforms (OS) which rodio supports? Are all platforms supported by `cpal` (Windows, Linux, macOS, iOS, Emscripten) supported by rodio? If so, I think it should be mentioned somewhere. Currently, I don't see the list in the documentation.

Thanks.
Hi,
I would like to get tags of the FLAC file I'm reading.
Claxon FlacReader has a method for that.
https://docs.rs/claxon/0.4.2/claxon/struct.FlacReader.html#method.tags

However, I cannot find a way in rodio to access the DecoderImpl (here FlacDecoder) to get the `reader` property
https://github.com/tomaka/rodio/blob/master/src/decoder/flac.rs#L14

Is it possible with the current code base? Or is it require some visibility changes?

Thanks
I'm in the process of writing a player that gets it's audio data from HTTP requests and would like to do so using rodio. The documentation only mentions playing audio files directly, not arbitrary audio data. Does this crate support this functionality?