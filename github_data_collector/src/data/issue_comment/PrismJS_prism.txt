This adds a new "language" to Prism which provides functions to create and modify patterns.

<details>
<summary>
<strong>Motivation:</strong>
</summary>

It's very simple to create languages with Prism, but we provide nothing at all which can be used to extract common pattern parts into variables or to create more complex patterns from simpler ones. So what I usually do and advise other people to do is [this](https://github.com/PrismJS/prism/blob/81e1c3ddadda5451fb5b9743c5201b7452d1ae3e/components/prism-sas.js#L96). Not pretty, robust or scalable but it gets the job done.

After I redid #1444, I wanted a standardized way for pattern templates (or whatever you want to call [that](https://github.com/PrismJS/prism/blob/0a0e0158ae45d89fe4fb9ddd4bbe24f84632f89b/components/prism-csharp.js#L13)). The implementation there is fast and simple because it only does string replacements, so it has a few downsides: The first is that it doesn't check flags, so it's very easy to get flags wrong which is really hard to debug. The second big downside is that it can't deal with backreferences which is quite a big limitation.

So what I wanted was a way to have pattern templates that are easy to debug and support backreference. And because I use it quite [often](https://github.com/PrismJS/prism/blob/81e1c3ddadda5451fb5b9743c5201b7452d1ae3e/components/prism-qml.js#L10), I also wanted a way to create nested patterns.

</details>

__Description:__

Before I describe the new function, I will explain 2 important interfaces: _Flags_ and _Pattern_.

A _flags_ object is an immutable object like so: `{ g?: boolean, i?: boolean, m?: boolean, ...remainingFlags >`. It's a map from each flag to an optional boolean which can be either `true` (== the flag is required in the final RegExp), `false` (== the flag is forbidden in the final RegExp), or `undefined` (== it may be present or not in the final RegExp, doesn't matter).

A _pattern_ is an immutable object like so: `{ source: string, flags: Flags }`. It represents a lightweight version of a RegExp.

With that out of the way: 4 functions are exported from `Prism.languages.patterns`:

1. `pattern(source: string, flags?: Flags): Pattern`
    This function takes the source of a RegExp and optionally flags and returns a new _pattern_. This is just a convenience function to create patterns.
2. `toRegExp(pattern: string | Pattern): RegExp`
    Takes a given pattern or string and converts it to a new RegExp object.
3. `template(pattern: string | Pattern, replacements: (string | Pattern)[]): Pattern`
    The templating function. More details below.
4. `nested(pattern: string | Pattern, depth: number): Pattern`
    The function to created nested patterns where the placeholder `<<self>>` will be recursively replaced with the pattern itself up to a certain depth.

Note: Strings and _patterns_ can be used interchangeably. A string will be assumed to be a _pattern_ without flags.

The `template` function is the heart of this PR. It will handle capturing groups and backreferences in the template pattern and its replacements. It will also check that all patterns are valid regular expressions and that the flags of all patterns are compatible. Example:

```js
var typeKeyword = pattern(/\b(?:class|enum|interface)\b/.source, { i: false });
var string = /(["'])(?:\\.|(?!\1)[^\\])*\1/.source;
template(/(<<0>>\s+)(?:[A-Z]\w*|<<1>>)/.source, [typeKeyword, string])
```

To make the minified version as small and as fast as possible I added support for the compilation constant `Prism.MIN` which will be `true` in minified files and `false` (or rather `undefined`) otherwise. 
This allowed me to remove all checks from the minified version so only the development version throws errors. The minified version will assume that everything works with just 1.2kB.

__Points for discussion:__

All in all, I'm very happy with the result and would really like to see as a part of Prism but there are a few points which I'm unsure about and would like to discuss:

1. The placeholder pattern. Right now I use `<<\d+>>` because it's just text from the RegExp's point of view (it doesn't use any special RegExp characters) and because easy to read. You can easily make out placeholders even in long and complex patterns.
    That being said, I'm not very attached to this and maybe the simpler pattern `<\d+>` would be better? Idk.
2. I restricted `template` to use arrays as the replacements map while the underlying implementation can work with anything that's indexable. I placed this restriction so that people have to use short placeholders instead of using (relatively) long names.
    But maybe that's better for readability? I mean, [this thing](https://github.com/PrismJS/prism/blob/81e1c3ddadda5451fb5b9743c5201b7452d1ae3e/components/prism-zig.js#L68) is pretty readable.
3. Maybe instead of a function, `pattern` should be a class and `toRegExp` should be an instance method. Just an idea I had while implementing this. It's basically an object-oriented vs. functional programming style.
4. Since I could put the test for this in any existing category, I made a new one and called it `lib`. I'm thinking about merging this with `core` but I'm unsure what the best course of action will be, so suggestions are very welcome.
I am building my first NextJS blog. But I can't get Prismjs to work for me. I am using Typescript... just incase this matters.

I installed the npm package and the types from npmjs. 

I installed the babel-plugin-prismjs. 

I created a .babelrc file that looks like this:

```
{
  "presets": ["next/babel"],
  "plugins": [
    [
      "prismjs",
      {
        "languages": ["javascript", "css", "jsx", "tsx"],
        "plugins": ["line-numbers"],
        "theme": "twilight",
        "css": true
      }
    ]
  ]
}
```

In my component, I wrote this:

```
import React, { useEffect, useRef } from 'react'
import Prism from 'prismjs'

const Code = () => {
  const codeBlockRef = useRef<HTMLDivElement | null>(null)

  useEffect(() => {
    if (typeof document !== undefined && codeBlockRef.current !== null) {
      Prism.highlightAllUnder(codeBlockRef.current)
    }
  }, [])

  return (
    <>
      <div ref={codeBlockRef}>
        <pre className="language-javascript">
          <code className="language-javascript">alert(it works!)</code>
        </pre>
      </div>
    </>
  )
}

export default Code
```

And I keep getting these errors:

```
./node_modules/prismjs/themes/prism-twilight.css 6:10
Module parse failed: Unexpected token (6:10)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
|  * @author Remy Bach
|  */
> code[class*="language-"],
| pre[class*="language-"] {
| 	color: white;
```

When I set css to false in the babelrc file, it works but then none of the styles show, defeating the purpose.

All of my research has not pointed me to making any webpack changes.

Thanks for any help!
Java 14 ships with [JEP 359], which defines a new keyword `record`.

[JEP 359]: https://openjdk.java.net/jeps/359
This addresses [this](https://github.com/PrismJS/prism/pull/1957#discussion_r367417493) comment.
I created a new `assets` directory for files that are exclusively used by our website, not including the top `.html` files. It combines `img/`, `scripts/`, `templates/`, `style.css`, `favicon.png`, and `logo.svg` into one directory.

The new structure also makes identifying web files easier simplifying some ignore patterns.

---

@mAAdhaTTah If you think it's too much or unnecessary, close it. I just wanted to put it out there.
Two minor improvements for the Coy theme:

1. It now consistently uses `[class*="language-"]`.
2. Removed the `:not(pre) > code[class*="language-"]:after` selector because `code` element don't have an after pseudo-element.
**Motivation**
We have many themes that are basically invisible to users. Let's change that!

**Description**
Make it possible to select themes from [Prism themes](https://github.com/PrismJS/prism-themes) at the very least on the download page. Ideally, visitors of [prismjs.com](https://prismjs.com/) can select themes from Prism themes like any other theme but this will likely necessitate an overhaul of the current theme selector.
**Language**
"[Stan](https://mc-stan.org/) is a probabilistic programming language for statistical inference written in C++" - [Wikipedia](https://en.wikipedia.org/wiki/Stan_(software)). The Stan language is used to specify probabilistic models which get transpiled to C++ by the Stan compiler. The syntax is informed by the corresponding mathematical notation and by C++.

**Additional resources**
[Language reference](https://mc-stan.org/docs/2_21/reference-manual/index.html)
[Home page](https://mc-stan.org/)
[Stan user guide](https://mc-stan.org/docs/2_21/stan-users-guide/index.html) - lots of code examples
[Stan support in highlight.js](https://github.com/highlightjs/highlight.js/blob/master/src/languages/stan.js) - in case it's helpful to refer to.
This removes temporary arrays in `Token.stringify`.

All these changes make `Prism.highlight` about 23% faster.

<details><summary>Benchmark</summary>

```
Found 6 cases with 13 files in total.
Test 2 candidates on highlight
Estimated duration: 4m 20s

------------------------------------------------------------

css

  ../../style.css (7 kB)
  | local              2.29ms ±  0%  171smp      
  | PrismJS@master     2.60ms ±  0%  174smp 1.13x

------------------------------------------------------------

css!+css-extras (css)

  ../../style.css (7 kB)
  | local              3.42ms ±  0%  164smp      
  | PrismJS@master     3.95ms ±  0%  161smp 1.16x

------------------------------------------------------------

javascript

  ../../components.json (24 kB)
  | local              8.50ms ±  1%  141smp      
  | PrismJS@master     9.23ms ±  0%  148smp 1.09x
  ../../package-lock.json (184 kB)
  | local             68.22ms ± 22%   71smp      
  | PrismJS@master   131.92ms ± 37%   33smp 1.93x
  ../../scripts/utopia.js (11 kB)
  | local              3.77ms ±  1%  159smp      
  | PrismJS@master     4.29ms ±  1%  159smp 1.14x
  prism.js (24 kB)
  | local              7.94ms ±  1%  151smp      
  | PrismJS@master     8.95ms ±  0%  153smp 1.13x
  prism.min.js (13 kB)
  | local              5.96ms ±  1%  161smp      
  | PrismJS@master     6.75ms ±  1%  158smp 1.13x

------------------------------------------------------------

json

  ../../components.json (24 kB)
  | local              7.78ms ±  1%  153smp      
  | PrismJS@master     9.37ms ±  1%  147smp 1.20x
  ../../package-lock.json (184 kB)
  | local             63.43ms ± 10%   76smp      
  | PrismJS@master   149.01ms ± 44%   27smp 2.35x

------------------------------------------------------------

markup

  ../../download.html (4 kB)
  | local              1.18ms ±  0%  179smp      
  | PrismJS@master     1.40ms ±  0%  173smp 1.18x
  ../../index.html (18 kB)
  | local              6.18ms ±  1%  155smp      
  | PrismJS@master     7.14ms ±  1%  149smp 1.16x

------------------------------------------------------------

markup!+css+javascript (markup)

  ../../download.html (4 kB)
  | local              1.88ms ±  1%  168smp      
  | PrismJS@master     2.15ms ±  1%  169smp 1.14x
  ../../index.html (18 kB)
  | local              7.12ms ±  1%  149smp      
  | PrismJS@master     8.13ms ±  1%  147smp 1.14x

------------------------------------------------------------

summary
                  best  worst  avg rel  avg rel norm
  local             13      0    1.00x         1.00x
  PrismJS@master     0     13    1.30x         1.30x
```

</details>
As discussed [here](https://github.com/PrismJS/prism/issues/2164#issuecomment-572558797).

![image](https://user-images.githubusercontent.com/20878432/72074884-00cb8100-32f3-11ea-8ca5-55b3dd99099c.png)

---

I also quickly looked for other open theme issue but couldn't find any. If there are any I missed, please leave a comment.