Fixes #302, ping @re2bit.

When a use statement is found for a relative annotation class, it is always marked as found, which bypasses the ignored namespace check. However, if the class itself does not exist, an exception is thrown even though the namespace is ignored. This PR fixes that issue.
I used the
```
AnnotationReader::addGlobalIgnoredNamespace('JMS');
``` 
to ignore Serializer Annotations. I expected this to ignore Annotations imported via use Statement as well. 
I don't know if this is a Bug or intended Behaviour.

Example: https://github.com/re2bit/annotations/commit/34f5be4fddc2396d9a427166bf9b249d82fd1800

I didn't update the `Reader` interface since it would be a BC break to do so.
- `sudo:false` is deprecated and doens't do antying anymore
- `compsoer self-update` is already ran by travis anyways.
- dependencies (and this package) don't declare to be compatible with php 8.0. And most probably wont do so for a while, so this allows to still run tests against that version, instead of producing an error when trying to install the dependencies
As v2 isn't here yet, and looking at #232 it is unclear if it will be coming anytime soon, and as we have to put up with annoying deprecated functions, here I propose to fall back to the standard autoloader if nothing else worked, and if there's no custom loader defined.

Fixes #270

I intentionally did not add any tests as this is a PoC. Please tell me if this makes any sence, and then I'll make a try with tests.
I understand that the AnnotationRegistry is being deprecated and in version 2+ we should just rely on the Composer autoloader, which is awesome.

However, it seems that at least in version 1.6.1, you can't just use the autoloader, you still _must_ use the registry. I think it's wrong to mark the registry members as deprecated when no better alternative exists today. This causes a lot of confusion amongst users and makes downstream deprecation tests somewhat useless, since there's no way to get them to pass today.

I think that version 1.x should be changed to allow using the autoloader for folks that don't want to use the deprecated functions.
At the moment constant parsing doesn't read `self::` constants and I have a use case where that would be the most practical solution:
I would like to pass serialization groups for a property that's defined in a trait. Since not all entities will have the same serialization groups for the properties in the traits, the only currently available options that I see is to either repeat the property definition in each entity or repeat the groups serialization definition for each property and each entity in yaml/xml.

I would have created a PR instead of an issue for this, but from what I see in the DocParser class, the only way to get the original class name would be to parse the context string, which seems like a bad idea. I'm hoping that someone more familiar with the codebase could do it in a cleaner way. If there isn't a better way, please let me know and I'll make a PR.
### Bug Report

When an entity uses a trait that itself also uses a trait with a doctrine annotation the mapper failes to recognize the imported annotation. Code example below if it's not clear.

|    Q          |   A
|------------   | ------
| BC Break | no
| Version    | 1.6.1

#### How to reproduce

Create the following class and traits using doctrine/orm:

```php
// ClassA.php

use Doctrine\Orm\Mapping\Entity;

/**
 * @Entity
 */
class ClassA
{
    use TraitA;
}
```

```php
// TraitA.php

trait TraitA
{
    use TraitB;
}
```

```php
// TraitB.php

use Doctrine\ORM\Mapping\Column;

trait TraitB
{
    /**
     * @Column(name="column", type="string")
     */
    protected $column;
}
```

Trying to create a mapping for this setup will throw an `AnnotationException`:
```
[Semantical Error] The annotation "@Column" in property Search\Model\ClassA::$column was never imported. Did you maybe forget to add a "use" statement for this annotation?
```

This will fail on any Doctrine annotation that is used in `TraitB` but not imported in `TraitA` or `ClassA`.

I expect the `@Column`-annotation imported in `TraitB` to stay also be valid for `ClassA` where it ends up in.


The same as https://github.com/doctrine/annotations/pull/263 but for version 2.0.