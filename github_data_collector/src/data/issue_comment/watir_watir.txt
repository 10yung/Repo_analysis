this looks to fix #885, but unfortunately, i'm unsure of any wider-reaching impact of this change
## Meta -
Watir Version: 6.16.5
Selenium Version: 3.142.7
Browser Version: Chrome 79.0.3945.79 and FF 71.0
Browser Driver Version: Chromedriver 79.0.3945.36 and Geckodriver 0.26.0
OS Version: Linux Mint 19.1

## Expected Behavior -
executing multiple calls to different elements in a frame properly return the elements in the frame

## Actual Behavior -
when an element selector comes before the frame, the first call succeeds, but subsequent calls will fail

## Steps to reproduce -
This example behaves as expected
```
gem 'watir', "=6.16.5"
require 'watir'

browser = Watir::Browser.new :chrome # or :firefox
browser.goto 'https://jsfiddle.net/hx0tp3jg/'

browser.iframe(name: 'result').div(class: 'is-task_description').exists? # => true
browser.iframe(name: 'result').div(class: 'task-description').exists? # => true
```

This example reproduces the bug
```
gem 'watir', "=6.16.5"
require 'watir'

browser = Watir::Browser.new :chrome # or :firefox
browser.goto 'https://jsfiddle.net/hx0tp3jg/'

browser.div(class: 'resultsPanel').iframe(name: 'result').div(class: 'is-task_description').exists? # => true
browser.div(class: 'resultsPanel').iframe(name: 'result').div(class: 'task-description').exists? # => false
```
## Meta -
Watir Version: 6.16.5
Selenium Version: 3.141.0
Browser Version: Google Chrome 79.0.3945.88
Browser Driver Version: Chromedriver 79.0.3945.36
OS Version: Centos 7
Ruby Version: 2.5.5

## Expected Behavior -
```ruby
scroll_label = label_element(text: label)
wait_until(3, "Failed to find label #{label} to scroll into view") do
    scroll_label.present?
end

scroll_label.scroll_into_view
```

Should simply scroll to a given text label inside of a modal dialog.

## Actual Behavior -
Throws Watir::Exception::UnknownObjectException immediately when the scroll_into_view method is reached. Error message indicates a timeout of 30 seconds but this is incorrect as there was no wait time:
> element located, but timed out after 30 seconds, waiting for #<Watir::Label: located: true;{:text=>"Can Create Dashboards", :tag_name=>"label"}> to be present (Watir::Exception::UnknownObjectException)

I rolled back selenium-webdriver to 3.141.0 with recommendation from https://stackoverflow.com/questions/56445641/ruby-watir-selenium-webdriver-depricated-warning due to depreciation warnings after the upgrading to 16.5 but this did not rectify the issue (selenium was updated as well).

![Screen Shot 2020-01-02 at 2 13 30 PM](https://user-images.githubusercontent.com/30894202/71692588-ed0ea080-2d6f-11ea-91d0-d64295b7d28e.png)


Watir Version: 6.16.5

```
NoMethodError: undefined method `-' for nil:NilClass
	/var/lib/gems/2.6.0/gems/watir-6.16.5/lib/watir/wait/timer.rb:26:in `remaining_time'
	/var/lib/gems/2.6.0/gems/watir-6.16.5/lib/watir/elements/element.rb:803:in `rescue in element_call'
	/var/lib/gems/2.6.0/gems/watir-6.16.5/lib/watir/elements/element.rb:790:in `element_call'
	/var/lib/gems/2.6.0/gems/watir-6.16.5/lib/watir/elements/element.rb:1
```
## Meta -
Watir Version: 6.16.5
Selenium Version: 3.142.3
Browser Version: Chrome 76.0.3809.100
Browser Driver Version: Chromedriver 76.0.3809.126
OS Version: Windows 10

## Expected Behavior -

When using the adjacent methods, eg `#following_sibling`, to return an Input element, the more specific sub-class, eg `TextField` is returned.

## Actual Behavior -

The adjacent methods return a `Watir::Input`.

## Steps to reproduce -

Given the HTML:

~~~~~~~~
<html>
  <body>
    <label>something</label>
    <input type="text>
  </body>
</html>
~~~~~~~~

The following returns an `Input`, which prevents calling methods such as `#clear`:

~~~~~~~~
field = browser.label.following_sibling(tag_name: 'input')
#=> <Watir::Input: located: false; {:tag_name=>"label"} --> {:tag_name=>"input", :adjacent=>:following, :index=>0}>

field.clear
#=> NoMethodError: undefined method `clear' for #<Watir::Input:0x47e4610>
~~~~~~~~

This was originally reported on Stack Overflow (https://stackoverflow.com/q/57721289/1200545). The current solution is to manually call `#to_subtype`.

## Meta -
Watir Version: 6.16.5
Selenium Version: 3.142.3
Browser Version: Chrome 76
Browser Driver Version: 76.0.3809.68
OS Version: Windows 10

## Expected Behavior

Frame switching should be successful when the after hook attempts to interact with an element outside of the `iframe`. My use case is that I am using the `after_hooks` to wait while the page load spinner is present after clicking a link that launches a dialog with an `iframe`.

## Actual Behavior

Timeout occurs when I attempt to interact with an element inside the `iframe`. Here's the stack trace from the reproducible test script included below.

```
Traceback (most recent call last):
        2: from frame_wait.rb:24:in `<main>'
        1: from I:/Opt/Ruby/Ruby26-x64/lib/ruby/gems/2.6.0/gems/watir-6.16.5/lib/watir/wait.rb:125:in `wait_until'
I:/Opt/Ruby/Ruby26-x64/lib/ruby/gems/2.6.0/gems/watir-6.16.5/lib/watir/wait.rb:46:in `until': timed out after 30 seconds, waiting for true condition on #<Watir::D
iv: located: false; {:id=>"watir", :tag_name=>"iframe"} --> {:class=>"intro", :tag_name=>"div"}> (Watir::Wait::TimeoutError)
```

I have tracked down the cause to commit be1cd21ee2872642fc63b754801fc10e1e36917b. Frame switching is successful if I revert this commit.

## Steps to reproduce -

#### HTML

```html
# Save as frame_test.html

<html lang="en">
  <body>
    <h1 id="page_title">Page Title</h1>
    <iframe id="watir" src="http://watir.com" height="600px" width="600px"></iframe>
  </body>
</html>
```

#### Gemfile

```
gem 'webdrivers', '~> 4.1.0'
gem 'ffi' # On Windows
gem 'watir', '~> 6.16.0'
```

#### Test Script

```ruby
require 'webdrivers'
require 'watir'

@browser = Watir::Browser.new :chrome
heading_check     = proc { @heading_found = @browser.h1(id: 'page_title').present? }
@browser.after_hooks.add heading_check

# Navigate to test page
@browser.goto File.join('file://', File.expand_path('frame_test.html'))

# IFrame should be present
puts "IFrame found: #{@browser.iframe(id: 'watir').present?}"

# Look for Div inside iframe
puts "Div text: #{@browser.iframe(id: 'watir').div(class: 'intro').text}"

# Check for presence of heading element outside the iframe.
puts "Heading found: #{@heading_found}"

@browser.close
```

I have hosted this code in a repo here - https://github.com/kapoorlakshya/watir_iframe_switching_test
I am getting the **timeout error** with following on Ubuntu, though Chrome browser is starting.

```
2.4.1 :011 > require 'watir'
 => false 
2.4.1 :012 > 
2.4.1 :013 >   browser = Watir::Browser.new
Net::ReadTimeout: Net::ReadTimeout
	from (irb):13:in `new'
	from (irb):13
2.4.1 :014 > 
```

ChromeDriver started
```
$ chromedriver 
Starting ChromeDriver 75.0.3770.90 (a6dcaf7e3ec6f70a194cc25e8149475c6590e025-refs/branch-heads/3770@{#1003}) on port 9515
Only local connections are allowed.
Please protect ports used by ChromeDriver and related test frameworks to prevent access by malicious code.
```

Any idea?
Fixes #866 

Note that in the SelectorBuilder::XPath that :text and :contains_text are now the same - ie comparing to `normalize-space()`. From what I could see, there's no reason that they should ever be different. However, for now, to minimize changes, I have left them separate.
I'm using all the latest versions of Selenium, Watir, Linux.

Basically, I want to start the window maximized. So if I do things using the traditional Watir "opts" method, I get

`args = ['--start-maximized']`
`b = Watir::Browser.new :chrome, options: {args: args}, url: "http://localhost:4444/wd/hub"`

which doesn't work.

If I try this, however, everything works well:

`caps = Selenium::WebDriver::Remote::Capabilities.chrome("chromeOptions" => {"args" => [ "--start-maximized" ]})`
`b = Watir::Browser.new :chrome, :desired_capabilities => caps, url: "http://localhost:4444/wd/hub"`

but I get a warning:

> WARN Watir ["use_capabilities"] You can pass values directly into Watir::Browser opt without needing to use :desired_capabilities

It seems like Watir does not recognize when you want to start a Selenium Hub option and doesn't adjust the desired options appropriately.
## Meta -
Watir Version: 6.16.5
Selenium Version: 3.142.2 (Reproduced in v4 alpha2 as well)
Browser Version: Chrome 74.0.3729.131 (No error in IE 11)
Browser Driver Version: Chromedriver 74.0.3729.6
OS Version: Windows 10 Build 1709

**Note**: This may not be specific to `watir` and could be a `selenium-webdriver` issue. Posting this here after discussing with Titus to give him all the info he needs to decide where to fix this.

## Expected Behavior

A link nested inside an iframe should be clicked without errors when calling `#click!` on it. Calling `click` does not raise any errors.

Please put down your pitchforks :) - I know `click!` should not be used. This was in an old test running on IE 11 that we recently ran on Chrome and caught this error. The test has been updated to use `click` and it passes now.

## Actual Behavior

When `click!` is called on a link nested inside an iframe, an error is raised AND the link is clicked.

```
unknown error: unhandled inspector error: {"code":-32000,"message":"Cannot find context with specified id"}
        (Session info: chrome=74.0.3729.131)
        (Driver info: chromedriver=74.0.3729.6 (3c16f8a135abc0d4da2dff33804db79b849a7c38),platform=Windows NT 10.0.17134 x86_64) (Selenium::WebDriver::Error::UnknownError)
```

**Simplified Watir Code**

```ruby
browser = Watir::Browser.new :chrome, options: { options: { w3c: true } }
browser.goto 'https://app-host01/PresTier'

# A test step opens a new window

browser.windows.last.use

# More steps to get to the iframe 

Selenium::WebDriver.logger.level  = :info
Selenium::WebDriver.logger.output = 'selenium.log'
lnk = browser.iframe(src: /SearchPage_Procedure/).table(id: 'ctl00_PV_ProcedureLookupConrol_ProcedureResultsPanel_ctl01').tr(class: 'GridRow_BasicGrid').link(text: '1000', visible: true)
lnk.click! # Raises error
```

Selenium log from the above code:

`click` - https://gist.github.com/kapoorlakshya/97b3ecd99a3fbb0399c5268300384b2f

`click!` - https://gist.github.com/kapoorlakshya/8fb738190f9137eff6aa18f94081b15e