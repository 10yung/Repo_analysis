**Got error when trying to reproduce the "docker-compose up" **

**Output of `docker version`:**
Client: Docker Engine - Community
 Version:           19.03.5
 API version:       1.40
 Go version:        go1.12.12
 Git commit:        633a0ea
 Built:             Wed Nov 13 07:22:34 2019
 OS/Arch:           darwin/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          19.03.5
  API version:      1.40 (minimum version 1.12)
  Go version:       go1.12.12
  Git commit:       633a0ea
  Built:            Wed Nov 13 07:29:19 2019
  OS/Arch:          linux/amd64
  Experimental:     false
 containerd:
  Version:          v1.2.10
  GitCommit:        b34a5c8af56e510852c35414db4c1f4fa6172339
 runc:
  Version:          1.0.0-rc8+dev
  GitCommit:        3e425f80a8c931f88e6d94a8c831b9d5aa481657
 docker-init:
  Version:          0.18.0
  GitCommit:        fec3683

**output of running "docker-compose up**
```
Building worker
Step 1/5 : FROM microsoft/dotnet:2.0.0-sdk
 ---> fde8197d13f4
Step 2/5 : WORKDIR /code
 ---> Using cache
 ---> 669d92fbc80d
Step 3/5 : ADD src/Worker /code/src/Worker
 ---> Using cache
 ---> 71a36dd19109
Step 4/5 : RUN dotnet restore -v minimal src/Worker     && dotnet publish -c Release -o "./" "src/Worker/"
 ---> Running in f9dd38f5733c
MSBUILD : error MSB1050: Specify which project or solution file to use because the folder "src/Worker" contains more than one project or solution file.
ERROR: Service 'worker' failed to build: The command '/bin/sh -c dotnet restore -v minimal src/Worker     && dotnet publish -c Release -o "./" "src/Worker/"' returned a non-zero code: 1

```

**Docker for mac:**

Missing namespace
** PLEASE ONLY USE THIS ISSUE TRACKER TO SUBMIT ISSUES WITH THE EXAMPLE VOTING APP **

* If you have a bug working with Docker itself, not related to these labs, please file the bug on the [Docker repo](https://github.com/docker/docker) *
* If you would like general support figuring out how to do something with Docker, please use the Docker Slack channel. If you're not on that channel, sign up for the [Docker Community](http://dockr.ly/MeetUp) and you'll get an invite. *
* Or go to the [Docker Forums](https://forums.docker.com/) *

Please provide the following information so we can assess the issue you're having

**Description**

<!--
Briefly describe the problem you are having in a few paragraphs.
When running docker build . -t voting-app command execution goes fine until attempting to install Flask. 
**Steps to reproduce the issue, if relevant:**
1. navigate to vote directory 
2. execute " docker build . -t voting-app "
3.

**Describe the results you received:**


**Describe the results you expected:**


**Additional information you deem important (e.g. issue happens only occasionally):**

**Output of `docker version`:**

```
[root@dkrn1-CentOs8 vote]# docker build . -t voting-app
Sending build context to Docker daemon  161.3kB
Step 1/7 : FROM python:2.7-alpine
2.7-alpine: Pulling from library/python
89d9c30c1d48: Pull complete 
8dfb98e486fe: Pull complete 
6e6483f96b64: Pull complete 
a0538f573931: Pull complete 
Digest: sha256:b2c105bb491b7709201d7142f425f535c93c62c4479fa0bce9ad3105f5b63fe5
Status: Downloaded newer image for python:2.7-alpine
 ---> 780ede8fb4a7
Step 2/7 : WORKDIR /app
 ---> Running in 1e8b0ea9248f
Removing intermediate container 1e8b0ea9248f
 ---> d7b2bf6590e9
Step 3/7 : ADD requirements.txt /app/requirements.txt
 ---> 6ddfe351d3ba
Step 4/7 : RUN pip install -r requirements.txt
 ---> Running in c4e0827691c6
DEPRECATION: Python 2.7 will reach the end of its life on January 1st, 2020. Please upgrade your Python as Python 2.7 won't be maintained after that date. A future version of pip will drop support for Python 2.7. More details about Python 2 support in pip, can be found at https://pip.pypa.io/en/latest/development/release-process/#python-2-support
WARNING: Retrying (Retry(total=4, connect=None, read=None, redirect=None, status=None)) after connection broken by 'NewConnectionError('<pip._vendor.urllib3.connection.VerifiedHTTPSConnection object at 0x7f04b201cd10>: Failed to establish a new connection: [Errno -3] Try again',)': /simple/flask/**Output of `docker info`:**

```
(paste your output here)
```

**Additional environment details (AWS, Docker for Mac, Docker for Windows, VirtualBox, physical, etc.):**

The worker app uses .NET Core 2.0 which reached end of support at October 1, 2018 according to Microsoft's [.NET Core Support Policy](https://dotnet.microsoft.com/platform/support/policy/dotnet-core).

.NET Core 2.1 is an LTS version which will be supported until at least August 21, 2021.

This PR updates the worker .NET Core project to version 2.1 of the framework and the latest stable versions of its required NuGet packages.

The updates to the Worker Dockerfile are based on Microsoft's [.NET Core Docker tutorial](https://docs.microsoft.com/en-us/aspnet/core/host-and-deploy/docker/building-net-docker-images?view=aspnetcore-2.1).

The worker container builds and runs as expected on Docker Desktop for Windows 2.1.0.4.
removed volume mounts per issue #148 
** PLEASE ONLY USE THIS ISSUE TRACKER TO SUBMIT ISSUES WITH THE EXAMPLE VOTING APP **

* If you have a bug working with Docker itself, not related to these labs, please file the bug on the [Docker repo](https://github.com/docker/docker) *
* If you would like general support figuring out how to do something with Docker, please use the Docker Slack channel. If you're not on that channel, sign up for the [Docker Community](http://dockr.ly/MeetUp) and you'll get an invite. *
* Or go to the [Docker Forums](https://forums.docker.com/) *

Please provide the following information so we can assess the issue you're having

**Description**

<!--
Briefly describe the problem you are having in a few paragraphs.
-->
The docker-compose.yml (and docker-compose-simple.yml) file use volume mounts for the vote & result apps.   While this is something a developer might do while conducting 'inner-loop' debugging, it seems unnecessary and poor practice to have as part of an example of "real code".  It also assumes that the source code is on the same machine as the compose file, which really should not be a pre-req.
Note that the containers build and execute perfectly fine without the volume mounts


**Steps to reproduce the issue, if relevant:**
see this code:

services:
  vote:
    build: ./vote
    command: python app.py
    ***volumes:
     - ./vote:/app***
    ports:
      - "5000:80"
    networks:
      - front-tier
      - back-tier

  result:
    build: ./result
    command: nodemon server.js
    ***volumes:
      - ./result:/app***
    ports:
      - "5001:80"
      - "5858:5858"
    networks:
      - front-tier
      - back-tier


Updates all the .NET Core components to 2.1 and uses the SDK and runtime images from MCR.
**Image Problems**

1. **Old Images**: Code has changed in this repo and images are older than the code, causing old PR fixes to have no effect if you're using the official images. One example:

    `dockersamples/examplevotingapp_worker:latest` is [two years old](https://hub.docker.com/r/dockersamples/examplevotingapp_worker/tags) but I fixed a 100% CPU issue [nearly two years ago](https://github.com/dockersamples/example-voting-app/commit/f5a84ab40fc590bf29b3b55dad821682fcf04872#diff-b61822e8357dcaff77eaaccf348d9134). Running current image will still spike CPU.

2. **Missing Images**: Images for alternate builds don't always exist. One example:

    This repo [has a java `worker`](https://github.com/dockersamples/example-voting-app/blob/master/worker/Dockerfile.j) as an alternative to the default dotnet `worker`, but [Hub has no image for that](https://hub.docker.com/r/dockersamples/examplevotingapp_worker/tags). I recommend building it as tag `java`. 

3. **Duplicate Image Repos**: Images are duplicated in different Hub repos. One example:

    `dockersamples/examplevotingapp_worker` and `dockersamples/worker` are the same app but different build dates. The former is what's used in all yaml and in README and what we've used for many years.  The latter has a new build, and I'm guessing was created by [the new Jenkinsfile](https://github.com/dockersamples/example-voting-app/blob/master/Jenkinsfile) added a year ago to help automate image builds, which is great, but that file is pushing to the wrong Hub repos and is not complete with the various tags and alt builds. Doing some quick searching it looks like no one is using the new image repos, so it would be OK to remove them and stick with the origionals.

4. **No Image Tag Docs**: To help people get the most out of these images and demo, it would be quite helpful to have a table in the README.md listing all the images, their tags, and the reason for those tags. One example:

    What is the difference between `:latest`, `:before`, and `:after`? What tags are for what OS/arch?

**Suggested Solutions**

If the Jenkinsfile is indeed the future, I think a single PR could fix all these issues by fixing the current image repo/tags and adding all the alt builds to it, along with a README update on tag options for demos.

- [ ] Fix current repo names for the 3 demo apps in Jenkinsfile
- [ ] Add alt builds of the 3 demo apps to Jenkinsfile
- [ ] Ensure all tags are covered by the pushes in Jenkinsfile
- [ ] Delete misnamed Hub repos
- [ ] Update README.md with a table of tags and uses

I'm looking for a thumbs up from maintainers that this would be the prefered resolution, and I'll get started on a PR. It looks like the Jenkinsfile will test the new builds in the PR but won't test the push commands until it's merged to master ðŸ˜¬

**Description**

There's something with the .net version of the worker app that causes it to randomly not connect to db or redis on startup, which results in a crash. Over the last year I've had thousands of students use this app to learn docker and swarm, and one of the most common issues is this worker failing on startup. It happens on all modern docker versions, across platforms, and there is no common theme to why it doesn't work. 

Today in testing, we killed the broken service, which was re-creating the task over and over and it was failing, and once the service was recreated, and it worked... with no changes in how we created it. See log below for typical behavior. The stack trace tells you it can't resolve something, but doesn't show what it can't look up, so I can't tell what it thinks the problem is. From all the cases I've seen and testing I've done, it's not related to other services being down or general network issues.

This also happens for Kubernetes, as seen by other issues reported in this repo.

Hundreds of people have reported this problem to me, and deploying the java version fixes the issue.

**Workaround**

Deploy the java version of the worker, which I have build here: `bretfisher/examplevotingapp_worker:java`

**Steps to reproduce the issue, if relevant:**
In swarm: 
1. deploy all voting app services except worker. Ensure they work as they should.
2. deploy .net version of worker, using examples in this repo README
3. random deploys will randomly fail with stack trace of "no such device or address"
4. service will create a new task, that may work, or may not

**Describe the results you received:**

Notice below that we created a worker service with two replicas, and you'll see one replica work, and the other fail, then get re-created on the same node and work the 2nd time. It's random if it fails, and which one would fail.

```
âžœ  vote git:(master) âœ— docker service logs 413rw4tamzd6
vote_worker.2.itk0wfpt22gh@node3    | Waiting for db
vote_worker.2.itk0wfpt22gh@node3    | Connected to db
vote_worker.2.itk0wfpt22gh@node3    | Found redis at 10.0.4.7
vote_worker.2.itk0wfpt22gh@node3    | Connecting to redis
vote_worker.2.itk0wfpt22gh@node3    | Processing vote for 'a' by 'fb54d895d481b473'
vote_worker.2.tv9i1viknli2@node3    | System.AggregateException: One or more errors occurred. (No such device or address) ---> System.Net.Internals.SocketExceptionFactory+ExtendedSocketException: No such device or address
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.InternalGetHostByName(String hostName, Boolean includeIPv6)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.ResolveCallback(Object context)
vote_worker.2.tv9i1viknli2@node3    | --- End of stack trace from previous location where exception was thrown ---
vote_worker.2.tv9i1viknli2@node3    |    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.EndGetHostAddresses(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.<>c.<GetHostAddressesAsync>b__25_1(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)
vote_worker.2.tv9i1viknli2@node3    |    --- End of inner exception stack trace ---
vote_worker.2.tv9i1viknli2@node3    |    at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
vote_worker.2.tv9i1viknli2@node3    |    at Npgsql.NpgsqlConnector.Connect(NpgsqlTimeout timeout)
vote_worker.2.tv9i1viknli2@node3    |    at Npgsql.NpgsqlConnector.RawOpen(NpgsqlTimeout timeout)
vote_worker.2.tv9i1viknli2@node3    |    at Npgsql.NpgsqlConnector.Open(NpgsqlTimeout timeout)
vote_worker.2.tv9i1viknli2@node3    |    at Npgsql.ConnectorPool.Allocate(NpgsqlConnection conn, NpgsqlTimeout timeout)
vote_worker.2.tv9i1viknli2@node3    |    at Npgsql.NpgsqlConnection.OpenInternal()
vote_worker.2.tv9i1viknli2@node3    |    at Worker.Program.OpenDbConnection(String connectionString) in /code/src/Worker/Program.cs:line 78
vote_worker.2.tv9i1viknli2@node3    |    at Worker.Program.Main(String[] args) in /code/src/Worker/Program.cs:line 19
vote_worker.2.tv9i1viknli2@node3    | ---> (Inner Exception #0) System.Net.Internals.SocketExceptionFactory+ExtendedSocketException (0x00000005): No such device or address
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.InternalGetHostByName(String hostName, Boolean includeIPv6)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.ResolveCallback(Object context)
vote_worker.2.tv9i1viknli2@node3    | --- End of stack trace from previous location where exception was thrown ---
vote_worker.2.tv9i1viknli2@node3    |    at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.HostResolutionEndHelper(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.EndGetHostAddresses(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Net.Dns.<>c.<GetHostAddressesAsync>b__25_1(IAsyncResult asyncResult)
vote_worker.2.tv9i1viknli2@node3    |    at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)<---
vote_worker.2.tv9i1viknli2@node3    |
vote_worker.1.hjt41aigtbwq@node2    | Waiting for db
vote_worker.1.hjt41aigtbwq@node2    | Waiting for db
vote_worker.1.hjt41aigtbwq@node2    | Waiting for db
vote_worker.1.hjt41aigtbwq@node2    | Waiting for db
vote_worker.1.hjt41aigtbwq@node2    | Waiting for db
vote_worker.1.hjt41aigtbwq@node2    | Connected to db
vote_worker.1.hjt41aigtbwq@node2    | Found redis at 10.0.4.7
vote_worker.1.hjt41aigtbwq@node2    | Connecting to redis
vote_worker.1.hjt41aigtbwq@node2    | Processing vote for 'b' by 'fb54d895d481b473'
```

**Describe the results you expected:**

Worker always works :)

**Additional information you deem important (e.g. issue happens only occasionally):**

**Output of `docker version`:**

```
root@node3:~# docker version
Client:
 Version:           18.09.5
 API version:       1.39
 Go version:        go1.10.8
 Git commit:        e8ff056
 Built:             Thu Apr 11 04:44:24 2019
 OS/Arch:           linux/amd64
 Experimental:      false

Server: Docker Engine - Community
 Engine:
  Version:          18.09.5
  API version:      1.39 (minimum version 1.12)
  Go version:       go1.10.8
  Git commit:       e8ff056
  Built:            Thu Apr 11 04:10:53 2019
  OS/Arch:          linux/amd64
  Experimental:     false
```

**Output of `docker info`:**

```
root@node3:~# docker info
Containers: 20
 Running: 0
 Paused: 0
 Stopped: 20
Images: 38
Server Version: 18.09.5
Storage Driver: overlay2
 Backing Filesystem: extfs
 Supports d_type: true
 Native Overlay Diff: true
Logging Driver: json-file
Cgroup Driver: cgroupfs
Plugins:
 Volume: local
 Network: bridge host macvlan null overlay
 Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog
Swarm: active
 NodeID: 1zyd50hmid7dado3s02tago7y
 Is Manager: true
 ClusterID: spa40crzsqgtn4pix7hj4sac1
 Managers: 3
 Nodes: 3
 Default Address Pool: 10.0.0.0/8
 SubnetSize: 24
 Orchestration:
  Task History Retention Limit: 5
 Raft:
  Snapshot Interval: 10000
  Number of Old Snapshots to Retain: 0
  Heartbeat Tick: 1
  Election Tick: 10
 Dispatcher:
  Heartbeat Period: 5 seconds
 CA Configuration:
  Expiry Duration: 3 months
  Force Rotate: 0
 Autolock Managers: false
 Root Rotation In Progress: false
 Node Address: 134.209.46.216
 Manager Addresses:
  134.209.46.216:2377
  165.227.220.117:2377
  68.183.159.208:2377
Runtimes: runc
Default Runtime: runc
Init Binary: docker-init
containerd version: bb71b10fd8f58240ca47fbb579b9d1028eea7c84
runc version: 2b18fe1d885ee5083ef9f0838fee39b62d653e30
init version: fec3683
Security Options:
 apparmor
 seccomp
  Profile: default
Kernel Version: 4.4.0-154-generic
Operating System: Ubuntu 16.04.6 LTS
OSType: linux
Architecture: x86_64
CPUs: 1
Total Memory: 992.1MiB
Name: node3
ID: UA2M:37YB:EPX6:BKDU:WMNA:3F4A:GVE6:X3GD:Q3UK:YKYF:6J2H:QQNC
Docker Root Dir: /var/lib/docker
Debug Mode (client): false
Debug Mode (server): false
Registry: https://index.docker.io/v1/
Labels:
Experimental: false
Insecure Registries:
 127.0.0.0/8
Live Restore Enabled: false
Product License: Community Engine

WARNING: No swap limit support
```

**Additional environment details (AWS, Docker for Mac, Docker for Windows, VirtualBox, physical, etc.):**

This has happened on Docker Desktop, Digital Ocean, Docker Toolbox on VirtualBox, and more.