Hello,
Hope this project's Github Issues is an acceptable place for what would normally be asked by IRC or a "Discussions" style Forum.

Am unclear on exactly how HAXM compares to and is implemented on systems which might already have various emulators and hypervisors installed.

The Project home page describes HAXM as an Intel-specific hypervisor.
Subject to the limitations described during installation (eg Hyper-V must be disabled, CPU must be post "core" models)

Does this mean that HAXM is virtualization tools agnostic?
Does this mean then that any virtualization User-mode tools can be used to create a virtual machine on this hypervisor?
Does this mean that HAXM automatically becomes the preferred hypervisor over a hypervisor that might have been installed by a virtualization technology?
Or, does HAXM provide some kind of enhanced hardware acceleration for whatever virtualization technology or emulator that's installed?

Example:
If a system already has VMware or Virtualbox installed, if HAXIM is installed what is the result?
- The VMware or Virtualbox hypervisor is superceded by the HAXIM hypervisor
- The VMware or Virtualbox hypervisor is used, but is enhanced by the HAXIM hypervisor or driver (I've never really heard of multiple hypervisors used simultaneously)
- QEMU has the capability to emulate alien architectures different than the HostOS, and my understanding is implemented in the hypervisor. HAXIM seems to also have this capability, for instance supporting Android (ARM?) on x86/x64. Does this mean that this capability is also extended to virtualzation technologies that normally does not have this capability like VMware and Virtualbox?

Thank you.
Some fail cases in hax_create_vm() may call old EPT implementation,
which are not expected.
Separate old/new EPT routines with CONFIG_HAX_EPT2 so that only one
approarch is enabled at same time.

Signed-off-by: Colin Xu <colin.xu@intel.com>
Random and rear reproduce. Locally built 7.5.4 .pdb used. Again. Since there no shared release pdb

    HAXM version: Release driver DriverVer=7.5.4.0 x64
    Host OS version: Win10 x64
    Host OS architecture: x64
    Guest OS version: Win7 x86

BUGCHECK_P1: c0000005

BUGCHECK_P2: fffff8057d903597

BUGCHECK_P3: ffffa3051f105c60

BUGCHECK_P4: 0

EXCEPTION_CODE: (NTSTATUS) 0x12dcb470 - <Unable to get error code text>

FAULTING_IP: 
IntelHaxm!decode_op_modrm_rm+537 [c:\git\haxm_7.5.4\core\emulate.c @ 822]
fffff805`7d903597 48837f1800      cmp     qword ptr [rdi+18h],0

CONTEXT:  ffffa3051f105c60 -- (.cxr 0xffffa3051f105c60)
rax=0000000000000001 rbx=ffffb88dc6361da0 rcx=ffffb88dc6361da0
rdx=000000000000001d rsi=ffffb88dda2f8920 rdi=0000000000000000
rip=fffff8057d903597 rsp=ffffa3051f106650 rbp=0000000000000038
 r8=fcffffffffffffff  r9=ffffb88dda2f8000 r10=ffffb88dda2f8910
r11=000000000000001c r12=0000000000000000 r13=0000000000000000
r14=ffffb88dddf09260 r15=0000000000000001
iopl=0         nv up ei ng nz na po nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00050286
IntelHaxm!decode_op_modrm_rm+0x537:
fffff805`7d903597 48837f1800      cmp     qword ptr [rdi+18h],0 ds:002b:00000000`00000018=????????????????
Resetting default scope

BUGCHECK_STR:  12DCB470

CPU_COUNT: 6

CPU_MHZ: af8

CPU_VENDOR:  GenuineIntel

CPU_FAMILY: 6

CPU_MODEL: 9e

CPU_STEPPING: a

CPU_MICROCODE: 0,0,0,0 (F,M,S,R)  SIG: 96'00000000 (cache) 0'00000000 (init)

BLACKBOXBSD: 1 (!blackboxbsd)


BLACKBOXNTFS: 1 (!blackboxntfs)


BLACKBOXPNP: 1 (!blackboxpnp)


BLACKBOXWINLOGON: 1

CURRENT_IRQL:  0

ANALYSIS_SESSION_HOST:  WS00UT001

ANALYSIS_SESSION_TIME:  12-17-2019 14:26:16.0392

ANALYSIS_VERSION: 10.0.18362.1 amd64fre

LAST_CONTROL_TRANSFER:  from fffff8057d8fa0fa to fffff8057d903597

STACK_TEXT:  
ffffa305`1f106650 fffff805`7d8fa0fa : ffffb88d`c6361da0 00000000`00000038 ffffb88d`da2f8920 ffffb88d`c6361e70 : IntelHaxm!decode_op_modrm_rm+0x537 [c:\git\haxm_7.5.4\core\emulate.c @ 822] 
ffffa305`1f106680 fffff805`7d8f24b3 : 00000000`00000004 00000000`00000002 ffffb88d`e1bc6110 ffffb88d`c6cc3d40 : IntelHaxm!hax_list_add+0xa [c:\git\haxm_7.5.4\include\hax_list.h @ 53] 
ffffa305`1f1066b0 fffff805`7d8f257b : ffffb88d`e1bc6110 00000000`00000001 ffffb88d`ddf09260 00000000`00000000 : IntelHaxm!hax_win_construct_ssdl+0x73 [c:\git\haxm_7.5.4\platforms\windows\components.c @ 143] 
ffffa305`1f1066f0 fffff805`61831f79 : 00000000`000000c8 00000000`00000000 00000000`00000001 ffffb88d`e1bc6228 : IntelHaxm!DriverEntry+0xb [c:\git\haxm_7.5.4\platforms\windows\hax_entry.c @ 93] 
ffffa305`1f106720 fffff805`61de95e5 : ffffa305`1f106a80 ffffb88d`e1bc6110 00000000`00000001 ffffb88d`ddf09260 : nt!IofCallDriver+0x59
ffffa305`1f106760 fffff805`61de93f0 : 00000000`00000000 ffffa305`1f106a80 ffffb88d`e1bc6110 ffffa305`1f106a80 : nt!NtDeviceIoControlFile+0xe75
ffffa305`1f106800 fffff805`61de87c6 : 00000000`00595c9e 00000000`00000000 00000000`00000000 00000000`00000000 : nt!NtDeviceIoControlFile+0xc80
ffffa305`1f106920 fffff805`619d2d15 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000018 : nt!NtDeviceIoControlFile+0x56
ffffa305`1f106990 00007ff8`3961c1a4 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!setjmpex+0x7b75
00000000`0333f838 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x00007ff8`3961c1a4


THREAD_SHA1_HASH_MOD_FUNC:  1152f4c91fc9f4d2848cccfb0d1b8d08c6a4e0cd

THREAD_SHA1_HASH_MOD_FUNC_OFFSET:  760051c816885b502cf8cd5aaf0f89c8c19dfed3

THREAD_SHA1_HASH_MOD:  36376375ef9a945bdb01041c968716f429b4e88f

FOLLOWUP_IP: 
IntelHaxm!decode_op_modrm_rm+537 [c:\git\haxm_7.5.4\core\emulate.c @ 822]
fffff805`7d903597 48837f1800      cmp     qword ptr [rdi+18h],0

FAULT_INSTR_CODE:  187f8348

FAULTING_SOURCE_LINE:  c:\git\haxm_7.5.4\core\emulate.c

FAULTING_SOURCE_FILE:  c:\git\haxm_7.5.4\core\emulate.c

FAULTING_SOURCE_LINE_NUMBER:  822

TARGET_TIME:  2019-12-17T12:14:48.000Z

OSBUILD:  18362

OSSERVICEPACK:  0

SERVICEPACK_NUMBER: 0

OS_REVISION: 0

SUITE_MASK:  272

PRODUCT_TYPE:  1

OSPLATFORM_TYPE:  x64

OSNAME:  Windows 10

OSEDITION:  Windows 10 WinNt TerminalServer SingleUserTS
Comments to cs.ar and tr.ar validity checking stating that these can be wrong set by qemu. But the checks were done before every vmentry with reading the values from vmcs and that is bad for performance. I moved the checks to vcpu_set_regs since qemu sets them through this function. I did not found any other places that write these to vmcs.


I'm trying to load Ubuntu bionic cloud image with QEmu and HAX acceleration. 
Usually the image loads correctly, while once HAX is enabled the boot hangs without any details.

**QEMU version:** v4.1.0-11789-g013a2ecf4f-dirty
**QEMU command line:** qemu-system-x86_64  -d guest_errors -m 1024 -drive file=cloud_image.qcow2,if=virtio  -no-acpi -no-hpet -display gtk  -boot c -drive file=cloud-init.iso,media=cdrom  -serial stdio -machine accel=hax
**OS Host:** Windows 10 64bit : Hyper-V disabled (VT support -- yes; NX support -- yes)
**OS Guest:** Linux 4.15.0-72-generic #81-Ubuntu x86_64

On output I just see: "`HAX is working and emulator runs in fast virt mode.`" and nothing more.
PDPTE values are not restored after snapshot loading. I added PDPTE values reading from guest memory and write these to vmcs after all EFER writes and control register writes from qemu, since these can change memory mode to use PDPTES.
Open questions:
1) Is it necessary to set the check_pae_pdpt after memory load from qemu? It is theoretically possible not changing CRs and MSRs from qemu, but change memory at location pointed by CR3. Should we assume this scenario?

Random and rear reproduce. Please provide 7.5.2 .pdb for better callstack
* HAXM version: Release driver DriverVer=07/16/2019,7.5.2.0 x64
* Host OS version: Win10 x64
* Host OS architecture: x64
* Guest OS version: Win7 x86

*******************************************************************************
*                                                                             *
*                        Bugcheck Analysis                                    *
*                                                                             *
*******************************************************************************
SYSTEM_SERVICE_EXCEPTION (3b)
An exception happened while executing a system service routine.
Arguments:
Arg1: 00000000c0000005, Exception code that caused the bugcheck
Arg2: fffff80372d72f2f, Address of the instruction which caused the bugcheck
Arg3: ffffdc84bbe26c60, Address of the context record for the exception that caused the bugcheck
Arg4: 0000000000000000, zero.

Debugging Details:
------------------
KEY_VALUES_STRING: 1
PROCESSES_ANALYSIS: 1
SERVICE_ANALYSIS: 1
STACKHASH_ANALYSIS: 1
TIMELINE_ANALYSIS: 1
DUMP_CLASS: 1
DUMP_QUALIFIER: 401
BUILD_VERSION_STRING:  18362.1.amd64fre.19h1_release.190318-1202
SYSTEM_MANUFACTURER:  System manufacturer
SYSTEM_PRODUCT_NAME:  System Product Name
SYSTEM_SKU:  ASUS_MB_CNL
SYSTEM_VERSION:  System Version
BIOS_VENDOR:  American Megatrends Inc.
BIOS_VERSION:  0504
BIOS_DATE:  03/06/2018
BASEBOARD_MANUFACTURER:  ASUSTeK COMPUTER INC.
BASEBOARD_PRODUCT:  PRIME B360-PLUS
BASEBOARD_VERSION:  Rev 1.xx
DUMP_TYPE:  1
BUGCHECK_P1: c0000005
BUGCHECK_P2: fffff80372d72f2f
BUGCHECK_P3: ffffdc84bbe26c60
BUGCHECK_P4: 0
EXCEPTION_CODE: (NTSTATUS) 0xc0000005 - The instruction at 0x%p referenced memory at 0x%p. The memory could not be %s.
FAULTING_IP: 
IntelHaxm+12f2f
fffff803`72d72f2f 48837f1800      cmp     qword ptr [rdi+18h],0
CONTEXT:  ffffdc84bbe26c60 -- (.cxr 0xffffdc84bbe26c60)
rax=0000000000000001 rbx=ffffa20a14b54d20 rcx=ffffa20a14b54d20
rdx=0000000000000017 rsi=ffffa20a14b4c7e0 rdi=0000000000000000
rip=fffff80372d72f2f rsp=ffffdc84bbe27650 rbp=0000000000000038
 r8=fffcffffffffffff  r9=ffffa20a14b4c000 r10=ffffa20a14b4c7d0
r11=0000000000000018 r12=0000000000000000 r13=0000000000000000
r14=ffffa20a1fd49a10 r15=0000000000000001
iopl=0         nv up ei ng nz na po nc
cs=0010  ss=0018  ds=002b  es=002b  fs=0053  gs=002b             efl=00050286
IntelHaxm+0x12f2f:
fffff803`72d72f2f 48837f1800      cmp     qword ptr [rdi+18h],0 ds:002b:00000000`00000018=????????????????
Resetting default scope

BUGCHECK_STR:  0x3B_c0000005
CPU_COUNT: 6
CPU_MHZ: af8
CPU_VENDOR:  GenuineIntel
CPU_FAMILY: 6
CPU_MODEL: 9e
CPU_STEPPING: a
CPU_MICROCODE: 6,9e,a,0 (F,M,S,R)  SIG: 96'00000000 (cache) 96'00000000 (init)
BLACKBOXBSD: 1 (!blackboxbsd)
BLACKBOXNTFS: 1 (!blackboxntfs)
BLACKBOXPNP: 1 (!blackboxpnp)
BLACKBOXWINLOGON: 1
DEFAULT_BUCKET_ID:  WIN8_DRIVER_FAULT
PROCESS_NAME:  qemu-system-x86_64.exe
CURRENT_IRQL:  0
ANALYSIS_SESSION_HOST:  xxxx
ANALYSIS_SESSION_TIME:  10-31-2019 14:02:05.0664
ANALYSIS_VERSION: 10.0.18362.1 amd64fre
LAST_CONTROL_TRANSFER:  from fffff80372d69e58 to fffff80372d72f2f

STACK_TEXT:  
ffffdc84`bbe27650 fffff803`72d69e58 : ffffa20a`14b54d20 00000000`00000038 ffffa20a`14b4c7e0 ffffa20a`14b54df0 : IntelHaxm+0x12f2f
ffffdc84`bbe27680 fffff803`72d62473 : 00000000`00000004 00000000`00000002 ffffa20a`154ec560 ffffa20a`1c4297c0 : IntelHaxm+0x9e58
ffffdc84`bbe276b0 fffff803`72d6253b : ffffa20a`154ec560 00000000`00000001 ffffa20a`1fd49a10 00000000`00000000 : IntelHaxm+0x2473
ffffdc84`bbe276f0 fffff803`75e31f39 : 00000000`000000c8 00000000`00000000 00000000`00000001 ffffa20a`154ec678 : IntelHaxm+0x253b
ffffdc84`bbe27720 fffff803`763e93f5 : ffffdc84`bbe27a80 ffffa20a`154ec560 00000000`00000001 ffffa20a`1fd49a10 : nt!IofCallDriver+0x59
ffffdc84`bbe27760 fffff803`763e9200 : 00000000`00000000 ffffdc84`bbe27a80 ffffa20a`154ec560 ffffdc84`bbe27a80 : nt!IopSynchronousServiceTail+0x1a5
ffffdc84`bbe27800 fffff803`763e85d6 : 00000000`00595d5e 00000000`00000000 00000000`00000000 00000000`00000000 : nt!IopXxxControlFile+0xc10
ffffdc84`bbe27920 fffff803`75fd2b15 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000018 : nt!NtDeviceIoControlFile+0x56
ffffdc84`bbe27990 00007fff`fa2fc1a4 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x25
00000000`0347f838 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x00007fff`fa2fc1a4

THREAD_SHA1_HASH_MOD_FUNC:  67ef8ea7690d1b6bac8892ac0d399d817d4db057
THREAD_SHA1_HASH_MOD_FUNC_OFFSET:  ba701e73361cc7f13b134a3715c8f1f2a11f11b9
THREAD_SHA1_HASH_MOD:  36376375ef9a945bdb01041c968716f429b4e88f
FOLLOWUP_IP: 
IntelHaxm+12f2f
fffff803`72d72f2f 48837f1800      cmp     qword ptr [rdi+18h],0
FAULT_INSTR_CODE:  187f8348
SYMBOL_STACK_INDEX:  0
SYMBOL_NAME:  IntelHaxm+12f2f
FOLLOWUP_NAME:  MachineOwner
MODULE_NAME: IntelHaxm
IMAGE_NAME:  IntelHaxm.sys
DEBUG_FLR_IMAGE_TIMESTAMP:  5d2da46f
STACK_COMMAND:  .cxr 0xffffdc84bbe26c60 ; kb
BUCKET_ID_FUNC_OFFSET:  12f2f
FAILURE_BUCKET_ID:  0x3B_c0000005_IntelHaxm!unknown_function
BUCKET_ID:  0x3B_c0000005_IntelHaxm!unknown_function
PRIMARY_PROBLEM_CLASS:  0x3B_c0000005_IntelHaxm!unknown_function
TARGET_TIME:  2019-10-31T11:52:04.000Z
OSBUILD:  18362
OSSERVICEPACK:  0
SERVICEPACK_NUMBER: 0
OS_REVISION: 0
SUITE_MASK:  272
PRODUCT_TYPE:  1
OSPLATFORM_TYPE:  x64
OSNAME:  Windows 10
OSEDITION:  Windows 10 WinNt TerminalServer SingleUserTS
OS_LOCALE:  
USER_LCID:  0
OSBUILD_TIMESTAMP:  unknown_date
BUILDDATESTAMP_STR:  190318-1202
BUILDLAB_STR:  19h1_release
BUILDOSVER_STR:  10.0.18362.1.amd64fre.19h1_release.190318-1202
ANALYSIS_SESSION_ELAPSED_TIME:  e487
ANALYSIS_SOURCE:  KM
FAILURE_ID_HASH_STRING:  km:0x3b_c0000005_intelhaxm!unknown_function
FAILURE_ID_HASH:  {66ba21f1-bc0b-a1bb-d0ce-0cc4c69ca92b}
Followup:     MachineOwner
---------

Hello, friends.

I want to learn to program in Android and I have choosen LiveCode.

Is there a package that contains LiveCode, JDK and Android SDK, in a similar way to WAMP and/or JoomlaSpanishServer2?

I ask this because I am having trouble with:
Android HAXM
-  === Logging started: 11/08/2019  11:55:25 ===
-     This computer does not support Intel Virtualization Technology (VT-x) or it is being exclusively used by Hyper-V. HAXM cannot be installed. 
-     Please ensure Hyper-V is disabled in Windows Features, or refer to the Intel HAXM documentation for more information.
-     === Logging stopped: 11/08/2019  11:55:26 ===
- 

Java SE Development Kit 8u211
android-studio-ide-183.5522156-windows32.zip
Intel® HAXM installer
Hiper-V

When I read about how to "install" HAXM, I see things as:

Visual Studio 2017
Universal Windows Platform development
Desktop development with C++.
Windows SDK for Windows 10
Windows Driver Kit (WDK) for Windows 10
Note that ... the Windows 10 SDK installed by Visual Studio 2017 ... may not be the latest version.

Enterprise WDK (EWDK) 10 with Visual Studio Build Tools 15.6
NuGet CLI tool (nuget.exe) version 4.x or later


But I only want to run LiveCode 9.x and make programs in it.

Thanks.

HERNAN
Hello, friends.

I decompress haxm-windows_v7_5_2.zip
and run silent_install.bat

haxm_silent_run.log
=== Logging started: 11/08/2019  11:55:25 ===
This computer does not support Intel Virtualization Technology (VT-x) or it is being exclusively used by Hyper-V. HAXM cannot be installed. 
Please ensure Hyper-V is disabled in Windows Features, or refer to the Intel HAXM documentation for more information.
=== Logging stopped: 11/08/2019  11:55:26 ===

Could you say me how can I procceed, please.

HERNAN
“Android Virtual Device” (AVD) instance crashed (blue screened) the SurfacePro4, W10 version 1903 (OS Build 18362.239):

BugCheck A, {39cafc88, ff, a6, fffff8002d645a32}

*** ERROR: Module load completed but symbols could not be loaded for IntelHaxm.sys
Probably caused by : IntelHaxm.sys ( IntelHaxm+28a8 )

*******************************************************************************
*                                                                             *
*                        Bugcheck Analysis                                    *
*                                                                             *
*******************************************************************************

IRQL_NOT_LESS_OR_EQUAL (a)
An attempt was made to access a pageable (or completely invalid) address at an
interrupt request level (IRQL) that is too high.  This is usually
caused by drivers using improper addresses.
If a kernel debugger is available get the stack backtrace.
Arguments:
Arg1: 0000000039cafc88, memory referenced
Arg2: 00000000000000ff, IRQL
Arg3: 00000000000000a6, bitfield :
	bit 0 : value 0 = read operation, 1 = write operation
	bit 3 : value 0 = not an execute operation, 1 = execute operation (only on chips which support this level of status)
Arg4: fffff8002d645a32, address which referenced memory

Debugging Details:
------------------


DUMP_CLASS: 1

DUMP_QUALIFIER: 401

BUILD_VERSION_STRING:  18362.1.amd64fre.19h1_release.190318-1202

SYSTEM_MANUFACTURER:  Microsoft Corporation

SYSTEM_PRODUCT_NAME:  Surface Pro 4

SYSTEM_SKU:  Surface_Pro_4

SYSTEM_VERSION:  D:0B:08F:1C:03P:38

BIOS_VENDOR:  Microsoft Corporation

BIOS_VERSION:  108.2706.768

BIOS_DATE:  04/18/2019

BASEBOARD_MANUFACTURER:  Microsoft Corporation

BASEBOARD_PRODUCT:  Surface Pro 4

DUMP_TYPE:  1

BUGCHECK_P1: 39cafc88

BUGCHECK_P2: ff

BUGCHECK_P3: a6

BUGCHECK_P4: fffff8002d645a32

READ_ADDRESS: Unable to get offset of nt!_MI_VISIBLE_STATE.SpecialPool
Unable to get value of nt!_MI_VISIBLE_STATE.SessionSpecialPool
 0000000039cafc88 

CURRENT_IRQL:  1

FAULTING_IP: 
nt!IopCompleteRequest+f2
fffff800`2d645a32 48894108        mov     qword ptr [rcx+8],rax

CPU_COUNT: 4

CPU_MHZ: 8a0

CPU_VENDOR:  GenuineIntel

CPU_FAMILY: 6

CPU_MODEL: 4e

CPU_STEPPING: 3

CPU_MICROCODE: 6,4e,3,0 (F,M,S,R)  SIG: CC'00000000 (cache) CC'00000000 (init)

DEFAULT_BUCKET_ID:  WIN8_DRIVER_FAULT

BUGCHECK_STR:  AV

PROCESS_NAME:  qemu-system-x86_64.exe

ANALYSIS_SESSION_HOST:  SURFACEPRO4

ANALYSIS_SESSION_TIME:  07-13-2019 11:21:04.0205

ANALYSIS_VERSION: 10.0.15063.468 amd64fre

IRP_ADDRESS: ffffffffffffff88

TRAP_FRAME:  fffffe8fbf55f160 -- (.trap 0xfffffe8fbf55f160)
NOTE: The trap frame does not contain all registers.
Some register values may be zeroed or incorrect.
rax=0000000000000000 rbx=0000000000000000 rcx=0000000039cafc80
rdx=fffffe8fbf55f420 rsi=0000000000000000 rdi=0000000000000000
rip=fffff8002d645a32 rsp=fffffe8fbf55f2f0 rbp=fffffe8fbf55f439
 r8=fffffe8fbf55f438  r9=fffffe8fbf55f430 r10=fffff8002d645940
r11=0000000000000000 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0         nv up di pl zr na po nc
nt!IopCompleteRequest+0xf2:
fffff800`2d645a32 48894108        mov     qword ptr [rcx+8],rax ds:00000000`39cafc88=????????????????
Resetting default scope

LAST_CONTROL_TRANSFER:  from fffff8002d7ce6e9 to fffff8002d7bc900

STACK_TEXT:  
fffffe8f`bf55f018 fffff800`2d7ce6e9 : 00000000`0000000a 00000000`39cafc88 00000000`000000ff 00000000`000000a6 : nt!KeBugCheckEx
fffffe8f`bf55f020 fffff800`2d7caa2b : 00000000`00000000 00000000`00000000 00000000`00000000 fffff800`49a03156 : nt!KiBugCheckDispatch+0x69
fffffe8f`bf55f160 fffff800`2d645a32 : ffff908f`869cb920 00000000`00000000 00000000`3a231000 00000000`ba221000 : nt!KiPageFault+0x46b
fffffe8f`bf55f2f0 fffff800`2d63d72d : 00000000`00000000 ffff908f`803cc080 ffff908f`99892500 ffff908f`99892470 : nt!IopCompleteRequest+0xf2
fffffe8f`bf55f3e0 fffff800`2d6480f2 : ffffffff`00000000 00000000`00000000 ffff908f`00000000 00000000`00000000 : nt!KiDeliverApc+0x19d
fffffe8f`bf55f4a0 fffff800`2d64709b : ffff908f`803cc080 ff8918e3`c1f3720c ffff908f`803cc080 ffff9198`1229ec0e : nt!KiExitDispatcher+0x282
fffffe8f`bf55f500 fffff800`2d646b67 : 00000000`00000000 7fff908f`79d64800 00000000`00000000 00000000`00000000 : nt!IopfCompleteRequest+0x51b
fffffe8f`bf55f610 fffff800`49a028a8 : 00000000`00000000 ffff908f`79d66010 ffff908f`88ced500 00000000`00000000 : nt!IofCompleteRequest+0x17
fffffe8f`bf55f640 fffff800`49a0250f : ffff908f`88ced430 fffffe8f`bf55f700 ffff908f`99892470 ffff908f`99892470 : IntelHaxm+0x28a8
fffffe8f`bf55f6d0 fffff800`2d631cc9 : ffff908f`99892470 00000000`00000000 00000000`40002418 00000000`00000001 : IntelHaxm+0x250f
fffffe8f`bf55f700 fffff800`2dbeb6c5 : fffffe8f`bf55fa80 ffff908f`88ced430 00000000`00000001 ffff908f`99892470 : nt!IofCallDriver+0x59
fffffe8f`bf55f740 fffff800`2dbeb01a : ffff908f`00000000 00000000`40002418 00000000`00000000 fffffe8f`bf55fa80 : nt!IopSynchronousServiceTail+0x1a5
fffffe8f`bf55f7e0 fffff800`2dbeaa36 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!IopXxxControlFile+0x5ca
fffffe8f`bf55f920 fffff800`2d7ce115 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!NtDeviceIoControlFile+0x56
fffffe8f`bf55f990 00007ffb`33fbc144 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : nt!KiSystemServiceCopyEnd+0x25
00000000`39cafc28 00000000`00000000 : 00000000`00000000 00000000`00000000 00000000`00000000 00000000`00000000 : 0x00007ffb`33fbc144


STACK_COMMAND:  kb

THREAD_SHA1_HASH_MOD_FUNC:  965fa368e0280ed957bb788db67bc2bcdc17ff3f

THREAD_SHA1_HASH_MOD_FUNC_OFFSET:  62b4fd1f488db681851b3385e925771262e326f1

THREAD_SHA1_HASH_MOD:  52d93e4427b781f23e55209e8f4885af6b101c56

FOLLOWUP_IP: 
IntelHaxm+28a8
fffff800`49a028a8 4885ed          test    rbp,rbp

FAULT_INSTR_CODE:  74ed8548

SYMBOL_STACK_INDEX:  8

SYMBOL_NAME:  IntelHaxm+28a8

FOLLOWUP_NAME:  MachineOwner

MODULE_NAME: IntelHaxm

IMAGE_NAME:  IntelHaxm.sys

DEBUG_FLR_IMAGE_TIMESTAMP:  5cb6c325

BUCKET_ID_FUNC_OFFSET:  28a8

FAILURE_BUCKET_ID:  AV_CODE_AV_IntelHaxm!unknown_function

BUCKET_ID:  AV_CODE_AV_IntelHaxm!unknown_function

PRIMARY_PROBLEM_CLASS:  AV_CODE_AV_IntelHaxm!unknown_function

TARGET_TIME:  2019-07-12T15:53:27.000Z

OSBUILD:  18362

OSSERVICEPACK:  0

SERVICEPACK_NUMBER: 0

OS_REVISION: 0

SUITE_MASK:  272

PRODUCT_TYPE:  1

OSPLATFORM_TYPE:  x64

OSNAME:  Windows 10

OSEDITION:  Windows 10 WinNt TerminalServer SingleUserTS

OS_LOCALE:  

USER_LCID:  0

OSBUILD_TIMESTAMP:  1972-02-02 00:33:06

BUILDDATESTAMP_STR:  190318-1202

BUILDLAB_STR:  19h1_release

BUILDOSVER_STR:  10.0.18362.1.amd64fre.19h1_release.190318-1202

ANALYSIS_SESSION_ELAPSED_TIME:  7f3

ANALYSIS_SOURCE:  KM

FAILURE_ID_HASH_STRING:  km:av_code_av_intelhaxm!unknown_function

FAILURE_ID_HASH:  {6dde09c0-a81a-6bff-e068-83d929a10c64}

Followup:     MachineOwner
---------
