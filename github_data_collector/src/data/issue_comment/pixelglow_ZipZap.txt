How to set the firstExtraField?
https://github.com/pixelglow/ZipZap/blob/master/ZipZap/ZZArchive.mm#L149

This line pointing to a static int sign: https://github.com/pixelglow/ZipZap/blob/master/ZipZap/ZZHeaders.h#L151

Should this be signature?

I hope to increase the compression encryption zip
Hi,

When archiving ZipZap an empty archive is created. This can be remedied by setting the 'Build Setting' 'Skip Install' to 'No' for Release builds.
Please consider this change.

Kind regards,

Remco Poelstra
Xcode has appletvsimulator12.0 installed and `id:BD6947F6-C0D6-43C0-B35A-30C3F83A48CE` matches 

```
xcodebuild: error: Unable to find a destination matching the provided destination specifier:
		{ platform:tvOS Simulator, id:BD6947F6-C0D6-43C0-B35A-30C3F83A48CE }

	Ineligible destinations for the "ZipZap (tvOS Framework)" scheme:
		{ platform:tvOS, id:dvtdevice-DVTiOSDevicePlaceholder-appletvos:placeholder, name:Generic tvOS Device }
		{ platform:tvOS Simulator, id:dvtdevice-DVTiOSDeviceSimulatorPlaceholder-appletvsimulator:placeholder, name:Generic tvOS Simulator Device }```

This PR aims to eliminate the [Zipperdown](https://zipperdown.org/) security vulnerability. [Relevant Github issue](https://github.com/pixelglow/ZipZap/issues/170)

Files inside of an archive may contain path traversal characters in their filename. When unarchiving these, SSZipArchive follows `../` sequences which can lead to a file being written to an unexpected destination. This could potentially lead to RCE under the worst of circumstances (such as overwriting a javascript file that the app is going to execute).

This addition sanitizes dot-dot-slash (`../`) characters from the destination path of files being unarchived, mimicking the default behavior of the Archive Utility found on macOS (as well as most other popular desktop archiving clients). 

Consider an archive containing the following file:
	`../../../../../../../../../../../Users/test/Desktop/hello.txt`
	
When unarchived using the current release of ZipZap, the directory traversal characters are followed causing unarchived files to break out of the current directory, resulting in `/Users/test/Desktop/hello.txt` being created.

Compare this to the default behavior of macOS's Archive Utility, which does _not_ follow directory traversal characters. The same archive results in extraction restricted to the current directory:
`%current_path%/Users/test/Desktop/hello.txt`
	
	
From a security standpoint, discarding directory traversal characters when unarchiving should be the default behavior of this SDK. 

Hello,

A security issue has been discovered in another popular Archiving SDK, ZipArchive, which can lead to arbitrary file overwrite. The archive can potentially contain path traversal file names, which can lead to files being written outside of their intended destination. This could potentially lead to RCE under the worst of circumstances (such as overwriting a javascript file that the app is going to execute).

See:
https://zipperdown.org/
https://github.com/ZipArchive/ZipArchive/issues/453

ZipArchive is floating the idea of a "secure" unarchiving method that strips out filenames containing path traversal symbols. 

Your thoughts? 
Open ZipArchive is OK, but when I create data from ZZEntry, I just get nil, Please help.
PS: The zip file created by ZipZap is OK, however, the other zip files created by other software will be error.
Code like this:
```
    bool UnzipFileAtPath(char* srcFile, char* destPath)
    {
        NSFileManager* fileManager = [NSFileManager defaultManager];
        NSString* zipFilePath = [NSString stringWithUTF8String:srcFile];
        NSString* destDirPath = [NSString stringWithUTF8String:destPath];
        if(![destDirPath hasSuffix:@"/"])
        {
            destDirPath = [NSString stringWithFormat:@"%@/", destDirPath];
        }
        NSLog(@"[ZipZap] Begin Unzip Fileï¼š%@", zipFilePath);
        
        NSError * error;
        NSData* rawZipData = [fileManager contentsAtPath:zipFilePath];
        NSLog(@"[ZipZap] Raw Zip Data Length: %li", rawZipData.length);
        ZZArchive* zipArchive = [ZZArchive archiveWithData:rawZipData error:&error];
        if (error)
        {
            NSLog(@"[ZipZap] Error happened while open zip file: %@ Error: %@", zipFilePath, [error localizedDescription]);
            return NO;
        }
        else
        {
            NSLog(@"[ZipZap] Zip Entries: %lui", zipArchive.entries.count);
        }
        
        for (ZZArchiveEntry* entry in zipArchive.entries)
        {
            NSString* entryFilePath = [destDirPath stringByAppendingString:entry.fileName];
            if(entry.fileMode & S_IFDIR)
            {
                [fileManager createDirectoryAtPath:entryFilePath withIntermediateDirectories:YES attributes:nil error:nil];
            }
            else
            {
                NSError* createDataError;
                NSData* newData = [entry newDataWithError:&createDataError];
                if(createDataError || newData == nil || newData.length == 0)
                {
                    NSLog(@"[ZipZap] Create Data from ZZEntry Error: %lui", createDataError.code);
                    return NO;
                }
                else
                {
                    NSUInteger length = [newData length];
                    NSLog(@"[ZipZap] File: %@, Length: %lu", entry.fileName, length);
                }
                NSError* writeDataError;
                BOOL ret = [fileManager createFileAtPath:entryFilePath contents:newData attributes:nil];
                if(!ret)
                {
                    NSLog(@"[ZipZap] Write Data Error: %@, Error: %li", entry.fileName, [writeDataError code]);
                }
            }
        }
        NSLog(@"[ZipZap] Unzip File OK!");
        return YES;
    }
```
I see that you start support from iOS 9.3 however I run it on iOS 9.0 and works fine.
Is there any drawback If i use it on iOS 9.0 ?
