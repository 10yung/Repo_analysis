None
Updates [org.scalacheck:scalacheck](https://github.com/rickynils/scalacheck) from 1.14.0 to 1.14.3.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalacheck", artifactId = "scalacheck" } ]
```
</details>
<details>
<summary>Applied Migrations</summary>

* github:typelevel/scalacheck/v1_14_1?sha=3fc537dde9d8fdf951503a8d8b027a568d52d055
</details>

labels: semver-patch, scalafix-migrations
Updates [org.scalacheck:scalacheck](http://www.scalacheck.org) from 1.14.0 to 1.14.2.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention @scala-steward in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalacheck", artifactId = "scalacheck" } ]
```
</details>
<details>
<summary>Applied Migrations</summary>

* github:typelevel/scalacheck/v1_14_1?sha=3fc537dde9d8fdf951503a8d8b027a568d52d055
</details>
labels: semver-patch, scalafix-migrations

Updates com.typesafe:sbt-mima-plugin from 0.3.0 to 0.6.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention @scala-steward in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.typesafe", artifactId = "sbt-mima-plugin" } ]
```
</details>

labels: semver-minor
I have a case class with a lot of members that yields well to generating an `Arbitrary` instance using scalacheck-shapeless, but some individual field values I'd like to discard as invalid.

For that purpose, I wanted to generate the instance using this library, call `filter` on it and make the result of that `implicit`.

I couldn't find anything in the documentation explaining how to generate an instance without making it implicit.

After some trial and error, I came up with:

```scala
implicit val arbitraryFoo: Arbitrary[Foo] = {
  val baseArbitrary = implicitly[Strict[MkArbitrary[Foo]]].value.arbitrary.arbitrary
  baseArbitrary.filter(validationCheck)
}
```

Is there a better way I'm missing?

If yes, it should be added to the documentation.

If not, this seems useful and can be implemented (see `semiauto` generic derivation in Circe as an example).
I'm using https://github.com/fthomas/refined and I was pretty sure it had been working fine but today I got a `ClassCastException` when shrinking a case class that contained a field which was a `Refined` type. My guess is it has something to do with it being a value class.

Here is the exception:
```
Caused by: java.lang.ClassCastException: java.lang.Integer cannot be cast to eu.timepit.refined.api.Refined
	at com.geneious.nucleus.service.job.api.generators.JobStatusGenerators$anon$macro$381$1.from(JobStatusGenerators.scala:20)
	at com.geneious.nucleus.service.job.api.generators.JobStatusGenerators$anon$macro$381$1.from(JobStatusGenerators.scala:20)
	at org.scalacheck.derive.MkShrink$.$anonfun$genericProduct$2(MkShrink.scala:41)
	at scala.collection.immutable.Stream.map(Stream.scala:415)
	at org.scalacheck.derive.MkShrink$.$anonfun$lazyxmap$1(MkShrink.scala:32)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$2(MkShrink.scala:88)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$4(MkShrink.scala:89)
	at scala.collection.immutable.Stream.append(Stream.scala:252)
	at scala.collection.immutable.Stream$ConsWrapper.$hash$colon$colon$colon(Stream.scala:1126)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$2(MkShrink.scala:88)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$4(MkShrink.scala:89)
	at scala.collection.immutable.Stream.append(Stream.scala:252)
	at scala.collection.immutable.Stream$ConsWrapper.$hash$colon$colon$colon(Stream.scala:1126)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$2(MkShrink.scala:88)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$4(MkShrink.scala:89)
	at scala.collection.immutable.Stream.append(Stream.scala:252)
	at scala.collection.immutable.Stream$ConsWrapper.$hash$colon$colon$colon(Stream.scala:1126)
	at org.scalacheck.derive.MkHListShrink$.$anonfun$hcons$2(MkShrink.scala:88)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.derive.MkShrink$.$anonfun$lazyxmap$1(MkShrink.scala:32)
	at org.scalacheck.Shrink$$anon$1.shrink(Shrink.scala:40)
	at org.scalacheck.Shrink$.shrink(Shrink.scala:44)
	at org.scalacheck.Prop$.$anonfun$forAll$16(Prop.scala:913)
	at org.scalacheck.Prop$.shrinker$1(Prop.scala:778)
	at org.scalacheck.Prop$.$anonfun$forAllShrink$1(Prop.scala:802)
	at org.scalacheck.Prop$.$anonfun$apply$1(Prop.scala:307)
	at org.scalacheck.PropFromFun.apply(Prop.scala:22)
	at org.scalacheck.Prop$.result$1(Prop.scala:762)
	at org.scalacheck.Prop$.$anonfun$forAllShrink$1(Prop.scala:800)
	at org.scalacheck.Prop$.$anonfun$apply$1(Prop.scala:307)
	at org.scalacheck.PropFromFun.apply(Prop.scala:22)
	at org.scalacheck.Test$.workerFun$1(Test.scala:326)
	at org.scalacheck.Test$.$anonfun$check$1(Test.scala:355)
	at org.scalacheck.Test$.$anonfun$check$1$adapted(Test.scala:355)
	at org.scalacheck.Platform$.runWorkers(Platform.scala:40)
	at org.scalacheck.Test$.check(Test.scala:355)
	at org.scalatest.enablers.UnitCheckerAsserting$CheckerAssertingImpl.check(CheckerAsserting.scala:89)
	... 53 more
```

Here is the relevant code:
```scala
sealed trait JobStatus {
  def kind: String
  def dateTime: OffsetDateTime
  def messages: immutable.Seq[String]
  def progress: Percentage
}

final case class Running(dateTime: OffsetDateTime,
                         messages: immutable.Seq[String],
                         progress: Percentage) extends JobStatus {
   @transient
  override val kind: String = Running.Kind
}
```

```scala
object CommonRefinedTypes {
  type Percentage = Int Refined Interval.Closed[W.`0`.T, W.`100`.T]
  object Percentage extends RefinedTypeOps.Numeric[Percentage, Int]
}
```

```scala
object CommonRefinedTypeGenerators {
  implicit val arbPercentage: Arbitrary[Percentage] = numeric.intervalClosedArbitrary
  implicit val shrinkPercentage: Shrink[Percentage] = shrinkFrom(Percentage)

  private def shrinkFrom[A <: Refined[B, _], B: Shrink](ops: RefinedTypeOps[A, B]): Shrink[A] = Shrink { a =>
    shrink(a.value).flatMap { shrunk =>
      ops.from(shrunk).fold(_ => Stream.empty, Stream(_))
    }
  }
}
```

```scala
import com.geneious.nucleus.service.util.generators.CommonRefinedTypeGenerators._

trait JobStatusGenerators {
  implicit val arbRunningJobStatus: Arbitrary[Running] = MkArbitrary[Running].arbitrary
  implicit val shrinkRunningJobStatus: Shrink[Running] = MkShrink[Running].shrink
}
```
I wonder if there's a way to set seed for all the random values.
Maybe not a ScalaCheck-Shapeless bug _per se_, but after switching from Scala 2.12.3 with `-Xlint` enabled I began getting unused value warnings for implicit `Arbitrary` instances for (Shapeless) tagged types in scope.

To illustrate:

```scala
// build.sbt

name := "sample"
version := "0.1"

scalaVersion := "2.12.3"
scalacOptions :=
  "-Xfatal-warnings" ::
    "-Xlint" ::
    Nil

libraryDependencies ++=
  "com.chuusai" %% "shapeless" % "2.3.3" ::
    "com.github.alexarchambault" %% "scalacheck-shapeless_1.13" % "1.1.8" % Test ::
    Nil
```

```scala
// src/test/scala/Unused.scala

import org.scalacheck.Arbitrary._
import org.scalacheck.ScalacheckShapeless._
import org.scalacheck._
import shapeless.tag
import shapeless.tag._

object Unused {

  sealed trait Foo
  case class Bear(s: String, i: Int @@ Foo)

  val gen: Gen[Bear] = {
    implicit val arbFoo: Arbitrary[Int @@ Foo] = Arbitrary(arbitrary[Int].map(tag[Foo].apply[Int]))
    arbitrary[Bear]
  }

}
```

That works fine with `2.12.3`, but assigning `2.12.4` to `scalaVersion` and recompiling results in:

```
sbt:sample> ;clean;test:compile
[success] Total time: 2 s, completed Jan 28, 2018, 1:44:20 PM
sbt:sample> set scalaVersion := "2.12.4"
sbt:sample> ;clean;test:compile
[error] /tmp/sample/src/test/scala/Unused.scala:13:16: local val arbFoo in value gen is never used
[error]                 implicit val arbFoo: Arbitrary[Int @@ Foo] = Arbitrary(arbitrary[Int].map(tag[Foo].apply[Int]))
[error]                              ^
```

Setting `-Xlint:-unused,_` gets this compiling with 2.12.4.

Can support for arbitrary tagged types be added to ScalaCheck-Shapeless?
I looked on your profile for a public e-mail or means of contacting you, but I could find none. I just wanted to let you know that this is the first [Shapeless](https://github.com/milessabin/shapeless)-based project that I've been able to understand just by reading its source. You have done a very good job in designing your codebase. I hope you continue to develop this project. ðŸ˜„ 