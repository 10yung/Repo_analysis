Greetings SANS Blue Team,

Under **Examples**, current example commands for Metasploit PowerShell target (security) and Metasploit PowerShell target (system) are a repeat of the previous native commands.

Metasploit PowerShell target (security) should be ```.\DeepBlue.ps1 .\evtx\metasploit-psexec-powershell-target-security.evtx``` and Metasploit PowerShell target (system) should be
```.\DeepBlue.ps1 .\evtx\metasploit-psexec-powershell-target-system.evtx```

I can fork, fix, and send you a pull request if you prefer.
Cheers, Russ 
While trying my luck with SANS' holiday hack challenge this year, I realized that the password spray attack detection was not implemented in Python.

I looked at the PowerShell version, and tried to port the same logic in Python. This seems to work on the example file:
```
[mfred@localhost DeepBlueCLI]$ python DeepBlue.py evtx/password-spray.evtx 

Distributed Account Explicit Credential Use (Password Spray Attack)
The use of multiple user account access attempts with explicit credentials is 
an indicator of a password spray attack.

Target usernames: Administrator celgee eskoudis jwright smisenar dpendolino thessman
Accessing username: jwrig
```
I have an issue where where the script local (-log) or remote (-file) arguments shows no results. There is no error so it looks like it cannot find anything even though there are event IDs that should match on the "Microsoft-Windows-PowerShell/Operational.evtx" log. 

Can you please help me to troubleshoot this?
Updated the logic in deepwhite-collector.ps1 to handle Sysmon v8.00 schema
Get-winevent will accept the computer name parameter but for some reason DNS resolution inside the parameter breaks the detection engine. To fix this it appears that passing the ipv4 address will return results as expected. Needs additional testing to validate data is being detected correctly from remote logs.

Code changes to DeepBlue.ps1 --------

line 37
#Checking the Computer var and converting it to an address
If ($computer -ne ""){
    $ips = [System.Net.Dns]::GetHostAddresses($computer) 
    $ips = $ips | select -ExpandProperty IPAddressToString
}


Line 70
        #Run Get-WinEvent with the -Computer switch only if the computername was passed
        If ($computer -ne ""){
        $events = iex "Get-WinEvent -ComputerName $ips $filter -ErrorAction Stop"
        }
        Else{
        $events = iex "Get-WinEvent  $filter -ErrorAction Stop"
        }
this would make it alot easier to run the script as a pre-parser on data coming in from winlogbeat /logstasah before being sent to elasticsearch db

Two new parameters:

- path (specifies where to save output)
- format (default value is "txt", supports "csv")

Example:
Process evtx file and save results to current directory in CSV format:

\DeepBlue.ps1 -file .\evtx\psattack-security.evtx -format csv -path ./


- Add All option to be able to query all the logs that DeepBlue can
  analyze
- Incorporate the regex and whitelist into the script to be able to
  launch it from the memory
- Create Process-Events to be able to add further improvements easily

I tried to preserve at least part of the previous text output by using the Write-{Verbose,Debug,Warning} functions

I've found that the descriptions (or Message attribute) look much better when piped to Format-List because they are output as arrays and don't get enough screen real estate otherwise

Thoughts on the output formats or anything else? Suggestions are always welcome
