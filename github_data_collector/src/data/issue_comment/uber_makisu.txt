**Describe the bug**
`ADD tarball.tar.gz /` is supposed to unpack the said tarball into the root. Instead, it just copies it into it.

**To Reproduce**
The specific Dockerfile I ran into this at:
```
FROM scratch
    
ENV LANG=C.UTF-8
ENV LC_ALL=C.UTF-8

ARG DEBIAN_FRONTEND=noninteractive
  
ARG OSPACK=debian.tar.gz
ADD ${OSPACK} /

RUN apt-get update
```
Here, `debian.tar.gz` is a minimal Debian rootfs tarball.

**Expected behavior**
The tarball is unpacked, so that I can run commands using its contents.

Instead, I’m getting:
```
info	* Step 6/7 (modifyfs) : ADD debian.tar.gz /  (465a0d0c)
info	* Execute ADD debian.tar.gz /  (465a0d0c) took 91.261753ms
info	* Not committing step ADD debian.tar.gz /  (465a0d0c)
info	* Step 6/7 (modifyfs) : RUN apt-get update  (d6692f4c)
error	failed to execute build plan: execute stage: build stage 0: build node: do execute: execute step: cmd start: exec: "sh": executable file not found in $PATH
```
While using the Redis store and registry cache, layers appear to be pushed, but are not found on a subsequent build. I don't see any errors, so not sure how to debug this yet. 

Build 1:

```
1.576489987395279e+09	info	* Committed gzipped layer sha256:40881dfc64eb3030e36164ff8b7dfb642ae77e98dc5f179a60be12064cdfeaee (204271643 bytes)
1.576489987395642e+09	info	* Pushing with cache ID 421889e8
```

Build 2:

```
1.5764936221543481e+09	error	Failed to fetch intermediate layer with cache ID 421889e8: find layer 421889e8: layer not found in cache
 ```


**Describe the bug**
An environment variable used in ENTRYPOINT is not substituted with its value at runtime.

**To Reproduce**
Assume a dockerfile:
```
FROM alpine:latest
ENTRYPOINT echo ${MESSAGE}
```
Build it with docker (works as expected):
```
docker build -t makisu-echo-docker .
docker run -e MESSAGE=hello makisu-echo-docker
>hello
```

Build it with makisu (unexpected output):
```
makisu_build -t makisu-echo .
docker run -e MESSAGE=hello makisu-echo
>${MESSAGE} /bin/sh
```

**Expected behavior**
I expect ENTRYPOINT to change dynamically with respect to the environment variable.
The output above should be "hello".

**Additional context**
I'm using makisu 0.1.12 and docker 19.03.3

Fixes case where /home/rihan/bar/etc/alternatives/pager is symlinked to /bin/more. Without this change TrimRoot fails when it tries to trim fs.tree.src from linkTarget.
**Is your feature request related to a problem? Please describe.**
Similar to #185 , we need to use `COPY --chown` to change file ownership while creating our image.   In our organization, we are not permitted to run makisu in a container or use chroot (main reasons we are drawn to makisu), so using `--modifyfs` isn't really an option for us.   

**Describe the solution you'd like**
Please make `COPY --chown` work without `--modifyfs`.   I heard from @yiranwang52 there is already a TODO in the code to make this work... 

**Describe alternatives you've considered**
Would love to hear some :)

**Additional context**
Sample Dockerfile which reproduces the issue:
```
FROM alpine
COPY --chown=0:0 . /srv
```

Thanks! (and thanks for making Makisu!)
**Describe the bug**
Building the redis:5.0 image succeeds with docker build, fails with makisu.
Looks like a Dockerfile parsing error

Error message :
```1.572061455197557e+09   info    * Step 8/15 (modifyfs) : RUN set -eux;          savedAptMark="$(apt-mark showmanual)";  apt-get update;         apt-get install -y --no-install-recommends         c
a-certificates          wget                            gcc             libc6-dev               make    ;       rm -rf /var/lib/apt/lists/*;            wget -O redis.tar.gz "http://download.redis.
io/releases/redis-5.0.6.tar.gz";        echo "6624841267e142c5d5d5be292d705f8fb6070677687c5aad1645421a936d22b3 *redis.tar.gz" | sha256sum -c -;         mkdir -p /usr/src/redis;        tar -xzf red
is.tar.gz -C /usr/src/redis --strip-components=1;       rm redis.tar.gz;                grep -q '^  (c8fc8ee1)                                                                                      
1.572061455198217e+09   error   Command exited with 2                                                                                                                                               
                                                                                                                                                                                                    
1.572061455198289e+09   error   sh: 1: Syntax error: Unterminated quoted string                                                                                                                     
                                                                                                                                                                                                    
1.572061455281933e+09   error   failed to execute build plan: execute stage: build stage 0: build node: do execute: execute step: cmd wait: exit status 2                                           
```

**To Reproduce**
```
git clone https://github.com/docker-library/redis.git
cd redis/5.0
makisu build -t redis:5.0 .
```
where the last line evaluates to :
```
docker run -i --rm --net host -v /var/run/docker.sock:/docker.sock -e DOCKER_HOST=unix:///docker.sock -v $HOME/redis/5.0:/makisu-context -v /tmp/makisu-storage:/makisu-storage makis
u:v0.1.11 build --log-fmt=console -t redis:5.0 --commit=explicit --modifyfs=true --load /makisu-context
```

**Expected behavior**
makisu build should succeed where docker build succeeds


Makisu offers two logging formats, --log-fmt=json and --log-fmt=console.  Many users would be used to a "docker build" command line experience, but neither log-fmt offers the same type of human-readable output.  The "console" format is more human-readable than json, but it could be improved.

Observations
1. Unusually, the timestamp for --log-fmt=console is reported in nanos-since-epoch in an exponential format, e.g. `1.571969064344166e+09`
2. Printing the log level (info / error) is only useful when grepping for errors, but often error is not an error, but when the RUN command prints to stderr 
3. When RUN commands output a trailing newline, console logger prints it and still adds its own

Suggestions
1. An improvement would be to make the timestamp an RFC-3339 or ISO-8601 format, or print ISO-8601 at the start and later log lines print {seconds.micros} since makisu start
2. Docker omits printing "info" when printing standard messages, and stderr is printed in red.  This gives a human readable output.
3. Trim trailing newlines when echoing to the terminal as console logger prints its own newline


**Describe the bug**

1. Used `makisu_build` and `docker build` on the same `Dockerfile`
1. Used `docker inspect` and see that the makisu image is about double the size

**To Reproduce**
Steps to reproduce the behavior:
```
$ cat Dockerfile
FROM openjdk:11-jdk-slim
RUN apt-get update && apt-get install -y netcat curl && rm -rf /var/lib/apt/lists/*
```
```
$ docker build -t java11-test-docker.build .
$ makisu_build -t java11-test-makisu.build .
```
```
$ docker inspect java11-test-docker.build | grep -i size
        "Size": 406372276,
        "VirtualSize": 406372276,
$ docker inspect java11-test-makisu.build | grep -i size
        "Size": 807171944,
        "VirtualSize": 807171944,
```

**Expected behavior**
I expected the images to be very close in size or the makisu generated image to be smaller

**Environments**
```
$ type makisu_build
makisu_build is a function
makisu_build ()
{
    makisu_version=${MAKISU_VERSION:-v0.1.11};
    cd ${@: -1};
    docker run -i --rm --net host -v /var/run/docker.sock:/docker.sock -e DOCKER_HOST=unix:///docker.sock -v $(pwd):/makisu-context -v /tmp/makisu-storage:/makisu-storage gcr.io/makisu-project/makisu:$makisu_version build --commit=explicit --modifyfs=true --load ${@:1:${#@}-1} /makisu-context;
    cd -
}
```
```
$ docker --version
Docker version 19.03.4, build 9013bf5
```
```
$ sw_vers
ProductName:	Mac OS X
ProductVersion:	10.14.6
BuildVersion:	18G103
```
**Additional context**
Add any other context about the problem here--environment configurations, logs, etc.

Being able to use Makisu in a chroot would enable the build of docker images with no access to a containerizer. It would mean that we no longer need a fresh container to be created for a build to work. This PR will most likely change a fair amount over time as we assess our approach.
**Describe the bug**
Saw build failure like:
```
failed to execute build plan: execute stage: build stage phase2: build node: do execute: execute step: copy dir /makisu-storage/sandbox/sandbox275362224/stages/cGhhc2Ux/usr/share to dir /usr/share: copy dir contents /makisu-storage/sandbox/sandbox275362224/stages/cGhhc2Ux/usr/share/zoneinfo to /usr/share/zoneinfo: copy dir contents /makisu-storage/sandbox/sandbox275362224/stages/cGhhc2Ux/usr/share/zoneinfo/Africa to /usr/share/zoneinfo/Africa: copy file /makisu-storage/sandbox/sandbox275362224/stages/cGhhc2Ux/usr/share/zoneinfo/Africa/Lusaka to /usr/share/zoneinfo/Africa/Lusaka: chmod /usr/share/zoneinfo/Africa/Lusaka: chmod /usr/share/zoneinfo/Africa/Lusaka: too many levels of symbolic links|
```