Hi!

Thank you for your amazing book! I have learned a lot from it.

When I read the code in http-server/v5, I found the use of RWMutex was wrong. In the method `RecordWin()`，we need to modify the value of the store, so it should be unsafe in concurrency and use a write lock.  In the method `GetPlayerScore()`，we just read the data, so we can use a read lock. The situation was also mentioned in #297. I have fixed it now.
Nice repo, great attention to detail. Mostly :)

1. Go file names should be with_underscores.go, e.g. file_system_store.go not FileSystemStore.go
2. Block comments should be full sentences i.e. include trailing punctuation

Hi, great tutorial/book, thank you so much.

Anyways, about 75% into the page on Maps, I think the code in gitbook doesn't acknowledge necessary chage to assertError, `if got == nil` part needs to go. Github version is fine.

Once again thank you for the wonderful Go intro.
Probably another way of synchronizing access, that is worth mentioning here would be using `sync/atomic` package, which is arguably more suitable for given problem and is more performant by its nature compared to the mutex.

```
// Inc the count
func (c *Counter) Inc() {
	atomic.AddInt32(&c.value, 1)
}
```
The course states:

>  Pointers let us point to some values and then let us change them. So rather than taking a copy of the Wallet, we take a pointer to the wallet so we can change it.
> 
> func (w *Wallet) Deposit(amount int) {
>     w.balance += amount
> }
> 
> func (w *Wallet) Balance() int {
>     return w.balance
> }
> The difference is the receiver type is *Wallet rather than Wallet which you can read as "a pointer to a wallet".
> 
> Try and re-run the tests and they should pass.
> 
> Now you might wonder, why did they pass? We didn't dereference the pointer in the function, like so:
> 
> func (w *Wallet) Balance() int {
>     return (*w).balance
> }
> and seemingly addressed the object directl

However in this example, it seems that you only need the pointer in `Deposit()`, which is changing the balance, and not in `Balance()` which is merely returning it. Indeed, **if you take out the asterisk in the former, it breaks, but if you take it out in the latter it still passes**. Given you highlight the pointer in `Balance()` rather than in `Deposit()`, this could do with explaining/revising?

Thank you so much for a brilliant course.
Not sure whether you want to mention this as a strategy, but in the arrays and slices section you have:

> It's important to note that reflect.DeepEqual is not "type safe", the code will compile even if you did something a bit silly. To see this in action, temporarily change the test to:
> 
> func TestSumAll(t *testing.T) {
> 
>     got := SumAll([]int{1,2}, []int{0,9})
>     want := "bob"
> 
>     if !reflect.DeepEqual(got, want) {
>         t.Errorf("got %v want %v", got, want)
>     }
> }
> What we have done here is try to compare a slice with a string. Which makes no sense, but the test compiles! So while using reflect.DeepEqual is a convenient way of comparing slices (and other things) you must be careful when using it.
> 
That is really good to know, but it might be worth adding that if instead of using %v you had used the stricter %d in tErrorf, then the test would not compile, as it was expecting integers but got a string. So type checking your fmt output may be a good practice to recommend when testing numerical slices and arrays, particularly when using reflect.DeepEqual.

Totally new to Go and working through your brilliant curriculum. Let me know if I missed something obvious or using %d has a gotcha I don't know about. 
The issue I have is with the code sample at this step in the Roman Numerals kata https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/roman-numerals#write-enough-code-to-make-it-pass-7.

I have
```go
type RomanNumeral struct {
	Value  int
	Symbol string
}

type RomanNumerals []RomanNumeral

func (r RomanNumerals) ValueOf(symbol string) int {
	for _, s := range r {
		if s.Symbol == symbol {
			return s.Value
		}
	}

	return 0
}

...
//later
func ConvertToArabic(roman string) int {
	total := 0

	for i := 0; i < len(roman); i++ {
		symbol := roman[i]

		if i+1 < len(roman) && symbol == 'I' {
			nextSymbol := roman[i]

			potentialNumber := string([]byte{symbol, nextSymbol})

			value := RomanNumerals.ValueOf(potentialNumber)

			if value != 0 {
				total += value
				i++
			} else {
				total++
			}
		} else {
			total++
		}
	}

	return total
}
```

I get an error that
```
not enough arguments in call to method expression RomanNumerals.ValueOf
        have (string)
        want (RomanNumerals, string)
```
Why does the `RomanNumberals.ValueOf` method require a `RomanNumerals` as the first argument?
The problem is fixed when I pass a variable of the type `[]RomanNumeral` as the first argument.
```go
var allRomanNumerals = []RomanNumeral{
	{1000, "M"},
	{900, "CM"},
	{500, "D"},
	{400, "CD"},
	{100, "C"},
	{90, "XC"},
	{50, "L"},
	{40, "XL"},
	{10, "X"},
	{9, "IX"},
	{5, "V"},
	{4, "IV"},
	{1, "I"},
}

...
value := RomanNumerals.ValueOf(allRomanNumberals, potentialNumber)
```
When I do this the tests still fail.
Shouldn't `sync.RWMutex.RLock` be used in the `GetPlayerScore` method and `sync.RWMutex.Lock` in the `RecordWin` method ?
https://studygolang.gitbook.io/learn-go-with-tests
Can not open the link above
Should be `parallelized`. Great book btw!
```
jbirms:learn-go-with-tests(master)$ ag paralell
concurrency.md
468:We have paralellized the part of the code that we wanted to make faster, while
```