
I want to develop the component in Java.But I can't find detailed description of ProgressiveJpeg format when searching on Google.Please guide me where I can get detailed information about ProgressiveJpeg.
The title of this github repository is "Download and decode progressive JPEGs on iOS." But it doesn't do the very thing that Progressive JPEG was invented to do:

**Progressively** download and decode JPEGs on iOS

It misuses NSURLSession to grab ALL the data (a process that takes 99% of the total time) then decodes it.

Please rewrite to use NSURLSession in stream mode, so that is passed to your CGDataProvider in bursts, decoding what you can and writing it to the screen as the data comes in.

In CCBufferedImageDecoder , you create your CGDataProvider with an NSData, but by the time you have the NSData, 99% of the time of fetching and displaying the image has already elapsed, making progressive jpeg decoding pointless.





When I try to include this in an iOS 9 project, I get errors about bitcode support not being available on a certain ARM architecture. As a result, I have to disable bitcode for my entire app.

Hello!

I have been trying to use Concorde in a iOS project with the following code:

```
if let url = NSURL(string: produto.imagem!.url!){
        let imagem = CCBufferedImageView(frame: cell.imageView!.frame)
        imagem.load(url)
        cell.addSubview(imagem)
}
```

produto.imagem is a Contentful Asset and url value currently is: 
url NSURL   "https://images.contentful.com/765kywdqo8as/1u0UQOzrSEyAIYoY8CgaiU/743112ca52714a9739b7550fb83a43e2/3479738_wallsPetroleum_01.png"  0x00007feba3861590

When I execute my code I only get grey placeholders and never an image.

On the other hand I have tried using ContentfulPersistence with the following code:

```
let imagem = CCBufferedImageView(frame: cell.imageView!.frame)
imagem.cda_setImageWithPersistedAsset(produto.imagem!, client: source!.client, size: imagem.frame.size, placeholderImage: nil)
cell.addSubview(imagem)
```

Then I get the following error:
    fatal error: should never be called: file /Users/rafael/Trabalho/Bier Leverpilsen/Pods/Concorde/Code/CCBufferedImageView+Contentful.swift, line 18

Any help would be appreciated! I have been struggling for a while!

Currently, a new instance of `CCBufferedImageDecoder` is created for each new chunk of data received. Works, but we could be more efficient, especially considering that it'll allocate a new output buffer each time.

Can be based off this:

``` cpp
template <J_COLOR_SPACE colorSpace>
void setPixel(ImageFrame& buffer, ImageFrame::PixelData* currentAddress, JSAMPARRAY samples, int column)
{
    JSAMPLE* jsample = *samples + column * (colorSpace == JCS_RGB ? 3 : 4);

    switch (colorSpace) {
        case JCS_RGB:
            buffer.setRGBA(currentAddress, jsample[0], jsample[1], jsample[2], 0xFF);
            break;
        case JCS_CMYK:
            // Source is 'Inverted CMYK', output is RGB.
            // See: http://www.easyrgb.com/math.php?MATH=M12#text12
            // Or: http://www.ilkeratalay.com/colorspacesfaq.php#rgb
            // From CMYK to CMY:
            // X =   X    * (1 -   K   ) +   K  [for X = C, M, or Y]
            // Thus, from Inverted CMYK to CMY is:
            // X = (1-iX) * (1 - (1-iK)) + (1-iK) => 1 - iX*iK
            // From CMY (0..1) to RGB (0..1):
            // R = 1 - C => 1 - (1 - iC*iK) => iC*iK  [G and B similar]
            unsigned k = jsample[3];
            buffer.setRGBA(currentAddress, jsample[0] * k / 255, jsample[1] * k / 255, jsample[2] * k / 255, 0xFF);
            break;
    }
}
```
