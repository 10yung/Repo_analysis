I am experiencing a strange issue, it seems that the state machine does not wait for the `Enter` Coroutine to finish its execution before executing the `Update` function

```c#
  IEnumerator NextRound_Enter()
  {
    Debug.Log("NextRound Enter 1");
    yield return new WaitForSeconds(2f);
    Debug.Log("NextRound Enter 2");
  }

  void NextRound_Update()
  {
    Debug.Log("NextRound Updating");
  }
```

see the logs attached:

<img width="423" alt="Screen Shot 2019-11-25 at 6 01 04 PM" src="https://user-images.githubusercontent.com/63174/69513730-9e6e2980-0fad-11ea-84e2-8b42fb4ec67e.png">

This is a great library, and I really wish that this functionality work. 

This is due using dictionary without IEqualityComparer implementation. Not sure if it's possible to create an generic enum version
For some reason, this code will load the level instantly on _Enter, instead of waiting until the MainMenu_Enter.

    private AsyncOperation load = new AsyncOperation();

    void Intro_Enter()
    {
        // Preload Level
        StartCoroutine(PreLoadLevel());
    }

    void Intro_Update()
    {
        _introTimer += Time.deltaTime;

        if (_introTimer > _introLength)
            _fsm.ChangeState(States.MainMenu);
    }

    void MainMenu_Enter()
    {
        // Show preloaded level
        load.allowSceneActivation = true;
    }

    IEnumerator PreLoadLevel()
    {
        load = SceneManager.LoadSceneAsync("scene", LoadSceneMode.Additive);
        load.allowSceneActivation = false;
        yield return null;
    }

Moving the StartCoroutine out into the Start function will work as expected...
Can this line then be removed?


StateMachine/StateMachine.cs(60,29): warning CS0414: The private field `MonsterLove.StateMachine.StateMachine<T>.ignoredNames' is assigned but its value is never used
Code like below will rise `NullReferenceException` because of `fsm` not yet  initialized :
```C#
    public class TestClass: MonoBehaviour
    {
        void Start()
        {
            InitFSM();
        }

        // FSM
        StateMachine<States> fsm;

        enum States
        {
            Init,
            Running,
        }

        void InitFSM()
        {
            fsm = StateMachine<States>.Initialize(this, States.Init);
        }

        void Init_Enter()
        {
            fsm.ChangeState(States.Running); // NullReferenceException
        }

    }
```
`Init_Enter()` called before `fsm` had been initialized.
And the temporary solution is use
```C#
fsm = StateMachine<States>.Initialize(this);
fsm.ChangeState(States.Init);
```
instead of
```C#
fsm = StateMachine<States>.Initialize(this, States.Init);
```
https://github.com/thefuntastic/Unity3d-Finite-State-Machine/blob/53a80d9bbc5353db534a8d9919ee7b74c33ca2ec/example_project/Assets/MonsterLove/StateMachine/StateMachine.cs#L350

This never evaluates to true, so always the next return line is executed, which produces undesirable behavior:

https://github.com/thefuntastic/Unity3d-Finite-State-Machine/blob/53a80d9bbc5353db534a8d9919ee7b74c33ca2ec/example_project/Assets/MonsterLove/StateMachine/StateMachine.cs#L352

The condition should check if the lastState.state is null:

`if (lastState.state == null) return default(T);`
It seems that when the "methods" variable gets set in the public StateMachine const, it only grabs the methods for the top-level class.  I have a class that inherits from another that actually contains the callbacks for the FSM.  However, the inheriting class's methods get set, not the actual ".Initialize(this)" class.

I see removing the BindingFlags.DeclaredOnly flag will fix this, but is there a better way?
As soon as I open the example project, I get this error...

error CS1703: An assembly `Mono.Cecil' with the same identity has already been imported. Consider removing one of the references
Assets/UnityTestTools/IntegrationTestsFramework/Libs/Mono.Cecil.dll (Location of the symbol related to previous error)
C:/Program Files/Unity 5.6.2f1/Editor/Data/Managed/Mono.Cecil.dll (Location of the symbol related to previous error)

If I remove that file, then I get even more errors.

If I read the source correct, it is forbidden to pass the current state as new state parameter to the ChangeState method:

`if (currentState == nextState) return;`

Any reasons for that?
I have some kind of waypoint system an actor is patrolling.
Within the respective _Enter method I initialize movement, within the respective _Exit method I choose the next waypoint.
So proceed to the next waypoint could be an elegant ChangeState() call, passing the current state again, resulting in calling Enter->Update->Exit chain again.

Any reasons you're not supporting this?

Thank you.
Quick PR to add support for `OnTriggerEnter` and `OnTriggerExit` to the StateMachine.