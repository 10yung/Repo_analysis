### Summary

When implementing custom `Duality.Components.Renderer` that caches vertex data, my objects rendered pitch-black, unless I purge cache every frame.

### How to reproduce

Cache vertex data instead of recreating it every frame.

### Workaround

Clone vertex data before sending it to `DrawDevice`. Works for me, I don't care about performance for now.

### Analysis

Documentation for `DrawDevice.AddVertices` claims that "ownership of the buffer remains at the callsite, while the IDrawDevice copies the required data into internal storage". Debugging reveals that `Color` field in my vertex data is modified after visiting this method.

It seems that in "picking mode" vertex color is being overridden in-place. I guess cloning vertex buffer before picking mode shenanigans would fix this, but not sure about performance implications.

https://github.com/AdamsLair/duality/blob/8455bd9649861e61787c24e56fe5447bafba084b/Source/Core/Duality/Drawing/DrawDevice.cs#L489

### Attachments

- [Render output example](https://i.imgur.com/YSnzi2n.png)

The tile palette active selection can now be: 
* moved with the shift+arrow keys,
* expanded on a given side using alt+arrow keys, and
* shrunk on a given side using shift+alt+arrow keys.
This functionality is also available when the tilemap editor is in focus. 

This behaviour is slightly different from what was mentioned in ticket #733, but I thought this made more sense. The reason I didn't use the arrow keys by themselves for moving the selection as specified was that the arrow keys are used for a different purpose already in the tilemap editor view.


### Summary

An IndexOutOfRange exception is thrown if the selected Tilemap's Tileset is switched. This exception only occurs if the Tileset has been painted on with Tiles that have a higher index than the new Tileset's maximum index. I also noticed that sometimes the tile pallette is not updated with the new Tileset. 

### How to reproduce

- Create two Tilesets, one with more tiles than the other
- Create a Tilemap with the larger Tileset
- Paint on the Tilemap with the highest index Tile in the Tileset
- Set the Tilemap's Tileset to the smaller one by dragging it into the Tileset section of the Tilemap in the object inspector
- Try painting on the earlier painted tile

### Workaround

- Don't switch the Tileset on a Tilemap that has already been painted on (this is probably a rare case anyway)
- If you want to switch the Tileset but don't care about the painted tiles, Set them all to the zero index tile (top left corner) before switching the Tileset

### Analysis

- Exception is thrown at `Tile.cs:291` when in the `UpdateAutoTileCon` method
- Problem seems to be that the Tilemap has tiles with invalid indexes on them
- Maybe there needs to be a check for these invalid tiles before executing any paint action on them to reset them to normal


### Summary
It think at some points, it would be useful to rearrange (move up, move down) items in a list.

**Example scenario:**
Creating a custom render setup: If you want to add a render step between existing render steps, you have to create a new list and do all the steps again. meh.

Here is a screenshot, how we could implement this. Adding two buttons (Up and Down) in the object inspector. As soon as the user selects an item in the list, the two buttons gets enabled.

![image](https://user-images.githubusercontent.com/6233308/66045164-6d302a80-e523-11e9-94eb-d3d72abb541a.png)

This is a reworked implementation of the first, much more complex implementation (see PR #674) and takes into account all the comments to the previous version.
In addition to PR #706, the capability to Reset a WaitCondition has been added, and useless backup files (unreferenced anyway) have been removed from the repository.
### Summary
I think it would be useful, if you could group properties of a single class, especially when you have many properties.

At the moment, the EditorHintCategory-Attribute is only available for classes.

Example:
```CSharp
// This is a Resource File

[EditorHintRange(0, 1000)]
public float Mass { get; set; } = 300f;

public SpaceshipType Type { get; set; } = SpaceshipType.Multipurpose;

[EditorHintCategory("Sound")]
public ContentRef<Sound> AmbientSound = new ContentRef<Sound>();

[EditorHintCategory("Sound")]
public ContentRef<Sound> EngineSound = new ContentRef<Sound>();
```

The grouped "Sound"-Properties could stored in the "Spoiler"-Like-Control....

![image](https://user-images.githubusercontent.com/6233308/65876993-e9433a80-e38a-11e9-95b2-980d24750827.png)


What do u think? 
**This is a work in progress**

This is an initial PR for https://github.com/AdamsLair/duality/issues/747

The core of the functionality works for anyone that wants to play around with it. Add some things to the scene and change the camera transform angle and camera tilt values to see the world rotate around you.

# TODOs:
1. Source/Core/Duality/Utility/Log/VisualLogEntries/VisualLogTextEntry.cs does something with the transform Angle when drawing. Not familiar with this feature so will have to investigate if this is now broken and how to fix it if it is.
2. Source/Plugins/Tilemaps/Core/Tilemaps/TilemapCulling.cs `GetVisibleTileRect` is probably broken with this change, need to investigate a fix.
3. Write some samples that show a couple ways of doing orthographic/isometric rendering that take advantage of being able to set the camera tilt.
  a) A basic sample that renders the terrain as is and then uses "billboard rendering" to draw things that stand vertically in the scene.
  b) A sample using sprite stacking (stacking the sprites over the z axis).
  b) A sample using basic 3d models (a collection of rotated sprites) to create terrain.
  c) A Camera shake demo?

# Things to discuss:
1. I changed `DrawDevice.ViewerAngle` into `DrawDevice.ViewerOrientation`, should I leave `ViewerAngle` alone to make sure this is not a breaking change?
2. Setting the Camera.Tilt in the editor over or under 360 does not wrap in the same way that the Transform.Angle does. Seems like there is some special editor logic in https://github.com/AdamsLair/duality/blob/master/Source/Plugins/EditorBase/PropertyEditors/Components/TransformPropertyEditor.cs#L220 that does that. Do we want that for this Tilt value as well?
3. Currently storing the three camera tilt/orientation values as Euler angles and then applying them to the view matrix in a very specific order, rotation around Z axis first, then around Y, then X. Probably would be better to store the rotation as quaternions as that should reduce the cost of producing the rotation matrix. Not really sure if this is necessary at the moment since we do not expect a lot of camera rotations occurring during runtime, and if I remember my math correctly, the main advantage of quaternions is the speed/stability of combining rotations together. Is that something we want extended support for? What do people think? Should we convert to using quaternions internally?
4. Related to the item above (as in we will probably want to do that if we want to do this item), there is a bunch of helper methods in the Transform object for performing angle changes, do we want to offer some similar methods for Camera tilt? If Camera shake is something we want first class support for, then this is probably a good idea.
5. Additional test ideas?

### Summary

When passing a matrix to the shader via the Camera or DrawDevice's `shaderParameters` the resulting matrix in the shader is a transposed version of the passed in matrix.

### How to reproduce

Since debugging a shader is quite difficult, I am not sure how to demonstrate this. I ran into this when passing a matrix to the shader code but you can also see this behavior with the default duality view Matrix and shader code. Let me describe the flow,

1. The view matrix is constructed as a combination of a Translation and Rotation [here](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Drawing/DrawDevice.cs#L702)
2. The view matrix is passed to the shader but also used as part of the full matrix in [`IsSphereInView`](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Drawing/DrawDevice.cs#L425)
3. The [`Vector4.Transform`](https://github.com/AdamsLair/duality/blob/master/Source/Core/Primitives/Math/Vector4.cs#L464) method treats the vector as a 1x4 row based matrix when multiplying it against the passed in 4x4 matrix. From a math perspective this is like putting the vector on the left (rowVector * matrix), vs putting it on the right (matrix * columnVector).
4. Alternatively in the [shader](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/EmbeddedResources/BuiltinShaderFunctions.glsl#L16) the multiplication is backwards and the vector is being used as a column vector. This works fine since the matrix has been transposed from the original and is actually how the [glsl docs](https://en.wikibooks.org/wiki/GLSL_Programming/Vector_and_Matrix_Operations) (search for transposed) recommend getting and using a transposed matrix.

### Workaround

In the shader code to multiply against the original matrix put the vector on the right (instead of the left) when performing the multiplication.

```glsl
  mat4 result = myPassedInMatrix * someVector;
```

This is pretty straight forward but still extremely confusing when trying to debug why your shader is broken.

### Analysis

When the [`ShaderParameterCollection`](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Drawing/ShaderParameterCollection.cs#L243) serializes the matrix it does it row by row, but when [glsl](https://www.khronos.org/opengl/wiki/Data_Type_(GLSL)) creates a matrix it reads the data column by column.

### Summary

With Duality moving to a render pipeline that just passes through a view matrix it would be relatively straight forward to support rotating the camera along more than just the Z axis. This would make it easier for games to perform isometric rendering and setup the ground work for full 3d support without having to do it all in one step.

### Analysis

I tried a while ago to make an isomorphic game in duality with mixed results. I ended up spending a lot of time mucking with the `depthOffset` field to get the rending order right. I ended up writing an algorithm to adjust the depth offset based on how close an image was to the bottom of the screen. This was not to bad but gets more complicated as you also have two types of images, those that represent the ground as well as those that represent things standing vertically on top of the ground. I could never get the depth algorithm to work quite right for these vertical images (as they are always above the ground but need to adjust their depth to one another based on an arbitrary "middle" point that is usually not the middle of the image). It is not uncommon for one of these images (say a tall building) to be closer to the bottom of the screen relative to another vertical image yet supposed to be behind that image. I tried a variety of solutions, manually setting objects to a given depth layer, defining the "middle point" of a given image and using that to set the `depthOffset`, splitting the image into pieces and setting those pieces depth offset's separately. Needless to say it was a constant pain.

In my current project I want to do isomorphic rendering again but this time around need to also have the horizontal terrain be height based. Reliving the pain of doing isomorphic rendering is unsettling but achievable but now adding height to the terrain is past the point of what I really want to be doing in a 2d engine. I am a huge fan of Duality (it lets me code in fsharp) and I saw your [post](https://blog.adamslair.net/posts/2017-12-30/duality-dev-update/) on the rendering pipeline updates so was inspired to see if I could add support for this through a plugin.

#### Demo (using only existing plugin points)

I was able to add support for this through just using built in plugin points but it required a good amount of duplication of duality's internals.

![2019_8_16_DemoOf3dRenderingInDuality](https://user-images.githubusercontent.com/11470527/63737917-cfb74c00-c83c-11e9-9e9e-18f51cd48333.gif)

To make it work I essentially had to overwrite the view matrix being used by the default vertex shader and the default visibility strategy.

To do this I first had to capture my desired camera rotation inputs, since the camera and transform components are sealed I created a custom component to hold onto the camera orientation fields. To get these fields into the shader render pipeline I created a custom render setup that `override`d the `OnRenderScene` function adding some logic to find each camera in the scene, extract the orientation fields from my custom component, construct the new view matrix (using rotated camera direction vectors and a [`calculateLookAtMatrix` algorithm](https://www.geertarien.com/blog/2017/07/30/breakdown-of-the-lookAt-function-in-OpenGL/) and finally added my new view matrix as an extra shader parameter (that I called `actualViewMatrix`). Then I updated all of my materials to use a duplicated version of the default [minimal shader](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/EmbeddedResources/Minimal.vert) except that it now uses my passed in view matrix instead of the [default](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/EmbeddedResources/BuiltinShaderFunctions.glsl#L16).

With that, rendering in the game view (for both orthographic and projection modes) started working correctly except now culling was broken.

To fix culling I needed to update the `device.IsSphereInView` function used by [DefaultRendererVisibilityStrategy.QueryVisibleRenderers](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Components/Other/DefaultRendererVisibilityStrategy.cs#L52). Since all of the fields in `DefaultRendererVisibilityStrategy` where private, to do that I ended up duplicating it into a custom version along with the [IsSphereInView](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Drawing/DrawDevice.cs#L420) function. That unfortunately was not as simple as copy pasting the `IsSphereInView` method since it uses the combined view and projection matrices. Since the projection matrix is inaccessible I had to calculate it myself (by duplicating [UpdateProjectionMatrix](https://github.com/AdamsLair/duality/blob/master/Source/Core/Duality/Drawing/DrawDevice.cs#L713)). I then was able to get at my view matrix by pulling it from the shader parameters where it was set by my custom render setup function. Now that I had a version of the `IsSphereInView` function using my custom view matrix, the culling behavior improved but was still not quite right when the camera was rotated around the x/y axis and a sprites z position ended up behind the camera. To fix that I had to adjust the `IsSphereInView` functions bounds check. Here is the new code (in Fsharp)

```fsharp
  member __.IsSphereInView(projectionMatrix: ProjectionMatrix, fullMatrix: Matrix4, worldPosition: Vector3, radius: float32) =
    // Transform coordinate into clip space
    let worldPositionFull = Vector4(worldPosition, 1.0f)
    let mutable clipPosition =
      Vector4.Transform(worldPositionFull, fullMatrix)

    // If the perspective divide is near zero or negative, we know it's something behind the camera. Discard.
    if clipPosition.W < 0.000000001f
    then
      false
    else
      // Apply the perspective divide
      let inverseOfClipW = 1.0f / clipPosition.W
      clipPosition.X <- clipPosition.X * inverseOfClipW
      clipPosition.Y <- clipPosition.Y * inverseOfClipW
      clipPosition.Z <- clipPosition.Z * inverseOfClipW
      let clipRadius =
        Vector3(
          radius * MathF.Abs(projectionMatrix.Value.Row0.X) * inverseOfClipW,
          radius * MathF.Abs(projectionMatrix.Value.Row1.Y) * inverseOfClipW,
          // this was added
          radius * MathF.Abs(projectionMatrix.Value.Row2.Z) * inverseOfClipW
        )

      // Check if the result would still be within valid device coordinates
      let result = 
        // the line below was changed from clipPosition.Z >= -1.0f
        clipPosition.Z >= -1.0f - clipRadius.Z
        // the line below was changed from -> && clipPosition.Z <= 1.0f
          && clipPosition.Z <= 1.0f + clipRadius.Z
          && clipPosition.X >= -1.0f - clipRadius.X
          && clipPosition.X <= 1.0f + clipRadius.X
          && clipPosition.Y >= -1.0f - clipRadius.Y
          && clipPosition.Y <= 1.0f + clipRadius.Y

      result
```

So to summarizes once I got past all of the access issues by duplicating  code I only needed to make the following changes,
1. A way to specify the camera orientation
2. Update the view matrix to orient the camera in the specified camera orientation
3. Update the `IsSphereInView` function to do sphere bounds checking against the z axis as well

#### Demo Caveats

With my extension approach I could not get the scene editor's object movement UI to align with the objects renderer position. The CamView camera was especially bad since the axis where all misaligned, the scene view camera was a little better since the x/y axis aligned but the UI was still off centered. I believe that if camera orientation was built in then at least the CamView camera would be better since it would correctly update the view matrix to its own orientation (along the z axis looking down). I could not figure out how to hook into the editor's rendering pipe to do this from an extension point of view.

#### Implementation Approaches

In my summary above I described the three steps needed for basic support for this
1. A way to specify the camera orientation
2. Update the view matrix to orient the camera in the specified camera orientation
3. Update the `IsSphereInView` function to do sphere bounds checking against the z axis as well

2 and 3 are relatively straight forward, 1 on the other hand is more difficult. I see a couple of different approaches to specifying the camera orientation.

1. Update the Transform components `angle` to be a `Vector3` representing the rotation around each axis. This is how other 3d engines do this but would mean that a lot more would need to be updated to make the x and y fields make sense for other component types. Personally, I don't think this is a good next step as it feels like it is almost equivalent to adding full 3d support. Initially it would mean updating existing components and editor tooling to respect the camera orientation, but also updating things like the 2D rigid body system to also be orientable. Would people also expect new built in resources and components for model rendering? Large undertaking that my guess is not a current priority.
2. Add an orientation `Vector3` to the `Camera`. Simpler than 1 as only things impacted by the camera would need to be updated. I believe this mostly just includes the editor tooling. This solution is a little weird as the `Camera` today gets its zAxis orientation from its `GameObj`'s `Transform` (Link the two together?). Would also mean that if you decide to move to solution 1 later then that would be a breaking change.

An alternative to  adding support for specifying the camera orientation would be to instead add support for the `RenderSetup` to be able to adjust the view matrix used by a `Camera` (or some other plugin point). With this approach, would still need to update the `IsSphereInView` function to do the bounds check against the z-axis but I don't think we would need to completely fix the editor UI (I am fine with editing the view matrix putting some of the tools a little out-of-warranty). This approach would mean that in the demo above I would only have the camera orientation component and a custom render setup.

Curious to hear what you think and I am happy to put a pull request together. Just need to know what solution idea would be preferred.

Migrated our netframework projects that did not use windows forms. Other netframework projects that need to use windows forms (as in use the form editor, just referencing windows forms is fine) need to be done at a later point.

Tested:
- Build works (also on CI)
- Unit tests work
- Can open up duality (both editor and launcher)

Partially completes #737 