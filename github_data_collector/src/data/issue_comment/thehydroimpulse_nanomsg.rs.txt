I would like to be able to somehow pass path to the C sources of `nanomsg`, when feature `bundled` is set - that way I don't have to rely on `git` and I can easily choose which version of `nanomsg` will the crate be compiled against. Is it doable and if so would maintainers consider incorporating this feature into the crate?

I can see that `nanomsg-sys` [checks](https://github.com/thehydroimpulse/nanomsg.rs/blob/master/nanomsg_sys/build.rs#L13) if `nanomsg/.git` path exists, but it's not clear to me that working directory is it checking - I have C `nanomsg` in my project directory as git's submodule but it doesn't look like `nanomsg-sys` finds it.
rustc 1.11.0 (9b21dcd6a 2016-08-15)

```
src/main.rs:4:5: 4:26 error: unresolved import `std::io::timer::sleep`. Could not find `timer` in `std::io` [E0432]
src/main.rs:4 use std::io::timer::sleep;
                  ^~~~~~~~~~~~~~~~~~~~~
src/main.rs:4:5: 4:26 help: run `rustc --explain E0432` to see a detailed explanation
src/main.rs:3:5: 3:34 error: module `duration` is private
src/main.rs:3 use std::time::duration::Duration;
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/main.rs:12:28: 12:34 error: mismatched types [E0308]
src/main.rs:12     let mut buffer = [0u8, ..1024];
                                          ^~~~~~
src/main.rs:12:28: 12:34 help: run `rustc --explain E0308` to see a detailed explanation
src/main.rs:12:28: 12:34 note: expected type `u8`
src/main.rs:12:28: 12:34 note:    found type `std::ops::RangeTo<_>`
src/main.rs:14:11: 14:33 error: no associated item named `milliseconds` found for type `std::time::Duration` in the current scope
src/main.rs:14     sleep(Duration::milliseconds(50));
                         ^~~~~~~~~~~~~~~~~~~~~~
src/main.rs:16:23: 16:28 error: no method named `write` found for type `nanomsg::Socket` in the current scope
src/main.rs:16     match push_socket.write(b"foobar") {
                                     ^~~~~
src/main.rs:16:23: 16:28 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
src/main.rs:16:23: 16:28 help: candidate #1: `use std::io::Write`
src/main.rs:21:23: 21:27 error: no method named `read` found for type `nanomsg::Socket` in the current scope
src/main.rs:21     match pull_socket.read(&mut buffer) {
                                     ^~~~
src/main.rs:21:23: 21:27 help: items from traits can only be used if the trait is in scope; the following trait is implemented but not in scope, perhaps add a `use` for it:
src/main.rs:21:23: 21:27 help: candidate #1: `use std::io::Read`
error: aborting due to 4 previous errors
error: Could not compile `nanomsgtest`.
```

The linked documentation at http://thehydroimpulse.github.io/nanomsg.rs/nanomsg/struct.Socket.html does not match the actual code in the repository (the type signature of `read_to_end` is what tripped me up).

# Why?

The MIT license requires reproducing countless copies of the same copyright
header with different names in the copyright field, for every MIT library in
use. The Apache license does not have this drawback, and has protections from
patent trolls and an explicit contribution licensing clause. However, the
Apache license is incompatible with GPLv2. This is why Rust is dual-licensed as
MIT/Apache (the "primary" license being Apache, MIT only for GPLv2 compat), and
doing so would be wise for this project. This also makes this crate suitable
for inclusion in the Rust standard distribution and other project using dual
MIT/Apache.
# How?

To do this, get explicit approval from each contributor of copyrightable work
(as not all contributions qualify for copyright) and then add the following to
your README:

```
## License

Licensed under either of
 * Apache License, Version 2.0 ([LICENSE-APACHE](LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)
 * MIT license ([LICENSE-MIT](LICENSE-MIT) or http://opensource.org/licenses/MIT)
at your option.

### Contribution

Unless you explicitly state otherwise, any contribution intentionally submitted
for inclusion in the work by you shall be dual licensed as above, without any
additional terms or conditions.
```

and in your license headers, use the following boilerplate (based on that used in Rust):

```
// Copyright (c) 2015 t developers
// Licensed under the Apache License, Version 2.0
// <LICENSE-APACHE or
// http://www.apache.org/licenses/LICENSE-2.0> or the MIT
// license <LICENSE-MIT or http://opensource.org/licenses/MIT>,
// at your option. All files in the project carrying such
// notice may not be copied, modified, or distributed except
// according to those terms.
```

And don't forget to update the `license` metadata in your `Cargo.toml`!
# Contributor checkoff
- [x] @blabaere
- [x] @thehydroimpulse
- [ ] @glycerine
- [x] @dcbishop
- [x] @Ryman
- [x] @lawlerd
- [x] @GGist
- [x] @polyfractal
- [x] @danburkert
- [x] @bfops
- [x] @musitdev
- [x] @mystal
- [x] @pwoolcoc

 Downloading nanomsg v0.4.2
thread '<unnamed>' panicked at 'called `Result::unwrap()` on an `Err` value: A requested feature, protocol or option was not found built-in in this libcurl due to a build-time decision.', ../src/libcore/result.rs:732
thread '<main>' panicked at 'called `Result::unwrap()` on an `Err` value: Any', ../src/libcore/result.rs:732

@thehydroimpulse I noticed the appveyor script is using the nightly build of rust while the travis one is using version 1.0.0. How do we go on with this now ?

@GGist This means that as long as the travis build is ok, the appveyor should be ok too, but the opposite maybe true only as  long as no new feature of rust are used.

Since some public parts (Reader, Writer, Duration ...) of nanomsg.rs won't make it in Rust 1.0, we will probably end up with a branch for the Rust 1.0 and another one for Rust nightly.
@thehydroimpulse  Which one should be the master ?

Since the inner value is a numeric id, it could be useful when debugging.

If we want to be compatible with the stable Rust 1.0, we won't be able to depend on or use syntax extensions, which link-config is composed of. Not to mention it's breaking every other day because of the compiler churn.

The rust nightly build cc19e3380 2014-12-20 introduced the warning reproduced below.
This drew my attention to the fact this conflicting lifetime name wasn't even used in the function !
So after resolving the name conflict, I changed the signature parameter to actually use that named lifetime but this had the effect of **breaking almost all unit tests** !!! :boom: 

With this modification, it becomes impossible to retrieve the endpoint and then to send or receive a message. For example you can use `test_bind` alone, but not `test_bind` and then `test_write`.
Calling directly `bind` without storing the result in variable and then `write` works fine.
Storing the NanoResult or the Endpoint will cause a compilation error. 

> cannot borrow `push_socket` as mutable more than once at a time.

It looks like constraining the lifetime of the Endpoint to the one of the Socket makes the Endpoint a 'borrower' of the Socket.

I will post something on reddit and add the link here when done.
##### Signature before and after the change:

``` rust
fn bind<'b, 'a: 'b>(&mut self, addr: &str) -> NanoResult<Endpoint<'b>>
fn bind<'b, 'x: 'b>(&'x mut self, addr: &str) -> NanoResult<Endpoint<'b>>
```
##### Warning:

```
   Compiling nanomsg v0.3.0 (file:///home/travis/build/thehydroimpulse/nanomsg.rs)
/home/travis/build/thehydroimpulse/nanomsg.rs/src/lib.rs:203:21: 203:23 warning: lifetime name `'a` shadows another lifetime name that is already in scope
/home/travis/build/thehydroimpulse/nanomsg.rs/src/lib.rs:203     pub fn bind<'b, 'a: 'b>(&mut self, addr: &str) -> NanoResult<Endpoint<'b>> {
                                                                                 ^~
/home/travis/build/thehydroimpulse/nanomsg.rs/src/lib.rs:123:6: 123:8 help: shadowed lifetime `'a` declared here
/home/travis/build/thehydroimpulse/nanomsg.rs/src/lib.rs:123 impl<'a> Socket<'a> {
                                                                  ^~
/home/travis/build/thehydroimpulse/nanomsg.rs/src/lib.rs:203:21: 203:23 help: shadowed lifetimes are deprecated and will become a hard error before 1.0
```
