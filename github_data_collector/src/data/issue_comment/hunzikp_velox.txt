Hi.  First up, I think velox is a great and much-needed initiative, kudos there!  It has the potential to speed up a bunch of my tasks.

Now I have buttered you up, is there any plan to include raster arithmetic like simple +,-,*,/ ?  Maybe even a function like raster::calc?  This would be really amazing.  

Or do you have a work around which will still be faster than using the raster package?

I'm cross posting this from the GIS Stack Exchange:  https://gis.stackexchange.com/questions/314950/all-geotiff-raster-values-na-after-converting-to-velox

----

I'm able to extract average tree cover values for each of the three small counties in the US State of Delaware, but I don't seem to have enough CPU or RAM to do the same thing for all counties in the US.

*I'm getting my tree cover data from https://prd-tnm.s3.amazonaws.com/StagedProducts/Small-scale/data/LandCover/tree48i0100a.tif_nt00840.tar.gz.  See also https://www.sciencebase.gov/catalog/item/581d0548e4b08da350d52653* 

``` 
library(raster)
library(tigris)

tigris.state.counties <- counties(state = 10)
tree.raster <-
  raster("tree48i0100a.tif")

polygon.trees <-
  extract(tree.raster,
          tigris.state.counties,
          fun = mean,
          na.rm = TRUE)

report <-
  cbind.data.frame(tigris.state.counties$NAME, polygon.trees)

print(report)

  tigris.state.counties$NAME polygon.trees
1                 New Castle      70.75920
2                     Sussex      68.17089
3                       Kent      67.00225


```

So I have set up an R environment on a 64 GB AWS instance, and I'm trying to take advantage of the `velox` fast extraction.  But all of the values I extract are `NA`.

**What am I doing wrong?**

***UPDATE:  I still get NAs even if I use the [small polygon option][1]***

*FWIW, I was able to replicate the [velox extract tutorial][2] and even modify it to get the night light intensity in the Delaware counties.* 

**My attempt to extract tree cover in Delaware counties with velox:**

```
library(velox)
library(tigris)

tree.velox <- velox("tree48i0100a.tif")

tigris.state.counties <- counties(state = 10)

tree.mean.mat <-
  tree.velox$extract(
    sp = tigris.state.counties,
    fun = function(x)
      mean(x, na.rm = TRUE)
  )

report <-
  cbind.data.frame(tigris.state.counties$NAME, tree.mean.mat)

print(report)

     tigris.state.counties$NAME tree.mean.mat
591                  New Castle            NA
1150                     Sussex            NA
2861                       Kent            NA

```

  [1]: http://philipphunziker.com/velox/extract.html


Hi,  
in `pointextract.cpp` there is an input `NumericVector dim` which is unused. Wondered if it should be removed for tidiness? 


I missed a standard deviation filter. The raster::focal version is not usable at all for large data sets. 
Hi,

the following example always leads to an unexpected crash of my R session.

```
library(raster)
library(velox)

r <- raster(xmn = 0, xmx = 10, ymn = 0, ymx = 10, res = 0.1)
r[] <- runif(ncell(r))
v <- velox(r)

l <- spLines(cbind(c(2, 8), c(2, 8)))

v$extract(sp = l, fun = mean)
             
sessioninfo::session_info()
─ Session info ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.5.1 (2018-07-02)
 os       Ubuntu 18.04.1 LTS          
 system   x86_64, linux-gnu           
 ui       RStudio                     
 language en_US:en                    
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       Europe/Berlin               
 date     2019-02-11                  

─ Packages ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 package     * version date       lib source        
 assertthat    0.2.0   2017-04-11 [1] CRAN (R 3.5.1)
 class         7.3-14  2015-08-30 [4] CRAN (R 3.5.0)
 classInt      0.2-3   2018-04-16 [1] CRAN (R 3.5.1)
 cli           1.0.1   2018-09-25 [1] CRAN (R 3.5.1)
 codetools     0.2-15  2016-10-05 [4] CRAN (R 3.5.0)
 crayon        1.3.4   2017-09-16 [1] CRAN (R 3.5.1)
 DBI           1.0.0   2018-05-02 [1] CRAN (R 3.5.1)
 e1071         1.7-0   2018-07-28 [1] CRAN (R 3.5.1)
 lattice       0.20-35 2017-03-25 [4] CRAN (R 3.5.0)
 magrittr      1.5     2014-11-22 [1] CRAN (R 3.5.1)
 raster      * 2.8-4   2018-11-03 [1] CRAN (R 3.5.1)
 Rcpp          0.12.19 2018-10-01 [1] CRAN (R 3.5.1)
 rgdal         1.3-6   2018-10-16 [1] CRAN (R 3.5.1)
 rgeos         0.4-2   2018-11-08 [1] CRAN (R 3.5.1)
 rstudioapi    0.8     2018-10-02 [1] CRAN (R 3.5.1)
 sessioninfo   1.1.0   2018-09-25 [1] CRAN (R 3.5.1)
 sf          * 0.7-2   2018-12-20 [1] CRAN (R 3.5.1)
 sp          * 1.3-1   2018-06-05 [1] CRAN (R 3.5.1)
 spData        0.2.9.4 2018-09-15 [1] CRAN (R 3.5.1)
 units         0.6-1   2018-09-21 [1] CRAN (R 3.5.1)
 velox       * 0.2.0   2017-12-01 [1] CRAN (R 3.5.1)
 withr         2.1.2   2018-03-15 [1] CRAN (R 3.5.1)
 yaml          2.2.0   2018-07-25 [1] CRAN (R 3.5.1)

[1] /home/jsigner/R/x86_64-pc-linux-gnu-library/3.5
[2] /usr/local/lib/R/site-library
[3] /usr/lib/R/site-library
[4] /usr/lib/R/library
```

Several focal function are available in Velox, such as `$meanFocal`, `$medianFocal` and `$sumFocal`. Usually in statistical analysis other basic function such as *standard deviation*, *min* and *max* are need. Any plans to include these in the future?
Just found Velox earlier today and it looks promising for something I'm working on. This is more an idea than an issue for you. I need area weighted means for what I'm working on, wondering if you can drop one particular clause in this if and it would get you there to find all points that intersect or overlap, then I could get apply the area weights myself, but I need all the points that overlap or intersect my polygons.  In theory, if you dropped the length(missing.idx)>0 from this if, would it then extract all the raster points where the box overlaps and where the centroid intersects? Just a thought.

 if (small & length(missing.idx) > 0 & !isLine) {

      # Create box grid, boost geometries, intersect
      boostBoxGrid <- boost(.self, box = TRUE)
      missing.boost <- geomc.boost[missing.idx]
      intrs.ls <- bg_intersects(missing.boost, boostBoxGrid)
....
Hello,

I'm trying to extract raster data from a grid of points (right now, n=8), but I keep getting am ambiguous error message, and I don't have any idea why. This seems like a fairly straightforward operation with Velox. I guess it could be something wrong with my code? I have followed the vignette pretty closely, however.

Any help you could offer would be greatly appreciated!

```
#----Loading NLCD raster----
nlcd=raster(file_name)

#----Generating overall outline of selected states----
states.full = c("Maine", "New Hampshire", "Vermont", "Massachusetts",
                "Rhode Island", "Connecticut", "New York", "Pennsylvania",
                "New Jersey")
us = raster::getData('GADM', country = 'US', level = 1)

#----Generating regular grid within that outline----
st.contour <- us[us$NAME_1 %in% states.full,]
st.contour = spTransform(st.contour, CRS("+proj=laea +x_0=0 +y_0=0 +lon_0=-74 +lat_0=40 +units=m"))
grid <- makegrid(st.contour, cellsize = 250000) # cell-size in +units=m
grid <- SpatialPoints(grid, proj4string = CRS(proj4string(st.contour)))
date() ; grid <- grid[st.contour, ] ; date()

#----Cropping the nlcd raster----
grid.r = spTransform(grid, crs=crs(nlcd))
grid.r@bbox = matrix(c(1550000.0, 2550000.0, -434099.8, 722809.3), 2,2, byrow=T) # Extending bbox so all buffers fall on raster
nlcd.crop = crop(nlcd, grid.r)
nlcd.vx <- velox(nlcd.crop)
# I have also tried: nlcd.vx = velox(stack(nlcd.crop))

#----Creating polygon buffers----
spol <- gBuffer(grid.r, width=500, byid=TRUE)
spdf <- SpatialPolygonsDataFrame(spol, data.frame(id=1:length(spol)), FALSE)

#----Velox Extract----
date()
ex.mat <- nlcd.vx$extract(spdf)
ex.mat
date()

Error in boostFactory$makePointGrid(origin = origin, dim = dim, res = res) : 
  std::bad_alloc
```
Hi,

Thanks for such a great package. I am looking for a way to access the cell number(or lat long) of the values extracted using `velox_extract`. 

The goal is that the values can be modified and then replaced. 

I've looked through the examples on your website and the documentation but haven't seen anything. 

Ideally, it would return a similar result as ...

```r
# pl is a polyline
# r is a raster
elevations <- raster::extract(r, pl, cellnumber = T)[[1]]

head(elevations)

   cell    layer
1 1959129 22.73608
2 1960496 28.27165
3 1961863 35.43027
4 1963230 35.97610
5 1963231 35.62851
6 1964598 36.00765
```
but with all the benefits of your package!

Either the cell index or lat/lon would be awesome if you know a solution. 

Thank you!

Mike
How one can use the copy method to create a deep copy of a VeloxRaster object? 

Thanks