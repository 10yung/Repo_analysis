tldr , could whiteinge/ok.sh be of any use ?? 

( https://github.com/shellfire-dev/shellfire/blob/master/README.md : "github api - A complete command line, shell based GitHub client would be a real win."
(
... https://github.com/shellfire-dev/shellfire/issues/16 :eyeglasses: 
)
https://github.com/whiteinge/ok.sh : "A Bourne shell GitHub API client library focused on interfacing with shell scripts"
)
Koalaman still actively develops `shellcheck`.

While website version not process amount of code of `shellfire`
I installed `shellcheck` locally and:

```shell
shellcheck ./executable.sh
```

That way we can check any amount of code. It finds moments.

I find static code analysis the most pleasant thing. It reports, and you just sit and close all that moments overlooked in a minute a dozen.
And it gives links to explanations on why that check raised. It improved my shell style.

Despite Koalaman states on site that web static analysis services (CodeClimate and Codacy) has `shellcheck`, they probably dropped it. Because I checked-out and they not have shell supported now.

Maybe I will crawl someday to embody `shellcheck` with TravisCI.
I haven't looked into this project too much, but for dependencies between all the shell modules... have you seen: http://www.bpkg.io/?

First off, I like this framework!
Secondly, I am missing functions like this:
https://github.com/Anachron/os-install/blob/master/new/helpers/shell.sh#L51
https://github.com/Anachron/os-install/blob/master/new/helpers/shell.sh#L16

Is it possible to make some functions for this too? 

Command lines that start with an action are very useful. There are two variants:-
- Those that just take a command, eg `program describe --path my-path --`
- Those that allow specifying switches before and after, eg `git --verbose push --delete`

Allow `--quiet` and `--verbose` to take signed (`+` and `-`) quantities. At the moment `--quiet` is implicitly -1.

Improvements
- Short term
  - Add a runtime option to disable the dependency framework (perhaps an environment variable or file containing a value - eg use the conf framework)
  - Split up paths.d, it will become unmanageable
- Medium Term
  - Allow different packages to be specified by version of a distribution (eg lzma for Debian 6 or CentOS 5 rather than xz-utils)
    - Integrate this into swaddle, too, perhaps by getting fatten to output a list of dependencies
    - Get swaddle to build CentOS 5, etc specific repositories & packages
      - Solves a problem with BugURL and RPM hash algo choices for CentOS 5
      - Allows us to use xz compression of packages for more modern RPM and Deb based systems
  - Allow different repository names per distro (eg pandoc for CentOS 5 is not in EPEL)
  - Allow extensions to the repository discovery logic, so we don't have to keep modifying core (important for RedHat-derived distros, which have a myriad ways of installing repos)
  - Version max / min / equal pinning
  - A local path folder with symlinks which allows installation overrides (eg `/usr/lib/PROGRAM/path`)
  - How to manage dependencies 'in development', eg swaddle dependening on a new discotheque for disk management?
    - Long Term
  - A much more useful alternatives framework, that can check for programs and fallback

Add support for paths for Gentoo

Add support for paths for Arch Linux

Add support for paths for NetBSD
