I am getting unexpected behavior from `has_dirname` as a criterion:

## Reproducible example

Consider this reprex:
``` r
if (!dir.exists("tmp")) dir.create("tmp")
if (!dir.exists("tmp/foo")) dir.create("tmp/foo")
if (!dir.exists("tmp/boohoo")) dir.create("tmp/boohoo")
if (!dir.exists("tmp/foo/bar")) dir.create("tmp/foo/bar")

crit <- rprojroot::has_dirname("foo")
p <- rprojroot::find_root(criterion = crit, path = "tmp/foo/bar")
p
#> [1] "C:/Users/<username>/AppData/Local/Temp/RtmpmmXvM3/reprex52509e82288/tmp/foo"
crit$testfun[[1]]("tmp/foo")
#> [1] TRUE
paste(p, "is the root because ", rprojroot::get_root_desc(crit, p))
#> [1] "C:/Users/<username>/AppData/Local/Temp/RtmpmmXvM3/reprex52509e82288/tmp/foo is the root because  directory name is `foo`"

crit <- rprojroot::has_dirname("boohoo")
p <- rprojroot::find_root(criterion = crit, path = "tmp/foo/bar")
p
#> [1] "C:/Users/<username>/AppData/Local/Temp/RtmpmmXvM3/reprex52509e82288/tmp/foo"
crit$testfun[[1]]("tmp/foo")
#> [1] TRUE
paste(p, "is the root because ", rprojroot::get_root_desc(crit, p))
#> [1] "C:/Users/<username>/AppData/Local/Temp/RtmpmmXvM3/reprex52509e82288/tmp/foo is the root because  directory name is `boohoo`"

unlink(c("tmp/foo/bar", "tmp/foo", "tmp/boohoo", "tmp"))
```

<sup>Created on 2019-12-26 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

### Expected behavior

The documentation says:
> The `has_dirname()` function constructs a criterion that checks if the `base::dirname()` has a specific name

This makes it sound as though the function is checking whether the parent node of the candidate path (`base::dirname(path)`) has a given name. 

On the other hand, `get_root_desc()` says that `./tmp/foo` is a root because "directory name is `boohoo`", which makes it sound like the criterion is that the leaf node of the candidate path (`base::basename(path)`) has a given name.

**The documentation and the output from `get_root_desc` are confusing and seem inconsistent with each other.**

But in either case, based on the documentation and the output from `get_root_desc`, I would expect `find_root(crit, "tmp/foo/bar")` to fail with an error message when `crit` is `has_dirname("boohoo")` and for `crit.testfun[1]("tmp/foo")` to return `FALSE`.

## Actual behavior

However, the criterion really checks whether the parent node has a child with the given name. 

This means that a directory can fulfill the criterion if it has a sibling with the specified name, as in the example above: `tmp/foo` and `tmp/boohoo` are siblings, and `tmp/foo` satisfies the `has_dirname("boohoo")` criterion and `find_root(has_dirname("boohoo"), "tmp/foo/bar")` succeeds and returns `tmp/foo` instead of failing, as I would expect, and `has_dirname("boohoo").testfun[1]("tmp/foo")` returns `TRUE` instead of the expected `FALSE`

## Possible remedies:

### Update Documentation for `has_dirname()`

If this is the desired behavior, then it would be good to make the documentation clearer, and perhaps provide an example to illustrate the behavior.

### Change behavior of `has_dirname()`

If it is not the desired behavior, then changing the testfun from 
```
function(path) {
    dir.exists(file.path(dirname(path), "boohoo"))
}
```
to something like
```
function(path) {
  basename(dirname(path)) == "boohoo"
}
```
With this latter function, `tmp/foo/bar` would satisfy `has_dirname("foo")` and `tmp/foo` and `tmp/boohoo` would both satisfy `has_dirname("tmp")`, but `tmp/foo` would not satisfy `has_dirname("boohoo")` and `tmp/boohoo` would not satisfy `has_dirname("foo")`.

Alternately (another possible interpretation of the intended behavior) would be 

```
function(path) {
  dir.exists(path) && basename(path) == "boohoo"
}
```
In this case, `tmp/foo` would satisfy `has_dirname("foo")` and `tmp/boohoo` would satisfy `has_dirname("boohoo")`, but `tmp/foo` would not satisfy `has_dirname("boohoo")`.

## Session Info
```
R version 3.6.2 (2019-12-12)
Platform: x86_64-w64-mingw32/x64 (64-bit)
Running under: Windows 10 x64 (build 18363)

Matrix products: default

locale:
[1] LC_COLLATE=English_United States.1252  LC_CTYPE=English_United States.1252    LC_MONETARY=English_United States.1252
[4] LC_NUMERIC=C                           LC_TIME=English_United States.1252    

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] rprojroot_1.3-2

loaded via a namespace (and not attached):
[1] compiler_3.6.2  backports_1.1.5 tools_3.6.2     packrat_0.5.0  
```
Per discussions with @krlmlr this* functions [commit](https://github.com/r-lib/rprojroot/tree/4e4f70c0794542a5cfa6c3f66635388365616881) were migrated to [whereami](https://github.com/yonicd/whereami/tree/068b6cd65f2162da74b43537d1dc0d1c7a1913ae).
for easier discoverability.
* Just realised we have the tidytemplate applied to rprojroot and here packages, which are, in fact, r-lib packages! ðŸ˜³ 
I believe the package should import knitr.

I installed rprojroot on a new machine, and tried to run thisfile(), but had the following error message.
> thisfile()
Loading required namespace: knitr
Failed with error:  â€˜there is no package called â€˜knitrâ€™â€™

I installed knitr manually and then thisfile() worked.
I know this is small and happy to provide this as PR, bur there are occasions when it would be nice to test for a root without getting the error that `find_root()` throws.  It could be as simple as:

```
find_root_safe <- function(...) { 
        x <- NULL 
       try( x <- find_root(...), silent=TRUE )
      return(x)
 }
```
for consistency on Windows, like `fs::path_home()` does.

CC @jimhester.
Forward slashes work just fine on Windows in the majority of cases. Windows users might be tempted to use backslashes, but this might cause problems further down the line. Should we warn if a user attempts to create a path with a backslash?

```r
here::here("a\\b")
rprojroot::is_r_package("a\\b")
```

https://github.com/krlmlr/here/issues/7#issuecomment-351833319

CC @jennybc.
This turned out to be more involved than I expected, as there were some core assumptions in the code about vectors of `testfun` / `desc` being for `or` logic.

I refactored quite a bit, such that `testfun` is always a single function, and `desc` is always a single string, and the operators do a bit more work (but not much) to make that happen. 

I think it makes things more extensible, but it also may not be doable without potentially breaking things that others have done. If so, glad to look at alternate solutions.

The other downside is that the `format` output could not be so pretty so easily, as nesting of `|` with `&` at multiple levels would not be easy to deal with. I opted instead for very simple formatting: 

```
Root criterion: (contains a directory `src`) and (contains a directory `reports`)
```
Nice use of `|`; would love to test with `&`. Seems simple enough; I can try a PR if it would be reviewed!