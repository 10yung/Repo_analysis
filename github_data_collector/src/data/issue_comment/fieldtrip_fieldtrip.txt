Hi all, and in particular @mcvinding @robertoostenveld 

Here is a more thorough description of the issues I am encountering when using various options for ft_volumesegment of (maybe not so great quality) MRIs.

I've done several checks now, with permutations of 
1) coordsys ctf or acpc for ft_volumerealign
2) either with or without ft_volumereslice
3) spm8, and spm12 with either 'old' or 'new'

[Code](https://github.com/fieldtrip/fieldtrip/files/4080719/code.txt) attached, but the basics are:
```
mri = ft_read_mri([dirmri f(isub).name]);
cfg                     = [];
cfg.method              = 'interactive';
cfg.coordsys            = 'ctf';
mri_aligned_ctf         = ft_volumerealign(cfg,mri);
mri_reslice             = ft_volumereslice([], mri_aligned_ctf); 

% Segment anatomy
cfg                 	= [];
cfg.spmversion          = 'spm8';
cfg.output              = {'brain' 'scalp' 'skull'};
cfg.coordsyst               = 'ctf';
mri_segment_reslice_ctf_8   = ft_volumesegment(cfg, mri_reslice_ctf);
```
I've tried so many things that I don't even know anymore where/why artefacts are introduced, and which pipeline I should go for. The issue is the following:
ACPC with spm8, with or without reslicing seems fine
![image](https://user-images.githubusercontent.com/34679762/72663200-f7779e00-39ef-11ea-800c-efe6199e7e35.png)

CTF wiht spm8, artefact is introduced. I don't think it can be due to my placement of the fiducials, I've always done it this way but never saw this issue before.
![image](https://user-images.githubusercontent.com/34679762/72663137-3ce79b80-39ef-11ea-8503-9abc9b3d4d8b.png)

The artefact is more prominent with CTF but maybe because of some skull stripping with SPM12_old that is different for ACPC/CTF?
![image](https://user-images.githubusercontent.com/34679762/72664251-d6b54580-39fb-11ea-899f-3d466678fe91.png)

Finally, SPM12_new
![image](https://user-images.githubusercontent.com/34679762/72664254-e0d74400-39fb-11ea-9bde-0e1660377045.png)

SPM12 new is nicely segmenting the tumour in this case, better than SPM12 old, which is a good thing. But I still seem to have some artefacts (see picture above, the light blue pixels in the red box.
![image](https://user-images.githubusercontent.com/34679762/72664268-1845f080-39fc-11ea-96ec-cd6871f6f08b.png)

I've tried so many things by now that I'm a bit lost and don't know what is a real artefact, what I can ignore, which pipeline I should use, and whether this is an issue I should be reporting at all :)
But I promised @mcvinding I would do that, so here is the complete picture.


Somehow I accumulated a whole bunch of changes in my personal fieldtrip copy, which ended up under the `effect-size` branch. I should carefully review them prior to merging.  
As discussed with Robert, and initiated by the concrete question whether ft_appendfreq/timelock should optionally allow for cfg.select to be 'union', rather than the now only supported and hard-coded 'intersect', we identified that in general we may want to rethink this functionality for all
ft_functions that concatenate across a set of varargins{:}: ft_append..., ft_...statistics, ft_...grandaverage.

1) compile a list of relevant functions
2) rethink expected behavior, and the potential consequences of optional functionality
3) note that ft_selectdata (which should do the low-level selection in most cases) now does an either/or for all dimtoks. Probably expected behavior will be to be selective for certain dimtok. For instance, what is expected behavior when ft_appendtimelock is called with appenddim='chan', ft_selectdata should not exclude taking the union (if specified by the user) across the chan dimension to begin with. Hmmm.
Fixed the channel selection problem.
The fix is to to the channel selection on tmpdata instead of data, as it was done before
When I run to read the standard atlas;
 _**atlas = ft_read_atlas(fullfile(ftpath, 'template/atlas/brainnetome/BNA_MPM_thr25_1.25mm.nii'));**_

Matlab R 2019a throws
Array indices must be positive integers or logical values.

**_Error in ft_read_atlas (line 126)
    atlas.tissuelabel(idx)  = lab;_**

I am using latest git updated fieldtrip as of 13-12-2019 (5pm)
So far the option allow for overlap is not possible because the option is not retrieved and not taken into account by ft_fetch_data. With this modification, adding cfg.overlap = true will enable it when calling ft_redefintrial. Apparently this was to prevent some issues, but when you need to manually add some buffer that will be further removed, for instance, then it can become useful to have data overlap.
This occurs for example when ft_read_atlas is used to read Talairach-labels-2mm.nii (since the labels are stored in a separate text file)
Trying to create a ft_sensitivitymap function, translating [python code](https://github.com/mne-tools/mne-python/blob/master/mne/proj.py#L331-L453) from MNE. 

Started a [branch](https://github.com/dnacombo/fieldtrip/blob/feature/sensitivitymap/forward/ft_sensitivitymap.m). Code is more like a draft right now. Options are not implemented.

Testing it with the practicalMEEG dataset and copied bits of pipeline_sourceanalysis. The file sensitivity map that I get seems off.

Can you provide guidance?


Specified the 'extrapolation' parameter for interp1 to ensure data is not extrapolated. This can happen when cfg.time is used and times are given outside the range of the current data. The added parameter enforces that all values outside the data range are set to zero. 
(Add ?w=1 to github's URL to see the diff with whitespace ignored)
Several fixes and updates to read NeuroOmega and Blackrock's NSx files.
(Add ?w=1 to github's URL to see the diff with whitespace ignored) 