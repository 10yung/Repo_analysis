Hi,

I would like to write custom asserts for `javax.ws.rs.core.Response`. Most of it is straightforward. However I would like to assert the body of a response. But before accessing the body a call of `Response::readEntity` is necessary. Can I "fluently" unwrap a value and add an assertion to the resulting value?

E.g.:

```kotlin
assertThat(response).hasBody<MyType>().isDataClassEqualTo(MyType(constructorParam))
```

Where `hasBody` asserts that there is a body available and it can be deserialized to the requested type and then I can add other assertions to the resulting type?

Of course I could write an assert like:

```kotlin
assertThat(response).hasBodyDataClassEqualTo(MyType(constructorParam))
```

However, since the body of a response can be literally of any type, with this approach I need to delegate a lot of asserts.

Cheers
The kotlin version of `assertk` (not `assertk-jvm`) is not available on [mavenCentral()](https://repo1.maven.org/maven2/com/willowtreeapps/assertk/assertk/0.20/).

Is it not available anymore and should one also use `assertk-jvm` for pure Kotlin instead?

If I apply assertk-jvm-0.19 to a pure JVM module, Gradle 5.6 reports this:

```
   > Could not resolve com.willowtreeapps.assertk:assertk-jvm:0.19.
     Required by:
         project :core-test
      > Cannot choose between the following variants of com.willowtreeapps.assertk:assertk-jvm:0.19:
          - jvm-api
          - jvm-runtime
          - metadata-api
        All of them match the consumer attributes:
          - Variant 'jvm-api' capability com.willowtreeapps.assertk:assertk-jvm:0.19:
              - Unmatched attributes:
                  - Found org.gradle.libraryelements 'jar' but wasn't required.
                  - Found org.gradle.status 'release' but wasn't required.
                  - Found org.gradle.usage 'java-api' but wasn't required.
                  - Found org.jetbrains.kotlin.platform.type 'jvm' but wasn't required.
          - Variant 'jvm-runtime' capability com.willowtreeapps.assertk:assertk-jvm:0.19:
              - Unmatched attributes:
                  - Found org.gradle.libraryelements 'jar' but wasn't required.
                  - Found org.gradle.status 'release' but wasn't required.
                  - Found org.gradle.usage 'java-runtime' but wasn't required.
                  - Found org.jetbrains.kotlin.platform.type 'jvm' but wasn't required.
          - Variant 'metadata-api' capability com.willowtreeapps.assertk:assertk-jvm:0.19:
              - Unmatched attributes:
                  - Found org.gradle.status 'release' but wasn't required.
                  - Found org.gradle.usage 'kotlin-api' but wasn't required.
                  - Found org.jetbrains.kotlin.platform.type 'common' but wasn't required.
```

Should I apply the `jvm-runtime` artifact in this case?


In assertk the failure message is made up of 3 parts:
```kotlin
assertThat(Person("Sue", 22)).prop("name", Person::name).isEqualTo("Bob")
// -> expected [name]:<"[Bob]"> but was:<"[Sue]"> (Person(name=Sue, age=22))
```

`name: [name]` -> The 'name' of the object you are asserting on, this can be passed in with `assertThat(actual, name = "name")` and it's calculated automatically for some methods like `prop`.

`message: <"[Bob]"> but was:<"[Sue]">` the actual failure, expressed with `expected()` or `fail()`.

`context: (Person(name=Sue, age=22)` the object you are asserting on. There is currently no way to set this but it's displayed automatically when you are asserting on a piece of it with methods like `prop`.

The problem is there is no way to customize what's displayed for the context. If the class you are asserting on doesn't implement `toString()` in a useful way you are out of luck.

Some ideas to solve this:

1. Allow passing in a custom `context`

We can do this like you can pass in a custom `name` now. Would have to think about the name, not sure that context is the best name for this, not much thought was put into the naming as it's only used internally currently.

2. Allow some sort of customization of `show()`

Right now `show()` is hard-coded to handle specific platform types falling back to `toString()`. Need to think about the api for this, are we customizing all `shows()` in the assertion or just the context one?
On request in #70 OpenTest4j support was added, but that doesn't seem to exist in the classpath during test execution in IntelliJ:

```
java.lang.AssertionError: java.lang.NoClassDefFoundError: org/opentest4j/AssertionFailedError

	at my.package.MyTest.shouldVerifySomething(MyTest.kt:20)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
	at org.robolectric.RobolectricTestRunner$HelperTestRunner$1.evaluate(RobolectricTestRunner.java:600)
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)
	at org.robolectric.internal.SandboxTestRunner$2.evaluate(SandboxTestRunner.java:260)
	at org.robolectric.internal.SandboxTestRunner.runChild(SandboxTestRunner.java:130)
	at org.robolectric.internal.SandboxTestRunner.runChild(SandboxTestRunner.java:42)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.robolectric.internal.SandboxTestRunner$1.evaluate(SandboxTestRunner.java:84)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)
	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)
	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)
Caused by: java.lang.NoClassDefFoundError: org/opentest4j/AssertionFailedError
	at assertk.FailureKt.fail(failure.kt:98)
	at assertk.assertions.support.SupportKt.expected(support.kt:72)
	at assertk.assertions.support.SupportKt.expected$default(support.kt:69)
	at assertk.assertions.AnyKt$isInstanceOf$1.invoke(any.kt:209)
	at assertk.Assert.transform(assert.kt:26)
	at assertk.assertions.AnyKt.isInstanceOf(any.kt:204)
	... 26 more
Caused by: java.lang.ClassNotFoundException: org.opentest4j.AssertionFailedError
	at org.robolectric.internal.bytecode.SandboxClassLoader.getByteCode(SandboxClassLoader.java:163)
	at org.robolectric.internal.bytecode.SandboxClassLoader.maybeInstrumentClass(SandboxClassLoader.java:118)
	at org.robolectric.internal.bytecode.SandboxClassLoader.lambda$findClass$0(SandboxClassLoader.java:111)
	at org.robolectric.util.PerfStatsCollector.measure(PerfStatsCollector.java:50)
	at org.robolectric.internal.bytecode.SandboxClassLoader.findClass(SandboxClassLoader.java:110)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:424)
	at java.lang.ClassLoader.loadClass(ClassLoader.java:357)
	... 32 more
```
When running the test outside of the IDE, e.g. through Gradle, the dependency is apparently there and the assertion is properly hit.

I'm using assertk-jvm 0.13.

This might be related to https://github.com/joel-costigliola/assertj-core/issues/1072
It would be nice to have a `.withFailMessage(...)` method to be able to customize failures.

```kotlin
fun Assert<View>.viewIsNotEmpty() {
  assert(actual.childCount).withFailMessage("expected view to not be empty").isGreaterThan(0)
}
```
right now it's `containsAll(vararg Any?)` which it makes it too easy to accidentally pass in `listOf(foo)` instead of `*listOf(foo)`