Does LiteDB support update of a document (including potentially adding fields) to a document without loading the entire document into memory first?

I had a look at the documentation and tried performing two updates on the same document (with different shapes) in the same collection but the behaviour seems to be "last one wins".

Thanks

Download URL DB : [http://fujifilm.bytechdemo.com/CDB_DB.zip](http://fujifilm.bytechdemo.com/CDB_DB.zip)
DB PASSWORD : $cdb&admin12
Corrupted Table : CDB_INVENTORY

Question 1). How to compress the file (remove the logs created internally in the Lite DB). This DB is having only a single table but it is showing 50 MB of Size.

Question 2). CDB_INVENTORY table is corrupted. 
a). Can I know the possible reason for corruptions?
b). How to recover the data manually?
c). How to recover the data via C# Code?
d). I am not able to delete this table via code after this got corrupted. Is there any possibility to drop the collection even after it got corrupted.  


I have a database with 4 tables. When my app is trying to read one of the tables, it throws the exception. I tried to open my DB with LiteDB.Studio (version with LiteDB 4) and it opens everything flawlessly. Studio rewrites my DB file, i feed it to my app and get an error that it's not a proper DB file. What am I doing wrong. How can I restore my DB?


**Table reading exception log:**

```
System.InvalidCastException: Unable to cast object of type 'LiteDB.EmptyPage' to type 'LiteDB.DataPage'.
   at LiteDB.PageService.GetPage[T](UInt32 pageID)
   at LiteDB.QueryCursor.Fetch(TransactionService trans, DataService data)
   at LiteDB.LiteEngine.<Find>d__9.MoveNext()
   at LiteDB.LiteEngine.<Find>d__13.MoveNext()
   at LiteDB.LiteCollection`1.<Find>d__17.MoveNext()
   at System.Linq.Enumerable.WhereSelectEnumerableIterator`2.MoveNext()
```

`Insert`, `Update` and `Upsert` accepts `<T>`'s and evaluate itself for the `_id` but `Delete` doesn't have any API for `T` on v5 yet.
I'm currently using it as workaround `collection.Delete(database.Mapper.Serialize(keySelectorFunc(item)))`.
`keySelectorFunc` is `Func<object, T>` which picks the BsonId member.

I was trying use extension method for `LiteCollection<T>` like
```
public static bool Delete<T>(this LiteCollection<T> collection, T item){
    BsonValue id = // get id from BsonMapper's collection._mapper functionalities
    return collection.Delete(id);
}
```
but is not possible without accepting `BsonMapper` as argument or using `LiteCollection<T>._member` which is only visible as private. BsonMapper hides many things. And extending LiteCollection is not possible because it's sealed.
blazor, net core 3.1, litedb 5.0beta

when server start streaming data (enumerable) to client give error

if i use vs 5.0alpha2 not happen

sorry but at the moment i can't show the exception, anyway i see from the exception that litedb close the reader and the database, but after the program throw exception, seems that happen when some concurrent query must be elaborate, my main page have 2 components wich access trought grpc data on litedb, the first query finish correctly the 2nd not.
Hi, I looked at your project code out of interest and found a couple of warnings and decided to fix it.
We are having problems with accessing the LiteDB database with Hangfire implementation. We are using Hangfire.LiteDB (0.3.0) and looks like for concurrent access database is getting locked, which results in crashing the Hangfire jobs.  

I am referring your  documentation [here  ](https://github.com/mbdavid/LiteDB/wiki/Concurrency) and thread safe implementation is something what i am looking for. 

Could you share an example  of how to implement concurrency with hangfire jobs using ReaderWriterLockSlim?

first of all thank you for the great library. 
I have a dbLite collection of ITimeFramePolicy, i populate it with several different sub type instances. when i query that collection how does it project back to the correct types!

```
public interface ITimeFramePolicy
    {
        string Type { get; }
    }

public class DateRangePolicy : ITimeFramePolicy
    {
        public string Type => "date.range";
        public DateTime StartDate { get; private set; }
        public DateTime EndDate { get; private set; }
    }

public class DaysOfWeekPolicy : ITimeFramePolicy
    {
        public string Type => "days.of.week";
        public IEnumerable<DayOfWeek> Days { get; private set; }
    }
```
as you can see I added the `string Type{ get; }` there, but ended up not using it! how do you do it? :)
Got this error in **v.5.0.0-beta**:

_System.NotImplementedException: The method or operation is not implemented.
   at LiteDB.BufferSliceExtensions.ReadIndexKey(BufferSlice buffer, Int32 offset)
   at LiteDB.Engine.IndexNode..ctor(IndexPage page, Byte index, BufferSlice segment)
   at LiteDB.Engine.IndexService.AddNode(CollectionIndex index, BsonValue key, PageAddress dataBlock, Byte level, IndexNode last)
   at LiteDB.Engine.IndexService.AddNode(CollectionIndex index, BsonValue key, PageAddress dataBlock, IndexNode last)
   at LiteDB.Engine.LiteEngine.InsertDocument(Snapshot snapshot, BsonDocument doc, BsonAutoId autoId, IndexService indexer, DataService data)
   at LiteDB.Engine.LiteEngine.<>c__DisplayClass29_0.<Upsert>b__0(TransactionService transaction)
   at LiteDB.Engine.LiteEngine.AutoTransaction[T](Func`2 fn)
   at MigrationLibrary.DAL.Repository.Implementation.UserRepoLiteDb.Upsert(IEnumerable`1 listEntities) in C:\src\UserRepoLiteDb.cs:line 86_