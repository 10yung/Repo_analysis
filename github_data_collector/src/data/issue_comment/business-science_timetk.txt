In reference to issue #29 
tk_get_timeserie_summary returns an error

```r
library(tidyquant)
library(timetk)
library(tidyverse)

data(FANG, package = "tibbletime")

# Works with time-based tibbles
FB_tbl <- FANG %>% filter(symbol == "FB")
FB_idx <- tk_index(FB_tbl)

tk_get_timeseries_summary(FB_idx)
```

    Error in dimnames(x) <- dnx : 'dimnames' applied to non-array

The issue originates from the `get_timeseries_summary_date` function when trying to tidy a summary table object using `broom::tidy`. This might be a result of `broom::tidy.table` now being deprecated. 

A working fix is to substitute the `broom:tidy` function with `as.list`

As I stumbled upon this issue when using the [`anomalize`](https://github.com/business-science/anomalize) package I am not sure what kind #of output the `broom::tidy.table` would provide if it worked as intended. Using the suggested fix the output would look like this: 

```
# A tibble: 1 x 12
  n.obs start      end        units scale tzone diff.Min. `diff.1st Qu.` diff.Median
  <int> <date>     <date>     <chr> <chr> <chr>     <dbl>          <dbl>       <dbl>
1  1008 2013-01-02 2016-12-30 days  day   UTC       86400          86400       86400
# … with 3 more variables: diff.Mean <dbl>, `diff.3rd Qu.` <dbl>, diff.Max. <dbl>
``` 
Hello!

A bit of a random thought, and I may be completely missing something. But it looks to me like `timetk` has a bunch of dependencies in [`DESCRIPTION`](./DESCRIPTION) that are probably not needed? 

https://github.com/business-science/timetk/blob/3cde451d335f1ff2b684643f1a8e9209e82ac7a4/DESCRIPTION#L22-L47

Contrasted with:

https://github.com/business-science/timetk/blob/3cde451d335f1ff2b684643f1a8e9209e82ac7a4/NAMESPACE#L97-L98

I wanted to ask why some of these dependencies were there and if you would be amenable to a PR that tries to strip some of them out? If this is a convenience to the end-user, is this something that could be remedied with documentation? 

(i.e. `devtools` was a dependency that seemed to be unnecessary, just from my quick perusing). Again, I am completely open to the fact that I may be missing your hard dependence on these packages elsewhere in the repo. Thanks!

Cole

**EDIT:** I did some searching of the other packages, and functions are declared with `pkg::fun`, etc. and just not expressly imported. The reason for my request started with me wondering why `devtools` was a run-time dependency for one of my apps :smile:
I have a `data.table` called `dt` with a `POSIXct` column called `timestamp`. 

    > tk_xts(dt, date_var = timestamp)

gives the error: `Error in !syms : invalid argument type`. I tracked it down to line 11 of `tk_xts_.data.frame` where this call is made:

    ret <- dplyr::select_if(ret, is.numeric)
Hi!
`tibble`s are extended to deal with time in three packages (that I know of!): `timetk`, `tibbletime` and `tsibble`. I'm still trying to understand which package is best suited to use for what, and I find they have quite an overlap.

I know the former two packages are both created by you, have you considered joining forces with `tsibble`'s author to create a single, complete package?

Thanks for the nice packages!
Hi again,

After further playing around with timetk, I found another problem where tk_index() does not return the correct time-based index.

```
library(timetk)

# Create some hourly time series data.
data_tbl <- tibble::tibble(
  date = seq(from = as.POSIXct("2018-01-01 00:00:00", tz='Europe/Berlin'), by = 60*60, length.out = 5),
  x    = rnorm(5) * 10,
  y    = 5:1
)

```
The data_tbl date field is correct and tk_index() returns the correct time-base index from data_tbl
```
data_tbl
# # A tibble: 5 x 3
# date                     x     y
# <dttm>               <dbl> <int>
#   1 2018-01-01 00:00:00 -19.0      5
# 2 2018-01-01 01:00:00  13.0      4
# 3 2018-01-01 02:00:00 -23.9      3
# 4 2018-01-01 03:00:00 -14.8      2
# 5 2018-01-01 04:00:00   2.31     1

data_tbl$date
# [1] "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET" "2018-01-01 04:00:00 CET"

as.numeric(data_tbl$date)
# [1] 1514761200 1514764800 1514768400 1514772000 1514775600

tk_index(data_tbl) # Returns time-based index vector, consistent with previous results.
# [1] "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET" "2018-01-01 04:00:00 CET"

```
However, the tk_index() problem occurs after coercing data_tbl to a ts object using tk_ts().
```
data_ts <- tk_ts(data_tbl)
data_ts
# Time Series:
#   Start = 1 
# End = 5 
# Frequency = 1 
# x y
# 1 -19.018495 5
# 2  13.040283 4
# 3 -23.884440 3
# 4 -14.828830 2
# 5   2.310638 1
# attr(,"index")
# [1] 1514761200 1514764800 1514768400 1514772000 1514775600
# attr(,"index")attr(,"tzone")
# [1] Europe/Berlin
# attr(,"index")attr(,"tclass")
# [1] POSIXct  POSIXt
# attr(,".indexCLASS")
# [1] POSIXct  POSIXt
# attr(,"tclass")
# [1] POSIXct  POSIXt
# attr(,".indexTZ")
# [1] Europe/Berlin
# attr(,"tzone")
# [1] Europe/Berlin

```
tk_index returns the correct regularized index.

```
tk_index(data_ts, timetk_idx = FALSE) # Returns regularized index
# [1] 1 2 3 4 5
```
However, the time-based index is incorrect.

```
tk_index(data_ts, timetk_idx = TRUE)  # Returns original time-based index vector
# [1] "2017-12-31 23:00:00 CET" "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET"
# Warning message:
#   In check_tzones(e1, e2) : 'tzone' attributes are inconsistent

```
The same problem occurs when coercing data_tbl to an XTS object. Here we can see the XTS object has the correct time-based index.

```
# The xts object preservers the correct datetime stamps, but tk_index() does not return the correct datetime stamps.
data_xts <- tk_xts(data_tbl)
data_xts
#                              x y
# 2018-01-01 00:00:00 -19.018495 5
# 2018-01-01 01:00:00  13.040283 4
# 2018-01-01 02:00:00 -23.884440 3
# 2018-01-01 03:00:00 -14.828830 2
# 2018-01-01 04:00:00   2.310638 1
```
Get time-based index from xts object using index(), which returns the correct value.
```
zoo::index(data_xts)
# [1] "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET" "2018-01-01 04:00:00 CET"
```
As you can see below, tk_index() returns the wrong time-based index.
```
tk_index(data_xts, timetk_idx = FALSE) # Returns regularized index
# [1] "2017-12-31 23:00:00 CET" "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET"
# Warning message:
#   In check_tzones(e1, e2) : 'tzone' attributes are inconsistent

tk_index(data_xts, timetk_idx = TRUE)  # Returns original time-based index vector
# [1] "2017-12-31 23:00:00 CET" "2018-01-01 00:00:00 CET" "2018-01-01 01:00:00 CET" "2018-01-01 02:00:00 CET" "2018-01-01 03:00:00 CET"
# Warning message:
  # In check_tzones(e1, e2) : 'tzone' attributes are inconsistent
```

I hope this helps.
Hi, 

I'm trying to use an index based on POSIXct with the timezone set to a non UTC zone. Unfortunately, the tk_make_future_timeseries() does not handle the creation of future time series correctly when the timezone has been set to something other than UTC.

The first example is based on the one given for the tk_make_future_timeseries() function, that works as expected.
```
idx <- c("2015-04-01 00:00:00",
         "2015-04-01 01:00:00",
         "2015-04-01 02:00:00") %>%
  ymd_hms()
idx
idx %>%
  tk_make_future_timeseries(n_future = 3)
```
[1] "2015-04-01 03:00:00 UTC" "2015-04-01 04:00:00 UTC" "2015-04-01 05:00:00 UTC"

However, once we set a time zone for the idx, things get weird...

```
idx <- c("2015-04-05 00:00:00",
         "2015-04-05 01:00:00",
         "2015-04-05 02:00:00") %>%
  ymd_hms(tz = 'Africa/Bujumbura')
idx
idx %>%
  tk_make_future_timeseries(n_future = 3)

```
[1] "2015-04-05 01:00:00 CAT" "2015-04-05 02:00:00 CAT" "2015-04-05 03:00:00 CAT"
Here, the Bujumbura future time series starts in the middle of the idx time series.


```
idx <- c("2015-04-01 00:00:00",
         "2015-04-01 01:00:00",
         "2015-04-01 02:00:00") %>%
  ymd_hms(tz = 'Hongkong')
idx
idx %>%
  tk_make_future_timeseries(n_future = 3)

```
[1] "2015-03-31 19:00:00 HKT" "2015-03-31 20:00:00 HKT" "2015-03-31 21:00:00 HKT"

The Hong Kong future time series starts before the idx time series starts, which is not expected.

A (inefficient??) work-around is to convert the posixct to numerical values, then back again after calling 
tk_make_future_timeseries()

```
idx <- c("2015-04-01 00:00:00",
         "2015-04-01 01:00:00",
         "2015-04-01 02:00:00") %>%
  ymd_hms(tz = 'Hongkong')
idx

idx.future <- as.numeric(idx) %>%
  tk_make_future_timeseries(n_future = 3)

as.POSIXct(idx.future, origin = '1970-01-01 00:00:00', tz = 'Hongkong')
```
"2015-04-01 03:00:00 HKT" "2015-04-01 04:00:00 HKT" "2015-04-01 05:00:00 HKT"
Hence we get the expected future time series.

I hope this can be fixed as timetk looks to be a very useful toolbox that helps with many of the compatibility issues between the Pantheon of time series packages.

So this package is amazing, thank you! But it's most useful feature is a little broken. Suppose I want to make forecast for the next 60 business days. If I understand correctly, I should use this function:

`idx.pred <- tk_make_future_timeseries(index(df.train), 60, inspect_weekdays = TRUE) `

The problem is that depending on where the weekends fall in my out of sample data, the `tk_make_future_timeseries()` call returns a different length vector. Rather than returning the next sixty business days, it looks like it's taking the calendar for the next sixty days and dropping the weekends. This is a disaster, because `pred.xts <- xts(pred, idx.pred)` fails with an error about series needing to be the same length as their dates.
from the "working with time series" vignette:

> The index gives the user a lot of information in a simple timestamp. Consider the datetime “2016-01-01 00:00:00”. From this timestamp, we can decompose the datetime to get the signature, which consists of the year, quarter, month, day, day of year, day of month, hour, minute, and second of the occurrence of a single observation.

Actually if I saw a `00:00:00` with that much precision, I would assume the time is actually unknown and I am really working with `lubridate::ymd` data, which in R type datasets is more common than a precise UTC value.
Hi!

I'm trying to push a newer stringi version to CRAN. It's available at:

```
install_github("gagolews/stringi")
```

Even though the changes between v1.1.6 and v1.1.7 are very cosmetic (mods to the C/C++ code -- removed #pragmas suppressing some warnings and changing the order of the parameters to some class constructor affecting the Windows-only build), I got a response from the CRAN team that your package errored during check:

```
Package: timetk
Check: tests
New result: ERROR
    Running ‘testthat.R’ [4s/38s]
  Running the tests in ‘tests/testthat.R’ failed.
  Complete output:
    > library(testthat)
    > library(timetk)
    >
    > test_check("timetk")
    ── 1. Error: (unknown) (@test_tk_index.R#9) ───────────────────────────────────
    order.by requires an appropriate time-based object
    1: tk_xts(AAPL_tbl, select = -date, date_var = date) at testthat/test_tk_index.R:9
    2: tk_xts_(data = data, select = select, date_var = date_var, silent = silent, ...)
    3: tk_xts_.default(data = data, select = select, date_var = date_var, silent = silent,
           ...)
    4: xts::xts(data, ...)
    5: stop("order.by requires an appropriate time-based object")

    ── 2. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@
    nrow(test_tbl_1) not equal to 504.
    1/1 mismatches
    [1] 1 - 504 == -503

    ── 3. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@
    ncol(test_tbl_1) not equal to 7.
    1/1 mismatches
    [1] 1 - 7 == -6

    ── 4. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@
    colnames(test_tbl_1)[[1]] not equal to "date".
    1/1 mismatches
    x[1]: "data"
    y[1]: "date"

    ── 5. Error: (unknown) (@test_tk_tbl.R#21) ────────────────────────────────────
    order.by requires an appropriate time-based object
    1: tk_xts(AAPL_tbl, select = -date, date_var = date) at testthat/test_tk_tbl.R:21
    2: tk_xts_(data = data, select = select, date_var = date_var, silent = silent, ...)
    3: tk_xts_.default(data = data, select = select, date_var = date_var, silent = silent,
           ...)
    4: xts::xts(data, ...)
    5: stop("order.by requires an appropriate time-based object")

    ══ testthat results ═══════════════════════════════════════════════════════════
    OK: 176 SKIPPED: 0 FAILED: 5
    1. Error: (unknown) (@test_tk_index.R#9)
    2. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@test_tk_tbl.R#14)
    3. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@test_tk_tbl.R#15)
    4. Failure: tbl tot tbl test returns tibble with correct rows and columns. (@test_tk_tbl.R#16)
    5. Error: (unknown) (@test_tk_tbl.R#21)

    Error: testthat unit tests failed
    Execution halted

```

Is the error likely to be on the stringi side?

Cheers!