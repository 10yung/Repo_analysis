
Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/injekt ‚ù§Ô∏è

  What it does:
  - adds a badge to show the latest number of financial contributors
  - adds a banner displaying contributors to the project on GitHub
  - adds a banner displaying all individuals contributing financially on Open Collective
  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.

  Thank you for your great contribution to the Open Source community. You are awesome! üôå
  And welcome to the Open Collective community! üòä

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!
  
Hi. The last release of this project was 3 years ago. Is it still up to date?
Have you analyzed implementing Dependency injection by type alias?
```
object RedisCache { }
typealias Cache = RedisCache
```
If we need to change it
```
object MongoCache { }
typealias Cache = MongoCache
```
It is done in compile time
Hello, I've been a long time user of this library and I liked it because of its simplicity. I know it's now deprecated in favor of the other Kotlin's DI libraries but I don't feel the need to change it and I've been hit by this bug I think it's worth mentioning.

This only happens when injecting the instance from multiple threads and the initialization takes some time.

Example demostrating the issue:

```kt
class A {
    init {
        Log.w("TAG", "Init A")
        Thread.sleep(1000) // Simulate slow init
    }
}
```

In your `InjektModule` class:

```kt
override fun InjektRegistrar.registerInjectables() {
    ...

    addSingletonFactory { A() } 
}
```

Then, to cause multiple instances (example using coroutines):

```kt
fun main(args: Array<String>) {
    repeat(5) {
        async { Injekt.get<A>() }
    }
}
```

One proposed solution is to change the `addSingletonFactory` implementation to a `lazy` so that synchronization is taken into account:

```kt
@Suppress("UNCHECKED_CAST")
override fun <R: Any> addSingletonFactory(forType: TypeReference<R>, factoryCalledOnce: () -> R) {
    factories.put(forType.type, {
        (existingValues.getOrPut(Instance(forType.type, NOKEY)) { lazy { factoryCalledOnce() } } as Lazy<R>).value
    })
}
```
Hi,
during development I've encountered that overriding singletons is not possible (like shown [here](https://gist.github.com/pbochenski/23653b54f885aa4c0ec9baef9def8b3f) )

This came out in unit tests, where different tests needs to have different stubs. It would be nice to have feature either to clear all objects/factories from Injekt before every test, or to override certain singletons. 

What do you think?
Hi!

I'm looking for a injection-like framework for Kotlin that would compile to Javascript.

Does your "inject" framework do that?

Regards,
J√∏rund

Hello! Trying to get Injekt going with a test project of mine, and running into trouble. It works great on Lollipop+, but on Android 4.x I'm running into trouble.

The error I'm seeing:

```
java.lang.RuntimeException: Unable to instantiate application com.brianegan.bansa.counter.Application: uy.kohesive.injekt.api.InjektionException: No registered instance or factory for type com.brianegan.bansa.Store<com.brianegan.bansa.counter.ApplicationState, com.brianegan.bansa.Action>
    at android.app.LoadedApk.makeApplication(LoadedApk.java:526)
    at android.app.ActivityThread.handleBindApplication(ActivityThread.java:4390)
    at android.app.ActivityThread.access$1500(ActivityThread.java:139)
    at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1260)
    at android.os.Handler.dispatchMessage(Handler.java:102)
    at android.os.Looper.loop(Looper.java:136)
    at android.app.ActivityThread.main(ActivityThread.java:5105)
    at java.lang.reflect.Method.invokeNative(Native Method)
    at java.lang.reflect.Method.invoke(Method.java:515)
    at com.android.internal.os.ZygoteInit$MethodAndArgsCaller.run(ZygoteInit.java:792)
    at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:608)
    at dalvik.system.NativeStart.main(Native Method)
Caused by: uy.kohesive.injekt.api.InjektionException: No registered instance or factory for type com.brianegan.bansa.Store<com.brianegan.bansa.counter.ApplicationState, com.brianegan.bansa.Action>
    at uy.kohesive.injekt.registry.default.DefaultRegistrar.getInstance(DefaultRegistrar.kt:99)
    at uy.kohesive.injekt.api.InjektScope.getInstance(Scope.kt)
    at com.brianegan.bansa.counter.Application.<init>(Application.kt:30)
    at java.lang.Class.newInstanceImpl(Native Method)
    at java.lang.Class.newInstance(Class.java:1208)
    at android.app.Instrumentation.newApplication(Instrumentation.java:990)
    at android.app.Instrumentation.newApplication(Instrumentation.java:975)
    at android.app.LoadedApk.makeApplication(LoadedApk.java:521)
    ... 11 more
```

My code can be found here:
https://github.com/brianegan/bansa/blob/master/examples/counter/src/main/kotlin/com/brianegan/bansa/counter/Application.kt

I also tried Injekting a module in `onCreate` instead of using a companion object, with no luck. Feeling like a bit of a n00b here though, trying to figure out what I'm doing wrong! Any advice would be much appreciated :)

Add example to docs or example application, where a scope is propagated to other classes.   

See example written as test case of this:  https://github.com/kohesive/injekt/blob/master/core/src/test/kotlin/uy/kohesive/injekt/TestInjektion.kt#L202-L247

Which uses `LocalScoped`([see implementation](https://github.com/kohesive/injekt/blob/master/api/src/main/kotlin/uy/kohesive/injekt/api/Scope.kt#L61-L79))

And uses scoped factory registrations ([see implementation](https://github.com/kohesive/injekt/blob/master/api/src/main/kotlin/uy/kohesive/injekt/api/Scope.kt#L40-L58))

Not sure if this is useful, because you can manually get pretty close (see updated docs at https://github.com/kohesive/injekt/blob/master/README.md#scopes) using something like the shown `MyActivityScope` or `MyActivityModule` examples.
1.  Scope can be created and linked to another scope (or more than one scope).  The scope you create is the ‚Äúcalled scope‚Äù and the others are ‚Äúlinked scopes"
2.  The linking has the following properties:  is the Linked scope allowed to provide existing cached instances (true by default), is Linked scope allowed to generate new instances (false by default), are new instances are cached in the called scope  or the scope who‚Äôs factory actually makes the object which is either called scope or linked scope (called scope is the default).

so you would make myActivityScope linked to Injekt global

and anything already in global can be used, but it cannot create anything else, only myActivityScope can create new instances.  And anything registered in myActivityScope will override the global Injekt by default

you can change the behaviour by the settings listed in # 2

So this would be called something like `LocalOverridingScope` with those defaults

others will want the settings to differ, such as having the global still make new instances of types it has registered but the other scope does not.

others will want the caching of the instances to be in the called scope, others in the scope that did the factory

others will want the factory called if the local scope does not have the item, but declare the factories only in the linked scope (including singleton factories)
