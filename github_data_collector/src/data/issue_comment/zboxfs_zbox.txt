ZboxFS seems to think in terms of transactions. There are transaction-related error cases in `zbox::Error`, there are limitations based on transactions (e.g. inability to write multiple files in parallel), but there is few things about transaction available in API.

If transactions are repository-wide (not file-scoped), I suggest to add something like `fn ongoing_transaction(&self) -> Option<TransactionInfo>;` in `zbox::Repo`, which should tell if a transaction is ongoing. Additional information like number of uncommitted bytes, affected file or datetime may be provided in `TransactionInfo`.
Example code is [from issue about ENOSPC behaviour](https://github.com/zboxfs/zbox/issues/67#issuecomment-570080166)

Run (`cargo run`) that example code multiple times, interrupting it with Cltr+C. Eventually it starts failing.

```
v@l:23:14:16:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.06s
     Running `target/debug/zboxtest`
............................................................................................................................
^C
v@l:23:14:23:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/zboxtest`
......................................................................................
^C
v@l:23:14:25:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/zboxtest`
.......................................................................................................................................................................................................................................................................................................
^C
v@l:23:14:27:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/zboxtest`
................................................................................................................................................................................................................................................................................................................................................................................................................................................
^C
v@l:23:14:30:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/zboxtest`

^C
v@l:23:14:37:/tmp/zboxtest$ RUST_BACKTRACE=1 cargo run
    Finished dev [unoptimized + debuginfo] target(s) in 0.05s
     Running `target/debug/zboxtest`
.thread 'main' panicked at 'assertion failed: !sec.is_finished()', /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/file/sector.rs:327:17
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1025
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1426
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:193
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:471
  11: std::panicking::begin_panic
             at /rustc/3eeb8d4f2fbae0bb1c587d00b5abeaf938da47f4/src/libstd/panicking.rs:404
  12: zbox::volume::storage::file::sector::SectorMgr::write_blocks
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/file/sector.rs:327
  13: <zbox::volume::storage::file::file::FileStorage as zbox::volume::storage::Storable>::put_blocks
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/file/file.rs:224
  14: zbox::volume::storage::storage::Writer::write_frame
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/storage.rs:650
  15: <zbox::volume::storage::storage::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/storage.rs:668
  16: <zbox::volume::volume::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/volume.rs:331
  17: std::io::Write::write_all
             at /rustc/3eeb8d4f2fbae0bb1c587d00b5abeaf938da47f4/src/libstd/io/mod.rs:1354
  18: <zbox::content::segment::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/content/segment.rs:487
  19: zbox::content::content::Writer::append_chunk
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/content/content.rs:274
  20: <zbox::content::content::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/content/content.rs:350
  21: <zbox::content::chunker::Chunker<W> as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/content/chunker.rs:164
  22: <zbox::content::store::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/content/store.rs:276
  23: <zbox::fs::fnode::Writer as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/fs/fnode.rs:812
  24: <zbox::file::File as std::io::Write>::write::{{closure}}
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/file.rs:587
  25: zbox::trans::txmgr::TxHandle::run
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:206
  26: <zbox::file::File as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/file.rs:586
  27: zboxtest::main
             at src/main.rs:8
```

If needed I can attach a storage dump with the repro.
```
[2020-01-01T01:08:49Z DEBUG zbox::trans::txmgr] run tx failed: Io(Custom { kind: Other, error: "Not in transaction" })
[2020-01-01T01:08:49Z DEBUG zbox::trans::txmgr] abort tx#3
[2020-01-01T01:08:50Z DEBUG zbox::trans::txmgr] tx#3 aborted
[2020-01-01T01:08:50Z ERROR zboxmount::zboxfuse] IO error: Not in transaction
```

```
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1025
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1426
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:193
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:471
  11: rust_begin_unwind
             at src/libstd/panicking.rs:375
  12: core::panicking::panic_fmt
             at src/libcore/panicking.rs:84
  13: core::panicking::panic
             at src/libcore/panicking.rs:51
  14: core::option::Option<T>::unwrap
             at /rustc/3eeb8d4f2fbae0bb1c587d00b5abeaf938da47f4/src/libcore/macros/mod.rs:15
  15: zbox::trans::txmgr::TxMgr::abort_trans
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:157
  16: zbox::trans::txmgr::TxHandle::abort
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:238
  17: zbox::trans::txmgr::TxHandle::run
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:208
  18: <zbox::file::File as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/file.rs:586
```
##### Steps to reproduce:

1. Mount tmpfs with a size limit
2. Create ZboxFS `file://` storage on that size
3. Create a `zbox::File` there and start filling it with data (without `finish`ing) ad infinum.

##### Expected:

Eventually `std::io::Write::write` returns IO error suggesting that allowed storage space is exhaused. Ideally the file may be `finish()`ed at that point, with the data previously accepted by `std::io::Write::write` without error being guaranteed to fit on remaining space.

##### Actual:

```
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: "/file" "security.capability"
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: error 61
[2020-01-01T00:45:51Z DEBUG fuse::request] WRITE(153376) ino 0x0000000000000002, fh 0, offset 314085376, size 4096, flags 0x0
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] write: "/file" 0x1000 @ 0x12b89000
[2020-01-01T00:45:51Z DEBUG fuse::request] GETXATTR(153377) ino 0x0000000000000002, name "security.capability", size 0
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: "/file" "security.capability"
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: error 61
[2020-01-01T00:45:51Z DEBUG fuse::request] WRITE(153378) ino 0x0000000000000002, fh 0, offset 314089472, size 4096, flags 0x0
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] write: "/file" 0x1000 @ 0x12b8a000
[2020-01-01T00:45:51Z DEBUG zbox::trans::txmgr] run tx failed: Io(Custom { kind: Other, error: "other os error" })
[2020-01-01T00:45:51Z DEBUG zbox::trans::txmgr] abort tx#3
[2020-01-01T00:45:51Z WARN  zbox::trans::txmgr] abort tx#3 failed: No space left on device (os error 28)
[2020-01-01T00:45:51Z ERROR zboxmount::zboxfuse] IO error: other os error
[2020-01-01T00:45:51Z WARN  fuse::request] Ignoring unknown FUSE operation 40
[2020-01-01T00:45:51Z DEBUG fuse::request] GETXATTR(153380) ino 0x0000000000000002, name "security.capability", size 0
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: "/file" "security.capability"
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] getxattr: error 61
[2020-01-01T00:45:51Z DEBUG fuse::request] WRITE(153381) ino 0x0000000000000002, fh 0, offset 314089472, size 4096, flags 0x0
[2020-01-01T00:45:51Z DEBUG fuse_mt::fusemt] write: "/file" 0x1000 @ 0x12b8a000
[2020-01-01T00:45:51Z DEBUG zbox::trans::txmgr] run tx failed: Io(Custom { kind: Other, error: "other os error" })
[2020-01-01T00:45:51Z DEBUG zbox::trans::txmgr] abort tx#3
thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', /rustc/3eeb8d4f2fbae0bb1c587d00b5abeaf938da47f4/src/libcore/macros/mod.rs:15:40
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.40/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:84
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:61
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1025
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1426
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:65
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:50
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:193
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:471
  11: rust_begin_unwind
             at src/libstd/panicking.rs:375
  12: core::panicking::panic_fmt
             at src/libcore/panicking.rs:84
  13: core::panicking::panic
             at src/libcore/panicking.rs:51
  14: core::option::Option<T>::unwrap
             at /rustc/3eeb8d4f2fbae0bb1c587d00b5abeaf938da47f4/src/libcore/macros/mod.rs:15
  15: zbox::trans::txmgr::TxMgr::abort_trans
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:157
  16: zbox::trans::txmgr::TxHandle::abort
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:238
  17: zbox::trans::txmgr::TxHandle::run
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/trans/txmgr.rs:208
  18: <zbox::file::File as std::io::Write>::write
             at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/file.rs:586
...
```

Additionally, storage cannot be opened again after that:

```
[2020-01-01T00:52:25Z INFO  zbox::base] ZboxFS v0.8.8 - Zero-details, privacy-focused in-app file system
[2020-01-01T00:52:25Z INFO  zbox::fs::fs] open repo: file:///tmp/limit/q, read_only: false
[2020-01-01T00:52:25Z DEBUG zbox::volume::volume] volume opened: Storage(FileStorage { base: "/tmp/limit/q" })
[2020-01-01T00:52:25Z DEBUG zbox::trans::wal] cold redo abort tx#3
[2020-01-01T00:52:25Z DEBUG zbox::trans::wal] cold abort completed
[2020-01-01T00:52:25Z DEBUG zbox::trans::wal] WalQueue opened, seq: 6, watermarks: (txid: 3, block: 6)
Error: Io(Custom { kind: Other, error: "Decrypt error" })
```
Example file store:  https://vi-server.org/pub/zbox_issue_66.tar
Password: `123sad`

Only about 1.5 megabytes of 64 of `/test` is read, then it returns `IO error: File not found`.

Issue is reproducible when using [`fstest`](https://github.com/vi/vi_tools/blob/master/fstest.c) (or maybe other similar filesystem stress-test tool) on [`zboxmount`](https://github.com/vi/zboxmount).

Also reproducible with `mem://` storage.
Only text `description` is copied into `std::io::Error`, not the actual matchable `zbox::Error`.


```
$ grep '' Cargo.toml src/main.rs
Cargo.toml:[package]
Cargo.toml:name = "zboxtest"
Cargo.toml:version = "0.1.0"
Cargo.toml:authors = ["Vitaly _Vi Shukela <vi0oss@gmail.com>"]
Cargo.toml:edition = "2018"
Cargo.toml:
Cargo.toml:[dependencies]
Cargo.toml:zbox = "0.8.8"
src/main.rs:fn main() {
src/main.rs:    let mut ro = zbox::RepoOpener::new();
src/main.rs:    ro.create(true);
src/main.rs:    let _ = ro.open("mem://1", "123").unwrap();
src/main.rs:}
```

```
$ cargo +stable run
   Compiling zboxtest v0.1.0 (/tmp/zboxtest)
    Finished dev [unoptimized + debuginfo] target(s) in 2.78s
     Running `target/debug/zboxtest`
Aborted
```

```
$ rust-gdb target/debug/zboxtest
...
Reading symbols from target/debug/zboxtest...done.
(gdb) set pagination off
(gdb) r
Starting program: /tmp/zboxtest/target/debug/zboxtest
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".

Program received signal SIGABRT, Aborted.
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
50      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007ffff7d23535 in __GI_abort () at abort.c:79
#2  0x00007ffff7f18baa in ?? () from /usr/lib/x86_64-linux-gnu/libsodium.so.23
#3  0x00007ffff7f30f6d in sodium_malloc () from /usr/lib/x86_64-linux-gnu/libsodium.so.23
#4  0x000055555581723a in zbox::base::crypto::SafeBox<T>::new_empty () at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/base/crypto.rs:163
#5  0x0000555555597c0d in zbox::volume::storage::storage::Storage::new (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/storage.rs:155
#6  0x0000555555800ccc in zbox::volume::volume::Volume::new (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/volume.rs:42
#7  0x0000555555589519 in zbox::fs::fs::Fs::exists (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/fs/fs.rs:117
#8  0x000055555568d9b5 in zbox::repo::Repo::exists (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/repo.rs:690
#9  0x000055555568d702 in zbox::repo::RepoOpener::open (self=0x7fffffffde60, uri=..., pwd=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/repo.rs:255
#10 0x0000555555583c6a in zboxtest::main () at src/main.rs:4




(gdb) bt full
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
        set = {__val = {0, 93824995295795, 140737350978536, 9017741398554141237, 7317851294820925299, 9017741398554141236, 7317851294820925299, 93824995295020, 0, 9017741398554141237, 140737350978536, 7317851294820925299, 9017741398554141236, 7317851294820925299, 140737350978536, 8}}
        pid = <optimized out>
        tid = <optimized out>
        ret = <optimized out>
#1  0x00007ffff7d23535 in __GI_abort () at abort.c:79
        save_stage = 1
        act = {__sigaction_handler = {sa_handler = 0x55555593bb00, sa_sigaction = 0x55555593bb00}, sa_mask = {__val = {93824994950420, 93824996326144, 93824996326144, 93824996326144, 93824993490596, 93824996326144, 93824996326144, 93824996326144, 93824992490148, 93824996326144, 93824996326144, 93824996326144, 93824993288182, 140737488343024, 93824996326144, 93824996326144}}, sa_flags = 1, sa_restorer = 0x1}
        sigs = {__val = {32, 0 <repeats 15 times>}}
#2  0x00007ffff7f18baa in ?? () from /usr/lib/x86_64-linux-gnu/libsodium.so.23
No symbol table info available.
#3  0x00007ffff7f30f6d in sodium_malloc () from /usr/lib/x86_64-linux-gnu/libsodium.so.23
No symbol table info available.
#4  0x000055555581723a in zbox::base::crypto::SafeBox<T>::new_empty () at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/base/crypto.rs:163
        size = 32
#5  0x0000555555597c0d in zbox::volume::storage::storage::Storage::new (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/storage/storage.rs:155
        frame_cache = zbox::base::lru::Lru<usize, alloc::vec::Vec<u8>, zbox::volume::storage::storage::FrameCacheMeter, zbox::base::lru::PinChecker<alloc::vec::Vec<u8>>> {capacity: 4194304, used: 0, map: linked_hash_map::LinkedHashMap<usize, alloc::vec::Vec<u8>, std::collections::hash::map::RandomState> {map: std::collections::hash::map::HashMap<linked_hash_map::KeyRef<usize>, *mut linked_hash_map::Node<usize, alloc::vec::Vec<u8>>, std::collections::hash::map::RandomState> {base: hashbrown::map::HashMap<linked_hash_map::KeyRef<usize>, *mut linked_hash_map::Node<usize, alloc::vec::Vec<u8>>, std::collections::hash::map::RandomState> {hash_builder: std::collections::hash::map::RandomState {k0: 9017741398554141236, k1: 7317851294820925299}, table: hashbrown::raw::RawTable<(linked_hash_map::KeyRef<usize>, *mut linked_hash_map::Node<usize, alloc::vec::Vec<u8>>)> {bucket_mask: 0, ctrl: core::ptr::non_null::NonNull<u8> {pointer: 0x555555880b00 '\377' <repeats 16 times>, "\000"}, data: core::ptr::non_null::NonNull<(linked_hash_map::KeyRef<usize>, *mut linked_hash_map::Node<usize, alloc::vec::Vec<u8>>)> {pointer: 0x8}, growth_left: 0, items: 0, marker: core::marker::PhantomData<(linked_hash_map::KeyRef<usize>, *mut linked_hash_map::Node<usize, alloc::vec::Vec<u8>>)>}}}, head: 0x0, free: 0x0}, meter: zbox::volume::storage::storage::FrameCacheMeter, pin_ckr: zbox::base::lru::PinChecker<alloc::vec::Vec<u8>> {_marker: core::marker::PhantomData<alloc::vec::Vec<u8>>}}
        depot = zbox::volume::storage::Box<Storable> {pointer: 0x55555593ba80 "`\272\223UUU\000", vtable: 0x555555926220}
#6  0x0000555555800ccc in zbox::volume::volume::Volume::new (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/volume/volume.rs:42
        info = zbox::volume::volume::Info {id: zbox::trans::eid::Eid ([0 <repeats 32 times>]), ver: zbox::base::version::Version {major: 0, minor: 0, patch: 0}, uri: "mem://1", compress: false, cost: zbox::base::crypto::Cost {ops_limit: zbox::base::crypto::OpsLimit::Interactive, mem_limit: zbox::base::crypto::MemLimit::Interactive}, cipher: zbox::base::crypto::Cipher::Xchacha, ctime: zbox::base::time::Time (core::time::Duration {secs: 0, nanos: 0})}
#7  0x0000555555589519 in zbox::fs::fs::Fs::exists (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/fs/fs.rs:117
No locals.
#8  0x000055555568d9b5 in zbox::repo::Repo::exists (uri=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/repo.rs:690
No locals.
#9  0x000055555568d702 in zbox::repo::RepoOpener::open (self=0x7fffffffde60, uri=..., pwd=...) at /home/vi/.cargo/registry/src/github.com-1ecc6299db9ec823/zbox-0.8.8/src/repo.rs:255
No locals.
#10 0x0000555555583c6a in zboxtest::main () at src/main.rs:4
        ro = zbox::repo::RepoOpener {cfg: zbox::fs::Config {cost: zbox::base::crypto::Cost {ops_limit: zbox::base::crypto::OpsLimit::Interactive, mem_limit: zbox::base::crypto::MemLimit::Interactive}, cipher: zbox::base::crypto::Cipher::Xchacha, compress: false, opts: zbox::fs::Options {version_limit: 1, dedup_chunk: false}}, create: true, create_new: false, read_only: false, force: false}

```

```
$ rustc +stable --version
rustc 1.39.0 (4560ea788 2019-11-04)
$ apt policy libsodium23
libsodium23:
  Installed: 1.0.17-1
```
If underlying files of zbox `file://` storage are modified by an attacker, what worst can happen?

I expect only [selective, attacker-chosen] data loss, never executed malicious code or injected malicious data when I try to use that storage. If storage continues to work after tampering, I expect newly added data to be as secure as original data. Does it all hold true?
IMO, CLI utilities are needed to accelerate adoption. Also, FUSE support will be very useful for users that want to use zbox as their personal cloud storage.
It seems like zbox does not currently allow for any multi-threaded concurrency at all.

Sadly this limits usage to *very* simple use cases.

Are there plans for introducing concurrency?

A "simple" first step could be to allow concurrent reads, with a global write lock. Although I'd really love to have concurrent reads and writes as well.