When I flash a raspberry pi zero w it seems to be unable to run docker containers from the runcmd part of the user-data

First of all, it throws the following error:

> wpa_supplicant: /sbin/wpa_supplicant daemon failed to start
> run-parts: /etc/network/if-pre-up.d/wpasupplicant exited with return code 1
> Failed to bring up wlan0.

However, it is connected to my wifi as I can see in my router. Moreover, it was able to fetch my github ssh keys and performs apt update fine (I've put this in runcmd to make sure it is done after wifi has been connected)

However, after that I try to pull the portainer image but then it throws an error:

> error response from daemon get https //registry-1.docker.io/v2/: dial tcp: lookup registry-1.docker.io on [::1]:53: read udp [::1]:33910->[::1]:53: read: connection refused 

I know wifi isn't officially supported by cloud-init but I'm not sure it's a wifi related issue. All other internet related things seem to work. Also the error message seems to suggest it wasn't unable to connect, but the connection was refused somehow.

When I ssh into the device the docker run command works as normal. Also when i try the rainbow example (which uses docker swarm) everything seems to work fine

My user-data.yml for reference:

```
#cloud-config
# vim: syntax=yaml
#

# The current version of cloud-init in the Hypriot rpi-64 is 0.7.9
# When dealing with cloud-init, it is SUPER important to know the version
# I have wasted many hours creating servers to find out the module I was trying to use wasn't in the cloud-init version I had
# Documentation: http://cloudinit.readthedocs.io/en/0.7.9/index.html

# Set your hostname here, the manage_etc_hosts will update the hosts file entries as well
hostname: roger
manage_etc_hosts: true

# You could modify this for your own user information
users:
  - name: someusername               # use any user name you like
    primary-group: users
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users,docker,adm,dialout,audio,plugdev,netdev,video
    lock_passwd: false
    ssh-import-id: gh:somegithubid
  - name: pirate
    gecos: "Hypriot Pirate"
    sudo: ALL=(ALL) NOPASSWD:ALL
    shell: /bin/bash
    groups: users,docker,video
    plain_text_passwd: hypriot
    lock_passwd: false
    ssh_pwauth: true
    chpasswd: { expire: false }


# # Set the locale of the system
locale: "en_US.UTF-8"

# # Set the timezone
# # Value of 'timezone' must exist in /usr/share/zoneinfo
timezone: "Europe/Amsterdam"
# # Update apt packages on first boot
# package_update: true
# package_upgrade: true
# package_reboot_if_required: true
package_upgrade: false

# # Install any additional apt packages you need here
# packages:
#  - ntp
# # WiFi connect to HotSpot
# To make wifi work with RPi3 and RPi0
# you also have to set "enable_uart=0" in config.txt
# See no-uart-config.txt for an example.
#
# # - use `wpa_passphrase SSID PASSWORD` to encrypt the psk
write_files:
  - content: |
      allow-hotplug wlan0
      iface wlan0 inet dhcp
      wpa-conf /etc/wpa_supplicant/wpa_supplicant.conf
      iface default inet dhcp
    path: /etc/network/interfaces.d/wlan0
  - content: |
      country=NL
      ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev
      update_config=1
      network={
      ssid="somessid"
      psk="somepassword"
      proto=RSN
      key_mgmt=WPA-PSK
      pairwise=CCMP
      auth_alg=OPEN
      }
    path: /etc/wpa_supplicant/wpa_supplicant.conf
# These commands will be ran once on first boot only
runcmd:
  # Pickup the hostname changes
  - 'systemctl restart avahi-daemon'

  # Activate WiFi interface
  - 'ifup wlan0'

  # sleep to wait for wifi to get up
  - 'sleep 10'

  # Update apt packages on first boot
  - 'apt-get update'
  - 'apt-get upgrade'
  
  # startup my docker containers
  - [ sh, -c, echo "Starting Portainer now..." ]
  - [ sh, -c, 'docker volume create portainer_data' ]
  - [ sh, -c, 'docker run -d -p 9000:9000 -p 8000:8000 --name portainer --restart always -v /var/run/docker.sock:/var/run/docker.sock -v portainer_data:/data portainer/portainer' ]
  - [ sh, -c, echo "Finished starting Portainer" ]

```
At the very least a warning would be helpful if `--hostname` is used but there is nothing to replace.
Hello I'm a newbie on docker swarm and user-data file
I tried to add a new node to a cluster directly at boot setup with "docker swarm join --token " command in user-data file with no avail
Here is a sample of the file:
<img width="1103" alt="Screenshot 2019-10-17 at 19 49 31" src="https://user-images.githubusercontent.com/39194209/67034127-67d40200-f117-11e9-885d-435a87a97cf3.png">
I successfully ran the command with the same token directly into the node though
The purpose is to create a whole raspberry cluster with all workers and managers by configuring data-user file into each Hypriotos thus directly set up with hostnames, services, workers, managers etc... at boot stage.
Whether I'm totally wrong or missing something I would be glad hearing advices from any of you 
Thank you
After reading https://desertbot.io/blog/setup-pi-zero-w-headless-wifi I now know that it's possible to enable ssh and configure WiFi for a Raspberry Pi Zero on first boot with standard Raspbian LITE.

It would be useful to do that with `flash`.

```
flash --ssid xxx --password yyy 2019-07-10-raspbian-buster-lite.zip
```


Default root passwords are a horribly bad security practice that leads to things like the [Mirai botnet](https://en.wikipedia.org/wiki/Mirai_(malware)) and a [long history](https://www.researchgate.net/publication/279069631_The_Internet_Census_2012_Dataset_An_Ethical_Examination) of similar malware that take advantage of default passwords (or _no password on the `root` account at all_!) on millions of internet-connected devices to perform devastating [Distributed Denial of Services](https://en.wikipedia.org/wiki/Denial-of-service_attack#Distributed_attack) (DDoS) attacks. A survey by Jerry Gamblin found that [Nearly 20% of the 1000 Most Popular Docker Containers Have No Root Password](https://www.kennasecurity.com/20-of-the-1000-most-popular-docker-containers-have-no-root-password/), which is just compounded by an OS that has a default `root` password. Unfortunately, there are too many examples of this poor practice in use -- all for the sake of having something so simple anyone can do it -- and not enough examples of how to do things more securely.

There is a better way that I would like to propose for you to consider. Arguably, this is easier than the kind of `ssid: "YourSSID"`, `password: "YourSecretPreSharedKey` type of manual-editing-required examples in the [sample](https://github.com/hypriot/flash/tree/master/sample) directory (which, if you accidentally commit and push the edited values is yet another Bad Practice(TM) that leads to secrets leakage.)

I have a tool I wrote to make it really easy to pre-configure something like HypriotOS (or any other RaspberryPi OS distribution - hint, hint, Raspbian!). It is called [python_secrets](https://pypi.org/project/python-secrets/). We recently spoke about the problem and this program at [Toorcon XX](https://youtu.be/WD2Oqy2oc3A?t=1550). In that talk, I demonstrated how to use `psec` -- using HypriotOS and `flash` for the use case, no less! -- with [this asciicast](https://asciinema.org/a/201507). The steps in the [goSecure prototype](https://github.com/davedittrich/goSecure) repository are [documented here](https://davedittrich.github.io/goSecure/documentation.html).

Before I start spending a lot of time trying to update the blog and flash repos in order to make a pull request, I'd like to get your input on whether you would like to work with me on integrating `psec` into the `flash` process to get a more secure result without much extra effort for users?
https://github.com/hypriot/flash/blob/0b28b5cb525ad27707d4eb57cb54f98b9e3ccdb5/flash#L632

In my use case, the progress soon gets 100% but the dd command is still working at 10MB/s. It seems the image is preloaded in memory.
```
clhu@t5 ~/w/f/sample> flash --userdata static.yml -d /dev/sdd ~/Downloads/installer/hypriotos-rpi-v1.10.0.img 

Is /dev/sdd correct? y
Unmounting /dev/sdd ...
Flashing /home/clhu/Downloads/installer/hypriotos-rpi-v1.10.0.img to /dev/sdd ...
1000MiB 0:00:02 [ 400MiB/s] [=========================================================>] 100%
```
Running

```
flash -f --hostname kube01 \
  --device /dev/disk3 \
  --bootconf kubes-boot.yml \
  --userdata kubes-init.yml \
  ~/Downloads/hypriotos-rpi-v1.9.0.img
```
`bootconf` gets applied

```
hdmi_drive=2 # HDMI sound
hdmi_group=2 # DMT
hdmi_mode=16 # 1024x768 60Hz
overscan_left=10
overscan_right=10
overscan_top=10
overscan_bottom=10
disable_splash=1
gpu_mem=16
```

using this file

```
hostname: kube01
locale: "en_US.UTF-8"
timezone: "Europe/Berlin"
manage_etc_hosts: true
apt_preserve_sources_list: true
package_upgrade: false

packages:
 - ntp

runcmd:
  - 'systemctl restart avahi-daemon'

users:
  - name: tcurdt
    primary-group: users
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users,docker,adm
    # password
    plain_text_passwd: tcurdt
    ssh_pwauth: true
    chpasswd: { expire: false }
    lock_passwd: false
    # pubkey
    # lock_passwd: true
    ssh-authorized-keys:
      - ssh-rsa AAAA...VqU2w==
```
the cloud init gives problems.

When booting it's strange that eth0 is not up. Then the cloud prints

```
__init__.py[WARNING]: Unhandled non-mulitpart (text/x-not-multipart) userdata: 'b'hostname: kube01'...'
```
It then waits and eventually creates some keys. Then login appears. Wrong/default hostname though.
Then cloud init says `en_US.UTF-8... done` which means it's not ignoring the file completely (I guess).
Then it regenerates a machine id and prints fingerprints for user `debian`.
Later it says `no authorized ssh keys fingerprints found for user debian`

A little confused I am wondering - are things broken?

Then I found issue #138 and realized that all that was missing was the `#cloud-config` shebang.

It would be fantastic if this could be checked by the script - and not just that's a valid yml file.
Hi!

I'm using Hypriot 1.9.0 and a custom could-init file to configure my RPi setup.

The yaml file looks as follows:
```
#cloud-config

hostname: qw0000p0
manage_etc_hosts: true
apt_preserve_sources_list: true

users:
  - name: client
    primary-group: users
    shell: /bin/bash
    sudo: ALL=(ALL) NOPASSWD:ALL
    groups: users,docker,adm,dialout,audio,plugdev,netdev,video
    ssh-import-id: None
    lock_passwd: true
    ssh_authorized_keys:
      - ssh-rsa A ....

locale: "en_US.UTF-8"

timezone: "Europe/Stockholm"

write_files:
  - content: |
      {
        "testkey": "testvalue",
        "mykey": "anothervalue"
      }  
    path: /home/client/setup/data.json
```

and after ssh:ing into the pi using the ssh key, I'm faced with the following:
```
> ssh client@192.168.2.2
The authenticity of host '192.168.2.2 (192.168.2.2)' can't be established.
ECDSA key fingerprint is SHA256:wpDOD9kZRTN/m4I6SEM7kvL76XEL5Ov2heeQvCFvvTw.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '192.168.2.2' (ECDSA) to the list of known hosts.
Enter passphrase for key '.ssh/id_rsa':
Linux qw0000p0 4.14.34-hypriotos-v7+ #1 SMP Sun Apr 22 14:57:31 UTC 2018 armv7l

HypriotOS (Debian GNU/Linux 9)

The programs included with the Debian GNU/Linux system are free software;
the exact distribution terms for each program are described in the
individual files in /usr/share/doc/*/copyright.

Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent
permitted by applicable law.
_____________________________________________________________________
WARNING! Your environment specifies an invalid locale.
 The unknown environment variables are:
   LC_CTYPE=UTF-8 LC_ALL=
 This can affect your user experience significantly, including the
 ability to manage packages. You may install the locales by running:

   sudo apt-get install language-pack-UTF-8
     or
   sudo locale-gen UTF-8

To see all available language packs, run:
   apt-cache search "^language-pack-[a-z][a-z]$"
To disable this message for all users, run:
   sudo touch /var/lib/cloud/instance/locale-check.skip
_____________________________________________________________________

-bash: /home/client/.cloud-locale-test.skip: Permission denied
client@qw0000p0:~$ ls -lhsa
total 16K
4.0K drwxr-xr-x 4 root   root  4.0K Apr 28 20:57 .
4.0K drwxr-xr-x 3 root   root  4.0K Apr 28 20:57 ..
4.0K drwx------ 2 client users 4.0K Apr 28 20:57 .ssh
4.0K drwxr-xr-x 2 root   root  4.0K Apr 28 20:57 setup
client@qw0000p0:~$
```

I have tried to change the content in the yaml file to be in base64 encoding, in case some invalid characters was present, but it has the same result.

I believe the main problem is that the file that I am writing makes the user (client) not owner of its own home directory! I'm unable to create any files/folders and as can be seen in the `ls -lhsa` output, the file created (`setup/data.json`) is owned by root!

I don't really understand what I am doing wrong here. What is the correct way to write JSON files using hypriot 1.9.0 and cloud-init?
Hello,

I'm using the flash utility to flash an sdcard with a userdata yml file with the following command:
flash -d /dev/mmcblk0 -f hypriotos-rpi-v1.9.0.img -u node01.yml

But the node01.yml file does not get copied to /boot/user-meta.
It's still the default user-meta. The syntax is correct.
If I manually copy the file to /boot/user-meta and boot the rpi, everything is working

Log Output from the flash command:
```
(ansible2.4) [mne-adm@tp013 hypriot]$ flash -d /dev/mmcblk0 -f hypriotos-rpi-v1.9.0.img
[sudo] password for mne-adm: 
Unmounting /dev/mmcblk0 ...
Flashing hypriotos-rpi-v1.9.0.img to /dev/mmcblk0 ...
1000MiB 0:00:00 [1.86GiB/s] [===================================================================================================================================================================>] 100%            
242+4866 records in
242+4866 records out
1048576000 bytes (1.0 GB, 1000 MiB) copied, 78.2925 s, 13.4 MB/s
Waiting for device /dev/mmcblk0

/dev/mmcblk0:
 re-reading partition table
Mounting Disk
Mounting /dev/mmcblk0 to customize...
total 35294
drwxr-xr-x. 3 mne-adm mne-adm    16384 Jan  1  1970 .
drwxrwxr-x. 3 mne-adm mne-adm       60 May  3 10:15 ..
-rwxr-xr-x. 1 mne-adm mne-adm    22264 Apr 22 17:33 bcm2708-rpi-0-w.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    21761 Apr 22 17:33 bcm2708-rpi-b.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    22020 Apr 22 17:33 bcm2708-rpi-b-plus.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    21474 Apr 22 17:33 bcm2708-rpi-cm.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    23044 Apr 22 17:33 bcm2709-rpi-2-b.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    24240 Apr 22 17:33 bcm2710-rpi-3-b.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    24503 Apr 22 17:33 bcm2710-rpi-3-b-plus.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    22952 Apr 22 17:33 bcm2710-rpi-cm3.dtb
-rwxr-xr-x. 1 mne-adm mne-adm    52064 Mar 28 14:07 bootcode.bin
-rwxr-xr-x. 1 mne-adm mne-adm      240 Apr 28 20:57 cmdline.txt
-rwxr-xr-x. 1 mne-adm mne-adm      203 Apr 28 20:57 config.txt
-rwxr-xr-x. 1 mne-adm mne-adm    18693 Apr 22 16:27 COPYING.linux
-rwxr-xr-x. 1 mne-adm mne-adm     2599 Apr 17 13:50 fixup_cd.dat
-rwxr-xr-x. 1 mne-adm mne-adm     6575 Apr 17 13:50 fixup.dat
-rwxr-xr-x. 1 mne-adm mne-adm     9726 Apr 17 13:50 fixup_db.dat
-rwxr-xr-x. 1 mne-adm mne-adm     9730 Apr 17 13:50 fixup_x.dat
-rwxr-xr-x. 1 mne-adm mne-adm 13172908 Apr 22 17:33 kernel7.img
-rwxr-xr-x. 1 mne-adm mne-adm 10245764 Apr 22 17:33 kernel.img
-rwxr-xr-x. 1 mne-adm mne-adm     1494 Mar  9 19:28 LICENCE.broadcom
-rwxr-xr-x. 1 mne-adm mne-adm       23 Apr 28 20:53 meta-data
-rwxr-xr-x. 1 mne-adm mne-adm      396 Apr 28 21:01 os-release
drwxr-xr-x. 2 mne-adm mne-adm    12288 Apr 28 20:56 overlays
-rwxr-xr-x. 1 mne-adm mne-adm   673444 Apr 17 13:50 start_cd.elf
-rwxr-xr-x. 1 mne-adm mne-adm  4968292 Apr 17 13:50 start_db.elf
-rwxr-xr-x. 1 mne-adm mne-adm  2825124 Apr 17 13:50 start.elf
-rwxr-xr-x. 1 mne-adm mne-adm  3912164 Apr 17 13:50 start_x.elf
-rwxr-xr-x. 1 mne-adm mne-adm     2050 Apr 28 20:53 user-data
Unmounting /dev/mmcblk0 ...
Finished.
```

Kind Regards,
   Madic
I fail to connect to the wireless LAN with the --ssid option and the --password option. hypriot is version 1.7.1, flash is the latest version. The same is true when using device-init.yaml. Please help me.