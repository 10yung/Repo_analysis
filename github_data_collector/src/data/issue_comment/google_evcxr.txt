Fixes #4

This is something I've wanted for a while, and have been poking at off and on.

It ended up being a lot more involved than I had hoped. This is because essentially nothing that parses or scans rust seems to handle unmatched brackets at all, since they all operate on token trees, which must be well formed. I even asked wg-grammar channel on discord, and basically got told that I was going to have to go my own way, or use something like tree-sitter (which would only solve half the problem (lexing), requires taking a C dependency, and then either writing a tree-sitter grammar for rust or vendoring one from one of the text editors...


I considered the naive solution of just scanning for parens/brackets and ignoring anything else, but in practice it's pretty annoying: it's not really okay for the repl to see a `"("` and then never send your input since it thinks it's invalid -- so you need to at least lex the input well enough to notice strings/chars/comments, so that's what I did.

Unfortunately, even just this much is pretty involved, as rust's syntax for these is surprisingly tricky: Block comments can nest, chars are hard to distinguish from lifetimes, and it has `raw` strings.

That said, it works well in practice, has lots of comments, and pretty good test coverage, so hopefully it's not too controversial.

I'd also like to improve the repl more in the near future -- rustyline seems to have support for a few more things that would be useful, and it's possible we can use `syn` to handle many of the cases this misses (in particular detecting missing semicolons on stuff like `let x = 3` probably requires syn in order to be robust), but for now this patch was already pretty huge, so I left it as is.

Note: I've only tested this manually on macos at the moment, but have access to other platforms and will try to get around to it soon.
I'd like easier ways of using local deps. Ideally as command line args to the repl, but it would probably be nice to improve path deps.

Here's my proposal: Add two new command line flags to the repl: `--local` and `--package`:

- `evcxr --local`: Determine the name of the crate located in the current working dir (error if no crate exists, or we're in the root of a virtual workspace), and start the repl with a path :dep for that crate pointing at the cwd.

- `evcxr --package <pkgid>`, `evcxr -p <pkgid>` (mirrors `cargo run -p ...`). Similar, but works for workspaces with many crates. Do the same, but for the crate pointed at by `pkgid`. I believe `cargo metadata`/`cargo pkgid` can be used to identify these.

I don't care as much about the use once the repl is open, although that would probably be good to support to. Maybe `:local_dep [name]` where it's `--local` if `name` is omitted, and `--package` if not. Then, the CLI flags could be implemented in terms of this.

I'd be willing to implement these if they'd be accepted.
I'm not sure what this would look like really, but in #93 it would have been nice to be able to attach lldb .

The ideal situation would be if `:debugger <expr>` to attach `rust-lldb`, set a breakpoint right before evaluating the expr, and drop me into the debugger prompt. Not sure how doable this is though.

Another (maybe easier) option would be for `:debugger <expr>` to spawn the child process, and print out the PID, and the function I should set a breakpoint on, but then wait for me to hit `<return>` (or something indicating i've attached the debugger) before actually evaluating `<expr>`. 
```
:dep reqwest = "0.10"

let body = reqwest::get("https://www.rust-lang.org")
    .await.unwrap()
    .text()
    .await.unwrap();

println!("body = {:?}", body);
```

Errors:

```
let body = reqwest::get("https://www.rust-lang.org")
    .await.unwrap()
    .text()
    .await.unwrap();
            only allowed inside `async` functions and blocks
`await` is only allowed inside `async` functions and blocks

let body = reqwest::get("https://www.rust-lang.org")
    .await.unwrap()
            only allowed inside `async` functions and blocks
`await` is only allowed inside `async` functions and blocks
```
I might have missed a step somewhere, but I've installed rust 1.40 via rustup, I have `$CARGO_HOME/bin` directory in my `PATH`, I've set the `CARGO_HOME` to the `.cargo` folder.

The rust compiler looks to be installed
```
> rustc --version
rustc 1.40.0 (73528e339 2019-12-16)
```

When I try to create a new rust notebook, the jupyter logs show:
```
Error: Message("Compilation failed, but no parsable errors were found. STDERR:\nerror: no default toolchain configured\n\nSTDOUT:\n")
```

I've also run the `rustup` up commands to try and set the toolchain:
```
rustup install stable
rustup default stable
```

Thanks.

```
Welcome to evcxr. For help, type :help
>> :version
0.4.7
>> :dep fd-lock = "*"
>> let file = std::fs::File::create("./strings.lock").unwrap();
>> let lock = fd_lock::FdLock::new(file);
Failed to determine type of variable `lock`. rustc suggested type fd_lock::unix::FdLock<std::fs::File>, but that's private. Sometimes adding an extern crate will help rustc suggest the correct public type name, or you can give an explicit type.
>>
```

https://github.com/yoshuawuyts/fd-lock/blob/master/src/lib.rs#L41
https://github.com/yoshuawuyts/fd-lock/blob/master/src/unix.rs#L40

As shown in the links above, the type is not private and works fine in a regular Rust crates. I suspect this might be an issue with the mod not being defined as `pub` or conditional compilation?

My platform is macOS 10.15, my rustc version is `rustc 1.42.0-nightly (0de96d37f 2019-12-19)`.
It's the zmq stuff that's broken. Not sure why it suddenly broke, since there doesn't appear to have been any relevant changes. Perhaps Travis changed some system configuration or something.

First failure I got was:
```
CMake Error at C:/Program Files/CMake/share/cmake-3.15/Modules/CMakeMinGWFindMake.cmake:12 (message):
  sh.exe was found in your PATH, here:
  C:/Program Files/Git/usr/bin/sh.exe
  For MinGW make to work correctly sh.exe must NOT be in your path.
  Run cmake from a shell that does not have sh.exe in your PATH.
```

So I added something to the travis config to delete sh.exe. Now I get the following error:

```
C:\Users\travis\.cargo\registry\src\github.com-1ecc6299db9ec823\zeromq-src-0.1.8+4.3.2\vendor\src\thread.cpp:136:5: error: expected 'catch' before '__except'
     __except (EXCEPTION_CONTINUE_EXECUTION) {
```

This appears to be this bug: https://github.com/zeromq/libzmq/issues/3586

So once a newer release of libzmq comes out and gets packaged into a newer version of zeromq-src, we should hopefully be good. In the meantime, I might need to disable Travis testing of the Jupyter kernel.
Hi.

It seems this particular overflow causes the repl to always generate wrong code on subsequent expression:

```text
$ evcxr
Welcome to evcxr. For help, type :help
>> 10u8.pow(5)
thread '<unnamed>' panicked at 'attempt to multiply with overflow', /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/num/mod.rs:3686:24
stack backtrace:
⋮
Child process terminated with status: exit code: 101
>> 1
A compilation error was found in code we generated.
Ideally this should't happen. Type :last_error_json to see details.
error: linking with `cc` failed: exit code: 1
⋮
```
How can I run the jupyter kernel on nightly?

I tried installing it using a different channel, but it won't stick to the one I used.

Also tried downloading locally the repository and installing from there, no success either.
I often want to sanity check some math or similar, and evcxr_repl works wonderfully for this for the most part (previously I had been using lldb/gdb for this which works about as well as you might imagine...).

Unfortunately, if doing bitwise math, I often want to see hex output. Doing so requires outputting something like `format!("{:x}", <expression I want to check>);` each time, which is tedious.

Taking a look at the source, it seems somewhat tricky since you don't know the type in advance, but one (somewhat hacky) option would be something like allowing specifying a list of formatting options to try, which would be used [here](https://github.com/google/evcxr/blob/e410ecb969e50cdffae7d837a59813cade232b0c/evcxr/src/eval_context.rs#L225), or something. e.g. if I set `:fmt ["{:x}", "{:?}"]` (or whatever), then the system would try {:x} followed by {:?} for things where evcxr_display doesn't apply.

That said, I'm flexible and willing to accept something that requires annotating things manually if the above solution is undesirable for some reason.