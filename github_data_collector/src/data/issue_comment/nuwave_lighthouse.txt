model field is not generated in the definition causing the IDE to raise alerts

- [x ] Added or updated tests
- [x ] Added Docs for all relevant versions
- [x ] Updated CHANGELOG.md

Resolves non

**Changes**
Added model directive to definition area

**Breaking changes**
None
**What problem does this feature proposal attempt to solve?**

The default naming convention that is used to automatically generate input objects by the `@orderBy` directive and `@whereConditions` directive often results in redundant names. Here's a common way to define your schema:

```graphql
type Query {
    users(
        where: _ @whereConditions(columns: ["id", "name"])
        orderBy: _ @orderBy(columns: ["id", "name"])
    ): [User!]! @paginate
}
```

This schema automatically generates a `UsersOrderByOrderByClause` input and a `UsersWhereWhereConditions` input.

**Which possible solutions should be considered?**

I could imagine two possible solutions:

1. Recommend a default naming convention for the query arguments (e.g `orderBy` and `where`) and if the arguments match that naming convention, remove the redundant suffix so that the input names result in `UsersOrderByClause` and `UsersWhereConditions`
2. Add an optional argument to the directive which allows the user to specify a custom name for the input that will be generated

Both solutions could also be combined.

Slack thread: https://lighthouse-php.slack.com/archives/CB28A070S/p1579310262008300

**Describe the bug**

When using a nested mutation, such as update, you're required to pass in the related model's PK, even if the relationship is 1-1. 

```graphql
mutation {
    updateUser(input: {
        id: 1
        username: "test"
        profile: {
            update: {
              	user_id: 2 # This is the undocumented bit and I wouldn't expect to be allowed to use the wrong PK here.
                email: "test@test.com"
            }
        }
    }){
        id
        username
        profile {
            email
        }
    }
}
```

1. This seems undocumented, since no update example is shown in the docs for the 1-1 relationship types.
2. This allows users to create malformed mutations that, at best, trigger laravel or db exceptions. Not sure if it's a valid vector for screwing up the db, though.

**Expected behavior/Solution**

1. It should at least be documented in the 1-1 portion of the nested mutation docs that the related model's PK is needed. That the related model instance isn't using the model's relationship method.

2. It'd seem natural that 1-1 relationships shouldn't need to specify all PKs involved. If a `user` model only has one `profile` relationship, that shouldn't need to be manually specified by the client.

3. I'd expect users of the API to not be allowed to supply malformed mutations that seem to break laravel's normal relationship rules.

 I don't have a proof-of-concept that this could lead to operating on models that don't actually belong to the root model but I wouldn't be surprised if it did. For instance, what if a relationship has extra restrictions set in the model's method that are ignored by supplying incorrect PKs, which Lighthouse seems to be taking at face value?

If nothing else, it's a side-channel attack that leaks which PKs exist in the related model's table, which could compromise slug-based or multi-tenant systems.

**Steps to reproduce**

1. Create schema per https://lighthouse-php.com/master/eloquent/nested-mutations.html#belongs-to
2. Call a nested update with incorrect PKs
```graphql
mutation {
    updateUser(input: {
        id: 1
        username: "test"
        profile: {
            update: {
              	user_id: 2 # This is the undocumented bit and I wouldn't expect to be allowed to use the wrong PK here.
                email: "test@test.com"
            }
        }
    }){
        id
        username
        profile {
            email
        }
    }
}
```

**Output/Logs**

<details><summary>Click to expand</summary>

```
For PK clashes:
SQLSTATE[23000]: Integrity constraint violation: 1062 Duplicate entry '4' for key 'PRIMARY' (SQL: update `profiles` set `user_id` = 4, `email` = test@test.com where `user_id` = 3)

For PKs that don't exist:
No query results for model [App\\Models\\Profile] 5
```

</details></br>

**Environment**

Lighthouse Version: 4.8.1
Laravel Version: 6.11.0

- [x] Added or updated tests
- [ ] Added Docs for all relevant versions
- [ ] Updated CHANGELOG.md

Resolves #1116 

**Changes**

Fetching model inside `@can` directive was reworked, so query builder gets extended if `@forceDelete` or `@restore` is used;  

**Breaking changes**

No, old behavior still works (using `@softDeletes` with passing `trashed` argument from client). The usage of `@softDeletes` is even more granular and overrides these new implementation, as query still gets enhanced.

Should we write something to changelog? and docs?
<!-- Please keep in mind that Lighthouse is a community project and features take effort.
Are you willing to provide a PR for this issue or aid in developing it? -->

**Is your feature proposal related to a problem? Please describe.**

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
I was trying out `@whereConditions` also before 4.8 release, and it was actually pretty easy to extend Operator enum. As I use PostgreSQL, I need ILIKE operator for my conditions. 

Currently to extend the list of allowed operators I had to create a class and modify generated enum. I solved it like this:

```php
class PSQLOperator extends SQLOperator
{
    public function enumDefinition(): string
    {
        $originalDefinition = parent::enumDefinition();
        $additionOperators = '
    "Simple pattern matching (`ILIKE`)"
    ILIKE @enum(value: "ILIKE")
';
        $pos = strrpos($originalDefinition, '}');
        return substr_replace($originalDefinition, $additionOperators, $pos, 0);
    }
}
```

And then I bound my implementation in a service provider, that comes after `WhereConditionsServiceProvider` like this:

```php
$this->app->bind(Operator::class, PSQLOperator::class);
```

I am kinda new to Laravel, and this was my first time I came to binding in laravel. And as I didn't knew the concept, it took me some time to achieve the expected result.

**Possible solutions I'd like**

<!-- A clear and concise description of what you want to happen. -->
Either let us improve the [documentations custom-operator section](https://lighthouse-php.com/master/eloquent/complex-where-conditions.html#custom-operator) (I could create a PR).

OR maybe let's implement the way, where extending enum with new operator (like in my case) can be made easier? Like use a string from config, that will be injected into `SQLOperator::enumDefinition()`

OR maybe let's include ILIKE by default into enum definition? 

**Is your feature proposal related to a problem? Please describe.**

When writing root field resolvers, i am bothered that the `$root` argument is completely useless, it only ever is passed `null`.

**Describe the solution you'd like**

Utilize `$root` as a way to inject dependencies into a resolver, e.g.:

```php
function resolve(Cache $cache, array $args, Context $context, ResolveInfo $resolveInfo)
```

This would be a non-breaking change.

**Describe alternatives you've considered**

Just remove this argument completely and change the resolver function signature for root fields.

There is also a proposal for introducing other magic behaviour into the resolver functions: https://github.com/nuwave/lighthouse/issues/789

We could make such changes in a non-breaking way by adding some kind of marker to new-style resolvers, such as an interface or a directive.
<!-- Please keep in mind that Lighthouse is a community project and features take effort.
Are you willing to provide a PR for this issue or aid in developing it? -->

**Is your feature proposal related to a problem? Please describe.**

Currently implementation of update/upsert don't use `enchanceBuilder()`, therefore it is not possible to update soft deleted model, because without appending e.g. `withTrashed` model will not be fetched.

So it is not possible to do something like this: 

```graphql
extend type Mutation {
   updateAuthor(input: AuthorInput @spread): Author @update @softDeletes
}
```

Well you can use it, but if model is soft deleted, `@update` is not able to find the entity, as user reporter [here](https://stackoverflow.com/questions/59730617/update-trashed-model/59731009)

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

**Describe the solution you'd like**

So here is my question: Should we take care of soft deleted models in update/upsert?

In my application I currently disabled in UI the ability to edit entity, if it is soft deleted (it is actually in trash). What do you think?
 
<!-- A clear and concise description of what you want to happen. -->

- [ ] Added or updated tests
- [ ] Added Docs for all relevant versions
- [ ] Updated CHANGELOG.md

<!-- Link to related issues this PR resolves, e.g. "Resolves #236"-->

**Changes**

<!-- Detail the changes in behaviour this PR introduces. -->

**Breaking changes**

<!-- If there are any breaking changes, list them here.
Make sure to mention them in UPGRADE.md. -->

**Is your feature proposal related to a problem? Please describe.**

Relates to https://github.com/nuwave/lighthouse/issues/894

The execution of certain field middleware directives should always happen in a certain order, since some may depend upon others. While in principle, ordering the definitions in the schema can be used to define this correctly, it is not always practical to do so.

When using directives on a type that are automatically placed on its fields, the order cannot be controlled. Also, it can easily be done wrong by accident.

**Describe the solution you'd like**

Ensure a particular execution order for well-known directives. It would be nice to expose this configuration to the user. This idea is inspired by how Laravel handles middleware execution order.

**Describe alternatives you've considered**

Document the fact that directive order is significant. This should be useful regardless.
- [ ] Added or updated tests
- [ ] Added Docs for all relevant versions
- [ ] Updated CHANGELOG.md

<!-- Link to related issues this PR resolves, e.g. "Resolves #236"-->

**Changes**

<!-- Detail the changes in behaviour this PR introduces. -->
Suggests installing [xkojimedia/laravel-altair-graphql](https://github.com/XKojiMedia/laravel-altair-graphql) to get the Altair GraphQL Client

