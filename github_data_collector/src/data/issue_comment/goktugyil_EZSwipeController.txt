
Is there any plan to provide Swift 4 support yet?
When I try to call moveToPage from another class it fails on this line:

` let currentIndex = stackPageVC.index(of: currentStackVC)!`

with the error:

`fatal error: unexpectedly found nil while unwrapping an Optional value`

here is my code:


```swift
//View controller where the call is started
@IBAction func buttonRightView(_ sender: Any) {
        let vc:ViewController = storyboard?.instantiateViewController(withIdentifier: "ViewController") as! ViewController
        vc.goRight()
    }
```


```swift

class ViewController: EZSwipeController {
    override func setupView() {
        datasource = self
        navigationBarShouldNotExist = true
    }
    func goRight(){
        moveToPage(1, animated: true)
    }
}
```
I have a tableview inside of a swipe controller, but i can't seem to swipe when im swiping on the cells. if i swipe in the section header it allows me to swipe.
The pull request you merged 7 days ago (from bryant1410), caused some problems for me.  Im using Cocoapods and NeverCode (to push my test builds to HockeyApp), and everytime NeverCode compiled the source code, it would return a 'Undefined symbols for architecture arm64', followed by 'linker command failed with exit code 1'.  

If anyone experiences this, remove EZSwipeController from CocoaPods and do a manual install.  

Here was my SO question (which I solved): http://stackoverflow.com/questions/43685126/undefined-symbols-for-architecture-arm64-ios
`class FeaturedSwipeViewController: EZSwipeController, UIGestureRecognizerDelegate {
    
    let seg = UISegmentedControl(items: ["1", "2"])
    
    var advisor: Advisor!
    
    override func setupView() {
        super.setupView()
        datasource = self
        navigationBarShouldNotExist = true
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        seg.selectedSegmentIndex = 0
        seg.frame = CGRect(x: 0, y: 0, width: 200, height: 30)
        seg.addTarget(self, action: #selector(switchViewController(sender:)), for: .valueChanged)
        self.navigationItem.titleView = seg 
    }
    
    override var hidesBottomBarWhenPushed: Bool {
        get {
            return navigationController?.topViewController != self
        }
        set {
            super.hidesBottomBarWhenPushed = newValue
        }
    }
    
    func switchViewController(sender: UISegmentedControl) {
        self.moveToPage(sender.selectedSegmentIndex, animated: true)
    }
}

extension FeaturedSwipeViewController: EZSwipeControllerDataSource {
    func viewControllerData() -> [UIViewController] {
        
        let featuredTopicVC = STORY_BOARD.instantiateViewController(withIdentifier: "featuredTopicVC") as! FeaturedTopicTableViewController
        
        let featuredAMAVC = FeaturedAMATableViewController()
        
        return [featuredTopicVC, featuredAMAVC]
    }
    
    func changedToPageIndex(_ index: Int) {
        seg.selectedSegmentIndex = index
    }
    
}
`

When tap on the second item of segmentedControl EZSwipeVC can move to second page correctly, but after sequentially tapping on the first segmentedControl item EZSwipeVC can't move back to the first page. Sorry for the broken code block styling.
is there an objective-c version
Hi,
I'm using navigationController.push(EZSwipeController) to push a new EZSwipeController into navigation stack, but it seems to break iOS's swipe right to return.
Hi There - Do you have a recommendation on the best way to add a hint animation that there are other views for the user to swipe to? On the initial load of my app I'd like the app to slightly open the left or right view and have it snap back to the main view. I've had a number of beta users tell me they didn't realize they could swipe left to view more pages. 
Here's my code:

```swift
extension SwipeController: EZSwipeControllerDataSource {
    func viewControllerData() -> [UIViewController] {
        let redVC = UIViewController()
        redVC.view.backgroundColor = .red
        
        let blueVC = UIViewController()
        blueVC.view.backgroundColor = .blue
        
        let greenVC = UIViewController()
        greenVC.view.backgroundColor = .green
        
        return [redVC, blueVC, greenVC]
    }
    
    func titlesForPages() -> [String] {
        return ["red", "blue", "green"]
    }
}

class SwipeController: EZSwipeController {
    
    // MARK: - Lifecycle methods

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .yellow
    }

    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
    }
    
    override func setupView() {
        datasource = self
    }

}
```

pretty much exactly how it's done in the readme, but here's what I get:

![simulator screen shot mar 1 2017 12 01 46 pm](https://cloud.githubusercontent.com/assets/7377110/23478667/e293703e-fe76-11e6-8bb9-72878308ba98.png)

As you can see the either the navigation bar is too small or it's overlapping with the status bar.
