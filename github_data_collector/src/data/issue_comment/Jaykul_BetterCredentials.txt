this should resolve #11 and #9

It's not perfect - but I've tested every command with the throw statement removed and they all work.
Like many admins I use very long secure credentials, which are subject to all kinds of typo errors. I'd like to see a switch added to `Get-Credential` that would validate a credential that was inputted.  

I created this function to validate credentials when they are entered (and I use it day to day for this type of functionality).  It leverages the AccountManagement namespace as described Richard Siddaway's blog post: [https://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/](https://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/).  I'd like to see the functionality added in.

Here is my function:
```powershell
Function Get-ValidatedCredential
{
    <#
        .SYNOPSIS
		Retrieves a credential from the user with the standard Windows dialog, and
		then it validates that the password is correct for the account.
        .DESCRIPTION
		Uses the standard dialog with the option to customize the title, the prompt text, and
		to prefill a domain name and user name.  The credential is then tested against the 			 
                domain to validate that the password is correct. If it is not, the user is prompted again.
		The user does have the option to click Cancel and exit this function.
        .PARAMETER DomainName
		The domain name of the user to validate
        .PARAMETER DomainUser
		The username (sAMAccountName) of the user to validate
        .PARAMETER DialogTitle
		The title of the dialog presented to request credentials
        .PARAMETER DialogPrompt
		The prompt of the dialog presented to request credentials
        .EXAMPLE
		PS C:\> Get-ValidatedCredential -DomainName $env:USERDOMAIN -DomainUser MyServiceAccount -DialogTitle 'Enter credentials' -DialogPrompt 'Enter the credentials for the service account to use'
        .NOTES
                This script is based on Richard Siddaway's blog about the System.DirectoryServices.AccountManagement namespace. 
                https://richardspowershellblog.wordpress.com/2008/05/25/system-directoryservices-accountmanagement/
        .INPUTS
                [system.string]
        .OUTPUTS
                [pscredential]
        #>
	[cmdletbinding()]
	param(
		[parameter(Mandatory = $true, HelpMessage='The domain name of the account to be validated', ValueFromPipelineByPropertyName = $true)]
		[string]$DomainName,

		[parameter(Mandatory = $true, HelpMessage = 'The user name of the account to be validated', ValueFromPipelineByPropertyName = $true)]
		[string]$DomainUser,

		[parameter(ValueFromPipelineByPropertyName = $true)]
		[string]$DialogTitle = 'Enter credentials',

		[parameter(ValueFromPipelineByPropertyName = $true)]
		[string]$DialogPrompt = 'Enter the credentials to be validated'
	)

	$MyName = $MyInvocation.InvocationName
	Write-Verbose -Message ('[{0}] Starting {1}' -f [DateTime]::Now, $MyName)
	
	Add-Type -AssemblyName System.DirectoryServices.AccountManagement 

	$HaveValidCredentials = $false
	do
	{
		$Credential = $Host.UI.PromptForCredential($DialogTitle, $DialogPrompt, ('{0}\{1}' -f $DomainName, $DomainUser), $DomainName)
		if ($Credential -eq $null)
		{
			#Throw 'User clicked cancel, exiting the script'
			Write-Verbose -Message ('[{0}] Cancel was clicked, exiting this function quietly' -f $MyName)
			if (Test-Path -Path variable:\Context)
			{
				$Context.Dispose()
			}
			return $null 
		}
		$Context = New-Object -TypeName System.DirectoryServices.AccountManagement.PrincipalContext -ArgumentList ([System.DirectoryServices.AccountManagement.ContextType]::Domain, $DomainName)
		if ($Context.ValidateCredentials($DomainUser, $Credential.GetNetworkCredential().Password))
		{
			$HaveValidCredentials = $true
			Write-Verbose -Message ('[{0}] Current provided credentials are valid, and password is correct, continuing with the installation' -f $MyName)
		}
	}
	until ($HaveValidCredentials)
	$Context.Dispose()
	$Credential
}
```


Get-Credential is trying to load a credential object even if it's not been stored yet. This causes an exception to be thrown.

May be related to #9 as well.

If we wrap module [Line 351](https://github.com/Jaykul/BetterCredentials/blob/master/BetterCredentials.psm1#L351) with setting ErrorActionPreference to SilentlyContinue it seems that this would resolve it.

Alternately I imagine changing the CredentialManagement.Store class function Load() to not throw an exception on [line 198](https://github.com/Jaykul/BetterCredentials/blob/master/CredentialManagement.cs#L198) might be the more elegant solution.
In Set-Credential you can specify the -target attribute, it would be nice to support -target in Get-Credential as well.  

This would allow setting the target as some short name, and allow easy get requests of the short target name vs username.  Mainly for use from CLI.

For example I may want to request the credentials for a client Office 365 login with a username of
domainuser@somecompanyname.onmicrosoft.com but would set the target to compa and be able to easy recall it with get-credential -target compa
Test-Credential and Find-Credential don’t work as expected. The problem lies with the Find function in CredentialManagement.cs. Because CredWrite alters the names of credentials, you are using the function FixTarget to make this alteration transparent when credentials are retrieved. Thus FixTarget needs to be applied to the filter argument of the Find function to make that transparent as well.

Also in the Find function [CredEnumerate](https://msdn.microsoft.com/en-us/library/windows/desktop/aa374794(v=vs.85).aspx) returns false when it fails. In addition to some exception-worthy problems, the failure may be due to there being no credentials that pass the filter (ERROR_NOT_FOUND). In the case of ERROR_NOT_FOUND, the Find function should return a null result rather than throwing an exception.

In my pull request, I am proposing changes to the Find function, and based on these changes I also added some additional examples for Test-Credential and Find-Credential.

Test-Credential and Find-Credential don’t work as expected. The problem lies with the Find function in CredentialManagement.cs. Because CredWrite alters the names of credentials, you are using the function FixTarget to make this alteration transparent when credentials are retrieved. Thus FixTarget needs to be applied to the filter argument of the Find function to make that transparent as well.

Also in the Find function CredEnumerate returns false when it fails. In addition to some exception-worthy problems, the failure may be due to there being no credentials that pass the filter (ERROR_NOT_FOUND). In the case of ERROR_NOT_FOUND, the Find function should return a null result rather than throwing an exception.

Based on these changes I also added some additional examples for Test-Credential and Find-Credential.

In order to support PowerShell Core _on platforms other than Windows_, it's necessary to abstract the credential storage part of this module out into something where we can plug in different solutions on different platforms. For instance:

* **Windows** Credential Vault
* **MacOS** Keychain
* **Linux** D-Bus secret service, or `pass`

Something like [Docker's Credential Helpers](https://github.com/docker/docker-credential-helpers) seems to be the best approach, although we can't just use theirs, because their plugins and client library are written in Go, which doesn't really interop with ... anything.