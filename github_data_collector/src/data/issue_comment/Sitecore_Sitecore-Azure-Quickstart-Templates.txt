Since Sitecore in PaaS uses Redis for session state, ARR affinity should be disabled by default to improve performance.
We have policies requiring us to use a specific data-center. If the one setting it up says a data center should be used it should also apply to the Application Insights. (I had to spend some time figuring out why it did not work without this change.)
The parameters are located in the parameters property of the imported json. 
We use the combination of Azure DevOps, Sitecore Quickstart ARM Templates and custom powershell scripts to automate the Sitecore PaaS provisioning. 

I've been trying to use use Sitecore-Azure-Quickstart-Templates to install SXA on a (vanilla) Sitecore 9.0.2 XP env in Azure. The solution is fully PaaS using Azure search. But I kept running into the error:

> A parameter cannot be found that matches parameter name ‘templateLinkAccessToken’.

If I pass an empty string for the templateLinkAccessToken variable, I then get this error:

> A parameter cannot be found that matches parameter name ‘solrConnectionString’.

I asked the the question on Sitecore Slack and had a few responses but didn't have much joy.

I've referenced other templates (Sitecore Commerce 9.0.2 and XP 9.0.2) and found the values for solrConnectionString and templateLinkAccessToken were set to "" and not null. I tried for a couple of days to pass a null/empty value into these variables via Azure DevOps and kept running into some form of the above mentioned errors.

So to make the SXA template consistent with the Commerce and XP 9.0.2 templates, I finally decided to fork the template and change the values in the template itself from null to "" and was able to successfully initialize a ARM deployment in first go (only passing in the parameters as per the Readme.)

This is why I'm submitting this Pull request for your review and a possible merge into the master branch so It's available to every other user.
The parameters of the EXM DDS and Messaging database are not passed through to the EXM application ARM causing issues with the connection string when a non-default naming is used.
Without this check, that example PS script cannot read parameters from parameters.json file. I think this fix had already been added but it was removed due some reason (or overwritten) 
Please make messagingSqlDatabaseUserName as integer to make it consistent with other values
The database names of core and master, together with the webapp name are assumed with the default naming conventions instead of listening to the standard parameters that are set in the module loop of the main sitecore installation ARM templates
With the new ARM scripts which adds the CompatibilityLevel fixes, the sites are deployed only using addOnPackages. This doesn't trigger a cleanup of the siteroot on publish. To fix this an empty webapp should be added to the deployment in the root. In the added pull-request only support is added to the 8.2.5 XP0 and XP deployments but should be added to all deployments using the correct url to Empty.scwdp.zip.

More information about the addOnPackage deployment can be found here:
https://stackoverflow.com/questions/45868692/deploying-to-an-azure-web-app-via-arm-msdeploy-without-deleting-existing-files
Deploying sxa and the bootloader on azure using the modules are handled in parallel by default (see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-group-create-multiple section Serial Copy).

When deploying MSDeploy packages concurrent a Bad Request: Conflict is thrown during the deployment.

This patch prevents concurrent deployments of the modules.