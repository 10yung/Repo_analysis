There are multiple users asking for raylib integration with other engines/libraries/tools. Here it is a list of desirable examples, some are already available as external repos.

 - [x] raylib + sokol_app -> [rayfork](https://github.com/SasLuca/rayfork)
 - [ ] raylib + spritesheet/atlas
 - [x] raylib + Tiled -> [raylib_tiled_import_with_tmx](https://github.com/OnACoffeeBreak/raylib_tiled_import_with_tmx)
 - [x] raylib + Nuklear -> [raylib-nuklear](https://github.com/tcfunk/raylib-nuklear), [3d-gui-with-raylib](http://bedroomcoders.co.uk/implementing-a-3d-gui-with-raylib)
 - [x] raylib + imgui -> [libtbag/ray](https://github.com/osom8979/tbag/tree/master/libtbag/ray)
 - [x] raylib + Spine -> [spine-raylib](https://github.com/WEREMSOFT/spine-raylib-runtimes)
 - [x] raylib + Unity -> [using-raylib-dll-in-unity](https://unitycoder.com/blog/2019/12/09/using-raylib-dll-in-unity/)
 - [ ] raylib + Assimp
 - [x] raylib + physics/maths -> [ProfJski Examples](https://github.com/ProfJski/RayLib-Examples)
 - [x] raylib + enet -> [NetDynamics](https://github.com/nxrighthere/NetDynamics)
 - [ ] raylib + ECS
 - [x] raygui + tigr -> [raygui-tigr](https://github.com/edomin/Raygui_Helloworld)

Please, feel free to reply this issue with other integrations interesting to be listed here!
Please, before submitting a new issue verify and check:

 - [X] I tested it on latest raylib version from master branch
 - [X] I checked there is no similar issue already reported
 - [X] My code has no errors or misuse of raylib

### Issue description

Raylib uses internally GLFW that does not handle keyboard layouts. It assumes all keyboards are US-QWERTY.

### Environment

Computer with AZERTY keyboard.

### Code Example

```cpp
if (IsPressed(KEY_A))
{
    // I need to press "Q" for this condition to be true
}

### Trail?

Finding a way to convert the keycodes before passing it to GLFW.
raylib implements `RL_MALLOC`, `RL_CALLOC` and `RL_FREE` but some of the external libraries implement their own memory allocators definitions, others none at all. 

Below table shows allocators used in every library/module used by raylib, all of them should be custom allocators to have full control over raylib programs memory allocation if it was required, for example on embedded devices.

| library          | custom alloc   | custom free  | others                             | state |
|------------------|----------------|--------------|------------------------------------|-------|
| glfw             | *calloc()*       | *free()*       | *realloc()*                           | ❗️    |
| glad             | *realloc()*      | *free()*       |                                    | ❗️    |
| miniaudio        | MA_MALLOC      | MA_FREE      | MA_REALLOC                         | ✔️    |
| stb_image        | STBI_MALLOC    | STBI_FREE    | STBI_REALLOC, STBI_REALLOC_SIZED   | ✔️    |
| stb_image_write  | STBIW_MALLOC   | STBIW_FREE   | STBIW_REALLOC, STBIW_REALLOC_SIZED | ✔️    |
| stb_image_resize | STBIR_MALLOC   | STBIR_FREE   |                                    | ✔️    |
| stb_vorbis       | *malloc()*       | *free()*       |                                    | ❗️    |
| dr_flac          | DRFLAC_MALLOC  | DRFLAC_FREE  | DRFLAC_REALLOC                     | ✔️    |
| dr_mp3           | DRMP3_MALLOC   | DRMP3_FREE   | DRMP3_REALLOC                      | ✔️    |
| dr_wav           | DRWAV_MALLOC   | DRWAV_FREE   | DRWAV_REALLOC                      | ✔️    |
| jar_mod          | *malloc()*       | *free()*       |                                    | ❗️    |
| jar_xm           | *malloc()*       | *free()*       |                                    | ❗️    |
| par_shapes       | PAR_MALLOC     | PAR_FREE     | PAR_CALLOC                         | ✔️    |
| cgltf            | *malloc()*       | *free()*       |                                    | ❗️    |
| dirent           | *malloc()*       | *free()*       |                                    | ❗️    |
| rgif             | RGIF_MALLOC    | RGIF_FREE    |                                    | ✔️    |
| tinyobj_loader_c | TINYOBJ_MALLOC | TINYOBJ_FREE | TINYOBJ_REALLOC, TINYOBJ_CALLOC    | ✔️    |

| raylib module          | custom alloc   | custom free  | others                             | state |
|------------------|----------------|--------------|------------------------------------|-------|
| core             | RL_MALLOC      | RL_FREE      |                                    | ✔️    |
| rlgl             | RL_MALLOC      | RL_FREE      | RL_CALLOC, *realloc()*               | ❗️    |
| text             | RL_MALLOC      | RL_FREE      | *calloc()*, *realloc()*                | ❗️    |
| textures         | RL_MALLOC      | RL_FREE      | *realloc()*                          | ❗️    |
| physac           | PHYSAC_MALLOC  | PHYSAC_FREE  |                                    | ✔️    |
| rnet             | *malloc()*       | *free()*       | *calloc()*                           | ❗️    |
| rmem             | *malloc()*       | *free()*       |                                    | ✔️    |

Note that all libraries custom allocators should ultimatelly fallback to raylib allocators: `RL_MALLOC`, `RL_FREE`, `RL_CALLOC`.
There is some problem for macOS high DPI support so the scissors mode and camera mode will only work after doing an affine transformation to the coordinate. But I just find out that, if i manually pack the executable file in an mac application bundle with a simple plist, this problem will be solved (Don't know why, but it just works (:<)

 And then comes the real problem : I can't find reach the resources file packed in the app bundle (under the `MyApp.app/res/`) through a pure c method. The only way i know is to use swift or Objective-C , such as `CFBundleCopyResourceURL()`. But i really want to do this job in pure c.

Now i just put all my resources under `/Users/Shared/MyApp/`, it works well, but looks ugly. Are there any c api which can get the absolute path for resource directory under the .app directory? Could anybody familliar with macOS help me?

PS: I don't know which module tag to use so i just put it under [core], maybe [build] is better ?

When running some eamples (./textures_particles_blending;  ./core_2d_camera) I exeperienced that none of input keys did not work. I tried keys <kbd>Esc</kbd>,  <kbd>Left</kbd> and <kbd>Right</kbd>.

### Environment

Kubuntu 19.10
INFO: Initializing raylib 2.6-dev (tested also on test5 branch)
INFO: Display device initialized successfully
INFO: Viewport offsets: 0, 0
INFO: GLAD: OpenGL extensions loaded successfully
INFO: OpenGL 3.3 Core profile supported
INFO: GPU: Vendor:   NVIDIA Corporation
INFO: GPU: Renderer: GeForce GTX 1050/PCIe/SSE2
INFO: GPU: Version:  3.3.0 NVIDIA 435.21
INFO: GPU: GLSL:     3.30 NVIDIA via Cg compiler


Current logging system needs several improvements.

 - [ ] `TraceLog()` messages should be properly categorized and unified, they need to be standardized in some way:
```
> DEVICE INIT/CLOSE + INFO ---> Window, Graphics, Audio, Network
> DATA LOADING CPU/GPU -------> Image, Texture, Font, Mesh, Shader, Sound, Music
> Internal Processes ---------> Shader compilation, VBO overflow...
```
 - [ ] Current system is designed in a way that messages are ALWAYS stored inside the binary. It would be interesting to review this design... probably using macros.
Hi

I am doing a 2.5D engine using Gtk3 and raylib to render.

To integrate raylib, create gtk-raylib.c and gtk-raylib.h, clone core.c now called raylib-core.c, remove GLFW3 and everything related to non-Desktop platforms, since it is not necessary within GTK3.

GLAD inside rlgl.h place a conditional macro for when I am using epoxy.h which is what I am using in GTk3 and is the one "recommended" for GtkGLArea.

gtk-raylib.c handles the render as GLFW3 does and allows you to use "gtk_raylib_embed_new" which in turn uses gtk_gl_area ...

![Captura de pantalla (23)](https://user-images.githubusercontent.com/1939353/72175733-3899fd80-33b3-11ea-88a9-a54a1a89a523.png)

I still don't have support for any kind of input, but I hope to complete it and make the web examples work.

When this is complete I will share gtk-raylib-2.5
Currently, calculating the screen position of things inside of a render texture is difficult, however if we either had to pass in the rectangle of the window (or render texture) or we had to pass in just the width and height, it would solve this problem.
```c
Vector2 GetWorldToTexture(Vector3 position, Camera camera, int screenWidth, int screenHeight)
{
	// Calculate projection matrix (from perspective instead of frustum
	Matrix matProj = MatrixIdentity();

	if (camera.type == CAMERA_PERSPECTIVE)
	{
		// Calculate projection matrix from perspective
		matProj = MatrixPerspective(camera.fovy * DEG2RAD, ((double)screenWidth / (double)screenHeight), 0.01, 1000.0);
	}
	else if (camera.type == CAMERA_ORTHOGRAPHIC)
	{
		float aspect = (float)screenWidth / (float)screenHeight;
		double top = camera.fovy / 2.0;
		double right = top * aspect;

		// Calculate projection matrix from orthographic
		matProj = MatrixOrtho(-right, right, -top, top, 0.01, 1000.0);
	}

	// Calculate view matrix from camera look at (and transpose it)
	Matrix matView = MatrixLookAt(camera.position, camera.target, camera.up);

	// Convert world position vector to quaternion
	Quaternion worldPos = { position.x, position.y, position.z, 1.0f };

	// Transform world position to view
	worldPos = QuaternionTransform(worldPos, matView);

	// Transform result to projection (clip space position)
	worldPos = QuaternionTransform(worldPos, matProj);

	// Calculate normalized device coordinates (inverted y)
	Vector3 ndcPos = { worldPos.x / worldPos.w, -worldPos.y / worldPos.w, worldPos.z / worldPos.w };

	// Calculate 2d screen position vector
	Vector2 screenPosition = { (ndcPos.x + 1.0f) / 2.0f * (float)screenWidth, (ndcPos.y + 1.0f) / 2.0f * (float)screenHeight };

	return screenPosition;
}
```

this is my current solution

Currently, if you have some shader, typically shaders that do something technical like drawing normals to a texture, calculating lighting in screen space, you need to use a shader other than what is assigned to the material of that object. in order to do this you need to store the current shader into a temporary value, set the new shader for every 3d object you want to draw this why, then revert them after you draw. this becomes even more difficult (and slow) if your models have multiple materials, in this cases you must backup every shader into an array, then assign the shader to each model, and then go through the array again to reassign it.; or make a second model. To solve this we need some sort of override that can be set, similar to beginShaderMode(), it could be combined into the same function, or we could make a beginShaderMode3d() or a beginShaderModeOverride(), it would overide all shaders being used on 3d draw calls.

how it is now (C++)

```cpp
BeginTextureMode(renderTextures[i]);
        DrawText("Top", 100, 100, 12, LIME);
        ClearBackground(randomColor);
        BeginMode3D({ {topWindowOffset.x,1,topWindowOffset.y}, {topWindowOffset.x,0,topWindowOffset.y}, {0,0,1}, topWindowZoom, CAMERA_ORTHOGRAPHIC });
            DrawGrid(10, 1);
                for (std::vector<Model>::iterator j = models.begin(); j != models.end(); j++) {
                    Shader temp = (*j).materials[0].shader;
                    (*j).materials[0].shader = orthoGraphic;
                    DrawModelWires(*j, { 0,0,0 }, 1, SKYBLUE);
                    (*j).materials[0].shader = temp;
                }
            EndMode3D();
    EndTextureMode();
``` 

how it should be 

```cpp
BeginTextureMode(renderTextures[i]);
        DrawText("Top", 100, 100, 12, LIME);
        ClearBackground(randomColor);
        BeginMode3D({ {topWindowOffset.x,1,topWindowOffset.y}, {topWindowOffset.x,0,topWindowOffset.y}, {0,0,1}, topWindowZoom, CAMERA_ORTHOGRAPHIC });
            DrawGrid(10, 1);
            beginShaderMode3D(orthoGraphic);
                for (std::vector<Model>::iterator j = models.begin(); j != models.end(); j++) {
                    DrawModelWires(*j, { 0,0,0 }, 1, SKYBLUE);
                }
            endShaderMode3d();
            EndMode3D();
    EndTextureMode();
```

now this is a simple case, but this currently does not support multiple materials, i can not think of an efficient way to do the same thing with multiple materials.

Please, before submitting a new issue verify and check:

 - [check] I tested it on latest raylib version from master branch
 - [check] I checked there is no similar issue already reported
 - [check] My code has no errors or misuse of raylib

### Issue description

I get different, but still wrong, behaviour depending on whether I build from source or use the 2.5 release.

**Raylib 2.5:**
Camera.target appears to have no effect whatsoever. Zoom and rotation work. Offset appears to only have half the effect it should (I believe - I switched to building from master, and haven't gone back to double-check this). Taking code verbatim from the example at https://www.raylib.com/examples/web/core/loader.html?name=core_2d_camera and compiling on my machine the square can be moved off the left or right sides of the screen, and the camera does not follow at all.

**Latest raylib built from master:**
Camera.target appears to have **half** the effect it is supposed to. Zoom and rotation do work. Offset works, but also appears to have only half the effect it should. Taking code verbatim from the example at https://www.raylib.com/examples/web/core/loader.html?name=core_2d_camera and compiling on my machine the square can be moved off the left or right sides of the screen, with the camera following at a slowed rate. If the code is modified to double the camera.target.x and camera.target.y values the square stays in a fixed position onscreen, but is no longer centred. If offset.x and offset.y are doubled as well, the square is now centered.

### Environment

MacBook Pro (Retina, 15-inch, Mid 2014)
OS X Catalina 10.15.2 (19C57)
Intel Iris Pro 1536 MB graphics
According to https://support.apple.com/en-us/HT202823 this machine uses OpenGL 4.1 - I don't know if there's a better way to verify that for sure.

### Issue Screenshot

<img width="848" alt="Screen Shot 2019-12-28 at 10 03 01 PM" src="https://user-images.githubusercontent.com/2744848/71551848-87609400-29be-11ea-9507-c77fb92811fc.png">

Note that the square has moved off the centre of the screen and the camera has not followed.

### Code Example

Code is verbatim from https://www.raylib.com/examples/web/core/loader.html?name=core_2d_camera

Modified example code that doubles offset and target values to stay centered is at https://gist.github.com/nathanielhudson/3813624c02b1e3b736ef685ba5ba76f4 
