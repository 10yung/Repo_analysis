exception:
`Exception in thread "main" java.lang.IllegalStateException: The connection has already been created. This method must be called before reading or writing to the request.
	at com.github.kevinsawicki.http.HttpRequest.useProxy(HttpRequest.java:3241)`
Since not support Socks4 / 5 proxy yet,
So does it even not support HTTP proxy ?

Please provide a support of digestAuth method not only basic.
hi, i am working on a funtion that needs client certificate when sending request, i am not sure if this util suppports this. Please help , thanks
If a parameter value contains the character # when using the method post(), the information after the character # is lost
Is there a way to get a map of all the `headers` in a request without starting the connection?

Currently, calling `headers()` will begin the connection and so manipulating them in any way after that call will cause an error.

This is causing a real headache, as the only available methods are aimed at specific headers - I want to see all of the headers that will be sent. This is being done through a filter, so I do not have control over how the request is initialised. 
We have created a mobile app from ionic Cordova framwork and did a scan from WhiteHat Scan. It gives us following issue:

> Applications which use the Java Cryptography Architecture (JCA) for key generation, signing, or random number generation may not receive cryptographically strong values on Android devices due to improper initialization of the PRNG (pseudo-random number generator). Applications that directly invoke the system-provided OpenSSL PRNG without explicit initialization on Android are also affected.
> 
> The application was found to be vulnerable because of issues related to the SecureRandom implementation. A static value is used each time the SecureRandom variable is created, which means that the results are not randomized on each individual instance. The code locations provided in the table below were identified as being the cause for the current risk status. It is encouraged to review these locations to determine if the violation occurred in an internal or external library. If the issue was found in an external library, it is not possible to determine if the affected portion of code is being triggered from the application's Java source code. In this case, it may not be possible to locate and resolve this issue.
> 

**And Details for the issue are as:**
Signature: ()Ljavax/net/ssl/SSLSocketFactory;
Class: Lcom/github/kevinsawicki/http/HttpRequest;
Method: getTrustedFactory

RECOMMENDATION
To avoid being vulnerable to Secure Random, ensure that you properly initialize the underlying pseudo-random number generator.

Developers who use JCA for key generation, signing or random number generation should explicitly initialize the PRNG with entropy from /dev/urandom or /dev/random. Also, developers should evaluate whether to regenerate cryptographic keys or other random values previously generated using JCA APIs such as SecureRandom, KeyGenerator, KeyPairGenerator, KeyAgreement, and Signature.
A suggested implementation is provided [here](https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html)
Tests in com.github.kevinsawicki.http.HttpRequestTest fail when run after test HttpRequestTest.customConnectionFactory. customConnectionFactory sets the ConnectionFactory instance in HttpRequest to a custom one but fails to reset it back to the default. Later tests, such as postWithVaragsQueryParams, expect the ConnectionFactory to be the default. This proposed fix resets the ConnectionFactory to the default after customConnectionFactory is run.

1. add HttpResponse to collect http response infoã€‚

2.add default timeout flag