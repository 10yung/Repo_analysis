**Our Requirement**
We want to dockerize the existing wordpress appllication with external MySQL DB & for that 
Instead of configuring DB details through UI, I directly added wp-config.php file under  **/var/www/html** and refreshed the page.
Instead of returning _wp-admin_ panel it open a window saying wp-config.php already exists.
I've attached the screenshot, clicking the blue link returns the panel as expected.

In case of continous deployment this will not be acceptable for users of website. Is there a better way to integrate this config file & make it seamless for the continuous deployment . Please suggest.

<img width="1425" alt="Screenshot 2020-01-03 at 2 48 11 PM" src="https://user-images.githubusercontent.com/59470659/71715686-4b9f5180-2e38-11ea-8496-5e97bf4ea940.png">

When doing an AB Request stress test i notice by default on docker with raspberry it only uses the 1st core primarily? Across the docker swarm.

I think i need to add mpm= “event” to the apache config inside the wordpress docker image?

![Uploading 662045D5-0D98-4266-80C2-0D9720E1D649.jpeg…]()



It seems we should be able to mount `themes` and `plugins` and `uploads` separately, but for some reason it appears that when I remove and re-create wordpress using docker-compose, wp-content is always owned by root.

```
  wordpress:
    depends_on:
      - db
    image: wordpress:latest
    container_name: wordpress
    restart: always
    volumes:
      - ./wordpress/themes:/var/www/html/wp-content/themes:rw
      - ./wordpress/plugins:/var/www/html/wp-content/plugins:rw
      - ./wordpress/uploads.ini:/usr/local/etc/php/conf.d/uploads.ini
    environment:
      WORDPRESS_DB_HOST: db
      WORDPRESS_DB_USER: xxx
      WORDPRESS_DB_PASSWORD: xxx 
      WORDPRESS_DB_NAME: xxx
      VIRTUAL_HOST: xxx
```

```
-rw-r--r--  1 www-data www-data 4.7K Nov 30  2017 wp-trackback.php
-rw-r--r--  1 www-data www-data 8.3K Nov 30  2017 wp-mail.php
-rw-r--r--  1 www-data www-data 3.3K Nov 30  2017 wp-load.php
-rw-r--r--  1 www-data www-data  369 Nov 30  2017 wp-blog-header.php
-rw-r--r--  1 www-data www-data  420 Nov 30  2017 index.php
-rw-r--r--  1 www-data www-data 3.0K Aug 17  2018 xmlrpc.php
-rw-r--r--  1 www-data www-data  20K Jan  1  2019 license.txt
-rw-r--r--  1 www-data www-data 3.8K Jan  9  2019 wp-cron.php
-rw-r--r--  1 www-data www-data 6.8K Jan 12  2019 wp-activate.php
-rw-r--r--  1 www-data www-data 2.5K Jan 16  2019 wp-links-opml.php
-rw-r--r--  1 www-data www-data  31K Jan 16  2019 wp-signup.php
-rw-r--r--  1 www-data www-data 2.3K Jan 21  2019 wp-comments-post.php
-rw-r--r--  1 www-data www-data  19K Mar 28 19:04 wp-settings.php
-rw-r--r--  1 www-data www-data 7.3K Apr  8 22:59 readme.html
-rw-r--r--  1 www-data www-data  39K Jun 10 13:34 wp-login.php
drwxr-xr-x  9 www-data www-data 4.0K Sep  5 01:08 wp-admin
drwxr-xr-x 20 www-data www-data  12K Sep  5 01:08 wp-includes
drwxr-xr-x  1 root     root     4.0K Sep 12 09:32 ..
drwxr-xr-x  4 root     root     4.0K Sep 24 02:17 wp-content
-rw-r--r--  1 www-data www-data  234 Sep 24 02:17 .htaccess
-rw-r--r--  1 www-data www-data 2.8K Sep 24 02:17 wp-config-sample.php
-rw-r--r--  1 www-data www-data 3.2K Sep 24 02:17 wp-config.php
drwxrwxrwx  5 www-data www-data 4.0K Sep 24 02:17 .
```
Remove `--path=/dev/null` so if the current directory is a wordpress directory it will load the plugins and correctly prefix "wp" when needed. The second if is changed to elif because the conditions are exclusive and if the first test matched the second doesn't need to run.
For a while now, `WP-CLI` has become the official way to manage WordPress from scripts / command line.

But if you glance through `docker-entrypoint.sh`, the current way of installing WordPress and hacking `wp-config.php` with `sed` and `awk` is not pretty and error-prone compared to a bunch of `WP-CLI` commands like
```
wp core download
wp config set
wp core install
```

`WP-CLI` doesn't take too much space, and it's become essential. I propose to:
- include `WP-CLI` in all official WordPress images,
- deprecate the stand-alone `WP-CLI` image,
- refactor `docker-entrypoint.sh` using `WP-CLI`.

It will show the community the relevant way of managing WordPress from the command line, and will make it easier to actually use the image later on. It will also solve #256.
So that
* `wp-content` is mountable, and even moutable read-only (#115, #6, #281)
* `wp-config.php` is mountable (#200, #231, #135, #8, #142, #147)

It would be very useful to have the option to define your own custom directory structure.

Example:

```
/var/www/html:
    admin:
        ---- wp-admin
        ---- wp-content
        ---- wp-includes
        ---- etc
    app:
        ---- plugins
        ---- themes
        ---- index.php
    index.php
    wp-config.php
    .htaccess
```

Inside wp-config.php:
```

if (!defined('WP_SITEURL')) {
	define('WP_SITEURL', 'http://' . $_SERVER['SERVER_NAME'] . '/admin');
}
if (!defined('WP_HOME')) {
	define('WP_HOME',    'http://' . $_SERVER['SERVER_NAME'] . '');
}
if (!defined('WP_CONTENT_DIR')) {
	define('WP_CONTENT_DIR', dirname(__FILE__) . '/app');
}
if (!defined('WP_CONTENT_URL')) {
	define('WP_CONTENT_URL', 'http://' . $_SERVER['SERVER_NAME'] . '/app');
}
```

Inside index.php (root)

```
/** Loads the WordPress Environment and Template */
require( dirname( __FILE__ ) . '/admin/wp-blog-header.php' );
```

Reference: https://github.com/wesleytodd/YeoPress/tree/master/app/templates
Related to #133 , #131 
This is preventing the creation of images that can do things like running an instance of nginx alongside php-fpm controlled by some process manager. You kind of need to be able to change the `CMD` for that to work smoothly, but because of the current behavior you **lose all the valuable work** that's done inside of docker-entrypoint.sh, which kinda seems like the whole point of these images.

I'm curious what the use case is for calling docker-entrypoint.sh without php-fpm, which literally does nothing. And how that use case is so valuable that it is worth blocking the extension of this image. If it was really important that the contents of docker-entrypoint.sh where not executed, `ENTRYPOINT` could just be changed to something else.

I've seen maintainers dismiss multiple requests for nginx images on the premise that it is against the "seperated services" design pattern, but I don't see a clean way for people to make their own images with nginx with the way it is right now.
@tianon In reference to:
https://github.com/docker-library/wordpress/blob/8ab70dd61a996d58c0addf4867a768efe649bf65/php7.0/fpm/docker-entrypoint.sh#L46

An 'empty' GlusterFS volume will usually have the following default directory:  **.trashcan**
```
2016-11-28T06:27:44-05:00 WordPress not found in /var/www/html - copying now...
2016-11-28T06:27:44-05:00 WARNING: /var/www/html is not empty - press Ctrl+C now if this is an error!
2016-11-28T06:27:44-05:00 + ls -A
2016-11-28T06:27:44-05:00 .trashcan
2016-11-28T06:27:44-05:00 + sleep 10
2016-11-28T06:28:12-05:00 Complete! WordPress has been successfully copied to /var/www/html
```
How would you feel about the following tweak being submitted as a PR that updates all docker-entrypoint.sh files:
```shell
		if [ "$(ls -A)" != '.trashcan' ]; then
```
This way if the 'ls -A' returns just one result and tests inequality against '.trashcan', it can skip the 10 second penalty for truly empty GlusterFS volumes.
As it currently stands, anything in Wordpress that needs to send email is broken. The [`wp_mail`](http://codex.wordpress.org/Function_Reference/wp_mail) function that is used for sending out email by default is a thin wrapper over PHP's [`mail`](http://php.net/manual/en/function.mail.php) function, which defaults to calling `/usr/sbin/sendmail -t -i` (cf. http://php.net/manual/en/mail.configuration.php). There are `php.ini` settings for SMTP, but they are only used on Windows.

For my own work based on this image, I've been installing [`ssmtp`](http://ssmtp.sourceforge.net/) and configuring it to use an external relay host for SMTP, but that's clearly not a turnkey solution for everyone. It also looks like there are many Wordpress plugins that provide SMTP support, but I don't think that installing any of them by default in this image seems reasonable.

Perhaps all of this should just be documented, but I wanted to get it on your radar.
