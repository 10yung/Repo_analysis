
关于物流助手的相关接口是不是还没有接入？
$authname = 'qywechat_access_token' . $appid;

因为企业微信会有多个应用需要缓存access_token
而appid 是企业微信的appid 是唯一的
应该使用appsecret 或者 appid+agentid

$authname = 'qywechat_access_token' . $appsecret;
Is this project using continuous integration services (e.g., Travis-CI or Jenkings)? Or has it used at any point of its lifetime?
https://github.com/dodgepudding/wechat-php-sdk/blob/cba751772f462e1a1385a99ea44929a6a3d82098/wechat.class.php#L60

上面代码使用 **EVENT_MENU_VIEW** 常量会报以下错误

`errcode=65318, errmsg=must use utf-8 charset hint: [xxx]`

经测试把 **VIEW** 改为 **view** 即可
虽然好像SDK不检查这个也无所谓，这个让调用端检查也ok。
但因为很多人不知道文本消息的最大长度是2047字节（UTF-8编码），所以会有一些诡异的事情发生而无法理解。
类中自定义了一个json_encode方法，避免在内容中有中文时会被转义成unicode，导致收到的消息是乱码（unicode），其实php中可以向json_encode方法传递第二个参数的值为 JSON_UNESCAPED_UNICODE，这个时候中文不会转义

```
json_encode(['index' => '中文'], JSON_UNESCAPED_UNICODE);  // 输出： {"index": "中文"}
```
**代码检查：**
git clone https://github.com/dodgepudding/wechat-php-sdk.git
cd wechat-php-sdk/
grep -r "simplexml_load_string" ./

./wechat.class.php:            $array = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
./wechat.class.php:			$this->_receive = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
./old_version/wechatauth.class.php:							$xml = simplexml_load_string($result);
./old_version/wechatpay.class.php:				$orderxml = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
./old_version/Thinkphp/Wechatpay.class.php:				$orderxml = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
./old_version/Thinkphp/Wechatauth.class.php:							$xml = simplexml_load_string($result);
./Thinkphp/JsSdkPay.class.php:    $array_data = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA)), true);
./qywechat.class.php:            $array = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);
./qywechat.class.php:			$this->_receive = (array)simplexml_load_string($postStr, 'SimpleXMLElement', LIBXML_NOCDATA);

**漏洞修复：**
在调用simplexml_load_string函数前调用libxml_disable_entity_loader(true)禁止实体引用

**漏洞证明：**
略

**报告来自：**
niubl of Tencent Blade Team
```
	/**
	 * 过滤文字回复\r\n换行符
	 * @param string $text
	 * @return string|mixed
	 */
	private function _auto_text_filter($text) {
		if (!$this->_text_filter) return $text;
		return str_replace("\r\n", "\n", $text);
	}
```

以上为实现文本消息回复的换行，其中str_replace("\r\n", "\n", $text);是无法识别到\r\n.

正确应为
`return str_replace("\\r\\n", "\n", $text);`
你好，不知道这个漏洞有没有修复