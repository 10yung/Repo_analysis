Examples 7.10 and 7.17 from the spec are ignored in the test suite; however, if they are removed from this list, they pass. Is there another reason that they are ignored?

https://github.com/chyh1990/yaml-rust/blob/360a34d75bb64357cfdbc5bb706bcde9a0ecbc23/tests/specs/cpp2rust.rb#L6-L7
Found this while modifying the tests for https://github.com/chyh1990/yaml-rust/issues/148.  The current implementation incorrectly parses examples 6.2 and 6.3 in the spec.

```rust
#[test]
fn ex() {
    use yaml_rust::YamlLoader;

    let docs = YamlLoader::load_from_str("-\tb").unwrap();
    assert_eq!(docs[0].as_vec().unwrap()[0].as_str().unwrap(), "b");
}
```

```
thread 'ex' panicked at 'assertion failed: `(left == right)`
  left: `"\tb"`,
 right: `"b"`', src\main.rs:100:5
```
Looking at the tests, I see this file:

https://github.com/chyh1990/yaml-rust/blob/360a34d75bb64357cfdbc5bb706bcde9a0ecbc23/tests/spec_test.rs.inc

which appears to be generated from this file:

https://github.com/chyh1990/yaml-rust/blob/360a34d75bb64357cfdbc5bb706bcde9a0ecbc23/tests/specs/handler_spec_test.cpp

However, much of the information tested by the C++ tests is lost in this transformation.  Most notably, the contents of scalar values and tags are not tested.  Is there a reason for this?  I think it would be nice to see this information included in the tests performed by the crate.

(I'm guessing this is due to technical difficulties with parsing the arguments in the conversion script, and/or converting them from C++ syntax to rust?)

(~~while trying to think through how I could implement this, I found it also unclear why untagged values in the C++ tests sometimes have a tag of `"?"` and other times a tag of `"!"`...~~ Ahh, that's covered in section 3.3.2 (Resolved Tags) of the spec)
Currently, tags are only emitted on Scalar events, and not on MappingStart or SequenceStart.  This in turn leads to [a shortcoming in `serde_yaml`](https://users.rust-lang.org/t/help-using-serde-yaml-to-deserialize-value-with-very-many-possible-types/37058) where tags cannot be used on array-like variants of an enum.

```yaml
!vec3 [1.0, 0.5, 0.3]
```

Notice that libyaml supports tags on all three of these events.

This will be a breaking change, as it will require adding new fields to `pub enum Event`.
Would you consider supporting YAML comments with this library? It does appear to be a feature of Go's YAML library for example and would be helpful when wanting to edit YAML files whilst preserving comments.
Fixes #139
It also fixes the issue where clippy wasn't available on some nightlies so this got ran sporadically by using the [new rustup feature](https://blog.rust-lang.org/2019/10/15/Rustup-1.20.0.html#installing-the-latest-compatible-nightly) to give us the latest nightly that has clippy in it.

The build is still failing, but that's fixed by #145
Fix spelling in several places - mostly variable names, error string literals and documentation, although one test function was renamed.
In certain situations, yaml-rust fails to handle strings starting with a UTF-8 encoded [byte order mark](https://en.wikipedia.org/wiki/Byte_order_mark).

Plenty of software (such as notepad.exe) inserts BOMs automatically, so I think it's something yaml-rust should be aware of.

Currently, yaml-rust scans like this:
```
"\u{feff}test: 5"        -> Scalar("\u{feff}test") Scalar("5")
"\u{feff}\n---\ntest: 5" -> Scalar("\u{feff}") DocumentStart Scalar("test") Scalar("5")
"\u{feff}---\ntest: 5"   -> ScanError("mapping values are not allowed in this context")
```

All but the last one parse successfully.

I'm not sure exactly what the correct behavior is here, but I don't think we can push the burden of sanitization onto users. Thoughts?
Hi. I want to leverage yaml-rust to open, modify, and save [Unity](https://docs.unity3d.com/Manual/YAMLSceneExample.html) scene files. Out the gate I've hit multiple issues.


**1. Can't parse common scene files.**
This is due to the error: `mapping values are not allowed in this context at line ### column ##`

Scene files frequently contains lines such as this: `--- !u!114 &137567736 stripped`

This is apparently a [common issue](https://github.com/aaubry/YamlDotNet/issues/140#issuecomment-141970889). This may be invalid YAML. I'm not sure.


**2. Missing tag support**
Unity makes _heavy_ use of document tags. If yaml-rust can load a unity scene file then emitting it back out drops all of the document tags. This is a catastrophic failure.

`--- !u!29 &1`


**3. Different emitter style**
Unity's YAML is compact. 
`m_LocalPosition: {x: 0, y: 3, z: 0}`

yaml-rust is not. 
```
m_LocalPosition:
    x: 0
    y: 3
    z: 0
```

Number 1 may be invalid YAML syntax, in which case it should probably be handled separately and more explicitly. But #2 and #3 seem like they should be correct to fix?