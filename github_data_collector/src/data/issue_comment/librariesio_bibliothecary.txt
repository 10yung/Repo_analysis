On PyPI, packages sometimes include requirements in the `install_requires` section of the `setup.cfg` file. Examples (from @jaraco who is a Tidelift lifter):

* https://github.com/yougov/FogBugzPy/blob/bis/setup.cfg
* https://github.com/jaraco/jaraco.tidelift/blob/master/setup.cfg

It might be a good idea to fix this in one fell swoop along with #76.
https://github.com/librariesio/bibliothecary/blob/master/lib/bibliothecary/parsers/rubygems.rb#L38

How could we do better here?

Clojure has another manifest format file called `deps.edn`, details over here: https://clojure.org/reference/deps_and_cli#_deps_edn

The file format is `Extensible Data Notation`, and there looks like there's a ruby library we can use to read it: https://github.com/relevance/edn-ruby

Basic example:

```
{:deps
 {hiccup {:mvn/version "1.0.5"}
garden {:mvn/version "1.3.3"}}}
```
I'm one of the maintainers of [Twine](https://github.com/pypa/twine/). Like some other Python projects, we manage many of our test dependencies via [our `tox.ini` file](https://github.com/pypa/twine/blob/fb062b77c7ef38c28430dd4c8edaa592c4b59b07/tox.ini), and I'd like [the Libraries.io page about twine](https://libraries.io/pypi/twine) to reflect those test dependencies.

I suggest bibliothecary follow up on the `tox.ini` TODOs mentioned in librariesio/libraries.io#48, librariesio/librarian#5, and librariesio/librarian#57.

I don't think I can make time to work on a PR for this within the next few weeks, but could potentially pair on it at [the PyCon sprints in May](https://wiki.python.org/psf/PackagingSprints).
...when obviously things in this file are in fact development dependencies.  

[AWS Chalice](https://libraries.io/github/aws/chalice) is a good example, which also demonstrates another Python idiom - people often use multiple suffixes to distinguish requirements files for various purposes.  -docs, -dev, -tools, etc should all be counted as development dependencies (and likewise for the requirements/*.txt forms of these files.

I found this issue when investigating [Hypothesis](https://libraries.io/pypi/hypothesis), a testing library I maintain - libraries.io shows 472 runtime and 14 development dependent repositories, and I'd expect the opposite ratio.
Docs: http://docs.platformio.org/en/latest/projectconf.html

Example:

```
[platformio]
env_default = nodemcuv2

; You MUST inject these options into [env:] section
; using ${common_env_data.***} (see below)
[common_env_data]
build_flags = -D VERSION=1.2.3 -D DEBUG=1
lib_deps_builtin =
    SPI
    Wire
lib_deps_external =
    ArduinoJson@~5.6,!=5.4
    https://github.com/gioblu/PJON.git#v2.0
    https://github.com/adafruit/DHT-sensor-library/archive/master.zip

[env:nodemcuv2]
platform = espressif8266
framework = arduino
board = nodemcuv2

; Build options
build_flags = ${common_env_data.build_flags} -DSSID_NAME=HELLO -DSSID_PASWORD=WORLD

; Library options
lib_deps =
    ${common_env_data.lib_deps_builtin}
    ${common_env_data.lib_deps_external}
    https://github.com/me-no-dev/ESPAsyncTCP.git
    PubSubClient@2.6
    OneWire

; Serial Monitor options
monitor_baud = 15200

; Unit Testing options
test_ignore = test_desktop

[env:bluepill_f103c8]
platform = ststm32
framework = arduino
board = bluepill_f103c8

; Build options
build_flags = ${common_env_data.build_flags}

; Library options
lib_deps =
    ${common.lib_deps_external}

; Debug options
debug_tool = custom
debug_server =
    JLinkGDBServer
    -singlerun
    -if
    SWD
    -select
    USB
    -port
    2331
    -device
    STM32F103C8

; Unit Testing options
test_ignore = test_desktop
```
Details: https://github.com/nim-lang/nimble#creating-packages

Example: https://github.com/nim-lang/nimble/blob/master/nimble.nimble

```
import ospaths
template thisModuleFile: string = instantiationInfo(fullPaths = true).filename

when fileExists(thisModuleFile.parentDir / "src/nimblepkg/common.nim"):
  # In the git repository the Nimble sources are in a ``src`` directory.
  import src/nimblepkg/common
else:
  # When the package is installed, the ``src`` directory disappears.
  import nimblepkg/common

# Package

version       = nimbleVersion
author        = "Dominik Picheta"
description   = "Nim package manager."
license       = "BSD"

bin = @["nimble"]
srcDir = "src"

# Dependencies

requires "nim >= 0.13.0", "compiler#head"

when defined(nimdistros):
  import distros
  if detectOs(Ubuntu):
    foreignDep "libssl-dev"
  else:
    foreignDep "openssl"

task test, "Run the Nimble tester!":
  withDir "tests":
    exec "nim c -r tester"
```

Spec: http://inqlude.org/schema/generic-manifest-v1
Manifest for listing homebrew packages as dependencies

Example: https://github.com/ossfriday/ossfriday/blob/master/Brewfile

```
tap "github/bootstrap"

brew "postgresql", restart_service: true

brew "rbenv"
brew "ruby-build"
brew "nodenv"
brew "node-build"
```

Source code: https://github.com/Homebrew/homebrew-bundle

Related to https://github.com/librariesio/libraries.io/pull/1254

Add a `/docs` folder with markdown instructions for adding support for a new package manager manifest file format.