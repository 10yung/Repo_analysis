Has anything changed in Rust which could be done better in this repo to make it more idiomatic of the current version of Rust?
https://github.com/pcwalton/sprocketnes/blob/163e5da03c6c1db2f78898a001f13d4dd739f0ff/src/disasm.rs#L93

`format!()` will already return a `String` therefore the call to `.to_string()` is meaningless.
This is achieved by eliminating two global variables and making the code
work nicely with ownership analysis.

This is possible because AudioDevice<NesCallback> has a lock method that
returns an object that dereferences to NesCallback we can store the
output buffer directly in NesCallback and then safely access it to
update the raw sound data.

The resulting code is easier to follow and contains fewer unsafe blocks.
Without this the project can't be built on Mac.

Apparently the APU is the bottleneck. Because when you disable it the emulator is blazingly fast (way too fast in fact). I'll see if I can optimize it.
```➜  sprocketnes git:(master) cargo build
    Updating registry `https://github.com/rust-lang/crates.io-index`
 Downloading libc v0.2.4
 Downloading lazy_static v0.1.15
 Downloading sdl2 v0.6.1
 Downloading time v0.1.34
 Downloading bitflags v0.2.1
 Downloading rand v0.3.12
 Downloading num v0.1.29
 Downloading libc v0.1.12
 Downloading sdl2-sys v0.6.2
 Downloading advapi32-sys v0.1.2
 Downloading winapi v0.2.5
 Downloading winapi-build v0.1.1
 Downloading rustc-serialize v0.3.16
 Downloading kernel32-sys v0.2.1
   Compiling winapi-build v0.1.1
   Compiling winapi v0.2.5
   Compiling libc v0.2.4
   Compiling sdl2-sys v0.6.2
   Compiling rustc-serialize v0.3.16
   Compiling libc v0.1.12
   Compiling bitflags v0.2.1
   Compiling lazy_static v0.1.15
error[E0642]: patterns aren't allowed in methods without bodies
   --> /Users/me/.cargo/registry/src/github.com-1ecc6299db9ec823/rustc-serialize-0.3.16/src/serialize.rs:145:45
    |
145 |                                             &f_name: &str,
    |                                             ^^^^^^^

   Compiling advapi32-sys v0.1.2
   Compiling kernel32-sys v0.2.1
error: aborting due to previous error

For more information about this error, try `rustc --explain E0642`.
error: Could not compile `rustc-serialize`.
warning: build failed, waiting for other jobs to finish...
error: build failed


➜  sprocketnes git:(master) ✗ rustc --explain E0642
error: no extended information for E0642```
For example, here's how "inc" is implemented:

    // Increments and decrements
    fn inc<AM:AddressingMode<M>>(&mut self, am: AM) {
        let val = am.load(self);
        let val = self.set_zn(val + 1);
        am.store(self, val)
    }

This is "set_zn":

     fn set_zn(&mut self, val: u8) -> u8 {
        self.set_flag(ZERO_FLAG, val == 0);
        self.set_flag(NEGATIVE_FLAG, (val & 0x80) != 0);
        val
    }

I can't see how this would handle a increment of value 255 without panicking? Seeing that there's been no commits in 3 years, perhaps Rust handled overflows differently back then? (Just getting started, writing an emulator in Rust to get to know the language)

So far I've been finding these by playing a game until it crashes. To find all of them, I'd probably need to do a thorough line-by-line audit or run a fuzzer.

I might try using afl-fuzz to catch the rest of these, sometime.
