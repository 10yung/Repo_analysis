- [ ] Address all coding and style violations detected during a *Release* build (send a regular pull request which must be merged before continuing)
- [ ] ensure completeness of draft [release notes](https://github.com/FakeItEasy/FakeItEasy/releases), including non-owner contributors, if any (move release notes forward from any pre-releases to the current release)
- before releasing 6.0.0, check integration package compatibility
  - [ ] [AutoFixture.AutoFakeItEasy](https://github.com/AutoFixture/AutoFixture) - @blairconrad
        broken by _ReturnValue not set #1696_, released in 5.4.1. `SetReturnValue` is no longer found by `FakeObjectCall`. Created AutoFixture/AutoFixture#1155, with two potential fixes submitted as PRs
  - [ ] [Machine.Fakes.FakeItEasy](https://github.com/machine/machine.fakes)
  - [ ] [Autofac.Extras.FakeItEasy](https://github.com/autofac/Autofac.Extras.FakeItEasy) - @blairconrad tested with 5.5.1-alpha.0.19 (aede7f0f68ab1fb5cbe17a39fed9893230041929)
  - [ ] [EntityFrameworkTesting.FakeItEasy](https://github.com/scott-xu/EntityFramework.Testing) - @blairconrad tested with 5.5.1-alpha.0.19 (aede7f0f68ab1fb5cbe17a39fed9893230041929)
- [ ] run `tools\prepare_release.cmd next x.y.z vNext` to:
    - change "vNext" names to appropriate x.y.z version for the next GitHub Release, milestone, and release checklist (this issue)
    - create a new draft GitHub Release, milestone, and release checklist
- [ ] tag master with the new version number and push to upstream. This will cause the build server to
    - push the nupkgs to [nuget.org](https://www.nuget.org/profiles/FakeItEasy),
    - attach all nupkgs from the tagged build to the GitHub Release,
    - add a comment to each issue and pull request in the release, saying it was published in this release
- [ ] wait for NuGet package validation
- [ ] de-list pre-release NuGet packages if present
- [ ] publish the GitHub release
- [ ] tweet, mentioning contributors, and post link as comment here for easy retweeting ;-)
- [ ] post tweet in [Gitter](https://gitter.im/FakeItEasy/FakeItEasy)
- [ ] add a note in each issue that has a significant contribution from a community member, thanking the contributor
- [ ] close this issue
- [ ] if this is **not** a pre-release, close the [milestone](https://github.com/FakeItEasy/FakeItEasy/milestones?state=open) for this release

From a conversation in #1683. At that point I suggested a `UserCallbackException`, but the documentation for that class says it's "An exception thrown when a user-provided callback throws an exception", so we should either consider a different exception or update the docs for that class.


The [Source Stepping](https://fakeiteasy.readthedocs.io/en/stable/source-stepping/) documentation page is out of date. It should be updated with instructions regarding SourceLink.

[This article](https://www.hanselman.com/blog/ExploringNETCoresSourceLinkSteppingIntoTheSourceCodeOfNuGetPackagesYouDontOwn.aspx) by Scott Hanselman has some configuration instructions.
Perhaps using the Try .NET Global Tool. See [what Scott Hanselman has to say about it](https://www.hanselman.com/blog/CreateExceptionalInteractiveDocumentationWithTryNETThePollyNuGetLibraryDid.aspx).
C# 8 introduced the "default interface methods" feature, i.e. interface methods with a default implementation (this feature works only on .NET Core 3).

Currently it's not possible with FakeItEasy to make a fake that calls the default implementation. Using `CallsBaseMethods` doesn't work, because Castle.Core doesn't support this feature yet (https://github.com/castleproject/Core/issues/447).

We should support default interface methods in FakeItEasy.

API options:
- Reuse `CallsBaseMethods()` to call the default interface methods, in addition to what it currently does.
- Introduce a new `CallsDefaultImplementation()` to cover that scenario. (Maybe use a more explicit name; "default implementation" could be misleading)

Implementation options:
- Wait for Castle.Core to support it
- Do it ourselves. Default interface methods are methods whose declaring type is an interface and have `IsAbstract == false`. We need to call them non-virtually (otherwise it would cause infinite recursion). POC implementation [here](https://gist.github.com/thomaslevesque/a4310070de3d44f81144aafd136bea7c).
[GetCalls](https://fakeiteasy.readthedocs.io/en/stable/advanced-usage/#getting-the-list-of-calls-made-on-a-fake) allows to get the call list of the faked object, however making your way through it isn't as friendly as the rest of the API.

As such, would it be possible to either:

- Add a `FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration.GetCalls()` method
or
- Add the `Fake.GetCalls(FakeItEasy.Configuration.IReturnValueArgumentValidationConfiguration)` overload

To immediately get the call list of a specifically setup call?
Having configured a fake object in strict mode, I don't seem to be able to provide a fake method call for a method that's taking an anonymous object as its parameter.

Can you please add an example to the documentation, providing information about how to deal with anonymous types in method call signatures?

### My Code (excerpt)

```
A.CallTo(() => _converter.ToParameters(new { loginName = "x", functionId = 1, division = (string)null })).Returns(new ParameterDefinitionPowershell[0]);
```

### Exception Details

```
Call to unconfigured method of strict fake: IPowershellObjectConverter.ToParameters`1[<>f__AnonymousType1`3[System.String,System.Int32,System.String]](anonymousObject: { loginName = x, functionId = 1, division =  }).
```
This is kind of a question rather then a bug.

I am wondering if it might be smarter to validate all rules, before throwing an exception that any one rule is not working.
See comments below in the code example.

```c#
using System;
using FakeItEasy;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Internal;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace fm.Extensions.Logging.Tests
{
    [TestClass]
    public sealed class FakeItEasyBugTests
    {
        /// <summary>
        /// This test fails with
        /// Test method fm.Extensions.Logging.Tests.FakeItEasyBugTests.FailTest threw exception: 
        /// FakeItEasy.UserCallbackException: Argument matcher <ex => (ex.Message == "Test Exception")> threw an exception. See inner exception for details. ---> System.NullReferenceException: Object reference not set to an instance of an object.
        ///     at lambda_method(Closure , Exception )
        ///    at FakeItEasy.Core.DefaultArgumentConstraintManager`1.MatchesConstraint.FakeItEasy.Core.IArgumentConstraint.IsValid(Object argument) in C:\projects\fakeiteasy\src\FakeItEasy\Core\DefaultArgumentConstraintManager.cs:line 85
        /// --- End of inner exception stack trace ---
        ///     at FakeItEasy.Core.DefaultArgumentConstraintManager`1.MatchesConstraint.FakeItEasy.Core.IArgumentConstraint.IsValid(Object argument) in C:\projects\fakeiteasy\src\FakeItEasy\Core\DefaultArgumentConstraintManager.cs:line 89
        ///    at FakeItEasy.Expressions.ExpressionCallMatcher.ArgumentsMatchesArgumentConstraints(ArgumentCollection argumentCollection) in C:\projects\fakeiteasy\src\FakeItEasy\Expressions\ExpressionCallMatcher.cs:line 112
        ///    at FakeItEasy.Expressions.ExpressionCallMatcher.ArgumentsMatches(ArgumentCollection argumentCollection) in C:\projects\fakeiteasy\src\FakeItEasy\Expressions\ExpressionCallMatcher.cs:line 100
        ///    at FakeItEasy.Configuration.RuleBuilder.RuleMatcher.Matches(IFakeObjectCall call) in C:\projects\fakeiteasy\src\FakeItEasy\Configuration\RuleBuilder.cs:line 358
        ///    at System.Linq.Enumerable.Count[TSource](IEnumerable`1 source, Func`2 predicate)
        ///    at FakeItEasy.Core.FakeAsserter.AssertWasCalled(Func`2 callPredicate, Action`1 callDescriber, CallCountConstraint callCountConstraint) in C:\projects\fakeiteasy\src\FakeItEasy\Core\FakeAsserter.cs:line 33
        ///    at FakeItEasy.Configuration.RuleBuilder.MustHaveHappened(CallCountConstraint callCountConstraint) in C:\projects\fakeiteasy\src\FakeItEasy\Configuration\RuleBuilder.cs:line 196
        /// </summary>
        [TestMethod]
        public void FailTest()
        {
            ILogger fake = A.Fake<ILogger>();

            fake.Trace("Test Message");
            fake.Trace(new Exception("Test Exception"), "Test Message");

            A.CallTo(() => fake.Log<object>(LogLevel.Trace, 0,
                A<FormattedLogValues>.That.Matches(f => f.ToString() == "Test Message"),
                A<Exception>.That.IsNull(),
                A<Func<object, Exception, string>>.Ignored)).MustHaveHappenedOnceExactly();

            A.CallTo(() => fake.Log<object>(LogLevel.Trace, 0,
                A<FormattedLogValues>.That.Matches(f => f.ToString() == "Test Message"),
                // #1: The following line will fail, because it is matched against the first log message, which has no exception.
                A<Exception>.That.Matches(ex => ex.Message == "Test Exception"),
                A<Func<object, Exception, string>>.Ignored)).MustHaveHappenedOnceExactly();

            A.CallTo(() => fake.Log<object>(LogLevel.Trace, 0,
                A<FormattedLogValues>.That.Matches(f => f.ToString() == "Test Message"),
                // #2: Workaround (check for null)
                A<Exception>.That.Matches(ex => ex != null && ex.Message == "Test Exception"),
                A<Func<object, Exception, string>>.Ignored)).MustHaveHappenedOnceExactly();
        }
    }
}
```
Would be nice a new argument matcher for a collection of values, that can be good if we are testing some method that process an argument list

Something like this `IsInOrderFromColection`

```cs
    public interface IDep { Double(int n);  }

     var mock = A.Fake<IDep>();
     A.CallTo(() => mock.Double(A<int>._)).Returns(0);

     var numbers = new[] { 2, 4, 5 };
     foreach (var n in numbers)
        mock.Double(n);

      A.CallTo(() => 
         mock.Double(A<int>.That.IsInOrderFromColection(2, 4, 5) ))
         .MustHaveHappened();

```
it should verify if the `Double` method is called with 2, 4 and 5 in sequence,


@stakx is adding delegate-generating code to DynamicProxy let's create a spike that uses it to see how well it fits our model.

I'll make notes here so my in-progress investigation (and inevitable backtracking) doesn't pollute the discussion in https://github.com/castleproject/Core/pull/403.
