The order fixtures are applied appears to have changed / become
indeterminate in pytest 5.3.3 which breaks the over-riding of
mpl_test_settings that we were doing in test_backend_qt5.

This moves the skipping logic to mpl_test_settings, but leaves the
importing of QtCore in the qt_core fixture.

This is a follow on to #16259 that should work for all versions of pytest.
Backport PR #16259: TST: something changed in pytest 5.3.3 that breaks our qt fixtures
## PR Summary

Redo of #9629.  Lots of discussion there.  

Suppose `len(x)` is N, `len(y)` is M, and `size(C)` is M, N.  Previously, if `shading='flat'` then `pcolor/mesh` would silently drop the last row and column of `C` and `x` and `y` would specify the edges of the colorer quadrilaterals.  

While compatible with Matlab, this is both arbitrary, and probably *not* what the user wanted.  

This PR changes a few related things:

1. if `shading='flat'` and the dimensions of *x*, *y* and *C* match, a Deprecation Warning is raised the data is no longer silently dropped. 
2. A new `shading='nearest'` is provided that *only* allows for  *x*, *y* and *C* to match, and centers the colors on the grid points.  
3. A new `shading='auto'` is provided that will choose 'flat' or 'nearest' depending on the size of the data.
4. A new `rcParam['pcolor.shading']` is provided that defaults to 'flat' (for back compatibility).  

### Demo:

```python
import numpy as np
import matplotlib.pyplot as plt

fig, axs = plt.subplots(3, 2, sharex=True, sharey=True)

nx = 4
ny = 5
x = np.arange(nx)
y = np.arange(ny)

X, Y = np.meshgrid(x, y)
np.random.seed(19680808)

C = np.random.rand(ny, nx)

# deprecation warning:
axs[0, 0].pcolormesh(x, y, C, vmin=0, vmax=1, shading='flat')
axs[0, 0].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[0, 0].set_title('flat: Emits deprecation warning')

# no deprecation warning
axs[0, 1].pcolormesh(x, y, C[:-1, :-1], vmin=0, vmax=1, shading='flat')
axs[0, 1].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[0, 1].set_title('flat: No warning')

# no deprecation warning
axs[1, 0].pcolormesh(x, y, C, shading='nearest', vmin=0, vmax=1)
axs[1, 0].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[1, 0].set_title('nearest')

# no deprecation warning
axs[1, 1].pcolormesh(x, y, C, shading='gouraud', vmin=0, vmax=1)
axs[1, 1].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[1, 1].set_title('gouraud')

axs[1, 1].set_xlim([-0.5, 3.5])
axs[1, 1].set_ylim([-0.5, 4.5])

# no deprecation warning:
axs[2, 0].pcolormesh(x, y, C, vmin=0, vmax=1, shading='auto')
axs[2, 0].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[2, 0].set_title('auto: matching size')

# no deprecation warning
axs[2, 1].pcolormesh(x, y, C[:-1, :-1], vmin=0, vmax=1, shading='auto')
axs[2, 1].scatter(X[:], Y[:], c=C.flat, ec='w')
axs[2, 1].set_title('auto: c smaller')
```

The first call emits:

```
testpcolormesh.py:17: MatplotlibDeprecationWarning: shading='flat' when X and Y have 
the same dimensions as C is deprecated since 3.3.  Either specify the corners of 
the quadrilaterals with X and Y, or pass shading='auto', 'nearest' or 'gouraud'
or set rcParams['pcolor.shading']
  axs[0, 0].pcolormesh(x, y, C, vmin=0, vmax=1, shading='flat')
```

![pcolor](https://user-images.githubusercontent.com/1562854/72671824-47149480-3a05-11ea-9605-49befddcf706.png)


## PR Checklist

- [ ] Has Pytest style unit tests
- [ ] Code is [Flake 8](http://flake8.pycqa.org/en/latest/) compliant
- [ ] New features are documented, with examples if plot related
- [ ] Documentation is sphinx and numpydoc compliant
- [ ] Added an entry to doc/users/next_whats_new/ if major new feature (follow instructions in README.rst there)
- [ ] Documented in doc/api/api_changes.rst if API changed in a backward-incompatible way

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example "Raise ValueError on
  non-numeric input to set_xlim".  Avoid non-descriptive titles such as
  "Addresses issue #8576".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->

## PR Summary

Backport of #15718.

## PR Summary

This is the first step of #16253.

It currently looks like this:
![grafik](https://user-images.githubusercontent.com/2836374/72669013-ffa1fe80-3a2c-11ea-9c20-ddee94624f65.png)

The contents will be adapted during the following steps.


<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

I would like to move the version links on the main page to the sidebar. Similar to (exact format to be detemined).
![grafik](https://user-images.githubusercontent.com/2836374/72668480-abe0e680-3a27-11ea-8199-7f86b5353d93.png)

I propose to reuse the existing `versions.html` with adapted, so that older versions of the page still can show up-to-date version information.

This can be handled in separate steps for which I plan to make dedicated PRs:
1) Move the version snippet to the sidebar.
2) For 2.2.5 update the EOL announcement.
3) For 3.x remove the EOL announcement.
4) Update the contents of versions.txt.


<!--To help us understand and resolve your issue, please fill out the form to the best of your ability.-->
<!--You can feel free to delete the sections that do not apply.-->

### Bug report

**Bug summary**

<!--A short 1-2 sentences that succinctly describes the bug-->
`spy` always draws with the origin in the upper left corner if `marker` is not `None`, even if `origin='lower'` is provided as a keyword argument.

**Code for reproduction**

<!--A minimum code snippet required to reproduce the bug.
Please make sure to minimize the number of dependencies required, and provide
any necessary plotted data.
Avoid using threads, as Matplotlib is (explicitly) not thread-safe.-->

```python
points = np.zeros([10, 5])
points[5:] = 1
fig, ax = plt.subplots()
ax.spy(points, marker='.', origin='lower')

```

**Actual outcome**
![spy_point_marker](https://user-images.githubusercontent.com/9356872/72668056-a1efc100-39f0-11ea-8103-72c68f7005f4.png)

After this point, the origin appears to be fixed in the upper left corner. Any subsequent commands (`imshow`, `spy`) seem to ignore `origin='lower'`.

<!--The output produced by the above code, which may be a screenshot, console output, etc.-->



**Expected outcome**

<!--A description of the expected outcome from the code snippet-->
<!--If this used to work in an earlier version of Matplotlib, please note the version it used to work on-->

Note that `ax.spy(points, origin='lower')` (omitting the `marker` argument) works properly:
![spy_default_marker](https://user-images.githubusercontent.com/9356872/72668033-6fde5f00-39f0-11ea-9e82-9fe283673166.png)

Though it's worth pointing out that the x-axis ticks and labels always end up in upper spine, not the lower one, regardless of `origin='upper'` or `origin='lower'`. The behavior of `imshow` is a bit different. If `origin='lower'`, the ticks and labels are moved to the bottom.


The documentation for spy notes that:
```
If *Z* is a `scipy.sparse.spmatrix` or *marker* or *markersize* are
*None*, a `~matplotlib.lines.Line2D` object will be returned with
the value of marker determining the marker type, and any
remaining kwargs passed to `~.Axes.plot`.
```
So that seems to explain why including `marker` changes the function's behavior.

**Matplotlib version**
<!--Please specify your platform and versions of the relevant libraries you are using:-->
  * Operating system: Centos 7
  * Matplotlib version: 3.1.2
  * Matplotlib backend (`print(matplotlib.get_backend())`): Qt5Agg
  * Python version: 3.6.8
  * Jupyter version (if applicable):
  * Other libraries: 

<!--Please tell us how you installed matplotlib and python e.g., from source, pip, conda-->
<!--If you installed from conda, please specify which channel you used if not the default-->
Installed using anaconda.
Looks like (unless I've missed a shorter route) with the master docs, to access the API changes you need to click on "Documentation" (top menu), "API Overview", find the small, inconspicuous "See also the API Changes" link (and possibly then again the small "Old API changes" link).  (and I only figured that out because I grepped the source...)

It doesn't have to be toplevel, but this seems a bit too well hidden to me.
## PR Summary

This provides two fixes for #15842 which independently fix the reported bug.

The first merges segments when iterating through the paths, the second ensures that a 0 length segment intersects with no other segment (rather than all (or maybe just some?) segments.

The 0 length segment not intersecting any segments, including ones it is a point on, matches the behavior of shapely.

attn @TarasKuzyo

## PR Checklist

- [x] Has Pytest style unit tests
- [x] Code is [Flake 8](http://flake8.pycqa.org/en/latest/) compliant

<!--
Thank you so much for your PR!  To help us review your contribution, please
consider the following points:

- A development guide is available at https://matplotlib.org/devdocs/devel/index.html.

- Help with git and github is available at
  https://matplotlib.org/devel/gitwash/development_workflow.html.

- Do not create the PR out of master, but out of a separate branch.

- The PR title should summarize the changes, for example "Raise ValueError on
  non-numeric input to set_xlim".  Avoid non-descriptive titles such as
  "Addresses issue #8576".

- The summary should provide at least 1-2 sentences describing the pull request
  in detail (Why is this change required?  What problem does it solve?) and
  link to any relevant issues.

- If you are contributing fixes to docstrings, please pay attention to
  http://matplotlib.org/devel/documenting_mpl.html#formatting.  In particular,
  note the difference between using single backquotes, double backquotes, and
  asterisks in the markup.

We understand that PRs can sometimes be overwhelming, especially as the
reviews start coming in.  Please let us know if the reviews are unclear or
the recommended next step seems overly demanding, if you would like help in
addressing a reviewer's comments, or if you have been waiting too long to hear
back on your PR.
-->

None