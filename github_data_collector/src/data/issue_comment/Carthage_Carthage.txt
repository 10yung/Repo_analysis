Some dependency authors have "treat warnings as errors" turned on in their published frameworks. This is fine until Apple releases a new compiler version with a more thorough analyzer. Now your project won't build because of a single line of unreachable code, which was a fatalError() anyway, in a dependency that may not even be under active development anymore.

Or perhaps a build server has 15 jobs in the Jenkins queue, leading to type-checking exceeding 400 ms, triggering a Swift warning. Now your build cancels and to meet a deadline you're forced to disable "treat warnings as errors" in your git repo, since there was no way to simply override it from the command line.

Maybe your engineers can't update XCode to the latest version because of some new warnings about "let" vs. "var" etc. making carthage not `bootstrap`â€”but since they can't update XCode, they can't see all the new warnings at once, meaning they can't fix them. It's a sort of vicious cycle.

This PR fixes that by adding a simple new option to Carthage: `--warnings-as-errors X` where `X` is `yes`, `no`, `1`, `0`, `true`, `false`, `y`, `n`, `ja`, or `nein` (not case sensitive).

Tests & documentation are included.

Note to reviewers: I don't know if this should be version 0.35.0 or 0.34.1. Updating to this version will not break anyone, but downgrading to 0.34.0 from this version might break a build script here and there if they might have added the new build setting. So I went with 0.35.0 to be on the safe side.
Connected to this: https://github.com/Carthage/Carthage/issues/2705
As I wrote in the last comment, I re-tried, after several time, to run Carthage using SPM, but I'm still unable to compile it.

The following is the error I get:

```
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: error: type 'ValidateCommand' does not conform to protocol 'CommandProtocol'
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: error: type 'VersionCommand' does not conform to protocol 'CommandProtocol'
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: error: type 'ValidateCommand' does not conform to protocol 'CommandProtocol'
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: error: type 'VersionCommand' does not conform to protocol 'CommandProtocol'
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:24:10: error: generic parameter 'C' could not be inferred
registry.register(ArchiveCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: error: type 'ArchiveCommand' does not conform to protocol 'CommandProtocol'
public struct ArchiveCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: note: do you want to add protocol stubs?
public struct ArchiveCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: error: type 'ArchiveCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:25:10: error: generic parameter 'C' could not be inferred
registry.register(BootstrapCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: error: type 'BootstrapCommand' does not conform to protocol 'CommandProtocol'
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:26:10: error: generic parameter 'C' could not be inferred
registry.register(BuildCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: error: type 'BuildCommand' does not conform to protocol 'CommandProtocol'
public struct BuildCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: note: do you want to add protocol stubs?
public struct BuildCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: error: type 'BuildCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:27:10: error: generic parameter 'C' could not be inferred
registry.register(CheckoutCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: error: type 'CheckoutCommand' does not conform to protocol 'CommandProtocol'
public struct CheckoutCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: note: do you want to add protocol stubs?
public struct CheckoutCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: error: type 'CheckoutCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:28:10: error: generic parameter 'C' could not be inferred
registry.register(CopyFrameworksCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: error: type 'CopyFrameworksCommand' does not conform to protocol 'CommandProtocol'
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:29:10: error: generic parameter 'C' could not be inferred
registry.register(FetchCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: error: type 'FetchCommand' does not conform to protocol 'CommandProtocol'
public struct FetchCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: note: do you want to add protocol stubs?
public struct FetchCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: error: type 'FetchCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:30:10: error: generic parameter 'C' could not be inferred
registry.register(OutdatedCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: error: type 'OutdatedCommand' does not conform to protocol 'CommandProtocol'
public struct OutdatedCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: note: do you want to add protocol stubs?
public struct OutdatedCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: error: type 'OutdatedCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:31:10: error: generic parameter 'C' could not be inferred
registry.register(UpdateCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: error: type 'UpdateCommand' does not conform to protocol 'CommandProtocol'
public struct UpdateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: note: do you want to add protocol stubs?
public struct UpdateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: error: type 'UpdateCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:32:10: error: generic parameter 'C' could not be inferred
registry.register(ValidateCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: error: type 'ValidateCommand' does not conform to protocol 'CommandProtocol'
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Validate.swift:8:15: note: do you want to add protocol stubs?
public struct ValidateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/main.swift:33:10: error: generic parameter 'C' could not be inferred
registry.register(VersionCommand())
         ^
Commandant.CommandRegistry:5:17: note: in call to function 'register'
    public func register<C>(_ commands: C...) -> Commandant.CommandRegistry<ClientError> where ClientError == C.ClientError, C : Commandant.CommandProtocol
                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: error: type 'VersionCommand' does not conform to protocol 'CommandProtocol'
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Version.swift:7:15: note: do you want to add protocol stubs?
public struct VersionCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: error: type 'FetchCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: error: type 'FetchCommand' does not conform to protocol 'CommandProtocol'
public struct FetchCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: note: do you want to add protocol stubs?
public struct FetchCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:16:5: error: binary operator '<*>' cannot be applied to operands of type '(ColorOptions) -> (GitURL) -> FetchCommand.Options' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:16:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: error: type 'FetchCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: error: type 'FetchCommand' does not conform to protocol 'CommandProtocol'
public struct FetchCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:9:15: note: do you want to add protocol stubs?
public struct FetchCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:16:5: error: binary operator '<*>' cannot be applied to operands of type '(ColorOptions) -> (GitURL) -> FetchCommand.Options' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Fetch.swift:16:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: error: type 'ArchiveCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: error: type 'ArchiveCommand' does not conform to protocol 'CommandProtocol'
public struct ArchiveCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: note: do you want to add protocol stubs?
public struct ArchiveCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:32:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> ([String]) -> ArchiveCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:32:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: error: type 'BootstrapCommand' does not conform to protocol 'CommandProtocol'
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: error: type 'ArchiveCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:11:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: error: type 'ArchiveCommand' does not conform to protocol 'CommandProtocol'
public struct ArchiveCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:10:15: note: do you want to add protocol stubs?
public struct ArchiveCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:32:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> ([String]) -> ArchiveCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Archive.swift:32:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: error: type 'BootstrapCommand' does not conform to protocol 'CommandProtocol'
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Bootstrap.swift:8:15: note: do you want to add protocol stubs?
public struct BootstrapCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: error: type 'BuildOptions' does not conform to protocol 'OptionsProtocol'
extension BuildOptions: OptionsProtocol {
^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: note: do you want to add protocol stubs?
extension BuildOptions: OptionsProtocol {
^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: error: type 'BuildCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: error: type 'BuildCommand' does not conform to protocol 'CommandProtocol'
public struct BuildCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: note: do you want to add protocol stubs?
public struct BuildCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:25:4: error: cannot convert return expression of type 'Result<BuildOptions, CommandantError<_>>' to return type 'Result<BuildOptions, CommandantError<CarthageError>>'
                        <*> mode <| Option(key: "use-binaries", defaultValue: true, usage: "don't use downloaded binaries when possible")
~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:56:5: error: binary operator '<*>' cannot be applied to operands of type '(BuildOptions) -> (Bool) -> (ColorOptions) -> (Bool) -> (String) -> (String?) -> (Bool) -> ([String]?) -> BuildCommand.Options' and 'Result<BuildOptions, CommandantError<CarthageError>>'
                                <*> BuildOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:56:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> BuildOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: error: type 'CheckoutCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: error: type 'CheckoutCommand' does not conform to protocol 'CommandProtocol'
public struct CheckoutCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: note: do you want to add protocol stubs?
public struct CheckoutCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:38:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> (String) -> ([String]?) -> CheckoutCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:38:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: error: type 'BuildOptions' does not conform to protocol 'OptionsProtocol'
extension BuildOptions: OptionsProtocol {
^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: note: do you want to add protocol stubs?
extension BuildOptions: OptionsProtocol {
^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: error: type 'BuildCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:31:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: error: type 'BuildCommand' does not conform to protocol 'CommandProtocol'
public struct BuildCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:30:15: note: do you want to add protocol stubs?
public struct BuildCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:25:4: error: cannot convert return expression of type 'Result<BuildOptions, CommandantError<_>>' to return type 'Result<BuildOptions, CommandantError<CarthageError>>'
                        <*> mode <| Option(key: "use-binaries", defaultValue: true, usage: "don't use downloaded binaries when possible")
~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:56:5: error: binary operator '<*>' cannot be applied to operands of type '(BuildOptions) -> (Bool) -> (ColorOptions) -> (Bool) -> (String) -> (String?) -> (Bool) -> ([String]?) -> BuildCommand.Options' and 'Result<BuildOptions, CommandantError<CarthageError>>'
                                <*> BuildOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:56:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> BuildOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: error: type 'CheckoutCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: error: type 'CheckoutCommand' does not conform to protocol 'CommandProtocol'
public struct CheckoutCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:9:15: note: do you want to add protocol stubs?
public struct CheckoutCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:38:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> (String) -> ([String]?) -> CheckoutCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:38:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: error: type 'CopyFrameworksCommand' does not conform to protocol 'CommandProtocol'
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: error: type 'CopyFrameworksCommand' does not conform to protocol 'CommandProtocol'
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:2:20: note: protocol requires nested type 'Options'; do you want to add it?
    associatedtype Options : Commandant.OptionsProtocol
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/CopyFrameworks.swift:8:15: note: do you want to add protocol stubs?
public struct CopyFrameworksCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:97:4: error: cannot convert return expression of type 'Result<ColorOptions, CommandantError<_>>' to return type 'Result<ColorOptions, CommandantError<CarthageError>>'
                        <*> mode <| Option(
~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: error: type 'OutdatedCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: error: type 'OutdatedCommand' does not conform to protocol 'CommandProtocol'
public struct OutdatedCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: note: do you want to add protocol stubs?
public struct OutdatedCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:68:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> (String) -> OutdatedCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode, additionalUsage: UpdateType.legend)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:68:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode, additionalUsage: UpdateType.legend)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: error: type 'ColorOptions' does not conform to protocol 'OptionsProtocol'
public struct ColorOptions: OptionsProtocol {
              ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:47:15: note: do you want to add protocol stubs?
public struct ColorOptions: OptionsProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Formatting.swift:97:4: error: cannot convert return expression of type 'Result<ColorOptions, CommandantError<_>>' to return type 'Result<ColorOptions, CommandantError<CarthageError>>'
                        <*> mode <| Option(
~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: error: type 'OutdatedCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:50:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: error: type 'OutdatedCommand' does not conform to protocol 'CommandProtocol'
public struct OutdatedCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:9:15: note: do you want to add protocol stubs?
public struct OutdatedCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:68:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(ColorOptions) -> (String) -> OutdatedCommand.Options, CommandantError<_>>' and 'Result<ColorOptions, CommandantError<CarthageError>>'
                                <*> ColorOptions.evaluate(mode, additionalUsage: UpdateType.legend)
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Outdated.swift:68:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> ColorOptions.evaluate(mode, additionalUsage: UpdateType.legend)
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: error: type 'UpdateCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: error: type 'UpdateCommand' does not conform to protocol 'CommandProtocol'
public struct UpdateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: note: do you want to add protocol stubs?
public struct UpdateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:80:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(BuildOptions) -> (CheckoutCommand.Options) -> UpdateCommand.Options, CommandantError<_>>' and 'Result<BuildOptions, CommandantError<CarthageError>>'
                                <*> BuildOptions.evaluate(mode, addendum: "\n(ignored if --no-build option is present)")
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:80:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> BuildOptions.evaluate(mode, addendum: "\n(ignored if --no-build option is present)")
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: error: type 'BuildOptions' does not conform to protocol 'OptionsProtocol'
extension BuildOptions: OptionsProtocol {
^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: note: do you want to add protocol stubs?
extension BuildOptions: OptionsProtocol {
^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: error: type 'CheckoutCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: error: type 'UpdateCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
                      ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: error: type 'UpdateCommand' does not conform to protocol 'CommandProtocol'
public struct UpdateCommand: CommandProtocol {
              ^
Commandant.CommandProtocol:3:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError where Self.ClientError == Self.Options.ClientError
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:9:15: note: do you want to add protocol stubs?
public struct UpdateCommand: CommandProtocol {
              ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:80:5: error: binary operator '<*>' cannot be applied to operands of type 'Result<(BuildOptions) -> (CheckoutCommand.Options) -> UpdateCommand.Options, CommandantError<_>>' and 'Result<BuildOptions, CommandantError<CarthageError>>'
                                <*> BuildOptions.evaluate(mode, addendum: "\n(ignored if --no-build option is present)")
                                ^   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Update.swift:80:5: note: overloads for '<*>' exist with these partially matching parameter lists: ((T) -> U, Result<T, CommandantError<ClientError>>), (Result<((T) -> U), CommandantError<ClientError>>, Result<T, CommandantError<ClientError>>)
                                <*> BuildOptions.evaluate(mode, addendum: "\n(ignored if --no-build option is present)")
                                ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: error: type 'BuildOptions' does not conform to protocol 'OptionsProtocol'
extension BuildOptions: OptionsProtocol {
^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Build.swift:10:1: note: do you want to add protocol stubs?
extension BuildOptions: OptionsProtocol {
^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: error: type 'CheckoutCommand.Options' does not conform to protocol 'OptionsProtocol'
        public struct Options: OptionsProtocol {
                      ^
Commandant.OptionsProtocol:2:20: note: protocol requires nested type 'ClientError'; do you want to add it?
    associatedtype ClientError : Error
                   ^
MyProjectFolder/.build/checkouts/Carthage/Source/carthage/Checkout.swift:10:16: note: do you want to add protocol stubs?
        public struct Options: OptionsProtocol {
```

* carthage install method: [ ] .pkg, [x] homebrew, [ ] source
* `which carthage`: /usr/local/bin/carthage
* `carthage version`: 0.34.0
* `xcodebuild -version`: Xcode 11.3 Build version 11C29
* Are you using `--no-build`? NO
* Are you using `--no-use-binaries`? YES
* Are you using `--use-submodules`? NO
* Are you using `--cache-builds`? NO
* Are you using `--new-resolver`? NO

**Cartfile**
```
github "ReactiveCocoa/ReactiveSwift" == 5.0.1
```

**Carthage Output**
```
Build Failed
	Task failed with exit code 65:
	/usr/bin/xcrun xcodebuild -workspace /Users/mac-daddie/Develop/ios/Carthage/Checkouts/ReactiveSwift/ReactiveSwift.xcworkspace -scheme ReactiveSwift-watchOS -configuration Release -derivedDataPath /Users/mac-daddie/Library/Caches/org.carthage.CarthageKit/DerivedData/11.3_11C29/ReactiveSwift/5.0.1 -sdk watchos ONLY_ACTIVE_ARCH=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY= CARTHAGE=YES archive -archivePath /var/folders/w7/d9dqqx_938qfd43_vrf060900000gp/T/ReactiveSwift SKIP_INSTALL=YES GCC_INSTRUMENT_PROGRAM_FLOW_ARCS=NO CLANG_ENABLE_CODE_COVERAGE=NO STRIP_INSTALLED_PRODUCT=NO (launched in /Users/mac-daddie/Develop/ios/Carthage/Checkouts/ReactiveSwift)

This usually indicates that project itself failed to compile. Please check the xcodebuild log for more details: /var/folders/w7/d9dqqx_938qfd43_vrf060900000gp/T/carthage-xcodebuild.mzgl8j.log
```

In the log:
```
/Users/mac-daddie/Develop/ios/Carthage/Checkouts/ReactiveSwift/Sources/Signal.swift:1852:71: error: will never be executed
                                lifetime += action(index, strategy) { observer.send($0.map { _ in fatalError() }) }
                                                                                                  ^
/Users/mac-daddie/Develop/ios/Carthage/Checkouts/ReactiveSwift/Sources/Signal.swift:1852:64: note: '_' is uninhabited, so this function body can never be executed
                                lifetime += action(index, strategy) { observer.send($0.map { _ in fatalError() }) }
```

**Actual outcome**
Carthage did not build ReactiveSwift 5.0.2 because ReactiveSwift's xcconfig has `SWIFT_TREAT_WARNINGS_AS_ERRORS = YES`. 

**Expected outcome**
Carthage should build ReactiveSwift 5.0.2 because it is an officially released version that is required by my project. It should not let minor warnings stop it from building required dependencies. 

Rationale:

We all know Apple loves to add new warnings when they update the Swift compiler. This is nothing new. It's useful for developers, but open source projects should never get released with `SWIFT_TREAT_WARNINGS_AS_ERRORS = YES` because it basically guarantees that framework will break in some future XCode update, over a minor warning.

To keep dependencies being buildable across XCode updates, `SWIFT_TREAT_WARNINGS_AS_ERRORS = NO` needs to be enforced by Carthage. 

In the case of ReactiveSwift, simply deactivating this one build setting makes version 5.0.2 perfectly compatible with XCode 11.3 and Swift 5.1 compiler builds. 

Updating a major XCode version is already annoying enough, without having new warnings break everything because Carthage can't override a build flag that's not for released software.

On the other hand, when you're doing dependency development using submodules, you would want SWIFT_TREAT_WARNINGS_AS_ERRORS not to be overriden to NO. Because in this case, you can actually do something about any warnings and you may want to make sure you don't miss any (which is the point of that setting).

In my cartfile, i have

github "ReactiveX/RxSwift" ~> 4.5

Build tool error:
error: RxSwift does not support provisioning profiles. RxSwift does not support provisioning profiles, but provisioning profile myApp has been manually specified. Set the provisioning profile value to "Automatic" in the build settings editor. (in target 'RxSwift' from project 'Rx')

My Xcode project builds fine.. i get error on build tool.

What setting i need to add on cartfile to resolve above error?
* carthage install method: version in travis.ci
* `which carthage`: 
* `carthage version`: 0.34
* `xcodebuild -version`: 11.3
* Are you using `--no-build`? No
* Are you using `--no-use-binaries`? No
* Are you using `--use-submodules`? No
* Are you using `--cache-builds`? No
* Are you using `--new-resolver`? No

**Cartfile**
github "sparkle-project/Sparkle" == 1.22.0

**Carthage Output**
PhaseScriptExecution carthage\ copy-frameworks /Users/travis/build/griff/metaz/build/MetaZ.build/Release/MetaZ.build/Script-1BA9B57B2089550F00DDC17F.sh (in target 'MetaZ' from project 'MetaZ')
2309    cd /Users/travis/build/griff/metaz
2310    /bin/sh -c /Users/travis/build/griff/metaz/build/MetaZ.build/Release/MetaZ.build/Script-1BA9B57B2089550F00DDC17F.sh
23110.34.0
2312A shell task (/usr/bin/xcrun codesign --force --sign - --preserve-metadata=identifier,entitlements /Users/travis/build/griff/metaz/build/Release/MetaZ.app/Contents/Frameworks/Sparkle.framework) failed with exit code 1:
2313/Users/travis/build/griff/metaz/build/Release/MetaZ.app/Contents/Frameworks/Sparkle.framework: bundle format is ambiguous (could be app or framework)

**Actual outcome**
Carthage copied the framework, but the sparkle binary in the root of the framework is not a symlink to the real copy in versions.

**Expected outcome**
Carthage should create the sparkle root as a symlink.

This is only happening with release builds. The debug builds I run locally are working. You can see the build logs, etc that are occurring on the travis.ci build in this pull request to the MetaZ project:

https://github.com/griff/metaz/pull/221

The original code for the pull can be found here:

https://github.com/jmcintyre/metaz/tree/Build_and_sign_applescript_plugins

The main flaw of Carthage is the lack of a way to tell Carthage what source maps to what dependency. 

Let me give you an example.

Imagine an app which has 26 framework dependencies in 26 github repos, some public, some internal. They comprise a graph of interrelated dependencies.

So lets say I want to update two frameworks that are in the middle of this graph. While I'm developing I want to point my app at local git repos on my laptop for those two only. So I change the `cartfile.resolved` source for those two dependencies in my app's `Cartfile.resolved` from pointing to a github, to pointing to the repos on my laptop. 

However this breaks Carthage, because there is no unique identifier for each dependency, so the only way Carthage can identify what a dependency is, is by the sourceâ€”so if you change the source, now it thinks "this is a different dependency" and it breaks. 

Except instead of giving you a useful error message, Carthage gives you gobbledegook about there existing some mythical "dependency cycle", a wild goose chase that will waste you many hours because in reality no cycle exists and this error message is, itself, in error.

The easy solution would be to let you give a name (like, the framework's actual name) for each dependency, to let carthage know it should treat `git "file:///path/to/my/local/fork/of/Alamofire"` as the same thing as `github "https://github.com/whatever/alamofire"`. 

* carthage install method: [ ] .pkg, [ x ] homebrew, [ ] source
* `which carthage`: /usr/local/bin/carthage
* `carthage version`: 0.34.0
* `xcodebuild -version`: Xcode 11.2.1
Build version 11B53
* Are you using `--no-build`? sometimes
* Are you using `--no-use-binaries`?  sometimes
* Are you using `--use-submodules`? sometimes
* Are you using `--cache-builds`? sometimes
* Are you using `--new-resolver`? no

** Description **

Every time I need to build my dependencies for iOS projects. Carthage takes about 20 years to pull the github project down, and build the schemes. Especially if it's a brand new project, also if I just need one change of dependency it seems to have to go through and rebuild each project scheme. 

This can sometimes take up to 10 minutes each build if the dependency list if very large with multiple different projects. Am I just using carthage wrong ? 

I know you want to preserve "simplicity" as seen in the "contributing guidelines" 

But I would really like to this project multi-threaded out where it can pull and build dependencies in parallel.... speeding up the build time would be huuugeeee ( donald trump voice ). 

If making parallelizing it is too much, maybe I'm just using Carthage wrong? I know that when i use cocoapods, building the dependencies is really fast, but it can be annoying having to deal with cocoapods. 

Let me know what you think! 

I found myself in the need of using `CarthageKit` to read the `Version` files inside a Swift script, but discovered that they are not publicly accessible. 

This PR fixes that.
- Having issues with CodeSign when nesting macOS frameworks ever since started using Xcode 11.2 which has changed how frameworks are added with options of (Signed, Unsigned) etc
- Keep getting: `code object is not signed at all` If a framework is nested within another i.e C->b->A
- The same process works for nested iOS frameworks, but not for macOS frameworks for some reason. 

I can provide more data, but thought Id air my case first. Maybe I just missed some checkbox or something.
## Problem

https://github.com/Carthage/Carthage/issues/2760#issuecomment-555964945

## Solution

Use NSLock to coordinates the operation of multiple threads of execution within the FetchCache.