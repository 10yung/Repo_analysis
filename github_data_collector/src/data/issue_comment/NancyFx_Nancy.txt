Nuget has version 1.4.5, but there is no tag this version. Is last commit in 1.x-Work Branch equivalent to 1.4.5 version?
### Prerequisites

- [X] I have written a descriptive issue title
- [X] I have verified that I am running the latest version of Nancy
- [X] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [X] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported (https://github.com/NancyFx/Nancy/issues/2167 and https://github.com/NancyFx/Nancy/issues/2866 look similar but are not related)

### Description
As mentioned in the thread https://github.com/NancyFx/Nancy/issues/2866 compiling Razor views takes time. With the latest package from Nuget I found that launching the compiler for the first view takes 3-4 seconds and each additional view needs around 50 ms to compile.

This is an issue for a Nancy server in an application that users launch and expect to work with as quickly as possible. I understand that with the current Nancy architecture Razor views need to be compiled after each start of an application.

To ensure that a desktop application starts as quickly as possible I came up with a workaround that involves calling `GetOrCompileView` by reflection and a `IViewCache` implementation which writes the compiled assemblies to disk and loads them on subsequent starts. Rather hacky to say the least.

What I would like

- Get some feedback if there is a more straightforward way to avoid repeated view compilation
- If there is none, have better support in the Nancy framework for caching compiled Razor views

### Steps to Reproduce
- Create project with `Nancy.Hosting.Self.NancyHost` and `RazorViewEngine` with a route returning a Razor view
- Start application
- Open page in browser -> takes several seconds to respond

### System Configuration
<!-- Tell us about the environment where you are experiencing the bug -->

- Nancy version: 2.0.0 (Nuget)
- Nancy host
  - [ ] Nancy.Hosting.Aspnet
  - [X] Nancy.Hosting.Self
  - [ ] Nancy.Owin (<!-- Name your OWIN server here, for example HttpListener, HttpSysServer, Kestrel, Nowin, System.Web -->)
  - [ ] Other:
- Other Nancy packages and versions: Nancy.ViewEngines.Razor 2.0.0
- Environment (Operating system, version and so on): Windows 10
- .NET Framework version: 4.5.2

<!-- Thanks for reporting the issue to Nancy! -->

- [X] I have written a descriptive issue title
- [X] I have verified that I am running the latest version of Nancy
- [X] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [X] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported

Hello,

When using TestServer (Microsoft.AspNetCore.TestHost) with Owin to host a Nancy module in .NET Core 2.2, the request body is always empty. 

It works fine when using Kestrel. 

TestServer with Nancy works fine in .Net Core 3.0.

I didn't find any TestServer related issues on Nancy Github, nor on the web.

Consider the following (I can put it on Github for convenience, with a branch for each environnement):

```csharp

    public class Tests
    {
        public class TestStartup
        {
            public void Configure(IApplicationBuilder app)
            {
                app.UseOwin(conf => conf.UseNancy());
            }

#if NETCOREAPP3_0
            public void ConfigureServices(IServiceCollection services)
            {
                services.Configure<KestrelServerOptions>(options =>
                {
                    options.AllowSynchronousIO = true;
                });


            }

#endif
        }

        public class Module : NancyModule
        {
            public Module()
            {
                Post("/", args =>
                {
                    var str = Request.Body.AsString();
                    Assert.IsNotEmpty(str);

                    return str;
                });
            }
        }

        [Test]
        public async Task Test1()
        {
            var builder = new WebHostBuilder()
                .UseStartup<TestStartup>();

            using (var server = new TestServer(builder))
            {
#if NETCOREAPP3_0
                server.AllowSynchronousIO = true;
#endif
                using (var client = server.CreateClient())
                {

                    var str = "string";

                    var httpContent = new StringContent(str);

                    var response = await client.PostAsync("/", httpContent);

                    Assert.IsNotEmpty(await response.Content.ReadAsStringAsync());
                }
            }
        }

        [Test]
        public async Task Test2()
        {

            Task.Run(() =>
            {
                var host = new WebHostBuilder()
               .UseKestrel()
               .UseUrls("http://localhost:8080")
               .UseStartup<TestStartup>()
               .Build();

                host.Run();
            });


            var str = "string";

            var httpContent = new StringContent(str);

            var client = new HttpClient();

            var response = await client.PostAsync("http://localhost:8080", httpContent);

            Assert.IsNotEmpty(await response.Content.ReadAsStringAsync());

        
        }

```
- Nancy version: 2.0.0
- Nancy host
  - [ ] Nancy.Hosting.Aspnet
  - [ ] Nancy.Hosting.Self
  - [x] Nancy.Owin (TestServer)
  - [ ] Other:

.NET Core 2.2 config:

    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.7" />
    <PackageReference Include="Microsoft.AspNetCore.Owin" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.Server.Kestrel" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="2.2.0" />
    <PackageReference Include="Nancy" Version="2.0.0" />
    <PackageReference Include="Nancy.Owin" Version="2.0.0" />
    <PackageReference Include="nunit" Version="3.12.0" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.15.1" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.4.0" />

.NET Core 3.0 config:

    <PackageReference Include="Microsoft.AspNetCore.Hosting" Version="2.2.7" />
    <PackageReference Include="Microsoft.AspNetCore.Owin" Version="3.0.0" />
    <PackageReference Include="Microsoft.AspNetCore.Server.Kestrel" Version="2.2.0" />
    <PackageReference Include="Microsoft.AspNetCore.TestHost" Version="3.0.0" />
    <PackageReference Include="Nancy" Version="2.0.0" />
    <PackageReference Include="Nancy.Owin" Version="2.0.0" />
    <PackageReference Include="nunit" Version="3.12.0" />
    <PackageReference Include="NUnit3TestAdapter" Version="3.15.1" />
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="16.4.0" />


Just started to go thru initial documentation and stumbled on the very first "letâ€™s see some code". Neither SideWaffle nor Nancy's own project templates are available in VS 2019. How do I create a "Nancy empty project with ASP.NET host" ?
### Prerequisites

- [X] I have written a descriptive issue title
- [X] I have verified that I am running the latest version of Nancy
- [X] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [ ] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported

### Description
I'm not able to use Custom Primitive Converters (JavaScriptPrimitiveConverter) on types string, IEnumerable, numeric and boolean.
Why is it called JavaScriptPrimitiveConverter if we can't do it? I'm maybe just don't understand how it should work.

Funny thing is JavaScriptPrimitiveConverter seem to be used in the function jsonSerializerStrategy.TrySerializeNonPrimitiveObject in SimpleJson.cs

### Steps to Reproduce
Create a custom JavaScriptPrimitiveConverter like this one referenced here https://github.com/NancyFx/Nancy/wiki/Sample-JavaScriptPrimitiveConverter
Register it with JsonConfiguration.Default.PrimitiveConverters.Add(new ByteArrayAsBase64Converter());

### System Configuration
- Nancy version: 2.0.0
- Nancy host
  - [ ] Nancy.Hosting.Aspnet
  - [X] Nancy.Hosting.Self
  - [ ] Nancy.Owin (<!-- Name your OWIN server here, for example HttpListener, HttpSysServer, Kestrel, Nowin, System.Web -->)
  - [ ] Other:
- Other Nancy packages and versions:
- Environment (Operating system, version and so on): Windows 10 x86_64(dev), RaspberryPi arm 32bits(runtime)
- .NET Framework version:
- Additional information: 
Code location hint: SerializeValue in SimpleJson.cs.
I just want a discussion on how to do that without replacing the full serializer first.
I'm trying to emulate an api that do something stupid so I need to do the same stupid thing. All numeric values except float from their api are converted to string when serilized to json.

<!-- Thanks for reporting the issue to Nancy! -->



- I just to migrate mi proyect from net core 2.2 to 3.0, and nancy dosnt work.

- Nancy version: 2.0
- Microsoft.Owin: 3.0

- Startup.cs

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
 {
         app.UseOwin(b => b.UseNancy());
}

using Nancy;

namespace WebApplicationCore
{
    public class Index : NancyModule
    {
        public Index()
        {
            Get("", args => Root());
        }

        public Response Root()
        {
            return Response.AsText("Server up");
        }
    }
}


Nancy 2.0 doesn't work with this syntax:
Get["/"] = parameters => "Hello World";

### Prerequisites

- [*] I have written a descriptive issue title
- [*] I have verified that I am running the latest version of Nancy
- [ ] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [*] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported

### Description
I want to return a file by url like: http://.../getfile?filename=xxxxx
my code is like this:

```
var file = new FileStream(zipPath, FileMode.Open);
string fileName = //set a filename
var response = new StreamResponse(() => file, MimeTypes.GetMimeType(fileName));
return response.AsAttachment(fileName);
```

when filename is us letter, all ok.
when filename include chinese, client cannot get any response, but also no exception.

when I change AsAttachment section to :
AsAttachment("fixednamehere.xxx");
it goes well

so I guess is AsAttachment issue.

ps: if only include one or two chinese word, it still ok, client can download file, but got wrong filename. if it include many chinese word, it stuck

### System Configuration
<!-- Tell us about the environment where you are experiencing the bug -->

- Nancy version:
- Nancy host
  - [ ] Nancy.Hosting.Aspnet
  - [*] Nancy.Hosting.Self
  - [ ] Nancy.Owin (<!-- Name your OWIN server here, for example HttpListener, HttpSysServer, Kestrel, Nowin, System.Web -->)
  - [ ] Other:
- Other Nancy packages and versions:
- Environment (Operating system, version and so on):
- .NET Framework version:
- Additional information:

<!-- Thanks for reporting the issue to Nancy! -->

### Prerequisites

- [x] I have written a descriptive issue title
- [x] I have verified that I am running the latest version of Nancy
- [x] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [x] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported

### Description
I want to use a custom JsonSerializer for Serializing/Deserializing TimeSpan and Dictionary objects. In V.1.4.5 I could override ConfigureApplicationContainer and register my own Serializers inheriting Newtonsoft.Json.JsonSerializer. The same registration in V2.0 seems now to be ignored. 
I also registered a new _environment.Json_ Method in _Configure_ in the Bootstrapper. However, this takes JavaScriptConverter as custom serializers.
Furthermore, I saw Bug #2800 , but the Nancy.Json.Serializers NuGet isn't compatible with NetStandard2.0 !

### Steps to Reproduce
CustomBootstrapper
```
public class CustomBootstrapper : DefaultNancyBootstrapper
    {
        protected override void ConfigureApplicationContainer(TinyIoCContainer container)
        {
            base.ConfigureApplicationContainer(container);
            container.Register<JsonSerializer, CustomNancyJsonSerializer>();
        }
    }
```

CustomNancyJsonSerializer
```
public class CustomNancyJsonSerializer : JsonSerializer
    {
        public CustomNancyJsonSerializer()
        {
            MissingMemberHandling = MissingMemberHandling.Ignore;
            NullValueHandling = NullValueHandling.Ignore; 
            DefaultValueHandling = DefaultValueHandling.Include; 
            DateFormatHandling = DateFormatHandling.IsoDateFormat; 
            DateTimeZoneHandling = DateTimeZoneHandling.Unspecified;
            ContractResolver = new DefaultContractResolver();
            Formatting = Formatting.None;
        }
    }
```
Startup
```
public class Startup
    {
        public void ConfigureServices(IServiceCollection services)
        {
        }

        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            app.UseOwin(x => x.UseNancy(o => o.Bootstrapper = new CustomBootstrapper()));
        }
    }
```
TestModule
```
public class TestModule : NancyModule
    {
        public TestModule() : base("/")
        {
            Get("/", parameters =>
            {
                return Negotiate.WithModel(new
                {
                    Id = 1,
                    Date = DateTime.Now,
                    TimeS = new TimeSpan(1, 10, 20),
                    NullField = (int?)null
                });
            });
        }
    }
```
```
Expected Json
{
    "id": 1,
    "date": "2019-10-25T08:16:35.0424088",
    "timeS": {
        "days": 0,
        "hours": 1,
        "minutes": 10,
        "seconds": 20,
        "milliseconds": 0
    },
    
}
```

Actual Json
```
{
    "id": 1,
    "date": "2019-10-25T08:16:35.0424088+02:00",
    "timeS": {
        "days": 0,
        "hours": 1,
        "minutes": 10,
        "seconds": 20,
        "milliseconds": 0
    },
    "nullField": null
}
```

### System Configuration
.Net Core 3.0 WebAPI x86
Windows 10 1809
VisualStudio 2019
- Nancy version: 2.0
- Nancy host
  - [ ] Nancy.Hosting.Aspnet
  - [ ] Nancy.Hosting.Self
  - [x] Nancy.Owin (Kestrel with NetCore Owin 3.0)
  - [x] Other: Newtonsoft.Json 12.0.2
- Other Nancy packages and versions: None
### Prerequisites

- [X ] I have written a descriptive issue title
- [X ] I have verified that I am running the latest version of Nancy
- [ X] I have verified if the problem exist in both `DEBUG` and `RELEASE` mode
- [X ] I have searched [open](https://github.com/NancyFx/Nancy/issues) and [closed](https://github.com/NancyFx/Nancy/issues?q=is%3Aissue+is%3Aclosed) issues to ensure it has not already been reported

### Description
I have this stack trace. It was working fine 5 days ago, today stopped i have no idea why. 
```at System.Net.HttpListener..ctor() at Nancy.Hosting.Self.NancyHost.TryStartListener() at Nancy.Hosting.Self.NancyHost.StartListener() at Nancy.Hosting.Self.NancyHost.Start() at .Rest.RestServer..ctor(String port, ConnectionType connectionType, String address) in C:\Users\kamil\source\repos\\Rest\RestAPI.cs:line 253 at .Program.Main(String[] args) in C:\Users\kamil\source\repos\\Program.cs:line 36```

### Steps to Reproduce
```

            var host = new NancyHost(new Uri($"{address}:{port}"));

            host.Start();
```
### System Configuration
Dotnet Framework 4.7.2, Windows 10 

- Nancy version: 2.0.0
- Nancy host
  - [x] Nancy.Hosting.Aspnet
  - [X ] Nancy.Hosting.Self


  - [x] Other:
- Other Nancy packages and versions:
- Environment (Operating system, version and so on):
- .NET Framework version: 4.7.2
- Additional information:
Exception exist every time i try to use host.Start();
