## Environment details

  - OS: From my web site
  - PHP version: 7.2
  - Package name and version: Google Analytics API version 3

#### Steps to reproduce

  1. Search total page views from Google Analytics data using the Google API
  2. Taking as example one url with 63K views, the result from the API is 10K views
  3. If I try to take views before 2017-11-05 i'm having empty result

#### Code example

```php
	$optParams = array(
		'dimensions' => 'ga:pageTitle,ga:pagePath',
		'filters' => 'ga:hostname==www.mydomain.com',
		'sort' => '-ga:pageviews',
		'start-index'=>1,
	);

	$res= $analytics->data_ga->get(
		'ga:' . $profileId,
		'2013-01-01',
		'today',
		'ga:pageviews',
		$optParams);
	$rows=$res["rows"];
	print_r($rows);

```

The result for this query is:

    [7] => Array
        (
            [0] => Leccionario Bienal Bíblico Patrístico | mydomain.com
            [1] => /leccionario-bienal-biblico-patristico/
            [2] => 10828
        )

But this URL have 63K+ views!

Now, changing `today` param for one date before `2017-11-05`:

```php

	$optParams = array(
		'dimensions' => 'ga:pageTitle,ga:pagePath',
		'filters' => 'ga:hostname==www.mydomain.com',
		'sort' => '-ga:pageviews',
		'start-index'=>1,
	);

	$res= $analytics->data_ga->get(
		'ga:' . $profileId,
		'2013-01-01',
		'2017-11-02',
		'ga:pageviews',
		$optParams);
	$rows=$res["rows"];
	print_r($res);
```
The result for this query is:

    [rows] => 
    [sampleSize] => 
    [sampleSpace] => 
    [selfLink] => https://www.googleapis.com/analytics/v3/data/ga?ids=ga:69061508&dimensions=ga:pageTitle,ga:pagePath&metrics=ga:pageviews&sort=-ga:pageviews&filters=ga:hostname%3D%3Dwww.my-domain.com&start-date=2013-01-01&end-date=2017-11-02&start-index=1
    [totalResults] => 0
    [totalsForAllResults] => Array
        (
            [ga:pageviews] => 0
        )

When debugging i want to see postbody
**PLEASE READ**: If you have a support contract with Google, please create an issue in the [support console](https://cloud.google.com/support/) instead of filing on GitHub. This will ensure a timely response.
$client = new Google_Client();
$client->useApplicationDefaultCredentials();

$client->setConfig('timeout', 0.0001);
I use like this, but it not work. how can I solve it?
_[Apologies if this is not an actual bug, but it seems to me it should work this way, and the quickstart.php example seems to suggest it should.]_

Version: 2.4.0   google/apiclient

After the library does an auto-refresh of the access token, it seems that the internal [access_token] and [created] values as returned via the ```getAccessToken()``` method do not update.  This results in the pre-refresh values being used and returned by subsequent calls, something that is going to be unnecessarily hiking load values on the Google side.

Unless I'm missing something, I would intuitively expect these to be updated to the latest value, so that subsequent calls do not repeat the refresh operation, and so that the new values are available via the ```getAccessToken()``` method.

The values do update correctly, and are returned correctly, when using ```$client->fetchAccessTokenWithRefreshToken()``` when tested as of 2.4.0.

I expect that few people are using the auto-refresh functionality so far, but as time goes on you will see access tokens being refreshed on every access as a symptom of this problem.

Current workaround code in a ```setTokenCallback()``` function is:
```
$tokenCallback = function ($cacheKey, $newAccessToken)
  use (&$accesstoken, $TOKEN_FILE, &$client) {
    $accesstoken['access_token'] = $newAccessToken; // workaround 2.4.0
    $accesstoken['created'] = time(); // workaround 2.4.0
    file_put_contents($TOKEN_FILE, json_encode($accesstoken, JSON_PRETTY_PRINT));
    $client->setAccessToken($accesstoken); // workaround 2.4.0
    echo "callback: New access token obtained ck=$cacheKey - ".print_r($newAccessToken, 1)."<br />\n";
};
$client->setTokenCallback($tokenCallback);
```
Version from composer.lock:
  "name": "google/apiclient",
  "version": "v2.4.0",

Despite fairly extensive searching, it's difficult or impossible to find how to use this library for updates, ie: using PATCH, if possible, but really just wanting to know what is considered best practice.  I'm asking here given your statement at the end of the documentation page!

Would it be possible to find out what is recommended for updating records?

Some questions for which answers would make life so much easier:
 - what is best practice for updates?
 - does the existing update() method do PATCH automatically?

For example, a couple of examples shoring the following would make things much clearer:
 - changing the color of a an existing Calendar Event
 - updating a contact just to add a phone number

I've looked through both the client documentation and the Calendar API documentation and I can't see any PHP examples for updates.  There seems to be very little in terms of PHP update examples available via Google search too, though possibly I just had the wrong keywords.
### Environment details

  - OS: Ubuntu 16.04.2 LTS
  - PHP version: 7.0.22
  - Package name and version: google/apiclient v2.4.0

#### Steps to reproduce

  1. GET https://mybusiness.googleapis.com/v4/accounts 

#### Code example

```php

const DEFAULT_SCOPES = array(
		'https://www.googleapis.com/auth/userinfo.email',
		'https://www.googleapis.com/auth/userinfo.profile',
		'https://www.googleapis.com/auth/plus.business.manage'
);

// how $this->client is created
private function setGoogleClient( $clientSecret ) {
		$client = new Google_Client();
		$client->setAuthConfig($clientSecret);
		$client->setAccessType("offline");        // offline access
		$client->setIncludeGrantedScopes(true);   // incremental auth
		$client->addScope( $this->scopes );
		$appHostname = getenv('APP_HOSTNAME') ? getenv('HOSTNAME') : self::DEFAULT_APP_HOSTNAME;
		$client->setRedirectUri('https://' . $appHostname . self::GMB_CODE_REDIRECT_PATH);
		$client->setApprovalPrompt('force');
		
		return $client;
	}

// account request
$accountsResponse = $this->httpClient->request(
    'GET',
    self::GMB_HOST . self::GMB_API_VERSION . self::GMB_ACCOUNTS_RESOURCE,
        [
            'headers' => ['Authorization' => 'Bearer ' . $gmbAuth->accessToken ]
        ]
);

//fetching, so initial fetching is based on the redirect, that provides the code, is the simple call to 			
$this->googleClient->fetchAccessTokenWithAuthCode($authCode);
$accessToken = $this->googleClient->getAccessToken();

//refreshing the token looks at the age of it and then auto refresh it before making a request. 
// If already expired this is called
$accessToken = $this->googleClient->fetchAccessTokenWithRefreshToken(
			$gmbAuth->refreshToken
		);

/** 
the call to accounts resource is only made if the token refresh is successful, 
else the whole Auth object (access token including code, refresh code, when created, TTL etc) 
is disabled and the user is only able to see cached locations, 
as ultimately the scope is to get the locations for all accounts.
Not sure where the problem is coming from but as I see it, the access tokens are definitely valid when making the request and the scopes are fixed.
**/
```

The above is an extract of the code that does not permanently fail. The exception is 
```
Client error: `GET https://mybusiness.googleapis.com/v4/accounts` resulted in a `403 Forbidden` response:
{
  "error": {
    "code": 403,
    "message": "Request had insufficient authentication scopes.",
    "status": "PERMISS (truncated...)
```

But the scopes are always a fixes set as shown above and `plus.business.manage` is always included in the calls. As mentioned above this is not a permanent error and given the scopes do not change I have no idea where the problem is coming from. Any suggestion on what might be going wrong?
API services not available to use V3 GoogleApi

Problem in version of google/apiclient-services in composer.json. after manual update required lib problem was solved.
Hi. Maybe this is not a bug. Hope it's okay I do it here. I'm trying to get the userinfo using oauth2 with id_token instead of code.

So instead of the following which worked:

```php
$google_client->authenticate($_GET['code']);
$token = $google_client->getAccessToken();
if ($google_client->getAccessToken()) { // auth call to google
    $google_service = new Google_Service_Oauth2($google_client);
    $data = $google_service->userinfo->get();
}
```

From the above token I can get the id_token data so I tried to get userinfo data by id_token

Note: hard-code $id_token for testing

```php
$verify_res = $google_client->verifyIdToken($id_token);
$google_service = new Google_Service_Oauth2($google_client);
$data = $google_service->userinfo->get();
```

But it doesn't work and I got this error. The reason I'm using id_token because if it's for mobile app sign in then app side seems can only pass the id_token and not the code value.

```
Fatal error: Uncaught Google_Service_Exception: Error calling GET https://www.googleapis.com/oauth2/v2/userinfo: (401) Request is missing required authentication credential. Expected OAuth 2 access token, login cookie or other valid authentication credential. See https://developers.google.com/identity/sign-in/web/devconsole-project. in /test/Google/Http/REST.php on line 110
```

I'm using ver 1.1.5 though. But is it possible to get userinfo from id_token instead?
In order to re-consolidate all access token utilities after [google/auth#243](https://github.com/googleapis/google-auth-library-php/pull/243) was released, this PR migrates token verification to auth in a non-breaking manner.
This is from this example: I will post it in the other repo.
https://developers.google.com/drive/api/v3/quickstart/php
https://github.com/gsuitedevs/php-samples/blob/master/drive/quickstart/quickstart.php

https://youtu.be/NMGaXlq0qAk

#### Environment details

  - OS: Windows 10 Home, 64 bit
  - PHP version: PHP 7.2.22 (cli) (built: Aug 28 2019 09:29:01) ( ZTS MSVC15 (Visual C++ 2017) x64 )
  - Package name and version: const LIBVER = "2.4";

#### Steps to reproduce

  1. ... https://youtu.be/NMGaXlq0qAk

#### Code example (fix)

```php
			$renewed = 0;

			// Refresh the token if possible, else fetch a new one.
			if ( $client->getRefreshToken() ) {
				$client->fetchAccessTokenWithRefreshToken( $client->getRefreshToken() );
				$renewed = 1;
			} else {
				// Request authorization from the user.
				$authUrl = $client->createAuthUrl();
				printf( "Open the following link in your browser:\n%s\n", $authUrl );
				print 'Enter verification code: ';
				$authCode = trim( fgets( STDIN ) );

				// Exchange authorization code for an access token.
				$accessToken = $client->fetchAccessTokenWithAuthCode( $authCode );
				$client->setAccessToken( $accessToken );

				// Check to see if there was an error.
				if ( array_key_exists( 'error', $accessToken ) ) {
					throw new Exception( join( ', ', $accessToken ) );
				}
			}

			if (! $renewed) {
				// Save the token to a file.
				if ( ! file_exists( dirname( $tokenPath ) ) ) {
					$mkdir_res = mkdir( dirname( $tokenPath ), 0700, true );

					if ( empty( $mkdir_res ) ) {
						throw new Exception( "Cannot create parent directory for file: " . $tokenPath );
					}
				}

				$save_res = file_put_contents( $tokenPath, json_encode( $client->getAccessToken() ), LOCK_EX );

				if ( empty( $save_res ) ) {
					throw new Exception( "Cannot save file: " . $tokenPath );
				}
			}
```

