We often use inline styles for things like background-images. This is because the image URL is often defined in a meta field. Easier than generating CSS.

For those use cases, WP Stack CDN does not convert the URLs to CDN URLs. 

By removing the equal sign from the RegEx pattern, the pattern works properly with these types of URLs. This is obviously a bit less specific, but it's difficult for me to imagine a scenario where this breaks something.

Edit: I pushed an additional commit that adds SVG to the valid extensions. 
Many sites feed MailChimp or similar via the RSS feed.

Protocol relative URLs to images break many email clients, including Gmail and Outlook. 

To fix this I changed the main filter to:

``` php
return preg_replace( "#=([\"'])(https?:)(//{$this->site_domain})?/([^/](?:(?!\\1).)+)\.(" . implode( '|', $this->extensions ) . ")(\?((?:(?!\\1).)+))?\\1#", '=$1$2//' . $this->cdn_domain . '/$4.$5$6$1', $content );
```

This could be an option, or it could just be the default until relative protocol URLs are more broadly supported.

Hi, 

This isn't an actual issue but I was wondering if there was any workaround to make the deployment process faster ?

I didn't get myself much into Capistrano just yet but I will. Unless one of you guys have a solution I might try to find one.

One solution I have in mind is that currently we pull the full repository ( I think ) so this is quite slow, especially with big WordPress installations. We might be able to copy a cached version and apply a diff instead ? Do you think that might be possible ? Would that be bad practice or risky ?

Thanks,

Are there any plans to update this to use Capistrano 3.x?

In a case where you're defining a background url or other similar CSS case with the URL defined inside of a parenthesis, the regex misses these URLs. Example:

```
background: url('wp-content/themes/pax/img/icon-link-btn.png') no-repeat !important;

background: url("http://DOMAIN.COM/wp-content/uploads/2013/01/logo-blue.png") no-repeat scroll center center transparent !important;
```


Hi Guys!

I went through a situation here that made me lose a few minutes.
The CDN plugin do a preg_replace on the entire rendered page to replace the old urls with the new ones.

The problem was when I had more than one URL to be replaced on the same line. The preg_replace did just one replacement, the first.

So, for example:

``` html
<a href="http://url.com/wp-content/uploads/2014/01/img.png"><img  src="http://url.com/wp-content/uploads/2014/01/img.png"></a>
```

would be replaced with

``` html
<a href="http://cdn.com/wp-content/uploads/2014/01/img.png"><img  src="http://url.com/wp-content/uploads/2014/01/img.png"></a>
```

Note that the href attribute for the a tag was replaced, but not the src for the img. Thats because they are on the same line.

The line about creation of deploy user does not break. Because of that, and given its extension, it is not completely visible without looking at the source code.

Hi, this is a question more than a bug, but does anyone have a cap task to run with db:sync for changing my /etc/hosts to spoof my domains? So that when I'm doing local development, mysite.com points to 127.0.0.1, but when I'm not, it resolves to the production IP? Thanks for any help you can offer--I googled around for this but I probably wasn't phrasing it right.

Best regards,

David Ham

Hey,

First, this is not really an issue (as in an issue with WP-Stack) but mostly just a question on how to properly use it.

So, we have a server running Plesk Panel. We are hosting multiple clients on it. Each client has it's own domain in the vhosts directory. All directories that are in the vhosts directory can be accessed by the deploy user, and are owned by root. However, once in, let's say, example.com, the deploy user does not have the right to access the httpdocs folder. This is normal as the httpdocs folder is owned by the Plesk FTP user for example.com. I imagine this is why step 7 says to recursively `chown` the `:deploy_to` path. Doing so would probably cause a bunch of problems with Plesk. However, this could be done, and we run a custom task to reset the permission after deploying. But wouldn't we have to do this permissions dance every time we wanted to deploy (because we reset permissions after each deploy) ?

Could we instead make the deploy user, or it's group, namely deploy, have the right to access all folders, much like root. Or is this a big security concern ? We are trying to avoid having to manage SSH keys for each FTP user. Also, FTP user (which can have SSH access) do not have the privileges to run the `sudo chown` command found at line 7 of 'tasks.rb' - and we don't want to give every user sudo privileges.

Not sure if this all makes sense...

Thanks!
