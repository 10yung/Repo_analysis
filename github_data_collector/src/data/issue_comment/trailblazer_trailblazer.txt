This PR updates the build matrix: use latest 2.6, 2.5.

2.4.7 was also released, but it didn't have rvm distribution yet, so I excluded that from this PR.


https://www.ruby-lang.org/en/news/2019/08/28/multiple-jquery-vulnerabilities-in-rdoc/
The `trailblazer-generator` from master will create operations in a sub namespace.

So while examples in documentation show:
```
  class Song::Create < Trailblazer::Operation
  end
```

the generator makes:

```
module Song::Operation
  class Create < Trailblazer::Operation
  end
end
```

This is counter-intuitive that the documentation conflicts with what the generator creates, and I imagine that means executing the operation changes to `Song::Operation::Create.()` but it is unclear which approach to take when you are learning Trailblazer.

Is this namespacing the new/*preferred* way to create concepts?
Hi

sorry this is not an issue
my question is, how to stub an operation result

let say I have opA and opB

there is a step in opB that depends on opA, and I want to mock failing operation for opA
however because 
```
operation = opA.call

```  
creates anonymous instance class, I can't stub ```operation.success?``` result

thanks in advance
In `trailblazer-debugger`, we can use tracing that is printed when an exception is raised, showing the stack until the exception was thrown. This will improve debugging dramatically.
The circuit doesn't have to be a "dynamic" hash, it can be a stack of compiled methods, optimizing things like linear paths (no `if` needed). This would make TRB incredibly fast.

Paid gem?
This would go into the https://github.com/trailblazer/trailblazer-developer gem: Allow to render terminal-safe activity visualizations using the inflections API.

Outcome could be something like this.

```
    [Read] -> [your process] -> [Write] -> End(:success)
      |             |--------------|-----> End(:failure)
      |
      -----------------------------------> End(:required)
```
`Now`
```
   step Nested(SomeOperation, input: ->(options, **) do
        {params: options[:params].merge(tags: options[:params][:some_hash].fetch(:some_param, [])), model: options[:model]}
      end )
```
`Will be`
```
   step Nested(SomeOperation, input: ->(options,  params:, model:, **) do
        {params: options[:params].merge(tags: params[:some_hash].fetch(:some_param, [])), model: model}
      end )
```

How to reproduce:
```ruby
module Macro
  class InTransaction
    def self.call(*, &block)
      ActiveRecord::Base.transaction do block.call end
    end
  end
end
class Qwerty < Trailblazer::Operation
  step Wrap(Macro::InTransaction) { step :a }
  def a(_, *)
    puts 'Woohoo'
  end
end
```
```
> Qwerty.trace({})                                                                                                                                                                                                                                                                                              
NoMethodError: undefined method `to_fields' for nil:NilClass
from ......./bundle/ruby/2.4.0/gems/trailblazer-activity-0.3.2/lib/trailblazer/activity.rb:7:in `decompose'
```

```
GIT
  remote: https://github.com/trailblazer/trailblazer-rails.git
  revision: 24deaa98b5d11e6782daca6047c702195333e7f2
  specs:
    trailblazer-rails (2.0.0)
      reform-rails (>= 0.1.4, < 0.2.0)
      trailblazer (>= 2.1.0.beta1, < 2.2.0)
      trailblazer-loader (>= 0.1.0)
```
From slack discuss:
Someones sometime need to have their concepts in different roots in one application, e.g. `app/concepts`, `lib/concepts`, `plugins/*/app/conepts`, etc.
For now we need to have several hacky workarounds like:
```ruby
Rails.application.config.to_prepare do
  models = Rails.root.join('plugins', '*', 'app', 'models', '**', '*.rb')
  Dir.glob(models, &method(:require_dependency))

  Dir.glob(Rails.root.join('plugins', '*', 'app')) do |dir|
    Trailblazer::Loader.new.(concepts_root: "#{dir}/concepts/", &method(:require_dependency))
  end
end
```
or
```ruby
Cell::ViewModel.view_paths = Dir.glob(Rails.root.join('plugins', '*', 'app', 'concepts'))

class PluginConceptCell < Trailblazer::Cell
  self.view_paths = Cell::ViewModel.view_paths
end
```
You guys probably get this sort of thing a lot, feel free to close if this isn't a good channel for it.

I am at the point where I have read all the docs available, and done a few small features in TRB, so I am probably not grasping / misunderstanding some intentions here. My first impression is that this will take you much further then the "Rails Way", but I also have some concerns. Would love to get dev feedback if you get the chance, and hopefully this will be somewhat helpful.

1) This may be a misunderstanding to me, but it seems like you are advocating Operations as the sole way to express business logic all the way down. I think operations are an interesting framework for domain services, but that is one part of a well architected application. Operations feel like they should be an interface to your bounded contexts in some way.

2) The idea of "concepts" seems to be finer grained then a bounded context. I get that impression based on the guidance of scoping operations under model namespaces, rather then under the aggregate or the context. Is that intentional? I have found bounded contexts to be essential in managing rails growth.

3) I feel like there should be some sort of mechanism to specify the Operation "contract". By that I mean when I look at a method called "do_thing(foo, bar, baz)" I know what that method needs to work. With an interface like "Create.(params_hash, deps_hash)" that is a lot less clear. In a CRUD scenario, model params == operation params, so the `contract` makes the interface super clear. But in less trivial situations, you have to read through the entire operation to understand how the different pieces interact with the unstructured data.

4) In a general way, rails is extremely CRUD oriented, which I feel is probably the biggest problem. TRB seems like an orders of magnitude improvement on how to build things that way, but what if you are not building a CRUD oriented app? (that is a part of every app, but the bits that make it "interesting" are typically not CRUD)

I am glad this project exists, I am sorry if this comes off as overly critical. My intention in writing this is partially to see if I understand things correctly, and partially to share an early learning experience :)