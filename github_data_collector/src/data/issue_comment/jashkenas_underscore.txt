This additional info might be helpful for some people that doesn't aware that initializing Date with invalid date string will still returns a Date object. So that checking invalid Date with `isDate` will returns true. 

`_.isDate()` function only checks if a variable type is `Date` not check if it the value is valid.

The current implementation of underscore is returning an invalid answer for:

```js
_.isEqual(0, new Number(Number.MIN_VALUE))
// expected to be false but was true before the fix
```

Similar to a bug found in Jest https://github.com/facebook/jest/issues/7941

---

This bug has been discovered with the following test - property based testing test:
```js
import * as _ from "underscore";
import * as fc from "fast-check";

describe("_.toEqual", () => {
  it("should be symmetric", () => {
    fc.assert(
      fc.property(
        fc.anything({ withBoxedValues: true }),
        fc.anything({ withBoxedValues: true }),
        (a, b) => _.isEqual(a, b) === _.isEqual(b, a)
      ),
      { numRuns: 1000000 }
    );
  });
});
```

Please note that such kind of tests are currently used [within Jest](https://github.com/facebook/jest/blob/86e73f5b22e8a02b5233af78c68ef7318c59e1b3/packages/expect/src/__tests__/matchers-toEqual.property.test.ts#L26) to avoid future issues.
This snippet worked for me until I added Typescript and updated the package

```
rooms = _(this.getAllRooms()).chain().sortBy(function (room: Room) {
                return room.number;
            }, this).sortBy(function (room: Room) {
                return room.buildingName;
            }, this).value();
```
[Code here](https://github.com/MichaelGatesDev/ccss-support-manual/blob/master/packages/frontend/src/Sections/Home/Home.tsx#L86)

It takes an array of objects, sorts them, and returns the sorted array. 

But now, it complains that this code does not return a `Room[]` or otherwise array of objects. Rather, it returns a single `Room`. Using `values` returns a `_._Chain<any, any>` which is also not what I need.

How can I get around this issue? I just need a standard array returned.
I'm having trouble getting any answers on underscore.js on stackoverflow, so I'm just going to ask here. How do you display the total number of records in a template? In this example, how would I display totalNum?

<script type="text/template" id='templatePropertyLot'>
    <%  _.each(items,function(item,key,list) { %>
        <div class="popup_wrapper">
            <div class="header" id="count_of_addresses"><span id="currNum"><%- key + 1 %></span> of <span id="totalNum"></span> addresses in this search</div>
        </div>  
    <% }); %>
</script>
_.indexOf([1,2,3,NaN,5,6],NaN,true)   // => -1

Source code
array[idx] === item ? idx : -1;

Can NaN detection be put in front?


Let's say you want to pipe some value `a` through 3 functions `f1`, `f2`, `f3`, in that order. How would you do it?

Well, you can do it the "normal" way (pure JS):

```javascript
f3(f2(f1(a)))
```

Or you can use `_.compose()`:

```javascript
_.compose( f3
         , f2
         , f1
         )(a)
```

But what I'd _really like_ to write is:

```javascript
_.pipe( a
      , f1
      , f2
      , f3
      )
```

Both JS's function composition syntax and `_.compose()` make me write the function list in the reverse order. Clojure has [threading macros](https://clojure.org/guides/threading_macros); in Elm, you could write this using the reverse apply operator:

```elm
a
|> f1
|> f2
|> f3
```

This `_.pipe()` function I'm suggesting would be a way of doing something similar in JS.
Added support for Set and Map for _.isEmpty 
**source**: https://jsonplaceholder.typicode.com/users

_correct output with_ https://lodash.com/docs/4.17.11#includes same **source**

I know this has already been reported way too many times. And I know it because I've faced the issue myself and found the breadcrumbs, which have lead me here. 

`_.isEmpty` behaviour by design only checks enumerable objects. Any primitive value is therefore, considered empty. 
While changing this behaviour has already been discussed (and rejected) more than once, developers have been hitting against `_.isEmpty` for years now (from at least 2012 #432 to 2018 #2788). And well... 2019 if I count myself. 

I also know this our fault, after quickly scanning through the docs we assume it will behave nicely for every variable we throw at it. 
Still, I'm sure adding an explicit example of numbers (please do NOT use 0 as an example, as it would imply it actually checks for number emptyness), and perhaps a note in bold, would help a lot of people in the future. 

Something like this would probably do:

isEmpty `_.isEmpty(object)`
----

Returns true if an enumerable object contains no values (no enumerable own-properties). For strings and array-like objects _.isEmpty checks if the length property is 0.

> _.isEmpty([1, 2, 3]);
> => false
> _.isEmpty({});
> => true

**Note that primitive types are always considered empty:**
> _.isEmpty(42);
> => true
> _.isEmpty(true);
> => true

One `throttle triggers trailing call when invoked repeatedly` test
showed up often on CITGM (https://github.com/nodejs/citgm). To reduce
the noise this test causes and to prevent removing `underscore` from
CITGM, I relaxed the asserts inside of the function. It would be
great if the calls would have a stack trace but there is no such
output if the calls fail, so I relaxed both statements. I can not
fully say if this will resolve the issue completely but this seemed
like the most straight forward fix besides removing the test
completely.

Refs: #2698