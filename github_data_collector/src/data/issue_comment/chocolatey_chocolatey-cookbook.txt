In the file install.ps1 there is an external uri dependency to download 7zip, it needs to be made as an attribute, so that we can download it from any internally hosted location.

------------
$7zaExe = Join-Path $tempDir '7za.exe'
$unzipMethod = '7zip'
$useWindowsCompression = $env:chocolateyUseWindowsCompression
if ($useWindowsCompression -ne $null -and $useWindowsCompression -eq 'true') {
  Write-Output 'Using built-in compression to unzip'
  $unzipMethod = 'builtin'
} elseif (-Not (Test-Path ($7zaExe))) {
  Write-Output "Downloading 7-Zip commandline tool prior to extraction."
  # download 7zip
  Download-File 'https://chocolatey.org/7za.exe' "$7zaExe"
}
-----------

Also change the logic to use archive_file for Chef 15 and above...

------
if CHEF::VERSION.to_i >= 15
  archive_file 'whatever'
else
  include_recipe '7zip::default'

  whatever 7zip resource
end
### Cookbook version
2.0.1

### Chef-client version
15.1.36

### Platform Details
Windows 10

### Scenario:
Trying to install chocolatey with chef-run or chef-apply

### Steps to Reproduce:
Launched chef-run or chef-apply on default.rb

### Expected Result:
Install chocolatey on target system

### Actual Result:
On remote failed to converge and no log.
On local I see the log that says:

> Generated at 2019-07-29 20:59:36 +0200
NameError: uninitialized constant #<Class:#<Chef::Recipe:0x0000000007eee678>>::Chocolatey
..\Downloads\chocolatey\recipes\default.rb:25:in `run_chef_recipe'
C:/opscode/chef-workstation/embedded/lib/ruby/gems/2.6.0/gems/chef-15.1.36-universal-mingw32/lib/chef/application/apply.rb:195:in `instance_eval'
C:/opscode/chef-workstation/embedded/lib/ruby/gems/2.6.0/gems/chef-15.1.36-universal-mingw32/lib/chef/application/apply.rb:195:in `run_chef_recipe'
C:/opscode/chef-workstation/embedded/lib/ruby/gems/2.6.0/gems/chef-15.1.36-universal-mingw32/lib/chef/application/apply.rb:209:in `run_application'
C:/opscode/chef-workstation/embedded/lib/ruby/gems/2.6.0/gems/chef-15.1.36-universal-mingw32/lib/chef/application/apply.rb:222:in `run'
C:/opscode/chef-workstation/embedded/lib/ruby/gems/2.6.0/gems/chef-bin-15.1.36/bin/chef-apply:24:in `<top (required)>'
C:/opscode/chef-workstation/modules/chef/../../bin/chef-apply:359:in `load'
C:/opscode/chef-workstation/modules/chef/../../bin/chef-apply:359:in `<main>'
### Description

This adds an attribute to suppress the output of writing the install.ps1 file to disk.  It does *NOT* suppress the output of running the install, just the initial Chef spam where it writes the entire contents to the console.

### Issues Resolved

N/a

### Check List

- [x] All tests pass.
- [x] New functionality includes testing.
- [x] New functionality has been documented in the README if applicable

### Cookbook version
2.0.1

### Chef-client version
14.13.11

### Platform Details
Windows Server 2016

### Scenario:
Install Chocolatey from Artifactory repo instead of Chocolatey.org

### Steps to Reproduce:
We are running the Chocolatey Cookbook using the following code:
node['chocolatey']['install_vars']['chocolateyDownloadUrl'] = "https://URL/TO/ARTIFACTORY/REPO"
include_recipe 'chocolatey::default'

### Expected Result:
Expect the Chocolatey agent to be pulled from"https://URL/TO/ARTIFACTORY/REPO" and then installed.

### Actual Result:
Instead, agent is being installed from Chocolatey.org.  Syntax to add URL variable looks correct but doesn't seem to be getting used.
### Cookbook version

latest

### Chef-client version
2.0.1

### Platform Details

### Scenario:
We are using the `chocolatey ` cookbook in windows machines to install the windows packages.  
we are trying to install some of windows packages via cookbook by using the `chocolatey_package` resource. it's failing in windows 07, windows server 08, but the same cookbook is successfully running in the windows 08 and windows10. 

### Steps to Reproduce:

The ChocolateyInstall install failing in windows 07, windows server 08 due to the following error.

``````````````````````````````````````````````````````````````````````````````````````````````
Running handlers:
[2019-03-08T07:40:44+00:00] ERROR: Running exception handlers
Running handlers complete
[2019-03-08T07:40:44+00:00] ERROR: Exception handlers complete
Chef Client failed. 2 resources updated in 01 minutes 07 seconds
[2019-03-08T07:40:44+00:00] FATAL: Stacktrace dumped to C:/chef/cache/chef-stacktrace.out
[2019-03-08T07:40:44+00:00] FATAL: Please provide the contents of the stacktrace.out the file if you file a bug report
[2019-03-08T07:40:44+00:00] FATAL: Chef::Exceptions::MissingLibrary: chocolatey_package[svn] (sncr_bamboo::subversion li
ne 21) had an error: Chef::Exceptions::MissingLibrary: Could not locate your Chocolatey install. To install chocolatey,
we recommend
the 'chocolatey' cookbook (https://github.com/chocolatey/chocolatey-cookbook).
If Chocolatey is installed, ensure that the 'ChocolateyInstall' environment
variable is correctly set. You can verify this with the PowerShell command
'[System.Environment]::GetEnvironmentVariable('ChocolateyInstall', 'MACHINE')'.

`````````````````````````````````````````````````````````````````````````````````````````
### Expected Result:
> We can able to install the packages via manually by using the chocolatey command, but via cookbook is failing. 
> the environment test output is positive.
2019-03-06T15:29:50+00:00] INFO: Running queued delayed notifications before re-raising exception

Running handlers:
[2019-03-06T15:29:50+00:00] ERROR: Running exception handlers
Running handlers complete
[2019-03-06T15:29:50+00:00] ERROR: Exception handlers complete
Chef Client failed. 2 resources updated in 31 seconds
[2019-03-06T15:29:50+00:00] FATAL: Stacktrace dumped to c:/chef/cache/chef-stacktrace.out
[2019-03-06T15:29:50+00:00] FATAL: Please provide the contents of the stacktrace.out file if you file a bug report
[2019-03-06T15:29:50+00:00] FATAL: Chef::Exceptions::MissingLibrary: chocolatey_package[svn] (sncr_bamboo::subversion li
ne 21) had an error: Chef::Exceptions::MissingLibrary: Could not locate your Chocolatey install. To install chocolatey,
we recommend
the 'chocolatey' cookbook (https://github.com/chocolatey/chocolatey-cookbook).
If Chocolatey is installed, ensure that the 'ChocolateyInstall' environment

variable is correctly set. You can verify this with the PowerShell command
'[System.Environment]::GetEnvironmentVariable('ChocolateyInstall', 'MACHINE')'.


> The variable check result
PS C:\Windows\system32> [System.Environment]::GetEnvironmentVariable('ChocolateyInstall', 'MACHINE')
C:\ProgramData\chocolatey

> So our question is, this cookbook tested in windows 07  and windows server 08? 


Please need your help to fix this.

Regards
Sunil


### Cookbook version
[Version of the cookbook where you are encountering the issue]

### Chef-client version
[Version of chef-client in your environment]

### Platform Details
[Operating system distribution and release version. Cloud provider if running in the cloud]

### Scenario:
[What you are trying to achieve and you can't?]

### Steps to Reproduce:
[If you are filing an issue what are the things we need to do in order to repro your problem? How are you using this cookbook or any resources it includes?]

### Expected Result:
[What are you expecting to happen as the consequence of above reproduction steps?]

### Actual Result:
[What actually happens after the reproduction steps? Include the error output or a link to a gist if possible.]

### Cookbook version
2.0.1

### Chef-client version
14.2.0

### Platform Details
Windows 10

### Scenario:
Straightforward vendor of cookbook via Berks from supermarket.

### Steps to Reproduce:
Depend on the latest version of this this cookbook via Berksfile and either install it directly via `berks vendor` or in a Kitchen.

### Expected Result:
That the cookbook has the following contents:

```
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
d-----       19/07/2018     10:29                attributes
d-----       19/07/2018     10:29                files
d-----       19/07/2018     10:29                libraries
d-----       19/07/2018     10:29                recipes
-a----       19/07/2018     10:29           3469 CHANGELOG.md
-a----       19/07/2018     10:29            730 metadata.json
-a----       19/07/2018     10:29           2565 README.md
```

### Actual Result:
Cookbook is missing all folders and is only installed with the following files:

```
Mode                LastWriteTime         Length Name
----                -------------         ------ ----
-a----       19/07/2018     10:28           3435 CHANGELOG.md
-a----       19/07/2018     10:28            630 metadata.json
-a----       19/07/2018     10:28           2744 README.md
```

Version 2.0.0 works fine and has all expected files so just locking to that for now.
I've tried to fork and add this myself  but I honestly don't know what I'm doing (it's not particularly obvious tbh), what looks like should work doesn't. Is this already a feature? if so how or could you please add this.

I need this so I can install ruby onto a deployment machine without breaking the ruby that gets installed with chef  (I plan to have a user just for running my app and only it's path will contain the ruby stuff I need to get the app running)

I was hoping to use the node['chocolatey']['upgrade'] attribute to keep the underlying chocolatey version up to date, but it doesn't seem to work.  I think this is due to how the LWRP behaves if the version field is left blank as it is in the chocolatey "chocolatey" resource at the end of the default recipe.

Looking at the code in providers/default.rb, which runs in response to that resource,  "package_installed?" will be true as obviously chocolatey is already installed (by the install.ps1 boot-strapper).  We don't specify a particular version, so "package_exists?" also returns true.  Unfortunately "upgradeable?" takes the latter as gospel so assumes there's nothing to do.

Would you accept a PR to only use @current_resource.exists if the version is not blank?

Attempting to install IIS-ASPNET45 via Chef recipe on a freshly-bootstrapped stock Windows 2012 AMI.

I get the following text in the log:

```
Error: 11

You cannot service a running 64-bit operating system with a 32-bit version of DISM.
Please use the version of DISM that corresponds to your computer's architecture.
```

The entire run is at http://pastebin.com/hXn14VPg and shows the command leading to that error at line 43.
