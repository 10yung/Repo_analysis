It looks like there is an issue with uploading data through TLS enabled listener. Sometimes it worked for one or two files, but reproducible it fails after some tries. The http error code is: 408, i'm aware of [Units-Global-Settings](https://unit.nginx.org/configuration/#settings), but that didn't helped.

**TLS based configuration:**
```bash
....
},
      "root": "/var/www/docroot/",
      "script": "index.php",
      "type": "php 7.4",
      "user": "some_user"
    }
  },
  "listeners": {
    "x.x.x.x:7001": {
      "pass": "routes/application",
      "tls": {
        "certificate": "selfsigned"
      }
    }
  },
```
**Simple PHP Script:**
```bash
<?php
   if(isset($_FILES['image'])){
    $allowedExtensions = ['bin'];
    $errors=[];
    $tmpFileList = $_FILES['image']['tmp_name'];
    foreach($tmpFileList as $key => $tmpFilename){

        $file_ext = strtolower(end(explode('.',$_FILES['image']['name'][$key])));        
      if(in_array($file_ext,$allowedExtensions)=== false){
         $errors[]="extension not allowed";
            continue;
      }

        $file_size = $_FILES['image']['size'][$key];
        if($file_size > 5242880) {
         $errors[]='File size must below 5 MB';
      }


        move_uploaded_file($tmpFilename, "/tmp/".$_FILES['image']['name'][$key]);
    }

    if(!empty($errors)){
        print_r($errors);
    } else {
        echo "Success";
    }
   }
?>
<html>
   <body>
      
      <form action = "" method = "POST" enctype = "multipart/form-data">
         <input type = "file" name = "image[]" multiple="multiple" />
         <input type = "submit"/>
            
      </form>
      
   </body>
</html>
```
Could anybody please verify this behavior?
Hi.

It seems radix-tree can be used to speeding the URI match.
https://en.wikipedia.org/wiki/Radix_tree

I'm wondering if this feature is in the plan?
If not, can you take a time of checking it's worth to do?

BTW, Igor is very good at implementing such algorithms, like red-black-tree.
It will be very valuable. Thanks.

@VBart @igorsysoev 
Implemented TLS based on the [announcment v.15](https://www.nginx.com/blog/nginx-unit-1-5-available-now/) and the [tutorial about SSL/TLS and Certificates](https://unit.nginx.org/configuration/#ssl-tls-and-certificates).

**Configuration:**
```bash
curl -X GET --unix-socket /run/unit/control.sock http://localhost
{
	"certificates": {
		"selfsigned": {
			"key": "RSA (4096 bits)",
			"chain": [
				{
					"subject": {
						"common_name": "localhost"
					},

					"issuer": {
						"common_name": "localhost"
					},

					"validity": {
						"since": "Jan  8 08:48:48 2020 GMT",
						"until": "May 25 08:48:48 2047 GMT"
					}
				}
			]
		}
	},

	"config": {
		"applications": {
			"application": {
				"limits": {
					"requests": 1000,
					"timeout": 10
				},

				"options": {
					"admin": {
						"error_log": "/var/www/application/log/php.log",
						"error_reporting": "32767",
						"log_errors": "on",
						"memory_limit": "256M",
						"open_basedir": "/var/www/application",
						"post_max_size": "20M",
						"sys_temp_dir": "/var/www/application/tmp",
						"upload_max_filesize": "20M",
						"upload_tmp_dir": "/var/www/application/tmp"
					}
				},

				"processes": {
					"idle_timeout": 20,
					"max": 10,
					"spare": 2
				},

				"root": "/var/www/application/source/public/",
				"script": "index.php",
				"type": "php 7.4",
				"user": "blahfoo"
			}
		},

		"listeners": {
			"x.x.x.x.:9001": {
				"pass": "routes/application",
				"tls": {
					"certificate": "selfsigned"
				}
			}
		},

		"routes": {
			"application": [
				{
					"action": {
						"share": "/var/www/application/source/public/"
					},

					"match": {
						"uri": [
							"*.css",
							"*.eot",
							"*.ico",
							"*.jpg",
							"*.js",
							"*.png",
							"*.svg",
							"*.xml",
							"*.ttf",
							"*.txt",
							"*.json",
							"*.woff",
							"*.woff2"
						]
					}
				},
				{
					"action": {
						"pass": "applications/application"
					}
				}
			]
		}
	}
}
```
This is working perfectly, but the service restart via systemd failed:
```bash
[alert] 11516#11516 the previous configuration is invalid: Certificate "selfsigned" is not found.
```
Is there anything i missed inside the configuration itself or is there maybe a problem with saving the configuration?

Regards
Daniel

Static File Support is a GREAT feature!


I have a simple config and whenever there is a startup error with the application the next unit restart causes all applications and listeners to be lost.
`curl http://127.0.0.1:8080/config` yields:
```
{
        "listeners": {
                "*:8444": {
                        "application": "hello_world"
                }
        },

        "applications": {
                "hello_world": {
                        "type": "python 3",
                        "processes": 2,
                        "user": "unit",
                        "group": "unit",
                        "path": "/opt/unit/hello_world",
                        "module": "service",
                }
        }
}
```
For example, the hello_world python app has an import error, then when attempting to restart unit with `sudo service restart unit` or `sudo /etc/init.d/unit restart` causes all applications and listeners to be lost (unit.log):
```
2020/01/08 10:36:21 [alert] 7662#7662 Python failed to import module "service"
2020/01/08 10:36:22 [notice] 7651#7651 process 7662 exited with code 1
2020/01/08 10:36:22 [warn] 7660#7660 failed to start application "dialogflow-webhook"
2020/01/08 10:36:22 [alert] 7660#7660 failed to apply new conf
2020/01/08 10:36:22 [alert] 7659#7659 failed to apply previous configuration
2020/01/08 10:36:22 [notice] 7651#7651 process 7661 exited with code 0
```
Running `curl http://127.0.0.1:8080/config` then yields this:
```
{
        "listeners": {},
        "applications": {}
}
```
Running with:
```
unit version: 1.8.0
Linux system 4.19.29-0-vanilla #1-Alpine SMP Mon Mar 18 21:25:27 UTC 2019 x86_64 Linux
```

Hi.

The following operations can cause fegfault.
```
# conf.json
{
    "listeners": {
        "*:8080": {
            "pass":"routes"
        }

    },

    "routes": [
        {
            "match": {
                "uri": "/"
            },

            "action": {
                "share":"/tmp/html"
            }
        }
    ]
}
```

```
curl -X PUT -d '"/"' http://127.1:8000/config/routes/0/match/uri/0
curl -X PUT -d '"/"' http://127.1:8000/config/routes/0/match/uri/a
```

Here's the patch. Take a look, please.
```
# HG changeset patch
# User hongzhidao <hongzhidao@gmail.com>
# Date 1577705904 -28800
# Node ID 1fcb5fba6ab659cd1f4be71b87b567c7b6769360
# Parent  96e6ac1926f86faf542cf380a8d2eadebd3eac5b
Fixed segfault happened in nxt_conf_op_compile().

diff -r 96e6ac1926f8 -r 1fcb5fba6ab6 src/nxt_conf.c
--- a/src/nxt_conf.c	Thu Dec 26 17:04:37 2019 +0300
+++ b/src/nxt_conf.c	Mon Dec 30 19:38:24 2019 +0800
@@ -814,6 +814,10 @@

         default:
             node = NULL;
+
+            if (parse.last) {
+                return NXT_CONF_OP_NOT_FOUND;
+            }
         }

         if (parse.last) {
```

BTW, how to run UNIT tests beside `make tests`?
May be it is not UNIT error: i've set up Wordpress with this instruction [https://unit.nginx.org/howto/wordpress/](url)
but site have response with 500 error code
```
2019/12/27 09:44:25 [notice] 6583#6583 php message: PHP Warning:  Unknown: Filename cannot be empty in Unknown on line 0
2019/12/27 09:44:25 [notice] 6583#6583 php message: PHP Fatal error:  Unknown: Failed opening required '' (include_path='.:/usr/share/php') in Unknown on line 0
```
My wp-config.php is
```<?php
/**
 * The base configuration for WordPress
 *
 * The wp-config.php creation script uses this file during the
 * installation. You don't have to use the web site, you can
 * copy this file to "wp-config.php" and fill in the values.
 *
 * This file contains the following configurations:
 *
 * * MySQL settings
 * * Secret keys
 * * Database table prefix
 * * ABSPATH
 *
 * @link https://codex.wordpress.org/Editing_wp-config.php
 *
 * @package WordPress
 */

// ** MySQL settings - You can get this info from your web host ** //
/** The name of the database for WordPress */
define( 'DB_NAME', 'wordpress' );

/** MySQL database username */
define( 'DB_USER', 'web' );

/** MySQL database password */
define( 'DB_PASSWORD', 'SIFbic1!' );

/** MySQL hostname */
define( 'DB_HOST', 'localhost' );

/** Database Charset to use in creating database tables. */
define( 'DB_CHARSET', 'utf8' );

/** The Database Collate type. Don't change this if in doubt. */
define( 'DB_COLLATE', '' );

/**#@+
 * Authentication Unique Keys and Salts.
 *
 * Change these to different unique phrases!
 * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
 * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
 *
 * @since 2.6.0
 */
define('AUTH_KEY',         'x+0r&m=0|u%J}b7ZI}ww9$OR[jC4t9E+U%[BwSt7!@g8}>1Z0/xxvL>s0,Q9q|+x');
define('SECURE_AUTH_KEY',  ';*OP2yzIeN(S`T!!;}8-j(#wq@-tmt$->q#2QdPzG lz*&R>47)B*uy%%T>fgu0N');
define('LOGGED_IN_KEY',    '`XYK@`Ax^k.qJwR=|*Y8!O@:[7H+UhcZE;bmT~WRZd`XGk$H.d0j*-5{6ZYRok8|');
define('NONCE_KEY',        'tP[ UHm4<Bx9x34-joL|-.J6d|.Ac8jZ7tn6?,qKt(dUN3jov.T;r+87Ghs^->B:');
define('AUTH_SALT',        '9#@8pGbyEZ!RiI|-CidB+fc+=)&V%)A4~N6&=e-vppH7X Gqr=a2JZJBB++k/b6;');
define('SECURE_AUTH_SALT', '.b8lz)rtJnjk++?7`7}+Jp}q_zx3 @#^`BHl-%6_P5VOCRYWdMjc[9)o-,2tN9J$');
define('LOGGED_IN_SALT',   '$&gy.!a;acNW#>X4%Dk -!XSOH@||=_N$@*Ktn&Vxlmk:wf8IBf{*I%)8.J#/UV=');
define('NONCE_SALT',       'NWD N^bnTPbb=SQkOM);5|b09e7I[1=m+O5KU48J:b&>We?.:O^|_.H7.&0=f~+x');

/**
 * WordPress Database Table prefix.
 *
 * You can have multiple installations in one database if you give each
 * a unique prefix. Only numbers, letters, and underscores please!
 */
$table_prefix = 'wp_';

/**
 * For developers: WordPress debugging mode.
 *
 * Change this to true to enable the display of notices during development.
 * It is strongly recommended that plugin and theme developers use WP_DEBUG
 * in their development environments.
 *
 * For information on other constants that can be used for debugging,
 * visit the Codex.
 *
 * @link https://codex.wordpress.org/Debugging_in_WordPress
 */
define( 'WP_DEBUG', false );

/* That's all, stop editing! Happy publishing. */

/** Absolute path to the WordPress directory. */
if ( ! defined( 'ABSPATH' ) ) {
	define( 'ABSPATH', dirname( __FILE__ ) . '/' );
}

/** Sets up WordPress vars and included files. */
require_once( ABSPATH . 'wp-settings.php' );
```
My config is
```
{
    "listeners": {
        "*:8080": {
            "pass": "routes/wordpress"
        },
		"*:80": {
            "pass": "routes/wordpress"
        },
		"*:443": {
            "pass": "routes/wordpress"
        }
    },

    "routes": {
        "wordpress": [
            {
                "match": {
                    "uri": [
                        "*.php",
                        "*.php/*",
                        "/wp-admin/"
                    ]
                },

                "action": {
                    "pass": "applications/wp_direct"
                }
            },
            {
                "match": {
                    "uri": [
                         "/wp-admin/*",
                         "/wp-content/*",
                         "/wp-includes/*"
                    ]
                },

                "action": {
                    "share": "/site/wordpress/"
                }
            },
            {
                "action": {
                    "pass": "applications/wp_index"
                }
            }
        ]
    },

    "applications": {
        "wp_direct": {
            "type": "php",
            "user": "web",
            "group": "web",
            "root": "/site/wordpress/"
        },

        "wp_index": {
            "type": "php",
            "user": "web",
            "group": "web",
            "root": "/site/wordpress/",
            "script": "index.php"
        }
    },
    "access_log": "/var/log/access.log"
}
```
Please tell me - what I am doing wrong.
Hi.

```
diff -r 96e6ac1926f8 src/nxt_http_route_addr.c
--- a/src/nxt_http_route_addr.c	Thu Dec 26 17:04:37 2019 +0300
+++ b/src/nxt_http_route_addr.c	Mon Dec 23 15:19:45 2019 +0800
@@ -179,7 +179,10 @@
             return NXT_ADDR_PATTERN_FORMAT_ERROR;
         }

-        nxt_inet6_addr(&inet6->start, addr.start, addr.length);
+        ret = nxt_inet6_addr(&inet6->start, addr.start, addr.length);
+        if (nxt_slow_path(ret != NXT_OK)) {
+            return NXT_ADDR_PATTERN_FORMAT_ERROR;
+        }

         goto parse_port;
 #endif
```
It's nice to see that unit have support proxy feature. 
Is there any plan to support proxy websocket protocol  so I can use Unit to dynamic proxy my application.  

Hi,
It looks like Unit doesn't have this capability yet.
This would be useful in the following cases:
1. Limiting TLS version to 1.2 and 1.3
2. Prioritizing 128-bit ciphers over 256-bit
3. Limiting available ciphers
Hi,
It looks like Unit doesn't support ECDSA certificate yet.
Here's what it looks like in the console and the log when I tried to upload one.
```
sudo curl -X PUT --data-binary @/[certificate_path]/[certificate_name].pem --unix-socket /run/control.unit.sock http://localhost/certificates/[certificate_name]
{
        "error": "Invalid certificate."
}
```
```
2019/12/14 00:43:17 [info] 3872#3872 discovery started
2019/12/14 00:43:17 [notice] 3872#3872 module: php 7.2.19-0ubuntu0.18.04.1 "/usr/lib/unit/modules/php.unit.so"
2019/12/14 00:43:17 [info] 3875#3875 controller started
2019/12/14 00:43:17 [notice] 3869#3869 process 3872 exited with code 0
2019/12/14 00:43:17 [info] 3876#3876 router started
2019/12/14 00:43:17 [info] 3876#3876 OpenSSL 1.1.1  11 Sep 2018, 1010100f
2019/12/14 01:03:41 [alert] 3875#3875 *3 unsupported PEM type: "EC PARAMETERS"
```