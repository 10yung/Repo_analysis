Background for this PR. Having a few experiments running without using the Static Helper, was trying to disable all experiments at once, by using the Enabled method. Turns out it wasn't possible.

To achieve this Had to create a implementation of Scientist and override the IsEnabledAsync.

This PR aims to allow the set of the Enabled func globally, for experiments using the helper and for the implementations. 
The IsEnabledAsync remains virtual so that we can still override the enabled behaviour for a specific one


Currently the project is referencing NetStandard Library 1.6.1.

Upgrade to version 2.0.0
Scientist is designed to always return results from the control,  however during development I have found it helpful to return the result from the candidate rather than the control, i.e. during design and debugging an issue etc.

The following PR exposes a delegate that will can effectively ignore the control and return the result from the first candidate. It has similar affects to turning off Scientist i.e. no comparison reports are generated, no over head etc

```
using GitHub;

...

public void ScientistSetup(){
   Scientist.EnabledControl(() => !HostingEnvironment.IsDevelopmentEnvironment);
}

public bool UseExperimentResult(IUser user)
{
    return Scientist.Science<bool>("widget-permissions", experiment =>
    {
        experiment.Use(() => IsCollaborator(user)); // control
        experiment.Try(() => HasAccess(user)); // candidate
    }); // returns the candidate value
}
```
The `README` has some interesting examples, but maybe we could go further and have a published site hosted somewhere that's more discoverable?

From https://github.com/scientistproject/Scientist.net/issues/114#issuecomment-456499239

> * Get me the new project questionnaire, doesn't have to be perfectly filled out, check with me if you've got questions.

https://github.com/dotnet/foundation/blob/master/guidance/new-projects.md
@Haacked was this a manual process before?

I'd love for it to be driven from tags, but I'm also rusty as hell on all this so I'm happy to defer to those who have a better idea of what's technically feasible these days

With the passage of time the previous maintainers have moved on to other things, which is how I find myself again filling these shoes. I'm trying to avoid new responsibilities at the moment, and `Scientist.NET` is not something I am suited to be taking charge of:

- I've not contributed to the project in any capacity
- I'm not aware of this being used on any GitHub projects
- I'm no longer doing C# development

And so I'm now looking out for others to take up ownership of the project. **If I don't hear anything before February 4th, I plan to [archive the repository](https://help.github.com/articles/archiving-a-github-repository/) to confirm it's dormancy.**

This project has been rather quiet for a while in terms of issues and contributions, which is why I favour archiving currently. Here's a cursory glance at the 2018 activity:

- two issues opened
- three PRs merged
- one open PR outstanding

The 2.0 release went out about 8 months ago, and here's the overall NuGet stats:

<img width="640" src="https://user-images.githubusercontent.com/359239/51495005-2897a100-1d91-11e9-9bd5-ca2b7d21f1d2.png">

But if someone (preferably multiple people, to share the load) wants to step up but isn't quite sure I'm happy to provide guidance and mentoring whenever I have bandwidth, but I would love to get to a spot where we have people who know the project and want to actively work on it in charge.

The rough transition process I have in my head is:

- identify interested contributors and figure out a proper transition process
- transfer this repository to a different owner/location on GitHub - it doesn't make   sense to have this under the GitHub organization when it's not actively used in GitHub's projects
- identify other systems they need access to to continue publishing releases - CI systems, NuGet, etc

Feel free to ask any question you may have here, or you can email me - _handle [at] this website_ - if you wish to talk privately.
Hi, 

I like the idea of Scientist.Net, as I often don't want to set up a full Benchmark.Net run. However I really felt the loss of the memory allocation information that I could get from Benchmark.Net.   

This Pull Request has a working proposal (with unit tests) for a new `AllocatedBytes` field on Observation. To enable this to work cross runtime I've cribbed the workarounds from Benchmark.Net's implementation (Garbage Collection tooling is wildly inconsistent - see the last paragraph). Included are a test for the basic functionality and one that asserts that Scientist's own allocations don't appear in the results. Note that I did not include Generational counts because it seemed trivially easy to get miscounts given that Scientist.Net works 'inline' versus Benchmark.Net's dedicated test runs.

I also upped the versions of the Nuget package (for my testing), the Core SDK (for the exe/unit tests) so they used the latest GC Tooling. You can revert these changes and the code will still work (the unit tests will need slight modification though).

In terms of impact of adding this behaviour. For .Net Core it is almost imperceptible, for .Net Framework the only way to achieve this functionality is with `GC.Collect`s which is a little more invasive. I hope that the benefit of seeing allocations outweighs any perceived downsides. 

Lastly I've [proposed an addition to vNext of .Net Standard](https://github.com/dotnet/standard/issues/771) that would do away with all the hackery for both this, Benchmark.Net and anyone else who cares about allocations at runtime.  

### Commit notes

```
Added target for .Net Standard 2.0 to detect better GC tooling
Added test for new AllocatedBytes feature
Added test to account for Scientist's own allocations in AllocatedBytes
Upgraded test and console app to netcoreapp 2.1 to use new GC Tooling
Some portions of GCHelper were derived from Benchmark.Net and are used under license
```
I'm not sure how scientist handle this (nor how ruby handles this situation), and I know you want to stay close to the ruby lib, but it could be useful to support different return types between the control and candidate. When refactoring there is no guarantee that the candidate methods will return the same type as the existing method, which could lead to hardships trying to experiment on them. Supporting 2 different types allows us to get around that issue, and we can check the differences between 2 different complex objects in the comparison. 

A potential implementation:

``` csharp
internal class Experiment<TControl, TCandidate>
{
    Func<Task<TControl>> _control;
    Func<Task<TCandidate>> _candidate;

    public void Use(Func<Task<TControl>> control);
    public void Try(Func<Task<TCandidate>> candidate);

    public void Compare(Func<TControl, TCandidate, bool> comparison);
}
```
