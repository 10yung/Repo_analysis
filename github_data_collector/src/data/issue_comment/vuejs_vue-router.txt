### Version
3.1.3

### Reproduction link
[https://codesandbox.io/s/romantic-browser-xvj0m](https://codesandbox.io/s/romantic-browser-xvj0m)







### Steps to reproduce
* Refresh page at https://xvj0m.csb.app/user/test : the active class works fine.
* Refresh page at https://xvj0m.csb.app/user/t√©st : the active class is not applied.

### What is expected?
Active class on the router link

### What is actually happening?
No active class is applied

---
The active class is not even applied when the params is encoded (e.g: https://xvj0m.csb.app/user/t%C3%A9st).

Finally, the active class is applied when you click on router links, even with non ASCII char. The only problem is at the first load of the page.

<!-- generated by vue-issues. DO NOT REMOVE -->
Ëã±ÊñáÈÄóÂè∑Êîπ‰∏∫‰∏≠ÊñáÈÄóÂè∑

<!--
Please make sure to read the Pull Request Guidelines:
https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines
-->

### What problem does this feature solve?
In order to split large project into modules, I (and someone else: #1234 #298 ) is looking for a method for dynamically routing. And I've code them, may I make a pull request ?

Here is the commit: https://github.com/hyjiacan/vue-router/commit/e8eef6da398684de0aca406cfc7e722e284c664a

### What does the proposed API look like?

They are identified by `route path`

#### Remove route

Remove route which matches path `/path/to/` and all its children routes:

```javascript
router.removeRoute('/path/to')
```

#### Replace routes

Replace route `/path/to` and more:

```javascript
router.replaceRoutes([{
  path: '/path/to',
  component: NewComponent,
  // something else
}, {
  // more replacement
}])
```

<!-- generated by vue-issues. DO NOT REMOVE -->
Hi! First contributor + pretty new to Vue üëã üòÑ 

This PR adds `aria-current="page"` to active links, and resolves #2116. I made the following two choices:

1. Use `aria-current="page"` over other token values
The original issue mentions allowing custom token values, or future `<router-link>` extension possibilities. That still seems useful, but `aria-current="page"` seems like the right choice at least 90% of the time. The other tokens are either much less common (e.g. `step`) or unlikely to be used with a router at all (e.g. `date`)

2. Use the `activeClass` logic over only applying it to the exact active route
This is more hand-wavy, but seems like the better choice -- URL params shouldn't necessarily affect `aria-current`, and it's not the worst thing to have parent routes also receive `aria-current` if `exact` is not applied.

I'm hoping this is a small enough change that it can go in before the harder work of figuring out how to extend `<router-link>` is done, and it seems like a sensible default even with customization. I've run into some issues using vue-router b/c of this, so I'd personally love to see `aria-current` added :). I'm happy to answer any questions on the accessibility side, and let me know if I missed anything PR-wise. Thanks!


<!--
Please make sure to read the Pull Request Guidelines:
https://github.com/vuejs/vue/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines
-->
**Reason**
I had issues getting this to work with the examples in the doc as currently written. It wasn't until I found [this answer on Stack Overflow](https://stackoverflow.com/a/52119508/10577234) where things became clear. Admittedly, I'm not well versed in Apache, but I figured these amendments might better serve others in the future. Per the Stack Overflow answer it seems there was a related [Vue Forum discussion](https://forum.vuejs.org/t/vue-webpack-project-path-change/4993/6) which tells me the scenario is not uncommon.

**What changed?**
I added a few specifics to the Apache example in `history-mode.md` and removed the trailing `/` in the `RewriteBase` example for subfolders. These adjustments mirror how I was able to get my application working when building to a different base path and deploying to Apache.
This PR improves the way router errors are thrown.

4 router errors types have been created:

- `NavigationDuplicated`
- `NavigationCancelled`
- `NavigationRedirected`
- `NavigationAborted`

Before:

```
Uncaught (in promise) undefined
```

After:

```
Uncaught (in promise) Error: NavigationAborted: Navigating to location ("/foo?abort=y") has been aborted
    at eval (base.js:157)
    at eval (app.js:33)
    at iterator (base.js:153)
    at step (async.js:13)
    at step (async.js:17)
    at runQueue (async.js:21)
    at HashHistory.confirmTransition (base.js:179)
    at HashHistory.transitionTo (base.js:74)
```
Fix an issue where page browsing to a route and then reloading leads to inconsistent parameters and fullPath values.
### What problem does this feature solve?
I am trying to create a button within a `router-link` that shows a loading indicator when clicked (but still allows opening in a new tab, which should not show a loading indicator).

It would be nice if `navigate($event)` in the `v-slot` API could return a promise when it performs a `.push/replace()` so that I could stop the loading animation when the route fails to load, or succeeds, just like `router.push/replace(to)` does.

Right now the only way to do this in my app is to implement a programmatic push or replace call, which does not allow opening in a new tab.

Thank you so much!

### What does the proposed API look like?
`navigate(e)` returns a Promise (the result of `.push` or `.replace`) if either of those functions are called within `navigate(e)`. If neither is called, return nothing.

<!-- generated by vue-issues. DO NOT REMOVE -->
### What problem does this feature solve?
I want to do:

```javascript
try {
	await router.push(...)
} catch (e) {
	if (e instanceof NavigationDuplicated) {}
	else {throw e}
}
```

Unfortunately I can't, because NavigationDuplicated is not exported.

### What does the proposed API look like?
export NavigationDuplicated

<!-- generated by vue-issues. DO NOT REMOVE -->