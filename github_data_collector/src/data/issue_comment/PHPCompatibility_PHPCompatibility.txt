Hi

Thank you for PHPCompatibility, it helps to check my phpBB extensions for code compatibility. 

A small suggestion: I use my own test system for phpBB extensions and I show the version of PHPCompatibility on the report page. Currently I use RegEx to retrieve the version from `CHANGELOG.md`. This works, but it would be much more stable, if I can simply read `composer.json`.

Regards
The `NewLateStaticBinding` sniff was underreporting for `instanceof static` and `new static`. Fixed now.

Includes unit tests.
This:
* Updates the minimum requirements in `composer.json`, the `README` and the `CONTRIBUTING` docs.
* Updates the Travis script to no longer test against PHP 5.3, nor PHPCS < 2.6.0.
* Updates the `LowPHPCS` and `LowPHP` sniffs to reflect the new minimum and recommended PHP and PHPCS versions.
* Updates the PHPCS ruleset to now longer check the code of PHPCompatibility for cross-version compatibility with PHP 5.3.

Includes removing any and all work-arounds for supporting PHPCS < 2.6.0 and PHP < 5.4 which I could find in the codebase.

See the individual commits for full details.

Closes #835
The following code triggers a syntax error on PHP versions below 7.0:

```php
class MyClass
{
    const MY_CONSTANT = 'value';
}

class AnotherClass
{
    public $prop;
    
    public function __construct()
    {
        $this->prop = new MyClass();
    }
}

$instance = new AnotherClass();

echo $instance->prop::MY_CONSTANT; // Parse error: syntax error, unexpected '::' (T_PAAMAYIM_NEKUDOTAYIM)
```

Can this be detected?
> Version | Description
> -- | --
> 7.2.0 | Usage of a string as the assertion         became deprecated. It now emits an E_DEPRECATED         notice when both assert.active         and zend.assertions are set         to 1.
> 7.0.0 | assert() is now a language construct and not a         function. assertion can now be an expression.         The second parameter is now interpreted either as an         exception (if a         Throwable object is given), or as the         description supported from PHP 5.4.8 onwards.
> 5.4.8 | The description parameter was added. The         description is also now provided to a callback         function in ASSERT_CALLBACK mode as the fourth         argument.

Source: https://www.php.net/manual/en/function.assert.php

Please add detection for PHP Notice "Only variables should be passed by reference" for native PHP functions.
Example:
`$site = end( explode( '/', $path ) ); # PHP Notice: Only variables should be passed by reference`

I was directed here from a [PHPCS feature request](https://github.com/squizlabs/PHP_CodeSniffer/issues/2550#issuecomment-510907051). Call time pass by reference was [removed in PHP 5.4](https://www.php.net/manual/en/migration54.incompatible.php) and this was [reclassified as a Notice in PHP 7.0](https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.error-handling.strict). Note that this is not currently detected by [Syntax/CallTimePassByReference sniff](https://github.com/PHPCompatibility/PHPCompatibility/blob/master/PHPCompatibility/Sniffs/Syntax/ForbiddenCallTimePassByReferenceSniff.php).
### Proposal 1:
There are certain tokenizer quirks - especially around the changes in integers, like binary integers (5.4) and numeric literals with underscores (7.4) - which are making supporting PHP 5.3 more and more complicated.

I'd like to propose for PHPCompatibility to drop PHP 5.3 support once PHP 7.4 comes out.
The new minimum PHP version will then be PHP 5.4 which is still ancient.

PHP 5.4 has already been the minimum _recommended_ PHP version since June 2017 (619cb418c245f2145ff7473a77b3f58542395fca).

In anticipation of this, I'd like to suggest adding a `PHPCompatibility.Upgrade.LowPHP` sniff to warn people who are still running PHPCompatibility on PHP 5.3 about the impending change in the minimum requirements.

### Proposal 2:
Along the same lines, I'd like to propose we drop support for PHP_CodeSniffer < 2.6.0 at the same time.

PHP_CodeSniffer 2.6.0 has already been the minimum recommended PHPCS version for PHPCompatibility since August 2016 (5598f60958ca3966fe8883a22ba8084e07a2a143).

Additionally, the `LowPHPCS` upgrade warning sniff has been in place since July 2018 and has not generated any support requests

### Open questions:
If this proposal is accepted, it would be a good idea to set new (higher) recommended PHP and PHPCS versions when the version drop is implemented.

I'd like to suggest the following for those:
* PHP: 5.6
* PHPCS: 3.1.0
This is just an issue to keep track of which of the [implemented RFCs for PHP 8.0](https://wiki.php.net/rfc#php_80) have been addressed.

This list should be updated when additional RFCs are accepted/implemented.

## To Do
- [ ] [Always generate fatal error for incompatible method signatures](https://wiki.php.net/rfc/lsp_errors)
    _Resolve inconsistent handling of abstract and non-abstract methods during inheritance._ 
- [ ] [Arrays starting with a negative index](https://wiki.php.net/rfc/negative_array_index)
    _Proposes to make implicit array keys consistent._
- [ ] [Consistent type errors for internal functions](https://wiki.php.net/rfc/consistent_type_errors)
    _Consistently throw TypeError for parameter parsing failures of internal functions._
- [ ] [JIT](https://wiki.php.net/rfc/jit)
    _Just in Time Compiler._

## Claimed
None so far.

## Has PR
None so far.

## Reviewed and concluded non-sniffable
None so far.

## Process

If anyone starts work on updating PHPCompatibility to handle any of these issues, please either update the above list (if you can) or leave a comment below, so one of the maintainers can update the list.

Once PHP 8.0 comes out, individual issues should be opened for the changes which remain at that point in time.
This is just an issue to keep track of which of the [implemented RFCs for PHP 7.4](https://wiki.php.net/rfc#php_74) have been addressed.

This list should be updated when additional RFCs are accepted/implemented.

## To Do
- [ ] [E_WARNING for invalid containers](https://wiki.php.net/rfc/notice-for-non-valid-array-container)
    _Raise E_WARNING for array access on invalid containers_
    **Notes**:
        This is very likely impossible to sniff for reliably.
        The only code pattern I can currently come up with which _could_ be used to find at least some of these, would be to sniff for `is_array( $var['key'] )` and to verify that this is preceded by a check with `isset( $var['key'] )`, but that would still only find a small percentage of the problem cases and will also flag false positives (where the additional `isset` is not needed as the key will always exist).
- [ ] [Base Convert improvements](https://wiki.php.net/rfc/base_convert_improvements)
    Changes to base convert to warn the user when incorrect values are passed. Also allow negative numbers to be parsed.
- [ ] [Covariant Returns and Contravariant Parameters](https://wiki.php.net/rfc/covariant-returns-and-contravariant-parameters)
- [ ] [Preloading](https://wiki.php.net/rfc/preload)
    _Preload PHP functions and classes once and use them in the context of any future request without overhead._
- [ ] [Improve openssl_random_pseudo_bytes()](https://wiki.php.net/rfc/improve-openssl-random-pseudo-bytes)
    _Proposes making openssl_random_pseudo_bytes() fail closed and deprecate the second parameter_
- [ ] [Escape PDO "?" parameter placeholder](https://wiki.php.net/rfc/pdo_escape_placeholders)
    _Changes to PDO to allow using operators containing “?” with pdo_pgsql, most commonly the JSON key exists “?” operator._
- [Deprecations for PHP 7.4](https://wiki.php.net/rfc/deprecations_php_7_4)
    _Functionality to be deprecated in PHP 7.4 and removed in PHP 8.0._
    Sub-list:
    - [ ] [array_key_exists() with objects](https://wiki.php.net/rfc/deprecations_php_7_4#array_key_exists_with_objects)
    - [ ] [Reflection export() methods](https://wiki.php.net/rfc/deprecations_php_7_4#reflection_export_methods)
    - [ ] [Unbinding $this from non-static closures](https://wiki.php.net/rfc/deprecations_php_7_4#unbinding_this_from_non-static_closures)

## Claimed
- [ ] [Numeric Literal Separator](https://wiki.php.net/rfc/numeric_literal_separator)
    _Enable improved code readability by supporting an underscore between digits in numeric literals._ 
    **Status**: Basically done, just waiting for a decision on how this will be tokenized in PHPCS 3.5.0, see the below linked issue.
    **Owner**: @jrfnl 
    **Notes**:
        Any sniff which looks at `T_LNUMBER` and `T_DNUMBER` will also need to be examined to verify they can handle these type of numbers correctly.
        If so, unit tests proving this should be added to the sniff.
        If not, sniffs may need adjusting and/or an issue may need to be opened in PHPCS upstream to discuss how to handle this change from a Tokenizer perspective.
        Also see: https://github.com/squizlabs/PHP_CodeSniffer/issues/2546
- [ ] [Arrow functions 2.0](https://wiki.php.net/rfc/arrow_functions_v2)
   _Adds short closures / arrow functions._
    **Status**: WIP
    **Owner**: @jrfnl 
    **Notes**:
        1. This change causes the double arrow to take on an additional role and existing sniffs which look at the `T_DOUBLE_ARROW` token should also be reviewed.
        2. This change introduces a new way to declare functions and existing sniffs which look at function declarations should also be reviewed.
        3. This change introduces a new token `T_FN` which PHPCS - currently - does not yet backfill for older PHP versions.
            Also see: https://github.com/squizlabs/PHP_CodeSniffer/issues/2523
        4. This change introduces a new semi-reserved keyword.

## Has PR
_A :heavy_check_mark: indicates that the PR has been merged._

- [x] :heavy_check_mark: [Deprecate alternate access to array elements and chars in string](https://wiki.php.net/rfc/deprecate_curly_braces_array_access)
    _Deprecate curly braces array and string syntax access._
- [x] :heavy_check_mark: [Allow throwing exceptions from __toString()](https://wiki.php.net/rfc/tostring_exceptions) - PR #814 + #880
    _Support throwing exceptions from `__toString()`_
- [x] :heavy_check_mark: [Spread Operator in Array Expression](https://wiki.php.net/rfc/spread_operator_for_array) -  PR #804 & #803
- [x] :heavy_check_mark: [Deprecate left-associative ternary operator](https://wiki.php.net/rfc/ternary_associativity) - PR #810
    _Deprecate nesting of ternaries without explicit use of parentheses._
- [x] :heavy_check_mark: [Deprecate and remove ext/interbase](https://wiki.php.net/rfc/deprecate-and-remove-ext-interbase) - PR #807
    _Deprecate and eventually remove the InterBase extension in the Core_
- [x] :heavy_check_mark: [weakrefs](https://wiki.php.net/rfc/weakrefs) - PR #857
- [x] :heavy_check_mark: [FFI - Foreign Function Interface](https://wiki.php.net/rfc/ffi) - PR #949
- [x] :heavy_check_mark: [Typed Properties 2.0](https://wiki.php.net/rfc/typed_properties_v2) - PR #801
    _Add support for typed properties, including static properties and references to typed properties._
- [x] :heavy_check_mark: [Null Coalesce Equal Operator](https://wiki.php.net/rfc/null_coalesce_equal_operator) - PR #340
    _Allow shorthand for self assigning null coalesce operator_
- [x] :heavy_check_mark: [Password Hash Registry](https://wiki.php.net/rfc/password_registry) - PR #827 + #865
    _Make the mechanisms used by password_hash/verify/etc… extensible by other modules._
- [x] :heavy_check_mark: [mb_str_split() Split multibyte string](https://wiki.php.net/rfc/mb_str_split) - PR #811
- [x] :heavy_check_mark: [Reflection for references](https://wiki.php.net/rfc/reference_reflection) - PR #820
    _Introduces the ReflectionReference class to allow detecting references and determining reference equality._
- [x] :heavy_check_mark: [Unbundle ext/wddx](https://wiki.php.net/rfc/deprecate-and-remove-ext-wddx) - PR #826
- [x] :heavy_check_mark: [New custom object serialization mechanism](https://wiki.php.net/rfc/custom_object_serialization) - PR #868
    _Introduces new custom object serialization mechanism to replace Serializable._
- [x] :heavy_check_mark: [Change the precedence of the concatenation operator](https://wiki.php.net/rfc/concatenation_precedence) - PR #805
- [x] :heavy_check_mark: [Argon2 support from sodium](https://wiki.php.net/rfc/sodium.argon.hash) - PR #887
    _Provide password_hash() support for argon2i/argon2id from ext/sodium if standard does not._
- [x] :heavy_check_mark: [Unbundle ext/recode](https://wiki.php.net/rfc/unbundle_recode) - PR #841
- [Deprecations for PHP 7.4](https://wiki.php.net/rfc/deprecations_php_7_4)
    _Functionality to be deprecated in PHP 7.4 and removed in PHP 8.0._
    Sub-list:
    - [x] :heavy_check_mark: [The real type](https://wiki.php.net/rfc/deprecations_php_7_4#the_real_type) - PR #844 + #847
    - [x] :heavy_check_mark: [Magic quotes legacy](https://wiki.php.net/rfc/deprecations_php_7_4#magic_quotes_legacy) - PR #847
    - [x] :heavy_check_mark: [FILTER_SANITIZE_MAGIC_QUOTES filter](https://wiki.php.net/rfc/deprecations_php_7_4#filter_sanitize_magic_quotes) - PR #845
    - [x] :heavy_check_mark: [mb_strrpos() with encoding as 3rd argument](https://wiki.php.net/rfc/deprecations_php_7_4#mb_strrpos_with_encoding_as_3rd_argument) - PR #860
    - [x] :heavy_check_mark: [implode() parameter order mix](https://wiki.php.net/rfc/deprecations_php_7_4#implode_parameter_order_mix) - PR #846
    - [x] :heavy_check_mark: [hebrevc() function](https://wiki.php.net/rfc/deprecations_php_7_4#hebrevc_function) - PR #847
    - [x] :heavy_check_mark: [convert_cyr_string() function](https://wiki.php.net/rfc/deprecations_php_7_4#convert_cyr_string) - PR #847
    - [x] :heavy_check_mark: [money_format() function](https://wiki.php.net/rfc/deprecations_php_7_4#money_format) - PR #847
    - [x] :heavy_check_mark: [ezmlm_hash() function](https://wiki.php.net/rfc/deprecations_php_7_4#ezmlm_hash) - PR #847
    - [x] :heavy_check_mark: [restore_include_path() function](https://wiki.php.net/rfc/deprecations_php_7_4#restore_include_path_function) - PR #847
    - [x] :heavy_check_mark: [allow_url_include ini directive](https://wiki.php.net/rfc/deprecations_php_7_4#allow_url_include) - PR #870


## Reviewed and concluded non-sniffable
- [Always available hash extension](https://wiki.php.net/rfc/permanent_hash_ext)
    _Proposes to make the hash extension available to every build of PHP._
    **Notes**:
    The only thing which could be sniffed for is calls to `extension_loaded()`, `function_exists()` et al, checking for the availability of the hash extension.
    Those calls are no longer needed.
    However, this is not a compatibility issue, those calls will now always return `true`, so leaving them in place doesn't break anything.
    This might be something to sniff for in the `PHPModernizer` standard with a recommendation that those calls can now be removed.


# Process

If anyone starts work on updating PHPCompatibility to handle any of these issues, please either update the above list (if you can) or leave a comment below, so one of the maintainers can update the list.

Once PHP 7.4 comes out, individual issues should be opened for the changes which remain at that point in time.
I understand what the ForbiddenGlobalVariableVariable sniff is checking for, but am slightly surprised by one of the warnings it generates:

````WARNING | Global with anything other than bare variables is discouraged since PHP 7.0. Found ${$Key}````

This is not mentioned anywhere in the PHP manual, including in the [migration guide](https://www.php.net/manual/en/migration70.incompatible.php#migration70.incompatible.variable-handling).  As far as I know, there is no reason why variable variables should cause a problem if they are unambiguous, even when used in a global declaration.

I have done some sleuthing, and have found that this was added as an outcome of [this conversation](https://github.com/PHPCompatibility/PHPCompatibility/issues/537#issuecomment-353771818), which quoted the migration guide:

````
As a general principle, using anything other than a bare variable with global is discouraged.
````

However, a [Google search for this phrase gives very little](https://www.google.com/search?q=%22As+a+general+principle%2C+using+anything+other+than+a+bare+variable+with+global+is+discouraged.%22).  It looks like this existed in an old version of the guide, but it appears that it has since been removed and is therefore no longer something that should be sniffed for.