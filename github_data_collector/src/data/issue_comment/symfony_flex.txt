
Sidekick of https://github.com/symfony/symfony/pull/35308
I have flex recipes for a my bundle dst/web-app-bundle with following folder layout:

â”œâ”€â”€ dst
â”‚Â Â  â”œâ”€â”€ web-app-bundle
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ 4.0
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ 4.1
â”‚Â Â  â”‚Â Â  â”œâ”€â”€ 4.3.0
â”‚Â Â  â”‚Â Â  â””â”€â”€ 4.4

When I install web-app-bundle:4.4.x-dev branch, flex loads >=4.3.0 recipe and not the 4.4 which I need it to load in order to test branch changes.

Any idea what I could be doing wrong or is this an issue with flex?

The entire flex functionality seems to be mystery when it comes to what folder rev will be grabbed or how it is done. Everything else in composer world uses tag while flex seems to follow arbitrary rules. I must be missing some flag or something to properly pick correct recipe version.

I would appreciate any help to correct this.

Kind Regards, Dave

After run `--unpack` twice for different recipes and sections (dev and non-dev), same third dependency is placed in both `require` and `require-dev`.

---

### Steps to reproduce

```bash
mkdir project
cd project
composer init -n
composer require symfony/flex
composer require --unpack twig
composer require --unpack --dev profiler
cat composer.json
```

Common dependency is `symfony/twig-bundle`.

### Expected Result

```json
{
    "require": {
        "symfony/twig-bundle": "*",
        "twig/twig": "^2.12|^3.0",
        "twig/extra-bundle": "^2.12|^3.0"
    },
    "scripts": {
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        }
    },
    "require-dev": {
        "symfony/stopwatch": "*",
        "symfony/web-profiler-bundle": "*",
        "symfony/flex": "^1.6"
    }
}
```

### Actual Result

:x: `symfony/twig-bundle` is present in both `require` and `require-dev`.

```json
{
    "require": {
        "symfony/twig-bundle": "*",
        "twig/twig": "^2.12|^3.0",
        "twig/extra-bundle": "^2.12|^3.0"
    },
    "scripts": {
        "auto-scripts": {
            "cache:clear": "symfony-cmd",
            "assets:install %PUBLIC_DIR%": "symfony-cmd"
        }
    },
    "require-dev": {
        "symfony/stopwatch": "*",
        "symfony/twig-bundle": "*",
        "symfony/web-profiler-bundle": "*",
        "symfony/flex": "^1.6"
    }
}
```
Receiving an error trying to install Flex using composer:

**$ composer require symfony/flex**
Using version ^1.6 for symfony/flex
./composer.json has been created
Loading composer repositories with package information
Updating dependencies (including require-dev)
Package operations: 1 install, 0 updates, 0 removals
  - Installing symfony/flex (v1.6.0): Loading from cache
Plugin installation failed, rolling back
  - Removing symfony/flex (v1.6.0)

Installation failed, deleting ./composer.json.

  [RuntimeException]
  Could not delete /var/www/public/vendor/symfony/flex/src/Command:

-----
Composer version: 1.9.1
PHP version: 7.4.1
PHP binary path: /usr/bin/php7.4


having a simple composer.json file with the `flex-require` fails with `The property flex-require is not defined and the definition does not allow additional properties`

how to reproduce:

wget https://getcomposer.org/download/1.9.1/composer.phar

create `composer.json`:
```json
{
    "name": "c33s/example",
    "type": "project",
    "license": "MIT",
    "description": "x",
    "require": {
        "symfony/flex": "^1.3.1"
    },
    "flex-require": {
        "sensio/framework-extra-bundle": "^5.1"
    }
}
```

run `php composer.phar validate`


Hi!

This can probably only be answered by Fabien. Is it feasible for the Flex API to support fetching an *old* version of a recipe? For example, suppose we're talking about `twig/extensions`. Would it be possible to ask for the `c986e32` sha of the 1.0 version of the recipe (which would be one commit *before* HEAD - https://github.com/symfony/recipes/commits/master/twig/extensions/1.0 )?

*If* we could do this, it would allow us to do two more things slightly more accurately:

1) On package removal, we could remove using the same version of a recipe as the user originally had installed. Minor - but better.

2) On package update, we could remove using the original recipe first and THEN upgrade to the latest. That would fix the problem where a file/parameter that was added in the OLD recipe is NOT added in the new recipe. Currently, that file/parameters is NOT removed. But if we were able to remove the original recipe, it WOULD remove that old file/parameter.

So, is that possible to add to the API? 

Thank you :). 
It looks like Flex is the only Symfony library that still doesn't exclude tests directory via .gitattributes
Hi everybody, 

I've got one question about namespaces in app. 
My thought is that `App` namespace is redundant. Because:
- when you are developing _looks like huge_ applications it's not a good idea to store everything in one dir called `App`, it's better to separate logic in different dirs just for better understanding. For those purposes at this moment i removed 'App' namespace at all, and i feels lucky ðŸ˜ƒ

So, what's the reason to use `App` namespace? I think that app is looking better when all code is under one space called `root \ or /src`? 

Just have a look at my structure. Of course you need some tuning in `Kernel` & `composer`, but now, i think, it looks better. So what do you think? 

My idea is that _restricting_ (propagating) all code to `App` namespace it is a little bit hard to newer Symfony developers. It's better to just open new source (namespace) under root and be free.

![image](https://user-images.githubusercontent.com/2115840/71326498-e6c92a80-250c-11ea-9fca-087a72a1b4a7.png)



There is a lack of documentation on how to properly use Symfony Flex.

For example, the behavior described in this comment is not documented anywhere:
https://github.com/symfony/flex/issues/433#issuecomment-437325751

The guide for upgrading Symfony doesn't describe how to upgrade with Flex:
https://symfony.com/doc/current/setup/upgrade_major.html#update-to-the-new-major-version-via-composer

When it comes to composer I was not very familiar with how everything worked, so trying to upgrade Symfony left me with a lot of questions that don't seem to be answered anywhere. I'm thankful that I was able to have someone explain Flex a bit better and how to modify my composer.json to upgrade by asking in Slack. But this should be available in documentation.