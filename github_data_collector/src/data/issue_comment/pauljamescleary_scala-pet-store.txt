notably, downgrade ScalaTest from a 3.2 prerelease to a 3.1 release
version

context: scala/community-build#1042

don't feel obligated to merge this. but my guess is that you don't
have any real reason to be on ScalaTest 3.2 anyway — it was
scala-steward who PR'ed the upgrade, not a human being
Introduces a naive `Queue` as well as an FS2 stream for handling orders in the background.  The FS2 stream will either save the order (for new orders) or delete the order (for cancels).

The processing follows:
1. On Placing an order, the order is sent to the queue for processing to save it
2. On Cancelling an order, the order is sent to the queue for processing to delete it

The processing is purposefully simple and rather unnecessary, if only to illustrate FS2.

- `OrderProcessor` - this is the main FS2 flow that polls for messages on the queue every few seconds, pipes them through a handler, and then pipes them through to delete the message off of the queue.  We do not explicitly handle errors right now as I planned on implementing this for SQS which does a retry after timeout.  I think this example is good enough, open to other things to show off
- `OrderQueueAlgebra` - this is a queue abstraction generalized to any implementation that follows the SQS approach to receive/delete messages.
- `OrderService` - this was modified to use the queue instead of processing directly
- `OrderQueueInMemoryInterpreter` - a naive implementation of a message queue using purely in-memory constructs.
- `OrderQueueEndpoints` - slight adjustment due to changing the signature of `delete` and renaming to `cancel`
See this build log: https://travis-ci.com/pauljamescleary/scala-pet-store/jobs/217639130

```
[info] PetEndpointsSpec:
[info] - create pet *** FAILED ***
[info]   MalformedMessageBodyFailure was thrown during property evaluation.
[info]     Message: Malformed message body: Invalid JSON
[info]     Occurred when passed generated values (
[info]       arg0 = Pet(K,,,Adopted,Set(),Set(http://.com),Some(1)),
[info]       arg1 = User(baopwsnrdqijsozn,,,,,,Some(1),Role(Admin))
[info]     )
[info] - update pet
[info] - find by tag
```

This build was triggered by a simple documentation edit, so we should figure out why this error occured, and why it only randomly occurred here. Perhaps scalacheck is not trying hard enough.

Hi @pauljamescleary Do you think it would be good idea to do instrumentation using OpenCensus tracing technique.  I like https://github.com/census-ecosystem/opencensus-scala has support for `http4s` and `doobie` which are used in this project.

We can start with opencensus' `io.opencensus.exporter.trace.logging.LoggingTraceExporter` in the beginning, and think about the tracing backend later (I think it's pluggable in opencensus).
On successful build from travis, the most recent generated docs should be deployed to the github pages site.

So far this has been done manually: https://github.com/pauljamescleary/scala-pet-store/deployments

[Adding docs deployment to the travis configuration](https://docs.travis-ci.com/user/deployment/pages/)

Necessary steps:
---
1. ⬜️ Add secure github api token to repository so it can be used in travis build
1. ⬜️ Add tut build step to travis build, fail the build if tut fails.
1. ⬜️ Deploy docs to github pages if successful, fail the build if deployment fails.
The `sbt-native-packager` is already added to this project.  
Currently, we manually append the params to the url / query string using urljoin.  Instead, we can send the query params in as a dictionary 
This is to serperate out the core functionality from it's REST interface. This would give a chance to other REST frameworks to show how to integrate with the project. 

This would make a new repo called: scala-pet-store-http4s


A lot of the logic in the repositories looks replicated throughout all of the repositories. This may be better to break this up into reusable traits. 

I.e.: 

OrderService extends ... with Creatable[t] with Deleteable[T] with Updateable[T]
**Background**
The pet store is rather far along, but there a lot of ideas for next steps to make it better.   These include things like:

* Review all the bits collaboratively and make it more idiomatic / clearer
* Create documentation to walk through concepts in the pet store
* Implement some FS2 bits, for example reading messages off a message queue

**So what now?**
Would be great to have additional collaboration on the next steps, generate a backlog of issues, and get others to contribute.

Using this issue as a starter thread for ideas and will go from there.

**What's been discussed?**
The pet store could use an accompanying guide/tutorial that talks about the overall organization of the codebase, with the ability to inspect specific implementations (e.g. how we did this with doobie).

Could use a round of reviews for cleanup, perhaps making things more principled / idiomatic wrt the specific libraries being used.