If we're deprecating and removing `uu` we should do the same to the codec of the same name.
Hi,

I am using `mypy` of version 0.740.

My minimal working example follows below. It is to great extends a black-formated copy of the section in PEP484 about upper bounded types.

```python
from abc import ABCMeta, abstractmethod
from typing import Any, TypeVar


class Comparable(metaclass=ABCMeta):
    @abstractmethod
    def __lt__(self, other: Any) -> bool:
        ...

    @abstractmethod
    def __gt__(self, other: Any) -> bool:
        ...


class MyInt:
    def __init__(self, n: int) -> None:
        self.n = n

    def __lt__(self, other: Any) -> bool:
        if isinstance(other, int):
            return self.n < other
        else:
            raise NotImplementedError

    def __gt__(self, other: Any) -> bool:
        if isinstance(other, int):
            return self.n > other
        else:
            raise NotImplementedError


CT = TypeVar("CT", bound=Comparable)


def min(x: CT, y: CT) -> CT:
    if x < y:
        return x
    else:
        return y


min(MyInt(1), MyInt(2))  # ok, return type int
min(1, 2)  # ok, return type int
min("x", "y")  # ok, return type str
```

If I check this code, I get the following

```bash
$ mypy --python-version 3.7 bound-mwe.py
bound-mwe.py:42: error: Value of type variable "CT" of "min" cannot be "MyInt"
bound-mwe.py:43: error: Value of type variable "CT" of "min" cannot be "int"
bound-mwe.py:44: error: Value of type variable "CT" of "min" cannot be "str"
Found 3 errors in 1 file (checked 1 source file)
```

I find that very confusing.
I'm currently talking with a process management researcher, and asked them why their nominal process flow has a "Replaced" state in it.

Turns out they took it straight from the diagram in PEP 1: https://www.python.org/dev/peps/pep-0001/#pep-review-resolution

The "Superseded" box is labeled as "Replaced". That part of the diagram is weird anyway, as it's more likely to be Active PEPs that go to Superseded than Final ones.
Currently PEP 503 states

> Within a repository, the root URL (``/``) **MUST** be a valid HTML5 page with a
single anchor element per project in the repository.

"HTML5 page" is used in a few other places to refer to the expected return value of the PEP 503 repository.

HTML5 specifies two syntaxes/document formats: HTML and XML. Currently pip only supports HTML documents.

I would propose the following:

1. Add a note to PEP 503 to the effect of:

   > Below, "HTML page" can be taken to mean an HTML document confirming to [[HTML5]].

   and then replace each instance of "HTML5 page" with "HTML page".

1. Add a constraint to the existing list

   > When served via HTTP, repositories **SHOULD** include a `Content-Type` header with a `media-type` value of `text/html` when returning an HTML page. Clients **MAY** choose to parse an HTTP response body as an HTML page in the absence of a `Content-Type` header.

# References

1. pypa/pip#6697
1. https://html.spec.whatwg.org/multipage/introduction.html#html-vs-xhtml
Looks like footnotes are shifted on PEP 595:

> This concern has been raised in the past in a Zulip topic [19].

[...]

>  [19] The New-bugs-announce mailing list




Hello,

I feel frustrated by the PEP RSS feed not containing the PEP abstract, but only its title.

It seems like it would be possible to add the PEP abstract as the item's `description`, and move the PEP author as the item's `author`, using the `docutils` library to parse the PEP file when generating the RSS feed.

What do you think about this proposition?
The changes to PEP 1 following the appointment of the first Steering Council have made the BDFL-Delegate role more significant, since every PEP is now expected to have a delegate appointed (even in cases where the delegate is an SC member speaking on behalf of the SC).

However, this information isn't presented in the PEP Index overview - it's only visible on the individual project pages.

Similarly, which version a PEP is targeting is very useful overview information, as a draft PEP targeting the next release (currently 3.8) needs different handling from one targeting a subsequent release.

Updating the PEP 0 generator to include that additional information would be reasonably straightforward (as it already reads in all the headers for all the PEPs), so the main complication would be to ensure that the python.org PEP index rendering doesn't break (as discussed in https://github.com/python/peps/blob/master/README.rst#generating-html-for-pythonorg )
@zooba, I'm using this issue as a to be discussed list for [PEP 551](https://www.python.org/dev/peps/pep-0551). Some are just crazy ideas that I wanted to dump into text form before I forget them again.

- [ ] prevent piping code from stdin like ``curl https://example.com/script.py | spython``
- [ ] use -I (isolated mode), which also sets -E, and -s
- [ ] explain why importing from pyc is not supported
- [ ] optionally have further restrictions for ``open_for_import`` like ``O_MAYEXEC`` and ``W^X`` (Python file must not be owned or writeable by current effective uid/gid unless it's root).
- [ ] optionally allow passing arguments to scripts. On Linux it's common to have command line utilities in Python. There must be a way to mark a script for arguments, perhaps ``# spython: arguments`` on the second line of the script? Or only allow arguments from scripts in well-known directories like ``/bin:/sbin:...``?
- [ ] optionally prevent interactive consoles (may have to block ``pdb``, ``cmd``, ``code``)
- [ ] discuss if spython should block/limit ctypes
- [ ] block ``exec()`` of imports in ``*.pth`` files?
- [ ] force compile() + exec() to go through a file on the file system? Maybe something that can be generated on build time and then shipped?
- [ ] optionally block ``exec()`` completely?
  - namedtuple uses exec to generate a ``__new__`` function. The function generator could be implemented as ``tuple._make_new()`` or so.
  - dataclasses are using exec
  - cgi, trace, doctest, timeit, and a couple of more modules use exec. They are probably not useful in secure mode.
- [ ] ``SPYTHONLOG`` breaks with tradition to have all Python env vars prefixed with ``PYTHON``.
The part of PEP 376 that was actually accepted is the installation directory layout - the discussion of Python level APIs in the "Implementation Details" section isn't accurate.

This section should be updated to point readers towards `distlib` and `importlib-metadata` instead.
Example 4 
@accepts(int, (int,float))
@returns((int,float))
def func(arg1, arg2):
    return arg1 * arg2

The order of @accepts and @returns should be reversed, otherwise, the assertion will be raised.

```
Traceback (most recent call last):
  File "/Users/jack/PycharmProjects/tutorial/testdecorator.py", line 25, in <module>
    @returns((int,float))
  File "/Users/jack/PycharmProjects/tutorial/testdecorator.py", line 3, in check_accepts
    assert len(types) == f.func_code.co_argcount
AssertionError
```

