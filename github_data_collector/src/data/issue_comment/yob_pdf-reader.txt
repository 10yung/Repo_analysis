Hi, 

I'm working with some tagged PDF and I must extract array from them. This arrays are tagged and I think it's the only way to parse them properly. I mean the rows have different cell size and the arrays could be on different pages. 

So I'm wondering if this PDF-Reader API is able to manage this tagged PDF ? 

Thank you for your attention. 
using snippet : 

```
p=PDF::Reader.new(path);
ap p.pages.map { |page| page.text.split("\n") }
```

`ap` being [awesome print](https://github.com/awesome-print/awesome_print)

```
[
    [0] [
        [ 0] "a   D                                                                              D    F 0 2 C C A             F",
        [ 1] "r   é                                  0          0          0          C          é    n 7 ,S R i R            a",
        [ 2] "B   a                                  0          0          0          d          t    e 0  Q I s E            t",
        [ 3] "n   i                                  8          1          1          e          i      L  A N i S",
        [ 4] "a   d                                  8          5          2                     d      E  R E S E            e",
        [ 5] "e   u                                  9          4          7                     e      R E  A u D",
        [ 6] "    p                                  9          3          8                     a      I  A N i L",
        [ 7] "    i                                                                              c      E  C L   V",
        [ 8] "    m                                                                              o      S  H E   R",
        [ 9] "    e                                                                              m           R   I",
        [10] "    n                                                                              m               O",
        [11] "    t                                                                              n               N",
        [12] "                                                                                   d",
        [13] "                                                                                   e",
        [14] "",
        [15] "                                    5 D D D    0 B B C    1 E M G       P",
        [16] "                                    0 i  o I   1 B B  l   0 a R  v      r",
        [17] "                                    P l  l R   g S S  n   m d G  n      d                 F 6 6 C A",
        [18] "                                    t s s      t n I  s   l e I  h      u                 n  7 S R R",
        [19] "                                    l A A        D D        o N  y      t                 e  0 Q N E             1",
        [20] "                                    d b b        t E        e C                              F A N S             ,",
        [21] "1                                   e i rc       x O        t H                              E R E E             R",
        [22] ",                                   s t t        l X          Y                              R E A D           5 e M",
        [23] "8                                   e            d                                           I A N E           0 R r",
        [24] "€                                                S                                           E C L A           , a n",
        [25] "                                                 P                                           S H I T           a m a",
        [26] "                                                 2                                               R U           i u d",
        [27] "                                                 5                                                 A             r",
        [28] "                                                                                                   T",
        [29] "                                                                                                   I",
        [30] "               M                                                          U                        N",
        [31] "               n                       7          3          6         T  n P",
        [32] "               t       F               ,          9          9         T  i i",
        [33] "               n       a               9          9          9         C  i x",
        [34] "               t       s               €          €          €                          0 D D N N D",
        [35] "               o   D   d                                                                0 t t °d d T               S",
        [36] "               t   o   e   S                                                Q           . d d  e e A               A",
        [37] "           D   l   t   l   o           1          1          1              é           0 e e  o f S               S",
        [38] "           n   à   r   r   s                                                            9 a com  t D         T     u",
        [39] "           t   a   m   i   T                                                              u  m a r E         A C   a",
        [40] "           V   y   i   o   t           2          2          2                            a  a d : F         n S r i",
        [41] "           A   r   e   n               ,          ,          ,              T             o  d e 0 C         r 3 t a",
        [42] "                           l           0          0          0              A             e  e 3 9 T       F c 4 3 d",
        [43] "                                       %          %          %       c                    t  0 7 2 R       R m 6 8 2",
        [44] "                                                                     o      M             '  . 3 1 A       0 m 7 7 1",
        [45] "               1           1           1          3          6       m (    o             p  6 5 6 O       4 n 1 1 0",
        [46] "           8   1   3   5   1           9          0          0       r m    n             d  0 2 0 N       6 u 9 9 4",
        [47] "           5   2   6   9   2           ,          7          9       i i  T a             i  1 5           4 a P 5 9",
        [48] "           5   8   4   5   8           €          €          €       e e  C n             n  9             6 e a 0 4",
        [49] "           €   €   €   €   €                                         )      t             :                9 : s 5 €"
    ],
    [1] [
        [ 0] "     p N",
        [ 1] "M    o  o",
        [ 2] "a    v  t",
        [ 3] "i    z  S",
        [ 4] "n    a  e",
        [ 5] "u    s  i",
        [ 6] "d    i",
        [ 7] "o       C",
        [ 8] "u    s  l",
        [ 9] "r       t",
        [10] "m    l  e",
        [11] "e    n  s",
        [12] "r    s  à",
        [13] "i       v",
        [14] "o    c  t",
        [15] "u    d",
        [16] "v    i  c",
        [17] "t    n  u",
        [18] "     s  t",
        [19] "c    é  c",
        [20] "n    é n",
        [21] "f    a n",
        [22] "c    e ce",
        [23] "e    d zt",
        [24] "t    e  -",
        [25] "e    e u",
        [26] "p    n s",
        [27] "r    e  s",
        [28] "q    A r",
        [29] "u    u  l",
        [30] "v    u  t",
        [31] "o    n  e",
        [32] "e    e  w",
        [33] "c    o  w",
        [34] "m    m  m",
        [35] "m    t  a",
        [36] "a    n  o",
        [37] "d    '  n",
        [38] "e    t ua",
        [39] "o    a d",
        [40] "s    o  ,",
        [41] "a    d  u",
        [42] "p    é  b",
        [43] "o    .  q",
        [44] "t       e",
        [45] "a       N",
        [46] "n       o",
        [47] "i       s",
        [48] "r       C",
        [49] "s       n",
        [50] "a       a",
        [51] "s       t",
        [52] "c       e",
        [53] "i       V",
        [54] "n       o",
        [55] ".       s"
    ]
]
```

I'll sent you the  original PDF via mail.

edit : I've tested against current master 9dabde159011b031fc34c078775fd001b87379d2
When a pdf has a lot of really small characters in it, reading the PDF can use a huge amount of memory. 

in `page_layout.rb`:
``` 
def to_s
      return "" if @runs.empty?

      page = row_count.times.map { |i| " " * col_count }
      @runs.each do |run|
        x_pos = ((run.x - @x_offset) / col_multiplier).round
        y_pos = row_count - (run.y / row_multiplier).round
        if y_pos <= row_count && y_pos >= 0 && x_pos <= col_count && x_pos >= 0
          local_string_insert(page[y_pos-1], run.text, x_pos)
        end
      end
      interesting_rows(page).map(&:rstrip).join("\n")
    end
```

specifically the second line of this method creates a really large array in some cases

the dimensions of this array are calculated using `internal_show_text` in `page_text_receiver.rb`, which is using the average font size of all characters. when there are a lot of characters with tiny font sizes (as pdfs often have, like small symbols etc.), it means the widths and heights of the rows and columns to create this array will be super small, thus resulting in cases of 100k x 100k (or even more) arrays. this is such a big array that it's crashing our application in these cases. 

@EugeneNF has also been working on this

Improves `PageState` and `PageTextReceiver` so they track additional elements of the graphics state, like colorspace, color, alpha level, etc.

I'm not sure if I'll merge this yet, but it's potentially helpful for improving text extraction. For example, we could skip text with an alpha value of 0 (because it's not visible to users).
The problem occurs in one of the fonts embedded in the PDF. To make it easier to reproduce, I've attached just the decoded cmap as a file. To reproduce the error from the cmap file:

PDF::Reader::CMap.new(File.read('/path/to/problem.cmap'))

Parsing breaks here "/CIDSystemInfo <<". It doesn't seem like cmaps suport the << (begin dictionary) operator. It should be using the "begin" keyword as specified in the spec. That said, we may be able to patch the cmap parsing to support this as an alternative syntax.

[ELPAC.Summative-Sample-SSR-Gr5-English.2018.pdf](https://github.com/yob/pdf-reader/files/3266570/ELPAC.Summative-Sample-SSR-Gr5-English.2018.pdf)

[problem.cmap.txt](https://github.com/yob/pdf-reader/files/3266577/problem.cmap.txt)


I notice that some PDFs have extra apparently spurious text in them, eg some bank statements (presumably the bank puts them into to make it hard to parse them).

An example is where you have a transparent text run of '6' in one text run and an amount of say '50.00' in a text run that overlaps the '6'. PDF Reader's Page text() method outputs these two as 650.00, so it incorrectly looks like the amount is $650 instead of $50. The overlap also occurs when the '6' ends in the column immediately before the '50.00'.

If I view the PDF in Evince, the spurious text is rendered transparently, so the document looks fine unless I select the text for copy and paste. In the pasted output, the two strings appear with a space between them, ie '6 50.00'. So it's not ideal, but at least the you can recognise that the amount is $50 and not $650.

The PageLayout to_s method is doing the hard work of mapping the TextRun objects and rendering them to a string. It calls local_string_insert to insert each text at its x_pos and y_pos (x_pos and y_pos are converted into columns from the raw x and y coords).

Brainstorming, there might be a couple of ways around this:

- I have tried moving the text runs that overlap prior to calling PageLayout's to_s method (eg at the end of PageLayout's initialize method) to ensure that there is least one column between them. This fixes the issue - I get 6 50.00 instead of 650.00, so it matches how Evince works. I did it by grouping the text runs into a hash of { y column => [ ary of TextRun ] } and then sorting each ary by its start x column. Then I check for overlap by comparing the endx column of one text run against the following text run's x column. The disadvantage of doing this is that potentially you could lose text off the right hand side of the page, because to_s checks that the text run starts within the expected number of columns on the page before inserting it. Maybe we could remove that check so the text isn't lost.

- We could add an alternative method to page.text() that returns the TextRun objects directly, eg as a hash of { y_column => [ ary of TextRun ] } or as an Array of [ ary of TextRun ]. If the TextRun object had methods to return its x_col and endx_col as well as the raw x and endx, the caller could figure out for themself where they are located on the page. (As a side benefit, the caller could also see the TextRun attributes like font_size and width. We could even make the TextRun store its font so the user could see which font is applicable, which might help with https://github.com/yob/pdf-reader/issues/272.)

This might also be related to https://github.com/yob/pdf-reader/issues/43.

I'm using pdf-reader v2.2.0.
Continuing a conversation from #278 here for more visibility:

I am looking at `prepare_regular_token` because it is at the top of my profiles for some of our tests. I don't know how much effort has already been put in so I don't know if I should bother poking yet.

The method looks like a hand-build byte-oriented lexer using either `StringIO`/`IO` (tho the constructor seems out of date on that). Has any effort been made to benchmark this or optimize it? I was thinking a switch to wrapping the `IO` in a `StringScanner` instance might allow better lexing performance and fewer objects being made. For example, all those `"".dup`s might be able to be thrown away because you'd just get the finished token from `StringScanner` in one fell swoop.

I can poke at this, but I'd love to know others have and it's been thoroughly explored and maxed out already.
Hi Team,

If we want to access bullet color or bullet style in the pdf document there are no existing methods to do so. Is there a chance for the new enhancement to access the bullet style. It will be helpful for us if we can achieve this.

![image](https://user-images.githubusercontent.com/21240158/39519248-04424068-4dd4-11e8-8708-1eff1b95a47f.png)

Regards,
Santhoshi

I have a PDF I created with prawn, and added metadata tags. 

When I open it up in MacOS preview, and do a 'get info', my metadata is there, it shows it. 

But when I open it up with PDF::Reader, and look at `reader.metadata`, I get `nil` back. 