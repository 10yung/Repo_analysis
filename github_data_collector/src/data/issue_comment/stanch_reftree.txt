
For SVG output, the dot language supports specifying a URL link for a node.
See: https://graphviz.gitlab.io/_pages/doc/info/attrs.html#d:URL

Since the node label is a table, the tooltip shows "<table>" if there is no anchor.
For such cases, it would be helpful to override the tooltip.






Currently this project is only published for Scala 2.11. I would love to use it for generating some documentation in Scala 2.12.
```
Char nullSymbol = '␀'
```
I have the following image generated:
![arraydeque](https://user-images.githubusercontent.com/899219/41212351-2a0a3a66-6d0b-11e8-915a-1b61e53fcbff.gif)

This is the code I am using:
```scala
implicit def `ArrayDeque RefTree`: ToRefTree[mutable.ArrayDeque[Char]] = ToRefTree {ds =>
    val array = ds.privateField[Array[AnyRef]]("array").map(c => Option(c).getOrElse('␀').asInstanceOf[Char])
    val start = ds.privateField[Int]("start")
    val end = ds.privateField[Int]("end")

    val arrayRef = {
      val arrayFields = array.zipWithIndex map { case (a, i) =>
        val name = i match {
          case `start` if start == end => s"start=end=$i"
          case `start` => s"start=$i"
          case `end` => s"end=$i"
          case _ => i.toString
        }
        a.refTree.withHighlight(i == start || i == end).toField.withName(name)
      }
      RefTree.Ref(array, arrayFields).rename(s"char[${array.length}]")
    }

    RefTree.Ref(ds, Seq(
      start.refTree.withHighlight(true).toField.withName("start"),
      end.refTree.withHighlight(true).toField.withName("end"),
      arrayRef.toField.withName("array")
    ) ++ ds.toArray.zipWithIndex.map({case (a, i) => a.refTree.toField.withName(i.toString)}))
  }
```

But, it would be nice to have `start` and `end` have arrows into the array. Is it possible?
Exception building diagram (on scala 2.12.5)

```
[info] Compiling 1 Scala source to /home/wsargent/work/scala-capabilities/images/target/scala-2.12/classes ...
[error] /home/wsargent/work/scala-capabilities/images/src/main/scala/Main.scala:90:44: Internal error: unable to find the outer accessor symbol of class anon$Generic Coproduct RefTree$macro$14
[error]     val diagram = Diagram(nameChanger)
[error]                                            ^
[error] ## Exception when compiling 1 sources to /home/wsargent/work/scala-capabilities/images/target/scala-2.12/classes
[error] null
[error] java.lang.String.valueOf(String.java:2994)
```

code is as follows

```scala
import java.nio.file.{Path, Paths}

import reftree.diagram.Diagram
import reftree.render.{Renderer, RenderingOptions}

object Main {

  // #definition
  final class Document(private var name: String) {
    private object capabilities {
      val nameChanger = new Document.NameChanger {
        override def changeName(newName: String): Unit =  {
          name = newName
        }
      }
    }
    override def toString: String = s"Document($name)"
  }
  // #definition

  // #access
  object Document {
    sealed trait NameChanger {
      def changeName(name: String): Unit
    }

    // Policy controls who has access to what
    class Access private {
      def nameChanger(doc: Document): NameChanger = {
        doc.capabilities.nameChanger
      }
    }

    object Access {
      def apply(): Access = new Access
    }
  }
  // #access

  // https://www.youtube.com/watch?v=6mWaqGHeg3g

  def main(args: Array[String]): Unit = {
    val imagePath = Paths.get("images") // current relative path + "images"
    implicit val renderer = Renderer(
      renderingOptions = RenderingOptions(),
      directory = imagePath.resolve("overview")
    )

    import renderer._

    def render(name: String, diagram: Diagram): Path = {
      diagram.render(name)
      directory.resolve(s"$name.${renderer.format}")
    }

    def display(path: Path) = {
      println(s"Open with Browser ${path.toUri}")
      println(s"Open with IntelliJ IDEA http://localhost:63342/api/file/${path.toString}")
    }

    val document = new Document("will")
    val access = Document.Access()
    val nameChanger = access.nameChanger(document)
    println(s"result = $document")

    val diagram = Diagram(nameChanger)

    display(render("nameChanger", diagram))
  }
}
```
In https://stanch.github.io/reftree/#minimal-example the example uses `ImagePath` but does not define it.

It would be easier if a URL was provided:

```scala
import java.nio.file.Paths

import reftree.diagram.Diagram
import reftree.render.{Renderer, RenderingOptions}

object Main {
  def main(args: Array[String]): Unit = {
    val imagePath = Paths.get("images") // current relative path + "images"
    val renderer = Renderer(
      renderingOptions = RenderingOptions(density = 75),
      directory = imagePath.resolve("overview")
    )

    import renderer._

    case class Person(firstName: String, age: Int)

    Diagram.sourceCodeCaption(Person("Bob", 42)).render("example")
    val file = directory.resolve("example.png")

    println(s"Open with Browser ${file.toUri}")
    println(s"Open with IntelliJ IDEA http://localhost:63342/api/file/${file.toString}")
  }
}
```
Running ` reftree.demo.All` reproduces this issue on windows 10.

Still pictures are generated nicely:

![list](https://user-images.githubusercontent.com/1153154/27262488-219e31b0-5458-11e7-8983-c528ba5da6e7.png)

but animations get a wierd A-hat symbol next to the black circles:

![list-append](https://user-images.githubusercontent.com/1153154/27262500-300a91c6-5458-11e7-831e-d6bccb446c5a.gif)

Can we have an implicit for drawing a vertical sequential list?
Something like:
```
abcd
    |
efgh
    |
ijkl
    |
end
```

I was using something like this, but it crashes on some very simple inputs (flowName is a string)
```
  implicit def cfListDrawer: ToRefTree[List[CFEnum]] = ToRefTree[List[CFEnum]] {
    case x::xs => RefTree.Ref(x, Seq(xs.refTree)).rename(x.flowName)
    case Nil => RefTree.Ref("", Seq()).rename("End")
  }
```

Would be useful for vertical flow diagrams.