I added Italian translations to you gem. 
Would be nice if you could merge them.
Reading [RFC 5545 3.8.5.1.  Exception Date-Times](https://tools.ietf.org/html/rfc5545#section-3.8.5.1) it's unclear whether generating multiple EXDATE properties is correct. The example they provide is a single property with a value that is a list of exception times.
`EXDATE:19960402T010000Z,19960403T010000Z,19960404T010000Z`

```ruby
schedule = IceCube::Schedule.new(Time.iso8601("2019-10-21T00:00:00Z"), end_time: Time.iso8601("2019-10-21T12:00:00Z"))
schedule.add_recurrence_rule(IceCube::Rule.daily)
schedule.add_exception_time(Time.iso8601("2019-10-23T00:00:00Z"))
schedule.add_exception_time(Time.iso8601("2019-10-24T00:00:00Z"))
schedule.to_ical
# DTSTART:20191021T000000Z
# RRULE:FREQ=DAILY
# EXDATE:20191023T000000Z
# EXDATE:20191024T000000Z
# DTEND:20191021T120000Z
```
I might have anticipated:
```
DTSTART:20191021T000000Z
RRULE:FREQ=DAILY
EXDATE:20191023T000000Z,20191024T000000Z
DTEND:20191021T120000Z
```

There's an old pull request that raised this, #122, but it was dismissed due to a tangential issue.

Inspecting the code, https://github.com/seejohnrun/ice_cube/blob/master/lib/ice_cube/parsers/ical_parser.rb#L18, it suggests it's expecting the comma separated list.
`data[:extimes] += value.split(',').map { |v| TimeUtil.deserialize_time(v) }`

I acknowledge that `IceCube::IcalParser` can handle the multiple EXDATE properties, but is it correct? I'm happy to open a pull request if the list is the way to go.
seen on circle ci today

NOTE: Gem::Specification#has_rdoc= is deprecated with no replacement. It will be removed on or after 2018-12-01.
Gem::Specification#has_rdoc= called from /home/circleci/project/vendor/bundle/ruby/2.6.0/bundler/gems/ice_cube-95bf343fc33d/ice_cube.gemspec:20.
even tho we call for 10, it should return only till the end date is reached

![image](https://user-images.githubusercontent.com/13366714/65659087-710c0a80-e054-11e9-9c21-fe54dce5a7ea.png)

@seejohnrun @avit 

Is this gem still maintained? The latest stable release and the latest commit are from 2018.

Thanks! :+1: :handshake: 
i copy all values and throw them into my en.yml.

no change will ever work.

somehow i try to debug the gem, when i start my application and check the `I18n.load_paths` ice_cube isn't in there, so as soon i call ice_cube, the I18n initializer of ice_cube is called and append his own paths.

for that reason, I18n will allways look at the latest occurence, which is always ice_cubes default en.yml


this seems to be a bad approach



Highly likely that I am doing something wrong/using this gem incorrectly, but I am encountering an issue.  We are using icecube essentially to track/manage biweekly schedules, so what I am doing may be a little unusual.
My setup:
schedule yaml:
```
---
:start_time: 2019-07-17 00:10:00.000000000 Z
:rrules:
- :validations:
    :day:
    - 3
    :hour_of_day:
    - 3
  :rule_type: IceCube::WeeklyRule
  :interval: 2
  :week_start: 0
:rtimes: []
:extimes: []
```
aka `Every 2 weeks on Wednesdays on the 3rd hour of the day`
Using `Timecop` to set my current time:
```
time = Time.zone.local(2019, 7, 17, 0, 10) # => Wed, 17 Jul 2019 00:10:00 UTC +00:00
Timecop.db_safe_freeze(time)
```
Here's the weird part:
```
user_utc_offset = -8
last_run_at = Time.zone.local(2019, 7, 10, 3 - user_utc_offset, 0)
schedule.
          tap { |r| r.start_time = last_run_at + user_utc_offset }.
          next_occurrence(last_run_at) # I feel requiring last_run_at here is a bug
```
Basically, given some past date, I would like to know the next relevant Wednesday, assuming the two week cadence is maintained.  In this case, since I update the schedule's `start_time` to 7/10, I would expect a schedule of `[7/10, 7/24, 8/7]`.  And indeed, if I change the line to 
`tap { |r| r.start_time = last_run_at + user_utc_offset; puts r.occurrences(Time.now + 1.month).inspect }` I end up with: `[Wed, 10 Jul 2019 03:00:00 UTC +00:00, Wed, 24 Jul 2019 03:00:00 UTC +00:00, Wed, 07 Aug 2019 03:00:00 UTC +00:00]`.  Here's the issue:  If I call `next_occurrence` without `last_run_at` I get back `Wed, 07 Aug 2019 03:00:00 UTC +00:00` while if I pass in `last_run_at`, I get back `Wed, 24 Jul 2019 03:00:00 UTC +00:00`.  In my head, given that the date is spoofed to be `July 17`, shouldn't the `next_occurrence` be `July 24th`?

Thanks for your time and assistance in advance!
I see clearly that IceCube creates Schedules with a start time that all Rules are based off. I am wondering however if there's any support for adding Rules and Exceptions to Schedules that themselves have distinct start times.

eg something like:

schedule.add_recurrence_rule IceCube::Rule.daily.until(Date.today + 30).startsOn(Date.today + 7)

Or is there any way to achieve this with current functionality?
Essentially doing this makes an infinite loop: `day_of_week(monday: [0])`

Full reproduction test case:

```ruby
schedule = IceCube::Schedule.new(Time.zone.now)
schedule.add_recurrence_rule(IceCube::Rule.daily.day_of_week(monday: [0]))
schedule.first
```