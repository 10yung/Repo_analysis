
Any fix for this issue?
I have own implementation for CIE76 and CIE2000.

For 5,000 samples, it take 10times than CIE76 in my computer.

Does CIE2000 is expensive calculation? I am not sure that i make correctly or not.
Plz someone comment this issue!
I'm using your code in my Swift 3 app and it works fine in the simulator but when I try to run it on my 7 Plus device, it doesn't compile, complaining that `value of UIImage has no member dominantColors`.

The weird thing is running your project as a stand-alone works fine on my device.

Xcode does see the DominantColor framework when I try to import it using `import DominantColor`, so I'm really at a lost.

Any clues?
Is there a way to know which pixel or area in the image corresponding to the dominant colors?

First of all, Thank you for your nice work! Awesome.
But in general case, library users finally needs only 1~2 color groups like primary, secondary or background(outbound) colors. Currently the result seems that in each 2 items are pretty similar. Also in this example https://github.com/indragiek/DominantColor/raw/master/mac.png, I think first color is not dominant color, it may be secondary or background with the last color.

Currently you did perform it by "size" like following.

```
// Sort the clusters by size in descending order so that the
// most dominant colors come first.
 clusters.sortInPlace { $0.size > $1.size }
```

Are you have some plans to improve? Or, please let me know some hints or important parts of your lib. 

Thanks.

That will be amazing.

- [ ] K-means
- [ ] RGB <-> LAB
- [ ] CIE 2000
- [ ] Complete tests with reference images

Suggestion: https://twitter.com/alanjrogers/status/546815607291650050

[k-means++](http://en.wikipedia.org/wiki/K-means%2B%2B) might be better than choosing all of the centroids randomly.
