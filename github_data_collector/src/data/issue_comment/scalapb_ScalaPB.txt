Updates [com.github.gseitz:sbt-release](https://github.com/sbt/sbt-release) [from 1.0.12 to 1.0.13](https://github.com/sbt/sbt-release/compare/v1.0.12...v1.0.13).
[Release Notes/Changelog](https://github.com/sbt/sbt-release/releases/tag/v1.0.13)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "com.github.gseitz", artifactId = "sbt-release" } ]
```
</details>

labels: sbt-plugin-update, semver-patch
My use case is to decode Protobuf message present in kafka stream.
For this, first I need to convert proto message to class file, for which I have used following

1. Scalapb plugin - Throwing windows version error and plugin is crashing
2. scalapbc compiler tool - Class files generated are throwing error in the solution. "Any trait can be mixed with"
3. protoc - **Finally I have used protoc to encode proto message to class file. Included it in jar and put in on databricks cluster**

Now, when I am trying to decode this message using sparksql-scalapb. Its throwing following error:

**Unable to find encoder for type X.Protobufs.MessageBuffer.SMSBuffer. An implicit Encoder[X.Protobufs.MessageBuffer.SMSBuffer] is needed to store X.Protobufs.MessageBuffer.SMSBuffer instances in a Dataset. Primitive types (Int, String, etc) and Product types (case classes) are supported by importing spark.implicits._  Support for serializing other types will be added in future releases._**

Below code, I am using for decoding:

import java.io.{ByteArrayInputStream, ByteArrayOutputStream, ObjectInputStream, ObjectOutputStream}

  def serialise(value: Any): Array[Byte] = {
    val stream: ByteArrayOutputStream = new ByteArrayOutputStream()
    val oos = new ObjectOutputStream(stream)
    oos.writeObject(value)
    oos.close()
    stream.toByteArray
  }
  
eventhubs.select($"value").map(row => SMSBuffer.parseFrom(serialise(row(0))))


Not sure where I am making the mistake
## Description

When serializing a protobuffer with a scalar-valued wrapper type to JSON, the `Printer` utility loses the config parameter `formattingLongAsNumber` as it is statically set to false. Which means that the only way to format longs as numbers is to write custom writer functions for wrapper types, which already exists. 

## Minimal example 
### testMessage.proto
```
syntax = 'proto3';
import "google/protobuf/wrappers.proto";

message TestMessage {
    google.protobuf.Int64Value someLong = 1;
}
```
### Test.scala
```
import scalapb.json4s.Printer
object Test {
  def main(args: Array[String]): Unit = {
    val printer = new Printer().formattingLongAsNumber
    val msg = TestMessage().withSomeLong(123456)
    println(printer.toJson(msg))
  }
}
```

## Expected Output
`JObject(List((someLong,JInt(123456))))`

## Actual Output
`JObject(List((someLong,JString(123456))))`


## Comments
It seems to me `JsonFormat.scala:446:primitiveWrapperWriter` could use `printer.config.formattingLongAsNumber` directly instead of always using `false`.

I would gladly make a PR with the change and run the tests if there's no obvious reason why it should be like this.

Thank you guys for a very nice job!












Upon using ScalaPB plugin for Vertx, plugin should be able to generate stubs that use Vertx Async Handlers in addition to the Response object.

For example: 
https://github.com/vert-x3/vertx-examples/blob/master/grpc-examples/src/main/java/io/vertx/example/grpc/pingpong/Client.java

Currently the stub returns `scala.concurrent.Future[_<ResponseObject>]`
`override def method(request): scala.concurrent.Future[ResponseObject]`

**Example:**
```
    override def calcSum(request: _root_.com.example.sum.SumRequest): scala.concurrent.Future[_root_.com.example.sum.SumResponse] = {
      _root_.scalapb.grpc.ClientCalls.asyncUnaryCall(channel, METHOD_CALC_SUM, options, request)
    }
```

Expected: 
`override def method(requestObject, io.vertx.core.Future<ResponseObject>)`

**Example in Java**
```
    public void unaryCall(io.vertx.example.grpc.Messages.SimpleRequest request,
        io.vertx.core.Future<io.vertx.example.grpc.Messages.SimpleResponse> response) {
      asyncUnimplementedUnaryCall(getUnaryCallMethod(), PingPongServiceGrpc.toObserver(response.completer()));
    }
```
Can we also have scala tutorial like
https://developers.google.com/protocol-buffers/docs/javatutorial

![scalapb](https://svgshare.com/i/7pF.svg)

Tried another SVG approach.
Scala descriptors are not generated for services, and as a result it is impossible to inspect in Scala methods and options. See https://stackoverflow.com/questions/48029470/unknown-fields-in-proto-generated-by-scalapb