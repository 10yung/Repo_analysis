When a test file path includes non-ascii characters, rake test task ```Rake::TestTask``` fails with a message

> File does not exist: [test_target_file_name]

It seems the task can't find a file with non-ascii path on Windows.

---

Summary page including a procedure for reproducing
https://github.com/masa-kunikata/rake_test_task_non_ascii_path
Rails version `4.2.7.1`

``` 
bundle exec rake test test/somewhere/file.rb -t
** Invoke test (first_time)
** Execute test
** Invoke test:single (first_time)
** Execute test:single
Running via Spring preloader in process 65713

invalid option: -t

minitest options:
    -h, --help                       Display this help.
        --no-plugins                 Bypass minitest plugin auto-loading (or set $MT_NO_PLUGINS).
    -s, --seed SEED                  Sets random seed. Also via env. Eg: SEED=n rake
    -v, --verbose                    Verbose. Show progress processing files.
    -n, --name PATTERN               Filter run on /regexp/ or string.
    -e, --exclude PATTERN            Exclude /regexp/ or string from run.

Known extensions: pride
    -p, --pride                      Pride. Show your testing pride!
```

Hello! First off I want to apologize, I'm not a ruby whiz but I'll try to document this the best I can.

I ran into the following error when trying to build a project after a minor code change.
(whitespace padding trimmed) 
```
NameError: uninitialized constant Shoulda::InstanceMethods
     const_missing at org/jruby/RubyModule.java:3372
  <class:TestCase> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda/integrations/test_unit.rb:14
     <module:Unit> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda/integrations/test_unit.rb:13
     <module:Test> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda/integrations/test_unit.rb:12
            <main> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda/integrations/test_unit.rb:11
           require at org/jruby/RubyKernel.java:956
            <main> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda.rb:1
           require at org/jruby/RubyKernel.java:956
            <main> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/shoulda-2.11.3/lib/shoulda.rb:8
           require at org/jruby/RubyKernel.java:956
  block in /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/rake-12.3.3/lib/rake/rake_test_loader.rb at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/rake-12.3.3/lib/rake/rake_test_loader.rb:17
            select at org/jruby/RubyArray.java:2566
            <main> at /usr/share/rvm/gems/jruby-9.1.16.0@PROJECT_NAME/gems/rake-12.3.3/lib/rake/rake_test_loader.rb:5
```
The code change was in a different section of the repository and not related, so I immediately assumed it was breakage caused by a dependency resolution error. I pulled up the logs for a previous successful build and compared, and found the only difference was in `rake`
```
$ diff success.deps failure.deps

< Using rake 12.3.2
---
> Fetching rake 12.3.3
> Installing rake 12.3.3
```
```
$ cat failure.deps

Resolving dependencies......
Fetching rake 12.3.3
Installing rake 12.3.3
...
( other unchanged libraries )
...
Fetching shoulda 2.11.3
Installing shoulda 2.11.3
Fetching shoulda-context 1.2.2
Installing shoulda-context 1.2.2
Fetching shoulda-matchers 4.0.1
Installing shoulda-matchers 4.0.1
```
My gemfile calls `gemspec`, my `<project>.gemspec` has these relevant pins:
```
Gem::Specification.new do |s|
<...>
  s.add_development_dependency "rake"

  # Can unpin after upgrading to JRuby 9.2.+
  s.add_development_dependency "shoulda-context", "~>1.2.2"
  s.add_development_dependency "shoulda-matchers", "~>4.0.1"
<...>
end
```

I was able to resolve the error and build successfully by pinning:
```
  s.add_development_dependency "rake", "12.3.2"
```

I'm cross-posting here and on [Shoulda](https://github.com/thoughtbot/shoulda) with all the relevant info in the hopes that the root cause of the bug can be identified and fixed in future versions. Let me know if there's any other info I should provide, such as a simple PoC to replicate the error.
Hi, I'm a fan of Rake and love how it helps to ensure my Ruby projects build more reliably on different platforms!

One thing I am curious about with Rake is how to write tasks as soft assertions. For example, what syntax could I use so that a task tree called `:lint` with several child linter shell commands, allows the full linter suite to run in the event of any error codes, and only reports the error code at the very end of the `:lint` execution?
```
task(:foo) { }
rake foo[wtf,this,should,not,work]
```

... on top of that the `args` argument that is returned to the block does not know about the extra arguments, so I can't even add my own argumenterror if I wanted to

I can make a PR to fix this, just want consensus that that is desired behavior
I need before and after hooks for all rake tasks. 

```
task :my_before_hook, [:name] => :environment do |_t, args|
  puts "Rake task #{args[:name]} started"
end

task :my_after_hook, [:name] => :environment do |_t, args|
  puts "Rake task #{args[:name]} finished"
end

task :my_test_task  => :environment do
  puts '--------- This is test task'
end

Rake.application.tasks.each do |tsk|
  next if [Rake::Task['my_before_hook'],
           Rake::Task['my_after_hook']].include?(tsk)

  tsk.enhance ['my_before_hook'] # I can't send any params with such code

  tsk.enhance do
    Rake::Task['my_after_hook'].invoke(tsk.name)
  end
end
```
Is there any way to send params to prerequisite? 
It's a known fact, that ruby function defined in a `namespace` will be defined in a global scope rather than inside of a hermetized context. So ruby function defined in one `namespace` will be visible in another and it may be unintentionally overridden. 

It would be nice if `namespace` could be a context for ruby functions as well as rake tasks.
Given a Rakefile

```
multitask :default => [:a, :b, :c, :d, :e]

task :a => ['target']
task :b => ['target']
task :c => ['target']
task :d => ['target']
task :e => ['target']

rule(/^target$/ => [ 'source' ]) do |t|
    p "#{t.name} => #{t.source}"
    p t.actions
end

file 'source'
```

the target may get executed multiple times like this

```
$ ruby --version
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-musl]
$ rake --version
rake, version 12.3.1
$ rake --trace --rules
** Invoke default (first_time)
** Invoke a (first_time)
Attempting Rule target => source
** Invoke b (first_time)
Attempting Rule target => source
** Invoke c (first_time)
Attempting Rule target => source
** Invoke d (first_time)
Attempting Rule target => source
(target => source ... EXIST)
** Invoke e (first_time)
Attempting Rule target => source
(target => source ... EXIST)
(target => source ... EXIST)
** Invoke target (first_time)
(target => source ... EXIST)
** Invoke source (first_time)
(target => source ... EXIST)
** Execute source
** Execute target
"target => source"
[#<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>]
"target => source"
[#<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>]
"target => source"
[#<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>]
"target => source"
[#<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>]
"target => source"
[#<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>, #<Proc:0x000055e092b971c0@/repo/Rakefile:10>]
** Execute d
** Invoke target 
** Execute b
** Invoke target 
** Execute a
** Invoke target 
** Execute c
** Invoke target 
** Execute e
** Execute default
```

The results differ between runs. It seems to happen more often with debug output.

The same action block gets added multiple times to the same task.
When aborting `rake` with Ctrl+C, it outputs `rake aborted!` then dumps a long backtrace. This seems unnecessary, as aborting isn't really an unexpected outcome of pressing Ctrl+C (or sending an INT signal).

I'd like to propose catching the `Interrupt` exception and exiting cleanly (with an exit code of 1). We can still print the backtrace if the `--trace` option is used.

I can submit a pull request, if this seems reasonable.
I have a use-case in which I need to run a task if and only if at least one of its prerequisite tasks either (1) currently needs to run or (2) needed to run at the time the prerequisite task was defined.  Here are some attempts at a `Rake::Task` subclass:

```ruby
class MyTask < Rake::Task
  def needed?
    prerequisite_tasks.any?(&:needed?)
  end
end
```

This approach does not work, since at the time `MyTask#needed?` is called, prerequisite tasks may have run and therefore return `false` for `#needed?`.

```ruby
class MyTask < Rake::Task
  def needed?
    prerequisite_tasks.any? { |p| p.needed? or p.already_invoked }
  end
end
```

This also doesn't work, since `#already_invoked` can return `true` [even if the task's `#execute` method was never called]:

```ruby
          @already_invoked = true


          invoke_prerequisites(task_args, new_chain)
          execute(task_args) if needed?
```

What ended up working was:

```ruby
class MyTask < Rake::Task
  def initialize(*)
    @needed = false
    super
  end
  
  def enhance(*)
    super.tap { @needed |= prerequisite_tasks.any?(&:needed?) }
  end

  def needed?
    @needed
  end
end
```

But that just feels... wrong.  Is there something I'm missing here?  I'd be more than happy to open a PR implementing what I'm looking for (maybe an `#already_executed` method?) if this functionality doesn't already exist.

Thanks!