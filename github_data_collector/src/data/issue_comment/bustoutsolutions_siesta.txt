- SiestaUI library product/target added
- Copy Collection extension into SeistaUI source, fixing an "inaccessable due to 'internal' protection level" error while building
      My app needs to monitor the network connection to an API. After enough errors accumulate, It stops making normal requests and lazily pings the API with a static URL as follows:

     let userRequest = VAPI.sharedInstance.resource("").load(). // Base url is a health check for the api.

When an adequate number of successful pings has occurred, the app goes back to normal operation. During testing I can inject errors into the API response and clear them as needed. For every error except 404, the system works as expected. With 404, the ping keeps getting 404 responses from the load() even after the network response has gone back to a normal 200.

As the error clears the load() returns 1 good response and then resumes returning 404. Using URLSession I get a 200 for the success. With Alamofire, the success is a 304. A parallel direct URLSession request as follows:

// Test code
            let url = URL.init(string: VAPI.VAPIBaseURL)
            let dataTask = self.defaultSession.dataTask(with: url!) { [weak self] data, response, error in
              // 5
              if error != nil {
                print(error?.localizedDescription)
              } else if let data = data,
                        let response = response as? HTTPURLResponse {
                    print("URLSession Response =====> ", response.statusCode)
              }
            }
            
            dataTask.resume()

Behaves as expected. I've attached a log file of the divergent responses.
 
[404 Clearing Log.docx](https://github.com/bustoutsolutions/siesta/files/3974562/404.Clearing.Log.docx)



Closes #298 

This may be a naive implementation, and I'm not sure it would work for multiple chains? But it's working for what I'm using it for.
> Chained requests currently do not support progress. If you are reading these words and want that feature, please file an issue on Github!

It happened! How big of a deal is this?
I'm opening this issue based on the topic discussed [here](https://github.com/bustoutsolutions/siesta/pull/255/files/8e7d99ab89a8b1d963000a2dc31ad17a26a425a3#r273426291)

**Summary**

When, at the app startup, a Disk Cached Resource get loaded from disk via `loadIfNeeded()` and the resource is still valid a call to `receiveDataNotModified()` just touch the resource updating the timestamp with the current date. This makes the Resource expiration time much longer then the expected.

**Resolution**

As you pointed out the issue looks to be [here](https://github.com/bustoutsolutions/siesta/pull/255/files/8e7d99ab89a8b1d963000a2dc31ad17a26a425a3#diff-8eff56d1fccbe1b8f0bc7bb0d9c29c91R389) where the call to `receiveDataNotModified()` touch the resource updating the timestamp.
I find myself needing a file-based cache for Siesta.  I see that there is a branch named `file-cache` in the repo.  It's my understanding that this is the beginning of a file caching system for Siesta, correct?  Is it a dead end with serious problems, or simply unfinished work?  If the latter, what still needs to be done?  If it fits the requirements I have for a file cache, I could work on it and make a PR, but I'd like to know more about how you envision it working @pcantrell, and what things need to happen before it is ready to be used.  Let me know!
I am trying add a content transformer to the parsing phase of the Siesta pipeline using the following:

    self.service.configure("**") { [weak self] in // all endpoints
            guard let strongSelf = self else {
                return
            }
            
            $0.pipeline[.parsing].add(TextResponseTransformer(), contentTypes: ["*â€‹/xml"])

            /*  other configuration code */
    }

However, when a network response with the content type `application/xml; charset=utf-8` comes in, the content type is not matching to the regex that Siesta has generated in the `add` call.  I have written the following playground code, which I believe replicates what Siesta is doing when it looks for a matching content type:

    import UIKit

	var str = "application/xml; charset=utf-8"

	let regex = try! NSRegularExpression(pattern: "^[^/+]+\\/xml($|;)")
	print(regex.description)
	let fullRange = NSRange(location: 0, length: (str as NSString).length)

	let match = regex.firstMatch(in: str, options: [], range: fullRange)

As far as I can tell, this should replicate what Siesta does in the file `Regex+Siesta.swift`in its extension `NSRegularExpression.matches()`.  However, the above playground code gets a match while Siesta does not. If I change the pipeline transformer add to:

    $0.pipeline[.parsing].add(TextResponseTransformer(), contentTypes: ["application/xml"])

It works as expected.  Why won't the pattern `*/xml` work?  It seems like it should.

Thanks for the help with this!
I need to refresh same web service when tap the refresh button. But It's no any service call from refresh button ,
Refresh button is working ,  only one time.

Can you give me a solution for recall same urls?

Broken link: https://bustoutsolutions.github.io/siesta/api/Classes/RemoteImageView.html
I tried to get the Siesta tests running on my local machine, however, Carthage couldn't compile Nocilla for tvOS.  I got the following error message:

```
User defaults from command line:
    IDEDerivedDataPathOverride = /Users/woodj/Library/Caches/org.carthage.CarthageKit/DerivedData/9.4.1_9F2000/Nocilla/bd7ec7caa0576f08c00bbbf993a9204f93be16e3

Build settings from command line:
    CARTHAGE = YES
    CODE_SIGN_IDENTITY = 
    CODE_SIGNING_REQUIRED = NO
    ONLY_ACTIVE_ARCH = NO
    SDKROOT = appletvsimulator11.4

xcodebuild: error: Unable to find a destination matching the provided destination specifier:
		{ platform:tvOS Simulator, id:ECE73D0A-02FC-4B82-A5CA-FF2A9EBD7C09 }

	Ineligible destinations for the "Nocilla tvOS" scheme:
		{ platform:tvOS, id:dvtdevice-DVTiOSDevicePlaceholder-appletvos:placeholder, name:Generic tvOS Device }
		{ platform:tvOS Simulator, id:dvtdevice-DVTiOSDeviceSimulatorPlaceholder-appletvsimulator:placeholder, name:Generic tvOS Simulator Device }
```

If I'm reading that right, it wants a tvOS simulator which is version 11.4, but since I'm not yet on Xcode 10, I only have access to devices up to 11.3.  Can we fix this so that tvOS can compile in Xcode 9?  If that's not the problem, how do I fix this?
