```csharp
public class ProxyHttpClientFactory : HttpClientFactory
{
    private string _proxyUrl;
    public ProxyHttpClientFactory(string proxyUrl)
    {
        _proxyUrl = proxyUrl;
    }
        
    protected override HttpMessageHandler CreateHandler(CreateHttpClientArgs args)
    {
        var proxy = new WebProxy(_proxyUrl, true) { UseDefaultCredentials = true };
        return new HttpClientHandler { UseProxy = true,  Proxy = proxy};
    }       
}
...

var service = new DriveService(new BaseClientService.Initializer()
{
    HttpClientInitializer = credential,
    ApplicationName = "Automation App",
    HttpClientFactory = new ProxyHttpClientFactory("http://192.168.30.99:8230")
});
```

I got a System.Net.Sockets.SocketException 10060 error.

We are experiencing a 403 error when a page tries to connect to a Google Sheet via service account. The same code and authentication works on a different server, so we suspect our proxy may be the problem.

The proxy is defined in the main web.config -- is there a way to set the proxy host specific to the library?

Thanks!

Stacktrace:
`System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.Net.WebException: The remote server returned an error: (403) Forbidden. at System.Net.HttpWebRequest.EndGetRequestStream(IAsyncResult asyncResult, TransportContext& context) at System.Net.Http.HttpClientHandler.GetRequestStreamCallback(IAsyncResult ar) --- End of inner exception stack trace --- at Google.Apis.Http.ConfigurableMessageHandler.<SendAsync>d__63.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.Requests.TokenRequestExtenstions.<ExecuteAsync>d__0.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.ServiceAccountCredential.<RequestAccessTokenAsync>d__23.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.TokenRefreshManager.<RefreshTokenAsync>d__12.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at Google.Apis.Auth.OAuth2.TokenRefreshManager.ResultWithUnwrappedExceptions[T](Task'1 task) at Google.Apis.Auth.OAuth2.TokenRefreshManager.<>c.<GetAccessTokenForRequestAsync>b__10_0(Task'1 task) at System.Threading.Tasks.ContinuationResultTaskFromResultTask'2.InnerInvoke() at System.Threading.Tasks.Task.Execute() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.TokenRefreshManager.<GetAccessTokenForRequestAsync>d__10.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.ServiceAccountCredential.<GetAccessTokenForRequestAsync>d__24.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Auth.OAuth2.ServiceCredential.<InterceptAsync>d__26.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd(Task task) at Google.Apis.Http.ConfigurableMessageHandler.<SendAsync>d__63.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess(Task task) at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task) at Google.Apis.Requests.ClientServiceRequest'1.<ExecuteUnparsedAsync>d__30.MoveNext() --- End of stack trace from previous location where exception was thrown --- at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw() at Google.Apis.Requests.ClientServiceRequest'1.Execute() at ASP.sis_main_sso_boarding_aspx.checkGoogleSheet(Object registerId) in _{omitted}_boarding.aspx:line 107
--`
Hello - I'm having some trouble updating S/MIME for a user via the .NET SDK for Gmail, every attempt results in a 400 Bad Request response. I'm attempting to implement this from PowerShell as part of my module, PSGSuite, but have not had much luck with this particular API. Issue tracking this in that repo: https://github.com/scrthq/PSGSuite/issues/57

Checking through the documentation and source code for various SDK languages as well as the REST API itself isn't too helpful, as it appears the .NET SDK is the only language that is expecting a `String` type for the `Pkcs12` property on the `SmimeInfo` body object, everything else expects the certificate bytes. Attempting to pass in the byte array works, but implicitly casts it to a single string, which results in a 400 Bad Request. I've also attempted to convert to both Base64 and URLSafeBase64, those fail with the same 400 error.

Should the `Pkcs12` property on the `SMimeInfo` object be expecting a `Byte[]` type instead of `String`? Is there something I'm doing wrong here?

![image](https://user-images.githubusercontent.com/12724445/71548909-a76e6400-297a-11ea-9a4e-8386fc9dbf3a.png)

I want to exchange the authorization code for an access token on a server side.
The web client sends authorization code. Which classes do I have to use. 

On this link: https://developers.google.com/identity/sign-in/web/server-side-flow#step_7_exchange_the_authorization_code_for_an_access_token there is only samples for Java and python.


I posted about this issue over on StackOverflow ([here](https://stackoverflow.com/questions/59311097/gmail-api-error-path-userid-messages-send-misses-a-userid-parameter-is-t). 

I'm running into an issue trying to send an email request from within a Unity3D C# script.
I am attempting to send email via the .NET API for GMail from within a Unity3D script. Unfortunately I'm having some trouble. The following code is called whenever I press the "R" key in-game.

    
```
    //MEMBERS INCLUDED AT TOP OF CLASS
    //TextAsset credFile;
    //static String AppName = "Redacted-Appname";
    //
    //List<string> Scopes = new List<string>() { "GMAIL_SEND" };


    
    if (Input.GetKeyDown(KeyCode.R))
        {
            UserCredential emailerCredential;

            //Create Credential
            using (MemoryStream credStream = new MemoryStream(credFile.bytes))
            {
                string credPath = "token.json";
                emailerCredential = GoogleWebAuthorizationBroker.AuthorizeAsync(
                    GoogleClientSecrets.Load(credStream).Secrets,
                    Scopes,
                    "myDoubleCheckedEmailAddress@redacted.com",
                    CancellationToken.None,
                    new FileDataStore(credPath, true)).Result;
            }

            //Create Service using credential
            GmailService service = new GmailService(new BaseClientService.Initializer()
            {
                HttpClientInitializer = emailerCredential,
                ApplicationName = AppName
            });

            //Create Mail Message
            MailMessage message = new MailMessage(
                "myDoubleCheckedEmailAddress@redacted.com",
                "DoubleCheckedTOEmailAddress@redacted.com",
                "Test Email Using GMail API",
                "This is a test of the emergency llama system.");
          
            //Create Gmail Message
            Message emailmsg = new Message();
            //ConvertMail Message to URL Encoded Base64 string and feed it into Gmail message
            emailmsg.Raw = HttpUtility.UrlEncode(Convert.ToBase64String(Encoding.ASCII.GetBytes(message.ToString())));
            string userId = "myDoubleCheckedEmailAddress@redacted.com";
            service.Users.Messages.Send(emailmsg, userId).Execute();
        }
```

As a result of this code, I end up with the following exception:

> ArgumentException: Path "{userId}/messages/send" misses a "userId"
> parameter UnityLoader.js:1043 Parameter name: {userId}/messages/send
> UnityLoader.js:1043   at
> Google.Apis.Requests.RequestBuilder.BuildRestPath () [0x00000] in
> <00000000000000000000000000000000>:0  UnityLoader.js:1043 --- End of
> stack trace from previous location where exception was thrown ---
> UnityLoader.js:1043   at
> System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw ()
> [0x00000] in <00000000000000000000000000000000>:0

I believe that the Request builder is building {userId} into the REST request instead of inserting the actual username. Looking for someone with more experience to confirm/deny this. Is this a bug, or am I doing it wrong?

I got this exception on EnvironmentsResource.list() method. **Newtonsoft.Json.JsonSerializationException: Error converting value 10/8/2019 7:57:47 AM to type 'Google.Apis.TagManager.v2.Data.Timestamp'**

**My method:** 
public Environment GetStagingEnvironment()
        {
            var envResponse = environmentsResource.List(ConfigurationManager.AppSettings["GTMApiURL"]).Execute();
            return envResponse.Environment.SingleOrDefault(c => c.Name == "Staging");
        }
**Google.Apis.TagManager.v2.Data.Environment Class**
//
    // Summary:
    //     Represents a Google Tag Manager Environment. Note that a user can create, delete
    //     and update environments of type USER, but can only update the enable_debug and
    //     url fields of environments of other types.
    public class Environment : IDirectResponseSchema
    {
        public Environment();
        //
        // Summary:
        //     Default preview page url for the environment.
        [JsonProperty("url")]
        public virtual string Url { get; set; }
        //
        // Summary:
        //     The type of this environment.
        [JsonProperty("type")]
        public virtual string Type { get; set; }
        //
        // Summary:
        //     Auto generated link to the tag manager UI
        [JsonProperty("tagManagerUrl")]
        public virtual string TagManagerUrl { get; set; }
        //
        // Summary:
        //     GTM Environment's API relative path.
        [JsonProperty("path")]
        public virtual string Path { get; set; }
        //
        // Summary:
        //     The environment display name. Can be set or changed only on USER type environments.
        [JsonProperty("name")]
        public virtual string Name { get; set; }
        //
        // Summary:
        //     The fingerprint of the GTM environment as computed at storage time. This value
        //     is recomputed whenever the environment is modified.
        [JsonProperty("fingerprint")]
        public virtual string Fingerprint { get; set; }
        //
        // Summary:
        //     Represents a link to a quick preview of a workspace.
        [JsonProperty("workspaceId")]
        public virtual string WorkspaceId { get; set; }
        //
        // Summary:
        //     GTM Environment ID uniquely identifies the GTM Environment.
        [JsonProperty("environmentId")]
        public virtual string EnvironmentId { get; set; }
        //
        // Summary:
        //     The environment description. Can be set or changed only on USER type environments.
        [JsonProperty("description")]
        public virtual string Description { get; set; }
        //
        // Summary:
        //     Represents a link to a container version.
        [JsonProperty("containerVersionId")]
        public virtual string ContainerVersionId { get; set; }
        //
        // Summary:
        //     GTM Container ID.
        [JsonProperty("containerId")]
        public virtual string ContainerId { get; set; }
        //
        // Summary:
        //     The last update time-stamp for the authorization code.
        [JsonProperty("authorizationTimestamp")]
        public virtual Timestamp AuthorizationTimestamp { get; set; }
        //
        // Summary:
        //     The environment authorization code.
        [JsonProperty("authorizationCode")]
        public virtual string AuthorizationCode { get; set; }
        //
        // Summary:
        //     GTM Account ID.
        [JsonProperty("accountId")]
        public virtual string AccountId { get; set; }
        //
        // Summary:
        //     Whether or not to enable debug by default for the environment.
        [JsonProperty("enableDebug")]
        public virtual bool? EnableDebug { get; set; }
        //
        // Summary:
        //     The ETag of the item.
        public virtual string ETag { get; set; }
    }


If one may want to use a custom HttpClienthandler (for ex. to use Http/2 or a proxy, like socks sharp),IHttpClientFactory has to be implemented.

The easiest way to do this would be to inherit from HttpClientFactory and override [CreateSimpleClientHandler](https://github.com/googleapis/google-api-dotnet-client/blob/c3a96760b45915794e8a7ddfaf3a48127da74f96/Src/Support/Google.Apis.Core/Http/HttpClientFactory.cs#L91). But currently it is not virtual and not overridable. I would ask you kindly to fix this issue.


This comes from https://github.com/googleapis/google-cloud-dotnet/issues/3406

Basically this would involve creating a file-watching (or possibly polling) credential implementation, so that if the service account file changes, we pick up on those changes automatically.
We should consult with other language teams before implementing, in order to come up with a consistent approach.



Using dotnet core version 3 (Preview 7) results in the error
```
System.Reflection.ReflectionTypeLoadException: 'Unable to load one or more of the requested types.
Method 'GetFallbackPolicyAsync' in type 'Google.Apis.Auth.AspNetCore.GoogleScopedPolicyProvider' from assembly 'Google.Apis.Auth.AspNetCore, Version=1.40.2.0, Culture=neutral, PublicKeyToken=4b01fa6e34db77ab' does not have an implementation.'
```
What I am trying to do is pull back blog posts first, and then I want to integrate with some other APIs.  I do have the latest Google.Apis libraries from NuGet.  It was working with 3.0 Preview 5, but ASP.NET core has a new `@code` that is replacing `@function` in razor pages.

The full trace is
```
   at System.Reflection.RuntimeModule.GetTypes(RuntimeModule module)
   at System.Reflection.RuntimeAssembly.get_DefinedTypes()
   at Microsoft.AspNetCore.Mvc.ApplicationParts.AssemblyPart.get_Types()
   at Microsoft.AspNetCore.Mvc.Controllers.ControllerFeatureProvider.PopulateFeature(IEnumerable`1 parts, ControllerFeature feature)
   at Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager.PopulateFeature[TFeature](TFeature feature)
   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetControllerTypes()
   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.GetDescriptors()
   at Microsoft.AspNetCore.Mvc.ApplicationModels.ControllerActionDescriptorProvider.OnProvidersExecuting(ActionDescriptorProviderContext context)
   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.UpdateCollection()
   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.Initialize()
   at Microsoft.AspNetCore.Mvc.Infrastructure.DefaultActionDescriptorCollectionProvider.GetChangeToken()
   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.<>c__DisplayClass11_0.<Subscribe>b__0()
   at Microsoft.Extensions.Primitives.ChangeToken.ChangeTokenRegistration`1..ctor(Func`1 changeTokenProducer, Action`1 changeTokenConsumer, TState state)
   at Microsoft.Extensions.Primitives.ChangeToken.OnChange(Func`1 changeTokenProducer, Action changeTokenConsumer)
   at Microsoft.AspNetCore.Mvc.Routing.ActionEndpointDataSourceBase.Subscribe()
   at Microsoft.AspNetCore.Mvc.RazorPages.Infrastructure.PageActionEndpointDataSource..ctor(IActionDescriptorCollectionProvider actions, ActionEndpointFactory endpointFactory)
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor, Boolean wrapExceptions)
   at System.Reflection.RuntimeConstructorInfo.Invoke(BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitConstructor(ConstructorCallSite constructorCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSiteMain(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitCache(ServiceCallSite callSite, RuntimeResolverContext context, ServiceProviderEngineScope serviceProviderEngine, RuntimeResolverLock lockType)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.VisitRootCache(ServiceCallSite singletonCallSite, RuntimeResolverContext context)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteVisitor`2.VisitCallSite(ServiceCallSite callSite, TArgument argument)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.CallSiteRuntimeResolver.Resolve(ServiceCallSite callSite, ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.DynamicServiceProviderEngine.<>c__DisplayClass1_0.<RealizeService>b__0(ServiceProviderEngineScope scope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType, ServiceProviderEngineScope serviceProviderEngineScope)
   at Microsoft.Extensions.DependencyInjection.ServiceLookup.ServiceProviderEngine.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProvider.GetService(Type serviceType)
   at Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetService[T](IServiceProvider provider)
   at Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.EnsureRazorPagesServices(IEndpointRouteBuilder endpoints)
   at Microsoft.AspNetCore.Builder.RazorPagesEndpointRouteBuilderExtensions.MapFallbackToPage(IEndpointRouteBuilder endpoints, String page)
```
I am trying to use google .net client from a server-side Blazor application but I cant get it to work. If I use GoogleWebAuthorizationBroker it works while running on local  but not when deployed to Azure or IIS.

The other alternative I tried is using GoogleAuthorizationCodeFlow but that is for ASP.NET MVC.

If anyone have some recommendation or sample on how to make this work with Server-Side Blazor Application it will be very helpful.

