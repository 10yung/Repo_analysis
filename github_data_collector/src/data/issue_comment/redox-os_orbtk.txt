# Context
I'm currently using OrbTk to build a simple GUI for a small tool I'm working on. In the process, I've been creating some simple widgets like a numeric input (text block with + and - buttons). 

# Problem description & Solution
There are not very many widgets currently available. I'm wondering if the maintainers are currently interested in new widget contributions from the community, such as that described above.

 Is the repo currently in a stable enough state for this to even be worthwhile? Is there any plan/desire to create a repo/library of community built widgets?

PS: I would normally have asked these questions on the chat server, but I have not yet been granted access ðŸ˜„ 
**Describe the bug**
As in title, no matter what font size I specify when creating new TextBlock, the outcoming font size does not vary.

**To Reproduce**
```rust
struct FooState {
    action: Option<FooAction>,
    messages_count: RefCell<usize>,
}

impl FooState {
    fn action(...) {...}

    fn push_msg(&self, ctx: &mut Context, message: String) {
        *self.messages_count.borrow_mut() += 1;
        let messages_stack = ctx.entity_of_child("messages")
            .expect("Failed to acquire entity of messages stack");

        let message_entity = TextBlock::create()
            .text(String16::from(message))
            .font_size(5.0)
            .selector(Selector::from("text-block")
                .id(format!("message_{}", *self.messages_count.borrow())))
            .horizontal_alignment("start")
            .vertical_alignment("start")
            .build(&mut ctx.build_context());

        ctx.append_child_entity_to(
            message_entity,
            messages_stack,
        )
    }
}

widget!(
    FooView<FooState> {
        started: bool
    }
);

impl Template for FooView {
    fn template(self, id: Entity, ctx: &mut BuildContext) -> Self {
        self.name("FooView")
            .child(
                Stack::create()
                    .orientation("vertical")
                    .selector(Selector::from("stack").id("messages"))
                    .build(ctx),
            )
            .build(ctx),
    }
}
```

Then call push_message from update function with different font_size. I've also tried with `append_child_to` without using `build` on `message_entity` and the effect is the same

**Expected behavior**
I expected to be able to change font_size in appended widgets.


**Desktop (please complete the following information):**
 - OS: Windows 10 Home
 - no browser
 - Version: 1903
 - latest branch `develop`  as for 18.01.2020

Hi,
first of all, thank you for a good work. I'm using orbtk to create an installer for another program for Windows. I would like to get all the configurations from user in one view and then send it to installation view.
Here is my sending view's state:
```rust
impl State for MainState {
    fn update(&mut self, _: &mut Registry, ctx: &mut Context) {
        if let Some(action) = self.action.take() {
            match action {
                MainAction::Install => {
                    // acquire all configuration
                    // switch views
                    if let Some(mut user_config) = ctx.try_child("user_config") {
                        user_config.set("visibility", Visibility::Collapsed);
                        user_config.set("enabled", false);
                    }
                    if let Some(mut installation_view) = ctx.try_child("installation_view") {
                        installation_view.set("visibility", Visibility::Visible);
                        installation_view.set("enabled", true);
                    }
                    
                    ctx.send_message(
                        "installation_view",
                        MessageBox::new(Config {
                            folder:             self.folder.clone(),
                            create_shortcut:    self.create_shortcut,
                            run_after_finished: self.run_after_finished,
                        }),
                    );
                },
            }
        };
    }
}
```
creation of receiving view:
```rust
impl Template for MainView {
    fn template(self, id: Entity, ctx: &mut BuildContext) -> Self {
        self.name("MainView")
            .child(
                Container::create()
                    .padding((30, 20, 20, 30))
                    .child(
                        InstallationView::create()
                            .selector(Selector::from("InstallationView").id("installation_view"))
                            .visibility(Visibility::Collapsed)
                            .build(ctx),
                    )
                    .build(ctx),
            )
    }
}
```
and receiving view's state implementation:
```rust
impl State for InstallationState {
    fn update(&mut self, _: &mut Registry, ctx: &mut Context) {
        if self.config.is_none() {
            return
        }
        // logic
    }

    fn receive_messages(
        &mut self,
        _: &mut Registry,
        _: &mut Context,
        messages: &[MessageBox],
    ) {
        messages.iter().for_each(|msg| {
            if let Ok(config) = msg.downcast_ref::<Config>() {
                self.config.replace(config.clone());
            }
        });
    }
}
```

I thought that `target_widget: &str` from `ctx.send_message` would be the value from selector, however I'm getting this message:

```
Context send_message: widget id installation_view not found.
```
Also I'm using branch `develop`.
Could you please point me how can I get it working? I haven't written rust alot yet and I'm just straying around.



# Context

My proposal is to create a **macro** that allows us to **bind** styles locally and globally to our widgets.

This is inspired by the **React Native** StyleSheet API

# Examples and MockUps

```rust
use orbtk::prelude::*;
use ui::button::styles::{Primary, Secondary}

fn main() {
  Application::new()
    .window(|ctx| {
        Window::create()
          .title("OrbTk - minimal example")
          .position((100.0, 100.0))
          .size(420.0, 730.0)
          .child(
          	TextBlock::create()
          		.text("OrbTk")
          		.bind_style(&mut Primary)
          		// .bind_style(&mut my_button_styles)
          		.build(ctx))
          .build(ctx)
    })
    .run();
}


let mut my_button_styles = style!(
    height: 32.0,
    min_width: 80.0,
    background: colors::LYNCH_COLOR,
    border_radius 2.0,
    border_width: 0.0,
    border_brush: "transparent",
    padding: (8.0, 0.0, 8.0, 0.0),
    foreground: colors::LINK_WATER_COLOR,
    font_size: fonts::FONT_SIZE_12,
    font: "Roboto Regular",
);
```

#### Aditional
I don't know if it would be a good idea to be able to create macros for different types of widgets

```rust
text_block!(
    text: "OrbTk",
    vertical_alignment: "center",
    horizontal_alignment: "center",
);
```

First, I am not an expert in `Rust` and I do not know how they plan to structure this project when supporting` android`, `ios` and `ubuntu touch` natively.

I think it would be good to separate the different platforms in crates, this is useful for people with little knowledge in `Rust` and who want to contribute to this project. :smile: I hope it helps. Also, I think it would be good to separate in **features** the crate of `orbtk-widgets` for conditional compilation

#### Posible solution

| Crate Name | Include by default | 
| ---------------- | ---------- |
| `orbtk-redox-os` | :heavy_check_mark:  Internal crate
| `orbtk-windows` | :heavy_check_mark:  Internal crate
| `orbtk-linux` |  :heavy_check_mark:  Internal crate
| `orbtk-shared` |  :heavy_check_mark:  Internal crate
| `orbtk-web` | :package:  External crate
| `orbtk-android` | :package:  External crate
| `orbtk-ios` | :package:  External crate
| `orbtk-ubuntu-touch` | :package:  External crate

When you change the size of the browser window, nothing happens. When the page is reloaded, the new sizes are applied.

How to fix it?

```
use orbtk::prelude::*;

fn main() {

    orbtk::initialize();

    Application::new()
        .window(|ctx| {
            Window::create()
                .title("Demo")
                .resizeable(true)
                .child(TextBlock::create()
                    .text("Hello world!")
                    .vertical_alignment("center")
                    .horizontal_alignment("center")
                    .build(ctx))
                .build(ctx)
        })
        .run();
}

```

![image](https://user-images.githubusercontent.com/15726637/72345210-2b974a00-36e4-11ea-8068-6e24103f6acc.png)

Reducing the size of the browser window

![image](https://user-images.githubusercontent.com/15726637/72345233-3baf2980-36e4-11ea-8c6d-f1621e4b4028.png)

Reloading page and increasing the size of the browser window

![image](https://user-images.githubusercontent.com/15726637/72345409-c7c15100-36e4-11ea-99b7-1c36228b4b0d.png)


# Context
I want to self define Window frame.

# Problem description & Solution
I have no idea.

# Examples and MockUps
Window::create()
    ......
    .frame(false)
    .build(ctx);

I just tried some of the examples, and I noticed that I was not able to tab through widgets (buttons, text boxes, slides, etc). Are there by any chance any plans for keyboard and general accessibility?
Add overlay widget to OrbTk. Details check #137.
Overlay widget should be used to draw its children on the top.

- [x] Absolute Layout
- [x] Overlay widget
- [ ] Access overlay widget from Context
- [ ] Add example