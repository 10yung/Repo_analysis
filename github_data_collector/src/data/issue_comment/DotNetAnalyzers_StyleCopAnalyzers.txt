IDE0001 cleanups (namespaces and `var`).

Why don't StyleCop have these rules?
**Version Used**: Visual Studio 2019 Version 16.5

This is probably a Roslyn bug.

The stack trace was truncated. Any tips on how to get a full one?

```
System.InvalidOperationException : This program location is thought to be unreachable.
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeconstructionVariable(TypeWithAnnotations declTypeWithAnnotations,SingleVariableDesignationSyntax designation,CSharpSyntaxNode syntax,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationVariablesForErrorRecovery(TypeWithAnnotations declTypeWithAnnotations,VariableDesignationSyntax node,CSharpSyntaxNode syntax,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindDeclarationExpressionAsError(DeclarationExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindLeftOfPotentialColorColorMemberAccess(ExpressionSyntax left,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMemberAccess(MemberAccessExpressionSyntax node,Boolean invoked,Boolean indexed,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindMethodGroup(ExpressionSyntax node,Boolean invoked,Boolean indexed,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindInvocationExpression(InvocationExpressionSyntax node,DiagnosticBag diagnostics)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpressionInternal(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.Binder.BindExpression(ExpressionSyntax node,DiagnosticBag diagnostics,Boolean invoked,Boolean indexed)
   at Microsoft.CodeAnalysis.CSharp.MemberSemanticModel.GetSpeculativelyBoundExpression(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,Binder& binder,ImmutableArray`1& crefSymbols)
   at Microsoft.CodeAnalysis.CSharp.SyntaxTreeSemanticModel.GetSpeculativelyBoundExpression(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption,Binder& binder,ImmutableArray`1& crefSymbols)
   at Microsoft.CodeAnalysis.CSharp.CSharpSemanticModel.GetSpeculativeSymbolInfo(Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.CSharp.CSharpExtensions.GetSpeculativeSymbolInfo(SemanticModel semanticModel,Int32 position,ExpressionSyntax expression,SpeculativeBindingOption bindingOption)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.TryReduceExtensionMethod(InvocationExpressionSyntax node,SemanticModel semanticModel,InvocationExpressionSyntax rewrittenNode,SimpleNameSyntax expressionName)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.SimplifyExtensionMethod(InvocationExpressionSyntax node,SemanticModel semanticModel,OptionSet optionSet,CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyNode[TNode](TNode node,SyntaxNode newNode,SyntaxNode parentNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.SimplifyExpression[TExpression](TExpression expression,SyntaxNode newNode,Func`5 simplifier)
   at Microsoft.CodeAnalysis.CSharp.Simplification.CSharpExtensionMethodReducer.Rewriter.VisitInvocationExpression(InvocationExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.InvocationExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.PrefixUnaryExpressionSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.VisitIfStatement(IfStatementSyntax node)
   at Microsoft.CodeAnalysis.CSharp.Syntax.IfStatementSyntax.Accept[TResult](CSharpSyntaxVisitor`1 visitor)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxRewriter.Visit(SyntaxNode node)
   at Microsoft.CodeAnalysis.CSharp.Simplification.AbstractCSharpReducer.AbstractReductionRewriter.VisitNodeOrToken(SyntaxNodeOrToken nodeOrToken,SemanticModel semanticModel,Boolean simplifyAllDescendants)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.<>c__DisplayClass10_1.<ReduceAsync>b__0[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsyncInternal[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Simplification.AbstractSimplificationService`3.ReduceAsync[TExpressionSyntax,TStatementSyntax,TCrefSyntax](<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Simplification.Simplifier.ReduceAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.CleanupDocumentAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessChangesAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.PostProcessAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.CodeActions.CodeAction.GetPreviewOperationsAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedAction.GetPreviewResultAsync(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Editor.Implementation.Suggestions.SuggestedActionWithNestedFlavors.<>c__DisplayClass11_0.<GetPreviewAsync>b__0(<Unknown Parameters>)
   at async Microsoft.CodeAnalysis.Extensions.IExtensionManagerExtensions.PerformFunctionAsync[T](<Unknown Parameters>)
```
I'm getting this build error when nullable reference types are enabled with the included test case:

```
1>CSC : warning AD0001: Analyzer 'StyleCop.Analyzers.ReadabilityRules.SA1100DoNotPrefixCallsWithBaseUnlessLocalImplementationExists' threw an exception of type 'System.InvalidOperationException' with message 'This program location is thought to be unreachable.'.
```

```csharp
namespace ClassLibrary1
{
    using System.IdentityModel.Tokens.Jwt;
    using System.Security.Claims;
    using Microsoft.IdentityModel.Tokens;

    public class AlgorithmValidator : JwtSecurityTokenHandler
    {
        public override ClaimsPrincipal ValidateToken(
            string token,
            TokenValidationParameters validationParameters,
            out SecurityToken validatedToken)
        {
            var principle = base.ValidateToken(token, validationParameters, out var temp);
            validatedToken = temp;
            return principle;
        }
    }
}
```

```xml
<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.AspNetCore.Authentication.JwtBearer" Version="3.1.0" />
    <PackageReference Include="StyleCop.Analyzers" Version="1.2.0-beta.113" IncludeAssets="Analyzers;Build" PrivateAssets="All" />
  </ItemGroup>
</Project>
```

I am able to get rid of the warning either by removing the local variable `temp`  or by turning off nullable reference types.


the code fix for SA1027 reads "Replace tabs with spaces" however if useTabs is true, then this code fix actually replaces spaces with tabs.
Spawned from https://github.com/DotNetAnalyzers/StyleCopAnalyzers/issues/2934#event-2912793531

**Overview**
This is a proposal to allow control over how much StyleCop cares about documentation on internal interfaces. 

**Background**
According to the above issue, `documentInterfaces=true` takes precedence over `documentInternalElements = false`. This means that if you want StyleCop to check documentation on public interfaces, it will also check documentation on internal interfaces. There is currently no way to have StyleCop check documentation on public interfaces while ignoring internal interfaces.

**Rationale**
We have many external interfaces and each must have documentation that adheres to all the StyleCop rules. However, for internal interfaces (of which we also have many), we don't care if any of the documentation elements are missing.

**Suggested Solution**
I propose that the `documentInterfaces` item in `stylecop.json` be enhanced to support the following values:

- `"all"` - (default value) Indicates that documentation on internal as well as public interfaces should be checked.
- `"external"` - Indicates that documentation should only be checked on interfaces if they are externally visible.
- `"none"` - Indicates that documentation should not be checked on interfaces (equivalent to `"documentInterfaces": false` in current behaviour).
- `true` - For backward compatibility. Equivalent to `"all"`
- `false` - For backward compatibility. Equivalent to `"none"`

**Example:**
```
    "documentationRules": {
      "documentInterfaces": "external",
      "documentExposedElements": true,
      "documentInternalElements": false
    }
```
Migrated from https://github.com/StyleCop/StyleCop/issues/96

In our codebase we've often seen documentation header text like this:

`/// <summary>Specifies attributes of a widget message..</summary>`

Notice that the text ends with two periods instead of one.

Would be great if there was a StyleCop rule to find this type of thing.

Note: The rule should **not** trigger in the case of 3 consecutive periods (i.e. an ellipsis).

The rule should find any 2 consecutive periods - not just ones at the end of the text. This makes sense since the text often contains multiple sentences, and we want to find any of them which end with an accidental double-period.

I stumbled upon an interesting warning today while coding an exception unit test for one of my extensions.

The following code triggers a SA1009 warning before the `!` operator:

```csharp
await default(IAsyncEnumerable<object>)!.ToImmutableListAsync()
```

<img width="351" alt="stylecop-spacingissue" src="https://user-images.githubusercontent.com/461579/71521373-46be2900-289f-11ea-98ea-c7e75cf52ecb.png">

I believe this is incorrect, and no spaces should be added in this case.

- **Package version**: 1.1.118
- **TargetFramework**: netstandard2.1
- Nullable reference types enabled

This looks similar to #3064 
I have a project (C#, net472, new "sdk" csproj format) which does not generate any documentation XML output. Because of this, I get `SA0001:XmlCommentAnalysisDisabled`, as expected.

However, what I don't expect (and what I'm seeing) is that I still have a bunch of SA documentation warnings (1600, 1604, 1611, 1623, 1629, etc) reported by StyleCopAnalyzers.

According to the [docs for SA0001](https://github.com/DotNetAnalyzers/StyleCopAnalyzers/blob/master/documentation/SA0001.md):
> All diagnostics of XML documentation comments has been disabled

however, this is clearly not the case if 1600 and friends are being reported.

I have a bunch of projects which are plugins/extensions for another system, so much of the stuff needs to be public, but it's not exposed as a public API, so I don't want all these rules checked on all those projects.

Sure, I could use a ruleset file to disable the rules, but based on the docs for SA0001, I shouldn't have to do this.

Am I missing something here?
When the `documentInternalElements` option is set to false, SA1623:PropertySummaryDocumentationMustMatchAccessors and SA1629:DocumentationTextMustEndWithAPeriod should never be reported for those non-public members which are exempted from the documentation requirement. 

Repro:
```csharp
internal class FalsePositives
{
    /// <summary>I will generate SA1623 and SA1629</summary>
    public long Foo => 0;

    /// <summary>I will generate SA1629</summary>
    public void M() { }

    /// <summary>No warnings - as expected</summary>
    public event EventHandler MyEvent;
}

```
[Sandcastle](https://ewsoftware.github.io/XMLCommentsGuide/html/a8ade450-e201-401a-923d-1a1169ef7828.htm) (and I believe NDoc) support the `<exclude/>` documentation element, which makes it so that the documentation for that member will be excluded from the generated documentation.

One could argue that if this tag is present, StyleCop should not report any documentation rule violations for the corresponding member.

Example:
```
/// <exclude/>
public class Class1 { }
```

The above generates SA1604: Element documentation should have a summary.

Tested with 1.2.0-beta.113

Note: this WAS fixed in legacy StyleCop (See https://github.com/StyleCop/StyleCop/commit/f40a87b0ddc3d1e19ae33dae9541d8d418d7ecff)