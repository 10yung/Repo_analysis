i have checked the package.json but i am unable to dev script in it 
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/clintonwoo/hackernews-react-graphql/network/alerts).

</details>
I have run this command  = npm run build && npm start

But some how npm run build command not working for me. 
Node version : v8.11.4
Npm version : 5.6.0

Freeze : 

Compiled successfully.

 ┌ /
 ├ /_app
 ├ /_document
 ├ /_error
 ├ /active
 ├ /ask
 ├ /best
 ├ /bestcomments
 ├ /bookmarklet
 ├ /changepw
 ├ /dmca
 ├ /favorites
 ├ /forgot
 ├ /formatdoc
 ├ /front
 ├ /hidden
 ├ /item
 ├ /jobs
 ├ /leaders
 ├ /lists
 ├ /login
 ├ /newcomments
 ├ /newest
 ├ /newpoll
 ├ /newsfaq
 ├ /newsguidelines
 ├ /newswelcome
 ├ /noobcomments
 ├ /noobstories
 ├ /reply
 ├ /security
 ├ /show
 ├ /showhn
 ├ /shownew
 ├ /submit
 ├ /submitted
 ├ /threads
 ├ /upvoted
 └ /user


it will hang when trying to build docker container. it stops at step "RUN npm run build".  I did some debug, it looks like hangs at "next build" command. any suggestion where to look next?

**command -**
docker build --tag 'clintonwoo/hackernews-react-graphql:latest' --rm .

**docker freeze at here -**

Step 7/17 : RUN npm run build
 ---> Running in daef81749112

> hackernews@0.9.0 build /usr/src/app
> npm run clean && tsc --project tsconfig.server.json && next build


> hackernews@0.9.0 clean /usr/src/app
> rm -rf build/app && rm -rf dist && rm -rf src/.next

Creating an optimized production build ...

> Using external babel configuration
> Location: "/usr/src/app/babel.config.js"
Browserslist: caniuse-lite is outdated. Please run next command `npm update`
Compiled successfully.


 ┌ /
 ├ /_app
 ├ /_document
 ├ /_error
 ├ /active
 ├ /ask
 ├ /best
 ├ /bestcomments
 ├ /bookmarklet
 ├ /changepw
 ├ /dmca
 ├ /favorites
 ├ /forgot
 ├ /formatdoc
 ├ /front
 ├ /hidden
 ├ /item
 ├ /jobs
 ├ /leaders
 ├ /lists
 ├ /login
 ├ /newcomments
 ├ /newest
 ├ /newpoll
 ├ /newsfaq
 ├ /newsguidelines
 ├ /newswelcome
 ├ /noobcomments
 ├ /noobstories
 ├ /reply
 ├ /security
 ├ /show
 ├ /showhn
 ├ /shownew
 ├ /submit
 ├ /submitted
 ├ /threads
 ├ /upvoted
 └ /user

I would suggest to remove inline styling. It would make the code much more cleaner.
I would suggest to make presentational components functional instead of class based. Functional components are not “dressed up” with any of the capabilities of React component objects and hence there may be performance advantages.
It would be great to have this project as video series or as step by step tutorial where you learn bit by bit and have a functional product in the end.  
Hi, @clintonwoo,
Thanks for your awesome React app🎉

This app has two errors on executing `npm test`. I fixed them. If you like these changes, please merge this Pull Request😀

## 1. Jest setting is missing
I ran `npm test` and got the following message.

```
SecurityError: localStorage is not available for opaque origins

Test Suites: 42 failed, 42 total
Tests:       0 total
Snapshots:   0 total
Time:        1.347s, estimated 4s
Ran all test suites.
npm ERR! Test failed.  See above for more details.
```

I think that Jest settings are missing. I added `"testEnvironment": "node"` parameter to `package.json`.

## 2. fail to initialize Apollo for testing
After setting `testEnvironment`, I run `npm test` again and got the following error message. `this.props.serverState.apollo.data` isn't initialized.

```
TypeError: Cannot read property 'data' of undefined

Test Suites: 26 failed, 16 passed, 42 total
Tests:       26 failed, 43 passed, 69 total
Snapshots:   9 passed, 9 total
Time:        4.134s
Ran all test suites.
npm ERR! Test failed.  See above for more details.
```

I'm not sure is this a coding mistake? I switched to `{}` from `this.props.serverState.apollo.data`. I don't know if this chage is a correct fix.

## finally

After fixing them, all test passed!
```
Test Suites: 42 passed, 42 total
Tests:       69 passed, 69 total
Snapshots:   9 passed, 9 total
Time:        3.088s
Ran all test suites.
```

I wanted to say congrats for the nice project! 💪 

I was thinking it would be nice to have a rendered UI as close as possible as the original one :)

Some time ago I started a css/html clone of the Hacker News UI just for fun, I was trying to reproduce the same _pixel perfect_ result on the browser but with better markup (bleah those tables  🐙 )  and with flexbox :)

Do you think you can improve it?
Or either, would you accept a PR with some code introducing a 1:1 result but with better markup? 

Looking at #6, I decided to go ahead and try  [sw-precache](https://github.com/GoogleChromeLabs/sw-precache). 

The plugin doesn't actually cache anything while webpack in compile-time, but is caching runtime and returning cached assets when the app is offline.

The service worker get's registered only in the index route, but should consider if it would be better to do globally.

I also added `NODE_ENV=production` flag for the `build` step, as otherwise the next app was not build with production mode for me locally. I tested this with `npm start` afterwards, and it included `webpack-hmr` requests.