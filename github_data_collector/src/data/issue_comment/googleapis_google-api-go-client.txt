Hi! 

We're trying to refresh google sheets in real time and it's proving difficult. 

The [push notifications ](https://developers.google.com/drive/api/v3/push)(webhooks) of the google drive API are only sent as frequently as every 3 min (they are batched after the first update), which isn't frequent enough for real time updates. 

Retrieving the ```modifiedTime``` for a spreadsheet using the google drive API seems to hit the same data in the background, which is only refreshed every ~3min.

Using the google sheets API is not an option since the modified time information is no longer supported in the latest version (v4). 

What API are we supposed to use if we want real time update information for spreadsheets?

Thanks in advance,
Esther
To reproduce: 

```golang
// importing "google.golang.org/api/run/v1"

runService, err := run.NewService(ctx)
// handle err
_, err = runService.Projects.Locations.List("projects/<my-project-id>").Do()
fmt.Println(err)
```

Expected: nil

Got: 

```
googleapi: got HTTP response code 404 with body: <!DOCTYPE html>
<html lang=en>
  <meta charset=utf-8>
  <meta name=viewport content="initial-scale=1, minimum-scale=1, width=device-width">
  <title>Error 404 (Not Found)!!1</title>
  ...
```

Hacking around the codebase, if I change the URL version from `apis/serving.knative.dev/v1` to just `v1` , then I get the response correctly. 
The experimental APIs relied upon by this option were deleted in https://github.com/grpc/grpc-go/pull/3301

Fixes #441 

We are using this library and seeing these errors:

../google.golang.org/api/option/option.go:153:14: undefined: grpc.RoundRobin
../google.golang.org/api/option/option.go:154:42: undefined: grpc.WithBalancer

Sounds like gRPC removed these legacy APIs: https://github.com/grpc/grpc-go/commit/336cf8d76145dc5ebd517fd9c19e14c6822450b3
It appears that neither `oauth2/v1` nor `oauth2/v2` implement a client for `https://oauth2.googleapis.com/token`. Would it be possible to add this api interface to the appropriate package?
We have a binary that talks with multiple external services, and only communication with some services needs to be proxied. Thus we can not specify the proxy as an environment variable (as suggested in #221) since that will force all traffic to go through the proxy.

I'm wondering if it is okay to have a `WithProxy(proxyURL string)` `ClientOption` so that we can selectively configure proxies when creating clients for certain services.

Does this make sense?
Attempting to set Slides API StartIndex to 0 returns the following error:

`googleapi: Error 400: Invalid requests[2].updateTextStyle: The textRange startIndex must be specified for range type FIXED_RANGE, badRequest`

This happens while attempting the following which is a port from the Python example here:

https://www.youtube.com/watch?v=_O2aUCJyCoQ

```go
	reqs = []*slides.Request{
		{ // change word 1 in para 1 ("Bold") to bold
			UpdateTextStyle: &slides.UpdateTextStyleRequest{
				ObjectId: textboxID,
				Style: &slides.TextStyle{
					Bold: true,
				},
				TextRange: &slides.Range{
					Type:       "FIXED_RANGE",
					StartIndex: int64(0),
					EndIndex:   int64(4),
				},
				Fields: "bold",
			},
		},
```

The reason this happens is that in the type `Range`, the comment indicates this is required for `FIXED_RANGE` type but the JSON tag is set to `omitempty` so that zero values are omitted.

```go
// Range: Specifies a contiguous range of an indexed collection, such as
// characters in
// text.
type Range struct {
	// EndIndex: The optional zero-based index of the end of the
	// collection.
	// Required for `FIXED_RANGE` ranges.
	EndIndex int64 `json:"endIndex,omitempty"`

	// StartIndex: The optional zero-based index of the beginning of the
	// collection.
	// Required for `FIXED_RANGE` and `FROM_START_INDEX` ranges.
	StartIndex int64 `json:"startIndex,omitempty"`
```

Another issue is that some range types **require** these indexes to **not** be present. I was able to remove `omitempty` in a fork and received the following error:

`googleapi: Error 400: Invalid requests[5].createParagraphBullets: The textRange startIndex must not be specified for range type ALL, badRequest`

Seems like separate Range structs may be necessary.
**What I did:**
I tried to create a VPC in custom mode with the following piece of code:

```Go
func CreateVPC(ctx context.Context, ns *compute.NetworksService, name string) (*compute.Operation, error) {
	net := &compute.Network{
		Name:                  name,
	}
	return ns.Insert(projectID, net).Context(ctx).Do()
}
```

**What I expected:**
I expected to see a new VPC created with custom mode, since the default value of `AutoCreateSubnetworks` field in [`compute.Network`](https://godoc.org/google.golang.org/api/compute/v1#Network) is _false_.

**What I saw instead:**
I saw a new VPC created in _legacy_ mode rather than _custom_ mode. 

**How I solved:**
Apparently, even if `AutoCreateSubnetworks` is explicitely set to _false_, it is still omitted from request payload. Therefore, it seems that GCP backend interprets this request as a _legacy_ VPC creation. The only way I found to create a custom-mode VPC is to enforce the request to contain the `AutoCreateSubnetworks` field. In fact, the below code works:

```Go
func CreateVPC(ctx context.Context, ns *compute.NetworksService, name string) (*compute.Operation, error) {
	net := &compute.Network{
		Name:                  name,
		AutoCreateSubnetworks: false,
		// make sure AutoCreateSubnetworks field is included in request
		ForceSendFields: []string{"AutoCreateSubnetworks"},
	}
	return ns.Insert(projectID, net).Context(ctx).Do()
}
```

Now, is it possible to improve the `compute.Network` doc? Precisely, `AutoCreateSubnetworks` comment should say that it is omitted by default and a legacy VPC is created instead in that case. Also, doc should say explicitely that `AutoCreateSubnetworks` field should be included in payload through `ForceSendFields` if users want to create a non-legacy VPC.

There seems to be a related issue opened ~1 year ago:  #307.

Also see: https://stackoverflow.com/questions/59058750/gcp-compute-api-creates-vpc-in-legacy-mode/59067604#59067604
I use `googleapis/google-api-go-client/siteverification/v1` like this:
**auth**:
```
verifService, err := google_siteverification.NewService(ctx, google_option.WithCredentialsFile(googleCloudConf.CredentialsJson))
```
**getToken**:
json for simplier, getting token is ok
```json
{
  "site": {
    "identifier": "test.net",
    "type": "INET_DOMAIN"
  },
  "verificationMethod": "DNS_TXT"
}
```
**insert**:
```
iRes, err := verifService.WebResource.Insert("DNS_TXT", nil).Do()
```
On insert I get `You cannot use the verification method DNS_TXT to verify a site of type SITE`


Also I tried web API from [developers.gogle.com](https://developers.google.com/site-verification/v1/webResource/insert?apix_params=%7B%22verificationMethod%22%3A%22DNS_TXT%22%2C%22resource%22%3A%7B%7D%7D) but I get the same result

What do I do wrong? Is there other method to verify a domain through a google service?
We use https://github.com/GoogleCloudPlatform/cloudsql-proxy to connect to our database. It internally calls `sqladmin.SslCerts.CreateEphemeral` to create an ephemeral certificate for the encryption. With the same configuration this method is behaving differently between v0.14.0 and v0.13.0

Basically it returns a 404 in the case of v0.14 and in v0.13 it is running without any errors. I did not open an issue in that repo as there were no changes there.

Could you please look into this?