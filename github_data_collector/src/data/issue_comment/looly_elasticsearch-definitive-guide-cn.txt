![image](https://user-images.githubusercontent.com/16522248/67996762-d1ade900-fc8b-11e9-9406-45557a9e6b34.png)

更复杂的搜索
我们让搜索稍微再变的复杂一些。我们依旧想要找到姓氏为“Smith”的员工，但是我们只想得到年龄大于30岁的员工。我们的语句将添加过滤器(filter),它使得我们高效率的执行一个结构化搜索：
GET /megacorp/employee/_search
{
    "query" : {
        "filtered" : {
            "filter" : {
                "range" : {
                    "age" : { "gt" : 30 } <1>
                }
            },
            "query" : {
                "match" : {
                    "last_name" : "smith" <2>
                }
            }
        }
    }
}
该参数filtered已在ES 5.0中弃用并删除。您现在应该使用bool/must/filter查询。
过滤器在5.0以后的版本中修改了语法
原文中的请求链接会出现报错，需要添加 header

原文：
```shell 
curl -XGET 'http://localhost:9200/_count?pretty' -d '
{
    "query": {
        "match_all": {}
    }
}
'
```

修改:

```shell 
curl -XGET 'http://localhost:9200/_count?pretty' -H 'Content-Type: application/json' -d '
{
    "query": {
        "match_all": {}
    }
}
'
```
> 多年前，一个叫做Shay Banon的刚结婚不久的失业开发者，由于妻子要去伦敦学习厨师，他便跟着也去了。在他找工作的过程中，为了给妻子构建一个食谱的搜索引擎，他开始构建一个早期版本的Lucene。

這段看起來Shay Banon是Lucene作者，但Lucene作者應為Doug Cutting

ref https://en.wikipedia.org/wiki/Lucene

7.4 目录标题叫做“重要的查询子句”，而内容的标题是“最重要的查询过滤语句”。仅从目录标题上看，无法知道这章节还讲了“过滤”子句。7.5章节亦有此问题。

建议可以再梳理一下目录的标题，如:有的章节叫搜索（第5章、第9章）、有的章节叫查询（第7章）。
我还没有读完所有的章节，没领会到搜索和查询的区别，作为初学者，读书前浏览目录会产生一些疑惑。
建议能在前言部分，约定或稍微解释一下，什么是搜索、什么是查询。

感谢你的翻译，对我帮助很大！

原文增加了对“Scripting with Groovy”的说明。
此外，建议翻译中附加对Groovy开启的说明，因为大多数人es的Groovy是关闭的，所以'script'，日常报错。。。。

‘scripts of type [inline], operation [update] and lang [groovy] are disabled’

我是百度了下，加了三个语句开的
`script.inline: on`
`script.indexed: on`
`script.file: on`


现在ES更新到2.2.0了，我们文档还要更新吧。我看里面好多都跟英文版有出入了
虽然官方还是旧的。等待官方更新？

看翻译的

<pre>
<code>
GET /_mget  # 此处是GET,但是在测试的时候，发现GET会报错
{
   "docs" : [
      {
         "_index" : "website",
         "_type" :  "blog",
         "_id" :    2
      },
      {
         "_index" : "website",
         "_type" :  "pageviews",
         "_id" :    1,
         "_source": "views"
      }
   ]
}



</code>
</pre>
# 按照上面的报错

<pre>
<code>

{
"error": {
"root_cause": [
{
"type": "parse_exception",
"reason": "Failed to derive xcontent"
}
],
"type": "parse_exception",
"reason": "Failed to derive xcontent"
},
"status": 400
}
</code>
</pre>
# 把GET =》 POST

<pre>
<code>

{
"docs": [
{
"_index": "website",
"_type": "blog",
"_id": "2",
"_version": 4,
"found": true,
"_source": {
"title": "xwl11111",
"text": "2015-0919",
"views": 0,
"tags": [
"testing"
],
"view": 5
}
}
]
}
</code>
</pre>
