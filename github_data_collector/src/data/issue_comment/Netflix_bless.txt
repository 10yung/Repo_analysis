I currently am experiencing issues when using ForwardAgent and ssh-add on PGP-Tools. After trying to ssh-add a key I get an "Invalid Key length" error. It is able to add the private key just fine but something breaks with the "blessed" public certificate.
I've started messing around with spinning up BLESS internally, but after a few iterations I got stuck on the following error popping up when I ran the lambda:

```
{
  "errorMessage": "__init__() got an unexpected keyword argument 'strict'",
  "errorType": "TypeError",
  "stackTrace": [
    "  File \"/var/task/bless_lambda_user.py\", line 68, in lambda_handler_user\n    schema = BlessUserSchema(strict=True)\n"
  ]
}
```

Anyway after a bunch of random Google-fu and stumbling through code. I ran across [this comment by Jeremy Stott](https://gitter.im/Netflix/bless): 

![Screen Shot 2019-09-20 at 3 00 50 PM](https://user-images.githubusercontent.com/7587027/65361201-8ea22580-dbb7-11e9-900e-27aae7761413.png)

So (like any trained security professional) I simply blindly followed suggestions from random internet comments to try and get what I hope to be a critical security control for my org to work. Low and behold it works! `s/'marshmallow',/'marshmallow<3',/` got things back to a happy state. Here's my current setup.py

```
import os

from setuptools import setup, find_packages

ROOT = os.path.realpath(os.path.join(os.path.dirname(__file__)))

about = {}
with open(os.path.join(ROOT, "bless", "__about__.py")) as f:
    exec(f.read(), about)

setup(
    name=about["__title__"],
    version=about["__version__"],
    author=about["__author__"],
    author_email=about["__email__"],
    url=about["__uri__"],
    description=about["__summary__"],
    license=about["__license__"],
    packages=find_packages(exclude=["test*"]),
    install_requires=[
        'boto3',
        'cryptography',
        'ipaddress',
        'marshmallow<3',
        'kmsauth'
    ],
    extras_require={
        'tests': [
            'coverage',
            'flake8',
            'pyflakes',
            'pytest',
            'pytest-mock'
        ]
    }
)
```

I've just started to familiarize myself with Bless, so I feel like I'm pretty strongly lacking in context for the full implications of this change here. Is this workaround of pinning to an earlier version of marshmellow the correct way forward?
This PR enables support for authentication with OpenIDConnect by verifying a JWT #93

A third party library (https://github.com/mpdavis/python-jose) is introduced to verify a JSON Web Token (JWT), and parse a JSON Web Key (JWK). This library was chosen because it is well maintained, a compatible license, features on jwt.io, is light weight, and can support JWKs.

* Created new configuration section for JWT Auth
  - Configure a JWK to verify a JWT signature
  - Configure requried signature algorithms
  - Configure required audience and issuer claims
  - Configure name of username claim
* Added code block in lambda_handler_user to validate JWT if configured
  - Require remote_usernames == bastion_user
  - Require valid JWT signature, expiry, and signature algorithm
  - Require username_claim in JWT
  - Require username_claim == bastion_user
* Added unit tests for config and JWT validation
#98  keep the consistency between setup.py and requirements.txt
Hi, as shown in the following full dependency graph of  **_bless_**, bless requires _**boto3**_ (the latest version)， while the installed version of **_kmsauth_**(0.3.0) requires _**boto3>=1.2.0,<2.0.0**_.

According to Pip's “first found wins” installation strategy, _**boto3 1.9.193**_ is the actually installed version.  

Although the first found package version _**boto3 1.9.193**_ just satisfies the later dependency constraint （_**boto3>=1.2.0,<2.0.0**_), it will lead to a build failure once developers release a newer version of bleach.

### Dependency tree--------
```
bless-master<version range:>
| +-boto3<version range:>
| +-cryptography<version range:>
| +-ipaddress<version range:>
| +-kmsauth<version range:>
| | +-boto3<version range:>=1.2.0,<2.0.0>
| +-marshmallow<version range:>
```

### Suggestion
1.	Fix your direct dependencies to be **_boto3==1.9.193_** and **_kmsauth==0.3.0_**, to remove this conflict. 
        I have checked this revision will not affect your downstream projects now.

2.	Ask your upstream project **_kmsauth_** to loose the version range of **_boto3_** to be **_>=1.2.0_**.



Thanks for your attention.
Best,
Neolith

Hello,

I'm interested in authenticating users to the BLESS lambda using [OpenID Connect identity tokens](https://www.oauth.com/oauth2-servers/openid-connect/id-tokens/).

This would be an alternative to using KMS auth to prove the identity of the caller. Users could use AWS AssumeRoleWithWebIdentity API to get temporary credentials to invoke the lambda, and then pass their identity token in the payload to get a certificate signed for a username that matches a claim in the identity token.

I'm keen to implement this feature. Is there any interest and support for new features like this?
Reading through the validity constraints docs for SSH certificates, it doesn't look like there's the ability to specify which hosts a SSH user certificate is able to be used with. How are you solving authorization issues (allowing a user access to some hosts, but not all in a larger environment) with BLESS, or are you?

It looks like this would mean the holder of a valid SSH certificate would have access to any host configured to trust that CA certificate (plus or minus networking) without the ability to make access decisions by the type of host. Is that accurate or am I grossly misunderstanding something?

Source: [OpenSSH ssh-keygen options docs](https://man.openbsd.org/ssh-keygen#O)
It would be nice if keyid format was configurable from config file. 
BLESS should be easily downloadable and installbe from PyPI.
Due to the security repercussions, of deploying this incorrectly, Are they any docs that go into more detail on a proper installation?
