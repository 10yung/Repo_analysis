<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/docker/swarmkit/blob/master/CONTRIBUTING.md

** Make sure all your commits include a signature generated with `git commit -s` **

For additional information on our contributing process, read our contributing
guide https://docs.docker.com/opensource/code/

If this is a bug fix, make sure your description includes "fixes #xxxx", or
"closes #xxxx"

Please provide the following information:
-->

**- What I did**

**- How I did it**

**- How to test it**

**- Description for the changelog**
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog:
-->

Currently both names are max 64 characters long.

We have a naming-scheme with versioning in the name and hit often this limit. Is there a reason for only allowing 64 chars? Can this easily be increased? Would a patch be accepted?
**- What I did**
Added cleanup routine for old tasks.db tasks to avoid it growing on environments where daemon is restarted rarely.

Without this change those are removed only during worker init:
https://github.com/docker/swarmkit/blob/42085d2f8e43a3ed90ed289d3f3ed3de57837100/agent/worker.go#L95-L103

closes #2367

**- How I did it**
Cleanup routine run on its own thread and every 5 minutes it removes tasks on completed/failed/shutdown state which are more than 5 minutes old.

**- How to test it**
- Add some constantly completing/failing service(s).
- Let then run couple of minutes.
- Remove those services.
- Use e.g. https://github.com/nisboo/BoltGUI to read `tasks.db` and see that all tasks exists still on database.
- Wait 5 minutes.
- When removal happens it write lines like these to debug log:
```
time="2019-12-15T20:12:39+02:00" level=debug msg="Removing task ID: 1p9g7tjdfo4myfc58r1121fs8 State: COMPLETE LastUpdate: 2019-12-15T18:06:24.3410758Z" module=node/agent/worker node.id=x2cjt3iizyahokwt5n7maey11
time="2019-12-15T20:12:39+02:00" level=debug msg="Removing task ID: 1pra4b3nandod9lqlfy7qjr58 State: FAILED LastUpdate: 2019-12-15T18:07:01.7059872Z" module=node/agent/worker node.id=x2cjt3iizyahokwt5n7maey11
```
- Use BoltGUI again to verify that there is no tasks left on DB anymore.
Current network allocation is run asynchronously with network (object) creation, when a user specifies an overlapped subnet, the network creation succeeds but this network is useless with empty IPAM config.

For example:
```
docker network create -d overlay --subnet=10.2.0.0/24 testol
docker network create -d overlay --subnet=10.2.0.0/24 testol2
```
The second command does not fail. `testol2` is created with a different ID but useless (IPAM Config is null).

Signed-off-by: Xinfeng Liu <xinfeng.liu@gmail.com>

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/docker/swarmkit/blob/master/CONTRIBUTING.md

** Make sure all your commits include a signature generated with `git commit -s` **

For additional information on our contributing process, read our contributing
guide https://docs.docker.com/opensource/code/

If this is a bug fix, make sure your description includes "fixes #xxxx", or
"closes #xxxx"

Please provide the following information:
-->

**- What I did**

This PR makes network creation use a channel to wait for the result of network allocation from Allocator before return.
Because of this change, some _test.go files are modified.

_Update_:
Found a duplicated line in "make coverage" of `direct.mk` that caused CI flaky. I removed that duplicated line.

**- How I did it**
 Use a per-network channel to wait for the result of network allocation from Allocator. If the network allocation fails, delete the network object that was just created and return an error to the user. So the user cannot create a network with overlapped subnet.

**- How to test it**
Added `TestCreateNetworkOverlapIP` to network_test.go.

**- Description for the changelog**
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog:
-->

When I deploy this v3.7 docker-compose.yml stack onto a two node docker 19.0.3.4 swarm cluster using the overlay network it works as expected -- service names can be used on the network and ports are accessible.
https://gist.github.com/jamshid/bf5dcdb0ae1b505a636b33ca5ebfba4b
Unfortunately it doesn't work when using the "weave" network plugin:
```
NETWORK_DRIVER=weaveworks/net-plugin:latest_release docker stack deploy -c ./docker-compose.yml voteapp

docker run -ti --network voteapp_voteapp centos curl --head http://result-app:80 http://voting-app:80
```
I filed https://github.com/weaveworks/weave/issues/3734 but they think it is probably a change or bug with docker or swarm network plugins. In the similar issue https://github.com/weaveworks/weave/issues/3382 some people claimed downgrading to 18.03 fixed the problem, so maybe something broke with network plugins 18.06?

My example yml is based on the common voting app sample https://github.com/dockersamples/example-voting-app and should be easy to deploy then test with the curls in my gist.

Is there any other network plugin I can use besides "overlay" or "weave" to try to narrow down the problem? Is there anything else I could provide to help?
Golang 1.12.12
-------------------------------

full diff: https://github.com/golang/go/compare/go1.12.11...go1.12.12

go1.12.12 (released 2019/10/17) includes fixes to the go command, runtime,
syscall and net packages. See the Go 1.12.12 milestone on our issue tracker for
details.

https://github.com/golang/go/issues?q=milestone%3AGo1.12.12

Golang 1.12.11 (CVE-2019-17596)
-------------------------------

full diff: https://github.com/golang/go/compare/go1.12.10...go1.12.11

go1.12.11 (released 2019/10/17) includes security fixes to the crypto/dsa
package. See the Go 1.12.11 milestone on our issue tracker for details.

https://github.com/golang/go/issues?q=milestone%3AGo1.12.11

    [security] Go 1.13.2 and Go 1.12.11 are released

    Hi gophers,

    We have just released Go 1.13.2 and Go 1.12.11 to address a recently reported
    security issue. We recommend that all affected users update to one of these
    releases (if you're not sure which, choose Go 1.13.2).

    Invalid DSA public keys can cause a panic in dsa.Verify. In particular, using
    crypto/x509.Verify on a crafted X.509 certificate chain can lead to a panic,
    even if the certificates don't chain to a trusted root. The chain can be
    delivered via a crypto/tls connection to a client, or to a server that accepts
    and verifies client certificates. net/http clients can be made to crash by an
    HTTPS server, while net/http servers that accept client certificates will
    recover the panic and are unaffected.

    Moreover, an application might crash invoking
    crypto/x509.(*CertificateRequest).CheckSignature on an X.509 certificate
    request, parsing a golang.org/x/crypto/openpgp Entity, or during a
    golang.org/x/crypto/otr conversation. Finally, a golang.org/x/crypto/ssh client
    can panic due to a malformed host key, while a server could panic if either
    PublicKeyCallback accepts a malformed public key, or if IsUserAuthority accepts
    a certificate with a malformed public key.

    The issue is CVE-2019-17596 and Go issue golang.org/issue/34960.

    Thanks to Daniel Mandragona for discovering and reporting this issue. We'd also
    like to thank regilero for a previous disclosure of CVE-2019-16276.

Signed-off-by: Sebastiaan van Stijn <github@gone.nl>

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/docker/swarmkit/blob/master/CONTRIBUTING.md

** Make sure all your commits include a signature generated with `git commit -s` **

For additional information on our contributing process, read our contributing
guide https://docs.docker.com/opensource/code/

If this is a bug fix, make sure your description includes "fixes #xxxx", or
"closes #xxxx"

Please provide the following information:
-->

**- What I did**

**- How I did it**

**- How to test it**

**- Description for the changelog**
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog:
-->

<!--
Please make sure you've read and understood our contributing guidelines;
https://github.com/docker/swarmkit/blob/master/CONTRIBUTING.md

** Make sure all your commits include a signature generated with `git commit -s` **

For additional information on our contributing process, read our contributing
guide https://docs.docker.com/opensource/code/

If this is a bug fix, make sure your description includes "fixes #xxxx", or
"closes #xxxx"

Please provide the following information:
-->

opening as draft; we'll probably have to update gRPC as well


**- What I did**

**- How I did it**

**- How to test it**

**- Description for the changelog**
<!--
Write a short (one line) summary that describes the changes in this
pull request for inclusion in the changelog:
-->

full diff: https://github.com/google/certificate-transparency-go/compare/v1.0.20...v1.0.21

- CTFE no longer prints certificate chains as long byte strings in messages when
  handler errors occur. This was obscuring the reason for the failure and wasn't
  particularly useful.
- CTFE now has a global log URL path prefix flag and a configuration proto for a
  log specific path. The latter should help for various migration strategies if
  existing C++ server logs are going to be converted to run on the new code.
- More progress has been made on log mirroring. We believe that it's now at the
  point where testing can begin.
- The certcheck and ct_hammer utilities have received more enhancements.
- x509 and x509util now support Subject Information Access and additional exten-
  sions for RPKI / RFC
- scanner / fixchain and some other command line utilities now have better
  handling of non-fatal errors.

this was a commit that was left over in https://github.com/docker/swarmkit/pull/2837, and thought it could still be useful when debugging problems.

Before:

    panic: unexpected field type in StoreSnapshot

After:

    panic: unexpected field type in StoreSnapshot: XXX_NoUnkeyedLiteral struct

Since PR #2880 the test suite always panics:

> panic: Log in goroutine after TestWorkerUpdate has completed
>
> goroutine 1175 [running]:
> testing.(*common).logDepth(0xc00019a100, 0xc0000396a0, 0x1d, 0x3)
> 	/usr/local/go/src/testing/testing.go:634 +0x51a
> testing.(*common).log(...)
> 	/usr/local/go/src/testing/testing.go:614
> testing.(*common).Log(0xc00019a100, 0xc00006fb00, 0x1, 0x1)
> 	/usr/local/go/src/testing/testing.go:642 +0x79
> github.com/docker/swarmkit/agent.(*mockTaskController).Remove(0xc00020a780, 0x13b6f40, 0xc0000b4010, 0x13b6f40, 0xc0000b4010)
> 	/home/circleci/.go_workspace/src/github.com/docker/swarmkit/agent/worker_test.go:604 +0x8e
> github.com/docker/swarmkit/agent.reconcileTaskState.func1(0xc0004dac60)
> 	/home/circleci/.go_workspace/src/github.com/docker/swarmkit/agent/worker.go:270 +0x137
> created by github.com/docker/swarmkit/agent.reconcileTaskState
> 	/home/circleci/.go_workspace/src/github.com/docker/swarmkit/agent/worker.go:313 +0x1a6f
> FAIL	github.com/docker/swarmkit/agent	4.244s
>

This is an attempt to fix this.