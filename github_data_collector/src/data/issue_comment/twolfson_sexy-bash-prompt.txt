Sometimes tasks can take a while to run, it would be great to get a readout of how long a task took to run. I've looked this up previously and I believe it's possible in `bash` via traps:

https://jakemccrary.com/blog/2015/05/03/put-the-last-commands-run-time-in-your-bash-prompt/

We should probably only show the timer when the task takes over 10 seconds (maybe make this a configurable setting if someone requests it):

```bash
todd at Euclid in ~/github/sexy-bash-prompt on master
$ time cat
^C
real	0m0.644s
user	0m0.001s
sys	0m0.000s

todd at Euclid in ~/github/sexy-bash-prompt on master
$ time cat
^C

real	0m15.422s
user	0m0.002s
sys	0m0.001s
todd at Euclid in ~/github/sexy-bash-prompt on master
(15.422s)$ 
```
In #80 we will work out how to support opt-in switches for extension. Exit code reporting is planned. For now we can discuss here what it should look like.

I've seen this feature in a few different shell prompts over the years. There are different ways of doing it. A couple things we could try, off the top:

1. A special STATUS_SUCCESS and STATUS_FAILED color that modifies an existing token (like the prompt character [`$`])
2. The same colors that modify a new token, also user-configurable
As discovered during research for the remaining in progress actions, `git am` and `git rebase` can walk through multiple commits. During each pause, there are files that list out the current step and the total amount of commits (e.g. step: 1, total: 2).

Should we display this information inside of the `[rebase]`/`[am]` notice?

``` bash
todd at Euclid in ~/github/sexy-bash-prompt on dev/add.remaining.in.progress [rebase 1/20]
$ 
```

/cc @rpdelaney 

We wrote a installation test script. Unfortunately, Travis CI hangs while running it. Look into why this is and how to fix it.

This would be great for testing multiple environments (e.g. `.bashrc` auto-invoked, `.bash_profile` update required, `.bash_login` exists).
