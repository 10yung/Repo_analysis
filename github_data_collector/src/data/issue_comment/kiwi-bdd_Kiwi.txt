11111
Hi!

For at least a year I've been meeting the same problem: if there is an NSDate stub and test fails, test run fails(crashes) with something like this:

> Class 'NSDate' has a superclass that supports secure coding, but 'NSDate' overrides -initWithCoder: and does not override +supportsSecureCoding. The class must implement +supportsSecureCoding and return YES to verify that its implementation of -initWithCoder: is secure coding compliant.

Today I've finally decided to figure out what is the problem. It all ended up with this patch.
Maybe someone has any idea about how to solve the problem more properly?

allow the use of notification matcher with async verifier in constructs like` [[@"my notification" shouldEventually] bePosted];` or even `shouldNotEventually` by keeping observer alive when evaluated multiple times until first notification received

Fixes https://github.com/kiwi-bdd/Kiwi/issues/592
Using kiwi 3.0

When running the Unit Tests for my app, Xcode crash when framework try to "verifyTheProbe".

Details backstrace attached, issue producible easily (not 100%).

<img width="1792" alt="screen shot 2018-09-03 at 6 28 33 pm" src="https://user-images.githubusercontent.com/40796126/44988544-b1f83380-afa8-11e8-9371-a9c4cae2d590.png">

HI, friends

```
//
//  PPSFPSLabel.m
//  rninit
//
//  Created by 魔笛 on 2018/7/30.
//  Copyright © 2018年 Facebook. All rights reserved.
//

#import "PPSFPSLabel.h"
#import "PPSWeakProxy.h"

static const NSInteger kFPSLabelHeight = 30.f;

@interface PPSFPSLabel() {
  NSUInteger _count;
  NSTimeInterval _lastTime;
  UIFont *_font;
  UIFont *_subFont;
}

@end

@implementation PPSFPSLabel
    
+ (id)fpsLabel {
    UIScreen *mainScreen = [UIScreen mainScreen];
    PPSFPSLabel *fpsLabel = [[PPSFPSLabel alloc] initWithFrame:CGRectMake(0, mainScreen.bounds.size.height - kFPSLabelHeight, 100 , kFPSLabelHeight)];
    return fpsLabel;
}
    
- (id)initWithFrame:(CGRect)frame {
    if (self = [super initWithFrame:frame]) {
        self.frame = frame;
        self.layer.cornerRadius = 5;
        self.clipsToBounds = YES;
        self.textAlignment = NSTextAlignmentCenter;
        self.userInteractionEnabled = NO;
        self.backgroundColor = [UIColor colorWithWhite:0.000 alpha:0.700];
        
        _font = [UIFont fontWithName:@"Courier" size:14];
        _subFont = [UIFont fontWithName:@"Courier" size:4];
        [self addTimer];
    }
    
    return self;
}
    
- (void)addTimer {
    self.fpsLink = [CADisplayLink displayLinkWithTarget:[PPSWeakProxy proxyWithTarget:self] selector:@selector(tick:)];
    [self.fpsLink addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];
}

- (void)dealloc {
  [self.fpsLink invalidate];
  NSLog(@"timer release");
}
    
- (void)tick:(CADisplayLink *)link {
    NSLog(@"tick: %f", _lastTime);
  if (_lastTime == 0) {
    _lastTime = link.timestamp;
    return;
  }
  
  _count++;
  NSTimeInterval delta = link.timestamp - _lastTime;
  if (delta < 1) return;
  _lastTime = link.timestamp;
  float fps = _count / delta;
  _count = 0;
  
  CGFloat progress = fps / 60.0;
  UIColor *color = [UIColor colorWithHue:0.27 * (progress - 0.2) saturation:1 brightness:0.9 alpha:1];
  
  NSString *text1 = [NSString stringWithFormat:@"%d FPS",(int)round(fps)];
  NSLog(@"%@", text1);
  
  
  NSMutableAttributedString *text = [[NSMutableAttributedString alloc] initWithString:[NSString stringWithFormat:@"%d FPS",(int)round(fps)]];
  [text addAttribute:NSForegroundColorAttributeName value:color range:NSMakeRange(0, text.length - 3)];
  [text addAttribute:NSForegroundColorAttributeName value:[UIColor whiteColor] range:NSMakeRange(text.length - 3, 3)];
  [text addAttribute:NSFontAttributeName value:_font range:NSMakeRange(0, text.length)];
  [text addAttribute:NSFontAttributeName value:_subFont range:NSMakeRange(text.length - 4, 1)];
  self.attributedText = text;
}

@end

```

How to write unit test for CADisplayLink. 

I write the kiwi is 
```
describe(@"PPSFPSLabel", ^{
    let(fpsLabel, ^id{
        return [PPSFPSLabel fpsLabel];
    });
    
    it(@"layout on the left-bottom screen", ^{
        UIScreen *mainScreen = [UIScreen mainScreen];
        [[theValue([fpsLabel frame]) should] equal:theValue(CGRectMake(0, mainScreen.bounds.size.height - 30, 100, 30))];
    });
    
    context(@"should add a timer", ^{
        PPSFPSLabel *label = [PPSFPSLabel fpsLabel];
        [[label should] receive:@selector(addTimer)];
        [[label.fpsLink shouldNot] beNil];
    });
    
    it(@"time target", ^{
        PPSFPSLabel *label = [PPSFPSLabel fpsLabel];
        
        while(true) {
            
        }
    });
});
```

But the function `tick` cannot code coverage


Using Kiwi 3.0.0

When trying to run the Unit Tests on a real device, Xcode trows an error saying `You must rebuild it with bitcode enabled`. Running the tests on simulator works fine.
Nimble had a similar [issue](https://github.com/Quick/Nimble/issues/170). They way I solved this is setting the `ENABLE_BITCODE` to `NO` using cocoapods

```		
if ['Kiwi'].include? target.name
	target.build_configurations.each do |config|
		config.build_settings['ENABLE_BITCODE'] = 'NO'		
       end
end
```

`ld: '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Frameworks/XCTest.framework/XCTest' does not contain bitcode. You must rebuild it with bitcode enabled (Xcode setting ENABLE_BITCODE), obtain an updated library from the vendor, or disable bitcode for this target. file '/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/Library/Frameworks/XCTest.framework/XCTest' for architecture arm64`

Is Bitcode actually really required?
Hey guys,

I have the following issue. 

code does:
```
@implementation SomeLocationManagerWrapperClass
-(void) someMethod; {
	[self.locationManager setAllowsBackgroundLocationUpdates:TRUE];
}
@end
```

test does:

```
SomeLocationManagerWrapperClass *lm = [SomeLocationManagerWrapperClass new];
lm.locationManager = [CLLocationManager nullMock];
[[lm.locationManager should] receive:@selector(setAllowsBackgroundLocationUpdates:) withArguments:theValue(TRUE)];
[lm someMethod];
```

The problem is that this should/receive validation fails with

```
expected subject to receive -setAllowsBackgroundLocationUpdates：1  exactly 1 time, but received it 0 times
```

Interestingly enough, if I replace the [CLLocationManager nullMock] with a regular mock [CLLocationManager mock] I get the following error:

```
KWMockException "mock received unexpected message -setAllowsBackgroundLocationUpdates：<01> " raised
```

So it seems to me like the mapping of theValue(TRUE) is not working correctly here?

Is there a way to stop tests execution if any test is failed? My first couple tests are checking for correct app setup and if there something wrong (server is down or an error occurred) I have no need to continue testing because all other test will fail for sure. 
Hi, @ecaselles
Thanks for the implement of sharedExample, this is useful for me.

But when I used it, I face some question,
Is possible used a sharedExample in another sharedExample?
```
malloc: *** error for object 0x60000068d8e0: Invalid pointer dequeued from free list
*** set a breakpoint in malloc_error_break to debug


`thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT
    frame #0: 0x0000000113451d42 libsystem_kernel.dylib`__pthread_kill + 10
    frame #1: 0x0000000113489457 libsystem_pthread.dylib`pthread_kill + 90
    frame #2: 0x00000001131e388f libsystem_c.dylib`abort + 127
    frame #3: 0x00000001133188ab libsystem_malloc.dylib`nanozone_error + 502
    frame #4: 0x0000000113319be1 libsystem_malloc.dylib`_nano_malloc_check_clear + 416
    frame #5: 0x0000000113318b3d libsystem_malloc.dylib`nano_calloc + 72
    frame #6: 0x00000001133160e6 libsystem_malloc.dylib`malloc_zone_calloc + 87
    frame #7: 0x0000000113316485 libsystem_malloc.dylib`calloc + 30
    frame #8: 0x000000010dfb593c libobjc.A.dylib`allocateBuckets(unsigned int) + 30
    frame #9: 0x000000010dfb5b0f libobjc.A.dylib`cache_t::reallocate(unsigned int, unsigned int) + 43
    frame #10: 0x000000010dfb5f9a libobjc.A.dylib`cache_fill + 175
    frame #11: 0x000000010dfc0309 libobjc.A.dylib`lookUpImpOrForward + 611
    frame #12: 0x000000010dfcf554 libobjc.A.dylib`_objc_msgSend_uncached + 68
    frame #13: 0x0000000125059a76 Kiwi`KWInterceptClassForCanonicalClass(canonicalClass=XXXXXXXXXXXXXXX) at KWIntercept.m:121
    frame #14: 0x000000012505a58a Kiwi`KWSetupObjectInterceptSupport(anObject=0x000000010ada9ab0) at KWIntercept.m:157
    frame #15: 0x000000012508057b Kiwi`+[NSObject(self=XXXXXXXXXXXXXXX, _cmd="stubMessagePattern:andReturn:overrideExisting:", aMessagePattern=0x0000600000635ea0, aValue=0x000060000068d6b0, override=YES) stubMessagePattern:andReturn:overrideExisting:] at NSObject+KiwiStubAdditions.m:180
    frame #16: 0x0000000125080400 Kiwi`+[NSObject(self=YNWireframeManager, _cmd="stubMessagePattern:andReturn:", aMessagePattern=0x0000600000635ea0, aValue=0x000060000068d6b0) stubMessagePattern:andReturn:] at NSObject+KiwiStubAdditions.m:171
    frame #17: 0x000000012507f5fb Kiwi`+[NSObject(self=XXXXXXXXXXXXXXX, _cmd="stub:andReturn:", aSelector="sharedManager", aValue=0x000060000068d6b0) stub:andReturn:] at NSObject+KiwiStubAdditions.m:101`

```