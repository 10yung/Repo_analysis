#### TensorFlow.js version

1.5.1

#### Browser version

Google Chrome 79.0.3945.117

#### Describe the problem or feature request

For the addition-rnn example, entering "1" for the size of digits always results in the following JavaScript error, regardless of training size.
`Error in slice3D: begin[0] + size[0] (20) would overflow input.shape[0]`

#### Code to reproduce the bug / link to feature request

Open <https://storage.googleapis.com/tfjs-examples/addition-rnn/dist/index.html>, Enter "1" for "Digits" and "100" for "Training Size", then click "Train Model"

I tried running the simple demo example in the `tfjs-backend-wasm` readme just now:
```html
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm"></script>

<script>
  (async function() {
    await tf.setBackend('wasm');
    ...
  })();
</script>
```
But I get a 404 for the `wasm` file that the script tries to request:

https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm.wasm

I think it should instead be:

https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm/dist/tfjs-backend-wasm.wasm

because that returns the wasm file, and this code does work:

```js
...
await tf.wasm.setWasmPath("https://cdn.jsdelivr.net/npm/@tensorflow/tfjs-backend-wasm/dist/tfjs-backend-wasm.wasm");
await tf.setBackend('wasm');
...
```
To see the logs from the Cloud Build CI, please join either our [discussion](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs) or [announcement](https://groups.google.com/a/tensorflow.org/forum/#!forum/tfjs-announce) mailing list.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs/2682)
<!-- Reviewable:end -->

BUG

Avoid using apply/call due to new ts compiler flag.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs/2680)
<!-- Reviewable:end -->



<!-- Reviewable:start -->
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs/2677)
<!-- Reviewable:end -->

#### TensorFlow.js version
1.5.0

#### Describe the problem or feature request
I'd like to be able to use the Stats module (and specifically [Pearson Correlation](https://www.tensorflow.org/probability/api_docs/python/tfp/stats/correlation)) that are available in the Python library.
FIX

What happens:
Run case one by one (yarn test --grep=), pass. But when run several together. Some case may fail.

Example case:
Case may be failed due to cache reasons(div/Arithmetic_test.ts):
'gradient: Tensor1D with int32',               // Actual != expected.
'gradient: Tensor2D',                          // Actual != expected.
'gradient: Tensor2D / Tensor2D w/ broadcast',  // Actual != expected.

Root cause:
This problem is introduced by two reasons:
1), makeShaderKey called before the real shader generated(compileProgram and makeShader).
Which means, two different shaders may possibly share the same shader key.

2), The shader key optimization(https://github.com/tensorflow/tfjs/pull/2451), which use
several key properties of the shader instead of the full shader source as shader key.
For most case, especially all properties are self-contained in the shader`s WebGPUProgram
file, this works. But when some properties are originated from the shader_preprocessor.ts,
two different shader may be collided with the same shader key.

Currently the fix is to disable the shader key and shader cache first.
The follow up todo is: https://github.com/tensorflow/tfjs/issues/2669.

Also add square and neg operators.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/tensorflow/tfjs/2670)
<!-- Reviewable:end -->

This issue is from PR https://github.com/tensorflow/tfjs/pull/2670. And below comments is copied from it.

**What happens:**
Run case one by one (yarn test --grep=), pass. But when run several together. Some case may fail.

**Example case:**
Case may be failed due to cache reasons(div/Arithmetic_test.ts):
'gradient: Tensor1D with int32',               // Actual != expected.
'gradient: Tensor2D',                          // Actual != expected.
'gradient: Tensor2D / Tensor2D w/ broadcast',  // Actual != expected.

**Root cause:**
This problem is introduced by two reasons:
1), makeShaderKey called before the real shader generated(compileProgram and makeShader).
Which means, two different shaders may possibly share the same shader key.

2), The shader key optimization(https://github.com/tensorflow/tfjs/pull/2451), which use
several key properties of the shader instead of the full shader source as shader key.
For most case, especially all properties are self-contained in the shader`s WebGPUProgram
file, this works. But when some properties are originated from the shader_preprocessor.ts,
two different shader may be collided with the same shader key.

Currently the fix is to disable the shader key and shader cache first.
To get help from the community, we encourage using Stack Overflow and the [`tensorflow.js`](https://stackoverflow.com/questions/tagged/tensorflow.js) tag.

#### TensorFlow.js version
1.4.0 or 1.5.0 
#### Browser version
The problem was found both in Chrome and FireFox.
#### Operating system version
Windows 7.
#### Describe the problem or feature [request]
I have a tensor called "result", after run command "var boxes = tf.slice(result, [0, 0, 2], [-1, -1, -1]);"
the “boxes” replace some self data to be zero , like this（see penultimate row and third row）：

## result.print(1) 
array_ops.ts:1180 Tensor
  dtype: float32
  rank: 3
  shape: [1,100,6]
  values:
    [[[0.9617312, 0.0382688, -5.8984313 , -8.8396969 , 12.310483  , 17.7038326],
      [0.9537055, 0.0462946, -9.8331299 , -6.8368602 , 16.3625393 , 13.5060987],
      [0.7620444, 0.2379556, -17.1960621, -12.9165087, 22.5383568 , 21.0246162],
      ...,
      [0.9902079, 0.0097922, 185.8644409, -5.5407634 , 208.6660767, 9.4776773 ],
      [0.8982488, 0.1017512, 177.7134552, -12.9165087, 216.3047943, 21.0246162],
      [0.9901471, 0.0098529, 181.7536774, -2.3655045 , 215.699173 , 8.0176115 ]]]

## boxes.print(1)
array_ops.ts:1180 Tensor
  dtype: float32
  rank: 3
  shape: [1,100,4]
  values:
    [[[-5.8984313 , -8.8396969, 12.310483  , 17.7038326],
      [-9.8331299 , -6.8368602, 16.3625393 , 13.5060987],
      [0          , 0         , 0          , 0         ],
      ...,
      [185.8644409, -5.5407634, 208.6660767, 9.4776773 ],
      [0          , 0         , 0          , 0         ],
      [181.7536774, -2.3655045, 215.699173 , 8.0176115 ]]]

Used in handtracking.