**Problem Description:**
Hello, seems that this library doesn't work when bulletin is opened when app is not taking 100% of the screen. When running in any split view combinations (1/4, 2/4, 3/4 or 1/3, 2/3 of the screen widths) the bulletin view is displayed as it would take the whole screen estate, therefore part of it is hidden. I have tried both `showBulletin(above:animated:completion:)` or `showBulletin(in:animated:completion)` they seem to give same result. I attach an image of the problem to further clarify the issue.

<img width="725" alt="Screenshot 2019-10-28 at 11 21 34" src="https://user-images.githubusercontent.com/1936449/67667579-cbabc580-f976-11e9-8de0-52254af4a5bf.png">


Is there any workaround?

**Steps to reproduce:**
Run the app, present bulletin board when app size has been reduced with split view. Present bulletin board with either `showBulletin(above:animated:completion:)` or `showBulletin(in:animated:completion)`

**Environment:**
 - Device: iPad 11" Pro, iPad 12.9" Pro
 - OS: iOS 13.0, 13.1, 13.2
 - Version of BulletinBoard: 4.1.0

**Problem Description:**
The action buttons do not update their background colors when dark mode is toggled. 
This is caused by the fact that the background color is in fact an image and thus it will not respond to the dynamic nature of UIColor's traitcollection-change callback.

**Steps to reproduce:**
Have a bulletin present on screen and toggle dark mode. The background color won't change to the correct value.

**Environment:**
 - Device: Any
 - OS: iOS 13+
 - Version of BulletinBoard: Latest (as of 15 Oct., 2019)

When I try to scroll through my picker which is positioned under the title all the rows disappear. I have searched for this issue and I have found (not here) that the issue is connected with the view that contains the picker.

Are there any solutions?

my code:

```
import BLTNBoard

class PickerBLTNItem<T: Pickable>: BLTNPageItem, UIPickerViewDataSource, UIPickerViewDelegate {
    lazy var picker: UIPickerView = UIPickerView()
    var items: [T]
    
    init(items: [T]) {
        self.items = items
        super.init(title: T.description)
        setup()
    }
    
    func setup() {
        image = T.image
        actionButtonTitle = Localized.General.done
        picker.delegate = self
        picker.dataSource = self
    }
    
    override func makeViewsUnderImage(with interfaceBuilder: BLTNInterfaceBuilder) -> [UIView]? {
        return [picker]
    }
    
    func pickerView(_ pickerView: UIPickerView, titleForRow row: Int, forComponent component: Int) -> String? {
        return items[row].description
    }

    func pickerView(_ pickerView: UIPickerView, numberOfRowsInComponent component: Int) -> Int {
        return items.count
    }

    func numberOfComponents(in pickerView: UIPickerView) -> Int {
        return 1
    }
}
```

first I have tried implementing a picker with custom rows and I thought that the customization might cause this problem but even the simplest picker implementation doesn't work and causes the same issue. 
It seems that library's Localizable.strings conflicts with project's same file. The issue appeared when I tried to archive and sent an app version through Fabric. App seems to use the library's file with effect to show only localizable keys and not translations. Pasting my translations to library's file resolved the issue. In addition because app uses libary's Localizable files , language fallback functionality is not working.I have installed library through cocoapods. 
Swift PM is officially supported in Xcode 11 so it would be great if BulletinBoard supports it ðŸ™‚

<img width="558" alt="Screen Shot 2019-03-30 at 1 11 12 PM" src="https://user-images.githubusercontent.com/12584632/55271760-4df2df00-52ed-11e9-9b60-9246ef23dc77.png">

I think something is wrong here.   
And I should change Swift version manually

Showing All Messages
:-1: SWIFT_VERSION '3.0' is unsupported, supported versions are: 4.0, 4.2, 5.0. (in target 'BulletinBoard')

If I call `bulletinManager.dismissBulletin(animated: true)` when the bulletin has already been dismissed, it crashes saying `BLTNItemManager must only be used from the main thread.` If the `dismissBulletin()` function is called immediately after the manager has been dismissed, `bulletinManager.isShowingBulletin` is still `true`. There needs to be a check like "if the manager is no longer presenting, or is in the middle of dismissing, ignore the call to dismiss".

I'm using the latest version of BulletinBoard
I need to know when the bulletinManager has completed dismissal of the bulletin, however, there doesn't seem to be a way to do this. Could someone add it in so we can have:

    bulletinManager.dismissBulletin(animated: true) {
       // completion block
    }
Thanks!
**Problem Description:**
How do I show a specific page/BLTNItem on demand?

**Steps to reproduce:**
Say I have a selection of 5 bulletins (created like in the documentation), and on press of a button I only want to show bulletin number 4

Currently I'm using:
`bulletinManager.showBulletin(above: self, animated: true)
`
`let fourthItem: BLTNItem = makeFourthPage()
`
`bulletinManager.push(item: fourthItem)
`

**However**, I get a "glitch" during the showBulletin animation where it very briefly shows the root item for half a second before pushing the intended Item.

I've tried changing the order, so creating and pushing the item first, then "showBulletin" but I get this error:

> You must call the `prepare` function before interacting with the bulletin.

**Environment:**
 - Device: iPhone XR
 - OS: 12.1
 - Version of BulletinBoard: latest
**Problem Description:**
The action buttons/handlers do not work.

**Steps to reproduce:**
1. Install via Pods
2. `@import BLTNBoard`
3.
```
    BLTNPageItem *page = [[BLTNPageItem alloc] initWithTitle:@"Notifications"];
    page.descriptionText = @"Receieve latest news.";
    page.actionButtonTitle = @"Allow";
    page.alternativeButtonTitle = @"Decide later";
    
    page.actionHandler = ^(BLTNActionItem * _Nonnull _item) {
        [self requestNotifications];
    };
    
    BLTNPageItem *introPage = page;
    BLTNItemManager *man = [[BLTNItemManager alloc] initWithRootItem:introPage];
    
    [man showBulletinAboveViewController:self animated:YES completion:nil];
```
4. Launch the app
5. Tap `Allow` on the `BulletinBoard`
6. Nothing happens. Tapping the ( X ) in the top right doesn't commit any action either.

**Environment:**
 - Device: iPhone X
 - OS: iOS 12.1.x / Xcode 10.1
 - Version of BulletinBoard: 3.0.0
