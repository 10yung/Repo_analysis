I wanted to use hexyl as a library to pretty print the memory of a VM I am working on, for error dumps. The memory is just `[u8; 4096]` so I imagine it should be pretty simple, but I couldn't find an example of how to use this as a library.
https://github.com/sharkdp/hexyl/blob/67b6c2533d47af6547894b04263243fbff9661a2/src/lib.rs#L38-L40

I guess that can be simplified to just look for `is_ascii_graphic`:
```
else if  self.0.is_ascii_graphic()
```

I would also prefer to change the name of the variable "AsciiPrintable", because "printable" normally also includes the space.
https://packages.debian.org/buster/hexyl
https://packages.ubuntu.com/eoan/hexyl
I have tried to implement the syntax suggested in the discussion on issue #16.

```
$ hexyl --range 512:1024 # Means "start at 512th byte, read until byte 1024 (512 bytes)"
$ hexyl --range 512:+512 # Means "start at 512th byte, read 512 bytes"

$ hexyl --range +512:    # Means "start at 512th byte".
```

I did not add support for negative offsets simply because I do not see a simple way to implement it for `Stdin`. If required, I suppose it could be implemented with a buffering solution that reads `M - N` bytes into a buffer until it reaches the end of `Stdin` before passing it to a reader.

My solution differs from #43 by not modifying the Printer itself, merely the Reader that it receives. This means that it works just as well for `Stdin` as for a file. A consequence of this is that the bytes are no longer automatically "aligned" in the output, but that just might be what you want in this situation.

```
$ hexyl -r :+0x20 hexyl
┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00000000│ 7f 45 4c 46 02 01 01 00 ┊ 00 00 00 00 00 00 00 00 │•ELF•••0┊00000000│
│00000010│ 03 00 3e 00 01 00 00 00 ┊ 30 d1 02 00 00 00 00 00 │•0>0•000┊0×•00000│
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘

$ hexyl -r 0x3:+0x20 hexyl
┌────────┬─────────────────────────┬─────────────────────────┬────────┬────────┐
│00000003│ 46 02 01 01 00 00 00 00 ┊ 00 00 00 00 00 03 00 3e │F•••0000┊00000•0>│
│00000013│ 00 01 00 00 00 30 d1 02 ┊ 00 00 00 00 00 40 00 00 │0•0000×•┊00000@00│
└────────┴─────────────────────────┴─────────────────────────┴────────┴────────┘
```

This is my first contribution of Rust code and I welcome suggestions that can help me improve! :)
| Unit    | Implemented?      | Description                                                                                                                                                                     | Examples                                                                             | Suggested implementation                                                                                                    |
| ------- | ------------      | -------------------------------------------------------------------------------                                                                                                 | --------------------------------------------------------------------------------     | -----------------------------------------------------------------------------------------------------------------------     |
| Decimal | [x]               | A decimal integer, which is equivalent to specifying a single byte unit for the count.                                                                                          | `23`, `1024`                                                                         | `u64::from_str(...)`                                                                                                        |
| Hex     | [ ] Maybe in #45. | A hexadecimal integer. Specified with a leading `0x`.                                                                                                                           | `0x17`, `0x100`                                                                      | `u64::from_str_radix(...)`                                                                                                  |
| Blocks  | [ ]               | A single block, which is by default 512 bytes but configurable via config flag.                                                                                                 | `-b 512 -n 1block`<br><br>N.B: one cannot use a block unit to define the block size. | Add a flag to optionally define block size, then check for a trailing `block` when parsing numbers. Multiply by block size. |
| Bytes   | [ ]               | A byte size familiar to most IT professionals. Specified by `B` at the end of the count, and can include an optional magnitudinal spec like kilobytes (`K`) or megabytes (`M`). | <ul><li>`23B`: 23 bytes</li><li>`9KB`: 9 kilobytes</li></ul>                         | Implement a regex of the form `(?P<count>\d+)(?P<magnitude_unit>[KM]?)B`.                                                   |

## Other open questions

* **Should the block unit, which might be controversial, be scoped into another issue?**
* **Should a single leading `-` or `+` sign be supported?**
	* Not sure how `+` is useful -- `xxd`'s manual states that for [the `-s` option](https://linux.die.net/man/1/xxd) `+` is useful only for `stdin`. Not sure what that means, though.

new option `-s'

![hexyl_new](https://user-images.githubusercontent.com/9898837/51334186-a3776800-1ac2-11e9-945a-6448cf9291a2.png)

related issue : #16 
Some kinds of characters (including ruled lines,  `×`, and `•`) have east asian (ambiguous width) characters, so they have single width in some environments, and double width in some environments.
In area where such characters have double width (mainly east asia), output layout of current hexyl (v0.3.1) is broken.

![screenshot-2019-01-12-205304 0900](https://user-images.githubusercontent.com/1246590/51073245-5144da00-16b1-11e9-82ac-d1a88e2c9f45.png)

There are some way to fix this:

* Know line characters width (by `wcwidth`, CLI options, or something), and use appropriate number of line characters.
    + However this won't solve `×`, and `•` issue.
* Or, use only ASCII characters when user wanted.
* Or, make symbols configurable (through config file or CLI options?)

If those characters are made configurable, #17 will be solved at the same time.
![screenshot](https://user-images.githubusercontent.com/173219/51072870-69006c00-1679-11e9-8e8d-d6655c2d14be.png)

It should probably handle SIGINT and terminate the output as if it was EOF (but maybe with some mark):

    │00001410│ 57 37 f9 ae 0b ae 6c 8a ┊ df 0e d8 20 15 f1 d7 f6 │W7××•×l×┊×•× •×××│
    │00001420│ a5 5e 99 b0 bd bf 22 a7 ┊ b2 e0 ab ^C             | ×^×××"×┊×××^C   |

The `-n/--length` flag is a great feature -- good especially for quickly checking if file headers match something. Another use case I can think of for limited output is inspecting, say, an entire block of some data from a file that's been dumped from a disk. Let's say I'm using Linux and reading the first block of a disk somewhere to determine its contents manually:

```
$ hexyl -n 512 "$disk_dump"
// Some output here...
```

I read the output and discover that there's an MBR at the beginning, with the first partition starting at logical block address 1. Sweet, let's mosey on over to 0x200 and read another block. I could implement this by using `dd`:

```
$ input_file="_viminfo" block_size=512 block_num=1
$ dd bs="$block_size" status=none skip="$block_num" count="$block_size" if="$input_file" \
    | hexyl
```

...but there's two issues with this:

* `dd` isn't usually available on Windows machines!
* Because we're using `stdin`, we can't get the correct set of offsets -- the "file" starts at 0x0 regardless of what parameters I gave `dd`.

Perhaps something like this spitballed set of options might help:

```
$ hexyl \
    --start 512      \ # Could also be written as 
                     \ #
                     \ # Could be bikeshed to `--begin`?
                     \
    --length 512     \
                     \
                     \ # One could use an end offset instead of a length:
    # --end 1024     \ # Could also be written as `-e 0x300
```

I would be more than happy to push implementation of this, since I've great personal interest in allowing more of my reverse engineering flow in the terminal. Let me know if you want me to hack on it!

### Unresolved questions

* Adding several more arguments that accept offsets/sizes might add pressure to create a system of units/radices a la `xxd` for the appropriate arguments. Where should the line be drawn in terms of what this project is willing to support?
This is excellent, and the default width of 16 is great! It'd be really nice if we could print according to custom alignments, though -- this is a fairly standard feature in most hex editors, and I can't imagine it being egregiously complex to add this.

Another couple of ideas:
* Getting the max width based on a *provided* terminal width would be nice -- this would let me simply plug in a width and let `hexyl` calculate the space overhead of borders for me.
* An auto-width flag (which is like the above for the current terminal width) to be used would also be handy -- it would have some overlap with the above, but there could be reasons for setting

Prototypical suggestion for options:

```
# Ideas for a fixed column width:
-c --columns        Sets the number of hex data columns to be displayed.
                    Cannot be used with other width-setting options.
-w --width

# Ideas for terminal auto-width:
-a --auto-width     Sets the number of hex data columns to be adjusted according
                    to the detected terminal width. Conceptually, this could be an
                    alias of `-t $terminal_width`.
                    Cannot be used with other width-setting options.

# Ideas for fixed terminal width:
-t --terminal-width Sets the number of terminal columns to be displayed.
                    Since the terminal width may not be an evenly divisible by the 
                    width per hex data column, this will use the greatest number of 
                    hex data columns that can fit in the requested width but still
                    leave some space to the right.
                    Cannot be used with other width-setting options.
```

I'm more than happy to push on this, if effort is a concern. :)