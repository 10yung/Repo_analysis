In javascript style guide, According to rule 7.7, if i trying to access property key of opts by using dot notation(.) or square bracket([]) there is chances of  type error.
Why?
Because, if opts receive null value when 'handleThings' function invoked then default value empty object({}) not assign to the opts argument. So, this is happen then user will get uncaught type error.
Example:
```
function handleThings(opts = {}) {
console.log(opts.notificationEnabled)
 }
handleThings(null)
```
When you run this code you will get an error called "Uncaught TypeError: Cannot read property 'notificationEnabled' of null".
I noticed that babel-preset-airbnb added the following stage 4 proposals in [v4.2.0](https://github.com/airbnb/babel-preset-airbnb/blob/master/CHANGELOG.md#420---20191114):

- @babel/plugin-proposal-nullish-coalescing-operator
- @babel/plugin-proposal-optional-chaining

Are there any rules/guidelines for these features?
The max-classes-per-file rule is enabled in rules/best-practices.js but there is no mention of this requirement in the docs.  If this is a best practice, I'd like to know why. 
The following comment:

https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb-base/rules/style.js#L314-L316

implies that there should be no new lines at the beginning of a file. But that is not what the rule is configured to do. Currently, the rule allows one empty line at the beginning of a file, which seems strange. For example:

Dog1.js
```
// This is how my dog class should be, with no empty lines at the beginning of the file
class Dog {}
```

Dog2.js
```

// I accidentally put a new line at the beginning of the file,
// but the Airbnb eslint rules don't care about this and give no errors
class Dog {}
```

Dog3.js
```


// I accidentally put two new lines at the beginning of the file,
// the Airbnb eslint rules care about this and throw an error
class Dog {}
```

It looks like `maxBOF: 1` should be changed to `maxBOF: 0`, correct me if I am wrong.
When rounding data, it is recommended to use the method under "math" for operation of pure numeric data, and "parseInt" for string type numbers, which is more semantic and more in line with the definition of function parameters
Part 1:

The current Airbnb config has the "import/extensions" ESLint rule turned on. However, the reasoning for this is not given on the official style guide, and even the fact that the rule is turned on at all is not documented on the style guide. For example, there should be a blurb added to the [section on modules](https://github.com/airbnb/javascript#modules) that says something along the lines of:

```
// bad
import foo as './foo.js';

// good
import foo as './foo';
```

Question 1 - Can this be added / documented?

---

Part 2:

I searched around for some justification for this rule. In #1633, @ljharb says that 

> You're not supposed to use the extension there. The best practice for file extensions on imported code is to omit them, which is why our config requires that as well.

and:

>  the only time you should use extensions in require/import paths is if you're importing JSON files, or if you've made any nonstandard changes to allow requires of alternate extensions, like .css or .svg or .jpg. With .js, .jsx, or .mjs files, you should always omit the extension.

Question 2 - Why exactly is it best practice that they should be omitted? Is it just so that ES6-style module imports more-closely mimic the old, CommonJS-style imports? If so, that seems like a superficial reason.

And related: Even Mozilla has file extensions in their [official documentation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import) for the import statement. So is there disagreement about what is best practice or is Mozilla in error here?

---

Part 3:

In #2121, some users bring up the fact that the "import/extensions" rule **breaks** code written for browsers without any transpilation. @ljharb counters with:

>browsers do not care about extensions whatsoever; only node does.

From a technical standpoint, browsers do not care about file extensions. But the fact of the matter is that on a lot of websites (or even most websites?), JavaScript files are served to the browser from a "public" subpath (or something similar) that maps to an internal file system. So, at least for a lot of websites,  **the file extension is required in the import statement** for ES6-style modules to work.

@ljharb also says:

> Regardless, you'll want to always use a bundler and transpile to CJS for the forseeable future.
> 
> If you make a different choice, you may want to override some of our linter settings, all of which assume you're following the best practice of using babel and a bundler.

I can understand that if most of the people in the JavaScript ecosystem are using a bundler, then the Airbnb default settings should be designed for people bundling. However... bundlers can handle file extensions just fine!

Question 3 - Would it make more sense to flip the rule and always require extensions? That way, any particular piece of JavaScript code will just work in **both** bundled-environments and non-bundled-environments.

---

Part 4:

As a final point here, I'd like to reflect on why Airbnb has decided to enforce ES6-style imports at all. The style guide gives the following justification in the modules section:

> Why? Modules are the future, letâ€™s start using the future now.

But **why** exactly do we need to start using the future now? In my mind, it has to do with transpilation. The hypothetical, more-verbose version of the above sentence might read something like the following:

> Why? In the future, all browsers will support all of the latest JavaScript features. And when that day comes, you might feel the need to convert all of the modules in your application to ES6-style in order to get the code up-to-date. But there is a way to avoid this future workload - simply write your application with ES6-style modules **now** and use transpilation in the meantime until browsers catch up. One day, transpilation will be unnecessary, and your code will just work! Modules are the future, so letâ€™s start using the future now.

If this is indeed the reason why we should start using the future now, then I can totally get on-board with the decision to require ES6-style imports as a ESLint rule - being future ready seems like a good thing. But if the end goal is to make transpilation unnecessary, then enforcing the "import/extensions" rule seems like a step in the **opposite direction**, because it forces code to be transpiled for perpetuity.
Link to the translation of the React Style Guide in [Bahasa](https://github.com/agusID/react-style-guide).
This might have been gone over before, but a common practice for event handlers (currently documented as `/^on.+$/`) is to start them with `handle...`, as in `handleClick()`. This is seen all over the React docs, including the home page, and it allows a clear convention for names of props (`/^on.+$/`) vs handlers defined on that instance (`/^handle.+$/`).

Since some people might allow usage of `on` as the method name of a handler, is there any opposition to add (`/^handle.+$/`) before the (`/^on.+$/`) entry for the `react/sort-comp` rule?
Just for be more visual, i was create a logo for readme :)
Enforces the existing [airbnb style guide rule about default parameters coming last](https://github.com/airbnb/javascript#functions--defaults-last) in eslint by using [default-param-last](https://eslint.org/docs/rules/default-param-last).

As this rule was introduced in ESLint 6.4.0, I bumped the eslint version in `package.json` but I am not sure if that is the right thing to do? This is my first PR in this repository. ðŸ˜¨ 