Also checkout specific tag of bats-core instead of using master.
Firstly, I'm sorry if there is already a method to achieve named environments (explained below) in `asdf` in a simple way. This feature request is probably a duplicate of #167, but the issue was proposed/closed in 2017 and the feature didn't really gain much traction so I'm making this again here.

### The motivation of the feature

Currently `asdf` allows installing different versions of the same interpreter, for example the v3.7 and v3.8 of `python`. A direct consequence of this approach (I'm not sure if it's intended or not...) is that it allows users to install different versions of packages (or does anything that touches the global state) in a non-interfering way. This capability is very, very useful when managing multiple projects that use the interpreter, since that means that one can carefully control the set of packages that are used in each project. It allows reproducible environments, or removal/cleanup of environments when they are not needed.

However as `asdf` primarily being a version manager, it only provides this isolation between two different versions of the same interpreter. For example, it doesn't allow have two instances of `python` v3.8 with different packages. As `asdf` already provides the groundwork of managing binary shims and providing isolation, it would be beneficial to provide the same capabilities in a more general method.

### A detailed description of how the feature would work

The `asdf-install` command will be extended to accept a third argument, the environment name, as in `asdf install [<name> <version> [<environment-name>]]`. The environment name will default to the version. 

When the `asdf-install` command is invoked, the directory `${asdf_data_dir}/installs/${plugin}/${environment_name}` is created, and the usual process of invoking the plugin and building the environment should be executed. This can be (relatively) easily achieved by just passing the environment name instead of version when calling `get_install_path`.

The `asdf-global`, `asdf-local`, and `asdf-shell` should gain support for setting the environment name instead of a version, and the shim scripts would then allow launching from `${asdf_data_dir}/installs/${plugin}/${environment_name}/bin/`, and other commands like `asdf-list` should also support the environments feature.

For example, let's say that a user is developing three python projects, one depending on 3.7.6 and the other two on 3.8.1.

The user could execute the following commands:

```shellsession
$ asdf install python 3.7.6 project-a
python-build 3.7.6 /Users/username/.asdf/installs/python/project-a
python-build: use openssl@1.1 from homebrew
python-build: use readline from homebrew
Downloading Python-3.7.6.tar.xz...
-> https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz
...
$ asdf install python 3.8.1 project-b
...
$ asdf install python 3.8.1 project-c
...
$ cd ./project-a && asdf local python project-a && cd ..
$ cd ./project-b && asdf local python project-b && cd ..
$ cd ./project-c && asdf local python project-c && cd ..
$ cd ./project-a && python --version && cd ..
Python 3.7.6
$ cd ./project-b && python --version && cd ..
Python 3.8.1
```

This would allow three `python` interpreters be installed on the system, located on `~/.asdf/installs/python/{project-a,project-b,project-c}`.

### Steps to reproduce

On OSX run:

`bats test`

### Expected behavior

Tests should pass as they were before.

### Actual behavior

Many failing tests are encountered. And some tests hang indefinitely. An example error I captured from a single test:

```
/Users/trevorbrown/.asdf/bin/asdf: line 82: /var/folders/7m/9bq62tmj60zf14d788w0lk8c0000gp/T/asdf.XXXX.ed4MwuLg/home/.asdf/lib/commands/command-help: No such file or directory
```

### Environment

**OS**: 10.15.1
**asdf version**: v0.7.6-bde7ae5

# Summary

This PR extends the feature added in #575 to `asdf global` and `asdf local`. Users can now specify the global or local version of a tool as the latest installed version.

```shell
asdf global python latest
asdf local python latest
asdf local python latest:3.7
```

It also adds the ability to filter installed versions with `asdf list`:

```shell
# only list installed versions of Python 3.7
asdf list python 3.7
```
In fresh install

```
asdf plugin-list --urls
```
only outputs names and not urls.
If ASDF_DATA_DIR variable is undefined it will assign an empty value to
it so bash instances running with set -o nounset can run the script
without error.
# Summary

Changes plugin update to use separate function
# Summary

I've only just started using asdf, and (similarly to https://github.com/asdf-vm/asdf/issues/366), I have `~/.tool-versions` as a symlink to a config repository of mine. Running `asdf global global <plugin> <version>` fails, apparently due to a bug in relative symlink resolution.

I've modified the relative symlink test, and verified that it fails without my change to utils.sh.

Fixes: https://github.com/asdf-vm/asdf/issues/366

Hope this helps! :slightly_smiling_face: 

# Summary

Previously, the shims directory was only excluded for system versions, which meant that `asdf exec` would fall back to a shim if the install didn't have the desired binary. If the shims are up to date this isn't a problem since we check the metadata, but if those were out of sync the command would just infinitely recurse.

I'm not sure what the reason was for the current setup, but I looked through the uses of the function and I'm not seeing anywhere it is required.

Fixes: No issue

## Other Information

I also made a small tweak to the config test to make it pass, it was picking up my user `.asdfrc`.
I would like to have a config option to have shims only at the end of PATH or to leave them out completely. Currently the ~/.asdf/asdf.sh script is rather opinionated about where the shims should be. The ~/.asdf/asdf.sh should respect the choice set in ~/.asdfrc

I propose to add the following option to the configuration:
shims-path = option
Available options would be top [default], end, none

Before I make a pull request with this feature I am hoping for a green light, that this contribution would be welcome.

Rationale: Why would you want to use asdf without shims? There are other options to leverage the version management that doesn't need them, such as the direnv plugin. Shims can get in the way, especially when they shadow system tools. I use the shims at the end of path only for catching the error message that the command is available in asdf, but currently not activated. I don't want to see this error message if a command is available in my PATH behind the shim. Currently the shim intercepts calls to for example `clear` if I have python miniconda installed. 

Making a config option available is the least disruptive way of achieving my goal other than a local-only solution. The more disruptive proposal would be to suggest a change in the behaviour of shims, to default to system if the tool is available on the system. The proposed config option would be opt-in and very easy to implement (only some changes in ~/.asdf/asdf.sh are needed.)