```kotlin
import khronos.Dates.today
import khronos.day

fun main() {
	val d = 0.day.ago
	val n = today
	println(d)
	println(n)
	println(d > n)
	println(0.day.ago > today)
}
```

```
Mon Jan 06 14:29:48 MSK 2020
Mon Jan 06 14:29:48 MSK 2020
false
true // incorrect - expect `false`
```
```kotlin
fun main() {
	val n = Dates.today
	println(n)
	println(n - 1.month)
	println(1.month.ago)
	println(n - 1.day)
	println(1.day.ago)
	println(1.week.ago)
}
```

output:
```
Mon Jan 06 14:13:28 MSK 2020
Mon Jan 06 14:13:28 MSK 2020 // expect December 2019
Mon Jan 06 14:13:29 MSK 2020 // expect December 2019
Sun Jan 05 14:13:28 MSK 2020
Sun Jan 05 14:13:29 MSK 2020
Sun Dec 30 14:13:29 MSK 2020
```

khronos version: 0.9.0
JVM: 1.8
Kotlin: 1.3.61
I like your library and it's very readable and use to fun. One thing I am wondering is if there is  any multi-thread issue because your implementation has one instance.

internal val calendar: Calendar by lazy {
    Calendar.getInstance(DateHelper.getSydneyTimeZone())
}

From my understanding, lazy it doesn't create more than one instance and when thread1 and thread2 tries to update date, it think there could be a race condition. What do you think?

Why 1.month is 0 based and is not consistent with other properties?

This very confusing when ```1.month.ago == today```

```kotlin
    val monthAgo = 1.month.ago.month
    val today = Dates.today.month
    assert(monthAgo == today)
```
It's the same problem has #16.

The problem is the same for tomorrow and yesterday.

`30.days.ago.beginningOfDay.time`

The values are off by a few millis.

1508437800629
1508437800649

However `Dates.today.endOfDay.time` returns the same value for every invocation.

It's high priority, may be there are some bugs related to timezone...

1.5.hour
