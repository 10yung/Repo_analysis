First, thank you for such  a useful package! I am not familiar to bitstamp data so have this question:

I assume extdata/2015-05-01.log.xz is the raw market data recording, it already has trades in it. Why does the package spend time on inferring the trades from orders?

<img width="189" alt="Screen Shot 2020-01-13 at 3 06 43 PM" src="https://user-images.githubusercontent.com/41779116/72237787-ad20a680-3616-11ea-9417-20cf73effa00.png">
the inferred trades count is 482

<img width="614" alt="Screen Shot 2020-01-13 at 3 06 15 PM" src="https://user-images.githubusercontent.com/41779116/72237788-ad20a680-3616-11ea-93d5-156aded9a3fd.png">
parse.sh explicitly filters trades and generates the orders.csv

<img width="448" alt="Screen Shot 2020-01-13 at 3 05 58 PM" src="https://user-images.githubusercontent.com/41779116/72237789-ad20a680-3616-11ea-852e-3fa6b32e0b49.png">
the log has 575 trades, which is different from number of inferred trades. 

the individual orders and trades are usually directly provided by exchanges, so why does the package spend time on inferring trades from orders? 
Bitstamp provides APIs for Live Orders and Live Ticker (i.e. trades) as described [here ](https://www.bitstamp.net/websocket/). Sometimes Live Orders API outputs incorrect data as shown below.

Here is the trade record received from Live Ticker API:
![2018-10-14 12-52-22](https://user-images.githubusercontent.com/949629/46915209-04b60980-cfb1-11e8-893a-5769a4c39336.png)
The record contains price and amount of trade as well as buy and sell order IDs. 

Here is the records from Live Orders API for orders participated in the above trade:
![2018-10-14 12-53-03](https://user-images.githubusercontent.com/949629/46915222-4050d380-cfb1-11e8-9b5d-c73f2b1874d8.png)

(both screenshots are taken from PostgreSQL database where the data received from API are saved)

Correct row 6 corresponds to sell order 2269748432. 'fill' column equals to trade amount, timing is ok etc. 

Incorrect row 5 corresponds to the buy order. It is incorrect because it reports the cancellation of the buy order for  'amount' column didn't change comparing to the previous event for the order. That is equivalent to zero 'fill' - no trade. 

Thus processData() function should probably handle the data from both APIs together to produce reliable results.


These orders are shown as long stripes: 

![default](https://user-images.githubusercontent.com/949629/46680145-17b38d00-cbf1-11e8-8b93-9fbea2ae4e57.png)

The picture showing correct 'depth':
![default](https://user-images.githubusercontent.com/949629/46680246-55b0b100-cbf1-11e8-83bc-2af2e889c68e.png)




An order that started out as a market order, came to rest in the order book and has not been filled since then is classified as 'market' instead of  'market-limit'
Below is an excerpt from  ["Example limit order book data"](https://github.com/phil8192/ob-analytics/blob/master/man/lob.data.Rd) (`lob.data$events`) showing 'changed' events for 'market' orders that do not have a corresponding limit order event (`matching.event` equals  NA):

![2018-10-02 17-58-04](https://user-images.githubusercontent.com/949629/46359445-fba07080-c671-11e8-8d56-3ae838caf846.png)

It appears that the trades corresponding to the above events are missing from `lob.data$trades` . The total number  of 'market' and 'market-limit' events with `matching.event` equals NA is 43 while the number of trades in `lob.data$trades`  is 482. Thus approximately 8% of trades are missing?







```
processing 2017-07-05.csv...
Warning messages:
1: In matchTrades(events) :
  07/05/17 : 1 jumps > $10 (swaping makers with takers)
2: In deleted[deleted$id %in% created.deleted.ids, ]$volume == created[created$id %in%  :
  longer object length is not a multiple of shorter object length
3: In setOrderTypes(events, trades) : could not identify 534784 orders
```
https://www.iextrading.com/trading/alerts/2017/011/

recently made available by IEX, full depth of their order book.