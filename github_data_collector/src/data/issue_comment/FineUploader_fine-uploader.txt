After almost 7 years of developing and maintaining this project, I've decided that it's time to archive this (and all other) repositories in the Fine Uploader organization and effectively shut down the project.

I've decided to do this for a number of reasons, here are a few:

1. I no longer have any use for an enterprise-class JS upload library like Fine Uploader in my personal life or in any work projects.  
2. I lack the motivation to continue to contribute to this project.
3. I lack the free time at this point in my life to continue to maintain and develop a project of this scale, and the codebase has languished for a little while already.
4. I've grown tired of continuously defending my inactivity and decisions against trolls on Twitter, the issue tracker, and elsewhere. It's draining and I don't have the patience or energy to deal with it any longer. These same people expect to impose their short-sighted and non-generalized values and goals on a project for which they have contributed nothing and are not willing to maintain. The sense of entitlement from a small but vocal minority that do not understand FOSS and refuse to understand it is very much a concern, and I'm simply not interested in shrugging that off anymore. 
5. There isn't sufficient momentum behind this project any longer, as such I haven't been able to find the appropriate dedication from the community to not only continue developing this library, but to maintain it going forward.
6. The first incarnation of this codebase is almost 9 years old, and the last major refactor/rewrite was ~5 years ago. That's an eternity in frontend code years. The amount of time required to bring the codebase back up to speed and adjust the mistakes I made years ago as a new frontend developer are simply not possible, due to time and motivation constraints.

I'm going to archive the project shortly, but anyone, of course, is free to fork it and do whatever they please, as this repo will still be available, albeit in read-only mode. I've also locked this issue, as I'm not soliciting input. I've created this for transparency purposes.

For everyone that has helped out on this long journey, I appreciate your efforts, and I hope you understand that it's time for this project to fade off into the sunset. Fine Uploader was my first opportunity to develop something meaningful on the frontend, and I've been able to grow tremendously as a developer as a result. I know Fine Uploader has been an important attribute of many applications, and I'm glad I was able to be a part of that.
## Type of issue
- Bug report

## Uploader type
- Traditional
- S3

### Note: Support requests cannot be accepted due to lack of time.

<details>
<summary>Bug Report</summary>

#### Fine Uploader version
5.16.2

#### Browsers where the bug is reproducible
Any browser

#### Operating systems where the bug is reproducible
macOS

#### Exact steps required to reproduce the issue
For example:
1. Multiple uploads on
2. validate on item limit (eg 3)
3. Drag too many files (eg 4)

#### All relevant Fine Uploader-related code that you have written


#### Your Fine Uploader template markup (if using Fine Uploader UI and the issue is UI-related)
{simply copy and paste your template markup}

#### Detailed explanation of the problem
{describe the bug here}
</details>

` [Fine Uploader 5.16.2] Caught exception in 'onError' callback - this._uploadData.retrieve(...) is undefined 
util.js:241:42
qq.log                                 util.js:241:42
log                                      uploader.basic.api.js:304:16
safeCallback                     uploader.basic.api.js:1964:20
_wrapCallbacks/</self._options.callbacks[callbackName] uploader.basic.api.js:1975:31
_batchError                       uploader.basic.api.js:502:12
_batchError                       uploader.api.js:662:12
_onValidateBatchCallbackSuccess   uploader.basic.api.js:1684:16
qq.bind/<                           util.js:691:23
_handleCheckedCallback      uploader.basic.api.js:1086:16
_prepareItemsForUpload       uploader.basic.api.js:1723:12
_prepareItemsForUpload       uploader.api.js:685:12
addFiles                                   uploader.basic.api.js:110:16
processingDroppedFilesComplete             uploader.api.js:150:28
uploadDroppedFiles               dnd.js:29:8
onDrop/<                                dnd.js:180:24
then                                        promise.js:32:16
onDrop                                   dnd.js:178:61
attachEvents/<                      dnd.js:481:16
`
and therefore any callbacks hang then

## Type of issue
- [x] Bug report

## Uploader type
- [x] Traditional

<details>
<summary>Bug Report</summary>

#### Fine Uploader version
5.16.2

#### Browsers where the bug is reproducible
"Firefox"

#### Operating systems where the bug is reproducible
"Windows 10"

#### Exact steps required to reproduce the issue
For example:
1. Set `autoUpload = false`
2. Add a blob `addFiles([blob])`
3. Call `uploadStoredFiles()`

#### All relevant Fine Uploader-related code that you have written
```javascript
    // src is a base64 encoded image
    fetch(src)
      .then(res => res.blob())
      .then(blob => {
        uploader.methods.addFiles([blob]);
        uploader.methods.uploadStoredFiles();
      })
```
</details>

#### Detailed explanation of the problem
<details>
Blob uploads only work with auto upload. It fails if autoUpload is set to false and uploadStoredFiles() is called subsequently.

It returns `No files` error
</details>





Hi, thanks for this great library! I found one issue when using `stopOnFirstInvalidFile` and `<dialog>` elements in Chrome. 

## Type of issue
- [x] Bug report
- [ ] Feature request

## Uploader type
- [x] Traditional
- [ ] S3
- [ ] Azure

<details>
<summary>Exception when you use `stopOnFirstInvalidFile: true` option and native dialogs.</summary>

#### Fine Uploader version
5.16.2

#### Browsers where the bug is reproducible
Chrome

#### Operating systems where the bug is reproducible
Windows 10

#### Exact steps required to reproduce the issue
1. Use `validation.stopOnFirstInvalidFile: true` because you don't want to stop uploading files when you select a lot of files and some of them don't pass validation (because their extensions is not provided in `validation.allowedExtensions` list)
2. Use HTML 5.1 `<dialog>` element in template
3. Drag and drop two files with extensions that are not specified on `validation.allowedExtensions` list
4. Error in browser occurs, and uploader state is messed up (visible loader after you close dialog)
![image](https://user-images.githubusercontent.com/2056282/47355125-d62ae380-d6c0-11e8-89a8-63f92d129bbd.png)
And when you close dialog, you got loader that's still visible
![image](https://user-images.githubusercontent.com/2056282/47355152-e80c8680-d6c0-11e8-9279-77ea581d35c5.png)

Looks that we try to call `showModal` on already opened `HTMLDialogElement` and this is causing error. Quick fix is to just not use `<dialog>` element and use `alert` or some other custom popup. But since `<dialog>` are in default templates and normally just works out of the box on Chrome it would be nice to have it working in this case also.
I guess the best experience is to show second message after first one is close (to resemble behavior of `alert` calls) but simply showing first message and ignoring other would be ok too (at least there won;t be an error)


#### All relevant Fine Uploader-related code that you have written
Just parts of code, because I can;t share everything
```js
const fineUploader = new qq.FineUploader({
    element: element,
    template: templateDomElement,
    // .
    // .
    // .
    validation: {
        stopOnFirstInvalidFile: false,
        allowedExtensions: [
            'jpg', 'jpeg', 'png'
        ]
    },
    // .
    // .
    // .
    //showMessage: message => {
    //    alert(message);
    //}
});
```
```html
        <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
            <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
        </div>

.
.
.
        <dialog class="qq-alert-dialog-selector" style="margin-left:auto; margin-right:auto">
            <div class="qq-dialog-message-selector"></div>
            <div class="qq-dialog-buttons">
                <button type="button" class="qq-cancel-button-selector">@Html.GetResource("Close")</button>
            </div>
        </dialog>
```

#### Stack trace
```
templating.js:1042 Uncaught DOMException: Failed to execute 'showModal' on 'HTMLDialogElement': The element already has an 'open' attribute, and therefore cannot be opened modally.
    at qq.Templating.showDialog (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:6:13421)
    at Object.showMessage (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:5:31111)
    at qq.FineUploader._itemError (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:5:28231)
    at qq.FineUploader._validateFileOrBlobData (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:3:14787)
    at qq.FineUploader._onValidateCallbackSuccess (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:3:11079)
    at Object.onSuccess (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:2:8652)
    at qq.FineUploader._handleCheckedCallback (http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:3:1001)
    at http://localhost:54080/Scripts/libs/fine-uploader/fine-uploader.min.js:3:5899
```


</details>

## Type of issue
- [ ] Bug report
- [X] Feature request

## Uploader type
- [X] Traditional
- [ ] S3
- [ ] Azure

<details>
<summary>Feature Request</summary>

Allow resume data to be removed for a particular file id/uuid to allow the possibility of restarting an upload without resuming.
</details>

## Type of issue
- [ ] Bug report
- [X] Feature request

## Uploader type
- [X] Traditional
- [ ] S3
- [ ] Azure

<details>
<summary>Feature Request</summary>

The `getResumableFilesData()` function could return a few extra bits of interesting information, e.g. the amount already uploaded, number of total parts, and the id of the `localStorage` key.

In fact I think it might already be trying to add the key to the object but it is retrieving it from the wrong place (`uploadData.key` instead of just `key`):
`                if (uploadData.key) {
                    data.key = uploadData.key;
                }
`
Would it be possible to also return these in the `getResumableFilesData()` data structure?

</details>

## Type of issue
- [ ] Bug report
- [x] Feature request

## Uploader type
- [ ] Traditional
- [ ] S3
- [x] Azure


<details>
<summary>GetSasKey => cache storage to avoid asking for a new sas key if the last one is still valid for a long time [...]</summary>

If a sas key has a lifetime of 5 minutes and the last request was made 2 seconds before... it is not required to request a new one. It is more important with concurrent calls (many calls for a same sas key).

We use 4MB chunks and concurrent is enabled. 4Mb is a good compromise for bad connections and concurrent helps good connections.
Before each PUT request, a call is made to get a fresh SaS key. Our SasKey duration is 5 minutes.
Client may avoid requesting the server for a fresh SasKey during for instance 1 minute.
Why : this avoid for a very good connection to got many getSasKey request while the SasKey is still valid.
Why not much more than 1 minute : for bad connections to avoid having an invalid saskey for a given block blob.

Possible evolutions:
- an option to specify a sasKeyStorage : if not set, still as actually and if one is given then fineupload will try to use it first before sending a request
- not as good as the first one, because not good with all browsers : an option to avoid adding "timestamp" (withcacheburst method) so that the server can set an http cache respone to 1 minute for instance (browser cache).

</details>

## Type of issue
- [ ] Bug report
- [x] Feature request

## Uploader type
- [ ] Traditional
- [x] S3
- [ ] Azure

<details>
<summary>
I'm creating a cross-device application. I'm using react-native web to build a web and native application sharing code.

I almost nailed it using the fine-uploader to upload a video to S3 using the fine-uploader library. But unfortunately I couldn't get it to work for native.

I got it to work in Reactjs using the basic uploader without the dropzone you provide, because of react-native doesn't use html and css. Here is my example:
```js
import qq from 'fine-uploader/lib/core/s3'

let file = event.target.files[0]
let uploader = new qq.s3.FineUploaderBasic({
    request: {
        endpoint: 'endpoint',
            accessKey: 'accessKey'
        },
         ...
});

uploader.addFiles({name: file.name, blob: file});
```
Amazing how easy this was. i'm retrieving the file via a file input. On react native I use Expo ImagePicker.

The FineUploaderBasic is perfect, but it lives in the same file which uses code for the Element (which i don't need). This code contains document.createElement("input"), navigator.userAgent and probably more code which is not available in react-native. So when I import `fine-uploader/lib/core/s3`I get errors like `Can't find document`.

Is it possible that the FineUploaderBasic would live in it's own file? So you can import it separate like:  
`import FineUploaderBasic from 'fine-uploader/lib/core/s3/FineUploaderBasic'`
</summary>

#### Feature request details 
react-native-web is really cool, sharing almost all your code over native and web. Probably more people would like to upload videos to S3 easily via the fineuploader library
</details>

## Type of issue
- [ ] Bug report
- [x ] Feature request

## Uploader type
- [x ] Traditional
- [ ] S3
- [ ] Azure

### Note: Support requests cannot be accepted due to lack of time.


<details>
<summary>Feature Request: Allow to re-order images in the drag n drop area updating an index attribute in them</summary>


<details>
<summary>Feature Request: Allow to re-order images in the drag n drop area updating an index attribute in them</summary>

#### Feature request details 

Add the possibility of re-ordering images once uploaded. Assign an index to every image and allow re-ordering them through drag n drop.

We are building this interface where first we are uploading the images to our local server, and then later after posting a form, this images will fly to a remote location.  As part of the requirements for the job we have "the chance of ordering the uploaded images before submitting"
</details>

## Type of issue
- [ ] Bug report
- [x] Feature request

## Uploader type
- [x] Traditional
- [x] S3
- [x] Azure

<details>
<summary>Feature Request</summary>

#### Feature request details 

I think it is better to provide a use case.
You have a video stream recorder(webcam, audio, desktop etc.). During recording it generates Blobs which must be uploaded to S3. Currently, Fineuploader suppots only complete files which will be splitted to chunks and uploaded. Request is to provide more low level API for multipart chunked uploading, for example:

```javascript
let fileId = uploaderInstance.createMultipartUpload();
uploaderInstance.addChunk(fileId, blob1);
uploaderInstance.addChunk(fileId, blob2);
uploaderInstance.addChunk(fileId, blob3);
uploaderInstance.completeMultipartUpload(fileId);
```
</details>
