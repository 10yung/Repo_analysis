Is it possible to add an option `ssl_verify_mode` to `Dragonfly.app.configure` in order to use it here https://github.com/markevans/dragonfly/blob/master/lib/dragonfly/job/fetch_url.rb#L67-L80? 
```diff
def get(url)
  url = parse_url(url)

  http = Net::HTTP.new(url.host, url.port)
  http.use_ssl = true if url.scheme == 'https'
+ http.verify_mode = app.ssl_verify_mode unless app.ssl_verify_mode.nil?

  request = Net::HTTP::Get.new(url.request_uri)

  if url.user || url.password
    request.basic_auth(url.user, url.password)
  end

  http.request(request)
end
```
My model has 2 attachments
- original_uid
- image_uid

```
    dragonfly_accessor :original do
      copy_to :image
    end
    dragonfly_accessor :image do
      after_assign :process_image
    end
```

I am also using `retained_original` in my form.

The problem seems to be that:
- If I upload a graphic, and submit the form
- And the form Fails validation (thus filling the retained_original)
- And then I fix the form issue
- When I submit the form, the `original_uid` is set but the `image_uid` is NOT set.

Based on reading the source code it looks like the `"retained_#{attribute}="` method does not go through the `dragonfly_attachments[attribute].assign(value)` path, which prevents the [after_assign](https://github.com/markevans/dragonfly/blob/master/lib/dragonfly/model/attachment.rb#L55) callback from being fired.

My only idea right now is to remove the `retained_original` usage, since this is causing my models to end up in an unexpected situation.

Please let me know if I'm using these 2 features together incorrectly.
Allows us to specify nil for logger.
https://github.com/markevans/dragonfly/issues/486
Hi @markevans, one of the issues with fetching url-based files is the delay while the server downloads the file to store. Do you think there's a way to offload the download to a background process and immediately return? When the download completes, the meta-data can be updated in the database.

I can think that there'd probably be problems around broken URL's and other validation issues. I was just wondering if you've ever done any thinking around how that could potentially work?
Closes #498 

Allows optional headers to be passed to the request. The interface for headers is a bit weird so we need to loop the passed in headers and then add each one using a hash-like `[]` interface. It seems they can't be all added at once.
Hi @markevans, I hope all is going well in the leadup to Christmas :)

I'm looking to download files from Google Drive via dragonfly. They'll be specified by the user using the Google Drive file picker tool that returns a `file_id` and `oauth_token`. I can send these back to the server and have Dragonfly download the file from there. The trouble is that to download the file, the oauth token needs to be specified in a header:

```
GET https://www.googleapis.com/drive/v3/files/0B9jNhSvVjoIVM3dKcGRKRmVIOVU?alt=media
Authorization: Bearer <ACCESS_TOKEN>
```

See: https://developers.google.com/drive/api/v3/manage-downloads

I've had a look at the code and it appears specifying extra headers isn't currently supported. Would you be interested in having this as a feature? or do you think there's another way to do this?

I guess the biggest challenge would be working out a tidy way to pass in the extra headers. Perhaps passing a hash to the assignment method that contains say:

```
@photo.image_url = {
  url: 'https://www.googleapis.com/drive/v3/files/0B9jNhSvVjoIVM3dKcGRKRmVIOVU?alt=media',
  headers: { 'Authorization': 'Bearer <ACCESS_TOKEN>' }
}
```
would work? I'd be keen to get onto this asap, so if you had any ideas or pointers before I begin that would be really helpful :)
The gemspec is evaluated when the gem is built and baked into the metadata and is not evaluated at install time. Any logic around RUBY_VERSION is applied based on the ruby that built the gem, not the
end user's ruby as is desired.

This is fairly common and has been known to cause issues on other gems, see https://github.com/AuthorizeNet/sdk-ruby/pull/116

This adds ruby 2.5 to the travis build matrix
Hi,

Using v1.0.12 here, I hope it's recent enough and not pertaining to the problem.

When I try to upload a new attachment for a record whose previous attachment file has been deleted from disc I get a `DRAGONFLY: Dragonfly::FileDataStore destroy error: No such file or directory @ unlink_internal` error and the update fails. 

It seems to me there ought to be an option to ignore fails like this and just assign the new attachment. How should I work around this problem?
When I use dragonfly datastore s3 for upload image, I got error when trying use remote_url.
And if I use Dragonfly.app.remote_url_for(images.first.image_uid) --> Images no such key