Hi @aeagle - our team investigated https://github.com/aeagle/react-spaces/issues/49 - and we found it to be a problem when `resizable={true}` and `scrollable={true}` - both are enabled.

This change in the `Space.tsx` file helped fix it. Please review.

_Note: Please ignore the whitespaces in the diff._
Hi @aeagle - we have a requirement where we need a custom-built **ResizeHandle** component. So could we have a way in which we can pass a custom component via props?

Something like this probably.
`<Space.Left resizable={true} resizeHandleComponent={} size="20%" />`
**Describe the bug**
I have a site where I have a sidebar that people can toggle between being shown on the right and on the bottom. When I toggle between these by changing the element from Space.RightResizable to Space.BottomResizable, the new situation is calculated as if the old sidebar was still in place. 

**To Reproduce**
See https://codesandbox.io/s/festive-mcclintock-pujdo Press "Toggle side" a few times, and see the sidebar eat away more and more of the main content.

**Expected behavior**
I expect the sidebar to be placed in accordance to the surrounding Space.Viewport without taking into account the old sidebar element.

Strangely enough, when you switch between a Space.RightResizable and no element (`<> </>`) the calculation does use the "new" situation".

**Desktop (please complete the following information):**
 - OS: [e.g. iOS] Ubuntu
 - Browser [e.g. chrome, safari] Chrome
 - Version [e.g. 22] 78

In the example, https://codesandbox.io/s/frosty-sky-5b5bm - when I open/close the Left Pinnable pane - the constructor() of <Sample label="Left Pinnable" /> is called everytime (component is recreated) when resizable={true}. This is causing my component Sample to lose its state.

When you set resizable={false}, constructor() of <Sample label="Left Pinnable" /> is not called.
If I have a space, I want its height to be whatever height the content needs it to be.  Then other spaces move with respect to that space.  

I can of course do this myself, by getting the size of the rendered component and then setting the size of your space, etc.  However, this would be a great built in feature.