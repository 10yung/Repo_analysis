

In the file azure-devops-auth-samples/ManagedClientConsoleAppSample/Program.cs
`
//============= Config [Edit these with your settings] =====================
        internal const string azureDevOpsOrganizationUrl = "http://dev.azure.com/organization"; //change to the URL of your Azure DevOps account; NOTE: This must use HTTPS
        internal const string clientId = "872cd9fa-d31f-45e0-9eab-6e460a02d1f1";          //change to your app registration's Application ID, unless you are an MSA backed account
        internal const string replyUri = "urn:ietf:wg:oauth:2.0:oob";                     //change to your app registration's reply URI, unless you are an MSA backed account
        //==========================================================================
`
Where can I get clientId and replyUri ?,  I'm using your information, and it works. So I want to change to my information. Please help.
Bumps bootstrap from 3.0.0 to 3.4.1.

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=bootstrap&package-manager=nuget&previous-version=3.0.0&new-version=3.4.1)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/microsoft/azure-devops-auth-samples/network/alerts).

</details>
Could we get an updated example using asp.net core 2.2 or 3.0 for oAuth?  The webforms example is a bit out of date compared to the differences in asp.net core.  
I think, it is a big disadvantage to not have the .NET Client Library [Microsoft.TeamFoundationServer.Client](https://docs.microsoft.com/en-us/azure/devops/integrate/concepts/dotnet-client-libraries?view=azure-devops#rest-packages) included in the **OAuthWebSample**. That makes things soo much more simple.

The following is the only missing code, once the access token is retrieved. Please update the sample.

`VssOAuthAccessTokenCredential credentials = new VssOAuthAccessTokenCredential(AccessToken);`
`VssConnection connection = new VssConnection(new Uri("https://dev.azure.com/[your org]"), credentials);`
`var client = connection.GetClient<ProjectHttpClient>();`
`var projects = client.GetProjects().Result;`

Of course, you also need to add the nuget package **Microsoft.TeamFoundationServer.Client** to your web project first.

Brought Step 2 (Register App in Azure) up to date, as the Azure Portal changed over time and the current documentation became meanwhile somewhat confusing/missleading.

Some examples:
1. When registering an app in Azure, there is no more option "native", the name is "Public client (mobile & desktop)". --> Updated application type key to correct value
2. The ReplyUri of the registration and the application itself must be the same. In the source code, the replyUri is set to "urn:ietf:wg:oauth:2.0:oob", therefore, to prevent errors, it makes sense, to set it to the same value also when registering in Azure. (value before was "http://adalsample") --> Updated reply URL to a value that is in sync with the source code of the sample.
In the ManagedClientConsoleAppSample/README.md, it says:

> azureDevOpsOrganizationUrl - update this with the url to your Azure DevOps/TFS collection, e.g. http://dev.azure.com/organization for Azure DevOps.

When I am just updating the organization URL in the mentioned format, I get an unsuccessful NOT FOUND response, when the HttpClient is trying to GetAsync.

**The reason is, that the HttpClient.GetAsync combines the BaseAddress with the relative request URI without the Organization name, when there is a slash missing behind the URL of azureDevOpsOrganizationUrl!**

This was not possible to happen in the vsts URL before, as the organization name was part of the FQDN at that time, so this problem was introduced by the switch to dev.azure.com.

(Also, the new URI statement around the URL when setting the BaseAddress does unfortunately also not ensure, that there is a trailing slash at the end of the BaseAddress afterwards.)

Suggesting to fix README containing the trailing slash and mention, that it is important. Also, e.g. update Program.cs like:

`internal const string azureDevOpsOrganizationName = "organization"; //change to the (URL-)name of your Azure DevOps organization; `
`internal static string azureDevOpsOrganizationUrl = $"https://dev.azure.com/{azureDevOpsOrganizationName}/"; // NOTE: This must use HTTPS and trailing slash is required`

â€¦ariable used is unknown
DeviceProfileSample/Program.cs and ManagedClientConsoleAppSample/Program.cs have the following code: 
```
// check to see if we have a succesfull respond
if (response.IsSuccessStatusCode)
{
    Console.WriteLine("\tSuccesful REST call");
```
Which should be: 
```
// check to see if we have a successful respond
if (response.IsSuccessStatusCode)
{
    Console.WriteLine("\tSuccessful REST call");
```