We should try to add more control over the way genetic programming creates individuals in the untyped case. For example, if we are using DEAP to evolve functions from R----->R, and the primitives provided are binary operators and unary operators, then a lot of the individuals generated may end up of a form that is essentially useless. For example, we may have an individual of the form square(subract(x,x)), which is equivalent to the zero function. Binary operators such as the subtract operator should not be considered for the tree level right before the terminals, in this case. My suggestion is to add an optional parameter to each primitive that specifies the levels for which it should be considered. I would also be willing to help out with this, if the idea seems interesting.
The function isDominated in emo.py reads:

```
def isDominated(wvalues1, wvalues2):
    """Returns whether or not *wvalues1* dominates *wvalues2*.
    :param wvalues1: The weighted fitness values that would be dominated.
    :param wvalues2: The weighted fitness values of the dominant.
    :returns: :obj:`True` if wvalues2 dominates wvalues1, :obj:`False`
              otherwise.
    """
```

Right now three first lines of the docstring are contradictory.
Shouldn't it be: """Returns whether or not *wvalues2* dominates *wvalues1*.""" ?
This fixes #450 by appending the second child to offspring and controlling offspring length. In my use case it also increases speed for big populations quite a bit
https://github.com/DEAP/deap/blob/454b4f65a9c944ea2c90b38a75d384cddf524220/deap/algorithms.py#L229-L245


In the crossover section of this code, is there any reason to discard the second result of the crossover operation (ind2) instead of appending it to the offspring list?
Depending on the crossover probability this gives quite a good speedup (36% in my case).
Has the fast C++ version of the artificial ant simulator code ever been deployed? It is sitting there, and I was hoping to use it as I find that the copy.deepcopy calls within the artificial ant eat a lot of computing time. 
I am referring to deap/examples/gp/ant/buildAntSimFast.py
Not sure if this is a bug or not.
I find that the [lines](https://github.com/DEAP/deap/blob/master/deap/tools/support.py#L633-L635):
``` python
                elif ind.fitness == hofer.fitness and self.similar(ind, hofer):
                        has_twin = True
                        break
```
cause an error, something like: "type `int` not callable"

but replacing lines with a set comparison seems fine:
``` python
                elif ind.fitness == hofer.fitness:
                    if set(ind) in set(hofer):
                        has_twin = True
                        break
```

In Line 45-48 of [PSO](https://github.com/DEAP/deap/blob/master/examples/pso/basic.py), the ```abs()``` function seems to be used wrongly, as presented below:

```Python
        if abs(speed) < part.smin:
            part.speed[i] = math.copysign(part.smin, speed)
        elif abs(speed) > part.smax:
            part.speed[i] = math.copysign(part.smax, speed)
```

When ```part.smin``` is set to a negative value (e.g., -3), Line 45-46 never be executed. In other worlds, the lower bound checking of speed is not run.

To fix it, maybe delete the ```abs``` function. And also do not need to use the ```math.copysign``` function.
This fixes #440 .
Sorry to interrupt, I'm debugging nsga3 multi-target evolution, I need to get 200 parameters to weight and remove some unimportant parameters, but I found that the nsga3 output is linear, not obviously distinguish between importance, how to get nonlinear weight output Thank you
I am using DEAP for a multi-objective problem and I've been noticing the Pareto Front contains repeated individuals.

Is this expected behavior? I remember reading the default similarity check for ParetoFront() is operator.eq, so it shouldn't be allowing identical individuals, right? 

I'm using:

hof = tools.ParetoFront()

To define it.

Thanks in advance for any help!