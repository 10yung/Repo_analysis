No code changes needed.
Sublime Text build 4050 introduced a new feature to `sublime-syntax` grammars called branch points. The docs haven't been published yet, but the packages which ship with Sublime Text have started to use this new functionality. i.e. https://github.com/sublimehq/Packages/commit/c08f85346a04d2e12990c3008e7666306b59a05b

This essentially uses backtracking to effectively allow looking ahead multiple lines (up to 128) etc. and enables non-deterministic parsing as described at https://github.com/SublimeTextIssues/Core/issues/2241

My understanding is that some official documentation should be coming soon, but I wanted to log  this here now in case we want to get a head start on it i.e. by experimenting with it in Sublime to see how it works and thinking about how we can go about implementing it for `syntect`. This also serves as a note that updating the sublimehq/Packages submodule will likely cause those syntax definitions relying on this new feature to not work as expected until `syntect` adds support for it.
This has the same goal as #34 but with a different approach.

Note that the fancy-regex implementation doesn't compile yet, but I thought it would be useful to get this reviewed earlier rather than later.

I haven't ported over the regex rewriting changes yet, I'm hoping that we can generate regexes that work on both onig and fancy-regex.

* [x] Add std::error::Error impl for fancy-regex, see https://github.com/fancy-regex/fancy-regex/pull/35
* [x] Release https://github.com/fancy-regex/fancy-regex/pull/33
* [ ] Port regex rewriting changes
Examples aren't compiling on Windows 10.

```
Compiling onig_sys v69.2.0
error: failed to run custom build command for `onig_sys v69.2.0`
...
--- stdout
cargo:warning=couldn't execute `llvm-config --prefix` (error: The system cannot find the file specified. (os error 2))
cargo:warning=set the LLVM_CONFIG_PATH environment variable to a valid `llvm-config` executable
```
Hi,

I'm trying to build a `HighlightState` with a cached `initial_stack`, as described in the docs:

> Alternatively you can save space by caching only the `path` field of this struct
> then re-create the `HighlightState` when needed by passing that stack as the `initial_stack`
> parameter to the `new` method. This takes less space but a small amount of time to re-create the style stack.

I'm probably missing something (very new to rust), but to me it appears this is guaranteed to crash:
The first call to `update_single_cache_for_push` in `HighlightState::new`, will pass `path` of length 0, which results in `path.len() - 1` panicking with `attempt to subtract with overflow`.

Is there an example somewhere of code using HighlightState with a non-empty initial_stack? What am I missing?

Thanks ahead, and many thanks for building this incredible library!

As far as I can tell, the easy::HighlightLines and friends all (through Style) return a Color containing rgba components. Having looked around through the examples and the html parser
I was not able to find a place where highlighting occurs over a string of code except defers
 coloring to some later phase which binds the (name or a unique id) to the rgba components extracted from the theme.

If I understand correctly, because the theme also contributes FontStyle, etc the correct way to implement highlighting once/apply a theme map is via a ScopeRegionIterator, which then converts the theme's semantic names into both a FontStyle/Color map?

I'm not actually parsing to CSS but it would seem like basically the same idea.
Any pointers in the right direction would be appreciated.
I was trying to implement syntax highlighting to the previews in hunter, but I noticed that syntect drastically increased memory usage after first use. 

I guess it builds up some caches for things, I'm not sure what exactly is causing this. I don't think regexes would be this big, but maybe. 

Unfortunately it doesn't seem to be possible to drop the caches, or whatever is using that memory. In hunter's case, memory usage went from 8MB to 12MB after highlighting the first file. A bit too much for my tastes ;).

I pretty much just copied over the example code for HighlightFile, but instead of printing the lines out I saved them to a buffer.

As a workaround I'm using syntect indirectly through bat now, so it's not a big issue, but maybe it would be nice if it was possible to "uninitialize" syntect somehow.


Needs a newer yaml-rust to get this fix: https://github.com/chyh1990/yaml-rust/pull/122

There are currently test failures and more syntests are failing than before. Needs to be investigated.
Sorry if this is bothersome, but I'm pretty new to Rust so I don't know how to do what I am asking with the current knowledge I have.

What I am asking for is this, say I have a string that contains the file's text, a string corresponding to the location of a  sublime-syntax file and a string corresponding to the location of a tmtheme file, how would I return a syntax-highlighted HTML string. 
I was trying to use the official [Monokai.sublime-color-scheme](https://raw.githubusercontent.com/twolfson/sublime-files/master/Packages/Color%20Scheme%20-%20Default/Monokai.sublime-color-scheme) with syntect but it seems this file-format is not supported or maybe it's just me doing something fishy.

I've tried to load it both as json or as xml (ie: used this converter [https://www.freeformatter.com/json-to-xml-converter.html](https://www.freeformatter.com/json-to-xml-converter.html)) but when feeding it with `ThemeSet::get_theme` it will crash.

On the other hand, if using a proper thTheme such as [monokai.tmTheme](https://github.com/richrd/suplemon/blob/master/suplemon/themes/monokai.tmTheme) there won't be any problem.