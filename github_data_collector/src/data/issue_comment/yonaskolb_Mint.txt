Looks like mint (version 0.12) does not work on macOS Catalina 10.15.
For example, command mint run swiftformat swiftformat --swiftversion 5.0 --config ".swiftformat" returns an error, but swiftformat --swiftversion 5.0 --config ".swiftformat" works fine.
Hi. First of all, thank you so much for your great work on Mint!

## Description

I want to specify one exact commit rather than branch or tag name in Mintfile. 

And I've found this line: 

https://github.com/yonaskolb/Mint/blob/6d889541bf3c8935bad858e15dee3937d5cc119c/Sources/MintKit/Mintfile.swift#L41

When I saw this line, I thought Mintfile already support specifying version using commit hash like `yonaskolb/Mint@9010ebe` but it doesn't work because because `git clone -b` doesn't support cloning using commit hash.

ref: https://github.com/yonaskolb/Mint/blob/784ecd0d158b25c88e87101977af163fd21cf8ed/Sources/MintKit/Mint.swift#L248

I've experimentally added commit hash support like `yonaskolb/Mint@commit:9010ebe` on this PR.
It's still draft because no tests are added and I haven't understood Mint completely.
These changes are very rough but you can review my concept.
Do you have any ideas about this?

## Questions

- When does this code executed?  In my PR, commit hash is specified as `yonaskolb/Mint@commit:9010ebe` so it conflicts to these lines, but I don't understand when `:` appeares after `@` in current specification or implementation.
https://github.com/yonaskolb/Mint/blob/d955d04edddd9ecb0ce6701395c8e740e30bf9d6/Sources/MintKit/PackageReference.swift#L23-L25 

- [just curious] Are there any usecases that `packageParts.count == 3` becomes `true`? I don't know when 2 `@`s appear in one line.
https://github.com/yonaskolb/Mint/blob/d955d04edddd9ecb0ce6701395c8e740e30bf9d6/Sources/MintKit/PackageReference.swift#L19-L21
### Summary
This is a fix for the problem detailed on #145

### Changes
* In the `run` command, uses the single executable available or ask the user to chose one of the available executables
* Using the parameter `arguments` sent to the `run` command as the arguments for the executable, without dropping the first argument
**Problem**

Whenever I want to run the subcommand of a given executable, I'm required to type the name of the command again. 

I'm fairly sure this is because the first one is just referencing the repo and running the default command. I think this is by design, but it feels unintuitive. I actually thought SwiftFormat was broken for a while since `mint run swiftformat .` kept failing.

**System Information**

macOS Version: `10.14.5`
Shell: `zsh`
Mint Version: `0.12.0`

**Examples**

Examples are using SwiftLint.

`mint run swiftlint` ‚úÖ
```
üå±  Using Realm/SwiftLint 0.34.0 from Mintfile.
üå±  SwiftLint 0.34.0 already installed
üå±  Running swiftlint 0.34.0...
Loading configuration from '.swiftlint.yml'
Linting Swift files at paths
Linting 'LinuxMain.swift' (1/57)
<more files>
Done linting! Found 10 violations, 0 serious in 57 files.
```

`mint run swiftlint autocorrect` ‚ùå
```
üå±  Using Realm/SwiftLint 0.34.0 from Mintfile.
üå±  SwiftLint 0.34.0 already installed
üå±  Couldn't find executable "autocorrect"
```

`mint run swiftlint swiftlint autocorrect` ‚úÖ
```
üå±  Using Realm/SwiftLint 0.34.0 from Mintfile.
üå±  SwiftLint 0.34.0 already installed
üå±  Running swiftlint 0.34.0...
Loading configuration from '.swiftlint.yml'
Correcting Swift files at paths
Correcting 'LinuxMain.swift' (1/57)
<more files>
Done correcting 57 files!
```
**Background:**
Mint is a great tool and it is helpful to use it in CI to install tools like SwiftLint. It would be nice if Mint had docker support to avoid having to manually set up Mint in CI. This has also been requested in #128.

**Implementation:**
Added a basic `Dockerfile`. This will create a docker image with Mint installed at `/usr/local/bin`.
An image can be created by running `docker build -t <name> .` when in the root directory of this project.

**Question:**
Would you be able to publish the image to [Docker Hub](https://hub.docker.com/) so it can easily be used by other people?
It would be nice if it is possible to use an untagged revision in Mintfile, for example:

```
yonaskolb/XcodeGen@629e568596d9b9195ceffc5e5d8c353944183c23
```
This PR adds two commands:
- outdated: returns all linked packages that are not up to date
- update: reinstall all outdated packages

fixes #87, #121  
Hi,

I tried to update Mint from 0.11.3 to 0.12.0. Instead of update I get error:

```
mint install yonaskolb/mint@0.12.0
üå±  Cloning mint 0.12.0
üå±  Resolving package
üå±  Failed to read Package.swift file:
Couldn't decode package dump:
keyNotFound(CodingKeys(stringValue: "product_type", intValue: nil), Swift.DecodingError.Context(codingPath: [CodingKeys(stringValue: "products", intValue: nil), _JSONKey(stringValue: "Index 0", intValue: 0)], debugDescription: "No value associated with key CodingKeys(stringValue: \"product_type\", intValue: nil) (\"product_type\").", underlyingError: nil))
```

xcode-select was set to Xcode 10.2
Hi, wonderful project. 

While I was exploring Swift, CI and gitlab I found myself in the unbearable situation to have to rebuild tooling over and over (https://gitlab.com/flovilmart/incrementer/blob/master/.gitlab-ci.yml#L4)

Then I though I could leverage Docker in order to speed up the process.

https://gitlab.com/flovilmart/incrementer/blob/flovilmart-swift-ci/.gitlab-ci.yml#L2

Now, mint is a big part of the success and it would be a great addition to add a Dockerfile to this project, in order to provide mint through the docker hub.

we could design the docker files simply (for a single swift version) or similartly to the ones in this project: https://gitlab.com/flovilmart/swift-ci/tree/master

What do you say?

Obviously, I would take care of this!
I created a PR for the issue: #126 , maybe it's easier to discuss it with the code present.

Please feel free to edit the messages to the user, and the description in the README, these are only placeholders.

I am open to suggestions of course. üôÇ