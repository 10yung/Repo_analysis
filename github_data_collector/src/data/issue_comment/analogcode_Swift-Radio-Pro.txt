added example for multiple tab support in carplay, added different assets for carplay tab icons, added a sub-list within JSON file for each CarPlay tab to load different list.

I also checked the box to enable Mac Catalyst. Can remove and resubmit since this is out of scope of the rest of my PR, but this is all-native so there shouldn't be an issue running locally so long as the appropriate entitlement is granted by Apple.
`    private func setupNotifications() { `

   ` let notificationCenter = NotificationCenter.default
        notificationCenter.addObserver(self, selector: #selector(handleInterruption), name: AVAudioSession.interruptionNotification, object: nil)
        notificationCenter.addObserver(self, selector: #selector(handleRouteChange), name: AVAudioSession.routeChangeNotification, object: nil)
        notificationCenter.addObserver(self, selector: #selector(playerDidFinishPlaying), name: .AVPlayerItemDidPlayToEndTime, object: nil)`

        notificationCenter.addObserver(self, selector: #selector(playerDidRecieveError(_:)), name: .AVPlayerItemNewErrorLogEntry, object: nil)

         notificationCenter.addObserver(self, selector: #selector(playerDidRecieveError(_:)), name: .AVPlayerItemFailedToPlayToEndTime , object: nil)

        notificationCenter.addObserver(self, selector: #selector(playerDidRecieveError(_:)), name: .AVPlayerItemPlaybackStalled , object: nil)`
`}`

I added 3 more notifications for interruption handling, but seems not to be working please help with this issue @analogcode @fethica 





1. Go to app
2. Start to Play any radio, then press Stop.
3. Swipe from top and enable Flight Mode
4. Return to app and press Play, then Stop.
4. Swipe from top and disable Flight Mode
5. Return to app and press Play/Stop - nothing happens.
I added One Signal Push Notification and its working great:

Step:
0.1 Create One Signal Account
0.2 Generate iOS Push Certification for One Signal iOS Device. 
[https://documentation.onesignal.com/docs/generate-an-ios-push-certificate](https://documentation.onesignal.com/docs/generate-an-ios-push-certificate) 

1. Add Notification Service Extension

1.1 In Xcode Select File > New > Target...
1.2 Select Notification Service Extension then press Next

1.3 Enter the product name as OneSignalNotificationServiceExtension and press Finish.

1.4 Press Cancel on the Activate scheme prompt.

By cancelling, you are keeping Xcode debugging your app, instead of just the extension. If you activate by accident, you can always switch back to debug your app within Xcode (next to the play button).

1.5 In the project navigator, click the top level project directory to open the Xcode project settings and select the OneSignalNotificationServiceExtension target in the project and targets list. Unless you have a specific reason not to, you should set the Deployment Target to be iOS 10.

1.6 Open NotificationService.m or NotificationService.swift and replace the whole file contents with the below code:

`
import UserNotifications

import OneSignal

class NotificationService: UNNotificationServiceExtension {
    
    var contentHandler: ((UNNotificationContent) -> Void)?
    var receivedRequest: UNNotificationRequest!
    var bestAttemptContent: UNMutableNotificationContent?
    
    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
        self.receivedRequest = request;
        self.contentHandler = contentHandler
        bestAttemptContent = (request.content.mutableCopy() as? UNMutableNotificationContent)
        
        if let bestAttemptContent = bestAttemptContent {
            OneSignal.didReceiveNotificationExtensionRequest(self.receivedRequest, with: self.bestAttemptContent)
            contentHandler(bestAttemptContent)
        }
    }
    
    override func serviceExtensionTimeWillExpire() {
        // Called just before the extension will be terminated by the system.
        // Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.
        if let contentHandler = contentHandler, let bestAttemptContent =  bestAttemptContent {
            OneSignal.serviceExtensionTimeWillExpireRequest(self.receivedRequest, with: self.bestAttemptContent)
            contentHandler(bestAttemptContent)
        }
    }
    

}`

Ignore any build errors at this point, step 2 will import OneSignal which will resolve any errors.

2. Import OneSignal intoRadio Swift Xcode project

Setup CocoaPods on your system if you don't have it already.

Alternatively follow our Carthage setup guide instead if you can't use Cocoapods in your project.

    Make sure you have version 1.1.0 or newer by running pod --version from the terminal.
    Run the following to upgrade sudo gem install cocoapods

2.1 Make sure your current Xcode project is closed.
2.2 Run pod init from the terminal in your project directory.
2.3 Open the newly created Podfile with your favorite code editor such as Sublime.
2.4 Add the OneSignal dependency under your project name target as well as OneSignalNotificationServiceExtension target like below:

`
target 'SwiftRadio' do
  pod 'OneSignal', '>= 2.6.2', '< 3.0'
end

target 'OneSignalNotificationServiceExtension' do
  pod 'OneSignal', '>= 2.6.2', '< 3.0'
end
`

run following terminal:
`pod repo update`
then
`pod install`

2.6 Open the newly created <project-name>.xcworkspace file.
Make sure to always open the workspace from now on. 

3. Add Required Capabilities

3.1 Select the root project and Under Capabilities Enable "Push Notifications".

    Only do this for the main application target.
    Do not do this for the Notification Service Extension.

3.2 Next Enable "Background Modes" and check "Remote notifications".

4. Add Required Code

Navigate to the AppDelegate file and add the following OneSignal initialization code to didFinishLaunchingWithOptions. Replace YOUR_APP_ID with your OneSignal App ID.

`
let onesignalInitSettings = [kOSSettingsKeyAutoPrompt: false]

// Replace 'YOUR_APP_ID' with your OneSignal App ID.
OneSignal.initWithLaunchOptions(launchOptions,
appId: "YOUR_ONESIGNAL_APP_ID",
handleNotificationAction: nil,
settings: onesignalInitSettings)

OneSignal.inFocusDisplayType = OSNotificationDisplayType.notification;

// Recommend moving the below line to prompt for push after informing the user about
//   how your app will use them.
OneSignal.promptForPushNotifications(userResponse: { accepted in
print("User accepted notifications: \(accepted)")
})
`

Make sure to import the OneSignal headers:

    Swift: import OneSignal

source:
[https://documentation.onesignal.com/docs/ios-sdk-setup](https://documentation.onesignal.com/docs/ios-sdk-setup)
Hey everyone!

I created a new [branch](https://github.com/analogcode/Swift-Radio-Pro/tree/carplay) that supports **CarPlay** for the **SwiftRadio**:

![CarPlay SwiftRadio](https://blog.fethica.com/assets/images/20190210/0.teaser@2x.png)

Also I created a step by step post to show how to implement this feature:

[Add CarPlay support to Swift Radio](https://blog.fethica.com/add-carplay-support-to-swiftradio/)

Cheers ðŸŽ‰
Is there a free API to get a list of radio stations by location?
So I added a recently played icon button on the now playing page, I linked it to a tableview and got it working. I inputed the JSON recently played link in the station long description. Here is my code for the recently played tableviewcontroller:


```
import UIKit

//----------
//MARK: JSON
//----------

//The Initial Response From The JSON
struct Response: Codable {
    
    var playHistory: Album
    
}

//The Album Received Which Is An Array Of Song Data
struct Album: Codable {
    var song: [SongData]
    
}

//The SongData From The PlayHistory Album
struct SongData: Codable{
    
    var album: String
    var artist: String
    var cover: String
    var duration: String
    var programStartTS: String
    var title: String
}


class TableViewController: UITableViewController {
    
    //1. Create An Array To Store The SongData
    var songs = [SongData]()
    var currentStation: RadioStation!
    var downloadTask: URLSessionDownloadTask?
    
    override func viewDidLoad() { super.viewDidLoad()
        
        
        self.tableView.delegate = self
        self.tableView.dataSource = self
        
        //2. Load The JSON From The Main Bundle
        guard let urlText = URL (string: currentStation.longDesc)
            else { return }
        
        do{
            //a. Get The Data From The From The File
            let data = try Data(contentsOf: urlText)
            
            //b. Decode The Data To Our Structs
            let albumData = try JSONDecoder().decode(Response.self, from: data)
            
            //c. Append The Songs Array With The PlayHistory
            albumData.playHistory.song.forEach { songs.append($0) }
            
            //d. Test Some Data
            print("""
                **The First Album Details**
                Album = \(songs[0].album)
                Artist = \(songs[0].artist)
                Cover = \(songs[0].cover)
                Duration = \(songs[0].duration)
                Start = \(songs[0].programStartTS)
                Title = \(songs[0].title)
                """)
            
            //3. Load The Data
            DispatchQueue.main.async {
                self.tableView.reloadData()
            }
        }catch{
            
            print(error)
        }
        
    }
    
    //-----------------
    //MARK: UITableView
    //-----------------
    
    
    override func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return songs.count
    }
    
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
       
        
        //1. Create A Cell
        let cell = tableView.dequeueReusableCell(withIdentifier: "cell", for: indexPath) as! TableViewCell
        
        //2. Set It's Text
        cell.songTitle.text = songs[indexPath.row].title
        cell.artistLabel.text = songs[indexPath.row].artist
        
        //3. Get The Image
        //Start with placeholder image so it shows until image download completes
        cell.songCover.image = UIImage(named: "WhiteLogo.png")
        
        //Continue with your logic, no change really but could be shortened to:
        if let imageURL = URL(string: songs[indexPath.row].cover) {
            let request = URLSession.shared.dataTask(with: imageURL) { (imageData, response, error) in
                guard let imageData = imageData
                    else {
                        return
                }
                
                DispatchQueue.main.async {
                    cell.songCover.image = UIImage(data: imageData)
                }
            }
            
            request.resume()
        }
        return cell
        
    }
    
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        
        print("""
            **Album \(indexPath.row) Selected**
            Album = \(songs[indexPath.row].album)
            Artist = \(songs[indexPath.row].artist)
            Cover = \(songs[indexPath.row].cover)
            Duration = \(songs[indexPath.row].duration)
            Start = \(songs[indexPath.row].programStartTS)
            Title = \(songs[indexPath.row].title)
            """)
    }
    
}
```

Hey everyone,
We just pushed a new repo. It's an open-source music instrument app. I would be honored if you wanted to check it out:

![romplayer](https://user-images.githubusercontent.com/2042313/33849640-2ffbb8d4-de7f-11e7-956b-838aea00ce23.png)

[https://github.com/AudioKit/ROMPlayer](https://github.com/AudioKit/ROMPlayer)

App Store Example:
[FM Player](https://itunes.apple.com/us/app/fm-player-classic-dx-synths/id1307785646?ls=1&mt=8)

Thank you. 

@fethica Also has a cool new repo he is working on. I'll let him tell you about it when he is ready. Stay tuned!
