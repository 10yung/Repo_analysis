I think it would be helpful if this feature is available.
Fix #66 
`zip` became a global function with commit b9568eff1dc799d7c25a211d529ef1058780b787. So I fixed the code in README.md.
```
/home/user/Project/.build/checkouts/Hydra.git-8391472609009747209/Sources/Hydra/Promise+Await.swift:99:20: error: binary operator '!=' cannot be applied to two 'DispatchQueue' operands
                guard self.queue != DispatchQueue.main else {
                      ~~~~~~~~~~ ^  ~~~~~~~~~~~~~~~~~~

Swift version 5.0.1 (swift-5.0.1-RELEASE)
Target: x86_64-unknown-linux-gnu

Ubuntu 16.04.6 LTS
```
Hi Malcom! Is there any kind of  progress block for things like uploading an avatar for example.

```
uploadAvatar()
.progress { p in
  // Here update progressView for example
}
.then(doSomething)
.onError(showErrorPopup)
.finally(doSomething)
```
Hi guys, I have been using this library for a while and I have to say it's very easy to work with it.

I have a concern about cancellable promises, specifically the behaviour of a chain of promises when a promise in the middle has been cancelled.
Let's say we have:

```swift
A.then(B).then(C).then(D).then(E)
    .then { _ in
        print("success")
    }.catch { _ in
        print("failed")
    }.cancelled { in
        print("cancelled")
    }
```

If, for example, C gets cancelled while A and B resolve correctly, I'm expecting that `cancelled` is printed out, but what I observe is that the sequence gets stuck in `pending` state.
This behaviour can be checked with the following test that recalls the ones provided with the library, which fails for timeout:

```swift
  func test_cancelledPromiseChainable2() {
    let exp = expectation(description: "test_cancelledPromiseChainable2")
    
    let invalidator: InvalidationToken = InvalidationToken()
    invalidator.isCancelled = true
    
    intPromise().then { _ in
        self.test_invalidationToken(token: invalidator)
      }.then { total in
        print("Operation finished with: \(total)")
        XCTFail()
      }.catch { _ in
        print("Operation failed")
      }.cancelled {
        print("Operation cancelled")
        exp.fulfill()
    }
    
    waitForExpectations(timeout: expTimeout, handler: nil)
  }
```

If I'm not misinterpreting the situation, I will open a PR with a suggested fix, otherwise please let me know the reasoning behind this behaviour.

Thanks,
AT
https://github.com/malcommac/Hydra/blob/d12500aaf1685b338231f03cdfa49c4aa01858a3/README.md
in README.md, `retry` is written twice in line 20.It is good to match because the order is different from Index.

https://github.com/malcommac/Hydra/blob/d12500aaf1685b338231f03cdfa49c4aa01858a3/README.md#all-features
There is no `retry` in` All Feature`.
Hey guys, first of all thank you very much for this great library!

I have `dismissActivityIndicator` method, which returns a promise:

    func dismissActivityIndicator<T>(any: T) -> Promise<T> {
        return Promise<T> { resolve, _, _ in
            KVNProgress.dismissAnyway {
                resolve(any)
            }
        }
    }

My question is how can I inject it into the promise chain, so it is always executed at end? It's fairy simple with `always` and a plain non-async method, but how to achieve the same result with the method returning a `Promise`?

`help wanted` would be an appropiate tag for this question, as this is not an issue :)
using swift 3.1 version of spm and its having trouble installing though server side project is in 4.0 (using Perfect Server Side) . too many errors to copy and paste here but It tried different major and minor versions and no success. 



What I was wishing for:
```swift
all(promiseA,promiseB).then { resultA, resultB in
}
```
Based on the docs it would have to be

```swift
all(promiseA,promiseB).then { result in
  let resultA = result[0]
  let resultB = result[1]
}
```

or

```swift
Promise<Void>.zip(promiseA, promiseB).then { resultA, resultB in
}
```

Any thoughts?