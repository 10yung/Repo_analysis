A common problem with apps that are using this lib is that they lose their navigation stack after their ReactActivity is closed. Besides the inconvenience, one major problem of this behavior is that pushing `back` when reopening an app after the user has navigated away from the first screen causes a crash, since the app no longer knows which Fragment to go back to.

The problem presents itself if the user has `Don't keep activities` turned on or the Activity is otherwise killed.

This PR adds a feature to restore our navigation stack in those situations.

It works by tagging each Fragment we navigate to with the total size of the back stack. That way, when your `ScreenCoordinator` is instanced, we recreate the Fragment stack in the same order they were initially made. The result is that the app now has every Fragment in the Activity stack and can safely navigate back to them.
At some point, the `backStacks` object can be null, making `backStacks.peek()` crash the app. I could not put my finger exactly on why this happens, but I suspect it's some kind of race condition. Anyway, it's always when trying to `pop()`.

This PR does two things to address this problem:
1. Adds a null check before trying to peek into our `backStacks`.
2. Logs a warning every time we would try to `pop` or `push` with a null `backStacks`. That way we won't lose track of the problem.

This fixed the problem in our production app without any side effects but maybe somebody with more context on the code can clarify why this crash happens and whether this is an acceptable fix.
Adds the `onHostDestroy` method call. Lacking this call can cause problems when using features that rely on your React lifecycle.

Besides, we're already calling `onHostPause` and `onHostResume` so, for the sake of consistency, we should also do `onHostDestroy` ðŸ˜„ 
Migrate to Swift 4.1.

Now we can build native-navigation latest Xcode(v9.3).
Hi,
First of all thanks for this great library. I really like the Shared Element transitions which are working really great for me, which would be a reason to use this library over wix navigation. However, is it also possible to have a swipe gesture to pop a screen? I didn't find it in the docs. Or is this still a missing feature?

Do you mate in plan create a typescript definition file?
<img width="431" alt="screen shot 2018-01-14 at 2 58 20 pm" src="https://user-images.githubusercontent.com/1935246/34915683-7b3d079a-f93b-11e7-92a3-33763d00a4c7.png">

I am currently using wix/react-native-navigation. However, there are plenty of problems when using it. 
1. react-native-push-notification cannot be used in android with wix's navigation
2. it renders all tabs while using it. I cannot just logout by setting redux to initial state directly because some of the rendering components may using the redux state. 

Overall, wix's navigation is not stable enough as I used the navigator provided by react native before. The app crash increase a lot in this few month. Therefore, I really want to try this library and find a better navigation solution. 

https://github.com/taxfix/native-navigation/
https://github.com/bamlab/native-navigation/
https://github.com/travelbird/react-native-navigation/

In these few weeks, I keep looking these three forks. And I guess taxfix ( https://taxfix.de/en/ ) 
may already using it in their iOS production app because their navigation is quite similar with native-navigation. 

So, is there any example for tab bar and login structure using native-navigation? 

I'm still learning the source code, so please correct me if my assumptions are wrong. 

I believe, so far we have 2 initial goals to start from: 
1. Make it **commercially supporting** by any team inside their project( this could be my team, I'm reviewing this possibility)
2. **Seamless setup and integration** for new brownfield RN projects

Apart from obvious things like stability I can see next steps has to be done first 
to achieve goals:

*  *complete lacking documentation*. Especially for the possible integration options.  Integration = new devs, new commercial support involved.
* provide *simple use cases with tab bars, drawers* etc... As a temporary solution could be an integration with existing libs. Not sure about that. 
* review *existing issues*, maybe someone can pick and fix few issues
* *prioritize the most lacking functionality*, comments are welcome
* *verify if it works with RN 0.48+* e.g. upcoming 0.49 has some changes in initial params, fix everything.
* *coordination*. avoid doing same things because of miscommunication.

I started with documenting initial setup and integration guide. There are lots of chapters that are totally empty. Anyone else? ) 
We have to think, what suits better for our distributed team. Not sure if trello will be good. We need something to track our progress. 
Anyone who wants to contribute, please share your ideas, your vision, your ideas. PR/MR's are welcome.