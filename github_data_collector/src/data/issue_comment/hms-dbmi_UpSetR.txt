`upset()` does not allow `matrix` class inputs (or the identical class `table`) because `UpSetR:::order_sets()` tries to subset using the idiosyncratic `data[sets]` instead of the more standard `data[sets, ]`.  See the example input data and the traceback below:

```R
> library(tidyverse)
> df <- bind_rows(all = tibble(id = 1:5), cll = tibble(id = 3:5), norm = tibble(id = 3:7), .id = "type")
> df
# A tibble: 13 x 2
   type     id
   <chr> <int>
 1 all       1
 2 all       2
 3 all       3
 4 all       4
 5 all       5
 6 cll       3
 7 cll       4
 8 cll       5
 9 norm      3
10 norm      4
11 norm      5
12 norm      6
13 norm      7
> up <- t(table(df))
> up
   type
id  all cll norm
  1   1   0    0
  2   1   0    0
  3   1   1    1
  4   1   1    1
  5   1   1    1
  6   0   0    1
  7   0   0    1
> class(up)
[1] "table"
> str(up)
 'table' int [1:7, 1:3] 1 1 1 1 1 0 0 0 0 1 ...
 - attr(*, "dimnames")=List of 2
  ..$ id  : chr [1:7] "1" "2" "3" "4" ...
  ..$ type: chr [1:3] "all" "cll" "norm"
> library(UpSetR)
> upset(up)
Error in colSums(data[sets]) : 
  'x' must be an array of at least two dimensions
> traceback()
4: stop("'x' must be an array of at least two dimensions")
3: colSums(data[sets])
2: order_sets(New_data, Set_names)
1: upset(up)
```

The workaround I managed was converting to a `data.frame` via a `matrix`:

```r
> up %>% as("matrix") %>% as.data.frame() %>% upset()
```

PS: I really enjoyed the UpSetR presentation at [BioC 2017](https://www.bioconductor.org/help/course-materials/2017/BioC2017/Day1/InvitedSpeakers/relaxation-techniques-upset-data-scientist.pdf)
When trying to generate plots where zero-only sets are included by specifying the sets explicitly (`sets=[...]`), `upset()` fails if the first or last column contain only zeros.

The attached patch for the `FindStartEnd` heuristic fixes this behavior for me, I'm not sure whether this breaks other use cases though.
Hi,

I have an UpSetR plot stored in a variable `plot`. I am trying to export it as a PDF file.

```
plot <- upset(fromList(data), order.by = "freq")
pdf(file="filename.pdf", onefile=FALSE)
plot
dev.off()
```

But the resulting PDF cannot be opened by Preview (I am running the script on mac os X).

Exporting to JPG produce the expected plot

```
plot <- upset(fromList(data), order.by = "freq")
jpeg(file="filename.jpg")
plot
dev.off() 
```

Am I missing something?
Hello,

The tool is quite practical but for my use case it lacks an 'empty' category : a way to display the population that is in no set.

One option would be to build a new category like 'none', but it would appears on top of existing categories, and show a black dot for the population that appears in 'none'.

I am considering implementing a solution that would take an optional population or an optional count, to display it on top of grey dots.

Would this make sense ? would this be welcome ?


### Description

When simultaneously using a log transformation for the intersection scale and using a query to highlight certain intersections, the query does not highlight the appropriate bar in the intersection plot. 

### Working example

```R
library(UpSetR)

df <- data.frame(matrix(0, ncol = 3, nrow = 1000))

df[,1] <- c(1:nrow(df))
df[1:100, 2] <- 1
df[1:500, 3] <- 1

names(df) <- c("ID", "var1", "var2")

myquery <- list(list(query = intersects, params = list("var1", "var2"), active = T))

upset(df, queries = myquery)
upset(df, queries = myquery, scale.intersections = "log10")
```

Expected behavior:

![example1](https://user-images.githubusercontent.com/34822893/70175365-9183c100-16a4-11ea-995a-1fd9621fa823.jpeg)

Queried bar is not highlighted with log scale:

![example2](https://user-images.githubusercontent.com/34822893/70175367-9183c100-16a4-11ea-8bc1-c5869f639f06.jpeg)
Hi, I love this package thank you for building it!

Is it possible to use an aggregated dataset e.g.

```
library(UpSetR)
library(dplyr)
#> 
#> Attaching package: 'dplyr'
#> The following objects are masked from 'package:stats':
#> 
#>     filter, lag
#> The following objects are masked from 'package:base':
#> 
#>     intersect, setdiff, setequal, union

movies <- read.csv(
  system.file("extdata", "movies.csv", package = "UpSetR"),
  header = T,
  sep = ";"
  )

movies_agg <- movies %>%
  group_by(Action,Adventure,Children,Comedy,Crime,Documentary,Drama,Fantasy,Noir,Horror,Musical,Mystery,Romance,SciFi,Thriller,War,Western) %>% 
  tally()

## This errors obviously but demonstrates my objective
UpSetR::upset(movies_agg, aggregate = n)
#> Error in UpSetR::upset(movies_agg, aggregate = n): unused argument (aggregate = n)
```
I am using an expression input to make an UpsetR plot for variant call-sets:

Input: A=120, B=120, C=80, A&B=48, A&C=20, B&C=11, A&B&C=24 

I have the counts of the number of true positives for each intersection:

(TP(A) = 100, TP(B) = 80, TP(C) = 40, TP(A&B) = 24, TP(A&C) = 9, TP(B&C) = 3, TP(A&B&C) = 20). 

How can I add this information as a query? Most of the examples available online assume that the input is a data frame.

This is my starting code:

library(UpSetR) 
expressionInput <- c(A=120, B=120, C=80, A&B=48, A&C=20, B&C=11, A&B&C=24)
upset(fromExpression(expressionInput), order.by = "freq", text.scale= c(1.3, 1.3, 1, 1, 1.5, 1.2))
I would like to be able to work with the actual data generated by the UpSetR package in terms of the number of possible intersections generated and their associated value. I work primarily in Population Genetics and something like that would be really useful to be able to determine things like between-population diversity (i.e. the sum of intersections between all overlaps) vs within-population diversity (i.e. value of single category with no overlap)
Hello, thank you for this useful package! I like the ability to condense many venn diagrams down into one visualization. I'm having a problem displaying all intersections between 17 sets. [Here](https://raw.githubusercontent.com/johnsolk/RNAseq_15killifish/master/evaluation/presence_absence.csv) is my presence/absence matrix, 'pa'. 

The example with 4 sets works, nicely showing a bar crossing all 4 sets:

```
upset(pa, sets = c(c("A_xenica","F_catanatus"),c("F_chrysotus","F_diaphanus")),mb.ratio = c(0.55, 0.45),keep.order = F)
```
![4upsetr](https://user-images.githubusercontent.com/4043732/62988223-6bd26380-bdf8-11e9-8d2f-e1fbbdb7f582.png)

But as soon as I move to 6, I am confused - there is no longer a bar crossing all 6 sets:
```
upset(pa, sets = c(c("A_xenica","F_catanatus","F_notatus"), c("F_chrysotus","F_diaphanus","F_nottii")),mb.ratio = c(0.55, 0.45),nsets = 6,keep.order = F)
```
![6upsetr](https://user-images.githubusercontent.com/4043732/62988235-78ef5280-bdf8-11e9-8c2c-ff866f18f345.png)

17 sets does not work either:
```
upset(pa, sets = c(c("A_xenica","F_catanatus"),c("F_chrysotus","F_diaphanus"),c("F_grandis","F_heteroclitusMDPL"),c("F_heteroclitusMDPP","F_notatus"),c("F_nottii","F_olivaceous"),c("F_parvapinis","F_rathbuni"),c("F_sciadicus","F_similis"),c("F_zebrinus","L_goodei"),c("L_parva")),mb.ratio = c(0.55, 0.45),keep.order = F)
```
![17_upsetr](https://user-images.githubusercontent.com/4043732/62988271-9ae8d500-bdf8-11e9-8c9e-1082dcee582e.png)


The numbers do not match up. There should be a large group of genes in common between all 17 sets, as I have [calculated and visualized badly with separate venn diagrams](https://github.com/johnsolk/RNAseq_15killifish/blob/master/scripts/4_merge_counts_tables_Ensembl_July2019.ipynb). 

Can you please tell me how to modify my code so that all 17 intersections are considered? (Should have a bar with dots crossing each set.)

Thank you.
Dear authors,

I am having issues with the ordering of the upset plot. Here, I provide a reproducible example.

Read the usual `movies` data set.
```
movies <- read.csv(system.file("extdata", "movies.csv", package = "UpSetR"), 
    header = T, sep = ";")
```

Generate upset plot with certain ordering (say, alphabetical order) of the sets and use `keep.order = T` to retain the specified ordering:
```
movies %>% upset(., keep.order = T, 
                 sets = c("Action", "Comedy", "Drama", "Romance", "Thriller")
                 )
```
![image](https://user-images.githubusercontent.com/4169854/62192577-2896e000-b376-11e9-93a5-cc55e0d084b3.png)

As you can see, everything works swimmingly. Now, I attempt to display only certain intersections that I am specifically interested in.
```
movies %>% upset(., keep.order = T, 
                 sets = c("Action", "Comedy", "Drama", "Romance", "Thriller"), 
                 intersections = list( 
                   list("Action", "Comedy", "Romance"), 
                   list("Action", "Drama", "Thriller"), 
                   list("Action", "Drama", "Romance"), 
                   list("Action", "Thriller"), 
                   list("Drama", "Thriller")  
                   )                
                 )
```
![image](https://user-images.githubusercontent.com/4169854/62192739-77dd1080-b376-11e9-9958-527636be136c.png)

However, the specified set ordering is not retained despite `keep.order = T` executed.

Perhaps, I am making a mistake with the command and parameters. I was also unable to find any issues that resemble this. Perhaps, I missed them. Could you please let me know how I could fix this?

Looking forward to your response.


Cheers,
Shaman