Updates [org.scalatestplus:scalacheck-1-14](https://github.com/scalatest/scalatestplus-scalacheck) from 3.1.0.0 to 3.1.0.1.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalatestplus", artifactId = "scalacheck-1-14" } ]
```
</details>

labels: test-library-update
## Purpose
This PR allows the LazyFlow to work with a single element, when the future is completed after the first element arrives. This previously worked in 2.5, but moving to 2.6 broke this for us, hence we realised the behaviour had changed.

## References
The code is reverted back to what it was before #26446, where this problem seems to have been introduced.

## Changes
- Don't complete promise if still switching
- Have a separate behaviour for the first element

## Background Context
Created failing test reproducing the issue, reverted back to the previously working version, and then eliminated differences until only the important changes remained.
Having only one blocking actor is not enough, since then only one dispatcher
thread will be blocked at a time.
Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
Without any of the settings changes, not using it anywhere in Akka itself and
without providing the mechanism to create multiple system materializers.

Intended to allow downstream projects to provide API's that require an
ActorSystem instead of a Materializer without requiring Akka 2.6 yet.
This way the stack trace will be more helpful because it contains the stage
that actually triggered the materialization.

Otherwise, we will only fail during `preStart` in the interpreter where the
stage will be failed and the error be propagated through the stream where
it can be hard to figure out what happened.

Also improve the message itself to contain the user provided name of the
sink/source.

(This will probably fail a few tests, so this is Jenkins-fodder for now)
https://jenkins.akka.io:8498/job/akka-artery-cluster-tests/2231/consoleText

```
10 was not equal to 11 (ReplicatorPruningSpec.scala:229)
```
The `edition`, to preserve existing behavior while upgrading to latest for perf upgrades, mainly works but some bugs have been fixed e.g.
https://github.com/scalameta/scalafmt/issues/1509 that cause 
formatting changes

For me this makes clean;scalafmtAll 3x faster
https://github.com/akka/akka/issues/28477
Forward port of https://github.com/akka/akka/pull/28407

* If the handshake doesn't complete the Promise in AssociationState was
  not completed and each new restarted stream added future callback to
  it OutboundHandshake stage. Those references are kept in the promise
  and therefore old OutboundHandshake (and probably entire stream) couldn't
  be garbage collected.
* Using own notification mechanism to have control of listener deregistration
  from postStop instead of using Promise/Future.
* Trying to create new Promise after failure/restart would be difficult due
  to that the same AssociationState Promise is accessed from several outbound
  streams, all possibly restarted individually. Therefore easier to cleanup
  from postStop.

(cherry picked from commit 3b7e6095df25d2551c122944f08f869255fb20ca)
