Fix to pyzmq (https://github.com/zeromq/pyzmq/pull/1021), added to pyzmq master in 2017, removed need for custom ZMQEventLoop in order to support use of alternative (uvloop, etc) coroutine engines.  However, Zguide examples (under examples/Python/asyncio_ioloop, see patho{pub,sub}.py for two such cases) are still using outdated ZMQEventLoop-based approach, which also results in examples being more complex than needed (decorators + non-async-based coroutines, etc.).  

Please use current pyzmq asyncio example code instead in Zguide.

Also filed as pyzmq issue in https://github.com/zeromq/pyzmq/issues/1352 -- it wasn't clear who's actually responsible for Python examples in Zguide, and maintains their parity with pyzmq code examples.

Noticed while referencing the `MDP` examples that they are in need of refactoring to not confuse, or continue mistakes. Just two examples, unless I am mistaken:

This is the only place where `@expect_reply` exists, meaning it's essentially unused, and an artifact from copying and pasting another example:

* https://github.com/booksbyus/zguide/blob/cea9f85f932ba353f77aaa847a2242f84055525c/examples/Ruby/mdwrkapi.rb#L27
* https://github.com/booksbyus/zguide/blob/cea9f85f932ba353f77aaa847a2242f84055525c/examples/Ruby/mdwrkapi.rb#L39

Then in the same file, instance variables are set for what ought to just be constants on the class, such as `@timeout` vs. `TIMEOUT` or `@reconnect` vs. `RECONNECT`, etc.

But I found these examples by using `Ruby` code to demonstrate patterns I was transposing as `Crystal`. Rather than refactor `Ruby` for its own sake, it would make more sense to add `Crystal` examples made from the `Ruby` ones, and just know that refactoring will also be involved.

Adding an issue in hopes of coming back later myself, and making a contribution. Have loved `0MQ` for ages now, and am grateful that `Hintjens` lives on so presently, not only in the guide on my desk, but in the movement which only needs updated language examples over time.
Hello, I'm trying to implement own heartbeat pattern using JeroMQ.
This is Paranoid Pirate Java Worker: http://zguide.zeromq.org/java:ppworker.
And this is part of code that reconnects socket if there is no heartbeat from main server:
```java
ctx.destroySocket(worker);
worker = worker_socket(ctx);
liveness = HEARTBEAT_LIVENESS;
```
Am I wrong or should we recreate poller to register new socket? Something like:
```java
ctx.destroySocket(worker);
worker = worker_socket(ctx);
poller = ctx.createPoller(1);
poller.register(worker, ZMQ.Poller.POLLIN);
```
If I don't reopen poller I got `zmq.ZError$IOException: java.nio.channels.ClosedChannelException` and it is ok, because poller tries to poll from closed socket.

Do we need to add these lines to the documentation or is it my fault?
peering1.cs and peering2.cs doesn't seem to work
Can someone help me in complete sample
A subscription is often, but not necessarily a printable string. See zmq_setsockopt() for how this works.

Should be

A subscription is often, but not necessarily, a printable string. See zmq_setsockopt() for how this works.
On MacOS `docbook2ps` and `dbtoepub` are not readily available. The alternative is to use `pandoc`.

In a MacOS version of `bin/buildpdfs` one just change
```
docbook2ps book.xml
ps2pdf book.ps
```
with
```
pandoc --from docbook --to latex --output book.pdf book.xml
```
and
```
dbtoepub ebook.xml
```
with
```
pandoc --from docbook --to epub3 --output ebook.epub ebook.xml
```
I'm checking an examples for REQ/REP sockets, and trying to make some sense from lazy pirate examples. Take a look at php sample http://zguide.zeromq.org/php:chapter4#toc3 http://zguide.zeromq.org/php:lpclient :
```php
$context = new ZMQContext();
$client = client_socket($context);

$sequence = 0;
$retries_left = REQUEST_RETRIES;
$read = $write = array();

while ($retries_left) {
    //  We send a request, then we work to get a reply
    $client->send(++$sequence);

    $expect_reply = true;
    while ($expect_reply) {
        //  Poll socket for a reply, with timeout
        $poll = new ZMQPoll();
        $poll->add($client, ZMQ::POLL_IN);
        $events = $poll->poll($read, $write, REQUEST_TIMEOUT);

        //  If we got a reply, process it
        if ($events > 0) {
            //  We got a reply from the server, must match sequence
            $reply = $client->recv();
            if (intval($reply) == $sequence) {
                printf ("I: server replied OK (%s)%s", $reply, PHP_EOL);
                $retries_left = REQUEST_RETRIES;
                $expect_reply = false;
            } else {
                printf ("E: malformed reply from server: %s%s", $reply, PHP_EOL);
            }
        } elseif (--$retries_left == 0) {
            echo "E: server seems to be offline, abandoning", PHP_EOL;
            break;
        } else {
            echo "W: no response from server, retryingâ€¦", PHP_EOL;
            //  Old socket will be confused; close it and open a new one
            $client = client_socket($context);
            //  Send request again, on new socket
            $client->send($sequence);
        }
    }
}
```
The block in question is the last `else`. My understanding that we can get there only when poll returned 0 pollin events, which can happen when not-final poll try for REQUEST_TIMEOUT and got nothing in the socket(yet). This looks like a normal situation - the poll data have just not returned yet - we should do $retries_left more attempts.

Why do we close the socket and send the message again in the inner `while`? sending messages again should only happen when we did $retries_left poll attempts. Re-sending the request is handled in the outer while cycle, its unnecessary to kill the socket after 1st poll without data.



void *socket=zmq_socket(contex,ZMQ_PUB);
bind(socket,epgm_address);
int rc=zmq_send(socket,data1,datalength,ZMQ_SNDMORE);
rc=zmq_send(socket,data2,datalength,ZMQ_SNDMORE);
rc=zmq_send(socket,data3,datalength,0);

When the data volume is too large or the transmission frequency is too fast
you will recv (data1,data3,data2),order.
Expect related explanation !!!

_Originally posted by @mofei-git in https://github.com/booksbyus/zguide/issues/760#issuecomment-452222517_
in service_internal() msg don't delete after send