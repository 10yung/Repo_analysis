Opening this PR to see if you're open to me removing more global references inside of Fabrication.

I have a weird use case where I need to use Fabrication both for testing/development in rails, but I also need a completely separate object generator in production that will live in `app/factories`. I'm hoping to isolate all of the global/singleton state into one class that lives outside of the Manager for the "normal" test/development use case.
First a bit of context, I have a fabricator for an `ActiveRecord` model that is backed by a materialized view which has both an `id` column and `pk` column (my custom primary key column).

I run into the issue where setting the `pk` or `id` results in both fields being set to the same string value, so my `id` column ends up with a string value when it should be an integer.

```
       Column        |            Type             | Collation | Nullable | Default | Storage  | Stats target | Description
---------------------+-----------------------------+-----------+----------+---------+----------+--------------+-------------
 pk                  | text                        |           |          |         | extended |              |
 id                  | integer                     |           |          |         | plain    |              |
```

Ultimately I want to be able to test I get the right data back when I perform a sql join on `id` column of the materialized view.
I have a fabricator defined as so:

``` ruby
Fabricator(:record) do
  # Study Allocation
  study_id { sequence(:study_id) }

  # Violations
  is_violation { [true, false].sample }
  violations {|attrs| attrs[:is_violation] ? Fabricate.build_times(2, :violation) : [] }

  # Demographics
  demo_date_of_birth { (rand(6) + 6).years.ago + rand(365).days }
  demo_weight { (20 + rand(40) + rand).round(2) }
  demo_height { (60 + rand(90)).to_f / 100 }
end
```

The issue I'm facing is when I use `Fabricate.attributes_for(:record)`. Currently the following output results:

``` ruby
{
  "study_id" => 2,
  "is_violation" => true,
  "violations" => [
    #<Violation id: nil, violation_type_id: nil, record_id: nil, comment: nil, created_at: nil, updated_at: nil>,
    #<Violation id: nil, violation_type_id: nil, record_id: nil, comment: nil, created_at: nil, updated_at: nil>
  ],
  "demo_date_of_birth" => Mon, 26 Mar 2007 05:12:57 UTC +00:00,
  "demo_weight" => 21.14,
  "demo_height" => 1.4
}
```

Whereas I was hoping for output that I could feed into a controller's parameters, and would thus be more like:

``` ruby
{
  "study_id" => 2,
  "is_violation" => true,
  "violations_attributes" => [
    {
      "violation_type_id" => 17,
      "comment" => "Lorem ipsum."
    }
  ],
  "demo_date_of_birth" => Mon, 26 Mar 2007 05:12:57 UTC +00:00,
  "demo_weight" => 21.14,
  "demo_height" => 1.4
}
```
