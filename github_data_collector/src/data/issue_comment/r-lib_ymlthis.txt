Just an Idea and not sure how feasible it would be. 

My suggestion is have another function called `body_text()` with the idea that you can pipe all your normal YAML like this: 

```
Year<-2019
YAML<-yml() %>% 
	yml_title(title=paste(Year,"report")) %>% 
	yml_output(html_document(), pdf_document()) 
```
but then have it that you could build the rest of the document by continuing to pipe eg: 

```
report<-YAML %>% 
body_text("#Introduction
		   Welcome to the 2019 final report...") %>% 
	code_chunk({plot(x=1:10, y=1:10) },
			     chunk_name = "plot_1", 	
			     chunk_args=list(fig.width=10, fig.height=10)) %>% 
	body_text("now that we can see some dots lets write the rest of the report")

use_rmarkdown(Report, path = "report.rmd")
```

I a just not entirely sure how you would tell it which bit goes into the YAML and which in the code chunk/ body parts of options if I understand how it would work

* `blogdown_archetypes()` is only looking in the theme folder. It needs to search the user's `archetype` folder first, then prioritize any there
* Likewise, it's only looking at `.md` files and not folders (bundles) in the `archetypes` folder
* May need to make `[]` vector behavior safer for taxonomies and other YAML, as hugo will often fail when it tries to range over `x: y` instead of `x: [y]`.
takes yml and creates files needed for `use_rmarkdown_template()`
To match the YAML field and the style of the other `yml_*()` functions
Something like `use_blogdown_opts()` that sets up rprofile (and project-specific) options, as discussed by @apreshill here: https://alison.rbind.io/post/2019-02-21-hugo-page-bundles/
Defaults for `language`: https://bookdown.org/yihui/bookdown/internationalization.html
`new_session`: https://bookdown.org/yihui/bookdown/new-session.html

- [ ] ymlthis
- [ ] YAML

In the next release, I'd like to refactor a common pattern to use a function so it's easier to maintain. Most YAML functions look, more or less, like this:

```r
yml_function <- function(
  .yml,
  args = yml_blank()
) {
  yaml_list <- list(
      args = args
  )

  yaml_list <- purrr::discard(yaml_list, is_yml_blank)

  warn_if_duplicate_fields(.yml, yaml_list)
  .yml[names(yaml_list)] <- yaml_list

  .yml
}
```

Most of the second half can be refactored, and there's probably a way to streamline the lists for functions that use entirely top-level fields, as well