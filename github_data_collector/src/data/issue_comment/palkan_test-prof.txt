https://github.com/palkan/test-prof/blob/e135f2df9fff257d7c3944707f46bb960373528c/lib/test_prof/any_fixture.rb#L90

When reporting is enabled, AnyFixture will introspect its cache after suite has run.
But if AnyFixture has not been used, the cache will be empty and this will return nil : 

`cache.stats.keys.map(&:size).max`

Then `nil + 2` will throw an error.

I think the report_stats method should return immediately if cache is empty with a simple message "No AnyFixture Stats available".
With Rspec, there is an idiomatic way to customize context inclusion by providing a block : https://relishapp.com/rspec/rspec-core/docs/example-groups/shared-context#declare-a-shared-context,-include-it-with-%60include-context%60-and-extend-it-with-an-additional-block

This will allow to write thinks like 
```
# with_an_invoice.rb
shared_context "with an invoice" do
  let(:invoice_owner){ raise "you must provide an invoice owner when including this context" }
end
....
# actual spec
include_context("with an user owning resources")# this context exposes a complex let(:user) 
include_context("with an invoice") do # this context exposes a complex let(:invoice)
  let(:invoice_owner){ user } # here I am using the previous user to customize the invoice
end
```

When following this pattern with `let_it_be` , the customization block is added to the list of before_all, it does not override the previous one. 

How do you handle this scenario ?
### Tell us about your environment

**Ruby Version:** ruby 2.5.0p0

**Framework Version (RSpec, Minitest, FactoryGirl, Rails, whatever):**
- RSpec v3.7.0
- FactoryBot v4.8.2
- Rails v5.2.2

**TestProf Version:** v0.9.0

### What did you do?

I am adding `test-prof` to my project to be able to use `let_it_be`. I'm using the Rails version that allows transactional tests with a shared connection when using feature tests with Capybara.
Having a controller test, I changed from this:

```ruby
let(:foo) { create(:foo) }
```

To this:

```ruby
let_it_be(:foo) { create(:foo) }
```

The `Foo` model has a `belongs_to` association to a model `Bar` from a different database:

```ruby

class Foo < ActiveRecord::Base
  belongs_to :bar
end

class Bar < ActiveRecord::Base
  establish_connection "other_database_#{Rails.env}".to_sym
end
```

When I was using just `let(:foo)`, given I have `config.use_transactional_fixtures = true`, both records were destroyed after every run.
After I changed to `let_it_be(:foo)`, It works on the first run, but afterwards I get an error when trying to create the `Foo` record, because it says a `Bar` already exists with that name.
I added a `binding.pry` and in fact it looks like a record is in the database (in the first line of the test).
I started resetting the test database and again, it works the first time and fails afterwards.

### What did you expect to happen?

I would have expected the transaction to rollback all records, no matter the database.

### What actually happened?

Even though the `Foo` record was cleared as expected, that didn't happen with `Bar`.

Do you have any idea of what's going on? Is this a known issue?


**EDIT 07/27**
In case this helps. I've just also tried doing this:

```ruby
before_all do
  @bar = create(:bar)
end
```

And It's definitely not rolling back the transaction for the other database. That's not the case for creating records on the main database.
How complex would it be to support merging test results? We're running tests in parallel, its easy to configure each one to spit out separate files but it would be great to be able to merge results across the entire test suite into one report of flamechart.

I'm using your gem to analyze a huge project and I'm wondering if there's an option to collect all Profiler's results into plain text files for later analysis. 

Right now all the results are outputted to stdout and are not handy to be managed when are executed in CI. I wish to have it in plain files and get it from CI as artifacts.

Any idea? Thank you :)
Can `test-prof` run in parallel using [gem `flatware`](https://rubygems.org/gems/flatware) or [gem `parallel_tests`](https://rubygems.org/gems/parallel_tests) ?

This thread (not a an issue at all) aims to collect the stories of detecting and fixing test suites bottlenecks. Not necessary related to TestProf, btw.

That would help others to improve their tests and would help me to make the TestProf gem better.

Please, comment on this issue to share your story!