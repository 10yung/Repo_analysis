I see this frame already uses new \MongoDB\Client to support new Mongodb drive on php7, however in db/mongo/mapper.php, when handling 'group', it uses "$this->collection->group" which doesn't exist in class MongoDB\Collection. What should i do?
Hello!

Please consider harvesting numerous benefits of @phpstan

`phpstan analyze -a lib/base.php lib/ -l 0`

Level may go up to 7!

And see https://twitter.com/szepeviktor/status/1157751604419997696
Hi,

I am trying to save SESSION.id through:
   $f3->set(SESSION.id, 'user' ); #default $ttl=0

But, my SESSION.id never get saved. When i go through the base.php code, i see the following:
 ```
if ($ttl)
			// Persist the key-value pair
			Cache::instance()->set($this->hash($key).'.var',$val,$ttl);
		return $ref;
```
Is this as per degined? I thought $ttl=0 suppose to save the variable infinitely? Thanks

Hi,
I'm playing with F3 and try to connect to an Azure Cosmos DB via their Mongo API.
new DB\Mongo(...) throws a MongoDB\Driver\Exception\RuntimeException: Command is not supported.
Digging into the error, it seems to me that the database does not support the 'profile 2' command.
In lib/db/mongo.php the profiling level is set to 2 in both legacy and normal mode. (I'm using the normal one).
When I comment out that line, I can work with the database.
FYI to everyone with a similar setup.
Maybe it would be worth to have the profile level as a configuration parameter.
BR,
Janos

### Issue:
In case a _cURL_ requests failed, `\Web::instance()->request($url, $options)` returns a **string representation** of the error in the returned Array.  
This makes it hard to handle different error types. I suggest adding a **new** `errorCode` to the returned Array.

### Suggestion:
Add new `errorCode` to returned Array. Example shows a request that _timedOut_ : 

``` PHP
[
  'body' => '',
  'headers' => [],
  'engine' => 'cURL',
  'cached' => false,
  'error' => 'Connection timed out after 16 milliseconds',
  'errorCode' => 28    // <== new entry
]
```
### Implementation (suggestion):
Replace this code https://github.com/bcosca/fatfree/blob/master/lib/web.php#L303 
``` PHP
ob_start();
curl_exec($curl);
$err=curl_error($curl);
curl_close($curl);
$body=ob_get_clean();
```
... with something like this:
``` PHP
ob_start();
curl_exec($curl);
if($errCode = curl_errno($curl)){  // e.g. 28 - Must be done before curl_close(), returns 0||null if no error found
    $errMessage = curl_strerror($errCode ); // e.g. "Timeout was reached"
    $err = curl_error($curl) // e.g. "Connection timed out after 16 milliseconds"
}
curl_close($curl);
$body=ob_get_clean();
```
... and add `$errCode` (maybe `$errMessage` as well) to the response Array.
As you can see, the Strings are slightly different.

### Test:
Either set `$options['timeout'] = 1` as config option for a valid request and _hope_ for a timeout, 
**or** add this to the `_curl($url,$options)` method and set the timeout to e.g. **10ms**:
``` PHP
curl_setopt($curl,CURLOPT_CONNECTTIMEOUT_MS, 10);
curl_setopt($curl,CURLOPT_TIMEOUT_MS, 10);
```
From time to time I see the following error in my error log

Here's the call stack:
PDOStatement: Duplicate entry 'fta5qn9umut0re92l17tft9hcc' for key 'PRIMARY' (500: Internal Server Error)
[/fatfree/base.php:2219] Base->error()
[/fatfree/db/sql.php:235] user_error()
[/fatfree/db/sql/mapper.php:439] DB\SQL->exec()
[/fatfree/db/cursor.php:245] DB\SQL\Mapper->insert()
[/fatfree/db/sql/session.php:95] DB\Cursor->save()
[/php/fatfree/base.php:2091] session_commit()

Why this happens and how to fix it? 
Hello, sorry if my question is dumb

as reference 
https://secure.php.net/manual/en/pdostatement.nextrowset.php

I don't see support of this in the SQL wrapper
I have found only one related issue from 2013 which is closed
https://github.com/bcosca/fatfree/issues/321

but when I test `DB\SQL::exec` call with the procedure which returns multiply rowsets I get only first from two in return.

So is there support for this and if not, should it be added?

Thank you.
When custom session handler is used (in my case it's \DB\SQL\Session), *\Template::instance()->render* call from a page where custom session handler is not initialized destroys the session cookie. 

This appears to happen because of this code in *base.php* for the *Preview->render* method :
				if (isset($_COOKIE[session_name()]) &&
					!headers_sent() && session_status()!=PHP_SESSION_ACTIVE)
					session_start();

Currently I work around this issue by calling unset($_COOKIE[session_name()]); before rendering, but I'd like to see an option to prevent render method starting the session in the first place.
Hi,
I have a cli script, that runs through a big (12000 items) json file and updates a mysql database. After 200 entries the script dies with the info that sql.php line 230 tried to allocate X of memory. (Sorry I don't remember the exact words)

This is line 230:
```php
if ($log)
	$this->log=str_replace('(-0ms)',
	'('.sprintf('%.1f',1e3*(microtime(TRUE)-$now)).'ms)',
	$this->log);
```

This is my script (simplified)

```php
//$this->db->log(FALSE); // turn off logging, else it runs out of memory
$this->crawlerdb = new DB\SQL\Mapper($this->db,'crawler');

$entries = json_decode($big_json_file);
foreach($entries as $entry){
	$this->crawlerdb->load(array('source_id = ?', $entry->id));

	$this->crawlerdb->copyfrom(array(
		'type' => $entry->type,
		'url' => $entry->url,
		'title' => $entry->title, //... more fields
	));
	// insert or update
	$this->crawlerdb->save();
}
```

After I set a var_dump($this->log) on sql.php:230 I saw that `$this->log` just grows (exec time and queries) and then hits the php memory limit.

I know that this is intended, to profile SQL calls, but since logging is on by default, it was confusing to see the script crash and not really knowing why.

> F3 keeps track of all commands issued to the underlying SQL database driver, as well as the time it takes for each statement to complete - just the right information you need to tweak application performance. https://fatfreeframework.com/3.6/databases#Profiling

With logging turned off `$this->db->log(FALSE);` it seems to work.
So I wonder if I made a mistake in my application? Or should the documentation mention this? Or is this an edge case?

Thanks. Marcus


The sample nginx setup should include the rule to block all `.ini` files.