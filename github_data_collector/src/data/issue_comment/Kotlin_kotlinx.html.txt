
Add support for the [`<summary>`](https://www.w3.org/TR/html52/interactive-elements.html#the-summary-element) tag
property syntax. Received element is not cached and received
directly from the [Document] by calling [Document.getElementById]
function on every property access. Throws an exception if element
is not found or has different type
To access an element with theId ID use the following property declaration

```
val theID by document.gettingElementById
```

To access an element of specific type, just add it to the property declaration

```
val theID : HTMLImageElement by document.gettingElementById
```

see for more details:
https://youtrack.jetbrains.com/issue/KT-32552
Доброго времени суток! Сразу скажу, что я не программист!
При создании тэга tabl {} для jmv, компилятор добавляет в нутрь тэг tbody, его видно при просмотре кода в браузере. Когда компилируется js, через модуль kotlin/JS, то тэг tbody не добавляется во внутрь tabl{}. Я так понимаю, что тэг tbody thead и др не являются обязательными.
Если при компиляции кода для jvm в таблице указать, что в tbody входит часть строк, а остальные оставить как есть, то компилятор оставшиеся строки таблице засунет в tbody, но если оставшиеся строки засунуть в thead, то часть то thead заменит тэг tbody, который компилятор добавляет самовольно.
Are there plans to support Kotlin/mingwX64 (and iosArm64, linuxX64, etc)? It shouldn't be too much hassle to add it.
can add support for visual studio code?
I wanted to create a PR for the "template" element. Followed the steps here [https://github.com/Kotlin/kotlinx.html/wiki/Development](url) but when I ran the test, it keeps failing because of CompatabilityTest (mismatching declarations.json). I checked that the jvm/src/test/resources/declarations.json were commited by Sergey Mashkov. 

Since it wasn't in the wiki, I was wondering how to fix/bypass this test since this looks like a file I shouldn't be touching. 
In JSDOMBuilder event listeners get added by setEvent.

```
else -> path.last().setEvent(event, value)
```
In case of a vaadin-text-field, that needs a custom 'change' event however this does not work. It does  work when I add the listener like 

```
else -> path.last().addEventListener(event, value)
```

Is there a chance to add a method like this in JSDOMBuilder/TagConsumer?



I need to embed a third party angular element. 

When trying this out using the kotlinx.html DSL I ran into a problem that these angular elements have attribute names which start with '[' or '(' for example:

```
<todo "[todo]" = "todo"></todo>
```

For events they seem to use `(someEvent)`.

Currently I am seeing

```
Tag some-tag has invalid attribute name (onsomeevent)
```

According to https://www.w3.org/TR/html/syntax.html:

> Attributes for an element are expressed inside the element’s start tag.
> 
> Attributes have a name and a value. Attribute names must consist of one or more characters other than the space characters, U+0000 NULL, U+0022 QUOTATION MARK ("), U+0027 APOSTROPHE ('), U+003E GREATER-THAN SIGN (>), U+002F SOLIDUS (/), and U+003D EQUALS SIGN (=) characters, the control characters, and any characters that are not defined by Unicode. In the HTML syntax, attribute names, even those for foreign elements, may be written with any mix of lower- and uppercase letters that are an ASCII case-insensitive match for the attribute’s name.
The current implementation of HTML `<meta>` tags only include the `name` and `content` attributes, which makes it impossible to add OpenGraph tags, which are specified as follows [1]:

``` html
<html prefix="og: http://ogp.me/ns#">
<head>
<title>The Rock (1996)</title>
<meta property="og:title" content="The Rock" />
<meta property="og:type" content="video.movie" />
<meta property="og:url" content="http://www.imdb.com/title/tt0117500/" />
<meta property="og:image" content="http://ia.media-imdb.com/images/rock.jpg" />
...
</head>
...
</html>
```

As a workaround, it's possible to wrap the raw HTML inside `unsafe`, but I'd prefer not to.

[1] http://ogp.me/