FreeBSD uses Linux way of handling things on powerpc64 (both ELFv1 and ELFv2).
 Travis-CI has added support for ARM64. Added ARM64 jobs in Travis-CI.
Also 3.7 is available, no need to use 3.7-dev

First step in addressing #151 

Because they are no longer supported in travis, dropped the tests in python 2.6, 3.2 and 3.3
Could you update wheel at PyPI for 3.8?
That's allow to use `gevent` with `python:3.8-slim` based docker-containers.
Closes #149


There is a small typo in tests/test_leaks.py.
Should read requiring rather than requring.


So I'm trying to install this on a vanila python 3.7 image and I get the following output:

`Running setup.py install for greenlet: started
    Running setup.py install for greenlet: finished with status 'error'
    ERROR: Complete output from command /usr/local/bin/python -u -c 'import setuptools, tokenize;__file__='"'"'/tmp/pip-install-c7r5y_pn/greenlet/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-o4sxpc11/install-record.txt --single-version-externally-managed --compile:
    ERROR: running install
    running build
    running build_ext
    building 'greenlet' extension
    creating build
    creating build/temp.linux-x86_64-3.7
    gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -fPIC -I/usr/local/include/python3.7m -c greenlet.c -o build/temp.linux-x86_64-3.7/greenlet.o
    greenlet.c: In function ‘g_switchstack’:
    greenlet.c:463:29: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_type’; did you mean ‘curexc_type’?
       current->exc_type = tstate->exc_type;
                                 ^~
    greenlet.c:464:30: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_value’; did you mean ‘curexc_value’?
       current->exc_value = tstate->exc_value;
                                  ^~
    greenlet.c:465:34: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_traceback’; did you mean ‘curexc_traceback’?
       current->exc_traceback = tstate->exc_traceback;
                                      ^~
    greenlet.c:485:9: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_type’; did you mean ‘curexc_type’?
       tstate->exc_type = target->exc_type;
             ^~
    greenlet.c:487:9: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_value’; did you mean ‘curexc_value’?
       tstate->exc_value = target->exc_value;
             ^~
    greenlet.c:489:9: error: ‘PyThreadState {aka struct _ts}’ has no member named ‘exc_traceback’; did you mean ‘curexc_traceback’?
       tstate->exc_traceback = target->exc_traceback;
             ^~
    error: command 'gcc' failed with exit status 1
    ----------------------------------------
ERROR: Command "/usr/local/bin/python -u -c 'import setuptools, tokenize;__file__='"'"'/tmp/pip-install-c7r5y_pn/greenlet/setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record /tmp/pip-record-o4sxpc11/install-record.txt --single-version-externally-managed --compile" failed with error code 1 in /tmp/pip-install-c7r5y_pn/greenlet/`

Don't know where to start but it looks like a C issue certianly. Is there a requirement on Cython that I'm missing or some C headers?
Attempts to use `bpython` on IBM i fail with the following:
```
Traceback (most recent call last):
  File "/QOpenSys/pkgs/lib/python3.6/runpy.py", line 193, in _run_module_as_main
    "__main__", mod_spec)
  File "/QOpenSys/pkgs/lib/python3.6/runpy.py", line 85, in _run_code
    exec(code, run_globals)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/__main__.py", line 31, in <module>
    sys.exit(main())
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsies.py", line 191, in main
    exit_value = repl.mainloop(True, paste)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsies.py", line 126, in mainloop
    self.process_event_and_paint(e)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsies.py", line 90, in process_event_and_paint
    self.process_event(e)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/repl.py", line 603, in process_event
    return self.process_key_event(e)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/repl.py", line 732, in process_key_event
    self.on_enter()
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/repl.py", line 817, in on_enter
    self.push(self.current_line, insert_into_history=insert_into_history)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/repl.py", line 1087, in push
    self.run_code_and_maybe_finish()
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/repl.py", line 1090, in run_code_and_maybe_finish
    r = self.coderunner.run_code(for_code=for_code)
  File "/QOpenSys/pkgs/lib/python3.6/site-packages/bpython/curtsiesfrontend/coderunner.py", line 138, in run_code
    request = self.code_context.switch()
SystemError: <built-in method switch of greenlet.greenlet object at 0x700000000b713d8> returned NULL without setting an error
```
I suspect this is because there's no proper AIX ppc64 implementation (IBM i uses an AIX runtime and instruction set).

I'm willing to help built/test a solution if needed.
Not sure if this is related to greenlet or eventlet, I hope you can redirect me if need be.
```
[2019-03-16 02:24:05 +0000] [9] [ERROR] Socket error processing request.
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base_async.py",                                                                   line 66, in handle
    six.reraise(*sys.exc_info())
  File "/usr/local/lib/python3.6/site-packages/gunicorn/six.py", line 625, in re                                                                  raise
    raise value
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base_async.py",                                                                   line 56, in handle
    self.handle_request(listener_name, req, client, addr)
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base_async.py",                                                                   line 129, in handle_request
    six.reraise(*sys.exc_info())
  File "/usr/local/lib/python3.6/site-packages/gunicorn/six.py", line 625, in re                                                                  raise
    raise value
  File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base_async.py",                                                                   line 107, in handle_request
    respiter = self.wsgi(environ, resp.start_response)
  File "/usr/local/lib/python3.6/site-packages/flask/app.py", line 2309, in __ca                                                                  ll__
    return self.wsgi_app(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/flask_socketio/__init__.py", line                                                                   44, in __call__
    start_response)
  File "/usr/local/lib/python3.6/site-packages/engineio/middleware.py", line 59,                                                                   in __call__
    return self.engineio_app.handle_request(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/socketio/server.py", line 428, in                                                                   handle_request
    return self.eio.handle_request(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/engineio/server.py", line 340, in                                                                   handle_request
    environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/engineio/socket.py", line 106, in                                                                   handle_get_request
    start_response)
  File "/usr/local/lib/python3.6/site-packages/engineio/socket.py", line 146, in                                                                   _upgrade_websocket
    return ws(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/engineio/async_drivers/eventlet.p                                                                  y", line 20, in __call__
    return super(WebSocketWSGI, self).__call__(environ, start_response)
  File "/usr/local/lib/python3.6/site-packages/eventlet/websocket.py", line 130,                                                                   in __call__
    self.handler(ws)
  File "/usr/local/lib/python3.6/site-packages/engineio/socket.py", line 172, in                                                                   _websocket_handler
    pkt = ws.wait()
  File "/usr/local/lib/python3.6/site-packages/eventlet/websocket.py", line 788,                                                                   in wait
    for i in self.iterator:
  File "/usr/local/lib/python3.6/site-packages/eventlet/websocket.py", line 643,                                                                   in _iter_frames
    message = self._recv_frame(message=fragmented_message)
  File "/usr/local/lib/python3.6/site-packages/eventlet/websocket.py", line 669,                                                                   in _recv_frame
    header = recv(2)
  File "/usr/local/lib/python3.6/site-packages/eventlet/websocket.py", line 578,                                                                   in _get_bytes
    d = self.socket.recv(numbytes - len(data))
  File "/usr/local/lib/python3.6/site-packages/eventlet/greenio/base.py", line 3                                                                  64, in recv
    return self._recv_loop(self.fd.recv, b'', bufsize, flags)
  File "/usr/local/lib/python3.6/site-packages/eventlet/greenio/base.py", line 3                                                                  58, in _recv_loop
    self._read_trampoline()
  File "/usr/local/lib/python3.6/site-packages/eventlet/greenio/base.py", line 3                                                                  29, in _read_trampoline
    timeout_exc=socket_timeout('timed out'))
  File "/usr/local/lib/python3.6/site-packages/eventlet/greenio/base.py", line 2                                                                  08, in _trampoline
    mark_as_closed=self._mark_as_closed)
  File "/usr/local/lib/python3.6/site-packages/eventlet/hubs/__init__.py", line                                                                   164, in trampoline
    return hub.switch()
  File "/usr/local/lib/python3.6/site-packages/eventlet/hubs/hub.py", line 297,                                                                   in switch
    return self.greenlet.switch()
socket.timeout: timed out
```

Hello.

I'm trying to implement a kind of preemptive scheduling for greenlets, utilizing the fact that Python's signal handler functions are actually executed in the context of main control flow.

The code below works fine with greenlet 0.4.13 module built into PyPy3.5 v7.0.0, but freezes with greenlet 0.4.x in CPython 3.5.3 and 2.7.13.

```python
import greenlet
import signal
import sys

from collections import OrderedDict


_counters = {}
_main_greenlet = greenlet.getcurrent()


def timer_handler(signum, frame):
    try:
        print("timer, {}".format(_counters))
        if greenlet.getcurrent() is not _main_greenlet:
            print("switching to main")
            _main_greenlet.switch()
        else:
            print("already in main, not switching")
    except RuntimeError as rte:
        if "reentrant call" not in rte.args:
            raise

def set_timer(t, handler=timer_handler):
    signal.signal(signal.SIGALRM, handler)
    signal.setitimer(signal.ITIMER_REAL, t, t)

def f(counter_id):
    if counter_id not in _counters:
        _counters[counter_id] = 0
    while True:
        _counters[counter_id] += 1

if __name__ == "__main__":
    try:
        try:
            n = int(sys.argv[1])
        except:
            n = 10
        children = OrderedDict()
        for i in range(n):
            def fi(x=i):
                f(x)

            g = greenlet.greenlet(fi)
            children["g{}".format(i)] = g

        try:
            t = float(sys.argv[2])
        except:
            t = 0.1
        set_timer(t)

        while True:
            for g in children:
                print("switching to {}".format(g))
                children[g].switch()
    except KeyboardInterrupt:
        try:
            print("interrupted, {}".format(_counters))
        except:
            pass
```
Any clues?

**EDIT**: almost forgot... This simpler code works on both CPython 3.5.3 and 2.7.13:
```python
import greenlet
import signal

iter_count = 0

def f1():
    global iter_count
    while True:
        iter_count += 1
        pass

g1 = greenlet.greenlet(f1)

def f2():
    while True:
        print("switch, {}".format(iter_count))
        g1.switch()

g2 = greenlet.greenlet(f2)

def handler(signum, frame):
    print("timer, {}".format(iter_count))
    g2.switch()

signal.signal(signal.SIGALRM, handler)
signal.setitimer(signal.ITIMER_REAL, 0.1, 0.1)

try:
    g2.switch()
except:
    print("interrupted, {}".format(iter_count))
```