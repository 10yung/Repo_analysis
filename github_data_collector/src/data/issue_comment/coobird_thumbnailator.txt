## Expected behavior
The error will not happen

## Actual behavior
Got an OOM error.

## Steps to reproduce the behavior

When I resize this image (https://1drv.ms/u/s!AlpawZKZPCw41DIr9maBJADZEfgS?e=e7TPce), the OOM error will happen. This image is a jpg file without the extension name. 

```java
public static final void main(String[] args) throws IOException {
        String file = "~/Desktop/2d6518b4d6b54756822a5b99714eeb6c64ae";
        String format = "jpg";
        int width = 100, height = 100;

        FileInputStream fileInputStream = new FileInputStream(file);

        ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();

        Thumbnails.of(fileInputStream)
            .size(width, height)
            .outputFormat(format).outputQuality(1.0)
            .toOutputStream(byteArrayOutputStream); // this is the ImageDownloadController.java:110 in the trace info below.

        System.out.printf("OutputStream length: " + byteArrayOutputStream.size());
    }
```

And I got this
```text
Exception in thread "main" java.lang.OutOfMemoryError: Java heap space
	at java.awt.image.DataBufferByte.<init>(DataBufferByte.java:92)
	at java.awt.image.ComponentSampleModel.createDataBuffer(ComponentSampleModel.java:445)
	at java.awt.image.Raster.createWritableRaster(Raster.java:941)
	at javax.imageio.ImageTypeSpecifier.createBufferedImage(ImageTypeSpecifier.java:1074)
	at javax.imageio.ImageReader.getDestination(ImageReader.java:2892)
	at com.sun.imageio.plugins.jpeg.JPEGImageReader.readInternal(JPEGImageReader.java:1082)
	at com.sun.imageio.plugins.jpeg.JPEGImageReader.read(JPEGImageReader.java:1050)
	at com.twelvemonkeys.imageio.plugins.jpeg.JPEGImageReader.read(JPEGImageReader.java:412)
	at net.coobird.thumbnailator.tasks.io.InputStreamImageSource.read(Unknown Source)
	at net.coobird.thumbnailator.tasks.SourceSinkThumbnailTask.read(Unknown Source)
	at net.coobird.thumbnailator.Thumbnailator.createThumbnail(Unknown Source)
	at net.coobird.thumbnailator.Thumbnails$Builder.toOutputStream(Unknown Source)
	at com.enniu.cloud.services.sfsgateway.controller.ImageDownloadController.main(ImageDownloadController.java:110)
```

## Environment
_Please provide vendor and version information for the Operating System,
JDK, and Thumbnailator. Please feel free to add any other information
which may be pertinent._

- OS vendor and version:
> macos catalina 10.15.1  

- JDK vendor and version: 
> java version "1.8.0_151"
Java(TM) SE Runtime Environment (build 1.8.0_151-b12)
Java HotSpot(TM) 64-Bit Server VM (build 25.151-b12, mixed mode)  

- Thumbnailator version:
>  0.4.8
## Expected behavior
_Please describe what you are expecting the library to perform._



## Actual behavior
_Please describe the actual behavior you are experiencing, including stack
trace and other information which would help diagnose the issue._

net.coobird.thumbnailator.tasks.UnsupportedFormatException: No suitable ImageReader found for C:\Users\LKhore\Pictures\Screenshots\desktop.ini.
	at net.coobird.thumbnailator.tasks.io.FileImageSource.read(Unknown Source)
	at net.coobird.thumbnailator.tasks.SourceSinkThumbnailTask.read(Unknown Source)
	at net.coobird.thumbnailator.Thumbnailator.createThumbnail(Unknown Source)
	at net.coobird.thumbnailator.Thumbnails$Builder.asFiles(Unknown Source)Disconnected from the target VM, address: '127.0.0.1:50696', transport: 'socket'

	at net.coobird.thumbnailator.Thumbnails$Builder.toFiles(Unknown Source)
	at net.coobird.thumbnailator.Thumbnails$Builder.toFiles(Unknown Source)
	at Thumb.main(Thumb.java:13)

## Steps to reproduce the behavior
_Please enter step-by-step instructions for reproducing the actual behavior.
Including code can be helpful in diagnosing issue, but please keep the code to
a minimal that will reproduce the behavior._



## Environment
_Please provide vendor and version information for the Operating System,
JDK, and Thumbnailator. Please feel free to add any other information
which may be pertinent._

- OS vendor and version:
Windows
- JDK vendor and version:
1.8
- Thumbnailator version:
[0.4, 0.5)
## Expected behavior
Resize an image to a smaller size without greatly affecting the visual quality of it.

My source image is this: 
![git-logo](https://user-images.githubusercontent.com/8939680/57539369-f8f4b080-730f-11e9-9b12-c774259290c2.png)

and when I run it through Thumbnailator using
```java
Thumbnails.of(image)
  .size(128, 128)
  .keepAspectRatio(true)
  .outputFormat("png")
  .toFile(file);
```
I expect it to come out as a 128x128 PNG image retaining its transparent background - the file is smaller and there may be some artifacting, but no major aberrations.

## Actual behavior
The output image is this:
![logo-1 thumbnail](https://user-images.githubusercontent.com/8939680/57539713-af589580-7310-11e9-853e-5830266bfcbd.png)

The logo has lost its transparent background for a black one and there are horrible red vertical 'scanlines' running through the orange part of the logo. For some reason, this issue only happens on this image and not the 5 other images I have ran through Thumbnailator. The only difference is that this source image is an 8bit png instead of a 24bit png.

## Steps to reproduce the behavior
Run the above sample image through the provided Thumbnailator code..

## Environment
- OS vendor and version: Windows 10 version 1809
- JDK vendor and version: Oracle JDK 11.0.1 LTS
- Thumbnailator version: 0.4.8
To respect the wish not to create pull requests but an issue... here it comes.

If an error occurs while reading the local stream in the FileImageSource, the created stream will not be closed, so the src file cannot be deleted.

The error can be reproduced with this test:

	@Test
	public void broken_image_should_be_deletable_after_read() throws IOException {
		File sourceFile = File.createTempFile("tempfile", "_thumbnailatortest.jpg");

		//some broken image input
		InputStream is = new InputStream() {
			private long size = 0;
			private Random r = new Random();
			int[] jpg = new int[] {0xFF, 0xD8, 0xFF, 0xE0};
			private int i = -1;

			@Override
			public int read() {
				if(size > 1024*10)
					return -1;
				size++;

				i++;
				if(i >= jpg.length)
					return r.nextInt();

				return jpg[i];
			}
		};

		FileOutputStream os = new FileOutputStream(sourceFile);
		byte[] buffer = new byte[1024];
		int bytesRead;
		//read from is to buffer
		while((bytesRead = is.read(buffer)) !=-1){
			os.write(buffer, 0, bytesRead);
		}
		is.close();
		//flush OutputStream to write any buffered data to file
		os.flush();
		os.close();


		FileImageSource source = new FileImageSource(sourceFile);

		try {
			source.read();
		} catch (Exception e) {
			//i know its broken...
		}

		//try to delete the broken file
		sourceFile.delete();

		assertFalse(sourceFile.exists());
	}

With a try.. finally block this can be solved possibly quite fast.

I'd like to create a "slow zoom to center of photo" BufferedImage sequence, and I *think* this library can do it without using external hacks, but when I tried, it came out all janky.

```
val scaled =
        Canvas(maxRes.width, maxRes.height, Positions.CENTER).apply(
                Thumbnails.of(file)
                        .size(maxRes.width, maxRes.height)
                        .asBufferedImage())

for (i in 0 until maxFrames) {
    // not proportional :/
    val trimmed = scaled.getSubimage(i, i, scaled.width - (2 * i), scaled.height - (2 * i))
    var t = Thumbnails.of(trimmed).size(maxRes.width, maxRes.height)
    if (orientation != 0) {
        t = t.rotate(orientation.toDouble())
    }
    yield(t.asBufferedImage())
}
```

Is there a better way to do the Canvas trim and a proportional edge-trim as the frames progress? I've got the two `Thumbnails.of` which smells wrong, and I know the `2 * i` doesn't respect the image ratio, so... ya.  But I'm hopeful because I just found out about Canvas.  Not sure how to incorporate it into ThumbnailBuilder chain yet, but still looking!
I have an Image in java and I want to use the Thumbnailator class to resize it.

But it seems that the Thumbnailator class does not accept Images and has no method for converting Images to BufferedImages (which are accepted instead).

I thought that I probably am missing something because this seems like an odd predicament that many people would likely find. I could write my own method to convert it to a BufferedImage but I first thought to ask if there is a way the Thumbnailator can do so?

Thank you very much!
Hello friends,
Before Compression, the background's color is transparent.
After Compression, the background's color is black.
The picture's format is png.
Thanks for yours answers.
## Expected behavior
_Please describe what you are expecting the library to perform._



## Actual behavior
_Please describe the actual behavior you are experiencing, including stack
trace and other information which would help diagnose the issue._



## Steps to reproduce the behavior
_Please enter step-by-step instructions for reproducing the actual behavior.
Including code can be helpful in diagnosing issue, but please keep the code to
a minimal that will reproduce the behavior._



## Environment
_Please provide vendor and version information for the Operating System,
JDK, and Thumbnailator. Please feel free to add any other information
which may be pertinent._

- OS vendor and version:
- JDK vendor and version:
- Thumbnailator version:
## Expected behavior
When setting `useExifOrientation` flag to `true`, one can expect that Image orientation is handled properly no matter what Image source we use (InputStream, BufferedImage etc.).

## Actual behavior
Image orientation from EXIF metadata is respected in other cases.
After checking the source code it seems that:
- **BufferedImage - NOK**
- FileImageSource - OK
- InputStreamImageSource - OK
- URLImageSource - OK

## Steps to reproduce the behavior
Test cases reproducing the issue: https://github.com/KamilKrol/thumbnailator/commit/d839bb977c2102637db121ce5401d077c7689266
For the moment we have implemented workaround in our application, but we need to implement proper solution - ideally by providing Pull request to this library.

## Environment
Should be reproducible on any environment (implementation problem).
- OS vendor and version: Windows, Linux, MacOS
- JDK vendor and version: Oracle, OpenJDK
- Thumbnailator version: 0.4.8
## Expected behavior
_Please describe what you are expecting the library to perform._
I want to generate the thumbnail of one PNG file


## Actual behavior
_Please describe the actual behavior you are experiencing, including stack
trace and other information which would help diagnose the issue._
The source png file is this:
![3](https://user-images.githubusercontent.com/34224911/47475039-7b25f780-d84c-11e8-8819-b34ccac3dc0a.png)
The generated thumbnail is this:
![thumbnail-3-1540439433067](https://user-images.githubusercontent.com/34224911/47475051-86792300-d84c-11e8-9d9f-efa6788d2c20.png)

The color is wrong, it is supposed to be red.


## Steps to reproduce the behavior
_Please enter step-by-step instructions for reproducing the actual behavior.
Including code can be helpful in diagnosing issue, but please keep the code to
a minimal that will reproduce the behavior._
I checked the PNG file: (1200x628, 4-bit palette, non-interlaced, 98.5%).
I think it is due to 4-bit palette which is not supported. After I convert to PNG-8 or PNG-24, no issue.



## Environment
_Please provide vendor and version information for the Operating System,
JDK, and Thumbnailator. Please feel free to add any other information
which may be pertinent._

- OS vendor and version: MacOS/Ubuntu 14.04
- JDK vendor and version: Java SDK 8
- Thumbnailator version: 0.4.8