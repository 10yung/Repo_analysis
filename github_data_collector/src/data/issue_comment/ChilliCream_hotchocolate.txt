**Is your feature request related to a problem? Please describe.**
When writing client queries or mutations potential mistakes can be made, but there is no way to debug the issues, because the HotChocolate server always returns `The value of $input has a wrong structure.`.

**Describe the solution you'd like**
It would be great if an exception would be raised with additional information 
(located in [DictionaryToObjectValueConverter#80](https://github.com/ChilliCream/hotchocolate/blob/cf600304845e716fb9dfacdce491bc59c31bf1b8/src/Core/Core/Execution/Utilities/DictionaryToObjectValueConverter.cs#L80)). The exception or message should atleast containt `field.Key` or the whole `ConverterContext`

- [ ] Add subscription interceptors to docs
- [ ] Add payload & query string authentication docs
- [ ] Add example project for authentication on 
     - [ ]  Apollo 
     - [ ]  Relay
     - [ ]  SingalR 
I have paths in my scheme that are marked with the [Authorize] directive attribute, but the code that was generated from `dotnet build` does not include parameters to attach/change authorization headers to the request other than setting a default.

Is there a workaround for now to add/change an auth header per request?
Using the remote query clients directly for queries that cannot be done via delegation are currently failing due to being unable to serialize in [`RemoteQueryClient`](https://github.com/ChilliCream/hotchocolate/blob/bad41c6637d3a6059444960497255d6858f8d4c4/src/Stitching/Stitching/Utilities/HttpQueryClient.cs#L193).

This PR includes a test which shows this behavior.

**Describe the bug**
enumerable_any does not work on scalar arrays
```
Expression of type 'GIA.WebServices.CMDB.RequestValidation' cannot be used for parameter of type 'System.Collections.Generic.IEnumerable`1[HotChocolate.Types.Filters.ISingleFilter`1[System.String]]' of method 'Boolean Any[ISingleFilter`1](System.Collections.Generic.IEnumerable`1[HotChocolate.Types.Filters.ISingleFilter`1[System.String]])' (Parameter 'arg0')
```


The generated `ServiceCollectionExtensions` for StawberryShake generates the following for my client:

```csharp
// omitted usings

namespace Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static class NameClientServiceCollectionExtensions
    {
        private const string _clientName = "NameClient";

        public static IOperationClientBuilder AddNameClient(
            this IServiceCollection serviceCollection)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            serviceCollection.AddSingleton<IPolicyStagingClient, PolicyStagingClient>();

            // ommitted
            return builder;
        }

    }
}
```

To use this client, one is expected to do something like this:

```csharp
services.AddHttpClient("NameClient", config);
services.AddNameClient();
```

However, if instead we allow for configuring the http client through the `AddNameClient` like such:

```csharp
// omitted usings

namespace Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "11.0.0")]
    public static class NameClientServiceCollectionExtensions
    {
        private const string _clientName = "NameClient";

        public static IOperationClientBuilder AddNameClient(
            this IServiceCollection serviceCollection,
            Action<HttpClient> configureClient)
        {
            if (serviceCollection is null)
            {
                throw new ArgumentNullException(nameof(serviceCollection));
            }

            serviceCollection.AddHttpClient(_clientName, configureClient);
            serviceCollection.AddSingleton<IPolicyStagingClient, PolicyStagingClient>();

            // ommitted
            return builder;
        }

        public static IOperationClientBuilder AddNameClient(
            this IServiceCollection serviceCollection)
            => serviceCollection.AddNameClient(c => {});
    }
}
```

the usage becomes much nicer. Other such overloads might also be warranted.
When generating a client using StawberryShake, the classes and interfaces should be generated with the partial modifier. This allows the encompassing project to extend them.
**Is your feature request related to a problem? Please describe.**
I added a `@name` directive to my schema cause then I could write an extension method on `IEnumTypeDescriptor<T>` to emit the original enum names as part of the schema (as opposed to having to stitch them together later). This results in a schema that looks like this:

```grahpql
enum DiscountType {
  AGREEMENT @name(value: "Agreement")
  INTERNET @name(value: "Internet")
  CUSTOMERBENEFIT @name(value: "CustomerBenefit")
}

directive @name(value: String!) on ENUM_VALUE
```

This throws an exception when building the client, because it adds its own `@name` directive.

```
  Unhandled Exception: HotChocolate.SchemaException: The name `name` was already registered by another type. - Type: name
     at HotChocolate.Configuration.TypeInitializer.EnsureNoErrors() in D:\a\1\s\src\Core\Types\Configuration\TypeInitializer.cs:line 673
     at HotChocolate.Configuration.TypeInitializer.Initialize(Func`1 schemaResolver, IReadOnlySchemaOptions options) in D:\a\1\s\src\Core\Types\Configuration\TypeInitializer.cs:line 113
     at HotChocolate.SchemaBuilder.Create() in D:\a\1\s\src\Core\Types\SchemaBuilder.Create.cs:line 41
     at StrawberryShake.Generators.ClientGenerator.Validate() in D:\a\1\s\src\Client\Generators\ClientGenerator.cs:line 284
     at StrawberryShake.Tools.GenerateCommandHandler.Compile(GenerateCommandContext context, String path, Configuration config, ClientGenerator generator, IReadOnlyList`1 documents, ICollection`1 errors) in D:\a\1\s\src\Client\dotnet-graphql\GenerateCommandHandler.cs:line 66
     at StrawberryShake.Tools.CompileCommandHandlerBase`2.Compile(TCtx context, String path, Configuration configuration) in D:\a\1\s\src\Client\dotnet-graphql\CompileCommandHandlerBase.cs:line 121
     at StrawberryShake.Tools.CompileCommandHandlerBase`2.Compile(TCtx context, String path) in D:\a\1\s\src\Client\dotnet-graphql\CompileCommandHandlerBase.cs:line 92
     at StrawberryShake.Tools.CompileCommandHandlerBase`2.ExecuteAsync(TCtx context, CancellationToken cancellationToken) in D:\a\1\s\src\Client\dotnet-graphql\CompileCommandHandlerBase.cs:line 72
     at McMaster.Extensions.CommandLineUtils.CommandLineApplication.ExecuteAsync(String[] args, CancellationToken cancellationToken)
     at StrawberryShake.Tools.Program.<Main>(String[] args)
  Contracts.Communication -> C:\Git\PolicyStaging\src\contracts\Contracts.Communication\bin\Debug\netstandard2.0\IfInsurance.PolicyStaging.Contracts.Communication.dll
```

**Describe the solution you'd like**
StrawberryShake should probably detect that a `@name` directive already exists, and not add it's own. Same for other similar directives.

**Describe alternatives you've considered**
Currently I've just deleted the directive declaration line from my schema (in the client project). However, this means I can't just do `dotnet graphql update` (or similar).


**Is your feature request related to a problem? Please describe.**
I'm trying to add a directive to a custom scalar type. In GQL this would look like such:

```graphql
directive @test on SCALAR

scalar CustomerNumber @test
```

**Describe the solution you'd like**
I'm not sure how best to solve this. As far as I can tell, the `ScalarType` type has a `Directive` property (with a private setter) which it always instantiates using `Array.Empty()` for the directives (https://github.com/ChilliCream/hotchocolate/blob/e7ccddd7bab7f3ed15c6b712666262e491e6fa18/src/Core/Types/Types/Scalars/ScalarType.cs#L245). Maybe adding a virtual `GetDirectiveDefinition` or something like that so deriving classes has a chance at adding directives is the best solution?

**Describe alternatives you've considered**
I'm not sure if any good alternatives exist - except maybe going schema first. But I would like for my code to define my schema.

