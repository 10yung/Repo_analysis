## Expected Behavior
The following code at line 80,81 of <AppKitExtension.swift> is referencing **elementInserted** where it should be **elementUpdated**

```swift
   if !changeset.elementUpdated.isEmpty {
                reloadData(forRowIndexes: IndexSet(changeset.elementInserted.map { $0.element }), columnIndexes: IndexSet(changeset.elementInserted.map { $0.section }))
            } 
```
## Checklist
- [x] Reviewed the [README](https://github.com/ra1028/DifferenceKit/blob/master/README.md) and [documents](https://ra1028.github.io/DifferenceKit).  
- [x] Searched [existing issues](https://github.com/ra1028/DifferenceKit/issues) for ensure not duplicated.  

## Description
Since the identity component of `Differentiable` is semantically identical to the new [`Identifiable`](https://github.com/apple/swift-evolution/blob/master/proposals/0261-identifiable.md) protocol in Swift 5.1, I think it would be beneficial to align the two APIs.

## Motivation and Context
This allows us to easily conform to `Identifiable` as well as `Differentiable` through a single implementation.

## Proposed Solution
- Separate Equality (`ContentEquatable`) and Identification (`ContentIdentifiable`) component through the use of protocol composition for `Differentiable`
- Align the API of `ContentIdentifiable` to that of `Identifiable`

See #81 for implementation details
This may be an Apple bug, but if anyone has time to give me pointers in diagnosing the root cause, I would appreciate it.

I'm seeing a crash:

    failed to demangle witness for associated type 'DifferenceIdentifier' in conformance 'DifferenceKit.ArraySection<Tapestry.ProgressSection, DifferenceKit.AnyDifferentiable>: Differentiable' from mangled name '20DifferenceIdentifier0A3Kit14DifferentiablePQz'"

The crash trace says it occurs in this line:
    
    let changeset = StagedChangeset(source: self.data, target: newData)

And inside that this line:

    #6	(null) in diff<A, B>(source:target:useTargetIndexForUpdated:mapIndex:updatedElementsPointer:notDeletedEleme... ()

The crash _only_ seems to occur on iOS 9.x devices (specifically, the old iPad Minis, so possibly the key is that it is 32 bit).

The crash does _not_ occur in builds that are directly loaded from XCode onto a device, only on builds that are processed in TestFlight or the AppStore.

My guess is that this is therefore an Apple bug in how they are recompiling for older devices.

But if you have the time to offer any clues or hints as to the root cause of the bug so I can try and work around it, that would be very much appreciated.

Great. This template thing completely removed what I wrote.