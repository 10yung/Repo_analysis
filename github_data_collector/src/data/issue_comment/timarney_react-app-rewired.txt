I'd like to change webpack dev server port on config-overrides files since I don't want to pollute our package.json file.
I've tried using the following configuration without success:
```js
module.exports = {
  devServer: function(configFunction) {
    return function(proxy, allowedHost) {
      const config = configFunction(proxy, allowedHost);
      config.port = 9000;
      return config;
    };
  },
}
```
I have the config-overrides file as below
`const WorkboxWebpackPlugin = require("workbox-webpack-plugin");

const { // eslint-disable-line
	override,
	fixBabelImports,
	addLessLoader,
	addExternalBabelPlugins,
	useEslintRc,
	addDecoratorsLegacy,
  addWebpackModuleRule,
  disableEsLint,
  addWebpackAlias
} = require("customize-cra");
const path = require("path");

module.exports = function override(config, env) {

  fixBabelImports("import", {
		libraryName: "idb",
		libraryDirectory: "",
	}),
  config.plugins = config.plugins.map(plugin => {
    if (plugin.constructor.name === "GenerateSW") {
      return new WorkboxWebpackPlugin.InjectManifest({
        swSrc: "./src/sw.js",
        swDest: "service-worker.js"
      });
    }
    return plugin;
  });

  return config;
};`
I try using customize-cra to implement it but unsucessful.
Is there any way so that i can import the file in the sw.js
hey,
I have 3 projects(separate repositories):
`project-main`: using react-app-rewired (typescript version) 
`project-module1`: different react repo (also ts)
`project-module2`: different react repo (also ts)
`project-module1` and `project-module2` are linked with yarn to `project-main` and creates bundle inside of main project with ts compiler.

Current solution:
<img width="974" alt="Screenshot 2019-12-19 at 17 29 23" src="https://user-images.githubusercontent.com/10733034/71190781-807ea680-2285-11ea-9c82-f47aaebcae21.png">

What I want to achieve:
<img width="966" alt="Screenshot 2019-12-19 at 17 29 14" src="https://user-images.githubusercontent.com/10733034/71190823-8d02ff00-2285-11ea-9c1d-d579fdfed43f.png">

Basically I need to get rid of part where modules compiles themselves to main project and instead that connect them somehow to main repository compiler in real time. So whenever there will be local code change in folders `project-module1` or `project-module2`, change will be automatically reflected on localhost.
There is also idea connect `project-main` server to modules servers but I think it would be extremely complicated.
What do you think please?


I wanted to enable `"type": "module"` in package.json in my project.
(some silly reason, like writing own helper scripts as ES modules, whatever)

However, it seems I can't use `react-app-rewired` in this case, node (v13.3.0) tells me that:

```
> yarn start
yarn run v1.21.0
$ react-app-rewired start
(node:5530) Warning: require() of ES modules is not supported.
require() of myproj/config-overrides.js from myproj/node_modules/react-app-rewired/config-overrides.js is an ES module file as it is a .js file whose nearest parent package.json contains "type": "module" which defines all .js files in that package scope as ES modules.
Instead rename myproj/config-overrides.js to end in .cjs, change the requiring code to use import(), or remove "type": "module" from myproj/package.json.
```

I can't rename my local `config-overrides` to `cjs` extension as that's not found by `react-app-rewired`. I seems that rewired hardcodes the name of the override file.

I wonder, if, perhaps, rewired can be updated to be an ES module so that it can import all kinds of modules/packages/etc?
Or would that break other things?