This helps https://github.com/rust-lang/rust/pull/65819
Hello,
 I am trying to implement retrying logic when connection/io failure occurs.  The `request` method takes `Option<Vec<u8>>` which means I can't pass body as it has moved again unless I clone it. Can passing body by reference be supported?

Thx
I have added support for following two features.

1. Specifying custom https port
2. new method to build ssl context by passing ca file, cert and private key
Hi,

I've been trying to update solicit to support rust-openssl 0.9, and I'm almost there. The last issue is to implement `try_split` for `SslStream<TcpStream>`, but the underlying method `try_clone` for `SslStream` was deprecated in rust-openssl 0.8.

Has anybody else tried to update this? One option is to go with `Arc<Mutex<_>>`, but I'd like to know is there any simpler solution here...

Ping @jwilm et.al.
I am new to Rust and I don't understand how to run a simple https server? The simple server example is currently http only right?

... otherwise it is not possible to implement SessionState

asynchronous server must not block in `rx.recv_frame()`, so
`handle_next_frame` is not suitable for asynchronous server.

The workaround this limitation is to implement `ReceiveFrame` which
produces one previously read frame, but making `handle_frame` public
is more straightforward.

convert RawFrame<'a> into RawFrame<'static>

Whole `TransportStream` is not needed.

It is problem, because, for example, `conn.send_next_data(..)` cannot be (easily) called with `Vec<u8>` argument, which implements `Write`, but not `TransportStream`.

Try to keep the server example in sync with the latest implementation.

https://github.com/mlalic/solicit/commit/7ca58a5b280a9aafd1afd0ed2649047c4bab9436 started this effort but only for the client example.
