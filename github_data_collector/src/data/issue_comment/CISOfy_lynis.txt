**Describe the bug**
Upon trying to find NTP cronjobs in /etc/cron.hourly, the directory listing of the pwd is used instead of the correct directory listing.

**Version**
 - Distribution: Debian buster
 - Lynis version: 2.7.5

**Expected behavior**
check for ntpdate or rdate in /etc/cron.hourly and not in pwd

**Output**
(each x represents a different file that is not present in /etc/cron.hourly, but rather in the pwd)

> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x
> 2020-01-12 02:29:38 Test: checking for ntpdate or rdate in /etc/cron.hourly/x

**Additional context**
the test works fine in /etc/cron.d, but fails upon entering the /etc/cron.hourly stage.

This fixes #518.

Summary of changes:
- Enhancements:
  - Search for the `ntpctl`binary.
  - Check if OpenNTPD is installed by checking if `ntpctl` is installed.
  - Confirm the use of OpenNTPD by confirming `ntpctl` is working or an process with the commandline `ntpd: ntp engine` exists.
  - Add typical OpenNTPD configuration files to TIME-3170.
- New tests:
  - TIME-3180: Report if ntpctl cannot communicate with OpenNTPD
  - TIME-3181: Check status of OpenNTPD time synchronisation
  - TIME-3182: Check OpenNTPD has working peers

This has been tested on FreeBSD


I wondering how many people are running /tmp with nosuid and noexec ?
It might be only on ubuntu and debian but those 2 options cause a lot of issue.

## the give simple example and easy to reproduce

- define noexec and try to launch a docker container
- define noexec and do an apt update or install
- define nosuid with etckeeper installed and tamper a file in /etc than update etckeeper database

The Raspberry Pi kernels reside within raspberrypi-kernel package[1].

[1] https://www.raspberrypi.org/documentation/linux/kernel/updating.md
Initial version of CRYP-8004 (see #793).

There are few shortcomings:

* This will not detect all RNGs (for instance OneRNG registers itself as `/dev/ttyACM0` and not through Linux's HW RNG drivers)
* There is no verification that `rngd` is actually using the found HW RNG. It could as well be using `/dev/zero` etc. This can be implemented, but might require a bit more complex check, as the input can be configured in several places (conf files, cmdline parameters etc.).
**Describe the bug**
lynis reports the following warning under CentOS 8:

```
  ! iptables module(s) loaded, but no rules active [FIRE-4512] 
      https://cisofy.com/lynis/controls/FIRE-4512/
```

CentOS 8 uses a different firewall structure, the primary "frontend" is now firewalld via the firewall-cmd tool and iptables has been kept as an alternative "frontend" for more complex rules.

**Version**
 - CentOS 8
 - git

**Expected behavior**
Understand the specifics of firewalld and the various XML zone rules under /etc/firewalld/zones/

lynix should be able to read those rules first and the iptables rules second. Then decide if there are really no firewall rules at all.

Function "CheckItem" searches in ${REPORTFILE} whereas HTTP-6632 puts its findings into ${LOGFILE}. Hence the message that mod_evasive24.so and mod_sewcurity2 could not be found.

openSUSE Tumbleween, Leap 15.1
Lynis 3.0.0

Modules are active and should be found.

  Suggestions (3):
  ----------------------------
  * Install Apache mod_evasive to guard webserver against DoS/brute force attempts [HTTP-6640]
      https://cisofy.com/lynis/controls/HTTP-6640/

  * Install Apache mod_reqtimeout or mod_qos to guard webserver against Slowloris attacks [HTTP-6641]
      https://cisofy.com/lynis/controls/HTTP-6641/

  * Install Apache modsecurity to guard webserver against web application attacks [HTTP-6643]
      https://cisofy.com/lynis/controls/HTTP-6643/

**Is your feature request related to a problem? Please describe.**
Lynis could check for existence of TRNG and whether `rngd` is running.

**Describe the solution you'd like**
* Check that `/sys/class/misc/hw_random/rng_current` value is not "none"
* Check that `rngd` is running and utilizing the TRNG

**Required changes**
* [x] Assign `CRYP` ID (CRYP-8004)
* [ ] Assign potential hardening points
* [ ] Implement a test for this

**Additional context**
Somewhat relates to #751

fixes https://github.com/CISOfy/lynis/issues/701
I know about issue #209 which is about versions `<5.6` of MySQL leaving deleted open files in `/tmp`; an exception for these version was implemented for `LOGG-2190`.

I have a fresh Ubuntu`@18.04.x` install with an `apt-get install mysql-server` resulting in a `mysqld@5.7.27`.

I find `LOGG-2190` (of `lynis@2.7.5`) still reports deleted open files for `mysqld`.  

Now, I don't know (yet) if this is a regression of the bug supposedly fixed for `mysqld@5.6`, a new bug or simply expected behaviour of `mysqld`.

I suspect it's the latter.

If so, it would be nice if certain processes could be exempted by name from getting warned for. 
I'm thinking along the lines of:

```
skip-test=LOGG-2190:mysqld
```

This would remove the need for implementing explicit exceptions such as the one that #209 was the cause for, allow for end-users customizing specific exceptions themselves without having to resort to completely disabling the test.
