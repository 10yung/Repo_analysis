Hi, I am using Bogus for seeding data for integration tests and it is great!
I run into some issues after I wrote a simple generic convention-based rule generator for our entities.
See the example:
```
// Generic generator created convention based rules for all properties of our Candidate entity
// For example:

var candidateGenerator = new Faker<Candidate>()
		.RuleFor(u => u.FirstName, f => f.Name.FirstName())
		.RuleFor(u => u.LastName, f => f.Name.LastName())
		.RuleFor(u => u.PrimaryEmail, f => f.Internet.Email())
		.RuleFor(u => u.CurrentEmployer, f => f.Company.CompanyName());

// Generate some test entities 
var candidates1 = candidateGenerator.Generate(10).ToList();

// Run some tests...

// Another test requires that email is generated based on the company so we edit the rules
// (we want to keep other rules):
candidateGenerator
	.RuleFor(u => u.CurrentEmployer, f => $"{f.Company.CompanyName()} {f.Company.CompanySuffix()}")
	.RuleFor(u => u.PrimaryEmail, (f, u) => GetEmailForCompany(u.CurrentEmployer));

var candidates2 = candidateGenerator.Generate(10).ToList();

// THIS DOES NOT WORK
// because initially, PrimaryEmail rule was declared before CurrentEmployer and at the time 
// of populating PrimaryEmail - u.CurrentEmployer is still null
// regardless that these new rules were modified/readded after initial rules
```
I think that this is not logically correct behavior. Property rules should be ordered and MultiDictionary implementation does not currently provide order. Although order works with regular Dictionary in most cases, it certainly does not in the case when you want to remove an existing rule(item) and add a new one with the same key. I think that replaced property rules should be added at the end of the rule processing list.
In that case, I think that something like OrderedDictionary from System.Collections.Specialized can be used to achieve this behavior. If you agree, **I can make a PR**.

p.s. I know that using .Rules or .FinishWith can be used to add new rules to the end of the rule processing list/dictionary, but this seems a bit hacky, duplicates rules and doesn't solve the root problem.
I am happy to post this somewhere else if you have a uservoice or something. It would be nice if there was a way to do finishwith on a whole set. For instance, I want to generate a collection of objects and always have the first one set to primary. 

Currently I have to do the following:
```
 public static Faker<x> GetBusinessEntityRules()
    {
      var rules = new Faker<x>()
          .RuleFor(o => o.Code, f => f.Random.AlphaNumeric(5))
          .RuleFor(o => o.Dba, f => BogusDataSets.Company.CompanyName())        

      return rules;
    }

     // Get x
      var z = BogusRules.GetBusinessEntityRules().Generate(5).ToList();

      // Set the first to primary
      z[0].Primary = true;
```

Instead it would nice to make the rule responsible for this:
```
 public static Faker<x> GetBusinessEntityRules()
    {
      var rules = new Faker<x>()
          .RuleFor(o => o.Code, f => f.Random.AlphaNumeric(5))
          .RuleFor(o => o.Dba, f => BogusDataSets.Company.CompanyName())        
         .FinishCollectionWith(list) {
.... list[0].Primary = true... etc.
}

      return rules;
    }
```
Just thought:

Possibly have a method that can auto-populate a domain/DTO object if certain property conventions are met.

IE: when auto populating an object, if properties such as `SSN` and `Phone` or `Telephone` are encountered, auto populate them without having to setup fluent rules for that property.

I think it would reduce the amount of setup required to get started.
