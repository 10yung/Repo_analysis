This is useful in case users don't want border-radius on their calendars.
I am using mozilla and ios mobile browser. When I clicking it, it will disappear.

I am using the latest version. Please help? thanks
I was trying to use Pikaday without Moment.js (as I use date-fns generally)

However as I am using British format (Date/Month/Year) but the parse function seems to be ignored regardless of the methods:

```
const startPoint = addDays(new Date(), START_POINT);

  const finishCal = new Pikaday({
    field: finish,
    // format: 'DD/MM/YYYY',
    parse: (dateString, f) => {
      console.log(dateString, f);
      return parse(dateString);
    },
    // toString: date => setFormat(date),
    // onSelect: date => {
    //   finish.value = setFormat(date);
    // },
  });

  const setter = setFinished(finishCal);

  const startCal = new Pikaday({
    field: start,
    format: 'DD/MM/YYYY',
    minDate: startPoint,
    parse(dateString, f) {
      console.log('parse', dateString);
      // dateString is the result of `toString` method
      const parts = dateString.split('/');
      const day = parseInt(parts[0], 10);
      const month = parseInt(parts[1], 10) - 1;
      const year = parseInt(parts[2], 10);
      return new Date(year, month, day);
    },
    toString: date => setFormat(date),
    onSelect: date => {
      start.value = setFormat(date);

      finish.disabled = false;
      setter(date);
    },
  });

```

Not sure if I missing something fundamental or there is a bug?
I saw the implementation for events https://github.com/Pikaday/Pikaday/pull/152. This is really cool only the scss file was not updated to make use of this feature.
Since I use the scss file to style the datepicker in our project I've added `event-color` and `event-bg` as variables
I notice there have been a few attempts at implementing a "today" selector button, noe of which have ever been merged into master. Is there any plan to introduce this feature?
I set min date and max date like this

```
        format: 'YYYY-MM-DD',
        defaultDate: moment().subtract(18, 'years').toDate(),
        minDate: moment().subtract(100, 'years').toDate(),
        maxDate: moment().subtract(18, 'years').toDate(),
        firstDay: 1,
```

Instead of showing real year range pickaday shows me first 1991-2001 year range. If I select any value from here it shows next time 1981-2001 year range and so on strange incrementing ranges. Specifying any year range or not specifying it all all don't matter, results will be the same.

If I set ONLY max date and year range
```

        defaultDate: moment().subtract(18, 'years').toDate(),
        yearRange: [1930, 2001],
        // minDate: moment().subtract(70, 'years').toDate(),
        maxDate: moment().subtract(18, 'years').toDate(),

```

Then pickaday shows years correctly so this issue can be avoided.

but the thing stays the same when you only set minDate and maxDate year range breaks. 

Issue 1: when I select a date and then click a 'Filter' LinkButton on postback it changes the date in the textbox to the min date. 

How do I prevent this from happening?

Issue 2: is it possible to get the date to return int he following format 2019/10/01?
The way it is populating now it 2019/10/1 (same issue with the month)
Code used below:

var picker = new Pikaday(
        {
            field: document.getElementById('txtFilterStartDate'),
            firstday: 1,
            minDate: new Date('2019/10/01'),
            numberOfMonths: 1,
            format: 'YYYY/MM/DD',
            toString(date, format) {
                // you should do formatting based on the passed format,
                // but we will just return 'YYYY/MM/DD' for simplicity
                const day = date.getDate();
                const month = date.getMonth() + 1;
                const year = date.getFullYear();
                return `${year}/${month}/${day}`;
            },
            parse(dateString, format) {
                // dateString is the result of `toString` method
                const parts = dateString.split('/');
                const day = parseInt(parts[0], 10);
                const month = parseInt(parts[1], 10) - 1;
                const year = parseInt(parts[2], 10);
                return new Date(year, month, day);
            }
        });
Bumps [lodash](https://github.com/lodash/lodash) from 4.17.11 to 4.17.15.
<details>
<summary>Commits</summary>

- [`ddfd9b1`](https://github.com/lodash/lodash/commit/ddfd9b11a0126db2302cb70ec9973b66baec0975) Bump to v4.17.15.
- [`b185fce`](https://github.com/lodash/lodash/commit/b185fcee26b2133bd071f4aaca14b455c2ed1008) Rebuild lodash and docs.
- [`be87d30`](https://github.com/lodash/lodash/commit/be87d303941222b97c482755afc0f4a77ce46c30) Bump to v4.17.14.
- [`a6fe6b1`](https://github.com/lodash/lodash/commit/a6fe6b1e174fd02b5e60eb2664405f4c1262c300) Rebuild lodash and docs.
- [`e371828`](https://github.com/lodash/lodash/commit/e37182845f16715a0d1c391c8662d83c55609cee) Bump to v4.17.13.
- [`357e899`](https://github.com/lodash/lodash/commit/357e899e685872b4af5403ecc4b2a928f961ae63) Rebuild lodash and docs.
- [`fd9a062`](https://github.com/lodash/lodash/commit/fd9a062d57646450b61f74029315abd4cc834b08) Bump to v4.17.12.
- [`e77d681`](https://github.com/lodash/lodash/commit/e77d68121ff00ba86b53eed5893d35adfe94c9dd) Rebuild lodash and docs.
- [`629d186`](https://github.com/lodash/lodash/commit/629d1865793182cd967196716f4beff223aa4a91) Update OpenJS references.
- [`2406eac`](https://github.com/lodash/lodash/commit/2406eac542b2a1282be8d812a6d8a45433ade80a) Fix minified build.
- Additional commits viewable in [compare view](https://github.com/lodash/lodash/compare/4.17.11...4.17.15)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=lodash&package-manager=npm_and_yarn&previous-version=4.17.11&new-version=4.17.15)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/Pikaday/Pikaday/network/alerts).

</details>
I'm trying install Pikaday in my Polymer project, curiously using stackblitz work's very well: https://stackblitz.com/edit/mb-wc-pikaday but in the project occurs the error mentioned above.

The only difference between the project and the stackblitz it's that in stackblitz I load the es5-adapter in index:

`<script src="./node_modules/@webcomponents/webcomponentsjs/custom-elements-es5-adapter.js"></script>`

I'm using this boilerplate: https://github.com/Polymer/pwa-starter-kit
Hi,

The last commit was November 2018, and there are currently 76 pull requests out.

Is this library still maintained? If not is there any other canonical fork that people are using instead?

Thanks