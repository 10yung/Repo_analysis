I was hoping to resolve my source-root-relative absolute import paths by marking the source root directly as a source or resource root but this does not seem to be supported. It looks like you support a couple of explicit source roots: https://github.com/intellij-solidity/intellij-solidity/blob/master/src/main/kotlin/me/serce/solidity/lang/resolve/ref/SolImportPathReference.kt 

In other languages (e.g. Javascript/Node.js) you can persuade intellij to resolve absolute imports by marking a directory as a source root.

It looks like an incantation like:

```java
VirtualFile moduleSourceRoot = ProjectRootManager.getInstance(project).getFileIndex().getSourceRootForFile(virtualFileOrDirectory);
```

In fact looking at you implementation I think if you just replaced the line: https://github.com/intellij-solidity/intellij-solidity/blob/master/src/main/kotlin/me/serce/solidity/lang/resolve/ref/SolImportPathReference.kt#L22 with a version of the above it might work...
Hello, not enough comment syntax support.
https://solidity.readthedocs.io/en/develop/natspec-format.html
Right now I'd like to be able to change function name and class names colors. Because my Monokai theme makes the solidity file look very bland. Only 2-3 colors are used and makes coding difficult because I've spent years on Monokai in other languages. 
https://sentry.io/share/issue/5453ff0aeb884fbe98a1e0bef1e2fa4f/


For example, in `Ownable(token).transferOwnership` plugin doesn't suggest to import Ownable.sol
for example, from here: https://github.com/kleros/kleros-interaction/blob/74c057d28d7ea7ac11e2c2ad056dd41d1ab0d3de/contracts/standard/arbitration/AppealableArbitrator.sol#L119:
`appealDisputes[_disputeID].arbitrator.appealCost(appealDisputes[_disputeID].appealDisputeID, _extraData)` 

I think, the same applies to other expressions (access array item by index etc.)

Every time I use the solidity plugin to compile the project it does a full compiling of everything. It would be cool it only compiles the affected smart contracts to significantly reduce the compilation time. 
Stacktrace:
```
com.intellij.diagnostic.PluginException: com.intellij.openapi.actionSystem.DefaultActionGroup (myGroupId): group with id "BuildMenu" isn't registered; action will be added to the "Other" group [Plugin: me.serce.solidity]
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.reportActionError(ActionManagerImpl.java:337)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.reportActionError(ActionManagerImpl.java:332)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.getParentGroup(ActionManagerImpl.java:822)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.processAddToGroupNode(ActionManagerImpl.java:788)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.processGroupElement(ActionManagerImpl.java:736)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.processActionsChildElement(ActionManagerImpl.java:967)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.registerPluginActions(ActionManagerImpl.java:450)
	at com.intellij.openapi.actionSystem.impl.ActionManagerImpl.<init>(ActionManagerImpl.java:136)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.picocontainer.defaults.InstantiatingComponentAdapter.newInstance(InstantiatingComponentAdapter.java:193)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.doGetComponentInstance(CachingConstructorInjectionComponentAdapter.java:85)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.instantiateGuarded(CachingConstructorInjectionComponentAdapter.java:62)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getComponentInstance(CachingConstructorInjectionComponentAdapter.java:45)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:461)
	at com.intellij.util.pico.DefaultPicoContainer.getLocalInstance(DefaultPicoContainer.java:246)
	at com.intellij.util.pico.DefaultPicoContainer.getComponentInstance(DefaultPicoContainer.java:213)
	at org.picocontainer.defaults.BasicComponentParameter.resolveInstance(BasicComponentParameter.java:77)
	at org.picocontainer.defaults.ComponentParameter.resolveInstance(ComponentParameter.java:114)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getConstructorArguments(CachingConstructorInjectionComponentAdapter.java:111)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.doGetComponentInstance(CachingConstructorInjectionComponentAdapter.java:82)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.instantiateGuarded(CachingConstructorInjectionComponentAdapter.java:62)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getComponentInstance(CachingConstructorInjectionComponentAdapter.java:45)
	at com.intellij.openapi.components.impl.ServiceManagerImpl$MyComponentAdapter.getComponentInstance(ServiceManagerImpl.java:209)
	at com.intellij.util.pico.DefaultPicoContainer.getLocalInstance(DefaultPicoContainer.java:246)
	at com.intellij.util.pico.DefaultPicoContainer.getComponentInstance(DefaultPicoContainer.java:213)
	at org.picocontainer.defaults.BasicComponentParameter.resolveInstance(BasicComponentParameter.java:77)
	at org.picocontainer.defaults.ComponentParameter.resolveInstance(ComponentParameter.java:114)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getConstructorArguments(CachingConstructorInjectionComponentAdapter.java:111)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.doGetComponentInstance(CachingConstructorInjectionComponentAdapter.java:82)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.instantiateGuarded(CachingConstructorInjectionComponentAdapter.java:62)
	at com.intellij.util.pico.CachingConstructorInjectionComponentAdapter.getComponentInstance(CachingConstructorInjectionComponentAdapter.java:45)
	at com.intellij.openapi.components.impl.ComponentManagerImpl$ComponentConfigComponentAdapter.getComponentInstance(ComponentManagerImpl.java:461)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.createComponents(ComponentManagerImpl.java:104)
	at com.intellij.openapi.application.impl.ApplicationImpl.lambda$createComponents$9(ApplicationImpl.java:447)
	at com.intellij.openapi.progress.impl.CoreProgressManager.lambda$runProcess$2(CoreProgressManager.java:164)
	at com.intellij.openapi.progress.impl.CoreProgressManager.registerIndicatorAndRun(CoreProgressManager.java:582)
	at com.intellij.openapi.progress.impl.CoreProgressManager.executeProcessUnderProgress(CoreProgressManager.java:532)
	at com.intellij.openapi.progress.impl.ProgressManagerImpl.executeProcessUnderProgress(ProgressManagerImpl.java:87)
	at com.intellij.openapi.progress.impl.CoreProgressManager.runProcess(CoreProgressManager.java:151)
	at com.intellij.openapi.application.impl.ApplicationImpl.createComponents(ApplicationImpl.java:471)
	at com.intellij.openapi.components.impl.ComponentManagerImpl.init(ComponentManagerImpl.java:88)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:405)
	at com.intellij.openapi.application.impl.ApplicationImpl.load(ApplicationImpl.java:391)
	at com.intellij.idea.IdeaApplication.run(IdeaApplication.java:208)
	at com.intellij.idea.IdeaApplication.lambda$initApplication$0(IdeaApplication.java:74)
	at java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)
	at java.awt.EventQueue.dispatchEventImpl(EventQueue.java:762)
	at java.awt.EventQueue.access$500(EventQueue.java:98)
	at java.awt.EventQueue$3.run(EventQueue.java:715)
	at java.awt.EventQueue$3.run(EventQueue.java:709)
	at java.security.AccessController.doPrivileged(Native Method)
	at java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:80)
	at java.awt.EventQueue.dispatchEvent(EventQueue.java:732)
	at com.intellij.ide.IdeEventQueue.dispatchEvent(IdeEventQueue.java:342)
	at java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)
	at java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)
	at java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)
	at java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)
	at java.awt.EventDispatchThread.run(EventDispatchThread.java:82)
```
IDE version:
```
WebStorm 2018.3 EAP
Build #WS-183.3795.15, built on October 17, 2018
WebStorm EAP User
Expiration date: November 16, 2018
JRE: 1.8.0_152-release-1343-b12 amd64
JVM: OpenJDK 64-Bit Server VM by JetBrains s.r.o
Windows 10 10.0
```
Plugin version: `v2.1.3`
I was experimenting with the native EthereumJ Wrapper generator and noticed that the generated Java classes do not contain functions in a smart contract's super classes. 
according to https://github.com/intellij-solidity/intellij-solidity/pull/130#issuecomment-429497843

Will check where import-aware version can be used and will post PR
