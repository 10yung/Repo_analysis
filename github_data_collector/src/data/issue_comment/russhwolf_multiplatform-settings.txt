Throwing this up to get API feedback.

Some questions:
1. Is it expected/desirable to have the current value emitted immediately, or should emissions only happen on update? Should that be comfigurable?
2. Is there a channel API that makes sense here so you could write as well as read? Or is Flow sufficient?

CI build will fail due to missing platforms in kotlinx.coroutines.
Looking for API feedback. The idea here is to enable arbitrary datatypes to be encoded inside a `Settings` instance.

Some questions:
1. Are there serialization edge-cases that should be added to the tests? One thing currently missing is a test of polymorphic serialization.
1. Is it a problem that the delegate APIs talk directly to the encoder/decoder rather than through a format? I think that means polymorphic serialization won't work on the delegate, but I don't know if that's an important use-case or not
1. Does the public API seem clean enough or are there adjustments I should make?

The CI build will fail. I think it's because of missing native platforms in kotlinx.serialization
Looking for user feedback before removing the @ExperimentalJvm annotation and treating JVM usage at the same level of stability as the rest of the library.

* Are both the `Properties` and `Preferences` implementations useful, or can the `Properties` implementation be deprecated and removed?
* Is there anything else I haven't considered around JVM usage that's worth taking into account?

No specific timeline on this yet, but I want to have an issue to track what work remains before stabilizing
Looking for user feedback before removing the `@ExperimentalListener` annotation and treating listeners at the same level of stability as the rest of the library.

* Is the API surface useful as-is, or would it be better to add typed listeners that pass the current value to the callback?
* Is threading a concern? Currently listener APIs do not do any thread-related work and assume clients are correctly doing all interaction from the main thread (in Android and iOS) or can deal with multithreaded usage (in JvmPreferences where listeners are forced to a background thread)
* Are there other usages or issues I haven't considered?

Note one currently-unpublished change which is visible in master: `Settings.removeListener()` has been replaced with `listener.deactivate()`. This cleans up the listener internals a little since previously, you could pass a listener to a settings instance which hadn't created it, which might lead to unexpected (usually no-op) behavior.

No specific timeline on this yet, but I want to have an issue to track what work remains before stabilizing
This is just to let everyone know I'm working on this.
Already forgot how... interesting it is to work with pointers to pointers in Kotlin/Native and how awesome is WinAPI. ðŸ˜…

Improve publishing configuration to automate publication to Maven Central. This way consumers wouldn't need to add a one-time-use Bintray dependency.
[Kevin](https://github.com/kpgalligan) called me out in a [podcast](https://soundcloud.com/user-38099918/multiplatform-development-with-kevin-galligan#t=32:40) and said the name Multiplatform Settings isn't catchy enough. I've had this thought as well but I haven't yet come up with anything I like better. Leaving this here to track the possibility of changing it and potentially source ideas.


Currently Multiplatform Settings has Android and iOS implementations. It could be nice to be able to use it on other platforms as well.

I've done some initial explorations here but am interested in hearing others' needs and use-cases

It would be straightforward to do a macOS implementation since NSUserDefaults exists there just like iOS. I have also begun to look at using the [storage](https://kotlinlang.org/api/latest/jvm/stdlib/org.w3c.dom/-storage/index.html) api for a JS implementation.

What are other platform APIs that would be useful to expose through this library
This would look something like
```
// android
fun entries(): Map<String, Any> = delegate.all

// ios
fun entries(): Map<String, Any> = delegate.dictionaryRepresentation()
```

The difficulty here is that this exposes platform-specific implementation details, such as storing `Int`s as `Long`s on iOS and `Double`s as `Long`s on Android.
See prototype in the [keys](https://github.com/russhwolf/multiplatform-settings/tree/keys) branch (#5).

Naively this should be pretty straightforward. Unfortunately, a number of default keys are present on every instance of NSUserDefaults which can't be removed. This seems likely to lead to unexpected per-platform differences in behavior in user code. I would love to get feedback from someone more familiar with the iOS APIs to better understand what the best way to handle this is.