Hey there.

I was wondering if support for specifying a list of files to run Fasterer on could be added.

It would be really nice if we could make it work with xargs, I had this use case in mind: 

```echo app/controllers/application_controller.rb config/routes.rb | xargs bundle exec fasterer```
Report with links will be more informative.
```
lib/code.rb:9 Use attr_reader for reading ivars [https://github.com/DamirSvrtan/fasterer/docs/attr_reader_vs_ivars.md]
```





Running this code:
```ruby
#!/usr/bin/env ruby

require 'benchmark/ips'

ARR1 = [ 1, 2, 3 ] * 1_000_000

Benchmark.ips do |b|
  b.report('.reverse.first') do
    ARR1.reverse.first(1_000)
  end

  b.report('.last.reverse') do
    ARR1.last(1_000).reverse
  end

  b.compare!
end

Benchmark.ips do |b|
  b.report('.reverse.last') do
    ARR1.reverse.last(1_000)
  end

  b.report('.first.reverse') do
    ARR1.first(1_000).reverse
  end

  b.compare!
end
```
we see a huge speed difference for this simple synthetic benchmark:
```shell
Calculating -------------------------------------
      .reverse.first        24 i/100ms
       .last.reverse     80711 i/100ms
-------------------------------------------------
      .reverse.first      153.7 (±3.3%) i/s -        792 in   5.157104s
       .last.reverse  1155593.4 (±2.0%) i/s -    5811192 in   5.030946s

Comparison:
       .last.reverse:  1155593.4 i/s
      .reverse.first:      153.7 i/s - 7516.20x slower

Calculating -------------------------------------
       .reverse.last        25 i/100ms
      .first.reverse     83388 i/100ms
-------------------------------------------------
       .reverse.last      259.5 (±4.6%) i/s -       1300 in   5.022875s
      .first.reverse  1050525.6 (±8.4%) i/s -    5253444 in   5.047410s

Comparison:
      .first.reverse:  1050525.6 i/s
       .reverse.last:      259.5 i/s - 4048.21x slower
```
It's pretty intuitive that it works this way:
Let's say our array has N elements, and we want the last n but reversed.
We can either reverse it first, making N swaps (i.e. copies) and then copy the first n elements, making N+n copies, or we can take the last n elements, making n copies and then swap them n times, performing 2*n copies.

I'm working in a detector for these opportunities, but I don't know if I'll make it.
Currently it is possible to either:
* ignore a rule for all files, or
* ignore a file for all rules

It would be nice to be able to fine-tune the configuration, similar to these:
* https://github.com/adrienverge/yamllint/blob/master/docs/disable_with_comments.rst
* https://github.com/bbatsov/rubocop/blob/master/manual/configuration.md#disabling-cops-within-source-code
* https://github.com/koalaman/shellcheck/wiki/Ignore
Per https://github.com/JuanitoFatas/fast-ruby/blob/master/code/hash/fetch-vs-fetch-with-block.rb,
it is faster to use the argument method if the argument is a constant
aka does not allocate an object.
From https://github.com/rails/rails/pull/26599 i'm seeing that's not the case. Btw, this is a really cool project. 

cc/ @timrogers 

https://github.com/JuanitoFatas/fast-ruby/pull/76

https://github.com/JuanitoFatas/fast-ruby/pull/75

Hi, very nice program here :neckbeard: :+1:. Just started using it and, being very familiar with the fast-ruby benchmarks, I thought that I would be nice to  have `RUBY_ENGINE` specific suggestions. 

I know you have [your disclaimer](https://github.com/DamirSvrtan/fasterer#fasterer) -and certainly [we should not blindly do whatever the machine tells us](https://nakedsecurity.sophos.com/2012/07/25/jail-hacked-webcams-shower/), but in the case of JRuby (maybe others) [some](https://travis-ci.org/JuanitoFatas/fast-ruby/jobs/69644640#L453) of [the suggestions](https://travis-ci.org/JuanitoFatas/fast-ruby/jobs/69644640#L259) are counterintuitive to what most people think is "fast ruby". Tailoring suggestions for the platform could be very helpful.

Thoughts?
