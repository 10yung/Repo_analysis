The `sqldf` is a great library, but unfortunately it does not support the major databases - Oracle, MSQL server, Sybase.

This is a new feature request - To support the major database vendors.
See https://stackoverflow.com/questions/57446335/preserving-time-class-with-sqldf/57446844#57446844

Non-ascii table names do not seem to work.

See https://stackoverflow.com/questions/57343258/retriving-non-ascii-table-name-using-sqldf
I was able to join R data frames using sqldf but is it possible to join a data frame to a large database table that already exists in the database with a single SQL statement? I've been doing this by writing my data frame to the database and using RPostgreSQL to read in the joined dataset back and then dropping the table. It would be handy if all table table references in a join didn't have to be data frames.  
I've tried every quote/escape syntax I can think of but find that periods in the names of R dataframes cause sqldf to throw an unexpect (to me) error.

Viz:

``` R

> sqldf('select * from cars limit 2')
  speed dist
1     4    2
2     4   10
# what we expect

> cars_df<-cars
> sqldf('select * from cars_df limit 2')
  speed dist
1     4    2
2     4   10
# so far so go

> cars.df<-cars
> sqldf('select * from cars.df limit 2')
Error in result_create(conn@ptr, statement) : no such table: cars.df
# not sure why it fails

# let's try some escaping:
> sqldf('select * from "cars.df" limit 2')
Error in paste("sqldf:", "table", nam, "already in", dbname, "\n") : 
  argument "dbname" is missing, with no default
# erhm, no good, how about:
> sqldf('select * from [cars.df] limit 2')
Error in paste("sqldf:", "table", nam, "already in", dbname, "\n") : 
  argument "dbname" is missing, with no default
# foo!

# how about:
> sqldf('select * from `cars.df` limit 2')
Error in paste("sqldf:", "table", nam, "already in", dbname, "\n") : 
  argument "dbname" is missing, with no default

```

Is there an approach that will work, or do I have to change my (arguably non-standard) variable naming convention?

Thanks!
something must have changed with GFM's interpretation .  The FAQ H2 headers were being treated as an ordinary numbered list.  The FAQ hyperlinks from the TOC weren't working either.

I made the FAQ more consistent with the Examples.

The link for FAQ 6 doesn't seem to work, but the others do.  Not sure why; the labels are exactly the same (ie, `faq-6-why-are-there-problems-when-we-use-table-names-or-column-name`).
It may be that I don't understand the intended behavior, but I would expect to get the rownames returned in all cases below:

```
> df = data.frame(A=c(1,2,3), B=c('p', 'q', 'r'), row.names = c('aaa','bbb','ccc'))
> df
    A B
aaa 1 p
bbb 2 q
ccc 3 r
> sqldf(row.names=T, "select * from df")
    A B
aaa 1 p
bbb 2 q
ccc 3 r
> sqldf(row.names=T, "select A from df")
  A
1 1
2 2
3 3
> sqldf(row.names=T, "select A,B from df")
  A B
1 1 p
2 2 q
3 3 r
```
avoids the errors like the one below.  I hand-tested all of them except for the BOD and H2 examples.

```r
Error in connection_import_file(conn@ptr, name, value, sep, eol, skip) :
  RS_sqlite_import: D:/Users/Will/Documents/tmp.csv line 2 expected 1 columns of data but found 2
```
Expand FAQ#8 or add another FAQ for this.
Ordered class variables are currently sent as the underlying numeric codes but are not converted back on return.

Note the problem here:
http://stackoverflow.com/questions/42391229/order-by-factor-in-sqldf
