the link for the JSON data is outdated. Use the wayback machine's link.
maybe [this](https://web.archive.org/web/20180221153345/http://jsonstudio.com/resources/) ?
I'm not 100% sure whether this crate is supposed to support accessing fields of
objects within arrays but I'm seeing strange behaviour when doing so...

Given a JSON record:

```
{"list_of_objects": [{"first_field": 1, "second_field": true}]}
```

The results of the following queries are:

```
$.list_of_objects.first_field       => 1
$.list_of_objects.second_field      => true}]
```

---

Or as a runnable example (modelled on the example from the readme):  

```rust
fn main() {
    let queries = vec![
        "$.list_of_objects.first_field".as_bytes(),
        "$.list_of_objects.second_field".as_bytes(),
    ];
    let mut p = pikkr::Pikkr::new(&queries, 0).unwrap();
    let recs = vec![
        r#"{"list_of_objects": [{"first_field": 1, "second_field": true}]}"#,
    ];
    for rec in recs {
        let results = p.parse(rec.as_bytes()).unwrap();

        for result in results {
            print!("{} ", match result {
                Some(result) => String::from_utf8(result.to_vec()).unwrap(),
                None => String::from("None"),
            });
        }
        println!();
    }
}
```

What guarantees does this library make about rejecting invalid JSON and returning valid JSON?

In particular, the following program accepts the input which is not valid JSON and returns `b"0,"` as output which is not valid JSON.

```rust
extern crate pikkr;

fn main() {
    let j = br#" {"x":0,} "#;
    let q = vec!["$.x".as_bytes()];
    let mut p = pikkr::Pikkr::new(&q, 1);
    for r in p.parse(j) {
        println!("{}", std::str::from_utf8(r.unwrap()).unwrap());
    }
}
```
This seems like it would be applicable to kostya's JSON benchmark. Rust is already significantly faster than C++ but D does some partial parsing tricks that pikkr may be able to overcome.

- https://github.com/kostya/benchmarks#json
- https://github.com/kostya/benchmarks/tree/master/json/json.rs
Awesome project! Could C hooks be published, so that nonRust languages can take advantage of this accelerated library?

https://doc.rust-lang.org/1.5.0/book/rust-inside-other-languages.html