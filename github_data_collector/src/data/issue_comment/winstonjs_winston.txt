### Please tell us about your environment:
  
- _`winston` version?_
   - [ ] `winston@2`
   - [x] `winston@3` 
- _`node -v` outputs:_ v12.13.1
- _Operating System?_ Windows
- _Language?_ TypeScript

### What is the problem? 
Type defintions for the `logger.log` method doesn't allow Errors to be passed in as messages without overriding the type of the error.

```typescript
interface LogEntry {
    level: string;
    message: string;
    [optionName: string]: any;
  }

  interface LogMethod {
    (level: string, message: string, callback: LogCallback): Logger;
    (level: string, message: string, meta: any, callback: LogCallback): Logger;
    (level: string, message: string, ...meta: any[]): Logger;
    (entry: LogEntry): Logger;
  }
```

### What do you expect to happen instead?
In the ___logger.js___ the log method examples clearly show the method taking both `strings` and `errors` as message inputs. And i can confirm that works in practice.

```javascript
logger.log('info', 'Hello world', { custom: true });
logger.log('info', new Error('Yo, it\'s on fire'));

logger.log({ level: 'info', message: 'Hello world', custom: true });
logger.log({ level: 'info', message: new Error('Yo, it\'s on fire') });
```

Basically the typedefs should be changed to reflect the current functionality. As shown below.

```typescript
type LogCallback = (error?: any, level?: string, message?: string | Error, meta?: any) => void;

interface LogEntry {
    level: string;
    message: string | Error;
    [optionName: string]: any;
  }

  interface LogMethod {
    (level: string, message: string | Error, callback: LogCallback): Logger;
    (level: string, message: string  | Error, meta: any, callback: LogCallback): Logger;
    (level: string, message: string | Error, ...meta: any[]): Logger;
    (entry: LogEntry): Logger;
  }
```

The changes should propogate to the ___Logform___ definitions as well.



### Please tell us about your environment:
  
- _`winston` version? 3.2.1
   - [ ] `winston@2`
   - [x] `winston@3` 
- _`node -v` outputs:
- _Operating System? Linux
- _Language? ES6/7 

### What is the problem? 
Winston doesn't output any logging messages, nor does it throw an exception, when the Log `Level` supplied is not in lowercase. Winston Log `Levels` are currently incompatible with Docker Log Levels (where the issue originated from) [Docker Compose Commands](https://docs.docker.com/compose/reference/overview/)

```javascript
const winston = require('winston');
const { format, transports } = winston;
const { printf } = format;

const console_transport = new transports.Console({
    format: printf((info) => {
        return `${info.level} ${info.message}`;
    })
});

function getLogger(service) {
    if ( !winston.loggers.has(service) ) {
        winston.loggers.add(service, {
            level: 'INFO', //Level CANNOT be uppercase
            transports: [console_transport]
        });
    }

    return winston.loggers.get(service)
}

const logger = getLogger('Default');
logger.info('Console output test...');
```

### What do you expect to happen instead?
Throw an error when `Level` doesn't exist in `Levels`, or at least raise a warning to indicate the issue.
…ull'

Fix error: Cannot destructure property `message` of 'undefined' or 'null' on getAllInfo(err)
    at ExceptionHandler.getAllInfo (node_modules/winston/lib/winston/exception-handler.js:76:9)
    at ExceptionHandler._uncaughtException (node_modules/winston/lib/winston/exception-handler.js:167:23)
    at process.emit (events.js:215:7)
    at process.EventEmitter.emit (domain.js:475:20)
    at process._fatalException (internal/process/execution.js:150:25)
<!--
  ✋📓❓ **NOTE:** for support questions, please use StackOverflow. This
  repository's issues are reserved for feature requests and bug reports.
-->

### Please tell us about your environment:
  
- _`winston` version?_
   - [ ] `winston@2`
   - [x] `winston@3` 
- _`node -v` outputs:_
- _Operating System?_ (Windows, macOS, or Linux)
- _Language?_ (all | TypeScript X.X | ES6/7 | ES5 | Dart)

### What is the problem? 
I'm using NestJS.
I would like to override all console.XX to winston logger as global. Something like below but I don't know how to global it on NestJS
```
console.log = function() {
    logger.info.apply(logger, formatArgs(arguments));
};
console.info = function(){
    logger.info.apply(logger, formatArgs(arguments));
};
console.warn = function(){
    logger.warn.apply(logger, formatArgs(arguments));
};
console.error = function(){
    logger.error.apply(logger, formatArgs(arguments));
};
console.debug = function(){
    logger.debug.apply(logger, formatArgs(arguments));
};
```
<!--
  Please describe how to reproduce the problem including a minimum working
  code example.
-->

### What do you expect to happen instead?
<!--
  Please explain how you would expect your code to function. 
-->

### Other information
<!--
  e.g. stacktraces, related Github issues, suggestions on how to fix, 
  links for us to have more context (e.g. stackoverflow, gitter, etc).
  If nothing please remove this section.
-->

<!--
  Thank you for contributing to winston! Please review this checklist
  before submitting your issue.

  - Please ensure that your new issue conforms to our contribution guidelines:
  https://github.com/winstonjs/winston/blob/master/CONTRIBUTING.md
  
  - Participation in this open source project is subject to the our CoC
  https://github.com/winstonjs/winston/blob/master/CODE_OF_CONDUCT.md

  - For feature requests, delete the above and uncomment the section following
  this one. But first, review the existing feature requests and make sure
  there isn't one that already describes the feature you'd like to see added:
  https://github.com/winstonjs/winston/issues?q=is%3Aopen+is%3Aissue+label%3A%22feature+request%22
-->

<!--
### What's the feature?

If this is a NEW feature request please include a description of the feature,
a short code sample of the API, and the motivation / use case for changing
the behavior?

### What problem is the feature intended to solve?

### Is the absence of this feature blocking you or your team? If so, how?

### Is this feature similar to an existing feature in another tool?

### Is this a feature you're prepared to implement, with support from us?
-->

I am using `"winston": "^3.2.1"`

I am trying to accomplish waiting for logs to finish after uncaught error and uncaught exception, with multiple loggers, then exiting. I tried many things (like `logger.end`) and only this very strange set up is working. I am looking for suggestions on how to make it like it should be. It might not necessarily be a bug but it's at least not well documented. Here's my really weird code to make this work (sorry for the long minimal example I tried to remove a much as I could):
```javascript
const winston = require('winston')
const formats = require('./formats') // custom formats
const transports = require('./transports') // custom transports

class Logger {
  constructor () {
    this.loggers = {}

    // BEGIN WEIRD PART
    process.on('unhandledRejection', async (reason) => {
      this.log('unhandledRejection', reason)
    })
    process.on('uncaughtException', async (reason) => {
      this.log('uncaughtException', reason)
      if (!this.loggerHasFinished()) {
        await this.waitForLoggerToFinish()
      }
      process.exit()
    })
  }

  loggerHasFinished () {
    // figure out if loggers already finished using weird way
    let finished = true
    for (const i in this.loggers) {
      if (this.loggers[i]._readableState.resumeScheduled !== false) {
        finished = false
      }
    }
    return finished
  }

  async waitForLoggerToFinish () {
    // noop log function or it might never end
    const logPlaceholder = this.log
    this.log = () => {}

    // await on finish event from all loggers
    const promises = []
    for (const i in this.loggers) {
      const promise = new Promise(resolve => {
        this.loggers[i].on('finish', resolve)
      })
      promises.push(promise)
    }
    await Promise.all(promises)

    this.log = logPlaceholder
  }
  // END WEIRD PART

  log (...args) {
    const log = {level: 'debug', message: args, timestamp: Date.now()}
    for (const i in this.loggers) {
      this.loggers[i].log(log)
    }
  }

  addFile (file) {
    const i = `file-${file}`
    this.loggers[i] = winston.createLogger({
      levels,
      format: formats.file,
      transports: [new transports.File({file: this.getAbsoluteFilePath(file)})],
      level: 'debug',
    })
  }

  addElasticsearch (index) {
    const i = `elasticsearch-${index}`
    this.loggers[i] = winston.createLogger({
      levels,
      format: formats.json,
      transports: [new transports.Elasticsearch({index})],
      level: 'debug',
    })
  }
}

module.exports = new Logger()

```

this is the transport

```javascript
class Elasticsearch extends Transport {
  constructor (options) {
    super(options)
  }

  async log (info, callback) {
    setImmediate(() => {
      this.emit('logged', info)
    })

    const formattedLog = info[Symbol.for('message')]
    try {
      await this.elasticsearch.add(formattedLog)
    }
    catch (e) {}
    callback()
  }
}
```
Also my solution doesn't always work, for example this doesn't wait and exit right away
```javascript
setTimeout(() => {
  throw Error('error')
})
```
I can't seem to find in the docs where I can set the log level by package.json script?  debug=redis or errors or *
### Please tell us about your environment:  
- _`winston` version?: 3.2.1

### What's the feature?
RFC5424 syslog levels should allow one to use logger.warn() to make a log at syslog  "warning" level. Yes the name of the log level is technically "warning" but this does not mean we can not provide a *method* named warn that logs at the warning level.

### What problem is the feature intended to solve?

 1. Brings the interfaces for npm levels and syslog level closer avoiding some errors. 
 2. It's more convenient.
 3. npm warn and syslog warning semantically mean the same thing.

### Is the absence of this feature blocking you or your team? If so, how?
No. 

### Is this a feature you're prepared to implement, with support from us?
Yes.

### Please tell us about your environment:
Not applicable. 

### What is the problem? 
The [README on log levels](https://github.com/winstonjs/winston#logging-levels) tells us that RFC5424 log levels and "npm log levels" are supported. A link is provided to the details for RFC5424 but not for npm log levels. What is the origin of these npm log levels? Is there a spec somewhere? Or is it something Winston made up? A link to a source definition of these log levels would be very helpful.

### What do you expect to happen instead?
Understand better, not have to search for answers after reading README.

### Other information
None.

### Please tell us about your environment:
  
N/A

### What is the problem? 
The logging levels in the README don't match the RFC5424 (syslog). It's matching NPM ([NpmConfigSetLevels](https://github.com/winstonjs/winston/blob/master/lib/winston/config/index.d.ts#L46))
 

### What do you expect to happen instead?
Change README to either set correct syslog level nor specify an example with NPM levels.


https://github.com/winstonjs/winston/blob/319abf1c17e934595bd2e24a276f1e3d9f7cd709/lib/winston/logger.js#L241

Can you add a space between the info message and the meta message? `logger.error('foo!', new Error('bar'))` results in `foo!bar` as message. `foo! bar` would be nicer i think.