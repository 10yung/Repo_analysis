Fixes from #36 works on Windows machine perfectly in all browsers but Edge
Right click paste on Edge works.

Paste still do not work in Firefox for macOS. In Chrome works with Cmd+V
The file `coffees/ext/theme.coffee` generates fixed URL `/themes/list.json` and others. The code needs to used `document.body.getAttribute('data-root-path')` as prefix for generated paths when `uri_root_path` option.
Added --username option to specify user on command line,
and --client_cert_required option to allow https without requiring the
client to provide a cert.

When --username is defined, --client_cert_required is False, and
--login is False, then a shell will be offered without any
authentication.  Because of this, --login=True is recommended.
Is it possible to use the Butterfly backend as a backend for custom web tools, which act as a wrappers of some bash commands?

For example, if I want to create a web interface for network configuration, which would just execute some bash commands, using Butterfly.
In butterfly.server.py, log.warn() was used instead of log.warning(), which was triggering Deprecated Warning at execution time...
Hello,

I have installed butterfly using.
pip install butterfly
pip install butterfly[themes]

started butterfly.server.py as

butterfly.server.py --host=192.168.0.129 --port=57575 --login --pam_profile=sshd --unsecure

The output
[W 190510 15:01:41 butterfly.server:384] Butterfly is ready, open your browser to: http://192.168.0.129:57575/
[W 190510 15:01:47 web:2162] 404 GET /theme/built-in-color-solarized-dark/fonts/SourceCodePro-Regular.otf (192.168.0.100) 0.61ms
[W 190510 15:01:47 web:2162] 404 GET /theme/built-in-color-solarized-dark/fonts/SourceCodePro-Bold.otf (192.168.0.100) 0.42ms
[W 190510 15:02:01 web:2162] 404 GET /theme/built-in-color-solarized-dark/fonts/SourceCodePro-Black.otf (192.168.0.100) 0.55ms
[W 190510 15:02:04 web:2162] 404 GET /theme/built-in-color-solarized-dark/fonts/SourceCodePro-Regular.otf (192.168.0.100) 0.63ms
[W 190510 15:02:04 web:2162] 404 GET /theme/built-in-color-solarized-dark/fonts/SourceCodePro-Bold.otf (192.168.0.100) 0.42ms

What do you think of allowing split to separate the --cmd argument on any white space instead of specifically one space?

After a few days of fighting with the following command line syntax:

butterfly.server.py --host=0.0.0.0 --port=57575 --cmd='/usr/bin/docker run --rm -it --mount type=bind,source=/home/mark/app,target=/app,readonly  myimage /bin/bash' 

I was able to determine that it was breaking because I had more than one space between "readonly" and "myimage".   This syntax works just fine:

butterfly.server.py --host=0.0.0.0 --port=57575 --cmd='/usr/bin/docker run --rm -it --mount type=bind,source=/home/mark/app,target=/app,readonly myimage /bin/bash'

Such a subtle difference is easily unnoticed by the user.

Is it technically possible to implement a ``b url`` command that could communicate over the web socket back to the browser that the terminal is accessed using, and have the browser side code open the supplied URL in a new window/tab of the browser?

If this was available, then one could create a fake script ``xdg-open`` and put it in the ``PATH`` which actually called ``b url``. That way Python applications that use ``webbrowser.open()``, including the ``b open`` command, or any other applications that tries to use a similar approach to open a URL in a browser, would be able to work where the terminal session is actually running on a remote system to the browser.

If you think this is technically possibly and can provide pointers of how it could be integrated, then I can have a go at adding support for it. Thanks.
If playing an audio file on a remote computer in a butterfly session, the sound is played on the remote machine instead of the client/browser.
Hey community :)

I would like to add route (f.e 127.0.0.1/test). When I send GET terminal should appear and invoke some command. Let's say os.system("Some command") or ("Some_script.sh").

At the moment everything is run in the "main window" where server has own logs from actions, but not in browser.

I hope that it's understandable.
