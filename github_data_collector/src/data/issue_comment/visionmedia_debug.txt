```javascript
debug.disable('*');
debug.enable('foo');
assert.not(debug.enabled('bar'));
assert.not(debug.enabled('bar*')); // throws; returns true
```

Has to be solved in two ways:

- More stringent checks on namespaces (as they shouldn't contain asterisks)
- Remove the check for `ns[ns.length-1]==='*'`, which makes absolutely no sense
Closes #678 .

One possible solution to the memory leak and needless `.destroy()` method.

Will leave open for a while to allow people to test.
<!--

DO NOT SUBMIT ISSUES ASKING TO REMOVE ES6.

IT WILL BE CLOSED.
IT WILL BE LOCKED.

We use ES2015+ for a reason. Modern best
practices dictate the use of tooling like
Babel and @babel/preset-env in order to
target the browsers that make sense for
your project.

For more information, please see:
https://github.com/sindresorhus/ama/issues/446#issuecomment-281014491

Please keep in mind that `debug` is downloaded,
installed, transpiled and used millions of times
*per day*. If you have an error with `debug`, it's
most likely your own configuration (e.g. with Babel,
Webpack, etc).

Unless you post ample evidence you have tried
to fix this yourself, it will most likely
be determined that your issue is localized
to your project - not `debug`.

-->

Coverity static analysis is complaining that `enable(namespaces)` uses an unescaped user input as the basis for a regular expression.

It follows the path from the user-defined `window.localStorage.debug` value through the `load()` function in [browser.js](https://github.com/visionmedia/debug/blob/master/src/browser.js) into the `enable(namespaces)` function in [common.js](https://github.com/visionmedia/debug/blob/master/src/common.js#L177).

I understand that this debug input is used to control what is logged or not -- but it leaves the library (and any dependent ones) open to receiving crafted input that could cause a denial of service attack on the user's browser (ReDoS attack). I don't believe this is an issue for a server-side DoS attack -- as the input on the server comes from an environment variable rather than the less-protected browser context.

One solution might be to look at something like https://github.com/davisjam/safe-regex to defend against some types of problematic regexes -- there are other suggestions in that repo's readme as well.
Whether to support running on deno ?

https://github.com/denoland/deno
This PR rewrites the README in (relative) accordance with the [v5 roadmap](https://github.com/visionmedia/debug/issues/656).

Instead of multiple sections documenting different parts in a seemingly random order, the new README documents the debug function directly and each of the parameters which encapsulate their own functionality.

If you need an extra hand with the rest of the roadmap, feel free to add me as a collaborator. Thanks!
ReactNative renders in a document-less mode, but goes through the browser for their live builds.
Fortunately they tag the navigator as ReactNative making this easy to check for.
This diff adds `supports-color` as an *optional* peer dependency. Optional peer dependencies don't trigger warnings when users omit them. They are supported by all package managers, including npm.

Adding these lines will prevent package managers from incorrectly hoisting `supports-color` in a way that would prevent `debug` from accessing it.
I've written types for the project based on the latest version.

1.   I assumed the formatArgs accepts Array of strings.
2. this is still experimental, and I wish somebody will check my browser checking on index.d.ts as it is a bit hack.

solves #669
<!--

DO NOT SUBMIT PULL REQUESTS REMOVING ES6.

IT WILL BE CLOSED.
IT WILL NOT BE MERGED.

We use ES2015+ for a reason. Modern best
practices dictate the use of tooling like
Babel and @babel/preset-env in order to
target the browsers that make sense for
your project.

For more information, please see:
https://github.com/sindresorhus/ama/issues/446#issuecomment-281014491

-->

<!--

DO NOT SUBMIT PULL REQUESTS REMOVING ES6.

IT WILL BE CLOSED.
IT WILL NOT BE MERGED.

We use ES2015+ for a reason. Modern best
practices dictate the use of tooling like
Babel and @babel/preset-env in order to
target the browsers that make sense for
your project.

For more information, please see:
https://github.com/sindresorhus/ama/issues/446#issuecomment-281014491

-->

This patch ensures we don't manually extract the `stack` or `message` from errors if we are running on Node.js. Instead, `util.inspect`/`util.format` does this for us automatically. The browser behaviour remains unaffected.

I added a unit test to verify the behaviour.

Fixes #711.
