# Issue description
In Spock 2 parameterized tests are automatically "unrolled". Therefore, it seems to be intuitive to automatically resolved placeholders put in a test name.

# How to reproduce
```
def "should resolve placeholder in test name by default (#text)"() {
    expect:
        text.length() == lenght
    where:
        text | lenght
        "dog" | 3
        "tiger" | 5
}
```
generates:
![image](https://user-images.githubusercontent.com/148013/72609582-a00cfb80-3925-11ea-9c55-b6fed6c91dce.png)

It is required to use `@Unroll` implicitly to resolve placeholders.

## Link to a gist or similar (optional)
Slightly related regarding the context - #1070 (but for Spock 1.3 and probably with different implementation reason).

# Additional Environment information
OpenJDK 11.0.2, spock-core:2.0-M1-groovy-2.5, Idea 2019.3.2.
There is no need to separate `sneakyThrow` and `doSneakyThrow`, it can be done
in one declaration.

I also added a return type so it can be used in methods or lambdas that need a return value.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/spockframework/spock/1077)
<!-- Reviewable:end -->

This is an issue to track an ability to better handle calling `go.x` when the generic Java mock implementation is used for an Groovy object in Groovy 3. Currently a working (but ugly and fragile) workaround (aka "hack") is applied, but we hope to have some better way. Related [discussion](https://mail-archives.apache.org/mod_mbox/groovy-dev/202001.mbox/%3c54d78589-67e2-7c92-6512-2407829609d6@wp.pl%3e) on the Groovy devel mailing list.

A quotation from the original message:
> TL;TR. How would be best to distinguish in Groovy 3 foo.x and foo.getProperty("x") in a call (at the level of an interceptor for a mocking system)?
> 
> More detailed version.
> Working on the Spock adjustment to Groovy 3, I spotted that Groovy 3 started for a property access go.x (go - some GroovyObject instance with a field "x") to call go.getProperty("x") instead of go.getX() directly (as it took place in Groovy 2). This broke tests for mocking with a property call (getX() is stubbed, but go.x is called) and forced me to detect getProperty("x") calls in a mock interceptor - to analyze deeper and check which method (here getter) is being called and if has been stubbed.
>
> However, in addition, it should be possible to just stub direct go.getProperty("x") calls [1]. To do that, currently, I have to analyze a stack trace to detect groovy.lang.GroovyObject$getProperty.call() at
the position -3 [2] (for direct go.getProperty("x") calls) and deeper process only the other calls (go.x). It seems to work, but it's quite ugly and fragile. I wonder, how to reliably differentiate those two types of calls?
```
# Summary
**This pull request provides expermental Spock compatibility (compilation + tests) with Groovy 3.**

In addition the Groovy 2.5 compatibility is kept. There are 2 variants available known from the previous Spock versions. There is a compatibility layer to cover breaking changes in Groovy 3.

The builds [pass](https://travis-ci.org/spockframework/spock/builds/636839398) on Travis with Groovy 3.0 and 2.5 variants on supported range of Java versions.


## Known issues/limitations (to be fixed - or acknowledged - before merge):
 - Unlike with the `@NamedParam` annotation, dummy classes `LambdaExpression` and `MethodReferenceExpression` have to be on runtime classpath with Groovy 2.5 (they are used as method arguments). It brings a runtime risk if `groovy:3.x` and `spock-groovy2-compat:2.x-groovy-2.5` artifacts are accidentally mixed in one project (however, I don't know if we can do it another way).
 - ~Recently merged tests in `AnonymousInnerClasses` (#1027) fails with Groovy 3 - @Vampire, you are up-to-date with the changes, maybe you would like to take a look at it?~ - adjusted to Groovy 3 by @Vampire
 - `CompileTimeErrorReporting."constructor declaration"` test fails with Groovy 3 - the implementation of `SpecParser.constructorMayHaveBeenAddedByCompiler()` has to be improved. It's not a critical issue, so temporarily skipped it to finish making codebase cross-compatible. Contribution with that is welcome. - diagnosed by @Vampire, tracked in [GROOVY-9360](https://issues.apache.org/jira/browse/GROOVY-9360).


## Long term known issues (to be fixed before 2.0-final is released in separate PRs):
 - Groovy 3 allows to use `+=` and `-=` in assertions (e.g. `assert i += 2`). This is not compatible with Groovy 2 and Spock's assumptions. I reported it [GROOVY-9360](https://issues.apache.org/jira/browse/GROOVY-9360) and [most likely](https://mail-archives.apache.org/mod_mbox/groovy-dev/202001.mbox/%3c4815aea2-fadb-4ad9-e487-eab494767745@gmx.org%3e) it would be reverted before 2.0-final
 - update to Groovy 3.0-final once released
 - More lambada and method reference tests for Spock tests - contribution is welcome

## Other issues/ideas: 
 - I'm not satisfied with [the way](https://github.com/spockframework/spock/commit/1dd24a2251afe3151e04b50af8afb6285b236c76) property calls are handled in mocks after changes in Groovy 3. I [asked](https://mail-archives.apache.org/mod_mbox/groovy-dev/202001.mbox/%3c54d78589-67e2-7c92-6512-2407829609d6@wp.pl%3e) on the Groovy mailing list about some better ideas - tracked in #1076
 - `JavaStubs` tests could be rewritten to parameterized tests to test both interface and class-based stubs

## Other remarks
It is recommended to merge this pull request WITHOUT squashing, to keep the original commit separation. They contain extra information about incompatibilities and, in addition, would be easier to selectively revert if needed.

**Feel free to comment and propose possible improvements!**

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/spockframework/spock/1075)
<!-- Reviewable:end -->

Fixes #1029

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/spockframework/spock/1074)
<!-- Reviewable:end -->

# Issue description
Several own Spock- tests started to fail after upgrade junit-bom from 5.5.2 to 5.6.0-RC1 (master) with:
> groovy.lang.MissingMethodException: No signature of method: static spock.util.EmbeddedSpecRunner.tests() is applicable for argument types: () values: []

It would be good to make Spock junit-5.6 (Platform 1.6.0) compatible.

E.g.
> method name can still contain parentheses
```
Condition failed with Exception:

result.tests().started().list().testDescriptor.displayName == ["an actor (named fred) age 30"]
|      |
|      groovy.lang.MissingMethodException: No signature of method: static spock.util.EmbeddedSpecRunner.tests() is applicable for argument types: () values: []
|      Possible solutions: use([Ljava.lang.Object;), getAt(java.lang.String), use(java.util.List, groovy.lang.Closure), use(java.lang.Class, groovy.lang.Closure), wait(), wait(long)
|      	at org.spockframework.smoke.parameterization.UnrolledFeatureMethods.method name can still contain parentheses(UnrolledFeatureMethods.groovy:320)
<spock.util.EmbeddedSpecRunner$SummarizedEngineExecutionResults@314708ce results=org.junit.platform.testkit.engine.EngineExecutionResults@50706160>

	at org.spockframework.smoke.parameterization.UnrolledFeatureMethods.method name can still contain parentheses(UnrolledFeatureMethods.groovy:320)
Caused by: groovy.lang.MissingMethodException: No signature of method: static spock.util.EmbeddedSpecRunner.tests() is applicable for argument types: () values: []
Possible solutions: use([Ljava.lang.Object;), getAt(java.lang.String), use(java.util.List, groovy.lang.Closure), use(java.lang.Class, groovy.lang.Closure), wait(), wait(long)
	... 1 more
```

All the tests seem to be related to parameterization.

# How to reproduce
Bump junit-bom to `"org.junit:junit-bom:5.6.0-RC1"` and call `gw check`.

# Additional Environment information
OpenJDK 11.0.5, Linux, spock from master

# Additional information

```
Failed tests

    FeatureMethods. are nevertheless reported with their original name
    FeatureMethods. can have names containing any characters in embedded specs
    PendingFeatureExtensionSpec. @PendingFeature includes reason in exception message
    RequiresExtension. verifyExecution
    DataTables. cell references are evaluated correctly in the method's name
    UnrolledFeatureMethods. can unroll a whole class at once
    UnrolledFeatureMethods. expressions in naming pattern that can't be evaluated are prefixed with 'Error:'
    UnrolledFeatureMethods. if creation of a data provider fails, feature isn't unrolled
    UnrolledFeatureMethods. iterations of an unrolled feature foo are named foo[0], foo[1], etc.
    UnrolledFeatureMethods. method name can act as naming pattern
    UnrolledFeatureMethods. method name can still contain parentheses
    UnrolledFeatureMethods. method-level unroll annotation wins over class-level annotation
    UnrolledFeatureMethods. naming pattern in @Unroll annotation wins over naming pattern in method name
    UnrolledFeatureMethods. naming pattern may refer to data variables
    UnrolledFeatureMethods. naming pattern may refer to feature name and iteration count
    UnrolledFeatureMethods. naming pattern supports property expressions
    UnrolledFeatureMethods. naming pattern supports zero-arg method calls
    UnrolledFeatureMethods. variables in naming pattern whose value is null are replaced correctly
```
```groovy
  def "NPE"() {
    given:
    List<String> list = Mock()

    when:
    def len = list.get(1).length()

    then:
    len == 5
    1 * list.get(0) >> "hello"
  }
```

Fails with `java.lang.NullPointerException: Cannot invoke method length() on null object`. We loose any information, that this was caused by a wrong argument to the mock.

If there are Unmatched invocations, then they should be reported as well.
```
Too few invocations for:

1 * list.get(0) >> "hello"   (0 invocations)

Unmatched invocations (ordered by similarity):

1 * list.get(1)
One or more arguments(s) didn't match:
0: argument == expected
   |        |  |
   1        |  0
            false
```
# Issue description
Unrolling a test only executes the first test.
If i remove the `@Unroll` everything works.
If i remove the `#queryValue` from the method name everythings works.

# How to reproduce
```groovy
import spock.lang.Specification
import spock.lang.Unroll

class UnrollBugSpec extends Specification {

    @Unroll 
    void "Valid Mandatory QueryValue #queryValues"(String queryValues, Boolean returnStatus) {
        expect:
            assert returnStatus

        where:
            queryValues                                                        || returnStatus
            '?from=2018-12&to=2019-12'                                         || true
            '?from=2018-12&to=2019-12'                                         || true
            '?to=2019-12&from=2018-12&divisions=test&teams=test&products=test' || false
    }
}
```

# Additional Environment information
## Java/JDK
```
java -version
openjdk version "1.8.0_202"
OpenJDK Runtime Environment Corretto-8.202.08.2 (build 1.8.0_202-b08)
OpenJDK 64-Bit Server VM Corretto-8.202.08.2 (build 25.202-b08, mixed mode)
```

## Groovy version
2.5

## Build tool version
### Gradle
5.3

## Operating System
Windows

## IDE
IntelliJ

## Build-tool dependencies used
### Gradle/Grails
    testImplementation("org.spockframework:spock-core:1.3-groovy-2.5")
Added flexible support for Java 13+. Removed methods for unsupported Java versions (`<8`).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/spockframework/spock/1068)
<!-- Reviewable:end -->

A try to Spock 2.0-M1 with Groovy 3.0.0-RC2 (manually playing with Groovy dependencies) results in very cryptic error message:

```
> Task :compileTestGroovy FAILED
startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at
jar:file:/.../spock-core-2.0-M1-groovy-2.5.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation
because of exception java.lang.reflect.InvocationTargetException

1 error
```

Having Groovy 2.4 and Spock 1.3-groovy-2.5 returns much more verbose:

```
> Task :compileTestGroovy FAILED
startup failed:
Could not instantiate global transform class org.spockframework.compiler.SpockTransform specified at
jar:file:/.../spock-core-1.3-groovy-2.5.jar!/META-INF/services/org.codehaus.groovy.transform.ASTTransformation
because of exception org.spockframework.util.IncompatibleGroovyVersionException:
The Spock compiler plugin cannot execute because Spock 1.3.0-groovy-2.5 is not compatible
with Groovy 2.4.3. For more information, see http://versioninfo.spockframework.org
Spock artifact: file:/.../spock-core-1.3-groovy-2.5.jar
Groovy artifact: file:/.../groovy-2.4.3.jar

1 error
```

It would be good to try to detect that incompatibility earlier and fail with more verbose error message for Spock 2.0 and Groovy 3.0.

Btw, as at least basic tests pass with Spock 2.0-groovy-2.5-SNAPSHOT and Groovy 3.0.0-RC2 maybe it would be good to allow to run Spock 2.0-M2 with Groovy 3.x to facilitate testing that configuration (before Spock can be built and tested with Groovy 3)?