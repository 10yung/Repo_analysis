Hi. How i can set fake value for canvas and webgl fingerprints in puppeteer?
Pretty self-explanatory. I'm using VS2019 and .NET Core 3.1 for my project and needed to ensure puppeteersharp would work with it. 
ERROR 2020-01-08 08:02:26,999 [180  ] pplication.VesselRipper.SpiderAppService - 码头:LONG BEACH,CA-STA,失败原因:Failed to launch Chromium! [42480:32268:0108/080224.220:ERROR:message_window.cc(112)] Failed to create a message-only window: 存储不足，无法处理此命令。 (0x8)
[42480:31416:0108/080224.221:ERROR:google_update_settings.cc(246)] Failed opening key Software\Chromium to set usagestats; result: 5
[42480:39196:0108/080224.203:FATAL:status_tray_win.cc(113)] Check failed: atom_. 
Backtrace:
	ovly_debug_event [0x00007FFEC1051252+16183762]
	ovly_debug_event [0x00007FFEC1050832+16181170]
	ovly_debug_event [0x00007FFEC1063383+16257795]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC263AA24+8660195]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC263ADC8+8661127]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F4C6DD+1393052]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F4C6AB+1393002]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC2435164+6540323]
	IsSandboxedProcess [0x00007FFEC166D4D7+1796059]
	ovly_debug_event [0x00007FFEC135560E+19346830]
	GetHandleVerifier [0x00007FFEC1A1FC63+2062643]
	IsSandboxedProcess [0x00007FFEC166D290+1795476]
	IsSandboxedProcess [0x00007FFEC17EB69C+3361184]
	IsSandboxedProcess [0x00007FFEC17E9E7E+3355010]
	IsSandboxedProcess [0x00007FFEC17E9364+3352168]
	IsSandboxedProcess [0x00007FFEC17E8E36+3350842]
	ovly_debug_event [0x00007FFEC1031EAC+16055852]
	ovly_debug_event [0x00007FFEC102E1C7+16040263]
	ovly_debug_event [0x00007FFEC102DF4F+16039631]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F582E7+1441190]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1DFA0A4+7011]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1DF9662+4385]
	ovly_debug_event [0x00007FFEC0848247+7758279]
	ovly_debug_event [0x00007FFEC0BA4D7F+11283711]
	ovly_debug_event [0x00007FFEC0847064+7753700]
	ovly_debug_event [0x00007FFEC0849C08+7764872]
	ovly_debug_event [0x00007FFEC08459EC+7747948]
	ovly_debug_event [0x00007FFEC0FCD3E1+15643489]
	ovly_debug_event [0x00007FFEC0FCDD67+15645927]
	ovly_debug_event [0x00007FFEC0FCDACD+15645261]
	ovly_debug_event [0x00007FFEC0FF8F28+15822504]
	ovly_debug_event [0x00007FFEC0FCD35E+15643358]
	ChromeMain [0x00007FFEC00E11BD+293]
	Ordinal0 [0x00007FF7A7D5275F+10079]
	Ordinal0 [0x00007FF7A7D5182D+6189]
	GetHandleVerifier [0x00007FF7A7E5B7C2+697538]
	BaseThreadInitThunk [0x00007FFF02A084D4+20]
	RtlUserThreadStart [0x00007FFF04E7E8B1+33]

,   at PuppeteerSharp.ChromiumProcess.State.StartingState.StartCoreAsync(ChromiumProcess p)
   at PuppeteerSharp.ChromiumProcess.State.StartingState.StartCoreAsync(ChromiumProcess p)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at CO.Spider.Application.VesselRipper.SpiderAppService.CreateBrowser(CarrierConfigs item, CrawConfig crawConfig, LaunchOptions options) in D:\project\Cityocean\CO.Spider\src\CO.Spider.Application\Spider\SpiderAppService.cs:line 234
   at Polly.AsyncPolicy.<>c__DisplayClass40_0.<<ImplementationAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext),重试次数:2
PuppeteerSharp.ChromiumProcessException: Failed to launch Chromium! [42480:32268:0108/080224.220:ERROR:message_window.cc(112)] Failed to create a message-only window: 存储不足，无法处理此命令。 (0x8)
[42480:31416:0108/080224.221:ERROR:google_update_settings.cc(246)] Failed opening key Software\Chromium to set usagestats; result: 5
[42480:39196:0108/080224.203:FATAL:status_tray_win.cc(113)] Check failed: atom_. 
Backtrace:
	ovly_debug_event [0x00007FFEC1051252+16183762]
	ovly_debug_event [0x00007FFEC1050832+16181170]
	ovly_debug_event [0x00007FFEC1063383+16257795]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC263AA24+8660195]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC263ADC8+8661127]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F4C6DD+1393052]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F4C6AB+1393002]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC2435164+6540323]
	IsSandboxedProcess [0x00007FFEC166D4D7+1796059]
	ovly_debug_event [0x00007FFEC135560E+19346830]
	GetHandleVerifier [0x00007FFEC1A1FC63+2062643]
	IsSandboxedProcess [0x00007FFEC166D290+1795476]
	IsSandboxedProcess [0x00007FFEC17EB69C+3361184]
	IsSandboxedProcess [0x00007FFEC17E9E7E+3355010]
	IsSandboxedProcess [0x00007FFEC17E9364+3352168]
	IsSandboxedProcess [0x00007FFEC17E8E36+3350842]
	ovly_debug_event [0x00007FFEC1031EAC+16055852]
	ovly_debug_event [0x00007FFEC102E1C7+16040263]
	ovly_debug_event [0x00007FFEC102DF4F+16039631]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1F582E7+1441190]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1DFA0A4+7011]
	RelaunchChromeBrowserWithNewCommandLineIfNeeded [0x00007FFEC1DF9662+4385]
	ovly_debug_event [0x00007FFEC0848247+7758279]
	ovly_debug_event [0x00007FFEC0BA4D7F+11283711]
	ovly_debug_event [0x00007FFEC0847064+7753700]
	ovly_debug_event [0x00007FFEC0849C08+7764872]
	ovly_debug_event [0x00007FFEC08459EC+7747948]
	ovly_debug_event [0x00007FFEC0FCD3E1+15643489]
	ovly_debug_event [0x00007FFEC0FCDD67+15645927]
	ovly_debug_event [0x00007FFEC0FCDACD+15645261]
	ovly_debug_event [0x00007FFEC0FF8F28+15822504]
	ovly_debug_event [0x00007FFEC0FCD35E+15643358]
	ChromeMain [0x00007FFEC00E11BD+293]
	Ordinal0 [0x00007FF7A7D5275F+10079]
	Ordinal0 [0x00007FF7A7D5182D+6189]
	GetHandleVerifier [0x00007FF7A7E5B7C2+697538]
	BaseThreadInitThunk [0x00007FFF02A084D4+20]
	RtlUserThreadStart [0x00007FFF04E7E8B1+33]


   at PuppeteerSharp.ChromiumProcess.State.StartingState.StartCoreAsync(ChromiumProcess p)
   at PuppeteerSharp.ChromiumProcess.State.StartingState.StartCoreAsync(ChromiumProcess p)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at CO.Spider.Application.VesselRipper.SpiderAppService.CreateBrowser(CarrierConfigs item, CrawConfig crawConfig, LaunchOptions options) in D:\project\Cityocean\CO.Spider\src\CO.Spider.Application\Spider\SpiderAppService.cs:line 234
   at Polly.AsyncPolicy.<>c__DisplayClass40_0.<<ImplementationAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext)
ERROR 2020-01-08 08:02:27,289 [125  ] pplication.VesselRipper.SpiderAppService - 码头:LONG BEACH,CA-STA,失败原因:Failed to create connection,   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at CO.Spider.Application.VesselRipper.SpiderAppService.CreateBrowser(CarrierConfigs item, CrawConfig crawConfig, LaunchOptions options) in D:\project\Cityocean\CO.Spider\src\CO.Spider.Application\Spider\SpiderAppService.cs:line 234
   at Polly.AsyncPolicy.<>c__DisplayClass40_0.<<ImplementationAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext),重试次数:2
PuppeteerSharp.ChromiumProcessException: Failed to create connection ---> System.Net.WebSockets.WebSocketException: Unable to connect to the remote server ---> System.Net.Http.HttpRequestException: An error occurred while sending the request. ---> System.IO.IOException: Unable to read data from the transport connection: 远程主机强迫关闭了一个现有的连接。. ---> System.Net.Sockets.SocketException: 远程主机强迫关闭了一个现有的连接。
   --- End of inner exception stack trace ---
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.ThrowException(SocketError error)
   at System.Net.Sockets.Socket.AwaitableSocketAsyncEventArgs.GetResult(Int16 token)
   at System.Net.Http.HttpConnection.FillAsync()
   at System.Net.Http.HttpConnection.ReadNextResponseHeaderLineAsync(Boolean foldedHeadersAllowed)
   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at System.Net.Http.HttpConnection.SendAsyncCore(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithNtConnectionAuthAsync(HttpConnection connection, HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.HttpConnectionPool.SendWithRetryAsync(HttpRequestMessage request, Boolean doRequestAuth, CancellationToken cancellationToken)
   at System.Net.Http.RedirectHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)
   --- End of inner exception stack trace ---
   at System.Net.WebSockets.WebSocketHandle.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken, ClientWebSocketOptions options)
   at System.Net.WebSockets.ClientWebSocket.ConnectAsyncCore(Uri uri, CancellationToken cancellationToken)
   at PuppeteerSharp.Transport.WebSocketTransport.CreateDefaultWebSocket(Uri url, IConnectionOptions options, CancellationToken cancellationToken)
   at PuppeteerSharp.Transport.WebSocketTransport.CreateDefaultTransport(Uri url, IConnectionOptions connectionOptions, CancellationToken cancellationToken)
   at PuppeteerSharp.Connection.Create(String url, IConnectionOptions connectionOptions, ILoggerFactory loggerFactory, CancellationToken cancellationToken)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   --- End of inner exception stack trace ---
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at PuppeteerSharp.Launcher.LaunchAsync(LaunchOptions options)
   at CO.Spider.Application.VesselRipper.SpiderAppService.CreateBrowser(CarrierConfigs item, CrawConfig crawConfig, LaunchOptions options) in D:\project\Cityocean\CO.Spider\src\CO.Spider.Application\Spider\SpiderAppService.cs:line 234
   at Polly.AsyncPolicy.<>c__DisplayClass40_0.<<ImplementationAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at Polly.Retry.AsyncRetryEngine.ImplementationAsync[TResult](Func`3 action, Context context, CancellationToken cancellationToken, ExceptionPredicates shouldRetryExceptionPredicates, ResultPredicates`1 shouldRetryResultPredicates, Func`5 onRetryAsync, Int32 permittedRetryCount, IEnumerable`1 sleepDurationsEnumerable, Func`4 sleepDurationProvider, Boolean continueOnCapturedContext)
missing ;
Hi there,

Love this product!! I'm having an issue taking screen shots of very long pages (e.g. over 8200 pixels). The resulting image starts repeating itself prior to reaching the end of the page. Have you seen this issue and, if so, is there a workaround?

I saw a few mentions of it online but no real solutions. 

Version 2.0.0
.Net Framework 4.6.1
VS 2017
Windows 8.1

### Description

`Browser.CloseAsync().Wait()` hangs when called on the same thread that the browser was created on.

### Complete minimal example reproducing the issue

```csharp
var browser = await PuppeteerSharp.Puppeteer.LaunchAsync(new LaunchOptions
{
	Headless = true,
	ExecutablePath = @"C:\Program Files (x86)\Google\Chrome\Application\chrome.exe",
}).ConfigureAwait(false);

// uncommenting this line fixes the hang
//await Task.Yield();

// hangs forever
browser.CloseAsync().Wait();

// awaiting instead prevents the hang
//await browser.CloseAsync(); 

// not waiting on CloseAsync() prevents the hang. The task does complete with RanToCompletion
//browser.CloseAsync().ContinueWith(t => Console.WriteLine(t.Status));
```

### Expected behavior:

`browser.CloseAsync().Wait();` should return normally.

### Actual behavior:

`browser.CloseAsync().Wait();` hangs forever. Oddly, this can be fixed by awaiting `Task.Yield()` beforehand. 

Some other methods of closing DO work, such as awaiting `browser.CloseAsync()` or not awaiting it at all.

### Versions

* Which version of PuppeteerSharp are you using? 
2.0
* Which .NET runtime and version are you targeting? E.g. .NET framework 4.6.1 or .NET Core 2.0.
.NET framework 4.6.1

### Additional Information

While it seems silly to call `browser.CloseAsync().Wait();`, this actually came up in some real and (arguably) reasonable code I was working on.

Basically, the code was wrapping the `Browser` object in another class which implemented `IDisposable`. Because `Dispose()` is synchronous, the `Browser` was being closed synchronously.

The reason for calling `browser.CloseAsync().Wait()` over `browser.Dispose()` is that `Dispose()` does not wait for the close to finish; that means that we won't know if an error happens during close and we can't be sure that the browser process is gone before proceeding. For example, we had a test which was asserting `browser.IsClosed` after disposing the outer object; without waiting on `CloseAsync()` this test was failing.

I've reproduced this in both LinqPad and in an NUnit test.

Now that I have some idea of what is going on I can work around this, but it would be nice to fix it to prevent others from encountering the same thing. I also wonder whether the underlying cause could lead to other issues that I haven't run into yet.

Thanks for your work on this library!
would it be possible to support a PageCreated event so common actions can be easily be done for all created pages?
Hi everybody,

### Description

I use puppeteer-sharp to render html into pdf - for performance reasons I use WaitForSelector - a JavaScript function inside my html adds a css class during rendering, which I looking for.

PuppeteerSharp 1.19 and 1.20 are working without any issue on local and on server (I always used the chromium version which belongs to the PuppeteerSharp version).
With PuppeteerSharp 2.0 the WaitForSelector is running on my server until timeout is reached (I set it to 300000 for test) - If I use chrome installation on server it fails, too.

On my local machine it runs fine - I can even use my local chrome installation - what I prefere, because pdf generation is significant faster.

I really don't get the point what is wrong, because it throws no exception.

### Complete minimal example reproducing the issue

```csharp
### Browser setup

if (_executablePath == null || !File.Exists(_executablePath))
            {
                var downloadDirectory = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData), ".local-chromium");
                var fetcher = await new BrowserFetcher(new BrowserFetcherOptions
                {
                    Path = downloadDirectory,
                    Platform = Platform.Win64
                }).DownloadAsync(BrowserFetcher.DefaultRevision).ConfigureAwait(false);
                _executablePath = fetcher.ExecutablePath;
            }

            var options = new LaunchOptions
            {
                ExecutablePath = _executablePath,
                Headless = true,
                LogProcess = false,
                UserDataDir = "C:\\ProgramData\\PuppeteerService\\UserData\"",
                IgnoreDefaultArgs = true,
                IgnoredDefaultArgs = new[]
                {
                    "--disable-extensions"
                },
                Args = new[]
                {
                    "--disable-web-security",
                    "--disable-background-networking",
                    "--disable-background-timer-throttling",
                    "--disable-backgrounding-occluded-windows",
                    "--disable-breakpad",
                    "--disable-client-side-phishing-detection",
                    "--disable-default-apps",
                    "--disable-dev-shm-usage",
                    "--disable-extensions",
                    "--disable-features=site-per-process",
                    "--disable-hang-monitor",
                    "--disable-ipc-flooding-protection",
                    "--disable-popup-blocking",
                    "--disable-prompt-on-repost",
                    "--disable-renderer-backgrounding",
                    "--disable-sync",
                    "--disable-translate",
                    "--metrics-recording-only",
                    "--safebrowsing-disable-auto-update",
                    "--mute-audio",
                    "--disable-gpu",
                    "--disk-cache-dir=\"C:\\ProgramData\\PuppeteerService\\Cache\"",
                    "--enable-accelerated-mjpeg-decode",
                    "--enable-accelerated-video",
                    "--enable-gpu-rasterization",
                    "--no-sandbox",
                    "--disable-setuid-sandbox",
                    "--enable-native-gpu-memory-buffers",
                    "--ignore-gpu-blacklist"
                }
            };

### Html to pdf generation

public async Task<byte[]> GeneratePdfStreamAsync(string htmlContent)
        {
            //Beginning pdf generation...
            
            var page = await _browser.NewPageAsync().ConfigureAwait(false);
            //chrome page rented...

            await page.SetContentAsync(htmlContent, new NavigationOptions{ WaitUntil = new [] { WaitUntilNavigation.DOMContentLoaded }} ).ConfigureAwait(false);
            //content set done...
            
            //This will run until Timeout is reached with PuppeteerSharp 2.0
            await page.WaitForSelectorAsync(".renderingDone", new WaitForSelectorOptions{ Timeout = 300000, Visible = true }).ConfigureAwait(false);
            //rendering done...

            var printOptions = new PdfOptions { Format = PaperFormat.A4, PrintBackground = true /*Set to true. Otherwise pictures are not printed*/ };
            var pdfData = await page.PdfDataAsync(printOptions).ConfigureAwait(false);
            //pdf data generation finished...
            
            page.Dispose();
            
            using (var pdfStream = new MemoryStream())
            {
                pdfStream.Write(pdfData, 0, pdfData.Length);
                pdfStream.Position = 0;
                //Pdf generation done.

                return new pdfStream.ToArray();
            }
        }
```

### Expected behavior:

The WaitForSelector should be triggered.

### Actual behavior:

Timeout will be reached without any exception that gives a hint to the problem.

### Versions

OS local: Windows 10 Enterprise 1809
OS Server: Windows Server 2012 
Chrome Version 79.0.3945.79 (Official Build) (64-Bit)
Chromium Version 79.0.3945.0 (Developer-Build) (64-Bit)
.Net Core Version 2.2
PuppeteerSharp Version 2.0


### Additional Information

I connected a logger to puppeteer and on my local machine it looks like this:
![image](https://user-images.githubusercontent.com/8288370/71085523-015f7480-2198-11ea-9388-d0159d91bc59.png)

On the Server instead it does not reach the state "rendering done...":
![image](https://user-images.githubusercontent.com/8288370/71087068-94e67480-219b-11ea-830b-42d129abe199.png)


If any additional information is needed don't hesitate to ask.

Thank you in advance 
Lucas

### Description
When I set the proxy can not launch the browser. If I unset the proxy can launch the browser.
Whether it is answered as #1202 

### Expected behavior:

WebSocketException: Unable to connect to the remote server

### Versions

version of PuppeteerSharp 2.0.0


### Description

I'm getting random NullReferenceExceptions on CreateIncognitoBrowserContextAsync method after upgrading to version 2

### Versions

* Which version of PuppeteerSharp are you using? 2
* Which .NET runtime and version are you targeting? .NET Core 2.0.

### Additional Information

I'm running PuppeteerSharp on alpine .net core image with this config:

```docker
RUN apk update && apk upgrade && \
    echo @edge http://nl.alpinelinux.org/alpine/edge/community >> /etc/apk/repositories && \
    echo @edge http://nl.alpinelinux.org/alpine/edge/main >> /etc/apk/repositories && \
    apk add --no-cache \
      chromium@edge \
      nss@edge \
      freetype@edge \
      freetype-dev@edge \
      harfbuzz@edge \
      ttf-freefont@edge \
      libstdc++@edge \
      wget@edge \
      ca-certificates@edge
RUN update-ca-certificates
```