I rearranged the locations to build to accomodate a port for micropython.
However, when I build, the generated (by makemoduledefs.py) moduledefs.h on build/genhdr/moduledefs.h generates this error:
build/genhdr/moduledefs.h:5:39: error: expected ‘}’ before ‘{’ token
#define MODULE_DEF_MP_QSTR_UARRAY { MP_ROM_QSTR(MP_QSTR_uarray), MP_ROM_PTR(&mp_module_uarray) },
build/genhdr/moduledefs.h:11:36: note: in expansion of macro ‘MODULE_DEF_MP_QSTR_UARRAY’
 #define MICROPY_REGISTERED_MODULES MODULE_DEF_MP_QSTR_UARRAY
../py/objmodule.c:236:5: note: in expansion of macro ‘MICROPY_REGISTERED_MODULES’
     MICROPY_REGISTERED_MODULES
../py/objmodule.c:138:60: note: to match this ‘{’
 STATIC const mp_rom_map_elem_t mp_builtin_module_table[] = {
make: *** [../py/mkrules.mk:47: build/py/objmodule.o] Error 1
What am I doing wrong here?
Thanks
On a Pyboard 1.1 the following works:
```python
>>> from pyb import RTC
>>> rtc=RTC()
>>> rtc.calibration()
0
>>> rtc.calibration(1)
>>> rtc.calibration()
1
>>> rtc.calibration(-1)
>>> rtc.calibration()
-1
```
On a Pyboard D SF2W and on an SF6W I get
```python
>>> from pyb import RTC
>>> rtc=RTC()
>>> rtc.calibration()
0
>>> rtc.calibration(1)
>>> rtc.calibration()  # +ve values seem to be negative sign extended
-511
>>> rtc.calibration(-1)  # It likes -ve values
>>> rtc.calibration()
-1
>>> 
```
Actual RTC behaviour matches the reported values - i.e. passing 1 yields a frequency which is substantially in error. This behaviour is odd as the definition of the RTC_CALR register appears identical for all three chips.

While the examples I have show good RTC performance the data for the SiT1533 oscillator indicates that calibration may sometimes be required (up to 20ppm error).
I'm trying to do a board without a USB or switch, using the STM32F411. I want to use MBOOT to update the FW only when it is called from within an application so have no need for a USB or switch. It will use an external SPI flash chip. I've got this working on the basic pyboard.

I've declared the below - yet MBOOT gives multiple errors when calling sudo make BOARD=NAME__ USE_MBOOT=1 clean all

#define MICROPY_HW_HAS_SWITCH       (0)
#define MICROPY_HW_ENABLE_USB       (0)
#define MICROPY_HW_USB_FS           (0)

Is there a way to use MBOOT without a USB or switch?
In CPython:
```
Python 3.8.0 (default, Oct 23 2019, 18:51:26)
[GCC 9.2.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> eval(compile("4+5", "<string>", "single"))
9
>>>
```
In MicroPython (1.12):
```
MicroPython v1.12-68-g3032ae115-dirty on 2020-01-15; ESP32 module with ESP32
Type "help()" for more information.
>>> 4+5
9
>>> eval(compile("4+5", "<string>", "single"))
>>>
```
As esp-idf provides `max_connection` field in the `wifi_ap_config_t`, I've added a case which lets use such an option when configuring AP on the ESP32.

Note that this is not dependent on `MAX_STA_COUNT` define in esp-idf's `components/wpa_supplicant/include/wpa/ap_config.h`. It is just a default value for the field and can be changed.

I have successfully tested it and managed to connect 10 clients. The 11th fails as expected. But it's still more than 4.
The code example in [the docs](http://docs.micropython.org/en/latest/library/machine.RTC.html) fails with a surprising traceback.
```python
rtc = machine.RTC()
rtc.init((2014, 5, 1, 4, 13, 0, 0, 0))
```
Outcome:
```
MicroPython v1.12-61-g0f16eeab2 on 2020-01-16; PYBv1.0 with STM32F405RG
Type "help()" for more information.
>>> 
>>> from machine import RTC
>>> rtc = RTC()
>>> rtc.init((2014, 5, 1, 4, 13, 0, 0, 0))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: function takes 1 positional arguments but 2 were given
```
This PR proposes to add support for PSK cipher suites to ussl, specifically for the esp32 but it should be supportable for other platforms that use mbedtls as well (there is nothing esp32-specific in this PR except for enabling the cipher suites in the mbedtls config, which is port-specific).
The PSK cipher suites are awesome because they do away with all the cert and key stuff. Instead each client can get an id and hex-key and use that for bidirectional auth when connecting to the server. Very useful for MQTT, for example.
Docs can be read at: https://micropython-tve.readthedocs.io/en/tls-psk/library/ussl.html
SSL handshake fails with error: 
```
mbedtls_ssl_handshake error: -4310
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/lib/ssl_repl.py", line 217, in start
  File "/lib/ssl_repl.py", line 41, in __init__
  File "/lib/ssl_repl.py", line 49, in connect_SOC
OSError: [Errno 5] EIO
```
The previous build : esp32-idf3-20200114-v1.12-63-g1c849d63a.bin works well.

Are there any significant changes in the ssl module in the latest build? 
Is it related to this [issue](https://github.com/micropython/micropython/issues/5303) maybe?

I checked the error code [here](https://tls.mbed.org/api/ssl_8h.html#a11b1fb765e3a67f5c51478f0ac60aea5) and I think it points to this  (but still not sure how to read the error code since '-0x10d6' does not appear anywhere) 

> MBEDTLS_SSL_ALERT_MSG_UNSUPPORTED_CERT   43 /* 0x2B */

Maybe the previous build uses `modussl_axtls.c` by default instead of `modussl_mbedtls.c` and the latest is the other way around ? 

From #5225, as described by @mirko 

> SPI allows word sizes of several bits, not necessarily rounded up to a multiple of 8.
> While I don't now about every platform / hardware, at least soft-SPI (GPIO bitbanged SPI) and the ESP IDF driven ESP32 SPI hardware support transferring single bits via SPI.
> Looking at the micropython code though, the whole SPI abstraction layer - HW backed or SW - assumes lengths of multiples of bytes, meaning, I can't just adjust the parts related to esp32 / gpio.
> 
> To provide a use case - and I indeed see this being an edge case, but keep in mind that it still conforms with the SPI spec: (ab)using SPI to speak SWD.
> 
> Suggestion / Feature request: Adjust the SPI code so that we can transmit single bits instead of multiples of bytes.
> 
> Happy to do it myself / help / assist / for discussion. However at first glance, the changeset apparently would be larger than anticipated and I'd be glad for opinions / input / help.
This adds support for a MICROPYINSPECT environment variable that works
exactly like PYTHONINSPECT.

> If this is set to a non-empty string it is equivalent to specifying the -i option.
>
> This variable can also be modified by Python code using os.environ to force inspect mode on program termination.