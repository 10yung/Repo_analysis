Heyhu,

in my project I need to select all vertices (and all of their respective properties) that match a given type:

```rust
let tag = String::from("TestTag");
let transaction = self.datastore.transaction().unwrap();
let type_filter = Type::new(tag).unwrap();
let vq = RangeVertexQuery::new(u32::MAX).t(type_filter);
let start_timestamp = Instant::now();
let vertices = transaction.get_all_vertex_properties(vq).unwrap();

println!("After get_all_vertex_properties: {:?}", start_timestamp.elapsed());
println!("Vertices; Len: {:?}", vertices.len());

drop(vertices);
println!("After drop of vertices: {:?}", start_timestamp.elapsed());
```
Fetching the vertices is moderately fast, however, I was confused about how long it took to return from the function. It turned out that dropping the "vertices"-Vec takes quite some time (with --release):

```
After get_all_vertex_properties: 284.387385ms
After drop of vertices: 490.460397ms
Dropping took: 206.073012ms
```

Flame-Graph corresponding with the drop:

<img width="1202" alt="Screenshot 2019-12-31 at 16 15 55" src="https://user-images.githubusercontent.com/15673326/71625573-da1d9400-2be8-11ea-80d9-ce3711f64e2a.png">

I only recently started using Rust, so I'm not sure how to investigate the issue. I created a repository that contains a project that replicates this behaviour:

https://github.com/ra-martin/IndraDropIssue

Thanks for maintaining such a cool project!

Hi,
I'd often like to query all available vertices/edges in a query rather than limiting it to a number i don't  know beforehand.

```rust
let query = SpecificVertexQuery::single(uuid::default()).outbound().t("Test").outbound().t("MyVertex");
```
This is my default use case.

Mostly I limit only the final result (no matter how deeply chained the query is).

```rust
let vertices = transaction.get_vertices(query.limit(50));
```

Is it possible to support that api?

Thanks for that great library.
I've been going over the code, and I'm not sure if there is currently a method to select a Vertex that has a specific property.

For instance, if I have a collection of vertices with a `name` property, how would I select all the vertices with the `name` property and a value of `'Joyce'`.
When using `get_vertex_properties` it would be nice to know which vertex had the property and which ones did not. When using `get_vertex_properties` with a `SpecificVertexQuery::new` query, if a node does not have the property there is no way to tell. If a query had 10 node ids and only one of them had the property then an only one result is returned and it's not clear what node that result belongs to.  

Is there a way around this without looping over each node and using `SpecificVertexQuery::single` queries? 

thanks! 
Hello,

Is there a way to walk the graph given a source node without explicitly chaining together node and edge properties as a series of "outbound" and "inbound"? 

Maybe depth-first search with an edge type filter?

Thanks! 