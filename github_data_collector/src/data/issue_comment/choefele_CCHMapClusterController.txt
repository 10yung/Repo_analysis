When I click on a particular cluster then not getting a exact annotation count that I showed over label In swift 3.I am showing this label over image in swift 3.
 Can anybody help me 
I am using `MKMapTypeHybridFlyover` and am getting my annotations and clusters removed at randomly times leaving a blank map. I can reproduce this using the demo project. 

Demo video: 

https://youtu.be/y0JfE8FiuXE

This seems to happen when the map is skewed.

Any ideas on what could be going on?
Good afternoon, I'm currently building an app for my family and I'm concerned about a bug when zooming the map.

As you can see in this video: https://www.youtube.com/watch?v=vjbB0sEtHSQ, on the first second, I'm zooming the map and one photo - or annotation - is removed from the cluster and after zooming again, the photo is back into the cluster. We can see this happening as well when zooming out on second 13, the stack contains 18 pictures, and after zooming out, one picture is removed from the stack.

It makes it look like the clusters are completely random, is it something I missed? 

Thank you,
Maxence Henneron.

…of map view to calculate length

This caused the cell size sometimes to be 0 due to a race condition when converting coordinates from the map view to its super view. When that happened, all annotations become invisible. This constantly happens when rotating, especially in flyover mode.
Instead we are now calculating it against its own view, which always returns consistent and valid results.

As discussed in #119.
I saw that `self.zoomLevel` is implemented via `CCHMapClusterControllerZoomLevelForRegion`, so I used that.
Please advise as to what I need to change or improve upon. Thank you! :)

Sometimes when changing the map view's center region, the update annotation sequence triggers (namely, in CCHMapClusterController's `mapView:regionDidChangeAnimated:`). This is due to the longitude delta check. Since calculating the zoom level is already included in this project, wouldn't it be better to use that instead? I have a fork which does just that, and I set the epsilon/difference threshold to a value to something small enough, but not too small to trigger a 'zoom change' when changing the region center.

Hello guys,

I already used your lib in Apple map and it worked great!
But the apple map has some a little bit issue (for my country the apple map still not support the detail map in satteline mode) so i need to change to google map, i dont know whether i can use your lib in google map? Because i searched about the clusteringg in google map and i dont see any lib working fine as yours. If your lib also intergrate in google map, i think that will be very good. Looking forward your reply. Thanks for great library!

Hello !
Thanks for the nice code, I checked several other repos on github and found this implementation most mature and well written.

But still there are several things to improve, and I tried my best to provide feature to prevent annotations overlapping which is very annoying in my own project. I've extended the iOS Example application to demonstrate my changes and provided some (minimal) documentation.

Also, I fixed bug when annotation coordinates were not set to the new values in CCHMapClusterOperation.m line 167
`if (annotationSetsAreUniqueLocations) {
                            annotationForCell.coordinate = coordinate;
                        }`

there is no `else` clause and sometimes annotations were placed in the wrong grid cell.

I tried to make my code fast, so some good old C arrays was used. Currently second-pass algorithm is quite simple: same block is called for each grid cell from top to bottom, left to right. On each step checks are made to the upper cell and to the left cell and if there are annotation overlapping, then annotation in the current cell get moved right and/or bottom to prevent overlapping.

Better way to do it is to merge overlapping annotations into bigger ones. My design allows several second-pass algorithms: just set block property `fixAnnotationPosition` to your own realization. 

Added updateAnnotations method to header file. In some cases you have to manually update the cluster annotations. I don't know if this is the best solution but in my app works perfectly.

If you set up the annotations for your map view controller in viewDidLoad - as suggested in the README then you get a superfluous cluster annotation if presenting the map view controller in Landscape. Note the big "59" cluster on top of ÖSTERREICH.

![ios simulator screen shot 23 apr 2015 18 28 24](https://cloud.githubusercontent.com/assets/333270/7301997/8e986670-e9e6-11e4-838b-cf4d9ca3e009.png)

If you move it to `viewWillAppear` or later, then this extra cluster does not appear:

![ios simulator screen shot 23 apr 2015 18 30 18](https://cloud.githubusercontent.com/assets/333270/7302044/da2ffbde-e9e6-11e4-9347-0612ba1d53b3.png)

I believe that the reason for the misbehavior comes from `MKMapView` having an incorrect position during viewDidLoad. I added logging for the visible map rect in the -init of `CCHMapClusterOperation`.

_Portrait, viewDidLoad:_

```
Visible map rect = {{141014758.6, 88274850.3}, {6111232.3, 10743653.0}}
Visible map rect = {{141014758.6, 88274850.3}, {6111232.3, 10743653.0}}
```

_Portrait, viewWillAppear:_

```
Visible map rect = {{141014758.6, 88274850.3}, {6111232.3, 10743653.0}}
```

_Landscape, viewDidLoad:_

```
Visible map rect = {{40502319.6, 79459175.3}, {127778493.3, 69020511.0}}
Visible map rect = {{141014758.7, 91996163.0}, {6111232.1, 3301027.8}}
```

_Landscape, viewWillAppear:_

```
Visible map rect = {{141014758.7, 91996163.0}, {6111232.1, 3301027.8}}
```

The second line in the Landscape-viewDidLoad log comes from this call stack:

![screen shot 2015-04-23 at 18 40 37](https://cloud.githubusercontent.com/assets/333270/7302256/57696e86-e9e8-11e4-9363-68bec4ef9753.png)

As you can see there is a timer delay that fixes the visible map rect and calling the `mapView:regionDidChange:animated:` thus triggering a reclustering.

Putting the setup code into viewWillAppear resolves the issue, but the question for this bug report is, whether the initial clustering shouldn't be delayed until after the first setting of the visible region. The current recommendation and code leads to a superfluous clustering operation.

The second question is, why the second clustering operation does not correct the superfluous cluster annotations that the first one created.

This issue observed on an app with deployment target 8.1, running on 8.3, using a MKMapView from storyboard and size classes throughout.
