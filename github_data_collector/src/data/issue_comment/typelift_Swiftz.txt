What's in this pull request?
============================

Provided support for xcode 11 and swift 5 and updated 

Why merge this pull request?
============================

Updated the dependency like swiftcheck for supporting xcode 11 and swift 5 

@joshvera @ryanbooker @josephlord @dtchepak  Please review and merge 
Version
========
Tag 0.6.3

Reproducible also on 
```
commit 556236ad2d7c7420eea4301cf69b09575905a508 (HEAD -> master, origin/master, origin/HEAD)
Merge: 5afb898 4915ce0
Author: Robert Widmann <devteam.codafi@gmail.com>
Date:   Sun Apr 22 09:15:25 2018 -0400
```

Environment
===========

macOS High Sierra, 10.13.4 (17E202)

Description
============

Swiftz-Swfit.h header file __is not__ produced when the framework is archived

Steps To Reproduce
===================

carthage build --archive

Expected Result
================

Swiftz-Swfit.h header file __is produced__ when the framework is archived

Actual Result
==============

Swiftz-Swfit.h header file __is not__ produced when the framework is archived

Additional information
======================

The file is relatively important since carthage uses it to determine whether a binary artifact is still valid in the build `Carthage/Build` folder when using `--cache-builds` 

See https://github.com/Carthage/Carthage/issues/2619


The Cartesian Monoidal Functor "Cartesian" was in Monoidal.swift.  This
commit just renames the file to match the protocol it contains.

What's in this pull request?
============================

The commit merely changes the filename Monoidal.swift to Cartesian.swift to match the protocol it contains.

Why merge this pull request?
============================

It will be more obvious to folks which file to open when looking for the Cartesian protocol.

What's worth discussing about this pull request?
================================================

Probably not much.

What downsides are there to merging this pull request?
======================================================

None.


Description
============

It seems Swiftz specs are not available in main repo of Cocoapods

```
pod search Swiftz
-> Swiftz (0.5.0)
   Swiftz is a Swift library for functional programming.
   pod 'Swiftz', '~> 0.5.0'
   - Homepage: https://github.com/typelift/Swiftz
   - Source:   https://github.com/typelift/Swiftz.git
   - Versions: 0.5.0, 0.4.0, 0.3.1, 0.3.0, 0.2.4, 0.2.2 [master repo]
```

I see that Cocoapods is not mentionned in Readme as setup, so I am just wondering if it is supported or not

Expected Result
================

Upload missing versions to [Cocoapods trunk](https://guides.cocoapods.org/making/getting-setup-with-trunk.html#deploying-a-library)


It would be fantastic to have improved documentation, probably some more introductory information for the non-functionalist, and possibly a Playground. (Sound familiar?)

Approaching Swiftz from a purely Swift (/ Objective C) background, a lot of this will seem pretty incomprehensible. Approaching it from a Scala background makes it much easier, but there are significant syntax differences and features that we just don't see (much) in Scala. For instance, I still have no idea what a Lens is (I really ought to look into that...)

Because we don't have transformers it doesn't seem like there would be much use for it, but it worked so well with SwiftCheck I think it would be a nice thing to just have them lying around.  What do you think?

Because exceptions in Swift 2.0.

My bad.  Should have been using `~=` from the get-go.

Swift has an... interesting approach to numeric protocols.  It's a real helter-skelter mix of some that add operations, make things integer-y, make things floating-point-y, signal access times for collections-y, etc.  What it doesn't do is actually define a good hierarchy of the values their numeric structures can represent.  I think we can fix that.

The NInt et al machinery can be collapsed and reappropriated for arbitrary precision arithmetic (somehow.  GMP, OpenSSL, CommonCrypto?).  We can define proper numeric type classes and conformances for swift types and get real numeric constraints going for once.

Radar submitted.
Radar: 17377676

---

With https://github.com/maxpow4h/swiftz/blob/54870ca7b81a2595b3707646cba4d83a71bb6667/swiftz/TypeEquality.swift and https://github.com/maxpow4h/swiftz/blob/54870ca7b81a2595b3707646cba4d83a71bb6667/swiftz/List.swift#L47-L56 you can show `Int =:= String` and define the function:

``` swift
func apply(a: Int) -> String {
  return a
}
```

that correctly type checks, showing unsoundness.

---

Commentary:
It appears swift isn't fully obeying the type constraints provided in where clauses.
