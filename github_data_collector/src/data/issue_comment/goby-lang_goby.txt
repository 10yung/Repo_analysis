This closes https://github.com/goby-lang/goby/issues/820
Your operating system: gobylang/goby:v0.1.10
How did you install Goby: Docker
Goby version: v0.1.10
The value of $GOBY_ROOT: /go/src/github.com/goby-lang/goby

Running all tests is slow and makes the failures on the tests I'm working on hard to see. Like so,

```bash
‚ùØ make test
go test -ldflags "-s -w" ./...
ok      github.com/goby-lang/goby       1.697s
?       github.com/goby-lang/goby/cmd/binder    [no test files]
ok      github.com/goby-lang/goby/compiler      (cached)
?       github.com/goby-lang/goby/compiler/ast  [no test files]
?       github.com/goby-lang/goby/compiler/bytecode     [no test files]
ok      github.com/goby-lang/goby/compiler/lexer        (cached)
ok      github.com/goby-lang/goby/compiler/parser       (cached)
?       github.com/goby-lang/goby/compiler/parser/arguments     [no test files]
?       github.com/goby-lang/goby/compiler/parser/errors        [no test files]
?       github.com/goby-lang/goby/compiler/parser/events        [no test files]
?       github.com/goby-lang/goby/compiler/parser/precedence    [no test files]
?       github.com/goby-lang/goby/compiler/parser/states        [no test files]
ok      github.com/goby-lang/goby/compiler/token        (cached)
?       github.com/goby-lang/goby/igb   [no test files]
dial tcp [::1]:5432: connect: connection refused
dial tcp [::1]:5432: connect: connection refused
--- FAIL: TestDBPingMethod (0.01s)
    db_test.go:55: At test case 0: object has wrong value. expect=true, got=false
dial tcp [::1]:5432: connect: connection refused
sql: database is closed
--- FAIL: TestDBCloseMethod (0.01s)
    db_test.go:80: At test case 0: object has wrong value. expect=true, got=false
--- FAIL: TestDBRunMethod (0.00s)
    db_test.go:103: At test case 0: InternalError: dial tcp [::1]:5432: connect: connection refused
--- FAIL: TestDBExecMethod (0.00s)
    db_test.go:21: dial tcp [::1]:5432: connect: connection refused
FAIL
FAIL    github.com/goby-lang/goby/native/db     0.049s
ok      github.com/goby-lang/goby/native/plugin (cached)
?       github.com/goby-lang/goby/native/result [no test files]
ok      github.com/goby-lang/goby/native/ripper (cached)
?       github.com/goby-lang/goby/test_fixtures/import_test/plugin      [no test files]
?       github.com/goby-lang/goby/test_fixtures/import_test/plugin/lib  [no test files]
?       github.com/goby-lang/goby/test_fixtures/import_test/struct      [no test files]
ok      github.com/goby-lang/goby/vm    4.688s
?       github.com/goby-lang/goby/vm/classes    [no test files]
?       github.com/goby-lang/goby/vm/errors     [no test files]
FAIL
make: *** [test] Error 1
```

It would be great if I could run a single test file, and even better if I could run a single test in a single test file and have that documented in the readme.
We're using `math/rand`, because when we're later implementing `srand()`, we need it to support seeding, which `crypto/rand` does not provide.

Fixes https://github.com/goby-lang/goby/issues/810
Your operating system: gobylang/goby:v0.1.10
How did you install Goby: Docker
Goby version: v0.1.10
The value of $GOBY_ROOT: /go/src/github.com/goby-lang/goby
Error messages: `UndefinedMethodError: Undefined Method 'rand' for <Instance of: Object>`

There doesn't seem to be a way to generate random numbers. 
This is just my idea that the tadpole operator `=~` looks cryptic and is a legacy from Perl, so changing this to `match?` is better for clarification. 

Rubocop style guides also suggests that `=~` is not (partially) recommended: https://github.com/rubocop-hq/ruby-style-guide#no-perl-regexp-last-matchers

If unnecessary, just discard the PR.
Thank you, 
This is just for my interest regarding https://github.com/goby-lang/goby/issues/342 .

This apparently works but is still not the real Enumerator class. Currently, only `Array#to_enum`, `Hash#to_enum`, `Enumerator#inspect` is available. (`:each` is a fakeüòÜ)

```ruby
¬ª a = [1, 2, 3].to_enum
#¬ª <Enumerator: [1, 2, 3]:each>
¬ª a.class
#¬ª Enumerator
¬ª a.inspect
#¬ª <Enumerator: [1, 2, 3]:each>

¬ª h = {k1: 1, k2:2}.to_enum
#¬ª <Enumerator: { k1: 1, k2: 2 }:each>
¬ª h.class
#¬ª Enumerator
¬ª h.inspect
#¬ª <Enumerator: { k1: 1, k2: 2 }:each>
```
Retry of #792.
I'm trying.

Issue #677 
I listed the following candidates of methods/features to add to Goby:

* string interpolation `#{}`
* formatted print (I guess we don't need to persist to C's `printf` `sprintf` or like that)
* `Object#dup`
* `Object#tap`
* `Object#method`
* `Marshal` class and `dump`, `load`
* `Kernel#autoload` and `Kernel#autoload?`
* safe navigation operator `&.`
* a short hand `&:` for calling one method like `[1, 2, 3].map(&:to_s)`
* (changing `Object#send` to `Object#__send__`
* (freeze strings and integers as a default)

Anything else? @st0012 
make http as top module
and separate into server and client.

