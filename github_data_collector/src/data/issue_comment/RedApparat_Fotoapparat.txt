#### What are you trying to achieve or the steps to reproduce?

Hello,

I'm using the library version 2.7.0 and i have got really good results, but there is one problem that I detected and I don't know if it's a bug or I'm doing something wrong.

I'm using Kotlin and creating a Camera Configuration to set all the needed configurations I use for the camera. I was setting the pictureResolution to be 1280x720 (which is the one I need) and if it's not available for the device, to use the highest resolution that it has with firstAvailable() has shown below.



```kotlin
pictureResolution = firstAvailable(
                        {Resolution(1280,720)},
                        highestResolution()
                ),
```

I though that whith this, the library was going to test if the first resolution was available and if not it was going to try with the highest resolutionm but when the device don't have a 1280x720 resolution it gives an error and don't try to go to the second option of the highestResolution().

I tried to get a list of supported Resolutions and solve it before creating the cameraConfiguration, but I haven't managed to get the supported resolutions out of the library.

Is there a bug with firstAvailable or I'm misunderstanding something? Is there a way to solve it that's not starting the camera to get the capabilities and then updating it?

#### How did you initialize FA?

```kotlin
val cameraConfiguration = CameraConfiguration(
                pictureResolution = firstAvailable(
                        {Resolution(1280,720)},
                        highestResolution()
                ),
                previewResolution = firstAvailable(
                        wideRatio({ Resolution(1280,720) }),
                        wideRatio(highestResolution())
                ),
                previewFpsRange = highestFps(),
                focusMode = firstAvailable(
                        continuousFocusPicture(),
                        autoFocus(),
                        fixed()
                ),
                jpegQuality = manualJpegQuality(90), 
                frameProcessor = { frame ->  processFrame(frame)}
        )

        camera = Fotoapparat(
                context = this,
                view = cameraView!!,
                scaleType = ScaleType.CenterCrop,
                lensPosition = front(),
                cameraConfiguration = cameraConfiguration,
                cameraErrorCallback = { error -> PrintError(error)}
        )
```


#### What was the result you received?
This is the error I'm receiving

 io.fotoapparat.exception.camera.InvalidConfigurationException: Resolution configuration selector selected value Resolution(width=1280, height=720). However it's not in the supported set of values. Supported parameters: [Resolution(width=800, height=600), Resolution(width=640, height=480), Resolution(width=320, height=240), Resolution(width=176, height=144)]


#### Context:

* *FA version*: 2.7.0
* *Devices/APIs affected*: Galaxy Tab A
I have user your `ActivityJava` code example to change a picture resolution from `highestResolution()` to `lowestResolution()` without any effect:

    private CameraConfiguration cameraConfiguration = CameraConfiguration
            .builder()
            .photoResolution(standardRatio(
    //                highestResolution()
                    lowestResolution()
    //                new Function1<Iterable<Resolution>, Resolution>() {
    //                    @Override
    //                    public Resolution invoke(Iterable<Resolution> resolutions) {
    //                        return new Resolution(320, 240);
    //                    }
    //                }
            ))
            .focusMode(firstAvailable(
                    continuousFocusPicture(),
                    autoFocus(),
                    fixed()
            ))
            .flash(firstAvailable(
                    autoRedEye(),
                    autoFlash(),
                    torch(),
                    off()
            ))
            .previewFpsRange(highestFps())
            .sensorSensitivity(highestSensorSensitivity())
            .frameProcessor(new SampleFrameProcessor())
            .build();
`new Resolution(320, 240)` does change nothing too. My device is LG Stylus 3 (Android 7.0). What is a reason?
Please change this:

    .focusMode(SelectorsKt.firstAvailable(  // (optional) use the first focus mode which is supported by device
       FocusModeSelectorsKt. continuousFocusPicture(),
       FocusModeSelectorsKt.autoFocus(),        // in case if continuous focus is not available on device, auto focus will be used
       FocusModeSelectorsKt.fixed()             // if even auto focus is not available - fixed focus mode will be used
    ))

to this 

    .focusMode(SelectorsKt.firstAvailable(  // (optional) use the first focus mode which is supported by device         
       FocusModeSelectorsKt.fixed(), // if even auto focus is not available - fixed focus mode will be used            
       FocusModeSelectorsKt.autoFocus(), // in case if continuous focus is not available on device, auto focus will be used
       FocusModeSelectorsKt.continuousFocusPicture(),                
    ))

Library uses last parameter first.





**Problem**

Due to Scoped Storage, we canâ€™t write the image directly to shared storage locations via direct file path. This approach is deprecated in android Q and will be enforced to stop using in 2020. 

From [Google's Scoped Storage best practices](https://android-developers.googleblog.com/2019/04/android-q-scoped-storage-best-practices.html):

> **Storing shared media files**. For apps that handle files that users expect to be sharable with other apps (such as photos) and be retained after the app has been uninstalled, use the MediaStore API. There are specific collections for common media files: Audio, Video, and Images. For other file types, you can store them in the new Downloads collection. To access files from the Downloads collection, apps must use the system picker.

> **Storing app-internal files**. If your app is designed to handle files not meant to be shared with other apps, store them in your package-specific directories. This helps keep files organized and limit file clutter as the OS will manage cleanup when the app is uninstalled. Calls to Context.getExternalFilesDir() will continue to work. 

We can still use `saveToFile`, making sure the constructed file path is within the scoped storage of the app. As stated before,  we just have to make sure we use `Context.getExternalFilesDir()` to save in scoped storage.

However, there's no way to save in the shared media collection locations, since that has to be done via the usage of `MediaStore`.

**Possible solution**

As an alternative to the existing `PhotoResult#saveToFile`, a new `PhotoResult#saveToImagesMediaStore` (open to other names / function signatures) could be exposed.

**TODO**

- Write rotation Exif metadata (the current ExifWriter uses a file as input) 
#### What are you trying to achieve or the steps to reproduce?

I am trying to mock Fotoapparat with Mockito. Since Fotoapparat is final mockito has issues mocking this class in android instrumentation tests.
There are some solutions but they are tricky to setup + have drawbacks. For example mocking of final classes is only supported from Android P or greater).

#### What did you expect?
It would be great to make fotoapparat open. (or let it implement an interface)

Would you accept a PR with a (non-breaking) change like this ? 
```
io.fotoapparat.coroutines.AwaitBroadcastChannel: can't find referenced method 'boolean cancel()' in program class kotlinx.coroutines.CompletableDeferred
```

The issue is `AwaitBroadcastChannel`

https://github.com/RedApparat/Fotoapparat/blob/09a551635c6da6569911de0ba94ec40b5339781a/fotoapparat/src/main/java/io/fotoapparat/coroutines/AwaitBroadcastChannel.kt#L34-L36

I would guess that copying the deprecation warning and providing the correct `cancel(..)` that accepts a `CancellationException` would fix the issue? Or maybe just specifying deprecation level?

See [`ConflatedBroadcastChannel`](https://github.com/Kotlin/kotlinx.coroutines/blob/9d1146fdc91177320fb22c455086e14da0be008d/kotlinx-coroutines-core/common/src/channels/ConflatedBroadcastChannel.kt#L204-L220)
In my app i want show preview to user after taking picture, but i can't because restartPreview was called automatically. So i made ability to 'take picture' and 'restart preview' separately from each other
Pinch to zoom is good ability, and implement gesture recognizers inside the FocusView much easier and more logical than outside.
With it example app looks cleaner and more convenient to use.
I've tested my app on the Moto G7 Power and the Galaxy S9, and in both on them the setZoom method lags. The zoom starts to appear later and slowly. I'm using java, don't know if that can make it do that.

This is how I create the view: 

private Fotoapparat createFotoapparat() {
        return Fotoapparat
                .with(this)
                .into(cameraView)
                .focusView(focusView)
                .previewScaleType(ScaleType.CenterCrop)
                .photoResolution(standardRatio(
                        highestResolution()
                ))
                .previewResolution(highestResolution())
                .previewFpsRange(highestFps())
                .lensPosition(LensPositionSelectorsKt.back())
                .focusMode(firstAvailable(
                        continuousFocusPicture(),
                        autoFocus(),
                        fixed()
                ))
                .flash(firstAvailable(
                        autoRedEye(),
                        autoFlash(),
                        torch(),
                        off()
                ))
                .previewFpsRange(highestFps())
                .build();
    }
I'm on the 2.7.0 version of the library
Is it possible to show the visual feedback circle during continuous focus? This circle is visible only when user touches the display but not during continuous focus.