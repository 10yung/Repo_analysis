Lets you set a custom cursor on desktop at runtime

- MacOS
- Windows
- Linux (in Progress)

On Windows you need to modify you win32_window.cc

```
LRESULT
Win32Window::MessageHandler(HWND hwnd, UINT const message, WPARAM const wparam,
                            LPARAM const lparam) noexcept
{
  auto window =
      reinterpret_cast<Win32Window *>(GetWindowLongPtr(hwnd, GWLP_USERDATA));

  if (window == nullptr)
  {
    return 0;
  }

  switch (message)
  {
  case WM_SETCURSOR:
    return TRUE;
```

Add this to the top of the switch statement:

```
 case WM_SETCURSOR:
    return TRUE;
```
I created the [window_utils](https://github.com/rive-app/window-utils) plugin and there is an issue when updating the windows cursor. I can change the cursor but it is instantly reset by the application but you can see the correct cursor flash for a second. MacOS works fine. Other calls on the plugin work great on windows too.

https://github.com/rive-app/window-utils/issues/8

I am calling the correct code in C++ but I was curious if I was missing something about the runner in win32_window.cc and if there is an explicit cursor that always override the default one.

```
WNDCLASS Win32Window::RegisterWindowClass()
{
  WNDCLASS window_class{};
  window_class.hCursor = LoadCursor(nullptr, IDC_ARROW);
```

When the window is first created it does set a cursor.

At runtime you should be able to change it though.

Anywhere I should be looking?


**Describe the bug**
My desktop app is using the file_chooser plugin. On a Mac desktop, when I bring up a native dialog via that plugin (eg. showOpenPanel, showSavePanel), my expectation is that until I closed that dialog, I would not be able to interact with the rest of the app. What I'm seeing currently is that I am able to click back into the main app window and interact freely, including both mouse and keyboard events, while the file chooser dialog is still open.

**Doctor Output**
```
[✓] Flutter (Channel unknown, v1.13.3-pre.9, on Mac OS X 10.14.6 18G2022, locale en-US)
[✗] Android toolchain - develop for Android devices
    ✗ Unable to locate Android SDK.
      Install Android Studio from: https://developer.android.com/studio/index.html
      On first launch it will assist you in installing the Android SDK components.
      (or visit https://flutter.dev/setup/#android-setup for detailed instructions).
      If the Android SDK has been installed to a custom location, set ANDROID_HOME to that location.
      You may also want to add it to your PATH environment variable.

[✓] Xcode - develop for iOS and macOS (Xcode 11.1)
[!] Android Studio (not installed)
[✓] IntelliJ IDEA Community Edition (version 2019.1.2)
[✓] Connected device (1 available)
```

<!--
*** Important Note ***
Development of Flutter for Desktop is now primarily happening in the Flutter repository itself. If you have a bug or feature request related to desktop that's about the Flutter framework, the `flutter` command-line tool, or the desktop support in the Flutter engine, please file your bug in the Flutter issue tracker: https://github.com/flutter/flutter/issues

Please file bugs here only for things specific to this repository, such as:
* Proposed changes to instructions in the READMEs here.
* Requests specific to the plugins here.

If you're not sure whether the report belongs here or in Flutter itself, you can file it here here, but we may close the issue and ask you to file it in Flutter if it turns out not to be specific to this project.

***Important Note #2***
For general discussion and questions, please use the project mailing list rather than filing an issue:
https://groups.google.com/forum/#!forum/flutter-desktop-embedding-dev
-->

**Describe Request**
MacOS and Windows have app icon artifacts in this repo already so it's easy to figure out how to customise the app icon for those desktops, but it took me quite some searching to figure out how to do it for linux. Consider adding some doco eg. refer to https://www.maketecheasier.com/create-desktop-file-linux/  etc. and provide an example .desktop file with instructions to say copy to ~/.local/share/applications. Better still is if an automated way could be provided to set all this up via an enhancement to Makefile.
This is related to the menu plugin.

Needed not so obvious functionality:
- [ ] Position of the icon
- [ ] Setting icon as monochromatic template image is needed on macOS so it can support dark mode
- [ ] Allow text instead of the icon or in addition to the icon. I don't know if this is possible on Linux or Windows but macOS allows this.

@stuartmorgan should I create this issue in the flutter repo or is this the best place for it?
**Describe the bug**
After the upgrade of the Visual Studio to version 16.3.2, I have encountered a bug. I have built the application via `flutter build windows` and now when I try to run it it gives me an error modal that sais that the `VCRUNTIME140_1.dll` is missing. I am not able to run the app on another computer than the one that I develop on. Is there any possibility to fix this issue?


Since the change to turn off exceptions in the plugins and runners (to simplify using /clr), the build shows warnings like:
```
[ +732 ms] c:\program files (x86)\microsoft visual studio\2017\community\vc\tools\msvc\14.16.27023\include\xlocale(319): warning C4530: C++ exception handler used, but unwind semantics are not enabled. Specify /EHsc [C:\projects\flutter-desktop-embedding\plugins\example_plugin\windows\example_plugin.vcxproj]
```

We should figure out what is using exception handlers, and remove them (or if we can't for some reason, re-evaluate that change).
Currently, adding plugins to Windows projects is very manual, and requires some VS knowledge (and documentation that doesn't exist yet, but which I'll add shortly).

I wanted to capture some of the things I've been thinking about that we could do as short-to-medium term plugin improvements, while we decide what our actual solution for plugin management on Windows is (potentially using an existing dependency management system):
- Auto-generate FlutterPlugins.props in the Flutter tool (the same way we generate the registrant on platforms with plugin tooling support).
- If we do that we could also auto-generate header include paths into that file for the plugin headers, and remove the need to have a header-copy step from the plugin builds.
- Less straightforward, but probably doable: generate Runner.sln itself, with all the plugin project inclusion and dependencies configured.

If we did all of those, adding most plugins to a project on Windows wouldn't have any manual steps (although there are cases we don't have a solution for yet, like plugins that themselves have DLL dependencies, which need to be linked into the application and copied to the right place, so it's definitely not a full solution). Rewriting the sln would break the usual Flutter behavior of letting people modify the native build though, so I think we'd need to instead try to modify it in a way that preserved any other changes that people had made, which could be tricky (but since it's a pretty straightforward file, maybe not that bad).

The counter-argument is that all this would be potentially wasted work that would be better spent on https://github.com/flutter/flutter/issues/32719.
Hello everyone! I was trying to test my Windows build on some devices.I've transferred windows file in build file to computers and tried to run my app.On some devices the app runs,I mean I can see the window title and borders but inside is just black screen.I couldn't figure out what was happening so I've installed flutter to one of them and this is the output I get when I run the app.I don't know If It's related but flutter asked me to install Windows SDK 8.1 to run the app

```
Launching lib\main.dart on Windows in debug mode...
Building Windows application...
Syncing files to device Windows...
flutter: ══╡ EXCEPTION CAUGHT BY RENDERING LIBRARY ╞═════════════════════════════════════════════════════════

flutter: The following assertion was thrown during performLayout():

flutter: 'package:flutter/src/rendering/view.dart': Failed assertion: line 161 pos 12: '_size.isFinite': is

flutter: not true.

flutter:

flutter: Either the assertion indicates an error in the framework itself, or we should provide substantially

flutter: more information in this error message to help you determine and fix the underlying cause.

flutter: In either case, please report this assertion by filing a bug on GitHub:

flutter:   https://github.com/flutter/flutter/issues/new?template=BUG.md

flutter:

flutter: When the exception was thrown, this was the stack:

flutter: #2      RenderView.performLayout (package:flutter/src/rendering/view.dart:161:12)

flutter: #3      RenderObject._layoutWithoutResize (package:flutter/src/rendering/object.dart:1578:7)

flutter: #4      PipelineOwner.flushLayout (package:flutter/src/rendering/object.dart:844:18)

flutter: #5      RendererBinding.drawFrame (package:flutter/src/rendering/binding.dart:340:19)

flutter: #6      WidgetsBinding.drawFrame (package:flutter/src/widgets/binding.dart:776:13)

flutter: #7      RendererBinding._handlePersistentFrameCallback (package:flutter/src/rendering/binding.dart:279:5)

flutter: #8      SchedulerBinding._invokeFrameCallback (package:flutter/src/scheduler/binding.dart:1040:15)

flutter: #9      SchedulerBinding.handleDrawFrame (package:flutter/src/scheduler/binding.dart:982:9)

flutter: #10     SchedulerBinding.scheduleWarmUpFrame.<anonymous closure> (package:flutter/src/scheduler/binding.dart:791:7)

flutter: #19     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:382:19)

flutter: #20     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:416:5)

flutter: #21     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:172:12)

flutter: (elided 10 frames from class _AssertionError, package dart:async, and package dart:async-patch)

flutter:

flutter: The following RenderObject was being processed when the exception was fired: RenderView#4fbdc NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE:

flutter:   debug mode enabled - windows

flutter:   window size: Size(784.0, 561.0) (in physical pixels)

flutter:   device pixel ratio: 0.0 (physical pixels per logical pixel)

flutter:   configuration: Size(Infinity, Infinity) at 0.0x (in logical pixels)

flutter: This RenderObject had the following descendants (showing up to depth 5):

flutter:     child: RenderSemanticsAnnotations#bd593 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE

flutter:       child: RenderPointerListener#605f4 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE

flutter:         child: RenderAbsorbPointer#2cc6c NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE

flutter:           child: RenderSemanticsAnnotations#cf142 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE

flutter:             child: _RenderTheatre#bfeb1 NEEDS-LAYOUT NEEDS-PAINT NEEDS-COMPOSITING-BITS-UPDATE

flutter: ════════════════════════════════════════════════════════════════════════════════════════════════════
```

And this is the doctor output.
```
C:\Users\ERDEM>flutter doctor -v
[√] Flutter (Channel unknown, v1.10.6-pre.29, on Microsoft Windows [Version 10.0.10240], locale tr-TR)
    • Flutter version 1.10.6-pre.29 at C:\flutter
    • Framework revision 919cc97f6a (3 days ago), 2019-09-20 14:57:05 -0700
    • Engine revision 99092a0436
    • Dart version 2.6.0 (build 2.6.0-dev.1.0 7c1821c4aa)

[X] Android toolchain - develop for Android devices
    X Unable to locate Android SDK.
      Install Android Studio from: https://developer.android.com/studio/index.html
      On first launch it will assist you in installing the Android SDK components.
      (or visit https://flutter.dev/setup/#android-setup for detailed instructions).
      If the Android SDK has been installed to a custom location, set ANDROID_HOME to that location.
      You may also want to add it to your PATH environment variable.


[√] Visual Studio - develop for Windows (Visual Studio Community 2017 15.9.16)
    • Visual Studio at C:\Program Files (x86)\Microsoft Visual Studio\2017\Community
    • Visual Studio Community 2017 version 15.9.28307.858

[!] Android Studio (not installed)
    • Android Studio not found; download from https://developer.android.com/studio/index.html
      (or visit https://flutter.dev/setup/#android-setup for detailed instructions).

[!] VS Code (version 1.38.1)
    • VS Code at C:\Users\ERDEM\AppData\Local\Programs\Microsoft VS Code
    X Flutter extension not installed; install from
      https://marketplace.visualstudio.com/items?itemName=Dart-Code.flutter

[√] Connected device (1 available)
    • Windows • Windows • windows-x64 • Microsoft Windows [Version 10.0.10240]

! Doctor found issues in 3 categories.
```
When running under the VS debugger, I'm getting a console window, but nothing shows up in it:
- No observatory log line, so I can't get the observatory URL to attach to
- No Flutter exceptions (e.g., if I remove the debugDefaultTargetPlatformOverride in main.dart)

@shoryukenn You mentioned that this is one of the scenarios you tested, and my understanding is that the AllocConsole is there specifically to handle this case. Any idea why it's not working for me?