<!-- ❤️ ngrx? Please consider supporting our collective: 👉  [donate](https://opencollective.com/ngrx/donate) -->

<!-- Please search GitHub for a similar issue or PR before submitting a new issue-->

## Minimal reproduction of the bug/regression with instructions:

Here is a jasmine test demonstrating the inconsistency. Run this, where `backingStore` is just a `Store` object.

```ts
it("gets consistent values when subscribing", () => {
  backingStore.addReducer("testKey", (state: any, action: any) => ({
    ...state,
    counter: action.counter,
  }));

  function setAndGet(counter: number) {
    backingStore.dispatch({ type: "set", counter });
    backingStore.pipe(take(1)).subscribe((state) => {
      expect(state.testKey.counter).toBe(counter);
    });
  }

  setAndGet(1); // <------------------------------------------------ passes

  backingStore.pipe(take(1)).subscribe(() => {
    setAndGet(2); // <---------------------------------------------- passes
  });

  backingStore
    .pipe(
      skip(1),
      take(1),
    )
    .subscribe(() => {
      setAndGet(4); // <--------------------------------------------- fails
    });
  backingStore.dispatch({ type: "set", counter: 3 });
});
```

## Expected behavior:

I expect `setAndGet` to either always pass or always fail. Having the behavior depend on when it is called leads to surprising and hard to find bugs. Personally, I thought it would always pass.

## Versions of NgRx, Angular, Node, affected browser(s) and operating system(s):

NgRx: 8.3.0
Angular: 8.2.4
Node: n/a
browser: n/a

## Other information:

It seems that `dispatch` will trigger reducers synchronously in most cases. But if called within a subscriber that is reacting to a state change, it is queued up to run later.

## I would be willing to submit a PR to fix this issue

[ ] Yes (Assistance is provided if you need help submitting a pull request)
[X] No

I often find myself copying pasting actions before editing the new action name.
if by mistake I forgot to rename the action param I end up with two actions and actions should always be unique. I did this as a workaround to avoid issues:

```
export const actionEnterpriseUpdateApps = createAction(uniqueActionName('Enterprise API', 'update apps tx'), props<IEnterpriseApps>());

export function uniqueActionName(segment, name) {
  return `[${segment.toUpperCase()}] ${name.toLowerCase()} ${_.uniqueId('action_')}`;
}
```
but would be great if ```createAction``` would just append a unique value to the string as no two actions should ever be same when defined.

this will also give an opportunisticway to  standardize the name of action, as in lower case and upper case etc.

Thanks,

Sean.
## PR Checklist

Please check if your PR fulfills the following requirements:

- [x] The commit message follows our guidelines: https://github.com/ngrx/platform/blob/master/CONTRIBUTING.md#commit
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Documentation has been added / updated (for bug fixes / features)

## PR Type

What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->

```
[ ] Bugfix
[ ] Feature
[ ] Code style update (formatting, local variables)
[x] Refactoring (no functional changes, no api changes)
[ ] Build related changes
[ ] CI related changes
[ ] Documentation content changes
[ ] Other... Please describe:
```

## What is the current behavior?

<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->

Closes #

## What is the new behavior?

## Does this PR introduce a breaking change?

```
[ ] Yes
[x] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->

## Other information

## PR Checklist

Please check if your PR fulfills the following requirements:

- [X] The commit message follows our guidelines: https://github.com/ngrx/platform/blob/master/CONTRIBUTING.md#commit
- [ ] Tests for the changes have been added (for bug fixes / features)
- [ ] Documentation has been added / updated (for bug fixes / features)

## What is the current/new behavior?

Closes #2317

## Does this PR introduce a breaking change?

Kind-of. See https://github.com/ngrx/platform/issues/2317#issuecomment-574485374.
Hello,
I would need to pass a dynamic configuration to `EntityDataModule.forRoot`.

Instead of being forced to declared `entityMetadata` and `pluralNames` statically I need to calculate them from a common, and statically declared, object.
Something like:

```
export const moduleEntityMap: ModuleEntityMap[] = [
    {
        httpContext: 'lookup',
        entities: {
            AreaBisogno: { plural: 'AreeBisogno', metadata: {} },
            DestinatarioTariffa: { plural: 'DestinatariTariffe', metadata: {} },
            [...]
        },
    },
    {
        httpContext: 'admin-sgq',
        entities: {
            Tariffe: { plural: 'Tariffe', metadata: {} },
            Nodo: { plural: 'Nodi', metadata: {} },
            [...]
        },
    },
];
```

From this I can calculate the `EntityDataModuleConfig` instance need by `EntityDataModule.forRoot`.
Nothing fancy, no services or http requests, just trying to aggregate everything in one config object of mine.
I've been trying to achieve this but with no luck.
I cannot use the forRoot pattern because there's no `ModuleWithProviders` counterpart that allows to dynamically declare the imports array.

I've then tried to put my logic into a pure .js file, inject it directly into the index.html file and save the resulting calculated `EntityDataModuleConfig` instance to the `window` object, something like:

```
entityConfig = extractConfig(myConfig);
window.entityConfig  = entityConfig;
```

and then read it from my module:
```
@NgModule({
imports: [EntityDataModule.forRoot(window['entityConfig'])]
...
```
but I always get a null as the forRoot parameter, don't really know why.

Is there a way to pass something that is not statically declared to `EntityDataModule.forRoot`?
That is, can I execute some code before declaring the imports array of my module?

This seems a fairly common requirement but I cannot find a way.

Thanks a lot.

<img width="735" alt="image" src="https://user-images.githubusercontent.com/5166666/72372715-83977600-370f-11ea-9d66-c3c00e51ddf6.png">


Is there a reason why projector function does not have a type-safety for its parameters yet?
This quickly becomes a nightmare when having a lot of unit tests for complicated projectors.
I've looked into internals and found that for some reason the [`MemoizedSelector`](https://github.com/ngrx/platform/blob/2cc88857421b74e01b816f99fe28234bbe77ff1f/modules/store/src/selector.ts#L34) is using a default type [`DefaultProjectorFn`](https://github.com/ngrx/platform/blob/2cc88857421b74e01b816f99fe28234bbe77ff1f/modules/store/src/selector.ts#L17) for its projector which does not know anything about parameter types but only `Result`:

```ts
export function createSelector<State, S1, Result>(
  s1: Selector<State, S1>,
  projector: (s1: S1) => Result
): MemoizedSelector<State, Result>; // <-- third type is a `DefaultProjectorFn`
```

This could be easily fixed by explicitly providing a type of projector function (for every `createSelector` of course):
```ts
export function createSelector<State, S1, Result>(
  s1: Selector<State, S1>,
  projector: (s1: S1) => Result
): MemoizedSelector<State, Result, (s1: S1) => Result>;
```

<img width="692" alt="image" src="https://user-images.githubusercontent.com/5166666/72373608-4af89c00-3711-11ea-8e58-df1fcfcd5188.png">

Maybe this was already discussed? Are there any hidden issues that I'm not aware of? 
Otherwise it's strange why this was not escalated yet.

## If accepted, I would be willing to submit a PR for this feature

[x] Yes
[ ] No

I have all the changes ready to be reviewed - just let me know if the solution here is appropriate.

<!-- ❤️ ngrx? Please consider supporting our collective: 👉  [donate](https://opencollective.com/ngrx/donate) -->

<!-- Please search GitHub for a similar request before submitting a new request -->

## Describe any alternatives/workarounds you're currently using

Manually mock effect instances


## Other information:

TODO (created the issue to not forget about it)


## If accepted, I would be willing to submit a PR for this feature

[x] Yes (Assistance is provided if you need help submitting a pull request)
[ ] No

A WIP can be found at https://github.com/ngrx/platform/compare/master...provide-mock-effects
The docs for @ngrx/store point out that the spread operator only makes shallow copies of objects and direct users to look into using deep copy libraries. 

My understanding is that they only make sense if state contains nested objects or collections of objects. 

From what I've read, deep copies seem to be required only for time travel functionality. Change detection is done via shallow comparison of the state or its slices (ie. root objects), not by comparing each object in the state. 

@ngrx/entity however doesn't specify if deep copies would be required if the entities it manages are nested objects (instead of flat ones). I've tried to go through the code on my mobile, and have only seen the spread operator being used, which would indicate deep copies should probably still be made when modifying entities, but I probably missed some finer details. 

Can you please confirm if my assumptions are correct, and especially if deep copying (e.g. using immer.js) is advisable when using @ngrx/entity (or if it's taken care of/unnecessary)? 

Happy to draft a few sentences for the docs and submit a PR. 

## Other information:

## I would be willing to submit a PR for the docs :heart:

[ x ] Yes (Assistance is provided if you need help submitting a pull request)
[ ] No

<!-- ❤️ ngrx? Please consider supporting our collective: 👉  [donate](https://opencollective.com/ngrx/donate) -->

<!-- Please search GitHub for a similar request before submitting a new request -->

## Info

The [overview page](https://ngrx.io/guide/entity) of @ngrx/entity contains a [broken link](https://redux.js.org/faq/organizingstate#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state) when referring to redux's FAQ when instead should be [this](https://redux.js.org/faq/organizing-state/#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state) link

## I would be willing to submit a PR for the docs :heart:

[X] Yes (Assistance is provided if you need help submitting a pull request)
[ ] No

<!-- ❤️ ngrx? Please consider supporting our collective: 👉  [donate](https://opencollective.com/ngrx/donate) -->

<!-- Please search GitHub for a similar request before submitting a new request -->

I think it would be helpful if the actual navigation event would be passed to a Custom Router State Serializer of the router-store module. The [NavigationStart](https://angular.io/api/router/NavigationStart) event has for example a [navigationTrigger](https://angular.io/api/router/NavigationStart#navigationTrigger) property which is not available in the [RouterStateSnapshot](https://angular.io/api/router/RouterStateSnapshot).

## Describe any alternatives/workarounds you're currently using
I'm currently using my own custom router store. 

## Other information:

## If accepted, I would be willing to submit a PR for this feature

[x] Yes (Assistance is provided if you need help submitting a pull request)
[ ] No
