
Hello, I am encoutering this error on my ASP.NET web application : Could not load file or assembly 'Microsoft.Owin, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040).

I do indeed have a dependency to Microsoft.Owin in my project. But my project is using the latest version (4.0.1.0) and in my web.config my redirects are configured to redirect to it.

`<dependentAssembly>
        <assemblyIdentity name="Microsoft.Owin" publicKeyToken="31bf3856ad364e35" />
        <bindingRedirect oldVersion="0.0.0.0-4.0.1.0" newVersion="4.0.1.0" />
      </dependentAssembly>`

Here is where it get's weird. Locally, it works just fine, I can build it and run it in debug or release mode. The build in my build pipeline on Azure DevOps also works great.

However, the deployed version (deployed in Azure) does not work. The landing page (which is a login page) works fine, but as soon as I try and login, I get a yellow screen wih this message:

`An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below.
--

[WebException: The remote server returned an error: (500) Internal Server Error.]
   System.Net.HttpWebRequest.GetResponse() +1399
   System.ServiceModel.Channels.HttpChannelRequest.WaitForReply(TimeSpan timeout) +55

[ProtocolException: The content type text/html; charset=utf-8 of the response message does not match the content type of the binding (text/xml; charset=utf-8). If using a custom encoder, be sure that the IsContentTypeSupported method is implemented properly. The first 1024 bytes of the response were: '
`<!DOCTYPE html>
<html>
    <head>
        <title>Could not load file or assembly 'Microsoft.Owin, Version=3.0.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The located assembly's manifest definition does not match the assembly reference. (Exception from HRESULT: 0x80131040)</title>
        <meta name="viewport" content="width=device-width" />
        <style>
         body {font-family:"Verdana";font-weight:normal;font-size: .7em;color:black;} 
         p {font-family:"Verdana";font-weight:normal;color:black;margin-top: -5px}
         b {font-family:"Verdana";font-weight:bold;color:black;margin-top: -5px}
         H1 { font-family:"Verdana";font-weight:normal;font-size:18pt;color:red }
         H2 { font-family:"Verdana";font-weight:normal;font-size:14pt;color:maroon }
         pre {font-family:"Consolas","Lucida Console",Monospace;font-size:11pt;margin:0;padding:0.5em;line-height:14pt}
         .marker {font-weight: bold; color: black;text-decoration: none;}
 '.]`
 


I have tried every fix I could find online, had help from multiple people and nothing could fix this. 
Looking forward to get your answers.
Cheers
This is a reminder to check all of the OAuth packages before the next release to make sure their endpoint addresses are current. We know the Facebook one is stale. This doesn't cause any functional problems until a provider makes real breaking changes, but it can cause some warnings about using stale addresses.
Hello,

Sometimes I get this exception when writing the response to the response body stream.
```
Exception info dump:
System.IO.IOException ---> System.Net.HttpListenerException: The I/O operation has been aborted because of either a thread exit or an application request
   at System.Net.HttpResponseStream.EndWrite(IAsyncResult asyncResult)
   at System.IO.Stream.<>c.<BeginEndWriteAsync>b__53_1(Stream stream, IAsyncResult asyncResult)
   at System.Threading.Tasks.TaskFactory`1.FromAsyncTrimPromise`1.Complete(TInstance thisRef, Func`3 endMethod, IAsyncResult asyncResult, Boolean requiresSynchronization)
--- End of stack trace from previous location where exception was thrown ---
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw()
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification(Task task)
   at Microsoft.Owin.Host.HttpListener.RequestProcessing.ExceptionFilterStream.<WriteAsync>d__6.MoveNext()
   --- End of inner exception stack trace ---
   at Microsoft.Owin.Host.HttpListener.RequestProcessing.ExceptionFilterStream.<WriteAsync>d__6.MoveNext()
```

The behaviour is consistent when the client is located in a remote location (e.g., different continent, so assume slower connection) and the response size is a couple of MBs (I was testing on 20MB).
I was not able to repro this behaviour locally, however.

The code looks much like this:
```
Stream originalStream = context.Response.Body;
using (var newBodyStream = new MemoryStream())
{
    context.Response.Body = newBodyStream;

    // Invoking other middlewares
    await this.Next.Invoke(context);

    try
    {
        newBodyStream.CopyTo(originalStream);
    }
    catch (Exception ex)
    {
        // Swallow any exception during sending the response
       ***Getting the exception here***
    }
    finally
    {
        context.Response.Body = originalStream;
    }
}
```

Wireshark shows that the underlying TCP connection stays open (no RST, no FIN), but with no activity. 

Where the issue might be?
Here are some other info that might be useful
1. I'm on OWIN 4.0.0.
1. Does it make sense to update to 4.1.0 to hope the issue will go away? :)
1. Unfortunately it's not an option to "stream" the data directly to the response stream; I have to buffer the data first for other reasons.
1. Since the client does not get any data at all and the connection stays open, how do I actually terminate that connection?

Thanks a lot!
On the first time a user signs in with Apple onto our app, Apple provides the email (or a generated one) and the name of the user. However the Identity created by the OpenIdConnect middleware never exposes the user's name(neither as a claim nor in the ExternalLoginInfo from the Microsoft.AspNet.Identity.Owin package our app uses too). 
Is this an issue in the Microsoft.Owin.Security.OpenIdConnect package?
Please add and support changelog.md or add info into readme.md where to find the release changelog.
I couldn't find any tutorials using Azure AD **v2.0** endpoints to secure AspNet.MVC web APIs. Most of the samples are now in dotnet core using different middlewares.

The below code configuration only works when the application's manifest is set to ```"accessTokenAcceptedVersion": 1,```. Is ```WindowsAzureActiveDirectoryBearerAuthenticationOptions``` configurable to use v2.0 endpoints? 

```
app.UseWindowsAzureActiveDirectoryBearerAuthentication(
    new WindowsAzureActiveDirectoryBearerAuthenticationOptions
    {
        Tenant = ConfigurationManager.AppSettings["ida:Tenant"],
        TokenValidationParameters = new TokenValidationParameters
        {
            ValidAudience = ConfigurationManager.AppSettings["ida:Audience"],
            RoleClaimType = "roles",
            //IssuerValidator = AadIssuerValidator.ValidateAadIssuer
    }
                    
});
```
The `licenseUrl` and `iconUrl` elements in the nuspec are deprecated.

We should move to the [`<license>` element](https://docs.microsoft.com/en-us/nuget/reference/nuspec#license) and [embedded package icons](https://docs.microsoft.com/en-us/nuget/reference/nuspec#icon) before the next release.
Hi All,
hope you are doing great.
It seems referesh token does not expire on in active session time out.
I am using azure b2c sign in policy v1. i explain the issue below.
1. Let suppose when we sign in 10:00 am time the UTC time was 9:00 am.

2. Framework set session cookie expiry time to 9:15 UTC time.

3.After 15 mins user inactive session on user interaction we redirect to sign in page. (as expected,)

4. But if you try to load index page url its let you sign you in and extend the session cookie expiry time which is totally weird!

if you can suggest any thing in this matter would be highly appreciated. ðŸ˜Š

thanks,
kam

MSFT thread page : https://social.msdn.microsoft.com/Forums/en-US/b1606030-f478-40a6-8df9-80c450056538/azure-b2c-userinactive-need-to-signout-after-15-mins?forum=windowsazurewebsitespreview

I have a website that utilizes physical directory browsing. Here's my code:

        public void Configuration(IAppBuilder app)
        {   
                    
            AreaRegistration.RegisterAllAreas();

            HttpConfiguration config = GlobalConfiguration.Configuration;
			//config.MessageHandlers.Add(new CustomHeaderHandler()); // Added this for no caching
			//System.Web.Http.GlobalConfiguration.Configure(Startup.Register);
			config.MessageHandlers.Add(new CancelledTaskBugWorkaroundMessageHandler());
			config.EnsureInitialized();
			//app.UseWebApi(config);


            AutofacConfig.RegisterAutoFac(config);

            RegisterRoutes(RouteTable.Routes);
            GlobalFilters.Filters.Add(new HandleErrorAttribute());                        
           
            app.UseStaticFiles();
            ConfigureStaticFiles(app);
        }

        private void ConfigureStaticFiles(IAppBuilder app)
        {

			

			//app.UseCors(Microsoft.Owin.Cors.CorsOptions.AllowAll);
			//app.Use(typeof(ToolDirectory.Web.Middleware));

			app.UseStageMarker(PipelineStage.MapHandler);
            var wwwroot = BuildFileServerOptions(string.Empty, "wwwroot");
            app.UseFileServer(wwwroot);

			// http://stackoverflow.com/questions/37035175/net-owin-self-host-with-with-no-caching

			var downloads = BuildFileServerOptions("/Downloads", Properties.Settings.Default.DownloadDirectory);
            downloads.StaticFileOptions.ServeUnknownFileTypes = true;
            downloads.EnableDirectoryBrowsing = true;
            app.UseFileServer(downloads);
			


			var attachments = BuildFileServerOptions("/Attachments", Properties.Settings.Default.AttachmentDirectory);
            attachments.StaticFileOptions.ServeUnknownFileTypes = true;
            attachments.EnableDirectoryBrowsing = true;
			app.UseFileServer(attachments);
			
        }

        private static FileServerOptions BuildFileServerOptions(string requestPath, string physicalPath)
        {
            var options = new FileServerOptions
            {
                RequestPath = new PathString(requestPath),
                FileSystem = new PhysicalFileSystem(Path.Combine(AppDomain.CurrentDomain.BaseDirectory, physicalPath)),
                EnableDefaultFiles = true
            };

            return options;
        }


Everything's been working fine, until a user created a folder with an ampersand. The URL in the OWIN-generated directory-browsing page doesn't properly escape the ampersand (although it DOES appear to escape spaces, which is interesting). When a user clicks on the link, it results in an error.

Here's what the URL on the OWIN-generated directory-browsing page might look like:
http://localhost:1234/downloads/Phast/Phast%20&%20Safeti%208.11/

Notice the ampersand is NOT escaped.

The error in IIS is:
System.Web.HttpException: 
A potentially dangerous Request.Path value was detected from the client (&).

My project targets .Net Framework 4.6.1
I'm using Microsoft.Owin Nuget packages with version 4.0.1

I suspect the fix for this will be to use System.Web.HttpUtility.UrlEncode for URLs, rather than ONLY escaping spaces.