Many other linting tools have "recommended" presets that catch errors (rather than opinionated things) like:

- `eslint` has `eslint:recommended`
- `eslint-plugin-react` has `react/recommended`
- `eslint-plugin-jsx-a11y` has `jsx-a11y/recommended`

etc.

It would be nice if textlint had a "recommended" preset with language-agnostic plugins that prevent errors like:

```
textlint-rule-no-dead-link
textlint-rule-spellchecker
```

So that less manual configuration is needed for a error preventing / non-opinionated setup.
Current 
```ts
export declare type TextlintRuleReportHandler = {
    [P in ASTNodeTypes]?: (node: TypeofTxtNode<P>) => void | Promise<any>;
} & {
    [index: string]: (node: any) => void | Promise<any>;
};
/**
 * Textlint rule reporter function
 */
export declare type TextlintRuleReporter<T extends object = {}> = (context: Readonly<TextlintRuleContext>, options?: TextlintRuleOptions<T>) => TextlintRuleReportHandler;
```

It will be more relaxed:

```ts
export declare type TextlintRuleReportHandler = {
    [P in ASTNodeTypes]?: ((node: TypeofTxtNode<P>) => void | Promise<any>) | undefined;
} & {
    [index: string]: (node: any) => void | Promise<any>;
};
/**
 * Textlint rule reporter function
 */
export declare type TextlintRuleReporter<T extends object = {}> = (context: Readonly<TextlintRuleContext>, options?: TextlintRuleOptions<T>) => TextlintRuleReportHandler;
```

- https://twitter.com/ktsn/status/1190207638677512193

Current types disallow to use following pattern:

```ts
const reporter: TextlintRuleModule<RuleOption> = (context, options = DefaultOptions) => {
    const helper = new RuleHelper(context);
    const { Syntax, RuleError, report, getSource, fixer } = context;
    if (!options.dictURL && !options.dictPath && !options.proofdict) {
        // early error
        return {
            [Syntax.Document](node) {
                report(
                    node,
                    new RuleError(`Not found dictionary setting.
Please set dictURL or dictPath to .textlintrc.`)
                );
            }
        };
    }
    return {
        [Syntax.Str](node) {
            // check
        },
    };
}
```

I think that it is valid pattern. Types should allow to use it.

Add .gitattributes and enable Windows on GitHub Actions.

- Windows Node.js 8 workaround: https://github.com/somewhatabstract/checksync/pull/51
- Disbale integration tests on Windows, because interagtion-self does not passed on Windows

fix #632 
https://github.com/textlint/textlint-scripts/releases/tag/3.0.0
https://github.com/textlint/create-textlint-rule

`textlint-scripts` support TypeScript.
It help you to write textlint rule by TypeScript.

We want to update docs

- https://textlint.github.io/docs/rule.html
[textlint@11.4.0](https://github.com/textlint/textlint/releases/tag/textlint%4011.4.0) suport `--parallel` flag as `--experimental`.

In next, We need to consider following.

- Improve Performance
- Stability
- Add parallel support to TextlintEngine API
  - Currently, just did `CLI` support
  - Should Engine API support this?

## Related

- [rfcs/README.md at worker-threads · eslint/rfcs](https://github.com/eslint/rfcs/blob/worker-threads/designs/2019-worker-threads/README.md)
We can move to GitHub Actions from Travis CI and Appveyor.

GitHub Action do 20 workflows concurrently.

> You can execute up to 20 workflows concurrently per repository.
> https://help.github.com/en/articles/about-github-actions

It will improve testing performance.
**What version of textlint are you using?**

`v11.3.1`

**What file type (Markdown, plain text, etc.) are you using?**

Markdown with Jekyll frontmatter

**What did you do? Please include the actual source code causing the issue.**

I have configured `.textlintrc.json` in my project's root directory with all the necessary configuration and it works fine locally when I run `yarn lint:text` (which internally executes `textlint '_posts/*.md'`) and no errors are reported (when files are as per the rules I've defined).

However, on Travis CI where I have textlint build running on one of the stages, `spellchecker` itself fails complaining about several words present in the file. I also tried updating my `package.json` script target to explicitly specific `-c .textlintrc.json` in the textlint command but that doesn't help either.

**What did you expect to happen?**

textlint should pass on CI job similar to how it does locally provided that all other linting jobs are passing on CI.
<!--
**Before** Bug Reporting, Please update textlint and try it.
Also see https://github.com/textlint/textlint/blob/master/docs/CONTRIBUTING.md#bug-reporting
-->

I would like to request for updating TypeofTxtNode type (TypeScript).

**What version of textlint are you using?**
<!-- 
$ $(npm bin)/textlint -v
-->
v11.3.1
**What file type (Markdown, plain text, etc.) are you using?**

Markdown
**What did you do? Please include the actual source code causing the issue.**

I got node as ASTNodeTypes.Link. And cast node to TypeofTxtNode<ASTNodeTypes.Link>

```
const linkNode = node as TypeofTxtNode<ASTNodeTypes.Link>;
```
However TypeofTxtNode<ASTNodeTypes.Link> always returns `TxtParentNode`, So I can't get information for ASTNodeTypes.Link

[![Screenshot from Gyazo](https://gyazo.com/d2b52e6b07f3dae7e72b14a905404f62/raw)](https://gyazo.com/d2b52e6b07f3dae7e72b14a905404f62)

**What did you expect to happen?**
I can access to url property, but type is **any**

[![Screenshot from Gyazo](https://gyazo.com/cd146be65f104f65dfcd233c064475e4/raw)](https://gyazo.com/cd146be65f104f65dfcd233c064475e4)

**What actually happened? Please include the actual, raw output from textlint.**
<!--
You can get debug log by running textlint with `--debug` option.
$ $(npm bin)/textlint --debug target.md
# Please paste the debug log to the issue or use http://gist.github.com/
--->

<!--
**Before** Bug Reporting, Please update textlint and try it.
Also see https://github.com/textlint/textlint/blob/master/docs/CONTRIBUTING.md#bug-reporting
-->

**What version of textlint are you using?**
<!-- 
$ $(npm bin)/textlint -v
-->
v11.3.1

**What file type (Markdown, plain text, etc.) are you using?**
Laravel Blade (.blade.php)

**What did you do? Please include the actual source code causing the issue.**
I tried to check Laravel Blade as html. 
So I set .textlintrc.json to the following. 

```
{
  "filters": {
    "comments": true
  },
  "plugins": {
    "html": {
      "extensions": [
        ".blade.php"
      ]
    }
  },
  "rules": {
    "preset-japanese": true,
    "preset-jtf-style": {
      "3.1.1.全角文字と半角文字の間": false
    },
    "prh": {
      "rulePaths": [
        "node_modules/prh/prh-rules/media/WEB+DB_PRESS.yml"
      ]
    }
  }
}
```

But textlint doesn't detect .blade.php files as html. 

**What did you expect to happen?**
I think textlint doesn't support multiple extension (i.e. .blade.php, .tar.gz, etc). 
When .textlintrc.json was set to the following, 
```
    "html": {
      "extensions": [
        ".php"
      ]
    }
```
textlint detected .blade.php as html correctly. 

**What actually happened? Please include the actual, raw output from textlint.**
<!--
You can get debug log by running textlint with `--debug` option.
$ $(npm bin)/textlint --debug target.md
# Please paste the debug log to the issue or use http://gist.github.com/
--->
Here is debug log. 
```
hato@hato-YOGA:~/pencil$ node_modules/.bin/textlint --debug pencil/resources/views/index.blade.php 
  textlint:cli textlint --version: 11.3.1 +0ms
  textlint:cli Running on files, stdin-filename: undefined +2ms
  textlint:module-loader config Config {
  textlint:module-loader   configFile: '/home/hato/pencil/.textlintrc.json',
  textlint:module-loader   rulesBaseDirectory: undefined,
  textlint:module-loader   disabledRules: [],
  textlint:module-loader   rules: [ 'prh' ],
  textlint:module-loader   disabledFilterRules: [],
  textlint:module-loader   filterRules: [ 'comments' ],
  textlint:module-loader   presets: [ 'japanese', 'jtf-style' ],
  textlint:module-loader   plugins: [ 'html' ],
  textlint:module-loader   pluginsConfig: { html: { extensions: [Array] } },
  textlint:module-loader   rulesConfig:
  textlint:module-loader    { 'japanese/max-ten': { max: 3 },
  textlint:module-loader      'japanese/no-doubled-conjunctive-particle-ga': true,
  textlint:module-loader      'japanese/no-doubled-conjunction': true,
  textlint:module-loader      'japanese/no-double-negative-ja': true,
  textlint:module-loader      'japanese/no-doubled-joshi': { min_interval: 1 },
  textlint:module-loader      'japanese/sentence-length': { max: 100 },
  textlint:module-loader      'japanese/no-dropping-the-ra': true,
  textlint:module-loader      'japanese/no-mix-dearu-desumasu': true,
  textlint:module-loader      'japanese/no-nfd': true,
  textlint:module-loader      'japanese/no-invalid-control-character': true,
  textlint:module-loader      'jtf-style/1.1.1.本文': true,
  textlint:module-loader      'jtf-style/1.1.2.見出し': true,
  textlint:module-loader      'jtf-style/1.1.3.箇条書き': true,
  textlint:module-loader      'jtf-style/1.1.5.図表のキャプション': true,
  textlint:module-loader      'jtf-style/1.2.1.句点(。)と読点(、)': true,
  textlint:module-loader      'jtf-style/1.2.2.ピリオド(.)とカンマ(,)': true,
  textlint:module-loader      'jtf-style/2.1.2.漢字': false,
  textlint:module-loader      'jtf-style/2.1.5.カタカナ': false,
  textlint:module-loader      'jtf-style/2.1.6.カタカナの長音': false,
  textlint:module-loader      'jtf-style/2.1.8.算用数字': true,
  textlint:module-loader      'jtf-style/2.1.9.アルファベット': true,
  textlint:module-loader      'jtf-style/2.1.10.算用数字の位取りの表記': true,
  textlint:module-loader      'jtf-style/2.2.1.ひらがなと漢字の使い分け': false,
  textlint:module-loader      'jtf-style/2.2.2.算用数字と漢数字の使い分け': true,
  textlint:module-loader      'jtf-style/2.2.3.一部の助数詞の表記': true,
  textlint:module-loader      'jtf-style/3.1.1.全角文字と半角文字の間': false,
  textlint:module-loader      'jtf-style/3.1.2.全角文字どうし': true,
  textlint:module-loader      'jtf-style/3.2.カタカナ語間のスペースの有無': true,
  textlint:module-loader      'jtf-style/3.3.かっこ類と隣接する文字の間のスペースの有無': true,
  textlint:module-loader      'jtf-style/4.1.1.句点(。)': true,
  textlint:module-loader      'jtf-style/4.1.3.ピリオド(.)、カンマ(,)': true,
  textlint:module-loader      'jtf-style/4.2.1.感嘆符(！)': true,
  textlint:module-loader      'jtf-style/4.2.2.疑問符(？)': true,
  textlint:module-loader      'jtf-style/4.2.4.中黒(・)': true,
  textlint:module-loader      'jtf-style/4.2.5.波線(〜)': true,
  textlint:module-loader      'jtf-style/4.2.6.ハイフン(-)': true,
  textlint:module-loader      'jtf-style/4.2.7.コロン(：)': true,
  textlint:module-loader      'jtf-style/4.2.8.セミコロン(;)': true,
  textlint:module-loader      'jtf-style/4.2.9.ダッシュ(-)': true,
  textlint:module-loader      'jtf-style/4.3.1.丸かっこ（）': true,
  textlint:module-loader      'jtf-style/4.3.2.大かっこ［］': true,
  textlint:module-loader      'jtf-style/4.3.3.かぎかっこ「」': true,
  textlint:module-loader      'jtf-style/4.3.4.二重かぎかっこ『』': true,
  textlint:module-loader      'jtf-style/4.3.5.二重引用符': true,
  textlint:module-loader      'jtf-style/4.3.6.中かっこ{ }': true,
  textlint:module-loader      'jtf-style/4.3.7.山かっこ<>': true,
  textlint:module-loader      'jtf-style/4.3.8.一重引用符': true,
  textlint:module-loader      prh: { rulePaths: [Array] } },
  textlint:module-loader   filterRulesConfig: { comments: true },
  textlint:module-loader   rulePaths: [],
  textlint:module-loader   formatterName: undefined,
  textlint:module-loader   quiet: false,
  textlint:module-loader   color: true,
  textlint:module-loader   cache: false,
  textlint:module-loader   cacheLocation: '/home/hato/pencil/.textlintcache' } +0ms
  textlint:module-loader Loading rules from /home/hato/pencil/node_modules/textlint-rule-prh/lib/textlint-rule-prh.js +4ms
  textlint:module-loader Loading filter rules from /home/hato/pencil/node_modules/textlint-filter-rule-comments/lib/textlint-filter-rule-comments.js +0ms
  textlint:module-loader Loading rules from preset: /home/hato/pencil/node_modules/textlint-rule-preset-japanese/lib/textlint-rule-preset-japanese.js +1ms
  textlint:module-loader Loading rules from preset: /home/hato/pencil/node_modules/textlint-rule-preset-jtf-style/lib/index.js +1ms
  textlint:module-loader Loading rules from plugin: /home/hato/pencil/node_modules/textlint-plugin-html/lib/index.js +0ms
  textlint:engine-core Process files [] +0ms
  textlint:engine-core No Process files that are un-support extensions: [ '/home/hato/pencil/pencil/resources/views/index.blade.php' ] +0ms
  textlint:cli lint results: [] +1s
  textlint:@textlint/linter-formatter formatterName: stylish +0ms
hato@hato-YOGA:~/pencil$ 
```

textlint modules versioning is [independent](https://github.com/textlint/textlint/blob/master/lerna.json#L2).

- textlint: 11.2.6
- @textlint/fixer-formatter: 3.1.6 
- textlint-tester: 5.1.7 
- @textlint/types: 1.1.1 
- ...

It make user confuse.
Recently, textlint rule creator use textlint, textlint-tester, and @textlint/types.
These versions are not same.

We have two options

1. Upgrate all version to same version at one time
  - Still use [independent mode](https://github.com/lerna/lerna#independent-mode)
2. Use [Fixed/Locked mode](https://github.com/lerna/lerna#fixedlocked-mode-default)