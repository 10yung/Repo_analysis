1. 支持传入token
2. 支持替代函数实现，

比如 GetAccessToken 函数，可以自定义实现（参考来源于go-oauth2,某些函数可以通过自定义替代默认实现）
群主可否提供沙箱环境变量
```
config := &wechat.Config{
      ENV: "develop",
}
```
这样
pls review & merge 
## VerifySign

使用了代金劵券的时候，NotifyResult中带有coupon_开头的一些字段，造成VerifySign验证返回错误


## 问题及现象

1. 每一次消息处理都需要NewServer()是不是不合理？
2. Server应该要实现http.Handler方法来处理消息，而不是像现在这样手动触发消息处理和发送。

在 `Template` 上新增发送订阅消息的方法
## 问题及现象

不是每次都报错，我观察了下，是render里边的性能不够高

```go

//Render render from bytes
func (ctx *Context) Render(bytes []byte) {
	//debug
	//fmt.Println("response msg = ", string(bytes))
	ctx.Writer.WriteHeader(200)
	_, err := ctx.Writer.Write(bytes)
	if err != nil {
		panic(err)
	}
}

```

看了beego的源码，再结合stackoverflow上搜索到的回答https://stackoverflow.com/questions/29664720/golang-map-of-http-responsewriters

就是这个问题了。

The goroutine responsible for the ResponseWriter exits. A 'better' way would be to trigger the work, block in the handler, write the work to a buffer, and then io.Copy(buf, w) to write it out back in the handler. Set a timeout to prevent the HTTP connection from timing out on the client side.


beego

```go

func (output *BeegoOutput) Body(content []byte) error {
	var encoding string
	var buf = &bytes.Buffer{}
	if output.EnableGzip {
		encoding = ParseEncoding(output.Context.Request)
	}
	if b, n, _ := WriteBody(encoding, buf, content); b {
		output.Header("Content-Encoding", n)
		output.Header("Content-Length", strconv.Itoa(buf.Len()))
	} else {
		output.Header("Content-Length", strconv.Itoa(len(content)))
	}
	// Write status code if it has been set manually
	// Set it to 0 afterwards to prevent "multiple response.WriteHeader calls"
	if output.Status != 0 {
		output.Context.ResponseWriter.WriteHeader(output.Status)
		output.Status = 0
	} else {
		output.Context.ResponseWriter.Started = true
	}
	io.Copy(output.Context.ResponseWriter, buf)
	return nil
}

```

![image](https://user-images.githubusercontent.com/9654650/68639073-63481100-053e-11ea-8866-eb3624f597e1.png)

sdk中缺乏对第三方代小程序开发的系列接口
请问有人已经在生产环境用过吗，各位好看的大神们