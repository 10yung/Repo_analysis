When trying to filter a fable (fbl_ts) object in the RStudio data viewer (using the filter icon in the toolbar),  "**Error: Could not find response variable(s) in the fable: x %@% "response"**" is shown and the filtering fails. The fable was (successfully) created using the "forecast" function in package "fable" and has a response variable named"Quantity".
Many models have tests or analysis specific to that model.

A method for model specific functionality is required.

Related: #199, #200
I was wondering is there any future plan to add support for the Bayesian Structural Time Series model as provided by Google [bsts](https://cran.r-project.org/web/packages/bsts/bsts.pdf) package in fable? There is a blog introducing this package: http://www.unofficialgoogledatascience.com/2017/07/fitting-bayesian-structural-time-series.html

Thanks for all your hard work, it is really excited to see an unified interface for time series modelling in R.
I am simply following along the fable tutorial, but with my own data. The tutorial works fine, but when I try to use the `forecast` function I get this error.

I run the following code with my data structured precisely like the example


```
adoption_tsbl%>% 
  model(
    ets = ETS(box_cox(y, 0.3)),
    arima = ARIMA(log(y)),
    snaive = SNAIVE(y)
  ) %>%
  forecast(h = "2 years")
```

which returns the following:

```
|=======  | 99% ~0 s remaining     Error: Must pass a scalar integer as `nrow` argument to `new_tibble()`.
```

This is my data per dput. It is a 2 column tbl_ts with a date and value column. Sorry for making the post long. I have tried several similar data sets and none work.

```structure(list(ds = structure(c(17532, 17531, 17530, 17529, 17528, 
17533, 17527, 17526, 17534, 17535, 17525, 17536, 17537, 17538, 
17524, 17522, 17523, 17539, 17547, 17521, 17548, 17540, 17546, 
17549, 17550, 17552, 17544, 17551, 17541, 17542, 17520, 17543, 
17519, 17545, 17518, 17581, 17515, 17516, 17557, 17517, 17559, 
17580, 17558, 17579, 17578, 17577, 17582, 17553, 17560, 17576, 
17556, 17555, 17554, 17575, 17583, 17561, 17574, 17573, 17587, 
17585, 17584, 17586, 17571, 17572, 17570, 17896, 17562, 17568, 
17569, 17897, 17566, 17567, 17563, 17895, 17564, 17565, 17588, 
17605, 17591, 17894, 17592, 17594, 17593, 17893, 17589, 17590, 
17604, 17607, 17603, 17606, 17608, 17609, 17595, 17602, 17601, 
17600, 17598, 17599, 17596, 17611, 17597, 17610, 17612, 17613, 
17892, 17614, 17615, 17898, 17616, 17891, 17899, 17617, 17623, 
17624, 17625, 17626, 17618, 17620, 17621, 17622, 17900, 17890, 
17656, 17654, 17901, 17655, 17657, 17653, 17627, 17628, 17619, 
17652, 17629, 17902, 17637, 17658, 17638, 17639, 17636, 17640, 
17635, 17651, 17661, 17634, 17663, 17633, 17662, 17664, 17630, 
17631, 17643, 17646, 17660, 17641, 17718, 17642, 17650, 17719, 
17659, 17720, 17632, 17684, 17685, 17717, 17682, 17649, 17645, 
17683, 17648, 17665, 17644, 17681, 17647, 17716, 17666, 17680, 
17721, 17672, 17668, 17667, 17671, 17679, 17670, 17669, 17689, 
17688, 17722, 17690, 17692, 17686, 17714, 17691, 17687, 17673, 
17695, 17715, 17693, 17694, 17696, 17711, 17674, 17712, 17713, 
17676, 17698, 17677, 17699, 17723, 17678, 17675, 17697, 17710, 
17700, 17709, 17726, 17729, 17725, 17728, 17704, 17701, 17705, 
17708, 17724, 17731, 17706, 17727, 17730, 17732, 17703, 17889, 
17702, 17738, 17707, 17733, 17734, 17777, 17735, 17739, 17903, 
17778, 17740, 17736, 17737, 17859, 17749, 17741, 17860, 17764, 
17746, 17858, 17747, 17743, 17748, 17750, 17742, 17751, 17779, 
17763, 17760, 17761, 17744, 17762, 17745, 17768, 17755, 17769, 
17765, 17753, 17767, 17754, 17752, 17766, 17780, 17758, 17781, 
17782, 17783, 17861, 17759, 17770, 17775, 17757, 17774, 17776, 
17756, 17773, 17857, 17862, 17788, 17771, 17772, 17789, 17785, 
17790, 17786, 17784, 17787, 17791, 17863, 17803, 17795, 17802, 
17797, 17804, 17796, 17794, 17799, 17801, 17800, 17812, 17808, 
17793, 17792, 17806, 17805, 17810, 17888, 17823, 17824, 17798, 
17818, 17809, 17856, 17817, 17811, 17816, 17825, 17837, 17838, 
17807, 17822, 17886, 17813, 17887, 17833, 17835, 17836, 17819, 
17826, 17904, 17814, 17834, 17839, 17815, 17855, 17821, 17827, 
17831, 17840, 17830, 17832, 17820, 17841, 17843, 17828, 17842, 
17854, 17845, 17885, 17847, 17829, 17844, 17851, 17852, 17846, 
17853, 17848, 17905, 17849, 17864, 17876, 17850, 17877, 17884, 
17879, 17880, 17883, 17874, 17882, 17878, 17881, 17906, 17875, 
17907, 17872, 17908, 17873, 17867, 17865, 17866, 17909, 17868, 
17871, 17869, 17917, 17918, 17870, 17910, 17913, 17919, 17921, 
17923, 17922, 17914, 17911, 17912, 17915, 17920, 17916, 17946, 
17945, 17924, 17947, 18009, 17935, 17936, 17933, 17948, 17934, 
17925, 17951, 17927, 18008, 17932, 17949, 17937, 17950, 17926, 
17928, 17929, 18010, 17930, 17931, 17938, 17943, 17942, 18022, 
17941, 18007, 17944, 18006, 18021, 18019, 18005, 17940, 18020, 
17955, 18011, 17939, 17954, 17952, 17957, 17956, 17953, 18018, 
17960, 17958, 18017, 18023, 17959, 18084, 18047, 18048, 18046, 
18083, 18082, 17961, 18049, 18045, 18085, 17965, 17963, 17964, 
18044, 17966, 18043, 18086, 17962, 18012, 18013, 17984, 17986, 
17969, 17985, 18004, 17981, 17979, 17978, 17982, 17977, 18014, 
17975, 17968, 17980, 18081, 17967, 17976, 17995, 18087, 17987, 
17983, 18024, 17971, 17970, 17972, 18016, 17999, 18001, 17973, 
17974, 17998, 18000, 17993, 17996, 17994, 17997, 18042, 17989, 
18003, 17988, 18002, 18050, 18027, 17992, 18015, 18040, 18076, 
18058, 18026, 18041, 18077, 18028, 17991, 18029, 18031, 18030, 
18075, 18032, 18052, 18025, 18036, 18051, 18141, 18033, 18057, 
18079, 18035, 18034, 18096, 18061, 18097, 18095, 18037, 18039, 
18059, 18074, 17990, 18098, 18063, 18062, 18078, 18060, 18073, 
18054, 18053, 18142, 18080, 18099, 18055, 18056, 18038, 18072, 
18106, 18064, 18124, 18071, 18125, 18105, 18088, 18126, 18100, 
18108, 18069, 18127, 18094, 18104, 18143, 18123, 18070, 18068, 
18103, 18065, 18107, 18122, 18066, 18101, 18067, 18144, 18093, 
18119, 18110, 18128, 18112, 18111, 18117, 18118, 18109, 18113, 
18102, 18121, 18116, 18145, 18146, 18092, 18129, 18120, 18091, 
18130, 18090, 18147, 18089, 18114, 18115, 18131, 18132, 18133, 
18140, 18139, 18138, 18134, 18150, 18137, 18152, 18155, 18153, 
18136, 18154, 18151, 18149, 18135, 18156, 18148), class = "Date"), 
    y = c(335L, 339L, 349L, 360L, 392L, 432L, 445L, 521L, 541L, 
    609L, 620L, 649L, 656L, 676L, 772L, 785L, 789L, 794L, 821L, 
    826L, 828L, 833L, 835L, 837L, 842L, 844L, 845L, 845L, 847L, 
    847L, 848L, 850L, 851L, 853L, 859L, 861L, 876L, 876L, 883L, 
    886L, 886L, 887L, 889L, 895L, 896L, 898L, 899L, 900L, 900L, 
    902L, 910L, 915L, 917L, 917L, 920L, 922L, 923L, 932L, 935L, 
    937L, 938L, 939L, 945L, 948L, 957L, 958L, 961L, 967L, 976L, 
    980L, 983L, 983L, 989L, 989L, 992L, 993L, 1004L, 1005L, 1006L, 
    1014L, 1015L, 1016L, 1017L, 1021L, 1022L, 1022L, 1023L, 1023L, 
    1024L, 1030L, 1032L, 1035L, 1037L, 1041L, 1042L, 1045L, 1048L, 
    1049L, 1052L, 1061L, 1065L, 1065L, 1080L, 1233L, 1250L, 1251L, 
    1257L, 1342L, 1471L, 1528L, 1614L, 1647L, 1709L, 1717L, 1751L, 
    1769L, 1778L, 1784L, 1788L, 1789L, 1831L, 1833L, 1834L, 1836L, 
    1837L, 1843L, 1844L, 1848L, 1853L, 1853L, 1865L, 1865L, 1866L, 
    1877L, 1888L, 1893L, 1909L, 1917L, 1922L, 1923L, 1932L, 1933L, 
    1938L, 1941L, 1943L, 1946L, 1947L, 1948L, 1952L, 1958L, 1964L, 
    1964L, 1964L, 1966L, 1966L, 1967L, 1967L, 1967L, 1973L, 1974L, 
    1980L, 1981L, 1981L, 1982L, 1985L, 1986L, 1987L, 1987L, 1988L, 
    1990L, 1996L, 1999L, 2001L, 2004L, 2009L, 2019L, 2022L, 2045L, 
    2050L, 2051L, 2057L, 2058L, 2061L, 2062L, 2068L, 2083L, 2083L, 
    2099L, 2101L, 2108L, 2112L, 2117L, 2118L, 2119L, 2128L, 2128L, 
    2132L, 2134L, 2135L, 2137L, 2139L, 2139L, 2139L, 2145L, 2145L, 
    2148L, 2149L, 2151L, 2152L, 2153L, 2156L, 2159L, 2164L, 2178L, 
    2178L, 2181L, 2185L, 2186L, 2187L, 2190L, 2191L, 2194L, 2195L, 
    2196L, 2200L, 2202L, 2206L, 2218L, 2219L, 2221L, 2222L, 2222L, 
    2225L, 2225L, 2228L, 2246L, 2252L, 2252L, 2258L, 2261L, 2262L, 
    2267L, 2268L, 2272L, 2275L, 2276L, 2281L, 2285L, 2291L, 2291L, 
    2293L, 2296L, 2297L, 2298L, 2302L, 2307L, 2311L, 2312L, 2315L, 
    2315L, 2323L, 2325L, 2331L, 2337L, 2340L, 2340L, 2341L, 2342L, 
    2343L, 2345L, 2346L, 2346L, 2346L, 2350L, 2350L, 2354L, 2354L, 
    2362L, 2369L, 2373L, 2380L, 2383L, 2385L, 2387L, 2398L, 2401L, 
    2403L, 2414L, 2420L, 2421L, 2432L, 2433L, 2448L, 2450L, 2454L, 
    2455L, 2455L, 2483L, 2489L, 2501L, 2506L, 2508L, 2509L, 2509L, 
    2513L, 2519L, 2520L, 2527L, 2530L, 2530L, 2537L, 2538L, 2540L, 
    2541L, 2542L, 2548L, 2551L, 2552L, 2554L, 2555L, 2555L, 2556L, 
    2558L, 2561L, 2562L, 2562L, 2562L, 2562L, 2563L, 2565L, 2571L, 
    2576L, 2578L, 2578L, 2579L, 2581L, 2581L, 2582L, 2584L, 2585L, 
    2587L, 2597L, 2597L, 2600L, 2602L, 2604L, 2605L, 2606L, 2610L, 
    2611L, 2612L, 2617L, 2625L, 2626L, 2633L, 2635L, 2635L, 2639L, 
    2639L, 2640L, 2641L, 2642L, 2643L, 2648L, 2652L, 2652L, 2663L, 
    2670L, 2675L, 2682L, 2682L, 2683L, 2700L, 2702L, 2703L, 2707L, 
    2710L, 2721L, 2723L, 2731L, 2732L, 2734L, 2743L, 2743L, 2744L, 
    2745L, 2747L, 2752L, 2753L, 2754L, 2760L, 2764L, 2768L, 2783L, 
    2784L, 2797L, 2799L, 2807L, 2830L, 2830L, 2831L, 2832L, 2833L, 
    2857L, 2858L, 2858L, 2868L, 2869L, 2875L, 2934L, 2939L, 2943L, 
    2956L, 2966L, 2973L, 2973L, 2979L, 2985L, 2986L, 2987L, 2988L, 
    2992L, 2994L, 2996L, 2996L, 2997L, 2998L, 3003L, 3009L, 3016L, 
    3024L, 3027L, 3029L, 3036L, 3046L, 3050L, 3065L, 3069L, 3071L, 
    3074L, 3092L, 3093L, 3094L, 3096L, 3101L, 3101L, 3102L, 3105L, 
    3107L, 3112L, 3114L, 3115L, 3117L, 3118L, 3120L, 3121L, 3131L, 
    3146L, 3152L, 3153L, 3179L, 3183L, 3183L, 3185L, 3188L, 3189L, 
    3198L, 3198L, 3200L, 3200L, 3205L, 3212L, 3214L, 3233L, 3241L, 
    3246L, 3261L, 3266L, 3266L, 3271L, 3276L, 3277L, 3282L, 3282L, 
    3285L, 3288L, 3289L, 3294L, 3294L, 3297L, 3299L, 3303L, 3304L, 
    3305L, 3311L, 3321L, 3321L, 3321L, 3322L, 3324L, 3326L, 3330L, 
    3332L, 3337L, 3339L, 3345L, 3350L, 3353L, 3357L, 3357L, 3358L, 
    3361L, 3368L, 3371L, 3372L, 3372L, 3373L, 3380L, 3380L, 3383L, 
    3386L, 3388L, 3396L, 3397L, 3398L, 3399L, 3400L, 3401L, 3402L, 
    3403L, 3404L, 3406L, 3407L, 3407L, 3407L, 3408L, 3412L, 3418L, 
    3419L, 3421L, 3424L, 3424L, 3427L, 3431L, 3434L, 3436L, 3439L, 
    3440L, 3441L, 3442L, 3442L, 3444L, 3448L, 3449L, 3450L, 3451L, 
    3452L, 3454L, 3456L, 3457L, 3459L, 3460L, 3460L, 3464L, 3466L, 
    3469L, 3470L, 3470L, 3471L, 3471L, 3481L, 3489L, 3497L, 3498L, 
    3499L, 3502L, 3502L, 3509L, 3512L, 3513L, 3516L, 3516L, 3517L, 
    3519L, 3520L, 3520L, 3520L, 3522L, 3526L, 3527L, 3527L, 3530L, 
    3531L, 3532L, 3534L, 3537L, 3538L, 3538L, 3542L, 3552L, 3555L, 
    3560L, 3561L, 3562L, 3566L, 3567L, 3568L, 3579L, 3581L, 3587L, 
    3589L, 3589L, 3590L, 3592L, 3596L, 3600L, 3604L, 3604L, 3610L, 
    3611L, 3615L, 3618L, 3620L, 3651L, 3653L, 3654L, 3658L, 3682L, 
    3684L, 3700L, 3748L, 3753L, 3761L, 3761L, 3767L, 3778L, 3778L, 
    3782L, 3792L, 3793L, 3822L, 3828L)), row.names = c(NA, -642L
), key = structure(list(y = c(335L, 339L, 349L, 360L, 392L, 432L, 
445L, 521L, 541L, 609L, 620L, 649L, 656L, 676L, 772L, 785L, 789L, 
794L, 821L, 826L, 828L, 833L, 835L, 837L, 842L, 844L, 845L, 847L, 
848L, 850L, 851L, 853L, 859L, 861L, 876L, 883L, 886L, 887L, 889L, 
895L, 896L, 898L, 899L, 900L, 902L, 910L, 915L, 917L, 920L, 922L, 
923L, 932L, 935L, 937L, 938L, 939L, 945L, 948L, 957L, 958L, 961L, 
967L, 976L, 980L, 983L, 989L, 992L, 993L, 1004L, 1005L, 1006L, 
1014L, 1015L, 1016L, 1017L, 1021L, 1022L, 1023L, 1024L, 1030L, 
1032L, 1035L, 1037L, 1041L, 1042L, 1045L, 1048L, 1049L, 1052L, 
1061L, 1065L, 1080L, 1233L, 1250L, 1251L, 1257L, 1342L, 1471L, 
1528L, 1614L, 1647L, 1709L, 1717L, 1751L, 1769L, 1778L, 1784L, 
1788L, 1789L, 1831L, 1833L, 1834L, 1836L, 1837L, 1843L, 1844L, 
1848L, 1853L, 1865L, 1866L, 1877L, 1888L, 1893L, 1909L, 1917L, 
1922L, 1923L, 1932L, 1933L, 1938L, 1941L, 1943L, 1946L, 1947L, 
1948L, 1952L, 1958L, 1964L, 1966L, 1967L, 1973L, 1974L, 1980L, 
1981L, 1982L, 1985L, 1986L, 1987L, 1988L, 1990L, 1996L, 1999L, 
2001L, 2004L, 2009L, 2019L, 2022L, 2045L, 2050L, 2051L, 2057L, 
2058L, 2061L, 2062L, 2068L, 2083L, 2099L, 2101L, 2108L, 2112L, 
2117L, 2118L, 2119L, 2128L, 2132L, 2134L, 2135L, 2137L, 2139L, 
2145L, 2148L, 2149L, 2151L, 2152L, 2153L, 2156L, 2159L, 2164L, 
2178L, 2181L, 2185L, 2186L, 2187L, 2190L, 2191L, 2194L, 2195L, 
2196L, 2200L, 2202L, 2206L, 2218L, 2219L, 2221L, 2222L, 2225L, 
2228L, 2246L, 2252L, 2258L, 2261L, 2262L, 2267L, 2268L, 2272L, 
2275L, 2276L, 2281L, 2285L, 2291L, 2293L, 2296L, 2297L, 2298L, 
2302L, 2307L, 2311L, 2312L, 2315L, 2323L, 2325L, 2331L, 2337L, 
2340L, 2341L, 2342L, 2343L, 2345L, 2346L, 2350L, 2354L, 2362L, 
2369L, 2373L, 2380L, 2383L, 2385L, 2387L, 2398L, 2401L, 2403L, 
2414L, 2420L, 2421L, 2432L, 2433L, 2448L, 2450L, 2454L, 2455L, 
2483L, 2489L, 2501L, 2506L, 2508L, 2509L, 2513L, 2519L, 2520L, 
2527L, 2530L, 2537L, 2538L, 2540L, 2541L, 2542L, 2548L, 2551L, 
2552L, 2554L, 2555L, 2556L, 2558L, 2561L, 2562L, 2563L, 2565L, 
2571L, 2576L, 2578L, 2579L, 2581L, 2582L, 2584L, 2585L, 2587L, 
2597L, 2600L, 2602L, 2604L, 2605L, 2606L, 2610L, 2611L, 2612L, 
2617L, 2625L, 2626L, 2633L, 2635L, 2639L, 2640L, 2641L, 2642L, 
2643L, 2648L, 2652L, 2663L, 2670L, 2675L, 2682L, 2683L, 2700L, 
2702L, 2703L, 2707L, 2710L, 2721L, 2723L, 2731L, 2732L, 2734L, 
2743L, 2744L, 2745L, 2747L, 2752L, 2753L, 2754L, 2760L, 2764L, 
2768L, 2783L, 2784L, 2797L, 2799L, 2807L, 2830L, 2831L, 2832L, 
2833L, 2857L, 2858L, 2868L, 2869L, 2875L, 2934L, 2939L, 2943L, 
2956L, 2966L, 2973L, 2979L, 2985L, 2986L, 2987L, 2988L, 2992L, 
2994L, 2996L, 2997L, 2998L, 3003L, 3009L, 3016L, 3024L, 3027L, 
3029L, 3036L, 3046L, 3050L, 3065L, 3069L, 3071L, 3074L, 3092L, 
3093L, 3094L, 3096L, 3101L, 3102L, 3105L, 3107L, 3112L, 3114L, 
3115L, 3117L, 3118L, 3120L, 3121L, 3131L, 3146L, 3152L, 3153L, 
3179L, 3183L, 3185L, 3188L, 3189L, 3198L, 3200L, 3205L, 3212L, 
3214L, 3233L, 3241L, 3246L, 3261L, 3266L, 3271L, 3276L, 3277L, 
3282L, 3285L, 3288L, 3289L, 3294L, 3297L, 3299L, 3303L, 3304L, 
3305L, 3311L, 3321L, 3322L, 3324L, 3326L, 3330L, 3332L, 3337L, 
3339L, 3345L, 3350L, 3353L, 3357L, 3358L, 3361L, 3368L, 3371L, 
3372L, 3373L, 3380L, 3383L, 3386L, 3388L, 3396L, 3397L, 3398L, 
3399L, 3400L, 3401L, 3402L, 3403L, 3404L, 3406L, 3407L, 3408L, 
3412L, 3418L, 3419L, 3421L, 3424L, 3427L, 3431L, 3434L, 3436L, 
3439L, 3440L, 3441L, 3442L, 3444L, 3448L, 3449L, 3450L, 3451L, 
3452L, 3454L, 3456L, 3457L, 3459L, 3460L, 3464L, 3466L, 3469L, 
3470L, 3471L, 3481L, 3489L, 3497L, 3498L, 3499L, 3502L, 3509L, 
3512L, 3513L, 3516L, 3517L, 3519L, 3520L, 3522L, 3526L, 3527L, 
3530L, 3531L, 3532L, 3534L, 3537L, 3538L, 3542L, 3552L, 3555L, 
3560L, 3561L, 3562L, 3566L, 3567L, 3568L, 3579L, 3581L, 3587L, 
3589L, 3590L, 3592L, 3596L, 3600L, 3604L, 3610L, 3611L, 3615L, 
3618L, 3620L, 3651L, 3653L, 3654L, 3658L, 3682L, 3684L, 3700L, 
3748L, 3753L, 3761L, 3767L, 3778L, 3782L, 3792L, 3793L, 3822L, 
3828L), .rows = list(1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 
    11L, 12L, 13L, 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 
    23L, 24L, 25L, 26L, 27:28, 29:30, 31L, 32L, 33L, 34L, 35L, 
    36L, 37:38, 39L, 40:41, 42L, 43L, 44L, 45L, 46L, 47L, 48:49, 
    50L, 51L, 52L, 53:54, 55L, 56L, 57L, 58L, 59L, 60L, 61L, 
    62L, 63L, 64L, 65L, 66L, 67L, 68L, 69L, 70L, 71:72, 73:74, 
    75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 84L, 85:86, 
    87:88, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L, 97L, 98L, 
    99L, 100L, 101:102, 103L, 104L, 105L, 106L, 107L, 108L, 109L, 
    110L, 111L, 112L, 113L, 114L, 115L, 116L, 117L, 118L, 119L, 
    120L, 121L, 122L, 123L, 124L, 125L, 126L, 127L, 128L, 129:130, 
    131:132, 133L, 134L, 135L, 136L, 137L, 138L, 139L, 140L, 
    141L, 142L, 143L, 144L, 145L, 146L, 147L, 148L, 149L, 150L, 
    151:153, 154:155, 156:158, 159L, 160L, 161L, 162:163, 164L, 
    165L, 166L, 167:168, 169L, 170L, 171L, 172L, 173L, 174L, 
    175L, 176L, 177L, 178L, 179L, 180L, 181L, 182L, 183L, 184L, 
    185L, 186:187, 188L, 189L, 190L, 191L, 192L, 193L, 194L, 
    195:196, 197L, 198L, 199L, 200L, 201:203, 204:205, 206L, 
    207L, 208L, 209L, 210L, 211L, 212L, 213L, 214:215, 216L, 
    217L, 218L, 219L, 220L, 221L, 222L, 223L, 224L, 225L, 226L, 
    227L, 228L, 229L, 230L, 231:232, 233:234, 235L, 236L, 237:238, 
    239L, 240L, 241L, 242L, 243L, 244L, 245L, 246L, 247L, 248L, 
    249:250, 251L, 252L, 253L, 254L, 255L, 256L, 257L, 258L, 
    259:260, 261L, 262L, 263L, 264L, 265:266, 267L, 268L, 269L, 
    270L, 271:273, 274:275, 276:277, 278L, 279L, 280L, 281L, 
    282L, 283L, 284L, 285L, 286L, 287L, 288L, 289L, 290L, 291L, 
    292L, 293L, 294L, 295L, 296:297, 298L, 299L, 300L, 301L, 
    302L, 303:304, 305L, 306L, 307L, 308L, 309:310, 311L, 312L, 
    313L, 314L, 315L, 316L, 317L, 318L, 319L, 320:321, 322L, 
    323L, 324L, 325:328, 329L, 330L, 331L, 332L, 333:334, 335L, 
    336:337, 338L, 339L, 340L, 341L, 342:343, 344L, 345L, 346L, 
    347L, 348L, 349L, 350L, 351L, 352L, 353L, 354L, 355L, 356:357, 
    358:359, 360L, 361L, 362L, 363L, 364L, 365:366, 367L, 368L, 
    369L, 370:371, 372L, 373L, 374L, 375L, 376L, 377L, 378L, 
    379L, 380L, 381L, 382L, 383:384, 385L, 386L, 387L, 388L, 
    389L, 390L, 391L, 392L, 393L, 394L, 395L, 396L, 397L, 398L, 
    399:400, 401L, 402L, 403L, 404L, 405:406, 407L, 408L, 409L, 
    410L, 411L, 412L, 413L, 414L, 415:416, 417L, 418L, 419L, 
    420L, 421L, 422L, 423L, 424:425, 426L, 427L, 428L, 429L, 
    430L, 431L, 432L, 433L, 434L, 435L, 436L, 437L, 438L, 439L, 
    440L, 441L, 442L, 443L, 444L, 445:446, 447L, 448L, 449L, 
    450L, 451L, 452L, 453L, 454L, 455L, 456L, 457L, 458L, 459L, 
    460L, 461L, 462:463, 464L, 465L, 466L, 467:468, 469:470, 
    471L, 472L, 473L, 474L, 475L, 476L, 477L, 478:479, 480L, 
    481L, 482L, 483:484, 485L, 486L, 487L, 488:489, 490L, 491L, 
    492L, 493L, 494L, 495L, 496:498, 499L, 500L, 501L, 502L, 
    503L, 504L, 505L, 506L, 507L, 508L, 509:510, 511L, 512L, 
    513L, 514L, 515:516, 517L, 518:519, 520L, 521L, 522L, 523L, 
    524L, 525L, 526L, 527L, 528L, 529L, 530L, 531L, 532L, 533:535, 
    536L, 537L, 538L, 539L, 540L, 541:542, 543L, 544L, 545L, 
    546L, 547L, 548L, 549L, 550:551, 552L, 553L, 554L, 555L, 
    556L, 557L, 558L, 559L, 560L, 561L, 562:563, 564L, 565L, 
    566L, 567:568, 569:570, 571L, 572L, 573L, 574L, 575L, 576:577, 
    578L, 579L, 580L, 581:582, 583L, 584L, 585:587, 588L, 589L, 
    590:591, 592L, 593L, 594L, 595L, 596L, 597:598, 599L, 600L, 
    601L, 602L, 603L, 604L, 605L, 606L, 607L, 608L, 609L, 610L, 
    611:612, 613L, 614L, 615L, 616L, 617:618, 619L, 620L, 621L, 
    622L, 623L, 624L, 625L, 626L, 627L, 628L, 629L, 630L, 631L, 
    632L, 633:634, 635L, 636:637, 638L, 639L, 640L, 641L, 642L)), row.names = c(NA, 
-558L), class = c("tbl_df", "tbl", "data.frame"), .drop = TRUE), index = structure("ds", ordered = TRUE), index2 = "ds", interval = structure(list(
    year = 0, quarter = 0, month = 0, week = 0, day = 1, hour = 0, 
    minute = 0, second = 0, millisecond = 0, microsecond = 0, 
    nanosecond = 0, unit = 0), class = "interval"), class = c("tbl_ts", 
"tbl_df", "tbl", "data.frame"))```
If I wish to fit a regression with Fourier terms then to find the optimal K I need to do something like this:

```
library(fable)
library(dplyr)
library(tidyr)

mbl = tsibbledata::ansett %>%
  tsibble::fill_gaps() %>%
  model(arima1 = ARIMA(Passengers ~ fourier(K = 1) + PDQ(0,0,0)),
        arima2 = ARIMA(Passengers ~ fourier(K = 2) + PDQ(0,0,0)),
        arima3 = ARIMA(Passengers ~ fourier(K = 3) + PDQ(0,0,0)))

metrics = mbl %>%
  glance()

mbl_best = metrics %>%
  select(Airports, Class, .model, AICc) %>%
  group_by(Airports, Class) %>%
  slice(which.min(AICc)) %>%
  left_join(mbl %>%
              gather('.model', 'model', -Airports, -Class),
            by = c('.model', 'Airports', 'Class')) %>%
  as_mable(key = c('Airports', 'Class'), models = 'model')
```

It would be more convenient for K to be automatically determined through something like this:

`model(arima = ARIMA(Passengers ~ Fourier(K = 1:3) + PDQ(0,0,0)`

On that note, when I look at the source code for ARIMA it appears that when fitting a regression + ARIMA the number of differences is determined after the regression. Because of this, it seems entirely possible that the arima1, arima2 and arima3 models I fit could potentially have a different number of differencing. If this is indeed the case perhaps determining K through cross validation is better?

Thanks!



See https://community.rstudio.com/t/interpolate-time-series-using-weighted-loess/38704 for a use-case.
If I understand correctly, `fable` (and `forecast`) only deal with __iterated__ forecasts, i.e., multiperiod-ahead time series forecasts are made using a one-period ahead model. Am I right? If so, would it be possible to add the option for __direct__ forecasts, made using a horizon-specific estimated model, where the dependent variable is the multi-period ahead value being forecasted?

### Reference

Marcellino, M., Stock, J. H., & Watson, M. W. (2006). A comparison of direct and iterated multistep AR methods for forecasting macroeconomic time series. _Journal of Econometrics_, 135(1-2), 499-526.
Hello, 
I have different time_series that represent counting data in different street in a city. All are stored in one tsible with a counter id as key and with count column that store number of people counted.

I want to do forecast to estimate the counts for a gap in my data based on counting data from other streets. 
I have watched the youtube videos, the documentation, the tidy forecasting book but get no answer. I know it is still in developpment so it is not may be implemented now. The example on prison data or electricity demand use a different observation. 

The only way I acheive this was to spread my counting data and then take the new observations column as regressor : 
`my_training_data %>% 
spread(key = id_channel, value = counts) %>% 
model (TSLM (target ~ ref1 + ref2 + ref3 + ref4 + trend()) )`

I would like to know if there is formula component that may do this without spreading wich is not tidy then. 

Note : I have found other example with data from fpp3 book beter to understand what i mean.
The us_change data is stored in non tidy way. The data is transform in a tidy way to produce the [graph 10.1](https://otexts.com/fpp3/regarima.html#fig:usconsump) , but then to do the model the non tidy data is still used. 
Would it be possible to add mixed frequency forecasting methods to `fable`? I was thinking of something like an API to the [`midasr`](https://github.com/mpiktas/midasr) package. Thanks for your hard work!
https://github.com/ines/course-starter-r