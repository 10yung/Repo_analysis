mtail log:

![image](https://user-images.githubusercontent.com/46478986/71962660-e0d58800-3234-11ea-9c84-bd3d902c13f7.png)


mtail_lines_total   is still growing

but other metrics count did not grow any more
const UUID /(?P<uuid>\w{8}(-\w{4}){3}-\w{12})/
counter nginx_log_nomatch_count
counter cond_all
counter nginx_1
counter nginx_2
counter nginx_3


/"(?P<host>[\s\S]*)" ;;; "(?P<uri>[\s\S]*)" ;;; (?P<status>[\s\S]*) ;;; (?P<request_time>[\s\S]*) ;;; (?P<upstream_response_time>[\s\S]*) ;;; "(?P<upstream_addr>[\s\S]*)" ;;; (?P<upstream_status>[\s\S]*)/ {
  $uri =~ /^\/gkids\/report\// + UUID {
  nginx_1 ++
  }
  $uri =~ /^\/gkidshow\/class\/picture_book\// + UUID {
  nginx_2 ++
  }
  $uri =~ /^\/gkids\/class\/picture_book\// + UUID {
  nginx_3 ++
  } else {
  cond_all ++
  }

} else {
    nginx_log_nomatch_count++
}


there are 36 line in the log

nginx_1{prog="nginx.mtail"} 2

nginx_2{prog="nginx.mtail"} 3

nginx_3{prog="nginx.mtail"} 2

cond_all{prog="nginx.mtail"} 34

but  34 lines match else condtion ,it is not right

maybe the else conditon only work with condition 3
the else condtion should be 36-2 -3 -2 = 29 lines



nginx log uri containes with uuid string ,like :

"app.xx.com" ;;; "/api/report/a2542561-7dd2-49f3-b808-6ed91814da66" ;;; 204 ;;; 0.002 ;;; 0.002 ;;; "192.168.20.105:9034" ;;; 204
"app.xx.com" ;;; "/api/report/b25424ef1-7ef2-42f4-b898-6ed9181s2dfdf" ;;; 200 ;;; 0.049 ;;; 0.049 ;;; "192.168.20.105:9011" ;;; 200

nginx_request_duration_by_host_bucket{host="app.xx.com",prog="nginx.mtail",status="200",uri="/api/report/a2542561-7dd2-49f3-b808-6ed91814da66"} 1
nginx_request_duration_by_host_bucket{host="app.xx.com",prog="nginx.mtail",status="200",uri="/api/report//api/report/b25424ef1-7ef2-42f4-b898-6ed9181s2dfdf"} 1

there are too many records in the metrics 

I want put this two line  into one uri    "/api/report/"  ,so I need to replace the uuid 
b25424ef1-7ef2-42f4-b898-6ed9181s2dfdf    to string  like  uuidstring"

then  the  metrics  will be 
nginx_request_duration_by_host_bucket{host="app.xx.com",prog="nginx.mtail",status="200",uri="/api/report/uuid"} 2

how can I replace the uuid in regex in mtail config file ?



nginx.mtail

counter request_count          by host, request_uri, status as "nginx_request_count"
counter nginx_log_nomatch_count
/"(?P<host>\S+)" ;;; "(?P<request_uri>\S+)" ;;; (?P<status>\d{3}) ;;; (?P<request_time>\S+) ;;; (?P<upstream_response_time>\S+) ;;; (?P<upstream_addr>\S+) ;;; (?P<upstream_status>\S+)/
/$/ {
    request_count[$host][$request_uri][$status]++
} else {
    nginx_log_nomatch_count++
}

nginx log like this:

"abc.123.com" ;;; "/wechat/query_class" ;;; 204 ;;; 0.001 ;;; 0.001 ;;; "192.168.20.109:9007" ;;; 204
"abc.123.com" ;;; "/clazzes/943b46bf-8de6-41ac-b5d0-d96b4979c53a/teacher_com" ;;; 204 ;;; 7.164 ;;; 7.160, 0.004 ;;; "192.168.20.105:9203, 192.168.20.153:9201" ;;; 502, 204"




nginx.mtail: Runtime error: panic in thread &vm.thread{pc:6, matched:false, matches:map[int][]string{0:[]string(nil), 1:[]string{""}}, time:time.Time{wall:0x0, ext:0, loc:(*time.Location)(nil)}, stack:[]interface {}{false}} at instr "{capref 1 7}": runtime error: index out of range
I0103 14:12:41.381467   18425 vm.go:93] Error occurred at instruction 5 {capref, 1}, originating in nginx.mtail at line 8

the line 2   contains with two upstream_addrs ,and mtail parse faild,  and it cannot work 
Hi,
I'm using mtail on a single host to extract ~14k Prometheus metrics, thus `/metrics` is ~2.7MB and it can generate significant amounts of traffic when polled frequently enough. Is compressing HTTP responses something that could be added to mtail? Thanks!
It seems like systemd-journald support was left out due to the possiblity to read from a named pipe or unix socket. While trying to configure mtail to read from the `/run/systemd/journal/syslog` where systemd-journald forwards all messages to, I got the following error
```
...
I1108 13:21:25.043783    2636 loader.go:224] Loaded program linecount.mtail
I1108 13:21:25.043926    2636 mtail.go:99] Tail pattern "/run/systemd/journal/syslog"
I1108 13:21:25.044052    2636 tail.go:134] AddPattern: /run/systemd/journal/syslog
I1108 13:21:25.044189    2636 log_watcher.go:268] Adding a watch on resolved path "/run/systemd/journal"
I1108 13:21:25.044335    2636 log_watcher.go:248] No abspath in watched list, added new one for /run/systemd/journal
I1108 13:21:25.044479    2636 tail.go:158] glob matches: [/run/systemd/journal/syslog]
I1108 13:21:25.044620    2636 log_watcher.go:268] Adding a watch on resolved path "/run/systemd/journal/syslog"
I1108 13:21:25.044744    2636 log_watcher.go:248] No abspath in watched list, added new one for /run/systemd/journal/syslog
I1108 13:21:25.044886    2636 tail.go:265] openlogPath /run/systemd/journal/syslog false
I1108 13:21:25.045035    2636 log_watcher.go:268] Adding a watch on resolved path "/run/systemd/journal"
I1108 13:21:25.045174    2636 log_watcher.go:253] Found this processor in watched list
I1108 13:21:25.045315    2636 file.go:52] file.New(/run/systemd/journal/syslog, false)
I1108 13:21:25.045454    2636 file.go:111] open failed all retries
W1108 13:21:25.045577    2636 mtail.go:101] attempting to tail "/run/systemd/journal/syslog": open /run/systemd/journal/syslog: no such device or address
...
```

mtail version and command line
```
$ sudo mtail --logs /run/systemd/journal/syslog --progs . --logtostderr -v 5
I1108 13:21:25.037480    2636 main.go:100] mtail version v3.0.0-rc33 git revision aedde73f9c304e4d558a53ece22a5472c87a7fdb go version go1.12.7 go arch amd64 go os linux
```

Related Issues: #58 
while trying to run mtail in kubernetes I get the following warning that mtail found an unexpected path name.
```
W1108 06:14:51.276062       1 tail.go:313] Unexpected bad pathname "/var/log/containers/mtail-vbrpx_kube-system_mtail-4f30cabdee0d95a72429d9a21a24122e8d5be53041269d12aa20d62745817576.log"
```

mtail version and command line:
```   
I1108 06:14:51.237334       1 main.go:100] mtail version v3.0.0-rc33 git revision aedde73f9c304e4d558a53ece22a5472c87a7fdb go version go1.12.7 go arch amd64 go os linux
I1108 06:14:51.237422       1 main.go:101] Commandline: ["/usr/bin/mtail" "--logtostderr" "--logs" "/var/log/*.log" "--logs" "/var/log/containers/*.log" "--port" "3903" "--progs" "/etc/mtail"]
```

Really like the projects work so far.

Hi ,
Linux kernal: Linux 2.6.39-400.286.3.el6uek.x86_64
Its happening usually nowadays that the mtail processes are getting killed after certain time. The most recent error I was able to capture was:

```
panic: runtime error: index out of range

goroutine 11 [running]:
Log file created at: 2019/10/31 03:19:20
bytes.(*Buffer).WriteByte(0xc0003b7980, 0xc00034c736, 0x0, 0x0)
	/usr/local/go/src/bytes/buffer.go:272 +0xa6
bytes.(*Buffer).WriteRune(0xc0003b7980, 0x36, 0x9e8, 0x36, 0x1)
	/usr/local/go/src/bytes/buffer.go:282 +0x14d
github.com/google/mtail/internal/tailer.(*File).Read(0xc0000d5380, 0xacc8a0, 0xc0003b7aa0, 0x0, 0x0)
	/go/src/github.com/google/mtail/internal/tailer/file.go:208 +0x1a9
github.com/google/mtail/internal/tailer.(*Tailer).openLogPath(0xc0001e6e80, 0xc00049a000, 0x29, 0x1, 0x0, 0x0)
	/go/src/github.com/google/mtail/internal/tailer/tail.go:286 +0x425
github.com/google/mtail/internal/tailer.(*Tailer).handleCreateGlob(0xc0001e6e80, 0xacc8a0, 0xc0003b7800, 0xc00049a000, 0x29)
	/go/src/github.com/google/mtail/internal/tailer/tail.go:322 +0x392
github.com/google/mtail/internal/tailer.(*Tailer).ProcessFileEvent(0xc0001e6e80, 0xacc8a0, 0xc0003b7800, 0x2, 0xc00049a000, 0x29)
	/go/src/github.com/google/mtail/internal/tailer/tail.go:239 +0x180
github.com/google/mtail/internal/watcher.(*LogWatcher).sendWatchedEvent(0xc0000d5080, 0xc0004936b0, 0x2, 0xc00049a000, 0x29)
	/go/src/github.com/google/mtail/internal/watcher/log_watcher.go:97 +0x9c
github.com/google/mtail/internal/watcher.(*LogWatcher).sendEvent(0xc0000d5080, 0x2, 0xc00049a000, 0x29)
	/go/src/github.com/google/mtail/internal/watcher/log_watcher.go:91 +0xef
github.com/google/mtail/internal/watcher.(*LogWatcher).runEvents(0xc0000d5080)
	/go/src/github.com/google/mtail/internal/watcher/log_watcher.go:208 +0x1d2
created by github.com/google/mtail/internal/watcher.NewLogWatcher
	/go/src/github.com/google/mtail/internal/watcher/log_watcher.go:72 +0x10b
```

Startup:
```
#!/bin/bash

./mtail \
-poll_interval 500ms \
-port 3901 \
-progs progs/basketPerfLog.mtail \
-logs /rms/logs/bsktapiA/perfKVS/bsktapiA21.log \
-logs /rms/logs/bsktapiA/perfKVS/bsktapiA22.log \
-logs /rms/logs/bsktapiA/perfKVS/bsktapiA23.log \
-logs /rms/logs/bsktapiA/perfKVS/bsktapiA24.log \
```

Mtail version
```
mtail version v3.0.0-rc33 git revision aedde73f9c304e4d558a53ece22a5472c87a7fdb go version go1.12.7 go arch amd64 go os linux
```


FYI : There are no Kernel logs I can see on the server. Thats not good. 
I'm getting this error when running mtail with -one_shot mode:

```
Metrics store:E1031 11:27:10.506026   50999 main.go:179] failed to marshal metrics into json: json: unsupported value: +Inf
```

I started getting this error when I first added a histogram which makes me think it has to do with the le=+Inf  label. But I haven't dug any deeper yet.
Hi,

I have used strptime to parse the timestamp from log, but mtail is still using current system time as the time of the event instead of timestap from log file.

I have built docker image using [Dockerfile](https://github.com/google/mtail/blob/master/Dockerfile) availble in mtail repo.

Docker run command used,
`docker run -it -p 3903:3903 -v /Users/san/progs/tomcat.mtail:/progs/tomcat.mtail -v /Users/san/logs:/logs mtail -logtostderr -progs /progs/tomcat.mtail -logs /logs/localhost_access_log.txt --emit_metric_timestamp`

Below is the output of `mtail --version`
`mtail version v3.0.0-rc33-51-g5b5a874 git revision 5b5a8747c571f4573e68e3a0d38b747860c6f887 go version go1.12.3 go arch amd64 go os linux`

Content of mtail progam,


counter apache_http_requests_total by request_method, uri, request_status
counter apache_http_bytes_total by request_method, http_version, request_status

/^/ +
/\[(?P<timestamp>\d{2}\/\w{3}\/\d{4}:\d{2}:\d{2}:\d{2} [\+|-]\d{4})\] / +
/(?P<client_hostname>[0-9A-Za-z\.:-]+) / +
/(?P<server_hostname>[0-9A-Za-z\.:-]+) / +
/(?P<remote_username>[0-9A-Za-z-\\]+) / +
/- (?P<port>\d{4}) / +
/(?P<request_method>[A-Z]+) (?P<uri>\S+) (?P<http_version>HTTP\/[0-9\.]+) / +
/(?P<request_status>\d{3}) / +
/(?P<response_size>\d+) / +
/(?P<response_time>\d+)/ +
/$/ {
  strptime($timestamp, "02/Jan/2006:15:04:05 -0700")

  apache_http_requests_total[$request_method][$uri][$request_status]++
  $response_size > 0 {
      apache_http_bytes_total[$request_method][$http_version][$request_status] += $response_size
  }
}



Example Log line,
`[17/Sep/2019:08:00:59 +0530] 10.222.45.26 10.222.45.26 CC\Administrator - 8444 GET /cc/rest/en_US/reports/execute/3D0EFF5E1000016D007217F60A6B2D16 HTTP/1.1 200 105401 10`

Above program is correctly parsing the log line, below is the link to regex101 which verifies the regex,
https://regex101.com/r/2PmsWv/3

Output from /metrics endpoint
`apache_http_requests_total{prog="tomcat.mtail",request_method="GET",request_status="200",uri="/cc/rest/en_US/reports/execute/3D0EFF5E1000016D007217F60A6B2D16"} 1 1568687459000`

Here timestamp `1568687459000` is the time when mtail ran instead of `17/Sep/2019:08:00:59 +0530` from log.