What I've done is just clone and compile using WSL since I dont have a linux environment at present, however the output tga file seems to be corrupted like this:

![output](https://user-images.githubusercontent.com/13270130/71339496-a1e5d800-258e-11ea-9c5f-c46c193ed983.PNG)

Is there anything to do with WSL like compatibility?

> Frequent bug: while sorting by y-coordinate, the vertices are sorted, but the data coming with the vertices is not.
> Gouraud shading, forgot to sort intensities

In my case I was calculating a barycentric coordinate of one vertex and assigning it to a different vertex by mistake.
The artifacts looked exactly the same as you presented, if it is the same problem then the description could be more informative.
This tutorial is very good, but there are often quite difficult sentences that introduce new terminology without any definition. Perhaps there should be a note that some amount of geometry or other kind of background knowledge is a prerequisite. I keep getting stuck trying to figure out the point of an example because the overall concept and the terminology used is not explained clearly.
Thank you for your work,
It is not clear which direction constitutes your convention or choice of axes. Can you please add 3 lines that show which direction is which axis ?[https://github.com/ssloy/tinyrenderer/wiki/Lesson-3:-Hidden-faces-removal-(z-buffer)#even-simpler-let-us-lose-a-dimension-y-buffer](url)

It is not clear which dimension you are eliminating to end up with the Y-buffer. 
Hi. I used your triangle rasterisation code and found a problem when drawing two adjacent triangles. Sometimes there are missing pixels between them.
![image](https://user-images.githubusercontent.com/3807626/55289895-e87a1d80-53d4-11e9-957e-e0f57bdce525.png)
I found that the problem is how you calculate
int segment_height = t1.y - t0.y + 1
the "+1" leads to the error. I assume you made it to avoid division by zero, but it's wrong.
Here is how a did it:
```
	auto addTriangle = [ & ]( Vec2i t0, Vec2i t1, Vec2i t2 )
	{
		if ( t0.y > t1.y ) std::swap( t0, t1 );
		if ( t0.y > t2.y ) std::swap( t0, t2 );
		if ( t1.y > t2.y ) std::swap( t1, t2 );
		int total_height = t2.y - t0.y;

		if ( t0.y != t1.y )
		{
			int segment_height = t1.y - t0.y;
			for ( int y = t0.y; y <= t1.y; y++ )
			{
				int A = t0.x + ( t2.x - t0.x ) * ( y - t0.y ) / total_height;
				int B = t0.x + ( t1.x - t0.x ) * ( y - t0.y ) / segment_height;
				drawLine( y, A, B ); // draws a horisontal line
			}
		}

		if ( t1.y != t2.y )
		{
			int segment_height = t2.y - t1.y;
			for ( int y = t1.y; y <= t2.y; y++ )
			{
				int A = t0.x + ( t2.x - t0.x ) * ( y - t0.y ) / total_height;
				int B = t1.x + ( t2.x - t1.x ) * ( y - t1.y ) / segment_height;
				drawLine( y, A, B );
			}
		}
	};
```

Here is a quote from lesson 1:
> We should note that each division has the same divisor. Letâ€™s take it out of the loop. [...] 

I can't understand how noting that each division has the same divisor helps us for making next improvements.
So I am following your course here, and I struggled a bit with the shading lecture. This might be a compiler issue, meaning, the compiler stops me from doing things that I do not want.

My geometry.h basically looks the same as here, and multiplying a vector with a scalar value looks like this:
 
```cpp
template <typename T>
struct Vector2D {
...
    inline Vector2D operator*(float scalar) const {
        return Vector2D{x*scalar, y*scalar};
    }
...
```
However I found that, since I am following the GSL (core guidelines for c++), and using initializer list constructors ( using the {}, instead of () ), the compiler will either complain, or result in faulty code. This might be due to clang in this case, but I suspect MSVC++ and g++ will result in the same compiler error:
```
error: type 'float' cannot be narrowed to 'int' in initializer list [-Wc++11-narrowing]
```
So, changing that to:
```cpp
    inline Vector2D operator*(float scalar) const {
        return Vector2D{static_cast<T>(x*scalar), static_cast<T>(y*scalar)};
    }
```
Fixes the issue. These are not issues related to the course in itself, but perhaps might be worth noting. If it's irrelevant, just close and remove this issue. Thanks again for awesome content.
Hey there, I was wondering if you have any plans to add anti-aliasing to this course? Would be pretty cool to have and it's not much more complex than a lot of other topics treated in here.

Thanks.
