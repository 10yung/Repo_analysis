**Describe the bug**

`typescript-resolvers` can be used to generate type signatures for field resolvers.

When all args of a field are optional, the type of each arg should be `T | null | undefined` as missing args are passed to the resolver as `undefined` when resolving the query.

However, `typescript-resolvers` only generates the signature `T | null` which may lead to subtle bugs, e.g. when `args.foo !== null` is used to check if an arg is set.

If at least one of the args to a field is required, the correct signature is generated.

**To Reproduce**

Steps to reproduce the behavior:

Use https://graphql-code-generator.com/#live-demo to see the bug in action.

1. My GraphQL schema:

```graphql
schema {
  query: Query
}

type Query {
  allOptional(optional: Int): Boolean
  someRequired(optional: Int, required: Int!): Boolean
}
```

2. My `codegen.yml` config file:

```yml
generates:
  server-types.ts:
    plugins:
      - typescript
      - typescript-resolvers
```

3. The generated output (notice the missing `RequireFields` wrapper in `allOptional`):

```typescript
export type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
  allOptional?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, QueryAllOptionalArgs>,
  someRequired?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<QuerySomeRequiredArgs, 'required'>>,
};
```

**Expected behavior**

The output should generate a type for `allOptional`'s field resolver that ensures that all args may be `undefined`.

`RequireFields` does this implicitly by marking any fields not listed in its second generic argument as optional (the first part in the following definition, before `&`):

```typescript
export type RequireFields<T, K extends keyof T> = { [X in Exclude<keyof T, K>]?: T[X] } & { [P in K]-?: NonNullable<T[P]> };
```

That is why the `optional` arg in the field `someRequired` in the example above is correctly typed as `T | null | undefined`.

It seems that `RequireFields<QueryAllOptionalArgs, never>` could achieve this, i.e. instead of dropping `RequireFields` when no args are required use `never` for the list of required arg names/keys.

**Environment:**

- OS: any
- `@graphql-codegen/typescript-resolvers`: 1.11.0
- NodeJS: any

**Describe the bug**

When trying to generate types for schema, using an empty Query type then importing another file that includes an extension Query leads to an error saying that `Query` must define one or more fields.

**To Reproduce**
Steps to reproduce the behavior:

GraphQL schema (`schema.graphql`):

```graphql
# import * from "users.graphql"

type Query
```

Inside `users.graphql`:

```graphql
extend type Query {
  users: [User!]!
}

type User {
  name: String!
}
```

3. `codegen.yml` config file:

```yml
schema: api/graphql/schema.graphql
generates:
  common/types/schema.ts:
    plugins:
      - typescript
      - typescript-resolvers
```

**Expected behavior**

Since `users.graphql` extends Query I was expecting the type generation to work as expected, but it's telling me Query needs one or more fields. Is this a `graphql-import` issue? I've tried different import variants (`#import "users.graphql"`, `#import User from "users.graphql"`) to no avail.

**Environment:**

- OS: macOS 10.15.1
- `@graphql-codegen/...`: 1.11.2
- NodeJS: 11.15.0

**Describe the bug**

While validating query file with `@connection` directive written correctly, library throws a type error: `GraphQLDocumentError: Expected type UserFilterInput, found ["filter"].`

which is incorrect - `@connection` directive should expect `[String]` type instead of `UserFilterInput`

While manually editing the generated file (the generated document gql` ... my query ... `) and firing request - it works correctly so no type error should be thrown.

**To Reproduce**

https://codesandbox.io/s/angry-shockley-2gnms?fontsize=14&hidenavigation=1&theme=dark

1. My GraphQL schema:

```graphql
type Query {
    user(filter: UserFilterInput!, page: Int, perPage: Int): [User]!
}

input UserFilterInput {
    id: ID!
}

type User {
    id: ID!
    username: String!
    email: String!
}
```

2. My GraphQL operations:

```graphql
query user {
    user(filter: { id: 1 }, page: 1, perPage: 2) @connection(key: "PaginatedUsers", filter: ["filter"]) {
        id
        username
        email
    }
}
```

3. My `codegen.yml` config file:

```yml
schema: schema.graphql
documents: document.graphql
generates:
  types.ts:
    plugins:
      - 'typescript'
      - 'typescript-operations'
      - 'typescript-react-apollo'
      - 'typescript-resolvers'
```

**Expected behavior**
`filter` argument inside `@connection` directive should be of type `[String]` no matter what query it applies to.

**Environment:**

- OS: MacOS Mojave 10.14.6
- `@graphql-codegen/...`: 1.11.0 (as well as 1.0.7 on my localhost)
- NodeJS: v10.16.0

**Additional context**

**Error log:**
```
AggregateError:
        GraphQLDocumentError: Expected type UserFilterInput, found ["filter"].
            at document.graphql:2:93
        at Object.checkValidationErrors (/sandbox/node_modules/@graphql-toolkit/
common/index.cjs.js:306:15)
        at Object.codegen (/sandbox/node_modules/@graphql-codegen/core/index.cjs
.js:92:16)
    AggregateError:
        GraphQLDocumentError: Expected type UserFilterInput, found ["filter"].
            at document.graphql:2:93
        at Object.checkValidationErrors (/sandbox/node_modules/@graphql-toolkit/
common/index.cjs.js:306:15)
        at Object.codegen (/sandbox/node_modules/@graphql-codegen/core/index.cjs
.js:92:16)


Something went wrong
```

`validate-documents.ts` is probably incorrectly identifying arguments of `query` argument vs `@connection` directive argument

Related #3268
- Use `mergeSchemas` instead of `mergeTypedefs` to add definitions to the schema
- Use `exclusions` instead of visitors for patching federated schemas

Adds the optional (disabled by default) `FieldWrapper` type for wrapping field definitions on objects and interfaces (but _not_ input types).

In addition to returning a value of the actual type for a field, objects can also return Promises to that type or functions that do the same. It is currently not possible to achieve that by reconfiguring the code generator.

This adds the ability to wrap field definitions in a `FieldWrapper`, which defaults to `FieldWrapper<T> = T`, thus not changing behavior in any way. To get the above-described behavior, a user would need to set `fieldWrapperValue` to `T | Promise<T> | (() => T | Promise<T>)` or something similar in addition to enabling field wrapping by setting `wrapFieldDefinitions` to `true`.

That may be overkill, but I wanted to avoid altering the current existing behavior unexpectedly.

Closes: #3112
Allows `Resolver` to be a value rather than just a function by adding `TResult` and `Promise<TResult>` as possible types.

Resolvers are generally functions, but they are also allowed to be values.

Related: #3112
**Is your feature request related to a problem? Please describe.**

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->
Now, graphql codegen creates Typescript code for enum as a normal enum. It's better if we use `const enum`, the compiler can provide more optimization


**Describe the solution you'd like**
<!-- A clear and concise description of what you want to happen. -->

In spite of generating `enum`, we should return `const enum`

**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

**Additional context**
<!-- Add any other context or screenshots about the feature request here. -->

**Is your feature request related to a problem? Please describe.**

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

`@graphql-toolkit/apollo-engine-loader` depends on `apollo-language-server` which is a huge dependency. But we are not using Apollo Server and we do not need this feature.

**Describe the solution you'd like**
<!-- A clear and concise description of what you want to happen. -->

The dependency tree includes a lot of modules of Apollo Server that do not seem to relate to GraphQL code generation, such as `apollo-link`. It would make more sense to make the loaders into plugins.

**Describe alternatives you've considered**
<!-- A clear and concise description of any alternative solutions or features you've considered. -->

It should also be possible to make `apollo-engine-loader` more lightweight so it doesn't depend on `apollo-language-server`.

**Additional context**
<!-- Add any other context or screenshots about the feature request here. -->

```
$ yarn why apollo-language-server
yarn why v1.21.1
[1/4] 🤔  Why do we have the module "apollo-language-server"...?
[2/4] 🚚  Initialising dependency graph...
[3/4] 🔍  Finding dependency...
[4/4] 🚡  Calculating file sizes...
=> Found "apollo-language-server@1.17.2"
info Reasons this module exists
   - "@graphql-codegen#cli#@graphql-toolkit#apollo-engine-loader" depends on it
   - Hoisted from "@graphql-codegen#cli#@graphql-toolkit#apollo-engine-loader#apollo-language-server"
info Disk size without dependencies: "8.8MB"
info Disk size with unique dependencies: "42.48MB"
info Disk size with transitive dependencies: "8.8MB"
info Number of shared dependencies: 59
✨  Done in 1.29s.
```



documentMode=string is perfect for graphql-request, but it simply
inlines any referenced fragments. This means that fragments that
are included more than once in a single query for example, by being
included by another fragment in that query, as well as at the top level -
are thus duplicated in the query, and then fail when send to the server.

This PR parses and stringifies queries ahead of time such that
no duplicates occur.