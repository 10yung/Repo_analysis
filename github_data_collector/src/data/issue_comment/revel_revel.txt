When running example in homepage <https://revel.github.io/> using go 1.13.5:

```sh
go get github.com/revel/cmd/revel
git clone https://github.com/revel/examples $GOPATH/src/github.com/revel/examples
revel run github.com/revel/examples/chat
```
I only get a crash on Windows and Debian 10:

Windows:

```
 C:â–¶revel /v run github.com/revel/examples/chat
INFO  17:50:49   revel.go:94: Import path is absolute or not specified path=
INFO  17:50:49 command_config.go:133: Checking import path C:\Users\lboulard with C:\Users\lboulard\go
INFO  17:50:49   revel.go:94: Returned import path                     path= buildpath=C:\\Users\\lboulard\\go
INFO  17:50:49 command_config.go:301: Seeking remote package                   using= remote=github.com/revel/revel
INFO  17:50:49 command_config.go:301: Resolved called Seeking remote package   using= remote=github.com/revel/revel
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xc0000005 code=0x0 addr=0x0 pc=0x6468dc]

goroutine 1 [running]:
github.com/revel/cmd/utils.FindSrcPaths(0x0, 0x0, 0x9434e8, 0x16, 0x0, 0xc00013c090, 0x0, 0x0, 0x4, 0x4, ...)
        C:/Users/lboulard/go/src/github.com/revel/cmd/utils/file.go:358 +0x3dc
github.com/revel/cmd/model.(*CommandConfig).SetVersions(0xc0000021e0, 0x941dca, 0x14)
        C:/Users/lboulard/go/src/github.com/revel/cmd/model/command_config.go:301 +0xd1
github.com/revel/cmd/model.(*CommandConfig).UpdateImportPath(0xc0000021e0, 0x11, 0x3)
        C:/Users/lboulard/go/src/github.com/revel/cmd/model/command_config.go:154 +0x5f5
main.main()
        C:/Users/lboulard/go/src/github.com/revel/cmd/revel/revel.go:94 +0x16f
```
Debian 10:

```
$ revel -v run github.com/revel/examples/chat
INFO  17:51:42   revel.go:94: Returned import path                     path=github.com/revel/examples/chat buildpath=/home/lboulard/go
INFO  17:51:42 command_config.go:301: Seeking app package                      app=github.com/revel/examples/chat
INFO  17:51:42 command_config.go:301: Seeking remote package                   using=github.com/revel/examples/chat remote=github.com/revel/revel
INFO  17:51:42 command_config.go:301: Resolved called Seeking remote package   remote=github.com/revel/revel  using=github.com/revel/examples/chat
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x6524ba]

goroutine 1 [running]:
github.com/revel/cmd/utils.FindSrcPaths(0x7ffdf1d5446c, 0x1e, 0x949953, 0x16, 0x0, 0xc00012c090, 0x0, 0x0, 0x4, 0x4, ...)
        /home/lboulard/go/src/github.com/revel/cmd/utils/file.go:358 +0x3ca
github.com/revel/cmd/model.(*CommandConfig).SetVersions(0xc00010e000, 0x948439, 0x14)
        /home/lboulard/go/src/github.com/revel/cmd/model/command_config.go:301 +0xca
github.com/revel/cmd/model.(*CommandConfig).UpdateImportPath(0xc00010e000, 0xe, 0x3)
        /home/lboulard/go/src/github.com/revel/cmd/model/command_config.go:154 +0x5f3
main.main()
        /home/lboulard/go/src/github.com/revel/cmd/revel/revel.go:94 +0x160

```
## go version :  go1.13.1 windows/amd64 

## revel version
Revel executing: displays the Revel Framework and Go version
WARN  17:02:15 version.go:71: Unable to extract version information from Revel library  error,err=nil LOG15_ERROR="Normalized odd
number of arguments by adding nil"
Revel Framework :       Unknown (0.21.0 remote master branch)
Revel Cmd       :       0.21.1  (0.21.1 remote master branch)
Revel Modules   :       Unknown (0.21.0 remote master branch)

go version go1.13.1 windows/amd64

## when run new project 

C:\workpaces\envs\golib>revel run -v -a newApp
INFO  17:04:45   revel.go:94: Returned import path                     path=newApp buildpath=C:\\workpaces\\envs\\golib
INFO  17:04:45 command_config.go:301: Seeking app package                      app=newApp
INFO  17:04:45 command_config.go:301: Seeking remote package                   remote=github.com/revel/revel  using=newApp
INFO  17:04:45 command_config.go:301: Resolved called Seeking remote package   using=newApp remote=github.com/revel/revel
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xc0000005 code=0x0 addr=0x0 pc=0x642c5c]

goroutine 1 [running]:
github.com/revel/cmd/utils.FindSrcPaths(0xc00001c100, 0x6, 0x93d490, 0x16, 0x0, 0xc0000f4990, 0x0, 0x0, 0x4, 0x4, ...)
        C:/workpaces/envs/goenv/pkg/mod/github.com/revel/cmd@v0.21.1/utils/file.go:358 +0x3dc
github.com/revel/cmd/model.(*CommandConfig).SetVersions(0xc0000021e0, 0x93bd72, 0x14)
        C:/workpaces/envs/goenv/pkg/mod/github.com/revel/cmd@v0.21.1/model/command_config.go:301 +0xd1
github.com/revel/cmd/model.(*CommandConfig).UpdateImportPath(0xc0000021e0, 0x17, 0x3)
        C:/workpaces/envs/goenv/pkg/mod/github.com/revel/cmd@v0.21.1/model/command_config.go:154 +0x5f5
main.main()
        C:/workpaces/envs/goenv/pkg/mod/github.com/revel/cmd@v0.21.1/revel/revel.go:94 +0x16f

The command `revel  -X qissm/app.Version=17 package -a qissm` results in an error that says that the command tried to import a package called `qissm/app.Version=17` ? Do i have to format my command differently ? To my knowledge i did what is referenced in your manual at https://revel.github.io/manual/tool.html. Can someone help me out ?  
The first issue that I ran into, trying to copy the [Booking example](https://github.com/revel/examples/blob/master/booking/app/controllers/app_test.go) in order to use `go test` for full coverage. When I was trying to use the [Get method](https://github.com/revel/revel/blob/master/testing/testsuite.go#L107) for the testing suite, it would instantly give me a 


```
revel  panic.go:522: Recovered error in startup                error="runtime error: invalid memory address or nil pointer dereference"
panic: runtime error: invalid memory address or nil pointer dereference [recovered]
        panic: Fatal error in startup
[signal 0xc0000005 code=0x0 addr=0x8 pc=0x631651]
```


After a few hours of debugging, I finally realized that this was actually the correct response for the test, because it was actually the Get method was appending the wrong URI, causing a panic into a test failure.

What I had to do was actually use [GetCustom](https://github.com/revel/revel/blob/master/testing/testsuite.go#L112), and used this instead.

```
import(
	"testing"
	"github.com/revel/modules/server-engine/gohttptest/testsuite"
)
func TestForGETRequests(t *testing.T) {
	suite := testsuite.NewTestSuite(t)

	url := "http://" + suite.Host() + "/somePath"
	suite.GetCustom(url)
}
```

However, the Get method works normally using the normal test format from the main page tutorial, but I think it's better to use this way to get test coverage.

I was wondering why this was an issue, and if anyone ran into this issue too, I hope it helps.
Hi guys.
About the "revel package" command.
Revel builds the distribution in the /tmp folder. You need to delete the build folder from /tmp after creating the archive.
Because, as standard for Linux /tmp, it is a tmpfs file system located in memory.
At the moment, if you build the package several times, then there will be out of memory ..
Fix it pls asap.
Hi guys, Im having a problem similar to #1419 

```
cagrilocal:sozluk macbook$ revel run
ERROR 21:08:47 command_config.go:154: Failed to find Revel version:            error="open /Users/macbook/Development/go/pkg/mod/github.c/github.com/revel/revel/version.go: no such file or directory" path=/Users/macbook/Development/go/pkg/mod/github.c 
CRIT  21:08:47 command_config.go:155: Failed to fetch revel versions           error="Failed to parse Revel version error:[error 1:1: expected 'package', found 'EOF']" 
panic: Failed to fetch revel versions
```
this part doesnt seem correct to me
open /Users/macbook/Development **/go/pkg/mod/github.c/github.com/revel/revel/version.go** 
```
cagrilocal:sozluk macbook$ revel version
Revel executing: displays the Revel Framework and Go version
WARN  21:06:51 version.go:71: Unable to extract version information from Revel error,err=nil LOG15_ERROR="Normalized odd number of arguments by adding nil" 
WARN  21:06:51 version.go:71: Unable to extract version information from Revel Modules error="open /Users/macbook/Development/go/pkg/mod/github.com/revel/modules@v0.0.0-201github.com/revel/modules/version.go: no such file or directory" 
Revel Framework	:	Unknown	(0.21.0 remote master branch)
Revel Cmd	:	0.21.1	(0.21.1 remote master branch)
Revel Modules	:	Unknown	(0.21.0 remote master branch)

go version go1.12.7 darwin/amd64
```

I tried `go get -u github.com/revel/cmd` but still same. any ideas?  

Go env:
```
cagrilocal:model macbook$ go env
GOARCH="amd64"
GOBIN=""
GOCACHE="/Users/macbook/Library/Caches/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="darwin"
GOOS="darwin"
GOPATH="/Users/macbook/Development/go"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/Cellar/go/1.12.7/libexec"
GOTMPDIR=""
GOTOOLDIR="/usr/local/Cellar/go/1.12.7/libexec/pkg/tool/darwin_amd64"
GCCGO="gccgo"
CC="clang"
CXX="clang++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/b3/8l0smqgd4591fb_bxj47jj940000gn/T/go-build137810273=/tmp/go-build -gno-record-gcc-switches -fno-common"
```
Golang version: 1.13.1
revel version: v0.21.0

expected:
recompiling after changes

what happened:
nothing


environment:

  -  linux (ubuntu 18.04) 
  -  vagrant with ubuntu 18.04 running a docker inside
  -  Docker version 18.09.1, build 4c52b90
  - Vagrant version 2.0.3

docker-compose:
 ```
go-api:
    image: golang
    env_file:
      - env/api-development.env
    volumes:
      - ./apps/test-go:/var/www/test-go
    environment:
      - VIRTUAL_HOST=go.test.local
      - GOPATH=/var/www/test-go
    command: export PATH="$PATH:$GOPATH/bin"
  
    ports:
      - "3000"
    tty: true
    networks: 
      - intern  
```

  
config:
```
################################################################################
# Revel configuration file
# More info at http://revel.github.io/manual/appconf.html
################################################################################

# Revel build section
# This section contains values that are not reloadable
################################################################################

# Comma delimited list of folders that are included with the package, or build commands
# If you want to not include folders within these ones prefix the folder with a . to make it hidden
package.folders = conf, public, app/views




# Revel reconfigurable section
#
################################################################################


# Sets `revel.AppName` for use in-app.
# Example:
#   `if revel.AppName {...}`
app.name = test-api
# A secret string which is passed to cryptographically sign the cookie to prevent
# (and detect) user modification.
# Keep this string secret or users will be able to inject arbitrary cookie values
# into your application
app.secret = kdri73HCHV1zVrp0zGwOsWGWdQNQcGk4Vupx212o5iBwqOnKyZtLRQrElHnFt6rb

# Revel running behind proxy like nginx, haproxy, etc.
app.behind.proxy = false


# The IP address on which to listen.
http.addr = 0.0.0.0

# The port on which to listen.
http.port = 3000

# Whether to use SSL or not.
http.ssl = false

# Path to an X509 certificate file, if using SSL.
#http.sslcert =

# Path to an X509 certificate key, if using SSL.
#http.sslkey =


# Timeout specifies a time limit for request (in seconds) made by a single client.
# A Timeout of zero means no timeout.
http.timeout.read = 90
http.timeout.write = 60


# For any cookies set by Revel (Session,Flash,Error) these properties will set
# the fields of:
# http://golang.org/pkg/net/http/#Cookie
#
# Each cookie set by Revel is prefixed with this string.
cookie.prefix = REVEL

# A secure cookie has the secure attribute enabled and is only used via HTTPS,
# ensuring that the cookie is always encrypted when transmitting from client to
# server. This makes the cookie less likely to be exposed to cookie theft via
# eavesdropping.
#
# Defaults to false. If 'http.ssl' is enabled, this will be defaulted to true.
# This should only be true when Revel is handling SSL connections. If you are
# using a proxy in front of revel (Nginx, Apache, etc), then this should be left
# as false.
# cookie.secure = false

# Limit cookie access to a given domain.
#cookie.domain =

# Define when your session cookie expires.
# Values:
# "720h"
#   A time duration (http://golang.org/pkg/time/#ParseDuration) after which
#   the cookie expires and the session is invalid.
# "session"
#   Sets a session cookie which invalidates the session when the user close
#   the browser.
session.expires = 720h


# The date format used by Revel. Possible formats defined by the Go `time`
# package (http://golang.org/pkg/time/#Parse)
format.date     = 2006-01-02
format.datetime = 2006-01-02 15:04


# Determines whether the template rendering should use chunked encoding.
# Chunked encoding can decrease the time to first byte on the client side by
# sending data before the entire template has been fully rendered.
results.chunked = false

# Compression of your HTML and CSS files with gzip typically saves around 
# fifty to seventy percent of the file size. This means that it takes less 
# time to load your pages, and less bandwidth is used over all. 
# To enable compression, set value to true.
results.compressed = false



# The default language of this application.
i18n.default_language = en

# The default format when message is missing.
# The original message shows in %s
#i18n.unknown_format = "??? %s ???"


# Module to serve static content such as CSS, JavaScript and Media files
# Allows Routes like this:
#  `Static.ServeModule("modulename","public")`
module.static = github.com/revel/modules/static



################################################################################

# Section: dev
# This section is evaluated when running Revel in dev mode. Like so:
#   `revel run path/to/myapp`
[dev]

# This sets `revel.DevMode` for use in-app.
# Example:
#   `if revel.DevMode {...}`
#   or in your templates with
#   ``
# Values:
# "true"
#   Sets `DevMode` to `true`.
# "false"
#   Sets `DevMode` to `false`.
mode.dev = true


# Pretty print JSON/XML when calling RenderJSON/RenderXML
# Values:
# "true"
#   Enables pretty printing.
# "false"
#   Disables pretty printing.
results.pretty = true


# Watch your applicaton files for changes and automatically rebuild
# Values:
# "true"
#   Enables auto rebuilding. 
# "false"
#   Disables auto rebuilding.
watch = true


# Define when to rebuild new changes.
# Values:
# "normal"
#   Rebuild when a new request is received and changes have been detected.
# "eager"
#   Rebuild as soon as changes are detected.
watch.mode = normal

# Watch the entire `$GOPATH` for changes.
#Values:
# "true"
#   Includes `$GOPATH` in watch path.
# "false"
#   Excludes `$GOPATH` from watch path. Default value.
watch.gopath = true


# Module to run code tests in the browser
# See:
#   http://revel.github.io/manual/testing.html
module.testrunner = github.com/revel/modules/testrunner


# Where to log the various Revel logs
# Values:
# "off"
#   Disable log output.
# "stdout"
#   Log to OS's standard output.
# "stderr"
#   Log to Os's standard error output. Default value.
# "relative/path/to/log"
#   Log to file.
log.all.filter.module.app = stdout    # Log all loggers for the application to the stdout
log.error.nfilter.module.app = stderr # Everything else that logs an error to stderr
log.crit.output = stderr              # Everything that logs something as critical goes to this

# Revel request access log
# Access log line format:
# INFO  21:53:55 static server-engine.go:169: Request Stats                             ip=127.0.0.1 path=/public/vendors/datatables.net-buttons/js/buttons.html5.min.js method=GET start=2017/08/31 21:53:55 status=200 duration_seconds=0.0002583 section=requestlog
log.request.output = stdout



################################################################################
# Section: prod
# This section is evaluated when running Revel in production mode. Like so:
#   `revel run path/to/myapp prod`
# See:
#  [dev] section for documentation of the various settings
[prod]

mode.dev = false

results.pretty = false

watch = false

module.testrunner =

log.warn.output  = log/%(app.name)s-warn.json    # Log all warn messages to file
log.error.output = log/%(app.name)s-error.json   # Log all errors to file
log.crit.output = log/%(app.name)s-critical.json # Log all critical to file

# Revel request access log (json format)
# Example:
#   log.request.output = %(app.name)s-request.json
log.request.output = log/%(app.name)s-requests.json

```
I have to do `t.SessionEngine = InitRedisSessionEngine()` in `Before()`
According to this article: https://hunter2.com/use-golang-these-mistakes-could-compromise-your-apps-security
Hi all, first up: Revel is great!

I just spend a good chunk of time trying to figure out what was wrong in one of my deployed revel apps. I discovered that if your controller does `return c.RenderError(err)` it *doesn't* get logged.

The default 500.html contains 'This exception has been logged' - so i found this surprising that errors *aren't* logged by default.

Would you please consider adding a call to eg `c.Log.Error(err.Error())` to the top of RenderError? I believe it'd follow the 'principle of least surprise' to do so :)

Have a great week all.