tried to use register_fn. code compiles without errors but when i use the function i registered in code i got an error from the engine saying there is no such a function, same error as when i ran it without the register_fn statement. Tried doing it like this too RegisterFn::register_fn(&mut engine, "name", func);
but still same results. Also could not get the eval to return array from the script something about no clone for [f32] might be a rust problem but work around should be built in the language for returning arrays. The idea of the language and the syntax and the way you use it in code looks super cool and lightwieght and perfect for what I'm trying to do but honestly without a working register_fn or returning arrays there really isn't any way to get useful output from this engine thus rendering it useless. Thanks for making it but just thought id let you know my experience.
Sadly, `Engine` is neither `Sync` nor `Send`, which makes it difficult to use in things like game engines where there's a lot of concurrency.
I'm not sure if that's easily doable because rhai seems to heavily depend on boxed closures, and just requiring a `F + Sync + Send` would probably break a lot of code..
Sorry if this question already asked, but I can't understand how can I put for example string to the scope? I'm trying to make something like string parser that will get strings as input and parse them by user script in rhai. Thanks.

UPDATE:
So it is finally works.
As I understood I can write a function in user script and eval this script by the engine. After that the function will be available to be called by the call_fn with my params. 


Hello. I got an error at compile time. Here are the details. 

```
rustc --version
rustc 1.34.1 (fc50f328b 2019-04-24)

```
```
cargo version
cargo 1.34.0 (6789d8a0a 2019-04-01)
```

Cargo.toml
```
[package]
name = "grok_ls"
version = "0.1.0"
authors = ["Anton D. Stavinsky "]
edition = "2018"


[dependencies]
# grok = "1.0"
# serde_json = "1.0"
rhai = "0.8.1"

```

Compile error
```
   Compiling rhai v0.8.2
error[E0034]: multiple applicable items in scope
  --> /home/stavinsky/.cargo/registry/src/github.com-1ecc6299db9ec823/rhai-0.8.2/src/any.rs:40:26
   |
40 |         let boxed = self.type_id();
   |                          ^^^^^^^ multiple `type_id` found
   |
note: candidate #1 is defined in the trait `any::Any`
  --> /home/stavinsky/.cargo/registry/src/github.com-1ecc6299db9ec823/rhai-0.8.2/src/any.rs:5:5
   |
5  |     fn type_id(&self) -> TypeId;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: to disambiguate the method call, write `any::Any::type_id(&self)` instead
note: candidate #2 is defined in the trait `std::any::Any`
   = help: to disambiguate the method call, write `std::any::Any::type_id(&self)` instead

error: aborting due to previous error

For more information about this error, try `rustc --explain E0034`.
error: Could not compile `rhai`.

To learn more, run the command again with --verbose.
```
I hit this one while experimenting with for-loops https://github.com/stevedonovan/rhai/tree/for-stmt:
```rust
for a in [1,"hello","dolly"] {
  if a == "hello" { //
      break
  }
}
```
Which one would expect to work from exposure to other dynamic languages. However, `==` is not defined for (integer,string) so we get a complaint!

I feel that `==` needs special treatment; if the types are different, then it will always return false, otherwise match the desired type exactly.  Not a difficult thing to do, and faster than checking the whole overloaded set of `==` functions, but deserving of discussion.

The other option is to move towards strict, static typing but that would take a good deal of work!

Not having error handling (other than panicking) is a problem when integrating non-trivial Rust code with Rhai.  This proposal basically adds unchecked exceptions so that functions can terminate script execution with a clean error.

First, `EvalAltResult` gets a new variant, `ErrorRuntime(String)`. A user-defined function may 'throw' a Rhai exception by returning a `Result<T,EvalAltResult>`; a Rhai function may call a predefined `throw` function.

Implementation is fairly straightforward. We keep a map of type ids for all `Result<T,EvalAltResult>` of interest, providing a closure that can match this for each specific `T` and return a `Result<Box<Any>,EvalAltResult>` which Rhai passes on. These closures are created in `register_type` (finally, no longer a no-op!)

There will be some overhead with doing a hash lookup on all returned values, and with re-boxing 'exception' values.

This is implementable now, as an incremental step towards either Rust-style explicit result handling or catchable exceptions.



I've been playing with generating better error messages:

```
examples$ cargo run --example repl
> f([1,2])
error: Function not found: f (array)
> x + 1
error: Variable not found: x
> 1 + 2.0
error: Function not found: + (i64,f64)
```
Fairly minimal changes (mostly to how errors are displayed).

Any interest in a PR?

(in the _first_ case, could indicate that there is no such function `f`. We can dump all the overloaded functions matching a name, but that might be too noisy)
Is it like a stack?
I see documentation on how to define structs in Rust and then make them available for use in Rhai. These structs can have fields that are accessible with dot notation, e.g:
```
let foo = new_ts(); // new_ts() is a Rust-defined fn that returns a Rust-defined struct
foo.bar = 5;
```
Is there any way to create an object in Rhai without first having to define it in Rust? I'm looking for something like Javascript's objects which allow you do something like this:
```
var foo = { bar: 0 };
foo.bar = 5;
```

Is this on the roadmap for Rhai?
Just a tracking issue for projects.

Apparently I've got the first published crate that uses Rhai as a dependency:

https://github.com/stevedonovan/findr

