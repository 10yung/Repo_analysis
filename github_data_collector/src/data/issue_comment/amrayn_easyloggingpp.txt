MUSL libc does not natively have libexecinfo. Adding this change,
make execinfo optional. Also made a PR https://github.com/MisterTea/EternalTerminal/pull/269 that uses this as part of their dependencies. So this would make a complete set if both PRs get merged.

Signed-off-by: Nathan Owens <ndowens04@gmail.com>

### This is a

- [x] New feature


### I have

- [x] Merged in the latest upstream changes
- [x] Tested

Hi,

I have simple code:
```c++
#include "easylogging++.h"

INITIALIZE_EASYLOGGINGPP

int main() {
    LOG(INFO) << "Hello";
    return 0;
}
```

The build is successful:
```shell
g++ main.cpp -std=c++11 -o tmp
```

But I got error running tmp:
```shell
./tmp: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.20' not found (required by ./tmp)
./tmp: /lib64/libstdc++.so.6: version `GLIBCXX_3.4.21' not found (required by ./tmp)
```

I used the latest release of your library + centos-release-7-7.1908.0.el7.centos.x86_64 + g++ (GCC) 7.3.0
I am getting this error in compile time using the latest release (v9.96.7), vs2015 and Qt5.9.6

easylogging++.h(3076): error C2248: 'QString::QString': cannot access private member declared in class 'QString'
When building an automatic unit test with Qt Creator and Qt 5.12.5, a link error occurs 

when doing 
QString first("12345");
LOG(info) << first;

xxxxxxx\logging\easylogging++.h:3140: error: invalid operands to binary expression ('base::type::stringstream_t' (aka 'basic_stringstream<char>') and 'const QString')
  ELPP_SIMPLE_LOG(const Class&)
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~

This only happens in QtUnitTest. In Application it seems fine.
template <typename M>
class ScopedLock : base::NoCopy {
 public:
  explicit ScopedLock(M& mutex) {
    m_mutex = &mutex;
    m_mutex->lock();
  }

  virtual ~ScopedLock(void) {
    m_mutex->unlock();
  }
 private:
  M* m_mutex;
  ScopedLock(void);
};

class ThreadSafe {
 public:
  virtual inline void acquireLock(void) ELPP_FINAL { m_mutex.lock(); }
  virtual inline void releaseLock(void) ELPP_FINAL { m_mutex.unlock(); }
  virtual inline base::threading::Mutex& lock(void) ELPP_FINAL { return m_mutex; }
 protected:
  ThreadSafe(void) {}
  virtual ~ThreadSafe(void) {}
 private:
  base::threading::Mutex m_mutex;
};

base::threading::ScopedLock scopedLock(lock());
In various use cases and applications, we need to store a large number of logs and also need to archive those logs. In some cases logs can also be used for further analysis.
**It will be great if we could connect to the database and dump logs to that database** instead of rotating through log files and uploading them to some storage on certain intervals.
### This is a

- [ ] Breaking change
- [ ] New feature
- [ ] Bugfix

### I have

- [ ] Merged in the latest upstream changes
- [ ] Updated [`CHANGELOG.md`](CHANGELOG.md)
- [ ] Updated [`README.md`](README.md)
- [ ] [Run the tests](README.md#install-optional)

because ELPP_STACKTRACE needs execinfo.h and cygwin does not support execinfo.h, it causes compilation errors on EternalTerminal in Cygwin, i am guessing the correct course of action is to disable it on cygwin.

### This is a

- [ ] Breaking change
- [ ] New feature
- [ ] Bugfix

### I have

- [ ] Merged in the latest upstream changes
- [ ] Updated [`CHANGELOG.md`](CHANGELOG.md)
- [ ] Updated [`README.md`](README.md)
- [ ] [Run the tests](README.md#install-optional)

1.Set level output with a fixed width 2.Allowing user configure fbase in log filename with conf file

### This is a

- [ ] Breaking change
- [x] New feature
- [ ] Bugfix

### I have

- [x] Merged in the latest upstream changes
- [x] Updated [`CHANGELOG.md`](CHANGELOG.md)
- [ ] Updated [`README.md`](README.md)
- [ ] [Run the tests](README.md#install-optional)

Example of this feature:
```
* GLOBAL:
    ENABLED                 =   true
    TO_FILE                 =   true
    TO_STANDARD_OUTPUT      =   true
    FORMAT                  =   "%datetime{%H:%m:%s} %level %fbase:%line] %msg"
    FILENAME                =   "/tmp/LOG/%datetime{%Y%M%d}/%fbase.log"
    MILLISECONDS_WIDTH      =   3
    PERFORMANCE_TRACKING    =   false
    MAX_LOG_FILE_SIZE       =   1048576
    LOG_FLUSH_THRESHOLD     =   0
	
* VERBOSE:
    ENABLED                 =   false
```

I have test with CMakeLists with g++14.
```
* GLOBAL:
    ENABLED                 =   true
    TO_FILE                 =   true
    TO_STANDARD_OUTPUT      =   true
    FORMAT                  =   "[%level|%datetime{%m:%s} %fbase:%line] %msg"
    FILENAME                =   "/home/mate/LOG/%datetime{%Y%M%d}/log_%datetime{%Y%M%d_%H}.log"
    MILLISECONDS_WIDTH      =   3
    PERFORMANCE_TRACKING    =   false
    MAX_LOG_FILE_SIZE       =   1048576
    LOG_FLUSH_THRESHOLD     =   0
	
* VERBOSE:
    ENABLED                 =   false
```
It is a very simple `conf` file, if the `FILENAME` has two datetime with different formats, it only parses once, and then replace all `%datetime` with first format, ignoring others as a normal string. An example of this:
```
log_20190821{%Y%M%d_%H}.log
```