Have a look at the docs on Middleware: http://reswift.github.io/ReSwift/master/Other%20Typealiases.html#/s:7ReSwift10Middlewarea

It reads

    public typealias Middleware<State> = (@escaping DispatchFunction, @escaping () -> State?)

But the code is

    public typealias Middleware<State> = (@escaping DispatchFunction, @escaping () -> State?)
        -> (@escaping DispatchFunction) -> DispatchFunction

As a quick-fix, we could put the definition on one line and silence SwiftLint. 

I tried to run the latest `jazzy` v0.13.0 locally, but the result was the same. I files realm/jazzy#1148
I find the idea of Redux on iOS very, very, VERY cool - and try to find the right framework for me to start with this architecture.

ReSwift seems to have more coverage on medium, youtube etc. - but I like SwiftRex very well documented and pretty interesting as well... what are the main differences here?
Hi guys! Faced with such a question, how can I implement screen navigation control in swiftUI . I think I need to insert the pattern into the SceneDelegate.swift.Thank You!
I'm seeing a crash when calling `store.subscribe(self)` using the latest package via Swift Package Manager.

<img width="682" alt="Screenshot 2019-12-03 at 20 37 51" src="https://user-images.githubusercontent.com/25435000/70087747-ce03de00-160c-11ea-87f4-48d9cec1115c.png">

Attached is a bare bones project that reproduces the error.

It seems to land on -

```
#1	0x0000000102b5d91f in Store.init(reducer:state:middleware:automaticallySkipsRepeats:) 
at /Users/nodediggity/Library/Developer/Xcode/DerivedData/ReSwiftExample-czegixqbdykoeuftxdzkpeylbnfn/SourcePackages/checkouts/ReSwift/ReSwift/CoreTypes/Store.swift:82
```

<img width="1354" alt="Screenshot 2019-12-03 at 20 40 53" src="https://user-images.githubusercontent.com/25435000/70087981-3d79cd80-160d-11ea-9f0f-6058232c95b8.png">

I'm running Xcode Version 11.2.1 (11B500)

You should be able to reproduce the crash simply by building the attached project

[ReSwiftExample.zip](https://github.com/ReSwift/ReSwift/files/3918600/ReSwiftExample.zip)

Are you going to support SwiftUI? Any example? Thanks.
I'm curios how people are handing form states during reducer state changes.

For example, I have a login form that takes 2 fields `username` and `password`.

On submission I dispatch an action

`store.dispatch(LoginRequest(payload: .init(username: username, password: password)))`

I have middleware that picks up this action and makes an async request to my auth provider.

On success or failure I dispatch the appropriate action

`dispatch(LoginRequestSuccess(payload: .init(accessToken: "123", refreshToken: "456")))`

or

`dispatch(LoginRequestFailure(payload: .init(some_error)))`

Currently my reducer looks something like this:

```swift
func authenticationReducer(_ action: Action, _ state: AuthenticationState?) -> AuthenticationState {
    var state = state ?? AuthenticationState()
    
    guard action is AuthenticationAction else { return state }
    
    switch action {
    case _ as LoginRequest:
        state.form = .dispatching
        
    case let action as LoginRequestSuccess:
        state.accessToken = action.payload.accessToken
        state.refreshToken = action.payload.refreshToken
        state.form = .success
        
    case let action as LoginRequestFailure:
        state.form = .fail
        state.error = action.payload.error

    default: break
    }
        return state
}
```

Based on `state.form` in my view controller I disable the form, show a loading indicator, show an error alert or reset the form and trigger a navigation.

This works really, however I have a few concerns:

1. `authenticationReducer` should really only be concerned with auth state, not ui concerns such as form state

2. I have numerous forms related to login / auth - reset password, recover username, trigger multi factor and so on, these additional states will all cause my reducer to grow and grow

3. My actions become tied to my forms, should I create an action to refresh my tokens, I know need to pretty much duplicate `LoginRequestSuccess` to set new tokens in my store. Ideally I'd like my actions to be as generic and flexible as possible.

Coming from the React / Redux world I used [Redux Form](https://redux-form.com/8.2.2/) quite heavily, this let me keep track of form state in it's own separate reducer and provided callbacks such as `onSubmitSuccess` and `onSubmitFail` which allowed me to keep my ui state within the ui layer not mix my auth and form states.




Backstory: @mjarvis started this in #307 about 2 years ago. The way the ReSwift.Store is set up, his initial approach created a subscription right away. I suggested and tried to help with an approach where apps would have a `PendingSubscription` that only at the `subscribe()` call would be added to the Store.

But this didn't work out well in practice and both Malcolm and I have practically given up for the time being :)

With my recent adventures into the realm of making Middleware calls simpler, I experimented with another way to dispatch actions, and found it would fit ReSwift quite well.

This is a sample call:

```swift
store.subscription()
    .select { $0.substate.anotherSubstate }
    .skipRepeats()
    .subscribe()
```

**This code heavily borrows concepts and implementation from RxSwift.** I had quite some trouble wrapping my had around the concepts to be able to implement them properly.

A couple of notes regarding the reactive nature, aka how the inversion is done:

- State updates are passed on as events in a reactive sequence, aka `Observable<State>`
- State update events are produced via a `BlockSubscriber`: it forwards `newState` calls to a block which is set from the outside as a callback to pass events down the Observable stream using `Observable.create`
- `Observable.create` sounds like you'd create the event stream itself, similar to creating arrays; but it ain't so. Instead, you define the connection/subscription from Observable to its Observer counterpart.
- In fact, every transformation operator (select, filter, skipRepeats) adds another Observer on top that forwards events to the next one. The observable sequence is really a chain of observers passing on events, starting with the initial connection you specify in `Observable.create`.
- The actual `StoreSubscriberType` in an app is not subscribed to the store anymore, just the `BlockSubscriber` is; the app's subscribers receive updates via the observable/observer chain.
- `BlockSubscriber` is prepared in `Observable.create` to be subscribed to the store itself -- but the subscription is only executed when a connection happens. This is fun, and also weird, because I _think_ about the creation first, like a "hot" sequence that just begins pumping out events, just but it is actually executed very late and, in some sense, lazily.

By using `Observable` and its observers, you can model transformations with operators without actually having a functional store subscription.

I left extensive comments in the code to make sense of the subleties of memory management. I still want to get rid of most parts of it. The dual of an `Observable` operator and its `Sink`, which is just an _observer_ that applies the transformations and conditionally forwards the result to the next in the chain, will probably stick. But the `Producer` type, wrapping each step's objects in a cancelable objects with strongly references to its parts, maybe we can ditch that kind of stuff.

# Important types

## IncompleteSubscription

I went with @mjarvis's API, starting with `Store.subscription() -> IncompleteSubscription<Store.State, Store.State>`.  The `IncompleteSubscription<RootStoreState, Substate>` tracks the root state type of the store so you cannot create an `IncompleteSubscription` in one store and stuff it into another, unless both use the same state type. `.select` operations modify the `Substate` associated type accordingly while `RootStoreState` stays the same.

`IncompleteSubscription` is the user-facing API. Observables and such are internal implementation details. Each operation replaces its underlying `Observable<Substate>`.

## SubscriptionToken

Problem with hiding the actual subscription to the store in a hidden `BlockSubscriber` is that users cannot unsubscribe the _real_ subscriber. They only know the object they passed in. (Let's call the one users own the "user-facing subscriber".)

I created `SubscriptionToken` to introduce a different state update mechanism _in addition to notifiying all subscribers_. You can unsubscribe each token individually, like regular subscribers. You can also still call `Store.unsubscribe` with the user-facing subscriber and all corresponding tokens will be removed. The tokens keep a strong reference to the observable connection, represented by the `Disposable` type; it receives the `dispose()` command when the token is deallocated. This breaks the connection and eventually frees the underlying `BlockSubscriber` as well.

------

Things I know are still missing:

- [ ] add tests for `Filter`, if we need that operator at all, that is
- [ ] test if it crashes expectedly or works properly from multiple threads
- [ ] remove the v4 `SubscriptionBox` types etc. that introduced the "old" transformations, and revert this to the most basic ReSwift v2 `Subscription`s. (We still need these for the `BlockSubscriber` to receive events, unless we remove the whole object-based subscription thing completely from the public API)
- [ ] avoid double `skipRepeats`: if `automaticallySkipRepeats` is enabled, figure out if the latest operator is a `skipRepeats` as well (a simple boolean for `IncompleteSubscription` could do, or an type association to the `SkipRepeats` operator type itself)

I'd love to have your feedback on this! PRs to the branch of this PR are also very welcome if you want to play around with it! :)
This is specifically for an archive build. It fails with these errors:

```ld: warning: Could not find or use auto-linked library 'swiftSwiftOnoneSupport'
ld: warning: Could not find or use auto-linked library 'swiftCore'
ld: warning: Could not find or use auto-linked library 'swiftCoreGraphics'
ld: warning: Could not find or use auto-linked library 'swiftObjectiveC'
ld: warning: Could not find or use auto-linked library 'swiftFoundation'
ld: warning: Could not find or use auto-linked library 'swiftDarwin'
ld: warning: Could not find or use auto-linked library 'swiftCoreFoundation'
ld: warning: Could not find or use auto-linked library 'swiftDispatch'
Undefined symbols for architecture armv7:```

It can be fixed by either upping the target to iOS 13. Or by adding **-L/Applications/Xcode-beta.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift-5.0/iphoneos** to the link line in build settings.

This could totally be an Apple issue, but it could also be something with Swift 5 and ReSwift and Xcode 11?
So finally decided to play around an implementation of something approaching @connect decorator from React/Redux. Was initially made for ReKotlin by our Android team, but works the same with ReSwift. 
It's mostly syntax sugar, but our end goal is to make the getter on store.state unavailable, so no more free access to the global store, it should all be in your component local Props struct. 

The StoreConnector implementation

```swift
class StoreConnector<Props: Equatable>: StoreSubscriber {
    
    private var props: Props? = nil
    private let mapStateToProps: (AppState) -> Props?
    private let render: (Props) -> Void
    
    init(mapStateToProps: @escaping (AppState) -> Props?,
         render: @escaping (Props) -> Void) {
        self.mapStateToProps = mapStateToProps
        self.render = render

        store.subscribeQueue(self) {
            $0.skipRepeats({ [weak self] (oldState: AppState, newState: AppState) -> Bool in
                self?.props == self?.mapStateToProps(newState)
            })
        }
    }
    
    internal func newState(state: AppState) {
        props = mapStateToProps(state)
        guard let props = props else {
            return
        }
        DispatchQueue.main.async {
            self.render(props)
        }
    }
    
    func unsubscribe() {
        store.unsubscribe(self)
    }
    
    deinit {
        store.unsubscribe(self)
    }
    
}
```

And now some example usage

```swift
class SomeComponent {
    private struct Props: Equatable {
        let items: [ObjectId: FeedItem]
        let datasource: [ObjectId]

    }
    
    private var props: Props? {
        didSet {
           // Actually do you refresh/render
        }
    }
    private var storeConnector: StoreConnector<Props>?

    func viewDidLoad() {
        storeConnector = StoreConnector<Props>(mapStateToProps: { (state) -> Props? in
            return Props(items: state.feedState.items,
                        datasource: state.feedState.feeds[id] ?? [])
            }, render: { [weak self](props) in
                self?.props = props
        })
    }
}
```

What do you guys think?
I use ReSwift's middleware a lot, as I consider it one of the killer features of this library, and I've always wondered why the `getState` function we pass to the middleware returns the state as an optional value, having to write the boilerplate of unwrapping it every time we want to access it, which is super annoying.

I've been thinking about this and, in theory, it doesn't need to be like that, as we always supposed to have a non-optional state once we've instantiated the store, either because we pass a preloaded state to it, or because each reducer creates its own initial value after the init action has been dispatched (which happens at store's init time). In fact, you will never see anyone checking if the state is not `null` before accessing it in the original Redux library, written in the super dangerous JavaScript.

This past weekend, I've been trying to make the changes needed to make `getState` non-optional, and after accommodating the code a bit and adding a couple of tests, I've realised this is not possible a priori, so we can avoid a retain cycle that would make the store impossible to deallocate. I've been trying to use the techniques described [here](https://www.swiftbysundell.com/posts/capturing-objects-in-swift-closures), but I couldn't make it work.

What do you think? Should this be possible at all?