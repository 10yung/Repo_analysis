Hey, I installed IUP statically and I'm getting this error when trying to build my project.
https://hastebin.com/ohikojorum.php

I'm probably just dumb and missed a step, but I can't seem to figure out why it can't find my GTK libs?
The docs for [kiss_ui::show_gui](http://kiss-ui.github.io/kiss-ui/doc/kiss_ui/fn.show_gui.html) state

"The closure argument should initialize and call `.show()`."

and the docs for [kiss_ui::dialog::Dialog](http://kiss-ui.github.io/kiss-ui/doc/kiss_ui/dialog/struct.Dialog.html) state

"This does **not** make the dialog appear on screen. `.show()` must be called after the dialog has been configured."

There doesn't appear to be any `.show()` method though.
I downloaded `iup-3.14_Win64_dllw4_lib.zip`, copied its contents in `\Rust\bin\` and `\Rust\lib\rustlib\x86_64-pc-windows-msvc\lib\`. then I ceated a hello-world project with 

```
[dependencies.kiss-ui]
git = "https://github.com/cybergeek94/kiss-ui"
```

and

```
#[macro_use]
extern crate kiss_ui;

use kiss_ui::container::Horizontal;
use kiss_ui::dialog::Dialog;
use kiss_ui::text::Label;


fn main() {
    kiss_ui::show_gui(|| {
        Dialog::new(
            Horizontal::new(
                children![
                    Label::new("Hello, world!"),
                ]
            )
        )
        .set_title("Hello, world!")
        .set_size_pixels(640, 480)
    });
}
```

Next I got this build error:

```
error: linking with `link.exe` failed: exit code: 1181
...
note: Non-UTF-8 output: LINK : fatal error LNK1181: \xed\xe5 \xf3\xe4\xe0\xe5\xf2\xf1\xff \xee\xf2\xea\xf0\xfb\xf2\xfc \xe2\xf5\xee\xe4\xed\xee\xe9 \x
f4\xe0\xe9\xeb \"iup.lib\"\r\n
error: aborting due to previous error

```

The instructions currently tell people to download the `dllw4` version of iup which does not come with `.lib` libraries and is unsuitable for use with `-msvc`. For those targets the instructions should tell the user to download the `dll12` version instead which definitely has `.lib` files. The instructions should also inform the user to place the `.lib` files where the linker can find them and not the `.dll` files. Also perhaps the instructions should tell the user how to use a build script override to tell it where to look for the `.lib` and `.dll` files instead of stuffing those files all over the place in weird directories.

I was just asked about UI libraries for rust. My suggestion of KISS-UI got met with the complaint that it's not on crates.

it would probably be a good idea to also add keywords like "ui" and "gui"

I haven't messed with C libraries much so I'm not sure if this is a problem with kiss-ui, IUP, my system, or me, but I'm getting a build error that I'm not sure how to resolve.

```
$ cargo build
   Compiling grim-edit v0.0.1 (file:///Users/erincalling/code/grim-edit)
error: linking with `cc` failed: exit code: 1
note: "cc" "-m64" "-L" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib" "-o" "/Users/erincalling/code/grim-edit/target/debug/grim_edit" "/Users/erincalling/code/grim-edit/target/debug/grim_edit.o" "-Wl,-force_load,/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/libmorestack.a" "-Wl,-dead_strip" "-nodefaultlibs" "/Users/erincalling/code/grim-edit/target/debug/deps/libkiss_ui-3b13f82488719214.rlib" "/Users/erincalling/code/grim-edit/target/debug/deps/libiup_sys-4a23062e27aae405.rlib" "/Users/erincalling/code/grim-edit/target/debug/deps/liblibc-ef5cbad4ef5c7a1e.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/libstd-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/libcollections-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/libunicode-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/librand-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/liballoc-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/liblibc-4e7c5e5c.rlib" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib/libcore-4e7c5e5c.rlib" "-L" "/Users/erincalling/code/grim-edit/target/debug" "-L" "/Users/erincalling/code/grim-edit/target/debug/deps" "-L" "/usr/local/Cellar/rust/1.0.0/lib/rustlib/x86_64-apple-darwin/lib" "-L" "/Users/erincalling/code/grim-edit/.rust/lib/x86_64-apple-darwin" "-L" "/Users/erincalling/code/grim-edit/lib/x86_64-apple-darwin" "-liup" "-lc" "-lm" "-lSystem" "-lpthread" "-lc" "-lm" "-lcompiler-rt"
note: Undefined symbols for architecture x86_64:
  "_gtk_range_set_value", referenced from:
      _gtkValSetValueAttrib in libiup.a(iupgtk_val.o)
      _gtkValKeyPressEvent in libiup.a(iupgtk_val.o)
      _gtkValChangeValue in libiup.a(iupgtk_val.o)
  "_gtk_adjustment_new", referenced from:
      _gtkValMapMethod in libiup.a(iupgtk_val.o)
  "_gtk_hscale_new", referenced from:
      _gtkValMapMethod in libiup.a(iupgtk_val.o)

{ 600 other symbols snipped }

ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

error: aborting due to previous error
Could not compile `grim-edit`.

To learn more, run the command again with --verbose.
```

[full, un-snipped error](https://gist.github.com/ErinCall/44198bfd8df6ca3b843b)

This is on OSX 10.10.3 after installing IUP using the "precompiled binary" instructions in the README. I'm using `cargo 0.4.0-nightly (b48cd46 2015-07-01) (built 2015-07-01)` and `rustc 1.0.0 (built 2015-05-16)`

I'd appreciate any help you can offer!

~~I think we need to implement inside show_gui() something like~~ 
I'll implement this:

``` Rust
if env::var("KISSUI_AUTOCLOSE") {
   init_fn().add_child(
       Timer::new()
       .set_interval(10000)
       .set_on_interval(|_ : Timer|{CallbackStatus::Close})
       .start())
} 
```

The PR is coming soon, just need to impl add_child().

@cybergeek94

> If you have any ideas for some unit tests that we can add without needing a GUI to actually launch (since Travis-CI workers are headless), let me know. I'd like to be able to catch as many logic errors as we can with cargo test.

I didn't really dealt with cargo test and Travis-CI yet.
Testing a GUI without using it sounds hard to do.
But i see Travis-CI can run Firefox and may IUP/GTK too.
Then we can use `kiss_ui::timer::Timer` to autoclose the GUI and test everything we want.
Or do i miss something?

Furthermore we can use ImageMagick and write a script for a advanced test:
- set the environment variable `KISSUI_AUTOCLOSE`
- loop through the examples
  - `cargo run --example x`
  - make a screenshot [import -window](http://www.imagemagick.org/script/import.php)
  - [compare](http://www.imagemagick.org/script/compare.php) it with the screenshot on github
  - report if the screenshots aren't equal or cargo's exits status is not 0  

If we can't run this script on Travis-CI we just keep in mind that different  environments produce different screenshots.

Currently if we panic in callbacks or in the FFI glue generated for each callback impl, that can cause undefined behaviour as the stack will unwind into C code. It doesn't look like we have a problem right now as panicking works just fine, but once `thread::catch_panic()` is stabilized (planned for 1.1 stable), we should probably try to catch panics in the FFI glue and safely exit the IUP event loop before re-panicking (or should we prefer to abort?).

- Basics: initialize KISS-UI, create a dialog with a couple widgets
- Using callbacks with and without associated data; implementing `Callback` for user structs
- Extending KISS-UI using hidden APIs

Addendum:
- Move installation instructions out of README and into new topic

Suggestions for more topics are welcome.

RFC: use the Github wiki system or create a new Markdown file for each topic? [Looking for discussion in this reddit thread.](http://www.reddit.com/r/learnprogramming/comments/3akixj/expert_github_repo_owners_when_does_readmemd/)

Currently only UTF8MODE is turned on during initialization, UTF8MODE_FILE should be also turned on.
