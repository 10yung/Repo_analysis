This feature would consist in adding an SVG mark to the set of existing marks. It would allow the display of arbitrary SVG content on a visual. This would be particularly useful for rich text annotations containing:

  - Different font families
  - Different font colors
  - Different font sizes
  - Font icons
  - Additional cosmetic decorations

An SVG mark would have the following properties:

  - `content`
  - `width`
  - `height`
  - `x` (for the bottom left corner)
  - `y` (for the bottom left corner)

Ideally, it should be possible to customize the displayed content in relation to the visual's data using JavaScript's template literals. The proper way to bind data to the SVG content has yet to be defined.

STOIC is happy to contribute some resources to implement this feature once it has been thoroughly discussed and specified. 
Scatterplots (among other chart types) would benefit from the ability to choose a blend mode such as "multiply."

It would work similar to blend modes in CSS:
https://www.w3schools.com/cssref/pr_mix-blend-mode.asp

A D3 example can be found here:
http://bl.ocks.org/exakte-aesthetik/fec95cd6e12cc05c059a

The JSON would like something like this:
"mix-blend-mode": {"value": "multiply"}
or
"blend-mode": {"value": "multiply"}
or
"blend": {"value": "multiply"}
It's useful when dealing with time series data represented as product of diffs.

<img width="831" alt="Screen Shot 2020-01-14 at 10 22 01 pm" src="https://user-images.githubusercontent.com/94196/72375184-b136ec00-371c-11ea-9373-1df7c519a53d.png">
Please:
- Check for duplicate issues. Please file separate requests as separate issues on GitHub.

None found.

- Clearly describe the goal of the feature request. Why is it needed?

Switch data stored in fields or columns to rows in a new table or feature class.
This is useful when your table/matrix stores values in field names (such as Field1, Field2, Field3) that you want to rotate so they're arranged in rows. It lets you switch the field names and the corresponding data values in the fields to rows.

- Describe an envisioned solution. What do you want the new behavior to be?

A quick check-box or toggle that would transpose the underlying data directly from the viz view. This way you don't have to open another db or dataviewing app to manually rotate data that includes headers.


- If applicable, share mockup images or links to examples illustrating the desired output.

![image](https://user-images.githubusercontent.com/1388685/72111149-cbbd2f80-32ee-11ea-8287-c1465f4cc402.png)


- If applicable, share JSON spec designs for how the behavior would be made available in Vega.

Consider the sample pie chart below:
[Animated pie chart](https://vega.github.io/editor/#/url/vega/N4KABGBEAkDODGALApgWwIaQFxUQFzwAdYsB6UgN2QHN0A6agSz0QFcAjOxge1IRQyUa6SgFY6AK1jcAdpAA04KAHdGAExbYwAFgAMuxREgpG1fFr0GlkdKzzdYjAF7ItkAGbMF1x9RnoAG1gtAG0lCFAIKKh-VFccSDxmANdDaKgKQNZ4qEhwsABfNIj8o1icyFYZL2KoyEyA7Lc86KL8yPTIcrd4bgDuACdg2qMGppwQqABiAHYZgEEZgDEAIQVpgFFRGYBmADYADnXIKdWAYRXtHeOpne0VvYWbpYBGeYej+Wm9s7OAJgAIgBOG4vIGiIF7P6QMAAXXybWiHWiXXQcTcngCeGQA286SgjGqeDcMlYAQCeM6slCpSiyPxUGQVBkeGCCQAAoRGMgsPAAox4ABrSkMqCsQhqdDYtySvCsVB0WA47ktBmIhn0-GQJnIFlsqDs1RqajIPC8-lCkUMyoSqUVUnk1X4gq0+GtWqamJoioDZDuADKzlStJtsoqqEJAAojSx5CYzHgAJQAKl0dBmTsKHpD3QS7lkeCW6Hg9lxIzFtulCQwAA9I2mZl8IzJIy86NovpHm9H1LH4-hE4nSJZB5n1SUtbmoCkTTI1EWS4MrUZxWG3N22x3uzHEHHkKYB8P9Imx9nJ963FzkAAldBqRisYYh1d2ty+gNB0jQhFnzpTyDwLq2IDAACtyAAay4VmuCQ7l+p7tDmF4JIBLI4mByAAJpQaGr4JP2eDwT+iHnui+HcFQZYhoSXgJMABQ4dSEy0hOoqMsyrJuJy3JYKg3CPsgFE4lBKIvlWUCyvKmbuixYCeiiOp6lxV68fxSr8cS5aiZWFT0dJUQuviboGb+KL-jOupqAAMug7DIBS5aQExYBhKK8l1IpnEchZc42XZATmgKgryOyPlqP6ACeqDsH0gWWlpdT5gMgFaHgAzZAlK46W4wBjDykkKnlXxKikJbIGoOAAISErK6CRgA5FU-r2cgZXhcqyCwPVXz1Xl3VgAVdB5YmDGyYZ6TGRA45yUhZESYwvoljwciOWJFSMLAAJ+oS5WRmFfn2YmAD8YB7TQlkHQEiotW1YAnQAtC8YA4C8ibPWADoUsRSKzRU6AyNQKSMXIzFubJRiefqwBQL4-gUgklnzADKRgAAPqjYCwHg6ADHgSOA64Wbg9BeFQJGiPI8gYAAGTU2AG1bZ4Mi7fei1JLIb205j2O4-jKTHadrOtezMhgAAPGAuh3WAFMEyEuiwu9WM43jlPy7CiY4J9+lTQl7kQxxUPE0YeARYQFRJHEVFsXULADNwBBAy9ujE9NWprW4DPbczaiRv9BOc3Tyu85TNN07LKMnZGQtLbI4uS3dfuUwAfNzKt88g6tHf7KT3WmT04MHqtywrb04EnBPxxHmcK9nlMANT5+91fq4O70564Y2ut9dK-W4-2MBgItnP0SpnNwqCECk2JqDhHsJF7TO7R3gcDQtwvLWLUtc0XGdh2AHdgAAvCfachyXsJjkosKKNYtU0j9pEVE1N0z81Azck+WrOa5GrE4kH9qAmlxAkfatl7L70jGdWc1lwFXRKsLcq+8B5D2WiPBwyBx6T2nuVN66MwCVTAf5a6pUZ4nkylAewQCnZQFylkHkRD7JDXoaNUU41oiTSJo-P8yEJJSkwI5PK+pf74n1jDDqbh37cjAC8ESdQIpaBeC7Nhet-5Kg-hUKRVNoQUMgAonAfxlFqlUTbSA6iVQJC0WAa4uj9HWKMc6V0jk0r-VgElVAD8-6mNNubfuQDfS0GlLozw9k1DCKgAouEujqD23FOwOxkwzESKif-bgxBQgwykik0x6Bwn1HoTCThMkwbeLNhUVQc5uDKDkUYNJeT7bKAAPqkmisJbJbEbB5JqsgGshSu5GR7qxMyvDKhKjUACfhOFpCsGShUe+ziBiuPcZ40R-8fEVExMBGpjIayEBAVAaqc5+ENRfqQ8qWiuo9T6l8Qa5jkAnjGiYjp6yeh9FIdssxgxiQ4DEUYEJARZ4LznD07ZtSBhqGEgkXJqF7wAx1gZR5skxGJDKZeFUwTuQArcHleFbte6lN8XmQYqAyQCP-j0vZPQgLoQgmAeuYBeiwCgYNauYB7qCylPKOgrL2W3J5sXfmX42UgQAJJfjbsmU6V5bz3kfHSsAhjkz5hZAuUs5D-65LRcgAAavQyCiKSnPNRUSgYJKAhktMRS-ZAFqWgW5JheVjgWwsrnHvdl0dOUKh5QNT1ip+UZyHH8NlYBRXirAJKyM0q7wPlgPKxVyrCzFjVR8zVCQry6saFhXFTzRQosJVAdxpKPlWqpWhO1yBwLysZcy313qPVyi9a60OvLfW70poG4VYq-gSrAFG2VX8OmpqgBGNQagUjzGSvqlRSK1nGoLcSotuiS0oVtRhB19KnX1q5XWl1ag3U+obX69O7ahXstDd28NvbuQypjSm-UkAR1juQBO+A2EDVeKNfmjwC7zXFt2dardCp030Idey1CwE11DkA3QYDmbK1gdXRBdVOT70eP6RNQZM0n49AtIKcql0pn8VmW4AS4zJkLKWcSlZ6RkUvLzIwLEwkl3-rcIwgIkDbkdWPqfNjzDM0POnYa3NdGdnYhZB8-5gLGRNoJh82GgQ3DV2zTOglFQelic0v-STbg22yd0fJ+GMN-WU1xd3Vo180hmPgIETq1HPSojmgBPoS5nFzqcuCwkCnHJqAnugQkWh3KQHvgkeZskPCYqk0kjR+k8WQEWQDHI0MzGmDhq8-oQwYTsMKBZ6wYVhEkU6JiQzTn0uMQ0eJhIMhZDBi1DHEWbhECDGcAWLzIZdS9AhQFsL5r-JG1MeZc6vk4EfMJMBJNjAqCpXSsgXR88sM23nSyQMLgAswxSwphILw-jJjCqqpcXCFuQF6T8tbfgNtQEIFU6Blk9sDC+N25MhjMsUNqYQYszA7FJYM57I52MTkyGamc9qGjLlgF6vQ-qg1hpHTTKILAsjss2yy8U60YUuumLm78iJq3ktneK+BmlWF659pjfXSMOwpaSt20mwYJ5EdsWRyZMLsAooxSCOjjpA2YGRWin0EbZbxuTZwGlDK-9MfGzWytk7uPUtpqu9t6ni47sKrp3i7+b34AfZx99oFtV-uA8QcDz+-VweZsh766HsP4eZdduhlHKIwqQWlzigxUtYss95wEAA8u4dwSpvlyQyAUnAj03eOQ92zgAKnOpLLuoAAFkFVSylugGRUslEJyelLUPaewDsezxnxPhiFUHzAAcMvCd09svL+X-P1ebfmYgDfawGABiCny9wlEIm4vCxwv+I0JpNNana9wTrPywu2o57morOO48ANcW9304n6fOgSrhcSyKazwG1+t4rcFoQHdzRFbf0ude4H3AmeCh-rQ7h33jtwt-r9agInf2X5+DzEhX+kRnWXpr2e7zjNvo5P+FeDhO4PbB4tLsFmKGMhMtjM9m1jIB1olhPmWlPt-mvuLqYsdoHjLudjamWhhJBE-p0J9qdm-gQRBvaggaYrpjQkltpgkHQYTGrh5DJvQeQfgddkNv5PvLxnlNxkfAelyncm9CdIfDgLuhnDQR0hpDiDeo+K-vgSTooSQV3twH0EkIQEocVpxhovSvVFgPVPKsYcYfSlDvQiYWDvKlUF4GoYlAxoZljuFqEjphIi9jDNZjQiVkuK7PpmlNwHhgAOq9iICz7B4JysGvbvamzUZCaHbYhYwYgMbAT7ybI4gEJCF6HooS6jARGw4S5RH4oLZ5GZqKKFHExFJM65qNaUToFag4Ffa76lpUEVryqiCXoJq3aXrQawbZCVoSwE7lqVoPQFwyKq62I6EtGE7rpgAdGSpdE04DCXqDQeJf7ma0i-6mS2xuaAE4SjY4iC45DuCBBKiOTgETw47QGjLlRwGYAkHahIGj4oG5pYEdKNGcH46IZtH0rzFgCLFK49GDR9FtGDHfEjFspjGvQyFH5TErqEH2rtGdEFjdGSqrEwnWjME46MFGbHqyb2EQzsGJYFoRaKZEkYlaiEjMwDAKFQyfFaq0nyoI5FFOR2DyHRqKGn7NFprXocmxr1zaAUmFaOH1HWg4lRY5ElFWY2Zpa+FI66JpIxEJIS5Y4mydQB7GBCQDDXQaL7y1E4g6nSInxZGtruG5FB5lE4Bph7CFEeGx75HrEYZsKbGYb-5ubYg1hD48KOYgkHwBCED3QsBoDID3QQonFkh4D3Qz7nEQFXGTI8ksGOQj5j7zbD5oHj6mLsC5L2Q7ThGWnDrqBPoN7GJhZvG5ofF4G6G+rAncgZr9FCkohkGVkyjVm+ognYQElQCBApZwl8KHo1k6p6rJxDFEHSz1QpDuB4DGE4D1SAL4D1QNmJQFjLbEnNmbaiBKoolLGLlqmem9nfqmpSjQYWGZpfDuJHmDQnkZRg50C6DuD1RvTGlgD2D+hpSEjUDHkW70JiFg4AB6t595709U-5Lw95b09KkYtheAR0phRhD59cUFxZjiyF1RxRXebmb2mgMZlxUB8ZF2tZlhgQAZQZcQoZfotgWIUZIpDxyZLx1ok+GZHSWM9swRoReZ4wMijpuspZ2UjF5Z+5l5rZh6j646k6O52OXJ9+IWQlXKqxhZolr64lkAmFYRklFB9U8eyeee1hEFgl-ZbZBFcGwaelslvqIlz6k6wa0G3ZfgghYOc5U50soezsb0CxW5SuiY9cphZOJlCoA5dZWExlMlflZl8lFlr6nlYOiAYOPlvqNlosT5s5H+xhD0QIOAQIrl-x7lpYSlzFgRq54pg0M+XFjpWxBW6FX6HpXpwyjmSQeAKMRFgZAgIZKAd4OIVFjo2FkBuB1xoBNFTxKZgWDFqZ1o8V7FFQQxSlWZJUuZzuERkAMUBAlxJVrB6+dFwm6m+5dVQMnZR2+5I5EESlTZZ+lBMxQVh6chNJfJwafwG5AJOVu1CaK5+5LwBwm5Kq25K1LpGxTeIABQQAA)

If you click on the legends the pies will animated to disappear and appear.
If you mouse hover a pie it will translate.

Create transitions in the current version is complicated and it should be great to be able to configure a transition for an encoding property with something like this
`{
      "type":"arc",
      "encode": {
        "update":{
          "endAngle":[
            {"test":"isSelectedPie && openingPie", "transistion":{"from":{"field":"startAngle"}, "to":{"field":"endAngle"}, "duration":{"value":0.5}}},
            {"test":"isSelectedPie && closingPie", "transistion":{"from":{"field":"endAngle"}, "to":{"field":"startAngle"}, "duration":{"value":0.5}}},
			{"field":"endAngle"}
          ]
        }
      }
    }`

I had a look to [vega-scenegraph](https://github.com/vega/vega/tree/master/packages/vega-scenegraph ) and here's a possible implementation based on [css animations](https://www.w3schools.com/css/css3_animations.asp) which will work only when using svg renderer but shouldn't have a large impact on current structure.

The svg render could add a style element into marks element defining a transition to declare the `@keyFrames`.
-  Some properties like opacity, fill, stroke will be supported directly
- For properties modifiyng a path (like startAngle, endAngle, width, height) the path property should be calculated for "from" and "to" and animation applied to d property
- For properties defining transforms (like x, y, angle), the transform should be evaluated for "from" and "to" and animation applied to transform property

Here below is a sample of generated html from my pie sample that will animate the first pie of the chart to close it (the user clicked the first element in the legend to unselect  it). The difference with the current version of generated html is bold

`<g class="mark-arc role-mark pie">`**`<style>@keyFrames unique_id_generated_by_code { from:{d:path('M8.572527594031473e-15,-140A140,140,0,0,1,121.2435565298214,-70L0,0Z')} to:{d:path('M8.572527594031473e-15,-140L0,0Z')} }</style>`**`<path transform="translate(200,200)" d="M8.572527594031473e-15,-140A140,140,0,0,1,121.2435565298214,-70L0,0Z" style="fill: rgb(119, 167, 251); stroke-width: 0; opacity: 1; `**`animation:unique_id_generated_by_code 0.5s forwards;`**`"></path><path transform="translate(200,200)" d="M121.2435565298214,-70A140,140,0,0,1,8.572527594031473e-15,140L0,0Z" style="fill: rgb(229, 115, 104); stroke-width: 0; opacity: 1;"></path><path transform="translate(200,200)" d="M8.572527594031473e-15,140A140,140,0,1,1,-2.5717582782094416e-14,-140L0,0Z" style="fill: rgb(251, 203, 67); stroke-width: 0; opacity: 1;"></path></g>`

What do you think?
It essentially would compute a new effective scale factor as `scale * dpi/96` (where `scale` is the old command line `scale` argument, and `dpi` would be the new command line argument, and then it would use the effective scale factor when calling the `toCanvas` function). It would also store that DPI setting in the PNG via the options described [here](https://github.com/Automattic/node-canvas/pull/1179).

I think currently the PNGs that are exported do not contain any resolution information (but I'm not sure), so it would probably make sense to leave it that way if the `dpi` argument is not specified.
The goal is to produce a responsive legend, adjusting the number of columns based on the width of the plot. The first approach produced misaligned legend entries while the second approach (containing the same logic) produced the desired result.

**Misaligned legend when testing width directly in the columns property.** To see misalignment, narrow viewport until legend goes to 1 column.
`"columns":{"signal":"width < 1100 ? 1 : 7"}`
https://vega.github.io/editor/#/url/vega/N4KABGBEAkDODGALApgWwIaQFxUQFzwAdYsB6UgN2QHN0A6agSz0QFcAjOxge1IRQyUa6SgFY6AK1jcAdpAA04KAHdGAExbYwADgAMuxREgpG1fFoBs+w1ELo1axjOpbRipZDXo8mHAG0lCFAIEKgZdFRkLUhaQlQnNWQAJwVAkMhWJIAbaK8fUlj4mUSkyWk5NIBfJQBddyNYU3Cs2C0A0ODQ9PDI6NUNRFSu9NZCPKicSFVi7mUAZUYAL2QACgBKP10aoeGoWTa03bBOo+HIZCoZPFacYEhpTPgJlQTZhSg8AE9CZ8gk5Eay0glRspy6GTG3l+0zUswWy3Wm22h121SONSqoOOKMgPV+Mng3BaO1CEPGfXULDAAB4wABGOn6MAAfnpYBwAHZIFVavUoAh0FkAQc0iduhFfoSstwUlijF8ftEZY5miT0rCME4tHc8r4oIUEsl3pAAGaMZBZNTReBZViwPBGkE4pLoZySqHUGWfbmhNFgOogQNGIXUZDFG5gdohMVGM1ZHKTKUytXy5hC6IAJRoPDkcr2SXNV2ieG4hBTUClrFQMhud0a1FVWCmlMQNPpjN0LLZnOBefOBO4iW1KIan1Q7CJEZj4LDDpStxH4LjWQA8nZ4MxvbdIBRBaxnro6KI-UcT10nUdIFl0OwLVPF0ZRuSF2D5cgAB54bWm82W6K720ojPYZgJCUCzz9DFwBAaogA

In the second example the legend entries remain perfectly aligned regardless of the number of columns.

**Aligned legend when storing the result of the same logic in a signal**
`"columns":{"signal":"ncols"}`
https://vega.github.io/editor/#/url/vega/N4KABGBEAkDODGALApgWwIaQFxUQFzwAdYsB6UgN2QHN0A6agSz0QFcAjOxge1IRQyUa6SgFY6AK1jcAdpAA04KAHdGAExbYwADgAMuxREgpG1fFoBs+w1ELo1axjOpbRipZDXo8mHAG0lCFAIEKgZdFRkLUhaQlQnNWQAJwVAkMhWJIAbaK8fUlj4mUSkyWk5NIBfJQBddyNYU3Cs2C0A0ODQ9PDI6NUNRFSu9NZCPKicSFVi7mUAZUYAL2QACgBKP10aoeGoWTa03bBOo+HIZCoZPFacYEhpTPgJlQTZhSg8AE9CZ8gk5Eay0glRspy6GTG3l+0zUswWy3Wm22h121SONSqoOOKMgPV+Mng3BaO1CEPGfXULDAAB4wABGOn6MAAfnpYBwAHZIFVavUoAh0FkAQc0iduhFfoSstwUlijF8ftEZY5miT0rCME4tHc8r4oIUEsl3pAAGaMZBZNTReBZViwPBGkE4pLoZySqHUGWfbmhNFgOogQNGIXUZDFG5gdohMVGM1ZHKTKUytXy5hC6IAJRoPDkcr2SXNV2ieG4hBTUClrFQMhud0a1FVWFxUtaTrOYcJiW1KIan1Q7CJEZj4LDDpStx74LjWQA8nZ4MxvbdIBRBaxnro6KI-Ucd1027tIFl0OwLUPJ0ZRuSJ2D5cgAB54bWm82W6Kr21RPfDb8hX97v0MXAEBqiAA




This is a proposition for feature request #2255

Creating test for the PR #2257 (sorry for the mess, I don't know why I had to create another PR for that update), I noticed that group have background and foreground elements.
I used the attr method of marks to handle css and added a cssForeground for groups to be able to style foreground part of a group.

I updated documentation, schemas, and modified SVGRenderer tests to ensure every mark is rendered correctly
The new (v5.8) Vega heatmap and isocontour transform requires "raster grids (matrices)" 
input data format as seen in these Vega example data files:

     https://github.com/vega/vega/blob/master/docs/data/volcano.json
     https://github.com/vega/vega/blob/master/docs/data/annual-precip.json

It would be helpful to add explanation of this data format in the documentation:

      https://vega.github.io/vega/docs/data/
      https://vega.github.io/vega/docs/transforms/heatmap/
      https://vega.github.io/vega/docs/transforms/kde2d/
      https://vega.github.io/vega/docs/transforms/isocontour/

and examples:

      https://vega.github.io/vega/examples/contour-plot/
      https://vega.github.io/vega/examples/density-heatmaps/
      https://vega.github.io/vega/examples/volcano-contours/
      https://vega.github.io/vega/examples/annual-precipitation/

In some applications, one might want to style a Vega spec using CSS. To also enable dynamic styling, it would be necessary that we support setting the CSS class dynamically based on a signal. Right now, the only way to set a CSS class is via `name` or `role` but neither can be driven by signals.

cc @mathiastiberghien