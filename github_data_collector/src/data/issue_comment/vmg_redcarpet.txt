I'm using redcarpet in a rails app. In my markdown I have created code blocks using three backticks. When I display the markdown with redcarpet there are no line breaks in my code blocks. All of the code block is pushed onto one running line. Is there an option to maintain the line breaks in code blocks with redcarpet?

`markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, prettify: true)`
`markdown.render(@post.body).html_safe`


```
Building native extensions. This could take a while...
ERROR:  Error installing redcarpet:
        ERROR: Failed to build gem native extension.

    current directory: /home/deploy/.rvm/gems/ruby-2.6.4/gems/redcarpet-3.5.0/ext/redcarpet
/home/deploy/.rvm/rubies/ruby-2.6.4/bin/ruby -I /home/deploy/.rvm/rubies/ruby-2.6.4/lib/ruby/site_ruby/2.6.0 -r ./siteconf20190927-9119-5tycij.rb extconf.rb
creating Makefile

current directory: /home/deploy/.rvm/gems/ruby-2.6.4/gems/redcarpet-3.5.0/ext/redcarpet
make "DESTDIR=" clean

current directory: /home/deploy/.rvm/gems/ruby-2.6.4/gems/redcarpet-3.5.0/ext/redcarpet
make "DESTDIR="
compiling autolink.c
gcc: error: unrecognized command line option '-Wduplicated-cond'
gcc: error: unrecognized command line option '-Wmisleading-indentation'
gcc: error: unrecognized command line option '-Wrestrict'
gcc: error: unrecognized command line option '-Wimplicit-fallthrough=0'
Makefile:243: recipe for target 'autolink.o' failed
make: *** [autolink.o] Error 1

make failed, exit code 2
```

`is_codefence()` now allows fence-pair matching to comply with https://spec.commonmark.org/0.29/#fenced-code-block
> closing code fence of the same type as the code block began with (backticks or tildes), and with at least as many backticks or tildes as the opening code fence


So the following now works (as it does in GitHub, otherwise it would be difficult to type this :-))
`````
````
This is some code containing a fence string
```
protected by extending the enclosing fence
````

~~~
This is some code containing a fence string
```
protected by using the other fence type
~~~
`````

Fixes #208.
I found a possible bug, I think.

Please feel free to close it if I wrong.
Btw: Amazing library üëè 

Example input 
```html
<div title='<strong>This breaks everything</strong>'>
  <strong>This breaks everything</strong>
</div>
```

Fail
```ruby
text = "<div title='<strong>This breaks everything</strong>'><strong>This breaks everything</strong></div>"

Redcarpet::Render::SmartyPants.render(text)
```
Output
```html
<div title='<strong>This breaks everything</strong>&lsquo;><strong>This breaks everything</strong></div>
```

Expected output

I think it `&lsquo;>` should be `'>`

I've tested it with these versions:
1. 3.3.3
2. 3.5.0

Other markdown parsers (e.g. flexmark, XCode documentation parser) allow
to add a linebreak by prefixing it with backslash.

This is motivated by downstream bug: https://github.com/realm/jazzy/issues/430
This is an example that doesn't seem to render properly.  If bullets don't have an empty line before them, they are parsed as stars:
```
irb(main):020:0> markdown = Redcarpet::Markdown.new(Redcarpet::Render::HTML, autolink: true, tables: true)
=> #<Redcarpet::Markdown:0x007fe666240348 @renderer=#<Redcarpet::Render::HTML:0x007fe666240370>>
irb(main):021:0> puts markdown.render(str)
<p>text
* bullet1
* bullet1</p>
=> nil
irb(main):022:0> puts str
text
* bullet1
* bullet1
```

If I add an extra newline, it works fine:

```
irb(main):025:0> puts markdown.render(str2)
<p>text</p>

<ul>
<li>bullet1</li>
<li>bullet1</li>
</ul>
=> nil
irb(main):026:0> puts str2
text

* bullet1
* bullet1
=> nil
```
I'm not able to install redcarpet on Mojave. tried with xcode 10.1 & 10.2.1.

Can anybody please help me?
```
Building native extensions. This could take a while...
ERROR:  Error installing redcarpet:
	ERROR: Failed to build gem native extension.

    current directory: /usr/local/lib/ruby/gems/2.6.0/gems/redcarpet-3.4.0/ext/redcarpet
/usr/local/opt/ruby/bin/ruby -I /usr/local/Cellar/ruby/2.6.3/lib/ruby/2.6.0 -r ./siteconf20190429-17447-i2ihax.rb extconf.rb
creating Makefile

current directory: /usr/local/lib/ruby/gems/2.6.0/gems/redcarpet-3.4.0/ext/redcarpet
make "DESTDIR=" clean

current directory: /usr/local/lib/ruby/gems/2.6.0/gems/redcarpet-3.4.0/ext/redcarpet
make "DESTDIR="
compiling autolink.c
dyld: Library not loaded: /usr/local/lib/libwep
  Referenced from: /usr/bin/clang
  Reason: no suitable image found.  Did find:
	/usr/local/lib/libwep: code signature in (/usr/local/lib/libwep) not valid for use in process using Library Validation: mapped file has no cdhash, completely unsigned? Code has to be at least ad-hoc signed.
	/usr/local/lib/libwep: stat() failed with errno=1
make: *** [autolink.o] Abort trap: 6

make failed, exit code 2

Gem files will remain installed in /usr/local/lib/ruby/gems/2.6.0/gems/redcarpet-3.4.0 for inspection.
Results logged to /usr/local/lib/ruby/gems/2.6.0/extensions/x86_64-darwin-18/2.6.0/redcarpet-3.4.0/gem_make.out
```
Hello Team,

Am unable to install redcarpet. I tried the below commands but still it exits with below error.
Any help is appreciated.

root@host# gem update --system 2.3.0
Updating rubygems-update
..
..
root@host# gem install redcarpet --platform=ruby --verbose
HEAD https://api.rubygems.org/api/v1/dependencies
200 OK
GET https://api.rubygems.org/api/v1/dependencies?gems=redcarpet
200 OK
/var/lib/gems/2.3.0/gems/redcarpet-3.4.0/COPYING
/var/lib/gems/2.3.0/gems/redcarpet-3.4.0/Gemfile
/var/lib/gems/2.3.0/gems/redcarpet-3.4.0/README.markdown
..
..
..
/usr/bin/ruby2.3 extconf.rb
mkmf.rb can't find header files for ruby at /usr/lib/ruby/include/ruby.h
ERROR:  Error installing redcarpet:
        ERROR: Failed to build gem native extension.

    Building has failed. See above output for more information on the failure.
extconf failed, exit code 1

Gem files will remain installed in /var/lib/gems/2.3.0/gems/redcarpet-3.4.0 for inspection.
Results logged to /var/lib/gems/2.3.0/extensions/x86_64-linux/2.3.0/redcarpet-3.4.0/gem_make.out

OS:

NAME="Ubuntu"
VERSION="16.04.2 LTS (Xenial Xerus)"
ID=ubuntu
ID_LIKE=debian
PRETTY_NAME="Ubuntu 16.04.2 LTS"
VERSION_ID="16.04"
HOME_URL="http://www.ubuntu.com/"
SUPPORT_URL="http://help.ubuntu.com/"
BUG_REPORT_URL="http://bugs.launchpad.net/ubuntu/"
VERSION_CODENAME=xenial
UBUNTU_CODENAME=xenial

I ran into the same issue as #570 and I've been trying to think of a good way to fix the issue. The solution is not entirely obvious but as far as I can tell, there are a few options:

1. Update the documentation to say that `Redcarpet::Markdown` is not thread safe and you should make one per thread.
2. Add a global rendering lock. That's what I have here. Based on benchmarks on my laptop, this has an ~2% performance hit for the single threaded case and you get no benefit from concurrency but it doesn't just crash the program.
3. Split the state into the fixed state (that can be shared between threads) and the rendering state (that needs to be separate). This was the suggestion in that issue. I made a rough attempt at that but `sd_markdown->work_bufs` is used to cache memory buffers between renders. This doesn't work in the concurrent world and if we just re-create them for every render there's a noticeable performance hit on subsequent renders using the same `Redcarpet::Markdown` object (~7%). Plus the active encoding is stored in the renderer options making that also not thread safe so we'd have to split those options in two as well.

While I could probably implement option 3, I'm not sure it's possible without at least a minor performance hit. So my questions for you are

1. Is this a thing you want fixed?
2. Is this a thing you want fixed _enough_ to warrant a performance hit? If so how much?
3. Do you think there's value in actually making `render` concurrent? It's fairly likely this will speed up the concurrent case but slow down the sequential case.
Hi! I was looking through this code for unrelated reasons and happened to notice that `redcarpet_stack_push` is calling `redcarpet_stack_grow` significantly more often than necessary. My assumption from reading the code is that it should only allocate more memory if their's insufficient space but this is increasing the buffer size on every `push` so there's always double the space required.

Your contributing guide says to add a test but as far as I can tell there's no way to test C code directly so I'm not sure that's a feasible thing to do in this case. Please let me know if there is a way to test this and I'd be happy to add it. This does not appear to effect the benchmark in any way.