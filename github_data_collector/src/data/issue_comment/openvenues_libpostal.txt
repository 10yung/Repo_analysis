Currently, it's not possible to have multiple instances of libpostal in one process. Even worst, if you want to change the `datadir`, you're changing it for everything. It also brings multithreading conflicts. Wouldn't it be possible to returns objects and expect this object in all functions using this object instead?

Having an instance for each kind would prevent all the previously mentioned issues but would also make it more clear in the API which function is using which initializer.

What do you think?

PS: it would pretty simple to prevent freeing a context whereas some children of this context are still running. For example, not being able to use `libpostal_setup` as long as all "children" generated by `libpostal_setup_parser` or `libpostal_setup_language_classifier` are not freed.
I am trying to install postal package using
`pip install postal`
I am following the steps mentioned in link 

> https://github.com/openvenues/libpostal#installation-windows

I have installed Visual Studio 2014 C++ Build Tools and MSYS2 and performed the step mentioned in above link.

`git clone https://github.com/openvenues/libpostal
cd libpostal
cp -rf windows/* ./
./bootstrap.sh
./configure --datadir=[...some dir with a few GB of space...]
make -j4
make install`

Please find the logs I am getting while installing the postal package in python

`(base) C:\Users\Praveen>pip install postal
Collecting postal
  Using cached https://files.pythonhosted.org/packages/56/f7/69ca5d374077e23aa9a51ecd4031222ca9dfb7d19c95d7691f024e2e27ef/postal-1.1.8.tar.gz
Requirement already satisfied: six in c:\programdata\anaconda3\lib\site-packages (from postal) (1.12.0)
Building wheels for collected packages: postal
  Building wheel for postal (setup.py) ... error
  ERROR: Command errored out with exit status 1:
   command: 'C:\ProgramData\Anaconda3\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"'; __file__='"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' bdist_wheel -d 'C:\Users\Praveen\AppData\Local\Temp\pip-wheel-e6vpt_0y' --python-tag cp37
       cwd: C:\Users\Praveen\AppData\Local\Temp\pip-install-9sens8xe\postal\
  Complete output (35 lines):
running bdist_wheel
  running build
  running build_py
  creating build
  creating build\lib.win-amd64-3.7
  creating build\lib.win-amd64-3.7\postal
  copying postal\dedupe.py -> build\lib.win-amd64-3.7\postal
  copying postal\expand.py -> build\lib.win-amd64-3.7\postal
  copying postal\near_dupe.py -> build\lib.win-amd64-3.7\postal
  copying postal\normalize.py -> build\lib.win-amd64-3.7\postal
  copying postal\parser.py -> build\lib.win-amd64-3.7\postal
  copying postal\tokenize.py -> build\lib.win-amd64-3.7\postal
  copying postal\token_types.py -> build\lib.win-amd64-3.7\postal
  copying postal\__init__.py -> build\lib.win-amd64-3.7\postal
  creating build\lib.win-amd64-3.7\postal\tests
  copying postal\tests\test_expand.py -> build\lib.win-amd64-3.7\postal\tests
  copying postal\tests\test_parser.py -> build\lib.win-amd64-3.7\postal\tests
  copying postal\tests\_test_near_dupes.py -> build\lib.win-amd64-3.7\postal\tests
  copying postal\tests\__init__.py -> build\lib.win-amd64-3.7\postal\tests
  creating build\lib.win-amd64-3.7\postal\utils
  copying postal\utils\encoding.py -> build\lib.win-amd64-3.7\postal\utils
  copying postal\utils\enum.py -> build\lib.win-amd64-3.7\postal\utils
  copying postal\utils\omitted.py -> build\lib.win-amd64-3.7\postal\utils
  copying postal\utils\__init__.py -> build\lib.win-amd64-3.7\postal\utils
  copying postal\pyutils.h -> build\lib.win-amd64-3.7\postal
  running build_ext
  building 'postal._expand' extension
  creating build\temp.win-amd64-3.7
  creating build\temp.win-amd64-3.7\Release
  creating build\temp.win-amd64-3.7\Release\postal
  C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.20.27508\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I/usr/local/include -IC:\ProgramData\Anaconda3\include -IC:\ProgramData\Anaconda3\include "-IC:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.20.27508\include" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\winrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\cppwinrt" /Tcpostal/pyexpand.c /Fobuild\temp.win-amd64-3.7\Release\postal/pyexpand.obj -std=c99
  cl : Command line warning D9002 : ignoring unknown option '-std=c99'
  pyexpand.c
  postal/pyexpand.c(2): fatal error C1083: Cannot open include file: 'libpostal/libpostal.h': No such file or directory
  error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.20.27508\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2

  ERROR: Failed building wheel for postal
  Running setup.py clean for postal
Failed to build postal
Installing collected packages: postal
  Running setup.py install for postal ... error
    ERROR: Command errored out with exit status 1:
     command: 'C:\ProgramData\Anaconda3\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"'; __file__='"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record 'C:\Users\Praveen\AppData\Local\Temp\pip-record-k92kr5uk\install-record.txt' --single-version-externally-managed --compile
         cwd: C:\Users\Praveen\AppData\Local\Temp\pip-install-9sens8xe\postal\
    Complete output (35 lines):
    running install
    running build
    running build_py
    creating build
    creating build\lib.win-amd64-3.7
    creating build\lib.win-amd64-3.7\postal
    copying postal\dedupe.py -> build\lib.win-amd64-3.7\postal
    copying postal\expand.py -> build\lib.win-amd64-3.7\postal
    copying postal\near_dupe.py -> build\lib.win-amd64-3.7\postal
    copying postal\normalize.py -> build\lib.win-amd64-3.7\postal
    copying postal\parser.py -> build\lib.win-amd64-3.7\postal
    copying postal\tokenize.py -> build\lib.win-amd64-3.7\postal
    copying postal\token_types.py -> build\lib.win-amd64-3.7\postal
    copying postal\__init__.py -> build\lib.win-amd64-3.7\postal
    creating build\lib.win-amd64-3.7\postal\tests
    copying postal\tests\test_expand.py -> build\lib.win-amd64-3.7\postal\tests
    copying postal\tests\test_parser.py -> build\lib.win-amd64-3.7\postal\tests
    copying postal\tests\_test_near_dupes.py -> build\lib.win-amd64-3.7\postal\tests
    copying postal\tests\__init__.py -> build\lib.win-amd64-3.7\postal\tests
    creating build\lib.win-amd64-3.7\postal\utils
    copying postal\utils\encoding.py -> build\lib.win-amd64-3.7\postal\utils
    copying postal\utils\enum.py -> build\lib.win-amd64-3.7\postal\utils
    copying postal\utils\omitted.py -> build\lib.win-amd64-3.7\postal\utils
    copying postal\utils\__init__.py -> build\lib.win-amd64-3.7\postal\utils
    copying postal\pyutils.h -> build\lib.win-amd64-3.7\postal
    running build_ext
    building 'postal._expand' extension
    creating build\temp.win-amd64-3.7
    creating build\temp.win-amd64-3.7\Release
    creating build\temp.win-amd64-3.7\Release\postal
    C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.20.27508\bin\HostX86\x64\cl.exe /c /nologo /Ox /W3 /GL /DNDEBUG /MD -I/usr/local/include -IC:\ProgramData\Anaconda3\include -IC:\ProgramData\Anaconda3\include "-IC:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\14.20.27508\include" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\ucrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\shared" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\um" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\winrt" "-IC:\Program Files (x86)\Windows Kits\10\include\10.0.17763.0\cppwinrt" /Tcpostal/pyexpand.c /Fobuild\temp.win-amd64-3.7\Release\postal/pyexpand.obj -std=c99
    cl : Command line warning D9002 : ignoring unknown option '-std=c99'
    pyexpand.c
    postal/pyexpand.c(2): fatal error C1083: Cannot open include file: 'libpostal/libpostal.h': No such file or directory
    error: command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.20.27508\\bin\\HostX86\\x64\\cl.exe' failed with exit status 2
    ----------------------------------------
ERROR: Command errored out with exit status 1: 'C:\ProgramData\Anaconda3\python.exe' -u -c 'import sys, setuptools, tokenize; sys.argv[0] = '"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"'; __file__='"'"'C:\\Users\\Praveen\\AppData\\Local\\Temp\\pip-install-9sens8xe\\postal\\setup.py'"'"';f=getattr(tokenize, '"'"'open'"'"', open)(__file__);code=f.read().replace('"'"'\r\n'"'"', '"'"'\n'"'"');f.close();exec(compile(code, __file__, '"'"'exec'"'"'))' install --record 'C:\Users\Praveen\AppData\Local\Temp\pip-record-k92kr5uk\install-record.txt' --single-version-externally-managed --compile Check the logs for full command output.
`






I have downloaded the complete libpostal package from this directory but still not able to find the executable file and not able to provide the exact directory which will keep .DAT trained file.
Using below command
./configure --datadir=[...some dir with a few GB of space...]

So after going inside the code, I realized that labels and values were actually suppose to work together (a.k.a `labels[0]` works with `values[0]`). Therefore, why not returning an array of a struct pairing the two elements together? It took me a while to understand how to use it and I can't it's been a nice moment. :-/

Still glad that this library exists though and hope it'll only get better!
Hi!

There's an open PR (https://github.com/conda-forge/staged-recipes/pull/4649 ) to make a conda package from libpostal. Unfortunately it's abandoned, but I'd like to pick it up and finish it. 

Just want to check, is this ok for you (I'll be the maintainer, should not be work from your side afaik)?
Hi guys.  I am not familiar with libpostal. Does it support to convert a normalized address to a free text? 
e.g.
```
{
    "house_number:"475",
    "road": "sansome st",
    "city": "san francisco",
    "state": "ca"
}

--> "475, Sansome St, San Francisco, CA"
```
Hi!

I was checking out libpostal, and saw something that could be improved.

---
#### My country is
United States

---
#### Here's how I'm using libpostal
Parsing addresses into their components for normalization

---
#### Here's what I did
Attempted to parse some addresses but found that the `house_number` component was not properly parsed into the address components, but remained in the `road` component.

NOTE: The addresses I am putting below have been slightly changed as they come from our customer data; the house and unit numbers were changed, but the same behavior is exhibited for both the "anonymized" data as well as the actual data.

---
#### Here's what I got
```
> 3901 Riverlook Pkwy SE Unit 123, Marietta, GA 30067
{
  "road": "3901 riverlook pkwy se",
  "unit": "unit 123",
  "city": "marietta",
  "state": "ga",
  "postcode": "30067"
}

> 481 Guibor Ct NW, Kennesaw, GA 30144
{
  "road": "481 guibor ct nw",
  "city": "kennesaw",
  "state": "ga",
  "postcode": "30144"
}
```

---
#### Here's what I was expecting
```
> 3901 Riverlook Pkwy SE Unit 123, Marietta, GA 30067
{
  "house_number": "3901",
  "road": "riverlook pkwy se",
  "unit": "unit 123",
  "city": "marietta",
  "state": "ga",
  "postcode": "30067"
}

> 481 Guibor Ct NW, Kennesaw, GA 30144
{
  "house_number": "481"
  "road": "guibor ct nw",
  "city": "kennesaw",
  "state": "ga",
  "postcode": "30144"
}
```


Note that if I change the house number for these addresses to be a different length, I do get what I would expect:
```
> 390 Riverlook Pkwy SE Unit 123, Marietta, GA 30067
{
  "house_number": "390",
  "road": "riverlook pkwy se",
  "unit": "unit 123",
  "city": "marietta",
  "state": "ga",
  "postcode": "30067"
}

> 31 Guibor Ct NW, Kennesaw, GA 30144
{
  "house_number": "31",
  "road": "guibor ct nw",
  "city": "kennesaw",
  "state": "ga",
  "postcode": "30144"
}

```

---
#### For parsing issues, please answer "yes" or "no" to all that apply.

- Does the input address exist in [OpenStreetMap](https://openstreetmap.org)?
No -- the non-anonymized versions of these addresses are real and do exist, though.
- Do all the toponyms exist in OSM (city, state, region names, etc.)?
yes (city/state)

- If the address uses a rare/uncommon format, does changing the order of the fields yield the correct result?
I don't believe these to be in an unusual format, but changing the house number digit length does appear to work as expected
- If the address does not contain city, region, etc., does adding those fields to the input improve the result?
n/a
- If the address contains apartment/floor/sub-building information or uncommon formatting, does removing that help? Is there any minimum form of the address that gets the right parse?
No:
```
> 3901 Riverlook Pkwy SE, Marietta, GA 30067
{
  "road": "3901 riverlook pkwy se",
  "city": "marietta",
  "state": "ga",
  "postcode": "30067"
}
```

---
#### Here's what I think could be improved
Overall, this is a wonderful library, but it would be great to have these small issues fixed.


Hi Team!

I am using libpostal to expand address, I ran into a case where libpostal doesn't do any sort of expanding.  Here is the example and how to reproduce:
example address: "1608 S J St Fl 3, Tacoma, WA, 98405, US"

when I run the following command `./src/libpostal "1608 S J St Fl 3, Tacoma, WA, 98405, US"`
The results that I get back are:
```
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
1608 s j st fl 3, tacoma, wa, 98405, us
```

It doesn't seem to be doing any sort of expanding and is returning multiple copies, any help would be greatly appreciated
Thanks!



Hi!

I was checking out libpostal, and saw something that could be improved.

---
#### My country is
India

---
#### Here's how I'm using libpostal
I have created a libpostal API which I am using in my java code.
API uses below maven dependency:

org.bytedeco
libpostal-platform
1.1-alpha-1.5.1

---
#### Here's what I did
I have deployed my code on an AWS machine.

---
#### Here's what I got
When the service is running, after a few days (or few 1000 requests), the service went down with the attached error. I have to redeploy it again to make it work. But if the issue persists, It'll be a problem for me to always check and redeploy it.

---
#### Here's what I was expecting
I am expecting my service to be running until I stop it.

---
`Attaching the log file for the error: `
[hs_err_pid23224.log](https://github.com/openvenues/libpostal/files/3930750/hs_err_pid23224.log)

`Core Dump:`
[core_dump.log](https://github.com/openvenues/libpostal/files/3931525/core_dump.log)



Hi!

I tried making libpostal work with C#, but after compilation of libpostal into a dll and trying to load it via C# code it shows this error:

Could not copy the file libpostal.dll because it was not found

I wasnt able to find anything on the web about this error.

Let me know how to fix it.


Hi!

I was checking out libpostal, and saw something that could be improved.

---
#### I am testing a **Korean** address.

---
#### Here's how I'm using libpostal
I have created a libpostal API which I am using in my java code.
API uses below maven dependency:
**<dependency>
            <groupId>org.bytedeco</groupId>
            <artifactId>libpostal-platform</artifactId>
            <version>1.1-alpha-1.5.1</version>
 </dependency>**

---
#### Here's what I did
Address passed to libpostal:
**GRAND HYATT INCHEON 208 Yeongjonghaeannam-ro, 321 Beon-gil, Jung-gu, Incheon 22382 Korea**

---
#### Here's what I got
**{
  "house": "grand hyatt incheon",
  "house_number": "208",
  "road": "yeongjonghaeannam-ro 321 beon-gil",
  "city_district": "jung-gu",
  "city": "incheon",
  "postcode": "22382",
  "city": "korea"
}**

---
#### Here's what I was expecting
"city": "incheon"

But I got two cities Incheon and Korea. Korea is a country.

---
#### For parsing issues, please answer "yes" or "no" to all that apply.

- Does the input address exist in [OpenStreetMap](https://openstreetmap.org)?
  No
- Do all the toponyms exist in OSM (city, state, region names, etc.)?
  Don't know.
- If the address uses a rare/uncommon format, does changing the order of the fields yield the correct result?
  Yes
**Example** - 
Address: GRAND HYATT INCHEON 208 Yeongjonghaeannam-ro, 321 Beon-gil, Jung-gu, 22382 Incheon Korea
Result:
{
  "house": "grand hyatt incheon",
  "house_number": "208",
  "road": "yeongjonghaeannam-ro 321 beon-gil jung-gu",
  "postcode": "22382",
  "city": "incheon",
  "country": "korea"
}

- If the address does not contain city, region, etc., does adding those fields to the input improve the result?
- If the address contains apartment/floor/sub-building information or uncommon formatting, does removing that help? Is there any minimum form of the address that gets the right parse?

---
#### Here's what I think could be improved
Korean addresses

