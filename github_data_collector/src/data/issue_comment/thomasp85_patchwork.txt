Hi there,

My project team and I have found this package much more useful and intuitive than `cowplot`, so thank you! 

We've been using `patchwork` to combine multiple plots into one figure. Our largest figure is a 3x3 grid where each plot is a combined 2x1 plot, so there's actually a total of 18 `ggplot` objects.

We were hoping to use the `plot_layout(tag_level = 'new')` feature to skip labeling our subplots, but the skipped subplots also skip the associated label letters. Here is a simplified example:

``` r
library(tidyverse)
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) + ggtitle("Main plot 1")
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) + ggtitle("Main plot 2")
h1 <- ggplot(mtcars) + geom_histogram(aes(mpg)) + plot_layout(tag_level = 'new') + ggtitle("Subplot 1")
h2 <- ggplot(mtcars) + geom_histogram(aes(gear)) + scale_x_continuous(limits = c(2.5, 5.5), expand = c(0, 0)) + ggtitle("Subplot 2") + plot_layout(tag_level = 'new')
((p1 / h1) | (p2 / h2)) + plot_annotation(tag_levels = c('A'))
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
#> Warning: Removed 2 rows containing missing values (geom_bar).
```

![](https://i.imgur.com/ynwXF9k.png)

<sup>Created on 2020-01-17 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>


We've instead used `ggplot2`'s `labs(title = )` feature, like in the modified example below, to manually create labels for our nine plots, but were hoping for a simpler solution through `patchwork`.

``` r
library(tidyverse)
library(patchwork)
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) + ggtitle("Main plot 1")
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) + ggtitle("Main plot 2")
h1 <- ggplot(mtcars) + geom_histogram(aes(mpg)) + plot_layout(tag_level = 'new') + ggtitle("Subplot 1")
h2 <- ggplot(mtcars) + geom_histogram(aes(gear)) + scale_x_continuous(limits = c(2.5, 5.5), expand = c(0, 0)) + ggtitle("Subplot 2")
(((p1 + labs(title = "A")) / h1) | ((p2 + labs(title = "B")) / h2))
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
#> `stat_bin()` using `bins = 30`. Pick better value with `binwidth`.
#> Warning: Removed 2 rows containing missing values (geom_bar).
```

![](https://i.imgur.com/7mwvZu2.png)

<sup>Created on 2020-01-17 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>


I figured out how to get the collected guide on
the bottom of the plot by finding issue #144.  It
might be worth it to add more explicit docs in the
package proper.

Also, bonus typo fix.  Documents on the whole are
excellent, really a pleasure to read through them
Hi Thomas,

If you use `plot_annotation` to annotate some plots and then wrap them into a patchwork, the annotations are dropped.

Here is an example:

```
p1 <- ggplot(mtcars) + geom_point(aes(mpg, disp)) + 
  plot_annotation(caption = 'I am plot p1')
p2 <- ggplot(mtcars) + geom_boxplot(aes(gear, disp, group = gear)) + 
  plot_annotation(title = "PLOT2", caption = 'I am plot p2')
wrap_plots(p1, p2)
```

Is this a bug in `wrap_plots` or am I missing something? Wouldn't a `keep_annotations` parameter be useful/doable?

Dan
I'm getting an error when I try to use patchwork on a faceted ggplot with a manually-placed legend (i.e. `theme(legend.position = ...)`). Here's a reprex.

``` r
library(ggplot2)
library(patchwork)

p1 <- ggplot(mtcars, aes(mpg, disp, col = as.factor(gear))) +
  geom_point() +
  facet_wrap(~ cyl) +
  theme(legend.position = c(0.1, 0.7))

# plot by itself
p1
```

![](https://i.imgur.com/6OQN9gs.png)

``` r

# plot within patchwork
p1 / p1
#> Error in FUN(X[[i]], ...): subscript out of bounds
wrap_plots(p1, p1)
#> Error in FUN(X[[i]], ...): subscript out of bounds
```
<sup>Created on 2020-01-06 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

It works fine when I remove the `facet_wrap()`, or the `theme(legend.position = ...)` line. Something about both of them together seems to cause an issue.
Is there a way to center titles created with plot_annotation()?

I expected this to have one title centered on the panel and one centered across the whole plot, but the `hjust` parameter did not seem to be active for `plot_annotation`. Perhaps I should be using different syntax?

(Related to https://github.com/thomasp85/patchwork/issues/43 and https://stackoverflow.com/questions/59482694/center-legend-in-ggplot2-relative-to-image)

```
library(ggplot2)
library(patchwork)
ggplot(midwest, aes(area, poptotal)) +
  geom_point() +
  labs(title = "plot-centered title") +
  theme(plot.title = element_text(hjust = 0.5)) +
  plot_annotation(title = "image-centered title") +
  theme(plot.title = element_text(hjust = 0.5))
```

![image](https://user-images.githubusercontent.com/18709859/71456674-69d9c300-274f-11ea-93ce-40c89520501e.png)

Hi, this is not an issue but is there anyway patchwork could insert a zoom-in figure in a larger figure?
On the current master branch, legend justification for fixed aspect ratio plots is broken:
``` r
library(ggplot2)
library(patchwork)
p1 <- ggplot(mtcars, aes(cyl, qsec, color=as.factor(vs))) +
    geom_point()
p2 <- p1 + labs(color="a very looooooong legend title")
p1 + p2 + plot_layout(ncol=1) & theme(legend.justification = "left", aspect.ratio=1)
```

![](https://i.imgur.com/1ZHGVPb.png)

<sup>Created on 2019-12-08 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

This patch fixes this issue:
``` r
library(ggplot2)
library(patchwork)
p1 <- ggplot(mtcars, aes(cyl, qsec, color=as.factor(vs))) +
    geom_point()
p2 <- p1 + labs(color="a very looooooong legend title")
p1 + p2 + plot_layout(ncol=1) & theme(legend.justification = "left", aspect.ratio=1)
```

![](https://i.imgur.com/VfcHVH3.png)

<sup>Created on 2019-12-08 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>
See example below. Any suggestions?

```
library(patchwork)
make_plot <- function() {
  hc <- hclust(dist(USArrests), "ave")
  patchwork::wrap_elements(~ plot(hc))
}

plot_list <- list()
plot_list[[1]] <- make_plot()
patchwork::wrap_plots(plot_list, ncol = 1)
```

Output:

```
Error in plot(hc) : object 'hc' not found
```
I have two ggraphs to patch. 
``` r 
library(tidygraph)
library(ggraph) 

g1 <- gsi_wave1 %N>% 
  mutate(degree_sum = centrality_degree(mode = "all")) %>% 
  ggraph(layout = "kk") +
  geom_edge_link(aes(alpha = 0.5),
                 # Add arrow points 
                 arrow = arrow(length = unit(1, "mm")),
                 start_cap = circle(0.5, "mm"),
                 end_cap = circle(0.5, "mm")) +
  geom_node_point(aes(color = degree_sum,
                      alpha = 0.8)) + 
  scale_color_viridis(discrete = FALSE, option = "D") +
  theme_void() +
  ggtitle("GSI Network in wave 1 (2008-2010)")

g2 <- gsi_wave3 %N>% 
  mutate(degree_sum = centrality_degree(mode = "all")) %>% 
  ggraph(layout = "kk") +
  geom_edge_link(aes(alpha = 0.5),
                 # Add arrow points 
                 arrow = arrow(length = unit(1, "mm")),
                 start_cap = circle(0.5, "mm"),
                 end_cap = circle(0.5, "mm")) +
  geom_node_point(aes(color = degree_sum,
                      alpha = 0.8)) + 
  scale_color_viridis(discrete = FALSE, option = "D") +
  theme_void() +
  ggtitle("GSI Network in wave 3 (2015-2017)")

library(patchwork) 
g1 + g2 + plot_layout(guides = 'collect') & theme(legend.position = 'bottom')
```

The patched plot shows a collected legend in a vertical format. 
![plot_zoom](https://user-images.githubusercontent.com/54168331/70145151-c878c780-16e2-11ea-8c34-57263aa07ab1.png)

How can I get a collected legend in a horizontal format as in the individual graph? 
Is there a way to apply absolute `widths` and `heights` to each individual plot in a facet_wrap? Maybe as special option in `plot_layout()`?

```r
fw <- 
  ggplot(mtcars) +
  geom_point(aes(mpg, disp)) +
  facet_wrap(vars(cyl))

fw
# current output
fw + plot_layout(widths = unit(40, "mm"), heights = unit(40, "mm"))
# desired output similar to this
fw %>% egg::set_panel_size() %>% ggpubr::as_ggplot()
```