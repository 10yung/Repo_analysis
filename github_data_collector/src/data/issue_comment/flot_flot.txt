jquery 3.4.1

jquery.flot.js [v0.8.3]
jquery.flot.resize.js [v1.1]
Steps to reproduce:

- Create graph with horizontal bars
- Specify x-axis type as datetime

Notice, the bars will originate from the right side of the graph. This is only the case when the x-axis data is of type datetime.

![image](https://user-images.githubusercontent.com/25089669/72366301-9aae7780-36bf-11ea-861b-f6122a342c6a.png)

Hi,
i am using a legend in a container
and i  am styling the fontsize of this container. It works but there is a problem with the label width.

Actually, the fontsize used to calculate the label width is the fontsize of the body.

so i change the jquery.flot.legend.js  to solve my problem, line 53 :
`var style = window.getComputedStyle(document.querySelector('body'));`
`if (options.legend.container != null) {`
`    var style = window.getComputedStyle(options.legend.container);`
`}`

in that way, the fontsize used to calculate the label width is the fontsize of the legend container.

what do you think about it ?
Since jQuery fadeIn is used there is a delay before the tooltip shows up in which time the user may still be moving the mouse.   It is possible to have tooltip show up after user has already removed cursor from canvas.  See:  https://stackoverflow.com/a/29588856/562644
On jquery.flot.js, function measureTickLabels, the following if statement
`
                if (!t.label ||
                    (showMajorTickLabels === false && i > 0 && i < ticks.length - 1) ||
                    (showEndpointsTickLabels === false && (i === 0 || i === ticks.length - 1))) {
                    continue;
                }
`
ignores the first and last ticks when showEndpointsTickLabels is false.
The default opts.showTickLabels is "major", so showEndpointsTickLabels becomes false.

A plot with the last tick having a longer text gets clipped.
The same problem happens with axes with only one or two tick labels, such as the horizontal axis of a barchart with a single bar.
Issue: #1727 
When using the fillbetween plugin, it fails with a "ReferenceError: assignment to undeclared variable format" exception. This only happens when using the minimized version.


…should be displayed.

Default to true so that it is backwards compatible.

These handles seem like they may be useful for both fill and focused visualizations, but that would probably need to happen in a major version.
Adding a rect object that can be shown with setting legend option `showColorRect: true`

I tried creating a PR with the 0.9: work branch as seen in the CONTRIBUTING.d document but there hadn't been any new commits since may 2014?

Anyway, I did not see a way to show in the legend for a pie chart which label lined up to what color. I also could not see anything in documentation for this. Creating this pr for a simple contribution if maintainers want it. I'm open to discuss further if there is a better placement for this. Or if it's not needed feel free to delete PR, this was mostly a quick solution.

Thanks,
Connor
I would expect that axis label color is changed when I use code like this:
xaxes:
[{
    font: {
         color: "#545454"
    }
}]
But there is no change:

![grafik](https://user-images.githubusercontent.com/8238668/68527603-fb4cbd00-02e8-11ea-8008-88b5b1744d61.png)

I use below code:
`
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Flot Examples: Colored Axis Label</title>
    <link href="../examples.css" rel="stylesheet" type="text/css">
    <script language="javascript" type="text/javascript" src="../../source/jquery.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.canvaswrapper.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.colorhelpers.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.saturated.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.browser.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.drawSeries.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.uiConstants.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.time.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.legend.js"></script>
    <script language="javascript" type="text/javascript" src="../../source/jquery.flot.axislabels.js"></script>
    <script type="text/javascript">

        function CalcTicks4X(axis) {
            var ticks = [];
            var minDate = new Date(axis.min);
            const dayDiff = (axis.max - axis.min) / 1000 / 60 / 60 / 24;
            console.log('CalcTicks4X: DayDiff ' + dayDiff + ' (' + axis.max + ' ' + axis.min + ')');

            //if we only few hours then we need markings per hour otherwise per day
            if (dayDiff > 2) {
                minDate.setUTCHours(12);
                minDate.setUTCMinutes(0);
                var i = minDate.getTime();
                do {
                    ticks.push([i]);
                    i += 24 * 60 * 60 * 1000;
                } while (i < axis.max);
            }
            else {
                minDate.setUTCHours(0);
                minDate.setUTCMinutes(0);
                var i = minDate.getTime();
                do {
                    ticks.push([i]);
                    i += 6 * 60 * 60 * 1000;
                } while (i < axis.max);
            }
            return ticks;
        }

        function degreeFormatter(v, axis) {
            return v.toFixed(axis.tickDecimals) + "°C";
        }

        function GridMarkings(axes) {
            var markings = [];
            var minDate = new Date(axes.xaxis.min);
            const dayDiff = (axes.xaxis.max - axes.xaxis.min) / 1000 / 60 / 60 / 24;
            console.log('GridMarkings: DayDiff ' + dayDiff + ' (' + axes.xaxis.max + ' ' + axes.xaxis.min + ')');

            var i = minDate.getTime();
            //if we only few hours then we need markings per hour otherwise per day
            if (dayDiff > 2) {
                do {
                    markings.push({ xaxis: { from: i, to: i + 24 * 60 * 60 * 1000 }, color: "#eaebe5" });
                    i += 2 * 24 * 60 * 60 * 1000;
                } while (i < axes.xaxis.max);
            }
            else {
                do {
                    markings.push({ xaxis: { from: i, to: i + 60 * 60 * 1000 }, color: "#eaebe5" });
                    i += 2 * 60 * 60 * 1000;
                } while (i < axes.xaxis.max);
            }
            return markings;
        }

        function legendformater(label, series) {
            //wenn keine Daten, dann ausblenden ->  (return null)
            if (series.data == null || typeof series.data == "undefined" || typeof series.data[0] == "undefined") {
                console.log('legendformater no label ');
                return null;
            }
            else {
                console.log('legendformater label ' + label);
                return label;
            }
        }
        $(function () {
            var d1 = [];
            var dateMin = -1;
            var dateMax = -1;

            for (var i = 0; i < 14; i += 0.5) {
                temp = 10 + i;
                oDate = new Date();
                oDate.setUTCHours(oDate.getUTCHours() + i * 10);
                var date = oDate.getTime();
                if (dateMin === -1) {
                    dateMin = date;
                }
                dateMax = date;
                console.log("data " + i + " : " + oDate.toString() + " " + temp);
                d1.push([date, temp]);
            }
            barwidth = barwidth = 1000 * 60 * 60 * 1;
            $.plot("#placeholder",
                [
                    {
                        data: d1,
                        color: "red",
                        xaxis: 1,
                        yaxis: 1,
                        label: "test",
                        lines: { show: true },
                        bars:
                        {
                            show: false,
                            barWidth: [barwidth, true],
                            align: "center",
                            horizontal: false
                        }
                    }
                ],
                {
                    xaxes:
                        [{
                            axisLabel: "TIME",
                            axisLabelUseCanvas: true,
                            show: true,
                            mode: "time",
                            timeBase: "milliseconds",
                            tickLength: 5,
                            min: dateMin,
                            max: dateMax,
                            //ticks: data.ticksonxaxix > 0 ? parseInt(data.ticksonxaxix, 10) : 5,
                            ticks: CalcTicks4X,
                            autoScale: "none",
                            timeformat: "%d.%b %H:%M",
                            monthNames: ["Jan", "Feb", "Mar", "Apr", "Mai", "Jun", "Jul", "Aug", "Sep", "Okt", "Nov", "Dez"],
                            color: "red",
                            tickColor: "red",
                            font: {
                                //color: data.tickscolor,
                                size: 11,
                                lineHeight: 13,
                                style: "italic",
                                weight: "bold",
                                family: "sans-serif",
                                variant: "small-caps",
                                color: "#545454"
                            },
                            timezone: "browser"
                        }],
                    yaxes:
                        //temp y-axis #1
                        [{
                            axisLabel: "Temperature",
                            axisLabelUseCanvas: true,
                            show: true,
                            max: 30, //0 = default = auto determine max/min value
                            min: -10,
                            alignTicksWithAxis: 1,
                            position: 'left',
                            ticks: 3,
                            color: "blue",
                            tickColor: "blue",
                            //font: {
                            //color: data.tempcolor,
                            //size: 11,
                            //lineHeight: 13,
                            //style: "italic",
                            //weight: "bold",
                            //family: "sans-serif",
                            //variant: "small-caps",
                            //color: "#545454"
                            //},
                            tickFormatter: degreeFormatter
                        },
                        ],
                    grid:
                    {
                        markings: GridMarkings,
                        backgroundColor: { colors: ["#fff", "#eee"] },
                        borderWidth: {
                            top: 1,
                            right: 1,
                            bottom: 2,
                            left: 2
                        },
                    },
                    legend: {
                        show: true,
                        labelFormatter: legendformater,
                        //labelBoxBorderColor: color,
                        //noColumns: number,
                        position: "ne",
                        //margin: number of pixels or [x margin, y margin]
                        backgroundColor: null,
                        backgroundOpacity: 0,
                        container: null,
                        sorted: false
                    }
                }
            );
            // Add the Flot version string to the footer
            $("#footer").prepend("Flot " + $.plot.version + " &ndash; ");
        });
    </script>
</head>
<body>
	<div id="header">
		<h2>Basic Usage</h2>
	</div>
	<div id="content">
		<div class="demo-container">
			<div id="placeholder" class="demo-placeholder"></div>
		</div>
	</div>
</body>
</html>

`