## 1. Controller → HttpKernel

- #2698 
- @Route annotations above actions

<br>

## 2. Disptacher → Event Dispacher

<br>

## 3. Template .ctp to Twig

- #2709
- php templates

```php
<div class="rights form">
<?php echo $this->Form->create('Right'); ?>
    <fieldset>
        <legend><?php echo __('Edit Right'); ?></legend>
    <?php
        echo $this->Form->input('id');
        echo $this->Form->input('right_category_id');
        echo $this->Form->input('name');
        echo $this->Form->input('label');
        echo $this->Form->input('description');
        echo $this->Form->input('Role');
    ?>
    </fieldset>
<?php echo $this->Form->end(__('Submit')); ?>
</div>
<div class="actions">
    <h3><?php echo __('Actions'); ?></h3>
    <ul>

        <li><?php echo $this->Form->postLink(__('Delete'), ['action' => 'delete', $this->Form->value('Right.id')], null, __('Are you sure you want to delete # %s?', $this->Form->value('Right.id'))); ?></li>
        <li><?php echo $this->Html->link(__('List Rights'), ['action' => 'index']); ?></li>
        <li><?php echo $this->Html->link(__('List Right Categories'), ['controller' => 'right_categories', 'action' => 'index']); ?> </li>
        <li><?php echo $this->Html->link(__('New Right Category'), ['controller' => 'right_categories', 'action' => 'add']); ?> </li>
        <li><?php echo $this->Html->link(__('List Roles'), ['controller' => 'roles', 'action' => 'index']); ?> </li>
        <li><?php echo $this->Html->link(__('New Role'), ['controller' => 'roles', 'action' => 'add']); ?> </li>
    </ul>
</div>
```

<br>

## 4. Database Active Rector to Doctrine ORM
Failing test case for #2696.
<!-- First, thank you for reporting a bug. That takes time and we appreciate that! -->

| Subject        | Details                                                      |
| :------------- | :----------------------------------------------------------- |
| Rector version | 0.6.10|
| PHP version    | PHP 7.2|

## Current Behaviour 

```diff
1) src/Email/Email.php

    ---------- begin diff ----------
--- Original
+++ New
@@ -42,7 +42,7 @@
      * @throws \InvalidArgumentException
      * @throws StringsException
      */
-    public function __construct($value)
+    public function __construct(string $value)
     {
         $validator = new EmailValidator();
    ----------- end diff -----------

Applied rules:

 * Rector\CodingStyle\Rector\Namespace_\ImportFullyQualifiedNamesRector
 * Rector\TypeDeclaration\Rector\FunctionLike\ParamTypeDeclarationRector
 * Rector\TypeDeclaration\Rector\ClassMethod\AddParamTypeDeclarationRector
 * Rector\Rector\Argument\ArgumentRemoverRector
 * Rector\CodingStyle\Rector\ClassMethod\ReturnArrayClassMethodToYieldRector
 * Rector\CodeQuality\Rector\If_\RemoveAlwaysTrueConditionSetInConstructorRector
 * Rector\DeadCode\Rector\ClassMethod\RemoveOverriddenValuesRector
 * Rector\DeadCode\Rector\FunctionLike\RemoveCodeAfterReturnRector

```

The class `Email` inherits from a generic interface with this signature:

```php
interface SimpleValueObjectInterface extends ValueObjectInterface
{
    /**
     * Accepts a simple scalar value.
     *
     * @param mixed $value
     */
    public function __construct($value);
}
```

Adding the type hint `string` causes the code to break.

I'm going to write a failing test case for this.
<!-- First, thank you for reporting a bug. That takes time and we appreciate that! -->

| Subject        | Details                                                      |
| :------------- | :----------------------------------------------------------- |
| Rector version | 0.6.10 |
| PHP version    | PHP 7.2 |

## Current Behaviour 

```diff
  *
  * @ORM\Embeddable
  */
-class Address implements AddressInterface
+final class Address implements AddressInterface
 {
     use ComplexValueObjectTrait {
         __construct as traitConstruct;
    ----------- end diff -----------

Applied rules:

 * Rector\SOLID\Rector\Class_\FinalizeClassesWithoutChildrenRector
 * Rector\CodingStyle\Rector\Namespace_\ImportFullyQualifiedNamesRector
```

Rector makes the class `final` also if it shouldn't.

I have no idea of how to create a test case about this as it seems it is covered by https://github.com/rectorphp/rector/blob/master/packages/SOLID/tests/Rector/Class_/FinalizeClassesWithoutChildrenRector/Fixture/fixture.php.inc

But actually it doesn't work.

# How to reproduce the issue

As I'm not able to create a failing test case, to verify the bug it way simpler use the source code that cause the issue.

1. Clone the repo https://github.com/Aerendir/PHPValueObjects
2. `composer install`
3. Open the file `rector.yaml``
4. Uncomment the line 65 (the one that excludes the rector `Rector\SOLID\Rector\Class_\FinalizeClassesWithoutChildrenRector`)
5. Run the command `vendor/bin/rector process src/Address/Address.php`

The bug appears.
| Subject        | Details                                                      |
| :------------- | :----------------------------------------------------------- |
| Rector version | v0.6.10 |
| PHP version    | v7.4.1 |
| Full Command   | vendor/bin/rector process /src --set php7.4 --debug  | 

## Current Behaviour 

<!-- report from command line with --debug -->
<!-- description/screenshot -->

## Minimal PHP Code Causing Issue

<!-- if possible, always run Rector on specfic file, that causes the error -->
<!-- e.g. vendor/bin/rector process /src/SpecificFile.php --set dead-code --debug -->  

```php
<?php 

/**
 * @var User|null
 */
private $user;
```

## Current Behaviour

```php
<?php 

private User $user;
```
## Expected Behaviour

```php
<?php 

private ?User $user;
```
<!-- First, thank you for reporting a bug. That takes time and we appreciate that! -->

| File permission denied error| When running vendor/bin/rector process vendor/zendframework/zendframework1 --set php74 --dry-run  command  in windows :include(): read of 4096 bytes failed with errno=13 Permissio`n denied in D:\laragon\www\rector_test\vendor\symfony\http-kernel\Kernel.php on line 486
|
| :------------- | :----------------------------------------------------------- |
| 
| v0.6.10 | 
| 7.4 | 
| vendor/bin/rector process vendor/zendframework/zendframework1 --set php74 --dry-run| 

From observing of people who use Rector, nobody knows what node classes they can use.
PHPStorm lacks autocomplete there :/

```php
public function getNodeTypes()
{
    return [String_::class];
}
```

If we have custom `NodeClass` class with constant to autocomplete, it would limit list of allowed classes and show all that is possible:

```php
public function getNodeTypes()
{
    return [NodeClass::STRING];
}
```

This prevent the fixing of PhpDoc block with `@inheritdoc` annotation from `Rector\TypeDeclaration\Rector\Property\CompleteVarDocTypePropertyRector` rector.
Stubs are mocks with zero expectations.
 
## Diff 

The following diff should be applied _iff_ no expectations are performed later on on `$service`.

```diff
- $service = $this->createMock(Service::class);
+ $service = $this->createStub(Service::class);
```

So it should be applied iff `expects()` is never called.
`expects()` appears in the interface of `MockObject`: https://github.com/sebastianbergmann/phpunit/blob/5e523bdc7dd4d90fed9fb29d1df05347b3e7eaba/src/Framework/MockObject/MockObject.php#L24 and not in the interface of `Stub`.

```php
$this->createMock(Service::class)->method('something')->willReturn('something else');
// should be left untouched
```

But after reading [this line](https://github.com/sebastianbergmann/phpunit/blob/5e523bdc7dd4d90fed9fb29d1df05347b3e7eaba/src/Framework/MockObject/Stub.php#L15) I think it can be applied if only `method()` is called (it's not an expectation)

```diff 
- $this->createMock(Service::class)->method('something');
+ $this->createStub(Service::class)->method('something');
```


Implemented in https://github.com/sebastianbergmann/phpunit/pull/3810 , since 8.4.0

This PR adds two fixtures relating to `trait` handling by `CountOnNullRector`. Currently : 

* `PropertyWithinTraitMethod` : passes :+1:
* `VariableWithinTraitMethod` : fails :-1: 

If I change the Fixture from a `trait` to a `class` they both pass, so this is related to how a variable within a trait is handled.

I spent some time digging and tried to use `\Rector\NodeTypeResolver\PerNodeTypeResolver\VariableTypeResolver::resolve()` that seems to be written to handle resolution of variables (though it's used nowhere in Rector's code, only in its own Test file :thinking: ) by calling : 

* `resolveTypesFromScope($node)`, which calls...
* `resolveNodeScope($node)`, which calls on `\Rector\NodeTypeResolver\PHPStan\Collector\TraitNodeScopeCollector`...
* `getScopeForTraitAndNode($traitName, $node)`)

But it returned `null`, which was resolved to `MixedType` in `resolveTypesFromScope` and bubbled up back to `\Rector\Php71\Rector\FuncCall\CountOnNullRector::refactor` which passes the `isNullableType` check and thus refactors the code.

@TomasVotruba Any idea how to deal with this one ?