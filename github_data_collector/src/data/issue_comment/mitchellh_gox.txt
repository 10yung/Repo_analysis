gox does not list openbsd/arm as a valid target:

````
gox -osarch-list | grep openbsd                                                                                                                                       
openbsd/386	(default: true)
openbsd/amd64	(default: true)
````

Trying to build executable:

````
> $ gox -osarch="openbsd/arm" -output="bin/{{.Dir}}_{{.OS}}_{{.Arch}}"                                                                                                    
No valid platforms to build for. If you specified a value
for the 'os', 'arch', or 'osarch' flags, make sure you're
using a valid value.
````
However, building by Go directly works just fine:

````
> $ GOOS=openbsd GOARCH=arm go build -v -o mybin
> $ file mybin                                                                                                                                                            
mybin: ELF 32-bit LSB executable, ARM, version 1 (OpenBSD), statically linked, for OpenBSD, not stripped
````

Version info:

````
> $ go version                                                                                                                                                            
go version go1.13.4 darwin/amd64
````


OS:  10.15.1
go: 1.13.5
Quick change to allow passing through the new -trimpath build option added in Go 1.13.
When running gox on Go version 1.12 the below error happens

```
gox -os="linux"
error reading Go version: exit status 1
Stderr: fork/exec /tmp/go-build807060871/b001/exe/version: permission denied
```

Is there anything missing. It works fine on Windows. Is there anything that is missing, gox works with GO version 1.12 ?

This fixes https://github.com/mitchellh/gox/issues/108
In order not to have to deal with `go mod` issues appearing when executing the version check in a directory having private Go modules but no valid authentication to update them execute the version check in the tempdir already created.

That way the `go run` command will not detect the `go.mod` file of the program to build later on and therefore will not try to fetch the private modules which it can't fetch.
Is it possible to have effects similar to the below pseudocode
```
gox -os="linux darwin windows" -arch="amd64" -output="dist/{{basename $PWD}}_{{.OS}}_{{.Arch}}" ./...     
```
I am mostly after the basemame $PWD as the rest seems to be working fine
Thanks in advance
It will simpler and faster integrate gox in other builds pipelines: download fixed binary from github releases instead of compile gox from sources every time.

The list of supported platforms for cross compilation have been updated to the one supported by the 1.12 version of the compiler.