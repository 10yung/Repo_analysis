

Consider this function:

```python
def simple_func(a, b, c):
    if a > b:
        return b if b > c else c
    else:
        return 0
```
To get good performance, we want to generate code that operates on machine integers, not Python objects.  That means that we must:

- Profile and record that (as is likely here) a, b, and c are all integers normally.
- Generate optimized machine code that
  - tests that a, b, and c *are* machine integers
  - if not, bail out to the interpreter and deoptimize the generated code
  - otherwise, use the optimized machine code.
How can we have debugging + Pyjion?
g++ (6.3.1) and clang++ (3.9.1), I've got 

```
/home/ryuta/packages/pyjion/src/pyjion-git/Pyjion/taggedptr.h:60:10: error: pasting "*" and "tmpIn" does not give a valid preprocessing token
  PyObject* ##name = init_number(tmp_##name, value);
          ^
/home/ryuta/packages/pyjion/src/pyjion-git/Pyjion/intrins.cpp:2445:9: note: in expansion of macro ‘INIT_TMP_NUMBER’
         INIT_TMP_NUMBER(tmpIn, UNTAG_IT(inI));
         ^~~~~~~~~~~~~~~
        size_t tmp_tmpIn[(((sizeof(PyVarObject) + sizeof(uint32_t) * ((((sizeof(tagged_ptr) * 8) - 1) + 30 - 1) / 30)) / sizeof(size_t)) + sizeof(size_t))]; PyObject*tmpIn = init_number(tmp_tmpIn, ((inI) >> 1));;
        *out = PyLong_AsDouble(tmpIn);
    }
    else {
        *out = PyLong_AsDouble(in);
    }
    return *out == -1.0 && PyErr_Occurred();
}
```

``PyObject* ##name = init_number(tmp_##name, value);``

get preprocessed to

``PyObject*tmpIn = init_number(tmp_tmpIn, ((inI) >> 1))``

``##`` of ``##name`` in ``PyObject* ##name = init_number(tmp_##name, value);`` should be removed.
Is this change valid? I don't have a Windows machine to check this change won't break the build.
After the death of pyston, the community, which had great hopes for pyjion, is starting to feel nervous about the future of pyjion. The repository is not very active, and little communication is made of it.

Pyjion is cited as the most promising attempt to speed up Python on HN, /r/python, twitter regularly, so enthusiasm is here. 

So how is it going on ? Be honest. We all can understand people at MS have many important things to do and nobody would blame you if you couldn't work on it.

On the other hand, if you need help (money, people) to carry on, we could spread the word.
What is JIT?

... yeah, I can google it  ... but why not mention it at least once in README?

JIT --> [Just In Time Compilation](https://en.wikipedia.org/wiki/Just-in-time_compilation)

> Never take anything for granted.
I was trying to run PatchDeps.bat file,but it gives patch cannot be applied error.

C:\Users\gillelas\Desktop\Pyjion>PatchDeps.bat
Disabling COM interop support in CoreCLR...
error: patch failed: src/inc/utilcode.h:8
error: src/inc/utilcode.h: patch does not apply
error: patch failed: src/utilcode/CMakeLists.txt:134
error: src/utilcode/CMakeLists.txt: patch does not apply
error: patch failed: src/utilcode/longfilepathwrappers.cpp:1190
error: src/utilcode/longfilepathwrappers.cpp: patch does not apply
error: patch failed: src/utilcode/util.cpp:212
error: src/utilcode/util.cpp: patch does not apply
error: patch failed: src/CMakeLists.txt:125
error: src/CMakeLists.txt: patch does not apply
error: patch failed: build.cmd:338
error: build.cmd: patch does not apply
error: patch failed: clr.coreclr.props:10
error: clr.coreclr.props: patch does not apply
error: patch failed: clr.defines.targets:18
error: clr.defines.targets: patch does not apply
error: patch failed: clr.desktop.props:19
error: clr.desktop.props: patch does not apply
error: patch failed: CMakeLists.txt:762
error: CMakeLists.txt: patch does not apply
Applying changes to enable JIT support in Python...
error: patch failed: Include/ceval.h:10
error: Include/ceval.h: patch does not apply
error: patch failed: Include/code.h:7
error: Include/code.h: patch does not apply
error: patch failed: Include/dictobject.h:142
error: Include/dictobject.h: patch does not apply
error: patch failed: Include/pystate.h:12
error: Include/pystate.h: patch does not apply
error: patch failed: Objects/codeobject.c:152
error: Objects/codeobject.c: patch does not apply
error: patch failed: Python/ceval.c:770
error: Python/ceval.c: patch does not apply
..\Patches\Python\Python\pylifecycle.c:23: trailing whitespace.
#if defined(WIN32) || defined(WIN64)
..\Patches\Python\Python\pylifecycle.c:31: trailing whitespace.

..\Patches\Python\Python\pylifecycle.c:39: trailing whitespace.
#if defined(WIN32) || defined(WIN64)
error: patch failed: Python/pylifecycle.c:16
error: Python/pylifecycle.c: patch does not apply
error: patch failed: Python/pystate.c:80
error: Python/pystate.c: patch does not apply

I also tried applying patches one by one by going into the directory by using "git apply" on individual files, it doesnt work either. It shows something like this:

C:\Users\gillelas\Desktop\Pyjion\CoreCLR>git apply ..\Patches\CoreCLR\src\utilcode\longfilepathwrappers.cpp --verbose
Checking patch src/utilcode/longfilepathwrappers.cpp...
error: while searching for:

#ifndef FEATURE_PAL

#if ! defined(DACCESS_COMPILE) && !defined(SELF_NO_HOST)
extern HINSTANCE            g_pMSCorEE;
#endif// ! defined(DACCESS_COMPILE) && !defined(SELF_NO_HOST)

BOOL PAL_GetPALDirectoryWrapper(SString& pbuffer)
{


error: patch failed: src/utilcode/longfilepathwrappers.cpp:1190
error: src/utilcode/longfilepathwrappers.cpp: patch does not apply

I wanted to know why this is happening. Any help regarding this would be greatly appreciated.



Now that it's out, we need to target the latest released version of CoreCLR. We will need to decide if we want to target a specific branch or go by tags to handle updating our submodule details.

