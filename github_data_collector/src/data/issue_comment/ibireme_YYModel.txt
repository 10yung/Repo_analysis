我想知道 `YYClassPropertyInfo` 在初始化的时候，对 `type encoding` 为什么使用 `按位或`的操作，为什么不直接对 `type` 赋值，这样做有什么好处吗？
```
          YYEncodingType type = 0;
            case 'R': {
                type |= YYEncodingTypePropertyReadonly;
            } break;
            case 'C': {
                type |= YYEncodingTypePropertyCopy;
            } break;
            case '&': {
                type |= YYEncodingTypePropertyRetain;
            } break;
            case 'N': {
                type |= YYEncodingTypePropertyNonatomic;
            } break;
            case 'D': {
                type |= YYEncodingTypePropertyDynamic;
            } break;
            case 'W': {
                type |= YYEncodingTypePropertyWeak;
            } break;
            case 'G': {
                type |= YYEncodingTypePropertyCustomGetter;
                if (attrs[i].value) {
                    _getter = NSSelectorFromString([NSString stringWithUTF8String:attrs[i].value]);
                }
            } break;
```
以及在 `_YYModelPropertyMeta` 的构造方法中：
```
    if ((meta->_type & YYEncodingTypeMask) == YYEncodingTypeObject) {
        meta->_nsType = YYClassGetNSType(propertyInfo.cls);
    }
```
希望大神们能解释一下，感谢!!!
convert string type failure like that
`"{\"type\":3,\"cfg\":[{\"pos\":2,\"ct\":1},{\"pos\":3,\"ct\":3},{\"pos\":4,\"ct\":6},{\"pos\":5,\"ct\":10}]}"`
一个模型包含另一个模型，能否用泛型解析
![image](https://user-images.githubusercontent.com/6284590/57204073-c6814580-6fe7-11e9-8af4-d33348770285.png)

缺少个break看起来是个bug？


出错堆栈
0	libobjc.A.dylib
objc_retain + 20
1	WoZaiJia
__ModelToJSONObjectRecursive_block_invoke.444 (NSObject+YYModel.m:1222)
2	CoreFoundation
___65-[__NSDictionaryM enumerateKeysAndObjectsWithOptions:usingBlock:]_block_invoke + 124
3	CoreFoundation
-[__NSDictionaryM enumerateKeysAndObjectsWithOptions:usingBlock:] + 204
4	WoZaiJia
ModelToJSONObjectRecursive (NSObject+YYModel.m:1276)
5	WoZaiJia
-[NSObject(YYModel) yy_modelToJSONObject] (NSObject+YYModel.m:0)
Hello bireme,

Here is the reason why this pull request happened.

I have a model like this:

```
@interface HWPerson : NSObject <NSSecureCoding>

@property (nonatomic, copy) NSString *firstName;
@property (nonatomic, copy) NSString *lastName;
@property (nonatomic, assign) NSInteger age;
@property (nonatomic, strong) NSURL *avatarURL;

@end

@implementation HWPerson

+ (BOOL)supportsSecureCoding {
    return YES;
}

- (void)encodeWithCoder:(NSCoder *)aCoder {
    [self yy_modelEncodeWithCoder:aCoder];
}

- (instancetype)initWithCoder:(NSCoder *)aDecoder {
    return [self yy_modelInitWithCoder:aDecoder];
}

@end
```

I'd like to use `NSSecureCoding ` rather than `NSCoding`. Then something unexpected happened. I can `NSKeyedArchiver` to save this model to disk successfully, but I cannot read and unarchive it from the disk. There's an error. 

After debug, I found it is because the `NSURL` property. This property cannot be unarchived in `yy_modelInitWithCoder:` with method `decodeObjectforKey:`. We have to use `decodeObjectOfClass:forKey:`.

Here is the example code to save and read this mode:

```
- (void)save {
    HWPerson *person = [[HWPerson alloc] init];
    person.firstName = @"will";
    person.lastName = @"chen";
    person.age = 28;
    person.avatarURL = [NSURL URLWithString:@"https://example.com/avatar.png"];

    if (@available(iOS 11, *)) {
        NSError *error = nil;
        NSData *personData = [NSKeyedArchiver archivedDataWithRootObject:person
                                                   requiringSecureCoding:YES
                                                                   error:&error];
        if (!personData) {
            NSLog(@"Archiver Failed: %@", error.localizedDescription);
        }

        error = nil;
        BOOL result = [personData writeToFile:[self filePath]
                                      options:0
                                        error:&error];
        if (!result) {
            NSLog(@"Write to File Failed: %@", error.localizedDescription);
        }
    } else {
        BOOL result = [NSKeyedArchiver archiveRootObject:person toFile:[self filePath]];
        if (!result) {
            NSLog(@"Write to File Failed");
        }
    }
}

- (void)read {
    if (@available(iOS 11, *)) {
        NSError *error = nil;
        NSData *data = [NSData dataWithContentsOfFile:[self filePath]];
        HWPerson *person = [NSKeyedUnarchiver unarchivedObjectOfClass:HWPerson.class
                                                             fromData:data
                                                                error:&error];
        if (!person) {
            NSLog(@"Read from File Failed: %@", error.localizedDescription);
        } else {
            NSLog(@"%@·%@ is %ld", person.firstName, person.lastName, person.age);
            NSLog(@"Avatar URL: %@", person.avatarURL);
        }
    } else {
        HWPerson *person = [NSKeyedUnarchiver unarchiveObjectWithFile:[self filePath]];
        if (!person) {
            NSLog(@"Read from File Failed");
        } else {
            NSLog(@"%@·%@ is %ld", person.firstName, person.lastName, person.age);
            NSLog(@"Avatar URL: %@", person.avatarURL);
        }
    }
}
```
后台传过来的数组里是int。 想解析出来数组里都是字符串。好像不支持啊，不知道大家有没有方便的方式
arry[
    id : 1,
    name :  wangzi
    dataArry[
     object[0],
     object[1]
]
]

类似这样的数据结构，最外一层是数组，每个数组里面包含一层字典加数组的结构。在最外层数组模型里面用modelCustomClassForDictionary返回class返回的是当个模型，不能返回里面包含的数组模型。