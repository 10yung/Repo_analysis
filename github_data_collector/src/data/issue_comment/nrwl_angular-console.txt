**Description:**
ng generate fails with error "UnrecognizedToken".

**Click the _Run_ button to reproduce as follows:**

ng generate @schematics/angular:component --name=square --project=MyAppAngular

**Problem;**
The @ is making PowerShell treat @schematics/angular:component as a variable.

**Resolution:**
Add double quotes when executing command:

ng generate "@schematics/angular:component" --name=square --project=MyAppAngular

Angular console version _10.0.0_ disabled the **Generate** menu item and does not display the command palette for my project. When I downgrade to version _9.1.1_, the command works by displaying the list of commands. 

I have the `angular.json` and `nx.json` files in my workspace. I do not have the new `workspace.json` file. 
Has this feature been removed from the extension? I'm really struggling to find it and i made frequent use of it.
When creating a library the option to use ESLint is missing. This was removed in a recent update, and considering that TSLint is now deprecated ([Palantir announcing TSLint deprecation](https://medium.com/palantir/tslint-in-2019-1a144c2317a9)) this is important to have. I understand that Angular doesn't fully support ESLint ([Angular migration to ESLint issue](https://github.com/angular/angular-cli/issues/13732)), but this should still be a feature. 

Also, when applying lint fixes after say generating a component isn't currently working, even with `.eslintrc` file defined. The error I get is `Cannot find module 'tslint'` Though, I assume it's a related issue.

Sidenote: great work on the recent overhaul!

Thanks! 
Add e2e tests for vscode.

```
ng e2e vscode
```

TODO:

- [ ] Swap out mocha for jest (should be doable using `jest-cli` programmatically).
- [ ] Write meaningful assertions.
I installed the standalone app and it's only showing a white screen.
Starting it from a shell:
```
➜ ./Angular\ Console
(node:2946) [DEP0005] DeprecationWarning: Buffer() is deprecated due to security and usability issues. Please use the Buffer.alloc(), Buffer.allocUnsafe(), or Buffer.from() methods instead.
starting server on port 7968
[Nest] 2946   - 23/10/2019, 16:30:13   [NestFactory] Starting Nest application...
[Nest] 2946   - 23/10/2019, 16:30:13   [InstanceLoader] CoreModule dependencies initialized +24ms
[Nest] 2946   - 23/10/2019, 16:30:13   [InstanceLoader] ServerModule dependencies initialized +0ms
[Nest] 2946   - 23/10/2019, 16:30:13   [InstanceLoader] AngularConsoleExtensionsModule dependencies initialized +0ms
[Nest] 2946   - 23/10/2019, 16:30:13   [InstanceLoader] GraphQLModule dependencies initialized +1ms
[Nest] 2946   - 23/10/2019, 16:30:13   [NestApplication] Nest application successfully started +101ms
Listening on port 7968
```
If I access the port in my browser it seems to work. Is this the intended behavior?
Hi there,

I have been following the tutorial to create an Nx workspace for my new group of applications. After creating the empty Angular workspace, I installed the Angular Console extension in VS Code. I'm trying to use the Generate feature to create the initial application, but running into an error in the generated command...

![image](https://user-images.githubusercontent.com/3836666/67222965-0603e880-f3f4-11e9-9198-f0ce635ef5fb.png)

I notice that it seems to be using an absolute path to ng.cmd, instead of just using "ng" as I've seen it should be doing in the tutorial video. In another console window I can run "ng" commands just fine, as it is installed globally and there is a reference to "C:\Users\jordanw\AppData\Roaming\npm" in my PATH.

I'm developing on Windows 7. My globally installed Angular CLI version is "8.3.12", and I upgraded the devDependencies in my workspace's package.json to match that.

Any ideas what I could do to resolve this? Let me know if I can provide any more information.

Thanks in advance,
Jordan
![image](https://user-images.githubusercontent.com/19436246/63970681-5ef57700-ca6a-11e9-9461-658814de8de2.png)

I have set up a ng command and when I run it using cli , it works. However when I use the angular console vscode extention, it fails with the space issue in the pathing. 
[ x ] is this a bug?

I think so, or this can be a mismatch of functionalities. 

[ x ] did you search issues before creating new one?

Yes, not found similar issues for what I am reporting

[ x ] can you explain the issue in detail?

Creating a web component non-angular workspace using nx-workspace, but the newly created workspace is not detected by AngularConsole which is looking for angular.json file.

I understand the application is called Angular Console.  But if the command line allows creating a non-angular workspace, it would be great to have the Console application to detect it.

Based on the nature of AngularConsole at the current time, it remains Angular specific.  But it would be great to have it also load non-angular workspaces.  Perhaps a new name may be good to have.  NrwlConsole, maybe. 

[ x ] have steps to reproduce:

npm init nx-workspace common-utils

? What to create in the new workspace web components    [a workspace with a single app built using web components]
? Application name                    Foobar
Creating a sandbox with Nx...
new common-utils --preset=web-components --appName=Foobar --collection=@nrwl/workspace
? Which stylesheet format would you like to use? SASS(.scss)  [ http://sass-lang.com   ]

- Open AngularConsole and point it to the new workspace and it won't be able to recognize it due to the missing angular.json

[ x ] can you include the versions?

node = v12.3.1
├─┬ @nrwl/cli@8.4.3
│ ├─┬ @nrwl/tao@8.4.3
│ ├── UNMET PEER DEPENDENCY @nrwl/workspace@8.4.3
├─┬ @nrwl/schematics@8.4.3
│ ├─┬ @nrwl/angular@8.4.3
│ │ ├─┬ @nrwl/cypress@8.4.3
│ │ ├─┬ @nrwl/jest@8.4.3
│ ├─┬ @nrwl/workspace@8.4.3
│ │ ├─┬ @nrwl/cli@8.4.3
│ │ │ ├─┬ @nrwl/tao@8.4.3
npm│ ├─┬ @nrwl/workspace@8.4.3
│ │ ├─┬ @nrwl/cli@8.4.3
│ │ │ ├─┬ @nrwl/tao@8.4.3

[ x ] can you reproduce this in Electron and VSCode?

Yes, both have difficulties detecting a workspace without angular.json


Hi, I have a couple of custom schematics in my workspace. They work fine when using separate folders per schematic and each having it's own _schema.json_ (let's call this **scenario A**). 

However now I'm trying to add more schematics, which I'd like to group per subject (say schematics belong to a group _ngrx_ and a couple of schematics belonging to a group _spectator_). To be able to do that I have added a _collection.json_ file (referencing the custom schematics of course) to the schematics folder (let's call this **scenario B**). Now when I try to run the schematics using scenario B I get an exception (excerpt from angular-errors.log): 

```
[error] Error: Schematic "Workspace" not found in collection "@nrwl/angular".
    at SchematicEngine.createSchematic (A:\Repositories\ncontrol-mijnncontrol\source\node_modules\@angular-devkit\schematics\src\engine\engine.js:232:23)
    at CollectionImpl.createSchematic (A:\Repositories\ncontrol-mijnncontrol\source\node_modules\@angular-devkit\schematics\src\engine\engine.js:69:29)
    at GenerateCommand.getSchematic (A:\Repositories\ncontrol-mijnncontrol\source\node_modules\@angular\cli\models\schematic-command.js:136:27)
    at GenerateCommand.initialize (A:\Repositories\ncontrol-mijnncontrol\source\node_modules\@angular\cli\models\schematic-command.js:46:36)
    at process._tickCallback (internal/process/next_tick.js:68:7)
    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)
    at startup (internal/bootstrap/node.js:283:19)
    at bootstrapNodeJSCore (internal/bootstrap/node.js:743:3)
```

When using scenario A this command is exceuted:
`yarn run workspace-schematic -- mnc-spectator services/test --project=shared-authentication-data-access-authentication --dry-run --no-interactive`

When using scenario B this command is executed:
`ng generate Workspace Schematics:mnc-spectator services/test --project=shared-authentication-data-access-authentication --dry-run --no-interactive`

NB When running scenario B, the schematics are never compiled to the _dist/out-tsc folder_
	
I don't know how to debug this, but I did inspect the source code (file: **read-schematic-collections.ts**) from angular-console. There I'm seeing an if/else condition handling the custom schematics, either using scenario A or B.

For scenario A I'm seeing this implemenation (starting at line 100)

```
const schematics = listFiles(collectionDir)
      .filter(f => path.basename(f) === 'schema.json')
      .map(f => {
        const schemaJson = readJsonFile(f, '');
        return {
          name: schemaJson.json.id,
          collection: collectionName,
          schema: normalizeSchema(schemaJson.json),
          description: '',
          npmClient,
          npmScript: workspaceSchematicsNpmScript
        };
      });
    return { name: collectionName, schematics };
```

For scenario B this is the implementation (starting at line 163)

```
  schematicCollection.schematics.push({
          name: k,
          collection: collectionName,
          schema: normalizeSchema(schematicSchema.json, projectDefaults),
          description: v.description || '',
          npmClient: null,
          npmScript: null
        });
```
		
You can see that scenario B is missing the **nmpScript** implementation, which might be the problem.

I've provided my custom schematics for reference. Again when deleting the _collection.json_ in the provided zip and renaming _ngrx-schema.json_ and _service-schema.json_ in the different folders to just _schema.json_, scenario A is executed and everything works fine. Please let me know if you need more info to replicate this issue. 

[schematics.zip](https://github.com/nrwl/angular-console/files/3471832/schematics.zip)