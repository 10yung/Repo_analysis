Testing of markdown rendering has mostly been a manual process so far, and is error prone. It'd be nice to write a screenshot unit test using that complains if any unexpected changes creep in. For Android, [Paparazzi](https://github.com/cashapp/paparazzi) can be used. 
The handles that appear when selecting text to allow for more precision, are enormous.

![Proof](https://i.imgur.com/eKUQy9B.jpg)
Press currently delegates parsing of markdown to platforms using `expect/actual`, but managing the expected class signature of parsed nodes is a [pain right now](https://github.com/saket/press/blob/2f9f81fac8386aa8b8459a1d4b1aa919d851a32d/wysiwyg/src/commonMain/kotlin/me/saket/wysiwyg/parser/node/Node.kt#L20). The K/N community is new so there isn't any markdown parser written in kotlin, but there are sufficient libraries written in C that Press can leverage through C interop with K/N: https://kotlinlang.org/docs/reference/native/c_interop.html

We could use cmark: https://github.com/commonmark/cmark
* Added a static shortcut for opening the `EditorActivity` 
*  Removed the unresolved `setText` import from `EditorView`

Fixes #1 
Android emulator API 25
```
Caused by: java.lang.ClassCastException: android.content.res.Resources cannot be cast to me.saket.resourceinterceptor.InterceptibleResources
        at press.widgets.ThemeAwareActivity.applyPaletteTheme(ThemeAwareActivity.kt:33)
        at press.widgets.ThemeAwareActivity.onCreate(ThemeAwareActivity.kt:21)
        at press.home.HomeActivity.onCreate(HomeActivity.kt:18)
        at android.app.Activity.performCreate(Activity.java:6679)
        at android.app.Instrumentation.callActivityOnCreate(Instrumentation.java:1118)
        at android.app.ActivityThread.performLaunchActivity(ActivityThread.java:2618)
```
As of now, the only available option to delete a note is by deleting its content _(Or maybe there is another way but it's not promoted)._ 

Can we maybe add ðŸ¤”

-  Delete option within the editor
-  Select multiple notes in the main view and perform a batch delete/archive?
The shared module currently only has Android and iOS platform targets. Although a macOS client app cannot happen until https://github.com/cashapp/sqldelight/pull/1393 is merged to SQLDelight, it'd be nice to atleast setup things in preparation of it.
Just getting a blank iOS app running would be a good first step towards bringing Press to iOS. Everything else can be wired later.
```
try {
      reflect(editor::class, "mSelectHandleCenter").set(editor, centerDrawable)
      reflect(editor::class, "mSelectHandleLeft").set(editor, leftDrawable)
      reflect(editor::class, "mSelectHandleRight").set(editor, rightDrawable)
    } catch (e : NoSuchFieldException) {
      Log.e("Huawei",e.message)
    }
```
This produces the following exception : 

java.lang.NoSuchFieldException: No field mSelectHandleCenter in class Lhuawei/com/android/internal/widget/HwEditor; (declaration of 'huawei.com.android.internal.widget.HwEditor' appears in /system/framework/hwEmui.jar)
Create a new note via a shortcut for faster note taking