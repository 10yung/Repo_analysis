Hello,

Currently `solver_L1RLS` solves:

$$ 0.5 ||A x - b||^{2} + \lambda || x ||_{1} $$

Could it be extended to:

$$ 0.5 ||A x - b||^{2} + \lambda || W x ||_{1} $$

As done with other solvers?

Thank You.
Hi,
I am very new to tfocs. Firstly, I play a normal optimization like
`[newx,out,OPTS] = tfocs( funObj, [], [], x ,OPTS);`
But it always failed in first run and return `nan`. I found that the iterative values of `x` went too wildly so that my `funObj` cannot compute a value. How can I set up the optimizer of tfocs to give small increment of `x` (e.g., <=0.5) in every iteration for 'stabilizing` the optimization. Thanks!
 _I am reporting the problem below after I didn't get any response on CVX Forum._

I want to solve a linear program with the `tfocs_SCD` routine of TFOCS (tried v1.3 and v1.4), that generally looks like  

> <a href="https://www.codecogs.com/eqnedit.php?latex=\dpi{100}&space;\begin{align*}&space;\min_{\boldsymbol{x}}&space;&\:&space;\boldsymbol{a}^\mathsf{T}\boldsymbol{x}\\&space;\textup{subject&space;to}&\:&space;\lVert\boldsymbol{Ax}\rVert_\infty\le&space;\boldsymbol{1}&space;\end{align*}" target="_blank"><img src="https://latex.codecogs.com/gif.latex?\dpi{100}&space;\begin{align*}&space;\min_{\boldsymbol{x}}&space;&\:&space;\boldsymbol{a}^\mathsf{T}\boldsymbol{x}\\&space;\textup{subject&space;to}&\:&space;\lVert\boldsymbol{Ax}\rVert_\infty\le&space;\boldsymbol{1}&space;\end{align*}" title="\begin{align*} \min_{\boldsymbol{x}} &\: \boldsymbol{a}^\mathsf{T}\boldsymbol{x}\\ \textup{subject to}&\: \lVert\boldsymbol{Ax}\rVert_\infty\le \boldsymbol{1} \end{align*}" /></a>

However. **after the first continuation iteration TFOCS returns an error message**. Below is an example of the code followed by the error message.

**SAMPLE CODE**

```
opts = [];
opts.continuation = true;
opts.stopCrit = 4;
contopts.maxIts = 6;
mu = 1e-1;

A=randn(10,2);
a=randn(2,1);
x = tfocs_SCD(smooth_linear(a),{A, zeros(10,1)},prox_l1,mu,[],[],opts,contopts)
```

**ERROR MESSAGE**
--- Continuation step 1 of 6, mu: 1.0e-01
Auslender & Teboulle's single-projection method
Iter    Objective   |dx|/|x|    step
----+----------------------------------
62  | -3.81899e-01  6.38e-04  1.43e-02 
Finished: Step size tolerance reached
Continuation statistics: mu/2||x-x_0||^2: 9.6e-03
--- Continuation step 2 of 6, mu: 1.0e-01
Error using tfocs_initialize (line 519)
Could not determine the dimensions of the problem. Please supply an explicit value for x0.

Error in tfocs_AT (line 13)
tfocs_initialize

Error in tfocs (line 105)
[ varargout{1:max(nargout,1)} ] = feval( [ 'tfocs_', alg ], smoothF, affineF, projectorF, x0, opts );

Error in tfocs_SCD>solver (line 193)
[varargout{1:max(nargout,2)}] = tfocs( smoothF, affineF, dualproxF, z0, opts );

Error in tfocs_SCD>@(mu,x0,z0,opts)solver(objectiveF,affineF,dualproxF,mu,x0,z0,opts) (line 118)
        continuation_solver=@(mu,x0,z0,opts)solver(objectiveF,affineF,dualproxF, mu,x0,z0,opts);

Error in continuation (line 129)
    [x, odata, optsOut ] = fcn( mu, x0, z0, optsTemp );

Error in tfocs_SCD (line 119)
        [ x, odata, opts ] = continuation( continuation_solver, mu, x0, z0, opts,contOpts );
