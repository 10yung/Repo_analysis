Hi,
There is an "await" of the 
`var e = await client.GetAsync(uri, cancellationToken);`
There is no need to add the ConfigureAwait(false) at all!

https://github.com/zzzprojects/html-agility-pack/blob/5f82294ea08802aac90d53074f6eef6f934634eb/src/HtmlAgilityPack.Shared/HtmlWeb.cs#L2353
Hi,
HtmlAgilityPack v1.11.17 with VS2019 16.0.2, UWP.
`string site = @"https://www.baidu.com";
            try
            {
                HtmlWeb Web = new HtmlWeb();
                var doc = Web.Load(site);
            }
            catch { }`
There is en error: {"An error occurred while sending the request."}
StackTrace:
   at System.Threading.Tasks.Task`1.GetResultCore(Boolean waitCompletionNotification)
   at HtmlAgilityPack.HtmlWeb.Get(Uri uri, String method, String path, HtmlDocument doc, IWebProxy proxy, ICredentials creds)
   at HtmlAgilityPack.HtmlWeb.LoadUrl(Uri uri, String method, IWebProxy proxy, ICredentials creds)
   at HtmlAgilityPack.HtmlWeb.Load(Uri uri, String method)
   at HtmlAgilityPack.HtmlWeb.Load(String url)

The StrackTrace of the InnerExceptions are:
at System.Net.Http.HttpClientHandler.SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
   at System.Net.Http.HttpClient.FinishSendAsyncBuffered(Task`1 sendTask, HttpRequestMessage request, CancellationTokenSource cts, Boolean disposeCts)

It seems that there is an error when used with the async and await within the HtmlAgilityPack!
Any ideas?

### Description
When parsing the following HTML, `<p><h1>invalid nesting</h1></p>` the `ParseErrors` property creates an incorrect error: "Start tag `<p>` was not found", with the position being the position of the `</p>` tag.

This makes it appear that there is a syntactical problem with the HTML that was provided.  This is quite obviously not the case; the start P tag is right there, plainly visible at the start of the HTML!  The actual problem is a *semantic* problem: it's not valid to nest a H1 tag inside a P tag.

The error returned should accurately reflect the real problem, rather than providing the confusing nonsense seen in the current version.

### Fiddle or Project
https://dotnetfiddle.net/Eo1bGv

### Further technical details
- HAP version: 1.11.17
- NET version: .NET Framework 4.8

I have the following html string (simplified version of the html which is not controlled by me) -

```
<html>
  <head>
    <title/>
  </head>
  <body>
    <p>
      Hello How are you doing?
    </p>
  </body>
</html>
```
and I am using the following code to parse it using HtmlAgilityPack -

```
HtmlDocument htmlDoc = new HtmlDocument();
htmlDoc.LoadHtml(htmlStr);
```
but this is the value of `htmlDoc.DocumentNode.InnerHtml`

```
<html>
  <head>
    <title></title></head></html>
```
As you can see the html was not parsed correctly.

On some trial and error I noticed that on replacing `<title/>` in the html string with `<title></title>`, the doc was parsed correctly.

Any idea/help on how to parse such html doc with HAP correctly?

### Further technical details
- HAP version: 1.11.17
- NET version: both net472 and netcore

### Description
I am scraping a website that includes a `select` dropdown where the `option` elements are unclosed. In the inner text of one of these elements, there is text enclosed in angle brackets. HtmlAgilityPack's parser interprets this text as a start tag, containing all following text up to the next closing tag for a higher element, which happens to be the `</select>` tag itself. This means that all option elements from the one with the angle brackets on are parsed improperly. Link to minimal fiddle below.

(In fairness, Beautiful Soup [seems to handle this page even worse](https://pastebin.com/Uj151m9i) -- without the closing tags, it doesn't even realize _any_ of the option elements have ended. Just nests them until it hits `</select>`.)

### Fiddle
https://dotnetfiddle.net/WBBwNx
Fixes #144
I've been looking for ways to extend xpath query capabilities, and I think it's very necessary.
I raised this question at the beginning of last year. But I'm sorry, this solution comes too late. 
Some classes was first released in Dawnx library, I improved it to make it easier to use, and it is now available to HAP under the MIT License.

Although HtmlWeb class allows to ignore resp.ContentEncoding by OverrideEncoding property, it cannot help in the case where resp.ContentEncoding has encoding name which is not supported by Encoding class, and throws ArgumentException.

When OverrideEncoding is provided, the result from Encoding.GetEncoding method has not been actually used so that simply skipping Encoding.GetEncoding method call can make it work without impact to existing behaviors.

EncodingNotSupportedException is added in order to notify that such not supported content encoding is received from server. It helps when writing code to retry loading page with OverrideEncoding.

fix #326
### Description
When I tried to load a page from https://www.jamieoliver.com/ by HtmlWeb.Load method, it failed with an ArgumentException.

It turned out to be because the response headers from the site has `content-encoding: identity`. As per [HTTP RFC 2616](https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.5), `identity` is `used only in the Accept- Encoding header, and SHOULD NOT be used in the Content-Encoding header.`, so that it is of course that Encoding class does not support `identity`.

Therefore, next, I specified Encoding.UTF8 to OverrideEncoding property and called HtmlDocument.Load method. However, it didn't make any change and I got the same ArgumentException.

I expected OverrideEncoding property make HtmlWeb class to ignore the Content-Encoding in the response headers from server and to decode content by specified encoding in OverrideEncoding property, but it was not the case.

While it allows overriding the encoding specified by server when the encoding name is valid, it would be ideal that it also worked when the server specified encoding name is invalid.

### Exception
```
Exception message:
System.ArgumentException : 'identity' is not a supported encoding name. For information on defining a custom encoding, see the documentation for the Encoding.RegisterProvider method.
Parameter name: name

Stack trace:
   at System.Text.EncodingTable.GetCodePageFromName(String name)
   at System.Text.Encoding.GetEncoding(String name)
   at HtmlAgilityPack.HtmlWeb.Get(Uri uri, String method, String path, HtmlDocument doc, IWebProxy proxy, ICredentials creds) in /Users/yas/Projects/happyfl/html-agility-pack/src/HtmlAgilityPack.Shared/HtmlWeb.cs:line 1680
   at HtmlAgilityPack.HtmlWeb.LoadUrl(Uri uri, String method, WebProxy proxy, NetworkCredential creds) in /Users/yas/Projects/happyfl/html-agility-pack/src/HtmlAgilityPack.Shared/HtmlWeb.cs:line 2068
   at HtmlAgilityPack.HtmlWeb.Load(Uri uri, String method) in /Users/yas/Projects/happyfl/html-agility-pack/src/HtmlAgilityPack.Shared/HtmlWeb.cs:line 1290
   at HtmlAgilityPack.HtmlWeb.Load(Uri uri) in /Users/yas/Projects/happyfl/html-agility-pack/src/HtmlAgilityPack.Shared/HtmlWeb.cs:line 1189
   at HappyFL.Services.WebSeekers.RecipeSeeker.Scan() in /Users/yas/Projects/happyfl/HappyFL/Services/WebSeekers/RecipeSeeker.cs:line 34
   at HappyFL.Services.WebSeekerService.FindRecipes(Uri url, Nullable`1 cancel, Encoding encode) in /Users/yas/Projects/happyfl/HappyFL/Services/WebSeekerService.cs:line 159
   at HappyFL.Test.WebSeekerServiceTest.TestFindRecipe(String url, ExpectedResultForTestFindRecipe expected) in /Users/yas/Projects/happyfl/HappyFLTest/WebSeekerServiceTest.cs:line 167
```

### Project to reproduce issue
https://github.com/y-code/repro-bug-in-html-agility-pack

### Further technical details
- HAP version: 1.11.12
- NET version (net472, netcore, etc.): .NET Core 2.2.300

With a XPath expression ending in `/@attributeName`,

`System.Xml.XmlNode.SelectSingleNode` correctly returns an attribute node with Name & Value/InnerText matching the attribute.

`HtmlAgilityPack.HtmlNode.SelectSingleNode` returns the parent HtmlNode (with its attributes), instead of the attribute itself

The reason is probably because there is no HtmlAttributeNode class yet. I don't know if it's for memory optimization or what, but it might be useful to have these, eventually created on-the-fly when these nodes gets selected.

(I ended up creating this class myself with an extension method SelectSingleNodeOrAttr to workaround this limitation of HtmlAgilityPack)
### Description
If an element's attribute value comes like this.
e.g.  <img src='/image.jpg' alt='Savannah's streets'>

'Savannah's streets' quotes insides quotes will break the html.

output will be
<img src='/image.jpg' alt='Savannah' s="" streets'="" >

### Exception - Malformed HTML
alt='Savannah' s="" streets'="" 

### Further technical details
- HAP version: Even for 1.11.7
- NET version (4.6):
