Since everyone has a definition of production-readiness, i'd like to throw in my 2 cents on how my team would prefer to evaluate when we can switch:
If we could get a list of spring features that are supported / plan to be supported / will not be supported (maybe via checkboxes and strikethroughs) then it'd be easy for people to evaluate whether they are ready to use something like this. 

Personally I was looking for things like:
- metrics configurations
- @Scheduled annotation parity
- repository support

Even combing through the issues its not entirely clear whats covered. 

In `kofu-*-validation` samples the `notNull` constraint has no effect since the validated field is  already of non-nullable type `String`.

E.g.:
```
POST  http://localhost:8181/api/user
Content-Type: application/json

{
  "login": null,
  "firstname": "",
  "lastname": ""
}
```
Response:
```
POST http://localhost:8181/api/user

HTTP/1.1 400 Bad Request
Content-Type: application/json
Content-Length: 161

{
  "timestamp": "2019-11-15T07:54:14.452+0000",
  "path": "/api/user",
  "status": 400,
  "error": "Bad Request",
  "message": "Failed to read HTTP message",
  "requestId": "47b1c49f"
}

Response code: 400 (Bad Request); Time: 69ms; Content length: 161 bytes
```
If I make the `login` property to be of type `String?`, then validation constraints will be activated properly, and for the same request it'll response with validation messages:
```
POST http://localhost:8181/api/user

HTTP/1.1 400 Bad Request
Content-Type: application/json
Content-Length: 318

{
  "details": [
    {
      "args": [
        "login",
        null
      ],
      "defaultMessage": "\"login\" must not be null",
      "key": "object.notNull"
    },
    {
      "args": [
        "firstname",
        ""
      ],
      "defaultMessage": "\"firstname\" must not be blank",
      "key": "charSequence.notBlank"
    },
    {
      "args": [
        "lastname",
        ""
      ],
      "defaultMessage": "\"lastname\" must not be blank",
      "key": "charSequence.notBlank"
    }
  ]
}

Response code: 400 (Bad Request); Time: 783ms; Content length: 318 bytes
``` 

That's happening because the request fails during deserialization never reaches the validation logic

This leads to this error when module-info.java requires `spring.boot` and `spring.fu.kofu` (that includes module `spring.fu.autoconfigure.adapter`) :
`java.lang.module.ResolutionException: Modules spring.boot and spring.fu.autoconfigure.adapter export package org.springframework.boot.context.properties`

Solution is to change this package in project spring-fu-autoconfigure-adapter.
AbstractDsl initialize() is marked as internal. This prevents external sub classes to work properly. If the constraint is relaxed, it would allow external projects to provide their own applicative DSLs or side projects to add featured DSLs enabling fast community driven enrichment.   
The format is close to how `WebFluxServerDsl` is setup. I've tested startup of each servlet type.

I'm confused about `context.registerBean(TomcatServletWebServerFactoryCustomizer.class, () -> servletWebServerFactoryConfiguration.tomcatServletWebServerFactoryCustomizer(serverProperties));`, and whether or not it's required. I've left it in for good measure.

* to be used by standalone applications, or even by server, if just, for example, email generation is needed and not view resolution using freemarker templates;
* servlet and reactive freemarker configurations can be added later on, when needed; (could be placed under `webMvc` and `webFlux` blocks accordingly)
* add `defaultProperties` to `configurationProperties` function because without some property bound from `app.properties|yml` or environment, "binder.get()" would fail with "java.util.NoSuchElementException: No value bound".

Starting from [kofu-reactive-minimal](https://github.com/spring-projects/spring-fu/tree/master/samples/kofu-reactive-minimal) example and adding devtools to `build.gradle.kts`:

```
val developmentOnly by configurations.creating
configurations {
  runtimeClasspath {
    extendsFrom(developmentOnly)
  }
}

dependencies {
  ...
  developmentOnly("org.springframework.boot:spring-boot-devtools")
}
```

With this main app code restarts work fine:

```
@SpringBootApplication
class App {
  @Bean
  fun route() = router {
    GET("") { _ -> ok().body(fromObject("hello\n")) }
  }
}

fun main(args: Array<String>) {
  SpringApplication.run(App::class.java, *args)
}
```

Changing to use spring-fu:

```
val app = application(WebApplicationType.REACTIVE) {
  webFlux {
    router {
      GET("") { _ -> ok().body(fromObject("hello\n")) }
    }
  }
}

fun main() {
  app.run()
}
```

stops restarts from happening.

I could not find a spring-fu + devtools example, so I'm not sure if anything else needs to be configured in addition to the above.