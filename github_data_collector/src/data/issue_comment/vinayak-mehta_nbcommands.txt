When execution_count does not exist, the commands nbcat, nbtail or nbhead throw an error. So far this has fixed it for me and now those commands work again.

Related issue: #19 
Hi,  I just installed and got this error trying nbcat:

`Traceback (most recent call last):
  File "/Users/cherny/miniconda3/envs/pandasnlp/bin/nbcat", line 8, in <module>
    sys.exit(cat())
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/click/core.py", line 764, in __call__
    return self.main(*args, **kwargs)
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/click/core.py", line 717, in main
    rv = self.invoke(ctx)
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/click/core.py", line 956, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/click/core.py", line 555, in invoke
    return callback(*args, **kwargs)
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/click/decorators.py", line 17, in new_func
    return f(get_current_context(), *args, **kwargs)
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/nbcommands/_cat.py", line 42, in cat
    click.echo("\n".join(display(merged.cells)))
  File "/Users/cherny/miniconda3/envs/pandasnlp/lib/python3.7/site-packages/nbcommands/terminal.py", line 15, in display
    cell["execution_count"] if cell["execution_count"] is not None else " "
KeyError: 'execution_count'`

Any ideas?  Python 3.7, nbcommands-0.3.2


Which can contain basic help information.
https://github.com/minrk/ipython_extensions/

Use the parse function from the ansimarkup package to render colored 
output instead of concatenating escape sequences from the colorama 
package.

En passant, also used the MarkdownLexer to highlight markdown cells.
@vinayak-mehta thanks for handling #9 so quickly! I just upgraded nbcommands, and I think I might have found one more edge case, I hope you don't mind me reporting this here.

There are some code cells where we want to show the source of the function, so we write:

```
func_name??
```

to show the full source, or 

```
func_name?
```

to show just the signature + docstring (if I remember correctly).

This example, I think, also gave me an error, this time being:

```
black.InvalidInput: Cannot parse: 1:6: func_name??
```

I dug into the source, and saw that you basically added a regex replacement, is that right? Would the correct thing to do here be the following? I think the order has to be the double-?? before the single-?.

```python
source = re.sub("^??", "#??", source, flags=re.M)
source = re.sub("^?", "#?", source, flags=re.M)

# followed by...

black_source = re.sub("^#??", "??", black_source, flags=re.M)
black_source = re.sub("^#?", "?", black_source, flags=re.M)
```

```
-B, --before-context=NUM  print NUM lines of leading context
-A, --after-context=NUM   print NUM lines of trailing context
-C, --context=NUM         print NUM lines of output context
```

Notebooks store metadata about the kernel and language.
We could reuse this metadata for syntax highlighting, comments etc.