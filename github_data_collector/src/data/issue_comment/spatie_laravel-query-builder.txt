Add ability of resolving type hinted scope parameters (issue #146)
Addresses issue #412 
It is currently impossible to use in `allowedIncludes()` : 

- `AllowedInclude::relationship('name', 'internalName')` for aliasing relationships 
- `AllowedInclude::count('nameCount', 'internalNameCount')` as [stated in the docs](https://docs.spatie.be/laravel-query-builder/v2/features/including-relationships/#including-related-model-count)

While aliasing sort with `AllowedSort::field('fieldAlias', 'field')` works fine.

Example:
```php
$models = QueryBuilder::for(Model::class)
    ->allowedIncludes([
        AllowedInclude::count('relationshipCount'),
        AllowedInclude::relationship('relationshipAlias', 'relationship')
    ])
    ->get();
```
Trying to use those includes will result in the following error:
```json
{
    "message": "Requested include(s) `relationshipCount, relationshipAlias` are not allowed. Allowed include(s) are `[{}], [{}]Count, [{},{}], [{},{}]Count`.",
    "statusCode": 400
}
```

I believe the issue is located here:

https://github.com/spatie/laravel-query-builder/blob/d0d82095138f961241c81efe0a40147009ad6d4d/src/Concerns/AddsIncludesToQuery.php#L22-L24

Because `AllowedInclude::relationship()` and `AllowedInclude::count('nameCount', 'internalNameCount')` already return a Collection, it never passes in this condition
I've found this test after I tried to use the QueryBuilder on a relationship method in a sub-resource controller.
The solution I've found is to call `getQuery()` on the relationship method before passing it into the builder. This way `getQuery()` is called twice and the resulting query is a plain database one instead of an eloquent one.
Would it be an option to check if the query is a relation one and call `getQuery()` twice?

https://github.com/spatie/laravel-query-builder/blob/d0d82095138f961241c81efe0a40147009ad6d4d/tests/QueryBuilderTest.php#L172-L193
(First pull request so I hope this is okay!)

Updated the AppendsAttributesToResults concern to add the ability to append to a relationship.
https://github.com/spatie/laravel-query-builder/runs/374013052

This should be fixed.
Hey, I found a tpyo in paramaters
Allows the `allowedIncludes()`method to be a bit more flexible and improves on the Exception language if no includes exist at all for a query.
Due to legacy reason, I have to use an older version of query builder (1.0) and I was wondering whether it was possible to filter on a nested/associated property. I have a User model which has a one to one relation to a Territory model. There is a priority property on Territory and I want to returns Users who are associated to a Territory with a specific priority. The User and Territory are in two separate DBs, db1.users and db2.territories. 

I've searched all over and kind seem to find a solution using Query Builder and I'm about to just implement using DB:: calls. Is filtering on this possible with v1.0 of Query Builder?
Currently any filters that are using associative keys cannot be passed to the scope using the splat operator.

## Scenario
suppose I have this scope on my model:
```
public function scopePublishedBetween($query, $start, $end)
    {
        return $query
            ->where('published_at', '>=', Carbon::parse($start))
            ->where('published_at', '<=', Carbon::parse($end));
    }
```

And I've allowed this scope in my query:
```
AllowedFilter::scope('published_between')
```

Now I pass my date range as an associative array in the request like so:
```
let params = {
    filter: {
        start: '2019-11-20',
        end: '2019-11-25',
    },
};
```

When the query builder executes this request I receive this error because the splat operator does not support unpacking associative arrays.
```
Symfony\Component\Debug\Exception\FatalThrowableError
Cannot unpack array with string keys
```