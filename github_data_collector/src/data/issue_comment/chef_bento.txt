# Version:

Vagrant 2.0.1

# Environment:

Mac Catalina

# Scenario:

Build ubuntu 18.04 for vmware

# Steps to Reproduce:

> packer build -only=vmware-iso ubuntu-18.04-amd64.json

# Expected Result:

A ubuntu 18.04 running inside vmware

# Actual Result:

==> vmware-iso: Failed to enable unit: Unit file vmtoolsd.service does not exist.
==> Builds finished but no artifacts were created.

The screenshot:

![image](https://user-images.githubusercontent.com/6703876/71778522-e6e11580-2f63-11ea-8927-5fc88aca89e4.png)


## Description
This modifies some Windows templates (10, 2012_r2, 2016 and 2019) to add "qemu" builder. This is based on the work of [Bob Tanner](https://grot.geeks.org/tanner/packer-windows)

For example, with this PR you can use :
```
packer build --only=qemu windows-2019.json
```

**IMPORTANT** : You must download [the iso image with the Windows drivers for paravirtualized KVM/qemu hardware](https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso) before starting this builder.

## Types of changes
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)
- [x] Chore (non-breaking change that does not add functionality or fix an issue)

## Checklist:
- [x] I have read the **CONTRIBUTING** document.
- [x] I have run the pre-merge tests locally and they pass.
- [ ] I have updated the documentation accordingly.
- [ ] I have added tests to cover my changes.
- [x] All new and existing tests passed.
- [x] All commits have been signed-off for [the Developer Certificate of Origin](https://github.com/chef/chef/blob/master/CONTRIBUTING.md#developer-certification-of-origin-dco).
# Version:

master

# Environment:

cygwin

# Scenario:

Trying to use "bento" on command line (https://github.com/chef/bento/wiki/Using-the-Bento-binary-to-build---publish-boxes) under cygwin fails. 



# Steps to Reproduce:
```
t898379@L103363 /cygdrive/c/dev/bento
$ bundle exec $DEV/bento/bin/bento build --only=virtualbox-iso  packer_templates/ubuntu/ubuntu-18.04-amd64.json
==> Starting build for templates:
- packer_templates/ubuntu/ubuntu-18.04-amd64
==> [ubuntu-18.04-amd64] Building: 'packer build -var headless=true -only=virtualbox-iso -force -var-file=/tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly ubuntu-18.04-amd64.json'
invalid value "/tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly" for flag -var-file: open /tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly: The system cannot find the path specified.
Usage: packer build [options] TEMPLATE

  Will execute multiple builds in parallel as defined in the template.
  The various artifacts created by the template will be outputted.

Options:

  -color=false                  Disable color output. (Default: color)
  -debug                        Debug mode enabled for builds.
  -except=foo,bar,baz           Run all builds and post-procesors other than these.
  -only=foo,bar,baz             Build only the specified builds.
  -force                        Force a build to continue if artifacts exist, deletes existing artifacts.
  -machine-readable             Produce machine-readable output.
  -on-error=[cleanup|abort|ask] If the build fails do: clean up (default), abort, or ask.
  -parallel=false               Disable parallelization. (Default: true)
  -parallel-builds=1            Number of builds to run in parallel. 0 means no limit (Default: 0)
  -timestamp-ui                 Enable prefixing of each ui output with an RFC3339 timestamp.
  -var 'key=value'              Variable for templates, can be used multiple times.
  -var-file=path                JSON file containing user variables.
>>> [ubuntu-18.04-amd64] Error building, exited

```


# Expected Result:

bento builds the box so that I can "upload" and then "publish" under my vagrant cloud account. 

# Actual Result:

command fails with 


```
==> [ubuntu-18.04-amd64] Building: 'packer build -var headless=true -only=virtualbox-iso -force -var-file=/tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly ubuntu-18.04-amd64.json'
invalid value "/tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly" for flag -var-file: open /tmp/ubuntu-18.04-amd64-metadata.json20191213-40543-7u83ly: The system cannot find the path specified.
Usage: packer build [options] TEMPLATE

```


The next packer version, 1.5, is adding a [new disk size convention](https://github.com/hashicorp/packer/pull/7546) for qemu builder. 

**Simplest solution**

 `     "disk_size": "{{user `disk_size`}}M"` *only in the qemu builder*

**Affected template**
- [centos-5.11-i386.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-5.11-i386.json)
- [centos-5.11-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-5.11-x86_64.json)
- [centos-6.10-i386.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-6.10-i386.json)
- [centos-6.10-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-6.10-x86_64.json)
- [centos-7.7-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-7.7-x86_64.json)
- [centos-8.0-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/centos/centos-8.0-x86_64.json)
- [debian-10.1-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-10.1-amd64.json)
- [debian-10.1-i386.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-10.1-i386.json)
- [debian-8.11-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-8.11-amd64.json)
- [debian-8.11-i386.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-8.11-i386.json)
- [debian-9.11-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-9.11-amd64.json)
- [debian-9.11-i386.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-9.11-i386.json)
- [debian-9.11-ppc64el.json](https://github.com/chef/bento/blob/master/packer_templates/debian/debian-9.11-ppc64el.json)
- [fedora-29-x86_64.json]( https://github.com/chef/bento/blob/master/packer_templates/fedora/fedora-29-x86_64.json)
- [fedora-30-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/fedora/fedora-30-x86_64.json)
- [fedora-31-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/fedora/fedora-31-x86_64.json)
- [freebsd-11.3-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/freebsd/freebsd-11.3-amd64.json)
- [freebsd-11.3-i386.json](https://github.com/chef/bento/blob/master/packer_templates/freebsd/freebsd-11.3-i386.json)
- [freebsd-12.0-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/freebsd/freebsd-12.0-amd64.json)
- [freebsd-12.0-i386.json](https://github.com/chef/bento/blob/master/packer_templates/freebsd/freebsd-12.0-i386.json)
- [hardenedbsd-11-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/hardenedbsd/hardenedbsd-11-amd64.json)
- [opensuse-leap-15.1-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/opensuse/opensuse-leap-15.1-x86_64.json)
- [oracle-5.11-i386.json](https://github.com/chef/bento/blob/master/packer_templates/oraclelinux/oracle-5.11-i386.json)
- [oracle-5.11-x86_64.json]( https://github.com/chef/bento/blob/master/packer_templates/oraclelinux/oracle-5.11-x86_64.json)
- [oracle-6.10-i386.json](https://github.com/chef/bento/blob/master/packer_templates/oraclelinux/oracle-6.10-i386.json)
- [oracle-6.10-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/oraclelinux/oracle-6.10-x86_64.json)
- [oracle-7.7-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/oraclelinux/oracle-7.7-x86_64.json)
- [rhel-5.11-i386.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-5.11-i386.json)
- [rhel-5.11-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-5.11-x86_64.json)
- [rhel-6.10-i386.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-6.10-i386.json)
- [rhel-6.10-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-6.10-x86_64.json)
- [rhel-7.6-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-7.6-x86_64.json)
- [rhel-8.0-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/rhel/rhel-8.0-x86_64.json)
- [sles-11-sp4-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-11-sp4-x86_64.json)
- [sles-12-sp2-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-12-sp2-x86_64.json)
- [sles-12-sp3-x86_64.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-12-sp3-x86_64.json)
- [sles-15-sp1.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-15-sp1.json)
- [sles-15.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-15.json)
- [ubuntu-16.04-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/ubuntu/ubuntu-16.04-amd64.json)
- [ubuntu-16.04-i386.json](https://github.com/chef/bento/blob/master/packer_templates/ubuntu/ubuntu-16.04-i386.json)
- [ubuntu-18.04-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/ubuntu/ubuntu-18.04-amd64.json)
- [ubuntu-18.10-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/ubuntu/ubuntu-18.10-amd64.json)
- [ubuntu-19.04-amd64.json](https://github.com/chef/bento/blob/master/packer_templates/ubuntu/ubuntu-19.04-amd64.json)




Hi,

The [sles-15.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-15.json#L31-L45) and [sles-15-sp1.json](https://github.com/chef/bento/blob/master/packer_templates/sles/sles-15-sp1.json#L31-L45) is using an additional iso package but this is only added in the virtualbox-iso.

I was working with qemu and to accomplish this I used this qemuars:

```
"qemuargs": [
  ["-drive", "file=../../builds/packer-{{user `template`}}-qemu/{{user `template`}},if=virtio,cache=writeback,discard=ignore,format=qcow2"],
  ["-drive", "file={{user `mirror`}}/{{user `packages_iso`}},format=raw,if=none,id=cdrom0,readonly=on"],
  ["-device", "virtio-scsi-pci,id=scsi0"],
  ["-device", "scsi-cd,bus=scsi0.0,scsi-id=0,lun=1,drive=cdrom0"]
 ]
```
I did this because packer had an issue with [additional drive/device](https://github.com/hashicorp/packer/issues/8379)
### Describe the Enhancement:
Would like to build a RHEL 7.7 box but no supplied json.

### Describe the Need:
Use the CentOS 7.7 as template.

### Current Alternative
Modify RHEL 7.6 with new arguments.

Right now we retag the description with the current box metadata being uploaded. This means if we build virtualbox and vmware it only lists vmware version information. We should list it all.
If the SDK is missing then the builds don't work. We should fail the build with a useful message.
# Version:

Just cloned.

# Environment:

Ubuntu 18.04

# Scenario:
[What you are trying to achieve and you can't?]

Building a VMware fedora 30 box.

# Steps to Reproduce:

Clone repo. Cd into fedora directory
packer build -only=vmware-iso fedora-30-x86_64.json

# Expected Result:

No errors.

# Actual Result:

[What actually happens after the reproduction steps?]

8006 ^[[0;32m    vmware-iso: Complete!^[[0m
  8007 ^[[1;32m==> vmware-iso: Provisioning with shell script: ../_common/motd.sh^[[0m
  8008 ^[[1;32m==> vmware-iso: Provisioning with shell script: ../_common/sshd.sh^[[0m
  8009 ^[[1;32m==> vmware-iso: Provisioning with shell script: ../_common/virtualbox.sh^[[0m
  8010 ^[[1;32m==> vmware-iso: Provisioning with shell script: ../_common/vmware.sh^[[0m
  8011 ^[[1;31m==> vmware-iso: mount: /tmp/vmware: WARNING: device write-protected, mounted read-only.^[[0m
  8012 ^[[0;32m    vmware-iso: VMware Tools Version: 10.2.5^[[0m
  8013 ^[[0;32m    vmware-iso: The installer has detected an existing installation of open-vm-tools packages^[[0m
  8014 ^[[0;32m    vmware-iso: on this system and will not attempt to remove and replace these user-space^[[0m
  8015 ^[[0;32m    vmware-iso: applications. It is recommended to use the open-vm-tools packages provided by^[[0m
  8016 ^[[0;32m    vmware-iso: the operating system. If you do not want to use the existing installation of^[[0m
  8017 ^[[0;32m    vmware-iso: open-vm-tools packages and use VMware Tools, you must uninstall the^[[0m
  8018 ^[[0;32m    vmware-iso: open-vm-tools packages and re-run this installer.^[[0m
  8019 ^[[0;32m    vmware-iso: The packages that need to be removed are:^[[0m
  8020 ^[[0;32m    vmware-iso: open-vm-tools^[[0m
  8021 ^[[0;32m    vmware-iso: The installer will next check if there are any missing kernel drivers. Type yes^[[0m
  8022 ^[[0;32m    vmware-iso: if you want to do this, otherwise type no [yes]^[[0m
  8023 ^[[0;32m    vmware-iso: INPUT: [vagrant]^[[0m
  8024 ^[[0;32m    vmware-iso:^[[0m
  8025 ^[[0;32m    vmware-iso: The answer "vagrant" is invalid. It must be one of "y" or "n".^[[0m
  8026 ^[[0;32m    vmware-iso:^[[0m
  8027 ^[[0;32m    vmware-iso: The installer will next check if there are any missing kernel drivers. Type yes^[[0m
  8028 ^[[0;32m    vmware-iso: if you want to do this, otherwise type no [yes]^[[0m
  8029 ^[[0;32m    vmware-iso: INPUT: [yes]  default^[[0m
  8030 ^[[0;32m    vmware-iso:^[[0m
  8031 ^[[0;32m    vmware-iso: Creating a new VMware Tools installer database using the tar4 format.^[[0m
  8032 ^[[0;32m    vmware-iso:^[[0m
  8033 ^[[0;32m    vmware-iso: Installing VMware Tools.^[[0m
  8034 ^[[0;32m    vmware-iso:^[[0m
  8035 ^[[0;32m    vmware-iso: In which directory do you want to install the binary files?^[[0m
  8036 ^[[0;32m    vmware-iso: [/usr/bin]^[[0m
  8037 ^[[0;32m    vmware-iso: INPUT: [/usr/bin]  default^[[0m
  8038 ^[[0;32m    vmware-iso:^[[0m
  8039 ^[[0;32m    vmware-iso: What is the directory that contains the init directories (rc0.d/ to^[[0m
  8040 ^[[0;32m    vmware-iso: rc6.d/)?^[[0m



# Version:
2669337e5a68a32445e1c04f7d418d1bc8e2f379

# Environment:
Debian/Ubuntu

# Scenario:
The `cleanup.sh` script is trying to remove all `-dev` packages:
https://github.com/chef/bento/blob/2669337e5a68a32445e1c04f7d418d1bc8e2f379/packer_templates/debian/scripts/cleanup.sh#L25-L28
https://github.com/chef/bento/blob/2669337e5a68a32445e1c04f7d418d1bc8e2f379/packer_templates/ubuntu/scripts/cleanup.sh#L25-L28

But in current versions of Ubuntu/Debian, `dpkg --list` will contain several packages which end in `-dev:amd64$` instead of `-dev$`.
For example: `libstdc++-8-dev:amd64`


# Proposal
If the intention of this purge is to remove all dev-packages, the regex should be expanded to something like this:
```grep -- '-dev\(:[a-z0-9]\+\)\?$'```

This regex will find both `-dev` and different arch-specific packages like `-dev:myarch32`.