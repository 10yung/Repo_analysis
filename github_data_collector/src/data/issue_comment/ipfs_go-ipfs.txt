We no longer need to manually test the webui on release.
# go-ipfs 0.4.23 Release

PR: https://github.com/ipfs/go-ipfs/pull/6836

Unfortunately, [go-ipfs 0.5.0](https://github.com/ipfs/go-ipfs/issues/6776) is taking longer than expected. Given the large number of fixes merged since 0.4.22, we've decided to cut another patch release.

This release contains critical fixes. Please upgrade ASAP. Importantly, we're strongly considering switching to TLS by default in go-ipfs 0.5.0 and dropping SECIO support. However, our the current TLS transport in go-ipfs 0.4.22 has a bug that can cause connections to spontaneously disconnect during the handshake.

This release fixes that bug, among many other issues. Users that _don't_ upgrade may experience connectivity issues when the network upgrades to go-ipfs 0.5.0.

## 🗺 What's left for release

* [x] Get the tests passing.
* [ ] Release Notes.

# 🚢 Estimated shipping date

January 27th, at the latest (likely earlier).

## 🔦 Highlights

* Fixes build on go 1.13
* Fixes an issue where we may not connect to providers in bitswap.
* Fixes an issue on our TLS transport where we may abort a handshake unintentionally.
* Fixes a common panic in the websocket transport.
* Adds support for recursively resolving dnsaddrs (makes go-ipfs compatible with the new bootstrappers).
* Fixes several potential panics/crashes.
* Switches to using pre-defined autorelays instead of trying to find them in the DHT:
  * Avoids selecting random, potentially poor, relays.
  * Avoids spamming the DHT with requests trying to find relays.
  * Reduces the impact of accidentally enabling AutoRelay + RelayHop. I.e., the network won't try to DoS you.
* Modifies the connection manager to not count connections in the grace period towards the connection limit.
  * Pro: New connections don't cause us to close useful, existing connections.
  * Con: Libp2p will keep more connections. Consider reducing your HighWater after applying this patch.
* Improved peer usefulness tracking in bitswap. Frequently used peers will be marked as "important" and the connection manager will avoid closing connections to these peers.

## Changelog

- github.com/ipfs/go-ipfs:
  - fix: limit SW registration to content root ([ipfs/go-ipfs#6801](https://github.com/ipfs/go-ipfs/pull/6801))
  - fix issue 6760, adding with hash-only, high CPU usage. ([ipfs/go-ipfs#6764](https://github.com/ipfs/go-ipfs/pull/6764))
  - fix(coreapi/add): close the fake repo used when adding with hash-only ([ipfs/go-ipfs#6747](https://github.com/ipfs/go-ipfs/pull/6747))
  - fix bug 6748 ([ipfs/go-ipfs#6754](https://github.com/ipfs/go-ipfs/pull/6754))
  - fix(pin): wait till after fetching to remove direct pin ([ipfs/go-ipfs#6708](https://github.com/ipfs/go-ipfs/pull/6708))
  - pin: fix pin update X Y where X==Y ([ipfs/go-ipfs#6669](https://github.com/ipfs/go-ipfs/pull/6669))
  - namesys: set the correct cache TTL on publish ([ipfs/go-ipfs#6667](https://github.com/ipfs/go-ipfs/pull/6667))
  - build: fix golangci again ([ipfs/go-ipfs#6641](https://github.com/ipfs/go-ipfs/pull/6641))
  - make: move all test deps to a separate module ([ipfs/go-ipfs#6637](https://github.com/ipfs/go-ipfs/pull/6637))
  - fix: close peerstore on stop ([ipfs/go-ipfs#6629](https://github.com/ipfs/go-ipfs/pull/6629))
  - build: fix build when we don't have a full git tree ([ipfs/go-ipfs#6626](https://github.com/ipfs/go-ipfs/pull/6626))
- github.com/ipfs/go-bitswap (v0.0.8-cbb485998356 -> v0.0.8-e37498cf10d6):
  - fix: wait until we finish connecting before we cancel the context ([ipfs/go-bitswap#226](https://github.com/ipfs/go-bitswap/pull/226))
  - engine: tag peers based on usefulness ([ipfs/go-bitswap#191](https://github.com/ipfs/go-bitswap/pull/191))
- github.com/ipfs/go-cid (v0.0.2 -> v0.0.4):
  - fix parsing issues and nits ([ipfs/go-cid#97](https://github.com/ipfs/go-cid/pull/97))
  - Verify that prefix is correct v0 prefix ([ipfs/go-cid#96](https://github.com/ipfs/go-cid/pull/96))
- github.com/multiformats/go-multihash (v0.0.5 -> v0.0.10):
  - Ensure that length of multihash is properly handled ([multiformats/go-multihash#119](https://github.com/multiformats/go-multihash/pull/119))
  - fix murmur3 name  ([multiformats/go-multihash#115](https://github.com/multiformats/go-multihash/pull/115))
  - rename ID to IDENTITY ([multiformats/go-multihash#113](https://github.com/multiformats/go-multihash/pull/113))
 ([multiformats/go-multihash#119](https://github.com/multiformats/go-multihash/pull/119))
- github.com/libp2p/go-flow-metrics (v0.0.1 -> v0.0.3):
  - fix bug in meter traversal logic ([libp2p/go-flow-metrics#11](https://github.com/libp2p/go-flow-metrics/pull/11))
- github.com/libp2p/go-libp2p (v0.0.28 -> v0.0.32):
  - options to configure known relays for autorelay ([libp2p/go-libp2p#705](https://github.com/libp2p/go-libp2p/pull/705))
  - feat(host): recursively resolve addresses ([libp2p/go-libp2p#764](https://github.com/libp2p/go-libp2p/pull/764))
  - mdns: always use interface addresses ([libp2p/go-libp2p#667](https://github.com/libp2p/go-libp2p/pull/667))
- github.com/libp2p/go-libp2p-connmgr (v0.0.6 -> v0.2.1):
  - don't count connections in the grace period against the limit ([libp2p/go-libp2p-connmgr#50](https://github.com/libp2p/go-libp2p-connmgr/pull/50))
  - metrics: fix memory leak ([libp2p/go-libp2p-kad-dht#390](https://github.com/libp2p/go-libp2p-kad-dht/pull/390))
- github.com/libp2p/go-libp2p-tls (v0.0.1 -> v0.0.2):
  - close the underlying connection when the handshake fails ([libp2p/go-libp2p-tls#39](https://github.com/libp2p/go-libp2p-tls/pull/39))
  - make the error check for not receiving a public key more explicit ([libp2p/go-libp2p-tls#34](https://github.com/libp2p/go-libp2p-tls/pull/34))
  - Fix: Connection Closed after handshake ([libp2p/go-libp2p-tls#37](https://github.com/libp2p/go-libp2p-tls/pull/37))
- github.com/libp2p/go-ws-transport (v0.0.4 -> v0.0.6):
  - Add mutex for write/close ([libp2p/go-ws-transport#65](https://github.com/libp2p/go-ws-transport/pull/65))

Other:

Update bloom filter libraries to remove unsafe usage of unsafe.

## ✅ Release Checklist

For each RC published in each stage:

- version string in `version.go` has been updated
- tag commit with vX.Y.Z-rcN
- upload to dist.ipfs.io
  1. Build: https://github.com/ipfs/distributions#usage.
  2. Pin the resulting release.
  3. Make a PR against ipfs/distributions with the updated versions, including the new hash in the PR comment.
  4. Ask the infra team to update the DNSLink record for dist.ipfs.io to point to the new distribution.
- cut a pre-release on [github](https://github.com/ipfs/go-ipfs/releases) and upload the result of the ipfs/distributions build in the previous step.

Checklist:

- [ ] **Stage 0 - Automated Testing**
  - [ ] Feature freeze. If any "non-trivial" changes (see the footnotes of [docs/releases.md](https://github.com/ipfs/go-ipfs/tree/master/docs/releases.md) for a definition) get added to the release, uncheck all the checkboxes and return to this stage.
  - [ ] Automated Testing (already tested in CI) - Ensure that all tests are passing, this includes:
    - [ ] unit, sharness, cross-build, etc (`make test`)
    - [ ] lint (`make test_go_lint`)
    - [ ] [interop](https://github.com/ipfs/interop#test-with-a-non-yet-released-version-of-go-ipfs)
    - [ ] [go-ipfs-api](https://github.com/ipfs/go-ipfs-api)
    - [ ] [go-ipfs-http-client](https://github.com/ipfs/go-ipfs-http-client)
- [ ] **Stage 1 - Internal Testing**
  - [ ] CHANGELOG.md has been updated
    - use [`./bin/mkreleaselog`](https://github.com/ipfs/go-ipfs/tree/master/bin/mkreleaselog) to generate a nice starter list
  - [ ] Network Testing:
    - [ ] test lab things - TBD
  - [ ] Infrastructure Testing:
    - [ ] Deploy new version to a subset of Bootstrappers
    - [ ] Deploy new version to a subset of Gateways
    - [ ] Deploy new version to a subset of Preload nodes
    - [ ] Collect metrics every day. Work with the Infrastructure team to learn of any hiccup
  - [ ] IPFS Application Testing -  Run the tests of the following applications:
    - [ ] [WebUI](https://github.com/ipfs-shipyard/ipfs-webui) - @olizilla
    - [ ] [IPFS Desktop](https://github.com/ipfs-shipyard/ipfs-desktop) - @hacdias
    - [ ] [IPFS Companion](https://github.com/ipfs-shipyard/ipfs-companion) - @lidel
    - [ ] [NPM on IPFS](https://github.com/ipfs-shipyard/npm-on-ipfs) - @achingbrain
- [ ] **Stage 2 - Community Dev Testing**
  - [ ] Reach out to the IPFS _early testers_ listed in [docs/EARLY_TESTERS.md](https://github.com/ipfs/go-ipfs/tree/master/docs/EARLY_TESTERS.md) for testing this release (check when no more problems have been reported). If you'd like to be added to this list, please file a PR.
  - [ ] Reach out to on IRC for beta testers.
  - [ ] Run tests available in the following repos with the latest beta (check when all tests pass):
    - [ ] [orbit-db](https://github.com/orbitdb/orbit-db)
- [ ] **Stage 3 - Community Prod Testing**
  - [ ] Documentation
    - [ ] Ensure that [CHANGELOG.md](https://github.com/ipfs/go-ipfs/tree/master/CHANGELOG.md) is up to date
    - [ ] Ensure that [README.md](https://github.com/ipfs/go-ipfs/tree/master/README.md)  is up to date
    - [ ] Ensure that all the examples we have produced for go-ipfs run without problems
    - [ ] Update HTTP-API Documentation on the Website using https://github.com/ipfs/http-api-docs
  - [ ] Invite the IPFS [_early testers_](https://github.com/ipfs/go-ipfs/tree/master/docs/EARLY_TESTERS.md) to deploy the release to part of their production infrastructure.
  - [ ] Invite the wider community through (link to the release issue):
    - [ ] [discuss.ipfs.io](https://discuss.ipfs.io/c/announcements)
    - [ ] Twitter
    - [ ] IRC
- [ ] **Stage 4 - Release**
  - [ ] Final preparation
    - [ ] Verify that version string in [`repo/version.go`](https://github.com/ipfs/go-ipfs/tree/master/repo/version.go) has been updated
    - [ ] tag commit with vX.Y.Z
    - [ ] update release branch to point to release commit (`git merge vX.Y.Z`).
    - [ ] Release published
      - [ ] to [dist.ipfs.io](https://dist.ipfs.io)
      - [ ] to [npm-go-ipfs](https://github.com/ipfs/npm-go-ipfs)
      - [ ] to [chocolatey](https://chocolatey.org/packages/ipfs)
      - [ ] to [github](https://github.com/ipfs/go-ipfs/releases)
  - [ ] Publish a Release Blog post (at minimum, a c&p of this release issue with all the highlights, API changes, link to changelog and thank yous)
  - [ ] Broadcasting (link to blog post)
    - [ ] Twitter
    - [ ] IRC
    - [ ] [Reddit](https://reddit.com/r/ipfs)
    - [ ] [discuss.ipfs.io](https://discuss.ipfs.io/c/announcements)
    - [ ] Announce it on the [IPFS Users Mailing List](https://groups.google.com/forum/#!forum/ipfs-users)
- [ ] **Post-Release**
  - [ ] Bump the version in `version.go` to `vX.(Y+1).0-dev`.
  - [ ] Create an issue using this release issue template for the _next_ release.
  - [ ] Make sure any last-minute changelog updates from the blog post make it back into the CHANGELOG.

## ❤️ Contributors

| Contributor | Commits | Lines ± | Files Changed |
|-------------|---------|---------|---------------|
| Steven Allen | 52 | +1866/-578 | 102 |
| vyzo | 12 | +167/-90 | 22 |
| whyrusleeping | 5 | +136/-52 | 7 |
| Roman Proskuryakov | 7 | +94/-7 | 10 |
| Jakub Sztandera | 3 | +58/-13 | 7 |
| hucg | 2 | +31/-11 | 2 |
| Raúl Kripalani | 2 | +7/-33 | 6 |
| Marten Seemann | 3 | +27/-10 | 5 |
| Marcin Rataj | 2 | +26/-0 | 5 |
| b5 | 1 | +2/-22 | 1 |
| Hector Sanjuan | 1 | +11/-0 | 1 |
| Yusef Napora | 1 | +4/-0 | 1 |

Would you like to contribute to the IPFS project and don't know how? Well, there are a few places you can get started:

- Check the issues with the `help wanted` label in the [go-ipfs repo](https://github.com/ipfs/go-ipfs/issues?q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22)
- Join an IPFS All Hands, introduce yourself and let us know where you would like to contribute - https://github.com/ipfs/team-mgmt/#weekly-ipfs-all-hands
- Hack with IPFS and show us what you made! The All Hands call is also the perfect venue for demos, join in and show us what you built
- Join the discussion at [discuss.ipfs.io](https://discuss.ipfs.io/) and help users finding their answers.
- Join the [🚀 IPFS Core Implementations Weekly Sync 🛰](https://github.com/ipfs/team-mgmt/issues/992) and be part of the action!

## ⁉️ Do you have questions?

The best place to ask your questions about IPFS, how it works and what you can do with it is at [discuss.ipfs.io](http://discuss.ipfs.io). We are also available at the `#ipfs` channel on Freenode, which is also [accessible through our Matrix bridge](https://riot.im/app/#/room/#freenode_#ipfs:matrix.org).

Begin v0.4.23 patch release, based on v0.4.22.

NOT FOR MERGING

Issue: https://github.com/ipfs/go-ipfs/issues/6837
Update all deps.
Go-ipfs must be able to fetch files via graphsync. At the moment, the graphsync interface expects a peer with which to sync and a selector to fetch. It _does not_ support automatically finding providers, splitting requests, etc.

Proposal: Add a (repeated) `--from` flag to instruct IPFS to fetch a file from a specific peer. When passed, go-ipfs should:

1. Connect to the specified peers.
2. Determine which protocols these peers support.
3. Pick the best supported transport.
4. Fetch the file with this transport.

For now, go-ipfs will not even try to split the request between multiple peers when `--from` is specified and at least one of the specified peers supports graphsync. As we improve graphsync/bitswap, we can add request splitting logic in future PRs.
go-ipfs should expose a graphsync endpoint to serve files over graphsync.

Requirements:

* This feature needs to be experimental and needs to be enabled via an `Experimental.Graphsync` flag.
* go-ipfs does not need to be able to _fetch_ files via graphsync for this feature to be considered complete. It just needs to expose the local blockstore via graphsync.
We need a plugin type that can respond to (libp2p) events (disconnect, connect, etc.).
三台主机，添加，config内容
{
  "API": {
    "HTTPHeaders": {
      "Access-Control-Allow-Methods": [
        "PUT",
        "GET",
        "POST"
      ],
      "Access-Control-Allow-Origin": [
        "http://192.168.159.128:5001",
        "http://127.0.0.1:5001",
        "https://webui.ipfs.io"
      ]
    }
  },
  "Addresses": {
    "API": "/ip4/0.0.0.0/tcp/5001",
    "Announce": [],
    "Gateway": "/ip4/0.0.0.0/tcp/8080",
    "NoAnnounce": [],
    "Swarm": [
      "/ip4/0.0.0.0/tcp/4001",
      "/ip6/::/tcp/4001"
    ]
  },
  "Bootstrap": null,
  "Datastore": {
    "BloomFilterSize": 0,
    "GCPeriod": "1h",
    "HashOnRead": false,
    "Spec": {
      "mounts": [
        {
          "child": {
            "path": "blocks",
            "shardFunc": "/repo/flatfs/shard/v1/next-to-last/2",
            "sync": true,
            "type": "flatfs"
          },
          "mountpoint": "/blocks",
          "prefix": "flatfs.datastore",
          "type": "measure"
        },
        {
          "child": {
            "compression": "none",
            "path": "datastore",
            "type": "levelds"
          },
          "mountpoint": "/",
          "prefix": "leveldb.datastore",
          "type": "measure"
        }
      ],
      "type": "mount"
    },
    "StorageGCWatermark": 90,
    "StorageMax": "10GB"
  },
  "Discovery": {
    "MDNS": {
      "Enabled": true,
      "Interval": 10
    }
  },
  "Experimental": {
    "FilestoreEnabled": false,
    "Libp2pStreamMounting": false,
    "P2pHttpProxy": false,
    "PreferTLS": false,
    "QUIC": false,
    "ShardingEnabled": false,
    "UrlstoreEnabled": false
  },
  "Gateway": {
    "APICommands": [],
    "HTTPHeaders": {
      "Access-Control-Allow-Headers": [
        "X-Requested-With",
        "Range",
        "User-Agent"
      ],
      "Access-Control-Allow-Methods": [
        "GET",
        "POST",
        "GET"
      ],
      "Access-Control-Allow-Origin": [
        "*"
      ]
    },
    "NoFetch": false,
    "PathPrefixes": [],
    "RootRedirect": "",
    "Writable": false
  },
  "Identity": {
    "PeerID": "QmYWgc14JTEZhxhrd8XmMAzueLJT8EqnwZ7J9m52wkt6DN",
    "PrivKey": "CAASqAkwggSkAgEAAoIBAQDdyZ0+/S/eSSMkjcEj9clqw/bv+sZPgmvObr5jzNr2giElWeaOMnHyW2NoQpVj1sgnLqWHXGZYueK+5KaxMuFS2LjcqhUz8q1iAokal1GhOcxbkZ4nme4q6He4rxOCyCg3o6EAiy4TV/u9oL09ICb++A+5iO9XgZoomSP3q0N2ECo9c12B2N9zZk+S/CRGVDLu+EsBt9KMMd/FPgMVDO+cTaHlK1vC0MzPenzt117jmGRPNstwC5cYMdN7+HseOJXBoquc+945tXDkPT93M3dTONq+Dxk54EGNUF+W3SZYPhX9sRe2YFgS7T2JRMGx1/vs6KsQpxxnrIc71S4mLg81AgMBAAECggEAfl8IiAF/quqFaaiTqke78meiZm6/XEJ15vPW68qn4NmYxU2KPu+jWXKVG60ErhSNizXa/1u4vUl9V0O1bzYMiUYPXzxSRH08KaJEOLCLxI/IT0yTjwD4Yd5/iO3I8jXWJI3JiSPEpyT0vcG+0ftl/NWfMBpENdoU2pkXk2E0WSohI7pLTuxbgfCopAKHQt9wU+9pvCDLdMaMekE5+hFpgfym+fcmE9stfvJGPuNwKLBDGOXHUemWJ3WnMfCxfPsat+1JHcehml1f7tJpdxXCETVhRU3URh3nAg01iKOZ0/ebNnlKrYq5d788awIoAWi4d7F6uP2u/otq0QyoqShyQQKBgQD0wF+iKRLK9P0PUA5cqg7UK8GuGt//LLjEIgbfScTptdIWjJfLkgQOp0jEW2t/kn9ylTpZtSRt5IblnrMT4NFq6V5V/cqdSB8xX+BAXL41/z+d4P1CQK4WktNn8fFuvGtF4eHUpf+7qw9AmPJODcUoWODiGLff6RtXlYoKoakYqQKBgQDn+w7+kF/jZG1tzh2td6vWtimB4VrhFkT7xHeDCUX/KJiwAVh0UqFS/XxXo+Q4oUpxWu9LN7yBV+TMmp9IkgKZNkwyjiT1hNnlix7Xk+ONmKR/9gQvtkjaH9lzm3rRGcAIyi8YPQ1grUubb/typJpxn4/S4N6h2+jU9g35ujtdrQKBgQDjnv3R/E0EADBRy2xv9aBw5njsCQaFdPwpPFQT2bGOgZBvdDXAF346eo2MQFGLhZ2N3Qc1YugMY9qpNpzpQc7BlWQsqSmEeQy5iKcwdJBZ+5cYp6Qht7GwQMDoDPUyvX0ustKqR++8g2xd8WB4Awp3aaFL5R0s2siY/fQxywNOcQKBgF5zFoDI0XGowvERGX42Gi26Tx4FXdYFFiMXs70TOn+PzNLkSVpbBjne4RBhtxrjeIa8im8qi0JyQcKYNb/7SrmMpOt0elHIPFs8EFufZ+ePvXIn/T5bzj+Y9hUeuZuHC2vIvfH1cYvqIr1vk4XyxLr8RzeJvLtT6PFEGR6TF3alAoGBAN8BP0QY8hI/F9rf2JotzKzxz4evFLR/K41kaMvMf/NjB9c0W4Pbi74zNyQ6ewB4+eK3HUaU4XEF3PE9IzXYXEmPO+n6Ch7JFuB6gb5WQVvYCyuiyntuzV2lvcAVHjX9OPBdx0xNDEhCNKHAacueI5PSqlEoJwbhgrBUn0f82ho2"
  },
  "Ipns": {
    "RecordLifetime": "",
    "RepublishPeriod": "",
    "ResolveCacheSize": 128
  },
  "Mounts": {
    "FuseAllowOther": false,
    "IPFS": "/ipfs",
    "IPNS": "/ipns"
  },
  "Pubsub": {
    "DisableSigning": false,
    "Router": "",
    "StrictSignatureVerification": false
  },
  "Reprovider": {
    "Interval": "12h",
    "Strategy": "all"
  },
  "Routing": {
    "Type": "dht"
  },
  "Swarm": {
    "AddrFilters": null,
    "ConnMgr": {
      "GracePeriod": "20s",
      "HighWater": 900,
      "LowWater": 600,
      "Type": "basic"
    },
    "DisableBandwidthMetrics": false,
    "DisableNatPortMap": false,
    "DisableRelay": false,
    "EnableAutoNATService": false,
    "EnableAutoRelay": false,
    "EnableRelayHop": false
  }

--------------------------------------------------------------
ipfs daemon &    
[1] 11871
[root@master ~]# Initializing daemon...
go-ipfs version: 0.4.22-
Repo version: 7
System version: amd64/linux
Golang version: go1.12.7
Swarm listening on /ip4/127.0.0.1/tcp/4001
Swarm listening on /ip4/192.168.159.128/tcp/4001
Swarm listening on /ip6/::1/tcp/4001
Swarm listening on /p2p-circuit
Swarm announcing /ip4/127.0.0.1/tcp/4001
Swarm announcing /ip4/192.168.159.128/tcp/4001
Swarm announcing /ip6/::1/tcp/4001
API server listening on /ip4/0.0.0.0/tcp/5001
WebUI: http://0.0.0.0:5001/webui
Gateway (readonly) server listening on /ip4/0.0.0.0/tcp/8080
Daemon is ready

-------------------------------------
ipfs swarm peers
/ip4/192.168.159.129/tcp/4001/ipfs/QmSch2HCAu8JrSsVY43YGryFsAKJCDEQ5AwzNqtTSUrmBT
/ip4/192.168.159.130/tcp/4001/ipfs/QmasZHPr94VdDa4EmtZ9kM6ewsdaTxa6fAj1AqQHp32CLt

http://192.168.159.128:5001/webui
to
http://192.168.159.128:5001/ipfs/QmfQkD8pBSBCBxWEwFSu4XaDVSWK6bjnNuaWZjMyQbyDub/
连接失败

Firefox 无法建立到 192.168.159.128:5001 服务器的连接。

    此站点暂时无法使用或者太过忙碌。请过几分钟后再试。
    如果您无法载入任何网页，请检查您计算机的网络连接状态。
    如果您的计算机或网络受到防火墙或者代理服务器的保护，请确认 Firefox 已被授权访问网络。

Unable to connect http://ip:5001/webui
my firewall is stop，selinux is disable
#### Version information:

```
go-ipfs version: 0.4.22-
Repo version: 7
System version: amd64/windows
Golang version: go1.12.7
```

#### Description:

I've added 624 GB (670.271.987.712 bytes, 1.974 Files, 12 Folders) of data using `ipfs add --recursive --pin=true --progress`, and now the client is extremely slow to unusable.
~The desktop client (which uses the javascript implementation) is unusable and cannot handle that data at all~ (apparently fixed it self, I don't know how) and the go client (the command line tool) takes ages (5h 45m 59s) to perform a `ipfs pin ls`.

But despite taking for ages everything else seam to be fine. Maybe some form of caching could help here?
Badger has released a new version that's format incompatible with the previous version. We have several options:

1. Ignore it. Not a good solution as version 1 isn't maintained.
2. Switch to it directly.
    * We'd need a migration. Badger 1 is experimental but enough users are using it that we can't just say "yolo, re-create your repos".
    * We'd go from a almost stable datastore right back to "we're not sure how stable this is".
3. Add an option to the go-ds-badger datastore to specify the underlying badger version.
    * Pro: this is pretty simple to implement. We should be able to import _both_ versions of badger into go-ipfs.
    * Con: no way for users to opt out of the old badger if they want to decrease their binary size.
4. Treat it like a new datastore:
   a. **Create a new go-ds-badger2 repo.&&
   b. Release a v1 of go-ds-badger for badger 1, then release a v2 for badger 2. This is the "go mod" way to do this however, the go-datastore interfaces may not be stable enough to do this.

~I'm currently leaning towards option 3.~

We have gone with 4.a (thanks @Kubuxu!).