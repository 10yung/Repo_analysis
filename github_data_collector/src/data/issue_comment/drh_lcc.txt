Hello! :)

I just wanted to try this project out and made me a clone and attempted a build with `mkdir out && make all BUILDDIR=./out`. This is what essentially happened:

```
cc -g -c -Icpp -o out/getopt.o cpp/getopt.c
cpp/getopt.c:21:3: warning: add explicit braces to avoid dangling else [-Wdangling-else]
                else if (strcmp(argv[optind], "--") == 0) {
                ^
1 warning generated.
cc -g -c -Icpp -o out/unix.o cpp/unix.c
cpp/unix.c:96:1: error: expected parameter declarator
memmove(void *dp, const void *sp, size_t n)
^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:47: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                                                            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_common.h:38:63: note: expanded from macro '__darwin_obsz0'
#define __darwin_obsz0(object) __builtin_object_size (object, 0)
                                                              ^
cpp/unix.c:96:1: error: expected ')'
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:47: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                                                            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_common.h:38:63: note: expanded from macro '__darwin_obsz0'
#define __darwin_obsz0(object) __builtin_object_size (object, 0)
                                                              ^
cpp/unix.c:96:1: note: to match this '('
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:47: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                                                            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_common.h:38:54: note: expanded from macro '__darwin_obsz0'
#define __darwin_obsz0(object) __builtin_object_size (object, 0)
                                                     ^
cpp/unix.c:96:1: warning: type specifier missing, defaults to 'int' [-Wimplicit-int]
memmove(void *dp, const void *sp, size_t n)
^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:47: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                                                            ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_common.h:38:32: note: expanded from macro '__darwin_obsz0'
#define __darwin_obsz0(object) __builtin_object_size (object, 0)
                               ^
cpp/unix.c:96:1: error: conflicting types for '__builtin___memmove_chk'
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:3: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                ^
cpp/unix.c:96:1: note: '__builtin___memmove_chk' is a builtin with type 'void *(void *, const void *, unsigned long, unsigned long)'
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:3: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                ^
cpp/unix.c:96:1: error: definition of builtin function '__builtin___memmove_chk'
memmove(void *dp, const void *sp, size_t n)
^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/usr/include/secure/_string.h:69:3: note: expanded from macro 'memmove'
                __builtin___memmove_chk (dest, __VA_ARGS__, __darwin_obsz0 (dest))
                ^
1 warning and 4 errors generated.
make: *** [out/unix.o] Error 1
```

macOS uses a specialized version of LLVM Clang:
```
$ cc --version
Apple LLVM version 10.0.0 (clang-1000.11.45.5)
Target: x86_64-apple-darwin18.2.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin
```

Kind regards,

Ingwie.
Windows build with gcc works,
Linux build should also work, but was not tested yet.
Hey we're having a discussion over at Atariage about the possibility of getting a C compiler to target the "CP1610" CPU. Ref: http://atariage.com/forums/topic/286670-sdcc-pic16-c-compiler/?p=4192163

Its a 16 bit CPU where sizeof(char) = sizeof(int) = sizeof(void*) = 1.
Is re-targeting for this CPU possible and if so are there any good docs or reference for what parts need to be changed in LCC to make this happen?
Hi David,

I was wondering if you could share the history of the cpp C preprocessor. Was this written specifically for lcc?

Thanks and Regards
Dibyendu
As I mentioned in the title, I want to do my own compilation using your compiler, and is it my programming language by playing in c libraries? I've tried Java proactively from you, but my programming language is not compatible with the slogan of slogan "C as powerful as python is so easy", according to the information I've read on the internet,
1-) your compiler is not borrowed like borland c, right?
2-) Not compatible with all operating systems?
3-) is not the c compiler we know?
Now why do I order them
Because of the question, sordum wikipedia is licensed. For saying
2. The question on the link to ask you about the question is https://github.com/drh/lcc/issues/34
3. Due to the fact that the sordium has been called the processor programming compiler for some sites c programming language
I apologize for writing so long):

A quick internet search found http://www.willus.com/ccomp_benchmark.shtml?p1 which is from 2002

I'd like to get a feeling for how much faster LCC compiles compared to GCC and how much slower the executables run. Obviously this is application specific but I'd like to set some expectations of what might be possible. Another comparison of interest would be TCC
do you havs a plan to support lcc run on macOS?
Hi Dave,
In src/stmt.c line no. 151, 
Type rty definition should be at top in statement function (for C89)

`Type rty = freturn(cfunc->type);`

Warm Regards,
Daipayan Bhowal
```
(i >> 0) = j;
```

After the `simplify` at `simp.c`, the expression 'i >> 0' will be simplified to 'i' which is an `INDIR` tree, thus the assignment check will be OK. 

The same problem can be found in other identity simplification.
main.c has an incorrect length for the mulops_calls option string on lines 158 and 159.
`
        else if (strncmp(argv[i], "-mulops_calls=", 18) == 0)
            IR->mulops_calls = argv[i][18] - '0';
`
should be:
`
        else if (strncmp(argv[i], "-mulops_calls=", 14) == 0)
            IR->mulops_calls = argv[i][14] - '0';
`
if I'm counting correctly.
