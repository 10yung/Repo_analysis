**Is your feature request related to a problem? Please describe.**
I would like to declare `const`ants for a few styles, which could then be used everywhere easily.
```rust
    const SOME_STYLE: Style = Style::new()
        .fg(Color::Red)
        .bg(Color::Blue)
        .modifier(Modifier::DIM);
```
Currently I have to utilize the lazy_static crate for that.

**Describe the solution you'd like**
Adding `const` to:
- `Style::fg`
- `Style::bg`
- `Style::modifier`
and adding a `pub const fn new() -> Self` which does the same as `Style::default` would allow that.

**Describe alternatives you've considered**
[lazy_static](https://crates.io/crates/lazy_static), which is unnecessary overhead.

I already tested my solution and could assemble a PR..

This adds the option to have a selected item in a `Table` which can be highlighted with a style and symbol (a parallel feature with the `SelectableList` type). The constructor was not changed to avoid breaking existing code. Selectability can be configured using the builder pattern as is common in the rest of the code base.

[![asciicast](https://asciinema.org/a/qf6RCoFQL0pn934C2YyySTx5S.svg)](https://asciinema.org/a/qf6RCoFQL0pn934C2YyySTx5S)

Addresses https://github.com/fdehau/tui-rs/issues/196
**Is your feature request related to a problem? Please describe.**
I've been using tui-rs to work on [bottom](https://github.com/ClementTsang/bottom), and one of my  graphs is set to take up ~1/3 of the terminal height and ~1/2 the terminal width.  It's legend contains only 2 entries.  On full screen, it's fine - the chart label will show and all is good.  However, shrinking to half width or half height seems to prove to be too much and will hide the legend, despite plenty of room remaining.

**Describe the solution you'd like**
Unless there's a reason I'm missing, I think it would be nice to increase the threshold that triggers legends to not be drawn.  In `chart.rs` I see that you're currently setting the threshold to be 1/3 of the graph's layout.  Would it be possible to increase it?  1/2 or 2/3 would probably still work IMO.  I've used a fork of this project and set it to that and it seems fine, but I would personally prefer it if it was in the main project, or at least get an explanation to why it isn't possible to do so.

**Describe alternatives you've considered**
For some components I've just moved them out of the chart into their own sections.  In most cases, this is fine - for example, with CPU displays, it makes more sense to put them as their own separate table of entries, since high core count CPUs are more common and cramming 16+ legend entries into a chart is a bad idea.

However, in my earlier case, it just makes little sense to allocate an entire table chunk just for 2 measily entries, especially when the graph has plenty of room.

**Additional context**
Here's an example of full screen (working fine):

![image](https://user-images.githubusercontent.com/34804052/72401880-58b31f00-371b-11ea-99dd-76238041b5bb.png)

Half width hides it already:
![image](https://user-images.githubusercontent.com/34804052/72401888-6072c380-371b-11ea-9561-82ccfa398a46.png)


Thanks!
None
None
I am rendering cpu and memory events, and would like them to stream in from the right to the left. However, if I populate the dataset by appending new events to the end, the data doesn't always fill the screen, since the data size does not necessarily match the final width of the rendered box. This allows rendering the elements from starting from the right, with left to right remaining the default.
Closes #73

This commit only adds support for linecharts for the braille marker.
Fixes issue #214 - Changed the default key on user_input example to 'Esc' rather than 'q' to prevent the program from quitting when users enter a word that contains 'q'
**Describe the bug**
Trivial issue - the user_input example uses "q" as the exit key, so you can't type anything with the letter "q".

Maybe make the exit character [esc] or [Ctrl+c]. Wouldn't hurt to do the same in other examples.

**To Reproduce**
1) `cargo run --example user_input`
2) type a word with q, like "quintessence"

**Expected behavior**
The input is accepted.

**Desktop**
 - OS: Linux
 - Terminal Emulator: xfce terminal
 - Font: Monofur (+nerd font mods)
 - Crate version: 0.8.0
 - Backend: termion

**Additional context**
I'd be happy to make a PR with this change (and to the other examples if you'd like).
**Describe the solution you'd like**

It would be nice if tui-rs provides a terminal widget where i can create a tmux-like interface.

