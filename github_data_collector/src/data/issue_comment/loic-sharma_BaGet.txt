### Describe the bug
BaGet must be restarted after installing a new PostgreSQL database due to the following error message:

> Npgsql.NpgsqlException (0x80004005): The NpgsqlDbType 'Citext' isn't present in your database.


### Work around

Restart BaGet to fix this issue.

### To Reproduce

1. Install PostgreSQL
1. Delete BaGet's database if it exists
1. Start BaGet
1. Verify the PostgreSQL database has been created
1. Try to push a package. This will fail

### Additional context

This bug is caused by: https://github.com/npgsql/efcore.pg/issues/170

> The problem is that the first time Npgsql connects to a given database, it loads all of that database's type information and caches that for all further connections. Unfortunately, on your first connection the `citext` type isn't present in your database yet (since the extension hasn't been added yet), and so your connections aren't aware of it.
> 
> The solution is to call `NpgsqlConnection.ReloadTypes()` on your NpgsqlConnection after the citext extension is added - this will trigger a reloading of the types and should resolve your issue.

<details>
<summary>Full exception</summary>

```
fail: Microsoft.EntityFrameworkCore.Database.Command[20102]
      Failed executing DbCommand (2ms) [Parameters=[@__id_0='?', @__ToNormalizedString_1='?' (Size = 64)], CommandType='Text', CommandTimeout='30']
      SELECT CASE
          WHEN EXISTS (
              SELECT 1
              FROM "Packages" AS p
              WHERE (p."Id" = @__id_0) AND (p."Version" = @__ToNormalizedString_1))
          THEN TRUE::bool ELSE FALSE::bool
      END
Npgsql.NpgsqlException (0x80004005): The NpgsqlDbType 'Citext' isn't present in your database. You may need to install an extension or upgrade to a newer version.
   at Npgsql.TypeMapping.ConnectorTypeMapper.GetByNpgsqlDbType(NpgsqlDbType npgsqlDbType) in C:\projects\npgsql\src\Npgsql\TypeMapping\ConnectorTypeMapper.cs:line 106
   at Npgsql.NpgsqlParameter.ResolveHandler(ConnectorTypeMapper typeMapper) in C:\projects\npgsql\src\Npgsql\NpgsqlParameter.cs:line 523
   at Npgsql.NpgsqlCommand.ValidateParameters() in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 796
   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken) in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 1140
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteAsync(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues, CancellationToken cancellationToken)
fail: Microsoft.EntityFrameworkCore.Query[10100]
      An exception occurred while iterating over the results of a query for context type 'BaGet.Database.PostgreSql.PostgreSqlContext'.
      Npgsql.NpgsqlException (0x80004005): The NpgsqlDbType 'Citext' isn't present in your database. You may need to install an extension or upgrade to a newer version.
         at Npgsql.TypeMapping.ConnectorTypeMapper.GetByNpgsqlDbType(NpgsqlDbType npgsqlDbType) in C:\projects\npgsql\src\Npgsql\TypeMapping\ConnectorTypeMapper.cs:line 106
         at Npgsql.NpgsqlParameter.ResolveHandler(ConnectorTypeMapper typeMapper) in C:\projects\npgsql\src\Npgsql\NpgsqlParameter.cs:line 523
         at Npgsql.NpgsqlCommand.ValidateParameters() in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 796
         at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken) in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 1140
         at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteAsync(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
         at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken) in C:\projects\npgsql-entityframeworkcore-postgresql\src\EFCore.PG\Storage\Internal\NpgsqlExecutionStrategy.cs:line 49
         at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider.GetResult[TResult](IAsyncEnumerable`1 valueBuffers, Boolean throwOnNullResult, CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
         at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
Npgsql.NpgsqlException (0x80004005): The NpgsqlDbType 'Citext' isn't present in your database. You may need to install an extension or upgrade to a newer version.
   at Npgsql.TypeMapping.ConnectorTypeMapper.GetByNpgsqlDbType(NpgsqlDbType npgsqlDbType) in C:\projects\npgsql\src\Npgsql\TypeMapping\ConnectorTypeMapper.cs:line 106
   at Npgsql.NpgsqlParameter.ResolveHandler(ConnectorTypeMapper typeMapper) in C:\projects\npgsql\src\Npgsql\NpgsqlParameter.cs:line 523
   at Npgsql.NpgsqlCommand.ValidateParameters() in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 796
   at Npgsql.NpgsqlCommand.ExecuteDbDataReader(CommandBehavior behavior, Boolean async, CancellationToken cancellationToken) in C:\projects\npgsql\src\Npgsql\NpgsqlCommand.cs:line 1140
   at Microsoft.EntityFrameworkCore.Storage.Internal.RelationalCommand.ExecuteAsync(IRelationalConnection connection, DbCommandMethod executeMethod, IReadOnlyDictionary`2 parameterValues, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.BufferlessMoveNext(DbContext _, Boolean buffer, CancellationToken cancellationToken)
   at Npgsql.EntityFrameworkCore.PostgreSQL.Storage.Internal.NpgsqlExecutionStrategy.ExecuteAsync[TState,TResult](TState state, Func`4 operation, Func`4 verifySucceeded, CancellationToken cancellationToken) in C:\projects\npgsql-entityframeworkcore-postgresql\src\EFCore.PG\Storage\Internal\NpgsqlExecutionStrategy.cs:line 49
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncQueryingEnumerable`1.AsyncEnumerator.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.AsyncQueryMethodProvider.GetResult[TResult](IAsyncEnumerable`1 valueBuffers, Boolean throwOnNullResult, CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.TaskResultAsyncEnumerable`1.Enumerator.MoveNext(CancellationToken cancellationToken)
   at Microsoft.EntityFrameworkCore.Query.Internal.AsyncLinqOperatorProvider.ExceptionInterceptor`1.EnumeratorExceptionInterceptor.MoveNext(CancellationToken cancellationToken)
```
</description>
### Is your feature request related to a problem? Please describe.
NuGet.org's search API supports package type filtering now.

### Describe the solution you'd like
BaGet search should support the same protocol. The protocol libraries should support the package type filtering.
### Describe the bug
The solution creates nested 'packages' directory

### To Reproduce
Looking at my volume

### Expected behavior
Only one 'packages' directory with all my private packages & cached packages.

### Screenshots
Please notice the path:

![Screen Shot 2020-01-14 at 14 37 03](https://user-images.githubusercontent.com/33253167/72345467-8a58c580-36dc-11ea-9c03-680426dc9bb8.png)


### Additional context
Most of the nested directories contain the same packages and versions, however, there are some differentials between directories "depth" (both packages & versions);

![Screen Shot 2020-01-14 at 14 48 17](https://user-images.githubusercontent.com/33253167/72345644-f5a29780-36dc-11ea-88ca-ae2f5873e311.png)




This is my nuget's compose;

```
nuget:
    image: loicsharma/baget
    container_name: "nuget"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ApiKeyHash=E1E61EE36C7C76DB28D43C13BEDAB5701F9C693009491D672981B3435AF51D3F
      - Storage__Type=FileSystem
      - Storage__Path=/var/baget/packages
      - PackageDeletionBehavior=HardDelete
      - Database__Type=Sqlite
      - Database__ConnectionString=Data Source=/var/baget/baget.db
      - Search__Type=Database
    volumes:
      - ./nuget:/var/baget
    restart: unless-stopped
.
.
.
```

Any suggestions? 
Latest installation 0.20 requires .Net Core 2.2 but that is already pas end of support.  Plans for .Net Core 3.1 LTS or .Net Core 2.1 LTS support?

Summary of the changes (in less than 80 chars)

 * Added the ablity to view release notes for packages.
Addresses https://github.com/loic-sharma/BaGet/issues/412
### Describe the bug
When the internet connection is lost (yeah, I have that occasionally, as you can see from my other opened issue about offline usage. I develop while taking a train, from time to time), BaGet with read-through caching enabled seems to still try and fetch the most recent information about packages from the external source (e.g. nuget.org). Ideally, it should just hit the local cache, and retry to update external package information later (with exponential backoff).

### To Reproduce
Steps to reproduce the behavior:
1. Set up BaGet with read-through cache of nuget.org
2. Make sure at least one package is cached
3. Go offline
4. Try and restore a project using said package
5. Observe error 500 returned from BaGet

### Expected behavior
Hit cache even when offline, optionally retrying to fetch most recent info later when connectivity is restored.
### Describe the bug
When the machine BaGet is running on loses internet connection, loading the index page leads to an infinite loop of errors trying to load the package icons. Ideally, the attempts to load the icons should be tried with exponential backoff, not immediately after it failed.

### To Reproduce
Steps to reproduce the behavior:
1. Set up BaGet, having at least one package present
2. Disconnect internet (can also be emulated by setting offline mode in browser dev tools after the initial page load, but that's a little bit difficult to time)
3. Load the page
4. See error in dev tools:
Request to https://www.nuget.org/Content/gallery/img/default-package-icon-256x256.png fails in endless loop.

### Expected behavior
The immediate retry also leads to "flashing" of the icon area. So implementing exponential backoff would be appropriate for any external component.

![image](https://user-images.githubusercontent.com/31271052/70112658-fd5c2e80-1690-11ea-9c1d-6992d60230d7.png)

请问这个问题，需要怎么处理呢！谢谢！
It would be great to be able to have Read-through caching enabled even with the Docker version.
Maybe by adding and using two environment variables like:
```
Mirror__Enabled=true
Mirror__PackageSource="https://api.nuget.org/v3/index.json"
```
Or simply the second one (as its presence or absence would determine the mirro enabling/disabling