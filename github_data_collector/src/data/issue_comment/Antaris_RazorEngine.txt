ITemplateManager why is not Member for RemoveDynamic
Issue #400 Completing open branch to allow the temporary file location to be configured
If I Run and Compile a exist template with new html code, the exception will throw:

`The same key was already used for another template.`


It's success on window machine ,
but Throw exception on mac machine.

how to resolve.. 

TearDown : RazorEngine.Templating.TemplateCompilationException : Errors while compiling a Template.
Please try the following to solve the situation:

If the problem is about missing/invalid references or multiple defines either try to load
the missing references manually (in the compiling appdomain!) or
Specify your references manually by providing your own IReferenceResolver implementation.
See https://antaris.github.io/RazorEngine/ReferenceResolver.html for details.
Currently all references have to be available as files!
If you get 'class' does not contain a definition for 'member':
try another modelType (for example 'null' to make the model dynamic).
NOTE: You CANNOT use typeof(dynamic) to make the model dynamic!
Or try to use static instead of anonymous/dynamic types.
More details about the error:

Address in : [https://www.nuget.org/packages/RazorEngine.NetCore/](https://www.nuget.org/packages/RazorEngine.NetCore/)
Looks like this project is dead and also has some issues working with Core and some Azure services (e.g. Azure Functions). 

What are people using instead?
i have syntax error in below code, can any body help that this type of syntaxt is supported in razorengine??

Errors while compiling a Template.
Please try the following to solve the situation:
  * If the problem is about missing/invalid references or multiple defines either try to load 
    the missing references manually (in the compiling appdomain!) or
    Specify your references manually by providing your own IReferenceResolver implementation.
    See https://antaris.github.io/RazorEngine/ReferenceResolver.html for details.
    Currently all references have to be available as files!
  * If you get 'class' does not contain a definition for 'member': 
        try another modelType (for example 'null' to make the model dynamic).
        NOTE: You CANNOT use typeof(dynamic) to make the model dynamic!
    Or try to use static instead of anonymous/dynamic types.
More details about the error:

>  - error: (47, 66) Invalid expression term '.'
> 	 - error: (47, 67) Syntax error, ':' expected
> 	 - error: (47, 117) Invalid expression term '.'
> 	 - error: (47, 118) Syntax error, ':' expected
> 	 - error: (47, 137) ; expected
> 	 - error: (47, 137) Invalid expression term ')'
> 	 - error: (47, 138) ; expected
> 	 - error: (47, 138) Invalid expression term ')'
> 	 - error: (51, 70) Invalid expression term '.'
> 	 - error: (51, 71) Syntax error, ':' expected
> 	 - error: (51, 112) Invalid expression term '.'
> 	 - error: (51, 113) Syntax error, ':' expected
> 	 - error: (51, 123) ; expected
> 	 - error: (51, 123) Invalid expression term ')'
> 	 - error: (51, 124) ; expected
> 	 - error: (51, 124) Invalid expression term ')'
> 	 - error: (56, 76) Invalid expression term '.'
> 	 - error: (56, 77) Syntax error, ':' expected
> 	 - error: (56, 122) Invalid expression term '.'
> 	 - error: (56, 123) Syntax error, ':' expected
> 	 - error: (56, 133) ; expected
> 	 - error: (56, 133) Invalid expression term ')'
> 	 - error: (56, 134) ; expected
> 	 - error: (56, 134) Invalid expression term ')'
> 	 - error: (70, 84) Invalid expression term '.'
> 	 - error: (70, 85) Syntax error, ':' expected
> 	 - error: (70, 128) Invalid expression term '.'
> 	 - error: (70, 129) Syntax error, ':' expected
> 	 - error: (70, 133) ; expected
> 	 - error: (70, 133) Invalid expression term ')'



`@{
    var showSubject = (Model.Old.Subject != Model.Subject);
    var showReceivingMode = false;
    if (Model.ReceivingMode != null && Model.Old.ReceivingMode != null)
    {
        showReceivingMode = (Model.Old.ReceivingMode.Text != Model.ReceivingMode.Text);
    }
    var showDeliveryDate = (Model.Old.DeliveryDateAsLongDateFormated != Model.DeliveryDateAsLongDateFormated);
    var showDeliveryTime = (Model.Old.DeliveryTimeAsFormatedTime != Model.DeliveryTimeAsFormatedTime);
    // var showCorrespondenceExternalRecipients = !(Model.Old.CorrespondenceExternalRecipients == null && Model.CorrespondenceExternalRecipients == null) &&
    //                                              (Model.Old.CorrespondenceExternalRecipients == null || Model.CorrespondenceExternalRecipients == null || (!(Model.Old.CorrespondenceExternalRecipients.Count == 0 && Model.CorrespondenceExternalRecipients.Count == 0) &&
    //                                               (Model.Old.CorrespondenceExternalRecipients.Select(x => x.ExternalContactID).ToList().Except(Model.CorrespondenceExternalRecipients.Select(x => x.ExternalContactID).ToList()).Count() > 0)));

    var ShowPolicyNumber = (Model.Old.PolicyNumber != Model.PolicyNumber);

    var showExternalSenderEntity = !(Model.Old.ExternalSenderEntity == null && Model.ExternalSenderEntity == null) &&
                                (Model.Old.ExternalSenderEntity == null || Model.ExternalSenderEntity == null ||
                                 (Model.Old.ExternalSenderEntity?.ExternalContactName != Model.ExternalSenderEntity?.ExternalContactName));

    var showInternalSenderEntity = !(Model.Old.InternalSenderEntity == null && Model.InternalSenderEntity == null) &&
                                    (Model.Old.InternalSenderEntity == null || Model.InternalSenderEntity == null ||
                                     (Model.Old.InternalSenderEntity?.EntityName != Model.InternalSenderEntity?.EntityName));


    var showInternalRecipientEntity =  !(Model.Old.InternalRecipientEntity == null && Model.InternalRecipientEntity == null) &&
                                        (Model.Old.InternalRecipientEntity == null || Model.InternalRecipientEntity == null ||
                                        (Model.Old.InternalRecipientEntity?.EntityName != Model.InternalRecipientEntity?.EntityName));


    //var showCorrespondenceInternalRecipients = !(Model.Old.CorrespondenceInternalRecipients == null && Model.CorrespondenceInternalRecipients == null) &&
    //                                             (Model.Old.CorrespondenceInternalRecipients == null || Model.CorrespondenceInternalRecipients == null || (!(Model.Old.CorrespondenceInternalRecipients.Count == 0 && Model.CorrespondenceInternalRecipients.Count == 0) &&
    //                                              (Model.Old.CorrespondenceInternalRecipients.Count == 0 || Model.CorrespondenceInternalRecipients.Count == 0 ||
    //                                               (Model.Old.CorrespondenceInternalRecipients.Select(x => x.EntityId).ToList().Except(Model.CorrespondenceInternalRecipients.Select(x => x.EntityId).ToList()).Count() > 0))));

    var showExternalCorrespondenceNumber = (Model.Old.ExternalCorrespondenceNumber != Model.ExternalCorrespondenceNumber);
    var showCorrespondenceType = (Model.Old.CorrespondenceTypeID != Model.CorrespondenceTypeID);
    var showExternalCorrespondenceDate = (Model.Old.ExternalCorrespondenceDate != Model.ExternalCorrespondenceDate);

    var showCorrespondenceClassification = (Model.Old.CorrespondenceClassification == null && Model.CorrespondenceClassification != null) ||
                                           (Model.Old.CorrespondenceClassification != null && Model.CorrespondenceClassification == null) ||
                                           (Model.Old.CorrespondenceClassification?.Text != Model.CorrespondenceClassification?.Text);

    //var showCorrespondenceExternalSenders = !(Model.Old.CorrespondenceExternalSenders == null && Model.CorrespondenceExternalSenders == null) &&
    //                                          (Model.Old.CorrespondenceExternalSenders == null || Model.CorrespondenceExternalSenders == null || (!(Model.Old.CorrespondenceExternalSenders.Count == 0 && Model.CorrespondenceExternalSenders.Count == 0) &&
    //                                           (Model.Old.CorrespondenceExternalSenders.Count == 0 || Model.CorrespondenceExternalSenders.Count == 0 ||
    //                                            (Model.Old.CorrespondenceExternalSenders.Select(x => x.ExternalContactId).ToList().Except(Model.CorrespondenceExternalSenders.Select(x => x.ExternalContactId).ToList()).Count() > 0))));

    var showSenderDetails = (Model.Old.SenderDetails != Model.SenderDetails);
    var showSenderPhone = (Model.Old.SenderPhone != Model.SenderPhone);
    var showSenderMobile = (Model.Old.SenderMobile != Model.SenderMobile);
    var showSenderNationalId = (Model.Old.SenderNationalId != Model.SenderNationalId);

    var showNumberOfUnattached = (Model.Old.NumberOfUnattached != Model.NumberOfUnattached);
    var showUnattached = (Model.Old.Unattached != Model.Unattached);

}`
I am using RazorEngine version 4.5. In the console program, compiling cshtml files into html is no problem.
Then, I added this program to the vs2017 VSIX plugin project, but found that the compilation time is very long, more than 18 minutes. I can't think of the reason. After trying, I found that adding this code to the configuration file can solve the slow compilation. But I don't understand why this is, please help me.
config.CompilerServiceFactory = new RazorEngine.Roslyn.RoslynCompilerServiceFactory();
Hi,

We are facing a security issue of RazorEngine.
Although we can isolate the generated assembly, we still need load those assemblies from file system. Our environment ask that all assembles must be signed before execute, and those temp dll calling are violate our security policy.

Is there a way to CompileAndRun with a .cshtml file without generate extra dll fill in file system?

Thanks
I have a view in DB:
```
@using Microsoft.AspNetCore.Mvc.Localization
@inject  IViewLocalizer Localizer
@model  dynamic

@section Scripts
{
    @if(Model != null)
    {
        <script>
            var json = @Html.Raw(Json.Serialize(@Model));
            populateForm($("#form"), json);
        </script>
    }
}

@{
    ViewData["Title"] = Localizer["Preventive Maintenance Postponement"];
}

<h1>@Localizer["Preventive Maintenance Postponement"]</h1>

<form asp-controller="Form" asp-action="Submit" method="post" id="form">
...
</form>

```

I tried to compile and run the view like so:
`var result = Engine.Razor.RunCompile(form.Html, form.Name, typeof(Form), form);`

And I get:
```
An exception of type 'RazorEngine.Templating.TemplateCompilationException' occurred in RazorEngine.NetCore.dll but was not handled in user code
Errors while compiling a Template.
Please try the following to solve the situation:
  * If the problem is about missing/invalid references or multiple defines either try to load 
    the missing references manually (in the compiling appdomain!) or
    Specify your references manually by providing your own IReferenceResolver implementation.
    See https://antaris.github.io/RazorEngine/ReferenceResolver.html for details.
    Currently all references have to be available as files!
  * If you get 'class' does not contain a definition for 'member': 
        try another modelType (for example 'null' to make the model dynamic).
        NOTE: You CANNOT use typeof(dynamic) to make the model dynamic!
    Or try to use static instead of anonymous/dynamic types.
More details about the error:
 - error: (15, 18) The name 'inject' does not exist in the current context
	 - error: (17, 18) The name 'model' does not exist in the current context
	 - error: (19, 18) The name 'section' does not exist in the current context
	 - error: (24, 36) The name 'Html' does not exist in the current context
	 - error: (24, 45) The name 'Json' does not exist in the current context
	 - error: (29, 4) The name 'ViewData' does not exist in the current context
	 - error: (29, 24) The name 'Localizer' does not exist in the current context
	 - error: (31, 18) The name 'Localizer' does not exist in the current context
	 - error: (33, 20) The name 'Localizer' does not exist in the current context
	 - error: (35, 46) The name 'Localizer' does not exist in the current context
	 - error: (37, 51) The name 'Localizer' does not exist in the current context
	 - error: (39, 45) The name 'Localizer' does not exist in the current context
	 - error: (41, 54) The name 'Localizer' does not exist in the current context
	 - error: (43, 47) The name 'Localizer' does not exist in the current context
	 - error: (45, 45) The name 'Localizer' does not exist in the current context
	 - error: (47, 54) The name 'Localizer' does not exist in the current context
	 - error: (49, 52) The name 'Localizer' does not exist in the current context
	 - error: (57, 18) The name 'Localizer' does not exist in the current context
	 - error: (59, 48) The name 'Localizer' does not exist in the current context
```

I realize I might have to work on getting the localizer to work. But AFAIK the `@model` should work just fine. Any ideas?