Background:
I tried compiling a multiplatform binary that included kotlin coroutines for Linux ARM 64 build target when I found out that there is no published artifact for that target. Then I found that coroutines depend on atomicfu, so I'm starting from here.

I've ran tests with ./gradlew check, but I haven't done any deep dive into the code, so I might not be aware of all the consequences of including these build targets.

**Summary:**

Add 32 and 64 bit Linux ARM targets so the library can be used on ARM devices running Linux such as Raspberry PI.

I added the `kotlinx-atomicfu` plugin to my multiplatform project. As soon as I did that I get the following error:
```
Source set 'commonMain' of project '<project name>' is part of several compilations [debug, release, main]
```

Here is my entire `build.gradle.kts`:
```Kotlin
plugins {
    id("com.android.library")
    id("org.jetbrains.kotlin.multiplatform")
    id("kotlinx-atomicfu")
}

android {
    compileSdkVersion(AndroidConfig.compileSdkVersion)

    defaultConfig {
        minSdkVersion(AndroidConfig.minSdkVersion)
        targetSdkVersion(AndroidConfig.targetSdkVersion)
        versionCode = 1
        versionName = "1.0"

        testInstrumentationRunner = "android.support.test.runner.AndroidJUnitRunner"
    }
}

dependencies {
    implementation(Libs.kotlin.stdlib.jvm)
    implementation(Libs.androidx.annotation)
    implementation(Libs.androidx.browser)
    implementation(Libs.rally.kinject.jvm)
    implementation(Libs.rally.kinject.jvm)
    implementation(Libs.kotlinx.coroutines.android)
}

kotlin {
    android()

    @Suppress("UNUSED_VARIABLE")
    sourceSets {
        val commonMain by getting {
            dependencies {
                implementation(Libs.kotlin.stdlib.common)
                implementation(Libs.rally.kinject.common)
                implementation(Libs.rally.store.common)
                implementation(Libs.rally.disposable.common)
                implementation(Libs.kotlinx.coroutines.common)
            }
        }

        val commonTest by getting {
            dependencies {
                for (lib in Libs.kotlin.test.common) {
                    implementation(lib)
                }
            }
        }
    }
}
```
Steps-to-reproduce:
```
class Foo {
     private val foo = atomic(0L).also {
        println(it)
    }
}
```

Priority: low
The last working version is 0.13.11. Guess, something had been broken after updating Gradle to 5.6.1 (#77).
Atomicfu creates synthetic classes to support static top-level properties. They should be package-private when possible (when there's no access from a different package) and their naming scheme shall be similar to inner-class naming (using '$' separator).
As atomic document says to leak atomic values to public use:

```kotlin
val _pref = atomic(0L)
var pref : Long
    get() = _pref.value
    set(value) { _pref.value = value }
```

so I think it's possible to have something like:

```kotlin
val pref by atomicVar(0L)
val pref by atomicVal(0L)

this::pref.atomic.value = 10
```
To be convenient with default Kotlin gradle plugin and Gradle's naming conventions for plugins I suggest to add full-qualified name for atomicfu plugin.
It can be used in the following ways:
```kotlin
plugins {
  id("org.jetbrains.kotlin.jvm") version "${kotlin_version}"
  id("org.jetbrains.kotlin.plugin.atomicfu") version "${atomicfu_version}"
}
```
Or via Gradle Kotlin DSL extensions:
```kotlin
plugins {
  kotlin("jvm") version "${kotlin_version}"
  kotlin("plugin.atomicfu") version "${atomicfu_version}"
}
```
I choose the prefix `org.jetbrains.kotlin.plugin` similarly to `org.jetbrains.kotlin.plugin.serialization` from `kotlinx.serialization`
Adding common dependency to a native module causes Gradle plugin to complain about it for **every** module. In ktor, it generates a huge number of warnings so one wouldn't be able to discover actual problems.

```
A compileOnly dependency is used in the Kotlin/Native target 'linuxX64':
Compilation: main

Dependencies:
org.jetbrains.kotlinx:atomicfu-common:0.12.9

Such dependencies are not applicable for Kotlin/Native, consider changing the dependency type to 'implementation' or 'api'.
```
Need to move from regexps to actual tree analysis.