### Issue Description
Group middleware use is dependent on order of function calls with respect to registering routes, but this is not documented anywhere. As mentioned in https://github.com/labstack/echo/issues/1304 this is expected behavior. This should be documented somewhere, but I see nothing mentioning this in the docs about groups, routing, or middleware.

### Checklist

- [x] Dependencies installed
- [x] No typos
- [x] Searched existing issues and docs

### Expected behaviour
Middleware should be executed on all routes registered for the group, regardless of when in the code `group.Use()` is called.

### Actual behaviour
Middleware for a group is only executed on routes that are registered *after* `group.Use()` is called.

### Steps to reproduce
1. Run the program in the section below
2. `curl 'localhost:1000/group/1'`
3. See that middleware is not executed
4. `curl 'localhost:1000/group/2'`
5. See that middleware is executed


### Working code to debug

```go
package main

import (
	"fmt"
	"github.com/labstack/echo"
)

func main() {
	e := echo.New()
	g := e.Group("/group")

	g.GET("/1", func(echo.Context) error {fmt.Printf("1\n"); return nil})

	g.Use(loggerMiddleware)

	g.GET("/2", func(echo.Context) error {fmt.Printf("2\n"); return nil})

	e.Logger.Fatal(e.Start(":1000"))
}

func loggerMiddleware(next echo.HandlerFunc) echo.HandlerFunc {
	return func(c echo.Context) error {
		fmt.Printf("Middleware executed\n")
		return next(c)
	}
}
```

### Version/commit
v4.1.11
### Issue Description
Seems like there is an issue using http2 without tls, for some reason providing JSON data in a PUT or POST will result in the client hanging.

We can use the `curl --http2-prior-knowledge` but not `curl --http2` meaning the http2 update is having issues.

We are building microservices and want to be able to switch tls on/off for troubleshooting reasons, thus we want to support cleartext http2
### Checklist

- [X] Dependencies installed
- [X] No typos
- [X] Searched existing issues and docs

### Expected behaviour
```
curl -H "Content-Type: application/json" --http2 -XPUT -d "{}"  -v --http2 localhost:8080/
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8080 (#0)
> PUT / HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.58.0
> Accept: */*
> Connection: Upgrade, HTTP2-Settings
> Upgrade: h2c
> HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA
> Content-Type: application/json
> Content-Length: 0
> 
< HTTP/1.1 101 Switching Protocols
< Connection: Upgrade
< Upgrade: h2c
* Received 101
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0
* Connection state changed (MAX_CONCURRENT_STREAMS updated)!
< HTTP/2 200 
< content-length: 0
< date: Thu, 16 Jan 2020 10:56:48 GMT
< 
* Connection #0 to host localhost left intact
```
### Actual behaviour
```
curl -H "Content-Type: application/json" --http2 -XPUT -d "{}"  -v --http2 localhost:8080/
*   Trying 127.0.0.1...
* TCP_NODELAY set
* Connected to localhost (127.0.0.1) port 8080 (#0)
> PUT / HTTP/1.1
> Host: localhost:8080
> User-Agent: curl/7.58.0
> Accept: */*
> Connection: Upgrade, HTTP2-Settings
> Upgrade: h2c
> HTTP2-Settings: AAMAAABkAARAAAAAAAIAAAAA
> Content-Type: application/json
> Content-Length: 2
> 
* upload completely sent off: 2 out of 2 bytes
< HTTP/1.1 101 Switching Protocols
< Connection: Upgrade
< Upgrade: h2c
* Received 101
* Using HTTP2, server supports multi-use
* Connection state changed (HTTP/2 confirmed)
* Copying HTTP/2 data in stream buffer to connection buffer after upgrade: len=0

```
### Steps to reproduce
Run the application and curl against it. 

Note that providing `-d ""` works but not `-d "{}"`
### Working code to debug

```go
package main

import (
	"github.com/labstack/echo/v4"
	"golang.org/x/net/http2"
	"golang.org/x/net/http2/h2c"
	"net/http"
	"log"
)

func main(){
	mux := echo.New()
	mux.POST("/", postFunc)
	mux.PUT("/", postFunc)
	mux.GET("/", show)
	h2s := &http2.Server{}
	h1s := &http.Server{
		Addr:    ":8080",
		Handler: h2c.NewHandler(mux, h2s),
	}
	log.Fatal(h1s.ListenAndServe())
}
// e.GET("/users/:id", getUser)
func postFunc(c echo.Context) error {
	// User ID from path `users/:id`
	return c.NoContent(http.StatusOK)
}
func show(c echo.Context) error {
	// Get team and member from the query string
	return c.NoContent(http.StatusOK)
}
```

### Issue Description
When using `ctx.Response().After(func(){ ... })` with `ctx.File(...)`, the After handller is called multiple times, with only one request made by the client
### Checklist

- [x] Dependencies installed
- [x] No typos
- [x] Searched existing issues and docs

### Expected behaviour
To callback the After function one time per request, no matter the response
### Actual behaviour
The After callback is called multiple times
### Steps to reproduce
1. Create a route handler function
2. Create a After callback
3. Respond with a file
4. See the callback being called multiple times
### Working code to debug

```go
func test(ctx echo.Context) error {
	ctx.Response().After(func() {
                 fmt.Println("test")
	})
	return ctx.File("test_file.jpg")
}
```

### Version/commit
echo v4.1.11
Had the same issue as in #1435, Tested the proposed fix by @fvln and it worked perfectly.

 but in the PR #1438, the code was not the proposed one.

 All credits should go to @fvln  
Fixes #1479 

@vishr Please take a look at this when you have time. This is a followup from #1466 and could cause problems. Thanks!
### Issue Description

The latest release `v4.1.13` introduces a bug relat4ed to #1466 where parameterized routes sometimes return 404 for certain routes.

### Checklist

- [x] Dependencies installed
- [x] No typos
- [x] Searched existing issues and docs

### Expected behaviour

In the code shared below, if we access the route `/users/sharewithme/profile` or `/users/sharewithme/upload/self`, it's expected that the route would resolve correctly and not return 404 and the following code would return `sharewithme`; `sharewithme` and `self` respectively:

```go
// for route /users/sharewithme/profile
username := c.Param("username") // should return sharewithme

// for route /users/sharewithme/upload/self
username := c.Param("username")
type := c.Param("type")
```

### Actual behaviour

The routes mentioned above fail to resolve and instead return a 404

### Steps to reproduce

Run the code shared with the latest release and try the URLs mentioned above

### Working code to debug

```go
package main

import (
	"fmt"
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"log"
	"net/http/httputil"
	"strings"
)

func main() {
	e := echo.New()

	RegisterAPIRoutes(e)

	e.Logger.Fatal(e.Start(":1234"))
}

func RegisterAPIRoutes(e *echo.Echo) {
	e.Use(middleware.CORSWithConfig(middleware.CORSConfig{
		AllowOrigins:  []string{"*"},
		AllowMethods:  []string{echo.GET, echo.PUT, echo.POST, echo.DELETE},
		AllowHeaders:  []string{echo.HeaderContentType, echo.HeaderAuthorization},
		ExposeHeaders: []string{echo.HeaderAuthorization},
	}))

	e.POST("/users/signup", myFunc)
	e.POST("/users/signup/bulk", myFunc)
	e.POST("/users/signup/engcom", myFunc)
	e.POST("/users/surveysignup", myFunc)

	e.GET("/users/:username", myFunc)
	e.GET("/users/:username/likes/projects/ids", myFunc)
	e.GET("/users/:username/profile", myFunc)
	e.GET("/users/:username/uploads/:type", myFunc)

	e.GET("/interests/:name/users", myFunc)
	e.GET("/skills/:name/users", myFunc)
}

func myFunc(c echo.Context) error {
	var builder strings.Builder

	log.Println(c.Request())

	reqDump, _ := httputil.DumpRequest(c.Request(), true)

	builder.Write(reqDump)
	for _, name := range c.ParamNames() {
		builder.WriteString(fmt.Sprintf("Parameter: %s | Value: %s\n", name, c.Param(name)))
	}

	return c.String(200, builder.String())
}
```

### Version/commit
`v4.1.13`
Current implementation allow attacker to deceive wrong ip address to user due to careless handling of headers.
ref: https://github.com/labstack/echo/issues/855

This PR fix the problem.

Todo:
- [ ] write tests/docs
### Issue Description

While trying to write a custom HTTP error handler, I discovered a relatively new and seemingly incorrect semantic in the DefaultHTTPErrorHandler.  I am still using echo v3, and the old semantic seems to be sensible, while the new one does not:

In the old semantic (I am on v3.3.9), the code does this:

```
        if he, ok := err.(*HTTPError); ok {
		code = he.Code
		msg = he.Message
		if he.Internal != nil {
			err = fmt.Errorf("%v, %v", err, he.Internal)
		}
	} else if e.Debug {
		msg = err.Error()
	} else {
		msg = http.StatusText(code)
	}
	if _, ok := msg.(string); ok {
		msg = Map{"message": msg}
	}
```

That is to say, if the error is an `HTTPError`, then we use its Code and Message.  If the error is *some other type of error*, then in debug mode, we use `err.Error()`.  This seems reasonable.  It's useful to rember that `HTTPError.Message` is of type `interface{}`.  And so it is reasonable to pass it anything that could be marshalled to JSON.

In the new code, (I am testing with v4.1.13), introduced by commit https://github.com/labstack/echo/commit/ed51400a8173aecbccf7803c25b45a32b82eb78d the logic is different:

```
	he, ok := err.(*HTTPError)
	if ok {
		if he.Internal != nil {
			if herr, ok := he.Internal.(*HTTPError); ok {
				he = herr
			}
		}
	} else {
		he = &HTTPError{
			Code:    http.StatusInternalServerError,
			Message: http.StatusText(http.StatusInternalServerError),
		}
	}

	// Issue #1426
	code := he.Code
	message := he.Message
	if e.Debug {  // <-------------------- unconditional overwrite of message
		message = err.Error()
	} else if m, ok := message.(string); ok {
		message = Map{"message": m}
	}
```

This means that toggling on Debug ALWAYS overwrites message (which may be a map full of an arbitrary set of things).  This seems to run counter to what a developer would reasonably expect.

### Checklist

- [X] Dependencies installed
- [X] No typos
- [X] Searched existing issues and docs

### Expected behaviour

e.Debug should not modify the semantics of error messages which have a developer-supplied payload

### Actual behaviour

e.Debug now wipes out customized error Message payload

### Steps to reproduce

Run server below.  Hit endpoint with e.g. `curl http://localhost:9999`

### Working code to debug

```go
package main

import (
  "github.com/labstack/echo/v4"
)

func main() {
  // Echo instance
  e := echo.New()
  e.Debug = true

  // Routes
  e.GET("/", hello)

  // Start server
  e.Logger.Fatal(e.Start(":9999"))
}

// Handler
func hello(c echo.Context) error {
  myError := make(map[string]string)
  myError["error"] = "Bad thing happened"
  myError["reason"] = "no one knows why"
  return echo.NewHTTPError(500, myError)
}
```

In the above code, if e.Debug is set to False, then curl against this endpoint produces:

`{"error":"Bad thing happened","reason":"no one knows why"}`

Which seems to be the expected result.  But when debug=True, it produces:

`"code=500, message=map[error:Bad thing happened reason:no one knows why], internal=\u003cnil\u003e"`

Which seems like an unexpected result-- the presence of Debug is changing the error semantics of API.  This means that the Debug server can't be used with clients which expect to interpret specific fields from API errors.

### Version/commit

4.1.13
### Issue Description
The commit to allow setting the logger on the context https://github.com/labstack/echo/commit/5c7c87d09e23a8943f71f3057030919fb28f1349 is a breaking change for anyone implementing the context interface

Not a huge issue to deal with in my case, but something to think about when exposing public interfaces, any change to them becomes a breaking change for others implementing them.

### Checklist

- [x] Dependencies installed
- [x] No typos
- [x] Searched existing issues and docs

### Expected behavior
interfaces to not change without a major version bump

### Actual behavior
interface changed in a patch version bump

I'm trying to compile the code samples, for example this one: 
https://echo.labstack.com/middleware/prometheus

But it seems the documentation (https://echo.labstack.com/guide/installation) only refers to v3.

How can I compile the sample and use v4?

Thanks in advance