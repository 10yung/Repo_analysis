When WebSocket connection is established to Spring Boot 2 application, org.atmosphere.container.JSR356Endpoint does NOT properly handle request cookies.
As a result AtmosphereRequest does not contain cookies at all although cookies are available in the request header...

It looks as if the problem is at org/atmosphere/container/JSR356Endpoint.java:218:
`            List<String> cookieHeaders = handshakeHeaders.get("Cookie");`

Correct header name is "cookie" (no capital letters).

Please see #2395
Dear atmosphere team

I have been trying to implement Stomp with spring Boot . ( base on springboot example and stomp example)

It thrown message:

`
2020-01-16 14:24:56.385  WARN 2014 --- [io-8080-exec-10] o.a.stomp.handler.HandlerHelper          : No handler found for destination /destination-2

 java.lang.IllegalArgumentException: null

at org.atmosphere.stomp.handler.HandlerHelper.callHandler(HandlerHelper.java:115) [atmosphere-stomp-0.4.jar:na]
	at 

org.atmosphere.stomp.interceptor.SubscribeInterceptor.inspect(SubscribeInterceptor.java:54) [atmosphere-stomp-0.4.jar:na]

`

This is my SpringApplication

`
@SpringBootApplication
public class AtmosphereApplication {


	@Bean
	public ServletRegistrationBean atmosphereServlet() {
		// Dispatcher servlet is mapped to '/home' to allow the AtmosphereServlet
		// to be mapped to '/chat'
		ServletRegistrationBean registration = new ServletRegistrationBean(
				new AtmosphereServlet(), "/stomp");
		registration.addInitParameter("org.atmosphere.cpr.packages", "org.atmosphere");

		registration.setLoadOnStartup(1);
		// Need to occur before the EmbeddedAtmosphereInitializer
		//registration.setOrder(Ordered.HIGHEST_PRECEDENCE);
		return registration;
	}



	public static void main(String[] args) throws Exception {
		ConfigurableApplicationContext ap = SpringApplication.run(AtmosphereApplication.class, args);
	}
}

`

please help me,

regards
Our project use atmosphere.js , now I could get the response code is 200 from the "onClose" function.
Request.onClose(Response) {}

how to get the specified close code from the onClose function, such as 1000 or 1001. Because I need to recoginze whether the browser close the websocket or the server side close the websocket.
Thanks much.

```js
case 1000:
reason = "Normal closure; the connection successfully completed whatever purpose for which it was created.";
break;
case 1001:
reason = "The endpoint is going away, either because of a server failure or because the "
+ "browser is navigating away from the page that opened the connection.";
break;
case 1002:
reason = "The endpoint is terminating the connection due to a protocol error.";
break;
```
I am attempting to add a heartbeat listener to every new `AtmosphereResource` created in my application, and running into trouble. I have a class that implements `AtmosphereHandler` annotated with `AtmosphereHandlerService`, and in the `onRequest` method, I've added several event listeners to the resource. However, when the heartbeat triggers, it logs the message,
`TRACE o.a.cpr.AtmosphereResourceImpl - No listener with <<uuid>>`. This uuid matches the one logged in `onRequest`. I inspected this with the debugger, and despite having the same uuid, the instance of `AtmosphereResourceImpl` that my `onRequest` method is called with is different from the one that is getting the heartbeat event, and has none of the listeners I added in `onRequest`. However, my `onRequest` method also adds a disconnect listener, and that listener *does* work correctly.

I would like very much to be told that I'm just using the library wrong. I'm using atmosphere-runtime 2.5.12 from maven. The app is a dropwizard web application.
Deployment: Atmosphere 2.5.4 on Tomcat 8.0.49 server. After a server disconnect, Atmosphere degrades to long-polling (from websocket), but unable to POST messages, but GET (i.e., receives new messages) works fine.

```1312272 [http-nio-8080-exec-1] WARN org.atmosphere.config.managed.ManagedAtmosphereHandler - AtmosphereRequest{ method=POST contextPath=/HOME servletPath=/async pathInfo=/message requestURI=/HOME/async/message requestURL=http://xxx.xxx.xxx.xxx:8080/HOME/async/message AtmosphereResource UUID=9b398ce3-ab59-48b0-998f-30fa9d26d866 destroyable=true} received an empty body```

The browser log shows Content-Length: 0 , but the payload is definitely not zero-length: { type: "chat", message: "hello" } . Interestingly, the Request URL is:

```https://xxx.xxx.xxx.xxx/HOME/fallback/message?X-Atmosphere-tracking-id=9b398ce3-ab59-48b0-998f-30fa9d26d866&X-Atmosphere-Framework=2.3.8-javascript&X-Atmosphere-Transport=polling&X-Atmosphere-TrackMessageSize=true&Content-Type=application%2Fjson&_=1574870316069```

We have Tomcat and Apache linked in a reverse proxy setup. The web.xml is attached. Any help appreciated!


```<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:web="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
         id="HOME" version="3.0">
   
        <session-config>
        <session-timeout>5</session-timeout>
    </session-config>    
  
  <display-name>HOME</display-name>
  
  <welcome-file-list>
    <welcome-file>index.jsp</welcome-file>
  </welcome-file-list>
  
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  
  <listener>
    <listener-class>org.springframework.security.web.session.HttpSessionEventPublisher</listener-class>
  </listener>
  
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext-security.xml</param-value>
  </context-param>
  
  <listener>
    <listener-class>org.atmosphere.cpr.SessionSupport</listener-class>
  </listener>
  
  <servlet>
    <description>AtmosphereServlet</description>
    <servlet-name>AtmosphereServlet</servlet-name>
    <servlet-class>org.atmosphere.cpr.AtmosphereServlet</servlet-class>
    
    <init-param>
      <param-name>org.atmosphere.cpr.packages</param-name>
      <param-value>xxx.xxx.websocket</param-value>
    </init-param>
    
    <init-param>
      <param-name>org.atmosphere.cpr.AtmosphereInterceptor</param-name>
      <param-value>org.atmosphere.client.TrackMessageSizeInterceptor</param-value>
    </init-param>
    
    <init-param>
      <param-name>org.atmosphere.interceptor.HeartbeatInterceptor.heartbeatFrequencyInSeconds</param-name>
      <param-value>10</param-value>
    </init-param>
    
    <init-param>
      <param-name>org.atmosphere.interceptor.HeartbeatInterceptor.clientHeartbeatFrequencyInSeconds</param-name>
      <param-value>15</param-value>
    </init-param>
    
    <init-param>
      <param-name>org.atmosphere.cpr.removeSessionTimeout</param-name>
      <param-value>true</param-value>
    </init-param>
 
    <async-supported>true</async-supported>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>AtmosphereServlet</servlet-name>
    <url-pattern>/async/*</url-pattern> 
  </servlet-mapping>
  
  <filter>
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    <async-supported>true</async-supported>
  </filter>
  
  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>ASYNC</dispatcher>
  </filter-mapping>
    
  <servlet>
    <servlet-name>RestletServlet</servlet-name>
    <servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
  </servlet>
  
  <servlet-mapping>
    <servlet-name>RestletServlet</servlet-name>
    <url-pattern>/api/*</url-pattern>
  </servlet-mapping>
  
  <context-param>
    <param-name>org.restlet.application</param-name>
    <param-value>xxx.xxx.DataServiceApplication</param-value>
  </context-param>
  
</web-app>```
I've analysed your codebase and noticed that `org.atmosphere.util.uri.UriComponent` is not fully tested.
I've written some tests for the methods in this class with the help of [Diffblue Cover](https://www.diffblue.com/opensource).

Hopefully, these tests will help you detect any regressions caused by future code changes. If you would find it useful to have additional tests written for this repository, I would be more than happy to look at other classes that you consider important in a subsequent PR.
For audit reasons I need to know the IP address of the invoking party of our web socket services. According to a post from a couple of years ago, you can get the underlying request through atmResource.getRequest() and use getRemoteAddr() from there. However, running behind Wildfly 14 and using web sockets I always get back "0.0.0.0". There was a similar issue in request #757 behind Tomcat, but that one is also years old.

In a rest endpoint in the same WAR I can successfully get the remote IP address.

Any idea?

Thanks,
Ron
Atmosphere :2.4.32
Stacktrace:
```java
[ERROR] [pool-3-thread-52] [org.atmosphere.cpr.AsynchronousProcessor] Interceptor Atmosphere LifeCycle crashed. Processing will continue with other interceptor.
java.lang.NullPointerException: null
	at org.atmosphere.cpr.AtmosphereRequestImpl.getSession(AtmosphereRequestImpl.java:688) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.SessionTimeoutSupport.restoreTimeout(SessionTimeoutSupport.java:69) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereResourceImpl.cancel(AtmosphereResourceImpl.java:826) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereResourceImpl.dirtyClose(AtmosphereResourceImpl.java:919) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.DefaultBroadcaster.addAtmosphereResource(DefaultBroadcaster.java:1361) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereResourceImpl.suspend(AtmosphereResourceImpl.java:410) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.interceptor.AtmosphereResourceLifecycleInterceptor.postInspect(AtmosphereResourceLifecycleInterceptor.java:161) ~[atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AsynchronousProcessor.postInterceptors(AsynchronousProcessor.java:381) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AsynchronousProcessor.action(AsynchronousProcessor.java:232) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AsynchronousProcessor.suspended(AsynchronousProcessor.java:114) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.container.Servlet30CometSupport.service(Servlet30CometSupport.java:67) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.container.JettyServlet30AsyncSupportWithWebSocket.service(JettyServlet30AsyncSupportWithWebSocket.java:53) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereFramework.doCometSupport(AtmosphereFramework.java:2300) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereServlet.doPost(AtmosphereServlet.java:191) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at org.atmosphere.cpr.AtmosphereServlet.doGet(AtmosphereServlet.java:177) [atmosphere-runtime-2.4.32.jar:2.4.32]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:735) [jetty-server-8.1.8.jar:?]
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:848) [jetty-server-8.1.8.jar:?]
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669) [jetty-server-8.1.8.jar:?]
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1336) [jetty-server-8.1.8.jar:?]
```
Dear Team,
We are using Atmospehere framework in our product for Async Push Notifications using Websockets/Long-polling. 
In our Product, we support multiple application sessions in a single browser session using the concept of path based cookies.  
i.e if we hit (From same browser different tabs)  http://host:port/app/abc , http://host:port/abc/xyz we will have separate application sessions but single JSESSIONID as the JSESSIONID is container managed.
In this case both the sessions uses different Websockets and same Jsession ID. And our notifications/atmospehere broadcasters are tied with application session cookie.

We noticed that Atmosphere internals uses HttpSession, which is tied with JSESSIONID. 
Could you please let us know what do we store in HttpSession and what scenarios will fail if we use shared JSESSION accross multiple application sessions?

Extra memory allocation just to check if response contains only spaces.
It leads to allocation extra space in heap and more often `GC:Allocation failure` under heavy load

TrackMessageSizeInterceptor#Interceptor (line 149)

```
    String s = cb.toString(); // <-- will create extra char[] for payload

    if (s.trim().length() == 0) {
        return responseDraft;
    }
```
