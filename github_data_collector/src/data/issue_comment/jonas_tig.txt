```
*  Improve graph rendering in the default graphic mode
   
   Using the same symbol for ordinary and boundary commits is misleading.
   Keep 'o' for boundary commits only, it's similar to other graphic modes.
   
   Use ACS_BULLET for ordinary commits, ACS_DIAMOND for merges and '@' for
   the initial commit, which is similar to the symbols used in the UTF-8
   graphic mode.
   
   Update tests for the new graph symbols. ACS_BULLET corresponds to '~' in
   the alternative charset.
```
Graph v1 uses the initial commit symbol for all branchpoints. Graph v2 uses that symbol only for the first commit in the repository. That's inconsistent. I believe the graph v2 behavior is more reasonable and graph v1 should be changed to match.
It's also possible to have a separate boolean flag for branchpoints, but I don't feel it would be a significant enhancement.

Graph v1:
![screenshot-v1](https://user-images.githubusercontent.com/1317472/72581117-1280cb80-3893-11ea-85ac-1f1a6a3a071f.png)

Graph v2:
![screenshot-v2](https://user-images.githubusercontent.com/1317472/72581118-16145280-3893-11ea-8cab-b46ec142901b.png)
   Putty doesn't show VT100 line drawing characters in the UTF-8 mode by
   default. Putty 0.70 and older doesn't even have that option.
   
   For the vertical display separator, use '|' as background, then output
   the vertical line character on every line.
   
   For the line number separator, use draw_graphic() in the default mode
   only. Use draw_chars() in the ASCII and UTF-8 modes.
   
   Add a test for vertical lines. The display separator is always captured
   as a line of '|' characters. The line number separators are captured
   correctly. 'x' corresponds to ACS_VLINE.

   Closes #981

While the documentation from https://github.com/jonas/tig/blob/master/tigrc#L144-L158 is extremely useful it appears to document one use case which i find likely to be desired:

Run command in background and display its output only if it failed (non zero return code).
When run inside Putty, tig renders the vertical window separator in putty using `x` characters. However, the version graph uses correct vertical lines.

Observed with different fonts: Consolas, DejaVu Sans Mono, Fira Mono, Fixedsys, Inconsolata, Lucida Console, Lucida Sans Typewriter. Observed with putty 0.70 and 0.73. Tig 2.4.1 and the current git versions are affected:

```
$ /usr/bin/tig --version
tig version 2.4.1
ncursesw version 5.9.20140118
readline version 6.3
$ src/tig --version
tig version 2.5.0-2-gca0809d
ncursesw version 5.9.20140118
readline version 6.3
```

The system running Putty is Windows 10, the system running tig is Ubuntu 14.04.

The described behavior corresponds to `diff-view-line-graphics = utf-8`. If it's `ascii`, the vertical bar is rendered using `|`, but the graph becomes less pretty. For `default`, `x` is used for the vertical bar, and the graph looks even worse than in the `ascii` mode. The graph is rendered using letters that don't even look like lines.

```
 o make-builtin-config:
 Mqk Merge pull request
 x o Add default bindin
 x o Add option to star
 oqj Introduce reflog v
 o Fix ls-tree tree-ish
```

I suspect that the vertical window separator is rendered using the `default` mode even though the `utf-8` mode is in effect. Apparently, putty has an issue with `diff-view-line-graphics = default`.

I would consider this issue resolved if the window separator renders in the `utf-8` mode correctly.

![putty-tig](https://user-images.githubusercontent.com/1317472/72017008-ad393480-3219-11ea-9974-07d5342be6ff.png)
Not sure if this is an intended feature or a bug...

The behaviour of `tig show`, when given a partial SHA on the command line, appears to be:

- if the SHA is long enough to be unique, then operate on that SHA
- if there is no match for the given (partial) sha, then operate on `HEAD`
- if there are multiple matches, then operate on `HEAD`

While the first case is correct, the latter two cases are unexpected. The behaviour differs from plain `git show` where the latter two cases result in error message being displayed. Showing HEAD commit when it was not requested seems odd, and potentially very confusing to user.

I see this with both tig 2.3 (Ubuntu 18.04) and 2.5 (Fedora 31).
All,

It's possible tig does this and I don't know the right keystrokes. But, maybe not and I'd like to make a feature request. Namely, I was wondering if `tig blame` can colorize not just the commit hash on the far left, but also somehow "shade" the code on the right so that I can see "blocks" of commits per person. So it's easy to say "Oh, this chunk came from Alice, this from Bob". Kind of like how vc-annotate or tkcvs-blame work?
`git blame` supports `-L` option with which we can supply a range of lines to blame, and git outputs the blame for **only** those lines. This comes in handy when invoking from within an editor, say Vim. For example, to view the blame from lines 2000 to 2020, I could say `:!git blame -L2000,2020 -- %`.

Two issues with `tig`:

* `tig` does accept the same option. However, `tig` outputs **all** lines in the file. This means, for the example above, even though I'm interested in the 20 lines towards the bottom, `tig` shows the whole file, and I've to scroll 2000 lines for the view I'm interested in. Any chance this can supported?
* To `tig`, I've to specify it as `-L2000,2020`; it seems to be confused if I say `-L 2000,2020`, with white space after `-L`.
The spacing between the commit/author and graph is off when there are multiple authors with a significant difference in the length of their names. e.g.

Below is an anonymized example from my own repository, The first author had 10 characters in their name, the second has 17. 

```
2019-11-27 12:49 -0500 ABCDEFGHIJ                        M─┐ [live] {origin/live} Merge branch 'stable' into live
2019-11-27 14:59 +0100 ABCDEFGHIJKLMNOPQ                      │ M─┐ {origin/stable} Commit message
```
First of all, thanks for Tig.

I think the two features in the title would make the refs view much friendlier to use.
Ordering I think is a must-have, as it is most likely that less traversing will be needed to access the desired branch.
Showing unpulled/unpushed commits would remove extra steps to actively fetch and compare all recent branches for anything left out.