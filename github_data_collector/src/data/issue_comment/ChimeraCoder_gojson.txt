When the JSON is of format [interface,interface,interface] gojson has trouble printing out the substructs.
Protobuf is a general tool for generating and management cross-language structures.
A tool to generate proto from json is useful.

[**Here**](https://gist.github.com/wweir/9113a689743efdc996bc086c22b89f4f) is such a tool written by me.

Maybe you can reimplement such a tool with golang or mention it in the readme.
Every exported function in a program should have a doc comment. The first sentence should be a summary that starts with the name being declared.
From [effective go](https://golang.org/doc/effective_go.html#commentary).


PR generated by [CodeLingo](https://codelingo.io). [Install here](https://github.com/apps/codelingo) to drive Continuous Higher Standards.

Re-opening pr #71 with a new branch.

quoted description from original PR:

As a proposal to #14, I think this will generate better struct names while avoiding the issue of different structs with the same name overriding each other.

Let me know what you think :)
The newest released was released in last year, but the master code update in few months.

If we use go1.11, we can only use v1.0.0 version of code.

For example:

version: v1.0.1
```
func Generate(input io.Reader, parser Parser, structName, pkgName string, tags []string, subStruct bool) ([]byte, error) {
```

version: master
```
func Generate(input io.Reader, parser Parser, structName, pkgName string, tags []string, subStruct bool, convertFloats bool) ([]byte, error) {
```

Master version add parameter `convertFloats`.
Nice to see that I'm not the only one who wants to generate code from JSON.
However, plain JSON/YAML is the only notation that can be used as a source for code generation.

I'd like to propose OpenAPI V3 generation, assume you have the following JSON file:
```json
{
  "type": "object",
  "properties": {
    "error": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "fields": {
          "type": "string"
        }
      }
    }
  }
}
```
this JSON file may end up in a go struct like:
```go
type Error struct {
    Message string `json:"message"`
    Fields string `json:"fields"`
}

type SomeStruct struct {
    Error Error `json:"error"`
}

```

thoughts?
I'm trying to use gojson to generate structs for an array of items, which may or may not contain (disjunct) keys with different sub-objects. Example (let's call this `test.json`):

```json
[{"foo": {"bar": 2, "baz": 4, "xx": {"foo": "bar"}}}, 
 {"foo": {"bar": 2, "yy": {"bar": "baz"}}}]
```

In my original input these are one object per line, but as gojson can not handle this I have converted the input to an array instead. While this format can be well processed using the default settings:

```
$ cat test.json | gojson
package main

type Foo []struct {
	Foo struct {
		Bar int64 `json:"bar"`
		Baz int64 `json:"baz"`
		Xx  struct {
			Foo string `json:"foo"`
		} `json:"xx"`
		Yy struct {
			Bar string `json:"bar"`
		} `json:"yy"`
	} `json:"foo"`
}
```
there's a problem when trying to use `-subStruct`:
```
$ cat test.json | gojson -subStruct
package main

type Foo []struct {
	Foo Foo_sub3 `json:"foo"`
}
```
The substructs just are not printed. I would have expected an output similar to what I would get from a non-array input:
```
$ cat test2.json
{"foo": {"bar": 2, "baz": 4, "xx": {"foo": "bar"}}}
$ cat test2.json | gojson -subStruct
package main

type Foo struct {
	Foo Foo_sub2 `json:"foo"`
}

type Foo_sub2 struct {
	Bar int64    `json:"bar"`
	Baz int64    `json:"baz"`
	Xx  Foo_sub1 `json:"xx"`
}

type Foo_sub1 struct {
	Foo string `json:"foo"`
}
```
where the referenced substructs are also printed in the actual output.
Add two CLI flags to enhance `gojson`
- `nosort`
   don't sort fields of generated structs (default false)
   see issue #60 
- `omitempty`
  add `omitempty` into field tag (default false)

As title, seems like it'll only create a Ref field currently.
A new method has been created that allows you to flexibly manage the generation of structures. 
Additional options such as: "omitempty" for json tags and package name is in the Options structure. 

Two problems are fixed: the presence of empty apostrophes for tags if there are no tags and the possibility to substitute an empty package name is eliminated, if the name is empty, then the package will not be displayed.
