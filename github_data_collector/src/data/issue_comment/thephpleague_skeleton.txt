
GitHub now allows a well-known folder for these.
All the packages use docs. For example https://github.com/thephpleague/booboo/tree/gh-pages

So it should be part of the skeleton.
Note that I am not 100% that codesniffer fully supports PSR-12. There is an ongoing discussion here:
https://github.com/squizlabs/PHP_CodeSniffer/issues/750

And also I am not sure about styleci.


## Detailed description and context

The `package_vendor` variable is currently used for both the Packagist vendor name and the PSR vendor name.

I.e. I am using `sander-van-hooft` as my Packagist vendor name, and `SanderVanHooft` as my PSR vendor name, `sandervanhooft` as my github username.

(Yes, that's inconvenient, but it's too late to change now. )

The `prefill.php` and the markdown document do not make a distinction between these variables, so I end up editing them manually.

How can it benefit other users?

## Possible implementation

1. Use separate variables in the markdown files for the vendor: `github_username`, `packagist_vendor`, `psr_vendor`.
2. Find a way to conveniently integrate this into the `prefill.php` file.
<!--- Provide a general summary of your changes in the Title above -->

## Description

Allows `composer check-style` to be ran on `pre-commit` and `composer test` on `pre-push`.

## Motivation and context

For me, it is about bringing all engineers inline. At the end of the day we are only human and automation on things like this allows to concentrate on the problem to solve and reduce potential stress.

## How has this been tested?

Ran `./vendor/bin/captinhook install` and made breaking changes on code and tests to check the errors stop committing and pushing to remote.

## Types of changes

What types of changes does your code introduce? Put an `x` in all the boxes that apply:
- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to change)

## Checklist:

Go over all the following points, and put an `x` in all the boxes that apply.

Please, please, please, don't send your pull request until all of the boxes are ticked. Once your pull request is created, it will trigger a build on our [continuous integration](http://www.phptherightway.com/#continuous-integration) server to make sure your [tests and code style pass](https://help.github.com/articles/about-required-status-checks/).

- [x] I have read the **[CONTRIBUTING](CONTRIBUTING.md)** document.
- [x] My pull request addresses exactly one patch/feature.
- [x] I have created a branch for this patch/feature.
- [x] Each individual commit in the pull request is meaningful.
- [x] I have added tests to cover my changes.
- [x] If my change requires a change to the documentation, I have updated it accordingly.

If you're unsure about any of these, don't hesitate to ask. We're here to help!

As outlined [here](http://ben.balter.com/2015/06/03/copyright-notices-for-websites-and-open-source-projects/#the-copyright-holder), the copyright notice should probably be updated to include contributors.

> But in the case of open source, there will likely be multiple contributors, each retaining their own copyright. You might write something like Copyright [year] Alison, Ben, and Charlie, but as the number of developers grow, things will quickly get out of hand. So lets simplify things and just write, Copyright [year] the [project] contributors.
> 
> if you want to be super technical, there’s no reason you couldn’t say [project founder] and the [project name] contributors. In either case, just putting the project founder or maintainer is strictly speaking wrong, assuming others have contributed.

How about updating `LICENSE.MD` to say something like:

```
Copyright (c) 2016 :author_name <:author_email> and the :package_name contributors
```

Since commands `diff` and `patch` do not exist on Windows, `composer format` fails.

GitHub now exposes release information via the `site.github.releases` Jekyll namespace.  Is this something we might want to display on our sites?

https://github.com/blog/1996-releases-metadata-for-github-pages
