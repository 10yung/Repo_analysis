I tried to run tectonic on this file:
```tex
\documentclass{article}

\begin{document}
\end{document}
```
and I got this error:

```
note: this is a BETA release; ask questions and report bugs at https://tectonic.newton.cx/
Running TeX ...
Rerunning TeX because "example.aux" changed ...
Running xdvipdfmx ...
error: cannot open "example.xdv"
```

I thought there was an issue, and it took me a while to realize I was getting that error only because there were no pages of output.
Props to my colleague @jjpilat for finding this.

When generating the following document using `tectonic -C`, v0.1.12 prints 1969 while v0.1.11 prints 2020:
```tex
\documentclass{article}
\begin{document}

\huge\bf{®\the\year}

\end{document}
```
I would expect the same output with either version.
Anyone know where I can start looking for what changed? I imagine this is one of the embedded dependencies, not necessarily the Rust portions of the codebase.
This is motivated by the fact I get output like the following in the `LaTeX Compiler` log window in VSCode:

```
Writing /Users/alex/Documents/A filename with spaces.tex (123 bytes)
```

and only `/Users/alex/Documents/A` gets highlighted as a filename. In any case, the general practice is to enclose filenames in console output as `` `/a/b/c` ``, I believe. This would solve the issue.

I don't know if it covers all cases, but the `note_highlighted` fn (second parameter) seems to be responsible for this sort of printing. The enclosing of filenames in backticks is probably best done at call-site however (using a helper function?).

While I'm writing this, a bonus would be comma-separating the number of bytes, e.g., `123,456,789 bytes` -- or better yet, `123 MB` (also `kB` and `B` of course). All for readability of course, since this is nitpicking!
Tectonic used to use hyper, but in https://github.com/tectonic-typesetting/tectonic/pull/330 it was replaced by reqwest. This PR allow using curl as an alternative to reqwest.

One reason to use curl instead of reqwest is that the number of dependencies is smaller (117 vs 239), reducing the compilation time (9min vs 15min of cpu itme) and size of the binary (3,7MB vs 7,2MB).

Another reason is that curl have builtin support for proxy (although I haven't test it) which would solves https://github.com/tectonic-typesetting/tectonic/issues/59.

The curl crate will build libcurl if one is not installed in the build system and static link it,  so this does not increase the native dependencies.

This also adds a mock download backend allowing to build tectonic without download support, which can be interest to assert that tectonic cannot make network connections.

This is mostly a note-to-self. Noticed in the process of putting out 0.1.12:

- The AppImage script deletes and overwrites a GitHub Release for the release tag. We only want this behavior in the continuous deployment scenario.
- Useful artifacts like static binaries aren't added to the GitHub Release when a release is built, or stored anywhere.
- This is also true for the CD scenario.
- I think I can fix the CD scenario by having the "master push" phase delete the existing GitHub "continuous" release and force-pushing the `continuous` tag. Then the different Travis invocations can try to create the new release (there must be a way to succeed-if-already-exists) and upload their artifacts. That way real releases and the CD scenario can use the same nearly the same procedures to create and distribute artifacts.
- It would be nice to `cargo publish` as part of a release tag, but we need a way to do a manual test-run to make sure that it'll work. `--dry-run`?

I think I should grab the `upload.sh` script and customize it since as I recall it's not doing any super deep magic.

I *think* we can use GitHub Releases to manage our artifacts with the above changes, but it would be cool to be able to store artifacts for pull request builds too. Azure?
As revealed in crlf0710/tectonic#195. Potentially fixed with an analogy to crlf0710/tectonic#227? Minimal reproducer in the oxidized version seems to be:

```tex
\documentclass{article}
\usepackage{amsmath}
\usepackage{amssymb}

\begin{document}
$\widetilde{\mathbb{P}_{x}}$
\end{document}
```

Would be good to devise a case in the test suite for this.

CC @crlf0710 @burrbull @Mrmaxmeier 
Hello,

I have the following installation:

* macOS 10.15.1 Catalina
* Tectonic 0.1.11 (via MacPorts)

When I run `tectonic`, I get the following output:

```
$ tectonic test.tex
note: this is a BETA release; ask questions and report bugs at https://tectonic.newton.cx/
Running TeX ...
Rerunning TeX because "test.aux" changed ...
2019-11-08 09:54:21.406 tectonic[1357:32811] *** -[NSAutoreleasePool release]: This pool has already been released, do not drain it (double release).
Running xdvipdfmx ...
Writing test.pdf (2616 bytes)
Skipped writing 1 intermediate files (use --keep-intermediates to keep them)
```

I am able this reproduce it with this simple document:

```
\documentclass{article}
\begin{document}
Test
\end{document}
```

There are existing issues (#47 and #101) about this message which were closed on 12 August 2019. According to https://github.com/tectonic-typesetting/tectonic/pull/101#issuecomment-520293455, @rekka says that the issue was fixed with 0e78c9564be430ec836c6168548540173d833b6a but the issue doesn't appear to be resolved. This is my first time using Tectonic and I've only used it with macOS Catalina, so I don't know if this issue is back because of Catalina or not.

Running `tectonic -c minimal` doesn't hide the message either:

```
$ tectonic -c minimal test.tex
2019-11-08 10:06:22.123 tectonic[1440:40848] *** -[NSAutoreleasePool release]: This pool has already been released, do not drain it (double release).
```

This isn't a big problem because the pdfs it generates are still fine. It's just an annoying message to keep seeing though.
This switches to plain output if stdout is not a tty.
In forum the following is suggested:
> Copy the package files into the directory containing your document
>
> This is the simplest answer, in a certain sense. If a certain file is missing from Tectonic’s bundle, you can just put a copy of it next to your main document file. If the package you need involves multiple support files, it is generally fine to just put them all next to your input file in the same way. This starts getting messy at a certain point, but it’s a simple and effective solution in a lot of cases.

However, the file provided by CTAN are in the `.dtx` and `.ins` format, which can be extracted by running latex. Running tectonic on them does not seem to work, making it impossible to get the `.sty` files.
Currently, installation on Windows is completely undocumented. It is necessary to study the Appveyor scripts:
```yaml
  - if "%target_env%" == "msvc" %USERPROFILE%\vcpkg\vcpkg install --triplet x64-windows-static fontconfig freetype harfbuzz[icu,graphite2]
  - if "%target_env%" == "msvc" set VCPKG_ROOT=%USERPROFILE%\vcpkg
  - if "%target_env%" == "msvc" set TECTONIC_DEP_BACKEND=vcpkg
  - if "%target_env%" == "msvc" set RUSTFLAGS=-Ctarget-feature=+crt-static
```
In particular, I think the following should be documented:
* How the `TECTONIC_DEP_BACKEND` environment variable works.
* On Windows, `vcpkg` should be used to install `fontconfig freetype harfbuzz[icu,graphite2]`.
* The environment variable `VCPKG_ROOT` has to be set.
* `RUSTFLAGS=-Ctarget-feature=+crt-static` has to be set.