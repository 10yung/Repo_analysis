Hello, I'm having issues trying to build on macOS.

I use the latest version of bash (not the outdated version macOS comes with, so it should support bash plugins)

```
$ bash --version
GNU bash, version 5.0.11(1)-release (x86_64-apple-darwin18.6.0)
```

Running `./configure` gives me

```
configure: WARNING: elfutils is not available, struct support will not be available
[...]
checking whether bash symbols are exported... no
configure: error: in `~/code/ctypes.sh':
configure: error: unable to build a test extension
See `config.log' for more details
```

In `config.log` I see

```
configure:13864: checking whether bash symbols are exported
configure:13891: gcc -o conftest -g -O2  -I./include  -shared -fPIC conftest.c -lelf  >&5
Undefined symbols for architecture x86_64:
  "_num_shell_builtins", referenced from:
      _conftest_function in conftest-efa94e.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
configure:13891: $? = 1
configure: failed program was:
| /* confdefs.h */
[...]
|     #include "builtins.h"
| 
|     int conftest_function(WORD_LIST *list)
|     {
|         exit(num_shell_builtins
|                 ? EXIT_SUCCESS
|                 : EXIT_FAILURE);
|     }
| 
|     struct builtin conftest_struct = {
|         .name       = "conftest",
|         .function   = conftest_function,
|         .flags      = BUILTIN_ENABLED,
|         .long_doc   = NULL,
|         .short_doc  = NULL,
|         .handle     = NULL,
|     };
[...]
configure:13911: result: no
configure:13913: error: in `~/code/ctypes.sh':
configure:13915: error: unable to build a test extension
See `config.log' for more details
```

I don't know if this has something to do with `include/builtins.h` since that what defines the `extern` of `num_shell_builtins`. The only other thing I can think of is not having `struct` support since I don't have `elfutils` installed (I don't think it builds for macOS), and the code it tries to compile has a `struct`. I might be barking up the wrong tree though; I don't know how to resolve this myself. 

Thank you for your time.
I'd love to use ctypes.sh in my embedded platforms, but they all use Busybox and ash (Almquist Shell) due to size constraints. Have you considered supporting Busybox's ash? 

I think it would be great to be able to have the ctypes.sh capability on the embedded platform to marry shell scripting and the compiled code ... but without the bloat of full bash.

Regardless of what you decide, I'll probably look into it downstream.
Here's what I needed to install before ctypes.sh would compile and pass all test in /tests folder:

```
# mandatory to built ctypes.sh without Structs:
sudo apt install autoconf libffi-dev libltdl-dev automake libtool

```

above are mandatory for ./autogen.sh to build ./configure

```
# mandatory to build ctypes.sh with Structs:
sudo apt install libdw-dev libelf-dev

```

The build script states that the failure is a lack of elfutils when actually it's a lack of libdwfl.h

The error would be much more helpful if it reported what the actual failure was instead of reporting the name of a package which it mistakenly assumes will bring in what's missing.

I don't understand why this doesn't work:

```
$ dlopen libcrypto.so
0x26ae7d0
$ sizeof -am ctx SHA_CTX
bash: sizeof: warning: SHA_CTX could not be found; check `help struct` for more
```

(Note that I need -a because it's a typedef, not a struct)

But if I do this:

```
$ cat test.c 
#include <openssl/sha.h>
SHA_CTX x;
$ gcc -o test.so test.c -ggdb3 -shared -fPIC
$ dlopen ./test.so 
0x27ed980
$ sizeof -am ctx SHA_CTX
96
```

I suspect some dwarf cu import logic that I haven't seen before is in there, I'll have to go through the dwarfdump output and track it down.

README reads:

> You can overload the prefix path by defining the PREFIX environment variable before installing.
> 
> $ PREFIX=$HOME make install

However, with the advent of autotools-based build system, this no longer works.

I didn't have time to build some data file that automatically includes DWARF data for common UNIX types for 1.1, let's do that for 1.2

It would be nice if there was a way to automatically import simple macros and enum values like `SOCK_RAW`, `EXIT_SUCCESS` and so on.

- Also need to make sure tests work on 32bit.

Great tool. Would be nice to have also in zsh.

[The macro "AC_INIT"](https://www.gnu.org/savannah-checkouts/gnu/autoconf/manual/autoconf-2.69/html_node/Initializing-configure.html) supports that the needed version information is determined by specific macro calls before.
Would you like to [reuse anything from the current autoconf approach](http://git.savannah.gnu.org/gitweb/?p=autoconf.git;a=blob;f=configure.ac;h=e7029ebc87c5f3821b857f4028621bd34cd0b245;hb=57ec362325a9b58d719c834d06653cfa7e2aa894#l21) for [your build specification](https://github.com/taviso/ctypes.sh/blob/b38249e40cfbd13dfa9fd580ca2dabed02a38bca/configure.ac#L2)?
