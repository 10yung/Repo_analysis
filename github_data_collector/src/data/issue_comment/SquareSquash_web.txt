Open Source practice

`project.repo.object(revision)` throws when it can't find the commit (the commit happened after the last time the repo was fetched).

```
E, [2017-03-13T09:01:24.885656 #27338] ERROR -- : -- ERROR IN OccurrencesWorker 49810320 --
E, [2017-03-13T09:01:24.885739 #27338] ERROR -- : git cat-file "-t" "6e96b806e7ba214246c08bf2c32618af2b261df3"  2>&1:error: unable to find 6e96b806e7ba214246c08bf2c32618af2b261df3
fatal: git cat-file 6e96b806e7ba214246c08bf2c32618af2b261df3: bad file
E, [2017-03-13T09:01:24.886029 #27338] ERROR -- : /home/web/.rvm/gems/ruby-2.3.0@squash/bundler/gems/ruby-git-eeab421f5ca7/lib/git/lib.rb:724:in `command'
/home/web/.rvm/gems/ruby-2.3.0@squash/bundler/gems/ruby-git-eeab421f5ca7/lib/git/lib.rb:136:in `object_type'
/home/web/.rvm/gems/ruby-2.3.0@squash/bundler/gems/ruby-git-eeab421f5ca7/lib/git/object.rb:262:in `new'
/home/web/.rvm/gems/ruby-2.3.0@squash/bundler/gems/ruby-git-eeab421f5ca7/lib/git/base.rb:153:in `object'
/var/www/apps/squash_20170319/lib/blamer/recency.rb:61:in `resolve_revision'
/var/www/apps/squash_20170319/lib/workers/occurrences_worker.rb:189:in `set_deploy_and_commit'
/var/www/apps/squash_20170319/lib/workers/occurrences_worker.rb:77:in `perform'
/var/www/apps/squash_20170319/lib/workers/occurrences_worker.rb:45:in `perform'
/var/www/apps/squash_20170319/lib/background_runner/multithread.rb:31:in `block in run'
/var/www/apps/squash_20170319/lib/multithread.rb:64:in `spinoff'
/var/www/apps/squash_20170319/lib/background_runner/multithread.rb:31:in `run'
/var/www/apps/squash_20170319/lib/background_runner.rb:38:in `run'
/var/www/apps/squash_20170319/app/controllers/api/v1_controller.rb:63:in `notify'
```

The code seems to expect it to return nil, when in fact it raises an exception. The fix:
```
diff --git a/lib/blamer/recency.rb b/lib/blamer/recency.rb
index 23a211f..d5ef0e4 100644
--- a/lib/blamer/recency.rb
+++ b/lib/blamer/recency.rb
@@ -58,7 +58,12 @@ module Blamer
   class Recency < Base
 
     def self.resolve_revision(project, revision)
-      commit   = project.repo.object(revision)
+      begin
+        commit   = project.repo.object(revision)
+      rescue Git::GitExecuteError
+        # Try fetching
+        commit = nil
+      end
       if commit.nil?
         project.repo(&:fetch)
         commit = project.repo.object(revision)
```
```
git '--git-dir=/var/www/apps/squash_new/tmp/repos/9e3c81a890dc2672a028f90882720f25a92a7423.git' cat-file '-t' '1bb6d3d3e401638d133ebb79798729dfb3092bf8'  2>&1:fatal: Not a git repository: '/var/www/apps/squash_new/tmp/repos/9e3c81a890dc2672a028f90882720f25a92a7423.git'
```
The `git-dir` option is supposed to point to the `.git` directory.

```
diff --git a/app/models/project.rb b/app/models/project.rb
index 625f852..adf06f0 100644
--- a/app/models/project.rb
+++ b/app/models/project.rb
@@ -196,7 +196,7 @@ class Project < ActiveRecord::Base
     repo_mutex.synchronize do
       @repo ||= begin
         exists = File.exist?(repo_path) || clone_repo
-        exists ? Git.bare(repo_path) : nil
+        exists ? Git.bare("#{repo_path}/.git") : nil
       end
     end
```
```
ActionView::Template::Error (wrong number of arguments (given 4, expected 5)):
    62:       def signup_form
    63:         div(class: 'row') do
    64:           div(class: 'two columns') { text! '&nbsp;' }
    65:           form_for(@user || User.new, url: signup_url, html: {class: 'eight columns whitewashed'}) do |f|
    66:             h3 "Donâ€™t have an account yet?"
    67: 
    68:             input type: 'hidden', name: 'next', value: params[:next]
  app/views/sessions/new.html.rb:65:in `block in signup_form'
  app/views/sessions/new.html.rb:63:in `signup_form'
  app/views/sessions/new.html.rb:35:in `block (2 levels) in body_content'
  app/views/sessions/new.html.rb:32:in `block in body_content'
  app/views/layouts/application.html.rb:81:in `block (4 levels) in modal_section'
  app/views/layouts/application.html.rb:81:in `block (3 levels) in modal_section'
  app/views/layouts/application.html.rb:79:in `block (2 levels) in modal_section'
  app/views/layouts/application.html.rb:78:in `block in modal_section'
  app/views/layouts/application.html.rb:77:in `modal_section'
  app/views/sessions/new.html.rb:30:in `body_content'
  app/views/layouts/application.html.rb:161:in `block in body_portion'
  app/views/layouts/application.html.rb:148:in `body_portion'
  app/views/layouts/application.html.rb:27:in `block in content'
  app/views/layouts/application.html.rb:25:in `content'
  app/views/sessions/new.html.rb:1:in `_app_views_sessions_new_html_rb__159209451951245326_27606700'
  app/middleware/ping.rb:29:in `call'
```
How are duplicates supposed to work? Shouldn't a duplicate be resolved when its connected bug is resolved?
Currently when resolving a bug its duplicates still show up in the unresolved list.

I've had a couple errors come into Squash that it has failed halfway through creating (leaving my DB in a bad state). In tracing them back, what I _think_ happened is that `ivars` came in with a hash containing nil values, which causes the filtering method to fail.

I've fixed it here by simply recursing through hash structures, which seems like an elegant and safe way to make it happen.

I have tried using the deobfuscate tool in the java bundle to upload a source map and every time the servers log shows the same error message along the lines of: 
`ArgumentError: syntax error on line 4, col -1:`      children: !ruby/object:Set
        hash:
          &id1085 !ruby/object:Squash::Java::Package ?
            children: !ruby/object:Set
              hash:
                &id001 !ruby/object:Squash::Java::Package ?
                  children: !ruby/object:Set
                    hash: {}

```
              classes: !ruby/object:Set
                hash:
                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: AnimRes
                    obfuscation: AnimRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: AnimatorRes
                    obfuscation: AnimatorRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: AnyRes
                    obfuscation: AnyRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: ArrayRes
                    obfuscation: ArrayRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: AttrRes
                    obfuscation: AttrRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: BinderThread
                    obfuscation: BinderThread
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: BoolRes
                    obfuscation: BoolRes
                    parent: *id001
                  : true

                  !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash: {}

                    name: CallSuper
                    obfuscation: CallSuper
                    parent: *id001
                  : true

                  &id023 !ruby/object:Squash::Java::Class ?
                    classes: []

                    java_methods: !ruby/object:Set
                      hash:
                        !ruby/object:Squash::Java::Method ?
                          arguments: []

                          klass: *id023
                          name: suggest
                          obfuscation: suggest
                          return_type: !ruby/object:Squash::Java::Argument
                            dimensionality: 0
                            type: &id022 !ruby/object:Squash::Java::Class
                              classes: []

                              java_methods: !ruby/object:Set
                                hash: {}

                              name: Strin'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/syck-1.0.5/lib/syck.rb:145:in `load'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/syck-1.0.5/lib/syck.rb:145:in `load'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/safe_yaml-1.0.4/lib/safe_yaml.rb:15:in `load_with_options'
from /home/mvanhorn/squaresquash/app/models/obfuscation_map.rb:65:in `namespace'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activemodel-4.2.5.1/lib/active_model/dirty.rb:219:in `attribute_change'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activemodel-4.2.5.1/lib/active_model/dirty.rb:148:in `block in changes'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activemodel-4.2.5.1/lib/active_model/dirty.rb:148:in `map'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activemodel-4.2.5.1/lib/active_model/dirty.rb:148:in `changes'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/attribute_methods/dirty.rb:68:in `block in changes'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/attribute_methods/dirty.rb:180:in `cache_changed_attributes'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/attribute_methods/dirty.rb:67:in `changes'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activemodel-4.2.5.1/lib/active_model/dirty.rb:198:in `changes_applied'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/attribute_methods/dirty.rb:47:in `changes_applied'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/attribute_methods/dirty.rb:22:in `save'
from /home/mvanhorn/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-4.2.5.1/lib/active_record/transactions.rb:286:in `block (2 levels) in save'`
```

I also tried to directly load the source map via the rails console with the following

`environment = 'production'
build = '400023'
api_key = '155268d7-f737-4550-9552-a231aa82e9f6'
map = Squash::Java::RenameLog.new("../mapping.txt").parse
project = Project.find_by_api_key(api_key) or raise(API::UnknownAPIKeyError)
deploy = project.environments.with_name(environment).first!.
deploys.find_by_build!(build)
deploy.obfuscation_map.try! :destroy
deploy.create_obfuscation_map!(namespace: map)`

to no avail

How do I go about getting my android app's mapping.txt converted into a form that squash can use and loaded into the database so I can make full use of squash?

## Change source of gem

erector gem
old -  git://github.com/RISCfuture/erector.git
new - git://github.com:RISCfuture/erector.git
ruby-git
git
old - git://github.com/RISCfuture/ruby-git.git
new - git://github.com:RISCfuture/ruby-git.git

please add client for Laravel framework. It's very similar to the way Rails works.
