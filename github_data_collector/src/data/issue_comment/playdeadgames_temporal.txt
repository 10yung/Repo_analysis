There is a problem with motion gameObject when it has scale vector -1, -1, -1.
It seems that in such situation VelocityBufferTag doesn't work correctly (Mesh is blurred)
Does anyone know how to fix that issue?
Currently this tool does not support dynamic resolution. I've hacked it in (see attached file), but this is (very) probably not correctly. Thought I'd share it anyways, perhaps someone can fix it properly!

[TemporalReprojection.txt](https://github.com/playdeadgames/temporal/files/3594182/TemporalReprojection.txt)

I'm guessing this isn't on the table at all for the developers, but since they incredibly added single pass stereo support, I had to ask. :)
It's amazing that they added single pass VR support even though they didn't have to, but does anyone know how to mitigate the streaking which appears in VR?
Hi,

EDIT: On file VelocityBuffer.shader

While trying to understand the algorithm, I noticed on line 10 the multi_compile statement and the following defines: TILESIZE_10, TILESIZE_20, TILESIZE_40.

But when they are used they are spelled differently (line 72 and onwards): TILE_SIZE_10, TILE_SIZE_20, TILE_SIZE_40. Note the underscores between 'TILE' and 'SIZE'.

Does that mean you always use a tile size of 1 on those shaders? Is that what shipped with the game?

** BEGIN EDIT **

I ask this because on file VelocityBuffer.cs, line 37, neighborMaxSupport is initialized like this:

public NeighborMaxSupport neighborMaxSupport = NeighborMaxSupport.TileSize20;

So apparently it was supposed to be TILESIZE_20 by default?

** END EDIT **

** EDIT ** Apparently this pass is not even being used because of 'neighborMaxGen' being 'false', so maybe this issue is not important

Best regards,
Daniel


Why not make this project available for free on [Unity Asset Store](https://www.assetstore.unity3d.com/)?

This could potentially give more visibility to the temporal AA, so more testers and potential contributors to this open source project!
Hello people, if you ever read this - thank you. 
It's amazing, its top notch and Unitytecs are unable to come even close with their current implementation, ill stick to this for as long as its possible, love you.

Is this effect already using unity native motion vector or still using custom one?
