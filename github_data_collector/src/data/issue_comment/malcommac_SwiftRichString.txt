### Scenario: 
we have a `StyleGroup` rendering some very basic html text. We have defined styles for most common tags, including a custom one for `a`. We're also using `href` informations through the `.link` attributed string key to trigger events on a `TTTAttributedLabel`.


### Analysis: 
We expected to find the `.link` attribute populated with the original href, but this doesn't work out of the box:
- If we **DO NOT** include a custom Style for the "a" tag, the link attribute is set to proper href
- if we *DO** include the custom style inside the group, the link is not set.

The root cause seems to be in the `StandardXMLAttributesResolver` implementation: 
- if `a` is present in style's attributes, the `applyDynamicAttributes(...)` method is called. Inside the standard implementation, there's nothing about href default handling: it's taken for granted that it will be the Style to take care of it, but the style doesn't have access to the dynamic value of the href
- if `a` is missing, the `styleForUnknownXMLTag()` is called, properly handling the link.


### Workaround: 
We were able to create a custom resolver by wrapping the standard one like this. 

```swift 
open class MyXMLDynamicAttributesResolver: XMLDynamicAttributesResolver {
    public func styleForUnknownXMLTag(_ tag: String, to attributedString: inout AttributedString, attributes: [String : String]?, fromStyle: StyleXML) {
        wrapper.styleForUnknownXMLTag(tag, to: &attributedString, attributes: attributes, fromStyle: fromStyle)
    }
    let wrapper: XMLDynamicAttributesResolver
    init(_ wrapper: XMLDynamicAttributesResolver) {
        self.wrapper = wrapper
    }
    public func applyDynamicAttributes(to attributedString: inout AttributedString, xmlStyle: XMLDynamicStyle, fromStyle: StyleXML) {
        if xmlStyle.tag == "a" {
            self.styleForUnknownXMLTag("a", to: &attributedString, attributes: xmlStyle.xmlAttributes, fromStyle: fromStyle)
        }
        wrapper.applyDynamicAttributes(to: &attributedString, xmlStyle: xmlStyle, fromStyle: fromStyle)
    }
}
```

and by setting it like this in our group:
```swift
 let group = StyleGroup(base: myBaseStyle, ["a": heavy.byAdding {
                $0.color = Color.black
                $0.minimumLineHeight = 24.0
                $0.size = 14.0
                $0.underline = (.thick, Color.black)
            }])
            group.xmlAttributesResolver = MyXMLDynamicAttributesResolver(group.xmlAttributesResolver)
```

## Proposed solutions:
1) inside the `StandardXMLAttributesResolver`, fallback to the default implementation for `a` tags
2) make `StandardXMLAttributesResolver` methods (and initializer!) `open` and not internal/public (that's why we had to wrap the resolver inside another class instead of subclassing it)

I can quickly  put together a pull request if needed but I'd like to know which is the intended behavior 

Ciao :)


Is there any possibility to implement Interface Builder support for macOS or NSTextField?
![74EF7E3C-A0B6-45C7-AC03-A0D8EB69DC65](https://user-images.githubusercontent.com/19679927/58003184-d1bd9080-7b12-11e9-83fb-647cca6a0575.png)

Xcode version :  10.0 (10A255)
Swift version: 4.2.0
SwiftRichString version:3.0.0
Hello, I'm trying to set multiple styles for an attributed string, but I'm facing problems when I try to set a `StyleGroup` through an array.
To replicate the problem in a controlled environment, I created a new project from scratch and added the library as a pod; then I try to apply the style to a text:

Preparation steps:
```
let redStyle = Style {
    $0.color = UIColor.red
}
let myStyleGroup = StyleGroup(base: nil, ["red": redStyle])
let myText = "Hello, <red>this is red text</red>."
```

Applying the `myStyleGroup` as a **single style** works perfectly:

```
label.attributedText = myText.set(style: myStyleGroup)
``` 

Applying the `myStyleGroup` as an **array of styles** doesn't work:
```
label.attributedText = myText.set(styles: [myStyleGroup])
``` 

I tried to debug it and seems that the tag configuration is stripped out after calling the internal `mergeStyles` method.

I've created [a repository](https://github.com/marcopax/SwiftRichStringTest)  to show the problem.
Hi,

I think there is a bug? when using `linkURL` like in the example: 

``` swift
let link = Style {
	  $0.color = UIColor.red
	  $0.linkURL = URLRepresentable.tagAttribute("href")
  }
```

the link will still shown in some dark blue because you have to set `linkTextAttributes` to change that.
Would be nice if you could change it with a Style, too.
Hi,

I always had this very simple style with a simple string, and the alignment always worked. Now after upgrading to 2.10 the alignment does not work anymore? 

```swift
let smaller = Style {
  $0.font = Global.Font.RegularFont12
  $0.alignment = .center
}
```

EDIT: I downgraded to 2.0.5, now it works again.

Thanks!
