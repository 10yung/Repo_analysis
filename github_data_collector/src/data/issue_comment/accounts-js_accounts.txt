I have a setup using password + graphql modules.

I start my server with 

```
const server = new ApolloServer({
  resolvers,
  typeDefs,
  context: async req => {

    let result = await accountsGraphQL.context(req);

    if (!result.user) {
      return {
        user: null,
      };
    }

    return {
      ...result,
      user: {
        ...result.user,
      },
    };
  },
});
```

How should I set this up so I can return an error when the auth token has expired? So I can then try and do a token refresh.

```
const server = new ApolloServer({
  resolvers,
  typeDefs,
  context: async req => {
   
    //  maybe check here if token is not included/expired

    let result = await accountsGraphQL.context(req);

    // or check the result here if token has expired

    if (!result.user) {
      return {
        user: null,
      };
    }

    return {
      ...result,
      user: {
        ...result.user,
      },
    };
  },
});
```
## ⚠️ Breaking change

Still WIP for now

- the code will be more maintainable
- easier to implement features that target only one database (can add more later)
Hi, I found this package from Graphql Module community. It looks neat and cool. 
However, the document is not well-prepared and neither for example when I have check issues and examples.  

Could anyone can give me some hints or minimal example of: 
- Is it OAuth strategy is ready to use? If it does, how to integrate 3rd party Oauth, like Google, with Graphql?  
- How to use it with the Apollo federation?
- What's the proper way to integrate with nextjs? 



 
The current implementation of **@accounts/graphql-client** gives an error with some libraries like **Hasura** because it expects no `Authorization` header or a valid `Authorization` header.  Would it be possible to change : 

**_accounts/packages/graphql-client/src/graphql-client.ts (line 182- line 198)_**
```ts
Authorization: tokens ? 'Bearer ' + tokens.accessToken : '',
```
to something like :
```ts
...tokens ? { Authorization: 'Bearer ' + tokens.accessToken } : {},
```
Our project want to use RS256 in jwt signing, which use a pair of public / private key instead of a single string secret, and also we want to override `createTokens` function to add custom logic. So making the following changes in this pull request:

1. Allow `tokenSecret` to accept a pair of public / private key instead of a single string secret, and add two private function `getSecretOrPublicKey` and `getSecretOrPrivateKey` to get string secret or public / private key when sign or verify jwt.
2. Make `createTokens` function become async, so when override `createTokens` function, async functions can be easily added.
When I try to call any subscription in our app which is using @accounts - I'm getting this error which is coming from graphql-modules:
```
TypeError: Cannot use 'in' operator to search for 'session' in undefined
    at Object.normalizeSession (/Users/nsine/Documents/work/mobilehead/sputnik/node_modules/@graphql-modules/core/src/helpers.ts:4:16)
    at GraphQLModule._cache.contextBuilder (/Users/nsine/Documents/work/mobilehead/sputnik/node_modules/@graphql-modules/core/src/graphql-module.ts:1352:19)
    at /Users/nsine/Documents/work/mobilehead/sputnik/node_modules/@graphql-modules/core/src/graphql-module.ts:1363:54
    at Array.map (<anonymous>)
    at /Users/nsine/Documents/work/mobilehead/sputnik/node_modules/@graphql-modules/core/src/graphql-module.ts:1363:33
    at new Promise (<anonymous>)
    at GraphQLModule._cache.contextBuilder (/Users/nsine/Documents/work/mobilehead/sputnik/node_modules/@graphql-modules/core/src/graphql-module.ts:1356:13)
    at Object.context (/Users/nsine/Documents/work/mobilehead/sputnik/packages/gql-server/modules/auth/accounts/index.ts:36:21)
    at Object.<anonymous> (/Users/nsine/Documents/work/mobilehead/sputnik/packages/gql-server/utils/apollo/mergeModules.ts:23:35)
    at step (/Users/nsine/Documents/work/mobilehead/sputnik/packages/gql-server/utils/apollo/mergeModules.ts:44:23)
    at Object.next (/Users/nsine/Documents/work/mobilehead/sputnik/packages/gql-server/utils/apollo/mergeModules.ts:25:53)
    at fulfilled (/Users/nsine/Documents/work/mobilehead/sputnik/packages/gql-server/utils/apollo/mergeModules.ts:16:58)
    at processTicksAndRejections (internal/process/task_queues.js:89:5)
```
https://github.com/Urigo/graphql-modules/blob/master/packages/core/src/helpers.ts#L8

So basically it happens because subscription context builder doesn't expect familiar `req` and `res` params, but `connection` and `payload`. GraphQL modules expect to have a `connection.context.session` but there is no such property in context of our app. So I'd like to check if this could be an issue that can be fixed @accounts-level or not?

As a temporary workaround we are doing something like:
```typescript
context: async (session): Promise<IAccountsContext> => {
    if (!session.req) {
      const reqLike = {
        headers: session.connection.context,
      } as IncomingMessage;

      return accounts.context(reqLike);
    }

    return accounts.context(session);
  },
````

But it would be nice if we can fix this in the package.


@accounts version - 0.19.0
Looking for testers for a nestjs module. Please let me know if there's anything We can do better, especially pay attention to creating a new package in the monorepo and the package metadata. I wasn't 100% sure I have it all accurate.
This is tough one to debug. When using `authLink` I'm getting infinite loops and browser tab crashing after stopping and resuming my dev server.

I'm using authLink like this

```
const authLink = accountsLink(() => accountsClient)
const httpLink = new HttpLink({
  uri: '/graphql',
})

const cache = new InMemoryCache()
const client = new ApolloClient({
  link: from([authLink, httpLink]),
  cache,
  resolvers,
})
```

I'm not getting anything from the browser's profiler because it crashes out. If I comment out the authLink, the client loads, re-add it and everything works as expected until I stop and restart my dev server.

No errors or anything odd present on the server. 

Any thoughts here? Has only started happening since adding the authLink, but I honestly have no clue on the cause here. Any ideas on the best way to troubleshoot this?
I personally don't think that user enumeration at `signUp` is a big problem and for most applications I worked on the UX was more valuable then the risk of users figuring out if a certain email exists on our platform. I'd prefer some sort of rate limiting to protect against brute forcing over purposely-unhelpful error messages at signup.

That said, when trying to understand how the current user enumeration protection trough `ambiguousErrorMessages` works I got to the conclusion that it just *doesn't work* - at least not when using graphql-api and for `createUser` -> I would expect it to not work for other graphql mutations as well.

The problem seems to be that `graphql-api` just throws, but doesn't catch certain types of error so e.g. https://github.com/accounts-js/accounts/blob/master/packages/graphql-api/src/modules/accounts-password/resolvers/mutation.ts#L19 is never actually executed when https://github.com/accounts-js/accounts/blob/master/packages/graphql-api/src/modules/accounts-password/resolvers/mutation.ts#L18 throws.
I think this is related to the last checkbox in #181.
cc: https://github.com/accounts-js/accounts/pull/525#issuecomment-538910169 @pradel 
Currently i'm getting a `"message": "Invalid credentials",` error... didn't yet figure out why but will have a closer look soon.

- targets #377 for accounts/password users