When we call our device's `deviceConnection.discoverServices()` it calls the method written at line  317 of `com/beepiz/bluetooth/gattcoroutines/GattConnectionImpl.kt`, `gattRequest`. This method receives a channel (`ch: ReceiveChannel<GattResponse<E>>`) for the request purpose and after a few instructions calls `ch.reveice()` on this channel. That's when the problem occours.

The channel throws an error internally the polls fails (as the following print shows) and the exceution goes all the levels up, like when an exception is thrown, but this time without any clue of an error being thrown: 
![image](https://user-images.githubusercontent.com/3942006/72637560-60074200-3940-11ea-8171-0d456437970d.png)

These are the last captured logs:

```
D/BluetoothAdapter: STATE_ON
D/BluetoothGatt: connect() - device: 00:15:90:91:CE:C2, auto: false
D/BluetoothAdapter: isSecureModeEnabled
D/BluetoothGatt: registerApp()
D/BluetoothGatt: registerApp() - UUID=5ab39c56-c260-4491-9cac-58843c486207
D/BluetoothGatt: onClientRegistered() - status=0 clientIf=8
D/BluetoothGatt: onClientConnectionState() - status=0 clientIf=8 device=00:15:90:91:CE:C2
D/BluetoothGatt: onConnectionUpdated() - Device=00:15:90:91:CE:C2 interval=16 latency=0 timeout=800 status=0
D/BluetoothGatt: onConnectionUpdated() - Device=00:15:90:91:CE:C2 interval=6 latency=0 timeout=500 status=0
D/BluetoothGatt: onConnectionUpdated() - Device=00:15:90:91:CE:C2 interval=16 latency=0 timeout=800 status=0
D/BluetoothGatt: discoverServices() - device: 00:15:90:91:CE:C2
D/BluetoothGatt: onSearchComplete() = Device=00:15:90:91:CE:C2 Status=0
```

I tried to capture any thrown exception around the `discoverServices()` call, but the cursor never comes back to my code after that `ch.receive()` call.
Hi,

I found bug with receiving multiple consecutive notifications from same characteristic. I'm expecting 6 consecutive notifications from my bluetooth device with different values but getting 6 notifications with some duplicated values. Firmware on device is not an issue because everything works fine on iOS app.

I have subscribed on characteristic with `connection.openNotificationSubscription(notifyCharacteristic)` 
and try to receive values with `receiveChannel.receive().value` in while loop and also with `receiveChannel.consumeEach{ }` and nothing worked properly, still getting duplicates.

Then I dug deeper and noticed that I'm alway getting same `BluetoothGattCharacteristic` object so I put breakpoint on 279 line in https://github.com/Beepiz/BleGattCoroutines/blob/master/core/src/androidMain/kotlin/com/beepiz/bluetooth/gattcoroutines/GattConnectionImpl.kt and realised that value in `BluetoothGattCharacteristic` object is changed before it's consumed by channel.

To prove my theory, I fork your project [https://github.com/arsfutura/BleGattCoroutines/tree/fix-notification-channel](url) and instead of your line:
```
launch { characteristicChangedChannel.send(characteristic) }
``` 
I have put this: 
```
val newCharacteristic = BluetoothGattCharacteristic(characteristic.uuid, characteristic.properties, characteristic.properties)
newCharacteristic.value = characteristic.value
launch { characteristicChangedChannel.send(newCharacteristic) }
```
and everything was fine. So I'm creating new `BluetoothGattCharacteristic` object with same value before sending to channel so value doesn't get overwritten. Not sure what is the best approach to this but I'm sure that it's a bug.
This library can be inspiring: https://github.com/Reedyuk/blue-falcon as it uses Apple's CoreBluetooth API with Kotlin/Native. This can help understanding how the API can be used, which is needed to provide a common API.

Ideally, the source and binary compatibility is not broken in the way for existing Android projects.
 should we use a buffered channel in case of missing notification?
Waiting for version 1.3.0 of kotlinx.coroutines.
Hello! 

I have a weird issue with one of my test phones (it's Huawei P Smart 2017) I don't know how, but it looks like cache corrupts somehow and I can't connect one more time after disconnect. I can clear the cache with nRF connect app and it work's like a charm. I want to have this feature too

It's hidden in BluetoothGatt class. 

https://stackoverflow.com/questions/22596951/how-to-programmatically-force-bluetooth-low-energy-service-discovery-on-android 

Maybe we could have an additional parameter `clearCache = false` in `disconnect()` / `close()`? 


When my ble device disconnects me i get the gatt status 133. BleGattCoroutine throws an exception 
`com.beepiz.bluetooth.gattcoroutines.OperationFailedException`  as expected, and then i want to check BLE status with `isConnected()` method. In this situatuion i expect 'false' but i get 'true'. Is it a bug?  

I am sorry but I can't provide you a minimal sketch right now i do something like:

```
try{
    gatt.connect() 
    // ...Do all preparations
    //turn off ble device for example 
    gatt.readCharacteristic(characteristic)
} catch (e: Exception){
  if (!gatt.isConnected()) doSomethingWithError() // i expect that doSomethingWithError() will happend
}
```
This needs a cooperating GattServer.
`GattConnection` is not the ideal name for 3 reasons:
- `Bluetooth` or `Ble` is missing from its name, while it's exclusively for Bluetooth General ATTribute.
- There's "Connection" in the name, but when an instance is originally created, the connection is not
established yet.
- There's "Connection" in the name, but there's a `disconnect()` functionâ€¦ should `Connection` be magically dropped from the name of the class when this function is called? Of course, this is impossible, but shows how the name is not an ideal fit.

Consequently, I want this class to be renamed when the first Kotlin 1.3 compatible version is released, with a deprecated typealias on initial pre-release (alpha, beta or rc) for source compatibility.

Here are a few name ideas:
1. `BleGatt`
2. `SuspendBluetoothGatt`
3. `SuspendBleGatt`
4. `BluetoothGatt` (with named import to reference Android's as `AndroidBluetoothGatt` or alike)
5. `BluetoothGattIsFun` (waitâ€¦ maybe not `actual` `fun` yet ðŸ¤”)
6. `FunBluetoothGatt` (this could open the discussion of a library renaming)

**Please, add a comment to say what you think about each proposition (I may append more name ideas, but I will keep the numbers stable), and if you have other name ideas, please write them there too.**
Hi again @LouisCAD, Would be great if you could spare some time to update the sample android application with examples to read and write characteristics and descriptors and also notifications within the same sample repo. 