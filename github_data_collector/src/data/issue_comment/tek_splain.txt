See https://github.com/scalacenter/bloop/issues/844
I recently stumbled upon a weird interaction between this plugin and [refined](https://github.com/fthomas/refined).

The problem is referenced in a comment of [this issue](https://github.com/fthomas/refined/issues/295).

To put it simply, when splain is active, the macro expansion from refined start failing (with a weird `ClassCastException`) when used in the REPL (but everything works fine in regular compiation).

To reproduce the problem, one can define the following `build.sbt` 

```scala
scalaVersion in ThisBuild := "2.12.4"

libraryDependencies += "eu.timepit" %% "refined" % "0.8.7"

addCompilerPlugin("io.tryp" %% "splain" % "0.2.7" cross CrossVersion.patch)
```

and past the following lines in the console: 

```scala
import eu.timepit.refined._, api._, auto._, char._, generic._, collection._
val str: String Refined Forall[UpperCase] = "FOO"
```
Great plugin - it has helped me a load.
Unfortunately it has stopped working since I introduced v3 of the paradise plugin

### Scala version
- 2.12.4

### Config 1 
Causes macro expansion to fail with:
 "macro annotation could not be expanded (the most common reason for that is that you need to enable the macro paradise plugin; another possibility is that you try to use macro annotation in the same compilation run that defines it)"

```
 .settings(addCompilerPlugin("org.scalameta" % "paradise" % "3.0.0-M10" cross CrossVersion.full))
 .settings(addCompilerPlugin("io.tryp" % "splain" % "0.2.7" cross CrossVersion.patch))
```

### Config 2
Macro expansion works but I'm back to the standard implicit failure output when something cannot be summoned

```
  .settings(addCompilerPlugin("io.tryp" % "splain" % "0.2.7" cross CrossVersion.patch))
  .settings(addCompilerPlugin("org.scalameta" % "paradise" % "3.0.0-M10" cross CrossVersion.full))
```

I've found that I got compilation error in REPR when the splain plugin is enabled:
```
scala> import shapeless._, me.limansky._, cats.instances.all._
import shapeless._
import me.limansky._
import cats.instances.all._

scala> case class Foo(n: Int); case class Bar(s: String, f: Foo)
defined class Foo
defined class Bar

scala> MapReader[Bar].read(Map("s" -> "b", "n" -> "6"))
<console>:25: error: implicit error;
!I ev: MapReader[Bar]
MapReader.genericReader invalid because
!I mapReader: MapReader[R]
Generic.materialize invalid because
type parameters weren't correctly instantiated outside of the implicit tree: inferred type arguments [shapeless.::[String,shapeless.::[Foo,shapeless.HNil]],Nothing] do not conform to method materializeCoproduct's type parameter bounds [V <: shapeless.Coproduct,R <: shapeless.Coproduct]
       MapReader[Bar].read(Map("s" -> "b", "n" -> "6"))
```

The same code without plugin works fine:
```
scala> import shapeless._, me.limansky._
import shapeless._
import me.limansky._

scala> import shapeless._, me.limansky._, cats.instances.all._
import shapeless._
import me.limansky._
import cats.instances.all._

scala> case class Foo(n: Int); case class Bar(s: String, f: Foo)
defined class Foo
defined class Bar

scala> MapReader[Bar].read(Map("s" -> "b", "n" -> "6"))
res0: Bar = Bar(b,Foo(6))
```
The code is available in this gist: https://gist.github.com/limansky/7c91a3deaa25fc0ec7339ea191d4a54a

It looks like the problem is reproducible only in REPR, at least the tests are compiled and passed successfully.
With Splain I’m getting an error saying that an implicit I reference doesn’t exist. My guess is that this is because the implicit in question is generated by Simulacrum’s `@typeclass` macro, and Splain is running before it generates the implicit.