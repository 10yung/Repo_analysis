When running my KWeb application in debug mode from the IDE, I would like to have the browser reload the page when there are code changes.
[APIDiff](https://github.com/aserg-ufmg/apidiff) can apparently detect breaking API changes in Java (and, I hope, Kotlin) libraries.

While it may be premature right now, at some point it would be nice to integrate this into our continuous integration process.
I have some issues with Element.text or Element.text(""). My snippet is like

```
    new {
        div(attributes = mapOf("id" to "main-stats")).new {
            div().classes("row", "stats-row").new {
                div().classes("col-md-12", "col-sm-12", "stat").new {
                    div().classes("data").new {
                        div().new {
                            span().classes("number").text.value = projectsCount.toString()
                            span().text.value = "Projects"
                        }
                    }
                }
            }
        }
    }
```

and the resulting javascript is something like

```
document.getElementById("Ko").setAttribute("class", "number");document.getElementById("Ko").textContent=""document.getElementById("Ko").textContent="3"{
var newEl = document.createElement("span");
```

I think it would be correct if the curly brace after _"3"_ would be shifted to a new line, hence a break could fix this, maybe.

Any thoughts? :)

EDIT: Forgot to say: The error is "SyntaxError: Unexpected identifier" and "Unexpected token {"
EDIT: After taking another look, it looks like an unwanted nesting happens with textContent
Currently when InputElement.value or InputElement.setValue are used to connect a KVar to an input element's value (or TextArea, or other suitable element type), the entire value contents is sent to the server with each change.

While not a problem for small text fields, this could become a serious problem for larger text fields.

The solution is to modify [the relevant code](https://github.com/kwebio/kweb-core/blob/6a5a121f62a24566eb53c712fcb19a36580b1092/src/main/kotlin/io/kweb/dom/element/creation/tags/form.kt#L124) such that it will only send the difference between the previous value and the new value, rather than the entire value.
Hello,

this is my first post on kweb-core. I'm quite excited about the idea of merging server- and client-side programming.

I tested your TODO-example where I saw that the websocket gets quite verbose when filling the input text field, caused by the input.on.keypress event handler code:

```
input.on.keypress { ke ->
    if (ke.code == "Enter") {
        //etc.
```
Woudn't that be a case for `onImmediate`, I first thought.
As I read on issue #35 , onImmediate works with pre-recording DOM-changes.
As you say in the docs, "the event handler for an onImmediate must limit itself to simple DOM modifications".

- Do I suppose correctly that even a simple IF statement like above cannot be used in `onImmediate` because of its nature to just record the effects when executed once on the server side? You should include this in your warning in the docs.

- If positive, is there no other way of offering a better `onImmediate` experience, for example
     - writing a Kotlin compiler plugin that is triggered on compiling the "onImmediate" method calls, and compiles the onImmediate callback function parameters to a javascript file that gets included into the website, or
    - let the programmers put the onImmediate callbacks in a separate Kotlin compile unit that gets compiled into JavaScript code? But there must be some magic such that the onImmediate method does not execute the callback but now has to add the right function pointer into the javascript event call. Advantage: The IDE could then better restrict the functions that are allowed to be called. Disadvantage: Separation for the programmer between Kotlin HTML generation and onImmediate callbacks into different compile units.
How would [that ](http://docs.kweb.io/en/latest/routing.html#modifying-the-url) work with query parameters?

I also did not find a convenient way to retrieve query parametes. I ended up with:
```
fun WebBrowser.queryParameters() =
    parseQueryString(httpRequestInfo.requestedUrl.substringAfter("?").substringAfter("%3F"))
```
However, I was not able to modify the url such that it "hit" the route on the server.
Seems that Github Issues is [coming along](https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/), meanwhile there have been rumors of the long-term stability of Travis-CI, the free service we currently use.

We should investigate whether a migration over is a good idea, and if-so - do it.
related: #68 

In the event of a websocket connection failure, Kweb should exponentially back-off in the event that it is unable to establish a websocket connection - and display a clear error if repeated attempts to establish the connection are unsuccessful.

People have been searching for "validation".