Perhaps we can leverage `rlang::quos()` and simply gobble it?

``` r
rex::rex("a", )
#> Error in eval(x$expr, data, x$env): argument is missing, with no default
```

<sup>Created on 2019-05-20 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

For eg. 
Convert rex-style `[[:alpha:]](?:(?:[[:digit:]]){1,2}(?:[[:alpha:]]){1,2})(?:(?:[[:digit:]]){6,7})`
 to conventional style `[A-Za-z](?:(?:[\d]){1,2}(?:[A-Za-z]){1,2})(?:(?:[\d]){6,7})`
so they can be plugged into external (_non-R_) models directly.



Hi,

I have issues when creating a new character class that combines several existing character classes including one or several ones that are negated (in rex 1.1.1).

1. **Creating a character class that contains negated and non-negated classes**
```R
rx <- rex(one_of(digit, non_letter))  # [[:digit:]^[:alpha:]]
re_matches("1", rx)  # TRUE
re_matches("*", rx)  # FALSE (unexpected!)
re_matches("a", rx)  # TRUE  (unexpected!)
```
As far as I know this is not possible at all. The caret "^" must be directly after the opening bracket "[" for it to trigger a negation. I think combining negated and non-negated character classes should error, with an error message suggesting an alternative. In the example above, an alternative would be:
```R
rx <- rex(or(digit, non_letter))  # (?:[[:digit:]]|[^[:alpha:]])
```

2. **Creating a character class combining only negated classes**
```R
rex(one_of(non_digit, non_lower))  # [^[:digit:]^[:lower:]]
```
But the resulting regular expression should be "[^[:digit:][:lower:]]". Though the regular expression seems to work as intended, it would be safer to correct it.

Cheers,
Florent
So instead of

``` r
rex(capture(name = 'test', anything))
```

You can write

``` r
rex(capture(test = anything))
```

Or the short form

``` r
rex(.(test = anything))
```

It should not require a huge change except for the `capture` implementation.

I am undecided whether to try and maintain backwards compatibility with the previous behavior or not.

See https://code.google.com/p/gsubfn/source/browse/trunk/R/gsubfn.R

PCRE has a function [pcre_study](http://linux.die.net/man/3/pcre_study) that can potentially optimize regular expressions, it would be nice to expose this in some way, but perhaps beyond the scope of this package.

This happens because it uses a negative lookahead rather than a lookbehind.

``` r
grepl(rex(not("tin"), "man"), "tinman", perl=TRUE) # TRUE
```

This works properly if you simply anchor it in some way (like putting a start in the front)

``` r
grepl(rex(start, not("tin"), "man"), "tinman", perl=TRUE) # FALSE
```

I am not sure that we should try to code around this case, seems like it would cause more trouble than it is worth to me.

``` r
# the end dollar is improperly escaped here
rex('x' %or% c('.', end)) # (?:x|\.\$)

#using `list` prevents this
rex('x' %or% list('.', end))  # (?:x|\.$)
```

I don't think we want to do anything to prevent this, but we may want to make a warning when regexs get coerced to character.
