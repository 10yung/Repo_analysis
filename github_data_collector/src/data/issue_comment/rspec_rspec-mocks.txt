See: https://github.com/rspec/rspec-mocks/issues/1250

See: https://github.com/rspec/rspec-dev/pull/233
PR opened to investigate issue
### Subject of the issue
`#and_call_original` with keyword arguments causes the following warning:

> ~/.rbenv/versions/2.7.0/lib/ruby/gems/2.7.0/gems/rspec-mocks-3.9.0/lib/rspec/mocks/message_expectation.rb:101: warning: Using the last argument as keyword parameters is deprecated; maybe ** should be added to the call

### Your environment
* Ruby version: 2.7.0
* rspec-expectations version: 3.9.0

### Steps to reproduce
```ruby
require 'rspec'

class Foo
  def initialize(bar: nil); end
end

RSpec.describe Foo do
  it 'works' do
    expect(Foo).to receive(:new).with(bar: :qux).and_call_original
    Foo.new(bar: :qux)
  end
end

RSpec::ExampleGroups::Foo.run
```

### Expected behavior
No warning is emitted.

### Actual behavior
A warning is emitted.


### Subject of the issue
I was trying to use rspec expectations' compound feature as in `expect().to have_received().and.have_received()` (actually for using with `.ordered`), but the `and` method is missing from `HaveReceived` matcher (and i guess from the others too). Including `RSpec::Matchers::Composable` into the matcher solves the problem (though the error may be somewhat misleading, as for example if the argument expectations fail it still complains about calls out of order).

### Your environment
* Ruby version: 2.6.4
* rspec-mocks version: 3.8.1

### Steps to reproduce
Try to chain compound methods onto have_received matcher.

### Expected behavior
Should work.

### Actual behavior
It raises NoMethodError.
### Subject of the issue
Calling `expect(...).to receive(...).with(...)` with a composed matcher doesn't use the full capabilities of the passed matcher in order to provide a more precise error message to the user. 

You can argue that the diff produced in the attached example is correct ( the passed array doesn't match the expected one so the diff include the whole array), that said the other example shows that it could be done better. 

### Your environment
* Ruby version: ruby-2.4.6
* rspec-mocks version: 3.8.2

### Steps to reproduce
```
begin
  require "bundler/inline"
rescue LoadError => e
  $stderr.puts "Bundler version 1.10 or later is required. Please update your Bundler"
  raise e
end

gemfile(true) do
  source "https://rubygems.org"

  gem "rspec", "3.8.2" # Activate the gem and version you are reporting the issue against.
end

puts "Ruby version is: #{RUBY_VERSION}"
require 'rspec/autorun'

class A
  def test(params)
  end
end

B = Struct.new(:a, :b)

RSpec.describe 'additions' do
  let(:test_double) {  instance_double(A) }

  let(:passed_attributes) do
    [
      B.new(1, 2),
      B.new(3, 4),
      B.new(5, 6),
      B.new(7, 8)
    ]
  end

  let(:attribute_matcher) do
    [
      have_attributes(a: 1, b: 2),
      have_attributes(a: 3, b: 4),
      have_attributes(a: 5, b: 10),
      have_attributes(a: 7, b: 8)
    ]
  end

  it 'shows the whole array instead of elements which dont match' do
    expect(test_double).to receive(:test).with(a_collection_containing_exactly(*attribute_matcher))
    test_double.test(passed_attributes)
  end

  it 'shows only not matching elements' do
    expect(passed_attributes).to contain_exactly(*attribute_matcher)
  end
end
```
### Expected behavior
I would expect that error message shows only elements of the array which don't match the expectation.

### Actual behavior
Error message lists the whole array. 

### Subject of the issue

Calling `have_receive` always become true. (not `have_receive[d]`)

`have_receive`, does this matcher method exist?
https://relishapp.com/rspec/rspec-mocks/docs/basics/spies
I only see `have_receive[d]`

### Your environment

- ruby 2.6.2p47 (2019-03-13 revision 67232) [x86_64-darwin16]
- rspec-mocks (3.8.1)

### Steps to reproduce

```ruby
describe :have_receive do
  let(:object) { spy(:object) }

  it do
    object.some_method
    # This is expected to be true 
    expect(object).to have_received(:some_method)
  end

  # This is expected to be false, but is true, and it doesn't even raise an error  for `have_receive`
  it { expect(object).to have_receive(:method_never_called) }
end

```


### Expected behavior

```ruby
    # This should not pass or should raise an error for the method missing?
    it { expect(object).to have_receive(:never_exist_method) } 
```


### Actual behavior

```ruby
    # This passes, when it shouldn't
    it { expect(object).to have_receive(:never_exist_method) } 
```


### Subject of the issue
When using `and_wrap_original` on `allow_any_instance_of(SomeModule)`, calling the original method results in a `SystemStackError`. It appears that the method passed by `and_wrap_original` is actually the stubbed method, and so it's calling itself.

### Your environment
* Ruby version: `2.6.2`
* rspec-mocks version: reproduced on `3.9.0.pre 2aab10d` and `3.8.0`

### Steps to reproduce
```ruby
module MyModule
  def do_work(arg)
    @value += (arg * 2).to_s
  end
end

class MyObject
  include MyModule

  def initialize
    @value = ""
  end
end

RSpec.describe MyObject do
  specify "and_wrap_original works" do
    allow_any_instance_of(MyModule).to receive(:do_work).and_wrap_original { |original, arg|
      original.call(arg)
    }
    MyObject.new.do_work("a")
  end
end
```


### Expected behavior
The stub block calls the stubbed method.

### Actual behavior
The stub block calls itself, resulting in `SystemStackError`.
