Bumps [backtrace](https://github.com/rust-lang/backtrace-rs) from 0.3.41 to 0.3.42.
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/rust-lang/backtrace-rs/commit/cd56b6ccad6829a3f06c8d482638125f9b9dc298"><code>cd56b6c</code></a> Bump to 0.3.42</li>
<li><a href="https://github.com/rust-lang/backtrace-rs/commit/0d859d82d782a6784734cc618193907a354add46"><code>0d859d8</code></a> Add a note about in-process backtraces on Windows</li>
<li><a href="https://github.com/rust-lang/backtrace-rs/commit/7a1d3573f6b319bf8d3d1b3791cde80bd2ccc768"><code>7a1d357</code></a> Attempt to load jit frames (<a href="https://github-redirect.dependabot.com/rust-lang/backtrace-rs/issues/274">#274</a>)</li>
<li>See full diff in <a href="https://github.com/rust-lang/backtrace-rs/compare/0.3.41...0.3.42">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=backtrace&package-manager=cargo&previous-version=0.3.41&new-version=0.3.42)](https://dependabot.com/compatibility-score.html?dependency-name=backtrace&package-manager=cargo&previous-version=0.3.41&new-version=0.3.42)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Hello, nice project! 

I saw this project comming by, you might be interested in using [crossterm ](https://github.com/TimonPost/crossterm) for cross-platform terminal interactions.  It is quite stable and will save a huge amount of time. It supports things like styling, input reading, terminal interactions, cursor movements. And is quite lightweight since it has no external deps then WinApi and Libc which are required, of course, as well you can use feature flags to even more reduce the size.
The current dependency injection syntax is pretty gnarly and looks like this:

```rust
#[derive(Component, Debug)]
#[component(inject = "init_foo(depname::Foo)")]
#[component(inject = "init_bar(depname::Bar)")]
pub struct MyComponent {
    pub fn init_foo(&mut self, foo: &mut depname::Foo) -> Result<(), FrameworkError> {
        [...[
    }

    pub fn init_bar(&mut self, bar: &mut depname::Bar) -> Result<(), FrameworkError> {
        [...]
    }
}
```

It'd be nice to be able to use an attribute macro on the "injector" functions instead. Something like this:

```rust
#[derive(Component, Debug)]
#[inject(init_foo, init_bar)]
pub struct MyComponent {
    #[inject]
    pub fn init_foo(&mut self, foo: &mut depname::Foo) -> Result<(), FrameworkError> {
        [...[
    }

    #[inject]
    pub fn init_bar(&mut self, bar: &mut depname::Bar) -> Result<(), FrameworkError> {
        [...]
    }
}
```

It'd be nice if the `#[inject]` annotations on individual functions were all that were required, but AFAICT, the `#[inject(init_foo, init_bar)]` is still needed to thunk between them.
Currently, `abscissa_core` delegates to `gumdrop`'s parsing logic with its default parsing style and error formatting:

https://github.com/iqlusioninc/abscissa/blob/67097d53dfa45607448b314b9dbd55752d4249ba/core/src/command.rs#L32-L39

It would be nice if the following were possible:

- override the `ParsingStyle` to use `StopAtFirstFree` using `Options::parse_args`
- customize the error output when option parsing fails â€“ the current behavior bypasses the generated application's error formatting in `src/errors.rs`:
https://github.com/iqlusioninc/abscissa/blob/67097d53dfa45607448b314b9dbd55752d4249ba/cli/template/src/error.rs.hbs#L23-L27
Greetings, 
When creating an app, is there any way to either imply a default command that the user won't have to type or directly add options to the Entrypoint? 
The goal being: 
`$: myapp --flag --foo bar -b`
rather than
`$: myapp start --flag --foo bar -b`