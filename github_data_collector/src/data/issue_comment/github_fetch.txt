hibbhg
Hello devs, and thank you for this great polyfill.

I am facing a strange bug in IE 11 (on Browserstack, no access to and old Windows system).

In short, the behaviour of [preProcessedHeaders.split(/\r?\n/).forEach(...)](https://github.com/github/fetch/blob/master/fetch.js#L373) seem to be inconsistent between for instance Chrome's last version (my reference point) and IE11 on Browserstack.

**IE 11** -> Incorrect
![image](https://user-images.githubusercontent.com/4114535/72547076-32f95780-388c-11ea-91a2-7bbba7578442.png)

**Chrome** -> Correct
![image](https://user-images.githubusercontent.com/4114535/72547173-66d47d00-388c-11ea-9415-e46c0d4842c4.png)

Meaning that the polyfill simply doesn't work for me on IE 11.

If you want to try yourself assuming you have an access to an IE 11 browser:
```
'preProcessedHeaders'.split(/\r?\n/)
'preProcessedHeaders\n'.split(/\r?\n/)
'preProcessedHeaders\r'.split(/\r?\n/)
'preProcessedHeaders\r\n'.split(/\r?\n/)
```

Is anyone able to reproduce this?

Thank you for your time in advance.

**Note**
Polyfill version: 3.0.0
Here is the IE11 build I tested with:
![image](https://user-images.githubusercontent.com/4114535/72547459-fda13980-388c-11ea-848a-d590a52f9a86.png)

is there any update on this? i can see request post for this dated past 3 year, we currently have a requirement for this and are looking for some solution or alternatives please
Response has no .body property available which is needed as a getter to expose a `ReadableStream` of the body contents.

https://developer.mozilla.org/en-US/docs/Web/API/Body/body
In the [section 3.2.6 of the HTTP RFC7230](https://tools.ietf.org/html/rfc7230#section-3.2.6), it denotes the following about HTTP headers:

>  Most HTTP header field values are defined using common syntax
   components (token, quoted-string, and comment) separated by
   whitespace or specific delimiting characters.  Delimiters are chosen
   from the set of US-ASCII visual characters not allowed in a token
   (DQUOTE and "(),/:;<=>?@[\]{}").
>
>     token          = 1*tchar
>
>     tchar          = "!" / "#" / "$" / "%" / "&" / "'" / "*"
>                    / "+" / "-" / "." / "^" / "_" / "`" / "|" / "~"
>                    / DIGIT / ALPHA
>                    ; any VCHAR, except delimiters

Note the `tchar` definition allows use of an exclamation mark, but the validator for `normalizeName` does not allow it.

This PR adds the exclamation mark to the list of allowed characters to header fields.

### Verification

Execute the following in the browser console:

```js
const headers = new Headers();
headers.append('test!', '123'); // Executes fine
headers.append('test:', '123'); // Throws a TypeError
```
This polyfill is an outdated implementation of the fetch standard.

See this change to the fetch standard in 2017: https://github.com/whatwg/fetch/pull/476

To come back in compliance with the standard, the polyfill needs to stop lowercasing headers, regardless how headers are meant to be interpreted in RFC2616.

Browser implementations such as Chrome are already in compliance and do not lowercase headers for fetch calls.
Fixes wheresrhys/fetch-mock#415

Details: fetch-mock wraps the Response object in an ES6 Proxy to
provide useful test harness features such as flush.  However, on
ES5 browsers without fetch or Proxy support pollyfills must be used;
the proxy-pollyfill is unable to proxy an attribute unless it exists
on the object before the Proxy is created.  This change ensures
Response.bodyUsed exists on the instance, while maintaining the
semantic of setting Request.bodyUsed in the constructor before
_initBody is called.
Hello, we are the development team of VS Code extension for debugging React Native apps ([vscode-react-native](https://github.com/microsoft/vscode-react-native)). `whatwg-fetch` package is used in React Native lib. In our extension we debug React Native apps as a Node.js processes. Node JS global context doesn't contain `DOM` modules, so `"exports.DOMException is not a constructor"` exception is generated in `whatwg-fetch` package if fetch function is used in a React Native project. 
Could it be better to firstly verify if there is `DOMException` module in environment global context and only after that use [try/catch](https://github.com/github/fetch/blob/37d10362687492868548c4d70c5c12e4a671771e/fetch.js#L427-L439) construction? If `DOMException` module doesnâ€™t exist it can be better to create this module without exception generation.
Here is the [issue](https://github.com/microsoft/vscode-react-native/issues/1133) for the corresponding case in the debugger extension repository.
According to [WHATWG fetch specification](https://fetch.spec.whatwg.org/#response-class) default statusText for Response should be "" (empty string).

Fixes #696 
According to [WHATWG fetch specification](https://fetch.spec.whatwg.org/#response-class) default statusText for Response should be "" (empty string).

Specification changed https://github.com/whatwg/fetch/issues/698.

See https://github.com/whatwg/fetch/pull/836 and https://github.com/web-platform-tests/wpt/pull/14144 for tests.

For changes in browser implementations see [Chromium Issue 907441](https://bugs.chromium.org/p/chromium/issues/detail?id=907441) (landed in Chrome 73), [Firefox Bug 1508996](https://bugzilla.mozilla.org/show_bug.cgi?id=1508996) (will land in Firefox 67)