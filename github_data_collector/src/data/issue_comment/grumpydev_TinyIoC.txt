1. Create new Xamarin project - UWP
2. Add TinyIoC 1.3.0 to all projects in solution
3. Add TinyIoCContainer to App.xaml.cs:
using TinyIoC;
using Xamarin.Forms;
using XFDependencyInjectionTest.Models;
using XFDependencyInjectionTest.Services;
using XFDependencyInjectionTest.Views;

namespace XFDependencyInjectionTest
{
    public partial class App : Application
    {
        public static TinyIoCContainer tinyIoCContainer;

        public App()
        {
            InitializeComponent();
            tinyIoCContainer = new TinyIoCContainer();
            tinyIoCContainer.Register<IDataStore<Item>, MockDataStore>();
            DependencyService.Register<MockDataStore>();
            MainPage = new MainPage();
        }
    }
}

4. Inject object into constructor of viewmodel:
    public class AboutViewModel : BaseViewModel
    {
        public AboutViewModel(IDataStore<Item> dataStore) : base(dataStore)
        {
            Title = "About";
            OpenWebCommand = new Command(async () => await Browser.OpenAsync("https://xamarin.com"));
        }

5. Build/run UWP project.

Error: : 'Could not load file or assembly 'XLabs.Ioc.TinyIOC, Version=2.0.5782.12282, Culture=neutral, PublicKeyToken=null'. The system cannot find the file specified.'

Bin directory contains XLabs.Ioc.dll and XLabs.Ioc.TinyIOC.WP8.dll.  Version numbers for DLLs do not match version in error.
Hi guys,

I found out the following issue:

When I register multiple implementations for the same interface - but do it individually one by one, the unnamed one (if present) isn't resolved when using constructor injection of IEnumerable<Type>. On the other hand, it works when using ResolveAll<Type> method.

Consider following registration example:

`
TinyIoCContainer.Current.Register<Interface, Impl1>();
TinyIoCContainer.Current.Register<Interface, Impl2>("2");
`

When calling 

`TinyIoCContainer.Current.ResolveAll<Interface>();`

resulting list contains both of registered implementations. But if it's used this way:

`
TinyIoCContainer.Current.Resolve<CtorTest>();
`

where class CtorTest looks like this:

`
public class CtorTest
{

		public CtorTest(IEnumerable<Interface> impls)
		{
		}
	}
`

resulting list contains only named registrations. When I was digging in sources, I found out that in following method: 

` 
private object GetIEnumerableRequest(Type type)
{

            #if NETFX_CORE
            		var genericResolveAllMethod = this.GetType().GetGenericMethod("ResolveAll", type.GenericTypeArguments, new[] { typeof(bool) });
            #else
            var genericResolveAllMethod = this.GetType().GetGenericMethod(BindingFlags.Public | BindingFlags.Instance, "ResolveAll", type.GetGenericArguments(), new[] { typeof(bool) });
            //#endif
            return genericResolveAllMethod.Invoke(this, new object[] { false });
        }
`

the last row invokes method with last parameter set to `false `. This parameter is actually **includeUnnamed** parameter in ResolveAll<Type> method. When ResolveAll<Type> is called directly (as in fisrst example) it falls to default call, where **includeUnnamed** is set to true. That's why it works in first example, but doesn't work in second.

My question is - is that a purpose ? If so, can you examplain me why? 

Thanks,
Patrik
For `RESOLVE_OPEN_GENERICS` add a new "__requestedType" parameter when calling a factory method providing the type object for the type being resolved. This allows factory methods for registered open generic types to properly resolve the particular closed generic type requested.
Ensure that registered open generics can be resolved from child containers.
I couldn't find any info about platform compatibility in the wiki.

I would like to use TinyIoC for a Unity game potentially targeting pc/mac/linux/xbox/ps4/android/ios.

I'm guessing pc, mac and linux should be no problem - at least it is working fine so far. I don't have other devices yet to make any tests.

Are those platforms (mobile and console) officially (or not so officially) supported by TinyIoC and  TinyMessenger?
Why do `SafeDictionary` and `TinyIoCContainer` both call `GC.SuppressFinalize` when neither have finalizers? ðŸ¤” 


From https://github.com/NancyFx/Nancy/issues/2896
I ran into the issue that you cannot delegate factories with the AsSingleton() method.

 ```csharp
container.Register<MyConcreteClass>((c, o) =>
{
    var dependency = c.Resolve<MyDependency>();
    return new MyConcreteClass(() => dependency.AFunction);
}).AsSingleton();
```

does not work. It throws an exception an `Register`

I believe it is more like a missing feature, But I found no reason why it is not supported.
Can this be fixed?
I think the line that undef's `APPDOMAIN_GETASSEMBLIES` here: https://github.com/grumpydev/TinyIoC/blob/master/src/TinyIoC/TinyIoC.cs#L53 should be extended to additional netstandard versions.. My understanding (I could be wrong) is that AppDomain is not part of the netstandard as it's gone away in netcore.


Adding TinyIoC with Nuget in a blank UWP Project in Visual Studio 2015 don't include the .cs file in the project