Hi! :wave:

It looks like the builds of the `coredistools` native library shipped in the `Microsoft.NETCore.CoreDisTools` package for non-Windows platforms are a little old and aren't supported by tools like `R2RDump.dll` for getting disassembly out of DLLs in the Ready To Run format.

I just tried building `libcordistools.dylib` myself on OSX using `master` and everything appears to work ok (I can use it with `R2RDump.dll` to get disassembly). Is there anything blocking updating this package?
Right now CorDisTools can not be used to disassemble JIT output during SuperPMI with ARM64 JIT due to the fact that on ARM64 the code block is appended with literal pool (https://github.com/dotnet/coreclr/blob/06f1634c3157dc279779f3dad7d2f327416e3f09/src/jit/emit.cpp#L4629-L4650) 

What happens is that the disassembler goes beyond JIT code and tries to decode data in literal pool where it obviously fails.

I couldn't find any information collected during JIT-EE interactions that can help to determine the size of  JIT code region. It seems that we are loosing such information during allocMem call by explicitly passing 0 in roDataSize (https://github.com/dotnet/coreclr/blob/06f1634c3157dc279779f3dad7d2f327416e3f09/src/jit/emit.cpp#L4645)

What I am doing here is trying to reconstruct boundary between JIT code and constant pool during instruction decoding by looking at LDR instructions that have PCRel immediate as a second operand and computing the corresponding label addresses using current value of PC. The minimum address is then assumed to be the beginning of a literal pool. 

I did experimentation with running SuperPMI with ARM64 JIT with CorDisTools with these changes and it seems that this approach works on the all framework libraries in Core_Root. 

@dotnet/jit-contrib 
Does anyone think about a better way to figure out the literal pool size?
@briansull @BruceForstall 
Hey guys!

I'm trying to find a manual or guide to tell me how I can use LLILC to generate an LLVM IR file from a MSIL file. Is there a way to do this? I'm not even sure how to use LLILC in general, but I really only need LLILC to perform this function and I've not found anything on this yet. 

Thanks!
Hey guys! 

I’m following the getting started on Windows and I’m trying to run the command: 

 “cmake -G "Visual Studio 12 2013 Win64" ..\llvm -DWITH_CORECLR=<coreclr path>\bin\Product\$platform.$arch.$build> -DLLVM_OPTIMIZED_TABLEGEN=ON”

I’m getting an the error that says “system is unable to find the file specified.” I then tried to run this a folder up but then I get a “access is denied.” I’ve tried to redo the whole process in different locations and run the administrator command prompt. I’ve even tried temporarily disabling the firewall. 

Has anyone else had issues with getting this to work? Were there any small tweaks you had to make? 

Any suggestions would be super helpful. Thanks!! 

In [reader.cpp, function ReaderBase::classHasGCPointers](https://github.com/dotnet/llilc/blob/master/lib/Reader/reader.cpp#L634-L638):

```
bool ReaderBase::classHasGCPointers(CORINFO_CLASS_HANDLE Class) {
  GCLayout *Layout = getClassGCLayout(Class);
  free(Layout);
  return Layout != nullptr;
}
```
Inspecting the value of a pointer that has been rendered invalid (in this case by `free()`ing) is undefined behavior. The function should be rewritten as:
```
bool ReaderBase::classHasGCPointers(CORINFO_CLASS_HANDLE Class) {
  GCLayout *Layout = getClassGCLayout(Class);
  bool RetVal = Layout != nullptr;
  free(Layout);
  return RetVal;
}
```

It looks like this project is dead (no commits since June 2016). It might be worth updating the README.md with this fact and possibly rationale.
https://github.com/dotnet/llilc/issues/663#issuecomment-118952202

>As you know, Roslyn currently translates C# into MSIL; whilst LLILC is currently focused on compiling MSIL into LLVM bitcode. WebAssembly looks interesting, but clearly needs lots of work before gaining a firm foothold. One key step is obviously getting all popular browsers to interpret/JIT wasm’s binary ASTs, and capitalize on the extra optimizations made possible by emitting the asm.js subset of JS. (Until then, Polyfill will decompile to asm.js). Yes, wasm is being worked on by some “big names” (Google, Microsoft, Mozilla, Apple). We agree it deserves attention from all components of the toolchain. So, LLILC will follow the progress of wasm and consider supporting in due course, as a clearer picture emerges.

https://blogs.windows.com/msedgedev/2016/10/31/webassembly-browser-preview/#8KATEweyuc1KJ3QL.97

https://hacks.mozilla.org/2016/10/webassembly-browser-preview

http://v8project.blogspot.co.uk/2016/10/webassembly-browser-preview.html

The clear picture emerged. What is your progress on this? Thanks.
see https://spin.atomicobject.com/2014/05/19/c-undefined-behaviors/ 2. Upcasting Pointers

https://github.com/dotnet/llilc/blob/master/lib/Reader/readerir.cpp#L2727

```
uint32_t GenIR::size(CorInfoType CorType) {

  switch (CorType) {
  case CorInfoType::CORINFO_TYPE_BOOL:
  case CorInfoType::CORINFO_TYPE_CHAR:
  case CorInfoType::CORINFO_TYPE_BYTE:
    return 8;

  case CorInfoType::CORINFO_TYPE_UBYTE:
  case CorInfoType::CORINFO_TYPE_SHORT:
  case CorInfoType::CORINFO_TYPE_USHORT:
    return 16;
```

Shouldn't UBYTE be 8 and CHAR be 16?
