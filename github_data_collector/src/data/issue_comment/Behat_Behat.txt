Appveyor builds have been failing across all branches, seemingly because of a yaml parsing issue. It looks like we've been dependent on a cached version of the PHP installation, which was removed recently. This PR should allow all Appveyor builds to pass.
Builds are failing in PHP7.4, because of an issue with the build scripts.

Tests tagged as`php5.4` are running in 7.4, because only the minor version is checked.

This pull request fixes these issues, and simplifies the handling of language version numbers generally.
Hi.

Behat 3.5.0, iTerm2 3.3.6, MacOS 10.14.6
If I choose any dark iTerm theme (e.g. Tango Dark), then path of a failed scenario is invisible, unless I select it.

![Screenshot 2020-01-14 at 16 51 45](https://user-images.githubusercontent.com/347044/72359485-a8c7bc80-36ee-11ea-98f2-2e080a86647c.png)
![Screenshot 2020-01-14 at 16 52 10](https://user-images.githubusercontent.com/347044/72359507-b2512480-36ee-11ea-9eea-2800b69aa5df.png)

On light themes everything is okay:
![Screenshot 2020-01-14 at 16 56 32](https://user-images.githubusercontent.com/347044/72359607-ddd40f00-36ee-11ea-840b-4f69681bcceb.png)

With this change, [env placeholders](https://symfony.com/blog/new-in-symfony-3-4-advanced-environment-variables) can be used in `behat.yml`.

For example, when using Mink, you can write 

```yaml
default:
    extensions:
        Behat\MinkExtension:
            base_url: '%env(BEHAT_BASE_URL)%'

```

... and then use the environment variable `BEHAT_BASE_URL` to control the Mink setting.


Hi,

When I launch behat, it cannot access the selenium server because of the proxy on my machine. The proxy configuration in the behat.yml file is for selenium, not for the behat client.

On my research, I found the call to selenium that is done via instaclick/php-webdriver/lib/WebDriver/Service/CurlService. By putting 

> curl_setopt ($ curl, CURLOPT_PROXY, '');

 it works.

Is there another way to do it ?
Or is it possible to add it in the configuration of behat.yml ?
Either a proxy option, or add options to the $extraOptions array which is a parameter of the method.

Thx
BeHat uses Symfony components as per the package requirements (easy to confirm when checking the composer JSON file).

Given the latest version of Symfony is already available (5.0.1 at the moment) and knowing about the other opened issue to say farewell to unsupported versions of Symfony https://github.com/Behat/Behat/issues/1258 I suggest enabling support for the new version too.

~~ Edit ~~

Please note that I read all the comments on the other issue; I just added this one here because the purpose of the other one is to remove support for unsupported versions of Symfony.

Decouple matters :-)
I've recently found that https://behat.org/en/latest/quick_start.html has a link to a mink repository fork that's archived. We should update it to https://github.com/minkphp/Mink but I've found that docs aren't under this repo.
Let me know if there's any chance for me to change it or if you need to do the work.
I maintain this package here https://github.com/forceedge01/behat-fail-aid, and I print out several paths to facilitate debugging of behat. Behat when I dived into the code actually trim out absolute paths, this breaks references that I have to print out for say urls from file system. Can we please not do this or have an option of some sort to not do this?
This PR can be used to build a scoped PHAR where all classes in vendor namespaces are prefixed with `Behat\`. So for example, `Symfony\Component\Console\Command\Command` becomes `Behat\Symfony\Component\Console\Command\Command`. That way, if people have Symfony installed in their project as well, it won't clash with the version that is bundled with Behat.

This works fine for the base use case, but falls apart at the moment Behat extensions come into the mix, because behat extensions are classes that need to use parts of Symfony (such as `Symfony\Component\DependencyInjection\ContainerBuilder`), which is not possible inside the PHAR, because those classes are prefixed in the PHAR (so `Behat\Symfony\Component\DependencyInjection\ContainerBuilder` exists in the PHAR, but `Symfony\Component\DependencyInjection\ContainerBuilder` does _not_).

Output when trying to run the scoped PHAR with my [behat mailhog extension](https://github.com/rpkamp/mailhog-behat-extension):

```
PHP Fatal error:  Declaration of rpkamp\Behat\MailhogExtension\ServiceContainer\MailhogExtension::configure(Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition $builder): void must be compatible with Behat\Testwork\ServiceContainer\Extension::configure(Behat\Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition $builder) in /home/remon/code/mailhog/mailhog-behat-extension/src/ServiceContainer/MailhogExtension.php on line 31
```

I'm not really sure how to solve this in a nice way.

Creating an abstraction layer between Behat and Symfony might work (basically a bridge between Behat and the Symfony version Behat works with) but that would force all current extensions to be rewritten in order to be compatible with that abstraction layer, which would be a lot of work.

Another solution would be for extensions to be written differently (using the scoped namespace) when used in the PHAR than when used outside the PHAR, which sounds brittle and puts quite a strain on extension maintainers.

But maybe there are other solutions that I'm missing?