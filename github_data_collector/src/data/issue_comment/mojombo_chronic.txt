NOTE: Gem::Specification#rubyforge_project= is deprecated with no replacement. It will be removed on or after 2019-12-01.
Chronic will advance the year properly for a date that is past for the current year if given in `mm/dd` format but it will not for `month_name dd`.

```ruby
# Let's make it 11/11/2020
now = Chronic.construct(2020, 11, 11) # => 2020-11-11 00:00:00 -0500
# The first of November is in the past for 2020 so both "Nov 1" and "11/1" should be 11/1/21
Chronic.parse("11/1", now: now)       # => 2021-11-01 12:00:00 -0400
# but it isn't with the month's name
Chronic.parse("Nov 1", now: now)      # => 2020-11-01 11:00:00 -0500

# It uses the current year as expected for the current date or a date in the future
Chronic.parse("11/11", now: now)  # => 2020-11-11 12:00:00 -0500
Chronic.parse("Nov 11", now: now) # => 2020-11-11 12:00:00 -0500
Chronic.parse("11/12", now: now)  # => 2020-11-12 12:00:00 -0500
Chronic.parse("Nov 12", now: now) # => 2020-11-12 12:00:00 -0500
```

A little bit of digging suggests the reason is that the day is not taken into account in [`RepeaterMonthName#next`](https://github.com/mojombo/chronic/blob/master/lib/chronic/repeaters/repeater_month_name.rb#L27). Is this the correct behavior or am I'm missing something?
Previously the offset change for Daylight Savings was unnecessarily
added all the time, resulting in this discrepancy when the local time
was set to UTC-7:

```ruby
Time.parse('2020-11-01 00:00:00')
=> 2020-11-01 00:00:00 -0700
Chronic.parse('2020-11-01 00:00:00')
=> 2020-11-01 01:00:00 -0700
```

Each time we add an offset to a base time, we need to check whether this
crosses Daylight Savings boundaries. Only if it does should we adjust
the time by the offset.

Closes https://github.com/mojombo/chronic/issues/147
I've found a strange behavior when I try to add a time in parser.

```
refdate = (Time.zone.now).beginning_of_week
  => Mon, 26 Aug 2019 00:00:00 CEST +02:00

Chronic.parse('this week thuesday', now: refdate)
  => 2019-08-29 00:30:00 +0000

Chronic.parse('this week thuesday at 9am', now: refdate)
  => 2019-08-25 09:00:00 +0000
```

â€¦nd shortening methods length.
Fixes https://github.com/mojombo/chronic/issues/179
Is this project using continuous integration services (e.g., Travis-CI or Jenkings)? Or has it used at any point of its lifetime?
On the day when we switched to daylight savings time, Chronic is parsing "today at noon" wrong.

```
(byebug) Time.current.middle_of_day
Sun, 10 Mar 2019 12:00:00 PDT -07:00
(byebug) Time.current
Sun, 10 Mar 2019 12:26:53 PDT -07:00
(byebug) Chronic.parse("today at noon")
Mon, 11 Mar 2019 00:00:00 PDT -07:00
(byebug) Chronic.parse("today")
Sun, 10 Mar 2019 18:30:00 PDT -07:00
(byebug) Chronic.parse("tomorrow")
Mon, 11 Mar 2019 13:00:00 PDT -07:00
(byebug) Chronic.parse("noon")
Mon, 11 Mar 2019 00:00:00 PDT -07:00
(byebug) Chronic.parse("6 in the morning")
Sun, 10 Mar 2019 06:00:00 PDT -07:00
(byebug) Chronic.parse("this morning")
Sun, 10 Mar 2019 10:00:00 PDT -07:00
(byebug) Chronic.parse("tomorrow at 6:45pm")
Mon, 11 Mar 2019 18:45:00 PDT -07:00
(byebug) Chronic.parse("afternoon yesterday")
Sat, 09 Mar 2019 15:00:00 PST -08:00
(byebug) Chronic.parse("afternoon today")
Sun, 10 Mar 2019 16:00:00 PDT -07:00
(byebug) Chronic.parse("afternoon tomorrow")
Mon, 11 Mar 2019 15:00:00 PDT -07:00
(byebug) Chronic.parse("at noon today")
*** RuntimeError Exception: 'at noon today' is not a recognized time expression

nil
(byebug) Chronic.parse("today at noon")
Mon, 11 Mar 2019 00:00:00 PDT -07:00
(byebug) Chronic.parse("today midnight")
Mon, 11 Mar 2019 00:00:00 PDT -07:00
(byebug) Chronic.parse("tomorrow midnight")
Tue, 12 Mar 2019 00:00:00 PDT -07:00
```


chronic (0.10.2)
ruby 2.5.3p105 (2018-10-18 revision 65156) [x86_64-darwin18]

Given a date range of the format "%d %b %Y to %d %b %Y" such as "01 Jan 1988 to 31 Dec 1999" chronic will throw the error `NoMethodError (undefined method '+' for nil:NilClass)`. This happens because getting the anchor won't work for some weirder date formats and just returns nil, that in turn gets passed to the offset method. 

It looks like it could probably happen with other repeaters as well, but I was unable to craft a string of sufficient silliness to cause it to happen in other repeaters. 

Now, instead of throwing an error, Chronic.parse will just return nil, which is consistent with the documentation. 
```
>> Chronic.parse("June 15 00 at 5:45 AM")
=> nil
>> Chronic.parse("June 15 06 at 5:45 AM")
=> 2006-06-15 05:45:00 -0700
>> Chronic.parse("June 15 2000 at 5:45 AM")
=> 2000-06-15 05:45:00 -0700
```

This seems to be fixed with a commit from @renziver (https://github.com/mojombo/chronic/commit/86db388a71bc8f5c9e8b861d75e23df4abac26b6) But it doesn't seem to be released. The latest release is 0.10.2 as of the time of this writing.