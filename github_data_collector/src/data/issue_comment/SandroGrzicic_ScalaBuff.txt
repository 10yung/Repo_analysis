I sbt-assembled the jar and this is what i get when trying to use it

    java -jar scalabuff-compiler-assembly-1.4.0.jar --proto_path=. --scala_out=.
    <unknown>:1:1: string matching regex `\z' expected but `s' found
    syntax = "proto3";
    ^
    <unknown>:1:1: string matching regex `\z' expected but `s' found
    syntax = "proto3";
    ^

the .proto file is a minimal example (regardless of whether using proto2 or 3 syntax, and yes, it throws two of the same errors for one file)

    syntax = "proto3";
    message Example{
      required int32 test = 1;
    }
Fix for issue 130 Scalabuff removes _ chars in vaiable names and errors occur when scala is compiled

If your protobuf looks like this (test project is located here https://github.com/lewissk/test_protobuf/tree/master):

``` protobuff
syntax = "proto2";
package test;

option java_package = "test";
option cc_enable_arenas = true;

enum ContentCategory {
  IAB1_1 = 2;
  IAB11 = 191;
}
```

Then you run:

  `sbt compile`

You will get the following error:

```
[error] /Users/xxx/test/protobuf_scala_test/target/src_managed/main/compiled_protobuf/test/ContentCategory.scala:11: method isIab11 is defined twice
[error]   conflicting symbols both originated in file '/Users/xxx/protobuf_scala_test/target/src_managed/main/compiled_protobuf/test/ContentCategory.scala'
[error]   def isIab11: Boolean = false
[error]       ^
[error] one error found
[error] (compile:compileIncremental) Compilation failed
```

Because the scala it generates is like so:

``` scala
// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package test


import com.trueaccord.scalapb.Descriptors

sealed trait ContentCategory extends com.trueaccord.scalapb.GeneratedEnum {
  def isIab11: Boolean = false
  def isIab11: Boolean = false
}

object ContentCategory extends com.trueaccord.scalapb.GeneratedEnumCompanion[ContentCategory] {
  @SerialVersionUID(0L)
  case object IAB1_1 extends ContentCategory {
    val id = 2
    val name = "IAB1_1"
    override def isIab11: Boolean = true
  }

  @SerialVersionUID(0L)
  case object IAB11 extends ContentCategory {
    val id = 191
    val name = "IAB11"
    override def isIab11: Boolean = true
  }

  lazy val values = Seq(IAB1_1, IAB11)
  def fromValue(value: Int): ContentCategory = value match {
    case 2 => IAB1_1
    case 191 => IAB11
  }
  lazy val descriptor = new Descriptors.EnumDescriptor(0, "ContentCategory", this)
}
```

Sometimes you need to have scala & java version of protobuf classes. In my case it's because I need to have human input / output format and only Java version of protobuf objects implements MessageOrBuilder interface that allows you to have pretty printing via google TextFormat class)

So since java_package option is used by java compiler as well, we gonna have separate option for scala (scala_package and scala_outer_classname)

Test is provided as well.

Hello,
I would like to compile the project with jdk 1.8-64 bits. Is it possible ?

Thanks in advance for your reply

Not sure if it's just something I messed up, but it looks like a couple of files in scalabuff-compiler/src/test/resources/parsed/ might be incorrectly named. I'm getting 17 errors on

> sbt assembly
> due to FileNotFoundExceptions,
> [info] ParserTest:
> [info] - InvalidSimple **\* FAILED ***
> [info]   java.io.FileNotFoundException: scalabuff-compiler/src/test/resources/parsed/InvalidSimple.txt (No such file or directory)

Changing the file name from invalidSimple.txt to InvalidSimple.txt fixes the problem.
Maybe I just have something else misconfigured though.

Tag of 0 in protobuf messages are not valid and produce failures at runtime, this could be detected on schema compilation

Hi! Please, add supported protobuf version to README.

It would be nice to add a package at the top of generated scala files that might be specified in the command line

The procedures should have `:Unit =` and some of the imports seem unnecessary.  

```
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:32: Procedure syntax is deprecated. Convert procedure `writeTo` to method by adding `: Unit =`.
    def writeTo(output: com.google.protobuf.CodedOutputStream) {
                                                               ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:143: Procedure syntax is deprecated. Convert procedure `writeTo` to method by adding `: Unit =`.
    def writeTo(output: com.google.protobuf.CodedOutputStream) {
                                                               ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:264: Procedure syntax is deprecated. Convert procedure `writeTo` to method by adding `: Unit =`.
    def writeTo(output: com.google.protobuf.CodedOutputStream) {
                                                               ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:333: Procedure syntax is deprecated. Convert procedure `registerAllExtensions` to method by adding `: Unit =`.
    def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
                                                                                   ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtobufPrediction.scala:23: Procedure syntax is deprecated. Convert procedure `writeTo` to method by adding `: Unit =`.
    def writeTo(output: com.google.protobuf.CodedOutputStream) {
                                                               ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtobufPrediction.scala:99: Procedure syntax is deprecated. Convert procedure `registerAllExtensions` to method by adding `: Unit =`.
    def registerAllExtensions(registry: com.google.protobuf.ExtensionRegistryLite) {
                                                                                   ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:162: Unused import
        import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
                                                          ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtoObs.scala:279: Unused import
        import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
                                                          ^
/local/dev/odin-core/common/build/scalabuff/generated-sources/ai/osaro/data/ProtobufPrediction.scala:40: Unused import
        import com.google.protobuf.ExtensionRegistryLite.{getEmptyRegistry => _emptyRegistry}
                                                          ^
```

I wonder if we could ignore warnings in these generated files, or if scalabuff could fix the generated code.  
