This PR adds support for matching text.

### Usecase
Find the correct table to iteratore over cells on websites without attributes.

e.g. 

```
<html><body>
<table><tr><td>First Table<td><tr><tr><td>..</td></tr></table>
<table><tr><td>Second Table<td><tr><tr><td>important cell</td></tr></table>
...
</body></html>
```

Before you would need to rely on the nth table child of body but that breaks if the order changes.
Sorry, I'm just learning rust and I would like to know how to feed an http response stream to the html5ever parser. How would you implement that instead of reading the hole response as a string and then parsing it?
For example. Try to find `<p>wanted data</p>` node by a related position with `a-anchor` node.

```rust
use select::document::Document;
use select::predicate::Attr;

fn main() {
    let html = r#"
    <p>balabala</p>
    <h2 id="a-anchor">Title</h2>
    <p>wanted data</p>
    "#;

    let document = Document::from(html);
    let h2 = document.find(Attr("id", "a-anchor")).next().unwrap();
    assert_eq!("wanted data", h2.next().unwrap().next().unwrap().text());
}
```

Please notice I use twice `next().unwrap()` to skip newline / space node. This approach look like very fragile especially consider the site maintainer may drop the newline node or did some other trivial tweaks.

I can verify all nodes after each `next()` called manually until hit what I want, but maybe It worth a elegant interface to find a sibling node? like `find_sibling_forward(Name("p"))`?

Or maybe some document I missed. please let me know :D
Firstly, thank you very much for contributing this library.  This "nitpick" is not related to your code quality.  `<joke>`~"It's not what you said, it's how you called it."`</joke>`

As far as I can find, there's this unnamed spec, "The hyphen is used by nearly all programmers...", for [naming conventions for multiple-word identifiers](https://en.wikipedia.org/wiki/Naming_convention_(programming)#Multiple-word_identifiers).

"select.rs" often gets rendered as [select.rs](http://select.rs) instead of plain text, because it's a valid IETF DNS address.  This happens for example when not forcing users to put optional `` code markers around project names in markdown (like how I didn't put them around "markdown").

And for another programming environment's example, this "implementation as spec inspiration" also breaks when using special characters in names , https://github.com/angular/angular-cli/issues/11051
Right now when I just try .text() on a node I get it's text but it lacks newlines where would be line breaks. Is there a way to add them? Currently I could take .html(), then strip it out of all tags but <br> manually, then swap them out for \n, but I think there should be a built in way.
For example, it would be very useful to search nodes with some attributes values matching regex, e.g.

```
for node in document.find(Attr("class", Regex::new(r"^content-.*$").unwrap())) {
   // do something
}
```
In beautifulsoup, a html parsing library written in python, there's a method called `.select(css_selector_str)` it's incredibly useful for html parsing if you have knowledge of css selectors. For example, to print the question titles on stackoverflow:
```
import requests
from bs4 import BeautifulSoup


html = requests.get("https://stackoverflow.com/questions/tagged/rust?sort=votes&pageSize=50").text
soup = BeautifulSoup(html, "html.parser")

titles_elements = soup.select("div#questions div.summary > h3 > a")
title_text = [el.text for el in titles_elements]
print(title_text)
```
This prints:

`["What are the differences between Rust's `String` and `str`?", 'Why are explicit lifetimes needed in Rust?', "Why doesn't println! work in Rust unit tests?", 'How to access command line parameters?', 'How do I print the type of a variable in Rust?' ... (and many more)
`

The equivalent _selector_ right now would be something like 
```
let iterator = doc.find(And(Name("div"), Attr("id", "questions"))
    .descendant(And(Name("div"), Class("summary")))
    .child(Name("h3"))
    .child(Name("a")));

```


Would you be open to accepting css selectors as strings or is that out of the scope of this library?
  
  
  
Hi!

In rust cookbook we are using your excellent crate in several places when presenting an idiomatic approach to [html querying](https://rust-lang-nursery.github.io/rust-cookbook/net.html#extract-all-links-from-a-webpage-html) / [basic web scraping](https://rust-lang-nursery.github.io/rust-cookbook/net.html#check-a-webpage-for-broken-links) :+1: 

The only problem is that the select crate is largely undocumented and we are aiming for used crates to have similar level of documentation to build the feeling of extended std for our users.  
https://paper.dropbox.com/doc/Cookbook-complete-recipe-list-6HdURriv5dYRUJClFzUMy

TLNR: Would you be open to extending the documentation or external contributors working on the docs?
Implements #40.

Changes:

* Adds `Node::classes` which returns an iterator, and `Node::id` for convenience.
* Documents which CSS selectors are equivalent to which predicates.
* Renames `Attr(s, ())` to `HasAttr` (breaking change; can be removed if desired).
* Adds `Nothing` predicate, the opposite of `Any`.
* Adds `Id` predicate, which calls `Node::id`.
* Adds `Root` predicate, that ensures that the node has no parents.
* Adds `Empty` predicate, which allows comment children to be compatible with CSS.
* Adds `AttrMatches` predicate for convenience; it takes a string for an attribute and a function to test the string.
* Adds `AttrContains`, `AttrStartsWith`, and `AttrEndsWith` which call the relevant string functions.
* Adds `AttrContainsWord` and `AttrLang`, which are kind of esoteric but are equivalent to the `[attr~=word]` and `[attr|=lang]` selectors.

Once all of the CSS selectors are added we can potentially allow parsing `&str -> Box<Predicate>`.
Currently just to find a single element requires a bit of boilerplate. Consider adding a a `find_one` method that returns `Option<Node>`.