I'm creating a Position component like so: 
```
import styled from 'styled-components'
import { position } from 'styled-system'
import { Box as Base } from 'rebass/styled-components'

const Position = styled(({ position, ...props }) => <Base {...props} />)`
  ${position}
`

export default Position
```

I'm expecting to be able to use it like so after importing into another file:

```
const Header = styled(Position)` color: red `;

<Header
  as="header"
  mb={4} // Box styled props
  pt={3} // Box styled props
  position="sticky"
  top={0}
  left={'auto'}
  right={'auto'}
  zIndex={100}
>

```

Do I need to be utilizing `forwardRef` ? Is there a way to pass down both `Box` props and `Position` props from an extended component?

Hi,

I recently updated my Rebass V3 to V4 and found that variants are not getting applied, In migration document I found saying "The undocumented theme keys for Box, Flex, Text, Heading, Link, Button, Image, and Card are no longer supported. Use variants instead." Can  I get example for this.

Existing code Rebass V3:

`export const buttons = {
  primary: {
    color: colors.pureWhite,
}
secondary: {
color: colors.blue,
}
}
`

Rebass V4:

`export const variants = {
  Button: {
      primary: {
    color: colors.pureWhite,
}
secondary: {
color: colors.blue,
}
}
}`
Hey, wanted to get a discussion going about this.

With the switch from `styled-components` to `emotion` as the default css-in-js in version 4.0, I think it would make sense to have the [DefinetlyTyped typings](https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/rebass) follow suit.

Right now the types have been updated to match Rebass 4.0 - But, they are using `styled-components` as the base. This works for the most part, except for `css` prop, which conflicts with the Emotion definition. Sure you might mostly be using the `sx` prop for styling Rebass, but it will result in an error if you try to create a component that composes the `BoxProps`.

```ts
// This causes a TypeScript error when using Emotion
type Props = BoxProps & {
 customProp: string
}
```

Basically the problem is this definition:

```ts
export interface BaseProps extends React.RefAttributes<any> {
    as?: React.ElementType;
    css?:
        | StyledComponents.CSSObject
        | StyledComponents.FlattenSimpleInterpolation
        | string;
}
```

It should look like this when using Emotion:
```ts
export interface BaseProps extends React.RefAttributes<any> {
    as?: React.ElementType;
    css?: InterpolationWithTheme<any>
}
```

I'm not 100% sure of the best way to handle this in DefinetlyTyped, but I think it would make sense to have them split:
- `@types/rebass`
- `@types/rebass_styled-components` or `@types/rebass/styled-components`

I've been trying to get it solved in this [pull request ](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/38433)  but surprisingly hard to get the build to pass. I might just try again in a new branch. I've created a local copy of the typings, that are working fine on the project i'm working on.

See also #664 which is caused by this issue.
In response to this issue https://github.com/rebassjs/rebass/issues/471 I created this PR. I am not very seasoned in working with build systems, but from my local testing it looks like i achieved the umd build to be compatible with unpkg.com