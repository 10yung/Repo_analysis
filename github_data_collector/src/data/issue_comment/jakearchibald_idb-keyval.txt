We are getting this error when writing from some of our users (all Chrome).  Resetting their DB fixes it, but that isn't a great solution.  Restarting the browser etc doesn't work, it is permanently broken.

The only reference I can find to this error is here: https://github.com/localForage/localForage/issues/788

And indeed we switched to using idb-keyval based on the recommendation in that github issue, but it happens with idb-keyval as well.

I don't think this is an issue with idb-keyval, but I am hoping someone might have some insight into where this comes from.
Adding `getAll`.
update typescript version,
removed `missing-types.d.ts`
Fixes #31
Fixes #69

Thank you @goofballLogic for the major head start!

Found #69 and merged the logic into one constructor and removed duplicate code.  

Thought process: If the `Store` constructor has support for a named object store, then it should always exist after calling `new Store("dbName", "storeName")`.
Hi,

It would be really great to add a new function that completely deletes a custom database if it was used. Basically expose `indexedDB.deleteDatabase(customDB)` and `dbInstance.deleteObjectStore(name)`.

Something along the lines of:

```js
import { Store, set } from 'idb-keyval';

const custom = new Store('custom-db-name', 'custom-store-name')
custom.deleteDatabase()

```
I would like to see an Ethereum name or address added to the ethereum field of the package.json file. This will allow consumers of the project to know a cannonical address to send funds to. For example, I'm building an application that will allow developers to automatically donate ETH to all of their npm dependencies that have Ethereum addresses in their package.json files: https://sustainus.io
For #31 

If an object store is missing from a database, re-opens the database as the next version in order to allow upgrade to add the missing object store.
Because this lib use class in dist code, it can't work in IE 11, so we need to translate it with babel like:
```javascript
// webpack config
{
        test: /\.m?js$/,
        use: 'babel-loader',
        exclude: file => {
          return /node_modules/.test(file)  && !/idb-keyval/.test(file);
        }
      },
```
But webpack compiling failed with:
![image](https://user-images.githubusercontent.com/1826003/58794339-8cc54e00-862a-11e9-9884-efdbb50f304f.png)


Would you accept a pull request to extend the API ever so slightly? The idea would be to allow batched setting of data with a `setMany`:

```
async function setMany(entries): {
  return store._withIDBStore('readwrite', store => {
    entries.forEach(entry => {
      store.put(entry, entry.f);
    });
  });
}
```
Testing locally, this allows for much faster batch processing.
Fixes #64

This complicates the code a bit, but I think it's a reasonable way to solve #64. It adds a new function, `close()`, which closes the IDB connection. If you call any other API after that, the connection is reopened.
First off, love this little library; it saves me a lot of time. Thanks for writing it. :)

According to Google's [Page Lifecycle API best practices](https://developers.google.com/web/updates/2018/07/page-lifecycle-api#developer-recommendations-for-each-state) it's a good idea to close any IDB connections when transitioning to a "frozen" state. It would be convenient if this library provided a way to do this.