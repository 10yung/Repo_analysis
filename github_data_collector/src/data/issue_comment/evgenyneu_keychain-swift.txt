In the readme it says that you could not get MacOS Sync to work. Is that still the case?
Added Access options to the get parameters with a default option set. As posted in:

https://github.com/evgenyneu/keychain-swift/issues/78#issuecomment-549045569

This provides a way for the developer to specify the same accessibility level that they saved the keychain item as to query out the keychain item. By default it is set to when unlocked, but it can be default to be afterFirst unlock to be able to access in the background

Also Added some basic tests to validate the passing of the access options for the get parameter.

This PR fixes some threading issues with the library mainly caused by the incorrect assumption that Swift variables are atomic.
With this fix, the lock introduced by #68 is no longer useful, assuming that KeyChain is thread-safe as Apple docs say so. Besides, the ConcurrencyTests run fine without the lock (with a fix in the tests themselves).

Please consider submitting the following information (if relevant):

* Library setup method: CocoaPods
* Version of the library. Example: 16.0.1
* OS version. Example: iOS 13.1.0

Here, I am facing while deleting the value from the keychain. This crash is observed once only till now.

NSOperationQueue 0x102835d40 (QOS: UNSPECIFIED)
0  libsystem_kernel.dylib         0x1a04875f4 mach_msg_trap + 8
1  libsystem_kernel.dylib         0x1a0486a60 mach_msg + 72
2  libdispatch.dylib              0x1a03397f8 <redacted> + 564
3  libdispatch.dylib              0x1a0339bc0 <redacted> + 52
4  libxpc.dylib                   0x1a027d544 xpc_connection_send_message_with_reply_sync + 236
5  Security                       0x1a14d62f4 securityd_message_with_reply_sync + 96
6  Security                       0x1a14d6d08 securityd_send_sync_and_do + 80
7  Security                       0x1a154ed40 <redacted> + 248
8  Security                       0x1a154e49c <redacted> + 312
9  Security                       0x1a154cdbc <redacted> + 124
10 Security                       0x1a154d750 <redacted> + 504
11 Security                       0x1a154b3d8 SecOSStatusWith + 48
12 Security                       0x1a154dd78 SecItemDelete + 468
13 KeychainSwift                  0x101652a28 $s13KeychainSwiftAAC12deleteNoLockySbSSF + 704
14 KeychainSwift                  0x101652740 $s13KeychainSwiftAAC6deleteySbSSF + 52

Is there any solution available for this crash or anyone else is facing crash like this.
Please consider submitting the following information (if relevant):

* Library setup method: file, Carthage, CocoaPods or Swift Package Manager.
* Version of the library. Example: 8.0.
* Xcode version. Example: 8.3.3.
* OS version. Example: iOS 10.3.2.

I used keychain for store identifier device

`
class IOSDeviceManager {

    static let shared = IOSDeviceManager()
    var identifier: String {
        if let deviceId = keychain.get(deviceIdString) {
            return deviceId
        } else {
            let deviceId = UIDevice.current.identifierForVendor?.uuidString ?? ""
            keychain.set(deviceId, forKey: deviceIdString)
            return deviceId
        }
    }
}

`

It worked perfect when I uninstalled then reinstall. But I don't know sometime IOSDeviceManager.shared. identifier get new value.
Do you know any reason?
Hi, 

I would like to know do we have a Calabash-iOS library dependency in Keychain-swift library. I am getting X-Platform-example component dependency warning during black duck scan. It seems the calabash library is under GNU license. Please confirm. 

* Library setup method: CocoaPods 
* Version of the library: Latest
* Xcode version: 10.1
* OS version. Example: iOS 11.


Hi, i'm using the 13.0 version and I'm keep crashing whenthe pod runs into this method:

```swift
/// Returns the key with currently set prefix.
  func keyWithPrefix(_ key: String) -> String {
    return "\(keyPrefix)\(key)"
  }
```
Here the stack trace and the console:

<img width="1659" alt="Schermata 2019-05-27 alle 21 59 23" src="https://user-images.githubusercontent.com/11211914/58437623-0c9f6580-80cb-11e9-92da-8a3441a8d6d3.png">

I'm having this issue only in the vendored framework version of my library. (meaning a framework).

If I run the exactly same code in the not vendored version (normal pod) the code works fine.
I am currently trying to use the iOS Keychain feature for within an Unity App.
The ultimate goal is to store data between apps.
I have set up the communication and followed tutorials online about keychain.

Using this GitHub I wrote the following code:

     ` let keychain = KeychainSwift()
        keychain.accessGroup = "MyTeamPrefix.myKeychainGroup1"
        // MyTeamPrefix is the actual 10 char string from Apple Developer

        if keychain.set("hello world", forKey: "my key") {
            // Keychain item is saved successfully
        } else {
            print(keychain.lastResultCode)
        }
`


Unfortunately it does not set a new Keychain Item,
but instead prints **-25243**

This is referring to the access group I set to the keychain object.
It says that I am not authorised to set new keychain items.
When I do it without setting the keychain it works fine.

**What I did**

In my eyes I did everything right to the following tutorial:
https://evgenii.com/blog/sharing-keychain-in-ios/
I created a keychain group (entitlements says: $(AppIdentifierPrefix)myKeychainGroup1)
I got the prefix for Apple Developer for this right bundle id (same prefix as for my other apps anyways)
Then I wrote the code, but it does not work.

I don't know what to do at this point.
I went through a lot of online post, but no solution.
Every help is well appreciated.
Cheers

PS: The code runs on a real device.

Similar post that didn't help as far as I tested:
https://stackoverflow.com/questions/7989258/ios-keychain-secitemadd-returns-25243




Somehow, if I try to use the accessGroup feature, I get an [errSecMissingEntitlement](https://developer.apple.com/documentation/security/1542001-security_framework_result_codes/errsecmissingentitlement) (-34018) error.  
I don't have manual profiles, but use "Xcode Managed Profile" for the Provisioning Profile. ("Automatically manage signing").  
I activated "Keychain Sharing" in "Capabilities" and added "com.myname.appname.keychainGroup" which is how I initialise my KeychainSwift object:  


```
let keychain: KeychainSwift = {
    let k = KeychainSwift(keyPrefix: "unixb0y_")
    k.accessGroup = "com.myname.appname.keychainGroup"
    return k
}()
```

FYI, also in the entitlements file, there is an entry with the correct name.
* Library setup method: CocoaPods
* Version of the library: 8.0.
* Xcode version: 10.1.
* OS version. iOS 11-12

Hello, 
some users of my app are facing a random crash while setting a string in the keychain.

I found only this few lines inside the crashlytics log:

```
#9. Crashed: com.apple.root.default-qos
[...]
25 KeychainSwift                  0x10513e408 $S13KeychainSwiftAAC6deleteySbSSF + 636
26 KeychainSwift                  0x10513d664 $S13KeychainSwiftAAC3set_6forKey10withAccessSb10Foundation4DataV_SSAA0abG7OptionsOSgtF + 108
27 KeychainSwift                  0x10513db20 $S13KeychainSwiftAAC3set_6forKey10withAccessS2b_SSAA0abG7OptionsOSgtF + 220
```

This crash affected only 0,1% of my app users, so i can't figure it out which could be the cause.

Help me to investigate, I'd really appreciate it,
Thanks

