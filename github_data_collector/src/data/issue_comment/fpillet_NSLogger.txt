
This happens in our project because the first ClientInfo message received
only contains the application name and version, but not the OS details.
Afterwards a second ClientInfo is received with the full metadata set,
but by that time the connection has already been attached to a new
window.

I'm not sure if this is something we could fix in our project by
initializing NSLogger differently.
Hi,

I'm trying to use `NSLogger` in Xcode `XCTest`s running on the simulator with the desktop viewer running on a separate computer over wifi. I read the advice about using `LoggerFlush(nil, true`). This works much of the time, but if I don't run a test for a while, the first run will hang on the following line.

https://github.com/fpillet/NSLogger/blob/7c3255dac0a2e160de3672e731d3829ab6f71ae4/Client/iOS/LoggerClient.m#L598

Most often, I can kill the process and rerun and `LoggerFlush` will return and the desktop viewer will show the logs.

If I allow it to timeout (about 4/5 minutes), `xctest` reports:
```
nw_socket_handle_socket_event [C1.1.1:1] Socket SO_ERROR [60: Operation timed out]
nw_connection_get_connected_socket [C1] Client called nw_connection_get_connected_socket on unconnected nw_connection
```

Could anyone suggest a direction of investigation?

Here are the NSLogger console logs from a successful round-trip:

```
default	17:43:34.396914 +0100	NSLogger	TCP Conn [59:0x600000d88540] using empty proxy configuration
default	17:43:34.396952 +0100	NSLogger	Stream client bypassing proxies on TCP Conn [59:0x600000d88540]
default	17:43:34.396976 +0100	NSLogger	TCP Conn 0x600000d88540 started
default	17:43:34.397165 +0100	NSLogger	[C59 IPv6#a5ef142f.49857 tcp, local: IPv6#6b40a382.60544, legacy-socket, server] start
default	17:43:34.397455 +0100	NSLogger	TCP Conn [60:0x600000dd8600] using empty proxy configuration
default	17:43:34.397528 +0100	NSLogger	Stream client bypassing proxies on TCP Conn [60:0x600000dd8600]
default	17:43:34.397558 +0100	NSLogger	TCP Conn 0x600000dd8600 started
default	17:43:34.397943 +0100	NSLogger	nw_connection_report_state_with_handler_locked [C59] reporting state preparing
default	17:43:34.397985 +0100	NSLogger	nw_endpoint_flow_protocol_connected [C59 IPv6#a5ef142f.49857 in_progress socket-flow (satisfied)] Output protocol connected
default	17:43:34.398401 +0100	NSLogger	nw_connection_report_state_with_handler_locked [C59] reporting state ready
default	17:43:34.398516 +0100	NSLogger	[C60 IPv4#819d78c4:49858 tcp, local: IPv4#bfdea447:60544, legacy-socket, server] start
default	17:43:34.398605 +0100	NSLogger	TCP Conn 0x600000d88540 event 1. err: 0
default	17:43:34.398821 +0100	NSLogger	TCP Conn 0x600000d88540 complete. fd: 96, err: 0
default	17:43:34.399158 +0100	NSLogger	TCP Conn 0x600000d88540 starting SSL negotiation
default	17:43:34.399285 +0100	NSLogger	nw_connection_report_state_with_handler_locked [C60] reporting state preparing
default	17:43:34.399384 +0100	NSLogger	nw_endpoint_flow_protocol_connected [C60 IPv4#819d78c4:49858 in_progress socket-flow (satisfied)] Output protocol connected
default	17:43:34.399904 +0100	NSLogger	nw_connection_report_state_with_handler_locked [C60] reporting state ready
default	17:43:34.400086 +0100	NSLogger	nw_socket_handle_socket_event [C60:1] Socket received READ_CLOSE event
default	17:43:34.400127 +0100	NSLogger	TCP Conn 0x600000dd8600 event 1. err: 0
default	17:43:34.400238 +0100	NSLogger	TCP Conn 0x600000dd8600 complete. fd: 97, err: 0
default	17:43:34.412278 +0100	NSLogger	TCP Conn 0x600000dd8600 starting SSL negotiation
default	17:43:34.412346 +0100	NSLogger	CFNetwork SSLHandshake failed (-9806)
error	17:43:34.412401 +0100	NSLogger	TCP Conn 0x600000dd8600 SSLHandshake failed (-9806)
default	17:43:34.412547 +0100	NSLogger	TCP Conn 0x600000dd8600 canceled
default	17:43:34.412585 +0100	NSLogger	[C60 IPv4#819d78c4:49858 tcp, local: IPv4#bfdea447:60544, legacy-socket, server] cancel
default	17:43:34.412740 +0100	NSLogger	[C60 IPv4#819d78c4:49858 tcp, local: IPv4#bfdea447:60544, legacy-socket, server] cancelled
	[C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858]
	Connected Path: satisfied (Path is satisfied), interface: en0, scoped, ipv4, dns
	Duration: 0.014s, , TCP @0.000s took 0.002s
	bytes in/out: 0/0, packets in/out: 1/0, rtt: 0.006s, retransmitted packets: 0, out-of-order packets: 0
default	17:43:34.412792 +0100	NSLogger	0.000s [C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858 socket-flow] path:start
default	17:43:34.412832 +0100	NSLogger	0.000s [C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858 socket-flow] path:satisfied
default	17:43:34.412867 +0100	NSLogger	0.000s [C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858 socket-flow] flow:start_connect
default	17:43:34.412900 +0100	NSLogger	0.001s [C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858 socket-flow] flow:finish_connect
default	17:43:34.412936 +0100	NSLogger	0.001s [C60 <private> 192.168.86.134:60544<->IPv4#819d78c4:49858 socket-flow] flow:changed_viability
default	17:43:34.412967 +0100	NSLogger	0.014s [C60] path:cancel
default	17:43:34.413103 +0100	NSLogger	nw_endpoint_flow_protocol_disconnected [C60 IPv4#819d78c4:49858 cancelled socket-flow (null)] Output protocol disconnected
default	17:43:34.413153 +0100	NSLogger	nw_connection_report_state_with_handler_locked [C60] reporting state cancelled
default	17:43:34.421522 +0100	NSLogger	TCP Conn 0x600000d88540 SSL Handshake DONE
default	17:43:34.910507 +0100	NSLogger	nw_socket_handle_socket_event [C59:1] Socket received READ_CLOSE event
``` 
Hi,
I'm new to NSLogger, and am enjoying seeing logs in this modern way and on a second laptop screen. I was wondering if there was a reason that `stdout` and `stderr` are marked with `level` **0**?
All my current logging is coming out nicely, but it's marked in RED!

Is there a way to configure this? I tried using the `Advanced Colors` regex, but surprisingly, `tag=stdout` colored the tag cell, not the message.

thanks for a great project!

Daniel

https://github.com/fpillet/NSLogger/blob/c75ac1d5077bdeea8d0c71d566cfa75448710cad/Client/iOS/LoggerClient.m#L1211
Is it possible to implement support for installing using Swift Package Manager? 

This could be quite useful now that starting with Xcode 11 there is first class support for spm in the IDE.
Hi,

My team is using NSLogger also to display logs that were generated by field users. This means that the file might contain multiple days of logging. Thus, it would be really helpful to display also the day / month / year in the log message in UI.

I understand that this might take some width space from the actual message text. If that is a problem, we could have a button like "Show / hide function names" that toggles between a short date format and a long date format that also contains the day, month, year information.

If you think this change could be beneficial, I could make a PR with the change.

Thanks!
Hi,

I've noticed that the `NSLoggerData` files generated before 10th December are not compatible anymore with newer versions of `NSLogger`. The logs will not appear in `NSLogger` if I try to open an .nslogger file.

In the commit with hash eef947f it seems like the LoggerConnection.m file was modified. In the `initWithCoder` method, the keys are different. That means file that were generated, for example, with key "message" and not compatible now with newer version because they are using key "_message".

Was this intended? If not, I have a fix this in a fork. Let me know if you want me to push a PR.

NSLogger is great! Thanks!
Hi,

In LoggerClient.m I'm receiving an error in the routine LoggerLogToConsole:
`Definition of 'tm' must be imported from module 'Darwin.C.time' before it is required`
I found similar issues from a couple of years ago to #import <sys/time.h> would solve it, however, you already do that and the problem persists.

Any thoughts?
I'm unsure if anyone else is experiencing this but I'm having major issues getting bonjour setup to work smoothly. The app / client side connects to NSLogger simply using `LoggerSetupBonjourForBuildUser()`. I'm running latest version (1.9) of the desktop app and I'm on Mojave, using XCode 10. Testing with iOS simulator.

If I run NSLogger desktop app I can see the service running just fine. I confirmed by running `dns-sd -B _nslogger-ssl` and I can see the instance with the correct name.

I've printed out debug statements and can see NSLogger is correctly trying to attach to the correct instance name, no problem.

Ultimately it just hangs and I see the console say 
"-> configuring SSL"
"-> stream open attempt, waiting for open completion"

Eventually it will try again and usually fail. Maybe after 10 minutes it will connect. Not sure why.

I tried rebooting my router to see if anything funky was going on, and nothing really changed. However, during the reboot when I had no wifi connection it all of sudden started working?! I tested this theory by turning wifi on / off multiple times. If I turned off wifi it ALWAYS worked instantly, but as soon as I turned wifi back on, nslogger would go back to hanging with console output simply ending in "-> stream open attempt, waiting for open completion" again. Its great I found a way to get it to connect...however if my wifi is off I can't get that far into testing the application.

Note: This is my home setup. Which is almost 100% wifi, I don't necessarily have the means to easily plug in. I'm unsure if its a Wifi issue in general or specific to my router (I'm using an apple airport extreme). In the office on the other hand, I'm almost exclusively on wired ethernet, and I never seem to have issues there. 

Curious to see if anyone else having issues.

## Environment

NSLogger 1.9.0 for iOS

## Problem

I've noticed the worker thread does not lock when reading the value of `logger->host`. This mean we can release the previous value in `LoggerSetViewerHost` while the worker thread is using it.

The following code causes the application to crash (about 50% of the time) in `LoggerStartReachabilityChecking`, `CFStreamCreatePairWithSocketToHost`, or `CFWriteStreamOpen`.

```swift
LoggerSetViewerHost(nil, "192.168.1.25" as CFString, 19399)
LoggerStart(nil)
for _ in 0...999999 {
    LoggerSetViewerHost(nil, "192.168.1.25" as CFString, 19399)
}
``` 

You're probably asking yourself:

> But who would do such a stupid thing?!

🙋‍♂️

I've observed this crash in production code where the `LoggerSetViewerHost` function is called before each call to `LogMessage` (the viewer host is configured on the server and may change during the application lifetime).

## Workaround

The issue can be avoided by creating a different `Logger` when the viewer host changes.

## Fixing the issue

I'd be happy to work on this issue I you think it's worth solving (the workaround works great for me but maybe other developers are/will be affected by this issue).

### Proposal

The `Logger` struct could be partitioned with a protected and an unprotected part. The protected part would be accessible only to the worker thread. The unprotected part would be accessible from everywhere and require locking. When a change is signalled to the worker thread, the new value is copied from the unprotected part to the protected part.

### Alternatives

The `LoggerSetViewerHost` function could be modified to be a NO-OP when the new host and port are equal to the previous ones. This is trivial and would prevent most crashes (how often does the host actually change?) but not all of them.

Calls to `pthread_mutex_lock` and `pthread_mutex_unlock` could be added whenever `logger->host` is used. I think this would be very error-prone.
