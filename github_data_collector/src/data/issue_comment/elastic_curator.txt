## To submit a bug or report an issue
When doing reindex, occasionally in 5-7% of cases I get 
```Failed to complete action: reindex.  <type 'exceptions.KeyError'>: 'indices'```

### Expected Behavior
The task I have is quite simple - I get all index names that are readonly, and then one by one for each index:
- I create I new index with needed settings;
- I start reindex task;
- I delete source index;
 I do it with AWS Elasticsearch. It works as it should, but sometimes fails.

### Actual Behavior
The task runs fine, but sometimes (I could only connect it with big number of running reindex tasks) I get:
```
2020-01-15 11:11:27,316 INFO      Trying Action ID: 18, "reindex": Reindex ark-r2-node-2020.01.14
2020-01-15 11:11:29,081 ERROR     Failed to complete action: reindex.  <type 'exceptions.KeyError'>: 'indices'
```
As I have a lot of reindex tasks - I get such error 5-7 times out of 100 (and this is oncce in an hour). There's no pattern, it could be any index at any time. The index could be 30Mb, could be 40Gb. It always reindexes from 3 primary 1 replica to 1 primary 1 replica index.


### Specifications
AWS ES 7.1
Curator 5.8.1

## Context (Environment)
Can we somehow catch this error and do retry? Maybe it is happening because index for reindex is in process of creation, and we can add delay option? Or maybe there's even a way to catch the verbose output to define the reason?



## Proposed Changes
https://www.elastic.co/guide/en/elasticsearch/client/curator/5.8/python-source.html
The instructions for installing from source don't specify which github repository or project to download the tarball from - there's just a generic `username/project` in the url.

Changed to show the actual username (`elastic`) and the project (`curator`).

Hi,

I am creating this ticket for requesting a new feature on the curator side. Often there are cases when ElasticSearch indices are converted to read-only mode. For cases, where indices are rarely queried enabling replicas often seems be a costly option. If the snapshot/restore feature is enabled, those indices can be easily restored back from the backups.

Currently I don't see a way to define rules inside curator file to automatically restore indices from the last backup if they move to UNASSIGNED state. What are your thoughts about implementing this functionality on the curator end?


Running the following command:
```
curator_cli --config curator.yml show_indices --filter_list '[ {
"filtertype":"age",
"source":"field_stats",
"direction":"older",
"unit":"days",
"unit_count":3,
"field":"timestamp",
"stats_result":"min_value"
}]'
```

I think this is triggered by this check https://github.com/elastic/curator/blob/master/curator/defaults/filtertypes.py#L15 which expects an action.

### Expected Behavior

Test the filter with no error shown.

### Actual Behavior

I get the following errors while validating the filter:
```
2020-01-02 17:58:26,084 DEBUG     curator.cli_singletons.cli_action.show_indices          check_filters:119  Validating provided filters: [{u'direction': u'older', u'stats_result': u'min_value', u'field': u'timestamp', u'filtertype': u'age', u'source': u'field_stats', u'unit_count': 3, u'unit': u'days'}]
2020-01-02 17:58:26,085 DEBUG     curator.validators.SchemaCheck               __init__:26   Schema: <function f at 0x1042e6758>
2020-01-02 17:58:26,085 DEBUG     curator.validators.SchemaCheck               __init__:27   "filters" config: [{u'direction': u'older', u'stats_result': u'min_value', u'field': u'timestamp', u'filtertype': u'age', u'source': u'field_stats', u'unit_count': 3, u'unit': u'days'}]
2020-01-02 17:58:26,085 DEBUG     curator.defaults.filtertypes                    age:55   AGE FILTER = [{'direction': Any('older', 'younger', msg=None)}, {'unit': Any('seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years', msg=None)}, {'unit_count': Coerce(int, msg=None)}, {'unit_count_pattern': Any(<type 'basestring'>, msg=None)}, {'epoch': Any(Coerce(int, msg=None), None, msg=None)}, {'exclude': Any(<type 'bool'>, All(Any(<type 'basestring'>, msg=None), <function Boolean at 0x1042f6050>, msg=None), msg=None)}, {'source': Any('name', 'creation_date', 'field_stats', msg=None)}, {'timestring': Any(None, <type 'basestring'>, msg=None)}]
2020-01-02 17:58:26,085 DEBUG     curator.validators.SchemaCheck               __init__:26   Schema: {'source': Any('name', 'creation_date', 'field_stats', msg=None), 'direction': Any('older', 'younger', msg=None), 'timestring': Any(None, <type 'basestring'>, msg=None), 'exclude': Any(<type 'bool'>, All(Any(<type 'basestring'>, msg=None), <function Boolean at 0x1042f6050>, msg=None), msg=None), 'filtertype': Any(In(['age', 'alias', 'allocated', 'closed', 'count', 'empty', 'forcemerged', 'ilm', 'kibana', 'none', 'opened', 'pattern', 'period', 'shards', 'space', 'state']), msg="filtertype must be one of ['age', 'alias', 'allocated', 'closed', 'count', 'empty', 'forcemerged', 'ilm', 'kibana', 'none', 'opened', 'pattern', 'period', 'shards', 'space', 'state']"), 'unit_count': Coerce(int, msg=None), 'epoch': Any(Coerce(int, msg=None), None, msg=None), 'unit': Any('seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years', msg=None), 'unit_count_pattern': Any(<type 'basestring'>, msg=None)}
2020-01-02 17:58:26,085 DEBUG     curator.validators.SchemaCheck               __init__:27   "filter" config: {u'direction': u'older', u'stats_result': u'min_value', u'source': u'field_stats', u'filtertype': u'age', u'field': u'timestamp', u'unit_count': 3, u'unit': u'days'}
2020-01-02 17:58:26,086 ERROR     curator.validators.SchemaCheck                 result:65   Schema error: extra keys not allowed @ data[u'stats_result']
2020-01-02 17:58:26,086 ERROR     curator.validators.SchemaCheck                 result:65   Schema error: Configuration: filter: Location: singleton, filter #0: {u'direction': u'older', u'stats_result': u'min_value', u'source': u'field_stats', u'filtertype': u'age', u'field': u'timestamp', u'unit_count': 3, u'unit': u'days'}: Bad Value: "(could not determine)", extra keys not allowed @ data[u'stats_result']. Check configuration file.
2020-01-02 17:58:26,086 CRITICAL  curator.cli_singletons.cli_action.show_indices          check_filters:128  Unable to parse filters: Configuration: filters: Location: show_indices singleton action "filters": Bad Value: "None", Configuration: filter: Location: singleton, filter #0: {u'direction': u'older', u'stats_result': u'min_value', u'source': u'field_stats', u'filtertype': u'age', u'field': u'timestamp', u'unit_count': 3, u'unit': u'days'}: Bad Value: "(could not determine)", extra keys not allowed @ data[u'stats_result']. Check configuration file.. Check configuration file.
```

The printed schema doesn't include the `stats_result`, while it should be allowed as per [documentation](https://www.elastic.co/guide/en/elasticsearch/client/curator/5.7/filtertype_age.html#_field_stats_based_ages).
```
Schema:{
'source': Any('name', 'creation_date', 'field_stats', msg=None),
'direction': Any('older', 'younger', msg=None),
'timestring': Any(None, <type 'basestring'>, msg=None),
'exclude': Any(<type 'bool'>, All(Any(<type 'basestring'>, msg=None), <function Boolean at 0x1042f6050>, msg=None), msg=None),
'filtertype': Any(In(['age', 'alias', 'allocated', 'closed', 'count', 'empty', 'forcemerged', 'ilm', 'kibana', 'none', 'opened', 'pattern', 'period', 'shards', 'space', 'state']), msg="filtertype must be one of ['age', 'alias', 'allocated', 'closed', 'count', 'empty', 'forcemerged', 'ilm', 'kibana', 'none', 'opened', 'pattern', 'period', 'shards', 'space', 'state']"),
'unit_count': Coerce(int, msg=None),
'epoch': Any(Coerce(int, msg=None), None, msg=None),
'unit': Any('seconds', 'minutes', 'hours', 'days', 'weeks', 'months', 'years', msg=None),
'unit_count_pattern': Any(<type 'basestring'>, msg=None)
}
```

### System

  - Version: `curator_cli, version 5.8.1`
  - Platform: Python 2.7

Fixes https://github.com/elastic/curator/issues/1479

I am not 100% sure if we support the options (it should as they are the "default" additional options).

Let me know if I should squash the commits.

## Proposed Changes

  - Add/fix examples for freeze/unfreeze
  - Add documentation on the action page for freeze/unfreeze
building es-curator without cx_Freeze causes:

```
Traceback (most recent call last):
  File "setup.py", line 42, in <module>
    from cx_Freeze import setup, Executable
ModuleNotFoundError: No module named 'cx_Freeze'
```

because the try..except at https://github.com/elastic/curator/blob/master/setup.py#L143 matches `ImportError` not `ModuleNotFoundError`

please extend it to cover both exceptions (likely the second comes from a reorg of exceptions in python 3.8)
A common use case when shrinking indices consists of creating aliases of the shrunk indices using the names of the original indices.

The extra_setting `aliases` available is not clear in the [docs](https://www.elastic.co/guide/en/elasticsearch/client/curator/current/option_extra_settings.html#_shrink), and the purpose of it when using the shrink action to shrink multiple indices is not clear also.

It would be great if curator is able to create an alias using the original name of the index after having deleted the original index (`delete_after: True` should be mandatory for this to happen). This could easily be applied when the action is used to shrink multiple indices, as one alias will be created for every shrunk + deleted index.
## For usage questions and help
Please create a topic at https://discuss.elastic.co/c/elasticsearch
https://discuss.elastic.co/t/using-py-curator-shrink-method-hangs-on-es-7-x-aws-managed-service/210791

Perhaps a topic there already has an answer for you!

## To submit a bug or report an issue
<!--- Provide a general summary of the issue in the Title above -->
shrink using curator python never completes and the cluster status goes to unassigned shards.

AWS support explanation :

Cause of the issue: From ES 7.0 , Elastic deprecated the use of "copy_settings" parameter in the shrink api call and made "copy_settings=true" as the default value. There is no way to modify this parameter anymore. Reference --> https://www.elastic.co/guide/en/elasticsearch/reference/current/breaking-changes-7.0.html#copy-settings-deprecated-shrink-split-apis "copy_settings" --> allows users to specify whether they want the target index (shrunken index) to have the same index settings as the source index. Now, with "copy_settings" set to true in the shrink api calls for 7.x ES clusters, all the index settings from the target index including "index.routing.allocation.require._name" and "index.blocks.read_only" are also copied down to the target index. The above setting forces ES to assign shards of target index to a specific node that is defined in "index.routing.allocation.require._name" but with replicas enabled, ES cannot allocate replica of a primary shard onto the same datanode. So, Cluster settings prevent ES from allocating replicas onto the same datanode as primaries and index settings prevent the shards to be allocated to any other node but "index.routing.allocation.require._name" value. Previously, these settings were never inherited down to the shrunken indices as they

the workaround is to

Step1. Update the source index routing setting to a specific node and block all writes.
Step2. Perform Shrink operation.
Step3. Remove routing and write block settings from the shrunken index.

the workaround works, but I loose the benefit of using curator shrink DETERMINISTIC option ( https://www.elastic.co/guide/en/elasticsearch/client/curator/current/option_shrink_node.html ), automatically determines the node with most free space

anyone successfully ran shrink using curator on 7.x ES AWS cluster without any workarounds ?

### Expected Behavior
<!--- Tell us what should happen -->
single call to shrink method worked on 6.x versions of ES, but the same fails on ES 7.x
### Actual Behavior
<!--- Tell us what happens instead of the expected behavior -->
the method hangs and the cluster state changes to unassigned shards 

### Steps to Reproduce the Problem
<!--- Provide a link to a live example, or an unambiguous set of steps to -->
<!--- reproduce this bug. Include code to reproduce, if relevant -->
  1. call shrink with DETERMINISTIC option and it the operation never completes 
  1.
  1.

### Specifications

  - Version: 7.x
  - Platform:AWS managed service
  - Subsystem:


## Context (Environment)
<!--- How has this issue affected you? What are you trying to accomplish? --> we have a shrink and  merge python script built  on top of Curator and that works for ES 6.x and with 7.x Shrink breaks
<!--- Providing context helps us come up with a solution that is most useful in the real world -->

<!--- Provide a general summary of the issue in the Title above -->

## Detailed Description
<!--- Provide a detailed description of the change or addition you are proposing -->

### Expected Behavior
During a shrink action, curator checks the cluster health. If the cluster health is yellow, wait for a short period and check if the cluster recovers to continue.

### Actual Behavior
During a shrink action, curator checks the cluster health once: https://github.com/elastic/curator/blob/master/curator/actions.py#L2429 -- if that fails, curator is halted.

### Detailed Description
We typically run curator once a day in the early hours, and see sporadic failures due to cluster health. The majority of the time is bad timing: an index was created at the same time a shrink action occurs. We're typically shrinking 200 indices in one cluster, during one curator run, so while it's bad timing it does affect us regularly enough to warrant guarding against this.


I was thinking of changing that health check to use the wait_for_it health check: https://github.com/andytumelty/curator/commit/ecc57679b4098aa55d1015b8cb406b4c5875e3c0 -- is this a terrible idea?
### Expected Behavior
`delete_snapshots` action shouldn't fail if there's a read-only snapshot-related task (e.g. `cluster:admin/snapshot/get`).

### Actual Behavior
`delete_snapshots` action fails with the following error:
```
Failed to complete action: delete_snapshots.  <class 'curator.exceptions.FailedExecution'>: Unable to delete snapshot(s) because a snapshot is in state "IN_PROGRESS"
```

### Steps to Reproduce the Problem
  1. Execute long/never-ending read-only snapshots-related request/s.
  1. Execute Curator with a `delete_snapshots` action.

### Specifications

  - Version: 5.8.0
  - Platform: Docker on Ubuntu 18.04
  - Subsystem: Python 2.7


## Context (Environment)
We have a scheduled retention job for our ES backups, it started to fail on one of our clusters recently with the error mentioned above. According to Curator's code it might happen if there are snapshots in progress or if there's an active snapshot-related task. In our case there are no snapshots in progress but there are active `cluster:admin/snapshot/get` tasks all the time. We're still investigating the source of those tasks (it didn't happen before) but it shouldn't block Curator from deleting snapshots IMO.

## Detailed Description
We're able to delete snapshots using the ES API directly so unless there's a good reason to block this action on all snapshot-related tasks I think it's safe to exclude read-only tasks [here](https://github.com/elastic/curator/blob/bc0665d712ed076a7d6bb5aa0fe9ada8bc8e4de2/curator/utils.py#L1171). Not sure if only `cluster:admin/snapshot/get` tasks should be excluded or there are more potential tasks worth excluding. WDYT? 