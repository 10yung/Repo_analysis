Is there a possibility to justify text blocks? If not could you please implement it?
When I use a font file to write PDF, when the file contains unsupported characters. Expect to return an obvious error instead of an error "jung-kurt/gofpdf/fpdf.go:2789". Or you can skip unsupported data，Continue to write。

location:
jung-kurt/gofpdf/fpdf.go:2789  ==》 l += float64(cw[int(c)])

error:
panic: runtime error: index out of range [127775] with length 65536 [recovered]
	panic: runtime error: index out of range [127775] with length 65536
Hello,
First of all, thanks so much for the great library, it's awesome!

Currently I am using this font (_https://fonts.google.com/specimen/Tajawal?selection.family=Tajawal_). I downloaded the ".ttf" file, and use it as follows:

_pdf.RTL()
pdf.AddUTF8Font("tajawal", "", "Tajawal-Regular.ttf")_

The result is: ب س م ا ل ل ه ا ل ر ح م ن ا ل رح ي م
While it should be: بسم الله الرحمن الرحيم

Is there anything else I can do to be able to generate Arabic text? By the way, the Arabic text in the test-case _ExampleFpdf_AddUTF8Font_ are generated in the same way (not connected), and I also tried different fonts, all lead to the same result.
Hello everyone! This is my first question at Github! 
My task is to check how many pages contain a pdf document and if it has less than 8 pages print it silently. I'm using this imports
```
	"github.com/jung-kurt/gofpdf"
	"github.com/jung-kurt/gofpdf/contrib/gofpdi"
```
and code below
	```
		
	                       var err error

				pdf := gofpdf.New("P", "mm", "A4", "")

				pdfBytes, err := ioutil.ReadFile(DocName)
				if err != nil {
					panic(err)
				}
				rs := io.ReadSeeker(bytes.NewReader(pdfBytes))
				// Import in-memory PDF stream with gofpdi free pdf document importer
				imp := gofpdi.NewImporter()

				// import first page and determine page sizes
				tpl := imp.ImportPageFromStream(pdf, &rs, 1, "/MediaBox")
				pageSizes := imp.GetPageSizes()
				nrPages := len(imp.GetPageSizes())

				// add all pages from template pdf
				for i := 1; i <= nrPages; i++ {
					pdf.AddPage()
					if i > 1 {
						tpl = imp.ImportPageFromStream(pdf, &rs, i, "/MediaBox")
					}
					imp.UseImportedTemplate(pdf, tpl, 0, 0, pageSizes[i]["/MediaBox"]["w"], pageSizes[i]["/MediaBox"]["h"])
				}
				pdf.OutputFileAndClose(DocName + "test")

				pages := pdf.PageCount()
				fmt.Println(pages)

nrPages and pages is a places where I'm trying to get number of pages. And it's not always gives me proper number, but I really need it, sometimes I'm receiving files that contain up to 800 pages and I don't want to print them. I'm new at go, using it only for a week and maybe I just did something wrong. Here is a two examples of files, one returns proper number of pages the other one is giving a wrong number. The result files is those that I'm saving by trhis:
`pdf.OutputFileAndClose(DocName + "test")`
[Incorrect number of pages.pdf](https://github.com/jung-kurt/gofpdf/files/3762847/Incorrect.number.of.pages.pdf)
[Incorrect result.pdf](https://github.com/jung-kurt/gofpdf/files/3762848/Incorrect.result.pdf)
[Proper number of pages.pdf](https://github.com/jung-kurt/gofpdf/files/3762849/Proper.number.of.pages.pdf)
[Proper result (2).pdf](https://github.com/jung-kurt/gofpdf/files/3762850/Proper.result.2.pdf)

Next step is to print it. So I've found solution with cmd and Acrobat Reader DC.  It's here "C:\Program Files (x86)\Adobe\Acrobat Reader DC\Reader\AcroRd32.exe" /t  D:\reports\print.pdf"  "HP LaserJet 1018" "oem34.inf" "USB001".

Or maybe I will use a browser in kiosk-printing regime and browser extension that will do window.print().

So far I haven't found any better solution, but I'm going to dig it somehow. Thank you for your attencion. 
Wondering if there is any information about how to managing printing on desktops in golang.

This is the sequence I am trying to achieve 

After the user has selected a pdf template and my code has merged data into the pdf I want to let the user print it.

Opens the print dialogue for the OS.
User selects printer, orientation, paper side.
The orientation and paper size is used to defender the pdf correctly.
Then user is show new pdf 
Then user confirms and prints 
Then system send to print spooler.

Am looking for tips about how to access these OS specific APIs.
It's not PDF related but I would think others may find this useful. 
Hoping I can work this out and put into contribution repo 




Based on this page https://github.com/jung-kurt/gofpdf/blob/master/contrib/gofpdi/gofpdi_test.go currently I have document with multiple orientation page. Legal page with portrait orientation and legal page with landscape orientation. After  run code, unfortunately all of pages become legal portrait orientation. Some of content inside pages become stretch too.
Thanks!
When parsing an svg before writing it to a pdf using SVGBasicParse(), if the svg contains <g> tags then it does not appear on the pdf. My current workaround is to remove the <g> tags from the svg manually however, it would be convenient to remove this extra step.
> improve : high memory footprints

`Hello, our service uses your gopdf framework and has a high memory footprint. feedback`

![20190910171106](https://user-images.githubusercontent.com/52339367/64600879-7af40380-d3ee-11e9-838a-45460c7beda0.png)

![20190910171519](https://user-images.githubusercontent.com/52339367/64601028-bdb5db80-d3ee-11e9-9205-287d38e0aa66.png)

It seems gofpdf does not support font kerning at the moment. For example, when outputting "Tourist" with Arial font:

Result of gofpdf:
![image](https://user-images.githubusercontent.com/5000910/64242499-396be000-cf38-11e9-89fe-65ce3580d2ee.png)

Expected:
![image](https://user-images.githubusercontent.com/5000910/64242567-599b9f00-cf38-11e9-9dc0-921b28dee048.png)

Note the difference of the spacing between "T" and "o". Is there any way to apply font kerning?
I use MultiCell to generate a pdf, it works well when there is not missing symbols. But when there are some missing symbols, it will generate a text with some empty, please see the picture in the following.
```go
pdf := gofpdf.New("P", "mm", "A4", "font/")
pdf.AddUTF8Font("stsong", "", "stsong.ttf")
pdf.SetFont("stsong", "", 14)
pdf.AddPage()
txtStr, err := ioutil.ReadFile(fileName)

pdf.MultiCell(0, 7, string(txtStr), "", "", false)
if pdf.Err() {
    fmt.Println(pdf.Error())
    continue
}
pdf.Ln(-1)

err = pdf.OutputFileAndClose(fileName + ".pdf")
if err != nil {
    panic(err)
}
```
txt: 
![image](https://user-images.githubusercontent.com/31174102/63584905-806ce380-c5d0-11e9-9f72-def63dd105c0.png)


pdf: 
![image](https://user-images.githubusercontent.com/31174102/63584974-a72b1a00-c5d0-11e9-901b-9618261dabf9.png)

I would like to know whether there is a way to know the text will be empty when generating the pdf. 