i'm to keep track of chains like this `chains = [EAAnimationFuture]()` so i can call like this.
`chains.map { $0.cancelAnimationChain() }` but it saying `Use of unresolved identifier 'EAAnimationFuture'`


Hi, thanks for this very great library!

However the enable() function is no more accessible from objective c while the class is marked @objc.

Or am I missing something?

Regards,
Added a few convenience methods.

* UIView.animateAndChain without the delay and options parameters, for brevity in situations where those parameters aren't needed.

* EAAnimationFuture.wait - waits a specified duration before moving on to the next part of the chain.

* EAAnimationFuture.do - executes the input block instantly without animating. 
After the recent upgrade I see the following errors at EasyAnimation building:

<img width="537" alt="screen shot 2018-09-25 at 10 30 20" src="https://user-images.githubusercontent.com/2230377/45999329-06756700-c0ae-11e8-9daf-f526e4d5dbe5.png">
I used it and apparently a view that you chain animations on retains those. When you later trigger animations on the same view the previously chained animations get triggered again. Maybe there is a cleanup I donâ€™t know about?

*Reproduce*

1. Add a view and chain some animations
2. Animate the chain
3. When it is finished add some other animations in code
4. Start that animation.

*Bug*
The chained animations in 3 are added to the new animations. I don't feel this is the expected behaviour?
I just installed `2.0.0` and ran my app without doing any changes to my code.

EasyAnimation still swizzles **without** having called `EasyAnimation.enable()`.
Hey everyone, 
I recently got a beautiful newborn at home and it feels it'll be a bit difficult to add some new and fresh features to EasyAnimation... Should anyone feel like digging into the code and maybe add some new stuff folks would find cool - let me know :)

best, Marin
I think there is some small bug with the spring animation. The completion block it's never been called.

```swift
        var newFrame = view.frame
        newFrame.size.height = 50

        UIView.animate(
            withDuration: 1.25,
            delay: 0,
            usingSpringWithDamping: 0.65,
            initialSpringVelocity: 0.75,
            options: [],
            animations: {
                self.testLayer.frame = newFrame
        }) { _ in
            print("Tralala!")
        }
```