Hi! When enabling serde-transport feature, with version grabbed from crates.io(0.20.0), tarpc won't compile with error message specifying Serializer and Deserializer being not defined.

But if pulling tarpc from with git and tag.
`tarpc = { git = "https://github.com/google/tarpc/", tag = "v0.20.0", features = ["full"] }`
Tarpc compiles and runs correctly.

Maybe version on crates.io being outdated?
Tokio 0.2 now has support for spawning `!Send` futures. https://github.com/tokio-rs/tokio/releases/tag/tokio-0.2.2
This was removed in #267 and can be reintroduced once https://github.com/rust-lang/rust/pull/65778 hits stable.
there are two different pieces here:

1) The example service was showing a way of starting the server that's probably ill-advised - in particular, using `buffer_unordered` instead of `tokio::spawn` will lead to much worse performance. I also modified the example client to spin up a pool of connections and properly load test the service - if this isn't desirable (it might not be), I can put it behind an optional argument (`--load`?), and go back to the previous behavior when no argument is given.
2) I changed the codegen to emit less... bizarre Rust. In particular, I removed the templating over `C = tarpc::client::Transport` in the client, because when there's an equality constraint that's not actually a generic...
Title says it all. It would be great to have multiple instances of a service and a client can send requests to them all. I imagine it would need to be coupled with exponential backoff and some kind of dynamic discovery.

Are you open to funding to implement this?
Tokio's channel is truly bounded, whereas futures-rs channels have a slot reserved for each clone of the sender.
[Github page](https://google.github.io/tarpc) for this repository returns 404.
![google github io_tarpc](https://user-images.githubusercontent.com/1384378/63120261-408b7800-bfa2-11e9-85b2-8783b8985d73.png)

Technically non-'static requests are supported today, but it's difficult to reference them in a trait item if the trait isn't parameterized by the lifetime. More generally, it may be worth supporting type parameters on the declared traits.
here is the code
```
// Copyright 2018 Google LLC
//
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.

#![feature(async_await)]

use futures::{
    future::{self, Ready},
    prelude::*,
};
use rpc::{
    client, context,
    server::{BaseChannel, Channel},
};
use std::io;

/// This is the service definition. It looks a lot like a trait definition.
/// It defines one RPC, hello, which takes one arg, name, and returns a String.
#[tarpc::service]
pub trait World {
    async fn hello(name: String) -> String;
}

/// This is the type that implements the generated World trait. It is the business logic
/// and is used to start the server.
#[derive(Clone)]
struct HelloServer;

impl World for HelloServer {
    // Each defined rpc generates two items in the trait, a fn that serves the RPC, and
    // an associated type representing the future output by the fn.

    type HelloFut = Ready<String>;

    fn hello(self, _: context::Context, name: String) -> Self::HelloFut {
        future::ready(format!("Hello, {}!", name))
    }
}

#[tokio::main]
async fn main() -> io::Result<()> {
    // bincode_transport is provided by the associated crate bincode-transport. It makes it easy
    // to start up a serde-powered bincode serialization strategy over TCP.
    let mut transport = bincode_transport::listen(&"0.0.0.0:0".parse().unwrap())?;
    let addr = transport.local_addr();

    let server = async move {
        // For this example, we're just going to wait for one connection.
        let client = transport.next().await.unwrap().unwrap();

        // `Channel` is a trait representing a server-side connection. It is a trait to allow
        // for some channels to be instrumented: for example, to track the number of open connections.
        // BaseChannel is the most basic channel, simply wrapping a transport with no added
        // functionality.
        BaseChannel::with_defaults(client)
            // serve_world is generated by the tarpc::service attribute. It takes as input any type
            // implementing the generated World trait.
            .respond_with(HelloServer.serve())
            .execute()
            .await;
    };
    tokio::spawn(server);

    let transport = bincode_transport::connect(&addr).await?;

    // WorldClient is generated by the tarpc::service attribute. It has a constructor `new` that
    // takes a config and any Transport as input.
    let mut client = WorldClient::new(client::Config::default(), transport).spawn()?;

    // The client has an RPC method for each RPC defined in the annotated trait. It takes the same
    // args as defined, with the addition of a Context, which is always the first arg. The Context
    // specifies a deadline and trace information which can be helpful in debugging requests.
    let hello = client.hello(context::current(), "Stim".to_string()).await?;

    eprintln!("{}", hello);

    Ok(())
}
```

and here is the error:

```
   Compiling tarpc-demo v0.1.0 (/home/quran/SourceCode/tarpc-demo)
error[E0706]: trait fns cannot be declared `async`
  --> src/main.rs:23:5
   |
23 |     async fn hello(name: String) -> String;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0433]: failed to resolve: use of undeclared type or module `rpc`
  --> src/main.rs:13:5
   |
13 | use rpc::{
   |     ^^^ use of undeclared type or module `rpc`

error[E0432]: unresolved import `rpc`
  --> src/main.rs:13:5
   |
13 | use rpc::{
   |     ^^^ use of undeclared type or module `rpc`

error[E0433]: failed to resolve: use of undeclared type or module `tarpc`
  --> src/main.rs:21:3
   |
21 | #[tarpc::service]
   |   ^^^^^ use of undeclared type or module `tarpc`

error[E0437]: type `HelloFut` is not a member of trait `World`
  --> src/main.rs:35:5
   |
35 |     type HelloFut = Ready<String>;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ not a member of trait `World`

error[E0433]: failed to resolve: use of undeclared type or module `bincode_transport`
  --> src/main.rs:46:25
   |
46 |     let mut transport = bincode_transport::listen(&"0.0.0.0:0".parse().unwrap())?;
   |                         ^^^^^^^^^^^^^^^^^ use of undeclared type or module `bincode_transport`

error[E0433]: failed to resolve: use of undeclared type or module `BaseChannel`
  --> src/main.rs:57:9
   |
57 |         BaseChannel::with_defaults(client)
   |         ^^^^^^^^^^^ use of undeclared type or module `BaseChannel`

error[E0433]: failed to resolve: use of undeclared type or module `bincode_transport`
  --> src/main.rs:66:21
   |
66 |     let transport = bincode_transport::connect(&addr).await?;
   |                     ^^^^^^^^^^^^^^^^^ use of undeclared type or module `bincode_transport`

error[E0433]: failed to resolve: use of undeclared type or module `WorldClient`
  --> src/main.rs:70:22
   |
70 |     let mut client = WorldClient::new(client::Config::default(), transport).spawn()?;
   |                      ^^^^^^^^^^^ use of undeclared type or module `WorldClient`

warning: unused imports: `BaseChannel`, `Channel`
  --> src/main.rs:15:14
   |
15 |     server::{BaseChannel, Channel},
   |              ^^^^^^^^^^^  ^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

error[E0599]: no method named `serve` found for type `HelloServer` in the current scope
  --> src/main.rs:60:39
   |
29 | struct HelloServer;
   | ------------------- method `serve` not found for this
...
60 |             .respond_with(HelloServer.serve())
   |                                       ^^^^^

error[E0220]: associated type `HelloFut` not found for `Self`
  --> src/main.rs:37:58
   |
37 |     fn hello(self, _: context::Context, name: String) -> Self::HelloFut {
   |                                                          ^^^^^^^^^^^^^^ associated type `HelloFut` not found

error: aborting due to 11 previous errors

Some errors have detailed explanations: E0220, E0432, E0433, E0437, E0599.
For more information about an error, try `rustc --explain E0220`.
error: Could not compile `tarpc-demo`.

To learn more, run the command again with --verbose.
```
https://github.blog/2019-08-08-github-actions-now-supports-ci-cd/