In its current implementation, the parser works recursively, which is fine if you are doing simple expression parsing. But once you start parsing a long series of tokens, a stack overflow may occur (such is the case in #162).

What I propose is to start reimplementing the parser in small logical chunks. This includes:
- eliminating recursive calls and making the parsing iterative
- trying to keep the expressions as linear as possible (e.g. binary operators being represented in [reverse polish notation](https://en.wikipedia.org/wiki/Reverse_Polish_notation), instead of a tree)

---

As I said, the work can be split into small chunks, such as:
- [ ] `var`
- [ ] `let`
- [ ] `const`
- [ ] `return`
- [ ] functions
- [ ] blocks
- [ ] `new`
- [ ] `if`, `else if`, `else` & ternary
- [ ] loops
- [ ] objects
- [ ] arrays
- [ ] `switch`
- [ ] `typeof`
- [ ] binary operators
- [ ] unary operators
- [ ] regular expressions

> Note: this list might not be exhaustive
Simple assignement with addition does not work when there is no space between first operand and  "+" or "-":
```
let a = 1+ 2;
```

This works though:
```
let a = 1 + 2;
```

Same with "-" binary operator.

```
thread 'main' panicked at 'Could not convert value to f64: ParseFloatError { kind: Invalid }', src/libcore/result.rs:1165:5
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:76
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:60
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1030
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:64
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:49
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:196
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:473
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:380
  12: rust_begin_unwind
             at src/libstd/panicking.rs:307
  13: core::panicking::panic_fmt
             at src/libcore/panicking.rs:85
  14: core::result::unwrap_failed
             at src/libcore/result.rs:1165
  15: core::result::Result<T,E>::expect
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/result.rs:960
  16: boa::syntax::lexer::Lexer::lex
             at src/lib/syntax/lexer.rs:401
  17: boa::parser_expr
             at src/lib/lib.rs:52
  18: boa::forward
             at src/lib/lib.rs:61
  19: boa::exec
             at src/lib/lib.rs:84
  20: boa::main
             at src/bin/bin.rs:57```
For example this fails
```
var a = 7;
console.log(5);

//console.log(6);
```

While these work:
```
var a = 7;
console.log(5);

console.log(6);
```
```
var a = 7;
console.log(5);
// something

```

OS: Ubuntu 19.10, uname 5.3.0-26-generic

This Pull Request changes the evaluation of `Const` values (Num, Bool, String) to use the specific prototype constructor to set all required properties and methods.

Resolves #210 
The rest operator has been implemented to arrays. `[a,b,...c]`
But it is not implemented for objects.

## test case

```js
const b = {
  a: 1,
  b: 2,
  c: 3
};

const a = {
  a: "a",
  b: "b",
  ...b
};

console.log(a);

```
The array implementation exists here inside of exec.rs:
https://github.com/jasonwilliams/boa/blob/master/src/lib/exec.rs#L218-L223

Tests for this exist here too:
https://github.com/jasonwilliams/boa/blob/master/src/lib/exec.rs#L850-L862

https://github.com/jasonwilliams/boa/blob/master/src/lib/exec.rs#L202-L213 will need to do something similar.

There will need to be changes to the parser so spread can be parsed within an object. The above code will currently error in the parser as spread syntax isn't expecting within an object.
Parsing objects happens here:
https://github.com/jasonwilliams/boa/blob/master/src/lib/syntax/parser.rs#L522-L574

I'm getting `undefined` when I do `'abc'.matchAll.length`. This is incompatible with Chrome's implementation (for example), where I get `1`.

Testing with master with the following `tests.js`:

```js
console.log('abc'.matchAll.length);
```

Here's the output for `cargo run`:

```
$ cargo run
   Compiling Boa v0.5.0 (/data/boa)
    Finished dev [unoptimized + debuginfo] target(s) in 3.20s
     Running `target/debug/boa`
undefined
[src/bin/bin.rs:57] exec(&buffer) = "undefined"
```

Related to #193 and #206 
The [spec](https://tc39.es/ecma262/#sec-array-len) describes that `new Array(5)` should create an array with 5 empty elements/slots. Currently, it produces `[5]`.
This is a question about codebase. As far as I get there is `parse` function to parse a single expression which uses `parse_next` to look ahead along with several others. Currently if `parse_next` sees semicolon it advances position but does not stop expression parsing. Why is so? I thought thaat it should denote the end of expression.

It causes at least one of the reported problem with pre-increment/pre-decrement operator.

Thanks
Part of #151 

### TODO
* [ ] tests for arrow functions
* [ ] rebase