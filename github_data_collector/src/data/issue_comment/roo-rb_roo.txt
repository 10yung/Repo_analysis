### Summary

Fixed following warnings caused by Ruby 2.7 update.

* Using the last argument as keyword parameters is deprecated
* calling URI.open via Kernel#open is deprecated, call URI.open directly or use URI#open
* URI.escape is obsolete
When set method of excel sheet is used; it is showing error message 'deprecated Cell.new, use Cell.create_cell'.
### Issue

LibreOffice generates following XML for float cells:
```
<table:table-cell office:value-type="float" office:value="11010" calcext:value-type="float">
<text:p>11010</text:p>
</table:table-cell>
```

Some other generators (like https://github.com/westonganger/rodf) do not put redundant children elements, so the outcome is as follows:
```
<table:table-cell office:value-type="float" office:value="1">
</table:table-cell>
```

Attempt to read such ODS throws at `open_office.rb` line 424 (or so)

### Fix

Replace:
```
@cell[sheet][key] = (table_cell.attributes['value'].to_s.include?(".") || table_cell.children.first.text.include?(".")) ? v.to_f : v.to_i
```

With:
```
@cell[sheet][key] = (table_cell.attributes['value'].to_s.include?(".") || (table_cell.children.first && table_cell.children.first.text.include?("."))) ? v.to_f : v.to_i
```

The former version does not comply to the best possible coding style.
The variable `v` comes from the caller and in this case is set to the stringified `value` attribute, also the caller does not check for the presence of the child element.
The original code tries to access the first child element even if it's not present (resulting in exception)

Even if the problematic ODS is not valid, this patch will improve the code quality and so increase Roo compatibility.

### System configuration
**Roo version**: 2.7.1 (still present in 2.8.2)
**Ruby version**: `ruby 2.4.5p335 (2018-10-18 revision 65137) [x64-mingw32]`

### Summary

Bugfix for https://github.com/roo-rb/roo/issues/310.  

Round float value before converting to integer

### Other Information

I added a simple spec to cover the issue reported in issue-310 and one of the ones I ran into.


Could the gemspec be updated to allow `rubyzip` version 2 too?

More info here: https://github.com/rubyzip/rubyzip/pull/403

I found out that is due to this set of code in lib/roo/formatters/csv.rb
`  when :string
          %("#{onecell.gsub('"', '""')}") unless onecell.empty?`

can you provide an option to convert strings to csv without quotes?
@chopraanmol1 

I have a spreadsheet of ```members``` designed as below:
[![enter image description here][1]][1]

My aim is to upload some columns and exclude others. In this case, I wish to upload only the ```name```, ```age``` and ```email``` and exclude the others. I have been able to achieve this using the ```slice``` method as shown below:
```
def load_imported_members
    spreadsheet = open_spreadsheet
    spreadsheet.default_sheet = 'Worksheet'
    header = spreadsheet.row(1)
    (2..spreadsheet.last_row).map do |i|
      row = Hash[[header, spreadsheet.row(i)].transpose]
      member = Member.find_by_id(row["id"]) || Member.new
      member.attributes = row.to_hash.slice("id", "name", "age", "email")
      member
    end
  end
```
The problem is that ```last_row``` considers all the rows upto the last one (13), and since there are validations on the form, there are errors due to missing data as a result of the empty rows (which shouldnâ€™t be considered). Is there a way I can upload only specific columns as I have done, yet limit to only the rows that have data?


  [1]: https://i.stack.imgur.com/rXUyC.png
There is issue when a xlsx file does not contain style xml compressed with it,
we should create a blank style xml file so that it does not raise issue and stop processing xlsx file , only if the style xml is not present?
The below file was created with js library https://github.com/egeriis/zipcelx/wiki/How-to-use

Attached xlsx file created, which I was not able to upload
[Main View_7oct14.xlsx](https://github.com/roo-rb/roo/files/3844981/Main.View_7oct14.xlsx)

There can be other ways to solve this issue more efficiently but for me currently solved by making below changes
Thanks for filing an issue. Following these instructions will help us solve your problem sooner.

### Steps to reproduce
1. Create an excel file that has empty rows between filled rows. 
2. Read the data with each_row_streaming function

### Issue
I need to show an error for the filled line which comes after the blank line. The error should specify the row number like this -> "The value on row #[row-number] is invalid." 
Since the library access **Nokogiri::XML::Reader** with **Nokogiri::XML::ParseOptions::NOBLANKS** parameter on **each_element** utility, empty lines are skipped. Which causes indices to be wrong. Problematic line: https://github.com/roo-rb/roo/blob/4ec1104f0c3c2a29711c0c907371cd2be12bcc3c/lib/roo/utils.rb#L106

Also, the original row number is stored in "r" attribute for each row on the XML file. But since you only return the root data of the row there is no way to access this attribute either.

### Possible solutions;
- Accept another parameter for each_row_streaming which will specify ParseOptions for Nokogiri instead of fixed NOBLANKS.
- Allow each_row_streaming to return the full row data instead of root only.

### System configuration
**Roo version**: 2.8.2
**Ruby version**: 2.6.5