I'm using `ContourLayout` to build a view that will be placed inside a `ScrollView` (with `fillViewport="true"`). When scrolling is not required, I'd like for the contents to be anchored to the bottom of the `ScrollView`. 

Here is how I'm going about it (for simplicity, let's just say there are 2 children views):

```
class MyContourView(
    context: Context,
    private val view1: View,
    private val view2: View,
    private val interItemMarginPx: Int,
    private val lrMarginPx: Int
) : ContourLayout(context) {
    init {
        contourHeightOf { availableHeight ->
            maxOf(availableHeight, view2.bottom() + interItemMarginPx
        }
    }

    override fun onInitializeLayout() {
        view2.applyLayout(
            leftTo { parent.left() + lrMarginPx }.rightTo { parent.right() - lrMarginPx },
            bottomTo { parent.bottom() - interItemMarginPx }
        )

        view1.applyLayout(
            leftTo { parent.left() + lrMarginPx }.rightTo { parent.right() - lrMarginPx },
            bottomTo { view2.top() - interItemMarginPx }
        )
    }
}
```

But I get a CircularReferenceDetected error (at the line where I call `view2.bottom()` in `contourHeightOf {}`). I can see why that's the case: `view2` references `parent.bottom()` and the parent references `view2.bottom()` in determining its height.

Everything works if I remove the `contourHeightOf {}` block -- in which case it's always going to be `availableHeight`. But this breaks the scrolling if the height of the contents is greater than `availableHeight`.

How do I go about this use case?
The following code causes a stack overflow during layout:

```kotlin
    class ParentView(context: Context): ContourLayout(context) {
        init {
            setBackgroundColor(Color.RED)
        }

        val childView = ChildView(context).apply {
            applyLayout(
                x = leftTo { parent.left() }.widthOf { 100.xdip },
                y = topTo { parent.top() }.heightOf { 100.ydip }
            )
        }
    }

    class ChildView(context: Context) : ContourLayout(context) {
        init {
            setBackgroundColor(Color.BLUE)
        }
    }
```

However, moving `ChildView`'s `applyLayout` into it's `onInitializeLayout` solves the issue:

```kotlin
    class ParentView(context: Context): ContourLayout(context) {
        init {
            setBackgroundColor(Color.RED)
        }

        val childView = ChildView(context).also { addView(it) }
    }

    class ChildView(context: Context) : ContourLayout(context) {
        init {
            setBackgroundColor(Color.BLUE)
        }

        override fun onInitializeLayout() {
            super.onInitializeLayout()
            applyLayout(
                x = leftTo { parent.left() }.widthOf { 100.xdip },
                y = topTo { parent.top() }.heightOf { 100.ydip }
            )
        }
    }
```

I don't know if this is a bug or not, but my hunch is it's the intended behavior (if not, I'd be happy to look into it).

I realize nesting layouts is discouraged, but there are going to be situations where it is useful and people are going to do it anyway. 

The pattern Contour uses for configuring child views (`MyView(context).apply { applyLayout() }`) is great, and it seems clunky to have to violate it iff the child happens to be another ContourLayout (I can imagine during refactoring a View that didn't start as Contour might become one later). 

Could we make it so layout constraints declared at construction time get deferred until `onInitializeLayout`? Either by having `applyLayout` behave differently for ContourLayouts or with an `onInitializeLayout` DSL:

```kotlin
    class ParentView(context: Context): ContourLayout(context) {
        init {
            setBackgroundColor(Color.RED)
        }

        val childView = ChildView(context).apply {
            onInitializeLayout {
                applyLayout(
                    x = leftTo { parent.left() }.widthOf { 100.xdip },
                    y = topTo { parent.top() }.heightOf { 100.ydip }
                )
            }
        }
    }

    class ChildView(context: Context) : ContourLayout(context) {
        init {
            setBackgroundColor(Color.BLUE)
        }
    }
```
Hi! Using 2 nested contour layout, is it possible to have something like wrap_content?


Hi, may you update readme about setup contour dependency from scratch please
The idea here would be to print to logcat whenever the ContourLayout or one of its direct subviews has its position or size recalculated, i.e. whenever one of the lambdas defined in the context of that layout gets run.

It would be useful for debugging view layouts (especially for more complex layouts or layouts whose size changes frequently.
It could be answered by https://github.com/cashapp/contour/issues/31
But let me single out this question here:
Consider:
```
private val name: TextView =
    TextView(context).apply {
      text = "Ben Sisko"
      setTextColor(White)
      setTextSize(TypedValue.COMPLEX_UNIT_DIP, 18f)
      applyLayout(
        x = leftTo { parent.left() + 15.dip },
        y = topTo { parent.top() + 15.dip }
      )
    }
```
How to update that name TextView to "John Doe"?
Yo guys I like what I see here and want to start using this library but can't find it on either 
https://bintray.com/bintray/jcenter or search.maven.org.
In SampleActivity, there's `views[i]()` which calls `invoke()`.
Using breakpoints, it seems `invoke()` reinstantiate everything in SampleView1 and SampleView2
Is that correct?
Or is `invoke()` kinda redraw the view with a new state or sth like that?

Couldn't find `invoke()` function defined inside ContourLayout that's why I couldn't help myself.
Are there use cases for parameters to be passed to the `ContourLayout.invoke()` function?