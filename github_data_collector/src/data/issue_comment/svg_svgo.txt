@GreLI: Current `svgo` master fails to build (Travis CI) on node v6.x.
PR for node v6 fix/workaround: https://github.com/svg/svgo/pull/1208
@GreLI: This PR adds a workaround/fix for selector exception handling in node v6.
This fixes the currently failing build of current master (Travis node v6): https://travis-ci.org/svg/svgo/jobs/623319182#L880

The reason is that in node v6 the `constructor` property of an exception that is thrown by `css-select`, when a selector doesn't match (which normally happens all the time), is just `Error` instead of `SyntaxError`. All exceptions other than `SyntaxError` are re-thrown, but when the constructor is just `Error` in node v6, one is unable to differentiate. As an alternative for node v6, [the exception `message` is matched by the error message](https://github.com/svg/svgo/pull/1208/files#diff-894234f5731c2854476a58abcef9d1c4R112).
## How to use with expo web

I am build a react-native application using expo `sdk36` and they advise to use `react-native-svg` in order to use svg within expo.

I went through the expo guide and did `expo install react-native-svg` and read the `react-native-svg` install guide. I add to edit my `app.json` and create `metro.config.js`

## Expected

I expect svg to be important as svg in the web.

## Result

it only import them as react component on iOS and Android

On the web, I have `consol.log(Svg)`:

    /static/media/logo.648cf17b.svg


## Reproduction

```bash
git clone https://github.com/kopax/expo-bug-reports.git
cd expo-bug-reports
git checkout issue-6660
npm i
npm test
npm run web
```

## Other

I have created `webpack.config.js` within my expo project and did:

```bash
const createExpoWebpackConfigAsync = require('@expo/webpack-config');
module.exports = async function(env, argv) {
  const config = await createExpoWebpackConfigAsync(env, argv);
  console.log(JSON.stringify(config.module.rules, null,2));
  return config;
};
```

This is the result of the `console.log`:

```json
[
  {
    "parser": {
      "requireEnsure": false
    }
  },
  {
    "oneOf": [
      {
        "test": {},
        "use": [
          "/home/dka/workspace/test-native/node_modules/html-loader/index.js"
        ],
        "exclude": "/home/dka/workspace/test-native/web"
      },
      {
        "test": {},
        "use": {
          "loader": "/home/dka/workspace/test-native/node_modules/url-loader/dist/cjs.js",
          "options": {
            "limit": 1000,
            "name": "static/media/[name].[hash:8].[ext]"
          }
        }
      },
      {
        "test": {},
        "use": {
          "loader": "/home/dka/workspace/test-native/node_modules/babel-loader/lib/index.js",
          "options": {
            "babelrc": false,
            "configFile": true,
            "cacheCompression": true,
            "cacheDirectory": "/home/dka/workspace/test-native/.expo/web/cache/development/babel-loader",
            "cacheIdentifier": "babel-cache-1-{\"filename\":\"/home/dka/workspace/test-native/foobar.js\",\"cwd\":\"/home/dka/workspace/test-native\",\"sourceFileName\":\"/home/dka/workspace/test-native/foobar.js\",\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/home/dka/workspace/test-native\",\"plugins\":[],\"presets\":[{\"dirname\":\"/home/dka/workspace/test-native\",\"file\":{\"request\":\"babel-preset-expo\",\"resolved\":\"/home/dka/workspace/test-native/node_modules/babel-preset-expo/index.js\"}}]}",
            "caller": {
              "bundler": "webpack",
              "platform": "web",
              "mode": "development"
            },
            "sourceType": "unambiguous",
            "root": "/home/dka/workspace/test-native",
            "compact": false
          }
        }
      },
      {
        "test": {},
        "use": [
          {
            "loader": "/home/dka/workspace/test-native/node_modules/url-loader/dist/cjs.js",
            "options": {
              "limit": 50000,
              "name": "./fonts/[name].[ext]"
            }
          }
        ],
        "include": [
          "/home/dka/workspace/test-native",
          "/home/dka/workspace/test-native/node_modules/react-native-vector-icons",
          "/home/dka/workspace/test-native/node_modules/@expo/vector-icons"
        ]
      },
      {
        "test": {},
        "use": [
          "/home/dka/workspace/test-native/node_modules/@expo/webpack-config/node_modules/style-loader/index.js",
          "/home/dka/workspace/test-native/node_modules/css-loader/dist/cjs.js"
        ]
      },
      {
        "loader": "/home/dka/workspace/test-native/node_modules/file-loader/dist/cjs.js",
        "exclude": [
          {},
          {},
          {}
        ],
        "options": {
          "name": "static/media/[name].[hash:8].[ext]"
        }
      }
    ]
  }
]
```

I think it miss `@svgr/webpack`, but I expected it to be configured by default on expo.

I have added a `@svgr/webpack` rules but it still didn't work:

```
  config.module.rules.push({
    test: /\.svg$/,
    use: [
      {
        loader: '@svgr/webpack',
        options: {
          native: true,
        },
      },
    ],
  });
```

## Questions 

- What is the `native: true` options for ? (couldn't find in the doc)
- Is there anything else to configure in order to get proper import

## Answers

> Is it possible for the user of Expo to extend Expo's Webpack config?

Yes, it is possible as described [here](https://docs.expo.io/versions/latest/guides/customizing-webpack/#example)

>  That way you could add the `@svgr/webpack` dependency and configure it.

I have already tried and it does not work at all. (see comment [here](https://github.com/gregberge/svgr/issues/375#issuecomment-570639446))

Basically, this is how my `webpack.config.js` looks like: https://github.com/kopax/expo-bug-reports/blob/issue-6660/webpack.config.js

The whole reproduction (**which is an expo blank project, nothing more**) can be run: 

```bash
git clone https://github.com/kopax/expo-bug-reports.git
cd expo-bug-reports
git checkout issue-6660
npm i 
npm test
npm run web
```

![image](https://user-images.githubusercontent.com/1866564/71748421-c6855e00-2e72-11ea-86db-87dfab07e07f.png)

Without the `webpack.config.js`, at least we can use the `require` return in `<img />`, while with `@svgr/webpack`, we can't (error remains the same)


## üí¨ Related issues

- https://github.com/expo/expo/issues/6660
- https://github.com/kristerkari/react-native-svg-transformer/issues/70
- https://github.com/react-native-community/react-native-svg/issues/1235
As the title states, the plugin reusePaths implicitly depends on removeXMLProcInst being enabled. I think this should be at least documented ‚Äì¬†better fixed.

If a document has an XML processing instruction and the plugin `removeXMLProcInst` is disabled, then said element is preceding the root element, which the implementation of the reusePaths does not properly handle. This causes the following crash:
```
TypeError: Cannot read property 'splice' of undefined
    at module.exports.JSAPI.spliceContent (<#REDACTED#>/node_modules/svgo/lib/svgo/jsAPI.js:135:25)
    at Object.exports.fn (<#REDACTED#>/node_modules/svgo/plugins/reusePaths.js:126:19)
    at <#REDACTED#>/node_modules/svgo/lib/svgo/plugins.js:95:27
    at Array.forEach (<anonymous>)
    at full (<#REDACTED#>/node_modules/svgo/lib/svgo/plugins.js:93:13)
    at <#REDACTED#>/node_modules/svgo/lib/svgo/plugins.js:25:24
    at Array.forEach (<anonymous>)
    at module.exports (<#REDACTED#>/node_modules/svgo/lib/svgo/plugins.js:15:13)
    at <#REDACTED#>/node_modules/svgo/lib/svgo.js:70:17
    at SAXParser.sax.onend (<#REDACTED#>/node_modules/svgo/lib/svgo/svg2js.js:169:13)
```

The problem is here: https://github.com/svg/svgo/blob/07ca9764f71fb946adc23f4ea9f19070d335305d/plugins/reusePaths.js#L124-L126
I believe that with the attached SVG, if the transforms are preserved, I should be able to use `reusePaths` to make symbols for identical paths. However it seems like the transforms are always collapsed, so the paths are modified, so they're no longer identical.

`svgo --disable=convertTransform,collapseGroup --enable=reusePaths --input=b.svg --output=test.svg`

[b.svg.zip](https://github.com/svg/svgo/files/4013342/b.svg.zip)

Fix the bug: Vue failed to publish
Hey @GreLI and team! üëã

Just wanted to reach out about funding your work on svgo.

@transitive-bullshit and I are both open source maintainers, and we're exploring new ways to make OSS funding a viable source of income.

We're currently looking at building rate-limited SaaS APIs on top of existing OSS libraries, reserving the majority of profits for the original authors. [We've built a few](https://saasify.sh/#/showcase) at this point, but want to keep adding more.

I think svgo would be a great fit, and I'd love to build a SaaS API on top of it. We'd handle the initial dev as well as on going auth, billing and support so you wouldn't have to do anything.

Looking forward to hearing your thoughts! üôè
Fixes #1186

By checking whether there are any defs before making an element, it doesn't create an empty `<defs/>` element.
Input SVG: 
```svg
<svg viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
  <g stroke="#000" fill="none">
    <path d="M25 25a7 7 0 11-14 0 7 7 0 0114 0z"/>
    <path d="M25 25a7 7 0 11-14 0 7 7 0 0114 0z"/>
  </g>
</svg>
```

Command:
```
svgo -i tmp.svg -o - --enable=reusePaths --multipass
```

Result:
> Error in parsing SVG: Unbound namespace prefix: "xlink"
Line: 0
Column: 189
Char: >
Using a CSS custom property as a fallback for another property (see below) seems to cause an infinite loop (`optimize` doesn't return):

Example:
```js
const SVGO = require("svgo");

const x = new SVGO({
	plugins: [
		{
			convertStyleToAttrs: true // works with false
		}
	]
});

x.optimize(
	`<svg>
  <path
    style="fill:var(--spectrum-alert-success-icon-color, var(--spectrum-global-color-green-600));"
    d="M4.5 10a1.023 1.023 0 0 1-.8-.384l-2.488-3a1 1 0 0 1 1.577-1.233L4.5 7.376l4.712-5.991a1 1 0 1 1 1.576 1.23l-5.511 7A.977.977 0 0 1 4.5 10z"
  />
</svg>`
).then(console.log);
```