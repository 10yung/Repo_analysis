Hi,

Working on https://github.com/Roave/BetterReflection/issues/525, I needed to refine some types in PHP-Parser.

I tried to either keep readable annotations for IDE like PHPStorm or add a @psalm- annotation.

I take the opportunity to thank you for all the good you did to PHP !
This makes it easier to get a property by name from a ClassLike. 

Reproduce with:
php php-cs-fixer --rules=native_function_invocation fix ./ --allow-risky=yes
(php-cs-fixer from : https://cs.symfony.com/)

Details:
https://veewee.github.io/blog/optimizing-php-performance-by-fq-function-calls/
input: $i=0
   `         $var = new Variable("b");
            $new_expr = [];
            if($expr->expr instanceof Node\Scalar\LNumber)
            {
                $new_expr= new LNumber("11");
                $new_expr->setAttribute('kind', 10);
            }
            $init = new Expression(new Node\Expr\Assign($var,$new_expr)); 
        $arr = ['init'=>[$init], 'cond'=>[example code], 'loop'=>[example code], 'stmts'=>example code];
        return new For_($arr);
`

`   protected function pStmt_For(Stmt\For_ $node) { 
        var_dump($this->pCommaSeparated($node->init));exit();
       .......
    }`

output:
`$i=0;`

the output include one semicolon;
https://github.com/nikic/PHP-Parser/blob/f862853987130d73777ca038ec49d4ed5f0d5df4/lib/PhpParser/Lexer/TokenEmulator/NumericLiteralSeparatorEmulator.php#L24

> preg_match() returns 1 if the pattern matches given subject, 0 if it does not, or FALSE if an error occurred.

Should it be like this?
```php
return preg_match('~[0-9a-f]_[0-9a-f]~i', $code) !== 0; 
```

----

In addition, this regular expression can match ***too many*** irrelevant codes, such as `call_user_func_array` `E_ALL` `method_exists` `file_exists` `base64_encode` `base64_decode`. This seems to make performance slightly affected.
How to resolve the parent interface of the current class interface


I have a project that is written in Java and they want to rewrite into Symfony.

Any ideas how to create very simple Java parser so in the end I have nodes like `Class_`?
## Fixed whitespace before Closure "use" statement.

Before:
```php
function ($arg) use($var) { ... }
```

After:
```php
function ($arg) use ($var) { ... }
//                 ^ whitespace added
```

Reason: PSR-2 https://www.php-fig.org/psr/psr-2/#6-closures

## Removed whitespace prefix before typehint colon.

Before:
```php
function example() : void { ... }
```

After:
```php
function example(): void { ... }
//                ^ whitespace removed
```

Reason: PSR-12 https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md#45-method-and-function-arguments
I thought it's safe to pass any Expr into `prettyPrintExpr` of `PrettyPrinterAbstract`, but `EncapsedStringPart` is an exception because of this implementation:

```php
    protected function pScalar_EncapsedStringPart(Scalar\EncapsedStringPart $node) {
        throw new \LogicException('Cannot directly print EncapsedStringPart');
    }
```

This makes code that puts general `Expr` into `prettyPrintExpr` safe from the point of static types, but actually unsafe in runtime.

I'd have to go through all printer usages and check if I'm not passing this object there, probably with my own printer abstraction.

Is there a reason for this limitation? Can I work around it more easily?