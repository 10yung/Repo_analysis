This defers putting a slice back into the pool (ingester push path) to prevent panicking Error() calls which reference the underlying labels.

This defers returning an allocated slice to its pool until after use. Previously we saw panics on `Error()` calls which held references to the underlying timeseries label set.
<!--  Thanks for sending a pull request!  Before submitting:

1. Read our CONTRIBUTING.md guide
2. Rebase your PR if it gets out of sync with master
-->

**What this PR does**:

This PR implements the Prometheus API alerts and rules endpoints in ruler. It adds a GRPC service to the ruler to allow for an implementation that works when rules are sharded across multiple rulers.

**Which issue(s) this PR fixes**:
Fixes #1720 

**Checklist**
- [ ] Tests updated
- [x] Documentation added
- [x] `CHANGELOG.md`

`flag.Parse()` was called twice previously, first to get `-config.file` value to parse the config file, and second to parse remaining command line parameters â€“ overwriting values from config file.

Unfortunately that confuses command line parameters that accept multiple values (eg. `-memberlist.join` or `-experimental.tsdb.block-ranges-period` in #1942). In this PR we get `-config.file` via a separate FlagSet (which doesn't report any error or usage) to avoid calling `flag.Parse()` on default FlagSet twice.

This should not be visible to end user in any way.
This PR adds export of aggegate metrics from TSDB bucket store, used by Querier component.

This PR uses same approach as #1990 and #1983 before that. It builds on #1990, and moves code related to aggegating and sending metrics into pkg/util/metrics_helper.go file.

**Checklist**
- [x] Tests updated
- [x] `CHANGELOG.md` updated - the order of entries should be `[CHANGE]`, `[FEATURE]`, `[ENHANCEMENT]`, `[BUGFIX]`

I found this surprising:

```
$ make clean
docker rmi quay.io/cortexproject/cortex quay.io/cortexproject/test-exporter quay.io/cortexproject/build-image >/dev/null 2>&1 || true
rm -rf ./cmd/cortex/.uptodate ./cmd/test-exporter/.uptodate ./build-image/.uptodate  ./cmd/cortex/cortex  ./cmd/test-exporter/test-exporter .cache
go clean ./...
go: downloading github.com/lib/pq v1.0.0
go: downloading github.com/Masterminds/squirrel v0.0.0-20161115235646-20f192218cf5
go: downloading github.com/go-openapi/errors v0.19.2
go: downloading github.com/hashicorp/go-msgpack v0.5.5
...
```

Perhaps related to #1710?

Added links to the google groups and meetings notes.

Signed-off-by: vineeth <vineethpothulapati@outlook.com>

@gouthamve 
An optimization was made to TSDB's postings/series lookup to reduce query latency in cases where a regex is used for a label matcher. This [change](https://github.com/prometheus/tsdb/pull/602) (and the corresponding [issue](https://github.com/prometheus/prometheus/issues/2651)) should be ported to the ingester chunk lookup code, since the optimization was made to TSDB code and not PromQL.

cc @gouthamve 
When the experimental blocks storage is used, the ingester module initialization (`initIngester()`) may take several time to replay the WAL. Until the module initialization is not completed, the HTTP server loop is not started, so readiness probe requests (`GET /ready`) will hang. Once the module initialization is completed, all `GET /ready` requests are processed, but for most of them the deadline has already been reached and they fail as soon as it's checked (apparently the first place hitting it is in the lifecycler `CheckReady()`).

Example of errors:
```
level=error ts=2020-01-15T13:43:20.919263167Z caller=lifecycler.go:216 msg="error talking to the KV store" ring=ingester err="Get http://REDACTED:8500/v1/kv/ring?stale=: context canceled"
```

This is **not** a real issue, but the error log may deceive the user.
**What this PR does**:
Currently, there's an hardcoded `30s` as blocks sync interval (TSDB storage). It's quite a lot. I believe we don't even need such an high-frequency sync interval (at least, not as default) so I'm proposing to allow to configure it and set an higher default (Thanos' default is `3m`, I've set `5m` which should be more than enough for the Cortex use case).

I've also received an error from the linter because the `rununtil.Repeat()` error wasn't checked, so I took the change to refactor it (moved to `UserStore` since it belongs to it), renamed `cortex_querier_sync_seconds` to `cortex_querier_blocks_sync_seconds` and customized the buckets: default values are too low for this operation in a medium/large cluster.

**Which issue(s) this PR fixes**:
N/A

**Checklist**
- [ ] Tests updated
- [x] Documentation added
- [ ] `CHANGELOG.md` updated - the order of entries should be `[CHANGE]`, `[FEATURE]`, `[ENHANCEMENT]`, `[BUGFIX]`

When using TSDB, we get per-user created and removed series from TSDB metrics.

This affects `cortex_ingester_memory_series_created_total` and `cortex_ingester_memory_series_removed_total`.
    
This PR also renames `shipperMetrics` to `tsdbMetrics`, and registers the same registry to TSDB and TSDB shipper component.

Registration of prometheus registry now happens only after TSDB initialization is finished, in order to fix a panic where metrics were collected while TSDB was still initialized.


This PR builds on PR #1983, so "Files changed" also shows changes from there. I'll rebase once (if) #1983 is merged. Update: now rebased.