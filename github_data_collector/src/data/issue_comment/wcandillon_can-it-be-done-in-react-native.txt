I want to attach an event listener to the cursor component so as to display the value at a particular point in a different part of the screen.

https://github.com/wcandillon/can-it-be-done-in-react-native/blob/master/bonuses/graph-animation/components/Cursor.tsx

I have tried the method here
https://github.com/software-mansion/react-native-gesture-handler/issues/91

But this doesn't work. Any idea ?
In **bonuses/simple-animation** example, there is an error: runTiming is not a function.  I use timing instead of runTiming, erros gone, but the logo rotate only once. How can I make it loop? My redash verson is  9.5.0, should I fallback to 7.1.1?
I am curious if such an example is possible.

Here's the pure d3 implementation:
https://observablehq.com/@d3/force-directed-tree?collection=@d3/d3-force

Seems plausible given `d3-force` and `d3-hierachy` have no DOM dependencies - but I am just not quite sure how it would all come together.


I tried dropping the draggable chrome tabs into my project, but found that any re-renders caused the dragging to lock up. I determined this by placing a `shouldComponentUpdate` that always returns false, which then allows me to drag the tabs around. Any idea what causes this? I noticed that sometimes they re-spring to their starting positions on re-renders, so I suspect that maybe something is going wrong with the gestureState...
Hi
First, thank you for this great course
I'm having trouble in animated path in react-native-svg
I just executed this code without expo and it's crashed :(

 "react-native": "0.61.4",
 "react-native-redash": "^8.6.0",
 "react-native-svg": "^9.13.3",
Hey there.
Been trying to work on a replacement for the Slider example you did on Youtube, but without the deprecated Interactable component.

However my current issue is that i want to update the snap-points when the layout changes.
however it doesnt seem to be do that? I assume withSpring only does one hook?

```typescript
import * as React from "react"
import { Dimensions, View, StyleSheet, SliderProperties } from "react-native"
import { PanGestureHandler } from "react-native-gesture-handler"
import { useLayout } from "react-native-hooks"

import { withSpring, snapPoint, clamp, panGestureHandler } from "react-native-redash"
import { useMemoOne } from "use-memo-one"
import Ani from "react-native-reanimated"

export interface SliderProps {
    steps: number,
    size: number
}


export function Slider(props: SliderProps) {
    const { steps = 1, size = 10 } = props;
    // Uses layout and check the width
    const { onLayout, ...layout } = useLayout();
    const { width } = layout;

    const [offset] = React.useMemo(() => [
        new Ani.Value(0)
    ], [steps, size]);
  
    // Tries to update snappoints when width changes.
    const snapPoints = React.useMemo(() => {
        let points = []
        for (let i = 0; i < steps; i++) {
            points.push(Ani.add(0, i * ((width + (size / 2)) / steps)));
        }
        // console.log("Updated snap points.");
        return points;
    }, [steps, size, width]);

    const { state, translationX, velocityX, gestureHandler } = panGestureHandler();

    const translateX = withSpring({
        state,
        velocity: velocityX,
        value: translationX,
        offset: offset,
        snapPoints,        
        config: {
            overshootClamping: true,
            damping: 10,
            mass: 2,
            restDisplacementThreshold: 0.001,
            restSpeedThreshold: 0.001,
            stiffness: 100,
        },
        onSnap: value => console.log("snapping", value)
    });



    return <View onLayout={onLayout} style={{
        height: size,
        borderRadius: size / 2,
        backgroundColor: "#F1F2F6"
    }}>
        <Ani.View style={{
            ...StyleSheet.absoluteFillObject,
            backgroundColor: "#dc5312",
            borderRadius: size / 2,
            height: size,
        }} />
        <PanGestureHandler {...gestureHandler}>
            <Ani.View style={{
                width: size,
                height: size,
                transform: [
                    { translateX }
                ],
                borderRadius: size / 2,
                borderWidth: 0.5,
                borderColor: "#88888888",
                backgroundColor: "#ffffff",
                shadowOpacity: 0.86,
                shadowColor: "#FFF",
                shadowRadius: 30,
                shadowOffset: { width: 10, height: 10 },
                overflow: "visible"
            }} />
        </PanGestureHandler>
    </View>
}
```

Is there any way to update the snap points somehow?
Hello @wcandillon, your Liquid Swipe example is great, but on Android I can't drag the arrow, there is no interaction at all. I've tried cloning your project and the interaction works, but in my project (I don't use expo neither typescript) I can't interact with the arrow/liquid swipe.

I guess its some incompatibility to the dependencies (gesture-handler/reanimated). 
I am using react-native: 0.59.9.

I am new to react native, also apologize about my poor English
Hey @wcandillon, your Accordion looks great.

If ever you plan to opensource a reanimated alternative to https://github.com/oblador/react-native-collapsible that would be so great.

I think there's a real need for that. I can't stand anymore the non-native height animation, it's "ok" but for DEV on Android it's really painfully slow. Unfortunately, don't have much time to work on this atm.

If anyone here is willing to implement this, I'd be happy to be a beta tester
Tapping on the TextInput in the Story doesn't do anything. It seems like the ScrollView is not propagating touches to the TextInput in the Story component. 

Is there a way to allow the scrollview to allow the TextInput to receive the touch and respond to the scroll?
Hey thanks for your tutorials on youtube! , btw I was looking to your flipcard code [here](https://snack.expo.io/@git/github.com/wcandillon/can-it-be-done-in-react-native:bonuses/flip-card), any idea why is not working on Android ? 