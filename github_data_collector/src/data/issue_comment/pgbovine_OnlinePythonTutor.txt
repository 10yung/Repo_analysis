As you can see most obviously in this example,  rIdx is actually showing tmpResults.  Everything seems to be one off.  Also, having 'let' declarations be displayed as (block1, 2, 3...) and so on is incredibly annoying, why not just have the memory space name?

![Screen Shot 2019-12-29 at 11 29 41 AM](https://user-images.githubusercontent.com/27739300/71561727-0ab9ce00-2a2f-11ea-9fb1-a884bc0d7b64.png)


in my code using C, i use a nested structure that is _person_name_:
```
struct person_name{
    char first[FIRST_NAME_LEN+1];
    char middle_initial;
    char last[LAST_NAME_LEN+1];
};
```
and a _student_ structure data type which include _person_name_ structure data type, after that i declare two variable _student1_ and _student2_ with a _student_ data type.
```
    struct student{
        struct person_name name;
        int id,age;
        char sex;
    }student1,student2;
``` 
in my following program, i modify _student1_:
```
    memcpy(student1.name.first,"Fred",sizeof("Fred"));
    student1.name.middle_initial = 'C';
    strcpy(student1.name.last,"Yay");
    display_name(student1.name);
}
```
i only modify one of two variable i.e. _student1_, but in pythontutor, both of them having the same value. 

<img width="949" alt="Annotation 2019-12-13 101308" src="https://user-images.githubusercontent.com/50168588/70764032-31baa380-1d91-11ea-8263-9fb8960f93d9.png">


from a user bug report:
http://pythontutor.com/live.html#code=const%20baseRange%20%3D%20function%20%28...arg%29%20%7B%0A%0A%20%20%20%20let%20%5Bstart,%20end,%20step%20%3D%201%5D%20%3D%20arg%3B%0A%20%20%20%20let%20index%20%3D%20-1,%0A%20%20%20%20%20%20%20%20length%20%3D%20Math.ceil%28%20%28end%20-start%29%20/%20step%20%29,%0A%20%20%20%20%20%20%20%20result%20%3D%20Array%28length%29%3B%0A%20%20%20%20console.log%28'index%3A',%20index%29%3B%0A%20%20%20%20while%20%28%20length--%29%20%7B%0A%20%20%20%20%20%20%20%20result%5B%20%2B%2Bindex%20%5D%20%3D%20start%3B%0A%20%20%20%20%20%20%20%20start%20%2B%3D%20step%3B%0A%20%20%20%20%7D%0A%20%20%20%20return%20result%3B%0A%7D%0A//baseRange%281,4%29%3B%0A//baseRange%281,4,2%29%3B%0AbaseRange%284,1,-1%29%3B&cumulative=true&curInstr=8&heapPrimitives=nevernest&mode=display&origin=opt-live.js&py=js&rawInputLstJSON=%5B%5D&textReferences=false

"index" shows as 3 in python tutor, but prints as -1 in console.log()

similar to #283 
Want to do some translation to Chinese on the instance webpage, can you advise the code structure in a bit detail?

Thanks, by the way, for such a brilliant contribution online.

Variables declared with let that are not declared globally have all this issue.
Example: 
instead of having the `result` variable, there is `n (block 1)`

![4AA78D59-E89D-4CF3-A82E-3DCECF73830A](https://user-images.githubusercontent.com/26656284/68923483-bad4bf80-077e-11ea-8582-7ca4ad166c0b.jpeg)

I often suggest this tool to newbies, but a thing like this is greatly confusing 

See example - It would be nice if there was information that there is another variable `x` local to function `f` before it gets assigned:

![image](https://user-images.githubusercontent.com/115487/68753403-43c7eb80-0605-11ea-81d7-ccf11218a7e0.png)

Reason why - it would demonstrate what the problem is in the classic error `UnboundLocalError: local variable 'uhel' referenced before assignment`

![image](https://user-images.githubusercontent.com/115487/68753475-65c16e00-0605-11ea-8963-b7ab5b0e8004.png)

(from server error logs; some work in javascript, don't have energy to minimize/debug)

```
 `<h1>Attention!</h1>
<p>Votre abonnement va prochainement se terminer.
Il ne vous reste que ${joursAbonnement} jours <p>`
```

```
const checker = function(input) {
    const reverse = function(str) {
        return str.split('').reverse().join('');
    };

    const validator = {
        str1 : 'iscor',
        str2 : reverse('tcer'),
        str3 : 'isth',
        validate(attempt) {
            return attempt === (validator.str3 + validator.str1 + validator.str2);
        },
    };

    return validator.validate(input);
};
```

```
const x = 5;

function p() {
  return m()
}

function m() {
  try {
    return x;
  } finally {
    console.log('hi');
  }
}

const z = {
  p,
  m,
}

m();
```

```
function Devs(name,age, job){
    this.name = name;
    this.age = age;
    this.job = job;
    this.presentation  = function(style, timeOfDay){
        if(style === 'formal'){
            console.log(`Good ${timeOfDay}, Ladies and Gentlemen. I am ${this.name}
            and I do ${this.job} for a living.
            `)
        }else if(style === 'casual'){
            console.log(`Whats up guys ${timeOfDay}. You know me...I  am ${this.name}
            and I do ${this.job} for a living.`);
        }else{
            console.log(`Hi there , ${timeOfDay} Ladies and Gentlemen.`)
        }
    };
}
Devs.prototype.org = 'LinkedIn';
Devs.prototype.presentation  =  function(style, timeOfDay){
    if(style === 'formal'){
        console.log(`Good ${timeOfDay}, Ladies and Gentlemen. I am ${this.name}
            and I do ${this.job} for a living.
            `)
    }else if(style === 'casual'){
        console.log(`Whats up guys ${timeOfDay}. You know me...I  am ${this.name}
            and I do ${this.job} for a living.`);
    }else{
        console.log(`Hi there , ${timeOfDay} Ladies and Gentlemen.`)
    }

};
let John  = new Devs('John', 47, "Architect");
let Emily  = new Devs('Emily', 37, "UXDesigner");
console.log(John.presentation === Emily.presentation);
//Emily.presentation  = function(){};
John.presentation('casual','Morning');
Emily.presentation('formal','Evening');
console.log(Emily.org);
console.log(John.org);
```

```
function padLeft(value: string, padding: any) {
    if (typeof padding === "number") {
        return Array(padding + 1).join(" ") + value;
    }
    if (typeof padding === "string") {
        return padding + value;
    }
    throw new Error(`Expected string or number, got '${padding}'.`);
}
```
it's unfortunate that the python 'break' statement happens to be similar to the '#break' special comment that i use to mark python backend breakpoints, so when that line is commented-out, a weird #NullTrace error happens even though the program is fine. offending line:
```
       #     #break
```

```
def insert_ordered(xs,v):
    result = None
    #if len(xs) == 0 :
      #  xs.append(v)
       #     #break
    for i in range(len(xs)) :
        if len(xs) == 0  and v > len(xs):
            xs.append(v)
            break
        if (len(xs) == 1 and v < xs[i]) :
            xs.insert(i,v)
            #print(xs)
            result = None
        else :
            if (xs[i] >= v) and (v <= xs[i+1]) :
                xs.insert(i,v)
                break
            elif max(xs) < v :
                xs.append(v)
                break
    print(xs)
    return result

print(insert_ordered([],5))
```
ideally OPT should generate a partial trace so that something can be visualized:

```
y=1
x="+"
print(x)
while y==1:
    x=x+x
    print(x)
```