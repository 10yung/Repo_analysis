From #115:
> I ran `sshcode <ssh alias>` and I was asked for my password 4 times. I can't set up passwordless `ssh` because of the way Kerberos and AFS are set up on the remote server.
> 
> It would be great if there was somehow a way to only ask for the password once. However, this would probably sacrifice some security.

This issue came back. Yesterday, December 29, 2019, I re-ran `go get -u go.coder.com/sshcode` to update the package. 


> Output of `sshcode tj`:
> 
> ```
> 2019-12-29 13:11:06 INFO	starting SSH master connection...
> 2022sratna@remote.tjhsst.edu's password: 
> 2019-12-29 13:11:37 ERROR	failed to start SSH master connection: SSH master wasn't ready on time: max number of tries exceeded: 30
> 2019-12-29 13:11:37 INFO	ensuring code-server is updated...
> 2022sratna@remote.tjhsst.edu's password: 
> ++ uname -m
> + '[' x86_64 '!=' x86_64 ']'
> + pkill -f /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + mkdir -p /afs/csl.tjhsst.edu/students/2022/2022sratna/.local/share/code-server /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode
> + cd /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode
> + curlflags='-o latest-linux'
> + '[' -f latest-linux ']'
> + curlflags='-o latest-linux -z latest-linux'
> + curl -o latest-linux -z latest-linux https://codesrv-ci.cdr.sh/latest-linux
>   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
>                                  Dload  Upload   Total   Spent    Left  Speed
>   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
> + '[' -f /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server ']'
> + rm /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + ln latest-linux /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + chmod +x /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> 2019-12-29 13:13:11 INFO	syncing settings
> 2022sratna@remote.tjhsst.edu's password: 
> building file list ... done
> 
> sent 192 bytes  received 20 bytes  24.94 bytes/sec
> total size is 172032  speedup is 811.47
> 2019-12-29 13:13:19 INFO	synced settings in 7.225311372s
> 2019-12-29 13:13:19 INFO	syncing extensions
> 2022sratna@remote.tjhsst.edu's password: 
> building file list ... done
> 
> sent 76 bytes  received 20 bytes  27.43 bytes/sec
> total size is 0  speedup is 0.00
> 2019-12-29 13:13:22 INFO	synced extensions in 10.508270347s
> 2019-12-29 13:13:22 INFO	starting code-server...
> 2019-12-29 13:13:22 INFO	Tunneling remote port 51107 to 127.0.0.1:31419
> 2022sratna@remote.tjhsst.edu's password: 
> info  Server listening on http://127.0.0.1:51107
> info    - No authentication
> info    - Not serving HTTPS
> ^C2019-12-29 13:14:30 INFO	shutting down
> ```
> 
> Output of `sshcode --ssh-flags '-o "ControlPath=~/.ssh/control-%h-%p-%r"' tj`:
> 
> ```
> 2019-12-29 13:16:03 INFO	starting SSH master connection...
> 2022sratna@remote.tjhsst.edu's password: 
> 2019-12-29 13:16:34 ERROR	failed to start SSH master connection: SSH master wasn't ready on time: max number of tries exceeded: 30
> 2019-12-29 13:16:34 INFO	ensuring code-server is updated...
> Control socket connect(/Users/suman/.ssh/control-remote.tjhsst.edu-22-2022sratna): Connection refused
> 2022sratna@remote.tjhsst.edu's password: 
> ++ uname -m
> + '[' x86_64 '!=' x86_64 ']'
> + pkill -f /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + true
> + mkdir -p /afs/csl.tjhsst.edu/students/2022/2022sratna/.local/share/code-server /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode
> + cd /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode
> + curlflags='-o latest-linux'
> + '[' -f latest-linux ']'
> + curlflags='-o latest-linux -z latest-linux'
> + curl -o latest-linux -z latest-linux https://codesrv-ci.cdr.sh/latest-linux
>   % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
>                                  Dload  Upload   Total   Spent    Left  Speed
>   0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0
> + '[' -f /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server ']'
> + rm /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + ln latest-linux /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> + chmod +x /afs/csl.tjhsst.edu/students/2022/2022sratna/.cache/sshcode/sshcode-server
> 2019-12-29 13:17:10 INFO	syncing settings
> Control socket connect(/Users/suman/.ssh/control-remote.tjhsst.edu-22-2022sratna): Connection refused
> 2022sratna@remote.tjhsst.edu's password: 
> building file list ... done
> deleting state/global.json
> deleting state/empty-window.json
> deleting state/-721c4179.json
> deleting state/
> ./
> 
> sent 198 bytes  received 26 bytes  10.93 bytes/sec
> total size is 172032  speedup is 768.00
> 2019-12-29 13:17:30 INFO	synced settings in 20.892316347s
> 2019-12-29 13:17:30 INFO	syncing extensions
> Control socket connect(/Users/suman/.ssh/control-remote.tjhsst.edu-22-2022sratna): Connection refused
> 2022sratna@remote.tjhsst.edu's password: 
> building file list ... done
> 
> sent 76 bytes  received 20 bytes  21.33 bytes/sec
> total size is 0  speedup is 0.00
> 2019-12-29 13:17:34 INFO	synced extensions in 23.973192331s
> 2019-12-29 13:17:34 INFO	starting code-server...
> 2019-12-29 13:17:34 INFO	Tunneling remote port 64098 to 127.0.0.1:60900
> 2022sratna@remote.tjhsst.edu's password: 
> info  Server listening on http://127.0.0.1:64098
> info    - No authentication
> info    - Not serving HTTPS
> ^C2019-12-29 13:18:08 INFO	shutting down
> ```
> 
> I'm on macOS 10.15.3 Beta. `sshcode --version` prints a newline (#154), but I installed `sshcode` via `go get`.
> 
> `sshcode --ssh-flags '-o "ControlPath=/tmp/test" -o "ControlMaster=auto" -o "ControlPersist=5m"' tj` works fine, but I still think #116 should be fixed because the SSH connection will be kept after `sshcode` is quit.

This adds the `electron` binary into the `commandExists` check switch in `sshcode.go`, and if electron is found, use it.

This idea works because that means that certain extenstions such as adblockers, (or in braves case, the built in blocker which is enabled even when extenstions are not)
This allows users running google-chrome-beta to still open the app inside electron
instead of inside a browser tab.
Why aren't you guys using https://github.com/gliderlabs/ssh or better yet, https://golang.org/x/crypto/ssh?

I feel like it would probably allow for native Windows support, no?

Using the current version of sshcode built from source (--version does not reveal the version number), I am getting frequent unrecoverable disconnections despite having a strong connection (50MBps+). Clicking on reconnect in the popup never reconnects, and moreover, the local terminal from which I am connecting locks up and must be manually closed. I've gotten this behavior multiple times now on multiple different network connections, so I am satisfied the network is not the issue.

The remote session I am connecting to is a GCS VM instance, which I use reliably for other remote computing tasks (e.g. Jupyter notebook hosting).
Please add ability to specify extra options for gcloud
for example `--local-ip`

Without this it's impossible to use sshcode in some gcloud configurations
Example. 
i run `sshcode developer@archlinux ~/Workspace`, it will open normally, 
but if i come back later and open `/opt/Workspace`, it will open the previous directory instead `~/Workspace`

the only fix i have for this, is changing something in settings.json, but that is not a good idea as it may sync back and mess up someones actual config on their personal PC

as stated,
this line
https://github.com/cdr/sshcode/blob/master/sshcode.go#L147
```go
	sshCmdStr :=
		fmt.Sprintf("ssh -tt -q -L %v:localhost:%v %v %v 'cd %v; %v --host 127.0.0.1 --auth none --port=%v'",
			o.bindAddr, o.remotePort, o.sshFlags, host, dir, codeServerPath, o.remotePort,
		)
```
should be 
```go
	sshCmdStr :=
		fmt.Sprintf("ssh -tt -q -L %v:localhost:%v %v %v '%v --host 127.0.0.1 --auth none --port=%v %v'",
			o.bindAddr, o.remotePort, o.sshFlags, host, codeServerPath, o.remotePort, dir,
		)
``` 

as code-server is no longer opening (atleast for me) in the users PWD when they call it

This edit tells code-server to open that path DIRECTLY from code-server
same concept as upstream vscode

I have already implemented this in my fork (not yet pushed as i am still fixing it up)
I installed sshcode via `go get -u go.coder.com/sshcode`, and when I run `sshcode --version` I don't get any version info:
```
pi@raspberrypi:~ $ sshcode --version

pi@raspberrypi:~ $ 
```
the bastion server in question is (sshPortal)[https://github.com/moul/sshportal]

something in this chunk of code in `sshcode.go`
errors out with Error Code 255
Dont know exactly what is causing it, but my therory is it is trying to do things on the bastionserver before it is proxied across to the target, 

To reproduce, do the following
install sshportal
"invite" a new user, and add a host, 
```
create invite <email, can be false>
# read the readme of the program for how to do so
host create user@host:port --name <hostname, can be anything>
```

then ssh through sshportal to the host, to verify it is configured properly
`ssh <hostname>@portal -p 2222`
Then test sshcode to verify this issue 
`sshcode --skipsync --ssh-flags "-p 2222" <hostname>@portal`


If you are unable to reproduce this issue, go ahead and close this
```go
	if o.uploadCodeServer != "" {
		flog.Info("uploading local code-server binary...")
		err = copyCodeServerBinary(o.sshFlags, host, o.uploadCodeServer, codeServerPath)
		if err != nil {
			return xerrors.Errorf("failed to upload local code-server binary to remote server: %w", err)
		}

		sshCmdStr :=
			fmt.Sprintf("ssh %v %v 'chmod +x %v'",
				o.sshFlags, host, codeServerPath,
			)

		sshCmd := exec.Command("sh", "-l", "-c", sshCmdStr)
		sshCmd.Stdout = os.Stdout
		sshCmd.Stderr = os.Stderr
		err = sshCmd.Run()
		if err != nil {
			return xerrors.Errorf("failed to make code-server binary executable:\n---ssh cmd---\n%s: %w",
				sshCmdStr,
				err,
			)
		}
	} else {
		flog.Info("ensuring code-server is updated...")
		dlScript := downloadScript(codeServerPath)

		// Downloads the latest code-server and allows it to be executed.
		sshCmdStr := fmt.Sprintf("ssh %v %v '/usr/bin/env bash -l'", o.sshFlags, host)

		sshCmd := exec.Command("sh", "-l", "-c", sshCmdStr)
		sshCmd.Stdout = os.Stdout
		sshCmd.Stderr = os.Stderr
		sshCmd.Stdin = strings.NewReader(dlScript)
		err = sshCmd.Run()
		if err != nil {
			return xerrors.Errorf("failed to update code-server:\n---ssh cmd---\n%s"+
				"\n---download script---\n%s: %w",
				sshCmdStr,
				dlScript,
				err,
			)
		}
	}
```