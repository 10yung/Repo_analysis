This was causing a compilation error under `-pedantic` builds.
Roughly 50% of the time when stopping the capture and starting the data receiving stage, it gets stuck. It looks like the problem might be in `SocketListener::listenCapture()`, specifically calling `m_easySocket.receive()`. The receive function will always return a -1 when it hangs like this.  

The code block being referred to is this:
```
while (bytes < sizeof(profiler::net::Message))
{
    int receivedBytes = m_easySocket.receive(buffer + seek + bytes, buffer_size);
    if (receivedBytes < 1)
    {
        bytes = receivedBytes;
        break;
    }
    bytes += receivedBytes;
}
The profile binary format for version v2.1.0 appears to have changed to accommodate bookmarks but there is no accompanying documentation in the wiki. 
static should come before __thread etc. This causes warnings with clang when using e.g. EASY_THREAD: 

warning: '__thread' before 'static' [-Wpedantic]

It seems this was partially addressed with [53289ce](https://github.com/yse/easy_profiler/commit/53289cec812fc61b1851c16fe38f3dbd3993ea8f) but some instances were missed. 
This PR adds QNX cmake toolchains for easy_profiler_core
Hi, I'm making updates for Open Collective. Either you or another core contributor signed this repository up for Open Collective. This pull request adds financial contributors from your Open Collective https://opencollective.com/easy_profiler ❤️

  What it does:
  - adds a badge to show the latest number of financial contributors
  - adds a banner displaying contributors to the project on GitHub
  - adds a banner displaying all individuals contributing financially on Open Collective
  - adds a section displaying all organizations contributing financially on Open Collective, with their logo and a link to their website

P.S: As with any pull request, feel free to comment or suggest changes.

  Thank you for your great contribution to the Open Source community. You are awesome! 🙌
  And welcome to the Open Collective community! 😊

  Come chat with us in the #opensource channel on https://slack.opencollective.com - great place to ask questions and share best practices with other Open Source sustainers!
  
m_storedSpin lock is held by calling EASY_FORCE_EVENT3 which itself locks m_storedSpin

profile_manager.cpp:1040
```
if (expired == 1)
{
   EASY_FORCE_EVENT3(thread, endtime, "ThreadExpired", EASY_COLOR_THREAD_END);
   ++num;
}
```
We've ported easy_profiler to some new platforms and have observed on one of those platforms that the id recycling nature of `pthread_self` (used here: https://github.com/yse/easy_profiler/blob/develop/easy_profiler_core/current_thread.h#L75) can result in different threads being identified as the same thread in easy_profiler.

It looks like the same code would be invoked in the main repository if running on certain apple devices.

The circumstances are convoluted to get into the details, but in short:

Throughout the lifetime of our capture threads are spawning and being terminated, causing pthread_self to re-use the same id,  and having those threads treated as one inside the profiler_gui (and disallowing us to name them after the first instance). 

The situation is exasperated by the fact that one of the threads retroactively pushes a bunch of data into easy_profiler via the `storeBlock` API, meaning that the "same" thread now has multiple blocks of data overlapping (causing bad rendering in the GUI: https://github.com/yse/easy_profiler/issues/149)

It's possible that the pthread implementation on the target platform is causing these IDs to be recycled more aggressively and this might not be an issue for you on the apple platforms that utilize the same function. 
I built `easy_profiler_core` for Android using `.mk` files (no cmake) and linked it to my app as a static library. I added a few profiling blocks (all top-level blocks are closed as described in #135). After the app has finished, I download the `test_profile.prof` to my PC and try loading it via precompiled `profiler_gui.exe` (binary release from GitHub). Here is the error message I am getting:

![image](https://user-images.githubusercontent.com/2510143/59764789-68a57600-9294-11e9-84a9-2e1b1783e180.png)

What might be the issue?

P.S. I checked #138 as well. No good. 

I tried use easy profiler to profile c++ code in one of my mac apps without success. I tried to isolate the problem and test with simple hello world and as well with 'profiler_sample' app. Here is what I found out:

1) My environment is: MacOS Mojave 10.14.4 and Xcode 10.2.1
2) I can build the project and tested all included samples successfully when built using included cmake script but built the following way instead:
`cmake -DCMAKE_BUILD_TYPE="Release" -DCMAKE_PREFIX_PATH="/usr/local/Cellar/qt/5.12.3/lib/cmake/Qt5Widgets" ..`. Built librarary I installed to `usr/local`
```
macbook:bin patryk$ find /usr/local -iname "*easy_profile*"
/usr/local/lib/cmake/easy_profiler
/usr/local/lib/cmake/easy_profiler/easy_profilerConfig.cmake
/usr/local/lib/cmake/easy_profiler/easy_profilerConfigVersion.cmake
/usr/local/lib/cmake/easy_profiler/easy_profilerTargets-release.cmake
/usr/local/lib/cmake/easy_profiler/easy_profilerTargets.cmake
/usr/local/lib/libeasy_profiler.dylib
```
3) ./profiler_sample built with cmake returns good results:
```
Objects count: 500
Render steps: 1500
Modelling steps: 1500
Resource loading count: 50
Frame time: max 0 us // avg 0 us
Frame time: max 2694 us // avg 2510 us
Frame time: max 2799 us // avg 2505 us
Frame time: max 2787 us // avg 2507 us
Frame time: max 2634 us // avg 2493 us
Frame time: max 2740 us // avg 2491 us
Frame time: max 2612 us // avg 2486 us
Frame time: max 2629 us // avg 2488 us
Elapsed time: 4957592 usec
Blocks count: 6037601
```
3) However when I created sample Xcode objective-c++ project with only `profiler_sample.cpp` profiler doesn't work and doesn't dump any files:
```
Objects count: 500
Render steps: 1500
Modelling steps: 1500
Resource loading count: 50
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Frame time: max 0 us // avg 0 us
Elapsed time: 5651573 usec
Blocks count: 0
```
I've added `/usr/local/include` to **Header Search Paths**, `/usr/local/lib` to Library **Search Paths** and  `-leasy_profiler` to **Other Linker Flags**

Is there any way to make it work with Xcode projects?



