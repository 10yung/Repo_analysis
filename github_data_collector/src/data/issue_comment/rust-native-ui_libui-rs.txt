I was just wondering if there will be some sort of controlling the window size during the runtime not only when initializing the window, and maybe some events so like when the user resizes the window an event gets triggered with a x,y of the old window size and x,y of the new window size, well maybe 
the events for resizing is kinda useless but it would be nice to have, and better window builder because currently we can only set the width, height, and if it has a menu bar or not, maybe add like if the window is resizable or not and if it can go full screen or not, and by the way the master docs is a little outdated all new features is not in the master docs, its just like the stable one, no total difference at all, i had to dig a little through the lib sources to figure out what new stuff has been added and how they work
Compiler in examples can't find progressbar. More then - even i can't find it. Docs says that iui don't have progressbar at all(i can't find anything that contains Progress or something).
I took this example - https://github.com/rust-native-ui/libui-rs/blob/master/iui/examples/inputs.rs
Compiler errors:
![image](https://user-images.githubusercontent.com/40376451/69908453-b01b5b00-140b-11ea-96e7-9b7a9929452b.png)
![image](https://user-images.githubusercontent.com/40376451/69908446-91b55f80-140b-11ea-842c-0f3bb145ed76.png)
Using `iui v0.3` and `ui-sys v0.1.3`
When building an UI for an app the has long-running background processes that need to be monitored I noticed that `run_delay` calls the `on_tick` callback very aggressively. This change would trigger the callback on every `delay_ms` milliseconds (as advertised) without consuming a whole CPU core.
For inputs.rs and inputs-grid.rs, the slider and spinner start at 1, but the code (slider_val and spinner_val) thinks it's 0. Clicking the slider tells the underlying code (add/subtract) it's 1, and changing the spinner to 2 tells the underlying code (add/subtract) it's 2.
Currently when creating a window on macOS it shows in the left bottom corner. Is there a way to center the window?
This adds support for uiColorButton and also updates an example to use it.

The `Rgba` struct shouldn't be in `controls/basic.rs`, I've tried putting it into `util_types.rs` but couldn't find a way to include/use that (sorry, Rust noob here).
I've set up CLion with the [:tada: IntelliJ rust plugin :tada:](https://intellij-rust.github.io/), but I'm having issues running the debugger:

> `error while loading shared libraries: libui.so.0: cannot open shared object file: No such file or directory`

I located `libui.so.0`:
```
$ find . -name 'libui.so.0'          
./target/debug/build/ui-sys-f439c2f1b0cb0138/out/build/out/libui.so.0
```

So, I tried setting `LD_LIBRARY_PATH` before running CLion:
```
$ LD_LIBRARY_PATH=/home/mitch/dev/pult/target/debug/build/ui-sys-f439c2f1b0cb0138/out/build/out snap run clion
```

However, I'm still getting "error while loading shared libraries" :thinking: 

I'm not super familiar with how shared libraries work, so I highly doubt that this issue is specific to `libui-rs` - there's just a chance that a `libui-rs`-er has run into this issue, too :smile: :man_shrugging: 
When configuring inputs on a webpage, I can associate them with a form (which has a primary `submit` button). Then, when I click "enter" while any of those inputs are focused, then the submit button will automatically be triggered.

In my case, I've a couple inputs and a submit button:
![Screenshot from 2019-05-25 18-36-38](https://user-images.githubusercontent.com/7784737/58372359-35352d00-7f1c-11e9-8207-011de3a05299.png)

I'd love to make it so hitting "enter" while the `Entry` is focused will cause the submit action :smile:

`libui` switched from cmake to meson, so this project should keep up.

I decided to create this - a tracking issue on thoughs and desired features for that change.

While switching to meson build system, it would be great to have support for the following things, or at least keep them in mind:
1. The ability to control whether to build a static or dynamic lib. Apparently, the recommended way of doing that is via build-time env vars, and not via cargo features.
2. The ability to embed custom manifests on windows.

Thoughts?
Hello

I have [published](https://github.com/tobia/iui-builder) a simple macro that allows the definition of IUI user interfaces through a hierarchical, declarative DSL.

Here is the central part of the `inputs.rs` example defined using my macro:

```rust
// Create the layout and add the controls
iui! { &ui,
    let contents = HorizontalBox() {
        Stretchy: let input_group = Group("Inputs") {
            let input_vbox = VerticalBox(padded: true) {
                Compact: let slider = Slider(1, 100)
                Compact: let spinner = Spinbox(1, 100)
                Compact: let _sp = Spacer()
                Compact: let _sp = HorizontalSeparator()
                Compact: let _sp = Spacer()
                Compact: let entry = Entry()
                Stretchy: let multi = MultilineEntry()
            }
        }
        Stretchy: let output_group = Group("Outputs") {
            let output_vbox = VerticalBox() {
                Compact: let add_label = Label("")
                Compact: let sub_label = Label("")
                Compact: let text_label = Label("")
                Stretchy: let bigtext_label = Label("")
            }
        }
    }
}

// Add the layout to the window
window.set_child(&ui, contents);

// Update the application state when a control changes its value.
slider.on_changed(&ui, |val| {
    state.borrow_mut().slider_val = val;
});
```

I tried several variations of the syntax, before settling on this one. Some of my objectives were: 

- Reduce boilerplate for the final user as much as possible, but keeping the code easy to read (for example, I could have abbreviated Compact to "C" and Stretchy to "S", but it would only save a few bytes and decrease the readability.)
- Keep the implementation as simple as possible (I managed to do it all with a single macro that is less than 200 lines long and as simple as I could make it.)
- Let the programmer omit any part of their UI from the macro if they need to define it dynamically (for example, you can omit a container's children and add them later through code, using the proper `.append()` methods.) This is also why all controls are defined with variable names that are available to use right after the `iui!` macro.

More information and an explanation of the macro syntax is available in the project's README.

I'm still learning Rust and experimenting with the available libraries and I don't yet know whether I will work with Rust or IUI much in the future. Therefore if you like the idea and wish to incorporate it into your project, feel free to do so.

In the meantime, users of the stable 0.3.0 version can include my crate from GitHub and use this version of the macro to define their interfaces. (A link from your README would be appreciated!)