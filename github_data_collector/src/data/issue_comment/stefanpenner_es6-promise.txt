```
<!-- Automatically provides/replaces `Promise` if missing or broken. -->
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.js"></script>
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.js"></script> 

<!-- Minified version of `es6-promise-auto` below. -->
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script> 
```

- What is different between `es6-promise.js` and `es6-promise.auto.js`?
- Is it required to include both scripts in html page?
- What happens if just include either of `es6-promise.js` or `es6-promise.auto.js`?
Now that [`Promise.allSettled` reached stage 4](https://tc39.es/proposal-promise-allSettled/) of the specification process, would it make sense to add a polyfill for it to this project?

Or would you rather recommend to add a separate shim for it, something like [es-shims/Promise.allSettled](https://github.com/es-shims/Promise.allSettled) ? IMO that's less convenient, but creating yet another implementation also sounds wrong. 
Hello. I'm using vue-cli with es6-promise

babel.config.js:
```
require('es6-promise').polyfill();

module.exports = {
    presets: [
        ['@vue/app', {
            polyfills: [
                'es6.promise',
                'es6.symbol'
             ]
         }]
    ]
}
```
and ie9 crushing project in this place
<img width="1124" alt="Screenshot 2019-07-18 at 12 59 45" src="https://user-images.githubusercontent.com/29097652/61444356-4cacf700-a95c-11e9-9de6-bc1bea1f6122.png">

I saw in yours documentation that 'catch' and 'finally' reserved words in <= ie9. 
How i can fix this?
Thanks.


```ts
import { Promise as Promise6 } from "es6-promise";

export const error: Promise6<void> = Promise.resolve();
export const error2: Promise<void> = Promise6.resolve();
```

[Sandbox](https://codesandbox.io/s/magical-visvesvaraya-dcvvi)
With `"lib": ["es5", "es2015.promise"]`, `error` fails to compile with the message:
```
Property 'finally' is missing in type 'Promise<void>' but required in type 'Promise<void>'.
```
[Sandbox](https://codesandbox.io/s/frosty-tdd-5k3gm)
With `"lib": ["es5", "es2015.promise", "es2018.promise"]`, `error` fails to compile with the message:
```
Type 'Promise<void>' is not assignable to type 'import("/sandbox/node_modules/es6-promise/es6-promise").Promise<void>'.
  Types of property 'catch' are incompatible.
    Type '<TResult = never>(onrejected?: (reason: any) => TResult | PromiseLike<TResult>) => Promise<void | TResult>' is not assignable to type '<U>(onRejected?: (error: any) => U | Thenable<U>) => Promise<U>'.
      Type 'Promise<void | U>' is not assignable to type 'Promise<U>'.
        Types of property 'then' are incompatible.
          Type '<TResult1 = void | U, TResult2 = never>(onfulfilled?: (value: void | U) => TResult1 | PromiseLike<TResult1>, onrejected?: (reason: any) => TResult2 | PromiseLike<TResult2>) => Promise<TResult1 | TResult2>' is not assignable to type '{ <U>(onFulfilled?: (value: U) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>): Promise<U>; <U>(onFulfilled?: (value: U) => U | Thenable<U>, onRejected?: (error: any) => void): Promise<...>; }'.
            Types of parameters 'onfulfilled' and 'onFulfilled' are incompatible.
              Types of parameters 'value' and 'value' are incompatible.
                Type 'void | U' is not assignable to type 'U'.
                  Type 'void' is not assignable to type 'U'.
```
[Sandbox](https://codesandbox.io/s/bitter-sound-6ry6c)
Using `es6` (or newer) in place of `es5` above gives the same message for `error`, but adds another failure for `error2` with the message:
```
Property '[Symbol.toStringTag]' is missing in type 'Promise<void>' but required in type 'Promise<void>'
```
The `error2` message was brought up in #300, which was closed without a fix.

It's really frustrating working with libraries that use `es6-promise` and export the type in their signatures, because you need to wrap the promises or cast away all type safety.

Are there any TypeScript lib configurations that are compatible with this library's typings, or are there any plans to update the definitions to be compatible?
"version": "4.2.6"

```js
  Promise.prototype.catch = function _catch(onRejection) {
    return this.then(null, onRejection);
  };
```

https://www.npmjs.com/package/es3ify-loader
if use webpack, this loader can solve the problem  in some situation
https://github.com/stefanpenner/es6-promise/blob/9869a4bc92c0372b9fc9e2dc3a9a1a861d91bbe0/es6-promise.d.ts#L3

One of the overloads for `Thenable.then` is:

```typescript
then <U> (
    onFulfilled?: (value: R) => U | Thenable<U>,
    onRejected?: (error: any) => void,
): Thenable<U>;
```

However, consider this example:

```typescript
let promise = Promise<number>.reject(new Error("error"));

let newPromise = promise.then(
    (value: number): string => value.toString(),
    (error: any): void => { console.log(error); },
);
```

The type of `newPromise`, based on the overload, is `Promise<string>`. However, because the `onRejected` function doesn't throw or return a rejected promise, `newPromise` becomes a resolved promise with the return value of `onRejected`, which is `void`, which means that `newPromise` should be `Promise<T | void>`. Specifically, this code should not compile:

```typescript
newPromise.then((value: string) => {
    // value should be `(string | void)`, since it could have a
    //value from the `onRejected` branch
});
```
Here we try to get the `then` method from an undefined thing called `promise`.

https://github.com/stefanpenner/es6-promise/blob/314e4831d5a0a85edcb084444ce089c16afdcbe2/lib/es6-promise/-internal.js#L33

I think it should look like `Promise.then`, since `Promise` is defined.

I've seen this in IE11 (no Promise there) and we always run into the `catch` branch. I'v thought that this is not its intention.
I just had some trouble with the polyfill. I'm building a browser app which has a global variable named `global`. This caused the polyfill to add the Promise object to my global object, instead of adding it to `window`. The opposite could also happen: building a Node app that has a variable named `window`.

Not sure *if* this should be fixed, though. I reckon it was probably a bad idea by me to have a `global` variable anyway. I renamed it to something else so I can continue to use this polyfill.
The latest version available on [cdnjs is 4.1.1](https://cdnjs.com/libraries/es6-promise/4.1.1) - would be great to get the latest version on there.
In a testing framework that we use, `Promise.resolve` is intercepted (among others) to implement some bookkeeping for pending promises, timers, requests etc. The intercepting code looks something like this:

```js
(function() {
  const originalResolve = Promise.resolve;  // *1*
  Promise.resolve = function(value) {

    // propagate the current call to the original function, 
    // using the same context and argument
    let result = originalResolve.call(this, value); // *2*

    // bookkeeping is implemented around the original call, doesn't matter here
    return result;   

  };
}();
```
Recently, we tried to upgrade **es6-promise** from 2.3.0 to 4.2.4 to benefit from `Promise.prototype.finally`. But then, the above intercepting code failed with a 
> TypeError: Constructor is not a constructor
at resolve$1 (es6-promise.js:231:17)

The reason seems to be that es6-promise's current `Promise.resolve` implementation relies on `this` (to allow inheritance), but the `Enumerator.prototype._eachEntry` implementation ignores this fact [here](https://github.com/stefanpenner/es6-promise/blob/master/lib/es6-promise/enumerator.js#L63) in combination with [line 82](https://github.com/stefanpenner/es6-promise/blob/master/lib/es6-promise/enumerator.js#L82).

To cite from #286 (IMO applies to _resolve_ as well):
> If you wish to destructure all, it can be, but must be first bound.

Well, I understand that this applies to our test framework (line \*1*) and binding `originalResolve` would fix the issue. But I think, the strategy of calling the `originalResolve` with the current `this` and argument (line \*2*) is also fine and a bit more universal. It even should work if someone would re-use the wrapped `Promise.resolve` in a subclass of `Promise`.

IMO it would be fair if `Enumerator.prototype._eachEntry` either would follow the "if you wish to destructure ... it first must be bound" rule itself or would [call `Constructor.resolve` in line 82](https://github.com/stefanpenner/es6-promise/blob/master/lib/es6-promise/enumerator.js#L82).

What do you think?




