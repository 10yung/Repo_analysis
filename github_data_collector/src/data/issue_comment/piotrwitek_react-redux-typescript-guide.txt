Hello,

I'm using `createAsyncAction` to create my async actions.
Then, I create another function using `redux-thunk` to actually perform those actions alltogether.
This leaves me with a confusing export list in my actions.ts (for example) file.
For example, autocomplete suggests me both the action generator _and_ the action executor functions when trying to use it in my container components.

I can't seem to find a way to tie everything together without exporting all functions everywhere...

For example:
```typescript
export const fetchTeamsAsync = createAsyncAction(
  "@@teams/FETCH_TEAMS_REQUEST",
  "@@teams/FETCH_TEAMS_SUCCESS",
  "@@teams/FETCH_TEAMS_FAILURE",
  "@@teams/FETCH_TEAMS_CANCELLED"
)<
  [undefined, CancellableStartMeta],
  [NormalizedSchema<any, string[]>, CancellableEndMeta],
  [Error, CancellableEndMeta],
  [undefined, CancellableEndMeta]
>();

export const execFetchTeamsAsync = () => async (
  dispatch: Dispatch,
  getState: () => Types.RootState
): Promise<void> => {
  // fetch data, dispatch request, success, failure, etc...
};
```

In my reducer, I use the `createReducer()` and `handleAction` functions, which need the exported fetchTeamsAsync variable.
```typescript
createReducer(initialState.currentItems).handleAction(fetchTeamsAsync.success, (state, action) => state);
```

So, essentially I was wondering if there is a way of only exporting the _executing_ function, since this is the only one that needs to be exposed to my container components.

Any help would be appreciated.
Hi @piotrwitek,
Regarding the section `Typing connected component with redux-thunk integration`:
I use the guide mentioned in the _Warning_ of the docs, and this works very well in my case.

However, I was wondering if this was a temporary measure - or is this something future-proof, and still valid when updating redux-thunk, ts version, etc...?
## Description
Hi, there,

I wrote a Chinese Version of the readme to let more people saw your great work ðŸŽ‰  
(by add a `README_SOURCE-zh.md`)  
But I'm not sure the `doctoc`, so **other files are untouched**

Is there any chance for us to finish the process and merge it?

If okay, I would find some language reviewers.

## Changed
- [x] words description translated line by line
- [ ] code block untouched (maybe working on comments later)  
- [x] toc untouched but auto generated
- [ ] contributors section untouched
- [x] `back to top` and some other in-place anchors translated
- [x] some docs links translated to zh version (tslang.cn & zh-hans.reactjs.org)


## Checklist

* [x] I have read [CONTRIBUTING.md](https://github.com/piotrwitek/react-redux-typescript-guide/blob/master/CONTRIBUTING.md)
* [ ] I have edited `README_SOURCE.md` (NOT `README.md`)
* [ ] I have run CI script locally `npm run ci-check` to generate an updated `README.md`
* [ ] I have linked all related issues above
* [ ] I have rebased my branch


Redux and React-Router have introduced new hooks that drastically change the standard patterns:

https://react-redux.js.org/api/hooks

https://reacttraining.com/blog/react-router-v5-1/

Some of these benefit from extra typescript typings that this guide could help with, such as `useDispatch` requiring you to pass the type of the dispatch for action type safety, or `useSelector` benefiting from a type override so you don't have to type the state parameter each call.
Hi,

Firstly, I have found the patterns in the guide very helpful for configuring actions, epics, reducers etc. However, I do not understand how to dispatch a fetch API request action and subsequently bind to a fetch successful action. I have managed to create an epic for a fetch API request that then triggers a success or error action depending upon the success/failure of the API request. 

I do not understand how to hook this up to a functional component, as highlighted in the comments of the CourseList functional component code listing below:

***CourseList Functional Component***
``` typescript
import React, { useEffect } from 'react';

import Grid from '@material-ui/core/Grid';
import { GridSpacing } from '@material-ui/core/Grid';

import Course from '../../components/Course/Course';
import { Course as CourseModel } from '../../redux/features/course/model';

type Props = {
  courses: CourseModel[];
  onFetchCourseRequest: ??? // I want to bind this to the fetch courses action but do not understand how?? what type should this be??
};

export const CourseList: React.FC<Props> = props => {
  const { courses, onFetchCourseRequest } = props;

  // functional equivalent of componentDidMount 
  // this only gets triggered once, since
  // dependency list is empty
  // I want this to to trigger the dispatch of a FETCH_COURSE_LIST action and bind to resulting FETCH_COURSE_LIST
  // I do not understand how to do this from examples....
  useEffect(() => {
    onFetchCourseRequest();
  }, []);

  return (
    <div style={{ marginTop: 20, padding: 30 }}>
      {
        <Grid container spacing={2 as GridSpacing} justify="center">
          {courses.map(element => (
            <Grid item key={element.courseID}>
              <Course course={element} />
            </Grid>
          ))}
        </Grid>
      }
    </div>
  );
};
```

**CourseListConnected**
``` typescript
import { RootState } from 'ReduxTypes';

import { connect } from 'react-redux';

import { CourseList } from './CourseList';
import { courseActions, courseSelectors } from '../../redux/features/course';

const mapDispatchToProps = {
  onFetchCoursesRequest: courseActions.fetchCoursesRequest,
};

const mapStateToProps = (state: RootState) => ({
  courses: courseSelectors.getReduxCourses(state.courses.fetchCoursesSuccess),
});

const CourseListConnected = connect(
  mapStateToProps,
  mapDispatchToProps,
)(CourseList);

export default CourseListConnected;
```

**Epic for Fetching a Course from API**
``` typescript
import { RootAction, RootState, Services } from 'ReduxTypes';
import { Epic } from 'redux-observable';

import { isOfType } from 'typesafe-actions';

import { of } from 'rxjs';
import {
  catchError,
  filter,
  ignoreElements,
  map,
  switchMap,
} from 'rxjs/operators';

import { fetchCoursesFail, fetchCoursesSuccess } from './actions';

import constants from './constants';

export const fetchCoursesRequestAction: Epic<
  RootAction,
  RootAction,
  RootState,
  Services
> = (action$, state$, { courseServices }) =>
  action$.pipe(
    filter(isOfType(constants.FETCH_COURSES_REQUEST)),
    switchMap(action =>
      courseServices.default.getCourses().pipe(
        map(courses => fetchCoursesSuccess(courses)),
        catchError(error => of(fetchCoursesFail(error))),
      ),
    ),
    ignoreElements(), // ignore everything except complete and error, template does this
  );
```
First of all, thanks for all the hard work you've put into this fantastic guide; if I had tried to migrate my team's codebase to typescript without `typsafe-actions` it would have turned into a total dumpster fire. Having end-to-end type data for the redux store makes the entire application such a breeze to work on. All that being said, I do have some gripes about the guide:

It seems really odd that there's such a heavy emphasis on redux-observable. It's great that there is some guidance for people that are using it, but in my experience it's a pretty uncommon middleware. It would be much less frustrating for typescript novices if the documentation was limited to redux-thunk, as that's pretty much the bare bones vanilla redux stack. I've been following the guide and I'm stuck on trying to create the store with the dispatch function constrained to the RootAction type, and my web searches have only turned up a bunch of outdated, garbage blog posts. The lack of typescript examples is of course a huge flaw in the official redux documentation, but since this repository is the de facto guide to type-safe react, it would be much easier to follow if the examples used a very basic store configuration. It would be great to include examples with redux saga and redux observable in the recipes, but it clutters up the basic examples, which should ideally be something that anyone can copy and paste to get a store set up quickly. This applies to the playground as well. As it stands:

```ts
import { RootAction, RootState, Services } from 'MyTypes';
/* What is MyTypes and Services? I haven't seen this mentioned anywhere else in the guide up to
 this point */
import { createStore, applyMiddleware } from 'redux';
import { createEpicMiddleware } from 'redux-observable'; /* I've never used redux-observable 
before; what does this do? */
import { createBrowserHistory } from 'history';
import { routerMiddleware as createRouterMiddleware } from 'connected-react-router';
/* Okay, but I don't need a router to create a basic redux template, and there's nothing here that
couldn't be copy pasted from the redux-router documentation. */

import { composeEnhancers } from './utils';
/* What is utils? It isn't mentioned anywhere else in the guide. (I know it's in the playground source, 
but it's confusing if you don't already know where to look)*/
import rootReducer from './root-reducer';
import rootEpic from './root-epic';
import services from '../services';

// browser history
export const history = createBrowserHistory();

export const epicMiddleware = createEpicMiddleware<
  RootAction,
  RootAction,
  RootState,
  Services
>({
  dependencies: services,
});

const routerMiddleware = createRouterMiddleware(history);

// configure middlewares
const middlewares = [epicMiddleware, routerMiddleware];
// compose enhancers
const enhancer = composeEnhancers(applyMiddleware(...middlewares));

// rehydrate state on app start
const initialState = {};

// create store
const store = createStore(rootReducer(history), initialState, enhancer);

epicMiddleware.run(rootEpic);

// export store singleton instance
export default store;
```

I think it would be better to limit this to what we've already seen in the guide:

```ts
import { RootAction, RootState } from 'types'; // How do I supply this to redux?
import { createStore, applyMiddleware } from 'redux';
import thunk from 'redux-thunk';
import createRootReducer from './root-reducer';

// rehydrate state on app start
const initialState = {};

// create store
const store = createStore(createRootReducer(), initialState, applyMiddleware(thunk));

// export store singleton instance
export default store;
```
Now there's nothing in there to distract from the purpose of the guide, which is learning how to use redux without losing type information. Unfortunately, when setting up the store this way, it has an `AnyAction` constraint on `dispatch`: `Store<RootState, AnyAction>`. I can't figure out how to get a store instance with `dispatch` constrained to `RootAction`. Thanks again for all the great work you've done.
Currently the guide has for react components the state type defined up with the props.  Instead, I propose its changed to be flipped a bit.  For example ->

```jsx
type ownProps = {}
const initialState = {
  isOpen: false
}

class Modal extends React.Component<ownProps, typeof initialState> {
  state = initialState
```
this better follows the repositories philosophy of implementation being the source of truth

Reason being that it doesn't work properly with class components that have default props:

```ts
class Foo extends React.Component<{bar: number}> {
  static defaultProps = {
    bar: 123,
  };
}

const props: React.ComponentProps<typeof Foo> = {};
const foo = <Foo />; // Of course works
```

Results in: `Property 'bar' is missing in type '{}' but required in type '{ bar: number; }'.ts(2741)`

Also, the team who originally wrote it said it was [only supposed to be used internally](https://github.com/DefinitelyTyped/DefinitelyTyped/pull/34899#issuecomment-485815000).

Considering that that discussion about improving `ComponentProps` I just linked to ended without getting resolved, I'd like to suggest to go with one of the following for this guide:
- Instead of `ComponentProps`, have a code block with a custom type for people to use - possibly the one from the PR (since it does work). (While I personally do this in my projects, it seems to me that you're trying to stick with what's possible out of the box, so this might not be an acceptable solution for this guide, I suppose.)
- Completely remove the part about `ComponentProps` from the README.
- Warn about the shortcomings of using the vanilla `ComponentProps`.

I'd also like to note that there's a second shortcoming to both `ComponentProps` as well as my enhanced version: It's just not possible to use this with generic class components. Since TS doesn't support something like `React.ComponentProps<typeof Foo<string>>`. As far as I know. But one of course can export generic prop types.

https://jestjs.io/docs/en/getting-started.html#using-typescript

Hi,

I created a toolkit for React, Redux, Typescript and Rx (epics).
website https://typeless.js.org/
repo https://github.com/typeless-js/typeless
Is it possible to create a new section in Readme "Toolkits"?  
I can submit a PR.

Thanks!