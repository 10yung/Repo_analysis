I don't know if this is an issue with sbt-web, or an consequence of my lack of knowlege about `sbt-web` and `sbt-plugin` (the context is a Play 2.6 project). I apologize if the latter is the case, though I'd appreciate some help.

Essentially I'm trying to hook a task into the asset generation phase, as described [here](https://github.com/sbt/sbt-web#writing-a-source-file-task). It's [sbt-webpack](https://github.com/stonexx/sbt-webpack), which is defined as an `InputTask` (not a pipeline stage task).

It's dependent on the webjars, so to my knowlegde this should work:
```
val foo = TaskKey[Unit]("foo")
foo := { println("now running foo") }
foo in Assets := (foo in Assets).dependsOn(WebKeys.webModules in Assets).value
```

It does not. What I am looking for is a way to have `foo` run in any asset generation phase (i.e. `assets`, `stage`, `dist`, `run`).

[core-js](https://www.npmjs.com/package/core-js) is not copied to `target/web/web-modules/main/webjars/lib` during the assets phase. Every other npm webjars I tried is, but for some reason `core-js` is not. I can provide a test project if needed. Steps to reproduce would be:

* create new play project
* add following dependencies
```
libraryDependencies += "org.webjars.npm" % "core-js" % "3.2.0"
libraryDependencies += "org.webjars.npm" % "decimal.js" % "10.2.0"
```
* run `sbt assets`

Result: `decimal.js` is present in `target/web/web-modules/main/webjars/lib`, `core-js` is not.
Classloading policy changes lead to errors like this:

```
[ERROR] [SECURITY][05/16/2019 21:38:35.956] [sbt-web-akka.actor.default-dispatcher-2] [akka.actor.ActorSystemImpl(sbt-web)] Uncaught error from thread [sbt-web-akka.actor.default-dispatcher-2]: scala/concurrent/Future$$anon$1, shutting down JVM since 'akka.jvm-exit-on-fatal-error' is enabled for ActorSystem[sbt-web]
java.lang.NoClassDefFoundError: scala/concurrent/Future$$anon$1
	at scala.concurrent.Future$.firstCompletedOf(Future.scala:683)
	at akka.actor.CoordinatedShutdown.loop$1(CoordinatedShutdown.scala:382)
	at akka.actor.CoordinatedShutdown.$anonfun$run$6(CoordinatedShutdown.scala:387)
	at scala.concurrent.Future.$anonfun$flatMap$1(Future.scala:307)
	at scala.concurrent.impl.Promise.$anonfun$transformWith$1(Promise.scala:41)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)
	at akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)
	at scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)
	at scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)
	at akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)
	at akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)
	at akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:43)
	at akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)
	at akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)
	at akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)
	at akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)
Caused by: java.lang.ClassNotFoundException: scala.concurrent.Future$$anon$1
	at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:471)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:588)
	at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521)
	... 17 more
```

relevant: https://github.com/sbt/sbt/issues/4691
We're encountering an actor system leak in the Akka build when switching branches, reloading and testing. The memory dump suggests this might be an sbt-web issue, though we haven't narrowed it down entirely yet. I checked and the revisions with which the problem was reproduced both (transitively) depend on sbt-web 1.4.4.

More details at https://github.com/akka/akka/issues/26737
I'm writing an SBT plugin, and I'd like to allow users to set different values for `Setting[String]` (which is defined in my plugin) in their own `build.sbt`. 

There are `Assets` and `TestAssets`. But these configs don't seem to allow me to achieve what I need. Is there another way?

Thank you.
If you use `sbt-web` combined with Scala.js and you use the following in your build.sbt

```sbt
managedClasspath in Runtime += (packageBin in Assets).value
```

When you try to load the project in IntelliJ with this following line, IntelliJ tries to do a full optimized Scala.js build when you try to load the SBT project. Often this times out and causes the project to be unusable within Intellij.

I am not entirely sure if this is an issue with Scala.js or sbt-web. sbt-web is what requires you to put `managedClasspath in Runtime += (packageBin in Assets).value` inside your build.sbt, but I think this clashes with Scala.js
If I the build with `Assets := Seq(rjs)` the build can finish but if I run `pipelineStages in Assets := Seq(rjs)` the build hangs after updating (every time):

```
sbt front/compile
[info] Loading global plugins from /home/codeape/.sbt/0.13/plugins
[info] Loading project definition from /home/codeape/src/git/cronus/project
[info] Set current project to cronus (in build file:/home/codeape/src/git/cronus/)
[info] Updating {file:/home/codeape/src/git/cronus/}cronusw...
[info] Resolving jline#jline;2.12.1 ...
[info] Done updating.
[info] Updating {file:/home/codeape/src/git/cronus/}common...
[info] Resolving com.fasterxml.jackson.module#jackson-module-scala_2.11;2.4.4 ..[info] Resolving jline#jline;2.12.1 ...
[info] Done updating.
[info] Updating {file:/home/codeape/src/git/cronus/}front...
[info] Resolving com.fasterxml.jackson.module#jackson-module-scala_2.11;2.4.4 ..[info] Resolving jline#jline;2.12.1 ...
[info] Done updating.
```

When I look at the process tree it looks like this
```
pstree -a 5381
sbt /home/codeape/bin/sbt front/compile
  └─java -Xms512M -Xmx1536M -Xss1M -XX:+CMSClassUnloadingEnabled -jar /home/codeape/bin/sbt-launch.jar front/compile
      └─16*[{java}]
```

16 threads hanging. 
I can have multiple steps that transform a source file. For instance, suppose that I use less to transform `*.less` files to `*.css` files and then use autoprefixer to transform those `*.css` files. 

Both less and autoprefixer will output source maps, but in the end we only get the source map from the output of autoprefixer to the (intermediate) output of less rather than the original source file. As a developer, this complicates finding the source of a particular bug. 

To remedy this, I was thinking about writing a plugin that is able to merge all source maps produced when pushing a source file through the assets pipeline. To do this, I'd need to know which source maps could be concatenated, i.e. a sequence of source maps generated for a particular input file.

Ex:

```
style.less  --less-->  less/style.css(.map)  --autoprefixer-->  autoprefixer/style.css(.map)
```

For the input `style.less` I'd like to get a `Seq("less/style.css.map", "autoprefixer/style.css.map")`

Is there any way of getting this information?

Not really a bug, but  trying out the following line in build.sbt as per [the readme](https://github.com/sbt/sbt-web#packaging-and-publishing):

```
(managedClasspath in Runtime) += (packageBin in Assets).value
```

I get the error: 

```
Reference to undefined setting:  web-assets:packageBin
```

I've added in plugins.sbt only the following, for sbt-web:

```
addSbtPlugin("com.typesafe.sbt" % "sbt-web" % "latest.release")
```

Any specific imports to be made?
What might be missing?

Also this piece from the same documentation yields an error:

```
WebKeys.packagePrefix in Assets := "public/"
```

Hi, I have a multi-module play app that has the following structure:

```
APP
    ...
    modules
        LINKS_TO_MODULE_A
        LINKS_TO_MODULE_B
        ...
MODULES
    MODULE_A
    MODULE_B
    ...
```

MODULE_A and MODULE_B have CoffeeScript assets and I have sbt-coffeescript plugin enabled in APP. When I run APP and when APP is trying to compile the CoffeeScript assets in MODULE_A and MODULE_B, it throws following exception:

```
java.lang.IllegalArgumentException: runOps function returned results for unknown ops: 
```

But if I replace the kinks under modules folder with the actual modules in MODULES folder, everything would work. Is there anyway to let sbt-web work with symbolic links currently?

Thanks

Kinds

Simon
