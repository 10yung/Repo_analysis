I was just curious to see how my SPA behaved on my Samsung smart TV: It just gave me an empty window. This doesn't matter much to me, but I think it could have been nice if my SPA at least could show some message like "This app requires XYZ". To start with, I'd have to figure out which browser feature(s) to test.
I tested my "smart TV" browser using whatsmybrowser.org, and the results were available at https://whatsmybrowser.org/b/5UVF59K. Here's the results:
```
Operating system	Linux
Javascript enabled	Yes
Cookies enabled	Yes
Flash version	Not installed
Java version	Not installed
Websockets supported	Yes
WebGL supported	Yes
Language	nn-NO
Browser size	1280 x 623
Screen size	1920 x 1080
Color depth	24 bit
AdBlock enabled	No

Your full user agent string is:
Mozilla/5.0 (SMART-TV; Linux; Tizen 2.4.0) AppleWebkit/538.1 (KHTML, like Gecko) SamsungBrowser/1.1 TV Safari/538.1
```
My SPA does not use Bootstrap or jQuery. I coded the needed CSS myself, not too much.
Do the results listed above tell what this "smart TV" browser is missing?
I just tested a SPA I have made (with `npx apprun --init --spa`) on an iPad, and noticed that the component links that normally appear to the right of the "Project Name", were not showing at all. Instead I got a burger-like menu element on the far right, but I did not get access to my components from that menu; it was not responding to clicks/taps. This can be observed in a freshly built AppRun SPA, e.g. in Chrome when selecting emulation of an iPad screen size in the developer tools.
I guess that this has something to do with Bootstrap. There may be some configuration details missing.
In your book, page 79, I read "Notice that we use className to represent the class property in JSX instead of class." That is also what one does in React. However, when I create a new SPA by doing `npx apprun --init --spa`, the file main.tsx that I get contains a lot of className="nav*". That made think that I could use class instead of className in other .tsx files as well, and it seemed to work. Could you please explain?
I have just created the basic SPA by doing `npx apprun --init --spa`. Now I want the app's state to take care of more than just the component name (Home, About, Contact). I may e.g. want to have a counter (+1/-1) on one of the components. In the basic SPA one gets the impression that the component name is the app's state (`state = 'Home';`), but right now it seems that it's not necessarily so. I'm a bit confused.
Hi,
   while not a bug, it would be nice if we could get AppRun built in strict mode. As @yysun  has indicated in #71, it's a goal. To that end I started taking a look, but thought that I'd throw a few things out for comments:

1. *Improve the creation of apprun.d.ts*: Right now, since it's not auto generated from the code, there are situations where the main type file is out of sync with the code. I would suggest that we need to make this file as auto generated as possible. One possible move in this direction would be to move lots of the types into the src/types.ts file that exist right now. We could then convert this into a declaration file and use it to build the src (and then copy over during the build process). Thoughts?

2. *deprecated exports in apprun.d.ts*: In the vain of cleaning up the API, there is at least a comment in this file indicating an obsolete API (update). If this is actually the case, we ought to make an effort to deprecate it given the change was made ~2 years ago.

3. *conflicting types*: Right now I see that there is an Element type defined - which conflicts with the DOM's definition. We could namespace the types and play well with others or we could change the name to AppRunElement or something of the sort. Preferences?

   There is still lots of combing through the code to clean things up but those seem to me to be some first questions to answer and most of the rest ought to be mechanical.

Cheers,
Peter
Presently AppRun doesn't support XML attributes on SVG elements. The major problems are attribute names and namespacing.

Attribute names:
The problem is that JSX doesn't allow ":" in attribute names.

React overcomes this with camel casing so that "xlink:href" (and friends) becomes "xlinkHref". We could alternatively use directives to implement this functionality so that $xlinkHref (and friends) under the hood becomes "xlink:href". I'm not a fan of this approach so opted for camel case replacement. My approach also supports user defined namespaces - although frankly I wouldn't expect people to be using them.

Namespacing:
Presently none of the attributes for SVGElements have namespaces used when setting or getting values. That has been added.

Downsides of the implementation:

The namespace prefixes (and their mapping to dialect) are being stored in a global variable. I suspect they ought to be stored on a per element basis so that one part of the DOM tree can have different values/dialects than another part of the tree (etc). Thoughts?

NOTE: This pull request is the same as #75 but I moved it off to a branch.
In this line, we see that recursive component creation passes the ancestor down in the parent variable.
https://github.com/yysun/apprun/blob/2be47e23e23642fc853fac652d775e67f95248a8/src/createComponent.tsx#L36
(vs `vdom.children = vdom.children.map(child => createComponent(child, vdom, _idx));`)
This means that, in this line:
https://github.com/yysun/apprun/blob/2be47e23e23642fc853fac652d775e67f95248a8/src/createComponent.tsx#L10
we're using the ancestor's cache if rendering the ancestor, and the parent's cache if rendering the parent. I have observed cache miss and recreation of components for that reason. (sometimes with missing sub-components, but that last part _could_ be a problem on my side.)
I tried using vdom and ran into other issues with missing elements. I'm also not sure about the intent here. 
The issue with a global cache might be ID collision; a local cache would fail on a drag and drop, but that's a lesser concern.
Either way, I think it would be good to make sure it is used consistently.

`$on` directive doesn't appear to work, I think because of the issue you mentioned in #70.  However, `onClick` does seem to work, with a couple of exceptions.

First, the type definition for the decorator is wrong.  The type definition shipped with the project is for a decorator, not a decorator factory:
```typescript
export function on<E>(name?: E, options?: EventOptions): void
```
However, the way it is recommended to be used is as a factory in https://medium.com/@yiyisun/strong-typing-in-apprun-78520be329c1.  Changing the definition to the following makes it compile correctly:
```typescript
export function on<E>(name?: E, options?: EventOptions): (target: object, propertyKey: string | symbol) => void;
```
It appears this issue is caused by generating the `d.ts` file by hand.  Is there a reason you aren't just having TSC generate it for you using the `declaration: true` `compilerOption` in your `tsconfig.json`?  I believe webpack will combine `.d.ts` files for you when you bundle.

However, after getting past that error, it leads to a new issue: `import not found: on`.  I'm not sure what is causing this one.  Effectively `import { on } from 'apprun'` is failing to locate the `on` decorator at runtime.  Other imports _are_ working correctly, and I'm not sure why this one is missing.  Perhaps webpack is stripping decorators during tree shaking?
For the class that extends Components, you might want to do something after it's rendered. 
In that case, instance needs access to the root element. 
This change is to assign the element and remove the reference when it's done unload to clean up.