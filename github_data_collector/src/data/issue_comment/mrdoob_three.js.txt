With this small patch, it's now possible to use the outline pass with animated meshes. The only thing users have to add at app level is to set `morphTargets` or `skinning` to `true` for `OutlinePass.depthMaterial` and `OutlinePass.prepareMaskMaterial`. That's of course still a manual effort but at least the more complicated shader enhancement is already done.

https://jsfiddle.net/35vrtm42/
* Correct the type signature of `isPresenting`.
* Add `getReferenceSpace()`, which was missing.

1. Servez has an app version which some people find easier

2. http-server has been semi-abandoned. It has issued errors
   on windows for > 6 months and is using deprecated and
   discontinued libraries.

   In response to seeing it wasn't working well for windows
   users and that the maintainers showed no interested in fixing
   it I created a command-line version of
   [servez](https://www.npmjs.com/package/servez).
i saw it at:
https://github.com/mrdoob/three.js/pull/5679/commits/79a082a0f60eb63393b3b547f8bf75422c135653

but it seems to be deprecated
##### Description of the problem

I put a new version of my app online based on the development version r113 of Threejs. I was previously using r108. However since the update I keep receiving an increasing amount of requests from users stating that WebGL is crashing and sometimes even freezing and crashing the entire system. This is a hard one because I didn't experience it myself however when I received hundreds of messages on all my communication channels I could not ignore it.

I am using the material node system and the new pmrem generator for environment lighting.
I made them try the official examples for [pmrem/nodes](https://threejs.org/examples/?q=node#webgl_materials_envmaps_pmrem_nodes) and [materials/nodes](https://threejs.org/examples/?q=node#webgl_materials_nodes) and they have the same issues. So it is not just related to my code. The threejs_org twitter account made one of the user try this [example](https://raw.githack.com/mrdoob/three.js/dev/examples/?q=nodes#webgl_materials_envmaps_pmrem_nodes) and the result was similar.

From the feedback that I have it happens at least on both systems Windows (7 & 10) and MacOs. It doesn't seem to be related to any particular browser.

One of them posted the following logs:
![EOelwhiWoAIOok2](https://user-images.githubusercontent.com/45501180/72661904-ec029200-3a44-11ea-96f2-213ada7b40f7.png)
and 

![EOjgk-lX4AAXQcY](https://user-images.githubusercontent.com/45501180/72661979-e9546c80-3a45-11ea-835c-15e75da33dd9.png)


A MacOs user sent me a screenshot of his system. The issue is completely freezing his system.
![macos](https://user-images.githubusercontent.com/45501180/72661926-2e2bd380-3a45-11ea-8aca-8ea00b3426bc.jpg)

Don't know if it is related to this issue https://github.com/mrdoob/three.js/issues/18408

I will provide more information as I get them. I may be able to find a pattern among the OS/GPUs.

##### Three.js version

- [x] Dev
- [x] r112

##### Browser

- [x] All of them

##### OS

- [x] Windows
- [x] macOS

From: #11682

This PR adds extensibility to `GLTFLoader`. It adds puglin API and rewrites the existing extension handlers. I'm not sure if the API and implementation are good yet. So opened as draft PR. Feedback is very welcome.

**Benefits**

* Simplifying `GLTFParser` by separating extension handlers from core `GLTFParser`
* Easiness to add new or custom extension handlers without messing `GLTFParser`
* Easiness to reuse even custom extension handlers

**API**

```javascript
// I call handler plugin so far

class MyExtensionHandler {
  constructor () {
    // If extension is defined, the handler is for an gltfDef.extensions,
    // it's called only for gltfDef.extensions[ extension ] is defined.
    // If extension is empty strings or undefined, the handler is for generic,
    // it's called regardless of gltfDef.extensions.
    this.extension = 'EXT_foo';
  }

  // If onBeforeXXX method is defined,
  // it is called before parser.loadXXX()
  // Currently only GLTF (entire gltf def) supports onBeforeXXX
  // @param {GLTF.definition} def
  // @param {parser} GLTFParser
  // @return {Promise<Object>}
  onBeforeXXX (def, parser) {
    // override def
    return Promise.resolve(def);
  }

  // If onXXX method is defined
  // it is called in parser.loadXXX() to create an XXX instance
  // on behalf of entire or part of parser.loadXXX().
  // Currently only Texture, Material, Geometry and Node,
  // needed for existing extension handlers, support onXXX.
  // We should support all XXX later.
  // @param {GLTF.definition} def
  // @param {parser} GLTFParser
  // @return {Promise<Object>|null}
  onXXX (def, parser) {
    var object = new XXX();
    // set up object
    return Promise.resolve(object);
    // return null if you don't want to create instance because of certain reasons.
    // In such a case, next plugin is called, 
    // or `GLTFParser.loadXXX()` creates if no more plugins registered
  }

  // If onAfterXXX method is defined
  // it is called after parser.loadXXX().
  // In addition to XXX of all .loadXXX(),
  // Map for material.fooTexture.extensions support onAfterXXX.
  // @param {Object} object
  // @param {GLTF.definition} def
  // @param {parser} GLTFParser
  // @return {Promise<Object>}
  onAfterXXX (object, def, parser) {
    // override object properties or 
    // creating a new object
    return Promise.resolve(object);
  }
}

const loader = new GLTFLoader();
loader.registerPlugin(new MyExtensionHandler());
loader.load( ... );
```

**Live Demo**

https://raw.githack.com/takahirox/three.js/GLTFLoaderPluginSystem/examples/webgl_loader_gltf_extensions.html

**Notes**

* I implemented the existing extension handlers into `GLTFLoader.js` and registered as default because (a.) most of them are popular extensions and I want users to avoid import separated plugin files and (b.) some of them, for example Draco extension, rely on some logics implemented in `GLTFLoader.js` and I couldn't clearly separate.
* Maybe sounds good to keep adding `KHR_` extensions in `GLTFLoader.js` and adding separated plugin files for other extensions into `examples/js(m)/loaders/gltfPlugins/` or somewhere if needed?
* If this PR is too huge, maybe I can break it up into some PRs. For example one PR for one extension handler.
* This PR includes the cleaned up change in #14099, thanks @pailhead. Maybe better to merge this PR after merging #14099 as respect to him if we decide to go with this change?
* (Update) Regarding `onXXX`, I implemented  only `Texture`, `Material`, `Geometry` and `Node` in this draft PR for now because I first wanted to show the API and how the existing handlers can be rewritten. I'm thinking to add others in this or other PRs later. Regarding `onBeforeXXX`, I had a [comment](https://github.com/mrdoob/three.js/issues/11682#issuecomment-497984862) and I'm not sure yet if we really need. So I implemented only `GLTF` so far because I only see the request that they need "before" hook point for entire gltf.
Typically, a single renderer is used to render not only the scene, but for inset viewports, for render-targets, for post-processing, etc. In each case, the rendered scene may or may not have a background. Also, there may be multiple scenes. This can cause the scene background material to be recompiled every frame. (To replicate, add a texture background in `/examples/webgl_shadowmap_viewer.html`.)

I am thinking `webGLBackground` may have to be redesigned, but this change in an improvement -- at least in the cases I have studied.

Fixes #18408
Fixes #18409 

Switched to using the render target's viewport and scissor instead of the renderer's, so as not to affect state. Also some minor cleanup.
Remove the need to create new TypedArray objects when using attribute.updateRange  by using the  bufferSubData() WebGL2 API which removes the need for TypedArray.subarray().

See #18387 for diagnosis and details.

Tested and reduces GC frequency 
How feasible is it to adapt a multi-thread approach to this loader similar to how OBJLoader2Parallel does it? What would be involved? I see that @kaisalmen as mentioned something similar in previous issues but don't see anything recent.