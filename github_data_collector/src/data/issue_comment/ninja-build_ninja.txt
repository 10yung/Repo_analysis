Test: ./ninja -t inputs -i -d ninja
The bread and butter of non-mainstream tools these days is having a couple of comparison pages that compare and contrast their own product with the main known ones. These typically go a couple links away from the home screen, and function as landing pages for anyone trying to understand the new software in terms of the old. And the author typically explain where their own product shines, and where it cannot (yet? PRs accepted, etc) compete.

(I came here to say that, and to try to find what build system Chromium uses, or used to use, in concert with the - then - newly popular linker gold.)
Hi! There is one problem when using ninja on the desktop: when compiling large projects in low memory conditions with active swapping, the desktop may completely freeze.

Fedora Workstation guys discuss ways to improve desktop interactivity in low-memory situations. A typical case that causes a state of low memory, poor interactivity, and even complete freezing is a compilation of large projects: https://pagure.io/fedora-workstation/issue/98#comment-588713.

It seems that there is already an option to increase interactivity:

```
  -l N     do not start new jobs if the load average is greater than N
```

I suggest also using options based on the use of `PSI` in addition to the `-l` option. PSI is a new metrics that appeared in Linux 4.20.

About PSI:

- https://lwn.net/Articles/759658/
- https://lwn.net/Articles/759781/
- https://lwn.net/Articles/783520/
- https://facebookmicrosites.github.io/psi/
- https://www.kernel.org/doc/html/latest/accounting/psi.html
- https://unixism.net/2019/08/linux-pressure-stall-information-psi-by-example/

PSI metrics allow accurate estimation of io and memory pressure. My suggestion is to add new CLI options:

```
  --psi-mem N   do not start new jobs if PSI memory pressure some_avg10 is greater than N
  --psi-io N    do not start new jobs if PSI io pressure some_avg10 is greater than N
```

I would like to run a ninja with the options `--psi-mem 20` and `--psi-io 40` so that with low-memory conditions the minimum responsiveness of the desktop is maintained.

This should not be difficult to implement: the necessary numbers can be taken from the files `/proc/pressure/memory` and `/proc/pressure/io`.
I'm running a CI where patches sometimes have their timestamps in the future. Meson/ninja fails to compile patches where the times are in the future.

The workaround is to just update the time on all the files (`find . -exec touch {} +`).

(Not really sure if this is a meson issue, a ninja issue, or even a python issue based on other bug reports)

Sorry if this is a duplicate. My searching didn't find a bug report that had a final resolution/workaround.

# Example

main.c:
```c
#include<stdio.h>

int main(int argc, char **argv) {
  printf("Hello there.\n");
  return 0;
}
```

meson.build:
```meson
project('tutorial', 'c')
executable('demo', 'main.c')
```

```
$ touch -a -m -t 203011110000.00 meson.build
$ meson builddir
The Meson build system
Version: 0.51.2
Source dir: /home/jplsek/Documents/ninja-time-hello
Build dir: /home/jplsek/Documents/ninja-time-hello/builddir
Build type: native build
Project name: tutorial
Project version: undefined
C compiler for the host machine: cc (gcc 9.2.1 "cc (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008")
Build machine cpu family: x86_64
Build machine cpu: x86_64
Build targets in project: 1
Found ninja-1.9.0 at /usr/bin/ninja
$ ninja -C builddir
ninja: Entering directory `builddir'
...
[0/1] Regenerating build files.
The Meson build system
Version: 0.51.2
Source dir: /home/jplsek/Documents/ninja-time-hello
Build dir: /home/jplsek/Documents/ninja-time-hello/builddir
Build type: native build
Project name: tutorial
Project version: undefined
C compiler for the host machine: cc (gcc 9.2.1 "cc (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008")
Build machine cpu family: x86_64
Build machine cpu: x86_64
Build targets in project: 1
Found ninja-1.9.0 at /usr/bin/ninja
[0/1] Regenerating build files.
The Meson build system
Version: 0.51.2
Source dir: /home/jplsek/Documents/ninja-time-hello
Build dir: /home/jplsek/Documents/ninja-time-hello/builddir
Build type: native build
Project name: tutorial
Project version: undefined
C compiler for the host machine: cc (gcc 9.2.1 "cc (Ubuntu 9.2.1-9ubuntu2) 9.2.1 20191008")
Build machine cpu family: x86_64
Build machine cpu: x86_64
Build targets in project: 1
Found ninja-1.9.0 at /usr/bin/ninja
ninja: error: manifest 'build.ninja' still dirty after 100 tries
```

# Expectation

To either compile anyways (similar to using a Makefile), or to fail on its first try and provide an error message related to the time being an issue.
ctest knows how to get diagnostic information from a bunch of different unit test frameworks, but apparently not the custom one ninja is using.

This change should ensure we have full test output.

Hello,

I finally upgraded to Mac OS Catalina, and due to the changes in Gatekeeper the version of ninja on the Github releases page is now blocked from running (v1.9.0). There doesn't appear to be a way to verify command line apps individually on Catalina, you can only disable it entirely (I may have misunderstood the instructions on the web-page I found).

I installed via `brew` instead, and that version runs fine. I am mostly reporting this issue for anyone else who has a problem with this, as I couldn't find mention of it already.
![image](https://user-images.githubusercontent.com/57303909/69611973-dfd9f580-0ffc-11ea-814f-b709f394166e.png)

On macOS the linker doesn't assemble debug info for an executable, you need to call `dsymutil` for that separately:

```ninja
rule generatedebug
  command = dsymutil $in

build test.dSYM/: generatedebug test
```
That builds the `test.dSYM` directory fine. However, `ninja -t clean` fails:

```bash
$ ninja -t clean
Cleaning... ninja: error: remove(test.dSYM): Directory not empty
0 files.
```

Is there a way to insert a `-r` flag for the clean target? Or should the default clean target just work on directories?
Currently $in processing has two options $in and $in_newline
This means that some common separators e.g. + separator ( windows copy), &\r\n for some older library tools or comma for some older linker tools cannot use $in directly and have to rely on other tools to effectively replicate $in with a new separator.

As a suggestion if there was a variable $in_separator (default space), that was used to separate $in tokens this could then be  used to support all options relatively easily including the current $in_newline variant