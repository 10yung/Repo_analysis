for example, the following test case will fail:

TEST(ThreadPool, Case1) {
        ThreadPool pool(4);
        int x = 1;

        auto res = pool.enqueue([](int& y){ y = 99; },  x);
        res.get();

        EXPECT_EQ(x, 99);
}
class A {
    virture void a() = 0;
};
class B:public A {
     void a(){} override;
};
how can I use override function a like this?
A a = new B();
enqueue(
         &a->a,
          this)

I have many locations to wait the result, so thousand futures are created, but the program throw an exception about the future creations.

The reason may be the inner std::async use the std::launch::async mode.
This PR solves conflicts when using this repo as a git submodule. This simplifies using this repo within large git projects.
Dear developer:
I want to add `shutdown` function that waits until all worker finish. Because I found ThreadPool will deconstructing directly if process exit. I think user have right to choose terminate ThreadPool or wait for finishing.

Are you agree with me? If you do I can submit a PR. Have a good day!

Since it's already 2018 and most compilers have supported `C++14`, `C++14` feature may be used now.

When compiling with GCC using `-Winline` the compiler warns that the call to the destructor will not be inlined (I use `ThreadPool` in multiple places):

```
ThreadPool/ThreadPool.h:87:8: warning: inlining failed in call to 
‘ThreadPool::~ThreadPool() noexcept’: call is unlikely and code size would grow [-Winline]
 inline ThreadPool::~ThreadPool()
```

Besides, there is no reason in `inline` here. Removing it.
Some thing like getActiveCount() in java, so to let consumers of the threadpool know if waiting is needed.