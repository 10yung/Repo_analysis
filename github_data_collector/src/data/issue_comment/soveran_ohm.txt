I have use case where I'm trying to create a new model instance for an array of Redis hosts. I currently have this executing in a Sidekiq job, which relies on threads. I'm getting varying results of writes to each host. For example, I'll process 100 jobs and each host will not have the same number of updates. Is there any way to accomplish this with Ohm?

```
hosts = ['192.168.1.1', '192.168.1.2', '192.168.1.3','192.168.1.4']

hosts.each do |host|
  Event.redis = Redic.new("redis://#{host}:6379")
  Event.create :name => "Ohm Worldwide Conference 2031"
end
```

Small collections seem to have the items returned in order by id, but larger collections return the items in a seemingly random order.  

Is this intentional?
If so, is there any way to specify a default sort order, other than to create a `sorted_xxx` method on the class to wrap the collection?

Here's a little [gist](https://gist.github.com/lynnfaraday/fa59879afaf24e5f13bd4002ce57caf3) showing the behavior.

With a small collection (100 items) the items are in order by ID:

Small 100
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99

With a large collection (3000 items) the items are in a seemingly random order:

Big 3000
1800 1924 1424 569 132 136 637 340 1232 299 1119 52 78 433 1400 352 1139 1629 1603 260 461 1077 1666 512 1652 800 613 978 1878 1350 441 1539 417 209 1951 310 745 844 1349 2010 1768 746 1655 1199 367 719 498 390 1467 1138 1846 1789 173 150 1078 1791 34 229 ...
Is there a method for last id getting?
Something like `User.last_id`, more low-cost (and low-level) than current `User.all.ids[-1]`
When I change my model, any fields that are still present in Redis cause a NoMethodError, e.g.

```ruby
> Device.all.entries[0]
Traceback (most recent call last):
        2: from (irb):5
        1: from (irb):5:in `entries'
NoMethodError (undefined method `created_at=' for #<Device:0x0000000004c48278 @attributes={}, @_memo={}>)
```

Is there any way to get Ohm to ignore any fields from Redis that are not in the model? - or is there some other recommended strategy to handle this?
Hi all,

I was curious if anyone thought a method that fetches records by a unique and an array of values would be useful on Ohm::Model? It would look something like...

```
    # I'm not a fan of the method name...
    def self.fetch_with(att, values)
      raise Ohm::IndexNotFound unless uniques.include?(att)

      ids = nil
      unique = key[:uniques][att]

      synchronize do
        values.map { |value| redis.queue('HGET', unique, value) }

        ids = redis.commit
      end

      return [] if ids.nil?

      fetch(ids)
    end
```

There is a point in the application I'm working on that uses something similar, and just wanted to share incase you all might find a generic version of it it useful for everyone.
Referencing #224 here, so the following applies to the model described there. And I am still using Ohm 2.3 :-|

I might have a race condition because of network lag on deleting from a list. 
This happens only under heavy load, i.e. multiple web requests per second.
My app has multiple services running. In one of the services messages will be deleted from projects.

This is the delete method in ```Project``` to remove the message first from the list and then the model itself.

```ruby
    def deletemessage(m)
        messages.delete(m)  # delete from list
        m.delete   # delete model
    end
```

After deleting a message I get NoMethod errors from my web processes, which try to create a json feed from the messages and expect all attributes to exist. 

I can see that when loading the messages with

```ruby
@p = Project[4711]
@msgs = p.messages.to_a
# create json from @msgs array
```

the deleted messages are still inside the array, but without any attributes. 

```
#<Message:0x007f95acf71068 @attributes={:score=>0}, @_memo={}, @id="1247196">
```

So I suspect Ohm got an "old" list of ids and tried to load the message, which failed. Nevertheless the empty message is inside the returned array.
After a few seconds the web requests are "recovering" and now get the correct data without the deleted message.
(I do not get the error, when I just delete the reference from the list and do not delete the corresponding message itself, which obviously it not what I want)

Any ideas why this is happening and what would be the best approach to solve this?

Thanks
Christian

Hello all, looking to see if we can get connection_pool support?
```ruby
time-agent(prod)> Device.all.each {|d| p d.camera_id}
nil
nil
nil
"56f290913d1f9207691bab65"
nil
time-agent(prod)> Device.find(camera_id: '56f290913d1f9207691bab65').count
=> 1
time-agent(prod)> Device.find(camera_id: nil).count
=> 0
```

I'm expecting it to find the 4 devices where camera_id is nil, but it's not finding anything. Any ideas?
In the [tagging example](https://github.com/soveran/ohm/blob/master/examples/tagging.rb), we can find posts having a certain tag with this:

``` ruby
Post.find(tag: 'tagging')
```

Now how would someone be able to get the posts matching a tag (pretty much reversed logic) ?

I'm assuming you would need a reference in the `Tag` model to the Post model but I can't quite figure it in the Ohm way:

``` ruby
class Tag < Ohm::Model
  counter :total
  reference :posts, :Post

# How would you query Tag model after that to find the posts associated ?
```

Any chance it could be added to the example ?

Thanks a lot!

Hello! Is there any Redis Cluster support planned or tried?
First of all I mean proper group operations handling via corresponding key(s) composition and preventing incorrect attempts

May be you have some posts with having this tried/tested with Ohm or some plans about this?

Thanks!
