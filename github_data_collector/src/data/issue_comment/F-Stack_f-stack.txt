ping -f test, and 28% packet loss. Open kni, packet loss 0%

test:
$ sudo ping 192.168.1.2 -f
PING 192.168.1.2 (192.168.1.2) 56(84) bytes of data.

--- 192.168.1.2 ping statistics ---
12290 packets transmitted, 8756 received, 28% packet loss, time 43752ms
rtt min/avg/max/mdev = 0.046/0.096/0.249/0.013 ms, ipg/ewma 3.560/0.095 ms
Hey F-stack Geeks,
I am New to F-stack. I am trying to make tcp connection via F-stack over dpdk(19.08). The example given in F-stack package creates server but when i am trying to connect that port from same or another pc It is not responding anything.Still in netstat it is showing that server is listening but i am not able to connect from my client application. I tried client application with n without (eg  Winshock Client app) F-stack but nothing good.
Here is my f-stack client code.
 #include <stdio.h>
#include <sys/ioctl.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>
#include <strings.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <errno.h>
#include <assert.h>

#include "ff_config.h"
#include "ff_api.h"
#include "ff_epoll.h"


#define MAX_EVENTS 512

struct epoll_event ev;
struct epoll_event events[MAX_EVENTS];

int epfd;
int sockfd;

char html[] = 
"HTTP/1.1 200 OK\r\n"
"Server: F-Stack\r\n"
"Date: Sat, 25 Feb 2017 09:26:33 GMT\r\n"
"Content-Type: text/html\r\n"
"Content-Length: 438\r\n"
"Last-Modified: Tue, 21 Feb 2017 09:44:03 GMT\r\n"
"Connection: keep-alive\r\n"
"Accept-Ranges: bytes\r\n"
"\r\n"
"<!DOCTYPE html>\r\n"
"<html>\r\n"
"<head>\r\n"
"<title>Welcome to F-Stack!</title>\r\n"
"<style>\r\n"
"    body {  \r\n"
"        width: 35em;\r\n"
"        margin: 0 auto; \r\n"
"        font-family: Tahoma, Verdana, Arial, sans-serif;\r\n"
"    }\r\n"
"</style>\r\n"
"</head>\r\n"
"<body>\r\n"
"<h1>Welcome to F-Stack!</h1>\r\n"
"\r\n"
"<p>For online documentation and support please refer to\r\n"
"<a href=\"http://F-Stack.org/\">F-Stack.org</a>.<br/>\r\n"
"\r\n"
"<p><em>Thank you for using F-Stack.</em></p>\r\n"
"</body>\r\n"
"</html>";
struct sockaddr_in my_addr;
int loop(void *arg)
{
    /* Wait for events to happen */

    int nevents = ff_epoll_wait(epfd,  events, MAX_EVENTS, 0);
    int i;

    for (i = 0; i < nevents; ++i) {
        /* Handle new connect */
        if (events[i].data.fd == sockfd) {
            while (1) {
                int nclientfd = ff_accept(sockfd, (struct linux_sockaddr *)&my_addr, sizeof(my_addr));
                if (nclientfd < 0) {
                    break;
                }

                /* Add to event list */
                ev.data.fd = nclientfd;
                ev.events  = EPOLLIN;
                if (ff_epoll_ctl(epfd, EPOLL_CTL_ADD, nclientfd, &ev) != 0) {
                    printf("ff_epoll_ctl failed:%d, %s\n", errno,
                        strerror(errno));
                    break;
                }
            }
        } else { 
            if (events[i].events & EPOLLERR ) {
                /* Simply close socket */
                ff_epoll_ctl(epfd, EPOLL_CTL_DEL,  events[i].data.fd, NULL);
                ff_close(events[i].data.fd);
            } else if (events[i].events & EPOLLIN) {
                char buf[256];
                size_t readlen = ff_read( events[i].data.fd, buf, sizeof(buf));
                if(readlen > 0) {
                    ff_write( events[i].data.fd, html, sizeof(html) - 1);
                } else {
                    ff_epoll_ctl(epfd, EPOLL_CTL_DEL,  events[i].data.fd, NULL);
                    ff_close( events[i].data.fd);
                }
            } else {
                printf("unknown event: %8.8X\n", events[i].events);
            }
        }
    }
}

int main(int argc, char * argv[])
{
    ff_init(argc, argv);

    sockfd = ff_socket(AF_INET, SOCK_STREAM, 0);
    printf("sockfd:%d\n", sockfd);
    if (sockfd < 0) {
        printf("ff_socket failed\n");
        exit(1);
    }

    int on = 1;
    ff_ioctl(sockfd, FIONBIO, &on);

    
    bzero(&my_addr, sizeof(my_addr));
    my_addr.sin_family = AF_INET;
    my_addr.sin_port = htons(15231);
    my_addr.sin_addr.s_addr = inet_addr("127.0.0.1");

    int ret = ff_bind(sockfd, (struct linux_sockaddr *)&my_addr, sizeof(my_addr));
    if (ret < 0) {
        printf("ff_bind failed\n");
        exit(1);
    }

    ret = (ff_connect(sockfd, (struct linux_sockaddr *)&my_addr, sizeof(my_addr)) == -1);  //ff_connect
    if (ret < 0) {
        printf("ff_listen failed\n");
        exit(1);
    }

    assert((epfd = ff_epoll_create(0)) > 0);
    ev.data.fd = sockfd;
    ev.events = EPOLLIN;
    ff_epoll_ctl(epfd, EPOLL_CTL_ADD, sockfd, &ev);
    ff_run(loop, NULL);
    return 0;
}
ITNOA

I think it is good to port to new FreeBSD release 12.1 for minor improvement in `tcp/ip` stack
Hi,

I  tried to test ff_sendmsg. After first ff_sendmsg, the msg_iov in "struct msghdr" are modified (eg.
msg_iov is a iov array, and the char data in iov[i].iov_base are reset to '\0', and iov[i].iov_len becomes 0)

The internal data of  struct msghdr are not changed in generic linux socket.
Is it a bug in f-stack or and my misuse of ff_sendmsg?
Thanks.

Here is the server and client codes using sendmsg and recvmsg.
https://github.com/naturlich/pingpong/tree/master/sendrecv/f-stack
you try your best to use DPDK , and also port freebsd stack . then in the final step the old application use read/write to do memory copy, oh  bad thing.  
   why not modify the application  use mbuf directly to avoid memory copy, gives a good API to do it. ?   
Hello,

I am investigating how the parameters in config.ini impact on the performance.
The "tso" is set to be 0 by default currently.

I notice the commit "TSO has a problem: when enable TSO"
https://github.com/F-Stack/f-stack/commit/213fa7b3584baf6908da01f648430b0dad18241a

Is the issue resolved or not?
If not, why does TSO degrade the f-stack's performance?

Thanks.
Hello,

I have  simple setup to test the performance of Redis with f-stack (v1.20).
Two PCs equipped with one 10 GbE NIC (Intel X540-AT2) are directly connected by an Ethernet cable.

- Test 1: use f-stack redis v5.0.5, 1 lcore and 1024x2MB hugepages
The PC A (ip: 10.0.0.1) is binded with igb_uio driver and run redis-server by
```
redis-server --conf config.ini --proc-type=primary --proc-id=0 /etc/redis/redis.conf
```
- Test 2: use offcial redis v.5.0.5
The PC A (ip: 10.0.0.1) is binded with igb driver  and run redis-server by
```
redis-server /etc/redis/redis.conf
```

The PC B (use generic linux network stack) runs the command to test the two servers' performance
```
redis-benchmark -t set,get -h 10.0.0.1 -p 6379 -d 40 -n 100000 -c <N>
```

However, I got the results

  | f-stack redis | official redis
-- | -- | --
num. of clients | 1 | 1
SET (Req/Sec) | 3592.86 | 3904.42
GET (Req/Sec) | 3672.02 | 4199.39


  | f-stack redis | official redis
-- | -- | --
num. of clients | 50 | 50
SET (Req/Sec) | 112981.59 | 105797.72
GET (Req/Sec) | 117980.18 | 111370.98


  | f-stack redis | official redis
-- | -- | --
num. of clients | 100 | 100
SET (Req/Sec) | 100441.94 | 101235.06
GET (Req/Sec) | 102880.66 | 101781.17

The f-stack Redis' performance is similar to official Redis.
Is this expected? Or, is there any setting incorrect?

By the way, I also test the f-stack nginx and official nginx.
 f-stack nginx's performance is roughly three times better than official nginx.

Thans!








Hello,
I have a java program which sends many http/https requests which deployed on aws. So in this scenario does it possible to use f-stack to decrease reply latency? Thanks. 
Rust is a memory-safe language suitable for low level programming. 
Does f-stack support keepalived?