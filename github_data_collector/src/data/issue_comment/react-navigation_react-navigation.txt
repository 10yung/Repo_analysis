Even with an empty demo project, I find that I can't navigate to a new view without dropping at least one or two frames during the transition animation. This is a real bummer because it's the only thing separating the feel of my react native app from a genuine native app.

Here's a video recorded at 60fps on an iPhone XS. You'll notice a frame drop toward the end that makes the animation feel choppy.

[dropped-frame.mp4.zip](https://github.com/react-navigation/react-navigation/files/4075042/dropped-frame.mp4.zip)

I believe react navigation uses the native driver so what is causing this dropped frame? And can anything be done to prevent it and create smoother transitions? 
Before, I used v2 to achieve this effect by routing nesting: horizontally switched routes can pop up modal, and pages inside modal can be switched horizontally.

It is found that the routing nesting of the v4 version is not the same as beforeã€‚

Can anyone help me achieve the previous effect using v4

"react-native": "0.61.5",
"react-navigation": "4.0.10",

**Setup**

```
import {
  createAppContainer,
  createStackNavigator,
  createSwitchNavigator,
  createBottomTabNavigator,
} from 'react-navigation';

const TutorialNavigator = createStackNavigator(
  {
    FirstScreen: ({ navigation }) => { },
    SecondScreen: ({ navigation }) => { },
  },
  {
    initialRouteName: 'FirstScreen',
  }
);

const AppNavigator = createBottomTabNavigator(
  {
    HomeNavigator: createStackNavigator(
      {
        FirstScreen: ({ navigation }) => { },
        SecondScreen: ({ navigation }) => { },
        ThirdScreen: ({ navigation }) => { },
        FourthScreen: ({ navigation }) => { },
      },
      {
        initialRouteName: 'FirstScreen',
      }
    ),
    ProfileNavigator: createStackNavigator({
      FirstScreen: ({ navigation }) => { },
      SecondScreen: ({ navigation }) => { },
    }, {
      initialRouteName: 'FirstScreen',
    }),
  },
  {
    initialRouteName: 'Home',
  }
);

const MainNavigator = createStackNavigator(
  {
    TutorialNavigator,
    AppNavigator,
  },
  {
    initialRouteName: 'AppNavigator',
    headerMode: 'none',
    mode: 'modal',
  }
);

const RootNavigator = createStackNavigator(
  {
    MainNavigator,
  },
  {
    mode: 'modal',
    headerMode: 'none',
    initialRouteName: 'MainStackNavigator',
  }
);

export default createAppContainer(
  createSwitchNavigator(
    {
      RootNavigator,
    },
    {
      initialRouteName: 'Root',
    }
  )
);
```

Performing the following navigation:

```
RootNavigator -> MainNavigator -> AppNavigator -> HomeNavigator -> FirstScreen -> SecondScreen -> ThirdScreen
```

followed by

```
TutorialNavigator -> FirstScreen -> SecondScreen
```

followed by

```
HomeNavigator -> FourthScreen
```

If I initiate a back navigation, from the FourthScreen of the HomeNavigator, I will end up on the ThirdScreen of the HomeNavigator (the navigation of the first line), because the TutorialNavigator's stack was removed once I navigated away from it.

Question:

How can I navigate from the SecondScreen of the TutorialNavigator (the second line) to the FourthScreen of the HomeNavigator and remove the ThirdScreen from the history, i.e. when I go back from the FourthScreen, I don't want to end up on the ThirdScreen, but I want to end up on the SecondScreen of the HomeNavigator?

Since the use case constrains the navigation to be initiated from the TutorialNavigators' screens to the FourthScreen of the HomeNavigator, here are my working attempts that yield an inconsistent behaviour from the animation point of view:

1st:
```
const parentNavigation = navigation.dangerouslyGetParent();

const goHome = NavigationActions.navigate({
  routeName: 'Home',
  action: NavigationActions.navigate({
    routeName: 'FirstScreen'
  })
});

const goToHomeFourthScreen = NavigationActions.navigate({
  routeName: 'FourthScreen',
  params: { subscriptionKey }
});

parentNavigation.dispatch(goHome);
parentNavigation.dispatch(goToHomeFourthScreen);
```

2nd

```
navigation.dismiss();

parentNavigation.reset({
  routeName: 'FourthScreen',
  params: { subscriptionKey }
});
```

Not working:

```
parentNavigation.dispatch(
  StackActions.reset({
    key: 'AppNavigator',
    index: 0,
    actions: [
      NavigationActions.navigate({
        routeName: 'HomeNavigator'
      }),
      NavigationActions.navigate({
        routeName: 'FourthScreen'
      })
    ]
  })
);
```

Any attempts to dispatch a reset with multiple actions fails or has no effect.

**Your Environment**

| software         | version |
| ---------------- | ------- |
| iOS or Android   | Both
| react-navigation | 3.11.1
| react-native     | 0.61.3
| expo             | N/A
| node             | N/A
| npm or yarn      | N/A

**Current Behavior**

Runnin `expo start --web` produce:

```js

 web  Compiled with warnings.
/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'DrawerActionType' is not exported from './DrawerRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'DrawerNavigationState' is not exported from './DrawerRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'DrawerRouterOptions' is not exported from './DrawerRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'StackActionType' is not exported from './StackRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'StackNavigationState' is not exported from './StackRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'StackRouterOptions' is not exported from './StackRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'TabActionType' is not exported from './TabRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'TabNavigationState' is not exported from './TabRouter'.

/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/index.js
Attempted import error: 'TabRouterOptions' is not exported from './TabRouter'.
```

**Expected Behavior**

I expect the app to start without warnings.

Looking at `/home/dka/workspace/test-native/node_modules/@react-navigation/routers/lib/module/DrawerRouter.js`, it seems that you are exporting types that are not bundled:

```js
import _defineProperty from"@babel/runtime/helpers/defineProperty";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;});keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=arguments[i]!=null?arguments[i]:{};if(i%2){ownKeys(Object(source),true).forEach(function(key){_defineProperty(target,key,source[key]);});}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source));}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}}return target;}import shortid from'shortid';import TabRouter,{TabActions}from'./TabRouter';export var DrawerActions=_objectSpread({},TabActions,{openDrawer:function openDrawer(){return{type:'OPEN_DRAWER'};},closeDrawer:function closeDrawer(){return{type:'CLOSE_DRAWER'};},toggleDrawer:function toggleDrawer(){return{type:'TOGGLE_DRAWER'};}});export default function DrawerRouter(options){var router=TabRouter(options);return _objectSpread({},router,{type:'drawer',getInitialState:function getInitialState(_ref){var routeNames=_ref.routeNames,routeParamList=_ref.routeParamList;var index=options.initialRouteName===undefined?0:routeNames.indexOf(options.initialRouteName);return{stale:false,type:'drawer',key:"drawer-"+shortid(),index:index,routeNames:routeNames,routeKeyHistory:[],routes:routeNames.map(function(name){return{name:name,key:name+"-"+shortid(),params:routeParamList[name]};}),isDrawerOpen:false};},getRehydratedState:function getRehydratedState(partialState,_ref2){var routeNames=_ref2.routeNames,routeParamList=_ref2.routeParamList;if(partialState.stale===false){return partialState;}var state=router.getRehydratedState(partialState,{routeNames:routeNames,routeParamList:routeParamList});return _objectSpread({},state,{type:'drawer',key:"drawer-"+shortid(),isDrawerOpen:typeof partialState.isDrawerOpen==='boolean'?partialState.isDrawerOpen:false});},getStateForRouteFocus:function getStateForRouteFocus(state,key){var index=state.routes.findIndex(function(r){return r.key===key;});var result=index===-1||index===state.index?state:router.getStateForRouteFocus(state,key);if(result.isDrawerOpen){return _objectSpread({},result,{isDrawerOpen:false});}return result;},getStateForAction:function getStateForAction(state,action,options){switch(action.type){case'OPEN_DRAWER':if(state.isDrawerOpen){return state;}return _objectSpread({},state,{isDrawerOpen:true});case'CLOSE_DRAWER':if(!state.isDrawerOpen){return state;}return _objectSpread({},state,{isDrawerOpen:false});case'TOGGLE_DRAWER':return _objectSpread({},state,{isDrawerOpen:!state.isDrawerOpen});case'NAVIGATE':return router.getStateForAction(_objectSpread({},state,{isDrawerOpen:false}),action,options);case'GO_BACK':if(state.isDrawerOpen){return _objectSpread({},state,{isDrawerOpen:false});}return router.getStateForAction(state,action,options);default:return router.getStateForAction(state,action,options);}},actionCreators:DrawerActions});}
//# sourceMappingURL=DrawerRouter.js.map
```


**How to reproduce**

I have created a project that supports iOS/android and web.

For the web, we use react-router, except when the PWA is embedded, this is how we detect it:

```js
import getPages from '@yeutech-lab/react-router-dom-utils/lib/getPages';
import getRoutesMap from '@yeutech-lab/react-router-dom-utils/lib/getRoutesMap';
import { createAppContainer, createStackNavigator } from '../navigation';
import createAppContainerNative from '../navigation/createAppContainer.js';
import createStackNavigatorNative from '../navigation/createStackNavigator.js';

export default function configureNavigation(routes, history) {
  let AppNavigator = null;
  let AppContainer = null;
  if (window && window.matchMedia('(display-mode: standalone)').matches) {
    AppNavigator = createStackNavigatorNative(routes);
    AppContainer = createAppContainerNative(AppNavigator, history);
  } else {
    AppNavigator = createStackNavigator(routes);
    AppContainer = createAppContainer(AppNavigator, history);
  }
  const pages = getPages(routes);
  const routesMap = getRoutesMap(routes);
  return { AppContainer, pages, routesMap };
}
```

This is how we create `Link.web.js`:

```js
import React from 'react';
import { Link as RRLink } from 'react-router-dom';
import RNLink from './Link.js'

/* eslint-disable */
export default function Link({
  to,
  children,
  ...rest
}) {
  if (window && window.matchMedia('(display-mode: standalone)').matches) {
    return (<RNLink to={to} {...rest}>{children}</RNLink>);
  }
  return (
    <RRLink
      title={children}
      to={to.path}
      {...rest}
    >
      {children}
    </RRLink>
  );
}
```

and `Link.js`

```js
import React, { useContext } from 'react';
import { Text } from 'react-native';
import { useNavigation } from '@react-navigation/native';
import { AppContext } from '@yeutech/app-context';

/* eslint-disable */
export default function Link({
  to, ...rest
}) {
  const navigation = useNavigation();
  const { routesMap } = useContext(AppContext);

  const screenName = routesMap.get(to.path).page;
  return (
    <Text
      style={{
        color: 'blue'
      }}
      onPress={() => navigation.navigate(screenName)}
      {...rest}
    />
  );
}
```

**Your Environment**

| software         | version |
| ---------------- | ------- |
| iOS or Android   | iOS and Android
| react-navigation | ^5.0.0-alpha.22
| react-native     | https://github.com/expo/react-native/archive/sdk-36.0.0.tar.gz
| expo-cli             | 3.11.3
| node             | 13.5.0
| npm      | 6.13.4

Hi,

Is it possible to create interactive transition in Stack Navigator with this great library? Back gesture is already automatically supported - e.g. if I create FromBottom transition (using `navigationOptions/cardStyleInterpolator -> transform`) and enable gesture then user can swipe to close the screen.
The solution I am looking for is similar to iOS-Native `UIPercentDrivenInteractiveTransition`. It allows to trigger navigation (`navigate('details')`) but also to send current progress. So I can create GestureListener on some object and during this gesture I can update transition progress. Then it could use `cardStyleInterpolator -> transform` as with back to calculate proper position etc.

Youtube app may be the good example - we can swipe video to small player bar and then swipe it to fullscreen. I was able to achieve it using iOS native (`UIPercentDrivenInteractiveTransition`) but unfortunately I could not do it on Native Android (Fragment Transitions does not allow interactive animation). 

Of course I could just create a gesture animation on "non-screen" object and just place it above current screen (as here: [https://codedaily.io/tutorials/10/Create-a-Youtube-Video-Page-with-Animated-Video-Drag-to-Corner-in-React-Native](https://codedaily.io/tutorials/10/Create-a-Youtube-Video-Page-with-Animated-Video-Drag-to-Corner-in-React-Native)) but I think it would be great to create it with navigation as normal screen transition.

Thanks in advance!

Please provide enough information so that others can review your pull request:

## Motivation

I find method `replace` is missing in types, but this can be used in js.

## Test plan

won't need to, I just past the types from v3.11.1

## Code formatting

Look around. Match the style of the rest of the codebase. Run `yarn format` before committing.

I run `yarn format` with error: `Command "format" not found`

see https://github.com/react-navigation/react-navigation/pull/6525

I have a tab navigator with 2 tabs
I want tab A has a title 'home', tab B has no header,
So here is my code
```
tabNavigator.navigationOptions = ({ navigation }: { navigation: { state: object } }) => {
  const { routeName } = navigation.state.routes[navigation.state.index]
  if (routeName  === 'home') {
    return {
      headerTitle: 'home',
    }
  } else {
    return {
      header: null,
    }
  }
}
```
Here is the result
![bug](https://user-images.githubusercontent.com/4329120/72034179-42e2cb80-32cf-11ea-9dde-cb885a924134.gif)

As you can see home is showed OK, but tab B has a white space in the header


If both of the tabs are header: null, it will be OK
```
tabNavigator.navigationOptions = ({ navigation }: { navigation: { state: object } }) => {
  return {
    header: null,
  }
}
```
![bb2](https://user-images.githubusercontent.com/4329120/72034418-e2a05980-32cf-11ea-9dbd-29d596b85782.gif)

### Your Environment

| software         | version
| ---------------- | -------
| react-navigation | 4.0.10
| react-native     | 0.61.5

### Current Behavior

Apologies first for posting a question, I have posted on stack overflow and searched everywhere for my question and i had no luck. I need to know whether it is able to achieve the behavior I want using react-navigation. 

I am trying to find a way to navigate to specific screen that is created multiple times from one statically defined screen. First multiple screens are created by following: 

```
this.props.navigation.push('tabScreen') // option 1

this.props.navigation.navigate({routeName: 'tabScreen', params: {}, key: uuid()}) // option 2
```
I am able to successfully create multiple same screen using stackNavigator, but the problem is that I need to be able to navigate or '**jump**(not just going back to previous screen)' to any of the screens created without having to **unmount the created screens.** 
so for example if I have Screen 1, Screen 2, Screen 3, Screen 4, Screen 5,
I should be able to jump , or navigate 

Screen 1 -> Screen 4
Screen 4 -> Screen 2 
Screen 2 -> Screen 5

and so on without having to unmount the screens when navigating. 

Stack navigator uses stack, so from what I understand it pops all the screens before navigating to a screen and therefore unmounts the screen. 

Is such behavior achievable in react navigation? If not where or how should I look into solving the problem? Thanks

### Expected Behavior

Able to navigate dynamically to screens created multiple times from one screen. 

### Your Environment

| software         | version
| ---------------- | -------
| react-navigation | 4.0.10
| react-native     | 0.61.5
| node             | 10.16.0
| npm or yarn      | npm

Drawer navigation was working fine in V3, once I upgrade to V4, there are two problems

- Drawer not closing when clicking the background (on web only)
- Drawer open by itself when swiping right or left depending on drawer position
### Current Behavior

I have a custom header (and tab bar) in my navigators. Every now and then, this happens;

![Simulator Screen Shot - iPhone 11 Pro Max - 2020-01-05 at 16 06 00](https://user-images.githubusercontent.com/941775/71779992-234d5980-2fd6-11ea-9066-c10970dc5379.png)

My header is taller than the default header. The issue doesn't happen when using the default header.

### Expected Behavior

![Simulator Screen Shot - iPhone 11 Pro Max - 2020-01-05 at 16 13 11](https://user-images.githubusercontent.com/941775/71779999-4d9f1700-2fd6-11ea-86a5-012ac8917259.png)

### How to reproduce

Here's my app: https://github.com/willa/app

### Your Environment

| software         | version
| ---------------- | -------
| react-navigation | ^4.0.10
| react-native     | 0.61.5
| node             | v13.4.0
| npm or yarn      | yarn 1.21.1
