**What happened (please include outputs or screenshots)**:
Watching `list_event_for_all_namespaces` does not return any events when a Pod is deleted.

I have two scripts: one prints all events with `list_event_for_all_namespaces`, and the other creates and then deletes a Pod.  The watcher prints events while the Pod is starting (pulling container, pulled container, starting container, etc.).  But I don't get any event when the pod is deleted.

**What you expected to happen**:

In the apiserver audit log there are events with type='DELETED' - I expect to see those events returned by `list_event_for_all_namespaces`.

**How to reproduce it (as minimally and precisely as possible)**:
test.yaml:
```
import yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-testing
spec:
  restartPolicy: Never
  containers:
  - image: busybox
    name: pod-testing
    command: ["sleep", "10"]
```
watch.py:
```
from kubernetes import client, config, watch

config.load_kube_config()
v1 = client.CoreV1Api()
w = watch.Watch()
for event in w.stream(v1.list_event_for_all_namespaces):
	print(event)
```

Start watching, `python watch.py`.  In a separate terminal, do `kubectl apply -f test.yaml`, then after the Pod is started do `kubectl delete -f test.yaml`.

**Anything else we need to know?**:

**Environment**:
- Kubernetes version (`kubectl version`): 1.16
- OS (e.g., MacOS 10.13.6): Centos 7.7.1908
- Python version (`python --version`): 3.6.8
- Python client version (`pip list | grep kubernetes`): 10.0.1

```python
    def execCmdInPod(self, pod_name, cmd, timeout):
        name = pod_name
        namespace = 'default'
        try:
            resp = stream(self.m_api_instance.connect_get_namespaced_pod_exec, name, namespace, command=cmd,
                          stderr=True, stdin=False,
                          stdout=True, tty=False,
                          _preload_content=True,
                          _request_timeout=timeout)
        except Exception, e:
            if self.__validLogger():
                self.m_logger.error('Exec cmd "%s" in pod "%s" failed, the detail error msg is:"%s"', cmd,
                                    traceback.format_exc())
            return False
        return True  # execCmdInPod()

cmd = ["bash", "-c", "python start.py > start.log"]
execCmdInPod("test",  cmd, timeout=180)
```
I use below code to exec a script in the pod/container(only one container in the pod), but I use the _request_timeout=180 to wait the scipt exec finished.
The problem :
 If I use no timeout setting, then the script would not be executed in the pod/container.
I just wan't to know how to exec a script from the container in sync mode.
 git clone --recursive https://github.com/kubernetes-client/python.git
  git branch -a
  git branch
  965  git checkout release-11.0

pip install kubernetes
.........
Installed /opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes-11.0.0b2-py3.6.egg
Processing dependencies for kubernetes==11.0.0b2
Searching for urllib3==1.25.7
Best match: urllib3 1.25.7
Adding urllib3 1.25.7 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for requests-oauthlib==1.3.0
Best match: requests-oauthlib 1.3.0
Adding requests-oauthlib 1.3.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for requests==2.22.0
Best match: requests 2.22.0
Adding requests 2.22.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for websocket-client==0.57.0
Best match: websocket-client 0.57.0
Adding websocket-client 0.57.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for google-auth==1.10.1
Best match: google-auth 1.10.1
Adding google-auth 1.10.1 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for PyYAML==5.3
Best match: PyYAML 5.3
Adding PyYAML 5.3 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for setuptools==45.0.0
Best match: setuptools 45.0.0
Adding setuptools 45.0.0 to easy-install.pth file
Installing easy_install script to /opt/deamon/.py3env/bin
Installing easy_install-3.8 script to /opt/deamon/.py3env/bin

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for python-dateutil==2.8.1
Best match: python-dateutil 2.8.1
Adding python-dateutil 2.8.1 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for six==1.14.0
Best match: six 1.14.0
Adding six 1.14.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for certifi==2019.11.28
Best match: certifi 2019.11.28
Adding certifi 2019.11.28 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for oauthlib==3.1.0
Best match: oauthlib 3.1.0
Adding oauthlib 3.1.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for chardet==3.0.4
Best match: chardet 3.0.4
Adding chardet 3.0.4 to easy-install.pth file
Installing chardetect script to /opt/deamon/.py3env/bin

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for idna==2.8
Best match: idna 2.8
Adding idna 2.8 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for rsa==4.0
Best match: rsa 4.0
Adding rsa 4.0 to easy-install.pth file
Installing pyrsa-decrypt script to /opt/deamon/.py3env/bin
Installing pyrsa-encrypt script to /opt/deamon/.py3env/bin
Installing pyrsa-keygen script to /opt/deamon/.py3env/bin
Installing pyrsa-priv2pub script to /opt/deamon/.py3env/bin
Installing pyrsa-sign script to /opt/deamon/.py3env/bin
Installing pyrsa-verify script to /opt/deamon/.py3env/bin

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for pyasn1-modules==0.2.8
Best match: pyasn1-modules 0.2.8
Adding pyasn1-modules 0.2.8 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for cachetools==4.0.0
Best match: cachetools 4.0.0
Adding cachetools 4.0.0 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Searching for pyasn1==0.4.8
Best match: pyasn1 0.4.8
Adding pyasn1 0.4.8 to easy-install.pth file

Using /opt/deamon/.py3env/lib/python3.6/site-packages
Finished processing dependencies for kubernetes==11.0.0b2
(.py3env) [root@wukui1 python]# echo $?
0



(.py3env) [root@wukui1 deamon]# python pod.py
Traceback (most recent call last):
  File "pod.py", line 4, in <module>
    config.load_kube_config()
  File "/opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 645, in load_kube_config
    persist_config=persist_config)
  File "/opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 613, in _get_kube_config_loader_for_yaml_file
    **kwargs)
  File "/opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 153, in __init__
    self.set_active_context(active_context)
  File "/opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 187, in set_active_context
    self._current_context['context']['cluster'])['cluster']
  File "/opt/deamon/.py3env/lib/python3.6/site-packages/kubernetes/config/kube_config.py", line 536, in get_with_name
    'Expected object with name %s in %s list' % (name, self.name))
kubernetes.config.config_exception.ConfigException: Invalid kube-config file. Expected object with name kubernetes in /root/.kube/config/clusters list
I use the `delete_namespaced_pod` api to delete the pod, but always stuck in a long time, mabye in 1 minute.
I just want to delete the pod with `-f` flag. How can I do it?
**What happened (please include outputs or screenshots)**:

```
âžœ  k8s-exec /usr/local/Cellar/python/3.7.4_1/bin/python3 ./kubectl-exec.py                       
/usr/local/lib/python3.7/site-packages/urllib3/connectionpool.py:847: InsecureRequestWarning: Unverified HTTPS request is being made. Adding certificate verification is strongly advised. See: https://urllib3.readthedocs.io/en/latest/advanced-usage.html#ssl-warnings
  InsecureRequestWarning)
Traceback (most recent call last):
  File "./kubectl-exec.py", line 9, in <module>
    config.load_kube_config()
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 667, in load_kube_config
    loader.load_and_set(config)
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 474, in load_and_set
    self._load_authentication()
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 205, in _load_authentication
    if self._load_auth_provider_token():
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 224, in _load_auth_provider_token
    return self._load_oid_token(provider)
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 325, in _load_oid_token
    self._refresh_oidc(provider)
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 375, in _refresh_oidc
    'client_secret': provider['config']['client-secret']
  File "/usr/local/lib/python3.7/site-packages/kubernetes/config/kube_config.py", line 512, in __getitem__
    % (key, self.name))
kubernetes.config.config_exception.ConfigException: Invalid kube-config file. Expected key client-secret in ...
```

**What you expected to happen**:

No error

**How to reproduce it (as minimally and precisely as possible)**:

1.  Setup an OIDC IdP with a public endpoint
2.  Integrate with your API server
3.  Generate a kube config using the configuration with NO `client-secret`
4.  Use the API

**Anything else we need to know?**:

`client-secret` is optional and should not be considered to be required.  As a workaround adding en empty `client-secret` works

**Environment**:
- Kubernetes version (`kubectl version`):

Client Version: version.Info{Major:"1", Minor:"17", GitVersion:"v1.17.0", GitCommit:"70132b0f130acc0bed193d9ba59dd186f0e634cf", GitTreeState:"clean", BuildDate:"2019-12-13T11:52:32Z", GoVersion:"go1.13.4", Compiler:"gc", Platform:"darwin/amd64"}

- OS (e.g., MacOS 10.13.6):

MacOS Catalina

- Python version (`python --version`)

3.7.4

- Python client version (`pip list | grep kubernetes`)
11.0.0b2
Python 2 has reached [End of Life](https://www.python.org/doc/sunset-python-2/) as of January 1, 2020 and we are still supporting it. Releasing future versions of the client and maintaining released versions with Python 2 support might lead to problems for downstream users.

My suggestion is to stop releasing the client with Python 2 support and removing Python 2.7 from CI/CD.

Also, it would be helpful if we provide a warning message in the README against using Python 2 versions of already released client versions.

Kubernetes Python client v12.0.0 would track Kubernetes v1.16

### Tasks

> To be updated
- [x] Update README
- [x] Update CHANGELOG
**What happened (please include outputs or screenshots)**:
The following api calls against CoreV1Api
list_namespaced_secret 
list_namespaced_config_map 

fail straight away with w.stream() if the resource version is added 

`
    raise ResponseNotChunked(
urllib3.exceptions.ResponseNotChunked: Response is not chunked. Header 'transfer-encoding: chunked' is missing.
`
**What you expected to happen**:
Not fail straight away the below code works for list_namespaced_event etc

**How to reproduce it (as minimally and precisely as possible)**:
`
        w = watch.Watch()

        for event in w.stream(self.v1api.list_namespaced_config_map, namespace, resource_version=resource_version):
`


**Anything else we need to know?**:
resource version is definitely set to a string 
- not adding the resource version kwarg makes the code work fine


**Environment**:
- Kubernetes version (`kubectl version`): Major:"1", Minor:"14", GitVersion:"v1.14.7",
- OS (e.g., MacOS 10.13.6): 10.15.1
- Python version (`python --version`): Python 3.8.1 
- Python client version (`pip list | grep kubernetes`): 11.0.0b2

What we are doing?

we deployed our Django application on Kubernetes along with celery and rabbitmq and celery have some task to create some pods details on Kubernetes using Kubernetes python API but when I am calling the API from application then it is working properly but when it happened with celery task then it giving us following issue and we give all permission to the app pod and celery but even getting the issue...

> kubernetes.client.rest.ApiException: (403)
> Reason: Forbidden
> HTTP response headers: HTTPHeaderDict({'Audit-Id': 'd7995c4f-8d44-4f89-bea9-0cb6a0391704', 'Content-Type': 'application/json', 'Date': 'Sun, 29 Dec 2019 12:38:51 GMT', 'Content-Length': '282'})
> HTTP response body: {"kind":"Status","apiVersion":"v1","metadata":{},"status":"Failure","message":"deployments.extensions \"nfs-provisioner-pod-demo-f5125cca9\" Forbidden","reason":"NotFound","details":{"name":"nfs-provisioner-pod-demo-f5125cca9","group":"extensions","kind":"deployments"},"code":403}

Kindly plz help...