 -(NSArray *)childrenAtIndexes:(NSIndexSet *)indexes {

    NSMutableArray *mutableChildren = [NSMutableArray array]; 
    xmlNodePtr cursor = self.xmlNode->children;
    NSUInteger idx = 0;
    while (cursor) {
        if ([indexes containsIndex:idx] && cursor->type == XML_ELEMENT_NODE) {
            [mutableChildren addObject:[self.document elementWithNode:cursor]];
        }

        cursor = cursor->next;
        idx++;
    }
    return [NSArray arrayWithArray:mutableChildren];
}

According to the above code I get child node must be element nodes, but also I think text node's child nodes.
Namelyï¼š
`if ([indexes containsIndex:idx] && (cursor->type == XML_ELEMENT_NODE || cursor->type == XML_TEXT_NODE)) {
            [mutableChildren addObject:[self.document elementWithNode:cursor]];
        }`
I would like to have a method similar to stringValue which doesn't recursively prints everything under a certain XPathQuery. Here is the full code + HTML and the produced output by `Ono` plus which output I'd like to have.

My XPath Query: `XPathQuery: //div[@class='thread']`

`Ono` code:

``` objectivec
document = [ONOXMLDocument HTMLDocumentWithData:file error:&error];

[document enumerateElementsWithXPath:xPath usingBlock:^(ONOXMLElement *element, NSUInteger idx, BOOL *stop) {
    NSLog(@"%@", [element stringValue]);
}];
```

Which prints:

```
FirstName LastName, SecondNameFirst SecondNameLast


                FirstName LastName
                Wednesday, December 24, 2014 at 6:57pm UTC+01 


        This is a dummy text


                SecondNameFirst SecondNameLast
                Wednesday, December 24, 2014 at 6:56pm UTC+01


        And a 2nd one just to show off


Another, User


                Another
                Monday, April 27, 2015 at 10:54pm UTC+02


        Text: 2.1


                User
                Thursday, February 26, 2015 at 5:41pm UTC+01


        Text: 2.2


                Another
                Thursday, February 26, 2015 at 4:25pm UTC+01


        Text: 2.3
```

I would prefer to have an output similar to hpple which is:

```
FirstName LastName, SecondNameFirst SecondNameLast
Another, User
```

hpple code:

``` objectivec
tutorialsParser = [TFHpple hppleWithHTMLData:file];
tutorialsNodes = [tutorialsParser searchWithXPathQuery:xPath];

for (TFHppleElement *element in tutorialsNodes) {
    NSLog(@"%@", [[element firstChild] content].trim);
}
```

And I don't want to use hpple since it is too slow.

Here is my input HTML file:

``` xml
<!DOCTYPE html>
<html>
<head><title/></head>
<body>
    <div class="thread">FirstName LastName, SecondNameFirst SecondNameLast
        <div class="message">
            <div class="message_header">
                <span class="user">FirstName LastName</span>
                <span class="meta">Wednesday, December 24, 2014 at 6:57pm UTC+01 </span>
            </div>
        </div>
        <p>This is a dummy text</p>
        <div class="message">
            <div class="message_header">
                <span class="user">SecondNameFirst SecondNameLast</span>
                <span class="meta">Wednesday, December 24, 2014 at 6:56pm UTC+01</span>
            </div>
        </div>
        <p>And a 2nd one just to show off</p>
    </div>
    <div class="thread">Another, User
        <div class="message">
            <div class="message_header">
                <span class="user">Another</span>
                <span class="meta">Monday, April 27, 2015 at 10:54pm UTC+02</span>
            </div>
        </div>
        <p>Text: 2.1</p>
        <div class="message">
            <div class="message_header">
                <span class="user">User</span>
                <span class="meta">Thursday, February 26, 2015 at 5:41pm UTC+01</span>
            </div>
        </div>
        <p>Text: 2.2</p>
        <div class="message">
            <div class="message_header">
                <span class="user">Another</span>
                <span class="meta">Thursday, February 26, 2015 at 4:25pm UTC+01</span>
            </div>
        </div>
        <p>Text: 2.3</p>
    </div>
</body>
</html>
```

For the following XML document(SOAP service), XPath can't find the elements.

``` xml
<?xml version="1.0" encoding="UTF-8"?>
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <soapenv:Body>
        <ServiceResponse xmlns="http://sub.domain.com">
            <ServiceReturn>
                <a>US</a>
                <b>
                    <b>
                        <e>Herrod</e>
                        <f>molestie@necmetus.edu</f>
                        <g>Et Commodo LLC</g>
                        <i>07/14/2014</i>
                    </b>
                    <b>
                        <e>Armand</e>
                        <f>est@vitae.org</f>
                        <g>Vel Convallis In Consulting</g>
                        <i>04/18/2015</i>
                    </b>
                    <b>
                        <e>Bernard</e>
                        <f>nulla@blandit.net</f>
                        <g>Cursus Nunc Mauris PC</g>
                        <i>11/12/2015</i>
                    </b>
                    <b>
                        <e>Dante</e>
                        <f>lorem@acmi.org</f>
                        <g>Sit Amet Ltd</g>
                        <i>01/19/2016</i>
                    </b>
                </b>
                <c>0</c>
                <k>12345678</k>
            </ServiceReturn>
        </ServiceResponse>
    </soapenv:Body>
</soapenv:Envelope>
```

Here are the result of some functions

``` swift
document.rootElement.firstChildWithTag("Body", inNamespace: "soapenv") //some
document.rootElement.firstChildWithTag("//soapenv:Body/ServiceResponse") //nil
document.rootElement.firstChildWithTag("//Body//b", inNamespace: "soapenv") //nil
document.firstChildWithXPath("//ServiceResponse") //nil
document.firstChildWithXPath("//ServiceReturn") //nil
document.firstChildWithXPath("//*/ServiceReturn/b/b") //nil
document.firstChildWithXPath("//ServiceReturn/b/b") //nil
document.firstChildWithXPath("//b/b") //nil
```

Another example

``` xml
<?xml version="1.0" encoding="UTF-8"?>
<S:Envelope xmlns:S="http://schemas.xmlsoap.org/soap/envelope/">
   <S:Body>
      <ns2:OperationHistoryData xmlns:ns2="http://www.domain.org/operation" xmlns:ns3="http://www.domain.org/info" xmlns:ns5="http://www.domain.org/data">
         <ns2:historyRecord>
            <ns2:DestinationAddress>
               <ns2:Index>190000</ns2:Index>
               <ns2:Description>Info 1</ns2:Description>
            </ns2:DestinationAddress>
         </ns2:historyRecord>
      </ns2:OperationHistoryData>
   </S:Body>
</S:Envelope>
```

Whenever there is nested namespaces, ono can't parse it. I don't know maybe it is limitation of libxml. Only workaround I found is to strip name spaces and other attributes.

I am not good at Objective C and github. I hope test code is right. As a workaround `.listEvent` works
