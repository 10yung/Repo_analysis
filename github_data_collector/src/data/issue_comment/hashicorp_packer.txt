Deletes the whole adapter convention and allows Ansible to connect directly to the remote host. This is enabled by the recent changes sending generatedData, containing all the communicator connection info. 

This approach will probably break Ansible + Docker; we'll need to figure out how to enable docker builds in the future. I know Ansible has custom modules for communicating with Docker; maybe we need those. 

We'll need to do a lot of testing and a lot of work with community users of this provisioner to make sure everything works before we release it, or wait until v1.6.0.

Closes #8617 
May Close #7667
May Close #6877
May Close #6379
May Close #4827
Our packer builds use a non-default VPC and SubnetFilter to select an appropriate subnet. This worked in 1.4.x.

Commits https://github.com/hashicorp/packer/commit/f9f4726effe22a1c561e6677f57711d82119b6c7 and https://github.com/hashicorp/packer/commit/074be9942d6b96e247efcd9734ee6310ae795ac3 updated pre-validation to require a SubnetId when a non-default VPC is used. This, unintentionally I believe, broke our use case.

In this PR I've updated the validation code, the builder's use of it and the relevant test. I've also tested against our builder and it works.
This PR adds Device, MountPath, and SourceAMIName to the amazon-chroot builder's generated data. In order to avoid overriding the `generated_data`, I thought about creating a new Struct responsible for keeping this data and updating the statebag.

<details>
<summary>Template used for testing</summary>

```
{
  "variables": {
    "region": "us-east-1"
  },
  "builders": [
    {
      "type": "amazon-chroot",
      "region": "{{user `region`}}",
      "source_ami_filter": {
        "filters": {
          "virtualization-type": "hvm",
          "name": "amzn-ami-hvm-*",
          "root-device-type": "ebs"
        },
        "owners": [
          "137112412989"
        ],
        "most_recent": true
      },
      "ena_support": true,
      "ami_name": "amazon-chroot-test-{{timestamp}}",
      "pre_mount_commands": [
        "echo Testing 123..."
      ]
    }
  ],
  "provisioners": [
    {
      "type": "shell",
      "inline": [
        "echo Test > /tmp/test.txt"
      ]
    },
    {
      "type": "shell-local",
      "environment_vars": [
        "SOURCE_AMI_NAME={{ build `SourceAMIName`}}",
        "DEVICE_PATH={{ build `Device`}}",
        "MOUNT_PATH={{ build `MountPath`}}"
      ],
      "inline": [
        "echo $SOURCE_AMI_NAME",
        "echo $DEVICE_PATH",
        "echo $MOUNT_PATH"
      ]
    }
  ],
  "post-processors": [
    {
      "type": "manifest",
      "output": "manifest.json",
      "strip_path": true,
      "custom_data": {
        "source_ami_name": "{{ build `SourceAMIName` }}",
        "device_path": "{{ build `Device` }}",
        "mount_path": "{{ build `MountPath` }}"
      }
    }
  ]
}
```

</details> 

<details>
<summary>Output provisioner</summary>

```
==> amazon-chroot: Running local shell script: /tmp/packer-shell346933039
2020/01/17 16:07:38 packer-provisioner-shell-local plugin: [INFO] (shell-local): starting local command: /bin/sh -c DEVICE_PATH='/dev/xvdf' MOUNT_PATH='/mnt/packer-amazon-chroot-volumes/xvdf' PACKER_BUILDER_TYPE='amazon-chroot' PACKER_BUILD_NAME='amazon-chroot' SOURCE_AMI_NAME='amzn-ami-hvm-2018.03.0.20191219.0-x86_64-gp2'  /tmp/packer-shell346933039
2020/01/17 16:07:38 packer-provisioner-shell-local plugin: [INFO] (shell-local communicator): Executing local shell command [/bin/sh -c DEVICE_PATH='/dev/xvdf' MOUNT_PATH='/mnt/packer-amazon-chroot-volumes/xvdf' PACKER_BUILDER_TYPE='amazon-chroot' PACKER_BUILD_NAME='amazon-chroot' SOURCE_AMI_NAME='amzn-ami-hvm-2018.03.0.20191219.0-x86_64-gp2'  /tmp/packer-shell346933039]
```

</details>

<details>
<summary>Output post-processor</summary>

```
{
      "name": "amazon-chroot",
      "builder_type": "amazon-chroot",
      "build_time": 1579277299,
      "files": null,
      "artifact_id": "us-east-1:ami-0794cd69a0a8f92a3",
      "packer_run_uuid": "6f43296d-e202-cf11-965b-30a2473389ca",
      "custom_data": {
        "device_path": "/dev/xvdf",
        "mount_path": "/mnt/packer-amazon-chroot-volumes/xvdf",
        "source_ami_name": "amzn-ami-hvm-2018.03.0.20191219.0-x86_64-gp2"
      }
    }
```

</details> 

Closes #6746 
#### Overview of the Issue

I have problems running an azure-arm packer build with PowerShell provision scripts. It works with Packer 1.4.0, fails with 1.5.1 and the nightly build 1.5.2-dev.

#### Reproduction Steps

Steps to reproduce this issue
Run a packer build with azure-arm builder, the first provision script runs in elevated mode. I haven't tried to run a normal provision script yet.

### Packer version

1.5.1 also tried 1.5.2 nightly from GitHub releases

### Simplified Packer Buildfile

<details>
  <summary>Click to expand!</summary>

```json
{
    "variables": {
        "docker_pkg_version": "19.03.5",
        "compose_pkg_version": "1.25.1",
        "cygwin_pkg_list": "openssh,vim,git,statgrab,jq,make",
        "fips_enabled": "0",
        "client_id": "secret",
        "client_secret": "secret",
        "tenant_id": "secret",
        "subscription_id": "secret",
        "rg": "",
        "name": "",
        "offer": "",
        "sku": "",
        "location": "West US",
        "isolation": "process",
        "packer_pkg_version": "",
        "qemu_img_pkg_version": "",
        "inspec_pkg_version": "",
        "inspec_profile": "test/jenkins-windows",
        "vm_size": "Standard_D4s_v3"
    },
    "builders": [
        {
            "type": "azure-arm",
            "client_id": "{{ user `client_id` }}",
            "client_secret": "{{ user `client_secret` }}",
            "tenant_id": "{{ user `tenant_id` }}",
            "subscription_id": "{{ user `subscription_id` }}",
            "managed_image_name": "{{ isotime \"2006-01-02-1504\" }}-{{ user `name` }}",
            "managed_image_resource_group_name": "{{ user `rg` }}",
            "managed_image_storage_account_type": "Standard_LRS",
            "os_type": "Windows",
            "image_publisher": "MicrosoftWindowsServer",
            "image_offer": "{{ user `offer` }}",
            "image_sku": "{{ user `sku` }}",
            "image_version": "{{ user `version` }}",
            "communicator": "winrm",
            "winrm_use_ssl": "true",
            "winrm_insecure": "true",
            "winrm_timeout": "30m",
            "winrm_username": "packer",
            "azure_tags": {
                "role": "jenkins-agent",
                "agent_type": "{{ user `name` }}",
                "project": "TAR-CICD-INFR"
            },
            "location": "{{ user `location` }}",
            "vm_size": "{{ user `vm_size` }}"
        }
    ],
    "provisioners": [
        {
            "elevated_user": "packer",
            "elevated_password": "{{.WinRMPassword}}",
            "type": "powershell",
            "scripts": [
                "win/scripts/ver.ps1",
                "win/scripts/install-cumulative-update.ps1"
            ]
        },
        {
            "type": "windows-restart",
            "restart_timeout": "45m"
        },
        {
            "type": "powershell",
            "scripts": [
                "win/scripts/ver.ps1",
                "win/scripts/features.ps1",
                "win/scripts/tcp-settings.ps1",
                "win/scripts/disable-defender.ps1",
                "win/scripts/disable-win-updates.ps1"
            ],
            "environment_vars": [
                "CHECK_WINDOWS_VERSION=1",
                "DOCKER_PKG_VERSION={{ user `docker_pkg_version` }}",
                "ISOLATION={{ user `isolation` }}"
            ]
        },
        {
            "type": "windows-restart"
        },
        {
            "type": "powershell",
            "scripts": [
                "win/scripts/fips.ps1",
                "win/scripts/setup.ps1"
            ],
            "environment_vars": [
                "DOCKER_PKG_VERSION={{ user `docker_pkg_version` }}",
                "COMPOSE_PKG_VERSION={{ user `compose_pkg_version` }}",
                "CYGWIN_PKG_LIST={{ user `cygwin_pkg_list`}}",
                "FIPS_ENABLED={{ user `fips_enabled` }}"
            ],
            "only": [
                "amazon-ebs"
            ]
        },
        {
            "type": "powershell",
            "scripts": [
                "win/scripts/install-docker.ps1",
                "win/scripts/install-compose.ps1",
                "win/scripts/java.ps1",
                "win/scripts/git.ps1",
                "win/scripts/make.ps1",
                "win/scripts/fips.ps1",
                "win/scripts/disable-ssh.ps1"
            ],
            "environment_vars": [
                "DOCKER_PKG_VERSION={{ user `docker_pkg_version` }}",
                "COMPOSE_PKG_VERSION={{ user `compose_pkg_version` }}",
                "FIPS_ENABLED={{ user `fips_enabled` }}"
            ],
            "only": [
                "azure-arm"
            ]
        },
        {
            "type": "inspec",
            "profile": "{{ user `inspec_profile` }}",
            "extra_arguments": [
                "--no-distinct-exit"
            ],
            "inspec_env_vars": [
                "FIPS_ENABLED={{ user `fips_enabled` }}",
                "DOCKER_PKG_VERSION={{ user `docker_pkg_version` }}",
                "COMPOSE_PKG_VERSION={{ user `compose_pkg_version` }}",
                "PACKER_PKG_VERSION={{ user `packer_pkg_version` }}",
                "QEMU_IMG_PKG_VERSION={{ user `qemu_img_pkg_version` }}",
                "INSPEC_PKG_VERSION={{ user `inspec_pkg_version` }}"
            ]
        },
        {
            "type": "powershell",
            "scripts": [
                "win/scripts/sysprep-azure.ps1"
            ]
        }
    ],
    "post-processors": [
        {
            "type": "manifest"
        }
    ]
}
```
</details>

My first provision script `win/scripts/ver.ps1` looks like this:

<details>
  <summary>Click to expand!</summary>

```powershell
$ProgressPreference = 'SilentlyContinue'
$ErrorActionPreference = 'Stop'

# fetch the current version number from host
$current=(Get-ItemProperty "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion")
$currUBR=$current.UBR
$prefix="$($current.CurrentMajorVersionNumber).$($current.CurrentMinorVersionNumber).$($current.CurrentBuildNumber)."
Write-Output "The host OS is $($current.ProductName) $($current.InstallationType) $($current.ReleaseId), build $prefix$currUBR."

if ($env:CHECK_WINDOWS_VERSION) {
    Write-Output "Checking if host OS is up to date..."
    # fetch the tags from MCR, filter them with host version prefix, sort the update revisions and pick the highest
    $json=$(Invoke-WebRequest -UseBasicParsing https://mcr.microsoft.com/v2/windows/servercore/tags/list | ConvertFrom-Json)
    $hubUBR=($json.tags | Where-Object -FilterScript { $_.StartsWith($prefix) -and $_ -Match "^\d+\.\d+\.\d+\.\d+$" } |%{[System.Version]$_}|sort)[-1].Revision

    Write-Output "The host OS version is $prefix$currUBR, latest Windows Docker base image OS version is $prefix$hubUBR."

    if ($currUBR -lt $hubUBR) {
        Write-Error "Your host has update revision $currUBR, but should be updated to $hubUBR!"
    } else {
        Write-Output "The host is up to date."
    }
}
```
</details>

### Operating system and Environment details

packer running from Ubuntu 18.04 amd64

### Log Fragments and crash.log files

```
09:59:40  ==> azure-arm:  -> IP Address          : '104.45.228.5'
09:59:40  2020/01/17 08:59:30 packer_linux_amd64 plugin: Error asking for input: no available tty
09:59:40  2020/01/17 08:59:30 packer_linux_amd64 plugin: Waiting for WinRM, up to timeout: 30m0s
09:59:40  ==> azure-arm: Waiting for WinRM to become available...
09:59:40  2020/01/17 08:59:30 packer_linux_amd64 plugin: [INFO] Attempting WinRM connection...
09:59:40  2020/01/17 08:59:30 packer_linux_amd64 plugin: [DEBUG] connecting to remote shell using WinRM
09:59:40  2020/01/17 08:59:37 packer_linux_amd64 plugin: Checking that WinRM is connected with: 'powershell.exe -EncodedCommand aQBmACAAKABUAGUAcwB0AC0AUABhAHQAaAAgAHYAYQByAGkAYQBiAGwAZQA6AGcAbABvAGIAYQBsADoAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAKQB7ACQAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAPQAnAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUAJwB9ADsAIABlAGMAaABvACAAIgBXAGkAbgBSAE0AIABjAG8AbgBuAGUAYwB0AGUAZAAuACIA'
09:59:40  2020/01/17 08:59:38 packer_linux_amd64 plugin: [INFO] starting remote command: powershell.exe -EncodedCommand aQBmACAAKABUAGUAcwB0AC0AUABhAHQAaAAgAHYAYQByAGkAYQBiAGwAZQA6AGcAbABvAGIAYQBsADoAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAKQB7ACQAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAPQAnAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUAJwB9ADsAIABlAGMAaABvACAAIgBXAGkAbgBSAE0AIABjAG8AbgBuAGUAYwB0AGUAZAAuACIA
09:59:46  ==> azure-arm: #< CLIXML
09:59:46      azure-arm: WinRM connected.
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: [INFO] command 'powershell.exe -EncodedCommand aQBmACAAKABUAGUAcwB0AC0AUABhAHQAaAAgAHYAYQByAGkAYQBiAGwAZQA6AGcAbABvAGIAYQBsADoAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAKQB7ACQAUAByAG8AZwByAGUAcwBzAFAAcgBlAGYAZQByAGUAbgBjAGUAPQAnAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUAJwB9ADsAIABlAGMAaABvACAAIgBXAGkAbgBSAE0AIABjAG8AbgBuAGUAYwB0AGUAZAAuACIA' exited with code: 0
09:59:46  ==> azure-arm: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj><Obj S="progress" RefId="1"><TNRef RefId="0" /><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Connected to machine
09:59:46  ==> azure-arm: Connected to WinRM!
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Error asking for input: no available tty
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Running the provision hook
09:59:46  2020/01/17 08:59:46 [INFO] (telemetry) Starting provisioner powershell
09:59:46  2020/01/17 08:59:46 Error asking for input: no available tty
09:59:46  ==> azure-arm: Provisioning with Powershell...
09:59:46  ==> azure-arm: Provisioning with powershell script: win/scripts/ver.ps1
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Opening win/scripts/ver.ps1 for reading
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Uploading env vars to c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: [INFO] 74 bytes written for 'uploadData'
09:59:46  2020/01/17 08:59:46 [INFO] 74 bytes written for 'uploadData'
09:59:46  2020/01/17 08:59:46 packer_linux_amd64 plugin: Uploading file to 'c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1'
09:59:48  2020/01/17 08:59:48 packer_linux_amd64 plugin: #< CLIXML
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>#< CLIXML
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: Building elevated command wrapper for: powershell -executionpolicy bypass "& { if (Test-Path variable:global:ProgressPreference){set-variable -name variable:global:ProgressPreference -value 'SilentlyContinue'};. c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1; &'c:/Windows/Temp/script-5e21763d-9b3a-2948-6d3f-6f3d344d868b.ps1'; exit $LastExitCode }"
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: Command [powershell -executionpolicy bypass "& { if (Test-Path variable:global:ProgressPreference){set-variable -name variable:global:ProgressPreference -value 'SilentlyContinue'};. c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1; &'c:/Windows/Temp/script-5e21763d-9b3a-2948-6d3f-6f3d344d868b.ps1'; exit $LastExitCode }" > %SYSTEMROOT%/Temp/packer-5e217785-fb7f-a442-88d8-86520c890a36.out 2>&1] converted to [powershell -executionpolicy bypass &#34;&amp; { if (Test-Path variable:global:ProgressPreference){set-variable -name variable:global:ProgressPreference -value &#39;SilentlyContinue&#39;};. c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1; &amp;&#39;c:/Windows/Temp/script-5e21763d-9b3a-2948-6d3f-6f3d344d868b.ps1&#39;; exit $LastExitCode }&#34; &gt; %SYSTEMROOT%/Temp/packer-5e217785-fb7f-a442-88d8-86520c890a36.out 2&gt;&amp;1] for use in XML string
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: Uploading elevated shell wrapper for command [powershell -executionpolicy bypass "& { if (Test-Path variable:global:ProgressPreference){set-variable -name variable:global:ProgressPreference -value 'SilentlyContinue'};. c:/Windows/Temp/packer-ps-env-vars-5e21763d-cc44-cea6-0826-e7a6b3e94bd6.ps1; &'c:/Windows/Temp/script-5e21763d-9b3a-2948-6d3f-6f3d344d868b.ps1'; exit $LastExitCode }" > %SYSTEMROOT%/Temp/packer-5e217785-fb7f-a442-88d8-86520c890a36.out 2>&1] to [C:/Windows/Temp/packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1]
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: [INFO] 3198 bytes written for 'uploadData'
09:59:49  2020/01/17 08:59:49 [INFO] 3198 bytes written for 'uploadData'
09:59:49  2020/01/17 08:59:49 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>Uploading file to 'C:/Windows/Temp/packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1'
09:59:56  2020/01/17 08:59:55 packer_linux_amd64 plugin: #< CLIXML
09:59:56  2020/01/17 08:59:56 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>#< CLIXML
09:59:56  2020/01/17 08:59:56 packer_linux_amd64 plugin: [INFO] 1281 bytes written for 'uploadData'
09:59:56  2020/01/17 08:59:56 [INFO] 1281 bytes written for 'uploadData'
09:59:56  2020/01/17 08:59:56 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>Uploading file to 'c:/Windows/Temp/script-5e21763d-9b3a-2948-6d3f-6f3d344d868b.ps1'
09:59:59  2020/01/17 08:59:59 packer_linux_amd64 plugin: #< CLIXML
10:00:00  2020/01/17 09:00:00 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>#< CLIXML
10:00:00  2020/01/17 09:00:00 packer_linux_amd64 plugin: <Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04"><Obj S="progress" RefId="0"><TN RefId="0"><T>System.Management.Automation.PSCustomObject</T><T>System.Object</T></TN><MS><I64 N="SourceId">1</I64><PR N="Record"><AV>Preparing modules for first use.</AV><AI>0</AI><Nil /><PI>-1</PI><PC>-1</PC><T>Completed</T><SR>-1</SR><SD> </SD></PR></MS></Obj></Objs>[INFO] starting remote command: powershell -executionpolicy bypass -file "C:/Windows/Temp/packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1"
10:00:03  ==> azure-arm: (39,4):Task:
10:00:03  ==> azure-arm: At C:\Windows\Temp\packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1:60 char:1
10:00:03  ==> azure-arm: + $f.RegisterTaskDefinition($name, $t, 6, "packer", $password, $logon_t ...
10:00:03  ==> azure-arm: + ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
10:00:03  ==> azure-arm:     + CategoryInfo          : OperationStopped: (:) [], COMException
10:00:03  ==> azure-arm:     + FullyQualifiedErrorId : System.Runtime.InteropServices.COMException
10:00:03  ==> azure-arm:
10:00:03  ==> azure-arm: The system cannot find the file specified. (Exception from HRESULT: 0x80070002)
10:00:03  ==> azure-arm: At C:\Windows\Temp\packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1:61 char:1
10:00:03  ==> azure-arm: + $t = $f.GetTask("\$name")
10:00:03  ==> azure-arm: + ~~~~~~~~~~~~~~~~~~~~~~~~~
10:00:03  ==> azure-arm:     + CategoryInfo          : OperationStopped: (:) [], FileNotFoundException
10:00:03  ==> azure-arm:     + FullyQualifiedErrorId : System.IO.FileNotFoundException
10:00:03  ==> azure-arm:
10:00:03  ==> azure-arm: Method invocation failed because [System.__ComObject] does not contain a method named 'Run'.
10:00:03  ==> azure-arm: At C:\Windows\Temp\packer-elevated-shell-5e217785-d4d4-7c72-d85a-0e6089798e8d.ps1:62 char:1
10:00:03  ==> azure-arm: + $t.Run($null) | Out-Null
10:00:03  ==> azure-arm: + ~~~~~~~~~~~~~~~~~~~~~~~~
10:00:03  ==> azure-arm:     + CategoryInfo          : InvalidOperation: (Run:String) [], RuntimeException
10:00:03  ==> azure-arm:     + FullyQualifiedErrorId : MethodNotFound
10:00:03  ==> azure-arm:
```
#### Feature Description

Create the Ability to Set Directpath I/O on VMXNET3 interfaces as part of packer builds.

The ability to configure the Directpath I/O is unavailable on VMWare Virtual Machine VMXNET3 interfaces as part of the deployment.  


#### Use Case(s)
When a virtual machine with VMXNET3 is created using webclient, DirectPath I/O option is enabled automatically.

The recommendation from VMWare is to Set this option on a case by case basis and as a standard should be disabled.

https://kb.vmware.com/s/article/2145889

##### Additional Information

more information about this setting can be found under
https://github.com/terraform-providers/terraform-provider-vsphere/issues/552



Now that we supply the host IP through the generatedData field, I think we can remove the ssh proxy. this will probably remove a lot of issues with the Ansible provisioner. 
Closes #5260
This will probably look like a `packer init` command paired with a builder registry. We're going to be looking to Terraform for lessons.

This issue is being opened in response to the following PRs which attempted to add builders which we are afraid we're currently stretched too thin to officially support: 

packer-builder-vultr #8075
packer-builder-nutanix #8175
packer-builder-zstack #8152

I would like to make sure these builders get included in the future registry. 
#### Overview of the Issue

After running an Ansible playbook that performs `update-crypto-policies --set FIPS` and reboots an RHEL8 AWS instance, packer cannot reconnect to the instance.

#### Reproduction Steps

1. `git clone https://gist.github.com/19d6e0abbea44001c5d1c4e409e29dd8.git`
2. `cd 19d6e0abbea44001c5d1c4e409e29dd8`
3. Update `ssh_keypair_name` and `ssh_private_key_file` in `aws-ebs-ansible.json` for an existing AWS key pair.  The issue will manifest if packer creates a temporary ssh keypair but if you use an existing pair, you can ssh to the directly instance even when packer cannot.
4. `packer build -var-file vars-rhel8.json aws-ebs-ansible.json`
5.  Observe that packer cannot reconnect to after the system-wide policy is updated and the instance is rebooted (see [debug.log](https://gist.github.com/pfuntner/19d6e0abbea44001c5d1c4e409e29dd8#file-debug-log) for complete log):
```
.
.
.
    amazon-ebs: changed: [default]
    amazon-ebs:
    amazon-ebs: TASK [Wait for reboot to complete] *********************************************
    amazon-ebs: ok: [default -> localhost]
    amazon-ebs:
    amazon-ebs: TASK [Get uptime] **************************************************************
2020/01/15 07:11:10 packer-provisioner-ansible plugin: SSH proxy: accepted connection
2020/01/15 07:11:10 packer-provisioner-ansible plugin: authentication attempt from 127.0.0.1:42116 to 127.0.0.1:37060 as ec2-user using none
2020/01/15 07:11:10 packer-provisioner-ansible plugin: authentication attempt from 127.0.0.1:42116 to 127.0.0.1:37060 as ec2-user using publickey
2020/01/15 07:11:10 packer-provisioner-ansible plugin: new env request: LANG=en_US.UTF-8
2020/01/15 07:11:10 packer-provisioner-ansible plugin: new exec request: /bin/sh -c 'echo ~ec2-user && sleep 0'
2020/01/15 07:11:10 packer-builder-amazon-ebs plugin: [DEBUG] Opening new ssh session
2020/01/15 07:11:10 packer-builder-amazon-ebs plugin: [ERROR] ssh session open error: 'EOF', attempting reconnect
2020/01/15 07:11:10 packer-builder-amazon-ebs plugin: [DEBUG] reconnecting to TCP connection for SSH
2020/01/15 07:11:10 packer-builder-amazon-ebs plugin: [DEBUG] handshaking with SSH
2020/01/15 07:11:10 [INFO] 0 bytes written for 'stdout'
2020/01/15 07:11:10 [INFO] 0 bytes written for 'stderr'
2020/01/15 07:11:10 [INFO] 0 bytes written for 'stdin'
2020/01/15 07:11:10 packer-provisioner-ansible plugin: [INFO] 0 bytes written for 'stdout'
2020/01/15 07:11:10 packer-provisioner-ansible plugin: [INFO] 0 bytes written for 'stderr'
==> amazon-ebs: ssh: handshake failed: ssh: unable to authenticate, attempted methods [none publickey], no supported methods remain
.
.
.
```
6. packer hangs at this point but I can use ssh to the AWS instance directly (`ec2-user@54.209.97.87`) using my existing private key.
7. Use Ctrl-C to bring stop packer and clean up the AWS temporary instance

### Packer version
Packer v1.5.1

### Simplified Packer Buildfile

[file-aws-ebs-ansible.json](https://gist.github.com/pfuntner/19d6e0abbea44001c5d1c4e409e29dd8#file-aws-ebs-ansible-json)

### Operating system and Environment details

Driving system is CentOS 7 (`3.10.0-957.27.2.el7.x86_64`)

### Log Fragments and crash.log files

[debug.log](https://gist.github.com/pfuntner/19d6e0abbea44001c5d1c4e409e29dd8#file-debug-log)

#### Feature Description

Support publishing image to Shared Image Gallery deployed in separate subscription to where the images are being built.

#### Use Case(s)

Enterprise setups may have Shared Image Gallery which provides hardened images to multiple subscriptions.
AZ CLI has the ability to provide --subscription as an argument when creating gallery image definition and image version
