Alt+up/alt+down arrow moves the current line up or down, respectively, or multiple lines up/down when multiple lines are selected (I have them remapped to alt+k and alt+j, but it shouldn't matter). The problem is, when I am in visual line mode, select multiple lines, and press alt+j or k, then escape to get out of visual line mode, the cursor returns to the position where it was before I pressed alt+j or k.

In vim you can do `d?word` to delete backwards in a file until `word` is found.

VSCode Vim doesn't seem to support it. 

Running latest version of VS Code and the plugin.
When I add a second view into a file (often helps improve workflow b/c I can have functions and classes folded on one side but not the other), the second one does not work. Pressing j, k, h, and l do not move the cursor, and i does not enter insert mode.
**Describe the bug**
Suppose we have
```hack
$foo + $bar
^
|
cursor is here
```
When I press `w` I expect my cursor to go to
```hack
$foo + $bar
     ^
     |
```
Instead, it goes to
```hack
$foo + $bar
 ^
 |
```
In my `setting.json`, I have the following override for Hack (read: PHP):
```json
{
  "[hack]": {
    "editor.wordSeparators": "`~!@#%^&*()-=+[{]}\\|;:'\",.<>/?"
  }
}
```
Note the absence of `$`. So it seems that `vim.Iskeyword` doesn't respect language overrides for `editor.wordSeparators`. A workaround could be to set the global `editor.wordSeparators` or `vim.Iskeyword`, but neither is ideal since I work in other languages as well where `$` should be included.

**To Reproduce**
Steps to reproduce the behavior:

1.  Open a PHP/Hack file
2. Edit the language specific settings for PHP/Hack to exclude `$` in `editor.wordSeparators`
3. Move cursor to the beginning of a variable
4. Press `w` to move cursor past the variable

**Expected behavior**
Cursor moves past variable

**Environment (please complete the following information):**

<!--
Ensure you are on the latest VSCode + VSCodeVim
You can use "Report Issue" by running "Developers: Show Running Extensions" from the Command Pallette to prefill these.
-->

- Extension (VsCodeVim) version: 1.12.4
- VSCode version: 1.41.1579026862
- OS: Mac OS 10.15.2


**Describe the bug**
Search and replace when using capturing groups does not work

**To Reproduce**
Text in file: `Hello World`
Search and replace command: `s/Hello \(World\)/\1`
Results: No regex match

**Expected behavior**
In vim 7.4.629 with the text `Hello World`, the search and replace command, `s/Hello \(World\)/\1`, yields the resulting text of `World`

**Environment**
Extension version: 1.12.4
VS Code version: Code 1.41.1 (26076a4de974ead31f97692a0d32f90d735645c0, 2019-12-18T15:04:31.999Z)
OS version: Linux x64 5.0.0-32-generic
**Describe the bug**
Save with `:w` when some text has been highlighted in visual mode causes an error: `CommandLine: Error executing cmd='<,'>w. err=Error: Not implemented!.`

**To Reproduce**
Steps to reproduce the behavior:

1.  Select some text with visual mode
2.  Press `:w`

**Expected behavior**
File should be saved normally

**Environment (please complete the following information):**

<!--
Ensure you are on the latest VSCode + VSCodeVim
You can use "Report Issue" by running "Developers: Show Running Extensions" from the Command Pallette to prefill these.
-->

- Extension Version: `1.12.4`
- OS Version: `Darwin x64 18.7.0`
- VSCode version: `1.41.1`

**Additional context**
Add any other context about the problem here.

**Describe the bug**
When the BetterFountain extension is loaded when VSCode starts, the Vim extension no longer works at all.

I'm not sure if this is a bug on Vim or BetterFountain, and have submitted it to both. The issue on BetterFountain is https://github.com/piersdeseilligny/betterfountain/issues/51.

**To Reproduce**
Steps to reproduce the behavior:

1.  Start vscode with BetterFountain and Vim enabled
2.  Open a .fountain file
3.  Push 'esc', 'i', 'abc'
4. 'iabc' is added to the document

**Expected behavior**
Vim would go into command mode, then insert mode, and then 'abc' would be added to the document.

**Environment (please complete the following information):**

- Extension (VsCodeVim) version: 1.12.4
- VSCode version: 1.14.1
- OS: Win 10 Pro 64bit (build 18362)

**Additional context**
If BetterFountain is disabled, then (as required), you reload Vscode, and then Enable BetterFountain, the Vim functionality works as well as the BetterFountain functionality

Adds note recommending disabling `html.mirrorCursorOnMatchingTag` in README to avoid errors and unexpected behaviors.

<!--
Yay! Thanks for sending us a PR! ðŸŽŠ

Please ensure your PR adheres to:

- [ ] Commit messages has a short & issue references when necessary
- [ ] Each commit does a logical chunk of work.
- [ ] It builds and tests pass (e.g `gulp`)
-->

**What this PR does / why we need it**:
The new [VSCode `html.mirrorCursorOnMatchingTag` default setting](https://code.visualstudio.com/updates/v1_41) is incompatible with Vim UX. Since this is a default setting, it would be helpful in the setup instructions.

**Which issue(s) this PR fixes**
* https://github.com/VSCodeVim/Vim/issues/4439
* https://github.com/VSCodeVim/Vim/issues/4402
* https://github.com/VSCodeVim/Vim/issues/4378

<!--
Commits in `fixes #<issue number>(, fixes #<issue_number>, ...)` format, will close the issue(s) when PR gets merged)
-->

**Describe the bug**
`TaskQueue: Error running task. Failed to handle key=<Esc>. .`

**To Reproduce**
Steps to reproduce the behavior:

1.  Press `v` `j` `j` select text
2.  Click on `CMD` + `x` cut the text
3.  Press `ESC`
4.  See error

**Expected behavior**
Switch VISUAL mode to NORMAL mode

**Environment (please complete the following information):**

- Issue Type: `Bug`
- Extension Name: `vim`
- Extension Version: `1.12.4`
- OS Version: `Darwin x64 19.0.0`
- VSCode version: `1.41.1`

- Extension (VsCodeVim) version:
- VSCode version:
- OS:

**Is your feature request related to a problem? Please describe.**

In "real" vim, by default, the command `:w` saves the document without applying any language-specific formatting rules to the active buffer.   

However, in VSCodeVim, `:w` performs the default Save action (i.e. `cmd+s`), which formats the document before saving it.

**Describe the solution you'd like**

VSCode offers a separate action in the command palette called "File: Save without formatting," which will save your file as-is.

It's my opinion that `:w` should invoke _that_ save method.  

**Describe alternatives you've considered**
So that behavior doesn't change for existing users, perhaps a separate command could be introduced that invokes the "File: Save without formatting" command, for instance: `:wwo`, (i.e. **w**rite **w**ith**o**ut)

**Additional context**

I've been working with a team on a Javascript project, where all other developers are using Sublime or Atom.  

VSCode has an expansive set of formatting rules that are applied on a "regular" file save.  It ends up converting things like `function(foo) { }` into `function (foo) {}`.  These changes are extremely unimportant to me, and to my team.  However, I end up saving my work (out of habit) with `:w` â€” subtle changes get made that add a *ton* of bloat to my pull requests, which are a hassle to unwind individually with `git add --patch .`
