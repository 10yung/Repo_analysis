Project wouldn't compile with current Android Studio and gradle version. Upgraded gradle plugin, then some other dependencies in order to comply with the newer gradle version.
It compiles, and tests pass.
*App doesn't work, I think the backend is to blame (it responds "Squarespace - Website Expired") 
I could be wrong here but I thought the domain layer should not be aware of anything in the data layer, and I that the "entities" are actually at the lowest layer inside the domain layer.

So from my understanding the domain layer can have access to the entities but it should not know anything about the data layer version of an entity. So I'm confused as to why the BufferooEntity is at the data layer instead of the domain layer. Is it a naming mistake or am I not understanding something? As far as I can tell the names are the wrong way around and it's the Bufferoo that should be at the data layer and the BufferooEntity should be at the domain layer. Aside from the name they are identical.
The requirements state Java 1.8, which requires anrdoid api 24.
If this project truly requires 1.8, then will it not work on all api's below 24 which run java 1.7?

In the following code `saveBufferoos` is called even when data is retrieved from cache (db)....for relatively large amounts of data this can be pretty time consuming.

```
    override fun getBufferoos(): Flowable<List<Bufferoo>> {
        return factory.retrieveCacheDataStore().isCached()
                .flatMapPublisher {
                    factory.retrieveDataStore(it).getBufferoos()
                }
                .flatMap {
                    Flowable.just(it.map { bufferooMapper.mapFromEntity(it) })
                }
                .flatMap {
                    saveBufferoos(it).toSingle { it }.toFlowable()
                }
    }
```

Have adapted some of this code for my own project and one issue I ran in to was around use of `CompositeDisposable.dispose()` in `FlowableUseCase` for case where I need to update the subscription.  In my case at least switching to `clear` resolved the issue.  It looks like calling `dispose` has effect of not allowing subsequent use of `disposables`.  

First off, thanks for all the great work that went into this repo.

I just wanted some clarification with the purpose of `@PerActivity`. To explain further, after a configuration change the `BrowseBufferoosViewModel` instance returned by the framework will be the same one (same memory location) as before the config change happened (i.e. the instance is retained across configuration changes). This is one of the benefits of using the new `ViewModel` Architecture Component. It may be desired for other objects that are not tied to the Android framework to have this same behavior (i.e. an object that prevents the user to move to another screen if a network request is ongoing while a config change is happening). Dagger can be leveraged to achieve this by using scoping. Is this what you are trying to achieve with `@PerActivity` or are you just indicating that the module is providing `Activity` specific dependencies?



P.S. I realize that if we want an object to be retained across config changes, we can make it a dependency of the `ViewModel` in question, but this may lead to overly complicated constructors.
Hello @hitherejoe ,

I have a question about dependencies. Currently, **Remote** module depends on **Data**, and **Data** module depends on **Domain** and because of that If we want to get information from **Remote** with Models that actually should be only in **Remote** we have to create a duplication of that model at each layer.

_Example_:
We have Remote module for the API that has method `getRepositoryByPlatform(platform: Platform)` 
and our `Platform` is simple Enum class `enum class Platform { IOS, ANDROID }`
without duplication `Platform` class would be in **Domain** layer. But in this case if we need to specify `@SerializedName` for example, we would need to add `Gson` dependency to **Domain** layer, that looks incorrect from my point of view. And because of that creating `Platform` representation model at each layer looks like an overhead to me.

So the question is how do you handle such cases?
This is probably not a big deal right now since there's currently just one ViewModel subclass, but it's still worth noting...

Right now `BrowseBufferoosViewModelFactory` only supports one ViewModel subclass--`BrowseBufferoosViewModel`. If you define a second subclass of ViewModel, calling `ViewModelProviders.of(this, viewModelFactory).get(SecondViewModel::class.java)` will throw `IllegalArgumentException: Unknown ViewModel class`.

One way to address this is to have `BrowseBufferoosViewModelFactory` fetch a `Provider<ViewModel>` from the multibound map using `modelClass` as the key. [Further details](https://github.com/satorufujiwara/kotlin-architecture-components#multibinding).