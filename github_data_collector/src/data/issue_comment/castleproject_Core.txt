When using facility NLogFactory for inject loggers into asp.net core project like that:
`IocContainer.AddFacility<LoggingFacility>(
                    f => f.LogUsing<NLogFactory>().WithConfig("NLog.config")
                );`

The layout renders releated to aspnet is always empty.  Is there any way to walkaround this and inject proper NLog? The layout render for aspnet is inside of library NLog.Web.AspNetCore
### TL;DR:

May I submit a PR to remove all applications of CAS security transparency-related attributes, i.e. `[SecurityCritical]` and `[SecuritySafeCritical]` and `[assembly: SecurityRules(SecurityRuleSet.Level2)]`?

### Reasons:

1. The attributes in question have zero effect without `[assembly: AllowPartiallyTrustedCallers]`, which got removed back in #241 (see also https://github.com/castleproject/Windsor/issues/248 and https://github.com/castleproject/Windsor/issues/300).

2. Microsoft has obsoleted large parts of CAS, and .NET Core no longer supports it at all. There's simply no more future for CAS.

3. The attributes are applied only sporadically, and as far as I can tell, in a haphazard, non-systematic manner.

4. Some of these attributes are applied in apparently pointless places, making me suspect we never really cared enough about CAS to think it through & get it right:
    - It is often `private` methods that are marked `[SecurityCritical]`, but who could call these methods except other methods in the very same class? Does it make sense that some sibling methods may call them, and others may not? Security auditing at such a fine-grained level doesn't make much sense, IMHO.
   - In one instance, a type (`static`) constructor is marked with one of these attributes. According to MS documentation, this won't have any effect at all, as type constructors are called by the runtime, which is always fully-trusted and therefore not constrained by these attributes.

5. By removing these, we could get rid of a lot of conditional code guards `#if FEATURE_SECURITY_PERMISSIONS && DOTNET40`. I'd like to especially see usage of `DOTNET40` minimized, for the reason given below.

### Some further background re: (5), `DOTNET40`

I'd love to see the next minor version of the Castle.Core NuGet package acquire two framework targets: `netcoreapp2.0` and `netstandard2.1`. <sup>**(1)**</sup> This could greatly simplify the transitive dependency graphs of .NET projects relying (directly or indirectly) on Castle.Core. Our existing `netstandard1.x` targets will bring in a lot of dependencies even when downstream libraries such as Moq, FakeItEasy, NSubstitute etc. already target `netstandard2.x`.

To support these new targets, we'd need to adjust some of our conditional compilation symbols (`#if FEATURE_*`) as the APIs of these target frameworks are once again different from all of the target frameworks we currently support (.NET Framework 3.5, 4.x, and .NET Standard 1.x).

I've been trying to determine the set of conditional compilation symbols that would work for these two new targets. Many of the existing symbols can be used without any changes; some will require changes. One symbol that's especially problematic is `DOTNET40`, it is a kitchen sink for several different things. It would be good to minimize usages of `DOTNET40` and replace it with more specific symbols wherever possible, so that these can be cleanly mapped to the various target frameworks.

One of the things that falls under the `DOTNET40` umbrella is Code Access Security transparency level 2; look for code guarded by `#if FEATURE_SECURITY_PERMISSIONS && DOTNET40`). Since the code thus guarded doesn't really make sense anymore (see reasons given above), I believe it would be easiest to just remove it rather than introducing a new `FEATURE_SECURITY_TRANSPARENCY_LEVEL2` symbol.

----

<sup>**(1)**</sup> I'd also like to see some existing target frameworks dropped&mdash;`net35`, `netstandard1.x`, `netstandard1.5`, for reasons I'll happily lay out if requested&mdash; but that would be a breaking change and cannot be done in a minor version.
Interfaces are ordered in a case insensitive way, while fields for ctor are order in case sensitive way and cause problems when creating class proxy

Test and fix for https://github.com/castleproject/Core/issues/474
In MixinData interfaces are sorted as 

    sortedMixedInterfaceTypes.Sort((x, y) => x.FullName.CompareTo(y.FullName));

instead of

    sortedMixedInterfaceTypes.Sort((x, y) => String.CompareOrdinal(x.FullName, y.FullName));

or even better via

    sortedMixedInterfaceTypes.Sort(new FieldReferenceComparer());

where `FieldReferenceComparer` could be renamed to `TypeNameComparer`

This causes wrong ctor order and fails to create an instance with strange message due to bad internal order ;(

I fixed my immediate problem by changing names, but it would be nice if this is fixed eventually.

**.NET Core 3.0 introduces support for unloading assemblies after loading them into a custom `AssemblyLoadContext`** via the new `Unload` method and constructor with `isCollectible` parameter. The custom `AssemblyLoadContext` is set up to only contain the assemblies you want with everything else being in the default context. Obviously this is a .NET Core 3.0 feature, and .NET Framework will never support it; .NET Standard also does not define `System.Runtime.Loader` classes. Unfortunately it looks like dynamic assemblies were missed (https://github.com/dotnet/corefx/issues/38426) and support for them won't make the cut for .NET Core 3.0.

- https://docs.microsoft.com/en-us/dotnet/standard/assembly/unloadability-howto
- https://github.com/dotnet/samples/tree/master/core/tutorials/Unloading
- https://github.com/dotnet/coreclr/issues/552

**.NET Framework 4.0 introduced `AssemblyBuilderAccess.RunAndCollect`** which allows dynamic assemblies to be garbage collected when no reference is held. `RunAndCollect` has a whole heap of restrictions on what can be emitted into the assembly (e.g. no COM interop), but I think we could fairly trivially add opt-in for this per `ModuleScope` to make it disposable.

- https://docs.microsoft.com/en-us/dotnet/framework/reflection-and-codedom/collectible-assemblies

I don't know how useful this feature would actually be since we don't get any requests for it, but logging this as an enhancement to raise the topic since it is possible. It sounds like it `RunAndCollect` could be helpful for #472.
This is in response to #394. It complements ~~https://github.com/castleproject/DictionaryAdapter/pull/1~~ :construction: and does the fun bit:

![Image of Trogdor the Burninator](https://user-images.githubusercontent.com/104481/62899511-39712980-bd58-11e9-904f-b755eb407460.png)

Some things that need to be done outside of this PR:

* [ ] Update this repo's summary:

   ```diff
   -Castle Core, including Castle DynamicProxy, Logging Services and DictionaryAdapter 
   +Castle Core, including Castle DynamicProxy and Logging Services
   ```

* [X] <sub>~~Update the DictionaryAdapter link [on the Castle Project homepage](https://www.castleproject.org/projects/) to no longer point at this repo.~~</sub>  
   (Update: Created a separate PR for this.)
Fixes #106.

I didn't (and still don't quite) trust this bug fix, mainly because it seems far too easy for DP standards (+-1 LoC!? üòù). However, it makes good sense to match generic type parameters by position instead of by name; in IL, for instance, generic type parameters are referred to by position (e.g. ` ``1 `). The execution environment doesn't really care about the names.

To give us some added safety, I ran a few additional checks:

* [X] I ran the Moq unit test suite (approx. 1,500 additional tests) against the updated version of DP to see whether this might cause regressions further downstream. (Doesn't look like it.)
* [X] I verified that the [original Moq issue which led to #106](https://github.com/Moq/moq4/issues/193) is fixed by this. (It is.)
This should resolve #67.

(At least as far as is possible: non-interceptable methods such as non-virtual, sealed, or private methods of course still cannot be forwarded to the proxy.)
Migrating from [StackOverflow](https://stackoverflow.com/questions/56977070/can-castle-dynamicproxy-be-configured-to-not-write-to-ref-args) as per jonorossi's suggestion.

The offending third-party interface is [IDebugProperty2](https://docs.microsoft.com/en-us/visualstudio/extensibility/debugger/reference/idebugproperty2-enumchildren?view=vs-2015) provided by Microsoft.  And more specifically it's the "ref Guid guidFilter" arg of the EnumChildren() method that fails to be assigned to.

I have confirmed that my implementation of EnumChildren (see below) that is **not** wrapped in a proxy will also throw an AccessViolationException.

```
public int EnumChildren (enum_DEBUGPROP_INFO_FLAGS   dwFields, uint dwRadix, ref Guid                    guidFilter, uint dwAttribFilter, string pszNameFilter, uint dwTimeout, out IEnumDebugPropertyInfo2 ppEnum)
{
  guidFilter = Guid.NewGuid();
} 
```

<StackOverflowDescription>

I'm hitting an AccessViolationException when trying to use an interface proxy that is wrapping a third-party interface. The exception is being thrown when the emitted code writes the invocation arg array back to the original arg for a 'ref' type arg. Presumably this is because the third-party component has given an 'in' only parameter and it should not be written to.

So, I was wondering if DynamicProxy could be configured (or enhanced/hacked) to not write back some args? Maybe by configuring a custom code emitter or something...

Or thinking outside of the box, would it work to apply an [InAttribute] at runtime to the third-party interface (assuming DynamicProxy can be configured to adhere to this attribute)?

Other, maybe useful, information:

The third-party interface doesn't use the 'in' keyword or InAttribute on the offending 'ref' arg.
I'm trying to use interface proxies created with a target
Example code:

```
namespace third_party
    {
      public class IService
      {
        public int DoSomething(ref Guid guid);
      }
    }
    namespace domain_ns
    {
      public class ServiceImpl : IService
      {
        public int DoSomething(ref Guid guid) { return 0; }
      }

      public static void main(string[] args)
      {
        ...
        var proxy = proxyGen.CreateInterfaceProxyWithTarget(..., new ServiceImpl(), ... );
        third_party.AddService(proxy);

        // Indirectly causes proxy.DoSomething() to be called.
        // Throws an AccessViolationException :(
        third_party.Go();
      }
    }
```

</StackOverflowDescription>
It is very useful that open generic types can be supported 