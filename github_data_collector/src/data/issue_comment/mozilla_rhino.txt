
[Rhino 1.7.7.2](https://github.com/mozilla/rhino/tree/Rhino1_7_7_2_Release#releases) incorrect date on [releases](https://github.com/mozilla/rhino/tree/Rhino1_7_7_2_Release#releases) section
###### Revision
rhino-1.7.11

###### Test case
```
var NISLFuzzingFunc = function() {
    "use strict";
    print(this);
};
NISLFuzzingFunc();
```

###### Execution steps
    java -jar rhino-1.7.11.jar -debug -version 200 testcase.js

###### Output
    [object global]

###### Expected behavior
    undefined

###### Description
According to ES standard, `this` is not converted to the global object in strict mode, the initial value of `this` should be undefined. However, when running this test case blow, the output of rhino is `[object global]`.
The references are as follows:
http://www.ecma-international.org/ecma-262/5.1/index.html#sec-C
If you call out to a Java method and it returns a string s then
* typeof s returns "object" not "string"
* s.replace() calls the Java version of replace() not the JavaScript version so s.replace(" ","") for "jhgj jh jjh jh" returns "jhgjjhjjhjh" not "jhgjjh jjh jh"

Suggested fix: after this line in NativeJavaMethod.call()

`Object retval = meth.invoke(javaObject, args);
`
add this check to convert it to a native JavaScript string (ie typeof returns "string" not "object")

```
if (retval instanceof String) {
    return NativeJavaObject.coerceTypeImpl(String.class, retval);
}
```
[Library](https://github.com/823984418/JsType).
I open source by GPL3.
What do I need to do for calling Rhino MPL?(such as copy MPL?)
This includes "function *", "yield", and "yield *" support.
It is only activated if the language level is <= "LANGUAGE_ES6",
or "200". At lower language levels, the "yield" keyword still
triggers the pre-ES6 generator support that Rhino supported in
previous releases.

This addresses a few issues:

https://github.com/mozilla/rhino/issues/158
https://github.com/mozilla/rhino/issues/396
https://github.com/mozilla/rhino/issues/411
https://github.com/mozilla/rhino/issues/482
Executing the following code

        public static void main(String[] cmdlineArgs) throws Throwable {
            final Context context = ContextFactory.getGlobal().enterContext();
            try {
                final Script compiledScript = context.compileString(""
                        + "(\n"
                        + "function\n"
                        + "(\n"
                        + ")\n"
                        + "{\n"
                        + "throw Error();\n"
                        + "}\n"
                        + ")\n"//this closing parenthesis is the end of the expression that returns the function
                        + "(\n"
                        + ")\n"
                        + ";",
                        "eval", 1, null
                );
                ScriptableObject global = context.initSafeStandardObjects();
                final Object obj
                        = ScriptRuntime.doTopCall(
                            (Context cx, Scriptable scope, Scriptable thisObj, Object[] args) ->     compiledScript.exec(context, scope),
                                context, global, null, new Object[]{}, true);
                int i = 0;
            } catch(RhinoException ex) {
                System.out.println(ex.getScriptStackTrace());
            }finally {
                Context.exit();
            }
        }

This results in the following output:

    at eval:6 (anonymous)
    at eval:1

Expected output:

	at eval:6 (anonymous)
	at eval:9

Another example using a variable expression:

            final Script compiledScript = context.compileString(""
                    + "var x = (function(){throw Error();})\n"
                    + ";\n"
                    + "(\n"
                    + "x\n"
                    + ")\n"
                    + "(\n"
                    + ")\n"
                    + ";",
                    "eval", 1, null
            );

The output becomes:

    at eval:1 (anonymous)
    at eval:3

The expected being (remove the parenthesis around x while keeping the newlines):

    at eval:1 (anonymous)
    at eval:6

The line number seems incorrectly supplied by the interpreter. At least, if you replace "throw Error();" with "(undefined).prop" then the resulting EcmaError (as opposed to this example's JavasSriptException) will have the same issue. The issue may originate somewhere earlier in the sequence of events.
Hello, 

I am one of the maintainers of the Maven Central Repository (https://repo1.maven.org) at Sonatype. Our content delivery provider, Fastly, recently informed us of an SBL (Spamhaus Block List) abuse report related to a Rhino distribution currently hosted in Central. The implicated artifact is: http://central.maven.org/maven2/org/mozilla/rhino/1.7.7.2/rhino-1.7.7.2.jar

The SBL abuse report was previously located at https://www.spamhaus.org/sbl/query/SBL466948

I've since spoken with an SBL representative and they have removed the report after running the artifact through one of their internal virus scanning tools. I wanted to raise this issue, however, as this is the second time we've received a malware report for Rhino 1.7.7.2. It seems that this artifact is being flagged as malicious by certain malware detection vendors (we were not told which). 

It might be worth some research to determine the cause of this activity. If it is determined that the artifact is indeed vulnerable, please let us know and we will remove it from Maven Central.

A quick glance revealed the following issues which may be related, though they do pertain to different versions:
- https://github.com/mozilla/rhino/issues/425
- https://sainaen.github.io/rhino-appscan-results/
For the following declaration
```javascript
var x = new XML('<xml><![CDATA[text node 1]]>text node 2</xml>');
```
The following expressions are all true
```javascript
x.toString() == 'text node 1text node 2'
x.*.length() == 2
x.child(0).nodeKind() == 'text'
x.child(1).nodeKind() == 'text'
x.child(0).toString() == 'text node 1'
x.child(1).toString() == 'text node 2'
x.text().length() == 1 // expected false
x.text().toString() == 'text node 2' // expected false
```
Expected result is that `x.toString() == x.text().toString()` is true.

jmh benchmark: https://github.com/qxo/rhino-jmh-benchmark/blob/master/src/main/java/qxo/benchmark/rhino/RhinoJavaMembersBenchmark.java

```
rhino 1.7.11
====================================
Benchmark                                              Mode  Cnt   Score   Error   Units  Score/min
RhinoJavaMembersBenchmark.base4Member001p             thrpt   20  60.352 ± 1.670  ops/ms     14.026
RhinoJavaMembersBenchmark.base4Member010p             thrpt   20  59.010 ± 1.718  ops/ms     13.714
RhinoJavaMembersBenchmark.base4Member020p             thrpt   20  56.018 ± 1.780  ops/ms     13.019
RhinoJavaMembersBenchmark.base4Member050p             thrpt   20  56.259 ± 2.028  ops/ms     13.075
RhinoJavaMembersBenchmark.base4Member100p             thrpt   20  56.998 ± 1.300  ops/ms     13.247
RhinoJavaMembersBenchmark.base4Member200p             thrpt   20  54.377 ± 2.047  ops/ms     12.637
RhinoJavaMembersBenchmark.lazyInitOff4Member050p      thrpt   20  21.301 ± 1.565  ops/ms      4.950
RhinoJavaMembersBenchmark.lazyInitOn4Member050p       thrpt   20  57.212 ± 1.699  ops/ms     13.296
RhinoJavaMembersBenchmark.old4Member001p              thrpt   20  24.235 ± 0.553  ops/ms      5.632
RhinoJavaMembersBenchmark.old4Member050p              thrpt   20  11.430 ± 0.163  ops/ms      2.656
RhinoJavaMembersBenchmark.old4Member100p              thrpt   20   7.230 ± 0.048  ops/ms      1.680
RhinoJavaMembersBenchmark.old4Member200p              thrpt   20   4.303 ± 0.038  ops/ms      1.000
RhinoJavaMembersBenchmark.reflectCacheOff4Member050p  thrpt   20  14.271 ± 1.371  ops/ms      3.317


rhino  1.7.7.2
==================================
Benchmark                                              Mode  Cnt   Score   Error   Units  Score/min
RhinoJavaMembersBenchmark.base4Member001p             thrpt   20  58.649 ± 0.272  ops/ms     13.180
RhinoJavaMembersBenchmark.base4Member010p             thrpt   20  57.837 ± 0.323  ops/ms     12.998
RhinoJavaMembersBenchmark.base4Member020p             thrpt   20  57.664 ± 0.216  ops/ms     12.959
RhinoJavaMembersBenchmark.base4Member050p             thrpt   20  57.913 ± 0.168  ops/ms     13.015
RhinoJavaMembersBenchmark.base4Member100p             thrpt   20  57.923 ± 0.605  ops/ms     13.017
RhinoJavaMembersBenchmark.base4Member200p             thrpt   20  57.063 ± 0.784  ops/ms     12.824
RhinoJavaMembersBenchmark.lazyInitOff4Member050p      thrpt   20  25.693 ± 0.381  ops/ms      5.774
RhinoJavaMembersBenchmark.lazyInitOn4Member050p       thrpt   20  56.958 ± 1.618  ops/ms     12.800
RhinoJavaMembersBenchmark.old4Member001p              thrpt   20  26.867 ± 0.202  ops/ms      6.038
RhinoJavaMembersBenchmark.old4Member050p              thrpt   20  12.091 ± 0.139  ops/ms      2.717
RhinoJavaMembersBenchmark.old4Member100p              thrpt   20   7.588 ± 0.077  ops/ms      1.705
RhinoJavaMembersBenchmark.old4Member200p              thrpt   20   4.450 ± 0.026  ops/ms      1.000
RhinoJavaMembersBenchmark.reflectCacheOff4Member050p  thrpt   20  15.193 ± 0.148  ops/ms      3.414
```