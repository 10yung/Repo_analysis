Version: 3.24.1-GA

I'm using javassist in a java agent to instrument classes, for example insert extra log statements in methods. Whenever an `javax.crypto.*Exception` class is loaded through the classpool (e.g., `ClassPool.getDefault().get(classname)`), eventually the JVM on Windows will issue a verification failure.

Reproduction:
* I've attached an example java agent using javassist. It simply loads classes through javassist ClassPool whenever the JVM calls the `transform()` method without changing them. This is enough to trigger problem. It can be built with: `mvn -DskipTests -PbuildAnalyzer package`. There is a pre-built jar inside.

[javassist-bug.zip](https://github.com/jboss-javassist/javassist/files/3859701/javassist-bug.zip)

* Windows Java version:
```
java version "1.8.0_152"
Java(TM) SE Runtime Environment (build 1.8.0_152-b16)
Java HotSpot(TM) Client VM (build 25.152-b16, mixed mode)
```

* Using it with a test app called CryptoKnight (https://github.com/MonroCoury/CryptoKnight):
>java -javaagent:analyze-1.0-jar-with-dependencies.
jar  -cp knight/bcprov-jdk15on-159.jar;knight/commons-codec-1.10.jar;knight/
commons-io-2.5.jar;knight/pgslookandfeel-1.1.2.ja
r;knight/spring-security-crypto-4.2.1.RELEASE.jar -jar knight/Cryptoknight_v0.0.
2.jar

* Click on the app's "Encrypt" button, the JVM will throw `CircularityError`. I don't think it's an actually circularity error but that the verification process fails with bad padding.
```
Exception in thread "Thread-3" java.lang.ClassCircularityError: javax/crypto/Bad
PaddingException
        at sun.security.rsa.RSASignature.engineVerify(Unknown Source)
        at java.security.Signature$Delegate.engineVerify(Unknown Source)
        at java.security.Signature.verify(Unknown Source)
        at sun.security.x509.X509CertImpl.verify(Unknown Source)
        at sun.security.x509.X509CertImpl.verify(Unknown Source)
        at javax.crypto.JarVerifier.testSignatures(JarVerifier.java:775)
        at javax.crypto.JarVerifier.access$400(JarVerifier.java:37)
        at javax.crypto.JarVerifier$1.run(JarVerifier.java:222)
        at javax.crypto.JarVerifier$1.run(JarVerifier.java:187)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.crypto.JarVerifier.<clinit>(JarVerifier.java:186)
        at javax.crypto.JceSecurity.loadPolicies(JceSecurity.java:378)
        at javax.crypto.JceSecurity.setupJurisdictionPolicies(JceSecurity.java:3
23)
        at javax.crypto.JceSecurity.access$000(JceSecurity.java:50)
        at javax.crypto.JceSecurity$1.run(JceSecurity.java:85)
        at java.security.AccessController.doPrivileged(Native Method)
        at javax.crypto.JceSecurity.<clinit>(JceSecurity.java:82)
        at javax.crypto.SecretKeyFactory.nextSpi(SecretKeyFactory.java:295)
        at javax.crypto.SecretKeyFactory.<init>(SecretKeyFactory.java:121)
        at javax.crypto.SecretKeyFactory.getInstance(SecretKeyFactory.java:160)
        at Encryptor.setEncParameters(Encryptor.java:118)
        at TextEncrypt.CBCEncrypt(TextEncrypt.java:27)
        at GUI$ListenForButton$1.run(GUI.java:589)
```

Some notes:
* It may be all Exception classes, I've only tracked it down to the `javax.crypto` package because of my test environment
* I don't do anything to the Exception classes, the process of loading them through javassist is enough to cause verification failure
* I can actually **modify** other non-Exception classes include classes in the `javax.crypto` package without problems
* This is not an issue on linux. But the linux environment is probably using a different JVM distro (ie, openjdk)
* My **current workaround** is to skip all Exception classes in my transformer. If a class has the keyword Exception in its classname, don't even try to load it with javassist.
This method would be really welcome:
`void insertBeforeAndAfter(String srcBefore, String sourceAfter)`

Cause this is not possible for example"
```java
cm.insertBefore("{");
cm.insertAfter("}");
```
While it would have been valid code.
We have `insertBefore` `insertAfter` and `insertAt`.

Some programming languages have a `defer` keyword.
Which is added to the method stack to be executed next.

This is used when memory is allocated for example, but the memory has to be freed after the method or a memory leak is there. With the defer, it does not matter if the method returns early, at the end or in the middle with a exception that is thrown for example.
It will always execute the code of the defer line.

Some kind of behaviour like this would be really welcome. Cause right now I have no idea how to add something with javassist that is always executed as the last thing in the method.



I tested this multiple times, it's 100% true in my case.
This works:

```java
  if (  class_name_with_dots.equals("doeke_sfjl_ui.sfjl_ui")
                    || class_name_with_dots.equals("doeke_sfjl_ui.sfjl_ui_widgets")
                    || class_name_with_dots.equals("doeke_sfjl_ui_tests.Agent_Id_Test")
                 ) {
```

and if I use the following it does not:

```java
 if (  class_name_with_dots.equals(doeke_sfjl_ui.sfjl_ui.class.getName())
                   || class_name_with_dots.equals(doeke_sfjl_ui.sfjl_ui_widgets.class.getName())
                   || class_name_with_dots.equals(doeke_sfjl_ui_tests.Agent_Id_Test.class.getName())
                ) {
```

It will result in:

<img width="418" alt="Screen Shot 2019-11-11 at 22 25 38" src="https://user-images.githubusercontent.com/738650/68622646-edf32680-04d2-11ea-825f-f967f3417f42.png">

the complete file is here (small file, class in the bottom can be ignored) ( https://pastebin.com/Vw0MHiKN )

Can this be because the class is not ready for getName() cause it is not fully loaded yet?


I am attempting to load a jar file from disk then change a few classes (java.lang etc) methods then run the class with a javassist loader.  However I am not sure what to do about this?

Exception in thread "main" java.lang.SecurityException: Prohibited package name: java.lang

I have set the loader.doDelegation = false;

But I am not quite sure how to subclass  this to avoid the exception above.  Is this possible?

Any examples would be awesome!

This is the test project that can be used to reproduce the bug:

https://github.com/l-k-test/javassist-ecj-bug

Note that the bug is reproducible even with the latest version (3.26.0-GA).

It looks like javassist cannot deal with bytecode produced by the eclipse compiler.
Currently, CtClass.makeNestedClass(..) does not support adding non-static classes. When an attempt is made to add a non-static class, a RuntimeException is thrown "sorry, only nested static class is supported"
I want to instrument tomcat's CoyoteAdapter.service(). To let application execute instrumented code when user request. Below is my transformer's code.

       `@Override
	public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
			ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {
		byte[] byteCode = classfileBuffer;
		String finalTargetClassName = this.targetClassName.replaceAll("\\.", "/");
		if (!className.equals(finalTargetClassName)) {
			return byteCode;
		}
		if (className.equals(finalTargetClassName) && loader.equals(targetClassLoader)) {
			System.out.println("[Instrument Agent] Transforming class " + className + " -- " + loader.toString());
			try {
				ClassPool pool = new ClassPool();
				pool.appendSystemPath();
				pool.appendClassPath(".:/home/lace/Documents/workspace-sts-3.9.10.RELEASE/Tomcat7/bin");  // Tomcat source code

				CtClass cc = pool.get(targetClassName);

				CtMethod m = cc.getDeclaredMethod(METHOD_NAME);
				System.out.println("[Instrument Agent] ----> " + m.getSignature() + ":" + m.getMethodInfo());
				m.insertBefore("System.out.println(\"[Instrumentation Agent] Agent information.\");");
				byteCode = cc.toBytecode();
				cc.detach();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return byteCode;
	}`

But, using above code, it can not output '[Instrumentation Agent] Agent information.' when I request Tomcat web applications. Anyone know why?
#270 I thought that the PR/merge would make javassist fully compatible with Dynamic Class-File Constants(https://openjdk.java.net/jeps/309). When running junit tests using powermock on the Java 11 I get this error: "BAD LDC 17". Here Javassist and Mockito is used as a dependency of PowerMock. 
I am using the following versions.

1. Javassist 3.26.0-GA  
2. PowerMock 2.0.2
3. JDK 11
4. Mockito 2.28.0
I found two cases that failed to rename the class name:

- case 1:
  SignatureAttribute: Generics descriptor could not be successfully renamed; `Lcom/squareup/wire/TagMap<Lcom/squareup/wire/MessageAdapter$FieldInfo;>;`

- case 2:
  AnnotationDefaultAttribute: It has not been renamed.
```
package com.test.member.value;

import com.squareup.wire.Message;

public @interface TestMemberValue {
    Message.Datatype type() default Message.Datatype.MESSAGE;

    Message.Label[] labels() default {Message.Label.OPTIONAL, Message.Label.PACKED};

    Class<?> clazz() default TestMemberValue.class;

    Class[] clazzs() default {TestMemberValue.class};
}
```

Note the mapï¼š
```
com/squareup/wire/TagMap : com/squareup/wire/test/TagMap
com/squareup/wire/MessageAdapter$FieldInfo : com/squareup/wire/test/MessageAdapter$FieldInfo
...
com/squareup/wire/** : com/squareup/wire/test/**
com/test/member/value/TestMemberValue : com/test/test/test/member/value/TestMemberValue
```

The problem was fixed by this pr.