## Current Behavior
In non-TTY mode, using `progressbar.to_s` with a format argument does not change the format of the returned string 

### Steps to Reproduce

1. Trigger non-tty mode by specifying a null file output:
 `progressbar = ProgressBar.create output: File.open(File::NULL, "w")`
 (`ProgressBar::Outputs::Null` does not exhibit the bug)
3. `progressbar.to_s('%E')` returns `Progress: ||`

## Expected Behavior
 `progressbar.to_s('%E')` returns ` ETA: ??:??:??`

## Fix

I think https://github.com/jfelchner/ruby-progressbar/blob/master/lib/ruby-progressbar/outputs/non_tty.rb#L36 needs a `yield` inside?



More a question, than feature request.

## Current Problem
  You need special class to have progress bar on it, which also needed refinements, it's not entirely obvious to me why this was first solution and only solution for automatic progressbar.

## Potential Solution or New Behavior
Allow wrapping any enumerator with enumerator which emits progressbar

### Mockups
```ruby
  require "io/console"
  class Progress
    include Enumerable
    def initialize(enumerable)
      @enumerable = enumerable
      @output_every = (@enumerable.size / IO.console.winsize.last.to_f).to_i+1
    end
    def each
      @enumerable.each_with_index do |item, index|
        print "=" if index % @output_every == 0
        yield item
      end
      print "\n"
    end
  end

  can_has_pb = true
  thing = (1..10000)
  enum = can_has_pb ? Progress.new(thing) : thing
  enum.each do |l|
    sleep 0.0001
    l
  end
```

The notion is, that use case commonly is CLI, and you commonly have way to disable progress bar(s) and you have what ever enumerables you have, which sometimes you want to use with progress bar sometimes you don't want to.

I may miss something obvious, but it seems this call type would be very desirable requiring no dirty deeds.


## Current Problem
I'm finding myself using the same options over and over again:
PB_OPT = { length: 80, format: '%a |%B| %p%% %c/%C' }

## Potential Solution or New Behavior
It would be nice if it was possible to define default options.

### Mockups
Something like:
```ruby
ProgressBar.defaults = { length: 80, format: '%a |%B| %p%% %c/%C' }
```