Currently Get-UserProfileSize iterates one by one through each computer and doesn't return output until the last one is complete, when it outputs the result array in its entirety. I suggest skipping the array altogether and just letting each PSObject hit the pipeline as it completes.

Also, the logic for listing profiles is performed in a separate command from querying the profile sizes. If that were moved into the script block, you could drop the foreach-object and allow it to just use Invoke-Command against $ComputerName, allowing it to use Invoke-Command built-in asynchronous query ability.
Adding a cimsession parameter will enable users to provide alternate credentials, and make the module behave more consistently. Also, there is a ticket for making the functions work without WinRM. This would let you use DCOM in your session options, so you could close that ticket as well
This will allow a user to work with profiles on remote systems.

TODO: Expand this issue more. Just getting it in there so it's not forgotten.
steviecoaster [10:30]
I need to add an alias I'm Remove-UserProfile so the two compliment each other

As per @steviecoaster creating this issue so he doesn't forget.
This is a terrible issue. I will flesh it out tonight.
```
Get-CimInstance : WinRM cannot complete the operation. Verify that the specified computer name is valid, that the computer is accessible over the network, and that a firewall exception for the WinRM
service is enabled and allows access from this computer. By default, the WinRM firewall exception for public profiles limits access to remote computers within the same local subnet.
At line:51 char:17
+ ...             Get-CimInstance -ClassName 'win32_userprofile' -ComputerN ...
+                 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ConnectionError: (:) [Get-CimInstance], CimException
    + FullyQualifiedErrorId : HRESULT 0x80338126,Microsoft.Management.Infrastructure.CimCmdlets.GetCimInstanceCommand
    + PSComputerName        :
```
Dear Stevie,
The Write-Warning message to remember to close the session is not printed on the console.
In addition if you specify the prefix the info are printed out as List if is not specified as table.

Cheers
G4rp
Remove installed windows updates from several computers with the ability to do it remotely.  It would also be great to remove patch Tuesday updates sorted by release date.

Cmdlet and parameter should be something similar to Remove-InstalledUpdates -ComputerName xyz -Id kb123456
I wrote something that crunches blue screen dmp files and spits out what caused it. It has a dependancy on the windows sdk, but I've found it to be handy. Do you want it in here?
I wanted to share this with you guys. if you have a lot of switch ports to configure, this can help generate the configuration for each port. Written in powershell and works great for switch refreshes.

https://github.com/bradgillap/Switch-Port-Generator
Function will retrieve AD user's properties and group memberships. It will then export and log the results. Could be used when changing permissions on an account or before disabling it.  



                function Get-ADUserProperties {

                param (
                [Parameter(mandatory = $True, ValueFromPipeline = $true)]
                [ValidateNotNullOrEmpty()]
                [string]$Username
                )

                Log file location ex:
                $Logfilename = 'c:\reports\temp' + $Username + ($TimeStamp = Get-Date -Format '_yyyy_MM_dd_HH-mm-ss') + '.txt'

                $User = Get-ADUser -LDAPFilter "(sAMAccountName=$Username)"
                if($User -ne $Null){ Write-Host "Processing"
                $uprop1 = Get-ADUser $Username -Properties * -ErrorAction Stop
                $managerDetails = Get-ADUser (Get-ADUser $Username -properties manager).manager -properties displayName
                $uprop2 = Get-ADPrincipalGroupMembership -Identity $Username | Get-ADGroup -Properties * | select name, description

		                $prop1 = [ordered]@{
			                "Name" = $uprop1.name
                                "User ID" = $uprop1.samaccountname
			                "Email Address" = $uprop1.emailaddress
			                "Title" = $uprop1.title
			                "Description" = $uprop1.Description
			                "Department" = $uprop1.Department
                            "Manager" = $managerDetails.Name
                            "Office Phone" = $uprop1.officephone
                            "Mobile" = $uprop1.mobile
                            "Account Created" = $uprop1.Created
                            "Password Last Changed" = $uprop1.PasswordLastSet
                            # End of $prop1
		                }
			

                        $4userinfo += $prop1 | FT -AutoSize | Out-String
                        $4userinfo += $uprop2 | FT -AutoSize | Out-String
                        $4userinfo |  Out-File -FilePath $Logfilename
                        Write-host "Completed"

                }
                else {Write-Host "User not found: $Username" -ForegroundColor Red  }
                }