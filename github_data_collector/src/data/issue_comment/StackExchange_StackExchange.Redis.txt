Hi,

I was using Azure Redis cache for bot service. I was facing the issue when set or get the data.


**It was not possible to connect to the redis server(s). UnableToConnect on AzureRedisCacheConnectionString:6379/Interactive, Initializing/NotStarted, last: NONE, origin: BeginConnectAsync, outstanding: 0, last-read: 0s ago, last-write: 0s ago, keep-alive: 60s, state: Connecting, mgr: 10 of 10 available, last-heartbeat: never, global: 1s ago, v: 2.0.601.3402**


Thanks.
Hi,
I'm using .Net Core app 2.2 with explicit reference to Netstandard 2.0.3 library.

For some reason there is no IOCP and WORKER stats in log. 
From documentation the log part should be present 
> IOCP and WORKER threads will not be shown on .NET Core if using netstandard < 2.0

I'm using Netstandard 2.0.3 which is latest available. Microsoft.Extensions.Caching.Redis SDK version in use is 2.2.0 
And here is log that i get

ExceptionStackExchange.Redis.RedisTimeoutException: Timeout performing EVAL, inst: 14, queue: 42, qu: 0, qs: 42, qc: 0, wr: 0, wq: 0, in: 11373, ar: 0, clientName: ActivityService, serverEndpoint: Unspecified/cache.amazonaws.com:6379, keyHashSlot: 15753 (Please take a look at this article for some common client-side issues that can cause timeouts: http://stackexchange.github.io/StackExchange.Redis/Timeouts)

Can you advise me or point me in right direction
>  interface as follows

``` c#
		/// <summary>
		/// Execute an arbitrary command against the server; this is primarily intended for
		/// executing modules, but may also be used to provide access to new features that lack
		/// a direct API.
		/// </summary>
		/// <param name="command">The command to run.</param>
		/// <param name="args">The arguments to pass for the command.</param>
		/// <remarks>This API should be considered an advanced feature; inappropriate use can be harmful</remarks>
		/// <returns>A dynamic representation of the command's result</returns>
		Task<RedisResult> ExecuteAsync(string command, params object[] args);
```

> my code as follows

``` c#
    public class RedisHelper
    {
        private ConnectionMultiplexer redis { get; set; }
        private IDatabase db { get; set; }
        public RedisHelper(string redisConntectionString)
        {
            redis = RedisConnectionHelpr.GetInstance(redisConntectionString);
            db = redis.GetDatabase();
        }

        public async Task SetRightValuesBatchAsync(string key)
        {
            try
            {
                var batch = db.CreateBatch();
                await batch.ExecuteAsync("rpush", key, "dataxxx");
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }
}
```
How to realize the bloon filterï¼Ÿ
From https://github.com/tporadowski/redis - let's give it a test run spin just to check things out :)
The following code don't create the stream (if not exist).

`
await _db.StreamCreateConsumerGroupAsync("events_stream", "events_consumer_group", StreamPosition.NewMessages);
`
The documentation suggest that it should (see  [Consumer Groups section](https://stackexchange.github.io/StackExchange.Redis/Streams.html))

> The following creates a consumer group and tells Redis from which position within the stream to begin reading. If you call the method prior to first creating the stream, the StreamCreateConsumerGroup method will create the stream for you by default. You can override this default behavior by passing false for the createStream optional parameter.

It don't it create the stream, and the API don't have overload which get "createStream optional parameter"
Add the following overloads to StreamAddAsync
for better usability.

```
Task<RedisValue> StreamAddAsync(RedisKey key, params NameValueEntry[] streamPairs);
Task<RedisValue> StreamAddAsync(RedisKey key, bool useApproximateMaxLength 
 params NameValueEntry[] streamPairs);
```
It will enable a cleaner API call

```
RedisValue value = await StreamAddAsync("A", new NameValueEntry("A", 1), new NameValueEntry("B", 2));
```
Rather

```
RedisValue value = await StreamAddAsync("A", new [] {new NameValueEntry("A", 1), new NameValueEntry("B", 2)});
```


I'm trying to get values via SortedSetRangeByValue, but not behave as expected, what is the `orderBy` logic?


``` csharp
var redis = ConnectionMultiplexer.Connect("127.0.0.1");
var db = redis.GetDatabase();

var zSetKey = "testZSet";

db.SortedSetAdd(zSetKey, Enumerable.Range(1, 1000).Select(i => new SortedSetEntry(i, 0)).ToArray());

var values = db.SortedSetRangeByValue(zSetKey, min: 90, max: int.MaxValue, take: 5L, order: Order.Ascending, exclude: Exclude.Start);
 
```

the values I got always an empty array

![image](https://user-images.githubusercontent.com/7604648/71432331-dfc03900-2713-11ea-9997-2c81b8e1cc77.png)

Hi, 
I'm using dotnet core 2.2 on Linux using docker with StackExchange.redis 2.0.601 and getting time out exception for a burst of work.

```
StackExchange.Redis.RedisTimeoutException: 
Timeout awaiting response (outbound=1KiB, inbound=0KiB, 20873ms elapsed, timeout is 5000ms),
command=EXISTS,
next: EXISTS BurnedGameTickets~tYNbv7,
inst: 0,
qu: 0,
qs: 5,
aw: False,
rs: ReadAsync,
ws: Idle,
in: 20,
in-pipe: 0,
out-pipe: 0,
serverEndpoint: Unspecified/cacheRedis:6380,
mgr: 9 of 10 available,
clientName: game-server,
IOCP: (Busy=0,Free=1000,Min=2,Max=1000),
WORKER: (Busy=6,Free=32761,Min=2,Max=32767),
```
Using `ThreadPool.SetMinThreads` will fix the issue, but should I use it? 
As I'm using version 2.* I think it's a bug.

> https://stackexchange.github.io/StackExchange.Redis/Timeouts
I am trying to write records from a dictionary with around 5000 records to a Redis cache. But sometimes I get the below exception, I have no clue why I am getting this error, I have checked on the internet but could not find any solution or root cause of this issue.
```

using (ConnectionMultiplexer redis = ConnectionMultiplexer.Connect(_configuration.GetConnectionString("redis_server")))
            {
                IDatabase db = redis.GetDatabase();


                foreach (KeyValuePair<string, string> keyValuePair in _dictAllData)
                {
                    db.StringSet(keyValuePair.Key, keyValuePair.Value, TimeSpan.FromMinutes(30));
                }

        }
```

**Exception:**

> No connection is available to service this operation: SETEX 747712; IOCP: (Busy=0,Free=1000,Min=4,Max=1000), WORKER: (Busy=0,Free=32767,Min=4,Max=32767), Local-CPU: n/a

**StackExchange.Redis Version: 2.0.601**

