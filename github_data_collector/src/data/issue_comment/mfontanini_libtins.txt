Hi there,

I am currently using a Raspberry Pi 3 mod A+ with a Alfa AWUS036ACS 802.11ac AC600 Dual Band WiFi USB Adapter. 

I am currently capturing approximately 10,000 packets a second however feel this number should be significantly higher.

Just wondering if there is any suggestions to boost the packets sniffed? 

Thanks,
James
Hi,

First, thanks for the amazing work on this library, I was able to outperform my old C# tracing tool by 200%!

Secondly, I was wondering if you could give me some advice here.
I started with this (Windows 10, VS2019):

`
sniffer.sniff_loop([&](Tins::Packet& packet) {
this->process_packet(packet);
return true;
});
`
This worked for me, but when using FileSniffer, timestamps were not the ones from the file, but from the moment the file was read (and I really really need those timestamps...). 

I saw in sniffer.h a check is present to prevent using `invoke_loop_cb` when you compile in VS (3478c7b09a746b5e3fbcbbf2e84e606a7291e2a5), which would force me to write a handler for PDU's instead of Packets (which I can't as I need the timestamps). I'm wondering if this could have something to do with it...?

I circumvented my original issue by making two changes:
- Removing the VS check
- Changing the definition of `make_sniffer_handler` to accept a callback with Packet& instead of PDU& (One could probably make it generic for both...), as I preferred this over the lambda function.

Would there be a better way to implement this (maybe without my changes)? Any help is welcome!

Thanks

The MS C++ compiler doesn't seem to understand that a small constant
like 0, although strictly being an integer, will fit perfectly fine
into an 8 bit type so add some safe casts to silence that warning.
If libpcap support has been disabled (LIBTINS_ENABLE_PCAP=OFF)
then the headers requiring that library will not be installed,
but they will still be included from the main tins.h convenience
header.

This fixes that by sorrounding the includes with an #ifdef the
same way it has been done for DOT11 support.
Windows 10, MSVS 2019
I have started up with this code:
```
#ifndef TINS_STATIC
#define TINS_STATIC
#endif  // !TINS_STATIC

#include <tins/tins.h>

#include <iostream>

int main() {
  Tins::Sniffer sniffer("eth0");
  Tins::PDU *pdu = sniffer.next_packet();
  Tins::DNS dns = pdu->rfind_pdu<Tins::RawPDU>().to<Tins::DNS>();
  for (const auto &query : dns.queries()) {
    std::cout << query.dname() << std::endl;
  }
  delete pdu;
}
```
and tried to build it x86.
Result was a bunch of LNK2019 errors, at the end of which there was this: 
"libtins-master\build\lib\Debug\tins.lib : warning LNK4272: library machine type 'x64' conflicts with target machine type 'x86'".
Ok, tried to build it x64, result:
"WpdPack\Include\pcap\pcap.h(47,12): fatal error C1083: Cannot open include file: 'sys/time.h': No such file or directory".
In this file:
```
#if defined(WIN32)
  #include <pcap-stdinc.h>
#elif defined(MSDOS)
  #include <sys/types.h>
  #include <sys/socket.h>  /* u_int, u_char etc. */
#else /* UN*X */
  #include <sys/types.h>
  #include <sys/time.h>
#endif /* WIN32/MSDOS/UN*X */
```
OOOOOK. (my code):
```
#ifndef WIN32
#define WIN32
#endif  // !WIN32
```
Builded again and finally successfully. But when I run it I got this:
![image](https://user-images.githubusercontent.com/39273451/70393064-7643e900-19f7-11ea-8954-c77bd8d897c5.png)
I have tried installing Winpcap, that places needed dll in System32 folder, but then there are memory access violation in this code (sniffer.cpp):
```
if (pcap_activate(get_pcap_handle()) < 0) {
        throw pcap_error(pcap_geterr(get_pcap_handle()));
}
```
Well, am I doing anything wrong?
https://groups.google.com/forum/#!topic/libtins/yCX9rvbhjuc

Hello,

Is there a way to accomplish this with libints?
Basically, I don't see a way to access the bar control field of the block ack frame (which is 2 bytes) by using the `bar_contol()` getter which is only `small_uint<4>`.

If I wanted to get to this field and read the compressed bit (bit 2) and the TID (high 4 bytes) do I need to parse the raw data myself?

Please, see image. I'm having a hard time getting at this field.
![block_ack](https://user-images.githubusercontent.com/1139125/70389293-470c8800-19b5-11ea-8288-662925954cd1.png)

Regards and thanks in advance!
I've read the documentation and some classes on doxygen and there's no way to either send a packet through a file descriptor as if I were writing directly to `/dev/net/tun` or there's no option to dump the packet into a simple `uint8_t*` buffer so I can do the write manually. I also found no way of creating my own PacketSender that writes to an interface. The closest I found was PDU's serialize but it is protected so I don't know exactly what it's for.

Am I rigth?

I need this because I'm creating a way to send an IP packet through OpenVPN and I need to write to a virtual file from which it reads and sends my packet
I tried and got 

```
-- Not building examples as pcap support is disabled
-- googletest git submodule is absent. Run `git submodule init && git submodule update` to get it
CMake Error: The following variables are used in this project, but they are set to NOTFOUND.
Please set them or make sure they are set and tested correctly in the CMake files:
PCAP_INCLUDE_DIR
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
   used as include directory in directory /home/user/libopenvpn/libtins/src
PCAP_LIBRARY
    linked by target "tins" in directory /home/user/libopenvpn/libtins/src

-- Configuring incomplete, errors occurred!

```

so it looks like it can't be disabled. However there is the option to disable it
-fpermissive is passed to go through

```
/home/mangix/devstuff/openwrt/staging_dir/toolchain-mips_24kc_gcc-9.2.0_glibc/bin/g++-uc: 22: [: Illegal number: s
/home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/dns.cpp: In static member function 'static std::string Tins::DNS::encode_domain_name(const string&)':
/home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/dns.cpp:288:63: warning: invalid conversion from 'std::vector<char, std::allocator<char> >::const_iterator' {aka 'const char*'} to 'std::basic_string<char>::size_type' {aka 'unsigned int'} [-fpermissive]
  288 |             output.append(dn.begin() + last_index, dn.begin() + index);
      |                                                    ~~~~~~~~~~~^~~~~~~
      |                                                               |
      |                                                               std::vector<char, std::allocator<char> >::const_iterator {aka const char*}
In file included from /home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/../include/tins/dns.h:36,
                 from /home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/dns.cpp:32:
/home/mangix/devstuff/openwrt/staging_dir/target-mips_24kc_glibc/usr/include/uClibc++/string:171:58: note:   initializing argument 2 of 'std::basic_string<Ch, Tr, A>& std::basic_string<Ch, Tr, A>::append(const Ch*, std::basic_string<Ch, Tr, A>::size_type) [with Ch = char; Tr = std::char_traits<char>; A = std::allocator<char>; std::basic_string<Ch, Tr, A>::size_type = unsigned int]'
  171 |  _UCXXEXPORT basic_string& append(const Ch* s, size_type n){
      |                                                ~~~~~~~~~~^
/home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/dns.cpp:292:54: warning: invalid conversion from 'std::vector<char, std::allocator<char> >::const_iterator' {aka 'const char*'} to 'std::basic_string<char>::size_type' {aka 'unsigned int'} [-fpermissive]
  292 |         output.append(dn.begin() + last_index, dn.end());
      |                                                ~~~~~~^~
      |                                                      |
      |                                                      std::vector<char, std::allocator<char> >::const_iterator {aka const char*}
In file included from /home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/../include/tins/dns.h:36,
                 from /home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/dns.cpp:32:
/home/mangix/devstuff/openwrt/staging_dir/target-mips_24kc_glibc/usr/include/uClibc++/string:171:58: note:   initializing argument 2 of 'std::basic_string<Ch, Tr, A>& std::basic_string<Ch, Tr, A>::append(const Ch*, std::basic_string<Ch, Tr, A>::size_type) [with Ch = char; Tr = std::char_traits<char>; A = std::allocator<char>; std::basic_string<Ch, Tr, A>::size_type = unsigned int]'
  171 |  _UCXXEXPORT basic_string& append(const Ch* s, size_type n){
```

There's also some missing iterator:

```
/home/mangix/devstuff/openwrt/build_dir/target-mips_24kc_glibc/libtins-4.2/src/utils/routing_utils.cpp:340:18: error: no match for 'operator>>' (operand types are 'std::ifstream' {aka 'std::basic_ifstream<char>'} and 'std::string' {aka 'std::basic_string<char>'})
  340 |     while (input >> entry.interface >> destination >> gw) {
      |            ~~~~~ ^~ ~~~~~~~~~~~~~~~
      |            |              |
      |            |              std::string {aka std::basic_string<char>}
      |            std::ifstream {aka std::basic_ifstream<char>}
```
Fix #373 