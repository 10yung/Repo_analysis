I have been trying to use TFdatasets to load batches from a collection of 133 .csv into a keras GRU classification model, but have met several obstacles.  Code, error messages, and config details from my best attempt follows. The code is adapted (poorly) from several examples on the rstudio tensorflow page (e.g., "R interface to TensorFlow Dataset API"). 
Data summary: The bulk of the data are time-samples from 57 electrodes. The target/DV are classifications in the form of an integer column (Emo). In this attempt, a function uses make_csv_dataset() to import from a list of files, uses one hot encoding (4 levels) before ending with dataset_prepare(). The output shape looks reasonable x =(Batch, 57), y = (Batch, 4), but keras produces 
Error in py_call_impl(callable, dots$args, dots$keywords) :
KeyError (see below for full) for my first layer. I trying to get this code to cycle through a list of .csv, but I have selected only a small amount of data for this example.
Apparently I am missing something important, but I haven't been able to determine what I need to do. I have some R experience and worked with keras models, but this is my first tfdatasets attempt. I wouldn't ask unless I exhausted all my options, so I humbly thank you in advance for any suggestions.

CODE:
#################figure out how to use TFdatasets
#load 133 csv (each with +1000 time samples 57 electrodes)
#into a keras model for classification.

#install.packages("devtools")
#devtools::install_github(c("rstudio/reticulate"))
#library(reticulate)
#devtools::install_github(c("rstudio/tfdatasets"))
#devtools::install_github(c("rstudio/tensorflow"))
#devtools::install_github(c("rstudio/keras"))
#library("tensorflow")

library("tensorflow")
library("tfdatasets")
library("keras")
library("tidyverse")

rm(list=ls())
SAVE_Dir <- paste("F:/Peri_ERN/R/SubCat/Val40/OutModels", sep = "") 
EmoKey <- c("Val")
NumCatz <- 4 #Number of categories
NofTrainTime <- 128 #For a small size test
#NofValidTimes <- 1 #ignore for now
NofEpochs <- 1
BatchN <- 32
EmoDir <- paste("F:/Peri_ERN/R/SubCat/Val40/Part/", sep = "") #To get CSV
setwd(EmoDir)
filesTE <- list.files(path = paste(EmoDir), full.names = TRUE)

##Get the dataset, change Emo to a categorical variable, and output to keras
 EEG_Class <- function(filesTE) {
   Clz  <- make_csv_dataset(list(filesTE), batch_size = BatchN, 
      header = TRUE, 
      num_epochs = NofEpochs, 
      shuffle = FALSE,
      prefetch_buffer_size = BatchN, #Recommended value is the number of batches consumed per training step
      sloppy = FALSE,
      num_rows_for_inference = 100) %>%
    dataset_map( function(record) {
      record$Emo <- tf$one_hot(record$Emo, 4L)
      record
     })  %>% 
   dataset_prepare(x = -Emo, y = Emo, drop_remainder = TRUE, named_features = FALSE, named = TRUE) #%>% 
   Clz  %>% dataset_repeat() 
   } #end function EEG_Class
   #output_shapes(Clz)    #results in $x (32, 57), $y (32, 4) 
   #output_types(Clz)    #both <dtype: 'float32'>
   #Clz %>% reticulate::as_iterator() %>% reticulate::iter_next() %>% reticulate::py_to_r()
 
 ##########################model 
  #GRU2
 model <- NULL
 model <- keras_model_sequential()
 model %>%  
    layer_gru(units = 64, dropout = 0.25,
            recurrent_dropout = 0.25,
            return_sequences = TRUE,
            batch_size = BatchN,  
            reset_after = TRUE, 
            recurrent_activation = "sigmoid"  , 
            input_shape = list(NULL, 57)
    ) %>% #End GRU1
    layer_gru(units = 64, 
            dropout = 0.25,
            recurrent_dropout = 0.25,
            batch_size = BatchN,
            reset_after = TRUE, 
            recurrent_activation = "sigmoid"
    ) %>% #End GRU2
    layer_dense(NumCatz, activation = "softmax", batch_size = BatchN ) 

model %>% compile(
  optimizer = optimizer_adam(),
  metrics= 'accuracy',
  loss = list("categorical_crossentropy")
) #End compile
summary(model)

#######Run this model
history <- model %>%  fit(EEG_Class(filesTE),
      steps_per_epoch = NofTrainTime/BatchN,
    epochs = NofEpochs, #, #For this test
     verbose = 1,
   #callbacks = callbacks_list
)  #End run model


############################################################
##OUTPUT and ERROR MESSAGE
Train for 40 steps
 1/40 [..............................] - ETA: 2sError in py_call_impl(callable, dots$args, dots$keywords) : 
  KeyError: 'gru_input'

Detailed traceback: 
  File "C:\Users\Lauritz\Anaconda3\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 728, in fit
    use_multiprocessing=use_multiprocessing)
  File "C:\Users\Lauritz\Anaconda3\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 324, in fit
    total_epochs=epochs)
  File "C:\Users\Lauritz\Anaconda3\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 123, in run_one_epoch
    batch_outs = execution_function(iterator)
  File "C:\Users\Lauritz\Anaconda3\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training_v2_utils.py", line 86, in execution_function
    distributed_function(input_fn))
  File "C:\Users\Lauritz\Anaconda3\envs\r-reticulate\lib\site-packages\tensorflow_core\python\eager\def_function.py", line 457, in __call__
    result = self._call(*args, **kwds)
  File "C:\Users\Lauritz

#############################################################
CONFIG DETAILS
> tensorflow::tf_config()
TensorFlow v2.0.0 (C:\Users\Lauritz\ANACON~1\envs\R-RETI~1\lib\site-packages\tensorflow\__init__.p)
Python v3.6 (C:/Users/Lauritz/Anaconda3/envs/r-reticulate/python.exe)
> reticulate::py_config()
python:         C:/Users/Lauritz/Anaconda3/envs/r-reticulate/python.exe
libpython:      C:/Users/Lauritz/Anaconda3/envs/r-reticulate/python36.dll
pythonhome:     C:/Users/Lauritz/Anaconda3/envs/r-reticulate
version:        3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 14:00:49) [MSC v.1915 64 bit (AMD64)]
Architecture:   64bit
numpy:          C:/Users/Lauritz/Anaconda3/envs/r-reticulate/Lib/site-packages/numpy
numpy_version:  1.17.3
tensorflow:     C:\Users\Lauritz\ANACON~1\envs\R-RETI~1\lib\site-packages\tensorflow\__init__.p

python versions found: 
 C:/Users/Lauritz/Anaconda3/envs/r-reticulate/python.exe
 C:/Users/Lauritz/Anaconda3/python.exe
> version
               _                           
platform       x86_64-w64-mingw32          
arch           x86_64                      
os             mingw32                     
system         x86_64, mingw32             
status                                     
major          3                           
minor          6.2                         
year           2019                        
month          12                          
day            12                          
svn rev        77560                       
language       R                           
version.string R version 3.6.2 (2019-12-12)
nickname       Dark and Stormy Night       
> packageVersion("tensorflow")
[1] ‘2.0.0’
Hi! 

I am having problems in understanding what am I doing wrong. I have been working with tensorflow for a year without any problem (tf$placeholder - for example - works fine); this year I am trying to use Keras and I realised that there are problems with the tensorflow installation, in particular I receive the following errors: 

```
> py_config()
python:         C:\Users\tm1n18\AppData\Local\Continuum\Anaconda3\envs\r-tensorflow\python.exe
libpython:      C:/Users/tm1n18/AppData/Local/Continuum/Anaconda3/envs/r-tensorflow/python36.dll
pythonhome:     C:\Users\tm1n18\AppData\Local\CONTIN~1\ANACON~2\envs\R-TENS~1
version:        3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 14:00:49) [MSC v.1915 64 bit (AMD64)]
Architecture:   64bit
numpy:          C:\Users\tm1n18\AppData\Local\CONTIN~1\ANACON~2\envs\R-TENS~1\lib\site-packages\numpy
numpy_version:  1.17.3
keras:          C:\Users\tm1n18\AppData\Local\CONTIN~1\ANACON~2\envs\R-TENS~1\lib\site-packages\keras\__init__.p

python versions found: 
 C:\Users\tm1n18\AppData\Local\Continuum\Anaconda3\envs\r-tensorflow\python.exe
 C:\Users\tm1n18\AppData\Local\CONTIN~1\ANACON~2\python.exe
```

Is it possible that the system recognises more than one python version? I open python.exe and I try to run 

```
import tensorflow as tf 
import numpy as np 
```

and for both I receive an error, stating that they are not correctly installed. Then - going back to run - I also have these information: 

```
> reticulate::py_module_available(tensorflow)
[1] FALSE
> tensorflow::tf_config()
TensorFlow v1.10.0 (C:\Users\tm1n18\AppData\Local\CONTIN~1\ANACON~2\envs\R-TENS~1\lib\site-packages\keras\__init__.p)
Python v3.6 (C:\Users\tm1n18\AppData\Local\Continuum\Anaconda3\envs\r-tensorflow\python.exe)
```

Also in this case, does it mean that Tensorflow and Python are on different paths? 

Thank you for your time and help 


Tullio

















Code I ran:
```
library(keras)
library(tfdatasets)
boston_housing <- dataset_boston_housing()

c(train_data, train_labels) %<-% boston_housing$train
c(test_data, test_labels) %<-% boston_housing$test

paste0("Training entries: ", length(train_data), ", labels: ", length(train_labels))

train_data[1, ] # Display sample features, notice the different scales

library(dplyr)

column_names <- c('CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 
                  'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT')

train_df <- train_data %>% 
  as_tibble(.name_repair = "minimal") %>% 
  setNames(column_names) %>% 
  mutate(label = train_labels)

test_df <- test_data %>% 
  as_tibble(.name_repair = "minimal") %>% 
  setNames(column_names) %>% 
  mutate(label = test_labels)

train_labels[1:10] # Display first 10 entries

spec <- feature_spec(train_df, label ~ . ) %>% 
  step_numeric_column(all_numeric(), normalizer_fn = scaler_standard()) %>% 
  fit()

spec

layer <- layer_dense_features(
  feature_columns = dense_features(spec), 
  dtype = tf$float32
)
layer(train_df)

model %>% 
  compile(
    loss = "mse",
    optimizer = optimizer_rmsprop(),
    metrics = list("mean_absolute_error")
  )

build_model <- function() {
  input <- layer_input_from_dataset(train_df %>% select(-label))
  
  output <- input %>% 
    layer_dense_features(dense_features(spec)) %>% 
    layer_dense(units = 64, activation = "relu") %>%
    layer_dense(units = 64, activation = "relu") %>%
    layer_dense(units = 1) 
  
  model <- keras_model(input, output)
  
  model %>% 
    compile(
      loss = "mse",
      optimizer = optimizer_rmsprop(),
      metrics = list("mean_absolute_error")
    )
  
  model
}

# Display training progress by printing a single dot for each completed epoch.
print_dot_callback <- callback_lambda(
  on_epoch_end = function(epoch, logs) {
    if (epoch %% 80 == 0) cat("\n")
    cat(".")
  }
)    

model <- build_model()

history <- model %>% fit(
  x = train_df %>% select(-label),
  y = train_df$label,
  epochs = 500,
  validation_split = 0.2,
  verbose = 0,
  callbacks = list(print_dot_callback)
)

library(ggplot2)
```

Error Prompt:
```
2020-01-04 22:06:15.414305: I tensorflow/stream_executor/platform/default/dso_loader.cc:44] Successfully opened dynamic library cublas64_100.dll
2020-01-04 22:06:15.676967: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.677410: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.677688: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.679016: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.679407: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.679741: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.679995: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.680378: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.683303: E tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED
2020-01-04 22:06:15.683494: W tensorflow/stream_executor/stream.cc:1919] attempting to perform BLAS operation using StreamExecutor without BLAS support
2020-01-04 22:06:15.683826: W tensorflow/core/common_runtime/base_collective_executor.cc:216] BaseCollectiveExecutor::StartAbort Internal: Blas GEMM launch failed : a.shape=(32, 13), b.shape=(13, 64), m=32, n=64, k=13
	 [[{{node model/dense/MatMul}}]]

.Error in py_call_impl(callable, dots$args, dots$keywords) : 
  InternalError:  Blas GEMM launch failed : a.shape=(32, 13), b.shape=(13, 64), m=32, n=64, k=13
	 [[node model/dense/MatMul (defined at \framework\ops.py:1751) ]] [Op:__inference_distributed_function_7311]

Function call stack:
distributed_function


Detailed traceback: 
  File "C:\Users\jtseng\AppData\Local\r-miniconda\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training.py", line 728, in fit
    use_multiprocessing=use_multiprocessing)
  File "C:\Users\jtseng\AppData\Local\r-miniconda\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 324, in fit
    total_epochs=epochs)
  File "C:\Users\jtseng\AppData\Local\r-miniconda\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\training_v2.py", line 123, in run_one_epoch
    batch_outs = execution_function(iterator)
  File "C:\Users\jtseng\AppData\Local\r-miniconda\envs\r-reticulate\lib\site-packages\tensorflow_core\python\keras\engine\traini
```

My Config details

```
> tensorflow::tf_config()
TensorFlow v2.0.0 ()
Python v3.6 (C:/Users/jtseng/AppData/Local/r-miniconda/envs/r-reticulate/python.exe)

> reticulate::py_config()
python:         C:/Users/jtseng/AppData/Local/r-miniconda/envs/r-reticulate/python.exe
libpython:      C:/Users/jtseng/AppData/Local/r-miniconda/envs/r-reticulate/python36.dll
pythonhome:     C:/Users/jtseng/AppData/Local/r-miniconda/envs/r-reticulate
version:        3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 14:00:49) [MSC v.1915 64 bit (AMD64)]
Architecture:   64bit
numpy:          C:/Users/jtseng/AppData/Local/r-miniconda/envs/r-reticulate/Lib/site-packages/numpy
numpy_version:  1.17.4

> version
               _                           
platform       x86_64-w64-mingw32          
arch           x86_64                      
os             mingw32                     
system         x86_64, mingw32             
status                                     
major          3                           
minor          6.1                         
year           2019                        
month          07                          
day            05                          
svn rev        76782                       
language       R                           
version.string R version 3.6.1 (2019-07-05)
nickname       Action of the Toes 
```
I know this is a known issue (https://github.com/tensorflow/tensorflow/issues/7072) where the solution is to run code below
```
import tensorflow as tf
from keras.backend.tensorflow_backend import set_session
config = tf.ConfigProto()
config.gpu_options.allow_growth = True  # dynamically grow the memory used on the GPU
config.log_device_placement = True  # to log device placement (on which device the operation ran)
                                    # (nothing gets printed in Jupyter, only if you run it standalone)
sess = tf.Session(config=config)
set_session(sess)  # set this TensorFlow session as the default session for Keras
```

But I am using Rstudio as opposed to Python.

What do I do? This issue has been bugging me, i've reinstalled my Nvidia installation files (successfully 5 times), reinstalled my R base, and Rstudio 5 times... it eventually reverts back into the issue above. Need your help to resolve this at your soonest convenience....

similarly https://github.com/rstudio/tensorflow/issues/330

Hardware - Quadro M2200 - NVIDIA
Installed Drivers and Prerequisite Applications
- 440.97 - Quadro desktop-notebook win10 64bit
- cuda_10.0.130_411.31_win10.exe
- cudnn-10.0-windows10-x64-v7.6.5.32.zip

thank you,
James



    > tensorboard(log_dir)

results in an error: 

Traceback (most recent call last):
  File "/home/james/.virtualenvs/r-reticulate/bin/tensorboard", line 10, in <module>
    sys.exit(run_main())
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/tensorboard/main.py", line 59, in run_main
    default.get_plugins() + default.get_dynamic_plugins(),
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/tensorboard/default.py", line 110, in get_dynamic_plugins
    for entry_point in pkg_resources.iter_entry_points('tensorboard_plugins')
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/tensorboard/default.py", line 110, in <listcomp>
    for entry_point in pkg_resources.iter_entry_points('tensorboard_plugins')
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2442, in load
    self.require(*args, **kwargs)
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/pkg_resources/__init__.py", line 2465, in require
    items = working_set.resolve(reqs, env, installer, extras=self.extras)
  File "/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages/pkg_resources/__init__.py", line 791, in resolve
    raise VersionConflict(dist, req).with_context(dependent_req)
pkg_resources.VersionConflict: (grpcio 1.23.0 (/home/james/.virtualenvs/r-reticulate/lib/python3.6/site-packages), Requirement.parse('grpcio>=1.24.3'))
Error in if (tensorboard_version() < "2.0") { : 
  argument is of length zero
In addition: Warning message:
In system("tensorboard --version_tb", intern = TRUE) :
  running command 'tensorboard --version_tb' had status 1


> sessionInfo()
R version 3.6.1 (2019-07-05)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.2 LTS

Matrix products: default
BLAS:   /usr/lib/x86_64-linux-gnu/openblas/libblas.so.3
LAPACK: /usr/lib/x86_64-linux-gnu/libopenblasp-r0.2.20.so

locale:
 [1] LC_CTYPE=en_CA.UTF-8       LC_NUMERIC=C               LC_TIME=en_CA.UTF-8        LC_COLLATE=en_CA.UTF-8    
 [5] LC_MONETARY=en_CA.UTF-8    LC_MESSAGES=en_CA.UTF-8    LC_PAPER=en_CA.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C             LC_MEASUREMENT=en_CA.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] tensorflow_2.0.0  reticulate_1.14   here_0.1          tictoc_1.0        purrr_0.3.3       data.table_1.12.6
 [7] caret_6.0-84      ggplot2_3.2.1     lattice_0.20-38   keras_2.2.5.0     rlang_0.4.2       magrittr_1.5     
[13] assertthat_0.2.1  digest_0.6.22    

loaded via a namespace (and not attached):
 [1] tidyselect_0.2.5   reshape2_1.4.3     splines_3.6.1      colorspace_1.4-1   generics_0.0.2     stats4_3.6.1      
 [7] base64enc_0.1-3    survival_2.44-1.1  prodlim_2019.11.13 ModelMetrics_1.2.2 pillar_1.4.2       glue_1.3.1        
[13] withr_2.1.2        rappdirs_0.3.1     foreach_1.4.7      plyr_1.8.4         lava_1.6.6         stringr_1.4.0     
[19] timeDate_3043.102  munsell_0.5.0      gtable_0.3.0       recipes_0.1.7      codetools_0.2-16   tfruns_1.4        
[25] class_7.3-15       Rcpp_1.0.3         backports_1.1.5    scales_1.0.0       ipred_0.9-9        jsonlite_1.6      
[31] stringi_1.4.3      dplyr_0.8.3        rprojroot_1.3-2    grid_3.6.1         tools_3.6.1        lazyeval_0.2.2    
[37] tibble_2.1.3       crayon_1.3.4       whisker_0.4        pkgconfig_2.0.3    zeallot_0.1.0      MASS_7.3-51.4     
[43] Matrix_1.2-17      lubridate_1.7.4    gower_0.2.1        rstudioapi_0.10    iterators_1.0.12   R6_2.4.1          
[49] rpart_4.1-15       nnet_7.3-12        nlme_3.1-141       compiler_3.6.1   

I am using tensorflow 2.0.0:

``` r
> packageVersion("tensorflow")
[1] ‘2.0.0’
```
Running code from `https://tensorflow.rstudio.com/guide/tfdatasets/feature_columns/`:
``` r
spec <- feature_spec(hearts, target ~ .) %>%
  step_numeric_column(
    all_numeric(), -cp, -restecg, -exang, -sex, -fbs,
    normalizer_fn = scaler_standard()
  ) %>%
  step_categorical_column_with_vocabulary_list(thal) %>%
  step_bucketized_column(age, boundaries = c(18, 25, 30, 35, 40, 45, 50, 55, 60, 65)) %>%
  step_indicator_column(thal) %>%
  step_embedding_column(thal, dimension = 2) %>%
  step_crossed_column(c(thal, bucketized_age), hash_bucket_size = 10) %>%
  step_indicator_column(crossed_thal_bucketized_age)

spec <- fit(spec)
```
Now define a simple keras model:

``` r
> input <- layer_input_from_dataset(hearts %>% select(-target))
> output <- input %>%
+   layer_dense_features(feature_columns = dense_features(spec))
```
Get scores:

``` r
> model <- keras_model(input, output)
> hearts_features <- model %>% predict(hearts %>% select(-target))
> dim(hearts_features)
[1] 303  35
```
I look at the dense features defined in `spec` and I see that the second feature listed below is `trestbps`:
``` r
> dense_features(spec)
$age
NumericColumn(key='age', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function make_python_function.<locals>.python_function at 0x7f4032a56400>)

$trestbps
NumericColumn(key='trestbps', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function make_python_function.<locals>.python_function at 0x7f4032d75a60>)

$chol
NumericColumn(key='chol', shape=(1,), default_value=None, dtype=tf.float32, normalizer_fn=<function make_python_function.<locals>.python_function at 0x7f4032d751e0>)
....
```
I would expect the second column on `hearts_features` to be standardized `trestbps` but it is not:

``` r
> dim(hearts_features)
[1] 303  35
> summary(hearts_features[, 2])
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
      1       1       1       1       1       1
> summary(hearts$trestbps)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
   94.0   120.0   130.0   131.8   140.0   200.0
```
The number of columns on `hearts_features` is correct (35) but the order seems inconsistent with `spec`. I guess the order of the columns on `hearts_features` is determined by how tensor elements output by `layer_dense_features` are ordered. So, is there a way to tell what the order is?

Hi! I am trying to write feedforward networks in the sequential API, but cannot reproduce the example [here](https://tensorflow.rstudio.com/tutorials/advanced/). Specifically, when converting the dataset using the following lines:
```
train_ds <- mnist$train %>% 
  tensor_slices_dataset() %>%
  dataset_take(20000) %>% 
  dataset_map(~modify_at(.x, "x", tf$cast, dtype = tf$float32)) %>% 
  dataset_map(~modify_at(.x, "y", tf$cast, dtype = tf$int64)) %>% 
  dataset_shuffle(10000) %>% 
  dataset_batch(32)
```
R prompts the following error message:
```
Error in py_call_impl(callable, dots$args, dots$keywords) :
  Evaluation error: Unable to convert R object to Python type.
```
It seems still possible to run the example by taking out the `cast()` lines, because tf automatically coerces them into the proper format. However, I cannot achieve that with my own feedforward neural network. In short, I want to understand the format and dimension of data needed to run the sequential API and how to get them. Thanks!
Looks like the valid range is 0-3, not 0-1, see: https://github.com/tensorflow/tensorflow/blob/f15a1f88710ccda4a12bea9c945f4f44f4f102e3/tensorflow/core/platform/default/logging.h#L36-L39

1) Tensorflow wont install - although it is running; I loaded it sometime back so I think my setup has changed. 

   i) it was not running initially and trying a certain number of combinations regarding the setting of environmental variables it started running. But this is a problem as now Tensorboard is not running.
  ii) firstly my setup (Windows 10) 

         a) R Tensorflow version : 2.0.0
         b) tfestimators version 1.9.1
         c) keras version 2.2.5.0 ( I intend to run keras eventually ) 
         e) Python 3.6
         d) environmental Variables :
                             Conda (C:\Users\gbort\Anaconda3\Scripts)
                             Python  (C:\Users\gbort\Anaconda3\envs\r-tensorflow)
          Question: Do I have to have another tensorflow or tensorboard env variables or does python 
           bind to these .. This is where my confusion lies 
          There is a python folder in the R library folder under reticulate 
          C:\Users\gbort\Documents\R\win-library\3.6\reticulate\python

THE PROBLEMS 

1) I want to re-install the tensorflow - conda config

1)  `install_tensorflow(method="conda")`

   Error: **Unable to create process using 'C:\Users\gbort\ANACON~1\python.exe C:\Users\gbort\ANACON~1\Scripts\conda-script.py "create" "--yes" "--name" "r-reticulate" "python=3.6"'
Error: Error 101 occurred creating conda environment r-reticulate**



Tensorboard Error , see below for the  code and errors 



2) ```{r   Creating a single step TensorBoard }

    # Set up your session
    EmployeeSession <- tf$Session()
    
    # Add your constants
    female <- tf$constant(150, name = "FemaleEmployees")
    male <- tf$constant(135, name = "MaleEmployees")
    total <- tf$add(female, male)
    print(EmployeeSession$run(total))
    
    # Write to file
    towrite <- tf$summary$FileWriter('./graphs', EmployeeSession$graph)
    
    # Open Tensorboard
    tensorboard(log_dir = './graphs')

```

Error: **invalid version specification ‘Traceback (most recent call last):’, ‘ File "C:\Users\gbort\ANACON~1\envs\R-TENS~1\Scripts\tensorboard-script.py", line 10, in <module>’, ‘ sys.exit(run_main())’, ‘ File "C:\Users\gbort\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\main.py", line 51, in run_main’, ‘ server.configure(sys.argv[1:])’, ‘ File "C:\Users\gbort\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\program.py", line 143, in configure’, ‘ loader.fix_flags(flags)’, ‘ File "C:\Users\gbort\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorboard\plugins\core\core_plugin.py", line 405, in fix_flags’, ‘ raise ValueError('A logdir or db must be specified. '’, ‘ValueError: A logdir or db must be specified. For example `tensorboard --logdir mylogdir` or `tensorboard --db sqlite:~/.tensorboard.db`. Run `tensorboard --helpfull` for details and examples.’**

Dont understand the error ,

Many Thanks


By ther way when I run 

    tf_config()

the response is:

**TensorFlow v1.10.0 (C:\Users\gbort\ANACON~1\envs\R-TENS~1\lib\site-packages\tensorflow\__init__.p) Python v3.6 (C:\Users\gbort\ANACON~1\envs\R-TENS~1\python.exe)**

history <- model %>% fit(trainx,y_train,epochs=50,batch_size=5,validation_split=0.2)
2019-11-13 18:03:25.393757: W tensorflow/core/framework/op_kernel.cc:1599] OP_REQUIRES failed at cast_op.cc:123 : Unimplemented: Cast string to float is not supported
2019-11-13 18:03:25.396018: E tensorflow/core/common_runtime/executor.cc:642] Executor failed to create kernel. Unimplemented: Cast string to float is not supported
	 [[{{node Cast}}]]


 reticulate::py_config()
python:         C:\conda\envs\r-reticulate\python.exe
libpython:      C:/conda/envs/r-reticulate/python36.dll
pythonhome:     C:\conda\envs\R-RETI~1
version:        3.6.9 |Anaconda, Inc.| (default, Jul 30 2019, 14:00:49) [MSC v.1915 64 bit (AMD64)]
Architecture:   64bit
numpy:          C:\conda\envs\R-RETI~1\lib\site-packages\numpy
numpy_version:  1.17.4
tensorflow:     C:\conda\envs\R-RETI~1\lib\site-packages\tensorflow\__init__.p

python versions found: 
 C:\conda\envs\r-reticulate\python.exe
 C:\Users\somy\AppData\Local\Programs\Python\Python38\python.exe
 C:\conda\python.exe
 C:\Users\somy\AppData\Local\Programs\Python\Python38\\python.exe


tensorflow::tf_config()
TensorFlow v2.0.0 (C:\conda\envs\R-RETI~1\lib\site-packages\tensorflow\__init__.p)
Python v3.6 (C:\conda\envs\r-reticulate\python.exe)

