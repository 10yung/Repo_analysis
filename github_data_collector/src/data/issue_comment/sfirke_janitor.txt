Changed the method for selecting variables in the df to use `tidyselect`.  This allows negation, as well as `tidyselect helpers` like `starts_with()`, `ends_with()`, `contains()`, `matches()`, etc.

## Related Issue
#326 

## Example
`mtcars %>% get_dupes(weight = wt, starts_with("cy"))`

## Tests
Includes new tests:

```
test_that("tidyselect specification matches exact specification", {
  expect_equal(mtcars %>% get_dupes(contains("cy"), mpg), mtcars %>% get_dupes(cyl, mpg))
  expect_equal(mtcars %>% get_dupes(mpg), mtcars %>% get_dupes(-c(cyl, disp, hp, drat, wt, qsec, vs, am ,gear, carb)))
  expect_equal(suppressMessages(mtcars %>% select(cyl, wt) %>% get_dupes()), mtcars %>% select(cyl, wt) %>% get_dupes(everything()))
})
```

Also modifies test for specifying zero matching vars, as the old function for doing so was removed.  tidyselect now throws its own error if nothing matches for exact specification.  

NOTE however that using a tidyselect helper that doesn't catch anything will not produce any error or message.

It would be great if there were a function to calculate similarity rather than exact duplicates.  For instance, if I have several rows that are all duplicates except for different values in one column, it would return those rows and a similarity score.  Argument would allow for setting the similarity bounds.
`get_dupes()` allows you to specifiy columns positively, but you can't negate them (ie `get_dupes(mpg, -cty)` does not work, but `get_dupes(mpg, cty)` does.  

Often there's a single column that serves as an index or key that you know won't have a dupe, so it would be best to remove it rather than specifying all the vars except for it.
I got an automatic notification that changes to the tidyselect package, which will go to CRAN on Jan 23rd, cause a test to fail in janitor.  It appears to be a single test that looks for a specific error message, and I expect tidyselect changed the error message text, causing this to fail.  So, not a serious problem.

But, I think it requires CRAN submission.  And anyway it's been 9 months and we have implemented a bunch of nice updates to the package, so it's probably time to declare version 1.3.0 and send it anyway.

I can handle the CRAN submission process.  Anyone have anything they want to try to ship quickly into v 1.3.0?
Currently clean_names() converts `%` to `percent` and `#` to `number`. Would it be possible to have an option like translate = c("%" = "pc", "#" = "no", "/" = "per")?

In 2- and 3-way tables, would it be possible to add the ability to have percentages in all rows/columns _except_ in any row and/or column totals? The results for a 2-way table with only column totals and percentages by row would look like:

| Row Variable | Column Value 1 | Column Value 2 | Total |
| ------------- | ------------- | ------------- | ------------- |
| Row Value 1  | 25%  | 75% | 4 |
| Row Value 2  | 34%  |  66% | 6 |

Compared to the adorn_pct_formatting + adorn_ns approach, this seems cleaner to me, both visually and from a data manipulation perspective later on, if I wanted to use the tabyl in reporting or analysis.

This implements the changes suggested in #310 handling numeric, character, factor, Date, and POSIXt classes for both Date and POSIXct output.
Currently, `excel_numeric_to_date()` requires numeric input, but as is the case with many `janitor` functions, input is often messy.

I often get files that have various formats for date and sometimes I want to use generic code to clean them up.  With that, I'd like to have `excel_numeric_to_date()` be able to take in POSIXt or Date classes.  The return value would be an appropriate of either POSIXct (if `include_time=TRUE`) or Date (if `include_time=FALSE`).

The downside to this is that things other than numbers are no longer is actually "excel numeric" to date, but a more general to date function.

If interested, I'll make a PR.
I'd like to make some small adjustments regarding the readability of the `make_clean_names()` function. I think these might make it more easy to reason about current and further upcoming issues. The adjustments include:
* Some smaller adjustments in the beginning (explicit comments and removing of the pipe)
* Including also unused arguments of `to_any_case()` explicitly in the source code. This might make it easier to reason about issues, which might get solved by providing snakecase arguments to janitor users.
## Feature requests

I think it would be nice to print tabyl frames as tibbles! Especially since "janitor is a #tidyverse-oriented package."

It's a small thing, but consistency just makes the whole process smoother. In the example below, you can see how the tibble object makes it clear that `color` is an ordinal variable and removes non-significant digits from `percent`.

``` r
library(janitor) # '1.2.0'
library(ggplot2) # '3.2.1'
library(tibble)  # '2.1.3'

t <- tabyl(diamonds, color)
print(t)
#>  color     n    percent
#>      D  6775 0.12560252
#>      E  9797 0.18162773
#>      F  9542 0.17690026
#>      G 11292 0.20934372
#>      H  8304 0.15394883
#>      I  5422 0.10051910
#>      J  2808 0.05205784
as_tibble(t)
#> # A tibble: 7 x 3
#>   color     n percent
#>   <ord> <dbl>   <dbl>
#> 1 D      6775  0.126 
#> 2 E      9797  0.182 
#> 3 F      9542  0.177 
#> 4 G     11292  0.209 
#> 5 H      8304  0.154 
#> 6 I      5422  0.101 
#> 7 J      2808  0.0521
```

<sup>Created on 2019-09-30 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Edit: Use [`reprex::reprex()`](https://github.com/tidyverse/reprex/blob/master/R/reprex.R) for example