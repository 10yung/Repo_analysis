This PR has a lot to disentangle. And I will split it in at least two separate PRs, I just wanted to discuss the ideas first. You may have strong opinions about this, especially on the first part. Take it merely as a first suggestion...

#### Changes to ``toga.Tree``

- Document all arguments. This is especially useful for ``data``, explaining what is accepted as a data source.

- Provide two additional keyword arguments: ``sorting=False`` and ``sort_keys=None``. The implementation can query those values to see if it should support sorting and if yes, how to sort the columns. If given, ``sort_keys`` should be a list of sort keys as in Python's [sorted  function](https://docs.python.org/3/howto/sorting.html). If not given, it defaults to case-insensitive alphabetic sorting.

- For sorting to work, the data source should implement a method ``sort(accessor, reverse=False, key=None)`` which sorts all its children. It should be equivalent to Python's ``sorted`` function, with the addition of the ``accessor`` argument. I can attach an example with a reasonable default implementation if you like. 

#### Improvements to Cocoa implementation

- Switch from a cell-based to a view-based NSOutlineView. This does not change the appearance but speeds up drawing of the cells by orders of magnitude. Especially resizing columns is smooth now. Previously, painting each cell took around 1 - 10 ms. This improvement mainly comes from no longer creating a new view for every cell. Instead, I allow NSOutlineView to create and reuse existing views on demand.

- If ``multiple_select`` is ``True``, allow the user to select all rows by pressing CMD+A. 

- Default to alternating row colors.

- Implement sorting by column if ``sorting`` is ``True`` and if the data-source provides a ``sort`` method. This will actually change the order of elements in the data-source!

Edit:

- Change the cocoa implementations of ``insert`` to actual insert the new row instead of reloading all rows. This is much quicker and prevents the current selection from changing on insert.

- Add a more complex example with icons and sorting: A view of the file system.

@freakboy3742, I have been looking at the ImageView widget and wondering about implementing some styling such as alignment, frames, etc. I have seen in the src that you have already stubs of commented-out code for alignment.

This has raised a question for me: when should properties be determined by the given `style` and when should they be given as properties of the widget itself?

Some platforms show horizontal lines to visually separate content (as seen in many macOS preference panes).

On macOS, this is typically a NSBox with type NSBoxSeparator. On iOS, this could be a UIView with a 1 pixel hight. I have no idea about other platforms.

Would it make sense to ass this as a Widget?
Hi
I am a beginnner in a beeware and I am trying to make  a application with beeware by using the example given in the documentation. 
When I run the "briefcase dev" command the application shows up but exits as soon as I click on a button.

## Current Behavior
Traceback (most recent call last):
Traceback (most recent call last):
  File "c:\users\abco1\appdata\local\continuum\anaconda3\envs\test3\lib\site-packages\toga_winforms\app.py", line 133, in run_app
    self.loop.run_forever(self.app_context)
  File "c:\users\abco1\appdata\local\continuum\anaconda3\envs\test3\lib\site-packages\toga_winforms\libs\proactor.py", line 90, in run_forever
    WinForms.Application.Run(self.app_context)
  File "c:\users\abco1\appdata\local\continuum\anaconda3\envs\test3\lib\site-packages\toga_winforms\app.py", line 118, in app_exception_handler
    tb_end_pos = py_exc.StackTrace.index("\\n']   at Python")
ValueError: substring not found

## Environment

* Python Version 3.7.6

* Operating System and Version 
  - Windows 10


* Toga Version 0.3.0

* Toga Target 

  - android
 
How does one instantiate a button with an icon/image?  Or a clickable image?

The docs don't provide much info to me.  There is talk about late binding and factories, but I'm not sure if that is relevant and how to use that info :-/
I'm trying to trial a hierarchical menu system using `DetailedList` (but that's not directly relevant).

<img width="410" alt="toga-main-window-1" src="https://user-images.githubusercontent.com/472245/71641977-273c5b80-2cf8-11ea-9933-31ad28c01236.png">

When the `on_select` method is called, I change the main window content to another detailed list.  The list renders ok, but the iOS frame seems to disappear.

<img width="410" alt="toga-main-window-2" src="https://user-images.githubusercontent.com/472245/71641979-358a7780-2cf8-11ea-8b27-3cbf2edc48f5.png">

Am I changing the window content in the correct manner?  What is the correct way to change the main window content?

```python
import toga
from toga.style import Pack
from toga.style.pack import ( COLUMN, ROW, TOP, BOTTOM, CENTER )

#!============================================================================

class Test_App( toga.App ) :

    def startup( self ) :
        #! Create the main window
        self.main_window = toga.MainWindow( title=self.name )

        count = 20

        data_1 = [
                {   'icon'      : None,
                    'title'     : f'Title # {i}\nAAA # {i}',
                    'subtitle'  : "Test 1 2 3"
                    # 'subtitle'  : "Test 1 2 3\nTesting Testing 1 2 3"
                }
                for i in range( count )
                ]

        detailed_list_box_1 = toga.DetailedList(    id = 'detailed_lsit_box_1',
                                                    data = data_1,
                                                    on_select = self.detailed_list_box_1_on_select,
                                                    style = Pack( padding=10 )
                                                    )

        main_box_1 = toga.Box(  id = 'main_box_1',
                                style = Pack( direction=COLUMN, flex=0 ),
                                # children = [ box_1_scroller, box_2_scroller, box_3_scroller ],
                                children = [ detailed_list_box_1 ],
                                )

        data_2 = [
                {
                    'icon'      : None,
                    'title'     : f'Levle 2.{i}\nAAA # {i}',
                    'subtitle'  : "Pick me pick me !!"
                }
                for i in range( count )
                ]

        detailed_list_box_2 = toga.DetailedList(    id = 'detailed_lsit_box_2',
                                                    data = data_2,
                                                    style = Pack( padding=10 )
                                                    )

        main_box_2 = toga.Box(  id = 'main_box',
                                style = Pack( direction=COLUMN, flex=0 ),
                                children = [ detailed_list_box_2 ],
                                )

        self.main_box_1 = main_box_1
        self.main_box_2 = main_box_2

        #! Show the main window
        self.main_window.content = self.main_box_1
        self.main_window.show()

    #!------------------------------------------------------------------------

    def detailed_list_box_1_on_select( self, widget, row ) :
        self.main_window.content = self.main_box_2
        # self.main_window.show()

#!============================================================================

def main() :
    return Test_App( 'Test App', 'au.com.etrix.test_app' )
```

In this PyCon talk by Russel, it is mentioned that `DetailedList` knows about some special key names for lists of dictionary objects.

https://youtu.be/qaPzlIJ57dk?t=789

These special keys are not mentioned in the API docs.  What are the full list of special keys?

https://toga.readthedocs.io/en/latest/reference/api/widgets/detailedlist.html

Also the docs state that `data` argument is a "list of str".  Is that still true, or does it have to be a `list` of `dict` now?

Is there a variant for horizontal/row lists?  e.g. is `style = Pack( direction=COLUMN )` supported?

Is `DetailedList` too restricted/specific for a generic widget?  What if I want more than one icon?  What if I want an Icon, some text then an icon, etc, ...

What's the best way to implement a custom `DetailedList`?  List of Widgets, Boxes?
## Expected Behavior
<!--- If you're describing a bug, tell us what you expect to happen. -->
<!--- If you're requesting a new feature, tell us why you'd like this feature. -->
https://toga.readthedocs.io/en/latest/tutorial/tutorial-3.html

## Current Behavior
<!--- If you're describing a bug, what currently happens? -->
nothing, then:
```
Traceback (most recent call last):
  File "C:\Users\tract\AppData\Local\Temp\browser.py", line 1, in <module>
    import toga, logging
  File "C:\Program Files\Python37\lib\site-packages\toga\__init__.py", line 1, in <module>
    from .app import App, DocumentApp, MainWindow
  File "C:\Program Files\Python37\lib\site-packages\toga\app.py", line 6, in <module>
    from toga.command import CommandSet
  File "C:\Program Files\Python37\lib\site-packages\toga\command.py", line 1, in <module>
    from toga.handlers import wrapped_handler
  File "C:\Program Files\Python37\lib\site-packages\toga\handlers.py", line 1, in <module>
    import asyncio
  File "C:\Program Files\Python37\lib\asyncio\__init__.py", line 8, in <module>
    from .base_events import *
  File "C:\Program Files\Python37\lib\asyncio\base_events.py", line 18, in <module>
    import concurrent.futures
  File "C:\Program Files\Python37\lib\concurrent\futures\__init__.py", line 8, in <module>
    from concurrent.futures._base import (FIRST_COMPLETED,
  File "C:\Program Files\Python37\lib\concurrent\futures\_base.py", line 42, in <module>
    LOGGER = logging.getLogger("concurrent.futures")
AttributeError: module 'logging' has no attribute 'getLogger'
```


## Steps to reproduce
<!--- Provide a set of steps describing how to reproduce this bug. If you have a live example, provide the link below -->
1. Run the Tutorial 3 code from the readthedocs on windows

2.

3.


## Your Environment
<!--- Provide details on your current environment you found the bug in -->

* Python Version (list the specific version number)
`Python 3.7.5`
* Operating System and Version (select from the following and list the specific version number; if your OS is not listed, list that as well)

  - [ ] macOS - version:
  - [ ] Linux - distro:   - version:
  - [x] Windows - version: 10.0.18362 Build 18362 x64
  - [ ] Other - name:  - version:

* Toga Version (list the specific version number or git hash)
`0.3.0.dev16`
* Toga Target (the type of app you are trying to generate)

  - [ ] android
  - [ ] cocoa
  - [ ] django
  - [ ] gtk
  - [ ] iOS
  - [ ] tvOS
  - [ ] watchOS
  - [ ] winforms
  - [ ] win32
  - [ ] Other (please specify)

The `ScrollContainer` height does not allow other widgets to render (or be seen on screen).

The example below has three `ScrollContainers` stacked vertically.  On `cocoa` I can see all three containers.  On `iOS` I can only see the first container.

<img width="474" alt="toga-sctroll-container-cocoa" src="https://user-images.githubusercontent.com/472245/71581295-967b4980-2b58-11ea-8fa7-4c12a22babec.png">

<img width="388" alt="toga-sctroll-container-ios" src="https://user-images.githubusercontent.com/472245/71581298-9aa76700-2b58-11ea-86a6-5b68692de22e.png">

```python
#!/usr/bin/env python

import toga
from toga.style import Pack
from toga.style.pack import ( COLUMN, ROW, TOP, BOTTOM, CENTER )

#!============================================================================

class Test_App( toga.App ) :

    def startup( self ) :
        #! Create the main window
        self.main_window = toga.MainWindow( title=self.name )

        box_1 = toga.Box( id = 'box_1',
                             style = Pack( direction=ROW, flex=0, padding=20 ),
                             children = [ toga.Label( f"Box_1#{i:02}" ) for i in range( 100 ) ]
                             ) 

        box_2 = toga.Box( id = 'box_2',
                             style = Pack( direction=ROW, flex=0, padding=20 ),
                             children = [ toga.Label( f"Box_2#{i:02}" ) for i in range( 100 ) ]
                             ) 

        box_3 = toga.Box( id = 'box_3',
                             style = Pack( direction=ROW, flex=0, padding=20 ),
                             children = [ toga.Label( f"Box_3#{i:02}" ) for i in range( 100 ) ]
                             ) 

        box_1_scroller = toga.ScrollContainer( content=box_1, horizontal=True, vertical=False, style = Pack( flex=0, padding=0 ) )

        box_2_scroller = toga.ScrollContainer( content=box_2, horizontal=True, vertical=False, style = Pack( flex=0, padding=0 ) )
        
        box_3_scroller = toga.ScrollContainer( content=box_3, horizontal=True, vertical=False, style = Pack( flex=0, padding=0 ) )

        main_box = toga.Box( id = 'main_box',
                             style = Pack( direction=COLUMN, flex=0 ),
                             children = [ box_1_scroller, box_2_scroller, box_3_scroller ],
                             )

        self.main_window.content = main_box

        #! Show the main window
        self.main_window.show()

#!============================================================================

def main() :
    return Test_App( 'Test App', 'au.com.etrix.test_app' )
```

If I set a box with a background color, label widget children of that box are displayed correctly with the specified background.

However, if a child is another box that contains a label, then the background colour of the outer box is not propagated to the inner boxes.

Is that the expected behaviour?

I would have thought the I could set a background colour of a box and then all sub-widgets (no matter how deep in sub-boxes) would also be rendered with the same background colour.

```python
#!/usr/bin/env python

import toga
from toga.style import Pack
from toga.style.pack import ( COLUMN, ROW, CENTER )

#!============================================================================

class Test_App( toga.App ) :

    def startup( self ) :
        #! Create the main window
        self.main_window = toga.MainWindow( title=self.name )

        body_box = toga.Box( id = 'days_box',
                             style = Pack( direction=ROW, flex=0, background_color='yellow' ),
                             children = [
                                toga.Label( "XXX" ),
                                toga.Box( children = [ toga.Label( "YYY" ) ] ),
                                toga.Label( "ZZZ" ),
                                        ],
                             ) 

        main_box = toga.Box( id = 'main_box',
                             style = Pack( direction=COLUMN, flex=0 ),
                             children = [ body_box ],
                             )

        self.main_window.content = main_box

        #! Show the main window
        self.main_window.show()

#!============================================================================

def main() :
    return Test_App( 'Test App', 'au.com.etrix.test_app' )
```

Note how label "YYY" does not have the specified background colour.  It has the default system colour.

<img width="388" alt="toga-background-color-issue" src="https://user-images.githubusercontent.com/472245/71575579-9885de00-2b41-11ea-9df5-d63ae8ccd2a6.png">