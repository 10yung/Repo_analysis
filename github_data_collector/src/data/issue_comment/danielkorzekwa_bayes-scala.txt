Hi,

I'm working a continuous bayesian network with hidden variables, can EM in bayes-scala handle this case? 

Thanks!
Kaiyang
Would you mind release a cross version build for scala 2.12?
http://www.scala-sbt.org/0.13/docs/Cross-Build.html
i use truncate function of Gaussian in bases-scala, but it seems not working
the code:

> val truncGaussian = dk.bayes.math.gaussian.Gaussian(0.5, 1).truncate(0.0, true)
>     for(i<- 0 until 300000){
>         val d = truncGaussian.draw
>         println(d)
>     }

i plot the hist of sampled data draw from truncGaussian, and it is a Gaussian distribution with no truncation

look here: https://github.com/scalanlp/breeze/issues/460

performance improvement

Nguyen et al. Automated Variational Inference for Gaussian Process Models, 2014

Migrate a private walmart repo to bayes-scala, write a tutorial page.
https://www.kaggle.com/c/walmart-recruiting-sales-in-stormy-weather

Do it after competition is completed.

Hi Daniel,

I've finally managed to create a visualization for Bayesian Networks constructed from Categoricals.
Check out the README of the Gist here:
https://gist.github.com/nightscape/c2fcccac859b3ae34c99#file-readme-md

Could you check if it runs on your machine?
If so we can think about how to maybe integrate this into bayes-scala :)

Best and thanks again for your help!
  Martin

I was having an issue with the common benchmarking Bayesian network "B" and so decided to test this with a much smaller network, commonly used when learning what a Bayesian network is (Grass Wet).

![image](https://cloud.githubusercontent.com/assets/6060215/4072888/649a2134-2e8d-11e4-8664-6783cb0ed70f.png)

The code I am using to represent this network is shown below:

``` scala
  var loopyBP: LoopyBP = _

  def loadNetwork() {
    var rain = Var(1, 2)
    var sprinkler = Var(2, 2)
    var grasswet = Var(3, 2)

    var rainFac = Factor(Array(rain), Array(0.3, 0.7))
    var sprinklerFac = Factor(Array(sprinkler, rain), Array(0.01, 0.99, 0.7, 0.3))
    var grasswetFac = Factor(Array(grasswet, sprinkler, rain), Array(1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 1.0))

    var clusterGraph = GenericClusterGraph()
    clusterGraph.addCluster(1, rainFac)
    clusterGraph.addCluster(2, sprinklerFac)
    clusterGraph.addCluster(3, grasswetFac)

    clusterGraph.addEdges((1, 2), (1, 3), (2, 3))

    loopyBP = LoopyBP(clusterGraph)
    loopyBP.calibrate()
  }
```

However when adding the edges the following error is obtained:

"requirement failed: Sepset must contain single variable only"

Which can be found within this code:

``` scala
  private def calcSepsetVariable(cluster1: Cluster, cluster2: Cluster): Var = {
    val intersectVariables = cluster1.getFactor().getVariables().intersect(cluster2.getFactor().getVariables())
    require(intersectVariables.size == 1, "Sepset must contain single variable only")
    val intersectVariable = intersectVariables.head

    intersectVariable
  }
```

Essentially as far as I am aware this algorithm is saying the network is invalid when actually as a Bayesian network this should be fine.

I am wondering if there is some sort of mistake I am making or if Bayes-Scala does not yet support this?
