Vuls still [uses](https://github.com/future-architect/vuls/blob/master/report/report.go#L28) obsolete and deprecated [github.com/hashicorp/uuid](https://github.com/hashicorp/uuid) library.

Please consider switching to [github.com/hashicorp/go-uuid](https://github.com/hashicorp/go-uuid/releases) successor library.

Thanks.

# What did you do? (required. The issue will be **closed** when not provided.)
Scanning OS images during the build using vuls-server and one-liner scan with curl.

# What did you expect to happen?
- Report stored to server's disk
- Report usable with vulsrepo

# What happened instead?
Results are stored, but can't be used with vulsrepo because "reportedAt" -timestamp is left initial value ("0001-01-01T00:00:00Z")

# Steps to reproduce the behaviour
- start vuls-server with `-format-json -to-localfile" options (and provide vulnerability DB:s to it, too)
- Run one-liner scan from e.g. Debian container (https://vuls.io/docs/en/usage-server.html#example-one-liner-scan)
- Check JSON from server's disk manually or try to open it with vulsrepo.

# Configuration (**MUST** fill this out):
Vuls container from Docker hub: docker pull vuls/vuls:0.9.1

* Go version (`go version`): Not applicable

* Go environment (`go env`): Not applicable

* Vuls environment:

Hash : vuls v0.9.1 build-20191126_010231_d6e74cc

To check the commit hash of HEAD
$ vuls -v

or

$ cd $GOPATH/src/github.com/future-architect/vuls 
$ git rev-parse --short HEAD 

* config.toml: None

* command: `vuls server -listen 0.0.0.0:5515 -log-dir /tmp/vuls <vulnerability DBs from external Postgresql)> -format-json -to-localfile` (Running at Kubernetes)


# What did you do? (required. The issue will be **closed** when not provided.)
Tried to do https://vuls.io/docs/en/usage-server.html#example-collect-the-scan-results-from-vuls-agent.

# What did you expect to happen?
Scan from vuls pushed to server. Report is both displayed in stdout and stored to server (as server is configured to store the results). 

# What happened instead?
Error message (using real server produced same error):
```
[Dec  4 06:49:47] ERROR [localhost] Failed to read from JSON: Invalid path: /vuls/results/http:/localhost:5515/vuls:
    github.com/future-architect/vuls/report.JSONDir
        /go/src/github.com/future-architect/vuls/report/util.go:600
```

* Current Output
```
vuls report -debug -to-http http://${VULS_SERVER}:5515/vuls
[Dec  4 06:49:47] ERROR [localhost] Failed to read from JSON: Invalid path: /vuls/results/http:/localhost:5515/vuls:
    github.com/future-architect/vuls/report.JSONDir
        /go/src/github.com/future-architect/vuls/report/util.go:600
```


# Steps to reproduce the behaviour
```
container run --rm -it --entrypoint /bin/sh vuls/vuls
cat << EOF >> config.toml
[servers]

[servers.localhost]
host = "localhost"
port = "local"
EOF
vuls scan
export VULS_SERVER=localhost
vuls report -to-http http://${VULS_SERVER}:5515/vuls
```

# Configuration (**MUST** fill this out):

* Go version (`go version`): N/A
* Go environment (`go env`): N/A

* Vuls environment: 

Hash : vuls v0.9.0 build-20191101_010448_69214e0

To check the commit hash of HEAD
$ vuls -v

or

$ cd $GOPATH/src/github.com/future-architect/vuls 
$ git rev-parse --short HEAD 

* config.toml:
```
[servers]

[servers.localhost]
host = "localhost"
port = "local"
```

* command:
`vuls report -to-http http://${VULS_SERVER}:5515/vuls`

If this Pull Request is work in progress, Add a prefix of “[WIP]” in the title.

# What did you implement:

Add 2019 CWE Top25 and CWE/SANS Top25 information to vuls report in additionto OWASP Top 10.
https://www.sans.org/top25-software-errors/
https://cwe.mitre.org/top25/archive/2019/2019_cwe_top25.html

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [x] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

# How Has This Been Tested?

Please describe the tests that you ran to verify your changes. Provide instructions so we can reproduce.

# Checklist:
You don't have to satisfy all of the following.

- [ ] Write tests
- [ ] Write documentation
- [ ] Check that there aren't other open pull requests for the same issue/feature
- [ ] Format your source code by `make fmt`
- [ ] Pass the test by `make test`
- [ ] Provide verification config / commands
- [ ] Enable "Allow edits from maintainers" for this PR
- [ ] Update the messages below

***Is this ready for review?:*** NO  

# Reference

<!--
If this is a FEATURE REQUEST, request format does not matter!
-->

Currently there's possiblity to make "one-liner scan" of system using curl (https://vuls.io/docs/en/usage-server.html). Issue is, that received JSON can't be displayed nicely with application, because application always want's to get the data from vulnerability DB (even there's everything needed in the JSON returned by vuls server).


# What did you do? (required. The issue will be **closed** when not provided.)
Scanned Docker image with Ubuntu 14.04 LTS OS

# What did you expect to happen?
Vuls should report all vulnerabilities present inside this image

# What happened instead?
Vuls reporting vulnerabilities which are not even present in this image
* Current Output

Please re-run the command using ```-debug``` and provide the output below.

# Steps to reproduce the behaviour


# Configuration (**MUST** fill this out):

* Go version (`go version`):
go version go1.10.4 linux/amd64

* Go environment (`go env`):
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/bhupinder/.cache/go-build"
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/home/bhupinder/clair-scanner"
GORACE=""
GOROOT="/usr/lib/go-1.10"
GOTMPDIR=""
GOTOOLDIR="/usr/lib/go-1.10/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build444783737=/tmp/go-build -gno-record-gcc-switches"

* Vuls environment:

Hash : ____

To check the commit hash of HEAD
$ vuls -v

or

$ cd $GOPATH/src/github.com/future-architect/vuls 
$ git rev-parse --short HEAD 

* config.toml:

#url        = ""

[gost]
type        = "sqlite3"
sqlite3Path = "/vuls/gost.sqlite3"
#url        = ""

#[gost]
#type = "http"
#url = "http://172.17.0.1:1325"

[exploit]
type        = "sqlite3"
sqlite3Path = "/vuls/go-exploitdb.sqlite3"



#[cveDict]
#type = "http"
#url = "http://172.17.0.1:1323"
#
#[ovalDict]
#type = "http"
#url = "http://172.17.0.1:1324"
#
#[gost]
#type = "http"
#url = "http://172.17.0.1:1325"
#
#[exploit]
##type = "http"
##url = "http://172.17.0.1:1326"
#type        = "sqlite3"
#sqlite3Path = "/vuls/go-exploitdb.sqlite3"

[default]

[servers]
[servers.host]
host                = "172.17.0.1"
#port               = "3222"
user                = "bhupinder"
keyPath            = "/root/.ssh/rsa_nopass"
scanMode            = ["fast"]
#type               = "pseudo"
#memo               = "DB Server"
#cpeNames           = [ "cpe:/a:rubyonrails:ruby_on_rails:4.2.1" ]
#owaspDCXMLPath     = "/path/to/dependency-check-report.xml"
#ignoreCves         = ["CVE-2014-0160"]
containerType      = "docker"
containersIncluded = ["${running}"]
containersExcluded = ["exploitdb", "gost", "goval-dictionary", "go-cve-dictionary"]


* command:


# What did you do? (required. The issue will be **closed** when not provided.)
I scanned docker image based on Alpine 3.8.4.

# What did you expect to happen?
It has package sqlite3.25.3-r0 in the image which has vulnerability CVE-2019-8457. This vulnerability is fixed in sqlite3.25.3-r1. But when I scan this image using Vuls this vulnerability is not flagged

# What happened instead?
Vuls is not detecting CVE-2019-8457 vulnerability

* Current Output

Please re-run the command using ```-debug``` and provide the output below.

# Steps to reproduce the behaviour


# Configuration (**MUST** fill this out):

* Go version (`go version`):
go version go1.10.4 linux/amd64

* Go environment (`go env`):
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/bhupinder/.cache/go-build"
GOEXE=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/home/bhupinder/clair-scanner"
GORACE=""
GOROOT="/usr/lib/go-1.10"
GOTMPDIR=""
GOTOOLDIR="/usr/lib/go-1.10/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build405489461=/tmp/go-build -gno-record-gcc-switches"

* Vuls environment:

Hash : ____

To check the commit hash of HEAD
$ vuls -v

or

$ cd $GOPATH/src/github.com/future-architect/vuls 
$ git rev-parse --short HEAD 

* config.toml:
[cveDict]
type        = "sqlite3"
sqlite3Path = "/vuls/cve.sqlite3"

[ovalDict]
type        = "sqlite3"
sqlite3Path = "/vuls/oval.sqlite3"

[gost]
type        = "sqlite3"
sqlite3Path = "/vuls/gost.sqlite3"

[exploit]
type        = "sqlite3"
sqlite3Path = "/vuls/go-exploitdb.sqlite3"
[default]

[servers]
[servers.host]
host                = "172.17.0.1"
#port               = "3222"
user                = "bhupinder"
keyPath            = "/root/.ssh/rsa_nopass"
scanMode            = ["fast"]
#type               = "pseudo"
#memo               = "DB Server"
#cpeNames           = [ "cpe:/a:rubyonrails:ruby_on_rails:4.2.1" ]
#owaspDCXMLPath     = "/path/to/dependency-check-report.xml"
#ignoreCves         = ["CVE-2014-0160"]
containerType      = "docker"
containersIncluded = ["${running}"]
#containersExcluded = ["exploitdb", "gost", "goval-dictionary", "go-cve-dictionary"]


* command:


Hello,

I've installed the latest version of vuls and i'd like to import results in ES and visualize them in Kibana !

Before, the solution was to use vuls-log-converter (last update in 2017 !) , but something change in the JSON results, that cannot be parsed anymore and i've got some errors !

Is there a way to import the results in ES or do you plan to add the possibility in future ?


Thanks for your help and for this great project. 


Hello,

I'm having issues running a remote scan the remote host is ubuntu-18.04.3. What am I doing wrong here.

My configurations and error are below. 

Configuration 

# https://vuls.io/docs/en/usage-settings.html#servers-section
[servers]
[servers.val]
host                = "192.168.1.19"
port                = "22"
user                = "vas"
keyPath             = "/root/.ssh/id_rsa"
scanMode            = ["fast-root"]
#scanMode           = ["fast", "fast-root", "deep", "offline"]

#type               = "pseudo"
#memo               = "DB Server"
#cpeNames           = [ "cpe:/a:rubyonrails:ruby_on_rails:4.2.1" ]
#owaspDCXMLPath     = "/path/to/dependency-check-report.xml"
#ignoreCves         = ["CVE-2014-0160"]
#containerType      = "docker" #or "lxd" or "lxc" default: docker
#containersIncluded = ["${running}"]
#containersExcluded = ["container_name_a"]

#[servers.127-0-0-1.containers.container_name_a]
#cpeNames       = [ "cpe:/a:rubyonrails:ruby_on_rails:4.2.1" ]
#owaspDCXMLPath = "/path/to/dependency-check-report.xml"
#ignoreCves     = ["CVE-2014-0160"]

#[servers.127-0-0-1.githubs."owner/repo"]
#token   = "yourToken"

#[servers.127-0-0-1.wordpress]
#cmdPath = "/usr/local/bin/wp"
#osUser = "wordpress"
#docRoot = "/path/to/DocumentRoot/"
#wpVulnDBToken = "xxxxTokenxxxx"
#ignoreInactive = true

#[servers.127-0-0-1.optional]
#key = "value1"


Error

Status: Image is up to date for vuls/vuls:latest
[Oct 18 17:44:41]  INFO [localhost] Validating config...
[Oct 18 17:44:41]  INFO [localhost] Detecting Server/Container OS...
[Oct 18 17:44:41]  INFO [localhost] Detecting OS of servers...
[Oct 18 17:44:41] ERROR [localhost] (1/1) Failed: val, err: [Failed to detect OS:
    github.com/future-architect/vuls/scan.detectOS
        /go/src/github.com/future-architect/vuls/scan/serverapi.go:127
  - Unable to connect via SSH. Scan with -vvv option to print SSH debugging messages and check SSH settings. If you have never SSH to the host to be scanned, SSH to the host before scanning in order to add the HostKey. vas@192.168.1.19 port: 22
    execResult: servername: val
      cmd: /usr/bin/ssh -tt -o StrictHostKeyChecking=yes -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPath=/root/.vuls/controlmaster-%r-val.%p -o Controlpersist=10m vas@192.168.1.19 -p 22 -i /root/.ssh/id_rsa -o PasswordAuthentication=no stty cols 1000; ls /etc/debian_version
      exitstatus: 255
      stdout:
      stderr:
      err: %!s(<nil>):
    github.com/future-architect/vuls/scan.detectDebian
        /go/src/github.com/future-architect/vuls/scan/debian.go:49]
[Oct 18 17:44:41] ERROR [localhost] Failed to init servers. err: No scannable base servers:
    github.com/future-architect/vuls/scan.InitServers
        /go/src/github.com/future-architect/vuls/scan/serverapi.go:206
adminroot@vul:~/vulsctl$



Debug

adminroot@vul:~/vulsctl$ ./scan.sh --debug -vvv
Using default tag: latest
latest: Pulling from vuls/vuls
Digest: sha256:d43237c71f89495523fb60cb03296f40e6ea0437e61f980819fcbaac967a5f4e
Status: Image is up to date for vuls/vuls:latest
[Oct 18 17:46:52]  INFO [localhost] Validating config...
[Oct 18 17:46:52]  INFO [localhost] Detecting Server/Container OS...
[Oct 18 17:46:52]  INFO [localhost] Detecting OS of servers...
[Oct 18 17:46:52] DEBUG [localhost] Executing... ls /etc/debian_version
[Oct 18 17:46:52] DEBUG [localhost] execResult: servername: val
  cmd: /usr/bin/ssh -tt -o StrictHostKeyChecking=yes -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPath=/root/.vuls/controlmaster-%r-val.%p -o Controlpersist=10m -vvv vas@192.168.1.19 -p 22 -i /root/.ssh/id_rsa -o PasswordAuthentication=no stty cols 1000; ls /etc/debian_version
  exitstatus: 255
  stdout:
  stderr: OpenSSH_7.5p1-hpn14v4, LibreSSL 2.6.5
debug1: Reading configuration data /etc/ssh/ssh_config
debug1: auto-mux: Trying existing master
debug1: Control socket "/root/.vuls/controlmaster-vas-val.22" does not exist
debug2: resolving "192.168.1.19" port 22
debug2: ssh_connect_direct: needpriv 0
debug1: Connecting to 192.168.1.19 [192.168.1.19] port 22.
debug2: fd 3 setting O_NONBLOCK
debug1: fd 3 clearing O_NONBLOCK
debug1: Connection established.
debug3: timeout: 9999 ms remain after connect
debug1: permanently_set_uid: 0/0
debug1: identity file /root/.ssh/id_rsa type 1
debug1: key_load_public: No such file or directory
debug1: identity file /root/.ssh/id_rsa-cert type -1
debug1: Enabling compatibility mode for protocol 2.0
debug1: Local version string SSH-2.0-OpenSSH_7.5p1-hpn14v4
debug1: Remote protocol version 2.0, remote software version OpenSSH_7.6p1 Ubuntu-4ubuntu0.3
debug1: match: OpenSSH_7.6p1 Ubuntu-4ubuntu0.3 pat OpenSSH* compat 0x04000000
debug1: Remote is NON-HPN aware
debug2: fd 3 setting O_NONBLOCK
debug1: Authenticating to 192.168.1.19:22 as 'vas'
debug3: send packet: type 20
debug1: SSH2_MSG_KEXINIT sent
debug3: receive packet: type 20
debug1: SSH2_MSG_KEXINIT received
debug2: local client KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com,zlib
debug2: compression stoc: none,zlib@openssh.com,zlib
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug2: peer server KEXINIT proposal
debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1
debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519
debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
debug2: compression ctos: none,zlib@openssh.com
debug2: compression stoc: none,zlib@openssh.com
debug2: languages ctos:
debug2: languages stoc:
debug2: first_kex_follows 0
debug2: reserved 0
debug1: kex: algorithm: curve25519-sha256
debug1: kex: host key algorithm: ecdsa-sha2-nistp256
debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
debug3: send packet: type 30
debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
debug3: receive packet: type 31
debug1: Server host key: ecdsa-sha2-nistp256 SHA256:YTenEi8rw+I18b8Bxtq19DGz6DR0GHN/+9/7GAiu3Fs
No ECDSA host key is known for 192.168.1.19 and you have requested strict checking.
Host key verification failed.

  err: %!s(<nil>)
[Oct 18 17:46:52] ERROR [localhost] (1/1) Failed: val, err: [Failed to detect OS:
    github.com/future-architect/vuls/scan.detectOS
        /go/src/github.com/future-architect/vuls/scan/serverapi.go:127
  - Unable to connect via SSH. Scan with -vvv option to print SSH debugging messages and check SSH settings. If you have never SSH to the host to be scanned, SSH to the host before scanning in order to add the HostKey. vas@192.168.1.19 port: 22
    execResult: servername: val
      cmd: /usr/bin/ssh -tt -o StrictHostKeyChecking=yes -o LogLevel=quiet -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=auto -o ControlPath=/root/.vuls/controlmaster-%r-val.%p -o Controlpersist=10m -vvv vas@192.168.1.19 -p 22 -i /root/.ssh/id_rsa -o PasswordAuthentication=no stty cols 1000; ls /etc/debian_version
      exitstatus: 255
      stdout:
      stderr: OpenSSH_7.5p1-hpn14v4, LibreSSL 2.6.5
    debug1: Reading configuration data /etc/ssh/ssh_config
    debug1: auto-mux: Trying existing master
    debug1: Control socket "/root/.vuls/controlmaster-vas-val.22" does not exist
    debug2: resolving "192.168.1.19" port 22
    debug2: ssh_connect_direct: needpriv 0
    debug1: Connecting to 192.168.1.19 [192.168.1.19] port 22.
    debug2: fd 3 setting O_NONBLOCK
    debug1: fd 3 clearing O_NONBLOCK
    debug1: Connection established.
    debug3: timeout: 9999 ms remain after connect
    debug1: permanently_set_uid: 0/0
    debug1: identity file /root/.ssh/id_rsa type 1
    debug1: key_load_public: No such file or directory
    debug1: identity file /root/.ssh/id_rsa-cert type -1
    debug1: Enabling compatibility mode for protocol 2.0
    debug1: Local version string SSH-2.0-OpenSSH_7.5p1-hpn14v4
    debug1: Remote protocol version 2.0, remote software version OpenSSH_7.6p1 Ubuntu-4ubuntu0.3
    debug1: match: OpenSSH_7.6p1 Ubuntu-4ubuntu0.3 pat OpenSSH* compat 0x04000000
    debug1: Remote is NON-HPN aware
    debug2: fd 3 setting O_NONBLOCK
    debug1: Authenticating to 192.168.1.19:22 as 'vas'
    debug3: send packet: type 20
    debug1: SSH2_MSG_KEXINIT sent
    debug3: receive packet: type 20
    debug1: SSH2_MSG_KEXINIT received
    debug2: local client KEXINIT proposal
    debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1,ext-info-c
    debug2: host key algorithms: ecdsa-sha2-nistp256-cert-v01@openssh.com,ecdsa-sha2-nistp384-cert-v01@openssh.com,ecdsa-sha2-nistp521-cert-v01@openssh.com,ssh-ed25519-cert-v01@openssh.com,ssh-rsa-cert-v01@openssh.com,ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
    debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc
    debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com,aes128-cbc,aes192-cbc,aes256-cbc
    debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
    debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
    debug2: compression ctos: none,zlib@openssh.com,zlib
    debug2: compression stoc: none,zlib@openssh.com,zlib
    debug2: languages ctos:
    debug2: languages stoc:
    debug2: first_kex_follows 0
    debug2: reserved 0
    debug2: peer server KEXINIT proposal
    debug2: KEX algorithms: curve25519-sha256,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group16-sha512,diffie-hellman-group18-sha512,diffie-hellman-group14-sha256,diffie-hellman-group14-sha1
    debug2: host key algorithms: ssh-rsa,rsa-sha2-512,rsa-sha2-256,ecdsa-sha2-nistp256,ssh-ed25519
    debug2: ciphers ctos: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
    debug2: ciphers stoc: chacha20-poly1305@openssh.com,aes128-ctr,aes192-ctr,aes256-ctr,aes128-gcm@openssh.com,aes256-gcm@openssh.com
    debug2: MACs ctos: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
    debug2: MACs stoc: umac-64-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-sha2-512-etm@openssh.com,hmac-sha1-etm@openssh.com,umac-64@openssh.com,umac-128@openssh.com,hmac-sha2-256,hmac-sha2-512,hmac-sha1
    debug2: compression ctos: none,zlib@openssh.com
    debug2: compression stoc: none,zlib@openssh.com
    debug2: languages ctos:
    debug2: languages stoc:
    debug2: first_kex_follows 0
    debug2: reserved 0
    debug1: kex: algorithm: curve25519-sha256
    debug1: kex: host key algorithm: ecdsa-sha2-nistp256
    debug1: kex: server->client cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
    debug1: kex: client->server cipher: chacha20-poly1305@openssh.com MAC: <implicit> compression: none
    debug3: send packet: type 30
    debug1: expecting SSH2_MSG_KEX_ECDH_REPLY
    debug3: receive packet: type 31
    debug1: Server host key: ecdsa-sha2-nistp256 SHA256:YTenEi8rw+I18b8Bxtq19DGz6DR0GHN/+9/7GAiu3Fs
    No ECDSA host key is known for 192.168.1.19 and you have requested strict checking.
    Host key verification failed.

      err: %!s(<nil>):
    github.com/future-architect/vuls/scan.detectDebian
        /go/src/github.com/future-architect/vuls/scan/debian.go:49]
[Oct 18 17:46:52] ERROR [localhost] Failed to init servers. err: No scannable base servers:
    github.com/future-architect/vuls/scan.InitServers
        /go/src/github.com/future-architect/vuls/scan/serverapi.go:206
adminroot@vul:~/vulsctl$


