may be the wrong file, but i hope you get the idea.
i got annoyed by firefox getting spammed there.
if this already existed, i'm sorry to push it.
var socket = new window.BCSocket('/channel', {reconnect:true, debug:false});
Firefox is warning `Attempt to set a forbidden header was denied: Connection` which points to bcsocket-uncompressed.js in my bundled code.

I believe it's coming from this line:
https://github.com/josephg/node-browserchannel/blob/master/dist/bcsocket-uncompressed.js#L1792

I'm not sure what dependency is adding that or if/how it should be fixed. If one of the maintainers can point me in the right direction I'll open an issue on the actual offending library's issue tracker instead of here. 
Unfortunately I missed some cases in my last PR! I added new tests
to ensure that cors headers are correctly sent in all cases and
refactored the internal options interface to ensure this sort of
error is now impossible.

Also included is a change to npm test to ensure that it always
runs against the latest coffeescript code.
TypeError: Cannot read property 'c' of null `xxx/node_modules/racer-browserchannel/node_modules/browserchannel/dist/bcsocket-uncompressed.js` in `Ka` at line `2734:0`

```
  };
  this.sendMap = Ka = function(a) {
    var b;
    if ((b = r.readyState) !== $.hb && b !== $.CLOSED) {
      b = w;
      if (0 == b.c) {
        throw Error("Invalid operation: sending map when state is closed");
      }
      1E3 == b.t.length && b.a.J("Already have 1000 queued maps upon queueing " + yb(a));
      b.t.push(new Gd(b.sc++, a));
      2 != b.c && 3 != b.c || Qd(b);
```


my main.js just import the library:
`var BCSocket = require('browserchannel').BCSocket;`

I compile file with gulpfile below

```
var gulp = require('gulp'),
  browserify = require('browserify'),
  del = require('del'),
  source = require('vinyl-source-stream'),
  babelify = require('babelify');


var paths = {
    srcJs: ['./main.js'],
    js: ['./bundle.js']
}


gulp.task('clean', function(done){
    del(['build'], done)
})


gulp.task('js', ['clean'], function() {
        browserify({debug: true})
        .transform(babelify)
        .require('./main.js', {entry: true})
        .bundle()
        .on("error", function (err) { console.log("Error: " + err.message); })
        .pipe(source('bundle.js'))
        .pipe(gulp.dest('./static/'));
})


// Rerun tasks whenever a file changes.
gulp.task('watch', ['js'], function() {
    gulp.watch(paths.srcJs, ['js']);
});
```

When I open file in browser I achieve an error `Uncaught TypeError: fs.statSync is not a function`.

What may cause the problem?

Example ported to connect 3, issue may be within connect library?

chat.html:

```
socket = new BCSocket('/channel');
socket.onopen = function() {
    socket.send({hi:'there'});
    socket.close();
};
```

chat.js:

```
var connect = require('connect');
var http = require('http');
var browserChannel = require('browserchannel').server;
var serveStatic = require('serve-static');
var app = connect();
app.use(serveStatic(__dirname));
app.use(browserChannel(function (session) {
    console.log('New session: ' + session.id +
        ' from ' + session.address +
        ' with cookies ' + session.headers.cookie);
    session.on('message', function (data) {
        console.log(session.id + ' sent ' + JSON.stringify(data));
        session.send(data);
    });
```

etc

socket.close() in chat.html needs to be commented out for hi:"there" message to get through.

As discussed, node-browserchannel may eventually be ported from coffeescript to javascript. If this happens, coffeescript would continue to be used for the test suite.

The coffeescript should be compiled to javascript, and the javascript should be cleaned up manually in small commits. At no point should the test suite be broken.

So the current implementation gives the client an etag which is already nice but the browser will still send out a request. Using the  connect.static maxAge parameter sets the caching headers so the browser will not even send a request for the code, speeding up the connection. 

https://github.com/senchalabs/connect/blob/a9f20e450b8c197e22da41d3d1d610685878489d/lib/middleware/static.js#L168

Since you're not using connect.static I think it may be enough to just add the header at

https://github.com/josephg/node-browserchannel/blob/bfc517f7250eaf17ba6ade4ec02e37ac58eab0bd/lib/server.coffee#L840

but there may be some subtlety involved.

It is desirable to turn off this header while developing the client code, so some sort of option would have to be settable, but I think setting the default to at least a day is probably a good idea.
