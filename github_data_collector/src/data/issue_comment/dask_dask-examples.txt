I want to see if our current setup works with newer versions of tornado

Fixes #128.
See <https://discourse.jupyter.org/t/gesis-hub-blocks-dask-dashboard/3019>.

With
<https://github.com/dask/dask-examples/blob/c14b7dc809c17066224cb5b8353e78c9aebe9ccc/binder/start#L4> 
assuming that the full URL always is along the lines of `https://binder.something.example.com/user/${JUPYTERHUB_USER}/proxy/8787` which is not necessarily true.
This isn't ready for a few reasons:

1.  Serialization issues upstream: https://github.com/InsightSoftwareConsortium/ITK/issues/1517
2.  A lack of attention to actual image processsing applications
3.  A disucssion of memory issues at the bottom

Mostly I'm putting this up here now to generate conversation

cc @thewtex @jakirkham 
I was trying a contrived example with the following code...got this long unexpected error. Any idea in how to proceed? 

```
import dask_xgboost
params = {'objective': 'binary:logistic',
          'max_depth': 4, 'eta': 0.01, 'subsample': 0.5,
          'min_child_weight': 0.5}

bst = dask_xgboost.train(client, params, train_df.to_dask_array(), label_df.to_dask_array(), num_boost_round=10)
```

```pytb
> TypeError                                 Traceback (most recent call last)
> <ipython-input-14-eb3f56620d79> in <module>
>       4           'min_child_weight': 0.5}
>       5 
> ----> 6 bst = dask_xgboost.train(client, params, train_df.to_dask_array(), label_df.to_dask_array(), num_boost_round=10)
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/dask_xgboost/core.py in train(client, params, data, labels, dmatrix_kwargs, **kwargs)
>     240     """
>     241     return client.sync(
> --> 242         _train, client, params, data, labels, dmatrix_kwargs, **kwargs
>     243     )
>     244 
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/distributed/client.py in sync(self, func, asynchronous, callback_timeout, *args, **kwargs)
>     765         else:
>     766             return sync(
> --> 767                 self.loop, func, *args, callback_timeout=callback_timeout, **kwargs
>     768             )
>     769 
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/distributed/utils.py in sync(loop, func, callback_timeout, *args, **kwargs)
>     332     if error[0]:
>     333         typ, exc, tb = error[0]
> --> 334         raise exc.with_traceback(tb)
>     335     else:
>     336         return result[0]
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/distributed/utils.py in f()
>     316             if callback_timeout is not None:
>     317                 future = gen.with_timeout(timedelta(seconds=callback_timeout), future)
> --> 318             result[0] = yield future
>     319         except Exception as exc:
>     320             error[0] = sys.exc_info()
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/tornado/gen.py in run(self)
>    1131 
>    1132                     try:
> -> 1133                         value = future.result()
>    1134                     except Exception:
>    1135                         self.had_exception = True
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/tornado/gen.py in run(self)
>    1139                     if exc_info is not None:
>    1140                         try:
> -> 1141                             yielded = self.gen.throw(*exc_info)
>    1142                         finally:
>    1143                             # Break up a reference to itself
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/dask_xgboost/core.py in _train(client, params, data, labels, dmatrix_kwargs, **kwargs)
>     169     for part in parts:
>     170         if part.status == "error":
> --> 171             yield part  # trigger error locally
>     172 
>     173     # Because XGBoost-python doesn't yet allow iterative training, we need to
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/tornado/gen.py in run(self)
>    1131 
>    1132                     try:
> -> 1133                         value = future.result()
>    1134                     except Exception:
>    1135                         self.had_exception = True
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/asyncio/tasks.py in _wrap_awaitable(awaitable)
>     601     that will later be wrapped in a Task by ensure_future().
>     602     """
> --> 603     return (yield from awaitable.__await__())
>     604 
>     605 
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/distributed/client.py in __await__(self)
>     410 
>     411     def __await__(self):
> --> 412         return self.result().__await__()
>     413 
>     414 
> 
> ~/app/anaconda3/envs/dask/lib/python3.7/site-packages/distributed/client.py in result(self, timeout)
>     219         result = self.client.sync(self._result, callback_timeout=timeout, raiseit=False)
>     220         if self.status == "error":
> --> 221             typ, exc, tb = result
>     222             raise exc.with_traceback(tb)
>     223         elif self.status == "cancelled":
> 
> TypeError: cannot unpack non-iterable coroutine object
> 
```
In the [Stencil example](https://github.com/dask/dask-examples/blob/master/applications/stencils-with-numba.ipynb), the parallel code doesn't do anything to handle boundaries or overlapping. I assume this means that at the block edges their could be some discrepancies? Should this be mentioned or is it small enough to not be significant?
@djhoese any interest?  

There is also https://examples.dask.org/applications/satellite-imagery-geotiff.html , but maybe there is more that we could add there or other examples that we could add. 

As a reminder, examples in dask-examples are tested, rendered statically to serve from examples.dask.org, and available for users as runnable binders.  It's nice way to reach users, and a nice way to have a simple test with many other parts of the ecosystem.
It seems that our pre-defined workspace is no longer showing up on dask-examples.  When I run `jupyter lab workspaces export` I do find that it's using the same workspace that we give it, but it's not showing up correctly.

@ian-r-rose do you have any thoughts on why this might be?  Has JupyterLab changed how it interprets workspaces recently?
When I've shown people examples.dask.org they often don't realize that they can click on the "Launch Binder" button and get a live session.  This is despite our header at the top which says:

> You can run this notebook in a [live session]() or view it [on  Github]()

I think that we might make this more prominent by 

1.  Using a button, similar to the "Launch Binder" button, but more obvious to people who are unfamiliar with Binder
2.   Making that button very large?
3.  Making that button stay on the screen, even after the user scrolls down?
4.  ...?

If only we knew someone with some basic web design skills ... 

cc @jrbourbeau , in case you or anyone around you has ideas ;)