
When trying to do `bundle install`, we receive an error like the following:

```
Downloading lol_dba-2.1.8 revealed dependencies not in the API or the lockfile
(actionpack (>= 3.0, < 6.0), activerecord (>= 3.0, < 6.0), railties (>= 3.0, < 6.0))
```
Used gem versions:

- rails 6.0.1
- lol_dba 2.1.8

The error seems to be caused by the `< 6.0` version constraint in the gemspec file.
Returned options hash from within `parse_options` method in CLI application. See Issue #110 
Using the command `lol_dba:find_indexes` on the command line results in the following error trace:

```
Traceback (most recent call last):
        6: from /usr/local/bundle/bin/lol_dba:23:in `<main>'
        5: from /usr/local/bundle/bin/lol_dba:23:in `load'
        4: from /usr/local/bundle/gems/lol_dba-2.1.8/bin/lol_dba:10:in `<top (required)>'
        3: from /usr/local/bundle/gems/lol_dba-2.1.8/lib/lol_dba/cli.rb:8:in `start'
        2: from /usr/local/bundle/gems/lol_dba-2.1.8/lib/lol_dba/cli.rb:31:in `start'
        1: from /usr/local/bundle/gems/lol_dba-2.1.8/lib/lol_dba/cli.rb:35:in `rescue in start'
/usr/local/bundle/gems/lol_dba-2.1.8/lib/lol_dba/cli.rb:35:in `[]': no implicit conversion of Symbol into Integer (TypeError)
```

Upon further investigation, it seems that the `@options` variable in the `LolDba::CLI` class is not being populated correctly. On line 35 in the `rescue` clause the `@options` variable is an array (not a hash like is expected)
Hi!

I am using v2.1.8 and polymorphic indexes are still suggested despite them already being present in different order, see https://github.com/plentz/lol_dba/pull/107

Furthermore, I believe the suggestion should be in the format `[:poly_type, :poly_id]`. This is somewhat of a controversial topic, but the reasoning for putting the type first is that it is more useful:

Pros:
  - Index can be used for searches only by type (in case we want a count of how many records by types there are)

Cons:
  - Index can not be used to search by just `:poly_id`, but this should be a non-problem since it can be argued that searching by just polymorphic ID does not guarantee that the correct record is selected.

Additionally, there are false positives when using Rails' STI pattern. If a table has a `:type` column `loldba` proposes an `[:id, :type]` index, which is redundant, especially if an index on just `:type` is present (and :id is indexed by default).
Closes #102 
The index may have been added with columns in inverse order and that
won't affect the performance at all.

Closes #106 
I am getting this recommendation after installing the door keeper gem.

```
  1) DB Indexes sets the proper db indexes
     Failure/Error:
       expect(`rake db:find_indexes`).to match(/Yey, no missing indexes found!/), lambda {
                               "Missing db indexes were find run `rake db:find_indexes'" }

       Missing db indexes were find run `rake db:find_indexes'
       Diff:
       @@ -1,2 +1,11 @@
       -/Yey, no missing indexes found!/
       +* TIP: if you have a problem with the index name('index name too long'), you can
       +solve with the :name option. Something like :name => 'my_index'.
       +* run `rails g migration AddMissingIndexes` and add the following content:
       +
       +    class AddMissingIndexes < ActiveRecord::Migration
       +      def change
       +        add_index :oauth_access_tokens, [:doorkeeper/application_id, :doorkeeper/application_id]
       +      end
       +    end
```

Any idea how I can resolve this?
Useful to be used in a build pipeline.
Intercept Arel querys to allow query specific indexes. Maybe something like this:

```ruby
LolDba.suggest_index do
  Customer.where(name: 'Diego')
end
```
And we suggest an index on `name`

related:
https://github.com/rails/rails/tree/master/activerecord/lib/arel