Starting "dinghy up" the first time works without problem.
If I stop dinghy by typing "dinghy halt" or "dinghy stop" the system stopps also without any issues.
But if I try to restart it again with "dinghy up" I always get this error:
```
Unable to verify the Docker daemon is listening: Maximum number of retries (10) exceeded
Traceback (most recent call last):
	9: from /usr/local/bin/_dinghy_command:12:in `<main>'
	8: from /usr/local/Cellar/dinghy/4.6.5/cli/thor/lib/thor/base.rb:440:in `start'
	7: from /usr/local/Cellar/dinghy/4.6.5/cli/thor/lib/thor.rb:359:in `dispatch'
	6: from /usr/local/Cellar/dinghy/4.6.5/cli/thor/lib/thor/invocation.rb:126:in `invoke_command'
	5: from /usr/local/Cellar/dinghy/4.6.5/cli/thor/lib/thor/command.rb:27:in `run'
	4: from /usr/local/Cellar/dinghy/4.6.5/cli/cli.rb:93:in `up'
	3: from /usr/local/Cellar/dinghy/4.6.5/cli/cli.rb:271:in `start_services'
	2: from /usr/local/Cellar/dinghy/4.6.5/cli/dinghy/machine.rb:25:in `up'
	1: from /usr/local/Cellar/dinghy/4.6.5/cli/dinghy/machine.rb:126:in `system'
/usr/local/Cellar/dinghy/4.6.5/cli/dinghy/system.rb:18:in `system': Failure calling `docker-machine start dinghy` (System::Failure)
```
I already tried to use `docker-machine --debug start dinghy` to get more details about the problem, but I do not understand it.

Before the upper error is thrown, this message repeats 10 times:
```
(dinghy) Calling .GetSSHHostname
(dinghy) DBG | executing: /usr/local/bin/prlctl list dinghy --output status --no-header
(dinghy) DBG | executing: /usr/local/bin/prlctl list -i dinghy
(dinghy) DBG | Found lease: 10.211.55.32 for MAC: 001C4208D8F8, expiring at 1571651690, leased for 1800 s.
(dinghy) DBG |
(dinghy) DBG | Found IP lease: 10.211.55.32 for MAC address 001C4208D8F8
(dinghy) DBG |
(dinghy) Calling .GetSSHPort
(dinghy) Calling .GetSSHKeyPath
(dinghy) Calling .GetSSHKeyPath
(dinghy) Calling .GetSSHUsername
Using SSH client type: external
Using SSH private key: /Users/alex/.docker/machine/machines/dinghy/id_rsa (-rw-------)
&{[-F /dev/null -o ConnectionAttempts=3 -o ConnectTimeout=10 -o ControlMaster=no -o ControlPath=none -o LogLevel=quiet -o PasswordAuthentication=no -o ServerAliveInterval=60 -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null docker@10.211.55.32 -o IdentitiesOnly=yes -i /Users/alex/.docker/machine/machines/dinghy/id_rsa -p 22] /usr/local/bin/ssh <nil>}
About to run SSH command:
if ! type netstat 1>/dev/null; then ss -tln; else netstat -tln; fi
SSH cmd err, output: <nil>: Active Internet connections (only servers)
Proto Recv-Q Send-Q Local Address           Foreign Address         State
tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN
tcp        0      0 :::22                   :::*                    LISTEN
``` 
The only way to get my development system running again is to destroy the dinghy machine and create a new one. This is really bad, because important datas of my containers gets destroyed as well.

I use parallels pro 15.1.0 on macOS 10.15 (Catalina)
Dinghy works fine when I am working with VPN. But once I connect to VPN through Cisco VPN, dinghy is not available and does not work as expected. All the Images are present in repos accessible through VPN only. Please suggest any workaround
Hi, 

I'm having an issue and after trying to investigate myself I've come to a dead-end. 

A container in a local dev env was timing out on making some requests, and it seems to be due to an ipv6 issue. 

This command has a delay of ~5s before returning results 

```sh
docker run --rm -it alpine:3.7 ping google.com
``` 

whereas 

```sh
docker run --rm -it alpine:3.7 ping -4 google.com
``` 
is almost instant. 

I think this is because the DNS resolution is not working over ipv6. 

```sh
$ docker run --rm -it alpine:3.7 sh -c 'apk add --no-cache bind-tools && dig google.com AAAA'
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz
(1/4) Installing libgcc (6.4.0-r5)
(2/4) Installing libxml2 (2.9.7-r0)
(3/4) Installing bind-libs (9.11.3-r0)
(4/4) Installing bind-tools (9.11.3-r0)
Executing busybox-1.27.2-r11.trigger
OK: 9 MiB in 17 packages

; <<>> DiG 9.11.3 <<>> google.com AAAA
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOTIMP, id: 8782
;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 4096
; COOKIE: 7dfd9da7da61a45f (echoed)
;; QUESTION SECTION:
;google.com.			IN	AAAA

;; Query time: 0 msec
;; SERVER: 10.0.2.3#53(10.0.2.3)
;; WHEN: Thu Sep 06 08:48:44 UTC 2018
;; MSG SIZE  rcvd: 51
```

```sh
$ docker run --rm -it alpine:3.7 sh -c 'apk add --no-cache bind-tools && dig google.com AAAA @1.1.1.1'
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/main/x86_64/APKINDEX.tar.gz
fetch http://dl-cdn.alpinelinux.org/alpine/v3.7/community/x86_64/APKINDEX.tar.gz
(1/4) Installing libgcc (6.4.0-r5)
(2/4) Installing libxml2 (2.9.7-r0)
(3/4) Installing bind-libs (9.11.3-r0)
(4/4) Installing bind-tools (9.11.3-r0)
Executing busybox-1.27.2-r11.trigger
OK: 9 MiB in 17 packages

; <<>> DiG 9.11.3 <<>> google.com AAAA @1.1.1.1
;; global options: +cmd
;; Got answer:
;; ->>HEADER<<- opcode: QUERY, status: NOERROR, id: 53178
;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1452
;; QUESTION SECTION:
;google.com.			IN	AAAA

;; ANSWER SECTION:
google.com.		229	IN	AAAA	2a00:1450:4009:803::200e

;; Query time: 4 msec
;; SERVER: 1.1.1.1#53(1.1.1.1)
;; WHEN: Wed Sep 05 15:49:14 UTC 2018
;; MSG SIZE  rcvd: 67
```

Not sure why this is causing ping/curl to timeout, but this seems to be the root of my issue. 

Any ideas on how I can fix or work around the issue? 

Thanks a lot!
This appears to be due to the linux file system `inotify` event being generated inside the Dinghy VM changing to a `:modify` event, which the `Listen` gem does not, by default, create a watch for.

Please see [Listen gem issue 450](https://github.com/guard/listen/issues/450) for more information and to track that.

---

As a workaround, adding the following line to your `Guardfile` appears to work:

```ruby
Listen::Adapter::Linux::DEFAULTS[:events] << :modify
```

---

The underlying issue in the Listen gem appears to be the absence of `:modify` from the above constant which is [defined in listen/adapter/linux.rb:7](https://github.com/guard/listen/blob/v3.1.5/lib/listen/adapter/linux.rb#L7)
There is discussion about this scattered around lots of different issues so I'll try to consolidate it here. Dinghy doesn't use MacOS system NFS because the system NFS server doesn't allow nested exports -- in other words, if you export `/Users/me`, you can't also export `/Users/me/some-other-project`. This is a problem for me and some other people, because we have projects using Vagrant with NFS shares, and so exposing the whole home dir breaks those Vagrant projects. 

But for those who don't care about that use case, the system NFS server is faster (and probably less prone to issues). I don't plan on adding support myself since I wouldn't use it, but I'm open to somebody else tackling this addition. You'll need to be very careful to lock this down so you aren't exposing the user's entire home dir over NFS to others on the LAN. docker-machine-nfs may make this easier, I haven't looked at it closely.

Alternatively, it may even be possible to have a daemon listening for Docker events and sharing only specific folders over NFS when they are mounted via Docker, but I suspect it would be difficult to get that working reliably and transparently.
I have been facing the problem these days. I start dinghy and then stop it using `dinghy halt`, and then when I start it again, the logs will be like as follows:
```
Starting the dinghy VM...
Starting NFS daemon, this will require sudo
Waiting for NFS daemon...
NFS mounting failed
Starting the FsEvents daemon
Starting DNS and HTTP proxy
```
The only solution is to restart my laptop. But once I re-launch dinghy, NFS always fails to mount. Is there anything wrong with my settings and workflow? What should I do to fix it?

* MacOS: 10.13.3
* dinghy: 4.6.3
```
cat /usr/local/Cellar/dinghy/4.5.0/local/var/dinghy-NFS.output 
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
unable to send RPC reply
```

```
$ dinghy version
Dinghy 4.5.0
```

Nothing relevant in logs
```
docker@dinghy:~$ cat /var/log/* |grep nfs
docker@dinghy:~$
```

Why? How can I debug?
After issuing an incorrect symlink command `ln -s BAD BAD` FSEV stopped with the following error:

```
/usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:23:in `stat': Too many levels of symbolic links @ rb_file_s_stat - /Users/danielr/Source/BAD (Errno::ELOOP)
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:23:in `build_event'
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:13:in `block (2 levels) in run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:12:in `each'
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:12:in `block in run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/rb-fsevent/lib/rb-fsevent/fsevent.rb:77:in `run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/watch.rb:17:in `run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/fsevents_to_vm/lib/fsevents_to_vm/cli.rb:24:in `start'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/command.rb:27:in `run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/invocation.rb:126:in `invoke_command'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor.rb:359:in `dispatch'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/base.rb:440:in `start'
	from /usr/local/Cellar/dinghy/4.6.3/cli/dinghy/fsevents_to_vm.rb:39:in `run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/daemons/lib/daemons/application.rb:270:in `call'
	from /usr/local/Cellar/dinghy/4.6.3/cli/daemons/lib/daemons/application.rb:270:in `block in start_proc'
	from /usr/local/Cellar/dinghy/4.6.3/cli/daemons/lib/daemons/daemonize.rb:84:in `call_as_daemon'
	from /usr/local/Cellar/dinghy/4.6.3/cli/daemons/lib/daemons/application.rb:274:in `start_proc'
	from /usr/local/Cellar/dinghy/4.6.3/cli/daemons/lib/daemons/application.rb:300:in `start'
	from /usr/local/Cellar/dinghy/4.6.3/cli/dinghy/daemon.rb:73:in `start'
	from /usr/local/Cellar/dinghy/4.6.3/cli/dinghy/daemon.rb:14:in `up'
	from /usr/local/Cellar/dinghy/4.6.3/cli/dinghy/fsevents_to_vm.rb:14:in `up'
	from /usr/local/Cellar/dinghy/4.6.3/cli/cli.rb:259:in `start_services'
	from /usr/local/Cellar/dinghy/4.6.3/cli/cli.rb:85:in `up'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/command.rb:27:in `run'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/invocation.rb:126:in `invoke_command'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor.rb:359:in `dispatch'
	from /usr/local/Cellar/dinghy/4.6.3/cli/thor/lib/thor/base.rb:440:in `start'
	from /usr/local/bin/_dinghy_command:12:in `<main>'
```
Hi there,

First of all wanted to really give my thanks to you for this amazing tool! It really made my life easier using docker under macOs. 

Sadly though I'm opening this issue because I am looking for a fix for the following scenario.

I am developing in Go and I'm using this [https://github.com/githubnemo/CompileDaemon](https://github.com/githubnemo/CompileDaemon) in order to listen to file changes and automatically rebuild my go binary. 

However when I boot up dinghy and sequently my Go container every change I make in my IDE will not get picked up by the daemon. But when I don't use dinghy and just use native docker for mac without any magic the daemon works correctly. 

Any idea what kind of fix I can apply to solve this annoying issue? Cuz as of now it kind of forces me to always skip on using dinghy for my Go projects.

I really appreciate any help you could provide!

Some additional info:

Dinghy `Version 4.6.1`
Virtualbox  `Version 5.1.30 r118389 (Qt5.6.3)`
Boot2Docker `version 17.09.1-ce, build HEAD : e7de9ae - Fri Dec  8 19:41:36 UTC 2017`
Docker version `17.09.1-ce, build 19e2cf6`
Firewall `deactivated`

dinghy-FsEvents.output is empty

PS.
I should probably mention as well that the file actually does update correctly inside the container if I modify it in my IDE, it just doesn't trigger a rebuild event for the daemon. 

Running `fsevents_to_vm start ./` manually I get this output:
```
/Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh/transport/session.rb:67:in `initialize': Object#timeout is deprecated, use Timeout.timeout instead.
Error sending event: Connection refused - connect(2) for nil port 22
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh/transport/session.rb:70:in `initialize'
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh/transport/session.rb:70:in `open'
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh/transport/session.rb:70:in `block in initialize'
    /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/timeout.rb:74:in `timeout'
    /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/lib/ruby/2.3.0/timeout.rb:120:in `timeout'
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh/transport/session.rb:67:in `initialize'
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh.rb:207:in `new'
    /Library/Ruby/Gems/2.3.0/gems/net-ssh-2.9.4/lib/net/ssh.rb:207:in `start'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/ssh_emit.rb:24:in `ssh'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/ssh_emit.rb:14:in `event'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/cli.rb:30:in `block in start'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/watch.rb:14:in `block (2 levels) in run'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/watch.rb:12:in `each'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/watch.rb:12:in `block in run'
    /Library/Ruby/Gems/2.3.0/gems/rb-fsevent-0.9.8/lib/rb-fsevent/fsevent.rb:45:in `run'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/watch.rb:17:in `run'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/lib/fsevents_to_vm/cli.rb:24:in `start'
    /Library/Ruby/Gems/2.3.0/gems/thor-0.19.4/lib/thor/command.rb:27:in `run'
    /Library/Ruby/Gems/2.3.0/gems/thor-0.19.4/lib/thor/invocation.rb:126:in `invoke_command'
    /Library/Ruby/Gems/2.3.0/gems/thor-0.19.4/lib/thor.rb:369:in `dispatch'
    /Library/Ruby/Gems/2.3.0/gems/thor-0.19.4/lib/thor/base.rb:444:in `start'
    /Library/Ruby/Gems/2.3.0/gems/fsevents_to_vm-1.1.3/exe/fsevents_to_vm:4:in `<top (required)>'
    /usr/local/bin/fsevents_to_vm:22:in `load'
    /usr/local/bin/fsevents_to_vm:22:in `<main>'

``` 


I would prefer to get the scattered configs out of my home directory and into a central directory (I prefer `~/.config`). dinghy is one of the few left - it is possible to customize where the preferences are installed? My preference would be to use the XDG_CONFIG_HOME if set, even on OSX...