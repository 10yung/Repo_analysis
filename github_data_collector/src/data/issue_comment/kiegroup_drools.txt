https://issues.redhat.com/browse/DROOLS-4945

Bundle:
https://github.com/kiegroup/drools/pull/2727
https://github.com/kiegroup/drools-wb/pull/1283
See https://issues.redhat.com/browse/RHDM-1189
See https://issues.redhat.com/browse/RHPAM-2617

Note: The JIRA lacks QE ACK+
See https://issues.redhat.com/browse/RHDM-1159

The XLS attached to the JIRA now converts correctly (and the User can view _source_).

Part of an ensemble:
- https://github.com/kiegroup/drools/pull/2723
- https://github.com/kiegroup/drools-wb/pull/1282

https://issues.redhat.com/browse/DROOLS-4936
In SpringBoot application classes and resources are placed into BOOT-INF/classes/ subfolder of the assembled JAR file. That is why fileName (see updated code) starts with BOOT-INF/classes/ folder name. And template.getDtable() (taken from kmodule.xml) does not contain BOOT-INF/classes/ prefix. For this reason "if-condition" is changed to "fileName.endsWith( template.getDtable() )" - it will work both for SpringBoot and non-SpringBoot application.

As well, to get a template resource, a full path (with BOOT-INF/classes/ root subfolder) should be specified. That is why original code "getResource( template.getTemplate() );" will not work for SpringBoot application. Because of this, this code was replaced by "getResource( fileName.replace(template.getDtable(), "") + template.getTemplate() );". New code will work no matter which root folder is used inside JAR file - in SpringBoot application it will always prepend template.getTemplate() value with BOOT-INF/classes/ subfolder.
When a table with any hit policy and multiple output gets executed a RuntimeException is thrown.
Report the error with HitPolicyViolationEvent as is done for the unique hit policy is a possible a better way.
The result of the present thrown get swallowed and doesn't return a valuable error for the user
add RuleUnitDescription createRuleUnitDescription( KiePackage pkg, String ruleUnitSimpleName ); implementation should be a no-op because it is only used in Kogito

requires API change https://github.com/kiegroup/droolsjbpm-knowledge/pull/419
â€¦materialized Lambda during incremental compilation

- Unit Test only now
This is a draft PR to share my idea. Please let me know your thoughts.

Basically, it writes BitMask variables into the materialized LambdaConsequence as "private final" fields so execute() method can access them.

It passed all drools-model unit tests but I found that it fails with IncrementalCompilationCepTest#testIncrementalCompilationWithNewEvent in drools-test-coverage/test-compiler-integration. The failure is caused by duplication of LambdaConsequence class name during incremental compilation. I will look into it further.

One more point from code design aspect, I added "List<VariableDeclarator> bitMaskVariables" to MaterializedLambda. Actually, "bitMaskVariables" is required only by MaterializedLambdaConsequence. But if I add "List<VariableDeclarator> bitMaskVariables" to MaterializedLambdaConsequence, I would need more refactoring (e.g. MaterializedLambda.create() and ExecModelLambdaPostProcessor.extractLambdaFromMethodCall()). If you think it's worth refactoring, please let me know.

Thanks!
