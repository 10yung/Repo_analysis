Is it possible to use this to make a MIDI plugin that can be used in Ableton Live? I have tried several combinations of settings but I haven't yet hit on something that works. If someone can point me in the general direction I will be happy to do the legwork myself. So far, I have tried the `fwd_midi` example and executed the steps [here](https://help.ableton.com/hc/en-us/articles/209070189-Accessing-the-MIDI-output-of-a-VST-plug-in), but I didn't get any MIDI output. One thing that seemed weird was that Live drops it into the spot for an audio plugin (to the right of the instrument in the UI) rather than the spot for a MIDI plugin (to the left of the instrument).

As of PR #115 we started seeing warnings for clippy's [`missing_safety_doc`](https://rust-lang.github.io/rust-clippy/master/#missing_safety_doc) lint. Unsafe functions should document what preconditions have to be met in order to safely call those functions.

Remove all instances of `-A clippy::missing-safety-doc` in `.travis.yml` (or whatever pipeline we're using by then) when resolved.
I was writing a VST for a HW synth to convert CCs to SysEx automation and vice-versa (while letting irrelevant msgs through unchanged).
Due to the lifetime on [`Event`](https://rustaudio.github.io/vst-rs/vst/event/enum.Event.html)/[`SysExEvent.payload`](https://rustaudio.github.io/vst-rs/vst/event/struct.SysExEvent.html#structfield.payload) I couldn't just `map` incoming msgs to outgoing msgs, but had to push those msgs that should be mapped to SysEx to a separate vec, and then send that one afterwards (so I have two calls to `send_buffer.send_events`, one for the filtered input events and one for the payloads vec mapped to `SysExEvent`s).
But I want to preserve the ordering between the input and output msgs, i.e. not change the order of the param automation. 
So this requires being able to return `SysExEvent`s where the payload's lifetime comes from a vec outside of the `map`ping closure.
But currently it's not possible, I get:
> error: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements
note: ...so that closure can access `payloads`
note: first, the lifetime cannot outlive the lifetime `'_` as defined on the body at 336:44...
note: but, the lifetime must be valid for the method call at 336:17...
note: ...so that a type/lifetime parameter is in scope 

The lifetime that the incoming events have comes from this:
https://github.com/RustAudio/vst-rs/blob/d7d5b6f0c049bac923c87ab9d49ca743a8adcb6a/src/api.rs#L454-L457

Any thoughts what the best approach would be, to make this kind of use case more convenient?
Clippy identified that we should implement the `FromStr` trait for `CanDo` instead of just [making our own `from_str` function](https://github.com/RustAudio/vst-rs/blob/aa7cc43daac810be800741a96a38dea89c8cf25b/src/plugin.rs#L411).

This decision came out of #104, but I didn't want to do it there because it is a slight function signature change. I think it should be pretty easy though.
Retroactively update `CHANGELOG.md`:
 - Figure out what "notable" changes happened in each crates.io release, and put that stuff into the changelog file.
 - Format it similar to the format described in ["Keep a Changelog"](https://keepachangelog.com/en/1.0.0/), where needed.

In the future, any releases should have an updated changelog before release.

*[EDIT: never mind about the tagging stuff, we already do that. Removed from the issue.]*

-----

Related:
 - #61 
 - #70 

See also:
 - https://keepachangelog.com/en/1.0.0/
 - https://semver.org/spec/v2.0.0.html
This is an issue to track the TODO bullet point in the `README.md` that I removed in #94.

This TODO is very vague. Are there particular examples we'd like to add?
This is an issue to track the TODO bullet point in the `README.md` that I removed in #94.

This TODO is very vague. Can we come up with a list of tests we actually want to implement?
This is an issue to track the TODO bullet point in the `README.md` that I removed in #94.

What still needs to be done? Which opcodes still need to be implemented?

(feel free to close this if there's nothing left to do)
As a rust-vst developer, I would like to see a document that lists out all the possible GUI approaches with their pros and cons. The list should clearly outline any blockers and assumptions made for those blockers, and speculations for possible workarounds or fixes to said blockers.

Requirement for #82 

There's some text written here in the wiki: https://github.com/rust-dsp/rust-vst/wiki/Rust-Audio-GUI-Development-Progress