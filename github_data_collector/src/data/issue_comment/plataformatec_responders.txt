Looks like the 2.4 release is pinned to Rails < 6.0.  I need a way to run rails 6 on the 2.4.x branch.

Bump the rails version requirement, or if rails 6 is still considered unstable maybe we need a 2.x development branch? 
I have a strange issue that I think is due to `respond_with` and how it generates the path.

I have a subdomain constraint for an admin area in my app, and a custom domain constraint for the public side (just makes sure a restricted subdomain isn't being used). If a user updates their profile on the public side, the `respond_with @profile` tries to take them to the admin show page for their profile (paths are identical, but subdomain is different). If I explicitly pass the location using `respond_with @profile, location: -> { profile_path(@profile) }` it works correctly and they are taken to the public show page for their profile.

I thought that this location I'm passing is the same as what responders are using by default, so I would expect identical behaviour. As it stands right now, I'm specifying the location everywhere so I don't run into this unexpected behaviour for duplicate paths between subdomains.
While using the syntax 
`
respond_with(@foo)
`
it was causing the error "uninitialized constant Mime::JSON".

I had to use the original syntax of:
`
respond_to  do |format|
format.json { render @foo )
end
`
This has been raised before 
https://github.com/plataformatec/responders/issues/154 

I am using responders version 2.4 and i am getting a empty body when i try to access the api.

Here is the code 

```ruby
class ApplicationController < ActionController::API
  respond_to :json
end
```
```ruby
class IndexController < ApplicationController
  def index
    respond_with({test: '123'}.to_json)
    # render json: {test: '123'}.to_json
  end
end
```
I am responding with a static json which is resulting in a empty body. I have a repo setup to replicate this issue https://github.com/v1nayv/my_api . Access http://localhost:3000/index using POSTMAN or any restful client.

This used to work on prior version of rails.

Possibly due to this comment in _lib/action_dispatch/http/mime_type.rb_ in the _actionpack_ gem:

``` ruby
  # ALL isn't a real MIME type, so we don't register it for lookup with the
  # other concrete types. It's a wildcard match that we use for `respond_to`
  # negotiation internals.
```

Hi there.
I have a problem with status returning.

``` ruby
@model = Model.create(some_params)
respond_with @model
```

I need to return 200 if everything is ok, and 422 if some validations failed. But I always get 200.
I thought about 

``` ruby
respond_with @model, status: @model.errors.any? ? :unprocessable_entity : :success
```

But as for me it looks not so good
How may I fix it?

Hi!
Using responders:

```
      def create
        @image_record.user = current_user
        @image_record.save
        # render 'show', status: :created, location: api_v1_image_record_url(@image_record)
        respond_with :api, :v1, @image_record # 17th row
      end
```

And have an error

```
  2) Api::V1 #create image with attachment 
     Failure/Error: before { post '/api/v1/image_records', image_record: attributes_for(:image_record).merge(attachments_attributes: [file: fixture_file('test_image.jpg')]) }
     NoMethodError:
       undefined method `uploader' for #<CarrierWave::Mounter:0x007f84a2de4508>
     # ./app/controllers/api/v1/image_records_controller.rb:17:in `create'
     # ./spec/api/api_spec.rb:66:in `block (4 levels) in <top (required)>'
     # ./spec/spec_helper.rb:27:in `block (3 levels) in <top (required)>'
     # ./spec/spec_helper.rb:26:in `block (2 levels) in <top (required)>'
```

So have no clue where is uploader is called and where this exception is from. Definitely there's some lack of stack trace. Why?
When use simple do render everything works fine.
I use mongoid, nested model inside the image_record with carrierwave-mongoid.

Please help me to debug it?
