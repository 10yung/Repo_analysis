This PR is allows `truncate_tables` in the ActiveRecord adapter to take in a list of table names in two different ways: 1) as a regular array of tables: `truncate_tables(['users','agents'])` or 2) as a list of arguments: `truncate_tables('users','agents')`. This is because when using DatabaseCleaner in conjunction with a connection adapter to imitate the `truncate_tables` method as it's implemented in the [rails 6 version of active record](https://github.com/rails/rails/blob/6-0-stable/activerecord/lib/active_record/connection_adapters/abstract/database_statements.rb#L188), cleaning with truncation is broken (as shown in an example error below).

```
An error occurred in a `before(:suite)` hook.
Failure/Error: DatabaseCleaner.clean_with(:truncation)

ActiveRecord::StatementInvalid:
  RandomAdapter::MysqlError: random_adapter_query_recv: 1103 Incorrect table name '["table1", "table2", "table3'
.
.
.
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/active_record/truncation.rb:239:in `block in clean'
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/active_record/truncation.rb:235:in `clean'
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/base.rb:48:in `clean_with'
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/configuration.rb:91:in `block in clean_with'
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/configuration.rb:91:in `each'
# /usr/local/bundle/gems/database_cleaner-1.7.0/lib/database_cleaner/configuration.rb:91:in `clean_with'
# ./spec/rails_helper.rb:47:in `block (2 levels) in <top (required)>'
```

As you can see here, the `truncate_tables` method is trying to the array of tables as one table name. 

Let me know your thoughts on this! Thanks!
Quick fix for the ActiveRecord adapter. This was fixed for the Postgres adapter in Issue  https://github.com/DatabaseCleaner/database_cleaner/issues/445, PR  https://github.com/DatabaseCleaner/database_cleaner/pull/487.

I wrote a spec but had problems building the mysql 2.9.1 gem, so was unable to run the spec (sorry!) but I did load the gem in a project and verified the fix manually.
Your example must include after each clean code.

```
config.after(:each) do
    DatabaseCleaner.clean
end
```
I created a SQLServerAdapter to so I could override the implementation of the database_cleaner_view_cache method since sql server.

The other option was to change the underlying implementation of https://github.com/DatabaseCleaner/database_cleaner/blame/master/lib/database_cleaner/active_record/truncation.rb#L25 
I'm not sure why this is part of the base implementation?
```ruby
 where table_schema = '#{current_database}'
```
Using `auto_savepoint` for transactions allows any inner transactions (defined by tested code) to be rolled back independently, and will also automatically catch `Sequel::Rollback` exceptions, as would be the case if no transactions were used. Any code that relies on transactions will remain working as expected in the tests.
Coackroach DB doesn't use incremental sequence for row ids hence the `RESTART IDENTITY` bit isn't supported. This adds a very simple test to disable it and make the truncation strategy works with cockroachdb

Signed-off-by: Julien 'Lta' BALLET <contact@lta.io>
Hello,

I am trying to understand the implication of having an explicit (although not recommended) call to `DatabaseCleaner.clean` inside an `after` block inside a spec, which is being run in a suite with parallel_tests gem. 

From what I understand the parallel_tests gem runs the specs in different processes each with it's own database. 
Looking at the DatabaseCleaner code I see that the clean method invokes cleaning on all the connections available. 

Since I failed to trace back the code properly, requesting some help in understand what the call to `clean` method will do. Is it going to wipe out the database in the process or leak out to other processes somehow?  I kind of infer that such calls are causing flaky tests but I have not had a solid ground to claim that such method calls cause it. 
```
NoMethodError:
  undefined method `url_whitelist=' for DatabaseCleaner:Module
```

This is occurring because the latest gem version `1.7.0` was released on April 19, 2018 - one day prior to [these changes](https://github.com/DatabaseCleaner/database_cleaner/commit/c0013de1ee7afb4e25a0581940e22408f73273f9) being merged in.

When specifying `gem "database_cleaner", git: "https://github.com/DatabaseCleaner/database_cleaner", ref: "c0013de1ee7afb4e25a0581940e22408f73273f9"`, this fixes the issue mentioned above.

Please re-release the newest gem version so I can remove the gemfile dependency on the commit SHA. üôè 
I have update rails version of my project form 4.2 to 5.2. Now I am getting following error on some of my tests randomly.
`Counters::DefectDistributionContext execute group by defect should group counters by defect
       Failure/Error: DatabaseCleaner[:active_record].clean_with(:truncation)`
       
       `ActiveRecord::StatementInvalid:
         PG::ConnectionBad: connection is closed: TRUNCATE TABLE "public"."alerts", "public"."gv_sub_equipments", "public"."machine_part_changes", "public"."settings", "public"."article_attachments", "public"."systematic_reject_machines", "public"."furnaces", "public"."attachments", "public"."defect_translations", "public"."gv_equipment_families", "public"."gv_equipments", "public"."gv_squads", "public"."article_check_specification_tolerances", "public"."gv_area_equipments", "public"."gv_areas", "public"."machine_downtimes", "public"."machine_groups", "public"."article_machine_part_settings", "public"."checks", "public"."comments", "public"."counters", "public"."customers", "public"."defect_groups", "public"."defects", "public"."delayed_jobs", "public"."job_specifications", "public"."machine_part_change_reasons", "public"."machine_part_translations", "public"."machine_parts", "public"."machine_type_group_machine_types", "public"."machine_type_groups", "public"."machine_types", "public"."messages", "public"."check_specification_priorities", "public"."check_specification_responsibility_areas", "public"."responsibility_areas", "public"."check_specification_machine_types", "public"."gv_components", "public"."gv_entries", "public"."gv_stop_reasons", "public"."gv_sub_equipment_components", "public"."jobs", "public"."lab_recipe_versions", "public"."lab_recipes", "public"."lines", "public"."mold_sets", "public"."check_groups", "public"."check_specifications", "public"."articles", "public"."packing_schemes", "public"."rails_admin_settings", "public"."check_batches", "public"."reasons", "public"."rejects", "public"."roles", "public"."shift_definitions", "public"."shifts", "public"."system_log_entries", "public"."task_status_changes", "public"."tasks", "public"."tresholds", "public"."user_responsibility_areas", "public"."users", "public"."users_roles", "public"."workstations", "public"."machines", "public"."systematic_rejects" RESTART IDENTITY CASCADE`
What should I do to fix this?
I recently switched our config from transactional to truncation strategy as shown in the Rspec + Capybara example in Readme.

However, this seems to affect the data created in the `before(:all)`. With transaction strategy, records created in `before(:all)` were persisted and available between examples, as expected. With truncation strategy, however, records created within `before(:all)` are only available in the first test, and are then removed.

Is this an expected behaviour/side-effect of transactional strategy?