In my opinion better to switch to HTTPS for external links (already checked and every destination supports it).
I've tried following the instructions for multiple workers but I can't make sense of the behaviour I'm seeing.

I have a Rails app which calls out to an API, this API in turn makes an http request back to the original Rails app. If I run my Rails app with Unicorn and multiple workers this works as expected. If I run the Rails app using pow and try the same thing the request back into the Rails app appears to be blocked (waiting for a worker/process?).

As an experiment I tried a long running request to the same rails app, via pow. Then start a second request. By tailing the logs I can see Rails responding but again the browser seems to hang waiting for something until the original request is complete.

Any explanation of this behaviour or help in allowing me to run the scenario correctly using pow would be appreciated, thanks.


I've just upgrade my machine to 10.13.3 and both Safari (11.03) and Chrome (64.0.3282.140) can no longer access my sites served up by pow.

Error :
> Safari can’t open the page “https://wrap-scraper.dev” because Safari can’t establish a secure connection to the server “wrap-scraper.dev”.

And...

> This site can’t be reached wrap-scraper.dev refused to connect.

Note I have tried both http:// and https:// with the same outcome.

Firefox (57.01) and `curl -H host:wrap-scraper.dev localhost/ ` both still work as expected.

Any ideas on what is happening?
Thanks for making pow, it's been a great developer helper for me for many years.

I originally posted this issue in basecamp/powprox#12, but have since noticed the issue when running pow directly.

I've configured the domain to proxy a node.js app (running koa with koa-static serving the files). When I load the page, about a third of the resources (~6) fail when running through powprox (https), and about 1/20 fail when not running through pow. None fail when running directly. The requests fail with 503 status errors and a `x-pow-template:application_not_found`, even though the application is there and working for the other requests.

I originally did a lot of digging in powprox's setup to figure out why to no avail. Since observing the issue with pow directly I tried looking at the error log, but can only find `access.log` in the Log directory (as per the User Manual). The manual mentions error logs can be found in the "`apps` directory", but I can't find a mention of where this is. Reading through the code is seems it should be next to the `access.log`, but isn't. This makes me think either writing error logs is broken, or pow isn't aware of the error.

In the end I tried updating the pow config to use more workers, which resolved the issue. I returned it to 2 workers & restarted pow, and the issue is still gone. It seems restarting pow was all that was needed.

I will report back if the issue reappears and I'm able to find a solution. In the meantime, where can I find the error logs?

Thanks,
Magnus
```
$ curl get.pow.cx | sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  9039  100  9039    0     0  26353      0 --:--:-- --:--:-- --:--:-- 26429
*** Installing Pow 0.6.0...
*** Installing local configuration files...
*** Installing system configuration files as root...
```

Version: 0.6.0
I think it fails at this line in the installation shell script:

```
$ sudo launchctl bootstrap system /Library/LaunchDaemons/cx.pow.firewall.plist
/Library/LaunchDaemons/cx.pow.firewall.plist: service already loaded
```
POW_DOMAINS dropped the S in the config file.
Since [this](http://pow.cx/manual.html#section_3.1) is the case:

>The .test domain is preferred since Google owns the .dev TLD and has recently enabled HSTS, forcing all requests to use HTTPS. Pow supports .dev by default for backward compatibility only.

`.test` domain should be shown as default one on Welcome page and `.dev` left for backward compatibility only.
  
My team uses some sort of alias in their /etc/hosts or whatever to make `http://oursite.dev:3000` go to localhost:3000. They manually start their servers. That's fine, but I'd prefer to use POW, and a simple `http://oursite.dev`. 

The problem is that we have some hardcoded URLs in development, or external services, that want to go to `http://oursite.dev:3000`.

I would like for `http://oursite.dev:3000` to work just like `http://oursite.dev`. 

Basically, I want POW to listen to requests on port 3000 and port 80 and map them to the same Rack app.

I tried:

```sh
$ cd ~/.pow
$ echo 'http://oursite.dev:3000' > oursite
$ echo 'http://oursite.dev' > oursite
```

But.... that obviously doesn't work - as it's trying to forward requests to `http://oursite.dev` (as in: the POW domain represented by the textfile `~/.pow/oursite`) to `http://oursite.dev:3000` and there's nothing listening to that URL/port combination.

Does anyone know of any way to make this work?
we should put it as default README.

This will make .pow 7X faster

![](http://d.pr/i/s7XbKv+)
I find this repo finally updated in 2014... I wonder weather this repo still being use? Or is there any alternative for local rails development?

thanks for your suggestions.