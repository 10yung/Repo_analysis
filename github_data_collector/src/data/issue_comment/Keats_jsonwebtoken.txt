According to [the documentation](https://github.com/Keats/jsonwebtoken/tree/89fbd8f0ce5337d9bb2244007526a40bec1aa207#validation), it is stated that
> This library validates automatically the exp and nbf claims if present.

However, from the source code, it would be an opt-out option to validate `exp` claim, causing a disparency from the documentation and the actual logic.

https://github.com/Keats/jsonwebtoken/blob/89fbd8f0ce5337d9bb2244007526a40bec1aa207/src/validation.rs#L90
https://github.com/Keats/jsonwebtoken/blob/89fbd8f0ce5337d9bb2244007526a40bec1aa207/src/validation.rs#L105

As specified in https://tools.ietf.org/html/rfc7518#section-3.5

-  PS256 - RSASSA-PSS using SHA-256 hash algorithm
-  PS384 - RSASSA-PSS using SHA-384 hash algorithm
-  PS512 - RSASSA-PSS using SHA-512 hash algorithm

The RSASSA-PSS signature verification algorithm is supported by ring 

Please specify that in the test folder, the correct public key for `private_rsa_key.pem` is `public_rsa_key_8.pem` and not `public_rsa_key.pem`. Looking at the tests where the `*.der` files are one would assume that it's `public_rsa_key.pem` that is the correct one but I only got the test token verified by using `public_rsa_key_8.pem` and thought there was something wrong in my `base64` to bytearray conversion :)
I'm having a hard time authenticating a token using a x5c.  (MS OAuth/Azure) 

Below is the code... 

```rust
// Trying to isolate the problem by only checking the signature. 
let validation_config = jsonwebtoken::Validation {
            algorithms: vec![jsonwebtoken::Algorithm::RS256],
            leeway: 0,
            validate_exp: false,
            validate_iat: false,
            validate_nbf: false,
            aud: None,
            iss: None,
            sub: None
        };
let token = "eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIn...";
let x5c_cert = "MIIDBTCCAe2gAwIBAgIQKOfEJNDyDplBSXKYcM..."; 

let raw_der = base64::decode_config(der, base64::STANDARD).unwrap();
let d = jsonwebtoken::decode::<MsOAuthPayload>(&token, &raw_der, &validation_config);
```

The above always returns InvalidSignature.  

* RS265 is the correct algo. 
* The cert is correct. I tried it on jwt.io by adding a BEGIN/END cert and it validates fine. 
* I used ssl to convert the BEGIN/END pem to DER and the bytes match up from the base 64 decode. 
* The key URL is: https://login.microsoftonline.com/common/discovery/v2.0/keys but my specific tenant returns the same keys. 

Anyone have some insight on what I'm doing wrong here? 

Thanks 

There are quite a few changes happening in the PRs: more input format for RSA (#69, #74), ECDSA signing & verification (#73) as well as some Validation changes.

I have already removed the `iat` check in the `next` branch since it isn't something that should be checked.

Right now, `Validation::algorithms` is a `vec`. I don't remember why but it shouldn't be the case, it should be an `algorithm: Algorithm` instead, I will accept a PR for that or do it myself later.

#69 also adds a standalone `verify_rsa` fn, which I'm wondering if we can somehow streamline it with the rest of the crate.

Since Rust doesn't have default parameters, we always have to pass a `Validation` struct currently. Maybe we can put the decoding onto this struct instead so you get something like:

```rust
// currently
let token = decode::<Claims>(&token, "secret".as_ref(), &Validation::default())?;

// possible
// `JwtDecoder` has the same fields as the current `Validation`
let token = JwtDecoder::default().decode_hs256::<Claims>(&token, "secret".as_ref())?;
```
This way we don't have a single function where we are trying to fit all arguments inside and the user has to select explicitely which decode fn to use. This solves the `vec` of algorithms at the same time and allows having better documentation for each. The downside is duplication of those functions/docs for the various digest values (`decode_hs256`, `decode_hs384`, `decode_hs512` for each algo).

Any other ideas/criticisms/things missing?

ccing the people involved in various issues/PRs recently
@AaronFriel @jbg @Jake-Shadle @matthew-nichols-westtel @greglearns
The listing for jsonwebtoken on https://jwt.io/#libraries-io seems to be outdated, e.g. it claims you don't support `exp` checking. You can submit a PR to update it at their repo:
https://github.com/jsonwebtoken/jsonwebtoken.github.io/blob/master/views/website/libraries/13-Rust.json#L38-L68
I have a rust service that needs to verify JWTs from 3rd-party services that I do not control. The 3rd party service (Portier, in this case) supplies the RSA public components (`n` modulus, and `e` exponent). Given that `jsonwebtoken can only read DER encoded keys` and that I cannot manually run the recommended command-line options for OpenSSL, what is the recommended way of being able to decode a JWT using JsonWebToken in a rust service?

Currently, I have been able to get an ssh public key from the rsa components (n, e) https://github.com/coreos/openssh-keys/blob/master/src/lib.rs#L363 but that seems like a dead end since a public ssh key doesn't seem to be easily converted to DER.

Any ideas?
Any plan to support JWE support?

https://tools.ietf.org/html/rfc7516

https://github.com/SkyLothar/lua-resty-jwt#sign-jwe
https://tools.ietf.org/html/rfc7520