Use the cayley web ui to add a quad, ie

```
99 test testvalue .
```

Do a query, ie

```
g.V('99').Save("test").All()
```

Get the following result:

```
{
	"result": [
		{
			"\\"test\\"": "value",
			"id": "99"
		}
	]
}
```

expected:

```
{
	"result": [
		{
			"test": "value",
			"id": "99"
		}
	]
}
```

This was tested in 0.7.5 and does not happen.

Using windows x64 release builds.
Depends on #905

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/cayleygraph/cayley/909)
<!-- Reviewable:end -->

Depends on #909 

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/cayleygraph/cayley/908)
<!-- Reviewable:end -->

Depends on #904 
Define a `Match` step in LinkedQL that accepts a subgraph pattern and return entities matching the graph.
Example:
```go
Vertex().Match({ "http://example.org/likes": "http://example.org/bob" })
```
Will return all the entities which have a property pointing to Bob.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/cayleygraph/cayley/905)
<!-- Reviewable:end -->

Followup tasks to https://github.com/cayleygraph/cayley/issues/877
 - [ ] Prefixes methods @iddan 
 - [ ]  `.rename({ [property: string]: IRI })` should replace `.save(IRI, tag)` for aliasing property name to something else. (+ `.renameReverse()`). There is no such operator in Gremlin but there is one in MongoDB's aggregation @iddan 
 - [ ] `.properties()` called empty should save all properties (requires `Path.save(Path)` @dennwc)
 - [ ] `.entity()` and `.entities()` to return only entities. Currently it returns values as well (@iddan & @dennwc)
 - [ ] Generic `.documents()` https://github.com/cayleygraph/cayley/issues/899
 - [ ] `.reverseProperties()` should wrap saved properties in the document with `@reverse`
 - [ ] Nicer API for automatic type conversion @iddan:
    - [ ] Valid ID string to IRI or BNode
    - [ ] IRI to properties path https://github.com/cayleygraph/cayley/issues/899
 - [ ] Refactor Filter and Operator @iddan
    - [x] Numeric operators
    - [ ] Pattern operators
 - [ ] `.match(pattern)` should be used for flat and deep matching of objects using structure pattern @iddan. For example:
   ```javascript
   .match({
        "address": {
            "street": { "@id": "yehuda-halevi" }
            "number": 33,
        },
    })
    ```
 - [x] Rename view to visit @iddan
 - [ ] Make the schema the source of truth @iddan
     - [ ] Missing Information about min cardinality of fields (can be used in some type systems and in all runtimes)
Depends on #902
Code-generate LinkedQL Go client according to the LinkedQL schema.
This PR includes a minimal implementation of an OWL in-memory store to support the code generation.

### Missing
 - [ ] Documentation and example of integration with the [new client library](https://github.com/cayleygraph/cayley/pull/896)
 - [ ] Method to unmarshal received data structures (something like `json.Unmarshal` but for JSON-LD)

This PR was recreated as the previous one (#895) targeted the LinkedQL branch.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/cayleygraph/cayley/897)
<!-- Reviewable:end -->

MVP implementation of text search based on [Bleve](https://github.com/blevesearch/bleve). There are many capabilities not included in this PR but anything beyond the basic text search should be added in additional PRs.

Resolves #428

### Tasks
 - [ ] For KV stores, Implement [Bleve's KV Store](https://github.com/blevesearch/bleve/blob/master/index/store/kvstore.go) instead of creating a file.
 - [x] Update data model to create single property Bleve documents
 - [x] Hook up `search.Index()` and `search.Delete()` for quads write and delete
 - [x] Hook up search configuration to Cayley configuration
 - [x] Hookup `search.Configuration` to Cayley config file (and CLI?)
 - [ ] Documentation:
    - [x] Tutorial
    - [ ] Detailed documentation of configuration options

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/cayleygraph/cayley/893)
<!-- Reviewable:end -->

**Description**
When executing:
```javascript
g.V().out(predicate).is(a, b)
```
It is signifcantly slower than 
```javascript
g.V().has(predicate, a).union(g.V().has(predicate, .b)
```
I presume it has to do with the way we use indexes for `.out().is()` which is not optimized like `.has()` 
**Description**

quad subject nil after removing 2 quads with same subject and adding a new one the same transaction.

starting with empty store:
```
2019/11/06 09:18:12 after first transaction:
2019/11/06 09:18:12 (quad.Quad) "a" -- "to" -> "b"
2019/11/06 09:18:12 (quad.Quad) "a" -- "updated" -> "2019-11-06T11:45:26Z"^^<schema:DateTime>
2019/11/06 09:18:12 after second transaction:
2019/11/06 09:18:12 (quad.Quad) <nil> -- "updated" -> "2019-11-06T11:46:26Z"^^<schema:DateTime>
2019/11/06 09:18:12 expected:
2019/11/06 09:18:12 (quad.Quad) "a" -- "updated" -> "2019-11-06T11:46:26Z"^^<schema:DateTime>
```

**Steps to reproduce the issue:**


```go
package main

import (
	"log"
	"os"
	"time"

	"github.com/cayleygraph/cayley"
	"github.com/cayleygraph/cayley/graph"
	_ "github.com/cayleygraph/cayley/graph/kv/all"
	"github.com/cayleygraph/quad"

	"github.com/davecgh/go-spew/spew"
)

const (
	dbpath = ".db/leveldb"
	dbtype = "leveldb"
//	dbpath = ".db/bolt"
//	dbtype = "bolt"
)

func main() {
	dbExists, err := exists(dbpath)
	if err != nil {
		log.Fatal(err)
	}

	if !dbExists {
		// initialize the database
		err := graph.InitQuadStore(dbtype, dbpath, nil)
		if err != nil {
			if err != graph.ErrDatabaseExists {
				log.Fatal(err)
			}
		}
	}

	store, err := cayley.NewGraph(dbtype, dbpath, nil)
	if err != nil {
		log.Fatal(err)
	}

	t0, err := time.Parse(time.RFC3339, "2019-11-06T11:45:26.371Z")
	t1, err := time.Parse(time.RFC3339, "2019-11-06T11:46:26.371Z")

	addQuads := []quad.Quad{
		quad.Make("a", "to", "b", nil),
		quad.Make("a", "updated", t0, nil),
	}

	t := cayley.NewTransaction()
	for _, q := range addQuads {
		t.AddQuad(q)
	}
	err = store.ApplyTransaction(t)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("after first transaction:")
	it := store.QuadsAllIterator()
	for it.Next(nil) {
		qu := store.Quad(it.Result())
		log.Printf(spew.Sdump(qu))
	}

	rmQuads := []quad.Quad{
		quad.Make("a", "to", "b", nil),
		quad.Make("a", "updated", t0, nil),
	}

	addQuads = []quad.Quad{
		quad.Make("a", "updated", t1, nil),
	}

	t = cayley.NewTransaction()
	for _, q := range rmQuads {
		t.RemoveQuad(q)
	}
	for _, q := range addQuads {
		t.AddQuad(q)
	}
	err = store.ApplyTransaction(t)
	if err != nil {
		log.Fatal(err)
	}

	log.Printf("after second transaction:")
	it = store.QuadsAllIterator()
	for it.Next(nil) {
		qu := store.Quad(it.Result())
		log.Printf(spew.Sdump(qu))
	}

	log.Printf("expected:")
	for _, q := range addQuads {
		log.Printf(spew.Sdump(q))
	}
}


// exists returns whether the given file or directory exists
func exists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return true, err
}
```

**Received results:**

2019/11/06 09:18:12 after first transaction:
2019/11/06 09:18:12 (quad.Quad) "a" -- "to" -> "b"
2019/11/06 09:18:12 (quad.Quad) "a" -- "updated" -> "2019-11-06T11:45:26Z"^^<schema:DateTime>
2019/11/06 09:18:12 after second transaction:
2019/11/06 09:18:12 (quad.Quad) <nil> -- "updated" -> "2019-11-06T11:46:26Z"^^<schema:DateTime>

also dump panics/NPE:
➜  txTest cayley dump -o - -d leveldb -a .db/leveldb
I1106 09:12:15.961568    9765 command.go:805] Cayley version: v0.8.x-dev (dev snapshot)
I1106 09:12:15.961795    9765 database.go:146] using backend "leveldb" (.db/leveldb)
I1106 09:12:16.029981    9765 dump.go:73] writing quads to stdout
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x20 pc=0x43dbce6]

goroutine 1 [running]:
github.com/cayleygraph/quad/nquads.(*Writer).writeValue(0xc000448120, 0x0, 0x0, 0x5231378, 0x1)
	/Users/mike/zo/pkg/mod/github.com/cayleygraph/quad@v1.1.0/nquads/nquads.go:303 +0x36
github.com/cayleygraph/quad/nquads.(*Writer).WriteQuad(0xc000448120, 0x0, 0x0, 0x54e7c80, 0xc0004500e0, 0x54e7cc0, 0xc0001463a0, 0x0, 0x0, 0x1, ...)
	/Users/mike/zo/pkg/mod/github.com/cayleygraph/quad@v1.1.0/nquads/nquads.go:316 +0x58
github.com/cayleygraph/quad/nquads.(*Writer).WriteQuads(0xc000448120, 0xc0057e4000, 0x1, 0x2710, 0x1, 0x54d24a0, 0xc0000da050)
	/Users/mike/zo/pkg/mod/github.com/cayleygraph/quad@v1.1.0/nquads/nquads.go:329 +0x10d
...

**Expected results:**

2019/11/06 09:18:12 after first transaction:
2019/11/06 09:18:12 (quad.Quad) "a" -- "to" -> "b"
2019/11/06 09:18:12 (quad.Quad) "a" -- "updated" -> "2019-11-06T11:45:26Z"^^<schema:DateTime>
2019/11/06 09:18:12 after second transaction:
2019/11/06 09:18:12 (quad.Quad) "a" -- "updated" -> "2019-11-06T11:46:26Z"^^<schema:DateTime>

**Output of `cayley version` or commit hash:**
v0.7.7

**Environment details:**
go1.13.3 darwin/amd64
bolt and leveldb both affected
For example: https://github.com/cayleygraph/cayley/blob/master/go.mod#L16
