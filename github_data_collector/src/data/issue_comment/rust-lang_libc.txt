<!-- 
**Help us help you.**

If you are reporting a bug, include:

* a Minimum Working Example without any dependencies (except libc) that shows
  the issue and ideally reproduces in the Rust playground
* the target triple - libc supports many targets and many APIs
* instructions to reproduce, logs (e.g. build logs, links to Travis-CI logs,
  uploads to github gists, etc.).

If you are requesting a new API, include:

* the target triple
* link to the documentation of the API showing the type signatures, how to use
  it, etc.

In general, just please consider that the people who can help you are all very
busy, they will be helping you in their free time, there are a lot of people in
need of help so they need to prioritize to which issues they devote their free
time, etc. So try to give most of the information upfront, be concise, show
small self-contained examples (nobody has time to create a new cargo project,
set up dependencies,...), etc. Help us help you.
-->
Target triple: x86_64-unknown-linux-musl
Version: libc = "0.2.66"
Error:error[E0412]: cannot find type `nlmsghdr` in this scope
i use `cargo doc --open --target x86_64-unknown-linux-musl`  to check doc. libc doc not include struct nlmsghdr, but on
`cargo doc --open --target x86_64-unknown-linux-gnu` doc, libc now include struct nlmsghdr. 
Can libc support to build a static binaries?

Adds bindings for `ntp_adjtime` & co. for Linux, FreeBSD/NetBSD/Darwin, and Solaris/IllumOS.
Some of the type definitions are already defined in the common `mod.rs` for 64-bit GNU/Linux.
This also refactor the type definitions to use types from crate root.

memmem is a non-standard extension, first added in GNU libc and later
ported to other systems. Support for it is non-uniform, thus it was only
added to platforms that seem to support it.
Also move `getauxval()` where it should be.
I'm opening this here as continuation of discussion on #1626. This also might be related to #1359.

Currently, `sighandler_t` is an alias to `usize` on Windows targets. While this works, it is strictly speaking wrong and the right type should be something like `Option<extern "C" fn(c_int) -> ()>`.

There are, however, concerns about the switch:
* It is an API change that might break someone's code. At least a crater run would be needed.
* What is the correct type? Due to the fact this doesn't always contain a valid function pointer, but also some marker constants (eg. `SIG_IGN`, which has value of 1), it is unclear if this is correct on the Rust side. It seems the consensus is function pointers need to be non-null (solved by the Option) and properly aligned, but the alignment of function pointer on all platforms Windows currently run is 1, so for that reason this should be fine.
According to https://www.netbsd.org/changes/changes-8.0.html, NetBSD (x86_64-unknown-netbsd) has had the `accept4(2)` system call since February 2017. When the system call was added (https://github.com/rust-lang/libc/pull/394, https://github.com/rust-lang/libc/pull/546) it seems NetBSD 8.0 wasn't released yet (?).

I have two questions:

* Its it old/stable enough to add? Or is this crate targeting NetBSD 7.0?
* Can anyone with a NetBSD installation add the system call?

I would add it myself but I don't have a NetBSD installation so I would have no idea if I did it correctly, as NetBSD isn't run on the CI either (it seems).

Related: https://github.com/tokio-rs/mio/issues/1213.
fix #1632
fix #1633