After running the following to install git go and cfssl as specified in the README
``` bash
sudo apt-get install git -y
wget -c https://dl.google.com/go/go1.13.6.linux-amd64.tar.gz
sudo tar -C /usr/local -xzf go1.13.6.linux-amd64.tar.gz
export PATH=$PATH:/usr/local/go/bin
source ~/.profile
go get -u github.com/cloudflare/cfssl/cmd/cfssl
sudo mv ~/go/bin/cfssl /bin/cfssl
```
and then running
``` bash
cfssl version
```
I get the output
```
Version: dev
Runtime: go1.13.6
```
which appears to be golang's version rather than the expected cfssl's version.
I'd like to note that the other cfssl commands seem to operate as cfssl typically does, including help. It just seems to be the version command that isn't working as expected.
A simple request since I spent an hour today trying to find out why cfssl didn't install after running `go get -u github.com/cloudflare/cfssl/cmd/cfssl`

The documentation in the README seems to make it seem like cfssl will just work after running `go get -u github.com/cloudflare/cfssl/cmd/cfssl` but i had to ensure I moved the executable into my /bin folder first before I was able to use it globally. 

Adding a simple tidbit about this would make life easier for those out there who haven't used Go before.

I can make these changes if you want.

I have Goddy wildcard certificate *.firm.com. I want to make with my wildcard certificate for Kubernetes API certificate. That's possible? CFSSL will help do it?
`certIsRevokedCRL` fetches issuer certificate from AIA extension defined URLs. If none are defined or fetching fails, CRL is used without signature checks even if HardFail is `true`.
This PR adds support for generating an OCSP response and inserting it into the db as soon as a cert is signed, if a ocsp signer keypair is provided in serve mode.
I hope someone can perfect it with me. 

link: https://github.com/zxc0254/cfssl-chinese-document
I am not entirely sure what is going on here, but it seems that there is no way to generate a valid CA having an expiry less than 5 minutes. The generated CA is either a <= 59 seconds away from expiry or is in fact expired. Is there a work around for this? Expiry handling for CA and other certs seems to be offset by 5 minutes for some reason. 


```
./cfssl-1.4.1 version
Version: 1.4.1
Runtime: go1.12.12
```

JSON request:
```
{             
  "CN": "CA",
  "names": [
    {
      "C": "CA",
      "L": "QC",
      "O": "XYZ Inc.",
      "ST": "Montreal",
      "OU": "Infrastructure"
    }
  ],
  "CA": {
    "expiry": "240s",
    "pathlen": 0
  },
  "key": {
    "algo": "rsa",
    "size": 2048
  }
}
```

Example of the issue.
```
date; cfssl-1.4.1 gencert -initca EXP-ca-req.json 2> /dev/null | jq -r .cert|openssl x509 -text -in -|egrep 'After|Before'; date
Thu Nov 28 13:32:11 EST 2019
            Not Before: Nov 28 18:27:00 2019 GMT
            Not After : Nov 28 18:31:00 2019 GMT
Thu Nov 28 13:32:12 EST 2019

```
The newkey and newcert endpoints now will print the sha256 digest in addition to md5 and sha1
Hello,

I maintain the cfssl package on Gentoo Linux and I am running into a couple of small issues I am patching around to get our package manager to build cfssl.

The first is the way VERSION is set in the makefile. This doesn't work if you try to download the archive and build from there, which is what our package manager does. For example:

```
$ cd /tmp
$ wget https://github.com/cloudflare/cfssl/archive/v1.4.1.tar.gz
$ tar -xf v1.4.1.tar.gz
$ cd cfssl-1.4.1
$ make
fatal: not a git repository (or any of the parent directories): .git
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssl ./cmd/cfssl
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssl-bundle ./cmd/cfssl-bundle
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssl-certinfo ./cmd/cfssl-certinfo
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssl-newkey ./cmd/cfssl-newkey
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssl-scan ./cmd/cfssl-scan
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/cfssljson ./cmd/cfssljson
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/mkbundle ./cmd/mkbundle
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=" -o bin/multirootca ./cmd/multirootca
$
```

I can pass VERSION= into the makefile, but that doesn't eliminat the attempt to run git and get a version from there:

```
$ make VERSION=1.4.1
fatal: not a git repository (or any of the parent directories): .git
go build -ldflags "-s -w -X github.com/cloudflare/cfssl/cli/version.version=1.4.1" -o bin/cfssl ./cmd/cfssl
...
$
```

The second issue is the use of -s and -w in LDFLAGS.

Normally stripping is handled by the package manager itself, so these options should not be the default.

I have a patch which definitely cannot be submitted to you because it is a hack,, but I was wondering if we can come up with a way of fixing these issues for everyone.

Thanks,

William