This still needs to be described.

In two words, it should be a generalization of the "fat whales hunt" mode, allowing other types of sort.
I just installed broot for the first time with 'cargo install broot' on ubuntu linux 16.04 using bash.

**To Reproduce**
After invoking `br ~`, I see a directory tree, but navigation keys such as up/down arrow and pg up/down do nothing.

**Expected behavior**
upon pressing down arrow or up arrow, the selected line should move down or up accordingly.
Did not see a man page on github, nor file (broot.1) in the downloaded zip file.
This is a draft, shared for thoughts. I welcome opinions of people who played enough with broot to have one.

## Preambule

I want to keep the immediate interactive search, and keep allowing the current syntax:

	<pattern>[ :]<verb_invocation>

where pattern can be either fuzzy or a regex ([formal syntax](https://github.com/Canop/broot/blob/master/src/commands.rs#L60)).

## New Goals

1. allow colons or spaces in the pattern
2. allow/combine other types of search in the future, for example search on paths or file content (instead of filenames)


## Proposal

The proposal is to introduce new compatible syntaxes

	[ :]<search_verb><sep><pattern><sep><verb_invocation>

where

* `<search_verb>` would be optional (maybe not immediately implemented) and would later be used to specify the way the pattern is used (paths or file content, for example).
* `<sep>` would be made of "special characters" (most of `\W`) chosen by the user (so that it's not in the pattern). The second sep isn't necessary if there's no verb_invocation.

### Examples of a fuzzy search for `"bla"` followed by a `cp`:

(yes it didn't change, it's just a comparison point)

	bla cp dest
	bla:cp dest

### Examples of a fuzzy search for `":bla:"` followed by a `cp`:

	:#:bla:#cp dest
	: :bla: cp dest
	  :bla: cp dest
	 ":bla:"cp dest
	:name=:bla:=cp dest

(assuming `name` is the `search_verb` for applying patterns to file names)

A consequence of this syntax is that you can search for a pattern containing colons by just prefixing the pattern with two spaces, and that you can search for a pattern contain spaces by just prefixing it with two colons. This should fast feel natural enough.

### Examples of a fuzzy search for `":bla :"` followed by a `cp`:

	:#:bla :#cp dest
	:#:bla :#:cp dest
	:":bla :":cp dest
	 #:bla :#cp dest
	:name":bla :"cp dest

**Note:** In order to make it clearer, I'll probably implement syntax coloring of the input. But interactive display should make it clear enough.

## Drawbacks

Search verbs and action verbs would share the same name space, which implies some restrictions and could be confusing.

## Alternatives

In general it would be great of broot could detect which shell/environment it is running and install a suitable launcher; this issue in particular is for Powershell. Launchers have already been suggested in other issues, here's one take:

```
function br {
    $tempFile = New-TemporaryFile
    try {
        $broot = $env:BROOT
        if (-not $broot) {
             $broot = 'broot'
        }
        & $broot --outcmd $tempFile $args
        if ($LASTEXITCODE -ne 0) {
            Write-Error "$broot exited with code $LASTEXITCODE"
            return
        }
        $command = Get-Content $tempFile
        if ($command) {
            # broot returns extended-length paths but not all PowerShell/Windows
            # versions might handle this so strip the '\\?'
            Invoke-Expression $command.Replace("\\?\", "")
        }
    } finally {
        Remove-Item -force $tempFile
    }
}

$isDotSourced = $MyInvocation.InvocationName -eq '.' -or $MyInvocation.Line -eq ''
if (-not $isDotSourced) {
    br $args
}
```

- works as a script so if this gets saved as br.ps1 somewhere, users can choose how they want to use it (dot-source it, or add path to file to the PATH or ...)
- uses environment variable so users can set the path to the broot executable if broot isn't in the path for instance, or when developing and switching between versions etc. Defaults to broot instead of broot.exe so that it automatically works on pwsh on linux as well (tested on ubuntu 18.04)
**Describe the bug**
When I quit broot, the terminal is not cleared.

**To Reproduce**
Here is my conf for enter and edit (with `export EDITOR=vim`):
```
[[verbs]]
invocation = "edit"
key = "enter"
shortcut = "e"
execution = "$EDITOR {file}"
leave_broot = false
```
Launch broot, open a file with enter (it is opened in vim), quit vim, quit broot.

**Expected behavior**
Broot is terminated successfully and the prompt is clean

**Screenshots**
If I don't open a file (I hide all the upper part of broot):
![image](https://user-images.githubusercontent.com/7527594/72328222-d131c580-36b2-11ea-8387-c2ad00d56282.png)

If I open a file:
![image](https://user-images.githubusercontent.com/7527594/72328068-8a43d000-36b2-11ea-919e-60de4e4c4f0a.png)

**Configuration (please complete the following information):**
 - OS: Debian 10 (64 bits), Raspbian (ARM) and CentOS 6 (32 bits)
 - Version: broot 0.11.8
 - Relevant configuration items (described in *to reproduce*).

**Additional context**
Maybe my verb is not configured as it should be but I *want* broot to be still opened when I exit vim.
**Describe the bug**
None of the shells I tried on Windows 7 manage to produce output (see screenshots below): either the screen just stays blank (cmd, powershell) or it shows a bunch of escape sequences (color codes I think) together with the actual file/directory names (cygwin, msys2 shells). broot is functional, i.e. reacts to Esc etc, just shows no output. 

No such problem on Windows 10, so it's likely a known problem with how Rust talks to the terminal, but adding this as an issue by means of documentation. Also not sure if it's worth fixing since Windows 7 is pretty much EOL.

**To Reproduce**
- download broot release
- open cmd/powershell/... and run broot.exe, choose `n` when asked to install

**Screenshots**
Powershell:
![Capture](https://user-images.githubusercontent.com/1902997/72326633-d2adbe80-36af-11ea-9e0f-4a937ed02205.PNG)
Cygwin:
![Capture](https://user-images.githubusercontent.com/1902997/72326827-3e902700-36b0-11ea-9bbb-61738a59086b.PNG)


**Configuration (please complete the following information):**
 - OS: Windows 7
 - Version 0.11.3


My issue with `broot` is singular, which is that I am trying to package up broot for use by users consuming packages from a rather obscure package manager, but the users running broot will not have root access, so this happens when running `br`:
```
$ br

Broot should be launched using a shell function (see https://github.com/Canop/broot for explanations).
The function is either missing, old or badly installed.
Can I install it now? [Y n]
Y
Removing /home/maxnbk/.local/share/broot/launcher/bash/1.
Writing br shell function in /home/maxnbk/.local/share/broot/launcher/bash/1.
Removing /home/maxnbk/.config/broot/launcher/bash/br.
Creating link from /home/maxnbk/.config/broot/launcher/bash/br to /home/maxnbk/.local/share/broot/launcher/bash/1.
IO Error : "Permission denied (os error 13)"
```

Wrinkle: I am able to predefine the `br` function for them, and do, as something that is installed alongside broot and sourced when the users enter the package-managed shell, but broot still thinks it's not installed properly, presumably because the files don't exist in the correct place.

Is there something I can do to fix this on my end?
There seems to be the need for a list of recipes, including

* some hotkey sets, for example vi or emacs related
* some alternate openers
* some very special installations
* some skins
* some tricks, or non obvious uses of broot
* etc.

Please share what, in your opinion, could be included in there.

Answer with either a recipe, part of a recipe, or a need for some specific one.
I notice this with 0.11.8
I have two computers with ubuntu and terminator.
On one the double-clic works, on the other one there seems to be a problem computing the index.

I'll investigate this later. In the meantime I'd be interested in other user reports regarding this problem.