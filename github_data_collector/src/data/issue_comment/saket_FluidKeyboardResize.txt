Please upload this library to jcenter or maven.
If you add `<item name="android:windowTranslucentStatus">true</item>` to your activity theme, the animation does not work. Reason is FrameLayout(android.R.id.content) does not get resized in case of such activities.
<img width="1680" alt="Screenshot 2019-10-15 at 12 35 29 PM" src="https://user-images.githubusercontent.com/6387538/66853575-3d5e3980-ef9d-11e9-9a0a-5a298fdbc6ca.png">


Seems like a weird unrelated issue. But I see it happening.

Whenever I pop a fragment, I hide the keyboard:

```kotlin
fun View.hideKeyboard() {
    handler?.removeCallbacksAndMessages(TOKEN_KEYBOARD)
    context.getSystemService<InputMethodManager>()?.hideSoftInputFromWindow(this.windowToken, InputMethodManager.HIDE_NOT_ALWAYS)
}
```

If I press the back hardware button, the first time closes the keyboard and the second time pops the fragment. This is the normal case where everything works.

Now if I press the close button in the toolbar, the two actions are done at the same time. It closes the keyboard and pops the fragment. This is where I see the problem happening. In this case the popped fragment only goes through `onPause` and `onStop`. `onDestroy` is never called. What happens is that this fragment is removed from the FragmentManager but if I do call `fm.findFragmentByTag` the fragment is `!= null`. It doesn't make any sense.

Now you could be asking "How is this related to this lib?". If I don't use the lib the issue doesn't happen. For some reason the animation in the activity messes up the fragment manager.

Any ideas what it could be?

Thanks
Hi, saket,
First of all, thank you for providing me with good information. but, I have a little problem.
It's a problem when using FluidKeyboardResize with CoordinatorLayout.

How do I use FluidKeyboardResize with CoordinatorLayout?

please help me :(



Let me know if you like this or would prefer something different, happy to modify. And THANK YOU for the super nice project, it was a joy to experiment with.

It seems that setting the height on the view's `LayoutParams` was what was holding up the TransitionsManager from detecting the *original* state of the content view, but we also don't know the bounds on the first pass - adding a `post(Runnable)` allows us to get the proper original height right after the first layout pass.