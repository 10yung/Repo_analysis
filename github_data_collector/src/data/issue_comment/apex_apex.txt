fix #961 

update alias command example by removing v prefix

Refer issue #680 , remove v prefix in doc, not both in code, so we still get an error example when using in `apex alias --help` command.

If you have a bug report please let us know the following:

  - __Operating system__: Mac OS X 10.15.1
  - __Apex Version__: 1.0.0-rc2

When appropriate please also paste the debug log output using `-ldebug` or `--log-level debug`.

```
$ apex alias --help

  Create or update alias on functions

  Usage:
    apex alias [<name>...] [flags]

  Examples:

    Alias all functions as "prod"
    $ apex alias prod

    Alias all "api_*" functions to "prod"
    $ apex alias prod api_*

    Alias all functions of version 5 to "prod"
    $ apex alias -v v5 prod

    Alias specific function to "stage"
    $ apex alias stage myfunction

    Alias specific function's version 10 to "stage"
    $ apex alias -v v10 stage myfunction


$ apex alias -v v5 prod example_lambda -r us-west-2 -ldebug
   • loading functions in functions
   • open                      env= function=example_lambda
   • loaded config             config=function.json env= function=example_lambda
   • updating 1 functions
   • fetching aliases          env= function=example_lambda
   ⨯ Error: function example_lambda: ValidationException: 1 validation error detected: Value 'v5' at 'functionVersion' failed to satisfy constraint: Member must satisfy regular expression pattern: (\$LATEST|[0-9]+)
	status code: 400, request id: e18bb569-b0ae-4dc1-a689-c11a74b1f930
```

If you have a bug report please let us know the following:

  - Mac OS 0.15.2
  - 1.0.0-rc2

I tried to upgrade my Apex from `1.0.0-rc2` to `1.0.0-rc3`. There was no error, and it says `Updated 1.0.0-rc2 to v1.0.0-rc3` but when I typed `apex version` it keeps showing the old version `1.0.0-rc2`. Tried to reinstall it too, but no luck. Please help 🙏

```
❯ apex version
Apex version 1.0.0-rc2

❯ apex upgrade
                               |███████████████████████████████████| 100%

     Updated 1.0.0-rc2 to v1.0.0-rc3

❯ apex version
Apex version 1.0.0-rc2

❯ curl https://raw.githubusercontent.com/apex/apex/master/install.sh | sh
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  8016  100  8016    0     0  93209      0 --:--:-- --:--:-- --:--:-- 93209
apex/apex: checking GitHub for latest version
apex/apex: found version 1.0.0-rc3 for darwin/amd64
apex/apex: downloading https://github.com/apex/apex/releases/download/v1.0.0-rc3/apex_1.0.0-rc3_darwin_amd64.tar.gz
apex/apex: verifying checksums
apex/apex: installed as /usr/local/bin/apex

❯ apex version
Apex version 1.0.0-rc2
```
Found a couple of unclosed files
I have a pipeline with this commands: apex deploy --env prod --alias prod --region us-west-2 apex deploy --env qa --alias qa --region us-west-2 apex deploy --env dev --alias dev --region us-west-2

Every time the pipeline is executed In one lambda 2 alias (dev and qa) move on the same version.

Is there any plan to include resource import command into the supported terraform commands? 
AWS Lambda currently supports Node v10.x
Can you please support it.

If you have a bug report please let us know the following:

  - __Operating system__: Windows 10
  - __Apex Version__: v1.0.0-rc3

Logs as below:

```
PS C:\Users\Xin\Desktop\apex_1.0.0-rc3_windows_amd64.tar\apex_1.0.0-rc3_windows_amd64 c> .\apex.exe upgrade
[?25l[2J[1;1f[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[0K                   [38;5;102m|[0;00m[38;5;61m█[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m|[0;00m 0% [1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[0K                   [38;5;102m|[0;00m[38;5;61m█[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m░[0;00m[38;5;102m|[0;00m 1% [1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[25F[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[1E[0K                   
```
(Logs not finish as it is much longer)
  - __Operating system__: MacOS 10.14
  - __Apex Version__: 1.0.0-rc2

AWS no longer supports `nodejs6.10` runtime, an attempt to deploy a function generates following error:
`InvalidParameterValueException: The runtime parameter of nodejs6.10 is no longer supported for creating or updating AWS Lambda functions. We recommend you use the new runtime (nodejs8.10) while creating or updating functions`


  - __Operating system__: Mac Os Mojave 10.14.4
  - __Apex Version__: Apex version 1.0.0-rc3

Can't specify a region for functions without explicitly specifying it in the command line or env variable. `project.json` values are ignored and profile argument in cli is not working as well.

A use case is pretty simple. 
1. We have a number of lambdas deployed to different regions. 
1. All regional functions grouped in different apex project
1. Every project specifying region in project.json
1. AWS credentials configured via `.aws/credentials`
1. deploy is done without specifying additional parameters: `cd us-west-2 && apex deploy`

#### Error:
```
# apex deploy --profile us-west-2 --log-level debug
   • loading functions in functions
   • open                      env= function=gocd_datadog_notifier
   • loaded config             config=function.json env= function=gocd_datadog_notifier
   • deploying 1 functions    
   • deploying                 env= function=gocd_datadog_notifier
   • building zip              env= function=gocd_datadog_notifier
   • creating build            env= function=gocd_datadog_notifier
   • hook                      command=bundle install && bundle install --deployment env= function=gocd_datadog_notifier hook=build
   • add file to zip           env= file=.bundle/config function=gocd_datadog_notifier
   • add file to zip           env= file=Gemfile function=gocd_datadog_notifier
   • add file to zip           env= file=Gemfile.lock function=gocd_datadog_notifier
   • add file to zip           env= file=app/response.rb function=gocd_datadog_notifier
   • add file to zip           env= file=main.rb function=gocd_datadog_notifier
   • created build (1.1 kB)    env= function=gocd_datadog_notifier
   • fetching config           env= function=gocd_datadog_notifier
   ⨯ Error: function gocd_datadog_notifier: MissingRegion: could not find region configuration
```

#### Configuration files

`~/.aws/config`
```
[us-west-1]
region=us-west-1

[us-west-2]
region=us-west-2
```

`~/.aws/credentials`
```
[default]
aws_access_key_id = access_key
aws_secret_access_key = secret_key
```

`project.json`
```
{
  "name": "global",
  "runtime": "ruby2.5",
  "handler": "main.handler",
  "nameTemplate": "{{.Function.Name}}",
  "role": "arn:aws:iam::XXXXXX:role/global_lambda_function",
  "profile": "us-west-2",
  "region": "us-west-2",
  "environment": {},
  "defaultEnvironment": "live"
}
```

#### What Works:
- Specifying region via command line `apex deploy --region=us-west-2`

#### What doesn't work:
- Profile in `project.json` 
- Profile in command line line `apex deploy --profile=us-west-2` is not used
- Profile via `AWS_PROFILE`: `AWS_PROFILE=us-west-2 apex deploy`
- Region in `project.json`

Tried different combinations of profile/region in `project.json` including removal of aws config file. All producing same error. Please help me understand what am I doing wrong.