C++20 will have `std::span` standardized. 

* Does `gsl::span` satisfy the requirements of an std::span implementation (other than the different namespace)? If it doesn't, how?
* Does `gsl::span` have standard-compliant behavior or features beyond what's defined for  `std::span`? (Yes, it does, e.g. `::at()`) ? If so, what is it?

Answers to these questions, and an overview of the difference between `gsl::span` and `std::span` implementations (e.g. in libstdc++ and libc++) should be provided somewhere. I believe the wiki is an appropriate place, with a link from `README.md`.
Only for the test suite. Remove the `#pragma`'s used to suppress compiler warnings.

This brings all the compile flags together in the `tests/CMakeLists.txt`.
In addition compiler/os/version selection is made a bit more specific and unnecessary suppression flags are removed.

A disadvantage is the lack for a clean way in CMake to set flags for specific files.
Thus, some flags are disabled with a wider scope then before.
- Extend CI reach
  - [x] Add compilers:
    -  GCC 8 and GCC 9
    - LLVM/Clang 8 and Clang 9
    - AppleClang / Xcode 9.4, 10.1 and 11.3 (different compilers)
  - [x] Build both C++14 and C++17 with all capable compilers.
  - [x] Add validation of the CMake configuration with all supported versions. Fixes #760
    Generate with `-Wdev -Werror=dev --warn-uninitialized`
  - [ ] Libc++ with Clang?
- Improve Job performance
  - [x] Use the default CMake versions on all images. This significantly improves set-up times.
  - [x] Change default Linux image to Ubuntu Bionic Beaver. (Use Ubuntu Xenial where needed for older compilers.)
    Get Clang form the Ubuntu packages where available.
- Other
  - [x] Use readable names for builds
  - [x] Add verification of variables (Bash) + fix setting path
  - [x] Use "stages" to end CI after jobs with the latest compilers have failed.
    The latest compilers have the best error messages. There is no benefit in running all legacy compilers before the error is fixed.
    Same for ending the CI run after a CMake error is found.
  - [x] Clang 5.0.1 and AppleClang 9.1 report (false positive?) warnings for `-Wundefined-func-template`. In tests and only in C++17 mode.
  - [x] Increase CMake requirement for AppleClang to CMake 3.2.3.
    GoogleTest uses feature detection for C++11, AppleClang features information is added in [CMake 3.2](https://cmake.org/cmake/help/latest/release/3.2.html#other).
  - [ ] Failure with GCC-8

Changes to the Travis matrix:

Upgrading the distro from Trusty to Bionic because Trusty is EOL.
Upgrading XCode to the latest versions from XCode 9, 10, and 11
Removing Clang 3.6 - 3.9
Adding Clang 8 and 9.

Changes to the test files:
The diagnostic inconsistent-missing-destructor-override is missing in Clang 4 and earlier. I added major version detection to the warning suppression to only add this flag to versions that support it.


Recently, not_null and strict_not_null started failing their LLVM build phases with warnings pertaining to the lack of CTAD guides. That is being addressed by #826. 

@stephantlavavej brought up in a comment though that we may want to evaluate each of the GSL types should all the use of CTAD, if they need deduction guides, or if they're fine existing as-is.
cstddef was being included to detect whether GSL_USE_STD_BYTE should be
set to 0 or 1. But if the user provided GSL_USE_STD_BYTE no detection is
required and the header was never included.
â€¦d_package

Allows to use the installed library as `ms-gsl::GSL` in e.g. add_link_libraries
statements.

Note: At least the INSTALL_INTERFACE generator expression in the
target_include_directories statement cannot be distributed over multiple
lines! So I also reformatted the BUILD_INTERFACE expression.
With this PR, a user can use CMake's find_package command to easily integrate this library to her CMake project like this:

`
find_package(microsoft-gsl REQUIRED)
target_link_libraries(
		myprogram
		PUBLIC  microsoft-gsl::GSL
)
`

This is typical way to use a library with vcpkg.
Hello!
I believe it would compose nicely with https://github.com/isocpp/CppCoreGuidelines/pull/1516.
And please help me with `strided_span` cause I have no idea what that beast might be.
Fixes #657 