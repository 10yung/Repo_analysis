Seems to be more stable to use `deparse()` here. 
``` r
tf <- tempfile()
testthat::verify_output(tf, {
  c(NA_character_, NA)
})
#> Warning: Creating reference output
testthat::verify_output(tf, {
  c(NA_character_, NA)
})
cat(readLines(tf), sep = "\n")
#> > c(<chr: NA>, NA)
#> Error: <text>:1:3: unexpected '<'
#> 1: c(<
#>       ^
```

<sup>Created on 2020-01-07 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0.9000)</sup>

Completely stolen the code from https://github.com/r-lib/testthat/issues/970, but renamed function to `skip_on_gh_actions()` instead of `skip_on_actions()` - please feel free to change!

Thanks!
Hi testthat developers :wave:,
I've fixed a couple of typos I found in the documentation of the package using `spelling::spell_check_package()` (there are apparently some in the `NEWS.md` file, but I didn't know if I should edit it or not) I then regenerated the doc using `devtools::document()`
I can run this fine in normal REPL. But it doesn't work when I test it using Run Tests button in RStudio (see attached picture)

```r
remotes::install_github("xiaodaigh/disk.frame", ref = "chunk-group-by")

library(disk.frame)
library(testthat)
test_that("new group_by framework", {  
  iris.df = iris %>% 
    as.disk.frame
  
  grpby = expect_warning(iris.df %>% 
    group_by(Species) %>% 
    summarize(mean(Petal.Length), sumx = sum(Petal.Length/Sepal.Width), sd(Sepal.Width/ Petal.Length), var(Sepal.Width/ Sepal.Width)) %>% 
    collect)
  
  grpby2 = iris %>% 
    group_by(Species) %>% 
    summarize(mean(Petal.Length), sumx = sum(Petal.Length/Sepal.Width), sd(Sepal.Width/ Petal.Length), var(Sepal.Width/ Sepal.Width)) %>% 
    arrange()
  
  for (n in names(grpby)) {
    expect_true(all(grpby2[, n] == grpby[, n]) || all(abs(grpby2[, n] - grpby[, n]) < 0.0001))
  }
  
  delete(iris.df)
})
```

![image](https://user-images.githubusercontent.com/4497189/70209995-b13ee600-1785-11ea-814e-af65079d4b92.png)

This might be my misunderstanding of how `expect_condition()` should work, but...

``` r
library(testthat)

signal <- function(class) {
  condition <- simpleCondition(NULL)
  class(condition) <- c(class, "condition")
  signalCondition(condition)
}

test_that("conditions can be expected", {
  expect_condition(signal("hello"), class = "hello")                     # OK
  expect_condition({signal("hello"); signal("world")}, class = "hello")  # OK
  expect_condition({signal("hello"); signal("world")}, class = "world")  # FAIL
})
#> Error: Test failed: 'conditions can be expected'
#> * <text>:13: `{ ... }` threw an condition with unexpected class.
#> 
#> Backtrace:
#>  1. testthat::expect_condition(...)
#>  6. global::signal("hello")
```

<sup>Created on 2019-12-03 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

Should `expect_condition()` succeed if at least one condition is thrown matching the requested class?
Currently, `testthat` sets a number of environment variables within `test_dir()`:

https://github.com/r-lib/testthat/blob/3633dfeb30fe89aac17b43e5f919447c2a1185da/R/test-directory.R#L82-L86

However, it's possible to run test files individually; e.g. with `testthat::test_file()`. (RStudio uses this when running a single testthat test file.)

Would it make sense to set TESTTHAT (or maybe TESTTHAT_FILE) within `test_file()`?
Apologies if you've already implemented this and I missed it but I think testthat needs a `skip_on_actions` function like this:

```
skip_on_actions <- function() {
  if (!identical(Sys.getenv("GITHUB_ACTIONS"), "true")) {
    return(invisible(TRUE))
  }
  skip("On GitHub Actions")
}

```

I can submit a PR if that would be desired. 
My use case is the same as in #515. I want to be able to get the non-0 exit value from `test_file`. 

It's a bit strange that `test_dir`, `test_check` and the internal `test_files` accept the `stop_on_failure`, but the workhorse `test_file` doesn't. 

The simplest way to address this might be to export `test_files`.