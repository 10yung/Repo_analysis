Xcode yells at you when `self` isn't explicitly mentioned withing blocks. This pull request makes Xcode calm down by adding `self->` in the appropriate places within blocks. 
I and others developers that I know always put this code manually, would be amazing if you accept this pull request.
My application was rejected, because Apple thought that I used private method `setDefaultTimeoutInterval:`. The only place with such method is the EGOCache. After renaming `defaultTimeoutInterval` to `defaultCacheTimeoutInterval`  my application was approved

Hello,

I am wondering is there any way to find the path of a file using the key

thanks in advance

If we have many expired items, it can be hard to remove them in main thread. Moved it to background.

I read the source but it seems that there's no method or property for cache size.

In `initWithCacheDirectory` method of `EGOCache.m` file, the `dispatch_set_target_queue`'s usage is not correct.

``` objectivec
- (instancetype)initWithCacheDirectory:(NSString*)cacheDirectory {
    if((self = [super init])) {
        _cacheInfoQueue = dispatch_queue_create("com.enormego.egocache.info", DISPATCH_QUEUE_SERIAL);
        dispatch_queue_t priority = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);
        dispatch_set_target_queue(priority, _cacheInfoQueue);

        _frozenCacheInfoQueue = dispatch_queue_create("com.enormego.egocache.info.frozen", DISPATCH_QUEUE_SERIAL);
        priority = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_HIGH, 0);
        dispatch_set_target_queue(priority, _frozenCacheInfoQueue);

        _diskQueue = dispatch_queue_create("com.enormego.egocache.disk", DISPATCH_QUEUE_CONCURRENT);
        priority = dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_BACKGROUND, 0);
        dispatch_set_target_queue(priority, _diskQueue);
```

In man page of `dispatch_set_target_queue`, it has below statements:

>  The result of passing the main queue or a global concurrent queue as the first argument of dispatch_set_target_queue() is undefined.

So the usage of `dispatch_set_target_queue` is not correct, the correct usage should be as below:

``` objectivec
dispatch_set_target_queue(_cacheInfoQueue, priority);
dispatch_set_target_queue(_frozenCacheInfoQueue, priority);
dispatch_set_target_queue(_diskQueue, priority);
```

In initWithCacheDirectory:cacheDirectory method use dispatch_set_target_queue(priority, _cacheInfoQueue) code to set priority for  _cacheInfoQueue, but according to Apple Developer, this should be dispatch_set_target_queue( _cacheInfoQueue, priority), I think here have a mistake.

Hello,

In my project I add the block in - (UIImage_)imageForKey:(NSString_)key { :
 if (!image && pathImage){
            @try {
                NSData *data = [NSData dataWithContentsOfFile:pathImage];
                image = [UIImage imageWithData:data];
            } @catch (NSException *e1) {

```
        }
    }
```

if not success "[NSKeyedUnarchiver unarchiveObjectWithFile:pathImage]", then verify if can transform the data file in UIImage;

It's working very fine.

Can you add this in the project? Because I'm using cocoaPods in my project.

Thank you! This Class is wonderful.
- (UIImage_)imageForKey:(NSString_)key { 
  UIImage\* image = nil;
  NSString _pathImage = nil;
  @try {
      pathImage = cachePathForKey(_directory, key);
      image = [NSKeyedUnarchiver unarchiveObjectWithFile:pathImage];
  } @catch (NSException_ e) {
      // Surpress any unarchiving exceptions and continue with nil
      if (!image && pathImage){
          @try {
              NSData *data = [NSData dataWithContentsOfFile:pathImage];
              image = [UIImage imageWithData:data];
          } @catch (NSException *e1) {
  
  ```
      }
  }
  ```
  
  }
  
  return image;
  }

- Removed dealloc. it was an empty function
- Added test of key for plist in a function where it wasn't present
- Added possibility of get path to cached file. Very useful por previewcontroller and some other classes which need an url and not an NSData.
