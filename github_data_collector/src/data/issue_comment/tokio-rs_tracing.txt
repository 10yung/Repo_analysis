```rust

let auth = "hello";
let span = span!(Level::INFO, "", %auth);
let _span = span.enter();
do_something();
///


fn do_something(){
  let span = Span::current();
  // How to get field "auth" value from span?
}

```
## Feature Request

### Crates

This would probably be a new subscriber implementation.

### Motivation

Apple has a built-in OS facility for adding spans that show up when profiling in Instruments: signposts.
https://www.swiftbysundell.com/wwdc2018/getting-started-with-signposts/
https://developer.apple.com/videos/play/wwdc2018/405/ (this is a video)
[API documentation is here](https://developer.apple.com/documentation/os/logging?language=occ#3013483).

### Proposal

It would be great to have an adapter to turn tracing spans into signposts so that we could reuse tracing annotations to get useful profiler data.

### Alternatives

It looks like pcwalton has some existing code in this area, although it seems to be using a lower-level API and I'm not sure if it's compatible with the new OS facilities: https://github.com/pcwalton/signpost .


## Feature Request

### Motivation

I'm writing a 3rd party library for instrumenting programs with tracing spans https://github.com/yaahc/spandoc that I would like to be able to test using the tracing test framework without having to vendor the test framework or write my own test subscriber.

### Proposal

Publish the contents of `tracing/tracing/tests/support` and any other necessary machinery so that they can be added as a dev dependency to `spandoc` and tests can be created that verify span entry and exit ordering.

It is not necessary for the tracing crates themselves to depend on the published version via crates.io. Eliza has some worries about introducing a need to maintain API stability into the test framework, not depending on the published version should make this a less important concern, its okay if the published version drifts from the actively used version by the main `tracing` crates so long as the core functionality that is published to crates.io still works.

### Alternatives

Alternatively I can just vendor support files into my crate and depend on them in the same way that tracing crates do.
## Bug Report

### Version

`tracing-subscriber-0.1.6`

### Platform

Linux 4.19, 64 bit

### Description

I am getting the following build error:
```
error[E0433]: failed to resolve: maybe a missing crate `EnvFilter`?
   --> tracing-subscriber-0.1.6/src/fmt/mod.rs:827:33
    |
827 |         .with_env_filter(crate::EnvFilter::from_default_env())
    |                                 ^^^^^^^^^ maybe a missing crate `EnvFilter`?
```

That happens with:
```toml
tracing-subscriber = {version = "0.1.6", default-features = false, features = ["chrono", "fmt"]}
```
I have to add the `env-filter` feature to make it go away.

## Feature Request

### Crates

- `tracing`
- root readme

### Motivation

Now that we've added a lot of usage examples to the repo root and `tracing` crate's README files, they've started to get quite long. 

### Proposal

Maybe we should add a table of contents with links to the different sections?

### Alternatives

Alternatively, we could..."not do this".
## Bug Report
<!--
Thank you for reporting an issue.

Please fill in as much of the template below as you're able.
-->

### Version

tracing-subscriber v0.2.0-alpha.2

### Platform

Linux linux-box 4.15.0-72-generic #81-Ubuntu SMP Tue Nov 26 12:20:02 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux

### Description

There seems to be a memory leak or something that looks like a memory leak that is related to tracing-subscriber. Here is a screenshot of heaptrack with an app that heavily uses tracing.

![image](https://user-images.githubusercontent.com/248257/71964275-908f0380-31fd-11ea-81ce-a147210598d2.png)

Several of the growing wedges seem to be related to tracing. E.g. 

![image](https://user-images.githubusercontent.com/248257/71964362-b87e6700-31fd-11ea-86ad-d9e64a38495c.png)

and

![image](https://user-images.githubusercontent.com/248257/71964399-caf8a080-31fd-11ea-91c8-022a349cbe9b.png)

![image](https://user-images.githubusercontent.com/248257/71964444-dfd53400-31fd-11ea-9020-b74a432273c0.png)

Is it possible that there is some per-span data that is not being properly cleaned up? Even if this is not a real memory leak but just something that will grow until there is memory pressure, it makes it very difficult to find the real memory leak.

I will remove all tracing spans again and check if this makes a difference WRT mem usage.

## Bug Report

### Version

tracing = "0.1.11"
tracing-log = "0.1.1"
tracing-subscriber = "0.1.6"

### Platform

Darwin xxxxx.local 18.7.0 Darwin Kernel Version 18.7.0: Sat Oct 12 00:02:19 PDT 2019; root:xnu-4903.278.12~1/RELEASE_X86_64 x86_64

### Crates

tracing-subscriber

### Description

I've just migrated from `log` and `env_logger` to use tracing instead, and I've found that the way RUST_LOG is parsed is *not* the same between the two.

Specifically, the following:
```
RUST_LOG=debug,tokio_postgres=info,hyper::server::response=info
```

Means:
* With `env_logger` - treat all loggers as DEBUG *except* for `tokio_postgres` and `hyper::server::response`
* With `EnvFilter::from_default_env()` - treat all loggers as DEBUG. This then overrides the explicit setting of INFO for the other two, so they are DEBUG as well.

Resolves https://github.com/tokio-rs/tracing/issues/302.

Currently, spans and events can only be enabled/disable on a global subscriber basis. This PR adds _per-layer_ filtering in `tracing-subscriber`, which means that layers can conditionally filter spans and events without impacting others layers. In practice, this enables layers to conditionally filter on metadata like source and levels and forward those spans and events to different outputs sinks. This also allows for the creation of sampling or rate-limiting filters.

With this PR, customers will be able to write something like:

```rust
let err_filter = FilterFn::new(|metadata, _| {
    metadata.level() == &Level::WARN || metadata.level() == &Level::ERROR
});
let info_filter = FilterFn::new(|metadata, _| metadata.level() <= &Level::INFO);

let err = fmt::Layer::builder()
    .with_writer(io::stderr)
    .finish()
let info = fmt::Layer::builder()
    .with_writer(io::stdout)
    .finish()

let subscriber = Registry::default()
    .with(info.with_filter(info_filter))
    .with(err.with_filter(err_filter));

tracing::subscriber::set_global_default(subscriber).expect("Unable to set global subscriber");
```

Still to do:

- [ ] Documentation
- [ ] Examples
- [ ] Implementing all of Layer's methods on `Filtered`.
## Feature Request

### Crates

tracing-subscriber

### Motivation

I'm implementing a `Subscriber` similar to `Formatter` in many ways and would like to reuse the span allocation it makes use of in `span::Store`.

### Proposal

Is it safe to expose these types as directly usable? That would probably be my preference to avoid having to implement my own slab/locking/etc setup.

### Alternatives

Is it possible to imagine a version of the crate where all I/O is done in layers separately from the span and metadata management?

Maybe Subscriber could be blanket impl'd for structs that implement some smaller trait, named something like `Storage`?
## Motivation
Some embedded platform do not have support for thread_local.

## Solution
I believe it's okay to use a `static mut` var instead. This is hidden behind an
`unsafe_global` feature.