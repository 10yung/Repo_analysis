### Summary 

We should migrate the build from Travis CI to GtiHub Actions now that they are GA. 

### Steps to reproduce the behavior

### gosec version

### Go version (output of 'go version')

### Operating system / Environment

### Expected behavior

### Actual behavior

### Summary 
Add some rules for regular expressions like: https://github.com/attackercan/regexp-security-cheatsheet

Especially ^$ can introduce some security issues when validating data
### Summary 
If a source file imports "C", gosec doesn't analyse it. It's the same issue as #159 

### Steps to reproduce the behavior
see file in attachment.

```
#  gosec ./...
[gosec] 2019/10/31 15:07:56 Including rules: default
[gosec] 2019/10/31 15:07:56 Excluding rules: default
[gosec] 2019/10/31 15:07:56 Import directory: /go/src/gas-package-repro/repro
[gosec] 2019/10/31 15:07:56 Checking package: repro
[gosec] 2019/10/31 15:07:56 Checking file: /go/src/gas-package-repro/repro/target.go
Results:

Golang errors in file: [/go/src/gas-package-repro/repro/target.go]:

  > [line 9 : column 7] - undeclared name: testFunction



Summary:
   Files: 1
   Lines: 11
   Nosec: 0
  Issues: 0
```

### gosec version

```
# gosec -version
Version: 2.1.0
Git tag: v2.1.0
Build date: 2019-10-09T14:09:26Z
```

### Go version (output of 'go version')
```
# go version
go version go1.13.3 linux/amd64
```

### Operating system / Environment
docker image (from golang)
```
root@ee060aa037af:/go/src/gas-package-repro/repro# lsb_release -a
No LSB modules are available.
Distributor ID:	Debian
Description:	Debian GNU/Linux 10 (buster)
Release:	10
Codename:	buster
root@ee060aa037af:/go/src/gas-package-repro/repro# uname -a
Linux ee060aa037af 4.15.0-65-generic #74-Ubuntu SMP Tue Sep 17 17:06:04 UTC 2019 x86_64 GNU/Linux
```

### Expected behavior

CGO must be supported

### Actual behavior
all files which have "import C" are ignored.
[gas-package-repro.tar.gz](https://github.com/securego/gosec/files/3794489/gas-package-repro.tar.gz)

### Summary 

Go Modules are fun.

Reference issues: https://github.com/securego/gosec/issues/347 https://github.com/securego/gosec/issues/234

### Steps to reproduce the behavior

With go 1.13, outside of GOPATH

```
$ go get github.com/securego/gosec@v2.1.0
go: finding github.com/securego/gosec v2.1.0
go: finding github.com/securego/gosec v2.1.0
go get github.com/securego/gosec@v2.1.0: github.com/securego/gosec@v2.1.0: invalid version: module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2
```

> module contains a go.mod file, so major version must be compatible: should be v0 or v1, not v2

As per The [go wiki](https://github.com/golang/go/wiki/Modules#semantic-import-versioning):

> If the module is version v2 or higher, the major version of the module must be included as a /vN at the end of the module paths used in go.mod files (e.g., module github.com/my/mod/v2, require github.com/my/mod/v2 v2.0.1) and in the package import path (e.g., import "github.com/my/mod/v2/mypkg"). This includes the paths used in go get commands (e.g., go get github.com/my/mod/v2@v2.0.1. Note there is both a /v2 and a @v2.0.1 in that example. One way to think about it is that the module name now includes the /v2, so include /v2 whenever you are using the module name).

So I think it is that everything is not in a v2 folder, but the tags are at v2 (or the mod file doesn't have /v2 and v2 import statements in the file: https://github.com/golang/go/wiki/Modules#releasing-modules-v2-or-higher 
### Summary 
Gosec does not appear to respect build tags passed via the tags flag. I have confirmed that my code can be built but gosec sees an error when building the codebase.

### Steps to reproduce the behavior
Code Samples

hello.go
```
package main

import (
	"fmt"
)

func main() {
	fmt.Println("hello, from the vulnerable app" + DB_USER)
}
```

config_prod.go
```
// +build prod

package main

const (
	DB          = "localhost"
	DB_USER     = "prod"
	DB_PASSWORD = "hhend77dyyydbh&^psNSSZ)JSM--_%"
)
```
Just to note the above password isn't real. I am simply trying to trigger gosec into a issuing a finding.

### gosec version
Head of master

### Go version (output of 'go version')
`go1.12.4 darwin/amd64`

### Operating system / Environment
OSX

### Expected behavior
It successfully uses the build tag.


### Actual behavior
```
➜  buildtags_goapp git:(support-gosec-options) ✗ gosec -tags=prod ./...
[gosec] 2019/09/26 14:46:02 Including rules: default
[gosec] 2019/09/26 14:46:02 Excluding rules: default
[gosec] 2019/09/26 14:46:02 Import directory: <some_path>/buildtags_goapp
[gosec] 2019/09/26 14:46:02 Checking package: main
[gosec] 2019/09/26 14:46:02 Checking file: <some_path>/buildtags_goapp/hello.go
Results:

Golang errors in file: [<some_path>/buildtags_goapp/hello.go]:

  > [line 8 : column 49] - undeclared name: DB_USER



Summary:
   Files: 1
   Lines: 9
   Nosec: 0
  Issues: 0
```

If I run `go build -tags dev ./...`, I get a successful build.
### Summary 
(I tested this for G201 but inspected the code for G202 and believe it has the same issue.)

G201 will detect SQL string formatting when I have `fmt.Sprintf("SELECT * FROM TEST UNION %s", "SELECT * FROM test")` in my code. However, it will not detect when I have `fmt.Sprintf("select * from test union %s", "select * from test")` in my code. I believe this is a bug.

See: https://github.com/securego/gosec/blob/2.0.0/rules/sql.go#L184 and https://github.com/securego/gosec/blob/2.0.0/rules/sql.go#L94

### Steps to reproduce the behavior
Create a file `sql.go` with the following content:
```
package main

import "fmt"

func sqlConstructionLowercase() string {
	return fmt.Sprintf("select * from test union %s", "select * from test")
}

func sqlConstructionUppercase() string {
	return fmt.Sprintf("SELECT * FROM TEST UNION %s", "SELECT * FROM test")
}

func main() {
	fmt.Println(sqlConstructionLowercase())
	fmt.Println(sqlConstructionUppercase())
}
```

Run `gosec` on it:

```
vagrant@ct100-test:~/dev/gosec/sql $ ../gosec .
[gosec] 2019/09/12 11:48:21 Including rules: default
[gosec] 2019/09/12 11:48:21 Excluding rules: default
[gosec] 2019/09/12 11:48:21 Import directory: /home/vagrant/dev/gosec/sql
[gosec] 2019/09/12 11:48:21 Checking package: main
[gosec] 2019/09/12 11:48:21 Checking file: /home/vagrant/dev/gosec/sql/sql.go
Results:


[/home/vagrant/dev/gosec/sql/sql.go:10] - G201: SQL string formatting (Confidence: HIGH, Severity: MEDIUM)
  > fmt.Sprintf("SELECT * FROM TEST UNION %s", "SELECT * FROM test")


Summary:
   Files: 1
   Lines: 16
   Nosec: 0
  Issues: 1

vagrant@ct100-test:~/dev/gosec/sql $ 
```

Only the uppercased version is shown as a problem. Both should be.

### gosec version
```
VERSION: 2.0.0
GIT TAG: 2.0.0
BUILD DATE: 2019-05-02T15:22:02Z
```

### Go version (output of 'go version')
```
go version go1.12.9 linux/amd64
```

### Operating system / Environment
Ubuntu 18.04.3 LTS

### Expected behavior
Lowercased SQL keywords are still inspected for SQL string formatting and SQL string concatenation problems.


### Actual behavior
SQL strings composed of lowercase SQL keywords are not inspected for SQL string formatting and SQL string concatenation problems.
### Summary 

The sql rule is using only a regexp expression to identify when is a SQL query into a constant string. 

https://github.com/securego/gosec/blob/4b59c948083cd711b6a8aac8f32721b164899f57/rules/sql.go#L204

This generates quite some false positives (See issues  #341 and #264). It would be great to improve its accuracy. There are various options to achieve this:
 - Improve the heuristic of the rule by checking more acuratly the context - see @gcmurphy's suggestions in the comments below 
- Investigate if a SQL parser can validate additionally the syntax in certain use cases when the query can be reconstructed - possible SQL parse https://github.com/xwb1989/sqlparser. 

### Steps to reproduce the behavior

### gosec version

### Go version (output of 'go version')

### Operating system / Environment

### Expected behavior

Reduce the number of false positive warnings generated by the rule.

### Actual behavior

It doesn't really differentiate between a plain string starting with a SQL keyword (e.g. SELECT) and a valid SQL query.   
### Summary 
The problem I encountered is when I am scanning this code with Gosec: 
```
package main

import (
	"log"
	"os/exec"
)

func RunCmd(command string) {
	cmd := exec.Command(command, "5")
	err := cmd.Start()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Waiting for command to finish...")
	err = cmd.Wait()
}

func main() {
	RunCmd("sleep")
}
```
Gosec thinks there is command injection and I launched the process with a variable but the command variable in the function `RunCmd` is nothing but a hardcoded string. 

I get an error from Gosec: 

```
G204: Subprocess launched with variable (Confidence: HIGH, Severity: MEDIUM)
  > exec.Command(command, "5")
```

### gosec version
2.0.0
### Go version (output of 'go version')
`go version go1.12.6 darwin/amd64`
### Operating system / Environment
macOS Mojave
### Expected behavior
The problem I noticed here is that Gosec doesn't traverse the three back to the "RunCmd" function call but instead tries to resolve the command variable only in the context of the function.

### Actual behavior
It would be great if Gosec understands better the context not only of the function but the function call with its arguments. 
### Summary

In the `resolve.go` file there is the `TryResolve` function which is described as follows: 
`TryResolve will attempt, given a subtree starting at some ATS node, to resolve all values contained within to a known constant.`

The problem is that when it's resolving an `ast.Ident` it calls the `resolveIdent` function.
Then in the `resolveIdent` function if the object type is a variable the function looks at the object declaration and then it checks if it's a known constant by calling `TryResolve`.
![image](https://user-images.githubusercontent.com/16246778/62132587-00f83700-b2e6-11e9-9f1f-8c9370914e67.png)


The problem is that this is a variable which can be changed multiple times.
For example in this code: 
```package main

import (
	"log"
	"os/exec"
)

func getConstant() string {
	return "top"
}

func main() {
	run := getConstant()
	run = "top"
	cmd := exec.Command(run, "5")
	err := cmd.Start()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Waiting for command to finish...")
	err = cmd.Wait()
	log.Printf("Command finished with error: %v", err)
}
```

the `run` variable is not a constant because it was initialized by the result of a function even though its value is changed to a hardcoded string.

Another example:
```
package main

import (
	"log"
	"os/exec"
)

func getConstant() string {
	return "top"
}

func main() {
	run := "top"
	run = getConstant()
	cmd := exec.Command(run, "5")
	err := cmd.Start()
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Waiting for command to finish...")
	err = cmd.Wait()
	log.Printf("Command finished with error: %v", err)
}
```
Here run will be considered as a constant even though it's value is changed by the return of a function.

### Steps to reproduce the behavior

### gosec version
`2.0.0`
### Go version (output of 'go version')
`go version go1.12.6 darwin/amd64`
### Operating system / Environment

macOS Mojave

### Expected behavior
In the best scenario `TryResolve` when resolving a variable `TryResolve` will be called again on the last value of the variable or on the last assignment.
That way `Gosec` will know if it's truly a constant

### Summary 

Some imports are currently blacklisted by hard-coding them in various balcklist rules. 
https://github.com/securego/gosec/blob/36a82ea85e59163446547798563e24ee8d5a27c7/rules/blacklist.go#L50

https://github.com/securego/gosec/blob/36a82ea85e59163446547798563e24ee8d5a27c7/rules/rulelist.go#L90

I think that it would be nice to define a generic blacklist rule which is able to parse the blacklisted import paths from the rule config.

### Steps to reproduce the behavior

### gosec version

### Go version (output of 'go version')

### Operating system / Environment

### Expected behavior

### Actual behavior
