### This is a...

* [ ] feature request
* [ ] bug report
* [ ] usage question

### What toolchain are you using for transpilation/bundling?

* [ ] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version:
Typescript Version:
Angular Version:
@angular-redux/store version:
@angular/cli version: (if applicable)
OS:

### Link to repo showing the issus
(optional, but helps _a lot_)

### Expected Behaviour:



### Actual Behaviour:



### Stack Trace/Error Message:



### Additional Notes:
(optional)


### This is a...

* [ ] feature request
* [X] bug report
* [ ] usage question

### What toolchain are you using for transpilation/bundling?

* [X] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: v10.15.3
Typescript Version: typescript@3.4.5
Angular Version: 8.0.0
@angular-redux/store version: @angular-redux/store@10.0.0
@angular/cli version: (if applicable): @angular/cli@8.0.1
OS: Windows 10 Version 1803 (OS Build 17134.765)

### Link to repo showing the issus
(optional, but helps _a lot_)

### Expected Behaviour:
npm installs @angular-redux/store on @angular/core@^8.0.0 without warning

### Actual Behaviour:
npm WARN @angular-redux/store@10.0.0 requires a peer of @angular/core@^7.0.0 but none is installed. You must install peer dependencies yourself.

### Stack Trace/Error Message:
npm WARN @angular-redux/store@10.0.0 requires a peer of @angular/core@^7.0.0 but none is installed. You must install peer dependencies yourself.

### Additional Notes:
(optional)


### This is a...

* [ ] feature request
* [ ] bug report
* [x] usage question

### What toolchain are you using for transpilation/bundling?

* [x] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: 12.3.1
Typescript Version: 3.4.5
Angular Version: 8.0.0
@angular-redux/store version: 10.0.0
@angular/cli version: (if applicable)
OS: macOS 

### Link to repo showing the issus
(optional, but helps _a lot_)

### Expected Behaviour:
@angular-redux/store is working fine with Angular 8



### Actual Behaviour:
Seems not to work with Angular 8


### Stack Trace/Error Message:
zone-evergreen.js:359 Uncaught (in promise) TypeError: Class constructor Observable cannot be invoked without 'new'
    at new ActionsObservable (ActionsObservable.js:30)
    at epicMiddleware (createEpicMiddleware.js:31)
    at redux.js:615
    at Array.map (<anonymous>)
    at redux.js:614
    at RootStore.configureStore (angular-redux-store.js:584)
    at new StoreModule (store.module.ts:158)
    at _createClass (core.js:23183)
    at _createProviderInstance (core.js:23137)
    at initNgModule (core.js:23043)
    at new NgModuleRef_ (core.js:24175)
    at createNgModuleRef (core.js:24158)
    at Object.debugCreateNgModuleRef [as createNgModuleRef] (core.js:35695)
    at NgModuleFactory_.create (core.js:36820)
    at core.js:31585
    at ZoneDelegate.invoke (zone-evergreen.js:359)
    at Object.onInvoke (core.js:30892)
    at ZoneDelegate.invoke (zone-evergreen.js:358)
    at Zone.run (zone-evergreen.js:124)
    at NgZone.run (core.js:30757)
    at PlatformRef.bootstrapModuleFactory (core.js:31578)
    at core.js:31648
    at ZoneDelegate.invoke (zone-evergreen.js:359)
    at Zone.run (zone-evergreen.js:124)
    at zone-evergreen.js:855
    at ZoneDelegate.invokeTask (zone-evergreen.js:391)
    at Zone.runTask (zone-evergreen.js:168)
    at drainMicroTaskQueue (zone-evergreen.js:559)
    at ZoneTask.invokeTask [as invoke] (zone-evergreen.js:469)
    at invokeTask (zone-evergreen.js:1603)
    at HTMLScriptElement.globalZoneAwareCallback (zone-evergreen.js:1629)


### Additional Notes:
(optional)


I need one store across all the modules, does any one have idea how to achieve this.
### This is a...

* [ ] feature request
* [*] bug report
* [ ] usage question

### What toolchain are you using for transpilation/bundling?

* [*] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: v8.12.0
Typescript Version: 3.1.6
Angular Version: 7.2.7
@angular-redux/store version: 9.0.0
@angular/cli version: (if applicable) 7.2.4
OS: windows 7

I have tsconfig with the following settings
```
{
  ...
  "compilerOptions": {
    ...
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    ...
  }
  ...
}
```
these are very useful settings, but they don't work with @select() decorator.
For example:
```
@Component({
  selector: "app-root",
  templateUrl: "app.component.html"
})
export class AppComponent {
  @select()
  private entities$: Observable<IReduxEntities>;
}
```
This code causes error: 
`Property 'entities$' has no initializer and is not definitely assigned in the constructor.`

I know that I can use `ngRedux.select(['entities']); ` instead of @select decorator. But it would be great if @select() decorator worked with my tsconfig
### This is a...

* [ ] feature request
* [X] bug report
* [ ] usage question

### What toolchain are you using for transpilation/bundling?

* [X] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: 10.15.3
Typescript Version: 3.2.4
Angular Version: 7.2.15
@angular-redux/store version: 10.0.0
@angular/cli version: 7.3.9
OS: Win7

### Link to repo showing the issus
(optional, but helps _a lot_)

### Expected Behaviour:

Implemented Redux-Thunk (2.3.0) 
Called a redux-thunk-action via dispatch
No compiler errors

### Actual Behaviour:

Compiler error

### Stack Trace/Error Message:

TS2345 (TS) Argument of type '(dispatch: any, getState: any) => void' is not assignable to parameter of type 'AnyAction'.
Property 'type' is missing in type '(dispatch: any, getState: any) => void' but required in type 'AnyAction'.

### Additional Notes:

Workaround: Cast the returning function of the redux-thunk-action as \<AnyAction\>\<any\>
Example:
return \<AnyAction\>\<any\>((dispatch, getState) => { ..... }

This seemed to be fixed https://github.com/angular-redux/store/pull/390 a while ago,
but might have been broken again in commit https://github.com/angular-redux/store/commit/5ab400fa08908dc763e3b4a0fa75387954ae63a1#diff-0d3376051b12933294267bc5c76dac1c


### This is a...

* [ ] feature request
* [ ] bug report
* [x] usage question

### What toolchain are you using for transpilation/bundling?

* [x] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: 10.15.1
Typescript Version: 3.2.2
Angular Version: 7.2.10
@angular-redux/store version: 9.0.0
@angular/cli version: (if applicable) 7.3.5
OS: macOS

### Notes
I have a 'normalized' state shape where entities are indexed by id.

The entities are rendered in a list, which is controlled by a form of filters and sort options. 

I'm using Epics to observe the form actions to update an array of filtered, sorted entity ids.
```ts
interface Entity {
  id: string,
  name: string
}

interface State {
  entities: { [id: string]: Entity },
  entityListIds: Array<string>
}
```
```ts
@Component({
  selector: 'entity-list',
  template: `
    <ng-container *ngIf="entityListIds$ | async as entityListIds;">
      <entity *ngFor="let entityId in entityListIds" [entityId]="entityId"></entity>  
    </ng-container>
  `
});
export class EntityListComponent {
  @select('entityListIds') entityListIds$: Observable<Array<string>>;
}
```

Can the EntityComponent use the `entityId` input with the `@select` decorator?
```ts
export class EntityComponent {
  @Input() entityId: string;
  @select(['entities', this.entityId]) entity$: Observable<Entity>;
}
```

I'm wondering if this is possible with instance methods/properties or if I have to inject the store. I'm also interested in scenarios where the input changes, and how to handle that with the select pattern. 


### This is a...

* [ ] feature request
* [x] bug report
* [x] usage question

### What toolchain are you using for transpilation/bundling?

* [x] @angular/cli
* [ ] Custom @ngTools/webpack
* [ ] Raw `ngc`
* [ ] SystemJS
* [ ] Rollup
* [ ] Other

### Environment

NodeJS Version: v10.10.0
Typescript Version: 3.1.1
Angular Version: 7.0.0
@angular-redux/store version: ^9.0.0
@angular/cli version: (if applicable) ~7.0.4
OS: Mac High Sierra

### Actual Behaviour:
Any update to a store will trigger another round of .select, even if that specific data has not changed.
For example:
`ngRedux.select(['MyStore', 'myData']).subscribe(....)` with the following states:
State 0:
```
{ //Root
	MyStore: {
		myData:{data:null},
		someOtherData:{data:null}
	}
}
```
State 1 - triggers select to fire (expected, since `myData` has been updated):
```
{ //Root
	MyStore: {
		myData:{data:"SomeData"},
		someOtherData:{data:null}
	}
}
```
State 2 - triggers select to fire (unexpected, since `myData` has not been updated):
```
{ //Root
	MyStore: {
		myData:{data:"SomeData"},
		someOtherData:{data:"OtherDataUpdated"}
	}
}
```

### Expected Behaviour:
`ngRedux.select(['MyStore', 'myData']).subscribe(....)` should only fire subscriptions when there are changes to `myData` not changes to `MyStore` overall.
In the example above, State 2 should not trigger my subscription.


### Additional Notes:
I'm marking this as both a usage question and a bug because I'm not sure if this is just an issue with the store as a whole, or if there is some way I need to have configured my store or I can be doing something different in my implementation.


### This is a...

* bug report


### What toolchain are you using for transpilation/bundling?

* @angular/cli

### Question

I wrote this up on StackOverflow trying to get any help.  It is definitely an @angular-redux/store issue though.  I deleted my library, `dist/my-library`, and ran `dist/test` (the application) and the same issue is occurring.  

https://stackoverflow.com/questions/54700570/how-to-deploy-angular-app-with-local-library-with-redux
