In the [blogpost](https://proandroiddev.com/unidirectional-data-flow-on-android-the-blog-post-part-1-cadcf88c72f5) you’ve considered unidirectional data flow (UDF) architecture in the Clean architecture (CA) context. Thank you for this point!

I’ve a question about СA layers and UDF.

In CA the domain layer is only business logic and business entity, the layer doesn't know anything about the presentation layer and the data layer. The layer is independent.

Basically in CA the data layer has the state of the app. The presentation layer has state of the screen, such as isLoading, isLoaded, screen is green or screen is red, etc. But the domain layer doesn’t it . In the article you’ve written that the store is the domain layer. It’s confused me bit. 

I thought that UDF is more about the presentation layer in CA context. For example, you can switch MVI (one of UDF implementations) to MVP, MVVM and back. Of course you will have some bit change other layers.

What do you think about put the store to the presentation layer? And side effects moved to the domain layer?

Thank you for the article!

What is happened if I'll remove `@syncronized`?

I’ve considered two options. Method `handle()` will execute on the `storeThread` or same thread. 

Between lines of the code `actions.offer(action)` and `handle(actions.poll())` it's possible that will add many items to the queue. But I'm not seeing problems without `@syncronized`.

I'm feeling that missed important stuff in the sample. Can you explain me about `@synchronized` in this case?
