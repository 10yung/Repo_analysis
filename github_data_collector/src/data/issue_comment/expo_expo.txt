Hey.
I use the latest version of react-native, expo and expo-in-app-purchases.
Package «expo-in-app-purchases» is used for auto-renewable subscriptions.
On any Android devices and any countries – everything works well (as aspected).
**On iOS devices – sometimes works, sometimes not :(**

If a user comes in from the US, the connection via the `connectAsync` method never ends. There is neither error nor success. It feels like the application is running in an emulator (but it is not).
If you are logged in from the same iPhone, but from another country (e.g. Ukraine) - everything works well (as aspected).

Who knows what may be the problem? Does it look like a bug? Any suggestion?
## 🐛 Bug Report

### Environment

```
  Expo CLI 3.11.7 environment info:
    System:
      OS: macOS 10.15.1
      Shell: 5.7.1 - /bin/zsh
    Binaries:
      Node: 10.16.0 - ~/.nvm/versions/node/v10.16.0/bin/node
      Yarn: 1.17.3 - ~/.nvm/versions/node/v10.16.0/bin/yarn
      npm: 6.11.3 - ~/.nvm/versions/node/v10.16.0/bin/npm
      Watchman: 4.9.0 - /usr/local/bin/watchman
    IDEs:
      Android Studio: 3.3 AI-182.5107.16.33.5314842
      Xcode: 11.2.1/11B53 - /usr/bin/xcodebuild
    npmPackages:
      expo: ~36.0.0 => 36.0.2
      react: ~16.9.0 => 16.9.0
      react-native: https://github.com/expo/react-native/archive/sdk-36.0.1.tar.gz => 0.61.4
      react-navigation: ^4.0.10 => 4.0.10
    npmGlobalPackages:
      expo-cli: 3.11.7
```

I'm testing on an iOS device

### Steps to Reproduce

My phone region is Brazil.
Call `getProductsAsync`.

### Expected Behavior

The returned subscription price should be `R$6,90`.

### Actual Behavior

The returned subscription price is `R$6.9`.

Should be able to press `/` to focus search
# Why

Expo CLI automatically resolves this field since October https://github.com/expo/expo-cli/pull/1092 (Not sure how long we want to wait before deprecating the field).

# Test Plan

`expo start` should work for all platforms in all examples
# Why

Other one wasn't square, transparent, or center-aligned. We should also host this somewhere with a short url for snacks.

# How

- reduced image size with `imagemin --plugin.pngquant.quality={0.05,0.1} splash.png > splash.png`
- re-run `npx expo-optimze` in each modified example
# Why

Next `expo-notifications` feature.

# How

- `NotificationsHandlerModule` registers at singleton for new notifications/messages
- for each message it _starts up_ a task which emits an event to JS
- in response to the JS event, delegate responds with the appropriate behavior (eg. `shouldShowAlert: true`)
- the behavior is pushed to native side using `NotificationsHandler.handleNotificationAsync` call
- which directs it to the appropriate task
- task handles the behavior (on iOS calls `completionHandler`, on Android it will show the notification once implemented) and finishes
- if for whatever reason delegate didn't respond in 3 seconds, `onTimeout` is called on task, which emits another event to JS (for debugging purposes) and the task finishes

![excalidraw-202018123849-2](https://user-images.githubusercontent.com/1151041/72624999-2b978400-3948-11ea-9043-9dd5195cdece.png)

# Test Plan

Tested manually by sending notifications and logging messages that the scheme works both when the delegate responds and when it does not.
Expo: 36.0.1
Docs: https://docs.expo.io/versions/v36.0.0/sdk/location/#locationgetcurrentpositionasyncoptions

Now, I don't know what side is right or wrong here, but the docs specify a `maximumAge` parameter for `Location.getCurrentPositionAsync`, which is not available in typescript. At the same time there is a `timeout` option in the ts definition of LocationOptions but not in the docs.
# Why

Part of #6521 

# How

- Refactored JS code responsible for rendering DevMenu and converted it to TypeScript.
- Redesigned DevMenu to be a bottom sheet instead of a modal to improve user experience.
- Upgraded `react-navigation-stack` to `^2.0.15`.
- In/out DevMenu animations are now controlled by JavaScript side.
- Moved Kernel's module methods related to DevMenu to separate `DevMenuModule` file (I think it makes the code using it clearer).
- `Nux` wasn't clear to me what it is and what it does, so I suggest renaming it to `Onboarding`.
- Prepared some stuff to be used on Android as well (Android support will come in a separate PR).

# To do

- [ ] Remove legacy two-finger gesture.

# Test Plan

- [x] Test on experience in debug mode
- [ ] Test on experience in production mode
- [x] Test on snacks
- [x] Test on older SDKs
- [ ] Test on simulators

# Demo

![ezgif com-resize](https://user-images.githubusercontent.com/1714764/72625046-423ddb00-3948-11ea-937a-155aa154857a.gif)

# Why

`uuid-js` is very old and it not really necessary for the generation of a simple UUID.

# How

The UUID generation comes from https://gist.github.com/jed/982883 (which is linked by https://github.com/uuidjs/uuid for the smallest possible UUID generation).

# Test Plan

Use `createDownloadReusable` in any form.


# Why

- fixes several imports in example code which no longer worked
- renames `GoogleService-info.plist` -> `GoogleService-Info.plist`
- update ios workflow to use GoogleService-Info plist by default

# How

Tested examples in test-app

# Test Plan

- on iOS, add GoogleService-Info.plist to app.json
- omit `clientId` from `initAsync` method on iOS
- sign-in should still work

