以下を参照:
https://github.com/mei23/misskey/issues/648 

残っているドキュメントも必要に応じて削除や修正等する必要があると思います。
## 関連
https://github.com/mei23/misskey/issues/648 

## 💡 Summary

現在のページネーションの仕組みでは、例えば10件表示したい場合は最大11件取得し、0~10件返ってきた場合は「もっと読み込む」が不可能と判断し返ってきたものすべて表示し、11件返ってくれば「もっと読み込む」が可能だと判断して最後の1件は切り捨て、10件だけ表示する仕組み
ここで、通知取得API側からするとAPIによって取得された通知はすべて既読にするので、11件取得されたとき、実際には最後の1件は切り捨てられユーザーの目には入らないとしても、すべて既読扱いになってしまう。
## Summary
Misskey: `/users/:id/publickey`
Mastodon: `/users/:id#main-key`
で、後者の形式に依存している実装が多くこれ起因の問題も多いため、めんどくさいので変えちゃう。

https://github.com/syuilo/misskey/issues/2734#issuecomment-574690488

## Summary
AP Actorの`publicKeyPem`の形式として`PKCS#1`使ってる実装と`PKCS#8`を使ってる実装がある
```
BEGIN RSA PUBLIC KEY ではじまるやつ => PKCS#1
BEGIN PUBLIC KEY ではじまるやつ => PKCS#8
```
MisskeyはPKCS#1を使っているが
Mastodon/Pleroma/PeerTube などは (ほぼ全てかも？) PKCS#8を使っている

たいていの実装でどちらの形式でも解釈できるが
PeerTubeのようにValidationでrejectしちゃっているのもある https://github.com/syuilo/misskey/issues/5715

めんどくさいので`PKCS#8`にしてしまう

参考：
おそらく標準仕様にkey形式のことは書いてなくて
ドラフトっぽいドキュメントとか特定実装のドキュメントにも
あんまりはっきりと書いてなさそうだけど、`PKCS#8`の方が例示されている
https://www.w3.org/wiki/SocialCG/ActivityPub/Authentication_Authorization
https://web-payments.org/vocabs/security
https://blog.joinmastodon.org/2018/06/how-to-implement-a-basic-activitypub-server/

Node.jsのPEM生成のとこには`pkcs8 (spki)`がおすすめみたいなことが書いてある
https://nodejs.org/api/crypto.html#crypto_crypto_generatekeypair_type_options_callback
> It is recommended to encode public keys as 'spki' and private keys as 'pkcs8' with encryption for long-term storage:

https://github.com/mei23/misskey/issues/614
## Summary
今は、Activity配信の最後のリトライが約4時間後だけど

- 原因となったなんらかの障害が4時間でなおらない可能性がある
- AP周りの変更やなんらかの不整合が、対向からの再取得タイミングで直る可能性があるが、4時間だと発生しないかもしれない 24時間なら発生するかも。

なのでもう少し長めにリトライしたい。
Mastodonは1週間ぐらい？粘ってた気がする

リトライ期間はオプション指定出来たりするといいかも。

https://github.com/mei23/misskey/issues/636
## Summary
今は `deliverJobConcurrency`, `inboxJobConcurrency` といった設定値があるものの
- ワーカープロセスあたりなので、`clusterLimit`やサーバー台数が増えた場合に倍々に増えてしまうため調整しにくい
- あくまでも同時実行数なので遅い通信相手を基準に設定しなくてはならず、そうするとレートリミットとして利用できない

ので、全体での流入数の制限を付ける。

※ bullにRateLimiterがある

https://github.com/mei23/misskey/issues/633

## 💡 Summary

縦方向のスクロールをしようとすると引っかかることがある

原因がわからず、また再現性もなく、**リロードすると必ず治る**

情報が分かり次第追記します

## 🙂 Expected Behavior

スクロールがスムーズである

## ☹️ Actual Behavior

発生時はスクロールしようとすると引っかかってしまう

## 📝 Steps to Reproduce

不明

## 📌 Environment

macOS 10.15.2
Chrome 79.0.3945.117
Misskey 11.37.1

## 💡 Summary

I recently installed a Misskey instance, it's really great :) but I can't follow Peertube and Pixelfed users.

## 🙂 Expected Behavior

Following success

## ☹️ Actual Behavior

This has already been discussed here : https://github.com/syuilo/misskey/issues/3996#issue-403448950 and https://github.com/syuilo/misskey/issues/3781#issue-394556635 for pixelfed but obviously the problem persists

Instances return 403 errors for Peertube and 500 errors for Pixelfed.

Example : `[queue.deliver] failed (500 Internal Server Error) id=4751 attempts=1/8 age=169ms to=https://pixelfed.social/users/KazukyAkayashi/inbox`

## 📝 Steps to Reproduce

1. Searh user (pixelfed or peertube)
2. Follow user

## Summary
MFMの実装（パーサーとVueコンポーネント）をライブラリとして分離すれば、サードパーティのWebクライアントの製作が容易になりそう。  
また、Misskeyのコードを流用しようとするとAGPLによってソースコードを公開しなければならないが、MITなど別のライセンスでライブラリを提供すればAGPLで公開しなくてもいいようになる。
