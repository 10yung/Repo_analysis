<!--

Thank you for reporting an issue! This guide will help us respond to your
report quickly. Please try to provide as much information as possible.

If you need help, feel free to join the JRuby chat room on Matrix:

* https://matrix.to/#/#jruby:matrix.org

-->

**Environment Information**
  
2 environments running same app:
ubuntu 14.04, java 7, jruby 1.7
ubuntu 18.04, java 8, jruby 9.2.8.0

JVM flags:
```
-XX:+HeapDumpOnOutOfMemoryError
-XX:InitialHeapSize=8053063680
-XX:+ManagementServer
-XX:MaxHeapSize=8053063680
-XX:+PrintGC
-XX:+PrintGCDateStamps
-XX:+PrintGCDetails
-XX:+PrintGCTimeStamps
-XX:ThreadStackSize=2048
-XX:+UseCompressedClassPointers
-XX:+UseCompressedOops
-XX:+UseParallelGC
```

Other relevant info you may wish to add:
Rails 3.2, trinidad 1.4.4 (120 threads)
Issue only happens on production environment under heavy request load

**Expected Behavior**

App should not be slow on 9k

**Actual Behavior**

App is slow on 9k 2 hours after startup (12 pm on the screenshot is when it was started and it become slow at around 2:15pm).
Looks like the slowness is happening because app doesn't have enough memory for new objects

9k memory usage and gc.log for this period:
<img width="998" alt="Screen Shot 2020-01-15 at 1 25 43 PM" src="https://user-images.githubusercontent.com/2828431/72477775-277f3100-37a5-11ea-851a-33199d99abc1.png">

[9k_gc.log](https://github.com/jruby/jruby/files/4067910/9k_gc.log)

1.7 memory usage:
<img width="993" alt="Screen Shot 2020-01-15 at 1 30 15 PM" src="https://user-images.githubusercontent.com/2828431/72477786-2fd76c00-37a5-11ea-82d1-b6818171274d.png">

[17_gc.log](https://github.com/jruby/jruby/files/4067947/17_gc.log)

fixes #5979
This is the PR for our ruby-2.6 branch, in progress since earlier this year.
**Environment**
jruby 9.2.10.0-SNAPSHOT (2.5.7) 2019-11-08 c56caa3 Java HotSpot(TM) 64-Bit Server VM 11.0.2+9-LTS on 11.0.2+9-LTS +jit [linux-x86_64]
Linux DESKTOP-2POPPQP 4.4.0-17763-Microsoft #864-Microsoft Thu Nov 07 15:22:00 PST 2019 x86_64 x86_64 x86_64 GNU/Linux

I fixed a bunch of bugs in https://github.com/jruby/jruby/pull/5960

but in order to support https://github.com/ankane/lightgbm/tree/fiddle 
there's one blocker which I don't know how to fix

a simple test case
https://github.com/jruby/jruby/blob/4e8bb2666a7257f0f5986800f96bb88efdd6acbd/test/mri/fiddle/test_func.rb#L73

**Expected Behavior**
test passes

**Actual Behavior**
```
Fiddle::TestFunc#test_qsort1:
TypeError: cannot convert parameter to native pointer
```

this code tries to convert the class into a pointer
https://github.com/jruby/jruby/blob/42ae3ed3dad8a272464c215346b182a1b5e8cb56/core/src/main/java/org/jruby/ext/ffi/jffi/JITRuntime.java#L530

/opt/jruby-9.2.9.0/lib/ruby/stdlib/rubygems/defaults/jruby.rb:34: warning: constant Gem::ConfigMap is deprecated
NOTE: Gem::Specification#rubyforge_project= is deprecated with no replacement. It will be removed on or after 2019-12-01.
Gem::Specification#rubyforge_project= called from /opt/jruby-9.2.9.0/lib/ruby/gems/shared/specifications/default/json-2.2.0-java.gemspec:18.

So, it seems an update of the script is in order. Note: everything WORKS fine, but you might have issues down the road leaning upon deprecated forms of code.

Thank you for creating something wonderful : I love JRuby.
This PR will include commits to reduce the chance of `Enumerator#next` fibers leaking.

The original issue is #6004.

So far most of the leaks appear to be caused by combining `Enumerator::Lazy` with `Enumerator#next`, since many lazy paths construct new Lazy instances in such a way that they are hard-referenced by the eventual fiber.
This issue is formed out of comments to #5890 starting [here](https://github.com/jruby/jruby/issues/5890#issuecomment-571296077).

The text of those comments (from @ckpeter) is copied below for context:

> In my experience, JRuby 9.x series is significantly heavier in memory usage than 1.7. I too had a Rails 4 app that, when first upgraded to 9.0/9.1/9.2, would constantly OOM, leading me to suspect leak. However, when I gave it 2-3G of heap and 1G metaspace, the usage eventual plateaus. With 9.2.9, my class load count would go to 30K within the first few minutes, then grows to 70K within the first 3 days, then it slows the growth to 2k/day. So it still look like some kind of leak, but at least it is a very slow one. The class unload count is usually 10% of the running total at any given time. Heap usage is usually between 900 MB to 1500 MB, with no obvious leak (because every few days when I GC, the memory goes down to below 1 GB).
>
>In comparison, with the same Rails 4 app, running on JRuby 1.7, the class count would stay flat at around 25k-30k for 4 weeks easily. Heap usage is usually 400 MB - 700 MB.

> @enebo Yes I use the exact same 64-bit VM 1.8.0_101. The only difference is JRuby version (1.7.25 vs. 9.2.9)
>
> @headius I'd be happy to investigate and get your the heap dumps. Unfortunately I just restarted the web server a few hours ago, so that blew away the history in the last 8 days. Let me run the app over 9.2.9 for a week, dump heap, and then run it over 1.7.25 for a week, and dump heap. Assuming the memory differential is noticeable, I'll file a separate bug in a few weeks.
>
> I assume it'd be enough to dump heaps and jconsole screenshots for both 1.7 and 9.2. If there is any other kinds of dumps or measurements you want me to collect, please let me know.
I restarted the build and this went away. Happened during spec:ruby:fast suite:

```
1)
Socket.udp_server_loop_on when no connections are available blocks the caller ERROR
NoMethodError: undefined method `each' for nil:NilClass
/home/travis/build/jruby/jruby/lib/ruby/stdlib/socket.rb:979:in `udp_server_recv'
/home/travis/build/jruby/jruby/lib/ruby/stdlib/socket.rb:1008:in `block in udp_server_loop_on'
org/jruby/RubyKernel.java:1442:in `loop'
/home/travis/build/jruby/jruby/lib/ruby/stdlib/socket.rb:1006:in `udp_server_loop_on'
/home/travis/build/jruby/jruby/spec/ruby/library/socket/socket/udp_server_loop_on_spec.rb:16:in `block in <main>'
```
**Environment**
  
* JRuby version: jruby 9.2.8.0 (2.5.3) 2019-08-12 a1ac7ff OpenJDK 64-Bit Server VM 25.232-b09 on 1.8.0_232-b09 +jit [linux-x86_64]
* Operating system and platform: Linux c2e6ee70592c 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 GNU/Linux

**Expected Behavior**

Expected this script to behave the same way as in MRI 2.6.5:

```ruby
# test.rb
using(Module.new do
  refine String do
    def foo
      "bar"
    end
  end
end)

eval "\n#{<<~'END_of_GUARD'}", binding, __FILE__, __LINE__
  p "foo".foo
END_of_GUARD
```

```sh
$ ruby -v
ruby 2.6.5p114 (2019-10-01 revision 67812) [x86_64-darwin18]

$ ruby test.rb
"bar"
```

**Actual Behavior**

```sh
$ ruby -v
jruby 9.2.8.0 (2.5.3) 2019-08-12 a1ac7ff OpenJDK 64-Bit Server VM 25.232-b09 on 1.8.0_232-b09 +jit [linux-x86_64]

$ ruby test.rb
NoMethodError: undefined method `foo' for "foo":String
Did you mean?  fork
  <main> at tmp/eval_refine.rb:10
    eval at org/jruby/RubyKernel.java:1061
  <main> at tmp/eval_refine.rb:9
```

Moving `using` into `eval` resolves the issue.
With #5672, we moved to a pure-Ruby Enumerator#next impl that uses Fibers. Along with that came the protocol originated by Rubinius whereby any class that implements `to_generator` could provide an external generator (iterator) that does not need a Fiber to maintain state.

We did not ever implement this method for any core classes.

Given that the vast majority of Enumerator#next usage is against Array, this would substantially reduce the number of live fibers in the system. I believe we should also do it for any other types that have their own `each` logic, such as Hash.

See #6004 for an example of how quickly our thread-based Fiber can blow up if it's leaking. If these were all external iterators, we might avoid the problem (but it should still be fixed).