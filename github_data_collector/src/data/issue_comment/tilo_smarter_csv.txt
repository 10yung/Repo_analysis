Hi,

I have a picky client and need to clarify the licensing, is it "MIT and GPL-2" or "MIT or GPL-2".

Thanks
Paul
This gem looks amazing and like it would solve a lot of CSV parsing issues I run into over and over. Of particular usefulness is the `hash_transformations` and `header_transformations` I see in the wiki. Unless I'm mistaken, it looks like these options are only available in the 2.0 release. 

When will that release be publicly available? I would even be okay with a `2.0.0.pre1` release as long as it's a git tag or a rubygems release, but currently it looks like I either need to point at master or the 1.x versions.
This PR updates the CI matrix to use latest JRuby, **9.2.9.0**.

[JRuby 9.2.9.0 release blog post](https://www.jruby.org/2019/10/30/jruby-9-2-9-0.html)
## Steps to reproduce:

Given a file called `data.csv` with the following:

```
id	start	end
40456	0900	2100
40881	0900	0200
74581	0900	1645
98359	0900	1800
141635	0900	1645
178431	0800	0200
220975	1300	1700
266212	0900	1800
276688	0900	2200
288836	0900	1700
```

Run the following script:

```ruby
#!/usr/bin/env ruby

require 'smarter_csv'

path = File.expand_path('data.csv', __dir__)
data = SmarterCSV.process(
  path,
  {
    col_sep: "\t",
    hash_transformations: [:remove_blank_values, :convert_values_to_numeric_unless_leading_zeros]
  }
)

data.each do |row|
  s, e = row[:start], row[:end]
  puts "start: #{s} (#{s.class})\tend: #{e} (#{e.class})"
end
```

## Expected

- Values are strings
- Leading zeroes are preserved

## Actual

```
start: 900 (Integer)	end: 2100 (Integer)
start: 900 (Integer)	end: 200 (Integer)
start: 900 (Integer)	end: 1645 (Integer)
start: 900 (Integer)	end: 1800 (Integer)
start: 900 (Integer)	end: 1645 (Integer)
start: 800 (Integer)	end: 200 (Integer)
start: 1300 (Integer)	end: 1700 (Integer)
start: 900 (Integer)	end: 1800 (Integer)
start: 900 (Integer)	end: 2200 (Integer)
start: 900 (Integer)	end: 1700 (Integer)
```
I'm using the `Readline` method with `StringIO`.

I get this warning about UTF8 

    WARNING: you are trying to process UTF-8 input, but did not open the input with "b:utf-8" option. See README file "NOTES about File Encodings".

I have consulted that part of the Readme but I don't see how I would actually fix this because I'm not reading anything from a file? (It's coming from the `ftp.getbinaryfile()` method in `Net::FTP`
I ran into this issue while processing poorly quoted, non standard CSV files with odd numbers of unescaped quotes found in the CSV lines. So I used the `force_simple_split: true` option to process those files (the column separator character is ";", so its working very well since there is almost no chance I encounter the ";" character in the data itself).

The problem is that the count of quotes (`options[:quote_char]`) is used to detect multi-lines row data. This is working for well quoted CSV files but not for a non-standard CSV files with odd quote's number that will be processed with the option `force_simple_split: true`. Because of that, the core code detects a multi-line row data and I get the following error when processing the files : 

```
EOFError:
       end of file reached
     # ./lib/smarter_csv/smarter_csv.rb:188:in `readline'
     # ./lib/smarter_csv/smarter_csv.rb:188:in `process'
```

I added a test case so you can reproduce the error.

I'm fully aware that this is not a perfect solution since it would be impossible to process multi-line row data files with force_simple_split to true. But in my opinion using the `force_simple_split` option means you can't rely on quote to parse the file. That's why I'm proposing this quick (but effective !) fix.
Hello,
   Your smarter_csv library  and README was a great inspiration for using "plain" hashes for returning records in the new csvreader library (instead of CSV::Table, CSV::Row, etc. as done in the old std csv library).

  Anyways, as far as I can tell your library doesn't have its own csv parser and still uses the old std csv library under the hood. I invite you to consider to use the new modern csvreader (see <https://github.com/csvreader/csvreader>) that offers more formats / dialects / variants, for example.

 Also since you're a leading CSV ruby expert and user it would be greatly appreciated if you could tell (don't hold any negatives back) what's missing in the new csvreader library and if it would be a good replacement - dare I say - for smarter_csv too (getting back in the long run to a new / better / modern ruby csv std base library)

Cheers. Prost.  Greetings from Vienna, Austria.
I've changed `hash_validations` to use `instance_exec` instead of just a normal `call` so that the `Proc` can add errors to `@errors` and warnings to `@warnings`.  I thought about doing it for `data_validations` and `header_validations` but it seemed kind of pointless.  I've also added tests to make sure it all works.
If you pass in a file with a bom character, the rewind jumps back to before the bom.

```
file = File.open(csv_file, "r:bom|utf-8")
file.readline.first != "\xEF" # true - no BOM character
file.rewind
file.readline.first == "\xEF" # true - BOM character
```

This is a problem for required and missing headers, because the first header value will contain the blank character and not correctly match the given string.

Problem line:
[1.2-stable/lib/smarter_csv/smarter_csv.rb#L35](https://github.com/tilo/smarter_csv/blob/1.2-stable/lib/smarter_csv/smarter_csv.rb#L35)

Related stack overflow:
[https://stackoverflow.com/a/7780531](https://stackoverflow.com/a/7780531)

`key_mapping` contains a list of csv headers mapped to attribute names.

`required_headers` is actually expected to contain a list of attribute names, not csv headers. 

For example, lets say a csv has 1 required column in it with the header of "name".  You need the attribute to be mapped to "full_name", because that is what you called it in your model.  Your `key_mapping` would look like this:

```
{
  "name" => "full_name"
}
```

The csv header would be "name" and if you wanted to require name, I would think you would need to set `required_headers = ["name"]` not `["full_name"]`, since the header as the user sees it is is `"user"`.

Unfortunately, currently, `required_headers` really is `required_attribute_names` or something along those lines.
