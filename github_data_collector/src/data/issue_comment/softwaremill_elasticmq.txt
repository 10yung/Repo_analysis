Updates [org.scalameta:scalafmt-core](https://github.com/scalameta/scalafmt) [from 2.2.2 to 2.3.2](https://github.com/scalameta/scalafmt/compare/v2.2.2...v2.3.2).
[Release Notes/Changelog](https://github.com/scalameta/scalafmt/releases/tag/v2.3.2)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scalameta", artifactId = "scalafmt-core" } ]
```
</details>

labels: library-update, semver-minor
Looks like the last versions weren't published for `softwaremill/elasticmq-native`. This is unfortunate since #309 would be nice to have on docker hub.
Assume we have two queues, one is in the AWS and the other resides in the ElasticMQ locally. Both are empty.

When I try to delete the message from the queue in the AWS using the invalid receipt handle, I get the following:
```
aws sqs delete-message --queue-url https://queue.amazonaws.com/real-queue-url --receipt-handle fake

An error occurred (ReceiptHandleIsInvalid) when calling the DeleteMessage operation: The input receipt handle "fake" is not a valid receipt handle.
```

And when I try to do the same operation on the local queue in the elasticMQ it performs silently:
```
aws --endpoint-url http://localhost:9324 sqs delete-message --queue-url http://localhost:9324/queue/local_queue --receipt-handle fake
```

I start elasticMQ from Docker container by running `docker run -p 9324:9324 softwaremill/elasticmq` 
The version of the image is `0.15.3`
https://docs.aws.amazon.com/AWSSimpleQueueService/latest/SQSDeveloperGuide/sqs-quotas.html#quotas-messages

SQS limits attributes to 10 but ElasticMQ does not enforce the same limitation. There should be a way to toggle the enforcement of this restriction in ElasticMQ to mirror the failure if the same request was made to AWS.
Mounting files is only supported on Linux and not portable to other OSs.
This makes it unnecessarily difficult to use this docker image on Windows and other operating systems.
For details take a look at https://github.com/moby/moby/issues/30555.
It would be really nice if the QueueUrl reflected the region and the external hostname that the queue was created for. Right now I can create a queue for the eu-west-1 region and it'll report localhost as the queue hostname.

I can configure the hostname by setting a custom.conf file with the node-address.host/port set to what I want. But this makes the QueueUrl fixed based on what I started the server with. 

It's my understanding that SQS QueueUrls look like this pattern: 
`sqs-{region}.amazonaws.com/{account}/{name}`

Is there no way on request to check the incoming request and build the queue url based on that rather than a static variable in a config file? 
After upgrading to v014.7 I was getting an Unknown action error message when sending a request to receive messages without specifying queue url. This is the response error
```
{ InvalidAction: InvalidAction; see the SQS docs.
          at Request.extractError (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/protocol/query.js:50:29)
          at Request.callListeners (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:106:20)
          at Request.emit (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:78:10)
          at Request.emit (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:683:14)
          at Request.transition (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:22:10)
          at AcceptorStateMachine.runTo (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/state_machine.js:14:12)
          at /opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/state_machine.js:26:10
          at Request.<anonymous> (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:38:9)
          at Request.<anonymous> (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:685:12)
          at Request.callListeners (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:116:18)
        message: 'InvalidAction; see the SQS docs.',
        code: 'InvalidAction',
        time: 2019-06-14T09:23:55.016Z,
        requestId: undefined,
        statusCode: 400,
        retryable: false,
        retryDelay: 87.76172590007063 
}
```
and the logs from the server
```
09:23:55.002 [elasticmq-akka.actor.default-dispatcher-2] WARN  o.e.r.s.TheSQSRestServerBuilder$$anon$1 - Unknown action: ReceiveMessage

```
The same test on v0.14.6 produced this error
```
{ Invalid request: MissingQueryParamRejection(QueueName), MissingFormFieldRejection(QueueUrl): Invalid request: MissingQueryParamRejection(QueueName), MissingFormFieldRejection(QueueUrl); see the SQS docs.

          at Request.extractError (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/protocol/query.js:50:29)

          at Request.callListeners (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:106:20)

          at Request.emit (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:78:10)

          at Request.emit (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:683:14)

          at Request.transition (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:22:10)

          at AcceptorStateMachine.runTo (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/state_machine.js:14:12)

          at /opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/state_machine.js:26:10

          at Request.<anonymous> (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:38:9)

          at Request.<anonymous> (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/request.js:685:12)

          at Request.callListeners (/opt/jenkins/workspace/dev-tools-analytics-service_PR-7/node_modules/aws-sdk/lib/sequential_executor.js:116:18)

        message:

         'Invalid request: MissingQueryParamRejection(QueueName), MissingFormFieldRejection(QueueUrl); see the SQS docs.',

        code:

         'Invalid request: MissingQueryParamRejection(QueueName), MissingFormFieldRejection(QueueUrl)',

        time: 2019-06-14T10:08:05.604Z,

        requestId: undefined,

        statusCode: 400,

        retryable: false,

        retryDelay: 90.54765048250417 }
```

During the test I was using aws-sdk for node version 2.475.0 and node version 10.16.0. elasticmq was running in docker using official images from docker hub
**Dependencies of interest:-**
org.springframework.cloud:spring-cloud-starter-sleuth:2.1.1.RELEASE
org.springframework:spring-jms:5.1.5.RELEASE
com.amazonaws:amazon-sqs-java-messaging-lib:1.0.4
image: localstack/localstack

**Error -**
While consuming a message from SQS, I am getting the below error as Elacticmq is adding these two properties - **JMSXGroupID**, **JMS_SQS_DeduplicationId** in the message even for STANDARD queue.

The problem is that these key's shouldn't be existing as my queue is standard (not FIFO). But instead, there keys are set and their values are **empty string**. Hence I am getting this exception while listening to the messages.


 [2019-05-15 04:26:44.881] [DefaultMessageListenerContainer-2] WARN  o.s.j.l.DefaultMessageListenerContainer.invokeErrorHandler(929) [demand,,] [] [] - Execution of JMS message listener failed, and no ErrorHandler has been set.
 java.lang.IllegalArgumentException: Property value can not be null or empty.
 	at com.amazon.sqs.javamessaging.message.SQSMessage.setObjectProperty(SQSMessage.java:893)
 	at brave.jms.PropertyFilter.doFilterProperties(PropertyFilter.java:60)
 	at brave.jms.PropertyFilter$1.filterProperties(PropertyFilter.java:22)
 	at brave.jms.JmsTracing.extractAndClearMessage(JmsTracing.java:176)
 	at brave.jms.JmsTracing.nextSpan(JmsTracing.java:162)
 	at org.springframework.jms.config.TracingMessagingMessageListenerAdapter.onMessage(TracingJmsListenerEndpointRegistry.java:284)
 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doInvokeListener(AbstractMessageListenerContainer.java:736)
 	at org.springframework.jms.listener.AbstractMessageListenerContainer.invokeListener(AbstractMessageListenerContainer.java:696)
 	at org.springframework.jms.listener.AbstractMessageListenerContainer.doExecuteListener(AbstractMessageListenerContainer.java:674)
 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.doReceiveAndExecute(AbstractPollingMessageListenerContainer.java:318)
 	at org.springframework.jms.listener.AbstractPollingMessageListenerContainer.receiveAndExecute(AbstractPollingMessageListenerContainer.java:257)
 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.invokeListener(DefaultMessageListenerContainer.java:1189)
 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.executeOngoingLoop(DefaultMessageListenerContainer.java:1179)
 	at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1076)
 	at java.lang.Thread.run(Thread.java:748)

##########################
**To debug check this out ------**
##########################

_SQSMessage.java has a method to setObjectProperty. It expects the name and value to be not null and not empty._

```
@Override
    public void setObjectProperty(String name, Object value) throws JMSException {
        if (name == null || name.isEmpty()) {
            throw new IllegalArgumentException("Property name can not be null or empty.");
        }
        if (value == null || "".equals(value)) {
            throw new IllegalArgumentException("Property value can not be null or empty.");
        }
        if(!isValidPropertyValueType(value)) {
            throw new MessageFormatException("Value of property with name " + name + " has incorrect type " + value.getClass().getName() + ".");
        }
        checkPropertyWritePermissions();
        properties.put(name, new JMSMessagePropertyValue(value));
}
```

PropertyFilter.java class (of sleuth instrumentation) has this code where it clears the JMS message properties and adds them again. (JMS spec doesn't allow to add properties before clearing them!)

```
static void doFilterProperties(Message message, Set<String> namesToClear, ArrayList<Object> retainedProperties) throws JMSException {

  Enumeration<?> names = message.getPropertyNames();
  while (names.hasMoreElements()) {
    String name = (String) names.nextElement();
    Object value = message.getObjectProperty(name);
    if (!namesToClear.contains(name) && value != null) {
      retainedProperties.add(name);
      retainedProperties.add(value);
    }
  }
  message.clearProperties();
  for (int i = 0, length = retainedProperties.size(); i < length; i += 2) {
    message.setObjectProperty(
        retainedProperties.get(i).toString(),
        retainedProperties.get(i + 1)
    );
  }
}
```

**As you can see, retainedProperties adds the name value pair even if our value is empty string. It just has a non-null check. When  message.setObjectProperty(...) is executed, it will call SQSMessage.java's method and fail because of empty value of JMSXGroupID and JMS_SQS_DeduplicationId properties.**

_We should either have SQS not add these empty properties, or update the instrumentation jar to have isEmpty() check as well. The former solution should be more preferable as sleuth instrumentation class is generic and some client's might want to add empty headers._


<img width="968" alt="Screenshot 2019-05-16 at 5 40 47 AM" src="https://user-images.githubusercontent.com/50291163/57817507-4e601000-779d-11e9-9296-d884220492fb.png">

I have forked the Dockerfile from another repository and customize the conf file with the changes in my current forked version: https://github.com/mengjiann/docker-SQS-local.

I have deployed the docker image to my local kubernetes cluster with the following deployment yaml file. 

```
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mock-sqs
  labels:
    app: mock-sqs
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mock-sqs
  template:
    metadata:
      labels:
        app: mock-sqs
    spec:
      containers:
      - name: mock-sqs
        image: aws-sqs-mock:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 9324
          name: sqs-port
        resources:
          requests:
            cpu: 0.25
          limits:
            cpu: 1
      hostNetwork: true
---
apiVersion: v1
kind: Service
metadata:
  name: mock-sqs
  labels:
    app: mock-sqs
spec:
  type: NodePort
  ports:
  - port: 9324
    protocol: TCP
    nodePort: 30007
  selector:
    app: mock-sqs

```

But, when Im accessing the mock SQS using kubernetes service hostname: http://mock-sqs:9324 using AWS Java Sdk, it throws me the following error:

```
org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'simpleMessageListenerContainer' defined in class path resource [com/sph/common/service/credit/app/config/AwsSqsConfig.class]: Invocation of init method failed; nested exception is com.amazonaws.SdkClientException: Unable to execute HTTP request: mock-sqs
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1762) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:849) ~[spring-beans-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:877) ~[spring-context-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549) ~[spring-context-5.1.5.RELEASE.jar!/:5.1.5.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) [spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316) [spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) [spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) [spring-boot-2.1.4.RELEASE.jar!/:2.1.4.RELEASE]
	at com.sph.common.service.credit.CreditServiceApplication.main(CreditServiceApplication.java:10) [classes!/:0.0.1-SNAPSHOT]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_111-internal]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_111-internal]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_111-internal]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_111-internal]
	at org.springframework.boot.loader.MainMethodRunner.run(MainMethodRunner.java:48) [credit-service-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:87) [credit-service-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]
	at org.springframework.boot.loader.Launcher.launch(Launcher.java:50) [credit-service-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]
	at org.springframework.boot.loader.JarLauncher.main(JarLauncher.java:51) [credit-service-0.0.1-SNAPSHOT.jar:0.0.1-SNAPSHOT]
Caused by: com.amazonaws.SdkClientException: Unable to execute HTTP request: mock-sqs
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.handleRetryableException(AmazonHttpClient.java:1175) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeHelper(AmazonHttpClient.java:1121) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.doExecute(AmazonHttpClient.java:770) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.executeWithTimer(AmazonHttpClient.java:744) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.execute(AmazonHttpClient.java:726) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutor.access$500(AmazonHttpClient.java:686) ~[aws-java-sdk-core-1.11.553.jar!/:na]
	at com.amazonaws.http.AmazonHttpClient$RequestExecutionBuilderImpl.execute(AmazonHttpClient.java:668) ~[aws-java-sdk-core-1.11.553.jar!/:na]
```

But, when I access directly using the K8s service cluster ip: http://10.101.230.241:9324, the mock SQS is working fine. 

Anyone has any ideas?

In SQS, com.amazonaws.services.sqs.model.OverLimitException is thrown when the maximum number of inflight messages is reached during 'ReceiveMessage'. By default this is ~120000 inflight messages. You can increase this by submitting a request to Amazon.

It seems that ElasticMQ does not have this limit.

Sometimes it is required to test what will happen when that limit is reached, and ElasticMq does not have this feature.

Proposal: Expose a property that will manage the number of inflight messages. The value of this property will be from 1 to Integer.MAX_VALUE. Default will be 120000!
