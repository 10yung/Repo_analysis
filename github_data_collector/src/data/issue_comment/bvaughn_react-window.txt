It would be good if it was possible for list to be stacked from bottom instead from the top for usages like chat or stack like HS's old RPN calculators.

I have a workaround for FixedSizeList but if there is a need for such usage it would still be nice to have it (especially for VariableSizeList):
```
    <FixedSizeList
      height={Math.min(containerHeight, itemCount * itemSize)}
      itemCount={itemCount}
      itemSize={itemSize}
      width={winWidth}>
      {renderRow}
    </FixedSizeList>
```
When using `scrollTo` instead of `scrollToItem`  (e.g. when scrolling to last item), the list disappears and only a couple of items stay visible.

To reproduce the issue please click on **Scroll to last Item** button twice in the following example.

[Example](https://codesandbox.io/s/ancient-thunder-kdmsi?fontsize=14&hidenavigation=1&theme=dark)
Resolves Issue #333.

* Adds check for negative return in `getEstimatedTotalSize` in DynamicSizeList.js.
I'm using branch `issues/6`, and I am experiencing a problem similar to #289 but not quite the same. Here's my best attempt at explaining the issue (codesandbox: https://codesandbox.io/s/bugreact-window-dynamic-size-list-djegq)

Let's say you have `n` items in your `itemData` and you scroll past `l` items. If `itemData` is reduced to `m` items where `m < l` then the height/width of the list will be incorrect.

I am not very well-versed with the code in `react-window`, but from what I can tell, the issue stems from this calculation in `DynamicSizeList.js`:

```
const getEstimatedTotalSize = (
  { itemCount }: Props<any>,
  {
    itemSizeMap,
    estimatedItemSize,
    lastMeasuredIndex,
    totalMeasuredSize,
  }: InstanceProps
) =>
  totalMeasuredSize + (itemCount - lastMeasuredIndex - 1) * estimatedItemSize;
```

When `getEstimatedTotalSize` is called after scrolling and reducing `itemCount`, `(itemCount - lastMeasuredIndex - 1) * estimatedItemSize;` will likely be negative.

When `getEstimatedTotalSize` is negative, the height/width set on the innerElement will remain as the last `estimatedTotalSize` value because you can't set a negative height. From createListComponent.js: `height: isHorizontal ? '100%' : estimatedTotalSize`. 

To fix this, I would propose just returning `itemCount * estimatedItemSize` when `totalMeasuredSize + (itemCount - lastMeasuredIndex - 1) * estimatedItemSize` is negative.

I will make a PR with this code change.

Hello there!

I've implemented sticky columns and rows in an alternative way by filtering these columns/rows out and rendering them in the outer element instead with `position: sticky;`.
At this point it's working just fine but they are not windowed, all of the sticky cells are rendered. To achieve windowing I need to pass `columnStartIndex`, `columnStopIndex`, `rowStartIndex`, `rowStopIndex` to outer element which I did with my pull request. It doesn't produce any additional renders because at the point where these values may change, other props on outer element would change also.

I attach a rough demo of my implementation of the grid as well as a code playground for this POC for reference. The indexes would be used in `StickyCells` component and they would be implemented as just a simple `if` conditional for the cells.

Let me know what you think, thanks!

demo: https://1r94e.csb.app/
sandbox: https://codesandbox.io/embed/jovial-monad-1r94e
This PR resolves the issue #306

- Made changes in FixedSizeList.js.
- Added test case to test the scenario.
- Updated snapshot.
Resolves #302

- [ ] Version 2 API
  - [x] `SimpleList` (previously [`FixedSizeList`](https://react-window.now.sh/#/examples/list/fixed-size))
  - [ ] `List` (previously [`DynamicSizeList`](https://react-window-next.now.sh/#/examples/list/dynamic-size))
  - [ ] `Grid` (previously [`VariableSizeGrid`](https://react-window.now.sh/#/examples/grid/variable-size))
- [ ] Update documentation
Wrong behaviour on scroll item to center

Example:
https://codesandbox.io/embed/bvaughnreact-window-scrolling-to-a-list-item-q4jli

Click on "Scroll to row 2" or "Scroll to row 3" - items not in center.
Click on "Scroll to row 5" - item in center
This is an umbrella issue to share my plans for the upcoming version 2.0 release of `react-window`.

**Feedback is appreciated** and will be taken into consideration. I ask that you be understanding if I'm not able to accommodate all requests. I'll try to do my best to weigh feature requests against bundle size, runtime performance, and maintenance concerns.

I expect that upgrading from version 1 to 2 **may require substantial code changes**, many of which will not be possible to automate with code mods. Because of this, particularly for application code, I would advise against upgrading existing code unless you have a strong reason (e.g. you need support for dynamic size content).

I am also going to go ahead and pin the current docs to the domain [react-window-v1.now.sh](https://react-window-v1.now.sh/) so they will not be lost when I update for version 2.

---
##### Table of contents:
* Support fewer components
* Use render props API
* No more horizontal lists support
* Only grids support RTL
* Changes to `onScroll` callback timing
* Other changes/deprecations
---

### Fewer components

One way to help manage complexity is to **reduce the number of components the library supports**. I am currently planning on supporting only the following component types in version 2:

* `SimpleList` (previously [`FixedSizeList`](https://react-window.now.sh/#/examples/list/fixed-size))
  * This highly optimized list component should be used when row heights are fixed (and known ahead of time).
* `List` (previously [`DynamicSizeList`](https://react-window-next.now.sh/#/examples/list/dynamic-size))
  * This list should be used for dynamically sized content (e.g. chat, newsfeed). It requires the [`ResizeObserver`](https://wicg.github.io/ResizeObserver) API (or polyfill).
* `Grid` (previously [`VariableSizeGrid`](https://react-window.now.sh/#/examples/grid/variable-size))
  * This component should be used for tabular data (e.g. spreadsheets) that should be virtualized along both vertical and horizontal axis. It supports variable size rows and columns, but does not support automatically measuring and updating their sizes.


---
### Render props

One of the major changes from `react-virtualized` to `react-window` was the decision to treat `children` as React elements (e.g. `React.createElement(children, props))`) rather than as [render props](https://reactjs.org/docs/render-props.html) (e.g. `children(props)`).

There were a couple of motivations for doing this:
* React provides built-in solutions for memoization (e.g. [`React.memo`](https://reactjs.org/docs/react-api.html#reactmemo), [`useMemo`](https://reactjs.org/docs/hooks-reference.html#usememo), [`shouldComponentUpdate`](https://reactjs.org/docs/hooks-faq.html#how-do-i-implement-shouldcomponentupdate)) so I didn't need to implement my own caching abstraction for item renderers.
* APIs like hooks and suspense "just work" inside of item renderers.
* Keys can be managed by `react-window` without requiring the render prop to pass them along (and without requiring `cloneElement` calls).

Unfortunately there were also some downsides:
* Inline item renderers incur a high cost. Because their "type" (the function definition) gets recreated each time the parent component renders, React deeply unmounts and remounts their rendered tree. This means that docs need to teach people not to use them even though they're often more convenient.
* Because inline functions couldn't be used to close over local scope, it was more complicated for item renderers to share state with parents, requiring [APIs like `itemData` and a custom `areEqual` comparison export](https://react-window.now.sh/#/examples/list/memoized-list-items).

After taking the above pros and cons into consideration, **I've decided to convert to a render props approach** for `react-window` as well. This means that complicated examples [like this](https://react-window.now.sh/#/examples/list/memoized-list-items) can be re-written more easily:

```js
const Example = ({ height, items, toggleItemActive, width }) => (
  <List
    height={height}
    itemCount={items.length}
    itemRenderer={({ index, key, style }) => {
      const item = items[index];
      return (
        <div key={key} onClick={() => toggleItemActive(index)} style={style}>
          {item.label} is {item.isActive ? "active" : "inactive"}
        </div>
      );
    }}
    itemSize={35}
    width={width}
  />
);
```

---
### No more horizontal list support

Previously, list components supported both horizontal and vertical layout modes. In order to simplify implementation and maintenance, and because the overwhelmingly common use case is vertical lists, I will be removing support for `layout="horizontal"`.

---
### RTL support

Grid components will continue to support `direction="RTL"`, but lists will not (since they will only support a vertical layout). This tradeoff is being made to enable lists to be smaller and easier to maintain.

---
### `onItemsRendered` and `onScroll` callback changes
List and grid components currently support `onItemsRendered` and `onScroll` callback props. These callbacks are called during the commit phase (after the list or grid has completed rendering). This can be useful in that it is always safe to perform a side effect (like analytics logging) in response to these callbacks, but it has a downside as well: any scroll synchronized updates must be done in a second ("cascading") render.

Version 2 will make a change to the `onScroll` callback to address this. **The `onScroll` callback will be called during the event's dispatch cycle** so that any update will be batched (by React) with the list or grid's own update.

**The `onItemsRendered` callback will be replaced with a `onItemsDisplayed` prop**, although it will continue to be called during the commit cycle. This change is being made to enable the list component to more aggressively optimize render performance by pre-rendering at idle priority and make use of experimental APIs like [display locking](https://www.chromestatus.com/feature/4613920211861504).

---
### Other props changes/deprecations

There are several pending deprecations (with DEV warnings) which will be removed:
* `innerTagName` and `outerTagName` for all list and grid components. (Use `innerElementType` and `outerElementType` instead.)
* `overscanCount`, `overscanColumnsCount`, and `overscanRowsCount` for grid component. (Use `overscanColumnCount` and `overscanRowCount` instead.)
* `overscanCount` will be removed for list components, in favor of a dynamic overscanning approach.
* "horizontal" and "vertical" values for `direction`. (These were moved to `layout`, but they will be removed entirely in version 2.)
* The `itemData` prop (and the corresponding `data` prop passed to item renderers) will be removed because the change to a render prop API no longer make this necessary.
* The `useIsScrolling` prop (and the corresponding `isScrolling` prop passed to item renderers) will be removed because the changes to pre-rendering and display locking would make this more expensive to implement.
* Scroll align parameters will change slightly. The previously named "auto" will now be named "minimal". The new default value will be "smart" (rather than "auto").

Note that some of the above deprecated props may not still be relevant given the other planned changes, but I'm listing them here anyway for completeness sake.
Hello.
I am using your great library to show my horizontal lists in RTL mode. it's about OK in android and chrome , just a little buggy. but it's totally weird in safari.
You can see the behavior below:


![ezgif-1-39c63d0edf24](https://user-images.githubusercontent.com/15613272/61700174-8497ae00-ad51-11e9-9e83-da88177bac08.gif)

`<InfiniteLoader
                    isItemLoaded={index => {
                        return this.isLoading || index < this.props.totalCount;
                    }}
                    itemCount={this.props.totalCount}
                    threshold={1}
                    loadMoreItems={(start, end) => console.log('$$$$$$$$$$$$$$$$$$$$$$$$', start , end)}>
                    {({ onItemsRendered, ref }) => (
                        <List
                            className="List"
                            direction="rtl"
                            height={itemHeight}
                            layout="horizontal"
                            itemCount={this.props.vendors ? this.props.vendors.length : 0}
                            itemSize={itemWidth}
                            onItemsRendered={onItemsRendered}
                            ref={ref}
                            width={window.innerWidth}>
                            {this.itemRenderer}
                        </List>
                    )}
                </InfiniteLoader>`



`itemRenderer = (props) => {
        return <HomeVendorItem  {...this.props.vendors[props.index]}
                                style={props.style}
                                isSuperMarket={this.props.isSuperMarket}
                                sendAmplitudeEvent={this.props.sendAmplitudeEvent}/>;
    };`