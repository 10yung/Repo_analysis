
#### Pull Request (PR) description
<!--
    Replace this comment block with a description of your PR.
    Also, make sure you have updated the CHANGELOG.md, see the
    task list below. An entry in the CHANGELOG.md is mandatory
    for all PRs.
-->

#### This Pull Request (PR) fixes the following issues
- Fixes #671

#### Task list
- [x] Added an entry to the change log under the Unreleased section of the
      file CHANGELOG.md. Entry should say what was changed and how that
      affects users (if applicable), and reference the issue being resolved
      (if applicable).
- [ ] Resource documentation added/updated in README.md.
- [ ] Resource parameter descriptions added/updated in README.md, schema.mof
      and comment-based help.
- [ ] Comment-based help added/updated.
- [ ] Localization strings added/updated in all localization files as appropriate.
- [ ] Examples appropriately added/updated.
- [x] Unit tests added/updated. See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [x] Integration tests added/updated (where possible). See [DSC Community Testing Guidelines](https://dsccommunity.org/guidelines/testing-guidelines).
- [x] New/changed code adheres to [DSC Community Style Guidelines](https://dsccommunity.org/styleguidelines).

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/dsccommunity/xpsdesiredstateconfiguration/672)
<!-- Reviewable:end -->

### Description
Attempts to create a registry value with ":" (colons) in the path using the xRegistry resource will fail with an exception.

#### The DSC configuration that is used to reproduce the issue
```PowerShell
Configuration test
{
    Import-DscResource -ModuleName xPSDesiredStateConfiguration

    xRegistry test
    {
        Ensure = 'Present'
        Key = 'HKEY_LOCAL_MACHINE\Software\dsc\mw1.jothgxmws.com:443'
        ValueName = 'TestValue'
        ValueData = '1'
        ValueType = 'DWORD'
        Force = $true
    }
}
```

#### Verbose logs showing the problem
```
詳細: パラメーター ''methodName' = SendConfigurationApply,'className' = MSFT_DSCLocalConfigurationManager,'namespaceName' = root/Microsoft/Windows/DesiredSt
ateConfiguration' を使用して操作 'CimMethod の呼び出し' を実行します。
詳細: コンピューター VM1321A1J、ユーザー SID S-1-5-21-3239056254-3345395085-1586727800-1116 から LCM メソッドが呼び出されました。
詳細: [VM1321A1J]: LCM:  [ 開始     設定       ]
詳細: [VM1321A1J]: LCM:  [ 開始     リソース     ]  [[xRegistry]test]
詳細: [VM1321A1J]: LCM:  [ 開始     テスト      ]  [[xRegistry]test]
詳細: [VM1321A1J]:                            [[xRegistry]test] Test-TargetResource is starting for Registry resource with Key HKEY_LOCAL_MACHINE\Sof
tware\dsc\mw1.jothgxmws.com:443
詳細: [VM1321A1J]:                            [[xRegistry]test] Get-TargetResource is starting for Registry resource with Key HKEY_LOCAL_MACHINE\Soft
ware\dsc\mw1.jothgxmws.com:443
詳細: [VM1321A1J]: LCM:  [ 終了     テスト      ]  [[xRegistry]test]  (0.1540 秒)。
PowerShell DSC リソース DSC_xRegistryResource は Test-TargetResource 機能を実行できませんでした。エラー メッセージ: The registry drive HKEY_LOCAL_MACHINE\Software\dsc\mw1.jot
hgxmws.com:443 is invalid. Please update the Key parameter to include a valid registry drive.
パラメーター名:Key 
    + CategoryInfo          : InvalidOperation: (:) []、CimException
    + FullyQualifiedErrorId : ProviderOperationExecutionFailure
    + PSComputerName        : localhost
 
詳細: [VM1321A1J]: LCM:  [ 終了     設定       ]
SendConfigurationApply 関数が失敗しました。
    + CategoryInfo          : NotSpecified: (root/Microsoft/...gurationManager:String) [], CimException
    + FullyQualifiedErrorId : MI RESULT 1
    + PSComputerName        : localhost
 
詳細: 操作 'CimMethod の呼び出し' が完了しました。
詳細: 構成ジョブが完了するまでにかかった時間は 0.8 秒です
```

#### Suggested solution to the issue
The `Get-PathRoot` function has a problem. It does not returns proper root drive when paths containing colons.
https://github.com/dsccommunity/xPSDesiredStateConfiguration/blob/efbee5bd3372a7a67e8f6627af0ae937b96da010/source/DSCResources/DSC_xRegistryResource/DSC_xRegistryResource.psm1#L559-L581



The example files include the version number of the xPSDesiredStateConfiguration module in the #Requires headers. It should not include this.

It should read:
```powershell
#Requires -module 'xPSDesiredStateConfiguration'
```
The cmdlet `Test-IsNanoServer` is used by many of the resources. This cmdlet uses `Get-ComputerInfo` to determine if the machine is Nano server:
```powershell
function Test-IsNanoServer
{
    [OutputType([System.Boolean])]
    [CmdletBinding()]
    param ()

    $isNanoServer = $false

    if (Test-CommandExists -Name 'Get-ComputerInfo')
    {
        $computerInfo = Get-ComputerInfo

        $computerIsServer = 'Server' -ieq $computerInfo.OsProductType

        if ($computerIsServer)
        {
            $isNanoServer = 'NanoServer' -ieq $computerInfo.OsServerLevel
        }
    }

    return $isNanoServer
}
```

However, `Get-ComputerInfo` is very slow, taking over 2 seconds on average to execute.

This causes the resources to run slow and increases overall test time significantly.

We should find a better way to detect if a machine is Nano Server.

#### Details of the scenario you tried and the problem that is occurring
I recently mass updated my PS modules and cleaned up old ones, so I'm not sure which version of xPSDesiredStateConfiguration I was using previously. I have always used the Publish-ModuleToPullServer function to conveniently package up custom modules for deployment. However, I just noticed that the PullServerWebConfig parameter is now required. In my case, I simply want to get a module that I have on my local system and package it up into a zip, so I use -OutputFolderPath to tell it where to drop it. Now, when I try the same command I've always used, I'm prompted for PullServerWebConfig as well. After looking through the code, it appears this param isn't even used if OutputFolderPath is passed in, so I provided a dummy value that satisfied the parameter validation (leaf) and it worked as expected. My question is whether it was intentional to make this parameter mandatory when OutputFolderPath is specified. The examples still suggest that we should be able to specify OutputFolderPath only.

#### Version and build of PowerShell the target node is running
PSVersion                      5.1.18362.145
BuildVersion                   10.0.18362.145

#### Version of the DSC module that was used ('dev' if using current dev branch)
8.10.0.0

#### Details of the scenario you tried and the problem that is occurring

I am using xRegistry because unlike the native Registry resource it can handle the slash character in key names which is useful for disabling cipher suites.
For example:
HKLM:\SYSTEM\CurrentControlSet\Control\SecurityProviders\SCHANNEL\Ciphers\RC4 128 **/** 128

However, unlike the native **Registry** resource, when the **xRegistry** resource finds an existing registry value with different data it doesn't update the data if you don't use the `Force = $true` property.

If we want DSC to only detect values without modifying the data we can use the Monitor mode.
On the other hand, the **ApplyAndAutoCorrect** mode is supposed to **enforce** every non-compliant value. **Enforcing** means we should not have to use some kind of Force parameter ...
**ApplyAndAutoCorrect** is already supposed to be like a **Force** mode.

#### Verbose logs showing the problem

`PowerShell DSC resource MSFT_xRegistryResource  failed to execute Set-TargetResource functionality with error message: System.InvalidOperationException:
The registry key at path 
HKLM:\SYSTEM\CurrentControlSet\Services\W32Time\Parameters already has a value with the name NtpServer.
To overwrite this registry key value please specifiy the Force parameter as $true. `

#### Suggested solution to the issue
Come back to the native **Registry** resource behavior and make the **xRegistry** resource able to correct existing registry values without having to specify the `Force = $true` property.
Possible implementations:
- Make the property **True** by default...
- Remove the property and enforce the value anyway...
- Other ideas...

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell
# insert configuration here
```

#### The operating system the target node is running
<!--
    Please provide as much as possible about the target node, for example
    edition, version, build and language.
    On OS with WMF 5.1 the following command can help get this information.

    Get-ComputerInfo -Property @(
        'OsName',
        'OsOperatingSystemSKU',
        'OSArchitecture',
        'WindowsVersion',
        'WindowsBuildLabEx',
        'OsLanguage',
        'OsMuiLanguages')
-->

OsName               : Microsoft Windows Server 2019 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsVersion       : 1809
WindowsBuildLabEx    : 17763.1.amd64fre.rs5_release.180914-1434
OsLanguage           : en-US
OsMuiLanguages       : {en-US}

#### Version and build of PowerShell the target node is running
<!--
    To help with this information, please run this command:
    $PSVersionTable
-->
                                                                                                                                                            
PSVersion                      5.1.17763.316                                                                                                                                                             
PSEdition                      Desktop                                                                                                                                                                   
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}                                                                                                                                                   
BuildVersion                   10.0.17763.316                                                                                                                                                            
CLRVersion                     4.0.30319.42000                                                                                                                                                           
WSManStackVersion              3.0                                                                                                                                                                       
PSRemotingProtocolVersion      2.3                                                                                                                                                                       
SerializationVersion           1.1.0.1   
#### Version of the DSC module that was used ('dev' if using current dev branch)
xPSDesiredStateConfiguration version 8.10.0.0
The Assert-NoStartupTypeStateConflict in the Service Resource checks, that you cannot use, e.g. State=Stopped with StartupType=Automatic. It is considered a wrong use case.

But when I don't define Automatic but State=Stopped, I can create a new Service, which is Stopped, but still on automatic. (Which is actually what I want.) So I think all combinations should be ok.

What is probably a better idea to check: If you use Absent=true, it makes no sense to define any State or StartupType.
#### Details of the scenario you tried and the problem that is occurring

In its current state, `xUser` will create a user account and apply the password if specified. On subsequent runs, this password is re-applied. This behavior is a challenge when applying `xUser` to manage users via code in a production environment.

#### Suggested solution to the issue

As was done with the `ADUser` resource in the `ActiveDirectoryDsc` module in PR PowerShell/ActiveDirectoryDsc#227, a `PasswordNeverResets` property needs adding to `xUser`. This will allow an account to be initially created with a password but then any password drift is ignored during future DSC application if `PasswordNeverResets = $true`. The default behavior will be `$false`, which will retain existing behavior of the resource.


The `Test-TargetResource` has different defaults to `Set-TargetResource` in xDSCWebService.

Specifically, the parameters:
- `RegistrationKeyPath` has no default in `Test-TargetResource` but is `"$env:PROGRAMFILES\WindowsPowerShell\DscService"` in `Set-TargetResource`
- `AcceptSelfSignedCertificates` has no default in `Test-TargetResource` but is `$true` in `Set-TargetResource`

Correcting this causes unit tests to fail. This should be investigated further and fixed.
<!--
    Your feedback and support is greatly appreciated, thanks for contributing!

    ISSUE TITLE:
    Please prefix the issue title with the resource name, e.g.
    'ResourceName: Short description of my issue'

    ISSUE DESCRIPTION (this template):
    Please provide information regarding your issue under each header below.
    Write N/A under any headers that do not apply to your issue, or if the
    information is not available.

    NOTE! Sensitive information should be obfuscated.

    PLEASE KEEP THE HEADERS.

    You may remove this comment block, and the other comment blocks,
    but please keep the headers.
-->
#### Details of the scenario you tried and the problem that is occurring
Using Azure Automation as the pullserver with xPSDesiredStateConfiguration imported.

Setting a PSSessionConfiguration using the xPSEndpoint DSC resource as per below configuration example on an Azure IaaS VM running Windows Server 2016 Core returns an exception on the inital run stating that is cannot find the `Set-DSCMachineRebootRequired` cmdlet as part of the initial `Set-TargetResource` functionality.

This eventually corrects itself after the next convergence of DSC but is not ideal in a scenario if using terraform etc to configure DSC on an IaaS VM which crashes out the Terraform run as a result of the DSC extension throwing a transition failure.

#### Verbose logs showing the problem
```
Job {EC17F768-D55A-11E9-BB34-000D3A4A58AD} :
MIResult: 1
Error Message: The SendConfigurationApply function did not succeed.
Message ID: MI RESULT 1
Error Category: 0
Error Code: 1
Error Type: MI
Job {EC17F768-D55A-11E9-BB34-000D3A4A58AD} :
MIResult: 1
Error Message: The PowerShell DSC resource '[xPSEndpoint]RemotePSEndpointConfig' with SourceInfo '::359::9::xPSEndpoint' threw one or more non-terminating errors while running the Set-TargetResource functionality. These errors are logged to the ETW channel called Microsoft-Windows-DSC/Operational. Refer to this channel for more details.
Message ID: NonTerminatingErrorFromProvider
Error Category: 7
Error Code: 1
Error Type: MI
Job {EC17F768-D55A-11E9-BB34-000D3A4A58AD} :
MIResult: 1
Error Message: The term 'Set-DSCMachineRebootRequired' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
Message ID: CommandNotFoundException
Error Category: 13
Error Code: 13
Error Type: MI
Job {26D6569C-D558-11E9-BB34-000D3A4A58AD} :
MIResult: 1
Error Message: The SendConfigurationApply function did not succeed.
Message ID: MI RESULT 1
Error Category: 0
Error Code: 1
Error Type: MI
Job {26D6569C-D558-11E9-BB34-000D3A4A58AD} :
MIResult: 1
Error Message: PowerShell DSC resource MSFT_xPSSessionConfiguration  failed to execute Set-TargetResource functionality with error message: System.Management.Automation.PSInvalidOperationException: Cannot write the shell configuration data into the temporary file C:\windows\system32\config\systemprofile\AppData\Local\Temp\ytro1ghx.5ogpsshell.xml. Reason for failure: Could not find a part of the path 'C:\windows\system32\config\systemprofile\AppData\Local\Temp\ytro1ghx.5ogpsshell.xml'..
   at Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand.ConstructTemporaryFile(String pluginContent)
   at Microsoft.PowerShell.Commands.RegisterPSSessionConfigurationCommand.ProcessRecord()
   at System.Management.Automation.CommandProcessor.ProcessRecord()
Message ID: ProviderOperationExecutionFailure
Error Category: 7
Error Code: 1
Error Type: MI
```

#### The DSC configuration that is used to reproduce the issue (as detailed as possible)
```powershell

Configuration ConfigureAndDeployWebServers
{
param (
          [Parameter(Mandatory)]
          [string]$SomeSecret
)
Import-DSCResource -ModuleName xPSDesiredStateConfiguration

$SomeRunAsCredential = New-Object System.Management.Automation.PSCredential("someuser", (ConvertTo-SecureString $SomeSecret -AsPlainText -Force))

Node somenodename
{
....
xPSEndpoint RemotePSEndpointConfig
        {
            Ensure          = 'Present'
            Name            = 'RemotePS'
            RunAsCredential = $SomeRunAsCredential
        }
    }
}

```

#### The operating system the target node is running
```
OsName               : Microsoft Windows Server 2016 Datacenter
OsOperatingSystemSKU : DatacenterServerEdition
OsArchitecture       : 64-bit
WindowsBuildLabEx    : 14393.3143.amd64fre.rs1_release.190725-1725
OsLanguage           : en-US
OsMuiLanguages       : {en-US}
```

#### Version and build of PowerShell the target node is running
```
Name                           Value
----                           -----
PSVersion                      5.1.14393.3053
PSEdition                      Desktop
PSCompatibleVersions           {1.0, 2.0, 3.0, 4.0...}
BuildVersion                   10.0.14393.3053
CLRVersion                     4.0.30319.42000
WSManStackVersion              3.0
PSRemotingProtocolVersion      2.3
SerializationVersion           1.1.0.1
```
#### Version of the DSC module that was used ('dev' if using current dev branch)

`8.6.0.0` imported from Powershellgallery into Azure Automation Modules.
