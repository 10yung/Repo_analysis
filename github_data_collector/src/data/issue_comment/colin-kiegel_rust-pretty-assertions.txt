This is a quick proof-of-concept to allow customized labeling for the comparison output (currently only for `assert_eq!`, but easily extended).

I'm happy to flesh it out if there is interest.

Fixes: #37
Alternative to: #33 ?
"left" and "right" are semantically neutral labels. In many cases, it would be easier to understand what is actually failing if the labels could be changed to a something with more meaning (eg, "expect" and "actual"). An example proposed use and output ...

`assert_eq!( expect: [1, 2, 4], actual: [1, 2, 8]);` 

```
thread 'main' panicked at 'assertion failed: `(expect == actual)`

Diff < expect / actual > :
 [
     1,
     2,
<    4,
>    8,
 ]
' ...
```

* ref: <https://users.rust-lang.org/t/assert-eq-expected-and-actual/20304>
I cannot compare larger XML files with assert_eq!() because it hangs and runs into a memory leak. Just a test case to reproduce the problem, I have not looked into the cause.
It's not a purely cosmetic idea. + and - in the first column of text makes it very easy to get diff syntax highlighting when you copy and paste test output into GitHub comments. I find myself replacing the angle braces manually to get this effect.

```
Diff < left / right > :
 neutral
<[1, 2, 3, 4]
>[1–4]
```

```diff
Diff - left / right + :
 neutral
-[1, 2, 3, 4]
+[1–4]
```

Hi and thanks for the helpful library!
I was annoyed a few times now by the panic message only showing `(left == right)` instead of my actual arguments to the `assert_eq` call and had to add a custom message describing the arguments.
This change also helps in remembering which side was the expected or the actual value (which happens to me...)

Slightly ugly things in this MR:

------
The following message is duplicated 4 times:
```
assertion failed: `({} == {})`
```
------
Some existing tests now also verify this new feature, I think it would be slightly prettier to make these tests also pass `x` and `y` as arguments (so they don't check two things at once) and make a new test verify this new feature
ANSI colours aren't available ...
a) when the compiler output is piped, e.g. into an editor or IDE
b) in some terminals without the support

Much like the Rust compiler's warnings are still useful when colour is disabled, it would be nice if this crate's output was just as useful without colour output.

# Option 1

```
  Some(
      Foo {
-         lorem: "Hello World!",
+         lorem: "Hello Wrold!",
          ipsum: 42,
          dolor: Ok(
-             "hey"
+             "hey ho!"
          )
      }
  )
```

* PRO: unambiguous
- CON: minor differences hard to spot (especially in long lines)

# Option 2

Do it like Pythons unit test framework

```
  Some(
      Foo {
-         lorem: "Hello World!",
?                         -
+         lorem: "Hello Wrold!",
?                        +
          ipsum: 42,
          dolor: Ok(
-             "hey"
+             "hey ho!"
?                 ++++
          )
      }
  )
```

* PRO: unambiguous
* PRO: extra hint to spot minor differences
* CON: soft line-wraps will turn this into a mess for long lines

# Option 3

use some special chars

```
  Some(
      Foo {
-         lorem: "Hello W[-r-]old!",
+         lorem: "Hello Wo{+r+}ld!",
          ipsum: 42,
          dolor: Ok(
-             "hey"
+             "hey{+ ho!+}"
          )
      }
  )
```

* PRO: extra hint to spot minor differences - even for long lines
* CON: ambiguous, because you could think [--] and {++} are _part_ of the strings
* CON: hard to read, if lines contain a lot of special characters

# Open Questions

- can we detect ANSI-colour support automatically? (note: if yes, we have to be carfeul about unit tests in situations without ANSI-colour support. This should be an exception to still make the tests pass).
I'm trying to use pretty-assertions for [snapshot testing](https://blog.anp.lol/rust/2017/08/18/golden-master-regression-in-rust/). I compare the snapshotted multiline-string with the new value using the `PrettyString` trick from #24.

When the actual result got indented (compared to the snapshot), the diff output became very confused:
<img width="397" alt="snap" src="https://user-images.githubusercontent.com/247067/51093748-ba167a00-17b7-11e9-85a3-b96b74a0dfeb.png">

The reason is that two unrelated lines (`Foo`'s and `Bar`'s `lorem`s) got matched up in the first (line-based) comparison pass, which should instead realize there's a new line `Some(`, followed by a few modified lines, followed by a new line `)`.


    #[test]
    fn test_multiline_diff() {
        assert_eq!(PrettyString(r#"Foo {
        lorem: "Hello World!",
        ipsum: 42,
        Bar {
            lorem: "Hello World!",
        }
    }"#), PrettyString(r#"Some(
        Foo {
            lorem: "Hello World!",
            ipsum: 42,
            Bar {
                lorem: "Hello World!",
            }
        }
    )"#));
    }
While the current output is miles ahead of the default `assert_eq!` for finding the errors in multiline strings, it would be amazing if multiline strings could actually be displayed as multiline. Another extension to this would be to use raw string literals when the string contains embedded `"` characters

Current output (0.5.1):

![screen shot 2018-06-10 at 12 42 46 pm](https://user-images.githubusercontent.com/81079/41200812-0244e562-6cac-11e8-98a5-873b1a7051cf.png)

A quick sketch of what multiline and raw string literals could look like:

![screen shot 2018-06-10 at 12 51 25 pm](https://user-images.githubusercontent.com/81079/41200884-16fefae6-6cad-11e8-8a5b-f9699c517f0e.png)

I'm not sure if there are cases where this would be sub-optimal, hopefully it's possible to use a simple heuristic for detecting when to enable output like this that can be used in all cases.
I just copied format_changeset.rs verbatim into a repo (cf. <https://github.com/rust-lang-nursery/rust-clippy/pull/2384>) to get your fancy diff output without the assert/panic part :)

Maybe it'd make sense to create at difference-formatters crate that contains, well, some formatters for text diffs using difference?