Two tests are looking identical despite description. Probably withHost in second case should be replaced by something else.

```
    public function testUriDoesNotAppendColonToHostIfPortIsEmpty()
    {
        $uri = (new Uri())->withHost('google.com');
        $this->assertSame('//google.com', (string) $uri);
    }
    public function testAuthorityIsPrefixedByDoubleSlashIfPresent()
    {
        $uri = (new Uri())->withHost('example.com');
        $this->assertSame('//example.com', (string) $uri);
    }
```
 reference: https://www.php.net/manual/en/wrappers.php.php
php://input is not support fstat

Supports stat() | php://memory and php://temp only.
-- | --





- [ ] I was not able to find an [open](https://github.com/zendframework/zend-diactoros/issues?q=is%3Aopen) or [closed](https://github.com/zendframework/zend-diactoros/issues?q=is%3Aclosed) issue matching what I'm seeing.
 - [ ] This is not a question. (Questions should be asked on [chat](https://zendframework.slack.com/) ([Signup here](https://zendframework-slack.herokuapp.com/)) or our [forums](https://discourse.zendframework.com/c/questions/expressive).)

Provide a narrative description of what you are trying to accomplish.

### Code to reproduce the issue

<!-- Please provide the minimum code necessary to recreate the issue -->

```php
```

### Expected results

<!-- What do you think should have happened? -->

### Actual results

<!-- What did you actually observe? -->

Is there a particular reason that UploadedFile does not extend SplFileInfo.  The only conflicting interface, which isn't even really a conflict so much is `getSize()` -- would there be any interest in this?  I can do a PR if the interest is there.

I need this feature like yesterday and without it I'm either gonna need to look for an alternative or fork.
 - [x] I was not able to find an [open](https://github.com/zendframework/zend-diactoros/issues?q=is%3Aopen) or [closed](https://github.com/zendframework/zend-diactoros/issues?q=is%3Aclosed) issue matching what I'm seeing.
 - [x] This is not a question. (Questions should be asked on [chat](https://zendframework.slack.com/) ([Signup here](https://zendframework-slack.herokuapp.com/)) or our [forums](https://discourse.zendframework.com/c/questions/expressive).)

According to https://framework.zend.com/long-term-support 1.7 is the long term support version of zend-diactoros, however the Symfony security scanner shows that 1.7.2 is missing the fix for the URL Rewrite vulnerability [CVE-NONE-0001]: https://framework.zend.com/security/advisory/ZF2018-01

I've tried to be helpful and backport this in https://github.com/alexpott/zend-diactoros/tree/1.7.x-CVE-NONE-0001 but I can't create a PR because there is no 1.7 release branch.


### Code to reproduce the issue

<!-- Please provide the minimum code necessary to recreate the issue -->

```php
        $server = [
            'REQUEST_URI' => 'https://example.com/requested/path',
            'HTTP_X_ORIGINAL_URL' => '/hijack-attempt'
        ];
        $path = ServerRequestFactory::marshalRequestUri($server);
```

### Expected results

<!-- What do you think should have happened? -->
```php
        $path === '/requested/path';
```
### Actual results

<!-- What did you actually observe? -->
```php
        $path === '/hijack-attempt';
```

### Code to reproduce the issue

```php
function getSomeData(): Generator {
    yield 1 => 'One';
    yield 2 => 'Two';
    yield 3 => 'Three';
}

$data = getSomeData();
$json = new Zend\Diactoros\Response\JsonResponse($data);
```

### Expected results

Response should consume the generator and treat it as if a normal PHP array was passed in:

```php
$data = [
    1 => 'One',
    2 => 'Two',
    3 => 'Three'
];

$json = new Zend\Diactoros\Response\JsonResponse($data);
```

### Actual results

An error is thrown instead: "Trying to clone an uncloneable object of class Generator..."

**Why is the new feature needed? What purpose does it serve?**

After doing a bit of searching, I didn't find a class that would send a CSV response. There were the _Text_, _JSON_, _HTML_, _Redirect_, _XML_, and _Empty_ response classes, but nothing specific to CSV. So I created this PR to add a CSV response class, which can send both plain CSV text as well as a response that will be interpreted by the client as a downloadable file.

**How will users use the new feature?**

Users can use the CSV response class very similarly to how they use the existing response classes. The only difference is that if they supply a file name as the third parameter to the constructor, then a download response will be sent, not a textual response.

`\Zend\Diactoros\parseCookieHeader` does not properly parse array cookies in header:

`testCookie[foo]=fooValue; testCookie[bar]=barValue`

this should be ok by php doc [here](https://www.php.net/manual/en/function.setcookie.php) in Example # 3 but the parser does not match it

also in closed issue #272
The following commit causes breaking issues and probably should not have been implemented in a minor version.

https://github.com/zendframework/zend-diactoros/commit/ee4bcdc43b6d60cd2b1256809903b8620a7257c7#diff-5abca4d9d5693da46d10a54795b1192d

Specifically this change breaks laravel/passport ^3.0 which depends on ~1.0 of this library.

I've opened a ticket for them to patch branch 3.x, but that patch may introduce new problems.  That's why I'd suggest this update be reverted from 1.x of the zend framework.
The `parse_url` function is not multibyte safe, and was never designed to be, which seems to be why [this bug](https://bugs.php.net/bug.php?id=52923) from 2010 has still not been addressed. As mentioned in the comments on that bug, a nicer behaviour would be for `parse_url` to "treat all extended characters ... as opaque characters and copy them as-is without modification", but I don't see that happening any time soon.

There are a couple of options I can think of to try and support UTF8 URIs in this library;

* Use a wrapper for `parse_url` which URL encodes/decodes extended characters (e.g. in [this comment](http://php.net/manual/en/function.parse-url.php#114817) from the manual page)
* Manually parse the URL in PHP without `parse_url`

Or alternatively this library could simply reject URI's with extended characters which aren't properly encoded, as they are technically invalid according to RFC 3986.

Whichever way, it might be worth adding something to the Travis config to run the tests under different locale environments to show how this is reproduced in the unit tests (though this might be a pain, since the available values for the locale are platform dependent).

_Originally posted by @Pudge601 in https://github.com/zendframework/zend-diactoros/issues/155#issuecomment-455520479_
Hi guys, I'm working on an iOS project and I'm required to send documents, such as pdfs, to my laravel server. The issue is, every time I try to send a post request for a PDF, I get this error message: `Invalid size provided for UploadedFile; must be an int`. I'm at my wit's end trying to solve this issue. Any ideas?