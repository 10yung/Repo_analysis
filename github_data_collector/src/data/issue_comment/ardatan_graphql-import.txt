Hi,

i'm trying to integrate eslint-plugin-graphql to validate my queries against and SDL File.
Unfortunately the import fails since we have a custom schema definition.

```
schema {
  query: CustomerQuery
  mutation: CustomerMutation
}

type CustomerQuery {
  // All our queries
}

type CustomerMutation {
  // All our Mutations
}

type Mutation {
 // an independent type for Changes on certain objects
}
```

When importing the sdl i receive the following

```
SCHEMA GraphQLSchema {
  __validationErrors: undefined,
  extensions: undefined,
  astNode: undefined,
  extensionASTNodes: undefined,
  __allowedLegacyNames: [],
  _queryType: undefined,
  _mutationType: Mutation,
  _subscriptionType: undefined,
 ...
}
```

As you can see the schema definition is not being considered when building the GraphQLSchema. Our `Mutation` Type is being used as _mutationType instead of the actual`CustomerMutation`.

Am i doing something wrong or is this simply not supported?
Thank you!

Can you make import * work including root fields.
```graphql
#import Mutation.*, Query.*, * from "./schema/auth.graphql"
#import Mutation.*, Query.*, Subscription.*, * from "./schema/user.graphql"
```
right now I'd have to do the above.
In our schema, there is a piece like this...

```gql
type ImportedOrder {
  # import errors
  error: String
}
```

With `graphql-config` lib I am reading such a schema and it fails with 

```
(node:83264) UnhandledPromiseRejectionWarning: Error: Too few regex matches: null
    at parseImportLine (app\node_modules\graphql-import\src\index.ts:48:11)
    at Array.map (<anonymous>)
    at parseSDL (app\node_modules\graphql-import\src\index.ts:74:6)
    at collectDefinitions (app\node_modules\graphql-import\src\index.ts:237:22)
    at Object.importSchema (app\node_modules\graphql-import\src\index.ts:91:7)
    at Object.readSchema (app\node_modules\graphql-config\lib\utils.js:137:51)
    at GraphQLProjectConfig.getSchema (app\node_modules\graphql-config\lib\GraphQLProjectConfig.js:75:28)
```

The obvious culprit is here...

https://github.com/prisma/graphql-import/blob/b6890a0379b764c9adbf43e651988cbcf5105add/src/index.ts#L72

I am not entirely sure what's the purpose of that. Why not to actually use that regex instead of matching strings like that? ðŸ˜† 

https://github.com/prisma/graphql-import/blob/b6890a0379b764c9adbf43e651988cbcf5105add/src/index.ts#L46

## Workaround

Had to remove that comment from schema before running the code. Luckily coworker was ok with changing it on server-side, so it won't bugger us for now, but it would be nice to fix it nonetheless.
I would like to get the SchemaDocument ast from `importSchema` instead of the printed SDL.
Seems like a waste to have to parse it right after it was printed.
Hi everyone!

I'm @urigo the founder of [The Guild](http://the-guild.dev).

As recently [been announced](https://www.prisma.io/blog/the-guild-takes-over-oss-libraries-vvluy2i4uevs) on the Prisma blog, we are taking over the maintenance of this library going forward.
I've expressed it in the blog post in more details but I would like to start by thanking Prisma for conceiving, creating and maintaining this library so far and also for doing the selfless act of providing it with fresh life by handing over the maintenance to us. 

We already have a certain plan in mind going forward, some of it we've specified in the blog post, but we want you, the users and community of the library to be part of influencing the roadmap going forward.

One thing to note about [The Guild](http://the-guild.dev) - We place all the open source packages we maintain under individual person's Github profile instead of under a GitHub org or a company.
That is part of our philosophy - it puts more accountability on the maintainer and it also lowers the barrier of creating successful competing forks.
So we will transfer that repository from under Prisma as part of the transition.

I'm looking forward to start the discussion here below.
Please share how and why you use the library today, what are your biggest pain points today and ideas and features you would like to see in the future.

I will add points into the description here as we go.

Let's make this happen!
HI, when building federated schema using basic builiding blocks, following error is thrown:

```
error: Uncaught exception: (message=Directive key: Couldn't find type key in any of the schemas., stack=Error: Directive key: Couldn't find type key in any of the schemas.
    at collectDirective (/Users/user/code/node_modules/graphql-import/src/definition.ts:172:15)
    at Array.forEach (<anonymous>)
    at collectNewTypeDefinitions (/Users/user/code/node_modules/graphql-import/src/definition.ts:86:30)
    at Object.completeDefinitionPool (/Users/user/code/node_modules/graphql-import/src/definition.ts:49:39)
    at Object.importSchema (/Users/user/code/node_modules/graphql-import/src/index.ts:127:18)
```

The type that causes the issue looks like this:

```
type SomeType @key(fields: "id") {
  id: ID!
}
```

key directive is something that glues different pieces of extended types together when federating schema. See the documentation for further details: https://www.apollographql.com/docs/apollo-server/federation/core-concepts/

Could the validation be loosened on import-schema library so that `key` would not cause exception?
Our security audit failed on a vulnerability in dependency Lodash (4.17.4).

Upgrading to Lodash 4.17.11 or higher would fix this.

More information: https://npmjs.com/advisories/782
I'm trying to import all types from my prisma schema, however nothing actually imports.
![image](https://user-images.githubusercontent.com/1608113/56475592-f9f09b80-644f-11e9-97ab-36fb9575c184.png)

Here is the output.
![image](https://user-images.githubusercontent.com/1608113/56475598-0aa11180-6450-11e9-84b0-e2f23ec0b308.png)

If I try to import a specific type, such as an input type called `UserUpdateInput`it will not specifically import `UserUpdateInput`. It will only import every type that is similar such as  `UserUpdateManyDataInput`, `UserUpdateManyMutationInput`, `UserUpdateManyWithoutRolesInput`, etc...

Here is the start of my prisma-schema.graphql file for reference/example.
![image](https://user-images.githubusercontent.com/1608113/56475666-e4c83c80-6450-11e9-9d53-c780fb41bc73.png)


Am I misinterpreting anything? 

package.json

```
{
  "name": "my-app",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build": "prisma generate && prisma deploy && tsc",
    "start": "cd ./dist/apollo && node index.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "dependencies": {
    "apollo-server": "^2.4.8",
    "bcrypt": "^3.0.6",
    "dotenv": "^7.0.0",
    "graphql-cli": "^3.0.11",
    "graphql-import": "^0.7.1",
    "graphql-tools": "^4.0.4",
    "jsonwebtoken": "^8.5.1",
    "lodash": "^4.17.11",
    "prisma": "^1.31.1",
    "prisma-binding": "^2.3.10",
    "prisma-client-lib": "^1.31.1"
  },
  "devDependencies": {
    "@types/bcrypt": "^3.0.0",
    "@types/dotenv": "^6.1.1",
    "@types/graphql": "^14.2.0",
    "@types/jsonwebtoken": "^8.3.2",
    "@types/lodash": "^4.14.123",
    "@typescript-eslint/eslint-plugin": "^1.7.0",
    "@typescript-eslint/parser": "^1.7.0",
    "eslint": "^5.16.0",
    "eslint-config-prettier": "^4.1.0",
    "eslint-plugin-prettier": "^3.0.1",
    "prettier": "^1.17.0",
    "typescript": "^3.4.4"
  },
  "resolutions": {
    "graphql": "^0.13.1",
    "c/**/left-pad": "1.1.2"
  }
}

```
I am getting the following error running locally trying to use create a query to look up a unique item.

`Error: Field where: Couldn't find type ItemWhereUniqueInput in any of the schemas.`

Below is my schema.graphql file:

```
type Item {
	id: ID!
	title: String!
	description: String!
	price: Int!
	image: String
	largeImage: String
}

type Vehicle {
  id: ID!
  title: String!
  description: String!
  image: String
  largeImage: String
  price: Int!
}

type Mutation {
  createItem(title: String, description: String, price: Int, image: String, largeImage: String): Item!
  createVehicle(title: String, description: String, price: Int, image: String, largeImage: String):Vehicle!
  updateItem(id: ID!, title: String, description: String, price: Int): Item!
}

type Query {
  items: [Item]!
  item(where: ItemWhereUniqueInput!): Item
  vehicles: [Vehicle]!
}

```

And I have the following in my generated prisma.graphql file:

```
type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  items(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Item]!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  user(where: UserWhereUniqueInput!): User
  item(where: ItemWhereUniqueInput!): Item
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  itemsConnection(where: ItemWhereInput, orderBy: ItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ItemConnection!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}
```
I have troubles trying to import a schema generated by postgraphile.

**Attempt 1**
I first tried importing a specific type like this: `# import ProdAttrsConnection from './generated/postgraphile.graphql'`

After writing the import line, I get this error with different types: `Unknown type "ProductToAttrsOrderBy".` The types that throw the error are not even dependencies of the one I imported, so I think it is a schema validation error. In the case of the error I mentioned, `ProductToAttrsOrderBy` is an enum and it is declared in the schema.

**Attempt 2**
Then I tried importing the whole schema like this: `# import * from ./generated/postgraphile.graphql`

In this case, I don't get an error by just writing the import line, but when I use any imported type I get this error with multiple types: `Interface field Node.nodeId expected but ProdItemAttr does not provide it.`

Here are the types corresponding to the error I mentioned:

```graphql
interface Node {
  nodeId: ID!
}

type ProdItemAttr implements Node {
  nodeId: ID!
  # ...otherStuff
}
```