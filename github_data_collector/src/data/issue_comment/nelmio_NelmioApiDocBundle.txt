Issue: Using the Exception Object in core PHP when documenting an exception response for a Controller action is throwing the following error:
`"message":"The PropertyInfo component was not able to guess the type of Exception::$message"` 

Example:  
```  
     * @Response(
     *     response=500,
     *     description="Thrown when attempting to update a non-existent record.",  
     *     @Schema(  
     *        type="array",  
     *        @Items(ref=@Model(type=Exception::class))  
     *     )  
     * )
```

Desired Solution: Ability to use Exception class object in response annotations and/or documentation on how to properly annotate an exception response in Symfony (as I could be setting up the incorrect notation :))
I notice in previous versions it was possible through a command: https://symfony.com/doc/2.x/bundles/NelmioApiDocBundle/commands.html

I'd like to be able to export to an HTML file without the sandbox now. 

Is there a mechanism for doing this in the newer versions?
FOSRest does not support symfony 5 yet
ajout de fichiers .yml
I need som customization, so I can support also MyClabs\Enum . 

Because I want to support this object type I need to be able to hook in the part, that is describing object properties.

I refactored property describing into property describers, so anybody can hook in and add custom describers if wanted.

Here is also example of my ProperyDescriber for Enum:
```php
<?php

declare(strict_types=1);

namespace WebSupport\RestBundle\Nelmio\ApiDoc\PropertyDescriber;

use EXSyst\Component\Swagger\Schema;
use MyCLabs\Enum\Enum;
use Nelmio\ApiDocBundle\Describer\ModelRegistryAwareInterface;
use Nelmio\ApiDocBundle\Describer\ModelRegistryAwareTrait;
use Nelmio\ApiDocBundle\Model\Model;
use Nelmio\ApiDocBundle\PropertyDescriber\PropertyDescriberInterface;
use Symfony\Component\PropertyInfo\Type;

class EnumPropertyDescriber implements PropertyDescriberInterface, ModelRegistryAwareInterface
{
    use ModelRegistryAwareTrait;
    
    public function describe(Type $type, Schema $property, array $groups)
    {
        $type = new Type($type->getBuiltinType(), false, $type->getClassName());

        $property->setRef(
            $this->modelRegistry->register(new Model($type, []))
        );
    }

    public function supports(Type $type): bool
    {
        return Type::BUILTIN_TYPE_OBJECT === $type->getBuiltinType()
            && is_a($type->getClassName(), Enum::class, true);
    }

}
```

Hi,

first of all, thanks for your bundle !

We use `ref=@Model(type=Object::class)` with our JMSSerializer configuration (in yml files) and it works well to output the good type !

But we couldn't find a way to add a description and example for properties that are on the propel base class, except by adding the properties on the child class too, which does not seem to be a good solution.
Also how is it possible to give description and example for methods use in serializer config (virtual_properties)

Thanks
Judging on the output from https://github.com/nelmio/NelmioApiDocBundle/compare/v3.4.0...v3.5.0 the release notes for v3.5.0

```
Use getReflectionMethod instead of getReflactionClassAndMethod
```
are a bit short with respect to the changes done between the 2 versions
Hello there,

I would like to use the same model for a few endpoints. I thought I could "simply" define the my Doctrine entity as a model, but it doesn't work that way.

Can someone point me in the right direction?


Here is my Swagger route documentation.
```
     * @SWG\Response(
     *     response=200,
     *     description="Returns a single group.",
     *     @SWG\Schema(
     *         @SWG\Property(property="id", type="string"),
     *         @SWG\Property(property="name", type="string"),
     *         @SWG\Property(property="points", type="array", @SWG\Items(ref=@Model(type="PointOfSale::class"))),
     *     )
     * )
```

Here, my endpoint returns an array of **PointOfSale** in the property **points** so instead of redefining every field, I would like to reuse the same model on multiple endpoints.


Hi!
Here is a question: let's imagine I have one controller ApiController.php which is responsible for two groups:
```php

/**
 * @Route("/{area<admin|front>}/api")
 */
class ApiController
{
     /**
     * @Route("/get-something", name="foo", methods={"GET"})
     */
    public function getSomething(): Response
    {
        ....
    }

    ....
}
```
and my nelmio_api_doc file:

```yaml
nelmio_api_doc:
    areas:
        admin:
            path_patterns: 
                 - ^/{area}/api/get-something
        front:
            path_patterns: 
                 - ^/{area}/api/get-something

```


as a result I have two pages with docs:
- /api/doc/admin
- /api/doc/front

which display this route with description on both pages as: 
> /{area}/api/get-something

Is this possible  to display them as:
> /admin/api/get-something on /api/doc/admin

and 
> /front/api/get-something on /api/doc/front

?

Thank you in advance!
I like to set the version of nelmio dynamically like below

nelmio_api_doc:
    documentation:
        info:
            title: API
            description: API Documentation
            version: "@=container.hasParameter('some_param') ? parameter('some_param') : 'default_value'"

But it doesn't output the version , instead prints it as a string. Please help