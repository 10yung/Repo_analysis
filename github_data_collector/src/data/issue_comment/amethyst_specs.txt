Fixes #664 

## API changes

This changes three things:
* `UnprotectedStorage` has its item type as an associated type rather than as a generic type parameter.
* The type parameter of `MaskedStorage` is now the inner storage, rather than the item type.
This allows any item to be stored in a `MaskedStorage`, rather than only `Component`s.
* `MaskedStorage` now has `contains`, `get` and `get_mut` methods.
https://youtu.be/Q86V5DnSPPs?t=539
https://gitlab.com/cheako/hazel-rs/blob/1c04d1446a5a1c3628f4fba577ec276313cb93ea/src/renderer/r2d.rs#L432-593

I'd like to create some components and then have a function that takes an entity and figures out what components it has and call the appropriate function.  I'd also like to write systems, but that's not the main focus.

Edit: Missing a selection for questions.
At the moment, `MaskedStorage` requires a `Component` bound on its type parameter, and it's missing two of the methods that `UnprotectedStorage` offers. I think it would make the type more flexible, with relatively little work, if the following changes were made:

* Remove the `T: Component` bound, instead adding a second type parameter `S` for the storage, with a `S: UnprotectedStorage<T>` bound.
* Add the missing methods `.get` and `.get_mut` that forward to the corresponding `UnprotectedStorage` methods.

With these changes, the `MaskedStorage` type could be used for any `T`, anything that needs an ID for lookup would work, not just components. It would make it simply a safe wrapper around `UnprotectedStorage`. An example is Amethyst, which currently uses `UnprotectedStorage` for asset storage, but which has had to build its own safety wrappers. If `MaskedStorage` were changed in this way, users could use that type instead, without safety concerns.

## Description

The [ConvertSaveload doc](https://docs.rs/specs/0.15.1/specs/saveload/trait.ConvertSaveload.html) references `#[derive(Saveload)]`, which should be `#[derive(ConvertSaveload)]` (see https://github.com/amethyst/specs/pull/460/files#diff-822e080d915774f7d11cc2c5bd503bffR84)

## Meta

Rust version: cargo 1.39.0 (1c6ec66d5 2019-09-30)
Specs version / commit: 0.15.1 / master commit c182a28cdd67950614dc287ab4ef4305f1e480c3
Operating system: linux

## Reproduction

Steps to reproduce the behavior:
1. Go to the specs project root directory
2. Run `grep -rnw . -e 'derive(Saveload)'`
3. See places using the wrong name

## Expected behavior

The documentation should show `derive(ConvertSaveload)` instead.

## Description

I'm getting a runtime panic with: `Tried to fetch data, but it was already borrowed`

## Meta

Rust version: 1.39.0
Specs version / commit: 0.15.1
Operating system: Arch Linux

## Reproduction

Steps to reproduce the behavior:
Issue seems to only happen if I call dispatch on two different Dispatchers under specific conditions when in between I modify a resource inside a separate code block.

I suspect this forces the mut reference to that resource to be dropped but somehow the second dispatcher run panics with this error.

Execution quasi-example:
```
{
    let mut state = world.fetch_mut::<State>();
    state.do_something_mutably();
}
dispatcher1.dispatch(&world);
world.maintain();

let mut state = world.fetch_mut::<State>(); // expecting a modified state from dispatcher1 run
state.do_something_else_mutably();
dispatcher2.dispatch(&world); // panics within here
```

## Expected behavior

Both dispatchers should've executed fine.

## Backtrace

```
thread '<unnamed>' panicked at 'Tried to fetch data, but it was already borrowed.
You can get the type name of the incorrectly borrowed data by enabling `shred`'s `nightly` feature.', .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/cell.rs:312:33
stack backtrace:
   0: backtrace::backtrace::libunwind::trace
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/libunwind.rs:88
   1: backtrace::backtrace::trace_unsynchronized
             at /cargo/registry/src/github.com-1ecc6299db9ec823/backtrace-0.3.37/src/backtrace/mod.rs:66
   2: std::sys_common::backtrace::_print_fmt
             at src/libstd/sys_common/backtrace.rs:76
   3: <std::sys_common::backtrace::_print::DisplayBacktrace as core::fmt::Display>::fmt
             at src/libstd/sys_common/backtrace.rs:60
   4: core::fmt::write
             at src/libcore/fmt/mod.rs:1030
   5: std::io::Write::write_fmt
             at src/libstd/io/mod.rs:1412
   6: std::sys_common::backtrace::_print
             at src/libstd/sys_common/backtrace.rs:64
   7: std::sys_common::backtrace::print
             at src/libstd/sys_common/backtrace.rs:49
   8: std::panicking::default_hook::{{closure}}
             at src/libstd/panicking.rs:196
   9: std::panicking::default_hook
             at src/libstd/panicking.rs:210
  10: std::panicking::rust_panic_with_hook
             at src/libstd/panicking.rs:473
  11: std::panicking::continue_panic_fmt
             at src/libstd/panicking.rs:380
  12: std::panicking::begin_panic_fmt
             at src/libstd/panicking.rs:335
  13: shred::cell::TrustCell<T>::borrow_mut::{{closure}}
             at /.../.cargo/registry/src/github.com-1ecc6299db9ec823/specs-0.15.1/<::std::macros::panic macros>:9
  14: core::result::Result<T,E>::unwrap_or_else
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/result.rs:818
  15: shred::cell::TrustCell<T>::borrow_mut
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/cell.rs:311
  16: shred::world::World::try_fetch_mut::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/mod.rs:483
  17: core::option::Option<T>::map
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/option.rs:447
  18: shred::world::World::try_fetch_mut
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/mod.rs:482
  19: shred::world::World::fetch_mut
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/mod.rs:471
  20: <shred::world::data::Write<T,F> as shred::system::SystemData>::fetch
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/world/data.rs:118
  21: shred::system::impl_data::<impl shred::system::SystemData for (A, B, C, D, E)>::fetch
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/system.rs:372
  22: <T as shred::system::DynamicSystemData>::fetch
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/system.rs:266
  23: <T as shred::system::RunNow>::run_now
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/system.rs:139
  24: shred::dispatch::stage::Stage::execute::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/dispatch/stage.rs:110
  25: core::ops::function::impls::<impl core::ops::function::FnMut<A> for &F>::call_mut
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/ops/function.rs:245
  26: core::iter::traits::iterator::Iterator::for_each::call::{{closure}}
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/iter/traits/iterator.rs:613
  27: <core::slice::IterMut<T> as core::iter::traits::iterator::Iterator>::fold
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/slice/mod.rs:3213
  28: core::iter::traits::iterator::Iterator::for_each
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libcore/iter/traits/iterator.rs:616
  29: <rayon::iter::for_each::ForEachConsumer<F> as rayon::iter::plumbing::Folder<T>>::consume_iter
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/for_each.rs:55
  30: rayon::iter::plumbing::Producer::fold_with
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:110
  31: rayon::iter::plumbing::bridge_producer_consumer::helper
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:438
  32: rayon::iter::plumbing::bridge_producer_consumer::helper::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:418
  33: rayon_core::join::join_context::call_a::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/join/mod.rs:125
  34: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panic.rs:315
  35: std::panicking::try::do_call
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panicking.rs:292
  36: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:80
  37: std::panicking::try
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panicking.rs:271
  38: std::panic::catch_unwind
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panic.rs:394
  39: rayon_core::unwind::halt_unwinding
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/unwind.rs:17
  40: rayon_core::join::join_context::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/join/mod.rs:146
  41: rayon_core::registry::in_worker
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:853
  42: rayon_core::join::join_context
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/join/mod.rs:133
  43: rayon::iter::plumbing::bridge_producer_consumer::helper
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:416
  44: rayon::iter::plumbing::bridge_producer_consumer
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:397
  45: <rayon::iter::plumbing::bridge::Callback<C> as rayon::iter::plumbing::ProducerCallback<I>>::callback
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:373
  46: <rayon::slice::IterMut<T> as rayon::iter::IndexedParallelIterator>::with_producer
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/slice/mod.rs:708
  47: rayon::iter::plumbing::bridge
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/plumbing/mod.rs:357
  48: <rayon::slice::IterMut<T> as rayon::iter::ParallelIterator>::drive_unindexed
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/slice/mod.rs:684
  49: rayon::iter::for_each::for_each
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/for_each.rs:12
  50: rayon::iter::ParallelIterator::for_each
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-1.2.1/src/iter/mod.rs:360
  51: shred::dispatch::stage::Stage::execute
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/dispatch/stage.rs:108
  52: shred::dispatch::dispatcher::Dispatcher::dispatch_par::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/shred-0.9.4/src/dispatch/dispatcher.rs:89
  53: rayon_core::thread_pool::ThreadPool::install::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/thread_pool/mod.rs:132
  54: rayon_core::registry::Registry::in_worker_cold::{{closure}}::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:501
  55: <rayon_core::job::StackJob<L,F,R> as rayon_core::job::Job>::execute::call::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/job.rs:113
  56: <std::panic::AssertUnwindSafe<F> as core::ops::function::FnOnce<()>>::call_once
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panic.rs:315
  57: std::panicking::try::do_call
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panicking.rs:292
  58: __rust_maybe_catch_panic
             at src/libpanic_unwind/lib.rs:80
  59: std::panicking::try
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panicking.rs:271
  60: std::panic::catch_unwind
             at /rustc/4560ea788cb760f0a34127156c78e2552949f734/src/libstd/panic.rs:394
  61: rayon_core::unwind::halt_unwinding
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/unwind.rs:17
  62: <rayon_core::job::StackJob<L,F,R> as rayon_core::job::Job>::execute
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/job.rs:119
  63: rayon_core::job::JobRef::execute
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/job.rs:59
  64: rayon_core::registry::WorkerThread::execute
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:735
  65: rayon_core::registry::WorkerThread::wait_until_cold
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:719
  66: rayon_core::registry::WorkerThread::wait_until
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:693
  67: rayon_core::registry::main_loop
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:813
  68: rayon_core::registry::ThreadBuilder::run
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:58
  69: <rayon_core::registry::DefaultSpawn as rayon_core::registry::ThreadSpawn>::spawn::{{closure}}
             at .cargo/registry/src/github.com-1ecc6299db9ec823/rayon-core-1.6.1/src/registry.rs:103
```
Is the order in which entities appear in a join deterministic at all? As in, is it predictable based on the current world state and thus replicable? If not, does Specs offer any tools to achieve this?
I've been going through the specs guide as I'm consider porting my WIP game https://akigi.com to use `specs` instead of my own ECS.

The guide has been excellent and has set me up to be able to port with _relative_ ease.

One thing that feels missing is advice and guidance around writing tests for systems.

It would be awesome if there was a dedicated chapter on the subject - with a few examples of good system tests.

I'm sure that I'll be able to dig around the API and figure out my own best practices for writing my tests since `specs` has such an intuitive API - but it'd be nice if instead of spending somewhere between 30-120 mins thinking through that the guide just gave me guidance from the start like it it did for everything else!

Thanks for the consideration - cheers!

Updates the requirements on [uuid](https://github.com/uuid-rs/uuid) to permit the latest version.
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/uuid-rs/uuid/commits)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
## Description

Using the `JoinIter::get` method, it is possible for a user of `specs` to create two mutable references to the same component data, without the user writing any `unsafe` code. Here is a simple program that illustrates the issue:

```rust
use specs::{Builder, Component, DenseVecStorage, Join, World, WorldExt, WriteStorage};

#[derive(Default)]
struct TestComponent {
    value: u32,
}

impl Component for TestComponent {
    type Storage = DenseVecStorage<TestComponent>;
}

fn main() {
    let mut world = World::new();
    world.register::<TestComponent>();
    let entity = world.create_entity().with(TestComponent::default()).build();
    world.maintain();

    let mut storage: WriteStorage<TestComponent> = world.write_storage();
    let entities = world.entities();

    let mut join_iter = (&mut storage).join();
    let aliased_ref_0 = join_iter.get(entity, &entities).unwrap();
    let aliased_ref_1 = join_iter.get(entity, &entities).unwrap();

    println!("aliased_ref_0 is initially {}.", aliased_ref_0.value);
    aliased_ref_1.value += 1;
    println!(
        "After change to aliased_ref_1, aliased_ref_0 is now {}.",
        aliased_ref_0.value
    );
}
```

When I run this program, I get the following output:

```
aliased_ref_0 is initially 0.
After change to aliased_ref_1, aliased_ref_0 is now 1.
```

The issue doesn't seem too hard to avoid as long as I only use `JoinIter` for its intended purpose as an iterator, but even so, the fact that I can violate Rust's aliasing rules without writing `unsafe` seems like an issue. Perhaps `JoinIter::get` needs to be made private to the `specs` crate, or maybe it just needs to be marked `unsafe`? I imagine the same issue can occur with `JoinIter::get_unchecked`, though I haven't tested it.

## Meta

Rust version: 1.37.0 (2018 edition)
Specs version / commit: 0.15.1
Operating system: Ubuntu 18.04.3 LTS 64-bit

## Reproduction

Steps to reproduce the behavior:
1. Compile the Rust program given above.
2. Run the program.
3. See in the output that the value at aliased_ref_0 changed even though aliased_ref_0 wasn't mutated directly.

## Expected behavior

I would expect the above code not to compile, at least not without modifying it to include an `unsafe` block.

Hi all!
### DenseVecStorage
The problem is located in [this function](https://github.com/slide-rs/specs/blob/9ffc149b850614a390c3229b82220c19491e411b/src/storage/storages.rs#L112).
Having uninitialized data inside a slice is insta-UB, in this function `data_id` has uninitialized `u32` thanks to the contract of [set_len](https://doc.rust-lang.org/std/vec/struct.Vec.html#method.set_len) not being respected. Then [get_unchecked_mut](https://doc.rust-lang.org/std/primitive.slice.html#method.get_unchecked_mut) will create a slice and trigger UB.
This slice is created in every function accessing data inside the storage too.
This could be fixed by replacing uninitialized value by `0` or `std::u32::MAX` for example (it's never accessed anyway).
### VecStorage
The problem is in [insert](https://github.com/slide-rs/specs/blob/9ffc149b850614a390c3229b82220c19491e411b/src/storage/storages.rs#L208) too and spread to any function accessing data in the storage. This is basically the same thing, a call to `set_len` not respecting the contract followed by a call to `get_unchecked_mut` but this time it's a `Vec<T>`.
I think the solution would be `VecStorage<T>(Vec<MaybeUninit<T>>)`. An other way would be to index inside the `Vec` using raw pointer only but that's dangerous since any "classic" access would still trigger UB.

Also creating a reference to uninitialized data is not currently ok but might change in the future for some types (like `u32`) so it might be a good thing to replace them with raw pointer arithmetic.