Could you support the feature to show the array length? Similar to jq `.users | length`.
What
-------

Be able to enter in a cursor mode, that would allow to navigate the json in RAW using cursors or vim `hjkl`.

Behaviour
-------------

- Press some key (`Ctrl+n`) for cursor navigation
- Press `esc` to go back to filter mode
- Press `Enter` to focus the current json node where the cursor is, and automatically fill the filter mode (See #77)

Optionally: allow select some text pressing shift.
We press `TAB` to navigate next matching field. It would be nice to use `shift+tab` to go to previous.
What?
--------

When reading big jsons, sometimes is nice to be able to just do a plain search, as you would do with `less`: Press `/` time string to search and enter in search mode. 

For instance, to search for all cases with `http://`

Suggested behaviour
---------------------------

 - Press `/` or `?` to enter search mode. 
 - `n`/`N` to navigate next/prev occurrences
 - `Enter` select current search occurrence and populate filter with the corresponding path 
 - `Esc` exit search path

Considerations: 
 - Search should be scoped to current selection in filter 
Seems to either hang or not allow input
Hi, just a matter to make it easier to use, if you can remove the "<" to open a file.
Also, if you `jid file` or `jid` then nothing happens but it hangs.
I have modified engine.go and engine_test.go adding an Eval() and EvalString().  I've included a minimal test for each.  Thanks, Robert
`
jid version v0.6.2
`

Test json file:

` {
    "a": 123,
    "aa": 124,
    "bb": 567
}`

Identify a bug:
1. Start `jid < test.json`
2. Enter `a`

I expected 123, but saw full json file.
To reach success in the following file, the jq expression is `.["\""]`. But jid produces `."`

Input file:
```json
{
    "\"": "key with double quote: success!",
}
```
Completion or just input don't work for empty string key. With jq I would use this expression: `.[""]`

Here is an example JSON:
```
{
    "": "empty key: success!",
}
```