**What kind of change does this PR introduce?** (check at least one)
语言文字的修改

**The description of the PR:**
使描述更通顺
**在提交issue之前请回答以下问题，谢谢!**

> 建议首先查看是否已经有类似的 Issues (提交时可删除该提示)

### 你使用的是哪个版本

### 预期结果

### 实际结果

### 重现结果的步骤

### 其他相关信息
**在提交issue之前请回答以下问题，谢谢!**

> 建议首先查看是否已经有类似的 Issues (提交时可删除该提示)

### 你使用的是哪个版本

### 预期结果

### 实际结果

### 重现结果的步骤

### 其他相关信息

你的lua脚本，会出现间隔interval（2s，示例的时间间隔）的空窗期，任何请求都不能进来

**在提交issue之前请回答以下问题，谢谢!**

> 建议首先查看是否已经有类似的 Issues (提交时可删除该提示)

### 你使用的是哪个版本

版本信息：mysql  Ver 14.14 Distrib 5.7.23, for macos10.13 (x86_64) using  EditLine wrapper

### 预期结果
1. 【不要让数据库帮我们做强制类型转换】，该结论不严谨
2. 【如果需要进行 join 的字段两表的字段类型要相同】，该结论有问题

### 实际结果
1. 【不要让数据库帮我们做强制类型转换】，该结论不严谨
	> 结论：隐式转换，where column_name=2 id是字符串类型，相当于使用字符串转整型，不用索引；而整数转字符串会用到索引
2. 【如果需要进行 join 的字段两表的字段类型要相同】，该结论有问题
	> 结论：关联查询中，关联字段如果没有索引,会导致后面的索引都失效

以下是我测试中用到的sql
```
-- =========================================隐式转换测试=====================================
-- 建表
CREATE TABLE `user` (
  `id`  int(11) unsigned NOT NULL auto_increment,
  `age` int(3) NOT NULL,
  `user_name` varchar(16) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=INNODB DEFAULT CHARSET=utf8mb4;
-- 插入数据
insert into user (age,user_name) value(23,'13000001111');
insert into user (age,user_name)values(24,'13000001112');
insert into user (age,user_name)values(25,'13000001113');
insert into user (age,user_name)values(26,'13000001114');
insert into user (age,user_name)values(27,'13000001115');

-- 添加索引
alter table user add index idx_user_name (user_name);
-- 添加索引
alter table user add index idx_age (age);

-- user_name是字符串类型，这里不是用索引，extra的结果是Using where
explain
SELECT * from user where user_name = 13000001115;

-- user_name是字符串类型，这里用索引，extra的结果是null
explain
SELECT * from user where user_name = '13000001115';

-- age是整型，这里可以用索引,extra的结果是null
explain
SELECT * from user where age = '23';

-- age是整型，这里可以用索引,extra的结果是null
explain
SELECT * from user where age = 23;

结论：隐式转换，where column_name=2 id是字符串类型，相当于使用字符串转整型，不用索引；而整数转字符串会用到索引

-- =========================================join测试=====================================
-- 建表
CREATE TABLE `user2` (
  `id`  int(11) unsigned NOT NULL auto_increment,
  `age` varchar(3) NOT NULL,
  `phone` int(11) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=INNODB DEFAULT CHARSET=utf8mb4;
-- 插入数据
insert into user2 (age,phone) value('23',130001111);
insert into user2 (age,phone)values('24',130001112);
insert into user2 (age,phone)values('25',130001113);
insert into user2 (age,phone)values('26',130001114);
insert into user2 (age,phone)values('27',130001115);

-- 添加索引
alter table user2 add index idx_phone (phone);
-- 添加索引
alter table user2 add index idx_age (age);
-- 删除user2 age索引
drop index idx_age on user2;

-- ========== 有索引测试
-- 有索引Using where; Using index; Using join buffer (Block Nested Loop)
explain
SELECT u1.* from user u1 left join user2 u2 on u1.age = u2.age;

-- 有索引Using where; Using index
explain
SELECT u1.* from user u1 left join user2 u2 on u1.age = u2.age  where u1.id = 1;
-- ========== 没有索引测试
-- user2.age没有索引 Using where; Using join buffer (Block Nested Loop) 
explain
SELECT u1.* from user u1 left join user2 u2 on u1.age = u2.age;

-- user2.age没有索引 Using where
explain
SELECT u1.* from user u1 left join user2 u2 on u1.age = u2.age where u1.id = 1;


结论：关联查询中，关联字段如果没有索引,会导致后面的索引都失效
```
**Using where; Using index的释意：**
- using index，查询时不需要回表查询，直接通过索引就可以获得数据；如果同时出现了using where表示索引用来执行查找值，没有出现using where说明索引是用来读取数据的；效率不错

- using where，出现这个表示数据在server层过滤，反之是存储引擎存过滤；效率较低

### 其他相关信息
建议：MySQL部分结论受版本影响，有争议的建议注明版本
如果是文字类 PR，请按照 [中文排版指北](https://github.com/sparanoid/chinese-copywriting-guidelines) 进行编写(提交时可删除该提示)。

**What kind of change does this PR introduce?** (check at least one)

- [ ] Bugfix
- [ ] Feature
- [ ] Code style update
- [ ] Refactor
- [ ] Build-related changes
- [x] Other, please describe:只是对SQL优化章节中涉及隐式类型转换的情况做出一点补充


**The description of the PR:**


**Other information:**
> 在表中加入一个同步状态字段，每次获取锁的是加 1 ，释放锁的时候-1，当状态为 0 的时候就删除这条记录，即释放锁。

实现重入锁时，并不能区分当前线程是否就是锁的持有者
```sql
insert into `t_lock`(`id`,`count`) values(1,1); 
update `t_lock` set `count` = `count`-1 where `id` = 1 and `count`>0;
```
>由于公平锁需要关心队列的情况，得按照队列里的先后顺序来获取锁(会造成大量的线程上下文切换)，而非公平锁则没有这个限制。

公平锁的阻塞是按节点顺序进行的，而唤醒也是按节点顺序进行的，为什么会造成大量的线程上下文的切换呢？我的理解是，公平锁的吞吐量不是很高。

```java
final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
```

```java
final boolean acquireQueued(final Node node, int arg) {
        boolean failed = true;
        try {
            boolean interrupted = false;
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return interrupted;
                }
                if (shouldParkAfterFailedAcquire(p, node) &&
                    parkAndCheckInterrupt())
                    interrupted = true;
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
    }
```


修改错别字