I'm experimenting with `upspinserver-drive` and have been writing files over and over again.

I'm encountering out-of-memory error like so, on a standard GCP instance.

At the moment I'm not quite sure where the issue is.  Filing this bug so you're aware that it exists, and if I find more information, I'll backfill.

```
   1 2020/01/06 06:55:58.666934 dir/server.Put: Error removing group file f@<REDACTED>/Group/sharing: access.RemoveGroup: item does not exist: group does not exist
   2 fatal error: runtime: out of memory                                                                                                                                                                                                                                                                                     
   3                                                                                                     
   4 runtime stack:                                                                                      
   5 runtime.throw(0xb7b41e, 0x16)                                                                       
   6     /home/fmil/local/opt/go/src/runtime/panic.go:774 +0x72                                          
   7 runtime.sysMap(0xc014000000, 0x4000000, 0x10e7db8)                                                  
   8     /home/fmil/local/opt/go/src/runtime/mem_linux.go:169 +0xc5                                      
   9 runtime.(*mheap).sysAlloc(0x10cf620, 0x800000, 0x0, 0x0)                                            
  10     /home/fmil/local/opt/go/src/runtime/malloc.go:701 +0x1cd                                        
  11 runtime.(*mheap).grow(0x10cf620, 0x400, 0xffffffff)                                                 
  12     /home/fmil/local/opt/go/src/runtime/mheap.go:1255 +0xa3                                         
  13 runtime.(*mheap).allocSpanLocked(0x10cf620, 0x400, 0x10e7dc8, 0x0)                                  
  14     /home/fmil/local/opt/go/src/runtime/mheap.go:1170 +0x266                                        
  15 runtime.(*mheap).alloc_m(0x10cf620, 0x400, 0x7efd50cd0101, 0x7efd3e26fdc8)                          
  16     /home/fmil/local/opt/go/src/runtime/mheap.go:1022 +0xc2                                         
  17 runtime.(*mheap).alloc.func1()                                                                      
  18     /home/fmil/local/opt/go/src/runtime/mheap.go:1093 +0x4c                                         
  19 runtime.(*mheap).alloc(0x10cf620, 0x400, 0xc000010101, 0x7efd50cd83a8)                              
  20     /home/fmil/local/opt/go/src/runtime/mheap.go:1092 +0x8a                                         
  21 runtime.largeAlloc(0x800000, 0x7efd50cb0101, 0x7efd50cd83a8)                                        
  22     /home/fmil/local/opt/go/src/runtime/malloc.go:1138 +0x97                                        
  23 runtime.mallocgc.func1()                                                                            
  24     /home/fmil/local/opt/go/src/runtime/malloc.go:1033 +0x46                                        
  25 runtime.systemstack(0x0)                                                                            
  26     /home/fmil/local/opt/go/src/runtime/asm_amd64.s:370 +0x66                                       
  27 runtime.mstart()                                                                                    
  28     /home/fmil/local/opt/go/src/runtime/proc.go:1146                                                
  29                                                                                                     
  30 goroutine 2462 [running]:                                                                           
  31 runtime.systemstack_switch()                                                                        
  32     /home/fmil/local/opt/go/src/runtime/asm_amd64.s:330 fp=0xc003fb9560 sp=0xc003fb9558 pc=0x45a830 
  33 runtime.mallocgc(0x800000, 0xa53260, 0xc003fb9601, 0x40e2c8)                                        
  34     /home/fmil/local/opt/go/src/runtime/malloc.go:1032 +0x895 fp=0xc003fb9600 sp=0xc003fb9560 pc=0x40dfd5
  35 runtime.makeslice(0xa53260, 0x0, 0x800000, 0x910b07)                                                
  36     /home/fmil/local/opt/go/src/runtime/slice.go:49 +0x6c fp=0xc003fb9630 sp=0xc003fb9600 pc=0x4451fc
  37 google.golang.org/api/internal/gensupport.NewMediaBuffer(...)                                       
  38     /home/fmil/code/go/pkg/mod/google.golang.org/api@v0.15.0/internal/gensupport/buffer.go:28       
  39 google.golang.org/api/internal/gensupport.PrepareUpload(0xc53f00, 0xc0016aaa80, 0x800000, 0x18, 0xc53f00, 0xc0016aaa80, 0xb7c5e3)
  40     /home/fmil/code/go/pkg/mod/google.golang.org/api@v0.15.0/internal/gensupport/media.go:207 +0x4e fp=0xc003fb9688 sp=0xc003fb9630 pc=0x98c92e
  41 google.golang.org/api/internal/gensupport.NewInfoFromMedia(0xc53f00, 0xc0016aaa80, 0xc003fb9768, 0x1, 0x1, 0xc540e0)
  42     /home/fmil/code/go/pkg/mod/google.golang.org/api@v0.15.0/internal/gensupport/media.go:237 +0x8c fp=0xc003fb96e8 sp=0xc003fb9688 pc=0x98cafc
  43 google.golang.org/api/drive/v3.(*FilesCreateCall).Media(...)                                        
  44     /home/fmil/code/go/pkg/mod/google.golang.org/api@v0.15.0/drive/v3/drive-gen.go:5953             
  45 drive.upspin.io/cloud/storage/drive.(*driveImpl).Put(0xc0001a71a0, 0xc004048c40, 0x40, 0xc001708000, 0xc8e, 0xd80, 0x40, 0xba0020)
  46     /home/fmil/code/go/pkg/mod/drive.upspin.io@v0.0.0-20180516213836-bf1608f3f80a/cloud/storage/drive/drive.go:134 +0x385 fp=0xc003fb97c0 sp=0xc003fb96e8 pc=0x9de645
  47 upspin.io/store/server.(*server).Put(0xc00008ce60, 0xc001708000, 0xc8e, 0xd80, 0x0, 0x0, 0x0)       
  48     /home/fmil/code/go/src/upspin.io/store/server/server.go:71 +0x33a fp=0xc003fb9910 sp=0xc003fb97c0 pc=0x8f56ba
  49 upspin.io/serverutil/perm.(*storeWrapper).Put(0xc0016aa210, 0xc001708000, 0xc8e, 0xd80, 0x18, 0xc003fb9a30, 0x2)
  50     /home/fmil/code/go/src/upspin.io/serverutil/perm/store.go:72 +0x1a5 fp=0xc003fb9960 sp=0xc003fb9910 pc=0x8daef5
  51 upspin.io/rpc/storeserver.(*server).Put(0xc00026c0c0, 0xc62be0, 0xc00057d020, 0xc0016f0000, 0xc91, 0xe00, 0xc003fb9d70, 0xc00179b1ec, 0x0, 0x0)
  52     /home/fmil/code/go/src/upspin.io/rpc/storeserver/server.go:93 +0x222 fp=0xc003fb9a60 sp=0xc003fb9960 pc=0x8d7642
  53 upspin.io/rpc/storeserver.(*server).Put-fm(0xc62be0, 0xc00057d020, 0xc0016f0000, 0xc91, 0xe00, 0xe00, 0x0, 0x0, 0xb)
  54     /home/fmil/code/go/src/upspin.io/rpc/storeserver/server.go:85 +0x63 fp=0xc003fb9ac0 sp=0xc003fb9a60 pc=0x8d7fe3
  55 upspin.io/rpc.(*serverImpl).ServeHTTP(0xc000061b00, 0xc60920, 0xc0017c9340, 0xc0017b3b00)           
  56     /home/fmil/code/go/src/upspin.io/rpc/server.go:177 +0x3ec fp=0xc003fb9bb8 sp=0xc003fb9ac0 pc=0x8ca75c
  57 net/http.(*ServeMux).ServeHTTP(0x10c8ec0, 0xc60920, 0xc0017c9340, 0xc0017b3b00)                     
  58     /home/fmil/local/opt/go/src/net/http/server.go:2387 +0x1bd fp=0xc003fb9c18 sp=0xc003fb9bb8 pc=0x76133d
  59 net/http.serverHandler.ServeHTTP(0xc00028c0e0, 0xc60920, 0xc0017c9340, 0xc0017b3b00)                
  60     /home/fmil/local/opt/go/src/net/http/server.go:2802 +0xa4 fp=0xc003fb9c48 sp=0xc003fb9c18 pc=0x7628b4
  61 net/http.(*conn).serve(0xc000544f00, 0xc627a0, 0xc003fc0840)                                        
  62     /home/fmil/local/opt/go/src/net/http/server.go:1890 +0x875 fp=0xc003fb9fc8 sp=0xc003fb9c48 pc=0x75e255
  63 runtime.goexit()                                                                                    
  64     /home/fmil/local/opt/go/src/runtime/asm_amd64.s:1357 +0x1 fp=0xc003fb9fd0 sp=0xc003fb9fc8 pc=0x45c901
  65 created by net/http.(*Server).Serve                                                                 
  66     /home/fmil/local/opt/go/src/net/http/server.go:2927 +0x38e                                      
  67        
```
If someone puts an Access file at their root (@/Access) and forgets to include read access for the user the dir server runs as, upspin groups don't work and fail in fairly impossible to debug ways.  I posit that we should add an implicit access rule that the users in the Writers file always have read access to @/Group/... regardless of the permissions.  While I dislike adding exceptions, I think this may be a necessary one since it is too easy to lock the server out of the Groups directory and generate a quite confusing situation,
In order to successfully invoke `upspin setupwriters -domain myhostname`, I needed to create ~/upspin/deploy/myhostname/ and copy ~/upspin/config.upspinserver to ~/upspin/deploy/myhostname/config.

I kinda just guessed to do that based on the error messages and `upspin setupwriters -help`.

It seems that either setupwriters should take a -config flag like upspin, or the setup wizard should initialize the ~/upspin/deploy/ directory structure when it sets the server up on GCP.
I'm trying to follow https://upspin.io/doc/faq.md to allow a second account to use my personal upspin server, but getting stuck. Repro steps:

1. Create a server on GCP with upspin-ui. Sign up as user1@example.com. Reading/writing files works as expected.
1. On a second computer, create a new user user2@example.com with upspin-ui.
1. Back on the first computer, copy ~/upspin/config.upspinserver to ~/upspin/deploy/myhostname/config
    1. (Should the initial setup have done this? `upspin setupwriters` seems to assume the config lives in a ~/upspin/deploy subdirectoryâ€¦ or maybe this is my problem?)
1. Run `upspin setupwriters -domain myhostname user1@example.com user2@example.com`
    1. If I `upspin get` the Group/Writers file, I see that both users are now in it.
1. Back on the second computer, choose the option to specify the servers.
1. Enter "myhostname:443" in both Directory Server and Store Server fields.
1. Click "Continue".

After a short delay, an error appears in the bottom of the dialog with a message like:

> error communicating with "myhostname:443": store/remote("myhostname:443").Get: fetching https://storage.googleapis.com/mybucket/Upspin:notexist: 403 Forbidden"

Did I miss a step?
Not sure how much of an interest there is for git to be fully functional on an upspinfs mount, but in case there is some, here goes.

I noticed that the upspinfs permission system interacts badly with the git diffs.  Namely, on many occasions, if the git repo contains permissions that can't be modeled in upspin, checking out a git repo to the upspin filesystem results in a set of bogus permission diffs.

This issue is kind of similar: https://github.com/upspin/upspin/issues/331; except in the git case I think bogus diffs are things one really does not want.
Since upspin is switching to go modules a `go.mod` file should be added to the dropbox storage backend. If ok I will send a CL later this week for this.
As part of migrating to Go modules I had to break the `-version` flag for both of our `upspin-ui` and `upspinserver-gcp` distributions (see upspin/gcp@2f974d3aa265c7a4d85b5df69b26d8773d2f1146). This bug tracks the fix.
My upspinserver has been busy for months in the following loop. Sadly I had to restart the machine, so only have recent server logs to show.  But, this is what transpires.  Once `upspinserver` is started,
it prints the messages below, then goes on to a many-weeks-long read spree. Where the tail end of the log excerpt above is repeated ad infinitum (except, different hashes every time).

In the past, I kept the machine up for months with upspinserver running, and it just kept going.

I wouldn't mind it since it's not a cloud machine; except that the read spree seems to starve completely any other clients that attempt to connect. So `upspin` utility and `upspinfs` become unusable as they wait indefinitely for something to happen. What to do?

```
 LOGLEVEL=debug
+ UPSPINSERVER=/go/bin/upspinserver
+ sudo /go/bin/upspinserver --letscache=/home/f/upspin/letsencrypt --config=/home/f/config --serverconfig=/home/f/upspin/server --http=:33000 --https=:443 --web --log=debug
2019/09/18 06:53:08.714969 Store and Directory servers initialized.
2019/09/18 06:53:08.715331 Store server configuration: backend=Disk basePath=/home/f/upspin/server/storage
2019/09/18 06:53:08.715357 https: serving HTTPS on ":443" using Let's Encrypt certificates
2019/09/18 06:53:08.715364 https: caching Let's Encrypt certificates in /home/f/upspin/letsencrypt
2019/09/18 06:53:08.806556 recoverFromLog: Recovering from log... 260780
2019/09/18 06:53:08.813198 recoverFromLog: Putting dirEntry: "f+snapshot@filmar.us/2019/04/30"
2019/09/18 06:53:08.830271 store/remote("").Dial("upspin@filmar.us", "remote,udir.filmar.us:443")
2019/09/18 06:53:08.830313 store/remote("udir.filmar.us:443").Get("0E845C7852C7E23E8246133F69DD0254AE0BB2B8110928CBF673C20A64E71177")
2019/09/18 06:53:08.830321 store/remote("udir.filmar.us:443").Get("metadata:HTTP-Base")
2019/09/18 06:53:08.980522 rpc/storeserver: "upspin@filmar.us": store.Get("metadata:HTTP-Base")
2019/09/18 06:53:08.980541 rpc/storeserver: "upspin@filmar.us": store.Get("metadata:HTTP-Base")
2019/09/18 06:53:08.980810 rpc/storeserver: "upspin@filmar.us": store.Get("0E845C7852C7E23E8246133F69DD0254AE0BB2B8110928CBF673C20A64E71177")
2019/09/18 06:53:09.103248 store/remote("udir.filmar.us:443").Get("7E8F6C3D714AAF472487E5C655337BC490EA97FA760B1E2280A266C8FE896007")
2019/09/18 06:53:09.103603 rpc/storeserver: "upspin@filmar.us": store.Get("7E8F6C3D714AAF472487E5C655337BC490EA97FA760B1E2280A266C8FE896007")
2019/09/18 06:53:09.213655 store/remote("udir.filmar.us:443").Get("B0B96B9A07EEF38427E8BA50D9313D10B100CBABDAAF8B41997FC3B43413AEB9")
2019/09/18 06:53:09.214000 rpc/storeserver: "upspin@filmar.us": store.Get("B0B96B9A07EEF38427E8BA50D9313D10B100CBABDAAF8B41997FC3B43413AEB9")
2019/09/18 06:53:09.331666 recoverFromLog: Recovering from log... 260853
2019/09/18 06:53:09.331706 recoverFromLog: Putting dirEntry: "f+snapshot@filmar.us/2019/04/30/05:13"
2019/09/18 06:53:09.331721 recoverFromLog: Recovering from log... 261487
2019/09/18 06:53:09.331731 recoverFromLog: 2 entries recovered. Tree is current.
2019/09/18 06:53:09.332043 store/remote("udir.filmar.us:443").Get("DDB6E0761D2BD5A1BF6C8BC2D846E3DB2A7006C9D7D0215662C6B77D47A9FB28")
2019/09/18 06:53:09.332255 rpc/storeserver: "upspin@filmar.us": store.Get("DDB6E0761D2BD5A1BF6C8BC2D846E3DB2A7006C9D7D0215662C6B77D47A9FB28")
2019/09/18 06:53:09.406824 store/remote("udir.filmar.us:443").Get("70609FC23BB6D641DAD109EB994852FC0E0C0071DA3BBDCC3B9D8893058FDDF4")
2019/09/18 06:53:09.406992 rpc/storeserver: "upspin@filmar.us": store.Get("70609FC23BB6D641DAD109EB994852FC0E0C0071DA3BBDCC3B9D8893058FDDF4")
2019/09/18 06:53:09.524942 store/remote("udir.filmar.us:443").Get("092D8A8C8F5A0AA4E2D38F5EF4221204B4356496A3D1F3581E92B0504D9EB0C2")
2019/09/18 06:53:09.525209 rpc/storeserver: "upspin@filmar.us": store.Get("092D8A8C8F5A0AA4E2D38F5EF4221204B4356496A3D1F3581E92B0504D9EB0C2")
2019/09/18 06:53:09.639018 store/remote("udir.filmar.us:443").Get("8186C350FF5CDF38307483D321D85161CA93088227AE7073BE00E14EF6720097")
2019/09/18 06:53:09.639175 rpc/storeserver: "upspin@filmar.us": store.Get("8186C350FF5CDF38307483D321D85161CA93088227AE7073BE00E14EF6720097")
2019/09/18 06:53:09.711634 store/remote("udir.filmar.us:443").Get("A7B1181F6A68DDB44FBD1AC0C8E16AEAD7144AEB9A7DA69303C54FD4D65C73FC")
2019/09/18 06:53:09.711792 rpc/storeserver: "upspin@filmar.us": store.Get("A7B1181F6A68DDB44FBD1AC0C8E16AEAD7144AEB9A7DA69303C54FD4D65C73FC")
2019/09/18 06:53:09.787204 store/remote("udir.filmar.us:443").Get("30F503221DB9533152D0CFE3B38A96F801C032787D6DEB2FC706BACED9946CF4")
2019/09/18 06:53:09.787423 rpc/storeserver: "upspin@filmar.us": store.Get("30F503221DB9533152D0CFE3B38A96F801C032787D6DEB2FC706BACED9946CF4")
2019/09/18 06:53:09.909676 store/remote("udir.filmar.us:443").Get("9DEEC7FE7186E3780BA8752A94B8AC4CC68B24663C47DBD706A64643FC4F6348")
2019/09/18 06:53:09.909841 rpc/storeserver: "upspin@filmar.us": store.Get("9DEEC7FE7186E3780BA8752A94B8AC4CC68B24663C47DBD706A64643FC4F6348")
2019/09/18 06:53:10.023268 store/remote("udir.filmar.us:443").Get("E7DD82026719E4FC986B38F286D41D42EEB2A95351BD99A39A2D00625E656CE7")
2019/09/18 06:53:10.023443 rpc/storeserver: "upspin@filmar.us": store.Get("E7DD82026719E4FC986B38F286D41D42EEB2A95351BD99A39A2D00625E656CE7")
2019/09/18 06:53:10.080387 store/remote("udir.filmar.us:443").Get("6C03C24489607FB59FBDB5B85605A5CE1F149AA4C72BA0FEFA023DBCD1C80C81")
2019/09/18 06:53:10.080557 rpc/storeserver: "upspin@filmar.us": store.Get("6C03C24489607FB59FBDB5B85605A5CE1F149AA4C72BA0FEFA023DBCD1C80C81")
...
```

https://groups.google.com/forum/#!forum/upspin

Was the mailing list deleted?
From one machine:
```
â•°â”€>$ upspin get f@filmar.us/work/fin/.git/refs/heads/master
upspin: get: client.Get: f@filmar.us/work/fin/.git/refs/heads/master: item does not exist:
        store/storecache.Get "096AB46A96AC269CB28CE51FC8EAA358F3DF481656DD391EC1FBC93C0A380BC7":
        store/server.Get:
        cloud/storage/disk.Download: 096AB46A96AC269CB28CE51FC8EAA358F3DF481656DD391EC1FBC93C0A380BC7
```

Server-side log:
```
2019/04/24 07:41:08.734319 rpc/storeserver: "f@filmar.us": store.Get("096AB46A96AC269CB28CE51FC8EAA358F3DF481656DD391EC1FBC93C0A380BC7")
```
(no error is shown, apparently)


From another:

```
â•°â”€>$ upspin get f@filmar.us/work/fin/.git/refs/heads/master
d67d2af59c6083c4f9301f676744ffe07d30c5f7
```

Worth noting that the second `upspin get` leaves no trace on the server
And:
```
â•°â”€>$ upspin info f@filmar.us/work/fin/.git/refs/heads/master

f@filmar.us/work/fin/.git/refs/heads/master
    packing:      ee
    size:         41
    time:         Wed Apr 24 00:31:31 PDT 2019
    writer:       f@filmar.us
    attributes:   none (plain file)
    sequence:     388514
    access file:  f@filmar.us/work/Access
    key holders:  f@filmar.us
    key hashes:      3d23cfb4...
    can read:   (same)
    can write:  (same)
    can list:   (same)
    can create: (same)
    can delete: (same)
    Block#      Offset Size Location
    0           0      41   {remote,udir.filmar.us:443 096AB46A96AC269CB28CE51FC8EAA358F3DF481656DD391EC1FBC93C0A380BC7}
```