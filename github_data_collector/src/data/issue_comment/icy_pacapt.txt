This is probably out of scope as it has too many variables, but for me, pacapt could completely abstract distro-specific package managers if it would also support adding additional repositories.

For instance, sometimes I need to install Docker CE on Debian as described in https://docs.docker.com/install/linux/docker-ce/debian/. The steps are roughly equivalent to:

```
apt update
apt install apt-transport-https ca-certificates gnupg2 lsb-release

OS_ID=$(lsb_release -si | tr '[:upper:]' '[:lower:]')
OS_REL=$(lsb_release -sc)

repo_name=docker-ce
base_url=https://download.docker.com/linux

curl -sSL $base_url/$OS_ID/gpg | apt-key add -
echo "deb [arch=amd64] $base_url/$OS_ID $OS_REL stable" >/etc/apt/sources.list.d/$repo_name.list
apt update
```
On Arch, -Qs with multiple arguments gives results which contain both = it's an _intersection_
E.g. pacman `-Qs maria java` would match a package which has the words maria and java in any order in the pkgname or description.


 rpm searches for each argument on it's own, but filters duplicates = it's an _union_
 (it searches only package names, but let's be happy with that)

-Qs is for yum and dnf currently iplemented as `rpm -qa "*${*}*"`
We can follow how this is evaluated by using bahs's `set -x`, it evaluates to the single word `'*maria java*'`
As there are no packages containing a space ...

Changing it to `rpm -qa *${*}*` or `rpm -qa "*${@}*"` would evaluate to two words `'*maria' 'java*'`. This would match a few packages... but not _mariadb-java-client-2.3.0-1.fc29.noarch_

Now comes the part where I ask for help:
Transforming it to `'*maria*' '*java*'` will match it, though it will print all packages which are involved with either of them... a lot. _(It's a union)_
Transforming it to `'*maria*java*'` will be close. but now the order matters.

To get identical results as with archlinux, we need to transform it to  `'*maria*java*' '*java*maria*'`

In other words, we need all permutations of `$*`, and could then connect them with spaces and *
How do we do that? And in bash? Some thoughts
- In a loop. ${!n} would give the n'th argument
- single quotes above are only for demonstration
A lot of useful packages come from [Cask](https://github.com/Homebrew/homebrew-cask), which is now included as part of Homebrew itself.

To use them from Homebrew, you are supposed to use `brew cask` instead of just `brew`. For example, the correct command to install gimp would be: `brew cask install gimp`

Here is an example of pacapt failing to install gimp:

`$ pacapt -S gimp`
```
Error: No available formula with the name "gimp"
It was migrated from homebrew/core to homebrew/cask.
You can access it again by running:
  brew tap homebrew/cask
And then you can install it by running:
  brew cask install gimp
```


This adds a support for Void Linux... and it should be more than enough.

I'd like get some eyeballs on this... Help, testing, opinions, discussions, etc.

* I don't know what to do with variables like `$_TOPT`.
└── I leave one in `xbps_S` because it's also in other scripts.
* I can't run `xbps_Qet` which seems to be in line with `pacman -Qet`.
* Need help with `xbps_S_asdeps`. I'm guessing we want some `$OPT` ?
* Need help with `xbps_D_asexplicit`. I'm guessing we want some `$OPT` ?
* Anything else that might need to be fixed.

I'm new to Void Linux so I want to play around with it using `pacapt`. Many thanks. :-)
Is this something that you're ever planning to do? Honestly, this would make this a lot more usable for me, because it'd let me do things like `pacapt -R $(pacapt -Qsq blahstuff)` which is a lot more intuitive than having to parse the output further. I know it'd require a bit of text manipulation, and that's not Bash's strong suite. (I'm honestly not sure why people write such large projects in Bash :P )

If this is something you plan to do, maybe you should add it to the automatically generated table. I _really_ hope it is, as it'd make things a ton easier. You accept pull requests? You're probably a lot better at me at coding in Bash than I am, but I could give implementing this a try if no one else wants to.

Hi @icy,

Do you know if shell completion is implemented in pacapt? If not, (and if it's doable for me) I could start working on it as I really like being able to do this with native apt and pacman binaries.

What do you think?

I would like to keep the top level package name.
If this script support -Qe will be better.
