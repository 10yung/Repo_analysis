because it's otherwise going to a "create new page", and this is how it's actually spelled. :)
running tests `rake test` on a rails project we have started seeing this warning: 

/Users/xxx/.rvm/gems/ruby-2.2.4@projectname/gems/spork-1.0.0rc4/lib/spork.rb:83: warning: assigned but unused variable - method_name_with_spork

https://github.com/sporkrb/spork/blob/master/lib/spork.rb#L83

We can ignore warnings in multiple ways but wanted to at least notify this project about it.

it shows in 'lookup_ring_any' : : RingNotFoundRingNotFound ( RuntimeError() RuntimeError
![0](https://cloud.githubusercontent.com/assets/16144214/15450023/57746d08-1f44-11e6-93e0-5c16d91af2d5.png)

previous implementation would always return true: declaring `Spork::Test::Framework::RSpec < Spork::TestFramework` causes `defined?(RSpec)` to always be true within the scope of `Spork::Test::Framework::RSpec`. see [this gist](https://gist.github.com/sshao/e8c975ae4a45b2fdf512) for a pure ruby reproduction of this behavior.

the spork spec suite already contains tests for rspec1 support, but did not catch this bug because [the tests stub the `rspec1?` method](https://github.com/sporkrb/spork/blob/224df492657e617a0c93c0319e78f0eefee5b636/spec/spork/test_framework/rspec_spec.rb#L16). I couldn't think of a way to fix the tests to catch this behavior, as it would require removing/stubbing out the `::RSpec` constant for that example, but since the test suite itself uses RSpec 2 to run, removal of `::RSpec` would then break the test runner.

guard/guard-spork#134

**GEM VERSIONS**
Rails 4.2.0
ruby 1.9.3p547 (2014-05-14) [x86_64-linux]
rspec-core (3.1.7)
guard (2.11.1)
guard-compat (1.2.0)
guard-spork (2.1.0)
spork (1.0.0rc4)
spork-rails (4.0.0)
spork-testunit (0.0.8)

I have not used RSpec since December, when our app was still Rails 3. Since, we've upgraded to Rails 4 and updated the necessary gems. I have not changed anything in the `Guardfile`, `.rspec`, or `spec/spec_helper.rb` files yet.

When I run `bundle exec guard` like I used to, I receive no error (except for Rails-specific deprecation warnings). When I switch to another tab in my terminal, I run `bundle exec rspec spec/features/admin/login_spec.rb`. I receive the following error/backtrace:

```
Exception encountered: #<NameError: uninitialized constant RSpec::Core::CommandLine>
backtrace:
/usr/local/lib/ruby/gems/1.9.1/gems/spork-1.0.0rc4/lib/spork/test_framework/rspec.rb:11:in `run_tests'
/usr/local/lib/ruby/gems/1.9.1/gems/spork-1.0.0rc4/lib/spork/run_strategy/forking.rb:13:in `block in run'
/home/hstevens/.bundler/ruby/1.9.1/spork-224df492657e/lib/spork/forker.rb:21:in `block in initialize'
/home/hstevens/.bundler/ruby/1.9.1/spork-224df492657e/lib/spork/forker.rb:18:in `fork'
/home/hstevens/.bundler/ruby/1.9.1/spork-224df492657e/lib/spork/forker.rb:18:in `initialize'
/usr/local/lib/ruby/gems/1.9.1/gems/spork-1.0.0rc4/lib/spork/run_strategy/forking.rb:9:in `new'
/usr/local/lib/ruby/gems/1.9.1/gems/spork-1.0.0rc4/lib/spork/run_strategy/forking.rb:9:in `run'
/home/hstevens/.bundler/ruby/1.9.1/spork-224df492657e/lib/spork/server.rb:49:in `run'
/usr/local/lib/ruby/1.9.1/drb/drb.rb:1548:in `perform_without_block'
/usr/local/lib/ruby/1.9.1/drb/drb.rb:1508:in `perform'
/usr/local/lib/ruby/1.9.1/drb/drb.rb:1586:in `block (2 levels) in main_loop'
/usr/local/lib/ruby/1.9.1/drb/drb.rb:1582:in `loop'
/usr/local/lib/ruby/1.9.1/drb/drb.rb:1582:in `block in main_loop'
```

I was trying to determine the licenses for my dependencies. I found that the RubyGems API will return the license, but only if it is specified in your gemspec file.

Hello there,

the RSpec Runner for RSpec 3.X has changed again, so I fixed it

Greetings,
-killphi

Rspec 3 support

Been having issues getting files loaded into spork. Anyone else having issues? I'm using the spork-rails gem I added all the spork preforks into my `spec/rails_helper.rb` file and still nothing loaded.

For example, the last run of `rspec` was 3 minutes and 14 seconds after I'd started Spork. 

Rails 4.1.2, latest version of spork and spork-rails. Using RSpec and Capybara.

![screen shot 2014-06-14 at 19 26 30](https://cloud.githubusercontent.com/assets/3407996/3279802/91afc004-f41b-11e3-8b61-ac6c050fa82e.png)
