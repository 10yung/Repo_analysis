https://docs.spring.io/spring/docs/5.2.3.RELEASE/spring-framework-reference/core.html#expressions-ref-functions
Is there a recommended way for a `Rule` to halt the firing process of `InferenceRulesEngine`?

Currently I'm clearing out the `Facts` map with `.asMap().clear()` but this breaks encapsulation and the law of Demeter, so it isn't a satisfactory solution.

Example:
```
@Rule(name = "early_exit_rule", description = "Halt the InferenceRulesEngine early if we have sufficient info", priority = 99)
public class EarlyExitRule {

    private final Facts facts;

    public EarlyExitRule(Facts facts) {
        this.facts = facts;
    }

    @Condition
    public boolean when(@Fact("should_exit_early") boolean shouldExitEarly) {
        return shouldExitEarly;
    }

    @Action
    public void then() throws Exception {
        System.out.println("should_exit_early == true -> halt the InferenceRulesEngine");
        // Clear out all other facts to early-exit the inference process
        facts.asMap().clear();
    }
}
```
Hi, [QLExpress](https://github.com/alibaba/QLExpress) is an open source expression language from Alibaba. Can you consider extending support?

I have an json object like.

{
	"status": "success",
	"payload": {
		"list": [{
				"employeeId": "null"	
			}]	
	},
	"description": null,
	"metadata": null
}


And I am trying to update employeeId with SPEL Expression "['payload']['list'][0]['employeeId']".
Its working fine.

Now I have one more Expression like "['payload']['list'][1]['employeeId']". But original list property has only one object on 0th index.

So I want to add new object on index 1 using this "['payload']['list'][1]['employeeId']" expression.
Is it possible through this ?

Please suggest same or alternative.




It's not hard to find your way around after few minutes, but IMHO it would help if the [composites rules wiki section](https://github.com/j-easy/easy-rules/wiki/defining-rules#composite-rules) mentioned that you need to explicitly add the dependency to `easy-rules-support`.

Apologies in advance if I have missed some point.
Hi,

I'm considering using `easy-rules`in a project and one important requirement is to be able to get some sort of *reasoning stack* from every evaluated rule - this is called *audit* in [rulebook](https://github.com/deliveredtechnologies/rulebook).

For example, for illustration purposes let's say I have a composite rule `FlightRule` with these sub-rules:

- `SameDateRule` - generic rule to evaluate  whether a date equals to another date and takes these facts as input:
  - `inputDate` - in the context of evaluating a flight, it would be the flight's date
  - `expectedDate` - the date to compare with (reference)
- `RouteRule` - evaluates whether a flight operates a given route and takes these facts as input:
  - `inputRoute` - the flight route
  - `expectedRoute` - the route to compare with (reference)

If I executed `FlightRule`, I'd like to have the information of which conditions where met and which didn't for debugging/auditing purposes. After reading `easy-rules` wiki and some issues, I can think of the following strategies:

- Logging - not ideal, there will be too many log entries because there will be thousands of rules being evaluated in a matter of hours
- Implementing a custom `RuleListener` - seems cleaner but I will be lacking context in the scenario of complex composite rules (which I will have)
- Implementing a custom wrapper of `Rule` that has the capability of returning a result (similar as explained [here](https://github.com/j-easy/easy-rules/wiki/faqs#2-i-would-like-to-return-a-value-upon-a-rule-execution-how-to-do-that)) that is capable of generating composite results from sub-rules; I guess this may require wrapping or extending the `RulesEngine`too...

If I have elaborated properly my use case/requirement, I'd love to hear some advice in this regard.

Many thanks in advance :)
Lambda expressions are not evaluated in condition. 

I get following errors for expression below:
 bs.getB().getR().getENames().entrySet().stream().allMatch(entry -> entry.getValue().dayCatPDi.size() == 5)
....
[Line: 1, Column: 105]
at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:305)
at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:67)
at org.mvel2.MVEL.analyze(MVEL.java:680)
at org.mvel2.compiler.PropertyVerifier.getMethod(PropertyVerifier.java:526)
at org.mvel2.compiler.PropertyVerifier.analyze(PropertyVerifier.java:135)
at org.mvel2.compiler.ExpressionCompiler.verify(ExpressionCompiler.java:399)
at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:281)
at org.mvel2.util.ParseTools.subCompileExpression(ParseTools.java:2083)
at org.mvel2.ast.TypedVarNode.<init>(TypedVarNode.java:52)
at org.mvel2.compiler.AbstractParser.procTypedNode(AbstractParser.java:1461)
at org.mvel2.compiler.AbstractParser.nextToken(AbstractParser.java:842)
at org.mvel2.compiler.AbstractParser.nextTokenSkipSymbols(AbstractParser.java:241)
at org.mvel2.compiler.ExpressionCompiler._compile(ExpressionCompiler.java:164)
at org.mvel2.compiler.ExpressionCompiler.compile(ExpressionCompiler.java:67)
at org.mvel2.MVEL.compileExpression(MVEL.java:810)
at org.jeasy.rules.mvel.MVELAction.<init>(MVELAction.java:65)
at org.jeasy.rules.mvel.MVELRule.then(MVELRule.java:122)
at org.jeasy.rules.mvel.MVELRuleFactory.createSimpleRule(MVELRuleFactory.java:195)
at org.jeasy.rules.mvel.MVELRuleFactory.createRule(MVELRuleFactory.java:184)
at org.jeasy.rules.mvel.MVELRuleFactory.createRules(MVELRuleFactory.java:146)
at org.jeasy.rules.mvel.MVELRuleFactory.createRules(MVELRuleFactory.java:133)
Hi

We have problem with identifying/handling errors on a condition execution. 
Exceptions in `MVELCondition` are suppressed and can't be handled in `onFailure(...)`  from `RuleListener`.

Code in `MVELCondition ` doesn't re-throw exceptions. The code example:

```
public boolean evaluate(Facts facts) {
        try {
            return (Boolean)MVEL.executeExpression(this.compiledExpression, facts.asMap());
        } catch (Exception var3) {
            LOGGER.error("Unable to evaluate expression: '" + this.expression + "' on facts: " + facts, var3);
            return false;
        }
    }
```

Similar issue was described here https://github.com/j-easy/easy-rules/issues/194 but in this time it is related to `MVELCondition`.  As I see, it was fixed already for `MVELAction`. 
Could you please help us in this situation? Thanks.