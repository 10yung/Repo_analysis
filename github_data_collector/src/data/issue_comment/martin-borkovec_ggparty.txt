Just because I tried another example. Maybe this is helpful for testing or the vignette:

``` r
# devtools::install_github("mmostly-harmless/ggparty")

library("ggparty")
#> Loading required package: ggplot2
#> Loading required package: partykit
#> Loading required package: grid
#> Loading required package: libcoin
#> Loading required package: mvtnorm
data("PimaIndiansDiabetes", package = "mlbench")

tr <- ctree(diabetes ~ glucose + age,
            data = PimaIndiansDiabetes)
plot(tr)
```

![](https://i.imgur.com/KAj3e5e.png)

``` r

add_info <- function(data, party) { 
  sid <- party$node$split$varid
  if(is.null(sid)) {
    NA
  } else {
    pval <- round(info_node(party$node)$p.value, 3)
    if(pval == 0) {
      pval <- "p < 0.001"
    } else {
      pval <- paste("p =", pval)
    }
    
    paste0(names(party$data[sid]), 
           " (", min(party$data[, sid]), ", ",  max(party$data[, sid]), ")\n",
           pval)
  }
}

names(pdat <- ggparty:::get_plot_data(tr))
#>  [1] "id"                    "x"                    
#>  [3] "y"                     "parent"               
#>  [5] "birth_order"           "breaks_label"         
#>  [7] "info"                  "info_list"            
#>  [9] "splitvar"              "level"                
#> [11] "kids"                  "nodesize"             
#> [13] "p.value"               "horizontal"           
#> [15] "x_parent"              "y_parent"             
#> [17] "nodedata_diabetes"     "nodedata_glucose"     
#> [19] "nodedata_age"          "nodedata_fitted_nodes"

## plot without figure
p <- ggparty(tr, add_vars = list(linfo = add_info)) + 
  geom_edge() + 
  geom_edge_label() + 
  geom_node_label(aes(label = linfo),
                  ids = "inner") + 
  geom_node_label(aes(label = paste("n =", nodesize)), 
                  nudge_y = 0.03,
                  ids = "terminal") 
p
```

![](https://i.imgur.com/KZBfsLK.png)

``` r

## plot with bars
p + geom_node_plot(gglist = list(geom_bar(aes(x = "", fill = !!tr$terms[[2]]), 
                                          position = position_fill()), 
                                 theme_classic(),
                                 theme(axis.title = element_blank(), 
                                       axis.ticks.x = element_blank())))
```

![](https://i.imgur.com/EjgufRD.png)

``` r


## plot with bars of size according to n
p + geom_node_plot(gglist = list(geom_bar(aes(x = "", fill = !!tr$terms[[2]]),
                                     position = position_fill()),
                            theme_void()),
              size = "nodesize")
```

![](https://i.imgur.com/f1Ek91A.png)

``` r

## plot with absolute counts
ggparty(tr, add_vars = list(linfo = add_info)) + 
  geom_edge() + 
  geom_edge_label() + 
  geom_node_label(aes(label = splitvar),
                  ids = "inner") + 
  geom_node_plot(
    shared_legend = FALSE,
    gglist = list(geom_bar(aes(x = !!tr$terms[[2]], 
                               fill = !!tr$terms[[2]])),
                  theme_minimal(),
                  theme(legend.position = "none"))
  )
```

![](https://i.imgur.com/7ZXtfW9.png)

<sup>Created on 2019-04-15 by the [reprex package](https://reprex.tidyverse.org) (v0.2.1)</sup>

@mmostly-harmless you asked me to take a look at the vignette. Here are my comments. None of these are crucial. So don't feel obliged to incorporate them. All in all I like the vignette :fireworks: .

- [ ] I am wondering if it would be easier to start with a `ctree()`-example rather than one where you create the tree yourself. 

https://github.com/mmostly-harmless/ggparty/blob/83539bd0a98b2a5f8c20b1feffae935945e34a0a/vignettes/ggparty-graphic-partying.Rmd#L138-L150

- [ ] One of the comments below shows after the plot. Could be nicer. Maybe write it in text rather than in comment?

https://github.com/mmostly-harmless/ggparty/blob/83539bd0a98b2a5f8c20b1feffae935945e34a0a/vignettes/ggparty-graphic-partying.Rmd#L208-L214

- [ ] Section *Additional Data* does seem quite advanced for this early in the vignette. I would first show a couple of simple examples. Maybe even have a separate vignette for this?

- [ ] When are predictions possible?

https://github.com/mmostly-harmless/ggparty/blob/83539bd0a98b2a5f8c20b1feffae935945e34a0a/vignettes/ggparty-graphic-partying.Rmd#L437-L439

- [ ] Maybe show the *Autoplot Methods* earlier in the vignette?

Just another idea! Since the plots are created via ggplot, I think it could be really interesting to use gganimate or similar to prepare stepwise animations of a tree unfolding.

I think this could be really cool, when communicating the implications of a tree to others. Ideally a tree would unfold per keypress or so similar to: http://www.r2d3.us/visual-intro-to-machine-learning-part-1/ (Scroll down to "Growing a tree").

Let me know, if there is sth I could help with.
I hope you don't mind my little feature suggestions. :)

I really like the approach taken by https://github.com/parrt/dtreeviz which visualizes Decision trees in a very clear and pleasing way. I like the visualization of cutpoints, but also the possibility to easily glimpse the size of the terminal nodes.

Good luck with the project!
When using partykit, I often run into this problem: https://stackoverflow.com/questions/16581587/how-do-i-jitter-the-node-split-strings-in-plotting-ctree-output-from-partykit

Will you library tackle this problem? :) 

Ps: the project looks really cool already!