Defining the index type, on options, is falling back to gist 

add_hstore_index :people, :info, :type => :gin 

the above example is not creating a type gin index. 


I am using rails 5 and ruby 2.3.1. when i installed activerecord-postgres-hstore  gem i got following error.

/activesupport-5.0.0.1/lib/active_support/core_ext/module/aliasing.rb:37:in `alias_method': undefined method`simplified_type' for class `ActiveRecord::ConnectionAdapters::PostgreSQLColumn' (NameError)
    from /activesupport-5.0.0.1/lib/active_support/core_ext/module/aliasing.rb:37:in`alias_method_chain'.

~/.rvm/gems/ruby-2.3.1@global/gems/activesupport-4.2.6/lib/active_support/core_ext/module/aliasing.rb:32:in `alias_method': undefined method`simplified_type' for class `ActiveRecord::ConnectionAdapters::PostgreSQLColumn' (NameError)

This is Rails 3.2.

I'm getting the following error, but only when the method is executed via Sidekiq:

```
2014-08-14T15:14:25.255Z 23335 TID-ovtw9n32c WARN: undefined method `scan' for {}:Hash
2014-08-14T15:14:25.255Z 23335 TID-ovtw9n32c WARN: /Users/me/myapp/code/myfitment/.gems/ruby/1.9.1/gems/pg-hstore-1.2.0/lib/pg_hstore.rb:24:in `load`
```

It's triggered two ways:

1) By referencing the HStore field on the model instance
2) By calling "save" on the model instance

The error does not occur in the console. This tells me it is some kind of deserialization issue coming from Sidekiq. I can't decide whether Sidekiq is doing the serialization of the HStore field wrong, or if activerecord-postgres-hstore is doing the deserialization wrong.

The workaround is to call "self.reload" in the model instance method that is executed via Sidekiq's "delay" method.

I fetch record with hstore column and do `row.save`

It is always issue UPDATE sql, is it the default behavior?
Any way to fix it?

I have Alert and AlertSub. AlertSub has_many :alerts.

``` ruby
[56] pry(main)> Alert.first.data
  Alert Load (0.6ms)  SELECT "alerts".* FROM "alerts" LIMIT 1
=> {"toto"=>"tata"} # type hash, ok
```

``` ruby
[57] pry(main)> Alert.select('data').all.first.data
  Alert Load (0.4ms)  SELECT data FROM "alerts"
=> {"toto"=>"tata"} # type hash, ok
```

``` ruby
[58] pry(main)> Alert.select('data as d').all.first.d
  Alert Load (0.5ms)  SELECT data as d FROM "alerts"
=> "\"toto\"=>\"tata\"" # string, not ok
                                 # .class says String
```

``` ruby
[61] pry(main)> AlertSub.joins(:alerts). # :alerts is just a has_many :alerts in class AlertSub
[61] pry(main)* select('alerts.id, alerts.data').
[61] pry(main)* where('alert_subs.user_id = 1').all.first.data
  AlertSub Load (0.7ms)  SELECT alerts.id, alerts.created_at, alerts.param, alerts.data::hstore FROM "alert_subs" INNER JOIN "alerts" ON "alerts"."alert_sub_id" = "alert_subs"."id" WHERE (alert_subs.user_id = 1)
=> "\"toto\"=>\"tata\"" # string, not ok
```

It looks like when I use the method `.select` with has, or with a join, I get back a string instead of a hash for the hstore value.

In my model, I do have the line: `serialize :data, ActiveRecord::Coders::Hstore`

How can I get back a hash, event when I use a .select ?

The hstore indexes are not saved to schema.rb correctly.. 

instead of saving an `add_hstore_index` line it simply creates an `add_index` line, thus the 'gin' index isn't created.

A related issue is that the add_hstore_index :table, :column, :type => :gin doesn't work. (the AR method add_index_options doesn't support a :type option, only :name and :unique). 

We are running Rails 3.2.x (going to 4.0 right now isn't an option.. though it's on our roadmap)

When I embed a value directly into a query as so:

Bid.where("miscellaneous @> ('model_number=>ABC-123')") 

SELECT "bids".\* FROM "bids" WHERE (miscellaneous @> ('model_number=>ABC-123'))

the query works. But when I try to interpolate with a ? it adds an extra set of single quotes which raises an error:

Bid.where("miscellaneous @> ('model_number=>?)", 'ABC-123') 
SELECT "bids".\* FROM "bids" WHERE (miscellaneous @> ('model_number=>'ABC-123''))
PG::SyntaxError: ERROR:  syntax error at or near "ABC"

What am I missing?

such as below:

```
def change
   add_column :contacts, :user_id, :integer
   add_column :contacts, :data, :hstore
   add_hstore_index :contacts, [:user_id, :data]
end
```

I got a syntax error, assuming that AR didn't know how to serialize the hash into an hstore query part and saw a few posts saying I needed to add this:
`serialize :offer_providers, ActiveRecord::Coders::Hstore`
which I initially avoided because I want to select on rows with my hstore column null.

As I suspected, this does set the hstore to empty as opposed to null.  How can I get the serialization but not have it save {} when I don't have any values for the hstore?
