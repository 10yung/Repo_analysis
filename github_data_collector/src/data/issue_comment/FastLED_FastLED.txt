Hello,

you already ship 6 examples to use multiple LED strips with FastLED. However all the examples use strips of the same LED length. Being totally unfamiliar with FastLED this led me to the false conclusion that FastLED has a limitation, that I need to have strips of the same length.

My suggestion would be to add one example where Length of the strips are different.

E.G.: https://pastebin.com/3UjzA66a (just an alteration of your examples)
Has an 12 LED Ring and a 5 LED Strip 




The pins here were based on an early draft of the Nano 33 IOT package where the pin definitions were mislabeled in the comments - https://github.com/arduino/ArduinoCore-samd/blob/08629f90b1f803017cc526c4cbbe3eaaccc8f062/variants/nano_33_iot/variant.cpp

This has recently been fixed - 
https://github.com/arduino/ArduinoCore-samd/blob/master/variants/nano_33_iot/variant.cpp

This change uses the correct pin definitions.

I chose to use the last SPI, but we might want to change that to something else, as it's used by the WiFi module and I'm not exactly sure what FastLED plans to use it for, but we may run into conflicts.
This pull request has a few substantial changes. The main goal is to eliminate interrupt-related problems that cause flashy weirdness when FastLED is used in conjunction with the WiFi and web support libraries.

Change 1: All RMT channels are started at the same time. In the previous version, we would fill each channel buffer and then start it immediately. But in cases where there are many parallel LED strips, it looks like the earlier channels were already getting refill interrupts while the later channels were still initializing their buffers, causing timing errors. The symptom is that the higher the channel number, the worse the timing errors.

Change 2: Each interrupt encodes exactly 1 pixel's worth of data, simplifying the fill routine and speeding it up.

Change 3: The refill interrupt is created at level 3. I'm not sure if this makes a huge difference, but we really don't want LED output to be disrupted unless there is a damn good reason.
Hello i am new to FastLed and I am trying to control a WS2812 with ardunio firefly & grasshopper. I want to control the LED to light up according to the integer value from serial read from firefly.

However the error message display primary expression before int.

Please advice how to fix this issue, Thank you!



#include <FastLED.h>
#include "FastLED.h"
#define NUM_LEDS 30
#define DATA_PIN 9
#define BRIGHTNESS  1000
#define NUM_LEDS 30
#define DATA_PIN 9
#define CLOCK_PIN 13

CRGB leds[NUM_LEDS];
      

void loop() { 
  
    while (Serial.available() == 0);
    int val = Serial.read()-'0';
    
  for(int led > 0; led < 30; ) { 
  // Turn the LED on, then pause
  leds[int] = CRGB::Blue;
 
  FastLED.show();
  delay(500);
  // Now turn the LED off, then pause
  leds[0] = CRGB::Black;
  FastLED.show();
  delay(500);
  }
}

Until the depot resumes taking PRs, I'm integrating those needed for the nrf52 series of chips into [my nrf52 fork](https://github.com/henrygab/FastLED/tree/nrf52_fixes), as a way to help simplify getting people up and running during this transitional time.

Currently integrated PRs:
* [x] #946 Missing underscores in `_FL_DEFPIN` causing compilation fail (regression from #866) (Issue #938)
* [ ] #900 Fix compilation fail for NRF52832 (and other single-port NRF52 chips) (Issue #919)


Feel free to reference additional NRF52 related PRs within this issue, that you'd like to see integrated in the interim.

fastled.io is hosted on GitHub Pages and HTTPS can be enabled easily.
## My setup
* ESP8266 powered by USB, common ground with LED strip
* 120 WS2812B LED's powered by a 5V 10A power supply
* D5 (GPIO14) as data pin

## The issue
Currently I'm working on a project that uses the ESP8266 as a websocket and webserver, I want to run the LED's at a certain FPS using the `EVERY_N_MILLISECONDS( 1000 / FPS ) { }` function.

I first ran all my tests without this function and everything worked as expected. Then I started to add this function (I'd prefer a non-blocking function so the websocket can still receive data) and I noticed that the LED strip started to bug out. I started debugging the websocket by adding a non-blocking delay, a blocking delay but it didn't help. I started playing around with the code more and I figured out that it was the FastLED itself (or maybe a combination with the WebSocket?). Whenever I don't have any waiting function and always call my FastLED function in the `void loop()` it'll work just fine. But whenever there's a delay (doesn't matter whether it's blocking or non-blocking) the LED strip starts to bug out.

For example (not full code, left out WiFi setup and Webserver/websocket parts for readability, this code works as expected):
```c
// LED strip settings
#define DATA_PIN    14
#define LED_TYPE    WS2812B
#define COLOR_ORDER GRB
#define NUM_LEDS    120
#define MILLI_AMPS  10000

void loop() {
  int frameTime = 1000 / framerate;
  server.handleClient();
  webSocket.loop();
  juggle();
}

void juggle() {
  // eight colored dots, weaving in and out of sync with each other
  fadeToBlackBy( leds, NUM_LEDS, 20);
  byte dothue = 0;
  for( int i = 0; i < 8; i++) {
    leds[beatsin16( i+7, 0, NUM_LEDS-1 )] |= CHSV(dothue, 200, 255);
    dothue += 32;
  }
}
```
This code runs as expected, the lights show up, no issues at all, I do receive the websocket data but I simply don't use it yet.

Now if I use this code:
```c
void loop() {
  int frameTime = 1000 / framerate;
  server.handleClient();
  webSocket.loop();
  EVERY_N_MILLISECONDS( frameTime ) {
    juggle();
    //Pattern(1);
  }
}
```

I noticed that it doesn't work anymore, same for when I run my own pattern, it will work correctly without the delay, but if I use a delay it doesn't work anymore.

### What happens
Juggle shows 8x dots that go back and forward while they leave a nice faded tail, whenever they cross it combines the colors. 
With the 2nd code snippet it does somehow the same but there's a black dot in between the trails and each trail is almost as twice as long. I guess there's a FastLED clock running somewhere in the background that is used in those functions. I hoped `FastLED.delay()` would solve it, but it didn't.

If the issue is unclear I'll try to record a video.

I hope anyone could help me out here or try the juggle animation themselves with the  `EVERY_N_MILLISECONDS( framerate) { }` to see if they have the same issue. 
I recently received an order from Ray Wu’s Store.  I tested the following products:

- WS2812B 16*16pixels led digital flexible panel light
- 4m 60LEDs/m DC5V addressable WS2812B led pixel strip
- 1m 144LEDs/m DC5V addressable WS2812B led pixel strip

In testing these products with my FastLED test sketch (which was slightly modified for the number of pixels and using the WS2812B chipset):

https://gist.github.com/chemdoc77/52ded62fc801247cc648b1eb84f9d2ca

I have found that they work as expected with the Arduino Nano, Wemos D1 mini Pro and the Lolin D32 MCUs.  They do not work correctly with the Teensy 3.2 MCU at CPU speed of 96 MHz but do work correctly when I lower the Teensy 3.2 CPU to CPU speed of 48 MHZ. 

For the strips, the cd77_colorwipe_dot function did not work properly (five or more pixel lite up at a time, not only one pixel at a time as it should) but the fill_solid function did work correctly at the 96 MHz CPU speed.  For the 16*16 panel, it did not work correctly at all for the fill_solid function or for the cd77_colorwipe_dot function at the 96 Mhz CPU speed.  

All of the products do not work correctly at all with the Teensy 4.0 MCU at any CPU speed using my new product test sketch for the Teensy 4.0 MCU:

https://gist.github.com/chemdoc77/8b50f86d3bef8e777ccca62759efbd2f

My prior WS2812B strips and panel that I purchased from Ray Wu’s Store in 2018 work correctly with the Teensy 3.2 at 96 MHz, with the Teensy 4 and with the other aforementioned MCUs.
When I contacted Ray Wu about this, Ray Wu sent me an email stating:

“the WS2812B has been upgraded to the V5 version this year, so it is a little different than before.”

Has anyone else experienced this type of problem with recently purchased WS2812B products?

Does anyone have any suggestions on how to make these products work at the higher CPU speed for the Teensy 3.2 and to work for the Teensy 4.0?

Here are the pictures of the three products:

- https://drive.google.com/open?id=1zytX6c1ofnHFezpDu2UfzirgvtR-P3ce
 
- https://drive.google.com/open?id=1Mj2qqZmkSlQJ0Pg4CxOB2oe8o1_y1yfH
 
- https://drive.google.com/open?id=1UjQwyuuz8c9JEcLjMN0Zax2NrPM0tt69
 
 Use the zoom feature at the bottom in google pictures to get a closer look.

Here are the links to the three products that were just purchased from Ray Wu’s Store:

1M long 144leds/m WS2812B(5050 rgb led with WS2811 IC built-in) led pixel strip,DC5V,waterproof in silicon tube;BLACK PCB:

https://www.aliexpress.com/item/2047880507.html?spm=2114.12010615.8148356.5.98085aa9zhZEy1

4m 60LEDs/m DC5V addressable WS2812B led pixel strip,waterproof in silicon tube,60pcs WS2812B/M with 60pixels;BLACK PCB:

https://www.aliexpress.com/item/948302882.html?spm=2114.12010615.8148356.70.755656e0okcfsl

P10mm WS2812B 16*16pixels led digital flexible panel light,size:17cm*17cm,DC5V input:

https://www.aliexpress.com/item/2038897589.html?spm=2114.12010615.8148356.3.397d25eetxU2yI

Also. I just tested the 4 meter - 60LEDs/m strip with the Teensy 3.2 at 48MHz and: 

It does work with no level shifter and a 3 ft length of 18 gauge cable with JST connectors between the Teensy and the strip.

It does not work at all with no level shifter and a 15 ft length of 18 gauge cable with JST connectors between the Teensy and the strip.

It does work with level shifter and a 15 ft length of 18 gauge cable with JST connectors between the Teensy and the strip.

I am using the following two resistor protection circuit between the Teensy 3.2 and the LEDS as seen in:

https://forums.adafruit.com/download/file.php?id=13633&sid=6aff0fe6d53a963e8920def6d868e0d7

I am assuming that without the level shifter and the longer cable, the “D in” voltage drop to the LED is such that the strip did not work.  While with the level shifter and the longer cable there is a “D in” voltage drop but the “D in” voltage at the chip is still high enough due to the level shifter so that the strip did work. I will continue using the level shifter for insurance.


This change fix the issue with the random red pixel while using the rainbow effect based on issues #668 and #942 
I would like you to add support for WS2815.
Using WS2813 (closest relative I found) is that sometimes the LEDs show too bright colours. This happens because the timing of a "0" is much shorter for this chipset, resulting in the LEDs sometimes mistakenly decodes a 0 as a 1. 

For WS2813, using ESP8266, FastLED outputs a 0 as a roughly 390ns pulse. WS2815 wants between 220 and 380. So most often it works, but using longer cables, different voltages, temperatures, batches/manufacturers it sometimes goes wrong.

Reference:
Oscilloscope picture of ESP8266 using FastLED sending WS2813 data
![bild](https://user-images.githubusercontent.com/14166139/70945590-d3721700-2055-11ea-8e38-e685b883ff3a.png)

WS2815 manual
www.normandled.com/upload/201808/WS2815%20LED%20Datasheet.pdf
![bild](https://user-images.githubusercontent.com/14166139/70945661-f8668a00-2055-11ea-99ec-b5855f3bb824.png)

T´hank you!
