## Issue

If a programmer supplied assumption (assume!, etc.) is provably false, this should result in a diagnostic and the assumption should be ignored.

## Steps to Reproduce

See #389 

## Expected Behavior

A diagnostic message pointing out that the second assumption is provably false.

## Actual Results

The false assumption is asserted to the prover.

## Issue

Hey! I was playing around with MIRAI this weekend, but I hit an issue trying to get MIRAI to check itself on the latest master. After poking around a bit, it looks like there's a foreign contract or blacklist missing? Specifically, it looks like MIRAI is complaining about something `Unimplemented` for `rustc::hir::def_id::DefId as std::hash::Hasher`. I'm sorry if that's a bit vague; I'm not very familiar with MIRAI :)

## Steps to Reproduce

Run `validate.sh` on current master (c4c58ad6e79779ef00d146aac72d9f313908f496). I also tested on the previous two commits; same problem.

## Results

For completeness, here's the part of log when run with `MIRAI_LOG=trace`: https://gist.github.com/phlip9/6810fe0d4bc829c7de69a36df798628f

Otherwise, here's the relevant part of `validate.sh` where MIRAI checks itself:

```sh
~/dev/MIRAI$ RUSTFLAGS="-Z always_encode_mir" RUSTC_WRAPPER=mirai RUST_BACKTRACE=1 MIRAI_LOG=info cargo build --lib -p mirai
   Compiling mirai v1.0.5 (/Users/philiphayes/dev/MIRAI/checker)
[2020-01-12T01:57:08Z INFO  mirai] MIRAI options from environment: Options { single_func: None, test_only: false, diag_level: RELAXED }
[2020-01-12T01:57:08Z INFO  mirai] MIRAI options modified by command line: Options { single_func: None, test_only: false, diag_level: RELAXED }
[2020-01-12T01:57:08Z INFO  mirai::callbacks] Processing input file: checker/src/lib.rs
[2020-01-12T01:57:13Z INFO  mirai::callbacks] storing summaries for checker/src/lib.rs at /var/folders/y7/nfv_8ryx2x78f1gvdv_8rfd1rynvd9/T/mirai_temp_dir.CiiLgkkjcSR1/.summary_store.sled
[2020-01-12T01:57:13Z INFO  mirai::summaries] creating a non default new summary store
[2020-01-12T01:57:13Z INFO  mirai::callbacks] skipping function mirai.abstract_value._IMPL_SERIALIZE_FOR_AbstractValue as it is not public
# ... snip ...
[2020-01-12T01:57:13Z INFO  mirai::callbacks] skipping function mirai.constant_domain.implement_constant_domain.le.closure.closure.closure.closure.closure as it is not public
[2020-01-12T01:57:13Z INFO  mirai::callbacks] skipping function mirai.constant_domain.implement_constant_domain.gt.closure.closure.closure.closure.closure as it is not public
[2020-01-12T01:57:13Z INFO  mirai::callbacks] skipping function mirai.constant_domain.implement_constant_domain.ge.closure.closure.closure.closure.closure as it is not public
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is std::option::Option<&str>
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is  as Some(1)
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is [type error]
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 0
[2020-01-12T01:57:13Z INFO  mirai::visitors] t is (T,)
[2020-01-12T01:57:13Z INFO  mirai::visitors] selector is 1
[2020-01-12T01:57:13Z INFO  mirai::visitors] function log.__private_api_log can't be reliably analyzed because it calls function log.Log.log which has no body and no summary (foreign fn argument key: __dyn_dyn log::Log).
error: internal compiler error: src/librustc/traits/codegen/mod.rs:53: Encountered error `Unimplemented` selecting `Binder(<rustc::hir::def_id::DefId as std::hash::Hasher>)` during codegen

thread 'rustc' panicked at 'Box<Any>', src/librustc_errors/lib.rs:892:9
stack backtrace:
   0: <unknown>
   1: <unknown>
# ... snip ...
  89: <unknown>

note: rustc 1.42.0-nightly (0de96d37f 2019-12-19) running on x86_64-apple-darwin
note: compiler flags: -Z always_encode_mir -C debuginfo=2 -C incremental --crate-type lib

query stack during panic:
#0 [codegen_fulfill_obligation] checking if `std::hash::Hasher` fulfills its obligations
end of query stack
error: aborting due to previous error
error: could not compile `mirai`.
```

## Environment

```sh
$ uname -a
Darwin philiphayes-mbp 18.7.0 Darwin Kernel Version 18.7.0: Thu Jun 20 18:42:21 PDT 2019; root:xnu-4903.270.47~4/RELEASE_X86_64 x86_64

$ sw_vers -productName
Mac OS X 10.14.6

$ rustc --version
rustc 1.42.0-nightly (0de96d37f 2019-12-19)

$ cargo --version 
cargo 1.41.0-nightly (626f0f40e 2019-12-03)
```
## Issue

I have been working on porting SMACK Rust regressions to MIRAI to uncover potential issues. The eventual goal is to have a nice publicly available suite of Rust benchmarks.
Along the way I discovered this MIRAI issues, where it appears to be missing the fact that the two assertions in this small example should obviously fail.

## Steps to Reproduce

Run MIRAI on this small example:
```
#[macro_use]
extern crate mirai_annotations;

pub fn main() {
  let a : i32 = result!();
  let b : i32 = result!();
  assume!(4 < a && a < 8); // a in [5,7]
  assume!(5 < b && b < 9); // b in [6,8]
  verify!(36 <= a * b); // a*b in [30,56]
  verify!(a * b <= 49); // a*b in [30,56]
}
```

## Expected Behavior

Both assertions should fail.

## Actual Results

The assertions are not failing.

## Environment

rustc 1.42.0-nightly (0de96d37f 2019-12-19)
MIRAI v1.0.5

I couldn't find the instructions for enabling the static analyzer in the documentation. For example, I want the compiler to raise an error in the following example:

```rust
#[pre(i < a.len())]
#[post(*a[i] == v)]
fn update(a: &mut [Box<i32>], i: usize, v: i32) {
    *a[i] = v + 1;
}
```

Is it possible?
## Issue

Running MIRAI on selection sort which iterates over a range of integers causes "fixed point loop divergence".

## Steps to Reproduce

Test case:
```
fn selection_sort(array: &mut [i32]) {
    let mut min;

    for i in 0..array.len() {
        min = i;

        for j in (i + 1)..array.len() {
            if array[j] < array[min] {
                min = j;
            }
        }

        let tmp = array[i];
        array[i] = array[min];
        array[min] = tmp;
    }
}

fn main() {
    let mut array = [9, 4, 8, 3, -5, 2, 1, 6];
    println!("The initial array is {:?}", array);

    selection_sort(&mut array);
    println!(" The sorted array is {:?}", array);
}
```

Cargo command:
```
RUSTC_WRAPPER=mirai MIRAI_LOG=info cargo check
```

## Expected Behavior

Analysis should reach fixed point without divergence in the loop.

## Actual Results

```
[2019-06-26T22:33:39Z INFO  mirai::callbacks] Processing input file: examples/selection_sort/src/main.rs
[2019-06-26T22:33:39Z INFO  mirai::callbacks] storing summaries for examples/selection_sort/src/main.rs at /Users/rashmimudduluru/MIRAI/target/debug/deps/.summary_store.sled
[2019-06-26T22:33:39Z INFO  mirai::callbacks] outer fixed point iteration 1
[2019-06-26T22:33:39Z INFO  mirai::callbacks] analyzing("selection_sort.selection_sort")
[2019-06-26T22:33:39Z INFO  mirai::summaries] Summary store has no entry for core.slice.implement.len__i32
[2019-06-26T22:33:39Z WARN  mirai::visitors] fixed point loop diverged in body of selection_sort.selection_sort
[2019-06-26T22:33:39Z WARN  mirai::visitors] Fixed point loop took 51 iterations for selection_sort.selection_sort.
[2019-06-26T22:33:40Z INFO  mirai::callbacks] analyzing("selection_sort.main")
[2019-06-26T22:33:42Z INFO  mirai::callbacks]  
[2019-06-26T22:33:42Z INFO  mirai::callbacks] outer fixed point iteration 2
[2019-06-26T22:33:42Z INFO  mirai::callbacks] reanalyzing("selection_sort.selection_sort")
[2019-06-26T22:33:42Z INFO  mirai::summaries] Summary store has no entry for core.slice.implement.len__i32
[2019-06-26T22:33:42Z WARN  mirai::visitors] fixed point loop diverged in body of selection_sort.selection_sort
[2019-06-26T22:33:42Z WARN  mirai::visitors] Fixed point loop took 51 iterations for selection_sort.selection_sort.
[2019-06-26T22:33:42Z INFO  mirai::callbacks] reanalyzing("selection_sort.main")

```

## Environment

Rust version (rustc --version): `rustc 1.37.0-nightly (2fe7b3383 2019-06-19)`

AbstractDomain::implies and AbstracDomain:implies_not use algebraic rules to attempt to figure out at compile time what the values of x => y and x => !y are. The rule is that false is also the way to say "I don't know". These implications are used to eliminate paths and to simplify conditional expressions.

Only a few rules are currently used. Here are some more rules that I've previously used in another project. Better check them with theorem prover, for there may transcription errors.

Note that the rules are recursive and may have exponential complexity unless depth limited.

```
x => x
(x || y) => z if (x => z && y => z)  
(x && y) => z if (x => z || y => z)
!!x => y if x => y
(c ? true : false) => c
(c ? false : y) => (false != z) if y => z, since (c ? false: y) is false unless y is true z is true if y is true
(c ? false : y) => (z != false) if y => z, since (c ? false: y) is false unless y is true z is true if y is true
(c ? x : false) => (false != z) if x => z, since (c ? x : false) is false unless x is true and z is true if x is true
(c ? x : false) => (z != false) if x => z, since (c ? x : false) is false unless x is true and z is true if x is true
(c ? x : false) => z if c => z || x => z
(false != x) => x
(x != false) => x
(0 != x) => x  // not type correct but might happen
(x != 0) => x // not type correct but might happen


!x => !x
(x || y) => !z if (x => !z && y => !z)
(x && y) => !z if (x => !z || y => !z)
!!x => !y if x => !y
x => !y if y => !x
!x => !y if y => x since if y is false x can be any value and if y is true then x must be true
(c ? false : true) => !c
(c ? false : y) => !(z == false) if y => z, since !(z == false) is true if y is true
(c ? false : y) => !(false == z) if y => z, since !(false == z) is true if y is true
(c ? x : false) => !(z == false) if x => z, since !(z == false) is true if x is true
(c ? x : false) => !(false == z) if x => z, since !(false == z) is true if x is true
(c ? x : false) => !z if c => !z || x => !z
(x === y && y !== z) => !(x === z)
(x === y && x !== z => !(y === z)
```
## Issue

Running MIRAI over an entire crate every time it the crate is rebuilt is somewhat painful since every function body is re-analyzed at least once.

An alternative way to is to run MIRAI as part of the linter (see https://doc.rust-lang.org/unstable-book/language-features/plugin.html#lint-plugins and https://github.com/rust-lang/rust-clippy/blob/61aa5c957c219abe1fb2d1b5e51db8b365b4f565/clippy_lints/src/missing_const_for_fn.rs#L105).

It seems that the linter will only call the MIRAI plugin when a function has changed, so the it should be sufficient to invoke the checker in the same way as will be done by #113.


## Issue

Currently a set of constants in checker/src/k_limits.rs provides limits on how much computation MIRAI will do in various places. With these limits in place, largish crates can be analyzed in a somewhat reasonable time frame. The limits do, however, impact on precision and may lead to false negatives. By making these into variables that can be set via command line options, it will become possible to schedule longer runs that may find more issues than more limited runs. The greater precision allowed by such runs can also be used to weed out false positives.

The recommended way to complete this task is to turn the constants in k_limits into the fields of a struct and to provide a constructor that sets the fields to default values, along with a command line processor that updates the values from options in the command line.

The limits struct should then be made part of the visitor state (checker/src/visitor.rs).

Ideally, there should also be a way to set these options to non default values for integration test cases. See also #52.

## Issue

We need more issues. Create some meta issues to spur the creation of more issues.

## Steps to Reproduce

Look at the issues tab.

## Expected Behavior

There should be more issues and meta issues.

## Actual Results

Not enough issues.


## Issue

Some parts of the MIRAI code base are not covered by integration tests. You task here is to find such bits of code and to create an issue for each of them. Ideally follow up with a PR that contains a test case that covers that bit of code.

## Steps to Reproduce

As you read through the code base to get to know it, click on the coverage button so see code coverage. The code coverage tools is not quite perfect, so you might see lines that are marked as not covered when they obviously are, but there will be some cases that are not obviously covered. You can verify that a line of code is not covered by setting a break point on it and running the integration tests from the debugger.

If you are going to follow up with a PR to fix this omission, the next step would be to set some breakpoints in the surrounding covered code to find the test cases that reach then and then try to mutate one or more of those test cases to instead or also reach the uncovered code.

## Expected Behavior

Every executable source line should be reached by an integration test case.

## Actual Results

Some code lines are not so covered.

