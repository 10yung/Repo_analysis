This is not compatible with Rails 6.1.

Due to Zeitwerk, constants in initializers must be specified as String, or wrapped in an `on_load` hook.
Hi,
How can I turn off the logging in production?
It's becoming impossible to read the log files via ssh because the logs scroll so much with every message and every attachment being logged to the production.log file...

Thanks
**UPDATED on Nov.14:**
**The problem is as the title describes, the original post is just an example to explain how the problem impacts my case.**
The information ignored by griddler is the charset information in my example, it is written between the boundary line and email raw body.

> Content-Type: text/plain;  charset=ISO-2022-JP
> Content-Transfer-Encoding: 7bit

Griddler can fetch the text written before the boundary line (in my example it's "----==_mimepart_5d679b0e8920c_bca3fe4beb466ac88238") as raw_header, and the text in email body (in my example it starts from the garbled text as you can see) as raw_body, but sometimes some emails like to put some texts between the boundary line and the raw body (In my example it is the charset information), and it cannot be fetched by griddler now.

The expectation is: DO NOT MISS ANY TEXT IN THE EMAIL SOURCE.

**ORIGINAL POST:**
- The following code is the source code of the email that I received and want to post into my Rails app via griddler. 

- This email is in Japanese and encoded with charset "iso-2022-jp" thus it is probably garbled in your browser. And it is indeed garbled as it shows in my app.

- What I want to do is to fetch the charset information, if it is "iso-2022-jp", then do encode("utf-8", "iso-2022-jp") for the raw_body so that the Japanese can show normally in my app. If it is already "utf-8" then do nothing.

- **The problem is** griddler's #raw_headers attribute can only fetch the information before the boundary line, while #raw_body starts from the line after "Content-Transfer-Encoding: 7bit", thus it seems that I have no way to get the charset information that I want via griddler.

**Could somebody help fix this problem?**

```
Mime-Version: 1.0
Content-Type: multipart/alternative; boundary="--==_mimepart_5d679b0e8920c_bca3fe4beb466ac88238"

----==_mimepart_5d679b0e8920c_bca3fe4beb466ac88238
Content-Type: text/plain;  charset=ISO-2022-JP
Content-Transfer-Encoding: 7bit

$B2q0w8BDj(IR0YO6^<^](B

8$B7n(B31$BF|$O(I"$BLn:Z$NF|(I#$B$G$9!#(I:=D:$B$G$O9qFb30$+$i?7A/$J(ILY(B-(IB$B!"Ln:Z$r<h$jB7$($F$$$^$9!#(B
GAP$BG'>Z$5$l$?>&IJ$r<h$j07$$$r=g<!3HBg$7$F$$$^$9!#>\$7$/$O$3$A$i$r%/%j%C%/(B (PC$B@lMQ(B)$B!#(B
ActionController::Parameters is not a Hash anymore and doesn't behave
like one, since Rails 5.

We need to coerce it to a Hash, since the rest of our codebase expects
it to be a hash and all strings to be properly.
A possible fix for issue https://github.com/thoughtbot/griddler/issues/309.

An example file that reproduces the problem can be provided to the reviewer.
Hello,

First and foremost thank you for creating such an awesome project for email processing. 

The reason why this ticket is created is because there is a particular email that in our production system (using griddler 1.5.2) manifests really slow 80s - 150s execution times for Griddler::EmailParser.extract_reply_body depending on the machine. 

Since this can be theoretically used for denial of service attacks it is preferable to hand over the script that consistently reproduces the problem in a non public channel.

Thanks for letting me know how this issue can proceed.

Regards,
Cristian

     

I am trying to integrate griddler with amazon SES through s3. Using s3 allows for bigger message size / supporting message attachments

The basic flow is the following
- AWS SES receives the emails, writes it down in a s3 bucket with encryption, and sends a SNS notification
- I intercept this SNS notification in a lambda, and my lambda will send a job to some sidekiq queue with the references to the s3 item in the bucket (up to this point it's all serverless)
- I have a Sidekiq worker that will be processing jobs from this queue. Basically my worker receives a job with the s3 bucket + key strings, and will retrieve + decrypt the email from s3 
- Once decrypted, I actually end up with an IO/file that I can convert to a string that contains the content of the email

```
Return-Path: <cyril@example.com>\r\n
Received: from mail-wm1-f42.google.com (mail-wm1-f42.google.com [209.85.128.42])\r\n 
by inbound-smtp.eu-west-1.amazonaws.com with SMTP id 
[...]
Content-Type: multipart/alternative;\r\n 
boundary=\"------------BE6CAE00EDF4F8577083EAD7\"\r\n
Content-Language: en-US\r\n\r\n
This is a multi-part message in MIME format.\r\n--------------BE6CAE00EDF4F8577083EAD7\r\nContent-Type: text/plain; charset=utf-8; format=flowed\r\nContent-Transfer-Encoding: 8bit\r\n\r\n
[My Message]
[...]
```

So basically, I don't need to mount any engine, since I am processing emails asynchronously via queues. 
How would I go about plugging this into griddler ? Actually is there any point in using Griddler at all ? (I thought I could still take advantage of the "reply above this line" and other hash builtin, is it still the case ?)

EDIT : basically I am easily parsing a Mail with `::Mail.new(s3_object)`, what do I do next to leverage other griddler functionalities ?
Hello,

I'm using Griddler to receive email for distribution to a mail list. I'm having trouble reconstructing the inline attachments data, because @email doesn't contain any filename:content-id mapping, as appears in the original message (in the "email_rfc822" param).

For example, an incoming email with an inline attachment has something like this in the original message body:

`--Apple-Mail=_94A907EA-0BDD-4286-8C91-03AC6742495A\r\nContent-Transfer-Encoding: base64\r\nContent-Disposition: inline;\r\n\tfilename=foo.jpg\r\nContent-Type: image/jpeg;\r\n\tx-unix-mode=0644;\r\n\tname=\"foo.jpg\"\r\nContent-Id: <B8377B84-3982-40CD-9B98-A59F11BD2B18>\r\n`

The Content-Id: number appears in the @email.raw_html as the <img src="cid..., but the filename is not mentioned in the <img> tag. For example, the message above would have in @email.raw_html:

`<img apple-inline="yes" id="D80464A6-0219-4BEB-8122-3AD0C36308BB" src="cid:B8377B84-3982-40CD-9B98-A59F11BD2B18" class="">`

As a result, when I resend the message, the image placeholder icon appears inline, with the attachment at the bottom of the email. It would be great if @email.attachments had a field for the Content-Id. Then I could do something like this in my Mailer class:
```
message[:attachments].each do |ad|
  if ad.content_type.include?('image')
    attachments.inline[ad.original_filename] = {
       mime_type: ad.content_type,
       content: File.read(ad.tempfile),
       cid: ad.content_id
     }
  else
    attachments[ad.original_filename] = {
       mime_type: ad.content_type,
       content: File.read(ad.tempfile)
     }
   end
end

mail(to: recipient, from: from, subject: subject) do |format|
    format.html { render html: html_body.html_safe } unless html_body.blank?
    format.text { render text: text_body }
end
```

... and my mail service (SparkPost) would be able to map the attachment filename to Content-Id correctly, and the image would display inline.

Is there a known work-around for handling inline attachments?

Many thanks!


I added Griddler to a Rails 3.2 app, it bundled but raised on runtime: 

```
griddler-1.5.2/app/controllers/griddler/emails_controller.rb:2:in `<class:EmailsController>': undefined method `skip_before_action' for Griddler::EmailsController:Class (NoMethodError)`
```

This happens because the skip_before_action API is introduced only in Rails 4.

Assuming there's no intention in support the 3.2 version, explicitly require Rails 4 so Bundler can complain in buidl time.
