Jade is now Pug.

Link has been fixed, and title has been updated.
Update dependencies that were screaming in `npm audit` and upgrade `coffeescript` to version 2, fixing the little errors with `super()` not being called.

Looks a bit messy, but it works, tested creating a new site and thus testing `new`, `preview` and `build` CLI commands. Seems alright.

Hope it helps.
I have a wintersmith blog setup for last some years. Recently I found Github is displaying a security warning for `marked` and suggesting it to be `>=0.6.1`. So I did it on my `package.json` on my local dev environment and tested it.

All seems fine to me.

Can we make it in the repository.

```
"marked": ">=0.6.1",
```

If it is necessary to submit a pull request just for this, let me know.

Thanks
Getting this below error in window 10

Error loading plugin './node_modules/wintersmith-sassify': Module did not self-register.
The recent-ish upgrade from marked 0.3.12 to 0.5.1 changed how markdown inside html is parsed.

I have html like this in my markdown files

```
## The series
<ul>
    <li>[part one: basic rendering](/articles/react-internals-part-one-basic-rendering)</li>
    <li>[part two: componentWillMount and componentDidMount](/articles/react-internals-part-two-componentWillMount-and-componentDidMount/)</li>
    <li>[part three: basic updating](/articles/react-internals-part-three-basic-updating)</li>
    <li>[part four: setState](/articles/react-internals-part-four-setState)</li>
    <li>**part five: transactions** <- you are here</li>
</ul>
```

With marked 0.3.12, it would parse the embedded markdown into html. Now it leaves it as is. Arguably the new behavior is more correct, but this should constitute a breaking change IMO.

I worked around this by installing marked@0.3.12 locally and forcing wintersmith to use it (with yarn you can add `resolutions` to your package.json file, or with npm you need to use `npm-force-resolutions` package.


I probably missed some communication but it seems updating Wintersmith from 2.4.1 to 2.5.0 breaks builds/previews for existing articles. For example, I have an article that begins with the following sample text:

```
---
title: An article title
author: Eevoo
date: 2018-07-12
template: article.jade
---

Hey hey hey sportsfans, I'm opening a Github issue in hopes of getting help. Be nice to the maintainer since supporting open source software is hard and mostly thankless!
```

When I attempt to preview the site with articles like that, the local server starts and runs, but when I attempt to view one of the pages, I get the following error:


![err_message](https://user-images.githubusercontent.com/49214133/55441149-cec50b80-5577-11e9-9c47-f14541013371.png)

```
error articles\1-the-real-hello-world\index.html: page 'articles\1-the-real-he
llo-world\index.html' specifies unknown template 'article.jade'articles\1-the-re
al-hello-world\index.html: page 'articles\1-the-real-hello-world\index.html' spe
cifies unknown template 'article.jade'
```

My searching the internet failed, along with my spot checking of some github issues. Any suggestions on changes to make to the markdown files and/or wintersmith config that can make this happy?

Thanks for any advice you can provide!
`wintersmith build -h` lists options, including `--clean`.
it also states `all options can also be set in the config file`.

turns out that not _all_ options can be set; for example `clean` is not honoured (see #149).

the wording of the help text should be updated to reflect that some, but not all, options can be set.  ideally those that are cli-only should have an indicator.
Supporting [AMP](https://www.ampproject.org/learn/overview/), imho, should be a must-have for static sites these days.

Is it on the roadmap ? What do you think about AMP ?
`npm install wintersmith -g` issue the following warning:
```
npm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to "coffeescript" (no hyphen)
```
When a content file starts with a UTF8 BOM I don't get any metadata which can result in hard-to-find bugs. We're using Wintersmith to generate a docs site and we allow multiple users to add content. It is very easy to unintentionally save a file with wrong BOM configuration. 

To reproduce:

Create a Wintersmith site:

<pre>
<code>
C:\Code\> wintersmith new .\test-site
initializing new wintersmith site in C:\Code\test-site using template blog
C:\Code\test-site
+-- moment@2.3.1
+-- typogr@0.5.2
`-- underscore@1.4.4
done!
preinstall:. -> lifecycle / |#########################################################################--------|
</code>
</pre>


Run <code>wintersmith preview</code> and navigate to the index page and check that the readme article is present:

![2016-03-29 15_37_40-clipboard](https://cloud.githubusercontent.com/assets/1454200/14109833/3aa83190-f5c4-11e5-8b3b-b8ef30efe2d7.png)

Next open <code>contents\articles\hello-world\index.md</code> using an editor that can add a BOM char at the beginning of the file. In Notepad++ select **Encoding/Convert to UTF-8** and save the file. 

Refresh the preview and notice that the README link is missing:

![2016-03-29 15_39_57-the wintersmith s blog](https://cloud.githubusercontent.com/assets/1454200/14109895/875b9aa4-f5c4-11e5-91e8-ea92f063cf60.png)

The root cause is that the metadata section is not detected properly since you're reading the first 3 chars of the content looking for "---" (markdown.coffee:123) which in this case is the BOM char. 

The naive approach would be to use something like <code>stripBOM()</code> in https://github.com/jonschlinkert/fs-utils, but I don't know if that's enough for all cases?
