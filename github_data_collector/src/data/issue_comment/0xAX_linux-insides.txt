Booting/linux-bootstrap-1.md
text:
>where `0x10ffef` is equal to `1MB + 64KB - 16b` . . . Since `2^20 = 1048576` is 1MB.

`0x10ffef` = 1114095
`1MB + 64KB - 16b` = 1114096 (`(2^20) + (64 × 2^10) − 16`) or 2^20

`0x10ffef` != `1MB + 64KB - 16b`

maximum address = 0x10ffef
2^20 = address 0 - 0x10ffef

right:
>where `0x10ffef` is equal to `(1MB + 64KB - 16b) - 1` . . . Since `2^20 - 1 = 1048575` is 1MB.
in `Booting/bootstrap-1.md` 
text:
`The starting address is formed by adding the base address to the value in the EIP register:`
It is IP register not EIP register in  real mode
Hola!
Somos un grupo de estudiantes de la Universidad Complutense de Madrid (UCM) y estamos
haciendo una campaña de concienciación sobre el uso de licencias.

Razones por las que usar una licencia:

- Es FÁCIL de usar: escoge la licencia, copia el texto genérico y listo! Ya puedes usarla en tus proyectos. En el siguiente [link](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository) puedes encontrar más información:
- LIMITAS qué usos pueden tener las personas para usar tu contenido, de esta manera evitas problemas de copias y plagios 
- Compartir es poder! Las licencias libres te dan credito en todo momento permitiendo que otros usen tu trabajo bajo TUS condiciones.
En el siguiente [video](https://www.youtube.com/watch?v=OnmWFxlG2GA) se explican los tipos de licencias para que puedas escoger una que se adapte a tus necesidades

Hemos elegido la licencia MIT para este pull request. En este [link](https://choosealicense.com/licenses/mit/) puedes encontrar mas informacion sobre esta licencia

Gracias por tu atención! Esperamos que te haya servido de ayuda

------------------------------------------------------------------------------------------------------------------
Hello!
We are a group of students of Universidad Complutense de Madrid (UCM) and we are working on an awareness campaign about types and uses of licences.

There are many reasons to use licences in your code:

- It's EASY to use: choose the licence, copy the generic text and ready! Now you can use it in your projects You can found more information in the following [link](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/licensing-a-repository ) 

- You LIMIT the uses of your code, in this way you will avoid possible legal problems about copies and plagiarism
- Share is power! The freeware licences give to you credit all the time. Allow third people use it with YOUR conditions

The following [youtube link](https://www.youtube.com/watch?v=OnmWFxlG2GA) show the existing types of licences to choose one which adapt better to your needs

We have chosen MIT license for this pull request. In this [link](https://choosealicense.com/licenses/mit/), you can get more information about this license

Thank you a lot for your attention! We hope you the contents has been helpful

(I am not sure is this right place to ask, if isn't please excuse me)

Why we can see **start_kernel** symbol on GDB but not arch/boot/x86/main.c:main ? I mean I want to debug kernel's early boot setup but when I try to insert any hardware breakpoint to boot codes, gdb cannot see symbols except from kernel codes.

```
$	qemu-system-x86_64 \
		-kernel $LINUX_SOURCE/arch/x86_64/boot/bzImage \
		-append "console=ttyS0 nokaslr earlycon earlyprintk" \
		-initrd $LINUX_SYSROOT/ramdisk.img \
		-m 1024 \
		--enable-kvm \
		-cpu host \
		-s -S &

$ gdb vmlinux
> target remote :1234
> hbreak start_main
```
>Userspace occupies the lower part of the virtual address space, from 0x000000000000000 to 0x00007fffffffffff and kernel space occupies the highest part from 0xffff8000000000 to 0xffffffffffffffff. Note that bits 63:48 is 0 for userspace and 1 for kernel space. 

its x86_64 
0x00007fffffffffff   =  46:0    total 47bits

*so  bits 63:47  is 0 for userspace and 1 for kernel space.*

its right? or i am wrong?
When it describes the 

    #define raw_smp_processor_id() (this_cpu_read(cpu_number))

the words mix the `common_cpu` and  `cpu_number`, not sure where `common_cpu` come from, it is nowhere in current upstream code. And I guess all `common_cpu` should be replaced with `cpu_number`
Thanks for this great Gitbook. Well written.

The `vsyscalls` chapter talks about `context switch` and `switching contexts`. Isn't this the actual CPU mode switch(user vs kernel mode) rather than the context switch used for switching between processes itself? 

https://github.com/0xAX/linux-insides/blame/master/SysCall/linux-syscall-3.md#L27
which means the links of all *.txt link is invalid now
Is there any way to forge CPU usage?I don't want people to see the real CPU load by command
How the Linux kernel handles the memory mapping if the physical memory of say only 512 MB is installed on my system.

Kernel maps **0(or 16) MB-896MB** physical RAM into 0xC0000000 linear address and can directly address it. So, what happens when I only have **512 MB** of RAM?

**How can the kernel map 896 MB from only 512 MB ?**, the kernel set things up so that every process's page tables mapped virtual addresses from 0xC0000000 to 0xFFFFFFFF (1GB) directly to physical addresses from 0x00000000 to 0x3FFFFFFF (1GB). But when I have only 512 MB physical RAM, how can I map, virtual addresses from 0xC0000000-0xFFFFFFFF to physical 0x00000000-0x3FFFFFFF ? Point is I have a physical range of only 0x00000000-0x20000000. **As kernel pages cannot be swapped out, how  user processes are getting chance to use the physical memory?**
