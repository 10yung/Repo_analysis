## Overview

Closes #2136

---

I hereby agree to the terms of the [JUnit Contributor License Agreement](https://github.com/junit-team/junit5/blob/002a0052926ddee57cf90580fa49bc37e5a72427/CONTRIBUTING.md#junit-contributor-license-agreement).

---

### Definition of Done

- [ ] There are no TODOs left in the code
- [ ] Method [preconditions](https://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc
- [ ] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed
- [ ] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) including corner cases, errors, and exception handling
- [ ] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](https://apiguardian-team.github.io/apiguardian/docs/current/api/org/apiguardian/api/API.html)
- [ ] Change is documented in the [User Guide](https://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](https://junit.org/junit5/docs/snapshot/user-guide/#release-notes)
- [ ] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass

<!-- Please provide us the version of JUnit 5 you are using and, if possible, a failing unit test with your bug report. Don't forget to describe the rationale for this issue (e.g. expected vs. actual behavior). -->

## Steps to reproduce

The change https://github.com/junit-team/junit5/commit/aba6adbe591b7a5dd33e346f9b91a872e62d3322 lead to invalid version ranges in Import-Package statements. For example in `junit-platform-runner` we see `@4.12` instead of the desired `[4.12,5)`:

```
Import-Package
  org.junit.platform.commons.logging     {version=[1.6,2), status=INTERNAL}
  org.junit.platform.commons.util        {version=[1.6,2)}
  org.junit.platform.engine              {version=[1.6,2)}
  org.junit.platform.engine.discovery    {version=[1.6,2)}
  org.junit.platform.engine.reporting    {version=[1.6,2)}
  org.junit.platform.engine.support.descriptor {version=[1.6,2)}
  org.junit.platform.launcher            {version=[1.6,2)}
  org.junit.platform.launcher.core       {version=[1.6,2)}
  org.junit.platform.suite.api           {version=[1.6,2)}
  org.junit.runner                       {version=@4.12}
  org.junit.runner.manipulation          {version=@4.12}
  org.junit.runner.notification          {version=@4.12}

```

<!-- Please insert a code snippet or a link to another repo along with instructions how to reproduce the issue here. The example should be minimal, complete and verifiable (see https://stackoverflow.com/help/mcve). -->

## Context

This occurs in the current master branch.

## Deliverables

The solution will be change change the versions in the build scripts from `version="@${Versions.junit4Min}"` to `version="[${Versions.junit4Min},5)"`.



Currently there is no good way to discover and execute a single test when using a file based test system like Cucumber. So I would like to request support for a file position in `UriSelector`, `FileSelector` and `ClasspathResourceSelector`.

**Deliverables**

Support for a file position when using:
 - URI selectors
 - File selectors
 - Classpath resource selectors

**Motivation**

Cucumber executes feature files written in Gherkin. A feature file consists of multiple scenarios organized in a hierarchical structure. A project may contain multiple feature files, typically organized in some directory structure.

For example:
```
|- src/main/java/com/example
| |- App.java
|- src/test/java/com/example
| |- StepDefinitions.java
|- src/test/resource/com/example/
| |- single.feature
| |- rule.feature
| |- outline.feature
```

Contents of `outline.feature`:
```feature
Feature: A feature with scenario outlines

  Scenario: A scenario
    Given a scenario
    When it is executed
    Then is only runs once

  Scenario Outline: A scenario outline
    Given a scenario outline
    When it is executed
    Then <example> is used

    Examples: With some text
      | example |
      | A       |
      | B       |

    Examples: With some other text
      | example |
      | C       |
      | D       |
```

`outline.feature`  contains 5 tests in a hierarchy:

```
A feature with scenario outlines
|- A scenario
|- A scenario outline
| |- With some text
| | |- Example #1
| | |- Example #2
| |- With some other text
| | |- Example #1
| | |- Example #2
```
Now suppose I would like select both tests (`Example #1`, `Example #2`) nested under the example  `With some text` on line 17.

Currently JUnit discovery selectors (`ClasspathRootSelector`, `ClasspathResourceSelector`, `PackageSelector`, `FileSelector`, `DirectorySelector`) only allow me to discover all tests in a single directory or file.

The `UniqueIdSelector` could be used to select the `With some text` container but requires reproducing the unique id which is rather complicated and quite possibly an implementation detail that should not be relied upon.

Cucumbers  current`TestEngine` implementation currently allows for a `line` query parameter to be added in when parsing using the `UriSelector`. For example:

  - `classpath:/com/example/outline.feature?line=17`
  - `file:/home/mpkorstanje/projects/cucumber/src/test/resources/com/example/outline.feature?line=17`

Since this is not formalized I suspect other test engines that consume the `UriSelector` may crash on the query parameter and so I would like something safer. 

For IDEs being able to use a `FileSelector` with a file position would also simplify the complexity of providing support for file based test engines. Naively allowing the user to select any line in a file and execute the discovered tests for that line would provide for a minimal implementation without knowing any details about the underlying implementation of the test engine.

The same reasoning applies to `ClasspathResourceSelector`.
 
We have one test that changes the global state, for example
```java
@Test
void localeTest() {
  Locale.setDefault(Locale.FRENCH);
  assertEquals("Bunjour", getMessage());
}
```
and hundreds of tests that reads the state:
```java
@Test
void someTest() {
  assertEquals("Hello", getMessage());
}
```

After enabling parallel test execution our tests start to fail at random locations with messages like that:
`[ERROR]   message 0 expected:<...Annotation.java:17: [Annotation 'AnnotationAnnotation' have incorrect indentation level 2, expected level should be 0].> but was:<...Annotation.java:17: [Die Annotation 'AnnotationAnnotation' hat eine unerwartete EinrÃ¼ckungstiefe von 2 (erwartet: 0)].>`

`@Execution(ExecutionMode.SAME_THREAD)` for the test `localeTest` won't help us, since the all other tests are able to run concurrent with every other test and with `localeTest` too.

This can be solved with `@ResourceLock`:
```java
@Test
@Execution(ExecutionMode.SAME_THREAD)
@ResourceLock(value="global", mode=READ_WRITE)
void localeTest() {
  Locale.setDefault(Locale.FRENCH);
  assertEquals("Bunjour", getMessage());
}

@Test
@Execution(ExecutionMode.CONCURRENT)
@ResourceLock(value="global", mode=READ)
void test1() {
}

// ...

@Test
@Execution(ExecutionMode.CONCURRENT)
@ResourceLock(value="global", mode=READ)
void test100500() {
}
```

but this is error prone, since adding a new Test without this annotation will produce a flaky tests which may fail.

It will be much better to mark some tests as "incompatible with parallel execution at all":
 ```java
@Test
@Execution(ExecutionMode.ALONE) // no other this will be executed in parallel 
void localeTest() {
  Locale.setDefault(Locale.FRENCH);
  assertEquals("Bunjour", getMessage());
}
```

As a workaround, it is possible to turn such a test into Junit 4 test, which will be executed in other universe, isolated from all other.
## Overview

This new implementation supports WildCardType and type hierarchy thanks to the usage of  `TypeUtils.isAssignable` provided by apache commons lang3. 

Drawback : it adds a new dependency to JUnit Jupiter.

---

I hereby agree to the terms of the [JUnit Contributor License Agreement](https://github.com/junit-team/junit5/blob/002a0052926ddee57cf90580fa49bc37e5a72427/CONTRIBUTING.md#junit-contributor-license-agreement).

---

### Definition of Done

- [x] There are no TODOs left in the code
- [x] Method [preconditions](https://junit.org/junit5/docs/snapshot/api/org/junit/platform/commons/util/Preconditions.html) are checked and documented in the method's Javadoc
- [x] [Coding conventions](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#coding-conventions) (e.g. for logging) have been followed
- [x] Change is covered by [automated tests](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#tests) including corner cases, errors, and exception handling
- [x] Public API has [Javadoc](https://github.com/junit-team/junit5/blob/master/CONTRIBUTING.md#javadoc) and [`@API` annotations](https://apiguardian-team.github.io/apiguardian/docs/current/api/org/apiguardian/api/API.html)
- [x] Change is documented in the [User Guide](https://junit.org/junit5/docs/snapshot/user-guide/) and [Release Notes](https://junit.org/junit5/docs/snapshot/user-guide/#release-notes)
- [x] All [continuous integration builds](https://github.com/junit-team/junit5#continuous-integration-builds) pass

When selecting multiple modules (e.g. via `--select-module a,b,c` within a console launcher run) users can't quickly infer from which module a test class (read: container) originates. By appending that information to the default display name its origin is presented in plain sight.

### Example

Without module names: 
![image](https://user-images.githubusercontent.com/2319838/71246243-925c5a00-2316-11ea-8cd3-0322c45df64a.png)

With module name prepended:
![image](https://user-images.githubusercontent.com/2319838/71246299-abfda180-2316-11ea-97e5-570aa5ac644d.png)

Implementation:
https://github.com/sormuras/junit5-looming/blob/master/src/test.base/test/java/test/base/PrependModuleName.java

## Questions

- [ ] What about package names?
- [ ] Is it better to generate logical nodes for container modules and packages -- like we do for classes and engines?

Like can be seen at the [API of JDK 11](https://docs.oracle.com/en/java/javase/11/docs/api):

> ![image](https://user-images.githubusercontent.com/2319838/71244332-8b334d00-2312-11ea-965c-e421b70d0601.png)

`javadoc` supports creating a modular overview page. At the moment, we prevent that page from being created via `--no-module-directories`.

JUnit's overview page could look like:

```
| All Modules | Jupiter | Platform | Vintage |
+-------------+---------+----------+---------+---
| Module                  Description
+------------------------------------------------
| org.junit.jupiter       The aggregator module of the JUnit Jupiter API.
| org.junit.jupiter.api   JUnit Jupiter API for writing tests.
| ...
+------------------------------------------------
```

Might supersed #2056

## Deliverables

- [x] Drop `--no-module-directories` and get the overview page generated and uploaded.

With reference to this thread, https://github.com/junit-team/junit5-samples/issues/118#event-2883368068 

It would be nice to have the ability to add tags during runtime (especially for Data-Driven Testing). 

Use Case: 
1. We are using different test data for a test case. We want to group all the positive test data as a smoke suite and add negative test data to the Regression suite. 

Model Test Data:

` {
    "testName": "Sample 1",
    "tag":"smoke",
    "testData":"TD"

  },

{
    "testName": "Sample 2",
    "tag":"Regression",
    "testData":"TD12"

  }`

Let me know if this is feasible!  
Hi!

I'm using CLion with a c++ project (cmake), which starts a jvm. The java part is built with gradle. The project works, but I'm having a problem with debugging.

When I start the JVM, I immediately get a SIGSEGV. I understand that it's normal, it comes from the jvm itself, and there's no workaround except ignoring SIGSEGV. A bit annoying but not too bad as it only happens once per session.

BUT, after that, I continue debugging, and I get constant SIGBUS signals with this stack trace:

```
<unknown> 0x000000011f108385
<unknown> 0x000000011761dca7
<unknown> 0x000000011761dca7
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x0000000117614849
JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*) 0x000000010bf3a582
StackWalk::fetchFirstBatch(BaseFrameStream&, Handle, long, int, int, int, objArrayHandle, Thread*) 0x000000010c227cac
StackWalk::walk(Handle, long, int, int, int, objArrayHandle, Thread*) 0x000000010c2278fc
JVM_CallStackWalk 0x000000010bfb14a2
<unknown> 0x0000000117623950
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x0000000117614849
JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*) 0x000000010bf3a582
InstanceKlass::call_class_initializer(Thread*) 0x000000010bf22af7
InstanceKlass::initialize_impl(Thread*) 0x000000010bf2244f
Reflection::invoke_constructor(oopDesc*, objArrayHandle, Thread*) 0x000000010c1ebdbb
JVM_NewInstanceFromConstructor 0x000000010bfc14f6
<unknown> 0x0000000117623950
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761dae2
<unknown> 0x000000011761dcec
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761dae2
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x000000011761da00
<unknown> 0x0000000117614849
JavaCalls::call_helper(JavaValue*, methodHandle const&, JavaCallArguments*, Thread*) 0x000000010bf3a582
jni_invoke_static(JNIEnv_*, JavaValue*, _jobject*, JNICallType, _jmethodID*, JNI_ArgumentPusher*, Thread*) 0x000000010bf7e2af
jni_CallStaticVoidMethodV 0x000000010bf81c69
JNIEnv_::CallStaticVoidMethod(_jclass*, _jmethodID*, ...) jni.h:1521
main main.cpp:80
start 0x00007fff6f6563d5
start 0x00007fff6f6563d5
```

It doesn't stop in my code. I don't understand why this is happening, or if it's possible to avoid them, aside from ignoring all SIGBUSs.

I minimized my code and created the most simple example which reproduces the issue. Basically I created a cpp project which starts a jvm with **org/junit/platform/console/ConsoleLauncher** as main, with one simple test class. And the SIGBUS happens. It happens before my test even run. If I put my code as main instead of JUnit, it doesn't happen.

You can get a simple project which demonstrate the issue here: https://github.com/tallavi/sigbus-reproduction

Another thing I noticed. This example gives a single SIGBUS. If I put two test classes, I get two SIGBUSes, if I put 3, I get 3.

Thus, I suspect something within JUnit.

My environment:
MacOS 10.14.6
Clion 2019.3
Java 11.0.4 2019-07-16 LTS
JUnit versions I tried: 1.5.1, 1.5.2, 1.6.0-M1

Thanks!
Seems to be feature we wanted?

https://github.com/junit-team/junit5/blob/master/junit-platform-commons/src/main/java/org/junit/platform/commons/util/AnnotationUtils.java#L217-L219

This use case triggered the question:

https://github.com/junit-pioneer/junit-pioneer/pull/133/files#diff-e173b19bdf682fe079028644b4dccc43R168-R171

## Deliverables

- [ ] Working as intended?
- [ ] Bug?
