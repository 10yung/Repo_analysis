I see the SnapshotUploader process start successfully for my ASP.NET application, but no minidump file gets created.  There's nothing in the log file that indicates it's even tried to create a minidump, like I would expect to see from [here](https://docs.microsoft.com/en-us/azure/azure-monitor/app/snapshot-debugger-troubleshoot#check-the-uploader-logs).  It looks like another process is supposed to be spawned, which actually creates the minidump file.  This doesn't appear to start.  What triggers it?
The following stuff is the data that is sent to the application insight. In order to find the part of the code that send this piece of data, I tried to search the key word "recipientName" or "recipientId", but it shows no result.

Application Insights Telemetry: {"name":"Microsoft.ApplicationInsights.38d763c685c74b8084bc91cc5348777a.Event","time":"2019-12-20T21:34:24.4367380Z","iKey":"38d763c6-85c7-4b80-84bc-91cc5348777a","tags":{"ai.cloud.roleInstance":"Shengs-MacBook-Pro.local","ai.internal.sdkVersion":"dotnetc:2.10.0-31626"},"data":{"baseType":"EventData","baseData":{"ver":2,"name":"BotMessageReceived","properties":{"fromId":"382b1d18-a843-4f7b-9933-3d29278bd35d","locale":"en","fromName":"User","recipientName":"Bot","recipientId":"88934467-c743-495c-b7c1-26fed6307c7a","text":"what is the next holiday"}}}}
When trying to create reference links between telemetry (“_MS.links” attribute), I observed an unexpected behavior in Azure Portal. 
In my example, the operation “Say Hello batch processing” has references to 3 “Single Say Hello” operations (think of batch processing).
On the portal, clicking on any of the upstream operations gives the error message “No operation with id xx could be found” (from the “Say Hello batch processing”  operation). 


This is a sample value for “_MS.links”: 

```
[{"operation_Id":"4d2da8313d7ed44db9a7831076bc5a3d","id":"00-4d2da8313d7ed44db9a7831076bc5a3d-873c23f17e44fc42-00"},{"operation_Id":"b6c251376f243045b2925b1b9582ca20","id":"00-b6c251376f243045b2925b1b9582ca20-6e01997aa39e084d-00"},{"operation_Id":"287c9b88dd552244897df2c7d2ce0b40","id":"00-287c9b88dd552244897df2c7d2ce0b40-01f30f00010ea249-00"}]
```

Am I doing something wrong?


I have an app with some medium load, mix of .NET Core Micro services and old .NET Framework code. We have a lot of inter-services calls, so avg request duration is less than 100ms:

 
![image](https://user-images.githubusercontent.com/1866711/71412621-944c5300-265f-11ea-9184-61368c099219.png)
![image](https://user-images.githubusercontent.com/1866711/71412638-a4643280-265f-11ea-9ae5-1778d400da12.png)

However, Server Response Time chart on overview blade shows some crazy values like **1.6 minutes** average with 13 minutes response time peaks:
![image](https://user-images.githubusercontent.com/1866711/71412701-ec835500-265f-11ea-827f-dcd3ded2e8d1.png)

Here is a response from support on how that Server Response time is calculated:

> Duration in overviewblade is summarized by timespan and grain. The avg value depends on how many grains in that timespan range. The overall duration in performance grid is summarized by operations. The avg value depends on avgs of operations.

I just don't get it. Does that mean "Works as expected"? 

The resulting "1.6 minutes average server response time" is totally unrelated to the real application performance.  
That is 1000 times higher than avg value from Performance blade and 1500 times higher than `requests | summarize avg(duration)` output.

What is the point of that "summarization"? Is there any way to fix or disable it?

With no change to our pipelin we are now getting a failure on our "Add release annotation to Azure Application Insights resource" step.

2019-12-17T20:52:54.7647569Z ##[error]Failed to create an annotation with Id: 61354dbf-c0b1-4c3a-8b1a-18f2648fb085. Error Unknown, Description: Unknown.

I have tried updating the API key as i thought it had gone stale but no luck. The only thing i can think of is that the Live metrics IP address has been changed?
Hello,

I've added app insights into a wcf service. Ideally I'd like to grab the name of the method so I can run queries against the data coming in and view trends, detailed information, etc. 

I was able to do this by adding the below into a CustomServiceHost.cs. However, while this gave me exactly what I needed we found that this caused severe overhead onto our service as this code runs synchronously.

`var extraTelemetry = new ApplicationInsightsHelper`
`{`
`MethodName = methodName`
`};`

`Microsoft.ApplicationInsights.Extensibility.TelemetryConfiguration.Active.TelemetryInitializers.Add(extraTelemetry);`

Are there other alternatives to grabbing the name of the method that won't affect performance besides a custom telemetry initializer? I feel as though this is something that should be supported "out of the box" and perhaps I just haven't found the correct way to do it.

Thanks, Daniel
I am deploying AppInsights via ARM, it takes about 25 seconds to do the deployment, so I am expecting it took that time to configure and initialize itself.

After about 2.5 minutes I Deploy a function app which uses this instance of AppInsights. This deployment seems to include the implicit "create release annotation" step as the following error gets logged:

```
##[debug][PUT]https://management.azure.com/subscriptions/.../resourceGroups/cp-test/providers/microsoft.insights/components/cp-test/Annotations?api-version=2015-05-01
##[debug]addReleaseAnnotation. Data : {"statusCode":404,"statusMessage":"Not Found","headers":{"cache-control":"no-cache","pragma":"no-cache","content-length":"153","content-type":"application/json; charset=utf-8","expires":"-1","x-content-type-options":"nosniff","request-context":"appId=cid-v1:920e14b1-13f3-461a-a4bb-b4fe6f1a4525","access-control-expose-headers":"Request-Context","strict-transport-security":"max-age=31536000; includeSubDomains","x-ms-ratelimit-remaining-subscription-writes":"1199","server":"Microsoft-IIS/10.0","x-ms-request-id":"4d06217a-318c-44d8-99d4-f9be9a897d5c","x-ms-correlation-request-id":"4d06217a-318c-44d8-99d4-f9be9a897d5c","x-ms-routing-request-id":"SOUTHCENTRALUS:20191209T153700Z:4d06217a-318c-44d8-99d4-f9be9a897d5c","date":"Mon, 09 Dec 2019 15:36:59 GMT","connection":"close"},"body":{"code":"NotFound","message":"Not Found","innererror":{"diagnosticcontext":"a5a6fd35-fc61-45b9-a3b1-4a29b9a8a1ff","time":"2019-12-09T15:37:00.2252213Z"}}}
Failed to add release annotation. Error: Failed to update Application Insights 'cp-test' Resource. Error: NotFound - Not Found (CODE: 404)
##[debug][POST]https://management.azure.com/subscriptions/.../resourceGroups/cp-visits-test/providers/Microsoft.Web/sites/cp-visits-test/publishxml?api-version=2016-08-01
##[debug]Could not parse response: {}
##[debug]Response: undefined
```

If I repeat the deployment after some time, it succeeds. Therefore, the AppInsights **is not ready after deployment**. Is there any workaround except to add a delay to my deployment pipeline?
"Be" -> "By"
@pharring @xiaomi7732 @juliusl 
Restarted my webapp 20191127 and StopProfiler errors have appeared every morning in my Applicationinsights Failures log.

Failed method	Microsoft.WindowsAzure.Storage.Shared.Protocol.HttpResponseParsers.ProcessExpectedStatusCodeNoException	
Problem Id	System.Net.WebException at Microsoft.WindowsAzure.Storage.Shared.Protocol.HttpResponseParsers.ProcessExpectedStatusCodeNoException	
Assembly	Microsoft.WindowsAzure.Storage, Version=8.4.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35	
...
at Microsoft.ServiceProfiler.Collectors.DetailedTraceCollector+d__38.MoveNext (ApplicationInsightsProfiler, Version=2.6.1909.2701, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)
...

AgentVersion | 2.6.1909.2701
Machine_EnvironmentType | ANTARES

The last time this occurred (First mentioned in #377)  a restart reverted the Agent back to a previous version.

What is the recommended solution today?
https://github.com/microsoft/ApplicationInsights-Home/blob/59b79e1bdb14238593d000cf0bad681f7aa5cde6/Samples/Heartbeat/AspNetCore/ASPNetCoreSample/ASPNetCoreSample.csproj#L8

Needs to be updated to release version.