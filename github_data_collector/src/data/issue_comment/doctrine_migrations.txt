<!-- Fill in the relevant information below to help triage your pull request. -->

|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | -
| Fixed issues | -

#### Summary
I think that the `Query` value object was a great idea proposed by @pulzarraider in #906. Independently if #906 is going to be merged, I see value in the `Query` part, so here is a full refactoring of the code base to use it everywhere instead of the current 3 different arrays holding the same data.
### Feature Request

<!-- Fill in the relevant information below to help triage your issue. -->

|    Q        |   A
|------------ | ------
| New Feature | yes
| RFC         | yes
| BC Break    | - (only for master)

#### Summary

Switch to the more recent PSR-4 autoload standard

<!-- Provide a summary of the feature you would like to see implemented. -->

<!-- Fill in the relevant information below to help triage your pull request. -->

|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | no
| Fixed issues | -

#### Summary
This PR adds new events `onMigrationsQueryExecuting` and `onMigrationsQueryExecuted`.

#### Use case
When you are using Mysql cluster and you alter big table, this operation blocks the whole cluster until the alter is done (blocking DDL operations). With event `onMigrationsQueryExecuting` you can check if the migration contains query with alter for big table and stop it before it executes with exception to avoid DB problems.
Big alters are then processed manually with https://www.percona.com/doc/percona-toolkit/LATEST/pt-online-schema-change.html

For more info: https://www.percona.com/blog/2014/11/18/avoiding-mysql-alter-table-downtime/

#### Summary

When building the PHAR from the script <code>build-phar.sh</code> the file doctrine-migrations.php is missing.

#### Current behavior

<code>./bin/doctrine-migration.phar</code>
```
PHP Warning:  require(phar:///home/antoineb/src/migrations-2.2.0/bin/doctrine-migrations.phar/bin/../lib/doctrine-migrations.php): failed to open stream: phar error: "lib/doctrine-migrations.php" is not a file in phar "/home/antoineb/src/migrations-2.2.0/bin/doctrine-migrations.phar" in phar:///home/antoineb/src/migrations-2.2.0/bin/doctrine-migrations.phar/bin/doctrine-migrations on line 7
PHP Fatal error:  require(): Failed opening required 'phar:///home/antoineb/src/migrations-2.2.0/bin/doctrine-migrations.phar/bin/../lib/doctrine-migrations.php' (include_path='.:/usr/share/php') in phar:///home/antoineb/src/migrations-2.2.0/bin/doctrine-migrations.phar/bin/doctrine-migrations on line 7
```

#### How to reproduce

Run the script <code>build-phar.sh</code>

#### One way to fix it

before running the command <code>build-phar.sh</code>
rename doctrine-migrations.php to doctrine-migration and add <code>#!/usr/bin/env php</code> line at the beginning of the file.

|      Q       |   A
|------------- | -----------
| Type         | feature
| BC Break     | no
| Fixed issues | #874

#### Summary
Before running a down migration script, the migration repository will be checked to see if it was ever executed. 
It the migration did not run, a Exception of type VersionDoesNotExist will be thrown.
### Bug Report

<!-- Fill in the relevant information below to help triage your issue. -->

|    Q        |   A
|------------ | ------
| Version     | 2.2

#### Summary

<!-- Provide a summary desciribing the problem you are experiencing. -->
When run migrate command from CLI, the migration failed during Pre-Checks with the following error message.

`Failed opening script ProxyManagerGeneratedProxy///PM///Doctrine/DBAL/Schema/Schema/Generated1838957e13fce5f54efb7a1f10bc2e1d.php: No such file or directory`

I checked the path and the file actually does not exist. It's very strange, as it's the first time to migration the database connection is success.

3.0 brings a new configuration format to allow for multiple namespaces. To avoid a hard BC break, we should add a forward compatibility layer to 2.3 that allows people to change the configuration to the new format. However, since 2.x only supports a single namespace, the config reader should throw an exception when more than one migration namespace is configured.

This also entails deprecating the old configuration format for removal.
|      Q       |   A
|------------- | -----------
| Type         | improvement
| BC Break     | no
| Fixed issues | N/A

#### Summary

This change updates the generated migration file to follow the [PSR-12](https://www.php-fig.org/psr/psr-12/) standard. To pull the exact phrasing:

> When you have a return type declaration present, there MUST be one space after the colon followed by the type declaration. The colon and declaration MUST be on the same line as the argument list closing parenthesis with no spaces between the two characters.

This will help keep formatting consistent between the migrations and the application and removes the need to reformat the migration file after it's created.
### Feature Request

When running a down migration, that was never migrated up, doctrine should notice that and not try to migrate down.

|    Q        |   A
|------------ | ------
| New Feature | yes
| RFC         | no
| BC Break    | no

#### Summary

I'm currently using doctrine/migrations version 2.2.0 with Zend.

If by accident someone calls a down script, as written in the text description after migration was generated. e.g.

    To revert the migration you can use migrations:execute --down 20191127145240

This will most likely result in an error. In the worst case, the database could result in an inconsistent state.

As all migrations that were executed are stored in the `migrations` table, it should just check if it was run before.
Otherwise, it should result in an error like 'This migration was never not run'.
### Feature Request

<!-- Fill in the relevant information below to help triage your issue. -->

|    Q        |   A
|------------ | ------
| New Feature | yes
| RFC         | no
| BC Break    | no

#### Summary

It could be a nice feature to have the description we provide in the Migration class generated filled also in the migration_versions table.

The idea is to have a new column `description` in the `migration_versions` table to see what happens without going to the source code. Could be interesting for dba or release manager.
