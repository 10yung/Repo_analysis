### What happened?

current signatures
```
type Cache interface {
	Get(key string) (value interface{}, ok bool)
	Add(key string, value interface{})
}
```

to 
```
type Cache interface {
	Get(ctx context.Context, key string) (value interface{}, ok bool)
	Add(ctx context.Context, key string, value interface{})
}
```

### What did you expect?

https://godoc.org/google.golang.org/appengine/memcache
I want to use AppEngine's memcache for graphql.Cache.
but Its required that context.Context from http request.

If this breaking change is acceptable, I'll send a PR.
### What happened?
I have a schema where I want to log the name and value for an input field, but I am unable to get the name and value of the input field associated with the directive
### What did you expect?
I would expect the name and value to be printed as mentioned in the type extension examples: https://github.com/99designs/gqlgen/blob/master/example/type-system-extension/directive.go
### Minimal graphql.schema and models to reproduce

Schema:
```
directive @inputLog on INPUT_FIELD_DEFINITION
input NewTodo {
  text: String! @inputLog
  userId: String!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}
```

Directive definition:
```
func InputLog(
	ctx context.Context,
	obj interface{},
	next graphql.Resolver,
) (res interface{}, err error) {
	rc := graphql.GetResolverContext(ctx)
	strToBeLogged := fmt.Sprintf("field: %v has value %+v", rc.Field.Name, obj)
	fmt.Println(strToBeLogged)
	return next(ctx)
}
```

prints: `field: createTodo has value {Text: UserID:}`
I would expect `field: text has value foo`
### versions
 - `gqlgen version`: 0.8.0
 - `go version`: 1.13.4

The idea here is to have a central proxy to packages.Load that can be invalidated as files are written out, reducing the number of package.Load calls way down. 

Would love to get your thoughts @vikstrous. 

Alternative to https://github.com/99designs/gqlgen/pull/945 and https://github.com/99designs/gqlgen/pull/943 that includes some fairly heavy refactor.


Updated timing for one of our apps:

#### v0.10
real    0m7.437s
user    0m17.978s
sys     0m1.751s

#### master
real    0m5.677s
user    0m10.742s
sys     0m1.205s

#### package-cache
real    0m2.987s
user    0m5.286s
sys     0m0.608s
i have n number of graphql file and i want separate resolver of each graphql file . how it is possible

I want to create sperate resolver for each .graphql file.

Out put of go env :
GO111MODULE=""
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/krawler/.cache/go-build"
GOENV="/home/krawler/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GONOPROXY=""
GONOSUMDB=""
GOOS="linux"
GOPATH="/home/krawler/go"
GOPRIVATE=""
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/home/krawler/go/src/demo/go.mod"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build655509784=/tmp/go-build -gno-record-gcc-switches"

hi gqlgen team,

if gqlgen supports relay is very cool
Normally, when a service is taking part in graphql federation, it will
have at least one type defined with a `@key` field, so that other
services can link to (that is, have an edge pointing to) the type that
this service provides.  The previous federation code assumed that was
the case.

But it's not required: a service could not define `@key` on any of its
types.  It might seem that would mean the service is unreachable,
since there is no possibility of edges into the service, but there are
two edges that can exist even without a `@key`: top level Query edges
and top level Mutation edges.  That is, if a service only provides a
top-level query or top-level mutation, it might not need to define a
`@key`.

This commit updates the federation code to support that use case.

Describe your PR and link to any relevant issues. 

I have:
 - [ ] Added tests covering the bug / feature (see [testing](https://github.com/99designs/gqlgen/blob/master/TESTING.md))
 - [ ] Updated any relevant documentation (see [docs](https://github.com/99designs/gqlgen/tree/master/docs/content))

### What happened?



### What did you expect?

i want id  is also Camel-Case ~

### Minimal graphql.schema and models to reproduce



### versions
gqlgen version: v0.10.2
go version: 1.13.5
go modules

### What happened?

When running my app online, I wanted to be able to utilize GraphIQL from the Playground handler, but it currently has hardcoded CDN. I think this is a reasonable default, but breaks offline flows (or what happens when the CDN goes down)?

### What did you expect?

More of a feature request - potentially I could even submit the pull, but a way to optionally set the CDN for the GraphIQL javascript files (either globally or via instantiation of the handler, etc.).

### Minimal graphql.schema and models to reproduce
n/a

### versions
Latest of all

### What happened?
I have written a marshaler for some DateTypes to be ISO8601 conform.
This is the code of the marshaler
https://gist.github.com/gigo1980/e77549d19aa807b5e3bfc84762049cf9

If I try to run my application, I get an error from the generated code.
```
internal/app/graphql/gql_exec_gen.go:4091:2: not enough arguments to return
internal/app/graphql/gql_exec_gen.go:4091:11: ec.unmarshalInputDateTime undefined (type *executionContext has no field or method unmarshalInputDateTime)
internal/app/graphql/gql_exec_gen.go:4095:11: ec._DateTime undefined (type *executionContext has no field or method _DateTime)
internal/app/graphql/gql_exec_gen.go:4469:2: not enough arguments to return
internal/app/graphql/gql_exec_gen.go:4469:11: ec.unmarshalInputDate undefined (type *executionContext has no field or method unmarshalInputDate)
internal/app/graphql/gql_exec_gen.go:4473:11: ec._Date undefined (type *executionContext has no field or method _Date)
internal/app/graphql/gql_exec_gen.go:4488:11: ec._Date undefined (type *executionContext has no field or method _Date)
```
I have created the marshaler as described here https://gqlgen.com/reference/scalars/

### What did you expect?

The application should start and does not throw this error

### Minimal graphql.schema and models to reproduce
```
# This file was generated based on "person.json". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Mutation {
    createPerson(input: NewPerson): Person
    deletePerson(identifier: ID!): Boolean
}

type Person {
    active: Boolean!
    birthDate: Date
    createdAt: DateTime!
    description: String
    identifier: ID!
    updatedAt: DateTime!
}

type Query {
    person(identifier: ID!): Person
    persons(): [Person!]!
}


input NewPerson {
    birthDate: Date
}

"DateTime in ISO8601, e.g. 2006-01-31T15:04:05-07:00"
scalar DateTime

"Date in ISO8601 e.g. 2006-01-31"
scalar Date

"Time in ISO8601, e.g. 15:04:05-07:00"
scalar Time
```
### versions
 - `gqlgen version` 0.10.2
 - `go version` 1.13.4
### What happened?

Currently, the only way to determine whether an input parameter is null vs "undefined" is to use reflections like described here: https://gqlgen.com/reference/changesets/

Not ideal to have to use reflections and to manually have to unmarshal the data (and one of the thing that gqlgen is supposed to do for us).

### What did you expect?

Would be great to have a way to get the input parameters without having to use reflection. It seems that the `map[string]interface{}` is always calculated anyway, as we can see here: https://github.com/99designs/gqlgen/blob/bf2cc90ec9bda2be035d6fc93f58344577f12172/codegen/input.gotpl#L5

Could this map be added to the context instead? gqlgen could then expose a "get from context" method to retrieve the list of input parameters that were passed.