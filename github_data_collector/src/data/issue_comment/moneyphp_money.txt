I am trying to calculate tax based on percentage which can be 5%, 12%, 18%.
### Current behavior
```php
$tax = 5;
$amount = 89453;
$totalAmount= $amount->multiply( $tax /100)->getAmount(); // $totalAmount= 4472
```
### What I am expecting
```php
$tax = 5;
$amount = 89453;
$totalAmount= $amount->multiply( $tax /100)->getAmount(); // $totalAmount= 4472.65
```
In short, I require exact precision in my decimal how can this be achieved .
Micro-optimization
before merging #529 if we could merge this first..
Should probably relocate the implementation to an external package, since it's an external dependency.
The underlying cache package changed a lot since 0.4.0: https://github.com/php-cache/taggable-cache

We should probably relocate the implementation to an external package as well, since it has an external dependency.
Hey there!
Thank you for this library, it is really great!

I got into something really subtle.

```php
$money1 = Money::EUR("5000\n");
$money2 = Money::EUR("5000");
var_dump($money1->greaterThan($money2)); // prints 1
```

These 3 lines works and the result is `1`. Is it the expected behaviour or should there be checks while parsing the numeric string representation?

My `moneyphp/money` version is `3.2.1` and the php version is 7.3, but it can be reproduced in prior php versions
The allocation docs at http://moneyphp.org/en/stable/features/allocation.html still mention the idea of adding the remained to the first value passed. Since https://github.com/moneyphp/money/pull/526 that is not true anymore.
The Standard PHP formatter overrides the fractions when using a currency object that has different fractions that what is defined in the icu lib on the operating system.

Therefore the `IntlMoneyFormatter` should use the same fraction for the PHP number formatter call as it has detected before.
Hello everybody, currently running the latest version of MoneyPHP.

I am trying to work with taxes, the most complex form of tax value that is in my project is: "9.975%". MoneyPHP can't handle it in cents. Which means, 9975 returns 99.75$. 

Considering this, I cannot do "product_price * (tax_amount / 100)" to get the amount. Since the tax_amount will be 99.75$, not 9.975$.

On top of this, MoneyPHP doesn't consider the decimals to round numbers. Which means, no matter the product price, the initial numbers are the result and the decimals do not matter.


How am I suppose to calculate taxes, with decimals amounts(as tax amounts) and then return a proper amount?


Example(Actual, real non-functional one):
Product Price:30.73$(3073)
Tax: 9.975%(0.09975$)

Test(01)
30.73 * 0.09975 = 3,0653175
Considering MoneyPHP only accepts INT, once converted to an int the answer is: 306(3.06$)
_Which is logical, with decimals it would be a float._

Test(02)
3073(Value in Database) * 0.09975 = 306,53175
Still returns 3.06$(306) because it doesn't take decimals into consideration. Since an INT is required. 

_**Even if I change my price to 3073,3074,3075, which returns a result of 3.066 and more, the answer REMAINS 306 no matter what the decimals ARE.**_
Once formatted by MoneyPHP, returns 


So how am I suppose to accomplish this sort of calculations?
*I have looked every issue on here regarding taxes, decimals and percentage
**I have looked at Laracasts, CodeCourse and Google
***The only thing left, is changing package(the only thing that was suggested)

It would be nice, if money objects could deserialize themselves from var_dump() export format.