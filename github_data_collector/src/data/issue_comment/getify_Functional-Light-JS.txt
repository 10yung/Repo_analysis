In the last [abstraction example](https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch4.md/#abstraction) (when you took the abstraction too far) the logic in the code is wrong compared with the original example shown earlier. So if this is intentionally, please disregard the comment below and just add clarification in the description of the example.

1. First mistake

    ```js
    function isPropUndefined(val,obj,prop) {
        return isUndefined( obj[prop] );
    }
    ```

- The code above is ok to check if a property of an object is undefined, but here you change the logic of the previous example and check if a property of the **store** is undefined.

  - Original logic:

    ```js
    if (evt.name !== undefined) {
          storeData( events, evt.name, evt );
    }
    ```
2. Second mistake

- You return **isUndefined** result which is true if the property is undefined, so the logic is wrong once again.

**Proposal:**

- Just change the name of the function and wrap the function in another one which accepts the property to be checked against undefined. This will lead to the need of invoking the function with an argument **name** in this case.


    ```js
    function isPropDefined(prop) {
        return function (obj) {
            return !isUndefined(obj[prop]);
        }
    }

    function trackEvent(evt) {
        conditionallyStoreData(events, evt.name, evt, isPropDefined('name'));
    }
    ```
- Now we could change the invokation of **checkFn** to be with only one argument.

    ```js
    if (checkFn(value)) {
        store[location] = value;
    }
    ```


**Quote:**

But a standalone implementation of `reduce(..)` might look like this:

```javascript
function reduce(reducerFn,initialValue,arr) {
    var acc, startIdx;

    if (arguments.length == 3) {
        acc = initialValue;
        startIdx = 0;
    }
    else if (arr.length > 0) {
        acc = arr[0];
        startIdx = 1;
    }
    else {
        throw new Error( "Must provide at least one value." );
    }

    for (let idx = startIdx; idx < arr.length; idx++) {
        acc = reducerFn( acc, arr[idx], idx, arr );
    }

    return acc;
}
```

**Question:**

Perhaps I don't understand the context, but how to call this function without passing an initialValue?
Thanks for your work on this book!
Changed variable name in explanations (total) to match num1 in code snippet

**Yes, I promise I've read the [Contributions Guidelines](https://github.com/getify/Functional-Light-JS/blob/master/CONTRIBUTING.md)** (please feel free to remove this line -- if you leave this line here, I'm going to assume you didn't actually read it).

```js
compose(compose(fn3,fn2),fn1) ~=~ compose(fn3,compose(fn2,fn1))
```
Adds popular immutable state library `immer` to Appendix C: FP Libraries
**Yes, I promise I've read the [Contributions Guidelines](https://github.com/getify/Functional-Light-JS/blob/master/CONTRIBUTING.md)** (please feel free to remove this line -- if you leave this line here, I'm going to assume you didn't actually read it).

Some reader don't like that the img tag are not closed. I would advise changing this : 
```
<p align="center">
    <img src="images/fig1.png" width="40%">
</p>
```
to this : 
```
<p align="center">
    <img src="images/fig1.png" width="40%"/>
</p>
```
on every images.
I can do a the PR if you want me to, but maybe there is a reason for that that I do not understand.
In #72 @DrBoolean already pointed this out, but since that (closed) issue addressed several sub-issues I think it's ok to make a single issue for this.

In [(now-)Chapter 9, you use `String` as an example of functors](https://github.com/getify/Functional-Light-JS/blob/master/manuscript/ch9.md/#a-word-functors). However, `String`s aren't actually functors, because the things inside them cannot be any arbitrary type. In other words, there is no such thing as a "String of type `x`" – strings are always composed of characters and nothing else.

```hs
-- an `Array of a` can be transformed into an `Array of b`
Array.prototype.map :: [a] ~> (a -> b) -> [b]

-- a `String of chars` cannot be transformed into a `String of <other>`
String.prototype.mapLike :: String char ~> (char -> b) -> String char
-- (`b` values are turned into chars implicitly)
```

Instead of strings, I might suggest that the most intuitive example (for JS devs) of a functor apart from Arrays would be Trees.

```hs
-- a `Tree of a` can be transformed into a `Tree of b`
Tree.prototype.map :: Tree a ~> (a -> b) -> Tree b
```

The downside, unfortunately, is that trees are not a built-in first-class data structure, but must be implemented. Of course, that is not especially complicated, though the details (class-based? factory? prototypal map method? top-level map function?) will depend on your particular taste.

Other examples… `Promise` acts as a functor sometimes, though not all the time (due to the difference between returning values vs. returning promises in `then`); event emitters / RxJS observables can act as functors, though these are even farther from vanilla JS built-ins; functional idioms like Maybe, Either, Tuple… personally, I think Tree is a better candidate than these less-universally-familiar entities.
Hi,

I bought the book and it makes a tough subject easier to understand and apply to our code base. Anyway, there's a broken link ( getify not the book ! ), Chapter 1, which suggests popular libraries, I think the link should be :

FunctionalJs - https://github.com/functionaljs/functional-js 

Thanks,

**Yes, I promise I've read the [Contributions Guidelines](https://github.com/getify/Functional-Light-JS/blob/master/CONTRIBUTING.md)** :)
Loved the in-depth coverage and explanations of this series . And it's easy to understand for newcomers who are fresh to FP. 

In **Continuation Passing Style (CPS)** of Chapter 8, it is said that _Fibonacci recursion cannot practically be refactored to pure PTC_. It confuses me there. As I find below code, though it lost some readability.

`
function fib(x, res = 1, pre = 1) {
       if (x <= 1) return res; 
       return fib(x - 1, pre, pre + res)
 }
`

Is above **fib** a pure PTC form? 
Any Comments are welcome and appreciated.