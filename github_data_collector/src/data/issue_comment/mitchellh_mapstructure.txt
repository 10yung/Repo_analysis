Solves #89. Add support to match field name with map key in `snake_case` or `kebab-case` convention.
Hi guys, 
i have a problem decoding data. The main problem is, that the type of the input values can change. For example:

```
{
   name: "hello",
   value: "abc"
}
```

and sometimes it looks like this:
```
{
   name: "hello",
   value:  
     payload: {
       otherdata: "dd",
       foo: "bar"
    }
}

```
Can I decode this with mapstructure? 


Best reguards
Alex

Minor addition to allow the decoding of json.Number as uint 
### How to reproduce:

    Run go get github.com/mitchellh/mapstructure
    Go to $GOPATH/github.com/mitchellh/mapstructure
    Run go test -bench .

### Output:
```
goos: linux
goarch: amd64
pkg: github.com/mitchellh/mapstructure
Benchmark_Decode-8                   	  200000	      6111 ns/op
Benchmark_DecodeViaJSON-8            	  300000	      5425 ns/op
Benchmark_DecodeBasic-8              	panic: reflect: reflect.Value.SetInt using unaddressable value

goroutine 49 [running]:
reflect.flag.mustBeAssignable(0x82)
	/usr/local/go/src/reflect/value.go:234 +0x13a
reflect.Value.SetInt(0x56a980, 0x5d7f98, 0x82, 0x2a)
	/usr/local/go/src/reflect/value.go:1542 +0x2f
github.com/mitchellh/mapstructure.(*Decoder).decodeInt(0xc0001aa008, 0x550b13, 0x5, 0x56a980, 0x5d7f98, 0x56a980, 0x5d7f98, 0x82, 0x82, 0x0)
[...]
	/home/benni/go/src/github.com/mitchellh/mapstructure/mapstructure.go:222 +0xf2
github.com/mitchellh/mapstructure.Decode(0x575860, 0xc000330000, 0x5620a0, 0xc0000d0080, 0x0, 0x0)
	/home/benni/go/src/github.com/mitchellh/mapstructure/mapstructure.go:130 +0x9f
github.com/mitchellh/mapstructure.Benchmark_DecodeBasic(0xc000232000)
	/home/benni/go/src/github.com/mitchellh/mapstructure/mapstructure_benchmark_test.go:79 +0x2f6
testing.(*B).runN(0xc000232000, 0x64)
	/usr/local/go/src/testing/benchmark.go:176 +0xb3
testing.(*B).launch(0xc000232000)
	/usr/local/go/src/testing/benchmark.go:328 +0xd1
created by testing.(*B).doBench
	/usr/local/go/src/testing/benchmark.go:294 +0x59
exit status 2
FAIL	github.com/mitchellh/mapstructure	2.990s
```

### Expected result:
Benchmarks complete

### Notes:
Tests complete just fine. When I remove line 74 in mapstructure_benchmark_test.go, 
```
		"vdata":   42,
```
the benchmark completes fine.

It seems like there is an issue destructuring into plain interface{}-es?

Thanks!

Is there a way to configure the boolean conversion? Our project has strict requirements to only accept a "true" and "false" and not all the other variations. Is this possible with this library?
Fixes #42
Implementation for checking that required fields got filled in `map` -> `struct` decoding direction.

A basic test has been added as well.

```go
type Required struct {
	RequiredBar string `mapstructure:"bar,required"`
	Value       string `mapstructure:"foo"`
}
```

Fixes: #7 
I use the DecodeHook to translate the *values* of certain fields. This works great when "decoding" from map -> struct, but doesn't work the other way around.

When I "encode" from struct -> map, the DecodeHook is called only once, for the whole struct. I would expect it to be called for each field as well.

I've currently hacked it into my decoderHook function, by iterating over the fields and recursively calling itself. But this is rather tedious and has the disadvantage that I can't change the types of fields.
Use below code to reproduce:
```
package main

import (
	"fmt"
	"github.com/mitchellh/mapstructure"
)

type Config struct {
	ClientConfig  clientConfig   `yaml:"client,omitempty"`
	ClientConfigs []clientConfig `yaml:"clients,omitempty"`
}

type clientConfig struct {
	URL string `"yaml:url,omitempty"`
}

func main() {

	input := map[string]interface{}{
		"client": map[string]string{
			"url": "http://198.168.181.61:3100/api/prom/push",
		},
	}

	var result Config
	err := mapstructure.Decode(input, &result)
	if err != nil {
		panic(err)
	}

	fmt.Printf("%#v", result)

}
```

output:
```
main.Config{ClientConfig:main.clientConfig{URL:""}, ClientConfigs:[]main.clientConfig(nil)}
```