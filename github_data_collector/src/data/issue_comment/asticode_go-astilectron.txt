I'd been running into a problem for a while with an electron process being left running after closing the main window.

This process rockets up from ~2% CPU while the main process is running, to ~25% after the applicatoin has "closed", which has a very detremental effect on the computer after it happens a few times.

After a bit of experimentation, it seems to reliably happen after opening the debug panel, and then closing the main window.

The core process shuts down, but it seems the debug window remains orphaned.

I'm relatively new to using astillectron with bootstrap, is there a way to find the list of active windows as it shuts down?
Similarly, it would be nice to have an event handler for when new windows are created, so that if they are created from the window (by JavaScript or otherwise) that the Go backend can be updated with their creation.

Ideally an end solution would be that on close, the application should clean up all active windows, so that it doesn't leave zombie children behind.
Hello,

I just started learning to code with go-astilectron and while designing a custom menu bar,
I noticed that there doesn't seem to be a native function for toggling between normal window mode and fullscreen mode. I know you can start a window in fullscreen or use the native menu bar by assigning the role "MenuItemRoleToggleFullScreen", but that's not really an option for me.

Have I overlooked something?
Is there some way to toggle fullscreen besides these possibilities or some kind of workaround
(e.g. calling some kind of event or change the window's appearance with different functions)?
If there's no real fullscreen mode, a borderless windowed mode might suffice, too.

I hope this is the right place to ask such an question.
Thank you.
Hello! Love the project. I am wondering if there is any way to start `go-astilectron` from the javascript side (specifically the `electron main` process) so that I can integrate `go-astilectron` into my projects that already have a javascript backend.

I'm looking for these two things:
1. The ability to create event handlers in javascript that can communicate with windows created in `go-astilectron` (for services that don't have good go libraries yet, or have already been implemented in the project's js).
2. The ability to run the project by calling `$ electron ./electron.js` rather than running `go-astilectron` directly. (that way any standard electron bundler can be used, e.g: [electron-builder](https://github.com/electron-userland/electron-builder), [electron-forge](https://github.com/electron-userland/electron-forge), etc.)

I've provided below an example of the kind of API I'm thinking of.

Is any of this possible? From what I understand, `astilectron` seems a little "all-or-nothing" in this regard, but perhaps I'm missing something.

 Thanks in advance.


<details>
<summary><b>Example</b></summary>
The javascript:

```javascript
// electron.js (entry point for the application)

import { start, getWindowsSync } from "astilectron";
import { exec } from "child_process";
import { ipcMain } from "electron";

// setup astilectron. (javascript side)
const port = start();

// Launch go-astilectron. (go side, see below)
let go = exec("./go_astilectron_project_binary", port);

// `main` same as `mainWindow` in main.go.
// Sync blocks until window is created.
const [ main ] = getWindowsSync();

ipcMain.on("handle in js", (message) => {
  console.debug(`received ${message} in js`);
  main.webContents.send("reply");
});
```

And the go code:
```go
//main.go (entry point for go)

/**
  * Package main is the go-astilectron bindings for this app
  */
package main

import (
    "github.com/asticode/astilog"
    "github.com/asticode/go-astilectron"
)

func main() {
    var app, _ := astilectron.New(&astilectron.WindowOptions{})
    var mainWindow, _ := app.newWindow("file://<working dir>/app/index.html", nil)
    mainWindow.create()
    mainWindow.On("handle in go", func(m *astilectron.Message) {
        // Unmarshal
        var s string
        m.Unmarshal(&s)

        // Process message
        astilog.Debugf("received %s in go", s)
    })
}
```
```json
// package.json
{
    "name": "project-name",
    "scripts": {
        "start:dev": "electron ./electron.js"
    },
    "dependencies": {
        "astilectron": "<version number>",
        "electron": "<version number>"
    }
}
```
To run the project (in development mode), one would simply call:
```bash
$ electron ./electron.js
```
or
```bash
node run start:dev
```
</details>
#190 
Partnering pull request can be found here: [asticode/astilectron#20](https://github.com/asticode/astilectron/pull/21)
We can have a simple arrangement in go-astilectron and astilectron to support TCP Socket in Windows and Unix-Socket/Unix Domain Socket in other OS (Mac and Linux).
Unix Socket will faster and lighter than other IP sockets.
In electron I use like this(js code):
```
if (!win.isFocused()) { 
            win.showInactive()  //show and not focused
            win.flashFrame(true) //flicker to attract the user's attention 
 }
```
How do I implement the function in astilectron? Thanks a lot!
Electron has globalshortcut module can be used when the window is not focused. Does go-astilectron supports this feature? or is there any solution to use this?

Thanks!
#179 
Partnering pull request can be found here: https://github.com/asticode/astilectron/pull/20
The default Electron/Astilectron installation path is located inside: 

> C:\Users\Admin\AppData\Roaming\\%AppName%\vendor

However, the Electron Cache is located inside:

> C:\Users\Admin\AppData\Roaming\Electron

The Electron Cache **should** be located inside:

> C:\Users\Admin\AppData\Roaming\\%AppName%

This issue causes conflicts with other Electron applications that use the same cache path by default.
Reproduction can be caused using go-asilectron with the default parameters and a valid AppName.
Hi,

I created a window using React and I bundled everything together using the `create-react-app`. I then added the resulting bundle into my `Resources` folder and created a new window:

```
       var err error
	url := filepath.Join(a.Paths().DataDirectory(), "public/config/index.html")

	opts := &astilectron.WindowOptions{
		AutoHideMenuBar: astilectron.PtrBool(true),
		AlwaysOnTop:     astilectron.PtrBool(false),
		Transparent:     astilectron.PtrBool(false),
		Closable:        astilectron.PtrBool(true),
		Minimizable:     astilectron.PtrBool(true),
		Frame:           astilectron.PtrBool(true),
		Movable:         astilectron.PtrBool(true),
		SkipTaskbar:     astilectron.PtrBool(false),
		Resizable:       astilectron.PtrBool(true),
		Show:            astilectron.PtrBool(true),
		Icon:            astilectron.PtrStr("public/logo-onyo.ico"),
	}

	// Initialize the window
	connectorConfig.Window, err = a.NewWindow(url, opts)
	if err != nil {
		connectorConfig.Window = nil
		return err
	}

	// Register callbacks (must be done before the create so that the DidFinishLoad can execute).
	connectorConfig.Window.On(astilectron.EventNameWindowEventDidFinishLoad, connectorConfig.onWindowLoaded)
	connectorConfig.Window.OnMessage(connectorConfig.onConfigMessage)

	// Create the window
	err = connectorConfig.Window.Create()
	if err != nil {
		connectorConfig.Window = nil
		return err
	}
```

The problem is that when this window loads, I get an error saying that it could not load the js chunks in the index file:

```
<script src="/static/js/2.8e8a5637.chunk.js"></script>
<script src="/static/js/main.673b3637.chunk.js"></script>
```

I've checked my code against the demo and I believe that the problem is the `/`, because Electron is considering it as the root of my file system instead of a relative path (as you stated [here](https://github.com/asticode/go-astilectron/issues/162#issuecomment-461812888)). When I removed it my app worked:

```
<script src="static/js/2.8e8a5637.chunk.js"></script>
<script src="static/js/main.673b3637.chunk.js"></script>
```

My question is: is there a way to make Electron load the scripts correctly without publishing them on a local server or having to change the index.html to remove the `/`?