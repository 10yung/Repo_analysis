To my surprise, we can see quite a lot of banking apps that use Stetho. This is very good since it shows that banks do care about good UI and do on-device debugging. But it is also pretty bad since developers release this on Google Play and as a result, the entire content of the screen is broadcasted via the Stetho build-in server, leaking very sensitive data (accounts, transactions, passwords, and PIN codes, ...).

Please add visible documentation clearly stating that Stetho should be available on non-production builds only, ideally in a specific "UX-debugging flavor" or the app. I know that this is a bit patronizing for some developers but this improvement does not cost anything and might prevent some damages...
When trying to use the dumpapp script with some really long arguments (exceeding 65535 characters), I get the following error:

`struct.error: 'H' format requires 0 <= number <= 65535` 

Example usage: 
`dumpapp setvalue value_key value_base64_exceeding_65535_characters`

Seems like the python scripts uses an `unsigned short` for encoding the argument length: https://github.com/facebook/stetho/blob/5cc93ec78908cdded19c5352a90635a33cf2fa7f/scripts/dumpapp#L42

Is there any way I can modify the script to support longer arguments or is it a protocol limitation and requires the plugin update as well?

This is probably the same issue as https://github.com/facebook/stetho/issues/308 - which is closed, and it seems nobody's going to reopen it.
But it still exists in v1.5.1, 100% reproducible on emulator with an almost empty project.

Steps to reproduce:
1. Create AVD with any API 19 image (x86, x86 + Google APIs, ARM...)
1. Launch [sample app](https://github.com/facebook/stetho/files/3660088/TestStetho.zip)
1. Open chrome://inspect/#devices in Chrome
1. After ~10 minutes Stetho reaches 1024 files/sockets and stops:
```
W/System.err: java.io.IOException: Too many open files
W/System.err:     at android.net.LocalSocketImpl.accept(Native Method)
W/System.err:     at android.net.LocalSocketImpl.accept(LocalSocketImpl.java:328)
W/System.err:     at android.net.LocalServerSocket.accept(LocalServerSocket.java:94)
W/System.err:     at com.facebook.stetho.server.LocalSocketServer.listenOnAddress(LocalSocketServer.java:85)
W/System.err:     at com.facebook.stetho.server.LocalSocketServer.run(LocalSocketServer.java:74)
W/System.err:     at com.facebook.stetho.server.ServerManager$1.run(ServerManager.java:40)
W/stetho: I/O error initialising connection thread
I/stetho: Server shutdown on @stetho_gmk57.teststetho_devtools_remote
```
5. After that, click on EditText in app. App crashes.
The formatting was broken on the Stetho website (http://facebook.github.io/stetho/)
this question,so many times,
![图片](https://user-images.githubusercontent.com/21822922/64587041-a5cf5f00-d3d0-11e9-9cce-fcbe03809d0b.png)
![图片](https://user-images.githubusercontent.com/21822922/64587055-b2ec4e00-d3d0-11e9-94b0-95478af20053.png)
Can you upgrade and solve it?
Fixes #662

This enables people turning of jetifier when using Stetho.
Hi, I'm facing this issue only when Stetho is open, I have a code where I replace some placeholders in a String. If the placeholders are not found, then I catch the exception and return the original String.

However, when Stetho is open it seems like the try/catch block was ignored by Stetho and it is still making my app to crash by throwing the exception that is supposed to be caught.

Here's the code (I'm using Square Phrase library):

```
fun resolveApplicationLabel(original: String): String {
        val applicationLabel = resources.getString(R.string.application_label)
        return try {
            Phrase.from(original)
                    .put(APPLICATION_LABEL_NAME, applicationLabel)
                    .format().toString()
        } catch (e: IllegalArgumentException) {
            log.e(TAG, "No valid placeholders found in $original", e)
            original
        }
 }
```

Version of Stetho: 1.5.1
Return null if fragment is not added in getChildFragmentManager
This library is one of the few that are preventing us from turning off jetifier (which would be a big performance improvement). Are there any plans to upgrade to androidx?