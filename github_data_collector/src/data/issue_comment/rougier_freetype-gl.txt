I am using a version of freetype-gl from 2017 that I noticed is causing a seg fault with certain font sizes.

The offending font size appears to be `20.48`.

So, this week, I downloaded and compiled the latest freetype-gl to see if I could reproduce the issue with one of the existing freetype-gl demos, markup.c.

I took the markup.c source and only modified `line 109`:  I changed the `normal.size = 24.0` to `normal.size = 20.48`.  Then I recompiled and ran.  I do not get a seg fault, but any text with that size does not get rendered and I get the following error messages:
```
FT_Error (line 96, code 0x657465) : (null)
Unable to load "/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf" (size=20.5)
Houston, we've got a problem !
```
Following is a screenshot of the markup.c demo when `normal.size` is set to `20.48`:

![ft](https://user-images.githubusercontent.com/25487118/61326932-12651d80-a7d5-11e9-96c7-e48c22001b0d.png)

It appears that the error message is originating from the `texture_font_load_face(...)` function in `texture_font.c`.  And though not 100% sure, the error might be associated with `FT_Set_Char_Size`.

Another strange thing is, if I set the `normal.size` value to any of the following values, the text gets rendered just fine:
```
20.4
20.47
20.478
20.5
20.6
24.48
```

Do you have any ideas of why this might be happening?  I am trying to figure out if there are sizes in general that might lead to this problem.

Greetings freetype-gl developers and contributors,

We’re reaching out because your project is an important part of the open source ecosystem, and we’d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:

- Continuously run all the fuzzers you write.
- Alert you when it finds issues.
- Automatically close issues after they’ve been fixed by a commit.

Many widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). 

Even though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.

We want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.

To help you getting started, we attached our internal fuzzer for your project that you are welcome to use directly, or to use it as a starting point.

If you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why—lack of interest, lack of time, or something else—so we can better support projects like yours in the future.

If we’ve missed your question in our [FAQ]( https://github.com/google/oss-fuzz/blob/master/docs/faq.md ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.


Thanks!

Julien,
OSS-Fuzz Team


----

```c
#include <stddef.h>
#include <stdint.h>
#include "third_party/freetype_gl/freetype-gl.h"

static void ExamineGlyphs(const wchar_t* text,
                          texture_font_t* font) {
  if (texture_font_load_glyphs(font, text) != 0) {
    return;
  }
  while (*text != '\0') {
    texture_glyph_t* glyph = texture_font_get_glyph(font, *text);
    if (glyph != NULL) {
      texture_glyph_get_kerning(glyph, *text);
    }
    ++text;
  }
}

int LLVMFuzzerTestOneInput(const uint8_t* data, size_t size) {
  if (size == 0) {
    return 0;
  }
  texture_atlas_t* atlas = texture_atlas_new(1024, 1024, 1);
  if (atlas == NULL) {
    return 0;
  }

  // Note: you can create a new font for various different pt_sizes, i.e. it
  // might be useful to fuzz the pt_size variable along with the input buffer.
  const float pt_size = 12.0f;
  texture_font_t* font =
      texture_font_new_from_memory(atlas, pt_size, data, size);
  if (font == NULL) {
    texture_atlas_delete(atlas);
    return 0;
  }

  // Note: you can create load glyphs using arbitrary text. Might be useful to
  // fuzz these.
  const wchar_t text[] = L"some text sequence";
  ExamineGlyphs(text, font);

  texture_font_delete(font);
  texture_atlas_delete(atlas);
  return 0;
```
Please review proposed changes for library building.
Program crashed with access violation error when I set texture atlas depth to 3, it worked fine with depth=1.
The other depth settings are yet to be checked so I don't know it also works or not.
I want to use \n to display multi line text, but it only shows a white rectangle instead of creating a new line.
Hi! I am interested in some articles about font engine. I know how to make texture atlas, but I could not find any tutorial about how to get proper uv coodinates for different sizes characters. Where did you get those informations from?

```
-- The C compiler identification is AppleClang 10.0.0.10001025
-- The CXX compiler identification is AppleClang 10.0.0.10001025
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Building for Darwin target system
-- Building with Clang compiler
-- Looking for stdbool.h
-- Looking for stdbool.h - found
-- Looking for stdint.h
-- Looking for stdint.h - found
-- Looking for math.h
-- Looking for math.h - found
-- Looking for cos in m
-- Looking for cos in m - found
-- Looking for cos
-- Looking for cos - found
-- Looking for fabs
-- Looking for fabs - found
-- Looking for floor
-- Looking for floor - found
-- Looking for fmod
-- Looking for fmod - found
-- Looking for pow
-- Looking for pow - found
-- Looking for roundf
-- Looking for roundf - found
-- Looking for round
-- Looking for round - found
-- Looking for sin
-- Looking for sin - found
-- Looking for sqrt
-- Looking for sqrt - found
-- Looking for tan
-- Looking for tan - found
-- Looking for M_PI
-- Looking for M_PI - found
-- Found OpenGL: /System/Library/Frameworks/OpenGL.framework   
-- Found Freetype: /usr/local/lib/libfreetype.a (found version "2.9.1") 
-- Found Doxygen: /usr/local/bin/doxygen (found version "1.8.14") found components:  doxygen missing components:  dot
-- Found AntTweakBar: /usr/local/include  
-- Found PkgConfig: /usr/local/bin/pkg-config (found version "0.29.2") 
-- Could NOT find Fontconfig (missing: FONTCONFIG_LIBRARY FONTCONFIG_INCLUDE_DIR) 
-- Found ImageMagick: /usr/local/bin/compare (found version "7.0.8-10") 
-- Configuring done
-- Generating done
-- Build files have been written to: /Users/finley/freetypeGL/freetype-gl/build
bytedancedeMacBook-Pro-7:build finley$ make 
Scanning dependencies of target freetype-gl
[  1%] Building C object CMakeFiles/freetype-gl.dir/distance-field.c.o
[  3%] Building C object CMakeFiles/freetype-gl.dir/edtaa3func.c.o
[  5%] Building C object CMakeFiles/freetype-gl.dir/font-manager.c.o
[  7%] Building C object CMakeFiles/freetype-gl.dir/platform.c.o
[  9%] Building C object CMakeFiles/freetype-gl.dir/text-buffer.c.o
[ 11%] Building C object CMakeFiles/freetype-gl.dir/texture-atlas.c.o
[ 12%] Building C object CMakeFiles/freetype-gl.dir/texture-font.c.o
[ 14%] Building C object CMakeFiles/freetype-gl.dir/utf8-utils.c.o
[ 16%] Building C object CMakeFiles/freetype-gl.dir/vector.c.o
[ 18%] Building C object CMakeFiles/freetype-gl.dir/vertex-attribute.c.o
[ 20%] Building C object CMakeFiles/freetype-gl.dir/vertex-buffer.c.o
[ 22%] Linking C static library libfreetype-gl.a
[ 22%] Built target freetype-gl
Scanning dependencies of target makefont
[ 24%] Building C object CMakeFiles/makefont.dir/makefont.c.o
[ 25%] Linking C executable makefont
ld: warning: text-based stub file /System/Library/Frameworks//OpenGL.framework/OpenGL.tbd and library file /System/Library/Frameworks//OpenGL.framework/OpenGL are out of sync. Falling back to library file for linking.
ld: warning: text-based stub file /System/Library/Frameworks//OpenGL.framework/OpenGL.tbd and library file /System/Library/Frameworks//OpenGL.framework/OpenGL are out of sync. Falling back to library file for linking.
ld: warning: text-based stub file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.tbd and library file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGLU.dylib are out of sync. Falling back to library file for linking.
ld: warning: text-based stub file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.tbd and library file /System/Library/Frameworks/OpenGL.framework/Versions/A/Libraries/libGL.dylib are out of sync. Falling back to library file for linking.
Undefined symbols for architecture x86_64:
  "_BZ2_bzDecompress", referenced from:
      _ft_bzip2_file_fill_output in libfreetype.a(ftbzip2.c.o)
  "_BZ2_bzDecompressEnd", referenced from:
      _ft_bzip2_file_reset in libfreetype.a(ftbzip2.c.o)
      _ft_bzip2_file_done in libfreetype.a(ftbzip2.c.o)
  "_BZ2_bzDecompressInit", referenced from:
      _ft_bzip2_file_init in libfreetype.a(ftbzip2.c.o)
      _ft_bzip2_file_reset in libfreetype.a(ftbzip2.c.o)
  "_inflate", referenced from:
      _FT_Gzip_Uncompress in libfreetype.a(ftgzip.c.o)
      _ft_gzip_file_fill_output in libfreetype.a(ftgzip.c.o)
  "_inflateEnd", referenced from:
      _ft_gzip_file_done in libfreetype.a(ftgzip.c.o)
      _FT_Gzip_Uncompress in libfreetype.a(ftgzip.c.o)
  "_inflateInit2_", referenced from:
      _ft_gzip_file_init in libfreetype.a(ftgzip.c.o)
      _FT_Gzip_Uncompress in libfreetype.a(ftgzip.c.o)
  "_inflateReset", referenced from:
      _ft_gzip_file_reset in libfreetype.a(ftgzip.c.o)
  "_png_create_info_struct", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_create_read_struct", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_destroy_read_struct", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_error", referenced from:
      _read_data_from_FT_Stream in libfreetype.a(sfnt.c.o)
  "_png_get_IHDR", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_get_error_ptr", referenced from:
      _error_callback in libfreetype.a(sfnt.c.o)
      _read_data_from_FT_Stream in libfreetype.a(sfnt.c.o)
  "_png_get_io_ptr", referenced from:
      _read_data_from_FT_Stream in libfreetype.a(sfnt.c.o)
  "_png_get_valid", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_read_end", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_read_image", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_read_info", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_read_update_info", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_expand_gray_1_2_4_to_8", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_filler", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_gray_to_rgb", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_interlace_handling", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_longjmp_fn", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
      _error_callback in libfreetype.a(sfnt.c.o)
  "_png_set_packing", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_palette_to_rgb", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_read_fn", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_read_user_transform_fn", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_strip_16", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
  "_png_set_tRNS_to_alpha", referenced from:
      _Load_SBit_Png in libfreetype.a(sfnt.c.o)
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
make[2]: *** [makefont] Error 1
make[1]: *** [CMakeFiles/makefont.dir/all] Error 2
make: *** [all] Error 2
```
It seems `libpng`, `libz`( or `libz2`) are missing, while I have installed all of them. Can anyone help out?
I followed #191 and I got this error in cmake:
```
CMake Error in demos/CMakeLists.txt:
  Imported target "glfw" includes non-existent path

    "E://include"

  in its INTERFACE_INCLUDE_DIRECTORIES.  Possible reasons include:

  * The path was deleted, renamed, or moved to another location.

  * An install or uninstall procedure did not complete successfully.

  * The installation package was faulty and references files it does not
  provide.
```
PS: I did build and install glfw.
How could I do even very long text to be fit from one to another vector. For instance:
```DrawString(Vector2 startPos, Vector2 endPos, string label)```

and text is properly scaled to start at `startPos` and end at `endPos`.

Is there any brand option?