## Meta
Poltergeist Version: **1.6.0/1.18.1**
(Tried both, saw issues with both)

## Expected Behavior
I am attempting to confirm the correct function of a link with `target="_blank"` by switching to the window opened up when clicking the link, then checking the `current_url`. This should return the url opened by clicking the link.

## Actual Behavior
In reality, I am getting the following error when attempting to `switch_to_window`: 

```
Failure/Error: switch_to_window(new_window)
     
     Capybara::Poltergeist::JavascriptError:
       One or more errors were raised in the Javascript code on the page. If you don't care about these errors, you can ignore them by setting js_errors: false in your Poltergeist configuration (see documentation for details).
     
       TypeError: Attempting to configurable attribute of unconfigurable property.
       TypeError: Attempting to configurable attribute of unconfigurable property.
           at https://www.gstatic.com/recaptcha/api2/v1562567553145/recaptcha__en.js:5 in defineProperty
           at https://www.gstatic.com/recaptcha/api2/v1562567553145/recaptcha__en.js:5 in fZ
           at https://www.gstatic.com/recaptcha/api2/v1562567553145/recaptcha__en.js:16
```

If I attempt the `switch_to_window` in `binding.pry`, it gives this error code, but actually seems to process switching windows, since afterwards I can check `current_url` and get the correct result and a passing test.

Since I ran into this with versions 1.6.0 and 1.18.1, I decided to try to work around this by executing some javascript to reset the links' `target` to "_self_". After this workaround, when testing the specs involved individually, they typically pass. However, when I run the entire file of specs, they fail locally. They do pass in our CI process, though.

If this is an error in something in my implementation, please let me know.

## Steps to reproduce
Here is the code I attempt:
```
new_window = window_opened_by { row_to_click.click_link }
sleep 3

switch_to_window(new_window)
expect(current_url).to include anticipated_url # use include in case routing adds path to root url
```

Here is my 'workaround' code:
```
before do
  execute_script("$('.link-to-click').each(function() {$(this).attr('target', '_self');})")
end

scenario 'the user is redirected to the correct path' do
  row_to_click.click_link
  sleep 3 # wait for event logging

  expect(current_url).to include anticipated_url # In case link redirects to more specific path
end
```
The Debian package has the same problem.
The fix introduced by #855 addresses MRI but not JRuby or Rubinius because of incomplete support for the `:out` parameter to `Process.spawn` on those platforms.

Apparently newer versions of JRuby **do** support `:out`. We should determine which version of JRuby fixed this (and from there, determine whether we care about older versions of JRuby). We should also explore whether the issue is OS-specific.
When using https, the remote debugger page never loads. When changing the scheme to http, it loads correctly.
I've stumbled across a bug where JavaScript enabled specs fail silently due to the use of JavaScript's `let` assignment operator. Using `let` instead of `var` will break whatever other code resides in the same <script> tag as the let keyword.

```
Capybara.javascript_driver = :poltergeist

Capybara.register_driver :poltergeist do |app|
  options = { js_errors: true }
  Capybara::Poltergeist::Driver.new(app, options)
end
```

This is true despite having `js_errors` set to be true.

To reproduce run a spec for a page that has:

```
<script type="text/javascript">
  var message = 'works fine';
</script>
```

versus one that has:

```
<script type="text/javascript">
  let message = 'fails silently';
</script>
```
When using poltergeist (and capybara-webkit) 

```
<input id="radio_1" name="radio" value="1" type="radio", style="position:absolute; left: -9999px>
```

is considered a visible element, although it cannot be seen or interacted with (clicked, etc).  Current selenium-webdriver (2.53.4) reports it as non-visible, although the 3.0.0.beta3.1 version reports it as visible but throws an ElementNotVisible error if you try to click it.    @route - thoughts?

I've been debugging some sporadic spec failures today, where it seems that Poltergeist tries to click the wrong place in the page. Therefore it misses the button I'm trying to click, and my spec fails because the form is never submitted.

We use web fonts in our project. In this case, it seems that what is happening is that since I'm clicking a button very soon after the page has loaded, sometimes Poltergeist computes the click position _before_ the web fonts have loaded but the click itself happens _after_ the web fonts have loaded. And the web fonts cause the page to re-render, so everything moves around a bit. This can cause the click to fall in the wrong place.

More generally, it seems problematic that the page can change between when Poltergeist measures the click position and when it executes the click. Ideally there would be some way to freeze the page, but I don't know if that is at all possible.

For now, I have managed to work around the issue by checking for `document.readyState == "complete"` on each page load. This may be the next best thing for Poltergeist to implement if freezing the page is infeasible.

I had issues with some missing js features in phantomjs 1.9.8 so I fixed them by using polyfills loaded through `page.driver.browser.extensions`

However in one of my tests I'm using an iframe and it seems that in that iframe extensions are not loaded because I'm having the same issue I had before creating the extensions itself.

Heya, just ran into an issue where I was trying to test an autocomplete field, and had to drop down from `fill_in` to `native.send_keys` in order for the keyboard events to trigger the autocomplete. This raises the question: any reason not to use `send_keys` internally for `fill_in`? I'd be happy to make a PR for this!

- set initial cookie before request
  page.driver.set_cookie("user_id", 1)
- controller sets cookies[:user_id] = 2
  visit "/change_user?user_id=2" 
- this passes - the right headers were sent back by rails app
  page.response_headers["Set-Cookie"].match("user_id=2").should_not be_nil
- this fails, user_id cookie is still 1
  page.driver.cookies["user_id"].value.should == 2
