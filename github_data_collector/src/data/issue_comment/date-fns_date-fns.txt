For https://github.com/date-fns/date-fns/issues/1606
The naming "`backupDate`" seems strongly to indicate that this date will be used as a "backup" when parsing fails.  However this is not what happens - instead, failure returns Invalid Date.

It seems to me that this data parameter is being used as a reference where needed.  E.g. if a time is missing, it can be gotten from the reference; if the year is 2 digits and therefore unclear, we reference the date passed in to see what year is most likely.

You can probably see where I'm going here. üòÑ To keep from causing confusion with the API I'd suggest `referenceDate` is clearer naming.

"backupDate" is never fully used as a backup because there's no case where all of its subvalues would be used.

(I checked out https://github.com/date-fns/date-fns/issues/1219 which is where this naming comes from.)

We love DateFns and evangelize it, thanks!
Expands on existing comment in parse, to help direct users currently using v1 parse to the right function in v2.

Removes comment from parseISO as there isn't an equivalent comment in toDate. Doesn't make sense to have it in one but not the other.  Alternatively I can update PR with a comment in both parseISO and toDate if that is preferred.

Fixes https://github.com/date-fns/date-fns/issues/1601

Also fixed formatting and typo in parseJSON documentation.
"The result will be in the local timezone."

This has caused me some problems.  I am currently Eastern Standard Time (GMT-0500).

So new Date('2020-01-13T00:00:00.000Z') is "Sun Jan 13 2020 00:00:00 GMT-0000" or "Sun Jan 12 2020 19:00:00 GMT-0500".  This is not ambiguous.

The thing that is causing me problems is that the startOfISOWeek has many different answers (roughly a week apart) depending on the local time zone you are in.  In the example above, the start of the ISO week will be "Sun Jan 13 2020 00:00:00" local time if you are at or east of UTC, and it will be "Sun Jan 6 2020 00:00:00" local time if you are west of of UTC.

Is this the intent?  The midnight local time doesn't concern me all that much, but the week apart issue is causing me problems.
This tweet: https://twitter.com/loige/status/1218104381972930560


> #JavaScript dates and times are a bit of a pain. I have been using moment.js in the last few years to ease this pain. Recently, I switched to `date-fns` (https://date-fns.org) and I am loving the simplicity, yet the effectiveness of the library. Totally recommendedüëç

parseISO v2 documentation currently states
> The previous `parse` implementation was renamed to `parseISO`.

parse v2 documentation currently states
> Old `parse` was renamed to `toDate`. Now parse is a new function which parses a string using a provided format.

I think considering the sentence is to divert people who have previously been using v1 parse to the correct v2 equivalent, it only needs to exist in docs for `parse`.  If the sentence exists on `parseISO`, it should appear on `toDate` also.

Additionally I think the sentence would benefit from a more detailed explanation of what happened to the old parse method.  Would this suffice

> The v1 `parse` implementation was split into two functions.  If you have a date|timestamp you should use `toDate`.  If you have a string in ISO 8601 format then you should use `parseISO`.  For strings in other formats you should use the new `parse` implementation which will parse the string using a provided format.
Hi, I'm using version 2.9.0, and I'm importing:

`import { ro } from 'date-fns/locale';`

Everything works fine in development mode, but when I build for production, I get these errors:

`"export 'ro' (imported as 'i19') was not found in 'date-fns'
    at HarmonyImportSpecifierDependency._getErrors (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\dependencies\HarmonyImportSpecifierDependency.js:109:11)
    at HarmonyImportSpecifierDependency.getErrors (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\dependencies\HarmonyImportSpecifierDependency.js:68:16)
    at Compilation.reportDependencyErrorsAndWarnings (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compilation.js:1425:22)
    at hooks.finishModules.callAsync.err (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compilation.js:1221:10)
    at AsyncSeriesHook.eval [as callAsync] (eval at create (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\tapable\lib\HookCodeFactory.js:33:10), <anonymous>:42:1)
    at AsyncSeriesHook.lazyCompileHook (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\tapable\lib\Hook.js:154:20)
    at Compilation.finish (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compilation.js:1216:28)
    at hooks.make.callAsync.err (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compiler.js:662:17)
    at _done (eval at create (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\tapable\lib\HookCodeFactory.js:33:10), <anonymous>:9:1)
    at _err4 (eval at create (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\tapable\lib\HookCodeFactory.js:33:10), <anonymous>:72:22)
    at _addModuleChain (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compilation.js:1148:12)
    at processModuleDependencies.err (D:\@Work\NodeJs\nl-techup\uBid\uBid-App\node_modules\webpack\lib\Compilation.js:1060:9)
    at process._tickCallback (internal/process/next_tick.js:61:11)`

I took a look inside the node_modules, and I was able to find the /locale/ro folder within the 'date-fns'.

For example Indian Standard Timezone IST (https://en.wikipedia.org/wiki/Indian_Standard_Time) +05:30 or 330 minutes the output becomes +5.5:30 but as per ISO 8601 standard it should be +05:30. hourOffset should be "05" and minute offset should be "30" but currently hourOffset is set to "5.5"
When using `formatRelative` and the Spanish locale, it shows the Month (`L`) and the Milliseconds timestamp (`T`) instead of the more commonly used Long localized time (`p`).

So I get:
```
el s√°bado pasado a la 11578700800000
```
instead of:
```
el s√°bado pasado a la 01:00
```

It seems to me that this is not a desired format.

It also only happens when the hour is `01:00:00`:
- Singular: `lastWeek: "'el' eeee 'pasado a la' LT",`
- Plural: `lastWeek: "'el' eeee 'pasado a las' p",`