When a conflict is accidentally resolved (such a pressing `a` twice), there is no way to get back to it with `p` and reedit.
I tried to rebase https://github.com/terraform-providers/terraform-provider-github/pull/96 on top of https://github.com/terraform-providers/terraform-provider-github/pull/108/files and got this.

First I tried to see the result of previous conflict resolution using `[p]`, but it looked like result was not saved (I use `e` and `a` for each change). I edited conflict again, and then the green line appeared at the bottom. I edited one or more conflict before the crash happened.
```

┌─c2463a8d064e5b683571835fea1bb9580ef9cebc  (Incoming Version)──────────────────────────────────────────────────────────────────────────│✔ github/resource_github_reposi│
│func resourceGithubTeamMembershipRead(d *schema.ResourceData, meta interface{}) error {                                                │✔ github/resource_github_reposi│
│ client := meta.(*Owner).client                                                                                                        │✔ github/resource_github_reposi│
│ t, n := parseTwoPartID(d.Id())                                                                                                        │✔ github/resource_github_reposi│
│>>>>>>> c2463a8d064e5b683571835fea1bb9580ef9cebc                                                                                       │✔ github/resource_github_reposi│
│                                                                                                                                       │-> 20. github/resource_github_t│
│                                                                                                                                       │21. github/resource_github_team│
│                                                                                                                                       │22. github/resource_github_team│
│                                                                                                                                       │23. github/resource_github_team│
│                                                                                                                                       │✔ github/resource_github_team_r│
│                                                                                                                                       │                               │
│                                                                                                                                       │                               │
│                                                                                                                                       │                               │
│                                                                                                                                       │                               │
│                                                                                                                                       │                               │
│                                                                                                                                       │                               │
└───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────└───────────────────────────────┘
 [w,a,s,d,e,?] >> panic: runtime error: slice bounds out of range [1:0]

goroutine 274 [running]:
github.com/nsf/termbox-go.PollEvent(0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/home/anatoli/go/src/github.com/nsf/termbox-go/api.go:356 +0x905
github.com/jroimartin/gocui.(*Gui).MainLoop.func1(0xc0000fc480)
	/home/anatoli/go/src/github.com/jroimartin/gocui/gui.go:354 +0x30
created by github.com/jroimartin/gocui.(*Gui).MainLoop
	/home/anatoli/go/src/github.com/jroimartin/gocui/gui.go:352 +0x57
```
Pressing `?` does nothing with latest `go get` version.

![Screenshot from 2019-11-30 06-22-30](https://user-images.githubusercontent.com/8781107/69895048-e8526900-1339-11ea-8e45-d6f4ce14beaa.png)

Add shortcut `b` for selecting both incoming changes.
The `|||||` marker isn't removed when the conflict is resolved and ends up in the codebase.
What about `e` to edit or `o` to open . 

In case I manually want to merge the conflict
I use [yadm] to manage my dotfiles, and occasionally get merge conflicts, which are moderately annoying to clean up. Is there any chance that fac could be made to support fixing conflicts in any given file, not just those in a Git repository?

[yadm]: https://github.com/TheLocehiliosan/yadm
Hi! Thanks for this great tool!

I've tried to configure it as a Git mergetool:

```
git config --global merge.tool fac
```

However, Git ignores it and it runs `vimdiff` for me. Previously, I had `opendiff` configured to start FileMerge and it works. I've also tried various different merge tools like sublimerge and I was expecting this to work tool.

`git-mergetool` command should start the tool with 3 arguments for each file with conflicts. I understand `fac` is supposed to be run for the whole set of merge conflicts and not just single files. However, for starters, it could start for the whole set and ignore the arguments passed to it. Later it could automatically move to the file which was passed to it.

Do you think there's a particular reason why `git-mergetool` would not start `fac` with the above configuration? I've already checked that `fac` is in my `PATH`.

Thanks!