
The ensime dependency causes some problems while trying to build, at least for me.
 
https://github.com/concurrent-programming-in-scala/learning-examples/blob/5fccc9c46bd4460bbc334e07e9a5571fcf214e56/build.sbt#L8
I believe the solution introduces a race condition when there are more than *1*  producer threads.
While the exercise describes only *1* producer thread, I would say it is still a bit misleading for the reader (if I am correct of course.). 
Do you agree?

```
val producer = thread {
    var x = 0
    while (x < 15) {
      if (syncVar.isEmpty) {
        syncVar.put(x)
        x = x + 1
      }

    }
  }
```

```
class SyncVar[T] {

    private var empty: Boolean = true

    private var x: T = null.asInstanceOf[T]


    def put(x: T): Unit = this.synchronized {
      if (!empty) throw new Exception("must be empty")
      else {
        empty = false
        this.x = x
      }
    }

    def isEmpty = synchronized {
      empty
    }

[not shown code]

  }
```
The call to methods `isEmpty` and `put(x:T)` is synchronized. However on the producer thread, they are called on separate lines. Is the following possible:
1. Some producer Thread-1 calls the method `isEmpty`, obtaining the monitor of the syncVar instance.
2. The `isEmpty`method returns `true`.
3. The producer Thread-1 releases the monitor over the syncVar instance. 
4. Some other producer Thread-2 calls the same method `isEmpty` on the same syncVar instance.
5. It also obtains the value of `true`.
6. Producer Thread-2 calls method `put(x:T)`, obtaining the monitor, and effectively inserting a value.
7. Producer Thread-1 calls method `put(x:T)`, obtains the monitor, but because the `syncVar` variable `x` is no longer empty, due to step 6, if throws an exception.
I believe this implementation respects the requirements of the exercise and has the same semantic.

Hello, I'm having trouble with the CheckActors example in the book. When I try to run the following code:

```
class CheckActor extends Actor {

  import akka.actor.{Identify, ActorIdentity}
  val log = Logging(context.system, this)

  override def receive = {
    case path: String =>
      log.info(s"checking path $path")
      log.info(context.self.toString)
      log.info(context.parent.toString)
      context.actorSelection(path) ! Identify(path)
    case ActorIdentity(path, Some(ref)) =>
      log.info(s"found actor $ref at $path")
    case ActorIdentity(path, None) =>
      log.info(s"count not find an actor at path")

  }

}

// In main:
    val checker:ActorRef = ourSystem.actorOf(Props[CheckActor], "checker")
    checker ! "../*"
```

I get the following error (when running in the sbt console):

```
[INFO] [08/03/2016 14:55:29.998] [OurExampleSystem-akka.actor.default-dispatcher-2] [akka://OurExampleSystem/user/checker] checking path ../*
[INFO] [08/03/2016 14:55:29.999] [OurExampleSystem-akka.actor.default-dispatcher-2] [akka://OurExampleSystem/user/checker] Actor[akka://OurExampleSystem/user/checker#419406266]
[INFO] [08/03/2016 14:55:29.999] [OurExampleSystem-akka.actor.default-dispatcher-2] [akka://OurExampleSystem/user/checker] Actor[akka://OurExampleSystem/user]
[INFO] [08/03/2016 14:55:30.006] [OurExampleSystem-akka.actor.default-dispatcher-3] [akka://OurExampleSystem/user/checker] Message [akka.actor.ActorIdentity] from Actor[akka://OurExampleSystem/deadLetters] to Actor[akka://OurExampleSystem/user/checker#419406266] was not delivered. [1] dead letters encountered. This logging can be turned off or adjusted with configuration settings 'akka.log-dead-letters' and 'akka.log-dead-letters-during-shutdown'.
[success] Total time: 0 s, completed Aug 3, 2016 2:55:30 PM
```

I tried it with the code from the code files too, and get the same result (without the extra logging statements). Can you suggest what I might be doing wrong? Thanks.

I think this is more better
