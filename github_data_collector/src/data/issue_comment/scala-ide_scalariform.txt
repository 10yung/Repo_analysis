We are using Scalastyle along with Scalafmt. In our codebase, we have at least one instance of this:

```
    private def someFunctionName(
        argument: ADT[
            OneDataType,
            AnotherDataType,
            AThirdDataType,
```
In the case of a long function declaration like this, Scalastyle, using Scalariform, complains about rule `NoWhitespaceBeforeLeftBracketChecker` being broken, since there is a space after `ADT`. However, the arguments to `ADT` are so long that Scalafmt breaks it into multiple lines. Thus, Scalastyle complains.

Is there a good fix for this? One way is to disable this specific rule, but when it doesn't apply to multiple lines, it's a good rule. Another fix is of course to create a class for this argument such that it fits in one line.
While this works:
```bash
$ scalariform
class A(x:Int,
y:int
)

class A(
  x: Int,
  y: int
)
```

Adding a trailing comma crashes scalariform 2.10:
```bash
$ scalariform
class A(x:Int,
y:Int,
)

Exception in thread "main" java.lang.IllegalArgumentException: requirement failed: Parse tokens differ from expected.
  Actual = 
Token(CLASS,class,0,class)
Token(VARID,A,6,A)
Token(LPAREN,(,7,()
Token(VARID,x,8,x)
Token(COLON,:,9,:)
Token(VARID,Int,10,Int)
Token(COMMA,,,13,,)
Token(VARID,y,15,y)
Token(COLON,:,16,:)
Token(VARID,Int,17,Int)
Token(RPAREN,),22,))
Token(NEWLINES,

,23,

)
  expected = 
Token(CLASS,class,0,class)
Token(VARID,A,6,A)
Token(LPAREN,(,7,()
Token(VARID,x,8,x)
Token(COLON,:,9,:)
Token(VARID,Int,10,Int)
Token(COMMA,,,13,,)
Token(VARID,y,15,y)
Token(COLON,:,16,:)
Token(VARID,Int,17,Int)
Token(COMMA,,,20,,)
Token(RPAREN,),22,))
Token(NEWLINES,

,23,

)
  parseResult = 
CompilationUnit(StatSeq(None,Some(FullDefOrDcl(List(),List(),TmplDef(List(Token(CLASS,class,0,class)),Token(VARID,A,6,A),None,List(),None,Some(ParamClauses(None,List((ParamClause(Token(LPAREN,(,7,(),None,Some(Param(List(),List(),None,Token(VARID,x,8,x),Some((Token(COLON,:,9,:),Type(List(Type(List(GeneralTokens(List(Token(VARID,Int,10,Int))))))))),None)),List((Token(COMMA,,,13,,),Param(List(),List(),None,Token(VARID,y,15,y),Some((Token(COLON,:,16,:),Type(List(Type(List(GeneralTokens(List(Token(VARID,Int,17,Int))))))))),None))),Token(RPAREN,),22,)),Some(Token(COMMA,,,20,,))),None)))),None,None))),List((Token(NEWLINES,

,23,

),None))),Token(EOF,,25,))
	at scala.Predef$.require(Predef.scala:281)
	at scalariform.formatter.SpecificFormatter.fullFormat(SpecificFormatter.scala:54)
	at scalariform.formatter.SpecificFormatter.fullFormat$(SpecificFormatter.scala:27)
	at scalariform.formatter.ScalaFormatter$$anon$1.fullFormat(ScalaFormatter.scala:593)
	at scalariform.formatter.ScalaFormatter$.formatAsEdits(ScalaFormatter.scala:602)
	at scalariform.formatter.ScalaFormatter$.format(ScalaFormatter.scala:586)
	at scalariform.commandline.Main$.$anonfun$process$19(Main.scala:167)
	at scalariform.commandline.Main$.transformSysInToSysOut(Main.scala:209)
	at scalariform.commandline.Main$.process(Main.scala:179)
	at scalariform.commandline.Main$.main(Main.scala:16)
	at scalariform.commandline.Main.main(Main.scala)

```

The same happens with trailing commas in functions:

```bash
$ scalariform
def f(x:Int,
y:Int,
) = x + y

Exception in thread "main" java.lang.IllegalArgumentException: requirement failed: Parse tokens differ from expected.
  Actual = 
Token(DEF,def,0,def)
Token(VARID,f,4,f)
Token(LPAREN,(,5,()
Token(VARID,x,6,x)
Token(COLON,:,7,:)
Token(VARID,Int,8,Int)
Token(COMMA,,,11,,)
Token(VARID,y,13,y)
Token(COLON,:,14,:)
Token(VARID,Int,15,Int)
Token(RPAREN,),20,))
Token(EQUALS,=,22,=)
Token(VARID,x,24,x)
Token(PLUS,+,26,+)
Token(VARID,y,28,y)
Token(NEWLINE,
,29,
)
  expected = 
Token(DEF,def,0,def)
Token(VARID,f,4,f)
Token(LPAREN,(,5,()
Token(VARID,x,6,x)
Token(COLON,:,7,:)
Token(VARID,Int,8,Int)
Token(COMMA,,,11,,)
Token(VARID,y,13,y)
Token(COLON,:,14,:)
Token(VARID,Int,15,Int)
Token(COMMA,,,18,,)
Token(RPAREN,),20,))
Token(EQUALS,=,22,=)
Token(VARID,x,24,x)
Token(PLUS,+,26,+)
Token(VARID,y,28,y)
Token(NEWLINE,
,29,
)
  parseResult = 
CompilationUnit(StatSeq(None,Some(FullDefOrDcl(List(),List(),FunDefOrDcl(Token(DEF,def,0,def),Token(VARID,f,4,f),None,ParamClauses(None,List((ParamClause(Token(LPAREN,(,5,(),None,Some(Param(List(),List(),None,Token(VARID,x,6,x),Some((Token(COLON,:,7,:),Type(List(Type(List(GeneralTokens(List(Token(VARID,Int,8,Int))))))))),None)),List((Token(COMMA,,,11,,),Param(List(),List(),None,Token(VARID,y,13,y),Some((Token(COLON,:,14,:),Type(List(Type(List(GeneralTokens(List(Token(VARID,Int,15,Int))))))))),None))),Token(RPAREN,),20,)),Some(Token(COMMA,,,18,,))),None))),None,Some(ExprFunBody(Token(EQUALS,=,22,=),None,Expr(List(InfixExpr(List(CallExpr(None,Token(VARID,x,24,x),None,List(),None)),Token(PLUS,+,26,+),None,List(CallExpr(None,Token(VARID,y,28,y),None,List(),None))))))),false))),List((Token(NEWLINE,
,29,
),None))),Token(EOF,,30,))
	at scala.Predef$.require(Predef.scala:281)
	at scalariform.formatter.SpecificFormatter.fullFormat(SpecificFormatter.scala:54)
	at scalariform.formatter.SpecificFormatter.fullFormat$(SpecificFormatter.scala:27)
	at scalariform.formatter.ScalaFormatter$$anon$1.fullFormat(ScalaFormatter.scala:593)
	at scalariform.formatter.ScalaFormatter$.formatAsEdits(ScalaFormatter.scala:602)
	at scalariform.formatter.ScalaFormatter$.format(ScalaFormatter.scala:586)
	at scalariform.commandline.Main$.$anonfun$process$19(Main.scala:167)
	at scalariform.commandline.Main$.transformSysInToSysOut(Main.scala:209)
	at scalariform.commandline.Main$.process(Main.scala:179)
	at scalariform.commandline.Main$.main(Main.scala:16)
	at scalariform.commandline.Main.main(Main.scala)
```
With `alignParameters` as false, my code formats as

```
            Importance(10000,
            goal,
                strategy1, strategy2, strategy3, strategy4,
                decCommodityInd, decMoodInd,
                decCurLeaderOpinionInd, incAltLeaderOpinionInd)
```

With `alignParameters` as true, it formats as

```
            Importance(10000,
            goal,
            strategy1, strategy2, strategy3, strategy4,
            decCommodityInd, decMoodInd,
            decCurLeaderOpinionInd, incAltLeaderOpinionInd)
```

If I replace the constant with a variable, it behaves reasonably.

```
           // true
            val numIter = 10000
            Importance(numIter,
                       goal,
                       strategy1, strategy2, strategy3, strategy4,
                       decCommodityInd, decMoodInd,
                       decCurLeaderOpinionInd, incAltLeaderOpinionInd)
           // false
            val numIter = 10000
            Importance(numIter,
                goal,
                strategy1, strategy2, strategy3, strategy4,
                decCommodityInd, decMoodInd,
                decCurLeaderOpinionInd, incAltLeaderOpinionInd)
```

My configuration (through sbt) is

```
import scalariform.formatter.preferences._

ThisBuild / scalariformPreferences := scalariformPreferences.value.
    setPreference(AlignArguments, true).
    setPreference(AlignParameters, true).
    setPreference(DoubleIndentConstructorArguments, true).
    setPreference(DoubleIndentMethodDeclaration, true).
    setPreference(FirstArgumentOnNewline, Prevent).
    setPreference(IndentLocalDefs, true).
    setPreference(IndentSpaces, 4)
```


In this file: https://gist.github.com/justinpitts/8d8789a7f4b1f98ff4e4c0d664a5887b
I think the code between the 

    // format: OFF

and 

    // format: ON

should not be reformatted, but it is.

`Scalariform 0.2.7-SNAPSHOT (runtime Scala 2.13.0-M5)`
or
`addSbtPlugin("org.scalariform" % "sbt-scalariform" % "1.8.2")`
would be desirable IMO
With `AlignParameters` and `AlignArguments` on, when arguments or parameters are named on function call, even when they are all in the same line, if the first argument's name is shorter than the second, spaces are added between the name and the assignment, seemingly trying to "align" it with the second. As in 

```
-   function(arg = 3, muchLongerArg = 13)
+   function(arg          = 3, muchLongerArg = 13)
```

I can't think of any situation where this behaviour can be desired.
This pull request resolves #269.
When I have an anonymous function that returns another anonymous function, I would like to keep the arguments of each consecutive layer in a separate line. However, Scalariform moves them all into a single line, and I could not find a configuration key to change this behaviour.

Here's an example:

**Before:**
```
object Main {
  def foo: Int => Int => String = {
    x: Int =>
      y: Int =>
        "x"
  }
}
```

**After:**
```
object Main {
  def foo: Int => Int => String = { x: Int => y: Int =>
    "x"
  }
}
```

This issue may be similar to #21, but it is _not_ a duplicate. In particular, the example from #21 is not being reformatted.

I use SBT 1.1.1 with Scala 2.12.4 and sbt-scalariform 1.8.2 with scalariform 0.2.5. 

It seems that the change that breaks my example has been deliberately introduced by commit 34a7bbde77b83455e0b511ac4055b4aa0c754a46. 
```scala
def f(implicit i: Int,
      j: Int): Unit
```
is formatted to
```scala
def f(impliciti: Int,
    j: Int
): Unit
```
(default config, "org.scalariform" % "sbt-scalariform" % "1.8.2", sbt.version = 1.0.3)
I usually follow the python convention of leaving 2 blank lines after the imports section, before the body of the code. It would be nice to have a setting to get this spacing convention