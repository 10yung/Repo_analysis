Hello all! Planning V3 of Typed.js currently, and I could use your help! I'm setting up a project board at the moment but this is my first time using it so I'm figuring out how it works. https://github.com/mattboldt/typed.js/projects/1

Here's what kicked off my desire to update: https://github.com/mattboldt/typed.js/pull/92. This PR was added on May 31, 2015. 2015! Nearly 5 years ago! I honestly don't remember why it was never merged, and for that I want to apologize to @tameemsafi.

Furthermore, I checked out Tameem's terrific library, https://github.com/tameemsafi/typewriterjs. I absolutely love how he achieved the effect, his code is very pleasant to read, and its performance is miles ahead of Typed.js. His work is incredibly inspiring, and I suggest anyone looking to learn about authoring a library go check it out. Awesome work, @tameemsafi.

### About the rewrite

One huge thing TypewriterJS has that Typed.js doesn't: usage of `requestAnimationFrame` instead of `setTimeout` or `setInterval`. This new(ish) feature couldn't be more perfect for a typing effect, and I'm excited to implement it. Of course, since Typed.js V3 will be heavily inspired by TypewriterJS, I plan on crediting Tameem wherever possible, and linking his library in my main README. Tameem, if you're reading this, please reach out and let me know your thoughts (me@mattboldt.com)

#### Why have both libraries if they do the same thing?

Well, competition is always good. And I consider it a form of competition because, while this software is open source, it doesn't mean our work doesn't provide value to us, the authors, in other ways. Contributions to OSS looks good on a resume, and I'd be lying if I said Typed.js never helped me land a job. As such, I think mine and other similar libraries must continue to coexist for the betterment of everyone. Because Typed.js has so much traffic and stars, I understand it will be chosen for that fact alone in many cases v.s. alternatives. Because of this, I'm adamant about including Tameem's library at the very top of my README (in addition to anything we discuss).

## TODO

- [ ] Implement `requestAnimationFrame` and a queue-based event system
- [ ] Migrate to `TypeScript`
- [ ] Add a test suite (considering Jest or Mocha)
- [ ] Heavy focus on better docs (I suspect TypeScript will aid in this effort)
- [ ] Built-in support for React, Vue, and more
  - @Orlandster has done some great work on this in his wrapper library, https://github.com/Orlandster/vue-typed-js. If you're able to, Orlando, I've love for you to work on the Vue implementation of V3.
- [ ] Built-in accessibility
  - The "SEO friendly" feature of typed _sort of_ touches on this area, but not nearly enough. I suspect screen reader users experiencing Typed.js are confused by how the content is structured, and I aim to solve that by automatically generating more accessible text content, as well as providing best practice examples in the docs. 
- [ ] Reorganize more advanced features
  - I mentioned in https://github.com/mattboldt/typed.js/pull/432#issuecomment-558765619 that I don't like having too much advanced syntax inside the content itself. Using `^`, `~`, just isn't very intuitive and I believe this can be replaced by the chain structure.
- [ ] Callback hell
  - Typed.js has too many unique callback options. Instead, callbacks should be implemented as part of the chain.
- [ ] Add highlight-to-erase feature

If you made it this far, thanks for sticking around! Please reply to this thread with any questions or ideas. 
<!--
IMPORTANT: If applicable, please use the following format to create a new issue.
If your issue is not created using the format below, it will be closed.
-->

### Description

When I try to use the library I get an console log that says "TypeError: t.el is null". Are there any fixes this?


### Demo
This is my javascript code:
var options = {
    strings: ['<i>First</i> sentence.', '&amp; a second sentence.'],
    typeSpeed: 40
  };
var typed = new Typed('.jsTypingEffect', options);
and I load the scripts in this order:
    <script src="typed.js-2.0.11\lib\typed.min.js"></script>
    <script src="javascript.js"></script>

### Steps to Reproduce

1. [First Step]
2. [Second Step]
3. [and so on...]

**Expected behavior:** [What you expect to happen]
The object to log to the console
**Actual behavior:** [What actually happens]
Error message
**Reproduces how often:** [What percentage of the time does it reproduce?]
Everytime
### Additional Information

Any additional information, configuration or data that might be necessary to reproduce the issue.

```html
<b id="typed">string1</b>
<b id="typed-strings" style="display:none">
    <b>string1</b> <b>string2</b>
</b>
```

The workaround is to empty it via JS before loading your plugin


```
<script>
  document.addEventListener('DOMContentLoaded', function() { var typed = new Typed("#typed", { stringsElement:'#typed-strings', typeSpeed: 40, }); });
</script>
```

or maybe I am missing something? but before I added the above code it wasn't working, I still get this error:
```
TypeError: Cannot read property 'tagName' of null
    at t.value (typed.js@2.0.11:10)
    at new t (typed.js@2.0.11:10)
    at index.html:6
value @ typed.js@2.0.11:10
t @ typed.js@2.0.11:10
(anonymous) @ index.html:6
```
Hi @mattboldt

Im a trying to animate two divs (that use stringElements) on the page that share the same class, so far only the first occurence gets animated.

Here's a jsbin to show you what i'm trying to do. What would be the cleaner way.
https://jsfiddle.net/xbofduaz/

I do want to be able to use stringElements to keep the SEO benefit.
Thanks a lot for letting me know what would be the most elegant solution.
Bruno
### Requirements

<!--
Filling out this template is required.
-->

 - [ ] Have you viewed your changes locally on the demos page, located on https://github.com/mattboldt/typed.js/blob/master/index.html?

 - [ ] If necessary, have you added a new demo to the index.html list of demos? If it's an improvement or small addition, have you added it to an existing demo on the demos page?

 - [ ] If applicable, have you created a fork of the following JSFiddle with your branch's code and your new feature showcased?

<!--

    To include your branch's version of Typed.js, simply add this JavaScript url as a dependency in JSFiddle, and remove the default:

    https://jsfiddle.net/mattboldt/1xs3LLmL/

    ```
    https://rawgit.com/<YOUR GITHUB USERNAME>/typed.js/<YOUR BRANCH NAME>/lib/typed.min.js
    ```
-->

### Description of the Change

<!--

We must be able to understand the design of your change from this description. If we can't get a good idea of what the code will be doing from the description here, the pull request may be closed at the maintainers' discretion.

-->

### Benefits

<!-- What benefits will be realized by the code change? -->

### Issues

<!-- Enter any applicable Issues here -->

Importing doesnt work: https://jsfiddle.net/kx6j1smd/
<!--
IMPORTANT: If applicable, please use the following format to create a new issue.
If your issue is not created using the format below, it will be closed.
-->

### Description

can't type & and < in an input field

### Demo
JSFiddle: https://jsfiddle.net/9L1caqmd/4/

```
var typed = new Typed("#typed", {
    strings: ['1 less than &lt; ...fail:not a single char',
       '2 less than < ... fail:cut off', 
       '3 less than `<` success but bad doc and bad hack', 
       '4 and &amp; fail:not a single char', 
       '5 and  &  fail:cut off', 
       '6 and  `&` success but bad solution', 
       '7 and  `&amp;` success but bad solution'],
    typeSpeed: 0,
    backSpeed: 0,
    attr: 'placeholder',
    bindInputFocusEvents: true,
    loop: true
});
```

**Expected behavior:** The  < and & should be typed, but the html-parser cut it off

**Actual behavior:** The string stop typing before the < and before the &amp;



### Additional Information
There is an undocumented workaround using backtick ` (see the JSFiddle)
but I would prefer a way to bypass the html-parser when dealing with input fields.
Since altering the string for use with typed.js prevent me to use it normally.

back-ticking the whole string would not help, as everything inside the back-tick is typed at once.

There was no problem with version 2.0.9

<!--
IMPORTANT: If applicable, please use the following format to create a new issue.
If your issue is not created using the format below, it will be closed.
-->

### Description

Every now and then, when the shuffle option is enabled and a string has just been typed, the string gets replaced with the next string and that string gets removed and a new string is written in its place.

### Steps to Reproduce

1. Create an instance of typed.js
2. Enable the shuffle option
3. Wait for it to happen

**Expected behavior:** I expect the next string to appear after the typing being emulated by typed.js

**Actual behavior:** The next string instantly appears, gets removed through backspaces, and then a new string is written.

**Reproduces how often:** I can not calculate how often this happens due to it's random nature.
### Description
When using `loop: true` and `smartBackspace: true`, the loop gets stuck when all the strings have been displayed at least once. 

If `smartBackspace: true` is removed, the loop work as expected. 

### Demo
https://jsfiddle.net/vmcqL3kg/

### Steps to Reproduce

1. Let the loop run through every word at least once

**Expected behavior:** Loop to run indefinitely 

**Actual behavior:** Loops stops when every word has been displayed, and looping begins

**Reproduces how often:** Every run

### Additional Information

Code below includes every word used. 
```  
var typed = new Typed('#typed', {
      strings: [
        'gracious',
        'nice',
        'beautiful',
        'amazing',
        'dazzling',
        'astonishing',
        'astounding',
        'jarring',
        'jaw-dropping',
        'stunning',
        'delicious',
        'charming',
        'fine today',
        'gorgeous',
        'stunning',
        'marvelous'
      ],
      showCursor: false,
      shuffle: true,
      smartBackspace: true,
      startDelay: 2500,
      loop: true,
      preStringTyped: (arrayPos, self) => {
        let random = Math.floor( Math.random() * 400 ) + 100;
        self.typeSpeed = random;
        console.log(random);
        self.backSpeed = random / 2;
      },
  } );
```
