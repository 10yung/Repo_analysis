load function by ordinal value
My dll must crash when i use CString or std::string loading from memory by MemmoryModule, event the construct of CString or std::string can not be complete!
Some dlls do not use Native SectionAlignment, instead use SectionAlignment from PE.
Issue 54 should be solved then: https://github.com/fancycode/MemoryModule/issues/54
@fancycode Hello, this library is not working with some special libraries that create virtual environments , If you're interested I can send a a copy of dll in private , they are commercials and I paid them but I can send you.

Let me know if you interested.
Fixes #4 for x64.

Exception-handling code can be added to the loading process using Windows exceptions blocks:
```C
__try {
    proc();
}
__except(EXCEPTION_EXECUTE_HANDLER) {
    // Exception-handling code.
}
```
Currently ANSI version `LoadLibraryA` is used which could fail to load libs with non-latin chars in name
Why not support C#'s DLL?
In the code I can see this:

```c++
/**
 * Execute entry point (EXE only). The entry point can only be executed
 * if the EXE has been loaded to the correct base address or it could
 * be relocated (i.e. relocation information have not been stripped by
 * the linker).
 *
 * Important: calling this function will not return, i.e. once the loaded
 * EXE finished running, the process will terminate.
 *
 * Returns a negative value if the entry point could not be executed.
 */
int MemoryCallEntryPoint(HMEMORYMODULE);
```

Why does the program ends when calling `MemoryCallEntryPoint`? How can I prevent the program to do so?  I want to call the Entry Point in a different thread  and keep doing other stuff.

Thank you
In this function under MemoryModule.c:
```
static BOOL
CopySections(const unsigned char *data, size_t size, PIMAGE_NT_HEADERS old_headers, PMEMORYMODULE module)
{
...
PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module->headers);
for (..) {
  if (section->SizeOfRawData == 0)
  ...
}

```

It looks like this line:

`PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(module->headers);
`
should instead be this or something else:

`PIMAGE_SECTION_HEADER section = IMAGE_FIRST_SECTION(old_headers);
`

This function is called like this:

```
headers = (unsigned char *)allocMemory(code,
        old_header->OptionalHeader.SizeOfHeaders,
        MEM_COMMIT,
        PAGE_READWRITE,
        userdata);
...
result->headers = (PIMAGE_NT_HEADERS)&((const unsigned char *)(headers))[dos_header->e_lfanew];
..
if (!CopySections((const unsigned char *) data, size, old_header, result)) {
```

Hence, the `section` variable is initialized to the SECTION_HEADER in **output** buffer (module->headers) we just allocated. Later, we do an if check using ` if (section->SizeOfRawData == 0)`. The problem is, the output buffer must be zero right after allocation by VirtualAlloc(). Even worse is there are something else performed if the output buffer is not zero which won't be executed at all. So it looks like the code is not behaving in a manner consistent with its initialized value.

Since I am not able to fully understand what these lines are doing. I can only second guess that the initializer is incorrect.

No matter what function I tried it always crashes without any error message.
It says the DLL got loaded fine, and the function loaded fine too, but when executed it just crashes.

My code for reading DLL into memory:
`HANDLE hFile = CreateFileA("C:\\Windows\\SysWOW64\\ntdll.dll", GENERIC_READ, 0, 0, 
                                                OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0);
	if (hFile == NULL) {
		printf("Error opening file: %d", GetLastError());
		return 0;
	}
	DWORD dwSize = GetFileSize(hFile, 0);
	printf("Size: %d : %d\n", dwSize, GetLastError());

	BYTE* buff = new BYTE[dwSize];
	if (ReadFile(hFile, buff, dwSize, 0, 0) == FALSE) {
		printf("Error reading file: %d", GetLastError());
		return 0;
	}`

Typedef for the function:
`typedef NTSTATUS(__stdcall* tdNtTerminateProcess)(HANDLE ProcessHandle, NTSTATUS ExitStatus);`

Thanks for the help :)