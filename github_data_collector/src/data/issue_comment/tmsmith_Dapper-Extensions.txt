Not sure this is an issue but the full framework version was using IDbConnection and the .NET core one needs DbConnection. Is this on purpose? Or I'm missing something?

How do I create a generci repository that injects a connection interface?

I am doing this to implement a base repository now:
```
public async Task<TEntity> GetById(long id)
        {
            return await Query(c => ((DbConnection)c).Get<Task<TEntity>>(id));
        }
```
look like it's missing the T generic and calling the wrong DeleteAsync function 

https://github.com/tmsmith/Dapper-Extensions/blob/dd82ecc6f710bca6d5e5645cbff8da97e411257f/DapperExtensions.Net45/DapperAsyncExtensions.cs#L192
Where is the source code for the DapperExtensions.DotNetCore nuget package?  It links back to this repository, but the csproj files here are all for Dotnet Framework.
I have created a static business data access library that uses dapper & dapper-extensions and created a custom class mapper in order to provide my own table names via a table attribute on my objects. I want to use my library in a web project (ASP.net Web Forms). In order to use my custom mapper in the web project, where would I use this line.

`DapperExtensions.DapperExtensions.DefaultMapper = typeof(MyDapperClassMapper<>);`

Sometimes Insert Async would fail but it doesn't produce an error message for me is they're a way to find out what has go wrong in the model.
I want to extend the dapper and dapper extension classes to use polly for retry policy. Create a wrapper for dapper and dapperextensions classes and implement the methods with Polly and call the original dapper and dapperextension methods inside the wrapper methods.
I have done the following implementation let me know is there any better way of achieving the same

```
public static class DapperExtensionsWithPolly
    {
        private static Policy _policy;
        private static int _retryCount = 5;
        private static readonly ILog4NetService Log = new Log4NetService(MethodBase.GetCurrentMethod().DeclaringType);


        static DapperExtensionsWithPolly()
        {
            _policy = Policy
            .Handle<SqlException>()
            .WaitAndRetry(_retryCount, retryAttempt =>
              TimeSpan.FromSeconds(Math.Pow(2, retryAttempt)),
              (exception, span) =>
              {
                  Log.Error($"{ exception } occured at { _retryCount }");
              });
        }

        //Dapper Extension methods
        public static int CountWithRetry<T>(this IDbConnection connection, object predicate, IDbTransaction transaction = null, int? commandTimeout = null) where T : class
        {
            return _policy.Execute(() => connection.Count<T>(predicate, transaction, commandTimeout));
        }
}
```

https://github.com/tmsmith/Dapper-Extensions/blob/dd82ecc6f710bca6d5e5645cbff8da97e411257f/DapperExtensions/Mapper/PluralizedAutoClassMapper.cs#L36
Have you added support for Oracle with only one thing in mind: support selecting only? Although there are still inserting methods?

I asked this because actually looks like inserting methods are not tested fully, they are failed in case of trying to insert an entity exposing bool properties whose mapped columns having type of NUMBER. 

The underlying Dapper does not support this auto-conversion but some on-top library like DapperExtensions should prepare that.

**It's ridiculous that this simple use case is not tested?**

I can write a simple similar extensions myself within 3 days of working but really I always prefer to not reinventing the wheel.
I'm not sure if this is not updated with the Oracle DB's behavior.
The column name is really kind of case-sensitive especially when using double quotes around.

So why always force capitalizing the column name as in the code (in OracleDialect.cs)

    public override string QuoteString(string value)
    {
            if (value != null && value[0]=='`')
            {
                return string.Format("{0}{1}{2}", OpenQuote, value.Substring(1, value.Length - 2), CloseQuote);
            }
            return value.ToUpper();
    }

I've had a 2-day blocked issue with this before I had to determine to pull the source code to debug it. All my columns are declared with double quotes already, like this:

    CREATE TABLE "C##CLIENT"."SYSTEM_INFO" 
   (	"Key" NVARCHAR2(450) NOT NULL ENABLE, 
	"Value" NUMBER(1,0) NOT NULL ENABLE)

instead of:

   CREATE TABLE "C##CLIENT"."SYSTEM_INFO" 
   (	Key NVARCHAR2(450) NOT NULL ENABLE, 
	Value NUMBER(1,0) NOT NULL ENABLE)

And when quotes are used, for the created table by the first statement above, some query like this will fail with column written in uppercase (with error like "invalid identifier")

    SELECT "SYSTEM_INFO"."KEY" FROM "SYSTEM_INFO"

and it should be written with the column name exactly maintained (as declared by mapping):

    SELECT "SYSTEM_INFO"."Key" FROM "SYSTEM_INFO"

The code above in `OracleDialect` always turns it to "SYSTEM_INFO"."KEY" and that's why it blocked me for nearly 2 days from working continuously.

Why do you think uppercase column names should always be fine with Oracle? And do it just to make the generated query beautifully formatted?

It's a pity that I have to build my own dll of DapperExtensions (with `ToUpper` removed) or reference the whole source code in my solution, which I always want to avoid.
Oracle insert error, error code 00928