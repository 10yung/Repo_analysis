hi,  is there anyway I can insert my own labels for the node legends?

in the code below, i'm able to customise the legends for the color of the edges using   `scale_edge_color_discrete(name="Type of edges", labels=c("Positive","Negative"))
`
but there doesn't seem to be any equivalent function for the geom_node_point?

```
ggraph(test, layout = 'linear', circular = TRUE) +      
  geom_edge_arc(aes(colour = as.factor(pos), alpha=-weight), edge_width=3) +
  scale_edge_alpha(guide=FALSE)+
  scale_edge_color_discrete(name="Type of edges", labels=c("Positive","Negative"))+
  geom_node_point(aes(colour = Regions),size=10, shape=19) +
  scale_shape_discrete(name="Type of edges")+
  geom_node_text(aes(label = name, x = x * 1.04, y = y* 1.04,
                     angle = ifelse(atan(-(x/y))*(180/pi) < 0,
                                    90 + atan(-(x/y))*(180/pi),
                                    270 + atan(-x/y)*(180/pi)),
                     hjust = ifelse(x > 0, 0 ,1)), size=10,colour="white") +
  theme_graph(background = 'black', text_colour = 'white', bg_text_colour = 'white',)+
  expand_limits(x = c(-limit, limit), y = c(-limit, limit))+
  theme(legend.title=element_text(size=30,face = "bold"), legend.text=element_text(size=30,))

```
Adding labels to `geom_edge_parallel` causes some edges to collapse onto each other.

(Perhaps labels and parallel edges are not a great idea, but it could be nice to display two edges in opposing directions, instead of using arcs.)

Reprex:

```
library(ggraph)
library(tidygraph)

gr <- create_notable('bull') %>%
  convert(to_directed) %>%
  bind_edges(data.frame(from = c(1, 2, 2, 3), to = c(2, 1, 3, 2))) %E>%
  mutate(class = sample(letters[1:3], 9, TRUE)) %N>%
  mutate(class = sample(c('x', 'y'), 5, TRUE))

ggraph(gr, 'stress') +
  geom_edge_parallel()

ggraph(gr, 'stress') +
  geom_edge_parallel(
    aes(label = 1), 
    angle_calc = 'along', label_dodge = grid::unit(20, 'points')
  )
```

The first works fine:

![image](https://user-images.githubusercontent.com/15309336/72193229-566c6000-33bd-11ea-84b6-5beafdad450a.png)

But for the second (with labels), there are edges that are now on top of each other again.

![image](https://user-images.githubusercontent.com/15309336/72193272-81ef4a80-33bd-11ea-99fc-f30a0b280e13.png)

(P.S.: You can also see that `label_dodge` appears to be calculated from middle of the group of edges, and not each individual edge, but this may be difficult to fix.)
I like those and I think they can work well for some hierarchical data
https://creativecoding.soe.ucsc.edu/pdfs/Dang_CactusTree_PacificVis_2017.pdf
https://cactustrees.github.io/
```r
library(tidygraph)
#> 
#> Attaching package: 'tidygraph'
#> The following object is masked from 'package:stats':
#> 
#>     filter

network <- structure(list(author = c("Herman G. Van De Werfhorst", "Herman G. Van De Werfhorst", 
                                     "Herman G. Van De Werfhorst", "Herman G. Van De Werfhorst", "Herman G. Van De Werfhorst", 
                                     "Thijs Bol", "Thijs Bol", "Thijs Bol", "Thijs Bol", "Thijs Bol"
                                     ), coauthors = c("Thijs Bol", "Daniele Checchi", "Frank Van Tubergen", 
                                                      "István György Tóth", "Jonathan Jan Benjamin Mijs", "Herman G. Van De Werfhorst", 
                                                      "Andrea Forster", "Jaap Dronkers", "Arnout Van De Rijt", "Christina Ciocca Eller"
                                                      )), row.names = c(NA, 10L), class = "data.frame")



graph <-
  as_tbl_graph(network) %>%
  mutate(closeness = suppressWarnings(tidygraph::centrality_closeness()))

# This is unexpected
# I have ggplot2 3.2.1 and ggraph 2.0.0

graph %>%
  ggraph::ggraph(layout = "kk") +
  ggraph::geom_edge_link(ggplot2::aes(color = as.character(from)), show.legend = FALSE)
```
![image](https://user-images.githubusercontent.com/8180025/71998902-b984b800-3240-11ea-8ef3-467f4bce5cc4.png)

```r
# Same thing but loading ggraph through library

library(ggraph)
#> Loading required package: ggplot2
graph %>%
  ggraph(layout = "kk") +
  geom_edge_link(aes(color = as.character(from)), show.legend = FALSE)
```
![image](https://user-images.githubusercontent.com/8180025/71998946-cb665b00-3240-11ea-9f24-927758b40613.png)

Created on 2020-01-08 by the reprex package (v0.3.0)

Session info

```r
devtools::session_info()
#> ─ Session info ───────────────────────────────────────────────────────────────
#>  setting  value                       
#>  version  R version 3.6.2 (2019-12-12)
#>  os       Ubuntu 18.04.3 LTS          
#>  system   x86_64, linux-gnu           
#>  ui       X11                         
#>  language en_GB:en                    
#>  collate  en_GB.UTF-8                 
#>  ctype    en_GB.UTF-8                 
#>  tz       Europe/Madrid               
#>  date     2020-01-08                  
#> 
#> ─ Packages ───────────────────────────────────────────────────────────────────
#>  package      * version     date       lib source                            
#>  assertthat     0.2.1       2019-03-21 [1] CRAN (R 3.6.0)                    
#>  backports      1.1.5       2019-10-02 [1] CRAN (R 3.6.1)                    
#>  callr          3.4.0       2019-12-09 [1] CRAN (R 3.6.2)                    
#>  cli            2.0.0       2019-12-09 [1] CRAN (R 3.6.1)                    
#>  colorspace     1.4-1       2019-03-18 [1] standard (@1.4-1)                 
#>  crayon         1.3.4       2017-09-16 [1] CRAN (R 3.6.0)                    
#>  curl           4.3         2019-12-02 [1] CRAN (R 3.6.1)                    
#>  desc           1.2.0       2018-05-01 [1] CRAN (R 3.6.0)                    
#>  devtools       2.2.1.9000  2019-10-14 [1] Github (r-lib/devtools@13f3e52)   
#>  digest         0.6.23      2019-11-23 [1] CRAN (R 3.6.1)                    
#>  dplyr          0.8.3       2019-07-04 [1] CRAN (R 3.6.1)                    
#>  ellipsis       0.3.0       2019-09-20 [1] CRAN (R 3.6.1)                    
#>  evaluate       0.14        2019-05-28 [1] standard (@0.14)                  
#>  fansi          0.4.0       2018-10-05 [1] CRAN (R 3.6.0)                    
#>  farver         2.0.1       2019-11-13 [1] CRAN (R 3.6.1)                    
#>  fs             1.3.1       2019-05-06 [1] standard (@1.3.1)                 
#>  ggforce        0.3.1.9000  2020-01-08 [1] Github (thomasp85/ggforce@b21e445)
#>  ggplot2      * 3.2.1       2019-08-10 [1] CRAN (R 3.6.2)                    
#>  ggraph       * 2.0.0       2019-09-02 [1] standard (@2.0.0)                 
#>  ggrepel        0.8.1       2019-05-07 [1] standard (@0.8.1)                 
#>  glue           1.3.1.9000  2020-01-07 [1] Github (tidyverse/glue@b9ffe6c)   
#>  graphlayouts   0.5.0       2019-08-20 [1] CRAN (R 3.6.2)                    
#>  gridExtra      2.3         2017-09-09 [1] standard (@2.3)                   
#>  gtable         0.3.0       2019-03-25 [1] CRAN (R 3.6.0)                    
#>  highr          0.8         2019-03-20 [1] standard (@0.8)                   
#>  htmltools      0.4.0       2019-10-04 [1] CRAN (R 3.6.1)                    
#>  httr           1.4.1       2019-08-05 [1] CRAN (R 3.6.1)                    
#>  igraph         1.2.4.2     2019-11-27 [1] CRAN (R 3.6.2)                    
#>  knitr          1.26        2019-11-12 [1] CRAN (R 3.6.1)                    
#>  labeling       0.3         2014-08-23 [1] standard (@0.3)                   
#>  lazyeval       0.2.2       2019-03-15 [1] CRAN (R 3.6.0)                    
#>  lifecycle      0.1.0       2019-08-01 [1] CRAN (R 3.6.1)                    
#>  magrittr       1.5         2014-11-22 [1] CRAN (R 3.6.0)                    
#>  MASS           7.3-51.4    2019-04-26 [1] standard (@7.3-51.)               
#>  memoise        1.1.0.9000  2019-11-20 [1] Github (hadley/memoise@d7782b1)   
#>  mime           0.7         2019-06-11 [1] CRAN (R 3.6.0)                    
#>  munsell        0.5.0       2018-06-12 [1] standard (@0.5.0)                 
#>  pillar         1.4.3       2019-12-20 [1] CRAN (R 3.6.2)                    
#>  pkgbuild       1.0.6       2019-10-09 [1] CRAN (R 3.6.1)                    
#>  pkgconfig      2.0.3       2019-09-22 [1] CRAN (R 3.6.1)                    
#>  pkgload        1.0.2       2018-10-29 [1] standard (@1.0.2)                 
#>  polyclip       1.10-0      2019-03-14 [1] CRAN (R 3.6.2)                    
#>  prettyunits    1.0.2       2015-07-13 [1] CRAN (R 3.6.0)                    
#>  processx       3.4.1       2019-07-18 [1] CRAN (R 3.6.1)                    
#>  ps             1.3.0       2018-12-21 [1] CRAN (R 3.6.0)                    
#>  purrr          0.3.3       2019-10-18 [1] CRAN (R 3.6.1)                    
#>  R6             2.4.1       2019-11-12 [1] CRAN (R 3.6.1)                    
#>  Rcpp           1.0.3       2019-11-08 [1] CRAN (R 3.6.1)                    
#>  remotes        2.1.0       2019-06-24 [1] CRAN (R 3.6.1)                    
#>  rlang          0.4.2       2019-11-23 [1] CRAN (R 3.6.1)                    
#>  rmarkdown      1.18        2019-11-27 [1] CRAN (R 3.6.1)                    
#>  rprojroot      1.3-2       2018-01-03 [1] CRAN (R 3.6.0)                    
#>  scales         1.1.0       2019-11-18 [1] CRAN (R 3.6.1)                    
#>  sessioninfo    1.1.1       2018-11-05 [1] standard (@1.1.1)                 
#>  stringi        1.4.3       2019-03-12 [1] CRAN (R 3.6.0)                    
#>  stringr        1.4.0       2019-02-10 [1] CRAN (R 3.6.0)                    
#>  testthat       2.3.1       2019-12-01 [1] CRAN (R 3.6.2)                    
#>  tibble         2.1.3       2019-06-06 [1] CRAN (R 3.6.0)                    
#>  tidygraph    * 1.1.2       2019-02-18 [1] CRAN (R 3.6.2)                    
#>  tidyr          1.0.0       2019-09-11 [1] CRAN (R 3.6.1)                    
#>  tidyselect     0.2.5       2018-10-11 [1] standard (@0.2.5)                 
#>  tweenr         1.0.1       2018-12-14 [1] standard (@1.0.1)                 
#>  usethis        1.5.1       2019-07-04 [1] CRAN (R 3.6.1)                    
#>  vctrs          0.2.99.9001 2020-01-07 [1] Github (r-lib/vctrs@ab84679)      
#>  viridis        0.5.1       2018-03-29 [1] standard (@0.5.1)                 
#>  viridisLite    0.3.0       2018-02-01 [1] standard (@0.3.0)                 
#>  withr          2.1.2       2018-03-15 [1] CRAN (R 3.6.0)                    
#>  xfun           0.11        2019-11-12 [1] CRAN (R 3.6.1)                    
#>  xml2           1.2.2       2019-08-09 [1] CRAN (R 3.6.1)                    
#>  yaml           2.2.0       2018-07-25 [1] standard (@2.2.0)                 
#> 
#> [1] /usr/local/lib/R/site-library
#> [2] /usr/lib/R/site-library
#> [3] /usr/lib/R/library
```r

Hey @thomasp85 

Thanks to your awesome package, I have managed to obtain the following plot:

![image](https://user-images.githubusercontent.com/8875533/71047326-483c7280-2176-11ea-8ad5-888fac20019d.png)


However, in order to make it perfect, I'd like to arrange the order of the nodes for the items (Q1, Q2 etc.) so that they are for instance, from the darker to the most pale (i.e., arranged by the strength of their link).

I tried arranging the order of the nodes, but it doesn't seem to have an effect. What would be the simplest way to achieve that? Thanks ☺️ 
Is there a way to change the file download name from "diagram" to a custom name?

To be more specific when you "download as png", the image that is created has the file name "diagram". That is what I would like to change.

Thanks!
Hi Thomas,

I don't know if this is a legitimate issue, but if it saves someone like me half an hour of trying to debug my code, it might be useful.

I am used to using US spelling of words, and ggplot2 provides function and argument synonyms for US and UK spelling, such as `summarize()` and `summarise()` or `scale_color_manual()` and `scale_colour manual()`.

What I've just learned after going crazy cuz my code doesn't work, is that ggraph (or at least `geom_edge_arc()`) only works with the UK spelling, so an argument `color = "grey"` doesn't work, but `colour = "grey"` is fine. 
Maybe it's easy or maybe it's difficult to implement both options, I don't know, but at least to have it as a reference here.

Cheers.
Is there some way to segment nodes into multiple sections of different colours? I'm imagining something where a node belongs to, say, two categories and can be split into a blue half and a green half. If not, could this be considered for a future release?
Does ggraph somehow allow for 'chord intersection diagrams'? I haven't found a single package in R that can do it, yet it's extremely powerful for showing complex intersections between sets.

It requires nodes to be plotted in a circle and grouped by set (some category). Nodes that are in multiple sets should be plotted within each set in the circle, and joined by an edge. Ideally, intersecting nodes are also grouped and a single 'fat' edge is used to join the nodes in both sets.

Giovanni Gherdovich explains the concept here: http://www.gghh.name/dibtp/2014/11/10/venn-diagrams-are-so-eighteenth-century.html
I noticed a few small typos in ggraph documentation and fixed them.