The animation for `DGActivityIndicatorThreeDotsAnimation` is not staggered like in the gif preview. All dots grow and shrink at the same time instead of staggering the way the gif on this repository shows. The solution can be made in `DGActivityIndicatorThreeDotsAnimation.m` 

Change:  `animation.beginTime = beginTime;`

To: `animation.beginTime = beginTime+((0.5f/3.0f)*(float)i);`
Can you please add support for installation through Carthage?
We are using loader type 9 and we face issue when starting and ending loader animation is blinking the hole screen with loader animation.

`
for (int i = 0; i < activityTypes.count; i++) {

        DGActivityIndicatorView *activityIndicatorView = [[DGActivityIndicatorView alloc] initWithType:(DGActivityIndicatorAnimationType)[activityTypes[i] integerValue] tintColor:[UIColor whiteColor]];
        CGFloat width = self.view.bounds.size.width / 5.0f;
        CGFloat height = self.view.bounds.size.height / 7.0f;
        activityIndicatorView.frame = CGRectMake(width * (i % 7), height * (int)(i / 7), width, height);
        [self.view addSubview:activityIndicatorView];
        [activityIndicatorView startAnimating];

    }`

宽度应该是除以7，不是除以5
The display project doesn't actually show all the items because their width is /5 meanwhile you're using a %7 for the x position. The .gif in the readme (which looks like it just came from the sample project) doesn't actually display all the options.
Great library! Was thinking it would be helpful for users of this library if you add the type names used for the various indicators to the graphic in the README so that it is clear which is which.
this fixed a bug where the component didn't update proper on tint color change

```
- (void)setTintColor:(UIColor *)tintColor {
    if (![_tintColor isEqual:tintColor]) {
        _tintColor = tintColor;
        
        [self setupAnimation];
        
//        CGColorRef tintColorRef = tintColor.CGColor;
//        for (CALayer *sublayer in _animationLayer.sublayers) {
//            sublayer.backgroundColor = tintColorRef;
//            
//            if ([sublayer isKindOfClass:[CAShapeLayer class]]) {
//                CAShapeLayer *shapeLayer = [[CAShapeLayer alloc] init];
//                shapeLayer.strokeColor = tintColorRef;
//                shapeLayer.fillColor = tintColorRef;
//            }
//        }
    }
}
```
Hi @gontovnik,

Would it be possible to add Carthage support to your library?