Noticed that setting display=True without an encoder was failing rather than intuitively picking the display encoder in  https://github.com/nteract/scrapbook/issues/65.
We need to change the setup.py to indicate the library is python 3.5+ only, and do a pass for any `bytes`/`str` checks in the code that should be simplified to the python 3 variant only.

We'll probably pin this to 0.4 release rather than doing a major release since this project is still a beta project without a 1.0 release yet.
I am trying to read notebooks in a s3 bucket that is located in the non-AWS S3 compatible object store using:

```
import scrapbook as sb
book = sb.read_notebooks('s3://my-bucket/')
```
But I get an error saying my Access Key Id does not exist:
```
ClientError: An error occurred (InvalidAccessKeyId) when calling the ListObjectsV2 operation: The AWS Access Key Id you provided does not exist in our records.
```

I can access the bucket contents from boto3 successfully. 

Am I missing anything here in the configuration with respect to endpoint url?
I am trying to create PDF reports from Jupyter notebook outputs (graphs, tables, visualizations, ...) using scrapbook. 

I been trying to get the scraps, and somehow convert that data into a PDF report, is scrapbook the best way? How could that be done.

If not do you suggest me taking a look at any other nteract tool?

Thank you.
Hello, I just use papermill and scrapbook recently and they are fantastic. I have a small issue now and I'm sorry if it's a little naive.

When I load a single notebook with scrapbook, I can access the parameters I use for papermill

```python
import scrapbook as sb
nbs = sb.read_notebook(path/to/notebook)
nbs.parameters
```

However, when I load all the notebooks from a directory, I can not find where is the parameters for each notebook.
book = sb.read_notebooks('result/')
```python
book = sb.read_notebooks(directory/to/notebooks)
```

Can I know how to access the parameters of each notebook in the latter case?
It is convenient to use an ipython console to quickly look for scraps using `sb.read_notebooks`, so I wondered what would happen if I try `glue` outside a notebook environment like this.

When I tried this, there was no error message or anything so my question is:

Should there be an error message? Does anything happen? Should something happen?
Hello, I'm using Papermill to create a a directory with output notebooks. In those notebooks I have used sb.glue("Word Count", df_sum, "display") to glue a data frame then using sb.reglue in another. So, in this summary notebook I have the reglue("Word Count") for each of the files in the directory, which then displays ~70 of the same data frames run on different data using Papermill. I would like to take a sum of the values of a certain row across all of the data frames in this summary notebook that uses reglue. Is there a way that you suggest I go about doing this? I am having trouble because when I reglue I am unsure of how I can actually "touch" the data in the reglued data frame to do an operation across many, such as the sum. Thanks in advance!
In conversation with @MSeal I raised an issue that as a new developer it is somewhat difficult to begin contributing to this project. Out of concerns around bus-factor and long term sustainability, we arrived at the idea that we should have better developer documentation.  

This came up in part because of #37 and how much is changing as a result of introducing external reference based storage. I in part wouldn't know how to review it because I don't know how it relates to the current way of internally organizing all of the logic.

My proposal is that before making massive architectural changes, we should try to express how the pieces are intended to work together today. That way the changes can be described at a higher level that is distinct from the details of the implementation.

In the nteract meeting, @captainsafia suggested that we create this issue and tag @willingc who has been amazing for helping solidify efforts like these.
This will help explain where and how data is persisted / recalled and how the api calls fit in.
This is arising from some confusion I'm having around the current glue displaying api. I am likely to create a few issues like thisâ€¦ I'm guessing most of them will be closed without action.

https://github.com/nteract/scrapbook/blob/e06182f034c9ee231e491d66047c191e1d0d0f07/scrapbook/api.py#L82-L84

The comment seems to say one thing is intended and then the behaviour is otherwise, where if the display is not None, and encoder is undefined, then it is assumed to not be display.

However, if I'm defining a display type (so display would be not None but also would not evaluate to False), it would seem to be reasonable to encode it as a display as well (without needing to declare it as the display encoder). 

So should the logic earlier include something like 

```
if encoder is None and display:
    encoder = "display"
```

?