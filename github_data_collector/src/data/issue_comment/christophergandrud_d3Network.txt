Hi - thanks for this package, tried with shiny and works well!

the `parentElement` parameter currently doesn't work with `d3Sankey()` because of following references to "chart" in `templates.R`:
`#chart { height: 500px; }`
`/*<p id=\"chart\"></p>*/`

Another feature that would be helpful.

I currently use d3Network (which is outstanding) because i have tried and failed downloading networkD3 from Github (Windows and firewalls). Any idea when you plan on releasing networkD3 to CRAN? Excited to see in Shiny. Also need htmlwidget up there i guess.

Sorry if this is the wrong place to post.

Hi,

Is it possible to change the size of each node based on a vector as a parameter?
I haven't found anything in document or stackoverflow...
Thanks.

When I run the d3Network package I get the below scrolling html in the console vice a webpage with the network depicted. The sample is directly off of the d3Network package site.
-Jake

> require(d3Network)
> Loading required package: d3Network
> Source <- c("A", "A", "A", "A", "B", "B", "C", "C", "D")
> Target <- c("B", "C", "D", "J", "E", "F", "G", "H", "I")
> NetworkData <- data.frame(Source, Target)
> d3SimpleNetwork(NetworkData, width = 400, height = 250)

```
    <!DOCTYPE html>
    <meta charset="utf-8">
    <body> 
```

 <style>
.link {
stroke: #666;
opacity: 0.6;
stroke-width: 1.5px;
}
.node circle {
stroke: #fff;
opacity: 0.6;
stroke-width: 1.5px;
}
text {
font: 7px serif;
opacity: 0.6;
pointer-events: none;
}
</style>

<script src=http://d3js.org/d3.v3.min.js></script>


<script> 
 var links = [ { "source" : "A", "target" : "B" }, { "source" : "A", "target" : "C" }, { "source" : "A", "target" : "D" }, { "source" : "A", "target" : "J" }, { "source" : "B", "target" : "E" }, { "source" : "B", "target" : "F" }, { "source" : "C", "target" : "G" }, { "source" : "C", "target" : "H" }, { "source" : "D", "target" : "I" } ] ; 
 var nodes = {}

// Compute the distinct nodes from the links.
links.forEach(function(link) {
link.source = nodes[link.source] ||
(nodes[link.source] = {name: link.source});
link.target = nodes[link.target] ||
(nodes[link.target] = {name: link.target});
link.value = +link.value;
});

var width = 400
height = 250;

var force = d3.layout.force()
.nodes(d3.values(nodes))
.links(links)
.size([width, height])
.linkDistance(50)
.charge(-200)
.on("tick", tick)
.start();

var svg = d3.select("body").append("svg")
.attr("width", width)
.attr("height", height);

var link = svg.selectAll(".link")
.data(force.links())
.enter().append("line")
.attr("class", "link");

var node = svg.selectAll(".node")
.data(force.nodes())
.enter().append("g")
.attr("class", "node")
.on("mouseover", mouseover)
.on("mouseout", mouseout)
.on("click", click)
.on("dblclick", dblclick)
.call(force.drag);

node.append("circle")
.attr("r", 8)
.style("fill", "#3182bd");

node.append("text")
.attr("x", 12)
.attr("dy", ".35em")
.style("fill", "#3182bd")
.text(function(d) { return d.name; });

function tick() {
link
.attr("x1", function(d) { return d.source.x; })
.attr("y1", function(d) { return d.source.y; })
.attr("x2", function(d) { return d.target.x; })
.attr("y2", function(d) { return d.target.y; });

node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
}

function mouseover() {
d3.select(this).select("circle").transition()
.duration(750)
.attr("r", 16);
}

function mouseout() {
d3.select(this).select("circle").transition()
.duration(750)
.attr("r", 8);
}
// action to take on mouse click
function click() {
d3.select(this).select("text").transition()
.duration(750)
.attr("x", 22)
.style("stroke-width", ".5px")
.style("opacity", 1)
.style("fill", "#E34A33")
.style("font", "17.5px serif");
d3.select(this).select("circle").transition()
.duration(750)
.style("fill", "#E34A33")
.attr("r", 16)
}

// action to take on mouse double click
function dblclick() {
d3.select(this).select("circle").transition()
.duration(750)
.attr("r", 6)
.style("fill", "#E34A33");
d3.select(this).select("text").transition()
.duration(750)
.attr("x", 12)
.style("stroke", "none")
.style("fill", "#E34A33")
.style("stroke", "none")
.style("opacity", 0.6)
.style("font", "7px serif");
}

</script>

 </body>

I have a dense network, and when my mouse hovers over nodes, the label is sometimes obstructed by other nodes. I would love it if the text was 'on top of' all nodes. 

I tried my hand at this myself in the code below. The weird thing is that the stand-alone version of the code works fine when opened as an html file. But when I give it to shiny using cat() and htmlOutput(), the next labels appear at the bottom of the screen.

 <style>
.link {
stroke: #666;
opacity: 1;
stroke-width: 1.5px;
}

.node circle {
stroke: #fff;
opacity: 1;
stroke-width: 1.5px;
}

.node:not(:hover) .nodetext {
display: none;
}

text {
font: 7px serif;
opacity: 1;
pointer-events: none;
}
</style>

<script src=http://d3js.org/d3.v3.min.js></script>


<script>
 var nodes = [ { "name" : "Bart ", "group" : 5 }, { "name" : "Lisa ", "group" : 4 }, { "name" : "Marge ", "group" : 9 }, { "name" : "Homer ", "group" : 1 }, { "name" : "Smithers ", "group" : 5 }, { "name" : "Maggie ", "group" : 5 }];
 var links = [ { "source" : 0, "target" : 4, "value" : 1 }];
 var width = 800
height = 800;

var color = d3.scale.category20();

var force = d3.layout.force()
.nodes(d3.values(nodes))
.links(links)
.size([width, height])
.linkDistance(50)
.charge(-120)
.on("tick", tick)
.start();

var svg = d3.select("#networkPlot").append("svg")
.attr("width", width)
.attr("height", height);

var link = svg.selectAll(".link")
.data(force.links())
.enter().append("line")
.attr("class", "link")
.style("stroke-width", function(d) { return Math.sqrt(d.value); });


//added tooltip
var tooltip = d3.select("body")
    .append("div")
    .style("position", "absolute")
    .style("color", "black")
    .style("background-color", "#FEFCFF")
    .style("border", "solid 1 #726E6D")
    .style("visibility", "hidden");

    
//updated mouseover and mouseout, added mousemove   
var node = svg.selectAll(".node")
.data(force.nodes())
.enter().append("g")
.attr("class", "node")
.style("fill", function(d) { return color(d.group); })
.style("opacity", 1)
.on("mouseover", function(d) {
     tooltip.html(d.name)
     .style("visibility", "visible")
     .attr("cursor", "hand");
 })
 .on("mousemove", function(){
     tooltip.style("top", (d3.event.pageY - 10)+"px")
     .style("left",(d3.event.pageX + 10)+"px");
 })
 .on("mouseout", function(){
    tooltip.style("visibility", "hidden");
 })
.call(force.drag);

node.append("circle")
.attr("r", 6)

function tick() {
link
.attr("x1", function(d) { return d.source.x; })
.attr("y1", function(d) { return d.source.y; })
.attr("x2", function(d) { return d.target.x; })
.attr("y2", function(d) { return d.target.y; });

node.attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
}


</script>

It would be nice if this package could produce charts from igraph package objects. I might start writing some conversion functions for contribution if you think its worth it...

Add capabilities for [curved force links](http://bl.ocks.org/mbostock/4600693).

Highlight node edges when a node is hovered over (as already done with `d3Sankey`).

Thanks to @justmytwopence for the suggestion. 

Include the option to create force-collapsible graphs: http://mbostock.github.io/d3/talk/20111116/force-collapsible.html
