
The following types (attributes) are automatically added by the compiler when using a where clause with an unmanaged type constraint.
`public static void Foo<T>() where T : unmanaged`

Having duplicated attributes of this type breaks the assembly and usage of those methods because these attributes don't get recognized anymore.

`Microsoft.CodeAnalysis.EmbeddedAttribute`
`System.Runtime.CompilerServices.IsUnmanagedAttribute`

It would be possible to add special behaviour to every attribute that has the `[Embedded]` attribute applied or to exclude both of them during merging.
Both of them (even the `EmbeddedAttribute` itself has them).

Edit:
I could implement this if one of the above fixes are appropriate.

From the documentation I understand il-repack is created to replace il-merge. We would like to replace it, but I don't understand how. We currently use a publish profile to publish our asp.net web application. This publish profile is used by msbuild to deploy our website, with a command something like:

`
msbuild.exe ourprojectfile.csproj /p:DeployOnBuild=true /p:PublishProfile="publishprofile.xml"`

the publish profile contains options like this:

`
<WDPMergeOption>MergeAllOutputsToASingleAssembly</WDPMergeOption>
<UseMerge>True</UseMerge>
`

to enable merging the output assemblies of the precompile. However, msbuild uses ilmerge.exe by default to do this. What can i do to tell msbuild to use il-repack?
I have a .NET 2.0 assembly and a .NET 4.0 assembly. Is there any way to merge the 2.0 into a 4.0 assembly and tell it to use 2.0 still? I don't think this is possible but thought I would ask the question.
Hi guys I ran to this issue and I know how to solve. I just want to make sure, that you guys can find the resolution and authors can look into it.

I did update from version 2.0.17 from 2.0.16 and it broke my build. I suppose it's something with the 'fullpath' variable in the Target triggered AfterTargets=Build:
![image](https://user-images.githubusercontent.com/32060653/60399182-16e8cf80-9b61-11e9-8a6d-62b78b069312.png)

The error I got after build is like this:
![image](https://user-images.githubusercontent.com/32060653/60399213-734bef00-9b61-11e9-945d-3f7904ae7b14.png)

So what I did? I just removed the nuget from my local machine:
![image](https://user-images.githubusercontent.com/32060653/60399221-ac845f00-9b61-11e9-97fe-2e26f81e2a0c.png)

And suddenly everything works:
![image](https://user-images.githubusercontent.com/32060653/60399237-e2c1de80-9b61-11e9-8066-5d9596f449c0.png)

From what I went through I'm not probably doing it by my custom Targets, it looks like the 'fullpath' variable cannot resolve multiple versions.
Is there anyway to NOT merge app.config files?

Even if not, can you point me to where in the source code this app.config merging is done so I can comment it out?

The problem I have is I have the same assembly redirects in multiple app.config files, the resulting merged file has duplicates which then causes issues. It's easier for me to just put everything in the main app.config and then just simply not merge it.
I get the following error regarding "merge configuration files"

I'm assuming something is malformed within the config files themselves but I'm unsure what. How can I debug this?

> ERROR: Failed to merge configuration files: System.ArgumentNullException: 'column' argument cannot be null.
> Parameter name: column
>    at System.Data.DataKey..ctor(DataColumn[] columns, Boolean copyColumns)
>    at System.Data.Merger.GetSrcKey(DataTable src, DataTable dst)
>    at System.Data.Merger.MergeTable(DataTable src, DataTable dst)
>    at System.Data.Merger.MergeTableData(DataTable src)
>    at System.Data.Merger.MergeDataSet(DataSet source)
>    at System.Data.DataSet.Merge(DataSet dataSet, Boolean preserveChanges, MissingSchemaAction missingSchemaAction)
>    at System.Data.DataSet.Merge(DataSet dataSet)
>    at ILRepacking.ConfigMerger.Process(ILRepack repack) in C:\Temp\il-repack-2.0.17\ILRepack\ConfigMerger.cs:line 48
> INFO: Finished in 00:00:01.7749144
I want to merge just 4 assemblies but not all the nuget package dlls as they are quite large and it increases load time if I do this.

How can I use ilrepack to just repack some DLLs but not all? If I try doing just some I get "failed to resolve assembly" errors.
I found more problems when I repack.

ILRepack updates token's RID of ExportedType in AddExportedTypes function (cecil/Mono.Cecil/AssemblyWriter.cs).
As I know, an ExportedType can have a DeclaringType. And DeclaringType also has a token. 
I cannot find any code which updates the token of DeclaringType. It keeps old RID which points to invalid ExportedType.
In CoreCLR, it throws an exception because DeclaringType of ExportedType does not contain the ExportedType.
I developed DeclaringType's token updates in my local source code, then it works well.

Actually, I don't know this repo is the correct place for this issue. If not, I will report to https://github.com/jbevain/cecil.
Thank you.
I am testing il-repack in CoreCLR. It improves memory usages and launching time in our environment. Thank you so much. :)
However, I found some issues and one of them is about empty Win32Resource.
When images don't have actual Win32Resource data, ILRepack generates an address (non-zero value) and a size (0 value) for Win32Resource  Then CoreCLR runtime checks whether the address is in a valid Win32Resource directory. The CoreCLR throws a BadImageFormat exception because there is no Win32Resource directory (its size is 0).

I can avoid this exception if I revert **Revert "Use Win32Resource directory only if there is actual data in it"**  in cecil. Could you let me know why the patch is reverted?
Thank you.