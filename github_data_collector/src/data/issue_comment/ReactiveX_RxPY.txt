You'll excuse me if this is a dumb question - I'm looking to, in lieu of a subscribe fn, send back an iterator. I think this would be how to do it, but this indeed seems to spin forever. What am I doing wrong? Can I convert a observable to a generator or iterable?

    z=rx.from_list(range(25)).to_iterator()
In linux build with optional dependencies, pip fails to install pyqt5 5.14.1 (recent release).

It seems that some other projects have the same issue. Disabling this specific version should do the trick for now.
[https://github.com/python-pillow/Pillow/pull/4339](https://github.com/python-pillow/Pillow/pull/4339)

 
This PR adds a default scheduler (TimeoutScheduler) to  `timer` operator when one wants to trigger oneshot with a datetime. Under the hood, `observable_timer_date` is in charge of this particular configuration.

### Example:
```python
from datetime import datetime, timedelta
import rx
from rx import operators as ops

date = datetime.utcnow() + timedelta(seconds=1)

rx.timer(duetime=date).pipe(
    ops.do_action(
        lambda x: print(f'next:{x}'),
        lambda: print('complete'),
    )
).run()
``` 

### Bonus: 
- basic tests. Unfortunately, they don't test this case
- nonlocal statements

To continue the discussion started in #477, I've quickly reviewed all the operators in rx/core/operators and I suspect we may have the same issue for the following operators. Also I've not checked static operators yet, so this list might not be comprehensive.

### delay_with_mapper (line 77)
Subscription delay observable should be subscribed with the same scheduler as the source observable. 
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/delaywithmapper.py#L77-L80

### ~~expand~~ 
~~don't know exactly, disambiguation needed~~ Seems OK
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/expand.py#L21-L22

### join (line 108)
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/join.py#L108

### pairwise (line 40)
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/pairwise.py#L40

### throttle_first (line 39)
Should be `scheduler_`instead ?
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/throttlefirst.py#L39

### timeout_with_mapper (line 69)
When the timeout observable completes and 'wins' the race, the other source should be subscribed with the specified scheduler. 
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/timeoutwithmapper.py#L69

### to_marbles (line 57)
https://github.com/ReactiveX/RxPY/blob/7f6bd8614d2a6a9f109114b29b7b9910fc7b15ae/rx/core/operators/tomarbles.py#L57




Once #477 and #469 are merged, it would be worth doing a maintenance release with the few fixes that we did since July.
Hi there,

I'm trying to build an RPM for Rx at https://build.opensuse.org and I was wondering, if you would mind to include the unittests in the published source packages on PyPI, so that I could include test execution in the build process?
This PR adds a new parameter `subject_mapper` to operators `group_by` and `group_by_until`.
The purpose of this is to allow the end-user to specify a specialized subject that will be used to push elements for each grouped observable. This factory should be implemented as a function that returns a Subject object.

This is especially useful when chaining `group_by` with `to_iterable`, where a `ReplaySubject` is mandatory instead of a `Subject`. More details in #467 
Example:
```python
rx.of(1, 2, 3, 4, 5, 6).pipe(
    ops.group_by(lambda x: x % 2, subject_mapper=lambda: ReplaySubject())
    ops.to_iterable(),
    ops.flat_map(lambda groups: rx.from_list(groups)), 
    ops.flat_map(lambda group: group),
    ...
```
I've tried to keep theses changes aligned with rxjs6 as much as possible:
https://github.com/ReactiveX/rxjs/blob/master/src/internal/operators/groupBy.ts#L105


More readings from rxjs:
https://github.com/ReactiveX/rxjs/issues/2028
https://github.com/ReactiveX/rxjs/issues/1945
The following piece of code does not produce what I expect (subscription of numbers whose modulo4 is not zero, because of `.take(3)`):

```python
    def test_broken(self):
        numbers = of(7, 1, 3, 2, 4, 5, 0, 6, 8, 10, 9, 12, 11)
        numbers.pipe(
            op.group_by(lambda x: x % 4),
            op.take(3),
            op.to_iterable(),  
            op.flat_map(lambda list: from_iterable(sorted(list, key = lambda g: g.key))),
            op.do(Observer(on_next=lambda g: print("group modulo=%s %s" % (g.key, g)), on_completed=print("groups complete"), on_error=print_tb)),
            op.flat_map(lambda g: g)
        ).subscribe(on_next=lambda e: print("subscr %s" % e), on_error=print_tb, on_completed=print("THE END"))
        time.sleep(1)
```

Yet, both this
```python
    def test_to_iterable_then_from(self):
        numbers = of(7, 1, 3, 2, 4, 5, 0, 6, 8, 10, 9, 12, 11)
        numbers.pipe(
            op.to_iterable(),
            op.flat_map(lambda list: from_iterable(sorted(list))),
        ).subscribe(on_next=lambda e: print("subscr %s" % e))
        time.sleep(1)

```
which shows that emitting an iterable and then flat_mapping works ok, as well as this
```python
    def test_grouping_behaves_correctly(self):
        numbers = of(7, 1, 3, 2, 4, 5, 0, 6, 8, 10, 9, 12, 11)
        numbers.pipe(
            op.group_by(lambda x: x % 4),
            op.take(3),
            #op.to_iterable(),
            #op.flat_map(lambda list: from_iterable(sorted(list, key = lambda g: g.key))),
            op.do(Observer(on_next=lambda g: print("group modulo=%s %s" % (g.key, g)), on_completed=print("groups complete"), on_error=print_tb)),
            op.flat_map(lambda g: g)
        ).subscribe(on_next=lambda e: print("subscr %s" % e), on_error=print_tb, on_completed=print("THE END"))
        time.sleep(1)
```

which correctly produces
```
groups complete
THE END
group modulo=3 <rx.core.observable.groupedobservable.GroupedObservable object at 0x10a8a3ed0>
subscr 7
group modulo=1 <rx.core.observable.groupedobservable.GroupedObservable object at 0x10a8ab0d0>
subscr 1
subscr 3
group modulo=2 <rx.core.observable.groupedobservable.GroupedObservable object at 0x10a8abad0>
subscr 2
subscr 5
subscr 6
subscr 10
subscr 9
subscr 11
```
(numbers 0, 4, 8, 12 are indeed absent) seem to show that it's the combination of group_by and to/from_iterable that is causing the problem.

Or I could be completely missing something obvious, but I've been banging my head on this for a couple of days now. Came up with those simplified tests, but the initial usecase is porting [this piece of java Reactor code](https://github.com/projectriff/java-function-invoker/blob/3fd054b07705df7e0d68d962e3ca0d3a9024a497/src/main/java/io/projectriff/invoker/server/GrpcServerAdapter.java#L121-L134) to reactive python, if you need to know.
Following up on #435. I was tired of not being able to use the new rx, alongside the old. So I forked, made a [small commit](https://github.com/cowlicks/RxPY/commit/2cff530c4793f0642dbad2cada1bc69cebe10ba0) that batch renames the project, and took the name [`rx3` on PyPi](https://pypi.org/project/Rx3/).

So you can now install rx version 3+ with `pip install rx3`. While still having older rx installed as `rx`.

I released 3.0.1. I plan on shadowing further releases. And eventually deprecating the package when old rx is dead.