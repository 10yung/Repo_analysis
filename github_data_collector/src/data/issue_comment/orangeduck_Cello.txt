I'm want to write a library and I want to port it to other languages as well.
How can I write wrappers for other languages such as Python?


Hello!

I found this project a few days ago, and at the same time, I was getting into the actual C API of a scripting language: [Gravity](https://github.com/marcobambini/gravity).

Now, working with it's C-API is rather tedious. Whilst not being too complicated, working with values retrived and sent to and from the VM is not that easy. But when I saw Cello, I wondered if it would be possible to "port" Cello to use Gravity's value types instead.

But I have no idea where to start :) I did find the `Tree` class in `src/Tree.c` but could not find any of the other classes I would have to port - unfortunately... Basically, I only want to map these kinds of types, and need to know where their respective classes are, so I can modify them properly:

- Numbers (integer, double)
- Strings
- Arrays (mixed)
- Maps (I already saw that in Tree - but Table as well. What is the difference, aside from the used members? And where would one use the one or the other?)
- Functions/Closures
- Objects

Where are those specific parts defined and can I just go ahead and fork this repo and modify the classes' contents?

Also, Gravity has a GC already, so I don't want to have values made with/by/for Gravity to be garbage collected.

Thank you in advance! :)
I came across this while trying to fix the benchmarking on my local copy:

```
 $ ./benchmarks/List/list_cello 
dyld: __dyld section not supported in /Users/Ingwie/Work/Git/Cello/./benchmarks/List/list_cello
fish: './benchmarks/List/list_cello' terminated by signal SIGABRT (Abort)
```

I didn't investigate into it just yet, but maybe you have an idea :)

Meanwhile, this is what I did up to the point I found this error:
```diff
diff --git a/benchmarks/benchmark b/benchmarks/benchmark
index f005520..7e6c884 100755
--- a/benchmarks/benchmark
+++ b/benchmarks/benchmark
@@ -1,3 +1,17 @@
+if [ "$(uname -s)" = "Darwin" ]; then
+  # On Mac OS, use gtime, if it is installed.
+  which -s gtime
+  if [ "$?" = 0 ]; then
+    TIME="gtime -f"
+  else
+    # gtime not found, revert to basic time
+    TIME=time
+  fi
+else
+  # Use regular time. This is GNU's time command, so it has the "-f" flag.
+  TIME="time -f"
+fi
+
 gcc ./ext/genint.c -o ./ext/genint
 
 gcc Nbodies/nbodies_c.c -std=c99 -O3 -lm -o Nbodies/nbodies_c
@@ -39,23 +53,23 @@ echo
 echo "## Garbage Collection"
 echo
 echo -n "* C: "
-time -f "%e" ./GC/gc_c
+$TIME "%e" ./GC/gc_c
 echo -n "* C++: "
-time -f "%e" ./GC/gc_cpp
+$TIME "%e" ./GC/gc_cpp
 echo -n "* Cello: "
-time -f "%e" ./GC/gc_cello
+$TIME "%e" ./GC/gc_cello
 echo -n "* Java: "
-time -f "%e" java -cp ./GC gc_java
+$TIME "%e" java -cp ./GC gc_java
 echo -n "* Javascript: "
-time -f "%e" nodejs GC/gc_javascript.js
+$TIME "%e" node GC/gc_javascript.js
 echo -n "* Python: "
-time -f "%e" python GC/gc_python.py
-echo -n "* Ruby: "
+$TIME "%e" python GC/gc_python.py
+$TIME "* Ruby: "
 time -f "%e" ruby GC/gc_ruby.rb
 echo -n "* Lua: "
-time -f "%e" lua GC/gc_lua.lua
+$TIME "%e" lua GC/gc_lua.lua
 echo -n "* Lua JIT: "
-time -f "%e" luajit GC/gc_lua.lua
+$TIME "%e" luajit GC/gc_lua.lua
 
 gprof GC/gc_cello > GC/profile.txt
 rm gmon.out
@@ -65,23 +79,23 @@ echo
 echo "## List"
 echo
 echo -n "* C: "
-time -f "%e" ./List/list_c
+$TIME "%e" ./List/list_c
 echo -n "* C++: "
-time -f "%e" ./List/list_cpp
+$TIME "%e" ./List/list_cpp
 echo -n "* Cello: "
-time -f "%e" ./List/list_cello
+$TIME "%e" ./List/list_cello
 echo -n "* Java: "
-time -f "%e" java -cp ./List list_java
+$TIME "%e" java -cp ./List list_java
 echo -n "* Javascript: "
-time -f "%e" nodejs List/list_javascript.js
+$TIME "%e" node List/list_javascript.js
 echo -n "* Python: "
-time -f "%e" python List/list_python.py
+$TIME "%e" python List/list_python.py
 echo -n "* Ruby: "
-time -f "%e" ruby List/list_ruby.rb
+$TIME "%e" ruby List/list_ruby.rb
 echo -n "* Lua: "
-time -f "%e" lua List/list_lua.lua
+$TIME "%e" lua List/list_lua.lua
 echo -n "* Lua JIT: "
-time -f "%e" luajit List/list_lua.lua
+$TIME "%e" luajit List/list_lua.lua
 
 gprof List/list_cello > List/profile.txt
 rm gmon.out
@@ -90,23 +104,23 @@ echo
 echo "## Map"
 echo
 echo -n "* C: "
-time -f "%e" sh -c './ext/genint | ./Map/map_c'
+$TIME "%e" sh -c './ext/genint | ./Map/map_c'
 echo -n "* C++: "
-time -f "%e" sh -c './ext/genint | ./Map/map_cpp'
+$TIME "%e" sh -c './ext/genint | ./Map/map_cpp'
 echo -n "* Cello: "
-time -f "%e" sh -c './ext/genint | ./Map/map_cello'
+$TIME "%e" sh -c './ext/genint | ./Map/map_cello'
 echo -n "* Java: "
-time -f "%e" sh -c './ext/genint | java -cp ./Map map_java'
+$TIME "%e" sh -c './ext/genint | java -cp ./Map map_java'
 echo -n "* Javascript: "
-time -f "%e" sh -c './ext/genint | nodejs Map/map_javascript.js'
+$TIME "%e" sh -c './ext/genint | node Map/map_javascript.js'
 echo -n "* Python: "
-time -f "%e" sh -c './ext/genint | python Map/map_python.py'
+$TIME "%e" sh -c './ext/genint | python Map/map_python.py'
 echo -n "* Ruby: "
-time -f "%e" sh -c './ext/genint | ruby Map/map_ruby.rb'
+$TIME "%e" sh -c './ext/genint | ruby Map/map_ruby.rb'
 echo -n "* Lua: "
-time -f "%e" sh -c './ext/genint | lua Map/map_lua.lua'
+$TIME "%e" sh -c './ext/genint | lua Map/map_lua.lua'
 echo -n "* Lua JIT: "
-time -f "%e" sh -c './ext/genint | luajit Map/map_lua.lua'
+$TIME "%e" sh -c './ext/genint | luajit Map/map_lua.lua'
 
 gprof Map/map_cello > Map/profile.txt
 rm gmon.out
@@ -115,23 +129,23 @@ echo
 echo "## NBodies"
 echo
 echo -n "* C: "
-time -f "%e" ./Nbodies/nbodies_c 
+$TIME "%e" ./Nbodies/nbodies_c 
 echo -n "* C++: "
-time -f "%e" ./Nbodies/nbodies_cpp
+$TIME "%e" ./Nbodies/nbodies_cpp
 echo -n "* Cello: "
-time -f "%e" ./Nbodies/nbodies_cello
+$TIME "%e" ./Nbodies/nbodies_cello
 echo -n "* Java: "
-time -f "%e" java -cp ./Nbodies nbodies_java
+$TIME "%e" java -cp ./Nbodies nbodies_java
 echo -n "* Javascript: "
-time -f "%e" nodejs Nbodies/nbodies_javascript.js
+$TIME "%e" node Nbodies/nbodies_javascript.js
 echo -n "* Python: "
-time -f "%e" python Nbodies/nbodies_python.py
+$TIME "%e" python Nbodies/nbodies_python.py
 echo -n "* Ruby: "
-time -f "%e" ruby Nbodies/nbodies_ruby.rb
+$TIME "%e" ruby Nbodies/nbodies_ruby.rb
 echo -n "* Lua: "
-time -f "%e" lua Nbodies/nbodies_lua.lua
+$TIME "%e" lua Nbodies/nbodies_lua.lua
 echo -n "* Lua JIT: "
-time -f "%e" luajit Nbodies/nbodies_lua.lua
+$TIME "%e" luajit Nbodies/nbodies_lua.lua
 
 gprof Nbodies/nbodies_cello > Nbodies/profile.txt
 rm gmon.out
@@ -140,23 +154,23 @@ echo
 echo "## Dict"
 echo
 echo -n "* C: "
-time -f "%e" sh -c './ext/genint | ./Dict/dict_c'
+$TIME "%e" sh -c './ext/genint | ./Dict/dict_c'
 echo -n "* C++: "
-time -f "%e" sh -c './ext/genint | ./Dict/dict_cpp'
+$TIME "%e" sh -c './ext/genint | ./Dict/dict_cpp'
 echo -n "* Cello: "
-time -f "%e" sh -c './ext/genint | ./Dict/dict_cello'
+$TIME "%e" sh -c './ext/genint | ./Dict/dict_cello'
 echo -n "* Java: "
-time -f "%e" sh -c './ext/genint | java -cp ./Dict dict_java'
+$TIME "%e" sh -c './ext/genint | java -cp ./Dict dict_java'
 echo -n "* Javascript: "
-time -f "%e" sh -c './ext/genint | nodejs Dict/dict_javascript.js'
+$TIME "%e" sh -c './ext/genint | node Dict/dict_javascript.js'
 echo -n "* Python: "
-time -f "%e" sh -c './ext/genint | python Dict/dict_python.py'
+$TIME "%e" sh -c './ext/genint | python Dict/dict_python.py'
 echo -n "* Ruby: "
-time -f "%e" sh -c './ext/genint | ruby Dict/dict_ruby.rb'
+$TIME "%e" sh -c './ext/genint | ruby Dict/dict_ruby.rb'
 echo -n "* Lua: "
-time -f "%e" sh -c './ext/genint | lua Dict/dict_lua.lua'
+$TIME "%e" sh -c './ext/genint | lua Dict/dict_lua.lua'
 echo -n "* Lua JIT: "
-time -f "%e" sh -c './ext/genint | luajit Dict/dict_lua.lua'
+$TIME "%e" sh -c './ext/genint | luajit Dict/dict_lua.lua'
 
 gprof Dict/dict_cello > Dict/profile.txt
 rm gmon.out
@@ -165,23 +179,23 @@ echo
 echo "## Sudoku"
 echo
 echo -n "* C: "
-time -f "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_c'
+$TIME "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_c'
 echo -n "* C++: "
-time -f "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_cpp'
+$TIME "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_cpp'
 echo -n "* Cello: "
-time -f "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_cello'
+$TIME "%e" sh -c './ext/sudoku | ./Sudoku/sudoku_cello'
 echo -n "* Java: "
-time -f "%e" sh -c './ext/sudoku | java -cp ./Sudoku sudoku_java'
+$TIME "%e" sh -c './ext/sudoku | java -cp ./Sudoku sudoku_java'
 echo -n "* Javascript: "
-time -f "%e" sh -c './ext/sudoku | nodejs Sudoku/sudoku_javascript.js'
+$TIME "%e" sh -c './ext/sudoku | node Sudoku/sudoku_javascript.js'
 echo -n "* Python: "
-time -f "%e" sh -c './ext/sudoku | python Sudoku/sudoku_python.py'
+$TIME "%e" sh -c './ext/sudoku | python Sudoku/sudoku_python.py'
 echo -n "* Ruby: "
-time -f "%e" sh -c './ext/sudoku | ruby Sudoku/sudoku_ruby.rb'
+$TIME "%e" sh -c './ext/sudoku | ruby Sudoku/sudoku_ruby.rb'
 echo -n "* Lua: "
-time -f "%e" sh -c './ext/sudoku | lua Sudoku/sudoku_lua.lua'
+$TIME "%e" sh -c './ext/sudoku | lua Sudoku/sudoku_lua.lua'
 echo -n "* Lua JIT: "
-time -f "%e" sh -c './ext/sudoku | luajit Sudoku/sudoku_lua.lua'
+$TIME "%e" sh -c './ext/sudoku | luajit Sudoku/sudoku_lua.lua'
 
 gprof Sudoku/sudoku_cello > Sudoku/profile.txt
 rm gmon.out
@@ -190,23 +204,23 @@ echo
 echo "## Matmul"
 echo
 echo -n "* C: "
-time -f "%e" ./Matmul/matmul_c
+$TIME "%e" ./Matmul/matmul_c
 echo -n "* C++: "
-time -f "%e" ./Matmul/matmul_cpp
+$TIME "%e" ./Matmul/matmul_cpp
 echo -n "* Cello: "
-time -f "%e" ./Matmul/matmul_cello
+$TIME "%e" ./Matmul/matmul_cello
 echo -n "* Java: "
-time -f "%e" java -cp ./Matmul matmul_java
+$TIME "%e" java -cp ./Matmul matmul_java
 echo -n "* Javascript: "
-time -f "%e" nodejs Matmul/matmul_javascript.js
+$TIME "%e" node Matmul/matmul_javascript.js
 echo -n "* Python: "
-time -f "%e" python Matmul/matmul_python.py
+$TIME "%e" python Matmul/matmul_python.py
 echo -n "* Ruby: "
-time -f "%e" ruby Matmul/matmul_ruby.rb
+$TIME "%e" ruby Matmul/matmul_ruby.rb
 echo -n "* Lua: "
-time -f "%e" lua Matmul/matmul_lua.lua
+$TIME "%e" lua Matmul/matmul_lua.lua
 echo -n "* Lua JIT: "
-time -f "%e" luajit Matmul/matmul_lua.lua
+$TIME "%e" luajit Matmul/matmul_lua.lua
 
 gprof Matmul/matmul_cello > Matmul/profile.txt
 rm gmon.out
```
While the dynamic library (.so) is compiled by default under linux with "`make`", it doesn't get installed with "`make install`".
When running "`sudo make install`" or simply "`make install`" as root, the `Makefile` assumes root umask is something like `0022`. Which is just an ... assumption, not a fact.
Many system administrator set root umask to `0077` (no file is created world-readable or world-executable).

The command "`install`" (from GNU `coreutils`) has the "`--mode`" option to enforce file and directory permissions during the file copy. Which very likely is "`0644`" for `Cello.h` and `libCello.a`, and "`0755`" for `libCello.so`.
Cannot compile either v2.0.3 and v2.1.0 with the latest tcc version from http://repo.or.cz/tinycc.git mob branch.
```
tcc src/Table.c -c -I ./include -std=gnu99 -Wall -Wno-unused -g -ggdb -fdollars-in-identifiers -fPIC -DCELLO_NSTRACE -o obj/Table.o
src/Table.c:156: error: cannot cast 'struct Tuple' to 'void **'
make: *** [Makefile:125: obj/Table.o] Error 1
```

However, this page http://libcello.org/learn/best-improvements-of-cello-2.0 under `Portability` mentions that it can indeed be done
> [..] Cello can be compiled easily with all of the major compilers including `gcc`, `clang`, `cl.exe`, and `tcc` (on the development branch).

Has anything changed since or has `tcc` not been tested?
/Users/zhangxinwei/ClionProjects/cello_demo/cmake-build-debug/cello_demo
p0: <'Point' At 0x0x7fff5efe8790>
p1: <'Point' At 0x0x7fb2c9c03798>
cmp: 128
hash: 2849275892l
There are many statical analysis systems for C language. Mostly specified on some standards. Have you tried any for Cello? Some of them may give some errors which a developer may never see because it's not on an embedded platform etc. But it'd be good to see the limitations since it has some hacks as you've mentioned and those hacks may cause some issues under some conditions. 
