Since Ruby 2.4, Bignum and Fixnum have been unified into Integer (see [Ruby 2.4. release](https://www.ruby-lang.org/en/news/2016/12/25/ruby-2-4-0-released/)). The use of Fixum generates a warning:

> (....)/active_record/connection_adapters/em_mysql2_adapter.rb:27: warning: constant ::Fixnum is deprecated

Are there plans to update this?
I am using the following:

```
require "em-synchrony"
require "em-synchrony/mysql2"
require "em-synchrony/activerecord"
```

I have three active_relation objects in an array:

```
   EM.synchrony do
     statuses = [
        User.very_frequent,
        User.frequent,
        User.infrequent
     ]
     ...
```

I then want to iterate through the collections and perform an imap call asynchronously using FiberIterator:

```
  EM::Synchrony::FiberIterator.new(statuses.size, @@pool_size).each do |i|
    status = statuses[i]
    status.each do |user|
      # imap stuff goes here
    end
  end
end
```

On the examples on the wiki and on the tests I saw, you use other asynchronous I/O such as TCP and HTTP. But is there an option for imap packed in this gem or another gem?

Example (failing spec):

``` rb
  it "permits normal handling of errors" do
    caught = nil

    EM.synchrony do
      begin
        EM::Synchrony::FiberIterator.new(0..1, 2).each do |num|
          raise "#{num} here"
        end
      rescue => e
        caught = e.message
      end

      EM.stop
    end

    expect(caught).to eq("0 here")
  end
```

The `rescue` block is never entered, and the only way to catch the exception is with `EM.error_handler` or catching it outside of the EM loop. Neither approach is composable.

@igrigorik Any ideas for an easy fix?

I was wondering if there are plans to support _Rethinkdb_.

Thanks for the good job!

For both em-synchrony 1.0.3 and 1.0.4 I get the same `undefined local variable or method 'current_connection_id'` error with `activerecord 5.0.0.beta1`.

```
/Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/em-synchrony-1.0.3/lib/em-synchrony/activerecord.rb:12:in `block in connection': undefined local variable or method `current_connection_id' for #<ActiveRecord::ConnectionAdapters::ConnectionPool:0x007f9d888a4378> (NameError)
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/em-synchrony-1.0.3/lib/em-synchrony/thread.rb:63:in `synchronize'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/em-synchrony-1.0.3/lib/em-synchrony/activerecord.rb:11:in `connection'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/connection_adapters/abstract/connection_pool.rb:879:in `retrieve_connection'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/connection_handling.rb:113:in `retrieve_connection'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/connection_handling.rb:87:in `connection'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/migration.rb:800:in `connection'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/migration.rb:807:in `block in method_missing'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/migration.rb:786:in `block in say_with_time'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/2.2.0/benchmark.rb:288:in `measure'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/migration.rb:786:in `say_with_time'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/migration.rb:806:in `method_missing'
    from /Users/zdennis/source/opensource_projects/activerecord-import/test/schema/generic_schema.rb:3:in `block in <top (required)>'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/schema.rb:48:in `instance_eval'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/schema.rb:48:in `define'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activerecord-5.0.0.beta1/lib/active_record/schema.rb:44:in `define'
    from /Users/zdennis/source/opensource_projects/activerecord-import/test/schema/generic_schema.rb:1:in `<top (required)>'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta1/lib/active_support/dependencies.rb:302:in `require'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta1/lib/active_support/dependencies.rb:302:in `block in require'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta1/lib/active_support/dependencies.rb:268:in `load_dependency'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/activesupport-5.0.0.beta1/lib/active_support/dependencies.rb:302:in `require'
    from /Users/zdennis/source/opensource_projects/activerecord-import/test/test_helper.rb:50:in `<top (required)>'
    from /Users/zdennis/source/opensource_projects/activerecord-import/test/import_test.rb:1:in `require'
    from /Users/zdennis/source/opensource_projects/activerecord-import/test/import_test.rb:1:in `<top (required)>'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:15:in `require'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:15:in `block in <main>'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `select'
    from /Users/zdennis/.rbenv/versions/2.2.3/lib/ruby/gems/2.2.0/gems/rake-10.5.0/lib/rake/rake_test_loader.rb:4:in `<main>'
rake aborted!
```

I pulled down em-synchrony to add a patch, but after bundling and trying to run the test suite ruby 2.2.3 segfaulted.

`mysql2` does that by default since Rails 4.0: https://github.com/rails/rails/pull/6069

Hello!
I took https://github.com/igrigorik/em-synchrony/pull/179 and added support for ActiveRecord 4.
All ActiveRecord specs are green for stable versions of 3.2, 4.0, 4.1 and 4.2.

Also I reimplemented `clear_stale_cached_connections!` for 3.2 that could help but not so much. ActiveRecord users should explicitly release connections or `ActiveRecord::ConnectionAdapters::ConnectionManagement` middleware could do this and there is nothing to do with it. By the way, they should do it in threaded environment too. Anyway.

3.1 is not working and I cannot figure out why. So my opinion: we should drop 3.1 support in favor of better implementation for >= 3.2, < 5.

Currently tests may fail because of broken `mysql2`. See https://github.com/brianmario/mysql2/pull/580 (with specs) or https://github.com/brianmario/mysql2/pull/509 â€” with any of these patches everything works great.

It's 4 years old now, back when mongoid required the official mongo driver, now the use moped.

Any plan on implementing this ? I know there's em-synchrony-moped, but it's a bit outdated as well.

Cheers

This implementation supports concurrent running transactions. We tested it with active_record 3.2, but did not test with 4.0. We are using it in production and it is working well.

ActiveRecord have already had good connection pooling, that uses Thread.current[] for thread-aware (and fiber-aware) storage. We replaced original MonitorMixin, by fiber-aware one, and thats all.

Hi all
I can't require 'em-synchrony/amqp'
It complains: 

```
em-synchrony/amqp.rb:189:in `<module:AMQP>': undefined method `client=' for AMQP:Module (NoMethodError)
```

I have amqp v1.2.1 installed.
