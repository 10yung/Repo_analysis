Hi @alecthomas, here with another use case. I'm not actually sure what's the best way to solve this so I'll first explain what I'm trying to do.

I'm using the peeking lexer to help write error reporting. Often I find myself wanting to know what is the cursor position of the unexpected token in the peeking lexer.

However, the peeking lexer counts in number of tokens, and the unexpected token only has its file position. And when the unexpected token error occurs, the token may be ahead or behind the cursor position 0. How do I reliable find the relative cursor position for this token?

My current solution is binary searching for it using the token's offset, but that requires exposes the peeking lexer's `Length()`:
```go
func searchToken(lex *lexer.PeekingLexer, tokenOffset int) (lexer.Token, int, error) {
	cursorOffset, err := binarySearchLexer(lex, 0, lex.Length(), tokenOffset)
	if err != nil {
		return lexer.Token{}, 0, err
	}

	if cursorOffset < 0 {
		return lexer.Token{}, 0, fmt.Errorf("failed to find token at offset %d", tokenOffset)
	}

	n := cursorOffset - lex.Cursor()
	token, err := lex.Peek(n)
	return token, n, err
}

func binarySearchLexer(lex *lexer.PeekingLexer, l, r, x int) (int, error) {
	if r >= l {
		mid := l + (r - l) / 2

		token, err := lex.Peek(mid - lex.Cursor())
		if err != nil {
			return 0, err
		}

		if token.Pos.Offset == x {
			return mid, nil
		}

		if token.Pos.Offset > x {
			return binarySearchLexer(lex, l, mid-1, x)
		}

		return binarySearchLexer(lex, mid+1, r, x)
	}

	return -1, nil
}
```
Using the example TOML parser from the README.md:

```go
toml := &TOML{}
err := tomlParser.ParseString(`
    int=1
    string="a string"
    float=3.4
`, toml)
```

I get: `4:10: unexpected token ".4"`

It seems the eBNF for `Int` is capturing the "3", leaving the ".4" as unparsable.

I had a similar problem in an eBNF grammar I was creating. I solved it by using regexps, but I'd prefer to use eBNF if possible.

What's the fix to this situation?
To support more complex languages, it should be possible to elegantly define stateful lexers.

Ideally this would support:

- "here docs", eg. `cat << EOF\nEOF` (where `EOF` is a user-defined marker).
- Runtime selected sub-lexers, ala markdown's \`\`\``<language>` blocks - this would defer to some external function in order to set the lexer based on `<language>`.
- Recursive lexers for eg. string interpolation, `"${"${var}"}"` - in this situation a new lexer is pushed onto the state when `${` is encountered, and popped when `}` is encountered.

My hunch is that some kind of "stateful EBNF" could work, but it would need to be extensible programatically, and it's not clear exactly how this would be expressed.
In moderately complex grammars it's fairly common to see duplicate patterns emerge. For example, when matching a dot-separated identifier (eg. `foo.bar`) the pattern `(Ident { "." Ident })` is used repeatedly. This can be handled by a Go type alias implementing the `Parseable` interface, but that is quite onerous.

I propose adding support for grammar aliases. Here's an example creating and using an `Identifier` alias:

```go
type Assignment struct {
  Name string `@Identifier=(Ident { "." Ident })`
  Variable string `"=" @Identifier`
}
```
Hi I want to check if the prevoius char is a `:`. The exact example code I have is this:

```
Prefix: !
```

I want basicly to be able to check based on if the previous char is a `:` the `!` should get a string and later reuse the look back logic to check if I am inside an array which is defined like in yaml meaning to make sure the last 2 lines of the following example don't get into the array:

```
Commands:
    - Trigger: afk
      Response: "{{user}} just went afk"
    - Trigger: [join_event]
      Response: "Welcome to the Room {{last_joined_user}}"
Homeserver: matrix.org
HomeRoom: {{name}}
```

(Commands defines a Array with 2 objects in it which both have two key value pairs in them. HomeServer and HomeRoom are outside of that array)
Generate the structs and tags from EBNF...possible?

See #1.
It would be very handy to be able to export an EBNF representation of the parsed grammar, for documentation purposes.