None
I follow the instructions in the readme, but when I visit http://localhost:8080/ I get the following error:

```
HTTP ERROR 500

Problem accessing /. Reason:

    javax.servlet.http.HttpServletResponse.getStatus()I
Caused by:

java.lang.NoSuchMethodError: javax.servlet.http.HttpServletResponse.getStatus()I
    at org.scalatra.servlet.RichResponse.status(RichResponse.scala:16)
    at org.scalatra.ScalatraContext$class.status(ScalatraContext.scala:29)
    at org.scalatra.ScalatraServlet.status(ScalatraServlet.scala:49)
    at org.scalatra.ScalatraBase$class.runActions$1(ScalatraBase.scala:165)
    at org.scalatra.ScalatraBase$$anonfun$executeRoutes$1.apply$mcV$sp(ScalatraBase.scala:175)
    at org.scalatra.ScalatraBase$$anonfun$executeRoutes$1.apply(ScalatraBase.scala:175)
    at org.scalatra.ScalatraBase$$anonfun$executeRoutes$1.apply(ScalatraBase.scala:175)
    at org.scalatra.ScalatraBase$class.org$scalatra$ScalatraBase$$cradleHalt(ScalatraBase.scala:190)
    at org.scalatra.ScalatraBase$class.executeRoutes(ScalatraBase.scala:175)
    at org.scalatra.ScalatraServlet.executeRoutes(ScalatraServlet.scala:49)
    at org.scalatra.ScalatraBase$$anonfun$handle$1.apply$mcV$sp(ScalatraBase.scala:113)
    at org.scalatra.ScalatraBase$$anonfun$handle$1.apply(ScalatraBase.scala:113)
    at org.scalatra.ScalatraBase$$anonfun$handle$1.apply(ScalatraBase.scala:113)
    at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
    at org.scalatra.DynamicScope$class.withResponse(DynamicScope.scala:80)
    at org.scalatra.ScalatraServlet.withResponse(ScalatraServlet.scala:49)
    at org.scalatra.DynamicScope$$anonfun$withRequestResponse$1.apply(DynamicScope.scala:60)
    at scala.util.DynamicVariable.withValue(DynamicVariable.scala:57)
    at org.scalatra.DynamicScope$class.withRequest(DynamicScope.scala:71)
    at org.scalatra.ScalatraServlet.withRequest(ScalatraServlet.scala:49)
    at org.scalatra.DynamicScope$class.withRequestResponse(DynamicScope.scala:59)
    at org.scalatra.ScalatraServlet.withRequestResponse(ScalatraServlet.scala:49)
    at org.scalatra.ScalatraBase$class.handle(ScalatraBase.scala:111)
    at org.scalatra.ScalatraServlet.org$scalatra$servlet$ServletBase$$super$handle(ScalatraServlet.scala:49)
    at org.scalatra.servlet.ServletBase$class.handle(ServletBase.scala:43)
    at org.scalatra.ScalatraServlet.handle(ScalatraServlet.scala:49)
    at org.scalatra.ScalatraServlet.service(ScalatraServlet.scala:54)
    at javax.servlet.http.HttpServlet.service(HttpServlet.java:820)
    at org.mortbay.jetty.servlet.ServletHolder.handle(ServletHolder.java:511)
    at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:390)
    at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)
    at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:765)
    at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)
    at org.mortbay.jetty.Server.handle(Server.java:326)
    at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)
    at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:923)
    at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:547)
    at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)
    at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)
    at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)
    at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)
```

Swarm requires that every Swarm node be running the same codebase.

I think this can be achieved by hooking into the JVM's classloader and making it retrieve packages on-demand as they are needed. This concept is inspired by the [Zero Install](http://0install.net/) package management system.

This would probably involve having some kind of public crypto key in the package name as a unique identifier - eg: `package swarm.bR781Z1h7.wombat.3.0`

(Just porting over Google Code issues)

Ian proposed examining "software transactional memory" as a way to prevent threads from interfering with each-other in bad ways. This spawned a discussion on the pros and cons of various approaches. Read the thread [here](http://groups.google.com/group/swarm-discuss/browse_thread/thread/9919e42e539e2c0a). 

Swarm must find a way to adaptively arrange data on servers to minimize the number of times a thread must jump from one computer to the other.

Mailing List Threads:

[one](https://groups.google.com/group/swarm-discuss/browse_thread/thread/b51f0d961fa37909)
[two](https://groups.google.com/forum/#!topic/swarm-discuss/3jb6Ai5C5KM)

[Sample implementation by Ian](http://groups.google.com/group/swarm-discuss/browse_thread/thread/4018d94716d00a20?hl=en)

The Twitter demo is meant to be deployed for public consumption, so it needs a way for user accounts to be secured from unauthenticated access.

The Twitter demo is meant to be deployed for public consumption, so it needs a way for users to create accounts for themselves.

The current unit tests rely on the InMemTest class, which is a bit of a hack to simulate continuation serialization transport.

It would be much better to create a test framework which can be run as a usual unit test (i.e. with `sbt test`) that kicks off two real InetTransporter.listen threads (on different local ports) and tests actual serialization and transportation over sockets.

This might be doable with some advanced sbt trickery, or within a class via some clever class loading.

Scala collections do not use Swarm references internally, which means that they cannot be split across multiple machines.

We need to create "Swarm-ful" versions of these collections that do use Swarm Refs internally.

The ideal Swarm web framework would treat the open HTTP connection to the web browser as just another Swarm object, referenced through a Ref(), but, of course, tied to a specific computer.

This would mean that a HTTP request could come in, and the resultant continuation could move around to other computers, before coming back to the original computer in order to send the HTTP response.

Most existing Java (and Scala?) web frameworks are unsuitable for this, as typically they'll call a method with HTTP request and response objects, but they expect that when this method returns, that the response is ready to be sent.  Unfortunately, this method will not typically be within a continuation "reset {}" block.
