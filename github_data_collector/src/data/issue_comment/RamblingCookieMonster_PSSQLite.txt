The SQLite db I am attempting to get date from has columns that are in a Date/Time format like this `2019-07-02 04:59:18.578 +00:00` . It seems my queries all fail to pull back the data with the error in the subject line.  Is there an override or way to convert it to string?

I have tried using all the -As param options, all give same error.

Example of query that fails "Select * From table_name;"  

I am iterating through tables to find specific named columns and then getting that data so I can't easily just grab all columns besides the ones with the date/time.
Hey, I am beginning to work on supporting .net core for linux use. Noted you were looking for help on this.

Currently still testing and developing this though it partially works at the moment. Will continue working on this over the next while to get it up to quality but if anyone wants to help along the way, it is always welcome.

Connecting and invoking create/insert queries seem to work alright so far. Errors with output due to the [DBNullScrubber] but will hopefully get this fixed and further testing done soon.

Thanks
Hi,

I started using this module and it's been working fine. But when I started using it in Powershell Core v. 6.0.2 I get this error:

```
Unable to find type [DBNullScrubber].
At C:\Users\Admn\Documents\PowerShell\Modules\PSSQLite\1.0.3\Invoke-SqliteQuery.ps1:518 char:25
+                         [DBNullScrubber]::DataRowToPSObject($row)
+                         ~~~~~~~~~~~~~~~~
+ CategoryInfo          : InvalidOperation: (DBNullScrubber:TypeName) [], RuntimeException
+ FullyQualifiedErrorId : TypeNotFound
```

Just thought I should let you know.
it is a minor, but I personally think we should follow the same style for commands, not like this:

Get-Command -Module PSSQLite

CommandType     Name                                               Version    Source                                                                                                          
-----------     ----                                               -------    ------                                                                                                          
Function        Invoke-SQLiteBulkCopy                              1.0.3      PSSQLite                                                                                                        
Function        Invoke-SqliteQuery                                 1.0.3      PSSQLite                                                                                                        
Function        New-SQLiteConnection                               1.0.3      PSSQLite                                                                                                        
Function        Out-DataTable                                      1.0.3      PSSQLite                                                                                                        

So I changed Invoke-SQLiteBulkCopy to Invoke-SqliteBulkCopy

In a number of different areas where I use PSSQLite I use script analyzer before things to go production.  This was a problem because in a number of areas it would fail tests.  I've adjusted almost all of the modules\scripts in the PSSQLite module so it will pass current script analyzer default tests.  There were no major changes that would be noticeable in day-to-day use, however internally in Invoke-SqliteBulkCopy I had to rename New-SqliteBulkQuery to Invoke-SqliteBulkQuery in order to avoid having to add SupportsShouldProcess to CmdletBinding.

My previous submission failed AppVeyor tests because of how PS v2 requires SupportsShouldProcess=$true, but v3 and later does not.  I fixed that in this version as well.
When using this module, I got an error about the property "ParseViaFramework". When reviewing documentation, I found that there is also a constructor parameter for the same property in SQLiteConnection, this does not throw an error on my machine. I was still able to open a database on a UNC path (starting with \\servername), so I think this does not introduce a regression. 

Additionally, the test failed on my end because I don't use the American date format, so I made that test slightly more robust as well. 
When using `Invoke-SQLiteBulkCopy` with an open `SQLiteConnection`, the ".sqlite-journal" file grows larger but never commits the changes to the database.
BulkCopy should throw if source and target tables' column types are incompatible. It currently will allow you to insert records which will then cause errors upon selection.
Hi Warren,

Today I tried to use the module on PowerShell Core running on a RaspberryPi (2) and it failed with the following error. 

New-Object : Exception calling ".ctor" with "1" argument(s): "Unable to load DLL 'SQLite.Interop.dll': The specified module or one of its dependencies could not be found.

It would be great to get this working with .net core and PowerShell core.

Would this be possible?

/Stefan

This is kind of an odd one and I can fork and fix if you want, but in the PSSQLite.psm1 file you're using the alias for Select-Object as part of the function export process (at the end).  Under normal circumstances this is totally ok, however I've been banging my head over the last few days trying to figure out why I can't get the PSSQLite module to work as part of a constrained endpoint (JEA) and after doing a lot of debugging the use of the Select alias is not playing nice with a locked down endpoint\shell (```SessionType='Empty'``` and ```LanguageMode='RestrictedLanguage'```).  I tried defining Select as a valid alias with ```VisibleAliases``` but the only way I could get it to work is if I edited the module and spelled out the alias as Select-Object.

So anyway we can get the Select alias removed and the full cmdlet name put int the PSSQLite module file?  I can do it if you want, but it seems like a really small change :)