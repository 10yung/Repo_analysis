
I'd like to run Android Studio Poet with a config file that matches my current project, so I can compare my project's build speed with the generated project's build speed. Is there a way I can generate a simple config using an existing project, so I know I have a fair comparison? I'm not sure the best way to find the properties in the example Simple config file like "allMethods", "javaMethodCount", "javaClassCount", etc.  
Hi,
The example in the README is not sufficient for masses to start using this confidently.
There's a documentation need to explain what you can do, how, in order to developers to start using it.

I see a great potential for this project as multi-module projects are becoming more and more common with multiple Android targets (Wear OS, TV, Auto Things...), Instant Apps and feature modules, Kotlin multiplatform, App bundle with optional app extension modules.

When I start a new project (like when starting an open source library with sample modules), configuring all the modules is the biggest burden, especially with countless gradle syncs needed as I need to add modules, and add dependencies.
Android Studio Poet would probably help, but getting started is far from being straightforward, with not even a snippet I can copy, paste and edit, and the screenshot in the example is not even a working one. 

If you want inspiration for examples, just make a config file that generates a project that includes all the Android Jetpack libraries, and an instant app 3 features project.
Example:
val liveArticleData = MutableLiveData<Article>()
When liveArticleData.value is used compiler requires forced unwrap (!!)
Forced unwrap is considered last resort and poor programming practice.

Request:
To be able to initialize MutableLiveData at declartion, so do not have to check null.
Add 
* Loops
* If-then-else
* Scopes

I finished a draft for a new input. 

Unfortunately, I have to change our input a lot. But now it supports some cool things, like overriding "minSdkVersion" for a single flavour or understands things like "each one of these 5 modules depends on 2 of those 5 modules". I remember your idea of "random" dependencies, I think this input will allow us to make it easier. It is also would possible to generate more than one "application" module or have a different amount of activities in different modules.

Please check it very carefully, I believe this is a big decision. I put special attention to the things that should be optional and those that shouldn't, so, please, check that as well. 

There is an example of input in "NewInputExample.json". The rest is classes, sometimes a few related classes in one file.

It would be very easy to extend this input format to support AIDL/renderscript, "api" and "implementation" dependencies and hopefully all the other crazy stuff we or somebody else can come up with. :)
Make Android modules be dependent on other Andorid/Java modules:

* Calling methods
* Using layouts
* Using images
To ease testing and maybe a potential possibility to generate multiple projects at once we can add an option to pass a path to a script as input. 

Possible behavior:
`main()` method excepts a path as a string. Then we have three potential cases:
* input is a path to a file - read file and use its' content as input
* input is a path to a directory - consider each file inside as a separate input
* else show UI