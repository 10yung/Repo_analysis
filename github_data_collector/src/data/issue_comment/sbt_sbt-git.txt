Creating a new file (and not adding it to git) results in a version without SNAPSHOT suffix.

`uncommittedSignifier` (SNAPSHOT,dirty, etc...) is not applied if the only change is the creation of new files. Without adding them to git, they are not considered uncommitted changes:

https://github.com/sbt/sbt-git/blob/3dd1343ba8c2d77cda92080f65aab91331822a1a/src/main/scala/com/typesafe/sbt/git/JGit.scala#L89
from [`hasUncommittedChanges` documentation](http://download.eclipse.org/jgit/site/4.9.0.201710071750-r/apidocs/org/eclipse/jgit/api/Status.html#hasUncommittedChanges--):  "true if any **tracked** file is changed"

Running a build in a directory containing non-tracked files should result in SNAPSHOT suffix (or at least it should be configurable). The sources used for such build do **not match** sources committed in the repository.

- [gradle-android-git-version](https://github.com/gladed/gradle-android-git-version/) can be configured ([untrackedIsDirty](https://github.com/gladed/gradle-android-git-version/#untrackedisdirty-boolean))

- [jgitver-maven-plugin](https://github.com/jgitver/jgitver-maven-plugin/) with "dirty" marker enabled (using *useDirty* option) considers presence of untracked files a dirty state.

jgitver-maven-plugin uses [`!status.isClean()`](https://github.com/jgitver/jgitver/blob/de52d3b4a6546fd186702ad37b2554682e8c9a97/src/main/java/fr/brouillard/oss/jgitver/impl/GitUtils.java#L73), rather than `hasUncommitedChanges`.

[`isClean`](https://github.com/eclipse/jgit/blob/v4.9.0.201710071750-r/org.eclipse.jgit/src/org/eclipse/jgit/api/Status.java#L85) considers untracked files. 
fixes #157
Giving a colour for the branch enhances the readability. It helps to better distinguish between project name and branch name.
![Screenshot_20191127_104437](https://user-images.githubusercontent.com/3511382/69713601-1b5fe700-1105-11ea-8957-8566b1cabbd5.png)

If cloning a repo on GitHub with HTTPS the remote URL is formatted like `https://github.com/olafurpg/sbt-ci-release`, which is not picked up by the automatic `scmInfo` detection in

https://github.com/sbt/sbt-git/blob/74e03afef8cbbc0b360fc6fa899cca9ebacc5ce9/src/main/scala/com/typesafe/sbt/SbtGit.scala#L124-L146

A workaround is to add the following to `buildSettings`:
```diff
+    scmInfo ~= {
+      case Some(info) => Some(info)
+      case None =>
+        import scala.sys.process._
+        val identifier = """([^\/]+)"""
+        val GitHubHttps = s"https://github.com/$identifier/$identifier".r
+        try {
+          val remote = List("git", "ls-remote", "--get-url", "origin").!!.trim()
+          remote match {
+            case GitHubHttps(user, repo) =>
+              Some(
+                ScmInfo(
+                  url(s"https://github.com/$user/$repo"),
+                  s"scm:git:https://github.com/$user/$repo.git",
+                  Some(s"scm:git:git@github.com:$user/$repo.git")
+                )
+              )
+            case _ =>
+              None
+          }
+        } catch {
+          case NonFatal(_) => None
+        }
+    }
```


This issue was discovered while publishing a Sonatype release via GitHub Actions with the following error message
```
 [error] Failed to close the repository
[error] Activity close started:2019-09-22T22:33:25.400Z, stopped:2019-09-22T22:33:33.729Z
[error]     Failed: pom-staging, failureMessage:Invalid POM: /com/geirsson/sbt-ci-release_2.12_1.0/1.4.27/sbt-ci-release-1.4.27.pom: SCM URL missing
[error] java.lang.Exception: Failed to close the repository
[error] Use 'last' for the full log.
```
It appears that GitHub Actions clone the repository with the HTTPS remote instead of SSH remote.
Hi all 

I am using https://github.com/sbt/sbt-git and https://sbt-native-packager.readthedocs.io/en/stable/index.html and would like to assign the value of git.gitTagToVersionNumber to my docker container.

I tried:

```
git.useGitDescribe := true

Docker / dockerAlias := DockerAlias(None, Some("zerocoder"), (packageName in Docker).value, git.gitTagToVersionNumber.value)  
```
it does not work, because the type of the last argument of DockerAlias does not match.

How to get the value git.gitTagToVersionNumber?

I also tried:

```
git.useGitDescribe := true

git.formattedShaVersion := git.gitTagToVersionNumber.value("tag")
Docker / dockerAlias := DockerAlias(None, Some("zerocoder"), (packageName in Docker).value, git.gitDescribedVersion.value) 
```
But it does not supply the desired value. I would like to tag my docker container for example with:

`v0.2.0-2-g8d5cd83  `

Thanks
Adds a `useConsoleForROGit` setting and `useReadableConsoleGit` util, so that the plugin can be used with worktrees
Usage:

```
import com.typesafe.sbt.SbtGit._
useReadableConsoleGit
```
i have tags:

v0.01
...
v.0.0.45


Now I need to bump release versions to 0.1.0

I set git.baseVersion = "0.1.0"

sbt and sbt-release continues to bump the last tag version instead.

Expected next version to be 0.1.0

https://github.com/sbt/sbt-git/commit/a9153c92b6a77cd78ee44584fe92483106e7686a introduced an enhancement which will pick the "newest" version from tags if there are multiple tags on the same commit. Sadly, the algorithm deciding which version is the "newest" one does not implement the same logic used by Maven (See http://www.mojohaus.org/versions-maven-plugin/version-rules.html and http://maven.apache.org/ref/3.0.4/maven-artifact/xref/org/apache/maven/artifact/versioning/DefaultArtifactVersion.html). The following project demonstrates a situation in which the version which is chose is not the one which was intended:

```
$ cat project/plugins.sbt 
addSbtPlugin("com.typesafe.sbt" % "sbt-git" % "1.0.0")
$ cat build.sbt 
enablePlugins(GitVersioning)
git.gitTagToVersionNumber := { Some(_).filter(_ matches "[0-9]+\\..*") }
$ git tag 1.0
$ git tag 1.0-alpha1

$ sbt version
[...]
[info] 1.0-alpha1
```

I'm suggesting to use the same logic implemented by Maven.
I am using these versions

> `git = 2.17.0`
> `sbt = 1.2.6`
> `scala = 2.12.7`
> `sbt-git = 1.0.0`

Running `sbt version` on my project returns me the version as expected:
```
[info] Set current project to projectapiScala (in build file:/C:/cygwin64/home/user/sourcecode/project-api/api-scala/)
[info] Packaging C:\cygwin64\home\user\sourcecode\project-api\api-scala\target\scala-2.12\projectapiscala_2.12-1.2.0-19-gc11ba92-SNAPSHOT-sources.jar ...
[info] Done packaging.
```
`git describe`
```bash
1.2.0-19-gc11ba92
```

but running the build on TeamCity, our build server, the version is missing the `-SNAPSHOT` suffix.
```
[16:10:45][Step 2/3] [info] Set current project to tradingapiScala (in build file:/D:/TeamCity/buildAgent.0/work/project-api/api-scala/)
[16:10:45][Step 2/3] Plugin sbt-teamcity-logger was loaded.
[16:10:45][Step 2/3] TeamCity version='2017.2.2 (build 50909)'
[16:10:47][Step 2/3] [success] Total time: 2 s, completed 23.10.2018 15:10:47
[16:10:47][Step 2/3] [success] Total time: 0 s, completed 23.10.2018 15:10:47
[16:10:47][Step 2/3] [success] Total time: 0 s, completed 23.10.2018 15:10:47
[16:10:47][Step 2/3] Scala compiler (3m:11s)
[16:10:47][Step 2/3] [info] Packaging D:\TeamCity\buildAgent.0\work\project-api\api-scala\target\scala-2.12\projectapiscala_2.12-1.2.0-19-gc11ba92-sources.jar ...
[16:10:47][Step 2/3] Packaging D:\TeamCity\buildAgent.0\work\project-api\api-scala\target\scala-2.12\projectapiscala_2.12-1.2.0-19-gc11ba92-sources.jar ...
[16:10:47][Step 2/3] [info] Done packaging.
```
How can this be caused and fixed?
This fixes an edge case where there's multiple tags, and some staged
changes which lead to one of them being a -SNAPSHOT which makes sorting
fail.