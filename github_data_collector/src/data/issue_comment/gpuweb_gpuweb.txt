PTAL! I tried to make the algorithm for `getBindGroupLayout` as formal as possible but there's some hand-waviness because the spec doesn't have `GPUShaderModule` reflection yet.


<!--
    This comment and the below content is programatically generated.
    You may add a comma-separated list of anchors you'd like a
    direct link to below (e.g. #idl-serializers, #idl-sequence):

    Don't remove this comment or modify anything below this line.
    If you don't want a preview generated for this pull request,
    just replace the whole of this comment's content by "no preview"
    and remove what's below.
-->
***
<a href="https://pr-preview.s3.amazonaws.com/Kangz/gpuweb/pull/543.html" title="Last updated on Jan 15, 2020, 3:05 PM UTC (aee44b1)">Preview</a> | <a href="https://pr-preview.s3.amazonaws.com/gpuweb/gpuweb/543/c1e5ed4...Kangz:aee44b1.html" title="Last updated on Jan 15, 2020, 3:05 PM UTC (aee44b1)">Diff</a>
Something that came out of #541 discussion by the editors, it would be interesting to explore the need for write-only usage flags and binding types for texture/buffer storages. Here are the reasons for it:
  - As #513 investigation shows (thanks @Jiawei-Shao!), the write-only use case has lower hardware requirements than read-write, at least on D3D12 and Metal.
  - SPIR-V already has [separate decorators](https://www.khronos.org/registry/spir-v/specs/1.0/SPIRV.html#_a_id_access_qualifier_a_access_qualifier) for `NonWritable` and `NonReadable` storage resources. Metal shading language also has [write access](https://developer.apple.com/metal/Metal-Shading-Language-Specification.pdf) that is separate from `read_write`.
  - on the API side, at least in D3D12 there is a clear separation with write access requiring an UAV (unordered access view), while read access requiring and SRV (shader resource view).
  - `STORAGE_READ` and `STORAGE_WRITE` would be cleaner than `READONLY_STORAGE` and `STORAGE`, also more in line with existing `MAP_READ` and `MAP_WRITE`

If we go for it, we'd need to consider both `STORAGE_WRITE` usage flags and `writeonly-storage-buffer`/`writeonly-storage-texture` binding types.
Partially implemented by #532 (textures only, also I think we can bikeshed the name).
Related to #513, also distantly to #514 

#303 introduced the read-only bindings. So technically, today, when there is a `STORAGE` usage, it could be read-only, or it could be read-write. The difference affects whether we allow any other usage to co-exist within the synchronization scope. Therefore it's difficult to both reason about and properly specify `STORAGE` usage today.

We could make this entirely clear by splitting the `STORAGE_READ` out of `STORAGE`, leaving the latter to be strictly mutable.
Establishes a pattern, with requestDevice, for hopefully-readable validation rule blocks.


<!--
    This comment and the below content is programatically generated.
    You may add a comma-separated list of anchors you'd like a
    direct link to below (e.g. #idl-serializers, #idl-sequence):

    Don't remove this comment or modify anything below this line.
    If you don't want a preview generated for this pull request,
    just replace the whole of this comment's content by "no preview"
    and remove what's below.
-->
***
<a href="https://pr-preview.s3.amazonaws.com/kainino0x/gpuweb/pull/540.html" title="Last updated on Jan 13, 2020, 7:31 PM UTC (0a6d4b1)">Preview</a> | <a href="https://pr-preview.s3.amazonaws.com/gpuweb/gpuweb/540/0280fcb...kainino0x:0a6d4b1.html" title="Last updated on Jan 13, 2020, 7:31 PM UTC (0a6d4b1)">Diff</a>
This change added comprehensive validation rules for BindGroup creation. I may ignored some validation rules though. But I hope that the rules I added are correct. 

PTAL. Thanks!


<!--
    This comment and the below content is programatically generated.
    You may add a comma-separated list of anchors you'd like a
    direct link to below (e.g. #idl-serializers, #idl-sequence):

    Don't remove this comment or modify anything below this line.
    If you don't want a preview generated for this pull request,
    just replace the whole of this comment's content by "no preview"
    and remove what's below.
-->
***
<a href="https://pr-preview.s3.amazonaws.com/Richard-Yunchao/gpuweb/pull/538.html" title="Last updated on Jan 15, 2020, 5:34 AM UTC (aab1f41)">Preview</a> | <a href="https://pr-preview.s3.amazonaws.com/gpuweb/gpuweb/538/c1e5ed4...Richard-Yunchao:aab1f41.html" title="Last updated on Jan 15, 2020, 5:34 AM UTC (aab1f41)">Diff</a>
Ran into this undocumented restriction when running with Metal validation layers:
```
-[MTLDebugBlitCommandEncoder validateCopyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:]:532: failed assertion `sourceBytesPerImage(448) must be >= (512).'
Process 31489 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = signal SIGABRT
    frame #0: 0x00007fff5e1df2c2 libsystem_kernel.dylib`__pthread_kill + 10
libsystem_kernel.dylib`__pthread_kill:
->  0x7fff5e1df2c2 <+10>: jae    0x7fff5e1df2cc            ; <+20>
    0x7fff5e1df2c4 <+12>: movq   %rax, %rdi
    0x7fff5e1df2c7 <+15>: jmp    0x7fff5e1d9453            ; cerror_nocancel
    0x7fff5e1df2cc <+20>: retq   
```

Also, sourceBytesPerRow must be >= 64, but that's fine because WebGPU has rowPitch be a multiple of 256.

This has some validation implications on permissible values for `imageHeight` or (`zPitch` in #519), and it also means that `imageHeight == 0` cannot truly mean "tightly packed" in #517.


I've made an example implementation of the `VK_NV_ray_tracing` extension for Dawn [here](https://github.com/maierfelix/dawn-ray-tracing). You can find a js example demonstrating usage [here](https://github.com/maierfelix/webgpu/blob/master/examples/ray-tracing/index.mjs).

Since Khronos is working on a standard cross-vendor ray tracing extension, what's the current opinion of adding RT to WebGPU?
This patch adds "readonly-storage-texture" as a new enum of
GPUBindingType and "READONLY_STORAGE" as a new enum of GPUTextureUsage.


<!--
    This comment and the below content is programatically generated.
    You may add a comma-separated list of anchors you'd like a
    direct link to below (e.g. #idl-serializers, #idl-sequence):

    Don't remove this comment or modify anything below this line.
    If you don't want a preview generated for this pull request,
    just replace the whole of this comment's content by "no preview"
    and remove what's below.
-->
***
<a href="https://pr-preview.s3.amazonaws.com/Jiawei-Shao/gpuweb/pull/532.html" title="Last updated on Jan 17, 2020, 10:29 AM UTC (9e3a832)">Preview</a> | <a href="https://pr-preview.s3.amazonaws.com/gpuweb/gpuweb/532/402b691...Jiawei-Shao:9e3a832.html" title="Last updated on Jan 17, 2020, 10:29 AM UTC (9e3a832)">Diff</a>
We made requestAdapter singular due to fingerprinting concerns, IIRC.

- `requestAdapters` is not any more prone to fingerprinting. The UA can choose to put whichever adapters it wants in the list. Any adapters returned from it could have been found by searching the space of possible `requestAdapter` calls.
- Many applications would end up trying to get every adapter they can find (by searching the space ...) and then using their own logic to pick among them. This prevents apps from needing that pattern.
- `requestAdapters` still allows an easy default: e.g. ask for `"low-power"`, then get adapter `[0]`.
- `requestAdapter` is hostile to any situation where the UA **does** want to give a little more trust to the app, perhaps Electron, Node, or even installed PWAs.

~Finally, adds `hasMajorPerformanceCaveat` as one thing that pluralizing `requestAdapters` enables simply.~ (EDIT: will figure out later)


<!--
    This comment and the below content is programatically generated.
    You may add a comma-separated list of anchors you'd like a
    direct link to below (e.g. #idl-serializers, #idl-sequence):

    Don't remove this comment or modify anything below this line.
    If you don't want a preview generated for this pull request,
    just replace the whole of this comment's content by "no preview"
    and remove what's below.
-->
***
<a href="https://pr-preview.s3.amazonaws.com/kainino0x/gpuweb/pull/524.html" title="Last updated on Jan 13, 2020, 10:53 PM UTC (2471512)">Preview</a> | <a href="https://pr-preview.s3.amazonaws.com/gpuweb/gpuweb/524/c1e5ed4...kainino0x:2471512.html" title="Last updated on Jan 13, 2020, 10:53 PM UTC (2471512)">Diff</a>
requestAdapter should delay until it can make the best choice about what adapter to return.