# Bug

When `alias` is specified on a field for a class where `alias_generator` is also defined, `alias` is respected for that class but not any derived classes.

Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```python
             pydantic version: 1.3
            pydantic compiled: False
                 install path: /<snip>/site-packages/pydantic
               python version: 3.7.6 (default, Dec 30 2019, 19:38:28)  [Clang 11.0.0 (clang-1100.0.33.16)]
                     platform: Darwin-18.7.0-x86_64-i386-64bit
     optional deps. installed: ['typing-extensions', 'email-validator']
```

## Example code

```python
from pydantic import BaseModel, Field


class MyBaseModel(BaseModel):
    class Config:
        alias_generator = lambda x: x.upper()

class MyModel(MyBaseModel):
    my_attribute: bool = Field(..., alias='myATTRIBUTE')

class MyOtherModel(MyModel):
    pass
```

## Examples


```py
>>> MyModel()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<snip>/site-packages/pydantic/main.py", line 274, in __init__
    raise validation_error
pydantic.error_wrappers.ValidationError: 1 validation error for MyModel
myATTRIBUTE
  field required (type=value_error.missing)
>>> MyOtherModel()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "<snip>/site-packages/pydantic/main.py", line 274, in __init__
    raise validation_error
pydantic.error_wrappers.ValidationError: 1 validation error for MyOtherModel
MY_ATTRIBUTE
  field required (type=value_error.missing)
```

Notice that `MyModel` requires `myATTRIBUTE`, as expected, but `MyOtherModel` requires `MY_ATTRIBUTE`, which is from the `alias_generator`
```console
$ python -c "import pydantic.utils; print(pydantic.utils.version_info())"
             pydantic version: 1.3
            pydantic compiled: False
                 install path: /Users/andrew/.virtualenvs/project_name/lib/python3.7/site-packages/pydantic
               python version: 3.7.5 (default, Oct 19 2019, 01:20:12)  [Clang 10.0.1 (clang-1001.0.46.4)]
                     platform: Darwin-18.7.0-x86_64-i386-64bit
     optional deps. installed: ['devtools']

```

# Feature Request

Thanks for a great library and for taking the time to read this!

When pydantic raises validation errors about settings, it would be nice if it would include the settings prefix, if specified.

Let's assume a basic set of settings where variables are meant to be specified in the process environment.

```py
from pydantic import BaseSettings


class Settings(BaseSettings):
    """Define basic settings to be overridden by the environment"""

    var_name: str

    class Config:
        env_prefix = "app_prefix"

```

If this class is instantiated with no changes to the environment, a Python traceback is printed with the following at the end

```
var_name
  field required (type=value_error.missing)
```

The actual Validation object appears to be:

```py
ValidationError(
    model='Settings',
    errors=[
        {'loc': ('var_name',), 'msg': 'field required', 'type': 'value_error.missing'},
    ]
)

```

It would be nice if instead of specifying only the variable name it also included the `env_prefix`. What is most helpful is something like:

```
ERROR: Set Environment Variable APP_PREFIX_VAR_NAME
```

To print a nicer error message, I am currently doing the following:

```python
from colorama import Fore, Style
from pydantic.error_wrappers import ValidationError

from .config import Settings

def main():
    try:
        settings = Settings()
    except ValidationError as e:
        prefix = Settings.Config.env_prefix
        for error in e.errors():
            if error["type"] == "value_error.missing":
                for var in error["loc"]:
                    env_var = f"{prefix}{var}".upper()
                    message = f"ERROR: Set Environment Variable {env_var}"
                    print(Fore.RED + message + Style.RESET_ALL)
            else:
                print(f"{Fore.RED}{error}{Style.RESET_ALL}")
        exit(-1)

if __name__ == "__main__":
    main()
```
## Change Summary

Luhn algorithm was not complete. An important step of this algorithm was missing.

This PR would solve the problem described in the issue linked below: Luhn Algorithm is not working as expected.

## Related issue number

#1166

## Checklist

* [ ] Unit tests for the changes exist
* [ ] Tests pass on CI and coverage remains at 100%
* [ ] Documentation reflects the changes where applicable
* [ ] `changes/1166-cuencandres.md` file added describing change
  (see [changes/README.md](https://github.com/samuelcolvin/pydantic/blob/master/changes/README.md) for details)

# Bug

Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```
             pydantic version: 1.3
            pydantic compiled: False
                 install path: /Users/andreshernandez/Desktop/git/pydantic/pydantic
               python version: 3.7.5 (default, Nov  1 2019, 02:16:32)  [Clang 11.0.0 (clang-1100.0.33.8)]
                     platform: Darwin-18.2.0-x86_64-i386-64bit
     optional deps. installed: ['typing-extensions', 'email-validator', 'devtools']
```

```py
from pydantic.types import PaymentCardNumber

card_number = '4951486642583068'  # luhn valid
PaymentCardNumber(card_number).validate_luhn_check_digit(card_number)
```

Throws a LuhnValidationError:

```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/usr/local/lib/python3.7/site-packages/pydantic/types.py", line 657, in validate_luhn_check_digit
    raise errors.LuhnValidationError
pydantic.errors.LuhnValidationError: card number is not luhn valid
```
# Bug

Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```
             pydantic version: 1.3
            pydantic compiled: False
                 install path: /Users/lutz/.pyenv/versions/3.8.0/envs/fastapi-py3/lib/python3.8/site-packages/pydantic
               python version: 3.8.0 (default, Jan 13 2020, 14:48:00)  [Clang 11.0.0 (clang-1100.0.33.16)]
                     platform: macOS-10.15.2-x86_64-i386-64bit
     optional deps. installed: ['typing-extensions']

```
<!-- or if you're using pydantic prior to v1.3, manually include: OS, python version and pydantic version -->

<!-- Please read the [docs](https://pydantic-docs.helpmanual.io/) and search through issues to
confirm your bug hasn't already been reported. -->

<!-- Where possible please include a self-contained code snippet describing your bug: -->

According to the [OPENAPI Specification](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.2.md#properties) and [JSON Schema Validation](https://tools.ietf.org/html/draft-wright-json-schema-validation-00#section-5.5), the value of `exclusiveMinimum` and `exclusiveMinimum` should be a boolean instead of a number, and the `minimum` and `maximum` field should be set to represent the lower/upper limit.
# Question

Hi, 
I wonder if the behavior below results from a bug or me missing a point. 
A clarification would be appreciated.
Thanks

Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```
pydantic version: 1.3
pydantic compiled: False
install path: ~/miniconda3/lib/python3.8/site-packages/pydantic
python version: 3.8.0 | packaged by conda-forge | (default, Nov 22 2019, 19:11:19)  [Clang 9.0.0 (tags/RELEASE_900/final)]
platform: macOS-10.13.6-x86_64-i386-64bit
optional deps. installed: []
```

Customize pydantic BaseConfig and define arbitrary class _Test_:
```py
from pydantic import BaseModel, validator, Field, BaseConfig
from typing import Union, Type

BaseConfig.arbitrary_types_allowed = True 

class Test:
	pass
```

Defining class _A_ without validator works: 
```
class A(BaseModel):
	view: Union[Type[Test], str] = Test
```

Defining class _A_ with a validator fails:
```
class A(BaseModel):

	view: Union[Type[Test], str] = Test

	@validator("view")
	def validate(cls, v):
		return v
```

With the following error:
```
---------------------------------------------------------------------------
ConfigError                               Traceback (most recent call last)
<ipython-input-2-72c9cde31275> in <module>
----> 1 class A(BaseModel):
      2 
      3         view: Union[Type[Test], str] = Test
      4 
      5         @validator("view")

~/miniconda3/lib/python3.8/site-packages/pydantic/main.py in __new__(mcs, name, bases, namespace, **kwargs)
    221         if _custom_root_type:
    222             validate_custom_root_type(fields)
--> 223         vg.check_for_unused()
    224         if config.json_encoders:
    225             json_encoder = partial(custom_pydantic_encoder, config.json_encoders)

~/miniconda3/lib/python3.8/site-packages/pydantic/class_validators.py in check_for_unused(self)
    171         if unused_validators:
    172             fn = ', '.join(unused_validators)
--> 173             raise ConfigError(
    174                 f"Validators defined with incorrect fields: {fn} "  # noqa: Q000
    175                 f"(use check_fields=False if you're inheriting from the model and intended this)"

ConfigError: Validators defined with incorrect fields: validate (use check_fields=False if you're inheriting from the model and intended this)
```

Setting the default value to _Field(Test)_ avoids the ConfigError:
```
class A(BaseModel):

	view: Union[Type[Test], str] = Field(Test)

	@validator("view")
	def validate(cls, v):
		return v
```

# Possible Bug

**Validator seems to ignore the 'always' parameter on inheritance since pydantic >= 1.2**

I had a running code that uses inheritance on the models with an enforced field that is used to decide if other optional fields will be checked, or not. This worked well until I updated to pydantic 1.3. Further testing shows that the code fails since pydantic 1.2. So there seem to be some changes from 1.1 to 1.2 that leads to this issue.

Unfortunately I could not find a previous issue, or documentation hint that explains this deviating behavior to me.

If I missed something in the doc, please give me a hint and excuse my issue. Otherwise, I would be thankful if someone could fix this, or explain how the intended behavior can be achieved on pydantic >=1.2

Please find an example code and corresponding output below.

Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```
pydantic version: 1.3
pydantic compiled: False
install path: [...]\python_pydantic-ni4Wh3vY\Lib\site-packages\pydantic
python version: 3.6.8 (tags/v3.6.8:3c6b436a57, Dec 24 2018, 00:16:47) [MSC v.1916 64 bit (AMD64)]
platform: Windows-10-10.0.18362-SP0
optional deps. installed: []
```

Here is an example code to reproduce this issue and below that, the corresponding output on pydantic 1.1 and >=1.2:
```py
import typing

import pydantic

class A(pydantic.BaseModel):

    must_validate: bool

    class Config:
        extra = pydantic.Extra.ignore


class B(pydantic.BaseModel):

    value_a: typing.Optional[str] = None
    value_b: typing.Optional[str] = None

    class Config:
        extra = pydantic.Extra.ignore

class C(B, A):

    @pydantic.validator("value_a", "value_b", always=True)
    def validate_if_enforced(cls, value, values):
        if "must_validate" in values and values["must_validate"]:
            if not value:
                raise ValueError("must be set if 'must_validate' is True")
        return value
    
    class Config:
        extra = pydantic.Extra.forbid


if __name__ == "__main__":
    success_data = {
        "must_validate": True,
        "value_a": "foo",
        "value_b": "bar",
    }

    fail_data = {
        "must_validate": True,
        "value_a": "foo",
    }

    try:
        success = C.parse_obj(success_data)
        print(success.dict())

        fail = C.parse_obj(fail_data)
        print(fail.dict())
    except pydantic.ValidationError as exc:
        print(exc)
...
```

Output on **pydantic 1.1** (This is the intended behavior!)
```
{'must_validate': True, 'value_a': 'foo', 'value_b': 'bar'}
1 validation error for C
value_b
  must be set if 'must_validate' is True (type=value_error)
```

Output on **pydantic >=1.2**
```
{'must_validate': True, 'value_a': 'foo', 'value_b': 'bar'}
{'must_validate': True, 'value_a': 'foo', 'value_b': None}
```
<!-- Thank you for your contribution! -->
<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->
<!-- See https://pydantic-docs.helpmanual.io/contributing/ for help on Contributing -->

## Change Summary
In `pydantic/fields.py:ModelField._type_analysis()` where the `field.shape`  field get assign depending on the `field` type. `getattr(self.type_, '__origin__', None)` is returning `None` so the function is getting returned from there without assigning the value to `field.shape` variable.

https://github.com/samuelcolvin/pydantic/blob/e65d11240a6febcd569ad44a61e2374eb00b9ba6/pydantic/fields.py#L355-L358

So I added a check which checks if the `origin` is `None` then it checks if the `self.type_` is a native sequence type and based on that it set the value of `self.shape`.

## Related issue number

Fix #1112 

## Checklist

* [x] Added Check for Checking if `type_` is a native sequence and set `field` value based on that.

# Bug

I'm able to reproduce the bug only when using a container, not on the host computer.
I tested various python3.7.x versions (official python images), all had the same issue.
Output of `python -c "import pydantic.utils; print(pydantic.utils.version_info())"`:
```
import pydantic.utils; print(pydantic.utils.version_info())
             pydantic version: 1.3
            pydantic compiled: True
                 install path: /usr/local/lib/python3.7/site-packages/pydantic
               python version: 3.7.0 (default, Oct 16 2018, 07:10:55)  [GCC 6.3.0 20170516]
                     platform: Linux-4.9.184-linuxkit-x86_64-with-debian-9.5
     optional deps. installed: []
```



<!-- Where possible please include a self-contained code snippet describing your bug: -->

```py
import orjson
from pydantic import BaseModel

class DynamicContext(BaseModel):
    lala: int
    class Config:
        json_loads = orjson.loads
        json_dumps = orjson.dumps

DynamicContext(lala=1).json()


```
Will raise:
```
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "pydantic/main.py", line 379, in pydantic.main.BaseModel.json
TypeError: Expected unicode, got bytes
```
<!-- Thank you for your contribution! -->
<!-- Unless your change is trivial, please create an issue to discuss the change before creating a PR -->
<!-- See https://pydantic-docs.helpmanual.io/contributing/ for help on Contributing -->

## Change Summary

This is a draft for adding the loc to validators as a parameter.
That change alone was fairly straight forward but made me realize that that it wasn't enough
to actually achieve the goal of knowing the nested loc before flattening errors.

The issue is that nested modles get instantiated via the BaseModel __init__ method which accepts no loc, as essentially all parameters there are considered fields for validation.
My solution was to create a new classmethod for construction that simply accepts the data and loc information which is then used by both the __init__ method and the validator to construct the model.

This PR should be seen as a basis for discussion if this is even something @samuelcolvin is willing to pursue further. If the answer is yes the complete impact needs to be assessed and further TODOs defined to make this a clean and robust change without any breaking changes and minimal to no performance impact.

So far it is incomplete, not optimized and tests have not been updated.

## Related issue number

<!-- Are there any issues opened that will be resolved by merging this change? -->
#800 

## Checklist

* [ ] Unit tests for the changes exist
* [ ] Tests pass on CI and coverage remains at 100%
* [ ] Documentation reflects the changes where applicable
* [ ] `changes/<pull request or issue id>-<github username>.md` file added describing change
  (see [changes/README.md](https://github.com/samuelcolvin/pydantic/blob/master/changes/README.md) for details)
