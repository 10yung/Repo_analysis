Updates the requirements on [time](https://github.com/time-rs/time) to permit the latest version.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/time-rs/time/releases">time's releases</a>.</em></p>
<blockquote>
<h2>v0.2.3</h2>
<h3>Additions</h3>
<ul>
<li><code>time!</code>, <code>date!</code>, <code>offset!</code> macros</li>
<li>Top-level <code>parse</code> function, allowing for type inference.</li>
<li><code>time::Result&lt;T&gt;</code> alias to <code>time::Result&lt;T, time::Error&gt;</code></li>
</ul>
<h3>Deprecated</h3>
<p>Panicking APIs have been deprecated in favor of the new macros.</p>
<h3>Changes</h3>
<p>Minimum supported Rust version is now 1.34, changed from 1.40. This permits a number of crates to upgrade without breaking MSRV.</p>
<h3>Bug fixes</h3>
<p>A number of parsing methods used unchecked constructors. This was because the values <em>should</em> have been checked prior. They are now.</p>
<h3>Breaking changes</h3>
<p>The &quot;std&quot; feature has been renamed to &quot;alloc&quot;, which <em>disables</em> the standard library. This was necessary to bring MSRV down to 1.34.</p>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/time-rs/time/commit/fc6fdf5e2596ff88706c4d3d9f910203e1758956"><code>fc6fdf5</code></a> Show panicking APIs in docs</li>
<li><a href="https://github.com/time-rs/time/commit/54f0c87c77b05f8edfde3dfbc0761f4b7dd64212"><code>54f0c87</code></a> MSRV of 1.34.0, bug fixes, move to alloc feature</li>
<li><a href="https://github.com/time-rs/time/commit/cf5af973cb4caab3924b9e1bb21899c44a94c473"><code>cf5af97</code></a> Add <code>Result</code> type alias</li>
<li><a href="https://github.com/time-rs/time/commit/122c76720db3b70b95908766d539d1bcfcc28de7"><code>122c767</code></a> Add generic top-level parse function</li>
<li><a href="https://github.com/time-rs/time/commit/828acb16a72d5d0efd8322f81ff9014f5041bed9"><code>828acb1</code></a> <code>date!</code> macro, deprecate panicking methods</li>
<li><a href="https://github.com/time-rs/time/commit/9b68213531f7584df9fc8d584848293cdfead333"><code>9b68213</code></a> <code>time!</code>, <code>offset!</code> macros</li>
<li><a href="https://github.com/time-rs/time/commit/2e520226fd6eb9db6f6f6477a9ed4ef532aa2f84"><code>2e52022</code></a> Shell for macro crates</li>
<li><a href="https://github.com/time-rs/time/commit/208a3d3a6c24f8a0a65aee8c95cd8c902c62dabc"><code>208a3d3</code></a> Consume correct number of chars when using padding</li>
<li><a href="https://github.com/time-rs/time/commit/c063a3cf35e47a990538c7f4e995579adb210252"><code>c063a3c</code></a> Gate internal method to avoid unused warning</li>
<li><a href="https://github.com/time-rs/time/commit/3dbe00273721cf206fce7417265360bfdae07e35"><code>3dbe002</code></a> Add function to validate a formatting string</li>
<li>Additional commits viewable in <a href="https://github.com/time-rs/time/compare/0.1.35...v0.2.3">compare view</a></li>
</ul>
</details>
<br />


Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Is it possible to set ns_view to raw_window_handle on macos? I need it to use wgpu https://github.com/gfx-rs/wgpu-rs with minifb.
https://github.com/emoon/rust_minifb/blob/6d616640dc620f1c8ed81872ea1a1bde70248a2a/src/key_handler.rs#L119

Seems like you want to calculate a fraction here...
Looking over the code it only pretty much uses `precise_time_s()` and I think we can just use the one from the stdlib instead and reduce one dependency.
For various reasons, my game logic has to be decoupled from rendering.  It updates much faster than 60hz and it sometimes rolls back and recomputes game frames as part of network prediction code.

A simplified version of my game loop looks like this:
```
    let frame_length = std::time::Duration::new(0, 4_166_166);
    let mut timer = std::time::Instant::now();

    while window.is_open() && !window.is_key_down(Key::Escape) {
        let elapsed_time = timer.elapsed();

        if elapsed_time >= frame_length {
            canvas.clear();
            let our_input = Input::from_window(&window);

            game.update([our_input; 8]);

            // TODO: let frame_ready = elapsed_time >= some_runtime_determined_refresh_rate;
            // if frame_ready {
            graphics::draw(&game, &mut canvas);
            // }

            window.update_with_buffer(&canvas.buffer).unwrap();
            timer = std::time::Instant::now();
        }
    }
```

I believe I can just check the refresh rate at application startup and check the timestep against the corresponding display frame length.  It might be better to check for an explicit signal that vsync is ready.  I'm not sure.

I think it would be a bad idea to couple my game loop to vsync, and that it's better to let the game logic run with its own counter.

I think this might be a good first issue for me to contribute to if there's not currently a way to expose this.  Let me know if that's something you want.
The first mobile OS we will support with Orbtk is Ubuntu Touch https://ubuntu-touch.io/. Ubuntu Touch Apps are based on Qt and there is a official way to implement apps for Ubuntu with Rust and Qt. I think the easiest way to support Ubuntu Touch in minifb and OrbTk is to wrap a QtWindow. Would you agree with it? 

With the support of mobile OS it would be also necessary to add support for touch gestures.

I'd be willing to implement that ;-)
Start to fix the redox port (work in progress).
When resizing the window on Linux/X11 (Ubuntu, i3wm) there is lots of flickering. It would be nice to fix that
The ability to check for non-ascii keys/layouts independent would be nice in some cases.
This crate has now been around for almost 4 years (Nov 22, 2015) so I guess it's time to start moving it towards 1.0 but before that there is some issues I want to be done before.

- [ ] #50 (Full screen support)
- [ ] #47 (WASM support)
- [ ] #82 (OpenGL support on Linux and Windows)
- [ ] #95 (Some keys not working on macOS)
- [ ] #83 (Correct Aspect ratio handling)

* More things. Proper scaling without hick-ups for dynamic sized windows.
* Should it be possible to specific RGB(0) ordering of the buffers? 
* Should software support be deprecated (Linux only pretty much)
* Also a clean-up of all the remaining issues. I would like to have zero issues (if possible) when hitting 1.0
* More examples of all features.
* Add multi-threaded example
* Add frame-rate limiting example

More suggestions can be added in the comments. I will start adding issues I want to fix for the https://github.com/emoon/rust_minifb/milestone/1 milestone
