I have a curious situation where running tests in isolation pass, but running them in series, the first passes and all the rest after that one fail.  The test is basically doing as part of its setup:

```
    login_as(user)
    visit root_path
```

The tests fail and the browser shows: "This page isnâ€™t working 127.0.0.1 redirected you too many times."

... When looking at the test log, I see:

```
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 8ms (ActiveRecord: 0.0ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (1.3ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 18ms (ActiveRecord: 1.3ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.7ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 19ms (ActiveRecord: 0.7ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.6ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 39ms (ActiveRecord: 0.6ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.6ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 16ms (ActiveRecord: 0.6ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.8ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 41ms (ActiveRecord: 0.8ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.6ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 15ms (ActiveRecord: 0.6ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.6ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 17ms (ActiveRecord: 0.6ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.6ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 41ms (ActiveRecord: 0.6ms)
Started GET "/sign_in" for 127.0.0.1 at 2020-01-14 18:13:12 -0800
Processing by Devise::SessionsController#new as HTML
  User Load (0.9ms)  SELECT  "users".* FROM "users" WHERE "users"."id" = $1 ORDER BY "users"."id" ASC LIMIT $2  [["id", 2], ["LIMIT", 1]]
Redirected to http://127.0.0.1:49729/
Filter chain halted as :require_no_authentication rendered or redirected
Completed 302 Found in 17ms (ActiveRecord: 0.9ms)
````

Yet if I change my webdriver to capybara-webkit, this does not happen and all tests pass...

I should mention that I do have an after each block which is calling `Warden.test_reset!`, but that does not seem to fix this problem...  Any ideas what might be causing this weird behavior and only in the context of selenium?

## Environment

ruby 2.6.3p62
Rails 5.2.4.1
devise (4.6.2)

## Environment

- Ruby 2.5.5
- Rails 6.0.0
- Devise 4.7.0

## Current behavior

It is possible to sign in a non persisted model. The session doesn't have any model ID to store, and the model is therefore not signed in for future requests. Furthermore, this mistake is not caught by controller tests

```
def my_controller_action
  @user = User.new(email: params[:email])
  # the order of the two following lines should be inverted. 
  # However this should not pass controller tests
  sign_in @user
  @user.save 
end
```

Controller tests will show it as `current_user`

```
it 'signs in user' do
      expect(controller.current_user).to be_nil
      post :my_controller_action, params: { email: 'test@test.com' }
      u = User.find_by_email('test@test.com')
      expect(controller.current_user).to eq u # success, when it should fail
end
```

This is undesirable because A) the `@user` would not be signed in for any future requests, such as a redirect and B) this mistake is not caught by asserting `current_user` in test. The test that actually catches the mistake is cumbersome : 

```
it 'signs in user' do
      expect(controller.current_user).to be_nil
      post :my_controller_action, params: { email: 'test@test.com' }
      u = User.find_by_email('test@test.com')
      expect(controller.current_user).to eq u # success
      expect(session['warden.user.user.key'].include?([u.id])).to be true # failure
end
```

## Expected behavior

`sign_in @user` should do nothing when `@user` is not persisted. In particular, `current_user` should be `nil`, so that controller tests would fail. Thank you for maintaining this precious library !
What would be the way to set different config values based on devise model? 
Lets say we have 2 models Admin & User. Setting config values in devise.rb will be applied in all models. How can I set a different config to one of the model?
I tried like this

```
class Admin < ApplicationRecord
  # Include default devise modules. Others available are:
  # :confirmable, :lockable, :timeoutable, :trackable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :validatable
  self.allow_unconfirmed_access_for =0.days
end

```
but getting error ` can't modify frozen class`
How can I fix this.

Thanks!
# Current behavior
Devise.secure_compare will currently return `false` if the bytesize of strings differs; as the method only operates in constant time when both strings are the same length. 

https://github.com/plataformatec/devise/blob/b52e642c0131f7b0d9f2dd24d8607a186f18223e/lib/devise.rb#L505

If the `secure_compare` method is incorrectly used in a place where the strings are not of equal length (eg. comparing plain text passwords) the early return of `false` could unintentionally leak the fact that the strings are of a different length. That, in turn, could unintentionally leak the length of the correct string.

# Expected behavior

Comparing strings with unequal bytesizes with `secure_compare` should raise an exception, because this is an incorrect usage of the method and should be considered an exceptional situation.

This change would ensure that if the method is implemented incorrectly, it will fail in a way that catches developers attention; rather than unintentionally leaking string string length information.
AFAIK `devise` doesn't support omniauthable for multiple models because long time ago `omniauth` did not support custom path_prefix for each strategy. But according to [this comment from @josevalim](https://github.com/plataformatec/devise/issues/1047#issuecomment-1101655) omniauth solved that issue at least 9 years ago.

I implemented a sample rails application that shows how omniauthable can be used for multiple devise models. 
main commit of that app: https://github.com/john-denisov/showcase-multiple-omniauthable-models/commit/7b1f2371fabbc6cc8b78215739c6309f7d7f788f
installation instructions: https://github.com/john-denisov/showcase-multiple-omniauthable-models/blob/master/README.md
I followed [this guide](https://github.com/plataformatec/devise/wiki/OmniAuth:-Overview) to implement omniauth sign in for users and managers in my demo app

I will also update https://github.com/plataformatec/devise/wiki/OmniAuth-with-multiple-models if this PR gets approved 

Will appreciate any ideas how to improve this feature. Theoretically we can automatically duplicate all registered providers and set correct `path_prefix` for them if `devise :omniauthable` is specified in more than 1 model. That will reduce amount of configuration required but it won't allow to have separate sets of providers for different models ðŸ¤”Or we could also add new arg to `Devise.omniauth` called `scopes:`. Default would be to add this strategy to all omniauthable scopes.
Hi, thanks for your great effort to maintain this gem!

## summary
Just found out a warning about keyword arguments that will potentially break with future ruby, when trying to test devise against Ruby2.7.
(thankfully the prior PR #5174 covered most of them - examining the test logs that I ran with my forked repo, this seems the only one left out)

## why it's needed to change
Devise::IntegrationTest and Devise::ControllerTestCase offers sets of methods that delegate its execution to ActionController::TestCase.

As the delegated methods (and its delegated one, #process) require [keyword arguments](https://github.com/rails/rails/blob/09cc7967b970373de8a748f68d027ec4bf331832/actionpack/lib/action_controller/test_case.rb#L389-L411), we need to pass our hash objects as keyword arguments.

## compatibility
Lots of corner cases have been discussed around this issue, luckily this patch is perfectly compatible with the current implementation, except for the deprecation warnings emitted by the existing codes (when being run on Ruby2.7).

Specifically:

- When keyword arguments or hash object are provided
  - devise helper methods delegate its argument and keyword arguments to ActionController::TestCase#get, #post, etc.
  - for current implementation, warnings are emitted with Ruby2.7

- When no keyword arguments are given
  1.  with < Ruby2.7
       - both implementation (current vs new) passes its argument with empty hash.
  2.  with Ruby2.7.0
      - both implementation (current vs new) passes its argument only. the behavior differs from that of older rubies, but both new and current implementation shows this behavior change. Delegated methods can run without problems in all versions of Ruby.

the latter case is the only corner case. With Ruby < 2.7, we pass over empty hash to ActionController::TestCase, but it does no harm as it is interpreted as empty keyword args with < Ruby 2.7.

## backup
To demonstrate how they compare (and for my own peace of mind), I created a few delegation test cases - emulating [current implementation](https://github.com/fursich/keyword_arguments/blob/master/test/positional_arguments_test.rb), and [new implementation](https://github.com/fursich/keyword_arguments/blob/master/test/keyword_arguments_test.rb) , as well as cases about how they [compare against each other](https://github.com/fursich/keyword_arguments/blob/master/test/comparison_test.rb)

These cases are tested against Ruby2.1.10 upto 2.7.0 with similar environment with devise. [Please feel free to check](https://travis-ci.org/fursich/keyword_arguments/builds/630667308?utm_source=github_status&utm_medium=notification) in case you are interested ;)

Hope that helps!
Hey,

On this Wiki (very useful) : https://github.com/plataformatec/devise/wiki/How-to:-Scope-login-to-subdomain, something is missing for the reset password process.

devise( :database_authenticatable, ... , :reset_password_keys => [:email, :your_key_id])

Without that, we can send reset emails for a user from sub domain# 2 on sub domain #1

Bests,

Pretty much what it says on the tin!

See here for more information
https://eng.getwisdom.io/hacking-github-with-unicode-dotless-i/

Closes #5171 
As per this recent blog post: https://eng.getwisdom.io/hacking-github-with-unicode-dotless-i/ is Devise susceptible to the same attack?

```ruby
# Note the Turkish dotless i in 'GÄ±thub'
'John@GÄ±thub.com'.toLowerCase() === 'John@Github.com'.toLowerCase() # true
```

Essentially, Github were doing:

```ruby
user = get_user_from_valid_email(params[:email])
send_reset_email(params[:email])
# instead of
# send_reset_email(user.email)
```

ref: https://news.ycombinator.com/item?id=21809390

I am not proficient enough to inspect the Devise source myself but figured it would be safer to ask the question than not.
It would be great if there was a way to make the config.parent_controller a bit more dynamic, specifically, I would like to see the parent controller behave in a similar fashion to

``` 
config.scoped_views = true
```

The advantage of being able to scope parent controller is that we could quite easily streamline our per-scope level controller logic, and have it trickle down to the various devise controllers.

Consider something like the following:


```
# ==> Controller configuration
# Configure the parent class to the devise controllers.
# resources not listed here will default to 'DeviseController'
config.scoped_parent_controllers = {
  admin: 'AdminsController'
}
```

```
class AdminsController < ApplicationController
  layout :admin
  before_action :authenticate_admin!
end
```

The benefit of this is that we don't have to pollute the ApplicationController with a bunch of custom logic to dynamically set things like the layout based on the scope, and then we can nicely encapsulated frontend logins for regular users, and backend logins for admins without having to resort to a library like ActiveAdmin.