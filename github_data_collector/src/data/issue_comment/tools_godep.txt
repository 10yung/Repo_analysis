My project used gin, and in gin, you can use built in 'encoding/json' or 'jsoniter', 
my porject use 'encoding/json',so in $GOPATH/src,I don't have jsoniter,my gin works good
when i use 'godep save ' my project,shows info:
godep: Package (github.com/json-iterator/go) not found

I think there are a lot like this, because gin used govendor, when i entered gin' s source direcotry,use govender list,there are lots of missing, but i build success

 m github.com/campoy/embedmd
  m github.com/client9/misspell/cmd/misspell
  m github.com/davecgh/go-spew/spew                                        v1.1     v1.1.1
  m github.com/dustin/go-broadcast
  m github.com/gin-gonic/autotls
  m github.com/jessevdk/go-assets
  m github.com/json-iterator/go                                            v1.1     v1.1.5
  m github.com/manucorporat/stats
  m github.com/stretchr/testify/assert                                     v1.2     v1.2.2
  m github.com/thinkerou/favicon
  m golang.org/x/lint/golint
  m golang.org/x/net/context
  m golang.org/x/sync/errgroup
  m google.golang.org/grpc
  m google.golang.org/grpc/reflection
===================================================
When i 'godep save' may i exclude some,like in my case,exclude jsoniter?
`go build` success,
then I `godep save` and `go build` failed:
```
# git.xfyun.cn/container/genesis/modules/authentication
modules/authentication/createKubeConfigGo.go:135:40: cannot use kubeconfig.CreateWithToken(spec.APIServer, clustername, spec.ClientName, "git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/util/cert".EncodeCertPEM(spec.CACert), spec.TokenAuth.Token) (type *"k8s.io/client-go/tools/clientcmd/api".Config) as type *"git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/tools/clientcmd/api".Config in return argument
modules/authentication/createKubeConfigGo.go:150:86: cannot use clientCertConfig (type "git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/util/cert".Config) as type "k8s.io/client-go/util/cert".Config in argument to pkiutil.NewCertAndKey
modules/authentication/createKubeConfigGo.go:156:39: cannot use kubeconfig.CreateWithCerts(spec.APIServer, clustername, spec.ClientName, "git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/util/cert".EncodeCertPEM(spec.CACert), "git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/util/cert".EncodePrivateKeyPEM(clientKey), "git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/util/cert".EncodeCertPEM(clientCert)) (type *"k8s.io/client-go/tools/clientcmd/api".Config) as type *"git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/tools/clientcmd/api".Config in return argument
modules/authentication/createKubeConfigGo.go:175:35: cannot use config (type *"git.xfyun.cn/container/genesis/vendor/k8s.io/client-go/tools/clientcmd/api".Config) as type *"k8s.io/client-go/tools/clientcmd/api".Config in argument to kubeconfig.WriteToDisk
```
### Steps to reproduce behavior
```
git clone https://github.com/kubernetes/kubernetes
cp -r kubernetes $GOPATH/src/k8s.io/
cp -r kubernetes/vendor/k8s.io/* $GOPATH/src/k8s.io
rm  $GOPATH/src/k8s.io/kubernetes/.git
cd $GOPATH/src/k8s.io
git init && git add . && git commit -m add
```
Our project using kubernetes source code, then `go build` will success.
then:
```
godep save
go build
```
build failed.
beacuse of godep not save kubernetes:
```
╰─➤  ls vendor/k8s.io                                                                                               2 ↵
api          apimachinery client-go    utils
```
we import this: 	`kubeadmutil "k8s.io/kubernetes/cmd/kubeadm/app/util"`
### `godep version` output
godep v80 (darwin/amd64/go1.9.2)
### `go version` output
go version go1.9.2 darwin/amd64
Hi,

My employer recently switched git provider, from **bitbucket** to **github**. There was also a different developer working on this project. I noticed he used Godeps. I am wondering if this package could help me change all the package imports/links to **github** instead of **bitbucket**.

Note: I am fairly new with goLang.

Thank you!

### Expected behavior
Need go install to look for '**github.com**/accountName/repoName/folderName' instead of '**bitbucket.org**/accountName/repoName/folderName'.

### Actual behavior
After 'go clone' from github. Did 'go install'. I am receiving '.... cannot find package "**bitbucket.org**/accountName/repoName/folderName" in any of:'
/Users/myName/golang/src/github.com/accountName/repoName/vendor/**bitbucket.org**/accountName/repoName/folderName (vendor tree)
/usr/local/go/src/bitbucket.org/accountName/repoName/folderName (from $GOROOT)
/Users/myName/golang/src/bitbucket.org/accountName/repoName/folderName (from $GOPATH)

### Steps to reproduce behavior
Private repo. Please excuse the privacy.

### `godep version` output
I have not installed godep myself.

### `go version` output
go version go1.10.3 darwin/amd64

### Contents of Godeps.json file
{
	"ImportPath": "**bitbucket.org**/accountName/repoName",
	"GoVersion": "go1.7",
	"GodepVersion": "v79",
	"Deps": [ ... ],
}

### Can the specified directory be excluded when `godep save`
I have a `node_modules` folder under my project directory, which contains a lot of JS files. `godep save` can't work very well.
### Expected behavior

if the dependency is in the GOPATH it should not require the internet connection, our build machines are behind the proxy and downloads are usually very slow through proxy.
### Actual behavior

It seems it is downloading something not sure if it is just metadata or actual package, which makes our build really slow.
### Steps to reproduce behavior

```
1. godep save 
2. delete everything from Godeps directory except Godeps.json file [we do not commit third party packages], these packages will in the GOPATH when we build.
3. disconnect internet
4. godep restore
```
### `godep version` output

godep v74 (darwin/amd64/go1.6.2)
### `go version` output

go version go1.6.2 darwin/amd64
### Contents of Godeps.json file

`     "ImportPath": “project.com/A/B/C/D",    "GoVersion": "go1.6",     "GodepVersion": "v67",    "Deps": [         {             "ImportPath": "golang.org/x/net/context",             "Rev": "6a513affb38dc9788b449d59ffed099b8de18fa0"         },        {             "ImportPath": "golang.org/x/net/context/ctxhttp",             "Rev": "6a513affb38dc9788b449d59ffed099b8de18fa0"         },        {             "ImportPath": "golang.org/x/net/http2",           "Rev": "6a513affb38dc9788b449d59ffed099b8de18fa0"         },        {             "ImportPath": "golang.org/x/net/http2/hpack",             "Rev": "6a513affb38dc9788b449d59ffed099b8de18fa0"         },        {             "ImportPath": "golang.org/x/oauth2",          "Rev": "b5adcc2dcdf009d0391547edc6ecbaff889f5bb9"         },        {             "ImportPath": "golang.org/x/oauth2/google",           "Rev": "b5adcc2dcdf009d0391547edc6ecbaff889f5bb9"         },        {             "ImportPath": "golang.org/x/oauth2/internal",             "Rev": "b5adcc2dcdf009d0391547edc6ecbaff889f5bb9"         },        {             "ImportPath": "golang.org/x/oauth2/jws",          "Rev": "b5adcc2dcdf009d0391547edc6ecbaff889f5bb9"         },        {             "ImportPath": "golang.org/x/oauth2/jwt",          "Rev": "b5adcc2dcdf009d0391547edc6ecbaff889f5bb9"         },        {             "ImportPath": "google.golang.org/cloud/compute/metadata",             "Rev": "eb47ba841d53d93506cfbfbc03927daf9cc48f88"         },        {             "ImportPath": "google.golang.org/cloud/internal",             "Rev": "eb47ba841d53d93506cfbfbc03927daf9cc48f88"         },        {             "ImportPath": "gopkg.in/inf.v0",          "Comment": "v0.9.0",          "Rev": "3887ee99ecf07df5b447e9b00d9c0b2adaa9f3e4"         },        {             "ImportPath": "gopkg.in/mgo.v2",          "Comment": "r2016.02.04-3-g29cc868",          "Rev": "29cc868a5ca65f401ff318143f9408d02f4799cc"         },        {             "ImportPath": "gopkg.in/mgo.v2/bson",             "Comment": "r2016.02.04-3-g29cc868",          "Rev": "29cc868a5ca65f401ff318143f9408d02f4799cc"         },        {             "ImportPath": "gopkg.in/mgo.v2/internal/sasl",            "Comment": "r2016.02.04-3-g29cc868",          "Rev": "29cc868a5ca65f401ff318143f9408d02f4799cc"         },        {             "ImportPath": "gopkg.in/mgo.v2/internal/scram",           "Comment": "r2016.02.04-3-g29cc868",          "Rev": "29cc868a5ca65f401ff318143f9408d02f4799cc"         },        {             "ImportPath": "gopkg.in/yaml.v2",             "Rev": "a83829b6f1293c91addabc89d0571c246397bbf4"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api",            "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/endpoints",          "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/errors",             "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/install",            "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/meta",           "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/meta/metatypes",             "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/pod",            "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         },        {             "ImportPath": "k8s.io/kubernetes/pkg/api/resource",           "Comment": "v1.3.0",          "Rev": "283137936a498aed572ee22af6774b6fb6e9fd94"         }   ] } 
`

### Expected behavior

`godep get` should add the package to vendor just like `godep save ./...` would.
### Actual behavior

`godep get` looks at the packages, but doesn't add it to vendor and to Godeps.json
### Steps to reproduce behavior
1. set up Godeps with Go 1.6.3 for a project
2. try to use `godep get` to add a package to vendor
3. the package doesn't get added to vendor

I can reproduce this with a simple brand new setup and with existing setups.
### `godep version` output

godep v74 (linux/amd64/go1.6.3)
### `go version` output

go version go1.6.3 linux/amd64

### Expected behavior

`godep update` does not add the updated dependencies' vendored dependencies.
### Actual behavior

`godep update` vendors dependencies' vendored dependencies.

Step 2 (correctly) does not create $GOPATH/src/bar/vendor/foo/vendor/quux, but step 3 does.
### Steps to reproduce behavior

With this tree:

```
$GOPATH/src/
  foo/
    vendor/
        quux/
          quux.go
    foo.go
  bar/
    bar.go
```

And assuming that bar imports foo,
1. `cd $GOPATH/src/bar`
2. `godep save`
3. `godep update foo`
### `godep version` output

godep v74 (darwin/amd64/go1.6.2)
### `go version` output

go version go1.6.2 darwin/amd64

### Expected behavior

```
Happiness
```
### Actual behavior

```
Sadness
```
### Steps to reproduce behavior

```
on Ubuntu 14.04:
$ go
The program 'go' is currently not installed. To run 'go' please ask your administrator to install the package 'gccgo-go'

$sudo apt-get install gccgo-go

Then, with $GOPATH and $PATH set correctly:

$go install github.com/tools/godep
$godep version
```
### `godep version` output

```
godep: Error determining major go version from: "xgcc"
```
### `go version` output

```
go version xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3 linux/amd64
```
### Contents of Godeps.json file

```
{
        "ImportPath": "github.com/tools/godep",
        "GoVersion": "go1.7",
        "GodepVersion": "v74",
        "Deps": [
                {
                        "ImportPath": "github.com/kr/fs",
                        "Rev": "2788f0dbd16903de03cb8186e5c7d97b69ad387b"
                },
                {
                        "ImportPath": "github.com/kr/pretty",
                        "Comment": "go.weekly.2011-12-22-24-gf31442d",
                        "Rev": "f31442d60e51465c69811e2107ae978868dbea5c"
                },
                {
                        "ImportPath": "github.com/kr/text",
                        "Rev": "6807e777504f54ad073ecef66747de158294b639"
                },
                {
                        "ImportPath": "github.com/pmezard/go-difflib/difflib",
                        "Rev": "f78a839676152fd9f4863704f5d516195c18fc14"
                },
                {
                        "ImportPath": "golang.org/x/tools/go/vcs",
                        "Rev": "1f1b3322f67af76803c942fd237291538ec68262"
                }
        ]
}
```

### Expected behavior

I have a program which uses these packages:

<details>
<summary>

go get -v ./...</summary>



```
github.com/pkg/errors (download)
github.com/xeipuuv/gojsonschema (download)
github.com/xeipuuv/gojsonreference (download)
github.com/xeipuuv/gojsonpointer (download)
github.com/pkg/errors
github.com/xeipuuv/gojsonpointer
github.com/xeipuuv/gojsonreference
github.com/Azure/custom-script-extension-linux/blobutil
github.com/Azure/custom-script-extension-linux/preprocess
github.com/xeipuuv/gojsonschema
github.com/Azure/custom-script-extension-linux/download
github.com/Azure/custom-script-extension-linux
# github.com/Azure/custom-script-extension-linux
runtime.main: call to external function main.main
runtime.main: main.main: not defined
runtime.main: undefined: main.main
```

</details>

However I use [`github.com/stretchr/testify/require`](https://github.com/stretchr/testify) in my tests. Since it is a test depencency, it does not show up in `go get ./...`. 

**Problem:** Even though testify/require is a library, they have a `vendor/` directory (https://github.com/stretchr/testify), IMO it is a bad mistake, but it shouldn't be affecting me in this case.

So, when I run `godep save`, I don't expect any packages related to this test dependency (or its dependencies) to be even considered.
### Actual behavior

Now I run `godep save -v` which tells me:

```
godep: Go Version: go1.6
godep: No old Godeps.json found.
godep: Finding dependencies for [.]
godep: Found package: github.com/Azure/custom-script-extension-linux
godep:  Deps: bytes encoding/json errors fmt github.com/pkg/errors github.com/xeipuuv/gojsonpointer github.com/xeipuuv/gojsonreference github.com/xeipuuv/gojsonschema io io/ioutil log math net net/http net/url os path path/filepath reflect regexp runtime strconv strings time unicode/utf8
godep: Computing new Godeps.json file
godep: Package (github.com/stretchr/testify/require) not found
```

Then I go get `github.com/stretchr/testify/require`, then run it again:

```
godep: Go Version: go1.6
godep: No old Godeps.json found.
godep: Finding dependencies for [.]
godep: Found package: github.com/Azure/custom-script-extension-linux
godep:  Deps: bytes encoding/json errors fmt github.com/pkg/errors github.com/xeipuuv/gojsonpointer github.com/xeipuuv/gojsonreference github.com/xeipuuv/gojsonschema io io/ioutil log math net net/http net/url os path path/filepath reflect regexp runtime strconv strings time unicode/utf8
godep: Computing new Godeps.json file
godep: Package (github.com/davecgh/go-spew/spew) not found
```

Now it is complaining about `github.com/davecgh/go-spew/spew` which is a dependency of `github.com/stretchr/testify/require` and vendored under its `vendor/`

```
$ tree -d $GOPATH/src/github.com/stretchr/testify
/Users/alp/workspace/gopath-custom-script-extension-linux/src/github.com/stretchr/testify
├── Godeps
├── _codegen
├── assert
├── http
├── mock
├── require
├── suite
└── vendor
    └── github.com
        ├── davecgh
        │   └── go-spew
        │       └── spew
        ├── pmezard
        │   └── go-difflib
        │       └── difflib
        └── stretchr
            └── objx
                └── codegen
```

**But this should not be godep's concern** because it is not supposed to do anything for test dependencies, am I right?
### Steps to reproduce behavior

Described above.
### `godep version` output

godep v74 (darwin/amd64/go1.6.2)
### `go version` output

go version go1.6.2 darwin/amd64
### Contents of Godeps.json file

N/A

### Expected behavior

After following the migration steps , I expect to have a new ./vendor directory in my package
https://github.com/toni-moreno/snmpcollector
### Actual behavior

no vendor directory exists this is the output from the godep save ( no dependencies found)

```
$ godep save -v
godep: Go Version: go1.6
godep: Finding dependencies for [.]
godep: Found package: github.com/toni-moreno/snmpcollector
godep:  Deps: 
godep: Computing new Godeps.json file
godep: Computing diff between old and new deps
godep: Rewriting paths (if necessary)
```
### Steps to reproduce behavior

```
$go get https://github.com/toni-moreno/snmpcollector
(to install godep)
$go run build.go setup 
(here download dependencies)
$go get github.com/Sirupsen/logrus
$go get github.com/go-macaron/binding
$go get github.com/go-macaron/cache
$go get github.com/go-macaron/session
$go get github.com/influxdata/influxdb/client/v2
$go get github.com/soniah/gosnmp
$go get github.com/spf13/viper
(now migration process)
$cd snmpcollector
$ unset GO15VENDOREXPERIMENT
$ godep restore
$ rm -rf Godeps
$ godep save
```
### `godep version` output

godep v74 (linux/amd64/go1.6.2)
### `go version` output

go version go1.6.2 linux/amd64
### Contents of Godeps.json file

developer@ptlarqdev01:~/src/gospace/src/github.com/toni-moreno/snmpcollector$ cat Godeps/Godeps.json 
{
    "ImportPath": "github.com/toni-moreno/snmpcollector",
    "GoVersion": "go1.6",
    "GodepVersion": "v74",
    "Deps": []
}
