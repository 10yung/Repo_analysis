eventually, we can use it in non-android kotlin project

thanks
Please update the README to reflect the latest version of the library.
```

dependencies {
  compile 'com.github.moove-it:fakeit:v0.7'
}
```
Update version to the latest version to avoid misleading
Avoid having poor devs facing bugs that have already been solved and let them face the new ones instead :)

```
* What went wrong:
Could not resolve all files for configuration ':compileClasspath'.
> Could not find com.android.support:appcompat-v7:25.0.1.
  Searched in the following locations:
      https://repo1.maven.org/maven2/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.pom
      https://repo1.maven.org/maven2/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.jar
      http://dl.bintray.com/jetbrains/spek/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.pom
      http://dl.bintray.com/jetbrains/spek/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.jar
      https://jcenter.bintray.com/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.pom
      https://jcenter.bintray.com/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.jar
      https://jitpack.io/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.pom
      https://jitpack.io/com/android/support/appcompat-v7/25.0.1/appcompat-v7-25.0.1.jar
  Required by:
      project : > com.github.moove-it:fakeit:v0.5
```
I am pretty new to Kotlin as a whole and was trying to use this package in a spark app, it seems i need to also have this android dependency? 
I saw there was another issue that was closed that said it removed all android deps. 

Hmm, so many conflicts. You might like to fix?
<img width="1106" alt="2017-09-04 19 05 25" src="https://user-images.githubusercontent.com/9128731/30025751-1b5d3998-91a4-11e7-98e6-61d7ca86ec74.png">

When executed from a unit test in Android, `Fakeit.init()` throws an exception:

> org.yaml.snakeyaml.error.YAMLException: java.io.IOException: Stream closed
> 
> 	at org.yaml.snakeyaml.reader.StreamReader.update(StreamReader.java:200)
> 	at org.yaml.snakeyaml.reader.StreamReader.<init>(StreamReader.java:60)
> 	at org.yaml.snakeyaml.Yaml.load(Yaml.java:381)
> 	at com.mooveit.library.Fakeit.getValues(Fakeit.kt:79)
> 	at com.mooveit.library.Fakeit.<init>(Fakeit.kt:69)
> 	at com.mooveit.library.Fakeit.<init>(Fakeit.kt:49)
> 	at com.mooveit.library.Fakeit$Companion.fakeitInit(Fakeit.kt:233)
> 	at com.mooveit.library.Fakeit$Companion.initWithLocale(Fakeit.kt:253)
> 	at com.mooveit.library.Fakeit$Companion.initWithLocale(Fakeit.kt:259)
> 	at com.mooveit.library.Fakeit$Companion.init(Fakeit.kt:247)
> 	at xx.xxxxxx.xxxxx.viewmodels.LibraryViewModel.<init>(LibraryViewModel.kt:104)
> 	at xx.xxxxxx.xxxxx.SMMLibraryNavTests.setup(SMMLibraryNavTests.kt:27)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
> 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
> 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
> 	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)
> 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
> 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
> 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
> 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
> 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
> 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
> 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
> 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
> 	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
> 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:117)
> 	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:42)
> 	at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:262)
> 	at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:84)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
> 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
> 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
> 	at java.lang.reflect.Method.invoke(Method.java:498)
> 	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:147)
Maybe I'm missing something, but doesn't this library have methods to generate simple random numbers and booleans...? If not, why? That's pretty much standard.
Hello, how could I use fakeit inside my unit tests running on the JVM?
