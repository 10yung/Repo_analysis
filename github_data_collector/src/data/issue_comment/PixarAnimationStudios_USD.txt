### Description of Change(s)

[usdedit] Don't keep a file descriptor open for the temporary usda.

It is not needed, and prevents usdcat from writing to it in Windows.
Also ensure write permissions when removing the temporary usda,
otherwise usdedit -n will be unable to remove it on Windows.


### Fixes Issue(s)

`usdedit extras\usd\tutorials\convertingLayerFormats\Sphere.usd`
The process cannot access the file because it is being used by another process.
Error: Failed to open file extras\usd\tutorials\convertingLayerFormats\Sphere.usd, exiting.


### Description of Issue

When debugging imaging problems via `usdview`, it is useful to print or inspect various scene or imaging *paths* at different locations in the codebase.  

However, it is often difficult to distinguish between the types of paths (UsdPrim paths, cache paths, render index paths) by simply observing the value.  

Notably, cache paths and render index paths have the exact same value in `usdview`, because its `UsdImagingGLEngine` member is [constructed](https://github.com/PixarAnimationStudios/USD/blob/v20.02-rc1/pxr/usdImaging/usdImagingGL/engine.cpp#L128) with an absolute root path ("/") as its `delegateID`.  

It would be useful for a debug environment variable to have `usdview` construct `UsdImagingGLEngine` passing in a **non** absolute root path as its delegate ID (could be just something as simple as `UsdImagingDelegate`).  That way, it becomes easier to distinguish different types of paths by observing their value.  

### System Information (OS, Hardware)
ubuntu-18.04

### Package Versions
usd-19.11

### Build Flags
Dynamic build.
### Description of Issue

The `#ifndef ... #define` header guard started in [codegenTemplates/schemaClass.h](https://github.com/PixarAnimationStudios/USD/blob/v20.02-rc1/pxr/usd/usd/codegenTemplates/schemaClass.h#L24) should have a corresponding `#endif` at the end of the same file.  Currently, that `#endif` is added by [usdGenSchema.py](https://github.com/PixarAnimationStudios/USD/blob/v20.02-rc1/pxr/usd/usd/usdGenSchema.py#L932).

The use case is we prefer using `#pragma once` as the header guarding mechanism throughout our codebase.  It would be useful to be able to make this customisation purely through `codegenTemplates`.

### System Information (OS, Hardware)
ubuntu-18.04

### Package Versions
usd-19.11
### Description of Issue

A custom prim adapter can insert **multiple** Rprims for a **single** UsdPrim.  This means that the render index path of the Rprim(s), with the potential exception of potentially one of them, must differ from the UsdPrim's prim path.

Opening the above scenario in `usdview`, if the user makes a selection on an Rprim whose render index path *does not* match the UsdPrim's prim path, the following exception is raised:
```python
Traceback (most recent call last):
 File "/vol/apps/usd/19.11/VP18/lib/python/pxr/Usdviewq/appController.py", line 4469, in onPrimSelected
   prim.GetPath(), instance)
 File "/vol/apps/usd/19.11/VP18/lib/python/pxr/Usdviewq/selectionDataModel.py", line 657, in switchToPrimPath
   path = self._ensureValidPrimPath(path)
 File "/vol/apps/usd/19.11/VP18/lib/python/pxr/Usdviewq/selectionDataModel.py", line 420, in _ensureValidPrimPath
   repr(sdfPath)))
ValueError: Path must be a prim path, got: Sdf.Path.emptyPath
```

The code at these locations suggest that `usdview` makes assumptions that the render index path of an Rprim must equal its associated UsdPrim path:
https://github.com/PixarAnimationStudios/USD/blob/v20.02-rc1/pxr/usdImaging/usdviewq/appController.py#L4451
https://github.com/PixarAnimationStudios/USD/blob/v20.02-rc1/pxr/usdImaging/usdImaging/delegate.cpp#L2138

### Steps to Reproduce
1. Introduce a new prim type.  In our example, we defined a custom `Triangle` prim which inherits from `Gprim`.
2. Introduce a new prim adapter which inherits from `UsdImagingGprimAdapter` which provides imaging for the `Triangle` prim.  In `Populate`, insert two or more Rprims, with different cache paths, and offset the different Rprim(s) in space (ie. providing different points for different cache paths) so they can be selected individually.
3. Author a new layer:
```
#usda 1.0                                                                                                                                                                

def Triangle "myTriangle" 
{
}
```
4. Launch the above layer in `usdview`, and select one of the Rprims whose render index path does not match its UsdPrim path.

### System Information (OS, Hardware)
Ubuntu-18.04

### Package Versions
usd-19.11

### Build Flags
Dynamic build
This works around the problem of glew libraries are inconsistently selected between OpenSubdiv and USD. OpenSubdiv prioritizes glews, and USD prioritizes glew. If both are installed on a system, hilarity ensues (symbols in glew cannot be resolved.)
Building on Windows does not create a pxrTargets.cmake file, breaking pxrConfig.cmake in the root installation directory when choosing a monolithic build.

### Steps to Reproduce
Build the current release using the python script.

`py -2 USD\build_scripts\build_usd.py usd_py --build-monolithic --ptex --alembic --openimageio `

(I get the same result using cmake directly)

This is on Win 10, MSVC 2019.

### Description of Issue

Python cannot import any of the USD packages including `pxr.Usd`,` pxr.Tf`, etc. Here is what happens when I try. This is the same error as closed issue #1033, but it's not fixed using any of the steps there.

```
Python 2.7.5 (default, Aug  7 2019, 00:51:29) 
[GCC 4.8.5 20150623 (Red Hat 4.8.5-39)] on linux2
Type "help", "copyright", "credits" or "license" for more information.
>>> import pxr.Usd
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Tf'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Tf/__init__.py", line 85, in <module>
    from . import _tf
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Trace'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Trace/__init__.py", line 28, in <module>
    import _trace
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Work'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Work/__init__.py", line 31, in <module>
    import _work
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Plug'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Plug/__init__.py", line 28, in <module>
    import _plug
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Gf'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Gf/__init__.py", line 31, in <module>
    from pxr import Tf
  File "./install/USD/v19.11/lib/python/pxr/Tf/__init__.py", line 98, in <module>
    __SetErrorExceptionClass(ErrorException)
NameError: name '__SetErrorExceptionClass' is not defined
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Vt'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Vt/__init__.py", line 31, in <module>
    import _vt
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Ar'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Ar/__init__.py", line 24, in <module>
    import _ar
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Kind'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Kind/__init__.py", line 26, in <module>
    from . import _kind
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Sdf'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Sdf/__init__.py", line 24, in <module>
    import _sdf
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Warning: in Tf_PyLoadScriptModule at line 124 of ./source/USD/pxr/base/lib/tf/pyUtils.cpp -- Import failed for module 'pxr.Pcp'!
Traceback (most recent call last):
  File "./install/USD/v19.11/lib/python/pxr/Pcp/__init__.py", line 24, in <module>
    import _pcp
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "./install/USD/v19.11/lib/python/pxr/Usd/__init__.py", line 24, in <module>
    import _usd
AttributeError: 'NoneType' object has no attribute '__MFB_FULL_PACKAGE_NAME'
>>> quit()

```

### Steps to Reproduce
1. Download and build glew, opensubdiv, ptex, and tbb from source, install to custom directories.
2. Install other dependencies using yum.
3. Configure and build USD using cmake, install to a custom directory.
4. Set PYTHONPATH and LD_LIBRARY_PATH to include ./install/USD/lib/python and ./install/USD/lib respectively. 
5. Open a python2.7 interpreter
7. Type `import pxr.Usd`


### System Information (OS, Hardware)

- centos7
- devtoolset-6 for compilers

### Package Versions
- v19.11
- v19.07
- dev branch on Jan 15 2020
### Build Flags
BOOST_USE_STATIC_LIBS=true
OpenGL_GL_PREFERENCE=GLVND
PYSIDE_USE_PYSIDE2 = TRUE
CMAKE_C_FLAGS and CMAKE_CXX_FLAGS = -fPIC
Others setting the locations of all of the libraries built from source
PYTHON_EXECUTABLE=/usr/bin/python2.7
PYTHON_INCLUDE_DIR=/usr/include/python2.7
PYTHON_LIBRARY = /usr/lib64/libpython2.7.so
### Description of Issue
The mesh representation used by Hydra to describe a sphere primitive does not align its points with the origin. I'd submit a pull request for this, but I was hoping that you have some sort of script for generatig the mesh description code automatically?

### Steps to Reproduce
1. Open a USD file with a default sphere primitive in usdview.
2. It's easiest to see in "points" drawing mode that the points don't align as one would expect with the axes.
3. Looking at the code, you can see there are nowhere near enough "0.0000" entries in the mesh (attached image shows both usdview and highlights all zero entries in the code).
![SphereMeshOffset](https://user-images.githubusercontent.com/1513015/72268089-2efcd980-35ef-11ea-9d1c-64ce8ec7acc5.png)

### Package Versions
19.11
###Log on google drive:
https://drive.google.com/open?id=174cvjbSGoaMGWvy3v2UTfbOJSuHtbq91

### System Information (OS, Hardware)
xcode-select version 2343
OS X El Capitan
### Description of Issue
Currently there is no easy way of deleting a variant set, the API only exposes the ability to add Variant sets.

### Steps to Reproduce
I could only find method to AddVariantSet(`UsdVariantSet::AddVariantSet()`), and nothing related to DeleteVariantSet... although if I add the following line manually on a sublayer

```
delete variantSets = "modelVariants"
```

that does seem to remove the variantSet, even though I'm left with the following showing up as metadata after the stage is composed.

```
    variants = {
        string modelVariants = "lo"
    }
```

### Package Versions
USD-19.11
