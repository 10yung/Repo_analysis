Hi,
my plugin based on WPPB is working, but I need to make some updates that require a database migration. How can I handle this?

I can see the version definition in the main php file:

`define( 'XXXX_VERSION', '1.0.0' );`

Once I have updated this to, say, 2.0.0, how can I detect that the plugin is outdated, and perform some actions?

I mean: is there already some boilerplate for this?
I'm having huge trouble in getting the boilerplate to share data between classes. As an example, I'm defining a protected property `protected $plugin_url;` in includes/class-plugin-name.php. It's populated when __construct() runs. I can access the property in that class using `$this->plugin_url`. However, I can't get it to work in public/class-plugin-name-public.php. Tried all of the following with no success:
`$this->plugin_url`
`$plugin_url`
`parent::plugin_url`
`self::plugin_url`
...

I've noticed that none of the Boilerplate classes extend the core class, which means that none of the properties or methods can be easily shared. I thought that replacing
`class Plugin_Name_Public {`
with
`class Plugin_Name_Public extends Plugin_Name {`
would do the trick, but no luck. Any suggestions?

I see that overall the Boilerplate works around this by re-defining $plugin_name and $version in each class. Seems like a massive duplication of data every single time. Particularly with a plugin that may end up growing to dozens of extra classes/files.

Is there a reason why the boilerplate uses nested classes? Could this be why I can't access properties defined in one class in a sub-class like Plugin_Name_Public?

Please help.
Thanks!
Changed "Currently plugin version" to "Current plugin version" - very minor change.

Hi, in the constructor of WordPress-Plugin-Boilerplate/plugin-name/includes/class-plugin-name.php we are loading admin hooks in the public-facing site and public hooks in the admin-facing site:

```
$this->define_admin_hooks();
$this->define_public_hooks();
```

Maybe something like this could help:

```
if ( is_admin() ) {
  $this->define_admin_hooks();
} else {
  $this->define_public_hooks();
}
```

Regards
Hello! 
I found an interesting Template. 
https://github.com/hlashbrooke/WordPress-Plugin-Template
Help me figure this out. (Template author couldn't help me)

How to display this code on the pages of the site?
echo '<script>alert("'.get_option('wpt_text_block').'");</script>';
How to do it correctly, according to the architecture of this plugin?

I can't understand the structure of the plugin. Do I need to create a file for an external template, or do I need to create a function in the class?
Help me please.
This change allows WP's predefined filters/hooks to be added without a component. For example;

    add_filter( 'custom_menu_order', '__return_true' );

can be added with

    $this->loader->add_filter('custom_menu_order', null, '__return_true');

Hello,
I think this is a nicer solution and more readable for newbies to understand this code functionality. Thanks.
Add a shell script to make all the plugin name substitutions automatically, without changing those that should not be changed.  Tested working on OSX shell.