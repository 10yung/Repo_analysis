I've been using Dash for a while and would like to dip my toes into Dash development -- would this PR be welcome?

- [x] Previously, all callbacks were emerald (green), now clientside callbacks will be sienna (red).
- [ ] I would like to color code components that are not present in the layout differently -- this would be very useful for debugging if `suppress_callback_exceptions` is enabled. However, it's not clear to me what the cleanest way is to do this, would anyone have any suggestions here?

- [ ] I have run the tests locally and they passed. (refer to testing section in [contributing](https://github.com/plotly/dash/blob/master/CONTRIBUTING.md))
- [ ] I have added tests, or extended existing tests, to cover any new features or bugs fixed in this PR

### optionals

- [ ] I have added entry in the `CHANGELOG.md`
- [ ] If this PR needs a follow-up in **dash docs**, **community thread**, I have mentioned the relevant URLS as follow
    -  [ ] this github [#PR number]() updates the dash docs
    -  [ ] here is the show and tell thread in plotly dash community 

As encountered in https://github.com/plotly/dash-core-components/pull/729, it would be useful for component developers to expose degradation warnings / errors, etc. in Dash Devtools.

As currently implemented, only front-end errors thrown from within the React Error Boundary components are caught / handled by the Dash Devtools, making it impossible to both expose warning / error information to the user and rendering a component at the same time.
On non-ES6/ES2015+ etc compatible browsers, I think there may be an issue with async Dash (`>= 1.5.0`) and "regenerator runtime". The error is `ReferenceError: regeneratorRuntime is not defined` in the JS console, specifically when trying to use async Dash Table. Hopefully this could be fixed in the webpack config, see https://babeljs.io/docs/en/babel-polyfill (`import "regenerator-runtime/runtime"`) and [here](https://github.com/babel/babel/issues/8829#issuecomment-456524916) (`... "regenerator": true`).

cc @Marc-Andre-Rivet

Minor fixes to use HTML5 tags.  In HTML5 the script tag does not need the type="text/javascript" attribute.


It would be great if we could add `All Contributors` to Dash. 

`All Contributors` is a free bot you add -> https://allcontributors.org/

It adds an auto generated piece of code to the bottom of the README that creates the contributors list.  

Here is the Emoji Key âœ¨ (and Contribution Types) ->  https://allcontributors.org/docs/en/emoji-key

The docs are listed here -> https://allcontributors.org/docs/en/overview

The next image shows an example:

![all-contributors-2](https://user-images.githubusercontent.com/418747/72320033-87fe6780-36ec-11ea-809e-c7ff2d94c568.png)

And it is shown here -> https://github.com/slurpcode/slurp#contributors-

Very easy to add people just by commenting on PR's or issues ðŸ•º




**Describe your context**
```
dash                    1.7.0
dash-core-components    1.6.0
dash-html-components    1.0.2
dash-renderer           1.2.2
dash-table              4.5.1
```
**Describe the bug**

When using multi-outputs in the following code snippet (set `MULTI = True`), the labels are not reliably updated when clicking the button to update the slider values.

To reproduce:
 - Start the app
 - Click the button to set both slider values to 5
 - Change both slider values manually to a different number. Both labels update correctly
 - Click the button again. Only the second label is updated, not the first, despite both `update_slider1_label` and `update_slider2_label` being called

```python
import dash

import dash_html_components as html
import dash_core_components as dcc
from dash.dependencies import Output, Input
from dash.exceptions import PreventUpdate

APP = dash.Dash(__name__)
APP.layout = html.Div([
    html.Div([
        html.Button('Button', id='button'),
    ]),
    html.Div([
        html.Label(id='label1'),
        dcc.Slider(id='slider1', min=0, max=10, value=0),

    ]),
    html.Div([
        html.Label(id='label2'),
        dcc.Slider(id='slider2', min=0, max=10, value=0),
    ])
])


MULTI = True

if MULTI:
    @APP.callback(
        [Output('slider1', 'value'),
         Output('slider2', 'value')],
        [Input('button', 'n_clicks_timestamp')]
    )
    def update_slider_vals(n_clicks_timestamp):
        if not n_clicks_timestamp:
            raise PreventUpdate
        return 5, 5
else:
    @APP.callback(
        Output('slider1', 'value'),
        [Input('button', 'n_clicks_timestamp')]
    )
    def update_slider1_val(n_clicks_timestamp):
        if not n_clicks_timestamp:
            raise PreventUpdate
        return 5

    @APP.callback(
        Output('slider2', 'value'),
        [Input('button', 'n_clicks_timestamp')]
    )
    def update_slider2_val(n_clicks_timestamp):
        if not n_clicks_timestamp:
            raise PreventUpdate
        return 5


@APP.callback(
    Output('label1', 'children'),
    [Input('slider1', 'value')]
)
def update_slider1_label(val):
    ret = f'Slider1 value {val}'
    print(ret)
    return ret


@APP.callback(
    Output('label2', 'children'),
    [Input('slider2', 'value')]
)
def update_slider2_label(val):
    ret = f'Slider2 value {val}'
    print(ret)
    return ret


if __name__ == '__main__':
    APP.run_server(port=6060)
```

**Expected behavior**

In this example, both labels should always be updated to reflect the slider value, regardless of whether there is one callback doing both or each label has its own callback.

**Screenshots**

![image](https://user-images.githubusercontent.com/12515343/72259129-fd483a80-360f-11ea-84ec-1bd178dc82fc.png)


Add both a .pylintrc and a .pylintrc37 file to the tests folder.

Enable the classic superfluous-parens on Python 3 to test the difference between Python 2 and 3.

Lint some Python.

Pylint has now run twice.

![pylint-ran-twice](https://user-images.githubusercontent.com/418747/72215888-2bbd0b80-3565-11ea-83db-aceec78c86ac.png)

Install aspell on CircleCI. Add a custom dictionary file.

Spell check the Markdown files with a shell script.

Add section on spell checking to the contributing guide.

Update the CHANGELOG.

http://aspell.net/

https://en.wikipedia.org/wiki/GNU_Aspell
When dash is embedded into an iframe with a sandbox attribute that only has allow-scripts, cookie access is disabled and dash fails to load. As such, we need to restrict our cookie usage by disabling functionality.

This patch removes the disabled functionality in a graceful manner, allowing dash to load in very restricted iframes.

## Contributor Checklist

- [x] ~I have broken down my PR scope into the following TODO tasks~ not needed
- [x] I have run the tests locally and they passed. (refer to testing section in [contributing](https://github.com/plotly/dash/blob/master/CONTRIBUTING.md))
- [x] I have added tests, or extended existing tests, to cover any new features or bugs fixed in this PR

### optionals

- [x] I have added entry in the `CHANGELOG.md`

```
dash                       1.7.0
dash-bootstrap-components  0.7.2
dash-core-components       1.6.0
dash-daq                   0.1.7
dash-html-components       1.0.2
dash-renderer              1.2.2
dash-table                 4.5.1
```
I'm building a multi-page Dash app with a callback trigger on dcc.Location that also uses `flask.send_from_directory` in a Flask route. However, the Dash callback seems to be interfering with the Flask route because `flask.send_from_directory` is no longer fired in its flask route.