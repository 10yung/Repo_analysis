I recently inherited a iOS project written using ReactiveSwift 3.1.0 and ReactiveCocoa 7.2.0. I'm tasked with updating it to Swift 5 and the latest ReactiveSwift versions.

I updated ReactiveSwift to 6.1.0 and ReactiveCocoa to 10.1.0. I'm not well versed in Reactive programming but I managed to convert a good portion of the existing codebase to the latest versions.

However I'm stuck at this particular part. The original programmer is not available anymore.

In this project, there is an extension on view controller to present error messages.

```swift
extension Reactive where Base: UIViewController {
    func presentError(animated: Bool = true) -> BindingTarget<Error> {
        return self.makeBindingTarget { $0.present(error: $1, animated: animated) }
    }

    func present(error: Error, animated: Bool = true, completion: (() -> Void)? = nil) {
        LogError("Presenting error: \(error.verboseDescription)")
        self.present(UIAlertController(error: error, completion: completion), animated: animated, completion: nil)
    }
}
```

In a view controller, I'm getting the below error at this line.

```swift
self.reactive.presentError() <~ self.viewModel.reportAction.errors.map { $0 }
```

> '() -> BindingTarget' is not convertible to '(Bool) -> BindingTarget'

This is the relevant part in the view model.

```swift
private(set) var reportAction: Action<(User, ReportReason), Void, APIKit.Error>!
```

The only change that happened here is the `errors` type in `viewModel.reportAction.errors.map { $0 }` changed from `public let errors: Signal<Error, NoError>` to `public let errors: Signal<Error, Never>`. This is due to some [changes](https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/CHANGELOG.md#600) done in the latest ReactiveSwift source.

That has apparently broken this piece of code. I'm not sure why the error is occurring and how to fix this part.
Hi! Thanks again for creating ReactiveSwift! I've searched around a bit online and can't find what I'm looking for.

The [APIContracts](https://github.com/ReactiveCocoa/ReactiveSwift/blob/master/Documentation/APIContracts.md#best-practices) used to include [this](https://github.com/ReactiveCocoa/ReactiveObjC/blob/master/Documentation/DesignGuidelines.md#avoid-using-subjects-when-possible) best practice.

My question is: should [`pipe()`](http://reactivecocoa.io/reactiveswift/docs/latest/Classes/Signal.html#/s:13ReactiveSwift6SignalC4pipe10disposableACyxq_G6output_AC8ObserverCyxq__G5inputtAA10Disposable_pSg_tFZ) be avoided for the same reasons that `RACSubject` should be avoided?

Thanks!
ReactiveSwift 6.0.0
Xcode 10.3

Hi there! This may be a dumb question. I'm wondering, is it possible to update the `value` of a `MutableProperty` in a block triggered by observing that `MutableProperty`? When I run the following code, and click the button a few times, I get a `Lock.UnfairLock.lock()` error. 
```
import UIKit
import ReactiveSwift

class Foo {
    let mutableProperty = MutableProperty<[Int]>([1, 2, 3, 4, 5])

    init() {
        mutableProperty.signal.skipRepeats().observeValues { (list) in
            print(list)
            if list.count <= 2 {
                self.mutableProperty.value.append(contentsOf: [6, 7, 8])
            }
        }
    }
}

class ViewController: UIViewController {
    let foo = Foo()
    
    @IBAction func didTapButton(_ sender: Any) {
        DispatchQueue.main.asyncAfter(deadline: .now() + 1) {
            self.foo.mutableProperty.value.removeFirst()
        }
    }
}
```
However, I have a similar version of this working in another project. I'll try to sanitize it so I can post. I'm just wondering if what I'm trying to do is not possible, or if there is another ReactiveSwift construct that would help. 
can we regenerate the documentation on http://reactivecocoa.io/reactiveswift based on the last release 6?
#### Checklist
- [x] Updated CHANGELOG.md.

turn this
```swift
class ViewModel {
    private(set) lazy var profile = Property<Profile>(mutableProfile)
    private let mutableProfile: MutableProperty<Profile>

    init(profile: Profile) {
        mutableProfile = MutableProperty<Profile>(profile)
    }
}
```

into this
```swift
class ViewModel {
    @Observable private(set) var profile: Profile

    init(profile: Profile) {
        self.profile = profile
    }
}
```

usage
```swift
viewModelInstance.profile.$property.signal.observeValues { value in
    // ....
{
```
Please see https://github.com/ReactiveCocoa/ReactiveCocoa/issues/3687 for the details.
Hey all! In this PR I'm removing testing libraries for SPM users. This is because currently SPM will both fetch & build your libraries even though they are in a target that you don't use. Because of that (and the current integration of SPM in Xcode), Xcode will build your testing dependencies (either in Xcode Preview or for normal builds) and complain (in Preview you won't ever get your UI to show and in your projects you will get runtime crash for missing XCTest etc.).

With this fix we are still able to test ReactiveSwift (using additional env variable) and skip downloading the testing libraries for normal usage.

Let me know what you think about it.

#### Checklist
- [x] Updated CHANGELOG.md.

Are there plans to start making use of property wrappers? I think that it could improve the syntax in certain areas, especially `Property`, so I quickly put together this swift package as a proof of concept https://github.com/petrpavlik/PropertyPropertyWrapper.
Hi, 

I came across this repository (https://github.com/quickbirdstudios/CombineRxSwiftPerformance) comparing performance of RxSwift and Combine, so I thought :cool:  Iâ€™ll try to add ReactiveSwift. So I did, but when I did I was very surprised, as ReactiveSwift is much much slower than the other two (https://github.com/quickbirdstudios/CombineRxSwiftPerformance/pull/3). Does anyone know if it is really that slow or the tests are just not doing what they should?

The results end the same while integrating using Carthage so some build configuration issues do not make a difference.

Sorry for duplicate to Slack post, but an issue would more maintainable.

Thanks in advance
Hello!

The following:
```
SignalProducer<Int, Never>([ 1, 2, 3, 4 ])
    .flatMap(.latest) { i in
        SignalProducer(value: i)
            .delay(1, on: QueueScheduler.main)
}
    .startWithValues { value in
        print("A", value)
}
```
Prints nothing ðŸ¤” 

vs
```
SignalProducer<Int, Never>([ 1, 2, 3, 4 ])
    .flatMap(.latest) { i in
        SignalProducer.empty
            .delay(1, on: QueueScheduler.main)
            .then(SignalProducer(value: i))
}
    .startWithValues { value in
        print("B", value)
}
```
prints `B 4`  ðŸŽ‰

Why is this the case?
