### Issue description
When the query returns multiple result sets, if the second query result is wrong, it will not return when calling rows.nextresultset (), and the call will always be blocked.

### Example code
```go
// queryMulti
package main

import (
	"database/sql"
	"fmt"

	_ "github.com/go-sql-driver/mysql"
)

func queryMulti() (err error) {
	sqlText := "" +
		"select 'ds1' ds, ifnull(null,'') sex1  ;" +
		"select 'ds2' ds, isnull(null,'') sex2  ;"
	connectionString := "root:game@tcp(192.168.1.88:3306)/GMDB?charset=utf8&multiStatements=true"
	my, err := sql.Open("mysql", connectionString)
	if err != nil {
		fmt.Printf("Open %v\n", err)
		return err
	} else {
		fmt.Printf("Open Success: %v,\n\tStats%v\n", connectionString, my.Stats())
	}

	defer my.Close()

	rows, err := my.Query(sqlText)
	if err != nil {
		fmt.Printf("Query : %v\n", err)
		return err
	}
	defer rows.Close()

	var id, sex string
	var ds, dsr = 1, 1
	for rows.Next() {
		if err := rows.Scan(&id, &sex); err != nil {
			fmt.Printf("Scan Error: %v\n", err)
			return err
		} else {
			fmt.Printf("DS[%2v]Row[%2v] => id[%v], sex[%v]\n",
				ds, dsr, id, sex)
			dsr++
		}
	}
	for rows.NextResultSet() { // <-- blocked
		ds++
		for rows.Next() {
			if err := rows.Scan(&id, &sex); err != nil {
				fmt.Printf("Scan %v\n", err)
				return err
			} else {
				fmt.Printf("DS[%2v]Row[%2v] => id[%v], sex[%v]\n",
					ds, dsr, id, sex)
				dsr++
			}
		}
	}
	return nil
}

func main() {

	if err := queryMulti(); err != nil {
		fmt.Printf("queryMulti : %v\n", err)
	}
}

```

### Error log
```

```

### Configuration
*Driver version (or git SHA):Release v1.5.0 (#1047) git: 17ef3dd9d98b69acec3e85878995ada9533a9370

*Go version:1.12.15

*Server version:MySQL 5.22

*Server OS: ubuntu

fix fork:
https://github.com/yireyun/mysql/commit/eac50bb6f25949d448ebdd2db105cf21b34b2abd
### Issue description
In some cases it might be undesirable to fetch a potentially huge resultset at once.

MySQL provides cursors for that in the binary protocol (prepared statements).

First, a cursor flag has to be set in [`COM_STMT_EXECUTE`](https://dev.mysql.com/doc/internals/en/com-stmt-execute.html), then the result chunks can be requested with the [`COM_STMT_FETCH` command](https://dev.mysql.com/doc/internals/en/com-stmt-fetch.html).

Initially, we will probably only support forward-only and read-only cursors. However the question remains, trough what interface we make this feature available.

### Issue description
Implement a Travis CI job that checks if the driver compiles on all platforms supported by Go.

### Example code
See https://gist.github.com/shogo82148/a7a61b7a1652bff07fc0dfd07ceb2122

### Description

updates https://github.com/go-sql-driver/mysql/issues/960

currently, the following code will fails because of type miss match.

```go
func doSomething() mysql.NullTime

var nt sql.NullTime
nt = doSomething() // compile error
```

It may prevent migrating from `mysql.NullTime` to `sql.NullTime`.
From Go 1.9, Go supports type aliases. https://golang.org/doc/go1.9#language
It helps migrating.

### Checklist
- [ ] Code compiles correctly
- [ ] Created tests which fail without the change (if possible)
- [ ] All tests passing
- [ ] Extended the README / documentation, if necessary
- [ ] Added myself / the copyright holder to the AUTHORS file

### Description

This is a counter-proposal to #1042. 

You can create a custom Connector object using this new API:

```go
import (
    "database/sql"
    "database/sql/driver"
    "github.com/go-sql-driver/mysql"
)

type CustomConnector struct {
    cfg *mysql.Config
}

func (cc *CustomConnector) Connect(ctx Context) (driver.Conn, error) {
    cc.cfg.Host = getCurrentMySQLHost()
    cfg.User, cfg.Password = getCurrentMySQLAuth()
    return mysql.Connect(ctx, cc.cfg)
}

func (cc *CustomConnector) Driver() driver.Driver {
    return nil
}
```

### Checklist
- [ ] Code compiles correctly
- [ ] Created tests which fail without the change (if possible)
- [ ] All tests passing
- [ ] Extended the README / documentation, if necessary
- [ ] Added myself / the copyright holder to the AUTHORS file

### Issue description
Connecting to a server when the server has blocked the client for too many failed connections returns `commands out of sync. Did you run multiple statements at once?`.  The mysql client returns a much more clearer and easier to repair message `ERROR 1129 (HY000): Host 'X.X.X.X' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts'`.

Is it possible to return better errors, or even retrieve the message returned by the server ?

I know this isn't a fix, but changing the check in packets.go to this:
```go
if data[3] != mc.sequence && data[3] != 0b1 {
	if data[3] > mc.sequence {
		return nil, ErrPktSyncMul
	}
	return nil, ErrPktSync
}
mc.sequence++
```

changes the output of my example to:
```
2019/12/09 14:02:41 Initial Ping Error: %!s(<nil>)
2019/12/09 14:02:41 Final Ping Error: Error 1129: Host '172.17.0.1' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts'
```
which is far more readable.

### Example code
- [mysql.sh](https://github.com/go-sql-driver/mysql/files/3937802/mysql.sh.txt) to start a mysql server under docker to make the test repeatable.
```go
package main

import (
	"crypto/tls"
	"crypto/x509"
	"database/sql"
	"io/ioutil"
	"log"

	mysql "github.com/go-sql-driver/mysql"
)

func main() {
	rootCertPool := x509.NewCertPool()

	pem, err := ioutil.ReadFile("ssl/ca.pem")
	if err != nil {
		log.Fatal(err)
	}

	if ok := rootCertPool.AppendCertsFromPEM(pem); !ok {
		log.Fatal("Failed to append PEM.")
	}

	if err := mysql.RegisterTLSConfig("custom", &tls.Config{RootCAs: rootCertPool}); err != nil {
		panic(err)
	}

	dsn := "localuser:localpass@tcp(mysql.localtest.me:3306)/localtest?tls=custom"
	func() {
		db, _ := sql.Open("mysql", dsn)
		defer db.Close()

		err := db.Ping()
		log.Printf("Initial Ping Error: %s", err)
	}()

	dsn = "localuser:localpass@tcp(mysql2.localtest.me:3306)/localtest?tls=custom"
	for i := 0; i < 110; i++ {
		func() {
			dsn := dsn
			db, _ := sql.Open("mysql", dsn)
			defer db.Close()
			_ = db.Ping()
		}()
	}

	dsn = "localuser:localpass@tcp(mysql.localtest.me:3306)/localtest?tls=custom"
	func() {
		db, _ := sql.Open("mysql", dsn)
		defer db.Close()

		err := db.Ping()
		log.Printf("Final Ping Error: %s", err)
	}()
}
```

### Error log
```
2019/12/09 13:39:39 Initial Ping Error: %!s(<nil>)
2019/12/09 13:39:40 Final Ping Error: commands out of sync. Did you run multiple statements at once?
```

### Configuration
*Go version:* go version go1.13.1 darwin/amd64

*Server version:* 10.4.10-MariaDB-1:10.4.10+maria~bionic

*Server OS:* macOS/docker for repeating test.

*Testing Repository:* [koshatul/go-mysql-sync-issue](https://github.com/koshatul/go-mysql-sync-issue)
There is no support for reading a mysql configuration file as specified in the DSN. This is supported in other language bindings as read_default_file (or mysql_read_default_file). See https://bugs.mysql.com/bug.php?id=57081 for various examples. This is also supported as part of the C client library https://dev.mysql.com/doc/refman/8.0/en/mysql-options.html with its MYSQL_READ_DEFAULT_FILE option.

This makes it possible to specify for example the user and password (and host and port) in a central place, with tight file permissions instead of having to write these in places that are less desirable. In our case, we need to write the user/pass in the telegraf.conf file, and restrict the permissions, and duplicate the credentials that otherwise would be centralized in a single file.
### Issue description
the connection pooling to the database server seems to be broken since golang version 1.13.1 or with the latest commit (14bb9c0).

running in version 1.12.9 and up to git commit 877a977 everything seemed to work

I have two servers, running each GO applications, that held two different connection pools to the same database-server - one connection is heavily used (DB1 with 20 Requests per second) and one is rarely used (DB2 with 1 Request per Minute)

server1 runs since round about 5-10 minutes,
server 2 runs since round about 3 days.

broken means that a part of the connections is no longer used and seems to be stale:
```
MariaDB [(none)]> SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST where HOST like '%server1%';
+--------+------+---------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
| ID     | USER | HOST          | DB     | COMMAND | TIME | STATE | INFO | TIME_MS    | STAGE | MAX_STAGE | PROGRESS | MEMORY_USED | EXAMINED_ROWS | QUERY_ID  |
+--------+------+---------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
| 599325 | dbuser | server1:41744 | DB1  | Sleep   |    0 |       | NULL |    423.089 |     0 |         0 |    0.000 |       83672 |             0 | 653926700 |
| 599233 | dbuser | server1:38024 | DB2 | Sleep   |   57 |       | NULL |  57283.466 |     0 |         0 |    0.000 |       83680 |             0 | 653885165 |
| 599232 | dbuser | server1:38022 | DB2 | Sleep   |  117 |       | NULL | 117233.167 |     0 |         0 |    0.000 |       83680 |             0 | 653840343 |
| 599205 | dbuser | server1:37538 | DB1  | Sleep   |    0 |       | NULL |    523.742 |     0 |         0 |    0.000 |       83680 |             0 | 653926568 |
| 599204 | dbuser | server1:37534 | DB1  | Sleep   |    0 |       | NULL |    356.378 |     0 |         0 |    0.000 |       83672 |             0 | 653926789 |
| 599203 | dbuser | server1:37532 | DB1  | Sleep   |    0 |       | NULL |    120.182 |     0 |         0 |    0.000 |       83672 |             0 | 653927036 |
| 599164 | dbuser | server1:36566 | DB1  | Sleep   |    0 |       | NULL |    118.011 |     0 |         0 |    0.000 |      100544 |             0 | 653927037 |
| 599163 | dbuser | server1:36522 | DB1  | Sleep   |    0 |       | NULL |    368.234 |     0 |         0 |    0.000 |       83688 |             0 | 653926767 |
| 599162 | dbuser | server1:36498 | DB1  | Sleep   |    0 |       | NULL |    413.715 |     0 |         0 |    0.000 |       83672 |             0 | 653926722 |
| 599161 | dbuser | server1:36496 | DB1  | Sleep   |    0 |       | NULL |    182.833 |     0 |         0 |    0.000 |       83688 |             0 | 653926948 |
| 599160 | dbuser | server1:36488 | DB1  | Sleep   |    0 |       | NULL |    170.804 |     0 |         0 |    0.000 |       83680 |             0 | 653926989 |
| 599159 | dbuser | server1:36486 | DB1  | Sleep   |    0 |       | NULL |    480.610 |     0 |         0 |    0.000 |       83672 |             0 | 653926634 |
| 599157 | dbuser | server1:36482 | DB2 | Sleep   |  399 |       | NULL | 399946.550 |     0 |         0 |    0.000 |       91896 |             0 | 653625317 |
| 599156 | dbuser | server1:36480 | DB1  | Sleep   |  400 |       | NULL | 400178.841 |     0 |         0 |    0.000 |       59664 |             0 | 653625282 |
| 599155 | dbuser | server1:36478 | DB1  | Sleep   |  400 |       | NULL | 400196.065 |     0 |         0 |    0.000 |      100032 |             0 | 653625241 |
+--------+------+---------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
```

I am a little bit confused about those two conenctions at the end...
While on the other server go runs the old version and commit:

```
MariaDB [(none)]> SELECT * FROM INFORMATION_SCHEMA.PROCESSLIST where HOST like '%server2%';
+--------+------+---------------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
| ID     | USER | HOST                | DB     | COMMAND | TIME | STATE | INFO | TIME_MS    | STAGE | MAX_STAGE | PROGRESS | MEMORY_USED | EXAMINED_ROWS | QUERY_ID  |
+--------+------+---------------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
| 453236 | dbuser | server2:33138 | DB1  | Sleep   |    0 |       | NULL |    954.053 |     0 |         0 |    0.000 |       83672 |             0 | 653925859 |
| 453235 | dbuser | server2:33136 | DB1  | Sleep   |    2 |       | NULL |   2311.532 |     0 |         0 |    0.000 |       83672 |             0 | 653925175 |
| 453234 | dbuser | server2:33132 | DB1  | Sleep   |    0 |       | NULL |    792.861 |     0 |         0 |    0.000 |       83672 |             0 | 653925992 |
| 453233 | dbuser | server2:33130 | DB1  | Sleep   |    2 |       | NULL |   2065.223 |     0 |         0 |    0.000 |       83672 |             0 | 653925349 |
| 453232 | dbuser | server2:33126 | DB1  | Sleep   |    2 |       | NULL |   2812.222 |     0 |         0 |    0.000 |      100560 |             0 | 653924906 |
| 453231 | dbuser | server2:33124 | DB1  | Sleep   |    1 |       | NULL |   1487.906 |     0 |         0 |    0.000 |       83672 |             0 | 653925637 |
| 453230 | dbuser | server2:33120 | DB1  | Sleep   |    0 |       | NULL |    287.197 |     0 |         0 |    0.000 |       83672 |             0 | 653926457 |
| 453229 | dbuser | server2:33118 | DB1  | Sleep   |    0 |       | NULL |     84.411 |     0 |         0 |    0.000 |       83672 |             0 | 653926656 |
| 453226 | dbuser | server2:33114 | DB1  | Sleep   |    0 |       | NULL |    121.208 |     0 |         0 |    0.000 |      100544 |             0 | 653926612 |
| 453225 | dbuser | server2:33112 | DB1  | Sleep   |    0 |       | NULL |    509.967 |     0 |         0 |    0.000 |       83672 |             0 | 653926103 |
| 453222 | dbuser | server2:33106 | DB1  | Sleep   |    2 |       | NULL |   2904.463 |     0 |         0 |    0.000 |       83672 |             0 | 653924840 |
| 453221 | dbuser | server2:33108 | DB1  | Sleep   |    0 |       | NULL |    363.417 |     0 |         0 |    0.000 |       83688 |             0 | 653926217 |
| 436446 | dbuser | server2:45546 | DB2 | Sleep   |  175 |       | NULL | 175585.732 |     0 |         0 |    0.000 |       83680 |             0 | 653799233 |
| 436445 | dbuser | server2:45544 | DB2 | Sleep   |   55 |       | NULL |  55673.248 |     0 |         0 |    0.000 |       83680 |             0 | 653885968 |
| 436443 | dbuser | server2:45534 | DB2 | Sleep   |  115 |       | NULL | 115555.698 |     0 |         0 |    0.000 |       83680 |             0 | 653840992 |
| 436442 | dbuser | server2:45532 | DB2 | Sleep   |  235 |       | NULL | 235540.642 |     0 |         0 |    0.000 |       83680 |             0 | 653751459 |
| 436438 | dbuser | server2:45372 | DB1  | Sleep   |    0 |       | NULL |      7.290 |     0 |         0 |    0.000 |      124632 |             0 | 653926744 |
| 436437 | dbuser | server2:45370 | DB1  | Sleep   |    0 |       | NULL |    314.409 |     0 |         0 |    0.000 |       83672 |             0 | 653926392 |
| 436436 | dbuser | server2:45344 | DB1  | Sleep   |    1 |       | NULL |   1791.661 |     0 |         0 |    0.000 |       83680 |             0 | 653925459 |
| 436435 | dbuser | server2:45342 | DB1  | Sleep   |    2 |       | NULL |   2208.515 |     0 |         0 |    0.000 |      116928 |             0 | 653925261 |
| 436434 | dbuser | server2:45340 | DB1  | Sleep   |    1 |       | NULL |   1391.047 |     0 |         0 |    0.000 |      100056 |             0 | 653925725 |
| 436433 | dbuser | server2:45338 | DB1  | Sleep   |    2 |       | NULL |   2441.613 |     0 |         0 |    0.000 |      100544 |             0 | 653925062 |
| 436432 | dbuser | server2:45336 | DB1  | Sleep   |    1 |       | NULL |   1806.901 |     0 |         0 |    0.000 |       83672 |             0 | 653925436 |
| 436431 | dbuser | server2:45334 | DB1  | Sleep   |    0 |       | NULL |    567.622 |     0 |         0 |    0.000 |       83672 |             0 | 653926059 |
| 436430 | dbuser | server2:45332 | DB1  | Sleep   |    0 |       | NULL |    840.094 |     0 |         0 |    0.000 |      100056 |             0 | 653925948 |
| 436429 | dbuser | server2:45330 | DB1  | Sleep   |    1 |       | NULL |   1152.405 |     0 |         0 |    0.000 |       83672 |             0 | 653925793 |
| 436428 | dbuser | server2:45324 | DB1  | Sleep   |    2 |       | NULL |   2424.172 |     0 |         0 |    0.000 |       83672 |             0 | 653925084 |
| 436427 | dbuser | server2:45322 | DB1  | Sleep   |    0 |       | NULL |    402.280 |     0 |         0 |    0.000 |       83672 |             0 | 653926193 |
+--------+------+---------------------+--------+---------+------+-------+------+------------+-------+-----------+----------+-------------+---------------+-----------+
```

The point why I've been paying attention to this is that all of my connections from server1 got stale after about 38 hours of running. The Connections were not interrupted (all 50 connections were stale) and new connections (i've started another instance of the same application) were able to create new connections to the database server.
Maybe you have an idea how to debug such a situation...

### Example code
all of the databases requests look like this, while the initial connection is only initiated once and then the pool is used.

```go
////////////////////// DB Connection
// establish database connection
var dsn = appConfiguration.dbuser + ":" + appConfiguration.dbpass + "@tcp(" + appConfiguration.dbhostname + ":" + appConfiguration.dbport + ")/" + appConfiguration.dbNamename
dbName, err := sql.Open("mysql", dsn)
dbName.SetConnMaxLifetime(0)
dbName.SetMaxIdleConns(50)
dbName.SetMaxOpenConns(50)

// if there is an error opening the connection, handle it
if err != nil {
	panic(err.Error())
}

ctxVCspstoredprocedure := context.Background()

rowsResultsVCspstoredprocedure, err := dbName.QueryContext(ctxVCspstoredprocedure, "CALL storedprocedure((?),(?),(?),(?),(?),(?),(?),(?),(?));", "version", "xxx", "xxx", "p", "1", sql.NullString{}, sql.NullString{}, appConfiguration.identifier, 1)
if err != nil {
	log.Fatal(err)
}
defer rowsResultsVCspstoredprocedure.Close()

for rowsResultsVCspstoredprocedure.Next() {
	var spstoredprocedureVersion int
	var spstoredprocedureVar1 int
	var spstoredprocedureVar2 int
	if err := rowsResultsVCspstoredprocedure.Scan(&spstoredprocedureVar1, &spstoredprocedureVar2, &spstoredprocedureVersion); err != nil {
		log.Fatal(err)
	}
	if spstoredprocedureVersion != SPstoredprocedureVERSIONREQUIREMENT {
		println(time.Now().Format(time.RFC3339) + " " + " - START - SPstoredprocedure VERSION check - ERROR: Version does not meet requirements by this version. Application requires: " + strconv.Itoa(SPstoredprocedureVERSIONREQUIREMENT) + " but DB seems to be: " + strconv.Itoa(spstoredprocedureVersion))
		os.Exit(3)
	} else {
		println(time.Now().Format(time.RFC3339) + "  - START - SPstoredprocedure VERSION check - PASSED")
	}
}
if err := rowsResultsVCspstoredprocedure.Err(); err != nil {
	// print error when something went wrong
	println(time.Now().Format(time.RFC3339)+"  - START - SPstoredprocedure VERSION check - GENERAL DB RESULTS ERROR:", err.Error())
	println(time.Now().Format(time.RFC3339) + "  - START - SPstoredprocedure VERSION check - Stored Predure and/or Table Structure missing - EXIT")
	os.Exit(3)
}
```

### Configuration
*Server version:* Maria.DB 10.0.38
*Server OS:* Debian 10 (buster) - latest updates applied, Go Applications running in Docker Container
### Issue description
It is possible to execute statements in a transaction which has been aborted via cancelled context, and have those statements commit.

Basically, in response to context cancellation, the library calls
Tx.Rollback
Stmt.ExecContext
Conn.Close

It should not be possible to execute a statement after the transaction has been rolled back, and in fact because of mysql's autocommit default, the statement will surprisingly commit.

See https://github.com/golang/go/issues/34775.

While it looks like a database/sql bug, I wonder if there's something that can be done to mitigate on the driver side.

### Example code
https://gist.github.com/dadkins-at-dropbox/5b051b9ccb30f115c332c6037d03d63d
```go
package main

import (
	"context"
	"database/sql"
	"fmt"
	"log"
	"os"
	"time"

	_ "github.com/go-sql-driver/mysql"
)

func main() {
	if len(os.Args) != 2 {
		log.Fatalf("usage: %s <dbname>", os.Args[0])
	}
	dbName := os.Args[1]
	db, err := sql.Open("mysql", "root@/"+dbName)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()

	db.SetMaxOpenConns(100)
	db.SetMaxIdleConns(100)

	if _, err := db.Exec("drop table if exists t"); err != nil {
		log.Fatal(err)
	}
	if _, err := db.Exec("create table t (id int not null auto_increment primary key)"); err != nil {
		log.Fatal(err)
	}

	ins, err := db.Prepare("insert into t (id) values (null)")
	if err != nil {
		log.Fatal(err)
	}

	sel, err := db.Prepare("select count(*) from t")
	if err != nil {
		log.Fatal(err)
	}

	for i := 0; i < 10; i++ {
		go func() {
			for i := 0; ; i++ {
				runTx(db, ins)
			}
		}()
	}
	for range time.Tick(time.Second) {
		var n int
		r := sel.QueryRow()
		if err := r.Scan(&n); err != nil {
			fmt.Println("select", err)
			continue
		}
		fmt.Printf("%d rows (should be 0)\n", n)
	}
}

func runTx(db *sql.DB, stmt *sql.Stmt) error {
	ctx, cancel := context.WithCancel(context.Background())
	quit := make(chan struct{})
	done := make(chan struct{})
	tx, err := db.BeginTx(ctx, nil)
	if err != nil {
		fmt.Println("begin", err)
		return err
	}
	defer tx.Rollback()

	stmt = tx.Stmt(stmt)

	go func() {
		timer := time.NewTimer(time.Microsecond)
		defer timer.Stop()
		select {
		case <-quit:
		case <-timer.C:
		}
		cancel()
		close(done)
	}()
	defer func() {
		close(quit)
		<-done
	}()

	for i := 0; i < 10; i++ {
		if _, err := stmt.Exec(); err != nil {
			return err
		}
	}
	_ = tx.Rollback()
	return nil
}
```

### Error log
```
1 rows (should be 0)
3 rows (should be 0)
4 rows (should be 0)
5 rows (should be 0)
```

### Configuration
*Driver version (or git SHA):*
14bb9c0fc20fc57f6c3339adeac7f469768d9524

*Go version:* run `go version` in your console
go version go1.13.1 darwin/amd64

*Server version:* E.g. MySQL 5.6, MariaDB 10.0.20
Server version: 8.0.17 Homebrew

*Server OS:* E.g. Debian 8.1 (Jessie), Windows 10
```
$ uname -a
Darwin dadkins-mbp.corp.dropbox.com 18.7.0 Darwin Kernel Version 18.7.0: Tue Aug 20 16:57:14 PDT 2019; root:xnu-4903.271.2~2/RELEASE_X86_64 x86_64
```
(I also see the problem on Linux against mysql 5.7)

### Description

Added a `ConfigFlag()` func. It integrates with the standard `flag` package and reports an invalid DSN as an invalid flag value.

It can be used as follows:
```go
mysql.ConfigFlag("mysql_dsn", mysql.Config{DBName: "test", User: "test"}, "Data source name")
```

### Checklist
- [x] Code compiles correctly
- [x] Created tests which fail without the change (if possible)
- [x] All tests passing
- [ ] Extended the README / documentation, if necessary
- [ ] Added myself / the copyright holder to the AUTHORS file
