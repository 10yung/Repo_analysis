Issue: https://issues.apache.org/jira/browse/SHIRO-736

`AES/GCM/PKCS5Padding` is an alias for `AES/GCM/NoPadding` on most JVMs. Some JVMs do not have this alias defined, which results in an Exception with the default configuration.

```
org.apache.shiro.crypto.CryptoException: Unable to acquire a Java JCA Cipher instance using javax.crypto.Cipher.getInstance( "AES/GCM/PKCS5Padding" ). AES under this configuration is required for the org.apache.shiro.crypto.AesCipherService instance to function.
Caused by: java.security.NoSuchAlgorithmException: Cannot find any provider supporting AES/GCM/PKCS5Padding
  at javax.crypto.Cipher.getInstance(Unknown Source)
  at org.apache.shiro.crypto.JcaCipherService.newCipherInstance(JcaCipherService.java:408)

```
Closes [SHIRO-627](https://issues.apache.org/jira/browse/SHIRO-627)
Fixes: SHIRO-671

NOTE: this is the first pass, and uncovered a few issues with the differences between the JSR-250 and Shiro Annotations.

- `RolesAllowed` only supports a logical OR, `RequiresRoles` defaults to a logical AND
- `PermitAll` allows any subject (guest or not)
- Per spec there is interaction between the JSR-250 annotations that the Shiro Annotations do NOT have.
  - Each Shiro annotation is processed without knowledge of other annotations, the JSR-250 versions are processed together, for example

```java
    @PermitAll
    class ExamplePermitAtClass {

        @DenyAll
        void expectDenied() {}

        void expectAllowed() {}

        @RolesAllowed({"blah2", "foo"})
        void withRoles() {}
    }
```

To implement this I needed to search out the annotations in `Jsr250MethodInterceptor` without the use of the `AnnotationResolver` component, the issue here is we have a separate implementation for Spring.

We could extend the `AnnotationResolver` interface and add methods that return annotations for a Class, or a method. (the current method does both).

TODO:

- [ ] Make sure Javadoc has been added
- [ ] Add JAX-RS support
- [ ] Add Spring Support
- [ ] Add Guice support 

SimpleCookie get cookie failed,when I set cookie to root,but in sub path exists the sample cookieId,
shiro get invaid cookie。eg:
www.domain.com/    cookie one
www.domain.com/abc    cookie two
-----------------------------------------

private static javax.servlet.http.Cookie getCookie(HttpServletRequest request, String cookieName) {
        javax.servlet.http.Cookie cookies[] = request.getCookies();
      javax.servlet.http.Cookie cookie = null;
        if (cookies != null) {
            for (javax.servlet.http.Cookie cookie : cookies) {
                if (cookie.getName().equals(cookieName)) {
                    cookie = cookie;
                }
            }
        }
        return cookie;
    }












…d a suffix to the username at all. So where authentication is handled with the userPrincipalName, but where the userDN is required for authorization. I haven't found a REALM implementation that resolves this issue.

The setup I'm handling is a AD one.
For making this more concrete:
The userPrincipalName format is johnthegreat@whatever.whatever.com
while the distinguishedName format is CN=John The Great,CN=Users,DC=whatever,DC=whatever,DC=com
The username is seen as {firstName}{lastName} (without the spaces), while the group membership (used for authorization) is handled with the userDN.

Currently I created a custom implementation for supporting this LDAP; but I was wondering whether I am the only one facing this problem. Instead of working with an userDnTemplate, I worked with an authenticationTemplate and a user search base. Using those, I was able to retrieve the userDN.
This approach still supports providing the userDN template as authenticationTemplate (I supposed this to be the case when the userSearchBase is not provided).

This is the config file I'm currently using:
ldapRealm = com.company.ldap.realm.CustomLdapRealm
ldapRealm.authenticationTemplate = {0}@whatever.whatever.com
ldapRealm.userSearchBase = CN=Users,DC=whatever,DC=whatever,DC=com
ldapRealm.userSearchFilter = (sAMAccountName={0})
ldapRealm.groupSearchBase = OU=Groups,DC=whatever,DC=whatever,DC=com
ldapRealm.groupSearchFilter = (member={0})
ldapRealm.groupSearchFilterAttribute = distinguishedName
ldapRealm.groupRoleAttribute = cn
ldapRealm.contextFactory.url = ldap://whatever.whatever.com:389
ldapRealm.contextFactory.systemUsername = system-user
ldapRealm.contextFactory.systemPassword = system-password

I have a local branch where I've implemented the changes in case you're willing to check them out.

Please be critic to what I've done, Your experience in this area might result in a better approach for handling this.
Add Enforcer rule to detect duplicate classes

Fixes: SHIRO-632
when our application was runing behind a nginx proxy. The request context was different with tomcat's context, for example my nginx proxy configuare is something like: 
 location ^~ /
        {
            proxy_pass http://MyTomcatServer/tomcatContext/;
        }
the session will lost because of cookie path change. though I know I can use proxy_cookie_path to change the cookie' path, I found it's still very useful when my class extend the FormAuthenticationFilter class. so I 
think it's betther to  provide two functions that are  very useful when your application running behind a proxy server which has  different context,  also very useful for subclasses pass parameters to the login page. 
How do you think?
Because of  Stormpath Joins Forces With Okta. New user of Shiro cannot create new Stormpath  account that they cannot follow up the web demo. So the step-by-step demo using Stormpath account should switch to another platform. Pls kindly modify the Tutorial that we could catch up with this demo. Really thanks!
Please consider the pull request, as documented in https://issues.apache.org/jira/browse/SHIRO-617

The Reverted patch was wrongly made against a 1.3.2. The relevant patch is dc3da92