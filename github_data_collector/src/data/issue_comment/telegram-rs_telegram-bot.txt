Summary:
1. Add ChosenInlineResult variant to UpdateKind and stubs for the rest so deserialization doesn't fail.
2. Add missing InlineKeyboardButton variants (SwitchInlineQuery, SwitchInlineQueryCurrentChat)
3. Add missing fields to AnswerInlineQuery
4. **BREAKING** Fix foursquare_id typo (related: #181)
5. **BREAKING** Replace ReplyMarkup to InlineKeyboardMarkup in InlineQueryResult* structs (resolves #180)

Personally using these features, so they should all be working.
This very simple piece of code fails to compile with a very scary error:
```rust
fn test_bot() {
    tokio::task::spawn(async {
        let api: Api = todo!();
        let updates = api.stream().fuse();
        loop {
            select! {
                upd = updates.select_next_some() => println!("{:?}", upd),
            }
        }
    });
}
```
```
error[E0277]: `(dyn core::future::future::Future<Output = std::result::Result<std::option::Option<std::vec::Vec<telegram_bot_raw::types::update::Update>>, telegram_bot::errors::Error>> + 'static)` cannot be sent between threads safely
   --> src/server/bot.rs:56:5
    |
56  |     tokio::task::spawn(async {
    |     ^^^^^^^^^^^^^^^^^^ `(dyn core::future::future::Future<Output = std::result::Result<std::option::Option<std::vec::Vec<telegram_bot_raw::types::update::Update>>, telegram_bot::errors::Error>> + 'static)` cannot be sent between threads safely
    | 
   ::: /home/netvl/.cargo/registry/src/github.com-1ecc6299db9ec823/tokio-0.2.6/src/task/spawn.rs:123:21
    |
123 |         T: Future + Send + 'static,
    |                     ---- required by this bound in `tokio::task::spawn::spawn`
    |
...
```

This error points out the fact that the [`current_request` field](https://github.com/telegram-rs/telegram-bot/blob/16147f62247497457e1af824e4bf732b67b61f1c/lib/src/stream.rs#L27) is not `Send`, because the nested trait object is not `Box<... + Send>`.

This seems to make it impossible to run any kind of update handling procedure in sub-tasks (created by various `spawn` methods), but only in the "main" task (created by the `block_on` kind of methods). This is unfortunately a hard restriction for many complex projects.
I am new to Rust and I would like to help to contribute to this project. I recently tried to use this library but the examples don't seem to work. Where do I get the necessary up to date infos to create some new examples?
We have both public fields for all structs and a builder for `InlineQueryResultArticle` right now. I think it be much better to use only builder because telegram can add new fields to types and it would break user code eventually.

* Maybe InlineQueryResult* builders should take self by value, like `InlineKeyboardButton`, I'm not sure.
* Maybe we should change `CanAnswerInlineQuery` and `AnswerInlineQuery` API, something like this:

```rust
query.answer_inline()
    .add(InlineQueryResultMpeg4Gif::new("unique-id1", "http://example.com/mpeg.mp4"))
    .add(InlineQueryResultMpeg4Gif::new("unique-id2", "http://example.com/mpeg2.mp4"))
```
I've seen `foursqure_id` field, but we need to test all of them

Based on #96 

Related with #169 


- [ ] Add Poll struct
- [ ] Add sendPoll request
- [ ] Add stopPoll request
- [ ] Add MessageKind::Poll variant
- [ ] Add Update::Poll variant