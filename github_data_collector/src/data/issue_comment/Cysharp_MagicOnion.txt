
I saw in the description that this library is suitable as a transport protocol for Orleans (as I understand it). How exactly to launch silo to be able to use MS Orleans with this library under Unity (mobile platforms)? Could there be a Unity templates for both the server and the client in Unity? Is it possible atleast?
It seems that the unitypackage of MagicOnion 3.0.x has no `UnsafeDirectBlitResolver ` class so it causes compile error when the project using that class to resolve types.
### Is there a way for a client to send a message to the server, or another client?

The sample code provides only one-way communication with no message streaming. How to write a code for server and client that supports bidirectional message streaming with .NET Core 3.0 using gRPC.

I want to verify Telemetry in my environment.
I'm currently testing with CentOS 7.7, not docker.

The readme example code did not work.
Is there any sample code that works?
I would be very happy if I could see how it works with samples/ChatApp.

I think MagicOnion is a great framework!
Thank you.
add interceptor  in IService, but not work



--------------------------------------------------

public class TestService : ServiceBase<ITestService>, ITestService
    {
        [Webhook]
        public async UnaryResult<string> Hello()
        {
            return "hellworld";
        }
    }



------------------------------------------
public class WebhookInterceptor : IInterceptor
    {
        public void Intercept(IInvocation invocation)
        {
            var webhookAttribute = invocation
                                  .MethodInvocationTarget
                                  .GetCustomAttributes(typeof(WebhookAttribute), false)
                                  .Cast<WebhookAttribute>()
                                  .FirstOrDefault();

            invocation.Proceed();
            if (webhookAttribute != null)
            {
                var result = invocation.ReturnValue;
            }
        }
 }
-----------------------------------------------

I implemented a custom client filter:

```
	public class AppendIdentifierFilter: IClientFilter
	{
		public async ValueTask<ResponseContext> SendAsync(RequestContext context, Func<RequestContext, ValueTask<ResponseContext>> next)
		{
			context.Items.Add("test", "foo);
			return await next(context);
		}
	}
```

and tried to access it in my service on the server-side:

```
public async UnaryResult<Nil> Test()
		{
			Logger.Info($"we have the items {string.Join(", ", Context.Items.Keys)}");
....
```

But the items dictionary appears to be empty.

To initialize the service I used the following way:

```
MagicOnionClient.Create<ITestService>(_channel, new IClientFilter[]
				{
					new AppendIdentifierFilter(_identifier), 
				});
```

From the documentation, I could not figure out what part was still missing.

Thank you for any help
Hello,
I keep getting this, when trying to connect to a StreamingHubClient. 
```
Cannot access a disposed object.
Object name: 'StreamingHubClient'.

   at MagicOnion.Client.StreamingHubClientBase`2.ThrowIfDisposed()
   at MagicOnion.Client.StreamingHubClientBase`2.WriteMessageWithResponseAsync[TRequest,TResponse](Int32 metthodId, TRequest message)
   at MatchmakingServer.Tests.ClientTest.Initialize()
```

my client connection code:
```cs
public async void Initialize()
        {
            Channel channel = new Channel("0.0.0.0", 7081, ChannelCredentials.Insecure);
            try {
                IMatchmaker client = StreamingHubClient.Connect<IMatchmaker, IMatchmakerReceiver>(channel, this);
                await client.RegisterTicket();

            }
            catch (Exception e) {
                Console.WriteLine($"{e.Message}\n\n{e.StackTrace}");
            }
            
        }
```
my server-side code: 
```cs
// setup MagicOnion and option.
            ServerPort port = new ServerPort("0.0.0.0", 7081, ServerCredentials.Insecure);
            var service = MagicOnionEngine.BuildServerServiceDefinition(isReturnExceptionStackTraceInErrorDetail: true);

            var server = new global::Grpc.Core.Server
            {
                Services = { service },
                Ports = { port }
            };

            try
            {
                // launch gRPC Server.
                server.Start();

            }
            catch (Exception e) {
                Console.WriteLine($"{e.Source}\n{e.Message}\n\n{e.StackTrace}");
            }
```
**MagicOnionEngine.cs**

//var interfaceMap = classType.GetInterfaceMap(inheritInterface);

                    var interfaceMaps = GetAllInterfaceMaps(classType).Where(x=>x.TargetMethods.Length>0);
                    foreach (var interfaceMap in interfaceMaps) {
                        for (int i = 0; i < interfaceMap.TargetMethods.Length; ++i)
 

static IEnumerable<InterfaceMapping> GetAllInterfaceMaps(this Type type) =>
    type.GetTypeInfo()
         .ImplementedInterfaces
         .Select(i => type.GetInterfaceMap(i));