I noticed that the models in `Order.swift` explicitly implement the `==` function to conform to `Equatable`. This means that each time a model is updated, this method must be updated too, which makes it easy to make a mistake by forgetting to do so. This could be avoided by making all properties inside the models conform to `Equatable` too.
Also, `lhs.date.timeIntervalSince(rhs.date) < 1.0` comparison wasn't working correctly because for each case when `rhs` is later than `lhs` it would always return true.
This also revealed an error in the Unit Tests when `OrdersWorker.updateOrder` method wasn't returning the correct order with the updated date in it.
Therefore I have:
- Removed all instances of explicitly implemented `==` method
- Declared necessary Model structs as conforming to `Equatable`
- Made `updateOrder` method inside `OrdersWorkerTests` test suite return the `Order` object passed to it inside the `completionHandler` instead of the static mock object from `OrdersWorkerTests.testOrders`
I would like to ask what's the best practise (if any) in case we have a scene that's fetching something from the network and after that, we want to store these data locally (core data). In addition, if multiple scenes required to have the same (network->core data) can we have a universal (re-usable) worker(s)?
I read about multiple stores in the TDD approach https://clean-swift.com/clean-swift-tdd-part-3-worker/ as well as multiple workers under the same interacor, https://clean-swift.com/role-of-the-interactor-and-its-workers/ but I am a bit confused regarding what approach should follow here
CI is reporting the master branch code is failing. 
It would be great to have this in a code only version, without story boards.
Why is Configurator disappeared, and wrapped in a setup() instead?
And output in Interactor became presenter?

It's very confusing now, what happened?
Each scenes has respective storyboard. New `RouterLogic` natively routes one storyboard to another using `storyboard.instantiateInitialViewController`.

<img width="951" alt="capturfiles_16" src="https://user-images.githubusercontent.com/892152/31572316-77f88d06-b071-11e7-9df2-5fa72057d5da.png">

More details of routing implementation found here: http://basememara.com/protocol-oriented-router-in-swift/
In an effort to make view models almost as dumb as enums, how about using tuples over structs?

Benefits I see:
1. Disallow `func`, `init`, and other logic
2. Get equatable for free (https://github.com/apple/swift-evolution/blob/master/proposals/0015-tuple-comparison-operators.md)
3. Access members by index?

Can you think of any issues or implications of this (performance, memory, etc)?

Further discussions: https://stackoverflow.com/questions/27384151/swift-tuples-different-from-struct-and-from-each-other
For the shipment method picker in create order scene, the view controller currently requests and receives from the interactor. However, this violates the uni-directional flow, am I understanding this correctly that it should be this?:

1. View controller send the request to the interactor
2. Interactor requests shipment methods from worker / storage
3. Worker sends it back to the interactor
4. Interactor sends it back to the presenter
5. Presenter formats, localizes, etc then sends it back to view controller
A lot of this architecture seems very unswifty and seems designed for older languages. For example no good swift developer would use the clunky Router class instead of a simple extension of the view controller. 
hey..plz this code give me in objective c