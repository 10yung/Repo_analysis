For #483 and #484, CI tests for PRs on CircleCI does not work at all. Before #483, it worked well for #482 and earlier.

See https://circleci.com/gh/gliderlabs/herokuish

same file
This is discussed in https://github.com/gliderlabs/herokuish/issues/188 but now it is also causing issues with Lumen/Laravel.

If you have a .env file in your Lumen/Laravel app it is read in via Herokuish. The DotEnv PHP package that Lumen/Laravel uses will not override existing ENV values so this causes nested values to fail.

Nested values are formatted like...

MY_VALUE=1234
MY_NESTED_VALUE=${MY_VALUE}

Outside of Herokuish MY_NESTED_VALUE is set to 1234 correctly but inside the Herokuish environment is it left empty.

A solution would be to allow the .env filename to be customised but ultimately this conflict would still exist.
This PR fixes #402 (slug generate gzips from /tmp/app, when it should gzip from /app) and #321 (Cannot execute any Procfile commands) and fixed the issue mentioned in the blog post ["Running Herokuish apps in Docker"](https://knazarov.com/posts/herokuish_apps_in_docker/).

Currently every time herokuish is run the app import path (e.g. /tmp/app) is copied over to the app path (e.g. /app) if the import path exists and has files in it.

This PR changes this so that the copy from the import path to the app path is only done on running `herokuish buildpack build` or `herokuish buildpack test` [as suggested by @matthewmueller in #402](https://github.com/gliderlabs/herokuish/issues/402#issuecomment-449701095).

This means that you can now run `buildpack build` immediately followed by `procfile start` within the same container and things will work.

I can see at least two different ways that people were working around this issue before:
1. Mount the application volume in the app directory (/app) rather than the import app directory (/tmp/app) [as seen in Dokku](https://github.com/gliderlabs/herokuish/issues/321#issuecomment-379480575). This has the disadvantage that build artifacts get written into the same directory as the source code (of course you might want this, you might not).
2. By [using the recommended flow as outlined by @michaelshobbs](https://github.com/gliderlabs/herokuish/issues/321#issuecomment-379899875), you create a docker image from the result of running `buildpack build` and then running a container from that image which doesn't have a volume mounted at /tmp/app and so the contents of /app is not overwritten.

This PR should not break those workarounds.
My gemfile specifies using ruby 2.6.3 and my Gemfile.lock specifies that it's bundled with version 2.0.2. Bundler version 2.0.1 is the one that comes with ruby 2.6.3.

Unfortuationely `buildpack test` will fail because of this, with the following error message:


```bash
-----> Installing node-v10.14.1-linux-x64
-----> Installing yarn-v1.12.3
-----> Detecting rake tasks

       !
       !     Could not detect rake tasks
       !     ensure you can run `$ bundle exec rake -P` against your app
       !     and using the production group of your Gemfile.
       !     Activating bundler (2.0.2) failed:
       !     Could not find 'bundler' (2.0.2) required by your /tmp/build/Gemfile.lock.
       !     To update to the latest version installed on your system, run `bundle update --bundler`.
       !     To install the missing version, run `gem install bundler:2.0.2`
       !     Checked in 'GEM_PATH=/tmp/build/vendor/bundle/ruby/2.6.0', execute `gem env` for more information
       !
       !     To install the version of bundler this project requires, run `gem install bundler -v '2.0.2'`
       !
/tmp/buildpacks/01_buildpack-ruby/lib/language_pack/helpers/rake_runner.rb:106:in `load_rake_tasks!': Could not detect rake tasks (LanguagePack::Helpers::RakeRunner::CannotLoadRakefileError)
ensure you can run `$ bundle exec rake -P` against your app
and using the production group of your Gemfile.
Activating bundler (2.0.2) failed:
Could not find 'bundler' (2.0.2) required by your /tmp/build/Gemfile.lock.
To update to the latest version installed on your system, run `bundle update --bundler`.
To install the missing version, run `gem install bundler:2.0.2`
Checked in 'GEM_PATH=/tmp/build/vendor/bundle/ruby/2.6.0', execute `gem env` for more information

To install the version of bundler this project requires, run `gem install bundler -v '2.0.2'`
```
i've go this issue when i installing - http://dokku.viewdocs.io/dokku/getting-started/advanced-installation/#custom-herokuish-build
```
go: downloading github.com/jteeuwen/go-bindata v3.0.7+incompatible
go: extracting github.com/jteeuwen/go-bindata v3.0.7+incompatible
go get github.com/jteeuwen/go-bindata/...: no matching versions for query "latest"
Makefile:52: recipe for target 'deps' failed
make: *** [deps] Error 1
Makefile:38: recipe for target 'build-in-docker' failed
make[2]: *** [build-in-docker] Error 2
make[2]: Leaving directory '/tmp/herokuish'
Makefile:166: recipe for target 'stack' failed
make[1]: *** [stack] Error 2
make[1]: Leaving directory '/root/dokku'
Makefile:123: recipe for target 'dependencies' failed
make: *** [dependencies] Error 2
```
all console log:
https://pastebin.com/JC8jXLPh
According to https://devcenter.heroku.com/articles/heroku-ci-browser-and-user-acceptance-testing-uat, the proper way for browser testing is to set `app.json` to the following:
```
{
  "environments": {
    "test": {
      "buildpacks": [
        { "url": "heroku/nodejs" },
        { "url": "https://github.com/heroku/heroku-buildpack-google-chrome" }
      ]
    }
  }
}
```
However, herokuish does not support app.json. It does, however, support .buildpacks.

When I add the NodeJS and Google Chrome buildpacks, herokuish uses the multi buildpack and fails to test because it is not using the Node.js buildpack.
Steps to reproduce:

### 1. Use a simple node app, I found this one from the examples or maybe the tests

**server.js**

```js
var express = require('express');
var app = express();

app.get('/', function(req, res){
  res.send("nodejs-express\n");
});

/* Use PORT environment variable if it exists */
var port = process.env.PORT || 5000;
server = app.listen(port);

process.on( "SIGINT", function() {
  console.log('CLOSING [SIGINT]');
  process.exit();
} );

process.on( "SIGTERM", function() {
  console.log('CLOSING [SIGTERM]');
  process.exit();
} );

console.log('Server listening on port %d in %s mode', server.address().port, app.settings.env);
```

**package.json**

```json
{
  "name": "example-nodejs-express",
  "version": "0.0.1",
  "scripts": {
    "start": "node server.js",
    "test": "mocha"
  },
  "engines": {
    "node": "8.14.1",
    "yarn": "1.13.0"
  },
  "dependencies": {
    "express": "3.1.x"
  },
  "devDependencies": {
    "mocha": "*"
  }
}
```

### 2. Now you can run:

```
docker run -ti -e NODE_ENV=production --rm \
  -v ${PWD}:/tmp/app:ro \
  -v ${PWD}/release:/tmp/release \
  -v ${PWD}/cache:/tmp/cache \
  gliderlabs/herokuish:latest bash -c '/bin/herokuish buildpack test && \
  /bin/herokuish slug generate && \
  /bin/herokuish slug export > releases/release.tar.gz'
```

This will build and test the app, then generate the slug, then export it to the release volume. If you open that releases volume, you'll notice that it's just using your pre-built app, the one at `/tmp/app` and not the built app at `/app`.
Currently after coping application to ```/app``` during building in herokuish, original file modification time are all lost and time for coping will be used.

This may cause issue when running some commands in custom buildpack. Such as in default python buildpack, ```collectstatic``` command will be run and this command should collect static files which modificaiton time are older than existed ones.

But since original file modification time are lost, this command will collect all static files no matter they have been collected before or not.

Can we keep original file modification time during buidling, such as using ```cp -p```?
Seems from #288 there is no app.json support which means buildpacks like php and python don't even work completely. There's no test provided by the buildpack and you're expected to use app.json and without support it doesn't work.

This is a blocker for these languages using systems like gitlab autodev which us herokuish for zeroconf testing.