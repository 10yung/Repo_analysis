看了一下Message当中的Decode方法，按长度去读取能解决粘包问题，但是数据拆分到达时不就会报错了吗？
* Redues compress performence up to 30% by using pool
* Make client.Go call real async by queue. This also reduse memory usage due to lazy call of  protocol.Message.Encode.

Current Message.Encode always copy header and payload into a new slice of byte, it is unecessary. Reusing existed byte slices can adoid new byte allocating.

![image](https://user-images.githubusercontent.com/865763/70602638-d02ef380-1c2f-11ea-8417-77e96b0bfc57.png)

Users can customize processing the call of clients, for example, if clients fail to call a service, users can mark the node as temporary offline. Clients won't select this node in ashort time.

It looks like circuit breaker but clients can invoke the broken nodes in circuit breaker, just only return errors immediately. But this plugin marks the node offline and the node won't be selected.

support to write rpcx services and clients in rust： https://github.com/smallnest/rpcx-rs


Advice to add k8s deployment yaml
Add log handle in PluginContainer interface