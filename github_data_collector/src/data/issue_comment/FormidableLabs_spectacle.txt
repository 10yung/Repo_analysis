Add all the composable styled system props and what tags use them
Hello, 
Is there a way to store my spectacle presentation as a json or html?
This PR will introduce our overhauled docs, broken out into the following subset categories:

  - [ ] Basic Concepts
  - [ ] Advanced Concepts
  - [ ] API Reference
  - [ ] FAQ
We should gut all aesthetics-related lint rules and let `prettier` do the work for us. Something closer to what [we have in `spectacle-cli`](https://github.com/FormidableLabs/spectacle-cli/blob/master/.eslintrc), for example.

_[Originally posted by @ryan-roemer](https://github.com/FormidableLabs/spectacle/pull/786#discussion_r364358963)_
After https://github.com/FormidableLabs/spectacle/pull/786 lands.

- [ ] Update all JS + MDX examples to point to equivalent `spectacle-cli` instructions.
- [ ] Update Netlify config to point to `master` for target branch after we release.
- [ ] Update `.travis.yml` to remove `task/rewrite` from `branches` configuration
I just created my first presentation following the instructions using the classic boilerplate, and tried the export-and-print option. What I noticed is that the font changed from Montserrat to Open Sans Condensed compared to just the export option or using the normal presentation mode. It seems that the createTheme() function adjusts the screen CSS but not the print CSS. This could mess with the layout of slides, so in my opinion both fonts should be set to Montserrat.
We conceivably have these related packages that might be best served in a monorepo:

```
spectacle
spectacle-cli
spectacle-webpack-mdx-loader
spectacle-rollup-mdx-loader
```

- [ ] Consider if moving to monorepo makes sense
- [ ] If so, move to yarn workspaces (+ lerna)
- [ ] Deprecate `spectacle-cli` repo
- [ ] Release everything from monorepo.
### Question

Hello! From following your issues/PRs, I can tell you've got a major rewrite underway (task/rewrite). It's exciting Formidable/Spectacle is devoting the resources to do this. I would love to hear, for those in the audience:

1. What are your major goals for this rewrite?
2. What problems with the existing codebase do you aim to address?
3. Do you want help from the community? If so, how can the community best help?

### Background Info/Attempts

I'm a frequent spectacle user (THANK YOU SO MUCH!). So much so that I maintain a fork of spectacle-boilerplate with a ton of customizations... which has led me down a few rabbit holes in the code base to see why yall might undertake this endeavor. But I'm curious what you all are up to with this-- and I did try to do my due diligence in finding out what's up but don't see much information other than lots of pull requests.
<!--

Have you read Formidable's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/FormidableLabs/spectacle/blob/master/CONTRIBUTING.md#contributor-covenant-code-of-conduct

-->

### Question

How to implement a pre-existing react hash router with Deck

### Background Info/Attempts

I tried creating history as:
`
import { createHashHistory } from 'history'

export default createHashHistory({});
`
Later I set the history prop in Deck, but I am getting redirected to path '/#/1' from my original path '/#/slider'. Can I configure it to '/#/slider/:id'

> 
