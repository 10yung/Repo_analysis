## Feature description

If a theme enqueues a `navigation.js` that has jQuery as a dependency, currently this appears in the validated URL screen as “wp-includes” as the source. This is not very helpful. It would be helpful that if a theme or plugin enqueues a script or a style, that the original theme/plugin that enqueued it would be attributed as a source in some way. As an example, consider this [demo plugin](https://gist.github.com/westonruter/b8f559338bc9ecf1c9f9967c48676219).

All of the scripts here should get “Enqueue assets with core dependencies” as the source, at least indirectly:

![image](https://user-images.githubusercontent.com/134745/72672177-5565af00-3a0b-11ea-9923-a7948ef14025.png)

And for the stylesheets, the same goes for the circled stylesheets:

![image](https://user-images.githubusercontent.com/134745/72672198-8514b700-3a0b-11ea-94ae-7bb058954076.png)

I believe that [Origination](https://github.com/GoogleChromeLabs/wp-origination) already provides support here for this, so this should perhaps be deferred to the incorporation of that library.

Also: For each script/stylesheet, the list of dependencies should be listed.

Related: #4133

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Bug Description

Scripts and stylesheets enqueued at `init` do not get sourcing information. The same goes for assets registered at `wp_default_styles` and `wp_scripts`.

Additionally, inline styles added via `wp_add_inline_style()` do not get their source attributed.

See [demo plugin](https://gist.github.com/westonruter/7ce1e6270aa5b1bd9e66a3f0adf93b07) which demonstrates the issue.

The `wp-includes` source is erroneous for 2 scripts and 3 stylesheets shown on the page.

Related: #4134

## Expected Behaviour

The source column should indicate the theme/plugin that is actually responsible for the style or script being added to the page.

The case of the inline stylesheet is a tricky one, since it is one stylesheet with multiple sources. At the very least it should have the same source information as the stylesheet it is being added inline for. Best case is for it to include all themes/plugins that added inline styles to it.

## Steps to reproduce

0. Enable Standard or Transitional mode in the AMP plugin.
1. Activate the [above plugin](https://gist.github.com/westonruter/7ce1e6270aa5b1bd9e66a3f0adf93b07)
2. Validate a page.
3. Notice the `wp-includes` mentioned unexpectedly.

## Screenshots

When active (and #4026 checked out) the validated URL screen looks like the following, with the red entries erroneously saying they are from `wp-includes` when they should actually be from “Add Assets before wp_enqueue_scripts”.

![72671921-d66e7780-3a06-11ea-8135-d2f12e3dc6b5](https://user-images.githubusercontent.com/134745/72671995-09fdd180-3a08-11ea-8939-07eefbddf6c7.png)


## Additional context

<!-- Please complete the following information. -->
 - WordPress version:
 - Plugin version:
 - Gutenberg plugin version (if applicable):
 - AMP plugin template mode:
 - PHP version:
 - OS:
 - Browser: [e.g. chrome, safari]
 - Device: [e.g. iPhone6]

<!-- Please add any additional information about the bug. Ideal dumping your [Site Health](https://wordpress.org/support/wordpress-version/version-5-2/#site-health-check) information here as well. -->

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

* This may be resolved simply by adding the validation hooks earlier. Origination is also a solution, perhaps long-term.

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Feature description

When doing an analysis of WordPress themes, I got validation errors being reported for these attributes:

* `html@xml:lang`
* `html@xmlns`

These are included in many WordPress themes because WordPress to strive to be valid XHTML. WordPress has since moved to HTML5, and HTML5 [specifies](https://html.spec.whatwg.org/multipage/infrastructure.html#xml) that the `http://www.w3.org/1999/xhtml` namespace is implied.

Since the `Document` class normalizes HTML documents as HTML5 with the HTML5 doctype, I think it makes sense to also have `Document::loadHTML()` automatically normalize these attributes.

We should consider normalizing `xml:lang` to just `lang`, or removing `xml:lang` if the `lang` attribute is already there. The `xmlns` attribute here is redundant and unnecessary; it can simply be removed.

So given:

```html
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
```

Should be normalized to just:

```html
<html lang="en">
```

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Feature description

When doing an analysis of themes on WordPress, I got a `DISALLOWED_ATTR` validation error for the `profile` attribute on the `head` element, such as code in :

```html
<head profile="http://gmpg.org/xfn/11">
```

The `profile` attribute on the `head` element is part of HTML4 but not HTML5. 

The W3 validator provides this advice:

![image](https://user-images.githubusercontent.com/134745/72658213-a53c6b80-3962-11ea-8d33-d08c0dce799b.png)

According to [this SO answer](https://stackoverflow.com/a/14002644), the right way to represent this in HTML5 is:

```html
<head>
    <!-- … -->
    <link rel="profile" href="http://gmpg.org/xfn/11">
```

This should perhaps be done as part of the normalization done in the `Document` class (appending the `link` element to the end of the `head`). It could also be done in a separate sanitizer, though that may be overkill. Since the `Document` class is normalizing to HTML5, I think it makes sense to let the class handle the `profile` transformation.

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Bug Description

Adding a WordPress.tv video embed via Classic Editor block results in a validation error:

![image](https://user-images.githubusercontent.com/134745/72656675-d7919d00-3951-11ea-9d1d-98cfcc0f055d.png)

Post content is as follows:

```
Video:

https://wordpress.tv/2009/03/16/anatomy-of-a-wordpress-theme-exploring-the-files-behind-your-theme/

Was it good?
```

Interestingly, if the video is added an Embed block, then no validation error results.

This appears to be a bug with `AMP_WordPress_TV_Embed_Handler`. As opposed to using the `render_block` filter it should instead using the `embed_oembed_html` filter.

## Expected Behaviour

<!-- Please describe clearly and concisely what the expected behaviour should be. -->

## Steps to reproduce

<!-- Please provide detailed steps on how to reproduce the bug. Provide a URL where the issue can be seen on the frontend when possible, otherwise go to “View source” in the browser and copy all to paste in a [Gist](https://gist.github.com/) and share it. -->
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

## Screenshots

<!-- If applicable, please add screenshots to help explain your problem. Bonus points for videos! -->

## Additional context

<!-- Please complete the following information. -->
 - WordPress version:
 - Plugin version:
 - Gutenberg plugin version (if applicable):
 - AMP plugin template mode:
 - PHP version:
 - OS:
 - Browser: [e.g. chrome, safari]
 - Device: [e.g. iPhone6]

<!-- Please add any additional information about the bug. Ideal dumping your [Site Health](https://wordpress.org/support/wordpress-version/version-5-2/#site-health-check) information here as well. -->

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Summary

Supersedes #4110. This is a major redo of the workspace layering to support new "Anatomy of the workspace" in designs (/cc @samitron7). The current state is very preliminary to get the feedback ASAP. Many features are still broken.

The following layering has been implemented:
![WP Story editor](https://user-images.githubusercontent.com/726049/72654503-bfffe780-3944-11ea-912c-fc54d68b6100.png)

This might seem complicated, but this is the most straightforward way I see at this moment that supports the needed features, while being less fragile overall. Key notes here:

* Layers are layered on top of each other using `position:absolute; inset:0`.
* All layers use the same `grid-template` to ensure that the positions of the areas always match.
* Lasso layer is at the very bottom to allow lasso to start on the page's area and outside of it.
* Display area is right on top of lasso layer.
* Critically, the display area is now clipped to borders (`overflow:hidden`). And element overflowing off the side of the page is no longer displayed.
* Tools layer (`NavLayer` in code) overlays the headers, footers, menus on top of the display area. The event propagation is blocked to avoid lasso.
* Frames & selection are on top of both display and tools. Per spec, frames and selection has to be shown on top of everything else in the workplace (i.e. never clipped). The frames and selection are also selectable/interactable outside the page area, even if on top of other workspace elements.
* Frames also show outline on hover. The gray outline is only for debugging. Note that frames are not obscured by other elements either.
* `Display` templates are split into two categories: `Display` and `Frame`. `Display` is only to render the element: all event handlers are removed. `Frame` would normally only render the outline, but it handles all events (focus, mouse, keyboard).
* Edit layer now moves the `Edit` mode into a separate layer. This is done so that the editing element is always on top and we can, when needed, show graypane over the workspace, safe/unsafe area, etc - as requested by the UX.

You can see the actual layers by changing `DEBUG_ANGLE` constant to a non-zero value, e.g. `const DEBUG_ANGLE = 60;`.

## Checklist

- [ ] My pull request is addressing an [open issue](https://github.com/ampproject/amp-wp/contributing/project-management.md#life-of-an-issue) (please create one otherwise).
- [ ] My code is tested and passes existing [tests](https://github.com/ampproject/amp-wp/contributing/engineering.md#tests).
- [ ] My code follows the [Engineering Guidelines](https://github.com/ampproject/amp-wp/contributing/engineering.md) (updates are often made to the guidelines, check it out periodically).

## Feature description

Blocked by #4125 

When font family, weight, or size is changed from inspector panel; or when use is typing, the element dimensions might need updating to adjust to the new params. For example, if the text is taking more room when there previously was, we should update the dimensions to fit the text. If it's taking less room, we should also update the dimensions.

Note that this will need to consider rotationAngle -- just changing the height and width without position adjustment will make the element "slide".

<!-- Please describe clear and concisely which problem the feature would solve or which publisher needs it would address. -->

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* When typing in Text element so that the text doesn't fit to the element limits, the width/height are being adjusted.
* When the font family/weight/size is changed, the element will adjust its width and height to match the new room the content takes.

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Bug Description

When I have DevTools open and I have “Disable Cache” checked, about 10% of the time that I load paired browsing the AMP version shows the modal:

> The navigated URL is not available for paired browsing.

![image](https://user-images.githubusercontent.com/134745/72574010-70ee7f80-387c-11ea-8ec1-e45bb48d7053.png)

If I reload to try again, then the issue normally goes away, but this is because the issue happens sporadically. 

I can reproduce it both with DevTools open and with doing a hard-reload (Cmd+Shift+R).

There appears to be a race condition that is causing the detection in the AMP window to fail or vice-versa, or rather, detection that the page was able to load properly.

In the console I see an error that may be a clue for what is going on:

![image](https://user-images.githubusercontent.com/134745/72574271-46e98d00-387d-11ea-9fc1-7a81f272e094.png)

This appears to be due to the fact that the paired browsing scripts are being added with `async` attributes:

![image](https://user-images.githubusercontent.com/134745/72574360-9c259e80-387d-11ea-98c6-dfebb4c91ec3.png)

This is resulting in inconsistent loading order, and thus sporadic failures.

So we need to prevent adding the `async` attribute on these scripts, which probably just means removing it from this line:

https://github.com/ampproject/amp-wp/blob/0b91f99566b7254cc5688523291864d3ff49488e/includes/class-amp-theme-support.php#L2485

## Expected Behaviour

<!-- Please describe clearly and concisely what the expected behaviour should be. -->

## Steps to reproduce

1. Enable Transitional mode
2. Open DevTools and Disable Cache
3. Open paired browsing
4. Try reloading 20 times and notice that a couple times the above error is shown.

## Screenshots

<!-- If applicable, please add screenshots to help explain your problem. Bonus points for videos! -->

## Additional context

<!-- Please complete the following information. -->
 - WordPress version:
 - Plugin version:
 - Gutenberg plugin version (if applicable):
 - AMP plugin template mode:
 - PHP version:
 - OS:
 - Browser: [e.g. chrome, safari]
 - Device: [e.g. iPhone6]

<!-- Please add any additional information about the bug. Ideal dumping your [Site Health](https://wordpress.org/support/wordpress-version/version-5-2/#site-health-check) information here as well. -->

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* <!-- One or more bullet points for acceptance criteria. -->

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->

## Summary

<!-- Please reference the issue this PR addresses. -->
Fixes #4123 

## Checklist

- [x] My pull request is addressing an [open issue](https://github.com/ampproject/amp-wp/contributing/project-management.md#life-of-an-issue) (please create one otherwise).
- [ ] My code is tested and passes existing [tests](https://github.com/ampproject/amp-wp/contributing/engineering.md#tests).
- [ ] My code follows the [Engineering Guidelines](https://github.com/ampproject/amp-wp/contributing/engineering.md) (updates are often made to the guidelines, check it out periodically).

## Feature description

Separating this issue from #3760 for dividing the tasks into more logical chunks.

<!-- Please describe clear and concisely which problem the feature would solve or which publisher needs it would address. -->

---------------

_Do not alter or remove anything below. The following sections will be managed by moderators only._

## Acceptance criteria

* When resizing a Text element from corners, its font size will adjust to fit the text into the box (take as much room as possible).
* When resizing a Text element from sides, there is no font size adjustment.
* When resizing smaller without scaling, the other side will adjust accordingly, meaning that if the user is reducing height then the element will compensate by increasing width.

## Implementation brief

* <!-- One or more bullet points for how to technically resolve the issue. For significant Implementation Design, it is ok use a Google document **accessible by anyone**. -->

## QA testing instructions

* <!-- One or more bullet points to describe how to test the implementation in QA. -->

## Demo

* <!-- A video or screenshots demoing the implementation. -->

## Changelog entry

* <!-- One sentence summarizing the PR, to be used in the changelog. -->
