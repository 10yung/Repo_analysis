I have a `WebApiController` with ` [Route(HttpVerbs.Any, "/*")]` registered as `.WithWebApi("/someurl", m =>m .WithController<MainController>())`.

The problem that it never gets called.

The server returns 404.

Any solution? How can i register an endpoint that is called when no route is found? I have an undetermined url and it cannot be processed with built-in Route attribute. I cannot catch 404 exceptions because they're costly and it is not a right way to handle this case.

Currently i'm forced to have OnGet and catch all the requests.

Also is there a way to pass custom regex as route?
Closes #409
Hello Team

I am using Xamarin tvOS framework for developing the tvOS project. So I am using the embedio nudget package as a local server. It is working fine when we launch the application. But when app goes into the background and app returns in ForeGround then embedio nudget package is not working as expected. It is started Giving the "**System.Net.Http.HttpRequestException: An error occurred while sending the request ---> System.Net.WebException: Error: ConnectFailure (Connection refused) ---> System.Net.Sockets.SocketException: Connection refused
  at System.Net.Sockets.SocketAsyncResult**"


I tried to dispose and again try to run the server but still it is not working and once we kill the application and again relaunch the app then it is working as expected.


So let me know If I am missing anything or If I am doing anything wrong here.
When starting WebServer with a zip file I sometimes get this exception [System.IO.IOException](https://drive.google.com/open?id=1q270BKEDRMrdYUJS8B5hGerXliS-mwZs). Sometimes it works as expected and loads all files. Sometimes I get this exception and sometimes it loads the server but with some files missing (local header corrupted). I am attempting to run the server on a Xamarin.Android app. Any help would be appreciated.
EmbedIO is creating a session for each controller instead of one for all the WebModules.
**Describe the bug**
While using an API REST controller with logging to Console the webserver logs responses to requests.  This log information includes the response time in ms.

This response time is however incorrect and does not correspond to the actual response time the client experiences.

While performing tests using Postman as the client, then Postman reported responses between 9ms and 15ms for all the requests below.

The first request appears correct.  The rest are totally wrong.

6:51:48.696 INF >> [WebServer] [Mx5kSDSNa0Op7I81+cqHWw] GET /api/statistics: "200 OK" sent in 9ms (chunked)
 06:51:54.515 INF >> [WebServer] [aUwmWPbUcEeRAd3VGg8i1A] GET /api/statistics: "200 OK" sent in 5819ms (chunked)
 06:51:57.526 INF >> [WebServer] [wUB7HO9icUCH5BZ88OGC6A] GET /api/statistics: "200 OK" sent in 3012ms (chunked)
 06:51:59.218 INF >> [WebServer] [02I89cPg1E6byBihzb0SKQ] GET /api/statistics: "200 OK" sent in 1694ms (chunked)
 06:52:00.652 INF >> [WebServer] [aFzm4L8t9EurksOy16ejOg] GET /api/statistics: "200 OK" sent in 1434ms (chunked)
 06:52:01.733 INF >> [WebServer] [dn/De84W/EuW7VH+rN/eNw] GET /api/statistics: "200 OK" sent in 1082ms (chunked)
 06:52:03.530 INF >> [WebServer] [SpGKCvoedkOmPY9zsCrvSg] GET /api/statistics: "200 OK" sent in 1797ms (chunked)
 06:52:05.244 INF >> [WebServer] [2qhCnXtCxkeuwXnxhx+H5A] GET /api/statistics: "200 OK" sent in 1714ms (chunked)
 06:52:06.133 INF >> [WebServer] [oKkgal0KWEua9yDQ7jy9nw] GET /api/statistics: "200 OK" sent in 889ms (chunked)
 06:52:07.033 INF >> [WebServer] [eATwdNNDTUW0FKABwKp01g] GET /api/statistics: "200 OK" sent in 901ms (chunked)
 06:52:07.871 INF >> [WebServer] [AQNwph8m0USP5bsQiYFRJw] GET /api/statistics: "200 OK" sent in 838ms (chunked)
 06:52:08.705 INF >> [WebServer] [5E6Z4Ar4GUyeheH6GhHgQA] GET /api/statistics: "200 OK" sent in 835ms (chunked)
 06:52:09.533 INF >> [WebServer] [4/tDJNYKO0+1Dg1iLup6SA] GET /api/statistics: "200 OK" sent in 828ms (chunked)
 06:52:10.495 INF >> [WebServer] [Lvn53EZBZ0aUXKYJCn4jsg] GET /api/statistics: "200 OK" sent in 963ms (chunked)
 06:52:11.306 INF >> [WebServer] [Fp2vr0+4G0+Mwxixq/sudg] GET /api/statistics: "200 OK" sent in 811ms (chunked)


I have also seen examples where the response time is quoted as 10 - 17 seconds but the reality was just a few ms.


**To Reproduce**
Steps to reproduce the behavior:
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**

The response times should correspond to reality.

**Screenshots**
See log output above

**Desktop (please complete the following information):**
 - OS: Windows 10 64-Bit running DotNet Core 3.0
 - Browser: Postman
 - Version 3.1.3

**Smartphone (please complete the following information):**
 - Device: [e.g. iPhone6]
 - OS: [e.g. iOS8.1]
 - Browser [e.g. stock browser, safari]
 - Version [e.g. 22]

**Additional context**


**Describe the bug**
This may just be my lack of experience with WebSockets, but it appears as if the handshake isn't working properly.  The WebsocketClient throws an exception saying that the server returned a status code of 200, but was expecting a 101.  
**To Reproduce**
**Server side code** (just the creation code shown for brevity):

`private WebServer CreateWebServer(string url)
        {
            var server = new WebServer(o => o
                    .WithUrlPrefix(url)
                    .WithMode(HttpListenerMode.EmbedIO))
                // First, we will configure our web server by adding Modules.
                    .WithLocalSessionManager()
                    .WithModule(new WebSocketCallbackModule("/register"))
                    ;

            return server;

        }`

**Client side code**

`ClientWebSocket webSocket = null;
            try
            {
                webSocket = new ClientWebSocket();
                
                await webSocket.ConnectAsync(new Uri(URI), CancellationToken.None);
                
            }
            catch (Exception e)
            {

                Debug.WriteLine("CallbackHandler::Connect - error connecting web socket " + e.Message);
            }`

**Expected behavior**
A successful connection

**Screenshots**
N/A

**Desktop (please complete the following information):**
 - OS: Windows 10
 - Browser N/A
 - Version 1903

**Smartphone (please complete the following information):**
N/A

**Additional context**
The EmbedIO web server is running inside a .NET 4.7.2 application
The client is a .Net Standard 2.1 library

AND, thanks for a great library!  I'm using the WebAPI module in another app and it runs perfectly!!!

The EndPointListener is not removed from EndPointManager when the server is shutdown or disposed.
We noticed this on iOS since if our app is suspended then iOS will shutdown the listener and make it unusable which leaves you in the position of not being able to restart the server.

It looks like the problem is in EndPointManager.RemovePrefix, it creates a new prefix object and passes it to RemovePrefix 

```c#
private static void RemovePrefix(string prefix, HttpListener listener)
{
     try
     {
         var lp = new ListenerPrefix(prefix); // <- Creates new prefix object

         if (!lp.IsValid())
             return;

         var epl = GetEpListener(lp.Host, lp.Port, listener, lp.Secure);
         epl.RemovePrefix(lp); // <- Passes new prefix to RemovePrefix
     }
     catch (SocketException)
     {
         // ignored
     }
}
```

Then in EndPointListener.RemovePrefix it's using the new listener prefix object and it won't be removed because the key of the dictionary is the ListenerPrefix reference and the new ListenerPrefix object won't match any object in the dictionary.

```c#
public void RemovePrefix(ListenerPrefix prefix)
{
    // snip....

    Dictionary<ListenerPrefix, HttpListener> prefs, p2;

    do
    {
        prefs = _prefixes;
        if (!prefs.ContainsKey(prefix))
            break; // <- exits here since the new ListenerPrefix object doesn't match any dictionary object

        p2 = prefs.ToDictionary(x => x.Key, x => x.Value);
        p2.Remove(prefix);
    }
    while (Interlocked.CompareExchange(ref _prefixes, p2, prefs) != prefs);
    CheckIfRemove();
}
```
Thanks
We noticed that our webclient doesn't work occasionally. Reloading the page sometimes solves the problem. The client initiates the protocol by sending handshake websocket messages to the server.

There seems to be a race condition where client websocket messages sent between [accepting](https://github.com/unosquare/embedio/blob/96f0fcc72db73e45f61240e0134de9bf1348a212/src/EmbedIO/WebSockets/WebSocketModule.cs#L192) and [processing](https://github.com/unosquare/embedio/blob/96f0fcc72db73e45f61240e0134de9bf1348a212/src/EmbedIO/WebSockets/WebSocketModule.cs#L207-L221) are lost.

Steps to reproduce the behavior:
1. Set up websocket module
2. Connect a client that immediatally sends messages when connected

Initial messages are not processed on the server side. Subsequent messages sent after a delay are properly processed.

The messages are visible in both Chrome web developer tools and on the wire (wireshark).

**Desktop**
Windows 10 with Chrome 78 on .Net Framework 4.8
**Describe the bug**
Using the Embed.IO listener with a simple /health controller that simply responds with a String. The request takes 2 seconds to process. Have tried with both httpie and curl on the client side.

With the MS listener, the request processes immediately as expected.

**Desktop (please complete the following information):**
 - OS: Windows
 - Browser [e.g. chrome, safari]: N/A
 - Version [e.g. 22]: 10
