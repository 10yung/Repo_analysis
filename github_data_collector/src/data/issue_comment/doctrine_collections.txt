This should also help PHPStan understand the collections class a little better, as it doesn't support `array-key` yet.
This enhancement gives to map() Closure the capability to access also the keys of the inner array holding the elements. Until now, we were able to access just the element on map Closure but not the key. So I propose to add the ability to access also the key for do some statements inside the Closure with key related.

I have the need to add it since in my project I must get the asociative key to take a decision in function of the current key element and I thought that may be usefull for everyone in some other projects to access the key of current processing element

This is a re-proposal of PR #27 by @mnapoli
Update `get` method with one more additional method parameter which will be used as default value if target element couldn't be found.

Example: [Symfony ParameterBag][1]

[1]: https://github.com/symfony/http-foundation/blob/9a96d77ceb1fd913c9d4a89e8a7e1be87604be8a/ParameterBag.php#L74-L85
Fixes #195
See question here where this was originally requested https://github.com/doctrine/collections/pull/125#issuecomment-378990965

I noticed that some methods of `Collection` return `false` on failure. Specifically `first()`, `last()`, `current()`, `next()` and `indexOf()`. It would be better in my opinion to return `null` instead.

Since this is a BC break I'd like to propose this for doctrine/collections 2.0.

https://github.com/doctrine/collections/commit/c3564a69cf8e073f4031ce86a77fde44563f7f03
(Of course all `Collection` implementations and tests would need to be changed accordingly.)
Possibly a good idea for branches in `1.x`, not to be merged into `master`? Just throwing it out there: this would prevent most feedback along the lines of "we can't do that because BC" from human-to-human, which is frustrating.
Jira issue originally created by user anton.serdyuk:

Given I have some entity method like this:

```
    public function hasNewComments()
    {
        $newComments = $this->comments->matching(
            Criteria::create()
                ->where(Criteria::expr()->eq('new', true))
        );

        return count($newComments) > 0;
    }
```

Where $this->comments is OneToMany collection.

If $this->comments is EXTRA_LAZY, then this code will always produce SQL query to database and always will work fine. But if  it is not EXTRA_LAZY and appears to be loaded before (for eample count($this->comments) was called before), then this code will produce error "Trying to get private property Comment::$new from ClosureExpressionVisitor context".

I thins we should have something like reflection or \Closure::bind() stuff to get actual field value within ClosureExpressionVisitor regardless this field is private or public.

I know I can create getter getNew() or isNew(), but I believe this is known to be a good OOP practice to avoid unnecessary getters, and I am not sure collection api should make this decision for me.
