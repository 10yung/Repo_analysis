Hi Im new in GitHub, and I found this code a few years ago from these pages:
http://touchprefab.com/search.php?keywords=Camera+Zoom
http://touchprefab.com/viewtopic.php?f=4&t=24272&p=26743&hilit=Camera+Zoom#p26743

Thanks to nmax

I did some modifications to make it run back in the day. But now when I update TouchScript to the newest version, the code gets broken, I tried to repair it but without success :( 

I only want the camera moves softly to the planet (Im using the Camera example) with a limit for the camera to not cross the planet and not to walk away without limits.

Any idea how to repair it?

Thanks for your help :)

//original
using UnityEngine;
using System.Collections;
using System;
using TouchScript;
using TouchScript.Gestures;

public class SuperCamera : MonoBehaviour
{
    public Transform target;
    public Vector3 targetOffset;
    public float distance = 5.0f;
    public float maxDistance = 20;
    public float minDistance = 5f;
    public float xSpeed = 15f;
    public float ySpeed = 15f;
    public int yMinLimit = -90;
    public int yMaxLimit = 90;
    public int zoomRate = 50;
    public float panSpeed = 10f;
    public float zoomDampening = 3.0f;
    public bool Enabled = true;
    public bool ClampOrbit = true;
    //------------------------------------------------------------
    private float xDeg = 0.0f;
    private float yDeg = 0.0f;
    private float currentDistance;
    private float desiredDistance;
    private Quaternion currentRotation;
    private Quaternion desiredRotation;
    private Quaternion rotation;
    private Vector3 position;
    private Vector3 touchDeltaPosition;
    private float Dummy;

    void Start()
    {
        Init();
    }

    public void Init()
    {
        //If there is no target, create a temporary target at 'distance' from the cameras current viewpoint
        if (!target)
        {
            GameObject go = new GameObject("Cam Target");
            go.transform.position = new Vector3(0,0,0);//transform.position + (transform.forward * distance);
            target = go.transform;
        }
        distance = Vector3.Distance(transform.position, target.position);
        currentDistance = distance;
        desiredDistance = distance;
        //be sure to grab the current rotations as starting points.
        position = transform.position;
        rotation = transform.rotation;
        currentRotation = transform.rotation;
        desiredRotation = transform.rotation;
        xDeg = Vector3.Angle(Vector3.right, transform.right);
        yDeg = Vector3.Angle(Vector3.up, transform.up);
        Dummy = distance;
    }

    private void OnEnable()
    {
        if (GetComponent<TransformGesture>() != null)
        {
            GetComponent<TransformGesture>().StateChanged += onPanStateChanged;
        }
        if (GetComponent<TransformGesture>() != null)
        {
            GetComponent<TransformGesture>().StateChanged += onScaleStateChanged;
        }
        if (GetComponents<TapGesture>() != null)
        {
            foreach (var tap in GetComponents<TapGesture>())
            {
                tap.Tapped += tappedHandler;
            }
        }

        if (GetComponent<LongPressGesture>() != null)
        {
            GetComponent<LongPressGesture>().StateChanged += longPressStateChangedHandler;
        }

    }

    private void OnDisable()
    {
        if (GetComponent<TransformGesture>() != null)
        {
            GetComponent<TransformGesture>().StateChanged -= onPanStateChanged;
        }
        if (GetComponent<TransformGesture>() != null)
        {
            GetComponent<TransformGesture>().StateChanged -= onScaleStateChanged;
        }
        if (GetComponents<TapGesture>() != null)
        {
            foreach (var tap in GetComponents<TapGesture>())
            {
                tap.Tapped -= tappedHandler;
            }
        }

        if (GetComponent<LongPressGesture>() != null)
        {
            GetComponent<LongPressGesture>().StateChanged -= longPressStateChangedHandler;

        }
    }

    private void onPanStateChanged(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Began:
            case Gesture.GestureState.Changed:
                var gesture = (TransformGesture)sender;
                touchDeltaPosition = gesture.LocalDeltaPosition;
                if (gesture.ActiveTouches.Count != 1)
                {
                    return;
                }
                xDeg += touchDeltaPosition.x * xSpeed * 0.02f;
                yDeg -= touchDeltaPosition.y * ySpeed * 0.02f;
                break;
        }
    }

    private void onScaleStateChanged(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Began:
            case Gesture.GestureState.Changed:
                var gesture = (TransformGesture)sender;
                if (Math.Abs(gesture.DeltaScale - 1) > 0.00001)     //LocalDeltaScale => DeltaScale
                {
                    float speed = (gesture.DeltaScale - 1);
                    distance = speed;
                    if (distance > maxDistance)
                    {
                        desiredDistance += distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                    }
                    if (distance < minDistance)
                    {
                        desiredDistance -= distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                    }
                }
                break;
        }
    }

    private void tappedHandler(object sender, EventArgs eventArgs)
    {
        if (!Enabled)
        {
            return;
        }
        var tap = sender as TapGesture;
        switch (tap.NumberOfTapsRequired)
        {
            case 1:
                // If you want to have ONE TAP
                break;
            case 2:
                // DOUBLE TAP ZOOM OUT & IN
                desiredDistance = Dummy;
                if (distance > maxDistance)
                {
                    desiredDistance += distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                }
                if (distance < minDistance)
                {
                    desiredDistance -= distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                }
                break;
        }
    }

    private void longPressStateChangedHandler(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Recognized:
            case Gesture.GestureState.Failed:
            case Gesture.GestureState.Cancelled:
                //Do your action if CANCEL LONG PRESS
                break;
        }

        if (e.State == Gesture.GestureState.Recognized)
        {
            // Do your action on LONG PRESS
        }
    }

    void LateUpdate()
    {
        if (ClampOrbit)
        {
            //Clamp the vertical axis for the orbit
            yDeg = ClampAngle(yDeg, yMinLimit, yMaxLimit);
        }
        // set camera rotation 
        desiredRotation = Quaternion.Euler(yDeg, xDeg, 0);
        currentRotation = transform.rotation;
        rotation = Quaternion.Lerp(currentRotation, desiredRotation, Time.deltaTime * zoomDampening);
        transform.rotation = rotation;
        ////////Orbit Position
        //clamp the zoom min/max
        desiredDistance = Mathf.Clamp(desiredDistance, minDistance, maxDistance);
        // For smoothing of the zoom, lerp distance
        currentDistance = Mathf.Lerp(currentDistance, desiredDistance, Time.deltaTime * zoomDampening);
        //calculate position based on the new currentDistance 
        if (target == null)
        {
            return;
        }
        if (target)
        {
            position = target.position - (rotation * Vector3.forward * currentDistance + targetOffset);       //MOD
        }

        position = target.position - (rotation * Vector3.forward * currentDistance + targetOffset);       //MOD
        transform.position = position;
    }
    private static float ClampAngle(float angle, float min, float max)
    {
        if (angle < -360)
            angle += 360;
        if (angle > 360)
            angle -= 360;
        return Mathf.Clamp(angle, min, max);
    }
}

//My repair but with errors :( (it happens when Im trying to use 2 fingers for scaling)
//transform.localPosition assign attempt for 'Camera' is not valid. Input localPosition is { NaN, NaN, Infinity }.
UnityEngine.Transform:set_localPosition(Vector3)

using UnityEngine;
using System.Collections;
using System;
using TouchScript;
using TouchScript.Gestures;

public class CameraDif01 : MonoBehaviour
{
    public Transform target;
    public Vector3 targetOffset;
    public float distance = 5.0f;
    public float maxDistance = 20;
    public float minDistance = 5f;
    public float xSpeed = 15f;
    public float ySpeed = 15f;
    public int yMinLimit = -90;
    public int yMaxLimit = 90;
    public int zoomRate = 50;
    public float panSpeed = 10f;
    public float zoomDampening = 3.0f;
    public bool Enabled = true;
    public bool ClampOrbit = true;
    //------------------------------------------------------------
    private float xDeg = 0.0f;
    private float yDeg = 0.0f;
    private float currentDistance;
    private float desiredDistance;
    private Quaternion currentRotation;
    private Quaternion desiredRotation;
    private Quaternion rotation;
    private Vector3 position;
    private Vector3 touchDeltaPosition;
    private float Dummy;

    void Start()
    {
        Init();
    }

    public void Init()
    {
        //If there is no target, create a temporary target at 'distance' from the cameras current viewpoint
        if (!target)
        {
            GameObject go = new GameObject("Cam Target");
            go.transform.position = new Vector3(0,0,0);//transform.position + (transform.forward * distance);
            target = go.transform;
        }
        distance = Vector3.Distance(transform.position, target.position);
        currentDistance = distance;
        desiredDistance = distance;
        //be sure to grab the current rotations as starting points.
        position = transform.position;
        rotation = transform.rotation;
        currentRotation = transform.rotation;
        desiredRotation = transform.rotation;
        xDeg = Vector3.Angle(Vector3.right, transform.right);
        yDeg = Vector3.Angle(Vector3.up, transform.up);
        Dummy = distance;
    }

    private void OnEnable()
    {
        if (GetComponent<TransformGestureBase>() != null)                               //TransformGesture
        {
            GetComponent<TransformGestureBase>().StateChanged += onPanStateChanged;     //TransformGesture
        }
        if (GetComponent<TransformGestureBase>() != null)                               //TransformGesture
        {
            GetComponent<TransformGestureBase>().StateChanged += onScaleStateChanged;   //TransformGesture
        }
        if (GetComponents<TapGesture>() != null)                                    
        {
            foreach (var tap in GetComponents<TapGesture>())
            {
                tap.Tapped += tappedHandler;
            }
        }

        if (GetComponent<LongPressGesture>() != null)
        {
            GetComponent<LongPressGesture>().StateChanged += longPressStateChangedHandler;
        }

    }

    private void OnDisable()
    {
        if (GetComponent<TransformGestureBase>() != null)                                       //TransformGesture        
        {
            GetComponent<TransformGestureBase>().StateChanged -= onPanStateChanged;             //TransformGesture
        }
        if (GetComponent<TransformGestureBase>() != null)                                       //TransformGesture
        {
            GetComponent<TransformGestureBase>().StateChanged -= onScaleStateChanged;           //TransformGesture
        }
        if (GetComponents<TapGesture>() != null)
        {
            foreach (var tap in GetComponents<TapGesture>())
            {
                tap.Tapped -= tappedHandler;
            }
        }

        if (GetComponent<LongPressGesture>() != null)
        {
            GetComponent<LongPressGesture>().StateChanged -= longPressStateChangedHandler;

        }
    }

    private void onPanStateChanged(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Began:
            case Gesture.GestureState.Changed:
                var gesture = (TransformGestureBase)sender;                         //TransformGesture
                touchDeltaPosition = gesture.DeltaPosition;                         //LocalDeltaPosition         
                if (gesture.ActivePointers.Count != 1)                               //ActiveTouches
                {
                    return;
                }
                xDeg += touchDeltaPosition.x * xSpeed * 0.02f;
                yDeg -= touchDeltaPosition.y * ySpeed * 0.02f;
                break;
        }
    }

    private void onScaleStateChanged(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Began:
            case Gesture.GestureState.Changed:
                var gesture = (TransformGestureBase)sender;             //TransformGesture
                if (Math.Abs(gesture.DeltaScale - 1) > 0.00001)     //LocalDeltaScale => DeltaScale
                {
                    float speed = (gesture.DeltaScale - 1);
                    distance = speed;
                    if (distance > maxDistance)
                    {
                        desiredDistance += distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                    }
                    if (distance < minDistance)
                    {
                        desiredDistance -= distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                    }
                }
                break;
        }
    }

    private void tappedHandler(object sender, EventArgs eventArgs)
    {
        if (!Enabled)
        {
            return;
        }
        var tap = sender as TapGesture;
        switch (tap.NumberOfTapsRequired)
        {
            case 1:
                // If you want to have ONE TAP
                break;
            case 2:
                // DOUBLE TAP ZOOM OUT & IN
                desiredDistance = Dummy;
                if (distance > maxDistance)
                {
                    desiredDistance += distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                }
                if (distance < minDistance)
                {
                    desiredDistance -= distance * Time.deltaTime * zoomRate * Mathf.Abs(desiredDistance);
                }
                break;
        }
    }

    private void longPressStateChangedHandler(object sender, GestureStateChangeEventArgs e)
    {
        if (!Enabled)
        {
            return;
        }
        switch (e.State)
        {
            case Gesture.GestureState.Recognized:
            case Gesture.GestureState.Failed:
            case Gesture.GestureState.Cancelled:
                //Do your action if CANCEL LONG PRESS
                break;
        }

        if (e.State == Gesture.GestureState.Recognized)
        {
            // Do your action on LONG PRESS
        }
    }

    void LateUpdate()
    {
        if (ClampOrbit)
        {
            //Clamp the vertical axis for the orbit
            yDeg = ClampAngle(yDeg, yMinLimit, yMaxLimit);
        }
        // set camera rotation 
        desiredRotation = Quaternion.Euler(yDeg, xDeg, 0);
        currentRotation = transform.rotation;
        rotation = Quaternion.Lerp(currentRotation, desiredRotation, Time.deltaTime * zoomDampening);
        transform.rotation = rotation;
        ////////Orbit Position
        //clamp the zoom min/max
        desiredDistance = Mathf.Clamp(desiredDistance, minDistance, maxDistance);
        // For smoothing of the zoom, lerp distance
        currentDistance = Mathf.Lerp(currentDistance, desiredDistance, Time.deltaTime * zoomDampening);
        //calculate position based on the new currentDistance 
        if (target == null)
        {
            return;
        }
        if (target)
        {
            position = target.position - (rotation * Vector3.forward * currentDistance + targetOffset);       //MOD
        }

        position = target.position - (rotation * Vector3.forward * currentDistance + targetOffset);       //MOD
        transform.position = position;
    }
    private static float ClampAngle(float angle, float min, float max)
    {
        if (angle < -360)
            angle += 360;
        if (angle > 360)
            angle -= 360;
        return Mathf.Clamp(angle, min, max);
    }
}





It works perfectly in the editor with the mouse, but the apk in mobile does not recognize the Tap.
Am I forgetting something?

I´m getting the Tap over a Sprite.
Hello!
I create a button.
the onclick event link the function
{
    inputField.Select();
    inputField.ActivateInputField();

}

use the default unity input
the input field can be selected normally.
but use the touch script 
the input field will end edit immediately and I can't type any word.
Hey, I'm working on a project that has kind of multi gesture menu.

I have transformer, swipe, buttons so and so.
I found out that if I have a UI element (let's call it the Control Panel) has a child, the transform gesture inputs include the children of the panel. so even if I try to drag the child (doesn't have transformer or transform gesture components) it moves the parent,
![Screenshot (9)_LI](https://user-images.githubusercontent.com/36236219/63748251-ad134a80-c8b1-11e9-9c23-f0507b618bbe.jpg)

so my problem, as seen in the picture there is a Lock area and swipe area both children of the middle circle that is called Control Panel. when I try to swipe in the swipe area (swipe is different child because drag and swipe is almost the same thing) when the lock area is on (simetimes he is off and then it  works ok) he drags all the panel like I touch the middle circle.
any ideas how to solve this?

looked in the docs, didn't find anything related to transfer the gestures to children
My hierarchy:
Parent: ControlPanel has Transform Gesture, Transformer, Tap Gesture
Child 1: SwipeBack has Swipe(Custom) Gesture 
Child 2: SwipeNext has Swipe(Custom) Gesture  
Child 3: LockPanel has Long Press Gesture and 4 images childs that surround the Control Panel (also works here the children accept the long press gesture as it part of the parent)

Hi there ,Unity EventSystem has given the API such as OnMousexxx() or OnPointerClick() so the developer can write his own function since the mouse button clicks the gameobject? 
https://docs.unity3d.com/462/Documentation/Manual/SupportedEvents.html

Has TouchScript given the API like those? It's very important to me. Can somebody help me?

Thank you very much!
Hi, I used the StandardInput.cs，and test my project in  Unity Editor. When the mouse click the scene, there exists the green cursor.
![image](https://user-images.githubusercontent.com/25053570/63205448-d6282400-c0d6-11e9-9c66-84ed207aeab7.png)

Then I launch my game, and I select  the Resizable Window
![image](https://user-images.githubusercontent.com/25053570/63205475-33bc7080-c0d7-11e9-9101-5d9aca72176e.png)
Then I found that, when the game window size changed ,the green cursor size won't be changed, it seems not so perfect, can you tell me how to change the cursor size so it will fit the game window automatically?

Thank you so much



Hi，TouchScript is really great! But It seems like that TUIOInput.cs can only receive the TUIO messages from the TUIO hardware or TUIO simulator . 
If I have (x,y) coordinate,I want to write and send the TUIO messages to TUIOInput.cs, What should I do?
Hello,

I have a setup that uses EventTrigger on 2 cylinders that move around and have onDragStart, end, onTap, etc events. After implementing the StandardLayer on my cameras and made it work, the event triggers are not working any more.

Also please note that the objects are not ui, just world space objects and everything worked fine until now.

Please help since I can't find a solution to my problem.
Hello, has anyone tried to use TouchScript TUIO (it works great with an IR multitouch frame) and DoozyUI v3 gestures? Those gestures work with mouse and an integrated touch screen, but not using TouchScript with TUIO.

I wonder if there is a way to converts TUIO pointers directly to Unity touch points. Theoretically, DoozyUI would work with any Unity touch points.

Thanks
I get the following error when running a Windows build using IL2CPP (Unity 2018.2.21f1).

```
NotSupportedException: IL2CPP does not support marshaling delegates that point to instance methods to native code.
  at TouchScript.InputSources.InputHandlers.WindowsPointerHandler.init (TouchScript.InputSources.InputHandlers.WindowsPointerHandler+TOUCH_API api) [0x00000] in <00000000000000000000000000000000>:0 
  at TouchScript.InputSources.StandardInput.OnEnable () [0x00000] in <00000000000000000000000000000000>:0 
```