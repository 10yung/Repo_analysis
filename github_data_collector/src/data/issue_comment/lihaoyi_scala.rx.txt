Updates [org.scala-sbt:sbt](https://github.com/sbt/sbt) [from 1.3.6 to 1.3.7](https://github.com/sbt/sbt/compare/v1.3.6...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt", artifactId = "sbt" } ]
```
</details>

labels: library-update, semver-patch
fixes #137 

(currently blocked by https://github.com/scala/scala-collection-compat/issues/247)
Hi! Is there some roadmap for 2.13 support?

I was previously working with scalarx 0.2.8. Migrating from 0.2.8 to 0.3.2 is dealing with a lot of API changes. Please provide a changelog.
Maybe travis-ci will be nice this time.
Let's say I have a custom Extractor and a Var:
```scala
object Extractor {
  def unapply(x: Int): Option[Int] = Some(x + 1)
}

val a = Var(1)
```

Then the following code raises a comile error:
```scala
Rx {
  a() match {
    case Extractor(x) => x
  }
}
```

Error:
```
[error] unexpected UnApply Extractor.unapply(<unapply-selector>) <unapply> ((x @ _))
```
Sorry - normally I'd submit a pull request for this kind of thing but unfortunately I don't have time.

Many people new to the project will start by working through the examples in the `README` so it's relatively important that it be mistake free. Here are some issues I found:

**1.** I had to change the following code:

``` scala
intercept[ArithmeticException]{
  b()
}
assert(b.toTry.isInstanceOf[Failure])
```

To this:

``` scala
intercept[ArithmeticException]{
  b.now // Otherwise it complains "No implicit Ctx.Data is available here!"
}
assert(b.toTry.isInstanceOf[Failure[_]])  // Otherwise it complains "class Failure takes type parameters "assert(b.toTry.isInstanceOf[Failure])
```

**2.** An unknown function `inside` is referenced a number of times, e.g. like so:

``` scala
inside(c.toTry){case Success(0) => () }
```

I think occurances of `inside` should be replaced with `assertMatch`

``` scala
assertMatch(c.toTry){case Success(0) => ()}
```

But then it's probably necessary to go on and explain that to use `assertMatch` you have to extend `TestSuite` from https://github.com/lihaoyi/utest

``` scala
import utest._

object XyzTests extends TestSuite {
  val tests = this {
    "pqrTest" - {
      assertMatch(b.toTry){case Success(0)=>}
    }
  }
}
```

**3.** In the following code why is `a` wrapped in another `Rx` when creating `b` - isn't `a` already a perfectly acceptable `Rx`?

``` scala
val a = Var(1)
val b = Rx{
    (Rx{ a() }, Rx{ math.random })
}
```

Not having standard safe implicits is a barrier to using scalarx with scalajs. Below are links to several implementations people have come up with. It would be nice to have some standard implicits that we could refer to and that the community could improve over time.

Observations:
- The Hands on Scalajs book has a [recommended implicit](https://github.com/lihaoyi/hands-on-scala-js/blob/master/examples/demos/src/main/scala/advanced/BasicRx.scala#L68-L79) that needs to be updated asap.
- Some people's implicits use .toTry and get values safely, some do not
- Some people implicits wrap the rx value in a container node, making it easy to remove all child nodes. However adding these intermediate nodes doesn't work well when using libraries like bootstrap. ([example Voltir/framework](https://github.com/Voltir/framework.rx/blob/master/src/main/scala/framework/Framework.scala#L20-49))
- I am not sure how to combine safety, being sure to remove/replace all children, and not creating a container node that messes up bootstrap css/js.

Implementations:
- https://github.com/Karasiq/scalajs-bootstrap/blob/master/src/main/scala/com/karasiq/bootstrap/BootstrapImplicits.scala#L132-156
- https://github.com/openmole/scaladget/blob/master/scaladget/src/main/scala/fr/iscpif/scaladget/tools/JsRxTags.scala#L39-61
- https://github.com/Voltir/framework.rx/blob/master/src/main/scala/framework/Framework.scala#L20-49
- https://github.com/lihaoyi/hands-on-scala-js/blob/master/examples/demos/src/main/scala/advanced/BasicRx.scala#L68-L79

I try to avoid adding `(implicit ctx: Ctx.Owner)` to each class with following approach:

```
class Test {
    implicit val ctx: Ctx.Owner = Ctx.Owner.safe()

    var count = 0
    val a = Var(1); val b = Var(2)
    def mkRx(i: Int)(implicit ctx: Ctx.Owner) = Rx { count += 1; i + b() }
    val c = Rx {
      val newRx = mkRx(a())
      newRx()
    }
    println(c.now, count)
    a() = 4
    println(c.now, count)
    b() = 3
    println(c.now, count) //(7,5) -- 5??

    (0 to 100).foreach { i => a() = i }
    println(c.now, count)
    b() = 4
    println(c.now, count) //(104,211) -- 211!!!
  }
```

This seams to work but I don't know if this is really correct or if there is a better way to do this.
