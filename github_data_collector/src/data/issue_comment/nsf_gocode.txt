$ gocode -s -debug
2019/11/21 12:24:15 Go project path: .
runtime: goroutine stack exceeds 1000000000-byte limit
fatal error: stack overflow

runtime stack:
runtime.throw(0xa3c87d, 0xe)
    /usr/lib/go/src/runtime/panic.go:774 +0x72
runtime.newstack()
    /usr/lib/go/src/runtime/stack.go:1046 +0x6e9
runtime.morestack()
    /usr/lib/go/src/runtime/asm_amd64.s:449 +0x8f

goroutine 34 [running]:
runtime.newMarkBits(0x55, 0x0)
    /usr/lib/go/src/runtime/mheap.go:1933 +0x349 fp=0xc021110320 sp=0xc021110318 pc=0x429ab9
runtime.heapBits.initSpan(0x7f42e126e300, 0x20300000000000, 0x7f42e13cbfff, 0x7f42e01a43d8)
    /usr/lib/go/src/runtime/mbitmap.go:792 +0x74 fp=0xc0211103a0 sp=0xc021110320 pc=0x4171b4
runtime.(*mcentral).grow(0xf29af8, 0x0)
    /usr/lib/go/src/runtime/mcentral.go:264 +0x13e fp=0xc0211103e0 sp=0xc0211103a0 pc=0x41986e
runtime.(*mcentral).cacheSpan(0xf29af8, 0xc000034000)
    /usr/lib/go/src/runtime/mcentral.go:106 +0x2fe fp=0xc021110440 sp=0xc0211103e0 pc=0x4192ce
runtime.(*mcache).refill(0x7f42e33dd008, 0xf)
    /usr/lib/go/src/runtime/mcache.go:138 +0x85 fp=0xc021110460 sp=0xc021110440 pc=0x418d75
runtime.(*mcache).nextFree(0x7f42e33dd008, 0x7f42e33dd00f, 0x0, 0x16, 0xa87108)
    /usr/lib/go/src/runtime/malloc.go:854 +0x87 fp=0xc021110498 sp=0xc021110460 pc=0x40d847
runtime.mallocgc(0x60, 0x959020, 0x44a801, 0xc00143629f)
    /usr/lib/go/src/runtime/malloc.go:1022 +0x793 fp=0xc021110538 sp=0xc021110498 pc=0x40e183
runtime.makeslice(0x959020, 0x0, 0x58, 0x41)
    /usr/lib/go/src/runtime/slice.go:49 +0x6c fp=0xc021110568 sp=0xc021110538 pc=0x446d0c
strings.(*Builder).grow(...)
    /usr/lib/go/src/strings/builder.go:67
strings.(*Builder).Grow(...)
    /usr/lib/go/src/strings/builder.go:81
strings.Join(0xc021110750, 0x2, 0x2, 0xa2dc36, 0x1, 0x41, 0xc000c21de0)
    /usr/lib/go/src/strings/strings.go:438 +0x4ca fp=0xc021110640 sp=0xc021110568 pc=0x4f455a
path/filepath.join(0xc021110750, 0x2, 0x2, 0xa2dc00, 0x1)
    /usr/lib/go/src/path/filepath/path_unix.go:45 +0xa7 fp=0xc021110688 sp=0xc021110640 pc=0x4fb007
path/filepath.Join(...)
    /usr/lib/go/src/path/filepath/path.go:210
github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod.(*Package).load(0xc000fc6c60, 0xc00ba7be90)
    /home/user/.go/src/github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod/fastmod.go:232 +0x475 fp=0xc0211107b0 sp=0xc021110688 pc=0x6a42f5
github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod.(*Package).load(0xc000fc6c60, 0xc00ba7bce0)
    /home/user/.go/src/github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod/fastmod.go:239 +0x2ab fp=0xc0211108d8 sp=0xc0211107b0 pc=0x6a412b
github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod.(*Package).load(0xc000fc6c60, 0xc00ba7bb90)
...
...
...
...
...
    /home/user/.go/src/github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod/fastmod.go:239 +0x2ab fp=0xc021110a00 sp=0xc0211108d8 pc=0x6a412b
github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod.(*Package).load(0xc000fc6c60, 0xc00baf7bc0)
    /home/user/.go/src/github.com/visualfc/gocode/vendor/github.com/visualfc/fastmod/fastmod.go:239 +0x2ab fp=0xc021116e98 sp=0xc021116d70 pc=0x6a412b
created by net/rpc.(*Server).ServeCodec
    /usr/lib/go/src/net/rpc/server.go:474 +0x42b

goroutine 1 [IO wait, 1 minutes]:
internal/poll.runtime_pollWait(0x7f42e014ee08, 0x72, 0xffffffffffffffff)
    /usr/lib/go/src/runtime/netpoll.go:184 +0x55
internal/poll.(*pollDesc).wait(0xc0001d0198, 0x72, 0x1000, 0x1000, 0xffffffffffffffff)
    /usr/lib/go/src/internal/poll/fd_poll_runtime.go:87 +0x45
internal/poll.(*pollDesc).waitRead(...)
    /usr/lib/go/src/internal/poll/fd_poll_runtime.go:92
internal/poll.(*FD).Read(0xc0001d0180, 0xc000241000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/lib/go/src/internal/poll/fd_unix.go:169 +0x1cf
net.(*netFD).Read(0xc0001d0180, 0xc000241000, 0x1000, 0x1000, 0x10ea, 0x10ea, 0x10)
    /usr/lib/go/src/net/fd_unix.go:202 +0x4f
net.(*conn).Read(0xc0001bc020, 0xc000241000, 0x1000, 0x1000, 0x0, 0x0, 0x0)
    /usr/lib/go/src/net/net.go:184 +0x68
bufio.(*Reader).Read(0xc0001b4180, 0xc0001be050, 0x1, 0x9, 0x6bed9d, 0xc0001d0280, 0xc0001b83a0)
    /usr/lib/go/src/bufio/bufio.go:226 +0x26a
io.ReadAtLeast(0xb29aa0, 0xc0001b4180, 0xc0001be050, 0x1, 0x9, 0x1, 0x6c60d0, 0xc0001d0280, 0x10)
    /usr/lib/go/src/io/io.go:310 +0x87
io.ReadFull(...)
    /usr/lib/go/src/io/io.go:329
encoding/gob.decodeUintReader(0xb29aa0, 0xc0001b4180, 0xc0001be050, 0x9, 0x9, 0x203000, 0x0, 0xc0002559c0, 0x203000)
    /usr/lib/go/src/encoding/gob/decode.go:120 +0x6f
encoding/gob.(*Decoder).recvMessage(0xc0001d0280, 0xc0002460d0)
    /usr/lib/go/src/encoding/gob/decoder.go:81 +0x57
encoding/gob.(*Decoder).decodeTypeSequence(0xc0001d0280, 0xc000255900, 0x40dd06)
    /usr/lib/go/src/encoding/gob/decoder.go:143 +0x10c
encoding/gob.(*Decoder).DecodeValue(0xc0001d0280, 0x946300, 0xc0001b87c0, 0x16, 0x0, 0x0)
    /usr/lib/go/src/encoding/gob/decoder.go:211 +0x10b
encoding/gob.(*Decoder).Decode(0xc0001d0280, 0x946300, 0xc0001b87c0, 0x40100, 0xc0000b33d8)
    /usr/lib/go/src/encoding/gob/decoder.go:188 +0x16d
net/rpc.(*gobServerCodec).ReadRequestHeader(0xc0001b63c0, 0xc0001b87c0, 0x941100, 0xc0001b87a0)
    /usr/lib/go/src/net/rpc/server.go:397 +0x45
net/rpc.(*Server).readRequestHeader(0xc0000b33b0, 0xb36fc0, 0xc0001b63c0, 0xc0001b87a0, 0x16, 0xc0002460d0, 0x7f42e014a901, 0x0, 0x0)
    /usr/lib/go/src/net/rpc/server.go:583 +0x67
net/rpc.(*Server).readRequest(0xc0000b33b0, 0xb36fc0, 0xc0001b63c0, 0xc0000b33b0, 0xc0001be048, 0xc0001be060, 0xc0001c8380, 0xc0001b8120, 0x940f40, 0xc0002460d0, ...)
    /usr/lib/go/src/net/rpc/server.go:543 +0x5a
net/rpc.(*Server).ServeCodec(0xc0000b33b0, 0xb36fc0, 0xc0001b63c0)
    /usr/lib/go/src/net/rpc/server.go:458 +0x97
net/rpc.(*Server).ServeConn(0xc0000b33b0, 0x7f42e010a008, 0xc0001bc020)
    /usr/lib/go/src/net/rpc/server.go:449 +0x158
net/rpc.ServeConn(...)
    /usr/lib/go/src/net/rpc/server.go:667
main.(*daemon).loop(0xc0001f8280)
    /home/username/.go/src/github.com/visualfc/gocode/server.go:111 +0x1ee
main.do_server(0x0)
    /home/username/.go/src/github.com/visualfc/gocode/server.go:49 +0x12f
main.main()
    /home/username/.go/src/github.com/visualfc/gocode/gocode.go:70 +0xbd

goroutine 20 [chan receive, 1 minutes]:
main.new_file_reader.func1(0xc0001c2048)
    /home/username/.go/src/github.com/visualfc/gocode/utils.go:246 +0x71
created by main.new_file_reader
    /home/username/.go/src/github.com/visualfc/gocode/utils.go:243 +0x87

goroutine 22 [chan send, 1 minutes]:
main.(*daemon).loop.func1(0xc0001f8280, 0xc000210060)
    /home/username/.go/src/github.com/visualfc/gocode/server.go:100 +0x45
created by main.(*daemon).loop
    /home/username/.go/src/github.com/visualfc/gocode/server.go:94 +0x7c

Gocode start working after trying compile it with go version go1.12.6 linux/amd64, fantastic!!!
It cannot works under go mod, how can I avoid this!
I also noticed that the forked gocode does not support `csv-with-package`, and so I changed this at the same time. I am increasingly unsure if this change should be merged, or if the version in MELPA should be repointed to the forked company-go.

Fixes #529
Per mdempsky/gocode#32, a `-source` flag needs to be passed to this forked version of `gocode` in order for it to find references in foreign packages.

Since `company-go` in MELPA comes from this repo, it puts us in a strange position since `nsf/gocode` doesn't supports this flag. With Go's own [Language Server Protocol server](https://github.com/golang/tools/tree/master/internal/lsp) in development, the need for the gocode tool may "soon" be obviated. Have you considered splitting out the emacs packages into their own repos?
See https://github.com/mdempsky/gocode/issues/53

I installed **go1.11** and then **go get nsf/gocode** when I got a new linux environment. After I **config go autocomplete in emacs**, gocode encounter a panic. My colleague also encounter the same problem in vscode. 
The message is **GOCODE PANIC: Please check your code by "go build"**

go **1.10** and **1.9** work well with gocode.
```
panic: unknown export format version -1 ("i\x00\xe9\x03\xc6\x06\x18$GOROOT\\src\\fmt\\print.go\x00\x05Write\x01b\x01n\x03err\x05Width\x03wid\x02ok\tPrecision\x04prec\x04Flag\x01c\x06Format\x01f\x05State\x06String\bGoString\x01w\x06Writer\x02io\x06format\x01a\aesc:0x1\aesc:0x9\x17$GOROOT\\src\\fmt\\scan.go\bReadRune\x01r\x04size")
1(runtime.call32): C:/Go191/src/runtime/asm_amd64.s:509
2(runtime.gopanic): C:/Go191/src/runtime/panic.go:491
3(main.(*gc_bin_parser).parse_export): C:/Go/bin/src/github.com/nsf/gocode/package_bin.go:126
4(main.(*package_file_cache).process_package_data): C:/Go/bin/src/github.com/nsf/gocode/package.go:132
5(main.(*package_file_cache).update_cache): C:/Go/bin/src/github.com/nsf/gocode/package.go:92
6(main.update_packages.func1): C:/Go/bin/src/github.com/nsf/gocode/autocompletecontext.go:455
7(runtime.goexit): C:/Go191/src/runtime/asm_amd64.s:2337
```

Not sure what needs clearing/removing.

Autocompletion for a reference to a function in a type struct doesn't work: Example Code

Example:

File:
```
package main

type Testo struct {
	S  string
	T1 func(args []string)
}

func main() {
        //# = Cursor 
	var s = Testo.# // option for S and T1
	s = &Testo {
		# //S is the only option for autocompletion
                // no suggestion for T1
	}
}
```
I hav to input command <C-x><C-o> let  autocomplete work. Is there a way that no need input command?