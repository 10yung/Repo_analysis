I'm trying to figure out how to use the browser-based aws-sdk.js with require.js when building a web app.

If I try to build a class and include aws-sdk in the require.js define, once I try to create an instance and reference the AWS class, it says it is undefined.

For example, I have a function that checks to see if the credentials are an instance of AWS.Credentials and if not, it tries to initialize it with an STS token it retrieves via Rest. The problem is, the code dies on the if(this.credentials instanceof AWS.Credentials) saying AWS is undefined. It even dies on my simple check of the needsRefresh.

This is what my define looks like - I'll include the 'needsRefresh' wrapper for an example of the sort of thing that is throwing the Undefined error:

```
define(['require','aws-sdk','jquery'],
    function (require, AWS, $) {

        // Aws helper class
        function AwsHelper() { };

        AwsHelper.prototype = {
            credentials: null,

            tokenNeedsRefresh: function () {
                //////////////////////////////////////////////////////////////////
                // errors out on the following line with:                       //
                //   TypeError: Cannot read property 'Credentials' of undefined //
                //////////////////////////////////////////////////////////////////
                if(this.credentials instanceof AWS.Credentials) {
                    return this.credentials.needsRefresh();
                } else return true;
            }
        };
        return AwsHelper;
    }
);
```

I also tried the following format at the top of the file:

```
define(function (require) {
        var AWS = require("aws-sdk"),
            $ = require("jquery");
        /* .. */
```

If I remove all onLoad references to the refresh code running, it will load and I can create an instance. But as soon as I call any function that references the AWS class, it dies.

Even if I find a work-around for the instanceof checks, I still have code that needs to create new instances of the class definitions being checked.  I have tried the instructions to manually wrap the code in "define(function(require, exports, module) { /* code */ });" and AWS seems to be an empty proto-object (with no defined methods or properties) when the function code is run.  I've tried using the Amazon tools to generate scaled down versions with similar results.
I even tried using r.js on the node.js code but it fails with a:

commonJs.convert: COULD NOT CONVERT: node_modules/aws-sdk/dist-tools/browser-builder.js, so skipping it. Error was: Error: Line 1: Unexpected token ILLEGAL"

I even tried loading it directly from amazon with: ['//sdk.amazonaws.com/js/aws-sdk-2.590.0.min.js']

How do I make sure that AWS class definition is still in global space once an instance is spawned?
Hello,
I have a problem with my JavaScript and RequireJS.
So I have a function in my .js called define(function(require) getWin(){
}));
When I want to use it in my HTML file, I get the error: getWin ist not defined.
`define('getWin', function (require) getWin(){
  var win;


  var jetzt = new Date();

  var tag   = jetzt.getDate()    < 10 ? "0"+jetzt.getDate()    : jetzt.getDate();

  var monat = jetzt.getMonth()+1 < 10 ? "0"+jetzt.getMonth()+1 : jetzt.getMonth()+1;

  var jahr  = jetzt.getFullYear();

  var datum = jahr+"-"+monat+"-"+tag;

  var number = document.getElementById("number").value;
  console.log(number);

  const express = require('express');
  const mysql = require('mysql');

  const db = mysql.createConnection({
    host : 'localhost',
    user : '',
    password : '',
    database : 'test'
  })

  db.connect((err) => {
    if(err){
      throw err;
    }
    console.log("connected");
  });

  let sql = "SELECT win FROM advent WHERE datum='"+datum+"' AND id="+number+";";

  let query = db.query(sql, (err, result) => {
    if(err) throw err;
    win = result;
    console.log(result);
  });

});`

AND this is my HTML file, where I want to use the Button to call my function.

`    <section class="section w3-white w3-hover-opacity">
      <div class="w3-container w3-center">
        <i class="fa fa-home"></i>
        <h2>So funktioniert es</h2>
        <p>Vorverkaufsstart des Adventskalenders 2019 ab dem 01.11.2019!</p>
        <form class="" action="" method="post">
          <input type="text" name="" value="" id="number">
          <button id="winner" type="button" name="button" onclick="getWin()">Suchen</button>
        </form>
      </div>
    </section>`

Hi,  this isnt a issue as such,  I'm looking for someone to help me out on little project and dont know where else to post this.  I have a little project that i've split bits of code into 30 odd seperate files and i'm trying to get them to all load properly, somethimes it seems to load propely ( about 75% of the time), other times it doesnt and i cant get my head around it, so looking for some help.

this is my main.js file bt its doesnt always load each file/ module in order, which it needs to do, to make the "whole" thing work:

require(["prebid", "gpt", "preconnect", "bidfilter", "timeoutmap", "floorpricemap", "siteconfig", "unrulyconfig", "amazonbidder", "bidcachemap", "assertiveconfig", "nativebidders", "outstreambidders", "bannerbidders", "adunitsconfig", "custombuckets", "prebidconfig", "assertivecustom", "assertive"], function (prebid, gpt, preconnect, bidfilter, timeoutmap, floorpricemap, siteconfig, unrulyconfig, amazonbidder, bidcachemap, assertiveconfig, nativebidders, outstreambidders, bannerbidders, adunitsconfig, custombuckets, prebidconfig, assertivecustom, assertive) {
});
I am a beginner, I have read the documentation, but still do not know when to use it, please give a demo, list the directory structure, thank you。
Hi,

I am using RequireJS in a project that requires repeatedly loading and unloading modules. I found 2 problems:

1.  Timeout cannot fire a second time.
2.  Some "anonymous" entries ("_@r??") were accumulated in the "registry" after failures.

I have tested using the given suite on up-to-date Edge, Chrome and Firefox.

Thanks!
>env: RequireJS 2.3.6

**[bug?] If main.js file is loaded by "data-main" attribute，the jquery‘s url is wrong**
1.html src
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>test require.js</title>
    <script data-main="assets/main" src="assets/requirejs/require.js"></script>
    <!-- <script src="assets/main.js"></script> -->
</head>
<body>
    <script>
        // require.config({
        //     paths : {
        //         "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]
        //     }
        // })

        require(["jquery"], function($){
            $(function(){
                alert("load finished");  
            })
        })
    </script>
</body>
</html>
```

2.main.js
```javascript
require.config({
    paths : {
        "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]
    }
})
```

**the html  after render (the url of jquery is wrong)**
```html
<html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>test require.js</title>
    <script data-main="assets/main" src="assets/requirejs/require.js"></script>
    <!-- <script src="assets/main.js"></script> -->
<script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="main" src="assets/main.js"></script><script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="jquery" src="assets/jquery.js"></script></head>
<body>
    <script>
        // require.config({
        //     paths : {
        //         "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]
        //     }
        // })

        require(["jquery"], function($){
            $(function(){
                alert("load finished");  
            })
        })
    </script>

</body></html>
```
-----------------
**If main.js file is loaded manually，jquery‘s url is ok**
```html
<html lang="en"><head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>test require.js</title>
    <script src="assets/requirejs/require.js"></script>
    <script src="assets/main.js"></script>
<script type="text/javascript" charset="utf-8" async="" data-requirecontext="_" data-requiremodule="jquery" src="http://libs.baidu.com/jquery/2.0.3/jquery.js"></script></head>
<body style="">
    <script>
        // require.config({
        //     paths : {
        //         "jquery" : ["http://libs.baidu.com/jquery/2.0.3/jquery"]
        //     }
        // })

        require(["jquery"], function($){
            $(function(){
                alert("load finished");  
            })
        })
    </script>

</body></html>
```
I can not use for requirejs module names like: module, require and exports.

But I can not find this warning in documentation. Only search helps: https://stackoverflow.com/questions/47641914/requirejs-define-function-is-not-returning-dependencies-correctly/47676664#47676664 .

Requirejs can not load module with a reserved name, but it is hardly to find warning about it.
I am developing a mobile app using backbone and required.js and after google chrome upgrading 76.0.3809.111, I have a lot of exceptions while initialize js files using required.js (version 2.3.3)

the below is an exception :

Uncaught Error: Script error for "file.js"
https://requirejs.org/docs/errors.html#scripterror
    at makeError (require.js:168)
    at HTMLScriptElement.onScriptError (require.js:1738)
https://github.com/requirejs/requirejs/issues/1785

Websites served over HTTPS will refuse to load HTTP urls by default.

While all browsers reject an attempt to require([ 'http://some/module' ]), the timing is different on IE.

IE throws an error when adding the node.src attribute
Other browsers error out when appending the node to the DOM.

In the Chrome/FF/Safari/etc... scenario, the error callback is triggered and the error is reported.
For IE, the script tags are never a part of the DOM and the callbacks for load or error are not invoked. The result is an unhandled exception coming from requirejs and the calling code is never notified of the failure.

### The Fix
Try/Catch around the action of adding the node.src, and notify the caller of the script error. 
Websites served over HTTPS will refuse to load HTTP urls by default. 

While all browsers reject an attempt to require([ 'http://some/module' ]), the timing is different on IE. 

IE throws an error when adding the `node.src` attribute
Other browsers error out when appending the node to the DOM. 

In the Chrome/FF/Safari/etc... scenario, the error callback is triggered and the error is reported. 
For IE, the script tags are never a part of the DOM and the callbacks for load or error are not invoked.  The result is an unhandled exception coming from requirejs and the calling code is never notified of the failure. 