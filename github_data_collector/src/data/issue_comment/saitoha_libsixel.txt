OS: `Slackware64-14.2`
libsixel: `1.8.6`

When trying to build the new `1.8.6` release in Slackware 14.2 the build fails, this did not occur with `1.8.5`.
```
make  all-recursive
make[1]: Entering directory '/tmp/SBo/libsixel-1.8.6'
Making all in include
make[2]: Entering directory '/tmp/SBo/libsixel-1.8.6/include'
make[2]: Nothing to be done for 'all'.
make[2]: Leaving directory '/tmp/SBo/libsixel-1.8.6/include'
Making all in src
make[2]: Entering directory '/tmp/SBo/libsixel-1.8.6/src'
Makefile:598: .deps/libsixel_la-allocator.Plo: No such file or directory
Makefile:599: .deps/libsixel_la-chunk.Plo: No such file or directory
Makefile:600: .deps/libsixel_la-decoder.Plo: No such file or directory
Makefile:601: .deps/libsixel_la-dither.Plo: No such file or directory
Makefile:602: .deps/libsixel_la-encoder.Plo: No such file or directory
Makefile:603: .deps/libsixel_la-frame.Plo: No such file or directory
Makefile:604: .deps/libsixel_la-fromgif.Plo: No such file or directory
Makefile:605: .deps/libsixel_la-frompnm.Plo: No such file or directory
Makefile:606: .deps/libsixel_la-fromsixel.Plo: No such file or directory
Makefile:607: .deps/libsixel_la-loader.Plo: No such file or directory
Makefile:608: .deps/libsixel_la-malloc_stub.Plo: No such file or directory
Makefile:609: .deps/libsixel_la-output.Plo: No such file or directory
Makefile:610: .deps/libsixel_la-pixelformat.Plo: No such file or directory
Makefile:611: .deps/libsixel_la-quant.Plo: No such file or directory
Makefile:612: .deps/libsixel_la-scale.Plo: No such file or directory
Makefile:613: .deps/libsixel_la-status.Plo: No such file or directory
Makefile:614: .deps/libsixel_la-stb_image_write.Plo: No such file or directory
Makefile:615: .deps/libsixel_la-tosixel.Plo: No such file or directory
Makefile:616: .deps/libsixel_la-tty.Plo: No such file or directory
Makefile:617: .deps/libsixel_la-writer.Plo: No such file or directory
Makefile:618: .deps/tests-tests.Po: No such file or directory
make[2]: *** No rule to make target '.deps/tests-tests.Po'.  Stop.
make[2]: Leaving directory '/tmp/SBo/libsixel-1.8.6/src'
Makefile:492: recipe for target 'all-recursive' failed
make[1]: *** [all-recursive] Error 1
make[1]: Leaving directory '/tmp/SBo/libsixel-1.8.6'
Makefile:399: recipe for target 'all' failed
make: *** [all] Error 2
```
Full build log - [libsixel.log](https://github.com/saitoha/libsixel/files/4061334/libsixel.log)

This might be the issue?
```
$ find libsixel-1.8.6/ -iname '*deps*'
libsixel-1.8.6/src/$(srcdir)/.deps
libsixel-1.8.6/converters/$(srcdir)/.deps
```
where `$(srcdir)` is not expanding.

add LICENSE files to dist archive.
If a PNG file is sixel-encoded with `img2sixel` using argument `-e` (monochrome) the first column of the output image is missing:
```
$ img2sixel -e image.png > image.sixel
```
(This also means that the actual width of the sixel image is therefore `image_width - 1`.)
Like I did for:
- True Color - https://github.com/termstandard/colors, [older gist](https://gist.github.com/XVilka/8346728)
- [BiDirectional text gist](https://gist.github.com/XVilka/a0e49e1c65370ba11c17)
- [Font shaping gist](https://gist.github.com/XVilka/070ed8b1c1186097cad65ef49220175a)

It will greatly help wider awareness and adoption among terminals and terminal programs.
So, [I asked the tmux people ](https://github.com/tmux/tmux/issues/1613) if they would be willing to add even a marginal amount of support for libsixel, and they pretty much dismissed it out of hand. So now I'm thinking about forking tmux to add SIXEL compatibility. Is there anyone here who could help with that?
Libquvi is a dependency if you want to stream video but there hasn't been any activity since 2013. This makes me want to believe that project is dead. I'm not sure what might replace it but surely there's something similar that's being maintained. I honestly don't know enough about this stuff to provide a good substitute for it but I know the only way for me to install libquvi is building from source and has the disclaimer of having bugs. I don't feel comfortable building a unstable release of a project that's no longer being supported. So if you were able to figure out an alternative to allow video streaming, I would at least be personally grateful. If preference can be made, I'd rather it be a package that can be installed via repo instead of building from source (and hunting down all the dependencies along with it).
I am using libsixel compiled from from git with xterm. That works fine but the -I option of img2sixel (so 15bit true color) is producing some corrupted images. I always assumed that xterm was the problem but then I noticed a similar issue when using sixel2png to decode the output of img2sixel 

Here is an example taken from https://upload.wikimedia.org/wikipedia/commons/9/93/CMYK_farbwuerfel.jpg 

![in](https://user-images.githubusercontent.com/14061306/30283485-8c23729a-9718-11e7-935d-20915155ceb5.jpg)

The command  is
`img2sixel -I IN.jpg | sixel2png > out.png `

![out](https://user-images.githubusercontent.com/14061306/30283502-961838e4-9718-11e7-97b6-bee303e4ce57.png)

The generated PNG is a valid image but the palette is corrupted. What I also noticed is that images with few colors are correctly rendered by the -I option. 

Here is the bash command I used to see the effect of changing the number of colors in the input image (using ImageMagick) and then display the effect of applying img2sixel -I | sixel2png

`while read -p "COLORS=" N ; do convert IN.jpg -colors "$N" A.png ; identify A.png ; img2sixel -I A.png | sixel2png > B.png  ; convert A.png B.png -append C.png ; display C.png  ; done`

Remark: The original convert command can be very slow when using more than 200 colors.

Using less than 64 colors should be mostly fine but here is the output obtained using 100 input colors:First the image produced why imagemagick for a palette of 100 and then the output of sixel2png  
![c](https://user-images.githubusercontent.com/14061306/30284875-88ca3f3a-971c-11e7-8550-dce6b4a91526.png)


When encoding a ARGB8888 image 2 times in sequence, then the output from the second call is wrong and differs from the first call.

I've observed, that sometimes the image data is corrupted after the first call as well, but I can't reproduce the effect.

Olaf

**Screenshot (both outputs):**
![screenshot](https://user-images.githubusercontent.com/10403187/27263496-73b1e610-546a-11e7-91b3-2240939aa814.png)


**Example Code**
```C
#include <stdlib.h>
#include <stdio.h>
#include <sixel.h>

int sixel_write(char *data, int size, void *priv) {
  return fwrite(data, 1, size, stdout);
}

int main(int argc, char **argv) {
  sixel_output_t *o_ctx;
  sixel_dither_t *d_ctx;
  unsigned char* data;
  int i;
  int w = 13;
  int h = 13;
  int bpp = 4;
  int format = SIXEL_PIXELFORMAT_ARGB8888;
  
  /* Create some arbitrary image. */
  data = calloc(1, bpp * w * h + 1);
  for (i = 0; i < bpp * w * h; i++) data[i] = 0x20 + (i % 0x40);

  /* Initalize output and dither context. */
  sixel_output_new(&o_ctx, &sixel_write, 0, 0);
  sixel_dither_new(&d_ctx, 100, 0);
  sixel_dither_initialize(d_ctx, data, w, h,
                          format, SIXEL_LARGE_AUTO, SIXEL_REP_AUTO, SIXEL_QUALITY_AUTO);

  /* The first call to sixel_encode is OK. */
  sixel_encode(data, w, h, 0, d_ctx, o_ctx);

  /* Output is different than in previous call. */
  /* With an additional sixel_dither_initialize both outputs are the same. */
  sixel_encode(data, w, h, 0, d_ctx, o_ctx);

  return 0;
}
```

I am stuck trying to figure out if there is a good way in the libsixel code to skip drawing sixels that contain the same pixels as the previously drawn frame. This would, in combination with ordered/positionally stable dithers which I have already implemented - probably result in size/bandwidth savings for some uses like qemu/sdl/vnc/video.

See http://pippin.gimp.org/a_dither/ for examples of similar size savings for GIF animations, and https://github.com/hodefoting/libsixel for a branch with a commit adding positionally stable dithers - and a commit starting to work on tracking frame deltas.

Maybe you'd like to add mintty to your supporting terminal list on the libsixel project page.
I've added a gnuplot screenshot to the mintty home page http://mintty.github.io/ and I'd like to mention some more examples of use cases, but I'm having some problems:
- The gnuplot command shown in the screenshot produces a different image on another machine; weird.
- img2sixel sometimes works (cygwin64 on one machine), sometimes it doesn't (cygwin32 on the same machine, cygwin64 on another machine), sometimes it crashes, e.g. with this image:
  ![linie](https://cloud.githubusercontent.com/assets/12740416/18412415/1d78e9d8-778e-11e6-83b9-d8094302781b.gif)
- FFmpeg-SIXEL does not build for me (after installing libsixel and the libquvi-devel and nasm packages); sometimes configure fails at pkg-config/quvi, sometimes make fails: Makefile:185: /tests/Makefile: No such file or directory
- I tried the libsixel examples/drawing program in xterm but it just shows a white panel; nothing happens when trying to interact (and yes, it's xterm compile-enabled with DEC locator mode, confirmed manually). If that worked, I would consider to add DEC locator mode to mintty for pixel-coordinate interaction.
- Couldn't find out how to build and test opengl...
- Trying bitbucket.org/arakiken/w3m/: configure: error: cannot guess build type; you must specify one
- The mandel5.c example program does not produce working sixel output.

Thanks for further info and help.
