https://github.com/Carthage/Carthage

It will help a lot
Hi,
just curious if you are working on making this compile with Xcode 9. Thanks!
There are two classes of problem with regards to resistance perimeters:

1. Velocity. Tossing velocity beyond the perimeter should be affected accordingly. Tossing within the perimeter should have no effect on the velocity until the object moves beyond the perimeter.
2. It should not be possible to move beyond the perimeter's maximum length.

### Velocity

If we drag beyond a resistance perimeter and release in a direction moving away from the resistance perimeter then we should reduce the velocity accordingly. The current behavior allows you to toss an object while extended beyond the resistance perimeter with full velocity, resulting in the view noticeably extending past the resistance perimeter.

One option: Minimize the finalVelocity if we're beyond the resistance perimeter. This isn't perfect and doesn't solve the case where we're within the perimeter and toss quickly towards the perimeter.

### Extending beyond the perimeter

We should never be able to move past the perimeter's maximum length. This is possible if we only apply resistance to the draggable part of a tossable interaction, for example.

One option: introduce an intermediary property in Tossable that we write both draggable and spring to, and then connect a rubber banded stream from that property to the output property. This may be the most promising solution.
It's currently a MotionObservable<Bool>. It may be easier to use if it's a reactive property internally. This may require exposing AggregateMotionState's state property.
This may require that our transition context subclass UIPercentDrivenInteractiveTransition.

We should validate the various `animateAlongsideTransition` APIs as part of this task.

Doing so will require building a transition that includes both traditional UIKit code and a customiz Material Motion transition.
We don't support applying operators to path-based animations driven by Core Animation.
If ArcMove is able to calculate its path on initialization then it should set this to the tween sub interaction's path value during initialization.
Some interactions connect properties to sub-interactions or other values, e.g. `ArcMove`'s: `runtime.connect(arcMove(from: from, to: to), to: tween.path)`. This only needs to be done once.

Closure of this task involves auditing our interactions for any `runtime.connect` invocations and ensuring that if they're connecting sub-interactions together that we're only doing so once.
We do not currently support Objective-C for Material Motion. We can provide certain levels of interop with the Swift library, though this will need to be done on a case by case basis.

Some easy wins:

- Supporting transitionController in Objective-C for customizing the transition that should be used. This would still require that transitions be written in Swift.
While implementing the `visualize` operator I encountered problems with some interactions behaving incorrectly when multiple subscriptions were made to the upstream.

The original implementation looked like so:

```swift
let visualizationSubscription = self.asStream().toString().dedupe().subscribeToValue { value in
  label.text = (prefix ?? "") + stringValue

  highlight.alpha = 1
  UIView.animate(withDuration: 0.3) {
    highlight.alpha = 0
  }
}

let subscription = self.asStream().subscribeAndForward(to: observer)

return {
  visualizationSubscription.unsubscribe()
  subscription.unsubscribe()
}
```

But this caused the contextual transition demo to behave incorrectly.