<!--
  - Thanks for submitting code to Blockly!  Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## The basics

<!-- TODO: Verify the following, checking each box with an 'x' between the brackets: [x] -->

- [x] I branched from develop
- [x] My pull request is against develop
- [x] My code follows the [style guide](https://developers.google.com/blockly/guides/modify/web/style-guide)

## The details
### Resolves

<!-- TODO: What Github issue does this resolve? Please include a link. -->

### Proposed Changes
Recompile typings in the release script. 
<!-- TODO: Describe what this Pull Request does.  Include screenshots if applicable. -->

### Reason for Changes

<!--TODO: Explain why these changes should be made.  Include screenshots if applicable. -->

### Test Coverage

<!-- TODO: Please show how you have added tests to cover your changes,
  -        or tell us how you tested it. For each systems you tested,
  -        uncomment the systems in the list below.
  -->

Tested on:
<!-- * Desktop Chrome -->
<!-- * Desktop Firefox -->
<!-- * Desktop Safari -->
<!-- * Desktop Opera -->
<!-- * Windows Internet Explorer 10 -->
<!-- * Windows Internet Explorer 11 -->
<!-- * Windows Edge -->

<!--
* Smartphone/Tablet/Chromebook (please complete the following information):
  * Device: [e.g. iPhone6]
  * OS: [e.g. iOS8.1]
  * Browser [e.g. stock browser, safari]
  * Version [e.g. 22]
-->

### Documentation

<!-- TODO: Does any documentation need to be created or updated because of this PR?
  -        If so please explain.
  -->

### Additional Information

<!-- Anything else we should know? -->

<!--
  - Thanks for submitting code to Blockly!  Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## The basics

<!-- TODO: Verify the following, checking each box with an 'x' between the brackets: [x] -->

- [x] I branched from develop
- [x] My pull request is against develop
- [x] My code follows the [style guide](https://developers.google.com/blockly/guides/modify/web/style-guide)

## The details
### Resolves
January 2020 Release
<!-- TODO: What Github issue does this resolve? Please include a link. -->

### Proposed Changes

<!-- TODO: Describe what this Pull Request does.  Include screenshots if applicable. -->

### Reason for Changes

<!--TODO: Explain why these changes should be made.  Include screenshots if applicable. -->

### Test Coverage

<!-- TODO: Please show how you have added tests to cover your changes,
  -        or tell us how you tested it. For each systems you tested,
  -        uncomment the systems in the list below.
  -->

Tested on:
<!-- * Desktop Chrome -->
<!-- * Desktop Firefox -->
<!-- * Desktop Safari -->
<!-- * Desktop Opera -->
<!-- * Windows Internet Explorer 10 -->
<!-- * Windows Internet Explorer 11 -->
<!-- * Windows Edge -->

<!--
* Smartphone/Tablet/Chromebook (please complete the following information):
  * Device: [e.g. iPhone6]
  * OS: [e.g. iOS8.1]
  * Browser [e.g. stock browser, safari]
  * Version [e.g. 22]
-->

### Documentation

<!-- TODO: Does any documentation need to be created or updated because of this PR?
  -        If so please explain.
  -->

### Additional Information

<!-- Anything else we should know? -->

Within the next few months accessing the User-Agent on Chrome in JavaScript will start logging warnings on the console.   And User-Agent strings will stop being updated.  Other browsers appear to be following suit.  This is being done to reduce fingerprinting.  We need to investigate the new landscape and adjust as needed.

https://groups.google.com/a/chromium.org/forum/m/#!msg/blink-dev/-2JIRNMWJ7s/yHe4tQNLCgAJ

Personal opinion: This will simply spawn a raft of libraries which check for known JavaScript-observable quirks of each browser.  Net result will be the same amount of fingerprinting, but now with more bugs.
<!--
  - Thanks for opening an issue for us!  Before you open an issue,
  - please check if a similar issue exists or has been closed before.
  -
  - If you're asking a question about how to use Blockly in your application,
  - please ask questions on the mailing list, instead of filing issues:
  -       https://groups.google.com/forum/#!forum/blockly
  -->

**Describe the bug**

Comments are missing scrollbars
<!-- A clear and concise description of what the bug is. -->

**To Reproduce**

<!-- Explain what someone needs to do in order to see what's described above -->
Steps to reproduce the behavior:
1. Create a comment on a block that results in needing to scolls
2. Observe no scrollbars

**Expected behavior**

Expected comments to have scrollbars
<!-- A clear and concise description of what you expected to happen. -->

**Screenshots**
![image](https://user-images.githubusercontent.com/6621618/72393601-2dfba300-36e8-11ea-8892-1107045545c4.png)

<!-- If applicable, add screenshots to help explain your problem. -->

**Desktop (please complete the following information):**
 - OS: Linux
 - Browser: Chrome

**Additional context**

Issue originally brought up in #39
<!-- Add any other context about the problem here. -->

<!--
  - Thanks for submitting code to Blockly!  Please fill out the following as part of
  - your pull request so we can review your code more easily.
  -->

## The basics

<!-- TODO: Verify the following, checking each box with an 'x' between the brackets: [x] -->

- [x] I branched from develop
- [x] My pull request is against develop
- [x] My code follows the [style guide](https://developers.google.com/blockly/guides/modify/web/style-guide)

## The details
### Proposed Changes
Added data property to variable model same way as is in the block.
<!-- TODO: Describe what this Pull Request does.  Include screenshots if applicable. -->

### Reason for Changes
May be used by 3rd parties for meta information. And I need it in my project :-)
<!--TODO: Explain why these changes should be made.  Include screenshots if applicable. -->

### Test Coverage
Tried to create variable, set data, export to xml, retrieve from xml and compare. All in /tests/playground.html
<!-- TODO: Please show how you have added tests to cover your changes,
  -        or tell us how you tested it. For each systems you tested,
  -        uncomment the systems in the list below.
  -->

Tested on:
<!-- * Desktop Chrome --> Chrome
<!-- * Desktop Firefox -->
<!-- * Desktop Safari -->
<!-- * Desktop Opera -->
<!-- * Windows Internet Explorer 10 -->
<!-- * Windows Internet Explorer 11 -->
<!-- * Windows Edge -->

<!--
* Smartphone/Tablet/Chromebook (please complete the following information):
  * Device: [e.g. iPhone6]
  * OS: [e.g. iOS8.1]
  * Browser [e.g. stock browser, safari]
  * Version [e.g. 22]
-->

### Documentation

<!-- TODO: Does any documentation need to be created or updated because of this PR?
  -        If so please explain.
  -->

### Additional Information
Had to change reading of variable name from XML, because textContent of parent element is changed by adding childNode with textContent.
For discussion is if it is not problematic about backward compatibility. If yes, better could be using attribute than element (but strange if anybody stores large data).
<!-- Anything else we should know? -->
Be careful, this is my first pull request in this project :-)

**Is your feature request related to a problem? Please describe.**
We have had a problem with the blocks in blockly games turning black a lot ( see #3397), so might be worth it to set up a test for this. However, we don't currently have any infrastructure for this setup. 
<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

**Describe the solution you'd like**

<!-- A clear and concise description of what you want to happen. -->

**Describe alternatives you've considered**

<!-- A clear and concise description of any alternative solutions or features you've considered. -->

**Additional context**

<!-- Add any other context or screenshots about the feature request here. -->

<!--
  - Thanks for opening an issue for us!  Before you open an issue,
  - please check if a similar issue exists or has been closed before.
  -
  - If you're asking a question about how to use Blockly in your application,
  - please ask questions on the mailing list, instead of filing issues:
  -       https://groups.google.com/forum/#!forum/blockly
  -->

**Describe the bug**
When I create Block with side effect of creating nonexisting variable, mirroring is not functioning properly due to bad order of Create and VarCreate events.

<!-- A clear and concise description of what the bug is. -->

**To Reproduce**
Steps to reproduce the behavior:
1. Define block with variable field and put it into toolbox
2. Move it to the workspace
3. Nonexisting variable is created as side effect of creating block
4. Fired events in this order: BLOCK_CREATE, VAR_CREATE (in Blockly.Flyout.prototype.createBlock)
5. Due to first event is created block  on mirrored environment - side effect is creating new nonexisting variable.
6. Due to second event is created new variable, but it was created in 5. => error

**Expected behavior**
In mirrored environment is variable created before the block, so it is existing before block creating and has not attempted to create is as side effect.

**Additional context**
If You swap:
`Blockly.Events.fire(new Blockly.Events.Create(newBlock));
`
and: 
```
for (var i = 0; i < newVariables.length; i++) {
  var thisVariable = newVariables[i];
  Blockly.Events.fire(new Blockly.Events.VarCreate(thisVariable));
}
```
All is ok.

Or do not disable events when creating block and do not test for newly created variables. Only set event group before creating block. It would be clearer in my opinion (but I don't know about another effects).
**Is your feature request related to a problem? Please describe.**

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

I've been thinking about how to make functionality of App Inventor more discoverable and one big challenge has always been helping people discover how the mutator works. I'd like to be able to encourage people to right-click anywhere in the editor and see a Help item to explain what something does. The problem is that icons such as the mutator icon pass context menu activation to the block, so the "Help" is the block help.

**Describe the solution you'd like**

<!-- A clear and concise description of what you want to happen. -->

I propose adding an iconMenu field for blocks that if set is called and passed the icon being clicked and a list of menu options (probably empty to start or with a Help option, but similar logic to generateContextMenu). This context menu is shown in place of the block's context menu.

**Describe alternatives you've considered**

<!-- A clear and concise description of any alternative solutions or features you've considered. -->
We have animated GIFs in the App Inventor documentation to show how mutators work, but even knowing that the blue icon is called a mutator makes it hard to discover. By making it so that people can right-click and request help gives us the opportunity to more directly link the explanation to the item. Since we also want to add more icons in the future for different features, my proposal includes the icon so that we can customize the options based on the icon type.

**Additional context**

<!-- Add any other context or screenshots about the feature request here. -->
Not at this time.
When a _lists_getIndex_ block has a list input that is not a variable, but a literal like _lists_create_with_, the generated Lua code looks like ```{'foo', 'bar'}[1]```. That's not valid Lua according to the interpreter I'm working with and two other online interpreters I tested (repl.it and tutorialspoint). Wrapping the literal in parentheses makes the interpreters happy: ```({'foo', 'bar'})[1]```.

Maybe _lists_create_with_ should always wrap the list literal in parens or _lists_getIndex_ should have different operator precedent rules?

![lua_list_example](https://user-images.githubusercontent.com/10736677/71988051-81c14480-322f-11ea-9b74-45650a692247.png)


<!--
  - Thanks for helping us improve our developer site documentation!
  - Use this template to describe issues with the content at
  - developers.google.com/blockly/guides
  -->

**Where**

<!-- A link to the page with the documentation you want us to update.
  -  More specific is better.  If no page exists, describe what the page
  -  should be, and where.
  -->
https://developers.google.com/blockly/guides/create-custom-blocks/block-paradigms#event_driven_program

**What**
<!-- What kind of content is it? 
  -  Check a box with an 'x' between the brackets: [x] 
  -->
  
- [x] Text
- [ ] Image or Gif
- [ ] Other

**Old content**

This is not the default look for Blockly, but it may be added by either setting `Blockly.BlockSvg.START_HAT = true;` or by adding a theme and setting the hat option on the block style. 
<!-- What the documentation currently says -->

**Suggested change**

We should instead suggest overriding the rendering constant `ADD_START_HATS`.

<!-- Your suggestion for improved documentation -->

**Additional context**

The constant `Blockly.BlockSvg.START_HAT` referenced in the documentation was moved to `Blockly.blockRendering.ConstantProvider.ADD_START_HATS` in change #3563.

<!-- Add any other context about the problem here. 
  -  If this is related to a specific pull request, link to it.
  -->
