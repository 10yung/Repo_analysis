
Standardize and clean up code.
Here's my updated list that fits the new xcode 10.1's Appicon list.
```
sizes_mapper=`cat << EOF
Icon-16         16
Icon-16@2x      32
Icon-32         32
Icon-32@2x      64
Icon-128        128
Icon-128@2x     256
Icon-256        256
Icon-256@2x     512
Icon-512        512
Icon-512@2x     1024
Icon-20      20
Icon-20@2x      40
Icon-20@3x      60
Icon-29      29
Icon-29@2x      58
Icon-29@3x      87
Icon-40      40
Icon-40@2x      80
Icon-50      50
Icon-50@2x      100
Icon-57      57
Icon-57@2x      114
Icon-40@3x      120
Icon-60@2x      120
Icon-60@3x      180
Icon-72      72
Icon-72@2x      144
Icon-76      76
Icon-76@2x      152
Icon-83.5@2x    167
Icon-1024       1024
Icon-24@2x      48
Icon-27.5@2x    55
Icon-86@2x      172
Icon-98@2x      196
Icon-108@2x     216
Icon-44@2x      88
Icon-50      50
Icon-50@2x      100
EOF`
```
Instead of using the full filepath so that the same icc file reference is used.
Adding a Contents.json file to the output directory. Based on #2 
Because alpha channel in icons are not allowed when upload to iTunes Connect.
I've made an adjustment to remove the dependency on ImageMagick and instead leverage `sips` (built into macOS since very early versions).
I found that (for some reason) even apparently perfectly-square source images (1536x1536) were being resized to strange sizes like 512x511. Adding the override ! value ensures that the aspect ratio is forced to be exactly square on output.
Xcode8 use new formats for the app icons.
This pull adds a working generator and include Content.json for automatic link between each generated png to its format resolving #11.
Added a 3rd parameter to specify the xcode version. 
This version is backward compatible, defaults to the old generator if the 3rd parameter is not set.

