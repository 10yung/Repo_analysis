This PR allows suture to be installed on Jruby platform else following error occurs

``` [ruby]
❯ ruby -v                                                                                                                                        ⏎ ◼
jruby 9.1.2.0 (2.3.0) 2016-05-26 7357c8f Java HotSpot(TM) 64-Bit Server VM 25.25-b02 on 1.8.0_25-b17 [darwin-x86_64]

❯ gem install suture                             ◼
Fetching: sqlite3-1.3.11.gem (100%)
Building native extensions.  This could take a while...
ERROR:  Error installing suture:
  ERROR: Failed to build gem native extension.

    current directory: /Users/zoras/.rvm/gems/jruby-9.1.2.0/gems/sqlite3-1.3.11/ext/sqlite3
/Users/zoras/.rvm/rubies/jruby-9.1.2.0/bin/jruby -r ./siteconf20160927-32871-pky2oo.rb extconf.rb
NotImplementedError: C extensions are not supported
    <top> at /Users/zoras/.rvm/rubies/jruby-9.1.2.0/lib/ruby/stdlib/mkmf.rb:1
  require at org/jruby/RubyKernel.java:944
   (root) at /Users/zoras/.rvm/rubies/jruby-9.1.2.0/lib/ruby/stdlib/rubygems/core_ext/kernel_require.rb:1
    <top> at /Users/zoras/.rvm/rubies/jruby-9.1.2.0/lib/ruby/stdlib/rubygems/core_ext/kernel_require.rb:55

extconf failed, exit code 1

Gem files will remain installed in /Users/zoras/.rvm/gems/jruby-9.1.2.0/gems/sqlite3-1.3.11 for inspection.
Results logged to /Users/zoras/.rvm/gems/jruby-9.1.2.0/extensions/universal-java-1.8/2.3.0/sqlite3-1.3.11/gem_make.out
```

Not sure if this is a bug, but it could be depending on suture's philosophy.  Should production legacy code break while I'm recording calls?

I had a separate sqlite client open to verify suture was recording (while the app was running), which doesn't seem unreasonable if I install this for a few days and want to see if it has captured "enough" information yet.

<details>
<summary>

 Code </summary>



``` ruby
    def current_category
      Suture.create(:current_category, {
                    old: method(:old_current_category),
                    args: [ @places[@current_player] ]
      })
    end

    def old_current_category(place)
      return 'Pop' if place == 0
      return 'Pop' if place == 4
      return 'Pop' if place == 8
      return 'Science' if place == 1
      return 'Science' if place == 5
      return 'Science' if place == 9
      return 'Sports' if place == 2
      return 'Sports' if place == 6
      return 'Sports' if place == 10
      return 'Rock'
    end
```

</details>
<details>
<summary>

 stack trace </summary>



```
/Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/statement.rb:108:in `step': database is locked (SQLite3::BusyException)
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/statement.rb:108:in `block in each'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/statement.rb:107:in `loop'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/statement.rb:107:in `each'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/database.rb:158:in `to_a'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/database.rb:158:in `block in execute'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/database.rb:95:in `prepare'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/sqlite3-1.3.11/lib/sqlite3/database.rb:134:in `execute'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/wrap/sqlite.rb:17:in `block in init'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/wrap/sqlite.rb:11:in `tap'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/wrap/sqlite.rb:11:in `init'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/adapter/dictaphone.rb:13:in `initialize'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/surgeon/observer.rb:7:in `new'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/surgeon/observer.rb:7:in `operate'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/create/performs_surgery.rb:4:in `perform'
    from /Users/stevejackson/.rvm/gems/ruby-1.9.3-p551@trivia/gems/suture-1.1.1/lib/suture/create.rb:10:in `create'
    from /Users/stevejackson/projects/trivia/ruby/lib/ugly_trivia/game.rb:91:in `current_category'
    from /Users/stevejackson/projects/trivia/ruby/lib/ugly_trivia/game.rb:76:in `roll'
    from bin/trivia:18:in `<main>'
```

</details>

Show a rails example that has a production postgres dump, sets up a one-off minitest rake task, can exploratory test the dump to generate a suture DB, and then run the verifications in a local test

Empahasize that you don't have to commit your production database--you only need it long enough to get and verify each path--that this stuff should be transient

It'll slow travis way down to keep it in the main build -- possible to make a secondary build for them?

An absolutely minimal little project that incorporates Suture and shows its API configuration off at multiple lifecycle stages (how to do that at once is unclear to me right now)

Expand the safe test we currently have for gilded rose into a multi-step walkthrough of using Suture against a pure function.

It'd be neat to identify a method you associate with a side effect (like an `http.post`) and then wrap it. Still calling through but warning the user?

As for default registrations, I suspect vcr or webmock might have some prior art on this from an HTTP perspective? Would be good to have an API that could handle database/socket connections as well. 
