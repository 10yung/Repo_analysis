
Closes #424 .

r? @therealprof 

Speed tests are needed
r? @therealprof 

cc @TeXitoi

I don't see sense to built this code in each file that `svd2rust` generates.

I propose to move it in new crate with will be dependency for `pac`s.

It should have short name. Maybe (`pa` or `ra` as abbreviation of `Peripheral Access` an `Register Access`).

I see only advantages, no disadvantages:
- we can simplify `svd2rust` code, remove some tricks in `stm32-rs`
- we can use `Cargo.toml` for optionally enabling features like atomic operations (#407)
- use "semver" to control that crates have identical API
- avoid potential name conflicts when reexport generic.rs
Part of https://github.com/rust-embedded/wg/issues/383

Blockers:

* [ ] Add your blocking issues here
What are you think about integrate `form` functionality in `svd2rust` (optional)?

When this option is enabled we can do not merge mod TokenStreams in one (and then split with `form`) and write them in different files directly. I think this can give us significant speed-up in this case.

@therealprof 
From https://stm32.agg.io/rs/
Typically, when setting or clearing bits of a register, RMW in the form of `reg.modify(|r, w| ...)` is needed, which can be interrupted. On the MSP430 architecture however there are instructions such as `bis` and `xor` that can modify specific bits of a memory location atomically. This change adds APIs to the register proxies to take advantage of those instructions. I also updated the MSP430 regression test cases, though they're still broken because MSP430 doesn't compile on stable.

As discussed on matrix, we don't want to merge this until after the MSP430 improvement patch goes in, so I'm uploading the PR for feedback.
The implementation for interrupts generates a macro `interrupt!()` that takes the name of an interrupt, a closure, and optionally a struct of locals.

There are a few things that are unclear from the generated documentation:

1. Does the name of the ISR really matter?  This seems like an ARM-ism.
2. How does this handler actually get called?  The `riscv-rt` core calls a function called `trap_handler`, which gets set by default to `default_trap_handler()` which is a no-op.  Should the crate generated by `svd2rust` generate the `trap_handler()` to call the appropriate ISR, or should the `-rt` crate do so?
As `From<enumVariant> for u8` is implemented in https://github.com/rust-embedded/svd2rust/pull/374.

What do you think about implementing `TryFrom<u8> for enumVariant`?

It could look something like this, in the generated code.

https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=b703f510723d792edcd2776942cc02c7