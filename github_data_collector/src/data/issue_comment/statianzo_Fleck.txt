### 公司的内网限制的问题，只允许开放80端口，而WS使用的是8181端口，所以建立不了WS连接；我想WS和IIS共用一个80端口，可以么？有什么可用的解决方案么？
When an error occurs from the client (as "The handshake failed due to an unexpected packet format" ), the server socket closes, although this is not a listener's problem.
It would be good to log the client IP, when accept error.
I just observed a case where the client of my websocket server disconnected, and this resulted in:
* the OnError event being called with text "Error while reading" and an IOException (with SocketException inner exception)
* followed by a Log Level.Debug "Error while reading"
* and I was never called on OnClose (even though I have an OnClose handler)

Subsequent tries to write a message to the websocket client resulted of course in the warning "Data sent while closing or after close. Ignoring."

As far as I can see in ILSpy, I would have expected Fleck to call Close(1006) and at some point CloseSocket calling my OnClose handler, but it obviously didn't happen...

Note: I'm using Fleck 1.1.0 and my OnError handler only logs the issue and does not try to close the socket.

```
17:59:29.589|ERROR 28|WebSocket| Error while reading
System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host
   at System.Net.Sockets.Socket.EndReceive(IAsyncResult asyncResult)
   at System.Net.Sockets.NetworkStream.EndRead(IAsyncResult asyncResult)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.EndRead(IAsyncResult asyncResult)
   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)
17:59:29.589|DEBUG 28|WebSocket| Error while reading
System.IO.IOException: Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host. ---> System.Net.Sockets.SocketException: An existing connection was forcibly closed by the remote host
   at System.Net.Sockets.Socket.EndReceive(IAsyncResult asyncResult)
   at System.Net.Sockets.NetworkStream.EndRead(IAsyncResult asyncResult)
   --- End of inner exception stack trace ---
   at System.Net.Sockets.NetworkStream.EndRead(IAsyncResult asyncResult)
   at System.Threading.Tasks.TaskFactory`1.FromAsyncCoreLogic(IAsyncResult iar, Func`2 endFunction, Action`1 endAction, Task`1 promise, Boolean requiresSynchronization)
17:59:31.074|DEBUG 42|WebSocket| Pushing JSON
17:59:31.558|WARN  42|WebSocket| Data sent while closing or after close. Ignoring.

```
Server will check before binding if the port is available to use.
I want to run multiple process of the websocket server but on different ports when.
But before that I started the 2 process of the server and they started on the same port. 
How is it possible that two process listen on same TCP port.
Shouldn't it throw address already in use error?
Hello,

I am using ASP.NET MVC 5 and have successfully tested Fleck on my local machine.  I deployed this application to an app service on Azure and I can't make a web socket connection.  Here is what I have on the Application_Start() : 
```

void Application_Start(object sender, EventArgs e)
        {
            // Code that runs on application startup
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);

            // OPEN A WEBSOCKET CONNECTION.
            FleckLog.Level = LogLevel.Debug;
            var allSockets = new Dictionary<string, IWebSocketConnection>();
            var server = new WebSocketServer("ws://0.0.0.0:8080");
            server.Start(socket =>
            {
                socket.OnOpen = () =>
                {
                    //Console.WriteLine("Open!");
                    var guid = socket.ConnectionInfo.Path.Replace("/", "");
                    allSockets.Add(guid, socket);
                };
                socket.OnClose = () =>
                {
                    //Console.WriteLine("Close!");
                    var guid = socket.ConnectionInfo.Path.Replace("/", "");
                    allSockets.Remove(guid);
                };
                socket.OnMessage = message =>
                {
                    //Console.WriteLine(message);
                    allSockets.Values.ToList().ForEach(s => s.Send("Echo: Sending back the same message: " + message));
                };

                socket.OnBinary = (bytes) =>
                {
                    //Console.WriteLine("received binary");
                };
            });        
        }
```

On the client side, here is what I have:
```
<script type="text/javascript">
        var ws = null;
        function createConnection() {
            ws = new WebSocket("ws://my-test-app.azurewebsites.net:8080");
            ws.binaryType = "blob";
            ws.onopen = function () {
                alert("About to send data");
                ws.send("Hello World"); // I WANT TO SEND THIS MESSAGE TO THE SERVER!!!!!!!!
                alert("Message sent!");
            };

            ws.onmessage = function (evt) {
                alert("About to receive data");
                var received_msg = evt.data;
                alert("Message received = "+received_msg);
            };
            ws.onclose = function () {
                // websocket is closed.
                alert("Connection is closed...");
            };
        };

        function sendMessage() {
            var txtBox = document.getElementById('messageTxt');
            var txtBox2 = document.getElementById('messageTxt2');

            const arr = [txtBox.value, txtBox2.value, 3, 5];

            //const array = new Float32Array(5);

            //for (var i = 0; i < array.length; ++i) {
            //    array[i] = i / 2;
            //}
            //console.log(array);
            ws.send(arr);
        }
    </script>
```

When trying to connect, I get the following error:
WebSocket connection to 'ws://my-test-app.azurewebsites.net:8080/' failed: Error in connection establishment: net::ERR_CONNECTION_TIMED_OUT

Any suggestions will be highly appreciated.

Thank you.
### Suggestion: WebSocket Close Code / Close Reason

#### Problem

The [IWebSocketConnection](https://github.com/statianzo/Fleck/blob/master/src/Fleck/Interfaces/IWebSocketConnection.cs) interface defines the following method for closing the WebSocket connection:
https://github.com/statianzo/Fleck/blob/9683310579a5632aa3f8d3c9e0023674389b570d/src/Fleck/Interfaces/IWebSocketConnection.cs#L19

As specified in the following RFC Specifications, it is possible to specify a close and optionally a message (for debugging purposes - binary or text), but the interface does not provide a method to specify the close code (the implementation [WebSocketConnection](https://github.com/statianzo/Fleck/blob/master/src/Fleck/WebSocketConnection.cs) does):

- [Hybi-07, Section 4.5.1](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-07#section-4.5.1)
- [Hybi-10, Section 4.5.1](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10#section-4.5.1)
- [Hybi-13, Section 5.5.1](https://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-13#section-5.5.1)

https://github.com/statianzo/Fleck/blob/9683310579a5632aa3f8d3c9e0023674389b570d/src/Fleck/WebSocketConnection.cs#L106-L128

#### Suggestion

My suggestion is to add the method overload ```void Close(WebSocketStatusCodes code, string message = null);``` to the [IWebSocketConnection](https://github.com/statianzo/Fleck/blob/master/src/Fleck/Interfaces/IWebSocketConnection.cs)  interface and implement it in [WebSocketConnection](https://github.com/statianzo/Fleck/blob/master/src/Fleck/WebSocketConnection.cs):

#### Example usage
```csharp
Close(WebSocketStatusCodes.MessageTooBig, "The message exceeded the maximum accepted payload size.");
Close((WebSocketStatusCodes)3005, "The session is no longer valid.");
```

Thanks in advance.
The Fleck server seems to have selected "SslProtocols.Tls" as the default value for "SslProtocols".

https://github.com/statianzo/Fleck/blob/2f5365ed229030d0c62b08dd511b9e7da3eb68c3/src/Fleck/WebSocketServer.cs#L95-L99

I think that if "EnabledSslProtocols" equals "SslProtocols.None", "SslProtocols.None" should be set as it is.
If you select SslProtocols.None, the best security protocol and version for your OS will be selected.

Please refer to the following document.
https://docs.microsoft.com/en-us/dotnet/framework/network-programming/tls

Chrome, Edge, IE, Firefox, and Safari to disable TLS 1.0 and TLS 1.1 in 2020.
I think it is better to choose "SslProtocols.None".

hello!
here is my web client log:
2019-08-18 14:50:07.641 <--- {
    "type":"goodsOutComplete",
    "info":{
        "slotID": "2",
        "serialNumber": "289"
    }
} 
2019-08-18 14:50:07.657 <--- {
    "type":"goodsOutComplete",
    "info":{
        "slotID": "2",
        "serialNumber": "289"
    }
}

in c# side, we send the message once, but Fleck send this message twice to my html&js client

I have my own web socket server running on localhost port 9123. 
`System.Net.Sockets.SocketException: 'An attempt was made to access a socket in a way forbidden by its access permissions'`

**Code snippet:**
```
var server = new WebSocketServer("ws://0.0.0.0:9123");

            server.Start(socket =>
            {
                socket.OnOpen = () => Console.WriteLine("Open!");
                socket.OnClose = () => Console.WriteLine("Close!");
                socket.OnMessage = message => socket.Send(message);
            });

```