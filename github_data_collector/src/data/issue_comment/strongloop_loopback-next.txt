<!-- ðŸš¨ STOP ðŸš¨ STOP ðŸš¨ STOP ðŸš¨

HELP US HELP YOU, PLEASE
- Do a quick search to avoid duplicate issues
- Provide as much information as possible (reproduction sandbox, use case for features, etc.)
- Consider using a more suitable venue for questions such as Stack Overflow, Gitter, etc.

Please fill in the *entire* template below.

-->

## Steps to reproduce

1. Go to <https://loopback.io/api-explorer/>
2. Observe the mixed-content error

![image](https://user-images.githubusercontent.com/25147899/72681327-60007100-3afd-11ea-9741-c350c9bcb902.png)


## Current Behavior

A mixed-content error occurs.

## Expected Behavior

The default Swagger JSON URL should be using HTTPS as per-[Swagger API Validator](http://petstore.swagger.io/).

## Link to reproduction sandbox

N/A

## Additional information

The external LoopBack API Validator is referenced under the [Configure the API Explorer](https://loopback.io/doc/en/lb4/Server.html#configure-the-api-explorer) docs.

## Related Issues

N/A

_See [Reporting Issues](http://loopback.io/doc/en/contrib/Reporting-issues.html) for more tips on writing good issues_

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@hapi/shot](https://togithub.com/hapijs/shot) | dependencies | major | [`^4.1.2` -> `^5.0.0`](https://renovatebot.com/diffs/npm/@hapi%2fshot/4.1.2/5.0.0) |

---

### Release Notes

<details>
<summary>hapijs/shot</summary>

### [`v5.0.0`](https://togithub.com/hapijs/shot/compare/v4.1.2...v5.0.0)

[Compare Source](https://togithub.com/hapijs/shot/compare/v4.1.2...v5.0.0)

</details>

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:no_bell: **Ignore**: Close this PR and you won't be reminded about this update again.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#strongloop/loopback-next).
## Suggestion

Currently, LoopBack 4 (lb4) only supports exploded and JSON-encoded `deepObject` query strings. However, this means that a typical HTML `<form>` or existing software cannot directly interact with the API without modifications to how it constructs the URL.

Hence, lb4 should support ampersand-delimited, exploded `form` query strings as it is a more commonly-used encoding.

Whilst this encoding prevents nested objects, it's simplicity can allow for easier adoption of lb4.

## Use Cases

* Easier adoption of lb4
* More transparent replacement of existing API infrastructures with lb4
* Simpler API client/consumer design
* Easier adoption of lb4 for new users

## Examples

As per-[OpenAPI 3.0.1 - Style Values](https://github.com/OAI/OpenAPI-Specification/blob/2d6a1809f3ee5c765a79db0ebc14bd2a03119c77/versions/3.0.1.md#style-values), an API client and server can use a more commonly-used query string format for HTML `<forms>` and other software.

For example, a pizza ordering form using the `<form>` HTML tag with the following fields:

* Type (select)
* Toppings (radio, multiple)
* reCaptcha session (string)

This can result in the following query string:

`?type=cheesy&toppings=pepperoni&toppings=pineapple&recaptcha=[removed for brevity]`

## Acceptance criteria

TBD - will be filled by the team.

This PR contains the following updates:

| Package | Type | Update | Change |
|---|---|---|---|
| [@microsoft/api-documenter](https://api-extractor.com/) ([source](https://togithub.com/microsoft/rushstack)) | dependencies | patch | [`^7.7.7` -> `^7.7.8`](https://renovatebot.com/diffs/npm/@microsoft%2fapi-documenter/7.7.7/7.7.8) |
| [@microsoft/api-extractor](https://api-extractor.com) ([source](https://togithub.com/microsoft/rushstack)) | dependencies | patch | [`^7.7.4` -> `^7.7.5`](https://renovatebot.com/diffs/npm/@microsoft%2fapi-extractor/7.7.4/7.7.5) |

---

### Renovate configuration

:date: **Schedule**: At any time (no schedule defined).

:vertical_traffic_light: **Automerge**: Disabled by config. Please merge this manually once you are satisfied.

:recycle: **Rebasing**: Whenever PR becomes conflicted, or if you modify the PR title to begin with "`rebase!`".

:ghost: **Immortal**: This PR will be recreated if closed unmerged. Get [config help](https://togithub.com/renovatebot/config-help/issues) if that's undesired.

---

 - [ ] <!-- rebase-check -->If you want to rebase/retry this PR, check this box

---

This PR has been generated by [WhiteSource Renovate](https://renovate.whitesourcesoftware.com). View repository job log [here](https://app.renovatebot.com/dashboard#strongloop/loopback-next).
Currently, if a user of LoopBack 4 (lb4) wants to find documentation of the usable `filters` for querying the repository, they will need to view [LoopBack 3's (lb3) documentation](https://loopback.io/doc/en/lb3/Querying-data.html). This may not be ideal as the page isn't easily accessible via the lb4 sidebar.

## Suggestion

Create a `Querying Data` or `Filters` page for lb4, replacing content and links to point to the lb4 docs where appropriate.

## Use Cases

1. Reduce jump between documentations
2. Assurance that this documentation also applies lb4
3. Easier for new users to start using lb4

## Examples

TBD; It could closely follow the existing lb3 docs.

## Acceptance criteria

TBD - will be filled by the team.

## Suggestion

This is more of a discussion than a direct suggestion.

I want to talk about the possibility of an enhancement of the injection system that makes it easier to allow a new child context to be created specific to a particular injection point, using a callback to modify the injection-specific context.

## Use Cases

The primary use case for this is to override and/or extend configurations for the services that the injecting service would consume. For example, if service `A` consumes service `B`, and `B` consumes service `C`, and service `C` can be configured by service `C.$config`, then `A` should be able to bind a new `C.$config` that will only apply within the context of `A`'s injection of `B` (and thus `B`'s injection of C) and at nowhere else in the service stack. So the version of `C` that exists within `A`'s injection of `B` would get this new config, but no other version of `C` would.

(NOTE: This would imply that services `A`, `B`, and `C` all need to be bound in the `CONTEXT` scope.)

It would also be possible to swap out services with dummy versions of those services in order to disable them. For example, if `C` above were a security check function which returns a boolean to indicate access rights, `C` itself could be re-bound within `A`'s injection of `B` to a function that always returns true, thus effectively bypassing any security checks performed by `B` in this localized context.

It's actually technically possible to do what I'm describing already using the `resolve` parameter of the `@inject` decorator. This proposal is more about cleaning up, standardizing, and documenting the technique somehow. (It's also possible that what I'm describing is already covered in documentation somewhere and I just missed it; if so, please feel free to redirect this thread there and close the thread.)

## Examples

Here is how it might be done if we were to limit the new API to only using it for simple configuration overrides:

```typescript
class A {
  constructor(
    @injectWithConfig(KEY_B, {
        [KEY_C]: {
            disableSecurityChecks: true,
        }
    }) private b: B
  ) { }
}
```

This would be equivalent to the currently-possible code below:

```typescript
class A {
  constructor(
    @inject('', undefined, async (ctx) => {
      const childCtx = new Context(ctx);
      childCtx.configure(KEY_C).to({
        disableSecurityChecks: true,
      });
      return await childCtx.get(KEY_B);
    }) private b: B
  ) { }
}
```

## Acceptance criteria

TBD - will be filled by the team.

Spin-off from #4377 

1. Add `ContextEventListener` interface
2. Tidy up parent context event handling
3. Set `maxListeners` to `Infinity` by default

## Checklist

ðŸ‘‰ [Read and sign the CLA (Contributor License Agreement)](https://cla.strongloop.com/agreements/strongloop/loopback-next) ðŸ‘ˆ

- [x] `npm test` passes on your machine
- [x] New tests added or existing tests modified to cover all changes
- [x] Code conforms with the [style guide](http://loopback.io/doc/en/contrib/style-guide.html)
- [x] API Documentation in code was updated
- [ ] Documentation in [/docs/site](../tree/master/docs/site) was updated
- [ ] Affected artifact templates in `packages/cli` were updated
- [ ] Affected example projects in `examples/*` were updated

ðŸ‘‰ [Check out how to submit a PR](https://loopback.io/doc/en/lb4/submitting_a_pr.html) ðŸ‘ˆ

<!-- ðŸš¨ STOP ðŸš¨ STOP ðŸš¨ STOP ðŸš¨

HELP US HELP YOU, PLEASE
- Do a quick search to avoid duplicate issues
- Provide as much information as possible (reproduction sandbox, use case for features, etc.)
- Consider using a more suitable venue for questions such as Stack Overflow, Gitter, etc.

Please fill in the *entire* template below.

-->

In https://loopback.io/doc/en/lb4/Interceptors.html#example-interceptors 
there are different examples of interceptors.

To understand the example implementations of these interceptors, let's
also show an example implementation of `what` they are intercepting.

For example:

```
/**
 * A binding provider class to produce an interceptor that validates the
 * `name` argument
 */
class NameValidator implements Provider<Interceptor> {
  constructor(@inject('valid-names') private validNames: string[]) {}

  value() {
    return this.intercept.bind(this);
  }

  async intercept<T>(
    invocationCtx: InvocationContext,
    next: () => ValueOrPromise<T>,
  ) {
    const name = invocationCtx.args[0];
    if (!this.validNames.includes(name)) {
      throw new Error(
        `Name '${name}' is not on the list of '${this.validNames}`,
      );
    }
    return next();
  }
}
```
It is not clear what this interceptor is attached to.  Is it a function, a class, a request?

How do we know that the `name` we need to validate is in args[0] of the invocation context?

Providing more implementation details would shed some light on how to use them.

<!--
Copy+paste the output of these two commands:
  node -e 'console.log(process.platform, process.arch, process.versions.node)'
  npm ls --prod --depth 0 | grep loopback
-->


<!-- Did you find other bugs that looked similar? -->

_See [Reporting Issues](http://loopback.io/doc/en/contrib/Reporting-issues.html) for more tips on writing good issues_

<!-- ðŸš¨ STOP ðŸš¨ STOP ðŸš¨ STOP ðŸš¨

HELP US HELP YOU, PLEASE
- Do a quick search to avoid duplicate issues
- Provide as much information as possible (reproduction sandbox, use case for features, etc.)
- Consider using a more suitable venue for questions such as Stack Overflow, Gitter, etc.

Please fill in the *entire* template below.

-->

## Steps to reproduce

1. Go to https://github.com/strongloop-community/loopback-connector-redis `CONTRIBUTING.md`
2. Click the CLA link

## Current Behavior

The CLA link points to an non-existent web page:

![image](https://user-images.githubusercontent.com/25147899/70860941-882b0c00-1f62-11ea-996a-d78a8363dc40.png)

## Expected Behavior

The CLA link should points to a valid web page.

## Link to reproduction sandbox

<!-- See https://loopback.io/doc/en/contrib/Reporting-issues.html#loopback-4x-bugs  -->
N/A

## Additional information

<!--
Copy+paste the output of these two commands:
  node -e 'console.log(process.platform, process.arch, process.versions.node)'
  npm ls --prod --depth 0 | grep loopback
-->
N/A

## Related Issues

strongloop-community/loopback-connector-redis/issues/59

_See [Reporting Issues](http://loopback.io/doc/en/contrib/Reporting-issues.html) for more tips on writing good issues_

See also: #4435, #4299, #4354

This PR adds documentation on the common limitations of `inclusionResolver()` and its related issues/PRs.

This is to reduce the difficulty of finding information on these kinds of limitations; of which some may assume are standard features of LoopBack 4.

Signed-off-by: Rifa Achrinza <25147899+achrinza@users.noreply.github.com>

<!--
Please provide a high-level description of the changes made by your pull request.

Include references to all related GitHub issues and other pull requests, for example:

Fixes #123
Implements #254
See also #23
-->

## Checklist

ðŸ‘‰ [Read and sign the CLA (Contributor License Agreement)](https://cla.strongloop.com/agreements/strongloop/loopback-next) ðŸ‘ˆ

- [x] `npm test` passes on your machine
- [x] Documentation in [/docs/site](../tree/master/docs/site) was updated

ðŸ‘‰ [Check out how to submit a PR](https://loopback.io/doc/en/lb4/submitting_a_pr.html) ðŸ‘ˆ
