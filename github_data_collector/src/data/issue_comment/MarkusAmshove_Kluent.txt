**Description**
This PR adds the verification mode `times()` for mock verification described in this issue https://github.com/MarkusAmshove/Kluent/issues/49:
`Verify times 2 on mock that mock.getPerson(1) was called`

, we can also add a wide scope verification mode:
`Verify mode times(2) on mock that mock.getPerson(1) was called`

P.s: I know it doesn't have the best syntax but performance-wise it's the best approach, alternatively we can try to curry the `verify` method but it creates a lot of overhead.

**Checklist**
<!--- We'd like to thank you for your help, appreciate them and give you credit for it. Please check the checkboxes below as you complete them -->
- [x] I've added my name to the `AUTHORS` file, if it wasn't already present.


Hi, 

Currently we have comparion related assertions (such as `shouldBeLessThan`) for numbers only.

It would be nice to have it for all comparable type:

```kotlin
fun <T : Comparable<T>> T.shouldBeLessThan(other: T) = ...
```
I updated mockitokotlin2 to 2.2.0 and after that we saw unit tests failing with 

`java.lang.NoSuchMethodError: com.nhaarman.mockitokotlin2.MockingKt.withSettings([Lkotlin/reflect/KClass;Ljava/lang/String;Ljava/lang/Object;Lorg/mockito/stubbing/Answer;ZLorg/mockito/mock/SerializableMode;Z[Lorg/mockito/listeners/InvocationListener;ZLcom/nhaarman/mockitokotlin2/UseConstructor;Ljava/lang/Object;)Lorg/mockito/MockSettings;`

This only happened in cases where autocomplete mixed up the mock functions and we where using `org.amshove.kluent.mock` once we switched to `com.nhaarman.mockitokotlin2.mock` the tests go through again. 

There is also a ticket inside the mockitokotlin [repository](https://github.com/nhaarman/mockito-kotlin/issues/364) about this.
Hi.

I think it is reasonable to say that `x.shouldBeNear(x, delta)` should always pass. 

I think for any value of `x` it is correct to say `x` is near `x`

If you agree with this statement, then we have to fix the current implementation which fails in the following case:

```kotlin
val delta = 1.0
val x = Double.NaN
x.shouldBeNear(x, delta) // Throws an assertion error, because `NaN` is not between `NaN` and `NaN`
```
Hi Markus!

I'm trying to do this:

```kotlin
    @Test
    fun `assert throws exceptions`() {
        invoking { factory.create("") } `should throw` IllegalArgumentException::class
    }
```

But have a compile error:

```
org/junit/ComparisonFailure
java.lang.NoClassDefFoundError: org/junit/ComparisonFailure
	at org.amshove.kluent.ExceptionsKt.shouldThrow(Exceptions.kt:14)
	at org.amshove.kluent.ExceptionsBacktickKt.should throw(ExceptionsBacktick.kt:5)
        ...
```

Do you have any clues?
## Steps to reproduce

1. `./gradlew clean`
1. `./gradlew test`

## Issue Description
When running the above commands, the output shows warnings

```
> Task :kluent-common:compileTestKotlinCommon
w: Classpath entry points to a non-existent location: ~/projects/personal/Kluent/common/build/classes/java/main
w: Classpath entry points to a non-existent location: ~/projects/personal/Kluent/common/build/resources/main
```
Hello, I just wanna ask something. Is it possible to support multi language beside english for this library ? For example like bahasa or spanish or italian ? I hope I can support on bahasa if thats really possible.

Thank you.
- [x] Setup CI
- [x] Add macOS as target
- [x] Enable Android
- [ ] Verify published Android artifact in actual app development
- [ ] Get test results from CI
- [ ] Remove deprecated features
- [ ] Implement #143 (don't forget attribution)
- [x] Implement #147 (don't forget attribution)
- [ ] Implement #149 (don't forget attribution)
- [x] Implement #150 (don't forget attribution)
- [ ] Implement #154 (don't forget attribution) 
- [ ] Implement #158 (don't forget attribution) 
- [ ] Implement #163 (don't forget attribution) 
- [ ] Implement #165 (don't forget attribution)
- [ ] Implement #159 (don't forget attribution)
- [ ] Implement #172
- [ ] Implement #173
- [ ] Add PR at https://blog.karumi.com/shared-library-in-kotlin-multiplatform/
Description
the itReturns method doesn't let to return multiple values (something that Mockito resolve with an implementation of thenReturn(firstvalue, array_of_next_values))

Expected result:
we can return several values in case we need it

example: 
When calling mockView.isReady itReturnsConsecutively  listOf(true, false)

Checklist
<!--- We'd like to thank you for your help, appreciate them and give you credit for it. Please check the checkboxes below as you complete them -->

- [x] I've added my name to the `AUTHORS` file, if it wasn't already present.


here is a real-life scenario that made me very confused 
```
listOf(1, 2, "fizz", 4, "buzz") shouldEqual listOf(1, 2, "fizz", 4, "buzz") //ok
listOf(1, 2, "fizz", 4, "buzz") shouldEqual listOf("1", "2", "fizz", 4, "buzz") //fail
```

The reason of the confusion was this error message :
`java.lang.AssertionError: Expected <[1, 2, fizz, 4, buzz]>, actual <[1, 2, fizz, 4, buzz]>.`

I think we should consider custom `toString` conversion to make distinction Int vs String more explicit for all "string prints". The code is not the best but we will get the idea:
```
val list = listOf(1, "2", "fizz", 4, "buzz")
        println(list) //prints: [1, 2, fizz, 4, buzz]

        println(list.joinToString(
            transform = {
                if (it is String)
                    "\"$it\""
                else
                    it.toString()
            },
            prefix = "[",
            postfix = "]"
        )) //prints: [1, "2", "fizz", 4, "buzz"]
```
As a result we would get much better error message giving instant hint what is wrong
Before: 
`java.lang.AssertionError: Expected <[1, 2, fizz, 4, buzz]>, actual <[1, 2, fizz, 4, buzz]>`

After
`java.lang.AssertionError: Expected <[1, 2, fizz, 4, buzz]>, actual <["1", "2", "fizz", "4", "buzz"]>`

As an alternative we could consider handling in special wahy the case where test fails but `actuall.toString() == expected.toString()`. Then we could make decision about display more information like data types in error message.

Also, keep in mind this is a simplified example, in reality, we will have a function that returns the list making mistake harder to spot in code
`listOf(1, 2, "fizz", 4, "buzz") shouldEqual getMyList() //fail`
