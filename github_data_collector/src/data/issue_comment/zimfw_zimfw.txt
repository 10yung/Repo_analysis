Currently this project [is available](https://aur.archlinux.org/packages/zsh-zim-git/) in the AUR (Arch Linux User Repository). However, with the move to Zim 1.0.0, the package is no longer maintained. Apparently there is [some confusion](https://aur.archlinux.org/packages/zsh-zim-git/#comment-724084) as to how to package Zim now for global installation.

Is this still possible? Presumably the old installation script ([PKGBUILD](https://aur.archlinux.org/cgit/aur.git/tree/PKGBUILD?h=zsh-zim-git)) is no longer valid. How would you recommend package managers distribute Zim?
Just purchased `zimfw.sh`. Would be nice to have a small static site (https://gohugo.io/) that encapsulates the important information like installation, and with tabs that showcase features. I'll cover hosting and associated costs. Ideally, we create a new repo that contains the hugo site and uses Github actions to build and publish an nginx+alpine Docker container. That would make things simple from my end.

Could 301 zimfw.sh/install to the installation file, making the installation instructions a tad cleaner.
Please check the existing issues to make sure you're not duplicating a report.

For bug reports, please provide the following information:

In a terminal, run `zimfw info` and paste the output below:

```
kronikpillow at susanoo in ~
$ zimfw info
Zim version:  1.0.1 (previous commit is 28e4345)
ZIM_HOME:     /home/kronikpillow/.config/zsh/.zim
Zsh version:  5.7.1
System info:  Linux susanoo 5.4.10-1-ck-ivybridge #1 SMP PREEMPT Thu, 09 Jan 2020 21:32:48 +0000 x86_64 GNU/Linux

```

- gist of .zimrc: the default one, no modifications
- gist of .zshrc: the default one, no modifications

Description
-----------
I installed the latest zimfw by running 
curl -fsSL https://raw.githubusercontent.com/zimfw/install/master/install.zsh | zsh

when i switch to tty prompt (ctrl+alt+F2) I get the following error

```
[1] 1759
/home/kronikpillow/.config/zsh/.zshrc:source:90: no such file or directory: /init.zsh
/home/kronikpillow/.config/zsh/.zlogin:source:6: no such file or directory: /login_init.zsh
```

Steps to reproduce
------------------
install latest zimfw and switch to tty, login to your standard user


Images or other information
---------------------------
when I manually source .zshenv from ~/.config/zsh/.zshenv
and then manually source .zlogin and .zshrc it starts to work ... so I come to the following
for some reason, when I go to a tty, it doesn't source .zshenv even thou on my PC it sources it with no problems ...


There's a bunch of stuff in `.zshrc` that I don't really care about:

```sh
# Bind ^[[A/^[[B manually so up/down works both before and after zle-line-init
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

# Bind up and down keys
zmodload -F zsh/terminfo +p:terminfo
if [[ -n ${terminfo[kcuu1]} && -n ${terminfo[kcud1]} ]]; then
  bindkey ${terminfo[kcuu1]} history-substring-search-up
  bindkey ${terminfo[kcud1]} history-substring-search-down
fi
  
bindkey '^P' history-substring-search-up
bindkey '^N' history-substring-search-down
bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
```

I imagine it's there so that the user can remove it in case they don't want to use `zsh-history-substring-search`. Maybe `zim` could include a bunch of these "patches" that are automatically sourced if the corresponding module is enabled.
https://github.com/zimfw/zimfw/wiki/Speed (linked in the README) seems to be from 2016.
We need to fill in the `[INSERT CONTACT METHOD]`.

@Eriner, should we put both our email addresses here, or do you suggest something else?

(Taken from the original at https://www.contributor-covenant.org/version/2/0/code_of_conduct.md)
[As reported](https://github.com/zimfw/zimfw/pull/323#issuecomment-571285700) by @AtomicCoding:

I've switched to the develop branch about a week ago, and everything so far has been amazing, it's really great to see how far Zim has come. However, I've been having a mild issue with how Zim precompiles things into one script. I have this line in my .zimrc:
```
if (( ${+TERM_PROGRAM} )); then
  if [ $TERM_PROGRAM = "iTerm.app" ]; then
    zmodule romkatv/powerlevel10k
  else
    zmodule minimal
  fi
else
  zmodule minimal
fi
```
And the expected behavior would be that when I run iTerm (which has a nerd font installed), I'd get a powerlevel10k prompt but when SSHing or using any other terminal, I'd get minimal. However, due to the way it seems to be compiled (I'm assuming it just checks which modules have been defined, and loads them), I've had to run `zimfw update` each time I switch from different terminals to make sure the prompt changes. This isn't a significant issue, and would likely require some work to copy over to the pre-compiled script, but it's just something I've been experiencing.

_Originally posted by @AtomicCoding in https://github.com/zimfw/zimfw/pull/323#issuecomment-571285700_

It would be nice to have a CI system to perform both static (think `shellcheck`, grep-based style linting) and dynamic analysis (run in subshell, check retcode, prompt, function availability/functionality, etc).

Github Actions can be used for the CI. Necessary tooling is still unknown, as it would likely need to be zsh-specific and I'm not aware of any off the top of my head, though I haven't investigated what's available.

One obvious upside to performing testing like this is that we could test varying versions of `zsh` and catch any `is-at-least` type bugs, as well as PRs that may subtly break some functionality.
Regarding having an all-in-one initialization file [suggested before](https://github.com/zimfw/zimfw/pull/323#issuecomment-553930310), solving it for scripts that look at `${0}` is straightforward as can be seen in the solutions below. The problem is when there's a `%N` or `%x` in the script. Even with a complete Zsh parser, I don't think it will be obvious if these are expansions are being used to get the script path, or if they are being used in prompts, or if for any other "creative" use.

NOTE 1: `%N` to get the script path is used as a workaround for when FUNCTION_ARGZERO is unset. This option is only set by default in the csh and zsh emulations, which blows my mind on why someone would run Zsh with a different emulation and expect Zsh plugins to still work. The general way to resolve `%N` into a variable is with `${(%):-%N}`, as posted in the Zsh Mailing List a while ago (could not find the reference now). Also, `${(%):-%x}` can be seen. And maybe there can be other variations, which again make the parsing of the script hard (if not impossible).

NOTE 2: An example of a "creative" usage of `${(%):-%N}`: https://www.zsh.org/mla/users/2019/msg00651.html

Just for the sake of giving names, I'm naming 3 different solutions:

* conservative, the one currently being used: always sources the scripts.

* moderate: still sources scripts that have `%N` or `%x` on them. This can leave out scripts that can potentially be concatenated into the all-in-one script. Maybe concatenated scripts can be broken in ways we still don't predict. Diff from the conservative solution is:
   ```
   72c72,81
   <     print -Rn ${(F):-source ${^_zscripts:P}}
   ---
   >     local zscript
   >     for zscript in ${_zscripts:P}; do
   >       if command grep -q '%[Nx]' ${zscript}; then
   >         print -R "source ${zscript}"
   >       else
   >         print -R "() { local 0=${zscript}"
   >         command cat ${zscript}
   >         print '}'
   >       fi
   >     done
   ```

* aggressive: concatenates all scripts, substituting `${(%):-%N}` or `${(%):-%x}` by `${:-/path/to/script.zsh}`. Possibly concatenated scripts can be broken in ways we still don't predict. Diff from the conservative solution is:
   ```
   72c72,77
   <     print -Rn ${(F):-source ${^_zscripts:P}}
   ---
   >     local zscript
   >     for zscript in ${_zscripts:P}; do
   >       print -R "() { local 0=${zscript}"
   >       command sed "s/\${(%):-%[Nx]}/\${:-${zscript//\//\\/}}/g" ${zscript}
   >       print '}'
   >     done
   ```

I've used the oldest/slowest machine I have here to benchmark the 3 solutions (Intel Core 2 Duo 2.20 GHz, 4 GB RAM, HD, using the first version of WSL which is known to have a poor disk performance). Benchmark done with the default Zim installation (of the develop branch, at the moment of writing this):

Solution | Mean (s) | Min…Max (s)
--- | --- | ---
conservative | 0.1913 ± 0.00364829 | 0.19 … 0.21
moderate | 0.19 ± 0.00141421 | 0.18 … 0.20
aggressive | 0.18543 ± 0.00189871 | 0.183 … 0.200

So, not sure if the difference is worth the risk. And I want to avoid going into the path of giving users the option to set which solution they want, as this will increase the complexity of the project in a way that I consider incompatible with our values.  :- )

@Eriner, want to try to benchmark these in a machine you consider would strongly benefit from the few fopen calls the non-conservative solutions offer?
Docker got pretty popular.
Maybe add it out of the box, or as a plugin.
I can get it working by [following official instruction for non oh-my-zsh](https://docs.docker.com/compose/completion/#zsh), but I kinda like zimfw cuz theres so little additional work needed... I just get it and its done.
