Hi team,

The integration between this module and the `PSScriptAnalyzer` one is a great way of using one tool for multiple purposes and generating one common report for a solution. While one does not expect to have full flexibility offered by all the external modules, I think some of the basic functionality and flexibility of the external ones could be added to make the usage more robust and avoid workarounds/hacks in using this module.

## Expected Behavior
It would be great if we would be able to specify the settings used for the `PSScriptAnalyzer` invocation, as the [support for it](https://github.com/PowerShell/PSScriptAnalyzer#settings-support-in-scriptanalyzer) specifies.

While I am aware that one could resolve this by adding a file named `PSScriptAnalyzerSettings.psd1` in the root of the project, I believe that this limits the flexibility provided by that module (not being able to use built-in presets or to have the settings file in a different location, etc.).

## Current Behavior
You are currently not able to enable or disable different rules, which limits the accuracy and reliability of the generated report.

## Possible Solution
I believe we could either add an extra run parameter or a configuration in the settings file that allows you to specify the settings used by the `PSScriptAnalyzer` rules settings which would then be passed in that module's invocation. If this is not provided, it should use the current call, using the implicit settings.

## Context
We have a project where we have set some custom rules for the `PSScriptAnalyzer`, and those settings are not in the root folder (rather a `.settings/psScriptAnalyzer/psd1` file, a folder where we store different configurations for different environments and tools, including `PSCodeHealth`). When running the `PSCodeHealth` checker, this uses the default set of rules, thus flagging some errors and warnings which are disabled by our original settings.

## Your Environment
* Module version used: 0.2.26
* Operating System and PowerShell version: Windows 10 / PowerShell 5.1.17763.771

Cheers and thanks for creating this tool!
Andrei
### Before submitting a bug report, please ensure you :  
- [ ] Verified this bug is not already reported in an issue
- [ ] Can reproduce in a clean PowerShell session (_clean = `powershell -NoProfile`_)

## Describe the Problem
Test Coverage  (%) is zeroes at the function level while using existing TestResult


## Steps To Reproduce
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. Error or unexpected behavior : ...

## Expected behavior
A clear and concise description of what you expected to happen.

## Screenshots
If applicable, add screenshots to help explain your problem.

## Environment  
  - Operating system :  
  - PowerShell version :  
  - PSCodeHealth version :  

## Additional context  
How has this issue affected you ?  
What are you trying to accomplish  ?  
Providing context helps us come up with a solution that is most useful and prioritize issues.

<!--- Provide a general summary of the issue in the Title above -->
Having the NUnit Results would allow us to use this module to not only generate the HTML report, but also, the NUnit results we import back into Jenkins.

Adding a parameter like so:
Invoke-PSCodeHealth -Path '.\coveralls' -TestsPath '.\coveralls' -HtmlReportPath "$env:USERPROFILE\Desktop\Report.html" -NUnitPath ".\NUnitResults.xml"

## Expected Behavior
<!--- If you're describing a bug, tell us what should happen -->
<!--- If you're suggesting a change/improvement, tell us how it should work -->
A NUnit Results file should be created in $NUnitPath path.

## Current Behavior
<!--- If describing a bug, tell us what happens instead of the expected behavior -->
<!--- If suggesting a change/improvement, explain the difference from current behavior -->
An non-standard object is returned from Invoke-PSCodeHealth, that cannot be easily exported to JSON/XML to be used by other services.

## Possible Solution
<!--- Not obligatory, but suggest a fix/reason for the bug, -->
<!--- or ideas how to implement the addition or change -->
In: PSCodeHealth/PSCodeHealth/Private/Metrics/Get-FunctionTestCoverage.ps1
Line 54: Add a check for the NUnitPath, if a path is provided, then add:
-OutputFile "$NUnitPath" -OutputFormat "NUnitXml"

or Create a more extensive NUnit result file from all the metrics gathered from PCHealthCheck

Could use -PesterNUnitXmlPath to export just Pester, so we dont think it's the actual HealthCheck report.

## Your Environment
<!--- Include as many relevant details about the environment you experienced the bug in -->
* Module version used: 0.2.9

Invoke-PSCodeHealth throws 'MethodNotFound' when a module that containst PowerShell classes is analyzed

```powershell
Method invocation failed because [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord] does not contain a method named 'op_Addition'.
At C:\Program Files\WindowsPowerShell\Modules\PSCodeHealth\0.2.9\Private\New-PSCodeHealthReport.ps1:82 char:13
+             $AllScriptAnalyzerResults = ($FunctionHealthRecord.Script ...
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : InvalidOperation: (op_Addition:String) [], RuntimeException
    + FullyQualifiedErrorId : MethodNotFound
```

- Environment: Windows PowerShell 5.1.14409.1012 running Windows 8.1

When counting lines of code in a script or function, I'd argue that it's most valuable to only consider significant lines of code. It appears that `Get-FunctionLinesOfCode` is already excluding comments from it's total count, but I think that blank lines should be excluded as well.

Have a look [here](https://github.com/mattmcnabb/PSCodeHealth/blob/master/PSCodeHealth/Private/Metrics/Get-FunctionLinesOfCode.ps1) to see this in practice. If acceptable, I'll submit a PR.
Not sure what I'm doing wrong here, but when I run `Invoke-PSCodeHealth` against any module I have created, I get no results from any of the metrics, other than number of files. I created a simple test module called HealthModule:

```powershell
function Get-Something
{
    param
    (
        $Param1
    )
}

function Get-Nothing
{
    param
    (
        $Param1
    )
}

Export-ModuleMember -function *
```

And then ran:

![image](https://user-images.githubusercontent.com/6998507/34675522-e1d05a90-f457-11e7-9cb0-cd60de7693d4.png)

I got the same result when running against a couple of production modules with many functions in a psm1 file.

This is module version 0.2.9, on Windows 7 running PowerShell 5.1.
In looking at your code I see you are relying on comment based help. I'd recommend using the Platyps module and create external help from a set of markdown documents. You can copy and past much of your comment help into the intermediate markdown files and then generate an external xml help document. This simplifies the code files.
In using v0.2.7, Invoke-PSCodehealth is detecting all functions, but it treats them the same. There's nothing wrong with detecting all the functions, but they should be identified as private or public (i.e. exported module member). That way if in an html report I see a private function with no help, I'm not concerned about that. But I would hope that there are a few lines of comments that explain the function which shouldn't be considered a penalty on function length per our other issue.

In the PerFunction section, added a column indicating if the function is exported or not. That would be helpful.
I also have a question on how you determine what a proper function length is. From your blog post I appreciate the notion that sometimes you need to refactor. But sometimes a function is long by design. For example, in a function I tested I get 78 lines of code.  But if you don't count commented lines or my lines of Write-Verbose (or someone might use Write-Debug), then I'd get a line count of 60 which your analyzer would report as "better". For that matter if don't count white space, my function gets down to 46 lines of actual code that does something.

I completely understand where you are going with this metric but I'm trying to figure out how it is being determined and if that is the "best" way.