Producing very strange errors in the process:

```
   Compiling sc-rpc-api v2.0.0 (/Users/nikolayvolf/git/substrate/client/rpc-api)
error: Missing returns attribute.
  --> client/rpc-api/src/author/mod.rs:36:2
   |
36 |     /// Submit hex-encoded extrinsic for inclusion in block.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error: Missing returns attribute.
  --> client/rpc-api/src/author/mod.rs:36:2
   |
36 |     /// Submit hex-encoded extrinsic for inclusion in block.
```

where: 

```rust
	#[rpc(name = "author_submitExtrinsic")]
	fn submit_extrinsic<'a>(&'a self, extrinsic: Bytes) -> FutureResultLt<'a, Hash>;
```

Updates the requirements on [futures](https://github.com/rust-lang-nursery/futures-rs) to permit the latest version.
<details>
<summary>Release notes</summary>

*Sourced from [futures's releases](https://github.com/rust-lang-nursery/futures-rs/releases).*

> ## 0.3.1
> * Fix signature of `LocalSpawn` trait (breaking change -- see [#1959](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1959))
</details>
<details>
<summary>Changelog</summary>

*Sourced from [futures's changelog](https://github.com/rust-lang-nursery/futures-rs/blob/master/CHANGELOG.md).*

> # 0.3.1 - 2019-11-7
> * Fix signature of `LocalSpawn` trait (breaking change -- see [#1959](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1959))
> 
> # 0.3.0 - 2019-11-5
> * Stable release along with stable async/await!
> * Added async/await to default features ([#1953](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1953))
> * Changed `Spawn` trait and `FuturesUnordered::push` to take `&self` ([#1950](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1950))
> * Moved `Spawn` and `FutureObj` out of `futures-core` and into `futures-task ([#1925](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1925))
> * Changed case convention for feature names ([#1937](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1937))
> * Added `executor` feature ([#1949](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1949))
> * Moved `copy_into`/`copy_buf_into` ([#1948](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1948))
> * Changed `SinkExt::send_all` to accept a `TryStream` ([#1946](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1946))
> * Removed `ThreadPool::run` ([#1944](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1944))
> * Changed to use our own definition of `io::Cursor` ([#1943](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1943))
> * Removed `BufReader::poll_seek_relative` ([#1938](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1938))
> * Changed `skip` to take a `usize` rather than `u64` ([#1931](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1931))
> * Removed `Stream` impl for `VecDeque` ([#1930](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1930))
> * Renamed `Peekable::peek` to `poll_peek` ([#1928](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1928))
> * Added immutable iterators for `FuturesUnordered` ([#1922](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1922))
> * Made `ThreadPool` optional ([#1910](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1910))
> * Renamed `oneshot::Sender::poll_cancel` to `poll_canceled` ([#1908](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1908))
> * Added some missing `Clone` implementations
> * Documentation fixes
> 
> # 0.3.0-alpha.19 - 2019-9-25
> * Stabilized the `async-await` feature ([#1816](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1816))
> * Made `async-await` feature no longer require `std` feature ([#1815](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1815))
> * Updated `proc-macro2`, `syn`, and `quote` to 1.0 ([#1798](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1798))
> * Exposed unstable `BiLock` ([#1827](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1827))
> * Renamed "nightly" feature to "unstable" ([#1823](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1823))
> * Moved to our own `io::{Empty, Repeat, Sink}` ([#1829](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1829))
> * Made `AsyncRead::initializer` API unstable ([#1845](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1845))
> * Moved the `Never` type from `futures-core` to `futures-util` ([#1836](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1836))
> * Fixed use-after-free on panic in `ArcWake::wake_by_ref` ([#1797](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1797))
> * Added `AsyncReadExt::chain` ([#1810](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1810))
> * Added `Stream::size_hint` ([#1853](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1853))
> * Added some missing `FusedFuture` ([#1868](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1868)) and `FusedStream` implementations ([#1831](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1831))
> * Added a `From` impl for `Mutex` ([#1839](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1839))
> * Added `Mutex::{get_mut, into_inner}` ([#1839](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1839))
> * Re-exported `TryConcat` and `TryFilter` ([#1814](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1814))
> * Lifted `Unpin` bound and implemented `AsyncBufRead` for `io::Take` ([#1821](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1821))
> * Lifted `Unpin` bounds on `get_pin_mut` ([#1820](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1820))
> * Changed `SendAll` to flush the `Sink` when the source `Stream` is pending ([#1877](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1877))
> * Set default threadpool size to one if `num_cpus::get()` returns zero ([#1835](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1835))
> * Removed dependency on `rand` by using our own PRNG ([#1837](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1837))
> * Removed `futures-core` dependency from `futures-sink` ([#1832](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1832))
> 
> # 0.3.0-alpha.18 - 2019-8-9
> * Rewrote `join!` and `try_join!` as procedural macros to allow passing expressions ([#1783](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1783))
> * Banned manual implementation of `TryFuture` and `TryStream` for forward compatibility. See [#1776](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1776) for more details. ([#1777](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1777))
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`16afd7c`](https://github.com/rust-lang-nursery/futures-rs/commit/16afd7cdc1c85d7de669b5a2c2055586572928cb) Stage 0.3.1
- [`fc5f44c`](https://github.com/rust-lang-nursery/futures-rs/commit/fc5f44c231906ea376195736b75fa77601a6a984) fix: [Local]SpawnExt should take &self as their base traits
- [`438e53a`](https://github.com/rust-lang-nursery/futures-rs/commit/438e53a7c54338067baab6c462866501918993d7) Merge pull request [#1963](https://github-redirect.dependabot.com/rust-lang-nursery/futures-rs/issues/1963) from taiki-e/ci
- [`5a3605e`](https://github.com/rust-lang-nursery/futures-rs/commit/5a3605e4199313615bea3ffb37899e515f541e55) Temporarily ignore buffer_unordered::works test on all targets
- [`3e91014`](https://github.com/rust-lang-nursery/futures-rs/commit/3e91014f6f2f4197f434ffac57b7597252dbf665) Update and fix CI config
- [`0c7fa20`](https://github.com/rust-lang-nursery/futures-rs/commit/0c7fa20ae07b59af4c04487817f33a830561b7e9) Stage 0.3.0 release
- [`133f9ce`](https://github.com/rust-lang-nursery/futures-rs/commit/133f9ce555e6bbda8c171018c65dcaa76f5cc27f) Change stream bounds of send_all
- [`4fef913`](https://github.com/rust-lang-nursery/futures-rs/commit/4fef913048cc083f824a5cc4d22d2beb435bb936) Add async/await to default features
- [`47f3ccb`](https://github.com/rust-lang-nursery/futures-rs/commit/47f3ccb0f7243a02a2258d5cf0942e892f3ac858) Make `Spawn::spawn` take `&self` rather than `&mut self`
- [`07518c5`](https://github.com/rust-lang-nursery/futures-rs/commit/07518c5088e437b54d46f1b9b03881c63b64fa11) Revert "Move AtomicWaker from futures-core to futures-task"
- Additional commits viewable in [compare view](https://github.com/rust-lang-nursery/futures-rs/compare/0.1.26...0.3.1)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
If this is tried in legacy rust (not rust 2018)

```rust
#[rpc(server)]
pub trait Foo {
	/// RPC Metadata
	type Metadata;

	fn bar(&self, u64) -> Result<u64>;
}
```

You will end with a similar error as follows:

```bash
26 | #[rpc(server)]                                                                                                                                                                                         
   | ^^^^^^^^^^^^^^                                                                                                                                                                                         
                                                                                                                                                                                                            
error: expected `:`        
```

To fix it you can do:
```rust
#[rpc(server)]
pub trait Foo {
	/// RPC Metadata
	type Metadata;

	fn bar(&self, _: u64) -> Result<u64>;
}

// or
#[rpc(server)]
pub trait Foo {
	/// RPC Metadata
	type Metadata;

	fn bar(&self, b: u64) -> Result<u64>;
}
```

For further information, see https://rust-lang.github.io/rfcs/1685-deprecate-anonymous-parameters.html

Seems that the build (or one of the tests) hangs and breaks the build.
I need to run a synchronous i/o inside a jsonrpc method.
To do this I'm creating tokio `ThreadPool` and constructing future using `blocking`.
As I understand RPC trait functions are supposed to return either `Result` or `FutureResult`.
Looking at the code of `FutureResult` I see that it assumes that returned future is already completed. 
How can I spawn a new future from other tokio pool and what rpc method's function signature should look like if my future signature is `Futures::Lazy<(), Box<dyn std::error::Error>`?

I'm continuously stumbling upon errors like this:
```
88 |                 }).into()
   |                    ^^^^ the trait `std::convert::From<futures::Lazy<[closure@src/pipe_server/rpc.rs:61:22: 88:18 self:_, run_id:_, id:_, ts:_], futures::future::PollFn<[closure@src/pipe_server/rpc.rs:62:33: 87:26 self:_, run_id:_, id:_, ts:_]>>>` is not implemented for `futures::Finished<(), std::boxed::Box<dyn std::error::Error>>`
```
It would be great to have support for JSON-RPC servers running in a subprocess (e.g. spawned by `Command::spawn`) that communicate via `stdio`. This would be especially useful as a counterpart to `jsonrpc-stdio-server`.
Does the current design of `jsonrpc-core-client` allow for a server and client (different schemas) to share the same duplex transport? The use case for this would be a language server, which has a handful of special methods and notifications that are sent from the server to the client, rather than the other way around (see https://github.com/ebkalderon/tower-lsp/issues/13 for further detail). They both also communicate over `stdio`, which is challenging since one has to be careful to not accidentally feed the responses from the client read on `stdin` back into the server as though it were a request.

In [tower-lsp](https://github.com/ebkalderon/tower-lsp), I am currently working around this limitation by manually interleaving the responses produced by the server together with extra notifications intended for the client to read all to `stdout`. This works perfectly for notifications, but I cannot easily support sending requests to the client and picking up the responses, all while sharing the same `stdout` and `stdin` used by the server.

As such, it would be nice if there was some way to have the client-to-server schema defined in one `jsonrpc-derive::rpc` trait, the server-to-client schema defined in another `jsonrpc-derive::rpc` trait, and to instantiate both using the same `stdin` and `stdout` handles.
Transitioning from `futures` 0.1 to `std::future::Future` would greatly improve the user experience in the near future, especially with async/await stabilizing in Rust 1.39 and `std::future::Future` compatible versions of `tokio`, `hyper`, and `tower` on the horizon. It seems that `jsonrpc-core` is currently the only library in my personal JSON-RPC projects that still relies exclusively on `futures` 0.1, and it is blocking me from switching over to the new trait completely. I understand if this issue will sit on the backburner for the time being until at least `tokio` 0.2.0 is released, though.
I am trying to implement the [basic example using derive](https://github.com/paritytech/jsonrpc#basic-usage-with-derive) from the README. Since the code snippet only seems to require `jsonrpc-core` and `jsonrpc-derive`, I did not include any other dependencies in `Cargo.toml`:

```toml
[dependencies]
jsonrpc-core = "13.0.0"
jsonrpc-derive = "13.0.0"
```

The compiler, however, yields an error that a crate named `serde` is required too:

```
error: Could not find `serde` in `dependencies` or `dev-dependencies` in `...\Cargo.toml`!
 --> src\main.rs:4:1
  |
4 | #[rpc]
  | ^^^^^^
```

Indeed does the `#[rpc]` macro have a dependency on `serde`:

https://github.com/paritytech/jsonrpc/blob/54c4de527f536f8b6c5c6f4616446f82d00ed936/derive/src/rpc_trait.rs#L258-L261

`serde` is only listed as a dev-dependency though, so it [will not propagate](https://doc.rust-lang.org/rust-by-example/testing/dev_dependencies.html) into projects consuming the library:

https://github.com/paritytech/jsonrpc/blob/54c4de527f536f8b6c5c6f4616446f82d00ed936/derive/Cargo.toml#L21-L30

Adding `serde` explicitly to my Cargo.toml did fix the issue, but brought up another missing dependency (`jsonrpc-core-client`) which, again, had to be added manually despite being used by the `#[rpc]` macro.

Am I missing something? Would it be possible to clarify which dependencies have to be provided manually when using `jsonrpc-derive`?