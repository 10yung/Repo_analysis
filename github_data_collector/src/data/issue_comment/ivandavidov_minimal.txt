Sync [systemd-boot](https://github.com/ivandavidov/systemd-boot) with the latest stable upstream source code and check whether this fixes #191.
Take a look at [musl.cc](http://musl.cc/) and decide whether it can be used either in the MLL build process or in the MLL runtime.
It will be a good exercise to create Slax module for MLL. The most recent Slax version is 9.6.4 and it supports everything that should allow MLL to be built out of the box, assuming there is properly configured module.

https://www.slax.org/customize.php


The Slax URL which explains the boot internals is here:

https://www.slax.org/internals.php

The corresponding URL in the tutorials should be updated. Also, the websites should be updated (put the new tutorial document) as well in order to reflect this change.
* MLL version for Raspberry Pi. Start with very minimal components (statically linked binaries).

* MIT's ``xv6`` course
   https://pdos.csail.mit.edu/6.828/2018/xv6.html

* Ed King's "Linux Namespaces" set of articles
   https://medium.com/@teddyking/linux-namespaces-850489d3ccf

* (Done) Design and implement proper layer merging in MINCS (Dockerfile actions are ignored in MINCS)
   https://github.com/mhiramat/mincs

* Read the "Linux-Device-Drivers-Development" book
   https://github.com/PacktPublishing/Linux-Device-Drivers-Development

* Close/implement/cleanup the MLL issues here!!!
http://9legacy.org/9legacy/tools/git
This ist a RC Shell Script, the idear to make a bash Script or a golang Git warpper in Go.

Note that ``Groovy`` depends on JVM. Groovy version 2.5.0 works with Java 7/8 and Groovy version 3.0 is designed to work with Java 9+.

By default MLL adds the latest stable packages and currently Java 10 is the latest stable Java. However, the latest stable Groovy package is for version 2.5. Adding Groovy in MLL at this point will require to add the latest bleeding edge Groovy version.
From time to time users raise issues that MLL doesn't work properly on real hardware, because some devices are not recognized. That's because MLL uses default kernel settings and by default the built-in drivers work with limited set of generic hardware.

Users should be aware from the very beginning that MLL is mostly an educational operating system which is designed to work fine in virtual environment. If it works on real hardware it's a bonus, but that's not the goal of this project.
MLL has evolved from statically linked BusyBox environment to dynamically linked BusyBox environment where the GNU C library is used as mediation layer. On top of that, the most recent MLL version can be used on both legacy BIOS and modern UEFI firmware machines.

Unfortunately, the [tutorial](https://github.com/ivandavidov/minimal/blob/master/src/the_dao_of_minimal_linux_live.txt) doesn't follow the evolution of the project.

The MLL project desperately needs series of new tutorials which should cover the following:

* Dynamic and static linking
* BIOS and UEFI boot schemes
* MLL build process in details (for BIOS and UEFI)
* MLL internal structure (configurable capabilities, overlay bundles , etc.)
* MLL boot process in details (from kernel to shell, including the overlay magic)
[xv6](https://pdos.csail.mit.edu/6.828/2017/xv6.html) is a very small UNIX-like operating system which can be built from scratch. There is also a [teaching book](https://pdos.csail.mit.edu/6.828/2017/xv6/book-rev10.pdf) which explains the internals of the xv6 OS.

xv6 can be mentioned in the MLL docs as additional educational resource for the people who are interested to build their own UNIX-like OS. This could be mentioned in the website, the MLL tutorial document and in the project's "readme" document, since the build/run steps are really simple.

The code snippet below shows how simple it is to build and run xv6. The whole process takes 2 minutes on my machine.

```
# This is for Ubuntu/Debian based Linux host machines.
sudo apt install git make gcc qemu
git clone https://github.com/mit-pdos/xv6-public
cd xv6-public
make
make qemu
```

It would also be very interesting to experiment whether it is possible to boot xv6 from inside MLL, probably by using [kexec-tools](https://github.com/ivandavidov/minimal/pull/93) or by any other means.