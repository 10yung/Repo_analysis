I am trying to create a form and use a "ClearButton" to reset all my inputs once the user gets done filling a form. I tried using the function reset(), shinyjs::reset(), wrap the inputaddon into an exclusive div(id=) and nothng works.

I believe it is related to the special syntax of the shinyWidget but I cant figure it out. 

Thanks in advance!

  library(shinyjs)
  runApp(shinyApp(
    ui = fluidPage(
      useShinyjs(),
      
        div(id = "form",
            textInput("name1", "NormalTextInput", "Dean"),
            div(id="id1", textInputAddon(inputId = "name", value="test", label = "ShinyWidgetInput", placeholder = "Username", addon = icon("at"))),
            numericInput("age", "Age", 26),
            selectInput("letter", "Favourite letter", LETTERS)
        ),
      
      actionButton("resetName", "Reset name"),
      actionButton("resetAll", "Reset all")
    ),
    server = function(input, output, session) {
      observeEvent(input$resetName, {
        reset("name")
        reset("name1")
        shinyjs::reset("id1")
      })
      observeEvent(input$resetAll, {
        reset("form")
      })
    }
  ))
  
  
I often want to see output from the R commands evaluated in `runCode`.    With this change, the following code (captured in the roxygen documentation) now works properly:
```
  shinyApp(
    ui = fluidPage(
      useShinyjs(),  # Set up shinyjs
      runcodeUI(code = "shinyjs::alert('Hello!')"),
      shiny::tags$br(),
      shiny::tags$label("Output:"),
      textOutput("runcode_output", container=pre)
    ),
    server = function(input, output) {
      runcodeServer()
    }
  )
```

For example:
![image](https://user-images.githubusercontent.com/22243578/42717493-658e84ce-86cf-11e8-8aa0-26099a3a52c4.png)

In using `runCode`, I keep running into problems because my system/browser is automagically converting single and double quotes to the equivalent UTF open and close pairs.    When the string is handed to R for evaluation, it gets unhappy.

For example, typing this manually in a `shinyjs::runcodeUI(..,type="textarea")`: `shinyjs::alert(“Boo!”)` and then clicking `run` yields:
```
Oops, that resulted in an error! Try again.
Error: 
:1:16: unexpected input 1: shinyjs::alert( ^
```

It would be helpful if runCode converted the UTF open/close quote symbols back to appropriate "standard" ASCII single/quote characters.


Hi Dean,
long time no see ;) I can't say that enough: your package is awesome! The only thing I'm currently missing is the support for [Shiny events](https://shiny.rstudio.com/articles/js-events.html). Right now I'm implementing king of a busy indicator which can be easily set-up with a custom JS code as shown in the [example](https://github.com/rstudio/shiny-examples/tree/master/107-events). Yet, it would be really great if something along the following lines would be possible - what do you think?

Cheers,
Andrzej

```r
library(shinyjs)

shinyApp(
  ui = fluidPage(
    useShinyjs(),
    ...
    div(id = "loader")
    ),
  server = function(input, output) {
    ...
    onshiny("busy", show("loader"))
    onshiny("idle", hide("loader"))
  }
)
```
When trying to add onclick events to multiple selectizeInputs in a for loop I ran into strange behaviour.  Doing the same using lapply looked works perfectly fine. 

When using a for loop the result is that if I click the first input the value of the second input is set to "".  Clicking the second input also sets the second input to "". 
I expected that clicking the first input would set the first input and clicking the second input set the second input. This is what happens when I use lapply.

In my real code I have a lot more inputs and there when using the for loop, always the last input gets set to "" no matter which one I click.

To me this seems to be a bug, but I might be missing something.

```
library(shiny)
library(shinyjs)
ui <- fluidPage(
  useShinyjs(),
  selectizeInput("id1", label = "input1", choices = c("", "A", "B"), selected = "A"),
  selectizeInput("id2", label = "input2", choices = c("", "A", "B"), selected = "B")
)

server <- function(input, output, session) {
  ids <- c("id1", "id2")
  ## This works perfectly fine
  lapply(X = ids, FUN = function(id) {
    shinyjs::onclick(id, {
      updateSelectizeInput(session = session, inputId = id, selected = "")
    })
  })
  ## Whereas this doesn't
  #for (id in ids) {
  #  shinyjs::onclick(id, {
  #    updateSelectizeInput(session = session, inputId = id, selected = "")
  #  })
  #}
}

shinyApp(ui, server)
```

related to #118 but only one function doesn't work
and makes importing both difficult:

```r
#' @rawNamespace import(shiny, except = runExample)
#' @rawNamespace import(shinyjs, except = runExample)
```

Would you consider renaming it to `runJsExample()`? This looks like a function used mostly interactively, so this change shouldn't introduce downstream problems.
Just a simple function to play a sound from a Shiny app.

(Licensing note: the MP3 file I embedded for the example is public domain, from here: http://soundbible.com/1598-Electronic-Chime.html)
Hi Dean
I'm only a few hours in to learning your project.  With your simple PageCol example, if I run the ui = fluidPage(... ) scenario, then everything works nicely across browsers, Firefox included. 

However, if I use a www/index.html file for the UI (which I require for creating a custom Dashboard), and do the extra steps required, then the example code works nicely in RStudio and Chrome, but not Firefox.  Please see attached screenshot for the Firefox console errors.

Have you come across this issue before in FF? Hopefully its reproducible.   I would welcome any insights or suggestions.

<img width="1195" alt="firefox_console_errors" src="https://cloud.githubusercontent.com/assets/10004552/15237252/5c972990-190b-11e6-8f7b-b99571812aa3.png">

My Shiny App file structure is:
global.R
server.R
www/index.html

```
#server.R
library(shiny)
library(shinyjs)
jsCode <- "shinyjs.pageCol = function(params){$('body').css('background', params);}"
shinyServer(function(input, output) {
useShinyjs(html = TRUE)
extendShinyjs(text = jsCode)
observeEvent(input$col, {
      js$pageCol(input$col)
    })
})
```

```
<!--Contents of www/index.html file-->
<!DOCTYPE html>
<html lang="en">
<head>
<script src="shared/jquery.js" type="text/javascript"></script>
<script src="shared/shiny.js" type="text/javascript"></script>
<script src="shinyjs/inject.js"></script>
<link rel="stylesheet" type="text/css" href="shared/shiny.css"/>
</head>
<body>
<div class="form-group shiny-input-container">
<label class="control-label" for="col">Colour:</label>
<div>
<select name="col"><option value="white" selected>white</option>
<option value="yellow">yellow</option>
<option value="red">red</option>
<option value="blue">blue</option>
<option value="purple">purple</option></select>
<script type="application/json" data-for="col" data-nonempty="">{}</script>
</div>
</div> 
</body>
</html>
```

Best regards
Mark

After speaking with Joe at the shiny devcon, he agreed that using `V8` only as a parser is overkill and I should try to write my own parser.  It's not a simple job, but I'll leave it here as a potential TODO.

All I want is a way to parse the provided JavaScript file/text, and extract all the `shinyjs.foo` names from it, and it'd also be nice if it validated the javascript
