- extension point for doing custom logging of user interaction with plugin
<!--
Thank you for contributing to Motif. Before pressing the "Create Pull Request" button, please consider the following
points.
Feel free to remove any irrelevant parts that you know are not related to the issue.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
-->

<!-- Please give a description about what and why you are contributing, even if it's trivial. -->
**Description**:
Fail the compilation when `@motif.Scope` class has generic type parameters because Motif does not handle these cases. And give users a clear message to drop the generic types on Scope classes.
```
@motif.Scope
public interface Scope<T> {
}
```

<!-- Please include the issue list number(s) or other PR numbers in the description if you are contributing in response to those. -->
**Related issue(s)**:
#163 
<!-- Please include a reasonable set of unit tests if you contribute new code or change an existing one. -->

Fail the following cases with proper error messages. 

```java
@motif.Scope
interface FooScope<T> {
    
    @motif.Objects
    abstract class Objects<S>{

        public abstract <T> String s();  
    }
}
```
The compiler should only allow annotating interfaces with @motif.Dependencies as there is no reason to use an abstract class instead.


Update test harness to test generated javadocs
Ensure that the following behaves as expected:

```java
@Scope
interface FooScope {

  Foo foo();

  @motif.Objects
  class Objects {

    Foo foo(Provider<Foo> fooProvider) {
      return fooProvider.get();
    }
  }
}

// Main
FooScope fooScope = new FooScopeImpl(new FooScopeImpl.Dependencies() {
  @Override
  Provider<Foo> fooProvider() {
    return () -> new Foo();
  }
});

// This should not cause a infinite loop
fooScope.foo();
```
<!--
Thanks for using Motif. Before you create an issue, please consider the following points to help us best diagnose the issue.
Feel free to remove any irrelevant parts that you know are not related to the issue.
Any HTML comment like this will be stripped when rendering markdown, no need to delete them.
-->

<!-- Please include the library version number, including the minor and patch version (like `1.0.0`), in the issue text. -->
**Library version**: 0.1.0

<!-- If you think you found a bug, please include a code sample that reproduces the problem. A stacktrace alone is ok too, but may not contain enough context for us to deduce the issue from. -->
**Repro steps or stacktrace**: Just remove an object from scope and build. You should see the motif error print outs. But there is no way to tell where the object is injected.

A common and useful pattern is as follows 
```
public class Foo(ParentComponent) {

public interface ParentComponent {
  Bar bar()
}
}
```
This pattern allows every single class that defined to somewhat act as its own "scope" with a clear api towards the outside world 

to better support this pattern motif.Scopes should automatically provide all the interfaces that they implement as bindings
```
@motif.Scope
interface  Scope extends Foo.ParentComponent {

 @motif.Objects 
 abstract class Objects {
    abstract Foo foo();

    abstract Foo.ParentComponent fooParent(Scope scope) <-- this declaration could be now be avoided 
 }
}
```





