Using fastlane maybe?

The current one is kinda broken...
Is there a way to escape a flag?

I wanted to have a command that passes along some arbitrary arguments and flags in a flag to a different script  `mycommand --args "--flag value"`, but Guaka complains as it doesn't see `"--flag value"` as a single string
Hello,

Let’s say I’m writing the `git` CLI for example purpose.

I want to handle the `--version` flag for all commands and subcommands. For this, I will create an `inheritablePreRun` on the root command `git`, which will process the `--version` flag if it is set.

Then, after a little bit of coding, I’ll have to write the `git submodule` commands (`git submodule update`, `git submodule foreach`, etc.).
For each of this commands, I’ll need to read the submodule config file (`.gitmodules`).
To avoid re-implementing the logic of the parsing and error processing (command failure, etc.), I’ll want to implement an `inheritablePreRun` on the `git submodule` command.
However, once I do that, the root `inheritablePreRun` will be ignored, thus dropping my handling of the `--version` flag!

I think `inheritablePreRun`s should be executed recursively from the root to the current command being executed.

Any thoughts?
It would be nice if the tooling "guaka create" created an Xcode project with a working unit test.

The current website lacks some of the information about what libraries are part of Guaka
This website http://piotrmurach.github.io/tty/ does a great job at highlighting its component.  Maybe we can do something similar to it.
`getInt(name:)` and `getBool(name:)` etc could use overloads instead of unique names to distinguish the types. This impacts usage at the call site in the following ways:

1. When called nakedly, a type annotation may need used to disambiguate the method.
2. When the type is able to be inferred, the call site avoids adding redundant type information.

In addition to overloading "`get`" methods, it seems intuitive to access these via subscript. Below is a little playground snippet exploring this idea and showing some call site usage side by side.

```swift
struct Flag {
    var value: Any
}

struct Flags {
    let flagsDict: [String: Flag]

    init(flags: [String: Flag]) {
        self.flagsDict = flags
    }

    public subscript(name: String) -> Flag? {
        return flagsDict[name]
    }

    public subscript(name: String) -> Bool? {
        return flagsDict[name]?.value as? Bool
    }

    public func getBool(name: String) -> Bool? {
        return flagsDict[name]?.value as? Bool
    }
}

func log(_ verbose: Bool?, _ message: String) {
    if verbose ?? false {
        print(message)
    }
}

let flags = Flags(flags: ["verbose": Flag(value: true)])

// type inferred subscript:
_ = {
    let verbose: Bool? = flags["verbose"]
    log(flags["verbose"], "log message")
}()


// compared to:
_ = {
    let verbose = flags.getBool(name: "verbose")
    log(flags.getBool(name: "verbose"), "log message")
}()
```

Awesome library BTW. :)
I think we can come up with a better icon
![image](https://cloud.githubusercontent.com/assets/1461052/22401004/6662a5de-e5bc-11e6-91d5-f67b07b9b3ef.png)

Something like :D  ^
