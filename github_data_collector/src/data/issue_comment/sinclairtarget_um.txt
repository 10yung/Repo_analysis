This fix is specifically for running `um` inside a Docker container.

For some reason `Etc.getlogin` returns `nil` when inside a Docker container. I'm not sure of the reason why that's so, but some light searching pointed to recommendations to use `Etc.getpwuid` instead of `Etc.getlogin` anyway. (https://www.rubydoc.info/stdlib/etc/Etc.getlogin)

**Reproduction steps:**

Dockerfile
```dockerfile
FROM ruby:2.6.5-buster

RUN git clone https://github.com/sinclairtarget/um.git \
  && cd um \
  && gem build *.gemspec \
  && gem install um*.gem

CMD ["um", "list"] 
```

Building and running that produces this output:

```
/usr/local/bundle/gems/um-4.2.0/lib/um/umconfig.rb:113:in `+': no implicit conversion of nil into String (TypeError)
        from /usr/local/bundle/gems/um-4.2.0/lib/um/umconfig.rb:113:in `write_pages_directory'
        from /usr/local/bundle/gems/um-4.2.0/lib/um/umconfig.rb:78:in `source'
        from /usr/local/bundle/gems/um-4.2.0/libexec/um-list.rb:18:in `<main>'
```

**With patch:**

Dockerfile
```dockerfile
FROM ruby:2.6.5-buster

RUN git clone --single-branch --branch b-ggs/getpwuid https://github.com/b-ggs/um.git \
  && cd um \
  && gem build *.gemspec \
  && gem install um*.gem

CMD ["um", "list"]
```

Now, running that presents the expected output:

```
No pages found for topic "shell."
```
I edited the page like this
![image](https://user-images.githubusercontent.com/25054321/47206825-3289bc80-d3bc-11e8-8229-d821dc2b5a97.png)
and when I read it, it outputs like this
![image](https://user-images.githubusercontent.com/25054321/47206874-56e59900-d3bc-11e8-8b5a-5e50076f43e1.png)
am I missing something or um dose not support unicode character now?
Since this went into hacker news a few weeks back I've been watching the project. I think it would be beneficial to set a direction for the project, so as not to acquire any unwanted responsibilities and make sure the project stays lean and matching its purpose.

There are a few things going on at the same time, mostly trying to get `um` to be multiplatform, namely enabling it to run on Linux, Windows and FreeBSD. This has been somewhat conflated with making it "not rely on pandoc" (see #10, #6, #4 and #13).

I think this is a mistake, and perhaps you'll agree and we can restructure the issues and organize the efforts to increase `um`'s availability without squandering man-hours. It's possible I'm mistaken - I welcome the learning opportunity.

`um` is written in Ruby, which can run on all the desired platforms. Except it depends on `pandoc`. But this is not really a hurdle since pandoc is [distributed in all desired platforms](https://pandoc.org/installing.html).

The availability requests are actually _packaging_ requests for the most part, not really requiring the project to change. `um` shouldn't have the burden of managing its dependencies. That's what package managers are for.

Packages are projects unto themselves, and need not be conflated with the main project. A good direction to multi-platform availability of `um` is #16.

I think if anyone wants to make this project available to other platforms, they should do so by packaging it, and packages are separate projects. These are examples of what could be done:

- Windows (#4)? Build a `choco` package ([as it was done for pandoc](https://chocolatey.org/packages/pandoc)), or build an MSI or equivalent installer
- macOS/Linux (#16) can be kept by maintaining the Homebrew package up to date, can be enhanced by building packages for the different distros.
- FreeBSD can be managed by making a `pkg` package.
I am using Visual Studio Code as my editor which is on my path. My config looks like:
```
* editor = code
* pager = less
  pages_directory = /Users/matthewpflueger/.um/pages
  default_topic = shell
  pages_ext = .md
```

When doing
```
um edit grep
```
just brings up a blank editor. HOWEVER, setting the editor to vi brings up what you'd expect (a the template file).

Could you please consider respecting [$XDG_CONFIG_HOME](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html)?

That is, storing the config in the first of these where the env var exists:
- $UM_CONFIG_HOME
- $XDG_CONFIG_HOME/um
- $HOME/.config/um

Alternatively, in order not to change anything for users already using $HOME/.um, simply use XDG_CONFIG_HOME if it's set (since then the user surely wants it to be used) and carry on with existing behaviour otherwise.

Many thanks for um - a simple but great idea!