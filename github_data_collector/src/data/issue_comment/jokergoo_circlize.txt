I have the following data, using [Circlize package][1]:

    library(circlize)
    library(tidyverse)
    
    df <- structure(list(ligand = c(
      "  Cxcr4", "  Cd44", "  Cxcr4", "   Cxcr4",
      "   Csf2rb", "   Plaur", "    Plaur", "    Cxcr4", "    Csf3r",
      "    Sell", "     Tnfrsf1b", "      Sell", "       Csf2rb", "       Tnfrsf1b",
      "       Csf2rb", "       Il1r2", "       Plaur", "       Calm1",
      "       Cd44", "        Ptafr", "         Il1r2", "         Calm1",
      "          Cxcr2", "          Cxcr2"
    ), receptor = c(
      "  Dsg2",
      "  Itgb1", "  Cxcl10", "  Cxcl10", "  Itgb1", "  Itgb1", "  Agt",
      "  Csf1", "  Csf1", "  Icam1", "   Calm1", "  Calm1", "  Tnf",
      "  App", "  Il1b", "  Tnf", "  Il1b", "  Tnf", "  Mmp9", "  Anxa1",
      "  Il1b", "  Il1b", "  Cxcl10", "  Calr"
    )), class = c(
      "tbl_df",
      "tbl", "data.frame"
    ), row.names = c(NA, -24L))
    
    gaps <- c(
      0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
      0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 3,
      0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25, 0.25,
      0.25, 0.25, 3
    )
    
    grid_col <- c(`  Cxcr4` = "#8DD3C7", `  Cd44` = "#8DD3C7", `   Cxcr4` = "#FFFFB3", 
    `   Csf2rb` = "#FFFFB3", `   Plaur` = "#FFFFB3", `    Plaur` = "#BEBADA", 
    `    Cxcr4` = "#BEBADA", `    Csf3r` = "#BEBADA", `    Sell` = "#BEBADA", 
    `     Tnfrsf1b` = "#FB8072", `      Sell` = "#80B1D3", `       Csf2rb` = "#FDB462", 
    `       Tnfrsf1b` = "#FDB462", `       Il1r2` = "#FDB462", `       Plaur` = "#FDB462", 
    `       Calm1` = "#FDB462", `       Cd44` = "#FDB462", `        Ptafr` = "#B3DE69", 
    `         Il1r2` = "#FCCDE5", `         Calm1` = "#FCCDE5", `          Cxcr2` = "#D9D9D9", 
    `  Dsg2` = "#000000", `  Itgb1` = "#000000", `  Cxcl10` = "#000000", 
    `  Agt` = "#000000", `  Csf1` = "#000000", `  Icam1` = "#000000", 
    `   Calm1` = "blue", `  Calm1` = "#000000", `  Tnf` = "#000000", 
    `  App` = "#000000", `  Il1b` = "#000000", `  Mmp9` = "#000000", 
    `  Anxa1` = "#000000", `  Calr` = "#000000")
    
    order <- c("  Cxcr4", "  Cd44", "   Cxcr4", "   Csf2rb", "   Plaur", "    Plaur", 
    "    Cxcr4", "    Csf3r", "    Sell", "     Tnfrsf1b", "      Sell", 
    "       Csf2rb", "       Tnfrsf1b", "       Il1r2", "       Plaur", 
    "       Calm1", "       Cd44", "        Ptafr", "         Il1r2", 
    "         Calm1", "          Cxcr2", "   Calm1", "  Dsg2", "  Itgb1", 
    "  Cxcl10", "  Agt", "  Csf1", "  Icam1", "  Calm1", "  Tnf", 
    "  App", "  Il1b", "  Mmp9", "  Anxa1", "  Calr")

And with this code:

    circos.par(gap.degree = gaps)
    chordDiagram(df,
                 directional = TRUE, 
                 order = order, 
                 link.sort = TRUE,
                 link.decreasing = FALSE,
                 grid.col = grid_col,
                 diffHeight = 0.005,
                 direction.type = c("diffHeight", "arrows"),
                 # link.overlap = TRUE,
                 link.arr.type = "big.arrow",
                 annotationTrack = "grid",
                 preAllocateTracks = list(track.height = 0.075)
    )
    # we go back to the first track and customize sector labels
    circos.track(track.index = 1, panel.fun = function(x, y) {
      circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
                  facing = "clockwise", niceFacing = TRUE,
                  adj = c(0, 0.55),
                  cex = 0.5
      )
    }, bg.border = NA)
    
    circos.clear()


I can make this plot:


[![enter image description here][2]][2]

As stated in the plot above, how cand I bind the start and end of the link with the same target and source value?

So for example, `Cxcr1` will only have one block as the sender with gray color.

  [1]: https://github.com/jokergoo/circlize
  [2]: https://i.stack.imgur.com/WBoeF.jpg
What do you mean by HiC datasets? Highly Complex datasets?

I'm actually adjusting your package to summarize the multiple outputs of my multi-Omics code to study drug interactions. A couple limitations that I encounter when I use my HiC datasets with your package are:
1. If your dataframe has a column with numeric values and NAs, you cannot plot the tracks, even if such column is not part of factors, x, region, y, or value. Temporary solution: Assign a value to the NAs using a function such as log2(1) to put 0s.
2. If you're to use circlize to from expression datasets from any Omics to show differential expression between groups, you have to re-structure your datasets to assign x positions, and that sometimes gives irregular patterns for the links that look unintuitive.

I want to upload some examples if I understood what HiC meant. 
Please feel free to contact me or leave your email to see how we can collaborate for both my figures or want to hear my insights about using multi-Omics datasets with circlize.

Thanks, 

Jezreel Pantaleon Garcia, MD
(jezreel.me@gmail.com)

_Originally posted by @jezreel-me in https://github.com/jokergoo/circlize/issues/137#issuecomment-571198207_
Hi Zuguang,

This is a suggestion regarding the tracking of the GitHub circlize code.  I stumbled on it by chance.  https://jokergoo.github.io/circlize_book/book/ as of today, displays _This is the documentation of the circlize package. Examples in the book are generated under version 0.4.9._

CRAN lists version 0.4.8.  Ok, next version has not been released.

But when I look at https://github.com/jokergoo/circlize/releases, only 0.2.5 is listed.  That makes it hard to compare 0.4.8 to 0.4.9 to see the changes.

I frequently find myself needing to look at the source code to figure out what I'm not understanding or what changed, but is not in the release notes.

The other advantage of using releases is I can install a specific version quite easily w/this R call:
```{r}
devtools::install_github("jokergoo/circlize@0.2.5") 
```

Thanks,
Hi, 

This post is regarding the automatic line formatting of links from one sector to multiple sectors. I notice that the automatic line of the links is solid when my beds connect a few number of sectors (1 or 2), while the automatic line of links is half-transparent when my beds connects a greater number of sectors (4+). This works with any color, and it is a really cool feature to visualize links between multiple sectors when the number of links is very high. See pictures.

![Solid lines for links](https://user-images.githubusercontent.com/58693150/71795208-b43e2800-300a-11ea-9cf1-0dba80be6450.jpeg)
![Half-transparent links](https://user-images.githubusercontent.com/58693150/71795215-b902dc00-300a-11ea-95ed-a88669f2b949.jpeg)


A couple of questions:
1. Why does this happen? 
2. Are these lines or arrows or something else?
3. How can I implement that manually instead of being automatic? (Because I would like to implement that for plots with small number of sectors)
4. Can I apply that half-transparency as a half-color in lines? (I saw a previous post that this was not quite possible)

Thank you very much, 

Jezreel

My code for generating the links is:
df1 is the df with 3 sectors, and df2 is the one with 8 sectors, and their respective beds

circos.clear()
circos.par("track.height" = 0.1)
circos.genomicInitialize(data = df1 or df2, 
                         plotType = NULL)
circos.genomicTrackPlotRegion(data = c.all.DEMs.df)

circos.genomicLink(region1 = bed1.df1 or bed1.df2,
                   region2 = bed2 or bed1.df2,
                   border = NA)
circos.clear()


ChordDiagrm draws edges that comes out from a node, emerging from different origins which are tightly packed within the node.
is it possible to have these edges to come out from a single origin. Such that each node will only have one origin when the edges will emerge, and the width of the nodes are equal, regardless of the number of edges coming out of it?
here's an example of what I mean
![image](https://user-images.githubusercontent.com/34126910/71497861-fcd04580-2894-11ea-9fea-27aac179671d.png)
