In order to get a similar result as the base graphics `xspline` function, the base proto class has to be a path and not a line.

In most cases there will be no difference, although in all the cases when the order of the control points has not an increasing *x* variable the result with a line will be a jittered output (see bug report #64 for details)

Fixes issue #64 
There is a bug in the implementation of `geom_xspline` that produce a jittered line.

Looks like the result is rendered similarly to a `geom_line` rather than a `geom_path`.

```{r}
library(ggplot2)
library(ggalt)

d.test = data.frame(GDP = c(675L, 730L, 745L, 780L, 775L), 
                      GINI = c(58.1, 59.5, 61, 63, 60.5))

p <- ggplot(d.test,aes(x=GDP,y=GINI))+geom_xspline()+geom_point(color="red")
p
```

![image](https://user-images.githubusercontent.com/6343439/70718563-bc979180-1cf0-11ea-9a26-46dc13aff5ee.png)


The interpolation halfway 3rd and 4th points start going up and down between 
expected line and the 5th (and last) point.

As a comparison the equivalent interpolation line from `xspline` is correct:

```{r}
par(mar=c(3,3,1,1))
plot(0,xlim=c(675,780),ylim=c(58,63))
xspline(d.test$GDP,d.test$GINI,shape=-0.25)
xs = xspline(d.test$GDP,d.test$GINI,shape=-0.25,draw=FALSE)
```

![image](https://user-images.githubusercontent.com/6343439/70718649-df29aa80-1cf0-11ea-9225-eb11198565f8.png)

As a further check we can superimpose the `xspline` interpolation on the `geom_xspline` to see the result:

```{r}
p + geom_path(aes(x=x,y=y),data=data.frame(xs), color="red", alpha=0.5, size=2)
```

![image](https://user-images.githubusercontent.com/6343439/70718590-c7522680-1cf0-11ea-9ec8-ba7cbb892db5.png)


## Session information:

```{r}
sessionInfo()
```
```
R version 3.5.1 (2018-07-02)
Platform: x86_64-apple-darwin15.6.0 (64-bit)
Running under: macOS  10.14.6

Matrix products: default
BLAS: /System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/libBLAS.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/3.5/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
[1] ggalt_0.4.0   ggplot2_3.1.0

loaded via a namespace (and not attached):
 [1] Rcpp_1.0.0         Rttf2pt1_1.3.7     rstudioapi_0.9.0   bindr_0.1.1       
 [5] magrittr_1.5       maps_3.3.0         MASS_7.3-51.1      tidyselect_0.2.5  
 [9] munsell_0.5.0      colorspace_1.4-0   R6_2.3.0           rlang_0.3.1       
[13] plyr_1.8.4         dplyr_0.7.8        tools_3.5.1        grid_3.5.1        
[17] gtable_0.2.0       ash_1.0-15         KernSmooth_2.23-15 extrafontdb_1.0   
[21] withr_2.1.2        proj4_1.0-8.1      lazyeval_0.2.1     assertthat_0.2.0  
[25] tibble_2.0.1       crayon_1.3.4       bindrcpp_0.2.2     RColorBrewer_1.1-2
[29] purrr_0.3.0        glue_1.3.0         labeling_0.3       compiler_3.5.1    
[33] pillar_1.3.1       scales_1.0.0       extrafont_0.17     pkgconfig_2.0.2  
```
I'm trying to make a dumbbell chart with additional information about change (green/red) and significance of the change (vol) and add an additional legend for the dots at the end of the dumbbells.

Example plot:

```r
library(ggalt)

# build data set
set.seed(1)

df <- data.frame(country=paste("Region", LETTERS[1:10]))
df$last_year <- runif(nrow(df))
df$this_year <- runif(nrow(df))
df$ydiff <- df$this_year - df$last_year
df$vol <- runif(nrow(df))


# create dumbbell plot
ggplot(df, aes(y=country, group=country)) + 
  geom_dumbbell(aes(x=last_year, xend=this_year, colour = ydiff, size=vol),
                colour_x = "blue",
                colour_xend = "yellow") +
  scale_color_gradient2(low="green", high="red") 
```

![](https://i.stack.imgur.com/uEUNb.png)


Now, I'd like to add a legend about what the yellow and blue dots are, but I cannot add two color scales, since I already use the `gradient2` scale for the bar between the dots. Ideally, I would have a manual fill scale as an additional option to customize the plot (but then I might need long and wide data at the same time). Can you help me?
I'm getting `Error: Not implemented` when trying to use `coord_proj()`. Running an example from the documentation:

``` r
library(ggplot2)
library(ggalt)

world <- map_data("world")
usa <- world[world$region == "USA",]
usa <- usa[!(usa$subregion %in% c("Alaska", "Hawaii")),]

gg <- ggplot()
gg <- gg + geom_cartogram(data=usa, map=usa,
                          aes(x=long, y=lat, map_id=region))
gg <- gg + coord_proj(
   paste0("+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96",
          " +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"))
gg
#> Error: Not implemented
```

I've installed the most recent github commit from ggalt and ggplot2. 
Gives `stat_bkde2d()` the same behavior as `stat_density2d()` -- normalizing the density to the max density per group when facetting.  Similar to the `nlevel` computed stat.

### Before (density)

```r
library(ggplot2)
library(ggalt) # from seasmith/ggalt branch add-ndensity

ggplot(iris, aes(Sepal.Length, Petal.Length)) +
    stat_bkde2d(aes(fill = stat(density)), geom = "raster", contour = FALSE) +
    facet_wrap(vars(Species))
```

![before-ndensity](https://user-images.githubusercontent.com/16291809/60742381-cb546e00-9f32-11e9-8f1d-d98a05fc77a3.png)


### After (ndensity)

```r
ggplot(iris, aes(Sepal.Length, Petal.Length)) +
    stat_bkde2d(aes(fill = stat(ndensity)), geom = "raster", contour = FALSE) +
    facet_wrap(vars(Species))
```

![with-ndensity](https://user-images.githubusercontent.com/16291809/60742341-a233dd80-9f32-11e9-9ae2-f7d4f62946a3.png)


I recently was trying  `geom_xspline` from the `ggalt` to replace an existing `geom_line` in my ggplot object. When using `ggarrange` and `geom_xspline`, a blank screen was output and no other plots could be passed through RStudio until the session was restarted. I left a similar post on the `ggpubr` GitHub page; however, I believe the source of the bug resides in `ggalt`. 

**Working Code w/o `geom_xspline`**
``` r
library(ggplot2)
library(ggpubr)
myplot = ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_line()
ggarrange(myplot, myplot) # Works and outputs fine
```
**Code using `geom_xspline` (no RStudio preview panel output)**
``` r
library(ggalt)
library(ggplot2)
library(ggpubr)
myplot = ggplot(data = mtcars, aes(x = wt, y = mpg)) +
geom_xspline()
ggarrange(myplot, myplot) # Output becomes blank and freezes the plot panel
```
Based upon this stack overflow [page](https://stackoverflow.com/questions/56386084/blank-plot-output-when-using-geom-xspline-in-ggalt-package), the output from `ggarrange` can still be saved, even though it doesn't display in RStudio. 


There is also a **proposed solution** to address the issue by making adjustments to `geom_xspline2`. I am not sure if this is a feasible solution to add to `ggalt` on CRAN but it appears to work with `ggarrange` in this rough example:

``` r
# Create new geom based upon code from ggalt GitHub page
GeomXSpline3 <- ggproto("GeomXSpline3", Geom,
                        required_aes = c("x", "y"),
                        default_aes = aes(colour = "black", shape=-1, open=T),
                        draw_key = draw_key_point,

                        draw_panel = function(data, panel_params, coord) {
                          coords <- coord$transform(data, panel_params)
                          grid::xsplineGrob(
                            coords$x, coords$y,
                            shape = coords$shape, 
                            open = coords$open[1],
                            gp = grid::gpar(col = coords$colour)
                          )
                        }
)

geom_xspline3 <- function(mapping = NULL, data = NULL, stat = "identity",
                          position = "identity", na.rm = FALSE, show.legend = NA,
                          inherit.aes = TRUE, ...) {
  layer(
    geom = GeomXSpline3, mapping = mapping,  data = data, stat = stat,
    position = position, show.legend = show.legend, inherit.aes = inherit.aes,
    params = list(na.rm = na.rm, ...)
  )
}

# Plot with ggarrange
myplot = ggplot(data = mtcars, aes(x = wt, y = mpg)) +
  geom_xspline3(shape = -.25) + geom_point()
ggpubr::ggarrange(myplot, myplot) 
```
![image](https://user-images.githubusercontent.com/37438544/59464766-8a12e780-8de6-11e9-94f3-d657505411de.png)

I'm using geom_dumbbell (really cool btw), to plot 3 values on the x-axis to compare the distances between them. Because it only takes x and x_end args i'm using geom_dumbbell twice, efectively solving my problem. However, since my data changes everytime i run the plot sometimes the line connecting x and x_end of the last plot being created goes over one of the points. Can you see a way around this or another way of plotting 3 values using geom_dumbbell. (example attached)

![dumbbell](https://user-images.githubusercontent.com/8758363/59027808-e0fe4700-8851-11e9-8ffc-4d9730699732.png)



I just had a request for the algorithm used by `geom_encircle()`. This is what I sent; I ought to flesh this out slightly and add it to the docs.

(1) finds the convex hull of the points
(2) if desired (based on the 'expand' argument), moves the points defining the convex hull outward away from the centroid
(3) constructs an 'xspline' through these points; the details of this (and a literature citation) are given in `?grid::xsplineGrob`

Hello,

I was wondering if a feature for `geom_dumbbell()` that would allow the user to select the **linetype** used to connect the ends of each point has been considered. Or perhaps I am missing something in the documentation. I looked through past issues that may be related to this request but the closest I found was a thread asking for a parameter for arrows/direction.

Thank you!
I think that the function comma has been changed and now by default number get rounded to the nearest integer. The pull request adds the parameter to restore the original behavior that was to print one decimal digit.
Without PR:
```r
> byte_format()(1.5 * 1024^3)
[1]  "2 Gb"
```
with PR
```r
> byte_format()(1.5 * 1024^3)
[1]  "1.5 Gb"
```