When given the input:

`netsh int ip set interface $index metric= ($metric + 5)`

You end up with:

`netsh int ip Set-Variable interface $index metric= ($metric + 5)`
For example 
$Uri = $session.RootService.Links.Sessions.'@odata.id'

results in
$Uri = $session.RootService.Links.Sessions . '@odata.id'
If the file being processed refers to a custom type that is defined elsewhere, the beautifier barfs.
For example:
(as used in Microsoft's AzSK framework code)
in Constants.ps1
     class Constants { .. }
in ConfigurationHelper.ps1
     $rootConfigPath = [Constants]::AzSKAppFolderPath  ;
Then edit-dtwBeautifyScript -Verbose -sourcepath ./src/AzSK.Framework/Helpers/ConfigurationHelper.ps1 -DestinationPath /tmp/foo.ps1
will produce many errors (see below) and no output

Hacky work-around:  If I add this line to DTW.PS.Beautifier.Main.psm1 line 420
 $Err = $Err | where  { -not $_.Message.StartsWith("Unable to find type")}
Then it works better.

-----
A few errors generated:
Invoke-TokenizeSourceScriptContent : An error occurred; is there invalid PowerShell or some formatting / syntax issue in the script? See error record below.
At ~/.local/share/powershell/Modules/PowerShell-Beautifier/1.2.5/src/DTW.PS.Beautifier.Main.psm1:1332 char:5

Invoke-TokenizeSourceScriptContent -EV Err
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-TokenizeSourceScriptContent
 
Invoke-TokenizeSourceScriptContent : Unable to find type [Constants]. Content: Constants, line: 18, column: 22
At ~/.local/share/powershell/Modules/PowerShell-Beautifier/1.2.5/src/DTW.PS.Beautifier.Main.psm1:1332 char:5
Invoke-TokenizeSourceScriptContent -EV Err
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
CategoryInfo          : NotSpecified: (:) [Write-Error], WriteErrorException
FullyQualifiedErrorId : Microsoft.PowerShell.Commands.WriteErrorException,Invoke-TokenizeSourceScriptContent
 
Invoke-TokenizeSourceScriptContent : Unable to find type [Constants]. Content: Constants, line: 80, column: 28
At ~/.local/share/powershell/Modules/PowerShell-Beautifier/1.2.5/src/DTW.PS.Beautifier.Main.psm1:1332 char:5




$test = @{ "First Name" = "Bob"; "Last Name" = "Smith" }
Write-Host "First Name : " $test."First Name"
Write-Host "Last Name  : " $test."Last Name"

gets changed to 

$test = @{ "First Name" = "Bob"; "Last Name" = "Smith" }
Write-Host "First Name : " $test. "First Name"
Write-Host "Last Name  : " $test. "Last Name"

it puts a space between $test. and "First Name"/"Last Name".




The attached file is encoded in [System.Text.Encoding]::Default , but the function Get-DTWFileEncoding reports it as UTF-8

[ls.txt](https://github.com/DTW-DanWard/PowerShell-Beautifier/files/2263343/ls.txt)

Hello there, I had a quick look into the script, and it appears that the accelorator/type names are found using:

[psobject].Assembly.GetType("System.Management.Automation.TypeAccelerators")::get

However, if you look into the hashtable that this returns, the casing is correct:
$Table = [psobject].Assembly.GetType("System.Management.Automation.TypeAccelerators")::get
$Table.Keys | % {$Table[$_] | select Name, BaseType}

Maybe it would be better to use these values
I've encountered an issue, where the following snippet
```
netsh interface ipv4 set address blabla
```
gets transformed to
``` 
netsh interface ipv4 Set-Variable address blabla
```
Is there a nice way to fix it? It seems to be handled in `CommandArgument` handler function. I don't see a way to differentiate it from legitimate scenarios though...
This is a known issue for Docker for Windows on Windows 10 running a Windows container (i.e. nanoserver, not Ubuntu or any Linux OS).  It would be most ideal to be able to copy into the container regardless of running/stopped in case user already has a separate session connection to triage an issue (don't want to kill that session).  Unfortunately we can't, bummer, so perhaps we localize this only for Windows containers and explicitly check within the copy function before the copy - host OS and container (server daemon) OS and stop before copy and restart after.  Bummer but probably necessary.

Also, this is lower priority issue; most testing is done on Linux OSes (and I have a VM of Nano running as well, so not a huge deal).
Rather than re-copying over preexisting content on a container, delete the container and recreate each time if user passes switch param.

If performance tests are good, rather than specifying param, could make delete/recreate the default.  Downside is if user is also connected to container (manually poking about, running tests, etc.), stopping and deleting container might not be a wise.... could prompt user...?
Refactor code that identifies whether or not to add whitespace (currently not ideal for adding user-configurable options).  Change to lambda-based design...? 