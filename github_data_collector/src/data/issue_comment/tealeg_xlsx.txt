
`	

    file := xlsx.NewFile()
	sheet, err := file.AddSheet("Sheet1")
	if err != nil {
		fmt.Println(err.Error())
		return
	}

	sheet.Cell(0, 0).SetString("BBBBBB")
	colStyle := xlsx.NewStyle()
	colStyle.Fill.FgColor = "EEEEEE00"
	colStyle.Fill.PatternType = "solid"
	colStyle.ApplyFill = true

	col := xlsx.NewColForRange(10, 10)
	col.SetStyle(colStyle)
	sheet.SetColParameters(col)
	sheet.Cell(1, 1).SetStyle(colStyle)
	err = file.Save("E:/GoMod/xlsx/Tt/d.xlsx")
	if nil != err {
		fmt.Println(err.Error())
		return
	}
`

> d.xlsx
![image](https://user-images.githubusercontent.com/5029131/71706022-69ab8880-2e1d-11ea-85f3-de31888b86e5.png)

```go
for _, sheet := range file.Sheets {
		for _, row := range sheet.Rows {
			for _, cell := range row.Cells {
				cell.GetStyle().Alignment.Horizontal = "center"
			}
		}
	}
```

This code will cost too much mem.
Hope for a more efficient GetStyle implementation
version v2.0.0 ~v2.0.1

[外部数据模版v3.xlsx](https://github.com/tealeg/xlsx/files/4000185/v3.xlsx)

panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x90 pc=0x10e22d6]

```
goroutine 1 [running]:
archive/zip.(*File).findBodyOffset(0x0, 0x38, 0xc0001aab40, 0x1)
        /usr/local/Cellar/go/1.13.4/libexec/src/archive/zip/reader.go:237 +0x36
archive/zip.(*File).Open(0x0, 0xc0001aab40, 0xc0000fb520, 0x6, 0x1290020)
        /usr/local/Cellar/go/1.13.4/libexec/src/archive/zip/reader.go:161 +0x40
github.com/xiao-xiao-xiao/xlsx.readSheetFromFile(0x0, 0xc000166540, 0x9, 0x125ef56, 0x1, 0xc000166560, 0x4, 0x0, 0x0, 0xc0000d6000, ...)
        /Users/yunzhanghu162/go/src/github.com/tealeg/xlsx/lib.go:711 +0x4b2
github.com/xiao-xiao-xiao/xlsx.readSheetsFromZipFile(0xc00009e420, 0xc0000d6000, 0xc000074f60, 0x4e20, 0x0, 0x100b646, 0xc0000a6050, 0x1194280, 0xc00009efd0, 0xc000010060)
        /Users/yunzhanghu162/go/src/github.com/tealeg/xlsx/lib.go:804 +0x54c
github.com/xiao-xiao-xiao/xlsx.ReadZipReaderWithRowLimit(0xc0000a6058, 0x4e20, 0x4737, 0x0, 0x0)
        /Users/yunzhanghu162/go/src/github.com/tealeg/xlsx/lib.go:1073 +0x91f
github.com/xiao-xiao-xiao/xlsx.ReadZipWithRowLimit(0xc0000a6050, 0x4e20, 0x0, 0x0, 0x0)
        /Users/yunzhanghu162/go/src/github.com/tealeg/xlsx/lib.go:982 +0x8f
github.com/xiao-xiao-xiao/xlsx.OpenFileWithRowLimit(0xc000014080, 0x38, 0x4e20, 0x38, 0xc0000cfb80, 0x1042427)
        /Users/yunzhanghu162/go/src/github.com/tealeg/xlsx/file.go:55 +0x7d
main.ReadXlsx2(0xc000014080, 0x38, 0x1f, 0x116d821, 0x19, 0xc000014080, 0x38)
        /Users/yunzhanghu162/go/src/test/main.go:58 +0x56
main.main()
        /Users/yunzhanghu162/go/src/test/main.go:133 +0x81
exit status 2
```

code:
```
		worksheetRelsFile := fi.worksheetRels["sheet"+rsheet.SheetId]
		worksheetRels := new(xlsxWorksheetRels)
		rc, err := worksheetRelsFile.Open()
		if err != nil {
			return nil, err
		}

```

worksheetRelsFile  is Null
version: v2.0.1
![image](https://user-images.githubusercontent.com/23097891/71431615-07ac9e00-270e-11ea-988f-b6d3f074549b.png)

```go
func main() {
	file := xlsx.NewFile()
	array := [][]string{[]string{"1"}, []string{"2"}}
	sheet, err := file.AddSheet("Sheet1")
	if err != nil {
		panic(err)
	}

	for _, arr := range array {
		if n := sheet.AddRow().WriteSlice(&arr, len(arr)); n == -1 {
			panic(-1)
		}
	}

	sheet.SetColWidth(0, len(array[0])-1, 50)
	sheet.Cols.ForEach(func(idx int, col *xlsx.Col) {
		fmt.Println(idx, col.Width)
	})
	err = file.Save("./test.xlsx")
	if err != nil {
		panic(err)
	}
}
```
[testlargefile.xlsx](https://github.com/tealeg/xlsx/files/3991249/testlargefile.xlsx)
this file hava many rows and cols  need  a large of memory ,

below function can support ?
```go
OpenFileWithCtx(ctx context.Context, path)(*File, error)

ctx, cancel := ctx, cancel := context.WithTimeout(context.Background(), 200*time.Millisecond)
defer cancel()
f, err := OpenFileWithCtx(ctx, path)
```

when i open an xlsx file, there is an error "runtime error:index out of range" occurred in xmlStyle.go at line 264.

```
if color.Indexed != nil && styles.Colors != nil {
      return styles.Colors.indexedColor(*color.Indexed, color.Tint)
}
return color.RGB

func (c *xlsxColors) indexedColor(index int, tint float64) string {
      return c.IndexedColors[index-1].Rgb
}

```

https://github.com/tealeg/xlsx/issues/504#issuecomment-561472169

Hi,

https://github.com/tealeg/xlsx/commit/c72a01546f5727e65dd2e401d84848dbe47c110c introduces a change that makes previously fine code panic.

Now this generates a panic:

```
file := xlsx.NewFile()
sheet, _ := file.AddSheet("Sheet1")
sheet.Col(1)
```

What is the new way of accessing a column to set a style?

I would like to start by thanking you for building a great Excel library.

One improvement that would be awesome would be to be able to support loading and writing documents containing charts and drawings. 

A use case example, you want to build an Excel report that contains some fancy charts, in order to achieve this you load `template.xlsx` that contains the charts and one sheet that you populate with data. Then write the result to `report.xlsx`.

I have tested a simple workaround where i just copy the `xl/chart/**` and `xl/drawings/**` files from `template.xlsx` to `report.xlsx`. This naive solution does not work, Excel finds the file damaged and removes the charts when it attempts to fix the problem. So I guess it is required to keep some references up to date when modifying the file, which I have not investigated further.

**Excel files contents for reference:**

```
Archive:  template.zip
  inflating: [Content_Types].xml
  inflating: _rels/.rels
  inflating: xl/_rels/workbook.xml.rels
  inflating: xl/workbook.xml
  inflating: xl/styles.xml
  inflating: xl/sharedStrings.xml
  inflating: xl/drawings/drawing1.xml
  inflating: xl/charts/chart1.xml
  inflating: xl/theme/theme1.xml
  inflating: xl/charts/colors1.xml
  inflating: xl/charts/style1.xml
  inflating: xl/charts/_rels/chart1.xml.rels
  inflating: xl/worksheets/sheet2.xml
  inflating: xl/worksheets/sheet1.xml
  inflating: xl/worksheets/_rels/sheet2.xml.rels
  inflating: xl/drawings/_rels/drawing1.xml.rels
  inflating: docProps/app.xml
  inflating: docProps/core.xml

Archive:  report.zip
  inflating: [Content_Types].xml
  inflating: xl/worksheets/sheet1.xml
  inflating: xl/worksheets/sheet2.xml
  inflating: docProps/app.xml
  inflating: xl/theme/theme1.xml
  inflating: xl/sharedStrings.xml
  inflating: xl/workbook.xml
  inflating: _rels/.rels
  inflating: docProps/core.xml
  inflating: xl/_rels/workbook.xml.rels
  inflating: xl/styles.xml
```


