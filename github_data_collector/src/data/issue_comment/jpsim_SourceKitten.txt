Used SPM for 27 and worked ok, tried swift package update, caused build errors - Yaml.h header not found.

Tried to use PM inside Xcode - now getting Framework not found Yams.

Prefer to use SPM from CLI as seemingly more mature, but no joy.

https://github.com/realm/SwiftLint/blob/4aad7e14b477b4f25eb47f7d46577d614ce16924/Source/SwiftLintFramework/Protocols/Rule.swift#L97 gets parsed as 

```swift
func violationRanges(in file: File, kind: KindType,
```
instead of
```swift
func violationRanges(in file: SwiftLintFile, kind: KindType,
                         dictionary: SourceKittenDictionary) -> [NSRange]
```
I'm *super* new to Swift and Xcode and *fairly inexperienced* with programming. 

But I'm trying to learn Swift, and since Playgrounds are unbearably slow on my old MacBook Air I'm experimenting with Swift in Sublime Text. Not to build anything, just to get the syntax straight. 

I figured code completion would be nice to learn more about the available methods and came across [SwiftKitten](https://github.com/johncsnyder/SwiftKitten). However it offers no completions and upon investigating a bit I found that I can't seem to get completions to work via the command line tool. Running any kind of `sourcekitten complete` command:

```bash
sourcekitten complete --text "0." --offset 2
# returns: []
sourcekitten complete --text "let hello = 5;hell" --offset 14
# returns: []
sourcekitten complete --text "import UIKit ; UIColor." --offset 22 -- -target arm64-apple-ios13.1 -sdk /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS13.1.sdk
# returns: []
.
.
.
```

just returns an empty list. This is probably due to my own stupidity, however I can't seem to get to the bottom of it. 

I'm using **Xcode Version 11.1** and running `xcode-select -p` returns `/Applications/Xcode.app/Contents/Developer`. I'd really appreciate any help ü§ì 

Hi!

I'm using sourcekitten to generate docs for a project with multiple modules.  However, the vast majority of modules depend on a couple similar modules.  Is there a way to run the build to re-use the previously built dependencies?  Maybe the xcodebuild options could change to not do a clean.


For example:

#### modules
Foo
Bar
Baz

### dependencies
Bar:
 - Foo

Baz:
 -Foo

I want to generate docs for all 3 modules but don't want to rebuild `Foo` for each module

I have a file with the given content:

```
public class Entity {}

```

And I do this:
```
let url = URL(string: "Path for the file")!
print(SwiftDocs(file: File(path: url.absoluteString)!, arguments: ["-j4", url.absoluteString])!)
```

I have got information about my code but there is no "key.parsed_declaration" value:
```
{
  "Path for the file" : {
    "key.diagnostic_stage" : "source.diagnostic.stage.swift.parse",
    "key.length" : 23,
    "key.offset" : 0,
    "key.substructure" : [
      {
        "key.accessibility" : "source.lang.swift.accessibility.public",
        "key.attributes" : [
          {
            "key.attribute" : "source.decl.attribute.public",
            "key.length" : 6,
            "key.offset" : 0
          }
        ],
        "key.bodylength" : 0,
        "key.bodyoffset" : 21,
        "key.kind" : "source.lang.swift.decl.class",
        "key.length" : 15,
        "key.name" : "Entity",
        "key.namelength" : 6,
        "key.nameoffset" : 13,
        "key.offset" : 7,
        "key.runtime_name" : "_TtC4main6Entity"
      }
    ]
  }
}
```

Do you have any ideas why I can't get "key.parsed_declaration" value?
Getting following errors, I have tried latest version (24).

`let task = Process()`

> Use of unresolved identifier 'Process'

```
if #available(macOS 10.13, *) {
    options = [.prettyPrinted, .sortedKeys]
} else {
    options = .prettyPrinted
}
```
> 'sortedKeys' is only available in iOS 11.0 or newer
I am not able to use `sourcekitten doc` on ubuntu 18.04 using Swift 5.1. I get this uninformative crash: 

```
Parsing Dimension.swift (1/15)
fish: ‚Äúsourcekitten doc --spm-module N‚Ä¶‚Äù terminated by signal SIGILL (Illegal instruction)
```
Is it possible to use the sourcekitten framework in an app submitted to the App Store?

Obviously, App Store apps need to be sandboxed. Unfortunately, simply turning that on doesn't work. I get `xcrun: error: cannot be used within an App Sandbox`.

So I found [this issue](https://github.com/jpsim/SourceKitten/issues/271) that suggested wrapping SourceKitten in an XPC Service. I did so, turned sandboxing on in my app, and it worked as intended! So I submitted to the App Store and it failed upon upload because The XPC Service needs to be sandboxed too...

So I turned sandboxing on for the XPC Service and was confronted with `xcrun: error: cannot be used within an App Sandbox` again.

Is this just impossible? Or is there more to it to get it to work?
I'm using SourceKitten to improve syntax highlighting and add code completion for my app [Swift Coder](https://github.com/joshbirnholz/Swift-Coder).

I've managed to get code completion suggestions through SourceKitten so far, but it gave me an idea. Seeing the "docBrief" one-line descriptions made me think about implementing something like this:

<img width="518" alt="Screen Shot 2019-05-07 at 12 10 59 AM" src="https://user-images.githubusercontent.com/4167834/57271237-b48dba00-705c-11e9-89eb-ee942fd85b0b.png">

Or, basically, Xcode's Quick Help inspector.

I'm not sure where I should be looking to get this information through SourceKit, or if it's something I can get at all. I can't figure out how to get a cursor offset request to work properly or even if that would be helpful. I don't need this to be super in-depth, maybe just showing the "summary" section would be enough, with maybe also a link to the full documentation. I think it'd be pretty helpful for people learning Swift!
> This pattern is repeated enough times to be worth a small helper. If it's internal to SourceKittenFramework we can still use it from tests by using `@testable import SourceKittenFramework` without polluting our public API.

_Originally posted by @jpsim in https://github.com/jpsim/SourceKitten/pull/581_