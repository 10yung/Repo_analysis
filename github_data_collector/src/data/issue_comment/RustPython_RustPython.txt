
PyPy uses a totally different approach to object layout than CPython which saves a huge amount of memory (25% - 50%) on the overhead of objects when there are many objects with the same layout (same attributes).

I haven't seen any information about whether there is a slight performance penalty for the added indirection, although I believe the PyPy JIT is able to optimize it away.  I'm also not sure if it contributes to making native code extensions more difficult.  It's a big enough savings to warrant a serious consideration, though.

Details here:

https://dev.nextthought.com/blog/2018/08/cpython-vs-pypy-memory-usage.html
https://morepypy.blogspot.com/2010/11/efficiently-implementing-python-objects.html#using-maps-for-memory-efficient-instances
based on #1688 

I will rebase this one after merging 1688 but basically work is done.

My plan I had in #1411 didn't work out because I failed to account for `PyClassRef` and `Rc<PyObject<PyClass>>` not being the same size due to the former being a trait object, so I went with using raw trait object manipulation.

cc @silmeth
C implementation of timing safe compare that I used as reference: https://github.com/python/cpython/blob/master/Modules/_operator.c#L727
## Summary

<!-- A quick overview of your suggestion -->
Suggetion from https://github.com/RustPython/RustPython/pull/1649#issuecomment-573396672

## Detailed Explanation

<!-- Elaborate on your suggestion in all its details -->

## Drawbacks, Rationale, and Alternatives

<!-- What drawbacks might this solution have? Why do you feel it is necessary? What other options might there be to solving this problem? -->

## Unresolved Questions

<!-- What would you like feedback on for fleshing out your suggestion? -->


- Add a new snippet, asyncbrowser - a mini `async/await` executor built on the browser event loop.
  - Maybe eventually turn it into a module?
- Combine `index.js` and `main.js` into one, to avoid the page being essentially without content while the wasm payload loads.
- Add `rp.pyExec` and `rp.pyExecSingle` to the "documentation".
- Improve the ci testing for wasm
  - Handle serving the demo and waiting inside python, so that you can just build the demo and run `pipenv run pytest` without having to mess with the npm commands.
  - Deduplicate the `driver` fixture, move it to `wdriver` in `conftest.py`.
I created a [recipe in conda-forge](https://github.com/conda-forge/rustpython-feedstock/blob/master/recipe/meta.yaml), so that you can `conda install rustpython -c conda-forge`.
It works fine but usually we want to compile from source, and here it bypasses that since it uses cargo. I'm quite a novice in Rust, how can we compile from source?
Also the only release in GitHub is `0.1.0`, but in `crates.io` it is `0.1.1`. Maybe you should make a GitHub release?