**Node` version**: 12.13.1
**Sails version** _(sails)_: 1.2.3 
**ORM hook version** _(sails-hook-orm)_: 2.1.1 
**Sockets hook version** _(sails-hook-sockets)_: 2.0.0 
**Grunt hook version** _(sails-hook-grunt)_: 4.0.1
<hr/>

`./config/http.js`

`module.exports.http = {

  locals: {
    filters: {
      numberFormat: function(num) { return Utility.numberFormat(num);  }
    }
  }`

`Utility.js`

 `numberFormat: function(num, decimal_point) {
            var self = this;
            if (typeof num != "number") return 0;
            var lang = (typeof sails.config.lang == "undefined") ? 'en' : sails.config.lang;

            decimal_point = (typeof decimal_point == "undefined") ? 0 : decimal_point;
            num = num.toString();
            num = num.replace(/ /g, '');
            num = num.replace(/,/g, '');
            num = parseFloat(num);

            // lets deal with float values
            if (!(parseInt(num) === num)) {
                decimal_point = self.decimalPlaces(num);
            }

           if (lang == 'es') {
                number = self.number_format(num, decimal_point, ',', '.');
            } else {
                number = self.number_format(num, decimal_point, '.', ',');
            }
            return number;

        }`

`EJS`

`<b class="gauge__value"><% req.session.config_data  | numberFormat %></b>`


`Error`
numberFormat is undefined

Please help.
How can I exclude the specific model from auto-migration in sails v1.0
I have tried to add migrate: 'safe' in the model. but it's not working.

**Node version**: v10.15.3
**Sails version** _(sails)_: 1.0.0
**ORM hook version** _(sails-hook-orm)_: 2.0.0-16
**Sockets hook version** _(sails-hook-sockets)_: 1.4.0
**Grunt hook version** _(sails-hook-grunt)_: 3.0.2
**DB adapter & version** _(e.g. sails-mysql@5.55.5)_: 1.0.1
<hr/>

**Node version**: v10.16.0
**Sails version** _(sails)_: 1.2.3
**ORM hook version** _(sails-hook-orm)_: 2.1.1
**Sockets hook version** _(sails-hook-sockets)_: 2.0.0
**Organics hook version** _(sails-hook-organics)_: 1.0.0 
**Grunt hook version** _(sails-hook-grunt)_: 4.0.1
**Uploads hook version** _(sails-hook-uploads)_: 0.4.3
**DB adapter & version** _(e.g. sails-mysql@5.55.5)_: sails-mysql@1.0.1
**Skipper adapter & version** _(e.g. skipper-s3@5.55.5)_: skipper-s3@0.6.0
<hr/>

Hello,

I want to create a multi tenancy with my own method.
I have this idea, which is checking a datastore owned by current user then pass it to sails.config or process.env variable. Then I've tried to use the datastore passed to sails.config or process.env in the datastore model definition. but it failed because it's not switching the datastore.
I have another idea to switch the datastore in controller, However I have no idea how to do that?
Or Can it actually switch the datastore dynamically in the model definition after sails lift?

**Node version**: 13.6.0
**Sails version** _(sails)_: 1.2.3
**ORM hook version** _(sails-hook-orm)_: 2.1.1
**Sockets hook version** _(sails-hook-sockets)_: 2.0.0
**Organics hook version** _(sails-hook-organics)_: 1.0.0
**Grunt hook version** _(sails-hook-grunt)_: 4.0.1
**Uploads hook version** _(sails-hook-uploads)_: 0.4.3
**DB adapter & version** _(e.g. sails-mysql@5.55.5)_: sails-disk@1.1.2
**Skipper adapter & version** _(e.g. skipper-s3@5.55.5)_: skipper-s3@0.6.0
<hr/>
<h2>The issue</h2>
I stumbled across the issue while playing around with 'has many through' associations  in terms of resourceful pubsub. When removing a model instance with this kind of association one would expect the resourceful pubsub to notify all associated model instances about the removal. This does not work and even worse the pubsub routine crashes when invoking a DELETE on a model with 'has many through' associations.
<h3>How to reproduce</h3>

- Create two models `Post` and `Tag`
- Create another model `TagAssignment` as an association table
- Create the 'has many through' association in `Post` and `Tag` and the corresponding associations in `TagAssignment`
- Spin up sails
- Create one Post and one Tag and associate them (actually the association is not necessary as far as I am concerned, I am including this for the sake of completeness)
- Delete either the created Post or Tag

_Post.js_
```javascript
module.exports= {
  attributes: {
    tags: {
      collection: "tag",
      via: "post",
      through: "tagassignment"
    }
  }
};
```
_Tag.js_
```javascript
module.exports= {
  attributes: {
    posts: {
      collection: "post",
      via: "tag",
      through: "tagassignment"
    }
  }
};
```
_TagAssignment.js_
```javascript
module.exports= {
  attributes: {
    post: {
      model: 'post'
    },
    tag: {
      model: 'tag'
    }
  }
};
```

<h3>Behaviour of different database adapters</h3>

The issue behaves different when comparing the _sails-disk_ adapter with the productive adapters (that's why this is not an DoS issue). When using _sails-disk_ the exception thrown is not being caught thus killing the server immediately - rendering 'many-to-many through' associations in development nearly useless. All productive adapters catch the exception and log it to stdout (can result in heavy log spam if many models with this kind of association exist).

<h3>Exception with stacktrace</h3>

```
/home/fabian/Dokumente/laboratory/myapp/node_modules/sails/lib/hooks/pubsub/index.js:701
                if (reverseAttribute.model) {
                                     ^

TypeError: Cannot read property 'model' of undefined
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/sails/lib/hooks/pubsub/index.js:701:38
    at arrayEach (/home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:1470:13)
    at Function.<anonymous> (/home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:3532:13)
    at newConstructor.<anonymous> (/home/fabian/Dokumente/laboratory/myapp/node_modules/sails/lib/hooks/pubsub/index.js:699:17)
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:3061:23
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:3236:15
    at Function.<anonymous> (/home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:3533:13)
    at newConstructor._publishDestroy (/home/fabian/Dokumente/laboratory/myapp/node_modules/sails/lib/hooks/pubsub/index.js:669:13)
    at newConstructor.wrapper [as _publishDestroy] (/home/fabian/Dokumente/laboratory/myapp/node_modules/@sailshq/lodash/lib/index.js:3282:19)
    at destroyedRecord (/home/fabian/Dokumente/laboratory/myapp/node_modules/sails/lib/hooks/blueprints/actions/destroy.js:68:15)
    at proceedToFinalAfterExecLC (/home/fabian/Dokumente/laboratory/myapp/node_modules/parley/lib/private/Deferred.js:1157:14)
    at proceedToInterceptsAndChecks (/home/fabian/Dokumente/laboratory/myapp/node_modules/parley/lib/private/Deferred.js:913:12)
    at proceedToAfterExecSpinlocks (/home/fabian/Dokumente/laboratory/myapp/node_modules/parley/lib/private/Deferred.js:845:10)
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/parley/lib/private/Deferred.js:303:7
    at _afterIteratingOverRecords (/home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/lib/waterline/methods/destroy.js:550:26)
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:486:20
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:855:24
    at eachOfLimit (/home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:915:26)
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:920:20
    at eachOf (/home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:1052:9)
    at Object.eachLimit (/home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/node_modules/async/dist/async.js:3111:7)
    at /home/fabian/Dokumente/laboratory/myapp/node_modules/waterline/lib/waterline/methods/destroy.js:522:23
```

<h3>Root cause</h3>

I am new to sails and do not understand every single aspect of the framework. But I tried to analyse the issue based on the exception thrown. By having a look at the source files I was able to determine the root cause of this issue. It seems like the pubsub routine tries to access the reverse attribute of the referenced model using the `via` key provided in the model. As in 'many-to-many through' associations one provides the `via` key of the association table (and not the reverse attribute of the referenced model) pubsub is unable to access the reverse attribute (e. g. when deleting a `Post` instance the pubsub routine tries to access the Attribute `post` of `Tag` - which is undefinied in the general case).
`Usage: sails [command] [options]`
**Node version**: v12.13.1
**Sails version** _(sails)_: 1.2.3
**ORM hook version** _(sails-hook-orm)_: 2.1.1
**Sockets hook version** _(sails-hook-sockets)_: 2.0.0
**Organics hook version** _(sails-hook-organics)_: 0.16.
**Grunt hook version** _(sails-hook-grunt)_: 4.0.0
**Uploads hook version** _(sails-hook-uploads)_: N/A
**DB adapter & version** _(e.g. sails-mysql@5.55.5)_: sails-mysql@1.0.1
**Skipper adapter & version** _(e.g. skipper-s3@5.55.5)_: N/A

---

Generated `passwordResetToken` and `emailProofToken` are not case-sensitive which significantly decreases their security.

**Steps to reproduce**: Generate a password reset email, or account confirmation email. Copy/paste the link. Change the case of any of the letters in the token. The token will still work despite it not being an actual string match.
**Sails version** _(sails)_: 1.2.3
<hr/>

There are a number of sails dependencies which switch behaviour depending on `NODE_ENV === 'production'`/`NODE_ENV !== 'production'`.

This means that if environment-specific config is used for a staging environment, as per the sails template project, using `config/env/staging.js` and the env var `NODE_ENV=staging`, **staging environments will be following different code paths to production environments**.

This is unexpected, and probably not desirable in the majority of use-cases.

Is there a simple way to choose that `config/env/staging.js` is loaded instead of `config/env/production.js`, even when the `NODE_ENV` environment variable is set to `production`?
**Node version**: "v10.15.2"
**Sails version** _(sails)_: "1.2.3"
**ORM hook version** _(sails-hook-orm)_: "2.1.1"
**Sockets hook version** _(sails-hook-sockets)_: "1.5.5"
**Organics hook version** _(sails-hook-organics)_: -
**Grunt hook version** _(sails-hook-grunt)_: "3.1.1"
**Uploads hook version** _(sails-hook-uploads)_: -
**DB adapter & version** _(e.g. sails-mysql@5.55.5)_: "sails-mongo": "^1.0.1"
<hr/>

Hi Everyone,

I ran into an issue today, I deployed an API into production (with docker) for the first time (on an empty database) and my users could register twice (or more) with the same email, even though I set it to 'unique: true' in my User model.

After some research, I discovered that "migrate: safe" in production also means that it's NEVER going to create indexes or constraint, **even on the first launch when database is not even created** !
I also discovered that it's impossible to set migrate to alter in production (which I understand).

This is very confusing because everyone expect the database to be correctly setup on first launch ! Especially when it's working in development environment !

The worst part is that it's not even yelling at you in any way. It's like everything is working perfectly fine except not.

In my opinion, it should either be written in bold capital letters in the documentation or fixed.

What do you think ?
**Node version**: v13.0.1
**Sails version** _(sails)_: 1.2.3
**ORM hook version** _(sails-hook-orm)_: ^2.1.1
**Sockets hook version** _(sails-hook-sockets)_: ^2.0.0
**Grunt hook version** _(sails-hook-grunt)_: ^4.0.0
**Sails mongo version** _(sails-mongo)_: ^1.0.1

This is master model
```javascript
module.exports = {
  tableName: 'MASTER',
  schema: true,
  attributes: {
    name: {
      type: 'string',
      required: true
    },
    description: {
      type: 'string'
    },
  },
};
```
whenever i am not passing description column value in request then it is storing as empty string value like this:

```javascript
{
  name : 'Swift',
  description : "",
};
```
But i don't want to store description value in database.i need help asap
 


<hr/>
fix for issue: #6916
