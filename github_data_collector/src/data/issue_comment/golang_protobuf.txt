We should return structured errors of some form. There doesn't need to be a lot of complexity here and it's best to start by providing as little information as possible and expand from there, but some degree of structure beyond `nil`/non-`nil` would be good.

At a minimum, all proto module errors should match (with `errors.Is`) some common error. I'm cleaning up cases inside Google that depend on exact error text, and "is this a proto error" is both common and reasonable to ask in tests.

```go
if errors.Is(err, proto.Error) {
  // This error was returned by some function in the proto module.
}
```

Possible additional errors to consider:

* initialization check failure (missing required fields)
* parse error (bad wire/text/json data)
   * Do we have one category for all parse errors, or specific errors in `proto`/`prototext`/`protojson`?
   * On a related note, we shouldn't return irrelevant detail from `proto.Unmarshal`--"unknown wire type 16" is confusing, "invalid proto wire format" is better.
* `protoregistry.NotFound` already exists

In all cases, we should consistently return errors that wrap a sentinel (like `protoregistry.NotFound`) instead of returning the sentinel directly, to permit us to include additional information in the error text.
add option to  render int64 values as integer values,  as opposed to string 
**What version of protobuf and what language are you using?**
Protobuf version 1.3.2
Go version 1.13.5

**What did you do?**
I am working with the Google My Business API and I am attempting to retrieve the JSON response of a location.
https://developers.google.com/my-business/reference/rest/v4/accounts.locations/get

After retrieving the JSON, I am unmarshaling it as a [Location object](https://developers.google.com/my-business/reference/rest/v4/accounts.locations#Location). This Location object contains an `attribute` field which is an array of [Attribute objects](https://developers.google.com/my-business/reference/rest/v4/accounts.locations#attribute). Within the attribute object is another array of protobuf [Values](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Value).

In my Go code, I have a .go file containing all of the structs which make up this `Location` struct. In this file I am importing the following:
```
import (
	structpb "github.com/golang/protobuf/ptypes/struct"
)
```

And when I define this `Attribute` struct I define the `Values` with the following:
```
type Attribute struct {
	AttributeId string `json:"attributeId"`
	ValueType AttributeValueType `json:"valueType"`
	Values []structpb.Value `json:"values"`
	RepeatedEnumValue RepeatedEnumAttributeValue `json:"repeatedEnumValue"`
	UrlValues []UrlAttributeValue `json:"urlValues"`
}
```

The JSON that I am receiving from the GMB API contains the following attributes component:
``` 
"attributes": [
    {
      "attributeId": "pay_debit_card",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "has_wheelchair_accessible_elevator",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "has_service_installation",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "pay_check",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "has_delivery_same_day",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "has_gift_wrapping",
      "valueType": "BOOL",
      "values": [
        false
      ]
    },
    {
      "attributeId": "requires_cash_only",
      "valueType": "BOOL",
      "values": [
        false
      ]
    },
    {
      "attributeId": "has_wheelchair_accessible_entrance",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "has_service_repair",
      "valueType": "BOOL",
      "values": [
        true
      ]
    },
    {
      "attributeId": "wi_fi",
      "valueType": "ENUM",
      "values": [
        "free_wi_fi"
      ]
    },
    {
      "attributeId": "pay_credit_card_types_accepted",
      "valueType": "REPEATED_ENUM",
      "repeatedEnumValue": {
        "setValues": [
          "american_express",
          "discover",
          "mastercard",
          "visa"
        ]
      }
```

The function in which I am receiving this JSON and unmarshaling is:
```
func GetStore(accessToken string) {
	response, err := http.Get(fmt.Sprintf("%vaccounts/%v/locations/%v?access_token=%v", gmbBaseUri, "104256381367782693902", "10772730936382702757", accessToken))

	if err != nil {
		fmt.Printf("The HTTP request failed with error %s\n", err)
	}
	data, _ := ioutil.ReadAll(response.Body)
	fmt.Println(string(data))
	var location Location
	if err := json.Unmarshal(data, &location); err != nil {
		panic(err)
	}
	fmt.Println(location.Name)
}
```

**What did you expect to see?**
If this code was working correctly, my function would correctly unmarshal the JSON into a Location object and it would print out the name of the Location as specified in the JSON. 

**What did you see instead?**
Instead, I am receiving the following error:

> panic: json: cannot unmarshal bool into Go struct field Attribute.attributes.values of type structpb.Value

Which fails at the `panic(err)` line when unmarshaling.

**Anything else we should know about your project / environment?**
I am running this locally using the GoLand IDE

For extensions, we currently generate `E_ExtensionField` variables of the [`ExtensionType`](https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#ExtensionType) type. This is unfortunate since there thousands of usages where people want to access the extension name or number. The new API would require people to do something like:
```go
foopb.E_MyExtension.TypeDescriptor().Number()
```

Given how common it is that people want access to descriptor information, it seems unfortunate to keep going through the `TypeDescriptor` method. Perhaps we should generate something that implements the [`ExtensionTypeDescriptor`](https://pkg.go.dev/google.golang.org/protobuf/reflect/protoreflect?tab=doc#ExtensionTypeDescriptor) type instead. Thus, people can directly access the information they want as:
```go
foopb.E_MyExtension.Number()
```
Of course, we can't change the type of `E_MyExtension`, so this will need a new name (perhaps `MyExtension_field`?).

If newly generated variable to represent extension fields is an `ExtensionTypeDescriptor`, then perhaps the [`GetExtension`](https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#GetExtension), [`SetExtension`](https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#SetExtension), [`HasExtension`](https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#HasExtension), [`ClearExtension`](https://pkg.go.dev/google.golang.org/protobuf/proto?tab=doc#ClearExtension) functions in the `proto` package should keyed by `ExtensionTypeDescriptor` instead of `ExtensionType`.
The APIv2 `protoc-gen-go` is generating code that doesn't work with the current APIv1 proto package, failing with a panic at runtime when passed to a v1 function:

```
panic: protobuf tag not enough fields in Message.state: 
```

We will have an updated APIv1 package that's compatible with these messages, but that doesn't help the case when someone is using the older package. It's okay for new generated code to require newer package versions, but compatibility failures need to be detected at compile time (or, worst case, init time), not runtime.
Should there be a way for protobuf reflection to distinguish `proto.Message` values that are truly invalid?

Currently, we have `protoreflect.Message.IsValid` which indicates that the current Go value is functionally a read-only empty message. This implies that the current value has protobuf type information (i.e., `Descriptor` and `Type` methods are callable).

However, there are a number of Go types that possess a higher level of "invalid"-ness. For example, the zero value of [`dynamicpb.Message`](https://github.com/golang/protobuf/blob/1c8015fff55f69bef3ec996724ef5454a15f0d74/types/dynamicpb/dynamic.go#L47-L50) and [`ptypes.DynamicAny`](https://github.com/golang/protobuf/blob/cc376d7145c679febdd10557ded10ff26a681fbb/ptypes/any.go#L134-L139) obviously cannot contain protobuf type information since they are both concrete Go types that may may represent any arbitrary protobuf message type.

The issue today is that a user of protobuf reflection cannot distinguish such messages and risk panicking whenever they call the methods on `protoreflect.Message`. For example, `protocmp.Transform` will choke on the zero value of `dynamicpb.Message`.

Some possibilities (some or all of these may be done) regarding truly invalid values:
* Document that calling `proto.Message.ProtoReflect` on returns `nil`.
* Document that calling `protoreflect.Message.Type` or `protoreflect.Message.Descriptor` returns `nil`.

(I define "truly invalid" as a concrete value that has no sensible protobuf message type associated with it at the present moment.)
This issue is for tracking notable changes that need to appear in the APIv2 release notes.
Text unmarshaling does not preserve the sign of floating point `-0`.

Test case (in `encoding/prototext/decode_test.go`):

```
        }, {
                desc:         "float negative zero",
                inputMessage: &pb3.Scalars{},
                inputText:    "s_float: -0",
                wantMessage: &pb3.Scalars{
                        SFloat: float32(math.Copysign(0, -1)),
                },
        }, {
```

https://oss-fuzz.com/testcase-detail/5683024310304768
Current tests for encoding/{prototext,protojson} uses test protos under encoding/testprotos/...  We should migrate the tests to use protos under internal/testprotos/... to be consistent with other features and also expand the scope as much as possible.
Consider not generating the ExtensionRangeArray method on generated message structs. It's no longer used by the implementation, and isn't a useful user-facing API.