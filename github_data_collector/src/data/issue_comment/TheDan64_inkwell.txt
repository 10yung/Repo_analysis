@TheDan64 Here's my changes, after switching from my own fork of llvm-sys to the mainline fork. Everything compiles cleanly, but naturally there are merge conflicts with master, as this branch is a bit behind, albeit not by that much. It also includes things that aren't strictly required for the LLVM 9 update, but which I needed, so they ended up on this branch. Nothing convtroversial I don't think, but worth keeping an eye on just in case.

I'm not sure I'll have time to get things caught up with master this week or next, but if nobody else gets to it, I'll return to it as soon as I can. Feel free to take this branch and hack it up as needed though!
Not sure if this is a bug or not but I'm experiencing long compilation times (> 2 mins) when using Inkwell. 2 mins doesn't sound like much but it feels like an eternity when developing.

I'm on Windows 10, using a manually compiled Release version of LLVM 8.0.1 compiled using Visual Studio 2019.

LLVM offers a number of intrinsics roughly corresponding to C library functions, for instance `memcpy` and `memset`. From the [LLVM reference](https://llvm.org/docs/LangRef.html): "these intrinsics allow source-language front-ends to pass information about the alignment of the pointer arguments to the code generator, providing opportunity for more efficient code generation."

It would be nice if inkwell provided access to these intrinsics.

The implementation would probably consist of a few trivial wrappers in the `Builder` for llvm-sys functions.
How do I link a simple hello-world LLVM module into an executable using LLD?
Per [this documentation for LLVM](https://lld.llvm.org/), this is possible from code but I am not sure it is implemented in Inkwell.
Hi ðŸ‘‹ 
It would be nice to have LLVM 9 bindings exposed in a separate branch.
That will help me a lot for a project that I want to publish soon.
`quote`, `syn`, and `proc-macro2` should be upgraded to 1.0
**Describe the Bug**
> The â€˜icmpâ€™ instruction returns a boolean value or a vector of boolean values based on comparison of its two integer, integer vector, pointer, or pointer vector operands.
-- https://llvm.org/docs/LangRef.html#icmp-instruction

There doesn't appear to be a builder function that builds comparisons of pointers. I'm not sure whether IntMathValue permits vectors of pointers, though it probably does by accident?

The same `LLVMBuildICmp` C API function supports pointers just fine.

For now I'm using something like this:
> ```
>    // Note: see comment on build_int_compare regarding return value type
>    pub fn build_pointer_compare<T: PointerMathValue>(&self, op: IntPredicate, lhs: T, rhs: T, name: &str) -> <<T::BaseType as PointerMathType>::PtrConvType as IntMathType>::ValueType {
>        let c_string = CString::new(name).expect("Conversion to CString failed unexpectedly");
>
>        let value = unsafe {
>            LLVMBuildICmp(self.builder, op.into(), lhs.as_value_ref(), rhs.as_value_ref(), c_string.as_ptr())
>        };
>
>        <<T::BaseType as PointerMathType>::PtrConvType as IntMathType>::ValueType::new(value)
>    }
>```
but I feel like that's a bit of a hack (there is no equivalent to build pointer compare in LLVM, it's all just integer comparisons) so I didn't put it in a PR.
**Describe the Bug**
Functions have an as_global_value() method to cast to a GlobalValue. GlobalValues have get_thread_local_mode() which gets the current thread local storage mode. That property only exists on C++ llvm::GlobalVariable which is a subclass of C++ llvm::GlobalValue. (C++ llvm::Function is also a subclass of C++ llvm::GlobalValue, so the as_global_value() method should be there, but maybe inkwell should grow a GlobalVariable class to match the safety of the C++ API.)

**To Reproduce**
test_values.rs' test_function_value_to_global_to_pointer() demonstrates the bug:
```
    let fn_value = module.add_function("my_func", fn_type, None);

    let fn_global_value = fn_value.as_global_value();
// [...]
    assert!(fn_global_value.get_thread_local_mode().is_none());
```

Here's what happens if you run this test with an assertions-enabled build of LLVM:
```
test test_values::test_function_value_to_global_to_pointer ... Assertion failed: (isa<X>(Val) && "cast<Ty>() argument of incompatible type!"), function cast, file ../include/llvm/Support/Casting.h, line 255.
```
The cast in question is the cast of a C++ llvm::Function to a C++ llvm::GlobalVariable, and that is indeed an invalid cast.

**LLVM Version (please complete the following information):**
 - LLVM Version: 7.0.1 (release+asserts+expensive checks+asan+ubsan)
 - Inkwell Branch Used: master

**Desktop (please complete the following information):**
 - OS: macOS 10.14.5

**Is your feature request related to a problem? Please describe.**
@longwusha had a great suggestion - we should have code styling preferences. Particularly via rustfmt.

**Describe the solution you'd like**
We should use rustfmt to standardize code style.

**Describe possible drawbacks to your solution**
My ideal configuration for rustfmt uses unstable options, but this project is on stable. So I do not wish to enforce nightly rustfmt.

**Additional context**
Stabilization checklist **WIP**:
- [ ] comment_width = 100 - https://github.com/rust-lang/rustfmt/issues/3349
- [ ] format_doc_comments = true  - https://github.com/rust-lang/rustfmt/issues/3348
- [ ] match_arm_blocks = false - https://github.com/rust-lang/rustfmt/issues/3373
- [ ] match_block_trailing_comma = true - https://github.com/rust-lang/rustfmt/issues/3380
- [x] max_width = 120
- [x] merge_derives = true
- [ ] merge_imports = true - https://github.com/rust-lang/rustfmt/issues/3362
- [x] newline_style = "Unix"
- [x] use_field_init_shorthand = true
- [x] use_try_shorthand = true
- [ ] wrap_comments = true - https://github.com/rust-lang/rustfmt/issues/3347

**Bug description:** The `AnyValue` implementation for `FunctionValue` returns an `AnyValueEnum::PointerValue` variant instead of a `AnyValueEnum::FunctionValue` variant.

**Code to reproduce:**

```rust
# src/main.rs
use inkwell::context::Context;
use inkwell::values::{AnyValue, AnyValueEnum};

fn main() {
    let context = Context::create();
    let module = context.create_module("fn_or_ptr");
    let fn_type = context.f32_type().fn_type(&[], false);
    let function_value = module.add_function("fn_or_ptr", fn_type, None);
    dbg!(function_value);
    dbg!(function_value.as_any_value_enum());
    dbg!(AnyValueEnum::FunctionValue(function_value));
}

# Cargo.toml
[dependencies]
inkwell = { git = "https://github.com/TheDan64/inkwell", branch = "llvm7-0" }
```

This produces the following output:

```
[src/main.rs:8] function_value = FunctionValue {
    name: "fn_or_ptr",
    address: 0x00007fe656c17128,
    is_const: true,
    is_null: false,
    llvm_value: "\ndeclare float @fn_or_ptr()\n",
    llvm_type: "float ()*"
}
[src/main.rs:9] function_value.as_any_value_enum() = PointerValue(
    PointerValue {
        ptr_value: Value {
            name: "fn_or_ptr",
            address: 0x00007fe656c17128,
            is_const: true,
            is_null: false,
            is_undef: false,
            llvm_value: "\ndeclare float @fn_or_ptr()\n",
            llvm_type: "float ()*"
        }
    }
)
[src/main.rs:10] AnyValueEnum::FunctionValue(function_value) = FunctionValue(
    FunctionValue {
        name: "fn_or_ptr",
        address: 0x00007fdf15c17128,
        is_const: true,
        is_null: false,
        llvm_value: "\ndeclare float @fn_or_ptr()\n",
        llvm_type: "float ()*"
    }
)
```

**Expected output:** `function_value.as_any_enum_value()` should return a `AnyValueEnum::FunctionValue` variant.

LLVM version: `7.0.1`
Rust version: `rustc 1.33.0 (2aa4c46cf 2019-02-28)`


Also, unrelated, why aren't methods `get_name`, `print_to_string`, `is_null`, etc., part of the `AnyValue` trait? This forces casting `AnyValueEnum`s into the correct `Value` type (using `as_<type>_value()` to call any of those methods. I imagine that in many cases it's _possible_ to know the type of the value, but would just require explicit code duplication or manual matching.