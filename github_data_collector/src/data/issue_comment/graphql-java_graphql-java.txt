See https://github.com/graphql/graphql-js/issues/2357 for the discussion in graphql.js
Apollo Federation requires that we return the schema as part of the _Service field to help the gateway understand all the fields. See 'Fetch Service Capabilities' https://www.apollographql.com/docs/apollo-server/federation/federation-spec/#fetch-service-capabilities. 

This schema should not contain the directive definitions but should contain all the directives on the types and fields. This PR adds a new option to the `SchemaPrinter`, `includeDirectiveDefinitions`, which is on by default. Setting it to false will remove the definitions from the top of the schema
GraphQLEnumType currently contains a hardcoded Coercing internally, which cannot be set or modified by developers.

It would be useful if we could provide a custom Coercing for enums in the RuntimeWiring, as it is with Scalars.  This would allow us to represent GraphQL enums internally by our own enums (without matching names) or other classes.
According to (https://github.com/graphql-java/graphql-java/issues/1733) the order of the encoding should be done later so this was moved to AstPrinter from AstValueHelper. The relevant tests were also moved to the AstPrinterTest file to test the string returned by StringValues in value(). Failing tests in the AstValueHelperTest file have been modified to ensure correctness with the issue.
Add failing tests to showcase the current problems with values to Ast via default values printing
add new internalInputValueToAst method to Coercing to convert internal intput value into ast.

See https://github.com/graphql/graphql-js/issues/1817 for the same GraphQL.js issue

This is a rough and ready merge of #1740 with the conflicts SOMEWHAT resolved to allow us to see what has changed.

This does not compile and we would need to do a true fix up to accept it.

I just wanted to use GitHub to share the differences in a rough sense.

Ultimately the original PR should rebase master with their intended changes
**Describe the bug**
We have a GraphQL query that calls a DataLoader that should combine several items into a single batch. It appears to be combining all but the last item, dispatching the request, and then dispatching a second batch containing the last item.

When the query show below runs, we can see that StoreService.getNumEmployees() is called five times ("1234", "2345", "3456", "4567", "5678"), followed by EmployeeCountBatchLoader.load() with the five IDs. After that completes, StoreService.getNumEmployees() is called again with the last ID ("6789") and then EmployeeCountBatchLoader.load() is called once with the last ID.

Rearranging the query always result in the last chunk of the query being run in a separate loader. If the query was ordered `first`, `second`, `last`, `group`, getNumEmployees would be called three times ("1234", "2345", "6789"), EmployeeCountBatchLoader.load would be called, and then getNumEmployees would be called three times ("3456", "4567", "5678"), followed by another call to EmployeeCountBatchLoader.load.

**To Reproduce**
Using java-graphql 13.0, which includes java-dataloader 2.1.1.

The resolver:
```
public class StoreResolver implements GraphQLResolver<Store> {
   ...
    public CompletableFuture<Integer> getNumEmployees(Store store) {
        return storeService.getNumEmployees(store);
    }
   ...
}
```

The service:
```
public class StoreService {
    ...
    public CompletableFuture<Integer> getNumEmployees(Store store) {
        // BREAKPOINT ON NEXT LINE COUNTS SERVICE CALLS
        return employeeCountDataLoader.load(store.getStoreId());
    }
    ...
}
```

The data loader:
```
@Bean
public DataLoader<Pair<String, Boolean>, Integer> employeeCountDataLoader() {
    return DataLoader.newMappedDataLoader(employeeCountBatchLoader);
}
```

The batch loader:
```
public class EmployeeCountBatchLoader implements MappedBatchLoader<String, Integer> {
    ...
    @Override
    public CompletionStage<String, Integer>> load(Set<String> storeIds) {
        // BREAKPOINT ON NEXT LINE COUNTS DATALOADER CALLS
        return CompletableFuture.supplyAsync(() -> {
            // Call the repository and process return a map of Store ID -> employee count
        });
    }
    ...
}
```

And the query:
```
query {
  first: store(id: "1234") {
    id
    numEmployees
  }
  second: store(id: "2345) {
    id
    numEmployees
  }
  group: stores(ids: ["3456", "4567", "5678"]) {
    id
    numEmployees
  }
  last: store(id: "6789") {
    id
    numEmployees
  }
}
```
**Describe the bug**

The `graphql.language.AstValueHelper#astFromValue` method encodes String objects according to JSON aka graphql encoding rules.  However its to early.

This should be done in the AstPrinter.  So all the `graphql.language.AstValueHelperTest` that dpo encoding are wrong.



**To Reproduce**

```
type Query {
    field (arg : SomeType = { name : "special String with \n chars and / chars and so on" } ) : Int
}
input SomeType {
    name : String
}
```

Throw this at the AST print to find out.
This PR adds an analyzer which produces a "query execution tree" for a query.

A query execution tree is a tree representing a query where all fragments and merged fields are resolved.

