Thanks for the library. I have an issue with the latest release

> Assertion Failure: MonkeyXCTest.swift:33: Failed to get matching snapshots: Timed out while evaluating UI query.

Here is my setup


```swift
func testMonkey() {
    let monkey = Monkey(frame: app.frame)
    monkey.addDefaultUIAutomationActions()
    monkey.addXCTestTapAlertAction(interval: 100, application: app)
    monkey.monkeyAround()
}
```
2019-10-11 10:41:12.102123+0800 SwiftMonkeyExampleUITests-Runner[320:13288] +[CATransaction synchronize] called within transaction
2019-10-11 10:41:12.153928+0800 SwiftMonkeyExampleUITests-Runner[320:13288] Running tests...
2019-10-11 10:41:12.166254+0800 SwiftMonkeyExampleUITests-Runner[320:13288] refreshPreferences: HangTracerEnabled: 0
2019-10-11 10:41:12.166334+0800 SwiftMonkeyExampleUITests-Runner[320:13288] refreshPreferences: HangTracerDuration: 500
2019-10-11 10:41:12.166344+0800 SwiftMonkeyExampleUITests-Runner[320:13288] refreshPreferences: ActivationLoggingEnabled: 0 ActivationLoggingTaskedOffByDA:0
2019-10-11 10:41:12.221609+0800 SwiftMonkeyExampleUITests-Runner[320:13288] 未能载入软件包“SwiftMonkeyExampleUITests”，因为它已损坏或丢失必要的资源。 请尝试重新安装软件包。
2019-10-11 10:41:12.221666+0800 SwiftMonkeyExampleUITests-Runner[320:13288] (dlopen_preflight(/var/containers/Bundle/Application/BD30835F-F4F4-4203-ACFB-50918B8CD950/SwiftMonkeyExampleUITests-Runner.app/PlugIns/SwiftMonkeyExampleUITests.xctest/SwiftMonkeyExampleUITests): Library not loaded: @rpath/SwiftMonkey.framework/SwiftMonkey
  Referenced from: /var/containers/Bundle/Application/BD30835F-F4F4-4203-ACFB-50918B8CD950/SwiftMonkeyExampleUITests-Runner.app/PlugIns/SwiftMonkeyExampleUITests.xctest/SwiftMonkeyExampleUITests
  Reason: image not found)
building err
```
Showing All Messages Undefined symbol: __swift_FORCE_LOAD_$_swiftCompatibilityDynamicReplacements
Showing All Messages
Undefined symbol: __swift_FORCE_LOAD_$_swiftCompatibility50
```

![image](https://user-images.githubusercontent.com/12883451/65566898-c24dc880-df86-11e9-8169-e0ca9c464b3d.png)

I tried to run the example project in Xcode 10.2 but it seems like `monkey.addDefaultXCTestPrivateActions()` is not working with this Xcode Version, while using `monkey.addDefaultUIAutomationActions()` works fine. 

"Not working" means, you can not see any paws and nothing happens while running the UITest. 

Maybe you have an idea why it's not working? 

I noticed Monkey seems to always tap on the very first element of my screen. Is there a way to get it to scroll down randomly so that it won't always tap on the same element of my screen?

 func monkeyAround(_ iterationsToMonkey: Int) {
        bringAppToForeground()
        // Rotate back to Portrait, to avoid Plus size iPhone locking issues
        XCUIDevice.shared.orientation = UIDeviceOrientation.portrait
        // Sleep while the animation completes
        sleep(1)
        
        // Now we setup the Monkey, to tap objects randomly, and - if an alert displays - tap a random button on any alert that pops-up
        _ = app.descendants(matching: .any).element(boundBy: 0).frame
        let monkey = Monkey(frame: app.frame)
        //monkey.addDefaultXCTestPrivateActions()
        monkey.addXCTestTapAlertAction(interval: 100, application: app)
        monkey.addUIAutomationShakeAction(weight: 3)
        monkey.addUIAutomationLockAction(weight: 2)
        //monkey.addUIAutomationClickVolumeDownAction(weight: 5)
        monkey.addUIAutomationTapAction(weight: Double(arc4random_uniform(UInt32(80) - UInt32(60)) + UInt32(60)))
        monkey.addUIAutomationDragAction(weight: 4)
        monkey.addUIAutomationFlickAction(weight: 2)
        
        // Begin taking a screenshot each second, until timer is stopped below with stopTimer()
        // If persistScreenshotsOnSuccess = true, then we'll save the values of the screenshots even if the test passes
        // If persistScreenshotsOnSuccess = false, then we'll only save the values of the screenshots if the tests fail. Otherwise, we'll ditch the screenshots
        startTimerToTakeScreenshots()
        
        // Don't set this much lower than 10, as sometimes it can't escape what's already on-screen
        monkey.monkeyAround(iterations: iterationsToMonkey)
        
        // Stop the timer, then ensure the app is foregrounded again, just in case it's gone off to Safari or the home screen
        stopTimer()
        bringAppToForeground()
    }


Cheers,
Lucas
When Xcode 10 packages the `<App Name>UITests-Runner.app`, it includes a different `XCTest.framework` from the one it packaged with Xcode 9. This new version does not contain the `XCEventGenerator` class that SwiftMonkey expects,  and causes a crash when the library user uses `addDefaultXCTestPrivateActions`.

The crash occurs when Monkey tries to force-unwrap `+[XCEventGenerator sharedGenerator`, which is `nil` because the class doesn't exist.

Are there any plans to update this library to use components present in the Xcode 10 XCTest framework?

Additionally, I was unable to send events when using `addDefaultUIAutomationActions` (UIAutomation.framework). Is this also known to be a broken approach on iOS 12?

Thanks!
To ensure code format consistency we could use [SwiftFormat](https://github.com/nicklockwood/SwiftFormat). We can integrate it as a build phase that triggers a **warning** or an **error** if `swiftformat` command was not found. If we choose the **error** approach we should clearly describe in `README` that in order to contribute to the project you should first make sure you have the `swiftformat` installed.

In addition we could use [SwiftLint](https://github.com/realm/SwiftLint) to ensure a consistent code style. The integration options are the same as for the _SwiftFormat_.
The SwiftMonkeyExample could have some functions that crash, just to demonstrate that they can be found.
The SwiftMonkeyExample project should have more screens and more controls to emulate a real app more closely.
Currently, SPM does not support iOS, but once it does, the preliminary support included currently should be fixed.

xcodeprojs could be generated directly from SPM, too.