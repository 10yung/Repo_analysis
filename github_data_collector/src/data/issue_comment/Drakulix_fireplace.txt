Specifying `family: "Misc Ohsnapu"` or `family: "xos4 Terminus"` causes a panic.

Also we REALLY need some kind of error checking for configuring because it was not obvious it was the font that was causing this panic...

```
version: 3.1.2
  Library: WLC
    Jun 15 21:21:44.808 INFO "WLC-1 Chose mode (0) 1366x768"
  Library: Fireplace
    handler: OutputConfig
      Jun 15 21:21:44.808 INFO Setting scale 1 for output "WLC-1"
    Jun 15 21:21:44.808 INFO New output: Output { id: 1 }. Setting workspace 1
  Library: WLC
    Jun 15 21:21:44.829 INFO "EGL context is double buffered"
    Jun 15 21:21:44.829 INFO "EGL version: 1.4 (DRI2)"
    Jun 15 21:21:44.829 INFO "EGL vendor: Mesa Project"
    Jun 15 21:21:44.829 INFO "EGL client APIs: OpenGL OpenGL_ES "
    Jun 15 21:21:44.829 INFO "EGL context (RGB888)"
    Jun 15 21:21:44.829 INFO "EGL_ANDROID_blob_cache EGL_ANDROID_native_fence_sync EGL_CHROMIUM_sync_control EGL_EXT_buffer_age EGL_EXT_create_context_robustness EGL_EXT_image_dma_buf_import EGL_EXT_image_dma_buf_import_modifiers EGL_IMG_context_priority EGL_KHR_config_attribs EGL_KHR_create_context EGL_KHR_create_context_no_error EGL_KHR_fence_sync EGL_KHR_get_all_proc_addresses EGL_KHR_gl_colorspace EGL_KHR_gl_renderbuffer_image EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_3D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_image EGL_KHR_image_base EGL_KHR_image_pixmap EGL_KHR_no_config_context EGL_KHR_reusable_sync EGL_KHR_surfaceless_context EGL_EXT_pixel_format_float EGL_KHR_wait_sync EGL_MESA_configless_context EGL_MESA_drm_image EGL_MESA_image_dma_buf_export EGL_NOK_texture_from_pixmap EGL_WL_bind_wayland_display "
    Jun 15 21:21:44.830 INFO "GL version: OpenGL ES 3.2 Mesa 18.1.1"
    Jun 15 21:21:44.830 INFO "GL vendor: Intel Open Source Technology Center"
    Jun 15 21:21:44.830 INFO "GL_ANDROID_extension_pack_es31a GL_ANGLE_texture_compression_dxt3 GL_ANGLE_texture_compression_dxt5 GL_APPLE_texture_max_level GL_EXT_blend_func_extended GL_EXT_blend_minmax GL_EXT_buffer_storage GL_EXT_clip_cull_distance GL_EXT_color_buffer_float GL_EXT_compressed_ETC1_RGB8_sub_texture GL_EXT_copy_image GL_EXT_discard_framebuffer GL_EXT_disjoint_timer_query GL_EXT_draw_buffers GL_EXT_draw_buffers_indexed GL_EXT_draw_elements_base_vertex GL_EXT_frag_depth GL_EXT_geometry_point_size GL_EXT_geometry_shader GL_EXT_gpu_shader5 GL_EXT_map_buffer_range GL_EXT_multi_draw_arrays GL_EXT_occlusion_query_boolean GL_EXT_polygon_offset_clamp GL_EXT_primitive_bounding_box GL_EXT_read_format_bgra GL_EXT_robustness GL_EXT_separate_shader_objects GL_EXT_shader_framebuffer_fetch GL_EXT_shader_framebuffer_fetch_non_coherent GL_EXT_shader_integer_mix GL_EXT_shader_io_blocks GL_EXT_shader_samples_identical GL_EXT_tessellation_point_size GL_EXT_tessellation_shader GL_EXT_texture_border_clamp GL_EXT_texture_buffer GL_EXT_texture_compression_dxt1 GL_EXT_texture_cube_map_array GL_EXT_texture_filter_anisotropic GL_EXT_texture_format_BGRA8888 GL_EXT_texture_rg GL_EXT_texture_sRGB_decode GL_EXT_texture_type_2_10_10_10_REV GL_EXT_unpack_subimage GL_INTEL_conservative_rasterization GL_INTEL_performance_query GL_KHR_blend_equation_advanced GL_KHR_blend_equation_advanced_coherent GL_KHR_context_flush_control GL_KHR_debug GL_KHR_no_error GL_KHR_robust_buffer_access_behavior GL_KHR_robustness GL_KHR_texture_compression_astc_ldr GL_KHR_texture_compression_astc_sliced_3d GL_MESA_shader_integer_functions GL_NV_draw_buffers GL_NV_fbo_color_attachments GL_NV_image_formats GL_NV_read_buffer GL_NV_read_depth GL_NV_read_depth_stencil GL_NV_read_stencil GL_OES_EGL_image GL_OES_EGL_image_external GL_OES_EGL_image_external_essl3 GL_OES_EGL_sync GL_OES_compressed_ETC1_RGB8_texture GL_OES_copy_image GL_OES_depth24 GL_OES_depth_texture GL_OES_depth_texture_cube_map GL_OES_draw_buffers_indexed GL_OES_draw_elements_base_vertex GL_OES_element_index_uint GL_OES_fbo_render_mipmap GL_OES_geometry_point_size GL_OES_geometry_shader GL_OES_get_program_binary GL_OES_gpu_shader5 GL_OES_mapbuffer GL_OES_packed_depth_stencil GL_OES_primitive_bounding_box GL_OES_required_internalformat GL_OES_rgb8_rgba8 GL_OES_sample_shading GL_OES_sample_variables GL_OES_shader_image_atomic GL_OES_shader_io_blocks GL_OES_shader_multisample_interpolation GL_OES_standard_derivatives GL_OES_stencil8 GL_OES_surfaceless_context GL_OES_tessellation_point_size GL_OES_tessellation_shader GL_OES_texture_3D GL_OES_texture_border_clamp GL_OES_texture_buffer GL_OES_texture_cube_map_array GL_OES_texture_float GL_OES_texture_float_linear GL_OES_texture_half_float GL_OES_texture_half_float_linear GL_OES_texture_npot GL_OES_texture_stencil8 GL_OES_texture_storage_multisample_2d_array GL_OES_vertex_array_object GL_OES_vertex_half_float GL_OES_viewport_array "
    Jun 15 21:21:44.833 INFO "GLES2 renderer initialized"
thread 'main' panicked at 'called `Option::unwrap()` on a `None` value', /checkout/src/libcore/option.rs:323
note: Some details are omitted, run with `RUST_BACKTRACE=full` for a verbose backtrace.
stack backtrace:
   0: <fireplace_lib::handlers::render::conrod::provider::statusbar::StatusbarHandler as wlc::Callback>::output_context_created
   1: <fireplace_lib::callback::vec::VecCallback<T> as wlc::Callback>::output_context_created
   2: wlc::ffi_output_context_created
   3: wlc_output_set_backend_surface
   4: output_event
   5: update_outputs
   6: activate_event
   7: wlc_run
   8: fireplace::main
```
This is a quick write-up about the current project status and it's ongoing development.

As many followers are already aware this project as it exists right now will **not** continue to live on.
The codebase will get ripped apart as I replace [`wlc`](https://github.com/Cloudef/wlc) with [`smithay`](https://github.com/Smithay/smithay).

Motivating this change is that wlc is currently getting [deprecated](https://github.com/Cloudef/wlc/issues/262). It's main user - a i3-wayland-recreation in C called [`sway`](https://github.com/swaywm/sway) - is currently going though similar changes writing their [own compositor library](https://github.com/swaywm/wlroots).

Discussion about fireplace status did happened shortly after, for reference:
- https://github.com/way-cooler/way-cooler/issues/248
- https://github.com/Smithay/smithay/issues/4

Note that fireplace is not associated with [`way-cooler`](https://github.com/way-cooler/way-cooler) - another i3-style rust wayland compositor - in any way. The issue linked above was a call for participation, but way-cooler will use wlroots through rust's ffi interface as well.

Smithay on the other hand is completely written from scratch in rust and as recently passed it's first big milestone:
- https://smithay.github.io/smithay-v-0-1.html

We are on good progress finishing the [next one](https://github.com/Smithay/smithay/milestone/2), which will provide:
- hardware acceleration
- (basic) XWayland support
- Clipboard handling
- Touch support

Smithay has reached a state, where it is not very competitive yet, but good enough to start porting fireplace. In the upcoming weeks this will start with the goal to get a basic version running with the configuration and tiling functionality fireplace did provide today.

New features will most likely be developed once smithay has reached a complete state.
The current UI features of fireplace will be rewritten as well at a later stage as separate wayland clients.

Most active development currently happens over at [`smithay`s matrix chatroom](https://matrix.to/#/#smithay:matrix.org), you may use [gitter](https://gitter.im/smithay/Lobby) as well to join the channel.

One porting starts new issues regarding specific tasks will be created and will allow easy tracking of the overall progress.
Hi there! I'm quite excited about the prospect of using Fireplace on FreeBSD. However, currently it depends on the `systemd` crate, and systemd is very notably not a FreeBSD thing. I realize that Fireplace is currently unmaintained as development is focused on Smithay, but once the backend here is migrated to Smithay, will it be possible to avoid using systemd?
Hi when I try building the latest version of Firebase I get the following errors.
![2017-11-24-194924_1920x1080_scrot](https://user-images.githubusercontent.com/17577796/33226313-bb26a928-d150-11e7-9437-474e1cc97f41.png)

IPC clients should able to connect via a local socket of some sort.
Confirmation about access should be granted by the user via UI.

TODO:

- [ ] Make sure this cannot be used to DDOS the user. (Probably achievable with a checkbox - something like "Dont show requests from this client anymore")
- [ ] Enable setting trusted clients in the configuration / make it possible to autostart them

Protocol will be JSON based.

TODO:

- [ ] Search for some good documentation software.
- [ ] Define what we want to expose:
    - [ ] Different protocols/scopes, all differenciate between reading and writing
     - [ ] Output API
         - [ ] Get/Set scale
         - [ ] Get/Set gamma control
         - [ ] Get/Set DPMS
         - [ ] Set mirroring (blocked by #10)
         - [ ] Pin workspace (blocked by #40)
         - [ ] enumerate windows (requires window scope)
         - [ ] Get workspace api (requires workspace scope)
    - [ ] Workspace API
         - [ ] get/switch workspace
         - [ ] enumerate windows (requires window scope)
         - [ ] get mode api (requires mode scope)
    - [ ] Mode API
        - [ ] Fullscreen:
           - [ ] get status/window (requires window scope)
           - [ ] set/unset window (requires window scope to get id)
        - [ ] Floating
           - [ ] get_windows (requires window scope)
           - [ ] get/set_window_position (requires window scope to get id)
           - [ ] get/set_window_geometry (requires window scope to get id)
           - [ ] get/set_window_stack (requires window scope)
           - [ ] maximize (requires window scope)
           - [ ] minimize (requires window scope)
        - [ ] Combined
            - [ ] get/set filters
            - [ ] move window (requires window scope to get id)
        - [ ] Switch
            - [ ] switch mode
        - [ ] BSP
           - [ ] Get/manipulate tree (this might be difficult to get right)
     - [ ] Window/View API
        - [ ] all_windows - make sure to provide all information available to configuration filters
        - [ ] focus/unfocus
        - [ ] close
     - [ ] Lockscreen
         - [ ] activate/deactivate (Ref #11)
      - [ ] Statusbar
         - TODO - Maybe support i3bar's protocol?
      - [ ] Config
         - [ ] get/set configuration parameters - requires #39 to be useful
         - [ ] reload - blocked by #39
Sometimes two monitors are not equally important and you maybe have one main monitor and a secondary unimportant smaller one. In that case you may wish to constantly show one workspace on the smaller one and switch the output automatically when switching to another. This is essentially single workspace mode for one output.
Allow configuration reloading.

This will require to store the configuration parameters somewhere global or linked to their respective `Output`s.
I am using [this configuration](https://github.com/Drakulix/fireplace/files/798296/fireplace-config.txt), and I can't get the quit to work (I expect it to be Super+Shift+Q, but it does not do that.).

All the other commands seem to work.
Logging typo's in the config file instead of straight up denying should be a far better user experience.

Decided against that option because there was no easy way to get the ignored keys, [serde-ignored](https://github.com/dtolnay/serde-ignored) changes that.
Very cool project!

Do you plan to add support for tabbed / stacked layouts supported by `i3` and (recently) `sway`?