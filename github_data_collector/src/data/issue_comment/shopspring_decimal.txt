There is `IntPart`, could you add the same but returning `big.Int`?
optimization roundShortest method  for effectiveness 
which  had apply in  go source code: [go-source-strconv](https://github.com/golang/go/blob/master/src/strconv/ftoa.go#L234)
When I went to revert #46, `TestDecimal_RoundCash` started failing because the `RoundCash` function  (#66) relies on a Decimal with insignificant digits removed. To get around this problem I made a new function to remove insignificant digits
Cannot create a Decimal from +Inf
For computing the arbitrary nth root of any number. I also go formatted some unrelated bits of code.

I implemented the shifting nth root algorithm in order to compute an nth root to an arbitrary precision. Other methods, such as Newton's method, are potentially faster but involve some amount of uncertainty as they only give an approximation, while shifting nth root gives the precise answer. Also, a slow method is better than no method :P
Get error when used with gorm:

```
pq: encode: unknown type for decimal.Decimal
```

All nice on commit: cd690d0c9e2447b1ef2a129a6b7b49077da89b8e
but broken for the last one: a36b5d85f337bcbff4008ffb786d0e4ec2a345a4

Also, it would be nice if you will add go mod support.
```golang
func TestNegZero(t *testing.T) {
	negativeZero := math.Copysign(0, -1)
	value := decimal.NewFromFloat(negativeZero)
	if value.Sign() > -1 {
		t.Errorf("Expected a negative sign but got %v", value.Sign())
	}
	actual, _ := value.Float64()
	actualBits := math.Float64bits(actual)
	expectedBits := math.Float64bits(negativeZero)
	if actualBits != expectedBits {
		t.Errorf("Expected bits %x but got %x", expectedBits, actualBits)
	}
}
```
```
--- FAIL: TestNegZero (0.00s)
    compact-float_test.go:55: Expected a negative sign but got 0
    compact-float_test.go:61: Expected bits 8000000000000000 but got 0
FAIL
```
Fixed documentation on StringFixedBank, which incorrectly called `StringFixed` instead of `StringFixedBank` in the documentation.
I also noticed  that the documented output for `decimal.NewFromFloat(545).StringFixedBank(-1)` is 550, but the actual output is 540. I'm not sure if the documentation or the implementation are incorrect in that case, but I modified the documentation to match the current behavior. 
the string `$8,112.61` breaks for me. 

I am hesitant to open this given that the `$` is already *not* supported.

Should `FromString` variants handle string formatters? 
Maybe strip out `$`/`,` characters?

Hesitant to preemptively submit a PR given i18n implications, ie comma meaning fractional vs purely formatting in European countries.

Open to feedback, and submit PR for `s/[$,]//g` filtering if that's reasonable and aligned with the project goals.

Thanks!


if i have an table on RDBMS and i need to query it and map to struct looks like this
```go
type Data struct {
 A decimal.Decimal
 B decimal.Decimal
 C decimal.Decimal
}
```

and i don't want to test with actual connection to database. so i create SqlRows implementation like this
```go

// Scan ...
func (inst *MockScanner) Scan(src ...interface{}) error {
	for i, d := range src {
		switch d := d.(type) {
		case *int:
			*d = inst.data[i].(int)
		case *string:
			*d = inst.data[i].(string)
		case *float32:
			*d = inst.data[i].(float32)
		case *float64:
			*d = inst.data[i].(float64)
		default:
			if scanner, ok := d.(sql.Scanner); ok {
				if err := scanner.Scan(inst.data[i]); err != nil {
					return err
				}
			}
		}
	}

	return nil
}
```

then, i create function like this
```go
func MapData(rows *sql.SqlRows) (*Data, error) {
  var out Data
  err := rows.Scan(&out.A, &out.B, &out.C)
  return &out, err
}
```

So, I able to test this function without actual query on database like this
```go
mock := NewMockScanner(1, 2, 3) // now support int. so, it doesn't need to be NewMockScanner(int64(1), ...) or NewMockScanner(decimal.NewFromFloat(1), ...) 
out,err := MapData(mock)
So(out.A, ShouldEqual, decimal.NewFromFloat(1))
...
```

someone might think this is pointless. but, if someone have to deal with bank's project and need to write some tests for function which deal with hundred of fields (and all of them have to be mocked), this should made a point. 