Below line of code should respect unix path separator as well,
https://github.com/microsoft/DirectXShaderCompiler/blob/0532d8cd08c9535af2ca5407a3c6289766312f53/tools/clang/tools/dxclib/dxc.cpp#L780

Example:
`if (!m_Opts.DebugFile.empty() && (m_Opts.DebugFile.endswith(llvm::StringRef("\\")) || m_Opts.DebugFile.endswith(llvm::StringRef("/")))) {`
I can't forward the entire source, but it crashes when this HLSL is added.
```cpp
static Texture2D texArray[6] = {
	tex0, tex1, tex2, tex3, tex4, tex5
};

//Read from pixel shader texArray[0] somewhere down here
```
When tex0-tex5 are defined as SRV slots, dxc crashes internally with a read access violation (New was 0xFFFFFFFFFFFFFFEF). This is the callstack:
![image](https://user-images.githubusercontent.com/28758736/72516588-340d9300-3852-11ea-86f1-5151a5e74940.png)
This version is an older version of DXC since it is modified, however; this is still present in the latest revision (trunk on 2019-05-15). As inputting this into Tim Jones's shader playground crashes the compiler too.
We leave behind the intermediate dx.precise call when precise is used on a field in the geometry shader output structure.  This leads to an assert/crash.

The workaround is to omit precise on the field, assign the computation for that field to a local variable marked precise, then assign the local variable to the output field before Append().
I have been getting linker error on mac, the same code compiles fine on windows.
also in November i think before #2575 I was able to compile even on mac.
could you help me fix this?

`Undefined symbols for architecture x86_64:
  "IDxcBlobUtf8::IDxcBlobUtf8_ID", referenced from:
      hlsl::DxcCreateBlobEncodingFromBlob(IDxcBlob*, unsigned int, unsigned int, bool, unsigned int, IMalloc*, IDxcBlobEncoding**) in libLLVMDxcSupport.a(FileIOHelper.o)
      hlsl::ReadOnlyBlobStream::Init(IDxcBlob*) in libLLVMDxcSupport.a(FileIOHelper.o)
      hlsl::InternalDxcBlobEncoding_Impl<hlsl::DxcBlobUtf8_Impl>::QueryInterface(void const*, void**) in libLLVMDxcSupport.a(FileIOHelper.o)
  "IDxcBlobUtf16::IDxcBlobUtf16_ID", referenced from:
      hlsl::DxcCreateBlobEncodingFromBlob(IDxcBlob*, unsigned int, unsigned int, bool, unsigned int, IMalloc*, IDxcBlobEncoding**) in libLLVMDxcSupport.a(FileIOHelper.o)
      hlsl::InternalDxcBlobEncoding_Impl<hlsl::DxcBlobUtf16_Impl>::QueryInterface(void const*, void**) in libLLVMDxcSupport.a(FileIOHelper.o)
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

The following build commands failed:
	Ld /Users/sunnaik/dev/build/darwin_x64/Release/Release/lib/libglcompiler.3.7.dylib normal x86_64
(1 failure)
---- Build failed ----
`
I can not build the compiler using build steps from here: https://github.com/Microsoft/DirectXShaderCompiler/wiki/Building-Sources

Here's what I did:
1. installed Git, VS 2017, Python 3.8, CMake 3.11.2, WDK
2. cloned the project: "git clone https://github.com/microsoft/DirectXShaderCompiler.git"
3. launched "utils\hct\hctshortcut.js"
4. launched the HLSL console shortcut
5. executed "hctbuild" in the console

hctbuild fails with the following error:
```
CMake Error at C:/Program Files/CMake/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):
  Could NOT find PythonInterp: Found unsuitable version "1.4", but required
  is at least "3" (found
  C:/Users/x/AppData/Local/Microsoft/WindowsApps/python3.exe)
Call Stack (most recent call first):
  C:/Program Files/CMake/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:376 (_FPHSA_FAILURE_MESSAGE)
  C:/Program Files/CMake/share/cmake-3.11/Modules/FindPythonInterp.cmake:155 (FIND_PACKAGE_HANDLE_STANDARD_ARGS)
  CMakeLists.txt:413 (find_package)
```
It seems that Python 3.8 is not supported, but there is no build older than 3.7 on "python.org".

According to the following issue, Python 3.7 also does not work: https://github.com/microsoft/DirectXShaderCompiler/issues/2616

Also, hctbuild writes the following message to the console window at the end of the log, when an error is detected:
`CMake 3.4 is the currently supported version - your installed cmake may be out of date.`

I tried using the latest version of CMake (3.16.0), but it fails with a different error:
```
-- Constructing LLVMBuild project information
CMake Error at CMakeLists.txt:465 (message):
  Unexpected failure executing llvm-build:
```
I'm attaching CMake log files:
[CMakeError.log](https://github.com/microsoft/DirectXShaderCompiler/files/4054566/CMakeError.log)
[CMakeOutput.log](https://github.com/microsoft/DirectXShaderCompiler/files/4054567/CMakeOutput.log)

Issues:
1. The list of required software does not contain CMake
2. "utils\hct\hctgettaef.py" does not work, I had to install WDK to solve the issue with missing TAEF
3. "hctbuild" fails because the required version of CMake is incompatible with modern Python builds
The matrix size rules for cbuffers/tbuffers do not match those of fxc
with -fvk-use-dx-layout enabled. The size of the last row should not be
rounded to the alignment size in order to maintain DirectX consistency.

This non-rounding scheme passes the SPIR-V validator, but *only* in
(GLSL) row-major layout. Column-major behavior is unaltered.

The relevant validator check is here:
https://github.com/KhronosGroup/SPIRV-Tools/blob/e70b009b0f1e47278d89ed7c9f418010d563eb5a/source/val/validate_decorations.cpp#L309-L317
Compiling [illum2.frag.txt](https://github.com/microsoft/DirectXShaderCompiler/files/4046877/illum2.frag.txt) with latest DXC seems to produce invalid SPIR-V code. Vulkan validation layer complains about it with the following message:

>  [ UNASSIGNED-CoreValidation-Shader-InconsistentSpirv ] Object: VK_NULL_HANDLE (Type = 0) | SPIR-V module not valid: Header block 52[%52] is contained in the loop construct headed by 44[%44], but it's merge block 47[%47] is not
  %52 = OpLabel

The command used to compile the shader with DXC is as follows:

> dxc.exe  -fvk-use-dx-position-w -O3 -Zpr -spirv -no-warnings -E IlluminationPS -T ps_5_0 -Fo illum2.spirv illum2.frag.txt

The compiled SPIR-V is [illum2.spirv.txt](https://github.com/microsoft/DirectXShaderCompiler/files/4046894/illum2.spirv.txt) and human readable version is [illum2.spirv.h.txt](https://github.com/microsoft/DirectXShaderCompiler/files/4046892/illum2.spirv.h.txt).
We have encountered what appears to be a bug in dxc that causes information communicated from HLSL's logical "hull shader" to its "patch constant shader" to not actually get communicated (except for from the first control point), when converted to Vulkan's logical "tessellation control shader".

As far as I can tell, when data is transmitted from the hull shader to the patch constant shader, SPIRV-dxc attempts to do this by writing the per-thread data into a temporary array, that has one entry for each thread. Then a barrier is inserted and thread 0 consumes the data from all threads to do the patch-constant shader work. The problem appears to be that this temporary array is just regular registers, not any kind of LDS or "groupshared" memory. So, thread 0 doesn't actually access data written by the other threads, it just consumes uninitialized data. This causes the tessellation either to not show up, or to flicker like mad and do crazy stuff.

If I modify the shader so that the patch-constant shader does not use any information from the hull-shader, then tessellation works as expected. However, for our use case, we require the ability to use information computed in the hull shader.

NOTE: We have not found a work around for this, so getting it fixed "soon" would be pretty important to us.

Here is a simple HLSL shader that demonstrates the problem.
```
#define BARYCENTRIC_INTERPOLATE(INPUTARRAY, INPUTPARAM, BARYC) ((BARYC.x * INPUTARRAY[0].INPUTPARAM) + (BARYC.y * INPUTARRAY[1].INPUTPARAM) + (BARYC.z * INPUTARRAY[2].INPUTPARAM))

static const float2 Positions[3] = {
	float2(0.0, -0.5),
	float2(0.5, 0.5),
	float2(-0.5, 0.5)
};

static const float3 Colors[3] = {
	float3(1.0, 0.0, 0.0),
	float3(0.0, 1.0, 0.0),
	float3(0.0, 0.0, 1.0)
};

float Tessellation_factor; //set by CPU

struct VS_OUTPUT
{
	float4 pos : POSITION0;
	float3 color : VERTCOLOR0;
};

struct HS_OUTPUT
{
	float4 pos : POSITION0;
	float3 color : VERTCOLOR0;
	float tess_factor : TESSFACTOR0;
};

struct DS_OUTPUT
{
	float4 pos : SV_Position;
	float3 color : VERTCOLOR0;
};


VS_OUTPUT main_vs( uint vert_index : SV_VertexID)
{
	VS_OUTPUT OUT;

	OUT.pos = float4(Positions[vert_index], 0.0, 1.0);
	OUT.color = Colors[vert_index];

	return OUT;
}

struct HS_PATCH_OUTPUT
{
	float tess_factor[3] : SV_TessFactor; //tessellation factor per edge
	float inside_tess_factor : SV_InsideTessFactor; //tessellation factor of triangle interior
};

[domain("tri")]
[partitioning("fractional_odd")]
[outputtopology("triangle_cw")]
[patchconstantfunc("main_hs_patch")]
[outputcontrolpoints(3)]
HS_OUTPUT main_hs(InputPatch<VS_OUTPUT, 3> inputpoints, uint i : SV_OutputControlPointID)
{
	HS_OUTPUT OUT;
	OUT.pos = inputpoints[i].pos;
	OUT.color = inputpoints[i].color;
	OUT.tess_factor = Tessellation_factor;
	
	return OUT;
}

HS_PATCH_OUTPUT main_hs_patch(const OutputPatch<HS_OUTPUT, 3> patch)
{
	HS_PATCH_OUTPUT OUT;
	OUT.tess_factor[0] = patch[0].tess_factor;
	OUT.tess_factor[1] = patch[1].tess_factor;
	OUT.tess_factor[2] = patch[2].tess_factor;
	OUT.inside_tess_factor = (patch[0].tess_factor + patch[1].tess_factor + patch[2].tess_factor) / 3;

	return OUT;
}

[domain("tri")]
DS_OUTPUT main_ds(HS_PATCH_OUTPUT constants, float3 BarycentricCoords : SV_DomainLocation, const OutputPatch<HS_OUTPUT, 3> orig_triangle)
{
	DS_OUTPUT OUT;
	OUT.pos = BARYCENTRIC_INTERPOLATE(orig_triangle, pos, BarycentricCoords);
	OUT.color = BARYCENTRIC_INTERPOLATE(orig_triangle, color, BarycentricCoords);

	return OUT;
}

float4 main_ps( DS_OUTPUT data) : SV_Target0
{
	return float4(data.color, 1.0);
}
```

This generates SPIR-V like this for the Tessellation Control stage:

```
; SPIR-V
; Version: 1.3
; Generator: Google spiregg; 0
; Bound: 103
; Schema: 0
               OpCapability Tessellation
               OpExtension "SPV_GOOGLE_hlsl_functionality1"
               OpMemoryModel Logical GLSL450
               OpEntryPoint TessellationControl %main_hs "main_hs" %in_var_POSITION0 %in_var_VERTCOLOR0 %gl_InvocationID %out_var_POSITION0 %out_var_VERTCOLOR0 %out_var_TESSFACTOR0 %gl_TessLevelOuter %gl_TessLevelInner
               OpExecutionMode %main_hs Triangles
               OpExecutionMode %main_hs SpacingFractionalOdd
               OpExecutionMode %main_hs VertexOrderCw
               OpExecutionMode %main_hs OutputVertices 3
               OpSource HLSL 600
               OpName %type__Globals "type.$Globals"
               OpMemberName %type__Globals 0 "Tessellation_factor"
               OpName %_Globals "$Globals"
               OpName %in_var_POSITION0 "in.var.POSITION0"
               OpName %in_var_VERTCOLOR0 "in.var.VERTCOLOR0"
               OpName %out_var_POSITION0 "out.var.POSITION0"
               OpName %out_var_VERTCOLOR0 "out.var.VERTCOLOR0"
               OpName %out_var_TESSFACTOR0 "out.var.TESSFACTOR0"
               OpName %main_hs "main_hs"
               OpName %VS_OUTPUT "VS_OUTPUT"
               OpMemberName %VS_OUTPUT 0 "pos"
               OpMemberName %VS_OUTPUT 1 "color"
               OpName %param_var_inputpoints "param.var.inputpoints"
               OpName %HS_OUTPUT "HS_OUTPUT"
               OpMemberName %HS_OUTPUT 0 "pos"
               OpMemberName %HS_OUTPUT 1 "color"
               OpMemberName %HS_OUTPUT 2 "tess_factor"
               OpName %temp_var_hullMainRetVal "temp.var.hullMainRetVal"
               OpName %if_merge "if.merge"
               OpDecorateString %in_var_POSITION0 UserSemantic "POSITION0"
               OpDecorateString %in_var_VERTCOLOR0 UserSemantic "VERTCOLOR0"
               OpDecorate %gl_InvocationID BuiltIn InvocationId
               OpDecorateString %gl_InvocationID UserSemantic "SV_OutputControlPointID"
               OpDecorateString %out_var_POSITION0 UserSemantic "POSITION0"
               OpDecorateString %out_var_VERTCOLOR0 UserSemantic "VERTCOLOR0"
               OpDecorateString %out_var_TESSFACTOR0 UserSemantic "TESSFACTOR0"
               OpDecorate %gl_TessLevelOuter BuiltIn TessLevelOuter
               OpDecorateString %gl_TessLevelOuter UserSemantic "SV_TessFactor"
               OpDecorate %gl_TessLevelOuter Patch
               OpDecorate %gl_TessLevelInner BuiltIn TessLevelInner
               OpDecorateString %gl_TessLevelInner UserSemantic "SV_InsideTessFactor"
               OpDecorate %gl_TessLevelInner Patch
               OpDecorate %in_var_POSITION0 Location 0
               OpDecorate %in_var_VERTCOLOR0 Location 1
               OpDecorate %out_var_POSITION0 Location 0
               OpDecorate %out_var_TESSFACTOR0 Location 1
               OpDecorate %out_var_VERTCOLOR0 Location 2
               OpDecorate %_Globals DescriptorSet 0
               OpDecorate %_Globals Binding 0
               OpMemberDecorate %type__Globals 0 Offset 0
               OpDecorate %type__Globals Block
      %float = OpTypeFloat 32
       %uint = OpTypeInt 32 0
     %uint_0 = OpConstant %uint 0
     %uint_1 = OpConstant %uint 1
     %uint_2 = OpConstant %uint 2
        %int = OpTypeInt 32 1
      %int_2 = OpConstant %int 2
      %int_0 = OpConstant %int 0
      %int_1 = OpConstant %int 1
     %uint_3 = OpConstant %uint 3
    %v3float = OpTypeVector %float 3
%_arr_v3float_uint_3 = OpTypeArray %v3float %uint_3
%type__Globals = OpTypeStruct %float
%_ptr_Uniform_type__Globals = OpTypePointer Uniform %type__Globals
    %v4float = OpTypeVector %float 4
%_arr_v4float_uint_3 = OpTypeArray %v4float %uint_3
%_ptr_Input__arr_v4float_uint_3 = OpTypePointer Input %_arr_v4float_uint_3
%_ptr_Input__arr_v3float_uint_3 = OpTypePointer Input %_arr_v3float_uint_3
%_ptr_Input_uint = OpTypePointer Input %uint
%_ptr_Output__arr_v4float_uint_3 = OpTypePointer Output %_arr_v4float_uint_3
%_ptr_Output__arr_v3float_uint_3 = OpTypePointer Output %_arr_v3float_uint_3
%_arr_float_uint_3 = OpTypeArray %float %uint_3
%_ptr_Output__arr_float_uint_3 = OpTypePointer Output %_arr_float_uint_3
     %uint_4 = OpConstant %uint 4
%_arr_float_uint_4 = OpTypeArray %float %uint_4
%_ptr_Output__arr_float_uint_4 = OpTypePointer Output %_arr_float_uint_4
%_arr_float_uint_2 = OpTypeArray %float %uint_2
%_ptr_Output__arr_float_uint_2 = OpTypePointer Output %_arr_float_uint_2
       %void = OpTypeVoid
         %45 = OpTypeFunction %void
  %VS_OUTPUT = OpTypeStruct %v4float %v3float
%_arr_VS_OUTPUT_uint_3 = OpTypeArray %VS_OUTPUT %uint_3
%_ptr_Function__arr_VS_OUTPUT_uint_3 = OpTypePointer Function %_arr_VS_OUTPUT_uint_3
  %HS_OUTPUT = OpTypeStruct %v4float %v3float %float
%_arr_HS_OUTPUT_uint_3 = OpTypeArray %HS_OUTPUT %uint_3
%_ptr_Function__arr_HS_OUTPUT_uint_3 = OpTypePointer Function %_arr_HS_OUTPUT_uint_3
%_ptr_Output_v4float = OpTypePointer Output %v4float
%_ptr_Output_v3float = OpTypePointer Output %v3float
%_ptr_Output_float = OpTypePointer Output %float
%_ptr_Function_HS_OUTPUT = OpTypePointer Function %HS_OUTPUT
       %bool = OpTypeBool
%_ptr_Function_float = OpTypePointer Function %float
%_ptr_Function_v4float = OpTypePointer Function %v4float
%_ptr_Function_v3float = OpTypePointer Function %v3float
%_ptr_Uniform_float = OpTypePointer Uniform %float
   %_Globals = OpVariable %_ptr_Uniform_type__Globals Uniform
%in_var_POSITION0 = OpVariable %_ptr_Input__arr_v4float_uint_3 Input
%in_var_VERTCOLOR0 = OpVariable %_ptr_Input__arr_v3float_uint_3 Input
%gl_InvocationID = OpVariable %_ptr_Input_uint Input
%out_var_POSITION0 = OpVariable %_ptr_Output__arr_v4float_uint_3 Output
%out_var_VERTCOLOR0 = OpVariable %_ptr_Output__arr_v3float_uint_3 Output
%out_var_TESSFACTOR0 = OpVariable %_ptr_Output__arr_float_uint_3 Output
%gl_TessLevelOuter = OpVariable %_ptr_Output__arr_float_uint_4 Output
%gl_TessLevelInner = OpVariable %_ptr_Output__arr_float_uint_2 Output
%float_0_333333343 = OpConstant %float 0.333333343
    %main_hs = OpFunction %void None %45
         %60 = OpLabel
%param_var_inputpoints = OpVariable %_ptr_Function__arr_VS_OUTPUT_uint_3 Function
%temp_var_hullMainRetVal = OpVariable %_ptr_Function__arr_HS_OUTPUT_uint_3 Function
         %61 = OpLoad %_arr_v4float_uint_3 %in_var_POSITION0
         %62 = OpLoad %_arr_v3float_uint_3 %in_var_VERTCOLOR0
         %63 = OpCompositeExtract %v4float %61 0
         %64 = OpCompositeExtract %v3float %62 0
         %65 = OpCompositeConstruct %VS_OUTPUT %63 %64
         %66 = OpCompositeExtract %v4float %61 1
         %67 = OpCompositeExtract %v3float %62 1
         %68 = OpCompositeConstruct %VS_OUTPUT %66 %67
         %69 = OpCompositeExtract %v4float %61 2
         %70 = OpCompositeExtract %v3float %62 2
         %71 = OpCompositeConstruct %VS_OUTPUT %69 %70
         %72 = OpCompositeConstruct %_arr_VS_OUTPUT_uint_3 %65 %68 %71
               OpStore %param_var_inputpoints %72
         %73 = OpLoad %uint %gl_InvocationID
         %74 = OpAccessChain %_ptr_Function_v4float %param_var_inputpoints %73 %int_0
         %75 = OpLoad %v4float %74
         %76 = OpAccessChain %_ptr_Function_v3float %param_var_inputpoints %73 %int_1
         %77 = OpLoad %v3float %76
         %78 = OpAccessChain %_ptr_Uniform_float %_Globals %int_0
         %79 = OpLoad %float %78
         %80 = OpCompositeConstruct %HS_OUTPUT %75 %77 %79
         %81 = OpAccessChain %_ptr_Output_v4float %out_var_POSITION0 %73
               OpStore %81 %75
         %82 = OpAccessChain %_ptr_Output_v3float %out_var_VERTCOLOR0 %73
               OpStore %82 %77
         %83 = OpAccessChain %_ptr_Output_float %out_var_TESSFACTOR0 %73
               OpStore %83 %79
         %84 = OpAccessChain %_ptr_Function_HS_OUTPUT %temp_var_hullMainRetVal %73
               OpStore %84 %80
               OpControlBarrier %uint_2 %uint_4 %uint_0
         %85 = OpIEqual %bool %73 %uint_0
               OpSelectionMerge %if_merge None
               OpBranchConditional %85 %86 %if_merge
         %86 = OpLabel
         %87 = OpAccessChain %_ptr_Function_float %temp_var_hullMainRetVal %uint_0 %int_2
         %88 = OpLoad %float %87
         %89 = OpAccessChain %_ptr_Function_float %temp_var_hullMainRetVal %uint_1 %int_2
         %90 = OpLoad %float %89
         %91 = OpAccessChain %_ptr_Function_float %temp_var_hullMainRetVal %uint_2 %int_2
         %92 = OpLoad %float %91
         %93 = OpLoad %float %87
         %94 = OpLoad %float %89
         %95 = OpFAdd %float %93 %94
         %96 = OpLoad %float %91
         %97 = OpFAdd %float %95 %96
         %98 = OpFMul %float %97 %float_0_333333343
         %99 = OpAccessChain %_ptr_Output_float %gl_TessLevelOuter %uint_0
               OpStore %99 %88
        %100 = OpAccessChain %_ptr_Output_float %gl_TessLevelOuter %uint_1
               OpStore %100 %90
        %101 = OpAccessChain %_ptr_Output_float %gl_TessLevelOuter %uint_2
               OpStore %101 %92
        %102 = OpAccessChain %_ptr_Output_float %gl_TessLevelInner %uint_0
               OpStore %102 %98
               OpBranch %if_merge
   %if_merge = OpLabel
               OpReturn
               OpFunctionEnd
```

To make it easier to understand the issue, I've decompiled the SPIR-V into GLSL using SPIRV-Cross, also:
```
#version 450
layout(vertices = 3) out;

struct VS_OUTPUT
{
    vec4 pos;
    vec3 color;
};

struct HS_OUTPUT
{
    vec4 pos;
    vec3 color;
    float tess_factor;
};

layout(set = 0, binding = 0, std140) uniform type_Globals
{
    float Tessellation_factor;
} _Globals;

layout(location = 0) in vec4 in_var_POSITION0[];
layout(location = 1) in vec3 in_var_VERTCOLOR0[];
layout(location = 0) out vec4 out_var_POSITION0[3];
layout(location = 2) out vec3 out_var_VERTCOLOR0[3];
layout(location = 1) out float out_var_TESSFACTOR0[3];

void main()
{
    vec4 _61_unrolled[3];
    for (int i = 0; i < int(3); i++)
    {
        _61_unrolled[i] = in_var_POSITION0[i];
    }
    vec3 _62_unrolled[3];
    for (int i = 0; i < int(3); i++)
    {
        _62_unrolled[i] = in_var_VERTCOLOR0[i];
    }
    VS_OUTPUT param_var_inputpoints[3] = VS_OUTPUT[](VS_OUTPUT(_61_unrolled[0], _62_unrolled[0]), VS_OUTPUT(_61_unrolled[1], _62_unrolled[1]), VS_OUTPUT(_61_unrolled[2], _62_unrolled[2]));
    out_var_POSITION0[gl_InvocationID] = param_var_inputpoints[gl_InvocationID].pos;
    out_var_VERTCOLOR0[gl_InvocationID] = param_var_inputpoints[gl_InvocationID].color;
    out_var_TESSFACTOR0[gl_InvocationID] = _Globals.Tessellation_factor;
    HS_OUTPUT temp_var_hullMainRetVal[3];
    temp_var_hullMainRetVal[gl_InvocationID] = HS_OUTPUT(param_var_inputpoints[gl_InvocationID].pos, param_var_inputpoints[gl_InvocationID].color, _Globals.Tessellation_factor);
    barrier();
    if (gl_InvocationID == 0u)
    {
        gl_TessLevelOuter[0u] = temp_var_hullMainRetVal[0u].tess_factor;
        gl_TessLevelOuter[1u] = temp_var_hullMainRetVal[1u].tess_factor;
        gl_TessLevelOuter[2u] = temp_var_hullMainRetVal[2u].tess_factor;
        gl_TessLevelInner[0u] = ((temp_var_hullMainRetVal[0u].tess_factor + temp_var_hullMainRetVal[1u].tess_factor) + temp_var_hullMainRetVal[2u].tess_factor) * 0.3333333432674407958984375;
    }
}

```

As you can see, the temp_var_hullMainRetVal variable appears to just be a regular local array, and not cross-thread shared memory of any kind.

Thank you! Dxc with SPIR-V is pretty awesome, and we appreciate all the work that has gone into it. We'd love to get this tessellation issue fixed as soon as possible.
Hi,

I'm writing a shader code reflection system which provides meta-data for our runtime PSO and I'm trying to match all layout packing rules in dxc when compiling different Uniform and Storage buffers. I encountered the following issue:

```
// Run: %dxc -T vs_6_2 -E main -spirv

struct BadStruct { float one;  float2 two; };

struct NestingStruct
{       
    float      a_float; // Commenting out this line produces a valid code
    BadStruct  bad[2];
};

StructuredBuffer<NestingStruct> mySB : register ( t0 );

float main() : A 
{
    return mySB[0].bad[0].one;
}
```

I get the following error:
```
fatal error: generated SPIR-V is invalid: Structure id 5 decorated as BufferBlock for variable in Uniform storage class must follow relaxed storage buffer layout rules: member 1 is an improperly straddling vector at offset 12
  %BadStruct = OpTypeStruct %float %v2float

note: please file a bug report on https://github.com/Microsoft/DirectXShaderCompiler/issues with source code if possible
```

Tested the code on http://shader-playground.timjones.io/

Is this case supported and do you know what problem I'm hitting?

Note that I'm not actually writing a shader, so reordering doesn't solve my problem - I'm writing a reflection system, so if this case isn't handled in dxc we'll list it as a limitation for the code transpilier. The purpose is to report the same layout as produced by dxc.

Fixes #2432 