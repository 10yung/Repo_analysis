I'm trying to add a package for QNNPACK to the [Spack package manager](https://spack.io). I see that QNNPACK downloads its own dependencies, and that this can be avoided by setting `*_SOURCE_DIR` via cmake. Is there a way to point to an existing external installation instead of a source directory so that Spack doesn't need to rebuild all of these dependencies? Spack is designed to work on air-gapped supercomputers that don't have internet access, so I can't have it download anything at build time.
I found 8x8__aarch32_neonfp16arith is this the fp16 gemm method?
Micro-kernels implementation of the following:

* Q8GEMM with per-channel weights quantization parameters (.c) + unit tests + benchmarks

* Q8GEMM with per-channel weights quantization parameters for AARCH32 (.S) + unit tests + benchmarks

* Q8GEMM with per-channel weights quantization parameters with 16bit opportunistic accumulation (.c) + unit tests + benchmarks

* Q8GEMM with per-channel weights quantization parameters with 16bit opportunistic accumulation for AARCH32 (.S) + unit tests + benchmarks
This is a preliminary version in order to get some feedback.
The goal is adding support in GEMM with different kernel quantization parameters per output channel.

Changes:
* Modified version of 4x8 gemm ukernel was added, to support kernel scale and zero-point per output channel.
* Helper funcitons were added : weights-packing, computing requantization parameters
* gemm-micro-kernel test function was added with corresponding unit-tests 
I am opening this issue to see if anyone is interested in contributing.

As QNNPACK have minimum dependecy, it is possible to use amalgamation and emscripten to build a javascript version of the library. See https://github.com/dmlc/mxnet.js as an example for our deep learning project.

This could be fun for some usecases, to run QNNPACK on the browser and provide some cool demos

https://cnpmjs.org/package/nbind