While playing with `<Suspense />` with `ink` I quickly ran into this error:

```
The above error occurred in the <Suspense> component:
    in Suspense (created by Main)
    in div (created by Box)
    in Box (created by Main)
    in Main
    in App

React will try to recreate this component tree from scratch using the error boundary you provided, App.
(node:11265) UnhandledPromiseRejectionWarning: TypeError: unhideInstance is not a function
```

Other than the error messages being out of order it has pretty easy to determine the problem:

> `TypeError: unhideInstance is not a function`

I'm assuming that `react-reconciler` uses this function with the `<Suspense />` component. Looking at https://github.com/facebook/react/commit/dac9202a9c5add480f853bcad2ee04d371e72c0c:

> Adds additional host config methods. For mutation mode:
>
> - hideInstance
> - hideTextInstance
> - unhideInstance
> - unhideTextInstance

---

Changes include:

 - A test case reproducing the problems https://github.com/vadimdemedes/ink/pull/254/commits/45722a8ff3690a34a532f35fa21a873373725973
 - Fix that stubs the missing method https://github.com/vadimdemedes/ink/pull/254/commits/221a108970cbcf6cffbd96be66eb4342b7883917
I want to clear the screen before exiting.
This is what I tried:
```js
app.rerender(<Box />);
```
But it doesn't work.

If I try to print an empty line with `app.rerender(<Box>{'\n'}</Box>);` it works, but I don't need an empty line.

Could you please give me a piece of advice?
Hi!

First, `ink` is an amazing awesome project and I'm so glad it exists.

Have you considered support for mutating the cursor position? I'm working on the repl for [rickbutton/turbo](https://github.com/rickbutton/turbo) and need a way to represent the actual cursor.

Ideally, the cursor could exist as a special component, that when drawn on the screen moves the cursor to its actual position in the output. As a usage suggestion, does this make sense?

```jsx
import { Cursor } from "ink";
function Component(props) {
    return <span>Some text <Cursor/> </span>;
}
```

I would love to contribute an implementation of this if you think this is acceptable. 
Hello; thanks for making a great library!  Been using ink for a few months, it's been a neat environment to develop in.  One of my applications recently needed the `ink-quicksearch` component, but after reading over the original, it seemed more straightforward to give it a proper re-write.  This new version is written as a function component which uses Ink's new primitives and hooks.  PR is just adding a link to the README so others can make use of it.

Let me know if there's anything you'd like me to tweak!
What do you think of adding an option, maybe passed to `render`, that disables all colored output?

This could just be a flag that changes the behavior of the `Color` component that toggles whether this `transformChildren` method is provided or not: https://github.com/vadimdemedes/ink/blob/e0d2b4fcad9860b275f5149c4a4a893c8810026c/src/components/Color.js#L41

The use-case is that some terminals may have limited color support, say f.e. rendering `grey` text with the same color as the terminal background. An easy solution for these users would be to offer a flag that disables colored output.
Reproducible example:

```js
const React = require("react")
const { Box, Static, render } = require("ink")

const Message = ({ text }) => {
  return (
    <Box textWrap="wrap">
      {" "} {text}
    </Box>
  )
}

const CLI = ({ message }) => {
  return (
    <Box flexDirection="column">
      <Static>
        <Message text={message} />
      </Static>
    </Box>
  )
}

const message =
  "1 Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec ornare elit sit amet lorem rutrum scelerisque.\n"+
  "2 Vivamus id mauris ac nisi tristique mollis id egestas risus. Integer cursus auctor eros, ac tempus velit cursus eu.\n"+
  "3 Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Etiam luctus ornare sollicitudin.\n"+
  "4 Duis finibus ut enim vitae consequat. Curabitur non facilisis erat, at suscipit magna. Phasellus pellentesque pellentesque\n"

render(
  <CLI message={message} />
)

```

Steps to repro:
1. Resize terminal so that wrapping happens
2. Run the example above

Expected result:
```
Full `message` string to be rendered
```

Actual result:
```
Only the first 3 lines are displayed (sometimes 2 when terminal width is too small)
```

The interesting thing is that if we remove `{" "}` part from the message component - it works as expected. Removing `textWrap="wrap"` also helps.
The `useInput` hook is nice, but it's always attaching itself to `stdin`. This may cause issues when too many elements are calling it, as Node will then print a warning that will glitch the output:

```
(node) warning: possible EventEmitter memory leak detected. 11 listeners added. Use emitter.setMaxListeners() to increase limit.
```

In my case it happens because each row of a table has a `useInput` registration in order to navigate from left to right - but only when the row is selected in the first place.

A fix that works for me is to simply disable the `useInput` hook for components that don't need it right now (ie rows that aren't currently selected). Unfortunately, since hooks don't work when inside control flows, it means the check must be internalised into the hook - hence this PR.

Do you have any recommandation for managing focus for multiple input component.
My current use case is to be able to display multiple SelectInput and be able to tab thru them. The component already have a focus prop, but how would I manage the focus when the multiple SelectInput are not within the same react component?
This issue seems new with the latest version and it crosses two libraries. 

Things that hide the error:
- Remove `<Color/>`
- Remove `<Box/>`
- Set value to a string of length 1 or greater

```
import React from 'react';

import TextInput from 'ink-text-input';
import { render, Color, Box } from 'ink';

const Test = () => {
    const [val, setVal] = React.useState('');

    return (
        <Box>
            <Color green>
                <TextInput
                    value={val}
                    onChange={setVal}
                    mask="*"
                />
            </Color>
        </Box>
    );
};

render(<Test />);
```

Error is `TypeError: Cannot read property 'yogaNode' of undefined`

Same error with `<Text />` in place of the TextInput component.
When an error boundary's `getDerivedStateFromError` handler is called, React will print out a warning to the console like so:

```
The above error occurred in the <Example> component:
    in Example
    in ErrorBoundary
    in App

React will try to recreate this component tree from scratch using the error boundary you provided.
```

Because of this log output, it means that when the error boundary component is rendered _after_ the previous component, instead of overwriting it.

I put together a small example that hopefully explains this better:

```tsx
// https://github.com/colinking/ink-testing/blob/master/src/error-boundaries.tsx
import React, { useState } from 'react'
import { render, Box, Color, useInput } from 'ink'

/**
 * See: https://github.com/vadimdemedes/ink/issues/234
 * 
 * Note: the output of this script depends on your terminal width. If you have enough space,
 * the ErrorBoundary (An error occurred: Whoops!) will overwrite the "React will try to..."
 * line entirely.
 * 
 * Output:
 *  Hit any key to crash!
 *  The above error occurred in the <Example> component:
 *      in Example
 *      in ErrorBoundary
 *      in App
 *  
 *  React will try to recreate this component tree from scratch using the error boundary you proAn error occurred: Whoops!
 * Expected:
 *  An error occurred: Whoops!
 */

interface ErrorBoundaryState {
  error?: Error
}

class ErrorBoundary extends React.Component<{}, ErrorBoundaryState> {
  state = {} as ErrorBoundaryState

  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {
    return { error }
  }

  render() {
    const { error } = this.state

    if (!error) {
      return this.props.children
    }

    return (
      <Box>
        <Color>An error occurred: {error.message}</Color>
      </Box>
    )
  }
}

const Example: React.FC = () => {
  const [shouldError, setShouldError] = useState(false)
  useInput(() => {
    setShouldError(true)
  })

  if (shouldError) {
    throw new Error('Whoops!')
  }

  return (
    <Box>
      <Color green>Hit any key to crash!</Color>
    </Box>
  )
}

async function run() {
  const { waitUntilExit } = render((
    <ErrorBoundary>
      <Example />
    </ErrorBoundary>
  ), {
    debug: process.env.DEBUG === 'true',
  })
  await waitUntilExit()
}

run()
```

You can run this like so:

```sh
$ git checkout https://github.com/colinking/ink-testing.git
$ npm i
$ npx ts-node src/error-boundaries.tsx
```