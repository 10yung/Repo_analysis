
deno can load native modules now
https://github.com/denoland/deno/pull/3372
- probably use [stb_image](https://github.com/nothings/stb/blob/master/stb_image.h) because it's just one c header file and it should not make building any harder
- there are 2 crates already (one from servo project but that is 2ys outdated and one other which provides a lot of other functionality we dont need) so it's probably better to just do own
- it can be converted to rust if necessary (c2rust)
Text support is very far from how it works in the browser now (textNodes are simply concatened)

This story could also allow mixing elements with text nodes (not sure if it's really needed but it would improve compatibility a lot)

- [ ] text should probably have its own layout node, maybe even surface
- [ ] text style has to be obtained from its parentNode and when the style is changed, all of the text nodes has to be updated too (so it cannot be done before the text node is attached)
- [ ] changing text.data should update surface with the text from all adjacent nodes
- [ ] sibling text nodes should be collapsed/joined so that flex stretching works correctly when in column mode

This is needed for vue & angularjs 1.x and probably few others...

- [x] Node.COMMENT_NODE
- [x] Node.removeChild() should not try to remove surface for comment nodes
- [x] Node.insertBefore() needs to pass correct index to the native (excluding comments)
- [ ] Document.createComment()

we should pool already created surfaces, not sure if it's going to be implemented in core or in react reconciler (and in vue, ...)
Our docs are very out of date, this has to be fixed before v1
Image urls are everywhere (chat applications, news readers, ...)

- [ ] show placeholder
- [ ] download image
- [ ] replace image when loaded

preferably in `<Image` component itself, with minimal changes to the core (for now)
this was in slack-app

when I select a channel with a lot of messages, scroll down and then select another channel with few messages, nothing will be visible and it will be impossible to scroll back

in this specific case, it's easily resolved with `key` but the same thing could happen if we removed some content from already-scrolled container (like flatlist)
this is tracking issue so that it's obvious we want to support vue when it gets released

I think it should be possible (to certain extent) to just recompile our `*.tsx` components with Vue (vnodes are not compatible, but jsx might be, if we restrict ourselves to functions and hooks)

ETA: ~March 2019