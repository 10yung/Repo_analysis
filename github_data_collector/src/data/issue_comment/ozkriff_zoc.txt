
They definitely should not be visible when covered with FoW
I can't add more unit types into the game with current dull widget system because widgets have no support for scrolling. The short-term solution is to split single reinforcements popup into separate popups specific to unit groups:

* infantry
* light vehicles
* heavy vehicles
* air units
* ships
* ???
Replace barbaric `make` call with `cargo rustc --release -- -Clink-args="-Wl,--subsystem,windows"` in `appveyor.yml`.

See http://stackoverflow.com/questions/29763647/how-to-make-a-program-that-does-not-display-the-console-window
У меня есть важный тип - CoreEvent. он перечисление всех возможных событий.

Он много где обрабатываются и везде его обработка выглядит как огромная функция с огромным match хотя бы строк на 150:

- https://github.com/ozkriff/zoc/blob/bcf253d/core/src/internal_state.rs#L180-L381
- https://github.com/ozkriff/zoc/blob/bcf253d/core/src/filter.rs#L72-L308
- https://github.com/ozkriff/zoc/blob/bcf253d/core/src/lib.rs#L946-L1134

и еще в паре мест.

Вроде бы это мне пока особо и не мешает, но как-то раздражает.
(и кроме CoreEvent еще есть похожий Command с теми же проблемами).

Вот я думаю, может мне варианты этого перечисления вынести в честные структуры, сделать для каждого такого match свой типаж и реализовать его для каждого события/команды?

Сейчас есть, например,

`InternalState::apply_event(&mut self, event: CoreEvent)`

а будет какой-нибудь

```
impl InternalStateEvent from CoreEventMove {
    fn apply(&self, state: &mut InternalState() {....}
}
```
Сейчас цена взятия на буксир (и снятия с буксира) - все очки движения. А должна быть цена передвижения буксира + какая-то константа.
Я успел наколбасит достаточно говнокода, что бы уже начать порядочно путаться в нем. Особенно в логике фильтрации событий.

Наверное, стоит замутить какие-то интеграциооные тесты для ядра, что бы хотя бы в его работе быть более-менее уверенным.

Смотри https://gist.github.com/ozkriff/eb85dda5b3ec868366a5e5fddbd8acf1 - прям сейчас можно вот такие многословные тесты делать. Надо бы придумать какой-то набор функций, что бы спрятать всякую рутину.

Было бы круто определять содержимое небольших карт через какое-то такое строковое ascii описание:

```rust
let map = "
... ... ... ...
  ... ... ... ...
... ... t.. r..
  t.. t.. r.. ..B
r.A r.. r.. ..C
  ... t.. ... ...
";
```
![](http://i.imgur.com/JzfA2oK.png)

Possible solutions:

- switch to fullscreen
- fix glutin/android get_inner_size funcs
Надо, что бы был шанс не только уничтожить боевую единицу одним попаданием, но и обездвижить ее (возможно, просто временно замедлить),  на несколько ходов сломать оружие или еще что подобное.

Как всегда, ориентироваться буду на Battle Academy 2 и Wargame (секунды как-то заменить на ходы)

![image](https://cloud.githubusercontent.com/assets/662976/18246068/c54bdd12-7371-11e6-804b-62eb446542c5.png)

Вертолеты уже есть, надо уже и о самолетах задуматься.

Я думаю сделать как в Battle Academy/Wargame:AB - что бы игрок ими управлять сам не мог
игрок только может их вызвать на следующий ход, указать цель и примерную траекторию. Они на следующий ход сами прилетают из-за края карты, делают что могут и сваливают за край карты. Ну или их реакционным огнем зенитки сбивают, тогда они грохаются на карту и разносят все к чертям на нескольких клетках.

![image](https://cloud.githubusercontent.com/assets/662976/18242429/f4ffc93c-735e-11e6-9d74-28ece7f590cd.png)
