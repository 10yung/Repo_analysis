Currently, cargo-deb uses `ldd` statically, which will not work on a non-native target arch. The behavior of this could be emulated, as far as I'm aware.

I'd be open to help work on this with some guidance on best steps.
This behaviour is problematic.

I have a workspace with a lot of lib crates and one binary crate.  I use cargo-deb with the `--manisfest-path` option to pack my binary crate.  

I need to package for several target architectures (including amd64 and arm), and some lib crates in my workspace can only compile on some specific architectures.

Cargo-deb tries to compile all the crates of my workspace in any case, so the packaging failed.

I think the cause is here in the code : https://github.com/mmstick/cargo-deb/blob/master/src/lib.rs#L86-L90

```rust
/// Builds a release binary with `cargo build --release`
pub fn cargo_build(options: &Config, target: Option<&str>, other_flags: &[String], verbose: bool) -> CDResult<()> {
    let mut cmd = Command::new("cargo");
    cmd.current_dir(&options.manifest_dir);
    cmd.arg("build").args(&["--release", "--all"]);
```

Why don't you use the `--manifest-path` cargo option?
Why do you add the `--all` option?

I think my problem would be solved by using the cargo manifest-path option and removing the call to the `--all` option
Hi,

Thanks for the tool, it is really easy to run "cargo deb" and get our deb files out. Some like me configured their CI to build deb files and publish them to GitHub Releases, statically linked with musl to work anywhere.

It would be great to extend a README/Wiki with some tutorial where to move next. *This will really multiply the usefulness of this tool.*

Documentation on Debian/Ubuntu is long and is optimized to be most generic and apply to all sorts of packages. It would be great to write a shorter guide on how to publish your Rust apps to popular distro repos, at least Debian/Ubuntu and maintain them there. I am sure with this tool the number of steps is much smaller and you don't need to handcraft so many files manually.

I don't know if authors of this tool have an experience maintaining Debian packages with cargo deb, if yes, please share your experience with us.

Thanks!
Your crate looks great, I look forward into trying it out! I'm going to package some services and I was thinking about integrating my crate [`configure_me`](https://github.com/Kixunil/configure_me) with your crate.

First, I'd like to integrate man pages - they are already automatically generated from the configuration specification file.

Second, I was thinking about adding debconf support to `configure_me`, so it can automatically generate templates and postinst script (possibly another binary, though)

Thirdly I'd love to support bash completions at some point - another thing worth integrating.

I'm not sure how to do all this, but I was thinking that `cargo-deb` could set some environment variables e.g. `MAN_OUTDIR`, `DEBCONF_TEMPLATE_OUT` (needs append I think), and `BASH_COMPLETION_OUTDIR` for bash completions.

What do you think?
The paths in `Cargo.toml` seem to be handled in an inconsistent way. Here is an example from [alacritty](https://github.com/jwilm/alacritty):
```
assets = [
    ["../target/release/alacritty", "usr/bin/", "755"],
(...)
    ["../extra/alacritty.info", "usr/share/alacritty/", "644"],
]
maintainer-scripts = "extra/linux/debian"
```
Note how `maintainer-scripts` and `assets` use paths that are relative to different locations.

The issue was mentioned [there](https://github.com/jwilm/alacritty/issues/2554#issuecomment-503135726) but it doesn't seem to have been brought over here. Is this behaviour expected, or is it something that should be fixed?
I want to package a binary that is being used as a service. I have my package.service located in the project folder under scripts/package.service. 

Is there any example of how I would go about in cargo deb to get the software service file included, installed and enabled?


Apparently under debian all manpages under `/usr/shame/man` are gzipped. How about a command to gzip assets, or a special "manpage" command ?
Hello @mmstick,

thx for building cargo-deb! 
It would be great to have a switch so that adding assets keeps the default behavior. Could be named something like "additional-assets" or so.

Have a nice day!

Hello, I would like to use `cargo-deb` to replace my `bash` script. I need `openssl` and someother `dev` packages as dependencies. 

At the same time, I would like to be able to manage my application using systemd (status, stop, start...).

I also have `Config.toml` which should be put together with the binary.

Could you please give me some information on how to achieve this using `cargo-deb`? thanks!
In the following example, both mybin1 and mybin2 will show up as an executable /usr/bin inside the data archive.

```
[package.metadata.deb]
assets = [
    ["target/release/mybin1", "/usr/bin/", "755"],
    ["target/release/mybin2", "/usr/bin/", "755"],
]
```
This seems to be fixed by removing the leading /.