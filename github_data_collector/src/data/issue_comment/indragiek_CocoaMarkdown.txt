Did the author consider caching the image locally
- Pod version : 1.8.4
- Xcode 11.2
- iPhone device 12.4.2

```
Podfile:
pod "CocoaMarkdown", :git => 'https://github.com/indragiek/CocoaMarkdown.git'
```

Link error:
```
duplicate symbol '_main' in:
    /Users/chenyn/Library/Developer/Xcode/DerivedData/CaJian-gdqwwrpegxglvygdepdetmfjtucl/Build/Intermediates.noindex/CaJian.build/Debug-iphoneos/CaJian.build/Objects-normal/arm64/main.o
    /Users/chenyn/Library/Developer/Xcode/DerivedData/CaJian-gdqwwrpegxglvygdepdetmfjtucl/Build/Products/Debug-iphoneos/cmark/libcmark.a(main.o)
ld: 1 duplicate symbol for architecture arm64
clang: error: linker command failed with exit code 1 (use -v to see invocation)
```

Is this an error related to my environment or resulted from any incorrect operation?
Below is the code to generate an AttributedString in iOS

NSString * markdown = @"<Test>"
CMDocument *doc = [[CMDocument alloc] initWithData: [markdown dataUsingEncoding: NSUTF8StringEncoding] options: 0];
CMTextAttributes *markdownAttributes = [[CMTextAttributes alloc]init];
 CMAttributedStringRenderer *renderer = [[CMAttributedStringRenderer alloc] initWithDocument: doc attributes: markdownAttributes];
return [render render];


https://cocoapods.org/?q=CocoaMarkdown

SORRY. NO PODS FOUND.

If I understand correctly cmark does support this, like normal markdown syntax, but attributed string sees this break as a new paragraph. For example, the following markdown:

``` md
foo
bar

baz  
qux
```

Should render like this:

<div align="center">
<img src="https://cloud.githubusercontent.com/assets/1086845/18527986/1d62866e-7ad8-11e6-8342-3c1eb6a314b5.png">
</div>


But attributed string renders like this:

<div align="center">
<img src="https://cloud.githubusercontent.com/assets/1086845/18528164/e3716992-7ad8-11e6-8307-d0083dd6f84b.png">
</div>


Have a feeling I'm not the first one wondering about this. Anyone knows anything about this / can comment? If PR is needed, where should I start looking at?

# what I did

`````` objective-c
NSString *md = @"```c\n//This is a code block\n```";
NSData *data = [md dataUsingEncoding:NSUTF8StringEncoding];
CMDocument *document = [[CMDocument alloc] initWithData:data options:0];
CMAttributedStringRenderer *renderer = [[CMAttributedStringRenderer alloc] initWithDocument:document attributes:[CMTextAttributes new]];
NSAttributedString *attributedString = [renderer render];
NSLog(@"%@", attributedString);
``````
# What I expect

```
//This is a code block{
    NSFont = ...
}
```
# What I got

``````
//This is a code block
```{
    NSFont = ...
}
``````

Note that the trailing ``` is included in the returned NSAttributedString

<module-includes>:1:1: warning: umbrella header for module 'CocoaMarkdown' does not include header 'Ono.h' [-Wincomplete-umbrella]
# import "Headers/CocoaMarkdown.h"

^
<module-includes>:1:1: warning: umbrella header for module 'CocoaMarkdown' does not include header 'ONOXMLDocument.h' [-Wincomplete-umbrella]
2 warnings generated.
2 warnings generated.

let attributes = CMTextAttributes()
attributes.linkAttributes = [
     NSForegroundColorAttributeName: UIColor.redColor()
 ]

Will render white links if the window.tintColor property is set... 

Aside from that the code above actually doesn't work at all. Starting to think the external tints colors are causing this issue?

Any solid explanation why? 

Heya! Thanks for the wonderful parser, it's by far the best one I've used yet.

The only markdown elements which seem to be unparsable using CocoaMarkdown (besides tables, which would be pretty impossible to render without ASCII art anyway) are superscript.

Although I see that superscript HTML characters can be transformed into attributes using the [CMHTMLSuperscriptTransformer](https://github.com/indragiek/CocoaMarkdown/blob/master/CocoaMarkdown/CMHTMLSuperscriptTransformer.h) class, there is no equivalent convenience for markdown. In fact, after running through the codebase for a while, it only makes sense to modify `cmark` itself to add this parsing ability... it's not a part of the delegate pattern or customization of CocoaMarkdown to add different markdown parsing tokens. This makes sense, but means that adding my necessary features to the markdown capability of CocoaMarkdown requires modifying an underlying library/framework (which ideally would be separable/detachable and not dependent; because CocoaMarkdown is already an extension on cmark, making an extension on the cmark that CocoaMarkdown uses would be inappropriate to upkeep (a fork inside a fork?!)).

Instead of diving that deep and modifying the C/C++ base itself, I wanted to create this issue so we could perhaps find a solution that involves CocoaMarkdown itself and extends the modular nature of the library (so perhaps other tokens can be added in the future, too). Although the delegate pattern is very convenient and useful, it does not seem appropriate for modifying parsing, only the attributes/effects of the parse-in-progress. Hope this is a reasonable request, cheers!
