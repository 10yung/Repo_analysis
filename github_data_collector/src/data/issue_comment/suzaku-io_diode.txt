# Changes

- Allow cross-building for any ScalaJS version - default is 1.0.0-RC2
- The build uses the `SCALAJS_VERSION` environment variable to get the scala.js plugin version for the build
- The diode-react sub-project is now only built for 0.6.x builds
- Bump scala cross versions to 2.12.10 and 2.13.1
- Adjust for change where higher kinds are directly supported in 2.13.1

Did anyone try to integrate diode with redux dev tools?

Are there some fundamental differences preventing from writing a "plugin"?

https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd?hl=en
In the future, when native is mature enough.

@cornerman

Quick and dirty rushed implementation. Could be useful for some ideas.

EDIT: Original gist deleted but I dug up an old commit which should work.

```scala
import java.util.Date

import diode.ActionResult.NoChange
import diode.data.AsyncAction
import diode.{ActionProcessor, ActionResult, Dispatcher}

class DebounceProcessor[M <: AnyRef] extends ActionProcessor[M] {
  var cleanup = Seq[(Long, AnyRef)]()

  var actionRefLastSent = Map[AnyRef, Long]()
  val delta = 1000

  def clean(now: Long): Unit = {
    cleanup = cleanup.dropWhile { case (itemTime, ref) =>
      actionRefLastSent.get(ref) match {
        case None => {
          // This action has already been cleaned. Drop current item.
          true
        }
        case Some(lastSentTime) => {
          if (itemTime < lastSentTime) {
            // This item has been superseeded by a new action
            true
          }
          else {
            if (lastSentTime + delta <= now) {
              actionRefLastSent -= ref
              true
            }
            else {
              // Item hasn't expired yet
              false
            }
          }
        }
      }
    }
  }


  override def process(dispatch: Dispatcher, action: Any, next: (Any) => ActionResult[M], currentModel: M): ActionResult[M] = {
    val now = new Date().getTime

    clean(now)

    action match {
      case a: AsyncAction[_, _] => {
        if (actionRefLastSent.contains(a)) {
          NoChange
        }
        else {
          actionRefLastSent += a -> now
          cleanup :+= now -> a

          next(action)
        }
      }
      case _ => {
        next(action)
      }
    }
  }
}
```