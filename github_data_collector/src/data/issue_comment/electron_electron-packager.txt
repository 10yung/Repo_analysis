
<!--
Thanks for filing a pull request!
Please check off all of the steps as they are completed by replacing [ ] with [x].
-->

* [x] I have read the [contribution documentation](https://github.com/electron/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] The changes are appropriately documented (if applicable).
* [x] The changes have sufficient test coverage (if applicable).
* [x] The testsuite passes successfully on my local machine (if applicable).

**Summarize your changes:**

`/node_modules/.bin` is excluded from the build by default, but I also had the following directories in my project:

* `node_modules/mocha/node_modules/.bin`
* `my-submodule/node_modules/.bin`
* `my-submodule/node_modules/mocha/node_modules/.bin`

This led to the following issue on packaging: https://github.com/electron-userland/electron-builder/issues/4559

I've modified the pattern to exclude `node_modules/.bin` directories across the project.

Note: this change actually matches the existing documentation in `api.md`.
Bumps [semver](https://github.com/npm/node-semver) from 6.3.0 to 7.1.1.
<details>
<summary>Changelog</summary>

*Sourced from [semver's changelog](https://github.com/npm/node-semver/blob/master/CHANGELOG.md).*

> # changes log
> 
> ## 7.1.0
> 
> * Add `require('semver/preload')` to load the entire module without using
>   lazy getter methods.
> 
> ## 7.0.0
> 
> * Refactor module into separate files for better tree-shaking
> * Drop support for very old node versions, use const/let, `=>` functions,
>   and classes.
</details>
<details>
<summary>Commits</summary>

- [`bb36c98`](https://github.com/npm/node-semver/commit/bb36c98d71d5760d730abba71c68bc324035dd36) 7.1.1
- [`6648df1`](https://github.com/npm/node-semver/commit/6648df16df5920f78af16a8af0711a4994996043) Add preload.js into npm package
- [`5a4ce3d`](https://github.com/npm/node-semver/commit/5a4ce3df0c9d71900313ae165b3d31abb38dc85f) changelog for 7.1
- [`e663d38`](https://github.com/npm/node-semver/commit/e663d38c2d3f77bfe8c9cae9770c409aa434c713) 7.1.0
- [`945d53c`](https://github.com/npm/node-semver/commit/945d53c0979d9894343d07ffb615f7ce66cc1cbe) Add semver/preload module to just load the whole thing like it used to be
- [`d61f828`](https://github.com/npm/node-semver/commit/d61f828e64260a0a097f26210f5500e91a621828) update changelog, travis, and engines versions
- [`533ed12`](https://github.com/npm/node-semver/commit/533ed1266b44d7672ad5015202c0e571da15b8c1) update tap
- [`f56505b`](https://github.com/npm/node-semver/commit/f56505b1c08856a7e6139f6ee5d4580f5f2feed8) 7.0.0
- [`7d834ed`](https://github.com/npm/node-semver/commit/7d834ed5dcd3ded832f8cd4e51f64261cb3cbb24) document exported modules
- [`bbb1d02`](https://github.com/npm/node-semver/commit/bbb1d02260dbbb99c8599f43c16ef837f102c249) Add default npm OSS GitHub settings
- Additional commits viewable in [compare view](https://github.com/npm/node-semver/compare/v6.3.0...v7.1.1)
</details>
<br />

[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=semver&package-manager=npm_and_yarn&previous-version=6.3.0&new-version=7.1.1)](https://dependabot.com/compatibility-score.html?dependency-name=semver&package-manager=npm_and_yarn&previous-version=6.3.0&new-version=7.1.1)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
When handling the `icon`, `extendInfo`, and `extraResource` options were interpreting relative paths as relative to the current working directory, rather than relative to the `dir` option.

* [x] I have read the [contribution documentation](https://github.com/electron/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] The changes are appropriately documented (if applicable).
* [x] The changes have sufficient test coverage (if applicable).
* [x] The testsuite passes successfully on my local machine (if applicable).
Adding test which shows that `cross-zip` does not preserve symbolic links on windows. After this build fails I will add another commit which reverts https://github.com/electron/electron-packager/pull/984 to show that this worked before.

---

Fixing this is only the first step in enabling building macOS packages on windows.
The next problem is that `fs-extra` is using [`fs.stat` instead of `fs.lstat`](https://github.com/jprichardson/node-fs-extra/blob/2b97fe3e502ab5d5abd92f19d588bd1fc113c3f2/lib/util/stat.js#L31) which failes for symbolic links on windows. (I will open an issue there and see if this is intended or not.) So the package can not be moved:
https://github.com/electron/electron-packager/blob/2e974d1211020eb22ac75c21cc0966b9bfaac216/src/platform.js#L215
**EDIT**: Or maybe this is only an issue on my machines? Because all the `fs-extra` symlink tests are failing on my machine even when running as administrator... I will investigate more...
### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [X ] I have read the [contribution documentation](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [X ] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [X ] I have searched the issue tracker for a feature request that matches the one I want to file, without success.

### Problem Description
I would like an error message to be displayed when the wrong version of Powershell is detected.  

Currently, electron-packager requires a powershell version of 3 or later.  Yet all Windows 7 machines only have Powershell version 2 installed by default.  If using the wrong version of Powershell, the electron-packager simply hangs at the extracting step without displaying any error or warning.  

As such, the only way to find out the cause of the problem is to come to this forum.  

### Proposed Solution
I propose that electron packager check the Powershell version if on windows platform and throw an error if it detects the wrong version.  

The powershell version can be detected by running the following command from the system command line:

powershell -Command "$PSVersionTable.PSVersion"

### Alternatives Considered
Currently the README lists Powershell 3 as one of its dependencies, but Powershell version is not something most Windows users are aware of.  

### Additional Information

Judging by the number of related issues raised on this board, it seems this is a fairly common issue for people on Windows 7 machines.  Here are some examples
[Example 1](https://github.com/electron-userland/electron-packager/issues/1022)
[Example 2](https://github.com/electron-userland/electron-packager/issues/1018)
[Example 3](https://github.com/electron-userland/electron-packager/issues/1025)

I had the same issue myself prior to coming to these boards.  While I appreciate the effort the dev and support contributors have made to resolve and document these problems it would make electron packager easier for new developers to use if an error were thrown instead of just hanging.  

While I understand that the README file lists dependencies, it would make electon-packager an all-around better experience if it throws errors when the Powershell dependency is missing rather than silently hanging.  Powershell is not something many Windows users use and therefore may not be obvious what the problem is.


### Preflight Checklist
<!-- Please ensure you've completed the following steps by replacing [ ] with [x]-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for a feature request that matches the one I want to file, without success.

### Problem Description
<!-- Is your feature request related to a problem? Please add a clear and concise description of
what the problem is. -->

AFAICS (apologies if I missed smth) electron-packager has a way to ignore paths from getting copied to the output artifact, but blacklisting is a risky way to decide what goes in. Add a file with sensitive info to the repo, forget to add it to ignore, and BAM!

A whitelist is stable and does answer directly the question: what goes into the artifact?

### Proposed Solution
<!-- Describe the solution you'd like in a clear and concise manner -->

In the best of worlds, you should just follow `npm pack`, meaning respect the `files` section in `package.json`, and if none - respect the `.npmignore` (or just stick to the current `--ignore` flag).

<!--
Thanks for filing an issue!
If you have questions about usage, see <https://github.com/electron-userland/electron-packager/blob/master/SUPPORT.md>.
Please check off all of the steps as they are completed by replacing [ ] with [x].
-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for an issue that matches the one I want to file, without success.

**Please describe your issue:**

On MacOS, If you trigger a User Notification from a renderer process (e.g. via a Native Addon), the notification is given a placeholder icon, because the owning .app (the Helper) lacks an icon.

![image](https://user-images.githubusercontent.com/1938545/53305537-99c6ea00-3850-11e9-912e-7f6f76526aba.png)

If you specify an Icon, that Icon should also be used for the Helper Apps, or there should be an option to specify the Helper app icon separately.
<!--
Thanks for filing an issue!
If you have questions about usage, see <https://github.com/electron-userland/electron-packager/blob/master/SUPPORT.md>.
Please check off all of the steps as they are completed by replacing [ ] with [x].
-->

* [x] I have read the [contribution documentation](https://github.com/electron-userland/electron-packager/blob/master/CONTRIBUTING.md) for this project.
* [x] I agree to follow the [code of conduct](https://github.com/electron/electron/blob/master/CODE_OF_CONDUCT.md) that this project follows, as appropriate.
* [x] I have searched the issue tracker for an issue that matches the one I want to file, without success.

**Spec:**
We have a requirement to execute some code after the icons and name change have all been complete, but before the app.asar has been generated.

Looking at the code we can't see any reason that the asar needs to happen during the initialize, and would like to make a change to move this after the `.then(() => this.copyExtraResources())` has been executed. We then need a hook similar to `afterCopy` and `afterPrune` e.t.c. that we can tap into. This would either be done as an `afterCopyExtraResources` hook or a `beforeAsar` hook, whichever is preferred.

Before we get working on this it would be great to have some feedback as to whether a PR for this would be accepted, and any ideas about the implementation (for example, the choice between a `before` and `after` hook)

**Feature Request**

Would it be possible to add some packaging lifecycle process callbacks to the `options` object:

``` js
const packager = require('electron-packager')

packager({
  dir: __dirname,
  start(event) {
    const { name, path, platform, arch, version } = event
    console.log(`Packaging ${name} for ${platform} ${arch} using electron v${version}`)
    // Packaging Slack for platform darwin x64 using electron v1.4.3
    // Packaging Slack for platform linux x64 using electron v1.4.3
  },
  progress(event) {
    const { name, path, platform, arch, version, progress, message } = event
    console.log(progress, message)
    // example logs...
    // 0.123 downloading
    // 0.234 downloading
    // 0.345 packaging
    // 0.456 cleaning
    // 0.678 emitting
  },
  complete(event) {
    const { name, path, platform, arch, version } = event
    console.log(`Packaged ${name} into ${path}`)
    // Packaged Slack into /Users/matthewwagerfield/Desktop/slack/build/Slack-darwin-x64
    // Packaged Slack into /Users/matthewwagerfield/Desktop/slack/build/Slack-linux-x64
  }
}, (error, packages) => {
  if (error) console.error(error)
  else console.log(packages)
  // [{
  //   name: 'Slack',
  //   platform: 'darwin',
  //   arch: 'x64',
  //   version: '1.4.3',
  //   path: '/Users/matthewwagerfield/Desktop/slack/build/Slack-darwin-x64'
  // },{
  //   name: 'Slack',
  //   platform: 'linux',
  //   arch: 'x64',
  //   version: '1.4.3',
  //   path: '/Users/matthewwagerfield/Desktop/slack/build/Slack-linux-x64'
  // }]
})
```

You will see in the pseudo code above, the process lifecycle `event` objects always have the same information that is passed to your `afterCopy` and `afterExtract` methods:

``` js
{ 
  name: 'Product Name',
  path: '/path/to/build',
  platform: 'darwin|linux|win32|mas',
  arch: 'ia32|x46|armv7l',
  version: '1.4.3'
}
```

In addition to the above, the `progress` method `event` object would receive _two_ additional key values:

``` js
{ 
  message: 'downloading, packaging, emitting etc.',
  progress: 0.123
}
```

To maintain consistency and for more useful information, I have also suggested that the callback that is provided as the final argument to `packager` receives an array of package objects (as opposed to an array of paths). These package objects would contain the same information in the `event` objects.

With this addition, it would be nice to have an option for turning off the default logs that are emitted when the packaging process initiates:

> Packaging app for platform darwin x64 using electron v1.4.3

Perhaps an options like `quiet: true` would be suffice?
