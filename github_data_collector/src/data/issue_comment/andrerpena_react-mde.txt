This is a great and much-needed project, love the plug'n'play-style implementation. Looking forward to the design updates over time too!

Noticed that there are no releases on GitHub for versions newer than 7.8.0. Would be helpful if you would add those (along with some simple changelogs)! The main reason is to make it easier to understand what has changed with each update (so while these tags won't help me, future tags will).
in some case, I just want to add my custom command at the toolbar ，if I use commands props,i have to list all the default command。
```js
commands: [
          commands.orderedListCommand,
          commands.unorderedListCommand,
          commands.checkedListCommand,
          commands.imageCommand
]
```
so unfriendly. I just want to add one command ,do not change default.  so do the getIcons props， if i just want to change one icon,what should i do for the default icon.....???
I cant find any way to:
- Disable height "grip"
- Make editor full page height

This way the editing is more "document editor" like. Maybe i'm missing something?
I want react-mde to look like the Github editor as much as possible

## Style 1

![image](https://user-images.githubusercontent.com/1581429/71380722-a03d0400-25d0-11ea-8da3-684e802dd5a7.png)

## Style 2

![image](https://user-images.githubusercontent.com/1581429/70851918-c4e00000-1e9b-11ea-9e58-d304f93cb92b.png)

## Style 2.1

![image](https://user-images.githubusercontent.com/1581429/71411871-678e4080-264b-11ea-8d14-a8414c660114.png)

## Style 3

![image](https://user-images.githubusercontent.com/1581429/71411896-7aa11080-264b-11ea-9237-253e4668a4ce.png)

Currently, the "write" and "preview" tabs can only be customized via the `l18n` property which takes `string`s. Unfortunately, this means I can't use [React-Intl](https://github.com/formatjs/react-intl)'s components for the localisation nor can I add an arbitrary icon to these buttons. The former can be solved by using their [injection](https://github.com/formatjs/react-intl/blob/master/docs/API.md#injection-api)-API but the latter doesn't seem possible.

Hence, it'd help to extend the current implementation to also allow `React.ReactNode`s for the write as well as preview button.
I have the following nextjs page:
```javascript
import fetch from 'isomorphic-unfetch'
import { useRouter } from 'next/router'
import PropTypes from 'prop-types'
import { useState } from 'react'
import ReactMarkdown from 'react-markdown'
import ReactMde from 'react-mde'
import 'react-mde/lib/styles/css/react-mde-all.css'
import Feedback from '../../../components/feedback'

export default function Edit ({ postToEdit }) {
  const [post, setPost] = postToEdit ? useState(postToEdit) : useState({})
  const [error, setError] = useState()
  const [success, setSuccess] = useState()
  const [body, setBody] = useState()
  const [excerpt, setExcerpt] = useState()
  const [title, setTitle] = useState()
  const [selectedTab0, setSelectedTab0] = useState('write')
  const [selectedTab1, setSelectedTab1] = useState('write')
  const router = useRouter()

  function onChange (event) {
    setPost({
      ...post,
      [event.target.id]: event.target.value
    })
  }

  async function savePost (event) {
    event.preventDefault()
    const method = post._id ? 'PUT' : 'POST'
    const url = post._id ? `/api/post/${post._id}` : '/api/post/new'
    const res = await fetch(url, {
      method,
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(post)
    })
    if (res.ok) {
      setSuccess(true)
      setError(false)
      setTimeout(() => router.back(), 1000)
    } else {
      const data = await res.json()
      setError(data.error)
    }
  }

  return (
    <>
      <Feedback error={error} success={success} />
      <form onSubmit={savePost}>
        <div className='form-group'>
          <label htmlFor='title'>Title</label>
          <input
            required
            type='text'
            className='form-control'
            id='title'
            onChange={event => setTitle(event.target.value)}
            value={title || post.title || ''}
          />
          <label htmlFor='excerpt'>Excerpt:</label>
          <ReactMde
            value={excerpt || post.excerpt || ''}
            onChange={setExcerpt}
            selectedTab={selectedTab0}
            onTabChange={setSelectedTab0}
            generateMarkdownPreview={mkd => <ReactMarkdown source={mkd} />}
          />
          <ReactMde
            value={body || post.body || ''}
            onChange={setBody}
            selectedTab={selectedTab1}
            onTabChange={setSelectedTab1}
            generateMarkdownPreview={mkd => <ReactMarkdown source={mkd} />}
          />
        </div>
        <button type='submit' className='btn btn-primary btn-block'>Save</button>
      </form>
    </>
  )
}

Edit.getInitialProps = async ctx => {
  let baseUrl
  if (typeof window === 'undefined') {
    baseUrl = `${ctx.req.protocol}://${ctx.req.headers.host}`
  } else {
    baseUrl = `${window.location.protocol}//${window.location.host}`
  }

  if (ctx.query.pid && ctx.query.pid !== 'new') {
    const data = await fetch(`${baseUrl}/api/post/${ctx.query.pid}`)
    const postToEdit = await data.json()

    return { postToEdit }
  }
  return { }
}

Edit.propTypes = {
  postToEdit: PropTypes.object
}
```
Editor bar is correctly shown but if I click on preview I get a blank page
Now I'm reading imageCommand.tsx. 
Before I try to do it, I hope to know if it's possible to add callback/api for upload image in current project framework?

I want the size of the editor to stay the same whether it is in edit or preview mode, and to keep the resize grip in both modes. 
In my form i want to be able to tab from another field directly into the react-mde editor, but it is instead selecting and tabbing through the buttons in the toolbar (without any indication they are selected.) It would be ideal to have a prop that sets tabindex="-1" for all the buttons in the toolbar. 
