Hello,

This issue is pretty much for reporting the incompatibility to the gem author, and hopefully it will help anyone who runs into this problem to understand what's going on.

Basically, after we upgrade our dependencies to use Rack 2.1.1, we noticed that our generated documentation no longer show JSON response but instead showing `[binary data]` instead.

Digging in further, we found out that in https://github.com/rack/rack/commit/8c62821f4a464858a6b6ca3c3966ec308d2bb53e, especially [this change](https://github.com/rack/rack/commit/8c62821f4a464858a6b6ca3c3966ec308d2bb53e#diff-4fc9bc1f7d91630f4f9f47fc6663f3f7R195), `MockResponse#body` now creates a buffer and use `<<` to join the content together. However, on line 195, the author uses `String.new` without specifying the encoding, resulting in Ruby creating a [new String with `ASCII-8BIT` encoding by default](https://ruby-doc.org/core-2.7.0/String.html#method-c-new).

As it turns out, rspec_api_documentation relies on string encoding to determine if it should include the response body in the documentation or not:

https://github.com/zipmark/rspec_api_documentation/blob/560c3bdc7bd5581e7c223334390221ecfc910be8/lib/rspec_api_documentation/client_base.rb#L90-L95

Hence, the change in Rack broke this conditional.

I've reported this issue to Rack in https://github.com/rack/rack/pull/1486, and hopefully we can solve this soon.

The solution right now for us is to lock Rack to `~> 2.0.8` for now.

Thank you very much.
let's say I have a structure like:

```
{
  data: [
    {
      id: 5,
      name: 'test'
    },
    {
      id: 6,
      name: 'test2'
    }
  ]
}
```
is there a way I can document the nested fields so as a result I will get openapi generated correctly (so in swagger I can add these items from the UI) ?


Added operation id to OpenAPIWriter for generating more complete swagger definitions.
Corresponding method in DSL added.
According to this issue: https://github.com/zipmark/rspec_api_documentation/issues/416, I need to define a route, but using `route` causes some really bad API blueprint formatting (putting GET and PUT together in one section is really confusing).

The [readme](https://github.com/zipmark/rspec_api_documentation#api_blueprint) says:
> If you don't use route, then param in get(param) should be an URL as states in the rest of this documentation.

So I tried:

```
get "/api/customers" do
  parameter :keyword, 'Filter search content', :example => 'John', :type => 'string'

  let(:keyword) { "John" }

  example_request "List All Customers" do
    expect(response_status).to eq(200)
  end
end
```

But all I get is this error: ` undefined method route_uri' for #<RSpec::Core::Example "List All Customers"> (NoMethodError)`

I don't know if my code is wrong, the readme is wrong, or the gem doesn't work with the `get(param)` format. Documentation is scarce. Any ideas?

When running the below command to re-generate API docs:
`RAILS_ENV=test rake docs:generate`
it will execute every single rspec test under `'spec/acceptance/**/*_spec.rb'`. It *even* executes the tests that are explicitly marked as:
`document: false`
With this update, only the rspec tests that contribute to the generation of API documentation will be executed by default, which is much more efficient.

_Aside:_ For our team, this reduced the amount of tests being executed during
docs generation down from 195 to 37.

**Further notes**
Relevant RSpec documentation: https://relishapp.com/rspec/rspec-core/docs/command-line/tag-option#exclude-examples-with-a-%60name:value%60-tag-and-@
Hey there. 

I'm using RAD to document a JSON:API formatted Rails application. This means my `Accept` and `Content-Type` headers are `application/vnd.api+json`, not `application/json`. 

The tests are passing just fine. The problem is the output to Slate, which is strange. 

This is an example of a test:

```ruby
context "sorting" do
  let(:sort) { "-name" }

  parameter :sort, "Sorting projects"

  example "Sorting projects" do
    do_request
    expect(status).to eq 200
    expect(response_body).to be_json.with_content(project3.id).at_path("data.0.id")
    expect(response_body).to be_json.with_content("project").at_path("data.0.type")
    expect(response_body).to be_json.with_content(project3.name).at_path("data.0.attributes.name")
  end
end
```

This results in a request block being generated in the resulting slate documentation containing this:

```json
sort: -name
```

That clearly isn't JSON, nor should there be a request block generated at this point. This is a URL parameter. 

So my question is, how do I get rid of the request body block from the generated markdown for GET requests? 
# Steps to Reproduce

I have created a minimal rails app - via Github. Here it is: https://github.com/BKSpurgeon/active-storage-test

There is a User model. We make use of the active storage gem to load an 'avatar' of the user. 

The problem: in summary, the specs are not passing, when they should.

## Expected Behaviour
Both of the following specs should succeed:

```ruby
## spec/requests/user_spec.rb
require 'rails_helper'

RSpec.describe "Users", type: :request do

  describe "it attaches uploaded files" do
    it 'attaches the uploaded file' do
      file = fixture_file_upload(Rails.root.join('public', 'avatar.jpg'), 'image/jpg')
      expect {
        post api_users_path, params: { user: {username: "Ben", avatar: file } }
      }.to change(ActiveStorage::Attachment, :count).by(1)
    end
  end
end
```


```ruby
## spec/acceptance/api/users_controller_spec.rb
require 'acceptance_helper'
require 'action_dispatch/testing/test_process'

resource 'Api' do
  header 'Accept', 'application/json'
  header 'Content-Type', 'application/json'
  header 'Host', 'example.com'

  describe 'POST /api/users' do
    post '/api/users' do
      let(:avatar) { fixture_file_upload(Rails.root.join('public', 'avatar.jpg'), 'image/jpg') }
      let(:username) { 'Test User' }
      let(:params) { {  user: { username: username, avatar: avatar } } }

      context 'with avatar' do
        it { expect { do_request(params) }.to change { ActiveStorage::Attachment.count }.from(0).to(1) }
      endruby 2.6.3p62
    end
  end
end
```

## Actual Behaviour

Only one of the specs pass: the request spec passes, but the controller spec does not pass.

## System Configuration

Rails version: 5.2.3
Ruby Version: ruby 2.6.3p62

Adds support to swagger's vendor extension "x-logo" in order to be used by supported frontends.
Otherwise, it causes a name conflict if API uses `http_method` parameter