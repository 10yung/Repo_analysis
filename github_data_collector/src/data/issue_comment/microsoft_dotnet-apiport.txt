I ported an application to .NET CORE 3.1 and the plan is to run it in a docker container on linux. Actually most of the application runs as expected, but trying to use System.DirectoryServices.AccountManagement gives me the exception:

System.PlatformNotSupportedException: System.DirectoryServices.AccountManagement is not supported on this platform.

However when I run api ananlyzer, it tells me 100% supported.
Frankely, I dislike surprises like this. 
Please advise.
Thanks, Joachim

added posix analyze.sh script to simplify generating reports.  also updated docs to reflect
to follow Microsoft released tool guidance at https://docs.microsoft.com/en-us/dotnet/core/tools/troubleshoot-usage-issues#package-naming-enforcement.
Also remove the target "GetSignNuGetPackFiles", which is not needed.
This is .NET Core compatible so it runs on multiple OS's, doesn't require a restore during the build as your GitVersion use did, and it doesn't require a special azure pipelines step.
It sets the build number in Azure Pipelines to match the version actually built.
For example, System.Type.Name is reported as not support on .NET core 2.0+. However, it is available since it is inherited from base class MemberInfo. Since ApiPort's goal is identify missing APIs in target TFM, we shouldn't report inherited APIs as missing. However, ApiPort gets the API information from APICatalog, and API Catalog is shared by multiple tools, like Apisof.net. Should Apiport builds in logic to crawl the inherits chain or API Catalog categorize the inherited APIs differently?
Also fixes several build warnings.
Seriously: this drops the download time from 15+ seconds to <2 seconds.
I ran portability analyzer today, and in essence it spotted usage of the follwing methods being non portable:

- M:System.IO.DirectoryInfo.GetAccessControl
- M:System.IO.DirectoryInfo.SetAccessControl(System.Security.AccessControl.DirectorySecurity)
- M:System.IO.Pipes.NamedPipeServerStream.#ctor(System.String,System.IO.Pipes.PipeDirection,System.Int32,System.IO.Pipes.PipeTransmissionMode,System.IO.Pipes.PipeOptions,System.Int32,System.Int32,System.IO.Pipes.PipeSecurity,System.IO.HandleInheritability,System.IO.Pipes.PipeAccessRights)
- M:System.IO.Pipes.PipeStream.GetAccessControl
- M:System.IO.Pipes.PipeStream.SetAccessControl(System.IO.Pipes.PipeSecurity)


IÂ´d definitley expect security aspects to be covered in "Platform Extensions" aka "Windows Compatibility Pack". Is this an issue in analyzer or where can I ask a question to the "Windows Compatibility Pack"?

Thanks, Joachim
running the portability service under debugging, we can observe that basic endpoints can't be reached, like ResultFormatController.GetDefault(). 
The same self-contain apiport app works fine with public portable service. And the net461 and netcoreapp2.1 apiport app built out of the same codebase as the self-contained app works fine with localhosted service.
PublicKeyToken.ParseString() throws exception when the hex string is null.