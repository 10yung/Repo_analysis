### Expected behaviour

Expected to return the permitted params.

```ruby
params.require(:post).permit([:title, :body])

# Result:
{"title" => "My title", "body" => "My description"}
```

### Actual behaviour

Instead of the expected behaviour i got an empty hash.


```ruby
params.require(:post).permit([:title, :body])

# Result:
{}
```

### Workarround

Adding `*` before array it works.

```ruby
params.require(:post).permit(*[:title, :body])

# Result:
{"title" => "My title", "body" => "My description"}
```

### System configuration

- **Rails version**: rails 3.2.22.5
- **Ruby version**: ruby 1.9.3p551
- **strong_parameters version**: strong_parameters 0.2.3

I'm not getting any exceptions raised for forbidden attributes and mass assignment is still allowed.

I have done the following

1) Added the strong_parameters gem
2) Created initializers/strong_parameters.rb

`ActiveRecord::Base.class_eval do
  include ActiveModel::ForbiddenAttributesProtection
end`

3) Added `config.action_controller.action_on_unpermitted_parameters = :raise` for all environments.
3)  Removed all attr_accessible calls from models
I was researching on `config.action_controller.action_on_unpermitted_parameters` and couldn't immediately see how I end up with the default setting for e.g. production, that simply ignores unpermitted attributes and filters them out. I've now addressed this in the README, hope that it's useful!
I ran into an issue today with nested numbers as keys breaking `permit`. It only breaks if the key is nested. If it's a top-level key it works just fine.

I'm using Rails 4.2.6 and Ruby 2.3.0.

Examples:

**broken**

``` ruby
params = ActionController::Parameters.new(photos: { '1' => { 'hello': 'world' } })
params.permit(photos: { '1' => [:hello] }) # => {"photos"=>{"1"=>{}}}
```

**works**

``` ruby
params = ActionController::Parameters.new('1' => { 'hello': 'world' })
params.permit('1' => ['hello']) # => {"1" => { "hello": "world" }}
```

``` ruby
params = ActionController::Parameters.new(photos: { 'key_1' => { 'hello': 'world' } })
params.permit(photos: { 'key_1' => [:hello] }) # => {"photos"=>{"key_1"=>{"hello"=>"world"}}}
```

Of course renaming your keys is the easy workaround. Just thought I'd create some documentation around the issue.

``` rb
ActionController::Parameters.new(foo: :bar).respond_to?(:map) # => false

ActionController::Parameters.new(foo: :bar).map do |param|
  param
end
# => [["foo", :bar]]
```

I have a line in one of my models that looks like this:

``` ruby
has_many :notes, as: :notable, dependent: :destroy, after_add: :create_informal_note
```

I am sending a POST request to my Rails endpoint with JSON like this:

``` json
{
  "note": {
    "text": "Test note",
    "notable_id": 1,
    "notable_type": "AnotherModel"
  }
}
```

Rails & strong_parameters has no problem interpreting this and creating the data.  However, due to the way the JSON request body is structured, Rails & strong_parameters simply just set the `id` and `type` fields.

This results in Rails not picking up on the added association, causing my `after_add` association callback not to trigger.

This code works ok

```
ActionController::Parameters.new({"0" => {:subject_id=>45542597, :quantity=>1}}).permit([:subject_id, :quantity])
=> {:subject_id=>45542597, :quantity=>1}
```

expect number hash key to works ok too, but

```
ActionController::Parameters.new({0 => {:subject_id=>45542597, :quantity=>1}}).permit([:subject_id, :quantity])
=> {}
```

Without the extra steps added to the readme in this commit, the [migration to Rails 4 instructions](https://github.com/rails/strong_parameters#migration-path-to-rails-4) will cause ActiveModel::MassAssignmentSecurity::Error to be raised on any model that has had necessary attr_accessible declarations removed (as the instructions direct), because `config.active_record.whitelist_attributes = true` in config/application.rb, which is the default setting, requires all models to whitelist mass-assigned attributes.

The extra steps added to the readme in this commit make it possible to update and deploy one model at a time, which is valuable.

I'm not very familiar with this, but it appears that attr_protected works because it signals that the model secures mass assignment with a blacklist, and then an empty black list makes all attributes accessible and leaves the responsibility of mass assignment protection to strong_parameters.

More info:

http://stackoverflow.com/a/14252971/724752

https://github.com/rails/strong_parameters/issues/226

An alternative to this commit might be to just put an `attr_protected` with no arguments in ActiveModel::ForbiddenAttributesProtection, but I'm not ready to investigate that now.

This change introduces a way to mark a specific branch of the parameter
hash as trusted. Using the added `StrongParameters::ANY` or `:*` allows
to mark a value of the hash respectively.

This functionality can be handy when your controllers already rely on
strong_parameters and raising of errors is enabled. If the parameter
hash contains in such a case a parameter value which is completely
customizable by the consumer of the controller, it might be impossible
to predefine keys.

Relates to https://github.com/rails/rails/issues/9454

I want to be able to delete a nested resource when I get a nested attribute set to `nil`. 

Currently have an API that lets you manage nested resources. The model update logic expects the client to set an explicit `nil` when it wants to remove one of these related resources.

For example I have an API that exposes the People in the system. Those people have an optional Address.

To delete the address from a person set the `address` parameter to `nil`.

Everything works fine with the nested address attributes set:

``` ruby
>> params = ActionController::Parameters.new({people: [{ name: "Amy Pond", address: { town: "Leadworth", street: "Cathedral Rd" } }] })
=> {
     "people"=>[{ 
       "name"=>"Amy Pond",
       "address"=>{
         "town"=>"Leadworth",
         "street"=>"Cathedral Rd"
       }
     }]
   }

>> params.permit(:people, :people => [:name, :address => [:town, :street]]) 
=> {
     "people"=>[{
       "name"=>"Amy Pond",
       "address"=> {
         "town"=>"Leadworth",
         "street"=>"Cathedral Rd"
       }
     }]
   }
```

But if the nested attributes is set to nil, it gets dropped:

``` ruby
>> params2 = ActionController::Parameters.new({people: [{ name: "Amy Pond", address: nil }] })
=> {
     "people"=>[{
       "name"=>"Amy Pond",
       "address"=>nil
     }]
   }
>> params2.permit(:people,
    :people => [:name, :address => [:town, :street]])

=> {"people"=>[{"name"=>"Amy Pond"}]}
=> {
     "people" => [{
       "name"=>"Amy Pond"
     }]
   }
```

This feels like it might be inconsistent because when I permit the scalar `address` on that same params hash, it will retain the `nil` key:

``` ruby
>> params2.permit(:people,
     :people => [:name, :address])

=> {
     "people" => [{
       "name"=>"Amy Pond",
       "address"=> nil
     }]
   }
```

Is this the desired behavior, or would it be preferred to retain the `nil` value?

I havn't looked into implemntation, but would be happy to work in a PR if this is a desired behavior.
