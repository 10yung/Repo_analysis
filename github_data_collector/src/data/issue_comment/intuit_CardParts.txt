**Describe the bug**

There seems to be an issue with Autolayout behavior when the `CardsViewController` is presented modally using a `modalPresentationStyle` of types: **formSheet** or **actionSheet**. I haven't tried it on iPhone but it's really evident on iPads running iOS13 (Since **formSheet** is the new automatic behavior). Also worth noting, if the device is rotated, Autolayout will then rearrange the elements to another incorrect state that will remain until the controller is dismissed.

If the modal view controller is presented on **fullScreen**, there is no issue whatsoever. 

**To Reproduce**
Steps to reproduce the behavior:
1. Create a `CardsViewController`
2. Create and initialize multiple `CardPartsViewControllers` instances.
3. Load `CardPartsViewControllers` into the `CardsViewController`.
4. Present CardsViewController modally with a modal presentation style of: **.formSheet** or **.pageSheet**.

**Expected behavior**
The elements should be displayed in the same way as if they were presented in **.fullscreen.**

**Screenshots**
Fullscreen Presentation Portrait
![IMG_0011](https://user-images.githubusercontent.com/9374940/72094668-809a2100-32dc-11ea-9873-7cd64ec17473.PNG)

Fullscreen Presentation Landscape
![IMG_0012](https://user-images.githubusercontent.com/9374940/72094678-88f25c00-32dc-11ea-9c64-559351753f89.PNG)

Formsheet Presentation Portrait Before Rotation
![IMG_0006](https://user-images.githubusercontent.com/9374940/72094720-9e678600-32dc-11ea-8527-7b4f24edce38.PNG)

Formsheet Presentation Landscape After Rotation
![IMG_0007](https://user-images.githubusercontent.com/9374940/72094752-b3dcb000-32dc-11ea-9254-efffdd4143d0.PNG)

Formsheet Presentation Portait After Rotation
![IMG_0008](https://user-images.githubusercontent.com/9374940/72094798-cd7df780-32dc-11ea-9b2e-473bf659daba.PNG)



**Info (please complete the following information):**
 - Device: iPad
 - OS: iOS 13
 - Pod Version: 2.23.1
 - Xcode Version: 11.2.1

**Additional context**
Will answer through responese.

## Before you make a Pull Request, read the important guidelines:

## Issue Link :link: #184 
 <ul>
   <li> Is this a bug fix or a feature? </li>  Feature
   <li> Does it break any existing functionality?</li> I think because we introduce some new properties to the theme protocol, it might cause some erroes
</ul>

## Goals of this PR :tada:
 <ul>
   <li> Why is the change important? </li>
Its dark mode ðŸ˜‚
   <li> What does this fix? </li>
   <li> How far has it been tested? </li>
 </ul>
 
## How Has This Been Tested :mag:

Please let us know if you have tested your PR and if we need to reproduce the issues. Also, please let us know if we need any relevant information for running the tests.

<ul>
 <li> User Interface Testing </li>
 <li> Application Testing </li>
</ul>

## Test Configuration :space_invader:

<ul>
 <li> Xcode version: 11.1 (11A1027) </li>
 <li> Device/Simulator: Simulator</li>
 <li> iOS version: iOS 13.1 </li>
</ul>

## Things to check on :dart:


 - [ ] My Pull Request code follows the coding standards and styles of the project 
 - [ ] I have worked on unit tests and reviewed my code to the best of my ability 
 - [ ] I have used comments to make other coders understand my code better 
 - [ ] My changes are good to go without any warnings 
 - [ ] I have added unit tests both for the happy and sad path 
 - [ ] All of my unit tests pass successfully before pushing the PR 
 - [ ] I have made sure all dependent downstream changes impacted by my PR are working 


  

If a CardPart is created and then used in multiple calls to setupCardParts forState then upon first display the shared CardPart is not displayed.

I amended the example StateCardController thus:
`
override func viewDidLoad() {
		super.viewDidLoad()

        self.state = .empty

        let sharedPart = CardPartTextView(type: .normal)
        sharedPart.text = "Shared Card Part"

        let textPart = CardPartTextView(type: .normal)
		textPart.text = "Empty State"

        let loadingCardPart = CardPartTextView(type: .normal)
        loadingCardPart.text = "I am a loading state part"

        let customCardPart = CardPartTextView(type: .normal)
        customCardPart.text = "I am a custom state that you can make!"
        
        setupCardParts([customCardPart, sharedPart], forState: .custom(customStateKey))
        setupCardParts([textPart, sharedPart], forState: .empty)
        setupCardParts([loadingCardPart, sharedPart], forState: .loading)
}`

If the state is changed then the card parts are then correctly displayed but there's an XCode warning triggered:
`CardParts_Example[20068:4559504] [Warning] Warning once only: Detected a case where constraints ambiguously suggest a size of zero for a collection view cell's content view. We're considering the collapse unintentional and using standard size instead. Cell: <CardParts.CardCell: 0x7fa827c48b10; baseClass = UICollectionViewCell; frame = (10 0; 394 0); layer = <CALayer: 0x6000029e8740>>`

**Describe the bug**
If you set up CardPartPagedView with 3 pages and then set currentPage to 3 the control only displays page 1.


**To Reproduce**
As above, in the example project add a line to set the currentPage to any value other than 1 and page 1 only is displayed.

**Expected behavior**
Content page displayed that corresponds to the page number set for currentPage property.

**Screenshots**
N/A

**Info (please complete the following information):**
All devices and OS versions

**Additional context**
N/A
The idea of a Theme is great, but I need to override one of the properties - cardsViewContentInsetTop and there doesn't seem to be a way to do that. 

I see that you've added a cardCellMargins property to CardsViewController so that it can be overridden.

Do I need to fork this repository to tweak it to add the cardsViewContentInsetTop in the same way or is there a better solution to overriding this property?
## Issue Link :link:
 <ul>
   <li> Add Carthage support.  Issue #10 </li>
</ul>

## Goals of this PR :tada:

Carthage support has been added to CardParts.  

Because Cocoapods is also supported and is responsible for generating the Xcode project and workspace, I changed the `.gitignore` to allow tracking of the Pod source code - which allows Carthage to build the project when another app specifies CardParts as a dependency.  This creates some repo bloat but allows both dependency managers to co-exist.

Additionally for Carthage to build, the Xcode workspace needed to share the CardParts scheme (CardParts.xcscheme)  This file is found in the Pods subfolders.

Summary of changes:
 <ul>
   <li> Added Cartfile - which specifies the CardParts dependencies.  </li>
   <li> Changed .gitignore to include the Pods and ignore Carthage/Checkouts.  </li>
 </ul>
 
## How Has This Been Tested :mag:

<ol>
  <li> I created a "release" on my fork. </li>
  <li> I started a new single-view Xcode project and a Cartfile referencing my release. Ex: <code>github "JJ-Intuit/CardParts" ~> 2.21.2</code></li>
  <li> From the terminal, run <code> carthage update --platform ios </code>
  <li> Within the iOS app, I followed steps outlined here: https://github.com/Carthage/Carthage#getting-started to add the libraries to the project </li>
  <li> Then, I used the CardParts library - no Cocoapods needed! </li>
</ol>

## Test Configuration :space_invader:

<ul>
 <li> Xcode version: 11.2 </li>
 <li> Device/Simulator: n/a </li>
</ul>

It would be great if we could add animations to the way our views are loaded and displayed.  Whether it's built into CardParts or potentially another pod such as CardPartsAnimations.
## Before you make a Pull Request, read the important guidelines:

## Issue Link :link:
 <ul>
   <li> Is this a bug fix or a feature? **Feature**</li>
   <li> Does it break any existing functionality? **Unit Tests still pass**</li>
</ul>

## Goals of this PR :tada:

- Why is the change important? hacktoberfest
- What does this fix? https://github.com/intuit/CardParts/issues/58
- How far has it been tested? N/A
- [x] Remove docs/ from gitignore
- This is where the magic happens: `.jazzy.yaml`
- Preview: https://cardparts.surge.sh

 </ul>
 
## How Has This Been Tested :mag:

Please let us know if you have tested your PR and if we need to reproduce the issues. Also, please let us know if we need any relevant information for running the tests.

<ul>
 <li>N/A</li>
</ul>

## Test Configuration :space_invader:

<ul>
 <li> Xcode version: 10.3</li>
</ul>

## Things to check on :dart:


 - [x] My Pull Request code follows the coding standards and styles of the project 
 - [N/A] I have worked on unit tests and reviewed my code to the best of my ability 
 - [x] I have used comments to make other coders understand my code better 
 - [x] My changes are good to go without any warnings 
 - [N/A] I have added unit tests both for the happy and sad path 
 - [x] All of my unit tests pass successfully before pushing the PR 
 - [x] I have made sure all dependent downstream changes impacted by my PR are working 

## Before you make a Pull Request, read the important guidelines:

## Issue Link :link:
 <ul>
   <li> Is this a bug fix or a feature? </li>
   <li> Does it break any existing functionality?</li>
</ul>

## Goals of this PR :tada:
 <ul>
   <li> Why is the change important? </li>

Remove dependency on the Assets catalog

   <li> What does this fix? </li>
   <li> How far has it been tested? </li>
 </ul>
 
## How Has This Been Tested :mag:

Please let us know if you have tested your PR and if we need to reproduce the issues. Also, please let us know if we need any relevant information for running the tests.

<ul>
 <li> User Interface Testing </li>
 <li> Application Testing </li>
</ul>

## Test Configuration :space_invader:

<ul>
 <li> Xcode version: </li>
 <li> Device/Simulator </li>
 <li> iOS version || MacOSX version</li>
</ul>

## Things to check on :dart:


 - [ ] My Pull Request code follows the coding standards and styles of the project 
 - [ ] I have worked on unit tests and reviewed my code to the best of my ability 
 - [ ] I have used comments to make other coders understand my code better 
 - [ ] My changes are good to go without any warnings 
 - [ ] I have added unit tests both for the happy and sad path 
 - [ ] All of my unit tests pass successfully before pushing the PR 
 - [ ] I have made sure all dependent downstream changes impacted by my PR are working 


  

Does this library support iOS 13's dark mode?