Hello,

I am using Unity 2018.4.14f1.
and Configuration is set to .Net 4.x and IL2CPP.
i have added websocket-sharp to Assets\Plugins Folder.
Everything works fine on editor..but when i run it on device(Android) it directly calls OnClose everytime.
Any Suggestions would be of great help.
Code file attached for reference.

[Socket.txt](https://github.com/sta/websocket-sharp/files/4070972/Socket.txt)
When using this websocket library as a client only it seems that .IsAlive() does return false all the time even though a connection is established. I had a look in the code, it should definetly work... 
Any idea/help would be appreciated!
currently Encountering an issue where we can't get a succesful connection. We are using unity webgl and are using a recent version of Unity TSL version 1.2 once we change your authenticate in websocket.cs line 2144

                    sslStream.AuthenticateAsClient(
                      host,
                      conf.ClientCertificates,
                      conf.EnabledSslProtocols,
                      conf.CheckCertificateRevocation);

to sslStream.AuthenticateAsClient(host);

it seems to work perfectly. I'm wondering what the implications might be of this change as it appears you are always sending null in conf.ClientCertificates regardless, and without those it succeeds. Maybe we are misusing it somewhere?

Thanks
Hey,

I didnt know where to post my code to help improve the project.

I added an attribute driven security control on Behavior methods :
- Usage of Castle Dynamic proxies
- Creation of an AuthorizeAttribute class
- usage of Castle IInterceptor

in WebSocketServiceManager class :
```
using Castle.DynamicProxy;

       ...

       public void AddService<TBehavior>(
          string path, Action<TBehavior> initializer
        )
          where TBehavior : WebSocketBehavior, new()
        {
            if (path == null)
                throw new ArgumentNullException("path");

            if (path.Length == 0)
                throw new ArgumentException("An empty string.", "path");

            if (path[0] != '/')
                throw new ArgumentException("Not an absolute path.", "path");

            if (path.IndexOfAny(new[] { '?', '#' }) > -1)
            {
                var msg = "It includes either or both query and fragment components.";
                throw new ArgumentException(msg, "path");
            }

            path = path.TrimSlashFromEnd();

            lock (_sync)
            {
                WebSocketServiceHost host;
                if (_hosts.TryGetValue(path, out host))
                    throw new ArgumentException("Already in use.", "path");

                // ***** create host *****
                host = new WebSocketServiceHost<TBehavior>(
                 path, () => this.CreateBehavior<TBehavior>(), initializer, _log
               );

                if (!_clean)
                    host.KeepClean = false;

                if (_waitTime != host.WaitTime)
                    host.WaitTime = _waitTime;

                if (_state == ServerState.Start)
                    host.Start();

                _hosts.Add(path, host);
            }
        }

        protected T CreateBehavior<T>()
        {
            // ***** prepare dynamic proxy *****
            ProxyGenerator generator = new ProxyGenerator();
            T proxy = (T)generator.CreateClassProxy(typeof(T), new AuthorizeInterceptor());
            return proxy;
        }

```

new AuthorizeAttribute class :
```
using System;

namespace WebSocketSharp.Server.Attributes
{
    [AttributeUsage(AttributeTargets.All)]
    public class AuthorizeAttribute : Attribute
    {
        public AuthorizeAttribute()
        {
        }

        public string Roles { get; set; }
    }
}

```

new AuthorizeInterceptor class :
```
using System;
using System.Linq;
using System.Reflection;

using Castle.DynamicProxy;

using WebSocketSharp.Server.Attributes;
using WebSocketSharp.Server.Exceptions;

namespace WebSocketSharp.Server.Interceptors
{
    public class AuthorizeInterceptor : IInterceptor
    {
        public void Intercept(IInvocation invocation)
        {
            // ***** check attribute *****
            AuthorizeAttribute attr = invocation.Method.GetCustomAttributes<AuthorizeAttribute>(true).FirstOrDefault();
            if (attr == null || string.IsNullOrWhiteSpace(attr.Roles))
            {
                invocation.Proceed();
                return;
            }

            // ***** check instance *****
            if (!(invocation.InvocationTarget is WebSocketBehavior))
            {
                invocation.Proceed();
                return;
            }

            WebSocketBehavior behavior = (WebSocketBehavior)invocation.InvocationTarget;

            // ***** check user authenticated *****
            if (!behavior.Context.IsAuthenticated)
            {
                throw new UnauthenticatedException($"Cannot run method \"{invocation.Method.Name}\". No user authenticated");
            }

            // ***** extract roles *****
            string[] roles = attr.Roles.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            if (roles.Length == 0)
            {
                invocation.Proceed();
                return;
            }

            // ***** check user in role *****
            bool hasRole = false;
            foreach (string role in roles)
            {
                hasRole |= behavior.Context.User.IsInRole(role);
            }

            if (!hasRole)
            {
                throw new UnauthorizedException($"Cannot run method \"{invocation.Method.Name}\". Unauthorized user => should have \"{attr.Roles}\"");
            }

            // ***** execute *****
            invocation.Proceed();
        }
    }
}
```

I let you create the exceptions as Exception with all constructors overridden ;o)

I use it like this in my Behavior :

```
        [Authorize(Roles = "toto, titi")]
        protected override void OnMessage(MessageEventArgs e)
        {
            ...
        }
```

Cheers
Christophe
Add guidline how to change SSL Protocol
This WebSocketException "The header of a frame cannot be read from the stream" is always thrown when closing the web socket client.

I have an example of a websocket client sending and receiving the same message from the backend.

**WebSocketClient**
 using (var ws = new WebSocket ("wss://localhost:44398/ws")) 
 {
        ws.OnMessage += (sender, e) =>
        Console.WriteLine ("Received Message: " + e.Data);
        ws.Connect ();
        ws.Send ("Test Message");
        Console.ReadKey();
}
    
**Backend**
It is an asp.net core web application which only receive the request from the WebSocketClient and it answers back with the same message.

It returns the message as expected, but then after entered any key to continue with the execution it fails and throws the above exception at the time of closing the web socket client.

Here is the the code if you would like to take a look.
https://github.com/juanrivera2306/WebSocketSample

There is a README.txt file with the	instructions to run the example.

I really appreciate any help you can provide.

I program a client with websocket-sharp and it can connect to my websocket server if the client running on Windows 10. But the client failed to connect to server when the client running on Windows XP. The WebSocketSharp.CloseEventArgs code is 1006 and the reason is "An exception has occurred while receiving." Does the websocket-sharp support Windows XP? I need you help. Thanks very much.
Hi, I'm using Websocket-sharp in my Unity game as client that is connecting to a uWebsocket backend server.
We want to enable Per-message Compression for this connection but the problem is that when I enable compression in client with following line before connect: 

`ws.Compression = CompressionMethod.Deflate;`

the server refuses the request from the client for connection.  
We also reproduced this issue with [ws library in node js](https://github.com/websockets/ws) as backend with its provided example configuration, but the problem persists. When we set serverMaxWindowBits in ws library to default negotiated value, the client can connect to the server properly.

Now my question is, Is there any way that we can control this serverMaxWindowBits from WebSocket-Sharp client? 

Thanks
Hi,
i am using the websocket-sharp to connet Unity and ubuntu, it works perfect, but when i build the project into HoloLens the websocket-sharp does not work anymore, is there a solution?
Thanks in advance:)
I'm testing reconnection of the websocket client. After receiving OnClose event, my program calls  the following code to reconnect (not in the OnClose thread):
  websocket.Close();
  websocket.Connect();

After about 10 failure and retries, I got exception "A series of reconnecting has failed". The websocket-sharp code does have the logic of _maxRetryCountForConnect=10.  Anyone knows why this limitation is needed at all? And what is the best practice to reconnect except create a new WebSocket object?