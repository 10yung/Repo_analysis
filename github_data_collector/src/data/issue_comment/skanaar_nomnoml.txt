We are using nomnoml to generate (display only) ER-diagrams and would like to add some minimal interactivity where the users could click the boxes and see some related help info or possibly navigate to other web pages

There's nothing specifically built into nomnoml for such interactivity right...

But I'm hoping it's still possible but I'm not sure?

e.g. I'm a little new to SVG but I understand it's a DOM underneath and adding onclick handlers is in theory possible right e.g. as described here:
https://stackoverflow.com/questions/2296097/making-an-svg-image-object-clickable-with-onclick-avoiding-absolute-positioning

But I'm imagining to do the above I would use nomnoml to generate my SVG and then separately (old-school-jquery-style) find the rect elements and bind my click handlers to them.

But that would traditionally mean e.g. finding those elements by known ids on them right.

But I see a closed issue here that rejected the idea of having the nomnoml syntax let you assign ids or css class names.

In general am I thinking right or is there a different/better way?

If this is thinking right then is there a way I can find specific nomnoml generated SVG elements without having such "ids" on them?


Influencing visual effects.

Look at the pictureï¼š
![image](https://github.com/lcron/static/raw/master/images/IMG_20190809_215924.jpg)
Not an issue, just wanted to give you a heads up that I wrote a [chrome extension](https://chrome.google.com/webstore/detail/nomnoml-extension/pdhadlcgkfobicgdhopemfmedldcbhei) that finds markdown codeblocks on every page, syntaxed with `nomnoml`, and renders a clickable rendered diagram right before the codeblock. 

Been using it for a month now, and it's been great to include flow diagrams in the readme of my projects and to have the rendered automatically right in github. 

Thanks for making such a great library! It was really easy to build on top of.
It would be great to have a syntax for assigning a shorter alias to nodes. Sometimes I'll have very large diagrams with long node names, it makes it difficult to update each instance of the node in the structure. 

example:

```nomnoml
pum := [Progressive Utility Matrix]

[pum] -> [Hyperwave Shell]
[<actor> pum | 
  nitrogen shock; containment field
]

//Still can use the original Node name
[Progressive Utility Matrix] <-> [Tau Particle]
```

Any syntax can work, I don't know what would be easiest in regards to the internal parser. 

I would be interested in taking a stab at this feature and making a PR. If you could let me know how do-able this is and any tips/places in code to get started, that would be great. 

<img width="140" alt="pic1" src="https://user-images.githubusercontent.com/9463958/58179447-cb7a1080-7cda-11e9-801b-6ce75e9daa0b.png">

Like this situation, there should are three arrows, but two of them are covered.
I'm evaluating nomnoml for our app but after playing a little bit I found out edge labels can be cut off.

For example:
```
[Order|
A
B
C
D
]

[Order line|
Z
Y
X
]

[Order]Order<-> OrderLines[Order line]
```

![image](https://user-images.githubusercontent.com/3426504/55698084-9c982b80-5a07-11e9-98dc-6367252eeec9.png)


Is there a workaround?
Hi all!

First, I want to thank Daniel for the really balanced tool! Keep it up! One day, it might really become a supported feature of GitHub's Markdown itself :)

Well, what I found missing however is the simple directive `#background` which should fill diagram back layer with specified colour. It is really annoying that I need to specify for different vscode extensions what they should backing diagrams with. @skanaar Can you consider this?

Thank you!
The ability to create and link more than two classifier on a single line may be usefull two avoid repetitions.
example:
[Alice]<-[Bob]
[Bob]<-[Carol]
[Carol]<-[Dave]
could became:
[Alice]<-[Bob]<-[Carol]<-[Dave]

I want to make arrows across package, for example:

```
[<package> A|
    [Cat] -> [B.Dog]
]
[<package> B|
    [Dog]
]
```

Is there any way to do this?

Great project BTW!
