<!-- Consider opening a pull request instead: it’s a more productive way to discuss new features -->
## Description

For some basics components, I just use `$emit('onClick', $event)` from the template.

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

## Proposal 
Search for `$emit` inside the template and extract the name of the event emitted.

<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->

## Expected result
Generates automatically the docs for `$emit` used within templates.

<!-- A clear and concise description of any alternative solutions or features you’ve considered. -->



<!-- Add any other context or screenshots about the feature request here. -->

remove peer dependency preventing update of webpack

<!-- Consider opening a pull request instead: it’s a more productive way to discuss new features -->

**The problem**

Consider the following setup:

1. Lib `a` defines a mixin `mx` and provides docs via `vue-styleguidist`
2. Lib `b` uses `mx` from lib `a`

Components in lib `b` can access and include the mixin, they receive the desired functionality and work well. *However* in the docs the props and functions from the mixin are not documented despite they where documented in lib `a`.

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

**Proposed solution**

If comments are preserved during bundling (default with `vue-cli-service build --target lib`) they could be extracted from the bundle in order to provide the missing documentation parts.

In my case webpack preserves the comments and code very well, only the export is changing:

```js
/**
 * My mixin description....
 */
export const myMixin = {}
```
becomes:
```js
/**
 * My mixin description....
 */
var myMixin = {}
// [...]
/* concated harmony reexport myMixin */__webpack_require__.d(__webpack_exports__, "myMixin", function() { return myMixin ; });
```

<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->

**Alternative solutions**

Provide the documentation information within the export through a well defined interface. <-- This doesn't sound nice at all!

<!-- A clear and concise description of any alternative solutions or features you’ve considered. -->

**Additional context**

Maybe duplicate of #606 ?! 

<!-- Add any other context or screenshots about the feature request here. -->

- [ ] create a docgen-cli command to create translation files for components
- [ ] create a docgen-cli command to check/update translation files for components
- [ ] when creating files using docgen-cli, if there is translations found, and there is a language specified use the files to translate the descriptions

closes #553

On my project I'm using components that are communicating with a REST-API with required authentication.

When providing examples they will fail due missing authentication (of course because no user ever logged in).

Im planing to provide a ro-version of the API with demo-data that gets reset every day with hardcoded login for a demo user.

Since logging in is an async HTTP request I can not simply set up the login in the root example file of styleguidist, since the export is synchronous (race-condition: maybe the login is fast enough, maybe setting up the vue instance is faster).

**Question:** Is there a way to perform async setup tasks before launching the example code?

*Usually i would do this in main.js:*

```js
import Vue from 'vue'
import { client } from 'my-api'
import App from '@/App'

let login = false

client.login({
  username: 'testuser',
  password: '12345678'
})
  .then(() => { login = true })
  .finally(() => {
    new Vue(
      render: h => h(App)
    ).$mount('#app')
  })
```
**Current behavior**

I'm using `vuex` and `vuex-ORM` in my styleguide. I have a parent component that accesses the store internally and passes data to a child component via `v-model`. This works fine as an example. However, I want to show an example for the child component as well so I'm trying to access the store using a `require`. 

The code I'm using in my markdown file is this:

```
const PolicyGroupModel = require('~/store/models/PolicyGroup').default;
const PolicyGroup = PolicyGroupModel.query().with('policies.orgs').find(1);

new Vue({
  data(){
    return {
      PolicyGroup
    }
  },

  template: `
    <PolicyManagerGroup
      :title="PolicyGroup.displayName"
      v-model="PolicyGroup.policies"
      open
    />
  `
})
```

With `js` opening the code block. This results in the following error:

![image](https://user-images.githubusercontent.com/824169/72182178-dbb63b80-33e2-11ea-8542-7406607f5899.png)

However, by chance, I have discovered that if I include a duplicate `require` in a separate code block before this code block like this:

```
const PolicyGroupModel = require('~/store/models/PolicyGroup').default;
<span></span>
```
```
const PolicyGroupModel = require('~/store/models/PolicyGroup').default;
const PolicyGroup = PolicyGroupModel.query().with('policies.orgs').find(1);

new Vue({
  data(){
    return {
      PolicyGroup
    }
  },

  template: `
    <PolicyManagerGroup
      :title="PolicyGroup.displayName"
      v-model="PolicyGroup.policies"
      open
    />
  `
})
```

With `js noeditor` to hide the block my component renders as expected:

![image](https://user-images.githubusercontent.com/824169/72182315-1ddf7d00-33e3-11ea-82b4-6a742709d4d5.png)

I'm using the latest version for `vue-styleguidist`.

**Expected behavior**

I would expect to no have to include a second require in a separate block.

<!-- Consider opening a pull request instead: it’s a more productive way to discuss new features -->

**The problem**

When building a library for Vue applications it is not possible to document custom directives delivered by the library.

<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->

**Proposed solution**

The Ability to describe

* behavior 
  * what it's supposed to do
  * (when is which hook triggered and what does it do)
* possible modifiers and their meanings
* possible arguments and their meanings
* possible/expected values/expressions

Im pretty sure this can be done via (custom) JSDoc tags.

```js
/**
 * This is my custom directive
 * 
 * @directive
 * @argument Description how arguments are handled
 * @modifier foo Description how the modifier is handled
 * @modifier bar Description how the modifier is handled
 * @modifier baz Description how the modifier is handled
 */
export DiMyCustomDirective {
  /**
   * Optional description what this hook does
   */
  bind: () => {},
  /**
   * Optional description what this hook does
   */
  inserted: () => {},
  /**
   * Optional description what this hook does
   */
  update: () => {},
  /**
   * Optional description what this hook does
   */
  componentUpdated: () => {},
  /**
   * Optional description what this hook does
   */
  unbind: () => {}
}
```

When using the `Vue.directive('focus', {})` syntax a `@directive` comment would not be needed.

<!-- A clear and concise description of what you want to happen. Add any considered drawbacks. -->

**Alternative solutions**

As workaround the information can be composed manually in a `*.md` file which then is included with the `styleguide.config.js` `sections` syntax.

<!-- A clear and concise description of any alternative solutions or features you’ve considered. -->

**Additional context**

<!-- Add any other context or screenshots about the feature request here. -->

If webpackConfig contains data options for pug-loader/pug-plain-loader, these get overwritten with

`{ filename: "..." }`
<!---

Thanks for using Vue Styleguidist! Before you submit, please read the following:

Search open/closed issues before submitting since someone might have asked the same thing before:
https://github.com/vue-styleguidist/vue-styleguidist/issues?utf8=%E2%9C%93&q=is%3Aissue

Read essential documentation:
https://vue-styleguidist.github.io/getting-started.html

Make sure you’re using the latest versions of Vue Styleguidist.

When something isn’t working for you, include a reproducible demo:
  1. Fork the example project repository: https://github.com/vue-styleguidist/example
  2. Modify it to reproduce the issue.
  3. Push to GitHub and paste the link here.

Most likely you’ll find an issue yourself, while creating a demo.

-->

Looks like specifying a theme for the editor doesn't work anymore (version 4.2.2 of the vue-styleguidist)
Tried out on the basic example by adding the following to the config:

```
	editorConfig: {
		theme: 'night'
	}
```

Resulting config looks like this (omitted irrelevant parts):

```
// ... all imports left untouched

module.exports = {
	title: 'Vue Styleguidist basic',
	components: 'src/components/**/[A-Z]*.vue',
	defaultExample: true,
	ribbon: {
		text: 'Back to examples',
		url: `${docSiteUrl}/Examples.html`
	},
	version: '1.1.1',
	webpackConfig: {
		// ... webpack config has been left untouched
	},
	usageMode: 'expand',
	exampleMode: 'expand',
	compilerConfig: {
		target: { ie: 11 }
	},
	styleguideDir: 'dist',
	editorConfig: {
		theme: 'night'
	}
}
```

