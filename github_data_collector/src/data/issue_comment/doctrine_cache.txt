This PR handles #289.
Allows users to resolve bug described in https://github.com/doctrine/cache/issues/246 where downstream CacheProviders are populated with cache entries with infinite lifetime, causing "strange" behavior: never expiring cache entries.

Behaviour is unchanged by default. 

Suggestions on how to test this are welcome ðŸ¤“ 
The adapter added with this PR allows us to use Doctrine Cache as a PSR-6 implementation. This will allow us to decouple various Doctrine libraries from Doctrine cache.

#SymfonyHackday
Change "MemecacheCache" to "MemcacheCache"
`Notice: apcu_fetch(): Error at offset 1938 of 7810 bytes`
In most modern code, this gets converted to an \ErrorException.
As this is a cache (and a miss is handled), discard the notice silently.
If the APCu read fails, an E_NOTICE is emitted; most frameworks will handle errors by converting to \ErrorException. For a cache read fail, this is overly drastic (as it can be handled as a cache miss).

Therefore, I propose silencing the apcu_fetch() call.
PhpFileCache is slower in versions >=1.7.0  in comparison with v1.6.2

This is either missing file warning supression or data serialization.

Tested under high load conditions.
The memcache driver has been deprecated under the wrong assumption it is no longer supported on PHP 7.x in #267.

The memcache driver is actively maintained on https://github.com/websupport-sk/pecl-memcache and they are actually [working on releasing again on PECL](https://github.com/websupport-sk/pecl-memcache/issues/42). 

Currently, we're using this driver on php 7.3, and it works like a charm.
This is definitely not a bug, but *maybe* a missing part in the docblock-documentation.

I have just been putting in an hour trying to understand a weird behaviour. Consider this:

``` lang-php
$cache = new \Memcached();
$cache->addServer(...$args);  // $args are already defined elsewhere

$this->cache = new MemcachedCache();
$this->cache->setMemcached($cache);

// consider $recently_deployed to reflect that I recently updated my app in production
if($recently_deployed){   
    $this->cache->flushAll();
    echo "Cache should be empty now! . PHP_EOL");
}

echo ($this->cache->contains('settings') ? 'Settings still in cache' : 'Settings flushed from cache');
```

The output was not at all what I expected: 
    
    Cache should be empty now!
    Settings still in cache

I now understand that ```flushAll()``` seems to be an async function when using Memcached and I guess a new thread is started.

My question: Should the docblock in 

https://github.com/doctrine/cache/blob/bdf3e32d07a8978c713a726d9bc60b7fa6b4dbff/lib/Doctrine/Common/Cache/FlushableCache.php#L13

mention that you can't rely on the cache being flushed after the execution of the function (for certain implementations of FlushableCache) or is this common knowledge?
The link in Readme file to documentation is broken.
I've got a 404 page when I go to 
http://doctrine-orm.readthedocs.io/projects/doctrine-orm/en/latest/reference/caching.html