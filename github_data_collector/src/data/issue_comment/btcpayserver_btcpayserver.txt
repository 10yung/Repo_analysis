**Describe the problem/bug**
I have the Store Website URL programmed, and then use the redirect URL on the Pay button settings to send the customer to the successful payment webpage to opt-in to a paid account.

However, if the invoice expires and you click on the Return to "store" button that shows up, it takes the customer to the redirect/successful payment page and not to the Store Website URL.

**Your environment**

* Version of BTCPay Server:  v1.0.3.150
* Deployment method: Docker

**To Reproduce**
Steps to reproduce the behavior:
1. Go to 'https://clicktofreedom.com/paypage/wm25.html'
2. Click on 'Bitcoin Buy Now button'
3. Allow invoice to expire without payment
4. Click on "Return to Store"

**Expected behavior**
Expect customer to be sent to URL as defined in "Store Website" settings

**Actual behavior**
Customer is sent to redirect URL defined in Pay Button settings for successful payment.

This is critical as it allows a customer to get to the paid account page just by allowing the invoice to expire and never having paid

## Problem

When a user create a new store, there is a number of steps he need to do to be operational such as:

* Setting up at least one payment method
* Setting up the rate provider (so not everyone ends up depending on CoinGecko by default, and so they get the relevant rate of their location)
* TODO... (more idea?)

Right now we don't notify him of such actions.

## Proposed solution

I propose that the Stores page would show a ⚠️ logo in case the store is not fully configured. If the user over it, he will see the remaining actions to do.

I am unsure this is the best solution.
Maybe we could add a wider "notification system" and use to notify users "Warning: Your store is still relying on the default rate provider".

I am opening this PR to open the discussion.

This address was confusing. It represent the next address to pay to, but could easily confuse users as #1056 shows.

Before
![image](https://user-images.githubusercontent.com/3020646/72504085-7d74d700-3880-11ea-981a-f215b542e142.png)


Now
![image](https://user-images.githubusercontent.com/3020646/72504017-5b7b5480-3880-11ea-8e1d-5540b35ffb2b.png)


From ListApps, View App opens new tab. 
![Screenshot from 2020-01-10 13-08-37](https://user-images.githubusercontent.com/42067009/72152700-0e910d00-33ac-11ea-9695-785e953a6861.png)

Most people do not have deep knowledge about Derivation Schemes and address types, so it’s hard to know what should be put there. Sometimes it should be the zpub, but that is not mentioned in the “BTCPay format memo”.
I think it would help a lot if an “Address Format” column is added, like:

![Screenshot from 2020-01-10 13-17-16](https://user-images.githubusercontent.com/42067009/72152717-1c469280-33ac-11ea-9523-49d7e1f7d33e.png)

variant of #1245 but with openid still intact

This PR introduces a new authentication and authorization system, completely independent of the OpenIddict/OpenID work that has been done so far( and in fact, I propose to remove all related code as this should be sufficient for most use-cases while relying on less third-party code and a lot less code( migrations make up the biggest difference here)).

# Authentication
It follows the common API concept of having users on the system generating an API Key, to which they then use to authenticate and hit the API available. The usage approach is to add a header `X-APIKEY` with the API Key as the value. 

# Authorization
I've also added granular permissions, similar to what we had done for OpenId with the scopes. You can assign specific permissions per API key such as server management or store management. In addition, I've extended the store management permissions to allow specific store permissions too in case you would like to authorize an app for only a subset of stores under your account's controls.
The current permissions in the system are:
* CanModifyServerSettings - modify the server settings and manage users
* CanModifyStoreSettings - create or manage all stores under your account
* CanListStoreSettings - list all stores available to your API Key

# Application Integration
While it can be trivial to simply tell a user to generate and copy an API key to your application for BTCPay integration, I've added support for external applications to request an api-key. 
This is very similar to the OpenId Authorize view we added not too long ago.
The path is `api-keys/authorize` and the available options(query parameters) are:
* applicationName - string, optional, the name to show on the view
* redirect - url, optional, the URl to redirect to after the user consents, with the query paramters appended to it: `permissions`, `user-id`, `api-key`. If not specified, user is redirect to their API Key list.
* permissions - array of string, optional. format: `permissions=CanModifyServerSettings&permissions=CanModifyStoreSettings`. Those are currently the only 2 permissions you can request currently. If no permissions are specified, the API-key can still be useful as a means to link a BTCPay user to your own system.
* strict - boolean, optional, default: true. If permissions are specified, and strict is set to false, it will allow the user to reject some of permissions the application is requesting.
* selectiveStores - boolean, optional , default: false. If the application is requesting the `CanModifyStoreSettings` permission and selectiveStores is set to true, this allows the user to only grant permissions to selected stores under the user's control.
* applicationIdentifier - string, optional. If specified, BTCPay will check if there is an existing API key stored associated with the user that also has this application identifer, redirect host AND the permissions required match(takes `selectiveStores` and `strict` into account). `applicationIdentifier` is ignored if `redirect` is not specified.

# Use-case
Even without an API currently available(prototyping branch for a full API can be found at https://github.com/Kukks/btcpayserver/tree/api-preview), this Auth system is still useful. 
We can create a "Log in with BTCPay" feature with the authorize endpoint:
* Create your application and use the domain `bitpay2.com`
* Define in your application a BTCPay url, or ask the user for one
* Generate an authorize url: `btcpayserver.com/api-keys/authorize?applicationName=Bitpay2&redirect=bitpay2.com/btcpay-response&applicationIdentifier=bitpay2` 
* Show to user
* User navigates to url & accepts
* Browser redirects to `bitpay2.com/btcpay-response?user-id=1&api-key=xyz`
* Use user id and api key for whatever you want to do. The next time the user wants to log in, the user will be redirected directly without requesting permission.
* You now have a federated BTCPay user system!


**Is your feature request related to a problem? Please describe.**
If you run a point of sale it might be legally necessary to offer a digital receipt to the customer.

**Describe the solution you'd like**
Generation of a digital receipt in the form of a (signed) PDF, which can be downloaded via QRCode. This could be implemented as btcTransmuter service. When a new invoice is created, then generate a digital receipt. In the GUI a QRCode could be displayed for a successful transaction, which the user can use to download the receipt if she/he likes. 

In Germany the receipt has to fulfill the following requirements:
https://www.gesetze-im-internet.de/kassensichv/__6.html

The question is what is needed in other countries.


Lightning 0.8.0, for privacy reason, is never sending the exact amount the merchant is asking for. It always send a bit more.

This mean that all c-lightning starts to be PaidOver, this unnecessarily ring bells for merchants.
I propose to extend the meaning of this field.

![image](https://user-images.githubusercontent.com/3020646/71799818-a71c4a00-3099-11ea-8fbb-04e0744fd5a8.png)

Where, if the user pay x % more, the merchant does not get bothered by it.
Or maybe just add a new field, with a proper default so by default lightning payment does not trigger paidOver.
Invoices paid in Liquid Bitcoin not completing. Initially BTCPayServer doesn't recognize a transaction occurred despite NBXplorer recognizing the transaction belonging to the extPubkey for the app. If I restart BTCPayServer, BTCPS finds the transaction with "1 payments happened while offline." But, the invoice shows only paid partial and is still open.
> Ok, since we have 4 ACKs for removing this feature, it would be good to close this issue and open a request in the main repository for removing this option from both apps.

[After the comments on another issue](https://github.com/btcpayserver/btcpayserver-doc/issues/401#issuecomment-569124157) people decided this confusing feature should be removed. Therefor these two issue are being closed:

- https://github.com/btcpayserver/btcpayserver/issues/1222
- https://github.com/btcpayserver/btcpayserver-doc/issues/401