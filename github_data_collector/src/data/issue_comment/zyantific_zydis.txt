I hope to support the conversion between assembly code and hex code, which can be used a lot
vs2017 15.9.18 Compile Zydis v3.0.0 kernel Zycore cannot open include file: "windows.h"
It might be worth a try to cache the ~10 most common instructions in the decoder for improved performance. I did a very hacky quick test and determined that caching `CC` and `00 00` alone results in a ~10% performance boost.
The documentation should always be in sync with the latest changes. Currently, this involves me manually building it and pushing it into an S3 bucket. That could happen automatically through CI.

Additionally, it would be great if we could display a drop-down in the doc that allows viewing documentation for older versions of Zydis as well, similar to what [docs.rs](https://docs.rs) does for Rust.
Zydis should provide more (official) language bindings:

- [ ] Create C++ wrapper class bindings (@flobernd)
- [ ] Create C# bindings (@flobernd)
- [x] Create Go bindings
- [ ] Create Java bindings
- [x] Create Pascal bindings (@flobernd)
- [ ] Create Python bindings (official) (@athre0z)
- [x] Create Rust bindings (@th0rex)
- [ ] Update unofficial LuaJIT bindings

Feel free to contribute, if no user is mentioned on a specific bindings task.
Decouple operand-decoding from general instruction decoding to significantly decrease the size of `ZydisDecodedInstruction` which will improve usage of CPU cache in some situations:

- [ ] Remove the `ZydisDecodedOperand` array from the `ZydisDecodedInstruction` struct
- [ ] Provide a function that allows to decode `count` operands beginning from a given `index`. Additional flags like e.g. "include hidden operands" could be useful as well.
- [ ] Implement a wrapper struct that contains the fixed size `ZydisDecodedOperand` array (like in the current `ZydisDecodedInstruction`) and a function to fill this struct (for convenience reasons)

First task would be to provide a proper concept and to evaluate if there is a good way to minimize breaking changes.
Some structural changes should be made to make the interface more consistent/intuitive:

- [ ] The `ZydisDecodedInstruction` struct should be split in two separate structs - one that contains only the information provided in minimal-mode and one that (additionally?) contains the information provided in full-mode
- [ ] The API should be adjusted to mirror the above changes (switch to a 2-step decoding process - minimal/length decoding and full/semantical decoding). The minimal decoding function should take a buffer as input (like the `ZydisDecoderDecodeBuffer` function does) and the full decoding function should be able to extract all needed information from the struct returned by the minimal decoding function
- [ ] Create an additional function that takes a buffer as input (like the `ZydisDecoderDecodeBuffer` function does) and directly performs a full decoding (for convenience reasons)

First task would be to provide a proper concept and to evaluate if there is a good way to minimize breaking changes.
- [ ] Add a flag in the `ZydisDecodedOperand` struct to mark a register operand as `AVX512_4VNNIW` multisource operand
- [ ] Add formatter-property to print these instructions in a special `[LO-HI]` form
- [x] Introduce `ZYDIS_ELEMENT_TYPE_CC` type for operands containing condition-codes
- [ ] Provide a mnemonic offset for instructions with `ZYDIS_ELEMENT_TYPE_CC` operands pointing to the position where the condition code string can be inserted (e.g. offset `4` for `VCMPPD` )
Improve the instruction-formatter functionality:

- [ ] Print hidden memory operands, if an segment override is used
- [ ] Add formatter-property to automatically rewrite instructions with condition codes to their corresponding pseudo-mnemonics (e.g. `VCMPEQPD`)