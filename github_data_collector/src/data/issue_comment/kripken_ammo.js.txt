Similarly to how Bullet Physics was ported to Ammo.js via Emscripten, how much work would be involved in porting the now open source [PhysX](https://github.com/NVIDIAGameWorks/PhysX) engine?

My understanding of C++ isn't strong enough to figure this out and I assume there are probably people out there that could do this without breaking a sweat.

If anyone is available to do this, lets discuss here. I'm willing to pay for this to happen but have no idea how long this kind of thing takes or what is involved in making it happen.

And of course, I would want this port to be released as open source also.
I have a rayTest problem like this(https://github.com/bulletphysics/bullet3/issues/1947), so I want to test the BT_USE_DOUBLE_PRECISION macroã€‚

I modified the make.py(added -DBT_USE_DOUBLE_PRECISION):
```
    stage('Build bindings')

    args = ['-DBT_USE_DOUBLE_PRECISION', '-I../src', '-c']
    for include in INCLUDES:
      args += ['-include', include]
    emscripten.Building.emcc('glue.cpp', args, 'glue.o')
    assert(os.path.exists('glue.o'))

    # Configure with CMake on Windows, and with configure on Unix.
    cmake_build = emscripten.WINDOWS

    if cmake_build:
      if not os.path.exists('CMakeCache.txt'):
        stage('Configure via CMake')
        emscripten.Building.configure([emscripten.PYTHON, os.path.join(EMSCRIPTEN_ROOT, 'emcmake'), 'cmake', '..', '-DBUILD_DEMOS=OFF', '-DBUILD_EXTRAS=OFF', '-DBUILD_CPU_DEMOS=OFF', '-DUSE_GLUT=OFF', '-DCMAKE_BUILD_TYPE=Release'])
    else:
      if not os.path.exists('config.h'):
        stage('Configure (if this fails, run autogen.sh in bullet/ first)')
        emscripten.Building.configure(['../configure', '--disable-demos','--disable-dependency-tracking'])

    stage('Make')
```

and modified the ammo.idl(replaced keyword 'float' to 'double').

Make succeed but link throw errors:
```
error: undefined symbol: _ZN10btSoftBody10appendNodeERK9btVector3d
warning: To disable errors for undefined symbols use `-s ERROR_ON_UNDEFINED_SYMBOLS=0`
error: undefined symbol: _ZN10btSoftBody12appendAnchorEiP11btRigidBodybd
error: undefined symbol: _ZN10btSoftBody12setTotalMassEdb
error: undefined symbol: _ZN10btSoftBody7setMassEid
error: undefined symbol: _ZN10btSoftBodyC1EP19btSoftBodyWorldInfoiPK9btVector3PKd
error: undefined symbol: _ZN11btConeShapeC1Edd
error: undefined symbol: _ZN11btRigidBody10setDampingEdd
error: undefined symbol: _ZN11btRigidBody12setMassPropsEdRK9btVector3
error: undefined symbol: _ZN11btShapeHull9buildHullEd
error: undefined symbol: _ZN12btConeShapeXC1Edd
error: undefined symbol: _ZN12btConeShapeZC1Edd
error: undefined symbol: _ZN14btAngularLimit3setEddddd
error: undefined symbol: _ZN14btCapsuleShapeC1Edd
error: undefined symbol: _ZN15btCapsuleShapeXC1Edd
error: undefined symbol: _ZN15btCapsuleShapeZC1Edd
error: undefined symbol: _ZN16btRaycastVehicle16applyEngineForceEdi
error: undefined symbol: _ZN16btRaycastVehicle16setSteeringValueEdi
error: undefined symbol: _ZN16btRaycastVehicle16updateSuspensionEd
error: undefined symbol: _ZN16btRaycastVehicle8addWheelERK9btVector3S2_S2_ddRKNS_15btVehicleTuningEb
error: undefined symbol: _ZN16btRaycastVehicle8setBrakeEdi
error: undefined symbol: _ZN17btConvexHullShapeC1EPKdii
error: undefined symbol: _ZN17btHingeConstraint14setMotorTargetEdd
error: undefined symbol: _ZN17btSoftBodyHelpers17CreateFromTriMeshER19btSoftBodyWorldInfoPKdPKiib
error: undefined symbol: _ZN18btMultiSphereShapeC1EPK9btVector3PKdi
error: undefined symbol: _ZN18btStaticPlaneShapeC1ERK9btVector3d
error: undefined symbol: _ZN25btHeightfieldTerrainShapeC1EiiPKvdddi14PHY_ScalarTypeb
error: undefined symbol: _ZN29btGeneric6DofSpringConstraint10setDampingEid
error: undefined symbol: _ZN29btGeneric6DofSpringConstraint12setStiffnessEid
error: undefined symbol: _ZN29btGeneric6DofSpringConstraint19setEquilibriumPointEid
error: undefined symbol: _ZN30btKinematicCharacterController10setGravityEd
error: undefined symbol: _ZN30btKinematicCharacterController11setMaxSlopeEd
error: undefined symbol: _ZN30btKinematicCharacterController12setFallSpeedEd
error: undefined symbol: _ZN30btKinematicCharacterController12setJumpSpeedEd
error: undefined symbol: _ZN30btKinematicCharacterController16setMaxJumpHeightEd
error: undefined symbol: _ZN30btKinematicCharacterControllerC1EP24btPairCachingGhostObjectP13btConvexShapedi
error: undefined symbol: _ZNK16btCollisionShape17getBoundingSphereER9btVector3Rd
error: undefined symbol: _ZNK16btCollisionShape27getContactBreakingThresholdEd
error: undefined symbol: _ZNK16btCollisionWorld15convexSweepTestEPK13btConvexShapeRK11btTransformS5_RNS_20ConvexResultCallbackEd
Error: Aborting compilation due to previous errors
shared:ERROR: '/Users/knightzhu/Downloads/emsdk-master/node/12.9.1_64bit/bin/node /Users/knightzhu/Downloads/emsdk-master/fastcomp/emscripten/src/compiler.js /var/folders/p_/zqd1ksvn3gqbvrvx85ckf_whsbyxm6/T/tmpFx04O8.txt /Users/knightzhu/Downloads/emsdk-master/fastcomp/emscripten/src/library_pthread_stub.js' failed (1)
```

I tried '-s ERROR_ON_UNDEFINED_SYMBOLS=0', generated ammo.js succeed but throw runtime error:
`missing function: _ZN15btCapsuleShapeXC1Edd`

Anybody can help?
Hi there,
I wanted to ask if there is a good if there is a good example how to use the btCompoundShape in a js + Three.js project. I sticked to the examples I found for C++ but I miss the 'calculatePrincipalAxisTransform' method ind js. All I want to create is Torus rigid Body which is dynamic.
We've been using ammo.js in https://github.com/playcanvas/engine and recently I were going through some memory leaks related to ammo.js. Everything has to be manually cleared, but there are certain references left in ammo.js `__cache__` objects.

**Here are few examples:**

1. creating **btRigidBody**, then get use `getMotionState` on it. Then `Ammo.destroy(body)`, but motionState will remain in `Ammo.btMotionState.__cache__`. Calling `Ammo.destroy(state)` on it, will throw an error, as I would assume it is actually destroyed already with body, but reference still in present.

2. Creating **btCollisionShape**, of different types, like `btBvhTriangleMeshShape`. Calling `Ammo.destroy(shape)` removes shape, but leaves `btBvhTriangleMeshShape` in `Ammo.btBvhTriangleMeshShape.__cache__`.

3. `btDefaultMotionState`, when related `btMotionState` is destroyed, it does not remove related `Ammo.btDefaultMotionState__cache__`.

4. Calling `manifold.getBody0` or `manifold.getBody1`, will return `btCollisionObject`, but then references to it, never removed as well, when that object is eventually destroyed by `Ammo.destroy(rigidBody)`.

How do we properly remove those related `__cache__` references, when their actual objects are destroyed internally? Doing: `delete Ammo.btBvhTriangleMeshShape.__cache__[shape.ptr];` seems very hacky.
Hello, I just ran the vehicle demo at 
http://kripken.github.io/ammo.js/examples/webgl_demo_vehicle/index.html

The friction slip is being applied at line 334, but it is not working as the speed remains same.
wheelInfo.set_m_frictionSlip(friction);

Steps to reproduce:
Increase speed using the "w" key and release the key.
The vehicle will stay at the same speed after releasing the key, so it is not effected 
by any kind of friction applied to it.
Add function btCollisionObject::setIgnoreCollisionCheck() from bullet 2.83: https://github.com/bulletphysics/bullet3/commit/7151865c16ba996996206e1fd7869cbb1e7edd8d

Fix a collision check bug with setIgnoreCollisionCheck and CCD: https://github.com/bulletphysics/bullet3/pull/1662/commits/cfa3a6d2aa20209ca88dd5f4a2703237f6ffdecc
Running `python test.py` hits that now.

Is anyone running into that in practice? Or is it a test suite bug?
Pointer_stringify is gone from Emscripten so it should maybe be replaced with UTF8ToString in make.py?
I get the following error when running `build.sh`:

glue.cpp:4962:14: error: allocating an object of abstract class type 'DebugDrawer'
  return new DebugDrawer();
             ^
../src/LinearMath/btIDebugDraw.h:105:15: note: unimplemented pure virtual method 'getDebugMode' in 'DebugDrawer'
        virtual int             getDebugMode() const = 0;
                                ^
1 error generated.
Hey all, I am currently building a pinball project which uses btHingeConstraints on the flippers. I originally had it working with a three mesh with BoxBufferGeometry to test, but now I am cloning geometry from a loaded GLTF to a new mesh with BufferGeometry and now the motor won't rotate to turn the flippers. Are there limitations in using BufferGeometries as opposed tgo BoxBufferGeometries in these cases?

Just to note, I am creating the hinge constraints when the gltf has loaded, so trying to declare before the geometry is available isn't the problem, and the geometry is being created correctly and positioning correctly on the hinge.

cheers