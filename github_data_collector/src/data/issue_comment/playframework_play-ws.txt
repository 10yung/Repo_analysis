Updates [org.awaitility:awaitility](http://awaitility.org) from 4.0.1 to 4.0.2.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.awaitility", artifactId = "awaitility" } ]
```
</details>

labels: test-library-update, semver-patch
I can't see any place to specify that I'd like wsclient to use a socks proxy, whereas AsyncHttpClient can

https://www.javadoc.io/static/org.asynchttpclient/async-http-client/2.10.4/org/asynchttpclient/proxy/ProxyType.html

vs

https://github.com/playframework/play-ws/blob/f4108eaff2121b25ba4827121937114c415a0d88/play-ws-standalone/src/main/scala/play/api/libs/ws/WS.scala#L81

Thanks
### Play WS Version (2.5.x / etc)
N/A

### API (Scala / Java / Neither / Both)
Scala (or Both)

### Operating System (Ubuntu 15.10 / MacOS 10.10 / Windows 10)
N/A

### JDK (Oracle 1.8.0_72, OpenJDK 1.8.x, Azul Zing)
N/A

### Library Dependencies
AHC (and/or Akka HTTP, though that effort seems rather severely stalled)


### Expected Behavior

Currently there's no way to sanely pass in a different name resolver, instead one has to change one field (the static DEFAULT_NAME_RESOLVER in RequestBuilderBase) in the shaded AHC package.

Also simply documenting it would probably help a bit, eg. something like:

```
def monkeyPatchPlayWsShadedAhcRequestBuilderBase(): Unit = {
    play.shaded.ahc.org.asynchttpclient.RequestBuilderBase.DEFAULT_NAME_RESOLVER =
      new YourSpecialResolver(ImmediateEventExecutor.INSTANCE)
}
```


Enhance the documentation so it's more complete.
Replace scalariform
This is an automated backport of pull request #357 done by Mergify.io

Cherry-pick of ba5d92b483bb7feb4cba958f51cb349c220742f0 has failed:
```
On branch mergify/bp/2.0.x/pr-357
Your branch is up to date with 'origin/2.0.x'.

You are currently cherry-picking commit ba5d92b.
  (fix conflicts and run "git cherry-pick --continue")
  (use "git cherry-pick --abort" to cancel the cherry-pick operation)

Changes to be committed:

	modified:   build.sbt

Unmerged paths:
  (use "git add/rm <file>..." as appropriate to mark resolution)

	both modified:   project/plugins.sbt
	deleted by them: version.sbt

```

To fixup this pull request, you can check out it locally. See documentation: https://help.github.com/articles/checking-out-pull-requests-locally/
# Pull Request Checklist

* [x] Have you read through the [contributor guidelines](https://www.playframework.com/contributing)?
* [x] Have you signed the [Typesafe CLA](https://www.typesafe.com/contribute/cla)?
* [x] Have you [squashed your commits](https://www.playframework.com/documentation/latest/WorkingWithGit#Squashing-commits)?
* [x] Have you added copyright headers to new files?
* [x] Have you checked that both Scala and Java APIs are updated?
* [x] Have you updated the documentation for both Scala and Java sections?
* [x] Have you added tests for any changed functionality?

## Fixes

Documents the surprising behavior of #267.

## Purpose

Documents that `lazy val uri: URI` throws.

## Background Context

@marcospereira suggested in https://github.com/playframework/play-ws/issues/267#issuecomment-419266583 that `def url(url: String): StandaloneWSRequest` should be tolerant of urls which include query params. I submit #288, but was not successful in getting it reviewed a second time and merged. URLs are hairy and I can understand why you may not trust the robustness of a community provided solution. #288 has been unmerged for about a year now, and marked `status: backlog` so I've closed it.

Instead, this PR just documents the current behavior, hopefully to prevent others from discovering it in prod as I did. I've also added a failing unit test.

## References

* #267 - original issue
* #288 - proposed solution
### Play Version
2.6.6

### API
Java

### Operating System
Ubuntu 16.04 LTS
Linux 4.4.0-101-generic #124-Ubuntu SMP Fri Nov 10 18:29:59 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux

### JDK
openjdk version "1.8.0_151"
OpenJDK Runtime Environment (build 1.8.0_151-8u151-b12-0ubuntu0.16.04.2-b12)
OpenJDK 64-Bit Server VM (build 25.151-b12, mixed mode)

### Library Dependencies
javaWs

### Expected Behavior

1. I'm using `StandaloneAhcWSRequest` to add a new value for an existing header to a given request. I call the method `StandaloneAhcWSRequest::addHeader`, line 100 in `StandaloneAhcWSRequest.class`.
2. This method calls the method `StandaloneAhcWSRequest::addValueTo`, line 505.
3. Then it manages the `Map<String, List<String>> headers`. If the new header already existed, it takes the list and adds the new value to it. Therefore, if for example we have the header `myHeader` already existing in headers map with a `value1` and we want to add a `value2` to that header, in the end it should have: `<"myHeader", ["value1", "value2"]>`

### Actual Behavior

1. I get `UnsupportedOperationException`.
2. The reason is that the implementation used for the list which is going to get the new element added is the scala one. In scala the list is immutable.

### Stack trace
```
...
play.core.j.HttpExecutionContext$$anon$2.run(HttpExecutionContext.scala:56)
... 6 common frames omitted
Caused by: java.lang.UnsupportedOperationException: null
at java.util.AbstractList.add(AbstractList.java:148)
at java.util.AbstractList.add(AbstractList.java:108)
at play.libs.ws.ahc.StandaloneAhcWSRequest.addValueTo(StandaloneAhcWSRequest.java:508)
at play.libs.ws.ahc.StandaloneAhcWSRequest.addHeader(StandaloneAhcWSRequest.java:101)
at play.libs.ws.ahc.StandaloneAhcWSRequest.addHeader(StandaloneAhcWSRequest.java:41) 
...
```

I looks like that the WS response interceptor does not support URI special characters

the issue step is as following
## 1. client send WS request
## 2. service response: 307 Temporary Redirect
   the redirest location is:
   https://docker-images-prod.s3.amazonaws.com/registry-v2/docker/registry/v2/blobs/sha256/ca/ca4f61b1923c10e9eb81228bd46bee1dfba02b9c7dac1844527a734752688ede/data?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=AKIAIQF2R62EC73X2HOA%2F20171224%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Date=20171224T034443Z&X-Amz-Expires=1200&X-Amz-SignedHeaders=host&X-Amz-Signature=b482baf75c9c3895279843a59483e8ea1bf6b3e3451f80ba7f741959150c7f7a
   
## 3. org.asynchttpclient.netty.handler.intercept.Redirect30xInterceptor will start
   it looks like that Redirect30xInterceptor can not handle the sepcial character(%2F) correct
   
## 4. server response: 400 Bad Request


## My question is
1. can the http intercept support the special character (%2F)?
2. how to config or disable the WS response intercept?
Play WS Version: 2.7
API : Scala
Operating System: Any
JDK: Any

Expected Behavior

play-ws should not alter outgoing WSRequests or at the minimum provide a function where you can override/replace all existing http headers - currently content-type is not replaceable.

Actual Behavior

play-ws shades the latest version of asynchttpclient which alters the content-type header of a complete request before submitting it by enforcing the charset attribute. This breaks transparency and signatures for AWS etc. (e.g. BodyWritable[StringBuilder] defaults to text/plain without charset as content-type)

See: https://github.com/AsyncHttpClient/async-http-client/issues/1578
