<!---
This issue tracker is mainly for bugs and feature requests. Before asking a
question, search online and try to investigate on your own.
-->

#### What versions are you running?
Lastest

#### chrome 79 and chromium 80/81
using `enable-automation` invalid, 
Webdriver detected using javascript 
```javascript
window.navigator.webdriver
```

<!---
This issue tracker is mainly for bugs and feature requests. Before asking a
question, search online and try to investigate on your own.
-->

#### What versions are you running?

Chrome: 79.0.3945.117

#### What is the issue?

When you start a new browser context or attach to a new target, then by calling `chromedp.Run` you implicitly call a number of actions:

https://github.com/chromedp/chromedp/blob/master/chromedp.go#L316

It would be nice if it were possible to optionally avoid calling these actions on a new target. For example, if I want the debugger to attach to a web worker, then the method `Page.enable` is not available and the first call of `chromedp.Run` will fail, but subsequent calls will not.

I'd be interesting in helping with a PR if this is a change people support and there is consensus on what the user-facing interface for this would be.

This was a useful harmless tweak for my current project. The process PID can come in handy when there is talk about running a third party software against a remotely controlled browser.

I've re-used the error checking from Run, the closest-to-accurate error I could find for the browser not being valid is ErrInvalidTarget.

This is my first PR, if there's anything wrong I'd be happy to change it asap.

Note: the 19th of november commit "changed Run to return process pid" is no longer valid code and the current code is a recent pull of the latest chromedp version + the function added to browser.go

#### What versions are you running?
```sh
github.com/chromedp/chromedp v0.4.2
Chromium 79.0.3945.117 Arch Linux
go version go1.13.5 linux/amd64
```

I am running `chromedp.Run` in endless loop. 
chromedp not flushing heap after context cancelled.


I copied [click](https://github.com/chromedp/examples/blob/master/click/main.go) example  and runned it in for loop. When I look at pprof, heap allocation increasing on every `chromedp.Run`

You can test at [http://localhost:8080/debug/pprof/](http://localhost:8080/debug/pprof/) after run the app.

```go
package main

import (
	"context"
	"log"
	"time"

	"github.com/chromedp/chromedp"
	"github.com/gin-contrib/pprof"
	"github.com/gin-gonic/gin"
)

func main() {
	router := gin.Default()
	go func() {
		for {
			click()
		}
	}()
	pprof.Register(router)
	router.Run(":8080")

}

func click() {
	// create chrome instance
	ctx, cancel := chromedp.NewContext(
		context.Background(),
		chromedp.WithLogf(log.Printf),
	)
	defer cancel()

	// create a timeout
	ctx, cancel = context.WithTimeout(ctx, 15*time.Second)
	defer cancel()

	// navigate to a page, wait for an element, click
	var example string
	err := chromedp.Run(ctx,
		chromedp.Navigate(`https://golang.org/pkg/time/`),
		// wait for footer element is visible (ie, page is loaded)
		chromedp.WaitVisible(`body > footer`),
		// find and click "Expand All" link
		chromedp.Click(`#pkg-examples > div`, chromedp.NodeVisible),
		// retrieve the value of the textarea
		chromedp.Value(`#example_After .play .input textarea`, &example),
	)
	if err != nil {
		log.Fatal(err)
	}
	log.Printf("Go's time.After example:\n%s", example)
}


```


#### What versions are you running?

<pre>
$ go list -m github.com/chromedp/chromedp
github.com/chromedp/chromedp v0.5.2
$ google-chrome --version
Google Chrome 78.0.3904.108
$ go version
go version go1.12.5 darwin/amd64
</pre>

#### What did you do? Include clear steps.

Searching on Github with lots of results:
```
package main

import (
  "context"
  "fmt"
  "github.com/chromedp/cdproto/dom"
  "github.com/chromedp/chromedp"
)

func main() {
  ctx, cancel :=
    chromedp.NewContext(context.Background())
  defer cancel()

  sel := `//input[@name="q"]`
  tasks := chromedp.Tasks{
    chromedp.Navigate(
      "https://github.com/search"),
    chromedp.WaitVisible(sel),
    chromedp.SendKeys(sel, "linux\n"),
    chromedp.WaitReady("body", chromedp.ByQuery),
    chromedp.ActionFunc(
      func(ctx context.Context) error {
        node, err := dom.GetDocument().Do(ctx)
        if err != nil {
          panic(err)
        }
        res, err := dom.GetOuterHTML().
          WithNodeID(node.NodeID).Do(ctx)
        if err != nil {
          panic(err)
        }
        fmt.Printf("html=%s\n", res)
        return nil
      }),
  }
  err := chromedp.Run(ctx, tasks)
  if err != nil {
    panic(err)
  }
}
```

#### What did you expect to see?

Raw HTML dump of the result page.

#### What did you see instead?

The code above throws an error on a negative node, could there be a 16/32 bit int limitation being triggered somewhere?
```
panic: Could not find node with given id (-32000)

goroutine 1 [running]:
main.main.func1(0x1588080, 0xc0002b8030, 0x0, 0x0)
	github.go:33 +0x1c2
github.com/chromedp/chromedp.ActionFunc.Do(0x1504350, 0x1588080, 0xc0002b8030, 0x0, 0x0)
	go/pkg/mod/github.com/chromedp/chromedp@v0.5.2/chromedp.go:383 +0x3a
github.com/chromedp/chromedp.Tasks.Do(0xc00015a050, 0x5, 0x5, 0x1588080, 0xc0002b8030, 0x100d8b8, 0x30)
	go/pkg/mod/github.com/chromedp/chromedp@v0.5.2/chromedp.go:393 +0x72
github.com/chromedp/chromedp.Tasks.Do(0xc0000fbf78, 0x1, 0x1, 0x1588080, 0xc0002b8030, 0xc0001361b0, 0x1588080)
	go/pkg/mod/github.com/chromedp/chromedp@v0.5.2/chromedp.go:393 +0x72
github.com/chromedp/chromedp.Run(0x1588080, 0xc000170720, 0xc0000fbf78, 0x1, 0x1, 0x1581fa0, 0xc000030180)
	go/pkg/mod/github.com/chromedp/chromedp@v0.5.2/chromedp.go:229 +0x146
main.main()
	github.go:39 +0x444
```
#### What versions are you running?

<pre>
$ go list -m github.com/chromedp/chromedp
github.com/chromedp/chromedp v0.5.2
$ google-chrome --version
Google Chrome 78.0.3904.108
$ go version
go version go1.12.5 darwin/amd64
</pre>

#### What did you do? Include clear steps.

The main search page on duckduckgo.com features a text input field named "q":

```
<form id="search_form_homepage_top" class="search  search--home  js-search-form-top" name="x" method="POST" action="/html">
			<input class="search__input  js-search-input" type="text" autocomplete="off" name="q" tabindex="1" value="">
			<input class="search__button  js-search-button" type="submit" tabindex="2" value="S" />
			<input class="search__clear  empty  js-search-clear" type="button" tabindex="3" value="X" />
			<div class="search__hidden  js-search-hidden"></div>
		</form>
```
so let's try to use SendKeys() to paste text into it:

```
package main

import (
  "context"
  "github.com/chromedp/chromedp"
  "log"
)

func main() {
  ctx, cancel := chromedp.NewContext(
      context.Background(), chromedp.WithDebugf(log.Printf))
  defer cancel()

  sel := `//input[@name="q"]`
  tasks := chromedp.Tasks{
    chromedp.Navigate(
      "https://duckduckgo.com"),
    chromedp.WaitReady("body", chromedp.ByQuery),
    chromedp.SendKeys(sel, "waaah\n", chromedp.ByQuery),
    chromedp.WaitReady("body", chromedp.ByQuery),
  }

  err := chromedp.Run(ctx, tasks)
  if err != nil {
    panic(err)
  }
}
```

#### What did you expect to see?

The selector `//input[@name="q"]` should find the item.

#### What did you see instead?

Debug output indicates it's searching forever without finding it:

```
2020/01/01 12:58:48 -> {"id":143,"sessionId":"CF5A3F56D987CA6FEA082B76D810F060","method":"DOM.querySelector","params":{"nodeId":14,"selector":"//input[@name=\"q\"]"}}
2020/01/01 12:58:48 <- {"error":{"code":-32000,"message":"DOM Error while querying"},"id":143,"sessionId":"CF5A3F56D987CA6FEA082B76D810F060"}
```

This seems to be related to https://github.com/chromedp/chromedp/issues/540, hopefully this easily reproducable example helps to find the root cause.

Or whether two contexts derived from the same context using `chromedp.NewContext` are safe to use concurrently.
I need to prevent changing of location on current tab. Any help?
#### What versions are you running?
<pre>
$ go list -m github.com/chromedp/chromedp
flag provided but not defined: -m
usage: list [-e] [-f format] [-json] [build flags] [packages]
Run 'go help list' for details.

$ chromium-browser --version
Chromium 78.0.3904.108 Built on Ubuntu , running on Ubuntu 16.04

$ go version
go version go1.10.4 linux/amd64

</pre>

#### What did you do? Include clear steps.
At first, I want to catch the event. I try something like:
```go
func  listen() func(event interface{}) {
	return func(event interface{}) {
		switch ev := event.(type) {
		case *page.EventFrameRequestedNavigation:
                    println("NAVIGATION REQUEST")
                }
       }
}
func main(){
//creating context
...
	chromedp.ListenTarget(ctx, listen())
        chromedp.Run(ctx,
		page.SetDownloadBehavior(page.SetDownloadBehaviorBehaviorDeny),
		network.Enable(),
		network.SetBypassServiceWorker(true),
		fetch.Enable(),
		page.Enable(),
                chromedp.Navigate("my url"),
                //do some stuff and get location changed
                ....
	)
}
```

#### What did you expect to see?
It should output "NAVIGATION REQUEST".

#### What did you see instead?
Change of current location, no "NAVIGATION REQUEST".
There is a page with a lot of buttons. I want to jump through them in order to get the content of the page and search for elements in it. What should I do?
`func GetOrders(result *[]tools.Order) chromedp.Tasks {

    var currentUrL string

    var nodes []*cdp.Node


    return chromedp.Tasks{

        chromedp.Navigate(Url),

        //chromedp.Evaluate("document.querySelector('#J_Static2Quick').click();", &res),

        chromedp.Location(&currentUrL),

        chromedp.Nodes(".js-order-container", &nodes, chromedp.ByQueryAll),

        chromedp.ActionFunc(func(ctx context.Context) error {



            count := len(nodes)
            fmt.Println("count:", count)

            for _, v := range nodes {

                // todo search button and  click

            }

            return  nil
        }),


    }
}`


#### What did you do? Include clear steps.

``` go
package main

import (
	"context"
	"fmt"
	"github.com/chromedp/chromedp"
	"log"
	"net/http"
	"time"
)

func handler(w http.ResponseWriter, r *http.Request) {
	w.Header().Add("Content-Type", "text/html")
	fmt.Fprint(w, `<!DOCTYPE html><html><head><meta charset="utf-8">
</head>
<body>
  <button>Click me!</button>
  <script>
    var btn = document.querySelector('button');

    // Count the clicks on the button.
    var numClicks = 0;
    btn.addEventListener('click', function (e) {
      e.stopPropagation(); // don't bubble
      numClicks++;
    });

    // All the bubbling clicks are misplaced.
    var misplacedClicks = 0;
    document.addEventListener('click', function (e) {
      misplacedClicks++;
    });

    // Move the button periodically.
    var transform = true;
    setInterval(function () {
      if (transform)
        btn.setAttribute('style', 'transform: translate3d(100px, 100px, 0px);');
      else
        btn.setAttribute('style', '');
      transform = !transform;
    }, 10);
  </script>
</body>
</html>
`)
}

func main() {
	http.HandleFunc("/", handler)
	go func() {
		log.Fatal(http.ListenAndServe(":3003", nil))
	}()
	ctx, cancel := chromedp.NewContext(
		context.Background(),
	)
	defer cancel()

	if err := chromedp.Run(ctx,
		chromedp.Navigate("http://localhost:3003"),
		chromedp.WaitVisible("button", chromedp.ByQuery),
	); err != nil {
		log.Fatal(err)
	}

	// Try to click the button 100 times.
	const iterations = 100
	for i := 0; i < iterations; i++ {
		if err := chromedp.Run(ctx,
			chromedp.Click("button", chromedp.ByQuery),
		); err != nil {
			log.Fatal(err)
		}
	}

	var reallyClicked, misplacedClicks int
	if err := chromedp.Run(ctx,
		chromedp.Sleep(time.Second),
		chromedp.Evaluate("numClicks", &reallyClicked),
		chromedp.Evaluate("misplacedClicks", &misplacedClicks),
	); err != nil {
		log.Fatal(err)
	}

	fmt.Println(
		iterations, "iterations,",
		reallyClicked, "clicks,",
		misplacedClicks, "click(s) misplaced",
	)
}
```

#### What did you expect to see?

The moving button is clicked 100 times.

#### What did you see instead?

Some of the clicks are misplaced.