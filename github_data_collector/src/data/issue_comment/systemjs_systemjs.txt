Resolves #2107. Note that this behavior could potentially impact some code that is relying on (what I consider to be broken) behavior in systemjs@6.1.9.
When using the named-register extra, registering a module with the same name as a module in the import map results in some broken behaviors. Specifically, the module will get executed two times instead of one, which is problematic. The table below shows how this issue relates to #2104 and #2103:

Scenario | Module Type | Works in 6.1.9 | Works after #2104
------------ | ------------- | ----------- | ---------
System.import() twice | System.register | ❌ | ❌ 
System.import() twice | AMD | ❌ | ✅ 
System.import() once, as linked dep once | System.register | ❌ | ❌ 
System.import() once, as linked dep once | AMD | ❌ | ❌ 

Demo of problem:

See https://codesandbox.io/s/zealous-feynman-n5eqw. This demonstrates the `System.import() once, as linked dep once, with System.register format` scenario. Note in browser console how the `a` module is being executed twice.
(disclosure: I'm not sure if Systemjs has the proper behavior according to the spec or not; this could be a false bug report)

### GIVEN

**myModule.js**

```js
const importSubresource = () => import('./subresource')
```

**import-map.json**

```js
{
  "imports": {
    "myModule": "/myModule/myModule.abc123.js"
  },
  "scopes": {
    "/myModule/": { 
       "subresource": "/myModule/subresource.def456.js", 
       "./subresource": "/myModule/subresource.def456.js" 
        // ^ Attempted both of these options, but likely should only need to specify one of them
    }  
  }
}
```

### Expected 

I would expect to be able to load the subresource leveraging the scopes resolution of the importmap

### Actual

Fails with a 404 trying to load 

`/myModule/subresource.js`
I've had a couple people tell me that they found this video useful, so I thought I'd propose it as part of the Readme. Would not be offended if there are reasons not to merge this.

@guybedford thoughts?
Hi, I need help understanding if there is an expected order of execution when using `<script type="systemjs-module"`.  My current understanding is that it should work similar to `<script type="module"`, however looking at the code in `src/features/script-load.js` it does not appear to be the case.

Example:

```js
// hello.js
console.log('hello');
```
```js
// world.js
console.log('world.js');
```
logs "world hello" if `world.js` finishes loading first
```html
<script type="systemjs-module" src="./hello.js"></script>
<script type="systemjs-module" src="./world.js"></script>
```
always logs "hello world" regardless of which script loads first
```html
<script type="module" src="./hello.js"></script>
<script type="module" src="./world.js"></script>
```


Not really an issue, more of a question:

is there a reason that strict mode is explicitly turned off in the compiled output? 

https://github.com/systemjs/systemjs/blob/master/rollup.config.js#L11

I just tested it with strict mode on, and all the tests continue to pass. So it doesn't appear (on the surface) to have to do with features you're building or anything. 

Anyway, just curious. 
As of August 2019, the import maps spec no longer supports multiple import maps or merging import maps together. Instead, multiple import maps are listed as future work.

See https://github.com/WICG/import-maps/commit/6f99d474e401e5c5b55b476301d984efbbb7b79c#diff-04c6e90faac2675aa89e2176d2eec7d8 and https://github.com/WICG/import-maps/#multiple-import-map-support.

The question for SystemJS is whether to drop support for multiple import maps or not. My vote is no, but think it's worth having a discussion around.

@guybedford what are your thoughts?
Not sure what is this wierd error
`eval` for css files caught to error
Right now, if I attempt to import a CommonJS module, I get the rather cryptic

```
Uncaught my-importing-module: Application 'my-importing-module' died in status LOADING_SOURCE_CODE: exports is not defined
    at http://localhost:7070/openmrs/frontend/react-i18next@11.2.5/dist/commonjs/index.js:3:23
i18next.js:5 Uncaught ReferenceError: require is not defined
    at i18next.js:5
```

It took me a while to figure out that this is because they are CommonJS modules and that [SystemJS no longer supports CommonJS](https://github.com/systemjs/systemjs/issues/1853#issuecomment-426268222).

I (and I expect a lot of developers) would have saved a lot of time with an error message like

```
Uncaught ...: Module 'foo' is a CommonJS module, which SystemJS does not support importing. See https://github.com/systemjs/systemjs/blob/master/docs/module-types.md for the supported types.
```