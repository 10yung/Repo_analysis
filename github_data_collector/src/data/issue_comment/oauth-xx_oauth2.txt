We've tested your project with an updated dependency and the build failed.

This version is either within the version range you specified or you haven't specified a version/range. To be able to test your project with the new version, we've taken the liberty of pinning the version for this branch and pull request.

| name | version specification | new version |
| --- | --- | --- |
| rack | >= 1.2, < 3 | 2.1.1 |

Unfortunately, we encountered failing tests after pinning. This means that this new version is not compatible with your project and the test failure will potentially also happen on fresh installs.

If you have correctly specified a semantic versioning version range, you should probably also file an issue with the upstream project as they might have released an update that's breaking SemVer rules, which is not cool. (But then again, not all projects explicitly follow SemVer)

We've left the pull request open for you to investigate this issue. Please don't merge it as is, because, again, we've pinned the version of rack for this test run.

### What changed?

#### ✳️ rack (>= 1.2, < 3 → 2.1.1) · [Repo](https://github.com/rack/rack) · [Changelog](https://github.com/rack/rack/blob/master/CHANGELOG.md)

<details>
<summary>Release Notes</summary>

<h4>2.1.1 (from changelog)</h4>
<blockquote><ul>
<li>Remove <code>Rack::Chunked</code> from <code>Rack::Server</code> default middleware. (<a href="https://bounce.depfu.com/github.com/rack/rack/pull/1475">#1475</a>, <a href="https://bounce.depfu.com/github.com/ioquatix">@ioquatix</a>)</li>
<li>Restore support for code relying on <code>SessionId#to_s</code>. (<a href="https://bounce.depfu.com/github.com/jeremyevans">@jeremyevans</a>)</li>
</ul></blockquote>
<p><em>Does any of this look wrong? <a href="https://depfu.com/packages/rubygem/rack/feedback">Please let us know.</a></em></p>
</details>

<details>
<summary>Commits</summary>
<p><a href="https://github.com/rack/rack/compare/879ae7163a399a9ed36d876668f4ecae4ae8b9e4...799a520a015de5938bc01faa8e90b76589c6e7d3">See the full diff on Github</a>. The new version differs by 6 commits:</p>

<ul>
<li><a href="https://github.com/rack/rack/commit/799a520a015de5938bc01faa8e90b76589c6e7d3"><code>Updating changelog for 2-1-stable</code></a></li>
<li><a href="https://github.com/rack/rack/commit/4fabf4d70bb890d15a903ae4995c0349b0c69324"><code>Bump version.</code></a></li>
<li><a href="https://github.com/rack/rack/commit/10512e68717e734f530d8f4d2f668a8c0ea6d5f8"><code>Remove chunked middleware from default server stack.</code></a></li>
<li><a href="https://github.com/rack/rack/commit/db922514f49bbc8756a55da3cffe5ed5c0463bee"><code>Fix ActiveStorage use-case and add test case. Fixes #1464.</code></a></li>
<li><a href="https://github.com/rack/rack/commit/327a865a714942c4e3f257d846e01361f7eb9233"><code>Do not deprecate Rack::File</code></a></li>
<li><a href="https://github.com/rack/rack/commit/04f541ba9db04f3b13e5321c8d596c490955e1db"><code>Merge pull request #1462 from jeremyevans/sessionid-to_s</code></a></li>
</ul>
</details>





---
![Depfu Status](https://depfu.com/badges/6d34dc1ba682bbdf9ae2a97848241743/stats.svg)

[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.

<details><summary>All Depfu comment commands</summary>
<blockquote><dl>
<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>
<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>
<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>
<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>
<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>
<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>
<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>
<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>
</dl></blockquote>
</details>


I have a microservice architecture and each microservice has a specific path to be accessed. My oauth2 API has the path `/uaa`. So I tried to change the token_url param to be `/uaa/oauth/token` and I didn't get success also I put my site address with the suffix `/uaa,` however (and according to the semantic) it considers only the domain ignoring the rest. 
We've tested your project with an updated dependency and the build failed.

This version is either within the version range you specified or you haven't specified a version/range. To be able to test your project with the new version, we've taken the liberty of pinning the version for this branch and pull request.

| name | version specification | new version |
| --- | --- | --- |
| faraday | >= 0.8, < 2.0 | 1.0.0 |

Unfortunately, we encountered failing tests after pinning. This means that this new version is not compatible with your project and the test failure will potentially also happen on fresh installs.

If you have correctly specified a semantic versioning version range, you should probably also file an issue with the upstream project as they might have released an update that's breaking SemVer rules, which is not cool. (But then again, not all projects explicitly follow SemVer)

We've left the pull request open for you to investigate this issue. Please don't merge it as is, because, again, we've pinned the version of faraday for this test run.

### What changed?

#### ✳️ faraday (>= 0.8, < 2.0 → 1.0.0) · [Repo](https://github.com/lostisland/faraday) · [Changelog](https://github.com/lostisland/faraday/blob/master/CHANGELOG.md)







---
![Depfu Status](https://depfu.com/badges/6d34dc1ba682bbdf9ae2a97848241743/stats.svg)

[Depfu](https://depfu.com) will automatically keep this PR conflict-free, as long as you don't add any commits to this branch yourself. You can also trigger a rebase manually by commenting with `@depfu rebase`.

<details><summary>All Depfu comment commands</summary>
<blockquote><dl>
<dt>@​depfu rebase</dt><dd>Rebases against your default branch and redoes this update</dd>
<dt>@​depfu recreate</dt><dd>Recreates this PR, overwriting any edits that you've made to it</dd>
<dt>@​depfu merge</dt><dd>Merges this PR once your tests are passing and conflicts are resolved</dd>
<dt>@​depfu close</dt><dd>Closes this PR and deletes the branch</dd>
<dt>@​depfu reopen</dt><dd>Restores the branch and reopens this PR (if it's closed)</dd>
<dt>@​depfu pause</dt><dd>Ignores all future updates for this dependency and closes this PR</dd>
<dt>@​depfu pause [minor|major]</dt><dd>Ignores all future minor/major updates for this dependency and closes this PR</dd>
<dt>@​depfu resume</dt><dd>Future versions of this dependency will create PRs again (leaves this PR as is)</dd>
</dl></blockquote>
</details>


This is a simple change to merge a relative reference (1) or absolute URI (2) from the location header into the original request URI.

If there are any barriers to this being merged, please let me know.

1. https://tools.ietf.org/html/rfc3986#section-4.2
2. https://tools.ietf.org/html/rfc3986#section-4.3
The returned location is used for the next request directly, but in some cases, this can be a relative URL:

> An obsolete version of the HTTP 1.1 specifications (IETF RFC 2616) required a complete absolute URI for redirection.[2] The IETF HTTP working group found that the most popular web browsers tolerate the passing of a relative URL[3] and, consequently, the updated HTTP 1.1 specifications (IETF RFC 7231) relaxed the original constraint, allowing the use of relative URLs in Location headers.[4]
 (https://en.wikipedia.org/wiki/HTTP_location)

https://github.com/oauth-xx/oauth2/blob/3bef9feff5de9d46b35c7423061508e5092b1eac/lib/oauth2/client.rb#L113
When making the request to retrieve an access token, if the API requires
you to use TLS client auth as the authentication mechanism then it will
fail if the client secret is sent. For this auth type, only the client
ID should be sent.

We do not currently allow the developer to customise this; we set the
client ID and secret by default for all access token requests.

This PR adds an extra section to the case statement in
Authenticator#apply to add the desired functionality; when passing in
`tls_client_auth` as the auth mode, the client secret will be omitted
from the request.
application_helper.rb
```
module ApplicationHelper
  def google_oauth_client
     GoogleAuth.new(request,service: params[:service])
  end
end
```

lib/google_auth.rb

```
class GoogleAuth

  class GoogleAuthException < StandardError; end
  class JWTProblem < GoogleAuthException; end

  attr_reader :oauth_client, :redirect_uri

  def initialize(request,state_data = {})
    @oauth_client = OAuth2::Client.new(
      ENV['GOOGLE_OAUTH_CLIENT_ID'],
      ENV['GOOGLE_OAUTH_CLIENT_SECRET'],
      site: 'https://accounts.google.com',
      authorize_url: '/o/oauth2/auth',
      token_url: '/o/oauth2/token'
    )
    @state_data = state_data
    build_redirect_params(request)
  end

  def identify(authorization_code)
    access_token = oauth_client.auth_code.get_token(
      authorization_code, { redirect_uri: redirect_uri }
    )
    profile = access_token.get('https://www.googleapis.com/oauth2/v3/userinfo').parsed
    email = profile['email']
    refresh_token = access_token.refresh_token
    return  {
      email: email,
      refresh_token: refresh_token
    }
  end

  def login_uri
    oauth_client.auth_code.authorize_url(@redirect_params)
  end

  def ticket
    @ticket ||= CASino::LoginTicket.create.ticket
  end

  def state
    @state ||= ({ ticket: ticket }.merge(@state_data)).to_json
  end

  private

  def build_redirect_params(request)
    return @redirect_params if @redirect_params

    uri = URI.parse(request.url)
    uri.path = ENV['GOOGLE_OAUTH_CALLBACK_PATH']
    uri.query = nil

    @redirect_uri = uri.to_s
    @redirect_params = {
      redirect_uri: @redirect_uri,
      scope: [
        'email',
        'https://www.googleapis.com/auth/drive'
      ].join(' '),
      access_type: 'offline',
      state: state
    }
  end
end
```
 Previously it was working fine but after upgrading ruby and rails version it is giving error.
`uninitialized` constant ApplicationHelper::GoogleAuth`

Please let me know what could be the reason


Hey

I tried to do simple token refresh stubbing today, but the lib made it tough.

```
client = OAuth2::Client.new(
  'CLIENT_ID',
  'CLIENT_SECRET',
  authorize_url: 'https://appcenter.intuit.com/connect/oauth2',
  site: 'https://appcenter.intuit.com/connect/oauth2',
  token_url: 'https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer'
)

token = OAuth2::AccessToken.new(
  client,
  'ACCESS_TOKEN',
  refresh_token: 'REFRESH_TOKEN'
)
```

You can ignore those URLs. Then I do `token.refresh!` in a test. Here's a brief version of that.

```
RSpec.describe 'quickbooks_online/token', type: :feature do
  before do
    stub_request(:post, "https://oauth.platform.intuit.com/oauth2/v1/tokens/bearer").
    with(
      body: {"client_id"=>"CLIENT_ID", "client_secret"=>"CLIENT_SECRET", "grant_type"=>"refresh_token", "refresh_token"=>"REFRESH_TOKEN"},
      headers: {
        'Accept'=>'*/*',
        'Accept-Encoding'=>'gzip;q=1.0,deflate;q=0.6,identity;q=0.3',
        'Content-Type'=>'application/x-www-form-urlencoded',
        'User-Agent'=>'Faraday v0.15.4'
      }).
    to_return(
      status: 200,
      body: "{\"token_type\":\"bearer\",\"expires_in\":3600,\"refresh_token\":\"NEW_REFRESH_TOKEN\",\"x_refresh_token_expires_in\":1569480516,\"access_token\":\"NEW_ACCESS_TOKEN\"}",
      headers: {}
    )
  end

  context '#refresh' do
    subject { token.refresh! } # token comes from code above
    
    it { expect(subject.access_token).to eq('NEW_ACCESS_TOKEN') }
  end
end
```

But all I got is this error
```
     OAuth2::Error:
       {"token_type":"bearer","expires_in":3600,"refresh_token":"NEW_REFRESH_TOKEN","x_refresh_token_expires_in":1569480516,"access_token":"NEW_ACCESS_TOKEN"}
```

So stubbing works fine, but whats up with the error? Does it make sense to you?

After digging I came across [this client.rb#L148](https://github.com/oauth-xx/oauth2/blob/v1.4.1/lib/oauth2/client.rb#L148). You just return generic error with response body. Thats not very helpful.

Then after putting bunch of debugger statements I noticed that `response.parsed` returned `nil` But still couldn't figure out why. After going deeper into response class, I noticed that `parser` was `nil`, so it couldn't pick up correct parser. This is where I stopped trying to figure out how oauth2 picks up parser and just tried to set `Content-Type` response header.

```
headers: {
  'Content-Type'=>'application/json'
}
```
And that was it.

I think it would be way better to raise some meaningful error [here response.rb#L70](https://github.com/oauth-xx/oauth2/blob/v1.4.1/lib/oauth2/response.rb#L70) instead of just returning `nil` and then raising generic `OAuth2::Error` with response body.

Writing an Rspec controller request spec using the `oauth2` gem, I had to do the following hack to mock up an OAuth2 error:

```ruby
    context "error" do

      # VERY hacky test made to allow us to raise an OAuth2Error, from looking at the gem's documentation: https://github.com/oauth-xx/oauth2/blob/master/spec/oauth2/error_spec.rb
      let(:oauth_error) do
        raw_response = Faraday::Response.new(
          :status => 401,
          :response_headers => {"fake" => "things"},
          :body => {
            "status": {
            "errorMessage": "Authentication failed: OAuth token invalid or expired.",
            }
          }
        )

        OAuth2::Error.new(OAuth2::Response.new(raw_response))
      end

      it "responds with error and tries again" do
        allow(OAuth2::Client).to receive(:new).and_raise(oauth_error)
        get refer_oauth_authorize_path, params: {"code"=>"placeholder", "state"=>"refer"}
        expect(response).to redirect_to(refer_oauth_url)
        expect(response).to have_http_status(302)
      end
    end
```

Ideally the Oauth2 gem should return errors that are easy to test and don't require parsing the gem's internals.
Hi

Beginner question so apologies if obvious....

I am trying to authenticate using oauth2 against a 3rd party API.

I am using the ruby gem oauth2 - https://github.com/oauth-xx/oauth2

The "authorize_url" method insists on adding an oauth subfolder to my URL.

So I want this: https://oauth.companyname.com/authorize?

But I get: https://oauth.companyname.com/oauth/authorize?

    client_id = "Demo"

    client_secret = "blablabla"

    site_path = 'https://oauth.companyname.com'

    client = OAuth2::Client.new(client_id, client_secret, :site => site_path)

    client.auth_code.authorize_url

Why is this happening and how can I solve it please?