Example build failure: https://circleci.com/gh/palantir/tslint/18322?utm_campaign=vcs-integration-link&utm_medium=referral&utm_source=github-build-link

```
The 'strict-boolean-expressions' rule threw an error in '/home/circleci/project/test/rules/strict-boolean-expressions/default/test.ts':
TypeError: Cannot read property 'length' of undefined
    at checkIdentifier (/home/circleci/project/node_modules/typescript/lib/typescript.js:51626:61)
    at checkExpressionWorker (/home/circleci/project/node_modules/typescript/lib/typescript.js:58332:28)
    at checkExpression (/home/circleci/project/node_modules/typescript/lib/typescript.js:58282:38)
    at getTypeOfExpression (/home/circleci/project/node_modules/typescript/lib/typescript.js:58258:58)
    at getRegularTypeOfExpression (/home/circleci/project/node_modules/typescript/lib/typescript.js:63839:48)
    at getTypeOfNode (/home/circleci/project/node_modules/typescript/lib/typescript.js:63750:24)
    at Object.getTypeAtLocation (/home/circleci/project/node_modules/typescript/lib/typescript.js:33354:31)
    at checkExpression (/home/circleci/project/build/src/rules/strictBooleanExpressionsRule.js:167:28)
    at cb (/home/circleci/project/build/src/rules/strictBooleanExpressionsRule.js:126:25)
    at visitNode (/home/circleci/project/node_modules/typescript/lib/typescript.js:17768:24)
test/rules/strict-boolean-expressions/default/test.ts.lint: Failed!
```
RIght now the only mention of using https://github.com/typescript-eslint/tslint-to-eslint-config to migrate packages is a comment deep in #4534. @adidahiya, mind if I edit that thread's OP to mention it, and send a PR to add it to the README? 

I'm also curious if there are other tools folks are using to migrate that we should post links to!
There are a bunch of otherwise-actionable [issues](https://github.com/palantir/tslint/issues?q=is%3Aopen+is%3Aissue+label%3A%22Type%3A+Breaking+Change%22) and [pull requests](https://github.com/palantir/tslint/issues?q=is%3Apr+is%3Aopen+label%3A%22Type%3A+Breaking+Change%22) marked as breaking changes. Let's come up with a timeline for getting to that fabled TSLint 6.x version! ðŸ™Œ

Straw man proposal:

* 8/1: close new rule issues lacking PRs per #4534 
* 8/2: release the last 5.X minor version
* 8/2-9: one week waiting period in case there needs to be a 5.X patch, in case of critical bugs
* 8/10: ~remove~ ignore 'breaking change' label from existing issues & PRs, and start merging them in
* 8/24: release `tslint@6.0.0-beta0`
* 9/1: release `tslint@6.0.0-beta1`
* 9/8: release `tslint@6.0.0`

Thoughts? 

/cc @adidahiya 

---

Updated proposal ~~9/3~~ ~~9/9~~ 10/4:

* 9/9: release the last 5.x minor version, prepare breaking changes to merge right after
* 10/11: release `tslint@6.0.0-beta0`
* 10/17: release `tslint@6.0.0-beta1`
* 10/23: release `tslint@6.0.0`
As you may have read in [this blog post](https://medium.com/palantir/tslint-in-2019-1a144c2317a9), we plan to deprecate TSLint in 2019 and support the migration to ESLint as the standard linter for both TypeScript & JavaScript. This will not be an immediate deprecation; on the contrary, there is a lot of work to do to ensure a smooth transition to the new tooling without any regressions. There are features, test suites, and conveniences in TSLint which we hope to retain in the migration. There may be a period of time when there is overlap between the two tools and TSLint early adopters are recommended to run _both_ linters to ensure full code check coverage (to a reasonable degree such that performance doesn't suffer drastically).

I will be closing some feature requests in this repo which now feel out of scope because we expect them to be handled in the ESLint / [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint) roadmap. One example of a category of rules for which __new feature requests__ are most likely to be closed / rejected is [formatting rules](https://github.com/palantir/tslint/labels/Formatting%20rule). I have suggested [splitting out these rules for quite some time](https://github.com/palantir/tslint/issues/3592) because we use Prettier at Palantir and consider it a better tool for the job of formatting code.

TSLint will continue to release with important bug fixes and updates which keep it up-to-date with the latest compiler / language features.

---

Update (June 2019): a more concrete roadmap timeline, coordinated with @JoshuaKGoldberg and tslint-contrib-microsoft:

- __August 1st, 2019__: Stop accepting new _core_ rules. Still accept bug fixes, minor features, and rule enhancements. Custom rules are always an option and can be maintained outside this repo.
- __November 1st, 2019__: Stop accepting features or rule enhancements (with the exception of ones that make migrating to typescript-eslint easier). Still accept bug fixes.
- __January 1st, 2020__: Stop accepting anything except security fixes.
- __December 1st, 2020__: Stop accepting any PRs ðŸŽ‰

---

Update (August 2019): see **[tslint-to-eslint-config](https://github.com/typescript-eslint/tslint-to-eslint-config)** for a CLI command that migrates TSLint configuration files to ESLint configuration files. 