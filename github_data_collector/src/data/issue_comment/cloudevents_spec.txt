Per a reminder from @deissnerk 
Hello,

I have published a CloudEvent 1.0 to an Azure Service Bus queue. 

To read this event from the Azure Service Bus queue, I have an Azure Function v2.0 with a ServiceBusTrigger.

Based on this [doco](https://docs.microsoft.com/en-us/azure/azure-functions/functions-bindings-service-bus#trigger---usage), a v2.0 Azure Function binds to a service bus message via the Microsoft.Azure.ServiceBus.Message type.

So to get the original CloudEvent object, I need to deserialize the [message.Body](https://docs.microsoft.com/en-au/dotnet/api/microsoft.azure.servicebus.message.body?view=azure-dotnet#Microsoft_Azure_ServiceBus_Message_Body) byte array.

`messageBody = Encoding.UTF8.GetString(message.Body, 0, message.Body.Length);`
`cloudEvent = JsonConvert.DeserializeObject<CloudEvent>(messageBody);`

I have confirmed the messageBody string is a JSON serialized representation of the CloudEvent object.

However, when I attempt to deserialise with JsonConvert.DeserializeObject<CloudEvent> I get the following runtime error:

> Unable to find a constructor to use for type CloudNative.CloudEvents.CloudEvent. A class should either have a default constructor, one constructor with arguments or a constructor marked with the JsonConstructor attribute. 
 
I'm new to CloudEvents so I think I'm just missing something basic here, but I can't find any serialization methods or extensions to help with this scenario. 

Any guidance will be greatly appreciated.
Would it be possible to get an example of an implementation with Avro (and Kafka) , similar to those given with the different SDKs.
The documentation describes HTTP related events pretty well. I try to understand advanced use cases which are not covered by the docs.

I'd like to standardize all incoming requests of my SAAS service by forcing cloud events everywhere. This would include API calls performed by users over the HTTP protocol (e.g. REST, RPC). The spec in this repo is pretty forward. Based on [HTTP Protocol Binding](https://github.com/cloudevents/spec/blob/v1.0/http-protocol-binding.md) nothing prevents such use case. If I'm correct, then a user would send event metadata as HTTP headers and use  `application/json` content type for GET/POST requests and `application/octet-stream` for binary stuff like file uploads. The only restriction I see is the [size limit](https://github.com/cloudevents/spec/blob/v1.0/spec.md#size-limits) for intermediaries and consumers which is expected to be up to `64 KB` - this blocks file upload implementation. By ignoring this limit the HTTP event received from a user would look like this:

```js
const httpEvent = {
    "specversion" : "1.0",
    "type" : "com.myservice.api.files.upload",
    "source" : "https://myservice.com/api/files",
    "subject" : "upload",
    "id" : "A234-1234-1234",
    "time" : "2018-04-05T17:31:00Z",
    "datacontenttype" : "application/octet-stream",
    "data" : HTTPRequestObject // stream instance (`req`)
};
```

I wonder why Google's implementation of [HTTP cloud function](https://cloud.google.com/functions/docs/writing/http) doesn't provide the `event` object. It seems like [Knative](https://knative.dev/) also follows Google's pattern. AWS, however, agrees that a user sends an `event` object where they attach custom properties.

```js
// Google
exports.helloHttp = (req, res) => {};
exports.helloEvent = (event, context) => {};
// AWS
exports.helloHttp = async (event) => {};
```

If we ignore how cloud functions work today, cloud events could also start HTTP event streaming (SSE) and there's a bunch of other use cases. At the moment it seems to me that cloud events are only meant for small background triggers and not as an overall event standard. Am I correct? I remember a talk almost a year ago where a guy said that an event carries only data for a consumer to create another request to access actual data. Maybe this is still true.

I would appreciate **comments** on what I wrote above and some more words about the conceptional-level overview of **how the cloud events should be used**. It would be great for this spec to be more opinionated to eliminate confusion. Thank you.
Per our previous call - just a reminder for our SDK doc.
See: https://github.com/cloudevents/spec/pull/218

@jroper @clemensv - could one of you consider taking care of this one?
We were about the relation between [the `partitionKey` extension](https://github.com/cloudevents/spec/pull/218) and the kafka binding on the call 09.05.2019 and there was a great snippet of someone saying that the binding should not require the extension. I think that applies on a general level and the primer should suggest that plugins/bindings/programs (what's the lowest common denominator here?) that work with CloudEvents not require extensions unless absolutely necessary.
Hi all,
in my JavaScript/Node.js library for manage CloudEvents [here](https://github.com/smartiniOnGitHub/cloudevent.js), inside extensions I'm using an attribute 'strict' that when set to true (default is false) some additional validations will be done on the new created CloudEvent instance (but it's possible to validate an instance even later, without or with that 'strict' mode); this is useful for example during development, to better identify bad/wrong CloudEvent instances.
Note that when set (for example in some "important" CloudEvent instances) I keep that flag into the extensions attribute of the instance, so it will be possible to reuse later.

Do you think it could be a good addition to extensions ?

Tell me if you need more info or context/examples.

Regards,
Sandro

Related to #367, there are also a number of cases where the expected parsing is not spelled out today. I volunteer the following HTTP binary mode object for consideration:

```http
POST / HTTP/1.1
Content-Type: text/xml
CE-Extension: foo
CE-Extension-Key1: bar
CE-Extension-Key2: baz
CE-SpecVersion: 0.2
CE-Cloudeventsversion: v0.1
CE-Source: https://jackboxgames.com/project/you-dont-know-jack-party/
CE-Type: u(dont-know-jack)
CE-ID: ""ðŸ˜Š
Content-Length: 19

<much wow=\"xml\"/>
```

I believe this should correspond to a JSON object like the following:

```json
{
  "specversion": "0.2",
  "source": "https://jackboxgames.com/project/you-dont-know-jack-party/",
  "type": "u(dont-know-jack)",
  "id": "\"\"ðŸ˜Š",
  "extension": "foo",
  "cloudeventsversion": "v0.1",
  "contenttype": "text/xml",
  "data": "<much wow=\\\"xml\\\"/>"
}
```

Note that the `extension` map keys were silently dropped; a different definition would be to discard the value `"foo"`. Additionally, the actual "data" content is actually invalid XML, if I recall my XML correctly.
