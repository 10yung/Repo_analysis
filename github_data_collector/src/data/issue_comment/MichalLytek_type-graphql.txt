When we serialize the raw typescript entity object this doesn't respect the various field annotations in our GQL entities and ends up leaking unwanted data. Example below a Profile entity class

```
import { Field, Int, ObjectType } from 'type-graphql'
import { Column, Entity, ManyToOne, OneToMany } from 'typeorm'
import { Account } from '../account/account.entity'

export class Profile {
  @Field()
  @Column({ unique: true })
  public username: string

  @Field()
  @Column()
  public name: string

  // Relations

  @Column()
  public accountId: string

  @ManyToOne(type => Account, account => account.profiles, { eager: true })
  public account: Account
}
```

`account` has sensitive data. When we `JSON.stringify` a Profile reference we don't want account  output. Account is not annotated with `@Field` and we expect it would not be output.
**Is your feature request related to a problem? Please describe.**
I have been using a pattern of coupling associated functions or values with the enum in a namespace with the same name. I like it as it simply keeps things tidier and easier to find, but I can understand if some people mightn't like it. When complied, the values declared in the namespace become included in the enum as one single object.

The problem is when TypeGraphQL reads the enum it, understandably, includes every key including functions, arrays, etc.

```typescript
export enum DateGranularity {
  hourly = "hourly", // one grain per hour
  daily = "daily", // one grain per day
  fullCampaign = "fullCampaign" // one grain for the entire campaign
}

export namespace DateGranularity {

  export const asArray = () => [DateGranularity.hourly, DateGranularity.daily, DateGranularity.fullCampaign]

  // returns true if 'a' is finer granularity than 'b' (i.e. site is finer grain than region)
  export function isFinerOrEqual(a: DateGranularity, b: DateGranularity) {
    return a === b || a === DateGranularity.hourly || (a === DateGranularity.daily && b === DateGranularity.fullCampaign)
  }

}

registerEnumType(DateGranularity, {
  name: "DateGranularity"
})

// e.g. helper functions can be used as such
DateGranularity.isFinerOrEqual(DateGranularity.hourly, DateGranularity.daily)
```

This renders the following schema:
```graphql
enum DateGranularity {
  hourly
  daily
  fullCampaign

  asArray # notice the array and function are included
  isFinerOrEqual
}
```

**Describe the solution you'd like**
I've read over the internal code and can understand what is happening. I'd be quite happy to make a PR with the changes, but I can see a few possible routes or perhaps it's not a desired feature.

_Possible solution 1:_
As TypeScript [only allows strings and numbers](https://www.typescriptlang.org/docs/handbook/enums.html) as enum values, I think the most intuitive and straight forward solution is to modify `getEnumValuesMap` and simply only include string or number values in the map (hence stripping out any functions, arrays, etc. declared in namespaces). Please correct me though if this wouldn't work.

_Possible solution 2:_
Alternatively, rather than doing it automatically, `EnumConfig` could be modified to have an optional white/blacklist of keys to include in the schema. It is a bit more flexible, but I prefer solution 1 as it uses existing language restrictions and doesn't require any extra declarations.

While it doesn't really match my exact use case, this solution may perhaps be useful to be able to shield of certain enum values (i.e. internal-only values) from the schema. Obviously, there are fairly straightforward workaround to achieve that though.

**Describe alternatives you've considered**
I tried having a wrapper function for registering which would register a different object with only the keys I wanted, but this doesn't work when you try to use the enum as an input/output type because it tries to find the enum by equating objects (which fails as the full enum and object with desired keys are different).
Hello :wave:

First of all, thank you very much for your work on this library, it has helped us a lot in rapidly creating a graphql endpoint to go hand in hand with our existing REST API ðŸ™‚ 

In this PR, I will attempt to address this issue: https://github.com/MichalLytek/type-graphql/issues/124

I have tried to base my implementation off of the comments I could read in the issue and also in the PRs that were previously created for this. I also took inspiration from the Directive PR (https://github.com/MichalLytek/type-graphql/pull/369) which helped me by showcasing recent good PR practices on the project.

I will leave several comments of my own where I am unsure about my approach, I would be grateful if you could let me know your views on them, and also for any time you would spend reviewing the PR.


I won't be very active during the upcoming week-end, but I'll definitely try to address any feedback as fast as I can during the next week.

Best!

Before I send pull request I want to make sure I am thinking about this the right way. I patched the compiled metadata-generator code to test this idea. For real code I would presume some configuration, customized text, filtered (internal roles) not showing in docs etc.

```buildClassMetadata(definitions) {
        definitions.forEach(def => {
            const fields = this.fields.filter(field => field.target === def.target);
            fields.forEach(field => {
                ....
                if(field.roles) {
                  field.description = (field.description ? field.description : '') + `
user can authorize via roles: ${Array.isArray(field.roles) ? field.roles.join(): field.roles}
                `
                }
            });
            def.fields = fields;
        });
    }```
**Describe the bug**

So I'm not sure if this is a bug or I'm simply doing something wrong, but it seems confusing. 

I found `defaultValue` through intellisense on `@Field` and I'm using it on `@ObjectType()`. 

Setting a `defaultValue` on a field makes the field nullable.

I couldn't find any documentation regarding `defaultValue` other than for `@Args()`.

**To Reproduce**

```
@ObjectType()
export class Test1 {
  @Field({ defaultValue: 0 })
  public testField: number;
}
```

Generates the following schema:

```
type Test1 {
  testField: Float
}
```

Additionally, trying `@Field({ defaultValue: 0, nullable: false })`, results in the following error:

```
(node:27764) UnhandledPromiseRejectionWarning: Error: Wrong nullable option set for testField. You cannot combine default value '0' with nullable 'false'.
    at Object.wrapWithTypeOptions (\node_modules\type-graphql\dist\helpers\types.js:37:15)
```

**Expected behavior**

The schema should have the field marked as required:
```
type Test1 {
  testField: Float!
}
```

**Enviorment (please complete the following information):**
 - OS: Windows
 - Node v12.8.0
 - Package version 0.17.5
 - TypeScript version 3.7.3


**Is your feature request related to a problem? Please describe.**
We are using extensively cool TypeScript feature which allows parameters from constructor map to class members, Example:

```ts
export class User {
  constructor(
    public id: number,
    public username: string,
 ) { }
}
```

then 
```ts
let admin = new User(1,'admin');
console.log(admin.id) // prints 1
```

**Describe the solution you'd like**
I would  like to be able to decorate these parameters as well

**Describe alternatives you've considered**
Don't use this TS feature



I am thrilled to present the first preview of the upcoming **TypeGraphQL** & **Prisma Framework** integration ðŸŽ‰ 

![integration logo](https://raw.githubusercontent.com/MichalLytek/type-graphql/prisma/img/integration.png)

You can install it right now - it's distributed as a package `typegraphql-prisma` on NPM:
https://www.npmjs.com/package/typegraphql-prisma

All the docs (in readme), examples and the source code of the integration are located on the `prisma` branch of this repo (in the future it will be moved into a `master` branch when I finish converting the project to a monorepo):
https://github.com/MichalLytek/type-graphql/tree/prisma

Currently released version `0.1.x` is just a preview - it lacks some customization option, like picking/omitting fields of object types to expose in the schema, as well as picking CRUD methods and exposed args. However, the base functionality is working well, so I strongly encourage you to give it a try and play with it. 

Any feedback about the developers experience, bug reports or ideas about new features or enhancements are very welcome. However, during the preview I would ask to __add comments only in this issue__, not to create a new issues, as I don't want to pollute the repo for now ðŸ˜‰

And in the near feature - when Prisma SDK will be ready - the `typegraphql-prisma` integration will also allow to use a code-first approach to build a `schema.prisma` and GraphQL schema at once, using classes with decorators as a single source of truth. Stay tuned! :muscle:
**Describe the solution you'd like**
I'd like to be able to put authorization checks inside the subscription `topics` option so that I can dynamically block or allow users on subscriptions. Right now my auth checks are asynchronous but the SubscriptionTopicFunc doesn't accept Promises.

**Describe alternatives you've considered**
It's possible to put the authorization checks in the `filter` method or in the subscription logic itself, however this means that the authorization checks will fire for every event instead of just once at subscription time which is much more expensive.

**Additional context**
Add any other context or screenshots about the feature request here.

**Is your feature request related to a problem? Please describe.**
Trying to write client code which queries a graphql server whose resolvers and types were defined using `type-graphql`. 

_I'm building a webpack-dev-server alternative that supports HMR in node and web and I'd like to use graphql to define a data-transfer method agnostic API for fetching bundle updates & eventually support remote javascript debugging_

**Describe the solution you'd like**
I would like a typescript graphql client to be generated at compile-time based on the type-graphql `@ObjectType` definitions, with a design-time, typed client API available. This could be a separate package from `type-graphql`, like `type-graphql-client`.

**Describe alternatives you've considered**
- https://github.com/helios1138/graphql-typed-client
- https://github.com/mobxjs/mst-gql
- https://github.com/samdenty/gqless

The third option doesn't work because it's React specific. The first two are headed in the right direction, but they vend a CLI that requires connection to a running graphql server. These options just inspect the predefined schema in order to generate the client, so theoretically we should be able to generate a client based on `type-graphql` `@ObjectType`s, since these `@ObjectType`s act as the source of truth for generating a graphql schema.

**Additional context**
Ideally, the `type-graphql` annotated `@ObjectType` classes would be [isomorphic](https://en.wikipedia.org/wiki/Isomorphic_JavaScript) typescript, a DTO shared between client and server. Often times clients are bundled (via webpack for example), but right now there are difficulties bundling `type-graphql` into a webpack bundle because it has node-specific dependencies (there are imports to `fs` and `path` in the codebase for example) which means I can't bring an `@ObjectType` annotated class into a web targeted bundle without some [config hacks](https://github.com/MichalLytek/type-graphql/blob/20c81f4f7ee82779595002d25784fce3a8ff8b9b/src/browser-shim.ts#L7-L12). One workaround would be to separate the `type-graphql` annotations into a separate library like `type-graphql-annotations` which has zero dependencies and is written to run in any javascript runtime; in this case the annotations would be used more like meta-data tags rather than performing any operations, and then the main `type-graphql` node library or the `type-graphql-client` library would be able to interpret the meaning of the tags then generate a graphql schema via `graphql-js` or a graphql client respectively.

Ideally the `type-graphql-client` library would only know how to generate query strings, and would have no knowledge of where or how to submit the strings. That choice would be left up to clients of the library.

If you're open to something like this, I'd be happy organize this project (understand type-graphql more, organize a backlog, work on some epics/stories/tasks).
The upcoming Prisma 2 integration (#217) will generate TS classes with TypeGraphQL decorators based on data model definition of Prisma schema.

But to allow for further customization, TypeGraphQL needs some operators to transform the generated classes into the user one. Mainly to hide some fields from database like user password, so we need a way to omit some fields of the base class or pick only some selected fields.

Proposed API have two approaches to apply the transformation:
- pick/omit fields from emitted GraphQL schema using decorator option
```ts
@ObjectType({ pick: ["firstname", "lastname"] })
export class User extends BaseUser {
  // ...
}

@ObjectType({ omit: ["password", "salary"] })
export class User extends BaseUser {
  // ...
}
```
This approach is for use cases where you still want to have access to the hidden fields in other field resolvers, like hidding array or rates but exposing average rating by the field resolver.

- pick/omit fields both from emitted GraphQL schema and TS type using class wrapper
```ts
@ObjectType()
export class User extends Pick(BaseUser, ["firstname", "lastname"]) {
  // ...
}

@ObjectType()
export class User extends Omit(BaseUser, ["password", "salary"]) {
  // ...
}
```
This approach is better when you want to create a derived type, like a subset of some input type, so you won't accidentally use the not existing field.

Initial version might not support inheritance or have a prototype methods leaks, because it's not needed by the Prisma integration. In the next release cycle I will try to make it work with broader range of use cases.

Later, more types transformation utils will be implemented, like `Partial(Foo)` for making fields optional, `Required(Foo)` for making fields non-nullable.

If possible, maybe I will try to add even a mapping util that will map the keys of one type to new values in a new type. For example if you want to generate a sorting input (with field types only ASC/DESC) based on an object type which fields are representing database columns ðŸ˜‰ 