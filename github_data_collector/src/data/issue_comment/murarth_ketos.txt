```
ketos=> (define (x)
            (define (x-1) "hello")
            (x-1))
Traceback:

  In main, define x

execution error: type error: expected string; found list: (define (x-1) "hello")
```
Would something like this be planned to be added to ketos?
#60 is related in the sense that let-rec, and define in this way would achieve lambda recursion as well. 
I thought it might be fun to have a logo for the project ... I'll attach some ideas I had.
This pull request would add a basic time module.  The module provides two functions (`utc-timestamp` and `local-timestamp`) that return the current time in UTC or your local timezone as the number of seconds since January 1st 1970.  The module uses chrono::offset to get the time in UTC and your local timezone and will add a dependency on chrono version 0.4.

If anyone would like to write a more complete time library I can help.  This module is currently an minimal implementation containing only what I need.
I'm trying to create a function that returns a function that calls itself. I tried this:

```lisp
(define (multo ex) (let ((f (lambda (n) (if
                        (= 0 n)
                        1
                        (* ex (f (- n 1))))))) f))
(println "~s" ((multo 3) 3))
```

But it doesn't work because the lambda can't refer to `f` inside the definition. How do I achieve this?
I tried to specify a struct name as a field type:
```
ketos=> (struct foo ((a string)))
foo
ketos=> (struct bar ((b foo)))
bar
ketos=> (new bar :b (new foo :a "fails"))
Traceback:

  In main, lambda
  In system function new

execution error: type error for field `b` of struct `bar`: expected foo; found struct: foo { a: "fails" }
ketos=> (struct baz ((b struct)))
baz
ketos=> (new baz :b (new foo :a "works"))
baz { b: foo { a: "works" } }
```
The error confused me for a while until I realized the type for all struct values is "struct". Could it allow you to specify a struct type for a field?

Also, the definition for `bar` was accepted, even though there is no such type `foo` - every attempt to create a `bar` will fail to typecheck!
I was noodling around in the code and discovered that, as far as I can tell, the bytecode interpreter decodes the binary instructions to `Instruction` when a function is called, not when the bytecode is loaded.  This means that every time a function is called it has to re-decode all the instructions.  On a benchmark program (fib implemented the dumb way) on Linux AMD64, it spent about 15% of the time in `ketos::bytecode::Instruction::decode()`, the highest of any function as recorded by `perf`.

I haven't successfully made it decode the bytecode and store the result only once yet, but once I manage I'll post comparative benchmarks here.
The following code:

```rust
#[derive(Clone, Debug, ForeignValue, FromValueRef, IntoValue)]
struct example {
    test: u64
}
```

Gives the error:
```
error[E0244]: wrong number of type arguments: expected 1, found 2
  --> <omitted>
   |
24 | #[derive(Clone, Debug, ForeignValue, FromValueRef, IntoValue)]
   |                  
```
The documentation tells you how to create doc comments, but it is not clear what they are good for. Maybe give a hint at how to use them?

```
(use code documentation)
(print (documentation ...))
```

It might make sense to have a function `help` that prints the documentation, like in Python. It would not be terribly useful at the moment, because it seems that the built-in functions and operators don't have docstrings.

I've extracted Vim definition files to separate repo [hauleth/vim-ketos](https://github.com/hauleth/vim-ketos) to simplify installation (and reduce amount of updates) for Vim users. I hope that this is ok?

I don't know what kind of example you want in the `examples` directory, but here are a few simple programs:
## Tower of Hanoi

``` lisp
(define (move n from to via)
    (cond ((< n 1)
           (panic "expected integer larger than 0"))
          ((= n 1)
           (println "Move disk ~a from ~a to ~a." n from to))
          (else
           (do
            (move (- n 1) from via to)
            (println "Move disk ~a from ~a to ~a." n from to)
            (move (- n 1) via to from)))))

(move 3 "L" "M" "R")
```
## FizzBuzz

``` lisp
(define (fizzbuzz a b)
  (if (<= a b)
    (do
      (let ((divisible-by-3 (= (rem a 3) 0))
            (divisible-by-5 (= (rem a 5) 0)))
        (cond
          ((and divisible-by-3 divisible-by-5)
            (println "FizzBuzz"))
          (divisible-by-3
            (println "Fizz"))
          (divisible-by-5
            (println "Buzz"))
          (else
            (println "~a" a))))
      (fizzbuzz (+ a 1) b))))

(fizzbuzz 1 100)
```
## Extensible FizzBuzz

``` lisp
(use list (map))

(define (is-divisible a b) (= (rem a b) 0))

(define tags '((3 "Fizz") (5 "Buzz")))

(define (evaluate i)
  (let ((find-desc (lambda (tag)
          (if (is-divisible i (first tag)) (last tag) "")))
        (desc (format "~{~a~}" (map find-desc tags))))
    (if (= desc "") (format "~a" i) desc)))

(define (fizzbuzz start end)
  (if (<= start end) (do
    (println "~a" (evaluate start))
    (fizzbuzz (+ 1 start) end))))

(fizzbuzz 1 100)
```
