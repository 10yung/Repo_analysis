When starting a mysql container with version `8.0.19` (lastest) the container is getting killed after a few seconds due to the following error taken from `docker logs`:

```
2020-01-18 20:47:27+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.19-1debian9 started.
2020-01-18 20:47:27+00:00 [Note] [Entrypoint]: Switching to dedicated user 'mysql'
2020-01-18 20:47:27+00:00 [Note] [Entrypoint]: Entrypoint script for MySQL Server 8.0.19-1debian9 started.
2020-01-18 20:47:27+00:00 [Note] [Entrypoint]: Initializing database files
2020-01-18T20:47:27.611286Z 0 [Warning] [MY-010139] [Server] Changed limits: max_open_files: 1024 (requested 8161)
2020-01-18T20:47:27.611290Z 0 [Warning] [MY-010142] [Server] Changed limits: table_open_cache: 431 (requested 4000)
2020-01-18T20:47:27.611496Z 0 [Warning] [MY-011070] [Server] 'Disabling symbolic links using --skip-symbolic-links (or equivalent) is the default. Consider not using this option as it' is deprecated and will be removed in a future release.
2020-01-18T20:47:27.612138Z 0 [System] [MY-013169] [Server] /usr/sbin/mysqld (mysqld 8.0.19) initializing of server in progress as process 45
2020-01-18T20:47:30.175390Z 5 [Warning] [MY-010453] [Server] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.
2020-01-18 20:47:33+00:00 [Note] [Entrypoint]: Database files initialized
2020-01-18 20:47:33+00:00 [Note] [Entrypoint]: Starting temporary server
2020-01-18T20:47:33.787410Z 0 [Warning] [MY-010139] [Server] Changed limits: max_open_files: 1024 (requested 8161)
2020-01-18T20:47:33.787416Z 0 [Warning] [MY-010142] [Server] Changed limits: table_open_cache: 431 (requested 4000)
2020-01-18T20:47:34.153759Z 0 [Warning] [MY-011070] [Server] 'Disabling symbolic links using --skip-symbolic-links (or equivalent) is the default. Consider not using this option as it' is deprecated and will be removed in a future release.
2020-01-18T20:47:34.164041Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.19) starting as process 95
2020-01-18T20:47:34.208281Z 0 [ERROR] [MY-010946] [Server] Failed to start mysqld daemon. Check mysqld error log.
2020-01-18 20:47:34+00:00 [ERROR] [Entrypoint]: Unable to start server.
```

It works locally on a mac os system.
The exact linux ami is: `amzn2-ami-ecs-hvm-2.0.20191212-x86_64-ebs (ami-027078d981e5d4010)`

It is easily reproducable by running the follow command on an ec2 instance:
`docker run -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql`

When running the same command but locking the version to 5.7 it does work:
`docker run -e MYSQL_ROOT_PASSWORD=my-secret-pw -d mysql:5.7`
It's been a while since buster released
This prevents weird errors when attributes get shifted to newline and are executed by docker-entrypoint.sh. This PR removes the newline and when newline is stripped a 'Warning' is printed.

Short version: `docker-entrypoint.sh` scripts breaks (as seen later in examples of this PR) when 'newline' is present with rather ugly error that is hard to analyze without checking the code of script.
Better error message or automated removal of 'newline' would be more desirable. This PR proposes automated 'newline' removal.

Long version:
I have run into this when trying to get image working with kubernetes and erroneously generated 'kubernetes secret' that contained the newline at the end. From looking at the logs the error that I have made required me to do debugging of image as there was no good message on what is going on. I believe there is no practical use case for having 'newline' in any of variables (if this is not true please correct me). 

After the change proposed here the mysql image would progress with only printing warning when 'newline' is included which would make this work in most cases. With kubernetes the newline is preserved at the end of string which makes this invisible to user if such mistake is done. 
Alternative approach to this would be to "hard fail" with error that 'newline' was encountered in some variable as that will most probably never be desired and user should be aware of it. 

Main idea for creating this PR is to avoid unnecessary image debugging when 'newline' is accidentally included in any of the variables. 

Please let me know what you think about this change and also let me know there are any changes needed for this to be merged. Thank you!

How to reproduce issue:
~~~
# a="aa
bb"
# docker run --name t56 -e MYSQL_ROOT_PASSWORD="$a" -d mysql:5.6 --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
xxxxxxxx
# docker logs -f xxxxxxxx
~~~

**mysql:5.6**
~~~
...
2019-12-08 08:18:54+00:00 [Note] [Entrypoint]: Temporary server started.
Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.
2019-12-08 08:18:56 96 [Warning] 'proxies_priv' entry '@ root@0b2ef1dce921' ignored in --skip-name-resolve mode.

2019-12-08 08:18:56+00:00 [Note] [Entrypoint]: Stopping temporary server
mysqladmin: unknown option '--bb"'
2019-12-08 08:18:56+00:00 [ERROR] [Entrypoint]: Unable to shut down server.
~~~

**mysql:5.7**
~~~
...
2019-12-08 08:20:09+00:00 [Note] [Entrypoint]: Temporary server started.
Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.

2019-12-08 08:20:17+00:00 [Note] [Entrypoint]: Stopping temporary server
mysqladmin: [ERROR] unknown option '--bb"'
2019-12-08 08:20:17+00:00 [ERROR] [Entrypoint]: Unable to shut down server.
~~~

**mysql:8.0**
~~~
...
2019-12-08 08:22:48+00:00 [Note] [Entrypoint]: Temporary server started.
2019-12-08T08:22:48.929209Z 0 [System] [MY-011323] [Server] X Plugin ready for connections. Socket: '/var/run/mysqld/mysqlx.sock'
Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.

2019-12-08 08:22:54+00:00 [Note] [Entrypoint]: Stopping temporary server
mysqladmin: [ERROR] unknown option '--bb"'.
2019-12-08 08:22:54+00:00 [ERROR] [Entrypoint]: Unable to shut down server.
~~~

After fix the mysql can start properly and following can be seen in logs if there was any newline stripped (including the name of variable from which it was stripped so user can fix it):
~~~
2019-12-08 08:38:22+00:00 [Warn] [Entrypoint]: Stripping newline from MYSQL_ROOT_PASSWORD.
~~~
Hi folks,

We're running 5.7, but looking to update to 8.0.

This is on kubernetes.

We can deploy new versions of 8.0 fine, & still deploy 5.7 (it's 5.7.24 in our image).

But updating mysql 5.7 to 8.0 via killing the k8s pod (kubectl delete -f /path/to/yaml/mysql.yaml), bumping to 8.0 then creating the pod (kubectl create -f /path/to/yaml/mysql.yaml) fails:

>2019-09-15T21:54:56.916797Z 0 [System] [MY-010116] [Server] /usr/sbin/mysqld (mysqld 8.0.17) starting as process 54
2019-09-15T21:54:56.932279Z 1 [System] [MY-011012] [Server] Starting upgrade of data directory.
2019-09-15T21:54:57.483298Z 1 [ERROR] [MY-012574] [InnoDB] Unable to lock ./ibdata1 error: 11
2019-09-15T21:54:58.483874Z 1 [ERROR] [MY-012574] [InnoDB] Unable to lock ./ibdata1 error: 11
2019-09-15T21:54:59.484365Z 1 [ERROR] [MY-012574] [InnoDB] Unable to lock ./ibdata1 error: 11
2019-09-15T21:55:00.484815Z 1 [ERROR] [MY-012574] [InnoDB] Unable to lock ./ibdata1 error: 11
2019-09-15T21:55:01.485368Z 1 [ERROR] [MY-012574] [InnoDB] Unable to lock ./ibdata1 error: 11
2019-09-15T21:55:02.562980Z 1 [ERROR] [MY-012526] [InnoDB] Upgrade after a crash is not supported. This redo log was created with MySQL 5.7.24. Please follow the instructions at http://dev.mysql.com/doc/refman/8.0/en/upgrading.html
2019-09-15T21:55:02.563010Z 1 [ERROR] [MY-012930] [InnoDB] Plugin initialization aborted with error Generic error.
2019-09-15T21:55:02.983739Z 1 [ERROR] [MY-011013] [Server] Failed to initialize DD Storage Engine.
2019-09-15T21:55:02.985081Z 0 [ERROR] [MY-010020] [Server] Data Dictionary initialization failed.
2019-09-15T21:55:02.985267Z 0 [ERROR] [MY-010119] [Server] Aborting
2019-09-15T21:55:02.985815Z 0 [System] [MY-010910] [Server] /usr/sbin/mysqld: Shutdown complete (mysqld 8.0.17)  MySQL Community Server - GPL.

Any pointers?

I guess it's the pod shutdown which is not graceful that needs to be corrected, then the rest is just swapping out the MySQL version as along the lines of: https://dev.mysql.com/doc/refman/8.0/en/docker-mysql-getting-started.html#docker-upgrading
Hi,
I'm using docker for a development environment which has a mysql image.
On my current computer, running arch linux up to date with the default docker setup (`community/docker` and `community/docker-compose`).
All the containers I use locally works fine (a ruby container, a nodejs one, a few dotnet core, memcahed).

I only have issues with mysql that uses all the memory available that, each time I start the container, uses immediately all the memory of my computer.
Even the most basic use of the docker image with no database uses 16GB.

I've tried the docker library mysql image, version 8 and 5.7, the oracle version, the percona version, they all have the same issue.
I've tried mariadb and it works as it's supposed, using 100 something MB.
I've tried the same mysql image with podman and had no issue, it uses around 200 MB.

My version of docker is:
```
Docker version 18.09.8-ce, build 0dd43dd87f
```

Here's the Dockerfile
```
FROM mysql:5.7
ENV MYSQL_ROOT_PASSWORD rootpassword
ENV MYSQL_ALLOW_EMPTY_PASSWORD=yes
ENV MYSQL_DATABASE=database
```

Here's `docker stats`
```
CONTAINER ID        NAME                CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
d66ccdbd03aa        boring_haibt        0.20%               14.27GiB / 15.51GiB   92.00%              1.34kB / 0B         439MB / 299MB       27
```
And top inside the container
```
top - 16:11:06 up  7:32,  0 users,  load average: 0.84, 2.05, 1.42
Tasks:   2 total,   1 running,   1 sleeping,   0 stopped,   0 zombie
%Cpu(s):  5.4 us,  3.0 sy,  0.2 ni, 87.1 id,  3.3 wa,  0.9 hi,  0.2 si,  0.0 st
KiB Mem:  16262332 total, 16100992 used,   161340 free,    10252 buffers
KiB Swap:  8388604 total,  6197880 used,  2190724 free.   443820 cached Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU %MEM     TIME+ COMMAND
    1 mysql     20   0 17.005g 0.013t      0 S   0.0 85.0   0:05.59 mysqld
  172 root      20   0   24152   2336   2000 R   0.0  0.0   0:00.15 top
```

I tried to limit the memory usage of the container using `-m` and mysqld refuses to start when it is bellow 10g with the error:
```
ERROR: mysqld failed while attempting to check config
command was: "mysqld --verbose --help"
```

I found something even weirder.
On the same machine, I run a Windows virtual machine using qemu-kvm.
When this machine is started, the mysql container behave normally. When this machine is not started, it uses all the memory of my computer.

I'm not entirely sure the issue is due to this docker image, but I'm a bit lost and don't know how to troubleshoot this problem further. It seems to be specific to mysql running in a container on docker.
When creating an instance of the `mysql:5.7` container, with the following variables from an env file (using docker compose):

```
root@demo01:/conf/docker# cat envfile.env | grep 'MYSQL'
MYSQL_DATABASE=somevalue
MYSQL_USER=sqluser
MYSQL_PASSWORD=(6T+B\`2@`Bf]cqF
MYSQL_ROOT_PASSWORD=;*{q#'Br9+qxh2\J
MYSQL_ROOT_HOST=%
```

MySQL crashes with the following output in the log:

```
Initializing database
2019-06-15T15:23:59.415039Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2019-06-15T15:24:00.127942Z 0 [Warning] InnoDB: New log files created, LSN=45790
2019-06-15T15:24:00.250132Z 0 [Warning] InnoDB: Creating foreign key constraint system tables.
2019-06-15T15:24:00.310568Z 0 [Warning] No existing UUID has been found, so we assume that this is the first time that this server has been started. Generating a new UUID: 99a9caa4-8f81-11e9-acf7-0242ac140002.
2019-06-15T15:24:00.311781Z 0 [Warning] Gtid table is not ready to be used. Table 'mysql.gtid_executed' cannot be opened.
2019-06-15T15:24:00.312706Z 1 [Warning] root@localhost is created with an empty password ! Please consider switching off the --initialize-insecure option.
Database initialized
Initializing certificates
Generating a RSA private key
.................................................................+++++
.................................................................................+++++
unable to write 'random state'
writing new private key to 'ca-key.pem'
-----
Generating a RSA private key
...........+++++
..........................................+++++
unable to write 'random state'
writing new private key to 'server-key.pem'
-----
Generating a RSA private key
.........................................................................+++++
................+++++
unable to write 'random state'
writing new private key to 'client-key.pem'
-----
Certificates initialized
MySQL init process in progress...
2019-06-15T15:24:06.640728Z 0 [Warning] TIMESTAMP with implicit DEFAULT value is deprecated. Please use --explicit_defaults_for_timestamp server option (see documentation for more details).
2019-06-15T15:24:06.648939Z 0 [Note] mysqld (mysqld 5.7.26) starting as process 89 ...
2019-06-15T15:24:06.674792Z 0 [Note] InnoDB: PUNCH HOLE support available
2019-06-15T15:24:06.674827Z 0 [Note] InnoDB: Mutexes and rw_locks use GCC atomic builtins
2019-06-15T15:24:06.674838Z 0 [Note] InnoDB: Uses event mutexes
2019-06-15T15:24:06.674849Z 0 [Note] InnoDB: GCC builtin __atomic_thread_fence() is used for memory barrier
2019-06-15T15:24:06.674859Z 0 [Note] InnoDB: Compressed tables use zlib 1.2.11
2019-06-15T15:24:06.674870Z 0 [Note] InnoDB: Using Linux native AIO
2019-06-15T15:24:06.675462Z 0 [Note] InnoDB: Number of pools: 1
2019-06-15T15:24:06.675674Z 0 [Note] InnoDB: Using CPU crc32 instructions
2019-06-15T15:24:06.691483Z 0 [Note] InnoDB: Initializing buffer pool, total size = 128M, instances = 1, chunk size = 128M
2019-06-15T15:24:06.751571Z 0 [Note] InnoDB: Completed initialization of buffer pool
2019-06-15T15:24:06.765430Z 0 [Note] InnoDB: If the mysqld execution user is authorized, page cleaner thread priority can be changed. See the man page of setpriority().
2019-06-15T15:24:06.779958Z 0 [Note] InnoDB: Highest supported file format is Barracuda.
2019-06-15T15:24:06.813040Z 0 [Note] InnoDB: Creating shared tablespace for temporary tables
2019-06-15T15:24:06.817139Z 0 [Note] InnoDB: Setting file './ibtmp1' size to 12 MB. Physically writing the file full; Please wait ...
2019-06-15T15:24:06.906716Z 0 [Note] InnoDB: File './ibtmp1' size is now 12 MB.
2019-06-15T15:24:06.909770Z 0 [Note] InnoDB: 96 redo rollback segment(s) found. 96 redo rollback segment(s) are active.
2019-06-15T15:24:06.909789Z 0 [Note] InnoDB: 32 non-redo rollback segment(s) are active.
2019-06-15T15:24:06.910300Z 0 [Note] InnoDB: Waiting for purge to start
2019-06-15T15:24:06.960487Z 0 [Note] InnoDB: 5.7.26 started; log sequence number 2524985
2019-06-15T15:24:06.961302Z 0 [Note] Plugin 'FEDERATED' is disabled.
2019-06-15T15:24:06.967999Z 0 [Note] InnoDB: Loading buffer pool(s) from /var/lib/mysql/ib_buffer_pool
2019-06-15T15:24:06.971097Z 0 [Note] InnoDB: Buffer pool(s) load completed at 190615 15:24:06
2019-06-15T15:24:06.988611Z 0 [Note] Found ca.pem, server-cert.pem and server-key.pem in data directory. Trying to enable SSL support using them.
2019-06-15T15:24:06.990031Z 0 [Warning] CA certificate ca.pem is self signed.
2019-06-15T15:24:07.003237Z 0 [Warning] Insecure configuration for --pid-file: Location '/var/run/mysqld' in the path is accessible to all OS users. Consider choosing a different directory.
2019-06-15T15:24:07.067563Z 0 [Note] Event Scheduler: Loaded 0 events
2019-06-15T15:24:07.068076Z 0 [Note] mysqld: ready for connections.
Version: '5.7.26'  socket: '/var/run/mysqld/mysqld.sock'  port: 0  MySQL Community Server (GPL)
Warning: Unable to load '/usr/share/zoneinfo/iso3166.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/leap-seconds.list' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone.tab' as time zone. Skipping it.
Warning: Unable to load '/usr/share/zoneinfo/zone1970.tab' as time zone. Skipping it.
ERROR at line 5: Unknown command '\J'.
```
A standard installation of MySQL (both for Oracle MySQL and Percona Server for MySQL) will create the following directories:
- `/var/lib/mysql`
- `/var/lib/mysql-files`; default directory used for `secure_file_priv` is `/var/lib/mysql-files`, whereas this is disabled in this image for some reason.
- `/var/lib/mysql-keyring`; default `keyring_file_data` is `/var/lib/mysql-keyring/keyring`, which means that enabling the plugin immediately causes a warning and forces setting the keyring to be part of the MySQL datadir or similar

Additionally, the permissions for the datadir are inconsistent. Here are the default permissions for the installation:
```
=> docker exec oracle-mysql-8.0 ls -ld /var/lib/mysql{,-files,-keyring}
drwxr-x--- 1 mysql mysql 604 May  7 11:53 /var/lib/mysql
drwxr-x--- 1 mysql mysql   0 May  7 11:53 /var/lib/mysql-files
drwxr-x--- 1 mysql mysql   0 Jan 25 23:03 /var/lib/mysql-keyring
```
Here is the permission set for this image:
```
=> docker exec docker-mysql-8.0 ls -ld /var/lib/mysql
drwxr-xr-x 1 mysql mysql 522 May  7 12:09 /var/lib/mysql
```


if the $MYSQL_DATABASE environment variable contains underscores ("_")
they are now escaped, so that the GRANT matches exactly the given
database name.
http_proxy can be defined as build argument when building the
container behind a proxy.
Since version 2.1 of GnuPG, dirmngr takes care of accessing keyservers,
but dirmngr does not honor http_proxy unless it is configured to do so.
Because of this,  building the container behind a firewall fails since the base image
was switched from debian/jessie to debian/stretch.
Closes #379