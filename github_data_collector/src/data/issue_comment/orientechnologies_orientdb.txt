### OrientDB Version: 3.0.26
### Java Version: openJDK 11
### OS: MacOS 

## Issue:

When performing a count with an ORDER BY. If no rows match, instead of getting a result with a count field set to 0, we get an empty result set.  This is similar to #8280 and #8621 which I had previously reported.

## Expected behavior  
A count result of 0 should be returned.

## Actual behavior  
An empty result set is returned.

## Steps to reproduce

Create the schema:
```SQL
CREATE CLASS Test;
CREATE Property Test.id String;
``` 

### Test 1 (Works)
```SQL
SELECT count(*) as count FROM Test;
```

```JSON
    "result": [
        {
            "@type": "d",
            "@version": 0,
            "count": 0,
            "@fieldTypes": "count=l"
        }
    ]
```

### Test 2 (Doesn't Work)
```SQL
SELECT count(*) as count FROM Test ORDER BY id ASC;
```

```JSON
    "result": [
        
    ]
```

### OrientDB Version: orientdb-3.0.21  
### Java Version: <version here>  
### OS: Linux 2.6.32-696.16.1.el6.x86_64 x86_64

## Expected behavior  
No ERROR message

## Actual behavior  
OrientDB prints ERROR message.  

## Steps to reproduce  
1. connect to existing OrientDB database.
2. OrientDB prints this ERROR message for **all indexed fields**. These ERROR messages are printed every time client is connecting to the database. It seems the database is still working, and client still can get data by searching.

**Question:
What is the meaning of this ERROR? What shall I do to solve the problem behind this ERROR?**

_20/01/17 08:35:26 ERROR OIndexManagerRemote: Error on loading of index by configuration: {type:UNIQUE,name:ORole.name,indexVersion:2,indexDefinition:{className:ORole,field:name,keyType:STRING,collate:ci,nullValuesIgnored:false},indexDefinitionClass:com.orientechnologies.orient.core.index.OPropertyIndexDefinition,clusters:[1],algorithm:CELL_BTREE,valueContainerAlgorithm:NONE}
java.lang.IllegalArgumentException: COLLATE cannot be null
	at com.orientechnologies.orient.core.index.OAbstractIndexDefinition.setCollate(OAbstractIndexDefinition.java:47)
	at com.orientechnologies.orient.core.index.OAbstractIndexDefinition.setCollate(OAbstractIndexDefinition.java:55)
	at com.orientechnologies.orient.core.index.OPropertyIndexDefinition.serializeFromStream(OPropertyIndexDefinition.java:174)
	at com.orientechnologies.orient.core.index.OPropertyIndexDefinition.fromStream(OPropertyIndexDefinition.java:139)
	at com.orientechnologies.orient.core.type.ODocumentWrapperNoClass.fromStream(ODocumentWrapperNoClass.java:44)
	at com.orientechnologies.orient.core.index.OIndexAbstract.loadMetadataInternal(OIndexAbstract.java:127)
	at com.orientechnologies.orient.core.index.OIndexManagerRemote.fromStream(OIndexManagerRemote.java:162)
	at com.orientechnologies.orient.core.type.ODocumentWrapperNoClass.reload(ODocumentWrapperNoClass.java:66)
	at com.orientechnologies.orient.core.index.OIndexManagerAbstract.load(OIndexManagerAbstract.java:104)
	at com.orientechnologies.orient.core.db.document.OSharedContextRemote.load(OSharedContextRemote.java:33)
	at com.orientechnologies.orient.core.db.document.ODatabaseDocumentRemote.loadMetadata(ODatabaseDocumentRemote.java:278)
	at com.orientechnologies.orient.core.db.document.ODatabaseDocumentRemote.initAtFirstOpen(ODatabaseDocumentRemote.java:263)
	at com.orientechnologies.orient.core.db.document.ODatabaseDocumentRemote.internalOpen(ODatabaseDocumentRemote.java:229)
	at com.orientechnologies.orient.core.db.OrientDBRemote.open(OrientDBRemote.java:86)
	at com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx.open(ODatabaseDocumentTx.java:898)
	at com.tinkerpop.blueprints.impls.orient.OrientBaseGraph.openOrCreate(OrientBaseGraph.java:2016)
	at com.tinkerpop.blueprints.impls.orient.OrientBaseGraph.<init>(OrientBaseGraph.java:191)
	at com.tinkerpop.blueprints.impls.orient.OrientGraphNoTx.<init>(OrientGraphNoTx.java:66)_
	
### OrientDB Version: 3.0.23
### Java Version: OpenJDK 11.0.5 
### OS: Debian Buster  

## Expected behavior  
Start a 2 node distributed cluster. When a node goes down, writes should be redirected to the node that is up.

## Actual behavior  
Writes cannot be performed on the cluster anymore.

com.orientechnologies.orient.server.distributed.ODistributedException: No enough nodes online to execute the operation, online nodes:[master2]

## Steps to reproduce  
1) Start a 2 node cluster(master1, master2) using dserver.sh.
2) Close dserver.sh from from the first server, master1.
3) Go to OrientDB Studio using the IP of the healthy node.
4) Edit a node. For example, edit the country name of a node from the demo database.

The default-distributed-db-config.json on both servers:
```
{
  "autoDeploy": true,
  "readQuorum": 1,
  "writeQuorum": "majority",
  "executionMode": "undefined",
  "readYourWrites": true,
  "newNodeStrategy": "dynamic",
  "servers": {
  },
  "clusters": {
    "internal": {
    },
    "*": {
      "servers": []
    }
  }
}
```

The issue relates to the closed issue [1], but the solutions provided did not solve the problem.
Reads work as expected.

[1] [https://github.com/orientechnologies/orientdb/issues/6918](url)
### OrientDB Version
3.0.26

### Java Version
Java(TM) SE Runtime Environment (build 1.8.0_181-b13)
Java HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)

### OS
Linux insightcom 4.15.0-33-generic #36-Ubuntu SMP Wed Aug 15 16:00:05 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux

## Expected behavior  

No error.

## Actual behavior  

2020-01-15 05:55:10 5.c.s.a.wk [ERROR] exception occurred getting message: {fecd35f41359cfefc114ab54f4362822} from database.
com.orientechnologies.orient.core.exception.OStorageException: Error on commit^M
        DB name="5240be8e-4617-4d20-9062-2f4bca0ff92e"
        at com.orientechnologies.orient.client.remote.OStorageRemote.baseNetworkOperation(OStorageRemote.java:361)
        at com.orientechnologies.orient.client.remote.OStorageRemote.networkOperationRetryTimeout(OStorageRemote.java:227)
        at com.orientechnologies.orient.client.remote.OStorageRemote.networkOperationNoRetry(OStorageRemote.java:257)
        at com.orientechnologies.orient.client.remote.OStorageRemote.commit(OStorageRemote.java:1032)
        at com.orientechnologies.orient.core.db.document.ODatabaseDocumentAbstract.internalCommit(ODatabaseDocumentAbstract.java:2721)
        at com.orientechnologies.orient.core.tx.OTransactionOptimistic.doCommit(OTransactionOptimistic.java:533)
        at com.orientechnologies.orient.core.tx.OTransactionOptimistic.commit(OTransactionOptimistic.java:103)
        at com.orientechnologies.orient.core.db.document.ODatabaseDocumentAbstract.commit(ODatabaseDocumentAbstract.java:2194)
        at com.orientechnologies.orient.core.db.document.ODatabaseDocumentAbstract.commit(ODatabaseDocumentAbstract.java:2164)
        at com.orientechnologies.orient.core.db.document.ODatabaseDocumentTx.commit(ODatabaseDocumentTx.java:735)
        at com.tinkerpop.blueprints.impls.orient.OrientTransactionalGraph.commit(OrientTransactionalGraph.java:184)
       ....
Caused by: java.lang.ClassCastException: null

## Steps to reproduce  

Occurs in production.


### OrientDB Version: 3.0.14
### Java Version: OpenJDK 11.0.2
### OS: Windows/Mac

## Expected behavior  
No exception 

## Actual behavior  
Exception due to use of sun.misc.* package

## Steps to reproduce  
https://github.com/jbake-org/jbake/issues/617
https://github.com/jmcgarr/jmcgarr.github.io/issues/3

JDK 11 and higer removal of sun.misc.* package


### OrientDB Version: 3.0.26  
### Java Version: https://github.com/AdoptOpenJDK/openjdk8-upstream-binaries/releases/download/jdk8u232-b09
### OS: Debian 10.2
### Docker: Docker image 3.0.26

## Need to be done

Currently I am always live patching the orientdb image but this is unnecessary.
Could you please update the following libs.

* Update hazelcast 3.10.6 -> hazelcast 3.11
* Add hazelcast-kubernetes 1.5.1

The Dockerfile I used and how I have accomplished live patching.

```Dockerfile
FROM orientdb:3.0.26

# The patch Hazelcast Versions.
ENV KUBERNETES_HAZELCAST_VERSION="1.5.1"
ENV HAZELCAST_VERSION="3.11"
# Hazelcast Version to be patched
ENV ORIENTDB_HAZELCAST_VERSION="3.10.6"
# Default Home for Orientdb
ENV ORIENTDB_HOME="/orientdb"


# Remove current hazelcast and add own hazelcast with kubernetes support
RUN rm ${ORIENTDB_HOME}/lib/hazelcast-${ORIENTDB_HAZELCAST_VERSION}.jar" && \
    wget \
     -nv \
     --directory-prefix="${ORIENTDB_HOME}/lib/" \
     "http://repo1.maven.org/maven2/com/hazelcast/hazelcast-kubernetes/${KUBERNETES_HAZELCAST_VERSION}/hazelcast-kubernetes-${KUBERNETES_HAZELCAST_VERSION}.jar" && \
    wget \
     -nv \
     --directory-prefix="${ORIENTDB_HOME}/lib/" \
     "http://repo1.maven.org/maven2/com/hazelcast/hazelcast/${HAZELCAST_VERSION}/hazelcast-${HAZELCAST_VERSION}.jar"
```

## Expected behavior 
This config should work but the discovery module is missing.

```xml
<?xml version="1.0" encoding="UTF-8"?>
<- ~ Copyright (c) 2008-2012, Hazel Bilisim Ltd. All Rights Reserved. ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); ~ you may
  not use this file except in compliance with the License. ~ You may obtain
  a copy of the License at ~ ~ http://www.apache.org/licenses/LICENSE-2.0 ~
  ~ Unless required by applicable law or agreed to in writing, software ~ distributed
  under the License is distributed on an "AS IS" BASIS, ~ WITHOUT WARRANTIES
  OR CONDITIONS OF ANY KIND, either express or implied. ~ See the License for
  the specific language governing permissions and ~ limitations under the License. -->

<hazelcast xsi:schemaLocation="http://www.hazelcast.com/schema/config hazelcast-config-3.11.xsd" 
    xmlns="http://www.hazelcast.com/schema/config" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <group>
        <name>name</name>
        <password>password</password>
    </group>
    <properties>
        <property name="hazelcast.discovery.enabled">true</property>
    </properties>
    <network>
        <port auto-increment="false">2434</port>
        <join>
            <multicast enabled="false"/>
            <tcp-ip enabled="false"/>
            <discovery-strategies>
                <discovery-strategy enabled="true" class="com.hazelcast.kubernetes.HazelcastKubernetesDiscoveryStrategy">
                    <properties>
                        <property name="namespace">namespace</property>
                        <property name="service-name">service</property>
                        <property name="service-port">2434</property>
                        <property name="ca-certificate"></property>
                    </properties>
                </discovery-strategy>
            </discovery-strategies>
        </join>
    </network>
</hazelcast>
```

## Actual behavior  
The provided config is not working for kubernetes hazelcast setup.
It is needed because it makes the cluster more stable than using the current behavior of hard coding cluster members.

## Steps to reproduce  
Configure a three node cluster setup with the helm chart from here
[https://github.com/helm/charts/tree/master/incubator/orientdb](https://github.com/helm/charts/tree/master/incubator/orientdb)
Delete one node and wait. Restart the node. The node is not able to join again.
This is fixed when using hazelcast-kubernetes.

### OrientDB Version: <3.0.24>  
### Java Version: <openjdk version "1.8.0_222>  
### OS: <Ubuntu 14.04.6>  

## Expected behavior  
I am storing list of schedules in embedded map as property in Edge type. I need to append the schedule whenever new schedule updated between two vertex, The schedule is for pick up and drop-off of kids. I am using orientjs library to update the edge properties.

The update query is below
UPDATE EDGE Picks_From_Home SET SCHEDULE[“01/Apr/2020”,“02/Apr/2020”,“03/Apr/2020”,“06/Apr/2020”,“07/Apr/2020”,“08/Apr/2020”,“09/Apr/2020”,“10/Apr/2020”,“13/Apr/2020”,“14/Apr/2020”,“15/Apr/2020”,“16/Apr/2020”,“17/Apr/2020”,“20/Apr/2020”,“21/Apr/2020”,“22/Apr/2020”,“23/Apr/2020”,“24/Apr/2020”,“27/Apr/2020”,“28/Apr/2020”,“29/Apr/2020”,“30/Apr/2020”] =“7” where @rid IN[#43:23,#44:23].

{
“12/Mar/2020”: “7”,
“18/Mar/2020”: “7”,
“05/Mar/2020”: “7”,
“25/Mar/2020”: “7”,
“31/Mar/2020”: “7”,
“19/Mar/2020”: “7”,
“24/Mar/2020”: “7”,
“06/Mar/2020”: “7”,
“09/Mar/2020”: “7”,
“02/Mar/2020”: “7”,
“30/Mar/2020”: “7”,
“11/Mar/2020”: “7”,
“23/Mar/2020”: “7”,
“04/Mar/2020”: “7”,
“20/Mar/2020”: “7”,
“10/Mar/2020”: “7”,
“16/Mar/2020”: “7”,
“27/Mar/2020”: “7”,
“03/Mar/2020”: “7”,
“17/Mar/2020”: “7”,
“26/Mar/2020”: “7”,
“13/Mar/2020”: “7”,
**### _“01/Apr/2020”: “7”,
“02/Apr/2020”: “7”,
“03/Apr/2020”: “7”,
“06/Apr/2020”: “7”,
“07/Apr/2020”: “7”,
“08/Apr/2020”: “7”,
“09/Apr/2020”: “7”,
“10/Apr/2020”: “7”,
“13/Apr/2020”: “7”,
“14/Apr/2020”: “7”,
“15/Apr/2020”: “7”,
“16/Apr/2020”: “7”,
“17/Apr/2020”: “7”,
“20/Apr/2020”: “7”,
“21/Apr/2020”: “7”,
“22/Apr/2020”: “7”,
“23/Apr/2020”: “7”,
“24/Apr/2020”: “7”,
“27/Apr/2020”: “7”,
“28/Apr/2020”: “7”,
“29/Apr/2020”: “7”,
“30/Apr/2020”: “7”_**
}

I am able to achieve the expected behavior from studio but from orientjs does not

## Actual behavior  
{“12/Mar/2020”:“7”,
“18/Mar/2020”:“7”,
“05/Mar/2020”:“7”,
“25/Mar/2020”:“7”,
“31/Mar/2020”:“7”,
“19/Mar/2020”:“7”,
“24/Mar/2020”:“7”,
“06/Mar/2020”:“7”,
“09/Mar/2020”:“7”,
“02/Mar/2020”:“7”,
“30/Mar/2020”:“7”,
“11/Mar/2020”:“7”,
“23/Mar/2020”:“7”,
“04/Mar/2020”:“7”,
“20/Mar/2020”:“7”,
“10/Mar/2020”:“7”,
“16/Mar/2020”:“7”,
“27/Mar/2020”:“7”,
“03/Mar/2020”:“7”,
“17/Mar/2020”:“7”,
“26/Mar/2020”:“7”,
“13/Mar/2020”:“7”,
_"[“01/Apr/2020”,“02/Apr/2020”,“03/Apr/2020”,“06/Apr/2020”,“07/Apr/2020”,“08/Apr/2020”,“09/Apr/2020”,“10/Apr/2020”,“13/Apr/2020”,“14/Apr/2020”,“15/Apr/2020”,“16/Apr/2020”,“17/Apr/2020”,“20/Apr/2020”,“21/Apr/2020”,“22/Apr/2020”,“23/Apr/2020”,“24/Apr/2020”,“27/Apr/2020”,“28/Apr/2020”,“29/Apr/2020”,“30/Apr/2020”]
":“7”}_

## Steps to reproduce  
Create a two Vertex with properties first name , last name. Create a edge with property embedded map with value data type 'string'. Create a link between two vertex using edge along with value mentioned above. Try to update the edge with query mentioned in the problem statement>  
<An SQL script to reproduce the problem or a JUnit test case will increase **A LOT** the chance to have a quick fix


### OrientDB Version: 3.0.26  
### Java Version: OpenJDK 11
### OS:Linux  

## Expected behavior  
Traversal of a property will only traverse that property

## Actual behavior  
Unpredictable traversal is happening.

## Steps to reproduce  

### 1. Create Classes
```SQL
CREATE CLASS Model;
CREATE PROPERTY Model.id String;

CREATE CLASS DataValue;
CREATE PROPERTY DataValue.id String;

CREATE CLASS ObjectValue EXTENDS DataValue;
CREATE PROPERTY ObjectValue.children LINKMAP DataValue;

CREATE CLASS ArrayValue EXTENDS DataValue;
CREATE PROPERTY ArrayValue.children LINKLIST DataValue;

CREATE CLASS StringValue EXTENDS DataValue;
CREATE PROPERTY StringValue.value String;

CREATE PROPERTY DataValue.model LINK Model;
CREATE PROPERTY Model.data LINK ObjectValue;
```

### 2. Create Data
```SQL
LET model = INSERT INTO Model SET id = "model";

LET objectString = INSERT INTO StringValue SET id="objectString", model=$model[0], value="objectString";
LET arrayString = INSERT INTO StringValue SET id="arrayString", model=$model[0], value="arrayString";

LET objectChild = INSERT INTO ObjectValue SET id="objectChild", model=$model[0], children={};
LET arrayChild = INSERT INTO ArrayValue SET id="arrayChild", model=$model[0], children=[];
LET stringChild = INSERT INTO StringValue SET id="stringChild", model=$model[0], value="stringChild";

LET root = INSERT INTO ObjectValue SET id="root", model=$model[0], children={};

UPDATE ObjectValue SET children.objectChild = $objectChild[0] WHERE id = "root";
UPDATE ObjectValue SET children.arrayChild = $arrayChild[0] WHERE id = "root";
UPDATE ObjectValue SET children.stringChild = $stringChild[0] WHERE id = "root";

UPDATE ObjectValue SET children.objectString = $objectString[0] WHERE id = "objectChild";

UPDATE ArrayValue SET children = [$arrayString[0]] WHERE id = "arrayChild";

UPDATE Model SET data = $root[0];
```

### 3. Inspect results

### Step 1
Just SELECT the data.
```SQL
SELECT FROM DataValue;
```
<img width="817" alt="1-select_data_values" src="https://user-images.githubusercontent.com/1812291/71644967-a7ca7000-2c96-11ea-93c4-0b05e79a1ab3.png">

We see all of the DataValues properly created.

### Step 2
Try to traverse all children from the root ObjectValue.
```SQL
TRAVERSE children FROM (SELECT FROM DataValue WHERE id = "root");
```
<img width="816" alt="2-traverse 'children' From Root" src="https://user-images.githubusercontent.com/1812291/71644995-e4966700-2c96-11ea-8bf0-6e64f67bd744.png">

As mentioned in #9099, this will not traverse the root elements `children` LINKMAP.

### Step 3
Try to traverse using `children.values()` from the root ObjectValue.
```SQL
TRAVERSE children.values() FROM (SELECT FROM DataValue WHERE id = "root");
```
<img width="812" alt="3-traverse_children_values_from_root" src="https://user-images.githubusercontent.com/1812291/71645021-35a65b00-2c97-11ea-98a3-e8fe4ebfabd9.png">

The traversal through the LINKMAP works. But there are two issues. First, why do we have the `Model` object in the traversal? It is not traversable via the `children` property. Also, the `arrayString` value which is a child of the `arrayChild` ArrayValue is missing.


### Step 4
Since there seems to be something odd with the ArrayValue, try to traverse using `children.values()` from the arrayChild ArrayValue.
```SQL
TRAVERSE children.values() FROM (SELECT FROM DataValue WHERE id = "arrayChild");
```
<img width="814" alt="4_traverse_children_values_from_array" src="https://user-images.githubusercontent.com/1812291/71645045-903fb700-2c97-11ea-9ef3-c72c1dc0dbb0.png">

Here we directly see that the `Model` is coming from the traversal of the ArrayValue. And that the ArrayValue's children are not properly being traversed.

### Step 5
Let's just verify that a traversal of the normal `children` properly will work from the `arrayChild`.
```SQL
TRAVERSE children FROM (SELECT FROM DataValue WHERE id = "arrayChild");
```
<img width="813" alt="5_traverse_children_from_array" src="https://user-images.githubusercontent.com/1812291/71645060-d39a2580-2c97-11ea-8659-d20655fe5ffe.png">

The `Model` is gone and we do get the StringValue.

### Step 6
Try traversing on both `children` and `children.values()` from the root;
```SQL
TRAVERSE children, children.values() FROM (SELECT FROM DataValue WHERE id = "root");
```
<img width="809" alt="6_traverse_children_and_values_from_root" src="https://user-images.githubusercontent.com/1812291/71645067-047a5a80-2c98-11ea-8918-9fc8fe1b4078.png">

Now we get all the values we WANT, but we are still incorrectly getting the `Model`.

### Step 7
Use an additional SELECT to filter on the DataValue class.
```SQL
SELECT FROM (TRAVERSE children, children.values() FROM (SELECT FROM DataValue WHERE id = "root")) WHERE @class INSTANCEOF "DataValue";
```
<img width="816" alt="7_filter_traversal_on_datavalue_class" src="https://user-images.githubusercontent.com/1812291/71645075-312e7200-2c98-11ea-9558-2157fa92c0be.png">

Now we finally get what we wanted.

### 4. Discussion
This seems a bit messy, and probably a bit inefficient. We have multiple projections, and an extra SELECT. Fixing #9099, may avoid this problem because we would not have to call `.values()` in the first place.  But this still seems like a bug.

### OrientDB Version: 3.0.26 
### Java Version: OpenJDK 11
### OS: Linux  

## Expected behavior  
Ability to use TRAVERSE in the Document API through a LINKMAP.

## Actual behavior  
Only the initial entry point node is returned. 

## Steps to reproduce  
1. Create the DataValue class
```SQL
CREATE CLASS DataValue;
CREATE PROPERTY DataValue.id String;
CREATE PROPERTY DataValue.children LINKMAP DataValue;
```

2. Insert Data and then `TRAVERSE`
```SQL
LET r1 = INSERT INTO DataValue SET id="r1", children={};
LET r2 = INSERT INTO DataValue SET id="r2", children={};

LET r1c1 = INSERT INTO DataValue SET id="r1c1", children={};
LET r1c2 = INSERT INTO DataValue SET id="r1c2", children={};
LET r1c2c1 = INSERT INTO DataValue SET id="r1c2c1", children={};
LET r1c2c2 = INSERT INTO DataValue SET id="r1c2c2", children={};

LET r2c1 = INSERT INTO DataValue SET id="r2c1", children={};
LET r2c2 = INSERT INTO DataValue SET id="r2c2", children={};

UPDATE DataValue SET children.c1 = $r1c1[0] WHERE id = "r1";
UPDATE DataValue SET children.c2 = $r1c2[0] WHERE id = "r1";

UPDATE DataValue SET children.c1 = $r1c2c1[0] WHERE id = "r1c2";
UPDATE DataValue SET children.c2 = $r1c2c2[0] WHERE id = "r1c2";

UPDATE DataValue SET children.c1 = $r2c1[0] WHERE id = "r2";
UPDATE DataValue SET children.c2 = $r2c2[0] WHERE id = "r2";

TRAVERSE children FROM (SELECT FROM DataValue WHERE id = "r1");
```

Only the r1 element is returned. 
```JSON
{
    "result": [
        {
            "@type": "d",
            "@rid": "#40:0",
            "@version": 3,
            "@class": "DataValue",
            "children": {
                "c1": "#34:1",
                "c2": "#35:1"
            },
            "id": "r1"
        }
    ],
    "notification": "Query executed  in 0.021 sec. Returned 1 record(s)"
}
```

Is it not possible to TRAVERSE through links in a LINKMAP? I have not gone back and verified, but I thought this was possible in a previous 3.0.X version.
### OrientDB Version: 3.0.26 
### Java Version: 1.8.0  - 1.11
### OS: ubuntu 18.10

## Expected behavior  
I saved a Vertex ( which already had relationships ) and the relation should have persisted ( IMHO ).

## Actual behavior  
the relationship is still there but is empty ( has no in or out vertex ids ).   And I can delete the relationship and recreate it.

I'm getting 
       `Relationship content is invalid on field  ...`

## Steps to reproduce  
not quite sure
Would just like to know how to proceed in removing the broken link and then I can recreate it.
