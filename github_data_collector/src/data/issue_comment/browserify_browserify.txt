- [ ] node@10 compatible streams via `readable-streams@3`
- [ ] `module-deps` module replacements without redirect module https://github.com/browserify/browserify/blob/e52476bdf6259a238c6d944dde6a9d6c85aad631/index.js#L718-L720
- [ ] better hook for plugins to interact with browserify options before being consumed internally
- [ ] support for parsing "more modern js" out of the box
- [ ] resolve all `npm audit` reports + add CI task
- [ ] document explicit platform support for (1) browserify (2) bundles
- [ ] public + documented API for replacing modules deep in the graph (can currently do it via js by mutating the builtins obj [example](https://github.com/dckc/plaido/blob/2a99dcb6874ab11877bcb5adf0f2512ba612dfce/build.js#L20))
- [ ] drop older platform support to make these improvements easier ^

this is my personal list, happy to add others
This is a breaking change (see https://github.com/nodejs/readable-stream#version-3xx)

Fixes #1880 
Working with javascript library from [here](https://github.com/mattboldt/typed.js/blob/master/lib/typed.js). It works as expected , when used without browserify, as it creates global Typed function in browser. But when used browserify with gulp. It's not working as expected, as it not creating global function "Typed", when loaded in browser, throwing error Typed is not function.There also problems when used for other jQuery plugins.

in entry script I used
`import 'typed.js/lib/typed.js';`

### I am trying to bundle up imagemin but i get : 
**Error: Parsing file** C:\...\node_modules\fast-glob\out\readers\stream.js: 
### Unexpected token (16:10)

my main.js file:
```
const imagemin = require('imagemin');
const imageminJpegtran = require('imagemin-jpegtran');
const imageminPngquant = require('imagemin-pngquant');
(async () => {
    const files = await imagemin(['images/*.{jpg,png}'], {
        destination: 'build/images',
        plugins: [
            imageminJpegtran(),
            imageminPngquant({
                quality: [0.6, 0.8]
            })
        ]
    });
 
    console.log(files);
    //=> [{data: <Buffer 89 50 4e …>, path: 'build/images/foo.jpg'}, …]
})();
```
An alternative that uses [`require('fast-safe-stringify').stable`](https://github.com/davidmarkclements/fast-safe-stringify) instead of json-stable-stringify.
Fixes #1828.
I'm creating a three.js loader, but there's a lot of sweet stuff from npm which I'd really like to leverage. Since I want as few dependencies as possible it would seem the best approach would be to use ES6 export / import, but that doesn't seem to be possible currently. I understand that the current system makes that hard, but it would seem like the generated format lends itself to just add a root level script at the bottom. The generated function would wrap up all the scripts as it currently does, but doesn't insert the code for the root script, instead it wraps the require function with the root module to module-id mappings which previously was inserted straight into the wrapping function, and returns that wrapped assigned to require. Super confusing, but essentially a bundle file would look like:

```
// Something which looks very close to what's currently being generated, but instead assigned to require
let require = (function () { function r(e, n, t) { ... },{},[]);
// Root level can now use require as per usual & create an exposed API which can be imported
let some_dep = require('some-dependency');
function foo_using_dep( arg ) { ... }
function bar_using_dep( arg ) { ... }
export { foo_using_dep, bar_using_dep };
```
Would there be any demand for such a feature or am I perhaps missing something? I'm far from an expert on neither javascript nor node.
the URL module is built in in node, but when you have browserify in you stack that means nodejs great url module is replaced but non compatible trash making life very miserable...

Please change that requirement to the module that does not break nodejs functionality
Hi ,

I am creating a JWT creation with node packages , but as my website is made with php I can not run nodejs and php at the same time, so I did RND , and I came to know about Browserify, It great but I am having a issue .

like I need two variables of node_modules 

var **jwt** = require('jsonwebtoken');
var **uuid** = require('uuid/v4');


but when I used browserify, packages are added with "$"., so my code is giving me **ReferenceError: uuid is not defined**

var _ = require('lodash');
var $ = require('jquery');
var $ = require('jsonwebtoken');
var $ = require('uuid/v4');

May you please help me to get resolved it.
If you run browserify with an invalid command line option, it displays a chunk of JS that would have thrown a module not found error if run.
It would save quite a bit of mental effort if it just told the user that the option is wrong.

```
$ browserify --foo file.js 
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({},{},[]);
```
When importing an external module twice, using both relative and absolute (project) path, the module resolution path differs in slash prefix:

```js
Browserify()
    .external("a.js")
    .add(new Readable({
        read () {
            this.push(`
                require("a.js");
                require("./a.js");
            `);
            this.push(null);
        }
    }))
    .bundle()
    .pipe(process.stdout);
```

results in:

```js
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
    require("a.js");
    require("./a.js");
},{"./a.js":"/a.js","a.js":"a.js"}]},{},[1]);
```

where the resolved paths are `/a.js` and `a.js`, causing one of them to not resolve to the target module on runtime.

One solution would be to [not prefix relative imports](https://github.com/dwelle/browserify/commit/61e0d96b80a4812962726e0b5b1e0542ff5c16ff) with `/` (I couldn't find out why it was actually introduced).