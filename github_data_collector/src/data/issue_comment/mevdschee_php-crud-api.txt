Hi, 

Im Laravel 5.8 and when I call a view I get error: 9999

Example: 

![image](https://user-images.githubusercontent.com/6060664/72156988-9ae40580-3395-11ea-9b11-ce88acd16fe2.png)


Inside the Log about request... it show:

![image](https://user-images.githubusercontent.com/6060664/72156868-4fc9f280-3395-11ea-91b1-c404f30c691c.png)


I am very happy go get data with JOINS from two tables (https://github.com/mevdschee/php-crud-api#joins).
Let's assume we take the given Blogs example:

```{
    "records":[
        {
            "id": 1,
            "title": "Hello world!",
            "content": "Welcome to the first post.",
            "created": "2018-03-05T20:12:56Z",
            "comments": [
                {
                    id: 1,
                    post_id: 1,
                    user_id: {
                        id: 1,
                        username: "mevdschee",
                        phone: null,
                    },
                    message: "Hi!"
                },
                {
                    id: 2,
                    post_id: 1,
                    user_id: {
                        id: 1,
                        username: "mevdschee",
                        phone: null,
                    },
                    message: "Hi again!"
                }
            ],
            "tags": []
        },```

Now I would like to send an update for id=1 and update comment-id=1 with message: "Hi all, I love PHP-CRUD-API :-)" and at the same time delete comment.id=2. 
Can I use the JOIN here as well for updating/posting/deleting nested items?

I have finally figured out how to authenticate with auth0, getting a jwt token, and getting access to the php-crud-api. However, how am I able to limit the permissions on tables users have access to using scopes passed along in their token? 

For example, if a user as a permission scope to read:customers
I would like to limit their ability to only read the "customers" table, but not create, update, or delete.

If another user has a permission scope to read:customers, update:customers, create:customers, and delete:customers
I would like for them to be able to have full permission to the table called "customers"

Is this something I can implement with this API?
Hi,

is is possible to group the result?

e.g. 
SELECT testfield from testtable GROUP by testfield

Regards
sm
I'm trying to get data from a view with a function in hits fields, i noticed that api.php works correctly on mysql 8 and it doesn't on Maria 10.4. This is a simple sql script to repeat the problem
1. Create table ppippo, view pippo_guarda and function fn_date
2. execute the get statement to a server with mysql on table and view
3. execute the get statement to a server with mariadb on table and view
```
DROP TABLE IF EXISTS pippo;
CREATE TABLE pippo(
dt datetime,
num int,
primary key (dt)
);
INSERT INTO pippo(dt,num) VALUES(NOW(),1);

DELIMITER $$
DROP FUNCTION IF EXISTS fn_date  $$
CREATE FUNCTION fn_date (in_date DATETIME) RETURNS char(10) CHARSET latin1
    DETERMINISTIC
BEGIN
    RETURN DATE(in_date);
END $$
DELIMITER ;

DROP VIEW IF EXISTS pippo_guarda;
CREATE VIEW pippo_guarda
AS
SELECT dt, fn_date(dt)
FROM pippo;
```
execute the script in mysql 8.0 it works

TABLE
```
carlo@jigen:~$ wget http://host:8080/api.php/records/pippo/ -O /tmp/pippo
...
HTTP request sent, awaiting response... 200 OK
Length: 50 [application/json]
Saving to: ‘/tmp/pippo’

/tmp/pippo                          100%[=================================================================>]      50  --.-KB/s    in 0s      

2019-11-15 13:51:55 (6,17 MB/s) - ‘/tmp/pippo’ saved [50/50]

carlo@jigen:~$ cat /tmp/pippo 
{"records":[{"dt":"2019-11-15 11:33:30","num":1}]}
```
VIEW with function
```
carlo@jigen:~$ wget http://host:8080/api.php/records/pippo_guarda/ -O /tmp/pippo_guarda
...
HTTP request sent, awaiting response... 200 OK
Length: 69 [application/json]
Saving to: ‘/tmp/pippo_guarda’

/tmp/pippo_guarda                   100%[=================================================================>]      69  --.-KB/s    in 0s      

2019-11-15 13:55:19 (11,8 MB/s) - ‘/tmp/pippo_guarda’ saved [69/69]

carlo@jigen:~$ cat /tmp/pippo_guarda 
{"records":[{"dt":"2019-11-15 11:33:30","fn_date(dt)":"2019-11-15"}]}
```

on mariaDB 10.4 it works on
TABLE
```
carlo@jigen:~$ wget http:/api.php/records/pippo/ -O /tmp/pippo
...
HTTP request sent, awaiting response... 200 OK
Length: 50 [application/json]
Saving to: ‘/tmp/pippo’

/tmp/pippo                          100%[=================================================================>]      50  --.-KB/s    in 0s      

2019-11-1/host5 14:00:03 (9,76 MB/s) - ‘/tmp/pippo’ saved [50/50]

carlo@jigen:~$ cat /tmp/pippo
{"records":[{"dt":"2019-11-15 11:32:53","num":1}]}
```
it returns and error code on
VIEW with funcion
```
carlo@jigen:~$ wget http://host/api.php/records/pippo_guarda/ -O /tmp/pippo_guarda 
...
HTTP request sent, awaiting response... 500 Internal Server Error
2019-11-15 14:02:54 ERROR 500: Internal Server Error.
```
Hello,

I would like to protect my use of `php-crud-api` against basic input attacks.

I can see that `php-crud-api` already takes care of the `quote` to escape strings before they are inserted.

I took all the basic types I found in the `TypeConverter` for a general check in the `validation.handler`:
```
            switch($column['type']){
                case 'integer':
                    if(!is_numeric($value))
                        return('must be numeric');
                    if(strlen($value)>20)
                        return('exceeds range');
                break;
                case 'bigint':
                    if(!is_numeric($value))
                        return('must be numeric');
                    if(strlen($value)>20)
                        return('exceeds range');
                break;
                case 'varchar':
                    if(strlen($value)>$column['length'])
                        return('too long');
                    if(!mb_check_encoding($value))
                        return('wrong encoding');
                break;
                case 'decimal':
                    if(!is_float($value)&&!is_numeric($value))
                        return('not a float');
                break;
                case 'float':
                    if(!is_float($value)&&!is_numeric($value))
                        return('not a float');
                break;
                case 'double':
                    if(!is_float($value)&&!is_numeric($value))
                        return('not a float');
                break;
                case 'boolean':
                    if($value!=0&&$value!=1)
                        return('not a valid boolean');
                break;
                case 'date':
                    $date_array=explode('-',$value);
                    if(count($date_array)!=3)
                        return('invalid date format use yyyy-mm-dd');
                    if(!checkdate($date_array[1], $date_array[2], $date_array[0]))
                        return('not a valid date');
                break;
                case 'time':
                    $time_array=explode(':',$value);
                    if(count($time_array)!=3)
                        return('invalid time format use hh:mm:ss');
                    foreach($time_array as $t)
                        if(!is_numeric($t))
                            return('non-numeric time value');
                    if($time_array[1]<0||$time_array[2]<0||$time_array[0]<-838||$time_array[1]>59||$time_array[2]>59||$time_array[0]>838)
                        return('not a valid time');
                break;
                case 'timestamp':
                    $split_timestamp=explode(' ',$value);
                    if(count($split_timestamp)!=2)
                        return('invalid timestamp format user yyyy-mm-dd hh:mm:ss');
                    $date_array=explode('-',$split_timestamp[0]);
                    if(count($date_array)!=3)
                        return('invalid date format use yyyy-mm-dd');
                    if(!checkdate($date_array[1], $date_array[2], $date_array[0]))
                        return('not a valid date');
                    $time_array=explode(':',$split_timestamp[1]);
                    if(count($time_array)!=3)
                        return('invalid time format use hh:mm:ss');
                    foreach($time_array as $t)
                        if(!is_numeric($t))
                            return('non-numeric time value');
                    if($time_array[1]<0||$time_array[2]<0||$time_array[0]<0||$time_array[1]>59||$time_array[2]>59||$time_array[0]>23)
                        return('not a valid time');
                break;
                case 'clob':
                    if(!mb_check_encoding($value))
                        return('wrong encoding');
                break;
                case 'blob':
                    if(!mb_check_encoding($value))
                        return('wrong encoding');
                break;
                case 'varbinary':
                    if(((strlen($value) * 3 / 4) - substr_count(substr($value, -2), '='))>$column['length'])
                        return('too long');
                    if(!mb_check_encoding($value))
                        return('wrong encoding');
                break;
                case 'geometry':
                    if(!mb_check_encoding($value))
                        return('wrong encoding');
                break;
            }
            return(true);
```

My questions are:
1) Is any of this irrelevant?
2) Is any of this too restrictive?
3) Is any of this potentially resource intensive?
4) Is any of this redundant with validations done elsewhere?
5) Should any of this be done somewhere else?
6) How can this be improved?
I'am still confusing how to enable jwt auth on php crud api and how it works,
Can you make some example ?
### Solution to insert in two linked tables through one request

I found a solution to insert data in two joined tables in simple FK situation through a transaction with one request on php-crud-api but this required me to do some changes to the GenericDB and RecordController classes.

### Limitations

Here are the limitations I know of:

1. This relies on the creation of a simple view where the two tables are joined in a simple syntax.
2. The two tables can't have columns with the same name except for their ids.
3. This probably only works for MySQL/MariaDB.
4. It requires the two tables to be in the same database.

### Drawbacks of separate requests to insert in linked tables

I needed such a solution because creating records in two linked tables through two requests leads to the following drawbacks IMHO:
1) I believe this is slower and consumes more resources.
2) It gives more risks for orphan records.
3) It gives more opportunities for hackers to create a mess in the two separate tables.

### Here are the changes I made to php-crud-api for the solution to work

In RecordController.create(), I had to replace:
```
            if ($this->service->getType($table) != 'table') {
                return $this->responder->error(ErrorCode::OPERATION_NOT_SUPPORTED, __FUNCTION__);
            }
```
By this:
```
            if ($this->service->getType($table) != 'table'&&$this->service->getType($table) != 'view') {
                return $this->responder->error(ErrorCode::OPERATION_NOT_SUPPORTED, __FUNCTION__);
            }
```

I added those two functions to the GenericDB class:
```
        public function insertInView(ReflectedTable $table, array $columnValues)
        {
            $sql="select `information_schema`.`VIEWS`.`VIEW_DEFINITION` from `INFORMATION_SCHEMA`.`VIEWS` where table_name = '".$table->getName()."';";
            $stmt = $this->query($sql, []);
            $viewSql=$stmt->fetchColumn(0);
            $matches = array();
            $tablesAndCols=array();
            if(preg_match('/(?<=select )(.*)(?= from )/i', $viewSql, $matches)) {
                $selstr=$matches[0];
                $matches=array();
                if (preg_match_all('/(?<=^|,)([^,]*)(?= as)/i', $selstr, $matches)) {
                    foreach($matches[0] as $m){
                        $tempMatches=array();
                        if(preg_match('/(?<=^|.)([^.]*).([^.]*)(?=$)/i',$m,$tempMatches)){
                            $tab=str_replace("`","",$tempMatches[1]);
                            $col=str_replace("`","",$tempMatches[2]);
                            $tablesAndCols[$tab][]=$col;
                        }
                    }
                }
            }
            if(count($tablesAndCols)!=2){
                return(false);
            }
            $sql="select table_name,column_name,referenced_table_name,referenced_column_name from INFORMATION_SCHEMA.KEY_COLUMN_USAGE where (lower(referenced_table_name) = lower('".array_keys($tablesAndCols)[0]."') and lower(table_name) = lower('".array_keys($tablesAndCols)[1]."')) or (lower(referenced_table_name) = lower('".array_keys($tablesAndCols)[1]."') and lower(table_name) = lower('".array_keys($tablesAndCols)[0]."'))";
            $stmt = $this->query($sql, []);
            $foreignKeyData=$stmt->fetch();
            $primaryTable=$foreignKeyData["referenced_table_name"];
            $foreignTable=$foreignKeyData["table_name"];
            $foreignColumn=$foreignKeyData["column_name"];
            $insertPrimarySql=$this->getInsertSql($primaryTable,$tablesAndCols,$columnValues,$table);
            $insertForeignSql=$this->getInsertSql($foreignTable,$tablesAndCols,$columnValues,$table,$foreignColumn);
            try{
                if($this->pdo->beginTransaction()){
                    $stmt = $this->query($insertPrimarySql, []);
                    $stmt->fetch();
                    $stmt = $this->query($insertForeignSql, []);
                    $stmt->fetch();
                    $this->pdo->commit();
                }
                else{
                    return(false);
                }
            }catch (Exception $e) {
                $result=$this->pdo->rollBack();
                return(false);
            }
            return(true);
        }
        
        public function getInsertSql($tableName,$tablesAndCols,$columnValues,$table,$foreignTableColumn="")
        {
            $stringTypes=["varchar","char","binary","varbinary","blob","text","enum","set"];
            $insertSql="insert into ".$tableName." (";
            $insertSqlTail=") values (";
            if(strlen($foreignTableColumn)>0){
                $insertSql.=$foreignTableColumn;
                $insertSqlTail.="LAST_INSERT_ID()";
                if(count($tablesAndCols[$tableName])>0){
                    $insertSql.=",";
                    $insertSqlTail.=",";
                }
            }
            $i=0;
            foreach($tablesAndCols[$tableName] as $colName){
                $i++;
                $insertSql.=" ".$colName;
                $insertSqlTail.=" ";
                if(array_key_exists($colName,$columnValues)){
                    $col = $table->getColumn($colName);
                    $colType=$col->getType();
                    $quote=false;
                    if(array_search(strtolower($colType),$stringTypes)!==false){
                        $quote=true;
                    }
                    $insertSqlTail.=($quote?"'":"").$columnValues[$colName].($quote?"'":"");
                }
                else{
                    $insertSqlTail.="null";
                }
                if($i<count($tablesAndCols[$tableName])){
                    $insertSql.=",";
                    $insertSqlTail.=",";
                }
            }
            $insertSql.=$insertSqlTail.")";
            return($insertSql);
        }
```

I changed the GenericDB.createSingle() function into this:
```
        public function createSingle(ReflectedTable $table, array $columnValues) /*: ?String*/
        {
            $created=false;
            if($table->getType() == 'view'){
                $created=$this->insertInView($table,$columnValues);
            }
            if(!$created){
                $this->converter->convertColumnValues($table, $columnValues);
                $insertColumns = $this->columns->getInsert($table, $columnValues);
                $tableName = $table->getName();
                if(!is_null($table->getPk()))
                    $pkName = $table->getPk()->getName();
                $parameters = array_values($columnValues);
                $sql = 'INSERT INTO "' . $tableName . '" ' . $insertColumns;
                $stmt = $this->query($sql, $parameters);
                // return primary key value if specified in the input
                if (!is_null($table->getPk())&&isset($columnValues[$pkName])) {
                    return $columnValues[$pkName];
                }
            }
            // work around missing "returning" or "output" in mysql
            switch ($this->driver) {
                case 'mysql':
                    $stmt = $this->query('SELECT LAST_INSERT_ID()', []);
                    break;
            }
            $pkValue = $stmt->fetchColumn(0);
            if ($this->driver == 'sqlsrv' && $table->getPk()->getType() == 'bigint') {
                return (int) $pkValue;
            }
            return $pkValue;
        }
```

### Here is an example of how this works

I have tables A and B with view VW_CRUD_A_B as:
```
CREATE TABLE `a` (
  `id` int(11) NOT NULL,
  `a_name` varchar(20) NOT NULL
);

CREATE TABLE `b` (
  `id` int(11) NOT NULL,
  `a_id` int(11) NOT NULL,
  `b_name` varchar(20) NOT NULL
);

CREATE VIEW vw_crud_a_b AS select `a`.`a_name`,`b`.`b_name` from (`a` join `b` on(`b`.`a_id` = `a`.`id`)) ;

ALTER TABLE `a`
  ADD PRIMARY KEY (`id`);

ALTER TABLE `b`
  ADD PRIMARY KEY (`id`),
  ADD KEY `b_a_id` (`a_id`);

ALTER TABLE `a`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;
ALTER TABLE `b`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

ALTER TABLE `b`
  ADD CONSTRAINT `b_a_id` FOREIGN KEY (`a_id`) REFERENCES `a` (`id`) ON DELETE CASCADE ON UPDATE CASCADE;
```

When I POST on `/records/vw_crud_a_b` with the following, I get the records shown below in the database:
```
{
  "a_name":"name for a",
  "b_name":"name for b"
}
```

```
TABLE A:
ID: 1
A_NAME: name for a
```
```
TABLE B:
ID: 1
A_ID: 1
B_NAME: name for b
```

While I realize that there are many limitations and there are probably better ways to do the same thing, this does the job for me so far. The main risk for me using this solution is that php-crud-api will evolve and the changes I made may not work anymore.

Do you think there could be a way for me to improve this solution enough to have something similar  implemented into php-crud-api ?

What would you recommend?

Thank you so much for php-crud-api , this is really useful to me!
In order to use the project using a docker image we need a Dockerfile that can be pointed to a database instance, similar to how phpMyAdmin and Adminer work.

- https://github.com/phpmyadmin/docker/blob/master/fpm-alpine/Dockerfile
- https://github.com/TimWolla/docker-adminer/blob/master/4/Dockerfile

Note that the config should be ~somehow editable~ (provided) using environment variables ~or an external config file~.
Hi,
On updating database with http.put I get these errors with large batch (+150 records):
Error 400: Bad Request
Error: 405: Method not allowed

When I update less than say 150 records, all is working fine.
So I wonder, is there any limit in batch update (i.e. http.put requests)?