Internal messages queue solves the problem which is already solved by any Pub/Sub system. Besides, we force all users to watch on `Any` in theirs Context. This is not good.
We decided to move `StateStorage` under the hood. Saving state to external storage demanded by no one.
this is just an improvement point.
currently `button("Login", event("login")` won't give compiling error. 
It will help beginners a lot if invalid JavaScript event names such as "login" give compiling errors.

I don't think Scala 2.13 has enum types. Can we use singleton types to make the event interface type-safe?  
1. [x] Rename `korolev.Async` to `korolev.effect.Effect`
2. [x] Rename `run` to `runAsync`.
3. [x] Add `unsafeRun`.
4. [x] Add `korolev.effect.stream.Stream` instead of `LazyBytes` .
5. [x] Drop `cats-effect-support`
6. [x] Add `korolev-cats` for integration with `korolev.effect`.
7. [x] Add `korolev-zio` for integration with `korolev.effect`
8. [x] Add `korolev.monix` for integration with `korolev.effect`
9. [x] Rename `akkahttp` to `akka`
10. [x] Add akka streams <> korolev streams conversion
11. [x] Merge `korolev.server` and `korolev` modules
12. [x] Current conception of `Effect.fork` is totally wrong and unable to represent IO/Task meaning of fork. Must be redesigned.
13. [x] `Effect.promise` should be redesigned to support lazy semantics.
14. [x] Rewrite server to support lazy effect semantics.
15. [x] Rewrite main code to support lazy effect semantics.
16. [x] Drop `korolev.execution` package
The first problem is that `PartialFunction` doesn't compose well. Example:

```scala
@ val f1: PartialFunction[Int, Int] = { case 1 => 2 }
f1: PartialFunction[Int, Int] = <function1>

@ val f2: PartialFunction[Int, Int] = { case 1 => 3 }
f2: PartialFunction[Int, Int] = <function1>

@ f1.andThen(f2)
res2: PartialFunction[Int, Int] = <function1>

@ res2.isDefinedAt(1)
res3: Boolean = true

@ res2(1)
scala.MatchError: 2 (of class java.lang.Integer)
  ...
```

And this leads us to the problem. I want to log the state before and after `toState` call. Of cause I can write it directly, but what is FP for? :-) I want to do is as middleware and compose it. Maybe it's better to use `Kleisli` with `OptionT` here? It composes well.

The Second problem again with `PartialFunction` and `toState`. The signature of the function is `PartialFunction[Router.Path, S => F[S]]`. And if I want to make a decision about handling the path based on the old state, I just can't do it in the pattern matching. All I can do is to return the old state.

What if change `Router` definition like this? 

```scala
final case class Router[F[_]: Async, S](
    fromState: Kleisli[Option, S, Router.Path] = ???
    toState: Kleisli[OptionT[F, *], (Router.Path, S), S] = ???
)
```
Web Components fell short of expectations.

1. Most of components are extremely heavy
2. Low browsers support
3. API is complicated

We should add an our own component API to empower JavaScript interoperability.
Few months ago we were drop blaze support. Currently only one backed for use is akka. It's not fair. Let's add [http4s](https://http4s.org) support.
Minimal application where issue is reproducible:

https://github.com/narma/korolev_issue/

render body:
```scala
'body (
        'form (
          formId,
          'input ('type /= "checkbox", 'name /= s"foobar"),
          'button ("Upload", event('click) { access =>
            for {
              formData <- access.downloadFormData(formId).start()
              _ = println(s"formData: $formData")
            } yield ()
          })
        )
      )
```

If checkbox is not checked (formData is empty actually) `Upload` leads to ` java.nio.BufferUnderflowException`


Currently `<head>` is the same for all application. We can't modify it for different pages. What we need to do:

1. `KorolevServiceConfig(head = ...)` should be function.
2. Standard things like a `title`, `css` and `script` urls, should be able to get defined as strings.
3. Custom tags also should be supported. It's required for custom metadata.
4. `<head>` tag attributes should be customizable. It's also required for custom metadata (Facebook Open Graph for example).

```scala
head = { state =>
  Head(
    title = "Hello world",
    styles = Seq(...),
    scripts = Seq(...),
    customHeadAttributes = Map()
    customTags = Seq(
      'meta(...)
    )
  )
}
```
