
The PHP7-support and php7-support branches create a conflict as they have the same case-insensitive name. Deleting either one would fix it.
The current implementation relies on the native php functions for encoding/decoding json. The flags provided are `JSON_UNESCAPED_SLASHES`.

Depending on who creates the access token, the json encoding rules might be different. I have a case where I am getting an access token from Microsoft and the special characters are not encoded in json strings, and hence I have to use `JSON_UNESCAPED_UNICODE` as well.

This commit supports injecting a custom Json encoder.

Then main changes are:

- All places that refer to `encoder` have been renamed to `base64Encoder`
- Methods `setEncoder` are renamed to `setBase64Encoder`
- namespace `\Namshi\JOSE\Base64` is moved to `\Namshi\JOSE\Encoder` to support json encoders along with other encoders
- The default `JsonEncoder` class is added
Hi

I tried using ES512 but got the following error:

`Fatal error: Uncaught InvalidArgumentException: phpseclib 1.0.0(LTS), even the latest 2.0.0, doesn't support PHP7 yet in /.../vendor/namshi/jose/src/Namshi/JOSE/Signer/OpenSSL/ECDSA.php:15`

But phpseclib seems to be alright these days with PHP 7 (their builds pass on PHP 7 and 7.1, see https://travis-ci.org/phpseclib/phpseclib)

If I comment out the 2 version check blocks in Signer/OpenSSL/ECDSA.php then it seems to be working OK.

Is the block for PHP 7 still justified? If yes, could it at least be made more explicit in the README of this project? Also, would it be possible to emphasize the need to require phpseclib for ECSDA support in the same README?

Thanks
I got :   "message": "Malformed UTF-8 characters, possibly incorrectly encoded", when trying to decode a token. 
`        $public_key = openssl_pkey_get_public('file://'.__DIR__.'/keys/public.pem');
        if (! $signature->isValid($public_key, 'ES256')) {
            return new Response('Unauthorized', 403);
        }
`
It's working fine when a generate the token using your library but when the token came from elsewhere (a ruby library) I got that error. 

Any idea?

last version show error phpseclib/phpseclib please update version phpseclib
fix #111 
As mentioned in RFC7519, iat is an optional claim.
If iat is added in payload, token that does not contains iat will never pass signature verification.
According to JWT standard the 'iat' claim i optional. When decoding token (without 'iat') using SimpleJWS then verification of the signature fails. There is a function [generateSigninInput](https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/JWT.php#L56) in JWT class that return the input that the signature is verified against.

```php
    public function generateSigninInput()
    {
        $base64payload = $this->encoder->encode(json_encode($this->getPayload(), JSON_UNESCAPED_SLASHES));
        $base64header = $this->encoder->encode(json_encode($this->getHeader(), JSON_UNESCAPED_SLASHES));
        return sprintf('%s.%s', $base64header, $base64payload);
    }
```

But when decoding token (without iat claim) with SimpleJWS, then 'iat' is automatically added to the decoded payload in [setPayload](https://github.com/namshi/jose/blob/master/src/Namshi/JOSE/SimpleJWS.php#L38) method of SimpleJWS so the signinginput is different than was originally in token.

```php
    public function setPayload(array $payload)
    {
        if (!isset($payload['iat'])) {
            $payload['iat'] = time();
        }
        return parent::setPayload($payload);
    }
```


Can someone please include a an implementation example of the "SimpleJWS" script that is not a unit test.  All the unit tests work flawlessly, and arguably very often prove nothing.  A simple test like the one below is far more useful however this simple test is difficult to configure if you are new to composer and namespaces.  That is the code below will not work without refinement and ensuring that the autoloader is invoked..    It would be very helpful if someone could include a working version.  `

```
<?php
use Namshi\JOSE\SimpleJWS;
if ($username == 'correctUsername' && $pass == 'ok') {
    $user = Db::loadUserByUsername($username);
    $jws  = new SimpleJWS(array(
        'alg' => 'RS256'
    ));
    $jws->setPayload(array(
        'uid' => $user->getid(),
    ));
    $privateKey = openssl_pkey_get_private("file://path/to/private.key", self::SSL_KEY_PASSPHRASE);
    $jws->sign($privateKey);
    setcookie('identity', $jws->getTokenString());
}

```

All changes since `7.0.0` are missing in the changelog.
