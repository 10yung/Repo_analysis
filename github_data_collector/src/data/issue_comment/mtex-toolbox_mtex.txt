Hi Ralf,
I guess since `ODF/volume` should return fraction of an odf, there seems to be an issue with Laue groups symmetry.
Example:
```
cs1 = crystalSymmetry('321')
o_ref1 = orientation.byEuler(0,0,0,cs1)
odf1 = unimodalODF(orientation.byEuler(0,0,0,cs1),'halfwidth',15*degree)

cs2 = crystalSymmetry('-3m')
o_ref2 = orientation.byEuler(0,0,0,cs2)
odf2 = unimodalODF(orientation.byEuler(0,0,0,cs2),'halfwidth',15*degree)

volume(odf1,o_ref1,30*degree)
volume(odf2,o_ref2,30*degree)

ans =

    0.8727


ans =

    1.7454

```
This factor of two appears also for uniFormODF, kernel and Fourier odfs but I could not pinpoint the common  issue apart form SO3 space of a proper group being double the one of the corresponding Laue group.

Cheers,
RÃ¼diger



Hello MTEX Team,

doing some investigations into misorientations and MDFs I got different results by volume calculations using volume with an vector of misorientations or volume of MDF calculated out of this vector - see below: 

>> cs = crystalSymmetry('6/mmm',[1 1 4]); % fits nearly to the system I use
>> mori = orientation.byAxisAngle(Miller(0, 0, 0, 1,cs,'UVTW'),30*degree);
>> ori = orientation.byEuler(0,0,0,cs); r_mori = inv(ori.rand(2000000,cs)).*ori.rand(2000000,cs);
>> r_mdf = calcMDF(r_mori);
>> volume(r_mori,mori,25*degree)
>> volume(r_mdf,mori,25*degree)
>> ans =   0.0525
>> ans =   0.9993

First answer is ok I guess?

By the way to generate this random misorientation vector I could not use: 
>> r_mori = mori.rand(200000)
because it gives orientations but mori is mentioned as "misorentation" at Matlab Command Window?

I'm using Matlab 2017b and MTEX 5.2.8. 

Thanks for help.

Arne
Hi MTEX developers,

a month ago I published a short outreach article on why grain boundaries should be smoothed when calculating perimeters with MTEX. You can find it here: https://t.co/1vQ3SR8noy?amp=1 Basically, I explain that if the grain boundaries are not smoothed the estimated perimeters do not correspond to those of the particle but those of the box containing it (i.e. the bounding box). In any case, I wonder if it would not be more useful to include this information (in a more simplified or brief way) in the MTEX documentation itself, since this may be relevant for people who intend to characterize the shape of grains. I also provided an MTEX synthetic example that can be used freely.

Best, Marco
added squarify2 function, which allows step size to be defined explicitly (ebsdGrid.dx) instead of auto calculated
this sometimes leads to seam artefacts in ebsdGrid output, so all elements in ebsdgrid are assigned the nearest ebsd datapoint to remove these seams, with no interpolation of orientation data.

Hello MTEX Team,

using function @orientations.fibreVolume with 'weights' option gives an error (MTEX 5.2.7). There are a naming and a calculation error. 

The old calculation part looks like this:
>> elseif check_option(varargin,'weight')
>>   weights = get_option(varargin,'weights');
>>   v = mean(weights(angle(ori .\ r,h,varargin{:}) < radius));
>> else

I hope a correct version could look like this:

>> elseif check_option(varargin,'weights')
>>   weights = get_option(varargin,'weights');
>>   v = sum(weights(angle(ori .\ r,h,varargin{:}) < radius)) / sum(weights(:));
>> else

this gives reasonable results for my data.  

Have a nice Christmas time!

Arne


Hello,

thank you for your great work. 
I have recognized that the `intersect` function sometimes "overlooks" grain boundaries. I can reproduce this behavior with mtex 5.1.1 and 5.2 beta3 with smoothed and not smoothed grain boundaries. I'm using Matlab 2018b on Mac 10.14.

BR Stefan
   
![Bug intersect2](https://user-images.githubusercontent.com/47207151/57213872-62ab4c80-6fe8-11e9-9e9b-63b67efb09aa.png)

![Bug intersect3](https://user-images.githubusercontent.com/47207151/57213893-735bc280-6fe8-11e9-8f8d-846c1959aaad.png)

> Invalid MEX-file '/zhome/e5/0/94864/Documents/MATLAB/mtex-5.2.beta2/extern/nfft/nfsoftmex.mexa64': libmvec.so.1: cannot open
shared object file: No such file or directory.
Error in unimodalComponent/calcFourier>gcA2fourier (line 64)
plan = nfsoftmex('init',length(A)-1,length(g),nfsoft_flags,0,4,1000,2*ceil(1.5*(length(A)+1)));
Error in unimodalComponent/calcFourier (line 26)
f_hat = gcA2fourier(g,c,A);
Error in ODF/calcFourier (line 32)
  hat = calcFourier(odf.components{i},L,varargin{:});
Error in ODF/FourierODF (line 8)
f_hat = calcFourier(odf,varargin{:});
Error in orientation/calcFourierODF (line 54)
odf = FourierODF(odf,get_option(varargin,{'L','bandwidth','fourier'},L,'double'));
Error in orientation/calcODF (line 64)
  odf = calcFourierODF(ori,varargin{:},'kernel',psi);
Error in EvaluateTexture (line 24)
odf_rot = calcODF(ori_rot,'halfwidth',precision);
Error in W80_master (line 93)
EvaluateTexture;

I am trying to run an unistalled beta2 version of MTEX 5.2 on a remotely controlled High Performance computing node. Intel Xeon based. And I get this error whch I don't get on my Windows 10 based laptop which unfortunately is way slow. Anyone could help me figure out what's going nuts?!

I am evaluating ODFs from a huge 4M pixel map and then I will be running many "findByOrientation" commands after evaluating ODFs.

Thanks in advance,
Umberto,
Ph.D student at the Technical University of Denmark.
I have a sample that should have orthotropic (orthorhombic) specimen symmetry that I would like to impose in the EBSD data set.  But I can't seem to find a way to apply specimen symmetry to EBSD data.

Following the documentation:
https://mtex-toolbox.github.io/files/doc/ebsd_demo.html

The header for the first box mentions specimen symmetry, but none of the following commands are made to enforce any specimen symmetry, only the crystal symmetry.  

Looking at the class definition in EBSD.m, crystal symmetry and specimen symmetry seem to have a single listing, in comparison to the ODF class definition in ODF.m.

Is there a different way I should be applying specimen symmetry for EBSD data?  

I'm currently using mtex 5.0.3, Matlab 2015a, MacOS 10.13.6.
This command is very useful for plotting 2D section of seismic velocity 
like this figure below, but you cannot plot dashed lines so when two velocities are equal.
Would it possible to add dashed option.

all the best David

![phase_velocites](https://user-images.githubusercontent.com/10712356/52332673-a7304780-29fb-11e9-8dfa-8445b0ac8618.png)

Hi Ralf,
I've spotted an issue with grains.triplePoints, where the junction of found grain boundaries at the same vertex isn't identified as a triple junction for any of the grains. Please find attached my expertly annotated grains.boundary map, with the triplePoints overlaid.

>ebsd = loadEBSD(fname,CS,'interface','generic','ColumnNames', { 'phi1' 'Phi' 'phi2' 'x' 'y' 'z'}, 'Bunge', 'Radians');
grains = calcGrains(ebsd,'angle',1*degree);
figure()
plot(grains.boundary)
hold on
scatter(grains.triplePoints.V(:,1),grains.triplePoints.V(:,2))

![image](https://user-images.githubusercontent.com/29143861/52295477-cedbcd00-2973-11e9-803c-c8cc094491df.png)

I expect this bug can be duplicated with a synthetic dataset of 4 1x1 grains.

Regards,

Simon