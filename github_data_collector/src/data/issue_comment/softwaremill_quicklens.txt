Currently it appears impossible to use `eachWhere` with a map. It is formally possible to invoke `eachWhere` on a `Map[A, B]`, but it would result in this method using `Iterable[(A, B)]` as the output for setting the value, which causes type mismatch errors.

My use case is as follows. I have a map like `Map[String, SomeValue]` and I need to modify only those entries whose key satisfies some predicate:
```scala
val predicate: ((String, SomeValue)) => Boolean = {
  case (k, _) => someConditionOnKey(k)
}
modify(_.sources.eachWhere(predicate).nested.value)
```
Apparently there is no simple way to do it now. Having an ability to use `eachWhere` on a map would solve the issue.
adding a failing test for [#41](https://github.com/adamw/quicklens/issues/41)
I am at a bank where GitHub is blocked and I need to share the documentation. 
Please follow these instructions to create a GitHub page: [https://pages.github.com/](https://pages.github.com/)

I would appreciate it.
```
case class Test[T](a: T, b: Int)
Test("1", 1).modify(_.b).setTo(10)
```


Given the code:

```
case class A(a: B)
case class B(b: Int)
def x(b: Int): Future[Int] = ???
```

I'd like to be able to write:

```
(a: A) => a.modify(_.a.b).using(x)
```

I'd expect it to yield `Future[A]`. I'd also expect it to work for any `F[_]` that has `QuicklensFunctor` type class instance.
Hi,
I'm using quicklens 1.4.11 and com.softwaremill.common tagging v 2.2.0.  I'm unable to modify a value containing tagged datatypes.  For example : 

```
    import com.softwaremill.tagging._
    import com.softwaremill.quicklens._
    case class A(data: String)
    sealed trait B
    type C = A @@ B
    case class D(value: C)
    val a: C = A("test").taggedWith[B]
    val d = D(a)
    d.modify(_.value.data).setTo("modified")
```
This does not compile : 

```
[error]      type mismatch;
[error]       found   : A
[error]       required: C
[error]          (which expands to)  A with AnyRef{type Tag <: B}
[error]      L145:    d.modify(_.value.data).setTo("modified")
```

I understand why this doesn't compile but I was wondering if there is any way around this.

I also tried using shapeless tagging (it uses a trait instead of a type for tagging) but the issue remains. 

Apologies if this has been asked before, I searched open & closed issues but could not find anything relevant. 


Using scala 2.12.4, JDK 8u141, Quicklens 1.4.11.
Using the following setup with an example from the documentation:
```
case class Street(name: String)
case class Address(street: Option[Street])
case class Person(addresses: List[Address])

val person = Person(List(
            Address(Some(Street("1 Functional Rd."))),
            Address(Some(Street("2 Imperative Dr.")))
))
````
Then this will work:
```
person
     .modify(_.addresses.each.street.eachWhere(_.name.startsWith("1")).name)
     .using(_.toUpperCase)
```
but this will fail with a compilation error:
```
val one = "1"
person
     .modify(_.addresses.each.street.eachWhere(_.name.startsWith(one)).name)
     .using(_.toUpperCase)
```

The exception is quite long, but it starts like this:
```
[error] java.lang.IllegalArgumentException: Could not find proxy for val one: String in List(value one, method $anonfun$new$1, value <local QuickLensIncidentTest>, class QuickLensIncidentTest, package <empty>, package <root>) (currentOwner= method $anonfun$new$9 )
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.searchIn$1(LambdaLift.scala:310)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.$anonfun$proxy$4(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.searchIn$1(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.$anonfun$proxy$4(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.searchIn$1(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.$anonfun$proxy$4(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.searchIn$1(LambdaLift.scala:315)
[error] 	at scala.tools.nsc.transform.LambdaLift$LambdaLifter.$anonfun$proxy$4(LambdaLift.scala:315)
```

So it looks like closures don't work.

Hi,

Given a nested chain of `Option`s, is there a way to coerce the most inner one to `Some`?

The current operator `.each` allows traversing `Option`s, but acts like `map`:

```scala
import com.softwaremill.quicklens._

case class C(d: Option[Int])
case class B(c: Option[C])
case class A(b: Option[B])

val a = A(b = None)

a.modify(_.b.each.c.each.d.each).setTo(3)  //  res0: A = A(None)
```

(the result is `A(None)`, but how can we achieve a `A(Some(B(Some(C(Some(3))))))`?)

It could be useful if there were some operator (say, `all`) which can act as follows:

```scala
a.modify(_.b.all.c.all.d.all).setTo(3) //  res0: A = A(Some(B(Some(C(Some(3))))))
````
The following code:
```
case class Topping(cherries: Int)
case class Cake(toppings: List[Topping])
case class Bakery(cakes: List[Cake])

val myBakery = Bakery(List(Cake(List(Topping(0), Topping(3))), 
                           Cake(List(Topping(4))), 
                           Cake(Nil)))
import com.softwaremill.quicklens._
modify(myBakery)(_.cakes.each.toppings.at(0).cherries).setTo(7)
```
produces the following exception:
```
java.lang.IndexOutOfBoundsException: 0
  at scala.collection.LinearSeqOptimized.apply(LinearSeqOptimized.scala:63)
  at scala.collection.LinearSeqOptimized.apply$(LinearSeqOptimized.scala:61)
  at scala.collection.immutable.List.apply(List.scala:86)
  at com.softwaremill.quicklens.package$$anon$1.at(package.scala:151)
  at .$anonfun$res12$2(<console>:32)
  at $$Lambda$2077/1919422646.apply(Unknown Source)
  at scala.collection.immutable.List.map(List.scala:276)
  at com.softwaremill.quicklens.package$$anon$2.map(package.scala:112)
  at com.softwaremill.quicklens.package$QuicklensFunctor.each(package.scala:101)
  at com.softwaremill.quicklens.package$QuicklensFunctor.each$(package.scala:101)
  at com.softwaremill.quicklens.package$$anon$2.each(package.scala:111)
  at .$anonfun$res12$1(<console>:32)
  at $$Lambda$2075/532145679.apply(Unknown Source)
  at com.softwaremill.quicklens.package$PathModify.setTo(package.scala:69)
  ... 40 elided
```
I would expect it to return the same "Bakery", except with the first Toppings ("0" and "4") set to 7
Is there any way to compose only PathModifies?

Something like following:

```scala
case class A(b:B)
case class B(c:C)
case class C(value:Int)
val a = A(B(C(0)))
val mod1 = a.modify(_.b)
val mod2 = mod1.somecomposefunction(_.c)
mod2.setTo(C(1))
```

I know that you can compose functions of `U => PathModify[U, V]` but I want to know if there is a way to compose `PathModify`s directly.