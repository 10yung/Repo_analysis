This PR

* [x] regenerates all files

Fixes #187.

💁‍♂ For reference, see https://github.com/php/doc-en/pull/20.
When using `thecodingmachine/safe:1.0.2` on PHP 7.3.11, we have observed the following warning:

> Warning: ldap_bind() expects at most 3 parameters, 4 given

When looking at

* https://github.com/php/php-src/blob/php-7.3.11/ext/ldap/ldap.c#L1142-L1194
* https://github.com/php/php-src/blob/php-7.4.1/ext/ldap/ldap.c#L1117-L1169

it's not apparent that `ldap_bind()` accepts 4 arguments.

In contrast, the wrapping function `Safe\ldap_bind()` accepts and invokes `ldap_bind()` with 4 arguments :

* https://github.com/thecodingmachine/safe/blob/v1.0.2/generated/ldap.php#L90-L97

The documentation, from which the code is generated, states that `ldap_bind()` accepts 4 arguments:

* https://www.php.net/manual/en/function.ldap-bind.php

Perhaps there is something wrong with the documentation?



> ErrorException/src/Mail/ImapManager.php in App\Mail\ImapManager::connect
> Warning: imap_open(): Couldn't open stream {mail.foo-bar.de:993/ssl/novalidate-cert}

Hi,. the following code results in a warning before using `\Safe\imap_open`:
```php
$stream = imap_open(
    sprintf('{%s:%d/ssl/novalidate-cert}', $this->host, $this->port),
    $this->username,
    $this->password,
    0,
    1,
    ['DISABLE_AUTHENTICATOR' => 'GSSAPI']
);
```

now the reworked code with using `\Safe\imap_open`:
```php
try {
    $stream = imap_open(
        sprintf('{%s:%d/ssl/novalidate-cert}', $this->host, $this->port),
        $this->username,
        $this->password,
        0,
        1,
        ['DISABLE_AUTHENTICATOR' => 'GSSAPI']
    );
} catch (Exceptions\ImapException $exception) {
    throw new \Exception(
        sprintf('Cannot connect to %s on port %d with username %s: %s',
            $this->host,
            $this->port,
            $this->username,
            imap_last_error()
        )
    );
}
```

results with the error above where its only a warning.
Is there a best pracitse on how to handle such warnings, which are now exceptions? 🤔 

cc @localheinz 
In order to more easily solve #175 and #141, it may be easier to simply extract the needed infos from psalm's functions stubs instead of trying to recalculate them. This way we don't have to duplicate psalm's logic. 

This is a bit redundant with our utilization of phpstan's functionMap to generate types but we could just use psalm as our type reference as well.
@moufmouf, @muglug what you think of this? Does this look raisonable? 
 
Psalm has a list of templated functions here:

https://github.com/vimeo/psalm/blob/master/src/Psalm/Internal/Stubs/CoreGenericFunctions.php

The big benefit of those is that they allow static analysis to figure out what's happening in a bunch of common cases, without the need for extra plugins – with Psalm's `@param-out` annotation the type of by-reference arrays can be easily inferred.

Where those are available, you could use them instead of the functionmap versions.
| Q                | A
| ---------------- | ---
| Safe version      | ^0.11.12
| PHP version      | 7.4.0
| PHP Strict Type? | True |
| Operating system | MacOS

## description

```shell
TypeError: Argument 4 passed to yaml_parse_file() must be of the type array, null given
```




https://psalm.dev/articles/immutability-and-beyond#purity
Currently methods like `preg_replace` have a return type of `string|array` specified.
When in reality that return type is dependant on the input.

Static analysis tools, like PHPStan and Psalm can be made aware of this by using `@template` annotations, like so:

https://phpstan.org/r/4f0fc5ec-ad1a-45e8-a592-a46106267d67

This means that the tools can understand what exactly the output is going to be, if they can infer the input types.

Would it be possible to add those annotations to the generated code?
When calling `\Safe\file_get_contents("http://nonexistanturl.foo")` generates warning that cannot be caught.

The problem is that file_get_contents not only returns FALSE on failure but can also generate warning.

Supressing the warning by adding @ to \file_get_contents internal call fixes the issue.