First, let me start off by saying thank you for an awesome flexible package for deploying APIs using R. 

I see in [the docs](https://www.rplumber.io/docs/rendering-and-output.html#error-handling) that one can set a custom error handler using something like (where`custom_error_handler` is a function that handles errors as they come up, similar to the [`defaultErrorHandler`](https://github.com/rstudio/plumber/blob/e22e4b052618829662baac321fce37eaa12c391d/R/default-handlers.R#L8-L30) used by Plumber) :

```
r <- plumb("plumber_api.R")
r$setErrorHandler(custom_error_handler)
r$run()
```
This works great and I was able to get my custom error handling working well. However, I didn't see (in the docs or source) a way to use an annotation like one can for creating serializers or filters for defining a custom error handler for an app.

I've forked the repo, and created [a working proof of concept ](https://github.com/rstudio/plumber/compare/master...jonkeane:errorHandler) for adding this which was based off of how filters and serializers were implemented. I've also tested this locally and publishing an API to RStudio Connect that includes and uses custom error handling (which is the use case I was looking for the errorhandling annotation for).

I'm happy to submit this as a PR if this approach is reasonable (after I add bit more checking for e.g. that only one errorhandler is provided). 
Closes #75.

My fork of @sellorm's demo at https://github.com/krlmlr/plumber-uploader/tree/f-multipart contains an example of reliably processing multipart data using `mime::parse_multipart()`. This PR adds special treatment for multipart input.


## Pull Request

Before you submit a pull request, please do the following:

* Add an entry to NEWS concisely describing what you changed.

* Add unit tests in the tests/testthat directory.

* Run Build->Check Package in the RStudio IDE, or `devtools::check()`, to make sure your change did not add any messages, warnings, or errors.

Doing these things will make it easier for the plumber development team to evaluate your pull request. Even so, we may still decide to modify your code or even not merge it at all. Factors that may prevent us from merging the pull request include:

* breaking backward compatibility
* adding a feature that we do not consider relevant for plumber
* is hard to understand
* is hard to maintain in the future
* is computationally expensive
* is not intuitive for people to use

We will try to be responsive and provide feedback in case we decide not to merge your pull request.


## Minimal reproducible example

Finally, please include a minimal reprex. The goal of a reprex is to make it as easy as possible for me to recreate your problem so that I can fix it. If you've never heard of a reprex before, start by reading <https://github.com/jennybc/reprex#what-is-a-reprex>, and follow the advice further down the page. Do NOT include session info unless it's explicitly asked for, or you've used `reprex::reprex(..., si = TRUE)` to hide it away.
```r
reprex::reprex({
  library(plumber)
  # insert reprex here

})
```

Delete these instructions once you have read them.

---

Brief description of the original problem and the approach behind your solution.

```r
# insert reprex here
```

PR task list:
- [x] Update NEWS
- [x] Add tests
- [x] Update documentation with `devtools::document()`
Hi,

How can I send serialized data to the server?

I've seen the example to receive serialized data back (https://shrektan.com/post/2018/11/14/use-base-serializer-in-the-plumber-api/ provided by @shrektan) but I can't get the other way working.

Below the code. r_obj_serializer is the registered serializer from the above link. I receive the '20' back, but req is not what I sent in the body.

```
#* @post /api
#* @serializer r_obj_serializer
function(req) { 
  print(req$postBody)
  return(20)
}
```

```
post <- httr::POST(url = "http://localhost:8210/api",
                   body = base::serialize(list(myarg=1),NULL,FALSE),
                   encode='raw',
                   httr::content_type("application/octet-stream"))
```

Here the serializer.

```
plumber::addSerializer("r_obj_serializer", function() {
  function(val, req, res, errorHandler) {
    tryCatch({
      res$setHeader("Content-Type", "application/octet-stream")
      res$body <- base::serialize(val, NULL, ascii = FALSE)
      print('hi')
      return(res$toResponse())
    }, error = function(e) {
      errorHandler(req, res, e)
    })
  }
})
```


Context: I want to be able to send large serialized data objects to docker worker nodes. Using the json serialization takes too long.

Christian
Copying an email thread here to continue discussion

----------------------------------------------------

@mftokic - Oct 7, 2019

> I’m trying to integrate the Plumber API with Microsoft Flow, and would like to run an asynchronous call to my API. For this to work in flow I will need to have a response status of 202 (Accepted) along with a location header containing a URL to check on the status of the request.
>
> I was wondering if you could help me with those two responses?
> 
> For the 202 response, I wrote the below code. Does this look right to respond back to the API call that it is accepted?
> ```
> res$status <- 202
> ```
> 
> For the header response with location URL, I wrote the below code. How can I change this to have the URL dynamically created so the MS Flow can poll that URL to see if the API call (and r script) is still running?
> ```
> res$setHeader("location", "")
> ```
> 
> Thanks for your help!


-----------------------------------------------

@schloerke

> I would like to make sure I understand your situation correctly.  
> * You would like to visit the API to start calculations
> * You would like to poll a url while the calculations are working
> * You would like to redirect the poll to a response if the calculations are ready.
> Is this process long? Such as 1 hr (much longer than a browser connection)?  Or is it more like 30 seconds?

-------------------------------

@mftokic

> Yes that’s correct. Calling the API will kick off a long running forecasting process (using statistical time series and ML models) that will easily take over an hour. I’m trying to implement the API call in Microsoft Flow, where there is a timeout limitation of 2 minutes. You can make asynchronous calls for longer running calls, where Flow will call a location header URL to see if it is still processing or finished (please see below picture and link for more details).
> 
> [https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-create-api-app#webhook-actions](https://docs.microsoft.com/en-us/azure/logic-apps/logic-apps-create-api-app#webhook-actions)

![image](https://user-images.githubusercontent.com/93231/66505171-c73b6d80-ea98-11e9-9395-f15eaa3c2f50.png)


--------------------


@schloerke 
> I've attached a file below.  This should implement that idea of a "long poll" process.
>
> If you change the response status to `307`, it will work great in the browser as a proof of concept. 

<details>
  <summary>`tokic.R`</summary>

```r
# run in R session: plumber::plumb("tokic.R")$run(port = 12345)
# visit in browser: 127.0.0.1:12345/begin


work_queue <- list()


#' @get /begin
function(req, res) {

  # get unique id
  while(
      (id <- paste0(sample(letters, 8, replace = TRUE), collapse = ""))
        %in% names(work_queue)
  ) {
    TRUE
  }

  # initiate work in separate thread
  work_queue[id] <<- list(NULL)
  later::later(
    function() {
      idx <- sample(1:3, 1)
      work_queue[[id]] <<- list(iris, mtcars, Titanic)[[idx]]
    },
    10 # wait 10 seconds
  )

  # redirect to status
  res$status <- 202
  res$setHeader("Location", paste0("/status/", id))
  # res$setHeader("retry-after", 2) # didn't know if it was seconds or milliseconds

  id
}


#' Poll the work queue
#'
#' @html
#' @get /status/<id>
function(req, res, id) {
  # yell if unknown id
  if (! (id %in% names(work_queue))) {
    stop("unknown id '", id, "' in work queue. ", paste0(names(work_queue), collapse = ", "))
  }

  if (is.null(work_queue[[id]])) {
    # not ready yet

    # display status of id
    as.character(htmltools::tagList(
      # if watching on a browser, refresh the webpage every second
      htmltools::tags$script(
        htmlwidgets::JS(
          "setTimeout(function() { window.location.reload() } , 1 * 1000);"
        )
      ),
      Sys.time(), htmltools::tags$br(),
      "id: ", id
    ))
  } else {
    # data ready!

    # redirect to answer of id
    res$status <- 202
    res$setHeader("Location", paste0("/answer/", id))

    # helpful note
    paste0("redirecting to : /answer/", id)
  }
}


#' @get /answer/<id>
#' @json
function(id) {
  # yell if unknown id
  if (! (id %in% names(work_queue))) {
    stop("unknown id '", id, "' in work queue")
  }

  # return data
  work_queue[[id]]
}
```

</details>


--------------------------------

@mftokic

> This is great, thank you! I’ve been playing around with it the past day and have learned a ton, like how you can implement the “later” function to allow for immediate responses in API calls. I have a few questions around the process you called out in the example.
> 
> When running your example script within a machine learning (ML) workflow, the “status” endpoint will not respond immediately when called after 1-2 trys, because R is busy running the ML code after the 10 second delay. I think this can be fixed if I moved my API into a more scalable hosting environment (instead of running just a single instance on one core). I’m trying to build a POC using a Windows Server, and think the best way to host it on windows would be with PM2. I’ve tried following the examples in the documentation, but it’s hard to implement correctly since the examples were meant for a linux server, not a windows server. I think the issue is around correctly defining the custom interpreter in PM2 to use R instead of the default JS/Python/Perl.
> 
> Do you have any advice on how to implement the R-Based wrapper for Windows? I believe the below example is a bash script (first line of code), that will tell PM2 to use the RScript application when running the plumber R file. If you think there is a better way to host the API on a windows server, please let me know! I’d like to use RStudio Connect or digital ocean, but I will need to first provide a working proof of concept on existing servers we have before I can convince senior leadership to spend additional dollars. It’s also hard to convince people right off the bat to start using a non-microsoft product before anything gets developed 😊.
### System details

Output of `sessioninfo::session_info()`:

```
R version 3.6.0 (2019-04-26)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: CentOS Linux 7 (Core)

Matrix products: default
BLAS/LAPACK: /usr/lib64/R/lib/libRblas.so

locale:
 [1] LC_CTYPE=C                 LC_NUMERIC=C               LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8   
 [6] LC_MESSAGES=en_US.UTF-8    LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] parallel  stats     graphics  grDevices utils     datasets  methods   base     

other attached packages:
 [1] urltools_1.7.3          httr_1.4.0              lobstr_1.0.1            stringr_1.4.0           yaml_2.2.0              xml2_1.2.0             
 [7] SweetAleRt_1.0          SummeRnote_1.0          shinyWidgets_0.4.8      shinyjs_1.0             shinydashboard_0.7.1    shinyBS_0.61           
[13] sharepointr_1.0.0       RMySQL_0.10.17          rintrojs_0.2.1          RColorBrewer_1.1-2      promises_1.0.1          plotly_4.9.0           
[19] openssl_1.3             officer_0.3.4           lubridate_1.7.4         ldapr_0.1.0             Hmisc_4.2-0             Formula_1.2-3          
[25] survival_2.44-1.1       lattice_0.20-38         jsonlite_1.6            gitlabr_1.1.6           magrittr_1.5            ggplot2_3.1.1          
[31] future_1.12.0           fullcalendaR_1.0        dtplyr_0.0.3            DT_2.0.0                dplyr_0.8.1             directlabels_2018.05.22
[37] dbplyr_1.4.0            DBI_1.0.0               data.table_1.12.4       colourpicker_1.0        bcrypt_1.1              shiny_1.3.2            

loaded via a namespace (and not attached):
 [1] tools_3.6.0         backports_1.1.4     R6_2.4.0            rpart_4.1-15        lazyeval_0.2.2      colorspace_1.4-1    nnet_7.3-12        
 [8] withr_2.1.2         tidyselect_0.2.5    gridExtra_2.3       curl_3.3            compiler_3.6.0      htmlTable_1.13.1    triebeard_0.3.0    
[15] labeling_0.3        scales_1.0.0        checkmate_1.9.3     quadprog_1.5-7      askpass_1.1         plumber_0.4.6       digest_0.6.19      
[22] foreign_0.8-71      base64enc_0.1-3     pkgconfig_2.0.2     htmltools_0.3.6     htmlwidgets_1.3     rlang_0.3.4         rstudioapi_0.10    
[29] crosstalk_1.0.0     acepack_1.4.1       zip_2.0.2           Matrix_1.2-17       Rcpp_1.0.1          munsell_0.5.0       arpr_0.1.1         
[36] stringi_1.4.3       plyr_1.8.4          grid_3.6.0          listenv_0.7.0       crayon_1.3.4        miniUI_0.1.1.1      splines_3.6.0      
[43] knitr_1.22          pillar_1.4.0        uuid_0.1-2          codetools_0.2-16    glue_1.3.1          V8_2.2              latticeExtra_0.6-28
[50] httpuv_1.5.1        gtable_0.3.0        purrr_0.3.2         tidyr_0.8.3         assertthat_0.2.1    xfun_0.7            mime_0.6           
[57] xtable_1.8-4        later_0.8.0         viridisLite_0.3.0   tibble_2.1.1        cluster_2.0.8       globals_0.12.4    
```

### Example application *or* steps to reproduce the problem

<!-- If you're able to create one, a `reprex::reprex` (REProducible EXample, https://reprex.tidyverse.org/) is extremely helpful to us. For instructions on how to create good reprex, please see: https://reprex.tidyverse.org/articles/reprex-dos-and-donts.html .  We understand the interactive nature of plumber, having two separate reprex outputs (generating the server and calling server) is perfectly acceptable.  -->

```R
#* @get /getData
function(n = 10000) {
  data=do.call(rbind, replicate(n, mtcars, simplify = F))
  return(data)
}
```

### Describe the problem in detail
Requesting large datasets via plumber results in a large memory consumption of the plumber process which is ok. After the request ist finished, this memory is not released by the garbage collection. This means, if 4 GB were allocated for serving the request, the process will keep the allocated memory forever until restarted. Even after requesting a small dataset after the large one, the memory won't be released. I'm not quite sure if this is actually a bug or if I am doing something wrong.

Thanks for your help!
### Example application

Suppose we have the following API:

```R
srv <- plumber::plumber$new()
srv$handle("POST", "/submit", function(req, res) {
  # TODO: Actual work.
  res$headers[["Content-Type"]] <- "text/plain"
  res$body <- "Submitted"
  res
})
srv$run(host = "0.0.0.0")
```

If you send a `GET` request to this API (instead of the `POST` request it is expecting) you see the following (e.g. with `curl`):

```
$ curl -sv -X GET localhost:7312/submit
> GET /submit HTTP/1.1
> Host: localhost:7312
> User-Agent: curl/7.58.0
> Accept: */*
>
< HTTP/1.1 404 Not Found
< Date: Mon, 30 Sep 2019 22:15:12 GMT
< Content-Type: application/json
< Date: Mon, 30 Sep 2019 10:15:12 PM GMT
< Content-Length: 38
<
{"error":["404 - Resource Not Found"]}
```

### Describe the problem in detail

There is a well-known and well-supported HTTP status code for the specific issue of "this URI is valid but the method is not", namely `405 Method Not Allowed`. It would be nice if Plumber could support returning this method instead of falling back to 404.

From a cursory look at how routing is implemented, this should be quite possible. It might require that users add a new error handler, though.

**Steps to reproduce:**
* Configure `stdout` and `stderr` to output to different places.
* Launch plumber through `Rscript` with a file like this:
```r
library(plumber)
r <- plumb("some_file.R")
r$run(host = host, port = port)
```
* Check the standard output and standard error that is produced.

**Expected behavior:** information messages such as 
```
Starting server to listen on port 1234
```
should go into standard output.

**Actual behavior:** information messages go into standard error instead.
Shiny has an option called `shiny.autoreload` that monitors source files for changes and automatically reloads the Shiny app. It would be nice if Plumber had a similar option.
### System details

Output of `sessioninfo::session_info()()`:

```
─ Session info ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.4.3 (2017-11-30)
 os       Ubuntu 16.04.6 LTS          
 system   x86_64, linux-gnu           
 ui       RStudio                     
 language (EN)                        
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       Zulu                        
 date     2019-09-08                  

─ Packages ────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────
 package          * version    date       lib source                               
 assertthat       * 0.2.0      2017-04-11 [2] CRAN (R 3.4.3)                       
 backports          1.1.3      2018-12-14 [2] CRAN (R 3.4.3)                       
 bit                1.1-14     2018-05-29 [1] CRAN (R 3.4.3)                       
 bit64              0.9-7      2017-05-08 [1] CRAN (R 3.4.3)                       
 bitops             1.0-6      2013-08-17 [2] CRAN (R 3.4.3)                       
 blob               1.2.0      2019-07-09 [1] CRAN (R 3.4.3)                       
 brew               1.0-6      2011-04-13 [2] CRAN (R 3.4.3)                       
 callr              3.1.1      2018-12-21 [2] CRAN (R 3.4.3)                       
 caret            * 6.0-81     2018-11-20 [2] CRAN (R 3.4.3)                       
 cellranger         1.1.0      2016-07-27 [2] CRAN (R 3.4.3)                       
 chron            * 2.3-54     2019-08-26 [1] CRAN (R 3.4.3)                       
 class              7.3-14     2015-08-30 [3] CRAN (R 3.4.3)                       
 cli                1.0.1      2018-09-25 [2] CRAN (R 3.4.3)                       
 coda             * 0.19-3     2019-07-05 [1] CRAN (R 3.4.3)                       
 codetools          0.2-15     2016-10-05 [3] CRAN (R 3.4.3)                       
 colorspace         1.4-0      2019-01-13 [2] CRAN (R 3.4.3)                       
 CompatibilityAPI   1.1.0      2018-02-01 [2] local                                
 crayon             1.3.4      2017-09-16 [2] CRAN (R 3.4.3)                       
 data.table         1.12.0     2019-01-13 [2] CRAN (R 3.4.3)                       
 dbautojoinr      * 1.0.2      2019-08-27 [1] Github (N1h1l1sT/dbautojoinr@7e60ee3)
 DBI              * 1.0.0      2018-05-02 [2] CRAN (R 3.4.3)                       
 dbplyr           * 1.4.2      2019-06-17 [1] CRAN (R 3.4.3)                       
 desc               1.2.0      2018-05-01 [2] CRAN (R 3.4.3)                       
 devtools         * 2.0.1      2018-10-26 [2] CRAN (R 3.4.3)                       
 DiagrammeR       * 1.0.1      2019-04-22 [1] CRAN (R 3.4.3)                       
 digest             0.6.18     2018-10-10 [2] CRAN (R 3.4.3)                       
 downloader         0.4        2015-07-09 [2] CRAN (R 3.4.3)                       
 dplyr            * 0.8.3      2019-07-04 [1] CRAN (R 3.4.3)                       
 esquisse         * 0.2.2      2019-08-22 [1] CRAN (R 3.4.3)                       
 evaluate           0.13       2019-02-12 [2] CRAN (R 3.4.3)                       
 extrafont          0.17       2014-12-08 [1] CRAN (R 3.4.3)                       
 extrafontdb        1.0        2012-06-11 [1] CRAN (R 3.4.3)                       
 foreach            1.4.5      2017-12-29 [3] local                                
 fs                 1.2.6      2018-08-23 [2] CRAN (R 3.4.3)                       
 gdtools            0.1.9      2019-06-18 [1] CRAN (R 3.4.3)                       
 generics           0.0.2      2018-11-29 [2] CRAN (R 3.4.3)                       
 gg3D             * 0.0.0.9000 2019-08-27 [1] Github (AckerDWM/gg3D@ffdd837)       
 ggbiplot         * 0.55       2019-08-27 [1] Github (vqv/ggbiplot@7325e88)        
 ggplot2          * 3.1.0      2018-10-25 [2] CRAN (R 3.4.3)                       
 ggpubr           * 0.2.2      2019-08-07 [1] CRAN (R 3.4.3)                       
 ggsignif           0.6.0      2019-08-08 [1] CRAN (R 3.4.3)                       
 ggthemes           4.2.0      2019-05-13 [1] CRAN (R 3.4.3)                       
 glue               1.3.0      2018-07-17 [2] CRAN (R 3.4.3)                       
 gower              0.1.2      2017-02-23 [2] CRAN (R 3.4.3)                       
 gridExtra        * 2.3        2017-09-09 [2] CRAN (R 3.4.3)                       
 gtable           * 0.2.0      2016-02-26 [2] CRAN (R 3.4.3)                       
 hms                0.4.2      2018-03-10 [2] CRAN (R 3.4.3)                       
 hrbrthemes         0.6.0      2019-01-21 [1] CRAN (R 3.4.3)                       
 htmltools          0.3.6      2017-04-28 [2] CRAN (R 3.4.3)                       
 htmlwidgets        1.3        2018-09-30 [2] CRAN (R 3.4.3)                       
 httpuv             1.5.1      2019-04-05 [1] CRAN (R 3.4.3)                       
 httr               1.4.0      2018-12-11 [2] CRAN (R 3.4.3)                       
 igraph             1.2.4      2019-02-13 [2] CRAN (R 3.4.3)                       
 influenceR         0.1.0      2015-09-03 [2] CRAN (R 3.4.3)                       
 ipred              0.9-8      2018-11-05 [2] CRAN (R 3.4.3)                       
 iterators          1.0.9      2017-12-29 [3] local                                
 janitor          * 1.2.0      2019-04-21 [1] CRAN (R 3.4.3)                       
 jsonlite           1.5        2017-06-01 [3] CRAN (R 3.3.2)                       
 knitr              1.21       2018-12-10 [2] CRAN (R 3.4.3)                       
 later              0.8.0      2019-02-11 [1] CRAN (R 3.4.3)                       
 lattice          * 0.20-35    2017-03-25 [3] CRAN (R 3.4.3)                       
 lava               1.6.5      2019-02-12 [2] CRAN (R 3.4.3)                       
 lazyeval           0.2.1      2017-10-29 [2] CRAN (R 3.4.3)                       
 lubridate        * 1.7.4      2018-04-11 [2] CRAN (R 3.4.3)                       
 magrittr         * 1.5        2014-11-22 [2] CRAN (R 3.4.3)                       
 MASS             * 7.3-47     2017-02-26 [3] CRAN (R 3.4.3)                       
 Matrix             1.2-12     2017-11-20 [3] CRAN (R 3.4.3)                       
 MatrixModels       0.4-1      2015-08-22 [2] CRAN (R 3.4.3)                       
 mcmc               0.9-6      2019-03-10 [1] CRAN (R 3.4.3)                       
 MCMCpack         * 1.4-4      2018-09-14 [1] CRAN (R 3.4.3)                       
 memoise            1.1.0      2017-04-21 [2] CRAN (R 3.4.3)                       
 MicrosoftML      * 9.3.0      2018-02-11 [2] local                                
 mime               0.6        2018-10-05 [2] CRAN (R 3.4.3)                       
 miniUI             0.1.1.1    2018-05-18 [1] CRAN (R 3.4.3)                       
 misc3d             0.8-4      2013-01-25 [1] CRAN (R 3.4.3)                       
 ModelMetrics       1.2.2      2018-11-03 [2] CRAN (R 3.4.3)                       
 mongolite        * 2.1.0      2019-05-09 [1] CRAN (R 3.4.3)                       
 mrupdate           1.0.1      2018-02-01 [2] local                                
 munsell            0.5.0      2018-06-12 [2] CRAN (R 3.4.3)                       
 nlme               3.1-131    2017-02-06 [3] CRAN (R 3.4.3)                       
 nnet               7.3-12     2016-02-02 [3] CRAN (R 3.4.3)                       
 odbc             * 1.1.6      2018-06-09 [1] CRAN (R 3.4.3)                       
 ore                1.6.2      2018-08-30 [1] CRAN (R 3.4.3)                       
 pillar             1.3.1      2018-12-15 [2] CRAN (R 3.4.3)                       
 pkgbuild           1.0.2      2018-10-16 [2] CRAN (R 3.4.3)                       
 pkgconfig          2.0.2      2018-08-16 [2] CRAN (R 3.4.3)                       
 pkgload            1.0.2      2018-10-29 [2] CRAN (R 3.4.3)                       
 plot3D             1.1.1      2017-08-28 [1] CRAN (R 3.4.3)                       
 plumber          * 0.4.6      2018-06-05 [1] CRAN (R 3.4.3)                       
 plyr             * 1.8.4      2016-06-08 [2] CRAN (R 3.4.3)                       
 prettyunits        1.0.2      2015-07-13 [2] CRAN (R 3.4.3)                       
 processx           3.2.1      2018-12-05 [2] CRAN (R 3.4.3)                       
 prodlim            2018.04.18 2018-04-18 [2] CRAN (R 3.4.3)                       
 promises           1.0.1      2018-04-13 [1] CRAN (R 3.4.3)                       
 ps                 1.3.0      2018-12-21 [2] CRAN (R 3.4.3)                       
 purrr            * 0.3.0      2019-01-27 [2] CRAN (R 3.4.3)                       
 qdapTools        * 1.3.3      2017-06-20 [1] CRAN (R 3.4.3)                       
 quantreg           5.38       2018-12-18 [2] CRAN (R 3.4.3)                       
 R6                 2.2.2      2017-06-17 [3] CRAN (R 3.3.2)                       
 RColorBrewer       1.1-2      2014-12-07 [2] CRAN (R 3.4.3)                       
 Rcpp               1.0.2      2019-07-25 [1] CRAN (R 3.4.3)                       
 RCurl              1.95-4.11  2018-07-15 [2] CRAN (R 3.4.3)                       
 readr            * 1.3.1      2018-12-21 [2] CRAN (R 3.4.3)                       
 readtext         * 0.75       2019-06-26 [1] CRAN (R 3.4.3)                       
 readxl           * 1.2.0      2018-12-19 [2] CRAN (R 3.4.3)                       
 recipes            0.1.4      2018-11-19 [2] CRAN (R 3.4.3)                       
 remotes            2.0.2      2018-10-30 [2] CRAN (R 3.4.3)                       
 reportr            1.3.0      2018-10-26 [1] CRAN (R 3.4.3)                       
 reshape2         * 1.4.3      2017-12-11 [2] CRAN (R 3.4.3)                       
 RevoMods         * 11.0.0     2017-05-23 [3] local                                
 RevoScaleR       * 9.3.0      2018-02-11 [2] local                                
 RevoUtils        * 10.0.7     2018-01-02 [3] local                                
 RevoUtilsMath    * 10.0.1     2017-09-19 [3] local                                
 rgexf              0.15.3     2015-03-24 [2] CRAN (R 3.4.3)                       
 rhandsontable    * 0.3.7      2018-11-20 [1] CRAN (R 3.4.3)                       
 rjson            * 0.2.20     2018-06-08 [2] CRAN (R 3.4.3)                       
 rlang              0.4.0      2019-06-25 [1] CRAN (R 3.4.3)                       
 rmarkdown          1.11       2018-12-08 [2] CRAN (R 3.4.3)                       
 RNifti             0.11.1     2019-08-01 [1] CRAN (R 3.4.3)                       
 Rook               1.1-1      2014-10-20 [2] CRAN (R 3.4.3)                       
 rpart            * 4.1-11     2017-03-13 [3] CRAN (R 3.4.3)                       
 rprojroot          1.3-2      2018-01-03 [2] CRAN (R 3.4.3)                       
 rstudioapi         0.9.0      2019-01-09 [2] CRAN (R 3.4.3)                       
 Rttf2pt1           1.3.7      2018-06-29 [1] CRAN (R 3.4.3)                       
 scales           * 1.0.0      2018-08-09 [2] CRAN (R 3.4.3)                       
 sessioninfo        1.1.1      2018-11-05 [2] CRAN (R 3.4.3)                       
 shiny            * 1.3.2      2019-04-22 [1] CRAN (R 3.4.3)                       
 shinyWidgets       0.4.8      2019-03-18 [1] CRAN (R 3.4.3)                       
 SparseM            1.77       2017-04-23 [2] CRAN (R 3.4.3)                       
 stringi          * 1.3.1      2019-02-13 [2] CRAN (R 3.4.3)                       
 stringr          * 1.4.0      2019-02-10 [2] CRAN (R 3.4.3)                       
 survival           2.41-3     2017-04-04 [3] CRAN (R 3.4.3)                       
 testthat           2.0.1      2018-10-13 [2] CRAN (R 3.4.3)                       
 tibble           * 2.0.1      2019-01-12 [2] CRAN (R 3.4.3)                       
 tidyr            * 0.8.2      2018-10-28 [2] CRAN (R 3.4.3)                       
 tidyselect         0.2.5      2018-10-11 [2] CRAN (R 3.4.3)                       
 tidyxl           * 1.0.4      2019-01-02 [1] CRAN (R 3.4.3)                       
 timeDate           3043.102   2018-02-21 [2] CRAN (R 3.4.3)                       
 tractor.base     * 3.3.2      2019-06-10 [1] CRAN (R 3.4.3)                       
 usethis          * 1.4.0      2018-08-14 [2] CRAN (R 3.4.3)                       
 vctrs              0.2.0      2019-07-05 [1] CRAN (R 3.4.3)                       
 viridis            0.5.1      2018-03-29 [2] CRAN (R 3.4.3)                       
 viridisLite        0.3.0      2018-02-01 [2] CRAN (R 3.4.3)                       
 visNetwork         2.0.5      2018-12-05 [2] CRAN (R 3.4.3)                       
 withr              2.1.2      2018-03-15 [2] CRAN (R 3.4.3)                       
 writexl          * 1.1        2018-12-02 [1] CRAN (R 3.4.3)                       
 xfun               0.4        2018-10-23 [2] CRAN (R 3.4.3)                       
 XML                3.98-1.17  2019-02-08 [2] CRAN (R 3.4.3)                       
 xtable             1.8-2      2016-02-05 [2] CRAN (R 3.4.3)                       
 yaml               2.2.0      2018-07-25 [2] CRAN (R 3.4.3)                       
 zeallot            0.0.6      2017-09-28 [2] CRAN (R 3.4.3)                       

[1] /data/home/n1h1l1st/R/x86_64-pc-linux-gnu-library/3.4
[2] /data/mlserver/9.3.0/libraries/RServer
[3] /data/mlserver/9.3.0/runtime/R/library
```

### Describe the problem in detail

Because of the nature of the problem, it's hard to make a reproducible code. However I can explain it.
So the error appears on the VM which runs Plumber to create a service that will do Web Scraping from several websites for sever terms. The information is then transformed into a tibble, saved to a MongoDB via mongolite, and returned to the user as a JSON.

Now, if a term returns few results (like 1 page or 5), the error is never encountered. However, if a term returns many pages of results 10 or tens of pages, then my local computer will continue waiting for ever for Plumber in the remote VM to send the results, and plumber will just hang, having produced this error and never returning the results or informing the local computer that it will not.

I've already searched for it and came across these 2 topics:
https://github.com/rstudio/plumber/issues/214
https://github.com/rstudio/plumber/issues/52
However, they reference a different issue (connection reset) which is not what I have witness.

Is there any parameter or something that I can pass to Plumber so that even if a request is taking a long time, it could take 30 minutes for all I know, the connection does not get terminated?
<!--

Thanks for taking the time to file a feature request! Please take the time to search for an existing feature request, to avoid creating duplicate requests. If you find an existing feature request, please give it a thumbs-up reaction, as we'll use these reactions to help prioritize the implementation of these features in the future.

If the feature has not yet been filed, then please describe the feature you'd like to see become a part of plumber. See Shiny's guide on how to write good feature requests:

https://github.com/rstudio/shiny/wiki/Writing-Good-Feature-Requests

-->

httpuv somewhat recently added the feature that static files can be served without calling R code. On top of potential performance improvements httpuv also enables HTTP caching directives for static files, so that files don't have to be re-transmitted every time a page is viewed in browser (for example plotly is around 3MB of minified javascript which is.. noticeable).

`plumber` could be extended with a new slot `staticPaths` which is a named list specifying which URLs are mapped to local directories (much like `@assets` does now).

I could probably prepare a pull request if wanted.
