

以下是一些思考的记录，并不完全，有待深入。

客户端和服务器直接使用消息交互的原因：
1. 对客户端要求少（很容易就能连接上）
2. 方式灵活（替换协议很容易，增加功能很容易）
3. 满足现有需求

服务器内部使用 RPC 的原因：
1. 避免 callback hell
2. 易用

接口的具体形式：
1. 每个服务器有唯一的 ID
2. Leaf(ID).Go
3. Leaf(ID).Call
4. Leaf(ID).AsynCall
5. 选择类 chanrpc 接口

网络协议选择 TCP：
1. 需要异步发送的支持
2. 需要推送的支持
3. 为了接口的简洁

拓扑结构的构建：
1. 无中心
2. 两两互联
Could you comment your code for using in godoc? The documentation would help to work
1、比如游戏并发访问比较高时，需要部署一个Login及多台Gate和Game模块，如何实现？
      不同的用户登录到了不同的服务器，是否可实现广播消息？

2、游戏本身的数据保存到mysql，而不是mongodb, 需要如何扩展？

