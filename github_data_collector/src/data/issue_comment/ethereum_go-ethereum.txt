### Solutions for adding general DB support

#### CLI flag
In order to support general database on both keystore accounts and vault data (kps & ruleset), two flags needs to be changed:
1. keystoreFlag: it now supports two types of input
   1. file path to keystore
   2. URI to database where accounts is stored
2. ***vault***: this is a new flag which will be used to configure where data would be stored for vault data

#### DB schema
1. For keystore DB, we only need one table
   1. accounts
```SQL
// pesudo code to represent SQL schema
Table accounts {
  id int [pk, increment] // auto-increment
  address char(42)
  secret_key varchar
  
  Indexes {
    address [unique]
  }
}
```

2. For vault DB, tables are listed below
1. 



#### System information

Geth version: `1.9.9-stable-01744997`
OS & Version: Windows 10 x64 1909

#### Expected behaviour
No crash

#### Actual behaviour
Crash, followed by the following after restarting the node:
```
WARN [01-17|09:55:34.093] Synchronisation failed, dropping peer    peer=1163b590769a2845 err="retrieved hash chain is invalid"
WARN [01-17|09:55:52.023] Synchronisation failed, dropping peer    peer=11e0c1edda09ea9b err="retrieved hash chain is invalid"
WARN [01-17|09:55:58.074] Synchronisation failed, dropping peer    peer=b5e858d3910cf838 err="retrieved hash chain is invalid"
WARN [01-17|09:56:37.362] Synchronisation failed, dropping peer    peer=b5e858d3910cf838 err="retrieved hash chain is invalid"
WARN [01-17|09:56:50.510] Synchronisation failed, dropping peer    peer=3b95c0d3e14e5021 err="retrieved hash chain is invalid"
WARN [01-17|09:57:18.111] Synchronisation failed, dropping peer    peer=b5e858d3910cf838 err="retrieved hash chain is invalid"
WARN [01-17|09:58:46.065] Synchronisation failed, dropping peer    peer=fdd095bfbd54c5fe err="retrieved hash chain is invalid"
WARN [01-17|09:58:57.225] Synchronisation failed, dropping peer    peer=b5e858d3910cf838 err="retrieved hash chain is invalid"
```

I think my sync is hosed? Also this is actually the 2nd time this has happened to me, I just didn't open an issue the 1st time.

#### Steps to reproduce the behaviour
I run geth via a scheduled task via a bat file. This is a `--syncmode full` run

```
@ECHO OFF
FOR /F "tokens=*" %%g IN ('curl -s ipinfo.io/ip') do (SET extip=%%g)
C:\Geth\geth.exe --datadir C:\Geth\Data --datadir.ancient D:\Geth\Data --identity MysticRyuujin-Geth03 --ethstats=MysticRyuujin-Geth03:<redacted>@ethstats.net --maxpeers 200 --light.serve 100 --nat extip:%extip% --rpc --rpcapi db,eth,net,web3,admin --rpcaddr 192.168.10.50 --rpccorsdomain "*" --rpcvhosts "*" --rpcport 8543 --syncmode full --cache 8192 >> c:\geth\log.txt 2>&1
```

#### Backtrace

This is the full and complete log.

[crashlog.zip](https://github.com/ethereum/go-ethereum/files/4077614/crashlog.zip)

Crash happens @ line 10871 starting with:
```
fatal error: unexpected signal during runtime execution
fatal error: unexpected signal during runtime execution
fatal error: unexpected signal during runtime execution
[signal 0xc0000005 code=0x0 addr=0xffffffffffffffff pc=0x4167c3]
```
Retesteth was kind of illogical, when blocks were imported `[1,2,3a,4,3b]`, it thought that `3b` was the canon head (since Importblocks does not return an error if a side-block is imported). 

This PR removes the separate blockNumber counter from the API, and uses the actual current head from `blockchain` when needed. 

Requested by @winsvega , PTAL if this fixes your issues. 
This is not to be merged, just a PR which attempt to provide better diagnostics for https://github.com/ethereum/go-ethereum/issues/20478 

#### System information

Geth version: `Geth/v1.9.10-unstable-3bb6815f-20191225/darwin-amd64/go1.13.5`

OS & Version: OSX

Branch, Commit Hash or Release: `e9e69d6e`

#### Expected behaviour
`state.New()` should return a new state from a given block hash when `full` database directory provided. 

#### Actual behaviour
Getting `panic: missing trie node <block hash>`

#### Steps to reproduce the behaviour
I completely synced a tesnet chain with following command: `geth --datadir /Users/kirill/geth/data --syncmode full --goerli`. Then started this util: https://github.com/bulgakovk/go-ethereum/commit/8ee6485ec0a432e0e8ed4acee38ce6d8055fc492. The code contains latest know at that moment hash but I also tried with genesis.

#### Backtrace

````
[backtrace]
````

   If you truncate an open file in Windows, access is denied.
   how about close the file before truncation?
In PR #20390, we attempted to fix an issue where geth crashes if it is stopped before being fully started. The issue is that `Subscribe*` methods can fail if they use `event.SubscriptionScope` and the scope is closed before all subscriptions are created. There are two ways to fix this issue:

- Remove uses of `SubscriptionScope` for internal event providers such as `core.BlockChain`.
- Ensure internal subscriptions are created in constructor functions **before** start.