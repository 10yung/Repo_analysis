
Also added deprecation warnings to versions of node that have been marked as deprecated by AWS.
- Adds support for Cognito
- Adds very rudimentary codegen functionality
- Updates `AWS::AutoScaling::AutoScalingGroup` to support conditional AZ's and health checks.
- Adds missing ServiceName field to `AWS::ECS::Service`

Fixes: https://github.com/MonsantoCo/cloudformation-template-generator/issues/165
How can I make nested function calls like below:


```
`Fn::Select`[Token[String]](StringBackedInt(0), `Fn::GetAZs`(`AWS::Region`))
```

> 
> Compilation error:
> "Error:(106, 77) type mismatch;
>  found   : com.monsanto.arch.cloudformation.model.Fn::GetAZs
>  required: com.monsanto.arch.cloudformation.model.Token[Seq[com.monsanto.arch.cloudformation.model.Token[String]]]
>     val value = `Fn::Select`[Token[String]](StringBackedInt(0), `Fn::GetAZs`(`AWS::Region`))"
> 


OR

```
`Fn::FindInMap`[AMIId](MappingRef(awsRegionArch2AMI), `AWS::Region`, `Fn::FindInMap`[Token[String]](MappingRef(awsInstanceType2Arch), ParameterRef(instanceTypeParam), "Arch"))
```

> Error:(87, 120) type mismatch;
>  found   : com.monsanto.arch.cloudformation.model.Fn::FindInMap[com.monsanto.arch.cloudformation.model.Token[String]]
>  required: com.monsanto.arch.cloudformation.model.Token[String]
>           ImageId = `Fn::FindInMap`[AMIId](MappingRef(awsRegionArch2AMI), `AWS::Region`, `Fn::FindInMap`[Token[String]](MappingRef(awsInstanceType2Arch), ParameterRef(instanceTypeParam), "Arch"))
I've got around 2000 lines (in 8 different files) of library code built up.  The compile times are becoming significant, around 120 seconds on a new MacBook Pro.  Does anyone have advice about keeping these times down?  All the time is spent in the type checker.
An `OptionSetting` in an `AWS::ElasticBeanstalk::ConfigurationTemplate` has an optional `ResourceName` parameter, which can be used to pass options to the underlying elements (i.e., the Elastic Load Balancer). For example:

```yaml
Resources:
  ElasticBeanstalkTest:
    Type: "AWS::ElasticBeanstalk::ConfigurationTemplate"
    Properties:
        - Namespace: "aws:elb:listener:22"
          ResourceName: AWSEBLoadBalancer
          OptionName: ListenerProtocol
          Value: TCP
```

The `com.monsanto.arch.cloudformation.model.resource.OptionSetting` class only supports the `Namespace`,  `OptionName` and `Value` parameters, but not the optional `ResourceName`.
Currently `DependsOn` is spottily implemented in resources.  Since `DependsOn` should be possible for all resources, I propose making it part of the `Resource` signature and dropping all occurrences in the individual resources.  

Some discussion is here: #187 
Is there any hope this library will make it to maven central any time soon?  All of our other dependencies are available there.  I'm getting pushback trying to import this library because it requires a lot of churn in our build system.

Thanks!


The [docs](http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/intrinsic-function-reference-conditions.html#intrinsic-function-reference-conditions-equals) say

```
value
    A value of any type that you want to compare.
```

So I believe that `Fn::Equals` should support more than just String arguments. I haven't tried to make this change and I can't quite resolve all of the types in my head, but I _think_ we should be able to do something along the lines of

```
case class `Fn::Equals`[T](a: Token[T], b: Token[T])
  extends NestableAmazonFunctionCall[String]("Fn::Equals")
{type CFBackingType = (Token[T], Token[T]) ; val arguments = (a, b)}
```

I suspect there will be troubles with the serialization though.
Announcement: https://aws.amazon.com/about-aws/whats-new/2017/04/aws-cloudformation-adds-support-for-amazon-cognito-ebs-elastic-volumes-and-updates-resource-coverage/

* IdentityPool - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypool.html
* IdentityPoolRoleAttachment -
 http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-identitypoolroleattachment.html
* UserPool - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpool.html
* UserPoolClient - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolclient.html
* UserPoolGroup - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolgroup.html
* UserPoolUser - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpooluser.html
* UserPoolUserToGroupAttachment - http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-cognito-userpoolusertogroupattachment.html