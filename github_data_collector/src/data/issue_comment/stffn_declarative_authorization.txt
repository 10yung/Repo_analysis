We are in the process of migrating to Rails 5 and have done the work to ensure DA continues to work for us.

Would you consider merging this one?
It would be great to have a command line that outputs the list of all the roles defined
HI
in_controller.rb  line 600 ish  
ancestors[1..-1] is the issue.
 ```ruby
protected
      def filter_access_permissions # :nodoc:
         unless filter_access_permissions?
          ancestors[1..-1].reverse.each do |mod|
            mod.filter_access_permissions if mod.respond_to?(:filter_access_permissions, true)
          end
        end
        class_variable_set(:@@declarative_authorization_permissions, {}) unless filter_access_permissions?
        class_variable_get(:@@declarative_authorization_permissions)[self.name] ||= []
      end
```
This is a recursive method and ancestors[1..-1] appears to be designed to remove the current object's class from the iterator, with the assumption that the current object is its own first ancestor.
eg if ancestors returns
    [ ActionController::Base, ActiveRecord::Railties::ControllerRuntime, ....... ]
[1..-1] removes the first element which is assumed to be the current object, in this case ActionController::Base.

However this fails if other gem modules (eg wicked_pdf) are designed to prepend to the front of the ancestors chain. 

See [Nice Module#prepend explanation here](http://gshutler.com/2013/04/ruby-2-module-prepend/)

For example: prepend excerpt from the wicked_pdf gem:
```ruby
class WickedPdf
  if defined?(Rails)
    if Rails::VERSION::MAJOR >= 5
      class WickedRailtie < Rails::Railtie
        initializer 'wicked_pdf.register' do |_app|
          ActionController::Base.send :prepend, PdfHelper
          ActionView::Base.send :include, WickedPdfHelper::Assets
        end
      end
```

ancestors returns 
[WickedPdf::PdfHelper, ActionController::Base, ActiveRecord::Railties::ControllerRuntime, .......
[1..-1] removes the first element, in this case the prepend-ed WickedPdf::PdfHelper, leaving the current object ( ActionController::Base) in the iterator which causes the infinite loop.


FIX: Replace
```ruby
ancestors[1..-1].reverse.each do |mod|
```
WITH
```ruby
(ancestors - [self] ).reverse.each do |mod|
```

Thanks
Simon
I'm using Rails 5. After I install the gem and run `rails g authorization:install` I get the following error: 

```
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:94:in `rescue in block (2 levels) in require': There was an error while trying to load the gem 'declarative_authorization'.
Gem Load Error is: undefined method `hide_action' for ActionController::Base:Class
Backtrace for gem load error is:
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/declarative_authorization-0.5.7/lib/declarative_authorization/in_controller.rb:9:in `included'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/declarative_authorization-0.5.7/lib/declarative_authorization.rb:16:in `include'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/declarative_authorization-0.5.7/lib/declarative_authorization.rb:16:in `<top (required)>'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:91:in `require'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:91:in `block (2 levels) in require'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:86:in `each'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:86:in `block in require'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:75:in `each'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler/runtime.rb:75:in `require'
/Users/blahblah/.rbenv/versions/2.3.1/lib/ruby/gems/2.3.0/gems/bundler-1.13.7/lib/bundler.rb:106:in `require'
```

Let me know if this is something that the maintainers want to fix - I would be happy to help with this.
Without this `bundle console` will fail on a Gemfile such as this:

```ruby
source "https://rubygems.org"
gem "rails", "=4.2.7.1"
gem "declarative_authorization", github: "stffn/declarative_authorization"
```

I reproduced the bug on the following system:
Ubuntu 16.04 (within docker)
Rubygems 2.6.2
Bundler 1.13.6
This method is not more available. 

You're using sexp_processor and ruby_parser but not declaring dependencies on them. Please do so.

This site is down! http://www.tzi.org/~sbartsch/declarative_authorization

There is a lot of good documentation in rdoc that is good to be accessible.

![screenshot 2016-02-14 12 19 38](https://cloud.githubusercontent.com/assets/10546/13036180/4a1e848e-d315-11e5-8c76-ed77cb41f9db.png)

- Add support for testing Rails 4.2 development
- `test-unit` isn't provided by Ruby anymore, so add that to development dependencies.
- Lock `ruby_parser` to a version that's capable of being used for development and move to development dependencies.

I've upgraded from from Rails 3 to Rails 4.1.12 and I get the following error on http://localhost:3000/authorization_rules/ (in development mode):

RuntimeError - Circular dependency detected while autoloading constant AuthorizationRulesController

What can be wrong? I'm using declarative_authorization 0.5.7.
