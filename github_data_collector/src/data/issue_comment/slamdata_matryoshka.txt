Hi,

Is there any possibility to publish matryoshka-core artifact for scala 2.13?

Can I help with that?

CC: @djspiewak 

Best regards,
Karol
Hi! I wanted to let you know about a subtle but pretty fundamental bug we've found in Haskell's recursion-schemes library. Since Matryoshka uses the same "recursion-schemes from comonads" approach as we do, and exposes the same `gcata`, `distZygoT`, and `histHisto` building blocks as we do, I'm pretty sure the bug affects Matryoshka as well.

Now, the bug is pretty subtle. Only zygomorphic histomorphisms and their generalizations (such as the infamous zygo-histomorphic prepromorphism) seem to be affected, and even then, they only compute an incorrect answer when the input tree's depth is at least 3. Another symptom is that histomorphisms do more work when implemented via `gcata` and `distHisto` than when implemented by hand. That's [the symptom I noticed first](https://github.com/ekmett/recursion-schemes/issues/50), but be sure to read further down, it really is a correctness issue, not just a performance issue.

In our Haskell implementation, we have decided to move away from comonads, but that's a pretty big change, so you might consider the following slightly less drastic but still painful change: remove `gzygo` and `distZygoT` from the library. `zygo` and `distZygo` are still fine. Manually reimplementing `histo` might be a good idea too. Keep in mind, however, that these are merely the symptoms I have noticed; there might be more.

Anyway, I wrote a lot more about the problem in [the upstream issue](https://github.com/ekmett/recursion-schemes/issues/50), but since the problem is pretty subtle, let me know if you have any question.
E.g.
- `Birecursive#iso` should pass the `monocle.Iso` laws.
- `x.ana(f).cata(g) ≟ x.hylo(g, f)` (for some generic `f` and `g`)
- `x.cata(g) ≟ x.hylo(g, _.project)` and its dual
- either make other operations (`gcata`, `futu`, etc.) `final` or add laws comparing them to the default impls
Hi, I saw the talk from Greg Pfeil and found the park on mutual recursion really appealing.

I created a simple example  of numeric and boolean operations that I would be happy to add to a documentation once I figure how to do traversals. It is a nice domain to document due to some obvious rewrites on boolean expressions.

I appreciate that we need a natural transformation to transform `A` (is higher-kinded Functor a thing?). But not sure if there is further infrastructure around this.

```scala
sealed trait BoolAndCalcF[A[_],I]
// Using AtLeastTwoList as a more complex use case
case class And[A[_]](expressions: AtLeastTwoList[A[Boolean]]) extends BoolAndCalcF[A, Boolean]
case class Or[A[_]](expressions: AtLeastTwoList[A[Boolean]]) extends BoolAndCalcF[A, Boolean]
case class Not[A[_]](wrapped: A[Boolean]) extends BoolAndCalcF[A, Boolean]
case class BoolVal[A[_]](value: Boolean) extends BoolAndCalcF[A, Boolean]

// A bridge from calculation to booleans
case class Compare[A[_],I : Numeric, J: Numeric](left: A[I], op: CompOp, right: A[I]) extends BoolAndCalcF[A, Boolean]

case class Add[A[_], I : Numeric](left: A[I], right: A[I]) extends BoolAndCalcF[A, I]
//To show it would not compose with the rest due to Option
case class Divide[A[_], I : Numeric](left: A[I], right: A[I]) extends BoolAndCalcF[A, Option[I]]
case class Num[A[_], I : Numeric](value: I) extends BoolAndCalcF[A, I]

sealed trait CompOp
object CompOp {
  case object GT extends CompOp
  case object LT extends CompOp
  case object EQ extends CompOp
  case object NE extends CompOp
  case object GE extends CompOp
  case object LE extends CompOp
}
//import cats.data.OneAnd
//type AtLeastTwoList[A] = OneAnd[OneAnd[List,A],A]
case class AtLeastTwoList[A](head: A, second:A, tail: List[A]) {
  def map[B](f: A => B) = AtLeastTwoList(f(head), f(second), tail.map(f))
  def fold[B](h: A => B)(f: (B, A) => B): B = tail.foldLeft[B](f(h(head), second))(f)
}
```
For instances on refined types.

E.g. `Birecursive.Aux[Int With NonNegative, Option]`
E.g., is there something we can do, like `(Recursive t f, PatternMonoid f) => Monoid t` (where `PatternMonoid` is the missing piece), and similarly for other type classes.

We have (or maybe _used to have_?) things like this for `Functor` and `Foldable`, but should try to expand it as much as possible. I _think_ I remember seeing some instances like this in the Haskell world (perhaps in @pa-ba /compdata).
`repeatedly` returns one more time a function value (instead of being a method). 

also added `ginterpret`
# Symptoms

`cata` and other recursion patterns unavailable for `Fix` and related types.

```
scalaVersion := "2.11.8"
"com.slamdata"  %% "matryoshka-core" % "0.16.4",
```

# Causes

Ambiguity between `recursiveTRecursive` and `birecursiveTBirecursive`, apparently in top-level package object.

# How to reproduce

```
import matryoshka._
import matryoshka.implicits._
import matryoshka.data.Fix
implicitly[Recursive[Fix[Option]]]

<console>:19: error: ambiguous implicit values:
 both method recursiveTRecursive in package matryoshka of type [T[_[_]], F[_]](implicit evidence$81: matryoshka.RecursiveT[T])matryoshka.Recursive.Aux[T[F],F]
 and method birecursiveTBirecursive in package matryoshka of type [T[_[_]], F[_]](implicit evidence$83: matryoshka.BirecursiveT[T])matryoshka.Birecursive.Aux[T[F],F]
 match expected type matryoshka.Recursive[matryoshka.data.Fix[Option]]
       implicitly[Recursive[Fix[Option]]]
                 ^
```

Same problem for `Mu` and `Nu`.

# Workaround

```
def r(implicit r: BirecursiveT[Fix]) = matryoshka.birecursiveTBirecursive(r)
```

Matryoshka could definitely benefit from library-specific advice when it comes to compiler errors. See here for how: https://github.com/softwaremill/scala-clippy#library-specific-advice
Hopefully this can be done as a subproject, otherwise we'all need a separate repo.

It'd be great to create a tutorial using the scala-exercises/scala-exercises tool, so users can interactively solve Matryoshka problems.