Happens in your latest version:

```
Uncaught TypeError: Cannot redefine property: name
```

Debugged it in the raw, compiled ES5 code and found the cause:

```
return Object.defineProperty(awaitable,"name",{value:"awaitable(".concat(asyncFn.name,")")})
```

The name property has been set without `configurable: true` and is being redefined again when another code requires the same file. I'd consider adding `configurable: true`. See: https://stackoverflow.com/questions/25517989/why-cant-i-redefine-a-property-in-a-javascript-object

(Sorry for not following the issue template but this is simple.)
<!--
This template is for bug reports. If you are reporting a bug, please continue on. If you are here for another reason (such as a feature request, change, or question) you can disregard this template
-->

**What version of async are you using?**
`3.1.0`

**Which environment did the issue occur in (Node version/browser version)**
`v10.15.3`

**What did you do? Please include a minimal reproducable case illustrating issue.**
considering this
```js
const queue = require('async/queue');

var q = queue(function(task, callback) {
    console.log('executing ' + task.name);
    function doSomething() {
        return {
            status: 0,
            message: "success",
            others: {},
        };
    }
    var result = doSomething();
    callback(result);
}, 2);

q.error(function(error, task) {
    console.error(`error: ${task.name}: ${error}`);
});

q.push({name: 'foo'}, function(result) {
    console.log(`finished processing done, status: ${result.status}`);
});

```

**What did you expect to happen?**
1. can pass anything to callback
2. stop global error handler if i had handled in a specific callback
3. callback can handle error and result that are passed from worker

**What was the actual result?**
```
executing foo
finished processing done, status: 0
error: foo: [object Object]
```
worker can not pass result to callback, it will treat as an error! and once i create a global error handler, i cannot stop it in my callback like this
```js
q.error(function(error, task) {
    console.error(`unhandled error occur: ${error} in ${task.name} task.`);
});

q.push({name: 'foo'}, function(result, error) {
    if (error) {
        console.log("error");
        // return false or return error even throw new Error()
        // return false;
        // return error;
        throw new Error(`something unexpected happened: ${error}`);
    }
    console.log(`finished processing done, status: ${result.status}`);
    // return true means everything is ok, everything is handled.
    return true;
});
```

<!--
This template is for bug reports. If you are reporting a bug, please continue on. If you are here for another reason (such as a feature request, change, or question) you can disregard this template
-->

**What version of async are you using?**
Latest

**Which environment did the issue occur in (Node version/browser version)**
Node Version

**What did you do? Please include a minimal reproducable case illustrating issue.**
Generate huge task into Async Queue, with async type process function.
it somehow become slow down when processing.
1. running for 1440 job for first time, 20 minutes, reboot
2. running for 1440 job for second time, 20 minutes, no reboot
3. running for 1440 job for third time, 2 hours

**What did you expect to happen?**
it should took 20 minutes for 1440 jobs constantly

**What was the actual result?**
1. running for 1440 job for first time, 20 minutes, reboot
2. running for 1440 job for second time, 20 minutes, no reboot
3. running for 1440 job for third time, 2 hours

<!--
This template is for bug reports. If you are reporting a bug, please continue on. If you are here for another reason (such as a feature request, change, or question) you can disregard this template
-->

**What version of async are you using?**
2.6.1

**Which environment did the issue occur in (Node version/browser version)**
Node.js 10.15.3

**What did you do? Please include a minimal reproducable case illustrating issue.**

`cradle.async.waterfall([(next) => {
		console.log(1);
		next(null, 2);  
	}, (a, next) => {
		console.log(a);
		next(null, 3);  
	}], (err, b) => {
		console.log(b);
	});
`
outputs
1
2
3

`cradle.async.waterfall([(next) => {
		console.log(1);
		next(null, 2); 
	}, (a, next) => {
		console.log(a);
		next(); 
	}], (err, b) => {
		console.log(b);
	});
`
outputs
1
2
undefined

`cradle.async.waterfall([(next) => {
		console.log(1);
		next(); 
	}, (a, next) => {
		console.log(a);
		next(null, 3);  
	}], (err, b) => {
		console.log(b);
	});
`
outputs
1
[Function]

and throws the error "TypeError: next is not a function"

**What did you expect to happen?**

On that last of three code examples, I expected output
1
undefined
3

In general, I expected that tasks can receive implicit undefined just as the finalCallback can receive implicit undefined.

Is this caused by the fact that we cannot read the next task prototype (list of params) and construct a series of undefined + callback?

**What was the actual result?**

as stated above

<!--
This template is for bug reports. If you are reporting a bug, please continue on. If you are here for another reason (such as a feature request, change, or question) you can disregard this template
-->

**What version of async are you using?**
3.1.0

**Which environment did the issue occur in (Node version/browser version)**
node 10.16.3

**What did you do? Please include a minimal reproducable case illustrating issue.**
```js
// file_a.js
var a = require('file_b.js');
console.log('str = ', a.str);
// file_b.js
const async = require('async');
async.waterfall([
...
], function(err, result) {
  exports.str = result;
});
```

**What did you expect to happen?**

I expect the output is `str = hello world`

**What was the actual result?**
It is `str = undefined`

I searched for so many solutions. But I could not find one workable.

<!--
This template is for bug reports. If you are reporting a bug, please continue on. If you are here for another reason (such as a feature request, change, or question) you can disregard this template
-->

**What version of async are you using?**
v3.1.0 and also master branch

1. `until`
The example source codes are as below:
```javascript
const results = []
async.until(function test(page, cb) {
    cb(null, page.next == null)
}, function iter(next) {
    fetchPage(url, (err, body) => {
        if (err) return next(err)
        results = results.concat(body.objects)
        next(err, body)
    })
}, function done (err) {
    // all pages have been fetched
})
```
But, `test` function can have only callback function argument. It cannot receive `page` argument.
When I print out `arguments` in the above `test` function, it has only a function as arguments.
Please check this.

2. `whilst`
The example source codes are as below:
```javascript
var count = 0;
async.whilst(
    function test(cb) { cb(null, count < 5;) },
    function iter(callback) {
        count++;
        setTimeout(function() {
            callback(null, count);
        }, 1000);
    },
    function (err, n) {
        // 5 seconds have passed, n = 5
    }
);
```
In `test` function, semicolon seems to be located at the wrong position.
Maybe, the below code is intended.
```javascript
    function test(cb) { cb(null, count < 5); },
```

And, in parameter description of `test`,

> asynchronous truth test to perform before each execution ofÂ iteratee. Invoked with ().

I think its last sentence seems to be modified as `Invoked with (callback)` according to the parameter description of `until`.


**What version of async are you using?**
3.1.0

**Which environment did the issue occur in (Node version/browser version)**
node: 10.16.0

**What did you do? Please include a minimal reproducible case illustrating issue.**
```Javascript
"use strict";
const delay = (timeout) => {
    return new Promise((resolve) => {
        setTimeout(resolve, timeout);
    });
};
const myAsyncFunction = async function () {
    return async.mapLimit([1, 2, 3, 4, 5], 3, async (num) => {
        await delay(2000);
        console.log(num * 2);
        return num * 2;
    });
};
myAsyncFunction().then((result) => {
    console.log(result);
});
```
https://codepen.io/bertyhell/pen/NWKMRvY?editors=0012

**What did you expect to happen?**
The code should output: 2, 4, 6, 8, 10
Then at the end of the mapLimit the code should log the array:  [2, 4, 6, 8, 10]

**What was the actual result?**
The code outputs: 2, 4, 6
The final then is never called, the await on the async.mapLimit just hangs


I discovered after some trial and error that while thenable objects are not supported out of the box, they are supported by `async.asyncify()`, since it checks for `.then()` instead of if it's an instance of a `Promise`. This is an example of a situation where you would need to use `async.asyncify()` even in an environment that natively supports async functions.

I came across this when using the [Knex QueryBuilder](http://knexjs.org/#Builder), which returns a thenable, not a `Promise`.
**What version of async are you using?**
3.1.0

**Which environment did the issue occur in (Node version/browser version)**
node 12.9.1, npm 6.10.2, browser N/A

**What did you do? Please include a minimal reproducable case illustrating issue.**
Issue has a thread in stackoverflow
https://stackoverflow.com/questions/57622495/async-maplimit-with-promise/57659221#57659221

Basically, I have this code:
```
async = require('async');
let numPromise = async.mapLimit(['1','2','3','4','5'], 3, function(num, callback){
    setTimeout(function(){
        num = num * 2,
        console.log(num);
        callback(null, num);
    }, 
    2000);
})
numPromise
.then((result) => console.log("success:" + result))
.catch(() => console.log("no success"));
```

**What did you expect to happen?**
Execute without errors, 'numPromise' should contain a Promise. console should log '2,4,6,8,10' and 'success:2,4,6,8,10'

**What was the actual result?**
It throws an error: TypeError: Cannot read property 'then' of **undefined**

Note: When I use the 'promise-async' module instead of 'async' then this code works well. Documentation says that async.mapLimit (and others) return a Promise when no callback is supplied, but I get undefined. Couldn't find any working sample yet (please also see my suggestion on the 'need samples' issue).

Now that with v3.x my app is breaking since it's browserify + babelify configuration doesn't transform node_modules by default.

See https://github.com/babel/babelify#faq for background.

Suggestion is to add this in your package.json

```
{
  "browserify": {
    "transform": [["babelify", { "presets": ["@babel/preset-env"] }]]
  }
}
```

This will ensure that any app using async and building it with browserify + babelify gets transpiled correctly.

Thanks!