/// Seeks to a specific time (in seconds)
-(void) seekToTime:(double)value;
When using this function when streaming music from the dropbox, The delegate function : 
-(void) audioPlayer:(STKAudioPlayer*)audioPlayer unexpectedError:(STKAudioPlayerErrorCode)errorCode {
  //  errorCode = STKAudioPlayerErrorCodecError
}

Is possible do such things with the library?

start playing .mp3 from url immediately (like streaming or streaming)
cache it and track caching progress during it's playback
save cached file to local storage
I wan't to switch rate when I play audio !Thanks!

Hi, thank for your library, I want to know if it can run on iOS 7.0 or not?. Thanks!

I built a audioqueue framework which can play local and online audio. However, this framework is used lots of your AudioStreamer code.
Can I publish my code onto github? I will mark your copyright signs on parts of your code, of cause.
If you have any questions, please contact me. Thank you!
AudioStreamer is really a good software.

Hi, I wonder if it is possible to stream two HTTP sources and mix them? Thanks a lot! 

Support for CocoaPods 
Support for ARC Project
fixed some warnings

This literally pulls the original blog posts in, and should be cleaned up to reflect the code base as it is today. Though it would be nice if the original 2 code bases for each of the blog posts was available. For a learning tool it would help reflect the changes made over time to the design. With that in mind this might make a better Wiki page if the original code bases were added.

Also cleaning up redundancy in the conditional that determines what to do with if (discontinuous) and moving it to a more clear guard style.

Is this possible? I can't find a feature that would allow this.

 Precision was lost when summing up all the bit-rates together and then dividing it with the count in the -calculateBitRate method. So the bit rate looses couple hundred bits, and thus shows wrong duration for long files, also give wrong progress.

Can be tested with this 60 minute voice sync file given below, run it on VLC or some other player, its total duration is actually 1 hour 36 second, but without the fix of bit-rate, it shows 1 hour 56 second or something. And after every seek, it shows some extra seconds as current progress.

Also added a small method for break down the seconds to HH:MM:SS so that we can take a better look at duration and progress time.

Download the test file from here: https://www.dropbox.com/s/lwg8o42hkpweoxw/60minSyncTest.mp3?dl=0
