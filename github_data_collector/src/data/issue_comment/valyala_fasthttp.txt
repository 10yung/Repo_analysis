You can use the following methods in the handler to find out which
listener the connection is coming in on.
```go
RequestCtx.IsTLS()
RequestCtx.LocalAddr()
RequestCtx.Request.Header.Host()
```
For what it worth, I feel it would be useful to provide use case and wiki so that anyone can get confident about using FastHTTP for their project?

Wiki can provides inner details on FastHTTP or any useful info for developers who havenâ€™t explore into Go yet.

Although, there is a blog:
https://github.com/valyala/fasthttp/blob/master/README.md
As of now the only way to override `Host` header is to use `HostClient` as per [Issue 318](https://github.com/valyala/fasthttp/issues/318). This means we have to manage reusing/cleanup of HostClients ourselves which [fasthttp.Client](https://github.com/valyala/fasthttp/blob/master/client.go#L450-L452) provided out of the box.

We will be writing something very similar to fasthttp.Client to handle this. Is it ok to remove the HostClient if it is not being used from more than MaxIdleConnDuration*2 or something, as we are sure all goroutines for individual connection cleaning would have run?
We don't have access to [connsCount](https://github.com/valyala/fasthttp/blob/master/client.go#L463-L465) as it is an unexported field and was [modified to use connsCount instead of time](https://github.com/valyala/fasthttp/commit/aebec409b0b0ec12e02334d25a1c083cddb017f7). 

```go
if t.Sub(v.LastUseTime()) > (MaxIdleConnDuration*2) {
				delete(m, k)
			}
```

If not, what is the recommendation here?

Hi,

I develop an interface for the [Neo4j HTTP API](https://neo4j.com/docs/http-api/3.5/).
fasthttp is very powerful.

Thanks

> Running tool: D:\Go\bin\go.exe test -benchmem -run=^$ POC\Neo4j\test -bench ^(Benchmark_Neo4j_HTTP_API)$ -v
> 
> goos: windows
> goarch: amd64
> pkg: POC/Neo4j/test
> Benchmark_Neo4j_HTTP_API-4   	1000000000	         0.00105 ns/op	       0 B/op	       0 allocs/op
> PASS
> ok  	POC/Neo4j/test	0.537s
> Success: Benchmarks passed.
Hi,
Was trying the following piece of code.

The idea here is, concurrent requests are received from the users in the `main()` and those requests further sent to endpoints in `req()` concurrently. Each request in `main()` is sent to `5` endpoints concurrently. This code is just to check max QPS handled at the server.

This code fails at higher concurrency. 

`$ wrk -t5 -c100 -d60s 'http://xxx.xxx.xxx.xxx:4000/o'`
After running wrk, **no free connections available to host** appear in the error log. 

I understood what @valyala has explained in #112. But `ctx.Request.ResetConnectionClose()` is no longer seems to be present in the package. Also, couldn't find any alternative.

```
var c *fasthttp.Client
var wLog *os.File

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU())
	fmt.Println("Start test")
	const n = 5

	c = &fasthttp.Client{
		ReadTimeout: 400 * time.Millisecond,
		WriteTimeout: 400 * time.Millisecond,
	}
	cLog, _ := os.OpenFile("test.log", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0666)
	wLog, _ = os.OpenFile("warn.log", os.O_APPEND|os.O_WRONLY|os.O_CREATE, 0666)
	log.Print(":4000")

	e := fasthttp.ListenAndServe(":4000", func(ctx *fasthttp.RequestCtx) {
		start := time.Now()
		done := make(chan bool)

		for _ = range [n]int{}{
			go req(done)
		}
		for _ = range [n]int{}{
			<- done
		}

		t := color.Bold(time.Since(start).Round(time.Millisecond))
		L.LogIt(cLog, map[string]string{
			"T": t,
		})
		fmt.Fprintf(ctx, "ok")
	})
	if e != nil {
		fmt.Println(e)
	}
}

func req(done chan bool) {

	rq := fasthttp.AcquireRequest()
	rp := fasthttp.AcquireResponse()
	defer func(){
		fasthttp.ReleaseRequest(rq)
		fasthttp.ReleaseResponse(rp)
	}()
	rq.SetRequestURI("https://some.api.endpoint/")

	//rq.Reset()  // <- Did not help
	//rq.ResetBody() // <- same here
	//rq.ResetConnectionClose() // <- No longer exists as answered in issue #112 by @valyala

	if e := c.DoTimeout(rq, rp, 400 * time.Millisecond); e != nil {
		L.LogIt(wLog, map[string]string{
			"E": color.Red(e),
		})
	} else {
		fmt.Println(rp.Body())
	}
	done <- true
}
```
So, how do I fix this?

Thanks.
Hi, the net/http package exposes two handy method which are:
* [SetBasicAuth](https://github.com/golang/go/blob/100bf440b9a69c6dce8daeebed038d607c963b8f/src/net/http/request.go#L962)
* [BasicAuth](https://github.com/golang/go/blob/100bf440b9a69c6dce8daeebed038d607c963b8f/src/net/http/request.go#L925)

I could not find those helpers for the Header in the project.


Am I missing something?
If not, what do you think about implementing them as it is related to #609? I would not mind doing it.
The 'CopyTo' method does not copy multipartForm
Hi @valyala @erikdubbelboer @kirillDanshin 

I am wondering whether we ought to migrate `fasthttp` into an organization, `fasthttp` is widely used and it is definitely going to thrive, so I think it's better to make `fasthttp` a formalized open-source project and migrating into an organization could be the first step to do that. I've already seen an organization: [fasthttp](https://github.com/fasthttp) created by @kirillDanshin and what is the blocker that stops the migration?

BTW, thanks for your efforts in building such a awesome http framework~
fix: cannot use custom host in header, usually used in proxy,
the same as "proxy_set_header Host $host" in nginx
see: https://tools.ietf.org/html/rfc2616#page-128
I use req.Header.Read(bufio.NewReader(buf)) to get request, and i need sent this request to a special host, so i call req.SetHost(SPECIAL_ADDR), but then, request head Host value has been change too, i think maybe there is a typo.