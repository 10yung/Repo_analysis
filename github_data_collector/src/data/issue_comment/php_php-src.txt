Hello! This is a continuation of https://github.com/php/php-src/pull/4466 with some enhancements:

- php_opt_error returns -2 instead of '?' to distinguish between requested help and errors
- set show_error argument to true, so cli and cgi print error to sdterr

This PR is the second part of https://github.com/php/php-src/pull/5066

Currently, type errors can be of many forms (see https://3v4l.org/IRXq6 for example code):
- Internal functions with "standard" ZPP:
  - `%s() expects parameter 1 to be int, array given`
- Internal functions with "custom" ZPP:
  - `When only one parameter is given, it must be an array`
  - `Array expected as options when using translate or scale`
  - `Expects string, null, long or boolelan value for PostgreSQL '%s' (%s)`
- User-land functions:
  - `Argument 1 passed to foo() must be of the type string, array given`

I think it would make sense to settle on a single format - in the worst case, on a minimum number of similar formats. In the sense of this, my patch changes the error message structure of internal functions with "custom" ZPP to the one used by user-land functions, but I am open to any discussion about what kind of format to use.

However, I think we could (and should) go further, in which case these questions arise:
- Should we formulate type error messages of internal and user-land functions the same way?
- If so, which format to use?
- Would this change need an RFC? (I guess so)
Remove leftover references to `--with-openssl-dir`, which is not used, as the openssl path is now determined by pkg-config.

Also remove the check of `PHP_OPENSSL` inside `SETUP_OPENSSL`. It's the responsibility of the caller to determine whether they want to enable openssl or not. This should also make IMAP with SSL work, which uses a different option.
Basing myself from the results of: https://gist.github.com/Girgias/b9a2b9926190630d433c84da0ef1b002 which indicate that the I (capital i) length modifier is unused, moreover it's not a C99 length modifier.
While basic support for MSVCRT debugging has been added long
ago[1], the leak checking is not usable for the test suite due to
frequently occuring false positives.  One issue is that in case of
unclean shutdown loads of bogus leaks are reported.  Another issue
is that we are no longer calling `xmlCleanupParser()` on RSHUTDOWN
of ext/libxml[2], and therefore a few bogus leaks are reported
whenever ext/libxml is unloaded.  Yet another issue are bogus leaks
related to `zend_handlers_table`, which is lazily allocated in
persistent memory, and as such never needs to be freed.

We therefore only dump memory leaks on clean shutdown, and also
ignore memory leaks for the mentioned cases.  We introduce
`ZEND_IGNORE_LEAKS_BEGIN()` and `ZEND_IGNORE_LEAKS_END()` to keep
those ignores better readable, and also because these *might* be
useful for other leak checkers as well.

[1] <http://git.php.net/?p=php-src.git;a=commit;h=d756e1db2324c1f4ab6f9b52e329959ce6a02bc3>
[2] <http://git.php.net/?p=php-src.git;a=commit;h=8742276eb3905eb97a585417000c7b8df85006d4>

I suppose we maybe could also get rid of our custom format conversion implementation ``format_converter()`` in ``snprintf.c`` (which would give us support for ``a`` and ``A`` modifier) by relying on the system one.
This PR introduces a new `Stringable` interface that ppl can declare when implementing `__toString`.

This goal is to allow using the `string|Stringable` union type in PHP 8, to accept both strings and objects that implement `__toString()` *and* declare this interface. This is critically missing currently, on codes that deal with stringable objects: they can't be made type-safe.

On purpose, there is no corresponding `is_stringable()` function, because that would require defining what happens when e.g. an `int` is passed to this function, and there are no simple answers to this concern.

On purpose also, for BC, classes that implement `__toString()` aren't required to declare the interface.
Such classes wouldn't pass the above union type, but that's expected, as that's the semantics of the language.

By being simple and without any magic capabilities on its own, this interface is trivially polyfilled on PHP < 8.

Once a polyfill becomes widely available (I would personally add one to `symfony/polyfill-php80` immediately after this PR is accepted), I expect code style checkers to be able to enforce declaring the interface when `__toString()` is used. For projects that don't use cs checkers, that's fine: they'll notice quickly that they missed adding the interface because their users will ask for it when they'll want to pass the `string|Stringable` union type.

Here is the stub declaration of the interface:
```php
interface Stringable
{
   public function __toString(): string;
}
```

Because it adds the `string` return type, this interface has the potential to force a BC break on any existing libraries that want to adopt it.

In order to ease forward and backward compatibility, the PR also adds the return type to existing `__toString` methods when it's not explicit declared already. Returning a string is already enforced by the engine so this doesn't change any semantics.

This way, code moving to PHP8 won't be forced to add the return type explicitly (which would break BC on their side), and code in PHP < 8 can adopt a polyfill interface immediately (one that doesn't declare the return type for the same BC reasons.) Providing an easy forward-path is the second goal of this PR.

For reference, here are some annotations in Symfony, added by contributions from real-world use cases and that currently cannot be expressed precisely enough using any union types in PHP 8:
https://github.com/symfony/symfony/search?q=%22%40param+string%7Cobject%22+stringable&unscoped_q=%22%40param+string%7Cobject%22+stringable
I don't know how controversial this change is and if it would need an RFC, but I see this as a reasonable change as DES is insecure and has been for a long time.

I've also added some sanity tests for the other algorithms (MD5, SHA-256, and SHA-512) and move the relevant tests from the string folder to the crypt folder.
Just seeing which tests need fixing with CI help

Edit: *apparently none*
There are a bunch of expected array warnings, a better way is too probably ask for a HashTable param instead of a zval.