when trying kitgen on one of the examples, it works fine, but when trying to run it on my own service, it panics:
```
C:\Users\OmegaRogue\go\src\go-kit-todolist\todo-service>kitgen service.go
panic: interface conversion: ast.Node is *ast.SelectorExpr, not *ast.Ident

goroutine 1 [running]:
main.walkIdentList.func1(0x6cf580, 0xc0001d43a0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:20 +0x9f
main.walkToReplace.func1(0x6cf580, 0xc0001d43a0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:68 +0x57
main.selectifyIdent.func1(0x6cf200, 0xc0001b0aa0, 0xc0001d96c0, 0x62f701, 0xc0001d96c0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/transform.go:99 +0x11f
main.selIdentFn.Visit(0xc0001c5ac0, 0x6cf200, 0xc0001b0aa0, 0xc0001d96c0, 0xc0001d9660, 0x6d1e00)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/transform.go:86 +0x4b
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf200, 0xc0001b0aa0, 0xc0001dab10)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:71 +0xe4
main.walkIdentList(0x6ce1a0, 0xc0001c5ac0, 0xc000007fd0, 0x1, 0x1)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:19 +0x79
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cefc0, 0xc0001b4180, 0xc0001d9680)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:133 +0x20ad
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf000, 0xc0001b2330, 0xc0001d3ba0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:158 +0x265
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf680, 0xc0001b0860, 0xc0001d3b80)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:324 +0x681b
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf740, 0xc0001b2300, 0xc0001d9400)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:667 +0x6db7
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf180, 0xc0001b40c0, 0xc0001daa20)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:690 +0x2678
main.walkDeclList(0x6ce1a0, 0xc0001c5ac0, 0xc000124600, 0x11, 0x18)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:43 +0x140
main.walkToReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf040, 0xc000163100, 0xc0001d2220)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:734 +0x65f9
main.WalkReplace(0x6ce1a0, 0xc0001c5ac0, 0x6cf040, 0xc000163100, 0x6d1ac0, 0xc0001d4360)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/replacewalk.go:55 +0xa4
main.selectifyIdent(0xc00001048c, 0x4, 0xc000163100, 0x6d1e00, 0xc0001d43a0, 0xc000089930, 0xc000089ca0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/transform.go:104 +0xf8
main.selectify(0xc000163100, 0x66c5c6, 0x7, 0xc00001048c, 0x4, 0xc00000fcb0, 0x24, 0xc000163100)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/transform.go:77 +0x139
main.deflayout.transformAST(0xc00000a41b, 0x1c, 0xc00008c7d0, 0x0, 0xc0000a6500, 0xc00008c7d0)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/deflayout.go:58 +0x1799
main.process(0xc0000100c0, 0xa, 0x6cde60, 0xc000006058, 0x6ce160, 0xc000042530, 0x0, 0x0, 0xc000042510)
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/main.go:102 +0xbf
main.main()
        C:/Users/OmegaRogue/go/src/github.com/go-kit/kit/cmd/kitgen/main.go:80 +0x2ac
```
i can't really find any differences between my code and the example code:
```go
// my code
package todosvc

import "context"

type Service interface {
	Hello(ctx context.Context) (string, error)
	ListAll(ctx context.Context) ([]List, error)
	List(ctx context.Context, user string) (List, error)
}

type List struct {
	User  string              `json:"name"`
	Tasks map[string][]string `json:"tasks,omitempty"`
}
```
```go
// example code
package profilesvc

import "context"

type Service interface {
	PostProfile(ctx context.Context, p Profile) error
	GetProfile(ctx context.Context, id string) (Profile, error)
	PutProfile(ctx context.Context, id string, p Profile) error
	PatchProfile(ctx context.Context, id string, p Profile) error
	DeleteProfile(ctx context.Context, id string) error
	GetAddresses(ctx context.Context, profileID string) ([]Address, error)
	GetAddress(ctx context.Context, profileID string, addressID string) (Address, error)
	PostAddress(ctx context.Context, profileID string, a Address) error
	DeleteAddress(ctx context.Context, profileID string, addressID string) error
}

type Profile struct {
	ID        string    `json:"id"`
	Name      string    `json:"name,omitempty"`
	Addresses []Address `json:"addresses,omitempty"`
}

type Address struct {
	ID       string `json:"id"`
	Location string `json:"location,omitempty"`
}
```

This is an experimental PR suggested by @basvanbeek in https://github.com/go-kit/kit/pull/946#issuecomment-573043128

It adds a span name getter function to the opencensus endpoint tracer config.

Other options might worth adding:

- StartOptions
- GetStartOptions

See the opencensus ochttp plugin for more.
I'm playing around with jwt errors handling and I found out that there is a [HS256-specific error](https://github.com/dgrijalva/jwt-go/blob/dc14462fd58732591c7fa58cc8496d6824316a82/hmac.go#L21) in jwt-go library that is returned as inner error by the go-kit parser. I believe that this error should be handled by the parser and `ErrTokenInvalid` should be returned.

Any thoughts?
This PR adds a middleware to the `endpoint` package that attaches an operation name to the context, as well as adds support to the existing tracer implementations to use this name in a backward compatible way.

It's supposed to be a (near) top level middleware in the chain, so subsequent middleware can utilize it:

```go
func MakeEndpoint() endpoint.Endpoint {
	return endpoint.Chain(
		endpoint.EndpointNameMiddleware("endpointName"),
		someTracing.TraceEndpoint(tracer, ""), // do not set an operation name
		LoggingMiddleware(logger),
	)(endpointFunc)
}
```

The motivation behind this middleware is to avoid duplicating an endpoint name when setting up the chain:

```go
func MakeEndpoint() endpoint.Endpoint {
	return endpoint.Chain(
		someTracing.TraceEndpoint(tracer, "endpointName"),
		LoggingMiddleware(logger, "endpointName"),
		SomeOtherMiddleware("endpointName"),
	)(endpointFunc)
}
```

The middleware can also help with moving other middleware depending on a name to a global chain:

```go
func MakeEndpoint(globalMWs []endpoint.Middleware) endpoint.Endpoint {
	return endpoint.Chain(
		endpoint.EndpointNameMiddleware("endpointName"),
		globalMWs..., // tracer and logger does not have to be setup per endpoint with a name
	)(endpointFunc)
}
```

Last, but not least this middleware can easily be used by code generation tools to automatically populate the context with an operation name without manually initializing it.

**TODO**

- [ ] Think about a better name for the middleware (eg. `OperationName` is used by tracing implementations)
- [ ] What should happen when a name is empty? (fallback to a default one, like the tracing implementations do, return the original endpoint directly, or attach an empty name to the context?)
Hello, 
I have use kit generate to create some cmd, but when i get import from "github.com/openzipkin/zipkin-go-opentracing", I can not use .NewHTTPCollector(), .NewRecorder(), .NewTracer(). Please help me.
Thank you very much
when I do `go get`, the output is
```
go: github.com/go-kit/kit/examples/stringsvc4 imports
        github.com/nats-io/go-nats: github.com/nats-io/go-nats@v1.8.1: parsing go.mod:
        module declares its path as: github.com/nats-io/nats.go
                but was required as: github.com/nats-io/go-nats
```

looks like it is here that the error is picking up on https://github.com/go-kit/kit/blob/master/examples/stringsvc4/main.go#L16

Any tips/workarounds/fixes?
Thanks for the wonderful product!
I think it would be fair to point the limitations of calling New in the documentation, since calling New again calls panic.
Hi,

1. We want to use the go-kit log [`logrus adapter`](https://github.com/go-kit/kit/blob/master/log/logrus/logrus_logger.go) library and we found something a bit strange,
every time you want to use the log API you must provide the key message "msg" for the main message otherwise it will be printed as empty

2. why the log every-time printed as `info` even though filtering correctly according

`level.Debug(logger).Log("message", "in debug mode", "key2", "foo")`

This prints: 
`
{"key2":"foo", "fields.level":{},"level":"info","message":"in debug mode","msg":""}
`

Thanks,

My `sd.Endpointer` have endpoints which call different data centers. Round Robin choses endpoints on a cyclic basis but call of some instances, placed further than other ones, takes longer time. I want the call of further endpoint only to come when near endpoint returns error. Is there way to give a priority to endpoint? If there is no realization please help me with design.
Asked this question on Slack some time ago:


> How do you all use the JWT middleware to return proper status codes to the user?
>
> I don't want JWT errors to show up in the server error logs (since they are client errors), so for now I added another endpoint middleware in front of it which converts returned errors to `endpoint.Failer` instances and returns them as endpoint responses instead of errors.
>
> This also means that I can't use the `ServerErrorEncoder` to encode these errors. Error encoding is now part of the response encoding, which is also not ideal (I have to add error encoding to all response encoders).
>
> One alternative solution I see is implementing some sort of "filtering" in the `ServerErrorHandler` to skip client (4xx) errors, like invalid token errors.
>
> I would love to hear other opinions. I also noticed that while the basic auth returns a common error type, jwt auth does not. Is that on purpose?


I just wanted to open an issue for it so that it can serve as a base for future discussions about error handling in go-kit.