- remove instances of "just"

Fixes https://github.com/angular/material.angular.io/issues/686

The 5 column markdown table added in PR https://github.com/angular/components/pull/7837 causes responsive issues on most mobile devices.

### Before
![toolbar responsive issue screenshot](https://user-images.githubusercontent.com/39260684/70200893-f38f0580-173a-11ea-9a0c-36341302e861.png)
After updating to iOS 13.x my Angular Apps Swipe gesture is no longer working properly to show side menu items. After updating it fails to to lock the cdk-virtual-scroll-viewport leading to undesired behavior. I am using hammerjs to lock the list from scrolling when swiping. The events seem to be interrupting each other, did something change in iOS or this plugin as the translateX we are doing on horizontal gestures is being cancelled by scrolling instead of being locked.

Versions in use:

- Angular 8.1.1
- hammerjs 2.0.8
- @angular/cdk/scrolling 8.2.3
See also #15251 , autolocked by the "fine" autolock bot

#### Reproduction

Steps to reproduce:
1. create a matBadge with more than 2 digits
2. observe
 
 
#### Expected Behavior

What behavior were you expecting to see?

seeing all 3 digits, or even 4 or 5 or 10

#### Actual Behavior

What behavior did you actually see?

After `99`, I see `1..`

#### Environment

- Angular: 8.3.20
- CDK/Material: 8.2.3
- Browser(s): any
- Operating System (e.g. Windows, macOS, Ubuntu):  any

#### Suggestion

Add an option to expand the badge or have an option to set the cutoff digits.

`matBadgeOverflow="2`" being default

`matBadgeOverflow="3`" meaning overflow after 3 digits

`matBadgeOverflow="*`" meaning no overflow

Allows for an `AbstractControlDirective` to be passed in as the `MatFormFieldControl.ngControl`. The advantage of passing in the abstract control directive is that it allows both form controls and form groups. This is necessary for the date range picker.
#### Reproduction

Stackblitz: https://stackblitz.com/edit/angular-wkr9so

Steps to reproduce:
1. Drag element from 'To do' to 'Done'
 
#### Expected Behavior

No exception and it gets inserted normally into the 'Done' list. It works when there is no ngbTooltip used.

#### Actual Behavior

Element does not get inserted in 'Done' list and Exception occurs in _cleanupDragArtifacts (because parentNode is undefined where it is expected to be defined):

```
Unhandled Promise rejection:
Cannot read property 'insertBefore' of null
; Zone:
<root>
; Task:
Promise.then
; Value:
Error: Cannot read property 'insertBefore' of null
TypeError: Cannot read property 'insertBefore' of null
at DragRef._cleanupDragArtifacts (https://angular-wkr9so.stackblitz.io/turbo_modules/@angular/cdk@8.2.3/bundles/cdk-drag-drop.umd.js:1032:63)
at eval (https://angular-wkr9so.stackblitz.io/turbo_modules/@angular/cdk@8.2.3/bundles/cdk-drag-drop.umd.js:861:23)
at ZoneDelegate.invoke (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:391:26)
at Zone.run (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:150:43)
at eval (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:910:34)
at ZoneDelegate.invokeTask (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:423:31)
at Zone.runTask (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:195:47)
at drainMicroTaskQueue (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:601:35)
at ZoneTask.invokeTask [as invoke] (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:502:21)
at invokeTask (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:1693:14)
at HTMLDivElement.globalZoneAwareCallback (https://angular-wkr9so.stackblitz.io/turbo_modules/zone.js@0.9.1/dist/zone.js:1719:17)
```


#### Environment

- Angular: 8.2.9
- CDK/Material: 8.2.2
- Browser(s): Chrome 79.0.3945.117
- Operating System (e.g. Windows, macOS, Ubuntu): Windows 10

#### Reproduction

Use StackBlitz to reproduce your issue: https://stackblitz.com/fork/components-issue

Steps to reproduce:
1. When trying to reassign useValue in unit test from after it was assigned in the poviders array:
 providers: [
        {
          provide: MAT_DIALOG_DATA,
          useValue: dataDialogSrv
        }
by using TestBed.overrideProvider(MAT_DIALOG_DATA, {useValue: dataDialogSrv2}) in the individual 'it' statement, it is not working to change the value. This is true even when .compileComponents() is not run after the providers. 
2. in unit test:

beforeEach(async(() => {
    TestBed.configureTestingModule({
      imports: [
       MyModule
      ],
      declarations: [
      MyComponent
      ],
      providers: [
        provideMockStore({ initialState }),

        {
          provide: MAT_DIALOG_DATA,
          useValue: {name: 'test1'}
        }
      ]
    });
it('should change value of MAT_DIALOG_DATA ', () => {
 TestBed.overrideProvider(MAT_DIALOG_DATA, {useValue : {name: "test2"}});
TestBed.compileComponents();
fixture.detectChanges();

component.ngOnInit();
     fixture.detectChanges();
    expect(component.data).toEqual({
       name: 'test2',
});

});
 
 
#### Expected Behavior

What behavior were you expecting to see?
test should pass

#### Actual Behavior

What behavior did you actually see?
test is failing because name value is still 'test1'

#### Environment
Angular, Material, karma, jasmine, Windows
- Angular:
- CDK/Material:
- Browser(s):
- Operating System (e.g. Windows, macOS, Ubuntu): 

IE/Edge can throw an error for a datepicker input which has a static `disabled` binding. The error is thrown, because static bindings in Ivy are invoked before the element is in the DOM which browsers seem to have an assertion against.

**Note:** I wasn't able to write a unit test for this, because we need to get a hold of the input during creation mode, before directives are matched, which seems to not be possible with `TestBed`.
ConfigurableFocusTrap is part of a new FocusTrap design that will trap more
than just tab focus.

This commit sets up the classes for the new design, and implements the primary
strategy for preventing focus outside the trap (an event listener that
refocuses the trap). Logic to trap screen reader focus and wrap tab
without the hidden tab stops will be in future commits. Migration of
cdkTrapFocus, MatDialog, etc. will also be in future commits.

This commit does not enable ConfigurableFocusTrap anywhere.
Don't detect Chrome for iOS as a Safari browser when running on a mobile iOS device

Fixes #18197
#### Reproduction

https://stackblitz.com/edit/components-issue-wmz3pi

Steps to reproduce:
1. Visit on "Chrome for iOS" browser
 
 
#### Expected Behavior

When browsing a site with Chrome for iOS on mobile  `platform.WEBKIT` should be true `platform.SAFARI` should be false


#### Actual Behavior

`platform.SAFARI` is true


#### Environment

- Angular:
- CDK/Material: 8.0.0
- Browser(s): Chrome for iOS, 
- Operating System (e.g. Windows, macOS, Ubuntu): iOS
