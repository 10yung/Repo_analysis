Kindly guide me how to convert angularjs .js files to .ts files using typewiz 
For a long time, I dream of a tool that would automate or at least simplify the creation of tests.
Indeed, when working with javascript, we often work with large json structures. And so to write the unit tests, we have to write mocks with all this data. And this is therefore very time-consuming, more than describing the test itself.

I would dream to have a tool, which when running an application, that it is able to record all the input output of a function, and then why not generate the tests of this function.

I have the impression that what the approach made by typewiz, could allow to realize that? At least record the inputs and outputs of each function.
What do you think ? Would that be possible?

Ps: for now I have not yet managed to run typewiz.
When run serve project, I have VM661:1 POST http://localhost:4949/__typewiz_report 404 (Not Found). 
Does we need to run something else before running angular ? 

I have added typewiz, with the angular typescript schematics. 


the coverage utility is quite helpful. i notice that it increments the penalty for every use of an `any` variable. maybe this is working as designed, but i think it would be more helpful to penalize `any` variables once per declaration, rather than once per use?

my thinking is that the magnitude of the fix is proportional to the number of declarations that need to be typed, rather than the number of such uses?
It would be nice to offer a TypeWiz badge for repo's type coverage rate.
While the typewiz-jest work (#49) is baking, I was seeing if there was a quick path to getting typewiz instrumentation in jest for create-react-app specifically.  I tried registering typewiz-node before jest.run(), but no luck.  I was curious if you had some ideas here, in case you have already looked at how to make jest work.

I've created new branches in the following two repos, under the typewiz-jest branch:

- https://github.com/zxti/cra-typewiz-example: A fresh create-react-app-ts project but with a small untyped test added.
- https://github.com/zxti/react-scripts-ts: The react-scripts-ts that registers typewiz-node in the test.js react script.

To repro:

```
cd react-scripts-ts
git checkout typewiz-jest
yarn link
yarn install
cd ../cra-typewiz-example
git checkout typewiz-jest
yarn link react-scripts-ts
yarn install

CI=true yarn react-scripts-ts test --runInBand --env=jsdom hello-spec
```

The final line runs tests without watcher mode (CI=true), and runs tests serially with --runInBand (to prevent forking).  I verified that the test is running in the same process as the one that called require('typewiz-node/dist/register'), but still no luck!

As another approach, I also simply tried registering typewiz-node from within src/setupTests.ts, but that causes jest to spit errors about receiving Typescript rather than Javascript....
This should address #36, #61. 

We also change here the format of the collected types file, so it will be a breaking change.
Is there an easy way to combine the collected types from typewiz-webpack and multiple typewiz-node runs?

I think there are two specific questions here:

- When I go from page to page, typewiz-webpack regenerates a new collected-types.json (it's cleared on page load). Can I combine multiple?

- typewiz-node immediately applies types to the codebase on termination.  Is there any way to instead get a collected-types.json, in the same fashion as typewiz-webpack?

Even if you had a simple snippet or some such for combining these, that would be fantastic.  I tried simply concatenating the .json files, and that did not go over well.  :)  Thanks!

(My use case: I'm interested in types from many typewiz-webpack outputs over frontend code, typewiz-node outputs over server code, and typewiz-node outputs over jest executions.)
Typewiz seems to change objects by replacing their fields with property getters and setters—this makes sense, since it needs to track the types of the values being written.

However, wherever one uses something like Object.assign(), the spread operator, lodash.extend, etc., things seem to break—these functions aren't able to enumerate the fields (since they aren't real fields).

Do you have any suggestions on dealing with this?  Thanks!
AngularJS Material uses gulp to build everything, so we're looking at using https://github.com/ivogabe/gulp-typescript for our builds. It seems like something could be built similar to the webpack plugin in order to have the types added during the Gulp pipeline.

It's not clear if typewiz-node could help with this already or not. We don't have a single `main.ts` to point to. Should we do something like `typewiz-node gulpfile.ts`?

All of our tests are Karma and Jasmine. So due to https://github.com/urish/typewiz/issues/70, it doesn't look like that is a viable path for generating our types at this time.