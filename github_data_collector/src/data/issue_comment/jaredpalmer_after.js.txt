@all-contributors please add @nimaa77  for code, question, example, test, doc, tool and ideas
Hi, we have some private routes in our app. What we do at the moment is wrapping a higher-order component around the component:

```js
const routes = [
  {
    path: '/private',
    component: requireAuth(PrivateComponent)
  }
]
```

The HOC checks the auth status of the user and redirects if the user isn't logged in.

This approach works just fine but I'm wondering what the best approach would be to mark routes as private when using asyncComponents. One option I can see would be wrapping the `requireAuth` part around the actual implementation in the component file but that seems a bit hacky.

Would love to see how others solved this problem!

Thanks
David
Hi,
componentWillReceiveProps has been deprecated, it'll be nice if its changed to UNSAFE_componentWillReceiveProps or fixed using the current react lifecycles.

## Question!

I am curious if it's sensible to use razzle+after.js without ssr. I like the architecture, and having the option of turning on ssr if needed, but not having it on by default.
## Question
Is there a normal way to disable the auto-scroll-to-top on route change? I mean normal without having to fork the after.js?

## Current Behavior
Every route change triggers the `window.scrollTo(0,0)` and it can be pretty infuriating when you're creating a UI that's route dependent, but doesn't need the "scroll-to-top" thing.

## Desired Behavior
There's a way to just disable it with either .env variable or some setting.

## Suggested Solutions
Just a simple .env setting that can be set. `SCROLLTOTOP=false` could probably do it.

---

<!-- PLEASE FILL THIS OUT -->
- After.js Version: 1.4.0
- Razzle Version: 3.0.0
- React Version: ^16.10.2

After.js doesn't support Tree-shaking, this causes `render.js`, and `Document.js` get inside the client (browser) bundle.

Anyone who uses `after.js` can save about 60KB easily (in 2 seconds).

`render.js` includes `ReactDomServer` and webpack nodejs for browser runtime, and it's packed inside the client bundle

![image](https://user-images.githubusercontent.com/25016067/65345551-ccbb3b80-dbef-11e9-96f5-53e122e4a087.png)

Document.js 3.61KB
render.js 3.58KB
reactdom-server.browser.production.min.js 18.77KB (this is ReactDom.RenderToString that works in browser, and it's in bundle because of `render.js` file)
Url.js 7.53KB
punnycode.js, react-side-effect.js, querystring-es3.js, ...

**total: 57.29KB**

## Desired Behavior
to not include unnecessary packages and save about 60KB 

![image](https://user-images.githubusercontent.com/25016067/65347830-135f6480-dbf5-11e9-8786-97980a53a039.png)

---
Also, there was a problem with `ensureReady.js`and `render.js` files, in which the default exported module was not correct.

Before:
```js
module.exports = require('./build/cjs/ensureReady');
```

After:
```js
module.exports = require('./build/cjs/ensureReady').ensureReady;
```

with the above changes, users can use safely use `babel-plugin-transform-imports` in situations that build system is not able to handle es modules.

### Breaking Changes
There is no breaking change ðŸŽ‰
## Bug?
After.js doesn't support Treeshaking, this causes render.js, and Document.js get inside the client bundle. 

Anyone who uses after.js can save about 60KB easily (in 2 seconds). 

## Current Behavior

render.js includes React Dom Server and webpack nodejs for browser runtime, and it's packed inside the client bundle

![image](https://user-images.githubusercontent.com/25016067/65345551-ccbb3b80-dbef-11e9-96f5-53e122e4a087.png)

Document.js 3.61KB
render.js 3.58KB
reactdom-server.browser.production.min.js 18.77KB (this is ReactDom.RenderToString that works in browser, and it's in bundle because of `render.js` file)
Url.js 7.53KB
punnycode.js, react-side-effect.js, querystring-es3.js, ...

**total: 57.29KB**

## Desired Behavior
to not include unnecessary packages and save about 60KB 

![image](https://user-images.githubusercontent.com/25016067/65347830-135f6480-dbf5-11e9-8786-97980a53a039.png)


## Suggested Solutions 

1. Fix Imports! (temporary solution)

From:
```jsx
import { asyncComponent } from '@jaredpalmer/after';
import { After, ensureReady } from '@jaredpalmer/after';
```
To:
```jsx
import asyncComponent from '@jaredpalmer/after/asyncComponent';
import After from '@jaredpalmer/after/after';
import ensureReady from '@jaredpalmer/after/ensureReady';
```
2. use ESM build in project (if you are not librray maintainer ignore this solution)
```javascript
// tsconfig.build.json
  ...
  "module": "esnext",
  ...

// pacakge.json
  ...
  "sideEffects": false,
  "module": "build/index.es.js",
  ...
```
but me personally prefer to use [tsdx](https://github.com/palmerhq/tsdx) and some build script like [formik package.json](https://github.com/jaredpalmer/formik/blob/master/package.json) file, we need more options in `after.js` build process (like `__DEV__`).

---


- After.js Version: 1.3.1
- Razzle Version: 3.0.0
- React Version: 16.9.0
- TypeScript Version: 3.5.2
- OS: Gnu/Linux Fedora 30
- Node Version: 12
- Package Manager and Version: yarn v1.17.3

with `asyncComponent` you split part of your application into a new chunk and on BROWSER when you need that part of your code it gets downloaded automatically. when page rendered on the server there was no way to understand which chunks needed for the current request so After.js only sends `bundle.js` and `main.css` file, then on BROWSER with `ensureReady` method it tries to fetch chunks (split CSS and JS files) needed for the current request. and it's slow!

#### WHY?

1. browser must download `bundle.js`, then parse it and at the end, it executes the code. when code gets executed `ensureReady` method gets called, `ensureReady` finds and download chunks needed to render the current page and when all files get downloaded it start to re-hydrate.

2. browser will render the page without CSS styles (because we split them and it will get them when `ensureReady` called), this makes the site look ugly for 2,3 seconds (bad UX).

3. have you ever think about why CSS is render blocking?
   if browser finds a `<link rel="stylesheet">` tag, it would stop rendering page and waits until CSS file be downloaded and parsed completely (this mechanism is necessary to have fast page renders), if CSS files attach to dom after page gets rendered, the browser must repaint the whole page. (painting is too much job for browser and it's to slow)

in this PR I solved this problem and it sends all JS and CSS files needed for current request in the initial server response.


### What else is new
1) Upgraded React Router Dom to Version 5
2) Eliminates all warnings in `<StrictMode>` (There is still one warning from React Helmet Package)

### There are some Breaking Changes
Read [MIGRATION GUIDE](https://github.com/nimaa77/after.js/blob/feature/assets/UPGRADING.md#migrating-from-v1-to-v2) for more information 
Thanks for providing good solution.

It would be great have definition for injected props.

Examples.
https://github.com/swcho/razzle-with-afterjs-custom/blob/a19cea7ee334b83da2de02b4a44d8aaf2a0fd24f/src/Home.tsx#L49-L59
# Feature Request

## Problem Description

I was trying to setup After.js with Custom Route transitions, using Posed, as described in this article: 
https://popmotion.io/pose/learn/route-transitions-react-router/

Unfortunately Pose just works properly, if the `Switch` component can be wrapped directly and is passed a `location` prop explicitly. Which is not possible by default with `After.js`

## Suggested Solutions

I got it working by forking the implementation of the `After` component to allow me to wrap the `Switch` component directly in a transition container (see https://github.com/MrLoh/afterjs-apollo-rnw-styled-pose-example/blob/master/src/AfterWithTransition.js)

This is obviously not a great solution. Maybe it would be possible to pass a `Wrapper` component to the `After` component to prevent this issue. Since the `After` component is only used explicitly on the client, this introduces more complexity though. 

I could imagine, that it would be easier, if the interface for `customRenderer` also explicitly uses the `After` component and requires also setting the `StaticRouter` manually. This would also help in setting up content for all routes like a header outside of the router switch, which currently isn't possible on the server. 

I'd be happy to come up with a PR, but this should be discussed first, as it deals with the architecture of After. 

---

- After.js Version: latest
- Razzle Version: 2.4.0
- React Version: 16.4.2
- OS: macOS 10.13.6
- Node Version: 10.1.0
- Package Manager and Version: yarn 1.6.0
- Demo Repo or Link: https://github.com/MrLoh/afterjs-apollo-rnw-styled-pose-example