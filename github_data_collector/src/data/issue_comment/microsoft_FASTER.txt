This is related to https://github.com/microsoft/FASTER/issues/235.

When recover fails, usually the serializer will be activated with a bad data stream.
The actual call stack of deserialization will cause an unhandled exception to bubble up and kill the process.
A possible workaround would be to catch the exception on the site. But then it would not be pretty the wire the explosion back to business code.
Also, a corrupted data stream is a show stopper anyway.

## Call Stack Root:
 	System.Private.CoreLib.dll!System.Threading._IOCompletionCallback.PerformIOCompletionCallback(uint errorCode, uint numBytes, System.Threading.NativeOverlapped* pNativeOverlapped)	Unknown

![image](https://user-images.githubusercontent.com/16569217/72616005-bc546c80-3914-11ea-8340-7f01f3906718.png)

## Process Crash

> The active test run was aborted. Reason: Test host process crashed : Unhandled exception. System.Text.Json.JsonException: The input does not contain any JSON tokens. 
> [REMOVED FOR CONCISION]
>    at FasterDictionary.FasterDictionary`2.BaseSerializer`2.Deserialize(TContent& obj) in C:\Codigo\FasterDictionary\FasterDictionary\src\FasterDictionary\FasterDictionary.Serializers.cs:line 88
>    at FasterDictionary.FasterDictionary`2.ValueSerializer.Deserialize(ValueEnvelope& obj) in C:\Codigo\FasterDictionary\FasterDictionary\src\FasterDictionary\FasterDictionary.Serializers.cs:line 41
>    at FASTER.core.GenericAllocator`2.Deserialize(Byte* raw, Int64 ptr, Int64 untilptr, Record`2[] src, Stream stream)
>    at FASTER.core.GenericAllocator`2.AsyncReadPageWithObjectsCallback[TContext](UInt32 errorCode, UInt32 numBytes, NativeOverlapped* overlap)
>    at System.Threading._IOCompletionCallback.PerformIOCompletionCallback(UInt32 errorCode, UInt32 numBytes, NativeOverlapped* pNativeOverlapped)


## Proposal

There should be a way to communicate a bad stream back to the Recover call site.
Could we have a context (maybe as a parameter to serializer methods), so we can signal any problems?
I'd gladly detail and prepare a PR.

In the current version of FASTER C++, on Linux, we use `libaio` for async IO handling. It is a known issue that `libaio` is not very efficient. Recently, `io_uring` is released with Linux kernel 5.1, which advertises to be a high performance aysnc IO library. It would be useful to try it and see if we can improve disk performance on Linux by replacing `libaio` with it.

More details for io_uring can be found here: http://kernel.dk/io_uring.pdf
Right now, the FASTER constructor takes `IFunctions` as input. These function callbacks identify how to perform operations such as reading/writing, RMW in-place and copy-updates, etc.

An interesting alternative would be to provide them later, during session creation, and associate the functions with sessions instead of the main FASTER instance. This would let different sessions use different functions. E.g., one session could perform RMW for incrementing field1 while another could perform a different function.

It would make it easier to use the same FASTER instance to store different forms of data (one can do it even today, via functions that switch between the different operations based on input, but maybe a bit more cumbersome). Note that all the sessions will still see the same data types (TKey, TValue, TInput, etc.) but will be able to operate on the data in a customized way.

Further, the late binding of functions means that users can change the function being performed during runtime, by simply deleting the older session and creating a new session with the new functions.

There might be a performance implication due to the late binding - this is as yet unknown.
Is it possible to Write (TryEnqueue) in FasterLog and periodically read from same FasterLog and truncateuntil simultaneously?
I get "Unable to add item to list" exception during this process
Implemented a checkpoint and log commit using cloud storage, completing the device package.

Also adds some refactoring for the original code.

More testing is needed before merge. Opening this PR now so it is visible and I don't forget.
The test fails (from time to time) in CI run for Linux build:
```
[ RUN      ] PagingTest_Queue.UpsertRead_Concurrent
/home/vsts/work/1/s/cc/test/paging_test.h:590: Failure
Expected equality of these values:
  Status::Pending
    Which is: 1-byte object <01>
  result
    Which is: 1-byte object <02>
[  FAILED  ] PagingTest_Queue.UpsertRead_Concurrent (7759 ms)
```

Example of CI runs:
https://dev.azure.com/ms/FASTER/_build/results?buildId=49011
https://dev.azure.com/ms/FASTER/_build/results?buildId=48979
Hi!
If I understand the code correctly, the C# version of FASTER doesn't handle `CPR_SHIFT_DETECTED` and `RETRY_LATER` `OperationStatus`es in `Delete` method.
We would like to support a separate read cache in FASTER C++. The basic idea is to have a separate instance of the hybrid log that acts as the read cache and sits between the hash table and the main hybrid log.

* The index points to records in either the read cache or the log.
* Entries in the read cache point to their previous record, either on the read cache or the main log.
* Main log entries never point to the read cache
* The read cache has two regions in memory, identical to the main log. Reads of records in the "immutable" region cause them to be copied over to the tail, serving as the cache policy.
* When pages expire from the read cache head address, expiring records need to be evicted, i.e., their previous pointers have to be updated.

Read more about the read cache in the C# PR here: https://github.com/microsoft/FASTER/pull/92
Hi.
Are there plans to refactor C++ part of the project to be conformant with /W4?
The C# version of FASTER has the ability to compact a portion of the head of the log, copying live records to the tail. We need to port this capability to C++. This is a straightforward enhancement and the design is already flushed out in the C# version. More info can be found in the C# PR https://github.com/microsoft/FASTER/pull/112

Depends on https://github.com/microsoft/FASTER/issues/171