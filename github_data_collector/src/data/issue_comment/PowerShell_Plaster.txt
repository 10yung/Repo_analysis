Added ability to substitute whole files into Modify content element.

By specifying isFile="true", Invoke-Plaster will load and substitute an entire file into the variable. See example below:

```
            <replace condition="$PLASTER_PARAM_Custom_LoggingType -eq 'AppInsights'">
              <original>#PLASTER_Snippet_PSScript_Code_Main_Logging#</original>
              <substitute isFile='true'>.\SupportingDirectories\Template\PSSnippets\Snippet_PSScript_Code_Main_Logging.ps1</substitute>
            </replace>
```
Added explanation of dynamic parameters in Example2
I found the `Plaster` module in the `vscode` module folder and wanted to check it out. After reading the examples and trying them out it appears that [example 2](https://github.com/PowerShell/Plaster/blob/master/docs/en-US/Invoke-Plaster.md) doesn't work:

`Invoke-Plaster -TemplatePath . -Destination ~\GitHub\NewModule -ModuleName Foo -Version 1.0.0`

> Invoke-Plaster : A parameter cannot be found that matches parameter name 'ModuleName'.
The parameters for `FullName` and `Email` are read from the `.gitconfig` file of the user. The issue I have seen is that Plaster looks under `%userprofile%` but sometimes these files are stored elsewhere because git looks at `%homedrive%` and `%homepath%`. 

Because it's possible to store the previous values entered, this is a very minor issue. However, you may want to change how plaster looks for users' git files. 
I see there are some open merges and it doesn't look like the PowerShell Gallery has the latest version of the code.  Is this dead?
Related issue: https://github.com/PowerShell/PowerShell/issues/6818

When trying to import Plaster in PowerShell Core 6.2, the `Test-ModuleManifest` call in `Plaster.psm1` is failing, stating the manifest is invalid.  I am able to remediate this interactively doing

```powershell
Get-Module -ListAvailable -Refresh
Import-Module -Name Plaster -Force
```

but this remediation does not work when executed from my powershell profile.

Note: I could not replicate the behavior in Windows PowerShell 5.0.

***

My current workaround is modifying the `psm1` to:

```powershell
$PlasterVersion = [version](Import-PowerShellDataFile -Path $PSScriptRoot\Plaster.psd1)['ModuleVersion']
```

***

### Environment Details
* Windows 7 SP1 x64
* PowerShell Core 6.2
Instead of a single file I want to copy complete folders with content. Is that possible too?
NewModule-example still used 0.1.0 schema for VSCode tasks.json including the `"isShellCommand": true`-bug that was fixed in #257 . Updated remaining tasks.json to 2.0.0 schema.
I've noticed that if I have several version of the same module containing a plaster template inside (even if the manifest has the same version), `Get-PlasterTemplate` cmdlet returns all instances of the templates from all the versions of the same module. So if I have the following:
* MyTemplatesPSModule v 1.0.0.0
  * MyTemplate v1.0.0.0
* MyTemplatesPSModule v1.0.0.1
  * MyTemplate v1.0.0.0
* MyTemplatesPSModule v1.0.0.2
  * MyTemplate v1.0.0.1

Running `Get-PlasterTemplate -IncludeInstalledModules` currently returns all three templates (besides the default ones). This behavior makes me want to make sure that I uninstall previous versions of such modules right after Update-Module. Is there really a need to go through all the PS Module versions instead of just the latest ones? To me it seems that going through the latest ones only should be the default behavior (similar to Import-Module) besides, it should run faster. If there's actually a need to expand all previous module versions, the functionality could still be accessible through a dedicated switch (i.e. -ExpandAllModuleVersions). There might as well also be an additional switch (i.e. -IncludeAllTemplates) to list out all template instances even if their versions are identical, as follows:

```PowerShell
Get-PlasterTemplate -IncludeInstalledModules
# Should return: 
# Default Templates 
# MyTemplate v1.0.0.1

Get-PlasterTemplate -IncludeInstalledModules -ExpandAllModuleVersions
# Should return: 
# Default Templates 
# MyTemplate v1.0.0.0 (from MyTemplatesPSModule v1.0.0.1)
# MyTemplate v1.0.0.1

Get-PlasterTemplate -IncludeInstalledModules -ExpandAllModuleVersions -IncludeAllTemplates
# Should return: 
# Default Templates
# MyTemplate v1.0.0.0 (from MyTemplatesPSModule v1.0.0.0)
# MyTemplate v1.0.0.0 (from MyTemplatesPSModule v1.0.0.1)
# MyTemplate v1.0.0.1
```

The multi choice parameter allows you to use the same letter as a shortcut key for more than one choice.

```powershell
<choice label="&amp;Private"
        help="Adds a Private folder to the module root."
        value="Private" />
<choice label="&amp;Public"
        help="Adds a Public folder to the module root."
        value="Public" />   
```

In the above example, if the letter "P" is used as a shortcut it will create both the Private and Public folder. My _current_ work around is to use different letters.

```powershell
<choice label="P&amp;rivate"
        help="Adds a Private folder to the module root."
        value="Private" />
<choice label="P&amp;ublic"
        help="Adds a Public folder to the module root."
        value="Public" />   
```

It seems buggy that Invoke-Plaster, and perhaps Test-PlasterManifest, would allow for this behavior. The expected behavior would be an indication to the user that there's a conflict, and that a different value should be used for one of the choice labels.