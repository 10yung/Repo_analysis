https://github.com/arximboldi/immer/blob/a28718c0511ae41503b1c6ef36f4b5368fa717ba/immer/detail/hamts/bits.hpp#L86-L103

The line in question is `return __popcnt64(x);`. This converts a 64-bit value (between 0 and 64) to a 32-bit count_t (which has no chance whatsoever to overflow, but the compiler doesn't know that).

As a result, I get "warning C4244: 'return': conversion from 'unsigned __int64' to 'immer::detail::hamts::count_t', possible loss of data".

I think `return static_cast<count_t>(__popcnt64(x));` should clear up this warning without changing behavior.

Sidenote: I think I'm not going to be using Immer, since I'm struggling with nested immutable data updates. One way would be to port the API of https://github.com/immerjs/immer to C++ but using getter/setter methods instead of properties. But I've decided to use a double-buffered document with mutexes instead.
immer now generates the following warnings in Xcode 11(and similar in Visual Studio 2019) 
![image](https://user-images.githubusercontent.com/1244606/71654618-aae45f80-2d6d-11ea-816f-95fe587cbbb0.png)
It would be nice if these could be fixed.

I'm writing an audio engine which needs to recompute note timings each time the list of events changes.

It seems like flex_vector's memory layout is a rrbtree, which contains a few pointers/integers, and should be comparable for "identity equality" (not content equality).

Is there a constant-time way to check if a `immer::flex_vector` shares the same identity as another one (they're copies of each other or another object)? I'm using this in order to invalidate/recompute a program cache.
- == vec.begin()?
- `#define private public` and == `vec.impl_.root`?

What about other container types (specifically `immer::array`)?
flex_vector has a .insert() method for inserting into the middle, which I'm using in my in-progress code. flex_vector_transient does not. Is this intentional?
[The website claims](https://sinusoid.es/immer/memory.html#structimmer_1_1free__list__heap__policy) `default_heap_policy` "might become the default in the future."

But [default_heap_policy](https://sinusoid.es/immer/memory.html#memory__policy_8hpp_1ac2170ddaa40fee0db357f16911498ac7) claims `default_heap_policy = free_list_heap_policy<cpp_heap>` and already uses `free_list_heap_policy` as default.

Does the website need to be updated?
For a music editing program, I'm storing a series of timestamped events (note data) in an Immer container. I would like to use the timestamps as keys in a sorted map, but Immer lacks sorted maps. I'm trying to emulate it using a wrapper around a sorted vector of `struct{time, event}` (usually under 100 events so copying isn't awful), but having to reimplement all operations is extra work.

Should I just stuff an `immer::box<std::map>` or something in an Immer container?
For instance, when modifying a `struct` wrapped with `immer::box`, it may be simpler to obtain a mutable instance of the struct rather than wrapping all mutations inside an `immer::box::update`. Is this possible to do without sacrificing performance?
Greetings immer developers and contributors,

We’re reaching out because your project is an important part of the open source ecosystem, and we’d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project. OSS-Fuzz will:
- Continuously run at scale all the fuzzers you write.
- Alert you when it finds issues.
- Automatically close issues after they’ve been fixed by a commit.

Many widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). 

Even though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.

We want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.

If you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why—lack of interest, lack of time, or something else—so we can better support projects like yours in the future.

If we’ve missed your question in our [FAQ]( https://google.github.io/oss-fuzz/faq/ ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.


Thanks!

Tommy
OSS-Fuzz Team

According to the README:

https://github.com/arximboldi/immer/blob/559ab37543a7076f9cfe9002720b0d5ad6ffc12a/README.rst#L169-L172

However, running this command results in the following error:

```
installing 'immer-git'
fatal: '/nix/store/ilk9xjlhjrma9zc92zi56yf3malnsyvv-master.tar.gz' does not appear to be a git repository
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.
error: program 'git' failed with exit code 128
(use '--show-trace' to show detailed location information)
```

Indeed, when you fetch tarballs from `https://github.com/<repo>/archive` and unpack them, the resulting folder is not a git repository.

One solution, if you wish to install with Nix, is to clone the repo and install via the `default.nix` expression.

```bash
$ git clone https://github.com/arximboldi/immer
$ cd immer
$ nix-env -if ./default.nix
```