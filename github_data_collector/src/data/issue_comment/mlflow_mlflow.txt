I have written a kubernetes job template and expecting to perform mlflow run using this backend. I understand I can configure kubernetes job template as per my wish which will solve most of the problems for me.

The major issue I am facing right now is that the environment variables that I have specified in the MLproject docker_env is not getting drilled to the kubernetes job template rather [three env variables](https://github.com/mlflow/mlflow/blob/8447c4201ae7306d69b692f5e634c7eb59cf1462/mlflow/projects/__init__.py#L578) are configured while [running kubernetes job](https://github.com/mlflow/mlflow/blob/8447c4201ae7306d69b692f5e634c7eb59cf1462/mlflow/projects/__init__.py#L196).

What is the expected behavior of the kubernetes backend.. will the specified configurations in docker_env be drilled down directly to the kubernetes run job or are we expecting to treat kubernetes standalone and reconfigure it again as per usage.

The issue in the later one is reconfiguring configmaps and secrets again which are already available to me in the mlflow run issuing system via docker_env
Added documentation for the [SQL Server Plugin](https://pypi.org/project/mlflow-dbstore/) that allows MLflow to use SQL Server as the artifact store.
## What changes are proposed in this pull request?

(Please fill in changes proposed in this fix)

## How is this patch tested?

(Details)

## Release Notes

### Is this a user-facing change?

- [ ] No. You can skip the rest of this section.
- [ ] Yes. Give a description of this change to be included in the release notes for MLflow users.

(Details in 1-2 sentences. You can just refer to another PR with a description if this PR is part of a larger change.)

### What component(s) does this PR affect?

- [ ] UI
- [ ] CLI
- [ ] API
- [ ] REST-API
- [ ] Examples
- [ ] Docs
- [ ] Tracking
- [ ] Projects
- [ ] Artifacts
- [ ] Models
- [ ] Scoring
- [ ] Serving
- [ ] R
- [ ] Java
- [ ] Python

### How should the PR be classified in the release notes? Choose one:

- [ ] `rn/breaking-change` - The PR will be mentioned in the "Breaking Changes" section
- [ ] `rn/none` - No description will be included. The PR will be mentioned only by the PR number in the "Small Bugfixes and Documentation Updates" section
- [ ] `rn/feature` - A new user-facing feature worth mentioning in the release notes
- [ ] `rn/bug-fix` - A user-facing bug fix worth mentioning in the release notes
- [ ] `rn/documentation` - A user-facing documentation change worth mentioning in the release notes

## What changes are proposed in this pull request?

With the release of [torchvision v0.5.0](https://github.com/pytorch/vision/releases/tag/v0.5.0), the Pillow error fixed in #2307 is no longer an issue. This PR unpins Pillow and updates torchvision to 0.5.0 in our tests.

## How is this patch tested?

Travis.

## Release Notes

### Is this a user-facing change?

- [X] No. You can skip the rest of this section.
- [ ] Yes. Give a description of this change to be included in the release notes for MLflow users.

(Details in 1-2 sentences. You can just refer to another PR with a description if this PR is part of a larger change.)

### What component(s) does this PR affect?

- [ ] UI
- [ ] CLI
- [ ] API
- [ ] REST-API
- [ ] Examples
- [ ] Docs
- [ ] Tracking
- [ ] Projects
- [ ] Artifacts
- [ ] Models
- [ ] Scoring
- [ ] Serving
- [ ] R
- [ ] Java
- [ ] Python

### How should the PR be classified in the release notes? Choose one:

- [ ] `rn/breaking-change` - The PR will be mentioned in the "Breaking Changes" section
- [X] `rn/none` - No description will be included. The PR will be mentioned only by the PR number in the "Small Bugfixes and Documentation Updates" section
- [ ] `rn/feature` - A new user-facing feature worth mentioning in the release notes
- [ ] `rn/bug-fix` - A user-facing bug fix worth mentioning in the release notes
- [ ] `rn/documentation` - A user-facing documentation change worth mentioning in the release notes

### URL(s) with the issue:
Broken link
https://github.com/mlflow/mlflow/blob/master/mlflow/store/db_migrations/README

in

https://www.mlflow.org/docs/latest/cli.html#mlflow-db-upgrade

### Description of proposal (what needs changing):
link is broken and should be reachable
https://github.com/mlflow/mlflow/tree/master/mlflow/store/db_migrations
or
https://github.com/mlflow/mlflow/blob/master/mlflow/store/db_migrations/README.md
Thank you for submitting an issue. Please refer to our [issue policy](https://www.github.com/mlflow/mlflow/blob/master/ISSUE_POLICY.md)
for information on what types of issues we address. For help with debugging your code, please refer to [Stack Overflow](https://stackoverflow.com/questions/tagged/mlflow).

Please fill in this template and do not delete it unless you are sure your issue is outside its scope.

### System information
- **Have I written custom code (as opposed to using a stock example script provided in MLflow)**: No
- **OS Platform and Distribution (e.g., Linux Ubuntu 16.04)**:
Windows 10, v1909
- **MLflow installed from (source or binary)**:
Binary
- **MLflow version (run ``mlflow --version``)**:
1.5.0
- **Python version**:
3.7
- **npm version, if running the dev UI**:
- **Exact command to reproduce**:
mlflow sagemaker build-and-push-container

### Describe the problem
The aforementioned command fails on windows, with the error:
`'$' is not recognized as an internal or external command,
operable program or batch file.`

### Code to reproduce issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
`mlflow sagemaker build-and-push-container` on a windows machine.

### Other info / logs
```
>mlflow sagemaker build-and-push-container --build --push -c mlflow-pyfunc > fail.txt
c:\tools\anaconda3\lib\site-packages\werkzeug\datastructures.py:16: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  from collections import Container, Iterable, MutableSet
c:\tools\anaconda3\lib\site-packages\jinja2\runtime.py:318: DeprecationWarning: Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated, and in 3.8 it will stop working
  from collections import Mapping
2020/01/15 13:41:43 INFO mlflow.models.docker_utils: Building docker image with name mlflow-pyfunc
FIND: Parameter format not correct
Sending build context to Docker daemon  3.072kB

Step 1/14 : FROM ubuntu:16.04
 ---> c6a43cd4801e
Step 2/14 : RUN apt-get -y update && apt-get install -y --no-install-recommends          wget          curl          nginx          ca-certificates          bzip2          build-essential          cmake          openjdk-8-jdk          git-core          maven     && rm -rf /var/lib/apt/lists/*
 ---> Using cache
 ---> a11b5329711c
Step 3/14 : RUN curl https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh >> miniconda.sh
 ---> Using cache
 ---> 256a07c03fac
Step 4/14 : RUN bash ./miniconda.sh -b -p /miniconda; rm ./miniconda.sh;
 ---> Using cache
 ---> 69ecfaa82197
Step 5/14 : ENV PATH="/miniconda/bin:$PATH"
 ---> Using cache
 ---> 327d29d4ff6b
Step 6/14 : ENV JAVA_HOME=/usr/lib/jvm/java-8-openjdk-amd64
 ---> Using cache
 ---> 704ab3d3a91c
Step 7/14 : ENV GUNICORN_CMD_ARGS="--timeout 60 -k gevent"
 ---> Using cache
 ---> 6d10a92767e6
Step 8/14 : WORKDIR /opt/mlflow
 ---> Using cache
 ---> 7e3beed3ee5d
Step 9/14 : RUN pip install mlflow==1.3.0
 ---> Using cache
 ---> 946e6f095a7a
Step 10/14 : RUN mvn  --batch-mode dependency:copy -Dartifact=org.mlflow:mlflow-scoring:1.3.0:pom -DoutputDirectory=/opt/java
 ---> Using cache
 ---> be8968c11b10
Step 11/14 : RUN mvn  --batch-mode dependency:copy -Dartifact=org.mlflow:mlflow-scoring:1.3.0:jar -DoutputDirectory=/opt/java/jars
 ---> Using cache
 ---> 501f01ca6bde
Step 12/14 : ENV {disable_env}="false"
 ---> Using cache
 ---> ba429bab7041
Step 13/14 : RUN python -c "from mlflow.models.container import _install_pyfunc_deps;_install_pyfunc_deps(None, False)"
 ---> Using cache
 ---> 898f711a0eab
Step 14/14 : ENTRYPOINT ["python", "-c", "import sys; from mlflow.models import container as C;         C._init(sys.argv[1])"]
 ---> Using cache
 ---> 3218207507a4
Successfully built 3218207507a4
Successfully tagged mlflow-pyfunc:latest
SECURITY WARNING: You are building a Docker image from Windows against a non-Windows Docker host. All files and directories added to build context will have '-rwxr-xr-x' permissions. It is recommended to double check and reset permissions for sensitive files and directories.
2020/01/15 13:41:44 INFO mlflow.sagemaker: Pushing image to ECR
2020/01/15 13:41:45 INFO mlflow.sagemaker: Pushing docker image mlflow-pyfunc to 129457569888.dkr.ecr.eu-central-1.amazonaws.com/mlflow-pyfunc:1.3.0
'$' is not recognized as an internal or external command,
operable program or batch file.
```
## What changes are proposed in this pull request?

Being able to delete a run in its run page. And make the difference between active run pages and deleted run pages more obvious by adding a banner. See more in #2184 

## How is this patch tested?

Only by manual.

## Release Notes

### Is this a user-facing change?

- [ ] No. You can skip the rest of this section.
- [x] Yes. Give a description of this change to be included in the release notes for MLflow users.

Be able to delete a run on its run page. More intuitive Run Page UI.

### What component(s) does this PR affect?

- [x] UI
- [ ] CLI
- [ ] API
- [ ] REST-API
- [ ] Examples
- [ ] Docs
- [ ] Tracking
- [ ] Projects
- [ ] Artifacts
- [ ] Models
- [ ] Scoring
- [ ] Serving
- [ ] R
- [ ] Java
- [ ] Python

### How should the PR be classified in the release notes? Choose one:

- [ ] `rn/breaking-change` - The PR will be mentioned in the "Breaking Changes" section
- [ ] `rn/none` - No description will be included. The PR will be mentioned only by the PR number in the "Small Bugfixes and Documentation Updates" section
- [x] `rn/feature` - A new user-facing feature worth mentioning in the release notes
- [ ] `rn/bug-fix` - A user-facing bug fix worth mentioning in the release notes
- [ ] `rn/documentation` - A user-facing documentation change worth mentioning in the release notes

### System information
Google Colab

### Describe the problem

When saving a PyTorch model using `mlflow.pytorch.save_model`, no type checking is performed on the `code_paths` parameter. Specifically, it is not considered that this parameter could accidentally be passed as a string, leading to the following (funny) outcome.

Consider the code at [line 252](https://github.com/mlflow/mlflow/blob/e70d287bcf75ac26d22db287861029ac1a5fa3d1/mlflow/pytorch/__init__.py#L252): 
```python
    if code_paths is not None:
        code_dir_subpath = "code"
        for code_path in code_paths:
            _copy_file_or_tree(src=code_path, dst=path, dst_dir=code_dir_subpath)
```
If someone were to hypothetically pass an absolute path as the parameter to code_paths (for example, `/content/myfolder/mymodelcode`), then the string is iterated through, starting with `/`. This accidentally copies the entire file system into the output directory.

~~I definitely didn't accidentally do this.~~

### Possible Fix

```python
    if code_paths is not None:
        if not isinstance(code_paths, list):
            raise TypeError(f'Argument code_paths should be a list, not {type(code_paths)}')
        code_dir_subpath = "code"
        for code_path in code_paths:
            _copy_file_or_tree(src=code_path, dst=path, dst_dir=code_dir_subpath)
```

The documentation is plenty clear about this ("code_paths – A **list** of local filesystem paths"), but given the possible outcome, it might be helpful regardless.
## What changes are proposed in this pull request?

This introduces the implementation for using Java to discover and download registered models from a model registry.

**Note**: This is only a preview PR. The set of unit tests is not thorough enough to be committed. No manual testing has been done yet either. 

**Note**: Do not commit this. The code needs some more refinement before it can be committed. 

*Note*: There is a fix to get-latest-versions in the python code as part of this PR because it breaks the Java test. The problem is that the get-latest-versions does not return the stage "None" by default. 


## How is this patch tested?

I've developed several unit tests that test the base behavior. 

## Release Notes

### Is this a user-facing change?

- [ ] No. You can skip the rest of this section.
- [x] Yes. Give a description of this change to be included in the release notes for MLflow users.

(Details in 1-2 sentences. You can just refer to another PR with a description if this PR is part of a larger change.)

### What component(s) does this PR affect?

- [ ] UI
- [ ] CLI
- [x] API
- [ ] REST-API
- [ ] Examples
- [ ] Docs
- [ ] Tracking
- [ ] Projects
- [ ] Artifacts
- [ ] Models
- [ ] Scoring
- [ ] Serving
- [ ] R
- [x] Java
- [ ] Python

### How should the PR be classified in the release notes? Choose one:

- [ ] `rn/breaking-change` - The PR will be mentioned in the "Breaking Changes" section
- [ ] `rn/none` - No description will be included. The PR will be mentioned only by the PR number in the "Small Bugfixes and Documentation Updates" section
- [ ] `rn/feature` - A new user-facing feature worth mentioning in the release notes
- [ ] `rn/bug-fix` - A user-facing bug fix worth mentioning in the release notes
- [ ] `rn/documentation` - A user-facing documentation change worth mentioning in the release notes

## Describe the proposal
Display version information in REST API, so maintainer and user can check which version is deployed easily and fast.

### Motivation
As a user, I want to know which version of tracking server is deployed by calling REST API.
As a maintainer, I want to present the version of tracking server simply to the user by calling REST API.

### Proposed Changes
Display version in the response when requesting `/api/version`. The version information can be extracted from tag of github.
