With the winit backend, resizing the window has some weird behaviour. The horizontal size updates correctly, however the vertical size appears to just jump to the full display height.

Disabling the following line seems to fix it for me:
https://github.com/Smithay/smithay/blob/0b2e4b42db49736f6516ca9dcb7a127cc4815b2d/src/backend/winit.rs#L704

Not sure where the issue lies, with winit, or whether the window shouldn't be resized during a resize event?

Running on GNOME Shell 3.32.2, on X11. Reproduced with anvil.
In the winit backend key repeating is enabled, whereas when using libinput no such feature exists.

winit backend should have key repeating disabled to be consistent (or atleast an option to disable it).
Work-in-progress branch for the next iteration of `drm-rs`'s api (now supporting atomic-modesetting and planes much better!).
I just learned about rust and now am lamenting my decision to write [vkwayland](https://bitbucket.org/cheako/vkwayland/src/master/) in CPP.  This project looks to have most everything required to support a Vulkan Backend and I'd be interested in contributing.

Might I suggest to make use of vulkan-malloc and by extension dacite.  I looked at vulkano and fear that it goes against the spirit of Vulakn by implementing runtime checks when a big selling point of Vulkan is that it mostly eliminates them.
Hey there! What about building a gfx-hal based graphics backend for smithay?

In theory, it should be possible to use gfx-hal for headless drawing, mapping the resulting image to the framebuffer via DRM or EGL, right? Sorry, I am still diving deep into this stuff, but seems logical to me.

The backend itself can provide a surface for creation of FrameBuffer, etc.
If it is possible, I would be interested in trying to implement it as soon as I get my GFX-HAL-based 2D renderer running to gain some experience ü§∑‚Äç‚ôÇÔ∏è. 

Also, maybe there is an option to extend the gfx backends themselves to allow creating surfaces/instances from, for example, EGL streams? Or maybe somehow connect two projects.

Thanks for your time! 
Hey there! As we had a small discussion on the twitter before, this should be a good place for its continuation.

The point of the discussion is: can we have NVIDIA Linux driver support? As far as I know, the problem is in the way NVIDIA allocates and manages memory (using EGLStreams), which is not compatible with the Wayland way of doing things.

Neither Gnome, nor KDE support Wayland on NVIDIA. However, as @levansfr and @Drakulix mentioned on twitter, it is a possibility in Smithay - which is exciting.
As an alternative to systemd-logind, we need to support [elogind](https://github.com/elogind/elogind). It uses the exact same dbus API as logind, so it is just a matter of abstracting this part of the code over the 2 different system libs:

https://github.com/Smithay/smithay/blob/48264926e65d8eb4c05352ca38fb3fef5ce38f87/src/backend/session/dbus/logind.rs#L90-L93
Currently, when an alternate client-provided cursor is drawn in anvil, the original cursor (be it the native cursor on the winit backend, or the hardware cursor on a tty) is not hidden.
currently anvil is not dpi-aware, and following #102 this leads to graphical bugs when started using the winit backend on an HiDPI monitor.

Parts that need to be made dpi-aware:

- advertising DPI factor in monitors to clients
- rescaling clients buffers depending on the output dpi and their drawing dpi
- processing input events and converting them to logical coordinates before sending them to clients
- probably other things that I don't remember right now
Backends (drm, udev, libinput, etc...) should be reworkable as calloop event sources allowing greater flexibility in general and possibly a smoother overall design.

The idea would be to follow this general pattern:

- each backend generating events that need to be processed have a method with a prototype like:
  ```rust
  fn process_pending_events<F: FnMut(Event)>(&mut self, f: F) -> Result<...> { ... }
  ```
  that calls the provided closure on all *pending* events for this source, but does *not* block if no events are available
- each backend also implements the `calloop::EventSource` trait, proxying to the above method, allowing them to be easily inserted into an event loop.

This may need some modifications in calloop to work properly, the initial blocking point I've met is that currently some callback methods provide arguments that are borrows, while currently calloop requires `Event: 'static`, and I've not yet found a way to relax this constraint.