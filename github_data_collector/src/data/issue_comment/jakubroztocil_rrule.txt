This is not an issue just a question.

I know, I can pass ` --no-optional` to ignore the optional dependencies while installing package like this:

```
npm install rrule --no-optional
```

But if I run 'npm run install' again on my project. it installs the luxon library.

Either I have to ignore optional dependencies from all the packages that I have installed or I have to install luxon.

Is there any way I can install rrule from npm with luxon ?



When the recurrence rule is set for every month on 3rd Monday and Wednesday, the resulting dates are messed up. Attaching a picture from the demo site.

new RRule({
  freq: RRule.MONTHLY,
  count: 30,
  interval: 1,
  byweekday: [RRule.MO, RRule.WE],
  bysetpos: [3]
})

String: RRULE:FREQ=MONTHLY;COUNT=30;INTERVAL=1;WKST=MO;BYDAY=MO,WE;BYSETPOS=3



But the resulting text and the result are incorrect

rule.toText(): _every month on Monday, Wednesday for 30 times_
--
expected rule.toText(): _every month on 3rd Monday and Wednesday._

**NOTE**: bysetpos DOES work with one byweekday but not multiple days array in the demo site.

![RRule bug](https://user-images.githubusercontent.com/36228361/69859245-c6b19d00-12b9-11ea-870b-7d586761fcfe.png)







---

### Thanks for contributing to `rrule`!

To submit a pull request, please verify that you have done the following:

- [x] Merged in or rebased on the latest `master` commit
- [x] Linked to an existing bug or issue describing the bug or feature you're
      addressing
- [x] Written one or more tests showing that your change works as advertised

RRULE.Minutely not working when not consecutive days.

## Code
```
new RRule({
  freq: RRule.MINUTELY,
  dtstart: new Date(Date.UTC(2019, 10, 18, 0, 0, 0)),
  until: new Date(Date.UTC(2019, 10, 30, 0, 0, 0)),
  count: 100,
  interval: 60,
  byweekday: [RRule.MO, RRule.WE],
  byhour: [4, 18]
})
```

## Expected output

- 1 | Mon, | 25 | Nov | 2019 | 04:00:00 | GMT
- 2 | Mon, | 25 | Nov | 2019 | 18:00:00 | GMT
- 3 | Wed, | 27 | Nov | 2019 | 04:00:00 | GMT
- 4 | Wed, | 27 | Nov | 2019 | 18:00:00 | GMT

## Actual Output

- 1 | Mon, | 25 | Nov | 2019 | 04:00:00 | GMT
- 2 | Mon, | 25 | Nov | 2019 | 18:00:00 | GMT

**Two fixes for now :**
- you add 0 in the list of hours, the slots are generated perfectly
- if the days are consecutive, for example: Monday, Tuesday, Wednesday, everything is working correctly.

## Version
2.6.2

## OS
macOS Mojave 10.14.6
It appears that if `dtstart` is in the week before the first occurrence, then it will skip that occurrence, but if `dtstart` is in the same week then it will not. Any idea why this would be happening? Would be happy to open a PR. 

```js
import { RRule } from 'rrule'

const options = {
  freq: RRule.WEEKLY,
  interval: 2,
  count: 2,
  byweekday: [RRule.TU]
}

const rule1 = new RRule({
  ...options,
  dtstart: new Date(Date.UTC(2019, 10, 3))
})

const rule2 = new RRule({
  ...options,
  dtstart: new Date(Date.UTC(2019, 10, 4))
})

// rule1 and rule2 are across a week boundary
// rule1 results start a week later than rule2
console.log(rule1.all().map(toISOString))
console.log(rule2.all().map(toISOString))

function toISOString(d) {
  return d.toISOString()
}
```

https://codesandbox.io/s/rrule-interval-test-806pd

Expected output:
```js
["2019-11-05T00:00:00.000Z", "2019-11-19T00:00:00.000Z"]
["2019-11-05T00:00:00.000Z", "2019-11-19T00:00:00.000Z"]
```

Actual output:
```js
["2019-11-12T00:00:00.000Z", "2019-11-26T00:00:00.000Z"]
["2019-11-05T00:00:00.000Z", "2019-11-19T00:00:00.000Z"]
```

rrule@2.6.2
macOS 10.14.6
PDT
Hi,
I am generating instances from a string RRule and noticed that the first iteration will not be produced if local time (HH:mm) is earlier than the event's time, regardless of the date and that the instance is in the future.
I am using UTC and all the dates are produced from unix timestamp values.

`var dateStart = new Date(1580810460 * 1000); // 1580810460 = Tuesday, 04-Feb-20 10:01:00 UTC `
`var end = new Date(1583618400 * 1000); // 1583618400  = Saturday, 07-Mar-20 22:00:00 UTC `
`var nrule = rrule.rrulestr('FREQ=WEEKLY;BYDAY=TU;UNTIL=20200301T000000Z'); `
`nrule.options.dtstart = dateStart;`
`var set = nrule.between(new Date(dateStart * 1000), new Date(end * 1000), true);`

In the example above, if current UTC time is before 10:01, the first supposed instance of this rule that should occur on 04-Feb-20 will not be generated (although it's in the future), while if current UTC time is after 10:01 it will be generated successfully.

I tried this on both 2.2.0 and latest 2.6.0, both yielded same result.
I'm running on latest chrome / windows 10, my local time is GMT+02:00.

Thanks a lot!
RRule:
DTSTART;TZID=Europe/Warsaw:20190924T140900
RRULE:FREQ=WEEKLY;UNTIL=20190924T155359Z;BYSECOND=0;BYMINUTE=9;BYHOUR=14

Code:
new RRuleSet('DTSTART;TZID=Europe/Warsaw:20190924T140900
RRULE:FREQ=WEEKLY;UNTIL=20190924T155359Z;BYSECOND=0;BYMINUTE=9;BYHOUR=14
').all()

Expected output
2019-09-24 14:09:00.0 Europe/Warsaw (+02:00)

Actual Output 
""

Version 2.6.2

Windows 10

Timezone Europe/Warsaw


As an alternative solution to the issue expressed in #365, move the demo page over to codesandbox.io so potential users can more easily explore and hack on rrulejs.

Example: https://codesandbox.io/s/rrulejs-demo-fd897?fontsize=14&module=%2Fdemo.ts

I *think* (but am not sure) that codesandbox supports connecting to a github repo. If not, then the major downside of this approach is that maintenance of the demo would need to be handled outside this repo.
Addresses: https://github.com/jakubroztocil/rrule/issues/365

Didn't write tests as this was for the demo app, and isn't really changing the functionality, can if needed though.
Some libraries such as moment, lodash, etc, expose their goodies to the window, such that when on their webpage, I can drop to a JS console and test stuff out myself (ex: I can use `_` when on the lodash website).

I would be very useful if we could do the same for this library, I've pushed up a pull-request with the appropriate changes.