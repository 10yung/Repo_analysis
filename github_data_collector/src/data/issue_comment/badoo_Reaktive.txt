The iOS sample code contains a retain loop. The [ViewController](https://github.com/badoo/Reaktive/blob/5ec83b4244e25783fc70b50b547212c12b40cefc/sample-ios-app/sample-ios-app/ViewController.swift) owns the KittenView and the KittenView owns the ViewController. Personally I am not very familiar with the used approach which is not entirely idiomatic for Swift/iOS so not entirely sure what the best fix would be.
Chaining multiple test functions is currently not supported

```kotlin
val versions = versionsReader.read().test()
                .assertError()
                .value //won't compile because assertError returns Unit
```

This should be easy

```kotlin 
fun TestObserver.assertError() {
    assertTrue(isError, "Source did not fail")
}
```
to

```kotlin 
fun TestObserver.assertError() : TestObserver {
    assertTrue(isError, "Source did not fail")

    return this
}
```

And I don't think it'll break anyone's code

After publication is finished try to use them as dependencies.
Unpublished version is available with username / password (API key) provided.
Can be done in 2 ways:

1. Build sample-mpp-module with changed dependencies
1. Create synthetic modules which should be synced and built only on publishing step

Following https://github.com/badoo/Reaktive/pull/382 problem.
Reaktive can be exposed to Swift because it is not based on coroutines. But calling its operators does not look nice. We need to investigate if we can provide Swift extensions.
Do we need it? Please react with 👍👎. Thanks!
> fat frameworks not available for macos

https://github.com/badoo/Reaktive/pull/356#discussion_r361324296

https://guides.gradle.org/using-build-cache/#fully_cached_builds

Cache only `$GRADLE_HOME/caches/build-cache-*`, otherwise we won't fit in 2 GB limit. It is not a problem to download dependencies again.

~~Make `DarwinTestTask` cacheable, by exposing target as `@Input String` (it is not serializable).~~

~~Enable cache via `org.gradle.caching=true`.~~
Compare git tag and version in Gradle. If they differs, use git tag version. Then create issue or create pull request with fix (simple string replacement in `build.gradle` file).
~~Use GitHub package manager~~ GitHub package manager [does not](https://help.github.com/en/github/managing-packages-with-github-packages/configuring-apache-maven-for-use-with-github-packages) support maven's snapshots.