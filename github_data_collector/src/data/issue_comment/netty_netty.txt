Motivation:

We have found out that `ByteBufUtil.indexOf` can be inefficient for substring search on
`ByteBuf`, both in terms of algorithm complexity (worst case `O(needle.readableBytes *
haystack.readableBytes)`), and in constant factor (esp. on Composite buffers).
With implementation of more performant search algorithms we have seen improvements on
the order of magnitude.

Modifications:

This change introduces three search algorithms:
1. [Knuth Morris Pratt](https://en.wikipedia.org/wiki/Knuth–Morris–Pratt_algorithm) - classical textbook algorithm, a good default choice.
2. Bit mask based algorithm - stable performance on any input, but limited to maximum
search substring (the `needle`) length of 64 bytes.
3. [Aho–Corasick](https://en.wikipedia.org/wiki/Aho–Corasick_algorithm) - worse performance and higher memory consumption than [1] and [2], but it supports multiple substring (the `needles`) 
search simultaneously, by inspecting every byte of the `haystack` only once.

Each algorithm processes every byte of underlying buffer only once, they are implemented
as `ByteProcessor`.

Result:

Efficient search algorithms with linear time complexity available in Netty (I will share
benchmark results in a comment on a PR).

Fixes #9914. 

when i pull this code,build in intellij idea, some junit test is error
such as

![image](https://user-images.githubusercontent.com/10361981/72446125-e95a2f80-37ed-11ea-99f3-949ee298250b.png)

i use `Long.valueOf` can fixed this.

```
        assertEquals(Long.valueOf(3L), channel.readOutbound());
```

but it is so many

i need help

### Netty version
4.1.x
### JVM version (e.g. `java -version`)
1.8
### OS version (e.g. `uname -a`)
windows 10

Motivation:

Explain here the context, and why you're making that change.
What is the problem you're trying to solve.

Modification:

Describe the modifications you've done.

Result:

Fixes #<GitHub issue number>. 

If there is no issue then describe the changes introduced by this PR.

…he fly

Motivation:

At the moment resolving addresses during connect is done via setting an AddressResolverGroup on the Bootstrap. While this works most of the times as expected sometimes the user want to trigger the connect() from the Channel itself and not via the Bootstrap. For this cases we should provide a ChannelHandler that the user can use that will do the resolution.

Modifications:

Add ResolveAddressHandler and tests

Result:

Be able to resolve addresses without Bootstrap



`WebSocketCloseFrameHandler` could be easily merged into `WebSocketProtocolHandler` and thus we don't need to add/hold an additional handler in the websockets pipeline. I think it would nice improvement for websockets pipeline.

@normanmaurer @ursaj @amizurov WDYT?
Motivation:

DecodeHexBenchmark needs to be less branch-predictor friendly
to mimic the "real" behaviour while decoding

Modifications:

DecodeHexBenchmark uses a larger sets of inputs, picking them at
random on each iteration and the benchmarked method is made !inlineable

Result:

DecodeHexBenchmark is more trusty while showing the performance
difference between different decoding methods
Motivation:

At the moment we add a handler which will respond with 403 forbidden if a websocket handshake is in progress (and after). This makes not much sense as it is unexpected to have a remote peer to send another http request when the handshake was started. In this case it is much better to let the websocket decoder bail out.

Modifications:

Remove usage of forbiddenHttpRequestResponder

Result:

Fixes https://github.com/netty/netty/issues/9913

Motivation:

Let EmbeddedChannel support autoRead

Modification:

 - introduce `tempInboundMessages`(can't use `inboundMessages` since this queue is for other using)

Result:

Fixes https://github.com/netty/netty/issues/3633
Motivation:
for wraping illegalStateException throw, link checkNotNull in ObjectUtil.