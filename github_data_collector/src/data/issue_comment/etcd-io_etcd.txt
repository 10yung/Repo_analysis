A security risk that the private key(eg, --key-file used for TLS) is stored in plaintext exists in ETCD 3.3.18. If an attacker obtains the key, he can use the V2 interface to store some key-value data to the ETCD database. This affects availability of the V3 database even though user authentication is enabled for the ETCD V3 database.

../../../go.etcd.io/etcd/vendor/google.golang.org/grpc/balancer_conn_wrappers.go:28:2: use of internal package google.golang.org/grpc/internal/buffer not allowed
../../../go.etcd.io/etcd/vendor/google.golang.org/grpc/clientconn.go:49:2: use of internal package google.golang.org/grpc/internal/resolver/dns not allowed
../../../go.etcd.io/etcd/vendor/google.golang.org/grpc/clientconn.go:50:2: use of internal package google.golang.org/grpc/internal/resolver/passthrough not allowed
## What happened

Load etcd with 1 million 64B keys / 256B values.
Using the data in https://github.com/etcd-io/etcd/blob/master/Documentation/benchmarks/etcd-storage-memory-benchmark.md#overall-memory-usage, the expected memory usage is 494MiB.

Results (x1.5 worse than expected):
* Actual: 890MiB which stabilizes to 770MiB after a while
* Expected: 494MiB

After that, do a single total range scan:
```console
$ ETCDCTL_API=3 etcdctl get --prefix / --command-timeout 3600
```

Memory usage immediately went up to **1.9Gi** (more than double)!
I understand that the response is loaded in memory, however the dataset size is only ~300MB.
Is this expected?

After that we tried executing the above range scan continuously.
Memory grew to **3.2Gi** and then capped there.
The queries are sequential, so I am wondering why the heap memory isn't reused between responses.

After letting etcd cool off for some minutes, the memory usage went back to 770MiB.

This seems highly irregular. Is this something you would expect?
Is this behavior explained somehow?

## What I expected to happen

I would expect etcd not to consume so much memory:

* Memory usage increased by 1200MiB (x4 times the dataset size) for a single range query. I would expect it to increase at most as much as the dataset size, for the duration of the operation, and then go back to normal.
* For multiple sequential queries, memory usage increased by 2.5GiB (x8 times the dataset size). I would expect the memory usage to remain the same as in the single range query scenario.

## Environment Info

* **Command**
```console
$ ./etcd --data-dir emptydir --snapshot-count 10000
```

* **etcd version**
``` console
$ ./etcd --version
etcd Version: 3.3.13
Git SHA: 98d3084
Go Version: go1.10.8
Go OS/Arch: linux/amd64
```

/cc @gyuho @xiang90 
This changes have started at etcdctl under auth.go, and make changes to stub out everything down into the internal raft.  Made changes to the .proto files and regenerated them so that the local version would build successfully.

fixes #11516 
changelog and readme are already updated.

Hello. I'm exploring raftexample project. I can't understand how `compactIndex` calculates. 
Can someone explain to me what the condition below means?

https://github.com/etcd-io/etcd/blob/2e3b55eb7b44a913ec8cce1611d15d77280bb953/contrib/raftexample/raft.go#L370

What difference between `snapshotCatchUpEntriesN` and `raftNode.snapCount`?
`raftNode.appliedIndex` is identifier of last applied entry to raft log it isn't?
Also I have questions about `raftNode.entriesToApply` method. How it works?
Using `go get go.etcd.io/etcd/tools/benchmark` results in:

```
go/src/go.etcd.io/etcd/vendor/google.golang.org/grpc/balancer_conn_wrappers.go:28:2: use of internal package google.golang.org/grpc/internal/buffer not allowed 
go/src/go.etcd.io/etcd/vendor/google.golang.org/grpc/clientconn.go:49:2: use of internal package google.golang.org/grpc/internal/resolver/dns not allowed
go/src/go.etcd.io/etcd/vendor/google.golang.org/grpc/clientconn.go:50:2: use of internal package google.golang.org/grpc/internal/resolver/passthrough not allowed
```
This has worked previously and is running on `go version go1.11.5 linux/amd64`
Is there any functionality in etcd raft library that allows randomly creation of cluster of nodes for a block that is proposed for block verification from majority of nodes in that particular cluster and canonical chain addition based on the particular type of transaction (transaction may be classified on asset/commodity type) that a block.

Here in this context, block contains a particular asset/commodity type transaction(s) only and nodes that form a cluster for block verification and canonical chain addition is subscribed for that particular type of asset/commodity type transactions only.

After this block is processed, then the cluster should be dissolved and based on the client requests this process should be getting executed again from scratch.

By this approach, i would like to add randomness in the nodes that are forming a cluster based on the location from where client request is getting initiated and forming cluster in the nearby nodes only rather than getting block verified in some other continent (as per the existing raft mechanism) and then propagating the verified block across the entire network.

Any leads to achieve this ideology will be really helpful to me.

Hoping for a favourable reply.

Thanks in advance!
@bmizerany @technoweenie @freeformz
when I use `go get -u go.etcd.io/etcd/clientv3` to install package
I got this error 
```
..\..\..\..\go.etcd.io\etcd\vendor\google.golang.org\grpc\balancer_conn_wrappers.go:28:2: use of internal package google.golang.org/grpc/internal/buffer not allowed
..\..\..\..\go.etcd.io\etcd\vendor\google.golang.org\grpc\clientconn.go:49:2: use of internal package google.golang.org/grpc/internal/resolver/dns not allowed
..\..\..\..\go.etcd.io\etcd\vendor\google.golang.org\grpc\clientconn.go:50:2: use of internal package google.golang.org/grpc/internal/resolver/passthrough not allowed
```
Signed-off-by: qupeng <qupeng@pingcap.com>

Cleanup code about read index, extracted from #11505 .