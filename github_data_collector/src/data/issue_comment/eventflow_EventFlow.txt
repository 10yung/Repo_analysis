First iteration of Reliable Events for Crash Resilience #439 
Early feedback appreciated
Spike on a version of EventFlow for #724. Nothing is decided yet.

Please note that this isn't very pretty...

## To do

- [x] Delete old projects
- [ ] Make the three core projects work, i.e., EventFlow, EventFlow.TestHelpers, EventFlow.Tests
- [ ] use `Microsoft.Extensions.Logging` everywhere
- Re-add other projects one by one when main project is done
  - [ ] `EventFlow.MsSql`
  - ... the others
This issue will try to outline the plan on creating a 1.0 release. The issue is up for discussion and I'll try to update this issue text to make sure that it's easy to digest. 

EventFlow has been in version 0.x for more than five years and is used by many projects already. For many the "0" in front might as well be "1" and thus it will be treated as such going forward, i.e., there will be no more breaking API changes to the 0.x releases, only additions and bug fixes.

The real 1.0 release will try to be the next iteration of EventFlow. A version of EventFlow that follows the trends of .NET and feels "up-to-date".

This will require several breaking changes.

* Replace custom logging with `Microsoft.Extensions.Logging` and use structured logging
* Replace custom dependency injection with `Microsoft.Extensions.DependencyInjection`
* Replace custom memory cache with `Microsoft.Extensions.Caching.Memory`
* Remove `Bootstrapper`
* Evaluate if `AsyncHelper` can be completely removed from the code base
* Remove all .NET Framework build targets
* [Minimum API level of .NET Core 2.1 and .NET Core 3.1 (LTS versions)](https://blog.marcgravell.com/2020/01/net-core-net-5-exodus-of-net-framework.html)
* Move to Linux build agents
* Update build setup to allow pre-release packages (to be used for 1.0 beta/RC releases)
* Delete packages/projects that doesn't make any sense to have going forward
  * `EventFlow.Autofac`: Will move to standard dependency injection
  * `EventFlow.DependencyInjection`: The "core" package will have support for this, no need for an additional package
  * `EventFlow.Owin`: ASP.NET Core will be the only supported pipeline going forward
* ... *other stuff, need input*

*Issues for each bullet will be created when everyone has had a chance to give feedback*

The above list is the *must haves* then there are several *nice to have* issues, which are the current issues in the 1.0 Milestone.

This represents a huge amount of work, but hopefully people with chip in with a PR.

## To do

- [ ] Finalize list of issues that are required to put a "1.0 stamp" on a new set of packages
- [ ] Create a 0.x/1.x branching strategy

**Please refrain on starting on PRs until a branching plan has plan has been made**

Edit 01/12: Only .NET (Core) supported going forward and added that `Bootstrapper` must be removed
Fixes #713
Now that the .net core 3 PR is merged and available I tried to upgrade my current project. Unfortunately I have a very weird issue, which I cannot debug any further as I cannot get the EventFlow solution running on my MacBook (I'd debug it there, if it was running).

The exception I get is:

```
System.MissingMethodException: Method not found: 'Microsoft.EntityFrameworkCore.Metadata.Builders.IndexBuilder Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1.HasIndex(System.Linq.Expressions.Expression`1<System.Func`2<!0,System.Object>>)'.
   at EventFlow.EntityFramework.Extensions.ModelBuilderExtensions.AddEventFlowSnapshots(ModelBuilder modelBuilder)
```
Same goes for "AddEventFlowEvents"...

The strange thing is: if I skip these both calls and ONLY use my own model builder stuff (for my own entities), then there is no such error - though I also call ```HasIndex``` and such.
And to make it even more strange: putting the code from ```AddEventFlowEvents``` directly into my ModelBuilder-stuff does NOT throw this exception.

About the project: it uses .net core 3.1 and event flow with autofac integration and entity framework integration using postgresql. Unfortunately it is quite impossible to strip out the relevant parts as the project already got quite huge and complex. However - according to the .net core 3.0 api changes I had to do some parts different to the EventFlow examples:

AutoFac: no longer integrated within ```ConfigureServices``` but instead within ```ConfigureContainer``` being a void method.

```
public void ConfigureContainer(ContainerBuilder builder)
{
    // ...
    EventFlowOptions.New
                .Configure(options => options.IsAsynchronousSubscribersEnabled = true)
                .UseAutofacContainerBuilder(builder)
                .ConfigureEntityFramework(EntityFrameworkConfiguration.New)
                .UseHangfireJobScheduler()
                .PublishToRabbitMq(RabbitMqConfiguration.With(new Uri(this.Configuration["RabbitMQ:Url"]),
                    exchange: this.Configuration["RabbitMQ:Exchange"]))
                .UseLibLog(LibLogProviders.Serilog);
                //.CreateContainer();
} 
```
Note the point not calling ```CreateContainer()```, which threw exceptions. Obviously .net core 3 does it on its own... or at least the relevant stuff, which is done within this method.
In our current implementation we sometimes have event subscribers on the read side instead of a read model. (Example: Register user where the username column has a unique key).

The subscriber does the insert and catches the unique key violation exception and publishes a compensation command.

When the events are replayed, do the subscribers also get invoked? This would result in a re-publish of a command which in turn will result in creating a new event while replaying.

If the subscribers do not get invoked, the read side will miss content if tables are updated by subscribers instead of simple read models because not every scenario can be handled by the current read model implementation.

How does eventflow handle this scenario?

Kind Regards,
Christian
Hi,
Were using eventflow v0.76.4014. When our commandserver starts up we see lots of verbose logging like:
...
12:36:52:042 [Verbose]: Upgrading 1 events and found these event upgraders to use:
12:36:52:044 [Verbose]: Upgrading 2 events and found these event upgraders to use:
...
The weird thing is we are not using any event upgraders. Any thoughts on this, a workaround for this?

As .NET Framework is rather hard to maintain as it requires Windows to build, I would like some input on whether or not removing .NET Framework from the produced NuGet packages is a good idea at this point.

üëç good idea
üëé  bad idea

If you have any comments, please post them below.

Find a fix root cause for unstable test

`MultipleAggregateReadStoreManagerTests.EventOrdering`