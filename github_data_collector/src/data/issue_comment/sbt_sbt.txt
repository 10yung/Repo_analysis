Java proper allows to run a file from the command line:

~~~
$ jdk-13.0.2/bin/java hello.java
Hello, World!
~~~

I checked here:

https://scala-sbt.org/1.x/docs/sbt-by-example

but it appears that SBT cannot do this. Is that the case? I understand that it
will be slower, but I would prefer to do it this way if possible.

## steps
sbt version: *1.3.4*  window10


## problem

```
xshi0@LAPTOP-L904TFAI MINGW64 /d/WorkPlace/Flink/2-demo/springBoot-flink
$ sbt
[warn] No sbt.version set in project/build.properties, base directory: D:\WorkPlace\Flink\2-demo\springBoot-flink
[error] java.io.IOException: Cannot run program "powershell.exe": CreateProcess error=2, 系统找不到指定的文件。
[error] Use 'last' for the full log.
Project loading failed: (r)etry, (q)uit, (l)ast, or (i)gnore? l
```

## expectation
how to solve？


## notes

## steps
sbt version: develop


## problem
A number of ivy settings tests seem to specify insecure resolvers that are now failing. Here is a sample failing CI build: https://travis-ci.org/sbt/sbt/jobs/637599650


## expectation
The tests use secure (or local) resolvers.


## notes

I am not familiar with ivy-settings.xml and there were no urls (secure or otherwise) or ssl related toggles in the scripted tests so I quickly gave up on debugging this. A sample broken ivysettings.xml file can be found here: https://github.com/sbt/sbt/blob/develop/sbt/src/sbt-test/dependency-management/ivy-settings-a/changes/scala-tools-ivysettings.xml.
## steps
sbt version: 1.3.7

Create an empty project with the following `build.sbt`:

```
name := "wrong-checksum"

version := "0.1"

scalaVersion := "2.12.10"

libraryDependencies += "org.apache.spark" %% "spark-sql" % "2.4.4"
```

## problem

```
[error] (update) lmcoursier.internal.shaded.coursier.error.FetchError$DownloadingArtifacts: Error fetching artifacts:
[error] https://repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/spark-sql_2.12-2.4.4.jar: wrong checksum: /Users/jacek/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/spark-sql_2.12-2.4.4.jar (expected SHA-1 ec1d629508b27dd126a3b24ce8af91e72778e16f in /Users/jacek/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/.spark-sql_2.12-2.4.4.jar__sha1, got 999be449cb7a92968bf60be68ff1c36647be0a4c)
[error] (ssExtractDependencies) lmcoursier.internal.shaded.coursier.error.FetchError$DownloadingArtifacts: Error fetching artifacts:
[error] https://repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/spark-sql_2.12-2.4.4.jar: wrong checksum: /Users/jacek/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/spark-sql_2.12-2.4.4.jar (expected SHA-1 ec1d629508b27dd126a3b24ce8af91e72778e16f in /Users/jacek/Library/Caches/Coursier/v1/https/repo1.maven.org/maven2/org/apache/spark/spark-sql_2.12/2.4.4/.spark-sql_2.12-2.4.4.jar__sha1, got 999be449cb7a92968bf60be68ff1c36647be0a4c)
[error] Total time: 2 s, completed Jan 16, 2020 7:05:59 PM
```

## expectation

Spark SQL dependency resolved without disabling coursier.

## notes

Disabling coursier with the following in `build.sbt` fixes it:

```
useCoursier := false
```
In akka/akka

```
project akka-stream-tests
testOnly akka.streams.scaladsl.<tab>
[> 10 second wait]
Display all 294 possibilities? (y or n)
```

Waiting > 10 seconds without being able to abort the search is somewhat annoying :)

294 possibilities is quite a lot but still reasonably sized. Maybe there's some O(n^2) going on?

Here's a stack trace of what it's doing most of the time:

```
   java.lang.Thread.State: RUNNABLE
	at scala.runtime.Statics.anyHash(Statics.java:122)
	at scala.collection.immutable.HashSet.elemHashCode(HashSet.scala:179)
	at scala.collection.immutable.HashSet.computeHash(HashSet.scala:188)
	at scala.collection.immutable.HashSet.$plus(HashSet.scala:84)
	at scala.collection.immutable.HashSet.$plus(HashSet.scala:35)
	at scala.collection.mutable.SetBuilder.$plus$eq(SetBuilder.scala:28)
	at scala.collection.mutable.SetBuilder.$plus$eq(SetBuilder.scala:24)
	at scala.collection.TraversableLike.$anonfun$partition$1(TraversableLike.scala:402)
	at scala.collection.TraversableLike$$Lambda$83/1997963191.apply(Unknown Source)
	at scala.collection.immutable.HashSet$HashSet1.foreach(HashSet.scala:321)
	at scala.collection.immutable.HashSet$HashTrieSet.foreach(HashSet.scala:977)
	at scala.collection.immutable.HashSet$HashTrieSet.foreach(HashSet.scala:977)
	at scala.collection.TraversableLike.partition(TraversableLike.scala:402)
	at scala.collection.TraversableLike.partition$(TraversableLike.scala:400)
	at scala.collection.AbstractTraversable.partition(Traversable.scala:108)
	at sbt.Defaults$.$anonfun$distinctParser$1(Defaults.scala:1908)
	at sbt.Defaults$$$Lambda$10850/1659718021.apply(Unknown Source)
	at sbt.internal.util.complete.BindParser.derive(Parser.scala:754)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.SeqParser.derive(Parser.scala:690)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.ParserSeq.$anonfun$derive$3(Parser.scala:734)
	at sbt.internal.util.complete.ParserSeq$$Lambda$8170/1092345627.apply(Unknown Source)
	at scala.collection.TraversableLike.$anonfun$map$1(TraversableLike.scala:238)
	at scala.collection.TraversableLike$$Lambda$8/1873859565.apply(Unknown Source)
	at scala.collection.immutable.List.foreach(List.scala:392)
	at scala.collection.TraversableLike.map(TraversableLike.scala:238)
	at scala.collection.TraversableLike.map$(TraversableLike.scala:231)
	at scala.collection.immutable.List.map(List.scala:298)
	at sbt.internal.util.complete.ParserSeq.derive(Parser.scala:734)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.HomParser.derive(Parser.scala:703)
	at sbt.internal.util.complete.And.derive(Parser.scala:822)
	at sbt.internal.util.complete.MatchedString.derive(Parser.scala:792)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.HomParser.derive(Parser.scala:703)
	at sbt.internal.util.complete.HomParser.derive(Parser.scala:703)
	at sbt.internal.util.complete.MatchedString.derive(Parser.scala:792)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.TokenStart.derive(Parser.scala:806)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.HomParser.derive(Parser.scala:703)
	at sbt.internal.util.complete.MapParser.derive(Parser.scala:767)
	at sbt.internal.util.complete.ParserMain.derive1(Parser.scala:494)
	at sbt.internal.util.complete.ParserMain.derive1$(Parser.scala:493)
	at sbt.internal.util.complete.Parser$.derive1(Parser.scala:138)
	at sbt.internal.util.complete.ParserMain.$anonfun$apply$1(Parser.scala:490)
	at sbt.internal.util.complete.ParserMain.$anonfun$apply$1$adapted(Parser.scala:490)
	at sbt.internal.util.complete.ParserMain$$Lambda$63/26728049.apply(Unknown Source)
	at scala.collection.IndexedSeqOptimized.foldLeft(IndexedSeqOptimized.scala:60)
	at scala.collection.IndexedSeqOptimized.foldLeft$(IndexedSeqOptimized.scala:68)
	at scala.collection.immutable.StringOps.foldLeft(StringOps.scala:33)
	at sbt.internal.util.complete.ParserMain.apply(Parser.scala:490)
	at sbt.internal.util.complete.ParserMain.apply$(Parser.scala:489)
	at sbt.internal.util.complete.Parser$.apply(Parser.scala:138)
	at sbt.internal.util.complete.BindParser.$anonfun$completions$3(Parser.scala:745)
	at sbt.internal.util.complete.BindParser$$Lambda$10859/1972812394.apply(Unknown Source)
	at sbt.internal.util.complete.Completions.$anonfun$flatMap$2(Completions.scala:28)
	at sbt.internal.util.complete.Completions$$Lambda$10870/1987725294.apply(Unknown Source)
	at scala.collection.TraversableLike.$anonfun$flatMap$1(TraversableLike.scala:245)
	at scala.collection.TraversableLike$$Lambda$91/1127224355.apply(Unknown Source)
	at scala.collection.immutable.HashSet$HashSet1.foreach(HashSet.scala:321)
	at scala.collection.immutable.HashSet$HashTrieSet.foreach(HashSet.scala:977)
	at scala.collection.immutable.HashSet$HashTrieSet.foreach(HashSet.scala:977)
	at scala.collection.TraversableLike.flatMap(TraversableLike.scala:245)
	at scala.collection.TraversableLike.flatMap$(TraversableLike.scala:242)
	at scala.collection.AbstractTraversable.flatMap(Traversable.scala:108)
	at sbt.internal.util.complete.Completions.$anonfun$flatMap$1(Completions.scala:28)
	at sbt.internal.util.complete.Completions$$Lambda$10860/380390774.apply(Unknown Source)
	at sbt.internal.util.complete.Completions$$anon$1.get$lzycompute(Completions.scala:42)
	- locked <0x0000000757420ce8> (a sbt.internal.util.complete.Completions$$anon$1)
	at sbt.internal.util.complete.Completions$$anon$1.get(Completions.scala:42)
	at sbt.internal.util.complete.Completions.$anonfun$$plus$plus$1(Completions.scala:20)
	at sbt.internal.util.complete.Completions$$Lambda$10868/954053560.apply(Unknown Source)
	at sbt.internal.util.complete.Completions$$anon$1.get$lzycompute(Completions.scala:42)
	- locked <0x0000000757420d18> (a sbt.internal.util.complete.Completions$$anon$1)
	at sbt.internal.util.complete.Completions$$anon$1.get(Completions.scala:42)
	at sbt.internal.util.complete.Completions.$anonfun$flatMap$1(Completions.scala:28)
	at sbt.internal.util.complete.Completions$$Lambda$10860/380390774.apply(Unknown Source)
	at sbt.internal.util.complete.Completions$$anon$1.get$lzycompute(Completions.scala:42)
	- locked <0x0000000757420d58> (a sbt.internal.util.complete.Completions$$anon$1)
	at sbt.internal.util.complete.Completions$$anon$1.get(Completions.scala:42)
	at sbt.internal.util.complete.JLineCompletion$.convertCompletions(JLineCompletion.scala:75)
	at sbt.internal.util.complete.JLineCompletion$.$anonfun$parserAsCompletor$1(JLineCompletion.scala:72)
	at sbt.internal.util.complete.JLineCompletion$.$anonfun$parserAsCompletor$1$adapted(JLineCompletion.scala:72)
	at sbt.internal.util.complete.JLineCompletion$$$Lambda$8246/1240559528.apply(Unknown Source)
	at sbt.internal.util.complete.JLineCompletion$.$anonfun$customCompletor$2(JLineCompletion.scala:101)
	at sbt.internal.util.complete.JLineCompletion$$$Lambda$10841/1133423325.apply(Unknown Source)
	at sbt.internal.util.complete.JLineCompletion$.complete(JLineCompletion.scala:122)
	at sbt.internal.util.complete.JLineCompletion$.$anonfun$customCompletor$1(JLineCompletion.scala:101)
	at sbt.internal.util.complete.JLineCompletion$.$anonfun$customCompletor$1$adapted(JLineCompletion.scala:100)
	at sbt.internal.util.complete.JLineCompletion$$$Lambda$8247/892319395.apply(Unknown Source)
	at sbt.internal.util.complete.JLineCompletion$CustomHandler.complete(JLineCompletion.scala:47)
	at jline.console.ConsoleReader.complete(ConsoleReader.java:3317)
	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2653)
	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2378)
	at jline.console.ConsoleReader.readLine(ConsoleReader.java:2366)
	at sbt.internal.util.JLine.readLineDirectRaw(LineReader.scala:65)
	at sbt.internal.util.JLine.$anonfun$readLineDirect$2(LineReader.scala:56)
	at sbt.internal.util.JLine$$Lambda$8252/2078797947.apply(Unknown Source)
	at sbt.internal.util.Signals0.withHandler(Signal.scala:89)
	at sbt.internal.util.Signals$.withHandler(Signal.scala:18)
	at sbt.internal.util.JLine.readLineDirect(LineReader.scala:56)
	at sbt.internal.util.JLine.readLineWithHistory(LineReader.scala:48)
	at sbt.internal.util.JLine.unsynchronizedReadLine(LineReader.scala:41)
	at sbt.internal.util.JLine.$anonfun$readLine$1(LineReader.scala:32)
	at sbt.internal.util.JLine$$Lambda$8249/1550936908.apply(Unknown Source)
	at sbt.internal.util.JLine$.$anonfun$withJLine$1(LineReader.scala:163)
	at sbt.internal.util.JLine$$$Lambda$8250/1481569306.apply(Unknown Source)
	at sbt.internal.util.JLine$.withTerminal(LineReader.scala:128)
	- locked <0x0000000757500b08> (a jline.UnixTerminal)
	- locked <0x00000007311442e8> (a sbt.internal.util.JLine$)
	at sbt.internal.util.JLine$.withJLine(LineReader.scala:160)
	at sbt.internal.util.JLine.readLine(LineReader.scala:32)
	at sbt.internal.ConsoleChannel$$anon$1.run(ConsoleChannel.scala:28)
```

sbt 1.3.6
## steps
sbt version: 1.3.7

## problem
Any project including bom (bill of materials) pom of aws sdk transitively fails to update with the following error message

```
libraryDependencies +=  "com.yahoo.athenz" % "athenz-zts-java-client-core" % "1.8.43"
..
sbt update
..
[error]   not found: https://repo1.maven.org/maven2/com/amazonaws/aws-java-sdk-sts/${awsjavasdk.version}/aws-java-sdk-sts-${awsjavasdk.version}.pom
```

## expectation
This does not happen in 1.3.6 or lower, most probably a coursier regression

## notes

## steps
sbt version: 1.3.6


## problem

MatchError from log4j2 when attempting to run Play Framework 2.7.4


## expectation

sbt should build and run Play Framework

## notes

Given the following:

OpenJDK 11
SBT 1.3.6
Play 2.7.4
An actual logging config file in the classpath (in `conf/`)

If I run `sbt run` the following occurs:

```
[warn] a.a.CoordinatedShutdown - Task [akka-http-server-unbind] in phase [service-unbind] threw an exception before its future could be constructed: null
2020-01-16 00:10:56,308 pool-9-thread-5 ERROR No Log4j 2 configuration file found. Using default configuration (logging only errors to the console), or user programmatically provided configurations. Set system property 'log4j2.debug' to show Log4j 2 internal initialization logging. See https://logging.apache.org/log4j/2.x/manual/configuration.html for instructions on how to configure Log4j 2
[error] scala.MatchError: org.apache.logging.log4j.simple.SimpleLoggerContext@3da55dc6 (of class org.apache.logging.log4j.simple.SimpleLoggerContext)
[error] 	at sbt.util.LogExchange.logger(LogExchange.scala:28)
[error] 	at sbt.internal.LogManager$.defaultLogger(LogManager.scala:137)
[error] 	at sbt.internal.LogManager$DefaultLogManager.apply(LogManager.scala:104)
[error] 	at sbt.internal.LogManager$.$anonfun$construct$1(LogManager.scala:52)
[error] 	at sbt.std.Streams$$anon$3$$anon$2.log(Streams.scala:178)
[error] 	at sbt.std.TaskStreams.log(Streams.scala:85)
[error] 	at sbt.std.TaskStreams.log$(Streams.scala:85)
[error] 	at sbt.std.Streams$$anon$3$$anon$2.log$lzycompute(Streams.scala:136)
[error] 	at sbt.std.Streams$$anon$3$$anon$2.log(Streams.scala:136)
[error] 	at play.twirl.sbt.SbtTwirl$.$anonfun$compileTemplatesTask$1(SbtTwirl.scala:108)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:44)
[error] 	at sbt.internal.util.$tilde$greater.$anonfun$$u2219$1(TypeFunctions.scala:40)
[error] 	at sbt.std.Transform$$anon$4.work(System.scala:67)
[error] 	at sbt.Execute.$anonfun$submit$2(Execute.scala:269)
[error] 	at sbt.internal.util.ErrorHandling$.wideConvert(ErrorHandling.scala:16)
[error] 	at sbt.Execute.work(Execute.scala:278)
[error] 	at sbt.Execute.$anonfun$submit$1(Execute.scala:269)
[error] 	at sbt.ConcurrentRestrictions$$anon$4.$anonfun$submitValid$1(ConcurrentRestrictions.scala:178)
[error] 	at sbt.CompletionService$$anon$2.call(CompletionService.scala:37)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
[error] 	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
[error] 	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
[error] 	at java.base/java.lang.Thread.run(Thread.java:834)
```
## steps
sbt version: 1.3.7
add addSbtPlugin("com.typesafe.play" % "sbt-plugin" % "2.7.3") to project/plugins.sbt
run updateSbtClassifiers or try to import project in intellij

## problem
[error] (updateSbtClassifiers) lmcoursier.internal.shaded.coursier.error.FetchError$DownloadingArtifacts: Error fetching artifacts:
[error] https://repo1.maven.org/maven2/org/webjars/npm/4.2.0/npm-4.2.0-sources.jar: not found: https://repo1.maven.org/maven2/org/webjars/npm/4.2.0/npm-4.2.0-sources.jar

## expectation
update(Sbt)classifiers should continue if any source/doc downloads are not available


Dotty can read Scala 2 signatures (and soon the reverse will be true too), so a dotty project can depend on a scala 2 project, sbt-dotty makes this as convenient as possible by providing a `withDottyCompat` method to change the cross version:
```scala
libraryDependencies += ("a" %% "b" % "c").withDottyCompat(scalaVersion.value)
```
However, when using `dependsOn` to declare a local dependency between two projects, there is no way to specify the cross version, this prevents having a local dotty project that depends on a local scala2 project and vice-versa, even though this would be extremely useful for progressively porting a project to dotty.

As a workaround, one can fiddle with `projectDependencies`, but it's not very nice:
```scala
lazy val scala2Lib = project.in(file("scala2Lib"))
  .settings(
    scalaVersion := "2.13.1"
  )

lazy val dottyApp = project.in(file("dottyApp"))
  .dependsOn(scala2Lib)
  .settings(
    // Set withDottyCompat on the scala2Lib dependency if we had a mix of dotty
    // and scala2 dependencies, we would have to be more careful here.
    projectDependencies := {
      projectDependencies.value.map(_.withDottyCompat(scalaVersion.value))
    },
    scalaVersion := "0.21.0-RC1"
  )
```
This PR does two big things:
1. Removes the launcher based scripted implementation and only used `RunFromSourceMain`. This has the benefit of not requiring recompilation of the compiler bridges every time. It also simplifies making new tests because it is no longer necessary to consider whether it is launcher or run from source based.
2. Use `publishLocalBin` instead of `publishLocal` so that we can avoid the expensive `doc` operation in `publishLocal`.