Type: Architectural
Source: https://sass-guidelin.es/#the-7-1-pattern

Basically, you have all your partials stuffed into 7 different folders and a single file at the root level which imports them all to be compiled.

If you check the [sass template for the 7-2 pattern](https://github.com/HugoGiraudel/sass-boilerplate) you will see that the project is pretty much structured as follows:

![7%20in%20one](https://user-images.githubusercontent.com/1063901/72225388-96ad1900-354a-11ea-8c11-f13b766187cd.png)

----

PlantUML  diagram source code

```
@startuml
package site #DDDDDD {
  class MainSiteStyler{
   BasicStyleDefinition[] basicstyleDefinitions
   Page[] pages
   LayoutElement[] layoutDefinitions
   Theme currentTheme
   Component[] componentStyles
   ThirdPartyStyle[] additionalStyles
  }
}

note top of site.abstracts : "Tools and helpers used across the project"

package site.abstracts {
  class CommonFunctions <<UtilityClass>>
  class ConfigurationConstants <<ConstantsClass>>
  MainSiteStyler .. CommonFunctions
  MainSiteStyler .. ConfigurationConstants
}

note "Boilerplate code" as bp
site.base .. bp

package site.base{
  interface BasicStyleDefinition
  class BaseStyle
  class Font
  class Typography
  class Helpers
  BasicStyleDefinition <|-- BaseStyle
  BasicStyleDefinition <|-- Font
  BasicStyleDefinition <|-- Typography
  BasicStyleDefinition <|-- Helpers
  MainSiteStyler *-- BasicStyleDefinition
}

package site.components{
  interface Component
  class Button
  Component <|-- Button
  MainSiteStyler *-- Component
}

package site.layout{
  interface LayoutElement
  class Footer
  class Header
  LayoutElement <|-- Footer
  LayoutElement <|-- Header
  MainSiteStyler *-- LayoutElement
}

package site.pages{
  interface Page
  class Home
  Page <|-- Home
  MainSiteStyler *-- Page
}
package site.themes{
  interface Theme
  class DefaultTheme
  class DarkTheme
  Theme <|-- DefaultTheme
  Theme <|-- DarkTheme
  MainSiteStyler *-- Theme
}
package site.vendors{
  class ThirdPartyStyle
  MainSiteStyler *-- ThirdPartyStyle
}
@enduml
```


As described in issue #1099 it is recommended to declare the template method as final. This pull request changes the implementation in the sample code of the following patterns:
- template method pattern
- twin pattern

The template pattern used in the callback pattern was already declared final (method `executeWith` in class `com.iluwatar.callback.Task`).
As statet in the referenced tutorial [Template-method Pattern Tutorial](https://www.journaldev.com/1763/template-method-design-pattern-in-java)
I would add a note in the pattern description that the template method should be declared `final`. 

> To make sure that subclasses donâ€™t override the template method, we should make it final.

And I would change the code accordingly.

Hi, this is Masaki Mizobuchi.
I faced the below error when I build the projects. So, I report is.

**Unknown host repository-estatio.forge.cloudbees.com** is shown when I execute the commnad `mvn eclipse:eclipse`.
It seems that [(http://repository-estatio.forge.cloudbees.com/snapshot/)] is closed host.


Error message is below.

> [ERROR] Failed to execute goal on project naked-objects-fixture: Could not resolve dependencies for project com.iluwatar:naked-objects-fixture:jar:1.22.0-SNAPSHOT: Could not transfer artifact com.iluwatar:naked-objects-dom:jar:1.22.0-SNAPSHOT from/to Cloudbees snapshots (http://repository-estatio.forge.cloudbees.com/snapshot/): repository-estatio.forge.cloudbees.com: Unknown host repository-estatio.forge.cloudbees.com -


In this big architectural pattern distributed shared memory is utilized to provide almost infinite scalability.

Links:
- https://en.wikipedia.org/wiki/Space-based_architecture
- The attached document 
[Software-Architecture-Patterns.pdf](https://github.com/iluwatar/java-design-patterns/files/3841952/Software-Architecture-Patterns.pdf)

This is a big architectural pattern where the system consists of core and plugin modules.

Links:
- https://medium.com/@priyalwalpita/software-architecture-patterns-microkernel-architecture-97cee200264e
- the attached document 
[Software-Architecture-Patterns.pdf](https://github.com/iluwatar/java-design-patterns/files/3841915/Software-Architecture-Patterns.pdf)

Currently all the patterns belong to the default unnamed module. To make them real Java modules, we need to add `module-info.java` to each of the patterns.

Links:
https://www.baeldung.com/java-9-modularity
http://tutorials.jenkov.com/java/modules.html

Progress tracking:
[x] abstract-document
[Jekyll front matter](https://jekyllrb.com/docs/front-matter/) is used to add attributes to web pages on our web site. All the patterns have their front matter defined in `README.md` but `description` is missing from there. `description` is used to add HTML meta tag to the pattern's web page as can be seen here: https://github.com/iluwatar/java-design-patterns/blob/gh-pages/_includes/head.html#L8

In this task we add description front matter to all patterns so that Google finds the pages better. Let's track the progress with the following checklist.

[ ] abstract-document
[ ] abstract-factory
[ ] acyclic-visitor
[ ] adapter
[ ] aggregator-microservices
[ ] ambassador
[ ] api-gateway
[ ] async-method-invocation
[ ] balking
[ ] bridge
[ ] builder
[ ] business-delegate
[ ] bytecode
[ ] caching
[ ] callback
[ ] chain
[ ] collection-pipeline
[ ] command
[ ] commander
[ ] composite
[ ] converter
[ ] cqrs
[ ] dao
[ ] data-bus
[ ] data-locality
[ ] data-mapper
[ ] data-transfer-object
[ ] decorator
[ ] delegation
[ ] dependency-injection
[ ] dirty-flag
[ ] double-checked-locking
[ ] double-dispatch
[ ] eip-aggregator
[ ] eip-message-channel
[ ] eip-publish-subscribe
[ ] eip-splitter
[ ] eip-wire-tap
[ ] event-aggregator
[ ] event-asynchronous
[ ] event-driven-architecture
[ ] event-queue
[ ] event-sourcing
[ ] execute-around
[ ] extension-objects
[ ] facade
[ ] factory-kit
[ ] factory-method
[ ] faq.md
[ ] feature-toggle
[ ] fluentinterface
[ ] flux
[ ] flyweight
[ ] front-controller
[ ] guarded-suspension
[ ] half-sync-half-async
[ ] hexagonal
[ ] intercepting-filter
[ ] interpreter
[ ] iterator
[ ] layers
[ ] lazy-loading
[ ] leader-election
[ ] marker
[ ] master-worker-pattern
[ ] mediator
[ ] memento
[ ] model-view-controller
[ ] model-view-presenter
[ ] module
[ ] monad
[ ] monostate
[ ] multiton
[ ] mute-idiom
[ ] mutex
[ ] naked-objects
[ ] null-object
[ ] object-mother
[ ] object-pool
[ ] observer
[ ] page-object
[ ] partial-response
[ ] pipeline
[ ] poison-pill
[ ] priority-queue
[ ] private-class-data
[ ] producer-consumer
[ ] promise
[ ] property
[ ] prototype
[ ] proxy
[ ] queue-load-leveling
[ ] reactor
[ ] reader-writer-lock
[ ] repository
[ ] resource-acquisition-is-initialization
[ ] retry
[ ] semaphore
[ ] servant
[ ] serverless
[ ] service-layer
[ ] service-locator
[ ] singleton
[ ] spatial-partition
[ ] specification
[ ] state
[ ] step-builder
[ ] strategy
[ ] template-method
[ ] thread-pool
[ ] throttling
[ ] tls
[ ] tolerant-reader
[ ] trampoline
[ ] twin
[ ] typeobjectpattern
[ ] unit-of-work
[ ] value-object
[ ] visitor
The project is using SonarCloud static code analysis. The latest results are showing that it has found several blocker and critical severity code smells. In this task those are fixed or marked as false positives. To mark false positives, SuppressWarnings annotation should be used in code as explained in the linked documentation.

Links:
[Blocker and critical severity code smells in SonarCloud](https://sonarcloud.io/project/issues?id=iluwatar_java-design-patterns&resolved=false&severities=BLOCKER%2CCRITICAL&types=CODE_SMELL)
[Sonar false positives](https://docs.sonarqube.org/latest/analysis/languages/java/#JavaFAQ-HowtoremoveFalse-Positiveissues)

With the following versions:

- Eclipse: Version: 2019-09 R (4.13.0)

- Eclipse Checkstyle Project: Eclipse Checkstyle 8.18.0.201903231603

When following the instructions at: https://github.com/iluwatar/java-design-patterns/wiki/12.-IDE-instructions on the step: "Right click java-design-patterns project in Project Explorer and choose Checkstyle - Create formatter profile" an error popup is shown that says:

"transformCheckstyle has encountered a problem. An internal error occurred during: transformCheckstyle"

Look at the Eclipse logs yielded the following stack trace:

```
!MESSAGE An internal error occurred during: "transformCheckstyle".
!STACK 0
java.lang.NoClassDefFoundError: org/eclipse/jdt/internal/ui/preferences/PreferencesAccess
	at net.sf.eclipsecs.core.transformer.FormatterConfigWriter.writeCleanupSettings(FormatterConfigWriter.java:95)
	at net.sf.eclipsecs.core.transformer.FormatterConfigWriter.writeSettings(FormatterConfigWriter.java:89)
	at net.sf.eclipsecs.core.transformer.FormatterConfigWriter.<init>(FormatterConfigWriter.java:81)
	at net.sf.eclipsecs.core.transformer.CheckstyleTransformer.transformRules(CheckstyleTransformer.java:124)
	at net.sf.eclipsecs.core.jobs.TransformCheckstyleRulesJob.runInWorkspace(TransformCheckstyleRulesJob.java:117)
	at org.eclipse.core.internal.resources.InternalWorkspaceJob.run(InternalWorkspaceJob.java:42)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:63)
```

While this problem seems to be caused by: https://github.com/checkstyle/eclipse-cs/issues/107 and is not related to this project, we may want to track the issue and update the documentation to indicate that this is a known issue.