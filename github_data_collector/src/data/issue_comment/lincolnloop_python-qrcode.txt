There is a small typo in qrcode/main.py.
Should read `multidimensional` rather than `multidimensonal`.


Error while running a basic program such as that given in the module documentation.

Hello! This is a image factory for NumPy array. (for NumPy and OpenCV users)

```python
from PyQt5.QtGui import QImage
import qrcode
from qrcode.image.numpy import NpImage
image = qrcode.make(self.compressed_script, image_factory=NpImage)
pixmap = QPixmap.fromImage(image.get_qimage(QImage))
```
At the moment the code assumes that color values will be strings. This limits the range of colors that can be used. Trying to pass an RGB tuple raises an exception on the string methods used. 

By performing the string methods earlier and catching and ignoring the exceptions, other  data structures can quietly pass through to Image.new() to be accepted if supported, or  to raise an exception.

Ideally, PilImage should be color type agnostic and convert all values to some common color type to make the code as flexible as possible.
Hey, I've been using your awesome library for a project of mine. But since I need the code as PDF I first built a solution using reportlab to convert the SVG to PDF. But then I thought it would be a good excuse to learn some more about creating PDFs. So I did, so I made a very simple PDF-Image-Module that's only able to output QR-Codes, but that was all I needed.

If you like it, you can mainline it, I think PDF is a very useful format to have. I use it to include QR-Codes in TeX documents and since I perfer vector-data over pixel-data in my print-products, this might be something other people might benefit from, too.
I created a table for products and its have an ImageField like this:
`productQrImage = models.ImageField(upload_to='media/', blank=True, null=True)`

and that is my code for generate a qrcode and it takes product name (as you can see down). its save png file to media its ok but I need to save it to database and than retrieve to product list page. I search for this about two days I haven't find any solution. 

   ```
   qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=5,
            border=4,
        )

        qrName = request.POST.get("productName")
        s = "http://127.0.0.1:8000/products/" + qrName
        qr.add_data(s)
        qr.make(fit=True)
        # qrPath = 'mystatic/media/' + qrName + '.png'
        img = qr.make_image(fill_color="black", back_color="white")
        img.save('mystatic/media/' + qrName + '.png')
```

I added functionality for qrcode's to be made out of diamonds. Similar to how you can choose different shapes on www.qrcode-monkey.com.  
![qr](https://user-images.githubusercontent.com/24310148/60947681-78dbce80-a2f1-11e9-877f-2a92200d0189.png) Try it out yourself by passing the shape="diamond" in the qrcode.make function. If no shape argument is passed it will default to square.

Code below results in DataOverFlow error.

```
bruno$ python3 qr.py
Traceback (most recent call last):
  File "qr.py", line 33, in <module>
    qr.make(fit=True)
  File "/usr/local/lib/python3.7/site-packages/qrcode/main.py", line 93, in make
    self.best_fit(start=self.version)
  File "/usr/local/lib/python3.7/site-packages/qrcode/main.py", line 165, in best_fit
    raise exceptions.DataOverflowError()
qrcode.exceptions.DataOverflowError
```

If reducing the number of generated qrcodes, it works fine.


```
# pip install Pillow
# pip install qrcode
# pip install lxml
# https://ourcodeworld.com/articles/read/554/how-to-create-a-qr-code-image-or-svg-in-python

# Import QR Code library
import qrcode
import qrcode.image.svg


# Create qr code instance
qr = qrcode.QRCode(
    version = 1,
    error_correction = qrcode.constants.ERROR_CORRECT_M,
    box_size = 10,
    border = 4,
)

factory = qrcode.image.svg.SvgPathImage


allqr = ["032539","032546","032553","032560","032577","032584","032591","032607","032614","032621","032638","032645","032652","032669","032676","032683","032690","032706","032713","032720","032737","032744","032751","032768","032775","032782","032799","032805","032812","032829","032836","032843","032850","040008","040015","040022","040039","040046","040053","040060","040077","040084","040091","040107","040114","040121","040138","040145","040152","040169","040176","040183","040190","040206","040213","040220","040237","040244","040251","040268","040275","040282","040299","040305","040312","040329","040336","040343","040350","040367","040374","040381","040398","040404","040411","040428","040435","040442","040459","040466","040473","040480","040497","040503","040510","040527","040534","040541","040558","040565","040572","040589","040596","040602","040619","040626","040633","040640","040657","040664","040671","040688","040695","040701","040718","040725","040732","040749","040756","040763","040770","040787","040794","040800","040817","040824","040831","040848","040855","040862","040879","040886","040893","040909","040916","040923","040930","040947","040954","040961","040978","040985","040992","041005","041012","041029","041036","041043","041050","041067","041074","041081","041098","041104","041111","041128","041135","041142","041159"]

for numero in allqr:

    # The data that you want to store
    data = "http://qr.rokfishing.com/"+numero

    # Add data
    qr.add_data(data)
    qr.make(fit=True)

    # Create an image from the QR Code instance
    img = qrcode.make(data, image_factory = factory)

    # Save it somewhere, change the extension as needed:
    img.save("qrcode"+numero+".svg")

```
If you freeze your pip file, or even worse you run it in a container that depends on your requirements.txt the -e flag helps you to get:
-e git://github.com/ojii/pymaging.git@596a08fce5664e58d6e8c96847393fbe987783f2#egg=pymaging
-e git://github.com/ojii/pymaging-png.git@83d85c44e4b2342818e6c068065e031a9f81bb9f#egg=pymaging_png

instead of the (normal looking, but failing)

pymaging==0.1
pymaging-png==0.1

which will fail terribly (see https://pip.readthedocs.io/en/stable/reference/pip_install/#git).