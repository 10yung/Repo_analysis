Other view, I can use RxView.keys to control.
**But for recycler view item, because of long press keyevent, recycler view move fast, how to use rxbinding to control it?**
All the imports were changed using [this script](https://gist.github.com/dlew/5db1b780896bbc6f542e7c00a11db6a0) from @dlew (but with a different csv that I'll open source).

This is a breaking change for sure but I didn't change any package or coordinates. Should I change those too?

Related with #531
It would be great to have support to RxJava3
fixes related issue - https://github.com/JakeWharton/RxBinding/issues/528
I am using the latest androidx material dependency 11.1.0-beta01, upon subscribing to the RxTabLayout selectionEvents observable an exception is thrown

Exception
Caused by: java.lang.ClassCastException: com.jakewharton.rxbinding3.material.TabLayoutSelectionEventsObservable$Listener cannot be cast to com.google.android.material.tabs.TabLayout$BaseOnTabSelectedListener
Related Issue
Discovered another issue that was fixed in July for the selections observable was merged here #517 related to this issue #495

Potential Fix
The fix would be to make this listener in TapLayoutSelectionEventsObservable extend from BaseOnTabSelectedListener<Tab> like the other fix I mentioned earlier in the related issue section
Suppose that i'm writing my own View class, that represents editable field and contains EditText **tv_input** inside:

```
class EditTextIconItemView : LinearLayout {
   fun setInputText(text: String?) {
        with (tv_input) {
            setText(text)
            setCharsCount(text?.length ?: 0)
            setSelection(text?.length ?: 0)
        }
    }

    fun setCharsCount(count: Int) {
        tv_chars_count?.text = "$count/$MAX_LENGTH"
    }
}
```

I'd like to delegate **textChanges()** to that internal EditText **tv_input**, so i'm writing the following code in my custom EditTextIconItemView:

```
fun EditTextIconItemView.textChanges() =
        tv_input.textChanges().doOnNext { setCharsCount(it.length) }
```

That works well, but now i want my client code to actually skip initial value, so in client code i have:

```
val et = EditTextIconItemView()
et.textChanges().skipInitialValue().subscribe { ... }
```

This requires me to explicitly specify the return type in EditTextIconItemView for **textChanges()**:

```
fun EditTextIconItemView.textChanges(): InitialValueObservable<CharSequence> = 
         tv_input.textChanges().doOnNext { setCharsCount(it.length) }
```

But this won't compile since **doOnNext** returns Observable<T> which cannot be cast to InitialValueObservable<T>.

But i actually don't want the client code to handle that side effect and set up chars count on that View, this is the responsibility of EditTextIconItemView itself. But i' like to still be able to tell, whether to skip initial value or not on client's side.

How could i make it work?

Thank You!
Saw Issue #505 and figured I would throw something in, so I documented two of my most common usages.
Current testbed app works fine on Pixel 3 and emulator both running API 28, but I had a critical bug appear when I tried it on a hardware tablet. Tablet was running API 25, so I spun up an equivalent emulator, and tracked the bug down to the fact that my UI changes go through a `delaySubscription` operator keyed to the `.draws()` of my custom view.

Between inserting `doOnNext` with logger methods into the stream going into the `delaySubscription` and adding similar `doOnSubscribe`s to the state-stream coming in from the back end, it's clear that the `.draws() stream is simply never emitting on API 25.

Everything in the following executes on API 28, but on API 25 only the "setup in" and "Meta subscribed" logging extension functions are executed.

```
private fun setupInStreams() {
        logger("setup in")
        val delayStream =
            qenPage.draws()
                .doOnNext { iLogger("drawn", qenPage) }
                .delay(5, TimeUnit.MILLISECONDS)
                .doOnNext { iLogger("delayed", qenPage) }

        cd.addAll(
            vm.getTouchesOut()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe {
                    qenPage.drawSegment(it)
                },
            vm.getMetaOut()
                .doOnSubscribe { logger("Meta pre-subscribed") }
                .observeOn(AndroidSchedulers.mainThread())
                .delaySubscription(delayStream)
                .doOnSubscribe { logger("Meta subscribed") }
                .subscribe {
                    iLogger("Main activity received", it)
                    when (it) {
                        is MetaState.ClearCurrentPage -> qenPage.clearPage()
                        is MetaState.SelectedPage -> qenPage.drawPage(it.content)
                    }.exhaustive
                }
        )
    }
```
Other guides on medium told me to add this lib to my project. 
Still, I can't understand how to use this. No wiki, readme just tells me how to add it.
I'm  confused
It is a good idea to have a RxBinding Observable passed to my VM, apply the business logic, then add to the VM disposable bag, and subscribing to that Observable on the Activity/Fragment?

Just wondering, since I have some Business logic on the VM for processing the input, but in theory I'm sending a reference of the view to the VM, which sounds, not that great, also there is a weird going back and forth that I don't personally like, how you guys think it would be best handled this cases?