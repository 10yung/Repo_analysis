Instead of padding a datagram containing an Initial packet from a client with null bytes, pad the datagram's Initial packet with with Padding frames.

Again, NB: This is a WIP. If @martinthomson and @agrover are okay with this approach, I will fix the tests to accommodate the new padding. 
The current API for getting secrets from the TLS layer allows for inspection of the secrets.  There isn't any event when the secrets become available, so we end up polling for them.  If you look at the interface definition in the spec, events are part of that.

Our interface doesn't need callbacks to achieve the same effect.  Rather than `fn get_read_secret(epoch: Epoch) -> Option<&SymKey>`, we could have a function in the form `fn take_read_secret(epoch: Epoch) -> Option<SymKey>`.  That way, after calling a handshake function, we could check on each of the secrets and make the corresponding packet protection keys once only.  Then we don't have to guess about the conditions where the keys are available as they are only there once.  It's still a pull-based approach, but at least we know when things are done.
This changes the code to operate on packet number spaces instead of
epochs.  That makes it slightly easier to manage in some places.

The major shift here is in how keys are made.  The current code just
tries to make every key when it is sending packets, iterating through
the epochs as it goes.  This code attempts to only create keys at the
right points in the state machine.  This is only really perfect for
application read keys, which are generated when the handshake is
complete.  Other keys it creates after processing CRYPTO frames.

A later change that might help is to propagate events from the TLS layer
about key availability, which would make this more precise, but this was
already getting big.

This doesn't do key discard, but it should be much easier to implement
now that keys won't be re-created every time.

This version is a draft that includes a bunch of changes in packages
other than transport, but I'll drop that once I can rebase it (and those
other PRs land).  I wanted to put this out there to get a little bit of
feedback.  Only the stuff in `neqo-transport` is relevant here.
CryptoState has 3 states: NotInit, Active and Discarded
Crypto streams are moved into CryptoState
This updates to the latest, which doesn't have a bug that had to be
worked around.

As part of this, I discovered that the docker image needs to include
libclang-dev due to new dependencies.
We might want to track fewer ACK Ranges than 100.  It's highly unlikely that we will ever have a problem with the ACK frame size at this (all hundred ranges with 2^30 or more contiguous packets in each and 2^30 or more gaps between each range would produce a 1600+ byte ACK frame), but more to the point we just don't need to keep acknowledging packets that are so sparsely distributed.  I think we could drop this to 32 happily.
fix #308 and #382.
Add optional qlog context when creating a Connection.

Pass qlog context into Connection from neqo-client. Add cmdline option
to save qlog to a file.

Implement initial trace hooks for client connected start and packet
received. Still a lot more to do.
I have not debug it yet, but what to document:
pto expires we send a packet that contains a ping,  self.tx_mode is set to TxMode::Normal. if we call process_output one more time in some cases a packet with acks will be sent. this does not look right.
If we need to send a ping because pto has expired and we do not have any other frames to send we will send a ping in each epoch.
A server will not ack packets(pings) for epoch 0 and 2 if we already have keys for epoch 3, therefore we will always have outstanding unacked packets even if a connection is idle.