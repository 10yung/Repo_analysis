![Screen Shot 2019-08-07 at 7 37 30 PM](https://user-images.githubusercontent.com/2282364/62669264-3a671d00-b94c-11e9-9e8c-401a371a9bc6.png)

Hi,
I am trying to get the cell index in javascript and then using it as a python variable.
I tried execute this line to capture the cell index:
```
%%node
var cell_index=Jupyter.notebook.get_selected_index()
```
But I got this message:
```
Thrown:
```
This line is working in jupyter (but the problem is that it's javacript variable and not python):
```
%%javascript
var cell_index=Jupyter.notebook.get_selected_index()
```

Do you have any solution for this problem?
Trying to `import pixiedust_node` fails in Python 3.5, with the following error:

```
Pixiedust database opened successfully

Pixiedust version 1.1.17

Table USER_PREFERENCES created successfully
Table service_connections created successfully

---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
<ipython-input-1-4a0fd16c56d9> in <module>()
----> 1 import pixiedust_node

~/miniconda/envs/tmp/lib/python3.5/site-packages/pixiedust_node/__init__.py in <module>()
     60         # start up a Node.js sub-process running a REPL
     61         path = os.path.join(__path__[0], 'pixiedustNodeRepl.js')
---> 62         node = Node(path)
     63 
     64         # pass the node process to the Node magics

~/miniconda/envs/tmp/lib/python3.5/site-packages/pixiedust_node/node.py in __init__(self, path)
    208         # process that runs the Node.js code
    209         args = (self.node_path, path)
--> 210         self.ps = self.popen(args)
    211         #print ("Node process id", self.ps.pid)
    212 

TypeError: __init__() got an unexpected keyword argument 'encoding'
```

In the code, the `encoding` argument is passed to `popen` if the Python version is 3 or greater:

```python
    if sys.version_info.major == 3:
        popen_kwargs['encoding'] = 'utf-8'
```

But the `encoding` argument was only added to `popen` in python 3.6 (see: https://docs.python.org/3.6/library/subprocess.html). I'm not sure if just changing the `if` to `sys.version_info.major == 3 and sys.version_info.minor > 6` will fix the problem.
It seems like the working directory for the node process should match the python working directory in jupyter. I think, related to #38, this would also default the npm location to this same working directory which makes sense and mirrors the behavior of the `%%script node` jupyter cell magic.

I'm happy to put together a PR here if needed. My expertise is definitely more on the node side and less on the jupyter and python side so feel free to correct any misunderstandings I may have here.
Is it possible to run a npm package within a cell after it's been installed like you would from the command line?  I have installed [shp2json](https://www.npmjs.com/package/shp2json) with `npm.install('shp2json')` and would like to then run it with `!shp2json /path/to/shapefile > output.json` but receive an error saying `/bin/sh: 1: shp2json: not found`


Hi! 
I'm experiencing trouble trying to use node-mysql within a pixiedust-node project. 

The cell setup is the following:
```python
import pixiedust_node
npm.install('mysql')
``` 
This works as expected showing the logos of both pixiedust and pixiedust node and then the stats of the module install. 
The problem comes with the nodejs part. The code works perfectly in a nodejs project, but not within pixiedust-node:
```javascript
%%node
var mysql = require('mysql');
var dburl = 'database-url.com';
var con = mysql.createConnection({
  host: dburl,
  user: 'dbuser',
  password: 'dbpassword',
  database: 'dbdatabase'
});
con.connect(function(err) {
    if (err) throw err;
});
var query ='SELECT user_created_date from user LIMIT 100';
con.query(query, function (err, result, fields) {
            if (err) throw err;
            console.log(result);
});
con.end();
```
I write it down here as a single block, but I've tried it in different cell layouts to find more precisely where the error is located. And **it is located in the mysql.createConnection() call**:
```
... ... ... ... ... TypeError: Converting circular structure to JSON
at JSON.stringify (<anonymous>)
at globalVariableChecker (/home/javier/anaconda3/lib/python3.7/site-packages/pixiedust_node/pixiedustNodeRepl.js:26:22)
at REPLServer.writer (/home/javier/anaconda3/lib/python3.7/site-packages/pixiedust_node/pixiedustNodeRepl.js:67:5)
at finish (repl.js:683:38)
at finishExecution (repl.js:310:7)
at REPLServer.defaultEval (repl.js:396:7)
at bound (domain.js:395:14)
at REPLServer.runBound [as eval] (domain.js:408:12)
at REPLServer.onLine (repl.js:639:10)
at REPLServer.emit (events.js:182:13)
/home/javier/anaconda3/lib/python3.7/site-packages/pixiedust_node/pixiedustNodeRepl.js:26
const j = JSON.stringify(r.context[v]);
^
TypeError: Converting circular structure to JSON
at JSON.stringify (<anonymous>)
at Timeout.globalVariableChecker [as _onTimeout] (/home/javier/anaconda3/lib/python3.7/site-packages/pixiedust_node/pixiedustNodeRepl.js:26:22)
at ontimeout (timers.js:436:11)
at tryOnTimeout (timers.js:300:5)
at unrefdHandle (timers.js:520:7)
at Timer.processTimers (timers.js:222:12)
```

npm.install() seems to install modules in the user directory. Is there some way in pixiedust_node to refer to modules installed in the same directory as the notebook file or control the installation location of npm.install()?
Based on https://github.com/IBM/nodejs-in-notebooks/issues/5, which was raised against the sample notebook. Logging it here for reference; in general "run X" cells should probably used with caution to avoid unexpected results. Running one cell at a time the issues are not observed.
**This is the error I got**:

def join_path(self, template, parent):
\n<unknown> in template()
\nTemplateAssertionError: no filter named 'tojson'\n
I'm new to Jupyter and pixiedust and I'm having a hardtime on my first experiments with it.

I'm looping through an array to recover values by time stamp and put them in a new array to be displayed as a line graph.

```
        var data = [];
        body.donors.forEach(
            function(donor) {
                var epochDate = new Date(donor.data_envio).setHours(0,0,0,0);
                var obj = {
                    date: new Date(epochDate),
                    valor: Number(donor.valor)
                };
                data.push(obj);
            }
        );
        display(data);
```

When I do this, the generated chart says "x must be a label or position".

Opening "Options", the `date` field is shown as "string".

I've tried formating the `date` field as ISO 8601 but it is still understood as string.

I've found no information/documentation on how to "cast" my data so that pixiedust correctly understands it.