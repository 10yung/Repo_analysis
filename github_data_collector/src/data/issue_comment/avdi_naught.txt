Is the user supposed to define their own `#marshal_dump` so it can work with `Marshal`?

```ruby
NullObject = Naught.build { |c| c.black_hole }
# fails because marshal_dump returns itself and triggers recursive loop failsafe
Marshal.load(Marshal.dump(NullObject.new))

NullObjectWithDump = Naught.build do |c|
  c.black_hole

  def marshal_dump
  end
end
# works
Marshal.load(Marshal.dump(NullObjectWithDump.new))
```
This PR updates and services the CI matrix.

### Things done to get to green

- [x] 1.8.7 can use RSpec `~> 2.99`. It can not install Rubocop. [Bundler issue which explains that I will have to have the `if` in the Gemfile](https://github.com/bundler/bundler/issues/5377).
- [x] 2.2.7, 2.1.10, 2.0.0, 1.9.3 must use an older Rake due to the older RSpec & Rubocop tasks in use.
- [x] `jruby-head` has no bundle command, so we `gem install bundle` to give it one.
- [x] `rbx-2` can not be installed by rvm on Travis. Removing.

An alternative strategy could be to run Rubocop on 1 platform, as a separate matrix job.
I am in the process of updating an app to Ruby 2.4.0. 

I found I needed to use: 

``` ruby
NullBeaneater = Naught.build do |config|
  config.black_hole
end
```

form in place of the shorthand above. 

I don't understand why specifically.
As requested in Issue #6.

I'm completely open to name changes. I just picked some reasonable names to start with.

It doesn't mention it in Issue #6 but we need some way to get the actual result or <null>, otherwise all you have is the proxy. I chose to go with a method called `__object__`. I'm not thrilled with this name but I also didn't want to pick something that might exist on the wrapped object. Could go with something like `__value__` as well.

I also gave it the option to accept a specific type of null object for the default.

Usage:

``` ruby
require 'naught'

NullProxy([]).first.address.country.__object__    # => <null>
NullProxy([1]).first.abs.__object__               # => 1

null = Naught.build do |config|
  config.define_explicit_conversions
end

NullProxy([], null).first.abs.__object__.to_i     # => 0
```

``` ruby
# without config.predicates_return false
NullObject = Naught.build do |config|
  def coerce(other)
    [0, other]
  end
end

null = NullObject.new;
1 / null # => 0

# with config.predicates_return false
NullObject = Naught.build do |config|
  config.predicates_return false

  def coerce(other)
    [0, other]
  end
end

null = NullObject.new;
1 / null # => NullObject can't be coerced into Fixnum
```

I'm running into really weird behavior when trying to compose combinations of  `impersonate`, `black_hole`, and  `predicates_return(false)` in the same naught builder. Should I not do this?

For example, I'd like the behavior that I can impersonate only methods of a class, that those methods are chainable, and that methods ending in `?` return a boolean. I can put together a test case if this _is_ supposed to be supported... or I can propose an small warning to the docs (unless that warning is there and I'm missing it). 

I wanted to be able to do something like this

``` ruby
Locals = Naught.build do |c|
  c.black_hole
  def to_s
    __callstack__.join('.')
  end
end
```

Seems that this can be refactored further.

Wrap `myvalue` and intercept each method call, wrapping the return value. If ANY call returns nil, replace it with a null object:

``` ruby
SomeConversionFunc(myvalue).foo.bar.baz # => <null>
```

Counterpoint: without Demeter violations this wouldn't be needed ;-)
