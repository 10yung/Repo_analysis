https://github.com/Mvannes/alice-loading-issue
### Issues with loading Alice fixtures with nelmio/alice ^3.5.8 
Hey, we're slowly upgrading to alice 3, which in our case means the latest alice 3.5.8 and 
we're experiencing some issues with this new version that seem to relate to creating objects using `__calls:`
while the object used in `__calls` has been initialised using the same object.

Either way, the `__calls` function seem to create entirely new objects using the referenced template,
instead of being the object created from that template.

## An example:


Given the following class:
```php
class Entity
{
    private $name;
    private $ytitne;

    public function __construct(string $name, Ytitne $ytitne)
    {
        $this->name   = $name;
        $this->ytitne = $ytitne;
        $this->ytitne->alterEntity($this);
    }

    public function getName(): string
    {
        return $this->name;
    }
}
```
Which gets an instance of `Ytitne` and calls it's `alterEntity` function.
And the `Ytitne` class:
```php
class Ytitne
{
    private $name;
    private $entity;

    public function __construct(string $name)
    {
        $this->name = $name;
    }

    public function alterEntity(Entity $entity): void
    {
        if (null !== $this->entity && $this->entity !== $entity) {
            var_dump($this->entity->getName(), $entity->getName());
            throw new \InvalidArgumentException('Can not alter this entity, as one exists');
        }
        $this->entity = $entity;
    }
}
```


Note, the `alterEntity` function will throw an exception when the `Entity` has already been set
and the given `Entity` is not the same as the one already configured.

Creating a fixture file for this, we get the following `broken.yaml`
```yaml
VanNes\Entity:
    entity_1:
        __construct:
            - <word()>
            - '@ytitne_1'


VanNes\Ytitne:
    ytitne_1:
        __construct:
            - <word()>
        __calls:
            -  alterEntity: ['@entity_1']
```

This would imply that two objects are created, and the `ytitne_1` calls the `alterEntity`
function with the created object `@entity_1`.

Instead, if we use the following code to load this fixture file we get a completely different result.
```php
use Nelmio\Alice\Loader\NativeLoader;

$loader = new NativeLoader();
$loader->loadFile(__DIR__ . '/Resources/broken.yaml');
```

Namely, we get the following: 
```
/home/mvannes/projects/alice-loading-issue/src/Ytitne.php:19:
string(8) "quisquam"
/home/mvannes/projects/alice-loading-issue/src/Ytitne.php:19:
string(5) "culpa"
PHP Fatal error:  Uncaught InvalidArgumentException: Can not alter this entity, as one exists in /home/mvannes/projects/alice-loading-issue/src/Ytitne.php:20
Stack trace:
#0 /home/mvannes/projects/alice-loading-issue/src/Entity.php(15): VanNes\Ytitne->alterEntity(Object(VanNes\Entity))
#1 /home/mvannes/projects/alice-loading-issue/vendor/nelmio/alice/src/Generator/Instantiator/Chainable/NoCallerMethodCallInstantiator.php(41): VanNes\Entity->__construct('culpa', Object(VanNes\Ytitne))
#2 /home/mvannes/projects/alice-loading-issue/vendor/nelmio/alice/src/Generator/Instantiator/Chainable/AbstractChainableInstantiator.php(44): Nelmio\Alice\Generator\Instantiator\Chainable\NoCallerMethodCallInstantiator->createInstance(Object(Nelmio\Alice\Definition\Fixture\TemplatingFixture))
#3 /home/mvannes/projects/alice-loading-issue/vendor/nelmio/alice/src/Generator/Instantiator/InstantiatorRegistry.php(72): Nelmio\Alice\Generator\Instantiator\Chainable\AbstractChainableInstantiator->instantiate(Object(Nelmio\Alice\Definition\Fixture\Templati in /home/mvannes/projects/alice-loading-issue/vendor/nelmio/alice/src/Generator/ObjectGenerator/SimpleObjectGenerator.php on line 114
```

As one can see, the `\InvalidArgumentException` is thrown. And the object passed to `alterEntity` even has a different
name from the one that was initially set through the `Entity` constructor (or vice versa?)

If we remove the call to this exception, replace it with a `return`, and instead look at a var dump of the created objects, we get the following:

```
array(2) {
  'ytitne_1' =>
  class VanNes\Ytitne#274 (2) {
    private $name =>
    string(11) "consequatur"
    private $entity =>
    class VanNes\Entity#290 (2) {
      private $name =>
      string(8) "quisquam"
      private $ytitne =>
              ...

    }
  }
  'entity_1' =>
  class VanNes\Entity#279 (2) {
    private $name =>
    string(5) "culpa"
    private $ytitne =>
    class VanNes\Ytitne#274 (2) {
      private $name =>
      string(11) "consequatur"
      private $entity =>
      class VanNes\Entity#290 (2) {
        ...
      }
    }
  }
}

```

Note that the object hashes of the `entity_1` and `ytitne_1`'s entity differ.

This feels like it isn't intended behaviour, as additional objects are created instead of 

To test it for yourself; 
- `git clone git@github.com:Mvannes/alice-loading-issue.git`
- `cd alice-loading-issue`
- `composer install`
- `php app.php`


This was tested using the following php version:
```
PHP 7.3.9-1+ubuntu18.04.1+deb.sury.org+1 (cli) (built: Sep  2 2019 12:54:24) ( NTS )
Copyright (c) 1997-2018 The PHP Group
Zend Engine v3.3.9, Copyright (c) 1998-2018 Zend Technologies
    with Zend OPcache v7.3.9-1+ubuntu18.04.1+deb.sury.org+1, Copyright (c) 1999-2018, by Zend Technologies
    with Xdebug v2.7.2, Copyright (c) 2002-2019, by Derick Rethans

```


I tried to use objects from DB to get random element from existing ones through `<randomElement($objects)>`

So, I get the objects:
`$objects = ..getRepository(Repo::class)->findAll()`
and pass it as $parameters in loadFile
`$loader->loadFile('fixtures.yml', ['objects' => $objects]);`
and we have an error:
`The class "ContainerXzhxda3\appDevDebugProjectContainer" is not cloneable.`

Is it possible to set true for flag $this->skipUncloneable in DeepCopy?
(`deep-copy/src/DeepCopy/DeepCopy.php:179`)

I created the following fixture: `created: '<strval(<dateTimeBetween("-1 days", "now")>)>'` and got an error: 
```
The value "\<dateTimeBetween(__ARG_TOKEN__ab6e5fc745de24f87a45df883b03c187" contains an unclosed function.
```

I think the problem is in `vendor/nelmio/alice/src/FixtureBuilder/ExpressionLanguage/Parser/TokenParser/Chainable/FunctionTokenParser.php`
when we parce  `strval` function I catch arguments:
`<dateTimeBetween(__ARG_TOKEN__ab6e5fc745de24f87a45df883b03c187`
and `__ARG_TOKEN__97bc592b27a9ada2d9a4bb418ed0ebed)> `

I think the reason is `parseArguments` method doesn't expect that divider can be used for the arguments of included function.
Hi,

I use your bundle and today i'm be confronted to a complicated situation with the multiple-references.

I was trying to dynamically create an user and associate dynamicly an object using the <current()> method for reference.  
I follow your doc, but you never mention the impossibility tu put the <current()> at other place than the end for reference.

Exemple:

```
Nelmio\Entity\User:
    # ...

Nelmio\Entity\Group:
    group{1..10}:
        owner: '@user<current()test>'
```

If you try that, that not working. I have to put the <current()> at the end, and only at the end.

Then, i ask you if you can add documentation into https://github.com/nelmio/alice/blob/master/doc/relations-handling.md page please ?
Symfony 4.4 and 5 just released and we are heavily using this bundle for testing.

```
 $ composer require --dev hautelook/alice-bundle 

Using version ^2.5 for hautelook/alice-bundle
./composer.json has been updated
Loading composer repositories with package information
Updating dependencies (including require-dev)
Restricting packages listed in "symfony/symfony" to "5.0.*"
Your requirements could not be resolved to an installable set of packages.

  Problem 1
    - hautelook/alice-bundle v2.5.1 requires symfony/finder ^3.4 || ^4.0 -> no matching package found.
    - hautelook/alice-bundle 2.5.0 requires symfony/finder ^3.4 || ^4.0 -> no matching package found.
    - Installation request for hautelook/alice-bundle ^2.5 -> satisfiable by hautelook/alice-bundle[2.5.0, v2.5.1].

Potential causes:
 - A typo in the package name
 - The package is not available in a stable-enough version according to your minimum-stability setting
   see <https://getcomposer.org/doc/04-schema.md#minimum-stability> for more details.
 - It's a private package and you forgot to add a custom repository to find it

Read <https://getcomposer.org/doc/articles/troubleshooting.md> for further common problems.

```
Using a reference (`@...`) in a PHP expression (`<(...)>`) results in the following error:

```
In EvaluatedValueResolver.php(74) : eval()'d code line 1:

  [Symfony\Component\Debug\Exception\ContextErrorException]
  Notice: Undefined variable: _instances
```

Hi, in this example we have : 
```
event_1:
  id: 1
  name: "event 1"
event_2:
  id: 2
  name: "event_2"
```

When I try this, only one record is register inside the database (I use SQLite)
```
something_{@event_1}:
  id: 1
  event: <current()>
something_{@event_1}_test:
  id: 2
  event: <current()>
```
But it's working when this : 
```
something_{@event_1}:
  id: 1
  event: <current()>
something_event_1_test:
  id: 2
  event: '@event_1'
```

Something is wrong with my usage ? 
how to work with self refference, any examples?
https://github.com/nelmio/alice/issues/601#issuecomment-481601779

I think it would be more beneficial for the user to propose a new API to write down fixtures, e.g.:

```php
<?php

use Is\Bundle\PlanBundle\Entity\Event;
use Nelmio\Alice\Alice;

return [
  Event::class => [
    'foo1' => [
      'title' => Alice::faker()->sentence(3),
      'show' => Alice::reference('@show_*'),
      'startDateTime': Alice::faker()->dateTimeBetween('-1 month', '+4 month'),
      'isDraft' => false,
      'version' => Alice::optional(10, Alice::reference('@version_*')),
      '__calls': [
        'setRevenue (25%?)': [Alice::faker()->moneyBetween(10000, 300000)]
      ],
    ],
    'foo2' => new Foo(),
  ],
];

```

There is three immediate advantages there:

- (Almost) no more YAML DSL to learn, things could easily be discoverable via that `Alice` class
- In some cases, you can ditch the Alice API altogether and just provide your object instantiated as a regular object (cf. `foo2` in the example above)
- It could be introduced as a new feature in 3.x, providing a soft migration path for the users for 4.x (which can wait plenty of time for now at least)
