![6F771A67DC841631D365928B660A7A97](https://user-images.githubusercontent.com/12589575/61203877-387bb680-a71e-11e9-8740-e8050e6bc96d.jpg)

类似如图效果。不希望跟其他弹幕互相覆盖，或者起冲突
单单靠已经显示的数量还是不足以解决重叠的问题
因为同样的显示面积, 可以容纳size小的弹幕多, 但可以容纳 size 小的弹幕少(如弹幕字数多少就决定了 size 的大小)
所以能否增加弹幕的生命周期方法:
1.弹幕开始显示
2.弹幕完全显示
3.弹幕开始消失
4.弹幕完全消失

这样更能完善限流
我自定义弹幕 有两个字段 姓名和 文本。
我在控制台抓取数据 发送和 代理方法都正确  这两个字段对应的内容 也对 。但是展示出来的 有时候会出现 姓名 一栏赋值成了 文本。 就会导致 用户姓名变成了文本。具体代码如下， 麻烦看下是什么原因
这个是接收的弹幕内容
  [_renderer receive:[self QNliveBarrageViewSpriteDescriptorWithDirection:BarrageWalkDirectionR2L side:BarrageWalkSideDefault message:message]];

 这个是返回  BarrageDescriptor 方法 
- (BarrageDescriptor *)liveBarrageViewSpriteDescriptorWithDirection:(BarrageWalkDirection)direction side:(BarrageWalkSide)side message:(ILVLiveCustomMessage *)message
{
    NSString *actionParam = [[NSString alloc] initWithData:message.data encoding:NSUTF8StringEncoding];
    JSONModelError *error = nil;
    LiveBarrageModel *textModel = [[LiveBarrageModel alloc] initWithString:actionParam error:&error];
    if (!textModel.is_colorv_barrage) {
        return nil;
    }
    
    NSString *userName = [NSString stringWithFormat:@"%@",textModel.u.name];
    NSString *iconPath = [NSString stringWithFormat:@"%@",textModel.u.icon];
    //如果是神秘富豪
    if (textModel.hide.count) {
        userName = [textModel.hide objectForKey:@"hide_name"];
        iconPath = [textModel.hide objectForKey:@"hide_icon"];
    }
    BarrageDescriptor * descriptor = [[BarrageDescriptor alloc]init];
    descriptor.spriteName = NSStringFromClass([BarrageWalkSprite class]);
    descriptor.params[@"speed"] = @(100 * (double)random()/RAND_MAX+50);
    descriptor.params[@"direction"] = @(BarrageWalkDirectionR2L);
    descriptor.params[@"side"] = @(BarrageWalkSideDefault);
    descriptor.params[@"viewClassName"] = NSStringFromClass([LiveBarrageView class]);
    **descriptor.params[@"iconUrl"] = iconPath;
    descriptor.params[@"user_name"] = userName;
    descriptor.params[@"text_content"] = textModel.text ?:@"";
    descriptor.params[@"pendant_path"] = textModel.u.pendant_path;
    descriptor.params[@"colors"] = textModel.color;**
下面这几个是我自己家的
    return descriptor;
}

下面是
- (void)configureWithParams:(NSDictionary *)params
{
    [super configureWithParams:params];
    
    **self.nameLabel.text = [params objectForKey:@"user_name"];
    self.titleLabel.text = [params objectForKey:@"text_content"];**   在这分别给name 和 title 赋值 
    [self.widgetImageView setImageWithCDNPath:[params objectForKey:@"pendant_path"]  placeholderImage:nil];
    [self.avatarImageView setImageWithCDNPath:[params objectForKey:@"iconUrl"] placeholderImage:[UIImage defaultIcon]];

    LiveBarrageColor *color = [[LiveBarrageColor alloc] initWithDictionary:[params objectForKey:@"colors"] error:nil];
    
    NSString *nameColor = color.name.length >0 ? color.name : @"CCCCCC";
    self.nameLabel.textColor = [UIColor hex_colorWithRGBHexString:nameColor];
    
    NSString *colorFront = color.back1.length > 0 ? color.back1 : @"#616161";
    NSString *colorBack = color.back2.length > 0 ? color.back2 : @"626262";
    self.bgColorLayer.colors = @[(__bridge id)[UIColor hex_colorWithRGBHexString:colorFront].CGColor , (__bridge id)[UIColor hex_colorWithRGBHexString:colorBack].CGColor];
}


奇怪的是 控制台输出的 name 和 title对应的数据都对 但是展示出来的弹幕 确是两个 title 。 这种问题  是偶现 的大约 四五次 可以试出来。  希望能解答我的疑惑 非常感谢 
lable 内存泄漏
不应该把绘制交给CPU吧，用GPU不是更好？

通过opengl es在layer层绘画
点击开始，CPU起步56%，随着速度的减慢，CPU能达到90%以上; 之后暂停再开始，CPU仍旧保持在80%左右。
iPhone6   iOS 11.3



<img width="309" alt="2018-04-03 5 23 56" src="https://user-images.githubusercontent.com/7012340/38241062-d8f6c1e4-3763-11e8-985f-e17339db26e7.png">
可以自定义弹幕文字的背景间距
 键盘弹出来的时候，弹幕明显会卡顿一下（系统键盘只会卡顿第一次，第三方键盘每次调用都会卡顿）。