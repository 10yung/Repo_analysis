I have a `config` module available on `GOPATH`. I verify this by running the following program:
```
package main

import (
    "config"
    "fmt"
)

func main() {
    _ = config.NewConfig()
    fmt.Printf("OK\n")
}

```

When run, this prints as expected:
```
$ go run main.go
OK
```
However, with `gore`, I get an error:

```
$ gore
gore version 0.5.0  :help for help
gore> :import config
gore> :import fmt
gore> _ = config.NewConfig()
cannot load config: malformed module path "config": missing dot in first path element
gore> fmt.Printf("OK\n")
cannot load config: malformed module path "config": missing dot in first path element
gore> :print
package main

import (
    "github.com/k0kubun/pp"
    "fmt"
    "config"
)

func __gore_p(xs ...interface{}) {
    for _, x := range xs {
        pp.Println(x)
    }
}
func main() { _ = config.NewConfig(); _, _ = fmt.Printf("OK\n") }

gore> 
```
Am I doing something wrong? I just updated `gore` after running into #172 and I've tried updating `gore` both with `GO111MODULE=on` and without.
To Reproduce:
---

file `test1.go`:

```
package test

var x = 1
```

in shell:

```
gore -context test1.go
```

in gore:

```
gore> x
 1

gore> :t x
 type: cannot get type: x

gore> :t 1
 int
```

Expected:
---

`:t x` show type of `x` correctly.

Observed:
---

`x` is loaded to current environment but `:t x` doesn't works.

Is there a way to easily benchmark existing functions without writing boiler plate BenchmarkFunC() like code?
Like `import alias "github.com/some/pkg"`, seems like parser.ParseFile can not process an alias import.
With all the goodies included so that it could be run straight away?
gore> :import github.com/lib/pq
no errors
connect to a postgres database 
gore> (*errors.errorString)sql: unknown driver "postgres" (forgotten import?)


How do I import github.com/lib/pq properly? Thank you!
Kind of like `_` in the Python REPL.
Is there anyway to undo my input or if I import the wrong package how to cancel it ?
```
gore> :import "fmt"
gore> fmt.Println("ha!")
ha!
(int)4
(interface {})<nil>
gore> fmt.Println("ha!")
ha!
ha!
(int)4
(interface {})<nil>
gore> fmt.Println("ha!")
ha!
ha!
ha!
(int)4
(interface {})<nil>
gore> fmt.Println("ha!");
ha!
ha!
ha!
ha!
gore> 
gore> 
gore> 
```

See the above short session, and note that the calls to `fmt.Println("ha!")` seem to stack and repeat each time `fmt.Println` is used, is this intended?

Also note that omitting the semicolon results in

```
(int)4
(interface {})<nil>
```

being printed after the accumulated output from `fmt.Println`.

When asign `time.Now()` to a variable, that variable is not fixed and changes every time you print it

``` go
t1 := time.Now()
t2 := time.Now()
t1 // one value
t1 // would print another value
t2.Sub(t1)
t2.Sub(t1) // different from previous evaluation
```

my gore version is 0.2.5 and go version is 1.5.2
