**Tool information**
- Tool name: Docker
- Add or update? update
- Desired version: 3.2.0 or higher (See [release-notes](https://docs.docker.com/ee/ucp/release-notes/))
- Approximate size: <!--- Leave blank if not known -->

As of 3.2.0, a feature called `BuildKit` can be used. This significantly boosts docker build time, which makes sense to use it in CI. 

**Area for Triage**:
<!-- See https://github.com/actions/virtual-environments/tree/master/triage-rules.yml for areas -->

**Question, Bug, or Feature?**: Question
<!-- Choose "Question", "Bug", or "Feature" -->

**Virtual environments affected**
- [ ] macOS 10.15
- [x] Ubuntu 16.04 LTS
- [x] Ubuntu 18.04 LTS
- [ ] Windows Server 2016 R2
- [ ] Windows Server 2019

**Can this tool be installed during the build?**
<!--- If so, please provide a description of how and approximately how much time it takes.  -->
It's update of enterprise version of docker, so I don't know if people want to do it manually. 
So I think the best is for GitHub to update it by itself.  

**Are you willing to submit a PR?**
<!--- We accept contributions! -->
If applicable.
Adds the WinXP component to the Visual Studio Installation (ref #288).
**Tool information**
- Tool name: Microsoft.VisualStudio.Component.WinXP
- Add or update? Add
- Desired version: The one that comes with Visual Studio
- Approximate size: <!--- Leave blank if not known -->
- If this is an add request:
  - Brief description of tool: This is a component of Visual Studio that enables compiling C/C++ with XP compatibility
  - URL for tool's homepage: <!--- URL -->

**Area for Triage**:
<!-- See https://github.com/actions/virtual-environments/tree/master/triage-rules.yml for areas -->

**Question, Bug, or Feature?**:
Feature

**Virtual environments affected**
- [ ] macOS 10.15
- [ ] Ubuntu 16.04 LTS
- [ ] Ubuntu 18.04 LTS
- [ ] Windows Server 2016 R2
- [x] Windows Server 2019

**Can this tool be installed during the build?**
<!--- If so, please provide a description of how and approximately how much time it takes.  -->
Manual install at each run consumes ~14 minutes (refer to https://github.com/canihavesomecoffee/ccextractor/commit/821f20dc0e443e74155a8eee486957f1cecb51ff/checks?check_suite_id=408296775), so I believe it's more efficient to add this by default.

**Are you willing to submit a PR?**
<!--- We accept contributions! -->
Yes! I'll make the modification and open a PR.

**Tool information**
- Tool name: RubyGems https://rubygems.org/pages/download
- Add or update? Update
- Desired version: 3.0.5 or higher
- Approximate size: 

**Area for Triage**:
Ruby

**Question, Bug, or Feature?**:
Feature

**Virtual environments affected**
- [X] macOS 10.15
- [X] Ubuntu 16.04 LTS
- [X] Ubuntu 18.04 LTS
- [X] Windows Server 2016 R2
- [X] Windows Server 2019
**Tool information**
- Tool name: Lerna
- Add or update? Add
- Desired version: Latest
- Approximate size: <!--- Leave blank if not known -->
- If this is an add request:
  - Brief description of tool: Lerna is a common package manager for monorepositories
  - URL for tool's homepage: https://lerna.js.org/

**Area for Triage**:
<!-- See https://github.com/actions/virtual-environments/tree/master/triage-rules.yml for areas -->

**Question, Bug, or Feature?**:
<!-- Choose "Question", "Bug", or "Feature" -->

**Virtual environments affected**
- [ ] macOS 10.15
- [ ] Ubuntu 16.04 LTS
- [ ] Ubuntu 18.04 LTS
- [] Windows Server 2016 R2
- [X] Windows Server 2019

**Can this tool be installed during the build?**
<!--- If so, please provide a description of how and approximately how much time it takes.  -->

**Are you willing to submit a PR?**
<!--- We accept contributions! -->

**Description**
Our build failed on Azure DevOps this week due to unexpected removal of `\Microsoft SDKs\Windows\v10.0A\bin\NETFX 4.7.2 Tools\` path from build environment.

Build is using `vmImage: 'windows-latest'`

Issue is easy to fix by updating to latest SDK 4.8.

**Problem**
Problem is, that this update of image is not documented in the release notes.

**Virtual environments affected**
- [ ] macOS 10.15
- [ ] Ubuntu 16.04 LTS
- [ ] Ubuntu 18.04 LTS
- [ ] Windows Server 2016 R2
- [x] Windows Server 2019


**Describe the bug**
`libcurl3` is not in the final image, as it is replaced by `libcurl4` when installing `curl` (on Ubuntu 18.04). It is still installed during the process which leads to other packages being uninstalled because of incompatibilities.

**Area for Triage**: 
<!-- See https://github.com/actions/virtual-environments/tree/master/triage-rules.yml for areas -->

**Question, Bug, or Feature?**: 
<!-- Choose "Question", "Bug", or "Feature" -->
Bug

**Virtual environments affected**
- [ ] macOS 10.15
- [ ] Ubuntu 16.04 LTS
- [x] Ubuntu 18.04 LTS
- [ ] Windows Server 2016 R2
- [ ] Windows Server 2019

**Expected behavior**
`libcurl3` is not installed at all.

**Context**
I am trying to build this image on Google Cloud. I managed to change the builder, start from an Ubuntu 18.04 LTS image, and complete the process, but when starting a new VM from the resulting image I could not connect to it with SSH.

SSH authorizations and users are managed by https://github.com/GoogleCloudPlatform/compute-image-packages, which provides systemd services running on the machine. They are preinstalled on GCP-provided images, but if you ever need to create your own images the packages to install are documented [here](https://cloud.google.com/compute/docs/images/install-guest-environment#in_place).

**Actual behavior**
I ran the packer build in debug mode, checking on the builder VM the process as it went along.
- In https://github.com/actions/virtual-environments/blob/master/images/linux/ubuntu1804.json#L126 the script `scripts/installers/1804/basic.sh` is run, which in turn in [line 32](https://github.com/actions/virtual-environments/blob/master/images/linux/scripts/installers/1804/basic.sh#L32) installs `libcurl3`.
- Installing `libcurl3` conflicts with `libcurl4` which is required by `curl`, so `libcurl4` is removed and with it `google-compute-engine-oslogin`.
- In [line #116](https://github.com/actions/virtual-environments/blob/master/images/linux/scripts/installers/1804/basic.sh#L116) `curl` is installed, which will bring along `libcurl4` and uninstall `libcurl3`.

The result is that `libcurl3` is not available, but unfortunately `google-compute-engine-oslogin` was already removed so all future SSH connections fail.

Note: I only tested this on the Ubuntu 18.04 image, I don't know if it is also present on the 16.04 version.
Software updates:
- Node.js v12.14.1
- NVM v8.17.0 *,v10.18.0 *,v12.14.0
- .NET SDK  3.1.100 3.1.101
- Go 1.13.6
- Bundler version 2.1.4
- Curl 7.68.0
- Git: 2.25.0
- gpg (GnuPG) 2.2.19
- Fastlane 2.140.0
- Azure CLI 2.0.80
- Google Chrome 79.0.3945.117 
- ChromeDriver 79.0.3945.36
- macOS toolcache Python 2.7.17 3.5.9 3.6.10 3.7.6 3.8.1
- macOS toolcache Ruby 2.4.9 2.5.7 2.6.5
- Android Emulator 29.3.4  

Xamarin:
- Visual Studio for Mac 8.4.0.2657
- Mono 6.6.0.155
- Xamarin.iOS 13.8.3.0
- Xamarin.Mac 6.8.3.0
- Xamarin.Android 10.1.1

Since today, trying to untar a `tar.xz` archive on `windows-latest` seems not to be possible:

- [MWE1](https://github.com/eine/setup-msys2/blob/07a6f112cd2ac8bef7ab984f2a2a5f9213196b11/main.js): `tc.extractTar` [stuck](https://github.com/eine/setup-msys2/commit/07a6f112cd2ac8bef7ab984f2a2a5f9213196b11/checks?check_suite_id=404893652)
- [MWE2](https://github.com/eine/setup-msys2/blob/c0a28de30a068489254ed39d4c29a57ffdc9d769/main.js): `tar -x -J --force-local -f` [failure](https://github.com/eine/setup-msys2/commit/c0a28de30a068489254ed39d4c29a57ffdc9d769/checks?check_suite_id=404905818)
- [MWE3](https://github.com/eine/setup-msys2/blob/59a2bc91b344be13c09ced79e4f70de97bf1a833/main.js): `tar -xf distrib` [stuck](https://github.com/eine/setup-msys2/commit/59a2bc91b344be13c09ced79e4f70de97bf1a833/checks?check_suite_id=404908739)
- [MWE4](https://github.com/eine/setup-msys2/blob/a4db4e2813844e3ab9027ceb45c8604e5bd40a6d/main.js): `tar -xJf distrib` [stuck](https://github.com/eine/setup-msys2/commit/a4db4e2813844e3ab9027ceb45c8604e5bd40a6d/checks?check_suite_id=404909806)

/cc @ericsciple
Since last night, we're basically seeing [this](https://github.com/actions/runner/issues/283#issue-550349488) error output for all of our builds.

```
Run actions/setup-ruby@v1
##[error]Version 2.6.3 not found
##[error]Node run failed with exit code 1
```