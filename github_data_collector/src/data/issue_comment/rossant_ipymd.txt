If we have an .ipynb notebook that contains a first Markdown cell:

`First Markdown text.`

Then a second Markdown cell _with two paragraphs_:

```
Second Markdown text…

… with a second paragraph.
```

Then converting to .py and then back to .ipynb fails: the second cell is considered (commented out) code. This is a problem, because this situation is very likely to happen.

Also, if the first Markdown cell is a header (`# This is a header`), then the second Markdown cell is considered code through the roundtrip, which is a problem. Having a header cell and then some Markdown cell is another, common situation, for notebook.

PS: I tested this with the grst/ipymd version of `ipymd`, which [apparently didn't touch this part of the code](https://github.com/grst/ipymd/issues/24). The pip version (of rossant/ipymd) fails with:
```
  File "/…/anaconda/envs/py2/lib/python2.7/site-packages/ipymd/formats/notebook.py", line 80, in read
    assert nb['nbformat'] >= 4
TypeError: string indices must be integers, not str
```
A Jupyter notebook that contains Unicode characters seems to be failing when converted to Python code:

```
  …
  File "/…/anaconda/envs/py2/lib/python2.7/site-packages/ipymd/utils/utils.py", line 133, in _write_text
    f.write(contents)
UnicodeEncodeError: 'ascii' codec can't encode character u'\xe9' in position 15310: ordinal not in range(128)
```

Encoding the Python file in UTF-8 instead works (`f.write(contents.encode("utf-8"))`), but then probably this should also add a `# coding=UTF-8` at the beginning of the generated Python file.

Also, the conversion back to a Jupyter notebook might have to be adapted so as to be compatible with this change.
How does one create a Python code cell in `.md` files? The documentation states:

> Python (.py): code cells are delimited by double line breaks. Markdown cells = Python comments. [TODO: this doesn't work well, see #28 and #31]

However double line breaks are not working say for this example:

```markdown
#H1

print('hi')
```

I have Ipymd working for jupyter notebooks but it's not working for jupyter lab. In Jupyter lab, everything looks good (.md files icons changed from markdown symbol to the notebook symbol), but when I open them they open in the text editor and not in the notebook editor.

I don't know much about how jupyter lab is structured so perhaps this isn't something I should've expected to work, but I thought the notebook parts would be similar.

Am I doing something wrong? If not, are there plans to support jupyter lab?
I created [RMarkdown](http://rmarkdown.rstudio.com/r_notebooks.html) support for ipymd. With my extension, Rmd files edited in rstudio can be directly opened with jupyter. 

Notably, this format two output-files:
 * `.Rmd`, the rmarkdown source code
 * `.nb.html`, where the output is stored. 

Like that, input and output are separated, which is really handy when working with version control. 

### Images are fully supported
Images and other content, such as tables, are fully supported. Unlike the other markdown formats, Rmarkdown is thus a full replacement for jupyter nbformat. 

### The ipymd-cell representation was not sufficient
As I wanted to cover all information from jupyter nbformat, the sparse cell representation used for the other formats was not sufficient. I therefore use the jupyter nbformat as internal representation and convert directly between `notebook` and `rmarkdown`. This required to implement a 'special case' in `FormatManager`. 

I couldn't think of an elegant solution to address this, without rewriting a good deal of `core` code. 

### I added a virtualenv for testing/developing
`make jupyter` will run jupyter in a virtual environment with ipymd enabled, so that
I don't have to mess with my production instance of jupyter. 

### I improved the README
I restructured the README, starting with a concise motivation, then an overview of formats and installation instructions
Hi,

Thanks for sharing this package. It looks really useful.
I have trouble using it under anaconda.
It seems like everything installs correctly, however, when I open a .md file, it opens as a simple text file.

The procedure I followed for adding ipymd to my conda enviroment was:
```

source activate my_env
pip install ipymd 
jupyter notebook --generate-config
jupyter --config-dir # --> Result with: /home/user/.jupyter
echo c.NotebookApp.contents_manager_class = 'ipymd.IPymdContentsManager' >> /home/user/.jupyter/jupyter_notebook_config.py
echo c.IPymdContentsManager.format = 'markdown' >>  /home/user/jupyter_notebook_config.py 

```
and then double checking the above line were added correctly to /home/user/jupyter_notebook_config.py 

Thanks again!

If ipymd notebook don't store output images in notebook anymore, what's the good practise to collect the outputs?

Thanks,
I'm afraid I can't figure out how to use this. I have

    c.NotebookApp.contents_manager_class = 'ipymd.IPymdContentsManager'

In my jupyter config. But when I open .md files, I can't compute with them. Likewise, if I start a new notebook and save it, it is still saved in ipynb format, not markdown. So clearly I'm missing either the purpose of this package and/or how to use it.

What I was looking for is a way to have jupyter create, open and close .md and .Rmd files into usable notebooks.
cc @lepture @bollwyvl 

As far as I remember the changes were relatively minor. I'll give more information when I find the time to delve into the code again. It was something along the lines of "having a non-renderer Markdown parser that allows one to write callback methods that don't render anything".

Issue raised by @bollwyvl. The question is "how to customize how cells are split during Markdown => ipynb conversion"?

There are several ways of doing it; here's one.

By default, the current behavior is kept: the smallest cells are created (i.e. one for every new line `\n\n`, basically), using the observation that it's easier to merge than to split cells.

Then, there is a dedicated class, for example `CellMerger`, that is responsible for merging consecutive cells. It implements a method `to_merge(cell0, cell_1)` that takes as input two consecutive ipymd cells, and returns `True` or `False`. When converting from Markdown to ipynb, this class is called at the end of the conversion. It starts from the first cell, decides whether it should be merged with the next one, does the merge if necessary, and move to the next pair of cells, until the end. (probably this should only concern Markdown cells; a code cell will never be merged with a Markdown cell!)

Returning always `True` means that we'll end up with as few Markdown cells as possible (a single big cell if there's no code cell).

Returning always `False` means that the current behavior is kept.

In the middle, we can customize how cells should be created out of Markdown text. For example, decide that two Markdown cells should be merged if none starts with a header.

The default `CellMerger` should implement reasonable heuristics between the two extremes.

Another thing: it may be possible to force a split with something like a `***` in Markdown, but I don't think it should be mandatory (i.e. not writing any `***` should not result in a single big cell for the whole document!)
