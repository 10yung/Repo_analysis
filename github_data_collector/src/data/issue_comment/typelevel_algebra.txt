Right now, `spire` has a finer grained distinction of commutative rings, namely:

- the availability of `gcd` and `lcm` operations,
- the availability of Euclidean division (`emod`, `equot`),

in the type classes `GCDRing` and `EuclideanRing`. As the corresponding operations are already part of the Java/Scala API for e.g. integers, it would be natural to include them in `algebra`. The corresponding type classes are pretty uncontroversial and map to the mathematical hierarchy.

Another step in the hierarchy, `UniqueFactorizationDomain` relates to the availability of factorization into prime elements. There, the API is less clear. For various reasons, this type class is present outside the ring hierarchy in Spire, and I suggest it is not included in algebra.

(There is also the story of `Signed` -- for abs -- and `TruncatedDivision`, but that should be discussed separately)
Right now, there's `AdditiveSemigroup` and `MultiplicativeSemigroup` which are then combined into `Semiring`. This is all well and good, but unfortunately there's a huge amount of code out there written on the basis of `cats.kernel.Semigroup` and it's a bit of a shame we can't reuse those.
Especially in Spire where the various numeric types don't have `Monoid` instances and therefore can't be `foldMap`ed.

Since in the Cats ecosystem numeric types usually come with an Additive Monoid as default, I would personally love to see that convention being expanded in this project, but I also understand there are some good reasons not to do that. 
Here is some code I came up with that demonstrates how I'd personally like to have it:

```scala
trait Semiring[A] extends CommutativeMonoid[A] {
  def times[A](x: A, y: A): A

  def plus[A](x: A, y: A): A = combine(x, y)
  def zero[A] = empty[A]
}

trait Rig[A] extends Semiring[A] {
  def one[A]: A
}
```



(This comment is *not* about the simpler encoding discussed in #206.)

I remarked that the laws structure does not follow the typeclass structure exactly. For example, we have tests for `Lattice[A] with BoundedJoinSemilattice[A]`, which simply collect laws of `Lattice` and `BoundedJoinSemilattice`, however the corresponding combined typeclass does not exist.

Combinations with `DistributiveLattice[A]` do not exist: thus we have the quite obtuse fragment

```scala
  def generalizedBool(implicit A: GenBool[A]) = new LogicProperties(
    name = "generalized bool",
    parents = Seq(),
    ll = new LatticeProperties(
      name = "lowerBoundedDistributiveLattice",
      parents = Seq(boundedJoinSemilattice, distributiveLattice),
      join = Some(boundedSemilattice(A.joinSemilattice)),
      meet = Some(semilattice(A.meetSemilattice))
    ),
```
in the definition of `generalizedBool`.

Laws should serve as executable documentation, and this goes against the spirit.

I don't know what is the good solution there

Solution 1: the law hierarchy follows the typeclass hierarchy. Extra laws that occur when multiple types interact are proposed separately (i.e. lattices with partial orders). For this to work, we need a way to merge RuleSets.

Solution 2: close the hierachy by adding all combinations. That would double the size of the lattice laws, as every instance would have a distributive copy alongside.

I'll try to come up with something better with my reformulation of laws; in case it does not go through, I'll let this issue remind us of the problem.
I think that these typeclasses should go into Algebra.
Goals:
1. Enable use of syntax (infix or postfix operators) over datatypes for which Algebra typeclasses are defined, when using Algera standalone (doesn't require Spire or Algebird)
2. (Lower priority) Achieve the above without duplicating syntax code between Algebra and Cats.

This issue extends #78 and links some recent [gitter discussion](https://gitter.im/non/algebra?at=5857691f0730ce6937e17747). I chose a new issue over extending #78 because of the introduction of cats-kernel (eg https://github.com/typelevel/algebra/pull/152) means that much discussion from the earlier issue is out of date.

As of Jan 2017:
- The most fundamental typeclasses definitions sit in [`cats-kernel`](https://github.com/typelevel/cats/tree/master/kernel/src/main/scala/cats/kernel). Algebra builds upon them.
- They have syntax, but it lives in [`cats-core`](https://github.com/typelevel/cats/tree/master/core/src/main/scala/cats/syntax), and so aren't available to Algebra.
- Algebra defines another layer of [typeclasses](https://github.com/typelevel/algebra/tree/master/core/src/main/scala/algebra/ring), but without syntax.
- Spire depends-upon- and [defines-syntax-](https://github.com/non/spire/blob/master/core/shared/src/main/scala/spire/syntax/Ops.scala) for Algebra and Cats-Kernel typeclasses.
- Algebird depends upon Algebra and Cats Kernel typeclasses, and AFAICT defines some very limited [syntax](https://github.com/twitter/algebird/blob/develop/algebird-core/src/main/scala/com/twitter/algebird/Operators.scala) over them.

In my (possibly overly idealistic) view, there are three problems here:
- If you want to use cats-kernel or Algebra standalone you don't have any syntax/infix operators.
- Syntax isn't defined along with the typeclasses to which it applies (ie related concerns are spaced wide apart).
- There's syntax code duplication between Spire, Cats-Core and Algebird.
To catch bugs such as #187 . 
There is a concept called the Annihilator ([wikipedia](https://en.wikipedia.org/wiki/Annihilator_(ring_theory))) which basically defines the multiplicative zero of a set. Here's a blog post that shows an example Annihilator: http://underscore.io/blog/posts/2015/07/02/annihilators-in-scala.html

I'm interested in such a type class included here. A sample use case would be set intersection: consider the following pieces of code, reflecting use of a Monoid[Option[?]].

Hypothetical monoid
```scala
implicit object IntSetIntersectionMonoid extends Monoid[Set[Int]] {
   def append(a: Set[Int], b: => Set[Int]): Set[Int] = a intersect b
   def identity = // the universe. This is impossible, which is why we need the annihilator to exist
   def zero = Set()
}
```

Existing monoid:
```scala
val a = Set(1, 2).some
val b = none

a |+| b // returns Set(1, 2)
```

With annihilation:
```scala
val a = Set(1, 2).some
val b = none

a |*| b // returns empty set
```

There are possibly many other examples other than set intersection that may be useful. Also, apologies if anything is unclear. This is my first time using GitHub issues. Thanks!
```[info] com.twitter.algebird.AdjoinedRingSpecification *** ABORTED ***
[info]   java.lang.ClassCastException: com.twitter.algebird.IntRing$ cannot be cast to cats.kernel.CommutativeGroup
[info]   at com.twitter.algebird.IntRing$.additive(Ring.scala:66)
[info]   at com.twitter.algebird.AdjoinedUnitRing.<init>(AdjoinedUnitRing.scala:40)
[info]   at com.twitter.algebird.AdjoinedUnit$.ring(AdjoinedUnitRing.scala:32)
[info]   at com.twitter.algebird.AdjoinedRingSpecification.<init>(AdJoinedUnitRing.scala:40)
[info]   at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
[info]   at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
[info]   at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
[info]   at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
[info]   at java.lang.Class.newInstance(Class.java:442)
[info]   at org.scalatest.tools.Framework$ScalaTestTask.execute(Framework.scala:435)
```

The code compiled, but at runtime it failed. This resulted from treating a `Ring[T]` as a `Rng[T]`. I'll try to repro here.
Copied from @johnynek's issue https://github.com/twitter/algebird/issues/218:

``` scala
// Gives the contract that a1 + a2 >= a1 and a1 + a2 >= a2
trait ConicMonoid[A] extends Semigroup[A] {
  def ordering: Ordering[A]
}

trait ConicMonoid[A] extends Monoid[A] {
  def ordering: Ordering[A]
}
```

Name from https://twitter.com/DRMacIver/status/388935423709704192

seems `fromNonNegInt` only needs `sumN(one, n)`. `one` is from MultiplicativeMonoid and `sumN` is from `AdditiveMonoid` so `Rig`

`fromPosInt` would only need `Semiring`.

We don't have `Pos` or `NonNeg` types. We could add them or add unsafe functions.
