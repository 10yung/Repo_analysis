The code in `options.py` is as follow:
```        here = os.path.dirname(os.path.dirname(sys.argv[0]))
        searchpaths = [os.path.join(here, 'etc', 'supervisord.conf'),
                       os.path.join(here, 'supervisord.conf'),
                       'supervisord.conf',
                       'etc/supervisord.conf',
                       '/etc/supervisord.conf',
                       '/etc/supervisor/supervisord.conf',
                       ]
```
I'm not sure how events are working in Supervisor but here are my thoughts:
even if there is the trigger of that event [here](https://github.com/Supervisor/supervisor/blob/1e03ad4b36d3442ef8a6e291caf32e79e8277952/supervisor/supervisord.py#L195), it is not dispatched, since events are buffered and there is no call to ProcessGroup.transition as done [here](https://github.com/Supervisor/supervisor/blob/1e03ad4b36d3442ef8a6e291caf32e79e8277952/supervisor/supervisord.py#L243).
I want two feature support:

- [ ] First is simple regex support about the name 

like `supervisorctl stop *server*:*` 

- [ ] Second is I want `stop all` will do stop works in order by stopped 

like prog1 prog2 ,priority is 1,2 ,`stop all` will do work like:

1. stop prog2
2. makesure prog2 is stopped
3. stop prog1 
4. makesure prog2 is stopped

- [ ]  `restart all` will do the same thing like above, stopped and then `start all`


If supervisor is already support above feature ,please point me that! thanks!
Hi all,
I'm very surprised, after many search, to have the feeling supervisor have no way to manage supplementary groups in config file.

When i configure "user=", the user is correctly used for my process... primary gid too... but not all supplementary groups.

My solution is to add "runuser" before the command, and delete the "user=" config. But it's a bit sad to have to do this imho ;)

Have i missed something ? (thx anyway for this wonderfull project :))
I want supervisor to try restarting my services a few times before giving up. From the documentation it seems the right configuration for that is this:

```
autorestart = true
startretries = 3
```

But when I run supervisor with this configuration and the commands fails and exists with exitcode 1, supervisor always tries to restart it, never giving up. `ps` keeps showing the process as running but always with a different PID. Same goes for `supervisorctl -i`, it always shows the process as running but always with different pid and zero uptime:

```
/usr/app # supervisorctl -i
projections-main                 RUNNING   pid 1894, uptime 0:00:00
```

Am I doing something wrong or is this a bug?

----

`supervisord -v`: 3.3.5

Configuration:

```
[unix_http_server]
file = /run/supervisord.sock

[supervisorctl]
serverurl = unix:///run/supervisord.sock

[supervisord]
logfile = /dev/stdout
logfile_maxbytes = 0
loglevel = info
nodaemon = true
user = root

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[program:projections-main]
command = bin/console app:subscription:connect -vvv
autorestart = true
startsecs = 0
startretries = 3
stdout_logfile = /dev/stdout
stdout_logfile_maxbytes = 0
stderr_logfile = /dev/stderr
stderr_logfile_maxbytes = 0
```

**my exceptions** 
i am open **inet_http_server** for web interfaceï¼Œbut i recieve an exception like this.

2019-08-28 11:32:42,060 ERRO :Server Error: <type 'exceptions.UnicodeDecodeError'>, 'ascii' codec can't decode byte 0x89 in position 170: ordinal not in range(128): file: /usr/lib/python2.7/site-packages/supervisor/http.py line: 380


**my enviment**
![image](https://user-images.githubusercontent.com/2327876/63824283-2893fb00-c989-11e9-9506-af5e497a8a08.png)
![image](https://user-images.githubusercontent.com/2327876/63824306-35b0ea00-c989-11e9-8b7a-669a5d30f7f9.png)
![image](https://user-images.githubusercontent.com/2327876/63824370-71e44a80-c989-11e9-8e7a-5c00d38b25a1.png)




We have a case when the executed command want to known total number of processes in order to partition processed data so we intended to run it like

```supervisor
[program:partitioned-processor]
process_name=%(program_name)s_%(process_num)02d
command=/usr/local/bin/php data process --threads=%(numprocs)d --thread=%(process_num)d
autostart=true
autorestart=true
user=www-data
numprocs=8
stdout_logfile=/dev/fd/1
stdout_logfile_maxbytes=0
stderr_logfile=/dev/fd/2
stderr_logfile_maxbytes=0
```

And we wan't to use `numprocs` from config directly rather configuring both of them with env variable (i think it would be better to configure numprocs with env, and the command will use `numproces` and `process_num` to be consistent)

currently we get 

```
Error: Format string '/usr/local/bin/php data process --threads=%(numprocs)d --thread=%(process_num)d' for 'program:partitioned-processor' contains names ('numprocs') which cannot be expanded. Available name
s: 
```
Presently, each service's section needs to include its own stdout_logfile_maxbytes and stdout_logfile_backups for log rotation. But it cannot split log by time automatically. I think it's necessary because we can simply get the day's log when error happens.
Some programs output help on `-?` and a user recently emailed expecting `supervisorctl` to do this.  We currently print help only on `-h`.  It would be harmless to add `-?` as a second alias for help so we should probably just add it.
It would be useful to allow [group] entries to be defined around groups as well as programs.
This would allow for easier management and control of processes.



> [group:my-big-group]
groups=subgroup-1,subgroup-2

> [group:subgroup-1]
programs=program-a,program-b

> [group:subgroup-2]
programs=program-c,program-d

> [group:another-group]
programs-program-z

Currently turning off all groups would require explicitly stopping the subgroups 1 and 2 with a series of `supervisorctl stop subgroup-1:*` `supervisorctl stop subgroup-2:*`.
`sudo service supervisorctl stop` here wouldn't work because we might want to leave `another-group` running.
With the above configuration, this could be resolved with `supervisorctl stop my-big-group:*`
There might be situations where there are not 2 but several groups of programs, and to manage all, a lot of commands would be required, which increases the chance for human error and the cost to maintain scripts.



