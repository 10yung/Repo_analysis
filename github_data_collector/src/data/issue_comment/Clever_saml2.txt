How to test the below condition 

**sp.create_login_request_url(idp, {}, function (err, login_url, request_id) {
          if (err != null){
              failure(500);
          }**

Same for the log out function
sp.create_logout_request_url(....)

Its always sending the **err = null.** 

Need help, writing the Jest test cases for the code!

![jest](https://user-images.githubusercontent.com/38218390/68126430-cf70b680-ff39-11e9-860d-eb36082f6d5d.PNG)

Resolves issue #192. This was a regression in v2.0.5.

Return an error via callback when attributes are missing, rather than throwing an exception.

**How I expect it to work:**

In v2.0.3, any SAML assertion with a missing Subject would cause an error to be caught and returned in the callback. ("Expected 1 Subject; found 0")

This allows my SAML code to properly handle the error/rejected promise and report it back to the API consumer.

**How it appears to be working:**

In v2.0.5, Line 494: `user.name_id = get_name_id validated_assertion`. If there is not exactly one subject in the SAML assertion, an uncaught exception is thrown here. This makes it difficult to capture what went wrong and report it back to the API consumer.

**Steps to reproduce**

Send a SAML assertion with an entirely missing Subject node using a Promise.

```
return new Promise((resolve, reject) => {
  serviceProvider.post_assert(identityProvider, options, function (err, saml_response) {
    return err ? reject(err) : resolve(saml_response);
  });
});
```

An exception is thrown within the node module. It never returns an error to the Promise. Is this intentional?

**Suggested Fix**

Wrap the call to `user.name_id = get_name_id validated_assertion` in a try-catch block. Return the exception to the callback function.


Thanks!
Based on the conversation in #115 I found that the Express sample in the README also has the same issue. Both `name_id` and `session_index` are undeclared and will throw in error in strict environments. Pretty straightforward fix that'll make the sample code a bit more portable. :)
When verifying a response that is both signed and encrypted, the signed value may need to be decrypted _after_ verifying the signature. When using OneLogin as the IDP, for example, this is required to verify assertions.

This PR pulls in work by @erm410 from the https://github.com/OneviewCommerce/saml2/ fork with the hope of getting it merged into the upstream. 
This may be a dumb question, but what does this function do? Here's my projected SAML Logout flow:

1. Logout from site (SP)
2. Send request to IdP via `sp.create_logout_*request*_url`
3. IdP sees request, sends encoded SAMLResponse to specified SLO endpoint
4. SP validates the response as legitimate, completes logout

In this workflow, I think for step 4 you'd want a function similar to `redirect_assert` to parse and validate the response. Wouldn't creating a response URL only be something an IdP would do to tell an SP the logout went successfully?

This is all my own thought process, and I'm sure I'm just missing something, but wanted some insight
Generate logout response URL correctly in the case where the sso_logout_url has a query string already.

This copies the code that dealt with that possibility when generating a logout request URL.
Add an entity_id option to IdentityProvider. If provided, assertions are required to have an `<Issuer>` that matches this value.

Includes tests.
Hi, it seems like when I try to set this flag to true and then pass it to the `create_login_request_url` it doesn't do what I expect it to do. My expectation was that the first time the user has to type in their login credentials into the idP server's page. Then they get logged out using the `create_logout_request_url` as the user visits it, the SAML session is terminated and the user will be completely logged out if they close all their browser windows. This forces the user to re-authenticate by typing in their credentials next time.

I was hoping that `force_authn` would allow me to skip the "close all the browsers" step in a way, by just requiring the user to re-authenticate with the idP again, even though they are logged in. Is it a mistake in my expectations or is the flag just not working ?

I am using a custom fork from 1.11.1, but looking through the updates I didn't see anything that might affect the behavior of the flag - I'll try and update my fork with the most recent changes anyways though.

Thanks !
I'd like to pass a subject in the AuthnRequest, can we add name_id to CreateLoginRequestUrlOptions?