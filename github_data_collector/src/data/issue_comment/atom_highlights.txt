<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

I'm using this package separately from Atom, for syntax highlighting code snippets in markdown files. I've noticed that when I switched from Highlight.js/Prism to Highlights, my page rendering performance reduced.

This appears to be due to the number of `<span>` elements Highlights generates. In addition to the ones that have `class` attributes with token names, there are also a lot of `<span>` elements generated which don't have any `class` attribute.

When I tried stripping just the classless `<span>` tags, the rendering performance was now instant again.

### Steps to Reproduce

```js
const Highlights = require("highlights")

const highlighter = new Highlights()

const html = highlighter.highlightSync({
  fileContents: 'answer = 42',
  scopeName: 'source.ruby',
})

console.log(html)
```
```html
<pre class="editor editor-colors">
  <div class="line">
    <span class="source ruby">
      <span>answer&nbsp;</span>
      <span class="keyword operator assignment ruby">
        <span>=</span>
      </span>
      <span>&nbsp;</span>
      <span class="constant numeric ruby">
        <span>42</span>
      </span>
    </span> 
  </div>
</pre>
```

**Expected behavior:**

That highlighting produces only the tags that are necessary.

**Actual behavior:**

Highlighting produces many `<span>` tags that are not needed (the script above produces 4 such tags).

### Versions

Highlights 3.1.4
<!--

Have you read Atom's Code of Conduct? By filing an Issue, you are expected to comply with it, including treating everyone with respect: https://github.com/atom/.github/blob/master/CODE_OF_CONDUCT.md

Do you want to ask a question? Are you looking for support? The Atom message board is the best place for getting support: https://discuss.atom.io

-->

### Prerequisites

* [x] Put an X between the brackets on this line if you have done all of the following:
    * Reproduced the problem in Safe Mode: <https://flight-manual.atom.io/hacking-atom/sections/debugging/#using-safe-mode>
    * Followed all applicable steps in the debugging guide: <https://flight-manual.atom.io/hacking-atom/sections/debugging/>
    * Checked the FAQs on the message board for common solutions: <https://discuss.atom.io/c/faq>
    * Checked that your issue isn't already filed: <https://github.com/issues?utf8=✓&q=is%3Aissue+user%3Aatom>
    * Checked that there is not already an Atom package that provides the described functionality: <https://atom.io/packages>

### Description

I'm using `highlights` as a library outside of Atom. It works great, except that I noticed that in certain cases it adds trailing `<span>&nbsp;</span>` at the end of lines.

This is not a problem visually, but when developers are copy-pasting code into their editors, the trailing whitespace will get pasted as well.

### Steps to Reproduce

Run the following script:

```js
const Highlights = require('highlights')

const highlighter = new Highlights()

const rubyCode = `Sequel.migration do
  change do
    add_column :photos, :image_data, :text # or :jsonb
  end
end`

let html = highlighter.highlightSync({
  fileContents: rubyCode,
  scopeName: `source.ruby`,
})

console.log(html)
```

**Expected behavior:**

I expect only whitespace to be translated into `&nbsp;`.

**Actual behavior:**

Additional trailing `&nbsp;` character is added after the `# or :jsonb` comment:

```html
<pre class="editor editor-colors">
  <div class="line"><span class="source ruby"><span class="support class ruby"><span>Sequel</span></span><span class="punctuation separator method ruby"><span>.</span></span><span>migration&nbsp;</span><span class="keyword control start-block ruby"><span>do</span></span></span></div>
  <div class="line"><span class="source ruby"><span>&nbsp;&nbsp;change&nbsp;</span><span class="keyword control start-block ruby"><span>do</span></span></span></div>
  <div class="line"><span class="source ruby"><span>&nbsp;&nbsp;&nbsp;&nbsp;add_column&nbsp;</span><span class="constant other symbol ruby"><span class="punctuation definition constant ruby"><span>:</span></span><span>photos</span></span><span class="punctuation separator object ruby"><span>,</span></span><span>&nbsp;</span><span class="constant other symbol ruby"><span class="punctuation definition constant ruby"><span>:</span></span><span>image_data</span></span><span class="punctuation separator object ruby"><span>,</span></span><span>&nbsp;</span><span class="constant other symbol ruby"><span class="punctuation definition constant ruby"><span>:</span></span><span>text</span></span><span>&nbsp;</span><span class="comment line number-sign ruby"><span class="punctuation definition comment ruby"><span>#</span></span><span>&nbsp;or&nbsp;:jsonb</span><span>&nbsp;</span></span></span></div>
  <div class="line"><span class="source ruby"><span>&nbsp;&nbsp;</span><span class="keyword control ruby"><span>end</span></span></span></div>
  <div class="line"><span class="source ruby"><span class="keyword control ruby"><span>end</span></span></span></div>
</pre>
```

I believe this is because `highlights` converts empty strings into `&nbsp;`, we can see there is one extra empty string in the list of tokens:

```js
[ [ { value: 'Sequel', scopes: [Array] },
    { value: '.', scopes: [Array] },
    { value: 'migration ', scopes: [Array] },
    { value: 'do', scopes: [Array] } ],
  [ { value: '  change ', scopes: [Array] },
    { value: 'do', scopes: [Array] } ],
  [ { value: '    add_column ', scopes: [Array] },
    { value: ':', scopes: [Array] },
    { value: 'photos', scopes: [Array] },
    { value: ',', scopes: [Array] },
    { value: ' ', scopes: [Array] },
    { value: ':', scopes: [Array] },
    { value: 'image_data', scopes: [Array] },
    { value: ',', scopes: [Array] },
    { value: ' ', scopes: [Array] },
    { value: ':', scopes: [Array] },
    { value: 'text', scopes: [Array] },
    { value: ' ', scopes: [Array] },
    { value: '#', scopes: [Array] },
    { value: ' or :jsonb', scopes: [Array] },
    { value: '', scopes: [Array] } ],
  [ { value: '  ', scopes: [Array] },
    { value: 'end', scopes: [Array] } ],
  [ { value: 'end', scopes: [Array] } ] ]
```

**Reproduces how often:**

Every time.

### Versions

Highlights 3.1.4
The default class names generated by highlight; keyword, comment etc; don't match those generated by lessc when compiling up a theme.

We should change the default "scopePrefix" in highlights.js to "syntax--" e.g.
```
      if (this.scopePrefix == null) {
        this.scopePrefix = 'syntax--';
      }
```
This module does not support `elm` at the moment, which means that ```` ```elm ```` blocks are not highlighted when editing markdown files in Atom. However, there exists an external [`language-elm`](https://atom.io/packages/language-elm) package, which works well for highlighting in `.elm` files already.

Would that be possible to make that package a dependency for `highlights`? I can submit a PR if this idea sounds reasonable.
The version I get when I `npm install highlights` is 3.0.1. That's also the latest version listed on the npm page: https://www.npmjs.com/package/highlights

But that's not the latest — the latest seems to be 3.1.0. And I can in fact get that latest version if I `npm install highlights@3.1.0`. 

Any idea what's going on here?
@as-cii we're running into a nasty issue with `marky-markdown` on Travis (`marky-markdown` is what npm uses to render package READMEs on npmjs.com).

We're trying to upgrade to the newest highlights, so that we can pull in syntax highlighting for Typescript and JSX, but when I upgrade to the newest highlights tests start hanging infinitely and timing out on Travis.

I've managed to bisect this issue to the 6.x to 7.x first-mate upgrade in highlights -- tests run fine in Node 8, and they run fine locally with Node 6, but I'm concerned that Travis might be surfacing an underlying instability that we should be mindful of.

Looping in @revin who's been helping out a ton on the marky-markdown project.

---

Any thoughts about next steps? If I had to guess, I'd bet the issue is either the `oniguruma` or `fs-plus` upgrade in `first-mate`.
Fixes: #27
My plugin works in Atom
https://atom.io/packages/language-typelanguage 

but broken with this package:
![image](https://user-images.githubusercontent.com/3275424/28552317-1dd630de-7107-11e7-9410-a6f84b1f1697.png)

In trying to follow the [example in the README](https://github.com/atom/highlights#using-in-code), I found that I was stuck with `null-grammar` unless I provided a `filePath` option. `scopeName` alone wouldn't do, as the example suggests.

Is there something I'm missing? Or should I make a PR to add this to the docs?
gulp-tslint needs TypeScript support for npmjs.org, which uses atom/highlights (at least used to use according to npmjs.org blog).

See my comment here: https://github.com/panuhorsmalahti/gulp-tslint/pull/112#issuecomment-290445527

Should be straightforward to add I think.