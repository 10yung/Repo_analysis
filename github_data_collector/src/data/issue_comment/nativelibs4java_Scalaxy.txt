
Try with any `for( i: Int <- 0 until 10)` instead of `for( i <- 0 until 10)`:

```
[error] 
[error]   last tree to typer: Literal(Constant(String))
[error]               symbol: null
[error]    symbol definition: null
[error]                  tpe: Class(classOf[java.lang.String])
[error]        symbol owners: 
[error]       context owners: anonymous class anonfun$Cumsum$1 -> package Utils
[error] 
[error] == Enclosing template or block ==
[error] 
[error] Template( // val <local $anonfun>: <notype>, tree.tpe=Utils.anonfun$Cumsum$1
[error]   "scala.runtime.AbstractFunction2$mcDDD$sp", "scala.Serializable" // parents
[error]   ValDef(
[error]     private
[error]     "_"
[error]     <tpt>
[error]     <empty>
[error]   )
[error]   // 4 statements
[error]   DefDef( // final def apply(x$1: Double,x$2: Double): Double
[error]     <method> final <triedcooking>
[error]     "apply"
[error]     []
[error]     // 1 parameter list
[error]     ValDef( // x$1: Double
[error]       <param> <synthetic> <triedcooking>
[error]       "x$1"
[error]       <tpt> // tree.tpe=Double
[error]       <empty>
[error]     )
[error]     ValDef( // x$2: Double
[error]       <param> <synthetic> <triedcooking>
[error]       "x$2"
[error]       <tpt> // tree.tpe=Double
[error]       <empty>
[error]     )
[error]     <tpt> // tree.tpe=Double
[error]     Apply( // def apply$mcDDD$sp(x$1: Double,x$2: Double): Double, tree.tpe=Double
[error]       AlgebraUtil$$anonfun$Cumsum$1.this."apply$mcDDD$sp" // def apply$mcDDD$sp(x$1: Double,x$2: Double): Double, tree.tpe=(x$1: Double, x$2: Double)Double
[error]       // 2 arguments
[error]       "x$1" // x$1: Double, tree.tpe=Double
[error]       "x$2" // x$2: Double, tree.tpe=Double
[error]     )
[error]   )
[error]   DefDef( // def apply$mcDDD$sp(x$1: Double,x$2: Double): Double
[error]     <method> <specialized> <triedcooking>
[error]     "apply$mcDDD$sp"
[error]     []
[error]     // 1 parameter list
[error]     ValDef( // x$1: Double
[error]       <param> <triedcooking>
[error]       "x$1"
[error]       <tpt> // tree.tpe=Double
[error]       <empty>
[error]     )
[error]     ValDef( // x$2: Double
[error]       <param> <triedcooking>
[error]       "x$2"
[error]       <tpt> // tree.tpe=Double
[error]       <empty>
[error]     )
[error]     <tpt> // tree.tpe=Double
[error]     Apply( // def +(x: Double): Double in class Double, tree.tpe=Double
[error]       "x$1"."$plus" // def +(x: Double): Double in class Double, tree.tpe=(x: Double)Double
[error]       "x$2" // x$2: Double, tree.tpe=Double
[error]     )
[error]   )
[error]   DefDef( // final def apply(v1: Object,v2: Object): Object
[error]     <method> final <bridge>
[error]     "apply"
[error]     []
[error]     // 1 parameter list
[error]     ValDef( // v1: Object
[error]       <param> <triedcooking>
[error]       "v1"
[error]       <tpt> // tree.tpe=Object
[error]       <empty>
[error]     )
[error]     ValDef( // v2: Object
[error]       <param> <triedcooking>
[error]       "v2"
[error]       <tpt> // tree.tpe=Object
[error]       <empty>
[error]     )
[error]     <tpt> // tree.tpe=Object
[error]     Apply( // def box(x: Double): Double in object Double, tree.tpe=Object
[error]       "scala"."Double"."box" // def box(x: Double): Double in object Double, tree.tpe=(x: Double)Double
[error]       Apply( // final def apply(x$1: Double,x$2: Double): Double, tree.tpe=Double
[error]         AlgebraUtil$$anonfun$Cumsum$1.this."apply" // final def apply(x$1: Double,x$2: Double): Double, tree.tpe=(x$1: Double, x$2: Double)Double
[error]         // 2 arguments
[error]         Apply( // def unbox(x: Object): Double in object Double, tree.tpe=Double
[error]           "scala"."Double"."unbox" // def unbox(x: Object): Double in object Double, tree.tpe=(x: Object)Double
[error]           "v1" // v1: Object, tree.tpe=Object
[error]         )
[error]         Apply( // def unbox(x: Object): Double in object Double, tree.tpe=Double
[error]           "scala"."Double"."unbox" // def unbox(x: Object): Double in object Double, tree.tpe=(x: Object)Double
[error]           "v2" // v2: Object, tree.tpe=Object
[error]         )
[error]       )
[error]     )
[error]   )
[error]   DefDef( // def <init>(): Utils.anonfun$Cumsum$1
[error]     <method> <triedcooking>
[error]     "<init>"
[error]     []
[error]     List(Nil)
[error]     <tpt> // tree.tpe=Utils.anonfun$Cumsum$1
[error]     Block( // tree.tpe=Unit
[error]       Apply( // def <init>(): scala.runtime.AbstractFunction2$mcDDD$sp in class AbstractFunction2$mcDDD$sp, tree.tpe=scala.runtime.AbstractFunction2$mcDDD$sp
[error]         AlgebraUtil$$anonfun$Cumsum$1.super."<init>" // def <init>(): scala.runtime.AbstractFunction2$mcDDD$sp in class AbstractFunction2$mcDDD$sp, tree.tpe=()scala.runtime.AbstractFunction2$mcDDD$sp
[error]         Nil
[error]       )
[error]       ()
[error]     )
[error]   )
[error] )
[error] 
[error] == Expanded type of tree ==
[error] 
[error] ConstantType(value = Constant(String))
[error] 
[error] symbol value check$ifrefutable$4 does not exist in DataMoments.DataCumulant.DataMoments$DataCumulant$$update_thirdOrderMoments
[error] Total time: 9 s, completed Nov 10, 2015 12:58:16 PM
```


_From @fdietze on March 12, 2012 14:20_

Hi there,

i'm working on a project where I use ArrayBuffers in performance-critical sections. In some places I was able to replace them with Arrays, so they got while-optimized by the scalacl-compiler-plugin. But in other cases it would make the code way more unreadable or easier to replace them with while-loops myself.

So I'd like to see support for optimization of IndexedSeq in the scalacl-compiler-plugin.

Thank you!
Felix

_Copied from original issue: ochafik/nativelibs4java#286_

_From @fdietze on November 10, 2011 16:21_

It seems like there is no optimization for the parallelized collections in Scala.

This is optimized:
(0 until 1000).map

While this is not:
(0 until 1000).par.map

Whats the easiest way to get the parallelized collections optimized? The CL-Collections?

Thanks for this great compiler plugin. It helped me a lot speeding up my existing project.

_Copied from original issue: ochafik/nativelibs4java#199_

_From @ochafik on September 1, 2011 18:34_

In Scala, if you run the test

object P005 extends App{
  val t = System.currentTimeMillis

  val r = (1 to 20)
  def isDivis(x:Int) = r forall {x % _ == 0}
  def find(n:Int):Int = if (isDivis(n)) n else find (n+2)

  println (find (2))
  println((System.currentTimeMillis - t)/1000.0)
}

the forall is not optimized to a while loop, and runs in the same time as without ScalaCL. 

If you replace the "r" with its value (1 to 20), i.e.
  def isDivis(x:Int) = (1 to 20) forall {x % _ == 0}
it is optimized and runs over 4 times faster. 

I think we should be able to get the same performance in both cases, since r is immutable, we know it will still be (1 to 20).

Google Code Info:
Issue #: 76
Author: bungle...@googlemail.com
Created On: 2011-07-05T22:34:16.000Z
Closed On: 

_Copied from original issue: ochafik/nativelibs4java#78_

Would this be possible? Writing

```
{ arr contains _ }
```

as an anonymous function just looks a lot more readable than:

```
{ p => arr exists { _ == p } }
```

What do you think?

Using such an anonymous function in a `filterNot` is quite handy the absence of support for `diff` on arrays.

I am now heavily using Scalaxy/Streams in my current project, and it is crucial to our performance. :-)

However, I frequently have an `Array[Array[X]]` and call `flatten` and then `distinct`. Scalaxy seems to support `flatten` if the `foolish` optimization strategy is used (which I didn't know earlier). It would be great if `distinct` were supported as well.

Perhaps you could update the readme.md to list that `flatten` is supported too?

Thanks again for all of the brilliant work!

The following symbol seems to cause symbol ownership issues (x not found anymore) when rewriting the Option.getOrElse stream:

```
  def wrap[T](body: => T): Option[T] = Option(body)
  wrap({ val x = 10; Option(x) }) getOrElse 0
```

It is currently detected and mitigated (skipped) by Strategies.hasKnownLimitationOrBug, but needs to be fixed.

Could be related to / duplicate of issue #20.

The following code snippet breaks the hell out of Scalaxy/Streams (symbol `foo` ends up not found in `LambdaLift`, despite seemingly having the proper owner chain):

```
val msg = {
  try {
    val foo = 10
    Some(foo)
  } catch {
    case ex: Throwable => None
  }
} get;
msg
```

It is currently mitigated by skipping any streams with a `Try` subtree, as detected by `Strategies.hasKnownLimitationOrBug` (see https://github.com/ochafik/Scalaxy/commit/fe8531b453a48ae8ad380db7d397da066806fbce), but a proper fix is needed to replace this broad hack.
