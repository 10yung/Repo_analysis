**Use Case**
I would like to use the Snackbar to display messages to the user as they click through my app, to provided a guided experience. This can happen when a new component mounts, or when they click a button for example. This requires being able to clear currently shown Snackbars when required, in order to show another, or as the current Snackbar may no longer be relevant after a user has performed another action. At the moment clearing is only provided by waiting for timeout to expire, or requiring user to click the action button on the Snackbar to close it. With more Snackbars, requiring the user to click the 'Got it' action on the Snackbar repeatedly to close each provides a cumbersome experience. 

**My Attempt**
I am currently trying to clear the queue to remove the previous Snackbar on the screen before I call queue.notify(...) to show a new one, as follows:

```
const queue = createSnackbarQueue();
const clear = () => {
  queue.messages.array = [];
};
// remove previous Snackbar (#1), display a new one (#2)
const onClick = () => {
  clear();
  queue.notify({ message: "I am Snackbar #2" });
};
```

This appears to work in removing the previous Snackbar and showing the new, but when using this method the newly shown Snackbar appears to receive a timeout that is equal to the remainder of the previous Snackbar's timeout. So if Snackbar #1 has a 10s timeout, and is on screen for 5s before the button is clicked and Snackbar #2 is shown, then even if Snackbar #2 was set to have a 10s timeout, it will disappear after 5s.

**Other**
It appears Material-UI provides this feature, though this may not be able to be used from anywhere in the app. See here for reference: https://material-ui.com/components/snackbars/


As I see, `z` has default value. IMHO it should be optional. With required mode I see false positive warnings in my IDE
- What RMWC Version are you using [major.minor.patch]: 5.7.2
- Name your build system [Webpack, Rollup...]: Webpack

- Describe the bug with as much detail as possible:

For the life of me I couldn't figure out why my rmwc css was working in dev but not getting bundled via webpack in production.

Finally learned that it was being tree shaken out because webpack thought it wasn't actually needed!!

Googling this is clearly an area for improvement in webpack however they say by putting (as rmwc does):
```
  "sideEffects": false,
```
in the package.json files webpack interprets a css import e.g.
```
import '@rmwc/tooltip/tooltip.css'
```
as having no side effects and therefore the entire contents of tooltip.css is tree shaken away!!!

atm I've worked around the issue by doing this:
```
import tooltipCss from '@rmwc/tooltip/tooltip.css'
// eslint-disable-next-line no-unused-vars
const seeAsUsed = tooltipCss
```

however there are various suggestions that this is what the package.json(s) really should have:
```
  "sideEffects": [ "*.css" ],
```

- What happened:  rmwc components broken in production cause of missing css!
- And what was supposed to happen: rmwc widgets looking nice with css found in the bundle!! :)

- References:
The current issue with "sideEffects: false" pops up in various repos (though it's webpack's fault :):
https://github.com/facebook/create-react-app/issues/5140#issuecomment-425268743
https://github.com/webpack-contrib/mini-css-extract-plugin/issues/118#issuecomment-399738756

Note the warning they've added at the bottom here:
https://vue-loader.vuejs.org/guide/#manual-setup

Open issue asking to make webpack smarter about this:
https://github.com/webpack/webpack/issues/6571

It is currently not possible to add a className definition to a CollapsibleList component.

The following sandbox shows the problem in action:
[![Edit determined-bouman-99u3d](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/determined-bouman-99u3d?fontsize=14&hidenavigation=1&theme=dark)

Inspect the **CollapsibleList** component with the DevTools. The CSS class `collapsible-list-styles` is ignored.

The reason for this behavior is that the className is directly set on the **CollapsibleRoot** component without appending the className property from the props.

The following code is taken from the file: https://github.com/jamesmfriedman/rmwc/blob/master/src/list/collapsible-list.tsx

```
<CollapsibleRoot
        {...rest}
        onFocus={this.handleFocus}
        ref={(el: HTMLDivElement) => (this.root = el)}
        className={classNames('rmwc-collapsible-list', {
          ['rmwc-collapsible-list--open']: open
        })}
      >
```

In my opinion, the className of the props should be appended to the className(s) generated by the classNames function.

RMWC Version: 5.7.1
Build System: webpack

**mdc-list**

I'm having the same issue with icon spacing inside a `<SimpleListItem />` like this one:
https://github.com/callstack/react-native-paper/issues/1003

this is the actual css style of the icon

```css
.mdc-list-item__graphic {
    margin-left: 0;
    margin-right: 32px; /* <---- this is causing the glitch */
    width: 24px;
    height: 24px;
    flex-shrink: 0;
    -webkit-box-align: center;
    align-items: center;
    -webkit-box-pack: center;
    justify-content: center;
    fill: currentColor;
}
```

Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.2.0 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.2.0...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.2.0&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/jamesmfriedman/rmwc/network/alerts).

</details>
<!--- 
** PLEASE READ THIS BEFORE FILING AN ISSUE **

## RMWC or MDC?

I'm pretty sure its RMWC

- What RMWC Version are you using [major.minor.patch]:

5.7.2

- Name your build system [Webpack, Rollup...]:

Webpack

- Describe the bug with as much detail as possible:
I have a SimpleMenu component that renders a list of options. the options are being served as an array of MenuItem, where every MenuItem receives a disabled boolean as a prop.
For some reason, the items act normally no matter if they're disabled or not

- What happened, and what was supposed to happen:
Items on the menu should be unclickable (disabled), but they can be clicked and change the menu value.

Code Example: * I've made sure 100% that the 'disabled' prop the Dropdown components gets and passes down to menu item has the current value. and I've also tried inserting values manually to the the ItemMenu disabled prop.

```
const Dropdown = (props) => {
  const {
    options, selected, placeholder, disabled, onChange,
  } = props;
  let title = placeholder;
  const dropDownOptions = options.map((elem) => {
    if (selected === elem.value) {
      ({ title } = elem);
    }
    return <MenuItem disabled={disabled} selected={selected === elem.value} key={elem.value}>{elem.title}</MenuItem>;
  });

  return (
    <SimpleMenu
      onSelect={e => onChange({ value: e.detail.index + 1 })}
      handle={
        <div className={classNames('mdc-select', styles.dropdownContainer)}>
          <div className={classNames('mdc-select__native-control', styles.dropdownInput)}>{title}</div>
        </div>
        }
    >
      {dropDownOptions}
    </SimpleMenu>
  );
};
```


Do you really want it fixed? Make a repro in the sandbox!
--> https://codesandbox.io/s/suspicious-robinson-bpkeh?fontsize=14&hidenavigation=1&theme=dark

- What RMWC Version are you using [major.minor.patch]:
5.7.2

- Name your build system [Webpack, Rollup...]:
Webpack

- Describe the bug with as much detail as possible:
Slider in Dialog does not move and has max prop as standard value on onChange. Though, it does move and work correctly after resizing the window when the dialog is opened. It does also occur if the dialog is opened by default.
 
- What happened, and what was supposed to happen:
Slider does not work as intended. We were able to reproduce the bug in a sandbox.
RMWC 5.7.0

MDC Web has support for styling tabs to the size of their content rather than expanding them to the width of the container. This is done via the `mdc-tab--min-width` class. I can currently do this when using RMWC by adding the class myself. However it would be nice if this was exposed by RMWC as a boolean prop for tabs.