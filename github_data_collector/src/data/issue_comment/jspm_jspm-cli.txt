1. While `lib/*` is specified in `.gitignore`, the directory is actually
   committed to the repository. This commit deletes these files (which are
   automatically generated upon build), so that there's less noise while
   working on the project.

2. Since compiled files are needed for tests, also added build stage before
   running mocka, to make sure that we have those in travis pipelines.
```json
// package.json 
  ...
  "scripts": {
    "build": "tsc -p .",
    "test": "tsc -p . && mocha -u tdd --timeout 60000",
    "gitbook": "gitbook build docs"
  },
```

3. TypeScript wasn't able to build the package because of 3 errors.
   These have been fixed. No functionality should be affected, these are only syntactic modifications

*src/install/bin.ts* added `@ts-ignore`, TS wouldn't compile since function is currently not being used:
```ts
// @ts-ignore
function isCygwin () {
...
```

*src/install/fetch.ts* modified import:
```ts
// from:
import HttpsProxyAgent from 'https-proxy-agent';
// to
import * as HttpsProxyAgent from 'https-proxy-agent';
```

*src/api.ts* changed property access to use map access since `stack` is not defined as a valid property of `err`'s type:
```ts
    // from:
    logErr(err.stack || err);
    // to:
    logErr(err['stack'] || err);
```
The current rollup-plugin-terser depends on serialize-javascript with a
security vulnerability. This has been patched in version
rollup-plugin-terser v5.1.3

Resolve #2505

Also suppressed 3 typescript errors due to style.
Linking to https://docs.microsoft.com/en-us/windows/uwp/get-started/enable-your-device-for-development.

Will help avoid pitfalls for newcomers.
NPM audit report:

```
┌───────────────┬──────────────────────────────────────────────────────────────┐
│ Moderate      │ Cross-Site Scripting                                         │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Package       │ serialize-javascript                                         │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Patched in    │ >=2.1.1                                                      │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Dependency of │ jspm                                                         │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ Path          │ jspm > rollup-plugin-terser > serialize-javascript           │
├───────────────┼──────────────────────────────────────────────────────────────┤
│ More info     │ https://npmjs.com/advisories/1426                            │
└───────────────┴──────────────────────────────────────────────────────────────┘
```

Seems like rollup-plugin-terser already patched in master branch, but I don't believe that a version has been released yet:
https://github.com/TrySound/rollup-plugin-terser/issues/57
`jspm map -o dist/import-map.json --production`
Get this error: 
```
err (jspm) Error: Unable to locate @jspm/core dependency. Make sure this is properly installed.
    at Mapper.get nodeBuiltinsPkg [as nodeBuiltinsPkg] (/home/csr/.nvm/versions/node/v12.13.0/lib/node_modules/jspm/lib/map/index.js:39:15)
    at Mapper.createMapAll (/home/csr/.nvm/versions/node/v12.13.0/lib/node_modules/jspm/lib/map/index.js:57:34)
    at Object.map (/home/csr/.nvm/versions/node/v12.13.0/lib/node_modules/jspm/lib/map/index.js:190:25)
    at cliHandler (/home/csr/.nvm/versions/node/v12.13.0/lib/node_modules/jspm/lib/cli.js:331:41)
    at Object.<anonymous> (/home/csr/.nvm/versions/node/v12.13.0/lib/node_modules/jspm/lib/cli.js:699:5)
    at Module._compile (internal/modules/cjs/loader.js:956:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:973:10)
    at Module.load (internal/modules/cjs/loader.js:812:32)
    at Function.Module._load (internal/modules/cjs/loader.js:724:14)
    at Module.require (internal/modules/cjs/loader.js:849:19)
```

My package.json:
```json
{
  "name": "top-app",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "prod-map": "npx --node-arg=--inspect-brk jspm map -o dist/import-map.json --production"
  },
  "devDependencies": {
    "@jspm/core": "^1.0.4",
    "http-server": "~0.11.1",
    "rollup": "^1.26.0",
    "rollup-plugin-node-resolve": "^5.2.0"
  },
  "dependencies": {
    "@micro-frontend-demo/team-a": "^1.0.3",
    "@micro-frontend-demo/team-b": "^1.0.4",
    "systemjs": "^6.1.4"
  },
  "type": "module"
}
```

`@jspm/core` is in `devDependencies` , which is ignored when using `--production`. Is this intended?
![image](https://user-images.githubusercontent.com/18747423/68671775-1179a800-058b-11ea-8f5f-4e8c35649767.png)


Hi @guybedford,
This is my propoal for issue #2499.

`$ jspm build ./src/app.js --dir ./dist --custom-plugins ./jspm.plugins.js`

with `jspm.plugins.js` as :
```js
const litSass = require('@ponday/rollup-plugin-lit-sass');

module.exports = (buildArgs, options) => {
    return [
        litSass({})
    ]
};
```
`buildArgs` and `options` parameters could be usefull to setup plugins.

Thanks for your great work 👍 

Hi @guybedford,

Is there a way to customize Rollup plugins involved in the build process ?
The plugins are instanciated at https://github.com/jspm/jspm-cli/blob/master/src/build/index.ts#L113.
Maybe an external js function to get an array of custom plugins ?
IMO the only way possible today is to recreate the CLI logic in a separate script. Overkill.
Currently `jspm install -g mocha` would create a global mocha bin in `/path/to/global/jspm_packages/.bin/mocha`.

The idea is that this global `/path/to/global/jspm_packages/.bin` can be added to the PATH to get global bins support.

When using that mocha command, a very common scenario is wanting to ensure you are using the right version of the `mocha` command locally.

The suggestion is this - what if we make all global commands check the local project (process cwd), for a local version of that same command and then use that if it is available?

This seems a very useful property to have for global command installs.

The downside is opting out of the behaviour if you don't want it but `jspm bin -g mocha` can remain an alias to the global version specifically providing an opt-out path too.

jspm itself would certainly take advantage of this feature.
It would be worthwhile to support GitHub packages at this point as its own registry.

Either `ghp:` or `gpr:` I forget which is the preferred abbreviation for it at the moment.

It's relatively straightforward to put this together, it's simply a matter that I don't personally have any good reason to need to do this yet.

If anyone is specifically interested in this feature please say so.