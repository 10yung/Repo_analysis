以前安装 `electron` 时总是失败，然后就在`淘宝镜像`上下载好相应版本的文件放到用户目录来解决问题。

后来研究发现 `npm` 不仅可以设置 `node.js` 模块仓库的代理， 同样可以设置像 [electron](https://github.com/electron/electron/blob/master/docs-translations/zh-CN/project/README.md#其他源)、[phantomjs](https://github.com/Medium/phantomjs#deciding-where-to-get-phantomjs)、 [node-sass](https://github.com/sass/node-sass#binary-configuration-parameters) 等模块的镜像代理

## 一、设置淘宝镜像
###  1.环境变量

Unix：
``` shell
# electron
export ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/
# phantomjs
export PHANTOMJS_CDNURL=https://npm.taobao.org/mirrors/phantomjs/
# node-sass
export SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/
```
Windows：
``` cmd
# electron
set ELECTRON_MIRROR=https://npm.taobao.org/mirrors/electron/
# phantomjs
set PHANTOMJS_CDNURL=https://npm.taobao.org/mirrors/phantomjs/
# node-sass
set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/
```
###  2.`npm` 执行参数
``` shell
# electron
npm install electron --electron-mirror=https://npm.taobao.org/mirrors/electron/
# phantomjs
npm install phantomjs --phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/
# node-sass
npm install node-sass --sass-binary-site=https://npm.taobao.org/mirrors/node-sass/
```
###  3.使用本地（项目根目录）或全局（用户目录）[.npmrc](https://docs.npmjs.com/misc/config) 配置
```
registry=https://registry.npm.taobao.org
electron_mirror=https://npm.taobao.org/mirrors/electron/
sass_binary_site=https://npm.taobao.org/mirrors/node-sass/
phantomjs_cdnurl=https://npm.taobao.org/mirrors/phantomjs/
```

## 二、使用代理
除了使用代理来解决，更暴力直接的方法就是使用梯子了。
确保你要安装的模块仓库地址在代理PAC列表中或直接使用全局代理。npm 好像只支持 HTTP 代理
``` shell
# 设置代理
npm config set proxy http://127.0.0.1:1085
# 安装模块
npm i --save-dev electron
# 删除代理
npm config delete proxy
```
> 在自动启动桌面文件中添加 `X-GNOME-Autostart-Delay` 参数
 `X-GNOME-Autostart-Delay` 只支持 GNOME 和 Unity

### 步骤

- 如果你想延迟启动应用的桌面文件位于 `/etc/xdg/autoautostart/` 下，复制到 `~/.config/autostart/` （可选）
- 用文本编辑器打开自动启动桌面文件在后面追加 `X-GNOME-Autostart-Delay` 
```
X-GNOME-Autostart-Delay=N # 秒
```
### 例如：
```
gedit ~/.config/autostart/shadowsocks-qt5.desktop
```

![_002](https://user-images.githubusercontent.com/12059800/32322827-d9058d1c-c000-11e7-9011-b79db36a23b6.png)

> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=92997)

<table cellspacing="0" cellpadding="0">
<tbody>
<tr>
	<td class="t_f" id="postmessage_2965044">
		<font size="4"><strong>字符串格式化符号含义</strong></font><br>
		<br>
		<table cellspacing="0" class="t_table" style="width:500px">
		<tbody>
		<tr>
			<td>
				<div align="center">
					<strong>符号</strong>
				</div>
			</td>
			<td>
				<div align="center">
					<strong>说明</strong>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%c
				</div>
			</td>
			<td>
				 格式化字符及其 ASCII 码
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%s
				</div>
			</td>
			<td>
				 格式化字符串
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%d
				</div>
			</td>
			<td>
				 格式化整数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%o
				</div>
			</td>
			<td>
				 格式化无符号八进制数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%x
				</div>
			</td>
			<td>
				 格式化无符号十六进制数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%X
				</div>
			</td>
			<td>
				 格式化无符号十六进制数（大写）
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%f
				</div>
			</td>
			<td>
				 格式化浮点数字，可指定小数点后的精度
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%e
				</div>
			</td>
			<td>
				 用科学计数法格式化浮点数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%E
				</div>
			</td>
			<td>
				 作用同 %e，用科学计数法格式化浮点数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%g
				</div>
			</td>
			<td>
				 根据值的大小决定使用 %f 或 %e
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					%G
				</div>
			</td>
			<td>
				 作用同 %g，根据值的大小决定使用 %f 或者 %E
			</td>
		</tr>
		</tbody>
		</table>
		<br>
		<br>
		<font size="4"><strong>格式化操作符辅助命令</strong></font><br>
		<br>
		<table cellspacing="0" class="t_table" style="width:500px">
		<tbody>
		<tr>
			<td>
				<div align="center">
					<strong>符号</strong>
				</div>
			</td>
			<td>
				<div align="center">
					<strong>说明</strong>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					m.n
				</div>
			</td>
			<td>
				 m 是显示的最小总宽度，n 是小数点后的位数
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					-
				</div>
			</td>
			<td>
				 用于左对齐
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					+
				</div>
			</td>
			<td>
				 在正数前面显示加号（+）
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					#
				</div>
			</td>
			<td>
				 在八进制数前面显示 '0o'，在十六进制数前面显示 '0x' 或 '0X'
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					0
				</div>
			</td>
			<td>
				 显示的数字前面填充 '0' 取代空格
			</td>
		</tr>
		</tbody>
		</table>
		<br>
		<br>
		<font size="4"><strong>Python 的转义字符及其含义</strong></font><br>
		<br>
		<table cellspacing="0" class="t_table" style="width:500px">
		<tbody>
		<tr>
			<td>
				<div align="center">
					<strong>符号</strong>
				</div>
			</td>
			<td>
				<div align="center">
					<strong>说明</strong>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\'
				</div>
			</td>
			<td>
				 单引号
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\"
				</div>
			</td>
			<td>
				 双引号
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\a
				</div>
			</td>
			<td>
				 发出系统响铃声
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\b
				</div>
			</td>
			<td>
				 退格符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\n
				</div>
			</td>
			<td>
				 换行符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\t
				</div>
			</td>
			<td>
				 横向制表符（TAB）
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\v
				</div>
			</td>
			<td>
				 纵向制表符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\r
				</div>
			</td>
			<td>
				 回车符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\f
				</div>
			</td>
			<td>
				 换页符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\o
				</div>
			</td>
			<td>
				 八进制数代表的字符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\x
				</div>
			</td>
			<td>
				 十六进制数代表的字符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\0
				</div>
			</td>
			<td>
				 表示一个空字符
			</td>
		</tr>
		<tr>
			<td>
				<div align="center">
					\\
				</div>
			</td>
			<td>
				 反斜杠
			</td>
		</tr>
		</tbody>
		</table>
		<br>
		<br>
	</td>
</tr>
</tbody>
</table>
> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=45512&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)

<table cellspacing="0" cellpadding="0">
<tbody>
<tr>
	<td class="t_f" id="postmessage_1762097">
		<div align="center">
			<strong><font size="3">os模块中关于文件/目录常用的函数使用方法</font></strong>
		</div>
		<br>
		<br>
		<table cellspacing="0" class="t_table" style="width:98%">
		<tbody>
		<tr>
			<td>
				<div align="center">
					<strong><font style="font-size:12.0pt">函数名</font></strong>
				</div>
			</td>
			<td>
				<div align="center">
					<strong><font style="font-size:12.0pt">使用方法</font></strong>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">getcwd()</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">返回当前工作目录</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">chdir(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">改变工作目录</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">listdir(path='.')</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">列举指定目录中的文件名（'.'表示当前目录，'..'表示上一级目录）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">mkdir(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">创建单层目录，如该目录已存在抛出异常</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">makedirs(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">递归创建多层目录，如该目录已存在抛出异常，注意：'E:\\a\\b'和'E:\\a\\c'并不会冲突</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">remove(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">删除文件</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">rmdir(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">删除单层目录，如该目录非空则抛出异常</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">removedirs(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">递归删除目录，从子目录到父目录逐层尝试删除，遇到目录非空则抛出异常</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">rename(old, new)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">将文件old重命名为new</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">system(command)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">运行系统的shell命令</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">walk(top)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">遍历top路径以下所有的子目录，返回一个三元组：(路径, [包含目录], [包含文件])【具体实现方案请看：第30讲课后作业^_^】</font><br>
			</td>
		</tr>
		<tr>
			<td colspan="2" width="553">
				<div align="center">
					<i><font style="font-size:12.0pt">以下是支持路径操作中常用到的一些定义，支持所有平台</font></i>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">os.curdir</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">指代当前目录（'.'）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">os.pardir</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">指代上一级目录（'..'）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">os.sep</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">输出操作系统特定的路径分隔符（Win下为'\\'，Linux下为'/'）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">os.linesep</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">当前平台使用的行终止符（Win下为'\r\n'，Linux下为'\n'）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">os.name</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">指代当前使用的操作系统（包括：'posix',&nbsp;&nbsp;'nt', 'mac', 'os2', 'ce', 'java'）</font><br>
			</td>
		</tr>
		</tbody>
		</table>
		<br>
		<br>
		<br>
		<div align="center">
			<font size="3"><strong>os.path模块中关于路径常用的函数使用方法</strong></font>
		</div>
		<br>
		<br>
		<table cellspacing="0" class="t_table" style="width:98%">
		<tbody>
		<tr>
			<td>
				<div align="center">
					<strong><font style="font-size:12.0pt">函数名</font></strong>
				</div>
			</td>
			<td>
				<div align="center">
					<strong><font style="font-size:12.0pt">使用方法</font></strong>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">basename(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">去掉目录路径，单独返回文件名</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">dirname(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">去掉文件名，单独返回目录路径</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">join(path1[, path2[, ...]])</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">将path1, path2各部分组合成一个路径名</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">split(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">分割文件名与路径，返回(f_path, f_name)元组。如果完全使用目录，它也会将最后一个目录作为文件名分离，且不会判断文件或者目录是否存在</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">splitext(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">分离文件名与扩展名，返回(f_name, f_extension)元组</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">getsize(file)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">返回指定文件的尺寸，单位是字节</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">getatime(file)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">返回指定文件最近的访问时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">getctime(file)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">返回指定文件的创建时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">getmtime(file)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">返回指定文件最新的修改时间（浮点型秒数，可用time模块的gmtime()或localtime()函数换算）</font><br>
			</td>
		</tr>
		<tr>
			<td colspan="2" width="553">
				<div align="center">
					<i><font style="font-size:12.0pt">以下为函数返回 True 或 False</font></i>
				</div>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">exists(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径（目录或文件）是否存在</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">isabs(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径是否为绝对路径</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">isdir(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径是否存在且是一个目录</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">isfile(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径是否存在且是一个文件</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">islink(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径是否存在且是一个符号链接</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">ismount(path)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断指定路径是否存在且是一个挂载点</font><br>
			</td>
		</tr>
		<tr>
			<td>
				<font style="font-size:12.0pt">samefile(path1, paht2)</font><br>
			</td>
			<td>
				<font style="font-size:12.0pt">判断path1和path2两个路径是否指向同一个文件</font><br>
			</td>
		</tr>
		</tbody>
		</table>
		<br>
		<br>
	</td>
</tr>
</tbody>
</table>
> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=45279&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)

<table cellspacing="0" cellpadding="0">
<tbody>
<tr>
	<td class="t_f" id="postmessage_1747826">
		<strong><font size="3">文件打开模式</font></strong><br>
		<br>
		<table cellspacing="0" class="t_table" style="width:500px">
		<tbody>
		<tr>
			<td>
				<strong> 打开模式</strong>
			</td>
			<td>
				<strong> 执行操作</strong>
			</td>
		</tr>
		<tr>
			<td>
				 'r'
			</td>
			<td>
				 以只读方式打开文件（默认）
			</td>
		</tr>
		<tr>
			<td>
				 'w'
			</td>
			<td>
				 以写入的方式打开文件，会覆盖已存在的文件
			</td>
		</tr>
		<tr>
			<td>
				 'x'
			</td>
			<td>
				 如果文件已经存在，使用此模式打开将引发异常
			</td>
		</tr>
		<tr>
			<td>
				 'a'
			</td>
			<td>
				 以写入模式打开，如果文件存在，则在末尾追加写入
			</td>
		</tr>
		<tr>
			<td>
				 'b'
			</td>
			<td>
				 以二进制模式打开文件
			</td>
		</tr>
		<tr>
			<td>
				 't'
			</td>
			<td>
				 以文本模式打开（默认）
			</td>
		</tr>
		<tr>
			<td>
				 '+'
			</td>
			<td>
				 可读写模式（可添加到其他模式中使用）
			</td>
		</tr>
		<tr>
			<td>
				 'U'
			</td>
			<td>
				 通用换行符支持
			</td>
		</tr>
		</tbody>
		</table>
		<br>
&nbsp; &nbsp; 
		<br>
		<strong><font size="3">文件对象方法</font></strong><br>
		<br>
		<table cellspacing="0" class="t_table" style="width:500px">
		<tbody>
		<tr>
			<td>
				<strong> 文件对象方法</strong>
			</td>
			<td>
				<strong> 执行操作</strong>
			</td>
		</tr>
		<tr>
			<td>
				 f.close()
			</td>
			<td>
				 关闭文件
			</td>
		</tr>
		<tr>
			<td>
				 f.read([size=-1])
			</td>
			<td>
				 从文件读取size个字符，当未给定size或给定负值的时候，读取剩余的所有字符，然后作为字符串返回
			</td>
		</tr>
		<tr>
			<td>
				 f.readline([size=-1])
			</td>
			<td>
				从文件中读取并返回一行（包括行结束符），如果有size有定义则返回size个字符
			</td>
		</tr>
		<tr>
			<td>
				 f.write(str)
			</td>
			<td>
				 将字符串str写入文件
			</td>
		</tr>
		<tr>
			<td>
				 f.writelines(seq)
			</td>
			<td>
				 向文件写入字符串序列seq，seq应该是一个返回字符串的可迭代对象<br>
			</td>
		</tr>
		<tr>
			<td>
				 f.seek(offset, from)
			</td>
			<td>
				 在文件中移动文件指针，从from（0代表文件起始位置，1代表当前位置，2代表文件末尾）偏移offset个字节
			</td>
		</tr>
		<tr>
			<td>
				 f.tell()
			</td>
			<td>
				 返回当前在文件中的位置
			</td>
		</tr>
		<tr>
			<td>
				 f.truncate([size=file.tell()])
			</td>
			<td>
				 截取文件到size个字节，默认是截取到文件指针当前位置
			</td>
		</tr>
		</tbody>
		</table>
	</td>
</tr>
</tbody>
</table>
> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=45276&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)

<table cellspacing="0" class="t_table" style="width:98%">
<tbody>
<tr>
	<td>
		<div align="center">
			<strong> 集合（s）.方法名</strong>
		</div>
	</td>
	<td>
		<div align="center">
			<strong>等价符号</strong>
		</div>
	</td>
	<td>
		<div align="center">
			<strong>方法说明 </strong>
		</div>
	</td>
</tr>
<tr>
	<td>
		 s.issubset(t)
	</td>
	<td>
		 s &lt;= t
	</td>
	<td>
		子集测试（允许不严格意义上的子集）：s 中所有的元素都是 t 的成员
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		 s &lt; t
	</td>
	<td>
		子集测试（严格意义上）：s != t 而且 s 中所有的元素都是 t 的成员
	</td>
</tr>
<tr>
	<td>
		 s.issuperset(t)
	</td>
	<td>
		 s &gt;= t
	</td>
	<td>
		超集测试（允许不严格意义上的超集）：t 中所有的元素都是 s 的成员
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		 s &gt; t
	</td>
	<td>
		超集测试（严格意义上）：s != t 而且 t 中所有的元素都是 s 的成员
	</td>
</tr>
<tr>
	<td>
		 s.union(t)
	</td>
	<td>
		 s | t
	</td>
	<td>
		合并操作：s "或" t 中的元素
	</td>
</tr>
<tr>
	<td>
		 s.intersection(t)
	</td>
	<td>
		 s &amp; t
	</td>
	<td>
		交集操作：s "与" t 中的元素
	</td>
</tr>
<tr>
	<td>
		 s.difference
	</td>
	<td>
		 s - t
	</td>
	<td>
		差分操作：在 s 中存在，在 t 中不存在的元素
	</td>
</tr>
<tr>
	<td>
		 s.symmetric_difference(t)
	</td>
	<td>
		 s ^ t
	</td>
	<td>
		对称差分操作：s "或" t 中的元素，但不是 s 和 t 共有的元素
	</td>
</tr>
<tr>
	<td>
		 s.copy()
	</td>
	<td>
	</td>
	<td>
		返回 s 的拷贝（浅复制）
	</td>
</tr>
<tr>
	<td>
		<div align="center">
			<strong> 以下方法仅适用于可变集合</strong>
		</div>
	</td>
	<td>
	</td>
	<td>
	</td>
</tr>
<tr>
	<td>
		 s.update
	</td>
	<td>
		 s |= t
	</td>
	<td>
		将 t 中的元素添加到 s 中
	</td>
</tr>
<tr>
	<td>
		 s.intersection_update(t)
	</td>
	<td>
		 s &amp;= t
	</td>
	<td>
		交集修改操作：s 中仅包括 s 和 t 中共有的成员
	</td>
</tr>
<tr>
	<td>
		 s.difference_update(t)
	</td>
	<td>
		 s -= t
	</td>
	<td>
		差修改操作：s 中包括仅属于 s 但不属于 t 的成员
	</td>
</tr>
<tr>
	<td>
		 s.symmetric_difference_update(t)
	</td>
	<td>
		 s ^= t
	</td>
	<td>
		对称差分修改操作：s 中包括仅属于 s 或仅属于 t 的成员
	</td>
</tr>
<tr>
	<td>
		 s.add(obj)
	</td>
	<td>
	</td>
	<td>
		加操作：将 obj 添加到 s
	</td>
</tr>
<tr>
	<td>
		 s.remove(obj)
	</td>
	<td>
	</td>
	<td>
		删除操作：将 obj 从 s 中删除，如果 s 中不存在 obj，将引发异常
	</td>
</tr>
<tr>
	<td>
		 s.discard(obj)
	</td>
	<td>
	</td>
	<td>
		丢弃操作：将 obj 从 s 中删除，如果 s 中不存在 obj，也没事儿^_^
	</td>
</tr>
<tr>
	<td>
		 s.pop()
	</td>
	<td>
	</td>
	<td>
		弹出操作：移除并返回 s 中的任意一个元素
	</td>
</tr>
<tr>
	<td>
		 s.clear()
	</td>
	<td>
	</td>
	<td>
		清除操作：清除 s 中的所有元素
	</td>
</tr>
</tbody>
</table>
> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=38992&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)

<table cellspacing="0" class="t_table" style="width:80%"><tbody><tr><td width="206">capitalize()

</td><td width="362">把字符串的第一个字符改为大写

</td></tr><tr><td width="206">casefold()

</td><td width="362">把整个字符串的所有字符改为小写

</td></tr><tr><td width="206">center(width)

</td><td width="362">将字符串居中，并使用空格填充至长度 width 的新字符串

</td></tr><tr><td width="206">count(sub[, start[, end]])

</td><td width="362">返回 sub 在字符串里边出现的次数，start 和 end 参数表示范围，可选。

</td></tr><tr><td width="206">encode(encoding='utf-8', errors='strict')

</td><td width="362">以 encoding 指定的编码格式对字符串进行编码。

</td></tr><tr><td width="206">endswith(sub[, start[, end]])

</td><td width="362">检查字符串是否以 sub 子字符串结束，如果是返回 True，否则返回 False。start 和 end 参数表示范围，可选。

</td></tr><tr><td width="206">expandtabs([tabsize=8])

</td><td width="362">把字符串中的 tab 符号（\t）转换为空格，如不指定参数，默认的空格数是 tabsize=8。

</td></tr><tr><td width="206">find(sub[, start[, end]])

</td><td width="362">检测 sub 是否包含在字符串中，如果有则返回索引值，否则返回 -1，start 和 end 参数表示范围，可选。

</td></tr><tr><td width="206">index(sub[, start[, end]])

</td><td width="362">跟 find 方法一样，不过如果 sub 不在 string 中会产生一个异常。

</td></tr><tr><td width="206">isalnum()

</td><td width="362">如果字符串至少有一个字符并且所有字符都是字母或数字则返回 True，否则返回 False。

</td></tr><tr><td width="206">isalpha()

</td><td width="362">如果字符串至少有一个字符并且所有字符都是字母则返回 True，否则返回 False。

</td></tr><tr><td width="206">isdecimal()

</td><td width="362">如果字符串只包含十进制数字则返回 True，否则返回 False。

</td></tr><tr><td width="206">isdigit()

</td><td width="362">如果字符串只包含数字则返回 True，否则返回 False。

</td></tr><tr><td width="206">islower()

</td><td width="362">如果字符串中至少包含一个区分大小写的字符，并且这些字符都是小写，则返回 True，否则返回 False。

</td></tr><tr><td width="206">isnumeric()

</td><td width="362">如果字符串中只包含数字字符，则返回 True，否则返回 False。

</td></tr><tr><td width="206">isspace()

</td><td width="362">如果字符串中只包含空格，则返回 True，否则返回 False。

</td></tr><tr><td width="206">istitle()

</td><td width="362">如果字符串是标题化（所有的单词都是以大写开始，其余字母均小写），则返回 True，否则返回 False。

</td></tr><tr><td width="206">isupper()

</td><td width="362">如果字符串中至少包含一个区分大小写的字符，并且这些字符都是大写，则返回 True，否则返回 False。

</td></tr><tr><td width="206">join(sub)

</td><td width="362">以字符串作为分隔符，插入到 sub 中所有的字符之间。

</td></tr><tr><td width="206">ljust(width)

</td><td width="362">返回一个左对齐的字符串，并使用空格填充至长度为 width 的新字符串。

</td></tr><tr><td width="206">lower()

</td><td width="362">转换字符串中所有大写字符为小写。

</td></tr><tr><td width="206">lstrip()

</td><td width="362">去掉字符串左边的所有空格

</td></tr><tr><td width="206">partition(sub)

</td><td width="362">找到子字符串 sub，把字符串分成一个 3 元组 (pre_sub, sub, fol_sub)，如果字符串中不包含 sub 则返回 ('原字符串', '', '')

</td></tr><tr><td width="206">replace(old, new[, count])

</td><td width="362">把字符串中的 old 子字符串替换成 new 子字符串，如果 count 指定，则替换不超过 count 次。

</td></tr><tr><td width="206">rfind(sub[, start[, end]])

</td><td width="362">类似于 find() 方法，不过是从右边开始查找。

</td></tr><tr><td width="206">rindex(sub[, start[, end]])

</td><td width="362">类似于 index() 方法，不过是从右边开始。

</td></tr><tr><td width="206">rjust(width)

</td><td width="362">返回一个右对齐的字符串，并使用空格填充至长度为 width 的新字符串。

</td></tr><tr><td width="206">rpartition(sub)

</td><td width="362">类似于 partition() 方法，不过是从右边开始查找。

</td></tr><tr><td width="206">rstrip()

</td><td width="362">删除字符串末尾的空格。

</td></tr><tr><td width="206">split(sep=None, maxsplit=-1)

</td><td width="362">不带参数默认是以空格为分隔符切片字符串，如果 maxsplit 参数有设置，则仅分隔 maxsplit 个子字符串，返回切片后的子字符串拼接的列表。

</td></tr><tr><td width="206">splitlines(([keepends]))

</td><td width="362">按照 '\n' 分隔，返回一个包含各行作为元素的列表，如果 keepends 参数指定，则返回前 keepends 行。

</td></tr><tr><td width="206">startswith(prefix[, start[, end]])

</td><td width="362">检查字符串是否以 prefix 开头，是则返回 True，否则返回 False。start 和 end 参数可以指定范围检查，可选。

</td></tr><tr><td width="206">strip([chars])

</td><td width="362">删除字符串前边和后边所有的空格，chars 参数可以定制删除的字符，可选。

</td></tr><tr><td width="206">swapcase()

</td><td width="362">翻转字符串中的大小写。

</td></tr><tr><td width="206">title()

</td><td width="362">返回标题化（所有的单词都是以大写开始，其余字母均小写）的字符串。

</td></tr><tr><td width="206">translate(table)

</td><td width="362">根据 table 的规则（可以由 str.maketrans('a', 'b') 定制）转换字符串中的字符。

</td></tr><tr><td width="206">upper()

</td><td width="362">转换字符串中的所有小写字符为大写。

</td></tr><tr><td width="206">zfill(width)

</td><td width="362">返回长度为 width 的字符串，原字符串右对齐，前边用 0 填充。

</td></tr></tbody></table>
> [收藏自](http://bbs.fishc.com/forum.php?mod=viewthread&tid=48793&extra=page%3D1%26filter%3Dtypeid%26typeid%3D403)

<table cellspacing="0" class="t_table" style="width:98%">
<tbody>
<tr>
	<td width="30%">
		<div align="center">
			<strong>魔法方法</strong>
		</div>
	</td>
	<td>
		<div align="center">
			<strong>含义 </strong>
		</div>
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="left">
			<div align="center">
				<font color="#ff0000"><strong>基本的魔法方法</strong></font>
			</div>
		</div>
	</td>
</tr>
<tr>
	<td>
		__new__(cls[, ...])
	</td>
	<td>
		 1. __new__ 是在一个对象实例化的时候所调用的第一个方法
2. 它的第一个参数是这个类，其他的参数是用来直接传递给 __init__ 方法
3. __new__ 决定是否要使用该 __init__ 方法，因为 __new__ 可以调用其他类的构造方法或者直接返回别的实例对象来作为本类的实例，如果 __new__ 没有返回实例对象，则 __init__ 不会被调用
4. __new__ 主要是用于继承一个不可变的类型比如一个 tuple 或者 string
	</td>
</tr>
<tr>
	<td>
		 __init__(self[, ...])
	</td>
	<td>
		构造器，当一个实例被创建的时候调用的初始化方法
	</td>
</tr>
<tr>
	<td>
		 __del__(self)
	</td>
	<td>
		 析构器，当一个实例被销毁的时候调用的方法
	</td>
</tr>
<tr>
	<td>
		 __call__(self[, args...])
	</td>
	<td>
		允许一个类的实例像函数一样被调用：x(a, b) 调用 x.__call__(a, b)
	</td>
</tr>
<tr>
	<td>
		 __len__(self)
	</td>
	<td>
		 定义当被 len() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		__repr__(self)
	</td>
	<td>
		 定义当被 repr() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __str__(self)
	</td>
	<td>
		 定义当被 str() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __bytes__(self)
	</td>
	<td>
		 定义当被 bytes() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __hash__(self)
	</td>
	<td>
		 定义当被 hash() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __bool__(self)
	</td>
	<td>
		 定义当被 bool() 调用时的行为，应该返回 True 或 False
	</td>
</tr>
<tr>
	<td>
		__format__(self, format_spec)
	</td>
	<td>
		 定义当被 format() 调用时的行为
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>有关属性</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __getattr__(self, name)
	</td>
	<td>
		 定义当用户试图获取一个不存在的属性时的行为
	</td>
</tr>
<tr>
	<td>
		 __getattribute__(self, name)
	</td>
	<td>
		 定义当该类的属性被访问时的行为
	</td>
</tr>
<tr>
	<td>
		 __setattr__(self, name, value)
	</td>
	<td>
		 定义当一个属性被设置时的行为
	</td>
</tr>
<tr>
	<td>
		 __delattr__(self, name)
	</td>
	<td>
		 定义当一个属性被删除时的行为
	</td>
</tr>
<tr>
	<td>
		 __dir__(self)
	</td>
	<td>
		 定义当 dir() 被调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __get__(self, instance, owner)
	</td>
	<td>
		 定义当描述符的值被取得时的行为
	</td>
</tr>
<tr>
	<td>
		 __set__(self, instance, value)
	</td>
	<td>
		 定义当描述符的值被改变时的行为
	</td>
</tr>
<tr>
	<td>
		 __delete__(self, instance)
	</td>
	<td>
		 定义当描述符的值被删除时的行为
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>比较操作符</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __lt__(self, other)
	</td>
	<td>
		 定义小于号的行为：x &lt; y 调用 x.__lt__(y)
	</td>
</tr>
<tr>
	<td>
		 __le__(self, other)
	</td>
	<td>
		 定义小于等于号的行为：x &lt;= y 调用 x.__le__(y)
	</td>
</tr>
<tr>
	<td>
		 __eq__(self, other)
	</td>
	<td>
		 定义等于号的行为：x == y 调用 x.__eq__(y)
	</td>
</tr>
<tr>
	<td>
		 __ne__(self, other)
	</td>
	<td>
		 定义不等号的行为：x != y 调用 x.__ne__(y)
	</td>
</tr>
<tr>
	<td>
		 __gt__(self, other)
	</td>
	<td>
		 定义大于号的行为：x &gt; y 调用 x.__gt__(y)
	</td>
</tr>
<tr>
	<td>
		 __ge__(self, other)
	</td>
	<td>
		 定义大于等于号的行为：x &gt;= y 调用 x.__ge__(y)
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>算数运算符</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __add__(self, other)
	</td>
	<td>
		 定义加法的行为：+
	</td>
</tr>
<tr>
	<td>
		 __sub__(self, other)
	</td>
	<td>
		定义减法的行为：-
	</td>
</tr>
<tr>
	<td>
		 __mul__(self, other)
	</td>
	<td>
		 定义乘法的行为：*
	</td>
</tr>
<tr>
	<td>
		 __truediv__(self, other)
	</td>
	<td>
		 定义真除法的行为：/
	</td>
</tr>
<tr>
	<td>
		 __floordiv__(self, other)
	</td>
	<td>
		 定义整数除法的行为：//
	</td>
</tr>
<tr>
	<td>
		 __mod__(self, other)
	</td>
	<td>
		 定义取模算法的行为：%
	</td>
</tr>
<tr>
	<td>
		 __divmod__(self, other)
	</td>
	<td>
		 定义当被 divmod() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __pow__(self, other[, modulo])
	</td>
	<td>
		 定义当被 power() 调用或 ** 运算时的行为
	</td>
</tr>
<tr>
	<td>
		 __lshift__(self, other)
	</td>
	<td>
		 定义按位左移位的行为：&lt;&lt;
	</td>
</tr>
<tr>
	<td>
		 __rshift__(self, other)
	</td>
	<td>
		定义按位右移位的行为：&gt;&gt;
	</td>
</tr>
<tr>
	<td>
		 __and__(self, other)
	</td>
	<td>
		 定义按位与操作的行为：&amp;
	</td>
</tr>
<tr>
	<td>
		 __xor__(self, other)
	</td>
	<td>
		 定义按位异或操作的行为：^
	</td>
</tr>
<tr>
	<td>
		 __or__(self, other)
	</td>
	<td>
		定义按位或操作的行为：|
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>反运算</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __radd__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rsub__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rmul__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rtruediv__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rfloordiv__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rmod__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rdivmod__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rpow__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rlshift__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rrshift__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rand__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __rxor__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
		 __ror__(self, other)
	</td>
	<td>
		 （与上方相同，当左操作数不支持相应的操作时被调用）
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>增量赋值运算</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __iadd__(self, other)
	</td>
	<td>
		 定义赋值加法的行为：+=
	</td>
</tr>
<tr>
	<td>
		 __isub__(self, other)
	</td>
	<td>
		 定义赋值减法的行为：-=
	</td>
</tr>
<tr>
	<td>
		 __imul__(self, other)
	</td>
	<td>
		 定义赋值乘法的行为：*=
	</td>
</tr>
<tr>
	<td>
		 __itruediv__(self, other)
	</td>
	<td>
		 定义赋值真除法的行为：/=
	</td>
</tr>
<tr>
	<td>
		 __ifloordiv__(self, other)
	</td>
	<td>
		 定义赋值整数除法的行为：//=
	</td>
</tr>
<tr>
	<td>
		 __imod__(self, other)
	</td>
	<td>
		 定义赋值取模算法的行为：%=
	</td>
</tr>
<tr>
	<td>
		 __ipow__(self, other[, modulo])
	</td>
	<td>
		 定义赋值幂运算的行为：**=
	</td>
</tr>
<tr>
	<td>
		 __ilshift__(self, other)
	</td>
	<td>
		 定义赋值按位左移位的行为：&lt;&lt;=
	</td>
</tr>
<tr>
	<td>
		 __irshift__(self, other)
	</td>
	<td>
		 定义赋值按位右移位的行为：&gt;&gt;=
	</td>
</tr>
<tr>
	<td>
		 __iand__(self, other)
	</td>
	<td>
		 定义赋值按位与操作的行为：&amp;=
	</td>
</tr>
<tr>
	<td>
		 __ixor__(self, other)
	</td>
	<td>
		 定义赋值按位异或操作的行为：^=
	</td>
</tr>
<tr>
	<td>
		 __ior__(self, other)
	</td>
	<td>
		 定义赋值按位或操作的行为：|=
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>一元操作符</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __pos__(self)
	</td>
	<td>
		 定义正号的行为：+x
	</td>
</tr>
<tr>
	<td>
		 __neg__(self)
	</td>
	<td>
		 定义负号的行为：-x
	</td>
</tr>
<tr>
	<td>
		 __abs__(self)
	</td>
	<td>
		 定义当被 abs() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __invert__(self)
	</td>
	<td>
		 定义按位求反的行为：~x
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>类型转换</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __complex__(self)
	</td>
	<td>
		 定义当被 complex() 调用时的行为（需要返回恰当的值）
	</td>
</tr>
<tr>
	<td>
		 __int__(self)
	</td>
	<td>
		 定义当被 int() 调用时的行为（需要返回恰当的值）
	</td>
</tr>
<tr>
	<td>
		 __float__(self)
	</td>
	<td>
		 定义当被 float() 调用时的行为（需要返回恰当的值）
	</td>
</tr>
<tr>
	<td>
		 __round__(self[, n])
	</td>
	<td>
		 定义当被 round() 调用时的行为（需要返回恰当的值）
	</td>
</tr>
<tr>
	<td>
		 __index__(self)
	</td>
	<td>
		 1. 当对象是被应用在切片表达式中时，实现整形强制转换
2. 如果你定义了一个可能在切片时用到的定制的数值型,你应该定义 __index__
3. 如果 __index__ 被定义，则 __int__ 也需要被定义，且返回相同的值
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>上下文管理（with 语句）</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __enter__(self)
	</td>
	<td>
		 1. 定义当使用 with 语句时的初始化行为
2. __enter__ 的返回值被 with 语句的目标或者 as 后的名字绑定
	</td>
</tr>
<tr>
	<td>
		 __exit__(self, exc_type, exc_value, traceback)
	</td>
	<td>
		 1. 定义当一个代码块被执行或者终止后上下文管理器应该做什么
2. 一般被用来处理异常，清除工作或者做一些代码块执行完毕之后的日常工作
	</td>
</tr>
<tr>
	<td>
	</td>
	<td>
		<div align="center">
			<font color="#ff0000">
				<strong>容器类型</strong>
			</font>
		</div>
	</td>
</tr>
<tr>
	<td>
		 __len__(self)
	</td>
	<td>
		 定义当被 len() 调用时的行为（返回容器中元素的个数）
	</td>
</tr>
<tr>
	<td>
		 __getitem__(self, key)
	</td>
	<td>
		 定义获取容器中指定元素的行为，相当于 self[key]
	</td>
</tr>
<tr>
	<td>
		 __setitem__(self, key, value)
	</td>
	<td>
		 定义设置容器中指定元素的行为，相当于 self[key] = value
	</td>
</tr>
<tr>
	<td>
		 __delitem__(self, key)
	</td>
	<td>
		 定义删除容器中指定元素的行为，相当于 del self[key]
	</td>
</tr>
<tr>
	<td>
		 __iter__(self)
	</td>
	<td>
		 定义当迭代容器中的元素的行为
	</td>
</tr>
<tr>
	<td>
		 __reversed__(self)
	</td>
	<td>
		 定义当被 reversed() 调用时的行为
	</td>
</tr>
<tr>
	<td>
		 __contains__(self, item)
	</td>
	<td>
		 定义当使用成员测试运算符（in 或 not in）时的行为
	</td>
</tr>
</tbody>
</table>
## 背景效果
- [particles.js](https://github.com/VincentGarreau/particles.js) 创建粒子效果的轻量级JavaScript库。[CodePen查看示例](https://codepen.io/svend/pen/gGwadq)

- [源码](https://github.com/16Free/notes/tree/master/canvas/Evan%20You) [尤雨溪个人主页背景。](http://evanyou.me/)[CodePen查看示例](https://codepen.io/svend/pen/bowVXN)  
| 插件名称 | 插件作用 |
| ------------- |-------------|
| [Auto Close Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag) | 自动添加HTML / XML关闭标签`1.16已经内置 HTML 的自动闭合标签功能，但是此插件能可配置的开启 XML, PHP, Vue, JavaScript, TypeScript, JSX, TSX 等语言的自动闭合标签功能` |
| [Auto Import](https://marketplace.visualstudio.com/items?itemName=steoates.autoimport)      | TypeScript 、TSX 的自动解析和查找可导入的代码 |
| [Auto Rename Tag](https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag) | 自动重命名HTML / XML对应的标签 |
| [Beautify](https://marketplace.visualstudio.com/items?itemName=HookyQR.beautify) | 美化 javascript, JSON, CSS, Sass, 和 HTML |
| [Beautify css/sass/scss/less](https://marketplace.visualstudio.com/items?itemName=michelemelluso.code-beautifier) | 美化 css, sass and less  |
| [Better Comments](https://marketplace.visualstudio.com/items?itemName=aaron-bond.better-comments) | 更人性化的注释 |
| [Bookmarks](https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks) | 收藏某一行为书签，并且能快速跳转到某个书签位置 |
| [Bracket Pair Colorizer](https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer) | 为括号制定不同的颜色 |
| [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner) | 运行代码片段或文件 |
| [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) | 在Chrome浏览器或其他支持Chrome调试器协议的目标中调试JavaScript代码 |
| [Document This](https://marketplace.visualstudio.com/items?itemName=joelday.docthis) | 自动生成JSDoc，适用于JavaScript 和 TypeScript |
| [EditorConfig for VS Code](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig) | EditorConfig 支持 |
| [Emoji](https://marketplace.visualstudio.com/items?itemName=Perkovec.emoji) | 从命令面板插入表情符号 |
| [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) | ESLint 支持 |
| [filesize](https://marketplace.visualstudio.com/items?itemName=mkxml.vscode-filesize) | 在状态栏显示当前文件大小 |
| [Git History (git log)](https://marketplace.visualstudio.com/items?itemName=donjayamanne.githistory) | 查看Git日志、文件或行历史记录 |
| [Git Lens](https://marketplace.visualstudio.com/items?itemName=eamodio.gitlens) | 代码提交信息 |
| [gitignore](https://marketplace.visualstudio.com/items?itemName=codezombiech.gitignore) | .gitignore  支持 |
| [HTML CSS Support](https://marketplace.visualstudio.com/items?itemName=ecmel.vscode-html-css) | html文件的CSS支持 |
| [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets) | HTML标签片段（包括HTML5） |
| [HTMLHint](https://marketplace.visualstudio.com/items?itemName=mkaufman.HTMLHint) | HTML静态代码分析工具 |
| [Indenticator](https://marketplace.visualstudio.com/items?itemName=SirTori.indenticator) | 突出显示当前缩进的辅助线  |
| [IntelliJ IDEA Keybindings](https://marketplace.visualstudio.com/items?itemName=k--kato.intellij-idea-keybindings) | 用惯了IntelliJ全家桶，快捷键改不过来 |
| [IntelliSense for CSS class names](https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion) | 根据工作区中的CSS文件为HTML `class`属性提供CSS类名称提示 |
| [markdownlint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint) | markdown 语法检查高亮 |
| [Material Icon Theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme) | Material Design Icons |
| [minify](https://marketplace.visualstudio.com/items?itemName=HookyQR.minify) | 压缩JavaScript、CSS、HTML |
| [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script) | npm 支持 |
| [npm Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense) | 自动完成NPM模块导入语句  |
| [open-in-browser](https://marketplace.visualstudio.com/items?itemName=coderfee.open-html-in-browser) | 在浏览器中预览HTML文件 |
| [Output Colorizer](https://marketplace.visualstudio.com/items?itemName=IBM.output-colorizer) | 输入的日志高亮显示 |
| [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense) | 自动完成文件名 |
| [Python](https://marketplace.visualstudio.com/items?itemName=donjayamanne.python) | Python 支持 |
| [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync) | 同步设置、片段、主题、文件图标，启动，Keybindings |
| [TS/JS postfix completion](https://marketplace.visualstudio.com/items?itemName=ipatalas.vscode-postfix-ts) | JavaScript、TypeScript 智能提示 |
| [TSLint](https://marketplace.visualstudio.com/items?itemName=eg2.tslint) | TypeScript 语言 TSLint 支持 |
| [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur) | 支持 Vue 最好的插件 |
| [vscode-fileheader](https://marketplace.visualstudio.com/items?itemName=mikey.vscode-fileheader) |  插入头部注释，并自动更新时间|