Improves types added in #2494 and added test cases.

- Fixes types on deep/recursive unwrapping (observable array of observables)
- Passes through RegExp and Date w/o mapping prototype ([see here](https://stackoverflow.com/questions/59364768/exclude-builtins-when-in-mapped-conditional-type))

In the added test cases, `observableArr` and `builtins` are the two newly covered conditions (the others were good already, but always nice to have tests).

Also, in finding which built-ins get unwrapped correctly (Date and RegExp), I found [this](https://github.com/knockout/knockout/blob/9893233413e467a40919237e524b545e335c1050/src/subscribables/mappingHelpers.js#L27). Should `Map`, `Set`, `WeakMap`, and `WeakSet` (and potentially [others](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)) be added here? They currently do not behave as expected with `ko.toJS`. Theoretically this is a breaking change since the output for a given input will change, but as-is the returned map/set is just an empty object so I can't see any way it would be being used currently.
Proof: https://github.com/knockout/knockout/blob/master/spec/bindingAttributeBehaviors.js#L68.
In the Knockout 3.5.1 release, there was a change to the components/defaultLoader.js that is breaking compatibility issues with IE <= 8 due to the use of reserved word default.

if (module && typeof module === 'object' && module.__esModule && module.default) { module = module.default; }

My suggested fix is to change from dot notation to bracket notation.
if (module && typeof module === 'object' && module.__esModule && module['default']) { module = module['default']; }

I have tested this with IE 8 and it seems to fix the issue.
**Description**
In the Knockout 3.5.1 release, there was a change to the components/defaultLoader.js that is breaking compatibility issues with IE <= 8 due to the use of reserved word default.

`if (module && typeof module === 'object' && module.__esModule && module.default) {
                        module = module.default;
}`

My suggested fix is to change from dot notation to bracket notation.
`if (module && typeof module === 'object' && module.__esModule && module['default']) {
                        module = module['default'];
}`

I have tested this with IE 8 and it seems to fix the issue.

**Expected Behavior**
Compatibility with IE <= 8

**Actual Behavior**
Unable to load page in IE <= 8

**Steps to Reproduce the Problem**
Open page using templates and knockout 3.5.1 in IE <=8 (or 11 in compatibility mode)

**Specifications**
Version: Knockout 3.5.1
Last Working Version: Knockout 3.5.0
Platform: Windows 10
Browser: IE <= 8

**Additional Info**
[Comment on Commit](https://github.com/knockout/knockout/commit/d7b84f9a5b8169dbed7d6a2284e68cf59d83706e#r35958920)

**Example**
[IE8knockout3.5.1bug.zip](https://github.com/knockout/knockout/files/3848459/IE8knockout3.5.1bug.zip)


Hi,

I've been experimenting with 3rd party Web Components, in order to get rid of the HTML/CSS mess of some layout- and UI-frameworks (you know who they are).

**The context**
Of course there is a conceptual mismatch between the two. It would be nice to have the Custom Element's properties and attributes to be observable and let Knockout keep everything two-way binded. Alas, most 3rd party WCs are build on LitElement/Polymer or Stencil that come from the world of state machines / one-way-binding and not from our beloved MVVM world with it's two-way-binding.

So, hooking into the attributes and properties with observables will probably be a challenge, especially for 3rd party WCs that are beyond our control. And we're left with our regular "data-bind"-bindings that have Knockout and the WC manipulating the DOM at the same time in order to perform their respective binding-magic.

It's pretty obvious that this will lead to problems, but still.... Simple text-, value- or foreach- bindings should work IMO and I would be happy just to have those working.

But unfortunately, no dice... The foreach-binding messes up most 3rd party WCs.

I've tried:
- [Material Components Web Components](https://github.com/material-components/material-components-web-components) - based on LitElement
- [Weightless](https://github.com/andreasbm/weightless) - based on LitElement
- [Ionic Core](https://github.com/ionic-team/ionic/tree/master/core) - based on Stencil

Both Ionic and Weightless WCs don't work in a foreach binding. They both exhibit the exact same problem (HTML elements are doubled) even though they use different techniques. Material Components WCs don't seem to exhibit this behaviour, but I don't really trust it since they're build on LitElement, just as Weightless.

**The problem**
When there's a foreach-binding containing WCs, that loads directly on start-up, it works 9 times out of 10 (obvious race condition), but when the foreach is created or updated later on (for instance, when adding items to the binding, when lazy loading a component containing a foreach, or even when just delaying applyBindings with a setTimeout) the created items contain corrupted HTML (elements are doubled in most cases).

**My findings**
KO's foreach uses the internal templating engine and the childNodes of the bound element are used as template. However, as soon as the WC's javascript has loaded and the browser has manipulated the DOM to reflect the WC's design (added CSS and sometimes even elements to the Light DOM) the KO template engine will use those new nodes from then on as a template. And when inserting new elements the browser will again try to manipulate already manipulated nodes and so they get corrupted.

**The solution**
If I keep the template out of the browsers reach, It won't be mangled by the WC's JS and the browser and Knockout will inject clean nodes into the DOM.

E.g. this doesn't work (example using Ionic WCs):
```html
<ion-grid data-bind="foreach: list">   
    <ion-row>
        <ion-col size="4">
            <ion-item>
                <ion-label position="floating">Label</ion-label>
                <ion-input data-bind="value: $data"></ion-input>
            </ion-item>
            <ion-button data-bind="click: $parent.delete">Delete</ion-button>
        </ion-col>
    </ion-row>
</ion-grid>
```

But this does:
```html
<ion-grid data-bind="template: { foreach: list, name: 'item-row' } ">   
</ion-grid>

<script type="text/html" id="item-row">
    <ion-row>
        <ion-col size="4">
            <ion-item>
                <ion-label position="floating">Label</ion-label>
                <ion-input data-bind="value: $data"></ion-input>
            </ion-item>
            <ion-button data-bind="click: $parent.delete">Delete</ion-button>
        </ion-col>
    </ion-row>
</script>
```
This is however a lot less readable. Especially with many foreach bindings.

**So now what?**
I understand that there are a lot of conceptual differences between the worlds of Knockout and of Web Components. I don't really know how we can get foreach templates from the DOM without the browser pro-actively manipulating them. Still I see a lot of people online using WCs with Knockout. So, what am I missing here?!
@avickers, you mentioned in #2483 that you moved away from Knockout components to Web Components. How do you deal with this? Or is everyone rolling their own in stead of using 3rd party WCs?

Kind regards,
Karim
I am using knockout with bootstrap js.

My requirement :

- I am creating an HTML form and I have done data binding using knockout.

- After submission of this form, I am showing a message to the user in bootstrap modal.

- On closing this modal I need to reset the HTML form. SO on clicking on the close button I and doing a click binding and calling a method. Below is the snippet of that method.


```
// Re-setting the observable  to default value
me.addStudentForClass(null);
me.parents=ko.mapping.fromJS(new parentInfoModel(undefined));
me.localGuardian=ko.mapping.fromJS(new localGuardian(undefined));
me.lastSchoolEducation=ko.mapping.fromJS(new lastSchoolEducation(undefined));
// Closing bootstrap Modal
$('modal-id').modal('hide');
// Cleaning the knockout node , to reflect the reset change 
ko.cleanNode($('#add-student')[0]);
// and binding the view model 
ko.applyBindings(app.mainViewModel, $('#add-student')[0]);
```

If we are not using below two lines of code then the modal work fine and modal got closed on clicking the close button

```
ko.cleanNode($('#add-student')[0]);
ko.applyBindings(app.mainViewModel, $('#add-student')[0]);
```

But I need to use the above two lines of code because it needs to reset my form.

Please help me with this.

Thank You

I would like to reopen issue #1489, regarding the possibility to override the standard behaviour of ko.toJS.

I'm binding a complex view model that is composed of many objects, in a tree-like structure (a simplified version below):
 ```
     item
        code
        description
        properties
           attributes
              attribute1
              attribute2
```
I would like to customize the "attributes" part of ko.toJS standard implementation.

I found this interesting [article](http://www.knockmeout.net/2011/04/controlling-how-object-is-converted-to.html), which explains how to control how an object is converted to JSON. The article is based on this assumption: JSON.stringify will check if each object has a toJSON method and execute it first, before serializing the object to its JSON representation.
Similarly, if ko.toJS implementation looked for a custom "toJS" method on each visited object, it would be easy to customize the unwrap of a specific part of the view model.

At the moment, I cannot find an easier and less performance-affecting way than adding a customized toJSON method on "attributes" view model and executing these two instructions:

```
            var json = ko.toJSON(observableItem);
            var js = JSON.parse(json);
```

Thanks!
The latest version of knockout appears to come with a Typescript definition file when install it with npm.  This definition file seems to be pretty different from the latest one in @types/knockout, and it doesn't seem to work with any of the type definitions for plugins like @types/knockout.mapping or @types/knockout.validation.  Those type definitions rely on the KnockoutStatic interface which doesn't exist in the new definition file.  Are there any good examples for how to get this to work?
I think it's better to separate the definitions for read-only computed and writable computed.
```
export interface ReadonlyComputed<T = any> extends ComputedFunctions<T> {
    (): T;
}

export interface WriteableComputed<T = any> extends ReadonlyComputed<T> {
    (): T;
    (value: T): this;
}
   
export interface ReadonlyPureComputed<T = any> extends ReadonlyComputed<T> { } 
```
(Compare [3.5.0 Regression: with-binding re-invokes given function call expression instead of using returned value](https://github.com/knockout/knockout/issues/2455) where it was reported that the `with` binding evaluates its view model expression multiple times.)

The `foreach` binding evaluates its view model expression multiple times.
https://jsfiddle.net/fastfasterfastest/y5pndfku/

The `template` binding evaluates its view model expression multiple times.
https://jsfiddle.net/fastfasterfastest/vLt6zsjg/


