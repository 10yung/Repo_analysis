Running on Ubuntu VirtualBox client underneath Windows 10 Home.

Got the following:

b] translation-task}

[Timer] Timings:
[Timer] annotate                       ---  54.1 s
[Timer] rtype_lltype                   ---  83.1 s
[Timer] pyjitpl_lltype                 --- 597.8 s
[Timer] backendopt_lltype              ---  87.3 s
[Timer] ==========================================
[Timer] Total:                         --- 822.4 s
Traceback (most recent call last):
  File "externals/pypy/rpython/bin/rpython", line 20, in <module>
    main()
  File "/home/steve/pixie/externals/pypy/rpython/translator/goal/translate.py", line 324, in main
    debug(True)
  File "/home/steve/pixie/externals/pypy/rpython/translator/goal/translate.py", line 245, in debug
    import traceback
MemoryError
Makefile:22: recipe for target 'build_with_jit' failed
make: *** [build_with_jit] Error 1

The latest addition to stdlib seems to break pixie startup. Going back allows a clean build to succeed so pixie can be started.
Pixie looks really neat.  But the Debian build I used to install Pixie on my 32-bit linux Mint machine did not work. Could someone fix and test it, if it is indeed broken?

The last instruction under "Building with Debian" at

 http://docs.pixielang.org/en/latest/getting-started.html

is "make build_with_jit". It seems to requests files from the non-existant folder "https://github.com/pixie-lang/external-deps/releases/". The session shown below should produce a file called "/tmp/externals.tar.bz2" and indeed it did, but it was not really a "bz2" file.  It was just an ascii file containing the 9 character line ""Not Found".  

Here is the session:

$ make build_with_jit
	mkdir externals; \
	cd externals; \
	curl https://bitbucket.org/pypy/pypy/get/91db1a9.tar.bz2 >  pypy.tar.bz2; \
	mkdir pypy; \
	cd pypy; \
	tar -jxf ../pypy.tar.bz2 --strip-components=1
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 16.4M    0 16.4M    0     0   607k      0 --:--:--  0:00:27 --:--:--  856k
echo https://github.com/pixie-lang/external-deps/releases/download/1.0/`uname -s`-`uname -m`.tar.bz2
https://github.com/pixie-lang/external-deps/releases/download/1.0/Linux-i686.tar.bz2
curl -L https://github.com/pixie-lang/external-deps/releases/download/1.0/`uname -s`-`uname -m`.tar.bz2 > /tmp/externals.tar.bz2
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100     9    0     9    0     0     32      0 --:--:-- --:--:-- --:--:--    34
tar -jxf /tmp/externals.tar.bz2 --strip-components=2
bzip2: (stdin) is not a bzip2 file.
tar: Child returned status 2
tar: Error is not recoverable: exiting now
make: *** [externals.fetched] Error 2

Thank you
The build process is marked as successful even when the pixie vm is faulty. This led to https://github.com/pixie-lang/pixie/issues/535. 

<img width="1037" alt="screen shot 2018-01-11 at 11 25 47 pm" src="https://user-images.githubusercontent.com/11717556/35209424-91de0f28-ff56-11e7-8a8e-d1b675f803bb.png">

I just tried compiling pixie on a Macbook Pro, macOS 10.13.2, but couldn't run the resulting `pixie-vm` executable. It crashed with the following error message: 
```
$ ./pixie-vm 
in internal function run_load_stdlib

in internal function load-ns

in internal function load-file

in internal function load-reader

RuntimeException: <inst pixie.stdlib.Keyword> Var assoc is undefined
```

Following the instructions to build the executable all I basically did was:

```
$ brew install libuv libffi boost
$ git clone https://github.com/pixie-lang/pixie.git
$ make build_with_jit
```

Here's some additional info about the installed versions:

```
$ brew info libuv libffi boost
libuv: stable 1.18.0 (bottled), HEAD
Multi-platform support library with a focus on asynchronous I/O
https://github.com/libuv/libuv
/usr/local/Cellar/libuv/1.18.0 (56 files, 2.8MB) *
  Poured from bottle on 2018-01-08 at 10:12:42
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/libuv.rb
==> Dependencies
Build: pkg-config ✔, automake ✘, autoconf ✔, libtool ✔, sphinx-doc ✘
==> Options
--with-test
	Execute compile time checks (Requires Internet connection)
--HEAD
	Install HEAD version

libffi: stable 3.2.1 (bottled), HEAD [keg-only]
Portable Foreign Function Interface library
https://sourceware.org/libffi/
/usr/local/Cellar/libffi/3.2.1 (16 files, 296.9KB)
  Poured from bottle on 2017-07-01 at 22:57:15
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/libffi.rb
==> Caveats
This formula is keg-only, which means it was not symlinked into /usr/local,
because some formulae require a newer version of libffi.

For compilers to find this software you may need to set:
    LDFLAGS:  -L/usr/local/opt/libffi/lib
For pkg-config to find this software you may need to set:
    PKG_CONFIG_PATH: /usr/local/opt/libffi/lib/pkgconfig


boost: stable 1.66.0 (bottled), HEAD
Collection of portable C++ source libraries
https://www.boost.org/
/usr/local/Cellar/boost/1.66.0 (13,101 files, 435.2MB) *
  Poured from bottle on 2018-01-08 at 10:12:59
From: https://github.com/Homebrew/homebrew-core/blob/master/Formula/boost.rb
==> Dependencies
Optional: icu4c ✔
==> Options
--with-icu4c
	Build regexp engine with icu support
--without-single
	Disable building single-threading variant
--without-static
	Disable building static library variant
--HEAD
	Install HEAD version
```

Any idea what caused this?
  
Hi, as I've been playing around with Pixie, there have been several times when I have wondered what something did, and only been able to find sufficient docs in a Clojure counterpart. I was wondering how one could go about updating the [readthedocs](http://pixie-lang.readthedocs.io/en/latest/) page for future reference/new users?

I am a college student in between my freshman and sophomore years of school, and I am interested in helping improve the projects I find most interesting.

Any help would be much obliged.
Added watches and `compare-and-set!` as requested in issue #424 
Includes a protocol `IWatch` with method `-with-watch`.

I'm still writing the tests, so the changes are still provisional.
Here is a basic example:

```
(ns bad.performance.test
  (:require [pixie.time :as time]))

(println "No issue")
(dotimes [i 10]
  (t/time (reduce (fn ([_ _] nil)) nil (range 10000000))))

(println "Multi-arity issue")
(dotimes [i 10]
  (t/time (reduce (fn ([_ _] nil) ([_])) nil (range 10000000))))  
```

The output is below:

```
"Elapsed time: 36.200522 ms"
"Elapsed time: 28.493774 ms"
"Elapsed time: 32.007228 ms"
"Elapsed time: 32.310871 ms"
"Elapsed time: 31.159702 ms"
"Elapsed time: 30.122666 ms"
"Elapsed time: 27.858281 ms"
"Elapsed time: 27.836514 ms"
"Elapsed time: 29.166467 ms"
"Elapsed time: 29.809780 ms"
Multi-arity issue
"Elapsed time: 255.087997 ms"
"Elapsed time: 294.007728 ms"
"Elapsed time: 336.469480 ms"
"Elapsed time: 369.489639 ms"
"Elapsed time: 433.686057 ms"
"Elapsed time: 539.577651 ms"
"Elapsed time: 654.685995 ms"
"Elapsed time: 776.953019 ms"
"Elapsed time: 1090.215928 ms"
"Elapsed time: 835.943882 ms"
```

The performance seems to constantly degrade when a multi-arity fn is used.
the current 0.1 release is over a year old, and doesn't have the `libm.so` fix, so it's broken for me on arch linux
Installed pixie today (20160113).  Version is 1.0.  Got the following error.  Running an x64 system with ~ 4 GB RAM on Ubuntu 16.04.1 LTS.

---

steve@steve-Satellite-L555D:~/pixie$ pixie generate-docs.pxi 
==============
Error:  in internal function load-file

in internal function load-reader

Running: (let [[namespace] program-arguments] (println ==============) (println (name namespace)) (println ==============) (load-ns (symbol namespace)) (println) (doseq [[k v] (ns-map (the-ns namespace))] (println (name k)) (println ====================================) (println) (if-let [m (meta (-deref v))] (do (if-let [doc (:doc m)] (println doc) (println No doc available :()) (println) (when-let (examples (:examples m)) (println **Examples:**) (doseq [[code _ result] examples] (println) (println code) (println) (when (not (nil? result)) (println =>  result))) (println)) (when-let (signatures (:signatures m)) (println **Signatures:**) (println) (doseq [sig signatures] (println (str -  sig))) (println)) (when (and (:line-number m) (:file m)) (let [file (str pixie/ (last (string/split (:file m) /)))] (println (str http://github.com/pixie-lang/pixie/blob/master/ file #L (:line-number m)))) (println))) (println No meta data available :()) (println)))
in generate-docs.pxi at 5:1
(let [[namespace] program-arguments]
^
in pixie function _toplevel_

in generate-docs.pxi at 8:12
  (println (name namespace))
           ^
in internal function name

in polymorphic function -name dispatching on pixie.stdlib.Nil

RuntimeException: :pixie.stdlib/AssertionException No override for pixie.stdlib.Nil on -name in protocol INamed

steve@steve-Satellite-L555D:~/pixie$ 
