This is almost similar to #46 and the work done in #106, but I think it should be somewhat genericized.

Specifically, I'm using `prettytable` for an IRC bot, and IRC uses a different kind of format for colors: `/\x03([\d]{2}(,[\d]{2})?)?/` is a rough estimate of the regex involved, but essentially I may print something that, raw, looks like `\x0313foo\x03`, which shows up as `foo` but in pink. Notice that the two unprintable characters are fine here, but there are two _usually printable_ characters (`13`) whose purpose is overriden and "eaten up" by the IRC client when formatting.

As a result, if I try to use this in a table, my columns will be missing two characters when it comes to padding because the display width is calculated to be 2 characters longer than it should be. Now, I don't think we should put an IRC color formatting regex in there for all purposes since not everyone would be using it. Perhaps it could be added as a crate feature?
Hi!

First of all, thanks for providing the library! I really appreciate your work :)

I've been wondering, if there is some kind of functionality or mabye an example on how to handle cells with multiline text and unknown text length. The current multiline-example only shows hardcoded newlines.

When having long strings in your table, this starts to look ugly really fast:
![image](https://user-images.githubusercontent.com/3322822/71096998-97eb6000-21af-11ea-90ea-e8e51be4cef7.png)

Hi,

This PR allow to generate tree-line for each row, then user can display it into any cell and produce some kind of tree table like:

```txt  +-------------+------------+
  | Title 1     | Title 2    |
  +-------------+------------+
  | 1           | A          |
  | ├─ 2        | B          |
  | │  └─ 3     | C          |
  | └─ 5        | Z          |
  | 6           | Z          |
  | 7           | Z          |
  | ├─ 8        | Z          |
  | └─ 9        | Z          |
  +-------------+------------+
```
I'm open to any change that should be done to better match the current state of the project (naming, examples, doc).
This PR does not contain any code changes. Only `cargo fmt`.
The `term` crate is unmaintained: https://github.com/Stebalien/term/issues/93
Allows printing tables as markdown tables:

```
| Title 1     | Title 2    |
|-------------|------------|
| Value 1     | Value 2    |
| Value three | Value four |
```

| Title 1     | Title 2    |
|-------------|------------|
| Value 1     | Value 2    |
| Value three | Value four |

The program below produces garbled output:

main.rs:

    use prettytable::{Table, format, cell, row};

    fn print_table(s: usize) {
        let mut table = Table::new();
        table.set_titles(row![c => "num"]);
        table.set_format(*format::consts::FORMAT_NO_LINESEP_WITH_TITLE);
        for i in s..s+100 {
            table.add_row(row![i]);
        }
        table.printstd();
    }

    fn main() {
        rayon::join(|| print_table(0), || print_table(1000));
    }

Cargo.toml:

    [package]
    name = "prettytabletest"
    version = "0.1.0"
    edition = "2018"

    [dependencies]
    prettytable-rs = "*"
    rayon = "1.0"

How to update the table and the terminal not scrolling， Editing table in place
> Pull request referring to the issue #109 

Sorry for the mess that I've made trying to improve the `TableElem` method removing `&self` from `get_field_name`
The code is already rebased. This should be a kind of final code which is the results of the previous commit and pull request https://github.com/phsym/prettytable-rs/pull/110
I thought to implement something to make pretty table smarter adding a proc_macro and a macro. Below an initial version of code:

`lib.rs`
```
extern crate proc_macro;

use proc_macro::TokenStream;
use quote::quote;
use syn::{parse_macro_input, ItemStruct};

#[proc_macro_derive(TableElem)]
pub fn derive_table_elem(input: TokenStream) -> TokenStream {
    let parsed_input = parse_macro_input!(input as ItemStruct);

    let struct_name = &parsed_input.ident;
    let field = &parsed_input.fields;

    // Get struct field name
    let f_name_str: Vec<String> = field
        .iter()
        .map(|f| f.ident.clone().unwrap().to_string())
        .collect();

    let f_name: Vec<syn::Ident> = field.iter().map(|f| f.ident.clone().unwrap()).collect();

    TokenStream::from(quote! {
        pub trait TableElem {
            fn get_field_name(&self) -> Vec<&'static str>;
            fn get_field(self) -> Vec<String>;
        }

        impl TableElem for #struct_name {
            fn get_field_name(&self) -> Vec<&'static str> {
                vec![#(#f_name_str),*]
            }

            fn get_field(self) -> Vec<String> {
                vec![#(self.#f_name.into()),*]
            }
        }
    })
}
```

`main.rs`
```
use macros::TableElem;
use prettytable::{format, Cell, Row, Table};

#[derive(TableElem)]
struct NameStruct {
    name: String,
    surname: String,
}

fn construct_table<T: TableElem>(v: Vec<T>) -> Table {
    // Create the table
    let mut table = Table::new();

    table.set_titles(Row::new(
        v.first()
            .unwrap()
            .get_field_name()
            .iter()
            .map(|f| Cell::new(f))
            .collect(),
    ));
    table.set_format(*format::consts::FORMAT_NO_LINESEP_WITH_TITLE);

    v.into_iter().for_each(|r| {
        table.add_row(Row::new(
            r.get_field().iter().map(|elem| Cell::new(elem)).collect(),
        ));
    });

    table
}

macro_rules! print_as_table {
    ($v: ident) => {
        construct_table($v).printstd();
    };
}

fn main() {
    let t: Vec<NameStruct> = vec![
        NameStruct {
            name: "name_1".to_string(),
            surname: "surname_1".to_string(),
        },
        NameStruct {
            name: "name_2".to_string(),
            surname: "surname_2".to_string(),
        },
    ];

    print_as_table!(t);
}
```
Of course the previous code can be improved but I prefer get a feedback before make a pull request.