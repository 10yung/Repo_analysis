Fixes #157 

Hardened runtime prohibits relative paths when looking up libraries. This change makes the path to libjli.dylib absolute, allowing the signed app to run.
As of macOS Catalina, apps signed with a new Developer ID need to have the hardened runtime enabled to run as per https://developer.apple.com/documentation/xcode/notarizing_macos_software_before_distribution.

If the app created by packr is signed with the hardened runtime enabled, the app will halt when running, producing this error:
```
dlopen(jre/lib/jli/libjli.dylib, 1): no suitable image found.  Did find:
	file system relative paths not allowed in hardened programs
Error: failed to load VM runtime library!
```


Using openjdk14 I get a `"dlopen(jre/lib/jli/libjli.dylib): image not found"` error which fails the launch of the jvm.

I think this is an error specifically for later jre's because when I look back at my jre 1.7.x it contains the file specified.

Any thoughts for solving this? Thanks
I was compressing ojdk version 201 which is mentioned in Packr github . Due to incompatibility between 8u60+ versions and Intel Sandy bridge processors I have to downgrade to 8u45 , I downloaded the jdk from oracle and ran packr on it but the extracted jre is unable to start my windows application . Error : jvm.dll is missing cannot run application . !! Need help . 
When I run this tool in a folder that already contains files, it completely deletes them after building the file. This should be fixed. 
Hi there,

I can't run my builded app. After clicking on .exe file nothing happens but process is run ( found in Task Manager ).

I use Amazon Correto JDK 11 for Windows: [link](https://docs.aws.amazon.com/corretto/latest/corretto-11-ug/downloads-list.html)

and JavaFX 11: [link](https://gluonhq.com/products/javafx/)

Config: 

```
{
    "platform": "windows64",
    "jdk": "C:\\Program Files\\Amazon Corretto\\jdk11.0.4_10",
    "executable": "my-simple-app",
    "classpath": [
        "my-simple-app-1.5.jar",
        "C:\\dev\\java\\library\\javafx-sdk-11.0.2\\lib",
        "C:\\dev\\java\\library\\javafx-sdk-11.0.2\\bin"
    ],
    "mainclass": "my.simple.app.MainApp",
    "vmargs": [
        "---module-path lib",
        "---add-modules javafx.controls,javafx.fxml"
    ],
    "output": "my-simple-app-out-win"
}
```

After build command: 

```
java -jar packr.jar config.json
```

and enter the build folder: 

```
cd my-simple-app-out-win
```

I can run the jar with command: 

```
java --module-path .\lib\ --add-modules javafx.controls,javafx.fxml -jar .\my-simple-app-1.5.jar
```


but running exe doesn't work.


Please help :)

After upgrading from openjdk 11.0.2 to openjdk 12.0.2, the generated executable for MacOS will not launch.  Running the executable from a terminal displays the following error message prior to exit:
```
dlopen(jre/lib/jli/libjli.dylib, 1): image not found
Error: failed to load VM runtime library!
```

In openjdk 12.0.2, the location of this dynamic library was moved from jre/lib/jli/libjli.dylib to jre/lib/libjli.dylib.  The jli subdirectory no longer exists.

The root cause appears to be the following line in packr_macos.cpp.  

https://github.com/libgdx/packr/blob/96c609388fb011589acbddd18c9d3d2f77e32806/src/main/native/packr/src/macos/packr_macos.cpp#L113

Manually creating the jli subdirectory and then adding a symbolic link libjli.dylib -> ../libjli.dylib in the jre is a temporary workaround to this issue.  However, attempting to create the symbolic link within the target jre prior to running packr caused packr to fail while copying the jre.   What works is to create the symbolic link within the packr generated output <appname>.app/Contents/Resources/jre prior to running pkgbuild to create the installer.
Both has jre issue, 

packr examples ask zip for JDK. I downloaded jdk-8u221-linux-i586.tar.zg and jre-8u221-macosx-x64.tar.gz from Oracle. I converted both to zip. 

Run json to get issues:  

For Mac:
Downloaded jre-8u221-macosx-x64.tar, then converted it to zip. The structure of zip is: 
   jre-8u221-macosx-x64.zip -> jre1.8.0_221.jre (folder) -> Contents  -> Home (folder), MacOS (folder), info.plist. Home has jre contents like bin, lib, etc. 

Got error message: 
   java.io.IOException: Couldn't find JRE in JDK, see 'C:\docs\packr\out-mac\Contents\Resources\tmp'

Can someone help for a clue? 



Related StackOverFlow question: https://stackoverflow.com/questions/57507676/packaging-libgdx-program-to-exe-with-packr-breaks-code-which-opens-url-stream

In my program LibGDX program, I obtain the user's IP by contacting https://api.ipify.org. I tried using both LibGDX HTTP methods and standard Java URL methods. The code works when I run the jarfile directly, but causes the app to exit when I run the exe

I compiled and packaged my app with JDK 11.0.1. I manually created the jre folder which Packr looks for and copied bin and lib into it. Here's the Packr config I used:
```json
{
    "platform": "windows64",
    "jdk": "C:\\Program Files\\Java\\jdk-11.0.1",
    "executable": "ShengJi-win64",
    "classpath": [
        "desktop-1.0.jar"
    ],
    "removelibs": [
        "desktop-1.0.jar"
    ],
    "mainclass": "com.sage.shengji.desktop.DesktopLauncher",
    "minimizejre": "soft",
    "output": "out-windows64"
}
```
This code, in the show() method for one of my Screens, doesn't work when I run the exe:
```java
            Net.HttpRequest httpGet = new Net.HttpRequest(Net.HttpMethods.GET);
            System.out.println("After httpGet object creation");
            httpGet.setUrl("https://api.ipify.org");
            System.out.println("After set httpGet url");

            Gdx.net.sendHttpRequest(httpGet, new Net.HttpResponseListener() {
                @Override
                public void handleHttpResponse(Net.HttpResponse httpResponse) {
                    System.out.println("in handleHttpResponse()");
                }

                @Override
                public void failed(Throwable t) {
                    System.out.println("in failed()");
                }

                @Override
                public void cancelled() {
                    System.out.println("in cancelled()");
                }
            });
            System.out.println("After Gdx.net.sendHttpRequest()");
```
It works as intended when I run the jarfile directly. However, when I run the exe and print to a log file, "After Gdx.net.sendHttpRequest()" is never printed, and neither are any of the print statements in the HttpRequestListener's methods. As far as I can tell, the rest of the app works fine with the exe. When I put the faulty code in a separate thread, the app does not close and all other parts seem to work correctly.
I decided to save the outputed executable to my desktop. This shouldn't seem too unusual. What was unusual was when packr said something along the lines of "cleaning up directory" it wiped all links, files, and folders from my desktop. Why is there no warning that unrelated files might be tampered with? Why does packr assume it's saving to an empty folder? This was very frustrating to deal with.