Couple of points:
* Rdoc did not highlight a code block that had naked <code>{}</code>, so I used forms of <code>Hash</code> instead.
* Multiline message did not format well as <code># =></code> output, so I put it into a separate code block.
Thinking of adding these, but won't if The Powers That Be think it's unnecessary.

Personally, I agree with:

> If it goes without saying, it goes all the better for saying it. -- _Tallyrand_


This commit explicitly forwards kwargs to remove the warning, and adds a test to assert that it was silent.
Hello to all!

Ruby version - 2.3.4p301
Rails version - 5.0.7.2
Gemfile screenshot - http://i.imgur.com/tzQ2NdR.png
part of test_helper.rb - http://i.imgur.com/WxYEhux.png
failed test when run all of them together - http://i.imgur.com/PgjHnu5.png
If i run those failed tests all of them pass - http://i.imgur.com/6HCyHR7.png

I don't any idea how to fix this. Is there any way to fix this?

thanks in advance ...
This is a fix for #814 that should make the #791 case look good as well. The basic idea is to *only* unescape real newlines, and leave everything else as-is. I think this is the method that gives the least surprising results.
Because of the fix for #791, a multi-line string that contains `\\n` anywhere will no longer be diffed properly. For example:

```ruby
require 'minitest/autorun'

describe "foo" do
  it "bar" do
    foo = "very long text\nwith some\nescaped backslash\\nin it\nand more text"
    bar = "very long text\nwith some\nescabed backslash\\nin it\nand more text"
    assert_equal foo, bar
  end
end
```

Results in:
```
Failure:
foo#test_0001_bar [foo.rb:7]:
--- expected
+++ actual
@@ -1 +1 @@
-"very long text\nwith some\nescaped backslash\\nin it\nand more text"
+"very long text\nwith some\nescabed backslash\\nin it\nand more text"
```

This makes it hard to actually see where the difference is.

With minitest 5.11, I get the following, which is indeed also not quite right, but better for figuring out the difference:

```
  1) Failure:
foo#test_0001_bar [foo.rb:7]:
--- expected
+++ actual
@@ -1,5 +1,5 @@
 "very long text
 with some
-escaped backslash\
+escabed backslash\
 in it
 and more text"

```
```
if an object has its own warn method, Deprecation warnings may have unexpected results.

An old legacy class of mine has warn defined and it accepts 0 arguments. This deprecation warning results in: ArgumentError: wrong number of arguments. Also, the actual depecration warning is not printed, so the results are, confusing to say the least.


<img width="1107" alt="image" src="https://user-images.githubusercontent.com/570991/67429660-ea116a00-f5e0-11e9-8d95-cf5234a8933b.png">

After stubbing a method not really defined, but the module (probably will behave the same for classes) accepts a message (respond to...) and it's managed by meta-prorgramming used "method_missing" then the unstubbing is not working because the stubbed method is still there.

This fix the behaviour, ensuring after the stubbing block the stubbed method is removed and calls to "respond_to..." are called as usual.
Possible fix for https://github.com/seattlerb/minitest/issues/794

## Why
This PR takes the basic idea from https://github.com/blowmage/minitest-rails/pull/218 and applies it upstream to minitest. I think this problem is not necessarily specific to rails - it would be a problem with any parallel executor that uses DRb to synchronize parallel test runs across multiple processes. It feels like the fix belongs in minitest itself (since fixing it elsewhere requires monkey-patching minitest). Fixing it upstream also allows other gems like [minitest-spec-rails](https://github.com/metaskills/minitest-spec-rails) to take advantage of it.

## How
This change defines a unique constant for every spec class which will
allow them to be marshalled/unmarshalled and sent over the wire with DRb.

