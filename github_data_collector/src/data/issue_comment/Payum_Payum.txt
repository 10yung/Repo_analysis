# Todo
- [ ] Fix all warnings
- [X] Fix "Unsilenced deprecation notices"

Hi,

This fixes few deprecation notice that make Travis-Ci fail... 

Meanwhile, could you please merge #801 please?

BR
My software used an old home-made Paypal implementation, which allowed payments in both Express Checkout mode and with the Website Payment button with IPN.

I am reimplementing it all from the scratch using Payum because I need to support other X payment gateways, but first I need to seamlessly restore Paypal for existing customers and their current configs.
Express Checkout is not a problem, but I did not understand how I can restore what Website Payment Standard did. The main problem is that WPS could only use the merchant's email address - which I already have - and not the api keys; I would not have to contact dozens of customers and explain how they should recover the api keys from Paypal and save them into my software, but I'd gladly avoid all this unless absolutely necessary.

It seems to me that Payum does not support WPS and I will have to write a specific gateway. Basically it should just render a form with hidden fields (business, amount etc.) and a submit button to paypal.com/cgi-bin/webscr, then catch the IPN, validate and postback. It can be done?


A bug in CreateChargeAction.php (namespace Payum\Stripe\Action\Api) : 

Solved by : In line 70, replace "$charge->__toAttay" by "$charge->toArray"
![image](https://user-images.githubusercontent.com/48434889/68953133-8df5cc00-07c1-11ea-999c-78a548c35110.png)

I want to submit my form with caredit card details but when i submit the form it redirect me to another form with credit card fields. How can i use my form and paypal to process submited data and redirect me to the doneAction?

And i have second question: I try this from payum documentation that gateway config has  2 fields that i don't know what values to pass. These fields are partner and vendor.

If I should provide more information to reproduce the issue please write me. 
Thank you in advance.

Regards,
Ivan Atanasov
 
Gateway config:
`
payum:
    gateways:
        paypal_pro_checkout_credit_card:
            factory: paypal_pro_checkout
            username: 'my_sandbox_account.business.example.com'
            password: 'password'
            partner:  'EDIT ME'
            vendor:   'EDIT ME'
            tender:  C
            sandbox: true
`

My prepare method look like:
`
public function prepare( $request )
{
        $form->handleRequest( $request );
        if ( $form->isSubmitted() ) {
            $data = $form->getData();
            $storage = $this->getPayum()->getStorage( PaymentDetails::class );

            $payment = $storage->create();
            $payment['ACCT']        = new SensitiveValue( $data['acct'] );
            $payment['CVV2']        = new SensitiveValue( $data['cvv'] );
            $payment['EXPDATE']     = new SensitiveValue( $data['exp_date']->format( 'my' ) );
            $payment['AMT']         = number_format( $data['amt'], 2 );   // Amount
            $payment['CURRENCY']    = $data['currency'];
            $storage->update($payment);

            $captureToken = $this->getPayum()->getTokenFactory()->createCaptureToken(
                'paypal_pro_checkout_credit_card',
                $payment,
                'ia_payment_paypal_done'
            );
            
            return $this->redirect( $captureToken->getTargetUrl() );
        }
}
`
I try add to config payum evens extension

```
payum.extension.event_dispatcher:
  class: Payum\Core\Bridge\Symfony\Extension\EventDispatcherExtension
  arguments: ["@event_dispatcher"]
  public: true
  tags:
    - { name: payum.extension, all: true, prepend: false }
```


get error

Argument 1 passed to Payum\Core\Gateway::addExtension() must implement interface Payum\Core\Extension\ExtensionInterface, string given, called in /application/vendor/payum/core/Payum/Core/CoreGatewayFactory.php on line 249
Allows to set PayPal configuration by handling an array to the factory instead of relying on config_path to parse PayPal's skd_config.ini.

Also updates composer.json - paypal sdk version to match PayPal Rest composer requirements.

Tests are fine (locally) - although Travis reports them as failing (or incomplete)