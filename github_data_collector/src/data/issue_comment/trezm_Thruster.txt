Hello and thanks for working on Thruster!
I have been experimenting with various Rust web frameworks over the past few days to potentially replace my usage of Rocket. So far Thruster has been one of the more promising candidates. I love the simplicity of the API and how easy it is to create, manipulate and pass around the `App` type.

I have a few questions on how to use the framework correctly:

- Is the best/only way to serve static files to write a middleware which loads the entire file in memory and calls `context.body(entire_file_content)`? This seems very inefficient if that is the case :(
- Also on the subject of serving static files, how would you recommend matching the trailing portion of a route? For example, let's say I want to make all URL starting with `/swagger` to serve the corresponding files in a `./docs` directory on disk. For instance, hitting `/swagger/img/logo.png` should serve `/docs/img/logo.png`
- When using `App::create`, it would be very useful if it was possible to pass in a closure as the `generate_context` argument. As it stands, I am not sure how to shove any data that is determined during application startup into the context objects. EDIT: I guess this is the answer: https://github.com/trezm/Thruster/issues/130

Many thanks in advance!




Getting many errors, compiling with latest stable:

![image](https://user-images.githubusercontent.com/817256/72661170-0dec0e00-398c-11ea-97dc-29221b79eab4.png)

Are there plans to allow storing application state in some form? Like an R2D2 connection manager that can be used within routes to retrieve a database session?
Thruster should be able to have have gRPC support like [tonic](https://github.com/hyperium/tonic). Update this issue with more details as they evolve.
Would love to get the home-grown implementation of an http encoder/decoder more in line with hyper's perf. 

For perf focused users, you can now easily use Hyper as the backend, but it would be nice to be on level playing fields in the future.
Hi!
I would like to share a state between requests storing it into request context.

The proposal is to create a new trait that implements a method `generate` 

```
pub trait ContextGenerator {
    fn generate(req: R) -> T;
}
```

The change is about 

- create a new constructor
- create a basic implementation of ContextGenerator in order to support the older constructor
- https://github.com/trezm/Thruster/blob/9ddae50167e3332fdea23bedfc1a36fff579b5a2/src/app.rs#L87

- https://github.com/trezm/Thruster/blob/9ddae50167e3332fdea23bedfc1a36fff579b5a2/src/app.rs#L103

- https://github.com/trezm/Thruster/blob/9ddae50167e3332fdea23bedfc1a36fff579b5a2/src/app.rs#L196

While using the hyper server, this should already be possible. This is the tracking issue to make that support first class, along with an example and short guide.

Ideally the upgrade for the socket will be handled via a single middleware function, but we should consider the following:

- [ ] Should each socket be stored in a static map somewhere for reference later?
- [ ] Should we also have first class support for socket.io?