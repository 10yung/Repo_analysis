All of my images are removed after minify along with `robots.txt`. 

Its not easy to manually transfer images because I have folder of images for each blog post. All folders themself are missing after minify.

Is there option to keep them?
Adds more options to install.sh, mainly:

- _Bash_ completion directory _pseudo-detection_
- Possibility to use custom _bash_ completion directory
- Get completion file from a [_https://git.io_](https://git.io/minify-completion.bash) url -> always up-to-date
- Enables static linking option using `CGO_ENABLED=0` when `--static` is passed as first argument
- Strip binary after compilation
Add binary minifiers for SFNT formats (TTF, OTF, WOFF, WOFF2, EOT) and image formats (PNG, JPEG, ...).
This issue is similar to #89, but for font-awesome (or similar) icons.

`Made with <i class="fa fa-heart"></i> and <i class="fa fa-coffee"></i>`

is converted to

`Made with <i class="fa fa-heart"></i>and <i class="fa fa-coffee"></i>`

How can I preserve the space between the _heart-icon_ and the word _and_ ?
Also see https://github.com/tdewolff/parse/issues/44

- [x] <del>Rename `MinifyMimetype` to `MinifyBytes` or similar, and accept `[]byte` instead of `io.Reader`, make all other functions that explicitly convert to `buffer.NewReader(b)` to use this new function. Keep the original `MinifyMimetype` but mark as deprecated.</del> unlikely due to insignificant performance gain
- [x] SVG paths: use `S`, `Q`, `T`, `L` or remove if (some) control points coincide for curved paths.
- [x] CSS: shorten dimensions, for example `200grad` -> `180deg`. But also `0ms` -> `0s` and `500ms` -> `.5s` or `.005s` -> `5ms`.
- [x] CSS: take care of comma separations in `background`
- [x] CSS: filter declaration blocks for duplicate property definitions, i.e. remove earlier `background-position` if either `background` or `background-position` is set afterwards
- [ ] CSS: remove `%` from `0%` where possible
- [ ] CSS: minify aggregate declarations better, such as `grid`, `transition`, ...
- [ ] CSS: find where the initial value is shorter than `initial`
- [ ] CSS: remove dimension for zero values if possible
- [ ] CSS: check if remove duplicate property definitions can be removed (see multiple `background` with `-moz-linear-gradient`, `-ie-linear-gradient`).
- [ ] CSS: add implementation for more functions and value types, for example `calc`, `min`, `max`, `clamp`, `transform` + related functions in with (https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function), `linear-gradient` (ie. the `<gradient>` type) (https://developer.mozilla.org/en-US/docs/Web/CSS/gradient), and more.
- [ ] CSS: find more optimizations from https://cssnano.co/optimisations/ and https://github.com/css/csso/tree/master/test/fixture/compress
- [x] <del>cmd: refactor and separate reusable code</del>
- [x] <del>cmd: allow options input from command line, config file and environment variables</del>
Hi,

I just noticed that if I have a "Type" field in my data struct and use minify for my go template files, it lowercases "Type".

So this:

``` html
<option value="0" {{ if eq .Type 0 }}selected{{ end }}>Foo</option>
```

Becomes this:

``` html
<option value=0 {{ if eq .type 0 }}selected{{ end }}>Foo</option>
```

And it seems like it's not possible to use text/template and minify for a javascript file together, does it? I know, that's probably quite an edge case :)

EDIT: Just tested this, doesn't work unfortunately, but I could still use minify as a package and minify the generates JS, so that's not too much of a problem for my case.

Not sure if it's on your road map but source maps would be nice.

Competing tools already support them:
- https://www.npmjs.com/package/clean-css
- https://github.com/mishoo/UglifyJS2

Personally I don't care so much about CSS source maps, but its pretty vital for Javascript debugging. Unfortunately source map generation can be tricky, especially when merging multiple files or going through several layers. (coffescript -> javascript -> merged javascript -> compressed javascript)

Write a JS parser to enable:
- Usage of ASI (automatic semicolon insertion) to reduce newlines and semicolons.
- Shorten variable names and function parameters when possible (ie. Closure Compiler simple mode; prohibit `eval` and `toString`), see https://ariya.io/2011/08/javascript-minifier-and-variable-renaming
- Correct for https://github.com/twbs/bootstrap/issues/3057

~~Still keep the current fast JSMin-inspired version?~~

It would be awesome if you'd consider donating through [Patreon](https://www.patreon.com/tdewolff) or [PayPal](https://www.paypal.me/tdewolff) so that I can free up time to implement a much improved JS minifier.