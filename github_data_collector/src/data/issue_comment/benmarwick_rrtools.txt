[As suggested by](https://github.com/benmarwick/rrtools/issues/91#issuecomment-569934699) @nevrome , I've created a PR relevant to issue #91 . Thanks.
Word of warning: This issue came up at an interesting talk by @annakrystalli. I have no time to help out, but she encouraged me to post this regardless.

The gold standard for reproducibility in software is to be able to produce bitwise identical outputs. If we can produce an artifact with the exact same checksum as the artifact published online, we are pretty sure to have reproduced it.

When using `rrtools` to produce papers in PDF, the template
https://github.com/benmarwick/rrtools/blob/6bbe6c2cd8a9f2df0de1326acde1cc4b9b5eab07/inst/templates/paper.Rmd
is inadequate for making the PDF reproducible in the above sense of being bitwise identical. This is largely because of the presence of timestamps inside the PDF. There are ways to overcome this (see: https://tex.stackexchange.com/questions/229605/reproducible-latex-builds-compile-to-a-file-which-always-hashes-to-the-same-va/313605#313605). It would be nice if `rrtools` provided support for this. It must be possible to convince bookdown to include a few extra lines in the intermediate LaTeX code.
Word of warning: This issue came up at an interesting talk by @annakrystalli. I have no time to help out, but she encouraged me to post this regardless.

Consider a hypothetical library X that, in version 1.0.0 contains an obscure bug where `0.5683/0` evaluates to `-infinity`, in violation of IEEE754. From the perspective of the library developers, this is a silly bug and a new version is released quickly, where `0.5683/0` evaluates to `+infinity`. Despite https://xkcd.com/1172/, this is seen as an improvement in adhering to documented behavior, so the new release gets version number 1.0.1 (bug fix) and not 2.0.0 (breaking change).

If we look at https://github.com/benmarwick/rrtools/blob/58e842ee6bc2067fd4046fa50766b5691a66655e/inst/templates/Dockerfile#L13 we see that this new version will likely be picked up by our docker image as soon as it finds its way to the repositories. The result is that we may no longer be able to reproduce something done with X v1.0.0 anymore. In other words, reproducibility requires bug-for-bug compatibility with the original environment and `apt-get update` breaks this.

**The Bug**
Ideally, `rrtools` should refer to frozen repositories or otherwise limit the possible impact of `apt-get update`.

**The Feature Request**
Perhaps not as part of `rrtools`, but it would be nice if there was a tool that could take a compendium, analyze the software+version that is used in it, and warn the author(s) if any of the used software is known to contain a (numerical) bug. We do not want outcomes to be skewed by software errors, but there is very little to protect us from them.
**Please wait for some discussion of your report before making a Pull Request.**

**Describe the bug**
circleci does not build due to the wrong url. it has a repeated "//" in it

> * Turn on circleci for your repo at https://circleci.com/gh//wolass
>   and add your environment variables: DOCKER_EMAIL, 
>   DOCKER_USER, DOCKER_PASS.

see the "gh//wolass" <- this needs to read "gh/wolas"

**To Reproduce**

1. Start a new project using the rrtools methods described in the https://github.com/benmarwick/rrtools/blob/master/README.md file. 
2. in step 6. after using ` rrtools::use_circleci(docker_hub = FALSE)` you will reproduce the error
3. The webpage will open with a wrong address - 404 error


**Expected behavior**

One should expect that the repo will be visible in circleci  under the proper address and the the webpage that is getting open is not containing repeated //
**Please wait for some discussion of your request before making a Pull Request.** 

**Is your feature request related to a problem? Please describe.**
When authoring papers in the `rrtools` pipeline I end up producing a one DOCX file with all the figures included. The problem is that the numbering of the figures is consecutive for supplementary figures and I always have to post-process the file by hand in order to correct numbering of supplementary figures (as these usually start with Suppl. Fig 1). 

**Describe the solution you'd like**
I would like to separate the numbering of main figures from the supplementary figures. Preferably we could use something like `\@ref(sfig:supplementaryfigurexyz)`

**Describe alternatives you've considered**
I have posted this problem on the Stackoverflow page
https://stackoverflow.com/questions/57753758/how-to-add-a-cross-reference-supplementary-figures-in-bookdown-knitr-rmarkdown

but with no luck ...

do we have a unified approach for this issue that can be used in the `rrttools` pipeline?

**Additional context**

**Describe the bug**
The function create_compendium("pkgname") doesn't check whether "pkgname" already exists. If pkgname is a folder, the package is merged with an existing folder. If pkgname is a file, an error occurs.

**To Reproduce**
1. In terminal, create file '~/Desktop/pkgname'
2.
```R
> create_compendium('pkgname')
Error in writeLines(c("cat(crayon::bold('\nThis project was set up by rrtools.\n'))",  : 
  cannot open the connection
In addition: Warning messages:
1: In dir.create(path) : 'pkgname' already exists
2: In writeLines(c("cat(crayon::bold('\nThis project was set up by rrtools.\n'))",  :
  cannot open file 'pkgname/.Rprofile': Not a directory
>
```

**Expected behavior**
Check whether 'pkgname' already exists and if it does, stop. 
I'm curious to see if others think this would be valuable to this package. Thanks!

**Is your feature request related to a problem? Please describe.**
I want to use `rrtools` and host my remote repository on GitLab, not GitHub. Currently, there are no convenience functions to make this happen (nor to change all instances of `github.com` to `gitlab.com` (e.g., in the `README.Rmd`)).

**Describe the solution you'd like**
Offer users a convenience function, `rrtools::use_gitlab` that is analogous to `usethis::use_github(credentials = git2r::cred_ssh_key(), auth_token = "xxxx", protocol = "https", private = FALSE)` doing the following:

- `git push --set-upstream`
- `git remote add origin`
- set up `.gitlab-ci.yml` (GitLab does their own Continuous Integration and Continuous Development (CI/CD))
- use default `Dockerfile` in that `.gitlab-ci.yml` (so you can reproduce the outputs using `docker` rather than `gitlab-runner`)
- update the ~dozen lines that refer to GitHub or github.com

Outside this convenience function, other changes may be necessary:
- update the `rrtools::use_travis()` function to alert the user to possible duplication and allow an off-ramp if GitLab CI/CD already covers the user's needs
- update the `rrtools::create_compendium()` function to ask if GitHub or GitLab
- update the `README.Rmd` on `rrtools` to alert people that you can do `rrtools::use_gitlab()` to do in a single step what is currently represented as steps (3b) `usethis::use_github`, (6) `rrtools::use_dockerfile()`, and (7) `rrtools::use_travis()`

**Describe alternatives you've considered**
I could attempt to request this feature in the `usethis` package rather than here, i.e., `usethis::use_gitlab`. My sense, however, is that this is fairly simple to start a new repository by simply calling some `system()` functions although, at the same time, I see that `usethis::use_github` is ~70 lines with at least 6 checks that the function can appropriately succeed.

Also, if `rrtools` uses the hypothetical `usethis::use_gitlab()`, it may be difficult to wrap into a single step what is currently represented as steps (3b) `usethis::use_github`, (6) `rrtools::use_dockerfile()`, and (7) `rrtools::use_travis()`.

**Additional context**
NA

Hi guys! 
I've been using rrtools for every project/paper in the last 2 years. 

I love it and it gets better and better. 

The problem I have right now is that by making all the statistical  (preliminary) analysis I am bloating up the files quite a bit. 

I do not want to increase the size of the `paper.Rmd` file unnecessarily, but on the other hand, I don't know if my preliminary statistical analysis will make it into the final version of the paper. 

So one potential approach would be to split up the code into multiple files (that are parts of the data analysis and paper writing process).

Here is an example:

Let's say that we want to do logistic regression on our database, do multiple models and choose only one, produce a preliminary figure and a publication-ready figure. 

we start as usual with our rrtools process up to the make_analysis part. 

NEXT (and this is the enhancement I am talking about), 

1. we create a bunch of .R files:  `load_data.R`, `data_wrangling.R`, `statistical_analysis.R`, `figures.R`
2. In each file we already should have a structure with an example function.
JUST REMEMBER that these files need to be FUNCTIONS.
so it would go like that

the contents of `load_data.R`
```
load_data_from_source(){ # notice - no arguments#
  #user-defined input here
  return(read_csv("source_data.csv"))
}

```

The above example shows that we could use functions in R scripts to easily incorporate them in the paper.Rmd file 

Then we do the next step:

content of the `paper.Rmd`:

```
```{r}
df <- load_data_from_source()
``'


In our database we had `r nrow(df)` observations. Please see fig \@ref(fig:baseline)

```{r baseline, fig.cap = "Baseline figure"}
produce_publication_ready_figure_baseline()
``'



```

I hope that I am making it somewhat clear :P... 
Basically I am saying that we could help the users by making some standardized functions in the R folder so that they can fill them outeasily and not clutter their paper.Rmd 

also that makes the compilation a lot more efficient because we would only need to run only these functions that are mentioned in the paper.Rmd files.

I am right now running ALL the statisticall models that I tried - and I dont want to erease them from my files but its suboptimal to run them each time I have a typo in my paper.Rmd file. 

I think this approach is better than caching... 

What do you guys think? Would it be worth it to make some structure in the `R` folder for newbies?

id suggest these:
1. load_data.R
2. data_cleaning.R
3. statistical_analysis.R
4. figures.R
5. tables.R

Another approach would be to have only one .R file and the above sections within it. 

I don't know which is better, but using functions that go into the paper.Rmd is definitely a good approach that we should encourage. 

Please let me know what you think (even if you think that I'm rambling here without any sense...)



I think this is an important feature for reproducible research. I'd love to discuss. Thanks.
In brief: 

- Problem: `rrtools` with `Dockerfile` is currently reproducible, conditional upon the time one builds the Docker image that produces `paper.html` (or one's trust in a custom Docker container published to DockerHub (or a similar registry)).
- (Partial) Solution: `packrat` (and perhaps eventually `rstudio/renv`?) can record the exact version of all packages and Dockerfile can reproduce that state.

Details: 

> A Dockerfile contains enough information to create an environment, but not enough information to reproduce an environment. Consider a Dockerfile that contains the command “install.packages(‘dplyr’)”. Following this instruction in August 2017 and again in December 2017 will result in two different Docker containers, since the current version changed. -[RStudio and Docker](https://www.rstudio.com/wp-content/uploads/2018/03/RStudio_Docker_3-9-2018.pdf)