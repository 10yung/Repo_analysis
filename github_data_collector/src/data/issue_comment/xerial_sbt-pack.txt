Updates 
* [org.scala-sbt:sbt](https://github.com/sbt/sbt)
* [org.scala-sbt:scripted-plugin](https://github.com/sbt/sbt)

 [from 1.2.8 to 1.3.7](https://github.com/sbt/sbt/compare/v1.2.8...v1.3.7).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.7)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt" } ]
```
</details>

labels: library-update, semver-minor
Updates [org.specs2:specs2-core](https://github.com/etorreborre/specs2) from 4.8.1 to 4.8.3.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.specs2", artifactId = "specs2-core" } ]
```
</details>

labels: test-library-update, semver-patch
Updates 
* [org.scala-sbt:sbt](https://github.com/sbt/sbt)
* [org.scala-sbt:scripted-plugin](https://github.com/sbt/sbt)

 [from 1.2.8 to 1.3.6](https://github.com/sbt/sbt/compare/v1.2.8...v1.3.6).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.6)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt" } ]
```
</details>

labels: library-update, semver-minor
When creating an archive with `packArchiveZip` and then unpacking it, executable files no longer have execute permissions. 

Inspecting the file with `unzip -Z` reveals:
```
-rw----     2.0 fat     4203 bl defN 19-Dec-20 18:07 myExecutableFile
```
So it seems that the file system / permissions are set incorrectly in the zip file.

I am doing this on Mac OS Mojave, with sbtPack v0.12, unzip 6.00 by Info-Zip.

Please try to fix or let me know if this is a problem of unzip.
Updates 
* [org.scala-sbt:sbt](https://github.com/sbt/sbt)
* [org.scala-sbt:scripted-plugin](https://github.com/sbt/sbt)

 [from 1.2.8 to 1.3.5](https://github.com/sbt/sbt/compare/v1.2.8...v1.3.5).
[Release Notes/Changelog](https://github.com/sbt/sbt/releases/tag/v1.3.5)

I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.scala-sbt" } ]
```
</details>

labels: semver-minor
After migrating to SBT 1.3.0 from 1.1.4, here is the result of running:

packCopyDependencies

    java.nio.file.FileAlreadyExistsException: /home/dd/rds/servision/src/main/webapp/WEB-INF/lib/jt-utils-1.5.0.jar

The cause is that tries to create a symbolic link for the same dependency twice.  It doesn't remove duplicated dependencies before processing.
Upon every successful run of `sbt compile` an extra (and identical) copy of the file `resolved.xml.xml` is created inside "sbt-pack\target\sbt-1.0\resolution-cache\org.xerial.sbt\sbt-pack\scala_2.12\sbt_1.0\HEAD+{time-stamp}\"

is this on purpose? 
When repository url is "https://repo1.maven.org/maven2/" and get jar "log4j-1.2.17" or "log4j1.2.16", use command 'sbt pack' will rename log4j-1.2.17.tar.gz to log4j-1.2.17.jar.

 In sbt-pack copy project dependencies code variable distinctDpJars include three file ("log4j-1.2.17.jar", "log4j-1.2.17.tar.gz", "log4j-1.2.17.zip"),and function "resolveJarName(m, jarNameConvention)" cause jar file be renamed in fact.
Can't run bash script if mapped program name contains space character.  bat script works correctly. Names of scripts don't contain space character. 

There is small example of build.sbt file that leads to run REPL instead of run program.

```
packMain := Map("hello scala" -> "Test")
lazy val test = (project in file("."))
  .enablePlugins(PackPlugin)
  .settings(
    name := "Test app",
    version := "0.1",
    scalaVersion := "2.12.7",
    )
```
Hello,

Very nice plugin! However, I was wondering, given that the plugin is following the GAV format, shouldn't JARs and POMs both have Scala and SBT versions included in the name? What I mean is:

For the below GAV

GroupId: org.xerial.sbt
ArtifactId: sbt-pack_2.12_1.0
Version: 0.11

Shouldn't the path be /org/xerial/sbt/sbt-pack_2.12_1.0/sbt-pack_2.12_1.0-0.11.jar
Instead of /org/xerial/sbt/sbt-pack_2.12_1.0/sbt-pack-0.11.jar

I was looking at some other libraries as examples and they seem to include scala/sbt versions in the jar/pom. E.g the akka-actor library:

http://central.maven.org/maven2/com/typesafe/akka/akka-actor_2.12/2.5.17/

I might be wrong but I think a Nexus mirror with only Maven dependency resolution might not be able to resolve the plugin.

Thanks