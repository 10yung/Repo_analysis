â€¦en dumping

If this is considered reasonable, I'll be happy to make the corresponding
changes to the formatting code as well.
I'm currently writing a C64 emulator in Go, and using `spew` to dump out the CPU state whenever I hit an instruction I haven't implemented yet, or read from / write to a part of the address space that I haven't emulated yet.  Currently I'm translating the decimal output into hex so I can cross-reference with documentation and the ROM disassembly manually, but it occurred to me that a small change to the spew library could add the capability to automate this task, simply by adding an option to always apply a hex format to every int.

I can make a PR for this idea but I wanted to first posit the idea in case either a) it's already possible and I'm just too stupid to figure out how, or b) someone has a compelling reason why this functionality should not be implemented in this library.

Let me know what you think anyway.
For test usage, the diff will already be included, so there's no need to
list the len.

This is pretty similar to https://github.com/davecgh/go-spew/pull/58 except length-only and includes tests.

Hi, I've come across this issue, that with the pointer method feature, the address is updated to 0x1.

Demonstration:

```go
package main

import (
	"fmt"

	"github.com/davecgh/go-spew/spew"
)

type myMap map[int64]int64

func (c myMap) String() string {
	fmt.Printf("pointer changed: %p\n", c)
	for k := range c {
		fmt.Println(k)
	}

	return "custom string"
}

func main() {
	spew.Printf("%v\n", myMap{1: 1})
}
```

It gives me
```
$ go run main.go
pointer changed: 0x1
(PANIC=runtime error: invalid memory address or nil pointer dereference)map[1:1]
```

With `spew.Config.DisablePointerMethods = true`, the panic is gone.
Can't see where it would still be used.
Just a nit-picky typo fix.
Hi,
There is a fix for this panic [1]. 

1 - https://github.com/davecgh/go-spew/issues/108
Hello,
There is a fix for this issue [1]. "spew.Dump" output is often interrupted by other stdout. And you have to do something like fmt.Print(spew.Sdump(body)).

I do not see any drawback of this fix. If somebody wants to use os.Stdout, he/she can use "spew.Fdump"

1 - https://github.com/davecgh/go-spew/issues/94
