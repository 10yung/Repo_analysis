Overview
--------

On Android, when using http_client with HTTPs (SSL), if we have network security config (for example - cert pinning) with one or more domain-config elements, the platform cert verification (fallback) method (verify_cert_chain_platform_specific) fails with JNI exception (`CertificateException`).  

Below is an example network security config - 

```xml

<network-security-config>
    <domain-config cleartextTrafficPermitted="false">
        <domain includeSubdomains="true">azurewebsites.net</domain>
        <pin-set expiration="2021-09-24">
            <pin digest="SHA-256">...</pin>
            <pin digest="SHA-256">...</pin>
        </pin-set>
    </domain-config>

</network-security-config>

```

Note that this happens when default OpenSSL validation fails (for example, due to missing CA configured) and we need to fallback to platform verification (via `verify_cert_chain_platform_specific`). As a result, SSL connection fails. 


Details
-------

The code [here](https://github.com/microsoft/cpprestsdk/blob/96e7d20e398b629de2935f9ac32cfa2780cd0b0b/Release/src/http/client/x509_cert_utilities.cpp#L268) calls X509TrustManager/checkServerTrusted, obtained via factory method. But the overload being called does not contain the hostName parameter. Underneath, in this case, `X509CertificateManager` 'resolves' to `RootTrustManager` (aosp/system/frameworks/base/core/java/android/security/net/config/RootTrustManager.java) and this class has an overload, which takes the hostName. On the other hand, the overload which does not take a hostName (as last parameter), will throw exception if domain specific config(s) are present (`mConfig.hasPerDomainConfigs() == true`). Note that the second method handles hostName ok and locates the corresponding `NetworkSecurityConfig` based on it. 

aosp/system/frameworks/base/core/java/android/security/net/config/RootTrustManager.java

```java

…

    @Override
    public void checkServerTrusted(X509Certificate[] certs, String authType)
            throws CertificateException {
        if (mConfig.hasPerDomainConfigs()) {
            throw new CertificateException(
                    "Domain specific configurations require that hostname aware"
                    + " checkServerTrusted(X509Certificate[], String, String) is used");
        }
        NetworkSecurityConfig config = mConfig.getConfigForHostname("");
        config.getTrustManager().checkServerTrusted(certs, authType);
    }

    /**
     * Hostname aware version of {@link #checkServerTrusted(X509Certificate[], String)}.
     * This interface is used by conscrypt and android.net.http.X509TrustManagerExtensions do not
     * modify without modifying those callers.
     */
    @UnsupportedAppUsage
    public List<X509Certificate> checkServerTrusted(X509Certificate[] certs, String authType,
            String hostname) throws CertificateException {
        if (hostname == null && mConfig.hasPerDomainConfigs()) {
            throw new CertificateException(
                    "Domain specific configurations require that the hostname be provided");
        }
        NetworkSecurityConfig config = mConfig.getConfigForHostname(hostname);
        return config.getTrustManager().checkServerTrusted(certs, authType, hostname);
    }


…

```

The suggestion here is to call the second overload from `verify_X509_cert_chain`, which already has the hostName (as input argument) and pass it forward. 

Note that the second overload is not part of the (base) X509TrustManager interface, but we can use [X509TrustManagerExtensions](https://android.googlesource.com/platform/frameworks/base/+/master/core/java/android/net/http/X509TrustManagerExtensions.java) wrapper - checkServerTrusted, which takes hostName and underneath will locate the correct method. 

```cpp

bool verify_X509_cert_chain(const std::vector<std::string>& certChain, const std::string& hostName)

…
    // X509TrustManager
    java_local_ref<jclass> X509TrustManagerClass(env->FindClass("javax/net/ssl/X509TrustManager"));
    CHECK_JREF(env, X509TrustManagerClass);
    jmethodID X509TrustManagerCheckServerTrustedMethod =
        env->GetMethodID(X509TrustManagerClass.get(),
                         "checkServerTrusted",
                         "([Ljava/security/cert/X509Certificate;Ljava/lang/String;)V");
…

   // Validate certificate chain.
    java_local_ref<jstring> RSAString(env->NewStringUTF("RSA"));
    CHECK_JREF(env, RSAString);
    env->CallVoidMethod(
        trustManager.get(), X509TrustManagerCheckServerTrustedMethod, certsArray.get(), RSAString.get());
    CHECK_JNI(env);
…

```


Workaround
----------

The current workaround is to make OpenSSL succeed and never fallback to the platform specific verification. This can be achieved, for example, via `SSL_CERT_FILE` environment variable and 'spilling' the CA pem during startup and thus bypass the platform verification code. 


Hi,

I've a use case to send a continuous audio stream to a web server using TLS (wss://<uri>) and receive corresponding text.  I have to repeatedly send audio to the server until  no more audio data. While the audio is being sent, server will start sending responses (with partial results) after some interval(from the time it started receiving audio). 

I don't see any samples or examples to do the mentioned tasks. It would be great if I can get some example or pseudo code to do .

 Thank you
Hi All,

I'm trying a simple example:
1. connect to server (using was:<uri>)
2. send a message
3. receive a message
4. close socket connect

The following code is working fine:
```
websocket_client client;
  std::string body_str("hello");
  client.connect(U("wss://<uri>")).wait();
  
  auto receive_task = client.receive().then([](websocket_incoming_message ret_msg) {
      auto ret_str = ret_msg.extract_string().get();

      std::cout << "ret_str " << ret_str << "\n";
  });

  websocket_outgoing_message msg;
  msg.set_utf8_message(body_str);
  client.send(msg).wait();

  receive_task.wait();
  client.close().wait();
  //client.close().wait();
  std::cout << "hello world \n";
```
and getting the output:
```
ret_str {"apiVersion":"1.1","method":"TEXT","id":"loAesAW1RyORhhZ-v4vlfg","data":{"textDone":true,"text":"","substitutedText":"","maxAlternates":0},"error":{"reason":"UNKNOWN","message":"<some message>: java.lang.IllegalStateException: Expected BEGIN_OBJECT but was STRING at line 1 column 1"}}
hello world 
```
But When I want to use **websocket_callback_client** using the following example:
```
#include <iostream>
#include <cpprest/ws_client.h>
#include <cpprest/producerconsumerstream.h>
using namespace web;
using namespace web::websockets::client;
using namespace concurrency;
using namespace concurrency::streams;

int main(int argc, char** argv)
{
  

  //websocket_client client;
  websocket_callback_client client;
  client.connect(U("wss://<uri>")).wait();
 
  client.set_message_handler([&](websocket_incoming_message ret_msg) {
    auto ret_str = ret_msg.extract_string().get();
    std::cout << "ret_str " << ret_str << "\n";
  });

  utility::string_t close_reason;
  client.set_close_handler([&close_reason](websocket_close_status status,
                                      const utility::string_t& reason,
                                      const std::error_code& code) {
  std::cout << " closing reason..." << reason << "\n"; 
  std::cout << "connection closed, reason: " << reason <<  " close status: " << int(status) <<  " error code " << code << std::endl;
  });

  std::string body_str("hello");
  websocket_outgoing_message msg;
  msg.set_utf8_message(body_str);
  client.send(msg).wait();
  client.close().wait();
  //client.close().wait();
  std::cout << "hello world \n";
}
```

I'm getting the following error:
 ```
closing reason...Underlying Transport Error
connection closed, reason: Underlying Transport Error close status: 1006 error code websocketpp.transport:2
hello world 
```
Am I doing something wrong ? Please let me know how to use websocket_callback_client in a correct way.

Thank you
See discussion in #1201.

My project uses a dll which is written by thirdparty and this dll uses boost library(version is 1_70),  if i compile cpprestdk using vcpkg, vkpkg will download boost automatically(version is 1_71), this will lead to conflict. 
So i want to ask is it possible to compile cpprestsdk using existing boost library so as to cpprestsdk and thirdparty dll use the samle boost libraray.
https://github.com/microsoft/vcpkg/issues/9637#issue-548549184
I built a simple example with sanitizer (added the parameter -fsanitizer = address, undefined in CXX_FLAGS). OS Debian 10.2 (gcc 8.3).

> #include <iostream>
#include <cpprest/http_client.h>
#include <cpprest/filestream.h>
#include <cpprest/uri.h>
#include <cpprest/json.h>
using namespace utility;
using namespace web;
using namespace web::http;
using namespace web::http::client;
using namespace concurrency::streams;
int main() {
// Create user data as JSON object and make POST request.
	auto postJson = pplx::create_task([]() {
		json::value jsonObject;
		jsonObject[U("first_name")] = json::value::string(U("atakan"));
		jsonObject[U("last_name")] = json::value::string(U("sarioglu"));
		return http_client(U("https://reqres.in"))
			.request(methods::POST,
				uri_builder(U("api")).append_path(U("users")).to_string(),
				jsonObject.serialize(), U("application/json"));
	})
	// Get the response.
	.then([](http_response response) {
		// Check the status code.
		if (response.status_code() != 201) {
			throw std::runtime_error("Returned " + std::to_string(response.status_code()));
		}
		// Convert the response body to JSON object.
		return response.extract_json();
	})
	// Parse the user details.
	.then([](json::value jsonObject) {
		std::wcout << jsonObject[U("first_name")].as_string()
			<< " " << jsonObject[U("last_name")].as_string()
			<< " (" << jsonObject[U("id")].as_string() << ")"
			<< std::endl;
});
try {
    postJson.wait();
} catch (const std::exception &e) {
        printf("Error exception:%s\n", e.what());
}
	return 0;
}

Error: 

> /usr/local/include/cpprest/astreambuf.h:891:65: runtime error: member call on address 0x6070000039e0 which does not point to an object of type 'basic_streambuf'
0x6070000039e0: note: object is of type 'Concurrency::streams::details::basic_container_buffer<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
 01 00 80 2a  28 69 a5 90 e2 55 00 00  e0 39 00 00 70 60 00 00  70 1b 00 00 30 60 00 00  00 00 00 00
              ^~~~~~~~~~~~~~~~~~~~~~~
              vptr for 'Concurrency::streams::details::basic_container_buffer<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >'
string: {"id":1,"jsonrpc":"2.0","result":"4.4.4"}
=================================================================
==3619==ERROR: LeakSanitizer: detected memory leaks
Direct leak of 512 byte(s) in 2 object(s) allocated from:
    #0 0x7f7bc2719720 in __interceptor_realloc (/lib/x86_64-linux-gnu/libasan.so.5+0xe9720)
    #1 0x7f7bbb0bc292  (/lib/x86_64-linux-gnu/libstdc++.so.6+0x95292)

If without a sanitizer it is naturally not there.
More precisely, it is, just no one tells you about it (such as sanitizer).
Any thoughts on how to fix this?
now the default becomes "{CMAKE_INSTALL_LIBDIR}/cmake/cpprestsdk"

This is a respin of https://github.com/microsoft/cpprestsdk/pull/845

I added the -Wfloat-equal compilation option to CmakeList, and the following error is reported when compiling:
"/root/cpprestsdk-2.10.10/Release/include/cpprest/json.h: In member function 'bool web :: json :: number :: operator == (const web :: json :: number &) const':
/root/cpprestsdk-2.10.10/Release/include/cpprest/json.h:1322:75: error: comparing floating point with == or! = is unsafe [-Werror = float-equal]
             case json :: number :: type :: double_type: return m_value == other.m_value;"
How to solve this problem,help me!
Firstly, I run my app with cpprestsdk installed through brew. I archived and uploaded to Mac Appstore, but they rejected. So, I embed the .dylib in my project. The .dylib I copied from the installed folder (usr/local/opt/cpprestsdk), and then I uninstall the cpprestsdk so it deleted that folder.
I have successfully archived, validated, distributed, and run the app on a second Mac which does not have that CLI utility (or Xcode) installed or CPPREST installed by brew, through the Developer ID ('outside the Mac App Store') workflow several times.

However, the archive failed to validate for Mac App Store distribution with this error:
![Screen Shot 2020-01-06 at 09 21 41](https://user-images.githubusercontent.com/20853950/71791025-02344980-3066-11ea-9757-3e3781e5d927.png)

How can I resolve it?