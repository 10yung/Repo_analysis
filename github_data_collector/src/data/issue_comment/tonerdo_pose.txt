Hello, I am using your framework.

I have meet such situation:
I need to Shim private static method. But your framework could not do it, because Shim.Replace could not understande reflection.

But I have found solution:
` var _newShim = (Shim) typeof(Shim)
   .GetConstructor( BindingFlags.Instance | BindingFlags.NonPublic, null, 
    new Type[] {typeof(MethodBase), typeof(object)}, null)
  .Invoke( new object[]
    {
      typeof(TestClass)
        .GetMethods(BindingFlags.NonPublic | BindingFlags.Static | BindingFlags.InvokeMethod)
        .Single(m => m.Name == privateMethodName),
       null
    });
 _newShim.With(delegate(int val) { return val + 1; });`

It will be much easy if Shim have got public constructor.

i see the sample : 
Shim ctorShim = Shim.Replace(() => new MyClass()).With(() => new MyClass() { MyProperty = 10 });

what if the constructor has input parameters, is the following correct?

Shim ctorShim = Shim.Replace(() => new MyClass(Is.A<string>)).With((string conn) => new MyClass(conn) { });
Is this project still alive?
Hi I tried the examples in Unity3D 2019.1.9f1 on Mac OS 10.13.6 under .NET 4.x player settings, using https://github.com/jbevain/mono.reflection for the `using Mono.Reflection` clauses in Pose, but I can't get anything at all to work:

```
public class MyClass
{
	public void DoSomething()
	{
		Debug.Log("DoSomething()");
	}
}

// try shimming class method:

MyClass myClass = new MyClass();

myClass.DoSomething();

Shim classShim = Shim.Replace(() => Is.A<MyClass>().DoSomething()).With(
				delegate(MyClass @this) { Debug.Log("doing something else with myClass"); });

myClass.DoSomething();

// try shimming instance method:

MyClass myClass = new MyClass();

myClass.DoSomething();

Shim myClassShim = Shim.Replace(() => myClass.DoSomething()).With(
				delegate(MyClass @this) { Debug.Log("doing something else with myClass"); });

myClass.DoSomething();
```

No matter what I try, I always see:

```
DoSomething()
DoSomething()
```

I'm wondering if this is due more to running on Mac OS than using Unity. Or perhaps that Mono.Reflection repo just doesn't work.

If nothing comes to mind, I can maybe put together an example Unity project that at least shows the Pose issue.

***

BONUS

Also while I have you here, do you know if Pose shims work on iOS and Android? It's looking like the technique of swapping the IL code might not work on mobile because they are sticklers about using immutable code only (at least for Harmony, which uses similar techniques):

https://github.com/pardeike/Harmony/issues/196

I can maybe use https://github.com/jbevain/cecil but it might have similar issues.

I'm trying to extend a `sealed` class so that I can have a delegate fire whenever a class instance method is called or a property is changed, in order to implement reactive programming techniques. Without that functionality, I'll have no choice but to tell users to remember to call `MyClass.SomethingChanged(sealedClass)`, which isn't future-proof so will inevitably lead to bugs, especially when new developers use the class and forget to call that. So far I've wasted upwards of a week chasing this, and it's been one of the first great disappointments I've encountered in C#.

I tried building a dynamic class with https://github.com/meziantou/Meziantou.Framework/blob/master/src/Meziantou.Framework/ReflectionDynamicObject.cs to pass any method calls through to the sealed class, but I was unable to get the implicit cast operator working, so I couldn't pass the dynamic class off as the original type back to Unity (it caused a stack overflow trying to return and cast itself infinitely). Which means that users would have to cast the sealed class to the dynamic class themselves which defeats the whole purpose.

This is a really big problem that severely limits Unity to cookie cutter solutions since we can't override builtin functionality. Of course most people have no idea what I'm talking about, so just tell me I'm doing it wrong. I'm hoping someone with your depth of understanding on these issues might have an idea for how to override/inherit sealed class methods or add `INotifyPropertyChanged` or shim a sealed class instance, and be able to run that type of code in production.

***

Thanks!
I have a method in another assembly that looks like this (VB.NET):
```vb.net
    Public Class Item Parent
        Public Function GetItems(
            ByVal Optional a As Integer = 0,
            ByVal Optional b As Integer = 0,
            ByVal Optional c As Integer = 0,
            ByVal Optional d As Integer = 0) As List(Of Item)
    ...
```

I'm trying to figure out how to shim this. This give me the error `An expression tree may not contain a call or invocation that uses optional arguments`. 
```c#
    var mockItems = new List<Item>();
    Shim.Replace(() => Is.A<ItemParent>().GetItems())
        .With(delegate (ItemParent@this) { return mockItems; });
```
This give me `Pose.Exceptions.InvalidShimSignatureException: Mismatched instance types`
```c#
    var mockItems = new List<Item>();
    Shim.Replace(() => Is.A<ItemParent>().GetItems(Is.A<int>(), Is.A<int>(), Is.A<int>(), Is.A<int>()))
        .With(delegate () { return mockItems; });
```
And these variations give me `Pose.Exceptions.InvalidShimSignatureException: Parameters count do not match`
```c#
    var mockItems = new List<Item>();
    Shim.Replace(() => Is.A<ItemParent>().GetItems(Is.A<int>(), Is.A<int>(), Is.A<int>(), Is.A<int>()))
        .With(delegate (ItemParent@this) { return mockItems; });

    var mockItems = new List<Item>();
    Shim.Replace(() => Is.A<ItemParent>().GetItems(Is.A<int>(), Is.A<int>(), Is.A<int>(), Is.A<int>()))
        .With(delegate (ItemParent@this, int a, int b, int c, int d) { return mockItems; });
```

What is the proper syntax?
Trying to use Pose from other strongly named assemblies and getting the following exception:

`System.IO.FileLoadException : Could not load file or assembly 'Pose, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' or one of its dependencies. A strongly-named assembly is required. (Exception from HRESULT: 0x80131044)`

Any chance of getting this assembly strongly-named?
Any further updates planned to this project, in particular to get it working properly on .NET Core? Or are there any forks out there with the necessary fixes?
Hello, I'm trying to use Pose to mock the property "Entitites" in the folowing class: 

![image](https://user-images.githubusercontent.com/6953687/57021254-09b37100-6c02-11e9-8914-0fa422fa555b.png)

In my test, I'm doing the setup as follows:

![image](https://user-images.githubusercontent.com/6953687/57021289-22238b80-6c02-11e9-8dc6-5a2a60475b50.png)

But it throws the exception: *System.InvalidProgramException : Common Language Runtime detected an invalid program*

I've seen that other people has gone to the same problem, but usually involving DateTime.Now or something like it, and, still, could not find any solution. Do you guys are currently working on this?
Error	CS1061	'Shim' does not contain a definition for 'Original' and no extension method 'Original' accepting a first argument of type 'Shim' could be found (are you missing a using directive or an assembly reference?)

![image](https://user-images.githubusercontent.com/4570529/55806702-16501800-5ae1-11e9-9c70-041554ebd032.png)

Any suggestion ?

Hi, 
I am try to install NuGet package from Visual Studio Nuget manager but I have this error:

Could not install package 'Pose 1.2.1'. You are trying to install this package into a project that targets '.NETFramework,Version=v4.6.1', but the package does not contain any assembly references or content files that are compatible with that framework..

It's possible to do ? 
