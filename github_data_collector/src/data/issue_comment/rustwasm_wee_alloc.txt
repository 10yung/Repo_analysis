### Describe the Bug

wee_alloc is supposedly useful for embedded devices, but I tried it over the weekend and of the total amount of memory of 256 KiB, wee_alloc is only able to allocate 2.2 KiB in its default configuration. Something seems to be off here.

### Steps to Reproduce

1. Use the static array backend.
2. Configure 256 KiB of memory.
3. Do a few allocations in the range 1 - 700 bytes like in the image provided.
4. wee_alloc should run out of memory very early.

### Expected Behavior

It should be able to use at least 200 KiB or so.

### Actual Behavior

It can only allocate 2.2 KiB.

![https://i.imgur.com/XILjeLr.png](https://i.imgur.com/XILjeLr.png)

As mentioned in #68, but for tracking separately:

> `size_classes` is enabled by default, so one of the lines had to remain `cargo check --release` but another is supposed to be `cargo check --release --no-default-features` to test without `size_classes` enabled.

> Hmm, looks like there is a bunch of other places in build.sh, check.sh, appveyor.yml that use `--features size_classes`.

> @fitzgen Does this mean they are all similarly broken (testing same configuration as default) or am I missing some switch?
### Summary

Compiling a test-app with different settings (dlmalloc and wee_alloc) the resulting binary sizes of wee_alloc builds are not as small as expected. Benefit is just 3KB, the relation is 25KB for dlmalloc-builds compared to 22KB for wee_alloc-builds with code using simple String-allocation.
see 

With an application without any dynamic memory allocation, wee_alloc is adding 2500 bytes:

```
   829  wasm-game-of-life-dlmalloc/pkg/wasm_game_of_life_bg.wasm
3666  wasm-game-of-life-wee_alloc/pkg/wasm_game_of_life_bg.wasm
```
With an application using simple String allocation, wee_alloc is adding ca 21000 bytes, being just 3KB better than dlmalloc.
```
25179  wasm-game-of-life-dlmalloc-dyn/pkg/wasm_game_of_life_bg.wasm
22141  wasm-game-of-life-wee_alloc-dyn/pkg/wasm_game_of_life_bg.wasm
```
### Steps to Reproduce

git clone  https://github.com/frehberg/wasm-dyn-mem.git
cd wasm-dyn-mem/rust-bindgen
make build print-sizes

### Expected Results

Linking against wee_alloc instead of dlmalloc I expected binaries being much more smaller and gaining larger benefit compared to dlmallic. Just, in some cases the binary is larger and the relation is just 22KB vs 25KB
Maybe wee_alloc is using some code-patterns that can not be optimized as good as expected
[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

If you make any changes to it yourself then they will take precedence over the rebase.

---

[//]: # (dependabot-end)

Updates the requirements on [quickcheck](https://github.com/BurntSushi/quickcheck) to permit the latest version.
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/BurntSushi/quickcheck/commits/0.7.1)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

If all status checks pass Dependabot will automatically merge this pull request.

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)

Finally, you can contact us by mentioning @dependabot.

</details>
[//]: # (dependabot-start)
⚠️  **Dependabot is rebasing this PR** ⚠️ 

If you make any changes to it yourself then they will take precedence over the rebase.

---

[//]: # (dependabot-end)

Updates the requirements on [rand](https://github.com/rust-lang-nursery/rand) to permit the latest version.
<details>
<summary>Commits</summary>

- See full diff in [compare view](https://github.com/rust-lang-nursery/rand/commits/0.5.5)
</details>
<br />

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

If all status checks pass Dependabot will automatically merge this pull request.

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Pull request limits (per update run and/or open at any time)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)

Finally, you can contact us by mentioning @dependabot.

</details>
### Summary

I need an advice how properly implement runtime initialized storage. 

### Motivation

Now I use ugly hack to make wee_alloc work with my unikernel wrapper around solo5. In compile time i don't know anything about available heap address and size, I only can get it in runtime from specific structure.

So I add imp_ptr_array with specific alloc_pages implementation and call something like fn init(start: usize, size: usize), but that's very bad thing usable only for initial testing.

As i can see I need some trait or function which can change internal state of alloc_pages implementation

> How does this further `wee_alloc`'s goal of being the best allocator for
> `wasm32-unknown-unknown`, with a very small `.wasm` code size footprint?

It doesn't make wee_alloc any bigger in wasm code size, but makes it more usable as general purpose no_std allocator

### Details

> What bits of code would need to change? Which modules?

As I see it will be additional specific implementation similar to static_array without significant impact on other parts.

> What are the trade offs?

Additional trait to be implemented on WeeAlloc structure

> Are you willing to implement this yourself? If you had a mentor? Are you
  willing to mentor someone else?

I'm ready to implement it.

### Summary

Investigate rounding up allocations to at least two words, and making the free list doubly linked. 

### Motivation

This could simplify code, maybe shrink code size, and lessen fragmentation.

### Details

* We could remove deferred consolidation of cells. Simplifying code and hopefully also shrinking code size.

* We could always consolidate a free cell with both of its neighbors, if they are also free. Right now we can only do one or the other because the free list is singly linked, and doesn't afford these kinds of manipulations in *O(1)* time.

* Downside is that heap allocations of `size < 2 words` get rounded up. I think this is probably an OK choice.

* We would make `FreeCell` have another link `prev_free_raw` that is the previous free list pointer.

* Anywhere we insert into or remove from the free list, we would need to make sure that the new link is kept valid.

Happy to mentor anyone who wants to try their hand at this!

<!---------------------------- FEATURE REQUESTS ------------------------------->

### Summary

Emit statistics / visualizations of heap fragmentation. There are edge cases where we can't currently consolidate adjacent free cells into a larger, contiguous free cell. This would let us empirically answer whether that is a problem in practice.

### Motivation

Remove "unknown unknowns". Be a better allocator.

### Details

* Maybe use graphviz.

* At least get some statistics / aggregated numbers on free vs allocated and distribution of free cell sizes in the free list.
This would be a nice smoke test :)
<!---------------------------- FEATURE REQUESTS ------------------------------->

### Summary

Add a C API crate that wraps `wee_alloc` and provides posix `malloc` and `free`.

### Motivation

C and C++ projects targeting wasm could benefit from `wee_alloc` too, and more users = more bug reports and reliability work and all that good stuff.

### Details

* New crate at the top level of the repo, depending on `wee_alloc`

* Wraps a `wee_alloc` global allocator and exposes `malloc` and `free` (and I think `realloc` is part of the posix spec too?)