Add an implementation of `StringSubject.isEqualTo(String expected)` which will do diffing in the error message if the strings are not equal. 

https://truth.dev/api/1.0/com/google/common/truth/StringSubject.html
Our static dependency analysis tool detected an error https://github.com/GoogleCloudPlatform/cloud-opensource-java/issues/980 on gwt-user used by ` com.google.truth:truth:1.0`.

Discussed with @netdpb , it seems that Truth declares unnecessary dependency:

```
    <!-- Required only to build the -gwt sub-artifact. -->
    <dependency>
      <groupId>com.google.gwt</groupId>
      <artifactId>gwt-user</artifactId>
      <scope>provided</scope>
    </dependency>
```

There's no "-gwt sub-artifact" found under com.google.truth: https://search.maven.org/search?q=g:com.google.truth .

Would you remove the dependency if not needed?



The API doc for the constructor https://truth.dev/api/1.0/com/google/common/truth/IterableSubject.html#IterableSubject-com.google.common.truth.FailureMetadata-java.lang.Iterable- says "Constructor for use by subclasses. If you want to create an instance of this class itself, call check(...).that(actual)."

However, the check method it links to and the others I can see are protected so I can't call them either. 
We'd like to use this code https://github.com/aosp-mirror/platform_frameworks_support/commit/bf04c31bd91bc6188abef45f7d9c1fa4040e5633#diff-46afb720089a0149afb46f71274f5642 from our Kotlin tests, can you please include it into Truth? 

We could just add it to one of our internal libraries and use it. However, seeing as this code is being duplicated on many repos on GitHub: https://github.com/search?l=Kotlin&p=2&q=ThrowableSubject&type=Code, it might make sense to include it in Truth.
Currently a minimal Truth Subject requires four operations: a constructor, an assertion method, and two static methods for accessing the subject: `assertThat` and a subject factory (see [extension page](https://truth.dev/extension)).

Would it be possible to auto-generate these methods and, possibly, accumulate all custom `assertThat` overloads in a single place, to cut down the number or operations the developer has to add to a custom subject, and encourage creating custom `Subject`s even if a single assertion method is needed?

For instance,
```java
@AutoSubject(factoryName = "employees")
public final class EmployeeSubject extends Subject {

  private final Employee actual;

  // The constructor needs to be public if the class with `assertThat`
  // might be outside of its package
  public EmployeeSubject(FailureMetadata failureMetadata, @NullableDecl Employee subject) {
    super(failureMetadata, subject);
    this.actual = subject;
  }

  // User-defined test assertion SPI below this point

  public void hasName(String name) {
    check("name()").that(actual.name()).isEqualTo(name);
  }
}
```

Will generate these two methods:
```java
  // User-defined entry point
  public static EmployeeSubject assertThat(@NullableDecl Employee employee) {
    return assertAbout(EMPLOYEE_SUBJECT_FACTORY).that(employee);
  }

  // Static method for getting the subject factory (for use with assertAbout())
  public static Subject.Factory<EmployeeSubject, Employee> employees() {
    return EMPLOYEE_SUBJECT_FACTORY;
  }

  // Boiler-plate Subject.Factory for EmployeeSubject
  private static final Subject.Factory<EmployeeSubject, Employee> EMPLOYEE_SUBJECT_FACTORY =
      EmployeeSubject::new;
```

As a new user of Truth, I can't say if such implementations are common enough so that it makes sense to generate them. There are also other considerations: 
1. Visibility — if there are subjects for package-private types in several packages, the Truth won't be able to produce a single file with all assertions. What shall it produce in this case — a file per subject, or per package?
2. Discoverability — if Truth produces a single file with all assertions (which might not always work ^), it is trivial to import it knowing its name. But if it generates multiple files, it might be more difficult for the end-user to discover them.

#251, which suggested generating the factory, is likely related.
This is written in Kotlin and depends on kotlin runtime as a result, however is designed to work cleanly from Java, and its kotlin origins should not be paritcularly noticeable to the test-writing developer.

The tests handle single object testing (via the Subject) and list element comparisons using a Correspondence. Field comparisons can be shallow or deep, and can respect (in the deep case) declared `equals()` methods or ignore them.  It also can handle reference cycles (with caveats).

This is upstreamed from Square, Inc. and licensed under Apache 2.0.

Addresses #560 
Truth doesn't provide an `AUTOMATIC-MODULE-NAME`, like `com.google.truth`, via its manifest. [PresentModule.java](https://github.com/sormuras/modules/blob/master/src/PresentModule.java) yields:

```
java PresentModule.java com.google.truth:truth:1.0
path = truth-1.0.jar
name = truth
mode = automatic
automatic name source = FILENAME
api = 1 package(s)
```

At least, provide a more stable module name via Truth's manifest.

Better, provide a compiled module descriptor.

See also https://github.com/google/error-prone/issues/1116 and linked friends.
RE: https://twitter.com/foobarjet/status/1148700099331219456

We have these internally (in `TruthExhaustiveShortcuts` and scattered through the classes in the `truth` subpackage), but we haven't published them for external users.

I believe that they all use [Refaster](http://errorprone.info/docs/refaster), which is available externally. (I see that [we've been slow to publish other Refaster templates](https://github.com/google/error-prone/issues/649), but hopefully the Truth-specific ones are both easier and more valuable than average.)
Some types in the Truth-JavaDoc are still linked to developers.google.com URLs, which are not accessible for the public.

Example:
In the JavaDoc for class LiteProtoTruth and method "assertThat" (https://truth.dev/api/1.0/com/google/common/truth/extensions/proto/LiteProtoTruth.html#assertThat-com.google.protobuf.MessageLite-) 
the link for parameter type "MessageLight" points to 
https://developers.google.com/protocol-buffers/docs/reference/java/com/google/protobuf/MessageLite.html?is-external=true