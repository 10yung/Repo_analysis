Rather than delete code, try copying the code to a global purgatory variable and marking the code either "Full of Light"" (it has been used in over 100 programs without failings), "Observant" (passes all tests), "Sinful" (it has NOT been flawless), or "Condemned" (failed in more than one program, not suited for repair).

A monitor function ("PastorBob()"?) that searches for all code marked "sinful" and marks them for salvation would be the ideal.
I've had many other developers call upon my work with, for example, doubles where there should be ints, and vice versa. I'd like to see an enforced type safety mechanism, possibly boxed data types, to prevent this. 
Integers, for example, would become... VigilInts.
Any section of code that attempts to coerce a data type is WRONG and must be punished. Casting is acceptable as it allows the caller to acknowledge the risks, but type coercion is unacceptable.
Eternal VigilInts.
@munificent 

https://bitbucket.org/ifknot/vigil/overview
Vigil punishes its own punish function. Is this according spec?

```
The ever vigilant watchers of your code have found malfeasance in:

def punish(line, offense):
Crime: Raised 'list assignment index out of range' which was not caught.

Each has been dealt an appropriate punishment.
```

The problem of Vigil is that it tries to punish a program. But not a program is a subject of programming, but a programmer.

By tracking (using Git or however) what programmer has implemented a function, it can punish programmers instead (probably in addition to removing the offending function).

It may work with a help of Arduino/RaspberryPi and some external cirtuit.

Being obviously more efficient, it has luxury to also be merciful, so that punishment needn't be lethal.

Vigil used to crash when an error occured in the last line of a source file. We must remain vigilant and not let errors like this slip.

After modifying the swear example to make sure that every single function would be deleted, I was faced with the problem that vigil doesn't want to punish the main function. If the main function happens to call functions that were deleted, the main function is a bad girl and must be punished! Instead, this is what happens:

```
uncaught error from line  4
Traceback (most recent call last):
  File "./vigil", line 94, in <module>
    exec(source)
  File "<string>", line 10, in <module>
  File "./vigil", line 76, in vigil_uncaught
    punish(raise_line, "Raised '%s' which was not caught." % sys.exc_info()[1])
  File "./vigil", line 36, in punish
    source_lines[i] = ''
IndexError: list assignment index out of range
```

Here is what's on the source file after vigil has punished everything into oblivion.

```
# This shows what happens when a function fails to keep its oath.

def main():
    innocent_fn()
    innocent_fn()

```

How can we consider vigil the Batman of programming languages when main is above them all? Justice must be blind and applied to everybody!

I admire thine courage of heart and fortitude of will in creating Vigil.

It's bright and noble light pierces the thickest darkness, and hath borne lasting piece and goodness in mine programmes. Such brave and righteous code this land ne'er hath seen.

Proud sire, continue to inspire the hearts and minds of men. You possess the spirit of so many champions before. God be praised.

Background: we observed in our codebase a comment warning obliquely of some problem.  When we came to find when or why this source comment was added, we found one large CVS (now in Git) commit with the _wrong_ commit comment `*** empty log message ***`.

Request: pre-compilation pass to ascertain blame for all input files, and punish those which were added _wrongly_ all those years ago.  Code isn't even in version control?  Well that will be quick to deal with.

This is an idle feature request / idea, since almost all our code is written in a shameless language where there "more than one way to do it". Hope you don't mind,

Philosophically, shouldn't the function that fails to catch an exception instead of the unhandled thrower be considered sinful?

If we followed the current logic we might declare the callee of implore to be sinful for asking too much, and the caller of swear to be impure for calling a bad function.
