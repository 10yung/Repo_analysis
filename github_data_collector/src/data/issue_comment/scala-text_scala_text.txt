わざと入れてないのか、とくに深く考えてなかったのか謎だが、説明あってもいい気がした
https://github.com/tpolecat/tut/commit/49383af8de7e0046e3dc27afdaab870cf1fee4c3
ライセンスをCC-BY-NC-SA 3.0からCC-BY-SA 4.0に変更する提案。

ドワンゴからJSAに権利譲渡されたことにより、ライセンスにNon Commercialを入れておく理由はなくなった。

提案する変更は、`README.md`, `src/INTRODUCION.md`のライセンス表記を以下のように変更する。

```
本文書は、[CC BY-SA 4.0](https://creativecommons.org/licenses/by-sa/4.0/)

![CC-BY-SA](https://i.creativecommons.org/l/by-sa/4.0/88x31.png)

の元で配布されています。
```

また、慣習に従い、ルートディレクトリ直下に`LICENSE`というファイルを作成し、同様のライセンス表記を記述する。
https://github.com/scalajp/scala_text/issues/510#issuecomment-536430985

- 別の方法を探す？
- 大きな不都合が出てくるまで、このまま騙し騙しgitbook-cli使う？
- その他
たぶんgitbookのなにかのplugin

![スクリーンショット 2019-10-01 15 51 57](https://user-images.githubusercontent.com/389787/65940429-79ed4980-e463-11e9-8716-c8a174a6d5d3.png)


travis-ciは適当なubuntuのLTSを使うようになっている。

どうせそのうち必要になるので、(travis-ci側からの強制アップデートを待たずに)早めにやってしまってもいいかもしれない。
とはいえ、2019年の前半にtrustyからxenialに強制アップデートされたばかりなので、bionicに強制アップデートされるのは、xenialのサポートが完全に切れる頃？なので、そんなに急ぐ必要もないはず(たぶん・・・) https://blog.travis-ci.com/2019-04-15-xenial-default-build-environment

以下、現時点で、必要だとわかっていること(これ以外にもあるかも？)

- https://github.com/scalajp/scala_text_pdf/pull/5 https://qiita.com/yyu/items/e0ed267df132795b7a5a openssl 1.1使う関係上deploy keyを登録し直す？
- https://twitter.com/xuwei_k/status/1178533028261318656 openjdk8と書くだけでは使えないっぽいので、jdk8を使い続けるなら、他のインストール方法にする。あるいはjdk11でビルドするように変えてしまう
当面、「Scala初学者向け」の改良を重視していく予定ですが、今後の方向性について何か意見があれば、どしどしこのissueで提案をいただければと思います。

- 現在、一部の節には、理解度を確認するための練習問題があるが、練習問題がない節も多い。
- 練習問題には模範解答がついているが、模範解答の解説がない

ということで、

- 練習問題を増やす
- 模範解答に解説を入れる

ようにしたい。
[class.md](https://github.com/dwango/scala_text/blob/e4dd1053ada11c9350fa804306ae7abe27d20b79/src/class.md)の継承の冒頭で

> クラスのもう1つの機能は、継承です。

とありますが、これより前で「クラスの1つの機能は～です」や、「クラスには2つの機能があります。まず最初の機能ですが」のような説明はなかったように思います。

また、この冒頭の説明全体がバラバラとした感じを受けます。

* 用語を説明なしに使っていて分かりにくい
    * 実装の再利用と処理の共通化の違いは？実装の再利用はスーパークラスに処理を共通化しているとみなせない？
* 説明があっちこっちに言っており、何が伝えたいことなのか分かりにくい
    * 「複数の実装の継承はメンバーの名前が衝突する場合の振舞いなどに問題がある」「Javaでは実装継承は1つまで」「Java8ではインターフェイスにデフォルト実装が持たせられる(ので複数の実装の継承ができるということが言いたい？でも本文中では何も言っていないし、前の文と矛盾する)」「Scalaではトレイトを使って複数の実装の継承ができる(後で説明するとしており、最初に述べた問題が解決されているかどうかの情報はここでは得られない)」
* 表現が分かりにくい
    * 「ここでは通常のScalaのクラスの継承について説明します(通常ではないScalaのクラスがある？通常ではない継承がある？通常の、に意味は特になく筆が滑っただけ？)」