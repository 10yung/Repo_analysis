Added PubSub Implementation in documentation
<!--**Issue Labels**

While not necessary, you can help organize our issues by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [x] feature
- [ ] blocking
- [ ] good first issue

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->

It would be nice to support returning a promise of an AsyncIterator as the ResolverFn. This is also supported in graphql-js https://github.com/graphql/graphql-js/pull/918

This would enable use cases like https://github.com/MichalLytek/type-graphql/issues/470 where we could handle authorization at the topics/resolver level of a subscription, rather than within the filter.
`withFilter` function is causing memory leak because of Promise spec. Related: nodejs/node#6673.

This is a big problem when you have long living subscriber to subscription who skips most of messages (all Promises in recursion chain are kept in memory).

**How to reproduce:**

Start a subscriber to a subscription which rejects messages and start publishing messages. You'll notice memory keeps increasing. Memory profile will confirm.

Solved by #209 

- [x] has-reproduction
- [ ] feature
- [ ] blocking
- [ ] good first issue
I'm trying to understand how the following three heavily overlapping docs relate to each other:

1. [this `apollographql/graphql-subscriptions` README](https://github.com/apollographql/graphql-subscriptions)
2. this ["graphql-subscriptions" guide](https://www.apollographql.com/docs/graphql-subscriptions/subscriptions-to-schema/)
   * note that the "Edit on GitHub" link on that page points to a different repo, not this one, even though this repo *is* "graphql-subscriptions"
3. https://www.apollographql.com/docs/apollo-server/data/subscriptions/


`withFilter` function is causing memory leak because of Promise spec. Related: https://github.com/nodejs/node/issues/6673.

This is a big problem when you have long living subscriber to subscription who skips most of messages (all Promises in recursion chain are kept in memory).

**How to reproduce:**

Start a subscriber to a subscription which rejects messages and start publishing messages. You'll notice memory keeps increasing. Memory profile will confirm.  
Do the same thing using refactored `withFilter` and you'll notice memory is not increasing.

**Pull Request Labels**

- [x] has-reproduction
- [ ] feature
- [ ] blocking
- [x] good first review


Fixes #212 
<!--**Pull Request Labels**

While not necessary, you can help organize our pull requests by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [ ] feature
- [ ] blocking
- [ ] good first review

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->

Have `next` check that the async iterator hasn't already completed.
<!--**Issue Labels**

While not necessary, you can help organize our issues by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [x] feature
- [ ] blocking
- [ ] good first issue

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->
Hey, 

I would like you to consider using server sent events by default and suggest this approach to the people, as we saw here in a lot of live-examples, that using websockets together with async interators in production could be a very explosive mixture. 

https://www.smashingmagazine.com/2018/02/sse-websockets-data-flow-http2/

1. Maybe we could together develop a more common solution, which is inspired from: https://github.com/CodeCommission/subscriptions-transport-sse?

2. I am asking myself, why we are forced to use async-iterators as a technology, which seems to be not really ready for production purposes? Is there any alternative?

Cheers!
added new subscription package


<!--**Pull Request Labels**

While not necessary, you can help organize our pull requests by labeling this issue when you open it.  To add a label automatically, simply [x] mark the appropriate box below:

- [ ] has-reproduction
- [ ] feature
- [ ] blocking
- [ ] good first review

To add a label not listed above, simply place `/label another-label-name` on a line by itself.
-->
The following snippet will result in an iterator promise returned by `next()` that never resolves:

```js
const iterator = new PubSub().asyncIterator();
const promise = iterator.next();
iterator.return();
await promise; // will wait forever
```

The trick is that `return()` gets called synchronously while the first call to `next()` is still setting up its subscriptions.

This appears to be a regression since 1.0 since I have a test suite that was green and started failing on this issue when I upgraded to 1.1.

I have tried various solutions, including monkey-patching `emptyQueue()` like this:

```js
PubSubAsyncIterator.prototype.emptyQueue = async function() {
    if (this.running) {
        this.running = false;
        this.pullQueue.forEach(resolve => resolve({ value: undefined, done: true }));
        this.pullQueue.length = 0;
        this.pushQueue.length = 0;
        const subscriptionIds = await this.allSubscribed;
        if (subscriptionIds) {
            this.unsubscribeAll(subscriptionIds);
        }
        // This one should make sure new next() calls while we were awaiting and resolved:
        this.pullQueue.forEach(resolve => resolve({ value: undefined, done: true }));
    }
};
```

~~But interestingly, doing so made other tests in my suite fail for reasons I'm afraid I don't understand right now...~~ Ignore this last part, that failure seemed to be caused by me mis-using Jest's `.resolves` method (forgetting to `await` it).