`e.g.` is the correct form as what follows them are few examples and not an explanation
I can use curl http://localhost:3007/status to check test-start.sh ,but i can't use open http://localhost:3000/status in a web browser to verify
I wonder how to improve the amount of concurrency per second about Meshblu?
I run my own meshblu server and I have three devices as below:
Device A: e660ead1-8cb4-43df-844e-a78527068727
Device B: 4a237098-8138-40fd-be34-b09a59ad8f0f
Device C: c0661e74-be9e-48e3-9355-61b25ee986b5

I use Device A to send a message to Device B and expect Device C can also receive that message by creating "message.received" subscription. 
I use the meshblu-http-core-adapter-http-streaming to get the message but only Device C have the message delivered, not the Device C.
Could you help me to make it work? Thanks a lot.
*****
Message sent by Device A:
{"devices":["4a237098-8138-40fd-be34-b09a59ad8f0f"],"payload":"test"}

Device B streaming result:
curl -X GET http://localhost:3002/subscribe --header "meshblu_auth_uuid:4a237098-8138-40fd-be34-b09a59ad8f0f" --header "meshblu_auth_token:da27762ecf18ed66cfa5b401d2156b7343203684"
{"devices":["4a237098-8138-40fd-be34-b09a59ad8f0f"],"payload":"test","fromUuid":"e660ead1-8cb4-43df-844e-a78527068727"}

Device C stream:
_curl -X GET http://localhost:3002/subscribe --header "meshblu_auth_uuid:c0661e74-be9e-48e3-9355-61b25ee986b5" --header "meshblu_auth_token:c05e217dc9fd54a6a572a45c5c1c1d5f88f0f259"
(no message received)

Subscription:
{
  "_id": "589c34120ef1fb462ee84b99",
  "subscriberUuid": "c0661e74-be9e-48e3-9355-61b25ee986b5",
  "emitterUuid": "4a237098-8138-40fd-be34-b09a59ad8f0f",
  "type": "message.received"
}

Device B whitelist:
{
    "_id": ObjectId("589c32380d432e588c133a78"),
    "online": false,
    "meshblu": {
        "whitelists": {
            "message": {
                **"received": [
                    {
                        "uuid": "c0661e74-be9e-48e3-9355-61b25ee986b5"
                    }
                ]**,
                "from": [
                    {
                        "uuid": "*"
                    }
                ]
            }
        },
        "version": "2.0.0",
        "createdAt": ISODate("2017-02-09T09:11:20.323Z"),
        "hash": "mTZGAPDi8r4Lk3PTeLe42Kp0aCR5PRBJz125Ek6exnU="
    },
    "uuid": "4a237098-8138-40fd-be34-b09a59ad8f0f",
    "token": "$2a$08$EeQeZow9GtlEBWUzRhYKhut67ic0NbVJhDIiE6MtducJ/yEUUowZe"
}


Add optional support for Socket.io and Websocket protocols in the bundled meshblu library.
Hello,
I met below issues on “broadcast messages” function in WebSocket protocol by using Meshblu 4.0.1 instead of Meshblu 1.18.4.

Test scenario:

1. Register device#1 and device#2 with WebSocket protocol.
2. Device#2 subscribes device#1, and set it online.
3. Set device#1 online, and broadcast a message.
4. Observe that device#2 received two duplicated messages from device#1.
 
![2](https://cloud.githubusercontent.com/assets/20715688/22063913/3aac1cde-ddbc-11e6-9ffc-e02c8434a104.png)


Is this a bug or new feature? 
@chrismatthieu 

Hi~
Recently, I got a necessity of data forwarder.
So, to know how to use it and verify it works properly,
I used https://github.com/octoblu/data-forwarder-mongodb

But I recognized it does not work corretly.
So, digged into meshblu, and found some clues and fixed those.
However, I'm not a meshblu developer, so I am not sure it's fine.
My fixing is below to run https://github.com/octoblu/data-forwarder-mongodb
### 1) lib/SubscriptionGetter.coffee

8, 9 line has function name of _"broadcast"_ and _"config"_, but does not have about _"received"_.
So, I appended _received: 'canReceive_' to _SECURITY_MAP_

@SECURITY_MAP:
    broadcast: 'canReceive'
    config: 'canDiscover'
    received: 'canReceive'
### 2) src/publish-forwarder.coffee

structure of meshblu.forwarder is

  _"meshblu": {
      "version": "2.0.0",
      "forwarders": {
          "message": {
              "received": [...]
          },
          "broadcast": {
              "received": [...]
          }
      },_

so I fix the code
_forwarders = attributes.meshblu?.forwarders?[type] || []_
to
_forwarders = attributes.meshblu?.forwarders?.message?[type] || []_
### 3) src/controllers/device-controller.coffee in https://github.com/octoblu/data-forwarder-mongodb

fix
messageReceived = {subscriberUuid: uuid, emitterUuid: uuid, type: _'message.received'_}
broadcastReceived = {subscriberUuid: uuid, emitterUuid: uuid, type: _'broadcast.received'_}
to
messageReceived = {subscriberUuid: uuid, emitterUuid: uuid, type: _'received'_}
broadcastReceived = {subscriberUuid: uuid, emitterUuid: uuid, type: _'broadcast'_}
### 4) example.sh in https://github.com/octoblu/data-forwarder-mongodb

fix the type of _message.received_ to _received_

_meshblu-util subscription-create -s $FORWARDER_DEVICE_UUID -e $RECEIVER_DEVICE_UUID -t received ./tmp/data-forwarder-meshblu.json_

I just tested it and had proper work.
Could you scrutinize that it is suitable?
Thanks in advance.

p.s) If you want, I can give diff.

(This issue is somewhat related to issue #128 )

I want to make 2 devices `talk` to each other via different protocols. To connect to `Meshblu`, I have:

**Device A - Publisher**

`A` uses `WebSocket` to connect to `Meshblu`, publishing broadcast messages periodically: 

``` js
var meshblu = require('meshblu');
var config = {
    "uuid": "e5102de3-737b-4952-9fd5-e9ddfa953c97",
    "token": "2b6d92b6c4a6d51f9a82465d4260113d5f93f551",
    "hostname": "meshblu.octoblu.com",
    "port": 9630
}
var conn = meshblu.createConnection(config);

conn.on('ready', function(data){
    setInterval(function(){
        console.log("sending message");
        conn.message({
            "devices": "*",
            "payload": {
                "hello":"world"
            }
        });
    },300);
});
```

A is already configured to allow any device receiving its broadcast messages: 

``` js
"receiveWhitelist": [
        "*"
],
```

**Device B - Subscriber**

`B` uses `MQTT` , subscribing to `A` to receive messages

``` js
var Meshblu = require('meshblu-mqtt');
var config = {
    "uuid": "9f9366a5-c738-4a59-b681-a8964c0b4d7f",
    "token": "933093e4c2fc1522b49568e45a4cb80e316b7a68",
    "hostname": "meshblu.octoblu.com",
    "port": 1883
}

var conn = new Meshblu(config);
conn.connect(function(response){
    console.log('------------------------');
    console.log(response);
    console.log('------------------------');

    // subscribe to A
    conn.subscribe("e5102de3-737b-4952-9fd5-e9ddfa953c97", function(data){
        console.log(data)
    });

    conn.on('message', function(data){
        console.log('message received');
        console.log(data);
    });
})
```

**The problem**
`B` can't receive any message from `A`
