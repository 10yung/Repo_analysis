Hello im trying to use react apollo hooks library to connect to a graphql backend  but give me this error in render:
TypeError: Object(...) is not a function
    at Module.useMutation

this is my component:
 
import * as RX from 'reactxp';

import gql from 'graphql-tag'
import { useMutation } from '@apollo/react-hooks';

const CREATEDRAFT_MUTATION = gql`
mutation CreateDraft($title: String!, $content: String!, $imaginaryPartX: [Float!], $imaginaryPartY: [Float!], $IterMAX: Int!, $NDMAX: Int!, $dataType: String!, $materialType: String!) {
    createDraft(title: $title, content: $content, imaginaryPartX: $imaginaryPartX,  imaginaryPartY: $imaginaryPartY, IterMAX: $IterMAX, NDMAX: $NDMAX, dataType: $dataType, materialType: $materialType ) {
                    title
                    content
                    dataType                    
                    materialType                    
                    imaginaryPartX
                    imaginaryPartY
                    dfImaginaryPartX
                    dfImaginaryPartY
                    dfRealPartX
                    dfRealPartY                   
    }
  }
`

const BtnDraft= ({title,content,imaginaryPartX,imaginaryPartY, IterMAX, NDMAX, dataType, materialType}:{title:string,content:string,imaginaryPartX:number[],imaginaryPartY:number[], IterMAX:number, NDMAX:number, dataType: string, materialType:string}) => {
  
    const [addTodo, { data }] = useMutation(CREATEDRAFT_MUTATION);
   
  return (    
  <RX.View>
    {data?'success':''}
    <RX.Button onPress={(e)=> {
            e.preventDefault();
            addTodo({ variables: ({ title,content,imaginaryPartX,imaginaryPartY,
              IterMAX, NDMAX, dataType,materialType} )
          })}}>Execute</RX.Button></RX.View>
  );
  };
  
export default BtnDraft;

And my import:

     <BtnDraft title={this.state.title} content={this.state.content} imaginaryPartX={this.state.imaginaryPartX} 
                            imaginaryPartY={this.state.imaginaryPartY} dataType={this.state.dataType} materialType={this.state.materialType}
                            IterMAX={this.state.IterMAX} NDMAX={this.state.NDMAX}/>

Is a problem of reactxp or apollo? .. im getting this error with Urql librate too
We are using a timing animation in our button component and generate snapshots from our Storybook stories by using the storyshots addon.

When we generate our snapshots we get the following error when we are using the timing animation: _Cannot set property 'transform' of undefined_.

Any thoughts on this particular issue?
I don't see an easy quick way to see ReactXP in action without cloning the project.

Ideally there should be a demo link that we could play with. Also, the docs should inline the components instead of only listing the props. 

This could increase the number of people that at least explore ReactXP.
What do you (@deregtd, @berickson1, @erictraut) think about reducing ReactXP size? 

ReactXP has a [significant size](https://bundlephobia.com/result?p=reactxp@2.0.0-rc.1), especially it is important for the web version.

_Maybe the following issues are related  #970 #969_ 


When showing a modal, the surrounding div seems to have hard coded styles

```
    display: flex;
    position: fixed;
    left: 0px;
    right: 0px;
    top: 0px;
    bottom: 0px;
    justify-content: center;
    align-items: center;
    flex-direction: column;
    flex: 1 1 auto;
    align-self: stretch;
    overflow: hidden;
    z-index: 10000;
```

How can we make the background dim?

Implementation is just the same as the doc's modal example.
HI, i was trying to implement reactxp with threejs but i dont know how to do it... anyone have any example? Thanks.
I have a `GestureView`  contained inside a `Scrollview` with 100% width and height. It is being used to detect swipe/pan left/right within the scrollview, works fine for web and ios however seems to block scrolling or conflict with scrolling in the scrollview on android only
Our reactxp/electron app has started to trigger an assertion in FocusManager when it tries using restrictFocusWithin:

> Uncaught Error: Unable to find node on an unmounted component.
>     at invariant (bundle.js:114271)
>     at findCurrentFiberUsingSlowPath (bundle.js:118382)
>     at findCurrentHostFiber (bundle.js:118451)
>     at findHostInstanceWithWarning (bundle.js:134845)
>     at Object.findDOMNode (bundle.js:135397)
>     at FocusManager../node_modules/reactxp/dist/web/utils/FocusManager.js.FocusManager._updateComponentFocusRestriction (bundle.js:331640)
>     at bundle.js:323340
>     at Array.forEach (<anonymous>)
>     at FocusManager../node_modules/reactxp/dist/common/utils/FocusManager.js.FocusManager._removeFocusRestriction (bundle.js:323337)
>     at FocusManager../node_modules/reactxp/dist/common/utils/FocusManager.js.FocusManager.restrictFocusWithin (bundle.js:323177)

This seems to happen randomly (we have not found a reliable repro).  In the past, we've seen it be caused by controls that are added/removed from the hierarchy relatively quickly.

When the app randomly got into this state, I tried debugging to see what was going on.  From what I could understand by looking at the code, FocusManager stores a list of all tabbable/focusable components in the app (added/removed on mount/unmount).  When restrictFocusWithin is used to restrict tabbable items, FocusManager iterates through this collection of stored components and disables their tabIndex so only the children of the component will be tabbable.  When it iterates through each component, the process first makes sure that the given component is still mounted (the assertion), and this is what is being tripped in our app.  I used the debug session to see which component had been unmounted and was causing the assertion to through, but it appeared that _every_ component that was being checked was tripping this assertion.  Most (if not all) of these components should _not_ have been unmounted, so something strange is making the following assertion code think that they aren't mounted...

```
function assertIsMounted(fiber) {
  !(isFiberMountedImpl(fiber) === MOUNTED) ? invariant(false, 'Unable to find node on an unmounted component.') : void 0;
}
```

Has this issue been seen before when using restrictFocusWithin?  Would anybody know how components might get into this state (i.e., tripping this assertion when the component should still be mounted)?  Is there a race case where the app might refresh and the stored components list in FocusManager might be getting out of sync?  When this breaks in our app, it is broken until the app is killed and restarted (meaning all of our modals and other components that use FocusManager/restrictFocusWithin don't work).



Hi All,

Thanks for the great work on this library, I am thoroughly enjoying using it in my first ReactXP project. 

I'm busy doing an accessibility pass on my components and noticed that the Link component does not accept the "accessibilityLabel" prop. Is there a reason for this? 
I am testing incoming deep linking on Android with the goal of being able to share images from the Gallery app to my RX app. The code in my app is:
```
RX.Linking.deepLinkRequestEvent.subscribe(event => {
   console.log(event);
   // do something here
});
```
The intent in AndroidManifest.xml is:
```
<intent-filter>
   <action android:name="android.intent.action.SEND" />
   <category android:name="android.intent.category.DEFAULT" />
   <data android:mimeType="image/*" />
</intent-filter>
```
I also added `android:launchMode="singleInstance"` as an activity parameter to ensure that the launched instance is the one with the already subscribed event.

The app instance launches correctly from the background when clicking the app icon in the "Share via" menu in the Gallery app, but the deepLinkRequestEvent never triggers.

My code is in the same section with `RX.App.activationStateChangedEvent` and `RX.Network.connectivityChangedEvent`, which both trigger correctly on their respective events.

Am I missing something on how to implement deep linking with ReactXP?