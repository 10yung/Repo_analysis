## Problem statement
On go-swagger v0.21.0, if you annotate a struct with swagger:type, the indicated type will not be used in generated spec.  swagger.json will still have a $ref to the struct's type instead.  Old, GOPATH dependent versions such as v0.17.x used to handle this correctly, but my project/team has otherwise moved to go mod.

Example code:
```
// Request data for a ObjectGet
// swagger:parameters ObjectGet
type ObjectGetRequestWrapper struct {
	// ID
	//
	// in: path
	ID SpecialNumber `json:"id"`
}

// Special validated number string represented as int64 for use as an object id
// swagger:type int64
type SpecialNumber struct {
	Numb string
	Valid bool
}
```

Results in:

```
        "operationId": "ObjectGet",
        "parameters": [
          {
            "$ref": "#/definitions/SpecialNumber",
            "x-go-name": "ID",
            "description": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
```

Instead of:
```
        "operationId": "ObjectGet",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "x-go-name": "ID",
            "description": "ID",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
```

## Steps to reproduce
generate spec using attached api.go
[api.go.zip](https://github.com/go-swagger/go-swagger/files/4075541/api.go.zip)
 as source on go-swagger v0.21.0 (or HEAD of master at time of writing)

## Environment
swagger version: 0.21.0  
go version: 1.13.1  
OS:  macOS 10.15.2
## Problem statement

`go-swagger` generates different specs from the same codebase in repeated runs. The reason for this is a swagger annotated type embedding another one.

## Swagger specification

None.

## Steps to reproduce

Clone https://github.com/lukasmalkmus/swagger-issue
Follow the `README.md`

## Environment
swagger version: 0.21.0  
go version: 1.13.6  
OS:   macOS

I haven't had a deeper look yet. But the generator seems to act on one of the two types in question randomly. Since I usually trust the stdlib when it comes to loading the code packages, I suspect the bug in question could be caused by getting data from a map (since maps are randomly orderer, we get different types on different runs).
## Problem statement

When using and endpoint that consumes multipart/form-data, non-file parameters are not properly obtained.  After calling `r.ParseMultipartForm()`, `r.Form` is used for `runtime.Values`, when `r.Form` would be empty, since all the data is contained in `r.MultipartForm` instead.

## Swagger specification

```
post:
  description: Upload file and give it an iD
  operationId: UploadFile
  consumes:
    - multipart/form-data
  parameters:
    - name: id
      in: formData
      required: true
      type: string
      format: uuid
    - name: fileData
      in: formData
      required: true
      type: file
  responses:
    200:
      description: OK
```

## Steps to reproduce

1. Call endpoint with all required fields (`id` and `fileData`).
2. Get a 422 with `id` being required, even though it was provided.

## Environment
swagger version: 0.21.0  
go version: 1.13.3
OS: Debian bullseye/sid

Draft work to address a number of package import mangling issues.
Lean on previous preliminary refactoring work from PRs   #2177 and #2173 
It seems an important feature.

Hope go-swagger have it.
* replaced deprecated gem install options, which are no more supported by gem

Trying to address this CI failure:
https://app.circleci.com/jobs/github/go-swagger/go-swagger/4135

Signed-off-by: Frederic BIDON <fredbi@yahoo.com>
NO BEHAVIOR CHANGE EXPECTED

* removed some (most) redundant code (left redundancies that would introduce change in behavior to forthcoming PRs)
* factorized spec loading/validating/flattening operations (new spec.go file)
* regrouped state init() function calls
* reduced the number of global vars and replaced them by functions
* adapted template repo to initialize from language options, with adequate template FuncMap
* made DefaultLanguage a configurable function
* moved global golang-specific function to LangueOpts (new language.go file)
* testability: functionalized a number of hard to test code (e.g. all funcmap entries), and introduced unit testing

* started, but did not complete yet the rewriting of unit tests using 'require' instead of nested constructs with 'assert'

Signed-off-by: Frederic BIDON <fredbi@yahoo.com>
This is a continuation of #744 

This spike provides the support for the schema generation of enums


```go
// swagger:enum Level
type Level string

const (
	LEVEL_1 Level = "ONE"
	LEVEL_2 Level = "TWO"
	LEVEL_3 Level = "THREE"
)

// swagger:enum LevelInt
type LevelInt int

const (
	LEVEL_INT_1 LevelInt = 1
	LEVEL_INT_2 LevelInt = 2
	LEVEL_INT_3 LevelInt = 3
)

// swagger:model
type Model struct {
	level    Level
	levelInt LevelInt
}
```

will be

```yaml
definitions:
  Model:
    type: "object"
    properties:
      level: 
        type: "string"
        enum: 
          - "ONE"
          - "TWO"
          - "THREE"
      levelInt: 
        type: "integer"
        enum: 
          - 1
          - 2
          - 3
```

I don't understand how to handle oAuth token expiration/refresh when using go-swagger generated clients. Where does the code to make the request to the refresh endpoint go? How do I get the new token data base to store somewhere? 
## Problem statement
When I generate client including a definition with x-go-type in Body, the code doesn't compile at 
https://github.com/kathra-project/kathra-resourcemanager-client-go/blob/238c2673ed03f0a60b148daf0abd592980483fdc/client/users/add_user_parameters.go#L129
The message : cannot convert nil to type models.User

Because structs generated for parameters contain body properties as value, not a pointer.
https://github.com/kathra-project/kathra-resourcemanager-client-go/blob/238c2673ed03f0a60b148daf0abd592980483fdc/client/users/add_user_parameters.go#L70

## Swagger specification
Specs for client : https://gitlab.com/kathra/specifications/raw/feature/catalogManager/Services/catalogmanager/swagger.yaml
Specs for model : https://gitlab.com/kathra/specifications/raw/feature/catalogManager/Services/core/swagger.yaml

## Environment
swagger version: 0.21.0
go version: 1.13.3
OS: Ubuntu 19.06
