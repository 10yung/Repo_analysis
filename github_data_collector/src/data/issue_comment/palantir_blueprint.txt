Steps: 
1) Navigate to https://blueprintjs.com/docs/#core/components/dialog
2) Click open dialog
3) Resize the window so the scrollbars appears
4) Click on the scrollbar to view the bottom of the modal.
5) You'll see the dialog disappear and the user may not be able to get back to the contents of the dialog.
fixes #3903 
#### Environment

- __Package version(s)__: 3.22.3
- __Browser and OS versions__: Google Chrome 79.0.3945.117, Mac OS X 10.15.2

If possible, link to a minimal repro: *So far, unable to repro outside of our App*.

#### Steps to reproduce

1. Have an overlay appear.
2. Click on it to give it focus.

#### Actual behavior

Get the following crash:

```
TypeError: Failed to execute 'contains' on 'Node': parameter 1 is not of type 'Node'.
Overlay._this.handleDocumentFocus
src/components/overlay/overlay.tsx:437
This screen is visible only in development. It will not appear if the app crashes in production.
Open your browser’s developer console to further inspect this error.
```

#### Expected behavior

For it to just focus.

#### Possible solution

We do extend the Overlay with this component:

```jsx
            <BPOverlay usePortal={false} isOpen={this.showOverlay}>
                <Card className="non-ideal-overlay-card">
                    <NonIdealState title={this.title}
                        description={this.description}
                        icon={this.icon} />
                    <div className={'overlay-additional-content'}>
                        {this.additionalContent}
                    </div>
                </Card>
            </BPOverlay>
        );
```

However, we're not touching the `handleDocumentFocus` method — any ideas as to what may be going on here? We're using TypeScript 3.7.4, and we were also able to repro this in an older version as well.
#### Environment

- __Package version(s)__: 3.22.0
- __Browser and OS versions__: Internet Explorer 11.0.9600.19541

#### Steps to reproduce

1. Ignore all modern browsers on your computer and instead open Internet Explorer 11
2. Browse to https://blueprintjs.com/docs/#core/components/button
3. Switch on `Loading` prop

#### Actual behavior

The loading button spinner is not positioned correctly.
![blueprint-button-loading-ie](https://user-images.githubusercontent.com/531798/72527446-b309c800-3860-11ea-838b-fb518f56ff47.gif)

#### Expected behavior

The loading spinner should be centered vertically and horizontally in the button.
#3502 ## Environment

- __Package version(s)__: 3.15.1
- __Browser and OS versions__: Chrome 79.0.3945.117 (Official Build) (64-bit)

#### Steps to reproduce
I have a class that displays a bread crumb for each directory in a path. I show this in my dialog which is 1000 pixels wide.

Below is my class:

`export interface IFolderBreadCrumbsProps {
    className?: string;
    path: string;
    minVisibleItems?: number;
    onBreadCrumbClicked(path: string) : void;
}
export class FolderBreadCrumbs extends React.PureComponent<IFolderBreadCrumbsProps, {}> {

    public render() : JSX.Element {
        const {minVisibleItems, path} = this.props;
        const crumbs = this.makeBreadcrumbs(path);
        return (
            <Breadcrumbs
                className={this.props.className}
                minVisibleItems={minVisibleItems} 
                items={crumbs}/>
        );
    }
    
    public makeBreadcrumbs(path: string) : IBreadcrumbProps[] {
        let target = "/";
        const pathSegments = path.split("/");
        const breadcrumbs: IBreadcrumbProps[] = [{
            text: "My Files",
            target,
            current: pathSegments.length === 0,
            onClick: this.handleOnBreadcrumbClick
        }];
        if (pathSegments.length > 1) {
            for (let i = 1; i < pathSegments.length; i++) {
                target += pathSegments[i];
                breadcrumbs.push({
                    text: pathSegments[i],
                    target,
                    current: pathSegments.length === 0,
                    onClick: this.handleOnBreadcrumbClick

                });
                target += "/";                
            }
        }
        return breadcrumbs;
    }
    private handleOnBreadcrumbClick = (event: React.MouseEvent<HTMLElement>) : void => {
        const aElement = event.currentTarget as HTMLLinkElement;
        const target = aElement.target;
        this.props.onBreadCrumbClicked(target);
    }
}`

#### Actual behavior
1. If the path is really long and each breadcrumb has more than one word, the words wrap.
![BreadCrumbWrapping](https://user-images.githubusercontent.com/6082350/72483311-62896080-37b5-11ea-8cf6-ec0b6e9f57c5.png)
2. If the path is so long that the overflow menu is visible, tabbing does not take you to the overflow menu - instead it takes you to the first un-overflowed item.
3. Clicking the space bar or enter key (not sure which one should work here) does not call the crumb's onClick method

#### Expected behavior
1. I do not want my crumbs to wrap
2. I want to be able to tab to the overflow menu
3. I want to click the space bar or enter key (not sure which one should work here) and
   if the overflow menu has focus I want the menu to display
   if a bread crumb has focus, I want the OnClick method to be called.

#### Possible solution
1. Add tabIndex to the overflow menu
2. Prevent wrapping for the breadcrumb text
3. Have the breadcrumb code catch the appropriate keys and call the onClick method.
<!-- IF YOU ARE A PALANTIR EMPLOYEE, DO NOT POST INTERNAL LINKS OR REFERENCES HERE -->

#### Environment

- __Package version(s)__: @blueprintjs/table: 3.8.2
- __Browser and OS versions__: Chrome: v79.0.3945.117, Windows 10 v1903

If possible, link to a minimal repro: https://codesandbox.io/s/blueprint-interactive-cell-checkbox-bug-8vnlk?fontsize=14&hidenavigation=1&theme=dark

#### Steps to reproduce

1. In the above CodeSandbox link click a checkbox in the table.
2. Notice that the table row highlights but the Checkbox stays unchecked.
1. Click the checkbox again and now it finally re-renders in checked state.

#### Actual behavior

The cellRenderer function for the checkbox Column is not being called upon state change of which rows are selected. This causes the checkbox and the row highlight to become out of sync.

**EDIT:** It appears that if I set the data limit to 10 records the bug goes away and works as I intended. If it's anything higher than 10 the bug reappears.

**EDIT 2:** Setting the renderMode to NONE also seems to fix the bug. But, I lose performance with large data sets.

#### Expected behavior

I expect the checkboxes to be in sync with the row highlight. The checkbox should require one click to toggle the selected state of the row.

#### Possible solution

I don't have a solution.
#### Environment

- __Package version(s)__: `@blueprintjs/core ^3.22.3`
- __Browser and OS versions__: Mac OS X Chrome 79.0.3945.88

If possible, link to a minimal repro (fork [this code sandbox](https://codesandbox.io/s/blueprint-sandbox-et9xy)): <!-- here -->

#### Steps to reproduce

Spotted this while building a `<ControlGroup>` that contained buttons, selects, and some dividers.

```tsx
<ControlGroup>
    // ...Other controls...
    <Button />
    <Divider />
    <Button />
    // ...Other controls...
</ControlGroup>
```

#### Actual behavior

The divider doesn't have its usual `5px` padding. Instead, `<ControlGroup>` overrides with a default `-1px` padding for all controls.

#### Expected behavior

The divider should have a `5px` padding when inside a `<ControlGroup>.

#### Possible solution

```scss
// Special case for dividers
.bp3-control-group .bp3-divider {
    margin: 5px;
}
```

Labeling P3 because it's an easy 1-line fix of custom CSS for application authors. Filing quickly for tracking, but may be able to open a PR soon.
#### Part of #https://github.com/palantir/blueprint/issues/3877

#### Changes proposed in this pull request:

Convert the tslint custom rules to eslint.

Its been a while since I made these changes, we should probably check they all still work and are linked up correctly.

I'm not sure how I feel about the IconComponents rule - may be worth removing/updating? Its unclear to me why you would want to enforce anything other than `<Icon icon={IconClasses.ICON_NAME} />`
Has anyone expressed interest in a carousel component, something along the lines of this https://react-slick.neostack.com/ ?

Seems like a natural thing to include in Blueprint...
#### Environment

@blueprintjs/table:^3.8.1
Windows10 - Google Chrome 79.0.3945.88

#### Steps to reproduce

```
import React, { useState, useEffect } from 'react';

import { Table, Column, Cell } from '@blueprintjs/table';

const Test = () => {

    const [ count, setCount ] = useState(0);
    const [ data, setData ] = useState([]);

    const handleUpdate = () => {
        setCount(count + 1);
        setData([...Array(10).keys()].map((value) => {
            return {
                key1 : Math.random(),
                key2 : Math.random(),
                key3 : Math.random(),
            };
        }));
    };

    useEffect(() => {
        console.log(count, data);
    }, [ data ]);

    return (
        <div>
            <Table numRows={ 10 }>
                <Column cellRenderer={ rowIndex => (
                    <Cell>{ data[rowIndex] && data[rowIndex].key1 }</Cell>
                )} />
                <Column cellRenderer={ rowIndex => (
                    <Cell>{ data[rowIndex] && data[rowIndex].key2 }</Cell>
                )} />
                <Column cellRenderer={ rowIndex => (
                    <Cell>{ data[rowIndex] && data[rowIndex].key3 }</Cell>
                )} />
            </Table>

            <button onClick={() => handleUpdate()}>Update !</button>
            { count } clicked!
        </div>
    )
}

export default Test;

```

#### Actual behavior

The value is updated every two clicks on the update button.

#### Expected behavior

Update every time
