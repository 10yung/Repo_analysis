
* Tests the OCSP ResponseStatus cases
* Define `var ocspExtensionOID = asn1.ObjectIdentifier..` as integer slice literal just like `var idPKIXOCSPBasic = asn1.ObjectIdentifier(` in `ocsp.go`
This adds support for ExternalAccountBindings into the `crypto/acme` client.

It is based on section 7.3.4 of RFC8555: https://tools.ietf.org/html/rfc8555#section-7.3.4

I have tested this against Pebble with support for EABs https://github.com/letsencrypt/pebble/pull/288 as well as another CAs ACME implementation that requires EAB.

/cc @JoshVanL
Fixes #35506

Motivation:
1. According to: https://tools.ietf.org/html/rfc4880#section-9.4, all implementation must support SHA1, however when no preferred hash algorithms are specified, current implementation defaults to RIPEMD160.
2. gpg 2.0.22 on Linux defaults to SHA1 when no preferred hash algorithms are specified, and as it's the de-facto standard implementation it's probably not a bad idea to do the same.
3. Golang's current implementation of RSA PKCS1 v1.5 signatures with RIPEMD160 hash function is broken, because RIPEMD160 has the wrong hash prefix (I will open a separate PR for this issue). So, defaulting to RIPEMD160 creates signatures that no other implementation of PGP can verify.
Error of parsing certificate in the format pkcs12:
pkcs12: unknown attribute with OID 1.3.6.1.4.1.311.17.2

Updates golang/go#24325

The attribute is used in Windows IAS PEAP & LDAPS certificates with identifier: LOCAL_MACHINE_KEYSET ("Microsoft Local Key set")

The fix is based on the patch in OpenSSL (contributor: Steve Henson):
openssl/openssl@dd6e904

More info about problem:
https://www.cs.bham.ac.uk/~smp/resources/peap/
installed Golang version and architecture details : 
```
$ go env
GOARCH="amd64"
GOBIN=""
GOCACHE="/Users/Gaurav.k/Library/Caches/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="darwin"
GOOS="darwin"
GOPATH="/Users/Gaurav.k/Projects/GoProjects/"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/Cellar/go/1.12.4/libexec"
GOTMPDIR=""
GOTOOLDIR="/usr/local/Cellar/go/1.12.4/libexec/pkg/tool/darwin_amd64"
GCCGO="gccgo"
CC="clang"
CXX="clang++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/4_/703g62812t39dfmzfx4l7w3r0000gp/T/go-build267975514=/tmp/go-build -gno-record-gcc-switches -fno-common"
```
```
$ go version
go version go1.12.4 darwin/amd64
```

### What did you do? 
I'm trying to replicate following gpg command with `crypto/openpgp` package.
```
gpg --armor --output <outputfile > --cipher aes256 --compress-algo zip --s2k-digest-algo SHA256 --encrypt --recipient <userkey> --sign -u <privatekeyid>  <inputfile>
```
I'm using `crypto/openpgp` package to encrypt message with a public key and sign it with my private key. I'm using the `openpgp.Encrypt` method and passed following config as parameter: 
```
packetConfig := &packet.Config{
		DefaultCipher:          packet.CipherAES256,
		DefaultCompressionAlgo: packet.CompressionZIP,
		CompressionConfig: &packet.CompressionConfig{
			Level: flate.BestCompression,
		},
	}
```

### What did you expect to see?

I'm expected to see my plain text input message to be PGP encrypted and must have ZIP compression. 

### What did you see instead?
Message I get from `openpgp.Encrypt` method, is properly signed and encrypted but not compressed. 

### Resolution
Upon inspecting the Encrypt function and debugging the code, found out that it's not making use of compression config passed as argument anywhere in the flow. Made a change in write.go and added compression. After this change, the messages are properly encrypted and compressed. 








ctrl-c support
This change exports a new interface from the x/crypto/ssh library allowing an application to use this library's implementation of the SSH Connection Protocol (RFC 4254), but provide a separate implementation of the SSH Transport Protocol (RFC 4253).

Fixes golang/go#32958
