Labels can help in identifying a particular goroutine during debugging.

Fixes #1763
1. What version of Delve are you using (`dlv version`)?

```
Delve Debugger
Version: 1.3.2
Build: 9af1eac34150f3c18ea1473e9a0e5cc06bda3948
```

2. What version of Go are you using? (`go version`)?

```
go version go1.13.1 linux/amd64
```

3. What operating system and processor architecture are you using?

```
Linux ndxps 4.15.0-50-generic #54-Ubuntu SMP Mon May 6 18:46:08 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux
```

4. What did you do?

Debug from GoLand (delve is started with `dlv --log --log-output rpc --listen=localhost:39341 --headless=true --api-version=2 --check-go-version=false exec <binary> -- ` command). The program itself doesn't matter, result is the same. Delve is started under the same user as the IDE.

5. What did you expect to see?

A successful connection.

6. What did you see instead?

Connection rejected. Delve logs contain:

```
API server listening at: 127.0.0.1:39341 
2020/01/18 13:57:38 sameuser_linux.go:92: cannot check remote address: connection not found in /proc/net/tcp 
2020/01/18 13:57:38 sameuser_linux.go:95: closing connection from different user (127.0.0.1:34980): connections to localhost are only accepted from the same UNIX user for security reasons 
```

Content of the /proc/net/tcp at the moment of connection failure (my uid is 1000):

```
sl  local_address rem_address   st tx_queue rx_queue tr tm->when retrnsmt   uid  timeout inode                                                      
 0: 0100007F:61A9 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3342631 1 0000000000000000 100 0 0 10 0                    
 1: 0100007F:56EA 00000000:0000 0A 00000000:00000000 00:00000000 00000000   112        0 29079 1 0000000000000000 100 0 0 10 0                      
 2: 0100007F:A80B 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3215527 1 0000000000000000 100 0 0 10 0                    
 3: 0100007F:99AD 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3696353 1 0000000000000000 100 0 0 10 0                    
 4: 0100007F:138D 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3208823 1 0000000000000000 100 0 0 10 0                    
 5: 00000000:88CD 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 28047 1 0000000000000000 100 0 0 10 0                      
 6: 00000000:E7ED 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 26852 1 0000000000000000 100 0 0 10 0                      
 7: 0100007F:F76E 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3557281 1 0000000000000000 100 0 0 10 0                    
 8: 0100007F:F76F 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3210390 1 0000000000000000 100 0 0 10 0                    
 9: 00000000:006F 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 19881 1 0000000000000000 100 0 0 10 0                      
10: 0100007F:AC33 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3688034 1 0000000000000000 100 0 0 10 0                    
11: 0100007F:1733 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 34151 1 0000000000000000 100 0 0 10 0                      
12: 3500007F:0035 00000000:0000 0A 00000000:00000000 00:00000000 00000000   101        0 17350 1 0000000000000000 100 0 0 10 0                      
13: 0100007F:0277 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 3098001 1 0000000000000000 100 0 0 10 0                    
14: 0100007F:1B59 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3337807 1 0000000000000000 100 0 0 10 0                    
15: 00000000:C899 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 26840 1 0000000000000000 100 0 0 10 0                      
16: 0100007F:1B1E 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3557280 1 0000000000000000 100 0 0 10 0                    
17: 0100007F:1B1F 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3211306 1 0000000000000000 100 0 0 10 0                    
18: 00000000:0FA0 00000000:0000 0A 00000000:00000000 00:00000000 00000000   112        0 31288 1 0000000000000000 100 0 0 10 0                      
19: 0100007F:2EE1 00000000:0000 0A 00000000:00000000 00:00000000 00000000  1000        0 3336055 1 0000000000000000 100 0 0 10 0                    
20: 00000000:0801 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 26528 1 0000000000000000 100 0 0 10 0                      
21: 00000000:D301 00000000:0000 0A 00000000:00000000 00:00000000 00000000     0        0 28036 1 0000000000000000 100 0 0 10 0                      
22: 1000A8C0:AA40 FD760A34:01BB 01 00000000:00000000 02:00000060 00000000  1000        0 3613906 2 0000000000000000 56 4 27 10 -1                   
23: 0100007F:96EC 0100007F:4388 06 00000000:00000000 03:00001432 00000000     0        0 0 3 0000000000000000                                       
24: 0100007F:A572 0100007F:61A9 01 00000000:00000000 00:00000000 00000000  1000        0 3331536 1 0000000000000000 20 4 28 10 40                   
25: 0100007F:99AD 0100007F:88A4 01 00000000:00000000 00:00000000 00000000  1000        0 3690076 1 0000000000000000 20 0 0 10 40                    
26: 0100007F:D5AE 0100007F:A80B 01 00000000:00000000 02:000AF96D 00000000  1000        0 3698711 2 0000000000000000 20 0 0 10 40                    
27: 0100007F:AC33 0100007F:B41C 01 00000000:00000000 00:00000000 00000000  1000        0 3692366 1 0000000000000000 20 0 0 10 40                    
28: 0100007F:61A9 0100007F:A572 01 00000000:00000000 00:00000000 00000000  1000        0 3332846 1 0000000000000000 20 4 27 10 40                   
29: 0100007F:D544 0100007F:A80B 06 00000000:00000000 03:0000142D 00000000     0        0 0 3 0000000000000000                                       
30: 0100007F:96EE 0100007F:4388 06 00000000:00000000 03:00001432 00000000     0        0 0 3 0000000000000000                                       
31: 0100007F:A80B 0100007F:D5AE 01 00000000:00000000 02:000AF96D 00000000  1000        0 3695111 2 0000000000000000 20 4 30 10 40                   
32: 1000A8C0:9E36 1972528C:01BB 01 00000000:00000000 02:0000B5D3 00000000  1000        0 3685986 2 0000000000000000 50 4 25 10 -1                   
33: 1000A8C0:9E0E 1972528C:01BB 01 00000000:00000000 02:00005546 00000000  1000        0 3680532 2 0000000000000000 46 4 25 10 -1                   
```

I've distilled a lot of the conversation that came about the large refactor I submitted and have found a path to perform a more measured refactor. This patch set serves as part 1 of that refactor.

Introduce a new type `proc.Target` which will build on top of the various backends to remove complexity and duplication. The first step is removing `proc.CommonProcess` and pushing all that functionality further up the stack to `proc.Target`.
Ensure the safety of data transmission during remote debugging by mtls or tls
with token.

Fix #861 #1332  

---- 
I implement two ways about tls  (Tls should be L4, and token seem like L7).    

**1. mtls**  
Generate 3 key pairs(6 files) for ca/client/server. (no need to have token. Maybe not friendly for goland? and very complicated to me), can use the following steps to test. 
 
　　1.1.  Generate (Note: the ip for server default 127.0.0.1) 
       ```use openssl by ./scripts/openssl_generate_mtls_cert.sh (or go run ./scripts/openssl_generate_mtls_cert.go --host 127.0.0.1 --output ./mtls)```  

　　1.2. Server side 
       ```dlv debug main.go --mtls-ca-crt ./mtls/ca.crt --mtls-crt ./mtls/server.crt --mtls-key ./mtls/server.key  --headless --listen 127.0.0.1:3333```    

　　1.3. Client side
       ```dlv connect 127.0.0.1:3333 --mtls-ca-crt ./mtls/ca.crt --mtls-crt ./mtls/client.crt --mtls-key ./mtls/client.key```   

**2. tls(One-Way SSL) and token**
    2.1. Just only need the machine of server side to generate one key pairs(2 files, crt is signed with itself without ca)    
  ```   
# use openssl
# some parts are borrowed by https://stackoverflow.com/questions/21488845/how-can-i-generate-a-self-signed-certificate-with-subjectaltname-using-openssl   

# tlstoken.sh
mkdir tlstoken 

# specity the ip that the server will listen or client will connect
echo -e "[req]\nx509_extensions = v3_ca\ndistinguished_name = req_distinguished_name\n[req_distinguished_name]\n\n[v3_ca]\n\nsubjectAltName = @alt_names\nbasicConstraints = CA:FALSE\nkeyUsage = nonRepudiation, digitalSignature, keyEncipherment\n\n\n[alt_names]\nIP = 127.0.0.1" > ./tlstoken/config.cnf  

openssl genrsa -out ./tlstoken/server.key 2048  

openssl req -new -x509 -key ./tlstoken/server.key -days 3650 -subj "/CN=go-delve"  -config ./tlstoken/config.cnf -out ./tlstoken/server.crt
```
or 
```
use "go run $GOROOT/src/crypto/tls/generate_cert.go --host 127.0.0.1"  to generate (Be careful to the name and path of files maybe different with below) 
```

　　2.2 Server side 
　　　```dlv debug main.go --tls-crt ./tlstoken/server.crt --tls-key ./tlstoken/server.key --tls-token godelve  --headless --listen 127.0.0.1:3333```    

　　2.3 Client side (need to copy server.crt from server side)  
　　　```dlv connect 127.0.0.1:3333 --tls-crt ./tlstoken/server.crt --tls-token godelve```    

----   


I think it's possible that mtls can be removed because it is unfriendly to operate, just save tls with token.  
Need discussion,  @dlsniper @justinclift (#861) @antong (#1332) , thx.



I think `dlv ` could support more languates, especially the `msg` for `help` (include the children of cmd) or specific error.  
En, but it looks like `cobra`  does not support it ([the issues for cobra](https://github.com/spf13/cobra/issues/719))
According to #1800 #1584 #1038, `dlv` should enable the user to dive into
memory. User can print binary data in specific memory address range.
But not support for sepecific variable name or structures temporarily.(Because
I have no idea that modify `print` command.)  

Close #1584.


Next some questions: 
1. support the format for `print`cmd, include `address` , `variable name` and `structures`(no idea).  
2. support the form about `t(binary), f(float), a(address), i(instruction), c(char), s(string)` .  
3. support the negative position from address. (This is why also use `x /<FMT> [address]` like gdb, but not `x -<FMT> [address]`).  

----
I can close this pr if you against. 
Executing
go get -u github.com/derekparker/delve/cmd/dlv
on an up to date Windows 10 Pro machine in a VS Code Terminal with newest version of git and go (1.13) fails with the following errors: 

C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:165:13: cannot use v (type *Thread) as type proc.Thread in append:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:173:2: cannot use th (type *Thread) as type proc.Thread in return argument:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:178:12: cannot use dbp.currentThread (type *Thread) as type proc.Thread in return argument:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:267:2: cannot use trapthread (type *Thread) as type proc.Thread in return argument:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:284:40: impossible type assertion:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:299:22: cannot use thread (type *Thread) as type proc.Thread in argument to proc.GetG:
        *Thread does not implement proc.Thread (missing SetDX method)
C:\Users\reneb\go\src\github.com\go-delve\delve\pkg\proc\native\proc.go:312:43: cannot use dbp.currentThread (type *Thread) as type proc.Thread in argument to proc.GetG:
        *Thread does not implement proc.Thread (missing SetDX method)

Something wrong in delve or on my side ?
Support both relative path and symbolic link in location expressions.

Fixes #1808
Please answer the following before submitting your issue:

Note: Please include any substantial examples (debug session output,
stacktraces, etc) as linked gists.

1. What version of Delve are you using (`dlv version`)?
Version: 1.3.2
2. What version of Go are you using? (`go version`)?
go version go1.12.4 darwin/amd64
3. What operating system and processor architecture are you using?
macOS 10.14.6
4. What did you do?
see below
5. What did you expect to see?
see below
6. What did you see instead?
see below

## Reproduce
```
$ cd tmp
$ ln -s ../a.go
$ realpath a.go
/Users/eph/test/a.go
$ pwd
/Users/eph/test/tmp
$ dlv debug a.go
Type 'help' for list of commands.
(dlv) b /Users/eph/test/a.go:14
Command failed: Location "/Users/eph/test/a.go:14" not found
(dlv) b /Users/eph/test/tmp/a.go:14
Breakpoint 1 set at 0x10f47db for main.main() ./a.go:14
```

pdb3 (Python debugger) can handle this situation

Backtracing was greatly improved on linux/arm64 core-file backtraces.
Previously, the backtrace of the goroutine that faulted and caused a core
dump was quite truncated.  Now, this goroutine's backtrace is correctly
printed out.

Faults cause exceptions.  Exceptions are taken on a different stack from
the goroutine which caused the exception.  Further, the exception's stack
frame is defined by the operating system (linux in this case) and not by
golang's runtime environment.  Thus, to correctly navigate a backtrace,
the stack unwinding code must have knowledge of how to process such exception
stack frames.  On the amd64 architecture, golang maintains explicit frame
pointers, easing this task.  On the arm64 architecture, frame pointers are
implicit, complicating this task.

Following gdb's lead in processing exception frames, code was added for the
linux/arm64 implementation to discover that a stack frame is an exception
frame.  If it discovers an exception stack frame, it navigates to the stack
frame that was interrupted.  This code is in the new source file
"arm64_linux_stack.go".

The procedure calls are now correctly printed out.  However, if the go code
was compiled with code optimization on, local variables are often not printed
out correctly.  This has not yet been investigated.  A tentative working
hypothesis is that the local-variable backtrace-following code also needs
to notice the exception record, and if one is detected, fetch the requested
register out of the exception record's register save area.

For now, the code has implicit knowledge of how to advance over an exception
stack frame by having explicit constant offsets.  A better way would be to
look up local stack symbols go's exception handler's code to fetch the
correct stack pointer and/or offset.  However, this will need to wait until
the fetching of local variables out of the stack frames is improved.

Finally, about 12% of the time the backtrace of a core-file was still
truncated.  This turned out to because of original:

  for i := range framectx.Regs {

loop in "stack.go".  As "framectx.Regs" is a map, go can return indices
in a pseudo-random order.  If the record for key "31" is returned before
the record for key "30", something in Delve/Dwarf's register-fix-up code
is done incorrectly.  The code was changed to copy the key/value pairs
into a slice.  The slice was then sorted, the for loop was changed to range
over the slice, and the bug went away.