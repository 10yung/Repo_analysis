Use of fibrous and glob together can be a problem, because of this: https://github.com/isaacs/node-glob/blob/master/glob.js#L66

When fibrous has been loaded, a new object like this has sync in its prototype, so the glob check `if (options.sync)` is true.

```js
> var obj = {};
> console.log(obj.sync);
// undefined
> var fibrous = require('fibrous');
> var obj = {};
> console.log(obj.sync);
// { that: {} }
```

It would be great to have an option when loading fibrous to change the name of the `sync` function to something else less likely to interfere with other modules.
I feel like this should work -- what am I doing wrong?

```
fibrous> fibrous.wait([(fibrous -> 0).future()])
Error: [object Object] is not a future
  at Object.Future.wait (/Users/maxedmands/Projects/garbanzo/node_modules/fibers/future.js:395:16)
  at Function.<anonymous> (/Users/maxedmands/Projects/garbanzo/node_modules/fibrous/lib/fibrous.js:66:47)
  at REPLServer.<anonymous> (/Users/maxedmands/Projects/garbanzo/src/orzo/server/lib/repl.coffee:28:28)
  at /Users/maxedmands/Projects/garbanzo/node_modules/fibers/future.js:416:21

    - - - - -
  at Function.wait (/Users/maxedmands/Projects/garbanzo/node_modules/fibers/future.js:148:10)
  at Function.fibrous.wait (/Users/maxedmands/Projects/garbanzo/node_modules/fibrous/lib/fibrous.js:157:17)
  at repl:1:13
  at replDefaults.eval (/Users/maxedmands/Projects/garbanzo/node_modules/coffee-script/lib/coffee-script/repl.js:33:78)
  at REPLServer.evalWithUnderscore (/Users/maxedmands/Projects/garbanzo/src/orzo/server/lib/repl.coffee:18:7)
  at Function.<anonymous> (/Users/maxedmands/Projects/garbanzo/node_modules/fibrous/lib/fibrous.js:50:17)
  at Function.<anonymous> (/Users/maxedmands/Projects/garbanzo/node_modules/fibrous/lib/fibrous.js:66:29)
  at REPLServer.<anonymous> (/Users/maxedmands/Projects/garbanzo/src/orzo/server/lib/repl.coffee:28:28)
  at /Users/maxedmands/Projects/garbanzo/node_modules/fibers/future.js:416:21
```

FYI @makebbekus 

My app has a dep tree with two versions of fibrous in it:

```
> npm ls fibrous
customers-api@0.0.2 /Users/maxedmands/Projects/ops-super/apps/customers-api
├── fibrous@0.3.3
└─┬ goodeggs-ops-common@4.0.0
  └── fibrous@0.3.3
```

when I run code that tries to use the inner fibrous, I get this error:

```
[14:19:23] TypeError: Cannot redefine property: future
  at Function.defineProperty (native)
  at defineMemoizedPerInstanceProperty (/Users/maxedmands/Projects/ops-super/apps/customers-api/node_modules/goodeggs-ops-common/node_modules/fibrous/lib/fibrous.js:107:19)
  at Object.<anonymous> (/Users/maxedmands/Projects/ops-super/apps/customers-api/node_modules/goodeggs-ops-common/node_modules/fibrous/lib/fibrous.js:135:5)
  at Object.<anonymous> (/Users/maxedmands/Projects/ops-super/apps/customers-api/node_modules/goodeggs-ops-common/node_modules/fibrous/lib/fibrous.js:189:4)
  at Module._compile (module.js:460:26)
  at Object.Module._extensions..js (module.js:478:10)
  at Module.load (/Users/maxedmands/Projects/ops-super/apps/customers-api/node_
```

Is there any real reason two versions of fibrous can't coexist? Should we just check to see if `Object.(future|sync)` is already defined and avoid trying to do it again?

Is this still beta software?

Imagine, [webdriver checks](http://admc.io/wd/#mocha-integration) run in parallel:

``` coffee
fibrous.wait [
  browser
    .elementByCss '.entry-title'
    .text().should.become "Fibrous & Promises"

  browser
    .elementByCss '.entry-author-name'
    .text().should.eventually.contain "Could be you!"
]
```

It's possible today with:

``` coffee
fibrous.wait [
  browser
    .elementByCss '.entry-title'
    .text().should.become "Fibrous & Promises"
    .future.nodeify()

  browser
    .elementByCss '.entry-author-name'
    .text().should.eventually.contain "Could be you!"
    .future.nodeify()
]
```

but it could be cleaner.  Any reason not to have fibrous futures [comply with Promises/A+](https://github.com/promises-aplus/promises-tests), and have `fibrous.wait` accept any A+ promise?
