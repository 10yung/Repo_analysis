Currently, writing a new layout/view group needs a bit of boilerplate/repeated code.
This includes:
* Forwarding events to the active view
* Forwarding `call_on_any` to all views
* Forwarding `focus_view` to all views
* Handling a layout cache
* Exposing a `Vec`-like interface: add/get/remove/...

And with the upcoming `ViewPath` selector, there will be some more copy-pasted code to select the nth child.

Could we reduce the amount of duplicated code? Reduce the barrier to writing view groups correctly? Provide a more unified interface to access views? Does a `ViewGroup` trait make sense?
Layout is often an expensive operation. To avoid it, views try to cache it.

Leaf views like `TextView` can cache their internal representation (lines) based on the size requested.
Group views like `LinearLayout` need, in addition, to know if any child view needs a relayout. Right now this is a boolean from `View::needs_relayout`. This means children need to hold a flag "needs_relayout", and bust this flag on any internal change. Note that this is not currently implemented everywhere it should be, so it may be subtly broken in some ways (if you resize a `BoxView` in a `LinearLayout` for example).

A potential improvement would be to, instead, return some "hash" of the state from `layout`, and take this hash in `needs_relayout`. This way, instead of requiring each view to keep a flag, we only need the parent view to keep a hash of the children layouts.

Views would use a hash of their own content + the input request. Parent views should either store the child's hash, or be able to re-compute it from their own hash + internal state. For example, a `BoxView` could hash their own state XOR a rotated hash of the child state.

This complexity comes from the need to be bi-directional (up the tree when doing layout, down the tree when asking for relayout). Alternatively, we could have a `layout_hash` method; views would not be asked if they need to re-layout, but parents would compare the children hashes with their cached ones. This is a bit simpler for views (no need to implement `needs_relayout`), but they lose some flexibility (they cannot unconditionally ask for relayout when they don't want to hash a large content).
It also makes it harder to have a default implementation that asks for a re-layout every time.

Both these methods rely on hashes rather than boolean flags, and so may add overhead in some cases:
* Currently, a large `TextView` resets the "cache ready" flag when the content is changed. `needs_relayout` is constant-time.
* Using hashes, it would either need to re-compute the hash every time, making `needs_relayout` linear in the size of the content, or cache the hash, adding (a bit) of memory overhead.

Overall the memory overhead of storing the content hash is probably fine.
# Problem description
The termion backend puts stdout into raw mode which sets `-ISIG` to prevent the default `SIGINT` on `Ctrl-C`. In the event mapping from termion keys to cursive events, `Ctrl-C` is mapped directly to `Event::Exit`, and then in `on_event` on `Cursive`, `Event::Exit` is hardcoded directly to `quit()`.

I'm working on a project where I do not want to quit on `Ctrl-C` (or any other automatic exit event), but it's not straightforward to me how to suppress exit on `Ctrl-C` with this setup. 

Maybe instead of having the top level check for `Event::Exit` in `on_event`, this can be preloaded into a default global callback so that it can easily be cleared or overridden?

Sorry if I've missed something and this is already simple to do :^)

# Environment

* Operating system: linux distribution, windows, macOS, ...
**GNU/Linux**
* Backend used: ncurses (the default one), pancurses, termion, ...
**termion**
* Current locale (run `locale` in a terminal).
**en_US.utf8**
* Cursive version (from crates.io, from git, ...)
**0.13.0 from crates.io**

First: is this a bug report? A suggestion? Or asking for help?

A bug report I think, or maybe asking for help :)

# Problem description
I have a quit button in a ripasso, and in the new user wizard there is a quit button that I have implemented like this:

```
        .button(super::CATALOG.gettext("Cancel"), |s| {
            s.quit();
            std::process::exit(0);
        })
```

This doesn't reset the terminal for the user and it looks like this:

![fil](https://user-images.githubusercontent.com/647710/71543055-a8999400-296e-11ea-8f9b-194798734527.png)

If possible code, or pseudo-code to reproduce the problem / present an idea.

See above.

# Environment

* Operating system: ubuntu, gnome-terminal
* Backend used: ncurses (the default one), pancurses, termion, ...
  * If using ncurses on linux, ncurses version? #define NCURSES_VERSION "6.1"
* Current locale (run `locale` in a terminal).
LANG=sv_SE.UTF-8
LANGUAGE=en
LC_CTYPE="sv_SE.UTF-8"
LC_NUMERIC="sv_SE.UTF-8"
LC_TIME="sv_SE.UTF-8"
LC_COLLATE="sv_SE.UTF-8"
LC_MONETARY="sv_SE.UTF-8"
LC_MESSAGES="sv_SE.UTF-8"
LC_PAPER="sv_SE.UTF-8"
LC_NAME="sv_SE.UTF-8"
LC_ADDRESS="sv_SE.UTF-8"
LC_TELEPHONE="sv_SE.UTF-8"
LC_MEASUREMENT="sv_SE.UTF-8"
LC_IDENTIFICATION="sv_SE.UTF-8"
LC_ALL=

* Cursive version (from crates.io, from git, ...) 0.13.0

First: is this a bug report? A suggestion? Or asking for help?
This is a feature request

# Problem description
In ripasso we have a list of password files, and display some meta information that we fetch from a git repository.

This fetching can be expensive, and if the user have a large amount of passwords then it can get out of hand, it would therefore be nice to be able to only compute this if the password is displayed to the end user.

If it would be able to add items to the selectview together with a callback function that would calculate the label when needed it would reduce the startup time for those users immensely.

If possible code, or pseudo-code to reproduce the problem / present an idea.

# Environment

* Operating system: linux distribution, windows, macOS, ...
* Backend used: ncurses (the default one), pancurses, termion, ...
  * If using ncurses on linux, ncurses version? (run `grep "define NCURSES_VERSION " /usr/include/curses.h`)
* Current locale (run `locale` in a terminal).
* Cursive version (from crates.io, from git, ...)

Related to https://github.com/gyscos/cursive/issues/371

ðŸš§ this pull request is not ready to be merged.

TODO:
- [ ] Have a way to know `ListView` items' height from its `draw` method: `ListChild` has no "size" property, we might want to mimic the behaviour from `LinearLayout` and its `Child` property
- [ ] Real tests
- [ ] Update documentation
The current API does not allow to create custom keybindings in the menu. The current API only allows to create [a custom menubar subtree](https://docs.rs/cursive/0.13.0/cursive/struct.Cursive.html#method.menubar). Keybindings are hardcoded in [the menubar view](https://github.com/gyscos/cursive/blob/master/src/views/menubar.rs#L291).
README states that Cursive uses ncurses backend by default. Sadly Rust bindings for `ncurses` are very problematic from the safety point of view:

 - `ncurses` crate is wildly unsound. It simply wraps calls to C functions in Rust functions and declares them safe, with no validation whatsoever. It has format string vulnerabilities, returns invalid UTF-8 in &str, and so much other unsoundness that you can cause pretty much arbitrary memory corruption. It is also unmaintained. See https://github.com/jeaye/ncurses-rs/issues/188
 - `pancurses` crate depends on `ncurses` and inherits the issues.

This presents issues from both security and reliability standpoints. Please consider switching to a backend other than ncurses by default. If Rust-only backends are not anticipated to reach parity with ncurses anytime soon, consider using [ncursesw](https://crates.io/crates/ncursesw) crate - I have not audited it, but it seems to be less of a lost cause than `ncurses` crate.
Is there a way to get the current cursor position, so that I can show a popup at the cursor position?
The `Margins` struct is used wherever we need padding/margins. It needs 4 values (for each side), and the order is kind of a mess because there is no clear canonical way to group them.

We could have 2 `XY<usize>` to represent two corners, but which one is top_left? Or is it top_right?
We could have a single `XY<(usize, usize)>`, but is it `(top, bottom)`? `(bottom, top)`?
Also, if we accept `T: Into<XY<...>>`, then we'll end up working with `((usize, usize), (usize, usize))` - which one of the two is that?

The current `Margins::new` method takes `left`, `right`, `top`, `bottom`.
I recently realized CSS makes another choice, with the now famous `trbl` ordering: `top`, `right`, `bottom`, `left`.

All in all, it's kind of a mess, and `Dialog::new().padding((1,1), (0,0))` will probably stay ambiguous.

Maybe this is a place where we should force named parameters, and not try to be smart with all these `From` implementations?

```rust
use cursive::view::Margins as M;

Dialog::new().padding(M { left: 1, right: 1, top: 0, bottom: 0 })
```