
Requires https://github.com/guzzle/guzzle/pull/2561 to be merged first. Is a follow up to https://github.com/guzzle/guzzle/pull/2560.
Follow up to https://github.com/guzzle/guzzle/pull/2546.
This PR removes dead code from the internals of the stream handler. We should probably also deprecate `default_ca_bundle` in 7.1.0, and remove it in 8.0.0, since it's only relevant for PHP 5 code, however  people probably blanket call it anyway (like composer does in its internals (not guzzle's implementation, but their own)).

Follow up to https://github.com/guzzle/guzzle/pull/2557.
Follow up to https://github.com/guzzle/guzzle/pull/2529.
**Guzzle version(s) affected**: 6.5.2
**PHP version**: 7.3.12 + 7.4.0
**cURL version**: 7.67.0 

**Description**  
Hey there, I am experiencing some memory leaks when using guzzle to asynchronously  fetch multiple JSON documents and parse them into a collection.
I've setup a project where I created a snippet to reproduce that behavior.

Would love if someone can give me either a shot if this is really guzzle related, or, if not, how to profile that script to find the memory leak.

Thanks in advance.

**How to reproduce**  
Check out https://github.com/boesing/guzzle-memory-issue and run the script.

**Possible Solution**  
-

**Additional context**  
- 

**Guzzle version(s) affected**: 6.5.2 and 7.0.0-beta.1  (Probably earlier versions too)
**PHP version**: 7.2.26 and 7.3.11-13
**cURL version**: 7.61.1, 7.64.0, 7.65.3, and 7.67.0

**Description**  
When using Guzzle's `stream` config option to read from a remote HTTP stream, Guzzle exhibits a substantial memory leak, starting after it has already downloaded 2.00 MB of the stream's contents.

The rate of memory leakage appears to grow in 1:1 proportion to rate of data being downloaded from the stream.

The leak occurs in the following environments I've tested with:
* Alpine Linux 3.8 (PHP 7.2.26 / cURL 7.61.1 / Guzzle 6.5.2)
* Alpine Linux 3.9 (PHP 7.2.26 / cURL 7.64.0 / Guzzle 6.5.2)
* Alpine Linux 3.10 (PHP 7.3.11 / cURL 7.66.0 / Guzzle 6.5.2)
* Alpine Linux 3.11 (PHP 7.3.13 / cURL 7.67.0 / Guzzle 6.5.2, *and* Guzzle 7.0.0-beta.1)
* Ubuntu Linux 19.10 (PHP 7.3.11 / cURL 7.65.3 / Guzzle 6.5.2)
* Mac OS 10.15 (Homebrew PHP 7.3.12 / cURL 7.67.0 / Guzzle 6.5.2, *and* Guzzle 7.0.0-beta.1)

It does NOT occur in the following environments:
* Alpine Linux 3.7 (PHP 7.1.33 / cURL 7.61.1 / Guzzle 6.5.2)
* Mac OS 10.15 (Apple factory-installed PHP 7.3.9 / cURL 7.64.1 / Guzzle 6.5.2, *or* Guzzle 7.0.0-beta.1)

With the exception of the OSX Homebrew install listed above, in all environments I'm using the native PHP which comes by default with that OS's package manager. These binaries are not customized by myself in any way, nor are any unofficial package channels being used.

The amount of memory consumed also jumps by 2.00 MB at two different intervals prior to when the leak starts.  It only happens twice, which is tolerable. But still, it's unexplained.  These jumps only occur in the environments which exhibit the leak. They don't occur in the two environments which don't exhibit the leak.

**How to reproduce**  
Run the following script (assuming Guzzle is already installed via Composer):
```
<?php
require_once __DIR__ . '/vendor/autoload.php';
$guzzle = new \GuzzleHttp\Client;
$stream = $guzzle->get(
    'https://kpbs.streamguys1.com/?ck=1579203064304', 
    ['stream' => true]
)->getBody();

$downloaded = 0;
while (!$stream->eof()) {
    $line = $stream->read(8192);

    $downloaded += strlen($line);

    $dl = number_format($downloaded/1048576, 2);
    $mem = number_format(memory_get_usage(true)/1048576, 2);
    echo date('g:i:s') . ", downloaded $dl MB, mem $mem MB\n";
}
```

The output of this script is very similar in every case when the leak is occurring.  Here's a sample from my aforementioned Mac OS Homebrew environment:
```
1:47:47, downloaded 0.01 MB, mem 2.00 MB
1:47:47, downloaded 0.02 MB, mem 2.00 MB
1:47:47, downloaded 0.02 MB, mem 2.00 MB
1:47:47, downloaded 0.03 MB, mem 2.00 MB
1:47:47, downloaded 0.04 MB, mem 2.00 MB
...
1:47:48, downloaded 0.16 MB, mem 2.00 MB
1:47:48, downloaded 0.17 MB, mem 2.00 MB
1:47:48, downloaded 0.18 MB, mem 2.00 MB
1:47:48, downloaded 0.19 MB, mem 4.00 MB
1:47:48, downloaded 0.20 MB, mem 4.00 MB
1:47:48, downloaded 0.20 MB, mem 4.00 MB
...
1:49:41, downloaded 1.97 MB, mem 4.00 MB
1:49:41, downloaded 1.98 MB, mem 4.00 MB
1:49:42, downloaded 1.98 MB, mem 4.00 MB
1:49:42, downloaded 1.99 MB, mem 4.00 MB
1:49:43, downloaded 2.00 MB, mem 6.00 MB
1:49:43, downloaded 2.01 MB, mem 6.02 MB
1:49:44, downloaded 2.02 MB, mem 6.02 MB
1:49:44, downloaded 2.02 MB, mem 6.03 MB
1:49:45, downloaded 2.03 MB, mem 6.04 MB
1:49:46, downloaded 2.04 MB, mem 6.04 MB
1:49:46, downloaded 2.05 MB, mem 6.05 MB
1:49:46, downloaded 2.05 MB, mem 6.06 MB
...
1:49:56, downloaded 2.20 MB, mem 6.21 MB
1:49:57, downloaded 2.21 MB, mem 6.21 MB
1:49:57, downloaded 2.22 MB, mem 6.22 MB
1:49:58, downloaded 2.23 MB, mem 6.23 MB
1:49:58, downloaded 2.23 MB, mem 6.24 MB
1:49:59, downloaded 2.24 MB, mem 6.25 MB
1:49:59, downloaded 2.25 MB, mem 6.25 MB
1:50:00, downloaded 2.26 MB, mem 6.26 MB
1:50:00, downloaded 2.27 MB, mem 6.27 MB
1:50:01, downloaded 2.27 MB, mem 6.28 MB
1:50:01, downloaded 2.28 MB, mem 6.29 MB

```

Note that this script is discarding the contents of what's being downloaded, so its memory usage should be constant over time.  In the two environment where the leak doesn't occur, memory usage remains at 2.00 MB the entire time the script is running.  But with the leak, it jumps first to 4.00 MB for awhile, and then to 6.00 right as the memory beings growing with every additional chunk of the stream that's downloaded.  

**Possible Solution**  

Is Guzzle auto-detecting PHP 7.2 and later and behaving differently than with 7.1 and below?  Or is it auto-detecting a function or some other language feature that was introduced in 7.2?

But I can't explain why OSX Catalina with its native PHP 7.3 binary works just fine.  But every other combination of OS with PHP >= 7.2 and Guzzle >= 6.5 exhibits the leak.

**Additional context**  

The leak does not appear to depend on the content type of the stream.  My main use case is Twitter's GNIP PowerTrack stream, which is plain text.  But since that's behind an auth mechanism I can't share the details, so my test script above is using the publicly available KBPS stream from www.npr.org, which is an MPEG stream. The leak occurs with both streams.

The leak also doesn't seem to be affected by the number of bytes requested per chunk in the call to `$stream->read()`.  I also tried inputting values of `256` and `1024` but with no change in behavior.
This depends on https://github.com/guzzle/guzzle/pull/2516, which in turn depends on https://github.com/guzzle/guzzle/pull/2515.