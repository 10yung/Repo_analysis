I'm using FormData to get some input values, and convert these values to i64.
currently I used this method to reduce duplicate code:
```
#[derive(Debug, Default)]
struct Number(i64);
impl TryFrom<Option<FormDataEntry>> for Number {
    type Error = ();
    fn try_from(form: Option<FormDataEntry>) -> Result<Self, Self::Error> {
        let form = form.unwrap();
        match form {
            FormDataEntry::String(s) => Ok(Number(s.parse().expect("Error: Not a number!"))),
            _ => Err(()),
        }
    }
}
fn get_num(form: &FormData, name: &str) -> i64 {
    Number::try_from(form.get(name)).unwrap().0
}
```

I'm not familiar with Rust, and I feel this code is ugly.

I think it's better to add similar functions in FormData. Then we can get the values easily.
e.g.
```
form.get(name).to_i64()
form.get(name).to_string()
...
```
`std::error::Error` has its `description()` function deprecated since Rust 1.41.0.

`std::mem::uninitialized()` and `try!()`, since 1.39.0.

The rest were pretty mechanical fixes hinted by the compiler.
This other crate is being maintained, and its API is simpler and more generic when using other [RustCrypto crates](https://github.com/RustCrypto/hashes) as well.

See https://github.com/rust-fuzz/cargo-fuzz/issues/199
Added: methods to read/write selectionStart & selectionEnd properties of a textarea element
get_all_response_headers allow one to retrieve all response
headers and so they can be iterated over.

Example converting headers to hyper::http::HeaderMap
```
let xhr = XmlHttpRequest::new();
let raw_headers = xhr.get_all_response_headers();
let headers = match raw_headers {
    Some(rh) => {
        let mut headers = http::header::HeaderMap::new();
        for h in rh.split("\r\n") {
            if h.len() == 0 {
                continue;
            }
            let parts: Vec<&str> = h.split(": ").collect();
            let k = parts[0];
            let k = http::header::HeaderName::from_bytes(k.as_bytes()).unwrap();
            let v = parts[1..].join(": ");
            let v = http::header::HeaderValue::from_str(&v).unwrap();
            headers.append(k, v);
        }
        headers
    },
    None => http::header::HeaderMap::new(),
};
```
```rust
#[macro_use]
extern crate stdweb;

#[macro_use]
extern crate serde_derive;

#[derive(Serialize)]
struct Foo {
    bar: u64,
}
js_serializable!(Foo);

fn main() {
    println!("Hello, world!");
    let foo = Foo {
        bar: 883498451449996500,
    };
    js! {
        console.log("Hi console", @{foo});
    };
}

```
results in:
```
Error loading Rust wasm module 'stdwebbug': RuntimeError: unreachable
    at __rust_start_panic (wasm-function[1089]:0x35849)
    at rust_panic (wasm-function[1084]:0x355e5)
    at _ZN3std9panicking20rust_panic_with_hook17hd6b16d2853327786E (wasm-function[1079]:0x352f4)
    at _ZN3std9panicking18continue_panic_fmt17h70cda879a43284baE (wasm-function[1078]:0x351bf)
    at rust_begin_unwind (wasm-function[1077]:0x35143)
    at _ZN4core9panicking9panic_fmt17hddbe1a30080e00b8E (wasm-function[1108]:0x373cc)
    at _ZN4core6result13unwrap_failed17h5d4087ad0da767ceE (wasm-function[1129]:0x38536)
    at _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17h8deb6e1979685a6fE (wasm-function[71]:0x3aeb)
    at _ZN78_$LT$stdwebbug..Foo$u20$as$u20$stdweb..webcore..serialization..JsSerialize$GT$8_into_js17h50fe674779c4d1b9E (wasm-function[11]:0xbde)
    at _ZN184_$LT$stdweb..webcore..newtype..Newtype$LT$$LP$stdweb..webcore..serialization..NonFunctionTag$C$$u20$$LP$$RP$$RP$$C$T$GT$$u20$as$u20$stdweb..webcore..serialization..JsSerializeOwned$GT$13into_js_owned17h6ffad57c7c97c83cE (wasm-function[86]:0x4e97)
```
But if I change value of `bar` to 23, it works as expected.

That is the minimal example; in the full code I'm using I also was able to extract this error message:
```
panicked at 'called `Result::unwrap()` on an `Err` value: ConversionError { kind: NumberConversionError(OutOfRange) }', src/libcore/result.rs:1165:5
```

```toml
[dependencies]
stdweb = "0.4.20"
serde_derive = "1.0.102"
serde = "1.0.102"
```
cargo 1.40.0-nightly (a429e8cc4 2019-10-04)
cargo-web 0.6.25
rustc 1.40.0-nightly (1721c9685 2019-10-12)
The `console!` macro documentation says

> If you want to print things to the console in a standardized way, use [`println!`](https://doc.rust-lang.org/std/macro.println.html) instead.

But when I use `println!`, I don't get any output in the console.

All I've done is `cargo new foobar`, add `stdweb="0.4.20"` to my `Cargo.toml`, and do `cargo web start`, and all it ever says in console is 

> Finished loading Rust wasm module 'foobar'

I know it's otherwise working, though, because other code I put in there does stuff, like using `stdweb::console!(log, "Hello World!");` instead of `println!` prints to console just fine.
