1. The following figure is the certificate information obtained in the code

![](https://img.alicdn.com/imgextra/i3/90872131/O1CN01eEEhCE1Rc2bEFY2Xl_!!90872131.png)

2. The following figure is the certificate information already installed in the android certificate center

![](https://img.alicdn.com/imgextra/i3/90872131/O1CN01YVUcBT1Rc2b9Ylfcl_!!90872131.png)



3. The following figure is the information displayed when opening the web page

![](https://img.alicdn.com/imgextra/i1/90872131/O1CN01RbhP7Y1Rc2bEFZRs1_!!90872131.png)

4. The console input error message is as follows

   `Couldn't authenticate host 'www.baidu.com' with certificate '*.baidu.com'`





Summary: Figures 1 and 2 show that the certificate should be correct, but I don’t know why I can’t access https

I have been studying this problem for a long time. At that time, I still had a beautiful black hair, and now I have more beard than hair

Can anyone help me to solve this problem, of course, it is not the problem of my hair loss
How can we not generate rootcert.pfx without forwarding traffic and intercepting data


Hi folks,
I have been working with titanium for some time trying to integrate it into my project which will require a proxy server. I may have run into an interesting bug concerning a custom self-signed certificate.

If I declare my certificate in a constructor such as proxyserver.CertificateManager.LoadCertificate("path-to-cert.pfx","");

when i attempt to use the certificate this way, any connection into the proxy just ends with the proxy closing the connection as unexpectedly closed. However, when i declare my certificate like this:

        ProxyServer proxyServer = new ProxyServer("path-to-cert.pfx","certname",true,false,false);

it works perfectly. I know the three overloads are setting the certificate as user, system, machine. But, am i mssing the cert name in my loadcertificate line? Writing this as im not sure if im missing something or if i discovered a potential bug. thanks!

I ran titanium.web.proxy.examples.basic, released the comments of the following code, tested the native 127.0.0.1 and port 1080, unable to run normally?

 

var socksEndPoint = new SocksProxyEndPoint(IPAddress.Any, 1080, true)
            {
                // Generic Certificate hostname to use
                // When SNI is disabled by client
                GenericCertificateName = "google.com"
            };

           proxyServer.AddEndPoint(socksEndPoint);


Hi , we used the demo code from the Readme file but the browsing is extremely slow
What do we miss ? 

Regards 
Yuval 
Hi,

How can I get UDP packets and addresses such as the hostname and so on for addresses that are important to me (the page I want to access)? I need the entire unpaired request.
Do I need to install a new certificate for IOS every time I start the program? Failure without installation?

  proxyServer.CertificateManager.CreateRootCertificate(false);
             proxyServer.CertificateManager.TrustRootCertificate();
             proxyServer.CertificateManager.TrustRootCertificateAsAdmin();
           //File.WriteAllBytes(" ca.cer",proxyServer.CertificateManager.RootCertificate.Export(System.Security.Cryptography.X509Certificates.X509ContentType.Cert));
Hello,
       I am using Titanium Web Proxy as a Transport Proxy. It is decrypting all the URLs, because of this some of the websites and Intranetworking sites are having trust issue, it shows the message "Your connection is not private/secure".

Please help me out to resolve this issue.
Hello, the existing socks5 proxy server, would you like to inquire whether it supports the following network architecture?

like this :

pc browser -> Titanium.Web.Proxy -> socks5 server  -> internet
Couldn't authenticate host 'hm.baidu.com' with certificate '*.baidu.com'.

![QQ图片20191217170851](https://user-images.githubusercontent.com/26525599/70981481-30baa680-20f0-11ea-8c09-0fa0f3201cf9.png)

// Start proxy controller
            controller.StartProxy();

            Console.WriteLine("Hit any key to exit..");
            Console.WriteLine();
            Console.Read();

            controller.Stop();