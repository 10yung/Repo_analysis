
This builds autowire for scala 2.13 using mill

I've moved the directory structure to be mill like and less verbose

Some version combinations won't build due to missing upickle versions or a mill problem with scalajs (mill includes scalajs-tools for 1.0.0-M8 which no longer exists)

I've removed the sbt build as it won't work under the new directory structure and various parts of it are too old to work. Hope that's ok
```
package a.b.c.d.e.f.shared

trait Api {
  def store(data: Seq[Todo]): Unit
  def load(): Seq[Todo]
}
```

```
  val routes: Route = pathPrefix("api") {
    path(Segments) { segments =>
      post(AutowireServer.dispatch(segments))
    }
  }
```

This results in calls such as `/api/a/b/c/d/e/f/shared/Api/store`, which is a bit weird. I'd love it if it would be possible to leave out the namespacing, and leave only `/api/store`, or some customizable prefix, using a class attribute perhaps?



preCallOp param allows set contexts in the worker thread.
For example we may set some authorization/authentication info without change the trait for client side.
Example:

``` scala
trait SomeEntityApi {
  def retrieve(limit: Option[Int], skip: Int): Future[Seq[Entity]]
}
```

works, while:
``` scala
trait SomeEntityApi {
  def retrieve(limit: Option[Int] = None, skip: Int = 0): Future[Seq[Entity]]
}
```

fails with:
```
[warn] an unexpected type representation reached the compiler backend while compiling Application.scala: <error>. If possible, please file a bug on https://github.com/scala/bug/issues.
[error] Error while emitting Application.scala
[error] <error> (of class scala.reflect.internal.Types$ErrorType$)
[error] Error while emitting Application.scala
[error] assertion failed: ClassBType.info not yet assigned: Lcontrollers/Application$$anonfun$1;
[warn] one warning found
[error] two errors found
[error] (Compile / compileIncremental) Compilation failed
```

**Note 1**: What actually fails is the compilation of `Router.route[EventApi](new EventService)` (present in `Application.scala` in this case).

**Note 2**: Worked with Scala 2.12.6.

Thank you!
Hi,
Love autowire, using it extensively.

My stack is mostly cats/IO based, doobie, http4s, and so on, and autowire would fit in more naturally (i.e. no `unsafeToFuture` calls or having to choose to return `Int` or `Future[Int]`) if I could make the server side generated code have a different effect type (i.e. the usual `F[_]`, which for me would be `cats.effect.IO`).

I understand this may not be something you would want to spend any time on, but perhaps you/anyone could give your thoughts on the amount of surgery needed? I'd like to try it.

Note: PR #76 adds support for `IO` but by calling `unsafeToFuture`, I would like to avoid the `Future`s altogether.

Thank you!


Hi,

my AjaxClient has some dependencies, so I've made it a class and create it on demand with this method:

```
  def withFileMap[Trait](files: Map[String, File])(onProgress: Option[Double] => Callback = _ => Callback.empty,
                                                   progressNotComputable: Boolean => Callback = _ => Callback.empty): ClientProxy[Trait, Json, Decoder, Encoder] = new AjaxClient(files, onProgress, progressNotComputable)[Trait]
```

From time to time I get the following macro(?) error:

     Cannot find proxy for... 

Funny thing is, that I can fix it by not using lambdas

```
    .withSimpleOptionalFileList[WiredApi]("banner", state.selectedImageFile, onProgress = e => $.modState()) // Macro error
    def updateProgress(d: Option[Double]) = $.modState(_.copy(progress = d))
    .withSimpleOptionalFileList[WiredApi]("banner", state.selectedImageFile, onProgress = updateProgress) // no Macro error
```
Type parameters for client here worked
```scala
  case class objParam(url:String)
  def getAtw[t](): ClientProxy[t, ByteBuffer, Default.Pickler, Default.Pickler] ={ // ok
    val a=autowireJs
    a.atwParams=objParam(sharedOlogx.rpcAuthed_ologx_path)
    a[t]
  }
  object autowireJs2 extends autowire.Client[ByteBuffer, Pickler, Pickler]   {
    override def doCall(req: Request): Future[ByteBuffer] = {
      dom.ext.Ajax
        .post(
          url = sharedOlogx.rpcAuthed_ologx_path + "/" + req.path.mkString("/"),
          data = Pickle.intoBytes(req.args),
          responseType = "arraybuffer",
          headers = Map(("Content-Type", "application/octet-stream"))
        )
        .map(r => TypedArrayBuffer.wrap(r.response.asInstanceOf[ArrayBuffer]))
    }

```

but the server side do not work(it compiles,but get runtime error when client tries to do rpc call)
```scala
      object autowireServer extends autowire.Server[ByteBuffer, Pickler, Pickler]{
        override def read[R: Pickler](p: ByteBuffer) = Unpickle[R].fromBytes(p)

        override def write[R: Pickler](r: R) = Pickle.intoBytes(r)

        @inline
        final def run[t](apiImpl: t,  // damn! this can not be made generic
                   reqPathList: List[String],
                   reqBodyBytes: ByteString): Future[ByteBuffer] = {
          lg("atw reqPathList:"+reqPathList)
          this.route[t](apiImpl)( // the problem is route[t] 
            autowire.Core.Request(
              reqPathList,
              read[Map[String, ByteBuffer]](reqBodyBytes.asByteBuffer))
          )
        }

      }

```
even if i inline it

the error is 

> scala.MatchError: Request(List(rpcAuthedOlogx, tst),Map()) (of class autowire.Core$Request)
> 	at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:254)
> 	at scala.PartialFunction$$anon$1.apply(PartialFunction.scala:252)
> 	at jvmUtils$akkaHttpUtil$rpc_server$autowireServerCls$$anonfun$run$1.applyOrElse(jvmUtils.scala:246)
> 
Currently implicit arguments in method seems not working,for example
```scala
def impl(s:String)(implicit is:String):Unit
```
Is that feature supported?