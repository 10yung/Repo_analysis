
Could this library ever support compilation onto these platforms?
We're having an issue with certain types of PNG images. For example, this 320x320 image of a tomato has a white background, but has transparent borders on the top and bottom of the image.

![tomato.png](https://user-images.githubusercontent.com/4324359/64976607-98015a00-d866-11e9-972a-47b4cb5ceef1.png)

After resizing to 250x250 with lilliput we get this image

![tomato_out](https://user-images.githubusercontent.com/4324359/64976832-1827bf80-d867-11e9-8750-2730f23db213.png)

We get a visible dark line where the transparent borders begin on the original image. We've messed about with different PNG compression levels to no avail. Any ideas on how we can fix this? 
Is there a way to to make lilliput work on centos 6, with libc 2.12 installed? Maybe build it in special way or something like that?
Build is failing on macOS Mojave 10.14

```
# github.com/discordapp/lilliput
ld: file too small (length=10) file '/Users/sherifabdlnaby/go/pkg/mod/github.com/discordapp/lilliput@v0.0.0-20181017185839-ddf7e4f2335b/deps/osx/lib/libpng.a' for architecture x86_64
clang: error: unable to execute command: Segmentation fault: 11
clang: error: linker command failed due to signal (use -v to see invocation)

Compilation finished with exit code 2
```

I tried uninstalling Command Line Tools 10.14 and Install High Sierra's but still failing to build.
It build on High Sierra successfully.
The following gist includes the code that runs the concurrent processes that resizes images that ranges from 8mb to 14mb all in jpg format:
[https://gist.github.com/MohsenElgendy/5188013d269ccf9ffacf6902805efd8f](url)

Steps the program do:
1) Reads all files in a directory named _ ./bulk-in_.
2) Sends goroutines for each file found.
3) the method that the goroutine runs is basically the example provided by lilliput with the addition of execution time calculation.

and the images that outputs the error mentioned above are glitched or gray, the exact same source code is used with gocv and it works without producing this issue.

Information:
- Processor: 3.2 GHz Intel Core i5
- Memory: 8 GB 1600 MHz DDR3
- OpenCV version is: 3.4.2
- Go version is: 1.10.3

Any ideas would be appreciated, thanks!
I've compiled the `examples/main.go` on both a MacBook Pro (Early 2015 i5) and CentOS (Amazon t2.large) and the OSX build is _much_ faster

Mac
```
time ./main-osx --input=tlou2ps4pro1.jpg --output=test123.webp                                                                        10:40:01
file type: JPEG
3840px x 2160px
image written to test123.webp
        1.20 real         1.10 user         0.07 sys
```

t2.large 
```
[ec2-user@ip-172-31-35-112 examples]$ time ./main --input=tlou2ps4pro1.jpg --output=test113.webp
file type: JPEG
3840px x 2160px
image written to test113.webp

real	0m8.039s
user	0m8.001s
sys	0m0.040s
```

Is there anything obvious I'm missing? I've tried the `build-deps-linux.sh` out of the box, as well as adding the following flags to the OpenCV cmake:
```
-DCMAKE_BUILD_TYPE=RELEASE -DWITH_TBB=ON -DWITH_IPP=ON -DWITH_V4L=ON -DENABLE_AVX=ON -DENABLE_SSSE3=ON -DENABLE_SSE41=ON -DENABLE_SSE42=ON -DENABLE_POPCNT=ON -DENABLE_FAST_MATH=ON -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_PERF_TESTS=OFF
```
But nothing is bringing it close to the Mac speed.

Cheers.
Hi, I'm trying to run the example code on ubuntu 16.04 but getting 

> illegal instruction (core dumped)

 error, when trying to install.Do I need to install the c dependencies
As a user of this project, I'd like to be able to align my resized image to a specified direction relative to the original image.

This is handled in #35.
Currently, there is no flexibility in the way Image fit is done.  The decoded image is centred around the middle of the original image by default.  This PR implements 4 additional `ImageOpsSizeMethod`s: `ImageOpsFitTopLeft`, `ImageOpsFitTopRight`, `ImageOpsFitBottomLeft`, `ImageOpsFitBottomRight`.  These gives the user more flexibility on how they want to align their image respective to the original image.  The reason why there aren't more options like `ImageOpsFitTopMiddle` is because the cropping only happens in one direction, never in both the X _and_ y axis.  So, `ImageOpsFitTopLeft` and `ImageOpsFitTopRight` will accomplish the same thing if done in a scenario where the height is cropped (i.e. aligned to top half).

I've also updated the README to reflect these changes and give readers a better idea of how to resize their images.