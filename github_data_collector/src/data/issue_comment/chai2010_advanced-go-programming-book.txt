https://godoc.org/golang.org/x/sys/cpu

提示：哪一章节的问题，建议如何修改
连接：https://chai2010.gitbooks.io/advanced-go-programming-book/content/ch1-basic/ch1-06-goroutine.html#

对于带缓冲的Channel，对于Channel的第K个接收完成操作发生在第K+C个发送操作完成之前，其中C是Channel的缓存大小。虽然管道是带缓存的，main线程接收完成是在后台线程发送开始但还未完成的时刻，此时打印工作也是已经完成的。

应改为

对于带缓冲的Channel，对于Channel的第K个**接收**操作发生在第K+C个**发送完成**操作    之前，其中C是Channel的缓存大小。

建议 关于channel 的 happens before 原则  不要用 接收、发送 、接收完成、发送完成这样的中文 建议使用 send 、receive 、send **完成** 、receive **完成**    关键字加粗 

**Inside** of the variadic function, `func Sum(a int, more ...int)`,  `more` is a slice of int, `[]int`. Since it is the compiler converts the variadic parameters into a slice of type int. 

But when defining the variadic function, it is incorrect to claim `more ...int` int 对应 []int 切片类型. 
Tyring `Sum(1, []int{2,3,4})` causes a stack overflow error. Since `more` is already a slice and compiler tries to create a new slice from []int, which is an invalid behavior, instead, it will cause the compiler eat up all the stack until overflow.

Therefore, the correct way to pass a slice into a variadic function is  `Sum(1, []int{2,3,4}...)`, which unpacks the slice to fit variadic parameters.

The 3rd example is also kind of misleading. Yes, it works, but it is not needed to unpack a slice of empty interface when using `fmt.Println`

```golang
var a = []interface{}{123, "abc"}
fmt.Println(a)
```

will also print [123, abc], because it is an empty interface.

These two examples are inappropriate to show the feature of variadic parameters, interface type and unpack in golang. The example only basically show the code works, but lack of thoughtful explanation how and why they are work. Which are misleading as I explained above.



提示：哪一章节的问题，建议如何修改

Fix #342 . Book translated to english. Although some code needs to be fixed and request for grammer check.
## 3.3.2.3 int型变量
来取分数据的类型或者是否带有符号位
应改为 来区分数据的类型或者是否带有符号位

提示：哪一章节的问题，建议如何修改
ch2.6.2将qsort函数从Go包导出

操作:
运行go run main.go

结果:
`aiq@aiq-frank  ~/Downloads/advanced-go-programming-book/examples/ch2.6/02-qsort-v2   master ●  go run main.go 
build _/home/aiq/Downloads/advanced-go-programming-book/examples/ch2.6/02-qsort-v2: cannot find module for path _/home/aiq/Downloads/advanced-go-programming-book/examples/ch2.6/02-qsort-v2
`


![Imgur](https://i.imgur.com/boGZuzx.png)


When GRPC protobuf generates the pb.go file, does it necessarily define the message structure as a pointer?

Is there any way to avoid this
第四章P231中声明了Subscribe方法，P232订阅中调用的是SubscribeTopic，应为client.Subscribe(...)

[附录A 数组是值传递](https://github.com/chai2010/advanced-go-programming-book/blob/master/appendix/appendix-a-trap.md#%E6%95%B0%E7%BB%84%E6%98%AF%E5%80%BC%E4%BC%A0%E9%80%92)
除了使用切片能解决，还可以提示用指针去解决，原数据类型可以不用修改。

指针实现
```golang
func main() {
	x := [3]int{1, 2, 3}

	func(arr *[3]int) {
		arr[0] = 7
		fmt.Println(arr)
	}(&x)

	fmt.Println(x)
}
```