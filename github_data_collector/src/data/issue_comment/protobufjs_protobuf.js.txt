protobuf.js version: 6.8.8

Actual behavior:
When generating static code with pbjs there is no way to make function names camelCase

Expected behavior:
There is a way to make function name camelCase too.

I want to use this library to generate a types from .proto files.
I'm using this library as a client https://github.com/grpc/grpc-node/tree/master/packages/grpc-js but it doesn't have types in it, so I want to generate a static code with your library, then create types from it with pbts and use it in my client, but my proto file using a snake_case for naming a calls.

```proto
rpc hello_world (HelloWorldRequest) returns (HelloWorldResponse) {}
```

client correctly work with both `client.hello_world()` and `client.helloWorld()`, but static code that gets generated only allows to use `client.hello_world()`

Is there a way to do so?
protobuf.js version: 6.8.8

- Assume I'm storing my javascript files in `\\DESKTOP-2PLO61T\distributed\node\my-package\`
- Attempt to load `api.proto` from `\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\google\protobuf\api.proto` using `Root.load()`
- `util.path.resolve()` calls `util.path.normalize()` and the path to `api.proto` changes to `/DESKTOP-2PLO61T/distributed/node/my-package/node_modules/protobufjs/google/protobuf/api.proto`
- Note the single forward slash at the beginning of the path instead of two back slashes
- Exception thrown because the normalized path is not a valid path to `api.proto`

index.js:
```js
var path = require('path');
var Protobuf = require("protobufjs");

var sourceDir = path.join(path.dirname(require.resolve('protobufjs')), 'google', 'protobuf');
var file = path.join(sourceDir, "api.proto");
Protobuf.loadSync(file).toJSON();  // Exception
```

package.json:
```json
{
  "name": "test",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "dependencies": {
    "protobufjs": "^6.8.8"
  }
}
```

Exception from running `node \\DESKTOP-2PLO61T\distributed\node\my-package\index.js`:
```
\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\src\root.js:94
            throw err;
            ^

Error: ENOENT: no such file or directory, open '/DESKTOP-2PLO61T/distributed/node/my-package/node_modules/protobufjs/google/protobuf/api.proto'
    at Object.openSync (fs.js:443:3)
    at Object.readFileSync (fs.js:343:35)
    at fetch (\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\src\root.js:160:34)
    at Root.load (\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\src\root.js:194:13)
    at Root.loadSync (\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\src\root.js:235:17)
    at Object.loadSync (\\DESKTOP-2PLO61T\distributed\node\my-package\node_modules\protobufjs\src\index-light.js:69:17)
    at Object.<anonymous> (\\DESKTOP-2PLO61T\distributed\node\my-package\index.js:6:10)
    at Module._compile (internal/modules/cjs/loader.js:778:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:789:10)
    at Module.load (internal/modules/cjs/loader.js:653:32)
```

If you think this is a valid issue and there's no workaround, I'll try to find time to make a PR to address it.
I need to subtract one when trying to get the correct length of the encoded buffer here.
Why is that?
https://developers.google.com/protocol-buffers/docs/proto3
By the spec, `fixed64` should be unsigned. However, the current code only considers `uint64` to be unsigned, and will force `fixed64` fields to become signed.

This change causes `fixed64` to also be treated as unsigned.
```

package rt;
message RequestRithmicSystemInfo
	{                                
	// PB_OFFSET = 100000 , is the offset added for each MNM field id
     
	required int32    template_id = 154467;   // PB_OFFSET + MNM_TEMPLATE_ID
	repeated string   user_msg    = 132760;   // PB_OFFSET + MNM_USER_MSG
	}


var payload = {templateId : 16, userMsg : 'RequestRithmicSystemInfo'}
```

log: userMsg: array expected

is this behaving the way it should? 
protobuf.js version: 6.8.8

Take the following .proto file:

```
syntax = "proto3";

message Test {
	Status status = 0;
}

enum Status {
	STATUS_ERROR = 0;
	STATUS_OK = 1;
}
```

With the following commands:
```
pbjs -t static-module -w es6 -o ./test.js ./test.proto
pbts -o ./test.d.ts ./test.js
```

The generated .d.ts file will be unusable, as it references the type `Status`, buts its definition is missing. Using commonjs instead of es6 yields the same results.

This issue doesn't occur when `Test` is defined after `Status`.
protobuf.js version: 6.8.8

`[ 'object' ].` is generated instead of `Record` and `[ 'Promise' ].` instead of `Promise` in `.d.ts` files.

```
public foo(request: bar.qux.IFooReq): [ 'Promise' ].<bar.qux.FooResp>;
```


It would be great to support `--lint` to `pbts` as well, because there are a lot of typescript eslint errors on the generated typescript file:
```
  249:19  error    Interface name must not be prefixed with "I"     @typescript-eslint/interface-name-prefix
  273:15  warning  'Device' is defined but never used               @typescript-eslint/no-unused-vars
  324:54  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  335:29  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  341:43  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  345:19  error    Interface name must not be prefixed with "I"     @typescript-eslint/interface-name-prefix
  363:15  warning  'Network' is defined but never used              @typescript-eslint/no-unused-vars
  408:54  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  419:29  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  425:43  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  668:21  error    Interface name must not be prefixed with "I"     @typescript-eslint/interface-name-prefix
  681:17  warning  'ProductPrice' is defined but never used         @typescript-eslint/no-unused-vars
  723:56  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  734:31  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  740:45  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  750:21  error    Interface name must not be prefixed with "I"     @typescript-eslint/interface-name-prefix
  812:17  warning  'ProductTemplateData' is defined but never used  @typescript-eslint/no-unused-vars
  903:28  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  915:31  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
  921:45  warning  Unexpected any. Specify a different type         @typescript-eslint/no-explicit-any
```
Currently, trying to parse a .proto file with such construct results in an error:

> Error: illegal token 'reserved'

However, there's nothing in the Protocol Buffers specification[1] that would
suggests that it's illegal, moreover, even Google itself does use it, e.g. in
their Chromium Sync protocol[2].

[1] https://developers.google.com/protocol-buffers/docs/reference/proto3-spec#reserved
[2] https://chromium.googlesource.com/chromium/src.git/+/refs/heads/master/components/sync/protocol/sync.proto#848
fixes issues with using pbts on Windows platforms
with modern versions of node 12.0.0 +

I have tried this locally on the project I work on with node 12.0.0 and it fixes problems as described here

https://github.com/protobufjs/protobuf.js/issues/1275#issuecomment-570588830