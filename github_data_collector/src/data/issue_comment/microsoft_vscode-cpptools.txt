I want to use Multi-Root structure to edit and compile Multiple Project.
(Just like having multiple projects in a solution in Visual Studio)

However, I met some problems.

Whether I chose “g++(C-Project)” or “g++(…code-workspace)”, both of them can generate an executable.

After compiling, I used Launch to run the executable. Both “Launch(C-Project)” and “Launch(code-workspace)” failed.

I checked my “launch.json, tasks.json, and .code-workspace”, but found nothing.
Do I miss something? Or VSCode can't support “Launch in Multi-Root Workspace”?

![operate](https://user-images.githubusercontent.com/59817015/72681292-0e57e680-3afd-11ea-8743-4b0630a1f617.gif)

This is my “code-workspace”
![code-worksapce](https://user-images.githubusercontent.com/59817015/72681309-39dad100-3afd-11ea-8357-5eb5122c5412.png)

This is my “launch.json” in “C-Project/.vscode”
![launch](https://user-images.githubusercontent.com/59817015/72681328-6262cb00-3afd-11ea-8292-217651f103e5.png)

This is my “tasks.json” in “C-Project/.vscode”
![tasks](https://user-images.githubusercontent.com/59817015/72681333-6a226f80-3afd-11ea-990f-a35e8f264ea1.png)

This is my whole files.
[VSC-CPP-MINGW_MR.zip](https://github.com/microsoft/vscode-cpptools/files/4082684/VSC-CPP-MINGW_MR.zip)

### Describe the issue

- OS and Version: MacOS 10.15.2
- VS Code Version: 1.41.1
- C/C++ Extension Version: 0.26.2
- Other extensions you installed (and if the issue persists after disabling them):
Locally: Remote - SSH, Remote - SSH: Editing Configuration Files
Remote: just this plugin
- A clear and concise description of what the bug is:
When I reload or start the window, I immediately get an error in the output stating this:
```
[Error - 4:03:55 PM] Connection to server got closed. Server will not be restarted.
terminate called after throwing an instance of 'std::system_error'
  what():  Resource temporarily unavailable
```

Unsure of what error is or could be.

### To reproduce
Open a remote directory, ensure the plugin is installed, and see the error.
Using vscode with cpptools under Win10 and remote ssh to a Ubuntu based Jetson Nano machine.
Getting error messages :
> command 'C_Cpp.ConfigurationEditJSON'  not found
> command 'C_Cpp.ConfigurationEditUI' not found

Tried 0.26.1 with same issue. Reinstalling and/or restarting did not help.

- OS and Version: Win10 10.0.18362
- VS Code Version:  1.41.1
- C/C++ Extension Version: 0.26.2
- Remote SSH (on Host), Cmake, Cmake Tools, Python(on Remote)

in addition there is a porblem:
> Unable to load schema from 'cpptools-schema:/c_cpp_properties.schema.json': Request vscode/content failed with message: cannot open cpptools-schema:/c_cpp_properties.schema.json. Detail: resource is not available.


**Type: LanguageService**
<!----- Input information below ----->

<!--
**Prior to filing an issue, please review:**
- Existing issues at https://github.com/Microsoft/vscode-cpptools/issues
- Our documentation at https://code.visualstudio.com/docs/languages/cpp
- FAQs at https://code.visualstudio.com/docs/cpp/faq-cpp
-->

**Describe the bug**
- OS and Version: centos7.2
- VS Code Version: latest
- C/C++ Extension Version: all version(about a year, I always use latest version)
- Other extensions you installed (and if the issue persists after disabling them): only vscode-cpptools installed
- A clear and concise description of what the bug is:
![image](https://user-images.githubusercontent.com/13925796/72581337-faa05a80-3919-11ea-8046-3e2ce3904f88.png)
what's the fxxk the auto-completion. I use vscode years, never can use auto-completion for cpp


**To Reproduce**
<!-- Steps to reproduce the behavior: -->
<!-- *The most actionable issue reports include a code sample including configuration files such as c_cpp_properties.json* -->
1. Go to '...'
2. Click on '....'
3. Scroll down to '....'
4. See error

**Expected behavior**
<!-- A clear and concise description of what you expected to happen. -->

**Screenshots**
<!-- If applicable, add screenshots to help explain your problem. -->

**Additional context**
<!--
* Call Stacks: For bugs like crashes, deadlocks, infinite loops, etc. that we are not able to repro and for which the call stack may be useful, please attach a debugger and/or create a dmp and provide the call stacks. Windows binaries have symbols available in VS Code by setting your "symbolSearchPath" to "https://msdl.microsoft.com/download/symbols".
* Add any other context about the problem here including log messages in your Output window ("C_Cpp.loggingLevel": "Debug" in settings.json).
-->

- Add new Typescript E2E tests for testing IntelliSense features. Test uses a private workspace project and is run from private Azure pipeline. The test code that runs the tests from VS Code development host enviroment is on this Typescript repository.
- Add test set for "Quick info"
- Add test set for "Find all references"

- Note: tests are not yet run on the Typescript check-in tests.
<!-- Describe the feature you'd like. -->
When writing node-gyp-based C/C++ extensions to nodejs, node-gyp adds the currently active node include directory to the include path. the binding.gyp file can specify additional paths. These are not configured in system environment variables (and when using nvm the location of the node include directory is dynamic which is the real issue). When using node-addon-api, the `"<!@(node -p \"require('node-addon-api').include\")"` is used in binding.gyp to add node-addon-api's include directory to the include path.

While node-gyp automatically adds these paths for compilation, cpp-tools does not know about them. It would be useful to have an option to automatically include the node include directory as well as those defined in binding.gyp so that vscode can find those files. Currently it squiggles them and isn't able to find declarations and definitions.

Overall it would be a nice addition to have an option of something like `C_Cpp.addNodeGypIncludePaths` or something similar. The `nvm` setting seems most important, because hardcoding a possibly non-existent node-addon-api location is not a big deal. So maybe it's more limited and something like `C_Cpp.addNvmNodeIncludePath`.

Thanks for your consideration.


As a workaround, I created a simple extension that implements a command to return the node include directory:
```
let disposable = vscode.commands.registerCommand('extension.nodeIncludeNvm', function () {
  // just return a best guess as to the include directory for this version
  // of node. presume NVM_BIN var points to bin if it exists. if not, presume
  // /usr/local/include/node. no, it's not sophisticated.
  let path;
  if (process.env.NVM_BIN) {
    path = process.env.NVM_BIN.replace(/\/bin$/, '/include');
  } else {
    path = '/usr/local/include/node';
  }
  return Promise.resolve(path);
});
```

It works within the "echo nodeIncludeNvm path" task:
```
    "tasks": [
        {
            "label": "echo nodeIncludeNvm path",
            "type": "shell",
            "command": "echo ${command:extension.nodeIncludeNvm}",
            "problemMatcher": []
        },
        {
          "label": "echo C_Cpp.default.includePath",
          "type": "shell",
          "command": "echo ${config:C_Cpp.default.includePath}",
          "problemMatcher": []
        }
    ]
```

but I am unable to get it to "stick" in `C_Cpp.default.includePath`. My project settings.json:
```
  "C_Cpp.default.includePath": [
    "${workspaceFolder}",
    "${command:extension.nodeIncludeNvm}",
    "${workspaceFolder}/node_modules/node-addon-api"
  ],
```

and executing "echo C_Cpp.default.includePath" task output is:
```
> Executing task: echo ${workspaceFolder},${command:extension.nodeIncludeNvm},${workspaceFolder}/node_modules/node-addon-api <

/home/bruce/github.com/bmacnaughton/nvm-node-include,,/home/bruce/github.com/bmacnaughton/nvm-node-include/node_modules/node-addon-api
```

If I'm just doing something wrong trying to get `${command:extension.nodeIncludeNvm}` to work let me know. In any case my workaround *seems* to work even though the task doesn't handle the command substitution - cpptools is finding the include files.

Originally reported at https://github.com/microsoft/vscode-cpptools/issues/4852 . It's a known issue since auto-complete was released so this may be duplicate of another issue.

```
class foo;

int func()
{
	foo f; // bug#1 shouldn't popup autocomplete
	int i; // doesn't popup autocomplete, but it should be manually triggerable (bug#2)
}
```

Both bugs don't repro with VS.
**Type: LanguageService**
<!----- Input information below ----->

*I don't know if that qualifies as a bug or if this is the intended autocompletion behaviour.*

**Describe the bug**
- OS and Version: Archlinux
- VS Code Version: 1.41.1
- C/C++ Extension Version:
- Other extensions you installed (and if the issue persists after disabling them):
- A clear and concise description of what the bug is.

**To Reproduce**
1. Start implementing your class constructor;
2. While initialising your class fields/variables, see how the autocomplete suggest more than a thousand entries, making the one your are looking for impossible to find without looking up the class definition. Most of those entries are defines in the system headers and standard libraries.

**Expected behavior**
Autocomplete should suggest entries that are relevant to class initialisation, i.e. the variables to initialise.

The same goes when inside the body a function. Seeing everything available in the global scope seems irrelevant to the constructor implementation or any kind of function. But I'm in no way a C++ expert maybe some people actually need those thousands of defines to display like that in a small window.

**Screenshots**
![class constructor example](https://user-images.githubusercontent.com/26181129/72452516-94022c00-37b5-11ea-86da-864164400c92.png)


**Additional context**
This occurs in other contexts, like when picking the name of a variable: the autocomplete will propose defines and labels from the global scope in a context were it should no suggest anything at all.

![image](https://user-images.githubusercontent.com/26181129/72452843-1b4f9f80-37b6-11ea-9247-415887b343b9.png)

I'm eager to hear what are your takes on this issues.

Thanks to anyone who is willing to take part on this matter.

From C++/VS Code sync meeting:

Delay *real* activation of C++ extension. Want to avoid notification that contents of extension have changed and the user needs to reload

Possible Solutions:
- Potentially have one extension that is language activated and one for tools that is always * activated that downloads platform specific bits and fetches latest, because extension should be ready to go


C++ extension currently has their C++ Configuration UI in a web view, can use the VS Code Custom Editor API Proposal: https://github.com/microsoft/vscode/issues/77131