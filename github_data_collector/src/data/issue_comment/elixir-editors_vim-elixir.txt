When opening any `elixir` or `eelixir` files with this package, I incur a 4-10 second load time for each file. After some profiling, I've narrowed it down the the elixir syntax package, specifically these lines (currently starting at `syntax/elixir.vim:109`):

```
" LiveView Sigils surrounded with ~L"""
syntax include @HTML syntax/html.vim
unlet b:current_syntax
syntax region elixirLiveViewSigil matchgroup=elixirSigilDelimiter keepend start=+\~L\z("""\)+ end=+^\s*\z1+ skip=+\\"+ contains=@HTML fold
```

Commenting these lines drops the load time to about half a second.

## Versions

#### Computer:
```
MacBook Air (Retina, 13-inch, 2019)
macOS Mojave Version 10.14.6
```

#### NeoVim
```
NVIM v0.4.3
Build type: Release
LuaJIT 2.0.5
Compilation: /usr/local/Homebrew/Library/Homebrew/shims/mac/super/clang -U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=1 -DNDEBUG -DMIN_LOG_LEVEL=3 -Wall -Wextra -pedantic -Wno-unused-parameter -Wstrict-prototypes -std=gnu99 -Wshadow -Wconversion -Wmissing-prototypes -Wimplicit-fallthrough -Wvla -fstack-protector-strong -fdiagnostics-color=auto -DINCLUDE_GENERATED_DECLARATIONS -D_GNU_SOURCE -DNVIM_MSGPACK_HAS_FLOAT32 -DNVIM_UNIBI_HAS_VAR_FROM -I/tmp/neovim-20191107-13403-1or2rj3/neovim-0.4.3/build/config -I/tmp/neovim-20191107-13403-1or2rj3/neovim-0.4.3/src -I/usr/local/include -I/tmp/neovim-20191107-13403-1or2rj3/neovim-0.4.3/deps-build/include -I/usr/local/opt/gettext/include -I/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.15.sdk/usr/include -I/tmp/neovim-20191107-13403-1or2rj3/neovim-0.4.3/build/src/nvim/auto -I/tmp/neovim-20191107-13403-1or2rj3/neovim-0.4.3/build/include
Compiled by brew@Mojave.local

Features: +acl +iconv +tui
See ":help feature-compile"

   system vimrc file: "$VIM/sysinit.vim"
  fall-back for $VIM: "/usr/local/Cellar/neovim/0.4.3/share/nvim"

Run :checkhealth for more info
```

#### Terminal
```
iterm2: 3.3.6 (auto_updates)
https://www.iterm2.com/
/usr/local/Caskroom/iterm2/3.3.2 (64B)
From: https://github.com/Homebrew/homebrew-cask/blob/master/Casks/iterm2.rb
```

#### Elixir
```
Erlang/OTP 22 [erts-10.5.1] [source] [64-bit] [smp:4:4] [ds:4:4:10] [async-threads:1] [hipe] [dtrace]

Elixir 1.9.1 (compiled with Erlang/OTP 22)
```
Fixes #510 

In eb06df6 I used a regexp that was matching too many things. I completely forgot that spaces are also printable characters ü§¶‚Äç‚ôÇ 

This PR comes with a new version using `[^\d0-\d127]` to match those special characters. This will:

- **Not** match spaces, so atoms will be matched correctly;
- Match accented characters like `√° √≥ √©`;
- Match least common characters like `‡≤†` which **are** valid in an atom like `:‡≤†‚Äø‡≤†`;
- Match **some** invalid characters;

Elixir actually accepts any UTF-8 letter as atoms and Vim does not support Unicode modifiers AFAIK, so using something like `\p{L}` is not possible üòû 
I went with the route of adding any non-ASCII on top of words and @s as it gave us more positive results and the false-positives will raise errors when compiled, so they are easily fixable. I still can't decide by myself if we should add those false-positives or not.
WDYT?

The other option would be to remove support for accents and other UTF-8 characters and only highlight those atoms with `\w` and `@` matched chars.

@nifoc @jbodah please take at look at this. Any inputs are welcome.
After applying eb06df6, syntax highlighting appears to be mostly broken for me.

Example from `mix.exs`:

<img width="465" alt="Bildschirmfoto 2019-09-03 um 20 17 07" src="https://user-images.githubusercontent.com/222412/64198080-de7ab000-ce87-11e9-857a-f81b0e94a9f8.png">

I'm using the latest Neovim commit (`NVIM v0.4.0-1944-g38806f23e`).

Please let me know if you need more information.

Tagging @w-sanches, since he authored the commit.
If you write for example the following code: 


```
case pattern do
  :* -> :ok 
  _ -> :error
end
```

it is indented as:

```
case pattern do
  :* -> :ok 
    _ -> :error
end
```
The coloration is also broken by this atom (I think `:+` `:-` `:/` is the same but I didn't tested it)

*Avoid method*
To avoid this bug we are currently using `:"*"` instead. 
# Description
Function call highlight was [added to elixir syntax highlight on Sublime Text](https://github.com/elixir-editors/elixir-tmbundle/pull/179) and I thought that was a neat addition as it makes it easier to scan what are function vs variables in the code. I propose we can also add this to our Vim syntax highlight.

# Result
![image](https://user-images.githubusercontent.com/1727723/63980491-308b9200-ca92-11e9-9d56-5dfc6e351eea.png)

Filing a bug? Have you already tried updating `vim-elixir`? (yes) For indentation/highlighting bugs, please use the following template:

# Actual

```ex
if 1 == 1 do
  quote do
  IO.puts "hi"
end
end
```

# Expected

```ex
if 1 ==1 do
  quote do
    IO.puts "hi"
  end
end
```

Filing a bug? Have you already tried updating `vim-elixir`? (yes I have) For indentation/highlighting bugs, please use the following template:

# Actual

```ex
if 1 == 1 do
  case 2 == 2 do
    1 -> "hi"
    _ -> "ho"
  end
    "yes"
else
    "no"
end
```

# Expected

```ex
if 1 == 1 do
  case 2 == 2 do
    1 -> "hi"
    _ -> "ho"
  end
  "yes"
else
  "no"
end
```

We have `vim` and `nvim` in containers now; we should be running the test suite against each implementation. Create scripts that will orchestrate this for us

```ex
  def delete(conn, %{"id" => id}) do
    user = Accounts.get_user!(id)

    with {:ok, %User{}} <- Accounts.delete_user(user) do
      send_resp(conn, :no_content, "")
    end
  end
```
when cursor move to end,neovim appear Ôºö
 E15: Invalid expression: %#elixirStringDelimiter#"%#elixirString#id%#elixirStringDelimiter#"%#elixirArguments# %#elixirOperator#=>%#elixirArguments# id



The CI setup has been fragile for a while and now seems busted on branches. It would be worthwhile to reimplement CI from scratch