
Only support PHP 7.0 and later.

Contains everything in PR #73.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ccampbell/chromephp/74)
<!-- Reviewable:end -->

Well, I'm reopening this after 4 years because I accidentally opened the original PR against on the master branch of my fork and now I'm, like, officially forking this package, so that won't do...

References #48.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ccampbell/chromephp/72)
<!-- Reviewable:end -->

You should better use static::method and static::$prop to be able to overwrite some methods in child classes without touching original class.
Thanks

Add a function to log a PHP Exception or Error with the file and line of the Exception or Error class.
ChromePHP is meant to help developers debug.  Ironically, it can cause a 500 internal server error when served from Apache if the logs are too large, which gives absolutely no information from the application about why it failed.

This commit checks the size of the header, and if it is too large, it removes some logs until it is small enough, first attempting to remove regular "status" logs, and if it is still too large, the rest of the logs. It even plays nice with the table log.
I stumbled upon that adding binary data to the log makes the header added be completely blank. Turns out it dies on the json_encode of binary data. The easy fix was to utf8_encode it:
`
protected static function _log($type, array $args)
    {
        // nothing passed in, don't do anything
        if (count($args) == 0 && $type != self::GROUP_END) {
            return;
        }

        $logger = self::getInstance();

        $logger->_processed = array();

        $logs = array();
        foreach ($args as $arg) {
            $logs[] = $logger->_convert(utf8_encode($arg)); //added to fix logging binary data
        }
        
        $backtrace = debug_backtrace(false);
        $level = $logger->getSetting(self::BACKTRACE_LEVEL);

        $backtrace_message = 'unknown';
        if (isset($backtrace[$level]['file']) && isset($backtrace[$level]['line'])) {
            $backtrace_message = $backtrace[$level]['file'] . ' : ' . $backtrace[$level]['line'];
        }

        $logger->_addRow($logs, $backtrace_message, $type);
    }
`

Should probably be done for the other logging alias methods (error, warn, etc). 
Should I do a pull request with this? Seems very minor. Thanks!
The HTTP spec does not define a limit, however many servers do by
default:
Apache 2.0, 2.2: 8K
nginx: 4K - 8K
IIS: varies by version, 8K - 16K
Tomcat: varies by version, 8K - 48K(?!)

Ans it is not just with ChormePHP.
Some user agents and some requests just get too big for web server
defaults.
It seems like a silly problem to run into, but it keeps happening.
I'm getting the error below when I try to Chrome::log() a mysql_query result:

> Error in event handler for runtime.onMessage: SyntaxError: Unexpected end of JSON input
>     at _decode (chrome-extension://noaneddfkdjfnfdakjjmocngnfkfehhd/log.js:156:21)
>     at _process (chrome-extension://noaneddfkdjfnfdakjjmocngnfkfehhd/log.js:164:26)
>     at _handleHeaderUpdate (chrome-extension://noaneddfkdjfnfdakjjmocngnfkfehhd/log.js:181:9)

*if I use mysql_fetch_array before Chrome::log() the error disappear.

Suggestion:
Add if(is_resource($object)){return get_resource_type($object);} to ChromePHP::_convert()