I added golint to goland's "on save action", but when saved(after file modified), no tips found.

I must select "Always" on choice "show console" In Advanced Options. So it can work normal.

I found that golint command always exit with status 0. 

can it return with status 1 when errors checked or need i pass more config params to run golint cmd?
While linting, reference to the style guide are collected. When running the binary, there is no option to show these as additional output.

Can this be added?
according to https://golang.org/doc/effective_go.html#interface-names
The `Flush` and `Close` also have canonical signatures and meanings, but they are not in commonMethods for now.
I agree that unit-specific names are bad for variables, but in constants it may clarify their value

Example:
```GO
const (
	tenSeconds = 10 * time.Second
)
```
As of now this gives the warning "var tenSeconds is of type time.Duration; don't use unit-specific suffix "Seconds"". This is unfortunate as I find using constants like this very readable when doing timing and delays.
This patch introduces an option to fix pointed out warnings automatically.
This one provides such function partially; actually it has the only naming auto-correction.

~To be honest, I'm not confident about how to test this feature, this patch contains a simple shell-script based test as you can see. Could you please tell me if there is a good way?~

Update: I wrote a test case to check the behavior of auto-fix mode at 86ac9149668b2514f199ad5a0126a94c5176d0d8

It can fix like so:
https://github.com/golang/lint/blob/9ceeaa38f1710f96dd9f0dc840a44b4e0de0c390/testdata/names.go
=>
https://github.com/golang/lint/blob/9ceeaa38f1710f96dd9f0dc840a44b4e0de0c390/testdata/auto_fix/expected.go

Ref #214
Consider the following pattern (which currently doesn't trigger any warnings):

```
type unexportedInterface interface {
  ...
}

func ExportedFunc(i unexportedInterface) {
  ...
}
```

My understanding is that this pattern should be avoided, since it can be troublesome to use (on similar grounds to #210, which golint *does* catch). Seems like it'd be nice if golint flagged this pattern as well.

The following [is allowed](https://github.com/golang/go/issues/142730), but it doesn't do anything useful and especially not what one could expect ("recover and ignore the panic") at a cursory reading. I'd argue there's no good reason why it should ever be written:

```
func foo() {
  defer recover()
  // ...
}
```

it should instead be:

```
func foo() {
  defer func() {
    recover()
  }()
  // ...
}
```

lint should probably emit a warning if it encounters `defer recover()`.

While there's an argument to be made that possibly recovering and ignoring the panic is a questionable practice, it does not change the fact that the specific form discussed above should generate a warning of some sort.

A quick search reveals that this actually happens in the wild, although it's not exceedingly common: https://www.google.com/search?q=intext:"defer+recover()"+ext:go+site:github.com

Not sure if this should go in vet or lint. I can move it if needed.
During refactoring it happens to me a lot that I move stuff out of a function or method but leave a now unused argument. Any plans on supporting the detection and highlighting of unused arguments? 

I see that it is a complex problem because there are cases like a method, which keeps an argument to fulfill an interface. 
In the readme you write that one should "please send mail before starting work on anything major". Where should this mail go? Please update the readme accordingly. 