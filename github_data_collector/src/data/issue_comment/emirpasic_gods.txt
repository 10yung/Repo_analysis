fix the utils.TestToStringFloats unit test
because both `Map` and `List` define a `Get` with different parameters. Ideally I want something like:

```
m := TypeThatIsBothMapAndList.New()
m.Put("foo", 4)
m.Add(Pair.New("foo", 4))
pair := m.At(0)
fmt.Println(pair.First, pair.Second)
```

Use case is I want to have a different `LinkedHashMap` that's not only `enumerable`, but also allow random access to the index. It makes sense for this hypothetical map to also implement `List`, but right now that's not possible.

` m := linkedhashmap.New()
	m1:= linkedhashmap.New()
	c :=t{S:"sss",A:"dddd"}
	m1.Put("c",c)
	m.Put("b","aaaa")
	m.Put("a","aaaa")
	m.Put("c",m1)
	mb,err:=m.ToJSON()
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(string(mb))`
linkedhashmap contain linkedhashmapï¼Œ toJSON result is ni(Code above mb inside c is nil)l,I added some code in this func

`// ToJSON outputs the JSON representation of map.
func (m *Map) ToJSON() ([]byte, error) {
	var b []byte
	buf := bytes.NewBuffer(b)

	buf.WriteRune('{')

	it := m.Iterator()
	lastIndex := m.Size() - 1
	index := 0

	for it.Next() {
		var km []byte
		var err error
		switch it.Key().(type) {
		case *Map:
			km,err =it.Key().(*Map).ToJSON()
		default:
			km, err = json.Marshal(it.Key())
		}
		//km, err := json.Marshal(it.Key())
		if err != nil {
			return nil, err
		}
		buf.Write(km)

		buf.WriteRune(':')
		var vm []byte
		switch it.Value().(type) {
		case *Map:
			vm,err =it.Value().(*Map).ToJSON()
			break
		default:
			vm, err = json.Marshal(it.Value())
		}
		if err != nil {
			return nil, err
		}
		buf.Write(vm)

		if index != lastIndex {
			buf.WriteRune(',')
		}

		index++
	}

	buf.WriteRune('}')

	return buf.Bytes(), nil
}`

This pull request configures this repository to be run on Repl.it, which allows for quick experimentation with different data structures in Go.

It adds a `.replit` configuration file and a Repl.it badge to the `README`.

You can read more about running repos on Repl.it [here](https://docs.repl.it/repls/dot-replit), or view the Repl [here](https://repl.it/@HarshdeepKahlo1/gods).
fatal error: concurrent map read and map write
```
import "github.com/emirpasic/gods/sets/linkedhashset"

func main() {
	set := linkedhashset.New() // empty
	go func() {
		for i := 0; i < 100; i++ {
			go set.Add(i)
		}
	}()
	go func() {
		for i := 0; i < 100; i++ {
			go set.Remove(i)
		}
	}()

	select {}
}
```
This PR add a go.mod file in order to convert this library to a module. 

Since the library is already tagged and still in major v1 this should be enough.

The step I followed are according to the official guide https://blog.golang.org/migrating-to-go-modules:

1. go mod init github.com/emirpasic/gods
2. go mod tidy

Introduce a new Filter() command to doubly linked lists that can perform several removals in a single O(n) sweep, and use that new method to make set removal O(n) instead of O(n**2)
Related to #106
The LinkedHashMap's `Remove` is O(n) ?

```
// Remove removes the element from the map by key.
// Key should adhere to the comparator's type assertion, otherwise method panics.
func (m *Map) Remove(key interface{}) {
	if _, contains := m.table[key]; contains {
		delete(m.table, key)
		index := m.ordering.IndexOf(key)   // FIXME: O(n) here ?
		m.ordering.Remove(index)
	}
}
```