**Does this issue relate to a new *feature* or an existing *bug*?**
Could be either, but I suspect it is a bug.

**What version of Serilog is affected?  Please list the related NuGet package.**
Serilog 2.9.0
Serilog.Sinks.Console 3.1.1

**What is the target framework and operating system?**
netCore 3.1

**Please describe the current behavior?**
I have a class that has it's own format specifiers. These are being ignored when used in the message template.

**Please describe the expected behavior?**
I would expect the same behavior as when using `string.Format`, `ToString(format)` and `string interpolation`.

**If the current behavior is a bug, please provide the steps to reproduce the issue and if possible a minimal demo of the problem**

```
static void Main(string[] args)
{
    Serilog.Debugging.SelfLog.Enable(msg => Debug.WriteLine(msg));
    var logger = new LoggerConfiguration()
        .WriteTo.Console(outputTemplate: "{Timestamp:HH:mm} [{Level:u3}] {Message}{NewLine}")
        .CreateLogger();

    logger.Information("Hello World!");

    var temperature = new Temperature(12);
    logger.Information("MessageTemplate : {Temperature:K}", temperature);
    logger.Information("String.Format   : {Temperature}", string.Format("{0:K}", temperature));
    logger.Information("ToString(format): {Temperature}", temperature.ToString("K"));
    logger.Information("Interpolation   : {Temperature}", $"{temperature:K}");
}
```
Output:
```
// [INF] MessageTemplate : "12,00°C"
// [INF] String.Format   : "285,15K"
// [INF] ToString(format): "285,15K"
// [INF] Interpolation   : "285,15K"
```

Temperature class taken from: https://docs.microsoft.com/en-us/dotnet/standard/base-types/formatting-types#the-iformattable-interface

```
using System;
using System.Globalization;

public class Temperature : IFormattable
{
   private decimal m_Temp;

   public Temperature(decimal temperature)
   {
      this.m_Temp = temperature;
   }
   
   public decimal Celsius
   {
      get { return this.m_Temp; }
   }
   
   public decimal Kelvin
   {
      get { return this.m_Temp + 273.15m; }   
   }
   
   public decimal Fahrenheit
   {
      get { return Math.Round((decimal) this.m_Temp * 9 / 5 + 32, 2); }
   }

   public override string ToString()
   {
      return this.ToString("G", null);
   }
   
   public string ToString(string format)
   {
      return this.ToString(format, null);
   }
   
   public string ToString(string format, IFormatProvider provider)  
   {
      // Handle null or empty arguments.
      if (String.IsNullOrEmpty(format))
         format = "G";
      // Remove any white space and covert to uppercase.
      format = format.Trim().ToUpperInvariant();

      if (provider == null)
         provider = NumberFormatInfo.CurrentInfo;
            
      switch (format)
      {
         // Convert temperature to Fahrenheit and return string.
         case "F":
            return this.Fahrenheit.ToString("N2", provider) + "°F";
         // Convert temperature to Kelvin and return string.
         case "K":
            return this.Kelvin.ToString("N2", provider) + "K";
         // Return temperature in Celsius.
         case "C":
         case "G":
            return this.Celsius.ToString("N2", provider) + "°C";
         default:
            throw new FormatException(String.Format("The '{0}' format string is not supported.", format));
      }      
   }
}
```

**What issue does this PR address?**

Symbols not published to the NuGet.org symbol server. Publishing was disabled early on due to some flakiness in the tooling (IIRC).

**Does this PR introduce a breaking change?**

No

**Please check if the PR fulfills these requirements**
- [ ] The commit follows our [guidelines](https://github.com/serilog/serilog/blob/dev/CONTRIBUTING.md)
- [ ] Unit Tests for the changes have been added (for bug fixes / features)

**Other information**:

**A few questions before you begin:**

> Is this an issue related to the Serilog core project or one of the [sinks](https://github.com/serilog/serilog/wiki/Provided-Sinks) or [community projects](https://github.com/serilog/serilog/wiki/Community-Projects).  This issue list is intended for Serilog core issues. If this issue relates to a sink or related project, please log on the related repository.  Please use [Gitter chat](https://gitter.im/serilog/serilog) and [Stack Overflow](http://stackoverflow.com/questions/tagged/serilog)  for discussions and questons.

Nope, it's `Logger.cs`

**Does this issue relate to a new *feature* or an existing *bug*?**
- [ ] Bug
- [x] New Feature

**What version of Serilog is affected?  Please list the related NuGet package.**

All - I'm using `2.9.0`

**What is the target framework and operating system? See [target frameworks](https://docs.microsoft.com/en-us/nuget/schema/target-frameworks) & [net standard matrix](https://docs.microsoft.com/en-us/dotnet/standard/net-standard).**

- [x] netCore 2.0
- [x] netCore 1.0
- [x] 4.7
- [x] 4.6.x
- [x] 4.5.x

All

**Please describe the current behavior?**

Currently, there is no output to the self log when a `Logger` instance is disposed, or when using a disposed instance.

**Please describe the expected behavior?**

When a `Logger` instance is disposed (or maybe just the top level one?), write that to the self log.  Alternatively, write to the self log when trying to dispose the same instance twice, or when trying to use an instance that has been disposed.

For clarity, I accidentally registered my `Log.Logger` instance in my DI container in such a way that the static instance got cleaned up at the end of the request. This cause the logs to work on the first request, but subsequently has pretty weird behaviour (Seq sink would stop, App Insights sink would throw null ref exceptions all the time, and the console sink kept on truckin' on).

The only messages in the self logs were the null refs in the app insights sink.

**If the current behavior is a bug, please provide the steps to reproduce the issue and if possible a minimal demo of the problem**

**Does this issue relate to a new *feature* or an existing *bug*?**
- [x] Bug
- [ ] New Feature

**What version of Serilog is affected?  Please list the related NuGet package.**

2.8.0

**What is the target framework and operating system? See [target frameworks](https://docs.microsoft.com/en-us/nuget/schema/target-frameworks) & [net standard matrix](https://docs.microsoft.com/en-us/dotnet/standard/net-standard).**

- [x] netCore 2.0
- [ ] netCore 1.0
- [ ] 4.7
- [ ] 4.6.x
- [ ] 4.5.x

**Please describe the current behavior?**

```c#
Log.Information("Error {Rpc.Error} occured", "boom");
```
renders to `Error {Rpc.Error} occured` 

**Please describe the expected behavior?**

`Error "boom" occured`

-----
Relates to #404

I discovered that this is due to `IsValidInPropertyName` method inside `ParsePropertyToken`:
```c#
for (var i = 0; i < propertyName.Length; ++i)
{
      var c = propertyName[i];
      if (!IsValidInPropertyName(c))   <--- ???
           return new TextToken(rawText, first);
}
```

I originally used `LogContext.PushProperty("Rpc.Error", "boom")` and everything worked fine. I am interested in the question - why, when parsing a message template, knowingly narrow the set of valid characters of property name if the neighboring api (`Push`) allows you to add properties with any characters? This asymmetry led to an error when I moved the property name inside the format string and began to pass the value of the property in the params.

I read #404, but I don’t understand the motivation.
First, this is no structured data, just plain string.

> Dots within property names themselves aren't supported by many target sinks, so we chose the lowest common denominator here.

Second, I use Console and Kafka sink which both support dots in property names. However, this talk is not even about the dots. The template string does not work if you use any character other than an alphanumeric character or underscore - `:`, `-`, etc. What problem do you solve when you talk about _lowest common denominator_? And here I come back to the fact that `Push` allows you to pass an arbitrary property name (and that's cool). Therefore, as I see it, all this concern for the lowest common denominator does not make sense.


The `MinimumLevel` override does not consider the `SourceContext` property defined in a `LogEvent`.

Repro:

```csharp
Log.Logger = new LoggerConfiguration()
    .MinimumLevel.Verbose()
    .MinimumLevel.Override("MyContext", LogEventLevel.Information)
    .WriteTo.Console()
    .CreateLogger();

// Correct: DOES NOT write to sink, as expected
Log.ForContext(Serilog.Core.Constants.SourceContextPropertyName, "MyContext")
    .Verbose("If you see this, something is wrong (1)");

// Incorrect: DOES WRITE to sink
if (Log.Logger.BindMessageTemplate("If you see this, something is wrong (2)",
    propertyValues: null, out var parsedTemplate, out _))
{
    var properties = new[]
    {
        new LogEventProperty(Serilog.Core.Constants.SourceContextPropertyName,
            new ScalarValue("MyContext")),
    };

    var logEvent = new LogEvent(DateTimeOffset.Now, LogEventLevel.Verbose,
        exception: null, parsedTemplate, properties);

    // DOES WRITE to sink, but *NOT* expected
    Log.Write(logEvent);
}

```

![image](https://user-images.githubusercontent.com/177608/68348624-ce25c200-00d0-11ea-9c79-5e2d1bc701d1.png)


---

Repro full project:
* [ReproSerilogMinimumLevelOverride.zip](https://github.com/serilog/serilog/files/3817268/ReproSerilogMinimumLevelOverride.zip)

Tested:
- Serilog v2.9.0
- .NET Core 3.0 app

Frameworks set up for structured logging often include a range of contextual properties in log events, via `LogContext.PushProperty()`, or `ILogger.BeginScope()`. Not all applications need or want all of these.

`Enrich.ByRemovingProperty()` addresses this:

```csharp
Log.Logger = new LoggerConfiguration()
    .Enrich.ByRemovingProperty("Test")
    .CreateLogger();

Log.ForContext("Test", 1).Information("Hello");
// --> no `Test` property appears in the output
```

The enricher will remove `Test` even if it appears in the message template:

```csharp
Log.ForContext("Running {Test}", testName);
```

This is the default behavior because a) it's cheap, and b) it's safer when the property is (questionably) something like `CreditCardNumber` (do not do this 🤨).

To check the message template, and retain the property when it appears in it, an additional flag can be set:

```csharp
    .Enrich.ByRemovingProperty("Test", retainWhenInMessage: true)
```

(The name of this flag could leave room for improvement.)

**Does this PR introduce a breaking change?**

No

**Please check if the PR fulfills these requirements**
- [x] The commit follows our [guidelines](https://github.com/serilog/serilog/blob/dev/CONTRIBUTING.md)
- [x] Unit Tests for the changes have been added (for bug fixes / features)

**Other information**:

CC @rocklan
**What issue does this PR address?**
#1359 

**Does this PR introduce a breaking change?**
No.

**Please check if the PR fulfills these requirements**
- [x] The commit follows our [guidelines](https://github.com/serilog/serilog/blob/dev/CONTRIBUTING.md)
- [x] Unit Tests for the changes have been added (for bug fixes / features)

**Other information**:

This is the beginner of a series of PRs that I'm planning to improve and optimize Serilog. A improve PerformanceTests is the base to measure if the changes are effective.

This PR only changes the PerformanceTests, to be small and logical PR.

**Changes:**

 - Upgrade the dotNet-core SDK version to the last version.
 - Use the class contractor instead of the [Setup] for the BenchmarkDotNet tests.
 - Add an **AlmostRealWorldBenchmark** to simulate a more realistic scenario.
 - A new **PipelineBenchmark** to test when all events are ignored by Serilog.
 - Improve the **AllocationsBaseBenchmark** tests and add a new **AllocationsBaseBenchmark** that ignore all log events.
    - Includes call to many log methods overloads with combinations of many types/structs.
 - Run Performance Tests only for the latest framework version. And copy the results automatically.
 - Run all the unit tests for all compatible frameworks.

**Does this issue relate to a new *feature* or an existing *bug*?**
- [ ] Bug
- [x] New Feature

**What version of Serilog is affected?  Please list the related NuGet package.**
2.8.0 

**Please describe the current behavior?**
Currently reaching maximum depth sets all values on that layer to "Null"

**Please describe the expected behavior?**
Have an optional flag to serialize final depth as using ScalarValue types e.g.
`.Destructure.ToMaximumDepth(3, writeFinalDepthAsScalar: true)`
**Does this issue relate to a new *feature* or an existing *bug*?**
- [X] Bug
- [ ] New Feature

**What version of Serilog is affected?  Please list the related NuGet package.**
Serilog.AspNetCore 2.1.1

**What is the target framework and operating system? See [target frameworks](https://docs.microsoft.com/en-us/nuget/schema/target-frameworks) & [net standard matrix](https://docs.microsoft.com/en-us/dotnet/standard/net-standard).**

- [X] netCore 2.0
- [ ] netCore 1.0
- [ ] 4.7
- [ ] 4.6.x
- [ ] 4.5.x

**Please describe the current behavior?**
I set a Default MinimumLevel in my Serilog configuration of Debug, and override the MinumumLevel of one of my SourceContexts to "Verbose".
If I log directly to a Sink (File Sink, for example), it works as expected, with everything except the overridden source being filtered to Debug or higher, but Verbose events making it through for the overridden source.
If I instead put a sub-logger between the main logger and the file sink (to add a filter or something), the Verbose events from the overridden source don't make it through.

Here is a snippet from my appsettings.json configuration file:

```
  "Serilog": {
    "MinimumLevel": {
      "Default": "Debug",
      "Override": {
        "System": "Information",
        "Microsoft": "Information",
        "Namespace.BenchmarkTimer": "Verbose"
      }
    },
    "WriteTo": [
      {
        "Name": "Logger",
        "Args": {
          "configureLogger": {
            "Filter": [
              {
                "Name": "ByIncludingOnly",
                "Args": {
                  "expression": "StartsWith(SourceContext, 'Namespace.BenchmarkTimer')"
                }
              }
            ],
            "WriteTo": [
              {
                "Name": "File",
                "Args": {
                  "path": "d:\\path-to-log-folder\\Benchmark Timer.txt"
                }
              }
            ]
          }
        }
      }
    ]
  },
```

**Please describe the expected behavior?**
All of the events from the parent logger make it through to the sinks configured in the sub-logger.

**If the current behavior is a bug, please provide the steps to reproduce the issue and if possible a minimal demo of the problem**
Configure an application as described above. Write verbose logs from SourceContext "Namespace.BenchmarkTimer". The verbose events will not make it to the sub-logger's configured File Sink.

**Note**: I did try setting restrictedToMinimumLevel to "Verbose" on the sub-logger, which didn't make a difference.
[I'm unclear if this is the right repo for this or not; I'd be happy to move or refile if needed.]

Microsoft.Extensions.Configuration is a case-insensitive construct. For example, `configuration.GetSection("a:b:c")` will yield the same as `configuration.GetSection("A:B:C")`. This allows things like environment variables or command line parameters to participate in config but also be named in a contextually correct fashion (e.g., environment variable `A__B__C`).

In configuring the minimum level and overrides for log sources, I think I've discovered that the JSON configuration values are case-sensitive. For example, this...

```json
{
  "serilog": {
    "minimumLevel": {
      "default": "Information",
      "override": {
        "microsoft": "Warning",
        "system": "Warning"
      }
    }
  }
}
```

..._does not work_ - it still shows informational messages from Microsoft.* sources.

![Info still shows up though the configuration is set to Warn](https://user-images.githubusercontent.com/1156571/60120399-8b70d800-9735-11e9-93a3-6295544483a5.jpg)

However, this:

```json
{
  "serilog": {
    "minimumLevel": {
      "default": "Information",
      "override": {
        "Microsoft": "Warning",
        "System": "Warning"
      }
    }
  }
}
```

_does work_ - only warnings show up for the Microsoft.* sources.

![Only Warn is showing for Microsoft.* sources](https://user-images.githubusercontent.com/1156571/60120527-ddb1f900-9735-11e9-9cde-f2528eb6a880.jpg)

The only difference is the capitalization of the source names, which indicates the source names here are case-sensitive.

Granted, JSON itself _is case-sensitive_ but since this is running through the MS configuration stuff, it can't really be assumed to be case-sensitive, especially if someone configures it through the environment:

`SERILOG__MINIMUMLEVEL__OVERRIDE__MICROSOFT="Warning"`

Where does that comparison/filtering take place? Is that a core Serilog thing? I could throw a PR in for that if I know where to start tracking it down.