### Proposed changes
Added a new notebook (based on an old notebook) that allows a user to select an area from an interactive map, and generate a geomedian filmstrip plot that highlights change through time.

This uses dask to improve performance; this may work on the NCI but for now I've marked it as a Sandbox-only notebook.

For coastal applications, users can specify a specific portion of the tidal range to generate geomedians from (e.g. low tide, high tide).

![filmstrip_example](https://user-images.githubusercontent.com/17680388/72585738-474c5b80-3943-11ea-9ab2-a2bf4acf6085.JPG)

### Checklist (replace `[ ]` with `[x]` to check off)
- [x] Notebook created using the [DEA-notebooks template](https://github.com/GeoscienceAustralia/dea-notebooks/tree/develop)
- [x] Remove any unused Python packages from `Load packages`
- [x] Remove any unused/empty code cells
- [x] Remove any guidance cells (e.g. `General advice`)
- [x] Ensure that all code cells follow the [PEP8 standard](https://www.python.org/dev/peps/pep-0008/) for code. The `jupyterlab_code_formatter` tool can be used to format code cells to a consistent style: select each code cell, then click `Edit` and then one of the `Apply X Formatter` options (`YAPF` or `Black` are recommended).
- [x] Include relevant tags in the final notebook cell (refer to the [DEA Tags Index](https://docs.dea.ga.gov.au/genindex.html), and re-use tags if possible)
- [x] Clear all outputs, run notebook from start to finish, and save the notebook in the state where all cells have been sequentially evaluated
- [x] Test notebook on both the `NCI` and `DEA Sandbox` (flag if not working as part of PR and ask for help to solve if needed)
- [x] If applicable, update the `Notebook currently compatible with the NCI|DEA Sandbox environment only` line below the notebook title to reflect the environments the notebook is compatible with



Currently, the `map_shapefile` function (https://github.com/GeoscienceAustralia/dea-notebooks/blob/master/Scripts/dea_plotting.py#L330) plots each feature in a shapefile with an incrementing colour. 

It would be far more useful if this function plotted features based on values from a field in the shapefile attribute table.
The `Geomedian_composites.ipynb` notebook currently fails with the following error:

```
---------------------------------------------------------------------------
ImportError                               Traceback (most recent call last)
<ipython-input-1-27a4cd2c72de> in <module>
      2 
      3 import datacube
----> 4 from datacube_stats.statistics import GeoMedian
      5 import sys
      6 

ImportError: cannot import name 'GeoMedian'
```

This needs to be updated once either `hdmedians` or `hdstats`/`odc.algo` are added to the Sandbox
Adding speckle filtering greatly enhances the appearance of the shipping lane notebook outputs:

![image](https://user-images.githubusercontent.com/17680388/72040212-f5308800-32fb-11ea-9927-90ca51fe2a20.png)

The current example runs slowly however. If we can find a way to increase performance it would be a great addition to the notebook.

### Proposed changes
This is an example notebook to demonstrate how to use the `dea_classificationtools` for machine learning landcover classification. It attempts to be a simple example to get started, open to feedback regarding complexity etc.

### Checklist
- [X] Notebook created using the [DEA-notebooks template](https://github.com/GeoscienceAustralia/dea-notebooks/tree/develop)
- [X] Remove any unused Python packages from `Load packages`
- [X] Remove any unused/empty code cells
- [X] Remove any guidance cells (e.g. `General advice`)
- [X] Ensure that all code cells follow the [PEP8 standard](https://www.python.org/dev/peps/pep-0008/) for code. The `jupyterlab_code_formatter` tool can be used to format code cells to a consistent style: select each code cell, then click `Edit` and then one of the `Apply X Formatter` options (`YAPF` or `Black` are recommended).
- [X] Include relevant tags in the final notebook cell (refer to the [DEA Tags Index](https://docs.dea.ga.gov.au/genindex.html), and re-use tags if possible)
- [X] Clear all outputs, run notebook from start to finish, and save the notebook in the state where all cells have been sequentially evaluated
- [X] Test notebook on both the `NCI` and `DEA Sandbox` (flag if not working as part of PR and ask for help to solve if needed)
- [X] If applicable, update the `Notebook currently compatible with the NCI|DEA Sandbox environment only` line below the notebook title to reflect the environments the notebook is compatible with



- The `get_training_data_for_shp` function from `dea_classificationtools.py` currently extracts remote sensing data for a specified product for each shapefile feature that contains a class label. 
- Multiple products are helpful for effective land cover classification. 
- Current workflows run the function multiple times and concatenate the results into a single array. 
- It would be easier for users to pass a list of products e.g. `[ls8_nbart_geomedian_annual', 'ls8_nbart_tmad_annual']`.
Notebook for @erialC-P and @BexDunn.
Currently, `load_ard` uses `dask_chunks={'time': 1}` to force data to lazy load before scenes are filtered out based on the proportion of valid/non cloudy data in each timestep. To override this, users can set the function's `dask_chunks` parameter. However, if a custom `dask_chunks` is also passed in via a query, this has no effect on the analysis. 

Additionally, even if custom `dask_chunks` is passed in via a query, unless the `load_ard` kward "lazy_load' is set to True, data will still compute.

This combination of dask-related function kwargs and query kwargs is confusing (e.g. below) and needs to be streamlined.

![image](https://user-images.githubusercontent.com/17680388/68261108-2c33b480-0093-11ea-91f9-de508b50deb9.png)

Seems like it would be a good idea to write a notebook as part of the refresh to demonstrate the functions in the dea_classificationtools module, otherwise users may not be aware that the ML functionality exists.
_Note: checklist below only relevant if committing to the [`develop`](https://github.com/GeoscienceAustralia/dea-notebooks/tree/develop) branch:_

### Proposed changes
Add new script dea_classificationtools.py to interface between xarray (DataArray and Dataset) and sklearn models, including KMeans, PCA, decision trees, etc.

This script is written to be as *general* as possible. Functionality is exposed to the user to turn labelled DataArrays and Datasets into 'flat', unlabelled numpy arrays of pixels, and rebuild a DataArray with spatiotemporal structure from a flat numpy array. This means the user can utilise a scikit-learn model of their choice, and we don't need to write bespoke functions for each model.

This script also contains functions to rasterise polygons of training data to assist with the application of sklearn's supervised classification models to spatial datasets.

Finally, the script contains a few (maybe just one) handy extensions to sklearn's models, such as a hierarchical KMeans model of the type used for the prototype radar wetlands insight tool.

### Checklist (replace `[ ]` with `[x]` to check off)
- [ ] Notebook created using the [DEA-notebooks template](https://github.com/GeoscienceAustralia/dea-notebooks/tree/develop)
- [ ] Remove any unused Python packages from `Load packages`
- [ ] Remove any unused/empty code cells
- [ ] Remove any guidance cells (e.g. `General advice`)
- [ ] Ensure that all code cells follow the [PEP8 standard](https://www.python.org/dev/peps/pep-0008/) for code. The `jupyterlab_code_formatter` tool can be used to format code cells to a consistent style: select each code cell, then click `Edit` and then one of the `Apply X Formatter` options (`YAPF` or `Black` are recommended).
- [ ] Include relevant tags in the final notebook cell (refer to the [DEA Tags Index](https://docs.dea.ga.gov.au/genindex.html), and re-use tags if possible)
- [ ] Clear all outputs, run notebook from start to finish, and save the notebook in the state where all cells have been sequentially evaluated
- [ ] Test notebook on both the `NCI` and `DEA Sandbox` (flag if not working as part of PR and ask for help to solve if needed)
- [ ] If applicable, update the `Notebook currently compatible with the NCI|DEA Sandbox environment only` line below the notebook title to reflect the environments the notebook is compatible with


