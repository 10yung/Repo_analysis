The behavior that shows which pane is focused in DockPanelSuite does not match Visual Studio. The first difference is that only the active pane (focused) in visual studio is "highlighted" while DPS can have 1 pane and 1 document highlighted at the same time.

VS2019:
[![Image from Gyazo](https://i.gyazo.com/3aa3182140fb5f2e1379b935375fcc54.gif)](https://gyazo.com/3aa3182140fb5f2e1379b935375fcc54)

DPS:
[![Image from Gyazo](https://i.gyazo.com/5279866e04b9d2d6d82bf158844a90ec.gif)](https://gyazo.com/5279866e04b9d2d6d82bf158844a90ec)

The second difference is with floating panes, in visual studio the active document's tab strip will lose its highlight when you select a floating pane while with DPS the active document will remain highlighted:

VS2019:
[![Image from Gyazo](https://i.gyazo.com/1b9815ecbf22ecbaf3a7077ca66296e0.gif)](https://gyazo.com/1b9815ecbf22ecbaf3a7077ca66296e0)

DPS:
[![Image from Gyazo](https://i.gyazo.com/bd729e5a2cef5ed145b7264836a71069.gif)](https://gyazo.com/bd729e5a2cef5ed145b7264836a71069)

I also tested in visual studio 2017 and visual studio 2010 and they have same behavior. You might also wonder what about the panes that have buttons dependent on the active document, for example the "sync with active document" in solution explorer. They will work and in this case it will sync with the last document pane that was focused.

After analyzing the DPS code I came to the conclusion this cannot be fixed without changing DPS source code (I did find a solution but I it was a hack so I don't like it). The issue is that VS2013DockPaneStrip highlights the TabStrip of the pane depending on the IsActiveDocumentPane property but it should be based on IsActivePane instead. Note that SetIsActivated method on DockPane will need to be adjusted because RefreshChanges is not called if it's a document and it should.

I will probably make a pull request when I get a chance with the fix described above but wanted to hear your opinion
We used till now Version 2.9.0 and by upgrade to the new Version 3.0.6 the  saved tabs could not be loaded correctly.

``` 
// seems to insert <?xml version="1.0" encoding="utf-8"?> into the middle of the file.
panel.SaveAsXml(stream, Encoding.UTF8, true); 
```

https://github.com/dockpanelsuite/dockpanelsuite/commit/692635e2b5bfe61daaaf090547a43f0f3906f701
![image](https://user-images.githubusercontent.com/30182309/70142792-57adbd00-169a-11ea-85c6-c616b7fed181.png)

![image](https://user-images.githubusercontent.com/30182309/70142686-19b09900-169a-11ea-910a-dcfc6e611afb.png)
![image](https://user-images.githubusercontent.com/30182309/70142725-32b94a00-169a-11ea-9636-578cf39eb9c2.png)


Hi Guys,

Glad to see this project is still being actively maintained. Thanks every one!

Just want let you know that the successor of DPS, WPF Docking, is also open sourced under MIT license: https://github.com/DevZest/WpfDocking.

I'm sorry I wouldn't have much time on these two docking components. I'm focusing on [RDO.Net](https://github.com/DevZest/RDO.Net), a revolutionary framework to develop enterprise applications in .Net platform. Trust me, it's awesome! You're welcome to give it a try and your feedback will be highly appreciated.
I am wondering if this behavior is by design or I am missing something, but when I close the form having the DockPanel, none of the docked forms' FormClosed() event is fired.
As a workaround I need to close all docked Content programmatically, but I am not sure if this is the right approach.
Steps to reproduce:

1) open 5 documents in the main pane
2) drag the first two documents out so they are displayed in a float window
3) try to drag the first tab in the main pane to the last position in the tab order
--  the first tabs cannot be moved to the end. newIndex in DockContentHandler.DockTo is calculated wrong by not considering the invisible contents

4) try to drag the floating content back into the main pane's last position in the tabstrip.
-- related issue: the tabs are not inserted into their correct position


https://github.com/dockpanelsuite/dockpanelsuite/issues/586
Hello,

it is possible to hide the default Window Icon, when multiple views are docked to a panel?

Changing the ShowIcon property does not work:
`this.ShowIcon = false;`


Kind regards,
Ren√©

![grafik](https://user-images.githubusercontent.com/5740840/63689020-24d96a80-c809-11e9-84e9-ba3f77e368ee.png)

There seems to be an odd behavior happening when reducing the width of the docking window. I have a situation, where I have 3 docked windows. I switch to the third one and I reduce the width of the window. After a while, the second docked window, which was never seen before, starts to mix with the currently displayed third one:

![mix](https://user-images.githubusercontent.com/53510852/62195286-f6887c80-b37b-11e9-847a-936e312c651e.png)

This does not happen if I switch to the second panel first, so that is was already visible at some point before.

Any ideas?
It seems that whenever I use a WinForms docking container with more docked windows than fit in the panel, I cannot use the scroll buttons on the right to get to them all. It only alternates between two wrong behaviors and it also seems completely random which one of these two will happen.

I start at the following state:
![scroll1](https://user-images.githubusercontent.com/53510852/62194482-3babaf00-b37a-11e9-88ab-69aa7e7b515d.png)

There are still two panels hidden on the right and I want to get to them, but alas, it only hides more of them:
![scroll2](https://user-images.githubusercontent.com/53510852/62194507-49613480-b37a-11e9-9cce-fa5ae605779c.png)

Sometimes (no logic when) the right button works, but only for a while. There is still another hidden panel (even behind the partially visible one), but further clicks on the button do nothing at all:
![scroll3](https://user-images.githubusercontent.com/53510852/62194609-7dd4f080-b37a-11e9-9100-388328ca8f90.png)

Any ideas?
I have this baffling problem with respect to displaying an output window. In VS2013SplitterControl.cs when the window is rolled out and becomes a "docking" window the control rect width does not = splittersize:

switch (Dock)
                {
                    case DockStyle.Right:
                    case DockStyle.Left:
                        {
                            Debug.Assert(SplitterSize == rect.Width);
                            e.Graphics.FillRectangle(_horizontalBrush, rect);
                        }
                        break;
                    case DockStyle.Bottom:
                    case DockStyle.Top:
                        {
                            Debug.Assert(SplitterSize == rect.Height);
                            e.Graphics.FillRectangle(_horizontalBrush, rect);
                        }
                        break;
                }
I get assertions. But worst is that the container documents when resized seem to be unaware of the output window. Help! Any thoughts would be appreciated.
PS - Its a great project
