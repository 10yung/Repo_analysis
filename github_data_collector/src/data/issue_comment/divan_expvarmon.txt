I'm trying to run it on MacOs.
recieving this:


```
âžœ  / expvarmon -ports="8181"

zsh: command not found: expvarmon
```

thanks
For Issue #30 

Added new KindDurationString and updated Kind() and Format().
Gave KindDurationString the same color as KindDuration.
In Update, if we have a KindDurationString, try to parse it to an int64.
I have a number of stats that export as a duration string, such as:

"uptime": "32m48.4137762s"
or
"averagerequesttime": "67.6394ms"

These don't generate spark lines, nor are their max really valid.  How about an additional var type, durationstr, that parses the duration back into an int64 for comparison/sparkline, but still displays with the duration string representation for labeling?

I can't find a way to monitor a variable located in an object inside an array, see the following JSON:

    "Blah": {
        "DeviceStatus": [
            {
                "Descr": "Foo",
                "ConnectionStatus": false,
            },
            {
                "Descr": "Bar",
                "ConnectionStatus": false,
            }
        ]
    }

I tried with:

    expvarmon  -vars="Foo:Blah.DeviceStatus[0].ConnectionStatus"

but the UI gives me:

    Blah.DeviceStatus[0].ConnectionStatus: N/A

Adds support for accepting multiple vars flags. 

This is useful for other scripts to construct vars flags. I also found it to be easier on eyes when you look at it.
Moves the main.go into cmd/expvarmon. This way people can install different versions of executables and use expvarmon as a library. It also fixed undefined DefaultEndpoint when I tried to run the main. Also I would create another cmd/expvardummon (or any other names you like) to separate the dummy prints with the normal ones.

Please note that I passed the interval to constructors for the following reasons:

- It is a configuration value
- Once it is set, it is not supposed to be changed, hence unexported variable.

Hi,

Given the following snippet:

``` go
package main

import (
    "expvar"
    "net/http"
)

func main() {
    m := expvar.NewMap("test")
    m.Add("\x00", 1)
    http.ListenAndServe(":1234", nil)
}
```

Expvarmon stops showing results all together. You can add a sleep time before the add and observe it only happens when the string is added.

I can't seem to have it report the number of goroutines in my running process? I am using the vars="Goroutines". I do see memory stats

expvarmon -ports="4000" -vars="Goroutines,mem:memstats.HeapInuse"

The submission introduces new flag `theme`. There are to possible values: dark (default value, current helloworld theme) and default (theme based on terminal settings).

I'm curious if there is any way to use expvarmon inside my own program. 
I want to deploy one binary on the server and give admin view what's going on. 

e.g. 
When I'll run 
    ./my -expvarmon
it should run expvarmon tool with all variables set 
