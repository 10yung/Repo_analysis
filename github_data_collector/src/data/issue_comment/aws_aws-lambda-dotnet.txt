*Issue #, if available:*

*Description of changes:*
Adding my modular powershell in AWS Lambda post

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

*Issue #, if available:*
https://github.com/aws/aws-lambda-dotnet/issues/544

*Description of changes:*
.NET Core 3.0 added a new JSON serialization called System.Text.Json. This PR creates new Lambda serialization called Amazon.Lambda.Serialization.SystemTextJson that will be based on System.Text.Json. Unlike Newtonsoft's JSON parser System.Text.Json is built into the framework and is optimized for speed. 
 

This will released as part of the upcoming Lambda .NET Core 3.1 and will only target .NET Core 3.1. There will not be a .NET Standard 2.0 which would make it available to .NET Core 2.1 Lambda functions because the event packages like Amazon.Lambda.S3 would have to take a dependency on the System.Text.Json Nuget package.


In my anecdotal testing I have seen some good cold start performance improvements using this library. For those that are currently trying .NET Core 3.1 on Lambda using the custom runtime feature here are preview versions of the impacted NuGet packages to try out.

https://normj-packages.s3.us-west-2.amazonaws.com/System.Text.Json-2020-01-17.zip

By submitting this pull request, I confirm that my contribution is made under the terms of the Apache 2.0 license.

I'm just getting started with Powershell on Lambda.  I've been following the getting started guide here: https://aws.amazon.com/blogs/developer/announcing-lambda-support-for-powershell-core/

I've setup my environment and installed all the necessary modules.  I'm trying to publish an extremely basic Powershell script just to learn a bit more about how this works before I start writing real functions

My steps:
1. Create a new Lambda using the basic template
New-AWSPowershellLambda -ScriptName JeffTest -Template Basic
2. Add a couple simple lines to the script to see how things behave
get-s3bucket
$test = get-s3bucket
write-host $test
write-host "End of test Lambda"
3. Publish lambda
Publish-AWSPowershellLambda -ScriptPath .\JeffTest.ps1 -Name JeffTest -region us-west-2

The publish then fails with the error:
Error creating Lambda function: Unzipped size must be smaller than 262144000 bytes

If I run New-AWSPowershellLambdaPackage and examine the output I have a 37MB zip file that unzips into 275MB of files, so clearly the commandlet is generating a deployment package that is too large.

I have not added any additional modules to my test, only the default AWSPowerShell.NetCore module is being required.  I notice that this module alone on my workstation is 246MB uncompressed, so it seems like it is too large for this to ever work.

Am I doing something wrong here?  Is there a way to reduce the size of the lambda package? 

I'm currently using the latest version 4.0.2.0 of AWSPowerShell.NetCore. 
Hello,

I'm trying to build out a powershell lambda function, but I'm getting errors.

Because I use powershel 5.1 on my laptop I'm trying to use a Docker container for development. Here's my setup so far

docker run -v "$((pwd).path)/lambda:c:\\lambda" -v "$($HOME)/.aws:c:\\users\\containeradministrator\\.aws" -it mcr.microsoft.com/powershell:6.2.3-windowsservercore-1803

(this gets me into a running windows container). Then I run

Install-Module AWSLambdaPSCore;
Install-Module AWS.Tools.Installer;
Import-module AWS.Tools.Installer;
Install-AWSToolsModule -Name AWS.Tools.IdentityManagement;
Get-AWSPowerShellLambdaTemplate;
New-AWSPowerShellLambda -Template Basic;
.\\dotnet-install.ps1; # to get the dotnet exe on the cli

Which should get me the AWS powershell tools, AWS Powershell Lambda functions, and dotnet CLI. Next I run

New-AWSPowerShellLambda -Template Basic

And I get a new powershell directory with a basic script. Lastly I run

Publish-AWSPowerShellLambda -Name PsHelloWorld -ScriptPath .\\Basic\\Basic.ps1 -Region us-east-1 -ProfileName sandbox

But I see this error

Configuring PowerShell to version 6.1.1
Generating C# project C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\Basic\\PsHelloWorld.csproj used to create Lambda function bundle.
Generating C:\\Users\\ContainerAdministrator\\AppData\\Local\\Temp\\Basic\\Bootstrap.cs to load PowerShell script and required modules in Lambda environment.
Generating aws-lambda-tools-defaults.json config file with default values used when publishing project.
Copying PowerShell script to staging directory
Deploying to AWS Lambda
Restoring .NET Lambda deployment tool
Initiate deployment
A fatal error occurred. The required library hostfxr.dll could not be found.
If this is a self-contained application, that library should exist in [C:\\Users\\ContainerAdministrator\\.dotnet\\tools\\.store\\amazon.lambda.tools\\3.3.1\\amazon.lambda.tools\\3.3.1\\tools\\netcoreapp2.1\\any\\].
If this is a framework-dependent application, install the runtime in the global location [C:\\Program Files\\dotnet] or use the DOTNET_ROOT environment variable to specify the runtime location or register the runtime location in [HKLM\\SOFTWARE\\dotnet\\Setup\\InstalledVersions\\x64\\InstallLocation].

What am I doing wrong? How can I fix this?
I've tried to install AWSLambdaPSCore on two different docker containers from the microsoft managed powershell repo

https://github.com/PowerShell/PowerShell-Docker#examples


6.2.3-nanoserver-1803
latest (on 1.13.2020)

On latest (ubuntu based) I get

```
PackageManagement\Install-Package : The module 'AWSLambdaPSCore' cannot be installed or updated because the authenticode signature of the file 'AWSLambdaPSCore.psd1' is not valid.
At C:\program files\powershell\Modules\PowerShellGet\PSModule.psm1:9508 char:21
+ ...          $null = PackageManagement\Install-Package @PSBoundParameters
+                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+ CategoryInfo          : InvalidOperation: (Microsoft.PowerShel\u2026lets.InstallPackage:InstallPackage) [Install-Package], Exception
+ FullyQualifiedErrorId : InvalidAuthenticodeSignature,ValidateAndGet-AuthenticodeSignature,Microsoft.PowerShell.PackageManagement.Cmdlets.InstallPackage
```

On server nano I get

```
PS C:\> install-module AWSLambdaPSCore -SkipPublisherCheck -Verbose
VERBOSE: Using the provider 'PowerShellGet' for searching packages.
VERBOSE: The -Repository parameter was not specified.  PowerShellGet will use all of the registered repositories.
VERBOSE: Getting the provider object for the PackageManagement Provider 'NuGet'.
VERBOSE: The specified Location is 'https://www.powershellgallery.com/api/v2' and PackageManagementProvider is 'NuGet'.
VERBOSE: Searching repository 'https://www.powershellgallery.com/api/v2/FindPackagesById()?id='AWSLambdaPSCore'' for ''.
VERBOSE: Total package yield:'1' for the specified package 'AWSLambdaPSCore'.
VERBOSE: Skipping installed module AWSLambdaPSCore 1.2.0.0.
```

But when I try to run

```
Get-AWSPowerShellLambdaTemplate
```
the command isn't found.

Any suggestions on what I can do? I'm trying server core now.
When writing a custom Gateway API Authorizer, I consume the event:

```csharp
        public static Task<APIGatewayCustomAuthorizerResponse> FunctionHandler(APIGatewayCustomAuthorizerRequest input, ILambdaContext context)
        {
            ...
        }
```

When building the response, the response class has:

```csharp
var result = new APIGatewayCustomAuthorizerResponse
{
    Context = new APIGatewayCustomAuthorizerContextOutput
    {
        ["Banana"] = "Yellow"
    },
    ...
};
```

If you look at the implementation of `APIGatewayCustomAuthorizerContextOutput`

https://github.com/aws/aws-lambda-dotnet/blob/master/Libraries/src/Amazon.Lambda.APIGatewayEvents/APIGatewayCustomAuthorizerContextOutput.cs

You can see it implement Dictionary, and has no property called `Claims`.

When this is eventually passed down to an ASP.NET Core Api, and you need to extract the claims back out, you need to go into the Request Items.

```csharp
var proxyRequest = Request.HttpContext.Items["LambdaRequestObject"] as APIGatewayProxyRequest;
```

This contains:

```csharp
proxyRequest.RequestContext.Authorizer
```

The implementation of `Authorizer` is:

https://github.com/aws/aws-lambda-dotnet/blob/master/Libraries/src/Amazon.Lambda.APIGatewayEvents/APIGatewayCustomAuthorizerContext.cs

This /does/ contain a property called `Claims`

This is super confusinig and I just spent the last few hours trying to figure out why my claims were empty. 


Can't `Claims` pull the claims from `this.` being the dictionary itself rather than building an entirely new list?
Bootstrapping an APIGateway request handling lambda and its interoperability with the ASP.NET MVC pipeline is a breeze due to the [APIGatewayProxyFunction ](https://github.com/aws/aws-lambda-dotnet/blob/master/Libraries/src/Amazon.Lambda.AspNetCoreServer/APIGatewayProxyFunction.cs).

I found it a good pattern to follow with other integrations as well (e.g. SQS, APICustomAuthorizer etc.) since it

- gives the ability to use ASP.NET utilities (configuration, DI, logging) seamlessly
- enables local exploratory testing e.g. hit an API endpoint and pass integration requests

I got this working without much trouble again thanks to the `LambdaServer` and other extension points in `Amazon.Lambda.AspNetCoreServer`.  Do you think it would be useful to be added in this repo? I made a start at [https://github.com/IndikaUdagedara/dotnet-lambda-extensions](https://github.com/IndikaUdagedara/dotnet-lambda-extensions). I can create a PR if you think it's a good idea.

Is there any plan to support Lambda destinations?
.NET Core 3.1 (LTS) has been released - https://devblogs.microsoft.com/dotnet/announcing-net-core-3-1/

Any plans to support it any time soon? Thanks.
Hi Norm,

I was successfully using your https://github.com/normj/netcore-simple-websockets-chat-app example with .NET 2.1 and the default api URL.

Then I changed to using a Custom Name for the Websocket API (so I could use wss.mydomain.com).

However, now I get the error:

**Error posting message to D-j5-fe7IAMCKMA=: No method found matching route prod/@connections/D-j5-fe7IAMCKMA= for http method POST.**

The connection is correct in DynamoDB and I cannot see how to debug this. The stack trace is:

at Amazon.Runtime.Internal.HttpErrorResponseExceptionHandler.HandleException(IExecutionContext executionContext, HttpErrorResponseException exception)
   at Amazon.Runtime.Internal.ErrorHandler.ProcessException(IExecutionContext executionContext, Exception exception)
   at Amazon.Runtime.Internal.ErrorHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.EndpointDiscoveryHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.CredentialsRetriever.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.RetryHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.CallbackHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.ErrorCallbackHandler.InvokeAsync[T](IExecutionContext executionContext)
   at Amazon.Runtime.Internal.MetricsHandler.InvokeAsync[T](IExecutionContext executionContext)
   at BVWSServerSendMessage.Function.FunctionHandler(APIGatewayProxyRequest request, ILambdaContext context) in C:\Dev\SourceControl\Development\Brook-Valley-Thrift-Stores\BVTagging\BVWSServerSendMessage\Function.cs:line 135

line 135 is **await apiClient.PostToConnectionAsync(postConnectionRequest);**

I tried removing the lambda function and re-adding in the Console because of the note "In the AWS CLI and AWS SDKs, you can create routes before or after you create integrations. Currently the console does not support reuse of integrations, so you must create the route first and then create the integration for that route."

But no change. Any suggestions?
