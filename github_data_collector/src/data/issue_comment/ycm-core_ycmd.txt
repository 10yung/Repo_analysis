Apologies for +-3000 lines diff.  Nose has not been maintained for years now and it's currently broken. Nose2 is out of the question because it [doesn't support our test suite layout](https://nose2.readthedocs.io/en/latest/differences.html). That only leaves raw unittest and pytest as alternatives. Pytest was chosen, mostly because it was easier to get it to work.

Once again my suggestion is to review each commit separately.

- The first commit is just a simple switch from standalone `mock` to `unittest.mock`. We're testing on python 3.6 because python3.5 doesn't have all that we need in its `unittest.mock`. Namely [`assert_called()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called) is missing.
  - I didn't bump the requirement for python to 3.6 in general, because [it's not dead yet](https://devguide.python.org/#status-of-python-branches). I know @puremourning wishes to drop python 3.5 completely, so I'm open for discussion.
- The second commit is pretty boring and just replaces `nose.tools.eq_` and `nose.tools.ok_` with the equivalent hamcrest utilities.
- 3rd commit is the big one. It drops `nose` and introduces the dependency on `pytest`. The differences include:
  - There's no test yielding functionality. Instead [`@pytest.mark.parametrize`](https://docs.pytest.org/en/latest/parametrize.html#parametrize) is used.
  - `@patch`-introduced arguments are at the front, not the back, so we can't just catch them with `*args` when we don't care.
  - Decorators need to be attached to `foo_test()`, not to functions that used to be yielded.
  - Decorators aren't allowed to mess with arguments (like `@SharedYcmd`), so they needed to be rewritten as `pytest.mark.parametrize` calling a [`pytest.fixture`](https://docs.pytest.org/en/latest/fixture.html).
  - `WithRetry` and `ExpectedFailure` worked fine without any change.
- Finally, pytest complained about two deprecation warnings:
  - `threading.Thread.IsAlive()` is deprecated in 3.8 and removed in 3.9 in favour of `threading.Thread.is_alive()`.
  - Hamcrest deprecated `contains` and introduced `contains_exactly`.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1389)
<!-- Reviewable:end -->

- Gets rid of a few warnings, like:
  - `-Wdeprecated`
  - `-Wweak-vtables`
  - `-Wsign-conversion`
  - `-Wextra-semi`
- Removes unused code
- Avoids `operator==` on hash maps, since not all implementaitons have
  the operator defined. This brings us a little closer to using flat
  hash maps.
- Removes the deprecated (C++11) and removed (C++17)
  `std::binary_function`.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1388)
<!-- Reviewable:end -->

Pybind can handle being passed either `bytes` or `str`, so we don't need to convert before calling a C++ API from python.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1387)
<!-- Reviewable:end -->

Python 3.8 is finally nice enough to not get in the way of running valgrind with `PYMALLOC=malloc`. The question is what should we run through valgrind? Here are the options:

- `ycm_core_tests`, which embeds the python interpreter. Currently valgrind detects [a leak in pybind](https://github.com/pybind/pybind11/pull/2020)
- `ycm_benchmarks`, same comment as the above.
- nose tests? I haven't tried this, but valgrind will detect [another leak in pybind](https://github.com/pybind/pybind11/pull/2024)
- Some combination of the above?

Currently the CI is running only a single benchmark, from `ycm_benchmarks` binary.

CI is also complaining about a missing `libsqlite3-dev` package. We probably should fix it, even though the tests aren't broken.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1383)
<!-- Reviewable:end -->

Store all settings returned from the Settings function

Allow extra conf to supply project directory. This is useful at least
for java with complex workspaces containing multiple .project files

For the output in debug info, we _could_ change to show all settings,
but for now, let's keep it as it was before.

TODO:
* [ ] Tests for other language server backends

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1381)
<!-- Reviewable:end -->

The java completer was given the ability to modify the `'format'` configuration [1] as a result of an issue in YouCompleteMe [2].

I'd like to be able to use a similar solution using `def Settings( **kwargs ):` from the `ycm_extra_conf`. The typescript completer has some thoughts [3] on enabling the other features, including loading from `tsconfig.json`.

[1] https://github.com/ycm-core/ycmd/pull/1339
[2] https://github.com/ycm-core/YouCompleteMe/issues/3505
[3] https://github.com/ycm-core/ycmd/blob/master/ycmd/completers/typescript/typescript_completer.py#L862
Also moves RestartServer to the base class.

RFC because I'm sure it can be polished more. For example, the `_server_state_mutex` and `_server_info_mutex` still exist.

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1363)
<!-- Reviewable:end -->

At present after #1343, both `GoToDefinition` and `GoToDeclaration` does `jedi`'s `Script.goto_definitions()`, which jumps, for example, from
```python
@classmethod
def f(cls):
    pass
f|
```
to some `builtins.pyi`. And from
```python
@some_decorator
def f():
    pass
f|
```
to where `some_decorator` is defined.
I understand the second case is useful sometimes, though there are when one doesn't care the decorators (which I believe is even most cases), but I couldn't really think of some practical use case of the first one. 
Notice that `jedi` has a `follow_imports` parameter for `goto_assignments` which jumps to `f` in both cases so acts differently and is really useful.
So could we just switch `GoToDeclaration` back to `goto_assignments(follow_imports=True)`?
In particular, the `if add_extra_clang_flags:` branch in `PrepareFlagsForClang` function in file ycmd/ycmd/completers/cpp/flags.py. Otherwise, the result when complete headers is super noisy when somebody uses g++ rather than clang on macOS
Introduce a 'smart_case' option to control query matching behavior.

When disabled, use normal case-sensitive matching, otherwise retain the
existing "smart case" functionality.

Set the default to true to maintain compatibility.

Global option 'g:smart_case' controls this behavior from vim, defaulting to '1'.

### Motivation:

The default smart case behavior may not always be wanted. I've included an example based on some C code that uses a naming convention like so (for subsystem 'foo'):
1) Register contents are #defined like so `#define FOO_CONSTANT`
2) Function names are lowercased `void foo_do_something()`

The default smart case matching can be too noisy, with limited utility:
<img width="903" alt="smart_case_enabled" src="https://user-images.githubusercontent.com/224968/64728217-5e5bd800-d48f-11e9-9eed-8185b9ef2976.png">

With smart_case = 0, lowercase completion:
<img width="898" alt="smart_case_disabled_lower" src="https://user-images.githubusercontent.com/224968/64728289-84817800-d48f-11e9-831f-b9e05b64dda7.png">

With smart_case = 0, uppercase completion:
<img width="902" alt="smart_case_disabled_upper" src="https://user-images.githubusercontent.com/224968/64728322-94995780-d48f-11e9-87ca-9ed2ae3ef496.png">

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/ycm-core/ycmd/1310)
<!-- Reviewable:end -->
