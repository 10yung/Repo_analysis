All other dotnet commands take the folder or file of the project/solution as the first position argument. dotnet format requires a `-w` flag to specify the project to act on.

Consider conforming interface to the rest of the dotnet tools.

Other dotnet tool interface examples:
`dotnet build ./Source`
`dotnet build ./Source/MyProject.csproj`
`dotnet run ./Source`
`dotnet publish ./Source`
`dotnet test ./Test`

Dotnet format expected interface:
`dotnet format ./Source`

Dotnet format actual interface:
`dotnet format -w ./Source`


Version 3.1.37601 of the tool no longer has the `-f`/`--folder` option but it still states that it does in readme.
Having this available as a library would be great for homegrown tools. 

We do some code generation with razor and currently format the resulting string with:


```csharp
			var contents = Razor.CompileRenderStringAsync(name, template, model).GetAwaiter().GetResult();
			var tree = CSharpSyntaxTree.ParseText(contents);
			var root = tree.GetRoot().NormalizeWhitespace(indentation:"\t", "\n");
			return root.ToFullString();
```

It would be great if we can instead use something like this


```csharp
var formatted = new CsharpFormatter("path_to_editorconfig_file").FormatString("csharp_string");
```

The formatter is not working for web application project. I am seeing the following output. The version that I am using is "4.0.40103+07078c3be865ad9e1ed2e02054e920dd0fd94628"
`C:\code>dotnet-format --files "presentation\web\proj\about.aspx.cs" -w presentation\web\proj\webapplication.csproj -v diag -fs
  Formatting code files in workspace 'C:\code\prism\presentation\web\proj\webapplication.csproj'.
  Loading workspace.
  Complete in 1498ms.
  Determining formattable files.
  Complete in 14ms.
  Running formatters.
  Analyzing code style.
  Analysis complete in 592ms.
  Complete in 677ms.
  Formatted 0 of 0 files.
  Format complete in 2194ms.`
Recently added format tool (v 3.1.37601) had been working in our solution workflow on a testing basis without issue for over a week, until this error showed up half-way through a build run:

```
Unhandled exception: System.AggregateException: One or more errors occurred. (Specified argument was out of the range of valid values.
Parameter name: start) ---> System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: start
   at Microsoft.CodeAnalysis.Text.TextSpan..ctor(Int32 start, Int32 length)
   at Microsoft.CodeAnalysis.Text.ChangedText.Merge(ImmutableArray`1 oldChanges, ImmutableArray`1 newChanges)
   at Microsoft.CodeAnalysis.Text.ChangedText.Merge(IReadOnlyList`1 changeSets)
   at Microsoft.CodeAnalysis.Text.ChangedText.GetChangeRanges(SourceText oldText)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(ValueSource`1 oldTreeSource, ValueSource`1 newTextSource, CancellationToken cancellationToken)
   --- End of inner exception stack trace ---
   at Microsoft.CodeAnalysis.DocumentState.GetSyntaxTreeAsync(CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Document.GetTextChangesAsync(Document oldDocument, CancellationToken cancellationToken)
   at Roslyn.Utilities.TaskExtensions.WaitAndGetResult_CanCallOnBackground[T](Task`1 task, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.Workspace.ApplyChangedDocument(ProjectChanges projectChanges, DocumentId documentId)
   at Microsoft.CodeAnalysis.Workspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.ApplyProjectChanges(ProjectChanges projectChanges)
   at Microsoft.CodeAnalysis.Workspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.MSBuild.MSBuildWorkspace.TryApplyChanges(Solution newSolution, IProgressTracker progressTracker)
   at Microsoft.CodeAnalysis.Tools.CodeFormatter.FormatWorkspaceAsync(FormatOptions options, ILogger logger, CancellationToken cancellationToken) in /_/src/CodeFormatter.cs:line 88
   at Microsoft.CodeAnalysis.Tools.Program.Run(String workspace, String verbosity, Boolean dryRun, Boolean check, String files, IConsole console) in /_/src/Program.cs:line 99
   at System.CommandLine.Invocation.CommandHandler.GetResultCodeAsync(Object value, InvocationContext context)
   at System.CommandLine.Invocation.InvocationPipeline.<>c__DisplayClass3_0.<<InvokeAsync>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseParseErrorReporting>b__16_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Builder.CommandLineBuilderExtensions.<>c__DisplayClass3_0.<<UseVersionOption>b__0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseSuggestDirective>b__7_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseDebugDirective>b__4_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseHelp>b__14_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseParseDirective>b__6_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<RegisterWithDotnetSuggest>b__17_0>d.MoveNext()
--- End of stack trace from previous location where exception was thrown ---
   at System.CommandLine.Invocation.InvocationExtensions.<>c.<<UseExceptionHandler>b__5_0>d.MoveNext()
---> (Inner Exception #0) System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.
Parameter name: start
   at Microsoft.CodeAnalysis.Text.TextSpan..ctor(Int32 start, Int32 length)
   at Microsoft.CodeAnalysis.Text.ChangedText.Merge(ImmutableArray`1 oldChanges, ImmutableArray`1 newChanges)
   at Microsoft.CodeAnalysis.Text.ChangedText.Merge(IReadOnlyList`1 changeSets)
   at Microsoft.CodeAnalysis.Text.ChangedText.GetChangeRanges(SourceText oldText)
   at Microsoft.CodeAnalysis.CSharp.CSharpSyntaxTree.WithChangedText(SourceText newText)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParse(TextAndVersion newTextAndVersion, TreeAndVersion oldTreeAndVersion, CancellationToken cancellationToken)
   at Microsoft.CodeAnalysis.DocumentState.IncrementallyParseTreeAsync(ValueSource`1 oldTreeSource, ValueSource`1 newTextSource, CancellationToken cancellationToken)<---
```

and ends with:
Failed exitCode=1, command=dotnet format -w {sln-name} -v diag

Several attempts resulted in the same result, including with the `--check` flag.

First guess is that this is an error within dotnet-format, as none of the files currently being processed have a method with a parameter named 'start'.

Dropping the version back to v3.0.4 resolved the issue for us but wanted to make sure this issue got logged.
Configuration for diagnostic severity can now be expressed in .editorconfig files. dotnet format should be able to run diagnostics and apply fixes for those of a specified severity.

As a first step dotnet format could support the known set of CodeStyle diagnostics and fixes in Roslyn.
As a further enhancement it could run Analyzers installed via NuGet.
Using `--files` to format a single file doesn't work 
```
dotnet format --files Ice\Collections.cs
  Could not find a MSBuild project file or solution file in 'D:\3.7\ice-master\csharp\src'. Specify which to use with the --workspace option.

dotnet-format --version
3.1.37601+256f37159dc60b29f76999749f57f4338324f102
```

If any active code fix contains a CS* (C#) or BC* (Visual Basic) diagnostic ID in the set of supported diagnostics, we need to make sure these compiler diagnostics are gathered.

Filed as a follow-up to #281

This is an automatically generated pull request from master into feature/analyzers.

``` bash
git fetch --all
git checkout merges/master-to-feature/analyzers
git reset --hard upstream/feature/analyzers
git merge upstream/master
# Fix merge conflicts
git commit
git push upstream merges/master-to-feature/analyzers --force
```

Once all conflicts are resolved and all the tests pass, you are free to merge the pull request.
I'm working on a tool that takes the output from a dry run and reports on it. Right now I'm having to parse this with a regex to get the file path, line number, and message. Is there a way to output this as json, or to write my own output formatter and use it as a plugin?