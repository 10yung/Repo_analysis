It's inconvenient to check it with strcmp instead of switch err.(type)

*jwt.ValidationError is the same for "invalid signature" as for any other like from custom Valid() method. It would be great if we could set it manually. Thanks.
Is there any particular reason to have following logic duplicated?

`func verifyAud(aud string, cmp string, required bool) bool`
https://github.com/dgrijalva/jwt-go/blob/master/claims.go#L93

`func verifyIss(iss string, cmp string, required bool) bool`
https://github.com/dgrijalva/jwt-go/blob/master/claims.go#L118

If it is done just to be consistent and have helper function for each claim, I would understand. But still feels repetitive. I think there can be a single function that does:
```
// verifyStr is helper function to verify value of claims of string type
func verifyStr(str string, cmp string, required bool) bool {
	if str == "" {
		return !required
	}
	if subtle.ConstantTimeCompare([]byte(str), []byte(cmp)) != 0 {
		return true
	}
	return false
}
```

Add native support for key rotation for ES*, HS*, RS*, and PS*
verifications.

In those SigningMethod's Verify implementations, also allow the key to
be the type of the slice of the supported key type, so that the caller
can implement the KeyFunc to return all the accepted keys together to
support key rotation.

While key rotation verification can be done on the callers' side without
this change, this change provides better performance because:

- When trying the next key, the steps before actually using the key do
  not need to be performed again.

- If a verification process failed for non-key reasons (for example,
  because it's already expired), it saves the effort to try the next
  key.
It is 2019 December and this issue is still existing.

import (
	"errors"
	"os"
	"time"

	"github.com/dgrijalva/jwt-go"
	"github.com/jinzhu/gorm"
)

`// CreateRefreshAndAccessToken creates a user access token and a jwt token
func (u *User) GenerateTokens(user *models.User) (map[string]string, error) {
	var err error
	apiKey := os.Getenv("API_SECRET")

	// Set claims
	// This is the information which frontend can use
	// The backend can also decode the token and get admin etc.
	claims := jwt.MapClaims{}
	claims["authorized"] = true
	claims["user_id"] = user.ID
	claims["isAdmin"] = user.IsAdmin
	claims["isClient"] = user.IsClient
	claims["isCustomer"] = user.IsCustomer
	claims["email"] = user.Email
	claims["exp"] = time.Now().Add(time.Hour * 1).Unix() //Token expires after 1 hour
	token := jwt.NewWithClaims(jwt.SigningMethodES256, claims)

	// create access_token
	accessToken, err := token.SignedString([]byte(apiKey))

	if err != nil {
		return nil, err
	}

	rfClaims := jwt.MapClaims{}
	rfClaims["sub"] = 1
	rfClaims["exp"] = time.Now().Add(time.Hour * 24).Unix()
	// generate refresh token
	rfToken := jwt.NewWithClaims(jwt.SigningMethodES256, rfClaims)

	refreshToken, err := rfToken.SignedString([]byte(apiKey))
	if err != nil {
		return nil, err
	}

	return map[string]string{"access_token": accessToken, "refresh_token": refreshToken}, nil
}`

I am still getting this and it is not descriptive enough.

I have tried this issue but the is no working solution. [link](https://github.com/dgrijalva/jwt-go/issues/65)
go get github.com/dgrijalva/jwt-go
go: downloading github.com/dgrijalva/jwt-go v3.2.0+incompatible
verifying github.com/dgrijalva/jwt-go@v3.2.0+incompatible: github.com/dgrijalva/jwt-go@v3.2.0+incompatible: reading https://goproxy.io/sumdb/sum.golang.org/lookup/github.com/dgrijalva/jwt-go@v3.2.0+incompatible: 410 Gone
ed25519 sign and verify support

Signed-off-by: BluBb-mADe <886641+BluBb-mADe@users.noreply.github.com>
Signed-off-by: Vasiliy Tolstov <v.tolstov@unistack.org>
Given the example `CustomClaimsType` for https://godoc.org/github.com/dgrijalva/jwt-go#ParseWithClaims, shouldn't the signature of `ParseWithClaims` specify a pointer to `Claims`?

like;
```go
func ParseWithClaims(tokenString string, claims *Claims, keyFunc Keyfunc) (*Token, error)
```

when I was attempting to use the method locally, I was receiving an error;

`json: cannot unmarshal object into Go value of type jwt.Claims` because I was passing a non-pointer reference for `claims`.
On OSX, I am generating my key file using:

```
ssh-keygen -t ecdsa -b 256 -m PEM
```

Then if I test it like this:

```
$ echo {\"foo\":\"bar\"} | jwt -key test_ecdsa -alg ES256 -sign - | jwt -key test_ecdsa.pub -verify -
Error: Couldn't parse token: key is of invalid type
```

Looking at the code, I believe this is because `jwt-go` is relying on `pem.Decode`, which is [expecting header lines](https://golang.org/src/encoding/pem/pem.go?s=2505:2553#L21), and `ssh-keygen -m PEM` only includes those for the private key. However (a) I haven't had trouble manually adding these lines, and (b) I want something easy to tell my own users about how to generate these keys.

Do you have an example of how to property create the key pairs, for EC256?
I am trying to parse a RS256 encoded token (tokenString) from java, it could be successfully decoded by public key in java using the following java code

`Jwts.parser().setSigningKey(publicKey).parseClaimsJws(jwt);`

However, It could be verified by jwt.SigningMethodRS256.Verify() just as described in https://stackoverflow.com/questions/51834234/i-have-a-public-key-and-a-jwt-how-do-i-check-if-its-valid-in-go

But not able to be jwt.Parse, I tried to write more debug print messages inside the parse function,  and verified not even run into it.


```
    tokenString := "eyJhbGciOiJSUzI1NiIsInppcCI6IkRFRiJ9.eNqqVkqtKFCyMjQ1s7Q0sbA0MtFRyk3NTUot8kxRslIKLbZQggn4JeamAoUcfRz99HxcXRWeze172tr4bFq7Ui0AAAD__w.jBXD4LT4aq4oXTgDoPkiV6n4QdSZPZI1Z4J8MWQC42aHK0oXwcovEU06dVbtB81TF-2byuu0-qi8J0GUttODT67k6gCl6DV_iuCOV7gczwTcvKslotUvXzoJ2wa0QuujnjxLEE50r0p6k0tsv_9OIFSUZzDksJFYNPlJH2eFG55DROx4TsOz98az37SujZi9GGbTc9SLgzFHPrHMrovRZ5qLC_w4JrdtsLzBBI11OQJgRYwV8fQf4O8IsMkHtetjkN7dKgUkJtRarNWOk76rpTPppLypiLU4_J0-wrElLMh1TzUVZW6Fz2cDHDDBACJgMmKQ2pOFEDK_vYZN74dLCF5GiTZV6DbXhNxO7lqT7JUN4a3p2z96G7WNRjblf2qZeuYdQvkIsiK-rCbSIE836XeY5gaBgkOzuEvzl_tMrpRmb5Oox1ibOfVT2KBh9Lvqsb1XbQjCio2CLE2ViCLqoe0AaRqlUyrk3n8BIG-r0IW4dcw96CEryEMIjsjVp9mtPXamJzf391kt8Rf3iRBqwv3zP7Plg1ResXbmsFUgOflAUPcYmfLug4W3W52ntcUlTHAKXrNfaJL9QQiYAaDukG-ZHDytsOWTuuXw7lVxjt-XYi1VbRAIjh1aIYSELEmEpE4Ny74htQtywYXMQNfJpB0nNn8IiWakgcYYMJ0TmKM"

    token, err := jwt.Parse(tokenString, func(token *jwt.Token) (interface{}, error) {
        fmt.Println("token parse start...")
    ...
    }
    // ... error handling
    if err != nil {
        log.Fatal(err)
    }

```


It got error message as following

```
2019/10/08 17:29:38 invalid character 'x' looking for beginning of value
exit status 1
```

I am curious if I can verify token signature, how come not able to parse its header and claims body.  Or I missed anything before doing jwt.Parse()

Any comment is highly appreciated....

The `VerifyExpiresAt` function for Claims has incorrect or unclear documentation. It states that it will compare the `exp` claim to `cmp`, which is indicative of a `==` comparison, when in reality it does a `cmp <= exp` comparison.