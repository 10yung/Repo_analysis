### Expected behavior

FormattedNumber should be using the correct region when using currency style

### Current behavior

FormattedNumber is using the default region when using currency style

### codesandbox.io link to reproduce for BUG REPORT

https://codesandbox.io/s/late-grass-wbbfg

Thank you! 
<!-- Thank you so much for filing this issue! Please provide the detail about your problem! -->
When I am running unit tests with latest react-intl version , The shallowWithIntl is throwing error `TypeError: n.getChildContext is not a function`. 
But they are working fine with react-intl version 2.9.0
<!--
  - Before file an issue, please verify it is a bug for react-intl not **intl.js polyfill** and **Unicode CLDR**.
  - Fill in as much of the template below as you can. If you leave out information, we can't help you as well.
-->

### Expected behavior

<!-- Please describe the behavior you expected. -->
The shallowWithIntl should not throw any error with latest react-intl version.

### Current behavior

<!-- Please describe what happens instead of your expected behavior. -->
When I am running unit tests with latest react-intl version , The shallowWithIntl is throwing error `TypeError: n.getChildContext is not a function`. 
### codesandbox.io link to reproduce for BUG REPORT

<!-- Please describe steps to reproduce this bug as minimally and precisely as possible & include a codesandbox.io link to repro this issue

-->

### Your Environment

<!-- Please describe your environment information. -->
<!-- Please describe your OS and browser information if your problem occurs on a specific OS or browser. -->
OS: MAC

|          Executable | Version |
| ------------------: | :------ |
| `npm ls react-intl` | 3.11.0 |
|      `npm ls react` | 16.12.0 |
|     `npm --version` | 5.6.0 |
|    `node --version` | v8.9.4 |

| OS   | Version |
| macOS Sierra | 10.12.3 |
| NAME | VERSION |

<!-- For example:
| macOS Sierra | 10.12.3 |
| Windows 10 | 1607 |
| Ubuntu | 16.10 |
-->

| Browser | Version |
| ------- | ------- |
| NAME    | VERSION |

<!-- For example:
| Chrome | 61.0.3163.71 |
| Safari | 10.1.2 |
| Firefox | 52.0 |
-->

Hi, I'm maintaining a 4 years old React project that uses `react-intl` and `react-intl-translations-manager` to extract messages to be used on the IntlProvider.

The problem is that `react-intl-translations-manager` is pretty unmantained, and I'm searching for a better solution.

I then found the new `@formatjs/cli`, tried it and it seems pretty fast to be honest..

But I don't know the common workflow of that (maybe an official example could help?), the cli is lacking of the following features (that translations-manager has):

- output the translations on multiple files (one per locale)
- the output is not really ready to be consumed by the IntlProvider (that needs a `Record<string, string>` to work)
- there is no diffing mechanism in order to avoid accidental overwriting of the already filled translations messages

Can someone explain me how should I structure the messages extraction mechanism? Thanks in advance!
Chromium 81 available `Intl.DisplayNames`

see https://chromestatus.com/feature/4965112605573120
see https://github.com/tc39/proposal-intl-displaynames
see https://tc39.es/proposal-intl-displaynames

sample code:
```
<FormattedDisplayName type="region" value="US" /> // -> "United States"

intl.formatDisplayName("US", { type: "region" }) // -> "United States"
```

Bumps [serialize-to-js](https://github.com/commenthol/serialize-to-js) from 3.0.0 to 3.0.2.
<details>
<summary>Commits</summary>

- [`f4b1284`](https://github.com/commenthol/serialize-to-js/commit/f4b12846bb2851ac6a84a03f0502d3114d2099ef) 3.0.2
- [`eac045c`](https://github.com/commenthol/serialize-to-js/commit/eac045c9409d814acbe223717b279c71a38ad679) fix: now a bit saver
- [`d8b8050`](https://github.com/commenthol/serialize-to-js/commit/d8b80509399dffa4856e56f06bbc29816dd8867d) chore: better var naming
- [`8d16443`](https://github.com/commenthol/serialize-to-js/commit/8d164439edd043fbebeb7a7e486a404606236068) chore: fix tests for node<12
- [`89c82a8`](https://github.com/commenthol/serialize-to-js/commit/89c82a8d993c122834597f620c50c11a3798500d) 3.0.1
- [`d0234d3`](https://github.com/commenthol/serialize-to-js/commit/d0234d3a3cea6edaeb2c22df0d359164967234a2) Merge pull request [#14](https://github-redirect.dependabot.com/commenthol/serialize-to-js/issues/14) from commenthol/fix-regex-xss
- [`181d7d5`](https://github.com/commenthol/serialize-to-js/commit/181d7d583ae5293cd47cc99b14ad13352875f3e3) fix: for ghsa-3fjq-93xj-3f3f
- See full diff in [compare view](https://github.com/commenthol/serialize-to-js/compare/v3.0.0...v3.0.2)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=serialize-to-js&package-manager=npm_and_yarn&previous-version=3.0.0&new-version=3.0.2)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/formatjs/react-intl/network/alerts).

</details>
<!-- Thank you so much for filing this issue! Please provide the detail about your problem! -->

<!--
  - Before file an issue, please verify it is a bug for react-intl not **intl.js polyfill** and **Unicode CLDR**.
  - Fill in as much of the template below as you can. If you leave out information, we can't help you as well.
-->

### Expected behavior

I expect to import an **ES Module** and bundle it with Webpack/Rollup/Parcel without the need to transpile `react-intl` itself by Babel.

I'm talking about the provided `module` field as definied by the spec below:
https://github.com/formatjs/react-intl/blob/c736c2e6c6096b1d5ad1fb6be85fa374891d0a6c/package.json#L34

> `pkg.module` will point to a module that has ES2015 module syntax but **otherwise only syntax features that the target environments support**.
https://github.com/rollup/rollup/wiki/pkg.module

> Wait, it just means import and export â€“ not other future JavaScript features?
> **Yes. ...**
https://github.com/rollup/rollup/wiki/pkg.module#wait-it-just-means-import-and-export--not-other-future-javascript-features

Babel allows you to disable just module syntax transpilation:
https://babeljs.io/docs/en/babel-preset-env#modules

And Rollup, Webpack etc can be configured to target a specific module syntax.

- [Rollup `output.format`](http://rollupjs.org/guide/en/#outputformat)
- [Webpack `output.libraryTarget`](https://webpack.js.org/configuration/output/#outputlibrarytarget)

**Todo:**

- [ ] fix build for `pkg.module` to support ES features of target environment (including IE11)

<!-- Please describe the behavior you expected. -->

### Current behavior

If I `import` **ES Module** of `react-intl` v3 I have to whitelist it to be transpiled by Babel for any bundler/loader.

The docs state that custom transpilation is needed:
> This means you should configure your build toolchain to transpile those libraries.
https://github.com/formatjs/react-intl/blob/master/docs/Upgrade-Guide.md#esm-build

<!-- Please describe what happens instead of your expected behavior. -->

### Step to reproduce for BUG REPORT

<!-- Please describe steps to reproduce this bug as minimally and precisely as possible.

For example:
- minimum live example (e.g. repl.it, jsbin.com )
- minimum example code
- set of steps to reproduce
-->

Install webpack v4, install `react-intl` v3 open it in a browser which can't parse ESnext.

### Your Environment

<!-- Please describe your environment information. -->
<!-- Please describe your OS and browser information if your problem occurs on a specific OS or browser. -->

|          Executable | Version |
| ------------------: | :------ |
| `npm ls react-intl` | V3 latest |
|      `npm ls react` | 16.9 |
|     `npm --version` | VERSION  |
|    `node --version` | 10 |

| OS   | Version |
| ---- | ------- |
| Windows 10 | VERSION |

<!-- For example:
| macOS Sierra | 10.12.3 |
| Windows 10 | 1607 |
| Ubuntu | 16.10 |
-->

| Browser | Version |
| ------- | ------- |
| IE    | 11 |

<!-- For example:
| Chrome | 61.0.3163.71 |
| Safari | 10.1.2 |
| Firefox | 52.0 |
-->

**Is your feature request related to a problem? Please describe.**
Reduce duplicate code

**Describe the solution you'd like**
Includes many `date + time` pattern in our designs

**Describe alternatives you've considered**
Packed instead of HOC

**Additional context**
N/A

As we've shipped v3.0, we're looking to plan for what's coming. The list below is purely for brainstorming & will be updated when new feature requests come in.

# ~New CLI~

~The current `babel-plugin-react-intl` requires a build setup while extracting/translating i18n is becoming more standalone. We've also received a few requests for it.
https://github.com/formatjs/formatjs/issues/68~
We have released https://www.npmjs.com/package/@formatjs/cli

# ~ICU Date Time Skeleton support~

~ICU Skeleton is quite comprehensive: http://userguide.icu-project.org/formatparse/datetime#TOC-DateTimePatternGenerator. It's very likely we'll be releasing a separate package and introduce plugins to `intl-messageformat` as this needs additional CLDR. We can also try to propose new APIs to ECMA-402.
https://github.com/formatjs/formatjs/issues/94~
Now available in `react-intl@3.7.0`

# ~ICU Number Skeleton support~

~Similar to Date Time Skeleton support: http://site.icu-project.org/design/formatting/numbers/skeleton

https://github.com/formatjs/formatjs/issues/93~
Now available in `react-intl@3.8.0`

# ~`ListFormat` & `<FormattedList>`~

~This is stage-3 and quite ready.
https://github.com/formatjs/react-intl/issues/1328~
Now available in `react-intl@3.5.0`.

# Separate out formatters

Right now in order to use a single formatter you need to polyfill `Intl.PluralRules`, `Intl.RelativeTimeFormat` and its data. `intl-messageformat` especially will grow bigger as we try to match ICU. This might become unsustainable.

cc @pyrocat101
### FEATURE REQUEST

Right now react-intl adds a bunch of unneeded components for each usage, b.c `withIntl` adds a wrapper as well as a context.Consumer to the component stack. The v3 prerelease is a good moment to bump the minimum react version up to 16.8 and the library can make use of it's own `useIntl` hook to flatten app component trees.

I think this is generally worth doing given how many react-intl components tend to get rendered in an app compared to others (lots of messages). This isn't automatically a performance concern for apps but it could be, and is avoidable now. 

we've already mostyl done this work in our fork: https://github.com/4Catalyzer/react-intl/blob/master/src/components/message.js and i'd be happy to upstream it if ya'll are open to it.

this would purely be an internal optimization, no public api changes or lose of features