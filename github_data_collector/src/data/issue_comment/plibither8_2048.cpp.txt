Rather than having to `ctrl+c` to end the current game in progress, there could be an option to forfeit/quit the current game and return to menu.

I've noticed that there is already an `CODE_HOTKEY_QUIT_ENDLESS_MODE` that is somewhat similar to the proposed idea, but as far as I could tell, the endless mode is not yet implemented (is that right?).
1. allow 2048 to build in native Windows with MinGW / MSYS2  `g++`, Intel `icl` and Visual Studio
2. cleanup CI to use Ubuntu 18.04, CMake on Travis and Meson on AppVeyor
3. add cross-platform simple test (that main executable runs and exits)

The escape codes used to print the playfield may be leading to garbled screen on native Windows. This can be fixed at least by making a separate playfield display function for Windows that is just black and white characters. The title screen does show clearly with color on native Windows.

:world_map: Many people around the world enjoy 2048.cpp :dove: 
However, English may not be the native language of many players.

The game should have some basic multilingual support so other players around the world:
* can enjoy the game in their native language.
* contribute translations of English text to their native language.
Currently, users have to follow 6 steps to install and run 2048. Though these are small and can be done quickly, it would be much more convenient if we have a bash script that does this for us.

The bash script will do the following:
1. Clone the repository in the `home` folder.
2. `mkdir build`, `cd build` to create the build directory.
3. `cmake ..` and `make` to create the final, executable program.

These are the 3 main steps that the script will follow. After this, we should add the `2048` program to the `PATH` so that users can access the game from *anywhere* in their terminal.

Either adding to the `PATH` permanently or adding an alias to the game in their `.bashrc` or `.zshrc` files.

With the bash script we can also now handle OS specific actions, as adding to the `PATH` will be quite different in all the three major OSs. 
The table will now draw to the longest length number with a small border of spaces

Resolves #54
![image](https://user-images.githubusercontent.com/21311885/47198688-c2be0680-d3a8-11e8-8c5c-a1ee36caf320.png)
Not really a priority, but this is going to happen as number grows beyond 8192 :cry:, since current implementation uses `std::setw(4)` when prining each tile.
Added Themes class to handle theming and applied to game (#51)
First of all, :+1: for awesome project!

One cool aspect of 2048 is *derivatives*, such as merging elements to get element with higher atomic number. Let's add support for such themes!
We should be storing the game data in some centralised folder like` /usr/lib/2048/ ` . 
![test](https://user-images.githubusercontent.com/42879271/45829146-e71fb800-bd02-11e8-9876-adddc6f87f88.png)

The highscore page goes into the endless cycle and prints new lines.

upd:
Name length issue. Can be reproduced by entering name with size >18. 