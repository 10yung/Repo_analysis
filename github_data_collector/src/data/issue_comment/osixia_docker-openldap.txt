OpenLDAP does not require root priviledges for anything else then opening port below 1024

From a security standpoint it would be better to just run as an unpriviledged user e.g 1000
and use higher ports
Hi Team,

From my Java Program i am in need to find the LDAP Server version.

i am able to get supportedLDAPVersion using below search query,

LDAPSearchResults ldapSearchResults = ldapConn.search("", LDAPConnection.SCOPE_BASE, "(objectclass=*)", new String[] {"supportedLDAPVersion"}, false);

No results found, when i try to use vendorVersion and vendorName (like that queried like below)

ldapSearchResults = ldapConn.search("", LDAPConnection.SCOPE_BASE, "(objectclass=*)", new String[] {"vendorVersion"}, false)

is there any approach that can follow, please let me know.

i am need to get info as below,

root@docker_container:/etc/ldap/slapd.d# ldapsearch -VV
ldapsearch: @(#) $OpenLDAP: ldapsearch  (Jul 30 2019 16:24:19) $
        Debian OpenLDAP Maintainers <pkg-openldap-devel@lists.alioth.debian.org>
        (LDAP library: OpenLDAP 20448)
root@docker_container:/etc/ldap/slapd.d#

I am trying to find rootDSE attributes, but unable to get using below commands. Can some one help me here?

ldapsearch -h localhost -D cn=admin,dc=trialorg,dc=local -W -b "" -s base "(objectclass=*)" *

above query does return success but no details mentioned. but using simple authentication igot as below

root@docker_container:/container/service/slapd/assets/certs# ldapsearch -x -h localhost -D "cn=admin,dc=trialorg,dc=local" -W -b '' -s base +

dn:
structuralObjectClass: OpenLDAProotDSE
configContext: cn=config
namingContexts: dc=trialorg,dc=local
namingContexts: o=trialorg.local
supportedControl: 2.16.840.1.113730.3.4.18
supportedControl: 2.16.840.1.113730.3.4.2
supportedControl: 1.3.6.1.4.1.4203.1.10.1
supportedControl: 1.3.6.1.1.22
supportedControl: 1.2.840.113556.1.4.319
supportedControl: 1.2.826.0.1.3344810.2.3
supportedControl: 1.3.6.1.1.13.2
supportedControl: 1.3.6.1.1.13.1
supportedControl: 1.3.6.1.1.12
supportedExtension: 1.3.6.1.4.1.1466.20037
supportedExtension: 1.3.6.1.4.1.4203.1.11.1
supportedExtension: 1.3.6.1.4.1.4203.1.11.3
supportedExtension: 1.3.6.1.1.8
supportedFeatures: 1.3.6.1.1.14
supportedFeatures: 1.3.6.1.4.1.4203.1.5.1
supportedFeatures: 1.3.6.1.4.1.4203.1.5.2
supportedFeatures: 1.3.6.1.4.1.4203.1.5.3
supportedFeatures: 1.3.6.1.4.1.4203.1.5.4
supportedFeatures: 1.3.6.1.4.1.4203.1.5.5
supportedLDAPVersion: 3
supportedSASLMechanisms: GS2-IAKERB
supportedSASLMechanisms: GS2-KRB5
supportedSASLMechanisms: SCRAM-SHA-1
supportedSASLMechanisms: SCRAM-SHA-256
supportedSASLMechanisms: GSSAPI
supportedSASLMechanisms: GSS-SPNEGO
supportedSASLMechanisms: DIGEST-MD5
supportedSASLMechanisms: OTP
supportedSASLMechanisms: NTLM
supportedSASLMechanisms: CRAM-MD5
entryDN:
subschemaSubentry: cn=Subschema



I wanted to change the rootDSE once but this is not possible: 
![image](https://user-images.githubusercontent.com/46939197/71905776-1ad95800-3169-11ea-9565-8b322038fdec.png)

How can I configure the docker image so that the root DSE looks the way I want it to. For example:
![image](https://user-images.githubusercontent.com/46939197/71905867-452b1580-3169-11ea-80e8-455ba2e1a38e.png)

Docker Engine doesn't work well with firewall-cmd and can cause issues if you're connecting to the LDAP server from another container on the same machine. 

https://github.com/moby/moby/issues/32138
We have a lab of imacs.
I try to create an openldap server in one of the computers and connect the other ones with this server.

`docker run --name ldap-service --hostname ldap-service  -p 389:389 -p 636:636 --detach osixia/openldap:1.1.8`

Other imacs can recognize local IP of the LDAP server, but no matter what I tried, I can't login with the users defined on the LDAP server.

Is there anything extra I should do to connect local network machines with each other?
Thank you.
I don't know what the reasoning for trying to change the passwords of an existing installation, but this makes the container completely unusable to me. I store my secrets in vault, so I do not have them in my configuration yamls. This means all the password environment variables are unset, but the container is still trying to change them (and fails because the cn=admin,dc=example,dc=com has a different password).
This means that I cannot start an ldap container based off an existing database at all. It just crashes and stops
1.if you had docker run docker-openldap with LDAP_TLS=true(default) once, you may have to change image name to avoid  LDAP_TLS=false not working
2. It's necessary to config `LDAP_REPLICATION_CONFIG_SYNCPROV` and `LDAP_REPLICATION_DB_SYNCPROV`, because they contain 'starttls=critical' by default
3. When you config `LDAP_REPLICATION_CONFIG_SYNCPROV` or `LDAP_REPLICATION_DB_SYNCPROV` use `\"` instead of `'` or `"` in the middle. And replace variables with value.
4.`openldap-backup` contain `docker-openldap`, it's not a separate backup tool, treat it like `docker-openldap` with more LDAP_BACKUP env
When i use LDAP_TLS_VERIFY_CLIENT="demand" (default), my client application is failed to connect to LDAP service which is running.

Just wanted to understand verify client means, is openldap expecting the client cert to be shared or stored in ldap service ssl store.?

Please let me know details.
