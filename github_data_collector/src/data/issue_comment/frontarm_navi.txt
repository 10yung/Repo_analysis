Hello! I'm getting this error whenever I try to build my app:

```
navi-scripts: Using config at /directorytoapp/navi.config.js
Error: Uncaught [SecurityError: localStorage is not available for opaque origins]
    at reportException (/directorytoapp/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:62:24)
    at processJavaScript (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:243:7)
    at HTMLScriptElementImpl._innerEval (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:168:5)
    at onLoadExternalScript (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:90:12)
    at onLoadWrapped (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/per-document-resource-loader.js:53:33)
    at Object.check (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/resource-queue.js:76:23)
    at Promise.resolve.then (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/resource-queue.js:83:27) SecurityError: localStorage is not available for opaque origins
    at Window.get localStorage [as localStorage] (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/Window.js:240:15)
    at b (/static/js/main.ae90c729.chunk.js:1:206435)
    at Object.180 (/static/js/main.ae90c729.chunk.js:1:5543)
    at p (about:blank:1:526)
    at Object.308 (/static/js/main.ae90c729.chunk.js:1:45690)
    at p (about:blank:1:526)
    at Module.858 (/static/js/main.ae90c729.chunk.js:1:184742)
    at p (about:blank:1:526)
    at Object.478 (/static/js/main.ae90c729.chunk.js:1:150792)
    at p (about:blank:1:526)
Error: Uncaught [SecurityError: localStorage is not available for opaque origins]
    at reportException (/directorytoapp/node_modules/jsdom/lib/jsdom/living/helpers/runtime-script-errors.js:62:24)
    at processJavaScript (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:243:7)
    at HTMLScriptElementImpl._innerEval (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:168:5)
    at onLoadExternalScript (/directorytoapp/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js:90:12)
    at onLoadWrapped (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/per-document-resource-loader.js:53:33)
    at Object.check (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/resource-queue.js:76:23)
    at Promise.resolve.then (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/resources/resource-queue.js:83:27) SecurityError: localStorage is not available for opaque origins
    at Window.get localStorage [as localStorage] (/directorytoapp/node_modules/jsdom/lib/jsdom/browser/Window.js:240:15)
    at b (/static/js/main.ae90c729.chunk.js:1:206435)
    at Object.180 (/static/js/main.ae90c729.chunk.js:1:5543)
    at p (about:blank:1:526)
    at Object.308 (/static/js/main.ae90c729.chunk.js:1:45690)
    at p (about:blank:1:526)
    at Module.858 (/static/js/main.ae90c729.chunk.js:1:184742)
    at p (about:blank:1:526)
    at Object.478 (/static/js/main.ae90c729.chunk.js:1:150792)
    at p (about:blank:1:526)
[ohshit] An error occured while building your app
Couldn't find window.NaviScripts - did you call register()?
Error: Couldn't find window.NaviScripts - did you call register()?
    at crawl (/directorytoapp/node_modules/navi-scripts/lib/crawl.js:22:15)
```

The thing with my setup is that I initialized a blog with the create-react-blog command and copied the files into an existing React app. It worked with `react-scripts start`, but there seems to be an issue with jsdom and the `navi-scripts build` command. `react-scripts build` runs without a hitch, but the entire build grinds to a halt when it gets to `navi-scripts build`.

Any idea what might be causing this issue? I thought it might be related to issue #87.
After trying to create sitemap.xml for my site. I think `navi-scripts build` should have some build cycle hook to do things without tears.

I use this hook to create `sitemap` for my site at `https://thealemazing.com`
Is it already possible to lazy load components using navi?

```
import React, {lazy} from 'react';
import useStyles from './Blocks.styles';

const Paragraph = lazy(() => import('components/Paragraph'));
```

```
{blocks.map((block, index) => {
                if (block.blockName === 'core/paragraph') {
                    return (
                        <Paragraph
                            key={index}
                            content={block.innerContent[0]}
                        />
                    );
                } else {
                    return null;
                }
            })}
```

This now throws:

```
{ Invariant Violation: ReactDOMServer does not yet support lazy-loaded components.
```

Is there another way to archive this with navi?
I'm struggling to understand how to make a custom matcher following this doc:

https://frontarm.com/navi/en/reference/matchers/#custom-matchers

The doc above talks about needing to return an array of segment objects but I can't see segments in the Types doc:

https://frontarm.com/navi/en/reference/data-types/#segment
I would like to fetch remote data in `getData` using react hooks, however this can't be done within regular javascript functions as per React [rules of hooks](https://reactjs.org/docs/hooks-rules.html).

`getData`  being a regular function that returns `object | Promise<object>`, hooks can't be used there.

My concern is that more and more libraries are embracing hooks for data fetching, (e.g [React Apollo hooks](https://www.npmjs.com/package/@apollo/react-hooks)).

I could obviously use hooks in my pages/components, but that would kind of defeat the purpose of react-navi `getData`.

Do you have any advice on what would be the best approach for this issue?

Edit: I found a somewhat similar issue [there](https://github.com/trojanowski/react-apollo-hooks/issues/111).

I could use plain promise based queries using apollo client as per the above issue example, but I would still really like to use hooks instead as I can auto generate them thanks to a package called [graphql-gen](https://graphql-code-generator.com/), which makes it far easier and less error prone compared to using the bare apollo client.
`crawl` doesn't work on certain older browsers and throws `TypeError: matcher is not a function`.

The problem seems to be caused by the returned promise from `createCrawlTuplesPromise` that resolves to incorrect data types. The resolved value is expected to be an array where the items is a tuple containing one function and one object, but is rather one _string_ and one object.

Here is an example where the promise resolves incorrectly (on [Chromium v 65.0.3325](https://commondatastorage.googleapis.com/chromium-browser-snapshots/index.html?prefix=Linux_x64/530363/)). Notice the string type in the first item of the result, starting from index 13:

![crawl-tuples-with-different-data-types](https://user-images.githubusercontent.com/242216/62858274-2596da80-bcfa-11e9-96ff-4f58b7950439.png)

Here's an example where the promise resolves correctly (latest Chromium):

![crawl-tuples-with-correct-data-types](https://user-images.githubusercontent.com/242216/62858273-2596da80-bcfa-11e9-81bd-148955070a6a.png)

Here is the result of the paths-variable within the `createCrawlTuplesPromise`. I suspect the problem is within this function.

![createCrawlTuplesPromise-paths](https://user-images.githubusercontent.com/242216/62858275-2596da80-bcfa-11e9-8562-1f68345bcdc5.png)

`redirect` matchers are resolved correctly but `withView` and `mount` matchers do not. I've debugged and went through the code but I'm having a hard time understanding the data flow and generators. Any idea what may be the cause?

Following on from this issue #85 could you point me in the right direction where this work might need to be done?

My previous routing logic relied on react-router supporting optional params and not only splitting on a `/` i.e. my URL could have optional param of `.amp`

In react-router this works: `/:language(${languageRegex})/page/:id(${idRegex}):amp(.amp)?`

In navi `id` & `amp` get combined into a single param and thus never match correctly
I am working on a universal react app, that uses express and react-router, the first request is rendered server side and then hydrates on the client side. 

Is there an example of how navi could work with express for this application? I cant quite see how it works from looking at the static rendering docs. I am also not using CRA so wouldn't need navi-scripts?
Hi.

I apologize if I bring it up as a duplicate, but I've gone through all related issues and haven't found a solution.

## Expected behavior

I want to be able to control "not found" route behavior and render a dedicated react component (page) in that case. This is how I would expect it to work:

```jsx
// routes.js
import { mount, route } from 'navi'
import Frontpage from './pages/Frontpage'
import About from './pages/About'
import Page404 from './pages/Page404'

export default mount({
  '/': route({ view: <Frontpage /> }),
  '/about': route({ view: <About /> }),
  '*': route({ view: <Page404 /> }),
})
```

```js
// App.jsx
import React, { Suspense } from 'react'
import ReactDOM from 'react-dom'
import { Router, View } from 'react-navi'
import routes from './routes'

const render = module.hot ? ReactDOM.hydrate : ReactDOM.render

render(
  <Router routes={routes}>
    <Suspense fallback={null}>
      <View />
    </Suspense>
  </Router>,
  document.getElementById('root'),
)
```

## Current behavior

The route associated with the "*" wildcard doesn't render. Instead, I get a blank page and the following client-side error:

```
Uncaught NotFoundError: URL not found: /abouts
    at createNotFoundChunk (webpack-internal:///./node_modules/navi/dist/es/Chunks.js:27:16)
    at eval (webpack-internal:///./node_modules/navi/dist/es/createChunksMatcher.js:54:110)
    at step (webpack-internal:///./node_modules/navi/dist/es/createChunksMatcher.js:28:23)
    at Object.eval [as next] (webpack-internal:///./node_modules/navi/dist/es/createChunksMatcher.js:9:53)
    at eval (webpack-internal:///./node_modules/navi/dist/es/Matcher.js:55:29)
    at step (webpack-internal:///./node_modules/navi/dist/es/Matcher.js:27:23)
    at Object.eval [as next] (webpack-internal:///./node_modules/navi/dist/es/Matcher.js:8:53)
    at step (webpack-internal:///./node_modules/navi/dist/es/createChunksMatcher.js:13:139)
    at Object.eval [as next] (webpack-internal:///./node_modules/navi/dist/es/createChunksMatcher.js:9:53)
    at eval (webpack-internal:///./node_modules/navi/dist/es/Matcher.js:55:29)
```

Another error specifies that the previous one has originated from the `View` I have:

```
The above error occurred in the <View> component:
    in View
    in Suspense
    in HashScroll (created by NaviProvider)
    in NaviProvider (created by Router)
    in Router
```
Some of my views share a navigation bar and some doesn't, how do I combine them?

For example, suppose my app have 3 pages, "home", "products" and "about", "home" and "products" have a shared navigation bar, but "about" doesn't.

From the docs I know that I can share component with `withView`:
```jsx
withView((
    <>
      <NavBar />
      <View />
    </>
  ),
  mount({
    '/': route({
      title: 'Home',
      view: <Home />,
    }),
    '/products': route({
      title: 'Products',
      view: <Products />,
    }),
  })
)
```
But it's not clear how to add other routes that doesn't need the shared component.

I've tried to use `compose`, but it seemed `mount` can't be "composed"? I got 404 for "/about" with this code:
```jsx
const shared = withView((
    <>
      <NavBar />
      <View />
    </>
  ),
  mount({
    '/': route({
      title: 'Home',
      view: <Home />,
    }),
    '/products': route({
      title: 'Products',
      view: <Products />,
    }),
  })
)

compose(
  shared,
  mount({
    '/about': route({
      title: 'About',
      view: <About />,
    }),
  })
)
```

I've looked at the source code of [frontarm.com/navi/](https://github.com/frontarm/navi-website/blob/master/src/routes.js), but I didn't find routes for "/learn" and "/articles" mentioned [here](https://frontarm.com/navi/en/guides/nested-views/), so I guess I missed something.

So how do I do it correctly?