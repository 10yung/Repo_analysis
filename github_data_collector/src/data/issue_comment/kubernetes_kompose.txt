Given the [conversion matrix](https://github.com/kubernetes/kompose/blob/master/docs/conversion.md), it would be nice to have a feature within the `kompose` utility to be able to validate a `docker-compose` file to see what attributes defined in that yaml will be converted, versus which attributes will not be supported.

As an example, if a `docker-compose` file has the attribute `security_opt` defined, the matrix says "Kubernetes uses its own container naming scheme", the command might be:
```
kompose validate -f docker-compose.yaml
```
And when it reaches the attribute `security_opt`, it might error with:
```
[FAIL]: the option `security_opt` is not supported <additional metadata here potentially>?
```
The use case for this is using `kompose` within a GitOps pipeline, we are taking users compose files and converting them on their behalf so they don't need to know kubernetes, however, there currently is no way to easily relay to them what is a supported element within the compose file.

If we had the ability to validate the compose file with `kompose`, we could potentially write our own wrapper around the output of the `kompose validate` command to be able to tell the user "_Hey, you used security_opt, which is something we don't support_".

Thoughts and discussion are welcome surrounding this, and if I can help in anyway please let me know. I am mainly a Python user, but know _some_ Golang. 

Thanks!

This is generating: 
```
apiVersion: extensions/v1beta1 
kind: Deployment
```

This Deployment version was deprecated and no longer works in recent versions of k8s (e.g. 1.16).

Now you have to specify `apiVersion: apps/v1` and modify slightly the template (labelSelector field needed).



when convert :
kompose convert -f docker-compose.yaml, it is errorï¼š
FATA Version 2.1 of Docker Compose is not supported. Please use version 1, 2 or 3 . The follow is my yaml file:

version: '2.1'
services:
  registry:
    environment:
      CONFIG_SERVICE_PASSWORD: $CONFIG_SERVICE_PASSWORD
    image: 172.46.5.78:332/library/sqshq/piggymetrics-registry
    restart: always
    depends_on:
      config:
        condition: service_healthy
    ports:
      - 8761:8761
    logging:
      options:
        max-size: "10m"
        max-file: "10"

thanks for your answer.
Hello 

I am seeing 3 files being created for a single docker run command in my file 
for example the first set called reverseproxy shown created 3 files.
the next webapp created 3 more files.

My question is how do I start a pod with all my images running in it  

version: '3.7'

networks:
  app:
    driver: overlay

services:

  reverseproxy:
    image: ngnix:latest
    healthcheck:
      test: service nginx status | grep running || exit 1
      interval: 2s
      retries: 2
      start_period: 6s
      timeout: 1s
    ports:
      - "80:80"
    volumes:
      - ../../reverse-proxy/nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app

  webapp:
    image: somewebapp:latest
    healthcheck:
      test: curl --fail -s -k http://localhost || exit 1
      interval: 2s
      retries: 2
      start_period: 6s
      timeout: 1s
    ports:
      - "9000:80"
    networks:
      - app


& so on
reverseproxy-claim0-persistentvolumeclaim.yaml
reverseproxy-deployment.yaml
reverseproxy-service.yaml
Latest build of kompose, 1.19.0. This is for an Openshift 3.11 cluster.
Hi, first time ever creating an github issue on public forum. Please be forgiving.
I am trying to convert docker-compose.yml to openshift yml configuration files. When I specified port and label kompose.service.expose='true', the route that is being created has a target port as an integer. The openshift complains about not seeing the port exposed on the service. When I manually change the port on openshift route configuration to string, the route finds the port on the service.

It would be super awesome if we could have this port to be transformed into a string.

I attached pictures showing some of my configuration. 

![Screen Shot 2019-11-19 at 12 31 53 PM](https://user-images.githubusercontent.com/41640598/69170842-cb5f9f80-0ac8-11ea-98e3-ddb00b9d3025.png)
![Screen Shot 2019-11-19 at 12 31 42 PM](https://user-images.githubusercontent.com/41640598/69170844-cb5f9f80-0ac8-11ea-95c5-969d38f2d31e.png)
![Screen Shot 2019-11-19 at 12 31 31 PM](https://user-images.githubusercontent.com/41640598/69170845-cbf83600-0ac8-11ea-934d-6887d43fb14b.png)


Hi is there a way to specify init containers for pods in docker-compose.yml?
https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
I want to upgrade k8s vendor to a newer version. I change `github.com/openshift/origin` version from `v1.4.0-rc1` to `v3.9.0`, then run `glide update --strip-vendor`. There're many errors message

```
[ERROR]	Error looking for k8s.io/api/apps/v1beta1: Unable to get repository: Cloning into '/root/.glide/cache/src/git-github.com-openshift-kubernetes-api'...
[ERROR]	Error scanning k8s.io/api/autoscaling/v1: cannot find package "." in:
	/root/.glide/cache/src/git-github.com-openshift-kubernetes-api/autoscaling/v1
[ERROR]	Error scanning k8s.io/api/batch/v1: cannot find package "." in:
	/root/.glide/cache/src/git-github.com-openshift-kubernetes-api/batch/v1
[ERROR]	Error scanning k8s.io/api/batch/v1beta1: cannot find package "." in:
	/root/.glide/cache/src/git-github.com-openshift-kubernetes-api/batch/v1beta1
[ERROR]	Error scanning k8s.io/api/batch/v2alpha1: cannot find package "." in:
	/root/.glide/cache/src/git-github.com-openshift-kubernetes-api/batch/v2alpha1
[ERROR]	Error scanning k8s.io/api/core/v1: cannot find package "." in:
	/root/.glide/cache/src/git-github.com-openshift-kubernetes-api/core/v1
```

So I can't upgrade k8s vendor to a newer version.   I find a issue https://github.com/redhat-developer/odo/issues/377, when I clean all glide cache and vendor folder, it always show above error message.   

@cdrage @hangyan Do you have some suggestion about this ? Need help.
Bug#874049: Acknowledgement (ITP: Kompose -- conversion tool for all things compose( namely Docker Compose) to container ochestrators (Kubernetes or Openshift))
For example, `"importPolicy": {}` is added to each OpenShift output.

Within Kubernetes there are also other useless keys that are either `null` or `{}`.

Let's remove them.