
What is difference between Sleipnir and Quick? They seem very similar to me. What are some trade offs and advantages of using Sleipnir?

Thanks! 
In Swift 2.2 `String` is not `SequenceType` anymore.
One should try to use `String.CharacterView` instead.
E.g.

``` swift
public func endWith(item: String) -> EndWith<String.CharacterView, Character>
```

Usefull links from @AlexDenisov:
- https://www.reddit.com/r/iOSProgramming/comments/46muyc/diy_load_a_private_framework_at_runtime_to_use/
- https://gist.github.com/JohnCoates/94c25e19050ffa5ea981

Could you please add support for carthage?

Can someone check to make sure they can still run the Sample project?

I've had no luck writing command line projects that reference a Swift framework and was told this is not supported in currently released XCode 6.1.

I see the same issue with the Sleipnir project. Do others have the same problem? I see a runtime dyld error. 

```
dyld: Library not loaded: @rpath/libswiftCore.dylib
```

Can't add public extensions to generic types Array or Optional

Found this related issue on stackoverflow.

http://stackoverflow.com/questions/26387262/array-extension-called-from-other-module

How are others working around this?

I guess in my local copy I'll remove the public modifier and add some other helper methods.

Here is one of the 4 compile errors regarding this:

```
/Users/mgwelch/Documents/Projects/thirdparty/swiftz/sleipnir/Sleipnir/Sleipnir/Matchers/ShouldSyntax.swift:29:9: Extension of generic type 'Array<T>' from a different module cannot provide public declarations
```

It would be great to use Sleipnir with Cocoapods to ensure that it works on simulator. I believe there are a lot of projects that have cocoa pods installation as requirement for any of their dependencies.

As a build master
I want to retrieve test results in JUnit XML compatible format
So that I can report them on my build server (Jenkins CI)

As a build master 
I want to **start the test run automatically** without tapping any UI buttons
So that I can run tests with my CI scripts
# 

As a build master
I want to **retrieve test results** (in JUnit XML compatible format)
So that I can report them on my build server
# 

As a build master
I want to **crash the application** when all tests would have been executed
So that test running does not block the integration and next jobs run as expected
