It seem we need a way for use wildcards for allowed_origins

for example

`
'allowed_origins' => ['(https|http)://*.domainname.com'],
`
Can i find any similar way in this module?
Using the latest version of Laravel and PHP 7.4, installed this package and upon trying to load a view it gives me the error;
`Trying to access array offset on value of type null`

Specifically from this file;
`vendor/fruitcake/laravel-cors/src/CorsServiceProvider.php:26`

I thought it might be because of PHP 7.4, so I downgraded to 7.3 but still having the same issue.

Let me know if more information is required.
![image](https://user-images.githubusercontent.com/29169847/71608040-07eae480-2bb9-11ea-8466-770a295bda90.png)
![image](https://user-images.githubusercontent.com/29169847/71608015-e12cae00-2bb8-11ea-8c87-1a8df5f2ccad.png)
![image](https://user-images.githubusercontent.com/29169847/71608022-edb10680-2bb8-11ea-8f46-a51963f37219.png)
![image](https://user-images.githubusercontent.com/29169847/71608106-86478680-2bb9-11ea-87b6-86b50cf1eef3.png)



The final result is empty

![image](https://user-images.githubusercontent.com/29169847/71608155-dcb4c500-2bb9-11ea-8f48-99ed3db3b6bc.png)


Lumen 5.8

I have a route like this

```
$router->post(
                    'doX',
                    [
                        'uses'       => 'DoXController@index'
                    ]
                );
```
I wonder if to enable CORS of the above API I would simply add
```
      'middleware' => ['cors'],
```

To the definition or do I have to have a $router->options(....) instead?
Also, do I point to the same uses or simply return anything as content?
What's the recommended way to set the allowedOrigins value to something more specific for production? Is it to use a variable from the .env file?

`'allowedOrigins' => env('ALLOWED_ORIGINS', '*')`

or similar?
I have the latest version of Lumen 5.8 and installed the library but i am getting the following error

```
[HTTP/1.1 404 Not Found 4ms]
```

### app.php
```
<?php


require_once __DIR__.'/../vendor/autoload.php';

(new Laravel\Lumen\Bootstrap\LoadEnvironmentVariables(
    dirname(__DIR__)
))->bootstrap();

/*
|--------------------------------------------------------------------------
| Create The Application
|--------------------------------------------------------------------------
|
| Here we will load the environment and create the application instance
| that serves as the central piece of this framework. We'll use this
| application as an "IoC" container and router for this framework.
|
*/

$app = new Laravel\Lumen\Application(
    dirname(__DIR__)
);

// $app->withFacades();

// $app->withEloquent();

/*
|--------------------------------------------------------------------------
| Register Container Bindings
|--------------------------------------------------------------------------
|
| Now we will register a few bindings in the service container. We will
| register the exception handler and the console kernel. You may add
| your own bindings here if you like or you can make another file.
|
*/

$app->singleton(
    Illuminate\Contracts\Debug\ExceptionHandler::class,
    App\Exceptions\Handler::class
);

$app->singleton(
    Illuminate\Contracts\Console\Kernel::class,
    App\Console\Kernel::class
);

/*
|--------------------------------------------------------------------------
| Register Middleware
|--------------------------------------------------------------------------
|
| Next, we will register the middleware with the application. These can
| be global middleware that run before and after each request into a
| route or middleware that'll be assigned to some specific routes.
|
*/





/*
|--------------------------------------------------------------------------
| Register Service Providers
|--------------------------------------------------------------------------
|
| Here we will register all of the application's service providers which
| are used to bind services into the container. Service providers are
| totally optional, so you are not required to uncomment this line.
|
*/

// $app->register(App\Providers\AppServiceProvider::class);
// $app->register(App\Providers\AuthServiceProvider::class);
// $app->register(App\Providers\EventServiceProvider::class);



/*
|--------------------------------------------------------------------------
| Load The Application Routes
|--------------------------------------------------------------------------
|
| Next we will include the routes file so that they can all be added to
| the application. This will provide all of the URLs the application
| can respond to, as well as the controllers that may handle them.
|
*/

$app->configure('cors');

$app->register(Barryvdh\Cors\ServiceProvider::class);

$app->middleware([
    // ...
    \Barryvdh\Cors\HandleCors::class,
]);






$app->router->group([
    'namespace' => 'App\Http\Controllers',
], function ($router) {
    require __DIR__.'/../routes/web.php';
});


return $app;

```

## routes web.php
```
<?php



/*
|--------------------------------------------------------------------------
| Application Routes
|--------------------------------------------------------------------------
|
| Here is where you can register all of the routes for an application.
| It is a breeze. Simply tell Lumen the URIs it should respond to
| and give it the Closure to call when that URI is requested.
|
*/



$router->get('/', function () use ($router) {
    return $router->app->version();
});


$router->post('/api/stripe', 'StripeController@update');

```

This would probably a easy solve 



Maybe I am going about this all wrong or simply not understanding.

I have a Laravel API and a Vue front end application. I want the API to only be accessable when requests are coming from the Vue front end.

Frontend url = www.somesite.com
API backend url = http://api.somesite.com

But even on localhost / and live server I can make a request via postman and it always gets thru.
I went to an online API tester and sent the login request to live server and it still get thru.

Here is cors.php config:
```
'supportsCredentials' => false,
'allowedOrigins' => [
  's******p.com', // this should be only url that can access the API?
],
//'allowedOrigins' => ['*'],
'allowedHeaders' => ['Origin', 'Content-Type', 'Accept', 'Authorization', 'Cache-Control', 'X-Requested-With'],
'allowedMethods' => ['GET', 'PUT', 'PATCH', 'POST', 'DELETE'],
'exposedHeaders' => ['Authorization'],
'maxAge' => 0
```

Added the ```\Barryvdh\Cors\HandleCors::class,``` to kernel.php in all guards since none are working figured all to all. ($middleware, $middlewareGroups / api and web, $routeMiddleware)

The api.php routes is wrapped in 
```
Route::group(['middleware' => ['cors']], function () {
/// all api routes
});
```

Any ideas where I am going wrong?
Thanks all,

Dave
Today I ran into this error:

> Access to XMLHttpRequest at 'https://domain.test/api/users' from origin 'http://localhost:8100' has been blocked by CORS policy: The 'Access-Control-Allow-Origin' header contains multiple values '*, http://localhost:8100', but only one is allowed.

Which turned out to be a 500 internal error that I was able to fix in my code. The problem is, 500 errors do happen out in the field and it would be great if Laravel was able to return that 500 error rather than being an unreadable response due to CORS. That way, my app can show a message to the user about that error.

What do I need to do with my CORS setup to return the error rather than having it get blocked?

The only thing I can think of is wrapping every single request in a try/catch and having the catch return a response deliberately rather than relying on the standard response generated by Laravel when an exception occurs. This seems very unlaravel-like and bulky. Is there a better way?
Hi @barryvdh ,

I have used the package on my laravel application. I have implemented on API and web for example "http://myip/api/auth" or such. However, when I am trying to access the files residing at "http://myip/scorm" which is not part of the API guard or WEB guard i kept getting the CORS resources disallowed for iframe... I am using NGINX. The resource is being called inside an Iframe in a react app. I would really appreciate any help in this regard.

FYI...i have tried implementing add_header inside nginx too..


Regards,
HP

Hello!
I've faced a bug with response headers when running my application via https://github.com/spiral/roadrunner. So, the problem is here:
https://github.com/barryvdh/laravel-cors/blob/c95ac944f2f20a17949aae6645692dfd3b402bca/src/HandleCors.php#L71
This code is running when one of the event was triggered by the app and doesn't try to check was it a CORS request or not. As a result I've receiving 500 because workers don't able to serialize a NULL value as a value of header.

The fix is pretty simple (I may be wrong): need to add a check for CORS request
```php
        if ($this->cors->isCorsRequest($request) && !$response->headers->has('Access-Control-Allow-Origin')) {
```