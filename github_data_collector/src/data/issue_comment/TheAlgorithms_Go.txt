Jump Search added
Example of building a cartesian binary tree. 
Heap-ordered tree, constructed by recursively finding a smallest value in the sequence of numbers.

Old
t := &btree{nil}
// inorder(t.root)
t.root = insert(t.root, 30)
t.root = insert(t.root, 20)
t.root = insert(t.root, 15)
t.root = insert(t.root, 10)
t.root = insert(t.root, 12)
t.root = insert(t.root, 8)
t.root = insert(t.root, 6)
t.root = insert(t.root, 4)
t.root = bst_delete(t.root, 10)
inorder(t.root)  // 4 6 8 4 12 15 20 30
Now
t := &btree{nil}
// inorder(t.root)
t.root = insert(t.root, 30)
t.root = insert(t.root, 20)
t.root = insert(t.root, 15)
t.root = insert(t.root, 10)
t.root = insert(t.root, 12)
t.root = insert(t.root, 8)
t.root = insert(t.root, 6)
t.root = insert(t.root, 4)
t.root = bst_delete(t.root, 10)
inorder(t.root)  // 4 6 8  12 15 20 30
For example, in sort, there are 2 selection sorts and 2 insertion sorts. Besides minor differences in formatting, these files are identical. Not sure which should be kept and which should be deleted.
fix#97.
## Traversal is error of binary-tree.go.
__golangci-lint run --no-config searches__
```
##[error]searches/binary_search.go:20:6: `iterBinarySearch` is unused (deadcode)
func iterBinarySearch(array []int, target int, lowIndex int, highIndex int) int {
     ^
##[error]searches/binary_search.go:6:6: func `binarySearch` is unused (unused)
func binarySearch(array []int, target int, lowIndex int, highIndex int) int {
     ^
```


Added paypal and gitter badges because that's what the other repos have. :-)

https://github.com/TheAlgorithms/Python/blob/master/README.md
https://github.com/TheAlgorithms/Rust/blob/master/README.md