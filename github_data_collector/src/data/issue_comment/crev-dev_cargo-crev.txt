https://www.reddit.com/r/rust/comments/eq11t3/a_sad_day_for_rust/fenrpce/

I think it would be worth adding.
To me the "noun verb" grouping of commands is unhelpful. On a first glance it seems like a logical thing to do, but it has many problems in practice:

* for many operations there's actually more than one thing involved, so it's unclear *which* noun is the special one. For example if an operation requires *querying repositories about crate information* it's entirely arbitrary whether that's `crate info` or `repo query`. 

* I can't develop intuition when to use `cargo crev crate`, because it changes the meaning of "crate" depending on subcommand. Sometimes it's the current crate, sometimes it's some other crate, sometimes it's search for crates. This seems wrong to me, because `crate verify` verifies my crate in the current directory, and given that I'd expect other `crate` subcommands to be consistent and also apply to my crate in the current directory, but they don't.

* the choice of top-level nouns is odd. For example, reviews are an essential object for crev, but they weren't given a noun in the UI. There's no `cargo crev review create`. Instead of `review delete` there's `crate unreview`.

* To me repositories are an implementation detail, more like a transport mechanism. So to me `cargo crev repo` is as weird as `cargo crev http` would be. Because most crev features are backed by some repo somewhere, the `cargo crev repo` subcommands perform lots of unrelated operations, from editing my readme to searching other people's reviews.

* The commands are long to type. I've noticed you use an undocumented `c v` shortcut! Poor users who read `cargo crev --help` end up suffering the long versions.

* There is no similarity between verbs. The verbs don't apply equally to the nouns. A "noun verb" design would make sense for a music player that allows `song play` and `album play`, but crev's nouns aren't interchangeable like that. In crev's case these are mostly just unique two-word commands.

* structopt/clap doesn't think of them as nouns and verbs, but as nested subcommands. Because of that it doesn't display full commands, and `cargo crev --help` is useless.


Look at `cargo` itself. It has `cargo update`, not `cargo index update`. It has `cargo build`, not `cargo crate build`. `cargo publish`, not `cargo package publish`. Flattening of options allows `cargo --help` to display the most common and most useful options.

Hi,

After today's Reddit posts regarding the (repeated...) treatment of UB in upstream  dependencies I thought to give `crev` a shot and review the dependencies of our project. Unfortunately I didn't get very far before I was too frustrated and gave up. I took a few minutes to write down my user journey, maybe you find this interesting:

- I started out by landing in some random repo that was a clone of `crev-proofs` and didn't quite understand where to start. 
- I had to click few times to find the actual "crev" repo, which was not `crev` but `cargo-crev` (why doesn't the `crev-proofs` README template explain that in 1-2 sentences and link to "crev proper" prominently?) and then click the "Getting Started" link hidden in the middle of that page.
- Getting the tool I wanted pre-compiled binaries, on MacOS using `brew` in particular (too lazy to manually download and copy a binary). However, self compiling worked alright (`cargo install cargo-crev`). So, how _do_ I start?
- `cargo crev` only printed a general help but didn't lead me to getting a "successful" first-time user output (why not print `Run 'cargo crev ...' to review this crate` somewhere?). 
- Maybe `cargo crev crate review` ... Something something "Crate name argument"? Huh? Oh, maybe wrong command. Time to check README.
- Ah, `cargo crev crate verify` ... alright. It's doing something. Wait, the output looks nothing like advertised on web page. No geiger, no issues, just weird flags:

```
status issues flgs crate                version         latest_t       
none    0   0 ____ constant_time_eq     0.1.4           
none    0   0 ____ fallible-streaming-iterator 0.1.9           
none    0   0 ____ pkg-config           0.3.17          
none    0   0 ____ rustc-demangle       0.1.16          
```

- It says "use one or more `--show-xyz` options to print more details." ... Uhm, which one? Is Geiger an option now since the README was written? Trying `cargo crev crate verify --help` suggested `--show-geiger`. Oookay, let's try that:
- `cargo crev crate verify --show-geiger` ... `error: The argument '--show-geiger <show_geiger>' requires a value but none was supplied`
- Ah fuck it, I'm too busy anyway, maybe another time.


Happened with `cargo-crev 0.15.0` on macOS 10.15.2. As mentioned in the beginning, this is not really an issue, more of a report I wanted to share. Feel free to close. 
Cargo uses `--vers x.y.z` to specify crate versions for commands. `cargo crev` uses `name [version]` pattern instead, which wasn't obvious to me. I've also tried `name@version` (pattern used by npm), but it showed a generic error message about crate not being found, without indicating that it's a wrong syntax.

I suggest supporting `--vers` and/or providing advice in case there's `@` in the crate name.

So I just started playing with cargo-crev today and just ran into two weird issues, possibly related. I've been following the getting started doc, and reviewed one of my small libs.

On running `cargo crev repo publish` I got a `Repository not found` error. Turns out that running `cargo crev id new --url https://git.sr.ht/~happy_shredder/crev-proofs`
actually set the origin url to /crev-proofs.git, which is incorrect.

On fixing that, I then ran `cargo crev repo publish` I then got `First, rewinding head to replay your work on top of it...` which wiped out the the commit from `crev id trust`, and the commit from the review.

On refetching dpc/crev-proofs, retrusting, and rereviewing I can publish successfully.

So something weird happened in the initial id creation. Not quite sure what though.

---
System details:
cargo-crev 0.14.0
cargo install cargo-crev
Funtoo 1.4, Linux 5.2.7, git 2.24.1

Basically the author of a work is often blind to the problems of a work. If there's a bug that they put in there on accident, they're obviously not going to see it during review because they'd fix it if they did see it.

I know that the identities aren't currently linked to anything so there's no _for sure_ way to determine if the ID of a review is connected to the person who wrote the crate being reviewed, but even a best effort system (such as looking at the git URL of the ID and looking at the authors, repository, and homepage entries in the crate's Cargo.toml file) would probably be helpful here.
Sometimes people give a negative review to a crate, and we conciously would like to overwrite them.

Current example. Me and other crev user reviewed `smallvec` and gave it a negative review, because it was ridden with `unsafe` and had a history of unsoundness. Then, I submitted a fuzzer to `smallvec`, and I think with a fuzzer we can have more confidence, and this crate does not deserve a `negative` rating anymore. At very least I don't want it to fail in my own `crate verify` output.

So I'd like to overwrite the other persons (which I still trust) review in this case. I could ask them to change their review, but that's not the point.

I am thinking, that a review could have an optional `overrule`/`overwrite`/`override` section with a list of reviews of other other people that should be ignored for some reason, because this review says they no longer apply, were a mistake, etc.

We could identify other reviews by:

* by id of their author
* digest
* signature

The id is the longest, but is the easiest for the humans to understand and use, so I think I'll stick with it.


For other users my override would only apply if they trust me more than then a person I'm trying to override here (more or equal maybe?).

Should be fairly easy to implement, though I could use some second opinion.
Calculate all the useful stuff for particular crate, and display nicely.

* ids
* all the metrics
* all the recursive metrics
* flags (in a nice, readable form)
* number of reviews (split into groups etc.)
* active issues
* alternatives
* dependencies
* reverse dependencies


Format: Possibly gather in a serde `struct` and serialize to `yaml`. Good enough for humans, good enough for robots.
Getting critical feedback about your code from random strangers from the Internet will naturally not always go well with emotions and egos of parties involved. Sometimes, the reviewer will be wrong about their judgment making them look unfair etc.

It would be good to establish an etiquette and set of standards, to make everyone involved feel more comfortable.
https://internals.rust-lang.org/t/calculating-which-3rd-party-crates-are-good-candidates-for-std-inclusion-via-left-pad-index/11129