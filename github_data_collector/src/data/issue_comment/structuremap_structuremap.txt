I know StructureMap is sunsetted and this may not get fixed, but just in case someone has the same problem:

When adding explicit arguments either via `ExplicitArguments` on `GetInstance<>(args)` or defining them in the registry via `.Ctor("name")`, StructureMap thinks that the argument has not been defined at all. This actually used to work in 2.6.

Here are some test cases which all fail:
```cs
[Fact]
public void supply_named_arguments_null_ctor()
{
    var container = new Container(x => { x.For<IWidget>().Use<ColorWidget>().Ctor<string>().Is(default(string)); });

    container.With("color").EqualTo(null)
        .GetInstance<IWidget>()
        .ShouldBeOfType<ColorWidget>()
        .Color.ShouldBeNull();
}

[Fact]
public void supply_named_arguments_null_arg1()
{
    var container = new Container(x => { x.For<IWidget>().Use<ColorWidget>().Ctor<string>().Is("Red"); });

    container.GetInstance<IWidget>()
        .ShouldBeOfType<ColorWidget>()
        .Color.ShouldBe("Red");

    container.With("color").EqualTo(null)
        .GetInstance<IWidget>()
        .ShouldBeOfType<ColorWidget>()
        .Color.ShouldBeNull();
}


[Fact]
public void supply_named_arguments_null_arg2()
{
    var container = new Container(x => { x.For<IWidget>().Use<ColorWidget>().Ctor<string>().Is("Red"); });

    container.GetInstance<IWidget>()
        .ShouldBeOfType<ColorWidget>()
        .Color.ShouldBe("Red");

    var args = new ExplicitArguments();
    args.SetArg("color", null);
    container.GetInstance<IWidget>(args)
        .ShouldBeOfType<ColorWidget>()
        .Color.ShouldBeNull();
}
```

I would expect these to be a valid setup, but the following error occurs in the first two:
```
StructureMap.StructureMapBuildPlanException : Unable to create a build plan for concrete type StructureMap.Testing.Acceptance.ColorWidget

new ColorWidget(String color)
  ┗ String color = Required primitive dependency is not explicitly defined

1.) Attempting to create a BuildPlan for Instance of StructureMap.Testing.Acceptance.IWidget (a7a59459-f11f-4554-9dec-6fd067bf1b83) -- StructureMap.Testing.Acceptance.ColorWidget ('a7a59459-f11f-4554-9dec-6fd067bf1b83')
2.) Container.GetInstance<StructureMap.Testing.Acceptance.IWidget>({color=})
```
When accessing documentation website eg https://structuremap.github.io/object-lifecycle/supported-lifecycles/
the browser fails to load jquery due to mixed content. Thus, the search bar does not work.

Proposed solution: use the protocol-relative url in script sections.
UseIfNone-registration is ignored when calling GetAllInstances. GetInstance does respect UseIfNone.

`ctor(IMyInterface item, IList<IMyInterface> items)`

Current result:
item is not null and items is empty.

Expected result:
item is not null and items contains at least one item.
I have registered some MediatR handlers as IAsyncRequestHandler types like:

...
For(typeof(IAsyncRequestHandler<ParamType, ResponseType>)).Use(typeof(ConcreteHandler));
...

When I concurrently call a API which in turn executes _mediator.Send(...) to one of the handlers I have registered, sometimes I see one ore more calls have exception for "Handler was not found for request of type", and dig deeper and see "No default Instance is registered and cannot be automatically determined for type 'IRequestHandler<ParamType, ResponseType>...'"

Any idea how could it happen? I already registered for IAsyncRequestHandler type, but somehow exception is thrown for "not found IRequestHandler"?



We're experiencing an issue similar to https://github.com/structuremap/structuremap/issues/626 "ArgumentNullException when defining a null value for a Nullable<T> parameter", but with a string parameter.

The class we're injecting has a default parameter that sets the string to null: https://github.com/SteeltoeOSS/Management/blob/434c6a10a8bbe79964e3b1c1ab0ebf80c0d70621/src/Steeltoe.Management.EndpointBase/HeapDump/HeapDumper.cs#L34

Because the value is null, we get an exception in the plan builder code here: https://github.com/structuremap/structuremap/blob/a6bf0af54e1b29a8944dded56303ce29f391ae23/src/StructureMap/Building/ConcreteType.cs#L133

`StructureMapBuildPlanException: Unable to create a build plan for concrete type Steeltoe.Management.Endpoint.HeapDump.HeapDumper

new HeapDumper(IHeapDumpOptions, String basePathOverride, ILogger<HeapDumper>)
┗ IHeapDumpOptions = **Default**
String basePathOverride = Required primitive dependency is not explicitly defined
ILogger<HeapDumper> = **Default**
`

If we set the parameter to default to an empty string, it works fine.

The same behavior occurs with nullable types. We're a bit confused by this behavior -- the default value of strings and nullable types is null, so why is a null value considered an error condition? The same class injects fine using ASP.NET Core built-in DI.

Was considering a PR to allow null strings and nullable types, but that would seem to contradict one of the PR's already merged: https://github.com/structuremap/structuremap/commit/e48668a014ffd7c743c740790e1239abf9f087c2

I not fully following the reasoning behind that PR - if you define a parameter as nullable, doesn't that mean you _intend_ for it to be optional, so a null should be expected and valid? (whether making parameters optional nullable types is a good idea in the first place is a totally separate conversation)
Hi, just a question:
For a project we now use StructureMap to inject some custom implementations but we needed to alter the 'GetInstance<>' call on the container because the instances in the container were registered with a scheme (ex. `file:///`) and it was based on a fully location (ex. `file:///some/file/path`) that we needed to resolve the instances.

We had for example these registrations:
* Name: `file:///`, instance: `FileUploader`
* Name: `http://`, instance: `HttpSender`
* ...

And based on a location string (like: `http://www.someurl.com`) we need to resolve the `HttpSender`.

Would it be useful to add a overload to the `GetInstance<>` method in the `Container` class to not only select an instance based on the exact match of a name but with a custom predicate?

`GetInstance<>(Func<Instance, bool>)`

Thanks in advance!
This is with respect to the issue #354 

The "bi-directional dependency relationship" exception is still being raised when the lifecycle is changed from "AlwaysUnique" to "Transient".

Below is the modified code from the issue #354, to reproduce the error.

	public class Program
		{
			private const String PearCode = "P";
	
			private static void Main()
			{
				var container = new Container(_ =>
				{
					_.For<IFruit>().Use<Pear>().Named(PearCode);
					_.For<FruitProvider>().Use<FruitProvider>();
					_.For<ISomething>().Use<Something>();
				});
				var tasks = new List<Task>(2000);
				var fruitProvider = container.GetInstance<FruitProvider>();
	
				for (var i = 0; i < tasks.Capacity; i++)
				{
					var t = Task.Factory.StartNew(() => { fruitProvider.Get(PearCode); });
					tasks.Add(t);
				}
				try
				{
					Task.WaitAll(tasks.ToArray());
				}
				catch (Exception e)
				{
					Debugger.Break();
				}
			}
		}
	
		public class FruitProvider
		{
			private readonly Func<String, IFruit> _factory;
	
			public FruitProvider(Func<String, IFruit> factory)
			{
				_factory = factory;
			}
	
			public IFruit Get(String name)
			{
				return _factory(name);
			}
		}
	
		public interface IFruit
		{
			String Name { get; }
		}
	
		public class Pear : IFruit
		{
			private readonly ISomething _something;
	
			public Pear(ISomething something)
			{
				// Please note that this is NOT needed to cause the issue, but will increase the number of times the issue occurs
				_something = something;
			}
	
			public String Name
			{
				get { return "Pear"; }
			}
		}
	
		public interface ISomething
		{
			Object Something2 { get; }
		}
	
		public class Something : ISomething
		{
			public Object Something2
			{
				get { return DateTime.UtcNow; }
			}
		}
I have `Task.WhenAll(tasks)`, and each task uses AutoMapper's ValueResolver which has dependency, resolved via DI.

```
public AutoMapperRegistry()
        {
            ForSingletonOf<MapperConfiguration>().Use("Build AutoMapper config", ctx =>
            {
                var profiles = ctx.GetAllInstances<Profile>();
                var config = new MapperConfiguration(cfg =>
                {
                    cfg.AllowNullCollections = true;

                    foreach (var profile in profiles)
                    {
                        cfg.AddProfile(profile);
                    }
                });
                return config;
            });
            For<IMapper>().Use(ctx => ctx.GetInstance<MapperConfiguration>().CreateMapper(ctx.GetInstance));
        }
```

When AutoMapper creates ValueResolver instance, same dependency added to dictionary more than once:

```
System.ArgumentException: An item with the same key has already been added.
   at System.ThrowHelper.ThrowArgumentException(ExceptionResource resource)
   at System.Collections.Generic.Dictionary`2.Insert(TKey key, TValue value, Boolean add)
   at StructureMap.SessionCache.GetDefault(Type pluginType, IPipelineGraph pipelineGraph)
   at AutoMapper.MappingOperationOptions`2.CreateInstance[T]()
```


Looks like expcetion from https://github.com/structuremap/structuremap/blob/master/src/StructureMap/SessionCache.cs#L77


hi 
iam use Structuremap in mvc core 2  iam use this code  .but It doesn't register
i dont want  use  Structuremap  in Startup with 

>  public IServiceProvider ConfigureServices(IServiceCollection services)

  ```
**There is another way** for use Structuremap 
public class StructuremapRegistry : Registry
    {
        public StructuremapRegistry()
        {
            Scan(
               Scan => {
                   Scan.TheCallingAssembly();
                   Scan.AddAllTypesOf<IUnitOfEntity>();
                   Scan.WithDefaultConventions();
                   Scan.LookForRegistries();
                   Scan.AssembliesAndExecutablesFromApplicationBaseDirectory();
               });
        }
    }

```
  public static IServiceProvider ConfigureServicesSM(this IServiceCollection services)
        {
            var container = new Container();
            container.Configure(config =>
            {
                config.AddRegistry(new StructuremapRegistry());
                config.Populate(services);
            });

            return container.GetInstance<IServiceProvider>();
           // return services;
        }
```
```
Registration in Startup.cs:
 public void ConfigureServices(IServiceCollection services)
{
       services.ConfigureServicesSM();
}

Here is example inspired by typical [MediatR](https://github.com/jbogard/MediatR) sample.

Question, why resolution for `X` is working but for `IRequestHandler` is not?

Live code is [here](https://dotnetfiddle.net/T1OYgV)

```
using System;
using StructureMap;

public class Program
{
	public static void Main()
	{
		var sm = new Container(_ =>
                {
                        _.For(typeof(X<,>)).Use(typeof(Y<>));
			_.For(typeof(IRequestHandler<,>)).Use(typeof(Adapter<>));
                });
		
		Console.WriteLine(sm.GetInstance<X<int, string>>());
		Console.WriteLine(sm.GetInstance<IRequestHandler<int, string>>());
	}
	
	public class X<T1, T2> {}
	public class Y<T1> : X<T1, string> {}

	public interface IRequestHandler<TRequest, TResponse> {}
	public class Adapter<TRequest> : IRequestHandler<TRequest, string> {}
}
```
