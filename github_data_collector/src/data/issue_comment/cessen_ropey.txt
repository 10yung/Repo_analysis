Some software and APIs, especially on the Windows platform, still operate in terms of UTF-16 code units when working with text.  One example is the [Language Server Protocol](https://microsoft.github.io/language-server-protocol/), which specifies text offsets in UTF-16 code units.

Being able to efficiently interoperate with these APIs is useful, especially for code editors.  To better support this use-case, and to generally round-out Ropey's Unicode support, we should provide a way to convert between Unicode scalar value indices (which Ropey uses) and UTF-16 code unit indices.

I _think_ tracking the data for this can be done with relatively little overhead.  I'm not as concerned that the actual conversions be super optimized (though they should still be efficient).  But I don't want the feature to negatively impact clients that aren't using it.
Currently the `Lines` iterator is roughly equivalent to just calling `Rope::line()` repeatedly with an incrementing index.  This is O(log N) for each call to `Lines::next()`, and also is just generally less efficient than it needs to be.  This is not only sub-optimal, but also stands out compared to the other iterators which are all O(1) and very fast.

It should be possible to also make `Lines` O(1) and just generally more efficient.
I'm wondering if you have any suggestion for efficiently tracking marked ranges? Issue #13 touched on this but was closed before you had a chance to comment.

I agree with issue #13, it can (probably should) be done in external structure. But an efficient implementation is non-trivial. I'm thinking something like https://github.com/atom/superstring marker_index as a good example of what is needed. It would be great to have this structure as an option to go with ropey. Or at least in the documentation to have some suggestions (maybe another crate) on how to handle the use case of tracking ranges in a ropey buffer.



