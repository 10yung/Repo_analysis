**What is the problem?**

_Maybe_ we can get better accuracy in the meal outlier classifier (as far as I can remember, the only one in which the value of the reimbursement is relevant) by adjusting the prices overtime to the inflation.

**How can this be addressed?**

There's [a package that can easily do that (using IPCA at this point)](https://github.com/cuducos/calculadora-do-cidadao), probably in the `fit` or `transform` stages of the classifier (sorry, `scikit-learn`, I never remember the differente between these two).

Probably something like that would do the adjustment `df["ajusted_value"]  = df.apply(lambda row: ipca.adjust(row['expense_date'], row['total_value']), axis=1)` and then we compare the results to see if there is a better accuracy as my hypothesis suggests.

**Who could help with this issue?**

Anyone interested in doing some exploratory work with data and, maybe, contributing to https://github.com/okfn-brasil/notebooks ; )
**What is the problem?**

The problem _was_ that digitized receipts were not machine-readable and we could not afford to properly run OCR in all images we had ([although we've tried](https://github.com/okfn-brasil/serenata-de-amor/issues?utf8=%E2%9C%93&q=is%3Aissue+ocr)). However, a couple of months ago the Chamber of Deputies started to offer eletronic receipts.

Since we know their URL (thanks @giovanisleite for #501) and they are structured HTML documens (that is to say, machine-readable), we can now try a classifier that idenfies alcoholic beverages in the reimbursements ([what is not allowed](https://cuducos.me/2016/09/01/serenata-de-amor.html)).

We just need to take extra care to check whether the full amount of the eletronic receipt was actually reimbursed (even without remark, sometimes the Chamber of Deputies cuts off alcholic beverages from the reimbusements).

**How can this be addressed?**

I think the classifier should:
1. get the contents of available eletronic receipt
2. parse them
3. test them agains a dictionary of possible names for alcoholic beverages (@brunopazzim's [drafted one in the early days of Serenata](https://docs.google.com/document/d/1yigf9iJ6FDEj_nGUThH48r2IwAww9pQQdlwhAf7Hg1U/edit?usp=sharing))

Surely we might go first to a exploratory notebook at github.com/okfn-brasil/notebooks to test whether results are worth it!

**Who could help with this issue?**

Anyone ðŸ’œ 
**What is the problem?**
The companies dataset seems somewhat old (from 2016-09-03).

**How can this be addressed?**
The idea is to get information from http://receita.economia.gov.br/orientacao/tributaria/cadastros/cadastro-nacional-de-pessoas-juridicas-cnpj/dados-publicos-cnpj , parse it and use it as the source of information. The processed data can be used to update the '2016-09-03-companies.xz' to a newer dataset.

This can be set as the first step before Rosie starts the analysis, meaning that at every run, the company dataset is up-to-date.

**Who could help with this issue?**
Anyone can help with it.

**Labels**
[data collection]

**What is the problem?**
Sometimes, the Chamber of Deputies fills reimbursement information incorrectly (as it can be seen on issue #505)

**How can this be addressed?**
It can be addressed by cross-checking the CNPJ provided by the reimbursement request with the information from the '2016-09-03-companies.xz' dataset.

The end goal would be to have it as a classifier for Rosie to post incorrect information on Twitter, so people can help check it and, if applicable, request an update via Chamber of Deputies website.

**Who could help with this issue?**
Anyone can help with it. I'm interested on working on this issue but any help is welcome.

**Labels**
[analysis]

**What is the problem?**
According to the [Quota for the Exercise of Parliamentary Activity](https://www2.camara.leg.br/deputados/pesquisa/56a-legislatura/no-exercicio-do-mandato/cota-para-o-exercicio-da-atividade-parlamentar-ceap), parliamentarians have some monthly limits, with defined spending ceilings.

For example:
`IX - combustÃ­veis e lubrificantes, atÃ© o limite inacumulÃ¡vel de R$ 6.000,00 (seis mil reais) mensais;`
Only six thousand reais can be spent on fuels and lubricants per month of parliamentary activity.

In addition there are still total spending limits set by states of the federation:

UF | Valor da cota (R$)
-- | --
AC | 44.632,46
AL | 40.944,10
AM | 43.570,12
...


**Proposal**
An endpoint in jarbas that shows the sub-quota limits per month/year of each deputy.
https://drive.google.com/file/d/1zv2zXhIumTpR_TnuAECgcsLQxFSZpbdM/view?usp=sharing

The idea is to create a new tweet for Rosie like:
```
"O(a) deputado(a)/senador(a) fulana(o) de tal gastou mais que o limite mensal na subcota XXX no mÃªs/ano MM/YYYY. VocÃª pode no ajduar a verifica? (link pro Jarbas)"
```





### Update [ipdb](https://pypi.org/project/ipdb) from **0.11** to **0.12.2**.


<details>
  <summary>Changelog</summary>
  
  
   ### 0.12.2
   ```
   -------------------

- Avoid emitting term-title bytes
  [steinnes]
   ```
   
  
  
   ### 0.12.1
   ```
   -------------------

- Fix --help 
  [native-api]
   ```
   
  
  
   ### 0.12
   ```
   -----------------

- Drop support for Python 3.3.x
  [bmw]
- Stop deprecation warnings from being raised when IPython &gt;= 5.1 is used.
  Support for IPython &lt; 5.1 has been dropped.
  [bmw]
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/ipdb
  - Changelog: https://pyup.io/changelogs/ipdb/
  - Repo: https://github.com/gotcha/ipdb
</details>





### Update [Django](https://pypi.org/project/Django) from **2.1.7** to **2.2.6**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.2.6
   ```
   ==========================

*October 1, 2019*

Django 2.2.6 fixes several bugs in 2.2.5.

Bugfixes
========

* Fixed migrations crash on SQLite when altering a model containing partial
  indexes (:ticket:`30754`).

* Fixed a regression in Django 2.2.4 that caused a crash when filtering with a
  ``Subquery()`` annotation of a queryset containing
  :class:`~django.contrib.postgres.fields.JSONField` or
  :class:`~django.contrib.postgres.fields.HStoreField` (:ticket:`30769`).


==========================
   ```
   
  
  
   ### 2.2.5
   ```
   ==========================

*September 2, 2019*

Django 2.2.5 fixes several bugs in 2.2.4.

Bugfixes
========

* Relaxed the system check added in Django 2.2 for models to reallow use of the
  same ``db_table`` by multiple models when database routers are installed
  (:ticket:`30673`).

* Fixed crash of ``KeyTransform()`` for
  :class:`~django.contrib.postgres.fields.JSONField` and
  :class:`~django.contrib.postgres.fields.HStoreField` when using on
  expressions with params (:ticket:`30672`).

* Fixed a regression in Django 2.2 where
  :attr:`ModelAdmin.list_filter &lt;django.contrib.admin.ModelAdmin.list_filter&gt;`
  choices to foreign objects don&#39;t respect a model&#39;s ``Meta.ordering``
  (:ticket:`30449`).


==========================
   ```
   
  
  
   ### 2.2.4
   ```
   ==========================

*August 1, 2019*

Django 2.2.4 fixes security issues and several bugs in 2.2.3.

CVE-2019-14232: Denial-of-service possibility in ``django.utils.text.Truncator``
================================================================================

If ``django.utils.text.Truncator``&#39;s ``chars()`` and ``words()`` methods
were passed the ``html=True`` argument, they were extremely slow to evaluate
certain inputs due to a catastrophic backtracking vulnerability in a regular
expression. The ``chars()`` and ``words()`` methods are used to implement the
:tfilter:`truncatechars_html` and :tfilter:`truncatewords_html` template
filters, which were thus vulnerable.

The regular expressions used by ``Truncator`` have been simplified in order to
avoid potential backtracking issues. As a consequence, trailing punctuation may
now at times be included in the truncated output.

CVE-2019-14233: Denial-of-service possibility in ``strip_tags()``
=================================================================

Due to the behavior of the underlying ``HTMLParser``,
:func:`django.utils.html.strip_tags` would be extremely slow to evaluate
certain inputs containing large sequences of nested incomplete HTML entities.
The ``strip_tags()`` method is used to implement the corresponding
:tfilter:`striptags` template filter, which was thus also vulnerable.

``strip_tags()`` now avoids recursive calls to ``HTMLParser`` when progress
removing tags, but necessarily incomplete HTML entities, stops being made.

Remember that absolutely NO guarantee is provided about the results of
``strip_tags()`` being HTML safe. So NEVER mark safe the result of a
``strip_tags()`` call without escaping it first, for example with
:func:`django.utils.html.escape`.

CVE-2019-14234: SQL injection possibility in key and index lookups for ``JSONField``/``HStoreField``
====================================================================================================

:lookup:`Key and index lookups &lt;jsonfield.key&gt;` for
:class:`~django.contrib.postgres.fields.JSONField` and :lookup:`key lookups
&lt;hstorefield.key&gt;` for :class:`~django.contrib.postgres.fields.HStoreField`
were subject to SQL injection, using a suitably crafted dictionary, with
dictionary expansion, as the ``**kwargs`` passed to ``QuerySet.filter()``.

CVE-2019-14235: Potential memory exhaustion in ``django.utils.encoding.uri_to_iri()``
=====================================================================================

If passed certain inputs, :func:`django.utils.encoding.uri_to_iri` could lead
to significant memory usage due to excessive recursion when re-percent-encoding
invalid UTF-8 octet sequences.

``uri_to_iri()`` now avoids recursion when re-percent-encoding invalid UTF-8
octet sequences.

Bugfixes
========

* Fixed a regression in Django 2.2 when ordering a ``QuerySet.union()``,
  ``intersection()``, or ``difference()`` by a field type present more than
  once results in the wrong ordering being used (:ticket:`30628`).

* Fixed a migration crash on PostgreSQL when adding a check constraint
  with a ``contains`` lookup on
  :class:`~django.contrib.postgres.fields.DateRangeField` or
  :class:`~django.contrib.postgres.fields.DateTimeRangeField`, if the right
  hand side of an expression is the same type (:ticket:`30621`).

* Fixed a regression in Django 2.2 where auto-reloader crashes if a file path
  contains nulls characters (``&#39;\x00&#39;``) (:ticket:`30506`).

* Fixed a regression in Django 2.2 where auto-reloader crashes if a translation
  directory cannot be resolved (:ticket:`30647`).


==========================
   ```
   
  
  
   ### 2.2.3
   ```
   ==========================

*July 1, 2019*

Django 2.2.3 fixes a security issue and several bugs in 2.2.2. Also, the latest
string translations from Transifex are incorporated.

CVE-2019-12781: Incorrect HTTP detection with reverse-proxy connecting via HTTPS
--------------------------------------------------------------------------------

When deployed behind a reverse-proxy connecting to Django via HTTPS,
:attr:`django.http.HttpRequest.scheme` would incorrectly detect client
requests made via HTTP as using HTTPS. This entails incorrect results for
:meth:`~django.http.HttpRequest.is_secure`, and
:meth:`~django.http.HttpRequest.build_absolute_uri`, and that HTTP
requests would not be redirected to HTTPS in accordance with
:setting:`SECURE_SSL_REDIRECT`.

``HttpRequest.scheme`` now respects :setting:`SECURE_PROXY_SSL_HEADER`, if it is
configured, and the appropriate header is set on the request, for both HTTP and
HTTPS requests.

If you deploy Django behind a reverse-proxy that forwards HTTP requests, and
that connects to Django via HTTPS, be sure to verify that your application
correctly handles code paths relying on ``scheme``, ``is_secure()``,
``build_absolute_uri()``, and ``SECURE_SSL_REDIRECT``.

Bugfixes
========

* Fixed a regression in Django 2.2 where :class:`~django.db.models.Avg`,
  :class:`~django.db.models.StdDev`, and :class:`~django.db.models.Variance`
  crash with ``filter`` argument (:ticket:`30542`).

* Fixed a regression in Django 2.2.2 where auto-reloader crashes with
  ``AttributeError``, e.g. when using ``ipdb`` (:ticket:`30588`).


==========================
   ```
   
  
  
   ### 2.2.2
   ```
   ==========================

*June 3, 2019*

Django 2.2.2 fixes security issues and several bugs in 2.2.1.

CVE-2019-12308: AdminURLFieldWidget XSS
---------------------------------------

The clickable &quot;Current URL&quot; link generated by ``AdminURLFieldWidget`` displayed
the provided value without validating it as a safe URL. Thus, an unvalidated
value stored in the database, or a value provided as a URL query parameter
payload, could result in an clickable JavaScript link.

``AdminURLFieldWidget`` now validates the provided value using
:class:`~django.core.validators.URLValidator` before displaying the clickable
link. You may customize the validator by passing a ``validator_class`` kwarg to
``AdminURLFieldWidget.__init__()``, e.g. when using
:attr:`~django.contrib.admin.ModelAdmin.formfield_overrides`.

Patched bundled jQuery for CVE-2019-11358: Prototype pollution
--------------------------------------------------------------

jQuery before 3.4.0, mishandles ``jQuery.extend(true, {}, ...)`` because of
``Object.prototype`` pollution. If an unsanitized source object contained an
enumerable ``__proto__`` property, it could extend the native
``Object.prototype``.

The bundled version of jQuery used by the Django admin has been patched to
allow for the ``select2`` library&#39;s use of ``jQuery.extend()``.

Bugfixes
========

* Fixed a regression in Django 2.2 that stopped Show/Hide toggles working on
  dynamically added admin inlines (:ticket:`30459`).

* Fixed a regression in Django 2.2 where deprecation message crashes if
  ``Meta.ordering`` contains an expression (:ticket:`30463`).

* Fixed a regression in Django 2.2.1 where
  :class:`~django.contrib.postgres.search.SearchVector` generates SQL with a
  redundant ``Coalesce`` call (:ticket:`30488`).

* Fixed a regression in Django 2.2 where auto-reloader doesn&#39;t detect changes
  in ``manage.py`` file when using ``StatReloader`` (:ticket:`30479`).

* Fixed crash of :class:`~django.contrib.postgres.aggregates.ArrayAgg` and
  :class:`~django.contrib.postgres.aggregates.StringAgg` with ``ordering``
  argument when used in a ``Subquery`` (:ticket:`30315`).

* Fixed a regression in Django 2.2 that caused a crash of auto-reloader when
  an exception with custom signature is raised (:ticket:`30516`).

* Fixed a regression in Django 2.2.1 where auto-reloader unnecessarily reloads
  translation files multiple times when using ``StatReloader``
  (:ticket:`30523`).


==========================
   ```
   
  
  
   ### 2.2.1
   ```
   ==========================

*May 1, 2019*

Django 2.2.1 fixes several bugs in 2.2.

Bugfixes
========

* Fixed a regression in Django 2.1 that caused the incorrect quoting of
  database user password when using :djadmin:`dbshell` on Oracle
  (:ticket:`30307`).

* Added compatibility for ``psycopg2`` 2.8 (:ticket:`30331`).

* Fixed a regression in Django 2.2 that caused a crash when loading the
  template for the technical 500 debug page (:ticket:`30324`).

* Fixed crash of ``ordering`` argument in
  :class:`~django.contrib.postgres.aggregates.ArrayAgg` and
  :class:`~django.contrib.postgres.aggregates.StringAgg` when it contains an
  expression with params (:ticket:`30332`).

* Fixed a regression in Django 2.2 that caused a single instance fast-delete
  to not set the primary key to ``None`` (:ticket:`30330`).

* Prevented :djadmin:`makemigrations` from generating infinite migrations for
  check constraints and partial indexes when ``condition`` contains
  a :class:`~python:range` object (:ticket:`30350`).

* Reverted an optimization in Django 2.2 (:ticket:`29725`) that caused the
  inconsistent behavior of ``count()`` and ``exists()`` on a reverse
  many-to-many relationship with a custom manager (:ticket:`30325`).

* Fixed a regression in Django 2.2 where
  :class:`~django.core.paginator.Paginator` crashes if ``object_list`` is
  a queryset ordered or aggregated over a nested ``JSONField`` key transform
  (:ticket:`30335`).

* Fixed a regression in Django 2.2 where ``IntegerField`` validation of
  database limits crashes if ``limit_value`` attribute in a custom validator is
  callable (:ticket:`30328`).

* Fixed a regression in Django 2.2 where
  :class:`~django.contrib.postgres.search.SearchVector` generates SQL that is
  not indexable (:ticket:`30385`).

* Fixed a regression in Django 2.2 that caused an exception to be raised when
  a custom error handler could not be imported (:ticket:`30318`).

* Relaxed the system check added in Django 2.2 for the admin app&#39;s dependencies
  to reallow use of
  :class:`~django.contrib.sessions.middleware.SessionMiddleware` subclasses,
  rather than requiring :mod:`django.contrib.sessions` to be in
  :setting:`INSTALLED_APPS` (:ticket:`30312`).

* Increased the default timeout when using ``Watchman`` to 5 seconds to prevent
  falling back to ``StatReloader`` on larger projects and made it customizable
  via the ``DJANGO_WATCHMAN_TIMEOUT`` environment variable (:ticket:`30361`).

* Fixed a regression in Django 2.2 that caused a crash when migrating
  permissions for proxy models if the target permissions already existed. For
  example, when a permission had been created manually or a model had been
  migrated from concrete to proxy (:ticket:`30351`).

* Fixed a regression in Django 2.2 that caused a crash of :djadmin:`runserver`
  when URLConf modules raised exceptions (:ticket:`30323`).

* Fixed a regression in Django 2.2 where changes were not reliably detected by
  auto-reloader when using ``StatReloader`` (:ticket:`30323`).

* Fixed a migration crash on Oracle and PostgreSQL when adding a check
  constraint with a ``contains``, ``startswith``, or ``endswith`` lookup (or
  their case-insensitive variant) (:ticket:`30408`).

* Fixed a migration crash on Oracle and SQLite when adding a check constraint
  with ``condition`` contains ``|`` (``OR``) operator (:ticket:`30412`).


========================
   ```
   
  
  
   ### 2.2
   ```
   ========================

*April 1, 2019*

Welcome to Django 2.2!

These release notes cover the :ref:`new features &lt;whats-new-2.2&gt;`, as well as
some :ref:`backwards incompatible changes &lt;backwards-incompatible-2.2&gt;` you&#39;ll
want to be aware of when upgrading from Django 2.1 or earlier. We&#39;ve
:ref:`begun the deprecation process for some features
&lt;deprecated-features-2.2&gt;`.

See the :doc:`/howto/upgrade-version` guide if you&#39;re updating an existing
project.

Django 2.2 is designated as a :term:`long-term support release`. It will
receive security updates for at least three years after its release. Support
for the previous LTS, Django 1.11, will end in April 2020.

Python compatibility
====================

Django 2.2 supports Python 3.5, 3.6, and 3.7. We **highly recommend** and only
officially support the latest release of each series.

.. _whats-new-2.2:

What&#39;s new in Django 2.2
========================

Constraints
-----------

The new :class:`~django.db.models.CheckConstraint` and
:class:`~django.db.models.UniqueConstraint` classes enable adding custom
database constraints. Constraints are added to models using the
:attr:`Meta.constraints &lt;django.db.models.Options.constraints&gt;` option.

Minor features
--------------

:mod:`django.contrib.admin`
~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Added a CSS class to the column headers of
  :class:`~django.contrib.admin.TabularInline`.

:mod:`django.contrib.auth`
~~~~~~~~~~~~~~~~~~~~~~~~~~

* The ``HttpRequest`` is now passed as the first positional argument to
  :meth:`.RemoteUserBackend.configure_user`, if it accepts it.

:mod:`django.contrib.gis`
~~~~~~~~~~~~~~~~~~~~~~~~~

* Added Oracle support for the
  :class:`~django.contrib.gis.db.models.functions.Envelope` function.

* Added SpatiaLite support for the :lookup:`coveredby` and :lookup:`covers`
  lookups.

:mod:`django.contrib.postgres`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* The new ``ordering`` argument for
  :class:`~django.contrib.postgres.aggregates.ArrayAgg` and
  :class:`~django.contrib.postgres.aggregates.StringAgg` determines the
  ordering of the aggregated elements.

* The new :class:`~django.contrib.postgres.indexes.BTreeIndex`,
  :class:`~django.contrib.postgres.indexes.HashIndex` and
  :class:`~django.contrib.postgres.indexes.SpGistIndex` classes allow
  creating ``B-Tree``, ``hash``, and ``SP-GiST`` indexes in the database.

* :class:`~django.contrib.postgres.indexes.BrinIndex` now has the
  ``autosummarize`` parameter.

* The new ``search_type`` parameter of
  :class:`~django.contrib.postgres.search.SearchQuery` allows searching for
  a phrase or raw expression.

:mod:`django.contrib.staticfiles`
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

* Added path matching to the :option:`collectstatic --ignore` option so that
  patterns like ``/vendor/*.js`` can be used.

Database backends
~~~~~~~~~~~~~~~~~

* Added result streaming for :meth:`.QuerySet.iterator` on SQLite.

Generic Views
~~~~~~~~~~~~~

* The new :meth:`View.setup &lt;django.views.generic.base.View.setup&gt;` hook
  initializes view attributes before calling
  :meth:`~django.views.generic.base.View.dispatch`. It allows mixins to setup
  instance attributes for reuse in child classes.

Internationalization
~~~~~~~~~~~~~~~~~~~~

* Added support and translations for the Armenian language.

Management Commands
~~~~~~~~~~~~~~~~~~~

* The new :option:`--force-color` option forces colorization of the command
  output.

* :djadmin:`inspectdb` now creates models for foreign tables on PostgreSQL.

* :option:`inspectdb --include-views` now creates models for materialized views
  on Oracle and PostgreSQL.

* The new :option:`inspectdb --include-partitions` option allows creating
  models for partition tables on PostgreSQL. In older versions, models are
  created child tables instead the parent.

* :djadmin:`inspectdb` now introspects :class:`~django.db.models.DurationField`
  for Oracle and PostgreSQL, and :class:`~django.db.models.AutoField` for
  SQLite.

* On Oracle, :djadmin:`dbshell` is wrapped with ``rlwrap``, if available.
  ``rlwrap`` provides a command history and editing of keyboard input.

* The new :option:`makemigrations --no-header` option avoids writing header
  comments in generated migration file(s). This option is also available for
  :djadmin:`squashmigrations`.

* :djadmin:`runserver` can now use `Watchman
  &lt;https://facebook.github.io/watchman/&gt;`_ to improve the performance of
  watching a large number of files for changes.

Migrations
~~~~~~~~~~

* The new :option:`migrate --plan` option prints the list of migration
  operations that will be performed.

* ``NoneType`` can now be serialized in migrations.

* You can now :ref:`register custom serializers &lt;custom-migration-serializers&gt;`
  for migrations.

Models
~~~~~~

* Added support for PostgreSQL operator classes (:attr:`.Index.opclasses`).

* Added support for partial indexes (:attr:`.Index.condition`).

* Added the :class:`~django.db.models.functions.NullIf` and
  :class:`~django.db.models.functions.Reverse` database functions, as well as
  many :ref:`math database functions &lt;math-functions&gt;`.

* Setting the new ``ignore_conflicts`` parameter of
  :meth:`.QuerySet.bulk_create` to ``True`` tells the database to ignore
  failure to insert rows that fail uniqueness constraints or other checks.

* The new :class:`~django.db.models.functions.ExtractIsoYear` function extracts
  ISO-8601 week-numbering years from :class:`~django.db.models.DateField` and
  :class:`~django.db.models.DateTimeField`, and the new :lookup:`iso_year`
  lookup allows querying by an ISO-8601 week-numbering year.

* The new :meth:`.QuerySet.bulk_update` method allows efficiently updating
  specific fields on multiple model instances.

* Django no longer always starts a transaction when a single query is being
  performed, such as ``Model.save()``, ``QuerySet.update()``, and
  ``Model.delete()``. This improves the performance of autocommit by reducing
  the number of database round trips.

* Added SQLite support for the :class:`~django.db.models.StdDev` and
  :class:`~django.db.models.Variance` functions.

* The handling of ``DISTINCT`` aggregation is added to the
  :class:`~django.db.models.Aggregate` class. Adding :attr:`allow_distinct =
  True &lt;django.db.models.Aggregate.allow_distinct&gt;` as a class attribute on
  ``Aggregate`` subclasses allows a ``distinct`` keyword argument to be
  specified on initialization to ensure that the aggregate function is only
  called for each distinct value of ``expressions``.

* The :meth:`.RelatedManager.add`, :meth:`~.RelatedManager.create`,
  :meth:`~.RelatedManager.remove`,  :meth:`~.RelatedManager.set`,
  ``get_or_create()``, and ``update_or_create()`` methods are now allowed on
  many-to-many relationships with intermediate models. The new
  ``through_defaults`` argument is used to specify values for new intermediate
  model instance(s).

Requests and Responses
~~~~~~~~~~~~~~~~~~~~~~

* Added :attr:`.HttpRequest.headers` to allow simple access to a request&#39;s
  headers.

Serialization
~~~~~~~~~~~~~

* You can now deserialize data using natural keys containing :ref:`forward
  references &lt;natural-keys-and-forward-references&gt;` by passing
  ``handle_forward_references=True`` to ``serializers.deserialize()``.
  Additionally, :djadmin:`loaddata` handles forward references automatically.

Tests
~~~~~

* The new :meth:`.SimpleTestCase.assertURLEqual` assertion checks for a given
  URL, ignoring the ordering of the query string.
  :meth:`~.SimpleTestCase.assertRedirects` uses the new assertion.

* The test :class:`~.django.test.Client` now supports automatic JSON
  serialization of list and tuple ``data`` when
  ``content_type=&#39;application/json&#39;``.

* The new :setting:`ORACLE_MANAGED_FILES &lt;TEST_ORACLE_MANAGED_FILES&gt;` test
  database setting allows using Oracle Managed Files (OMF) tablespaces.

* Deferrable database constraints are now checked at the end of each
  :class:`~django.test.TestCase` test on SQLite 3.20+, just like on other
  backends that support deferrable constraints. These checks aren&#39;t implemented
  for older versions of SQLite because they would require expensive table
  introspection there.

* :class:`~django.test.runner.DiscoverRunner` now skips the setup of databases
  not :ref:`referenced by tests&lt;testing-multi-db&gt;`.

URLs
~~~~

* The new :attr:`.ResolverMatch.route` attribute stores the route of the
  matching URL pattern.

Validators
~~~~~~~~~~

* :class:`.MaxValueValidator`, :class:`.MinValueValidator`,
  :class:`.MinLengthValidator`, and :class:`.MaxLengthValidator` now accept
  a callable ``limit_value``.

.. _backwards-incompatible-2.2:

Backwards incompatible changes in 2.2
=====================================

Database backend API
--------------------

This section describes changes that may be needed in third-party database
backends.

* Third-party database backends must implement support for table check
  constraints or set ``DatabaseFeatures.supports_table_check_constraints`` to
  ``False``.

* Third party database backends must implement support for ignoring
  constraints or uniqueness errors while inserting or set
  ``DatabaseFeatures.supports_ignore_conflicts`` to ``False``.

* Third party database backends must implement introspection for
  ``DurationField`` or set ``DatabaseFeatures.can_introspect_duration_field``
  to ``False``.

* ``DatabaseFeatures.uses_savepoints`` now defaults to ``True``.

* Third party database backends must implement support for partial indexes or
  set ``DatabaseFeatures.supports_partial_indexes`` to ``False``.

* ``DatabaseIntrospection.table_name_converter()`` and
  ``column_name_converter()`` are removed. Third party database backends may
  need to instead implement ``DatabaseIntrospection.identifier_converter()``.
  In that case, the constraint names that
  ``DatabaseIntrospection.get_constraints()`` returns must be normalized by
  ``identifier_converter()``.

* SQL generation for indexes is moved from :class:`~django.db.models.Index` to
  ``SchemaEditor`` and these ``SchemaEditor`` methods are added:

  * ``_create_primary_key_sql()`` and ``_delete_primary_key_sql()``
  * ``_delete_index_sql()`` (to pair with ``_create_index_sql()``)
  * ``_delete_unique_sql`` (to pair with ``_create_unique_sql()``)
  * ``_delete_fk_sql()`` (to pair with ``_create_fk_sql()``)
  * ``_create_check_sql()`` and ``_delete_check_sql()``

* The third argument of ``DatabaseWrapper.__init__()``,
  ``allow_thread_sharing``, is removed.

Admin actions are no longer collected from base ``ModelAdmin`` classes
----------------------------------------------------------------------

For example, in older versions of Django::

    from django.contrib import admin

    class BaseAdmin(admin.ModelAdmin):
        actions = [&#39;a&#39;]

    class SubAdmin(BaseAdmin):
        actions = [&#39;b&#39;]

``SubAdmin`` would have actions ``&#39;a&#39;`` and ``&#39;b&#39;``.

Now ``actions`` follows standard Python inheritance. To get the same result as
before::

    class SubAdmin(BaseAdmin):
        actions = BaseAdmin.actions + [&#39;b&#39;]

:mod:`django.contrib.gis`
-------------------------

* Support for GDAL 1.9 and 1.10 is dropped.

``TransactionTestCase`` serialized data loading
-----------------------------------------------

Initial data migrations are now loaded in
:class:`~django.test.TransactionTestCase` at the end of the test, after the
database flush. In older versions, this data was loaded at the beginning of the
test, but this prevents the :option:`test --keepdb` option from working
properly (the database was empty at the end of the whole test suite). This
change shouldn&#39;t have an impact on your tests unless you&#39;ve customized
:class:`~django.test.TransactionTestCase`&#39;s internals.

``sqlparse`` is required dependency
-----------------------------------

To simplify a few parts of Django&#39;s database handling, `sqlparse
&lt;https://pypi.org/project/sqlparse/&gt;`_ is now a required dependency. It&#39;s
automatically installed along with Django.

``cached_property`` aliases
---------------------------

In usage like::

    from django.utils.functional import cached_property

    class A:

        cached_property
        def base(self):
            return ...

        alias = base

``alias`` is not cached. Where the problem can be detected (Python 3.6 and
later), such usage now raises ``TypeError: Cannot assign the same
cached_property to two different names (&#39;base&#39; and &#39;alias&#39;).``

Use this instead::

    import operator

    class A:

        ...

        alias = property(operator.attrgetter(&#39;base&#39;))

Permissions for proxy models
----------------------------

:ref:`Permissions for proxy models &lt;proxy-models-permissions-topic&gt;` are now
created using the content type of the proxy model rather than the content type
of the concrete model. A migration will update existing permissions when you
run :djadmin:`migrate`.

In the admin, the change is transparent for proxy models having the same
``app_label`` as their concrete model. However, in older versions, users with
permissions for a proxy model with a *different* ``app_label`` than its
concrete model couldn&#39;t access the model in the admin. That&#39;s now fixed, but
you might want to audit the permissions assignments for such proxy models
(``[add|view|change|delete]_myproxy``) prior to upgrading to ensure the new
access is appropriate.

Finally, proxy model permission strings must be updated to use their own
``app_label``. For example, for ``app.MyProxyModel`` inheriting from
``other_app.ConcreteModel``, update
``user.has_perm(&#39;other_app.add_myproxymodel&#39;)`` to
``user.has_perm(&#39;app.add_myproxymodel&#39;)``.

Merging of form ``Media`` assets
--------------------------------

Form ``Media`` assets are now merged using a topological sort algorithm, as the
old pairwise merging algorithm is insufficient for some cases. CSS and
JavaScript files which don&#39;t include their dependencies may now be sorted
incorrectly (where the old algorithm produced results correctly by
coincidence).

Audit all ``Media`` classes for any missing dependencies. For example,
widgets depending on ``django.jQuery`` must specify
``js=[&#39;admin/js/jquery.init.js&#39;, ...]`` when :ref:`declaring form media assets
&lt;assets-as-a-static-definition&gt;`.

Miscellaneous
-------------

* To improve readability, the ``UUIDField`` form field now displays values with
  dashes, e.g. ``550e8400-e29b-41d4-a716-446655440000`` instead of
  ``550e8400e29b41d4a716446655440000``.

* On SQLite, ``PositiveIntegerField`` and ``PositiveSmallIntegerField`` now
  include a check constraint to prevent negative values in the database. If you
  have existing invalid data and run a migration that recreates a table, you&#39;ll
  see ``CHECK constraint failed``.

* For consistency with WSGI servers, the test client now sets the
  ``Content-Length`` header to a string rather than an integer.

* The return value of :func:`django.utils.text.slugify` is no longer marked as
  HTML safe.

* The default truncation character used by the :tfilter:`urlizetrunc`,
  :tfilter:`truncatechars`, :tfilter:`truncatechars_html`,
  :tfilter:`truncatewords`, and :tfilter:`truncatewords_html` template filters
  is now the real ellipsis character (``â€¦``) instead of 3 dots. You may have to
  adapt some test output comparisons.

* Support for bytestring paths in the template filesystem loader is removed.

* :func:`django.utils.http.urlsafe_base64_encode` now returns a string instead
  of a bytestring, and :func:`django.utils.http.urlsafe_base64_decode` may no
  longer be passed a bytestring.

* Support for ``cx_Oracle`` &lt; 6.0 is removed.

* The minimum supported version of ``mysqlclient`` is increased from 1.3.7 to
  1.3.13.

* The minimum supported version of SQLite is increased from 3.7.15 to 3.8.3.

* In an attempt to provide more semantic query data, ``NullBooleanSelect`` now
  renders ``&lt;option&gt;`` values of ``unknown``, ``true``, and ``false`` instead
  of ``1``, ``2``, and ``3``. For backwards compatibility, the old values are
  still accepted as data.

* :attr:`Group.name &lt;django.contrib.auth.models.Group.name&gt;` ``max_length``
  is increased from 80 to 150 characters.

* Tests that violate deferrable database constraints now error when run on
  SQLite 3.20+, just like on other backends that support such constraints.

* To catch usage mistakes, the test :class:`~django.test.Client` and
  :func:`django.utils.http.urlencode` now raise ``TypeError`` if ``None`` is
  passed as a value to encode because ``None`` can&#39;t be encoded in GET and POST
  data. Either pass an empty string or omit the value.

* The :djadmin:`ping_google` management command now defaults to ``https``
  instead of ``http`` for the sitemap&#39;s URL. If your site uses http, use the
  new :option:`ping_google --sitemap-uses-http` option. If you use the
  :func:`~django.contrib.sitemaps.ping_google` function, set the new
  ``sitemap_uses_https`` argument to ``False``.

* :djadmin:`runserver` no longer supports `pyinotify` (replaced by Watchman).

* The :class:`~django.db.models.Avg`, :class:`~django.db.models.StdDev`, and
  :class:`~django.db.models.Variance` aggregate functions now return a
  ``Decimal`` instead of a ``float`` when the input is ``Decimal``.

* Tests will fail on SQLite if apps without migrations have relations to apps
  with migrations. This has been a documented restriction since migrations were
  added in Django 1.7, but it fails more reliably now. You&#39;ll see tests failing
  with errors like ``no such table: &lt;app_label&gt;_&lt;model&gt;``. This was observed
  with several third-party apps that had models in tests without migrations.
  You must add migrations for such models.

.. _deprecated-features-2.2:

Features deprecated in 2.2
==========================

Model ``Meta.ordering`` will no longer affect ``GROUP BY`` queries
------------------------------------------------------------------

A model&#39;s ``Meta.ordering`` affecting ``GROUP BY`` queries (such as
``.annotate().values()``) is a common source of confusion. Such queries now
issue a deprecation warning with the advice to add an ``order_by()`` to retain
the current query. ``Meta.ordering`` will be ignored in such queries starting
in Django 3.1.

Miscellaneous
-------------

* ``django.utils.timezone.FixedOffset`` is deprecated in favor of
  :class:`datetime.timezone`.

* The undocumented ``QuerySetPaginator`` alias of
  ``django.core.paginator.Paginator`` is deprecated.

* The ``FloatRangeField`` model and form fields in ``django.contrib.postgres``
  are deprecated in favor of a new name, ``DecimalRangeField``, to match the
  underlying ``numrange`` data type used in the database.

* The ``FILE_CHARSET`` setting is deprecated. Starting with Django 3.1, files
  read from disk must be UTF-8 encoded.

* ``django.contrib.staticfiles.storage.CachedStaticFilesStorage`` is
  deprecated due to the intractable problems that it has. Use
  :class:`.ManifestStaticFilesStorage` or a third-party cloud storage instead.

* :meth:`.RemoteUserBackend.configure_user` is now passed ``request`` as the
  first positional argument, if it accepts it. Support for overrides that don&#39;t
  accept it will be removed in Django 3.1.

* The ``SimpleTestCase.allow_database_queries``,
  ``TransactionTestCase.multi_db``, and ``TestCase.multi_db``
  attributes are deprecated in favor of :attr:`.SimpleTestCase.databases`,
  :attr:`.TransactionTestCase.databases`, and :attr:`.TestCase.databases`.
  These new attributes allow databases dependencies to be declared in order to
  prevent unexpected queries against non-default databases to leak state
  between tests. The previous behavior of ``allow_database_queries=True`` and
  ``multi_db=True`` can be achieved by setting ``databases=&#39;__all__&#39;``.


===========================
   ```
   
  
  
   ### 2.1.13
   ```
   ===========================

*October 1, 2019*

Django 2.1.13 fixes a regression in 2.1.11.

Bugfixes
========

* Fixed a crash when filtering with a ``Subquery()`` annotation of a queryset
  containing :class:`~django.contrib.postgres.fields.JSONField` or
  :class:`~django.contrib.postgres.fields.HStoreField` (:ticket:`30769`).


===========================
   ```
   
  
  
   ### 2.1.12
   ```
   ===========================

*September 2, 2019*

Django 2.1.12 fixes a regression in 2.1.11.

Bugfixes
========

* Fixed crash of ``KeyTransform()`` for
  :class:`~django.contrib.postgres.fields.JSONField` and
  :class:`~django.contrib.postgres.fields.HStoreField` when using on
  expressions with params (:ticket:`30672`).


===========================
   ```
   
  
  
   ### 2.1.11
   ```
   ===========================

*August 1, 2019*

Django 2.1.11 fixes security issues in 2.1.10.

CVE-2019-14232: Denial-of-service possibility in ``django.utils.text.Truncator``
================================================================================

If ``django.utils.text.Truncator``&#39;s ``chars()`` and ``words()`` methods
were passed the ``html=True`` argument, they were extremely slow to evaluate
certain inputs due to a catastrophic backtracking vulnerability in a regular
expression. The ``chars()`` and ``words()`` methods are used to implement the
:tfilter:`truncatechars_html` and :tfilter:`truncatewords_html` template
filters, which were thus vulnerable.

The regular expressions used by ``Truncator`` have been simplified in order to
avoid potential backtracking issues. As a consequence, trailing punctuation may
now at times be included in the truncated output.

CVE-2019-14233: Denial-of-service possibility in ``strip_tags()``
=================================================================

Due to the behavior of the underlying ``HTMLParser``,
:func:`django.utils.html.strip_tags` would be extremely slow to evaluate
certain inputs containing large sequences of nested incomplete HTML entities.
The ``strip_tags()`` method is used to implement the corresponding
:tfilter:`striptags` template filter, which was thus also vulnerable.

``strip_tags()`` now avoids recursive calls to ``HTMLParser`` when progress
removing tags, but necessarily incomplete HTML entities, stops being made.

Remember that absolutely NO guarantee is provided about the results of
``strip_tags()`` being HTML safe. So NEVER mark safe the result of a
``strip_tags()`` call without escaping it first, for example with
:func:`django.utils.html.escape`.

CVE-2019-14234: SQL injection possibility in key and index lookups for ``JSONField``/``HStoreField``
====================================================================================================

:lookup:`Key and index lookups &lt;jsonfield.key&gt;` for
:class:`~django.contrib.postgres.fields.JSONField` and :lookup:`key lookups
&lt;hstorefield.key&gt;` for :class:`~django.contrib.postgres.fields.HStoreField`
were subject to SQL injection, using a suitably crafted dictionary, with
dictionary expansion, as the ``**kwargs`` passed to ``QuerySet.filter()``.

CVE-2019-14235: Potential memory exhaustion in ``django.utils.encoding.uri_to_iri()``
=====================================================================================

If passed certain inputs, :func:`django.utils.encoding.uri_to_iri` could lead
to significant memory usage due to excessive recursion when re-percent-encoding
invalid UTF-8 octet sequences.

``uri_to_iri()`` now avoids recursion when re-percent-encoding invalid UTF-8
octet sequences.


===========================
   ```
   
  
  
   ### 2.1.10
   ```
   ===========================

*July 1, 2019*

Django 2.1.10 fixes a security issue in 2.1.9.

CVE-2019-12781: Incorrect HTTP detection with reverse-proxy connecting via HTTPS
--------------------------------------------------------------------------------

When deployed behind a reverse-proxy connecting to Django via HTTPS,
:attr:`django.http.HttpRequest.scheme` would incorrectly detect client
requests made via HTTP as using HTTPS. This entails incorrect results for
:meth:`~django.http.HttpRequest.is_secure`, and
:meth:`~django.http.HttpRequest.build_absolute_uri`, and that HTTP
requests would not be redirected to HTTPS in accordance with
:setting:`SECURE_SSL_REDIRECT`.

``HttpRequest.scheme`` now respects :setting:`SECURE_PROXY_SSL_HEADER`, if it
is configured, and the appropriate header is set on the request, for both HTTP
and HTTPS requests.

If you deploy Django behind a reverse-proxy that forwards HTTP requests, and
that connects to Django via HTTPS, be sure to verify that your application
correctly handles code paths relying on ``scheme``, ``is_secure()``,
``build_absolute_uri()``, and ``SECURE_SSL_REDIRECT``.


============================
   ```
   
  
  
   ### 2.1.9
   ```
   ============================

*June 3, 2019*

Django 2.1.9 fixes security issues in 2.1.8.

CVE-2019-12308: AdminURLFieldWidget XSS
---------------------------------------

The clickable &quot;Current URL&quot; link generated by ``AdminURLFieldWidget`` displayed
the provided value without validating it as a safe URL. Thus, an unvalidated
value stored in the database, or a value provided as a URL query parameter
payload, could result in an clickable JavaScript link.

``AdminURLFieldWidget`` now validates the provided value using
:class:`~django.core.validators.URLValidator` before displaying the clickable
link. You may customize the validator by passing a ``validator_class`` kwarg to
``AdminURLFieldWidget.__init__()``, e.g. when using
:attr:`~django.contrib.admin.ModelAdmin.formfield_overrides`.

Patched bundled jQuery for CVE-2019-11358: Prototype pollution
--------------------------------------------------------------

jQuery before 3.4.0, mishandles ``jQuery.extend(true, {}, ...)`` because of
``Object.prototype`` pollution. If an unsanitized source object contained an
enumerable ``__proto__`` property, it could extend the native
``Object.prototype``.

The bundled version of jQuery used by the Django admin has been patched to
allow for the ``select2`` library&#39;s use of ``jQuery.extend()``.


==========================
   ```
   
  
  
   ### 2.1.8
   ```
   ==========================

*April 1, 2019*

Django 2.1.8 fixes a bug in 2.1.7.

Bugfixes
========

* Prevented admin inlines for a ``ManyToManyField``\&#39;s implicit through model
  from being editable if the user only has the view permission
  (:ticket:`30289`).


==========================
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django
  - Changelog: https://pyup.io/changelogs/django/
  - Homepage: https://www.djangoproject.com/
</details>





### Update [celery](https://pypi.org/project/celery) from **4.2.1** to **4.3.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 4.3.0
   ```
   =====
:release-date: 2019-01-14 7:00 P.M UTC+2:00
:release-by: Omer Katz

- Added Python 3.7 support.

  Contributed by **Omer Katz**, **Mads Jensen** and **Asif Saif Uddin**

- Avoid caching queues which are declared with a TTL.

  Queues that are declared with a TTL are now also be excluded from the
  in-memory cache in case they expire between publishes on the same channel.

  Contributed by **Matt Yule-Bennett**

- Added an index to the Message table for the SQLAlchemy transport.

  The index allows to effectively sorting the table by the message&#39;s timestamp.

  .. note::

    We do not provide migrations for this model yet.
    You will need to add the index manually if you are already
    using the SQLAlchemy transport.

    The syntax may vary between databases.
    Please refer to your database&#39;s documentation for instructions.

  Contributed by **Mikhail Shcherbinin**

- Added a timeout that limits the amount of time we retry
  to reconnect to a transport.

  Contributed by **:github_user:`tothegump`**

- :class:``celery.asynchronous.hub.Hub`` is now reentrant.

  This allows calling :func:`celery.bin.celery.main` to revive a worker in
  the same process after rescuing from shutdown (:class:``SystemExit``).

  Contributed by **Alan Justino da Silva**

- Queues now accept string exchange names as arguments as documented.

  Tests were added to avoid further regressions.

  Contributed by **Antonio Gutierrez**

- Specifying names for broadcast queues now work as expected.

  Previously, named broadcast queues did not create multiple queues per worker.
  They incorrectly declared the named queue which resulted in one queue per
  fanout exchange, thus missing the entire point of a fanout exchange.
  The behavior is now matched to unnamed broadcast queues.

  Contributed by **Kuan Hsuan-Tso**

- When initializing the Redis transport in conjunction with gevent
  restore all unacknowledged messages to queue.

  Contributed by **Gal Cohen**

- Allow :class:``kombu.simple.SimpleQueue`` to pass queue_arguments to Queue object.

  This allows :class:``kombu.simple.SimpleQueue`` to connect to RabbitMQ queues with
  custom arguments like &#39;x-queue-mode&#39;=&#39;lazy&#39;.

  Contributed by **C Blue Neeh**

- Add support for &#39;rediss&#39; scheme for secure Redis connections.

  The rediss scheme defaults to the least secure form, as
  there is no suitable default location for `ca_certs`. The recommendation
  would still be to follow the documentation and specify `broker_use_ssl` if
  coming from celery.

  Contributed by **Daniel Blair**

- Added the Azure Storage Queues transport.

  The transport is implemented on top of Azure Storage
  Queues. This offers a simple but scalable and low-cost PaaS
  transport for Celery users in Azure. The transport is intended to be
  used in conjunction with the Azure Block Blob Storage backend.

  Contributed by **Clemens Wolff**, **:github_user:`ankurokok`**,
  **Denis Kisselev**, **Evandro de Paula**, **Martin Peck**
  and **:github_user:`michaelperel`**

- Added the Azure Service Bus transport.

  The transport is implemented on top of Azure Service Bus and
  offers PaaS support for more demanding Celery workloads in Azure.
  The transport is intended to be used in conjunction with the Azure
  CosmosDB backend.

  Contributed by **Clemens Wolff**, **:github_user:`ankurokok`**,
  **Denis Kisselev**, **Evandro de Paula**, **Martin Peck**
  and **:github_user:`michaelperel`**

- Drop remaining mentions of Jython support completely.

  Contributed by **Asif Saif Uddin** and **Mads Jensen**

- When publishing messages to the Pidbox, retry if an error occurs.

  Contributed by **Asif Saif Uddin**

- Fix infinite loop in :method:``kombu.asynchronous.hub.Hub.create_loop``.

  Previous attempt to fix the problem (PR kombu/760) did not consider
  an edge case. It is now fixed.

  Contributed by **Vsevolod Strukchinsky**

- Worker shutdown no longer duplicates messages when using the SQS broker.

  Contributed by **Mintu Kumar Sah**

- When using the SQS broker, prefer boto&#39;s default region before our hardcoded default.

  Contributed by **Victor Villas**

- Fixed closing of shared redis sockets which previously caused Celery to hang.

  Contributed by **Alexey Popravka**

- the `Pyro`_ transport (:mod:`kombu.transport.pyro`) now works with
  recent Pyro versions. Also added a Pyro Kombu Broker that this transport
  needs for its queues.

  Contributed by **Irmen de Jong**

- Handle non-base64-encoded SQS messages.

  Fix contributed by **Tim Li**, **Asif Saif Uddin** and **Omer Katz**.

- Move the handling of Sentinel failures to the redis library itself.

  Previously, Redis Sentinel worked only if the first node&#39;s sentinel
  service in the URI was up. A server outage would have caused downtime.

  Contributed by **Brian Price**

- When using Celery and the pickle serializer with binary data as part of the
  payload, `UnicodeDecodeError` would be raised as the content was not utf-8.
  We now replace on errors.

  Contributed by **Jian Dai**

- Allow setting :method:``boto3.sqs.create_queue`` Attributes via transport_options.

  Contributed by **Hunter Fernandes**

- Fixed infinite loop when entity.channel is replaced by revive() on connection
  drop.

  Contributed by **Tzach Yarimi**

- Added optional support for Brotli compression.

  Contributed by **Omer Katz**

- When using the SQS broker, FIFO queues with names that ended with the &#39;f&#39; letter
  were incorrectly parsed. This is now fixed.

  Contributed by **Alex Vishnya** and **Ilya Konstantinov**

-  Added optional support for LZMA compression.

  Contributed by **Omer Katz**

- Added optional support for ZStandard compression.

  Contributed by **Omer Katz**

- Require py-amqp 2.4.0 as the minimum version.

  Contributed by **Asif Saif Uddin**

- The value of DISABLE_TRACEBACKS environment variable is now respected on debug, info
  and warning logger level.

  Contributed by **Ludovic Rivallain**

- As documented in kombu/741 and eventlet/eventlet415
  there is a mismatch between the monkey-patched eventlet queue
  and the interface Kombu is expecting.
  This causes Celery to crash when the `broker_pool_limit`
  configuration option is set
  eventlet/eventlet415 suggests that the mutex can be a noop.
  This is now the case.

  Contributed by **Josh Morrow**

- Codebase improvements and fixes by:

  - **Omer Katz**
  - **Mads Jensen**
  - **Asif Saif Uddin**
  - **Lars Rinn**

- Documentation improvements by:

  - **Jon Dufresne**
  - **Fay Cheng**
  - **Asif Saif Uddin**
  - **Kyle Verhoog**
  - **Noah Hall**
  - **:github_user:`brabiega`**

.. _version-4.2.2-post1:
   ```
   
  
  
   ### 4.2.2post1
   ```
   ===========
:release-date: 2019-01-01 04:00 P.M IST
:release-by: Omer Katz

.. note::

  The previous release contained code from master.
  It is now deleted from PyPi.
  Please use this release instead.

- No changes since previous release.

.. _version-4.2.2:
   ```
   
  
  
   ### 4.2.2
   ```
   =====
:release-date: 2018-12-06 04:30 P.M IST
:release-by: Omer Katz

- Support both Redis client version 2.x and version 3.x.

  Contributed by **Ash Berlin-Taylor** and **Jeppe Fihl-Pearson**

.. _version-4.2.1:
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/celery
  - Changelog: https://pyup.io/changelogs/celery/
  - Homepage: http://celeryproject.org
  - Docs: https://pythonhosted.org/celery/
</details>





### Update [django-cors-middleware](https://pypi.org/project/django-cors-middleware) from **1.3.1** to **1.4.0**.


<details>
  <summary>Changelog</summary>
  
  
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django-cors-middleware
  - Changelog: https://pyup.io/changelogs/django-cors-middleware/
  - Repo: https://github.com/zestedesavoir/django-cors-middleware
</details>





### Update [django-debug-toolbar](https://pypi.org/project/django-debug-toolbar) from **1.11** to **2.0**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.0
   ```
   ----------------

* Updated ``StaticFilesPanel`` to be compatible with Django 3.0.
* The ``ProfilingPanel`` is now enabled but inactive by default.
* Fixed toggling of table rows in the profiling panel UI.
* The ``ProfilingPanel`` no longer skips remaining panels or middlewares.
* Improved the installation documentation.
* Fixed a possible crash in the template panel.
* Added support for psycopg2 ``Composed`` objects.
* Changed the Jinja2 tests to use Django&#39;s own Jinja2 template backend.
* Added instrumentation to queries using server side cursors.
* Too many small improvements and cleanups to list them all.

**Backwards incompatible changes**
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
* Removed support for Python 2.
* Removed support for Django&#39;s deprecated ``MIDDLEWARE_CLASSES`` setting.
* Restructured ``Panel`` to execute more like the new-style Django MIDDLEWARE.
  The ``Panel.__init__()`` method is now passed ``get_response`` as the first
  positional argument. The ``Panel.process_request()`` method must now always
  return a response. Usually this is the response returned by
  ``get_response()`` but the panel may also return a different response as is
  the case in the ``RedirectsPanel``. Third party panels must adjust to this
  new architecture. ``Panel.process_response()`` and ``Panel.process_view()``
  have been removed as a result of this change.

The deprecated API, ``debug_toolbar.panels.DebugPanel``, has been removed.
Third party panels should use ``debug_toolbar.panels.Panel`` instead.

The following deprecated settings have been removed:

* ``HIDDEN_STACKTRACE_MODULES``
* ``HIDE_DJANGO_SQL``
* ``INTERCEPT_REDIRECTS``
* ``RESULTS_STORE_SIZE``
* ``ROOT_TAG_ATTRS``
* ``TAG``
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django-debug-toolbar
  - Changelog: https://pyup.io/changelogs/django-debug-toolbar/
  - Repo: https://github.com/jazzband/django-debug-toolbar
</details>





### Update [django-extensions](https://pypi.org/project/django-extensions) from **2.1.6** to **2.2.5**.


<details>
  <summary>Changelog</summary>
  
  
   ### 2.2.5
   ```
   -----

Changes:
 - Improvement: travis, add Python 3.8
 - Improvement: setup.py, update classifiers
   ```
   
  
  
   ### 2.2.4
   ```
   -----

Changes:
 - Improvement: RandomCharField, Support unique_together
 - Improvement: export_emails, add settings for overriding queryset fields, order_by and the full_name function
   ```
   
  
  
   ### 2.2.3
   ```
   -----

Changes:
  - Fix: admin widgets, fix import of static template tag (part 2)
   ```
   
  
  
   ### 2.2.2
   ```
   -----

Changes:
  - Fix: autoslugfield, find unique method overrideable
  - Fix: notes, do not replace dot in template dirs
  - Fix: admin widgets, fix import of static template tag
  - Improvement: print_user_for_session, use session backend
  - Improvement: sqlcreate, postgis support
  - Improvement: graph_models, permit combination of includes and excludes
  - Improvement: Adds missing GIS engine to DEFAULT_MYSQL_ENGINES
  - Improvement: sqldiff, use lowercase field names in MySQL
  - Improvement: sqldiff, mysql code could duplicate AUTO_INCREMENT and UNSIGNED statements
   ```
   
  
  
   ### 2.2.1
   ```
   -----

Changes:
  - Fix: tests, support for newer versions of pytest
  - Fix: tests, disable test with drf dependency for older python versions
   ```
   
  
  
   ### 2.2.0
   ```
   -----

Changes:
  - Fix: removing wrongly released text_tags template
  - Fix: graph_models, support for Python &lt;3.6
  - Improvement: ForeignKeySearchInput, wrap media files in static()
  - Improvement: UniqField, added tests
  - Improvement: dumpscript, fix orm_item_locator to use dateutil
  - Improvement: graph_models, added argument to change arrow_shape
   ```
   
  
  
   ### 2.1.9
   ```
   -----

Changes:
  - Fix: show_urls, fix for traceback on multi language sites
  - Improvement: reset_db, fix typo&#39;s in help test
   ```
   
  
  
   ### 2.1.8
   ```
   -----

Changes:
  - New: HexValidator, validate hex strings
  - Improvement: reset_db, move settings to `django_settings.settings` which makes it easier to override.
  - Improvement: AutoSlugField, extend support for custom slugify function
  - Fix: runprofileserver, fix autoreloader for newer Django versions
   ```
   
  
  
   ### 2.1.7
   ```
   -----

Changes:
  - New: test, many many more tests :-) thanks everybody
  - New: docs, many documentation updates
  - New: graph_model, add simple theming support and django2018 theme
  - Improvement: ModificationDateTimeField, make modificationfield name modifiable
  - Improvement: graph_model, option to not showrelations labels in the graph
  - Improvement: reset_db, allow to override list of backends for database engines
  - Improvement: reset_db, add psqlextra backend
  - Improvement: runserver_plus, idle support
  - Improvement: generate_secret_key, removed get_random_string in favour of get_random_secret_key
  - Improvement: update_permissions, add create-only and update-only flags
  - Improvement: update_permissions, update changed names of permission to match correct permission name
  - Improvement: syncdata, add --database option
  - Improvement: runscript, allow to override RUNSCRIPT_SCRIPT_DIR
  - Fix: create_command, fix mknod error on macos
  - Fix: runserver_plus, fix in resolving ssl certificate path
  - Fix: sqldiff, fix hstorefield
  - Deprecate: truncate_letters, use Django&#39;s truncatechars
  - Deprecate: passwd, use Django&#39;s changepassword
  - Deprecate: Keyczar encrypted fields, Keyczar is abandonned / deprecated
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/django-extensions
  - Changelog: https://pyup.io/changelogs/django-extensions/
  - Repo: http://github.com/django-extensions/django-extensions
</details>





### Update [djangorestframework](https://pypi.org/project/djangorestframework) from **3.9.1** to **3.10.3**.


*The bot wasn't able to find a changelog for this release. [Got an idea?](https://github.com/pyupio/changelogs/issues/new)*

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/djangorestframework
  - Changelog: https://pyup.io/changelogs/djangorestframework/
  - Homepage: https://www.django-rest-framework.org/
</details>





### Update [freezegun](https://pypi.org/project/freezegun) from **0.3.11** to **0.3.12**.


<details>
  <summary>Changelog</summary>
  
  
   ### 0.3.12
   ```
   ------

* Refactor classes to functions
* Ignore Selenium
* Move to pytest
* Conditionally patch time.clock
   ```
   
  
</details>


 

<details>
  <summary>Links</summary>
  
  - PyPI: https://pypi.org/project/freezegun
  - Changelog: https://pyup.io/changelogs/freezegun/
  - Repo: https://github.com/spulec/freezegun
</details>





### Update [newrelic](https://pypi.org/project/newrelic) from **4.14.0.115** to **5.2.1.129**.


<details>
  <summary>Changelog</summary>
  
  
   ### 5.2.1.129
   ```
   This release of the Python agent includes bug fixes.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Bug Fixes


Fix a crash when using a future based interfaces on Tornado&#39;s http client

Tornado&#39;s http client returns a future when fetch is called. Prior to this release, the agent caused a coroutine object to be returned rather than a future, causing a potential crash when application code assumed a future would be returned. A future will now be returned from http client fetch as expected.
Fix a crash when running a coroutine created in another transaction

When running a coroutine outside of the transaction which created it, the agent may have crashed if a separate transaction was active.
   ```
   
  
  
   ### 5.2.0.127
   ```
   This release of the Python agent includes a bug fix for tornado and support for recording deployment markers in the EU region as well as specifying a deploy timestamp.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Features


Added timestamp and EU region support for recording deployment markers

When using the newrelic-admin record-deploy script an optional timestamp can be provided to specify when the deployment marker should be created.  Furthermore support for accounts in the EU region have been added in this release.


Bug Fixes


Fixed a crash in tornado versions &gt;= 6.1

Tornado 6.1 internals changed in a way that may have caused the agent&#39;s built-in instrumentation to fail. The instrumentation has been updated to alleviate this issue.
   ```
   
  
  
   ### 5.0.2.126
   ```
   This release of the Python agent includes bug fixes for feedparser and django-piston.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Bug Fixes


Fixed a crash when using feedparser

When running with the feedparser library the agent would crash on attempting to parse an RSS feed. This issue has now been corrected.
Fixed a crash when using django-piston

When running with the django-piston library the agent would crash on attempting to service a request. This issue has now been corrected.
   ```
   
  
  
   ### 5.0.1.125
   ```
   This release of the Python agent includes a bug fix for the mako library instrumentation.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Bug Fixes


Fixed a crash when using the Mako template library

When running with the Mako template library the agent would crash on attempting to render a template. This issue has now been corrected.
   ```
   
  
  
   ### 5.0.0.124
   ```
   This release of the Python agent introduces:


Event loop diagnostics feature
Tornado instrumentation for versions 6 or higher
Improved context manager API functionality and interfaces


This release also drops support for Python 3.4.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Event loop diagnostics

Introducing event loop diagnostics for asyncio! The Python agent can now surface information about transactions that block the event loop. The agent will be able to generate information about transactions that have waited a significant amount of time to acquire control of the event loop.

Event loop diagnostic information will be available in both APM and via NRQL query.

Event loop metrics will appear in the transaction Breakdown table:



Time spent waiting on other transactions will be shown in the transaction Trace details page, as shown here:



eventLoopTime and eventLoopWait attributes will be available via NRQL query. An example query might be:
SELECT count(*) as &#39;count&#39;, average(eventLoopTime) as &#39;loopTime&#39;, average(eventLoopWait) as &#39;loopWait&#39; FROM Transaction facet name

In New Relic Insights, this might show a result like this:



Diagnostics will be available by default through our existing aiohttp, sanic, and Tornado instrumentation. Diagnostic information will also be available for coroutines that use our background_task and web_transaction decorator APIs.

Tornado 6 Instrumentation

Instrumentation for Tornado framework version 6.x is supported without any feature flags. Support for versions earlier than Tornado 6.x has been dropped.  The Tornado web server, framework, and http client are instrumented and information will show up in both APM and insights.

Important: Using the tornado.gen.coroutine with instrumentation is not supported. Any usage of tornado.gen.coroutine should be replaced with an asyncio coroutine.

Before

class MainHandler(tornado.web.RequestHandler):
    tornado.gen.coroutine
    def get(self):

        yield gen.sleep(0.2)


After

class MainHandler(tornado.web.RequestHandler):
    asyncio.coroutine
    def get(self):

        yield from gen.sleep(0.2)


Improved APIs for time trace context managers

Context managers (such as FunctionTrace, ExternalTrace, DatastoreTrace) may now be used from within asyncio coroutines! Additionally, the transaction argument is no longer used for any context manager API.  In order to transition to the new API, the transaction argument must be removed.

Before

transaction = newrelic.agent.current_transaction()
with newrelic.agent.FunctionTrace(transaction, &quot;my_trace&quot;):
  pass


After

with newrelic.agent.FunctionTrace(&quot;my_trace&quot;):
  pass


Updated WebTransaction context manager

The WebTransaction context manager is no longer WSGI dependent. The context manager takes generic HTTP arguments, which you can use to build web transactions that appear in the APM product. For more information, see our API documentation.
   ```
   
  
  
   ### 4.20.1.121
   ```
   This release of the Python agent includes bug fixes, deprecations, and improved naming behavior for gRPC.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Feature Enhancements


Improved gRPC support

The external and transaction pages now show the gRPC method being called in addition to the host and port.
Ability to disable sending db.statement as part of traces

When db.statement is added to either attributes.exclude or transaction_segments.attributes.exclude, the value will now no longer be sent to New Relic as part of transaction traces or spans.


Deprecations


TransactionContext API is now deprecated

The TransactionContext API will be removed in a future release.
Tornado instrumentation + feature flag deprecation

The existing introductory support for Tornado and feature flags will be removed from a future release. Versions 6.x and newer will be the only versions of Tornado supported in future releases. See this discussion on the New Relic forums for more details.


Bug Fixes


Fixed a crash when using uvicorn workers with gunicorn

When running ASGI applications with gunicorn, the agent would attempt to instrument the application as a WSGI application, resulting in a crash. The agent will no longer attempt to instrument gunicorn applications that are coroutines.
Remove logging of license keys

The agent logged license keys when data failed to send to New Relic. The agent will no longer log license keys to the agent logs under any circumstance.
Fix operation of distributed tracing and cross application tracing when httplib connections are reused

When making multiple requests via a single connection with httplib, httplib2, or urllib3, the proper headers will be added to each outgoing request. As a result, cross application tracing and distributed tracing will now operate as expected when reusing connection objects.
   ```
   
  
  
   ### 4.20.0.120
   ```
   This release of the Python agent includes bug fixes and adds new API methods to retrieve the current trace ID and current span ID.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Features


Added a new API to retrieve the current trace ID

Retrieving the current trace ID can now be accomplished with a call to newrelic.agent.current_trace_id(). This method will return the id of the current trace, or None if no transaction is in progress.
Added a new API to retrieve the current span ID

Retrieving the current span ID can now be accomplished with a call to newrelic.agent.current_span_id(). This method will return the id of the current span, or None if no span is in progress.


Bug Fixes


Exclusive time incorrectly displayed when using concurrent asyncio

The New Relic UI may have shown times equaling greater than 100 percent of the total time when executing concurrent tasks in asyncio. The exclusive times reported by the agent will now be correctly displayed in APM and insights.
   ```
   
  
  
   ### 4.18.0.118
   ```
   This release of the Python agent adds improvements to the gRPC instrumentation package and includes bug fixes.

The agent can be installed using easy_install/pip/distribute via the Python Package Index or can be downloaded directly from the New Relic download site.

Features


Improved gRPC support

Support for measuring inbound gRPC requests has now been added. Inbound gRPC requests will now show as web transactions in APM. Additionally, distributed tracing is now supported as part of the gRPC instrumentation package.


Bug Fixes


Update pika instrumentation to support the 1.x releases

When using the agent with pika versions 1.x 
The purpose of this PR is to clean some invalid calls from the repository. Some of the modules imports were duplicated or not being used. Because of that I only remove the invalid modules imports.

The modules removal should not interfere in the actual operation.
The API documentation indicates that to list all embursments you have to execute the following get command

Listing reimbursements
GET /api/chamber_of_deputies/reimbursement/
Lists all reimbursements.

althoug, when we execute this command line the API retrives only the seven first rows. It is necessary to also indicate parameters limit and offset in order to fetch through the database, as I did in my code, as indicated bellow (R code).

```
library(jsonlite)

reembolso<- fromJSON("https://jarbas.serenata.ai/api/chamber_of_deputies/reimbursement/?limit=20&offset=20")

#LIsts 20 congressperson names from the 21st position 
reembolso$results$congressperson_name

```
<!-- Thank you for contributing with us -->

**What is the purpose of this Pull Request?**
It allows instagram accounts to be stored and presented for each congressman. That's another layer for checking expenses, tracking if there are photos to support or debunk them.

**What was done to achieve this purpose?**
pretty straightforward, added a column in the database and renders this info in the grid.

**How to test if it really works?**
add an instagram account for a congressman who has expenses to be reviewed. The link for the account must be presented in jarbas under the social column.

**Who can help reviewing it?**
<!-- Who are the best people to help reviews it? -->

**TODO**
Prepare a bulk insert with instagram accounts.

**What is the problem?**
In some publications made by Rosie's Twitter, it is noted that the value identified as suspect is within the standard deviation established by the classifier.

As can be verified in the following suspicion:
[Suspicions Tweet](https://twitter.com/RosieDaSerenata/status/1148637974852177920)
[Jarbas Documebt](https://jarbas.serenata.ai/layers/#/documentId/6803319)
In this case the value is only 34.50 BRL.

**How can this be addressed?**
I think it is necessary to adjust the classifier rules or improve the training set.
