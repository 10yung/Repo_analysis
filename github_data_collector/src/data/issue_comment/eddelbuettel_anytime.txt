While Anytime will regularly help me out with non-standard timestamps, it is of course a bit slow ... as such I have taken to wrapping it in a function to only have it calculate unique values and then merge/join the unique values back in to the input data.table:

Would it be too much to ask that this be done within the package?

```
anytime_at_scale <- 
    function(
        dat, time_stamp_column, tz = Sys.timezone()
    ){
        
        dat <- as.data.table(dat)
        
        time_stamp_column_chr <- enquo(time_stamp_column) %>% as.character() %>% .[2]
        
        time_stamps <-
            dat %>%
            lazy_dt() %>%
            group_by({{time_stamp_column}}) %>%
            dplyr::summarise() %>%
            mutate(time_stamp_posix = anytime({{time_stamp_column}}, tz = tz)) %>% 
            as.data.table() 
        
        # print(time_stamps %>% head())
        # print(dat %>% head())
        
        # print(enquo(time_stamp_column) %>% as.character() %>% .[2])
        
        merge(
            x = dat,
            y = time_stamps,
            # by = time_stamp_column_chr,
            all.x = TRUE
        ) %>% 
            lazy_dt(immutable = FALSE) %>%
            mutate({{time_stamp_column}} := time_stamp_posix) %>%
            select(-!!"time_stamp_posix") %>% 
            as.data.table() %>% 
            return()
        
    }
```
This crashes the R session on Windows:

```r
anytime::anytime(c("2.343423423", "3.435435345"))
```

It works fine with `useR = TRUE`:

```r
anytime::anytime(c("2.343423423", "3.435435345"), useR = TRUE)
# [1] NA NA
```

and also on other platforms.

Using R 3.5 on Windows 7, with latest anytime.


In a [comment](https://github.com/eddelbuettel/anytime/issues/36#issuecomment-284803600) to #36, @statquant shows some useful R code with datetime conversion between R and Boost.

It shows some residual differences for a fraction of the inputs, and we need to drill down where it stems from.  In commit https://github.com/eddelbuettel/anytime/commit/d5e34171cd6fe1c80a4475da1ff2180b5e3a225f and https://github.com/eddelbuettel/anytime/commit/a4fd956e4f171082663302f0512eca02bbd26ee9 we add a little helper script which converts numeric time _using Boost_ to a string and back.  For core years (from 1902 onwards) this works without discrepancy.    We should expand from here to get to the bottom of the other differences.  