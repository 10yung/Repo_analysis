Hi,

so I was testing 'actions' and tried it on a file by pressing 'a', followed by pressing 'l' (lower "L") on the first item ("UniActions"). The result was that hunter crashed:

```
thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 18446744073709551615', /rustc/ff15e9670843f8bd6b54ab1b042d2095b4c0aa6d/src/libcore/slice/mod.rs:2797:10
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```

It seems "UniActions" is just a headline (I thought it was an action), but I think hunter shouldn't crash if someone presses 'l' on that headline.

This doesn't happen for other headlines, and I can execute the "synchtop!" action without any problems by pressing 'l'.

PS: Here is the output with RUST_BACKTRACE=full (which doesn't seem to provide any additional information):

```
$ RUST_BACKTRACE=full hunter
thread 'main' panicked at 'index out of bounds: the len is 4 but the index is 18446744073709551615', /rustc/ff15e9670843f8bd6b54ab1b042d2095b4c0aa6d/src/libcore/slice/mod.rs:2797:10
stack backtrace:
   0:     0x56057893000c - <unknown>
   1:     0x5605788722bc - <unknown>
   2:     0x56057892f806 - <unknown>
   3:     0x56057892f42e - <unknown>
   4:     0x56057892ecfa - <unknown>
   5:     0x560578800889 - <unknown>
   6:     0x56057892e8fd - <unknown>
   7:     0x56057892e6ae - <unknown>
   8:     0x5605788703bd - <unknown>
   9:     0x560578870254 - <unknown>
  10:     0x5605787df1b6 - <unknown>
  11:     0x560578792b1f - <unknown>
  12:     0x560578753ca1 - <unknown>
  13:     0x5605787a996b - <unknown>
  14:     0x5605788041cc - <unknown>
  15:     0x5605786d1f42 - <unknown>
  16:     0x560578808868 - <unknown>
  17:     0x7fab46f55153 - __libc_start_main
  18:     0x5605786b316e - <unknown>
  19:                0x0 - <unknown>
```
Hi,

It seems several new features are not included in the last release from last July.

I couldn't get image previews working until I installed the [dev version of hunter from my package manager](https://aur.archlinux.org/packages/hunter-git/). The -u option also wasn't available.
So trying to build hunter on Mac OS X Mojave and I get the following error:

```
error[E0061]: this function takes 0 parameters but 1 parameter was supplied
  --> ~/.cargo/registry/src/github.com-1ecc6299db9ec823/hunter-1.3.4/src/stats.rs:79:20
   |
79 |         self.total.to_string(false)
   |                    ^^^^^^^^^ expected 0 parameters

error[E0061]: this function takes 0 parameters but 1 parameter was supplied
  --> ~/.cargo/registry/src/github.com-1ecc6299db9ec823/hunter-1.3.4/src/stats.rs:83:20
   |
83 |         self.avail.to_string(false)
   |                    ^^^^^^^^^ expected 0 parameters

error: aborting due to 2 previous errors

For more information about this error, try `rustc --explain E0061`.
error: could not compile `hunter`.
warning: build failed, waiting for other jobs to finish...
error: failed to compile `hunter v1.3.4`, intermediate artifacts can be found at `/var/folders/vs/wxzs9qm133zgf60pxpjrf9l4000_6_/T/cargo-installXRil14`
```

Does anyone have any ideas?

Building from source after clone generates error:
```
error: cannot find macro `format_err!` in this scope
   --> src/hunter-media.rs:723:31
    |
723 |             let sixfail = |e| format_err!("Sixel failed with: {:?}", e);
    |                               ^^^^^^^^^^ help: a macro with a similar name exists: `format_args`
```

```
rustc --version
rustc 1.39.0-nightly (f7af19c27 2019-08-15)
```
Feature request while you're working out custom key bindings:

Would it be possible to do key "arpeggios" as per ranger? Ideally would support more than one in-between state.

Use case: I often find it useful to do multiple types of file sorting that dont' really deserve top-level keybindings. For instance, in `ranger` I may use `o s` to sort by size, `o c` to sort by ctime, `o t` to sort by type. Fitting all of these under one generic sort keybinding is very useful.

Also for inspiration, emacs hydra mode: https://github.com/abo-abo/hydra
It would be helpful to look up the help without leaving `hunter`.

Right now hunter just pipes stdout/stderr to a textview, but this means subprocesses don't know about the terminal size and don't use colors unless forced with flags. This could be improved by plumbing everything through the pseudo-terminal interface.

Additionally it would be nice if it was possible to send input to those subprocesses, turning hunter into a real TUI-shell (proxy).