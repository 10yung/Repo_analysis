I checked for this feature and I saw it was already [discussed in the past](https://discourse.glfw.org/t/custom-memory-allocator/1352) and there is also an open PR about it: https://github.com/glfw/glfw/pull/544

There is also one related issue: https://github.com/glfw/glfw/issues/478

All proposals are intended for custom allocators defined at runtime but it could be nice to be able to just define custom allocators on compilation, similar to what other libraries like stb do:

```c
#ifndef GLFW_CALLOC
    #define CGLFW_CALLOC(sz)  calloc(sz)
#endif
#ifndef CGLFW_FREE
    #define CGLFW_FREE(p)     free(p)
#endif
```

This way custom allocators could be defined by user on library compilation. 

Probably out-of-scope of GLFW, but this approximation is also useful if `stblib` (containing `malloc()`/`free()`) is replaced by a custom implementation, for example on embedded devices.

This request is related to raylib issue https://github.com/raysan5/raylib/issues/1074, it's a low priority feature.
## Summary

The joystick api is not working for the Nintendo Switch Pro Controller on macos.

## Details

Macos Mojave 10.14.3 (18D42)
GLFW 3.3.1

## Steps to Repro

1) Build the glfw tests
2) Plug in the pro controller via USB
3) Run `tests/joystick.app`
4) Observe joystick responses going haywire:

![buggy_pro_controller_macos_glfw](https://user-images.githubusercontent.com/5448363/72647835-7664cc00-3947-11ea-8699-19d4630079d6.gif)

Note that unplugging and re-plugging in the controller makes no difference

OS: Windows 10
GLFW Version: 3.4 preview (lwjgl 3.2.3)

I have a GLFWMouseButtonCallback set on my GLFW canvas and it happily reports PRESS and RELEASE states as I click the mouse.  If I hold down a mouse button for more than a few seconds though (say 5 or more) before releasing, then no RELEASE is invoked.  It will eventually get invoked if I move my mouse or use the scroll wheel after releasing the button.

My expected behavior is that releasing the button will invoke a RELEASE callback, regardless of length of time that button is held.

Hi,

* initially discussed here:  https://discourse.glfw.org/t/glfw-character-text-input-with-modifier-keys-control-meta-alt/1467
* GLFW version: 3.3 (on Ubuntu 19.10)

It is currently not possible to receive character events with modifiers for all characters that were typed in.

My demo was: A user is typing in `Ctrl+[` in standard (en_US) keyboard layout works just fine with key as well as char callback but if you use (for example) de_DE (German[y]) keyboard layout, then in order to send a `Ctrl=[`, what the user has to press is `Ctrl+AltGr+8`. This is captured by the key callback as `Ctrl+Alt+8` (which is not helpful because the user app itself SHOULD NOT re-implement keyboard layout mapping nor do I know what keyboard mapping the user has) and more importantly, the character callback is not invoked for that, neither is the character-with-modifier callback being invoked for that.

My request basically is to let the character-with-mods callback know about ALL characters being typed in with all modifiers - it also feels like a bug to me that this callback isn't invoked on non-en_US keyboard layouts (my test-case: de_DE), so I'm not sure it actually is a bug or a feature request.

p.s.: I didn't find any resource telling me *why* `glfwSetCharModsCallback` is being deprecated. It seems this is the *only* function that makes sense for me to use (even though it's currently not really fully working); maybe someone knows where to look at for this decision?

Many thanks in advance,
Christian.
`glfwGetCursorPos` supposedly returns the position of the cursor, relative to the window's position.
That all works very neatly, however - on arch linux 64 with KDE Plasma (didn't test on other platforms yet), when starting to move a window, the cursor position returned by `glfwGetCursorPos` is not relative to the current window's position, but rather to the window's position when it was started to being moved

Using a callback circumnavigates this issue
I notice a change when transitioning from GLFW 3.0 to 3.3. GLFW 3.3 doesn't register all keys when they are pressed almost instantly. Before (vs 3.0) all keys were registered by `glfwGetKey()`, with no problems. Now (vs 3.3) when I use `glfwGetKey()`, only the first key pressed is registered and only after the delay of the [repeat keys](https://askubuntu.com/questions/846030/how-to-set-keyboard-repeat-delay-and-speed-in-ubuntu-gnome-16-10) is passed, that is, when the key starts repeating, GLFW register the key. When you add more than 2 keys at the same time, the problem becomes really apparent.

I was wondering, was something I am missing from the versions changes?  Or is this bug?

**I am using Linux (popOS).**

[Here is the code I am working on ](https://github.com/Hirosam1/OpenGL_Basics). in case you want to test it yourself.

Looking at the Windows implementation, after `MonitorFromWindow` has been executed, the returned handle may become invalid before `GetDpiForMonitor` is called. It then returns invalid values. `GetDpiForMonitor` can be checked against `S_OK` to detect errors.

Ideally `glfwGetWindowContentScale` could return 0 or 1 depending on success, but with having to stick to the existing API, maybe it could set `xscale` and `yscale` to 0?

As a workaround, user could check that the returned value is sane, e.g. between `1.0f` and `2.0f` (or something else). But this is not ideal.
I currently am trying to write a small engine using GLFW, and encountered this problem: Whenever the window gets dragged, all Update Callbacks stop happening, and after the user lets go of the window, an Update is called with a potentially huge time step. One way to solve this would be to stop the timer when the window starts being dragged and start the Timer again after it stops. I don't think theres a way to generate a callback when the window starts/stops moving (WindowPosCallback doesn't generate a callback when the user just clicks on the error bar and holds the mouse without moving it, but this still stops Updates from happening). One could solve this by handling the loop on a second thread, but i was surprised that there doesn't seem to be an easy solution to this problem.

Thanks in advance for any answer!
I've noticed that in the Windows port of GLFW3, the `_glfwInputFramebufferSize` and `_glfwInputWindowSize` are called regardless of the current windows size. Also, the window width/height is not store in the `win32` structure. This might cause repeated calls to the callback.

I suggest to change the `win32_window.c` code as follows.
```c
        case WM_SIZE:
        {
            const GLFWbool iconified = wParam == SIZE_MINIMIZED;
            const GLFWbool maximized = wParam == SIZE_MAXIMIZED ||
                                       (window->win32.maximized &&
                                        wParam != SIZE_RESTORED);
            const int width = LOWORD(lParam);
            const int height = HIWORD(lParam);

            if (_glfw.win32.disabledCursorWindow == window)
                updateClipRect(window);

            if (window->win32.iconified != iconified)
                _glfwInputWindowIconify(window, iconified);

            if (window->win32.maximized != maximized)
                _glfwInputWindowMaximize(window, maximized);

            if (window->win32.width != width || window->win32.height != height) {
                _glfwInputFramebufferSize(window, width, height);
                _glfwInputWindowSize(window, width, height);
            }

            if (window->monitor && window->win32.iconified != iconified)
            {
                if (iconified)
                    releaseMonitor(window);
                else
                {
                    acquireMonitor(window);
                    fitToMonitor(window);
                }
            }

            window->win32.iconified = iconified;
            window->win32.maximized = maximized;
            window->win32.width = width;
            window->win32.height = height;
            return 0;
        }
```