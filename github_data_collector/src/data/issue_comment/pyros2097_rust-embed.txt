Hi, and thanks for developing this invaluable tool :)

I've got a bit of a problem. I'm serving the content of the embedded folder via `actix-web`, and running a [parcel](parceljs.org) `watch` job for frontend development. This frontend tooling has autoreloading, so when the `watch` job builds a new version of my frontend the page gets reloaded. This almost always results in only half of the javascript file getting served and the reload aborting because of it.

I don't know how rust-embed works internally, but I'm assuming this is because rust-embed reads the file at a time where it's not done being written?
How about adding optional compression support, like [include-flate](https://crates.io/crates/include-flate)?
This would let me work around #34 like so:

1. Enter the main () function
2. Figure out what directory I want to load assets from (e.g. the project root)
3. Pass that directory, and the assets directory to some new () func (e.g. Asset::new ("/myproject", "public/html")
4. The new () func returns an Asset which I can pass to other functions by shared reference. I could even create multiple instances if I want to swap between two folders while the program is running.

The existing global functions could be implemented on top, by creating a global object that has the two directories fixed at compile time.

If I can find a way to do that, would you take a PR?
1. I made a library crate "pypack" that uses rust-embed.
2. I made a binary crate that uses that library crate.
3. I would expect the folder used for the Asset folder path to be relative to the binary cargo.toml, is that not the case?

example:

```
error: proc-macro derive panicked
  --> C:\Users\LUNA\.cargo\git\checkouts\pypack-071d8f8d2bc34e74\06f6da1\src\lib.rs:13:10
   |
13 | #[derive(RustEmbed)]
   |          ^^^^^^^^^
   |
   = help: message: #[derive(RustEmbed)] folder 'dist/' does not exist. cwd: 'C:\Users\LUNA\.cargo\git\checkouts\pypack-071d8f8d2bc34e74\06f6da1'
```
Hello, I tried to use `nuxt.js` and generated some static pages using `nuxt generate`, while I load these files using a static file server it works perfectly but while I load it using `rust-embed` it doesn't work anymore.

Do you have some ideas why it happens? I'll try to make a repro.
Try to run `cargo run --example basic` from the `examples` subfolder, it will crash.
The procmacro should make sure that it works, no matter where cargo is called from! 
(Also important for workspaces, where the exe could be in the toplevel or in a sub folder.)