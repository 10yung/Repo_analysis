This adds support for parsing `class-string` and `class-string<Type>`.
Bumps [mockery/mockery](https://github.com/mockery/mockery) from 1.3.0 to 1.3.1.
<details>
<summary>Release notes</summary>
<p><em>Sourced from <a href="https://github.com/mockery/mockery/releases">mockery/mockery's releases</a>.</em></p>
<blockquote>
<h2>1.3.1</h2>
<ul>
<li>Revert improved exception debugging due to BC breaks (<a href="https://github-redirect.dependabot.com/mockery/mockery/issues/1032">#1032</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Changelog</summary>
<p><em>Sourced from <a href="https://github.com/mockery/mockery/blob/master/CHANGELOG.md">mockery/mockery's changelog</a>.</em></p>
<blockquote>
<h2>1.3.1 (2019-12-26)</h2>
<ul>
<li>Revert improved exception debugging due to BC breaks (<a href="https://github-redirect.dependabot.com/mockery/mockery/issues/1032">#1032</a>)</li>
</ul>
</blockquote>
</details>
<details>
<summary>Commits</summary>
<ul>
<li><a href="https://github.com/mockery/mockery/commit/f69bbde7d7a75d6b2862d9ca8fab1cd28014b4be"><code>f69bbde</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/mockery/mockery/issues/1032">#1032</a> from robertbasic/revert-exception-debugging</li>
<li><a href="https://github.com/mockery/mockery/commit/580b98c96219ce598a7f3610ed1352f1ecf6de27"><code>580b98c</code></a> Add changelog</li>
<li><a href="https://github.com/mockery/mockery/commit/12c5d771833312544dfc687f4d48d77a4a6e8b0f"><code>12c5d77</code></a> Revert &quot;Improve exception debugging&quot;</li>
<li><a href="https://github.com/mockery/mockery/commit/c21660612104ad072bbc3f0f3d934689160924dc"><code>c216606</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/mockery/mockery/issues/1027">#1027</a> from dciancu/master</li>
<li><a href="https://github.com/mockery/mockery/commit/84ee0466159e39726abbc568b0566b060e01a88d"><code>84ee046</code></a> Merge pull request <a href="https://github-redirect.dependabot.com/mockery/mockery/issues/1028">#1028</a> from GrahamCampbell/patch-1</li>
<li><a href="https://github.com/mockery/mockery/commit/0c865d33186e7573835e57bdbddde88f8f4b2a05"><code>0c865d3</code></a> Fixed branch alias</li>
<li><a href="https://github.com/mockery/mockery/commit/4f5f771438ebaf16a4413d580a5d68888a13aabc"><code>4f5f771</code></a> Add back getActualArguments() to NoMatchingExpectationException</li>
<li>See full diff in <a href="https://github.com/mockery/mockery/compare/1.3.0...1.3.1">compare view</a></li>
</ul>
</details>
<br />


[![Dependabot compatibility score](https://api.dependabot.com/badges/compatibility_score?dependency-name=mockery/mockery&package-manager=composer&previous-version=1.3.0&new-version=1.3.1)](https://dependabot.com/compatibility-score.html?dependency-name=mockery/mockery&package-manager=composer&previous-version=1.3.0&new-version=1.3.1)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot close` will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
- `@dependabot ignore this major version` will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this minor version` will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language
- `@dependabot badge me` will comment on this PR with code to add a "Dependabot enabled" badge to your readme

Additionally, you can set the following in your Dependabot [dashboard](https://app.dependabot.com):
- Update frequency (including time of day and day of week)
- Pull request limits (per update run and/or open at any time)
- Automerge options (never/patch/minor, and dev/runtime dependencies)
- Out-of-range updates (receive only lockfile updates, if desired)
- Security updates (receive only security updates, if desired)



</details>
Hello, I have 2 classes in different namespaces, and trait connecting them, ex:
```
namespace Command\Common\Traits;

use Command\Model\Payment\UserAccountDetails;

trait UserDetailsAwareTrait
{
    /**
     * @var UserAccountDetails
     */
    protected $userAccountDetails;

    public function getUserAccountDetails(): UserAccountDetails
    {
        return $this->userAccountDetails;
    }

    public function setUserAccountDetails(UserAccountDetails $userAccountDetails): void
    {
        $this->userAccountDetails = $userAccountDetails;
    }
}
```
```
namespace Command\Bank;

use Command\Common\Traits\UserDetailsAwareTrait;
use Command\Model\Payment\UserData;
use Money\Money;
use Ramsey\Uuid\UuidInterface;

class DepositCommand
{
    use UserDetailsAwareTrait;
}
```
```
namespace Command\Model\Payment;

class UserAccountDetails
{
    /**
     * @var bool|null
     */
    private $accountVerified;

    public function isAccountVerified(): ?bool
    {
        return $this->accountVerified;
    }

    public function setAccountVerified(?bool $accountVerified): UserAccountDetails
    {
        $this->accountVerified = $accountVerified;

        return $this;
    }
}
```
And logic failure occurs in `resolvePartialStructuralElementName`.

`$context` variable content:
![image](https://user-images.githubusercontent.com/5016464/67874773-19265f00-fb3e-11e9-8da0-8755a09c8548.png)
and `$type = "UserAccountDetails"`.

So it cannot be just simple `$namespace . $type`, I guess it should check within trait namespace of `UserAccountDetails`, but I don't know where it cames from.

It seems that another library have already resolved this [issue](https://github.com/phpstan/phpstan/issues/578), you can [take a look](https://github.com/phpstan/phpstan/commit/7bde475e8d3ab8827ce18ec24e051b055a9e774d) and this [one](https://github.com/phpstan/phpstan/commit/f4a905bd708cdaf0ad00b9fd10f2d1d03668cc42)

Maybe `$context` should include `UserDetailsAwareTrait` trait uses, so it would be resolved as `$namespaceAliases[$typeParts[0]]`
``CRITICAL  TypeError: Return value of phpDocumentor\Reflection\Types\AbstractList::getValueType() must implement interface phpDocumentor\Reflection\Type, null returned in <edited>/.vscode/extensions/felixfbecker.php-intellisense-2.3.13/vendor/phpdocumentor/type-resolver/src/Types/AbstractList.php:63``

Not entirely sure about the intended behaviour but if null is acceptable value then the getter should be allowed to return it as such, no?
For example:

```php
<?php 
namespace somens;
use some\other\ns;
class A {
   public function(): ns
   {...}
}
```

`ns` will be resolved correctly as `some\other\ns` not `somens\ns`.

Such as

```php
<?php 
namespace somens;
use some\other;
class A {
   public function(): other\ns
   {...}
}
```

`ns` will be resolved correctly as `some\other\ns` not `somens\other\ns`.
After some discussion with @nikic on https://github.com/phpDocumentor/TypeResolver/pull/9/files#r34962566 it looks like `ContextFactory::getNamespaceAliases()` doesn't cope with multiple imports with the same aliased name. For example:

``` php
namespace Foo;
use Foo\X;
class A extends X {
    use Zap;
}
use Bar\X;
class B extends X {
    use Baz;
}
```

If you call `::getNamespaceAliases()` on this perfectly valid code, you'll see: 

```
[
    'X' => 'Bar\X'
]
```

This is not correct, but because it is keyed by the alias name, it is too much of a simple representation to allow multiple named aliases. It's maybe quite an edge case, but it does indeed appear to be a bug.
