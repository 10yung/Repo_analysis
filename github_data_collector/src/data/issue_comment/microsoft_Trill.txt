

Consider open sourcing the Kusto Query Language to Trill logic converter/mapping library.
Thoughts, opinions, comments @cybertyche ?
In conjunction with the [CRA team](https://github.com/microsoft/CRA) who developed [Quill](https://www.microsoft.com/en-us/research/wp-content/uploads/2016/08/quill-tr-2016.pdf), consider releasing a Distributed Trill implementation using the CRA platform.
**Requirement 1: Create an analogue to IQueryable or IQbservable for IStreamable.**

That means having a new interface, IQStreamable, and a provider class, IStreamProvider, that can build up an expression in LINQ and then evaluate it later. The expression is inspectible and manipulable just like other LINQ expressions.

**Requirement 2: Ensure that the provider can stand independently of the engine.**

Not only would this allow someone to implement an engine to the Trill API with different characteristics, but it would also allow the API implementation to evolve independently of the API if it needs to.

**Biggest open question: Do we precisely mirror the existing IStreamable API, or do we instead try to implement API 2.0 with lessons learned?**

For the most part, we are incredibly proud of our API. However, there are a few places where we would make changes if we could. Those places are:

- Making IQStreamable have one type parameter instead of two
- Consequently, also having a group-by syntax that is actually identical to IQueryable instead of GroupApply()
- No longer requiring QueryContainer to register output, only input
or class?
Hello,

I'd like to experiment with a `Trill` lib a little bit and was wondering what is the best approach for use case where there is a single 'source stream' for example trading data, like individual trades and many queries for such source stream, where first query would be `Where` that would narrow down trades to individual instruments. In a writing queries guide I've read about multicast that is necessary for such use case, but when looking at the source code I've also found about `Publish` .
I'm not really familiar with `rx` so that is a little bit confusing for me when to use `Multicast` vs `Publish` , what would you suggest? Or perhaps it's better to create separate streams instead of single one for each `Where` so then multicast is not necessary? Do you know any guidelines, lessons learned about that? I'd love to read more, but couldn't find anything in docs. 

I've also seen mentions about partitioning in the source code, is this only related to `group` operator or something that could also be useful for my use case?  

I'll be setting low batch  size (< 5, maybe less), are there any settings that I could tweak for very near real-time queries to get best perf, sacrificing throughput, but getting lowest latency possible ?

Thanks a lot!
Support for Apache Arrow which is a cross-language development platform for in-memory data. It specifies a standardized language-independent columnar memory format for flat and hierarchical data, organized for efficient analytic operations on modern hardware. It also provides computational libraries and zero-copy streaming messaging and interprocess communication. 

Apache Arrow is backed by key developers of 13 major open source projects, including Calcite, Cassandra, Drill, Hadoop, HBase, Ibis, Impala, Kudu, Pandas, Parquet, Phoenix, Spark, and Storm making it the de-facto standard for columnar in-memory analytics.

Related issues:
- #5 
- #6 
- #7
Consider adding support for [Apache Beam's](https://beam.apache.org) unified model for defining both batch and streaming data-parallel processing pipelines. 
Consider adding support for System.Threading.Channels & C# 8 IAsyncEnumerable