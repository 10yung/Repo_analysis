The samples seem to mostly use async-std, I have no strong feelings about tokio and async-std, but most of the other libraries I'd like to use (hyper, reqwest, trust-dns, etc) mostly use the tokio AsyncRead/AsyncWrite, and tokio::main macro.

It would be nice to see capnproto support these without the need of the external unpublished adapter crate.
This PR adds a new crate called `capnp-conv`, allowing for automatic proc macro based code generation for serialization and deserialization.
Should solve issue https://github.com/capnproto/capnproto-rust/issues/136
Hi All

I need to move a Vec<u8> with Capnproto-rpc.
In my capnproto file i have used a List:

`

     interface Node {

        getCsr @0 () -> (csrresponse :CsrResponse);
        register @1 (certrequest: CertRequest);
        install @2 () -> ();

        struct CsrResponse {
            csr @0: List(UInt8);
        }
        struct CertRequest {
            cert @0: List(UInt8);
            caCert @1: List(UInt8);
        }
    }`

But when i have to use the cosde generated into the Server RPC, for example, I have no idea how to translate the Vec<u8> to a List and viceversa


thanks in advance for your help

Not sure if this is the best place to ask this question, however how exactly are we supposed to access the base interface when using interface inheritance? I've looked through the examples and the generated rust code for my interfaces but I dont see an obvious solution. Is this actually supported in the rust implementation?
The current getting started text from https://crates.io/crates/capnp-rpc would benefit from additional clarity in the following section...

```
and you can include the generated code in your project like this:

pub mod foo_capnp {
  include!(concat!(env!("OUT_DIR"), "/foo_capnp.rs"));
}
```

My questions are:
* Where exactly does `mod foo_capnp` belong?
* How is the path for "foo_capnp.rs" generated? I'm digging around looking for it in my 'target' directory.
I've set up a RPC server using `capnp_rpc` following the examples given in the repo. The code looks like:

```rust
        let addr = ([0, 0, 0, 0], port).into();
        let socket = tokio::net::TcpListener::bind(&addr).unwrap();

        let client = simple_capnp::simple::ToClient::new(self).into_client::<capnp_rpc::Server>();

        let done = socket.incoming().for_each(move |socket| {
            socket.set_nodelay(true)?;
            let (reader, writer) = socket.split();

            let network = twoparty::VatNetwork::new(
                reader,
                std::io::BufWriter::new(writer),
                rpc_twoparty_capnp::Side::Server,
                Default::default(),
            );

            let rpc_system = RpcSystem::new(Box::new(network), Some(client.clone().client));
            current_thread::spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
            Ok(())
        });

        current_thread::block_on_all(done).unwrap();
```

However, when I run the server in a distributed environment with many incoming requests, a low cpu usage was observed and the throughput is 20% lower then [tarpc](https://github.com/google/tarpc). I'm assuming that the server only uses one thread, so I tried to run the server in a `tokio::runtime::Runtime` runtime which support multi-threading. But as `RpcSystem` doesn't support `Send`, I got the following errors:

```
error[E0277]: `std::rc::Rc<std::cell::RefCell<std::option::Option<std::rc::Rc<capnp_rpc::rpc::ConnectionState<capnp_rpc::rpc_twoparty_capnp::Side>>>>>` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `std::rc::Rc<std::cell::RefCell<std::option::Option<std::rc::Rc<capnp_rpc::rpc::ConnectionState<capnp_rpc::rpc_twoparty_capnp::Side>>>>>` cannot be sent between threads safely
   |

error[E0277]: `std::rc::Rc<std::cell::RefCell<std::boxed::Box<(dyn capnp_rpc::task_set::TaskReaper<(), capnp::Error> + 'static)>>>` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `std::rc::Rc<std::cell::RefCell<std::boxed::Box<(dyn capnp_rpc::task_set::TaskReaper<(), capnp::Error> + 'static)>>>` cannot be sent between threads safely
   |

error[E0277]: `(dyn capnp_rpc::VatNetwork<capnp_rpc::rpc_twoparty_capnp::Side> + 'static)` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `(dyn capnp_rpc::VatNetwork<capnp_rpc::rpc_twoparty_capnp::Side> + 'static)` cannot be sent between threads safely
   |

error[E0277]: `(dyn capnp::private::capability::ClientHook + 'static)` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `(dyn capnp::private::capability::ClientHook + 'static)` cannot be sent between threads safely
   |

error[E0277]: `std::rc::Weak<std::cell::RefCell<futures::unsync::mpsc::Shared<capnp_rpc::task_set::EnqueuedTask<(), capnp::Error>>>>` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `std::rc::Weak<std::cell::RefCell<futures::unsync::mpsc::Shared<capnp_rpc::task_set::EnqueuedTask<(), capnp::Error>>>>` cannot be sent between threads safely
   |

error[E0277]: `std::rc::Rc<std::cell::RefCell<futures::unsync::mpsc::Shared<capnp_rpc::task_set::EnqueuedTask<(), capnp::Error>>>>` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `std::rc::Rc<std::cell::RefCell<futures::unsync::mpsc::Shared<capnp_rpc::task_set::EnqueuedTask<(), capnp::Error>>>>` cannot be sent between threads safely
   |

error[E0277]: `(dyn futures::future::Future<Item = (), Error = ()> + 'static)` cannot be sent between threads safely
  --> src/graph_impl/rpc_graph/server.rs:49:21
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `(dyn futures::future::Future<Item = (), Error = ()> + 'static)` cannot be sent between threads safely
   |

error[E0277]: `(dyn futures::future::Future<Item = (), Error = capnp::Error> + 'static)` cannot be sent between threads safely
   |
49 |             runtime.spawn(rpc_system.map_err(|e| println!("error: {:?}", e)));
   |                     ^^^^^ `(dyn futures::future::Future<Item = (), Error = capnp::Error> + 'static)` cannot be sent between threads safely
   |
```

Is there an efficient way to run the server to handle large amount of requests?
Hey there! I've been wanting to have capnproto-rust available on no_std for awhile (per #71), and I've given it a few shots in the past but I think now I'm actually pretty close to nailing it. I wanted to open up a PR to get some feedback on my approach and ask some questions about things I've gotten hung up on.

Things I've done:

* Added a `no_std` feature flag to the `capnp` crate. This feature is used in a few `#[cfg(...)]` conditional compilations around the codebase.
* Included the `core_io` crate as an optional dependency to be included when the `no_std` feature flag is set. This crate is mostly autogenerated in that it applies patches against std::io to take out all std usages and replace them using the `alloc` crate.
* Replaced all references to `std::` within the `capnp` crate to use `core::` instead. In capnp's `lib.rs` file, there is a conditional import based on `#[cfg(feature = "no_std")]`. If `no_std` is enabled, then the name `core::` references `core_io::` items. If `no_std` is not enabled, then `core::` references `std::` items. A similar strategy handles deciding between e.g. `std::string` and `alloc::string` and between `std::str` and `alloc::str`.

Problems I'm having now:

It seems that everything in the `capnp` crate is now building properly both when `no_std` is enabled and disabled. However, when I add the `capnpc::CompilerCommand::new().file("schema.capnp").run().unwrap();` buildscript to a no_std project of mine, there's an interesting compilation problem. `capnp` needs to be compiled as no_std in order to comply with my no_std application, but since that is the case, the std-compiled `capnpc` seems to now be linking against the no_std-compiled `capnp`, whereas I think it _should_ build a separate instance of capnp (std-compiled) to link against. The problem that this creates is that e.g. in `capnpc/src/lib.rs:81: let mut p = command.spawn()?;`, the `spawn()` call returns a `Result` in which the error type is `std::io::Error`. Typically, when capnp is std-compiled, it would implement `From<std::io::Error> for capnp::Error`. However, since it is linking against the no_std-compiled version of capnp, the implementation that is actually implemented is `From<core_io::Error> for capnp::Error`. It seems that I can get around this by simply mapping the error each time capnpc deals with an `io::Result`, e.g. like this:

```rust
let mut p = command.spawn().map_err(|err| capnp::Error::failed(err.to_string()))?;
```

There are only perhaps five or so instances of this problem, but I figured I should ask if anybody has any suggestions on a strategy to take. I don't think it makes sense to force the no_std requirements to leak up into capnpc, but I also don't necessarily want to destroy ergonomics by forcing the client to use `map_err` everywhere. I think I'll probably work on adding a commit that does do that, just in order to get a working solution together, but any alternative suggestions are certainly welcome!

Edit:

I forgot to mention, since the `core_io` crate is built by applying patches against certain builds of std::io, you'll need a fixed version of nightly rust to build it using the `no_std` feature. You should be able to satisfy it using this override which corresponds to the last patch of the core_io crate:

```
rustup override set nightly-2019-07-01
```
So... I have been working with Cap'n Proto in Rust for some time by now and although I quite happy with it, I find myself writing a lot of boilerplate. How viable would it be for we to create abstractions based on Rust's macro system (thinking Serde, Rokcet, etc...) to make coding experience more fun?

Is this even the scope of any of the current crates? 

I could help a bit on that.
After the other end of a unix domain socket or a pipe disconnects, calls to `read_exact` will return an `UnexpectedEof` error.

I believe that this should be treated as an `ErrorKind::Disconnect` and not a generic `ErrorKind::Failure`.
I'm trying to use `capnp_futures` with tokio, but there aren't many examples around. I'm running into some difficulty when I try to schedule the future to write messages.

If I create a `WriteQueue`, I can't use `tokio::spawn` because `WriteQueue` has an `Rc<RefCell<_>>` in it.