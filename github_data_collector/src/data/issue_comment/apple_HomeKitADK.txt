
Why exactly do we need to run make in a docker container. Of course I understand the benefits of doing so, but shouldn't it be an option when running make for the first time ? Something like `make DOCKER_BUILD=y` or so ? 

Both fill a buffer with cryptographically secure random numbers, so why have both?
Wouldn't having just one be sufficient?
With default values for `kHAPIPSessionStorage_DefaultNumElements` (17), `kHAPIPSession_DefaultInboundBufferSize` (32K) and `kHAPIPSession_DefaultOutboundBufferSize` (32K) the RAM footprint of a basic app ends up being over 1M.
Pre-allocating all the buffers is safe in terms of peak memory footprint but is unacceptable for smaller platforms - e.g. on ESP8266 we only have 40K or so to work with, ESP32 has 200K or so, STM32 MCUs typically used in IoT applications have 128K to 1M of RAM total.
For the library to be usable on those platforms, this needs to be addressed.

Immediate question: why are buffers 32K in size when the HAP protocol defines maximum payload size for an HTTP request at 1K? (HomeKit Accessory Protocol Specification non-Commercial Version R2, section 6.5.2)
Fix compile errors in current codebase - mainly unused arguments.

Some ObjC headers in XCode have unused arguments, so those need to be excepted.
Hello, could you please explain how the 8-digit key is generated and what's the key for pairing the Lightbulb and Lock Application examples?

I've been trying to pair the accessory for a while but with no effect. 
App quits due to:

`2019-12-28'T'23:08:00'Z'	Error	[com.apple.mfi.HomeKit.Platform:AccessorySetup] No setup code found in key-value store.`

Meanwhile I noticed that some files in .HomeKitStore are read, especially .HomeKitStore/40.10 which not exist, so I made a try in creation this file filled with 400 bytes (I get the value from the code). Now it does not quit, it's waiting for the 8-digit key but I don't have even an idea what it could be... 

Could you please help with that? I'm running Linux build. Thanks in advance.
# Context
I am trying to compile the kit on a plain linux (Kubutnu 19.10 or WSL Ubuntu 18.04). This post and the following comments describe the errors I get in the process and what I am trying to do to fix them. 

# Errors

When simply cloning and building the kit w/ `make` on a Linux system (Ubuntu WSL or Kubuntu 19.10), I get a compilation error on the following step : 

```
clang -Wall -Werror -DHAP_ENABLE_DEVELOPMENT_ONLY_CODE=1  -ffunction-sections -fdata-sections -IHAP -IExternal/HTTP -IExternal/JSON -IExternal/Base64 -IPAL -I/include -O0 -g -DHAP_LOG_LEVEL=3     
-DHAP_TESTING -IPAL/Linux -IPAL/Linux   -DHAP_Debug -c HAP/HAPRequestHandlers+Pairing.c -o Output/Linux-x86_64-pc-linux-gnu/Debug/HAP/HAPRequestHandlers+Pairing.o
```

The error is the following : 

```
Applications/Lock/Main.c:1:1: error: expected identifier or '('
../Main.c
^
1 error generated.
Build/Makefile:162: recipe for target 'Output/Linux-x86_64-pc-linux-gnu/Debug/IP/Applications/Lock/Main.o' failed
```

The contents of the related file, Applications/Lock/Main.c, are the most peculiar : 
```
../Main.c
```

There is indeed a `Main.c` in the parent directory of the file, that seems "normal". 