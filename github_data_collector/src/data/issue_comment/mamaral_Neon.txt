@mamaral please review this PR for swift 5 support
Given GitHub and Xcode now have integrations with the SPM, it would be good to support it, so the library is easy to integrate.
I thought Neon would be perfect for the venerable interview question, so i created this repo to manifest an nice solution:

http://bit.ly/TrappingRainwater

thank you!
I saw one other issue like that (unfortunately with no follow-up by the OP). I am hoping to create a custom nib-based view to drop into a main view, and each instance will manage its own layout via neon (liking the repo!). But, there is absolutely no neon-action within the instantiation. I have the most basic of view, and simply firing it up within the main VC, and dropped a sample view that is instructed to fill its container. I set the colors to show me it works. It does not. Wondering if you have tried something similar?
Perhaps i am missing this, or perhaps my suggested name is not quite right but my basic use case causes me to introduce container views to achieve my layout. It is similar to building a table row by row: the first view must fill top width, then the next one must fill the next top width below it and so on. Grouping top left than calculating width could work but the adding of the elements can be staggering in time.

Perhaps this is already easy and I am just missing how? thx..

Awesome repo btw!!
Respect right to left layout.

* No break existing api
* Uses layout direction from view (over global as https://github.com/mamaral/Neon/pull/56)
insert spaces to fix the headers
Fix wrong AutoWidth / AutoSize in some cases, see new tests.
Most elements (like `UILabel`) have an `intrinsicContentSize`. Is it possible to extend Neon to use this automatically?
I've fixed formatting in some headers, where `##` was shown instead of correct font format.

Also, I've updated notice about Neon still being in beta - up to Swift version 4.