Architecture:  mips64el

My build type is mips64el-unknown-linux-gnu,and the config.guess in msgpack-1.1.0.tar.gz is too old,it cannot guess build type
I'm trying to follow [this](https://www.schneems.com/2017/05/01/the-fastest-way-to-generate-a-heap-dump-on-heroku/) guide with ruby 2.4.6 & rails 4.2.11.1.

On my locally running sidekiq instance it does not seem to work:

`bundle exec rbtrace -p <pid> -e "load 'command.rb'"`

I've put the following line in command.rb to work around the Mac OS line-too-long issue:

`Thread.new{GC.start; require "objspace";io=File.open("/tmp/ruby-heap.dump", "w"); ObjectSpace.dump_all(output: io); io.close}`

In my `application.rb` I have:

```
require 'rbtrace'
require 'objspace'
ObjectSpace.trace_object_allocations_start
```

Yet, the result I get is:

```
*** attached to process 24295
>> load 'yolo.rb'
=> #<ThreadError: can't be called from trap context>
*** detached from process 24295
```

Please advise how I can get around this, thanks in advance.
AbstractMysqlAdapter was introduced in activerecord v3.2.0, so add also AbstractMysqlAdapter to support v3.2.0 or later.
cf. https://github.com/rails/rails/commit/5766539342426e956980bf6f54ef99600cbfc33e
running a : ` bundle exec rbtrace -p 41495 --memory`

Output is:
```
*** attached to process 41495
*** detached from process 41495
bundler: failed to load command: rbtrace (/Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/bin/rbtrace)
ArgumentError: command is too long
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/gems/rbtrace-0.4.11/lib/rbtrace/rbtracer.rb:324:in `send_cmd'
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/gems/rbtrace-0.4.11/lib/rbtrace/rbtracer.rb:146:in `eval'
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/gems/rbtrace-0.4.11/lib/rbtrace/cli.rb:467:in `run'
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/gems/rbtrace-0.4.11/bin/rbtrace:5:in `<top (required)>'
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/bin/rbtrace:23:in `load'
  /Users/arthurnn/src/dependency-graph-api/vendor/gems/ruby/2.4.0/bin/rbtrace:23:in `<top (required)>'
```

I am assuming the memory dump is too big or something, so it would break the msgpack buffer size?

is there a work around of some sort?
Post-install message from trollop:
!    The 'trollop' gem has been deprecated and has been replaced by 'optimist'.
!    See: https://rubygems.org/gems/optimist
!    And: https://github.com/ManageIQ/optimist
run `rbtrace -p $PID --firehose` in `MacOS 10.13.2` `ruby 2.4.2`
```
compiling rbtrace.c
rbtrace.c: In function ‘event_hook’:
rbtrace.c:329:5: warning: ‘rb_frame_method_id_and_class’ is deprecated [-Wdeprecated-declarations]
     rb_frame_method_id_and_class(&_mid, &_klass);
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/ruby-2.5.0/ruby/ruby.h:24:0,
                 from /usr/include/ruby-2.5.0/ruby.h:33,
                 from rbtrace.c:24:
/usr/include/ruby-2.5.0/ruby/backward.h:53:37: note: declared here
 DECLARE_DEPRECATED_INTERNAL_FEATURE(rb_frame_method_id_and_class);
                                     ^
/usr/include/ruby-2.5.0/x86_64-linux-gnu/ruby/config.h:130:52: note: in definition of macro ‘NORETURN’
 #define NORETURN(x) __attribute__ ((__noreturn__)) x
                                                    ^
/usr/include/ruby-2.5.0/ruby/backward.h:39:14: note: in expansion of macro ‘ERRORFUNC’
     NORETURN(ERRORFUNC(("deprecated internal function"), DEPRECATED(void func(void))))
              ^~~~~~~~~
/usr/include/ruby-2.5.0/ruby/backward.h:39:58: note: in expansion of macro ‘DEPRECATED’
     NORETURN(ERRORFUNC(("deprecated internal function"), DEPRECATED(void func(void))))
                                                          ^~~~~~~~~~
/usr/include/ruby-2.5.0/ruby/backward.h:53:1: note: in expansion of macro ‘DECLARE_DEPRECATED_INTERNAL_FEATURE’
 DECLARE_DEPRECATED_INTERNAL_FEATURE(rb_frame_method_id_and_class);
 ^
rbtrace.c:329:5: error: too many arguments to function ‘rb_frame_method_id_and_class’
     rb_frame_method_id_and_class(&_mid, &_klass);
     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
In file included from /usr/include/ruby-2.5.0/ruby/ruby.h:24:0,
                 from /usr/include/ruby-2.5.0/ruby.h:33,
                 from rbtrace.c:24:
/usr/include/ruby-2.5.0/ruby/backward.h:53:37: note: declared here
 DECLARE_DEPRECATED_INTERNAL_FEATURE(rb_frame_method_id_and_class);
                                     ^
/usr/include/ruby-2.5.0/x86_64-linux-gnu/ruby/config.h:130:52: note: in definition of macro ‘NORETURN’
 #define NORETURN(x) __attribute__ ((__noreturn__)) x
                                                    ^
/usr/include/ruby-2.5.0/ruby/backward.h:39:14: note: in expansion of macro ‘ERRORFUNC’
     NORETURN(ERRORFUNC(("deprecated internal function"), DEPRECATED(void func(void))))
              ^~~~~~~~~
/usr/include/ruby-2.5.0/ruby/backward.h:39:58: note: in expansion of macro ‘DEPRECATED’
     NORETURN(ERRORFUNC(("deprecated internal function"), DEPRECATED(void func(void))))
                                                          ^~~~~~~~~~
/usr/include/ruby-2.5.0/ruby/backward.h:53:1: note: in expansion of macro ‘DECLARE_DEPRECATED_INTERNAL_FEATURE’
 DECLARE_DEPRECATED_INTERNAL_FEATURE(rb_frame_method_id_and_class);
 ^
rbtrace.c: In function ‘sigurg’:
rbtrace.c:1084:3: warning: implicit declaration of function ‘rb_postponed_job_register_one’ [-Wimplicit-function-declaration]
   rb_postponed_job_register_one(0, rbtrace__receive, 0);
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
make: *** [Makefile:242: rbtrace.o] Error 1
ERROR:  Error installing /home/abuild/rpmbuild/SOURCES/rbtrace-0.4.8.gem:
        ERROR: Failed to build gem native extension.

    Building has failed. See above output for more information on the failure.
make failed, exit code 2
```
Does not rely on the GC hooks patch - uses MRI's GC events API directly instead.

This is just a quick attempt to get the GC tracing working again and might be a hack. I'll be happy to incorporate any feedback.
I'm running a rbtrace on a plain ruby project with celluloid (Ruby version 2.2.2). 

Trying to run a rbtrace from Terminal. 

> rbtrace -p 9831 -e 'Thread.new{GC.start;require "objspace";io=File.open("9831/FIRST.json", "w"); ObjectSpace.dump_all(output: io); io.close}'

Yield the following result 
Error: argument --pid (pid is not listening for messages, did you `require "rbtrace"`).

rbtrace is required successfully on the project. 

No idea what is wrong over here. 

OS : Ubuntu 16.04 LTS
ruby 2.2.2p95 (2015-04-13 revision 50295) [x86_64-linux]

```
sudo lsof -p 9831 | grep rbtrace
ruby    9831 joshianiket22  mem       REG                8,1   829136  525167 /home/joshianiket22/.rvm/gems/ruby-2.2.2@the_scp/gems/rbtrace-0.4.8/lib/rbtrace.so
```

Hello! I have the following setup, using rails 4.0.6

``` ruby
def create
  require "rbtrace"
  pid    = Process.pid
  result = system("bundle exec rbtrace -u 5000 -p #{pid} -e 'load #{Rails.root}/script/heap_dump.rb'")
  render json: { status: result }
end
```
- `require "rbtrace"` returns `true`
- my Gemfile does not require the gem, i.e: `gem "rbtrace", require: false`

And I still get the following error:

```
Error: argument --pid (pid is not listening for messages, did you `require "rbtrace"`).
```

PID is defined and I'm running in a separate thread which I later then join to the main one, i.e:

``` ruby
# heap_dump.rb

Thread.new do
  require "objspace"
  # should rbtrace be required here?
  ObjectSpace.trace_object_allocations_start
  GC.start
  filename = "#{DateTime.now.strftime("%d-%^B-%Y")}-#{ENV["USER"]}-#{Rails.env.upcase}.json"
  ObjectSpace.dump_all(output: File.open(filename, "w"))

  s3 = Aws::S3::Resource.new(credentials: Aws::Credentials.new(ENV["AWS_ACCESS_KEY_ID"], ENV["AWS_SECRET_ACCESS_KEY"]),
                             region: "us-east-1")

  object = s3.bucket("memory-benchmarks").object(filename)
  object.upload_file(filename, acl: "authenticated-read")
end.join
```

Maybe I need to require rbtrace on the block passed to the new thread :) but if there's any known issues around requiring the library it would be good to know :)

I'm also using `puma` as my web server
