Don't know if anyone is still reading this.
Attached file is just slightly changed to remember and show the exception, not just status code:

            $LastException = $_.Exception
            throw "Could not retrieve modules repository from '$DirectoryUrl'. Status code: $StatusCode Exception: $LastException"

For extra points you can check the state of the crypto and first add:

```
Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord 
Set-ItemProperty -Path 'HKLM:\SOFTWARE\Wow6432Node\Microsoft\.NetFramework\v4.0.30319' -Name 'SchUseStrongCrypto' -Value '1' -Type DWord
```
and then either:

    [Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

or (softer) add  Tls12 to the list (which has ssl3 and tls by default).

No need to restart shell or ISE any more - I just ran them in the same session and install-module started fetching immediately








PowerShell Core is nominally the same as PowerShell, but uses a different root name for its module/profile/program files directories. This PR checks the `$PSVersionTable` for the `PSEdition` property. I checked on posh 2.0 and the null key behaved as expected, meanwhile PowerShell Core 6 correctly identified as was then able to install modules.
```
Exception calling "DownloadString" with "1" argument(s): "The remote server returned an error: (500) Internal Server Error."
At line:1 char:1

+ (new-object Net.WebClient).DownloadString("http://psget.net/GetPsGet. ...
+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException
    + FullyQualifiedErrorId : WebException
```

and can't access `http://psget.net/GetPsGet.ps1`, get error like:

```

The request was aborted: Could not create SSL/TLS secure channel.

Description: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code. 

Exception Details: System.Net.WebException: The request was aborted: Could not create SSL/TLS secure channel.

Source Error: 

An unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below.
···
I have tried on multiple machines, with and without my proxy.

![image](https://user-images.githubusercontent.com/2555050/39910376-5387fb7a-54f7-11e8-8b56-1e38a13b9a1b.png)

I suspect that nobody can actually install it at all at the moment
`
C:\Users\benmi\OneDrive
> Get-Module -Name PowerShellGet -ListAvailable | Select-Object -Property Name,Version,Path

Name          Version Path
----          ------- ----
PowerShellGet 1.0.0.1 C:\Program Files\WindowsPowerShell\Modules\PowerShellGet\1.0.0.1\PowerShellGet.psd1


C:\Users\benmi\OneDrive
> Install-Module PowerShellGet -Force
Could not retrieve modules repository from 'https://github.com/psget/psget/raw/master/Directory.xml'. Status code:
At C:\Users\benmi\OneDrive\Documents\WindowsPowerShell\Modules\PsGet\PsGet.psm1:519 char:13
+             throw "Could not retrieve modules repository from '$Direc ...
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : OperationStopped: (Could not retri.... Status code: :String) [], RuntimeException
    + FullyQualifiedErrorId : Could not retrieve modules repository from 'https://github.com/psget/psget/raw/master/Directory.xml'. St
   atus code:

C:\Users\benmi\OneDrive
`

This is a new Windows 10 Pro 1703 Install. I'm trying to install the latest AzureRM Powershell bits.. 
I'm not sure if this is the right place to post this but it seems that there is an issue with your hosting server whenever I try to download file http://psget.net/GetPsGet.ps1. Your server tries to switch to https but it cannot make it. 

This is not blocking as we can still use https://raw.githubusercontent.com/psget/psget/master/GetPsGet.ps1 or the alternative setup procedure but it would be nicer to fix the setup procedure (to use github GetPsGet.ps1 script) or fix the https issue on the host server
I was looking at this and wanted to recommend a more updated cmdlet Invoke-WebRequest. 

This will make the readme easier to read.
Hello,

installing PSGet on [AppVeyor](https://www.appveyor.com/) (Windows Server 212 R2 Data Center Edition) results in an exception:

```
Downloading PsGet from https://github.com/psget/psget/raw/master/PsGet/PsGet.psm1
Invoke-WebRequest : The given path's format is not supported.
At line:42 char:13
+             Invoke-WebRequest -Uri $Url -OutFile $SaveToLocation
+             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException
    + FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand
 
Import-Module : The specified module 'C:\Users\appveyor\Documents\WindowsPowerShell\Modules C:\Users\appveyor\Documents\WindowsPowerShell\Modules\PsGet' was not loaded because no valid module file was found in any module 
directory.
At line:105 char:9
+         Import-Module -Name $Destination\PsGet
+         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    + CategoryInfo          : ResourceUnavailable: (C:\Users\appvey...l\Modules\PsGet:String) [Import-Module], FileNotFoundException
    + FullyQualifiedErrorId : Modules_ModuleNotFound,Microsoft.PowerShell.Commands.ImportModuleCommand
```

![image](https://cloud.githubusercontent.com/assets/956109/21297437/72801b8c-c580-11e6-9fc5-f5b977e3515f.png)

While it has a similar name, I don't consider this a dupe of #121 because the setup (and issues) are a bit different.

I have a 2008r2 instance that I'm trying to install Pester on via Chef, but the install fails when it comes time to install Pester. However, I tried swapping out `install-module pester` for `Get-PsGetModuleInfo Pester` to see if it's PsGet or Pester that's the issue, and it looks like it's PsGet, given that I can't even query for package info. I've also tried `install-module psurl` and got the exact same error (see subject line).

I would like to note, however, that these commands work fine on the same instance when run via a local PS session, but I'm bound by what I'm able to make use of via Chef (the `powershell_script` resource in this case). I should also note that Chef is going through SSH/Cygwin to run the powershell_script block.

I also tried installing pester via the local shell, and then running the automation again. That time I didn't encounter the error, but I'm assuming it's because of a different codepath taken in PsGet if a package is already installed.

Is this user error, or is the code making an assumption that it possibly shouldn't be? My background is almost exclusively Linux, so please forgive my lack of familiarity with the particulars of PS.

EDIT: Figured it out. https://github.com/psget/psget/blob/master/PsGet/PsGet.psm1#L465 is the culprit. While it's probably safe to assume that $Env:APPDATA is set on a Windows box, I guess the same doesn't necessarily apply when that box is being accessed through Chef/SSH/Cygwin (the sessions may end up having mismatched sets of environment variables). I just updated my PS script to explicitly set APPDATA to the value I pulled from the local PS session and it worked fine.
