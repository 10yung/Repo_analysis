**Describe the bug**
Adding Ignored Blocks comments to markup doesn't appear to be ignored.

**To Reproduce**
Steps to reproduce the behavior:
1. Have duplicated markup which jscpd finds as a clone.
2. Wrap the markup with `<!--jscpd:ignore-start-->`  & `<!--jscpd:ignore-end-->`
3. Run jscpd

**Expected behavior**
jscpd should ignore the markup.

**Desktop (please complete the following information):**
 - OS: Windows 10 Pro
 - OS Version: 1903
 - NodeJS Version: 10.16.3
 - jscpd Version: 2.0.16


Hi there,

Can JSCPD be used to compare plain text (i.e. text files), ignoring new lines and case?
**Is your feature request related to a problem? Please describe.**
Want to compare the files from diffs in branchs between master and all other source files , like using eslint to compare diffs to increase comparing speed and reduce the report size. Is this feature will be supported?

**Describe the solution you'd like**
Support diff commits in config files or cli

**Describe alternatives you've considered**
no

**Additional context**
no
**Describe the bug**
JSCPD tool is not working on node 6.x

**To Reproduce**
Steps to reproduce the behavior:
1. Run node 6.x
2. Start the jscpd

**Error**
TypeError: Object.values is not a function
    at JSCPD.initializeListeners (/home/travis/build/Kinvey/flex-sdk/node_modules/jscpd/build/jscpd.js:341:16)
    at new JSCPD (/home/travis/build/Kinvey/flex-sdk/node_modules/jscpd/build/jscpd.js:119:14)
    at Object.<anonymous> (/home/travis/build/Kinvey/flex-sdk/node_modules/jscpd/build/cli.js:49:11)
    at Module._compile (module.js:577:32)
    at Object.Module._extensions..js (module.js:586:10)
    at Module.load (module.js:494:32)
    at tryModuleLoad (module.js:453:12)
    at Function.Module._load (module.js:445:3)
    at Module.require (module.js:504:17)
    at require (internal/module.js:20:19)
**Describe the bug**
The console and HTML reporters do not consistently report the same output, all the while the verbose reporter does.

**To Reproduce**
Run jscpd twice consecutively on the same repo without any changes to the files nor the jscpd configuration.

**Expected behavior**
JSCPD reports should always be identical when run on the same files with the same configuration.

**Case**
These two commands were run consecutively, without any changes to the files nor the jscpd configuration.
![jscpd_bug_report](https://user-images.githubusercontent.com/770825/58812658-96e34e80-8622-11e9-8fa4-f4b81fe1e288.png)
The HTML reports generated were similar in both cases to the console report, meaning that files missing from the console report were also missing from the HTML report.
When I added the verbose reporter, I could see that even if the console and HTML reports did not reflect it, the 4 files were always scanned.

**Desktop**
 - OS: Windows
 - OS Version: 10
 - NodeJS Version: 10.15.3
 - jscpd version: 2.0.15


**Additional context**
It should be noted that I encountered that behavior on a very small repository comprising of only a few very small files.

How I run the command: `jscpd ./ --blame --ignore node_modules`
My output:
```
(node:13673) Warning: N-API is an experimental feature and could change at any time.
Clone found (markdown):
 - README.md [4:1 - 104:109]
   2019.md [4:1 - 104:109]

┌────────────┬────────────────┬─────────────┬──────────────┬──────────────────┬────────┐
│ Format     │ Files analyzed │ Total lines │ Clones found │ Duplicated lines │ %      │
├────────────┼────────────────┼─────────────┼──────────────┼──────────────────┼────────┤
│ markdown   │ 9              │ 755         │ 1            │ 100              │ 13.25% │
├────────────┼────────────────┼─────────────┼──────────────┼──────────────────┼────────┤
│ javascript │ 6              │ 247         │ 0            │ 0                │ 0%     │
├────────────┼────────────────┼─────────────┼──────────────┼──────────────────┼────────┤
│ json       │ 2              │ 429         │ 0            │ 0                │ 0%     │
├────────────┼────────────────┼─────────────┼──────────────┼──────────────────┼────────┤
│ yaml       │ 269            │ 10148       │ 0            │ 0                │ 0%     │
├────────────┼────────────────┼─────────────┼──────────────┼──────────────────┼────────┤
│ Total:     │ 286            │ 11579       │ 1            │ 100              │ 0.86%  │
└────────────┴────────────────┴─────────────┴──────────────┴──────────────────┴────────┘
Execution Time: 3480.919ms
```
I ran the command on this repo: https://github.com/Semigradsky/events
OS: Ubuntu 17.10
Git is installed and available in command line.
http://kucherenko.github.io/jscpd-report.html
**Describe the bug**
I dumped out a large number of JS Files for analysis.  Not sure the specific cause of the problem.  After running for a while the code returns with the error -

(node:8754) UnhandledPromiseRejectionWarning: TypeError: Cannot read property 'sourceId' of undefined
    at Object.<anonymous> (/usr/local/lib/node_modules/jscpd/build/clone/index.js:66:55)
    at step (/usr/local/lib/node_modules/jscpd/build/clone/index.js:32:23)
    at Object.next (/usr/local/lib/node_modules/jscpd/build/clone/index.js:13:53)
    at fulfilled (/usr/local/lib/node_modules/jscpd/build/clone/index.js:4:58)
(node:8754) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:8754) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

**To Reproduce**
Steps to reproduce the behavior:
1. Extract the attached js files into a directory
2. npx jscpd ./js 
3. The error occurs

**Expected behavior**
The analysis concludes or a better error is returned to allow for correction of any file problems.

**Desktop (please complete the following information):**
 - OS: MacOs
 - OS Version: 10.14.4
 - NodeJS Version: 6.5.0

[js.zip](https://github.com/kucherenko/jscpd/files/3152842/js.zip)


**Is your feature request related to a problem? Please describe.**
The default store `level` has few disadvantages over `memory`:
  - it creates an intermediary `.jscpd/` folder.
  - it is slower. At least on one medium-size repository I tried, it took 20 seconds for `level` and 15 seconds for `memory`.

I think the main issue with `memory` is that it does not work with huge repositories. However, the vast majority of users won't have that edge case. The ones that do can opt-in to use `level` instead.

**Describe the solution you'd like**
Change the default value of `storeOptions` to `level` instead.
**Describe the bug**
Run `npm install -g jscpd`

Got the following errors

```
root@gally:~# npm install -g jscpd
/usr/local/bin/jscpd -> /usr/local/lib/node_modules/jscpd/bin/jscpd

> leveldown@4.0.2 install /usr/local/lib/node_modules/jscpd/node_modules/leveldown
> prebuild-install || node-gyp rebuild

prebuild-install WARN install EACCES: permission denied, access '/root/.npm'
gyp WARN EACCES user "root" does not have permission to access the dev dir "/root/.node-gyp/8.10.0"
gyp WARN EACCES attempting to reinstall using temporary dev dir "/usr/local/lib/node_modules/jscpd/node_modules/leveldown/.node-gyp"
gyp WARN install got an error, rolling back install
gyp WARN install got an error, rolling back install
gyp ERR! configure error 
gyp ERR! stack Error: EACCES: permission denied, mkdir '/usr/local/lib/node_modules/jscpd/node_modules/leveldown/.node-gyp'
gyp ERR! System Linux 4.15.0-47-generic
gyp ERR! command "/usr/bin/node" "/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js" "rebuild"
gyp ERR! cwd /usr/local/lib/node_modules/jscpd/node_modules/leveldown
gyp ERR! node -v v8.10.0
gyp ERR! node-gyp -v v3.8.0
gyp ERR! not ok 
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! leveldown@4.0.2 install: `prebuild-install || node-gyp rebuild`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the leveldown@4.0.2 install script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     /root/.npm/_logs/2019-04-16T04_39_38_792Z-debug.log
```

**To Reproduce**
Run `npm install -g jscpd`

**Expected behavior**
The command should succeed and jscpd should be in /usr/local/bin/


**Desktop (please complete the following information):**
- Ubuntu
- npm --version: 6.9.0


**Additional context**
Add any other context about the problem here.
