When can we support the trafodion database?
[http://trafodion.apache.org](url)
is there any thoughts or plans to implement something like ignore errors for PostgreSQL.
Trying to show how sysbench behave during a PostgreSQL pod failure. with MySQL I can use --mysql-ignore-errors=all, and then if the DB pod gets killed, the sysbench continue to run and just until the referenced database is up in a new pod. 
maybe there's a way to do this on PostgreSQL, but I can't find it.
Hi, 

I was running a series of tests and I have noticed the `get_id()` function does not really random:

```
local function get_id()
   return sysbench.rand.default(1, sysbench.opt.table_size)
end
```

It should be generating numbers between 1 and the table size, in my test I was using 1000 as table size, so it should get random numbers between 1 and 1000. 

To make it simple I was only using one function called `execute_index_updates` and I just printed the the ids: `print (id)`

I logged the output in a file:
```
cat get_id_default_int.log| wc -l
142777
```

```
cat  get_id_default_int.log | sort | uniq -c | sort -rn | head -n 20
  13106 500
  12901 505
  12879 501
  12726 504
  12636 502
  12632 499
  12604 503
   9714 498
   6419 506
   1971
    184 494
    184 493
    180 536
    176 534
    176 517
    175 485
    174 551
    174 488
    173 532
    173 496
```
13106+12901+12879+12726+12636+12632+12604=89484

There is `142777` line in the file and only 8 numbers responsible `89484` of that which is more than 60% off all the lines. So basically when I am running MySQL benchmarks sysbench creates hotspots in the workload.

By digging the code a bit:

```
/*
  Return random number in the specified range with distribution specified
  with the --rand-type command line option
*/

uint32_t sb_rand_default(uint32_t a, uint32_t b)
{
  return rand_func(a,b);
}
```

I have retested by using the `--rand-type=uniform`
I was able to generate real random numbers:

```
cat get_id_default_uniform.log | sort | uniq -c | sort -rn  | head -n 20
   2399
    185 833
    184 314
    179 959
    179 555
    179 437
    177 15
    176 815
    175 896
    174 894
    174 224
    174 215
    173 901
    173 727
    173 361
    172 428
    172 319
    171 721
    171 394
    170 78
```

I also noticed sometimes the get_id() function does not create any numbers  and sometimes it creates numbers bigger than 1000 which is very wired.

In the log file I could see lines like this:

```
503
499500

503
503503

505
502500

503
506
```

So it look like there is something wrong going under the hood.

If this is a feature to be able to test hotspots in that case this should be clearly documented but I would recommend to change `get_id` from `default` to `uniform` because I think most of the ppl does not realise `default` will generate hotspots in their tests and this could make many tests give misleading results.

Hi Aleksey

I just noticed there's a problem in the packagecloud.io scripts to install a repo for sysbench. I use Amazon Linux 2, and it is correctly detected as amzn/2, but it tries to use el/6 repo. I think this error was previously masked, because I also install EPEL 7 and it seems to provide `sysbench-1.0.17-2.el7`. It is only now that you released 1.0.18 that install fails.

The first script is correct:

    Detected operating system as amzn/2.
    Checking for curl...
    Detected curl...
    Downloading repository file: https://packagecloud.io/install/repositories/akopytov/sysbench/config_file.repo?os=amzn&dist=2&source=script
    done.

However, contents of repository file from above url is wrong:

    [akopytov_sysbench]
    name=akopytov_sysbench
    baseurl=https://packagecloud.io/akopytov/sysbench/el/6/$basearch
    ...




Is there a command line option to control to the TLS mode when connecting to postgres? Unlike --mysql-ssl, pgsql-ssl don't seem to be present.
When measuring the system performance on Windows, running inside "WSL" does not make sense, since "WSL" itself is slow.

So please add native build support on Windows. 

Thanks
Hi! I am new to Sysbench and I wonder is there a manual for Sysbench 1.x? I want to simulate the performance of my MySQL branch under some very certain circumstances, but a handful of syntax has deprecated in 1.x.  
I've searched online to find one, but the manual was too old and I realized that many changes had taken place in Sysbench 1.x.   
Therefore I wonder if there is a manual to help me.  
Thanks in advance!
We're trying to get sysbench running on one of DigitalOcean's recently released Managed MySQL containers.

Running the command:

    sysbench /usr/share/sysbench/oltp_read_write.lua --mysql-host=<HOST> --mysql port=25060 --mysql-user=<USER> --mysql-password=<REDACTED> --db-driver=mysql --tables=3 --table-size=1000000  prepare

Results in the following error:

    sysbench 1.0.17 (using bundled LuaJIT 2.1.0-beta2)

    FATAL: unable to connect to MySQL server on host 'db-mysql-nyc1-12965-do-user-690043-0.db.ondigitalocean.com', port 25060, aborting...
    FATAL: error 2026: SSL connection error: unknown error number
    FATAL: `sysbench.cmdline.call_command' function failed: /usr/share/sysbench/oltp_common.lua:83: connection creation failed

However if we try to connect to this via command line or using DataGrip, it connects just fine. The part that is frustrating is the `FATAL: error 2026: SSL connection error: unknown error number`, which clearly sysbench is having an issue connecting, but then passes an `unknown error number`. Makes things difficult to debug!

Has anyone run into this problem before?
Hello,

I would like to request a downloadable binary with LuaJit set up at 64 bit.

After this patch:
https://www.freelists.org/post/luajit/Fixed-a-segfault-when-unsinking-64bit-pointers

It is possible to compile the binary  by either building it with LUAJIT_ENABLE_GC64 symbol defined as:

msvcbuild.bat gc64

or XCFLAGS+= -DLUAJIT_ENABLE_GC64 in Makefile

You can also work with the file third_party/luajit/luajit/src/lj_arch.h generated after the ./configure and set:
 #define LUAJIT_ENABLE_GC64 1 

I've actually compiled this manually using XCFLAGS+ and #define LUAJIT_ENABLE_GC64 1 and here are my results:

**sysbench 1.1.0-e4e6d67** (using bundled LuaJIT 2.1.0-beta3)Running the test with following options:
**Number of threads: 8000**
Initializing random number generator from seed (1).Initializing worker threads...Threads started!SQL statistics:
    queries performed:
        read:                            98657664
        write:                           25735342
        other:                           16546514
        total:                           140939520
    transactions:                        7046976 (23047.42 per sec.)
    queries:                             140939520 (460948.40 per sec.)
    ignored errors:                      0      (0.00 per sec.)
    reconnects:                          0      (0.00 per sec.)Throughput:
    events/s (eps):                      23047.4201
    time elapsed:                        305.7599s
    total number of events:              7046976Latency (ms):
         min:                                    7.98
         avg:                                  341.22
         max:                                 5757.19
         95th percentile:                      458.96
         sum:                           2404566098.41Threads fairness:
    events (avg/stddev):           880.8720/199.89
    execution time (avg/stddev):   300.5708/1.14

Finally, I would like to mention that when running this binary for a prepare with 8 threads I got:

FATAL: `sysbench.cmdline.call_command' function failed: ./lua_scripts/lua/oltp_common.lua:222: attempt to call global 'sb_rand' (a nil value)

This error I don't have it with another 1.1 binary like the one used by DimitriK that he provides on his blog so not sure if this is something related to LuaJit or to something else. 
When i tried to build deb package on debian buster, apt-ge suggested that i should install libmariadb-dev-compat and libmariadb-dev instead of libmysqlclient-dev. And since libmariadb-dev-compat already depends on libmariadb-dev, I think adding libmariadb-dev-compat todependency list solves the issue.

If libmariadb-dev-compat not exists in build-depends list, then dpkg-buildpackage fails o build deb package.