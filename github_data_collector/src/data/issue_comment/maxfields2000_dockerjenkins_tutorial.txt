Not sure what I am doing wrong but in the step where I try to connect to http data source for the graphite it says http error not found. I followed the directions exactly and tried to modify troubleshoot but I am not getting very far. I wonder if something changed since 2 years ago?
Hi Max,

I know you are super busy and really hope you even just glimpse at my issue. I'm having issues with the Jenkins container. It's behind my NGINX proxy. I access it as you do on http://localhost:8080. After I log in I get kicked to http://localhost. Some links on Jenkins also does the same and removes the port which brakes the screen.

My NGINX conf file is like so...

    server {
       listen       80;
       server_name  "";

       access_log off;

       location / {
           proxy_pass         http://jenkins_master_1:8080;

           proxy_set_header   Host             $host;
           proxy_set_header   X-Real-IP        $remote_addr;
           proxy_set_header   X-Forwarded-For  $proxy_add_x_forwarded_for;
           proxy_set_header   X-Forwarded-Proto http;
           proxy_max_temp_file_size 0;

           proxy_connect_timeout      150;
           proxy_send_timeout         100;
           proxy_read_timeout         100;

           proxy_buffer_size          8k;
           proxy_buffers              4 32k;
           proxy_busy_buffers_size    64k;
           proxy_temp_file_write_size 64k;    

       }

    }

I've googled, tried adding a new listener to port 8080 like you mentioned on your tutorial. Trying to set this up to convince containers for work :/.

Thanks for any help you can!

Thanks,
Kieran
Have you considered including an `init.groovy.d/` script to automate the setup of docker-plugin? Going through the frontend is good for the tutorial, but it is tedious to perform those steps more than once. 

The [docker-plugin docs](https://wiki.jenkins.io/display/JENKINS/Docker+Plugin) has a rough template for the setup script but it excludes the pull strategy and connect method; moreover it seems like the docs are still showing deprecated usage. I understand that configuring Jenkins falls outside the scope of your guide (which is excellent by the way, thank you), but including the groovy script will expose another important aspect of automating Jenkins. Do you find that reasoning sound?
The readme says:

```
## Rebuild without blowing away local data

1. make stop
2. make clean
3. make build
4. make run
```

But the makefile doesn't content the `clean` target. It does `clean-data` and `clean-images`, so I suppose that `make clean` should be `make clean-data`.

Also: 

```
## Rebuild AND blow away local data

1. make stop
2. make clean-data
3. make build
4. make run
```
That I suppose should be `make clean-images` instead of `make clean-data`.

Hi @maxfields2000 I'm so thankful for this tutorial. I just a few inquiry.
Is it possible to deploy this to ECS? 
Also if i use this for Production what would you recommend changing? 

Thanks! 
(Newbie for Jenkins and Docker)
Hey @maxfields2000 Max,

this is more a question around YADP but I was wondering whether you had (a) come across it (and maybe have a successful implementation) and (b) think its a good idea or not to assign multiple docker hosts to a single YADP Cloud under a load balancer.

I have also asked this question on the YADP issues log here : https://github.com/KostyaSha/yet-another-docker-plugin/issues/183

What I want to do is provide a cluster of docker hosts assigned to a YADP Cloud that are available to spin up ephemeral slaves, ... to provide both scalability and resilience. I seem to recall that amongst your blog posts you suggested you were running a 'farm' of hosts for that purpose (but I could be making a leap here)

So, what I did was to use a value for the Docker URL property in the YADP Cloud specification to point to a load balancer (in my case and AWS ELB) under which there are multiple docker host instances.

My observed behaviour:

If I have a SINGLE instance under the ELB, slave containers launch successfully and run whatever job you ask them to, harvest the results and then terminate cleanly.

If I attach a second host to the ELB and execute a Jenkins job, multiple containers launch on BOTH hosts (and continue to do so until you abort the job).

In the Jenkins log you see lots of exception messages like this (with differing container ids) ...

```
Error during callback
com.github.kostyasha.yad_docker_java.com.github.dockerjava.api.exception.NotFoundException {"message":"No such container: f859ea6e2707d21bb9a2d585713fbc262629b2926f0d86453d28d76bf48fd811"}
```

When you abort the job you have a bunch of containers to clean up on both hosts as well as a failed job.

So, I'm not sure if this plugin only works with single docker hosts or it can be configured to a load balanced cluster (I prefer the latter).

Do you think this is a reasonable approach, or would you suggest that a YADP Cloud should only ever refer to a single docker host ?

I had some further thoughts about defining my docker hosts within a docker swarm cluster (since the swarm master know where all the containers are and should be able to route to them given a container or service id). However, in reading over the YADP issues log it appears that the plug-in doesn't support swarm mode (I haven't tried it yet but swarm's unit of deployment is a 'service' rather than an individual container).

Any thoughts much appreciated.

Regards

Fraser.