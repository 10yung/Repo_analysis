I'm getting this error running a diff between the files in this gist:

https://gist.github.com/benburleson/813fe5be96bacf942e82bb15e3352808

I found this from a local implementation and thought I must have something misconfigured or wrong elsewhere, but then I found the same error when providing the two files as input here: https://prettydiff.com/
I use prettydiff as a beautifier as part of [atom-beautifier](https://github.com/Glavin001/atom-beautify). I recently encountered an odd behavior and  was able to boil it down to the following minimal example:

This xml
```xml
<module name="foo" ver="1.0">
  <encodingRules null=" "/>
<type name="Header" len="3"></type>
```
 is "beautified" to 
```xml
<module name="foo" ver="1.0">
  <encodingRules null=" "/>
<type name=" Header" len=" 3"="3""></type>
```
Problem: The values now have a leading space-char and `len` got an extra `="3""` .
As soon as `null=" "` is removed, the beautifier works.

Since this did not happen with some other beautifiers I thought it might be worth a mention.

### Source - test.txt.twig 
```
#test.txt test 
#contact=test@test.foo

{{ foo }}
test.com, 111, DIRECT
test.com, 111, DIRECT
```
### Output
```
Error: Library prettydiff.beautify.markdown does not exist.
```
---

ðŸ›‘Whatever the reason may be, prettydiff should never delete the source.

We had to rename the file to test.twig.txt as a workaround.



# Source
```
{% block content %}
        <script data-prettydiff-ignore>
              (function () {  
                var d = document, s = d.createElement('script');
              })();
        </script>
  {% endblock %}
```
# Problem
`vendor/bin/prettydiff.sh test.twig`

```
test/node_modules/prettydiff/js/prettydiff.js:10983
                        : tagName(data.token[data.begin[parse.count]].toLowerCase())
                                                                      ^

TypeError: Cannot read property 'toLowerCase' of undefined
    at lexer_markup_content (test/node_modules/prettydiff/js/prettydiff.js:10983:71)
    at Object.lexer_markup [as markup] (test/node_modules/prettydiff/js/prettydiff.js:11353:17)
    at Object.parse_parser [as parser] (test/node_modules/prettydiff/js/prettydiff.js:57:50)
    at mode (test/node_modules/prettydiff/js/prettydiff.js:2043:49)
    at node_apps_readMethod_resolve_stat_resolveItem_fileCallback_diffrc (test/node_modules/prettydiff/js/services.js:3673:64)
    at node_apps_readMethod_prettydiffrc (test/node_modules/prettydiff/js/services.js:3196:13)
    at Object.node_apps_readMethod_resolve_stat_resolveItem_fileCallback [as callback] (test/node_modules/prettydiff/js/services.js:3668:45)
    at node_apps_readFile_file_open_read_read
```

---

It works as expected after deleting the `data-prettydiff-ignore` attribute

***This works***
```
{% block content %}
        <script>
              (function () {  
                var d = document, s = d.createElement('script');
              })();
        </script>
  {% endblock %}
```


The problem is, that your XHR requests are made without https.
With Python f-strings it inserts a space between the f and the quote. Example:

print(f'Hello World')

...gets changed to:

print(f' Hello World')

...which is illegal syntax.
When deploying compressed CSS, responsive display is broken.
Media Query at that time is this.
`@media screen and(max-width:768px) {}`

It worked fine if I cured this.
Insert a space after and.
`@media screen and (max-width:768px)`

I didn't know where to report this error and wrote it here.
I ca nâ€™t speak English, so I â€™m sorry if I had a rude expression using Google Translate.

# Source
```
<div class="always-present{% if withCollapse %}with-collapse" data-toggle="collapse"{% else %}no-collapse"{% endif %}>
<p>Thingy here, possibly with collapse attached.</p>
</div>
```

# Result after beautify
```
<div class="always-present{% if withCollapse %}with-collapse" data-toggle="collapse" {% else %} no-collapse="no-collapse"
```

# Problem
**The `{% endif %}` and everything afterwards just get stripped away!**

# Story
I ran into this issue with titles that only sometimes have a collapsed attached.
To achieve different styling, I add different classes depending on some logic.
Trying to be clever, I also wanted to add other HTML attributes using the same logic.

When wanting a collapse, I add the class `with-collapse` to the class-attribute.
Also, I add the `data-toggle="collapse"` attribute.
When not wanting a collapse, I add the class `no-collapse` to the class-attribute.
The data-toggle-attribute is omitted in this case.

I realize this is messy HTML to begin with and it might be bad practice to use if-clauses to split HTML attributes the way I did.
PHPStorm already warns me that not all tags are claused since it somehow cannot handle the entanglement of attributes and if-clauses, too.
But still I think just deleting stuff is not a sane way to handle this ;)

----
Please excuse me if you find the bug report lacking or peculiar somehow, this is my first time ;)

----
PS: Turning the logic around makes no difference.

## Source
```
<div class="always-present{% if noCollapse %} no-collapse"{% else %}with-collapse" data-toggle="collapse"{% endif %}>
<p>Thingy here, possibly with collapse attached.</p>
</div>
```

## Result
```
<div class="always-present{% if noCollapse %} no-collapse" {% else %} with-collapse" data-toggle=" collapse="collapse"
```

----
Edits for layout.
Example to reproduce on https://prettydiff.com/ (Beautify mode)

Before:
```twig
<html>
    <head></head>
    <body>
        <!-- 
            ALL SPACES AND NO TABS
            MAKES JACK A DULL BOY
        -->
        {#
            ALL SPACES AND NO TABS
            MAKES JACK A DULL BOY
        #}
        <p>
            ALL SPACES AND NO TABS
            MAKES JACK A DULL BOY
        </p>
        <div class="rows">
            <!-- 
                ALL SPACES AND NO TABS
                MAKES JACK A DULL BOY
            -->
            {#
                ALL SPACES AND NO TABS
                MAKES JACK A DULL BOY
            #}
            <p>
                ALL SPACES AND NO TABS
                MAKES JACK A DULL BOY
            </p>
            
            {# also note space introduced in the below div #}
            <div class="row date-row"></div>
            {% for person in data.people %}
                <div class="row">
                    <td class="name">{{ person.displayName }}</td>
                </div>
            {% endfor %}
        </div>
    </body>
</html>
```

After:
```twig
<html>
    <head></head>
    <body>
        <!--
            ALL SPACES AND NO TABS
                    MAKES JACK A DULL BOY -->
        {#
            	    ALL SPACES AND NO TABS
                    MAKES JACK A DULL BOY
            	#}
            <p>
        ALL SPACES AND NO TABS
                    MAKES JACK A DULL BOY
        </p>
            <div class="rows"> <!--
                    ALL SPACES AND NO TABS
                                MAKES JACK A DULL BOY -->
            {#
                    	    ALL SPACES AND NO TABS
                            MAKES JACK A DULL BOY
                    	#}
                <p>
            ALL SPACES AND NO TABS
                            MAKES JACK A DULL BOY
            </p>
            {# also note space introduced in the below div #}<div class="row date-row"> </div>
            {% for person in data.people %}
                <div class="row">
                    <td class="name">{{ person.displayName }}</td>
                </div>
            {% endfor %}
        </div>
    </body>
</html>
```

Formatting the output repetedly pushes the wrapped lines further and further right. Having combined with the format on save options, they run away to infinity (and beyond).

A couple issues have been raised about this in other repos.
https://github.com/mblode/vscode-twig-language/issues/41
https://github.com/mblode/vscode-twig-language-2/issues/50
Having read the above description in the documentation I assumed I could use prettydiff as a plug-in replacement for the Unix diff in a separate program that expects diff output to look a certain way. This is not at all the case, as you can see in this example:

```
$ diff tmp/difftest1 tmp/difftest2
3,6c3
<     puts "Hello, world"
<   end
<   def goodbye
<     puts "Goodbye, world"
---
>     puts "Hello, #{self}"
```

```
$ prettydiff diff diff_format:text source:tmp/difftest1 diff:tmp/difftest2

Line: 3
    puts "Hello, world"
    puts "Hello, #{self}"

Line: 5
  def goodbye
    puts "Goodbye, world"
  end


Pretty Diff found 2 differences on 2 lines.
```

A program expecting the former will not even nearly be able to parse the latter, and it seems a bit misleading to say the two are "similar".

My suggestions for solutions are to either:

- Remove the statement about similarity to Unix diff; or, ideally
- Add a new `diff_format:normal` which actually does output something similar to the Unix diff "normal" format!