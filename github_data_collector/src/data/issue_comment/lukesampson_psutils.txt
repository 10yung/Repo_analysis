Hi guys. I have this issue: if i start a cmd window using sudo, the history of typed commands is gone. Any way to make it works? Thank you!
It seems that the sudo command gets caught by some antivirus programs.

Example from Bitdefender:
`PowerShell tried to load a potentially malicious resource and was blocked.Your device is safe.`

Do you know of any ways around this? (that isn't to put PowerShell on the exceptions list)
The problem is solved. #20 
Thanks @jtc42 for providing a workaround of pwsh.
[https://github.com/jtc42/psutils/blob/master/sudo.ps1](https://github.com/jtc42/psutils/blob/master/sudo.ps1)
Now,  `sudo` both work in powershell and pwsh.
See below:

![image](https://user-images.githubusercontent.com/6901815/62417280-62216100-b67e-11e9-97c7-146038da85b0.png)

The same thing does `timecmd`.
I'm not 100% sure if this is an issue with gitignore or my bad powershell skills, but I thought I would just add this here because maybe it's an easy fix. 

When I tried using the `gitignore` util with the powershell command `gitignore python >> .gitignore` the command produced the full python gitignore template but the template didn't seem to be recognised by git. One of the excluded directories in the template is `/build` yet whenever I did a `git add .` on a fresh repository the `/build` directory was always included. 

However, if I copied the template from gitignore.io to a new `.gitignore` file then there was no issue and the `build` folder wasn't staged. So I wonder if this is a text encoding issue, because when I copy and pasted the .gitignore file works but when piped it doesn't. I also noticed that the command line tool on gitignore.io adds `-Encoding ascii` to their [command ](https://docs.gitignore.io/install/command-line) 

Here are the `.gitignore` files that I generated.
[not_working.txt](https://github.com/lukesampson/psutils/files/3359858/not_working.txt)
[working.txt](https://github.com/lukesampson/psutils/files/3359859/working.txt)

I have my powershell profile in C:\Users\Username\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1. I added some custom functions and aliases there that need admin privileges which I can access without problems while running powershell as administrator and typing `MyFunction` but on non-elevated powershell `sudo MyFunction` doesn't even recognize the function name and throws error:

```
MyFunction : The term 'MyFunction' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.
At line:1 char:1
+ MyFunction
+ ~~~~~~~~~~~~~~~~
    + CategoryInfo          : ObjectNotFound: (MyFunction:String) [], CommandNotFoundException
    + FullyQualifiedErrorId : CommandNotFoundException
```
I noticed that if one of the `$args` is a boolean like `$false` it gets converted to a string and causes problems in some cmdlets.

```
> sudo Disable-NetAdapter -Name "Wi-Fi" -Confirm:$false
Disable-NetAdapter : Cannot convert 'System.String' to the type 'System.Management.Automation.SwitchParameter' required by parameter 'Confirm'.

> sudo powershell
# Disable-NetAdapter -Name "Wi-Fi" -Confirm:$false
# Enable-NetAdapter -Name "Wi-Fi" -Confirm:$false
```
Most of my scripts calls `Set-StrictMode -Version Latest;` initially, and I've noticed that touch fails in this mode:

```
Set-StrictMode -Version Latest; 
touch <file>

The property 'A' cannot be found on this object. Verify that the property exists.     
At ...\touch.ps1:45 char:4                          
+ if($opts.A) {                                                                       
+    ~~~~~~~                                                                          
    + CategoryInfo          : NotSpecified: (:) [], ParentContainsErrorRecordException
    + FullyQualifiedErrorId : PropertyNotFoundStrict                                  
```

This can either be fixed by not accessing hashtable contents as members, but using the indexer, or by calling `Set-StrictMode -Off` at the beginning of the file.

Hope you fix this as I love your tools :-) And I'd be happy to make a PR with the change you'd prefer.
`sudo` does not work in PowerShell 6. 

Reproduce: 
* Install PowerShell 6 Core
* Run `sudo echo 1`
* Observe no UAC
* switch command to something that would otherwise require Admin privilege
* Observe command fails 
Sudo uses a fixed entry point for powershell instance: https://github.com/lukesampson/psutils/blob/master/sudo.ps1#L62

Could this be customizable?