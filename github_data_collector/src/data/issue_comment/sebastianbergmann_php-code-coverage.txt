- [ ] Use GitHub Actions instead of Travis CI
- [x] Install Psalm using [Phive](https://phar.io/) as `tools/psalm` (`phive install --copy psalm`)
cs-fixer`)
- [x] Create Psalm configuration
- [ ] Add Psalm build step to GitHub Actions-based CI workflow
- [ ] Add PHP-CS-Fixer build step to GitHub Actions-based CI workflow

| Q                         | A
| --------------------------| ---------------
| php-code-coverage version | 7.0.10
| PHP version               | 7.3.11 
| Driver                    | Xdebug
| Xdebug version (if used)  | 2.9.0
| Installation Method       | Composer
| Usage Method              | PHPUnit
| PHPUnit version (if used) | 8.4.3

IDK if this issue should be on XDebug or php-code-coverage. I'll try here first.

For some reason when using XDebug if I test a `trigger_error()` the coverage report reports `}` as not executed. This does not happen with phpdbg. Images will explain it better.

`phpdbg -qrr vendor/bin/phpunit --whitelist DumbTest.php DumbTest.php --coverage-html coverage`
![coverage_phpdbg](https://user-images.githubusercontent.com/5282749/70531064-ee62f980-1b32-11ea-8923-f461e6c93dfa.png)

`php vendor/bin/phpunit --whitelist DumbTest.php DumbTest.php --coverage-html coverage`
![coverage_xdebug](https://user-images.githubusercontent.com/5282749/70531206-34b85880-1b33-11ea-82e7-4f839163ba4c.png)
![coverage_xdebug2](https://user-images.githubusercontent.com/5282749/70531201-3124d180-1b33-11ea-95b5-c089445ffb90.png)

Here is the code I'm using for the test.

```
<?php

use PHPUnit\Framework\TestCase;

class DumbClass {
    public function triggerError()
    {
        trigger_error('anything');
    }
}

class DumbClassTest extends TestCase
{
    public function testTriggerError()
    {
        $dumbObj = new DumbClass();
        $this->expectExceptionMessage('anything');
        $dumbObj->triggerError();
    }
}
```

| Q                         | A
| --------------------------| ---------------
| php-code-coverage version | 7.0.8
| PHP version               | 7.3.9
| Driver                    | Xdebug
| Xdebug version (if used)  | 2.7.2
| Installation Method       | Composer
| Usage Method              | other
| PHPUnit version (if used) | 

Failed run code : CodeCoverage->append(CodeCoverage->getData());
waa.... append() use the raw data ,  and getData() return the other type data.

OK, just change some "$data" to "$raw_data" in class CodeCoverage , so  the other people do not mistake again.

```php
<?php
    public function stop(bool $append = true, $linesToBeCovered = [], array $linesToBeUsed = [], bool $ignoreForceCoversAnnotation = false): array
    {
        if (!\is_array($linesToBeCovered) && $linesToBeCovered !== false) {
            throw InvalidArgumentException::create(
                2,
                'array or false'
            );
        }

        $raw_data = $this->driver->stop();
        $this->append($raw_data, null, $append, $linesToBeCovered, $linesToBeUsed, $ignoreForceCoversAnnotation);

        $this->currentId = null;

        return $raw_data;
}
    public function append(array $raw_data, $id = null, bool $append = true, $linesToBeCovered = [], array $linesToBeUsed = [], bool $ignoreForceCoversAnnotation = false): void{
// ...
}
    public function setData(array $data): void{
//...
}

```
I'm experiencing the same issue as #692 (seems to the `\SoapClient` causing some issues).

I traced the error to this `\DomDocument#save()` call.

This PR adds error checking to that call, so that at least the issue is reported.

### Before:
```
PHPUnit 8.3.5 by Sebastian Bergmann and contributors.
.                                                                   1 / 1 (100%)
Time: 46 ms, Memory: 6.00 MB
OK (1 test, 1 assertion)

Generating code coverage report in PHPUnit XML format ... done [8 ms]
```

### After:
```
PHPUnit 8.3.5 by Sebastian Bergmann and contributors.
.                                                                   1 / 1 (100%)
Time: 44 ms, Memory: 6.00 MB
OK (1 test, 1 assertion)

Generating code coverage report in PHPUnit XML format ... Unable to save the XML
flush error
```
Psalm was erroring about exception types in some coverage report formats (in phpunit repo), traced that to here.

It looks like the use of `CodeCoverage\RuntimeException` and `\RuntimeException` is is mixed, making thrown exception types inconsistent.

This PR makes the exceptions consistent. I've touched some places without any coverage, so the changes contain a lot test stuff. Some report facades should now even be 100% covered.
| Q                         | A
| --------------------------| ---------------
| php-code-coverage version | 7.0.7
| PHP version               | 7.3.6
| Driver                    | Xdebug
| Xdebug version (if used)  | 2.7.2
| Installation Method       | Composer
| Usage Method              | PHPUnit
| PHPUnit version (if used) | 8.3.4

Target Class
```php
<?php
declare(strict_types=1);

namespace App\Service;

class SoapClientService
{
    /**
     * @const string
     */
    const URL = 'http://example.com/service.jws?wsdl';

    /**
     * @var \SoapClient
     */
    protected $soapClient = null;

    /**
     * @param string $url
     * @return \SoapClient
     * @throws \InvalidArgumentException
     */
    public function getSoapClient(string $url = null)
    {
        if (!isset($this->soapClient)) {
            try {
                $this->soapClient = new \SoapClient(
                    $url ?? self::URL
                );
            } catch (\Throwable $error) {
                throw new \InvalidArgumentException('Failed to initialize Soap Client');
            }
        }

        return $this->soapClient;
    }
}
```

Target TestCase
```php
<?php
declare(strict_types=1);

namespace App\Tests\Service;

use App\Service\SoapClientService;
use PHPUnit\Framework\TestCase;

/**
 * Unit test for SoapClientService
 */
class SoapClientServiceTest extends TestCase
{

    public function testGetSoapClient(): void
    {
        $client = new SoapClientService();

        $this->expectException(\InvalidArgumentException::class);
        $client->getSoapClient('no-wsdl');
    }
}
```

Command for generate Code Coverage XML Report
```bash
vendor/bin/phpunit -v --coverage-xml build/coverage-xml
```

After executing comand, folder `build/coverage-xml` contains empty files.

Other reports (HTML, Clover, PHP) works as expected.

Also reproduced on the previous version of `sebastianbergmann/php-code-coverage`.
| Q                         | A
| --------------------------| ---------------
| php-code-coverage version | 6.1.4
| PHP version               | 7.1.10
| Driver                    | Xdebug / PHPDBG
| Xdebug version (if used)  | 2.7.0
| Installation Method       | Composer / PHPUnit PHAR
| Usage Method              | PHPUnit / other
| PHPUnit version (if used) | x.y.z

The results of the second visit will cover the first. I don't want to be covered. I want to know how I can not cover it. Thank you.



```
$ git clone git@github.com:sebastianbergmann/money.git

$ cd money

$ phpunit -c build

$ wget https://bitbucket.org/atlassian/clover/raw/bd0ebb6cc8cc3e3fdb878b2640078461b8902a32/etc/schema/clover.xsd

$ xmllint --noout --schema /tmp/clover.xsd build/logs/clover.xml 
build/logs/clover.xml:2: element coverage: Schemas validity error : Element 'coverage': The attribute 'clover' is required but missing.
build/logs/clover.xml:4: element package: Schemas validity error : Element 'package': This element is not expected. Expected is ( metrics ).
build/logs/clover.xml:2: element coverage: Schemas validity error : Element 'coverage': Missing child element(s). Expected is ( testproject ).
build/logs/clover.xml fails to validate
```

Although the use of  ```@covers``` and ```@coversNothing``` is really useful for generating good coverage reports, there are also times when we want to ignore those settings. For example, i may wish to see exactly what my integration tests are covering.

My proposal would be to add a command line flag to phpunit, for example ```--ignore-covers``` or something like that. Which would cause ```@covers``` and ```@coversNothing``` to be ignored when calculating the code coverage.

Slightly related to: https://github.com/infection/infection/issues/88#issuecomment-351005953
| Q                         | A
| --------------------------| ---------------
| php-code-coverage version | 4.0.8
| PHP version               | 7.0.24
| Driver                    | Xdebug
| Xdebug version (if used)  | 2.5.5
| Installation Method       | Composer
| Usage Method              | PHPUnit
| PHPUnit version (if used) | 5.7.23

Hello.
Is there an easy way to customize the colors in [style.css](https://github.com/sebastianbergmann/php-code-coverage/blob/master/src/Report/Html/Renderer/Template/css/style.css)? My variant of colorblindness make it pretty difficult to differentiate between high coverage (`#dff0d8`) and low coverage (`#f2dede`) as they both have very low saturation (8% to 10%). Thank you.