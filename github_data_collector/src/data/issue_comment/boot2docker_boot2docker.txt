Hey guys and girls,

i've had a weird disk IO performance drop (60%) with bound volumes since update to anything larger than 19.03.01.

I have successfully replicated the issue numerous times, on at least 5 comupters in my team. We all use macos catalinas or mojaves, with fully updated virtualboxes, multiple different processors and years of computers. I have mitigated the issue by forcing everyone to use 19.03.01, but am really interested in what exact change could have caused this drop? Especially since i went through the changelog, and saw nothing in particular...

https://github.com/boot2docker/boot2docker/compare/v19.03.1...v19.03.5

Currently i am testing all the releases in between to try and pinpoint exactly which one introduced this huge drop.
Once i pinpoint the release, i would like to test out individual commits. How can i compile the iso locally in order to checkout a commit and compile the iso and get the vm running?

If anyone has any details that might help me in researching further, please... :) 

**UPDATE 22.11.2019:** I've tested all mentioned versions with the same synthetic test (yarn build on node latest image) and the issue clearly appears only after update to 19.03.2. @tianon Since all commits come from you, do you have any viable idea what might have caused this slowdown? https://github.com/boot2docker/boot2docker/compare/v19.03.1...v19.03.2

By looking at activity monitor i am not 100% sure what is the bottleneck. Yes, the slowness comes from slow IO speeds, but it might be that the CPU is throttling everything, which causes slow io. I am saying this because CPU is dying on newer b2d versions.

If not, could you please explain to me how to build the iso locally so that i can test both changes individually?

[Dockerfile.txt](https://github.com/boot2docker/boot2docker/files/3099961/Dockerfile.txt)

Result for most recent released versions.
- v18.09.5 failed
- v18.09.4 failed
- v18.09.3 failed
- v18.09.2 failed
- v18.09.1 failed
- v18.09.0 pass
- v18.06.1-ce pass 

When build Docker images with more than 50-plus layers, the build will fail exactly at step 62 as shown below.
```
Step 62/100 : RUN touch foobar
error creating overlay mount to /mnt/sda1/var/lib/docker/overlay2/83fc9f0b117631bc8a412c13c44db45801ecb056068df501e6c093c7bc893a55-init/merged: no such file or directory
make: *** [Makefile:2: all] Error 1
```

To reproduce the bug.
```
docker build --no-cache -t "test-overlay-mount:alpine" -f Dockerfile.txt .
```
i noticed that the `ntpd` process gets started with a [hard-coded list of ntp-servers](https://github.com/boot2docker/boot2docker/blob/master/rootfs/rootfs/etc/rc.d/ntpd#L3):

    : ${NTP_SERVER:='0.boot2docker.pool.ntp.org 1.boot2docker.pool.ntp.org 2.boot2docker.pool.ntp.org 3.boot2docker.pool.ntp.org'}

nowadays, many companies block outgoing NTP-traffic (to prevent DDoS attacks), which makes this sub-optimal (eventually resulting in hangs until the ntpd times out).

i would have expected to be able to override the `NTP_SERVER` variable, but changes to `/var/lib/boot2docker/profile` seem to have no effect (that files seems to be only used by the `docker` process).

obviously, the `NTP_SERVER` value is meant to be settable (and the list of ntp-servers is only a fallback), but i don't see a way to inject any values.
For better integration into KVM/QEMU, the guest agent is started
analogously to the VMware, Hyper-V, XEN and Parallels agents.
NOTE: For tracking purposes, be aware that I also copy-pasted this same issue in two other palces because I'm not sure of the appropriate place given the problem: 

- https://github.com/docker/machine/issues/4432
- https://github.com/docker/for-win/issues/1862

Envrionment Info:
- Windows 1709
- Windows PowerShell 5.1
- Docker For Windows 17.12.0-ce-win47
- boot2docker.iso that says it's using Docker version 17.12.1-ce, build 7390fc6

From PowerShell:

    PS C:\Users\pdadmin> docker-machine create -d hyperv --hyperv-virtual-switch "ToInternal" DockerHostA
    Creating CA: C:\Users\pdadmin\.docker\machine\certs\ca.pem
    Creating client certificate: C:\Users\pdadmin\.docker\machine\certs\cert.pem
    Running pre-create checks...
    (DockerHostA) Image cache directory does not exist, creating it at C:\Users\pdadmin\.docker\machine\cache...
    (DockerHostA) No default Boot2Docker ISO found locally, downloading the latest release...
    (DockerHostA) Latest release for github.com/boot2docker/boot2docker is v17.12.1-ce
    (DockerHostA) Downloading C:\Users\pdadmin\.docker\machine\cache\boot2docker.iso from https://github.com/boot2docker/boot2docker/releases/download/v17.12.1-ce/boot2docker.iso...
    (DockerHostA) 0%....10%....20%....30%....40%....50%....60%....70%....80%....90%....100%
    Creating machine...
    (DockerHostA) Copying C:\Users\pdadmin\.docker\machine\cache\boot2docker.iso to C:\Users\pdadmin\.docker\machine\machines\DockerHostA\boot2docker.iso...
    (DockerHostA) Creating SSH key...
    (DockerHostA) Creating VM...
    (DockerHostA) Using switch "ToInternal"
    (DockerHostA) Creating VHD
    (DockerHostA) Starting VM...
    (DockerHostA) Waiting for host to start...

Docker-Machine hangs here. Using Hyper-V VM console (i.e. vmconnect.exe), I can see that during boot, boot2docker mentions that it can't find eth0 or eth1 (not sure why it says anything about eth1...there's only *one* Adapter attached to the VM, so there shoul only be an eth0 as far as I understand). While docker-machine continues to hang (after 80 seconds), here is the output of `Get-VM` Hyper-V cmdlet:

    PS C:\Users\pdadmin> $testA = Get-VM -Name DockerHostA
    PS C:\Users\pdadmin> $testA | fl *


    ParentCheckpointId                  : 1a188696-c3ac-4ecf-b140-c08cf78b1db6
    ParentCheckpointName                : Automatic Checkpoint - DockerHostA - (3/20/2018 - 12:12:00 PM)
    VMName                              : DockerHostA
    VMId                                : 6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b
    CheckpointFileLocation              : C:\Users\pdadmin\.docker\machine\machines\DockerHostA\DockerHostA
    ConfigurationLocation               : C:\Users\pdadmin\.docker\machine\machines\DockerHostA\DockerHostA
    SmartPagingFileInUse                : False
    SmartPagingFilePath                 : C:\Users\pdadmin\.docker\machine\machines\DockerHostA\DockerHostA
    SnapshotFileLocation                : C:\Users\pdadmin\.docker\machine\machines\DockerHostA\DockerHostA
    AutomaticStartAction                : StartIfRunning
    AutomaticStartDelay                 : 0
    AutomaticStopAction                 : Save
    AutomaticCriticalErrorAction        : Pause
    AutomaticCriticalErrorActionTimeout : 30
    AutomaticCheckpointsEnabled         : True
    CPUUsage                            : 0
    MemoryAssigned                      : 912261120
    MemoryDemand                        : 619708416
    MemoryStatus                        : OK
    NumaAligned                         : False
    NumaNodesCount                      : 1
    NumaSocketCount                     : 1
    Heartbeat                           : OkApplicationsUnknown
    IntegrationServicesState            :
    IntegrationServicesVersion          : 0.0
    Uptime                              : 00:03:12.6840000
    OperationalStatus                   : {Ok}
    PrimaryOperationalStatus            : Ok
    SecondaryOperationalStatus          :
    StatusDescriptions                  : {Operating normally}
    PrimaryStatusDescription            : Operating normally
    SecondaryStatusDescription          :
    Status                              : Operating normally
    ReplicationHealth                   : NotApplicable
    ReplicationMode                     : None
    ReplicationState                    : Disabled
    ResourceMeteringEnabled             : False
    CheckpointType                      : Standard
    EnhancedSessionTransportType        : VMBus
    Groups                              : {}
    Version                             : 8.3
    VirtualMachineType                  : RealizedVirtualMachine
    VirtualMachineSubType               : Generation1
    Notes                               :
    State                               : Running
    ComPort1                            : VMComPort (Name = 'COM 1', VMName = 'DockerHostA') [Id =
                                          'Microsoft:6ABB8E25-2BB1-4A7E-B19B-8D4DFC68A64B\8E3A359F-559A-4B6A-98A9-1690A6100ED7\0', VMId =
                                          '6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b']
    ComPort2                            : VMComPort (Name = 'COM 2', VMName = 'DockerHostA') [Id =
                                          'Microsoft:6ABB8E25-2BB1-4A7E-B19B-8D4DFC68A64B\8E3A359F-559A-4B6A-98A9-1690A6100ED7\1', VMId =
                                          '6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b']
    DVDDrives                           : {DVD Drive on IDE controller number 1 at location 0}
    FibreChannelHostBusAdapters         : {}
    FloppyDrive                         : VMFloppyDiskDrive (Name = 'Diskette Drive', VMName = 'DockerHostA') [Id =
                                          'Microsoft:6ABB8E25-2BB1-4A7E-B19B-8D4DFC68A64B\8F0D2762-0B00-4E04-AF4F-19010527CB93\0\0\D', VMId =
                                          '6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b']
    HardDrives                          : {Hard Drive on IDE controller number 0 at location 0}
    RemoteFxAdapter                     :
    VMIntegrationService                : {Guest Service Interface, Heartbeat, Key-Value Pair Exchange, Shutdown...}
    DynamicMemoryEnabled                : True
    MemoryMaximum                       : 1099511627776
    MemoryMinimum                       : 536870912
    MemoryStartup                       : 1073741824
    ProcessorCount                      : 1
    BatteryPassthroughEnabled           : False
    Generation                          : 1
    IsClustered                         : False
    ParentSnapshotId                    : 1a188696-c3ac-4ecf-b140-c08cf78b1db6
    ParentSnapshotName                  : Automatic Checkpoint - DockerHostA - (3/20/2018 - 12:12:00 PM)
    Path                                : C:\Users\pdadmin\.docker\machine\machines\DockerHostA\DockerHostA
    SizeOfSystemFiles                   : 81920
    GuestControlledCacheTypes           : False
    LowMemoryMappedIoSpace              : 134217728
    HighMemoryMappedIoSpace             : 536870912
    LockOnDisconnect                    : Off
    CreationTime                        : 3/20/2018 12:11:53 PM
    Id                                  : 6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b
    Name                                : DockerHostA
    NetworkAdapters                     : {Network Adapter}
    CimSession                          : CimSession: .
    ComputerName                        : WIN10LATESTA
    IsDeleted                           : False

...specifically note `$testA.NetworkAdapters.StatusDescription` and `$testA.NetworkAdapters.Status` ...

    PS C:\Users\pdadmin> $testA.NetworkAdapters | fl *


    VMCheckpointId                          : 00000000-0000-0000-0000-000000000000
    VMCheckpointName                        :
    VmmqQueuePairs                          : 1
    VmmqQueuePairsRequested                 : 16
    ClusterMonitored                        : True
    MacAddress                              : 00155D020D0A
    DynamicMacAddressEnabled                : True
    InterruptModeration                     : True
    AllowPacketDirect                       : False
    IsLegacy                                : False
    IsSynthetic                             : True
    IPAddresses                             : {}
    DeviceNaming                            : Off
    IovWeight                               : 0
    IovQueuePairsRequested                  : 1
    IovInterruptModeration                  : Default
    PacketDirectNumProcs                    : 0
    PacketDirectModerationCount             : 64
    PacketDirectModerationInterval          : 1000000
    IovQueuePairsAssigned                   : 0
    IovUsage                                : 0
    VirtualFunction                         :
    MandatoryFeatureId                      : {}
    MandatoryFeatureName                    : {}
    PoolName                                :
    Connected                               : True
    SwitchName                              : ToInternal
    AdapterId                               : 5B6CF86F-8B51-426F-840F-5F1B9DD5460F
    TestReplicaPoolName                     :
    TestReplicaSwitchName                   :
    StatusDescription                       : {Degraded, The protocol version of the component installed in the virtual machine does not match the version
                                              expected by the hosting system}
    Status                                  : {Degraded, ProtocolVersion}
    IsManagementOs                          : False
    IsExternalAdapter                       : False
    Id                                      : Microsoft:6ABB8E25-2BB1-4A7E-B19B-8D4DFC68A64B\5B6CF86F-8B51-426F-840F-5F1B9DD5460F
    SwitchId                                : f9884cc2-8d28-4c68-8f3b-202b55d77b90
    AclList                                 : {}
    ExtendedAclList                         : {}
    IsolationSetting                        : VMNetworkAdapterIsolationSetting
    RoutingDomainList                       : {}
    VlanSetting                             : VMNetworkAdapterVlanSetting
    BandwidthSetting                        :
    CurrentIsolationMode                    : Vlan
    MacAddressSpoofing                      : Off
    DhcpGuard                               : Off
    RouterGuard                             : Off
    PortMirroringMode                       : None
    IeeePriorityTag                         : Off
    VirtualSubnetId                         : 0
    DynamicIPAddressLimit                   : 0
    StormLimit                              : 0
    AllowTeaming                            : Off
    FixSpeed10G                             : Off
    VMQWeight                               : 100
    IPsecOffloadMaxSA                       : 512
    VrssEnabled                             : False
    VrssEnabledRequested                    : True
    VmmqEnabled                             : False
    VmmqEnabledRequested                    : False
    VrssMaxQueuePairs                       : 1
    VrssMaxQueuePairsRequested              : 16
    VrssMinQueuePairs                       : 1
    VrssMinQueuePairsRequested              : 1
    VrssQueueSchedulingMode                 : Dynamic
    VrssQueueSchedulingModeRequested        : Dynamic
    VrssExcludePrimaryProcessor             : False
    VrssExcludePrimaryProcessorRequested    : False
    VrssIndependentHostSpreading            : False
    VrssIndependentHostSpreadingRequested   : False
    VrssVmbusChannelAffinityPolicy          : Strong
    VrssVmbusChannelAffinityPolicyRequested : Strong
    VmqUsage                                : 0
    IPsecOffloadSAUsage                     : 0
    VFDataPathActive                        : False
    VMQueue                                 :
    BandwidthPercentage                     : 0
    IsTemplate                              : False
    Name                                    : Network Adapter
    VMId                                    : 6abb8e25-2bb1-4a7e-b19b-8d4dfc68a64b
    VMName                                  : DockerHostA
    VMSnapshotId                            : 00000000-0000-0000-0000-000000000000
    VMSnapshotName                          :
    CimSession                              : CimSession: .
    ComputerName                            : WIN10LATESTA
    IsDeleted                               : False

In this situation, I either need to kill the docker-machine process or wait for it to timeout.

Please note that this problem (i.e. boot2docker not recognizing the Network Adapter as a device) happens about 70% of the time. However, about 30% of the time, it actually works as expected.

If I am lucky enough to actually establish a Docker Machine, after a baremetal host reboot (or really, in any situation where the Docker Machine VM is going from a non "Running" state to a "Running" state), there is a similar probability that the same thing will happen (i.e. boot2docker not recognizing the Network Adapter as a device).

After several Docker Machine VM reboots, it eventually works as expected. However, this is very inconsistent - sometimes it takes 1 VM reboot, sometimes it takes 10. Doesn't matter if you use `docker-machine restart DockerHostA` or `Restart-VM -Name DockerHostA`.

This was also tested with similar results with the latest v18.03.0-ce-rc4 boot2docker.iso.
    


Mostly for fun, I created a X11 version of the boot2docker.iso

For more details, please see [boot2docker-x11desktop-md](https://gist.github.com/afbjorklund/cb63251c43f73a4314ada904ae8f8d87#file-boot2docker-x11desktop-md) ?

----
The ISO is available from here: [boot2docker-x11.iso](https://github.com/afbjorklund/boot2docker/releases/download/b117afe/boot2docker-x11.iso) (55M)
I am using docker-machines as nodes in our Jenkins CI, I noticed that the machines time keeps drifting, After digging into your code, I noticed that the `rc.d/ntpd` sets the Do Not Demonize flag `-n`. After a week or so of monitoring, the time sync seems to be working.
Was there a reason for this flag? If not, is this a possible fix?
Hi,

The kernel supports Open vSwitch and VXLAN tunnels, as seen in the `kernel_config` (`CONFIG_OPENVSWITCH` and `CONFIG_OPENVSWITCH_VXLAN`).

Unfortunately, it doesn't support GRE tunnels.
It would be great to add it, by adding `CONFIG_OPENVSWITCH_GRE` to the `kernel_config`.

Thanks (and btw, thanks for boot2docker 👍!!)
I'm using boot2docker with docker-machine create on ESXi. When creating a VM using DHCP everything works well however udhcpc registers itself as boot2docker hostname instead of the real hostname.

I see that dhcp.sh is correctly sending the request:
`    /sbin/udhcpc -b -i $DEVICE -x hostname:$(/bin/hostname) -p /var/run/udhcpc.$DEVICE.pid >/dev/null 2>&1 &
 `

So I guess it's invoked before the hostname is set. Could you give me advice on how to change that in boot2docker iso?
speed up travis-ci  build  speed with  cache

>4x faster than no docker image cache
after first build,then enable NOT_CACHE_IMG_AFTER_BUILD=true will faster more
when NOT_LOAD_CACHE_BEFORE_BUILD=true will using load cache image before build

and release iso to github with tag push if  github_api_key and DEPLOY_ISO_TO_GITHUB=true


