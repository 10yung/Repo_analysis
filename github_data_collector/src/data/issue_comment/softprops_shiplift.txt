<!--
1. If there is a breaking or notable change please call that out as these will need to be added to the CHANGELOG.md file in this repository.
2. This repository tries to stick with the community style conventions using [rustfmt](https://github.com/rust-lang-nursery/rustfmt#quick-start) with the *default* settings. If you have custom settings you may find that rustfmt
clutter the diff of your change with unrelated changes. Please apply formatting with `cargo +nightly fmt --all` before submitting a pr.
-->

## What did you implement:

This implements Deserialize on `ContainerOptions`. I switched the keys in the `ContainerOptions.params` hash map to owned strings instead of `&'static str`. Technically these could be borrowed from the deserialized value, but I think that would be cumbersome to use.

<!--
If this closes an open issue please replace xxx below with the issue number
-->

Closes: #216

## How did you verify your change:

Not at all yet ( this is work-in-progress ). I'll be testing it soon.

## What (if anything) would need to be called out in the CHANGELOG for the next release:

Just a note that Deserialize is now implemented for `ContainerOptions`.
<!-- Please search existing issues to avoid creating duplicates. -->

<!-- Describe the feature you'd like. -->

Is it possible to have [`ContainerOptions`](https://docs.rs/shiplift/0.6.0/shiplift/builder/struct.ContainerOptions.html) implement `Deserialize`? In my project I am intending to be able to serialize and deserialize a struct that contains a field of type `ContainerOptions`.
The `shiplift::builder::ContainerListOptionsBuilder::all()` method does not accept a boolean argument, assuming the value should be the string `"true"`. However, `shiplift::builder::ImageListOptionsBuilder::all()` takes a boolean argument, which it converts to a string. It would be nice if these were consistent.

I didn't check other builders, since those were the only two I was concerned with, but it is possible that there are other instances of the inconsistency.
We are using `shiplift` in a crate that we ship on three major platforms: windows, macos and linux.

Unfortunately, it is not possible to use different features of the same crate depending on the platform with cargo: https://github.com/rust-lang/cargo/issues/2524

Because of that and the way the crate is currently laid out makes it a bit painful to compile because we have to define two _non-default_ features `windows` and `unix` and pass the desired feature upon compilation.

I saw that there has already been an attempt to make using this crate on Windows easier: https://github.com/softprops/shiplift/pull/197

Looking at the dependencies and with https://github.com/rust-lang/cargo/issues/2524 in mind, I think there is a solution we could go for that makes consuming this crate among several platforms easier:

- We only really _need_ openssl on Windows.
- On Windows, we probably always want to vendor openssl to make compilation easier.
- We only need hyperlocal on unix systems.

Given that, I feel like we could define these dependencies based on the target platform instead of defining features.

The downside of the above approach would be that one could not use the crate on Unix with SSL but I am not sure what that would be useful for anyway.
If we still wanted to support that, I believe we could always define an optional feature that adds the openssl crate.

Opinions?
as per the doc: https://docs.rs/shiplift/0.5.0/shiplift/rep/struct.HostConfig.html, there are only 12 fields supported in HostConfig, leaving bunch of fields like `CpuQuota` and `CpuPeriod` unreachable.

here's docker inspect result example for your reference: https://docs.docker.com/engine/api/v1.24/
In contrast to the `docker build` command provided by the Docker CLI, the `build` method on the `Images` struct does not respect `.dockerignore` files. This is an issue especially for Rust crate build contexts that often have a `target` directory of a few GB or more, and are very slow to make it through the `tarbell::dir` steps of `shiplift`'s build process.

A couple of suggested approaches that could solve the problem:

1. **Respect `.dockerignore` files by default**: this would technically be a breaking change, but would better align with the Docker CLI equivalent command
2. **Add an option to `BuildOptions` enabling `.dockerignore` support**: this seems surprising if it's not enabled by default, but this change wouldn't be a _breaking_ change, at least
3. **Allow users to provide their own `tarball`s to a build command**: rather than dealing with the file system directly, users could use their own `tarball`-ing scheme and submit that archive directly to a separate build command (`build_from_archive`, perhaps?)

If any of those :point_up: sound like good options, I'd be happy to whip up a PR.
When attempting to use shiplift in a circleci environment with hyper, it must use `tcp` to connect to the remote docker daemon. This requires tls via the docker docs. The issue arises here https://github.com/softprops/shiplift/blob/master/src/transport.rs#L166 when the `tcp://` scheme is copied. The real problem is that hyper's version checking requires the use of `https` instead of `tcp` directly. Thus the fix here is to replace the scheme only when encrypted.

Reference failing tests in https://github.com/timberio/vector/pull/787
## What did you implement:

port of shiplift to futures-0.3

mostly complete, aside from the examples and a couple of methods

## What (if anything) would need to be called out in the CHANGELOG for the next release:

This is a change to support async/await syntax. It is a BREAKING CHANGE
It would be nice to relax the dependency on the tokio runtime for running shiplift futures.

This dependency exists because the http transport (Hyper) implicitly relies on the tokio runtime *by default*.

Hyper provides a means for optionally using a custom runtime by exposing a generic trait.

shiplift should re-expose this api so that it is not tightly coupled to tokio
Any plans to move to a futures-0.3 API?

This would allow easy interop with the async/await syntax.

The downside of course is that it's not quite stabilised, so could only target nightly.

Hyper has just about finished migrating, but even before that shiplift can start returning std::futures using the [compat layer](https://rust-lang-nursery.github.io/futures-rs/blog/2019/04/18/compatibility-layer.html).