Current result for mode 22000 is:

> macAP:macSTA:ESSID:password

When I capture several handshakes (WPA 02) and recover them via hashcat they have all the same macAP/macSTA/ESSID and I can't know which WPA 02 line has matched (useful for me to play with capture tools and options)

Would it be possible to add to the output something to differentiate them? For example the MIC (or PMKID for WPA*01) ?

Thanks.

It would be nice if it was possible for hashcat to apply rules from the inline rule engine after passwords are generated with a rulefile to eliminate bad candidates.
For a more detailed example where this might be useful, please see:
https://hashcat.net/forum/thread-8884-post-47208.html
Could you implement a GPU CRYPTO1 hardnested attack for Mifare Classic NFC keys?
This tool does this but it works with CPU and it's slow: https://github.com/nfc-tools/mfoc

Kernel build fails with these details and this message:
Mesa 13.0.6
Linux 4.9.0
gcc 4:6.3.0

    * Device #1: build_options '-D KERNEL_STATIC -I OpenCL -I /usr/share/hashcat/OpenCL -D LOCAL_MEM_TYPE=1 -D VENDOR_ID=16 -D CUDA_ARCH=0 -D HAS_ADD=0 -D HAS_ADDC=0 -D HAS_SUB=0 -D HAS_SUBC=0 -D HAS_VADD=0 -D HAS_VADDC=0 -D HAS_VADD_CO=0 -D HAS_VADDC_CO=0 -D HAS_VSUB=0 -D HAS_VSUBB=0 -D HAS_VSUB_CO=0 -D HAS_VSUBB_CO=0 -D HAS_VPERM=0 -D HAS_VADD3=0 -D HAS_VBFE=0 -D HAS_BFE=0 -D HAS_LOP3=0 -D HAS_MOV64=0 -D HAS_PRMT=0 -D VECT_SIZE=1 -D DEVICE_TYPE=4 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=16800 -D ATTACK_EXEC=10 -D ATTACK_KERN=3 -D _unroll '
    * Device #1: build_options_module '-D KERNEL_STATIC -I OpenCL -I /usr/share/hashcat/OpenCL -D LOCAL_MEM_TYPE=1 -D VENDOR_ID=16 -D CUDA_ARCH=0 -D HAS_ADD=0 -D HAS_ADDC=0 -D HAS_SUB=0 -D HAS_SUBC=0 -D HAS_VADD=0 -D HAS_VADDC=0 -D HAS_VADD_CO=0 -D HAS_VADDC_CO=0 -D HAS_VSUB=0 -D HAS_VSUBB=0 -D HAS_VSUB_CO=0 -D HAS_VSUBB_CO=0 -D HAS_VPERM=0 -D HAS_VADD3=0 -D HAS_VBFE=0 -D HAS_BFE=0 -D HAS_LOP3=0 -D HAS_MOV64=0 -D HAS_PRMT=0 -D VECT_SIZE=1 -D DEVICE_TYPE=4 -D DGST_R0=0 -D DGST_R1=1 -D DGST_R2=2 -D DGST_R3=3 -D DGST_ELEM=4 -D KERN_TYPE=16800 -D ATTACK_EXEC=10 -D ATTACK_KERN=3 -D _unroll  '
    * Device #1: Kernel m16800-pure.6df017dc.kernel not found in cache! Building may take a while...
    clBuildProgram(): CL_BUILD_PROGRAM_FAILURE
    
    <unknown>:0:0: in function gpu_decompress void (%struct.pw_idx addrspace(1)*, i32 addrspace(1)*, %struct.pw addrspace(1)*, i64): unsupported initializer for address space
    
    * Device #1: Kernel /usr/share/hashcat/OpenCL/m16800-pure.cl build failed - proceeding without this device.
It would be nice to know exactly when or how long from start a password was cracked for statistics purposes and oddly enough report outs people are very interested in how much better one password is than another. I know that a simple timestamp doesn't correctly convey if one password is better than another, but it's something I have been asked for multiple times.
Curve25519 is used in many POC cryptos, such as Burst/BHD , to generate plotter id. 

Could we have a batch generation feature to allow creating random curve25519 privatekey/pubkeys?
Would you guys be willing to add support for sha1($salt.sha1($pass.$salt)) in the next update?
Hi,
I think BIP38 would be a great addition to hashcat: https://github.com/bitcoin/bips/blob/master/bip-0038.mediawiki

The use case would be people who have old paper wallets in this format and who forgot their passwords.
SIP Digest Authentication (hash-mode 11400) works well for HTTP Digest Access Authentication; however, my passwords are Base64 encoded.  Therefore, I would like a hash mode, say 11410, which simply Base64 encodes the password (including the “=“ padding) before the MD5(username:realm:password) calculation.  This way I can use the standard password mask functions **before** the Base64 encoding, and the passwords found will be unencoded.
Placeholder issue for adding the following algorithms:

Tiger/Tiger-192,3(functionally the same)

Tiger-192,4

Tiger2