Greetings Binnavi or Zynamics developers and contributors,

We’re reaching out because your project is an important part of the open source ecosystem, and we’d like to invite you to integrate with our [fuzzing](https://www.owasp.org/index.php/Fuzzing) service, [OSS-Fuzz]( https://opensource.googleblog.com/2016/12/announcing-oss-fuzz-continuous-fuzzing.html ). OSS-Fuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project (, like XXX and YYY). OSS-Fuzz will:

- Continuously run at scale all the fuzzers you write.
- Alert you when it finds issues.
- Automatically close issues after they’ve been fixed by a commit.

Many widely used [open source projects]( https://github.com/google/oss-fuzz/tree/master/projects ) like OpenSSL, FFmpeg, LibreOffice, and ImageMagick are fuzzing via OSS-Fuzz, which helps them find and remediate [critical issues]( https://bugs.chromium.org/p/oss-fuzz/issues/list?can=1&q=status%3AFixed%2CVerified+Type%3ABug%2CBug-Security+-component%3AInfra+ ). 

Even though typical integrations can be done in < 100 LoC, we have a [reward program]( https://www.google.com/about/appsecurity/patch-rewards/ ) in place which aims to recognize folks who are not just contributing to open source, but are also working hard to make it more secure.

We want to stress that anyone who meets the eligibility criteria and integrates a project with OSS-Fuzz is eligible for a reward.

To help you getting started, we can attach our internal fuzzer for your project that you are welcome to use directly, or to use it as a starting point.

If you're not interested in integrating with OSS-Fuzz, it would be helpful for us to understand why—lack of interest, lack of time, or something else—so we can better support projects like yours in the future.

If we’ve missed your question in our [FAQ]( https://google.github.io/oss-fuzz/faq/ ), feel free to reply or reach out to us at oss-fuzz-outreach@googlegroups.com.


Thanks!

Tommy
OSS-Fuzz Team

the gradle wrapper is really old, I thought maybe it would be good to upgrade 
Looks like you're not using any error-checking in your Java build. This pull requests adds a static analysis tool, [Error Prone](http://errorprone.info), created by Google to find common errors in Java code. For example, running ```mvn compile``` on the following code:
```java
public boolean validate(String s) {
	return s == this.username;
}
```
would identify this error:
```
[ERROR] src/main/java/HelloWorld.java:[17,17] error: [StringEquality] String comparison using reference equality instead of value equality
[ERROR]     (see https://errorprone.info/bugpattern/StringEquality)
```
If you think you might want to try out this plugin, you can just merge this pull request. Please feel free to add any comments below explaining why you did or did not find this recommendation useful.
the bug message is that ...  (in binNavi)
The IDB file 'C:\Users\Administrator\Desktop\npp.7.5.8.Installer.x64.i64' could not be imported. Please check the stack trace for more information.

Possible causes:
  - Database connection problems.
  - Bug in the IDB exporter.

Problem impact:
  - The IDB file was imported partially. A raw module in an incosistent state was created. This raw module should be deleted.

and the bug message is that...(in cmd)
Reason: Could not start IDA Pro.
Importing project failed.
十二月 05, 2018 10:07:14 上午 com.google.security.zynamics.binnavi.Log.NaviLogger severe
严重: com.google.security.zynamics.binnavi.Importers.CImporterFactory.importIdbFileInternal(CImporterFactory.java:95)
com.google.security.zynamics.binnavi.Importers.CImporterFactory.access$000(CImporterFactory.java:44)
com.google.security.zynamics.binnavi.Importers.CImporterFactory$1.call(CImporterFactory.java:225)
com.google.security.zynamics.binnavi.Importers.CImporterFactory$1.call(CImporterFactory.java:221)
java.util.concurrent.FutureTask.run(Unknown Source)
java.util.concurrent.ThreadPoolExecutor.runWorker(Unknown Source)
java.util.concurrent.ThreadPoolExecutor$Worker.run(Unknown Source)
java.lang.Thread.run(Unknown Source)

When I use a plugin,I found it use 'com.google.security.zynamics.binnavi.API.disassembly.GlobalVariable' class and 'GlobalVariablesManager' calss,but I can't find them in package,could you tell me how to solve this?Thanks!
The UI for adding comments to flowgraph edges is currently broken.

Clicking on "Add a new comment" only allows adding a single character at a time.
In the current trunk, even if the export is successful, the GUI throws an error message that the IDB was not imported correctly.


Upon importing an IDA db, I get a "violates foreign key constraint" message.  Did I miss a step?

![screenshot from 2017-04-01 11-46-15](https://cloud.githubusercontent.com/assets/947191/24581091/d4714de6-16d1-11e7-804b-b30e7e28d08b.png)

This is with IDA 6.9...thank you.
I've found a code smell and a possibly bug in a recent snapshot.
Path: src/main/java/com/google/security/zynamics/binnavi/disassembly/CFunction.java

```java
439   @Override
440   public boolean inSameDatabase(final SQLProvider provider) {
441     return provider.equals(provider);
442   }
```

As Line 441 always return true, should it be, this.provider.equals(provider)?
```java
439   @Override
440   public boolean inSameDatabase(final SQLProvider provider) {
441     return this.provider.equals(provider);
442   }
```
Hi!

We've checked your project with AppChecker static analyzer (https://npo-echelon.ru/en/solutions/appchecker.php) and found a couple of possible defects.
1) In [src/main/java/com/google/security/zynamics/binnavi/disassembly/CNaviViewEdge.java#L89](https://github.com/google/binnavi/blob/356eaa86278dcda5f976e7166937a6bc729a22c2/src/main/java/com/google/security/zynamics/binnavi/disassembly/CNaviViewEdge.java#L89)
```
 if ((getSource() instanceof IAddressNode) && (getSource() instanceof IAddressNode)) {
...
}
```
getSource() is checked twice. maybe getTargen() should be checked like it's done in https://github.com/google/binnavi/blob/356eaa86278dcda5f976e7166937a6bc729a22c2/src/main/java/com/google/security/zynamics/binnavi/disassembly/CNaviViewEdge.java#L103

2) The same thiing is in https://github.com/google/binnavi/blob/356eaa86278dcda5f976e7166937a6bc729a22c2/src/main/java/com/google/security/zynamics/binnavi/disassembly/CNaviEdge.java#L89

All possible defects were found by Echelon team with [AppChecker static analyzer](https://npo-echelon.ru/en/solutions/appchecker.php)