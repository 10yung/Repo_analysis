### Problems with makeFirefoxProfile()

On AWS EC2 linux
With selenium from docker selenium/standalone-firefox:3.141.59
And geckodriver geckodriver-v0.26.0-linux64.tar.gz

I am unable to use makeFirefoxProfile() on this machine.

**Error messages:**

```
sh: : command not found
Error in file(tmpfile, "rb") : cannot open the connection
Calls: makeFirefoxProfile -> file
In addition: Warning message:
In file(tmpfile, "rb") :
  cannot open file '/tmp/RtmpUDdMKw/file72de10932e85.zip': No such file or directory
Execution halted
```

**Tests performed to isolate the problem:**

1. On this same linux machine I can successfully operate a remote firefox webdriver without using makeFirefoxProfile().
2. On macOS I can successfully use makeFirefoxProfile().

There is something about the combination of the AWS linux machine and that makeFirefoxProfile() function that fails.



[`netstat::free_port()`](https://github.com/stevecondylios/netstat) is a simple helper that provides an available TCP port from an IANA unassigned range.

With `netstat::free_port()`, we can avoid having to manually specify TCP ports during calls to `rsDriver()`

### Example

This
```R
rD <- rsDriver(browser=c("chrome"), verbose = TRUE, chromever="78.0.3904.105", port=4447L) 
```
could be replaced with
```R
rD <- rsDriver(browser=c("chrome"), verbose = TRUE, chromever="78.0.3904.105", port=free_port()) 
```
This is helpful when managing multiple concurrent sessions, and very helpful when running multiple different jobs on the same machine - for example multiple scheduled tasks (all of which may work independently, but fail when run concurrently due to port collisions)

### Modifying `rsDriver()` to default to `free_port()` when `port` unspecified

`rsDriver()` could be modified to default to `port = free_port()` whenever a `port` value is not specified. 

Hence

```R
rD <- rsDriver(browser=c("chrome"), verbose = TRUE, chromever="78.0.3904.105", port=4447L) 
```

would reduce to 

```R
rD <- rsDriver(browser=c("chrome"), verbose = TRUE, chromever="78.0.3904.105") 
```
which simplifies the function call, but also offers improved robustness when running concurrent jobs. 

`netstat` is not yet on CRAN (as it is [closed over the break](https://cran.r-project.org/submit.html)), but it will submited 6 Jan, in case it's of use. 

Keen for your thoughts


This is a suggestion to auto-detect the proper ChromeDriver version because [it happens regularly](https://stackoverflow.com/a/56173984/7196903) that the default setting `chromever = "latest"` selects a ChromeDriver version that's ahead of the current stable Chrome browser version.

I'd suggest something like the following to select the latest ChromeDriver version **matching the major-minor-patch version number of the system's stable Google Chrome browser**:

```r
# Get installed stable Google Chrome version ...
if ( xfun::is_unix() )
{
  chrome_driver_version <-
    system2(command = ifelse(xfun::is_macos(),
                             "/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome",
                             "google-chrome-stable"),
            args = "--version",
            stdout = TRUE,
            stderr = TRUE) %>%
    stringr::str_extract(pattern = "(?<=Chrome )(\\d+\\.){3}")
  
  ## on Windows a plattform-specific bug prevents us from calling the Google Chrome binary directly to get its version number
  ## cf. https://bugs.chromium.org/p/chromium/issues/detail?id=158372
} else if ( xfun::is_windows() )
{
  chrome_driver_version <-
    system2(command = "wmic",
            args = 'datafile where name="C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe" get Version /value',
            stdout = TRUE,
            stderr = TRUE) %>%
    stringr::str_extract(pattern = "(?<=Version=)(\\d+\\.){3}")
  
} else rlang::abort(message = "Your OS couldn't be determined (Linux, macOS, Windows) or is not supported!")

# ... and determine most recent ChromeDriver version matching it
chrome_driver_version %<>%
  magrittr::extract(!is.na(.)) %>%
  stringr::str_replace_all(pattern = "\\.",
                           replacement = "\\\\.") %>%
  paste0("^",  .) %>%
  stringr::str_subset(string =
                        binman::list_versions(appname = "chromedriver") %>%
                        dplyr::last()) %>%
  as.numeric_version() %>%
  max() %>%
  as.character()
```

This procedure should adhere to the [official ChromeDriver versioning scheme](http://chromedriver.chromium.org/downloads/version-selection). Quote:

> - ChromeDriver uses the same version number scheme as Chrome (...)
> - Each version of ChromeDriver supports Chrome with matching major, minor, and build version numbers. For example, ChromeDriver 73.0.3683.20 supports all Chrome versions that start with 73.0.3683.

Ideally, we'd check if Chrome is available on the system at all before running `system2()` and also take the open-source Chromium into consideration (make it conditional on param `browser`). 
I am still new to this forum, forgive me if my question appears to be lame 

getActiveElement() is not working for me , can anyone help me what I am doing wrong? 
I am using it like this 

`remDr$getActiveElement()`

the response in console is 

```
_Selenium message:GET /session/bca60de0ce5883e1e0dd9c8dbd4a5c09/element/active
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:53'
System info: host: 'LTNBN5CG5273W2K', ip: '10.133.133.9', os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_221'
Driver info: driver.version: unknown
 
Error: 	 Summary: UnknownCommand
Detail: The requested resource could not be found, or a request was received using an HTTP method that is not supported by the mapped resource.
Further Details: run errorDetails method_
```
Hi, I'm new to RSelenium and Selenium in general. I've installed RSelenium-Docker, but I can't get any sites to load. 

Here is the code I'm using:
```
rD <- remoteDriver(port=4567L, browserName='firefox')
rD$open()
rD$navigate("http://www.google.com/")
rD$screenshot(display=TRUE)
```

And here are the outputs: 
```
$remoteServerAddr
[1] "localhost"

$port
[1] 4567

$browserName
[1] "firefox"

$version
[1] ""

$platform
[1] "ANY"

$javascript
[1] TRUE

$nativeEvents
[1] TRUE

$extraCapabilities
list()
```

```
> rD$open()
[1] "Connecting to remote server"
$acceptInsecureCerts
[1] FALSE

$browserName
[1] "firefox"

$browserVersion
[1] "70.0"

$`moz:accessibilityChecks`
[1] FALSE

$`moz:buildID`
[1] "20191016161957"

$`moz:geckodriverVersion`
[1] "0.26.0"

$`moz:headless`
[1] FALSE

$`moz:processID`
[1] 586

$`moz:profile`
[1] "/tmp/rust_mozprofile1O5gLK"

$`moz:shutdownTimeout`
[1] 60000

$`moz:useNonSpecCompliantPointerOrigin`
[1] FALSE

$`moz:webdriverClick`
[1] TRUE

$pageLoadStrategy
[1] "normal"

$platformName
[1] "linux"

$platformVersion
[1] "4.15.0-70-generic"

$rotatable
[1] FALSE

$setWindowRect
[1] TRUE

$strictFileInteractability
[1] FALSE

$timeouts
$timeouts$implicit
[1] 0

$timeouts$pageLoad
[1] 300000

$timeouts$script
[1] 30000


$unhandledPromptBehavior
[1] "dismiss and notify"

$webdriver.remote.sessionid
[1] "9c7037ea-5bc2-4502-9a1a-9dc6fae56fd8"

$id
[1] "9c7037ea-5bc2-4502-9a1a-9dc6fae56fd8"
```

```
> rD$navigate("http://www.google.com/")

Selenium message:Reached error page: about:neterror?e=dnsNotFound&u=http%3A//www.google.com/&c=UTF-8&f=regular&d=We%20can%E2%80%99t%20connect%20to%20the%20server%20at%20www.google.com.
Build info: version: '3.141.59', revision: 'e82be7d358', time: '2018-11-14T08:25:53'
System info: host: '853da07b17cb', ip: '172.17.0.2', os.name: 'Linux', os.arch: 'amd64', os.version: '4.15.0-70-generic', java.version: '1.8.0_222'
Driver info: driver.version: unknown

Error: 	 Summary: UnknownError
 	 Detail: An unknown server-side error occurred while processing the command.
 	 class: org.openqa.selenium.WebDriverException
	 Further Details: run errorDetails method
```


The screenshot shows "Hmmm. We're having trouble finding that site. We can't connect to the server at www.google.com" 

Any help is greatly appreciated, thanks! 
I just released a completely flexible launching function for RSelenium that works on both 32bit/64bit Linux, MAC, and WINDOWS, both headlessly and graphically using chrome/chromium OR firefox. If you need a universal function to launch RSelenium, use it. It automatically checks your system and determines the best remote driver launch:

Install Pineium First:

    if(!require("remotes")){install.packages("remotes")}
    Sys.setenv(R_REMOTES_NO_ERRORS_FROM_WARNINGS=TRUE)
    remotes::install_github("nbarsch/pineium")


   Simplest use of new function (this should be all you ever need, but options specified below):

    library(pineium)
    remDr <- lit()
    
    #####################################################
    
Optional use arguments:

    Headless:
    remDr <- lit(headless=TRUE)

    #Firefox option (not as reliable as chrome in some cases):
    remDr <- lit(browser="firefox")
    
    #Dockered and headless:
    remDr <- lit(headless=TRUE, foo_priority=c("docker"))
    
    #Dockered with a backup of standalone and headless:
    remDr <- lit(headless=TRUE, foo_priority=c("docker","standalone"))
    
    #Standalone with a backup of local, with a third backup of docker running graphically:
    remDr <- lit(foo_priority=c("standalone","local", "docker"))


Hi,
I've recently upgraded the Chromedriver and I'm getting the following error message when trying to run a JavaScript on a page. This may be some terrible error on my side, so please accept my apologies if this has a quick and easy fix. I'm using R. 

Selenium message:javascript error: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions or the arguments objects for calls to them
  (Session info: chrome=78.0.3904.87)
Build info: version: '4.0.0-alpha-2', revision: 'f148142cf8', time: '2019-07-01T21:30:10'
System info: host: 'x', ip: 'x, os.name: 'Windows 10', os.arch: 'amd64', os.version: '10.0', java.version: '1.8.0_231'
Driver info: driver.version: unknown


Error: 	 Summary: JavaScriptError
 	 Detail: An error occurred while executing user supplied JavaScript.
 	 class: org.openqa.selenium.JavascriptException
	 Further Details: run errorDetails method

### Operating System
Windows 10
### Selenium Server version (selenium-server-standalone-3.0.1.jar etc.)

### Browser version (firefox 50.1.0, chrome 54.0.2840.100 (64-bit) etc.)
 Chrome 78.0.3904.87 (Official Build) (64-bit)
### Other driver version (chromedriver 2.27, geckodriver v0.11.1, iedriver x64_3.0.0, PhantomJS 2.1.1 etc.)

### Expected behaviour
Run the script
### Actual behaviour
Script does not execute.
### Steps to reproduce the behaviour

Please see SO question: https://stackoverflow.com/questions/58722758/how-to-specify-firefox-browser-version-for-rseleniumrs-driver 
### Operating System
Windows 7
### Selenium Server version (selenium-server-standalone-3.0.1.jar etc.)
R Selenium 1.7.5
### Browser version (firefox 50.1.0, chrome 54.0.2840.100 (64-bit) etc.)
Chrome 77.0.3865.90 (Official Build) (64-bit)
### Other driver version (chromedriver 2.27, geckodriver v0.11.1, iedriver x64_3.0.0, PhantomJS 2.1.1 etc.)
ChromeDriver 77.0.3865.40

### Expected behaviour
Right click on any element on a chrome based qliksense page

### Actual behaviour
Only left click will work, even if you set buttonid=2

### Steps to reproduce the behaviour
1. Login or obtain free trial of qlik at qlik.com, and use the browser version of any sheet..
2. Run this code: 
library(RSelenium)
driver <-  rsDriver(browser=c("chrome"), chromever="77.0.3865.40")
remDr <- driver[["client"]]
remDr$navigate("http://YourQlikSensePageHere")
cell <- remDr$findElement(using='css', '[Any Class, title, etc. on the page]')
remDr$mouseMoveToLocation(webElement = cell)
remDr$click(buttonid=2)


I found an outdated answer on this topic on Stackoverflow (https://stackoverflow.com/a/42417208) by the original author John Harrison of RSelenium. However it is not working with the latest CRAN release of RSelenium 1.7.5:


```
library(RSelenium)

rD <- rsDriver(verbose = F)
remDr <- rD$client
remDr$navigate("http://jamaserv.jama.or.jp/newdb/eng/index.html")

## Switch to left frame
frameElems <- remDr$findElements(using = "tag name", "frame")
sapply(frameElems, function(x){x$getElementAttribute("src")})
remDr$switchToFrame(frameElems[[1]])

webElem <- remDr$findElement(using = 'xpath', "//select[@name='txtTargetToMm']")
opts <- webElem$selectTag()

> opts$text
[1] "JANUARY"   "FEBRUARY"  "MARCH"     "APRIL"     "MAY"       "JUNE"      "JULY"      "AUGUST"   
[9] "SEPTEMBER" "OCTOBER"   "NOVEMBER"  "DECEMBER" 
> opts$value
[1] "1"  "2"  "3"  "4"  "5"  "6"  "7"  "8"  "9"  "10" "11" "12"
> opts$selected
[1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  TRUE

# select the third month (march)
opts$elements[[3]]$clickElement()

# check whether it is selected
opts <- webElem$selectTag()
opts$selected

> opts$selected
[1] FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE

rm(rD)
gc()

````
Any ideas how this can be simply done in RSelenium 1.7.5?

