I found pcapgo.Reader.ReadPacketDat get wrong TimeStamp, it does not consider the time zone issue.

However the packetsource.Nextpacket() is correct.
For 802.11 Beacon frames, I can use ```layer.(*layers.Dot11InformationElement)``` to get the IE, like this:

```
for _, layer := range packet.Layers() {
	if layer.LayerType() == layers.LayerTypeDot11InformationElement {
		dot11info, ok := layer.(*layers.Dot11InformationElement)
        }
}
```

but for ProbeReq frames, ```layer.(*layers.Dot11InformationElement)```doesn't exist, I can only use ```
packet.Layer(layers.LayerTypeDot11MgmtProbeReq).(*layers.Dot11MgmtProbeReq)```
to get the Contents and Payload. It seems that the Information elements are in the Contents. 

I'm new to golang, could you please give me an example of how to decode information elements in DOt11MgmtProbeReq, Thanks
 
MacBook Pro (15-inch, 2018)
macOS catalina 10.15.2

When I run this example:
https://github.com/google/gopacket/blob/master/examples/synscan/main.go

this is my result:
panic: router only implemented in linux

Does this package not support my device?

Currently, if a SIP packet is truncated, the parser does not indicate this.  The fix calls `SetTruncated()` if this condition is detected.   SIP packets can be considered as truncated if each line does not end in a CR-LF
I'm working with reassembly, trying to understand when the assembler should deliver TCP data from the underlying streams to my application.  In addition to stream lifecycle events, and periodic flushing, what other criteria does reassembly use?

Specifically I'm looking at behavior for PSH and URG flags set in TCP packets.  I expect those flags to cause immediate delivery, but I'm not seeing it.  If the feature is there, please tell me.  I'm looking at tcpassembly.go and don't see any hint of it.

If the feature is not there and there's interest, I'll work on a patch for this.

best regards,
Ryan
When use go mod, module cannot use some struct, such as *pcapgo.EthernetHandle. I found "// +build linux,go1.9" in gopacket/capture.go(my go version is 1.12). Is sub module cannot be used if go version is not 1.9?
If you attempt to parse a truncated or partial SIP message, the parser does not throw any type of error when used as:
```
parser := gopacket.NewDecodingLayerParser( layers.LayerTypeSIP, sip, )
```
I believe there should a call to SetTruncated() in the SIP parser where:
```
		// Read next line
		line, err = buffer.ReadBytes(byte('\n'))
		if err != nil {
			if err == io.EOF {
				break
			} else {
				return err
			}
		}
```
should actually be:
```
		// Read next line
		line, err = buffer.ReadBytes(byte('\n'))
		if err != nil {
			if err == io.EOF {
				if len(bytes.Trim(line, "\r\n")) > 0 {
					df.SetTruncated()
				}
				break
			} else {
				return err
			}
		}
```

(*TPacket).ZeroCopyReadPacketData is called in a goroutine and it blocking that goroutine. I want to cancel that goroutine by calling (*TPacket).Close in other gorouting, but panic occurred. To align with golang convention, it should be safe to call (*TPacket).Close method in other goroutine, and the calling of ZeroCopyReadPacketData should return after the calling of Close.

goroutine 11 [running]:
runtime.throw(0x930fed, 0x5)
        /snap/go/4901/src/runtime/panic.go:774 +0x72 fp=0xc000173c48 sp=0xc000173c18 pc=0x42ebd2
runtime.sigpanic()
        /snap/go/4901/src/runtime/signal_unix.go:401 +0x3de fp=0xc000173c78 sp=0xc000173c48 pc=0x4436ae
github.com/google/gopacket/afpacket.(*v2header).getStatus(0x7f9b10000000, 0x1)
        /home/kery/go/src/github.com/google/gopacket/afpacket/header.go:114 +0x5 fp=0xc000173c80 sp=0xc000173c78 pc=0x754f85
github.com/google/gopacket/afpacket.(*TPacket).pollForFirstPacket(0xc00018c900, 0x9ed360, 0x7f9b10000000, 0x475c4c, 0xc0000a8040)
        /home/kery/go/src/github.com/google/gopacket/afpacket/afpacket.go:453 +0x5e fp=0xc000173cd8 sp=0xc000173c80 pc=0x754cce
github.com/google/gopacket/afpacket.(*TPacket).ZeroCopyReadPacketData(0xc00018c900, 0xc000000006, 0x93c52e, 0xc, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
        /home/kery/go/src/github.com/google/gopacket/afpacket/afpacket.go:302 +0x136 fp=0xc000173d70 sp=0xc000173cd8 pc=0x754526
sim-data/tunnel.(*GtpuConn).Read(0xc000176b10, 0xc0001ec000, 0x5ec, 0x5ec, 0x0, 0x0, 0x0)
Made layer compatible with DecodingLayer by:

- moved packet parsing into DecodeFromBytes function (no parsing changed)
- used DecodeFromBytes in layer decode function
- added CanDecode and NextLayerType functions as well
- Change NgOption structure and some structure fields to be public
- Add optional parameters NgOption to WritePacket.
- Add option to NgReader for enable/disable reading options
- Add test and benchmark for read/write packets with options
- Change some test function: add t.Run to be more easy find error
testcase