`-findEdgeColor:imageColors:` relies on the image having a minimum size in order to work effectively. If the image is too small, there aren't enough repeated edge colors to get past `randomColorsThreshold`. Furthermore, it might be a good idea to accumulate colors from the other edges, as well as to give the edge a certain pixel width. Finally, it's important for this method to return _some_ color; after all, what does it mean for an image to have "no" background color?

Does anyone know the purpose of the squaring step in `-scaleImage:size:`? Specifically, Why does only a partial square portion of the image get used for the analysis instead of the whole image? This is a huge problem for thin and long images.

It seems that the algorithm you're using has a tough time picking out reds. I'm using your library to pick out colors for albums and here is the first example of something going not as expected. 

![A Star Is Born](http://i.imgur.com/WuwsfQb.jpg)

The background color is pretty good. It could be a little darker to reflect that the album background isn't pure white. My main issue is with the primary color here. There are pretty much only two colors on the album, white and red. The red doesn't show up in any of the colors, be it primary, secondary, or detail color. In all of these examples, the colors are as follows:
- Background color is from ColorArt.getBackgroundColor() 
- Song title is ColorArt.getPrimaryColor()
- Artist is ColorArt.getSecondaryColor()
- The time played and time left textviews are ColorArt.getPrimaryColor()
- The progress bar on the seekbar is ColorArt.getSecondaryColor()
- The draggable thumb on the seekbar is ColorArt.getPrimaryColor() 

Here's another example

![11:11pm](http://i.imgur.com/NKbMK3L.png)

The background color is a dark brown/green. Ideally it would be a red or a white as those are the two most dominant colors in the image and they also touch the borders. 

Yet another example:

![9MM](http://i.imgur.com/jycH9hc.png)

For this album cover, the background color is good. What's weird is that the primary color is pink. There isn't really pink on the album cover, though there is a bit of red in the reflection of the sunglasses. It would make more sense for the primary color to be a black, white or brown. 

Moar example:

![Say Something](http://i.imgur.com/kLGrIq1.jpg)

There should be red/magenta as the primary color.

Last example:

![Witness](http://i.imgur.com/Th5N4wN.jpg)

Nix the purple/lilac. Use the reds/oranges/light blues/blacks or whites. The background color should definitely be white here as that is also the background color of the album. Red or orange would work as well.

EDIT:

I found some more weird occurrences. In the following image, there shouldn't be any light blue.

![More to Life](http://i.imgur.com/s4iajnk.png)

In the following image, there should not be pink.

![Yiruma](http://i.imgur.com/Td3ZK0m.png)

In the future, similar to Chris Banes's [ColorFinder](http://chris.banes.me/2014/03/10/colour-matching-pt-2/), it would be nice to have a secondary text color which is either black or white depending on the brightness of the background color to ensure high visibility/readability.

Is it possible to make an iOS port of this component ? 

It'd be nice to have a standard set of images to test to make sure that the output looks the same after making changes to the program. The images from the blog post would be good ones to start with.
