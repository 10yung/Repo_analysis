now:

```scala
.componentDidCatch($ => $.backend.onError($.error, $.info))
```

future:

```scala
.componentDidCatch(_.xxxx(_.backend.onError))
// or
.componentDidCatch(_.xxxx(_.onError))
```

A composite might be best
It would be great if we could get scalajs-react release for both 0.6 and 1.0 branches of scala.js

I wish cross compiling them were easier
This PR includes https://github.com/japgolly/scalajs-react/pull/589 because it's necessary for this one to work, so feel free to discard the other one.

Here we provide type class instances to achieve `Sync[CallbackTo]` and `Effect[AsyncCallback]`. Also, law testing is provided.

However, 2 law tests (out of 157) are failing in `catsEffects/test`. I need help in fixing those. These are:
- `Effect[AsyncCallback].effect.repeated callback ignored *** FAILED ***`
- `Effect[AsyncCallback].effect.bracket release is called on Completed or Error *** FAILED ***`

Also, please let me know if you need other changes to make this into a publishable artifact.

Thank you!
Now that isMounted is gone, I'm struggling a bit with the following scenario using OnUnmounted:

* Make a request
* Component that originates request is unmounted
* request completes and attempts to schedule a subsequent request

Couldn't OnUnmounted store a `isMounted` flag for client to check?  TimerSupport could then use that turn all of its methods into no-ops?  Or is there a better, existing way to handle this?
https://reactjs.org/blog/2019/08/08/react-v16.9.0.html
Hey there, I have recently boarded the Scala train and I want to try building Scala.JS apps with React.

The current tags and attributes syntax is okay, but I find it to be slightly impractical, personally. Not wanting to imply it is bad or unusable or anything of that sort, but I honestly wish I could use something like JSX.

I just did some research, and a [similar project](https://github.com/xored/scala-js-react) to this one, seems to have implemented something called "scalax" via Scala XML literals; however, unfortunately, it no longer seems to be actively maintained.

How hard would it be to implement something like that here? If you feel it is doable, I can try to help out as much as I can.
Was gonna put together a PR but was hoping to get some buy-in before I write it up.  Basically the modStateO/setStateO versions of modStateL/setStateL.
Currently it always generates React classes but really, it could be a generic component builder that automatically decided the most appropriate React representation.

* big win is that many components could be lighter functional components wrapped in `React.memo`. In my usage, most components are stateless and the only lifecycle method specified is `shouldComponentUpdate`
* display name should be optional - not needed for functional components, could be automatically derived anyway (#470 )
* output type would need to reflect decision meaning it needs to be a type-level calculation meaning we need to track more stuff at the type level meaning `install` methods that expect to be used by `.configure` now explode with types meaning yuk
* would need a method to override automatic selection - users must always have full control
https://scalameta.org/mdoc/docs/js.html