Issue #252 
# Description
I'm trying to `include Knock::Authenticable` to my `ApplicationController` but I'm getting an error of `Zeitwerk` lib:

![image](https://user-images.githubusercontent.com/5576007/72293098-2e813480-3629-11ea-90fc-a3e59fc90554.png)

## Log
```
Failure/Error: require 'knock/authenticable'

     Zeitwerk::NameError:
       expected file /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/knock-1.5/lib/knock/authenticable.rb to define constant Authenticable, but didn't
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/loader/callbacks.rb:17:in `on_file_autoloaded'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:27:in `block in require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `tap'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `require'
     # ./app/controllers/application_controller.rb:1:in `<top (required)>'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:16:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/actiontext-6.0.2.1/lib/action_text/engine.rb:46:in `block (2 levels) in <class:Engine>'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/actiontext-6.0.2.1/lib/action_text/content.rb:132:in `<top (required)>'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:22:in `block in require_with_bootsnap_lfi'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/loaded_features_index.rb:92:in `register'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:21:in `require_with_bootsnap_lfi'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/bootsnap-1.4.5/lib/bootsnap/load_path_cache/core_ext/kernel_require.rb:30:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/zeitwerk-2.2.2/lib/zeitwerk/kernel.rb:23:in `require'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/actiontext-6.0.2.1/lib/action_text/engine.rb:42:in `block (2 levels) in <class:Engine>'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/rack-2.0.8/lib/rack/sendfile.rb:111:in `call'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/rack-cors-1.1.0/lib/rack/cors.rb:100:in `call'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/railties-6.0.2.1/lib/rails/engine.rb:526:in `call'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/rack-test-1.1.0/lib/rack/mock_session.rb:29:in `request'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/rack-test-1.1.0/lib/rack/test.rb:266:in `process_request'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/rack-test-1.1.0/lib/rack/test.rb:119:in `request'
     # ./spec/requests/engineer_spec.rb:5:in `block (4 levels) in <top (required)>'
     # ./spec/support/database_cleaner.rb:9:in `block (3 levels) in <top (required)>'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/database_cleaner-1.7.0/lib/database_cleaner/generic/base.rb:16:in `cleaning'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/database_cleaner-1.7.0/lib/database_cleaner/base.rb:100:in `cleaning'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/database_cleaner-1.7.0/lib/database_cleaner/configuration.rb:86:in `block (2 levels) in cleaning'
     # /Users/dhyegocalota/.rvm/gems/ruby-2.5.1@gi-api/gems/database_cleaner-1.7.0/lib/database_cleaner/configuration.rb:87:in `cleaning'
     # ./spec/support/database_cleaner.rb:8:in `block (2 levels) in <top (required)>'
```
resolves #241

allows gem's user to change token lifetime
Draft Pull Request for v2.2

Feel free to comment with links to issues or changes you believe should be added to this version.

### Changes

- Update the dependencies
- Remove the generators
- Fix deprecation warnings and autoloading
https://github.com/nsarno/knock/blob/66b60437a5acc28e4863f011ab59324dc1b5d0ae/app/model/knock/auth_token.rb#L55

As mentioned here https://github.com/nsarno/knock/issues/233 it could be useful to have different token lifetimes for different use cases in the same application.

I'm thinking that this config option could (optionally) be a hash of various time values, keyed to whatever makes sense for the business logic of the given application. I've only poked around the source code a little, but it seems like the change is relatively straightforward.

If I have time, I'll make a pull request. Opening this partially as a gauge of interest in the feature.
Hi, I've been trying to configure a Rails API 5.2 app with Knock (using Auth0) following the instructions and I got to a point that I was just getting a: 

`Filter chain halted as :authenticate_user rendered or redirected`

Unfortunately there's no logging associated to any of the gems involved in this process so I had to dig in and try to investigate what was exactly happening. After some investigation I've found the actual error was:

```ruby
    46: self.class.send(:define_method, getter_name) do                                                                                                                                           [337/1832]
    47:   unless instance_variable_defined?(memoization_var_name)
    48:     current =
    49:       begin
    50:         Knock::AuthToken.new(token: token).entity_for(entity_class)
    51:       rescue
 => 52:         binding.pry
    53:         nil
    54:       end
[5] pry(#<SecuredController>)> $!
=> #<JWT::InvalidAudError: Invalid audience>
```

More digging into why I was getting this error and I've found that the configuration for auth0 suggests to set the following in `config/initializers/knock.rb`:

```ruby
  # If using Auth0, uncomment the line below
  config.token_audience = -> { Rails.application.credentials.auth0_client_id }
```

where the `auth0_client_id` is client_id associated with the client secret.

The sample SPA I've downloaded from the Auth0 tutorials (which has a `/private` link that performs an authenticated call to the API) has a different configuration for the audience:

```js
    auth0 = new auth0.WebAuth({
      domain: AUTH_CONFIG.domain,
      clientID: AUTH_CONFIG.clientId,
      redirectUri: AUTH_CONFIG.callbackUrl,
      audience: AUTH_CONFIG.apiUrl, <<<<<<<<<<<<
      responseType: 'token id_token',
      scope: this.requestedScopes
    });
```

So when I was making that `/private` authenticated call from the SPA to the Rails API I was getting the following `payload` in the token:

```ruby
=> {"iss"=>"https://<MY_DOMAIN>.eu.auth0.com/",
 "sub"=>"auth0|<USER_ID>",
 "aud"=>["http://localhost:3000/api", "https://<MY_DOMAIN>.eu.auth0.com/userinfo"],
 "iat"=>1544819740,
 "exp"=>1544826940,
 "azp"=>"<AUTH_CLIENT_ID>",
 "scope"=>"openid profile read:messages write:messages"}


From: /<HOME>/.rbenv/versions/2.5.3/lib/ruby/gems/2.5.0/gems/jwt-1.5.6/lib/jwt.rb @ line 125 JWT.decode:
```

but the server settings had the following:

```
[9] pry(JWT)> merged_options                                                                                                                                                                       [68/1832]
=> {:verify_expiration=>true,
 :verify_not_before=>true,
 :verify_iss=>false,
 :verify_iat=>false,
 :verify_jti=>false,
 :verify_aud=>true,
 :verify_sub=>false,
 :leeway=>0,
 :aud=>"<AUTH_CLIENT_ID>,
 :algorithm=>"RS256"}
```

So the `aud` configured in the server didn't match any of audience contained in payload `aud` causing the verification to fail and consequently the authentication as well.

**Any thoughts on this? Am I missing something here?**

After having the audiences matching, I now have the following error happening:

```ruby
    46: self.class.send(:define_method, getter_name) do
    47:   unless instance_variable_defined?(memoization_var_name)
    48:     current =
    49:       begin
    50:         Knock::AuthToken.new(token: token).entity_for(entity_class)
    51:       rescue
    52:         binding.pry
 => 53:         nil
    54:       end
[1] pry(#<SecuredController>)> $!
=> #<ActiveRecord::RecordNotFound: Couldn't find User with 'id'=auth0|<USER_ID>>
```

Is this expected? Is the user expected to already exist in my database and using as `id` the auth0 one? I was expecting this process to be the one to create the user itself.
fixes #228

I'm having the same problem described in issue.
This fix would make expected behaviour as the doc suggests.

This is what doc suggests

> If you're using a namespaced model, Knock won't be able to infer it automatically from the method name. Instead you can use authenticate_for directly like this:
```ruby
class ApplicationController < ActionController::Base
  include Knock::Authenticable
    
  private
  
  def authenticate_v1_user
    authenticate_for V1::User
  end
end

class SecuredController < ApplicationController
  before_action :authenticate_v1_user
end
```

This gem relies on [method_missing](https://github.com/nsarno/knock/blob/master/lib/knock/authenticable.rb#L14) to do the actuall authentication work. 

However `authenticate_v1_user` defined in `ApplicationController` will override it and return a `nil` when lacking a valid token, what you really need is a `head(:unauthorized)` response.

I could be wrong since I'm not familiar with the gem. IMO this is a big security issue.
This also fixes the issue about `Can't verify CSRF token authenticity.` https://github.com/nsarno/knock/issues/226
