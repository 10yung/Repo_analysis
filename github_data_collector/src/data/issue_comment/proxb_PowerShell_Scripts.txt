https://github.com/proxb/PowerShell_Scripts/blob/65d0ac81cb2f73b51dba318e6ae721bdea0db204/Invoke-BalloonTip.ps1#L46

This object type doesn't work here. The assembly is loaded later so this produces an error. 

To resolve just remove this from the parameter as the object type is set later in this line https://github.com/proxb/PowerShell_Scripts/blob/65d0ac81cb2f73b51dba318e6ae721bdea0db204/Invoke-BalloonTip.ps1#L78
Set-Owner does not work on PowerShell 6 due to referencing .NET Framework assembly APIs.  .NET Core has refactored these APIs, and they no longer work in PowerShell 6 because the API is not there.

The following is a simpler Set-Owner script:

```powershell
#
# IMPORTANT: Run with ELEVATION
#

# The target folder.
$folder = 'C:\Temp'

# Specify the new owner, which can be a mere username ('John.Doe'), a well-known
# security principal ('BUILTIN\Administrators'), or a UPN ('John.Doe@example.org')
$newOwner = 'BUILTIN\Administrators'

# Get the current ACL...
$acl = Get-Acl -LiteralPath $folder

# ... and assign the new owner...
$acl.SetOwner([System.Security.Principal.NTAccount] $newOwner)

# ... and set the modified ACL.
Set-Acl -LiteralPath $folder -AclObject $acl

"New owner: $((Get-Acl -LiteralPath $folder).Owner)"
```
I'm totally new in powershell, I add this:
```
Invoke-BalloonTip -Message 'This is a  message from my function' -Title 'Attention!' -MessageType  Info 
```
to the bottom of `Invoke-BalloonTip.ps1`:
![image](https://user-images.githubusercontent.com/13575500/54996023-2953ea00-5003-11e9-9929-ab7b663bf2eb.png)

Then I execute it:
```
PS C:\Users\bruce\Desktop> .\Invoke-BalloonTip.ps1
```

The error showed up:
![image](https://user-images.githubusercontent.com/13575500/54995796-97e47800-5002-11e9-986b-132d536ba87c.png)


I'm pretty new to this stuff but I'm trying to get this one to run. I run it but no balloons appear. The script also is not failing. Is there anything that I should be modifying in the script?

Here is what I see:
![image](https://user-images.githubusercontent.com/37632042/37725832-160b0bb2-2cf1-11e8-9742-87411ae767f7.png)

I'd love any help. thanks!

This is a very useful PS script so thank you greatly to the creator/contributors.   It would just be even better if I could get the sAMAccountName out of it.   Is this possible?
I work in a DevOps heavy environment where there are a lot of machines that do not get joined into the Domain because they are torn down after their smoke-tests are run. Or that's what they tell me is supposed to happen...

In reality though a good number of these machines persist and get passed around from dev to dev. That creates an issue of needing non-domain credentials to pull ADSI information from the remote host.

How could we facilitate that use case with the script? Would it need to be a new fork entirely or could it be added in?
 @proxb @kensel Get-LocalGroupMembership.ps1. I can't get this to work. No results returned when I run it as in the examples. What am I missing?
hello,

I've writter simple script

```
cls

. "C:\xxx\Get-SQLInstance.ps1"

'running on: {0}' -f  $env:Computername
'---------------'

Get-SQLInstance -Computername $env:Computername | % {
    $_.ComputerName
}
```

I expected it to show cluster node (an owner of cluster application). However, it shows current computer all the time:

```
running on: SRV-SQL01-DCA
---------------
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA
SRV-SQL01-DCA

PS C:\Windows\system32> 
```

actually, I checked, cluster instances are distributed across several nodes.

```
Computername      : SRV-SQL02-DCA
Instance          : {MSSQL$DEV_DCA, MSSQL$HFM_DCA, MSSQL$INF_DCA, MSSQL$IPORT_DCA...}
SqlServer         : SRV-SQL-TFS
WMINamespace      : ComputerManagement12
Sqlstates         : 2099213
Version           : 12.0.2000.8
Splevel           : 0
Clustered         : True
Installpath       : C:\Program Files\Microsoft SQL Server\MSSQL12.WHD\MSSQL
Datapath          : S:\MSSQL12.WHD\MSSQL
Language          : 1033
Fileversion       : 2014.120.2000.8
Vsname            : SRV-SQLWHD-DCA
Regroot           : Software\Microsoft\Microsoft SQL Server\MSSQL12.WHD
Sku               : 1804890536
Skuname           : Enterprise Edition (64-bit)
Instanceid        : MSSQL12.WHD
Startupparameters : -dS:\MSSQL12.WHD\MSSQL\DATA\master.mdf;-eS:\MSSQL12.WHD\MSSQL\Log\ERRORLOG;-lS:\MSSQL12.WHD
                    \MSSQL\DATA\mastlog.ldf
Errorreporting    : False
Dumpdir           : S:\MSSQL12.WHD\MSSQL\LOG\
Sqmreporting      : False
Iswow64           : False
BackupDirectory   : S:\MSSQL12.WHD\MSSQL\Backup
AlwaysOnName      : 
Nodes             : {SRV-SQL01-DCA, SRV-SQL02-DCA, SRV-SQL03-DCB}
Caption           : SQL Server 2014
FullName          : SRV-SQL-TFS\System.Object[]
```
