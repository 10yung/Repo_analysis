I'm trying to get the access token after logging in to GitHub, in order to use octokit.net to query user related information. Logging in works and I can see the usual claims. But I'm not able to find the access token. 

So far, I checked the history of the GitHub provider in this repository and saw that in 2015, there was a 'SaveTokens' property which was eventually removed later in favor of 'SaveTokensAsClaims'. However, this was also removed but I couldn't find any explanation why (or what the correct way is now). 

I also found #253 and  #228 but I do not fully understand where '_signInManager' comes from and how to use 'GetExternalLoginInfoAsync()'. From what I saw, this is somehow cookie related.

(Or is there another way to use octokit.net for user related info with this GitHub OAauth provider).


Issue: aspnet-contrib/AspNet.Security.OAuth.Providers#369

The Deezer OAuth 2.0 Provider was implemented.

Documentation: [Deezer API - OAuth](https://developers.deezer.com/api/oauth)
APP Registration at [Deezer Developer - My Apps](https://developers.deezer.com/myapps)

The Deezer API Permission is set by default to **basic_access** ( allow to access users basic information: name, firstname, profile picture) and **does not allow to get the email**.

Here is the config with the **email** permission:

```
using AspNet.Security.OAuth.Deezer;

...

public void ConfigureServices(IServiceCollection services)
{
    services.AddRouting();

    services.AddAuthentication(options =>
    {
        options.DefaultScheme = CookieAuthenticationDefaults.AuthenticationScheme;
    })

    .AddCookie(options =>
    {
        options.LoginPath = "/signin";
        options.LogoutPath = "/signout";
    })

    .AddDeezer(options =>
    {
        options.App_Id = "app_id";
        options.Secret = "secret";
        options.Scope.Add(DeezerAuthenticationConstants.Scopes.Email);
    });

   services.AddMvc().SetCompatibilityVersion(CompatibilityVersion.Version_3_0);
}

...
```

I am going to implement an Last.FM Provider. 
The standard is not defined in the docs, but it looks very like OAuth 2.0.
Documentation: [Last.fm Web Services - Authentication API](https://www.last.fm/api/authspec)
I am going to implement an OAuth 2.0 Provider with the Deezer API
Documentation: [Deezer API / OAuth](https://developers.deezer.com/api/oauth)

Add DingTalk provider

* Add DingTalk provider and unit test
* Update README.md
**Is your feature request related to a problem? Please describe.**
At least discord, and possibly some other providers, requires users choosing to sign in with that provider to authorize every time, even after the initial registration and authorization. Discord's API documentation mentions setting the 'prompt' to none to avoid that authorization request except in certain required circumstances (which, I assume, means initially authorizing an app). Currently, there's no easy or visible way to set the 'prompt' field of the oauth2 request.

I've seen mention of setting it via options.Prompt for the Azure AD provider, but none of the others I've looked at in this project have that option available. 

**Describe the solution you'd like**
I'd like to be able to set OauthOptions.Prompt to "none" or another valid string and have it pass that selected value as part of the oauth request. Using constants would be fine, too.

**Describe alternatives you've considered**
I've done some googling on how to modify the url in the request before it leaves my site, but to no avail.


Added Discord claim types and mappings for:
- Avatars
- Discord User Discriminator
This PR updates Arcade and the .NET Core SDK to support .NET Core 3.1.

It also updates the providers and tests to dual-target `netcoreapp3.0` and `netcoreapp3.1`, the idea being that 3.1.0 of the providers will explicitly support both, then after 3.0 goes out of support in March 2020 we can just target `netcoreapp31`. The sample client is updated to only support `netcoreapp3.1`.


Signed-off-by: vicente.yu 
add alipay provider

Using `AddApple` with `options.UsePrivateKey()` throws `WindowsCryptographicException: The system cannot find the file specified` during oauth flow. The .p8 file used is not the reason as exception happens after it's been read.
```
Internal.Cryptography.CryptoThrowHelper+WindowsCryptographicException:
   at System.Security.Cryptography.CngKeyLite.ImportKeyBlob (System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)
   at System.Security.Cryptography.CngPkcs8.ImportPkcs8 (System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)
   at System.Security.Cryptography.CngPkcs8.ImportPkcs8PrivateKey (System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)
   at System.Security.Cryptography.ECDsaImplementation+ECDsaCng.ImportPkcs8PrivateKey (System.Security.Cryptography.Algorithms, Version=4.3.1.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a)
   at AspNet.Security.OAuth.Apple.Internal.DefaultAppleClientSecretGenerator.CreateAlgorithm (AspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fabAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: /_/src/AspNet.Security.OAuth.Apple/Internal/DefaultAppleClientSecretGenerator.csAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: 100)
   at AspNet.Security.OAuth.Apple.Internal.DefaultAppleClientSecretGenerator+<GenerateNewSecretAsync>d__8.MoveNext (AspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fabAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: /_/src/AspNet.Security.OAuth.Apple/Internal/DefaultAppleClientSecretGenerator.csAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: 82)
   at System.Runtime.ExceptionServices.ExceptionDispatchInfo.Throw (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)
   at System.Runtime.CompilerServices.TaskAwaiter.ThrowForNonSuccess (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)
   at System.Runtime.CompilerServices.TaskAwaiter.HandleNonSuccessAndDebuggerNotification (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)
   at System.Runtime.CompilerServices.TaskAwaiter.ValidateEnd (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)
   at System.Runtime.CompilerServices.TaskAwaiter`1.GetResult (System.Private.CoreLib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e)
   at AspNet.Security.OAuth.Apple.Internal.DefaultAppleClientSecretGenerator+<GenerateAsync>d__7.MoveNext (AspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fabAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: /_/src/AspNet.Security.OAuth.Apple/Internal/DefaultAppleClientSecretGenerator.csAspNet.Security.OAuth.Apple, Version=3.0.0.0, Culture=neutral, PublicKeyToken=fa9e7b608b196fab: 48)
```

Problem doesn't occur when running locally on Windows but happens on Azure App Service (Windows/IIS configuration).

This seems to be related to https://github.com/dotnet/corefx/issues/40503 and https://github.com/dotnet/corefx/issues/27358 but setting both
`WEBSITE_LOAD_USER_PROFILE = 1`
`WEBSITE_LOAD_USER_PROFILE = *`
doesn't help.

Workaround for now is to generate secret manually via injected `AppleClientSecretGenerator.GenerateAsync` and use it instead of providing private key.