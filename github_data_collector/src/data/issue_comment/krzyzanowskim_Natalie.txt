A project I am working on correlates our `Storyboard` file's names with the `UIViewController` subclass that is it's initial view controller. The result is a `Storyboards.*` `struct` that conflicts in naming with the view controller type itself:

```swift
...
    struct ExampleViewController: Storyboard {

        static let identifier = "ExampleViewController"

        static var storyboard: UIStoryboard {
            return UIStoryboard(name: self.identifier, bundle: nil)
        }

        static func instantiateExampleViewController() -> ExampleViewController {
            return self.storyboard.instantiateExampleViewController() as! ExampleViewController
        }

        static func instantiateViewController(withIdentifier identifier: String) -> UIViewController {
            return self.storyboard.instantiateViewController(withIdentifier: identifier)
        }

        static func instantiateViewController<T: UIViewController>(ofType type: T.Type) -> T? where T: IdentifiableProtocol {
            return self.storyboard.instantiateViewController(ofType: type)
        }
    }
...
```

I appreciate the brevity of the struct's name and appending something like "File" clutters that. On the other hand it is more explicit: these are mappings to files as much as we'd love to abstract them away.
I am getting a build issue in my generated output file. The issue is with this code:

```swift
extension IdentifiableProtocol where Self: ExpenseClaimsNavigationController {
    public var storyboardIdentifier: String? { return "ExpenseClaimsNavigationController" }
    static var storyboardIdentifier: String? { return "ExpenseClaimsNavigationController" }
}

```
Specifically the public var. The exact error is: Cannot declare a `public var` in an extension with internal requirements

This is the relevant class:

```swift
class RotatingNavigationController: UINavigationController {
	override var shouldAutorotate: Bool {
		return true
	}
	
	override var supportedInterfaceOrientations: UIInterfaceOrientationMask {
		return [.portrait, .landscape]
	}
}

class LeaveAttachmentNavigationController: RotatingNavigationController {}
class ExpenseClaimsNavigationController: RotatingNavigationController {}
```

Strangely I don't have this issue in another project, the public keyword is not present. Am I doing something wrong or is this an issue with Natalie?
This is an issue if the storyboard has the same name as the initial controller e.g.
```
struct Storyboards {
    struct FooViewController: Storyboard {
        static func instantiateInitialController() -> FooViewController {
            return self.storyboard.instantiateInitialController() as! FooViewController
        }
    }
}
```
Opps! instantiateInitialController returns a Storyboards.FooViewController, not a Module.FooViewController :-(

The obvious work-around is not to name storyboards using the same name as the initial view controller. However for simple storyboards this can be a convenient and natural naming.

Looks like natalie just needs to parse the "customModule" attribute for "viewControllers" in the storyboard xml.
We have a project that came with Natalie installed and contains a very large storyboard. Our next step is that we want to refactor this main storyboard into a number of smaller storyboards. Do you have any suggestions of how to do this with Natalie installed? At the moment, as I understand it, there are a few issues being caused?

I can't really find any documentation on this and the team members (@gslondon) haven't really used Natalie before? If you could give some suggestions, documentations or blog posts about this that would be really helpful! 
Hello,

I have just integrated Natalie with my project using the build script given in the README.
When trying to compile the generated `Storyboards.swift`, I am having the error `Ambiguous type name 'Segue'`.

The issue is caused on a custom view controller inheriting from another custom view controller, therefore, on the child view controller, the type `Segue` can refer to neither it's own type or it's parent's type.

The generated code looks like the following:

~~~swift
extension X { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case viewDetail = "viewDetail"

        var kind: SegueKind? {
            switch (self) {
            case .viewDetail:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

extension UIStoryboardSegue {
    func selection() -> Y.Segue? {  // <-- Error on this line
        if let identifier = self.identifier {
            return DeliveryOrderHistoryViewController.Segue(rawValue: identifier)
        }
        return nil
    }
}

extension Y { 

    enum Segue: String, CustomStringConvertible, SegueProtocol {
        case viewDetail = "viewDetail"

        var kind: SegueKind? {
            switch (self) {
            case .viewDetail:
                return SegueKind(rawValue: "show")
            }
        }

        var destination: UIViewController.Type? {
            switch (self) {
            default:
                assertionFailure("Unknown destination")
                return nil
            }
        }

        var identifier: String? { return self.description } 
        var description: String { return self.rawValue }
    }

}

~~~

On the code above, `Y` inherits from `X`, which in turn inherits from `UIViewController`.

Do you have any recommendations on how to fix the issue?
Currently, a `fatalError` is thrown:

```
fatal error: Unsupported: file /usr/local/bin/natalie.swift, line 618
```

Two changes:
- I made Natalie support multiple inputs (folders or files)
- I made Natalie generate an initialization function for identifier view controllers which don't have a custom class

One feature request I'd like is for Natalie to allow an xcodeproj file as argument, parse it to find out which storyboards are included in which targets and generate a Storyboards.swift for each target. Like that, if the project has storyboards in an app target and in an extension target, Natalie will generate a separate file to include in each target that only makes the targets storyboards visible. It will also solve name collisions when targets have storyboards with the same name.

As a side note, I'm currently implementing this by wrapping Natalie around a ruby script which parses an xcodeproj file with the Xcodeproj gem (which came out of the Cocoapods project) and feeds Storyboard files to natalie. Unfortunately, there doesn't seem to be equally good Xcodeproj parsing libs in Swift.

@krzyzanowskim 

Here's a proposed fix for https://github.com/krzyzanowskim/Natalie/issues/37, as per [phimage's suggestion](https://github.com/krzyzanowskim/Natalie/issues/37#issuecomment-112368044).

This commit modifies `natalie.swift` so it can take a second argument `imports_file_json`. This JSON file must contain an array of all the framework names to import and that natalie might not be able to autodetect (see original issue).

For example, in `natalie-imports.json`:

```
["FlatUIKit"]
```

and then:

```
$ natalie.swift <path_to_project> natalie-imports.json
```

which will add `import FlatUIKit` right before custom module imports.

A couple notes:
- In a perfect world I would love `natalie-imports.json` to be automatically detected in `projectdir`, but since the documentation says that the path should be `projectdir/projectname` we'd have to go one directory up and that seems a bit hacky.
- Having a long argument like `--additional-imports natalie-imports.json` would be best, but I didn't want to add too much code without your approval (since we'd need to hack around `Process.argv`)

Let me know what you think about this solution and how to possibly improve it.

I'm not sure that this functionality should be placed directly inside Natalie, may be should be created a different tool.

Generating identifiers for storyboards stuff definitely is a good step :) But there are also quite a lot of magic strings in the project - for localizable strings (NSLocalizedString("Hello", ...)) or for images UIImage(named: "Logo"), and other files in the bundle. 

So, may be also can be generated analogue of R file on android. So, for strings and images can be generated something like:

``` Swift
struct Strings {
     static let Hello = "Hello"
}
struct Images {
    static let Logo = "Logo"
}
```

And for convenience:

``` Swift
struct LocalizedString {
     static var Hello = { return NSLocalizedString(Strings.hello, ...) }
}
```
