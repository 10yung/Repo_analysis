I've seen several requests in the issues backlog for "support extension X, Y, Z" sort of things. I started reading through https://github.com/heroku/heroku-buildpack-php/blob/master/support/build/README.md and realised what a huge document this is and how complex this process is currently...

I feel like this could be solved by, if Heroku finds an extension not supported "out the box" that it tries to install it from PECL, e.g. #371, if an application depends on `ext-uuid`, and `uuid` is not available already, it tries `pecl install uuid` perhaps?

I think this would solve the majority of extension requirements, but I have a feeling it might be easier said than done :sweat_smile:
When adding `"php": "^7.4"` to composer.json, the build fails (using `web: vendor/bin/heroku-php-nginx`):

    composer.json/composer.lock requires php ^7.4 -> no matching package found.
At least https://github.com/heroku/heroku-buildpack-php/commit/8b763a82a2b72efcd0d83b41a395c7e47f7f3b08#diff-ea789f880872defd1a3073c98e400551R677 and https://github.com/heroku/heroku-buildpack-php/commit/8b763a82a2b72efcd0d83b41a395c7e47f7f3b08#diff-ea789f880872defd1a3073c98e400551R685 are wrong. Not sure what it should be. At least using `heroku/heroku:16` gives 
```
docker: Error response from daemon: oci runtime error: container_linux.go:247: starting container process caused "exec: \"bob\": executable file not found in $PATH".
```
when trying to run 
```
docker run --rm -ti --env-file=../heroku-php-s3.dockerenv xdebug-heroku-16 bob build php-7.3/xdebug-2.7.0
```
Currently, I don't think there is a way to configure a different memory limit for web dynos and worker dynos. But this would be a great feature, given we have different needs:

- for web dynos, you want to keep the memory limit low (but still enough for the needs of the application), to allow for concurrency at the PHP-FPM level. The buildpack will properly guess the number of PHP-FPM workers based on the configured memory limit and on the dyno size.
- for worker dynos, the optimal solution would be to have the memory limit equal to (or close to, in case keeping a bit of extra memory for something else makes sense) the dyno memory, as there is only one process running.

For now, I configured my Procfile to use `php -d memory_limit=512M bin/console ...` to override the memory limit of the php.ini when running the worker. But this does not adapt automatically when scaling the dyno to bigger sizes.

An idea I have would be that the buildpack exposes an env variable with the guessed worker memory limit, that could be used in such command (or a script returning it, to use it as ``php -d memory_limit=`vendor/bin/heroku-buildpack-worker-memory-limit` bin/console`` if that's easier).

What do you think about that @dzuelke ?
The previous PR had a bug where the REGEX for grep was not properly escaped. This PR fixes that issue.
The goal of this PR is to add a github action that checks for the presence of a changelog entry.

It is better to add entries as a PR is merged instead of having to remember what was merged and generate a changelog at release time.

By automating this check, it's one less thing the maintainer has to remember, and it's one less thing a change might be blocked on i.e. "Looks good, but please add a changelog entry".

Let me know if you have any questions and Happy Friday!
We use the data warehouse [Snowflake](https://www.snowflake.com/). To access it from PHP requires either general ODBC support or their own [pdo_snowflake](https://github.com/snowflakedb/pdo_snowflake) extension.

Is it possible to add support for any means of connecting to snowflake from within the heroku php buildpack?
Support of Brotli compression on apache and nginx could be nice to have along Gzip and Deflate.

https://httpd.apache.org/docs/2.4/fr/mod/mod_brotli.html
https://github.com/google/ngx_brotli
As of today the following error is displayed when deploying an application:

```
2019-08-07T09:43:53.005605+00:00 app[web.1]: [heroku-exec] Starting
2019-08-07T09:43:53.006777+00:00 app[web.1]: warming up PHP OpCode caches for application: MyApplicationName
2019-08-07T09:43:54.164455+00:00 heroku[web.1]: State changed from starting to crashed
2019-08-07T09:43:54.236785+00:00 heroku[web.1]: State changed from crashed to starting
2019-08-07T09:43:54.113844+00:00 app[web.1]: Unable to determine Composer vendor-dir setting; is 'composer' executable on path or 'composer.phar' in current working directory?
2019-08-07T09:43:54.151332+00:00 heroku[web.1]: Process exited with status 1

```

In `Procfile` we have:

```bash
web: ./startWebProcess.sh
```

Then in `startWebProcess.sh`:

```bash
# Manually warm-up the OpCode cache to prevent cache slams / thundering herd problem
# @link https://tideways.com/profiler/blog/dodge-the-thundering-herd-with-file-based-opcache-in-php7
# Warming up the OpCode caches takes around 30 / 40 seconds. When the WebServer has not started within 25 seconds
# Heroku assumes it is crashed. Therefore we should use the ampersand "&" to start this process in the background.
# This way the WebServer does not have to wait for this process to end
echo "warming up PHP OpCode caches for application:" $HEROKU_APP_NAME
composer warmup-opcode &

# Eventually: launch the Apache WebServer which has PHP support and "public" as WebRoot
vendor/bin/heroku-php-apache2 public/
```

This way of invoking the `composer warmup-opcode` script (see https://github.com/jderusse/composer-warmup) used to work for quite some time.

Versions:

```
 -----> Installing platform packages...        
remote:        - php (7.3.8)        
remote:        - ext-gd (bundled with php)        
remote:        - ext-intl (bundled with php)        
remote:        - ext-mbstring (bundled with php)        
remote:        - ext-soap (bundled with php)        
remote:        - ext-imagick (3.4.4)        
remote:        - ext-apcu (5.1.17)        
remote:        - apache (2.4.39)        
remote:        - nginx (1.16.0)        
remote: -----> Installing dependencies...        
remote:        Composer version 1.9.0 2019-08-02 20:55:32  
```

Might be related to: https://github.com/heroku/heroku-buildpack-php/issues/348 and https://github.com/heroku/heroku-buildpack-php/pull/351 ?

Is it still possible to invoke a `composer` script? And if so, how to do it correctly?

Note that using `heroku run bash --app my-application-name` and then invoke  `composer warmup-opcode` works properly...

**UPDATE**
Apparently the error message itself comes from running `vendor/bin/heroku-php-apache2 public/`. This might have been there for a while, but apparently combined with another command it now crashes the application. 

Manually reverting the used buildpack to [`v158`](https://github.com/heroku/heroku-buildpack-php/releases/tag/v158) resolves the problem with the crashing app:

```
heroku buildpacks:set https://github.com/heroku/heroku-buildpack-php\#v158 -a my-application-name
```

So maybe the new version `v159` is a bit "stricter" in dealing with error messages and marking the app as being crashed?
This PR adds support for the `gzip_static` directive and allow nginx to serve precompressed static files. 