overcommit 0.47.0

This commit:

```
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   rake/rake_android.rb
        modified:   rake/rake_ios.rb
        modified:   rake/rake_mobileweb.rb
        modified:   shared/rake/teamcity.rb
        new file:   shared/rake/test/test_selection_ios_spec.rb
        deleted:    shared/rake/test/test_selection_mapper2_spec.rb
        renamed:    shared/rake/test/test_selection_mapper_spec.rb -> shared/rake/test/test_selection_merger_spec.rb
        modified:   shared/rake/test_run.rb
        renamed:    shared/rake/test_selection.rb -> shared/rake/test_selection_cal.rb
        renamed:    shared/rake/test_selection_mapper.rb -> shared/rake/test_selection_ios.rb
        new file:   shared/rake/test_selection_merger.rb

```
fails when running rspec tests because it still sees the moved/deleted files:

```
-rw-r--r-- 1 tim tim  3817 Dec 17 15:08 ./shared/rake/test_selection_cal.rb
-rw-r--r-- 1 tim tim 10924 Dec 17 16:13 ./shared/rake/test_selection_ios.rb
-rw-r--r-- 1 tim tim 14605 Dec 17 16:30 ./shared/rake/test_selection_mapper.rb
-rw-r--r-- 1 tim tim  3924 Dec 17 16:03 ./shared/rake/test_selection_merger.rb
-rw-r--r-- 1 tim tim  3766 Dec 17 16:30 ./shared/rake/test_selection.rb
-rw-r--r-- 1 tim tim  9576 Dec 17 16:13 ./shared/rake/test/test_selection_ios_spec.rb
-rw-r--r-- 1 tim tim  5893 Dec 17 16:30 ./shared/rake/test/test_selection_mapper2_spec.rb
-rw-r--r-- 1 tim tim 16812 Dec 17 16:30 ./shared/rake/test/test_selection_mapper_spec.rb
-rw-r--r-- 1 tim tim 14075 Dec 17 16:11 ./shared/rake/test/test_selection_merger_spec.rb

```
The deleted/renamed files shouldn't be showing up.

```
Failures:

  1) Test selection mapper generates mapping counts
     Failure/Error:
    ...
     # ./shared/rake/test/test_selection_mapper_spec.rb:354:in `block (2 levels) in <top (required)>'

Finished in 0.85755 seconds (files took 1.59 seconds to load)
141 examples, 1 failure

Failed examples:

rspec ./shared/rake/test/test_selection_mapper_spec.rb:343 # Test selection mapper generates mapping counts

```



**Motivation:**

There are a lot of people on a lot of teams who balk at having precommit hooks slow them down on every commit.  As a compromise, they would like the checks to happen on push rather than on commit.  This is reasonable to me as all I care about is that the end result of the code is correct, especially if they're squashing their commit prior to merge.

The downside is, as the code currently stands, the hooks only know how to hook into one type (as far as I can tell) so, for example, if I wanted to run `rubocop` `PrePush` rather than `PreCommit` then I'd need to add a whole new hook.

**Potential Goals:**

What I'd like is the ability to have the hook files understand how they execute in various contexts rather than having completely separate hooks.  For example:

* Run against the entire project
* Run against specific files (for example files changed between the current commit and the base branch)
* Run against a diff

When a new hook is added, it's required that it either can execute in those contexts, or it explicitly fails it must explicitly fail.

In this way any hook could be placed in any section of the config YAML (obviously assuming the hook supports it).

Thoughts?
Stumbled upon this when I was implementing a coworker's requested changes within a migration file that the branch in question had moved beyond.

**REPRODUCTION**
1. Create a base Rails migration
1. Add something innocuous to this file e.g., a `raise ActiveRecord::IrreversibleMigration` within `#down`
1. Create another migration
1. Run `rails db:migrate`
1. Go back and alter that `#down` to now be a reversible migration

**EXPECTED**

Overcommit allows the change to be committed

**ACTUAL**

`RailsSchemaUpToDate` fails, sometimes saying the migration you're committing changes to doesn't match the version of the schema, sometimes (quizzically) saying that you're adding a migration but haven't updated the schema file
Greetings Overcommit team,

I've created an additional pre-commit hook that runs puppetlabs 'pdk validate' and it seems to work quite well. Reason for doing this is because:

* Puppetlabs has bundled the toolset of their own and it's great!
* It basically replaces the separate toolings like puppet-lint, yamllint, yamlsyntax, rubocop... 

However i am a bit struggling with the rspec tests, can't get negative testing right. Would you be so kind as to nudge me in the right direction to do this?

the spec test in question can be found [here](https://github.com/NeatNerdPrime/overcommit/blob/feature/introducing_puppetlabs_pdk/spec/overcommit/hook/pre_commit/puppet_pdk_spec.rb)

Once i have this right, i can squash and make a PR.

Thank you for your feedback.

I know we can run pre-commit hooks on all files with https://github.com/sds/overcommit#continuous-integration

It would be great to be able to do this just on modified files and lines based on the commits ahead of the target branch in a pull request. 

I'm working with some legacy code that was never linted and so this would help with incrementally improving the code base without needing to use a service like CodeFactor. 
Initial attempt at solving #300.

This works by creating git blobs for each part of the signature and then taking each object id (SHA1) and pairing that with the hash (SHA256) of the contents of that blob. Those pairs are then written to another blob, delimited by a space, and one pair per line.

When checking if a signature has been verified then we compare the contents of the signature blob and not just the hash.

We can't just rely on the object id (SHA1) as collision attacks are feasible. A malicious repo owner could use such an attack to create an object with the same SHA1 as the configuration and hook contents.

I have kept the `overcommit.configuration.signature` in the git config for now but I don't think it is necessary. Removing it would loose the ability to show the `No previously recorded signature for configuration file` error but that doesn't seem like a huge loss. It may still be useful for change detection which is what the previous `signature_changed?` method did but nothing actually used it for that purpose, it was for signature verification instead.

I haven't tried using this locally yet so it could do with some manual testing before merging.

There are quite a few tests that fail for me but they also fail on master. Will see what the tests do on this PR.

Let me know what you think.
Apologies if this is a bit premature but it seems like the `LineEndings` hook is very slow as it is running on all files in the index. I still need to confirm this but I just wanted to create this issue to track anything that I discover.

The way I am working around this is to run this command instead:
```
git status --porcelain | grep -p '^\(A\|M\)' | cut -f3 -d ' ' | xargs git ls-files --eol
```
This will show the line endings for any file that has been added or modified.
I'd love to see some sort of check in the `CargoTest` pre-push hook that checked to see if there was a `Cargo.toml` or any `*.rs` files in the project before it tried to run it.
Output of linters, especially EsLint is much more prettier than output of overcommit - either everything in red or everything in white if no color is specified. It would be amazing if we could get unchanged output of linter, that would make it easier to spot errors.

IMO overcommit doesn't need to analyze lines at all, just fail if rubocop / eslint returns an error.
Leave it to developer to analyze the errors.
I've been looking at adding in a way to make sure that I've bumped the metadata.rb version of my cookbooks and a PrePush hook seemed a good way, anyone else think this is a good idea?