In PHPStorm, when you have code like ``$enum->equals()`` you don't have autocomplete of possible options.

That _should_ be achievable with meta file: https://blog.jetbrains.com/phpstorm/2019/02/new-phpstorm-meta-php-features/

Now... I am not going to lie, I tried and failed:

```php
// my enum class
/**
 * @method static Status INCOMPLETE()
 * @method static Status PENDING()
 * @method static Status FEEDBACK()
 * @method static Status OPTIONAL()
 * @method static Status APPROVED()
 */
class Status extends Enum
{
    private const INCOMPLETE = '(incomplete)';
    private const PENDING = '(pending)';
    private const FEEDBACK = '(feedback)';
    private const OPTIONAL = '(optional)';
    private const APPROVED = '(approved)';
}
```

and failed attempt of meta file (cache invalidated, just in case):

```php
<?php

namespace PHPSTORM_META {

    registerArgumentsSet('profile_status_enum',
        \App\Doctrine\Enum\Status::PENDING(),
        \App\Doctrine\Enum\Status::APPROVED(),
        \App\Doctrine\Enum\Status::FEEDBACK(),
        \App\Doctrine\Enum\Status::INCOMPLETE(),
        \App\Doctrine\Enum\Status::OPTIONAL(),
    );

    expectedArguments(\App\Doctrine\Enum\Status::equals(), 0, argumentsSet('profile_status_enum'));
}
```

Used example was intentionally for real enum class, just to see if I can make it work.

I am honestly not sure if this is a bug in PHPStorm or more likely that I messed up but if someone has experience with this, it would be nice to have autocomplete by reading from ``values()`` method.

---
The reason I created this issue is that if this library has meta file, PHPStorm will automatically pick it up. One ``composer update`` should be enough for end-users.
Hi, this is a wonderfull project. I already used it, because SplEnum is not always available.

The one thing I am missing is an interface for the \MyCLabs\Enum\Enum class. It would be more easy to use the interface for typehint.

Thx.
Hello. I'm trying to use this and am running into problems.

```
class TestEnum extends Enum {
	const Nothing = 0;
	const TestOne = 1;
	const TestTwo = 2;
	const TestThree = 3;
}
```

```
$test = TestEnum::TestOne();
$isValid = TestEnum::isValid($test); // This is false.
```

What am I doing wrong?
Thanks for this library MyClabs :)

Not sure if this should be resolved or not. I find it problematic that when searching, the method does not consider that there may be several constants with same values. Example of an international dialling code enum:

```php
const ITA = '39'; // this is fine and unique value.
const IMN = '44'; // UK and Isle of Man share the same code.
const GBR = '44'; // UK and Isle of Man share the same code.
```

Then when I instantiate the Enum like so: 

```php
        $testEnum = new CountryCallingCode(CountryCallingCode::GBR);
        var_dump($testEnum->getKey()); // return IMN not GBR!!
```

Bug at [this](https://github.com/myclabs/php-enum/blob/master/src/Enum.php#L73) line. ([proof](http://php.net/manual/en/language.oop5.constants.php))
It will be better use the name of constant for `__toString()`.
Ideally, `SomeEnum::Foo()` should always return the same instance of `SomeEnum`, so you can do `$someEnumValue1 === SomeEnum::Foo()` instead of `$someEnumValue1->getValue() !== SomeEnum::Foo`

Here's another idea:

Perhaps a variant of this class which doesn't have a value for each enum member, so `SomeEnum::FOO` doesn't work but `SomeEnum::FOO()` does? Could be used like so in PHP 5.6:

``` php
class SomeEnum extends ValuelessEnum
{
    const _values = ['FOO', 'BAR', 'QUX'];
}
```

Or something like that. Maybe not a good idea. What do you think?
