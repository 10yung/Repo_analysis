This is a first draft and I am unsure about my implementation, but I would need some help to be able to continue. I am particularly unsure about the Spec part. I started an OptionalFeatureAssertionsSpec, but then I noticed there was already OptionalAssertionsSpec, so I modified thos classes instead. Now I'm stuck with OptionalAssertionsSpec that doesn't compile (still learning Kotlin syntax as well as this project).

Thanks! 

----
I confirm that I have read the [Contributor Agreements v1.0](https://github.com/robstoll/atrium/blob/master/.github/Contributor%20Agreements%20v1.0.txt), agree to be bound on them and confirm that my contribution is compliant.

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce ZonedDateTimeAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `zonedDateTimeAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions (only `fun`) so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)  
- copy the `ZonedDateTimeAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce LocalDateTimeAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `localDateTimeAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions (only `fun`) so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)  
- copy the `LocalDateTimeAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce LocalDateAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `localDateAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions (only `fun`) so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)  
- copy the `LocalDateAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce FileAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `fileAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions expecting an assertionCreator so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)  
- copy the `FileAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce ChronoZonedDateTimeAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `chronoZonedDateTimeAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)
- copy the `ChronoZonedDateTimeAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce ChronoLocalDateTimeAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `chronoLocalDateTimeAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)
- copy the `ChronoLocalDateTimeAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): jvm
*Extension* (none, kotlin 1.3, jdk8): jdk8

## Code related feature

We want to introduce ChronoLocalDateAssertions for the new infix API `api-infix-en_GB`.

Following the things you need to do:

- copy the file `chronoLocalDateAssertions.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - adjust the signatures of the assertion functions so that they are infix functions (see other files or files in atrium-api-infix-en_GB-common for a guideline)
  - open module-info.java in atrium-api-infix-en_GB-jdk8-jvm and make sure `exports ch.tutteli.atrium.api.infix.en_GB.jdk8;` is not commented out (might be someone else already did that by now)
- copy the `ChronoLocalDateAssertionsSpec.kt` from atrium-api-fluent-en_GB-jdk8-jvm to atrium-api-infix-en_GB-jdk8-jvm
  - introduce a function in the companion object for each assertion function so that we see the infix API in action (see for instance CollectionAssertionsSpec in atrium-api-infix-en_GB-common)


## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime,
  we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): all
*Extension* (none, kotlin 1.3, jdk8): none

## Code related feature
Based on discussion in https://github.com/robstoll/atrium-roadmap/issues/56
We would like to see
```
◆ contains, in any order: 
  ⚬ an item which:
      »  is less than: 0        (kotlin.Int <1234789>)
        » but no such item was found.
```
<hr/>

Instead of:
```
◆ contains, in any order: 
  ⚬ an entry which: 
      » is less than: 0        (kotlin.Int <1234789>)
    ⚬ ▶ number of occurrences: 0
        ◾ is at least: 1
```

This change shall not affect cases like `atLeast(2)` or `exactly(1)`

## Your first contribution?
- Write a comment `I'll work on this` if you would like to take this issue over. 
  This way we get the chance to revise the description in case things have changed in the meantime, we might give you additional hints and we can assign the task to you, so that others do not start as well.
- See [Your first code contribution](https://github.com/robstoll/atrium/blob/master/.github/CONTRIBUTING.md#your-first-code-contribution) for guidelines.  
- Do not hesitate to ask questions here or to contact us via [Atrium's slack channel](https://kotlinlang.slack.com/team/U3DE1TXKP) if you need help
  ([Invite yourself](https://slack.kotlinlang.org/) in case you do not have an account yet).

*Platform* (jvm, js, android): all
*Extension* (none, kotlin 1.3, jdk8): none

## Code related feature
Based on the discussion in https://github.com/robstoll/atrium-roadmap/issues/55

To emphasise that we only report failed assertions per default we want to change the root bullet points accordingly to ✘ and ✔ (where only ✘ are shown per default).

Following the things you need to do:

*lib*
- [ ] TextFallbackAssertionFormatter needs to report like TextSummaryAssertionGroupFormatter
