When there's only a server change (on src-ssr directory) -  build only the server app part.
as a spa developer, where often dialogs etc. are used for dynamic ui/ux elements one problem often happens is, that sending a keep-alived compontentto the portal - after hiding the portal - it is destroyed. When now "re-open" the dialog, the forms etc. are unkeeped / fresh.

this is no error or issue by quasar, it is - i think - the nature for handling this process.

after some investigation, i found a issue at the "offical" vue portal from linusBorg where someone didnt closed the portal rightly, so the component was still keep-alived. May this "issue" is a way for a solution?

i also find a - untested - global keep alive

https://github.com/humor-grad-school/vue-keep-alive-global

where somone caches the component instance(s).

the request for this feature is, to give a way for working with the really usefull vue keep-alive option also inside portaled components. (primary qdialogs, but also qtabs, qsplitter etc.).

the state of the component inside the "sleeping-portal" should look like this inactive comp:

![grafik](https://user-images.githubusercontent.com/8803626/72678506-e63d9880-3aa6-11ea-8f2f-f3614e97db61.png)


that there are other ways around, like status management vuex, vuex-caches, display hide, ... i know, but this is always a bigger-workaround and leaving the "quasar-way".

(and vue-router-keep-alived routes are also working nicely with quasar, but only for clearly routed "router-view-pages")

It would a great benefit for the quasar fw, if the developer has a "out of the box" component "caching". thank you for reading this "experimantl idea".


When I makeing some text with QEditor there can be some links like
```
<a href="http://somesite.site/somepath/1">
<img src="http://somesite.site/somepath/2">
```
It is very useful to auto truncate link path's and to excluding base path if truncate option is true
```
<a href="/somepath/1">
<img src="/somepath/2">
```
Feature request to make such syntax if it is possible.

```
<q-editor basePath="http://somesite.site" truncateLinks="true" />
```

Or maybe simpier
```
<q-editor linksTruncatePath="http://somesite.site" />
```
When fast scrolling using the scrollbar with the mouse or with touch events on mobile, flicking the list to the end, it snaps to the second to last item, instead of the last item.

Codepen:
https://codepen.io/jeancaffou/pen/MWYPqQY

Screencast:
https://drive.google.com/file/d/1VGnBQ6ZEfS1tivnL73YXOeobTIAPkfFy/view
See screencast, it jumps back to item 99 instead of 100
**Is your feature request related to a problem? Please describe.**
QTable is missing the same expand API as QTree has

**Describe the solution you'd like**
Give QTable also an expand API

**Describe alternatives you've considered**
None

**Additional context**
None
my use case was to allow false to be null/undefined

such as in a v-for of an object array where I want item.selected without having to append a selected property to each item in advance.

`:false-value="null" :indeterminate-value="''"`

`indeterminateValue `is `null `by default so having the `void 0` comparison was redundant and caused the bug

<!--
Please make sure to read the Pull Request Guidelines:
https://github.com/quasarframework/quasar/blob/dev/.github/CONTRIBUTING.md#pull-request-guidelines
-->

<!-- PULL REQUEST TEMPLATE -->
<!-- (Update "[ ]" to "[x]" to check a box) -->

**What kind of change does this PR introduce?** (check at least one)

- [x] Bugfix
- [ ] Feature
- [ ] Documentation
- [ ] Code style update
- [ ] Refactor
- [ ] Build-related changes
- [ ] Other, please describe:

**Does this PR introduce a breaking change?** (check one)

- [ ] Yes
- [x] No

If yes, please describe the impact and migration path for existing applications:

**The PR fulfills these requirements:**

- [x] It's submitted to the dev branch and not the master branch
- [x] When resolving a specific issue, it's referenced in the PR's title (e.g. fix: #xxx[,#xxx], where "xxx" is the issue number)
- [ ] It's been tested on a Cordova (iOS, Android) app
- [ ] It's been tested on a Electron app
- [x] Any necessary documentation has been added or updated in the docs (for faster update click on "Suggest an edit on GitHub" at bottom of page) or explained in the PR's description.

If adding a new feature, the PR's description includes:

 - [x] A convincing reason for adding this feature (to avoid wasting your time, it's best to open a suggestion issue first and wait for approval before working on it)

Is there any plan to beautify this ugly components?
![image](https://user-images.githubusercontent.com/16662647/72632117-910f6300-3990-11ea-9033-364539b4c5ea.png)

you can refer to https://vuetifyjs.com/en/components/file-inputs
![image](https://user-images.githubusercontent.com/16662647/72632323-02e7ac80-3991-11ea-90c7-432e75c1be37.png)

as for Uploader components, i think it's too complex in some occasion
i just want user to select a file, and i will use FileReader api to read it, no upload action exists

This issue is only to warn who'll get my same problem in the future, maybe a disclaimer could be added to the `v-intersection` page.
Can be closed right away if you think it's not worth a disclaimer.  

As stated in the API regarding the handler return value: `Only value of interest is the Boolean false, in which case observing the element stops`.
Rephrased: if you return false from the handler, the observer stops.

Also, the observer always emit one entry when first attached and you are supposed to check for `entry.isIntersecting`.

Take this snippet

```vue
<img v-intersection.once="entry => entry.isIntersecting && someMethod()" />
```

This could seem like a clean and concise way to express "when intersecting for the first time, execute this method", but `someMethod()` won't actually ever be called (unless the element is already into the view).
The "registration emission" of the observer will return `false` because of the `entry.isIntersecting` and never emit anything else.

Using normal anonymous functions will work, but at this point it's better to just use a Vue method 
and reference that instead. 

```vue
<img v-intersection.once="function(entry) { entry.isIntersecting && someMethod(); }" />
```
Please add Buddhist calendar.
Right now, It have gregorian and persian 

![2020_01_17_11_25_40_QDate_Quasar_Framework](https://user-images.githubusercontent.com/12456804/72584384-6257a500-391c-11ea-97f5-d43274d6f7ed.png)



**Describe the bug**
When trying a custom uploader in a `.ts` file and doing `import { QUploaderBase } from 'quasar'` it gives this error:

> import QUploaderBase
> Module 'node_modules/quasar/dist/types' has no exported member 'QUploaderBase'.ts(2305)

**Expected behavior**
`QUploaderBase` type should be exported by Quasar, now it is only exporting `QUploader`

**Screenshots**
If applicable, add screenshots to help explain your problem.
<img width="815" alt="image" src="https://user-images.githubusercontent.com/3253920/72582458-2cb7b980-3926-11ea-8392-464361b574f3.png">

