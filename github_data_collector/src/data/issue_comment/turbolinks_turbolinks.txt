I already posted this as a [question](https://stackoverflow.com/questions/59763878/rails-6-app-links-not-working-until-refresh) on stackoverflow, but I thought maybe I could get help here.
I was trying to follow [this tutorial](https://www.youtube.com/watch?time_continue=62&v=ibxlNN73UTY&feature=emb_logol) by GoRails. to add an autocomplete feature to my Rails 6 app. After following the tutorial I got the search bar to work as he demonstrates in the video, but now whenever I click on a link in my app, my url changes accordingly but I see this page:
![image](https://user-images.githubusercontent.com/35082619/72589873-7377c600-38ca-11ea-91f4-2e5bf64959ae.png)
If I refresh the page, the app directs me to the page that the url shows. Even if I comment out the js files for easyautocomplete and I leave these lines in the head of my application.html.erb in layouts, I still see the problem
```
<%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload'  %>
<%= stylesheet_pack_tag 'application', media: 'all', 'data-turbolinks-track': 'reload'  %>
<%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
```

If I get rid of the "require("turbolinks").start()" in my application.js, then the problem goes away but I still want to use turbolinks:
```
require('@rails/ujs').start()
require('turbolinks').start()
require('@rails/activestorage').start()
require('channels')
require('jquery')

//= require jquery
//= require popper
//= require bootstrap-sprockets
//= require jquery.easy-autocomplete
```
Also, I see this error in my browser console:
![image](https://user-images.githubusercontent.com/35082619/72590457-b5edd280-38cb-11ea-8c98-e90e7091c0af.png)

I also created a sample app that also has the same problem in this repository: https://github.com/zx1301/sampleAppTurbolinksError I'm using ruby 2.6.2 and rails 6.0.2. In its current state I commented out the lines linking the css and js files to easyAutocomplete and the problem persists unless I disable turbolinks by commenting out turbolinks in application.js.
Turbolinks is working great.  Thanks for the library.

I'm using the progress bar, but I notice that on restoration visits (from cache): 

1. the user presses back
2. page displays instantly
3. progress bar appears
4. progress bar disappears
5. page looks exactly as in step 2

So for the user it's confusing since it looks like the page is ready, and then the bar appears.

Is this the intended way it should behave?  Is there a way to not show the progress bar on restoration visits?
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/turbolinks/turbolinks/network/alerts).

</details>
Hello,

I'm using the [Olark](https://www.olark.com/api) chat with turbolinks into a Rails application, and the issue is that turbolinks does not take into account the chat inserted with JS into an iframe after render the page.

how could tell turbolinks to start caching after load the chat?

- Olark has this event [api_chat_onready](https://www.olark.com/api#api_chat_onready) to detect when the Olark chatbox has loaded.

I was thinking about store the chat into the turbolinks cache, but it is not working.

Any idea?
Hi,
I recently starded using turbolink with bootstrap but I'm facing a couple of issues, I followed the documentation and tried several solutions but i still have some issue, since the exclusive behavior of turbolinks on a webpage, I don't fully understand if the problem is unexpected or if I missed some configuration.

I have a page with checkbox and radio buttons. Normally, if I go back and forth from the page, the selections are "remembered" by the browser, but since I added turbolinks, each time I go back to that page I see the active checkmark for a second, and then they disappear. then, if I refresh the page, the checkmarks are restored.

Since I'm using bootstrap with a pure javascript library (bootstrap-native) I tried moving it into the head of the document with defer, but every animation or behavior are ignored (if you click on a checkbox, bootstrap add an '.active' class to the element, but if I put the .js in the head it does not work).

can you help me understandig and possibly fix this behavior?

thank you
Hi,

We use turbolinks with `turbolinks-cache-control=no-preview`. The error only happens when you have more javascript to be executed when going to a page. When you go back in history and then very quickly go forward with the browser button while the javascript is still executed, then you stay on the page but the url changes correctly.
`<base href="/">` is not considered when evaluating new script tags in the head that weren't in the previous page. 

This is causing the script to try and load from the wrong location if the script src is relative and relying on base href to pick up correct relativeness. 
Turbolinks initialisation currently breaks the default refresh behaviour when it's run after a POST submission. A POST followed by a refresh should trigger an "Are you sure…?" confirm dialog, whereas with Turbolinks installed, it just reloads the existing location with a GET.

When starting up, [Turbolinks stores the initial location and restoration identifier in the session history](https://github.com/turbolinks/turbolinks/blob/b85b343f554371bea9aee4d2165b99a2b0522211/src/controller.ts#L101) by calling `replaceState`. This standardises the way to retrieve a restoration identifier on any popstate event. However, according the to the spec:

> 3. [If the state push flag is not set], update the current entry in browsingContext's session history so that … it represents a GET request, if it currently represents a non-GET request (e.g. it was the result of a POST submission).
> https://html.spec.whatwg.org/multipage/history.html#history-1

So when a page loads after a POST, Turbolinks replaces the current entry with a GET to the same location, and therefore will not re-POST or display a confirm dialog upon refresh\*.

This pull request tweaks initialisation to store the initial restoration identifier and location as properties on the `History` instance, avoiding the need to use `replaceState`. When the history is popped to the initial entry, `event.state` will be `null`, and by asserting that the existing location matches the stored initial location, the restoration identifier is retrieved accordingly. Pops to non-initial entries will be handled as before.

Fixes #60 
Fixes #229

---

\* This is observed in Chrome and Firefox, which comply with the spec. Safari behaves as we _want_, but does not comply with the spec.
PWAs usually include a back link inside the UI. The back link doesn't use the browser history, but the structure of the content (e.g. link to parent category):

> Some might argue that because Android provides a back button through the device itself, then there is no need to replace the browser’s back functionality. In fact, the two interactions do different things. Most apps continue to offer a back button in the header as an "up" action, to navigate within the hierarchical relationship between pages. The system’s back functionality might close a modal window or navigate to a different app entirely.
> https://www.smashingmagazine.com/2017/11/designing-for-a-browserless-web/

Turbolinks should provide a way to trigger a restoration (without an additional server request) when the back link is clicked, even if the link doesn't use the browser history. Basically it would be useful to annotate a link (e.g. `data-turbolinks-action="restore"`) and have it restore the content (if exists) without additional server requests.

Related: https://github.com/turbolinks/turbolinks/issues/77 I decided to open a new issue, since the other is very old and doesn't consider the erging patterns of PWAs.
See: https://github.com/turbolinks/turbolinks/blob/26f42b148b624115b97e4d083f3a1f47d72a242f/src/progress_bar.ts#L71

If progress delay is configured to be less than 450ms, then subsequent requests, before previous request has finished, will intermittently hide the progress bar. IE: User clicks link, before link finishes, clicks a different link, etc.

We have opted to have no delay and show the progress bar on every request, and solved the above with

```
    window.Turbolinks.ProgressBar.prototype.fadeProgressElement = function(callback) {
      this.progressElement.style.opacity = "0"
      callback()
    };
```