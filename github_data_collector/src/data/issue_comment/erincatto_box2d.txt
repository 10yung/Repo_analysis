https://twitter.com/impbox/status/1217757519373668353

The manual currently is in DOCX format. But I don't have Microsoft Word and I don't want to have it. Is this really the only way to access the documentation?

Can you please switch to a format that is not proprietary?

OpenDocument Format is one option (`.odt`, used by e.g. LibreOffice and OpenOffice.org).
An export to PDF would also be fine.

A HTML manual would be even better.
1. add `make install` command to CMakeLists.txt, rename `samples` as ` testbed`
2. put `extern` folder under `samples` for testbed samples built standalone 
3. add conditional include for mingw build under windowns in `samples/main.cpp`
4. recover `GetVertexCount` and `GetVertex` functions in `b2_polygon_shape.h` for compatable purpose
5. modification tested only under Win10x64 with MinGW 7.3.0 x64
Hello, how do you integrate this into the latest xcode11.2.1, I didn't find any related teaching, others are too old to integrate, can you tell me or there are other detailed documents, thank you
In samples/main.cpp line 88

`const char* fontPath = "Data/DroidSans.ttf"`, but _data_/DroidSans.ttf (case sensitivity) is found instead in the same directory.
+-box2d
   |--samples
       |---main.cpp
       |---_data/DroidSans.ttf_
       .
       .

After building, build/samples/samples crashes with error "Assertion `0' failed", because data/DroidSans.ttf is missing from build/samples directory 

+-box2d
|--build
|---samples
|----samples
|----_data/DroidSans.ttf <--- missing. samples crashes when not present_

not sure if this issue is present on windows.
please fix src\CMakeLists.txt line 107

'source_group(TREE "../include" PREFIX "include" FILES ${BOX2D_HEADER_FILES})'
to
`source_group(TREE "${CMAKE_CURRENT_SOURCE_DIR}/../include" PREFIX "include" FILES ${BOX2D_HEADER_FILES})`

Thanks!
When using the b2RopeJoint I need to know when I have reached its limit. However when making the call `b2RopeJoint::GetLimitState()` I don't receive `b2LimitState::e_atUpperLimit` as I expect.

When doing the following change in `b2RopeJoint::InitVelocityConstraints` I seem to get the behavior that I want:
`float32 C = m_length - m_maxLength;
	if (C > 0.0f)`
to
`float32 C = m_length - m_maxLength;
	if (C >= 0.0f)`

It would be useful for developers to have more control over the variables defined in [b2Settings.h](https://github.com/erincatto/Box2D/blob/master/Box2D/Common/b2Settings.h) in order to tailor the physics behavior for their application. It would also be preferable to be able to do this without having to fork and modify Box2D.

### Example Use Case
I am writing a simulator for soccer-playing robots, and need collisions to be elastic even at low speeds. The default value of `b2_velocityThreshold` doesn't work in this case because all collisions happening below 1m/s will "stick".

Therefore I'd like to be able to change that value, preferably without forking the Box2D repository so that there are fewer things to manage in the project.

### Proposed Solution
Wrap all (or most) of the defined variables in [b2Settings.h](https://github.com/erincatto/Box2D/blob/master/Box2D/Common/b2Settings.h) with `#ifndef` blocks. That way developers using the library can define the variables themselves if they want to change them, but behavior is otherwise unchanged.

[See here for an example.](https://github.com/UBC-Thunderbots/Box2D/commit/cba3121823241634638e2b294615df6c157cf4be)

With this change I can manually define the variables with the values I want directly within my project and build-system. 

Here's an example bazel rule I'm using in my project with this new `#ifndef` system.
```
cc_library(
    name = "box2d",
    srcs = glob(["Box2D/**/*.cpp"]),
    hdrs = glob(["Box2D/**/*.h"]),
    includes = [
        ".",
    ],
    defines = [
        "b2_maxPolygonVertices=10",
        "b2_linearSlop=0.001f",
        "b2_velocityThreshold=0.001f",
    ],
    visibility = ["//visibility:public"],
)
```
Hello!

I created my own first programm with Box2d (not a test of the tesbed) but my gravitation is way too strong. The body falls extremely fast although I use the same values as the testbed.
Heres my code:
https://pastebin.com/gr9pNzSS
