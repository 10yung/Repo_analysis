I needed to pass an interner to the lexer (to avoid calling `.to_owned()` for idents) but there doesn't seem to be a way to add it to the signature without making the proc macro panic.
As the grammar gets large, compile times grow a lot. A grammar [similar to C](https://gitlab.com/martin-t/qc2rust/blob/dc03e2b0fa113a6a0d2c0078e7a0ae7e14ffeafb/qc2rust-parser/src/parser.rs#L322) but still a lot simpler takes about 2 or 3 minutes to compile and it gets recompiled on any change to the project. I had to put it in a separate crate to avoid it. Expressions with many precedence levels seem to be the main cause but even without them it takes way too long.

---

Not sure if related but doc tests also seem to take ages when using plex and a large grammar.
error recovery is important for practical parser, is there any plan that plex will support it?
for example, when we are failed to parse a statement, we skip remaining tokens until we met a semicolon:
```
program {
    => vec![],
    => program[mut z1] statement[z2] => {z1.push(z2); z1},
}
statement {
    expression[z1] Semicolon => Statement::Expression(z1),
    .* Semicolon => Statement => Statement::Error,
}
```
Thanks for plex! Would it be feasible to support multiple entry points that reuse the same grammar? As an example, I have something like:

```
statement: Statement {
    expression[e] TokenSemicolon => ExprStatement(e),
    // other variants...
}

expression: Expr {
    // some variants...
}
```

and want to expose parser entry points for both Expr and Statement. This might be possible via a single entry point that returns an enum but I'm wondering if there's a cleaner way.
Hey, i wanted to ask if it's possible to add a new optional Program to the parser so you can for example in php or html open a new context.
I am working on a language using Plex, and would like to remove parentheses from function calls. From what I can tell according to [this question](https://stackoverflow.com/questions/33444361/resolve-grammar-function-call-without-parentheses-vs-an-expression), doing this would require "backtracing", to allow patterns like this in the parser: `Ident(i) exp_list[e] { if ($1 is not defined) { back_and_choose_another_rule(); } }`. Would it be possible to add this, or is there better way to do this that Plex is capable of?

P.s. â€” I'm new to using parsers so I may have no idea what I'm actually talking about. Sorry if this doesn't make sense!
Would it be possible to add support for an optional token in the parser?

I'm trying to implement a parser that allows me to parse a language with an optional semicolon. If this is already implemented it probably should be documented.
In some languages identifiers and keywords are case-insensitive. Some examples are Ada, VHDL and SQL. Also literals in other languages like C and C++ can be in parts case-insensitive. 

For these cases it would be helpful to mark regexes to match case-insensitive. In flex regexes that are case-insensitive are prefixed with `?i:`. 
Automated testing is great! It would probably be a good idea to write some.
Hi!

I'm not very familiar with Rust, but very excited by your library. Only my problem is I decided to keep on latest stable Rust.
Is it very difficult to support stable Rust at least lexer part?
