[uncss.me](https://uncss.me) is a site created with UnCSS to help developers dry their stylesheets. Hope you like it!
Bumps [handlebars](https://github.com/wycats/handlebars.js) from 4.1.2 to 4.5.3.
<details>
<summary>Changelog</summary>

*Sourced from [handlebars's changelog](https://github.com/wycats/handlebars.js/blob/master/release-notes.md).*

> ## v4.5.3 - November 18th, 2019
> Bugfixes:
> 
> - fix: add "no-prototype-builtins" eslint-rule and fix all occurences - f7f05d7
> - fix: add more properties required to be enumerable - 1988878
> 
> Chores / Build:
> - fix: use !== 0 instead of != 0 - c02b05f
> - add chai and dirty-chai and sinon, for cleaner test-assertions and spies, 
>   deprecate old assertion-methods  - 93e284e, 886ba86, 0817dad, 93516a0
> 
> Security:
> 
> - The properties `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` 
>   have been added to the list of "properties that must be enumerable".
>   If a property by that name is found and not enumerable on its parent, 
>   it will silently evaluate to `undefined`. This is done in both the compiled template and the "lookup"-helper. 
>   This will prevent new Remote-Code-Execution exploits that have been
>   published recently.
> 
> Compatibility notes: 
> 
> - Due to the security-fixes. The semantics of the templates using
>   `__proto__`, `__defineGetter__`, `__defineSetter__` and `__lookupGetter__` in the respect that those expression now return 
>   `undefined` rather than their actual value from the proto.
> - The semantics have not changed in cases where the properties are  enumerable, as in:
> 
> ```js
> {
>   __proto__: 'some string'
> }
> ```
> 
> - The change may be breaking in that respect, but we still only 
>   increase the patch-version, because the incompatible use-cases
>   are not intended, undocumented and far less important than fixing
>   Remote-Code-Execution exploits on existing systems.
> 
> 
> 
> [Commits](https://github.com/wycats/handlebars.js/compare/v4.5.2...v4.5.3)
> 
> ## v4.5.2 - November 13th, 2019
> # Bugfixes
> 
> - fix: use String(field) in lookup when checking for "constructor" - d541378
> - test: add fluent API for testing Handlebars - c2ac79c
> 
> Compatibility notes:
> - no incompatibility are to be expected
></tr></table> ... (truncated)
</details>
<details>
<summary>Commits</summary>

- [`c819c8b`](https://github.com/wycats/handlebars.js/commit/c819c8b533934d2ac18001d7eb27a3205b00c2f3) v4.5.3
- [`827c9d0`](https://github.com/wycats/handlebars.js/commit/827c9d0747bef7d7f89829779523b6b2dcf3051d) Update release notes
- [`f7f05d7`](https://github.com/wycats/handlebars.js/commit/f7f05d7558e674856686b62a00cde5758f3b7a08) fix: add "no-prototype-builtins" eslint-rule and fix all occurences
- [`1988878`](https://github.com/wycats/handlebars.js/commit/198887808780bbef9dba67a8af68ece091d5baa7) fix: add more properties required to be enumerable
- [`886ba86`](https://github.com/wycats/handlebars.js/commit/886ba86c2f9cc71b7d99b9018fbe2d72a57085cc) test/chore: add chai/expect and sinon to "runtime"-environment
- [`0817dad`](https://github.com/wycats/handlebars.js/commit/0817dad7e72c51d07f7700547d0c69aa79a4976b) test: add sinon as global variable to eslint in the specs
- [`93516a0`](https://github.com/wycats/handlebars.js/commit/93516a0b07026ebd23c84fddf270a0c8b570bc59) test: add sinon.js for spies, deprecate current assertions
- [`93e284e`](https://github.com/wycats/handlebars.js/commit/93e284ed9be1e38c5e6945f15af1ccd689f2ada6) chore: add chai and dirty-chai for better test assertions
- [`c02b05f`](https://github.com/wycats/handlebars.js/commit/c02b05fa819f46bb66c878bebc6e8006408ebd5c) fix: use !== 0 instead of != 0
- [`8de121d`](https://github.com/wycats/handlebars.js/commit/8de121d21c88a6ab877e3a0eec9daaac483f3bf0) v4.5.2
- Additional commits viewable in [compare view](https://github.com/wycats/handlebars.js/compare/v4.1.2...v4.5.3)
</details>
<br />

[![Dependabot compatibility score](https://dependabot-badges.githubapp.com/badges/compatibility_score?dependency-name=handlebars&package-manager=npm_and_yarn&previous-version=4.1.2&new-version=4.5.3)](https://help.github.com/articles/configuring-automated-security-fixes)

Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting `@dependabot rebase`.

[//]: # (dependabot-automerge-start)
[//]: # (dependabot-automerge-end)

---

<details>
<summary>Dependabot commands and options</summary>
<br />

You can trigger Dependabot actions by commenting on this PR:
- `@dependabot rebase` will rebase this PR
- `@dependabot recreate` will recreate this PR, overwriting any edits that have been made to it
- `@dependabot merge` will merge this PR after your CI passes on it
- `@dependabot squash and merge` will squash and merge this PR after your CI passes on it
- `@dependabot cancel merge` will cancel a previously requested merge and block automerging
- `@dependabot reopen` will reopen this PR if it is closed
- `@dependabot ignore this [patch|minor|major] version` will close this PR and stop Dependabot creating any more for this minor/major version (unless you reopen the PR or upgrade to it yourself)
- `@dependabot ignore this dependency` will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)
- `@dependabot use these labels` will set the current labels as the default for future PRs for this repo and language
- `@dependabot use these reviewers` will set the current reviewers as the default for future PRs for this repo and language
- `@dependabot use these assignees` will set the current assignees as the default for future PRs for this repo and language
- `@dependabot use this milestone` will set the current milestone as the default for future PRs for this repo and language

You can disable automated security fix PRs for this repo from the [Security Alerts page](https://github.com/uncss/uncss/network/alerts).

</details>
Hi,

I'm new to node, trying a Windows 7 node script to strip css from local files.

Node script path is: ' C:\Users\admin\AppData\Roaming\npm\main\uncss_site.js'
Node modules are at: ' C:\Users\admin\AppData\Roaming\npm\main\node_modules'
Target html and css files are at: ' C:\Users\admin\AppData\Roaming\npm\main\dev' 

If I pass filepath from fs: 
'C:\Users\admin\AppData\Roaming\npm\main\dev\index.html' 
directly into jsdom using jsdom.fromFile, everything works fine. 

If I pass the same filepath into uncss, I get a jsdom error - 
'Error: Tried to fetch URL with invalid scheme c' from jsdom/lib/jsdom/browser/resources/resource-loader.js

The problem occurs after glob.sync() in uncss/src/uncss.js when an isUrl() test on the filepath returns TRUE (see below)
Because of this, files that are passed to the uncss/src/jsdom.js fromSource() function do not use JSDOM.fromFile() and produce the 'invalid scheme' error.

If I don't pass the full fs filepath into uncss I get an uncss error -  
'Error: UnCSS: no HTML files found' from uncss/src/uncss.js

I'm sure I'm missing something obvious, but given the directory structure I'm using, what path can I pass to uncss that can be passed onto jsdom correctly?

Thanks

```
// get files using fs etc
const fs = require('fs');
files = [
  'C:\Users\admin\AppData\Roaming\npm\main\dev\index.html',
  'C:\Users\admin\AppData\Roaming\npm\main\dev\Site-Map.html'
]

// then uncss passes a file to the function getHTML in uncss/src/uncss.js

// - test for URL is FALSE: 
// isURL('C:\Users\admin\AppData\Roaming\npm\main\dev\index.html') == false 
(ie correct for jsdom.fromFile)

files = _.flatten(files.map((file) => {
    if (!isURL(file) && !isHTML(file)) {
        return glob.sync(file);
    }
    return file;
}));

// but after glob.sync() the test for URL is TRUE: 
// isURL('C:/Users/admin/AppData/Roaming/npm/main/dev/index.html') == true
 (ie incorrect for jsdom.fromFile)

```
Passing same filepath directly to jsdom.fromFile() works fine because the test for URL is correctly FALSE:
```
// isURL('C:\Users\admin\AppData\Roaming\npm\main\dev\index.html') == false

const jsdom = require('jsdom').JSDOM;
jsdom.fromFile(('C:/Users/admin/AppData/Roaming/npm/main/dev/index.html',{url:'C:/Users/admin/AppData/Roaming/npm/main/dev',runScripts:'dangerously',resources:'usable'}).then(function(dom){
  var window = dom.window,document = window.document;
  console.log('title is ',document.querySelectorAll('h1')[0].innerHTML);
}).catch (function(e){console.log(e);});

// node:v12.13.1 npm@6.13.1 uncss@0.17.2 is-absolute-url@3.0.3 jsdom@14.1.0
```
I'm using [Bulma](https://bulma.io/) and I'm trying to ignore `.navbar-burger.is-active` because it's a class you set on runtime, in bulma, `is-active` its used a lot in different components.

I'm using this configuration:

```javascript
options = {
    banner: false,
    csspath: "",
    htmlroot: "./src/",
    ignore: [
         "/\\..+\\.is-active\\.+/", 
        ".navbar-burger.is-active", 
        ".navbar-menu.is-active"
     ], //Added at runtime
    jsdom: {
      userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X)"
    },
    report: true,
    stylesheets: ["style.css"],
    timeout: 1000,
    userAgent: "Mozilla/5.0 (iPhone; CPU iPhone OS 10_3 like Mac OS X)"
  };
```

calling to:
```javascript
uncss(files, options, function(error, output) { ... }
```

Here are the elements I want to keep on the CSS output.

```css
.navbar-burger:hover {
    background-color: rgba(0, 0, 0, .05)
}

.navbar-burger.is-active span:nth-child(1) {
    -webkit-transform: translateY(5px) rotate(45deg);
    transform: translateY(5px) rotate(45deg)
}

.navbar-burger.is-active span:nth-child(2) {
    opacity: 0
}

.navbar-burger.is-active span:nth-child(3) {
    -webkit-transform: translateY(-5px) rotate(-45deg);
    transform: translateY(-5px) rotate(-45deg)
}

```

Also, I have tried the ignore selector on the CSS but is not working, ISSUE https://github.com/uncss/uncss/issues/410. It seems it's partially working because for `.navbar-menu.is-active` it's working fine but none for `navbar-burger` don't know why
The deleted lines on the last version shouldn't be deleted. When the timeout removed, the scripts can not be loaded.

Issue #414 might be related to this issue.
```css
/* uncss:html=['html_for_uncss\**\*.html','http://urls.com']; */
```
where `/` replaced `\` in paths

it's equal for settings to one CSS file
```js
uncss({html: ['html_for_uncss/**/*.html','http://urls.com']})
```
When the css file starts with the Byte Order Mark and the first line is
@namespace, the parser fails:

```
|| <css input>:2:1: Unknown word
|| 	1:        /*** uncss> filename: tests/input/with_bom.css ***/
|| 	2:     -> @namespace testbom "http://bom.for_utf8.com";
```

The solution taken to deal with it is to strip the BOM at the beginning of the file.

It doesn't seem to be problematic with @media or with @import
Any reference that includes a query string does not work as uncss, or support modules, can not find the file.  Using

link href="../styles/main.min.css?cb=9766903" rel="stylesheet" media="all"

uncss will look for the file called main.min.css?cb=9766903.

Error:
Error: Could not load script: "file:///E:/websites/__t/prod/scripts/main.min.js?cb=9766903"
    at onErrorWrapped (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\per-document-resource-loader.js:38:19)
    at Object.check (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\resource-queue.js:72:23)
    at request.then.catch.err (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\resource-queue.js:124:14) { [Error: ENOENT: no such file or directory, open 'E:\websites\__t\prod\scripts\main.min.js?cb=9766903']
  errno: -4058,
  code: 'ENOENT',
  syscall: 'open',
  path: 'E:\\websites\\__t\\prod\\scripts\\main.min.js?cb=9766903' }
Error: Could not load script: "file:///E:/websites/__t/prod/scripts/main.min.js?cb=9766903"
    at onErrorWrapped (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\per-document-resource-loader.js:38:19)
    at Object.check (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\resource-queue.js:72:23)
    at request.then.catch.err (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\resource-queue.js:124:14) { Error: request canceled by user
    at Promise.promise.abort (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\resource-loader.js:50:21)
    at RequestManager.close (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\resources\request-manager.js:25:21)
    at Window.close (E:\websites\__t\node_modules\uncss\node_modules\jsdom\lib\jsdom\browser\Window.js:491:29)
    at pages.forEach (E:\websites\__t\node_modules\uncss\src\uncss.js:223:49)
    at Array.forEach (<anonymous>)
    at cleanup (E:\websites\__t\node_modules\uncss\src\uncss.js:223:19) isAbortError: true }

Screenshot of code:
![uncss query string issue 2019-09-06 16_07_47](https://user-images.githubusercontent.com/30782888/64465326-ee310900-d0c0-11e9-8c6b-da81e110ccad.png)

Hello,

I am trying to clean css files from some epubs, and sometimes they have [XPGT](https://wiki.mobileread.com/wiki/XPGT) stylesheets referenced.

They are usually referenced this way:
```html
 <link rel=”stylesheet”
     type=”application/adobe-page-template+xml”
     href=”template.xpgt”/>
```

Because it is not css, uncss crashes when parsing the file.

Would it be possible for uncss to ignore this kind of (proprietary) stylesheets that are not css?
