## Description
</br>
 Brief description of the requested change.

## Checklist
- [ ] I have read the instructions mentioned in [Contribute to Code](/Contributing.md).
- [ ] I have read and understood the criteria described under [submitting changes](/Contributing.md#submitting-changes). 
- [ ] The title of the PR clearly describes the intent of the PR.
- [ ] This PR does not introduce any breaking changes to the code.

## Description

Added to a counter to skip org-policy validation warning second time in a row.

## Points to be discussed
1. The counter var that is being used to track the count of policy check is set as constant. As a result, the policy is checked only once per PS session. We should reset this counter at the end of AzSK cmdlet execution. Where in the module should this be added?

## Checklist
- [ ] I have read the instructions mentioned in [Contribute to Code](/Contributing.md).
- [ ] I have read and understood the criteria described under [submitting changes](/Contributing.md#submitting-changes). 
- [ ] The title of the PR clearly describes the intent of the PR.
- [ ] This PR does not introduce any breaking changes to the code.

## Get-AzSKARMTemplateSecurityStatus, support for linked templates</br>

## Description</br>
We have an API management project following the proposed structure of [Azure API Management DevOps Resource Kit](https://github.com/Azure/azure-api-management-devops-resource-kit), which means we are using linked templates.

When sending in a master template with links, no controls are found in the template and it's skipped in its entirety. I'm guessing that is because it doesn't evaluate or retrieve the linked templates and just checks the master template for controls it can recognize. `Microsoft.Resources/deployments` not being one of those, ergo the file is skipped.

Any plans on supporting linked templates?

## Steps to reproduce
Have two ARM templates, one master which is being deployed and one template that is linked to from the master.

```PowerShell
Get-AzSKARMTemplateSecurityStatus -ARMTemplatePath C:\temp\master.template.json -ParameterFilePath C:\temp\master.parameters.dev.json -Debug
================================================================================
AzSK Version: 4.3.0
================================================================================
Method Name: Get-AzSKARMTemplateSecurityStatus
Input Parameters:
Key               Value
---               -----
ARMTemplatePath   C:\temp\master.template.json
ParameterFilePath C:\temp\master.parameters.dev.json
Debug             True
================================================================================
================================================================================
Starting analysis: [FileName: .\master.template.json]
--------------------------------------------------------------------------------
No controls have been evaluated for file: .\master.template.json
================================================================================
Skipped file(s): 1
.\master.template.json
--------------------------------------------------------------------------------
One or more files were skipped during the scan.
Either the files are invalid as ARM templates or those resource types are currently not supported by this command.
Please verify the files and re-run the command.
For files that should not be included in the scan, you can use the '-ExcludeFiles' parameter.
--------------------------------------------------------------------------------
No controls have been evaluated for ARM Template(s).
--------------------------------------------------------------------------------
** Next steps **
Look at the individual control evaluation status in the CSV file.
        a) If the control has passed, no action is necessary.
        b) If the control has failed, look at the control evaluation detail in the CSV file (LineNumber, ExpectedValue, CurrentValue, etc.) and fix the issue.
        c) If the control status says 'Skipped', it means that you have chosen to skip certain controls using the '-SkipControlsFromFile' parameter.
For further details, refer: https://aka.ms/devopskit/cicd
--------------------------------------------------------------------------------
Status and detailed logs have been exported to: C:\Users\redacted\AppData\Local\Microsoft\AzSKLogs\ARMChecker\20191209_150524
================================================================================
C:\Users\redacted\AppData\Local\Microsoft\AzSKLogs\ARMChecker\20191209_150524
```
## Expected behavior</br> 
All ARM templates are being analyzed.

## Actual behavior</br>
Only the "master" template is analyzed, which is of low value when it only contains `Microsoft.Resources/deployments` resources.
## Title</br>
The version of AzSK in the PSGallery differs from here

## Description</br>
The master branch here does not agree with contents of the azsk.nupkg in PSGallery.

## Steps to reproduce
1. git clone this repository
2. grab a copy of the nupkg in PSGallery at https://www.powershellgallery.com/packages/AzSK/4.2.1
3. unzip the nupkg
4. diff -rq shows differences including AzSK.psm1 and ConfigurationHelper.ps1
   and the get-module version using the github copy says 4.0.0.0 while the version 
   in current PSGallery shows 4.2.1

## Expected behavior</br> 
The PSGallery package should agree with some branch in Github

## Actual behavior</br>
The PSGallery version differs

## Title</br>
Setting UseOnelinePolicyStore to false does not support custom organization policies

## Description</br>
Feature request.
Some enterprises have policies restricting the use of Azure storage accounts (FinTech and data exfiltration concerns are one misuse case).

There is no documented (easy) way to create an organization extension according to the instructions at [Extending AzSK Modules](https://bit.ly/2pToCkO) while disabling UseOnlinePolicyStore.


## Steps to reproduce
1. In AzSKSettings.json, set UseOnlinePolicyStore: false
2. Follow the instructions in  'Extending AzSK Modules
3. Run a test and the *.ext.ps1 files are ignored

## Expected behavior</br> 
A parameter like Get-AzSKOrganizationPolicyStatus -PolicyFolderPath LOCALEXTENSIONS
would allow for local extensions to be made and kept local.

## Actual behavior</br>
*.ext.ps1 files are ignored

As a work-around, one can fork the AzSK DevOpsKit and place the extensions directly in the forked SVT/* directory code. At that point the UseOnelinePolicyStore: false, will work, but this requires forking and altering AzSK.
## Title</br>
Malfunctions on PowershellCore OSX & Linux
## Description</br>
On OSX and Linux AzSK runs the builtin policies, but fails to upload organization policy extensions to the storage account and fails to run them.

Since outside pull requests are not being accepted, applying the following diffs will make things work:
https://github.com/azsk/DevOpsKit/compare/master...gfrascadorio:master

## Steps to reproduce

Issue [685](https://github.com/azsk/DevOpsKit/issues/685)  may also be caused by this problem. If one uses Linux or OSX to follow the instructions for [Extending AzSK Modules](https://bit.ly/31PhRxx) and then call Install-AzSKOrganizationPolicy or Update-AzSKOrganizationPolicy, no *.ext.ps1 files will be uploaded to the storage account.

The issue seems to be the use of Windows specific:
* directory separators 
* path separators
* mode bits
* non-portable construction of paths using + instead of Join-Path

## Expected behavior</br> 
*.ext.ps1 files would be uploaded

## Actual behavior</br>
Files not uploaded


## Description
</br>
 Brief description of the requested change.

## Checklist
- [ ] I have read the instructions mentioned in [Contribute to Code](/Contributing.md).
- [ ] I have read and understood the criteria described under [submitting changes](/Contributing.md#submitting-changes). 
- [ ] The title of the PR clearly describes the intent of the PR.
- [ ] This PR does not introduce any breaking changes to the code.

## Description
</br>
Based on the documentation the retention period must be greater than or equal (and not only equal)

## Checklist
- [x] I have read the instructions mentioned in [Contribute to Code](/Contributing.md).
- [x] I have read and understood the criteria described under [submitting changes](/Contributing.md#submitting-changes). 
- [x] The title of the PR clearly describes the intent of the PR.
- [x] This PR does not introduce any breaking changes to the code.

## Description
</br>
Based on the documentation below :
https://docs.microsoft.com/en-us/azure/templates/microsoft.sql/2017-03-01-preview/servers/securityalertpolicies
EmailAddresses must be an array instead of a string element 

The API 2015-05-01-preview cannot be used because the emailAccountAdmins was a string "enabled" / "disabled" instead of a boolean (as validated in the ARMControlChecker)

## Checklist
- [X] I have read the instructions mentioned in [Contribute to Code](/Contributing.md).
- [X] I have read and understood the criteria described under [submitting changes](/Contributing.md#submitting-changes). 
- [X] The title of the PR clearly describes the intent of the PR.
- [x] This PR does not introduce any breaking changes to the code. 

## Title</br>
Support version '2017-03-01-preview' for Microsoft.Sql/servers/securityAlertPolicies 

## Description</br>
When exporting templates from Azure Portal, the Microsoft.Sql/servers/securityAlertPolicies resource is exported using api version '2017-03-01-preview'. The json for this version is different than the one accepted by AzSK, which is based on api version '2015-05-01-preview'. Examples are that email adresses should be arrays in 2017 version and emailAccountAdmins is a true boolean type.

Any ARM Template  Check fails when using 2017 version.

## Steps to reproduce
Export a SQL Server Database template from Azure Portal and run ARM Template Check using AzSK.

## Expected behavior</br> 
'2017-03-01-preview' api version Microsoft.Sql/servers/securityAlertPolicies resources can be verified with ARM Template Checker.

## Actual behavior</br>
Currently only api version '2015-05-01-preview' will pass ARM Template Check.
