> "Glow" renderer capable of 1000+ frames per second (if the terminal can handle it)

Would be great if `ternimal` would be capable of printing some stats after the run (exactly to check what the terminal is capable of, is it fast enough, for example).
Not super happy with the name of the parameter, but let me know if this works or how to tweak it so it does.

Fixes https://github.com/p-e-w/ternimal/issues/19



The idea is to extend the current gradient syntax of

```
DISTANCE:COLOR[,...]
```

to

```
X1;Y1;X2;Y2[;...]:COLOR[,...]
```

Where the x(n)/y(n) coordinates are locations in a 1x1 square whose coloring is determined using a combination of a [Delaunay mesh](https://en.wikipedia.org/wiki/Delaunay_triangulation) and [Barycentric interpolation](https://en.wikipedia.org/wiki/Barycentric_coordinate_system).

The program then cyclically animates the movement of each point to the next location x(n+1)/y(n+1) every `tick` seconds (new parameter).

This idea would dramatically enhance the texturing and animation capabilities of Ternimal.

This could use the same Fourier system as the thickness function.

Ternimal hides the cursor while drawing a frame to suppress flickering. If Ctrl+C is pressed during this time, Ternimal exits but the cursor remains hidden.

```
./ternimal thickness=15
```

runs fine, but

```
./ternimal thickness=15 padding=0
```

gives

```
Insufficient arena size for path generation: For the configured radius and padding, either width or height must be at least 96.
```

In other words, making *more* space (`padding=0`) somehow results in less space.

I just tried this out on Win7, with unexpected results: ![x](https://i.imgur.com/eYP64CV.png)

Top is PowerShell, bottom is Cmder.

Not totally sure if it's the font, or wrong version of PowerShell.