When adding fragments in which the 'other' sequence has a 3' sticky end at its 5' end, the features in 'other' are shifted in the wrong direction (since the ovhg is positive, not negative).

This pull request fixes this issue in `dseqrecord.__add__` and in `dseqrecord.looped`.

I will try to create an example assembly workflow to demonstrate the problem, and how it is fixed if you would like?

EDIT: It seems I managed to include a typo in my commit message (and -> are) sorry about this!

Dear sir 

Good  day to you

First I need to appreciate you for your pydna module, really  it is very useful module for every body study  molecular  biology but I have fin critical  issue when i run Gel class from pydna.gel on the pycharm editor not give any result (figure of gel electrophoresis) and also the same issue with original python IDLE however when i run it with Wing IDE make a conflict with Tkinter module 

Best regards


Yours sincerely
Mohamed Abdelmoez Ahmed Soliman
Bioinformatics  Researcher

Hi Bjorn,

Having a lot of success with PyDNA so thank you. I was wondering if you would please consider implementing a reverse() function (at least I couldn't find one in the docs); to be clear, I do NOT mean a reverse_complement(). This has come up in an example where I want to switch the direction of a cassette in order to limit cross talk between promoters on the same plasmid. I have tried creating work arounds for this by doing a reverse_complement() and then by switching the watson and crick strands but it doesn't work for some reason. Note I am seeking a way to do this that PRESERVES FEATURES, otherwise it is not valuable. 

Also I was wondering if you knew that the fill_in() function only fills in on 5' producing strands? Maybe this was done on purpose, but I'm not sure why.
![image](https://user-images.githubusercontent.com/52509586/61389107-2f4d2f80-a86d-11e9-8e8a-1bf591b9d6e1.png)

Is there anyway to display the figures you have below the code in the pictures below, or did you just draw this out by hand? Some of my assemblies are being weird/I am trying to learn the package, and it would be useful for troubleshooting and general purpose if the ascii figures were built in attributes for both common_sub_strings and terminal_overlap.

![image](https://user-images.githubusercontent.com/52509586/61089934-a8720000-a3f1-11e9-915d-84774a8dc54a.png)

![image](https://user-images.githubusercontent.com/52509586/61089829-38637a00-a3f1-11e9-9f9d-fabf8ea4668d.png)


I tried to plasmid.seq.upper() but it seems to have broken the class; later on when attempting an assembly that was previously working, I then received the error:

'Seq' object has not attribute 'circular'

![image](https://user-images.githubusercontent.com/52509586/60997059-bf89f280-a30a-11e9-80b7-2f18284765e7.png)

In general, is this the acceptable way to edit the seq? Another case I had was like:

![image](https://user-images.githubusercontent.com/52509586/60997806-8b173600-a30c-11e9-9499-74a49bad88f3.png)

Which seemed to work fine ... unless it is what caused my error.

Thanks for your help Bjorn.

Hi,
I think there is bug in the cut function when the restriction site is on the ori.

When I run the following code:
```
plasmid_path = "./test.gb"
test = pydna.parsers.parse([plasmid_path], ds=True)[0]
test.cut(BsaI)
```
I get:

```
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
<ipython-input-16-aadbfecceed5> in <module>
      9     logger.warning("No features found in : %s. this make selection based on rep_origin impossible." % input_seq)
     10 
---> 11 cut_seq = input_seq.cut(cutter)
     12 
     13 

/usr/local/lib/python3.7/dist-packages/pydna/dseqrecord.py in cut(self, *enzymes)
   1043             enzymes = (enzymes,)
   1044 
-> 1045         frags = self.seq.cut(enzymes)
   1046 
   1047         if not frags:

/usr/local/lib/python3.7/dist-packages/pydna/dseq.py in cut(self, *enzymes)
   1267             swl = len(self.watson)
   1268             frags = frags[1:-1]
-> 1269             newfrags = [frags.pop(0),]
   1270             while sum(len(f.watson) for f in newfrags) < swl:
   1271                 newfrags.append(frags.pop(0))

IndexError: pop from empty list

```


The attached file is a genbank. If I move the origin of the genbank file, there are no problems.


Hi there,

Thank you for making pydna.  I've had fun using it to automate some cloning reactions.

It seems like pydna is something that really should exist in Biopython proper.  Have you talked to those developers to see if they would be interested in including it?

All the best,
-Tim
Jupyter Notebooks and reproducible data science
https://markwoodbridge.com/2017/03/05/jupyter-reproducible-science.html
https://groups.google.com/forum/#!topic/jupyter/6pQIarRmrsc
#27 
add a list of primers to the primer list by adding a function to myprimers.py

1. read primers from string or file
2. read old primer list 
3. number primers from end of list
4. add number to primer name (id, locus) like 333_ScCYC1term_EcoRI_fw for primer 333

