

Hi,

Does msgpack-c use structure? Is any chance that msgpack pack data could cause alignment issues?

I am running msgpack-c on iMX6 Linux platform, I have several messages using different data type uint16_t, uint8_t, etc, when I process those messages, it caused following kernel error, I was not clear what could cause the alignment problems as I don't use any structure in my application.

Nov 20 05:23:18 kernel: Alignment trap: not handling instruction
e8532f00 at [<b6c802b6>]
Nov 20 05:23:18 kernel: Unhandled fault: alignment exception
(0x001) at 0x38626667
Nov 20 05:23:18 kernel: pgd = 34bdb7e7
Nov 20 05:23:18 kernel: [38626667] *pgd=00000000

Thank you.
I'm using cjson C library for json creation and processing . can I use mspack on cjson ?

We have been experiencing Segfaults when running fluent-bit which looks to be ocurring in the msgpack-c code: -

```
Sep 10 14:53:32 ip-10-17-16-247.us-west-2.compute.internal docker[85350]: [engine] caught signal (SIGSEGV)
#0  0x56098b412d0b      in  msgpack_pack_object() at lib/msgpack-3.2.0/src/objectc.c:113
#1  0x56098b15f696      in  splunk_format() at plugins/out_splunk/splunk.c:119
#2  0x56098b15f877      in  cb_splunk_flush() at plugins/out_splunk/splunk.c:176
#3  0x56098b10dcda      in  output_pre_cb_flush() at include/fluent-bit/flb_output.h:316
#4  0x56098b430606      in  co_init() at lib/monkey/deps/flb_libco/amd64.c:117
#5  0x7f13477cf708      in  ???() at ???:0
```

The issue appears to be trying to dereference msgpack_object_kv* which is `nil`

```
    case MSGPACK_OBJECT_MAP:
        {
            int ret = msgpack_pack_map(pk, d.via.map.size);
            if(ret < 0) {
                return ret;
            }
            else {
                msgpack_object_kv* kv = d.via.map.ptr;
                msgpack_object_kv* const kvend = d.via.map.ptr + d.via.map.size;
                for(; kv != kvend; ++kv) {
113 ->              ret = msgpack_pack_object(pk, kv->key);
                    if(ret < 0) { return ret; }
                    ret = msgpack_pack_object(pk, kv->val);
                    if(ret < 0) { return ret; }
                }

                return 0;
            }
        }
```

Rather than segfaulting, if we add a check for nil pointer we can return an error instead?
hi redboltz
     i want use c language to package some data by msgpack-c，when i read sample_c.c this file，i don't understand some api,because i can not find intruduce for this api,just like this picture, could you tell me some information about this api,how to use it and what parameter means? 3ks
![image](https://user-images.githubusercontent.com/39908996/62766709-ade06a00-bac5-11e9-9dc3-e8469e3ce771.png)

Hi,

is there a version of msgpack which only uses stack and no heap? We need it for a embedded medical device where heap allocation is prohibited.

Thanks 
C.W.
Dear developer,

Is there a way to retrieve the "fields" of the unpacked object one by one as this done for packing ?

I know the "type" of the packed object, so after unpacking, i'd like simply to do something like:

```
int err;
int x = msgpack_unpack_int(pk, &err);
```

Currently, I must explore the self describing msg_pack object for type entry and value (much like I parse a JSON file).

Another question: if I send a series of packed objects through the network, is the library able to retrieve the packed objects one by one (is it able to detect packed object boundaries) ?

Thanks
When CMAKE_INSTALL_PREFIX is relative, such as "_install", headers get installed to:
./_build/_install/_install/include

I believe the correct fix is the removing ${CMAKE_INSTALL_PREFIX} since cmake should already be handling that implicitly:
 FOREACH (file ${msgpackc_HEADERS})
     GET_FILENAME_COMPONENT (dir ${file} PATH)
(remove)   INSTALL (FILES ${file} DESTINATION ${CMAKE_INSTALL_PREFIX}/${dir})
(add)    INSTALL (FILES ${file} DESTINATION ${dir})
 ENDFOREACH ()
