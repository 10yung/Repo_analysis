I was using tuple_combinations for iterating over various card combinations and ran into the 4-tuple limitation when trying to iterate over all possible 5-card combinations of a deck of 52 cards.  Any chance you'd add a five-tuple implementation or should I use another method?
Every once in a while I find myself re-implementing a "dedup with count", an iterator that instead of yielding `T` yields `(usize, T)`:

```rust
let data = vec![10, 10, 20, 30, 30, 30, 20];
assert_eq!(
    data.into_iter().dedup_with_count().collect(),
    vec![(2, 10), (1, 20), (3, 30), (1, 20)]
);
```

If you agree that these (`dedup_with_count()`/`dedup_by_with_count()`) are useful methods I can open a PR with the implementation soon.
Pretty self-explanatory. Useful for non-clonable elements or otherwise stateful interspersing.
`intersperse()` could be implemented via `intersperse_with()`, allowing the change to be more minimal. I haven't done it currently, but if you don't see any downsides I'd amend this change to do `self.intersperse_with(|| element)` for `intersperse()` instead.
I'm trying to find something similar to [Scala's Stream.diff](https://www.scala-lang.org/api/current/scala/collection/immutable/Stream.html#diff[B%3E:A](that:scala.collection.Seq[B]):C):
```
Computes the multiset difference between this sequence and another sequence.

that: the sequence of elements to remove

returns: a new sequence which contains all elements of this sequence except some of occurrences of elements that also appear in that. If an element value x appears n times in that, then the first n occurrences of x will not form part of the result, but any following occurrences will.
```

I see there's https://docs.rs/itertools/0.8.1/itertools/fn.diff_with.html, but it doesn't seem to do the same thing? Maybe we call it something else?
I found myself wanting `filter_map_results()` and just implemented `filter_results()` in the same stretch. I hope you find it useful!

I wasn't sure if #236 applies to these new iterators; I just implemented them.
I spent several hours debugging my code written using the `group_by` function. 

I expected from this function the logic of grouping the same objects by a key, how surprised I was that he groups only some nearby elements while the group key has the same value.

In the documentation it is also indicated somehow strange and until the last, I was not sure if this is a bug or feature. I carefully read the documentation 5 times and it turned out to be a feature! Awful incomprehensible feature!

I do not think that this is the behavior that many expect for this method name. I demand to rename this method to something more suitable like `cons_group_by` or `lazy_group_by` not to mislead users.

[Example](https://play.integer32.com/?gist=09d53af6fff65075c756905d45400cf0&version=stable)

[I'm not the only one to think so](https://www.reddit.com/r/rust/comments/6d4no8/group_by_on_a_vect/di0j7tt/)
Resolves #371

`count`, `last` and `nth` of the `MergeJoinBy` iterator are made faster when one of the iterators is completely consumed by directly calling the methods of the underlying only iterator left (there is benefit if the underlying iterator also specialized these methods).

This is in particular useful when you want to count the number of different elements in the union of two sorted known-size iterators (`count`).

Those methods are also specialized on the `PutBack` adaptor for the same performance reasons.
The `nth` specialization on the `MergeJoinBy` iterator depends on the `nth` specialization on the `PutBack` adaptor working.
A few methods of the `MergeJoinBy` iterator could be made faster when one of the iterators is completely consumed by directly calling the methods of the underlying only iterator left : 
 - `count`
 - `last`
 - `nth`
It might be useful to add a chain_with function to the itertools that does the same thing as chain but lazily calling the function that builds the iterator.

This would make chaining with iterators computed in another thread easier.

The workaround described [here](https://stackoverflow.com/a/49456073/3799609) is somewhat limited because `map` is not an `FnOnce` even though the way it is used provides the guarantee it will only be used once.
It seems that the code here doesn't follow the [Rust style guide](https://github.com/rust-dev-tools/fmt-rfcs/blob/master/guide/guide.md). Maybe consider applying rustfmt and add CI step to enforce it?

I think that would make people more comfortable to contribute, as they wouldn't need to think about what code style should they use, and can just rely on the tool to figure out.