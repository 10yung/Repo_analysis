Fixes #9 

Not being a Python expert, I don't know if it's possible to have nice inheritance between tests (all my attempts have caused tests to be run in duplicate), so I've just copied and pasted the test. Let me know if the PR is OK.
If my notebook contains something like %matplotlib notebook in the first cell, we get an ugly failure:
```
File "/opt/conda/lib/python3.6/site-packages/nbparameterise/code.py", line 50, in extract_parameters
        params = list(drv.extract_definitions(first_code_cell(nb).source))
      File "/opt/conda/lib/python3.6/site-packages/nbparameterise/code_drivers/python.py", line 29, in extract_definitions
        cell_ast = ast.parse(cell)
      File "/opt/conda/lib/python3.6/ast.py", line 35, in parse
        return compile(source, filename, mode, PyCF_ONLY_AST)
      File "<unknown>", line 2
        %matplotlib notebook
        ^
    SyntaxError: invalid syntax
```

Maybe we could just remove these lines before sending them to parsing, what do you think?
Bit of a pedantic request, I know!

However, I follow [PEP8: String Quotes](https://www.python.org/dev/peps/pep-0008/#string-quotes) where it suggests to 

> Pick a rule and stick to it.

In using this package I only see single quotes used in the parameters that are overloaded. Is there an option to use double quotes? If it could, that would mean that my styling guide could be honoured.



Also on another note (that is probably outside of what you expect to maintain), if double quotes could be supported, languages like Julia for example could be supported with almost no adjustment (I tested it out by copying and pasting the `python.py` codedriver and renaming it to `julia.py`)

The only reason it fails is because of the single quotes.

```
>>> new_nb = replace_definitions(nb, params)


Starting kernel event loops.
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/app/src/nbparameterise/code.py", line 98, in replace_definitions
    nb, resources = ExecutePreprocessor().preprocess(nb, resources)
  File "/opt/conda/lib/python3.6/site-packages/nbconvert/preprocessors/execute.py", line 262, in preprocess
    nb, resources = super(ExecutePreprocessor, self).preprocess(nb, resources)
  File "/opt/conda/lib/python3.6/site-packages/nbconvert/preprocessors/base.py", line 69, in preprocess
    nb.cells[index], resources = self.preprocess_cell(cell, resources, index)
  File "/opt/conda/lib/python3.6/site-packages/nbconvert/preprocessors/execute.py", line 286, in preprocess_cell
    raise CellExecutionError.from_cell_and_msg(cell, out)
nbconvert.preprocessors.execute.CellExecutionError: An error occurred while executing the following cell:
------------------
param1 = 'dummy1'
param2 = 'dummy2'
param3 = 'dummy3'
param4 = 'dummy4'
------------------

syntax: invalid character literal

LoadError: syntax: invalid character literal
```
More and more users (including me) are using the cross-platform package manager conda to install  our software dependencies.  I would like to install nbparameterise using conda.  Fortunately, it is trivial to write a conda recipe that builds a conda-installable package of nbparameterise based on the nbparameterise github repository--BUT a setup.py file in the nbparameterise project is required.  Here's one that works :)  
Hello!
I added support for lists which was something that I really needed in my fork.

 I also had issues getting it to run with the python2 kernel or invoking examples/batch.py  so I fixed those (by adding documentation or moving the file).

 It occurs to me that perhaps these changes should have been in different commits. Let me know if you want just some of the changes. 