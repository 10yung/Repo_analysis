Updates link in comment, fixing #120.
It looks like the Pivotal blog link in [this comment](https://github.com/eliotsykes/rspec-rails-examples/blob/d6af0d8/spec/tasks/subscription_tasks_spec.rb#L40)

```
# after running once within a process http://pivotallabs.com/how-i-test-rake-tasks/
```

should now be to [https://content.pivotal.io/blog/test-your-rake-tasks](https://content.pivotal.io/blog/test-your-rake-tasks).
Details: https://github.com/DatabaseCleaner/database_cleaner/commit/a8bb2cbbdb105ff58c718492d47fa3c4d5690fae

Ensure database cleaner won't run until after Capybara has finished loading pages to stop false negative failures.

This can manifest itself if a page is still rendering when a Capybara test finishes without an expectation, e.g.:
1. Spec example has final line with an action to load a page, e.g. `click_link "Next"` **without** an expectation to check the action completed successfully.
2. While the page render triggered by step 1 is still in progress, database cleaner truncates tables that the page render is dependent on.
3. RSpec detects exceptions raised during page render and fails the test. These failures are hard to debug as they have no accompanying expectation.

To fix, ensure the database cleaner doesn't start until after Capybara has finished its work:

``` diff
--- a/spec/support/database_cleaner.rb
+++ b/spec/support/database_cleaner.rb
@@ -55,7 +55,7 @@ RSpec.configure do |config|
     DatabaseCleaner.start
   end

-  config.after(:each) do
+  config.append_after(:each) do
     DatabaseCleaner.clean
   end
```

``` diff
--- a/spec/support/time_helpers.rb
+++ b/spec/support/time_helpers.rb
RSpec.configure do |config|
   config.include ActiveSupport::Testing::TimeHelpers
+
+  config.after(:each) do
+    travel_back
+  end
 end
```

``` ruby
# File: spec/support/url_options.rb
RSpec.configure do |config|
  config.around(:each, type: :model) do |example|
    original_default_url_options =  Rails.application.routes.default_url_options
    Rails.application.routes.default_url_options = {host: 'www.example.org', protocol: 'https'}
    example.run
    Rails.application.routes.default_url_options = original_default_url_options
  end
end
```

https://github.com/email-spec/email-spec/issues/173

File: `spec/support/capybara_extensions.rb`

``` ruby
module CapybaraExtensions

  # Selects option from <select> drop down then closes the drop down.
  # Useful when a drop down obscures an element that needs to be clicked.
  def select_then_close(value, options = {})
    select(value, options)
    press_tab_key
  end

  def press_tab_key
    find('body').send_keys :tab
  end
end

RSpec.configure do |config|
  config.include CapybaraExtensions, type: :feature
end
```

~~https://www.deppbot.com/~~ (for now no: requires GitHub API key that would access all repos under account)
Research Gemnasium: https://gemnasium.com

Notes:

``` diff
diff --git a/spec/api/events_api_spec.rb b/spec/api/events_api_spec.rb
index 7f1c1d0..3f4f2ef 100644
--- a/spec/api/events_api_spec.rb
+++ b/spec/api/events_api_spec.rb
@@ -1,15 +1,32 @@
 require 'rails_helper'

 RSpec.describe '/api/events' do
+  
+  context 'OPTIONS#preflight' do
+    it 'responds with CORS headers' do
+      options '/api/events/'
+      
+      expect(response).to have_http_status(:ok)
+      expect(response.headers['Access-Control-Allow-Headers']).to eq 'Content-Type'
+      # More like this expect(response.headers[...]).to eq ...
+      expect(response.body).to eq ''
+    end
+  end
+  
   context 'POST#create' do

     context 'with correct paramaters' do
-      xit 'creates a new event for the registered application' do
+      it 'creates a new event for the registered application' do
           user = create(:user)
           application = create(:application)
           params = { name: "the name of the event" }
+          headers = {
+            'Content-Type' => 'application/json',
+            'Accept' => 'application/json',
+            'Origin' => application.url
+          }

-          post '/api/events/', params.to_json
+          post '/api/events/', params.to_json, headers
           json = JSON.parse(response.body)

           expect(json).to eq("")
diff --git a/spec/controllers/api/events_controller_spec.rb b/spec/controllers/api/events_controller_spec.rb
index 345168b..cfb9d5f 100644
--- a/spec/controllers/api/events_controller_spec.rb
+++ b/spec/controllers/api/events_controller_spec.rb
@@ -3,7 +3,7 @@ require 'rails_helper'
 RSpec.describe API::EventsController, type: :controller do
   describe "OPTIONS#preflight" do
     it "returns status 200" do
-      get :preflight
+      process :preflight, 'OPTIONS'
       expect(response).to have_http_status(200)
       expect(response.headers["Access-Control-Allow-Headers"]).to eq("Content-Type")
     end
diff --git a/spec/support/request_helper.rb b/spec/support/request_helper.rb
new file mode 100644
index 0000000..d63928b
--- /dev/null
+++ b/spec/support/request_helper.rb
@@ -0,0 +1,14 @@
+module RequestHelper
+  # Add support for testing `options` requests in RSpec.
+  # See: https://github.com/rspec/rspec-rails/issues/925
+  def options(*args)
+    reset! unless integration_session
+    integration_session.__send__(:process, :options, *args).tap do
+      copy_session_variables!
+    end
+  end
+end
+
+RSpec.configure do |config|
+  config.include RequestHelper, type: :request
+end
\ No newline at end of file

```

Consier favoring the `it { should validate_*_of(:attr_name) }` style
