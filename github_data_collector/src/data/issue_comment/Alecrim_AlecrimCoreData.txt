Hello, I am trying to migrate our project from version 5.2 to 6.0.1 and I am encountering some problems. Below is current code

```
import AlecrimCoreData
import CoreData
import CoreLocation

open class AbstractCoordinateCD: NSManagedObject {

    @NSManaged open var latitude: CLLocationDegrees
    @NSManaged open var longitude: CLLocationDegrees
}

// MARK: - AbstractCoordinateCD query attributes
extension AbstractCoordinateCD {

    static let latitude = AlecrimCoreData.Attribute<CLLocationDegrees>("latitude")
    static let longitude = AlecrimCoreData.Attribute<CLLocationDegrees>("longitude")
}

// MARK: - AttributeProtocol extensions
extension AlecrimCoreData.AttributeProtocol where Self.ValueType: AbstractCoordinateCD {

    var latitude: AlecrimCoreData.Attribute<CLLocationDegrees> { return AlecrimCoreData.Attribute<CLLocationDegrees>("latitude", self) }
    var longitude: AlecrimCoreData.Attribute<CLLocationDegrees> { return AlecrimCoreData.Attribute<CLLocationDegrees>("longitude", self) }
}

extension AlecrimCoreData.TableProtocol where Self.Element: AbstractCoordinateCD {

    func create(_ coordinate: CLLocationCoordinate2D) -> Self.Element {
        let retValue = create()
        retValue.latitude = coordinate.latitude
        retValue.longitude = coordinate.longitude
        return retValue
    }
}

extension AbstractCoordinateCD {

    var coordinate: CLLocationCoordinate2D {
        return CLLocationCoordinate2D(latitude: latitude, longitude: longitude)
    }
}
```

In version 6.0.1 there is no AlecrimCoreData.Attribute, AlecrimCoreData.AttributeProtocol, AlecrimCoreData.TableProtocol ... maybe I am blind, but I don't find any alternatives in 6.0.1 version.
Can somebody help me please?

I am wanting to include this attribute in a FetchRequest so I can construct a FetchRequestController with it, but since there is no property for it on FetchRequest, nor a constructor that would take an NSFetchRequest to represent the internal state there doesn't seem to be a way to do this using extensions.

Was thinking something like this syntax would work:
```
func include(relationships: String...) -> FetchRequest<Entity>
```

And in a Query:
```
func include(relationships: String...) -> Query<Entity>
```

Am I missing an avenue to do this external to the framework?

I am new to Core data. Now i am trying to load scheme from local database but it shows me error.

This is error in Query method
![screen shot 2561-11-30 at 10 47 10 am](https://user-images.githubusercontent.com/29918870/49267518-8395d180-f48d-11e8-8995-b2e5c45001dd.png)

This is RecentCalls model is auto generated when we created Entity in our model 
![screen shot 2561-11-30 at 10 47 28 am](https://user-images.githubusercontent.com/29918870/49267535-94464780-f48d-11e8-9a5a-36d2ebe38cc0.png)

![screen shot 2561-11-30 at 10 50 53 am](https://user-images.githubusercontent.com/29918870/49267583-d53e5c00-f48d-11e8-990b-4068f4f744f5.png)



let persistentContainer = PersistentContainer()

Thread 1: Fatal error: 'try!' expression unexpectedly raised an error: AlecrimCoreData.PersistentContainerError.invalidManagedObjectModelURL

![cap](https://user-images.githubusercontent.com/2259889/44309041-d1149400-a3f2-11e8-82ce-cb0cb3a54f42.png)
I am migrating from MagicalRecord where I use two persistent stores. And though I see the CustomPersistentContainer, which apparently I can override, I still cannot figure how to add more than one store. And the difficult thing here is that one is store is always there, but the other store could be added later on (not during the initialization). Is there way to override/extend the framework to achieve that? 
I'm trying to filter a table like the code below:

```
let predicate = NSPredicate(format: "validFrom <= %@ && validUntil >= %@", signedAt as NSDate, signedAt as NSDate)
result = context.certificates.filter(using: predicate)
```
But the XCode show the error **Extraneous argument label 'using:' in call** in the second line.

Is there a way to use **BETWEEN** statement with Alecrim?