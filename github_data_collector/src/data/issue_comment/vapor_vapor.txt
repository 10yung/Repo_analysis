<!-- ðŸš€ Thank you for contributing! --->

<!-- Provide a brief description of the issue here. -->
<!-- Pretend you are explaining it to a friend, not yourself! -->

### Steps to reproduce
Running `vapor new APNs --branch=4` and `vapor build`.
<!-- Tell us how to reproduce this issue. -->
<!-- Please provide as much detail as possible (the more code snippets, the better)! -->
<!-- If we cannot recreate it, we will not be able to figure out how to fix it. -->

### Expected behavior
Build Success.
<!-- Tell us what you expect to happen (what should happen once we fix the issue). -->

### Actual behavior
`clang-4.0: error: no such file or directory: '/Users/albertyu/Developer/Vapor/TILApp/.build/x86_64-apple-macosx/debug/index/store'
clang-4.0: error: no such file or directory: '/Users/albertyu/Developer/Vapor/TILApp/.build/x86_64-apple-macosx/debug/index/store'
clang-4.0: error: no such file or directory: '/Users/albertyu/Developer/Vapor/TILApp/.build/x86_64-apple-macosx/debug/index/store'
clang-4.0: error: no such file or directory: '/Users/albertyu/Developer/Vapor/TILApp/.build/x86_64-apple-macosx/debug/index/store'
[0/14] Compiling CNIOOpenSSL helpers.c
[0/14] Compiling CNIOHTTPParser c_nio_http_parser.c
[0/14] Compiling CNIOSHA1 c_nio_sha1.c
[0/14] Compiling CNIOZlib empty.c
[0/14] Compiling CNIODarwin shim.c
[0/14] Compiling CNIOLinux ifaddrs-android.c
[0/14] Compiling CNIOOpenSSL shims.c
[0/14] Compiling CNIOLinux shim.c`
<!-- Tell us what is actually happening (what is broken/not working correctly). -->

### Environment
Vapor Toolbox: 3.1.10
Swift-tools-version: 5.1
<!-- We must know your exact environment or it is very difficult to help. -->
<!-- Hint: use `vapor --version` in the root directory of your Vapor project. -->

* Vapor Framework version: 4.0.0-beta.2
* Vapor Toolbox version: 3.1.10
* OS version: 10.14.5
This PR changes the signature of the `RoutesBuilder.group(_:configure:)` methods to rethrow if the `configure` function throws.

### Rationale

The `RoutesBuilder.register(collection:)` method throws. However, the `configure` function used in the `RoutesBuilder.group(_:configure:)` methods does not throw.

Therefore the following example doesn't currently work:
```swift
let middleware = MyMiddleware()
let controller = MyController()
let routes = Routes()
// error: Invalid conversion from throwing function of type '(_) throws -> ()' to non-throwing function type '(RoutesBuilder) -> ()'
routes.group(middleware) { router in
    try router.register(collection: controller)
}
```

We can use `try!` or `try?` but I think it would be better to just rethrow the error:
```swift
try routes.group(middleware) { router in
    try router.register(collection: controller)
}
```

### Checklist

- [x] Circle CI is passing (code compiles and passes tests).
- [ ] There are no breaking changes to public API.
- [x] New test cases have been added where appropriate.
- [x] All new code has been commented with doc blocks `///`.

### Breaking changes

The change *may* break existing code.

This example **does not break**:
```swift
routes.group(middleware) { router in
    nonThrowingFunction(router)
}
```

But this one **does break**:
```swift
let function: ([Middleware], (RoutesBuilder) -> ()) -> ()
// error: Invalid conversion from throwing function of type '([Middleware], (RoutesBuilder) throws -> ()) throws -> ()' to non-throwing function type '([Middleware], (RoutesBuilder) -> ()) -> ()'
function = routes.group(_:configure:)
```
However it is very unlikely to occur in the wild.
Im not sure where to put this but in Vapor 4, you missed an overload on the RoutesBuilder .get for [PathComponent] you have overloaded all the other methods just not .get
https://github.com/vapor/vapor/blob/adcce86be49463445a5b24c1bc3f0532b21ab845/Sources/Vapor/Content/ContentConfiguration.swift#L33

https://github.com/vapor/vapor/blob/adcce86be49463445a5b24c1bc3f0532b21ab845/Sources/Vapor/Utilities/Thread.swift#L4

Those need to also have an iOS 10 check.  I'm not giving a pull request here because I'm not 100% sure this is how it's supposed to work.  
Applications are expected to defer application shutdown after initialization:

```swift
let app = try Application(.detect())
defer { app.shutdown() }
```

This prevents scenarios where an error is thrown before the `app.shutdown()` defer block is called which results in an "Application did not shutdown" assertion. 

Because of this, `Application.run()` will no longer attempt to call `shutdown()` which would result in a double shutdown. 
There's no method to validate object decoded from request query.

### Steps to reproduce
This is how it looks in Vapor 3:
```swift
let paginationRequest = try req.query.decode(PaginationRequest.self)
try paginationRequest.validate()
```

An attempt for Vapor 4:
```swift
try PaginationRequest.validate(req)
let paginationRequest = try req.query.decode(PaginationRequest.self)
```
It crashes on the the validate line with error `Unprocessable Entity`.

### Expected behavior
There should be a method to validate request query. Maybe something like this:
```swift
Foo.validate(req.query)
```

* Vapor Framework version: 4.0.0-beta.3.1

This PR fixes #2006.
Detailed description can be found in the issue.
This extensions to the Environment struct provide functions to extract file contents like a secret. This can be used with docker secrets or other secret management tools.

As discussed in #2122 the dependency to the Container struct has been removed and this PR is against the master branch, integrating this feature into Vapor 4.

### Checklist

<!-- The items on this checklist must be completed to merge. -->

- [ ] Circle CI is passing (code compiles and passes tests).
- [x] There are no breaking changes to public API.
- [ ] New test cases have been added where appropriate.
- [x] All new code has been commented with doc blocks `///`.

<!-- ðŸš€ Thank you for contributing! --->

<!-- Provide a brief description of the issue here. -->
<!-- Pretend you are explaining it to a friend, not yourself! -->
Sending JSON Model to a server returns unexpected error.

### Steps to reproduce

<!-- Tell us how to reproduce this issue. -->
<!-- Please provide as much detail as possible (the more code snippets, the better)! -->
<!-- If we cannot recreate it, we will not be able to figure out how to fix it. -->

1. Make migrations to prepare the db
2. Create a project ("`TestProject`" for example)
3. Post a question for the project

#### Models:

##### Project:
```swift
import Fluent
import Vapor

final class Project: Model, Content {
    static let schema = "projects"
    
    @ID(key: "id")
    var id: String?

    @Field(key: "title")
    var title: String
    
    @Field(key: "links")
    var links: [String]
    
    @Children(for: \.$project)
    var questions: [Question]

    init() { }

    init(id: String, title: String, links: [String] = []) {
        self.id = id
        self.title = title
        self.links = links
    }

    struct Migration: Fluent.Migration {
        func prepare(on database: Database) -> EventLoopFuture<Void> {
            database.schema(Project.schema)
                .field("id", .string, .identifier(auto: false))
                .field("title", .string, .required)
                .field("links", .array(of: .string), .required)
                .create()
        }

        func revert(on database: Database) -> EventLoopFuture<Void> {
            database.schema(Project.schema).delete()
        }
    }

    static func routes(_ app: Application) throws {
        let group = app.grouped("projects")
        let controller = Controller()
        group.get(use: controller.index)
        group.get(":project", use: controller.find)
        group.post(use: controller.create)
    }
    
    struct Controller {
        func find(req: Request) throws -> EventLoopFuture<Project> {
            let domain = req.parameters.get("project")
            return Project.find(domain, on: req.db).unwrap(or: Abort(.notFound))
        }
        
        func index(req: Request) throws -> EventLoopFuture<[Project]> {
            return Project.query(on: req.db).all()
        }

        func create(req: Request) throws -> EventLoopFuture<Project> {
            let project = try req.content.decode(Project.self)
            return project.save(on: req.db).map { project }
        }
    }
}
```

##### Question
```swift
import Fluent
import Vapor

final class Question: Model, Content {
    static let schema = "questions"
    
    @ID(key: "id")
    var id: Int? {
           didSet {
               $id.exists = true
           }
       }

    @Field(key: "title")
    var title: String
    
    @Field(key: "body")
    var body: String
    
    @Field(key: "answer")
    var answer: String
    
    @Parent(key: "project_id")
    var project: Project

    init() { }

    init(id: Int? = nil, title: String, body: String = "", answer: String = "", projectId: Project.IDValue) {
        self.id = id
        self.title = title
        self.body = body
        self.answer = answer
        self.$project.id = projectId
    }

    struct Migration: Fluent.Migration {
        func prepare(on database: Database) -> EventLoopFuture<Void> {
            database.schema(Question.schema)
                .field("id", .int, .identifier(auto: true))
                .field("title", .string, .required)
                .field("body", .string, .required)
                .field("answer", .string, .required)
                .field("project_id", .string,
                       .foreignKey(field: .custom(schema: Project.schema, field: "id"),
                                   onDelete: .cascade, onUpdate: .cascade))
                .create()
        }

        func revert(on database: Database) -> EventLoopFuture<Void> {
            database.schema(Question.schema).delete()
        }
    }

    static func routes(_ app: Application) throws {
        let group = app.grouped("projects", ":project", "questions")
        let controller = Controller()
        group.get(use: controller.index)
        group.post(use: controller.create)
    }
    
    struct Controller {
        func index(req: Request) throws -> EventLoopFuture<[Question]> {
            try Project.Controller()
                .find(req: req)
                .flatMapThrowing { project in
                    try project.$questions.query(on: req.db)
                }.flatMap { $0.all() }
        }

        func create(req: Request) throws -> EventLoopFuture<Question> {
            let question = try req.content.decode(Question.self)
            return question.save(on: req.db).map { question }
        }
    }
}
```

### Expected behavior

<!-- Tell us what you expect to happen (what should happen once we fix the issue). -->
Question created or at least expected error about unexpected object.

(actually sending
```json
{
  "title": "Test Question",
  "body": "Test Question Body",
  "answer": "Test Answer",
  "project": {
    "id": "CocoaHeadsBelarus"
  }
}
```
creates the question, but nonetheless decoding error for an empty key is unexpected)


### Actual behavior

<!-- Tell us what is actually happening (what is broken/not working correctly). -->
When I'm handling post request 
```json
{
  "title": "Test Question",
  "body": "Test Question Body",
  "answer": "Test Answer",
  "project": "TestProject"
}
```
on this group
```swift
let group = app.grouped("projects", ":project", "questions")
```
with this function
```swift
func create(req: Request) throws -> EventLoopFuture<Question> {
    let question = try req.content.decode(Question.self)
    return question.save(on: req.db).map { question }
}
// Called from routes
routes(_ app: Application) throws { 
    try Project.routes(app)
    try Question.routes(app)
}
```
I'm getting this response:
```json
{"error":true,"reason":"Value of type 'Dictionary<String, Any>' required for key ''."}
```
The error is thrown from here:
```swift
// Dependencies/vapor 4.0.0-beta3.1/Vapor/Content/JsonCoders+Content.swift | line 20
public func decode<D>(_ decodable: D.Type, from body: ByteBuffer, headers: HTTPHeaders) throws -> D
        where D: Decodable
    {
        guard headers.contentType == .json || headers.contentType == .jsonAPI else {
            throw Abort(.unsupportedMediaType)
        }
        let data = body.getData(at: body.readerIndex, length: body.readableBytes) ?? Data()
        return try self.decode(D.self, from: data) // <- Here
    }
```

### Environment

<!-- We must know your exact environment or it is very difficult to help. -->
<!-- Hint: use `vapor --version` in the root directory of your Vapor project. -->

* Vapor Framework version: vapor 4.0.0-beta3.1
* Vapor Toolbox version: vapor-beta
* OS version: macOS Catalina v10.15.1

<!-- ðŸš€ Thank you for contributing! --->

Trying to decode Arrays from a GET query string results in an unexpected fatalError. The behavior that does works is unintuitive and limits how you can name you GET parameters that can repeat multiple times.

<!-- Provide a brief description of the issue here. -->
<!-- Pretend you are explaining it to a friend, not yourself! -->

### Steps to reproduce

Trying to decode an array of strings using the following
```swift
let emailsToSearch = try? request.query.get([String].self, at: "emailsToSearch")
```
results in a `fatalError` in [URLEncodedFormDecoder.swift line 124](https://github.com/vapor/vapor/blob/master/Sources/Vapor/URLEncodedForm/URLEncodedFormDecoder.swift#L124)
```swift
    func unkeyedContainer() throws -> UnkeyedDecodingContainer {
        guard let data = self.data else {
            return UnkeyedContainer(data: [], codingPath: self.codingPath)
        }
        switch data {
        case .array(let arr):
            return UnkeyedContainer(data: arr, codingPath: self.codingPath)
        default: fatalError()
        }
    }
```
when I send `/users?emailsToSearch=my@email.com` or `/users?emailsToSearch=my@email.com&emailsToSearch=another@email.com`

It does work when I send `/users?emailsToSearch[]=my@email.com` or `/users?emailsToSearch[]=my@email.com&emailsToSearch[]=another@email.com` however.

<!-- Tell us how to reproduce this issue. -->
<!-- Please provide as much detail as possible (the more code snippets, the better)! -->
<!-- If we cannot recreate it, we will not be able to figure out how to fix it. -->

### Expected behavior

```swift
let emailsToSearch = try? request.query.get([String].self, at: "emailsToSearch")
```
should decode `/users?emailsToSearch=my@email.com` or `/users?emailsToSearch=my@email.com&emailsToSearch=another@email.com`

and 
```swift
let emailsToSearch = try? request.query.get([String].self, at: "emailsToSearch[]")
```
should decode 
`/users?emailsToSearch[]=my@email.com` or `/users?emailsToSearch[]=my@email.com&emailsToSearch[]=another@email.com`

<!-- Tell us what you expect to happen (what should happen once we fix the issue). -->

### Actual behavior

Trying to decode an array using
```swift
let emailsToSearch = try? request.query.get([String].self, at: "emailsToSearch")
```
requires that GET arguments be named "emailsToSearch[]". This is unintuitive and assumes that array names should end with `[]`

<!-- Tell us what is actually happening (what is broken/not working correctly). -->

### Environment

<!-- We must know your exact environment or it is very difficult to help. -->
<!-- Hint: use `vapor --version` in the root directory of your Vapor project. -->

* Vapor Framework version: vapor 4.0.0-beta.3.1
* Vapor Toolbox version: 3.1.10 (Didn't use this to build the project using Xcode)
* OS version: Mac OS 10.15.2

This allows you to embed a vapor `Application` inside other NIO based projects, and sharing one `EventLoopGroup`.

Also fixes #2128 

### Checklist

<!-- The items on this checklist must be completed to merge. -->

- [x] Circle CI is passing (code compiles and passes tests).
- [x] There are no breaking changes to public API.
- [x] New test cases have been added where appropriate.
- [x] All new code has been commented with doc blocks `///`.
