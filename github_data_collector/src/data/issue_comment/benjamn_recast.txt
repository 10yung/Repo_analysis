Closes #601

## There have been updates to the *babel7* monorepo: 

- The `devDependency` [@babel/core](https://www.npmjs.com/package/@babel/core) was updated from `7.7.7` to `7.8.0`.
- The `devDependency` [@babel/parser](https://www.npmjs.com/package/@babel/parser) was updated from `7.7.7` to `7.8.0`.
- The `devDependency` [@babel/preset-env](https://www.npmjs.com/package/@babel/preset-env) was updated from `7.7.7` to `7.8.0`.

These versions are **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

This monorepo update includes releases of one or more dependencies which all belong to the [babel7 group definition](https://github.com/greenkeeperio/monorepo-definitions).

---

**Publisher:** [nicolo-ribaudo](https://www.npmjs.com/~nicolo-ribaudo)
**License:** MIT

[Find out more about this release]().

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:



## The devDependency [flow-parser](https://github.com/facebook/flow) was updated from `0.114.0` to `0.116.0`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [flowtype](https://www.npmjs.com/~flowtype)
**License:** MIT

[Find out more about this release](https://github.com/facebook/flow).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:



## The devDependency [@types/node](https://github.com/DefinitelyTyped/DefinitelyTyped) was updated from `13.1.1` to `13.1.6`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [types](https://www.npmjs.com/~types)
**License:** MIT

[Find out more about this release](https://github.com/DefinitelyTyped/DefinitelyTyped).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


recast esprima supports jsx

I'm trying to detect assignments such as

```
CSL.XmlJSON.prototype.children = function() { ... }
```

how can I reconstruct the `CSL.XmlJSON.prototype.children` left hand side when i'm in `visitAssignment`?
i am trying to edit ast, then `print` it into js file，but， there is something confuse me。
after  `insertAfter` something, there is a empty line,that i do not want this。
```
 let hasImport = false;
  traverse(parsedCode, {
    ImportDeclaration(element) {
      if (
        element.getSibling(element.key + 1).node.type !== 'ImportDeclaration'
        && element.node.type === 'ImportDeclaration'
        && !hasImport
      ) {
        element.insertAfter([
          t.importDeclaration([
            t.ImportDefaultSpecifier(t.identifier(moduleName)),
          ],
            t.stringLiteral(modulePath)),
        ]);
        hasImport = true;
      }
    },
    JSXElement(element) {
      const { node: { openingElement } } = element;
      if (openingElement.name.name === 'Redirect') {
        element.insertAfter(
          [t.jSXText('\n'),
          t.jSXElement(
            t.jSXOpeningElement(
              t.jSXIdentifier('Route'),
              [
                t.jSXAttribute(t.jSXIdentifier('path'), t.stringLiteral(routePath)),
                t.jSXAttribute(t.jSXIdentifier('component'), t.jSXExpressionContainer(t.jSXIdentifier(moduleName))),
              ],
              true,
            ),
            null,
            [],
            true,
          )],
        );
      }
    },
  });
```
![image](https://user-images.githubusercontent.com/22486446/68541715-1816ec80-03de-11ea-9bc3-689356498078.png)
Thanks! for anyone who can help
@benjamn 

## The devDependency [glob](https://github.com/isaacs/node-glob) was updated from `7.1.5` to `7.1.6`.
This version is **not covered** by your **current version range**.

If you don’t accept this pull request, your project will work just like it did before. However, you might be missing out on a bunch of new features, fixes and/or performance improvements from the dependency update.

---

**Publisher:** [isaacs](https://www.npmjs.com/~isaacs)
**License:** ISC

[Find out more about this release](https://github.com/isaacs/node-glob).

---

<details>
  <summary>FAQ and help</summary>

  There is a collection of [frequently asked questions](https://greenkeeper.io/faq.html). If those don’t help, you can always [ask the humans behind Greenkeeper](https://github.com/greenkeeperio/greenkeeper/issues/new).
</details>

---


Your [Greenkeeper](https://greenkeeper.io) bot :palm_tree:


Would it be possible to use `^` instead of specific versions and`~` so it's less likely that multiple versions of dependencies needing to be installed?
I'm trying to support native ES modules in node 12 through the `--experimental-modules` flag, coming from the [`esm`](https://github.com/standard-things/esm) package.

But with recast, I had a strange issue.

When importing it with the esm package, I have to import it as `import {* as recast} from 'recast'`. So recast makes itself available as separate, non-default exports, that can be grouped using the `*`-syntax.

When importing recast with the node flag, I have to import it as `import recast from 'recast'`. So recast seems to export a default, bundling all functions.

The only way around it (without patching recast) is to check after the import whether it has a default export or not, and then use the correct one.
```js
import * as _recast from 'recast'
const recast = ('default' in _recast) ? _recast.default : _recast
```

When checking the recast code, I saw the following line in the generated `main.js`: 
```js
Object.defineProperty(exports, "__esModule", { value: true });
```
I have no idea what it does, but apparently it's something from typescript that tries to enable ES modules, and thus confuses the `esm` package or node. Commenting out this line out also fixed my issue. 

I have no idea if it should be considered an issue with the recast code, with TypeScript, with the esm package or with node module handling. But it's definitely an annoying difference.