Script for exporting ALL existing AWS resources to Terraform
It generated aws_iam_policy_attachment. Is this a bug?
`dbpg` command is able to get `aws_db_parameter_group` resources, it would be good to be able to get options defined at the cluster level, in other words `aws_rds_cluster_parameter_group` resources.

thanks for the great work.
Here's the error I get when I try to merge into an existing terraform.tfstate
terraforming cwa --tfstate --merge=terraform.tfstate --profile xxxxxxx
/var/lib/gems/2.3.0/gems/terraforming-0.18.0/lib/terraforming/cli.rb:269:in `tfstate': undefined method `[]' for nil:NilClass (NoMethodError)
        from /var/lib/gems/2.3.0/gems/terraforming-0.18.0/lib/terraforming/cli.rb:250:in `execute'
        from /var/lib/gems/2.3.0/gems/terraforming-0.18.0/lib/terraforming/cli.rb:25:in `cwa'
        from /var/lib/gems/2.3.0/gems/thor-1.0.1/lib/thor/command.rb:27:in `run'
        from /var/lib/gems/2.3.0/gems/thor-1.0.1/lib/thor/invocation.rb:127:in `invoke_command'
        from /var/lib/gems/2.3.0/gems/thor-1.0.1/lib/thor.rb:392:in `dispatch'
        from /var/lib/gems/2.3.0/gems/thor-1.0.1/lib/thor/base.rb:485:in `start'
        from /var/lib/gems/2.3.0/gems/terraforming-0.18.0/bin/terraforming:5:in `<top (required)>'
        from /usr/local/bin/terraforming:23:in `load'
        from /usr/local/bin/terraforming:23:in `<main>'
Hello,

It would be nice to have the option "iamugm" because, in Terraform, this option allow import and the similar one that Terraforming uses "iamgp" doesn't.

Upstream suggest the use of aws_iam_user_group_membership instead of aws_iam_group_membership due conficts.

https://www.terraform.io/docs/providers/aws/r/iam_group_membership.html

Thanks,
# Why

- There's `iam_policy_attachment` but it's exclusive and there's a risk to accidentally revoke an attachment that is managed outside of this resource. For more details, please refer to the **warning** on the official documentation. https://www.terraform.io/docs/providers/aws/r/iam_policy_attachment.html

# What 
- Use `iam_role_policy_attachment`, `iam_group_policy_attachment` or `iam_user_policy_attachment` as the documentation suggests.
- Only `iam_role_policy_attachment` is added in this PR

# Check

- Added resource: `iam_role_policy_attachment`
- [x] Class name: `IAMRolePolicyAttachment`
- [x] File name: `iam_role_policy_attachment.rb`
- [x] Command name: `iamrpa`
- [x] Executed `terraform plan` for my own resources and confirmed there's no changes

    ```
    terraform plan

    ...

    ------------------------------------------------------------------------

    No changes. Infrastructure is up-to-date.

    This means that Terraform did not detect any differences between your
    configuration and real physical resources that exist. As a result, no
    actions need to be performed.
    ```

# Future work

Add `iam_user_policy_attachment` and `iam_group_policy_attachment`

When doing the export to ec2 `terraforming ec2` the tags appear in the following format:
```
    tags {
        "Team" = "teamx"
        "Name" = "super-instance-new"
        "Purpose" = "production"
```
When trying to plan that, terraform (latest) complain about the format and have to manually correct to

```
    tags = {
        Team = "teamx"
        Name = "super-instance-new"
        Purpose = "production"
```
```
$ terraforming r53r --tfstate
/usr/local/bin/terraforming: /usr/local/Cellar/terraforming/0.18.0/libexec/bin/terraforming: /System/Library/Frameworks/Ruby.framework/Versions/2.3/usr/bin/ruby: bad interpreter: No such file or directory
/usr/local/bin/terraforming: line 2: /usr/local/Cellar/terraforming/0.18.0/libexec/bin/terraforming: Undefined error: 0
```

ProductName:	Mac OS X
ProductVersion:	10.15.1
BuildVersion:	19B68f

$ brew --version
Homebrew 2.1.14
Homebrew/homebrew-core (git revision 3592; last commit 2019-10-15)
Homebrew/homebrew-cask (git revision 6746e7; last commit 2019-10-15)
Yesterday I tried to use terraforming with to get ec2 instances and there was some uncompatibility with new version of terraform. In fact tags aren't declared as resource, but as a map so it changes to "tags = {" instead of "tags {" and keys in this shouldn't be specified as a String. After rebuilding it works correctly