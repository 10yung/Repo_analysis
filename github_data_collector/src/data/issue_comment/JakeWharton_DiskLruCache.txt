this is needed when we notice the lru content is stale and we don't want to move it forward in the linked hash map
``File#listFiles()`` will return ``null`` if the directory has been deleted. This 
scenario isn’t totally far fetched because it’s fairly common for 
Android developers to place their disk caches in the Android application 
cache directory. The cache directory can be cleared at any time by the 
system, including while the app is open, which in turn can cause 
unexpected IOExceptions when ``delete()`` is called.

See https://github.com/bumptech/glide/issues/2465 for additional 
context.
https://github.com/JakeWharton/DiskLruCache/blob/3e016356cfc7e5f9644a7a732fe0223e9742e024/src/main/java/com/jakewharton/disklrucache/DiskLruCache.java#L95

I came across an exception where my key length exceeded 64 characters, so I was browsing through the repo to figure out a reason for this cap on key length. It seems after the key length was increased, the newer jar never got deployed to maven/bintray.
It would be great if we can have a way to know the count of the entities and even better if we can have an iterator of the snapshots like the one in the OkHttp implementation.
Will it possible to have a new release? I am particularly interested in this commit https://github.com/JakeWharton/DiskLruCache/pull/65
which increases the cache key length to 120.
what can cause cache is closed?
I am using this cache to store many many small files. I set a max of 256MB but the cache grows up to more than 450MB. That's because each small file takes at least 4kb in disk. Since this is a disk cache I would assume that setting a max would take block size in consideration.

This deletes all files stored on disk and invalidates any uncommitted editors.

Hello guys,

I use DiskLruCache in a multi-thread environment. I get an infinite loop in the trimToSize method: 

while (size > maxSize) {
      Map.Entry<String, Entry> toEvict = lruEntries.entrySet().iterator().next();
      remove(toEvict.getKey());
}

The remove call fails to remove the entry, as an other thread is editing the toEvict entry. Shouldn't we check if the remove worked, and for example silently return if it did not ?

In FAT filesystem, which is the default filesystem for external SD Card, we can only store around 15 ~ 20k files in a directory. In most cases, it shouldn't be a problem. But when I need to cache a lot of small images with DiskLruCache, it brings this issue to me.

Hence, I would like to know if it's possible to create the sub-directory within DiskLruCache's cahce directory so we can solve this issue for good.

FAT filesystem limit information: http://stackoverflow.com/questions/2651907/is-there-a-limit-for-the-number-of-files-in-a-directory-on-an-sd-card
