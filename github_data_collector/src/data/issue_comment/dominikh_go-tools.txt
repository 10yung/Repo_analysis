<!--
Please make sure to include the following information in your issue report:

- The output of 'staticcheck -version'
- The output of 'staticcheck -debug.version' (it is fine if this command fails)
- The output of 'go version'
- The output of 'go env'
- Exactly which command you ran
- Output of the command and what's wrong with the output
- Where we can read the code you're running staticcheck on
  (GitHub repo, link to playground, code embedded in the issue, ...)
-->

Identifiers claimed unused but explicitly set as used should be treated as if all the things they use are actually used. Right now if you have a program where a top-level entity is falsely flagged unused, a great many things will end up unused, causing //lint:ignore droppings everywhere.

This can be worked around with a `var _ = bar` but that's not as self-documenting as a //lint:ignore U1000 on bar would be.

This came up with https://github.com/bazil/fuse/blob/1b878a0067e6ef10466858e65cb252c52c0be00d/fs/fstestutil/spawntest/example_test.go#L42-L48 that tries to use godoc examples to show how to write unit tests using the helper.

```console
$ ls
foo.go  go.mod
$ cat go.mod
module example.com/m

go 1.13
$ cat foo.go
package m

import "fmt"

func foo() int { return 42 }

var x = foo()

//lint:ignore U1000 this has a real reason
func bar() {
	fmt.Println(x)
}
$ staticcheck
foo.go:7:5: var x is unused (U1000)
[EXIT:1] $ staticcheck  -version
staticcheck 2019.2.3
$ staticcheck  -debug.version
staticcheck 2019.2.3

Compiled with Go version: go1.13.5
Main module:
	honnef.co/go/tools@v0.0.1-2019.2.3 (sum: h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=)
Dependencies:
	github.com/BurntSushi/toml@v0.3.1 (sum: h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=)
	golang.org/x/tools@v0.0.0-20191029041327-9cc4af7d6b2c (sum: h1:IGkKhmfzcztjm6gYkykvu/NiS8kaqbCWAEWWAyf8J5U=)
$ go version
go version go1.13.6 linux/amd64
$ go env
GO111MODULE="on"
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/tv/.cache/go-build"
GOENV="/home/tv/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GONOPROXY="mntn.llc/go,*.mntn.llc,eagain.net/2019"
GONOSUMDB="mntn.llc/go,*.mntn.llc,eagain.net/2019"
GOOS="linux"
GOPATH="/home/tv/go"
GOPRIVATE="mntn.llc/go,*.mntn.llc,eagain.net/2019"
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/home/tv/sdk/go1.13.6"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/home/tv/sdk/go1.13.6/pkg/tool/linux_amd64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/home/tv/z/go.mod"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/home/tv/tmp/go-build431961618=/tmp/go-build -gno-record-gcc-switches"
```

Following up from a Slack conversation which itself was a followup from:

https://groups.google.com/forum/#!topic/golang-nuts/Q7KVGTFt3nU

The example cited is:

```go
package main

import (
	"fmt"
)

func modify(i *int) error {
	*i = 1
	return nil
}

func f() (int, error) {
	i := 0
	return i, modify(&i)
}

func main() {
	i, _ := f()
	fmt.Printf("i == %d\n", i)
}
```

On the subject of order of evaluation, the [Go spec](https://golang.org/ref/spec#Order_of_evaluation) says:

> ... when evaluating the operands of an expression, assignment, or return statement, all function calls, method calls, and communication operations are evaluated in lexical left-to-right order.

In this example the operands of the return statement are `i` and `modify(&i)`. The comma after "return statement" in the above quote is then important: because the only "function calls, method calls, and communication operations" in that list of operands are (is) `modify(&i)`.

Hence when `i` (as in the first operand) is evaluated is not specified. And therefore it's dangerous to rely on it being one value or another.

Hence Ian's suggestion:

> Personally I think one good approach would be a vet check that complains about statements that both read and write a variable in an unspecified order.  But it's fairly hard to catch all possible cases of this.

This issue is therefore to capture that suggestion.
I have a code repo that includes some CGO code. Because of a quirk in how we build within docker containers, the go cache directory is inside the git repo. Staticcheck appears to enter the go build cache and analyze the pre-processed go code in there as well - which would be fine, except for one file whose cached, preprocessed version generates an error:

The error:
`.cache/alpine-gobe/go-build/32/32a39fbab36fd1401a89d7b34311dbbac9d71940b237c56de6ae7b584dc7f729-d:3:1: package comment should be of the form "Package akasim ..." (ST1000)`

The top 11 lines of the offending file:
```
// Code generated by cmd/cgo; DO NOT EDIT.

//line /go/code/pkg/akasim/client.go:1:1
// Package akasim wraps client-side AKA functions to simulate the aka hardware
package akasim; import _cgo_unsafe "unsafe"

/*
#cgo CFLAGS: -I ${SRCDIR}/cgo/include -DOPENSSL
#cgo LDFLAGS: -L ${SRCDIR}/cgo/lib -laka -lcrypto
*/
```

the top of the __original__ source file (before cgo processing) looks like:
```
// Package akasim wraps client-side AKA functions to simulate the aka hardware
package akasim

/*
#cgo CFLAGS: -I ${SRCDIR}/cgo/include -DOPENSSL
#cgo LDFLAGS: -L ${SRCDIR}/cgo/lib -laka -lcrypto
*/
```

It appears the ST1000 is being triggered because the package comment returned by f.Doc.Text() (called in `stylecheck/lint.go:CheckPackageComment` line 51 or so, begins with `line /go/code...` instead of `Package akasim ...`

This is, admittedly, a quirky build setup, and I was able to work around it by moving the package comment to another file in the package that does not contain any cgo, but I thought you might find it interesting, since other false positives might get triggered the same way. If this configuration is one you decide you don't care to worry about, I totally understand. : )

Obviously, one option would be to skip any processing of files in the build cache. 

Another would be to try to detect and handle this specific problem. Since you have no control over the cgo processing, the only thing you could really do here is put in a heuristic to skip comments that match `^//line go:[0-9]+.[0-9]+$` or somesuch (depending on how finicky you want your regex) 

- The output of 'staticcheck -version'

`staticcheck 2019.2.3`

- The output of 'staticcheck -debug.version' 

```
staticcheck 2019.2.3

Compiled with Go version: go1.13.6
Main module:
        honnef.co/go/tools@v0.0.1-2019.2.3 (sum: h1:3JgtbtFHMiCmsznwGVTUWbgGov+pVqnlf1dEJTNAXeM=)
Dependencies:
        github.com/BurntSushi/toml@v0.3.1 (sum: h1:WXkYYl6Yr3qBf1K79EBnL4mak0OimBfB0XUf9Vl28OQ=)
        golang.org/x/tools@v0.0.0-20200116181651-872a348c3885 (sum: h1:ord1pqXhKRYcujhzmNg23POL8yEINk3Mj3fqWS/SNG4=)
```

- The output of 'go version'

`go version go1.13.6 linux/amd64`

- The output of 'go env'

```
GO111MODULE=""
GOARCH="amd64"
GOBIN=""
GOCACHE="/go/code/.cache/alpine-gobe/go-build"
GOENV="/.config/go/env"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GONOPROXY=""
GONOSUMDB=""
GOOS="linux"
GOPATH="/go"
GOPRIVATE=""
GOPROXY="https://proxy.golang.org,direct"
GOROOT="/usr/local/go"
GOSUMDB="sum.golang.org"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
AR="ar"
CC="gcc"
CXX="g++"
CGO_ENABLED="1"
GOMOD="/go/code/go.mod"
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build905760856=/tmp/go-build -gno-record-gcc-switches"
```

- Exactly which command you ran

`staticcheck ./...` (from `/go/code`)

- Output of the command and what's wrong with the output

`see above`

- Where we can read the code you're running staticcheck on
  (GitHub repo, link to playground, code embedded in the issue, ...)

`see above`


While looking through stylecheck/lint.go to try to debug a false positive, I came across this: https://github.com/dominikh/go-tools/blob/master/stylecheck/lint.go#L53

As far as I can tell, that line just returns a string with no interesting side effects. So why does it get called outside the if statement?

(in case the line numbers change, I'm looking at this)

```
    if !strings.HasPrefix(strings.TrimSpace(f.Doc.Text()), prefix) {
        report.Report(pass, f.Doc, fmt.Sprintf(`package comment should be of the form "%s..."`, prefix))
    }
    f.Doc.Text()  // <<----- THIS LINE
```
Our analysis runner doesn't load packages from source if it doesn't have to, e.g. because they haven't changed. In those cases, it uses export data and cached problems/facts. However, this breaks _unused_ in whole-program mode, because changing one package may affect the list of unused identifiers in another package.

1. have a package A define an exported identifier, have package B use the identifier
2. run `staticcheck -unused.whole-program` on A and B
3. modify B to remove the use of A's identifier
4. rerun `staticcheck -unused.whole-program` on A and B
5. observe that we do not flag the identifier in A.

A similar problem arises where we cache A's identifier as being unused, then start using it in another package. We will not recheck package A.

Unfortunately, this problem even exists when not running in whole-program mode, because of test variants.

1. define an unexported identifier in foo.go
2. run `staticcheck`
3. add a foo_test.go and use the previously defined identifier
4. rerun `staticcheck`
5. observe that we still flag the identifier as unused

Both of these problems are caused by the fact that we cache the found problems per package. It seems that in whole-program mode, we must re-analyse all reverse dependencies. In normal mode, it should be enough to re-analyse a package when its tests change.
I had the following code:

```go
	ignore := flag.String("ignore", "", "Comma separated list of things to *avoid* changing.")
        ignoreMap := make(map[string]bool)
	ignoreSplit := strings.Split(*ignore, ",")
        // ...
        flag.Parse()
```

The problem is that *ignore is not set to a value until flag.Parse runs. It might be good to detect a read of a flag that occurs before flag.Parse is called.
<p>
Another one found during a refactoring:
</p>

``` go
// Parameter n used to be int.
func f(n time.Duration) {
	// Conversion 2, the old one, must be removed.
	var d = n * time.Millisecond
	fmt.Println(d)
	// Output:
	//   8h20m0s
}

func main() {
	var n = 30
	// Conversion 1, the new one.
	f(time.Duration(n) * time.Millisecond)
}
```

<p>
When a parameter changes type during a refactoring, and the conversion
is now supposed to be higher up-stack, the previous conversion can
sometimes still be in place, adding an erroneous multiplication.  In
this case, the duration was supposed to be 30&#x202F;ms, but instead was
multiplied to be over eight hours long.
</p>

All the other categories have one-line descriptions on https://staticcheck.io/docs/checks, ST does not.

Currently it's quite common to see code with `Context`:

```
select {
case <-ctx.Done():
	return ctx.Err()
default:
}
```

or where `x` is some struct containing a `Context`.

```
select {
case <-x.ctx.Done():
	return x.ctx.Err()
default:
}
```

However, it would be shorter and easier to understand:

```
if err := ctx.Err(); err != nil {
	return err
}
```