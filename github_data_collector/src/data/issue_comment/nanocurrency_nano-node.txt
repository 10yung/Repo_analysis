Silence init order warnings (and a small clang formatting fix)
WIP
Installing and running Nano beta V21DB2 gave me this error:

`The code execution cannot proceed because VCRUNTIME140_1.dll was not found. Reinstalling the program may fix this problem.`

Re-installing the Nano client did not resolve the issue, and neither did running the included vc_redist.x64. However, downloading the latest redistributable [from here](https://support.microsoft.com/en-us/help/2977003/the-latest-supported-visual-c-downloads) resolved the issue.

Windows 10 Home 10.018363 Build 18363

This only warns on startup so it will not recognize representatives in a fresh node, but otherwise, it does the following:

If voting is enabled:
- log:
  - how many voting accounts are detected
  - warn about system resources if more than one voting account
- stdout
  - display a warning if more than one voting account

With #2432 the cache size is limited automatically if more accounts are voting, which motivated this PR.

**Examples**
1 representative:
- log: `Voting is enabled, more system resources will be used. 1 representative(s) are configured`

2 representatives:
- log: `Voting is enabled, more system resources will be used. 2 representative(s) are configured. Voting with more than one representative can limit performance`
- stdout: `Voting with more than one representative (2). This can limit performance`
This PR proposes "IPC 2.0", on which RPC 2.0 and other things can be built (https://forum.nano.org/t/rpc-2-0-refactor/110)

More details to follow in a separate document, an overview for now:

Communication:
  - RPC 1.0 works as before, RPC 2.0 is on a new endpoint, /api/v2
  - IPC client and server supports full-duplex and can thus be used for subscriptions/callbacks, as well as request/response style APIs.
    A client can use both models through multiple connections.
  - A subscription system is in place (this should cover our callback need). In the future, "WebSockets 2.0" can be implemented in terms of this system.
  - Support for a new binary format based on Flatbuffers, a very efficient serialization format- and library.
  - Proposes a message format which can be used in both RPCs and messages oriented architectures (such as mqtt and websockets)
  - An HTTP gateway which automatically translates between Flatbuffers and JSON. This expects and delivers proper JSON instead of the ptree variant.
  - While RPC 2.0 is out of scope for this PR. a few tracer bullet RPCs and callbacks to verify the design have been added (such as AccountWeight and TopicConfirmation)

Security (enable_control replacement):
  - Rationale for this change is that the enable_control setting is too course grained, and that we'd like a common access control mechanism for both IPC and RPC.
  - Authentication through credentials. API keys are supported now, but the structure should be flexible enough to support stuff like JWT in the future.
  - Key concepts are Users, Roles and Permissions, where the code checks permissions. This is similar to Apache Shiro.
  - There is a default user to which we'll assign permissions we consider safe.
  - Roles and users (and default permission overrides) can be declared in `config-access.toml`
  - The access config file can be reloaded at runtime using a NOHUP signal

Services (using the IPC API):
  - We want to move more things out-of-process, but this gets unwieldy if done manually.
  - This is step one: A set of messages for IPC clients to register and stop/restart services.
    The next step (for a different PR) is to move the process startup from the daemon into a service manager

Internals:
  - A lock monitor is added to simplify threaded member access with finer granularity; this should be useful other places. Long-term it can be replaced by `libguarded` or similar.
  - For RPC 2.0, most of the meat will be in action_handler.* and ipc_broker.*

For RPC 2.0, we might consider writing a Flatbuffers transpiler for OpenAPI/Swagger.

my nono node version is v19，now it out of sync blocks
when i view node log, i saw ERROR: Database size grew above 20GB (size = 21486669824)，
Has anyone else encountered this problem？
Move processing effort on to rep_crawler and off of the vote processor.
- The response function has been converted to a lightweight function that simply queues votes to be checked on the next craw interval.
- Logic around updating reps has been moved out of the callback lambda and into the rep processor itself.
- The rep processor no longer accepts arbitrary values and directly computes weight from a given vote so tests have been updated accordingly.
<!--

---------------------------------------------------
HAVE A QUESTION? PLEASE JOIN OUR DISCORD SERVER
---------------------------------------------------

Only use GitHub issues for reporting problems and submitting proposals. 

Questions should  be asked on our Discord server, https://chat.nano.org,
which has channels for a wide range of topics, such as development and 
support.

---------------------------------------------------
BUG BOUNTY REPORT INFORMATION
---------------------------------------------------

In the interest of further improving the security of the network, we have launched the Nano Bug Bounty Program.

WARNING! Don't disclose any information for the Nano bug.

Submit any suspected bugs for bounty consideration to bugs@nano.org.

---------------------------------------------------
NORMAL BUG REPORT INFORMATION
---------------------------------------------------

If you are reporting a new issue, make sure that we do not have any duplicates
already open. You can ensure this by searching the issue list for this
repository. If there is a duplicate, please close your issue and add a comment
to the existing issue instead.

If you suspect your issue is a bug, please edit your issue description to
include the BUG REPORT INFORMATION shown below. If you fail to provide this
information within 7 days, we cannot debug your issue and will close it. We
will, however, reopen it if you later provide the information.

-->

**Description of bug:**
Node crashed and generated a crash dump file.  I restarted the node since it's my live node but have the crash dump file if it's helpful.  Using WinDbg it shows the following.

This dump file has an exception of interest stored in it.
The stored exception information can be accessed via .ecxr.
(3718.4788): Security check failure or stack buffer overrun - code c0000409 (first/second chance not available)
Subcode: 0x7 FAST_FAIL_FATAL_APP_EXIT 
For analysis of this file, run !analyze -v
ucrtbase!abort+0x4e:
00007fff`e1b0db8e cd29            int     29h

<!--
Does this issue reproduce with the latest release? if you don't use the latest version then please try our latest version.

Briefly describe the problem you are having in a few paragraphs. 
-->


**Environment**:

- Windows 10
- V20.0 with the following commit included https://github.com/nanocurrency/nano-node/commit/809deaa38b12adf2a0536217ae3e3d0526d661b5
- Release build, built locally with Boost 1.70.0 and Visual Studio 2019

<!--
- OS information  
- (Linux) Kernel (e.g. `uname -a`):
- Node version
- (docker node) docker version 
-->

**logs**

Not much of interest in the logs.  The last few lines have the following.

[2020-Jan-10 11:38:32.442404]: 0x1d8fc0e2730 {"action":"account_weight","account":"nano_34prihdxwz3u4ps8qjnn14p7ujyewkoxkwyxm3u665it8rg5rdqw84qrypzk"}
[2020-Jan-10 11:38:32.442404]: RPC request 0x1d8fc0e2730 completed in: 255 microseconds
[2020-Jan-10 11:38:32.443404]: 0x1d8fc0e28d0 {"action":"uptime"}
[2020-Jan-10 11:38:32.443404]: RPC request 0x1d8fc0e28d0 completed in: 217 microseconds
[2020-Jan-10 11:38:32.445403]: RPC request 0x1d8f8a80a20 completed in: 12137 microseconds
[2020-Jan-10 11:38:32.453404]: 0x1d8f840e650 {"action":"confirmation_history"}

<!--

Can you please provide the Nano logs for further analysis.

How to find Nano logs:
    
https://github.com/nanocurrency/nano-node/wiki/Log-files

-->

With this change, the node can distinguish between:
- Work validation before ledger processing (i.e., on node entry - thus the name `work_validation_entry` - but looking for suggestions on the name)
- Work validation during ledger processing

Full work validation can only be done during or after ledger processing if it depends on the account version. This distinction allows setting both higher or lower work difficulties in the future, conditioned on the block version and block type.

During ledger processing, the account version is now checked and work is validated against that version/threshold. Two block visitors are added: one to find the work version of a block, and another to find out the work version of a block's successor. A transaction is required by the visitor even though it is not used currently, setting up for future changes.

The third commit adds non-breaking changes to RPCs to support additional work versions in the future (read commit description).

Design choices:
- Basic work validation was kept in nano_lib but the API explicitly changed, with the default work version getting renamed to work_validate_entry
- Work generation still has an implicit default work version (to avoid touching work generation as much as possible)

Further changes are required if it will ever be possible to calculate a multiplier from different base difficulties (e.g., different algorithms).