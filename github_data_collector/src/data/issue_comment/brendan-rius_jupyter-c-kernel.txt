I am still using jupyter under python2. I have adapted the code briefly at https://github.com/shouldsee/jupyter-c-kernel/tree/py2
There seems to be a race condition which can cause stdout/stderr output to be missed. I noticed this when a simple `printf("Hello world\n")` program would sometimes fail to print.

It happens when the final call to `p.write_contents()` happens in `do_execute`. At this time, the threads `RealTimeSubprocess._stdout_thread` and `RealTimeSubprocess._stderr_thread` may not have finished reading all the output.

To fix this, we call `.join` on both threads before the final `p.write_contents()`.
Hi, I am able to run the docker container, but am unable to attach a local folder so I can save my work. 

When I run the container, it says the user is "joyvan" so I am using the following command to attach a local folder to the container:

docker run -p 8888:8888 -it --user root -v /pathToMyFolder:/home/joyvan/work brendanrius/jupyter-c-kernel

This command format works for all my other containers to make pathToMyFolder available in the container, so I am wondering if the :/home/joyvan/ is wrong.
It appears that this kernel uses GCC 7.3, but the current version is 9.1. Are there any plans to update this?

Hi, Does this kernel support technical corrections and clarifications to defects in C18? Thanks, Paul

Somehow, the syntax highlighting of some cells is lost sometimes when executing the previous cell. This is similar to https://github.com/EntropyOrg/p5-Devel-IPerl/issues/40

Executing ```IPython.notebook.get_selected_cell().code_mirror.getOption('mode')``` in the JS console then yields ```c```, while it gives ```text/x-csrc``` in correctly displayed cells. 


/opt/conda/bin/install_c_kernel:32: DeprecationWarning: replace is ignored. Installing a kernelspec always replaces an existing installation
  KernelSpecManager().install_kernel_spec(td, 'c', user=user, replace=True, prefix=prefix)

 Coding in C-Kernel, commands can be executed except input command.  If the coding line contains scanf() or getchar(), promgrm will skip the command  without input waiting.  how can solve this problem?