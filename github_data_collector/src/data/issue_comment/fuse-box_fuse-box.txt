Copy-pasted from slack


```ts
import React from "react";
import ReactDOM from "react-dom";
import {Message} from "semantic-ui-react";
ReactDOM.render(
  <Message/>,
  document.getElementById("root")
);
```

```json
{
  "name": "fuse_test",
  "version": "1.0.0",
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "start": "ts-node -T fuse"
  },
  "dependencies": {
    "fuse-box": "4.0.0-alpha.276",
    "react": "^16.12.0",
    "react-dom": "^16.12.0",
    "semantic-ui-react": "^0.88.2",
    "ts-node": "^8.6.1",
    "tslib": "^1.10.0",
    "typescript": "^3.7.4"
  }
}
```
Hey guys, here is something to talk though, many people were complaining that the output config is way too opinionated, here is what I suggest:

```ts
/*
 * Window exposure is a mechanism to expose certain path of the code to window
 *
 *  A call will be applied to the bottom of the bundle
 *  e.g
 *
 *  window[$exposedVariableName] = FuseBox.import($fuseBoxPath)
 *  Where $fuseBoxPath should look like $package/$modulePath
 *
 *  For example of an exposed config for project path would look like:
 *  {
 *     exposedVariableName : "foobar",
 *     fuseBoxPath : "default/foo.module.ts
 *  }
 */
export interface IOutputWindowExposure {
  exposedVariableName: string;
  fuseBoxPath: string;
}

export interface IOutputBundleConfigAdvanced {
  bundle: string;
  windowExposure?: IOutputWindowExposure;
}

/**
 *  target bundle name could be a string or an advanced configuration
 *  with target and exposed objects
 */
export type IOutputBundleConfig = string | IOutputBundleConfigAdvanced;

export interface IOutputConfig {
  /**
   * Root is essential when making custom configuration
   * That's how we determine relative paths for webIndex (index.html)
   */
  root: string;

  /**
   * Isolated API works only for one bundle output.
   * e,g app : "./target.build.js"
   * And would mean that FuseBox will make an inclosed environment where
   * the API will have access to the outside world (window)
   * This is usually the case when making WebWorker bundles / browser builds for libraries
   */
  isolatedApi?: boolean;

  /**
   * You can customise how development bundles look like
   * Hashes are not available for development
   * Possible variations:
   *
   * For one bundle:
   * app : "./app.js"
   * app : "./app.js"
   * windowExposure : { fuseBoxPath : "default/foo", exposedVariableName : foobar }
   *
   * For two bundles
   *
   * app : "./app.js"
   * vendor : "./vendor.js"
   *
   */
  devBundles?: {
    app?: IOutputBundleConfig;
    vendor?: IOutputBundleConfig;
  };
  /**
   * The same as development and will be copied here unless the field is specified
   * Hashes are supported
   *
   * {
   *   app : "./app.$hash.js",
   *   vendor : "./vendor.$name.js"
   * }
   *
   * In addition you can do custom mapping to create additional bundles
   * {
   *    mapping : [
   *       matching : "moment*",
   *       target : "./vendor.moment.$hash.hs"
   *    ]
   * }
   *
   * Or with mapping and exposure
   * {
   *    mapping : [
   *       matching : "moment*",
   *       target : {
   *          bundle : "./vendor.moment.$hash.js",
   *          windowExposure : {
   *            fuseBoxPath : "moment/index",
   *            exposedVariableName : "moment"
   *          }
   *       }
   *    ]
   * }
   */
  prodBundles?: {
    app?: IOutputBundleConfig;
    vendor?: IOutputBundleConfig;
    mapping?: Array<{
      matching: string;
      target: IOutputBundleConfig;
    }>;
    cssSplitting?: boolean;
  };
}
```

So here is an example for a very custom output:

```ts
{
  root: './dist',
  devBundles: {
    app: './app.js',
    vendor: './vendor.js',
  },
  prodBundles: {
    app: './app.$hash.js',
    vendor: './vendor.$hash.js',
    mapping: [
      { matching: 'moment*', target: 'vendor.$hash.moment.js' },
      {
        matching: 'react*',
        target: {
          bundle: 'vendor.$hash.react.js',
          // that would mean that it won't have access to FuseBox scope
          // and can be re-used across projects
          // the only thing you need to do is to "shim" and avoid bundling it again
          isolatedApi: true,
          windowExposure: { fuseBoxPath: 'react/index', exposedVariableName: 'React' },
        },
      },
    ],
  },
};
```

Let me know what you think.

So what you can do:

* Let go and don't bother: FuseBox will **preconfigure** everything. 
* Customise every single bundle
* No hashes will be appended if not requred
* **Customise** exposed variables per bundle
* Create custom bundles with desired contents and expose those
I've had cache bugs more than a few times.  Just noticed a new one today:

https://github.com/fuse-box/fuse-box/issues/1750

I think it would make sense for caching to be cleared between fuse runs, unless specified.

Something like:
```
{ cache: true } === { cache: { enabled: true; clearOnFuseStart: true; } }
```

This would make it so the traditional method of "turn it off, then back on again" would solve any corrupt cache issues.  It would still give users the option to not clear cache on fuse start, if that's what they prefer.
I'm trying to use pluginReplace to change some paths that differ between my dev and prod setups.

pluginReplace does not seem to be working for scss/css though.

I know there was an issue with this recently (https://github.com/fuse-box/fuse-box/issues/1729).  Maybe something similar is happening?

```
pluginReplace("*.scss", {
  "url": "HERE",
  // "url(\"\/": "url(\"http://localhost:9000/",  <-- what I'm actually trying to do
})
```
This is the first thing I tried, but it's a bit of an eyesore.

```
const IS_DEV = true;

const fuse = fusebox({
  	plugins: !IS_DEV ? undefined : [
		pluginReplace({
			"$root_path":  "/dev/root/path"
		})
	]
});

if (IS_DEV) {
  fuse.runDev();
} else {
  fuse.runProd();
}
```
----------

Here's my favorite so far:

```
const BUILD_TYPE: "prod" | "dev" = "dev";

const config: IPublicConfig = {
	entry: 'src/index.ts',
	target: "browser",
}

if (BUILD_TYPE === "dev") {
	config.devServer = {
		httpServer: {
			port: 7378,
		}
	};
	config.plugins = (config.plugins || []).concat([
		pluginReplace({
			"$root_path": ""
		})
	]);
	fusebox(config).runDev();

} else if (BUILD_TYPE === "prod") {
	fusebox(config).runProd();
}
```


What is everyone else is doing?
I'm migrating from v3 to v4. The app works fine on the first load, but when I edit a file, and HMR kicks in, the app breaks.

I have a working dummy project up and running for v4 where HMR does work. I've been comparing that one to my production app, but cannot figure out what makes the latter break on HMR. I hope somebody here can point me somewhere. 

I've included the errors reported by fusebox and chrome below. 

Fusebox provides the following error trace:
```
(node:40522) UnhandledPromiseRejectionWarning: TypeError: this[node.argument.type] is not a function
    at Object.ReturnStatement (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:389:31)
    at Object.BlockStatement (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:258:29)
    at Object.MethodDefinition (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:646:31)
    at Object.BlockStatement (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:258:29)
    at Object.ClassDeclaration (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:510:10)
    at Object.Program (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:225:27)
    at Object.generate (/Users/sv/dev/myproject/website/node_modules/astring/dist/astring.js:1093:29)
    at Object.fastTransform (/Users/sv/dev/myproject/website/node_modules/fuse-box/transform/fastTransform/fastTransform.js:105:28)
    at /Users/sv/dev/myproject/website/node_modules/fuse-box/plugins/core/plugin_js.js:26:56
    at /Users/sv/dev/myproject/website/node_modules/fuse-box/interceptor/interceptor.js:35:49
    at Array.map (<anonymous>)
    at Object.sync (/Users/sv/dev/myproject/website/node_modules/fuse-box/interceptor/interceptor.js:35:39)
    at Object.bundleResolveModule (/Users/sv/dev/myproject/website/node_modules/fuse-box/main/process_plugins.js:6:9)
    at fasterThanLight (/Users/sv/dev/myproject/website/node_modules/fuse-box/FTL/FasterThanLightReload.js:100:27)
    at /Users/sv/dev/myproject/website/node_modules/fuse-box/FTL/FasterThanLightReload.js:114:26
    at /Users/sv/dev/myproject/website/node_modules/fuse-box/interceptor/interceptor.js:35:49
(node:40522) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:40522) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
```

In chrome I get the error:
```
Uncaught SyntaxError: Cannot use import statement outside a module
    at new Function (<anonymous>)
    at 0304e9538_dev.js:628
    at Array.forEach (<anonymous>)
    at EventEmitter.<anonymous> (0304e9538_dev.js:627)
    at EventEmitter.emit (0304e9538_vendor.js:23219)
    at WebSocket.client.onmessage (0304e9538_dev.js:733)
```




The fact that `tsconfig.json` is a somewhat core part of fuse configuration is very easy to miss.  I've added it to the docs as best I can, but I forsee it still being an issue.

Any ideas on how to make this more obvious?

I'm thinking it might make sense to have this information displayed when running fuse eg:
```
⚙️ FuseBox 4.0.0-next.162
     Mode: development
     Entry: My-Project/src/index.ts
     Import Paths: My-Project/tsconfig.json    <----- this bit
     Cache: /path/to/cache
     FTL reload: enabled
```
... though this could very easily be overlooked as well.
[`PIXI.js`](https://github.com/pixijs/pixi.js) has it's own [`Buffer`](https://github.com/pixijs/pixi.js/blob/873b65041bd3a5d173b0e0e10fa93be68bc033d9/packages/core/src/geometry/Buffer.js) class and `fuse-box` is importing it's own `Buffer` polyfill class instead of the PIXI one.

I am quite sure the problem is somewhere in the `fastAstAnalysis` file just from looking at these lines:

https://github.com/fuse-box/fuse-box/blob/249828fcb82fd5a78888b4df7130de49b0cbb94c/src/analysis/fastAstAnalysis.ts#L12-L29

I tried to fix the issue myself but not even removing the `buffer` and `Buffer` strings from being polyfilled worked.

## Code snippets of the generated vendor files

_I left some comments in the snippets_

Snippet from dev vendor file:

```js
FuseBox.pkg("@pixi/core", {}, function(___scope___){
___scope___.file("lib/core.es.js", function(exports, require, module){
var process = require("process");
var buffer = require("buffer").Buffer; // <------------------- should not be imported
const __req1__ = require("@pixi/runner");
const __req2__ = require("@pixi/utils");
const __req3__ = require("@pixi/constants");
const __req4__ = require("@pixi/settings");
const __req5__ = require("@pixi/ticker");
const __req6__ = require("@pixi/math");
const __req7__ = require("@pixi/display");
.
.
.
var UID = 0;
var Buffer = function Buffer(data, _static, index) { // <-------------- PIXI's Buffer
  if (_static === void 0) _static = true;
  if (index === void 0) index = false;
  this.data = data || new Float32Array(1);
  this._glBuffers = {};
  this._updateID = 0;
  this.index = index;
  this.static = _static;
  this.id = UID++;
  this.disposeRunner = new __req1__.Runner("disposeBuffer", 2);
};
Buffer.prototype.update = function update(data) {
  this.data = data || this.data;
  this._updateID++;
};
Buffer.prototype.dispose = function dispose() {
  this.disposeRunner.run(this, false);
};
Buffer.prototype.destroy = function destroy() {
  this.dispose();
  this.data = null;
};
Buffer.from = function from(data) {
  if (data instanceof Array) {
    data = new Float32Array(data);
  }
  return new Buffer(data);
};
.
.
.
var byteSizeMap = {
  5126: 4,
  5123: 2,
  5121: 1
};
var UID$1 = 0;
var map$1 = {
  Float32Array: Float32Array,
  Uint32Array: Uint32Array,
  Int32Array: Int32Array,
  Uint8Array: Uint8Array,
  Uint16Array: Uint16Array
};
var Geometry = function Geometry(buffers, attributes) {
  if (buffers === void 0) buffers = [];
  if (attributes === void 0) attributes = {};
  this.buffers = buffers;
  this.indexBuffer = null;
  this.attributes = attributes;
  this.glVertexArrayObjects = {};
  this.id = UID$1++;
  this.instanced = false;
  this.instanceCount = 1;
  this.disposeRunner = new __req1__.Runner("disposeGeometry", 2);
  this.refCount = 0;
};
Geometry.prototype.addAttribute = function addAttribute(id, buffer, size, normalized, type, stride, start, instance) {
  if (normalized === void 0) normalized = false;
  if (instance === void 0) instance = false;
  if (!buffer) {
    throw new Error("You must pass a buffer when creating an attribute");
  }
  if (!buffer.data) {
    if (buffer instanceof Array) {
      buffer = new Float32Array(buffer);
    }
    buffer = new Buffer(buffer); // <----------------------- PIXI's Buffer being used
  }
  var ids = id.split("|");
  if (ids.length > 1) {
    for (var i = 0; i < ids.length; i++) {
      this.addAttribute(ids[i], buffer, size, normalized, type);
    }
    return this;
  }
  var bufferIndex = this.buffers.indexOf(buffer);
  if (bufferIndex === -1) {
    this.buffers.push(buffer);
    bufferIndex = this.buffers.length - 1;
  }
  this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);
  this.instanced = this.instanced || instance;
  return this;
};
.
.
.
}
```

Snippet from prod vendor file:

```js
// @pixi/core/lib/core.es.js
$fsx.f[23] = (module, exports) => {
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = $fsx.r(20); // <-------------------------- 20 is the Buffer polyfill
exports.Buffer = buffer_1.Buffer; // <---------- no idea why it's being exported here
const runner_1 = $fsx.r(21);
const utils_1 = $fsx.r(14);
const constants_1 = $fsx.r(13);
const settings_1 = $fsx.r(7);
const ticker_1 = $fsx.r(22);
const math_1 = $fsx.r(15);
const display_1 = $fsx.r(16);
.
.
.
var UID = 0;
var Buffer = function Buffer(data, _static, index) { // <-------------- PIXI's Buffer
    if (_static === void 0)
        _static = true;
    if (index === void 0)
        index = false;
    this.data = data || new Float32Array(1);
    this._glBuffers = {};
    this._updateID = 0;
    this.index = index;
    this.static = _static;
    this.id = UID++;
    this.disposeRunner = new runner_1.Runner('disposeBuffer', 2);
};
exports.Buffer = buffer_1.Buffer; // <------------ wrong Buffer class being exported
// these methods are a mess - changing the prototype methods of the Buffer polyfill
buffer_1.Buffer.prototype.update = function update(data) {
    this.data = data || this.data;
    this._updateID++;
};
buffer_1.Buffer.prototype.dispose = function dispose() {
    this.disposeRunner.run(this, false);
};
buffer_1.Buffer.prototype.destroy = function destroy() {
    this.dispose();
    this.data = null;
};
buffer_1.Buffer.from = function from(data) {
    if (data instanceof Array) {
        data = new Float32Array(data);
    }
    return new buffer_1.Buffer(data);
};
.
.
.
var byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };
var UID$1 = 0;
var map$1 = {
    Float32Array: Float32Array,
    Uint32Array: Uint32Array,
    Int32Array: Int32Array,
    Uint8Array: Uint8Array,
    Uint16Array: Uint16Array,
};
var Geometry = function Geometry(buffers, attributes) {
    if (buffers === void 0)
        buffers = [];
    if (attributes === void 0)
        attributes = {};
    this.buffers = buffers;
    this.indexBuffer = null;
    this.attributes = attributes;
    this.glVertexArrayObjects = {};
    this.id = UID$1++;
    this.instanced = false;
    this.instanceCount = 1;
    this.disposeRunner = new runner_1.Runner('disposeGeometry', 2);
    this.refCount = 0;
};
exports.Geometry = Geometry;
Geometry.prototype.addAttribute = function addAttribute(id, buffer, size, normalized, type, stride, start, instance) {
    if (normalized === void 0)
        normalized = false;
    if (instance === void 0)
        instance = false;
    if (!buffer) {
        throw new Error('You must pass a buffer when creating an attribute');
    }
    if (!buffer.data) {
        if (buffer instanceof Array) {
            buffer = new Float32Array(buffer);
        }
        buffer = new buffer_1.Buffer(buffer); // <----- wrong Buffer class being used
    }
    var ids = id.split('|');
    if (ids.length > 1) {
        for (var i = 0; i < ids.length; i++) {
            this.addAttribute(ids[i], buffer, size, normalized, type);
        }
        return this;
    }
    var bufferIndex = this.buffers.indexOf(buffer);
    if (bufferIndex === -1) {
        this.buffers.push(buffer);
        bufferIndex = this.buffers.length - 1;
    }
    this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);
    this.instanced = this.instanced || instance;
    return this;
};
.
.
.
}
```
Code section

https://github.com/fuse-box/fuse-box/blob/master/src/dev-server/devServer.ts#L59-L65

Current error:
```
TypeError: path must be absolute or specify root to res.sendFile
    at ServerResponse.sendFile (/Users/seph/Code/ChooseHealth/instride-storefront/node_modules/express/lib/response.js:425:11)
    at app.use (/Users/seph/Code/ChooseHealth/instride-storefront/node_modules/fuse-box/dev-server/devServer.js:44:13)
```


Suggestion:
Putting a try/catch around these lines, and outputting the error as well as the absolute path that was attempted.  Would make it a lot easier to tell what's wrong with the current supplied path.
