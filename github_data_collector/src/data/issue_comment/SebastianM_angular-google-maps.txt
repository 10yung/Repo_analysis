**Issue description**


**Steps to reproduce and a minimal demo of the problem**

_Use stackblitz.com or similar -- try this template as a starting point: https://stackblitz.com/edit/angular-google-maps-demo

_What steps should we try in your demo to see the problem?_

**Current behavior**


**Expected/desired behavior**


**angular-google-maps, Angular, & any other relevant dependency versions**


**Other information**

After update to angular 9.0.0-rc.8 I got error

>  ERROR in node_modules/@agm/core/core.module.d.ts:28:79 - error NG6005: AgmCoreModule.forRoot returns a ModuleWithProviders type without a generic type argument. Please add a generic type argument to the ModuleWithProviders type. If this occurrence is in library code you don't control, please contact the library authors.
> 
> 28     static forRoot(lazyMapsAPILoaderConfig?: LazyMapsAPILoaderConfigLiteral): ModuleWithProviders;
>                                                                       
> src/main/webapp/app/dashboard/dashboard.module.ts:70:14 - error NG6002: Appears in the NgModule.imports of EnergyFluxAppModule, but could not be resolved to an NgModule class




**angular-google-maps, Angular, & any other relevant dependency versions**
 "@angular/core": "9.0.0-rc.8",
"@agm/core": "1.1.0",


**Issue description**
After clicking on the zoom controls on the map -> [zoom]  binding has no effect.

**Steps to reproduce and a minimal demo of the problem**
Create a button to change zoom variable in the component, and bind the zoom variable to the zoom attribute.

Click on one of the zoom controls on the map.

Then click on the button to change the zoom -> nothing is happening

_Use stackblitz.com or similar -- try this template as a starting point: https://stackblitz.com/edit/angular-google-maps-demo

my demo: https://angular-google-maps-demo-np1aes.stackblitz.io/

_What steps should we try in your demo to see the problem?_

**Current behavior**
zoom the map -> then click on the button -> then zoom the map -> click again on the button
in the second time the button does not effect on the zoom

**Expected/desired behavior**
That i can change to zoom even if the user has changed the zoom via scrolling or the controls

**angular-google-maps, Angular, & any other relevant dependency versions**


**Other information**

**Issue description**
Getting started and other pages of the docs website are not found.

**Steps to reproduce and a minimal demo of the problem**
 Go to getting started link: https://angular-maps.com/guides/getting-started/
or go to the docs website and click getting started


Hi! Please help with this issue. During zoom,  markers disappear (Chrome, Safari)
https://yadi.sk/i/9PNN6hn50FwCfg
I first encountered Angular less than a week ago, so first of all I would like to apologize if this turns out to be not an issue but rather a misunderstanding on my side. That being said:

**Issue description**
As described in the heading, it seems that the observable returned by `AgmGeocoder.geocode(request: GeocoderRequest)` does not complete, so e.g., for `geocoder` some instance of `AgmGeocoder` and `request` some `GeocoderRequest`, the Promise `gecoder.geocode(request).toPromise()` will never resolve. 
 

**Steps to reproduce and a minimal demo of the problem**
The following slight modification in [geocoder-service.spec.ts](https://github.com/SebastianM/angular-google-maps/blob/master/packages/core/services/geocoder-service.spec.ts) will cause a test failure, as the `complete` spy is never called:
```
  it('should emit a geocode result', fakeAsync(() => {
    const success = jest.fn();
    const complete = jest.fn();    // added
    const geocodeRequest = {
      address: 'Mountain View, California, United States',
    };
    const geocodeExampleResponse = {
      ... // omitted for better readability
    };

    geocodeMock.mockImplementation((_geocodeRequest, callback) => callback(geocodeExampleResponse, 'OK'));

    geocoderService.geocode(geocodeRequest).subscribe(success, undefined, complete);

    tick();

    expect(success).toHaveBeenCalledTimes(1);
    expect(success).toHaveBeenCalledWith(geocodeExampleResponse);
    expect(geocodeMock).toHaveBeenCalledTimes(1);
    expect(complete).toHaveBeenCalledTimes(1);    // added

    discardPeriodicTasks();
  }));
```

**Expected/desired behavior**
As said in the beginning, I might be completely off here, but I would have expected completion at this point, i.e. something like the following in the [AgmGeocoder](https://github.com/SebastianM/angular-google-maps/blob/master/packages/core/services/geocoder-service.ts) `constructor`:
```
constructor(loader: MapsAPILoader) {
    const connectableGeocoder$ = new Observable(subscriber => {
      loader.load().then(() => {
        subscriber.next();
        subscriber.complete();    // added
      });
    })
      .pipe(
        map(() => this._createGeocoder()),
        multicast(new ReplaySubject(1)),
      ) as ConnectableObservable<Geocoder>;

    connectableGeocoder$.connect(); // ignore the subscription
    // since we will remain subscribed till application exits

    this.geocoder$ = connectableGeocoder$;
  }
```


So the first time click on a marker on the map, the map zoom in on that marker with desired zoom value. If i use scroll-wheel on mouse to scroll out and then try to click on a marker again, the map does not zoom in to my desired value. 

Is this a bug or something i do wrong?
Stackbliz : https://stackblitz.com/edit/angular-google-maps-demo-aftpeb?embed=1&file=app/app.component.ts
Code below: 

```
<agm-map id="map" [latitude]="lat" [longitude]="lng" [zoom]="zoom" [fitBounds]="true">
          <agm-marker [latitude]="lat" [longitude]="lng"></agm-marker>
          <agm-marker *ngFor="let marker of markers" 
            [latitude]="marker.lat" 
            [longitude]="marker.long" 
            [iconUrl]="marker.icon.url" 
            [title]="marker.name" 
            [visible]="marker.visible"
            (markerClick)="markerOnClick(marker)"
            [agmFitBounds]="true"
            >
        </agm-marker>
 </agm-map>

```

```
markerOnClick(clickedMarker){
    
    for(var i in this.markers){
      //reset visible markers
      if(this.markers[i].type != 1){
        this.markers[i].visible = false;
      }
      //then show corresponding
      if(this.markers[i].id == clickedMarker.id){
        this.markers[i].visible = true;
        this.lat = clickedMarker.lat;
        this.lng = clickedMarker.long;
        this.zoom = 15;       
      }
    }
  }
```


**Issue description**
There are some missing methods in GoogleMap interface, that should be available according to https://developers.google.com/maps/documentation/javascript/reference/map

Missing methods:
- getClickableIcons(): boolean
- getDiv(): Element
- getHeading(): number
- getProjection(): Projection
- getStreetView(): StreetViewPanorama
- getTilt(): number
- setClickableIcons(value: boolean): void
- setHeading(heading: number): void
- setMapTypeId(mapTypeId: MapTypeId | string): void
- setStreetView(panorama: StreetViewPanorama): void
- setTilt(tilt:  number): void

**Current behavior**
Some of methods are missing

**Expected/desired behavior**
All methods should be included in GoogleMap interface according to Google documentation.

**Other information**
I am using getDiv() method and it is working correctly, but I got type errors.

 - LatLngBounds.contains method can accept either a LatLng or a
LatLngLiteral
 - make non-core modules depend on core version 1.0.0, not beta
 - add GoogleMap to default exports

fixes: #862
Hello, I'm opening this issue as requested in https://github.com/SebastianM/angular-google-maps/issues/1726#issuecomment-533020436.

**Issue description**

Providing an API key asynchronously has been possible for years (we've been using it from 0.17.0 to 1.0.0-beta.7). It is required when, for example, the API key comes from a remote config file.

Version 1.0.0 removed this ability.

**Steps to reproduce the problem**

Use any `@agm/core` version from 2016 to 2019, below 1.0.0, it works:
```ts
import {LAZY_MAPS_API_CONFIG, LazyMapsAPILoaderConfigLiteral} from '@agm/core/services';
import config from './config';

@Injectable({providedIn: forwardRef(() => CustomerModule)})
export class GoogleMapsConfig implements LazyMapsAPILoaderConfigLiteral {
  apiKey?: string = config.gmapsApiKey;
}

@NgModule({
  imports: [AgmCoreModule.forRoot()],
  providers: [{provide: LAZY_MAPS_API_CONFIG, useClass: GoogleMapsConfig}],
})
export class CustomerModule {}
```

Update to `@agm/core` version 1.0.0, it starts failing with `'LAZY_MAPS_API_CONFIG' is not initialized`.

**Alternatives**

Use `@angular/google-maps`.

**Other information**

Any of these would be helpful:
- Restoring the feature.
- Implementing an equivalent feature.
- Pointers or instructions of how to implement it, if we'd like to make a PR.

Thanks