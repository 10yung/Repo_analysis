> What is the problem you're trying to solve?

Animations/Transitions that take less than 150ms should be omitted, since this time is too short to provide a visual improvement.

On the other hand, I'm using a delay of 40ms to defer style changes for hover effects. E.g. if you quickly move the cursor over a input box, scrollbar or button, it should not change its style. Only if you leave the cursor on the element for atleast 40ms. This prevents flickering, while quickly moving the cursor.

> What solution would you like to see?

The "time-min-milliseconds" rule should provide options to specify different values for delay and duration.
<!-- Please answer the following. Issues that do not will be closed. -->

> Clearly describe the bug

Certain input (see below) causes a crash in the `indentation` rule. I can repro locally, and also on the online demo page.

> Which rule, if any, is the bug related to?

`indentation`

> What CSS is needed to reproduce the bug?

```css
:not(.enabled
) {
  color: gray;
}

```

> What stylelint configuration is needed to reproduce the bug?

```js
module.exports = {
  rules: {
    'indentation': 2,
  },
};

```

> Which version of stylelint are you using?

`13.0.0`

> How are you running stylelint: CLI, PostCSS plugin, Node.js API?

CLI with `yarn stylelint **/*.scss`

> Does the bug relate to non-standard syntax (e.g. SCSS, Less etc.)?

No.

> What did you expect to happen?

Rule does not crash.

> What actually happened (e.g. what warnings or errors did you get)?

Rule crashes with the following exception and stack trace:

```text
RangeError: Invalid count value
    at /workdir/client/redacted/file.scss:161:5
    at String.repeat (<anonymous>)
    at /workdir/client/node_modules/stylelint/lib/rules/indentation/index.js:316:45
    at handleMatch (/workdir/client/node_modules/style-search/index.js:201:5)
    at module.exports (/workdir/client/node_modules/style-search/index.js:189:5)
    at checkMultilineBit (/workdir/client/node_modules/stylelint/lib/rules/indentation/index.js:222:4)
    at checkSelector (/workdir/client/node_modules/stylelint/lib/rules/indentation/index.js:190:4)
    at /workdir/client/node_modules/stylelint/lib/rules/indentation/index.js:132:5
    at /workdir/client/node_modules/postcss/lib/container.js:135:18
    at Rule.each (/workdir/client/node_modules/postcss/lib/container.js:101:16)
    at Rule.walk (/workdir/client/node_modules/postcss/lib/container.js:131:17)
```

<!--
Before posting, please check that the bug hasn't already been:
1. fixed in the next release (https://github.com/stylelint/stylelint/blob/master/CHANGELOG.md)
2. discussed previously (https://github.com/stylelint/stylelint/search)
-->

<!--
You can help us fix the bug more quickly by:
1. Figuring out what needs to be done and proposing it
2. Submitting a PR with failing tests.

Once the bug has been confirmed, you can help out further by:
1. Writing the code and submitting a PR.
-->

> Which issue, if any, is this issue related to?

Fixes #4449

> Is there anything in the PR that needs further explanation?

Bumps dependency to include this upstream PR (which has tests): https://github.com/gucong3000/postcss-jsx/pull/67

There's a bit of extra noice in the package-lock but that's just the result of me running `npm install` - seems something was outdated previously.
> What is the problem you're trying to solve?

The current rule for `font-weight-notation` has two options: "numeric" and "named-where-possible". While "numeric" is unambiguous, "named-where-possible" allows for a mix of values. Other rules like this control for value type (e.g., `color-named`, `color-no-hex`), and in our case we wish to only allow named values in the CSS. 

> What solution would you like to see?

Two options stand out:
- add an additional option to `font-weight-notation` such that only named values are allowed. Possible name for the option could be `named-only`
- add a new rule `font-weight-named` that is similar to `color-named` and only allows the fixed and relative named values for `font-weight` (e.g., "lighter", "normal", "bold", etc.). This might necessitate a refactor of the existing `font-weight-notation` rule for naming consistency purposes.

In either implementation, the new behavior would be to only allow non-numeric values for `font-weight:`, inline. CSS variable values and the [named values](https://developer.mozilla.org/en-US/docs/Web/CSS/font-weight) would be allowed.

> Related to previous rules/functionality?

- in 4.5.0, `always` option was removed from `font-weight-notation`. I'm not sure what that behavior was, but it's the only relevant functionality I could find that could be related to this new functionality.



> Which issue, if any, is this issue related to?
None, as it's a documentation fix.

> Is there anything in the PR that needs further explanation?
No, it's self explanatory.
The CLI document says about the exit codes as follow:

https://github.com/stylelint/stylelint/blob/90bef807ac270ae4082384de71ada7f56bbb3145/docs/user-guide/cli.md#L247-L254

However, the current stylelint never exits with the code `80`. The following commands can reproduce the issue:

```shell-session
$ ./node_modules/.bin/stylelint --version
13.0.0

$ ./node_modules/.bin/stylelint '*.css'
Error: No files matching the pattern "*.css" were found.
    at /private/tmp/work/node_modules/stylelint/lib/standalone.js:208:12
    at processTicksAndRejections (internal/process/task_queues.js:97:5)

$ echo $?
1
```

This issue does NOT occur on stylelint v7:

```shell-session
$ ./node_modules/.bin/stylelint --version
7.13.0

$ ./node_modules/.bin/stylelint '*.css'
Error: *.css does not match any files
    at /private/tmp/work/node_modules/stylelint/lib/standalone.js:124:33

$ echo $?
80
```

And, stylelint v8 exits with the code `0`:

```shell-session
$ ./node_modules/.bin/stylelint --version
8.4.0

$ ./node_modules/.bin/stylelint '*.css'

$ echo $?
0
```

About this issue, which is correct the document or the current behavior?

Other, I noticed that Running stylelint with invalid options exits with the code `2` instead of `1`:

```shell-session
$ ./node_modules/.bin/stylelint --foo
Invalid option "--foo". Did you mean "-f"?

$ echo $?
2
```

I think appropriate to exit with the code `1` because passing invalid options is not a violation of rules.

I think we should reconsider the document and code about exit codes and add more system test cases. What do you think about it? 
What does this do:

- Remove the workaround for Node < 7. Now, Node 10 is required.
- Inline unnecessary `Promise.resolve()`.
- Convert to an arrow function for consistency in a file.
- Convert to `async` functions for readability.

> Which issue, if any, is this issue related to?

None, as it's refactoring for the system test code.

> Is there anything in the PR that needs further explanation?

No, it's self explanatory.

It appears that the `property-no-unknown` rule is incorrectly flagging SCSS `@use` namespaces, when setting a variable within a namespace. This occurs only within `@mixin`s and `@function`s, it doesn't occur when reading or writing module properties in the global scope. It also only occurs while setting a variable - it doesn't occur when reading the variable.

SCSS `@use` and module namespaces are relatively new - [they're described here](https://sass-lang.com/documentation/at-rules/use#loading-members).

```scss
@use 'accoutrement/sass' as a;
@use 'sass:list';

// No stylelint error
a.$sizes: ();

@function clear-sizes() {
  // Lint error: Unexpected unknown property "a.$sizes"   property-no-unknown
  a.$sizes: ();
  @return a.$sizes; // No lint error
}
$s: clear-sizes();

@mixin dump-sizes() {
  // No stylelint error
  $sizes: a.$sizes;
  @debug '# of sizes registered: #{ list.length($sizes) }';
}
@include dump-sizes();
```

The linked file provides a simple repro case with dependencies.
[stylelint-module-property.zip](https://github.com/kristerkari/stylelint-scss/files/4037883/stylelint-module-property.zip)

> Which rule, if any, is the bug related to?

property-no-unknown

> What CSS is needed to reproduce the bug?

```scss
@use 'accoutrement/sass' as a;

@function clear-sizes() {
  // Lint error: Unexpected unknown property "a.$sizes"   property-no-unknown
  a.$sizes: ();
  @return a.$sizes; // No error
}
```

> What stylelint configuration is needed to reproduce the bug?

stylelint.config.js
```js
module.exports = {
  rules: {
    'property-no-unknown': true,
  }
};
```

> Which version of stylelint are you using?

12.0.1

> How are you running stylelint: CLI, PostCSS plugin, Node.js API?

CLI: `stylelint **/*.scss`

> Does the bug relate to non-standard syntax (e.g. SCSS, Less etc.)?

Yes, it's related to SCSS module namespaces.

> What did you expect to happen?

No lint error.

> What actually happened (e.g. what warnings or errors did you get)?

```shell
$ stylelint **/*.scss

src/stylelint-use-namespace.scss
 9:3  Ã—  Unexpected unknown property "a.$sizes"   property-no-unknown

error Command failed with exit code 2.
```

I originally posted this bug [in the stylelint-scss project](https://github.com/kristerkari/stylelint-scss/issues/426), but I was directed to post it here.
We've got a [set of conventions](https://stylelint.io/developer-guide/issues) for managing issues. I've retroactively applied these to the open issues that I've come across while combing through the last 3 months of (fantastic) work on the project.

I think it would be beneficial for new contributors to add descriptions to our labels as the distinction between labels can be quiet subtle e.g. "meta" vs "infrastructure". However, it will make the drop-down list longer but I think the benefits outweigh this.

---

We could possibly do with a new welcome doc that directs new contributors to these developer guide resources too.

We should use prettier to format the markdown documentation for consistency. (See https://github.com/stylelint/stylelint/pull/4435). At the moment I'm using "Save without formatting" whenever I work on markdown files in stylelint.

However, this will require us to add [`/* prettier-ignore */` comments](https://prettier.io/docs/en/ignore.html#css) inside our CSS examples which show idiosyncratic patterns. This should only be for the whitespace rules.

We'll also probably need to strip out these comments as part of the website transformation script.

Any objections to this proposal?