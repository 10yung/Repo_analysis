Test 2fa service
### Problem
Our application does not handle concurrent requests very well. The bottleneck is the caching mechanism/strategy. Redis is indeed a very powerful tool but we need to change the way we use it.

Our current strategy is to cache very small pieces of info, which usually substitute a database query.

Currently, a single request of a anonymous user to the main page of the SAMPLE DATABASE will cause around 40 commands to be executed on redis.  
If these take 1ms to complete a roundtrip (issue command, fetch result, network trip, etc), a single request timer will start at acceptable's 40ms.  
When we talk about 5 concurrent requests, the initial timer jumps to 200ms due to the fact that redis is not concurrent. Things get ugly pretty quick.

### Suggestion
We should add to our cache mechanism coarser levels of cache. Put together with #712 a lot of redis roundtrips can be avoided, improving greatly the performance of concurrent requests, without hamstringing the store manager.  
For backward compatibility, I think we should not delete any already used keys, only add the new "consolidate information" keys.

Admin should has the ability to see the log of auctions and also manage the auctions, who add bids, who wins, delete some fake bids, flag the winner for the second one if the winner does not pay, and many more which related to the auctions.

Set base currency for auctions view at "my account". Currently currency is changed without calculating currency rate. 
If customer would like to ask about product which is assign to vendor, vendor should get email with this question (currently only store owner get notification). 
**Is your feature request related to a problem? Please describe.**
In case of question about a product (Ask question), form is show to customer, with field email. That email should be added to message template to replyto field. 
I think it could be better if we can set an incremental range for an action product,
I mean, for example, if the start price is 100000, I should be able to set a range, for example : 5, then user can offer prices like 100005, 100010, not prices like 100001
Type: Technical Feature

## Issue
When tracing the app for performance using tools such as dotnet-trace several methods appear as "Anonymous" which doesn't help much

## Solution
Extracted methods, giving them names, in order to make the traceability easier.

## Breaking changes
None

## Testing
No need, only extracted methods giving them names...
I was not sure about your unit testing methodology, so I created this small implementation to see how you guys would react... if that approach is OK I will create more tests
## Solution
Refactored part of PriceCalculationService class. The most important part is the parallelisation of the `Task<IList<AppliedDiscount>> GetAllowedDiscounts(Product product, Customer customer)` method. I also extracted a couple of methods and inverted some IFs, reducing indentation.

## Breaking changes
None.

## Testing
Basic navigation
