Hi, I have a question in BytesQueue part.
Why reset (q.head = leftMarginIndex, q.tail = q.rightMargin) in function allocateAdditionalMemory. Will it cause some entries live longer than lifeWindow during cache cleanUp when additional memory allocated?
EntryStatus back to the caller "Expired" cannot be differentiated.
Fixing this by default "_" to 0 and incremental RemoveReasons

comment was missing for GetWithInfo api so updated that

test: ran all unit test cases
Currently there is no automation for release notes/changelog (see latest https://github.com/allegro/bigcache/releases/tag/v2.1.1 and https://github.com/allegro/bigcache/releases/tag/v1.2.0).

It will be good to have some automation for this, so changelog will be created automatically (it's fine to paste it manually, but the text should be done automatically).

PLEASE if you're going to start working on this issue, comment below, to discuss the solution, thanks in advance.
Hi.
I try load to BigCache 200 millions pair key:value, but unfortunately my golang script took up all the memory(24gb) and was killed by the OS. 

My bigcache config: 
`	
config = bigcache.Config{
		Shards:           512,
		LifeWindow:       10 * time.Minute,
		MaxEntrySize:     16,
		HardMaxCacheSize: 0,
	}`

Please tell me what am I doing wrong, maybe I did the wrong config? 
Or can you tell me another solution for this problem?

My golang script:
https://github.com/gomonuk/200kkCache/blob/master/main.go
Hi,

I have a requirement, that when an entry is marked for eviction (LifeWindow) I want to call a callback function before it gets evicted (essentially CleanWindow). Was looking at the config object and found out that callbacks are only supported for evictions.

Can you please share details on whether this can be supported or not?
I have a problem:
      ` cache, _ := bigcache.NewBigCache(bigcache.DefaultConfig(10 * time.Minute))

	cache.Set("my-unique-key", []byte("value"))

	entry, _ := cache.Get("my-unique-key")
	fmt.Println(string(entry))
	cache.Set("my-unique-key", []byte("values"))

	entry, _ = cache.Get("my-unique-key")
	fmt.Println(string(entry))`
set the same key twice with different value.bigcache can get the newer value ,but I don't find any code to delete old value.Did the older value is still in memory,but never couldn't get by user,or delete it already but I didn't seek out
```
func NewBytesQueue(initialCapacity int, maxCapacity int, verbose bool) *BytesQueue {
	return &BytesQueue{
		array:           make([]byte, initialCapacity),
		capacity:        initialCapacity,
		maxCapacity:     maxCapacity,
		headerBuffer:    make([]byte, headerEntrySize),
		tail:            leftMarginIndex,
		head:            leftMarginIndex,
		rightMargin:     leftMarginIndex,
		verbose:         verbose,
		initialCapacity: initialCapacity,
	}
}
```
`array` and `headerBuffer` use make to initalize, but the second param of make is len, if `initialCapacity` means capactiy, it shoud be use as third param(`make([]byte,0,initialCapacity)`)
Hi there,

I want to use bigcache for an index for my own "memory database".

My records have various fields and are indexed by a uint64 primary key. I now want to add secondary indices for columns pointing to primary keys. The data structure would look like the following:

bigcache[<columnvalue>] = `<uint64>,<uint64>,<uint64>`...

So for example my record has a column "city" and I want to an index on this column:

bigcache_city_index[newyork] = `<pk1>,<pk2>,<pk3>`...

From my point of view this cannot be done today because I will have a race condition between get() and set() calls. 

Right now I am thinking about the following:

- Implement new "AppendUint64(key, id)"
- Look up shard by key
- Lock shard
- Get value
- Add new id (uint64) to value (binary.PutUvarint())
- Set value
- Unlock shard

What are your thoughts about this?

Thank you,
Stefan
Something like 
```diff
diff --git a/bigcache.go b/bigcache.go
index b387926..32db182 100644
--- a/bigcache.go
+++ b/bigcache.go
@@ -171,7 +171,7 @@ func (c *BigCache) Iterator() *EntryInfoIterator {
 
 func (c *BigCache) onEvict(oldestEntry []byte, currentTimestamp uint64, evict func(reason RemoveReason) error) bool {
        oldestTimestamp := readTimestampFromEntry(oldestEntry)
-       if currentTimestamp-oldestTimestamp > c.lifeWindow {
+       if (int(c.lifeWindow) >= 0) && (currentTimestamp-oldestTimestamp > c.lifeWindow) {
                evict(Expired)
                return true
        }
diff --git a/config.go b/config.go
index 918908c..c5905f4 100644
--- a/config.go
+++ b/config.go
@@ -7,6 +7,7 @@ type Config struct {
        // Number of cache shards, value must be a power of two
        Shards int
        // Time after which entry can be evicted
+       // No eviction if LifeWindow < 0
        LifeWindow time.Duration
        // Interval between removing expired entries (clean up).
        // If set to < 0 then no action is performed. Setting to < 1 second is counterproductive â€” bigcache has a one second resolution.
diff --git a/shard.go b/shard.go
index a31094f..6e5612a 100644
--- a/shard.go
+++ b/shard.go
@@ -134,7 +134,7 @@ func (s *cacheShard) del(key string, hashedKey uint64) error {
 
 func (s *cacheShard) onEvict(oldestEntry []byte, currentTimestamp uint64, evict func(reason RemoveReason) error) bool {
        oldestTimestamp := readTimestampFromEntry(oldestEntry)
-       if currentTimestamp-oldestTimestamp > s.lifeWindow {
+       if (int(s.lifeWindow) >= 0) && (currentTimestamp-oldestTimestamp > s.lifeWindow) {
                evict(Expired)
                return true
        }
```
https://github.com/allegro/bigcache/blob/bbf64ae21fc5555f4e9752825ee9ffe13b1e5fa0/queue/bytes_queue.go#L222

It appears there is a bounds check before the blockSize, but then there is an assumption that adding block size is not out of bounds.

