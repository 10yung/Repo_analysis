We at panter plan to invest more in react-page and help improving it and make it a sustainable open source project. 

We plan to:

- improve the documentation
- improve the example to show off more features
- feature it at react-meetups in zÃ¼rich or similar
- move the example application as i think we have no access to the current deployment
- add better release-management (semantic-release)

On the other hand, we would like to mention us and other contributors to the readme and to the example application as companies that support that library (ORY, panter, guestbell, _your company_?). I also believe that this adds trust to the library (and gives these companies some visibility of course).

I would like to have an endorsement from other contributors here and also ask for other suggestions and other companies and individuals that want to get mentioned as either users of the libraries or active contributors. thoughts?




while updating slate i saw that plugins can implement handleFocusNextHotKey and handleFocusPreviousHotKey. It should enable to navigate between cells of the editor with keyboard (i guess?)

 but most plugins don't  implement it and its not so trivial to reimplement it with the new slate at the moment, so I would propose to remove it, because it is not worth the effort. It would also help reducing the api surface.

thoughts?
This one is a tough one. But nearly working now!  The hardest problem was the list-indention stuff... i thought i would be a decent programmer, but i felt stupid with that one...

It would not have been possible without typescript! Also thanks to @PeterKottas  for the inspiration, I hope your custom plugin will be obsolete soon ;-)

TODO:

- [ ] fix undo / redo
- [ ] fix list indention (still funky)
- [ ] pasting works, but seems to remove headings? check if this happens on slate official example as well

Changes so far:

**feat**: update to latest slate 0.57.0 (obviously). This should greatly reduce the bundle size  _(no immutable.js!)_ and improve performance, altough at the time of writing unessesary rerenders may occure as they are not yet optimized. 

**feat**: switching between read-only and edit mode does no longer rerender all the slate elements

**feat**: the slate plugin has now a function `htmlToSlate` which returns slate state based on the given plugins

**BREAKING CHANGE**: list plugins have slightly changed, the definition is a bit different. This is only a breaking change if you have customized lists. typescript should make it obvious what to do, will update the docs as well

**BREAKING CHANGE**: slate plugins have now internally a different structure, so completly custom slate plugins will no longer work. However, if you use the provided factory functions or customize the default plugin, you are not affected.


fixes https://github.com/react-page/react-page/issues/757
This is one for deeper discussion I guess. I have faced an issue where one plugin was misbehaving, corrupting react rendering tree with an error being thrown. The obvious solution (that I implemented for the time being) was to surround the react page Editor with an error boundary. However, at that point, all I can do is erase the whole editor state and let clients start over (potentially making them lose the efforts they put into creating the content)

I am considering if it would make sense to include a default ErrorBoundary (on the core rather than plugin level). I think it's fairly easy to implement, however, it would require certain API to help modify the UI, content and also callbacks for errors being thrown for logging. I would very much value your opinion on this @macrozone . I can't say such an approach would be my first choice, but at the time of writing, I can't see any other way to prevent complete state corruption by at least isolating it to local level. I envision the default UI for such an error boundary would contain a button that would erase the plugin state to its initial state.

Let me know what you think. Cheers
feat: slate plugins can now be customized multiple times (calling it with a customize function)

feat: the slate plugin itself now defers the type of plugins and passes it to createInitialSlateState. This makes it easy to autocomplete you through all available plugins! even if you customize them:


```
import slate from '@react-page/plugins-slate';

const myCustomizedSlate = slate(def => ({
  ...def,
  name: def.name + '/custom', // give it some other name
  plugins: {
    customStuff: {
      myCustomSlatePlugin,
    },
    headings: {
      h1: def.plugins.headings.h1,
      h2: def.plugins.headings.h2,
    },
    paragraphs: def.plugins.paragraphs,
    emphasize: def.plugins.emphasize,
  },
}));

```

later in a layout plugin:


```

 state: myCustomizedSlate.createInitialSlateState(({ plugins }) => ({
                children: [
                  {
                    plugin: plugins.headings.h1, // this is fine
                    children: ['Hello world'],
                  },
                  {
                    plugin: plugins.headings.h3, // type error!
                    children: ['Title and paragraph'],
                  },
                  {
                    plugin: plugins.customStuff.myCustomSlatePlugin, // your custom plugin is also there!
                  },
                ],
              })),


```


chore: update typescript
this library uses ramda at a few places. To reduce bundle size, it would be good to remove it
In our webapp we're working with different breakpoints for mobile, tablet and desktop media queries. This leads to weird layout behaviours since the react-page cells break differently from our own components.

Is there a way to customize these breakpoints so that they fit the ones we've defined?
slate 0.50 is out: https://github.com/ianstormtaylor/slate/blob/master/packages/slate-react/Changelog.md

https://docs.slatejs.org/concepts/xx-migrating

it requires some refactoring, but should be an intesting thing to do. We would profit from reduction in bundle size and complexity and probably also better performance


_ui/DisplayModeToggle_ has an optional property named _translations_ with a default defaultTranslations. 
How can i pass a custom translations object to this component?
ui/EditorUi seems to not propagate any props like this.
At present the 'image editor' dialogue only contains options to upload/link to images, and set the link location.

For accessibility and SEO reasons it would be beneficial to extend this dialgoue to allow users to set an alt tag. 