Sup. I deal with the problem for three days.
In my project where I use search in model `Record` I've implemented two buttons: "Delete index" and "Refresh index". 
First button is redirecting page to controller `delete_index` where I execute `Record.tire.index.delete`.
Second button is redirecting page to controller `refresh_index` where the index is refreshing via Sidekiq worker, where I execute `Record.import`.
Main problem:
When I press "Delete index" - it works correct;
When I press "Refresh index" - the index is imports correctly but order by date is fully broken.
I've attached some screenshots with the problem.
Screenshot without problem: order is working:
![image](https://cloud.githubusercontent.com/assets/5306311/17556820/79da1ad2-5f1d-11e6-8d2d-35cacc11e27e.png)

Screenshot with problem: order is broken after I pressed "Delete index" and "Refresh index":
![image](https://cloud.githubusercontent.com/assets/5306311/17556870/b16f8838-5f1d-11e6-98cf-0942d26ecbe8.png)

I can fix second case only if I do actions in this sequence:
1. Execute `Record.tire.index.delete`
2. Shutdown RoR server
3. Execute RoR server with `rails s`
4. Execure `Record.import`

Some piece of code:
records_controller.rb:

``` ruby
def refresh_index
  if params[:refresh]
    RecordsImport.perform_async('exec')
    redirect_to "/search"
  end
end
def delete_index
  if params[:delete]
    Record.tire.index.delete
    redirect_to "/search"
  end
end
```

records_import.rb:

``` ruby
class RecordsImport
  include Sidekiq::Worker
  def perform(name)
    if name == 'exec'
      Record.import
    else
      return
    end
  end
end
```

My mapping in `record.rb` model:

``` ruby
tire do
  mapping do
    indexes :id, index: :not_analyzed
    indexes :timestamp, type: 'date', format: 'dd.MM.yyyy HH:mm', include_in_all: false
    indexes :title, analyzer: 'snowball'
  end
end
```

My search query:

``` ruby
@records = Record.search page: params[:page], per_page: 50 do
  query do
    string: "*"
  end
  sort do
    by :timestamp, order: "desc"
  end
end
```

Maybe I'm doing something wrong, but all suggestions welcome. Thanks in advance and sorry for my bad English.

Add the preference feature described here:
http://www.elastic.co/guide/en/elasticsearch/reference/1.4/search-request-preference.html

Note that 2 unit tests fail.

``` bash
bundle exec rake test:unit
```

```
ERROR (0:00:02.419) test_: Collection with ActiveModel::Serializers should be serializable. 
      uninitialized constant ActiveModel::ArraySerializerSupport
    @ test/unit/results_collection_test.rb:402:in `block (3 levels) in <class:ResultsCollectionTest>'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:436:in `instance_exec'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:436:in `block in run_current_setup_blocks'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:434:in `each'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:434:in `run_current_setup_blocks'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:411:in `block in create_test_from_should_hash'
      /var/lib/gems/2.1.0/gems/mocha-0.14.0/lib/mocha/integration/mini_test/version_2112_to_320.rb:40:in `run'

ERROR (0:00:02.442) test_: Item with ActiveModel::Serializers should be serializable. 
      undefined method `attribute' for MyItemSerializer:Class
    @ test/unit/results_item_test.rb:195:in `<class:MyItemSerializer>'
      test/unit/results_item_test.rb:194:in `block (3 levels) in <class:ResultsItemTest>'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:436:in `instance_exec'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:436:in `block in run_current_setup_blocks'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:434:in `each'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:434:in `run_current_setup_blocks'
      /var/lib/gems/2.1.0/gems/shoulda-context-1.2.1/lib/shoulda/context/context.rb:411:in `block in create_test_from_should_hash'
      /var/lib/gems/2.1.0/gems/mocha-0.14.0/lib/mocha/integration/mini_test/version_2112_to_320.rb:40:in `run'
```

Tire API accepts `search_type` option that works nice for the [count search type](https://github.com/karmi/retire/blob/master/test/integration/count_test.rb#L11) but does not look like fitting well for the `scan` search -- which API handles [in a different manner](https://github.com/karmi/retire/blob/master/test/integration/scan_test.rb#L25).

In order to reuse my search classes implemented over the Tire API, I would like to create an Elasticsearch scan query passing by `search_type: scan` with `Tire.search` instead of `Tire.scan`. I am, actually, able to assembly something really close to what I desire with the following code

``` ruby
Tire.search('organization_groups', search_type: 'scan', scroll: '10m') do
  |s| s.query { |q| q.all }
end
```

Major issue seems to be the lack of an `each_document` method on the Tire `Search` class.

Any chances of achieving this behavior with the current API?

Thanks in advance!

Hi,

I have a 'Tweet' model which belongs to a 'Profile' model.
Tweet(:title, :text, :profile_id)
Profile(:name, :visits)

I need to search for tweets which has a profile with specific name such as 'xxx'
The following is my code which does not work:

  mapping do
    indexes :id, index: :not_analyzed
    indexes :profile_id, index: :not_analyzed
    indexes :title, analyzer: 'snowball', boost: 100
    indexes :text, analyzer: 'snowball'
    indexes :created_at, type: 'date', index: :not_analyzed
    indexes :profile do
        indexes :id, index: :not_analyzed
                indexes :name, analyzer: 'snowball'
    end  
  end

  def self.search (q, page) 
    tire.search(load: true, :per_page => 10, :page => page) do
      query { string (q + "*"), default_operator: "AND" } if q.present?
      filter :range, created_at: {lte: Time.zone.now}
      # filter :terms, :profile_id => [1,2,3], :execution => 'or'  ### this works!
      # filter :terms, 'profile.name' => ['Payam','Navid']         ### this does not work!
    end
  end 

Please help me. Thank you in advance.

Tire::Search::SearchRequestFailed: 502 : {"ok":false,"message":"Unable to connect to the server."}

Is there is a limit in, no. of records/ data that could be sent back for a single query


Hi!

I'm trying to boost some of my results based on how old they are.

I have a model called Article, which can be either an article or news. This is specified in the field `article_type`.

Now I want to boost the results which is newer than 2 months AND have `article_type: 'news'` but I have no luck so far.

Any ideas how I can do that with Tire's DSL?

I am using acts_as_tenant for multitenancy and when I tried to index my database following error is 

rake environment tire:import CLASS=Zameen FORCE=true
[IMPORT] Deleting index 'zameens'
[IMPORT] Creating index 'zameens' with mapping:
{"zameen":{"properties":{}}}
[IMPORT] Importing 'Zameen'
rake aborted!
ActsAsTenant::Errors::NoTenantSet: ActsAsTenant::Errors::NoTenantSet

I'm running tire 0.6.2 with a Rails 3.2x app and ES 0.9.0. I'm trying to use the tire:import:model rake task and get an error as if it can't find my ActiveRecord class. 

Command I run: 

`rake tire:import:model CLASS=Garage RAILS_ENV=staging --trace`

Error I get: 

```
** Invoke tire:import:model (first_time)
** Execute tire:import:model
rake aborted!
uninitialized constant Garage
/var/www/smr/shared/bundle/ruby/1.9.1/gems/tire-0.6.2/lib/tire/tasks.rb:95:in `eval'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/tire-0.6.2/lib/tire/tasks.rb:95:in `eval'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/tire-0.6.2/lib/tire/tasks.rb:95:in `block (3 levels) in <top (required)>'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:236:in `call'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:236:in `block in execute'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:231:in `each'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:231:in `execute'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:175:in `block in invoke_with_call_chain'
/usr/lib/ruby/1.9.1/monitor.rb:211:in `mon_synchronize'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:168:in `invoke_with_call_chain'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/task.rb:161:in `invoke'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:149:in `invoke_task'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:106:in `block (2 levels) in top_level'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:106:in `each'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:106:in `block in top_level'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:115:in `run_with_threads'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:100:in `top_level'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:78:in `block in run'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:165:in `standard_exception_handling'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/lib/rake/application.rb:75:in `run'
/var/www/smr/shared/bundle/ruby/1.9.1/gems/rake-10.1.0/bin/rake:33:in `<top (required)>'
/var/www/smr/shared/bundle/ruby/1.9.1/bin/rake:23:in `load'
/var/www/smr/shared/bundle/ruby/1.9.1/bin/rake:23:in `<main>'
Tasks: TOP => tire:import:model
```

Can I use regexp query with tire? (http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl-regexp-query.html)

Should I use Native DSL if tire does not support regexp. 

Best Regards. 
