e: [kapt] An exception occurred: java.lang.NullPointerException

![Screen Shot 2019-04-04 at 14 47 18](https://user-images.githubusercontent.com/30395764/55538408-9729a100-56e8-11e9-9c1e-6ab7e93616c2.png)

unresolved reference error for "ActivityPostListBinding"
I saw some tutorial/example where Coroutine is used instead of  RxJava and/or RxAndroid.
Do you think it could improve the code and make it easier to read and/or implement ?
Reporting one issue while following and implementing your code.
Under package net.gahfy.mvvmposts.base
Class BaseViewModel
Unresolved Item DaggerViewModelInjector
In the code mentioned as net.gahfy.mvvmposts.injection.component.DaggerViewModelInjector
So please let us know if its class or interface.
Hi,

I copied the code you wrote hoping that it would be a good start for me to write good Android applications applying the Android Architecture Components and two of the most used libraries, Dagger and Retrofit, and I am confident your way is a good way because by what I could see from Google's sample codes, they're similar but simpler. I know there isn't a correct way but more efficient ways, and that is why I write this issue hoping you or someone else can help me, and probably other people, with this problem.

While inspecting what I have copied, it came into my mind about a way to refactor certain parts of the code to adapt it to several different view models. Let's start with the [ViewModelInjector.kt](https://github.com/gahfy/MVVMPosts/blob/master/app/src/main/kotlin/net/gahfy/mvvmposts/injection/component/ViewModelInjector.kt#L18) class. The `inject` method expects a [PostListViewModel](https://github.com/gahfy/MVVMPosts/blob/master/app/src/main/kotlin/net/gahfy/mvvmposts/ui/post/PostListViewModel.kt) as an argument, and then, this same method is initiated in [BaseViewModel.kt](https://github.com/gahfy/MVVMPosts/blob/master/app/src/main/kotlin/net/gahfy/mvvmposts/base/BaseViewModel.kt#L16), a class that will probably be extended by many other view model classes.

I wanted to try to refactor it and make it more generic and accept a `T` type as a parameter, but none of what I did help. I no longer have my attempts either. Because the way it is now, the way to support many different view model classes is if I write something like this in `ViewModelInjector.kt`:

```kotlin
fun injectFoo(fooViewModel: FooViewModel)
fun injectBar(barViewModel: BarViewModel)
...
```

and then, in the `BaseViewModel.kt`, do it like this:

```kotlin
init {
    injectFoo()
    injectBar()
}

private fun inject() {
    when (this) {
        is FooViewModel -> injector.injectFoo(this)
        is BarViewModel -> injector.injectBar(this)
    }
}
```

I'm sure there is a way to fix this and write it in a way that is better, is there not?

I hope someone can help me with this! Thank you.

Changed DI mechanism from Dagger2 to Koin