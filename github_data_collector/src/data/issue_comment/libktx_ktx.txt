Hi,

I think that there are touchdown/touchup extensions missing in the actor ktx extensions or maybe that is on purpose.

What I am missing is a way to define a `touchDown` and `touchUp` callback for buttons where I want to react when they get pressed and released.

E.g. when you press the JUMP button the player should jump but when you release it he should cancel the jump and fall down again.

Click and Change did not work for me because click seems to only react when releasing the button and change only reacts on changes which means the first press is a trigger because the button gets "checked", releasing will not trigger anything and the next press will trigger it again.

What worked for me is the touchDown and touchUp events of the ClickListener.

The extension could look like this?

```kotlin
inline fun Actor.onTouch(
        crossinline touchDownListener: () -> Unit,
        crossinline touchUpListener: () -> Unit
    ): ClickListener {
        val clickListener = object : ClickListener() {
            override fun touchDown(event: InputEvent, x: Float, y: Float, pointer: Int, button: Int): Boolean {
                touchDownListener()
                return true
            }

            override fun touchUp(event: InputEvent?, x: Float, y: Float, pointer: Int, button: Int) = touchUpListener()
        }
        this.addListener(clickListener)
        return clickListener
    }
```

It could then be used like this

```kotlin
actor.onTouch(
                touchDownListener = { this.gameEventManager.dispatchInputKeyPressEvent(Key.JUMP) },
                touchUpListener = { this.gameEventManager.dispatchInputKeyReleaseEvent(Key.JUMP) }
            )
```

Would this be useful or do you suggest a different approach for such a use-case?
- [ ] GitHub release.
- [ ] Maven Central upload.
- [ ] Range randoms. #227 
- [x] Tiled extensions. #233 

---

The next release will include a new module - `ktx-tiled` with Tiled API extensions. #233
I make a lot of from-scratch particle effects for my live wallpapers (so I'm not limited by the GDX particle editor's features), and have found Kotlin ranges to be very helpful for very quickly tweaking values. I think this could be helpful anywhere you have something that spawns something in a game, whether it's a particle or enemy. Or for any procedural generator.

So I made some functions that make it even faster to tweak ranges. Operator functions that let you add or multiply constants by the endpoints of the range. Or defining a range by a center and tolerance. And then functions that return a random value from within the range.

For example, here's a simple version of something I've been working on.

```Kotlin
class ParticleLayer (val xStart: ClosedRange<Float>, 
        val yStart: ClosedRange<Float>, 
        val size: ClosedRange<Float> ) {
    private val particles = GdxArray<Particle>()
    //...

    fun update (delta: Float) { /* Updates particles and spawns them when necessary. */ }

    private fun spawnParticle() {
        val particle = particlePool.obtain()
            initialize(xStart.random(), yStart.random(), size.randomGaussian())
        particles.add(particle)
    }
}
```

I have multiple layers of particles, and the ones in the foreground and background are bigger to look out of focus (and move faster but I'm omitting that for the example).

So I first made one particle layer. As I tweak the values, instead of continually typing in new ranges, I can shift them around easily by adding a value:

```Kotlin
val layers = listOf(
    ParticleLayer(xStart = (-0.5f..0.5f) + 0.2f, // My particles needed to have their center shifted to look good
        yStart = 1.2f..2.5f,
        size = 1.3f..1.7f)
)
```

And after getting that looking good, I can copy-paste to get a new layer and then tweak the size range with simple multiplication:

```Kotlin
val layers = listOf(
    ParticleLayer(xStart = (-0.5f..0.5f) + 0.2f,
        yStart = 1.2f..2.5f,
        size = 1.3f..1.7f
    ),
    ParticleLayer(xStart = (-0.5f..0.5f) + 0.2f,
        yStart = 1.2f..2.5f,
        size = (1.3f..1.7f) * 1.3f
    )
)
```
 
Here are the functions I have in my personal library so far:

```Kotlin
fun ClosedRange<Int>.random() = MathUtils.random(endInclusive - start) + start
infix fun Int.amid(tolerance: Int) = (this - tolerance)..(this + tolerance)
fun ClosedRange<Float>.random() = MathUtils.random() * (endInclusive - start) + start
fun ClosedRange<Float>.randomGaussian() = com.cyphercove.audioglow.core.randomGaussian() * (endInclusive - start) + start
fun ClosedRange<Float>.randomTriangular() = MathUtils.randomTriangular(start, endInclusive)
fun ClosedRange<Float>.randomTriangular(normalizedMode: Float) = MathUtils.randomTriangular(start, endInclusive, normalizedMode * (endInclusive - start) + start)
operator fun ClosedRange<Float>.times(multiplier: Float) = (start * multiplier)..(endInclusive * multiplier)
operator fun ClosedRange<Float>.times(multiplier: Int) = (start * multiplier)..(endInclusive * multiplier)
operator fun ClosedRange<Float>.plus(addend: Float) = (start + addend)..(endInclusive + addend)
operator fun ClosedRange<Float>.minus(subtrahend: Float) = (start - subtrahend)..(endInclusive - subtrahend)
infix fun Float.amid(tolerance: Float) = (this - tolerance)..(this + tolerance)
```
As of writing this issue, documentation generation task with Dokka 0.9.18 fails with an error, so Dokka was reverted to 0.9.17. The goal of this task is to update to the latest Dokka version and fix any relevant errors in the documentation.
LibGDX 1.9.10 introduced generic types to `Tree.Node` class.
[Cyberpunk](https://github.com/ImXico/Cyberpunk) is an opinionated Kotlin LibGDX framework that aims to be on a little higher abstraction level than KTX. Some of its utilities are generic enough to make it into KTX. In particular, we should look into:

- [ ] Screenshot utilities.
- [ ] Profiling.
- [ ] Camera utilities.
- [ ] Image and text helpers.

See https://github.com/ImXico/Cyberpunk/issues/14. @ImXico
- [ ] Add `ktx-assets-async` module.
- [ ] `AssetStorage` rewrite.
- [ ] Usage documentation.
- [ ] Restore `ktx-freetype-async`, update to new API.
- [x] Restore `TextAssetLoader`, move to `ktx-assets`.

---

`AssetStorage` was removed during the `ktx-async` overhaul in `1.9.9-b1` due to reliance on old coroutines API and threading issues. The goal of this task is to rewrite `AssetStorage` in a fully thread-safe way, without reliance on specific coroutines dispatchers for asynchronous tasks.
Hi,
great extension to libGDX :) thank you for that.

My question: how can square brackets be used with libKTX ArrayMaps?

what I wanted to to:

```kotlin
val myMap : ArrayMap<String, Label>
myMap = ArrayMap()
myMap["one"] = new Label(...)
```

But there is no Set operator defined. Am I doing something wrong, or isn't it just implemented yet?

Cheers
[Contracts](https://proandroiddev.com/kotlin-contracts-make-great-deals-with-the-compiler-f524e57f11c) might improve usability of DSL APIs. Possible improvements - ensuring that the compiler knows that lambdas in building DSLs are called once:
- [ ] `ktx-scene2d` actors
- [ ] `ktx-style` actor styles
- [ ] `ktx-box2d` bodies, fixtures and joints 
- [ ] `ktx-graphics` `use` utility methods
* [x] `ImmutableVector2`
* [ ] `ImmutableVector3`

---

Hi, 

Thank you very much for providing theses utilities for Kotlin :-)

I would like to propose to introduce some immutable classes for at least vector and colors. (could be called `KVector2` or `ImmutableVector2` for instance)

In order to allow easy usage with LibGDX they could either:
* inherit from their equivalent in LibGDX, deprecate all mutation method and throw if a mutation method is called
* provide adapter like `ImmutableVector2.asVector2()` and `Vector2.toImmutableVector2()`

**Why?**
Even in Java I find error-prone that classes like vector or color are mutable. It is for instance possible to change by mistake `Vector2.ZERO`, and it is a mistake really easy to do. But I think that's even more true in Kotlin where the language provide good support for immutability (`val` is the default, `data class` provides `copy` to easily get a new object, and immutable fields can be smart-casted).

Mutable vectors cannot be safely shared, and one has to do defensive copy each time it gets a vectors, which is cumbersome, unsafe, and inefficient.

In short:
* Even in Java it should have been immutable
* In Kotlin, immutable data classes are even more idiomatic