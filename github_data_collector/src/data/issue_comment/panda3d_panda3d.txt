Tested this with setting the cursor through WindowProperties and through a .prc file. Any non .cur file should default to the origin.
reference:
https://stackoverflow.com/questions/20931528/shader-cant-be-compiled
For some reason, `IOHIDDeviceRegisterRemovalCallback()` no longer works on 10.15+, so an app will crash once trying to poll a device that doesn't exist anymore.  Thankfully, there is the alternative solution of using `IOHIDManagerRegisterDeviceRemovalCallback()`. This just required a little rearranging of the callback code, as well as keeping track of the connection between `IOHIDDeviceRefs` and` IOKitInputDevices` so we actually know which device to remove.
On macOS, if a shader uses the uniform p3d_TextureMatrix defined like this :

    uniform mat4 p3d_TextureMatrix[];

The glgsg aborts due to invalid operation :

    :display:gsg:glgsg(error): at 2299 of panda/src/glstuff/glShaderContext_src.cxx : invalid operation

Here is an apitrace : 
[apitrace.zip](https://github.com/panda3d/panda3d/files/4065931/apitrace.zip)

The error can be seen in frame 24 > render#0 > opaque

When .setCursporFilename("cursorFile.cur") is assigned, the value of the "hotspot" on Windows is carried properly, but in OSX is not updated, leaving the "hotspot" in the top right position.

Have not tested it in Linux.

wp = WindowProperties()
          wp.setCursorFilename("crossHair.cur")
          base.win.requestProperties(wp)

added .cur file with modified hotspot in zip file.

[crossHair.zip](https://github.com/panda3d/panda3d/files/4056632/crossHair.zip)

A texture created using set_clear_color() has no ram image associated with it, but should still be applied on nodes as it contains a uniform color and so is not empty.

See https://github.com/Moguri/panda3d-gltf/issues/47 : a fallback texture, normal-fallback, is applied on the node. When printing out the Attribs it is correctly displayed, but when listing the TextureStages applied on the node it is not present.


Hi,

What follows is a list of what I would consider to be problematic behaviour of MouseWatcherRegions, caused by the current way of handling mouse button presses, as well as a suggestion that could add more user-control over this behaviour.

As MouseWatcherRegions are fundamental components of DirectGui widgets, these are equally affected by these issues. So let's start by examining what happens when one presses a DirectButton and drags the mouse around while holding down the left mouse button (LMB):

1. When the mouse is dragged over other DirectButtons (or MouseWatcherRegions), these do not respond. Only the `enter` and `leave` events of the pressed DirectButton are fired. Whether this is desirable or not depends on the use case (see below), but I think we can agree that for most purposes this is indeed what one would want.
2. While keeping the LMB down, press and release any other mouse button (or roll the mouse wheel); suddenly, all other DirectButtons and MouseWatcherRegions **will** react to mouse-over events, which can easily lead to bugs in the user code. In the case of a DirectButton, this already causes a serious visual bug: even when the LMB is released, the DirectButton will show its `press` state when mousing over it instead of its `rollover` state. Only left-clicking it again can undo this. And when the LMB is released over the DirectButton itself, its associated command is **not** executed in this case. Checking if another button gets pressed (e.g. the RMB, by trying to catch the `mouse3` event) seems to not work either while the mouse is over the DirectButton, so it is hard to handle this manually.
3. When the mouse is moved (not dragged) out of a MouseWatcherRegion across a side that lies on the border of a DisplayRegion, the `leave` event is fired **twice** in succession, which may also cause problems for associated code that should be called only once.

Regarding 1., it may sometimes be useful to have other MouseWatcherRegions respond to mouse-overs while dragging the mouse over them, e.g. in an RPG-like context where one would like to drag&drop an item icon into a grid-like inventory implemented using MouseWatcherRegions. Another example would be a GUI widget such as a list made up of separate "cell" widgets where one could multi-select several entries at once by dragging over them.
For such cases, perhaps it might be possible to set an `always_active` flag (or something to that effect) on a MouseWatcherRegion to prevent it from being deactivated when a mouse button is held down?

Here is some code to reproduce the above issues:

```python
from panda3d.core import *
from direct.showbase.ShowBase import ShowBase
from direct.gui.DirectGui import *


showbase = ShowBase()


def command():

    print("Button pressed")


for i in range(4):
    text = ("Button {}".format(i), "Pressed {}".format(i),
        "Hilited {}".format(i), "Disabled {}".format(i))
    pos = (-.4, 0., .65 - i * .4)
    DirectButton(text=text, text_scale=.1, borderWidth=(.05, .05),
        pos=pos, command=command)


def on_region_enter(*args):

    name = args[0].get_name()

    if name.startswith("region"):
        print("Entered {}".format(name))


def on_region_leave(*args):

    name = args[0].get_name()

    if name.startswith("region"):
        print("Left {}".format(name))


def on_right_down():

    print("Right mouse button pressed")


cm = CardMaker("cell")
r = .2
t = .1
cm.set_frame(-r, r, -t, t)
parent = showbase.render2d
mouse_watcher = showbase.mouseWatcherNode
mouse_watcher.set_enter_pattern("region_enter")
mouse_watcher.set_leave_pattern("region_leave")
showbase.accept("region_enter", on_region_enter)
showbase.accept("region_leave", on_region_leave)
showbase.accept("mouse3", on_right_down)

for i in range(4):
    pos = Point3(.4, 0., .65 - i * .4)
    cell = parent.attach_new_node(cm.generate())
    cell.set_pos(pos)
    region = MouseWatcherRegion("region{}".format(i),
        pos.x - r, pos.x + r, pos.z - t, pos.z + t)
    mouse_watcher.add_region(region)

pos = Point3(-1. + r, 0., 1. - t)
cell = parent.attach_new_node(cm.generate())
cell.set_pos(pos)
region = MouseWatcherRegion("region_topleft",
    -1., -1. + r * 2., 1. - t * 2., 1.)
mouse_watcher.add_region(region)


showbase.run()
```
The white rectangles have associated MouseWatcherRegions to handle mouse-over events.
To reproduce 3., move the mouse over the white rectangle in the top left hand corner of the window and then move it out of the window.

This was tested on Windows.

It would be great if you'd want to look into this, thanks!
Panda3d version: panda3d==1.10.5 (installed with pip3)
OS: openSUSE Tumbleweed linux, 64bit
Python version: 3.7.3

I have installed panda3d with pip, then created simple app from tutorial:
main.py
```python
import os
print(f'Using PRC_DIR {os.environ["PRC_DIR"]}')

from direct.showbase.ShowBase import ShowBase


class MyApp(ShowBase):
    def __init__(self):
        ShowBase.__init__(self)
        self.scene = self.loader.loadModel("models/environment")
        self.scene.reparentTo(self.render)
        self.scene.setScale(0.25, 0.25, 0.25)
        self.scene.setPos(-8, 42, 0)

app = MyApp()
app.run()
```
Then I followed instructions at https://raw.githubusercontent.com/panda3d/panda3d/release/1.10.x/panda/src/doc/howto.use_config.txt and created Debug.prc file in the current directory (same as main.py):
```
notify-level spam
default-directnotify-level spam 
```
Then I launched app with ```PRC_DIR=`pwd` python3 main.py```. But I did not have any spam output, and it looks like my Debug.prc was not picked up by panda3d. The output was:
``` 
$ PRC_DIR=`pwd` python3 main.py
Using PRC_DIR /home/z/pproj/panda_tut2
Known pipe types:
  glxGraphicsPipe
(all display modules loaded.)
```
To check, I tried to manually edit the file `/usr/lib64/python3.7/site-packages/panda3d/etc/Config.prc`, and it did has effect, I got a lot of spam in the console when app is launched (`:pgraph(debug): Destructing 0x56492848f000, cam2dp`, etc).
This suggestion comes from discussion on the forum, starting with [this post](https://discourse.panda3d.org/t/directgui-mouse-wheel-scrolling/25429/5?u=thaumaturge).

Right now, if I'm not much mistaken, DirectGUI widgets either block all input-events, or they block none--and by default "active" widget (i.e. those expected to respond to input) block input-events.

This can be a bit of a problem. For example, imagine a button set in a DirectScrolledFrame. One might want the button to be clickable, and the scrolled-frame to be scrollable via the mouse-wheel. However, since the button blocks events, scrolling won't work when the mouse is over the button.

What I suggest, then, is this: instead of UI widgets blocking events, they optionally _propagate_ them, based on whether they consider the event to have been "handled".

That is, if a widget receives an event, it responds as it normally does or doesn't (e.g. a button pressing in and calling its command-function), and then indicates whether the event has been handled.

Then, if the event _hasn't_ been handled, it's propagated on to the next widget below the current one. (Alternatively, the event could be propagated to the _parent_, instead of the next widget below; I favour the latter, but I'm very open to discussion!)

This would mean that, for example, a button could respond to clicks and prevent them from reaching other widgets, while still allowing scroll-wheel events to pass through.

If it's desired that current behaviour is retained, then this could be done by having widgets default to always responding one way or another, with the option to make them more discerning. (That said, I do question whether retaining the exact current behaviour is desirable in this case, especially as things like preventing clicks from passing through buttons would still be in place.)

All that said, this suggestion is a pretty big change; I'll understand if it's deemed too big--especially if there's thought still to replace DirectGUI one day.
The manylinux wheel of Panda3D contains the static version of libpython, e.g. deploy_libs/libpython3.7m.a in panda3d-1.10.5+opt-cp37-cp37m-manylinux1_x86_64.whl, where macosx version contains deploy_libs/libpython3.7.dylib and win_amd64 contains deploy_libs/python37.dll

This causes problem with CEFPython whose library on Linux, cefpython3.cefpython_py37.so, refers to libpython3.7m.so.1.0 

I detected this while writing a CI workflow for my app that now test the generation of the app binaries and test a headless version of it to check that all the dependencies are working correctly. 

This went under the radar on my hosts as they are all dev machines with Python installed on them and so the missing library was found in the system.