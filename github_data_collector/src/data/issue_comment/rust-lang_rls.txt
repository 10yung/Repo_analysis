See the test case at: https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=f84cfa037c87a81de8f2f518ddd1ee60
On line 29, when invoking a function that is supplied by a blanket trait implementation there is no auto-complete, although go to definition does work.

Environment:
Linux X64 - RHEL 7.7
VSCode version: 1.39.2
RLS extension version: 0.7.0
Rust version: rustc 1.40.0 (73528e339 2019-12-16)

Able to reproduce same behavior with Vim.

If this is a bug that depends on this bug (https://github.com/rust-lang/rls/issues/6) OR (https://github.com/rust-lang/rls-vscode/issues/649), are there any workarounds with the current RLS implementation?
I was recently experimenting with Kakoune using the kak-lsp plugin. When I tried to go to references, it would only bring up an empty buffer. I reported the bug to the plugin (https://github.com/ul/kak-lsp/issues/278) but the maintainer says it's likely something on the RLS side.
Does the current version of rls support the Code Folding part of the LSP protocol?
Removes few old crates from the tree and makes progress towards fixing https://github.com/rust-lang/rls/issues/1571 for good by reducing amount of crates depending on `crossbeam-utils 0.6`.
(similar to https://github.com/rust-lang/rls/issues/674#issuecomment-361060293)
i dont know if this is a duplicate or so, but i tried to search for something similar but didnt find anything

## The Problem

When hovering or just autocompletion, it dosnt show something like `unwrap_or_else` but something like `unwrap_or`, but when i change `pub fn unwrap_or_else<F: FnOnce() -> T>(self, f: F)`(rust source code) to something like `pub fn unwrap_or_else<F: String>(self, f: F)` (removing the `FnOnce() -> T`), it magicly shows autocompletion and hover info

i know for sure that it is not happening on all generics, but only on those who include `FnOnce`
and from what i could test is, when defining the function in the same file it needs to get info from, it just works

## Using

VSCode: 1.41.1
Rust (rls) [rust-lang.rust]: 0.7.0
toolchain: nightly
(project compiled in stable, but shouldnt affect rls autocompletion (compiled in different terminal))
OS: Linux Mint 19.3
config:
```
{
	"rust-client.updateOnStartup": true,
	"rust.unstable_features": true,
	"rust-client.channel": "nightly",
}
```

## usage / reproduction

```rust
fn main() {
 let Some(()).unwrap_ // autocompletion will only show "unwrap_or", "unwrap_none", "unwrap_or_default"
}
```
Howdy! I'm getting a strange error on OpenBSD. I manually built rustup and get this error when rls runs
```
 Process rls stderr finished
  12 error: Unable parse configuration: Provided host 'x86_64-unknown-openbsd' couldn't be converted to
  13 partial triple
  14
```
When I try to cargo install rls from my distro's cargo (since I get the same error with rustc from rustup), I get nothing printed but it returns to stderr (i.e. the program exits as failed with no output).
I like how I can get type information about the variable under cursor with `hover` information, especially when the type is complicated.

As an additional information, could RLS also retrieve the *bytesize* of the variable under cursor? I believe this information is supposed to be known statically and to be directly dependent on the type, so it would not be too complicated. Or am I missing something?

I understand that only the size of data stored on the *stack* can be retrieved this way, but this is fine.
Hello, I'm a maintainer of [ycmd](https://github.com/ycm-core/ycmd). This issue could very well be a problem on ycmd's side, but I need your help to figure this out.

Ycmd issue in question is https://github.com/ycm-core/YouCompleteMe/issues/3478

To explain what is going on, ycmd [enables rls](https://github.com/ycm-core/ycmd/blob/master/build.py#L852), by installing the entire rust toolchain and `rls`, `rust-src` and `rust-analysis` into `ycmd/third_party/rls`. However, it turned out that this doesn't really work. Specifically, `rls`, even when run from `ycmd/third_party/rls/bin/rls`, can't find things like `Vec<T>` to complete.

Additional info: The command line for starting `rls` is literally `/path/to/ycmd/third_party/rls/bin/rls`. The point of installing all components to a `third_party` directory is to allow users to simply execute `./install.py --rust-completer` and be done.

Finally, I have two questions.

1. Where is ycmd going wrong? How can we resolve the issue and keep installing everything into `third_party/`?
2. Do we have the same problem with the `rust-analysis` component and we're just unaware of it?
The `load_lines` method and `load_span` methods were returning incorrect regions. `load_lines` was return one line less and `load_span` was returning one character less.

Now that `load_lines` returns the correct number of lines, I updated `load_line` to use it.
RLS is stuck in the "building" or "build_script_build" phase. There is not generated output, save for this error any time I save a file:

```Error - 1:55:20 AM] Request textDocument/formatting failed.
  Message: Reformat failed to complete successfully
  Code: -32603
```

I tried activate the log file and it's always zero bytes (nothing is written there).

How can I debug this issue? 