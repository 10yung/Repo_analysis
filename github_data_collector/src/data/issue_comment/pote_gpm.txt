This fixes issue #91.

gpm assumes that the source code repository is always located at a specific level, i.e. when downloading package `host/foo/bar` the repo has to be in the `bar` directory. Although this is true for many project (e.g. hosted on github.com), there are exceptions.

Here is an example. I have a `Godeps` file with the following content:
```
cloud.google.com/go/compute/metadata v0.7.0
```

When running `gpm get`, it shows the following output:
```
>> Getting package cloud.google.com/go/compute/metadata
>> Setting cloud.google.com/go/compute/metadata to version v0.7.0
```

But when I switch to the corresponding directory and issue a `git status`, I can see that the repo is on branch `master` (and not on `v0.7.0`).

This is due to the fact that the Git repository is located at `cloud.google.com/go`, i.e. one level above the expected one.

When environment variable GPM_GET_SERIAL is set, dependencies are downloaded sequentially.

This fixes issue #89.

Running `go get` in parallel for packages that depend on each other sometimes(?) leads to an error.

Here is an example. I have a `Godeps` file with the following content:
```
golang.org/x/oauth2 7fdf09982454086d5570c7db3e11f360194830ca
golang.org/x/net/context 242b6b35177ec3909636b6cf6a47e8c2c6324b5d
```

When running `gpm get`, it reports an error:
```
>> Getting package golang.org/x/oauth2
>> Getting package golang.org/x/net/context
# cd /Users/me/tmp/src/golang.org/x/net; git pull --ff-only
From https://go.googlesource.com/net
 * [new branch]      master     -> origin/master
 * [new branch]      release-branch.go1.6 -> origin/release-branch.go1.6
 * [new branch]      release-branch.go1.7 -> origin/release-branch.go1.7
 * [new branch]      release-branch.go1.8 -> origin/release-branch.go1.8
 * [new branch]      release-branch.go1.9 -> origin/release-branch.go1.9
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream-to=origin/<branch> master

package golang.org/x/net/context: exit status 1
>> Failed getting package golang.org/x/oauth2
>> Setting golang.org/x/oauth2 to version 7fdf09982454086d5570c7db3e11f360194830ca
>> Setting golang.org/x/net/context to version 242b6b35177ec3909636b6cf6a47e8c2c6324b5d
```

When issuing the `go get`commands sequentially, no error is reported.

I found `gpm` and wanted to give it a try. It looks like it does not support pinning dependencies based on commits. I have this in my `Godeps` file.
```
github.com/alicebob/miniredis               bb985e34f0942b1d770bf96e87f830cf38804abe
```

This is what I get.
```
# cd /path/to/workspace/src/github.com/alicebob/miniredis; git pull --ff-only
You are not currently on a branch.
Please specify which branch you want to merge with.
See git-pull(1) for details.

    git pull <remote> <branch>

package github.com/alicebob/miniredis: exit status 1
```

Is this intended? Can we make it work? 
We currently use an assert script that somebody wrote and a custom script to execute all tests, it's kind of messy, I'd prefer if we had something more polished, enter [BATS](https://github.com/sstephenson/bats)

I'll do this at some point if I have the time and the drive, if not I welcome anyone who wants to take a crack at doing it! 

We have a case where we need the top-level pkg of a given Go pkg for use in our application and also one of its sub-pkgs b/c it's a CLI. It _seems_ `gpm` produces errors in output because it tries to `git checkout` the sub-pkg even though it's not a submodule but just a sub-directory in the parent pkg.

Fortunately, `gpm` seems to still work as the binary gets installed in `$GOPATH/bin`; however, it'd be nice if we could avoid or suppress errors in output from `gpm` to avoid confusion.

You can see a basic `Godeps` file here along with the errors from running `gpm`: https://gist.github.com/jpfuentes2/ad63ff939a87fdb3d92c

Also, I set `$GOPATH` and `$GOBIN` to a temporary directory for the test above and, again, the binary was installed along w/ the pkg.

Potential workarounds:
- Do not issue vcs checkout commands if it's a sub-pkg _and_ it's not a submodule (or equivalent).
- Add a comment in the version placeholder to designate `no checkout` whereby the vcs will not attempt to checkout the sub-pkg.
- Punt and instruct users to move the sub-pkg to a `Makefile` or other build script using `go get` after a `gpm` run.

I don't know if any of these ideas are good but maybe something sparks.

Something along the lines of `bundle outdated` that ruby has but for go. This would help a lot in terms of keeping up to date with the latest versions when using version constraints in the Godeps file.

If the path to gpm's working directory contains white spaces, I see the following errors:

```
>> Setting github.com/mattn/go-sqlite3 to version 
/usr/local/bin/gpm: line 66: cd: /Users/codewerft/Codewerft/Kunden/03: No such file or directory
/usr/local/bin/gpm: line 66: cd: /Users/codewerft/Codewerft/Kunden/03: No such file or directory
```

The working directory in the case above was `/Users/codewerft/Codewerft/Kunden/03 - XYZ/Entwicklung/reactor.backend`.

Does gpm install a dependence's gpm file? If not, what are your thoughts on this feature?

I realized the other day that if my dependencies also have specific version requirements, i need gpm to satisfy those. I considered writing a plugin for this, but this seems like something that should be core to gpm, in my opinion.

Thoughts?
