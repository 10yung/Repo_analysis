```python
repos = g.search_topics('recipes')
print(len(list(repos)))
for repo in repos:
    print(repo.name)
```

prints

```
80
recipes
franz-recipes
chef-recipes
cooking-recipes
deployer-recipes
...
```

API gets 80 repos. However my browser (https://github.com/topics/recipes) returns 449 public repositories. Any help wld be aprpeciated.
Addresses https://github.com/PyGithub/PyGithub/issues/1335
To transfer repo from one owner to another one needs to call /repos/:owner/:repo/transfer as per https://developer.github.com/v3/repos/#transfer-a-repository . This PR aims to add that endpoint to API.
There is an issue when using create_git_tag_and_release function to create a release in Repository.py.

`   def create_git_tag_and_release(
        self,
        tag,
        tag_message,
        release_name,
        release_message,
        object,
        type,
        tagger=github.GithubObject.NotSet,
        draft=False,
        prerelease=False,
    ):
        self.create_git_tag(tag, tag_message, object, type, tagger)
        return self.create_git_release(
            tag, release_name, release_message, draft, prerelease
        )`

The code cannot create a correct commit id from the created tag. please help to fix it. thanks.
Branch protection for organization repos allow for the inclusion of dismissal restrictions for who should be able to dismiss reviews. To disable this feature, you must pass an empty object when editing branch protection. The current function `edit_protection` in `Branch.py` excludes the field if no users or teams are provided, which is the same as setting both to an empty list. This has the effect of limiting who can dismiss a review to admin users.

Unfortunately, the fix is not as simple as including the field with an empty dict when neither users nor teams are provided, as this causes a validation error when used to edit branch protection for user owned repos.

```
422 {'message': 'Validation Failed', 'errors': ['Only organization repositories can have users and team restrictions'], 'documentation_url': 'https://developer.github.com/v3/repos/branches/#update-branch-protection'} 
```

I am happy to PR a fix, but am unsure what direction the maintainers would like to go.

1. Add org context to the Branch object when calling `get_branch` from a Repository object. This has the benefit of not introducing an API breaking change or additional arguments to `edit_protection`.

2. Add an option to the `edit_protection` function that allows the user to specify whether it is a branch or an org repo. This will require a default that will either need to be defaulted to true or false. Default of user repo would maintain current behavior and leave org repos misconfigured. Default to org repo would cause validation errors for user repos, thus introducing an API breaking change.

3. Something else.

We are getting this error a lot: 

```
GithubException: 403 {u'documentation_url': u'https://developer.github.com/v3/#rate-limiting', u'message': u'API rate limit exceeded for user.'}
```

According to their documentation on https://developer.github.com/v3/#rate-limiting, they send the `X-RateLimit-Reset` header in the response from which we can figure out when to make the api call again. Is it possible to get the value of that header in PyGithub? If not, how much is the minimum time we should wait before making the api call again? 
I want to add a timezone header to the requests going out of PyGithub so GitHub returns datetime values with the correct timezone. I don't see a way to modifying or extending the headers being sent to github.

https://developer.github.com/v3/#using-the-time-zone-header

The paginated list returned from a search_issues() will report a totalCount that maxes out to 1000 when a search query results in more than 1000 items. The totalCount() method in PaginatedList() will get headers and data from result of a requester.requestJsonAndCheck() using the first URL. The logic then tests to see if 'link' is not in headers which in my case there is a 'link' so it falls to the else side and parses the lastUrl line for 'page' which is 1000.

Problem though is that in my search, the original 'data' structure has a valid 'total_count' field of 3041 so I'm not sure why the logic tries to derive something from the lastUrl which is generating an incorrect value?

And if I iterate through the PaginatedList returned I count only 1020 items so I'm not able to iterate through all 3041 items. Note that I put rate limiting code in the iteration loop to sleep checking on get_rate_limit().search.remaining to go nonzero.

Hi
function call 1 and 2 are working fine but 3 failing.
can you please help

1)github_auth.search_commits("author:nvulli")
2)github_auth.search_commits("author-date:<2019-08-26")
3)github_auth.search_commits("author:nvulli+author-date:<2019-08-26")