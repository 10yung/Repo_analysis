Would definitely appreciate a PR that fixes this issue. With a small baby at home, I rarely have time to work on fixes myself anymore, but if you write a PR, I'll work with you to get it merged.

_Originally posted by @mallorypaine in https://github.com/path/FastImageCache/issues/137#issuecomment-231544582_
This is a difficult phase for any OS project. Path has obviously abandoned any work on FastImageCache. @mallorypaine one of/the [original developer](https://github.com/path/FastImageCache/commit/3a86d1725ac4cedd4d5454d9c0a22584018f03e3)   announced in #152 that [he'll continue maintaining FIC](152#issuecomment-332358086) even though he's not associated with Path anymore - @mallorypaine please object, if you changed your mind, while I try to push more work your way :-)

To prevent any further [fragmentation](https://github.com/path/FastImageCache/network) we should try to channel as many issues and PRs towards @mallorypaine's [fork](https://github.com/mallorypaine/FastImageCache). Long term we should try to move the repository entirely.

## The Plan
1. Upvote this issue to gain attention
1. **If you're about to open an issue or PR**, head over to @mallorypaine's [fork](https://github.com/mallorypaine/FastImageCache) to do so
1. Get in touch with GitHub and see if there's a way to transfer the repository
1. Find a way to update the [podspec](https://github.com/CocoaPods/Specs/blob/master/Specs/7/4/a/FastImageCache/1.5.1/FastImageCache.podspec.json)
In Xcode 9, the new main thread checker kept warning me about FastImageCache using UIApplication's isProtectedDataAvailable on a background thread. This should be innocuous, but I think Xcode 9 is just broadly looking at UIKit on background threads.

More consequently, this was preventing me from running unit tests locally on my own project.

The basic change here is to use NSNotificationCenter to watch for notifications when protected data becomes available or unavailable, and maintain that state as a static variable, which the instances can then utilize.
it would be MUCH more performant to use dispatch queues instead of locks. Also super simple to make the switch ;)
Seeing these errors in the console when running `FastImageCache` on iOS 11 using Xcode 9 beta 5:
```
Main Thread Checker: UI API called on a background thread: -[UIApplication isProtectedDataAvailable]
PID: 5517, TID: 94612, Thread name: (none), Queue name: com.path.FastImageCacheQueue, QoS: 0
Backtrace:
4   FastImageCache                      0x0000000115bd9d18 -[FICImageTable canAccessEntryData] + 1336
5   FastImageCache                      0x0000000115bda47e -[FICImageTable _entryDataAtIndex:] + 702
6   FastImageCache                      0x0000000115bd2682 -[FICImageTable setEntryForEntityUUID:sourceImageUUID:imageDrawingBlock:] + 3186
7   FastImageCache                      0x0000000115bf23f1 __69-[FICImageCache _processImage:forEntity:imageTable:completionBlocks:]_block_invoke + 689
8   libclang_rt.asan_iossim_dynamic.dylib 0x000000010f67a412 __wrap_dispatch_async_block_invoke + 290
9   libdispatch.dylib                   0x000000011b5422cf _dispatch_call_block_and_release + 12
10  libdispatch.dylib                   0x000000011b543314 _dispatch_client_callout + 8
11  libdispatch.dylib                   0x000000011b54b7a2 _dispatch_queue_serial_drain + 1162
12  libdispatch.dylib                   0x000000011b54c12a _dispatch_queue_invoke + 340
13  libdispatch.dylib                   0x000000011b54f044 _dispatch_root_queue_drain + 772
14  libdispatch.dylib                   0x000000011b54ece2 _dispatch_worker_thread3 + 132
15  libsystem_pthread.dylib             0x000000011b9b15a2 _pthread_wqthread + 1299
16  libsystem_pthread.dylib             0x000000011b9b107d start_wqthread + 13
2017-08-18 14:26:26.100570-0400 Venmo[5517:94612] [reports] Main Thread Checker: UI API called on a background thread: -[UIApplication isProtectedDataAvailable]
PID: 5517, TID: 94612, Thread name: (none), Queue name: com.path.FastImageCacheQueue, QoS: 0
Backtrace:
4   FastImageCache                      0x0000000115bd9d18 -[FICImageTable canAccessEntryData] + 1336
5   FastImageCache                      0x0000000115bda47e -[FICImageTable _entryDataAtIndex:] + 702
6   FastImageCache                      0x0000000115bd2682 -[FICImageTable setEntryForEntityUUID:sourceImageUUID:imageDrawingBlock:] + 3186
7   FastImageCache                      0x0000000115bf23f1 __69-[FICImageCache _processImage:forEntity:imageTable:completionBlocks:]_block_invoke + 689
8   libclang_rt.asan_iossim_dynamic.dylib 0x000000010f67a412 __wrap_dispatch_async_block_invoke + 290
9   libdispatch.dylib                   0x000000011b5422cf _dispatch_call_block_and_release + 12
10  libdispatch.dylib                   0x000000011b543314 _dispatch_client_callout + 8
11  libdispatch.dylib                   0x000000011b54b7a2 _dispatch_queue_serial_drain + 1162
12  libdispatch.dylib                   0x000000011b54c12a _dispatch_queue_invoke + 340
13  libdispatch.dylib                   0x000000011b54f044 _dispatch_root_queue_drain + 772
14  libdispatch.dylib                   0x000000011b54ece2 _dispatch_worker_thread3 + 132
15  libsystem_pthread.dylib             0x000000011b9b15a2 _pthread_wqthread + 1299
16  libsystem_pthread.dylib             0x000000011b9b107d start_wqthread + 13

```

We're currently pulling in commit `e4b19dfe57c8368b3a730cf98b2d411950c30f18`.

thanks!

Security scan tools are complaining that we should apply appropriate protection mode everytime when we are writing content to the file.
I'm having trouble converting my old source to Swift 3.0 in following area. I've this following usage which was working prior to the version 3.

```
    extension NewManPhoto: FICEntity
    {
        internal var UUID: String!
        {
            if _UUID == nil
            {
                // MD5 hashing is expensive enough that we only want to do it once
                let imageName: String = sourceImageURL.lastPathComponent
                let UUIDBytes: CFUUIDBytes = FICUUIDBytesFromMD5HashOfString(imageName)
                _UUID = FICStringWithUUIDBytes(UUIDBytes)
            }
            
            return _UUID;
        }
    }
```

New XCode starts giving me following error:
**'UUID' has been renamed to 'uuid'**

But when I looked inside the FICEntity file I noticed it had 'UUID' only:
**@property (nonatomic, copy, readonly) NSString *UUID;**

Anyway, after accepting Xcode's auto-fix suggestion it became small-case, but pops another error:
**Objective-C method 'uuid' provided by getter for 'uuid' does not match the requirement's selector ('UUID')**

The code became something like this:

```
    internal var uuid: String!
        @objc(UUID) {
```

But beside it fixed, XCode erupt same error again to the line **Objective-C method 'uuid' provided by getter for 'uuid' does not match the requirement's selector ('UUID')** and the problem continues until the source became looks ugly and non-fixable.

Can you help how to resolve this situation? 
@mallorypaine when will you release the next version? There are some interesting merged and yet unmerged changes that surely some people would like to have in their apps.

We have been using the library for some time, and we occasionally get reports from users where they get stuck in a state where avatars are displayed for incorrect users. The issue is persisted across app and phone restarts as well. AFAIK, we are doing nothing out of the ordinary.
