## 问题描述 (Description)

Python 2.7 尽管4月可能还会有一次安全更新发布，但是现在已经正式停止支持。

是否考虑升级一次大版本，从 `1.X.X` 跳到 `3.X.X`（以前讨论过 2.0 的想法，为避免混淆，大版本直接跳到 3），彻底移除 Python2 相关的兼容代码。

## 坏处
依旧使用 Python2.7 的用户可能无法使用之后的版本

## 好处

* 可以删掉大量兼容性代码
* 使用的一些第三方库不需要考虑 Python2 的兼容性
https://developers.weixin.qq.com/miniprogram/dev/framework/server-ability/backend-api.html
 问题描述 (Description)
WeChatClient传入access_token时会出现错误：

> AttributeError: 'WeChatClient' object has no attribute 'corp_id'

## 配置信息 (Environment/Version)

- OS
Windows 

- Python
3.6

- wechatpy
1.8.3

## 重现步骤 (Reproducing)
client = WeChatClient(corp_id=CORP_ID, secret=SECRET,access_token=ACCESS_TOKEN)

问题出在：父类(**BaseWeChatClient**)中access_token_key的调用早于类(**WeChatClient**)中corp_id的赋值。

下发小程序和公众号统一的服务消息，是不是还没有这接口？

`POST https://api.weixin.qq.com/cgi-bin/message/wxopen/template/uniform_send?access_token=ACCESS_TOKEN`


<!--
请在下方填入问题描述。
更精确的版本信息和重现步骤可以大大加快您问题的解决速度。
 -->

## 问题描述 (Description)

## 配置信息 (Environment/Version)

- OS
<!-- Mac / Windows / Linux / ? -->

- Python
<!-- 2.7 / 3.4 / 3.5 / 3.6 / ? -->

- wechatpy
<!-- 1.4.2 / 1.5.1 / ? -->

## 重现步骤 (Reproducing)


实际返回报文的body为: `OrderedDict([('return_code', 'FAIL'), ('retmsg', '请确认请求参数是否正确sub_mch_id'), ('retcode', '1')])`

wechatpy源码中没有取出retmsg的内容, 导致抛出异常时, 无法给出正确提示, 如下:
```
    def _handle_result(self, res):
        res.encoding = 'utf-8'
        xml = res.text
        logger.debug('Response from WeChat API \n %s', xml)
        try:
            data = xmltodict.parse(xml)['xml']
        except (xmltodict.ParsingInterrupted, ExpatError):
            # 解析 XML 失败
            logger.debug('WeChat payment result xml parsing error', exc_info=True)
            return xml

        return_code = data['return_code']
        return_msg = data.get('return_msg')
        result_code = data.get('result_code')
        errcode = data.get('err_code')
        errmsg = data.get('err_code_des')
        if return_code != 'SUCCESS' or result_code != 'SUCCESS':
            # 返回状态码不为成功
            raise WeChatPayException(
                return_code,
                result_code,
                return_msg,
                errcode,
                errmsg,
                client=self,
                request=res.request,
                response=res
            )
        return data
```
## 问题描述 (Description)
对于统一下单接口,如果传入的时间time_start,time_expire 有时区,且时区非UTC+8时,会被当做UTC+8处理.
https://github.com/jxtech/wechatpy/blob/8d7f9f3ffb1b868d0337d1dc9247fbd15ce51ede/wechatpy/pay/api/order.py#L71

有时我们服务器时间是UTC时间,生成的带时区的datetime timezone也是UTC,建议在此处.astimezone(timezone('Asia/Shanghai')) 一下


## 问题描述 (Description)
企业微信中任务卡片功能自动上报，无法解析消息类型，任务卡片的类型是Event，wechatpy/enterprise/parser.py 中把event类型的定义成了UnknownMessage，wechatpy/enterprise/events.py并没有对应的taskcard_click的处理方式，messages.py中同样也是，如果要加到messages.py去处理，应该要加上其他判断，如message_type == 'event' and event_type != 'taskcard_click'

目前我的临时解决办法是增加判断，然后在messages中添加对应的解析
```python
wechatpy/enterprise/parser.py
if message_type == 'event' and event_type != 'taskcard_click':
        event_type = message['Event'].lower()
        message_class = EVENT_TYPES.get(event_type, UnknownMessage)
else:
        message_class = MESSAGE_TYPES.get(message_type, UnknownMessage)

wechatpy/messages.py

@register_message('event')
class TaskcardMessage(BaseMessage):
    type = 'event'
    do something

wechatpy/enterprise/messages.py
@register_message('event')
class TaskcardMessage(messages.TaskcardMessage):
    do sonmething

```
## 问题描述 (Description)

引述官方说明 

> 什么是冗灾？异地灾备的重要性？
> 当光缆被挖断、机房出现异常，或因不可抗拒原因（如地质灾害）等造成正常路径上业务不可用，通过备份路径和措施来保证业务继续正常进行。

[完整官方通告
](https://pay.weixin.qq.com/wiki/doc/api/micropay_sl.php?chapter=23_6&index=4)

我们的一个备选方案是，在`WeChatPay`上封装一下，覆盖`_request`方法，实现容灾逻辑。
具体做法是，先用`api.mch`发起请求，在遇到`ConnectionError`等传输层问题时，换到`api2.mch`，如果仍然有错误，交给更上层。

在上游提出来，看看有没有更好的方式，同时希望未来上游能把容灾逻辑一起提供。
