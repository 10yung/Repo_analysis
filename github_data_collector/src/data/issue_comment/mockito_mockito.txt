JUnit has two types of test rules: MethodRule and TestRule. The existing
MockitoJUnit rule returns a MockitoRule which extends MethodRule.
However, since this is not a TestRule, some features of JUnit do not
nicely integrate with Mockito. For example, the RuleChain feature of
JUnit only works on TestRules.

Therefore, add a separate entrypoint to MockitoJUnit which returns a
TestRule that can be integrated with RuleChain. It introduces a separate
interface to make this distinction clear. If we would change the
existing MockitoRule to also extend TestRule, the JUnit logic would no
longer run the MethodRule [1] and would thus break existing users.

[1]: https://github.com/junit-team/junit4/blob/2df7e0882128d551565f87f688bbe745d85aacba/src/main/java/org/junit/runners/BlockJUnit4ClassRunner.java#L402
Hi!

I am trying to update a codebase to mockito 3.2.4!

After the update some tests fail with
```
org.mockito.exceptions.misusing.RedundantListenerException: 

Problems adding Mockito listener.
Listener of type 'MismatchReportingTestListener' has already been added and not removed.
It indicates that previous listener was not removed according to the API.
When you add a listener, don't forget to remove the listener afterwards:
  Mockito.framework().removeListener(myListener);
For more information, see the javadoc for RedundantListenerException class.

```

I was able to find out that the tests do not fail if I change the configuration of the `maven-surefire-plugin` to not run test in parallel. 

The codebase uses 
maven-surefire-plugin 2.22.1
maven-compiler-plugin 3.8.0
junit 4.12
java 1.8

I created an example project which reproduces the problem
https://github.com/julius-d/mockito-upgrade-problem
clone it and run `mvn test`
It will fail with `RedundantListenerException`
The tests do nothing special, they only waste time:
```
  @Test
  public void name() {
    IntStream.range(0,  Integer.MAX_VALUE).boxed()
        .forEach(i -> assertEquals(i, i));
  }
```
- [x] The mockito message in the stacktrace have useful information, but it didn't help
 - [x] The problematic code (if that's possible) is copied here;
       Note that some configuration are impossible to mock via Mockito
 - [x] Provide versions (mockito / jdk / os / any other relevant information)
 - [x] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue
       (same as any question on stackoverflow.com)
 - [x] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)



How about we change the main dev branch to "master"?

It will be simpler, more ordinary, easier to type git commands :-)

We can keep release/x.y branches as needed for hotfixes but the main development on master is just simpler.

Thoughts?
Hi guys

I'm encountering a crash when I run `AndroidTest` that contain mocking class cause the ByteBuddy didn't found `javax.tools.ToolProvider`. I tried to reinstall JDK 8 but doesn't work. It seems to be `javax.tools.ToolProvider` not existing in it. 

Could you guys help me please?

Cheer,

Natthawut

## Environment
------------------------------------------------------------
Gradle 5.4.1
------------------------------------------------------------

Build time:   2019-04-26 08:14:42 UTC
Revision:     261d171646b36a6a28d5a19a69676cd098a4c19d

Kotlin:       1.3.21
Groovy:       2.5.4
Ant:          Apache Ant(TM) version 1.9.13 compiled on July 10 2018
JVM:          1.8.0_231 (Oracle Corporation 25.231-b11)
OS:           Mac OS X 10.15.2 x86_64

## Dependencies

```
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:3.2.4'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'org.mockito:mockito-android:3.2.4'
    androidTestImplementation "io.mockk:mockk-android:1.9.3.kotlin12"
```

## Strack trace

```
E/TestRunner: failed: mockFoo(co.sample.mockitoandroid.MockWithMockitoTest)
    ----- begin exception -----
E/TestRunner: java.lang.IllegalStateException: Could not initialize plugin: interface org.mockito.plugins.MockMaker (alternate: null)
        at org.mockito.internal.configuration.plugins.PluginLoader$1.invoke(PluginLoader.java:74)
        at java.lang.reflect.Proxy.invoke(Proxy.java:1006)
        at $Proxy3.isTypeMockable(Unknown Source)
        at org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:29)
        at org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22)
        at org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:241)
        at org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:229)
        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:62)
        at org.mockito.Mockito.mock(Mockito.java:1908)
        at org.mockito.Mockito.mock(Mockito.java:1817)
        at co.sample.mockitoandroid.MockWithMockitoTest.<init>(MockWithMockitoTest.kt:17)
        at java.lang.reflect.Constructor.newInstance0(Native Method)
        at java.lang.reflect.Constructor.newInstance(Constructor.java:343)
        at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)
        at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
        at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
        at androidx.test.ext.junit.runners.AndroidJUnit4.run(AndroidJUnit4.java:104)
        at org.junit.runners.Suite.runChild(Suite.java:128)
        at org.junit.runners.Suite.runChild(Suite.java:27)
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
        at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
        at org.junit.runner.JUnitCore.run(JUnitCore.java:115)
        at androidx.test.internal.runner.TestExecutor.execute(TestExecutor.java:56)
        at androidx.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:392)
        at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:2145)
     Caused by: java.lang.NoClassDefFoundError: Failed resolution of: Ljavax/tools/ToolProvider;
        at org.mockito.internal.creation.bytebuddy.InlineByteBuddyMockMaker.<init>(InlineByteBuddyMockMaker.java:172)
        at java.lang.Class.newInstance(Native Method)
        at org.mockito.internal.configuration.plugins.PluginInitializer.loadImpl(PluginInitializer.java:49)
        at org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:57)
        at org.mockito.internal.configuration.plugins.PluginLoader.loadPlugin(PluginLoader.java:44)
        at org.mockito.internal.configuration.plugins.PluginRegistry.<init>(PluginRegistry.java:22)
        at org.mockito.internal.configuration.plugins.Plugins.<clinit>(Plugins.java:19)
        at org.mockito.internal.configuration.plugins.Plugins.getMockMaker(Plugins.java:35)
        at org.mockito.internal.util.MockUtil.<clinit>(MockUtil.java:24)
        at org.mockito.internal.util.MockUtil.typeMockabilityOf(MockUtil.java:29) 
        at org.mockito.internal.util.MockCreationValidator.validateType(MockCreationValidator.java:22) 
        at org.mockito.internal.creation.MockSettingsImpl.validatedSettings(MockSettingsImpl.java:241) 
        at org.mockito.internal.creation.MockSettingsImpl.build(MockSettingsImpl.java:229) 
        at org.mockito.internal.MockitoCore.mock(MockitoCore.java:62) 
        at org.mockito.Mockito.mock(Mockito.java:1908) 
        at org.mockito.Mockito.mock(Mockito.java:1817) 
        at co.sample.mockitoandroid.MockWithMockitoTest.<init>(MockWithMockitoTest.kt:17) 
        at java.lang.reflect.Constructor.newInstance0(Native Method) 
        at java.lang.reflect.Constructor.newInstance(Constructor.java:343) 
        at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217) 
        at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266) 
        at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12) 
        at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263) 
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78) 
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57) 
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 
        at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 
        at androidx.test.ext.junit.runners.AndroidJUnit4.run(AndroidJUnit4.java:104) 
        at org.junit.runners.Suite.runChild(Suite.java:128) 
        at org.junit.runners.Suite.runChild(Suite.java:27) 
        at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290) 
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71) 
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288) 
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58) 
        at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268) 
        at org.junit.runners.ParentRunner.run(ParentRunner.java:363) 
        at org.junit.runner.JUnitCore.run(JUnitCore.java:137) 
        at org.junit.runner.JUnitCore.run(JUnitCore.java:115) 
        at androidx.test.internal.runner.TestExecutor.execute(TestExecutor.java:56) 
        at androidx.test.runner.AndroidJUnitRunner.onStart(AndroidJUnitRunner.java:392) 
        at android.app.Instrumentation$InstrumentationThread.run(Instrumentation.java:2145) 
     Caused by: java.lang.ClassNotFoundException: Didn't find class "javax.tools.ToolProvider" on path: DexPathList[[zip file "/system/framework/android.test.runner.jar", zip file "/system/framework/android.test.mock.jar", zip file "/data/app/co.sample.mockitoandroid.test-ZJFawUg-
    ----- end exception -----
```
<img width="968" alt="Screen Shot 2563-01-07 at 12 45 26" src="https://user-images.githubusercontent.com/2638321/71871412-a93ee100-314b-11ea-9815-31a5d95056d4.png">


[MockitoAndroid.zip](https://github.com/mockito/mockito/files/4029049/MockitoAndroid.zip)






I have a test class with 2 tests (written in java). The tests are trying to verify the behaviour of the subject (written in kotlin) by spying on it.

Expected behaviour:
tests pass because the expected method call is made.

Actual behaviour:
The first test passes, and the second (identical) test receives an UnfinishedVerificationException

Compilable example here:
https://github.com/MFAshby/spying-problem-sample

Problematic code: 
SomeClass.kt:
```
package org.example

open class SomeClass {
    fun doThing1() {
        doThing2()
    }

    fun doThing2() {
        println("Hey")
    }
}
```

SpyingProblemTest.java:
```
package org.example;


import org.junit.Test;

import static org.mockito.Mockito.*;

public class SpyingProblemTest {
    private SomeClass underTest = spy(new SomeClass());

    @Test
    public void cantVerifySpies() {

        // WHEN
        underTest.doThing1();

        // THEN
        verify(underTest, times(1)).doThing2();
    }

    @Test
    public void cantVerifySpies2() {

        // WHEN
        underTest.doThing1();

        // THEN
        verify(underTest, times(1)).doThing2();
    }
}
```

Test output: 
```
Hey
Hey

org.mockito.exceptions.misusing.UnfinishedVerificationException: 
Missing method call for verify(mock) here:
-> at org.example.SpyingProblemTest.cantVerifySpies(SpyingProblemTest.java:18)

Example of correct verification:
    verify(mock).doSomething()

Also, this error might show up because you verify either of: final/private/equals()/hashCode() methods.
Those methods *cannot* be stubbed/verified.
Mocking methods declared on non-public parent classes is not supported.


	at org.example.SpyingProblemTest.<init>(SpyingProblemTest.java:9)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
	at java.lang.reflect.Constructor.newInstance(Constructor.java:423)
	at org.junit.runners.BlockJUnit4ClassRunner.createTest(BlockJUnit4ClassRunner.java:217)
	at org.junit.runners.BlockJUnit4ClassRunner$1.runReflectiveCall(BlockJUnit4ClassRunner.java:266)
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
	at org.junit.runners.BlockJUnit4ClassRunner.methodBlock(BlockJUnit4ClassRunner.java:263)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
	at org.junit.runner.JUnitCore.run(JUnitCore.java:137)
	at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)
	at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
	at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
	at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:58)


Process finished with exit code 255
```

I originally logged this with [mockito-kotlin](https://github.com/nhaarman/mockito-kotlin/issues/369) but I subsequently reproduced the issue without that library, so I think the problem is in mockito.

Interesting version numbers: 
```
<kotlin.version>1.3.61</kotlin.version>
<junit.version>4.12</junit.version>
<mockito-core.version>3.0.0</mockito-core.version>
```
Mocking types that users not own [1] or are severely complicating test
logic [2] leads to brittle or wrong tests. In particular, the
StackOverflow answer is wrong, as the contract of java.util.Map is
violated. When a new key is added to the Map, the stubbed return would be wrong.
In Google we have used the DoNotMock annotation via ErrorProne [3]
to annotate these types, as well as an internal list of types that can't
be mocked (this includes several java.util types). We are using a custom
Mockmaker to enforce this on run-time.

Based on our successful experience with DoNotMock (we have seen a large
reduction in bad/broken tests for types involved), we are proposing to
open source this into Mockito itself.

The DoNotMock annotation can be added to any type, e.g. classes and
interfaces. If, in the type hierarchy of the class-to-be-mocked, there
is a type that is annotated with DoNotMock, Mockito will throw a
DoNotMockException.

This would help preventing issues such as #1827 and #1734 which is
in-line with the guidance on our wiki [1]. A follow-up change would
allow us to define external types (like the java.util types) that can't
be mocked. (We can't add the annotation to the types, as they live in the
JDK instead.)

[1]: https://github.com/mockito/mockito/wiki/How-to-write-good-tests#dont-mock-a-type-you-dont-own
[2]: https://stackoverflow.com/a/15820143
[3]: https://errorprone.info/api/latest/com/google/errorprone/annotations/DoNotMock.html
> Hey,
> 

my question is when i run all tests with idea, it will occurs random wrong, but when i insert code in 
tearDown function, `
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }`
all tests will pass! I don't know why, could anyone can help me explain it?

check that

 - [ ] The mockito message in the stacktrace have useful information, but it didn't help
 - [ ] The problematic code (if that's possible) is copied here;
       Note that some configuration are impossible to mock via Mockito
 - [ ] Provide versions (mockito / jdk / os / any other relevant information)
 - [ ] Provide a [Short, Self Contained, Correct (Compilable), Example](http://sscce.org) of the issue
       (same as any question on stackoverflow.com)
 - [ ] Read the [contributing guide](https://github.com/mockito/mockito/blob/release/3.x/.github/CONTRIBUTING.md)



Currently the project is tested with the following JDKs:
* 8
* 9
* 10
* 11

I suggest to add a job to test with the latest release, which is 13 at the moment, and move it as the next version is released, to ensure that Mockito is compatible with the latest JDK.

Don't know if it makes sense to create separate issues, but it could also be considered to:
* Test on early-access builds, to know if Mockito is compatible with _upcoming_ releases (likely, allowing failures)
* Drop jobs for 9, and 10 as these versions are not supported (to the best of my knowledge, there are no updates in the OpenJDK upstream and no updated builds either by Oracle, or AdoptOpenJDK, or other providers)

Related: #1827 

I tried to test a template method which invokes two hook methods. The template method is declared `final`. The whole test class is defined in package `mockito`, i.e. stored in the folder `src/main/java/mockito`:

	package mockito;

	public abstract class AbstractBaseClass {

		protected abstract void hook1();
		protected abstract void hook2();

		public final void templateMethod() {
			hook1();
			hook2();
		}
	}

The test class is stored in folder `src/test/java/mockito`

	package mockito;

	import static org.mockito.Mockito.mock;
	import static org.mockito.Mockito.verify;
	import static org.mockito.Mockito.verifyNoMoreInteractions;

	import org.junit.jupiter.api.Test;

	public class TemplateTest {

		@Test
		public void testTemplate() {
			final var method = mock(AbstractBaseClass.class);
			method.templateMethod();
			verify(method).templateMethod();
			verifyNoMoreInteractions(method);
		}

	}

If the test is executed, then the check `verifyNoMoreInteractions(method);` will report unverified invocations.

The test runs without problem if
- if method `templateMethod` were not declared `final`
- if method `templateMethod` only invokes `hook1` or `hook2`

This is my Gradle file (I use version 3.1.0 of mockito-core):

	plugins {
		id 'java'
	}

	repositories {
		jcenter()
	}

	sourceCompatibility = 11
	targetCompatibility = 11
	compileJava.options.encoding = 'UTF-8'
	compileTestJava.options.encoding = 'UTF-8'

	dependencies {
		testImplementation 'org.junit.jupiter:junit-jupiter:5.5.2'
		testImplementation 'org.mockito:mockito-core:3.1.0'
	}

	test {
		useJUnitPlatform()
	}

If I run the test (from within Eclipse) I see the following error:

	org.mockito.exceptions.verification.NoInteractionsWanted: 
	No interactions wanted here:
	-> at mockito.TemplateTest.testTemplate(TemplateTest.java:16)
	But found this interaction on mock 'abstractBaseClass':
	-> at mockito.AbstractBaseClass.templateMethod(AbstractBaseClass.java:10)
	***
	For your reference, here is the list of all invocations ([?] - means unverified).
	1. -> at mockito.AbstractBaseClass.templateMethod(AbstractBaseClass.java:9)
	2. [?]-> at mockito.AbstractBaseClass.templateMethod(AbstractBaseClass.java:10)
	3. [?]-> at mockito.AbstractBaseClass.templateMethod(AbstractBaseClass.java:10)

		at mockito.TemplateTest.testTemplate(TemplateTest.java:16)
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
		at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
		at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
		at java.base/java.lang.reflect.Method.invoke(Method.java:566)
		at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)
		at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)
		at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:132)
		at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:124)
		at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:74)
		at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
		at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)
		at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:35)
		at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)
		at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)
		at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)
		at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)
		at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:69)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
		at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
		at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
		at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
		at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
		at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
		at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
		at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
		at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
		at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)
		at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)
		at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)
		at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)
		at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)
		at org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)
		at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)
		at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)
		at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:137)
		at org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:89)
		at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
		at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)
		at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)
		at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)
		at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)

The same error is shown if the test is executed with gradle

	% gradle test

	> Task :test FAILED

	mockito.TemplateTest > testTemplate() FAILED
		org.mockito.exceptions.verification.NoInteractionsWanted at TemplateTest.java:16

	1 test completed, 1 failed

	FAILURE: Build failed with an exception.

	* What went wrong:
	Execution failed for task ':test'.
	> There were failing tests. See the report at: file:///mockito/build/reports/tests/test/index.html

	* Try:
	Run with --stacktrace option to get the stack trace. Run with --info or --debug
	option to get more log output. Run with --scan to get full insights.

	* Get more help at https://help.gradle.org

	BUILD FAILED in 2s
	3 actionable tasks: 1 executed, 2 up-to-date

	
Recently I'm upgrading Mockito from 1.10 to 2.25.

There's a failure test case (which was good in version 1.10) that caused by OutOfMemory(Xmx1024m) when it runs a big loop(times > 170k).

I've checked the dump file and found too many StackTraceElement instances there.
Also noticed that for any mock object, it has a property chain of

> mockObj.mockitoInterceptor.handler.mockHandler.delegate.invocationContainer.registeredInvocations.invocations  // a LinkedList which will increase after each loop

And there's a StackTraceElement here
> invocations[n].location.stackTraceHolder

I know there's a similar property chain in Mockito 1.10.
Not sure why it goes OOM after the upgrade(looks like a memory leak).
Please verify this. Thanks!


