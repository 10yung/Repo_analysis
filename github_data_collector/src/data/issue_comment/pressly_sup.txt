Since golang/go#19767 SSH library requires this field on each connection.

Currently all new installations of sup via `go get` doesn't work at all.
This commit fixes it.
This PR introduces error messages to clarify some regular issues I encounter:

- Sup always tries to connect to a SSH_AUTH_SOCK even if one is not defined
- Sup silently continues if a defined SSH_AUTH_SOCK is unreachable
- Sup doesn't report any permissions issues preventing keys from being read
- Sup can't currently handle passphrase-encrypted keys but produces no warning about this

Dependencies needed to be updated to accomplish this last task, and a small change was required to maintain the existing (lack of) SSH hostname check behavior.
Add support for a username + `@` prefix in Supfile host entries. E.g.:

```yaml
networks:
  staging:
    hosts:
      - user@host.tld
```

This was possible before, but buggy. The following bugs are fixed by this PR:

  - adding a username to a Supfile host prevents that host matching any configured `Host` section in `~/.ssh/config`
  - `~/.ssh/config` usernames override the username set in the Supfile
Good day! In new Go versions >= 1.13 ssh.ClientConfig needs to initialise HostKeyCallback. Thank you
- A need for me to use sup in the CI like Jenkins and it's not a good idea to set the ssh agent every time when the job is executed. The current code only read the identity file which name is  id_*. Why not make it to be definable ?

- Error when parsing the identity file in the openssh private key format. This can be solved by updating the version of crypto/ssh package.

The related PR https://github.com/pressly/sup/pull/166
Changes:
1. enable network user and identity_file settings in yaml file.
2. provide an env variable [NETWORK_IDENTITY_FILE] to override the yaml identity_file setting in some use case like CI.
3. use go.mod to manage the dependance.
4. update crypto package to enable the openssh type key file parsing.
Let's say I have the following in my sup file
```
  production:
    hosts:
      - root@172.106.9.243  # 2tb ashburn
```

If I run `sup --only 172.106.9.243 production date', then a match occurs

If I run `sup --only ashburn production date', then a match WILL NOT occur

How do the maintainers feel about a PR to change 'only' so the comments can be matched against?




I'm having issues running Docker containers interactively on Windows using bash.
Here's the output when I run my sup command:
```
2019/06/14 12:57:01 Running task docker run -it --env-file=.env $NAME ./test.py
the input device is not a TTY.  If you are using mintty, try prefixing the command with 'winpty'
exit status 1

```
**new feature - download files from remote to local**

1. added download operation;

2. refactored duplicated code block (adding task to tasks) into a method

sample Supfile
```
commands:
    downloadlogs:
        download:
          - src_folder: /var/log/mylog/
            src: $SUP_HOST.log
            dst: /tmp/
```
Also modify ssh.go to include:

    config.HostKeyCallback = ssh.InsecureIgnoreHostKey()

We should review whether this is ok, or whether there's
a better callback function to use here.

Updating the vendor package solved my issue with ssh-agent
and allowed me to connect to a remote host even if I have
several keys registered with the agent.

Without this patch I have to clear my ssh-agent identity list
each time I use sup.

Fixes #158