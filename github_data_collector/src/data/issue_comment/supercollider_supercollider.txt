<!-- Please see CONTRIBUTING.md for guidelines. -->

## Purpose and Motivation

Add listing devices with PortAudio backend (by default on Windows). With this PR following commands will work on Windows:
```supercollider
ServerOptions.inDevices;
ServerOptions.outDevices;
ServerOptions.devices;
```

Fixes #1557.

RE #1557 - the issue mentions listing devices not working on Linux as well, but since we use JACK on Linux there's [no point implementing listing devices](https://github.com/supercollider/supercollider/issues/1557#issuecomment-114677077). (Maybe at some point we could consider implementing available JACK server names... but this PR is really for Windows users and PortAudio).

## Types of changes

<!-- Delete lines that don't apply -->

- Documentation
- New feature

## To-do list

<!-- Complete an item by checking it: [x]. Add new entries to track your progress -->

- [x] Code is tested
- [ ] All tests are passing
  - there are no tests
- [x] Updated documentation
- [x] This PR is ready for review

<!-- Please see CONTRIBUTING.md for guidelines. -->

## Purpose and Motivation

This fixes #4735 by refactoring embedInStream. At the same time, it introduces a clearer interface for overwriting key value pairs.

<!-- If this fixes an open issue, link to it by writing "Fixes #555." -->

## Types of changes

<!-- Delete lines that don't apply -->

- Documentation
- Bug fix
- New feature

There is a potential for breaking code that should be discussed here. This change makes sure that also if nothing is passed in, the embedded event is copied. Something that relies on `event.embedInStream(nil) === event` would break.

The reson for ths change is uniformity and reliability. Note that `event.embedInStream(x) !== event` is currently always true for any x that is an event, in particular this is done when playing event patterns like Pbind.

It would be easy to change this, so that `nil` would not copy the event.

## To-do list

<!-- Complete an item by checking it: [x]. Add new entries to track your progress -->

- [x] Code is tested
- [x] All tests are passing
- [x] Updated documentation
- [x] This PR is ready for review

<!-- Please see CONTRIBUTING.md for guidelines. -->

Discussion: https://www.listarc.bham.ac.uk/lists/sc-dev/msg00014.html

## Environment

* SuperCollider version:3.10.4-rc1

## Steps to reproduce

```supercollider
p = Prand([(a: 1), (a: 2)], inf).asStream;

p.next;  // ok
p.next(());  // ok
p.next(0);  // Message 'putAll' not understood.

```

## Expected vs. actual behavior

we'd expect `p.next(0)` to just return the event.

<!-- Please see CONTRIBUTING.md for guidelines. -->

## Purpose and Motivation

<!-- If this fixes an open issue, link to it by writing "Fixes #555." -->
A number of examples in the `Image` helpfile did not run, due to using some obsolete methods (`Integer .fromRGBA`, `Array .asRGBA`, `Integer .red` etc.) This corrects the examples so they at least run.

Some examples are a little awkward now, as `Color` returns values `0.0 - 1.0`, while the examples are generally using 8-bit integers. I'm open to suggestions if more changes should be made.

## Types of changes

<!-- Delete lines that don't apply -->

- Documentation

## To-do list

<!-- Complete an item by checking it: [x]. Add new entries to track your progress -->

- [x] Code is tested
- [x] Updated documentation
- [x] This PR is ready for review

<!-- Please see CONTRIBUTING.md for guidelines. -->

## Environment

* SuperCollider version: dev
* Operating system: macOS 13.13
* Other details (Qt version, audio driver, etc.):

## Steps to reproduce

```supercollider
s.options.useSystemClock; //get default value
// -> false
```

## Expected vs. actual behavior

Scsynth always uses system clock for [scheduling](http://doc.sccode.org/Classes/ServerOptions.html#-useSystemClock). Supernova uses sample clock by default. As supernova did not originally allow for using system clock, the default value to use sample clock reflects its original behavior.

I think it would be better if the default settings matched scsynth and supernova as close as possible, what do you think?

I'm happy to make a PR if there's a consensus this is worth changing.



<!-- Paste error messages in entirety. Use gist if very long. -->
<!-- If SC crashed, see CONTRIBUTING.md for how to make a crash report. -->

## Environment

* SuperCollider version: 3.10.3
* Operating system: Any

## Steps to reproduce

```supercollider
{ Latch.ar([0.2, DC.ar(0.2)], Impulse.ar(2500)) }.plot;

// or
{ Latch.ar([DC.kr(0.2), DC.ar(0.2)], Impulse.ar(2500)) }.plot;
```

## Expected vs. actual behavior

Latch.ar expects an audio rate signal input, but it doesn't enforce it by `checkInputs { ^this.checkSameRateAsFirstInput }`. So the actual behavior is that the plotted left channel may include garbage data (because the signal input's wire buffer is not being filled by a scalar or control rate input).

Expected: `Latch.ar(non_ar_input)` should fail with "ERROR: Latch first input is not audio rate."

There are probably other UGens that should perform this check, but don't. Fixing it for Latch is easy, but I think it's worth skimming through to look for other cases.
## Environment

* SuperCollider version: 3.10.3
* Operating system: Windows 10
* Other details (Qt version, audio driver, etc.): Dell XPS 9570

## Steps to reproduce
When the keyboard cursor is idle and you type anything the mouse cursor arrow gets degraded. It comes back to the normal error when you move the mouse once again. 

I am not sure if it is a QT problem, because Windows 10 on Dell XPS 9570 is presenting several resolution scaling issues...


<!-- Please see CONTRIBUTING.md for guidelines. -->

## Purpose and Motivation

Improve `MIDIOut` jitter by using logical time to schedule MIDI events.

<!-- If this fixes an open issue, link to it by writing "Fixes #555." -->

## Types of changes

<!-- Delete lines that don't apply -->

- New feature
  - really a performance improvement, doesn't change any functionality

## To-do list

<!-- Complete an item by checking it: [x]. Add new entries to track your progress -->

- [x] Code is tested
- [x] All tests are passing
- [ ] Updated documentation
- [ ] This PR is ready for review

Caveats:
- this improvement only targets CoreMIDI on OSX. Since it doesn't harm the other implementations (IOS, PortMidi) it is conceivable that this change can be it's own PR.
- Tested on my machine with noticable, if subjective, improvement in scheduling reliability. 
<!-- Please see CONTRIBUTING.md for guidelines. -->

## Motivation
More documentation is better than less. The `copymethod::` tag is very useful and I think underutilized. However, it will copy all modal tags within that method and they can't be modified in the location they're copied to. 

## Description of Proposed Feature
It would be great to be able to copy a method, then overwrite some of the tags in the new location, for context/class-specific information. For example, many methods in `SimpleNumber` can be used on Integers, Floats, Arrays, UGens, etc. The `discussion::` tag within the method is often a place for information and examples specific to the class's use of the method. So while method descriptions and arguments are typically the same and make `copymethod::` a convenient feature, modifying some sections is sometimes useful.

If this feature were added, I think authors would be motivated to copy method docs into more classes, so that the entries show up in more classes (as opposed to having so many undocumented methods) and specifically on a class that the user is concerned with at that moment (e.g. as opposed to having to look at method docs in `AbstractFunction`, when I'm actually using that method on an `Array`).

A more detailed example can be seen in [this PR](https://github.com/supercollider-quarks/MathLib/pull/29).

## Plan for Implementation
I'll update if I get a chance to look into how help docs are rendered...

<!-- Who will implement this? How long will it take? -->

<!-- Please see CONTRIBUTING.md for guidelines. -->

## Motivation

Some editors automatically reload a file if it has been changed by other application. Currently IDE always asks whether to reload the file, discard changes or close it. In some workflows it would be useful to disable that dialog and silently reload the file in the IDE.

## Description of Proposed Feature

Add option in the IDE preferences to silently reload files which contents were changed by another application (unless the file has unsaved changes in the IDE)

## Plan for Implementation

<!-- Who will implement this? How long will it take? -->

No plan yet.
