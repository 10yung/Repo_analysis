### Description
This is the same as #29 but for the GetSigniature extension method.

```csharp
class A
{
    class B<D>
    {
        class C<E> {  }
    }
}

typeof(A.B<int>.C<string>).GetSigniature();
typeof(A.B<>.C<>).GetSigniature();
```
It either throws an `InvalidOperationException` or returns too many generics for the nested generic signiature.
## Description
Just FYI your "Type.GetDeclaration()" extension fails for nested generic types. Example:

```csharp
class A
{
    class B<D>
    {
        class C<E> {  }
    }
}

typeof(A.B<int>.C<string>).GetDeclaration();
```

It currently throws an `InvalidOperationException`.

I'm not sure what you would want to do in these cases since it is a nested type and the declaration requires the parent type as well. In my opinion it should probably return the declaration for only that nested class (and not the parents)... But that is up to you of course.

At a minimum you should probably throw a custom `ArgumentException` with a custom message.

If you remove types:
```csharp
typeof(A.B<>.C<>).GetDeclaration()
```
It returns
```csharp
"C<D, E>"
```
And that is definitely incorrect.
Made a slight update to the Regex Pattern to conform more to the rules of [RFC 5322](https://tools.ietf.org/html/rfc5322) which obsoletes [RFC 2822](https://tools.ietf.org/html/rfc2822).

I ended up updating the regex pattern because the built in .NET `MailAddressParser` conforms to RC2822 and did not want to re-implement to conform to RC5322. The supplied regex pattern should match ~99% of valid emails.

More tests have been implemented.

## Old regex pattern:

```
--- Valid Email List ---
True : email@example.com
True : firstname.lastname@example.com
True : email@subdomain.example.com
False : firstname+lastname@example.com
True : email@123.123.123.123
True : email@[123.123.123.123]
True : 1234567890@example.com
True : email@example-one.com
True : _______@example.com
True : email@example.name
True : email@example.museum
True : email@example.co.jp
True : firstname-lastname@example.com

--- Invalid Email List ---
False : plainaddress
False : #@%^%#$@#$@#.com
False : @example.com
False : Joe Smith <email@example.com>
False : email.example.com
False : email@example@example.com
True : .email@example.com
True : email.@example.com
True : email..email@example.com
False : email@example.com (Joe Smith)
False : email@example
True : email@-example.com
False : email@example..com
True : Abc..123@example.com
```

## New regex pattern:

```
--- Valid Email List ---
True : email@example.com
True : firstname.lastname@example.com
True : email@subdomain.example.com
True : firstname+lastname@example.com
True : email@123.123.123.123
True : email@[123.123.123.123]
True : 1234567890@example.com
True : email@example-one.com
True : _______@example.com
True : email@example.name
True : email@example.museum
True : email@example.co.jp
True : firstname-lastname@example.com

--- Invalid Email List ---
False : plainaddress
False : #@%^%#$@#$@#.com
False : @example.com
False : Joe Smith <email@example.com>
False : email.example.com
False : email@example@example.com
False : .email@example.com
False : email.@example.com
False : email..email@example.com
False : email@example.com (Joe Smith)
False : email@example
False : email@-example.com
False : email@example..com
False : Abc..123@example.com
```

For curiosities sake;

## `MailAddress` constructor try/catch:

```
--- Valid Email List ---
True : email@example.com
True : firstname.lastname@example.com
True : email@subdomain.example.com
True : firstname+lastname@example.com
True : email@123.123.123.123
True : email@[123.123.123.123]
True : 1234567890@example.com
True : email@example-one.com
True : _______@example.com
True : email@example.name
True : email@example.museum
True : email@example.co.jp
True : firstname-lastname@example.com

--- Invalid Email List ---
False : plainaddress
False : #@%^%#$@#$@#.com
False : @example.com
True: Joe Smith <email@example.com>
False : email.example.com
False : email@example@example.com
False : .email@example.com
True : email.@example.com
True : email..email@example.com
True : email@example.com (Joe Smith)
True : email@example
True : email@-example.com
True : email@example..com
True : Abc..123@example.com
```

Fixes #27 

String extension method .IsValidEmail() is incorrectly reporting e-mails such as

username+something@domain.com 

as invalid.   This is a valid RFC e-mail address, and one recommended by Google to alias existing inboxes.

### Description

```cs
    /// <summary>
    /// Filters a sequence of values based on a predicate if the judgement is matched.
    /// </summary>
    /// <typeparam name="TSource">The type of the elements of source.</typeparam>
    /// <param name="source">An <see cref="IQueryable{T}"/> to filter.</param>
    /// <param name="judgement">The judgement to decide whether the filter should take affect.</param>
    /// <param name="predicate">A function to test each element for a condition.</param>
    /// <returns>
    /// An <see cref="IQueryable{T}"/> that contains elements from the input sequence that satisfy the condition
    /// specified by predicate.
    /// </returns>
    public static IQueryable<TSource> WhereIf<TSource>(this IQueryable<TSource> source, bool judgement, Expression<Func<TSource, bool>> predicate)
    {
        if (!judgement)
        {
            return source;
        }

        return source.Where(predicate);
    }
```
Currently the `DateTimeOffset` extension method has the unexpected behavior of changing the offset to match that of the current system timezone and does not just set the time as suggested by the name.

This change copies the offset to the new `DateTimeOffset`
Default value processing when database is not returned
This issue is a proposal to add `SplitOnChunkSize()` to FileInfo that would split a file into multiple files and return an array of the newly created files. The challenge with this one will be handling line breaks if the `breakOnNewlines` is true and also taking into account large files means buffering a chunk of data at a time so as not to overload system resources.

```
/// <summary>
/// Splits a file into multiple files based on the specified chunk size of each file.
/// </summary>
/// <param name="file">The file.</param>
/// <param name="chunkSize">The maximum number of bytes to store in each file.
/// If a chunk size is not provided, files will be split into 1 MB chunks by default.
/// The breakOnNewlines parameter can slightly affect the size of each file.</param>
/// <param name="targetPath">The destination where the split files will be saved.</param>
/// <param name="deleteAfterSplit">if set to <c>true</c>, the original file is deleted after creating the newly split files.</param>
/// <param name="breakOnNewlines">if set to <c>true</c> break the file on the next newline once the chunk size limit is reached.</param>
/// <returns>
/// An array of references to the split files.
/// </returns>
/// <exception cref="ArgumentNullException">file</exception>
/// <exception cref="ArgumentOutOfRangeException">chunkSize - The chunk size must be larger than 0 bytes.</exception>
public static FileInfo[] SplitOnChunkSize(
	this FileInfo file,
	int chunkSize = 1000000,
	DirectoryInfo targetPath = null,
	bool deleteAfterSplit = false,
	bool breakOnNewlines = true
	)
{
	if (file == null)
		throw new ArgumentNullException(nameof(file));

	if (chunkSize < 1)
		throw new ArgumentOutOfRangeException(nameof(chunkSize), chunkSize,
			"The chunk size must be larger than 0 bytes.");

	if (file.Length <= chunkSize)
		return new[] {file};

	var buffer = new byte[chunkSize];
	var extraBuffer = new List<byte>();
	targetPath = targetPath ?? file.Directory;
	var chunkedFiles = new List<FileInfo>((int)Math.Abs(file.Length / chunkSize) + 1);

	using (var input = file.OpenRead())
	{
		var index = 1;

		while (input.Position < input.Length)
		{
			var chunkFileName = new FileInfo(Path.Combine(targetPath.FullName, $"{file.Name}.CHUNK_{index++}"));
			chunkedFiles.Add(chunkFileName);
			using (var output = chunkFileName.Create())
			{
				var chunkBytesRead = 0;
				while (chunkBytesRead < chunkSize)
				{
					var bytesRead = input.Read(buffer,
						chunkBytesRead,
						chunkSize - chunkBytesRead);

					if (bytesRead == 0)
					{
						break;
					}

					chunkBytesRead += bytesRead;
				}

				if (breakOnNewlines)
				{
					var extraByte = buffer[chunkSize - 1];
					while (extraByte != '\n')
					{
						var flag = input.ReadByte();
						if (flag == -1)
							break;
						extraByte = (byte)flag;
						extraBuffer.Add(extraByte);
					}

					output.Write(buffer, 0, chunkBytesRead);
					if (extraBuffer.Count > 0)
						output.Write(extraBuffer.ToArray(), 0, extraBuffer.Count);

					extraBuffer.Clear();
				}
			}
		}
	}

	if (deleteAfterSplit)
		file.Delete();

	return chunkedFiles.ToArray();
}
```
I was unable to get `ExtractGZipToDirectory()` working. It just created an empty file when I tried to decompress it. I ended up creating this method which did work:

```
private static FileInfo DecompressGZipFile(this FileInfo compressedFilePath)
{
	using (var fs = compressedFilePath.OpenRead())
	{
		using (var zipStream = new GZipStream(fs, CompressionMode.Decompress))
		{
			var buffer1 = compressedFilePath.Name.Split('.');
			var buffer2 = buffer1[0] + "." + buffer1[1];
			var filePath = Path.Combine(compressedFilePath.DirectoryName, buffer2);

			using (var fOutStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
			{
				var tempBytes = new byte[4096];
				int i;
				while ((i = zipStream.Read(tempBytes, 0, tempBytes.Length)) != 0)
				{
					fOutStream.Write(tempBytes, 0, i);
				}
			}

			return new FileInfo(filePath);
		}
	}
}
```
The `WebClient` class defines `DownloadFileTaskAsync` as:

```
public Task DownloadFileTaskAsync(string address, string fileName);
```
Which is nice but it does not return a reference to the file that was downloaded. An extension method like the following would be helpful (possibly good to do for the non-async version as well):

```
/// <summary>
/// Downloads the specified resource to a local file as an asynchronous operation using a task object.
/// </summary>
/// <param name="webClient">The web client.</param>
/// <param name="address">The URI of the resource to download.</param>
/// <param name="fileName">The name of the file to be placed on the local computer.</param>
/// <returns>
/// Returns <see cref="System.Threading.Tasks.Task"></see>.
/// The task object representing the asynchronous operation.
/// </returns>
/// <exception cref="T:System.ArgumentNullException">The <paramref name="address">address</paramref> parameter is null.
/// -or-
/// The <paramref name="fileName">fileName</paramref> parameter is null.</exception>
/// <exception cref="T:System.Net.WebException">The URI formed by combining <see cref="System.Net.WebClient.BaseAddress"></see> and <paramref name="address">address</paramref> is invalid.
/// -or-
/// An error occurred while downloading the resource.</exception>
/// <exception cref="T:System.InvalidOperationException">The local file specified by <paramref name="fileName">fileName</paramref> is in use by another thread.</exception>
public static Task<FileInfo> DownloadFileInfoTaskAsync(this WebClient webClient, string address, string fileName)
{
	return webClient.DownloadFileTaskAsync(address, fileName)
		.ContinueWith(task => new FileInfo(fileName));
}
```