See https://www.r-project.org/nosvn/R.check/r-patched-solaris-x86/rmapshaper-00check.html
https://github.com/jeroen/V8/compare/6791a2dc2f...98c2f75fcc

https://github.com/mbloch/mapshaper/issues/367

hi @ateucher I'm not sure if this behaviour is intended, but it caught me a bit off guard. 

```
library(sf)
library(rmapshaper)
nc <- st_read(system.file(package = "sf", "shape/nc.shp"))
nc[["new name"]] <- 1
nc <- nc[, "new name"]

tmp <- ms_simplify(nc)

> names(nc)
[1] "new name" "geometry"
> names(tmp)
[1] "new.name" "geometry"
> 
```

Is it possible to leave the variable names as they were even if they have special characters?

Add an option to check validity of outputs, use `sf::st_is_valid()` and `rgeos::gIsValid()` as per @rsbivand's suggestion in #89.
Running **rgeos** reverse dependency checks, now on a platform with PROJ 6.1.1, I'm seeing CRS mismatch problems in the tests:

[testthat.Rout.fail.log](https://github.com/ateucher/rmapshaper/files/3465018/testthat.Rout.fail.log)


The function `ms_simplify` changes the `ID` slot of the polygons when working with objects of the `spatialPolygons` or `spatialPolygonsDataFrame` classes (from the `sp` package). See reprex.

```
library(sp)
library(BelgiumMaps.StatBel) # I use this package but any package containing a spatialPolygons object will do I think.
library(rmapshaper)

data(BE_ADMIN_MUNTY) # Load the spatialPolygonsDataFrame object
simplifiedPol <- rmapshaper::ms_simplify(BE_ADMIN_MUNTY)

# Result: 
# - BE_ADMIN_MUNTY has polygon ID's starting: "1", "1_1", "1_2", etc.
# - simplifiedPol has polygon ID's "1", "2", "3", etc.
# In other words polygon ID information is lost. It is unclear if all polygons are still in the same order. 
# (I assume yes, but it's not explicitly mentioned so I cannot be sure for objects with over 1000 polygons.)
```

This causes problems for example when using the `SpatialPolygonsDataFrame` function from the `sp` package. That function takes a `spatialPolygons` object and a `data.frame` object and returns a `spatialPolygonsDataFrame` object where each row of the data.frame is matched to a polygon based on the row.name of the data.frame and the ID of the polygon. Hence with ID information lost this does not work.

Would it be possible to update the ms_simplify function so as to preserve ID information? Thanks in advance.
I'm interested in apply the underlying Visvalingam algorithm directly to paths, do you know if it's available in R independently of the mapshaper interface? 

The approach for sf polygons could be taken to identify shared boundaries, simplify those and then piece back together.  I've tried this with `smoothr` and it seems to work: 

https://github.com/hypertidy/silicate/issues/64

Obviously I'd have to write all the de- and re- compose code for sf, but I've found easier ways than the current `ARC` approach shown there, so first examples could use lines. 
Hi, 

When executing the following code, ms_simplify causes R to abort after about 2 minutes running.

```
library(rgdal)               #1.3-6 version
library (rgeos)             #0.4-2 version
library(rmapshaper)    #0.4.1 version
shp.mun <- 
  readOGR("C:\\br_municipios\\."
          , "BRMUE250GC_SIR"
          , stringsAsFactors=FALSE
          , encoding="UTF-8"
  )
shp2 <- ms_simplify(shp.mun) # the execution of this line causes R 3.5.1 to abort
```
The map file can be found here https://1drv.ms/f/s!Av16Xvc5Na3Ngr12e_gRbjyZXjyh4g
OBS 1): gSimplify can handle this map, thus I believe that mapÂ´s format is ok
OBS 2): I successfully simplified other maps using ms_simplify, so my rmapshaper version is supposedly ok and well installed.

Please let me know if you need additional clarification.

Regards Fabio