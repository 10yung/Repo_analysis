https://github.com/facebook/react/issues/15317#issuecomment-573337558

I haven't really looked into it and to be honest, I haven't fully grasped current solution in `next` branch yet.

@RoystonS can you perhaps have a look?
cc @mweststrate 
Related issue https://github.com/mobxjs/mobx-react-lite/issues/243

This change allows wrapping generic components while preserving generic parameters.

There is also unintended change that preserves all static types. This has mostly positive effect, though `$$typeof`, `type`, `compare`, and `render` (which are not copied over) remain with their original type if defined on base component. I didn't find a way to omit these properties as any kind of narrowing will cause generic parameters to be converted to `unknown`.
When using `observer` to wrap component that accepts generic argument the generic argument is lost effectively removing option to have observer components with generics. I've been able to hack together following workaround, but it would be great if generics weren't lost by default in `observer`. `mobx-react` works with generic component correctly.

Workaround:
```ts
function genericObserver<T extends React.FunctionComponent<P>, P extends object = T extends React.FunctionComponent<infer P> ? P : unknown>(fn: T): T {
	return observer<P>(fn) as T;
}
```

Current behavior:
![image](https://user-images.githubusercontent.com/737093/69500055-ffd3c100-0ef7-11ea-8b62-4d1f16616e75.png)

Desired behavior (similar to `mobx-react`):
![image](https://user-images.githubusercontent.com/737093/69500187-39f19280-0ef9-11ea-9a25-27840d5c6450.png)

Sample codesandbox: https://codesandbox.io/s/zen-mestorf-4hp7q
Currently, I'm using 'ErrorBoundary' class component (implements componentDidCatch etc.) that wraps up the hooks, since they don't support error catching yet.
```
<ErrorBoundary>
  <App>
</ErrorBoundary>
```

Is there some tricky way to retain or set the function name, when using observer wrapper with an arrow function?

```
const App = observer(() => { 
...
throw new Error('test')
...
});
```
Results in
```
The above error occurred in the <wrappedComponent> component:
    in wrappedComponent
    in ErrorBoundary
```
   
  
I've tried settings displayName and defaultProps.name with no luck.
   
   
The only workaround so far is to convert the arrow function to a named one:
```
const App = observer(function App() { 
....
});
```

Which results in:
```
The above error occurred in the <App> component:
    in App
    in ErrorBoundary
```
Here is the related code:
```typescript
import React from 'react';
import { observer, useLocalStore } from 'mobx-react-lite';

const context = React.createContext(null);

function useTest() {
  const store: any = React.useContext(context);
  return store.list.map(e => e)
}

const Test = observer(() => {
  const store: any = React.useContext(context);
  console.log('render');
  const list = useTest();
  const local = useLocalStore(source => ({
    get list() {
      return source.list
    }
  }), { list })
  return (
    <div>
      <p>
        str: {JSON.stringify(local.list)}
      </p>
      <button onClick={store.set}>click</button>
    </div>
  );
});

const App = () => {
  const store = useLocalStore(() => ({
    list: [] as any,
    set() {
      store.list = []
    }
  }));

  return (
    <context.Provider value={store as any}>
      <Test />
    </context.Provider>
  )
};

export default App;
```

It will render unlimited times every time I set the store data `list`

Mobx: 5.14.2
mobx-react-lite: 1.5.0
react: 16.11.0
On the docs, specifically this page https://mobx-react.js.org/state-local there is a commen:

>Note that using a local store might conflict with future React features like concurrent rendering.

Is it possible to address _why_ this might conflict? What does conflict mean? 


I've seen some discussion about React's ability to rebase, and Michel Westrate suggesting that mobx shouldn't be used for local component state - https://github.com/facebook/react/issues/15317#issuecomment-481727125 - Is this still a valid claim still? 


--- 

Related issues from around the place,
https://github.com/reduxjs/react-redux/issues/1351#issuecomment-551311008

https://github.com/reduxjs/react-redux/issues/1351#issuecomment-509411957
If you create a new react native project on 0.61, and create a component wrapped with observer HOC, you get an error when hot reloading(fast refresh).  The <Observer> component seems to work fine(which would make sense).  Everything else seems good with useLocalStore and others.  Just wanted to bring it up incase others are running into it.  Unfortunately I can't get anything to run online.  Snack doesn't support latest react native.  I'd be glad to walk someone through it or create a project if needed.  Thanks!

https://facebook.github.io/react-native/blog/2019/09/18/version-0.61
I've decided not to bother with ESLint for 1.x and this will go straight to 2.0.

Also added running linter as part of CircleCI.



I think it's time to get this thing out. It seems that React 16.9 has included some preliminary changes for upcoming Concurrent mode which are causing trouble with the current test.

With the code of `useObserver` from `next` branch, tests are passing again although there is a bunch of `act` warnings which might be false positive as it's actually necessary to simulate commit phases and similar. We can review that later.

Personally, we have been using this branch for a couple of months now in production and no related problem seems to occur.

Changelog follows:

```
## Breaking changes:
 * Remove deprecated hooks `useComputed`, `useDisposable`, `useObservable`
 * Internals of `useObserver` are rewritten to support React Strict mode [#121] @RoystonS 
 * Simplified and optimized build output with [TSDX tool](https://github.com/palmerhq/tsdx)
   * CommonJS build is the main inside `index.js` which uses either `mobxreactlite.cjs.production.min.js` or `mobxreactlite.cjs.development.js` depending on NODE_ENV variable
   * ESM build is moved to `mobxreactlite.esm.js` and its up to the consumer to minify it (Webpack does it automatically).
   * UMD build is moved to `mobxreactlite.umd.production.min.js` or `mobxreactlite.umd.development.js` respectively.
   * React Native no longer has a specific build, the regular one can be used
```

Closes #199 