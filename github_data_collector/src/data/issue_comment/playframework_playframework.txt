Play `2.8.0`

since we switched to Sbt `1.3.7` we have duplicate test reports for all the play modules in our multi-module build (the ones with `enablePlugins(PlayScala)`)

for those modules the `target/test-reports` looks like this
```
org.foo.XSpec.xml
org.foo.YSpec.xml
TEST-org.foo.XSpec.xml
TEST-org.foo.YSpec.xml
...
```
where for non-play modules we only have the `TEST-`-prefixed files

The sbt release notes mention a change in the junit reporting output
https://github.com/sbt/sbt/releases/tag/v1.3.7

The play plugin must be changing some test options that cause the reports to be generated twice
### Play Version

A build off of the 2.8.x branch, current HEAD is da4a19d69e8c45a0163fe34df1e6528e52d6eed9.

### Operating System

macOS

### JDK

```
java version "1.8.0_202-ea"
Java(TM) SE Runtime Environment (build 1.8.0_202-ea-b03)
Java HotSpot(TM) 64-Bit Server VM (build 25.202-b03, mixed mode)
```

### Library Dependencies

sbt 1.3.6

### Expected Behavior

1. Running `~run`
2. the server is started
3. the code is compiled
4. file watching is started

### Actual Behavior

The execution of the `Compile / run` task fails with:

```
[error] java.lang.NoSuchMethodError: com.sun.jna.Native.load(Ljava/lang/String;Ljava/lang/Class;)Lcom/sun/jna/Library;
[error] 	at io.methvin.watchservice.jna.CarbonAPI.<clinit>(CarbonAPI.java:19)
[error] 	at io.methvin.watchservice.jna.CFStringRef.toCFString(CFStringRef.java:23)
[error] 	at io.methvin.watchservice.MacOSXListeningWatchService.register(MacOSXListeningWatchService.java:128)
[error] 	at io.methvin.watchservice.WatchablePath.register(WatchablePath.java:50)
[error] 	at io.methvin.watcher.DirectoryWatcher.register(DirectoryWatcher.java:341)
[error] 	at io.methvin.watcher.DirectoryWatcher.registerAll(DirectoryWatcher.java:315)
[error] 	at io.methvin.watcher.DirectoryWatcher.<init>(DirectoryWatcher.java:176)
[error] 	at io.methvin.watcher.DirectoryWatcher$Builder.build(DirectoryWatcher.java:117)
[error] 	at play.dev.filewatch.DefaultFileWatchService.watch(DefaultFileWatchService.scala:38)
[error] 	at play.dev.filewatch.FileWatchService$$anon$1.watch(FileWatchService.scala:87)
[error] 	at play.runsupport.Reloader.<init>(Reloader.scala:443)
[error] 	at play.runsupport.Reloader$.reloader$lzycompute$1(Reloader.scala:283)
[error] 	at play.runsupport.Reloader$.play$runsupport$Reloader$$reloader$1(Reloader.scala:275)
[error] 	at play.runsupport.Reloader$.startDevMode(Reloader.scala:306)
[error] 	at play.sbt.run.PlayRun$.devModeServer$lzycompute$1(PlayRun.scala:98)
[error] 	at play.sbt.run.PlayRun$.devModeServer$1(PlayRun.scala:81)
[error] 	at play.sbt.run.PlayRun$.$anonfun$playRunTask$3(PlayRun.scala:105)
[error] 	at play.sbt.run.PlayRun$.$anonfun$playRunTask$3$adapted(PlayRun.scala:67)
[error] 	at scala.Function1.$anonfun$compose$1(Function1.scala:49)
[error] stack trace is suppressed; run last Compile / run for the full output
[error] (Compile / run) java.lang.NoSuchMethodError: com.sun.jna.Native.load(Ljava/lang/String;Ljava/lang/Class;)Lcom/sun/jna/Library;
```

### Reproducible Test Case

1. `publishLocal` Play 2.8.x
2. Take https://github.com/playframework/play-samples/tree/2.8.x/play-scala-hello-world-tutorial (current HEAD https://github.com/playframework/play-samples/commit/da4a19d69e8c45a0163fe34df1e6528e52d6eed9)
3. Update Play to the published version
4. Optional: Update sbt from 1.3.4 to 1.3.6
5. start `sbt`
6. run `~run`
Hello. Sorry if this is a duplicate, but I haven't found such an issue.

I have an API that provides CRUD operations for some entities. Read and write models are almost the same, i.e. they have same sets of fields, but different constraints on them:

```
case class PersonRead(name: String, age: Option[Int])
case class PersonWrite(name: Option[String], age: Option[String])
```

What I'm trying to do is to define a single case class for both models:
```
sealed trait Mode {  type Required[T]; type Optional[T] }

object Mode {
  trait Read extends Mode {
     override type Required[T] = T
     override type Optional[T] = Option[T]
  }
  trait Write extends Mode {
     override type Required[T] = Option[T]
     override type Optional[T] = Option[T]
  }
}

case class Person[m <: Mode](name: m#Required[String], age: m#Optional[Int])
```
In reality I have more complex models, plus some other modes (other than Read and Write) and more constraint types (other than Required and Optional), so such a solution will help me a lot.

The problem is that I can't use Play json marcos with such case classes:
```
implicit val writes: Reads[Person[Mode.Read]] = Json.reads[Person[Mode.Read]]
```
I get the following error at compile time:
```
Error:(47, 61) No instance of play.api.libs.json.Reads is available for controllers.Mode.Required[java.lang.String], controllers.Mode.Optional[scala.Int] in the implicit scope (Hint: if declared in the same file, make sure it's declared before)
  implicit val writes: Reads[Person[Mode.Read]] = Json.reads[Person[Mode.Read]]
```

I'm using Play 2.7.3. Is there any trick that can make it work? Thanks.
### Play Version

Play 2.8.0 with sbt 1.3.4

### API

Scala

### Operating System

Windows 10 Pro

### JDK

openjdk version "11.0.5" 2019-10-15
OpenJDK Runtime Environment AdoptOpenJDK (build 11.0.5+10)
OpenJDK 64-Bit Server VM AdoptOpenJDK (build 11.0.5+10, mixed mode)

### Expected Behavior

1. git clone git@github.com:playframework/play-samples.git
2. cd play-samples/play-scala-hello-world-tutorial/
3. sbt
4. ~run
5. Make a change to source code
6. Recompilation is triggered when files are changed

### Actual Behavior

Recompilation is not triggered. 

Refreshing the browser window (= making a request to the app) does trigger recompilation, but AFAIK this should happen already when files change.

Downgrading to sbt 1.2.8 makes triggered execution work again as expected. Triggered execution for the `compile` task works using any version of sbt I have tried, so this issue is only about the `run` command with sbt 1.3.x (on Windows).

I have tried different `fileWatchService` implementations but the issue persists.
Improve the Play documentation of  forms, nested values to better illustrate multiple nested values.

At the moment the [documentation](https://www.playframework.com/documentation/2.8.x/ScalaForms#Nested-values) illustrates a single nested value at the **end** of the _form_;
```
val userFormNested: Form[UserAddressData] = Form(
  mapping(
    "name" -> text,
    "address" -> mapping(
      "street" -> text,
      "city"   -> text
    )(AddressData.apply)(AddressData.unapply)
  )(UserAddressData.apply)(UserAddressData.unapply)
)
```
Here (AddressData.apply)(...unapply) - directly precedes the (UserAddressData.apply)(...unapply)

What isn't clear (for those that don't know) is; Where do the apply / unapply calls go?
Do they go last (overall) - as it seems to be illustrated in the documentation or do they belong at the end of each mapping?

Perhaps, something along the lines of the following would be better to illustrate the apply/unapply is directly after the matching _mapping_? I.e.;

```
val userFormNested: Form[UserAddressData] = Form(
  mapping(
    "name" -> text,
    "homeAddress" -> mapping(
      "street" -> text,
      "city"   -> text
    )(HomeAddressData.apply)(HomeAddressData.unapply),
    "workAddress" -> mapping(
      "street" -> text,
      "city"   -> text
    )(WorkAddressData.apply)(WorkAddressData.unapply)
  )(UserAddressData.apply)(UserAddressData.unapply)
)
```


### Play Version
2.8


Updates [org.hibernate.javax.persistence:hibernate-jpa-2.1-api](http://github.com/hibernate/hibernate-jpa-api) from 1.0.2.Final to 1.0.2.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "org.hibernate.javax.persistence", artifactId = "hibernate-jpa-2.1-api" } ]
```
</details>

labels: library-update
# Pull Request Checklist

* [x] Have you read [How to write the perfect pull request](https://github.com/blog/1943-how-to-write-the-perfect-pull-request)?
* [x] Have you read through the [contributor guidelines](https://www.playframework.com/contributing)?
* [x] Have you signed the [Lightbend CLA](https://www.lightbend.com/contribute/cla)?
* [x] Have you referenced any issues you're fixing using [commit message keywords](https://help.github.com/articles/closing-issues-using-keywords/)?
* [x] Have you added copyright headers to new files?
* [x] Have you checked that both Scala and Java APIs are updated?
* [x] Have you updated the documentation for both Scala and Java sections?
* [x] Have you added tests for any changed functionality?

# Helpful things

## Fixes

Fixes #9880

## Purpose

What does this PR do?
To support both `null` and `*` in `play.filters.cors.allowedOrigins` to allow any origin to access the resource.
```
play.filters.cors.allowedOrigins = null
OR
play.filters.cors.allowedOrigins = ["*"]
```

## Background Context

This is my first commit to Play, be happy to hear your advices.

## References

NO

https://github.com/playframework/play-file-watch incurs some amount of maintenance, and we're considering removing it.

After speaking with Ethan, who has put in a lot of time working on sbt 1.3's file watching, he suggests looking at sbt/io's `Glob`, `FileTreeRepository`, and `FileEventMonitor` (which is a wrapper for the repository, aggregating callbacks) as the replacement for the usage of play-file-watch.

A much bigger project would be to remove Play's overriding of `run` and hijacking of `~run` to use sbt's own run, file watching and classloader improvements.  Topics also touched were Lagom's reload-without-refresh feature, migrating to sbt-revolver instead, working with the sbt team to bring play/lagom's dev mode needs in sbt proper, and, of course, forked dev mode.

The last release was Play 2.8.0.
Updates [junit:junit](http://github.com/junit-team/junit/tree/master) from 4.12 to 4.13.


I'll automatically update this PR to resolve conflicts as long as you don't change it yourself.

If you'd like to skip this version, you can just close this PR. If you have any feedback, just mention me in the comments below.

Have a fantastic day writing Scala!

<details>
<summary>Ignore future updates</summary>

Add this to your `.scala-steward.conf` file to ignore future updates of this dependency:
```
updates.ignore = [ { groupId = "junit", artifactId = "junit" } ]
```
</details>

labels: library-update
play version: 2.6.20
api : java
os:   x86_64 GNU/Linux
java version: openjdk version "1.8.0_232"

I make reference  "https://github.com/playframework/play-java-websocket-example" to create a websocket framwork, running at three aws c5.large instance, each have 200+ connections in average. 
there are 4 channels, the problem is after about one week or two, one channel stoped without any exception.

data producer like this:
```
1. initial: 
        Source<Ticker, SourceQueueWithComplete<Ticker>> sourceQueueWithCompleteSource =
                Source.queue(config.getInt("queue-buffer-size"), OverflowStrategy.backpressure());
        Pair<SourceQueueWithComplete<Ticker>, Source<Ticker, NotUsed>> sinkSourcePair = sourceQueueWithCompleteSource.log("tickerQueue")
                .toMat(BroadcastHub.of(Ticker.class, config.getInt("broadcast-buffer-size")), Keep.both()).run(this.mat);
        inputQueue = sinkSourcePair.first();
        source = sinkSourcePair.second();
// drain for not accumulate
        source.runWith(Sink.ignore(), this.mat);

2. schedule gain data from pub_sub mediator and push these data into queue:
tickerMap.values().forEach(p -> {
            try {
                QueueOfferResult result = inputQueue.offer(new Ticker(p.getTicker(), TICKER))
                        .toCompletableFuture().get(1, TimeUnit.SECONDS);
}catch (Exception e) {
                exceptionTimes++;
            }

3. handle ws processor request and response the source to the ws:
        sender().tell(new Messages.WatchTickerResult(ticker.symbol, source.backpressureTimeout(backPressureTimeout)), self());

```
when channel stoped, "inputQueue.offer" cannot push any element forever, so the channel stopped pub element.

I have tried to solve this for a long time, finally have to monitor exceptionTimes > somenumber and restart data producer to recover, but seems ugly, is there something wrong ?

