Hi there. With the recent merger within the last year, I am very curious about the ongoing status of the xray experiment?
Keyboard shortcut was changed to `alt-cmd-i` instead of `cmd-shift-i`.

![Screen Shot 2562-04-18 at 10 37 57](https://user-images.githubusercontent.com/484530/56335552-2ba30180-61c7-11e9-9ce3-edeb86802e28.png)

Firstly,  I think this project looks really promising, kudos to the team! 
I was wondering if we could potentially use x-ray on a thin-client while the x-ray core server could be installed remotely (x-ray packages, extensions, language servers etc... all installed remotely)? Source files and dependencies would also reside in the server. However, the UX on the client feels as if everything is running locally. 
This would obviously require an integrated terminal which is also fed from the one available on the machine x-ray core server is installed at. Sort of like a cloud IDE except completely hackable and configurable? 
I got a sense from the architecture diagram that maybe you guys already have something like this in mind (beside realtime collaboration, I mean like a "Single player mode" would be nice). 
I think this would eliminate so many issues teams face.  Like having to stick to certain hardware for their employees, configurations and setting each one up then fixing stability issues every now and then. It would be nice to simply give everyone a cloud instance running x-ray and any decent laptop where they could use the x-ray client. This would also make learning Vim or emacs for working over ssh unnecessary and we can finally have a nice remote development experience? It will also be significantly cheaper and much easier to keep upto date.
Thoughts?
close #171 
# How to reproduce?
build & run `RUST_BACKTRACE=1 XRAY_SRC_PATH=. script/xray . `, open `xray_ui/lib/app.js` with the editor, then panic occurs.
```
thread 'main' panicked at 'index out of bounds: the len is 29 but the index is 29', libcore/slice/mod.rs:2460:10
stack backtrace:
   0: std::sys::unix::backtrace::tracing::imp::unwind_backtrace
   1: std::sys_common::backtrace::print
   2: std::panicking::default_hook::{{closure}}
   3: std::panicking::default_hook
   4: std::panicking::rust_panic_with_hook
   5: std::panicking::continue_panic_fmt
   6: rust_begin_unwind
   7: core::panicking::panic_fmt
   8: core::panicking::panic_bounds_check
   9: <xray_core::buffer_view::BufferView as xray_core::window::View>::render
  10: <xray_core::window::WindowUpdateStream as futures::stream::Stream>::poll
  11: <futures::stream::map::Map<S, F> as futures::stream::Stream>::poll
  12: <futures::sink::send_all::SendAll<T, U> as futures::future::Future>::poll
  13: <futures::future::chain::Chain<A, B, C>>::poll
  14: futures::task_impl::std::set
  15: <futures::task_impl::Spawn<T>>::poll_future_notify
  16: tokio::executor::current_thread::CurrentRunner::set_spawn
  17: <tokio::executor::current_thread::scheduler::Scheduler<U>>::tick
  18: <scoped_tls::ScopedKey<T>>::set
  19: <std::thread::local::LocalKey<T>>::with
  20: <std::thread::local::LocalKey<T>>::with
  21: <std::thread::local::LocalKey<T>>::with
  22: tokio_core::reactor::Core::poll
  23: xray_server::main
  24: std::rt::lang_start::{{closure}}
  25: std::panicking::try::do_call
  26: __rust_maybe_catch_panic
  27: std::rt::lang_start_internal
  28: main
```
Building on macOS Mojave - 10.14 on a MacBook Pro 2016 13" with Touchbar.

```sh
$ XRAY_SRC_PATH=. RUST_BACKTRACE=1 script/xray .
$ thread 'main' panicked at 'index out of bounds: the len is 30 but the index is 30', /Users/travis/build/rust-lang/rust/src/libcore/slice/mod.rs:2049:10
note: Run with `RUST_BACKTRACE=1` for a backtrace.
```

```sh
$ node --version
$ v8.9.3
```

```sh
$ rustc --version
$ rustc 1.30.0-nightly (33b923fd4 2018-08-18)
```

```sh
$ nvm list
$          v8.9.3
$ ->     v10.12.0
$          system
$ default -> node (-> v10.12.0)
$ node -> stable (-> v10.12.0) (default)
$ stable -> 10.12 (-> v10.12.0) (default)
$ iojs -> N/A (default)
$ lts/* -> lts/carbon (-> N/A)
$ lts/argon -> v4.9.1 (-> N/A)
$ lts/boron -> v6.14.4 (-> N/A)
$ lts/carbon -> v8.12.0 (-> N/A)
```
Maybe I'm missing something obvious, but is there an API (or plans for an API) to be notified of changes to the work tree. In particular if the work tree gets modified due to remote ops being applied how do I learn when that happens and what has changed.
When I change a file, the file entry status remains ‘Unchanged’. I can’t tell if a file has been modified unless we compare it to the original file contents. Is this something that could be added to the API?
I don’t think it’s possible to undo a file deletion. Would it be possible to let users do something like that?
* Adds a `clip_point` function in xray_core/src/buffer.rs
* Resolves 2 clipping related TODOs in xray_core/src/buffer_view.rs