test ringbuffer code,  looks like may get wrong value after resizing. and I'm not sure why ringbuffer need `resize`.  if it's not a bug, would you mind explain the design of ringbuffer implementation in freecache?

code snippet below
```
    var d [6]byte                                                                                                                                                                                                                                                                                                                                                                                              
    rb := NewRingBuf(8, 0)                                                                                                                                                                              
    fmt.Println(string(rb.Dump()))                                                                                                                                                                      
                                                                                                                                                                                                        
    fmt.Println("write 123456  write-offset:", rb.End())                                                                                                                                                
    rb.Write([]byte("123456"))                                                                                                                                                                          
    fmt.Println("buffer: ",string(rb.Dump()))                                                                                                                                                           
    fmt.Println(rb.String())                                                                                                                                                                            
    fmt.Println("=========================================")                                                                                                                                            
                                                                                                                                                                                                        
    index := rb.End()                                                                                                                                                                                   
    fmt.Println("write abcdef  write-offset:", rb.End())                                                                                                                                                
    rb.Write([]byte("abcdef"))                                                                                                                                                                          
    fmt.Println("buffer: ", string(rb.Dump()))                                                                                                                                                          
    fmt.Println(rb.String())                                                                                                                                                                            
                                                                                                                                                                                                        
    fmt.Println("=========================================")                                                                                                                                            
                                                                                                                                                                                                        
    fmt.Println("after resize to 10")                                                                                                                                                                   
    rb.Resize(10)                                                                                                                                                                                       
    fmt.Println("buffer: ", string(rb.Dump()))                                                                                                                                                          
    fmt.Println(rb.String())                                                                                                                                                                            
    fmt.Println("=========================================")                                                                                                                                            
                                                                                                                                                                                                        
    fmt.Println("write AB")                                                                                                                                                                             
    rb.Write([]byte("AB"))                                                                                                                                                                              
    fmt.Println("buffer: ", string(rb.Dump()))                                                                                                                                                          
    fmt.Println(rb.String())                                                                                                                                                                            
    fmt.Println("=========================================")                                                                                                                                            
                                                                                                                                                                                                        
    fmt.Println("read abcdef by offset: ", index)                                                                                                                                                       
    rb.ReadAt(d[:], index)                                                                                                                                                                              
    fmt.Println(string(d[:])) 
```

result below
```
write 123456  write-offset: 0
buffer:  123456
[size:8, start:0, end:6, index:6]
=========================================
write abcdef  write-offset: 6
buffer:  cdef56ab
[size:8, start:4, end:12, index:4]
=========================================
after resize to 10
buffer:  56abcdef
[size:10, start:4, end:12, index:0]
=========================================
write AB
buffer:  ABabcdef
[size:10, start:4, end:14, index:2]
=========================================
read abcdef by offset:  6
cdef
```
https://github.com/VictoriaMetrics/fastcache

can port over the ideas to freecache? it doesn't have expiry controls
`time.Now()` will sometimes result in a full system call (this is the default on AWS EC2 instances).  I think for an LRU you can probably get away with second precision.  One option would be to have a background goroutine that called `time.Now()` every second and cached the result globally.
is this production ready? any issues i shld be looking out for?
- Simplifying logic that's duplicated
- Makes stats consistent with how they're getting cleared and locates them to a single method.
Because the value is only support `[]byte`, we should serialize/unserialize our data each set/get operation, this will cost more CPU time. And the serialized/unserialized object will free which cause more GC. Why do we just use interface{} as value?
1. add method Resize
   newSize >= oldSize, keep all entry
   newSie < oldSize, discard all entry;

2. bug, case:

```go
package main

import (
	"fmt"
	_ "strconv"
	_ "time"

	"github.com/coocood/freecache"
	//"github.com/zhangcunli/freecache"
)

func main() {
	cachesize := 512 * 1024
	cache := freecache.NewCache(cachesize)

	value1 := "aaa"
	key1 := []byte("key1")
	value := value1
	cache.Set(key1, []byte(value), 0)

	it := cache.NewIterator()
	for {
		entry := it.Next()
		if entry == nil {
			break
		}
		fmt.Printf("-----------> iterator, key:%s, value:%s\n", string(entry.Key), string(entry.Value))
	}

	value = value1 + "XXXXXX"
	cache.Set(key1, []byte(value), 0)

	value = value1 + "XXXXYYYYYYY"
	cache.Set(key1, []byte(value), 0)
	it = cache.NewIterator()
	for {
		entry := it.Next()
		if entry == nil {
			break
		}
		fmt.Printf("-----------> iterator, key:%s, value:%s\n", string(entry.Key), string(entry.Value))
	}
}
```
Support resize cache size at runtime.
Do you have schedule of this feature?
Thanks.
Is it possible to make this stuff configurable?
Using mmap as a backend for saving data to disk may be a good choice.