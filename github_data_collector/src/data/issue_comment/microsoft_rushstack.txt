
## Please prefix the issue title with the project name i.e. [rush], [api-extractor] etc. ##

**Is this a feature or a bug?**

- [ ] Feature
- [x] Bug

**Please describe the actual behavior.**

Totally new to rush and started by following the getting started docs here https://rushjs.io/pages/intro/get_started/.

When I run `rush update` I get an error that not following policy, yet my git config is valid:

```

Checking Git policy for tmandric in ~/dev/scratch/rushstack (master=)
$ rush update

Rush version 5.17.2 is not currently installed. Installing...
Trying to acquire lock for rush-5.17.2
Deleting old files from /Users/mandric/.rush/node-v10.17.0/rush-5.17.2
Copying /Users/mandric/dev/scratch/rushstack/common/config/rush/.npmrc --> /Users/mandric/.rush/node-v10.17.0/rush-5.17.2/.npmrc

Running "npm install" in /Users/mandric/.rush/node-v10.17.0/rush-5.17.2
Successfully installed Rush version 5.17.2 in /Users/mandric/.rush/node-v10.17.0/rush-5.17.2.

Rush Multi-Project Build Tool 5.17.2 - https://rushjs.io
Node.js version is 10.17.0 (LTS)


Starting "rush update"

Checking Git policy for this repository.

Hey there!  To keep things tidy, this repo asks you to submit your Git commits using an email like one of these patterns:

    [^@]+@users\.noreply\.github\.com
    travis@example\.org

...but yours is configured like this:

    Milan Andric <mandric@gmail.com>

To fix it, you can use commands like this:

    git config --local user.name "Mr. Example"
    git config --local user.email "mrexample@users.noreply.github.com"

Aborting, so you can go fix your settings.  (Or use --bypass-policy to skip.)

mandric in ~/dev/scratch/rushstack (master=)
$ cat ~/.gitconfig 
[user]
	email = mandric@gmail.com
	name = Milan Andric
...
```


**If the issue is a bug, how can we reproduce it? Please provide detailed steps and include a GitHub branch if applicable. Your issue will get resolved faster if you can make it easy to investigate.**

**What is the expected behavior?**

My git config looks like it should be valid.

**If this is a bug, please provide the tool version, Node.js version, and OS.**

* **Tool:** 
rush

* **Tool Version:** 
rush-5.17.2

* **Node Version:** 

node-v10.17.0

  * **Is this a LTS version?** 

yes

  * **Have you tested on a LTS version?** 

yes

* **OS:** 

OSX

**Is this a feature or a bug?**

- [ ] Feature
- [X] Bug

i have a package "component-library" in my rush repo which is using rollup for build. When i run the build command i get this error

```
[!] Error: Cannot find module 'rollup-plugin-typescript'
Require stack:
- /Users/timothy.richardson/go/src/phoenix/monorepo/packages/component-library/rollup.config.js
- /Users/timothy.richardson/go/src/phoenix/monorepo/common/temp/node_modules/rollup/dist/bin/rollup
Error: Cannot find module 'rollup-plugin-typescript'
Require stack:
- /Users/timothy.richardson/go/src/phoenix/monorepo/packages/component-library/rollup.config.js
- /Users/timothy.richardson/go/src/phoenix/monorepo/common/temp/node_modules/rollup/dist/bin/rollup
    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:794:15)
    at Function.Module._load (internal/modules/cjs/loader.js:687:27)
    at Module.require (internal/modules/cjs/loader.js:849:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.<anonymous> (/Users/timothy.richardson/go/src/phoenix/monorepo/packages/component-library/rollup.config.js:7:34)
    at Module._compile (internal/modules/cjs/loader.js:956:30)
    at Object.require.extensions.<computed> [as .js] (/Users/timothy.richardson/go/src/phoenix/monorepo/common/temp/node_modules/rollup/dist/bin/rollup:831:24)
    at Module.load (internal/modules/cjs/loader.js:812:32)
    at Function.Module._load (internal/modules/cjs/loader.js:724:14)
    at Module.require (internal/modules/cjs/loader.js:849:19)

npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! @aiml/component-library@0.0.1 build:components: `rollup -c`
npm ERR! Exit status 1
npm ERR! 
npm ERR! Failed at the @aiml/component-library@0.0.1 build:components script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.
```
the rushroot/packages/component-library/node_modules/.bin dir in the package is symlinked to rushroot/common/temp/node_modules/.bin

rollup-plugin-typescript is intalled in rushroot/common/temp/node_modules



* **Tool:RUSH** 
* **Tool Version:5.18.0** 
* **Node Version:v12.13.0** 
  * **Is this a LTS version?** 
  * **Have you tested on a LTS version?** 
* **OS:OSX** 

The reason being for use in a new Webpack plugin. Coming soon.
**Is this a feature or a bug?**

- [x] Feature
- [ ] Bug

**Please describe the actual behavior.**

no-null only allows null in `===`, `!==` comparisons, not `==`, `!=`.

**What is the expected behavior?**

It would be nice if no-null allowed null to be used in == and != comparisons.  I understand that rushstack sets `eqeqeq` to "always", so this situations does not arise in typical rushstack usage.  However, for my project, I'd like to set `eqeqeq: ["error", "always", {null: "ignore"}]`  This means `eqeqeq` allows me to do `foo == null` to check against both `null` and `undefined`.  However, `no-null` flags this as a bad usage of `null`.
Currently, `gulp-core-build-sass` passes a hard-coded browser range including IE10 to `autoprefixer`:

https://github.com/microsoft/rushstack/blob/4cf4bdd0738e4cadbb198f6c0112a8eedc4aea54/core-build/gulp-core-build-sass/src/SassTask.ts#L90

Officially, IE10 reaches end of support on January 31, 2020:

>Internet Explorer (IE) 10 will reach end of support on January 31, 2020. From this point forward, IE 11 will be the only supported version of Internet Explorer on Windows Server 2012 and Windows Embedded 8 Standard. IE 11 is available via Microsoft Update Catalog, Windows Update and Windows Server Update Service (WSUS). Go here to learn more.
>https://support.microsoft.com/en-us/help/17454/lifecycle-faq-internet-explorer

IE10 requires a number of vendor specific prefixes, particularly with flex & grid. Dropping IE10 from the supported browser range will reduce emitted CSS size. This change would impact both first and third-party SharePoint developers.

We may consider making the browser list configurable if devs require that level of configuration.

I'm happy to raise the PR. The above change may need to be a `major` bump to `gulp-core-build-sass`.

cc: @iclanton @lijunle @patmill 
**Is this a feature or a bug?**

- [x] Feature
- [ ] Bug

**Please describe the actual behavior.**

My needs would be satisfied by @wbern's proposal here: https://github.com/microsoft/rushstack/issues/1202

We are looking to create a dev/watch workflow based partially around a `build:watch` bulk task, but we need to be able to scope the run to specific projects in our monorepo.

In the meantime, the ability to apply `--to` and `--from` flags to the rush list command would enable us to spawn watch processes for the required projects from a Node script. JSON output would be a bonus.

**If the issue is a bug, how can we reproduce it? Please provide detailed steps and include a GitHub branch if applicable. Your issue will get resolved faster if you can make it easy to investigate.**

n/a

**What is the expected behavior?**

`rush list` output can be filtered by `--to` and `--from`, and possibly output JSON

**If this is a bug, please provide the tool version, Node.js version, and OS.**

Not a bug

## Please prefix the issue title with the project name i.e. [rush], [api-extractor] etc. ##

**Is this a feature or a bug?**

- [x] Feature

**What is the expected behavior?**
All of package managers allow to do something like
```
npm install eslint eslint-plugin-node eslint-plugin-react eslint-preset-airbnb...
```

However, rush forces user to install every package separately, and also running `rush update` every time `rush add` is executed (if `-s` flag is not passed).
It is worse experience in comparison to common package managers.

Maybe, rush will support shorthand syntax for adding multiple packages at a time?
E.g. `rush add package1 package2 package3`
By default the SassTask config is current set to ts-lint, however, as I understand the default linter has been update to @rushstack/eslint-config. Is there any reason this hasn't been updated?
## Please prefix the issue title with the project name i.e. [rush], [api-extractor] etc. ##

**Is this a feature or a bug?**

- [ ] Feature
- [x] Bug

**Please describe the actual behavior.**
Assuming I have a rush project with 2 packages, 1 in `.` (as long as I'm trying to resolve some pnpm&eslint issues by manual root creation of node_modules), second in `./packages/whatever`,

when i type `rush add -p %package_name%` in `./packages/whatever` directory,
dependency is added to package at `.`.

**What is the expected behavior?**
I expect rush to detect the package as close as possible and add dependency there, not to the topmost one.

**If this is a bug, please provide the tool version, Node.js version, and OS.**

* **Tool: Rush** 
* **Tool Version:  5.17.2** 
* **Node Version: 12.14.0** 
  * **Is this a LTS version? yes** 
  * **Have you tested on a LTS version? yes** 
* **OS: Mac OS X** 

also, PNPM 4.6.0 is used.