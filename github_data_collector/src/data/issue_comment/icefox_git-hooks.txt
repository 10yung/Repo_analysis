

When listing hooks, I get an error:

```
/Users/jasonkarns/.config/git/hooks:
post-checkoutfatal: ambiguous argument '': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
fatal: ambiguous argument '': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
fatal: ambiguous argument '': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
fatal: ambiguous argument '': unknown revision or path not in the working tree.
Use '--' to separate paths from revisions, like this:
'git <command> [<revision>...] -- [<file>...]'
/cmd-reminder 	- 
post-checkout/ctags 	- 
post-commit/ctags 	- 
post-merge/ctags 	- 
post-rewrite/ctags 	- 
```
Having global hook location be configurable is awesome! Would love the per-project location to be configurable as well (would be in that repo's `.git/config` file, naturally)

Example:

```
git config hooks.local scripts/git
```
I am using some custom hooks myself. I think an essential piece of functionality is missing from your code: In order to perform test whether or not my program compiles / my tests pass I need to clean the environment first. I use the following lines for this:

```
name=`git describe --long --dirty --abbrev=10 --tags`
full_name="pre-commit $name"

git stash save -q --keep-index --include-untracked "$full_name"
git clean -f -d

# run tests etc...

git stash pop -q
```

This gets me out of problem such as #including a-non-tracked-file.h 

Shouldn't this be possible in the scripts via some push / pop or similar functions?

Would you consider having an option that would enable user/global hooks by default? It would still be necessary to run some command to enable project hooks. This should remove any security concerns and would make things a lot more convenient for those who only use git-hooks for these purposes.

How do you enable just a single hook in a local repo?

Git add:

```
~/repo git:master ❯❯❯ git add "inside/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings"
```

Git commit:

```
~/repo git:master ❯❯❯ git commit -m 'Minor update'
grep: inside/Library/Application: No such file or directory
grep: Support/Sublime: No such file or directory
grep: Text: No such file or directory
grep: 3/Packages/User/Preferences.sublime-settings: No such file or directory
[master 6ec4a48] Minor update
 1 file changed, 1 insertion(+), 1 deletion(-)
```

I see some grep commands in the main file but don't which is causing the issue.

Change IFS when looping in result from function hook_dirs

Hi,

I think that fix for issue #33 is not complete.
I still had trouble when repo path contains spaces in hooks_dirs function.

The fix, that I did, consist to set IFS to \n before looping through result of hook_dirs and now it works.

git-hooks list and git-hooks run works using correct paths.

BR.

Regards
