Borrowing the texture for its entire lifetime renders this method unusable:
1. It means the texture can not be updated anymore.
2. Even if the texture is created just for the call, it can not be discarded anymore because: `borrow might be used here, when 'shader' is dropped and runs the 'Drop' code for type 'sfml::graphics::Shader'`
3. Thus, the shader needs to be recompiled for every texture update, which is not acceptable.
Hello.
How do you look about mp3 support in your project (maybe optional feature).
I know that mp3 is not officially supported in the sfml project.

Discussion: https://github.com/SFML/SFML/issues/1232
Possible implementation: https://github.com/SFML/SFML/wiki/Source:-MP3-Player

If I use C ++, I take this implementation. But I do not understand what to do if I use rust.
I'd like to know. What prevents RcSprite from being published in a new version of rust-sfml ?
I've been struggling for two days over storing a Texture and a Sprite side by side, and I think RcSprite is what I need to not go insane in developing using rust-sfml.

Is it safe to copy the implementation of the branch rcsprite in my code or is it still an incomplete prototype ?
What could I do to help develop this feature ?
Since chaining multiple calls to `Transform::combine` is inconvenient, imho the usability of Transform would benefit from having the `Mul` trait implemented.

I'm guessing the implementation would go something like this:
```rust
impl Mul for Transform {
    type Output = Transform;

    fn mul(mut self, rhs: Transform) -> Transform {
        self.combine(&rhs);
        self
    }
}
```

(However, being relatively new to Rust I don't know if there are any caveats preventing this implementation from working correctly.)
Once a release with https://github.com/SFML/CSFML/pull/137 lands.
I'm running into an issue when loading textures from a thread, that `Texture` isn't `Send`. Is this on purpose or is it possible to make it `Send`?
I am unsure how to implement a custom entity using `VertexArray` and `Texture` (for a tilemap, as per the [SFML docs](https://www.sfml-dev.org/tutorials/2.4/graphics-vertex-array.php#example-tile-map)), but am unable to find an appropriate example.

My custom entity owns its `VertextArray` and borrows the `Texture` from the outer Resources container, however when `RenderStates` borrows the reference the lifetime requirements conflict.

```rust
pub struct CustomEntity<'s> {
    array: VertexArray,
    texture: &'s Texture,
}

impl<'s> Drawable for CustomEntity<'s> {
    fn draw<'a: 'shader, 'texture, 'shader, 'shader_texture>(
        &'a self,
        render_target: &mut RenderTarget,
        states: RenderStates<'texture, 'shader, 'shader_texture>,
    ) {
        states.texture = Some(&self.texture);
        render_target.draw_with_renderstates(&self.array, states);
    }
}
```

Obviously this won't work because the lifetimes `'s` and `'texture`  are distinct.

```
error[E0495]: cannot infer an appropriate lifetime for lifetime parameter in function call due to conflicting requirements
   |
64 |         states.texture = Some(&self.texture);
   |                               ^^^^^^^^^^^^^
   |
```

What would the appropriate usage then be?
`Image` might be one such type, so you could load images on a separate thread, and send them to the main thread.
While attempting to setup a threaded render-input system, I ran across the following:

```rust
extern crate sfml;
extern crate crossbeam;

use sfml::window::{ContextSettings, Style, Event, Key};
use sfml::graphics::{RenderWindow};

fn input(_scope: &crossbeam::Scope, mut window: RenderWindow) {
    while let Some(event) = window.wait_event() {
        println!("{:?}", event);

        match event {
            Event::Closed |
            Event::KeyPressed {
                code: Key::Escape, ..
            } => break,

            _ => {}
        }
    }
}

fn main() {
    let mut main_window = RenderWindow::new(
        (800, 500),
        "Test window",
        Style::CLOSE,
        &ContextSettings { ..Default::default() }
    );

    crossbeam::scope(|scope| {
        input(scope, main_window);
    });

    main_window.display()
}
```

Which gives the rustc error:

```shell

error[E0382]: use of moved value: `main_window`
  --> src/main.rs:37:5
   |
33 |     crossbeam::scope(|scope| {
   |                      ------- value moved (into closure) here
...
37 |     main_window.display()
   |     ^^^^^^^^^^^ value used here after move
   |
   = note: move occurs because `main_window` has type `sfml::graphics::RenderWindow`, 
     which does not implement the `Copy` trait
```

Can you suggest how I could get access to the window for both rendering and input processing?

I tried `Arc::new(main_window)` and it's giving me the same issue.

I'm using rust-sfml and I'd like to encapsulate all my rendering into a Renderer struct that has methods like handle_events(), draw(), etc., so none of the rest of my code needs to worry about rendering.

https://gist.github.com/dfannius/963d17ca466ceb00373dfbb680a862e1 shows a minimal example of the issue I'm running into. I'd like the Renderer to do all its resource acquisition on construction, but if I create a Font inside `new`, it doesn't live long enough. I'd like to create it on the heap and give Text an Rc<Font>, but Text as currently implemented doesn't support that.

As it is, I can pass a &Font into the constructor, but that just moves the problem up one level (the Renderer can't live outside of the enclosing function).

Anyway, I don't know what the best solution is, but that is my use case.