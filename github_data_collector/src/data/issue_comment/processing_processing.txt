Removed array instantiation where parameters could be accepted as VArgs
`callbackClass.getMethod(callbackMethod, new Class[] { File.class });` =>
`callbackClass.getMethod(callbackMethod, File.class);`

Remove redundant unboxing where appropriate
`(scale instanceof Integer && ((Integer)scale).intValue() == 2)` =>
`(scale instanceof Integer && (Integer) scale == 2)`
In this case scale will automaticaly be unboxed to it's int value

Replace `protected void handleMethods(String methodName)` and 
`protected void handleMethods(String methodName, Object[] args)`
with
`protected void handleMethods(String methodName, Object...args)`
as it handles both cases

Remove redundant `extends Object` clause from type wildcards
`List<Disposable<? extends Object>> reachableWeakReferences` => 
`List<Disposable<?>> reachableWeakReferences`
## Description
processing need new intro picture

## Expected Behavior
should have text 
@ 2012-2020

## Current Behavior
@ 2012-2019

## Steps to Reproduce
start processing

## Your Environment
* Processing version:
3.5.4
* Operating System and OS version:
win 10

## Description
When using pixelDensity(2) I ran into a few strange things, each with an acceptable workaround, but for the record:

**Issue 1: pixelDensity x PDF scaling**
With pixelDensity(2) enabled, PDF exports using offscreen buffers like beginRecord() and createGraphics(PDF) need to be scaled by 0.5 (1 / float(pixelDensity)) to have the expected result.  

To reproduce:
```
import processing.pdf.*;

void settings()
{
  pixelDensity(2);
  size(500, 500);
}

void setup()
{
  beginRecord(PDF, "test.pdf");

  //scale(1 / float(pixelDensity)); // uncomment to get expected pdf output
  background(0, 255, 0);
  rect(0, 0, width, height, 100, 100, 100, 100);

  endRecord();
}

void draw() {}

void exportUsingPGraphics()
{
  PGraphics pdf = createGraphics(width, height, PDF, "test_usingpgraphics.pdf");
  pdf.beginDraw();
  pdf.background(0, 0, 255);
  //pdf.scale(1 / float(pixelDensity)); // uncomment to get expected pdf output
  pdf.fill(255, 0, 0);
  pdf.rect(0, 0, width, height, 100, 100, 100, 100);
  pdf.dispose();
  pdf.endDraw();
}

void keyReleased()
{
  exportUsingPGraphics();
}

```

**Issue 2 : background(PImage)**
With pixelDensity(2) enabled, trying to set a PImage as the background image using background(PImage) results in the compiler complaining that the image is not set to the sketch dimensions when an image is used of the exact values of width and height. When loading an image of 2x the sketch resolution the sketch will execute, yet the image will be scaled twice the expected size and only show the top left quadrant.

To reproduce:
```
PImage bgImage;

void settings()
{
  pixelDensity(2);
  
  bgImage = loadImage("bg.png");
  size(bgImage.width, bgImage.height);
  
  // the below allows the sketch to load, but will display 25% of the image:
  //bgImage = loadImage("bg_2x.png");
  //size(bgImage.width/2, bgImage.height/2);
}

void setup()
{
  background(bgImage);
}
```

## Your Environment
* Processing version: 3.5.3
* Operating System and OS version: macOS 10.14.5 (18F203)
https://github.com/processing/processing/blob/d6b30602a703e1d0280392c54794486ee34bca8c/java/src/processing/mode/java/JavaEditor.java#L1561

If `code` is `null`, the next line in `stripBreakpointComments` will throw a `NullPointerException`.

**Replicate**

1. `mkdir $HOME/dev/processing/npe`
1. `cd $HOME/dev/processing/npe`
1. `echo "void setup() {}" > npe.pde`
1. `touch Test.java`
1. `ln -s Test.java Test2.java`
1. `rm Test.java`
1. Start Processing
1. Open `npe.pde`

**Expected**

Broken symbolic link is ignored.

**Actual**

![npe](https://user-images.githubusercontent.com/2131950/71777459-189eb000-2f55-11ea-89ee-9bf7f1f8f334.png)

The print and println statements do not show up in the console. Errors have no problem showing up. The sample code below works fine on other machines, but not on this one. I've compared preferences and the preference file with another computer and there is no difference. I've uninstalled and reinstalled. Other than getting another computer, I don't know where else to look.

Linux Mint 19.1
Cinnamon 4.0.10
Linux Kernel 4.15.0-66-genericCinnamonCinnamon
Lenovo ThinkPad T430
Processing 3.5.3

Code:

int count = 0;
void setup() {
}
void draw() {
  print("Hello World!   ");
  println(count++);
}

<!--- ** For coding questions, please use https://forum.processing.org ** -->
<!--- ** This form is only for bugs in the software & feature requests ** -->

<!--- ** Also be sure to read the troubleshooting page first: ** -->
<!--- ** https://github.com/processing/processing/wiki/Troubleshooting ** -->

<!--- ** Before posting, please search Issues for duplicates  ** --> 

## Description
Every time that I enter Processing 3 in both 32-bit and 64-bit versions, the ribbon text and dialog text are complete gibberish.
<!--- Use a title that describes what is happening. -->
<!--- Give a description of the proposed change. -->

## Expected Behavior
<!--- Bug? Tell us what you were expecting. -->
<!--- Improvement? Tell us how you’d like it to work. -->
I was expecting all the ribbon and dialog text to look normal so that i can work easily and navigate efficiently.

## Current Behavior
<!--- Explain the difference from current behavior. -->
All text that is seen on the ribbons and dialogs (except the text in the main editor section) is corrupted, and I can't seem to find a fix for this.
![image](https://user-images.githubusercontent.com/35157665/70668395-7fc09180-1c41-11ea-9b0f-97dd274153f9.png)
![image](https://user-images.githubusercontent.com/35157665/70668741-5d7b4380-1c42-11ea-8684-1ebac2c83b0e.png)

This issue happens on both 32-bit and 64-bit versions.


## Steps to Reproduce
<!--- Provide an unambiguous set of steps to reproduce. -->
<!--- Including code will make it more likely to be fixed. -->
1. Open Processing 3.5.3
2. Wait for it to load up.
3. Bam, most of the text is corrupted.
This bug is happening 100% of the time. It's strange that this is only happening on my computer. I have used Processing 3 on other computers however i'm getting some really strange results on this computer.

## Your Environment
<!--- Include details about your environment. -->
<!--- Thousands of people use Processing every day and may not have --> 
<!--- this issue, this might give us clues about why you’re seeing it. -->
* Processing version: 3.5.3
* Operating System and OS version: Windows 10 Home, 64-bit, Build 17763
* Other information:
Processor is Intel Core II Quad CPU Q9400 @2.66GHZ \
Manufacturer of PC: Hewlett-Packard (HP) \
BIOS: Hewlett-Packard 786G1 - 2009-03-05 \

<!--- ** For coding questions, please use https://forum.processing.org ** -->
<!--- ** This form is only for bugs in the software & feature requests ** -->

<!--- ** Also be sure to read the troubleshooting page first: ** -->
<!--- ** https://github.com/processing/processing/wiki/Troubleshooting ** -->

<!--- ** Before posting, please search Issues for duplicates  ** --> 

## Description
<!--- Use a title that describes what is happening. -->
<!--- Give a description of the proposed change. -->
When trying to create a circle shaped audio visualizer with curved vertecies. I found a bug that the when using endShape(CLOSE) to end the circle the last and the first vertex are getting closes in a straight line and not like expected in a curved one.

## Expected Behavior
<!--- Bug? Tell us what you were expecting. -->
<!--- Improvement? Tell us how you’d like it to work. -->
When I use endShape(CLOSE) the shape should be closed with a curved line not a straight one.

## Current Behavior
<!--- Explain the difference from current behavior. -->
The shape gets closed with a straight line.

## Steps to Reproduce
<!--- Provide an unambiguous set of steps to reproduce. -->
<!--- Including code will make it more likely to be fixed. -->
1. beginShape()
2. Add some vertecies with the curveVertex() function
3. Use endShape(CLOSE)
4. You will see that the shape gets closed with a straight line

## Your Environment
<!--- Include details about your environment. -->
<!--- Thousands of people use Processing every day and may not have --> 
<!--- this issue, this might give us clues about why you’re seeing it. -->
* Processing version: 3.5.3
* Operating System and OS version: Ubuntu 14.04

## Possible Causes / Solutions
<!--- Optionally, ideas on how to implement the change. -->
-

## Same Bug in P5.js
I found the same bug in the p5.js Issue page.

Here's the link: https://github.com/processing/p5.js/issues/3352
This is my first time contributing here, so please let me know if there's anything I can do better.

I was looking through the Processing docs to find the info for a [function](https://processing.org/reference/image_.html) that I saw someone use in their code, but was surprised to find that the cropping capability using the image() function had no documentation. So this is me trying to include it! If this looks good, I'll also be opening a pull request in the processing/processing-docs repo to update the description in the xml.




**ant run**

**error**
"Downloader has been compiled by a more recent version of the Java Runtime (class file version 54.0), this version of the Java Runtime only recognizes class file versions up to 52.0"

In documentation to setup project its clearly mentioned that Java 8 is required and that's what I have but the error says that "Downloader.class" has class file version of 54 which requires Java 10 to compile

Java -fullversion
java full version "1.8.0_202-b08"

javac -fullversion
javac full version "1.8.0_202-b08"

I first had a different version of Java 8 but now its java 8u202, Shifting to java 10 might work but that would be against documentation.




How to specify a list of dependencies that have to be installed before developing a sketch? I understand that if you export the sketch for others it will include them but is there a Processing equivalent of Python's pip package manager?

Right now I'm thinking of adding a list of dependencies that they can add through the GUI library installed but it doesn't feel quite right.

