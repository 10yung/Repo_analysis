We have our application deployed in Kubernetes with Nginx+ \
When we use just a single replica (pod) the socket.io client establishes connection and receives data.

But when we add multiple pods with load balancing the socket.io client tries to connect and then disconnects quickly with xhr error.

```
[2020-01-16T19:10:50.031Z] ERROR: local server/17108 on TEST: Connection error
  Error: xhr poll error
      at XHR.Transport.onError (C:\Users\TEST\Desktop\Projects\broker-client\node_modules\engine.io-client\lib\transport.js:67:13)
      at Request.<anonymous> (C:\Users\TEST\Desktop\Projects\broker-client\node_modules\engine.io-client\lib\transports\polling-xhr.js:130:10)
      at Request.Emitter.emit (C:\Users\TEST\Desktop\Projects\broker-client\node_modules\component-emitter\index.js:133:20)
      at Request.onError (C:\Users\TEST\Desktop\Projects\broker-client\node_modules\engine.io-client\lib\transports\polling-xhr.js:311:8)
      at Timeout._onTimeout (C:\Users\TEST\Desktop\Projects\broker-client\node_modules\engine.io-client\lib\transports\polling-xhr.js:258:18)
```

### The kind of change this PR does introduce

* [ ] a bug fix
* [ ] a new feature
* [x] an update to the documentation
* [ ] a code change that improves performance
* [ ] other

### Current behaviour
2018 has passed, now is 2020, license year need to update.

### New behaviour
Update license year.

### Other information (e.g. related issues)
[#3153 ](https://github.com/socketio/socket.io/pull/3153)





Slack link is now working.
https://slackin-socketio.now.sh

1. How do I get a user's online status? (怎么获取一个用户的在线状态？)
2. How to get whether a message is sent successfully? (怎么获取一条信息是否发送成功？)
# You want to:

* [x] report a *bug*
* [ ] request a *feature*

### Current behaviour

When using a middleware and closing the server during a 'connection' event, the server does not close immediately. The 'close' event is emitted, but the nodejs process exits only after a timeout of a few minutes.

This behavior only appear when both conditions are set:
- a middleware has been set using `socket.use()`.
- the server is closed during a `connection` event, or shortly after.
  During my tests, using `server.close()` on a setTimeout of 10ms triggers the bug, but a setTimeout of 500ms does not.

### Steps to reproduce

Running the following scripts at the same time (server.js then client.js)

`client.js`
```js
let WsClient = require('socket.io-client').Manager;

let client = new WsClient('http://localhost:9999', {autoConnect: false});
client.on('close', () => console.log('client event: close'));

client.connect(err => {
  if (err) {
    console.log('error', err);
    process.exit(1);
  }
  console.log('client has been connected');
  client.close();
});
```

`server.js`
```js
let server = require('socket.io')();
server.use((socket, next) => next());

server.on('connection', () => console.log('server event: connection'));
server.on('close', () => console.log('server event: close'));
server.listen(9999);

console.log('Wait for connection ...');
server.once('connection', () => {
  console.log('client has been connected');
  console.log('will close server now ...');
  server.close(() => {
    console.log('server closed!');
  });
});
```

The server.js result is:
```
Wait for connection ...
server event: connection
client has been connected
will close server now ...
server closed!
```
Then, the script wait a few minutes before exiting.


### Expected behaviour

NodeJs should exit instantly after the "server closed!" message.

### Setup
- OS: Linux
- NodeJs: v12.14.1
- Socket.io: 2.3.0
- Socket.io-client: 2.3.0

It should be easier to learn the whole structure of the project
a error like this 

### You want to:

* [x] report a *bug*

### Current behaviour

The socket is connecting. And does not reproduce events. And to be more precise, it only reproduces the trip event.


*What is actually happening?*

I expect logging when connecting. But the socket just plugs in. And after that, it does not go about other events at all.
### Steps to reproduce (if the current behaviour is a bug)
I am ready to throw the code. Or you can copy my repository. To make sure his ability is not working.

### Expected behaviour
I expect socket.on () events to be visible to the server.
### Setup
Ubuntu 18.04

- chrome last version:
- socket.io version:
 "socket.io-client": "^2.3.0",
 "socket.io": "^2.3.0",

### Other information (e.g. stacktraces, related issues, suggestions how to fix)
If you ask, I can throw stacktraces.



**Note**: for support questions, please use one of these channels: [stackoverflow](http://stackoverflow.com/questions/tagged/socket.io) or [slack](https://socketio.slack.com)

For bug reports and feature requests for the **Swift client**, please open an issue [there](https://github.com/socketio/socket.io-client-swift).

For bug reports and feature requests for the **Java client**, please open an issue [there](https://github.com/socketio/socket.io-client-java).

### You want to:

* [x] report a *bug*
* [ ] request a *feature*

### Current behaviour

*What is actually happening?*

### Steps to reproduce (if the current behaviour is a bug)

**Note**: the best way (and by that we mean **the only way**) to get a quick answer is to provide a failing test case by forking the following [fiddle](https://github.com/socketio/socket.io-fiddle).

### Expected behaviour

*What is expected?*

### Setup
- OS:
- browser:
- socket.io version:

### Other information (e.g. stacktraces, related issues, suggestions how to fix)



how to handshake through a gateway ?

 
there is a way to do ?




I have a problem between:

Server-socket.io <----> Gateway <------> front-end

how to handshake socket.io server through gateway ?

//My Gateway:

const http = require('http');
const express = require('express')
const httpProxy = require('express-http-proxy')
const app = express()
const cookieParser = require('cookie-parser');
const logger = require('morgan');
const helmet = require('helmet');

const socketServiceProxy = httpProxy('http://localhost:8081');

app.use(logger('dev'));
app.use(helmet());
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(function(request, response, next) {
//response.header("Access-Control-Allow-Origin", "*");
response.header("Access-Control-Allow-Origin", "http://localhost:3000");
response.header("Access-Control-Allow-Credentials", true);
response.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
next();
});

app.options('/socket', (req, res, next) => {
socketServiceProxy(req, res, next);

})

const server = http.createServer(app);
const port = 4000;
server.listen(port, () => {
console.log(## - API-GATEWAY(Node.JS) - ## Server started on port ${port}!);
});

//My front:
const socket = socketIOClient('http://localhost:4000/socket/', {

        transports: ['polling-xhr', 'websocket'],
        query: {
          socketId: personId,
        },
      });
//My Backend

https://github.com/AhCamargo/backend-box-transfer/blob/master/app.js



