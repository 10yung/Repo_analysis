Possibly related to #55.  With:
```r
> foo <- function(...) get("...", mode="...", envir=environment())
> x <- foo(a=1, b=2)
> str(x)
length 2, mode "...": 1 2
> str(x[1][[1]])
 promise to  NULL
```
you get:
```r
> pryr::inspect(x)
type: 17Error in inspect_(x, env) : Unimplemented type
Enter a frame number, or 0 to exit   

1: pryr::inspect(x)
2: inspect_(x, env)
3: stop(list(message = "Unimplemented type", call = inspect_(x, env), cppstack
...
```

```r
> pryr::inspect(x[1])
<VECSXP 0x5562f6e81d60>
  <PROMSXP 0x5562f6bae7f0>
  value: 
    [REALSXP 0x5562f6dd49a8]
  code: 
    <REALSXP 0x5562f6dd49a8>
  env: 
    NULL
```
    
```r
> sessionInfo()
R version 3.6.1 Patched (2019-10-31 r77348)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Ubuntu 18.04.3 LTS

Matrix products: default
BLAS:   /home/hb/software/R-devel/R-3-6-branch/lib/R/lib/libRblas.so
LAPACK: /home/hb/software/R-devel/R-3-6-branch/lib/R/lib/libRlapack.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C              
 [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8    
 [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                 
 [9] LC_ADDRESS=C               LC_TELEPHONE=C            
[11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.6.1   pryr_0.1.4       magrittr_1.5     tools_3.6.1     
[5] Rcpp_1.0.2       stringi_1.4.3    codetools_0.2-16 stringr_1.4.0
```

I fresh installed pryr-0.1.4 from CRAN (rstudio mirror) on MacOSX (10.12.6 Sierra) under RStudio-1.1.423.
Typying `??pryr` or `help('pryr')` returns no help ("No results found").

--Leo
I got 

```sh
ccache g++ -I/usr/share/R/include -DNDEBUG  -I"/usr/local/lib/R/site-library/Rcpp/include"    -fpic  -g -O3 -Wall -pipe   -march=native -c promise.cpp -o promise.o
promise.cpp: In function ‘std::vector<Rcpp::RObject_Impl<Rcpp::PreserveStorage> > explicitDots(Rcpp::Environment)’:
promise.cpp:73:31: warning: ‘el’ may be used uninitialized in this function [-Wmaybe-uninitialized]
     out.push_back(makeExplicit(el));
                   ~~~~~~~~~~~~^~~~
```

with g++-7.2, and the suggested change makes the warning go away:

ccache g++ -I/usr/share/R/include -DNDEBUG  -I"/usr/local/lib/R/site-library/Rcpp/include"    -fpic  -g -O3 -Wall -pipe   -march=native -c object_size.cpp -o object_size.o
ccache g++ -I/usr/share/R/include -DNDEBUG  -I"/usr/local/lib/R/site-library/Rcpp/include"    -fpic  -g -O3 -Wall -pipe   -march=native -c promise.cpp -o promise.o
ccache gcc -I/usr/share/R/include -DNDEBUG  -I"/usr/local/lib/R/site-library/Rcpp/include"    -fpic  -g -O3 -Wall -pipe   -std=gnu99 -march=native -c size-info.c -o size-info.o
ccache g++ -I/usr/share/R/include -DNDEBUG  -I"/usr/local/lib/R/site-library/Rcpp/include"    -fpic  -g -O3 -Wall -pipe   -march=native -c slice.cpp -o slice.o
```
```
> Arith
groupGenericFunction for "Arith" defined from package "base"
  belonging to group(s): Ops 

function (e1, e2) 
standardGeneric("Arith")
<bytecode: 0x0000000011d89498>
<environment: 0x0000000007abc788>
Methods may be defined for arguments: e1, e2
Use  showMethods("Arith")  for currently available ones.
> isGeneric('Arith')
[1] TRUE
> ftype(Arith)
[1] "function"
```
My initial motivation was for using `mem_used` in dynamic prompt, e.g. 

```
addTaskCallback(function(expr, value, ok, visible) {
  prompt <- sprintf( "(%s) %s [%s] > ", 
    capture.output(print(pryr::mem_used())), 
    format( Sys.time(), "%H:%M:%S" ), 
    getwd()
  ) 
  options( prompt = prompt)
  TRUE
})
```

but without `capture.output` ...


Closes #48 (hopefully). `pryr` is somewhat broken for me without this. 
Lots of newer NOTEs in devtools::check(), mainly `no visible global function`, but also some `used in a situation where it does not exist` which may warrant attention.
Tests all pass.
I found `is_promise2` via [this SO answer](http://stackoverflow.com/a/25148366/1274516) and it seems to be the only way to check that `delayedAssign` is working as expected outside of the GlobalEnv. Is there a reason it's not exported?

My use case:

```r
e <- new.env(parent = emptyenv())
delayedAssign("var", 1:1e10, assign.env = e)

pryr::is_promise(e$var)
# Error: cannot convert to symbol (SYMSXP)

pryr:::is_promise2("var", e)
# [1] TRUE
```
Replace "http://svn.r-project.org/R/trunk/src/main/names.c" by "https://svn.r-project.org/R/trunk/src/main/names.c" — I don’t fully understand why, but pryr::names_c() raises `Error in file(con, "r") : cannot open the connection` with the http address. With https it seems to work fine.
I noticed that  DOTSXP is not handled in pryr::object_size

Here is an example:
```
library(caret)
train.flag <- createDataPartition(y=iris$Species,p=0.5,list=FALSE)
training <- iris[train.flag,]

modfit <- train(Species~.,method="rpart",data=training)
pryr::object_size(modfit$finalModel$call$formula)

```

```
type: 17
Error: Unimplemented type
```

See https://github.com/hadley/pryr/blob/master/src/object_size.cpp#L149