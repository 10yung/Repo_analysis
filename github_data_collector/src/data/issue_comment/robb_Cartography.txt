Header 'Cartography-Swift.h' not found
topLayoutGuide' was deprecated in Mac Catalyst 13.0: Use view.safeAreaLayoutGuide.topAnchor instead of topLayoutGuide.bottomAnchor

same for bottomLayoutGuide
This is a doc update with the usage hints, based on the problems found in Xcode 11 and as stated in this Pull Request #314 
Because `constrain` function is defined in `CommonUISDK` looks like XCode11 cannot compile Cartography pod anymore.
Renaming `constrain` functions to `cg_constrain` seems to fix the problem

closes: https://github.com/robb/Cartography/issues/313
May I know how to resolve this error: 

- Error: Swift Compiler Error Group
 Ambiguous reference to member 'constrain(dimension:withConstant:relation:)'
- Xcode: Version 11.0 beta 5 (11M382q)

Thanks so much
Module compiled with Swift 4.2 cannot be imported by the Swift 5.0 compiler:
Trying to build this using Carthage on XCode 9.4.1.

Getting the following errors:

```swift
public typealias LayoutAttribute = NSLayoutConstraint.Attribute
                                   ~~~~~~~~~~~~~~~~~~ ^
/Users/wellington/Documents/Code/Censio/iOS/censio-ios-app/Code/Carthage/Checkouts/Cartography/Cartography/Context.swift:12:54: error: 'Relation' is not a member type of 'NSLayoutConstraint'
public typealias LayoutRelation = NSLayoutConstraint.Relation
                                  ~~~~~~~~~~~~~~~~~~ ^
/Users/wellington/Documents/Code/Censio/iOS/censio-ios-app/Code/Carthage/Checkouts/Cartography/Cartography/LayoutProxy.swift:18:64: error: 'Attribute' is not a member type of 'NSLayoutConstraint'
    internal func dimension(with attribute: NSLayoutConstraint.Attribute) -> Dimension {
                                            ~~~~~~~~~~~~~~~~~~ ^
/Users/wellington/Documents/Code/Censio/iOS/censio-ios-app/Code/Carthage/Checkouts/Cartography/Cartography/LayoutProxy.swift:22:59: error: 'Attribute' is not a member type of 'NSLayoutConstraint'
    internal func edge(with attribute: NSLayoutConstraint.Attribute) -> Edge {
                                       ~~~~~~~~~~~~~~~~~~ ^
```

Did you mean to use `NSLayoutAttribute`.

Help!
Right now we must use the `#available(iOS x, *)` preprocessor to switch between pre-iOS 11.0 `car_topLayoutGuide` / `car_bottomLayoutGuide` and post-iOS 11.0 `safeAreaLayoutGuide`.

Isn't there any cleaner way of defining those types of constraints?
Invalid redeclaration of '~', 
Xcode 9.4.1, 
swift 4.1,
pod 'Cartography'

can you give me any advise? thanks very much.
![image](https://user-images.githubusercontent.com/696493/43265473-68206940-911b-11e8-8d5a-3374df49d3f8.png)

Addresses #215.

This is maybe not the best solution (not DRY) but with the code below we've seen swift type checking times go down from 8800ms+ to 39ms (example at bottom).

With this PR I wanted to start a discussion around using custom operators. As I understand it, the problem is the overloading of common operators like `==`, `-` and `+` causing confusion for the type checker and massive compile times.

Other than tests, not sure what is missing but I'd be happy to make any improvements.

**Example code**

A fairly complex example, here seen with the updated syntax.

```
constrain([self, titleLabel, dialCodeButton, phoneTextField, submitButton]) { proxies in
            var views = proxies
            let superview = views.removeFirst()
            let titleLabel = views.removeFirst()
            let dialCodeButton = views.removeFirst()
            let phoneTextField = views.removeFirst()
            let submitButton = views.removeFirst()

            for view in [titleLabel, submitButton] {
                view.left ~== superview.left ~+ GUI.Constant.tableInset
                view.right ~== superview.right ~- GUI.Constant.tableInset
            }

            dialCodeButton.left ~== superview.left ~+ GUI.Constant.tableInset
            phoneTextField.left ~== dialCodeButton.right ~+ padding
            phoneTextField.right ~== superview.right ~- GUI.Constant.tableInset

            dialCodeButton.width ~== (superview.width ~- (GUI.Constant.tableInset * 2)) ~* 0.2
            phoneTextField.width ~== (superview.width ~- (GUI.Constant.tableInset * 2)) ~* 0.8

            submitButton.height ~== GUI.Constant.buttonHeight
            phoneTextField.height ~== GUI.Constant.buttonHeight
            dialCodeButton.height ~== GUI.Constant.buttonHeight

            titleLabel.top ~== (superview.top + GUI.Constant.tableInset)
            phoneTextField.top ~== (titleLabel.bottom + GUI.Constant.tableInset)
            dialCodeButton.top ~== (titleLabel.bottom + GUI.Constant.tableInset)
            submitButton.top ~== (phoneTextField.bottom + padding)
        }
```