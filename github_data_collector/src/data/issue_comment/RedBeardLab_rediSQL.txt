I setup Redis Replication Master-Slave by loading rediSQL_0.6.0.so module on both.I have configure redis Master for Write operation and Slave for only Read. 

whenever I write data on master, these changes are not reflecting on slave. But After restarting master those data are sync with slave.   

I Check Replication Write/Read operation using SET and GET command. When i set any key in master using set command, this key can read using get command immediately on slave without restart master service.

For more clear Understanding

Master output
-------------
[root@test1 ~]# redis-cli 
127.0.0.1:6379> REDISQL.QUERY xyz "select * FROM tbl_test"
 1)  1) (integer) 10
     2) "?????? 1"
     3) (integer) 44
     4) "172.16.16.84"
     5) (integer) 32
     6) (integer) 5060
     7) ""
     8) ""
     9) ""
    10) ""
    11) "UDP"
    12) (integer) 0
    13) ""
    14) "44:0"
    15) "IP"
    16) ""
    17) ""
    18) ""

Slave output
---------------

[root@test1 ~]# redis-cli -p 63790
127.0.0.1:63790> REDISQL.QUERY xyz "select * FROM tbl_test"
 1)  1) (integer) 10
     2) "?????? 1"
     3) (integer) 44
     4) "172.16.16.84"
     5) (integer) 32
     6) (integer) 5061
     7) ""
     8) ""
     9) ""
    10) ""
    11) "UDP"
    12) (integer) 0
    13) ""
    14) "44:0"
    15) "IP"
    16) ""
    17) ""
    18) ""


Here value 5060 and 5061 is different in master and slave.

Can you help to resolved this issue
Hello team
At your main site - i can see info about PHP examples and link to this repo, but here i can find it

Can you please share to me example of PHP 7+ ?

Thanks
This issues will hopefully serve 

RediSQL is designed to use one thread for each database. This simplify a lot the design but it limits the throughput a lot.
There are several cases where multiple thread for a single database is welcome, mostly for read intensive workload.

Using multiple connection is possible, indeed we already have a function to create another connection and thread that point to the original connection.

Moreover, we showed, that is possible to have multiple connection acting on the same database with the REDISQL.EXEC command enhanced with the `USING` feature.

To recap, in RediSQL use `REDISQL.CREATE_DB` to create a new database and spawn a thread that act on this database.

```
REDISQL.CREATE_DB DB
```
(This create a connection to an in-memory database, and spawn a thread that manage such connection.)

I added a new command: `REDISQL.ADD_CONNECTION` that allow to create a new connection to the original database.

```
REDISQL.ADD_CONNECTION DB READ01
```
(This spawn a new thread, that holds a connection to the same database mentioned above.)

Also, the `USING` features was implemented.

```
REDISQL.EXEC DB "select 1;"
```
This one use the original connection associate with `DB`.
```
REDISQL.EXEC DB "select 2;" USING READ01
```
This use the new connection, just created with `REDISQL.ADD_CONNECTION`.


Now we would like to implement the USING features also for `REDISQL.EXEC_STATEMENT`, `REDISQL.CREATE_STATEMENT`, `REDISQL.DELETE_STATEMENT` and `REDISQL.UPDATE_STATEMENT`.

All the work was done in the remove_vtab branch: https://github.com/RedBeardLab/rediSQL/compare/remove_vtab 
------ STACK TRACE ------
EIP:
0   redis-server                        0x000000010ca4172e RM_GetThreadSafeContext + 206

Backtrace:
0   redis-server                        0x000000010ca0c8de logStackTrace + 110
1   redis-server                        0x000000010ca0ccad sigsegvHandler + 253
2   libsystem_platform.dylib            0x00007fff7143ab5d _sigtramp + 29
3   ???                                 0x00007fba86c474e1 0x0 + 140439101666529
4   libredis_sql.dylib                  0x000000010ce98518 _ZN11redisql_lib10redis_type7Context11thread_safe17h173587aec900936fE + 24
5   libredis_sql.dylib                  0x000000010cc0ec20 _ZN11redisql_lib5redis12return_value17h8eb3fcc5ed17fb52E + 48
6   libredis_sql.dylib                  0x000000010cc0f9d2 _ZN11redisql_lib5redis18listen_and_execute17h7c893ecfc6c5d1e8E + 2274
7   libredis_sql.dylib                  0x000000010cc0d4ea _ZN3std10sys_common9backtrace28__rust_begin_short_backtrace17h36b1ce80d340c846E.llvm.1591913181271004175 + 74
8   libredis_sql.dylib                  0x000000010cc17f50 _ZN3std9panicking3try7do_call17h8497b91ada36b121E.llvm.4219096736137588322 + 64
9   libredis_sql.dylib                  0x000000010d047a3f __rust_maybe_catch_panic + 31
10  libredis_sql.dylib                  0x000000010cc19cb7 _ZN4core3ops8function6FnOnce40call_once$u7b$$u7b$vtable.shim$u7d$$u7d$17haec6bce7634e4ee6E + 151
11  libredis_sql.dylib                  0x000000010d043eae _ZN83_$LT$alloc..boxed..Box$LT$F$GT$$u20$as$u20$core..ops..function..FnOnce$LT$A$GT$$GT$9call_once17h0c87090ae5188728E + 62
12  libredis_sql.dylib                  0x000000010d04553e _ZN3std10sys_common6thread12start_thread17hb442747e0ab69dd0E + 142
13  libredis_sql.dylib                  0x000000010d0448f9 _ZN3std3sys4unix6thread6Thread3new12thread_start17h7e0ebc55f14d4c40E + 9
14  libsystem_pthread.dylib             0x00007fff714432eb _pthread_body + 126
15  libsystem_pthread.dylib             0x00007fff71446249 _pthread_start + 66
16  libsystem_pthread.dylib             0x00007fff7144240d thread_start + 13
Also reported in the redis project but it is related to inserting data into redis using rediSQL.


I have a redis-server instance running on a raspberry PI 4 with 2Gb of memory. REDIS was running normally until I started using it today by creating a rediSQL DB, create a table then attempting to put data into this table.

At the attempt to insert data, I got an "Error: Connection reset by peer" which is when redis crashed. This is my console:

127.0.0.1:6379> REDISQL.CREATE_DB DB
OK
127.0.0.1:6379> REDISQL.EXEC DB "CREATE TABLE ttyRoute( column1 CHAR(2), column1 CHAR(3), column3 CHAR(2), column4 VARCHAR(5), column5 CHAR(4), column6 CHAR(4), options TEXT)"

DONE
(integer) 0
127.0.0.1:6379> REDISQL.EXEC DB "INSERT INTO ttyRoute VALUES(('XX', 'YYY', 'ZZ',,, 'QUE1');"
Error: Connection reset by peer
(3.23s)
Redis error log:

=== REDIS BUG REPORT START: Cut & paste starting from here ===
28498:M 24 Aug 2019 17:55:55.140 # Redis 5.0.3 crashed by signal: 11
28498:M 24 Aug 2019 17:55:55.140 # Crashed running the instruction at: 0xb6f6ef50
28498:M 24 Aug 2019 17:55:55.140 # Accessing address: 0x16
28498:M 24 Aug 2019 17:55:55.140 # Failed assertion: (:0)

------ STACK TRACE ------
EIP:
/usr/lib/arm-linux-gnueabihf/libarmmem-v7l.so(+0x1f50)[0xb6f6ef50]

Backtrace:
/usr/bin/redis-server 127.0.0.1:6379(logStackTrace+0x3c)[0x7ad30]
/usr/bin/redis-server 127.0.0.1:6379(sigsegvHandler+0x8c)[0x7b478]
/lib/arm-linux-gnueabihf/libc.so.6(__default_rt_sa_restorer+0x0)[0xb6c24130]

------ INFO OUTPUT ------

Server

redis_version:5.0.3
redis_git_sha1:00000000
redis_git_dirty:0
redis_build_id:afa0decbb6de285f
redis_mode:standalone
os:Linux 4.19.58-v7l+ armv7l
arch_bits:32
multiplexing_api:epoll
atomicvar_api:atomic-builtin
gcc_version:8.3.0
process_id:28498
run_id:504ec3a7990435a686fba198748ec677e20732cc
tcp_port:6379
uptime_in_seconds:525000
uptime_in_days:6
hz:10
configured_hz:10
lru_clock:6352267
executable:/usr/bin/redis-server
config_file:/etc/redis/redis.conf

Clients

connected_clients:1
client_recent_max_input_buffer:2
client_recent_max_output_buffer:0
blocked_clients:1

Memory

used_memory:384752
used_memory_human:375.73K
used_memory_rss:13422592
used_memory_rss_human:12.80M
used_memory_peak:384752
used_memory_peak_human:375.73K
used_memory_peak_perc:106.03%
used_memory_overhead:341554
used_memory_startup:291928
used_memory_dataset:43198
used_memory_dataset_perc:46.54%
allocator_allocated:4176480
allocator_active:23199744
allocator_resident:35258368
total_system_memory:2033692672
total_system_memory_human:1.89G
used_memory_lua:37888
used_memory_lua_human:37.00K
used_memory_scripts:0
used_memory_scripts_human:0B
number_of_cached_scripts:0
maxmemory:50000000
maxmemory_human:47.68M
maxmemory_policy:allkeys-lru
allocator_frag_ratio:5.55
allocator_frag_bytes:19023264
allocator_rss_ratio:1.52
allocator_rss_bytes:12058624
rss_overhead_ratio:0.38
rss_overhead_bytes:-21835776
mem_fragmentation_ratio:41.69
mem_fragmentation_bytes:13100656
mem_not_counted_for_evict:0
mem_replication_backlog:0
mem_clients_slaves:0
mem_clients_normal:49574
mem_aof_buffer:0
mem_allocator:jemalloc-5.1.0
active_defrag_running:0
lazyfree_pending_objects:0

Persistence

loading:0
rdb_changes_since_last_save:2
rdb_bgsave_in_progress:0
rdb_last_save_time:1566633010
rdb_last_bgsave_status:ok
rdb_last_bgsave_time_sec:0
rdb_current_bgsave_time_sec:-1
rdb_last_cow_size:1007616
aof_enabled:0
aof_rewrite_in_progress:0
aof_rewrite_scheduled:0
aof_last_rewrite_time_sec:-1
aof_current_rewrite_time_sec:-1
aof_last_bgrewrite_status:ok
aof_last_write_status:ok
aof_last_cow_size:0

Stats

total_connections_received:1
total_commands_processed:4
instantaneous_ops_per_sec:0
total_net_input_bytes:317
total_net_output_bytes:14098
instantaneous_input_kbps:0.00
instantaneous_output_kbps:0.00
rejected_connections:0
sync_full:0
sync_partial_ok:0
sync_partial_err:0
expired_keys:0
expired_stale_perc:0.00
expired_time_cap_reached_count:0
evicted_keys:0
keyspace_hits:0
keyspace_misses:0
pubsub_channels:0
pubsub_patterns:0
latest_fork_usec:4675
migrate_cached_sockets:0
slave_expires_tracked_keys:0
active_defrag_hits:0
active_defrag_misses:0
active_defrag_key_hits:0
active_defrag_key_misses:0

Replication

role:master
connected_slaves:0
master_replid:af124dcc86ece7c3db0922e737c42e808602e831
master_replid2:0000000000000000000000000000000000000000
master_repl_offset:0
second_repl_offset:-1
repl_backlog_active:0
repl_backlog_size:1048576
repl_backlog_first_byte_offset:0
repl_backlog_histlen:0

CPU

used_cpu_sys:742.290099
used_cpu_user:1431.282625
used_cpu_sys_children:0.000000
used_cpu_user_children:0.012795

Commandstats

cmdstat_REDISQL.CREATE_DB:calls=1,usec=29226,usec_per_call=29226.00
cmdstat_REDISQL.EXEC:calls=2,usec=325,usec_per_call=162.50
cmdstat_command:calls=1,usec=7570,usec_per_call=7570.00

Cluster

cluster_enabled:0

Keyspace

db0:keys=1,expires=0,avg_ttl=0

------ CLIENT LIST OUTPUT ------
id=3 addr=127.0.0.1:55764 fd=8 name= age=439 idle=0 flags=b db=0 sub=0 psub=0 multi=-1 qbuf=0 qbuf-free=32768 obl=0 oll=0 omem=0 events=r cmd=REDISQL.EXEC

------ REGISTERS ------

------ FAST MEMORY TEST ------
28498:M 24 Aug 2019 17:55:55.151 # Bio thread for job type #0 terminated
28498:M 24 Aug 2019 17:55:55.152 # Bio thread for job type #1 terminated
28498:M 24 Aug 2019 17:55:55.152 # Bio thread for job type #2 terminated
*** Preparing to test memory region ed000 (49152 bytes)
*** Preparing to test memory region b0ee0000 (4390912 bytes)
*** Preparing to test memory region b1330000 (393216 bytes)
*** Preparing to test memory region b13a0000 (65536 bytes)
*** Preparing to test memory region b13f0000 (917504 bytes)
*** Preparing to test memory region b14f0000 (2424832 bytes)
*** Preparing to test memory region b1750000 (196608 bytes)
*** Preparing to test memory region b17a0000 (327680 bytes)
*** Preparing to test memory region b1800000 (655360 bytes)
*** Preparing to test memory region b18de000 (8192 bytes)
*** Preparing to test memory region b18e0000 (327680 bytes)
*** Preparing to test memory region b1950000 (196608 bytes)
*** Preparing to test memory region b19aa000 (24576 bytes)
*** Preparing to test memory region b19b0000 (262144 bytes)
*** Preparing to test memory region b19f0000 (6422528 bytes)
*** Preparing to test memory region b2010000 (1966080 bytes)
*** Preparing to test memory region b2200000 (2097152 bytes)
*** Preparing to test memory region b2400000 (2162688 bytes)
*** Preparing to test memory region b2610000 (1507328 bytes)
*** Preparing to test memory region b2780000 (262144 bytes)
*** Preparing to test memory region b27ce000 (2097152 bytes)
*** Preparing to test memory region b29cf000 (2097152 bytes)
*** Preparing to test memory region b2bd0000 (2097152 bytes)
*** Preparing to test memory region b2dd0000 (1048576 bytes)
*** Preparing to test memory region b2f10000 (458752 bytes)
*** Preparing to test memory region b2fb0000 (983040 bytes)
*** Preparing to test memory region b30d0000 (655360 bytes)
*** Preparing to test memory region b3190000 (196608 bytes)
*** Preparing to test memory region b3200000 (983040 bytes)
*** Preparing to test memory region b3310000 (655360 bytes)
*** Preparing to test memory region b33d0000 (196608 bytes)
*** Preparing to test memory region b3420000 (1245184 bytes)
*** Preparing to test memory region b3560000 (3211264 bytes)
*** Preparing to test memory region b3880000 (2097152 bytes)
*** Preparing to test memory region b3a80000 (5767168 bytes)
*** Preparing to test memory region b4005000 (2097152 bytes)
*** Preparing to test memory region b47bf000 (16384 bytes)
*** Preparing to test memory region b47ee000 (8388608 bytes)
*** Preparing to test memory region b4fef000 (8388608 bytes)
*** Preparing to test memory region b57f0000 (8388608 bytes)
*** Preparing to test memory region b5ff0000 (131072 bytes)
*** Preparing to test memory region b6010000 (10616832 bytes)
*** Preparing to test memory region b6a30000 (524288 bytes)
*** Preparing to test memory region b6bf5000 (8192 bytes)
*** Preparing to test memory region b6d42000 (12288 bytes)
*** Preparing to test memory region b6d6d000 (8192 bytes)
*** Preparing to test memory region b6eca000 (40960 bytes)
*** Preparing to test memory region b6f45000 (4096 bytes)
*** Preparing to test memory region b6f6b000 (8192 bytes)
*** Preparing to test memory region b6fa3000 (8192 bytes)
*** Preparing to test memory region b6fab000 (28672 bytes)
.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O.O
Fast memory test PASSED, however your memory can still be broken. Please run a memory test for several hours if possible.

------ DUMPING CODE AROUND EIP ------
Symbol: (null) (base: (nil))
Module: /usr/lib/arm-linux-gnueabihf/libarmmem-v7l.so (base 0xb6f6d000)
$ xxd -r -p /tmp/dump.hex /tmp/dump.bin
$ objdump --adjust-vma=(nil) -D -b binary -m i386:x86-64 /tmp/dump.bin

=== REDIS BUG REPORT END. Make sure to include from START to END. ===

Let me know if you need anything else.

Ron
Environmet:
virtual-machine ubuntu x86_64 8C 8G
redis5.0 cluster mode,with 3 master nodes,no slave

create db and table sql:
REDISQL.REDISQL.CREATE_DB DB_DEVICE
REDISQL.EXEC DB_DEVICE "create table device_tab (seq TEXT,deviceId TEXT,customerId TEXT,tranName TEXT,time TEXT);"
REDISQL.EXEC DB_DEVICE "create index idx_deviceId on device_tab(deviceId);"

insert shell:
#!/bin/bash
for var in $(seq 1 100000)
do
redis-cli -c -p 6381 REDISQL.EXEC DB_DEVICE "insert into device_tab values('007','did3','2019081304','MonInfoUdt','154006');"
echo $var
done

after insert into the table:
127.0.0.1:6381> REDISQL.EXEC mydb "select count(*) from device_tab;"
1) 1) (integer) 101012

127.0.0.1:6381> info memory
# Memory
used_memory:2117413200
used_memory_human:1.97G
used_memory_rss:2565685248
used_memory_rss_human:2.39G


So i think this cost too many memory.And is there something wrong what i did or is there some way to decrease the memory cost?

By the way,i create the same table and index just use sqlite3 with disk mode.And insert about 100000 records(each is same with above redisql insert record).The disk file is 5.9M.

root@joffier-virtual-machine:/data/sqlite# sqlite3 mydb.sqlite "select count(*) from device_tab"
101757

root@joffier-virtual-machine:/data/sqlite# ls -lh
总用量 5.9M
-rw-r--r-- 1 root root  159 8月  14 14:19 batchInsert.sh
-rw-r--r-- 1 root root 5.9M 8月  14 14:37 mydb.sqlite


Hope your reply sincely. Thank you!



Please provide steps to install rediSQL from source under Centos 7.

thanks

jaison
env:
redis 5.0.3 + redisql 1.0.3

illegal character caused redisql to shutdown?
i checked my data , they are normal. just include null, nan, '' .   i think it is resolved in redisql 1.0.3.
https://github.com/RedBeardLab/rediSQL/issues/66#issuecomment-506282874

![image](https://user-images.githubusercontent.com/6407725/61527063-341d0980-aa4e-11e9-89f1-c4c9fc584c5b.png)

Hi all, 

I am thinking about dropping the virtual table from RediSQL, the one that are created with `REDISQL_TABLES_BRUTE_HASH`.

They are quite complex to maintain, and they don't bring too many benefits I believe.

Is somebody using them? How?

Somebody want to really keep them around?

At the beginning of August (2 weeks from now), if nobody complained, I will decide to drop those virtual table.
Up to now, redisql accumulate all the results in memory, and return all of them together.

This design is all but ideal, but was implemented for simplicity reasons.

Our good friend from #69 discovered that in some real-world case this can lead to nasty problems. (Or at least I reproduce a similar issue.)

It should be possible to avoid the accumulation of the whole result in memory, and instead return an iterator.

This is a quite complex piece of code, and a very good test bench for Rust. Hopefully I will be able to pull also this one.

The code is complex because we need to pass back and forth an instance of a locked raw pointer, it should theorical be possible.

The piece of code concerned is:

https://github.com/RedBeardLab/rediSQL/blob/master/redisql_lib/src/sqlite.rs#L333

Before to move to this, I would like to move to the rust edition 2018.

Then, on a clean codebase, we can work on this.
