Hi all,

This is just a "service message".

For those people who use this library and use [`PHPCompatibility`](https://github.com/PHPCompatibility/PHPCompatibility) in their CI process, there is now a custom ruleset available which can be used to prevent false positives being thrown by `PHPCompatibility` for the native PHP functionality being polyfilled by this repo.

You can find the repo for the `PHPCompatibilityPasswordCompat` ruleset here on Github as well as on Packagist.
* https://github.com/PHPCompatibility/PHPCompatibilityPasswordCompat
* https://packagist.org/packages/phpcompatibility/phpcompatibility-passwordcompat

Hope someone will find it useful :smile: 

P.S.: If anyone is interested in helping us to maintain the ruleset, please [open an issue in the repo](https://github.com/PHPCompatibility/PHPCompatibilityPasswordCompat/issues/new).
105 | ERROR | Function mcrypt_create_iv() is deprecated since PHP 7.1 and removed since PHP 7.2; Use random_bytes() or OpenSSL instead
 105 | ERROR | Extension 'mcrypt' is deprecated since PHP 7.1 and removed since PHP 7.2; Use openssl (preferred) or pecl/mcrypt once available instead
 105 | ERROR | The constant "MCRYPT_DEV_URANDOM" is deprecated since PHP 7.1 and removed since PHP 7.2
Fixed the sentence structure to make it easier to read.
mysql function against string injection not working
When I run the following code in PHP 5.4.45

```php
$password = 'XXX';
$salt = 'XX';
var_dump(password_verify($password, crypt($password, $salt)));
```

I get `false` as result. When I run the same code with PHP's native `password_verify` function, I get `true`
This should be pretty easy to do, since PHPUnit does support *.phpt format. All that is needed is to copy them from php-src and add

```
--INI--
auto_prepend_file=lib/password.php
```

to each test file.

Native password_verify() **does** accept old insecure DES hashes (https://3v4l.org/hKl4X). This pull request re-enables verifying (but not creating) them.

I have tested the password_verify of PHP that does not verify correctly. I am using centOS and PHP version 5.3.3. 
It is always to return true with different passwords when i verify it. Is my code has bug?

Here is my code:

```
$password = 'k32AlGOPqvCzoh*Sp(Hdrr26]M=lQb00R&W=hew|-|([(03vp==A8%m?l=eA2^bs_|\qVV3WZ';

$verify_pw = 'k32AlGOPqvCzoh*Sp(Hdrr26]M=lQb00R&W=hew|-|([(03vp==A8%m?l=eA2^bs_|\qVV3WZasdasdasdasdqweqa13123';

$options = array(
            'cost' => 15
        );

$hash = password_hash($password, PASSWORD_BCRYPT,$options);

var_dump(password_verify($verify_pw ,$hash)); // sometime true sometime false
```

OK at a very inopportune moment, I learn that this third party library just doesn't work on one of my servers that badly needs these password hash functions.

my code:

``` php
require_once 'password.php'; // the password_compat library
var_dump(password_hash("foo", PASSWORD_DEFAULT));
```

the output:

```
bool(false)
```

BOOO!  I'm pissed.  The code seems to get all the way through the process until it gets to this point:

``` php
            $hash = $hash_format . $salt;
echo "hash is $hash\n";
echo "password is $password\n";
            $ret = crypt($password, $hash);
echo "ret is $ret \n";
            if (!is_string($ret) || PasswordCompat\binary\_strlen($ret) != $resultLength) {
die("returning false, string length is " . PasswordCompat\binary\_strlen($ret) . " whereas resultLength is " . $resultL$
                return false;
            }
```

I've no idea what's failing but it looks like the crypt function isn't holding up its end of the bargain. The output:
```$ php ~/foo.php
hash is $2y$10$4yM5nzUadsYLVf.TBcowte
password is foo
ret is $2zJyhpjk3l9E 
returning false, string length is 13 whereas resultLength is 60

```

What the heck?
```

