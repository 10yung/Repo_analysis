Importing Abstract Base Classes (ABC) from `collections` module is deprecated since Python 3.4 and will be removed in Python 3.9

I have tried fixing as many instances I could find in the codebase. If I missed some, please mention them below.
Hey, I started to learn how to use angr and I wanted to test it out with the collision challenge at pwnable.kr, I followed this guide about how to do it: https://youremindmeofmymother.com/2018/10/13/dont-look-back-in-angr/

but when I tried to do as he says, I didn't get the correct input from the program.

this is my code:

```
import angr
import claripy

def main():
	
	# Main Func addr (entrypoint)
	mainaddr = 0x80484cd
	
	# /bin/cat flag addr command
	findaddr = 0x804856e
	
	# At this moment the EDI register contains the argv1 variable.
	#findaddr = 0x8048532
	
	# 0x8048581 - wrong password
	# 0x80484fc - usage %s password
	# 0x8048540 - bad length
	avoidaddr = [0x8048581,0x80484fc,0x8048540]
	
	# Save input address to extract the correct input to use to get the flag.
	inputaddr = 0xff8b6436
	
	# Create Project.
	proj = angr.Project('./col', auto_load_libs= False)
	
	# Create blank state
	state = proj.factory.blank_state(addr=mainaddr,add_options={angr.options.LAZY_SOLVES})
	
	# Create simulation manager.
	sm = proj.factory.simulation_manager(state)
	
	# Run the program and stop once you got to the /bin/cat flag addr.
	sm.explore(find=findaddr, avoid=avoidaddr)
	
	# Print somehow the correct input from stack??
	found = sm.found[0]
	print '========='
	print found.solver.eval(found.memory.load(inputaddr,20))
	
	
if __name__ == '__main__':
	main()
```

I just set the function which I desire to reach, then the functions that I want to avoid, saved the place where the input should be and then tried to access it and print result in the screen but I get only 0... any ideas why? When I try to access the EDI register just like he did (he used rdi because he compiled to 64bit for some reason) I find out that it doesn't contain the flag for some reason and also when I try to access from the stack... 
This updates the tests in relation to https://github.com/angr/cle/pull/223 
Hi, I'm recently thinking about how to facilitate the SE in angr with static analysis. 
Since the binary I'm analyzing has a lot of branches, just `sm.explore()` from the entry point until it reaches my targets is really time-consuming.
I got the idea from control dependency graph and finally obtain a set of potential control flow paths (consisting of multiple connected CFG blocks)(I have some self-defined rules so only a few branches are needed by me). My initial idea is to guide the simulation manager to preferrly/priorily take these selected paths so that I can collect all constraints in the end.

When it comes to the implementation, I got two different plans:
<1> Using `SimState.Inspect.b`, everytime a simulation manager reaches a branch, my breakpoint will invoke a callback, in which I can modify the `SimState.regs.pc` so that the control flow can follow my way.
<2> Implement a new `ExplorationTechnique`, in this way, the original simulation manager behavior will not be violated, I can select those states following the right branches and put them in a new stash, maybe called 'obedient'.

I'm preferring the first approach, since it is direct and easy to understand. Directly modifying the pc register can make sure all things happen as I wish. Could someone give me some hints on this? Thank you!

<!--
*Disclaimer:
The angr suite is maintained by a small team of volunteers.
While we cannot guarantee any timeliness for fixes and enhancements, we will do our best.
For more real-time help with angr, from us and the community, join our [Slack.](http://angr.io/invite/)*
-->
---

**Describe the bug.**
<!--
Please include a clear and concise description of what the bug is.
-->

From massive experiment result #1831, an exception is raised during decompilation:

```
################################################################################
### EVENT: DECOMPILER_FAIL
### Package: http://cdn-fastly.deb.debian.org/debian/pool/main/q/quagga/quagga-ripngd_1.1.1-3+deb9u2_ppc64el.deb
### Binary: ./usr/sbin/ripngd
### Function: main - 0x405be0
### Exception:
Traceback (most recent call last):
File "./process.py", line 21, in catcher
yield
File "./process.py", line 73, in doit_raw
decompilation = elf.analyses.Decompiler(cfg.functions[a], cfg=cfg)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 14, in __init__
self._decompile()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 25, in _decompile
sp_tracker_track_memory=self._sp_tracker_track_memory)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 46, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 94, in _analyze
self._simplify_blocks(stack_pointer_tracker=spt)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 163, in _simplify_blocks
simplified = self._simplify_block(ail_block, stack_pointer_tracker=stack_pointer_tracker)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 178, in _simplify_block
simp = self.project.analyses.AILBlockSimplifier(ail_block, stack_pointer_tracker=stack_pointer_tracker)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 30, in __init__
self._analyze()
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 38, in _analyze
block = self._eliminate_dead_assignments(block)
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 97, in _eliminate_dead_assignments
observation_points=[('insn', block.statements[-1].ins_addr, OP_AFTER)]
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/reaching_definitions.py", line 114, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/forward_analysis/__init__.py", line 223, in _analyze
self._analysis_core_graph()
File "/home/angr/angr-dev/angr/angr/analyses/forward_analysis/__init__.py", line 240, in _analysis_core_graph
job_state = self._initial_abstract_state(n)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/reaching_definitions.py", line 201, in _initial_abstract_state
init_func=self._init_func, cc=self._cc, func_addr=func_addr)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/live_definitions.py", line 53, in __init__
raise ValueError('The architecture being ppc64, the parameter `rtoc_value` should be provided.')
ValueError: The architecture being ppc64, the parameter `rtoc_value` should be provided.
```

**Environment Information.**
<!--
Many common issues are caused by problems with the local Python environment.
Before submitting, double-check that your versions of all modules in the angr suite (angr, cle, pyvex, ...) are up to date.
Please include the output of `python -m angr.misc.bug_report` here.
-->


**To Reproduce.**
<!--
Please include *both a script to reproduce the crash, and attach the binary used, if possible*
-->


**Additional context.**
<!--
Add any other context about the problem here.
-->

<!--
*Disclaimer:
The angr suite is maintained by a small team of volunteers.
While we cannot guarantee any timeliness for fixes and enhancements, we will do our best.
For more real-time help with angr, from us and the community, join our [Slack.](http://angr.io/invite/)*
-->
---

**Describe the bug.**
<!--
Please include a clear and concise description of what the bug is.
-->

From massive experiment result #1831, an exception is raised during decompilation:

```
################################################################################
### EVENT: DECOMPILER_FAIL
### Package: http://cdn-fastly.deb.debian.org/debian/pool/main/v/v4l-utils/v4l-utils_1.12.3-1_armhf.deb
### Binary: ./usr/bin/v4l2-compliance
### Function: _Z9buftype2sB5cxx11i - 0x406959
### Exception:
Traceback (most recent call last):
File "./process.py", line 21, in catcher
yield
File "./process.py", line 73, in doit_raw
decompilation = elf.analyses.Decompiler(cfg.functions[a], cfg=cfg)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 14, in __init__
self._decompile()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 31, in _decompile
rs = self.project.analyses.RecursiveStructurer(ri.region, kb=self.kb)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 203, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 230, in _analyze
st = self.project.analyses.Structurer(current_region, parent_map=parent_map)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 261, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 268, in _analyze
self._analyze_acyclic()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 294, in _analyze_acyclic
self._recover_reaching_conditions()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 556, in _recover_reaching_conditions
reaching_conditions[node] = self._simplify_condition(reaching_condition)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 935, in _simplify_condition
simplified = self._revert_short_circuit_conditions(cond)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structurer.py", line 947, in _revert_short_circuit_conditions
or_arg0, or_arg1 = cond.args[:2]
ValueError: not enough values to unpack (expected 2, got 1)
```

**Environment Information.**
<!--
Many common issues are caused by problems with the local Python environment.
Before submitting, double-check that your versions of all modules in the angr suite (angr, cle, pyvex, ...) are up to date.
Please include the output of `python -m angr.misc.bug_report` here.
-->


**To Reproduce.**
<!--
Please include *both a script to reproduce the crash, and attach the binary used, if possible*
-->


**Additional context.**
<!--
Add any other context about the problem here.
-->

<!--
*Disclaimer:
The angr suite is maintained by a small team of volunteers.
While we cannot guarantee any timeliness for fixes and enhancements, we will do our best.
For more real-time help with angr, from us and the community, join our [Slack.](http://angr.io/invite/)*
-->
---

**Describe the bug.**
<!--
Please include a clear and concise description of what the bug is.
-->

From massive experiment result #1831, an exception is raised during decompilation:

```
###############################################################################
### EVENT: DECOMPILER_FAIL
### Package: http://cdn-fastly.deb.debian.org/debian/pool/main/t/tnftp/tnftp_20130505-3+b2_i386.deb
### Binary: ./usr/bin/tnftp
### Function: remglob - 0x41b720
### Exception:
Traceback (most recent call last):
File "./process.py", line 21, in catcher
yield
File "./process.py", line 73, in doit_raw
decompilation = elf.analyses.Decompiler(cfg.functions[a], cfg=cfg)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 14, in __init__
self._decompile()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 36, in _decompile
codegen = self.project.analyses.StructuredCodeGenerator(self.func, s.result, cfg=self._cfg, kb=self.kb)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 859, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 867, in _analyze
self.text = func.c_repr(indent=self._indent, posmap=self.posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 132, in c_repr
func_body = self.statements.c_repr(indent=indent + INDENT_DELTA, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 161, in c_repr
stmt_str = stmt.c_repr(indent=indent, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 333, in c_repr
lines.append(self.false_node.c_repr(indent=indent + INDENT_DELTA, posmap=posmap))
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 161, in c_repr
stmt_str = stmt.c_repr(indent=indent, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 333, in c_repr
lines.append(self.false_node.c_repr(indent=indent + INDENT_DELTA, posmap=posmap))
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 161, in c_repr
stmt_str = stmt.c_repr(indent=indent, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 321, in c_repr
lines.append(self.true_node.c_repr(indent=indent + INDENT_DELTA, posmap=posmap))
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 161, in c_repr
stmt_str = stmt.c_repr(indent=indent, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 161, in c_repr
stmt_str = stmt.c_repr(indent=indent, posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 426, in c_repr
ret_expr_str = self.ret_expr.c_repr(posmap=posmap)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 529, in c_repr
posmap.add_mapping(posmap.pos, len(s), self)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/structured_codegen.py", line 73, in add_mapping
raise ValueError("New mapping is overlapping with an existing element.")
ValueError: New mapping is overlapping with an existing element.

```

**Environment Information.**
<!--
Many common issues are caused by problems with the local Python environment.
Before submitting, double-check that your versions of all modules in the angr suite (angr, cle, pyvex, ...) are up to date.
Please include the output of `python -m angr.misc.bug_report` here.
-->


**To Reproduce.**
<!--
Please include *both a script to reproduce the crash, and attach the binary used, if possible*
-->


**Additional context.**
<!--
Add any other context about the problem here.
-->

<!--
*Disclaimer:
The angr suite is maintained by a small team of volunteers.
While we cannot guarantee any timeliness for fixes and enhancements, we will do our best.
For more real-time help with angr, from us and the community, join our [Slack.](http://angr.io/invite/)*
-->
---

**Describe the bug.**
<!--
Please include a clear and concise description of what the bug is.
-->

From massive experiment result #1831, an exception is raised during decompilation:

```
###############################################################################
### EVENT: DECOMPILER_FAIL
### Package: http://cdn-fastly.deb.debian.org/debian/pool/main/z/zbackup/zbackup_1.4.4-2_amd64.deb
### Binary: ./usr/bin/zbackup
### Function: _GLOBAL__sub_I__ZN11Compression9EnDecoderC2Ev - 0x421d40
### Exception:
Traceback (most recent call last):
File "./process.py", line 21, in catcher
yield
File "./process.py", line 73, in doit_raw
decompilation = elf.analyses.Decompiler(cfg.functions[a], cfg=cfg)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 14, in __init__
self._decompile()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/decompiler.py", line 25, in _decompile
sp_tracker_track_memory=self._sp_tracker_track_memory)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 46, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 94, in _analyze
self._simplify_blocks(stack_pointer_tracker=spt)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 163, in _simplify_blocks
simplified = self._simplify_block(ail_block, stack_pointer_tracker=stack_pointer_tracker)
File "/home/angr/angr-dev/angr/angr/analyses/decompiler/clinic.py", line 178, in _simplify_block
simp = self.project.analyses.AILBlockSimplifier(ail_block, stack_pointer_tracker=stack_pointer_tracker)
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 30, in __init__
self._analyze()
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 38, in _analyze
block = self._eliminate_dead_assignments(block)
File "/home/angr/angr-dev/ailment/ailment/analyses/block_simplifier.py", line 97, in _eliminate_dead_assignments
observation_points=[('insn', block.statements[-1].ins_addr, OP_AFTER)]
File "/home/angr/angr-dev/angr/angr/analyses/analysis.py", line 109, in __call__
oself.__init__(*args, **kwargs)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/reaching_definitions.py", line 114, in __init__
self._analyze()
File "/home/angr/angr-dev/angr/angr/analyses/forward_analysis/__init__.py", line 223, in _analyze
self._analysis_core_graph()
File "/home/angr/angr-dev/angr/angr/analyses/forward_analysis/__init__.py", line 242, in _analysis_core_graph
changed, output_state = self._run_on_node(n, job_state)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/reaching_definitions.py", line 223, in _run_on_node
state = engine.process(state, block=block, fail_fast=self._fail_fast)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/engine_ail.py", line 31, in process
self._process(state, None, block=kwargs.pop('block', None))
File "/home/angr/angr-dev/angr/angr/engines/light/engine.py", line 530, in _process
self._process_Stmt(whitelist=whitelist)
File "/home/angr/angr-dev/angr/angr/engines/light/engine.py", line 547, in _process_Stmt
self._ail_handle_Stmt(stmt)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/engine_ail.py", line 60, in _ail_handle_Stmt
super(SimEngineRDAIL, self)._ail_handle_Stmt(stmt)
File "/home/angr/angr-dev/angr/angr/engines/light/engine.py", line 571, in _ail_handle_Stmt
getattr(self, handler)(stmt)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/engine_ail.py", line 72, in _ail_handle_Assignment
src = self._expr(stmt.src)
File "/home/angr/angr-dev/angr/angr/engines/light/engine.py", line 553, in _expr
return getattr(self, handler)(expr)
File "/home/angr/angr-dev/angr/angr/analyses/reaching_definitions/engine_ail.py", line 247, in _ail_handle_Load
data.add(self.project.loader.memory.unpack_word(addr, size=size))
File "/home/angr/angr-dev/cle/cle/memory.py", line 275, in unpack_word
return self.unpack(addr, self._arch.struct_fmt(size=size, signed=signed, endness=endness))[0]
File "/home/angr/angr-dev/archinfo/archinfo/arch.py", line 359, in struct_fmt
raise ValueError("Invalid size: Must be a integer power of 2 less than 16")
ValueError: Invalid size: Must be a integer power of 2 less than 16
```



**Environment Information.**
<!--
Many common issues are caused by problems with the local Python environment.
Before submitting, double-check that your versions of all modules in the angr suite (angr, cle, pyvex, ...) are up to date.
Please include the output of `python -m angr.misc.bug_report` here.
-->


**To Reproduce.**
<!--
Please include *both a script to reproduce the crash, and attach the binary used, if possible*
-->


**Additional context.**
<!--
Add any other context about the problem here.
-->

The binary has been decompressed and attached, which is a MIPS binary.
The target function is called `clear_log` at address `0x40fed0`.
From ida I can see the xrefs
![image](https://user-images.githubusercontent.com/8875073/72136128-0e503c00-33c3-11ea-9a25-4c7c154d7d9c.png)
it is called in function `execute_other_requests`.
However, when using CFG(), I got the predecessor of node at 0x40fed0 like below:
```
In [158]: node = cfg.model.get_any_node(0x40fed0)             
In [159]: node.predecessors                                   
Out[159]: [<CFGNode 0x40fec8[8]>]
```
The 0x40fec8 is out of the scope of `execute_other_requests`.
[my_cgi.zip](https://github.com/angr/angr/files/4044530/my_cgi.zip)

<!--
*Disclaimer:
The angr suite is maintained by a small team of volunteers.
While we cannot guarantee any timeliness for fixes and enhancements, we will do our best.
For more real-time help with angr, from us and the community, join our [Slack.](http://angr.io/invite/)*
-->
---

**Describe the bug.**
<!--
Please include a clear and concise description of what the bug is.
-->
Testing the backward slice plugin I stumbled upon the following error:
```
Traceback (most recent call last):
  File "./angr_script.py", line 202, in <module>
    execute_pure_symbolic(target = args.input)
  File "./angr_script.py", line 67, in execute_pure_symbolic
    get_backward_slice(p)
  File "./angr_script.py", line 56, in get_backward_slice
    print(bs.dbg_repr())
  File ".../venv/lib/python3.6/site-packages/angr/analyses/backward_slice.py", line 122, in dbg_repr
    s += self.dbg_repr_run(run_addr) + "\n"
  File ".../venv/lib/python3.6/site-packages/angr/analyses/backward_slice.py", line 147, in dbg_repr_run
    if i in chosen_statements:
TypeError: argument of type 'bool' is not iterable
```
A quick fix is simply `if i in self.chosen_statements` but I am not sure if that is really the fix needed. 

**Environment Information.**
<!--
Many common issues are caused by problems with the local Python environment.
Before submitting, double-check that your versions of all modules in the angr suite (angr, cle, pyvex, ...) are up to date.
Please include the output of `python -m angr.misc.bug_report` here.
-->
Most recent angr source - build from source.

**To Reproduce.**
<!--
Please include *both a script to reproduce the crash, and attach the binary used, if possible*
-->
```
    cfg = project.analyses.CFGEmulated(
                                keep_state = True,
                                state_add_options = angr.sim_options.refs,
                                context_sensitivity_level = 2)
    target_func = cfg.kb.functions.function(name = "exit")
    target_node = cfg.get_any_node(target_func.addr)

    # Now make the backwards slice
    bs = project.analyses.BackwardSlice(cfg=cfg, cdg=None, ddg=None, control_flow_slice=True, targets = [(target_node, -1)])
    
    print(bs.dbg_repr())
```