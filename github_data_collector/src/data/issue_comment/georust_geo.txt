See previous discussion: #380,

We'll need to resolve the following issues around `num` and compatibility first: https://github.com/georust/robust/issues/3, https://github.com/georust/robust/issues/5
I've been using this crate recently for some robotics path planning experiments. I've done similar work using python and shapely, and the fact that this crate offers a lot of the features shapely does I felt like it was a great fit(thanks for making this crate). One thing I haven't figure out how to do is create a circle with a radius. In shapely you do this by adding a boundary to a circle([see here](https://stackoverflow.com/a/30998492/1676472) for example), and then if you intersect a line with this point it intersects this boundary. I don't see any way to do this in geo currently. It would be nice to be able to either have a Circle geo-type, or similar to shapely have a point that can have a defined boundary of a given radius which can be intersected and used for `Contains` trait. I'm not sure if this is implemented, or a proper way of doing this exists. If not I can see if I can create a PR if anyone would offer a little guidance on getting started.

For anyone else with this same issue my current workaround is to create a polygon which represents the circle. I do this by plotting points around the circumference radius length from the center like so(code isn't tested):


```
use std::f64::consts::PI;

fn create_circle(center: Coordinate<f64>, radius: f64) -> Polygon<f64> {
    let (cx, cy) = center.x_y();
    let circum = 2.0 * PI * radius;
    // this controls how many points to create by dividing circum by 10 units of measurement
    let n = (circum / 10.0).ceil();
    let mut points = Vec::<(f64, f64)>::new();
    for _x in 0..n as usize + 1 {
        let x = _x as f64;
        
        points.push( (((2.0 * PI / n * x).cos() * radius) + cx, ((2.0 * PI / n *x).sin() * radius) + cy) )
    }

    Polygon::new(LineString::from(points), vec![])
}
```

Right now, `MultiPolygon::rotate` rotates all its polygons individually. However, I'd expect it to rotate them around its own centroid. Otherwise, I'd just iterate over the inner polygons and rotate them myself.

Obviously, this would be a breaking change, so it'd probably be better to add a separate function for this. Ideally, it'd be nice to have a variant where you just pass the pivot explicitly.
This PR:

- Adds non-consuming iteration functionality (`iter()`, `iter_mut()`) and indexing to `GeometryCollection`
- Adds `TryFrom` impls from `Geometry` enums to `Geo` primitives (deprecating but not removing the previous functions)
- Doctest examples of working with `GeometryCollection`
```rust
pub static COORD_PRECISION: f32 = 1e-1; // 0.1m
```

Consider changing to `std::f32::EPSILON` instead? For example, if the coordinates are decimal degrees then 0.1 difference in longitude at the equator is 11 kilometers (Haversine distance). That's an arbitrary distance, and actually it is being used by at least one algorithm:

```rust
pub fn point_contains_point<T>(p1: Point<T>, p2: Point<T>) -> bool
where
    T: Float,
{
    line_euclidean_length(Line::new(p1, p2)).to_f32().unwrap() < COORD_PRECISION
}
```


I noticed that Triangle and Rect are missing from enum Geometry<T> in geo-types/src/geometry.rs. I could add them? This might make a good PR for me, being new to Rust. 

Relates to #119 
Relates to #4 
Given a `LineString`, starting and ending `Point`s, is it possible to slice the line from the start and end using the points?
This is the beginning of an implementation for https://github.com/georust/geo/issues/302. I based part of my implementation off of what's already there for `ClosestPoint` because it's used so heavily.

I'm pretty new to Rust and would appreciate some pointers or advice to make sure I'm contributing good code which fits well with the library. I'd also appreciate input on the naming conventions!
https://docs.rs/packed_simd/0.3.3/packed_simd/type.f64x4.html

https://rust-lang-nursery.github.io/packed_simd/packed_simd/macro.shuffle.html

https://github.com/georust/geo/issues/206
