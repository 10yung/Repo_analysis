<!-- If reporting a bug, fill out the below. Otherwise, if asking a question or suggesting a feature or something else, remove everything before continuing. -->

#### System details

<!-- Please include ALL of the following: -->

- OS/Platform name and version: macOS 10.15.2
- Rust version (if building from source): `rustc --version`: `rustc 1.40.0 (73528e339 2019-12-16)`
- Notify version (or commit hash if building from git): 4.0.14

<!-- And as much of the following as you can / think is relevant: -->

- Filesystem type and options: APFS
- If you're running as a privileged user (root, System): no
- If you're running in a container, details on the runtime and overlay: no
- If you're running in a VM, details on the hypervisor: no

<!-- (remove the ones that are not relevant) -->


#### What you did (as detailed as you can)

Writes are generated to a file every second using the following C program. However, the events are only noticed by notify's FSEventsWatcher every 10 seconds, when the file is closed and reopened.

```
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

int main()
{
    while (1) {
        FILE *f = fopen("/Users/brennan/test.txt", "w");
        for (int i = 0; i < 10; ++i) {
            fputs("Hello!\n", f);
            fflush(f);
            sleep(1);
        }
        printf("Closing file!\n");
        fclose(f);
    }
}
```

#### What you expected

Notify should trigger once per second when watching `/Users/brennan/test.txt` and running the above C program.


#### What happened

It only triggers every 10 seconds.

<!-- Thank you! -->

Hi, I'm new in rust and new in notify. I want to monitor content change in a file using code below. When I change my `123.sql` the event will be always `Create(Any)`. 

Shouldn't it be `Modify(DataChange)`? I'm confused about this. 
How can I get the changed content correctly?

```
use crossbeam_channel::unbounded;
use notify::{RecommendedWatcher, RecursiveMode, Result, Watcher, EventKind, Config};
use std::time::Duration;
use notify::event::{ModifyKind, CreateKind, DataChange};

fn main() -> Result<()> {
    // Create a channel to receive the events.
    let (tx, rx) = unbounded();

    // Automatically select the best implementation for your platform.
    let mut watcher: RecommendedWatcher = Watcher::new(tx, Duration::from_secs(1))?;

    // Add a path to be watched. All files and directories at that path and
    // below will be monitored for changes.
    watcher.watch("/Users/samuel/123.sql", RecursiveMode::Recursive)?;

    loop {
        match rx.recv() {
           Ok(event) => {
               if event.is_ok() {
                   let real_event = event.unwrap();
                   match real_event.kind {
                       EventKind::Any => {
                           println!("any kind: {:?}", real_event.kind)
                       }
                       EventKind::Access(access_kind) => {
                           println!("access kind: {:?}", access_kind)
                       }
                       EventKind::Create(create_kind) => {
                           println!("create kind: {:?}", create_kind)
                       }
                       EventKind::Modify(modify_kind) => {
                           println!("modify kind: {:?}", modify_kind);
                       }
                       EventKind::Remove(remove_kind) => {
                           println!("remove kind: {:?}", remove_kind)
                       }
                       EventKind::Other => {
                           println!("other kind")
                       }
                       _ => {
                           println!("default kind")
                       }
                   }
               } else {

               }
           },
           Err(err) => println!("watch error: {:?}", err),
        };
    }

    Ok(())
}

```
Update `fsevent-sys` to 3.0.0.

Related: #211

<!-- If reporting a bug, fill out the below. Otherwise, if asking a question or suggesting a feature or something else, remove everything before continuing. -->

#### System details

<!-- Please include ALL of the following: -->

- OS/Platform name and version: macOS 10.13.6 on a MacBook Pro (15 Zoll, 2016)
- Rust version (if building from source): `rustc --version`: `rustc 1.38.0-nightly (07e0c3651 2019-07-16)`
- Notify version (or commit hash if building from git): 4.0.12

Hi! Users report that rust-analyzer sometimes hangs during shutdown. The stack trace points to this code:

https://github.com/passcod/notify/blob/2b1f1d4d1acc8b9738ffbe41bfe6043ba37f9431/src/fsevent.rs#L109-L111

Downstream issue (with captured stack trace): https://github.com/rust-analyzer/rust-analyzer/issues/1541

cc @killercup
Windows provides an error code to the completion routine that is called when a new file event is received. In the code (i.e. here: https://github.com/passcod/notify/blob/0709c940dd7294ef07b176504a89949d462bbe98/src/windows.rs#L300), the only error that is checked for is `ERROR_OPERATION_ABORTED` however it's possible for other error codes to be generated.

Notably, when a watched folder is deleted the error code appears to be `5` (access denied), however the file is not properly deleted until the watch handle is closed. This results in various unwanted behavior depending on how the folder is deleted. Deleting the file directly generally results in being marked as deleted (but not actually deleted) and any attempt to use the directory returning an access denied status code. Deleting the file through explorer, sometimes results in the watcher being flooded with a continuous stream of notifications. 

This happens fairly frequently in tools like rust-analyzer that like to dynamically watch subfolders to avoid listening to all notification events in busy root directories.

One solution might be to stop the watcher like in the `ERROR_OPERATION_ABORTED` case (possibly notifying any clients about the error), allowing the handle to be closed (e.g. maybe like this: https://github.com/mchesser/notify/commit/e9236511c991fcb89f4fd3b768bd1dd935cfea76#diff-0d46108ce4a3c312f023e721b094d40cR300). However I'm not certain whether there are other errors that could occur where it is reasonable to continue listening for events.

Another solution might be just to propagate back to the user and force them to deal with stopping the watcher.
<!-- If reporting a bug, fill out the below. Otherwise, if asking a question or suggesting a feature or something else, remove everything before continuing. -->

#### System details

<!-- Please include ALL of the following: -->

- Linux, CentOS 7.6, kernel 3.10.0-957.12.2.el7.ug.x86_64 (custom rebuild, with some support for GPFS)
- rustc 1.34.2 (6c2484dc3 2019-05-13)
- notify main brach, commit 56aac12

<!-- And as much of the following as you can / think is relevant: -->

I use notify in https://github.com/itkovian/sarchive/. The issue I opened for this is at https://github.com/itkovian/sarchive/issues/20. 

- FS: /dev/mapper/vg0-scratch on /tmp type ext4 (rw,relatime,data=ordered)
- Hypervisor is kvm, in an OpenNebula env. 
- Underlying storage is Ceph (but I do not think that is relevant here)

#### What you did (as detailed as you can)

- I created 50K files, in a directory that was watched. The watcher threads always stops, but not always after the same number of files. 
- The notify queue size was raised to 64K
- These are the events seen:
~~~~
[2019-06-14T11:36:08.930803788+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/1.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931012465+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/2.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931178128+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/3.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931341658+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/4.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931504147+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/5.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931660784+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/6.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931798929+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/7.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.931937007+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/8.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932074810+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/9.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932212217+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/10.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932352470+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/11.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932492183+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/12.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932631604+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/13.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932770371+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/14.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.932908955+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/15.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933049157+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/16.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933188638+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/17.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933327999+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/18.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933467705+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/19.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933608266+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/20.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933747966+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/21.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.933886300+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/22.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.934026297+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/23.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.934166356+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/24.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.934306319+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/25.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.934472078+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/26.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.940717437+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/27.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.940865118+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/28.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.941006427+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/29.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.941147677+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/30.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
[2019-06-14T11:36:08.941288909+02:00][sarchive::lib][DEBUG] Event received: Event { kind: Create(Any), paths: ["/tmp/torque/31.SC"], attr:tracker: None, attr:flag: None, attr:info: None, attr:source: None }
~~~~


#### What you expected

It should just be able to keep track of all events, especially since the queue is big enough.


#### What happened

The watcher thread and the debouncer (Threads 3 and 2 below) event loop are waiting and seem to be deadlocked. There is no further processing of events.
~~~~
Thread 6 (Thread 0x7f545580a700 (LWP 4027)):
#0  0x00007f5455df9965 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x000055713a5ccd0d in crossbeam_utils::sync::parker::Inner::park::h6f7e9f05947e58c5 ()
#2  0x000055713a5cc9cb in crossbeam_utils::sync::parker::Parker::park::h1dacaa9c32ead107 ()
#3  0x000055713a553f5b in sarchive::lib::signal_handler_atomic::h2d8e9d3d751c5d1f ()
#4  0x000055713a5546f6 in crossbeam_utils::thread::ScopedThreadBuilder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::h86eeb285f945e829 ()
#5  0x000055713a5462eb in std::sys_common::backtrace::__rust_begin_short_backtrace::hdc70f0854b567d1a ()
#6  0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#7  0x000055713a54fe6d in _$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h9a5ade7f14d85759 ()
#8  0x000055713a63e09e in call_once<(),()> () at /rustc/6c2484dc3c532c052f159264e970278d8b77cdc9/src/liballoc/boxed.rs:759
#9  start_thread () at src/libstd/sys_common/thread.rs:14
#10 thread_start () at src/libstd/sys/unix/thread.rs:81
#11 0x00007f5455df5dd5 in start_thread () from /lib64/libpthread.so.0
#12 0x00007f5455908ead in clone () from /lib64/libc.so.6

Thread 5 (Thread 0x7f5455609700 (LWP 4028)):
#0  0x00007f5455df9965 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x000055713a62f353 in wait () at src/libstd/sys/unix/condvar.rs:70
#2  wait () at src/libstd/sys_common/condvar.rs:41
#3  wait<()> () at src/libstd/sync/condvar.rs:204
#4  park () at src/libstd/thread/mod.rs:908
#5  0x000055713a5cc4f3 in crossbeam_channel::context::Context::wait_until::h0bf53e5a4352da39 ()
#6  0x000055713a5cc1cc in crossbeam_channel::context::Context::with::_$u7b$$u7b$closure$u7d$$u7d$::hb09c5663e8cedc6d ()
#7  0x000055713a5cbcaf in _$LT$std..thread..local..LocalKey$LT$T$GT$$GT$::try_with::h2081487015026962 ()
#8  0x000055713a5caf21 in crossbeam_channel::select::run_select::he3afd68d128e33fc ()
#9  0x000055713a5cb706 in crossbeam_channel::select::Select::select::hced2ab4085c02c35 ()
#10 0x000055713a551776 in sarchive::lib::monitor::h8503efb39a9206f2 ()
#11 0x000055713a554365 in crossbeam_utils::thread::ScopedThreadBuilder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::h5c3cfc13ba01db7e ()
#12 0x000055713a5462eb in std::sys_common::backtrace::__rust_begin_short_backtrace::hdc70f0854b567d1a ()
#13 0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#14 0x000055713a54fb2d in _$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h190f113dc2fb2a1b ()
#15 0x000055713a63e09e in call_once<(),()> () at /rustc/6c2484dc3c532c052f159264e970278d8b77cdc9/src/liballoc/boxed.rs:759
#16 start_thread () at src/libstd/sys_common/thread.rs:14
#17 thread_start () at src/libstd/sys/unix/thread.rs:81
#18 0x00007f5455df5dd5 in start_thread () from /lib64/libpthread.so.0
#19 0x00007f5455908ead in clone () from /lib64/libc.so.6

Thread 4 (Thread 0x7f5455408700 (LWP 4029)):
#0  0x00007f5455df9965 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x000055713a62f353 in wait () at src/libstd/sys/unix/condvar.rs:70
#2  wait () at src/libstd/sys_common/condvar.rs:41
#3  wait<()> () at src/libstd/sync/condvar.rs:204
#4  park () at src/libstd/thread/mod.rs:908
#5  0x000055713a5cc4f3 in crossbeam_channel::context::Context::wait_until::h0bf53e5a4352da39 ()
#6  0x000055713a5cc1cc in crossbeam_channel::context::Context::with::_$u7b$$u7b$closure$u7d$$u7d$::hb09c5663e8cedc6d ()
#7  0x000055713a5cbcaf in _$LT$std..thread..local..LocalKey$LT$T$GT$$GT$::try_with::h2081487015026962 ()
#8  0x000055713a5caf21 in crossbeam_channel::select::run_select::he3afd68d128e33fc ()
#9  0x000055713a5cb706 in crossbeam_channel::select::Select::select::hced2ab4085c02c35 ()
#10 0x000055713a5529c8 in sarchive::lib::process::h005bbd03ae18b9b3 ()
#11 0x000055713a55415d in crossbeam_utils::thread::ScopedThreadBuilder::spawn::_$u7b$$u7b$closure$u7d$$u7d$::h1c9ff6e400f4e454 ()
#12 0x000055713a5462eb in std::sys_common::backtrace::__rust_begin_short_backtrace::hdc70f0854b567d1a ()
#13 0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#14 0x000055713a55000d in _$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::hae33da4cd92a3d73 ()
#15 0x000055713a63e09e in call_once<(),()> () at /rustc/6c2484dc3c532c052f159264e970278d8b77cdc9/src/liballoc/boxed.rs:759
#16 start_thread () at src/libstd/sys_common/thread.rs:14
#17 thread_start () at src/libstd/sys/unix/thread.rs:81
#18 0x00007f5455df5dd5 in start_thread () from /lib64/libpthread.so.0
#19 0x00007f5455908ead in clone () from /lib64/libc.so.6

Thread 3 (Thread 0x7f5455207700 (LWP 4030)):
#0  0x00007f5455dfc4ed in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x00007f5455df7dcb in _L_lock_883 () from /lib64/libpthread.so.0
#2  0x00007f5455df7c98 in pthread_mutex_lock () from /lib64/libpthread.so.0
#3  0x000055713a5811f3 in notify::debounce::timer::ScheduleWorker::run::h05a242d775f47422 ()
#4  0x000055713a5946ff in std::sys_common::backtrace::__rust_begin_short_backtrace::he553ad6571cfadd7 ()
#5  0x000055713a597c1e in std::panicking::try::do_call::h816d9a307bc6821f ()
#6  0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#7  0x000055713a59fc2f in _$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::h2b7c3a08953572d0 ()
#8  0x000055713a63e09e in call_once<(),()> () at /rustc/6c2484dc3c532c052f159264e970278d8b77cdc9/src/liballoc/boxed.rs:759
#9  start_thread () at src/libstd/sys_common/thread.rs:14
#10 thread_start () at src/libstd/sys/unix/thread.rs:81
---Type <return> to continue, or q <return> to quit---
#11 0x00007f5455df5dd5 in start_thread () from /lib64/libpthread.so.0
#12 0x00007f5455908ead in clone () from /lib64/libc.so.6

Thread 2 (Thread 0x7f5455006700 (LWP 4031)):
#0  0x00007f5455dfc4ed in __lll_lock_wait () from /lib64/libpthread.so.0
#1  0x00007f5455df7dcb in _L_lock_883 () from /lib64/libpthread.so.0
#2  0x00007f5455df7c98 in pthread_mutex_lock () from /lib64/libpthread.so.0
#3  0x000055713a5829df in notify::debounce::timer::WatchTimer::ignore::h41e8c48798833732 ()
#4  0x000055713a589b0d in notify::debounce::Debounce::event::h457eb1b9afa24ac7 ()
#5  0x000055713a586f72 in notify::debounce::EventTx::send::h710e47f0ce4ad6c5 ()
#6  0x000055713a577568 in notify::inotify::EventLoop::event_loop_thread::h77a1f3739e8f1912 ()
#7  0x000055713a5946c6 in std::sys_common::backtrace::__rust_begin_short_backtrace::h5d4573f5b62c565e ()
#8  0x000055713a597c56 in std::panicking::try::do_call::h9da2af6e0d2c9e8c ()
#9  0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#10 0x000055713a59ffa8 in _$LT$F$u20$as$u20$alloc..boxed..FnBox$LT$A$GT$$GT$::call_box::heaa12d6560ac3ec4 ()
#11 0x000055713a63e09e in call_once<(),()> () at /rustc/6c2484dc3c532c052f159264e970278d8b77cdc9/src/liballoc/boxed.rs:759
#12 start_thread () at src/libstd/sys_common/thread.rs:14
#13 thread_start () at src/libstd/sys/unix/thread.rs:81
#14 0x00007f5455df5dd5 in start_thread () from /lib64/libpthread.so.0
#15 0x00007f5455908ead in clone () from /lib64/libc.so.6

Thread 1 (Thread 0x7f5456837940 (LWP 4026)):
#0  0x00007f5455df9965 in pthread_cond_wait@@GLIBC_2.3.2 () from /lib64/libpthread.so.0
#1  0x000055713a5cd670 in crossbeam_utils::sync::wait_group::WaitGroup::wait::h99903d437b2ae8f1 ()
#2  0x000055713a55630b in crossbeam_utils::thread::scope::h4e5e6b620eff23ee ()
#3  0x000055713a54d761 in sarchive::main::hcf3a3ed84010428d ()
#4  0x000055713a54dbe3 in std::rt::lang_start::_$u7b$$u7b$closure$u7d$$u7d$::h6aee53ed84e23fb3 ()
#5  0x000055713a63a263 in {{closure}} () at src/libstd/rt.rs:49
#6  do_call<closure,i32> () at src/libstd/panicking.rs:297
#7  0x000055713a63ea0a in __rust_maybe_catch_panic () at src/libpanic_unwind/lib.rs:87
#8  0x000055713a63ae2d in try<i32,closure> () at src/libstd/panicking.rs:276
#9  catch_unwind<closure,i32> () at src/libstd/panic.rs:388
#10 lang_start_internal () at src/libstd/rt.rs:48
#11 0x000055713a54dbb2 in main ()
~~~~


Relevant code:

~~~~
pub fn monitor(path: &Path, s: &Sender<TorqueJobEntry>, sigchannel: &Receiver<bool>) -> notify::Result<()> {
    let (tx, rx) = unbounded();

    // create a platform-specific watcher
    let mut watcher: RecommendedWatcher = Watcher::new(tx, Duration::from_secs(2))?;

    info!("Watching path {:?}", &path);

    if let Err(e) = watcher.watch(&path, RecursiveMode::NonRecursive) {
        return Err(e);
    }
    loop {
        select! {
            recv(sigchannel) -> b => if let Ok(true) = b  {
                return Ok(());
            },
            recv(rx) -> event => { match event {
                Ok(e) => check_and_queue(s, e.unwrap())?,
                Err(e) => {
                    error!("Error on received event: {:?}", e);
                    break;
                }
            };}
        }
    }

    Ok(())
}
~~~~

<!-- Thank you! -->
Currently if the `Recursive` bit is specified, every sub-directory of the specified directory will be watched unconditionally.

In some situations, it's possible to exclude entire directories, potentially with many files (e.g. build artifacts), from the watcher. For some backends, I imagine that this wouldn't provide much benefit, as they natively support recursive watching, but for others it may be much cheaper if the directory is ignored completely.

It would be awesome if the `RecursiveMode` enum could be extended with a filter callback, which would have to run quickly and be callable from any thread, for example:

```rust
type Filter = dyn Fn(&Path) -> bool + Send + Sync;
enum RecursiveMode {
    NonRecursive,
    Recursive,
    RecursiveFiltered(Box<Filter>),
}
```

It may be worthwhile to also filter events with this callback, but it's also probably fine if occasionally events are delivered for "filtered" paths. :woman_shrugging:  
When reading through the [next ideas draft](https://github.com/passcod/notify/wiki/Presentation) I noticed that one of the benefits of the new design is the ability to dynamically switch between backends as-needed, depending on system resources etc. As someone who wants to use `notify` as a nice plug & play backend for filesystem watching, that sounds like a great feature which reduces ergonomics burden & produces a better experience :tada:.

That being said, I often have other watcher tools already set up on my large projects, such as ['watchman'](https://facebook.github.io/watchman). Given the dynamic watcher model, I wonder if it would be possible/worthwhile to detect a running watchman instance, and use it as a cross-platform backend if it happens to already be watching the repository in question.

I'm not sure whether or not the new `notify` model supports backends being provided by external crates. If it does, this feature may make less sense to include in core, and could perhaps be implemented externally.
This is a [major; breaking].

Comment here with things that can be changed/upgraded with this move. 1.32 supports the 2018 Edition.

Looking forward I also want to establish a strategy for pushing the minimum rustc up more regularly: one thought is to support at least N months of rustc, but be free to upgrade from older stuff. However, I intend to maintain the "pushing the minimum rustc is a breaking change" guarantee.

Another way is to allow majors to optionally push the minimum rustc as far as they want (up to the latest stable as of release), but only allow one such push every six months or every year (unless exceptional circumstances), and be conservative about those pushes.
We're allocating a _lot_ of `PathBuf`s all over the place (often by cloning). Reducing this would improve performance for Notify's runtime. Some notes:

- We probably want to own them. References are a mess, but `Rc`s/`Arc`s would work okay.
- Beyond just removing a lot of copies of the same path, it should be possible to optimise the number of copies of path segments there are. Ideally, if both `/a/b/c`, `/a/s/d`, and `/a/b/e` are in Notify in various places, only one each of `a`, `b`, `c`, `d`, `e`, and `s` would be allocated.
- Whatever solution needs to convert cleanly to `Path` or `PathBuf` for the public API.
- Whatever solution needs to work equally well under all platforms, with all styles of paths (think windows network paths...)
- Probably ought to think about URLs as well, if nothing else than to support RedoxOS (eventually, down the line).
- If possible, this optimisation should hold for the entire process, instead of just one instance of Notify.

Need to investigate existing solutions before building a custom one, if possible.

- Possibly also handle inodes where available?