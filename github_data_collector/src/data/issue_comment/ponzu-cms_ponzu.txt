This PR should add support for creating and updating records through JSON, by posting `application/json` requests 
The GET /api/contents?type=<Type> request provides the capability to request by offset/count. But it's impossible to determine how many items exist in the database.

Such information would be helpful to implement pagination on the frontends.

```json
{
  "data": [
    {
        "uuid": "024a5797-e064-4ee0-abe3-415cb6d3ed18",
        "id": 6,
        "slug": "item-id-024a5797-e064-4ee0-abe3-415cb6d3ed18", // customizable
        "timestamp": 1493926453826, // milliseconds since Unix epoch
        "updated": 1493926453826,
        // your content data...,
    }, { ... }
  ],
 "total_count" : 110,
}
```

I suggest to implement a "total_count" (or any similar name on the response).

I can send a PR for that.
I followed the steps mentioned in github for installing ponzu-cms, however i'm not able to invoke 'ponzu' from bash. I have gone through earlier issues (#278 and #290) but not able to resolve mine.

Current Setup:
```
~/work/ $ go env
GOARCH="amd64"
GOBIN=""
GOCACHE="/home/ubuntu/.cache/go-build"
GOEXE=""
GOFLAGS=""
GOHOSTARCH="amd64"
GOHOSTOS="linux"
GOOS="linux"
GOPATH="/home/ubuntu/work"
GOPROXY=""
GORACE=""
GOROOT="/usr/local/go"
GOTMPDIR=""
GOTOOLDIR="/usr/local/go/pkg/tool/linux_amd64"
GCCGO="gccgo"
CC="clang"
CXX="g++"
CGO_ENABLED="1"
GOMOD=""
CGO_CFLAGS="-g -O2"
CGO_CPPFLAGS=""
CGO_CXXFLAGS="-g -O2"
CGO_FFLAGS="-g -O2"
CGO_LDFLAGS="-g -O2"
PKG_CONFIG="pkg-config"
GOGCCFLAGS="-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build596457733=/tmp/go-build -gno-record-gcc-switches"

~/work/ $ go version
go version go1.11.13 linux/amd64

~/work/ $ echo $PATH
/home/ubuntu/.gem/bin:/home/ubuntu/.local/bin:/opt/cs50/bin:/opt/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/go/bin:/home/ubuntu/work/bin

~/work/ $ ponzu
bash: ponzu: command not found
~/work/ $ 

``` 

Commands that i ran for installation of ponzu-cms:

```
go get -u -v github.com/ponzu-cms/ponzu/...
```

After above operation ` ~/work/src ` and `~/work/pkg` are populated but not `~/work/bin` 

As i was not able to resolve this on my own after going through many blog posts, i'm raising this issue as a last resort.

Thanks in advance.
there was an issue discussed in the #ponzu slack channel where knowing the order in which  content type's `item.Hookable` methods are executed may have helped a lot. this helps users determine the state of the database and what is available at what time.  

documentation would be great to mention this order (note the hook invocations): 
https://github.com/ponzu-cms/ponzu/blob/ec7b5b2bab2cad13db317a017fb8ee5d32a8f68c/system/admin/handlers.go#L1619-L1710

these are not the _only_ hooks called. other handler funcs have the other `item.Hookable` methods. those should be documented as well.

the documentation should live in https://github.com/ponzu-cms/docs and copied into https://github.com/ponzu-cms/ponzu
There is a big note documentation quoting that `Content-Type` should be `multipart/form-data' otherwise we get a big 400 error, is there any way to accept `application/json`? There are a lot of tolls that dump json, and working with json is usually easier than working with encoded form.

I understand that is not possible to upload stuff with `application/json` and we're talking about CMS but this is a great tool for creating API with Let's Encrypt integration would be wonderful if could accept JSON natively 

Anyway, great project and the Let's Encrypt feature is a dream that came true
changes:
- Add optional flag on generate content to read write JSON template file
- Update documentation
ponzu will not work with go (1.13.1 tested) when GOPATH is set to anything other than GOROOT.  All commands execute without complaint, but content and add-ons don't show up.  I propose that since GOPATH is no longer required, and in fact go projects can now be located *anywhere* in the filesystem, ponzu should work with relative paths.

To replicate, using a recent version of go:

1. `cd` into some arbitrary directory and create a `go.mod` file, create a `main.go` hello world, and prove that go does not require projects to be in GOPATH.
2. Unset GOPATH and do the same thing, and prove again that this works.
3. Now in this directory, try to use ponzu.  If GOPATH is unset, ponzu will create the project in GOROOT, which is probably not what the user wants to happen.
4. Set GOPATH to some directory other than GOROOT and use ponzu; it will force a directory structure with `$GOPATH/src/repository.domain/project`.  Again, probably not what a modern go user would expect.
5. #4 will succeed; go ahead and generate a content type and use `ponzu build` to build the project.  The content files *will* be created and the build will succeed.
6. Use `ponzu run` to start the project, and open a browser to the admin page.  The page will show, but no content will be displayed.
7. Try to add an add-on; the add-on will be added to the correct subdirectory in the current directory.  Rebuild and re-run, and go to the admin page again.  The add-on will not be shown.

Following the core go team's lead, it'd be great if ponzu also removed hard-coded dependencies on GOPATH and GOROOT, and used relative paths.  This is beyond my knowledge of Go internals, but it will probably require ponzu to become `go.mod` aware.
I am thinking about getting the API more solid so that many more systems can use Ponzu.

Google have a project that can generate a ful openapi ( for test ) and grpc API. It's used for many projects and it really fills a long sort after need.

https://github.com/googleapis/gnostic

It would also allow pub sub style interaction with other systems for updates etc and so would make it very easy to integrate Ponzu into a Microservices system.
Ponzu can be what drives your front edit but also can be the opposite in that end users can edit data into Ponzu and other services would get notified !

Ponzu would then be quite an amazingly useful building block.

Also working on Ponzu would be slot more solid too since it's API is generated on top of the underlying schema.

Also because it's grpc it would make it easy to then pump any mutation across to a message queue of different varieties. This is what some teams might want for decoupling and other reasons. The point is that it's easy to use grpc middleware to do this and because it's a middleware it's not lots of new code. Hence why grpc is quite useful.

This is only a suggestion.
Love to hear feedback
https://github.com/mholt/certmagic

This looks great, and could simplify the TLS cert management in Ponzu. If anyone is interested in helping with this one, I'm happy to help get started.
Have you thought about generating the content from a provided json schema? 
`ponzu gen content -f song.json`

And the schema in the song.json would validate against the intended output of the API. For instance, this schema:
`{
"$schema": "http://json-schema.org/draft-07/schema#",
    "type": "object",
  	"properties": {
    	"data":{
         	"type":"array",
            "items":[{
              "type":"object",
              "properties":{
                  "uuid": {"type":"string"},
                  "id": {"type":"integer"},
                  "slug": {"type":"string"},
                  "timestamp": {"type":"string", "format":"datetime"},
                  "updated": {"type":"string", "format":"datetime"},
                  "title": {"type":"string"},
                  "artist": {"type":"string"},
                  "opinion": {"type":"string"},
                  "img_url": {"type":"string", "format":"url"},
              },
              "required":["title","artist","img_url"]
            }]
        }
    }
}`
Would generate the backend form and content type. Then when data is loaded into that content type, it would output json from the api like: 
`{
  "data": [
    {
      "uuid": "3d3e4b20-939c-4663-b7d0-f3fa6b172b4a",
      "id": 1,
      "slug": "song-3d3e4b20-939c-4663-b7d0-f3fa6b172b4a",
      "timestamp": "2018-09-08T02:23:02Z",
      "updated": "2018-09-08T02:23:02Z",
      "title": "Song 1",
      "artist": "Thomas Thomas",
      "rating": 1,
      "opinion": "Good, but redundant",
      "img_url": "http://zoohoo.dallaszoo.com/wp-content/uploads/2016/10/IMG_4093-Jax-Mandrill-CS.jpg"
    }
  ]
}`

Which validates against the above schema. And there could be additional fields added to the schema that would handle things like :richtext