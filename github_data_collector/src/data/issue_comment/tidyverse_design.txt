How:

* add retired label
* rewrite description to describe why the retirement took place
* rewrite examples to focus on translation from old to new syntax
* `@keyword internal`
* remove from pkgdown index
* give file a `retired-` prefix
Basic idea: each package has a copy of the generic and the default method. The default method falls back to the the generic in the other package, setting an argument so you don't get stuck in an infinite loop.

```R
# dbplyr ------------------------------------------------------------------

#' @export
db_desc <- function(x, ...) {
  UseMethod("db_desc")
}

#' @export
db_desc.default <- function(x, ...) {
  # Existing generics don't have default methods so ok to
  # pass unconditonally to
  if (cross_package(...)) {
    # Original db_desc.default implementation
    stop(
      "No applicable method for `", .Generic, "()` ",
      "applied to an object of class \"", class(x)[[1]], "\"",
      call. = FALSE
    )
  } else {
    dplyr::db_desc(x, ..., cross_package = TRUE)
  }
}

# dplyr -------------------------------------------------------------------

#' @export
db_desc <- function(x, ...) {
  if (cross_package(...)) {
    # deprecate when called directly
    # use deprecate_soft() if developer-facing
    # use deprecate_warn() if user-facing
    lifecycle::deprecate_soft("1.0.0", "dplyr::db_desc()", "dbplyr::db_desc()")
  }
  UseMethod("db_desc")
}

#' @export
db_desc.default <- function(x, ...) {
  # Existing generics don't have default methods so ok to
  # pass unconditonally to
  if (cross_package(...)) {
    # Original db_desc.default implementation
    stop(
      "No applicable method for `", .Generic, "()` ",
      "applied to an object of class \"", class(x)[[1]], "\"",
      call. = FALSE
    )
  } else {
    dbplyr::db_desc(x, ..., cross_package = TRUE)
  }
}

cross_package <- function(..., cross_package = FALSE) {
  cross_package
}
```

The main limitation is that when both packages are loaded at the same time, you'll get a conflict for every generic. But I _think_ this is ok because people generally ignore conflicts anyway.

So that you override them with `something = TRUE`

i.e. `lazy_dt(dt, immutable = FALSE)` would be better as `lazy_dt(dt, mutable = FALSE)`

From @lionel: This would mean that some functions would have a quiet parameter (verbose by default), and others would have a verbose parameter (quiet by default).

Maybe the general principle is that the name should be guided by the non-default usage so that when reading code you don't get double-negatives?

I'm curious what your thoughts are on when a user should be expected to use bare variables vs strings as arguments?

I couldn't find discussion on this so far, so apologies if this has already been covered - although I did see this phrase:

> Neither the `names_to` nor the `values_to` column exists in `relig_income`, so we provide them as character strings surrounded in quotes.

Stated around [this section](https://tidyr.tidyverse.org/articles/pivot.html#billboard) of the tidyr vignette.

So, my thoughts are this:

> Bare symbols should be used to reference something that already exists, or will exist, and not to denote options (except for boolean TRUE/FALSE).

For example:

  - an existing column in `select(data, barevar)`
  - A new column, such as in `mutate(data, newvar = barevar + 1)`

But not:

`my_plot(data, colour = red, line_type = dotted)`
https://github.com/juliasilge/tidytext/pull/151
I know it's been discussed previously, but I find default names from `janitor::make_clean_names` to be much more readable and consistent in their style with other naming conventions.

I currently default to including `.name_repair = janitor::make_clean_names` when using `.name_repair`, however, it would be great to have something similar to `make_clean_names` among the default options for the `name_repair` function.

Thanks as always for a great set of tools.
The `names.Rmd` section doesn't render now that `tibble:::set_minimal_names(x)` no longer exists. It's used like so:

````

Consider an unnamed vector, i.e. it has names attribute of `NULL`.

```{r}
x <- letters[1:3]
names(x)
```

Repair the names to make them minimal.

```{r}
x <- tibble:::set_minimal_names(x)
names(x)
```
````

Where does this sort of function live now and what's it called?

cc @lionel- @krlmlr 
When should you use an interactive menu instead of an argument? And how should you do it?
Why to do it + how to do it.