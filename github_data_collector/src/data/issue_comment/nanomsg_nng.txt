The `Dockerfile` in either the [clang](https://github.com/nanomsg/nng/tree/master/.circleci/images/clang) or the [gcc](https://github.com/nanomsg/nng/tree/master/.circleci/images/gcc) folders, ends with a `apt-get update`. How does `nng` get built?
I'm using the lastest version nng lib on windows 10. And get some error in my code.

I wanna make a pub/sub test. My code is like this:

```
    nng_socket sock = NNG_SOCKET_INITIALIZER;
    if( rv = nng_pub_open(&sock) != 0 )
    {
        fatal("nng_pub_open");
        exit(1);
    }
   std::string url = "tcp://127.0.0.1:5555";
    if( rv = nng_dial(sock, url.c_str(), NULL, 0) != 0 )
    {
        fatal("nng_dial")
        exit(1);
    }
```

There is a issue, when nng_dial, the function returns 1, it means Interrupt. Is there something wrong in my code? my _url_ is wrong? I can't find anything in demo code.


This correctly moves the entire protocol header for XREQ and XRESPONDENT
protocols to the message header (not the body).  This is where it should
always have been.  There is some small chance that applications which were
coded to parse the header from the body will break.  We don't think there
are any such applications in use.

fixes #<issue number> <issue synopsis>

<Comments describing your change. Not all changes need this.>

Note that the above format should be used in your git commit comments.
You agree that by submitting a PR, you have read and agreed to our
contributing guidelines.

There is code for nng_msg_getopt and underlying nni_msg_getopt and nni_msg_setopt that is entirely unused today.

The idea here was to support collecting data from the pipe, so that we could provide details like the authentication details (certificate or credentials) on a message.  In the time since that code was written, we've found no practical use for it, as the nng_msg_pipe() lets us achieve the same things.

This extra support for options means we have extra banches, as well as space in every message header, that is unused.  This is not free, and we should clean it up.

The legacy nng_msg_getopt() function should return NNG_ENOTSUP, and be marked deprecated or even removed entirely from the documentation.  A stub will have to be left behind to avoid breaking any program which might have a link dependency on it.
The raw mode stuff is really inconsistent in its use of the message headers.  For some protocols we discard a header if it is present when sending, but then we put data in the header on receive for others.

My feeling is that we should choose one of two options:

1. Eliminate the header from the raw mode public API, and always place the header in the received message body.  There is probably usually room, although there might not be if there is a big backtrace, which would make reallocation painful.   Backtrace limits of just a half dozen would be fine though.

2. Consistently use the header for message header, and only leave user data in the body.  That's not what compat expects though.

I'm starting to lean towards the first option.  Elimination of the public header API would also eliminate a common point of confusion.
Hello. The comment (`nng/supplemental/http/http.h`, line 522) says that this function will fail with NNG_ENOTSUP if the server replies with a chunked encoding. But it seems that the documentation is out of date, and chunked encoding is handled properly.
Because we use semantic versioning, it should be possible to use the nng.h header file to provide the NNG_ABI_VERSION in the CMakeLists.txt.  This would make this a little less error prone when it comes to editing.

Also, we should look at better ways to handle pre-releases (i.e. what is on tip).  Probably we want to branch each time we create a release going forward.
The top of [1.0.0](https://nng.nanomsg.org/man/v1.0.0/index.html) pages says:
```
This documentation is for version 1.0.0 of nng, but the latest released version is 1.2.2. Please see the documentation for 1.2.2 for the most up-to-date information.
```
With a link that goes to [https://nng.nanomsg.org/man/v1.2.2/nng.html](https://nng.nanomsg.org/man/v1.2.2/nng.html) while it should be [https://nng.nanomsg.org/man/v1.2.2/index.html](https://nng.nanomsg.org/man/v1.2.2/index.html)
## NNG & Platform details.
NNG tag 1.2.3 on Linux x64

## Expected Behavior
nng_ctx_send() should not crash when TX data is set via nng_aio_set_iov()

## Actual Behavior
I modified the nng/demo/async/server.c code to set TX data via nng_aio_set_iov() instead of 
nng_set_msg(). The subsequent call to nng_ctx_send() crashes in nni_msg_header_append() because the message inside struct aio is already freed.
It seems nng_ctx_send() can only handle messages, not iovs.

## Steps to Reproduce
Modify example from nng/demo/async/server.c:
```
    case work::RECV:
    {
        auto rv = nng_aio_result(work->aio);
        // error handling omitted for brevity

        auto msg = nng_aio_get_msg(work->aio);
        // RX msg handling omitted for brevity
        nng_msg_free(msg); // ------ MSG in struct AIO is freed here

        // modification: directly send response (state WAIT does not exist in my code)

        // generation of TX data omitted for brevity
        struct nng_iov iov;
        iov.iov_buf = tx_data;
        iov.iov_len = tx_data_len;
        rv = nng_aio_set_iov(work->aio, 1, &iov);
        // error handling omitted for brevity

        work->state = work::SEND;
        nng_ctx_send(work->ctx, work->aio);  // --------------- BOOM here!
        break;
    } 
```

The idhash code currently has an embedded lock.  This was design to make it intrinsically MT safe.  But it turns out that we use it in contexts where need to have a surrounding lock anyway, and this extra lock actually hurts us.

We can gain a little bit by eliminating the lock and making consumers provide their own locks.