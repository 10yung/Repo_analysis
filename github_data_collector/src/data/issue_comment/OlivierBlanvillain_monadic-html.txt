Adding any library that has a dependency to scala-xml into a monadic-html project makes it break.

Seen with:

```
libraryDependencies += "org.julienrf" %%% "endpoints-xhr-client-circe" % "0.12.0"
```

Example
```
<fieldset id="authentication" class={cssClass} onkeyup={ ifEnter(set(submitLogin)) }>
```

will fail with
```
overloaded method constructor UnprefixedAttribute with alternatives:
[error]   (key: String,value: Option[Seq[scala.xml.Node]],next: scala.xml.MetaData)scala.xml.UnprefixedAttribute <and>
[error]   (key: String,value: String,next: scala.xml.MetaData)scala.xml.UnprefixedAttribute <and>
[error]   (key: String,value: Seq[scala.xml.Node],next1: scala.xml.MetaData)scala.xml.UnprefixedAttribute
[error]  cannot be applied to (String, scala.scalajs.js.Dynamic => Unit, scala.xml.MetaData)
[error]     <fieldset id="authentication" class={cssClass} onkeyup={ ifEnter(set(submitLogin)) }>
```

instead of compiling.
Use case:

```scala
            def actionHandler(ev: MouseEvent): Rx[Unit] = action.command().map {
              case Some(actRes) => actionResult := actRes
              case None => println("no RunResult")
            }
```

If this makes sense, would it be OK to publish an RC2 - I have some production code that may depend on this working, though I guess i could get around it by manually working with `Cancelable`s
This seems to be a pervasive issue, though it usually doesn't cause an issue in rendering. However, when it does, it is fairly annoying:

https://stackoverflow.com/questions/38469002/how-to-strip-text-from-xml-string-in-scala

I suggest we have a way like this to rewrite rules. Not sure if we want to implement the full version from scala.xml - haven't looked at it yet, but I suspect we could do something much simpler, as with a tail recursive filter.
example of `Merge` method in doc is: 
```
   * val r1: Rx[Int]
   * val r2: Rx[Int]
   * val merged: Rx[Int] = r1.merge(r2)
   * // r1           => 0 8       3 ...
   * // r2           => 1    4 3    ...
   * // merged  => 0 8 4 3 3 ...
```

but, I run code below:
```
  @JSExport
  def run(): Unit = {
    val a = Var(0)
    val b = Var(1)
    val c = a.merge(b)

    val body = {
      <div>
        <div>a:{a}</div>
        <div>b:{b}</div>
        <div>c:{c}</div>
      </div>
    }
    mount(dom.document.body, body)
  }
```

got result:
```browser
a:0
b:1
c:1
```

not what I expect:
```
a:0
b:1
c:0
```


Anything wrong here?



Merge is often used for complex wiring for patterns like redux, there the default behavior of running all initial values through is very annoying. I would be happy to have an alternative merge that will not put all initial values through itself but will just start from the initial value of the last merged element.
- [x] Map
- [ ] Merge
- [ ] Collect
- [ ] Zip
- [ ] DropRep
- [ ] SampleOn
- [ ] FlatMap (maybe)
- [ ] Performance tests (maybe)
- [ ] Make rx.sharing private 
- [ ] documentation / rationale from #86

This is a WIP, still need to (and appreciate any help or suggestions for):
- [x] more flatMap examples
- [x] merge example
- [ ] composition examples: tail-shareable mixed with always-shareable
- [ ] quick look at imitate example
- [ ] algorithmic considerations
I suspect a logic error on my part, not sure why though; even if `assert(a.foldp(0)(2*_ + 2*_).impure.value == 6)`, I would expect `assert(b.impure.value == 6)` to work.
I implemented a simple router, along with some helper functions, [here](https://github.com/bbarker/ProjectGists/blob/master/Scala/MonadicHTMLNodeDuplication/src/main/scala/mhtml/todo/MhtmlTodo.scala). In the working example, we have the helper class:

```scala
  implicit class RxNode(val rxNode: Rx[Node]) extends AnyVal {
    def toNode(errNode: Node = <div>Error/404</div>): Node = {
      val nodeOuter = <div>{ rxNode }</div>
      nodeOuter.child.headOption match {
        case Some(nd) => <div class="debug">{ nd }</div>
        case None => errNode
      }
    }
  }
```

I don't understand why the first `case` can't just be `case Some(nd) => nd`, but if you leave it as that, you will see bad things happen when you switch between the path `#/counter` and any other path starting with `#/` (i.e., some html wills stay there and not be replaced, while new html continues to be added to the view).



