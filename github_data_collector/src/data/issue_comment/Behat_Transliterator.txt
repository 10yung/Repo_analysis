This library should be updated to support PHP 7.4:

PHP Deprecated:  Array and string offset access syntax with curly braces is deprecated in [src/Behat/Transliterator/Transliterator.php on line 357](https://github.com/Behat/Transliterator/blob/9eb1092ed2a3eb06d3c51f79f208fe8ac1cac553/src/Behat/Transliterator/Transliterator.php#L357).
Is this project still maintained ?
This one is to update data to be in sync with version 1.30 of perl-Text::Unidecode, also tests extended with ukrainian cyrillic subset.
Could you release a new version with the latest commits?

We would like to use this package, but we need the following commit:
- _Updated to version 1.27 of Perl Unidecode_ (8732e225c7a450f9ed657bd158e6487463800867)

Thank you in advance!
If I understand the code correctly, there is unneccessary code in `Transliterator::postProcessText` (https://github.com/Behat/Transliterator/blob/master/src/Behat/Transliterator/Transliterator.php#L568)

The first thing the function does is lowercase the input. After that, in line 580 there is a lot of `preg_replace`going on, checking uppercase chars and finally lowercasing the whole string _again_.

I was wondering why that is there. I think, the code could be simplified

**before**

```
$text = strtolower(preg_replace('/[^A-Za-z0-9\/]+/', $separator,
            preg_replace('/([a-z\d])([A-Z])/', '\1_\2',
                preg_replace('/([A-Z]+)([A-Z][a-z])/', '\1_\2',
                    preg_replace('/::/', '/', $text)))));
```

**after**

```
$text = preg_replace('/[^a-z0-9\/]+/', $separator, preg_replace('/::/', '/', $text));
```

Currently the transliteration is not based on the source language of the text, but this makes a big difference in some cases.
Following some examples: 

'Ä' (U+00C4) transliterates to 'A' but when the source text is in German should transliterate to 'Ae'

There are many more examples: 
https://github.com/pimcore/pimcore/blob/master/pimcore/lib/Pimcore/Tool/Transliteration/Data/x00.php#L25

Would be cool to have this integrated. 

If it's not already supported it would be nice to restrict transliteration to nonlatin scripts, that is keep all accents from french or hungarian text, but transliterate russian text in cyrillyc or chineese. Essentially have ISO-8859-\* as target, and not strictly ASCII.

**Expected Result**:
`е` => `e` (`тест` => `test`)

**Actual Result**:
 `е` => `ie` (`тест` => `tiest`)

P.S. Google transliterate as [test](https://translate.google.com/#ru/en/%D1%82%D0%B5%D1%81%D1%82)

I would like to package the Behat stack for [Fedora](https://getfedora.org/)/[EPEL](https://fedoraproject.org/wiki/EPEL) but [Artistic 1.0](http://dev.perl.org/licenses/artistic.html) licensed software is not allowed in Fedora/EPEL.  Please consider changing this library's license to the newer [Artistic 2.0 ](http://www.perlfoundation.org/artistic_license_2_0) license or perhaps even the MIT license like most other Behat libraries.

For reference, here are the Fedora software license lists:
- [Good licenses](https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Good_Licenses)
- [Bad licenses](https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing#Bad_Licenses) _(note this is where "Artistic 1.0" is listed for Fedora)_

From http://www.gnu.org/licenses/license-list.html#ArtisticLicense :

> Artistic License 1.0
> 
> We cannot say that this is a free software license because it is too vague; some passages are too clever for their own good, and their meaning is not clear. We urge you to avoid using it, except as part of the disjunctive license of Perl.
