I have recently deployed the current Formbase code (currently hosted on moonad.org) to our Kubernetes cluster.
This pull request just change the URL to the new hosted one, using HTTPS (which enables usage on frontends behind HTTPS).
1. I was trying to write affine functions where I can copy elements of any type. I ended up making a CopiableType Type:
``` 
T CopiableType<T>
| copiableType(
  copy: T -> Pair(T,T),
  firstProj: (x: T) -> x == pair_fst(__ copy(x));
  secondProj: (x: T) -> x == pair_snd(__ copy(x));
  ) 
```
Using this I can write functions that use x two times.  It would be something like this:
```
foo(X, c: CopiableType(X), x: X): Pair(X,X)
  case c
  | copiableType => c.copy(x)
```
If I wanted to use it more times, foo could accept multiple `CopiableType(X)` , or a `CopiableType(CopiableType(X))`  to copy the copy function lol.
At first It seemed to me that all types are copiable but then realized that erasures can make a Type not copiable.  `CopiableType(X)` itself is not copiable, but without erasures it would be.
My question is if this could be a buildin part of Formality... Only by looking at a Type one can see if it is copiable or not, and if it is, writing a copy function is trivial using pattern matching. This way it wonâ€™t be necessary to pass a copy function everywhere you want to use it. The only drawback that I see is that in the current version of Formality the number of times a term can be used is restricted, maybe the number of times a term is used could be part of the Type itself.

2. It is possible to give a term of the type `Not(CopiableType(X))` if X is not copiable?

3. What is the purpose of having the erasure in the Subset type? If I I'm writing a proof using some term of the type ` p: Nat .such_that. IsEven`,  then at some point I would need to use p.snd, right? If I should use a Sigma instead, then why having Subsets?

Thank you

The type "Output" doesn't exist... or the examples are missing some import.
This has a recursive call inside each case

> toBrainFuck(p : List(Instruction)) : String
>   case p
>   | nil => nil(_)
>   | cons =>
>   case p.head as ins
>       | right => cons(_ '>', toBrainFuck(p.tail))
>       | left  => cons(_ '<', toBrainFuck(p.tail))
>       | inc   => cons(_ '+', toBrainFuck(p.tail))
>       | dec   => cons(_ '-', toBrainFuck(p.tail))
>       | write => cons(_ '.', toBrainFuck(p.tail))
>       | read  => cons(_ ',', toBrainFuck(p.tail))
>       | loop  => concat(_ concat(_ cons(_ '[' , toBrainFuck(ins.code)), "]"), toBrainFuck(p.tail))
> 

So, when compiled to JS, every case would recurse, being accidentally exponential.

A temporary solution:  insert `+ toBrainFuck : List(Instruction) -> String` inside `toBrainFuck`, below the second `case`.
This will pass the recursive calls linearly to each branches, preventing this problem from happening. it is also a very good practice in general, interaction nets like that style.

On the long term, we can make the JS compiler lazy by wrapping every value inside a `()=>...` closure
Because types are corecursively defined, to check whether those types are equal, we cannot just normalize them and check whether their normal forms are definitionally equal. Rather, we attempt to reduce redexes in all possible orders, branching and performing a breadth-first search. However, the problem with this is that type checking some code like
```
nat.test0: The(Nat, 100n)
  the(_ add(50n, 50n))
```
is incredibly (exponentially) slow, since it will try to reduce `add(50n, 50n)` in all possible orders. A better solution would be to normalize the term before.

How should we prevent the type checker from doing the slow search when it isn't needed? As a possible direction to the solution of this problem I stress that while types are corecursively defined, terms are recursively defined, so that we might need different strategies depending on whether we are dealing with a term or a type.
The following code doesn't stop while type-checking:
```
import Base#

T Commutes<T>(f : T -> T -> T)
| commutes(f: T-> T -> T, proof : (a:T,b:T) -> f(a, b) == f(b, a))

main: Commutes(Nat; (a:Nat,b:Nat) => add(a,b))
 	?a
```
The following typechecks and runs fine:
```haskell
T Thing
| thing

main: Thing
  case thing
  | thing => thing
```

But this does not:
```haskell
main: Thing
  case thing
  | thing => thing

T Thing
| thing
```

It gives the following parse error (the space between "case" and "thing" on line 2 is highlighted):
```
tmp$ fm -t
[PARSE-ERROR]
Couldn't find the ADT for this pattern-match.
Make sure the cases have the correct name and order.

I noticed the problem on line 2, col 7, file main.fm:

   1| main: Thing
   2|   case thing
   3|   | thing => thing
   4|
   5| T Thing
   6| | thing
```
Hi Victor, do you need a js visualization for the formality-core? I just have one which can do interaction combinators [1] and it seems it is easy to adapt for your needs. As I am not competent in the intricacies of your project, I leave the link here. (Also I have to pay back for your nice questions on chemlambda.)

All is needed is to input the rewrite rules in obvious places and to feed the script with a network, presently done by adding it to molLib.js [2].

[1] https://mbuliga.github.io/find-the-quine-step-by-step.html

[2] https://github.com/mbuliga/mbuliga.github.io/blob/master/molLib.js 