The behavior is unaltered, but Rstudio now does not warn about a missing argument.
``` r
library(bayesplot)
#> This is bayesplot version 1.7.1
#> - Online documentation and vignettes at mc-stan.org/bayesplot
#> - bayesplot theme set to bayesplot::theme_default()
#>    * Does _not_ affect other ggplot2 plots
#>    * See ?bayesplot_theme_set for details on theme setting
color_scheme_view()
#> Error in unit(rep(just$vjust, n), "npc"): 'x' and 'units' must have length > 0
```

<sup>Created on 2019-12-02 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

``` r
library(bayesplot)
#> This is bayesplot version 1.7.1
#> - Online documentation and vignettes at mc-stan.org/bayesplot
#> - bayesplot theme set to bayesplot::theme_default()
#>    * Does _not_ affect other ggplot2 plots
#>    * See ?bayesplot_theme_set for details on theme setting
y <- example_y_data()
yrep <- example_yrep_draws()
group <- example_group_data()

ppc_dens_overlay_grouped(y, yrep[1:20,], group = group)
```

<img src="https://i.imgur.com/lAUs6jp.png" width="576" />

``` r
ppc_ecdf_overlay_grouped(y, yrep[1:20,], group = group)
```

<img src="https://i.imgur.com/JT7BO1I.png" width="576" />

<sup>Created on 2019-12-02 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

A user on the forum said that they wouldn't mind contributing but felt unsure of what makes a contribution complete. We should add [contributing guidelines](https://help.github.com/en/github/building-a-strong-community/setting-guidelines-for-repository-contributors).
Added `mcmc_mcse` and `mcmc_mcse_hist` functions with internals required. 

All based on the `mcmc_neff` and `mcmc_neff_hist` functions which also deals with ratio's that are used as input. 
I wanted to create new ppc_ functions, and I've noticed ppc_data. 
The issue is the following:
Is the documentation of this "external" function missing? 
Or is it an internal function exported mistake? 

@jgabry and I were talking that it might be handy to have extra functionality in bayesplot to do MRP style plots. 

Currently you can use BayesPlot with posterior_predict objects provided the observed and newdata are of the same size. This is useful to be able to compare observed versus predicted (when using posterior_predict) to do model diagnostics. 

For MRP it would be useful to increase this functionality where newdata of a different size to the fitted data, and also to include functionality to add a weighted estimate (if weights are available), a raw sample estimate and the full posterior predictive estimate. 

I know @bbbales2 has some great plots for MRP, so he might be able to weigh in. I'll follow up with an example to show what I envision it would look like.  @mitzimorris and @andrewgelman  might be interested too. 
Could you enhance mcmc_intervals so that the y axis parameters can be reordered by the value of x, for example in ggplot:   data, aes(x = m, y = reorder(parameter, m) 
We should have a plot like `ppc_ribbon()` but that plots the raw draws instead of computing interval summaries (like `ppc_dens_overlay()` but values not densities, and and x axis predictor or time variable). 

So for example, `ppc_curve_overlay(y, yrep, x)` would plot `nrow(yrep)` overlaid regression lines (at least they are draws of the regression line if `yrep` is from `posterior_linpred()` instead of `posterior_predict()`).

We could call it `ppc_line_overlay()` but `yrep` doesnâ€™t have to come from a linear model. 
Here's a checklist of _all_ of our plotting functions (broken up into MCMC and PPC and their subcategories) so we can track which do and don't yet have visual tests with **vdiffr** (they all have simple testthat tests, just not visual tests). @tjmahr started the process of adding visual tests in https://github.com/stan-dev/bayesplot/issues/124 and I think we should continue expand the number of our plotting functions that are tested with **vdiffr**. 

We can use this list to keep track of the progress.

### MCMC plots 

`MCMC-diagnostics`
* [x] mcmc_rhat()
* [x] mcmc_rhat_hist()
* [x] mcmc_neff()
* [x] mcmc_neff_hist()
* [ ] mcmc_acf()
* [ ] mcmc_acf_bar()

`MCMC-distributions`
* [ ] mcmc_hist() 
* [ ] mcmc_dens()
* [ ] mcmc_hist_by_chain()
* [ ] mcmc_dens_overlay()
* [ ] mcmc_dens_chains()
* [ ] mcmc_violin()

`MCMC-intervals`
* [x] mcmc_intervals() 
* [x] mcmc_areas() 
* [x] mcmc_areas_ridges()

`MCMC-nuts`
* [ ] mcmc_nuts_acceptance() 
* [ ] mcmc_nuts_divergence() 
* [ ] mcmc_nuts_stepsize() 
* [ ] mcmc_nuts_treedepth() 
* [ ] mcmc_nuts_energy()

`MCMC-parcoord`
* [ ] mcmc_parcoord()

`MCMC-recover`
* [ ] mcmc_recover_intervals() 
* [ ] mcmc_recover_scatter() 
* [ ] mcmc_recover_hist()

`MCMC-scatterplots`
* [ ] mcmc_scatter() 
* [ ] mcmc_hex() 
* [ ] mcmc_pairs()

`MCMC-traces`
* [x] mcmc_trace() 
* [x] mcmc_trace_highlight() 
* [x] mcmc_rank_overlay() 
* [x] mcmc_rank_hist() 

### PPC plots

`PPC-discrete`
* [x] ppc_bars()
* [x] ppc_bars_grouped()
* [x] ppc_rootogram()

`PPC-distributions`
* [x] ppc_hist() 
* [x] ppc_boxplot() 
* [x] ppc_freqpoly() 
* [x] ppc_freqpoly_grouped() 
* [x] ppc_dens() 
* [x] ppc_dens_overlay() 
* [x] ppc_ecdf_overlay() 
* [x] ppc_violin_grouped()

`PPC-errors`
* [x] ppc_error_binned()
* [ ] ppc_error_hist() 
* [ ] ppc_error_hist_grouped() 
* [ ] ppc_error_scatter() 
* [ ] ppc_error_scatter_avg() 
* [ ] ppc_error_scatter_avg_vs_x()

`PPC-intervals`
* [x] ppc_intervals() 
* [x] ppc_intervals_grouped() 
* [x] ppc_ribbon()

`PPC-loo`
* [ ] ppc_loo_pit_overlay() 
* [ ] ppc_loo_pit_qq() 
* [ ] ppc_loo_intervals() 
* [ ] ppc_loo_ribbon()

`PPC-scatterplots`
* [x] ppc_scatter() 
* [x] ppc_scatter_avg() 
* [x] ppc_scatter_avg_grouped()

`PPC-test-statistics`
* [x] ppc_stat() 
* [x] ppc_stat_grouped() 
* [x] ppc_stat_freqpoly_grouped() 
* [x] ppc_stat_2d()