Unable to call `.documentation()` on a `hug.local()` interface because the `doc` `OrderedDict` is not initialized.
```

~/.pyenv/versions/3.8.0/lib/python3.8/site-packages/hug/interface.py in documentation(self, add_to)
    316                 for requirement in self.requires
    317             ]
--> 318         doc["outputs"] = OrderedDict()
    319         doc["outputs"]["format"] = _doc(self.outputs)
    320         doc["outputs"]["content_type"] = self.outputs.content_type

TypeError: 'type' object does not support item assignment
```

```
306         def documentation(self, add_to=None):
307             """Produces general documentation for the interface"""
308             doc = OrderedDict if add_to is None else add_to
309
310             usage = self.interface.spec.__doc__
311             if usage:
312                 doc["usage"] = usage
313             if getattr(self, "requires", None):
314                 doc["requires"] = [
315                     getattr(requirement, "__doc__", requirement.__name__)
316                     for requirement in self.requires
317                 ]
318  ->         doc["outputs"] = OrderedDict()
```
I have this method:
```
@hug.get('/documents/list')
def llista():
    """Returns whole list of documents"""
    docs = [lib.Doc(doc).HeaderstoJSON for doc in glob.iglob('./*.md')]
    return {'documents': docs}
```

and `http://localhost:8000` returns me:

```
"documentation": {
        "handlers": {
            "/documents/list": {
                "GET": {
                    "usage": "Returns whole list of documents",
                    "examples": [
                        "http://localhost/documents/list"
                    ],
                    "outputs": {
                        "format": "JSON (Javascript Serialized Object Notation)",
                        "content_type": "application/json; charset=utf-8"
                    }
                }
            },

```
but really the autogenerated documentation should say the port:
``` "examples": [
                        "http://localhost:8000/documents/list"
                    ],```
from marshmallow import Schema, fields


class TestingSchema(Schema):
    a = fields.Integer(required=True)
    b = fields.Integer(required=True)
    c = fields.Integer()


@api.route.post('/test')
def test_validation(body: TestingSchema()):
    return True, '', body

when body is None 
![image](https://user-images.githubusercontent.com/13211288/68932734-2c882a00-07ce-11ea-8313-1c60258205ec.png)

More an edge case than a real issue: if a body parameters has the exact same name as a query parameter, then the body parameter will override the value.

For example, consider this route definition (with MySchema defined elsewhere)
```python
import falcon
import hug
from marshmallow import fields
@hug.post(["test/{param_1}/route/{param_2}"], status=falcon.HTTP_201)
def my_route(
    request,
    response,
    param_1: fields.Str(description="A param"),
    param_2: fields.Str(description="Another param"),
    body: MySchema(),
):
    print(param_1)
    print(param_2)
```
If I call it like that
```json
POST /test/first_value/route/second_value
[...]
{
  "body_param": "a body param value",
  "param_2": "overwritten_value"
}
```
then the output will be
```
first_value
overwritten_value
```

Even if MySchema does not define `param_2` (stripping `param_2` key from the body), the value gets overwritten.
This may not at all be a hug bug, but thought I'd mention it. It's a super weird behavior (and not necessarily hug's, but maybe partly).

Basically, I've had hug going for a while on a few of my APIs. I've been doing stuff like this:

```
@hug.post('/endpoint')
function foo(bar, baz="meh", something="else"):
    return stuff
```

Well, using JSON you can pass in extra parameters and it won't bail with "unexpected keyword argument". I had accidentally been doing that for a while without realizing it.

Then I thought, what if I put timers on my endpoints?

```
@hug.post('/endpoint')
@statsd.timer('foo')
function foo(bar, baz="meh", something="else"):
    return stuff
```

And you do have to get the statsd.timer decorator in that order, otherwise it won't work.

Now with the statsd.timer decorator, it's suddenly picky about unexpected arguments. I ended up breaking a few things this way. Oops. Now statsd.timer is gone, at least for now.
i have this simple API class
```python
@hug.object.http_methods('/infosets')
class InfosetCollection:

    def __init__(self, infoset_store):
        self.infoset_store = infoset_store

    def get(self, req, resp):
        # we need to retrieve all the infosets available
        return self.infoset_store.list()

    def post(self, req, resp):
        infoset = req.data
        return self.infoset_store.save(infoset=infoset)
```


where `infoset_store` is the real manager of the `infoset` resource.

Of course Hug choke on this since it tries to create instances of `infosetCollection` without any `infoset_store`.

Is there a clean way out of this to decorate "real" classes that are not just a bunch of stateless methods ?

A global is not an option, globals lead to premature creation of resources, side effects at import time and all manners of evil.
The current class allows me to inject an `infoset_store` for tests, delay configuration of `infoset_store` till it is really needed and a lot of other good things.

I looked into a few examples and saw the use of directive but will this not quick the ball just one step further into the directive that would also need to access a global or eagerly load its configuration ?

Is there a solution for Hug to create its API class instances later than at 'import/init" time, pass a factory function that would be called once when the API is used or take control of the instance creation ?

Thanks a lot for your time and the HUG project.


Hi, @timothycrosley ! I've been discussing the idea of converting python type annotations to marshmallow fields automatically with my colleagues a lot recently and we think it might be quite handy in hug.

In short, this idea consists of two major parts:
- Convert type annotations for builtin types into marshmallow fields automatically.
- Deprecate almost all of the hug's validation logic and delegate that to marshmallow by making it a dependency.


### Why
- Allow seamless integration with type checkers.
- Reduces the amount of boilerplate.

Let's look at these two points more closely. In #776 I've introduced `args` argument to routing decorator that allows writing type annotations for arguments in handlers. While that was a step in the right direction, it only offers `all-or-nothing` approach: it is possible to either describe marshmallow fields for validation in `args` and Python type annotations in handler signature or put marshmallow fields directly in handler signature. This leads to increased amount of boilerplate for handlers that have complex signature and want to make use of type checkers.

Consider the following example:
```python
import hug
from marshmallow import fileds

@hug.get("/", args={"foo": fields.Integer(), "bar": fields.String()})
def handler(foo: int, bar: str):
    return "baz
```

Note how user is forced to write parameters both in `args` argument for decorator and at the same time in handler's signature. And they are seemingly disconnected from each other, nothing prevents from putting `: int` type annotation for the `bar` argument and there is no check against it at this point.

The other major advantage of automatic conversion is that most of the time users only need simple validation which can be easily described with type annotations. In the example above both of the fields and their arguments (or the lack thereof) can be easily deduced from type annotations and there should be no need for `args` at all. However if user needs some kind of special validation (say, pass`validate=Length(min=8)` to `fields.String`), then he can easily do so via `args` argument only for those arguments that need it and fields from `args` will take precedence over automatically deduced fields.

### How

Here are the rules for converting Python type annotations to marshmallow fields (most of them are absolutely straightforward):

Python type | Marshmallow field
------------ | -------------
int | Integer
float | Float
str | String
bool | Boolean
datetime.datetime | DateTime
datetime.time | Time
datetime.timedelta | TimeDelta
datetime.date | Date
decimal.Decimal | Decimal
Any | Raw

Collections are converted as follows:

Python type | Marshmallow field
------------ | -------------
list | List(Raw)
List[builtin_type] | List(marshmallow_field)
dict | Dict(Raw)
Dict[builtin_type_1, builtin_type_2] | Dict(keys=marshmallow_field_1, marshmallow_field_2)

Wrapping a type in `Optional` is equivalent to passing `allow_none` to `Field` constructor.
Default value for an argument will be passed as `missing` to the `Field` constructor.

Complex objects described with schemas (such as `POST` body) are a little bit more tricky. Much of the inspiration for this suggestion comes from a fantastic library [marshmallow_dataclass](https://github.com/lovasoa/marshmallow_dataclass), so I might go as far as to suggest to ask users to describe their schemas using dataclasses and then convert these dataclasses using `marshmallow_dataclass`. But that might be a little bit too much at this point, so we can resort to annotating body as `Schema` as usual either in signature or in `args`.


### Why deprecate hug validation layer?

Because it brings nothing to the table. There is no need for additional validation logic if marshmallow does a wonderful job and has great API. Moreover, consistency in validation tools allows for better integration with some tools for autogenerating API documentation (such as Swagger).

Here is how it can go:
- `number`, `float_number`, `decimal`, `boolean`, `uuid` have obvious alternatives in marshmallow.
- `text` is equivalent to `String`
- `multiple` is roughly equivalent to `List`. It can be a represented as a subclass to `List` that can also accept a single value and transform it to a list.
- `smart_boolean` is equivalent to `Boolean`.
- `inline_dictionary` is equivalent to `Dict`.
- `comma_separated_list` can be created out of `List`, I have a snippet ready.

And so on. The point is not to remove hug validation logic but rather to offer alternatives made with marshmallow.

### Risks
- One major risk I see is that some bits of validation logic require marshmallow 3, and it's not released fully yet. Although there is no problem starting development and hopefully when it ends marshmallow 3 will be released.
- There is also a risk of making backwards-incompatible changes. At this point I see nothing that can lead to this but the possibility is real.


This is a lot to process, so please tell if you need more details and/or clarification. I would be glad to hear whether you'd be interested in such a feature.
If a function has an `output=` parameter and it is exposed over a CLI, an "output" option appears, but setting it to different values (like html or hug.output_format.pretty_json) does nothing.

That option should not be exposed or it should work (like a switch with multiple values described from the help maybe). 
Hello, I'm trying to leverage rapidjson's validator in my application and the validator wants the raw text of the body.  Within hug.tests environment the body is already in an object and I would prefer not to json.dumps this to get it to work in a hug.test call whereas running the server for real I can get the raw body from the request object.  So my ask is to include a mock request object in the hug.test framework that at least includes the raw text payload body when an http method.
`flake8-docstrings` is going to involve 657 lines of changes. Let's make that one a separate issue and PR