see: https://travis-ci.org/mlr-org/mlrMBO/builds/633742941#L9796
Locally it seems to run when I built it with `pkgdown:::build_site_external()`. :man_shrugging: 
Hopefully this somehow fixes the problem. But I am not sure if it works correctly on integer values (methodology-wise).

Hopefully solves Issue #392 
See #473 for discussion.
fixes #477 nsga2, which used wrong dots
fixes #472 numeric -> int type
Trying to do infill optimization with method "nsga2" does not work when I try it.

Example 1:
```r
obj.fun <- smoof::makeSingleObjectiveFunction(
  fn = function(x) checkmate::assertIntegerish(x$ypar),
  par.set = mlrCPO::pSS(xpar: numeric[0, 10], ypar: integer[0, 10]),
  has.simple.signature = FALSE)
ctrl <- makeMBOControl()
# ctrl <- setMBOControlMultiPoint(ctrl, method = "moimbo")
ctrl <- setMBOControlInfill(ctrl, makeMBOInfillCritAdaCB(), opt = "nsga2")
mbo(obj.fun, control = ctrl)
```

Example 2:
```r
obj.fun <- smoof::makeMultiObjectiveFunction(
  fn = function(...) unlist(list(...)),
  par.set = mlrCPO::pSS(xpar: numeric[0, 10], ypar: integer[0, 10]),
  has.simple.signature = FALSE)
ctrl <- makeMBOControl(n.objectives = 2)
# ctrl <- setMBOControlMultiPoint(ctrl, method = "moimbo")
ctrl <- setMBOControlInfill(ctrl, crit = makeMBOInfillCritDIB(), opt = "nsga2")
ctrl <- setMBOControlMultiObj(ctrl, method = "dib")
mbo(obj.fun, control = ctrl)
```

both give a version of the error
```r
Error in fn(x, ...) : unused argument (progress = progress)
```

If `"nsga2"` works under some circumstances but not others, these circumstances should be better documented, and running `mbo()` under other circumstances should inform the user about this.

```r
ps = makeParamSet(
  makeNumericParam("q", lower = -1, upper = 2),
  makeIntegerParam("v", lower = -2, upper = 3)
)
des = generateDesign(n = 7, par.set = ps)
des$y = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
ctrl = makeMBOControl(propose.points = 2)
ctrl = setMBOControlMultiPoint(ctrl, method = "moimbo")
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = TRUE, noisy = FALSE)
proposition <- proposePoints(opt.state)
```
proposes points
```r
> proposition$prop.points
          q         v
1 0.9227752 -1.015992
2 0.8010565  2.468416
```
even though `"v"` is an integer parameter. This is not a problem when called through `mbo()` because even though the proposed points are non-integers, `mlrMBO:::evalProposedPoints.OptState` calls `ParamHelpers::repairPoint()`; this should probably also be done in the HitL code path.
Performing mbo over integer parameter spaces with infill optimization "cmaes"
```r
ps = makeParamSet(
  makeNumericParam("q", lower = -1, upper = 2),
  makeIntegerParam("v", lower = -2, upper = 3)
)
des = generateDesign(n = 7, par.set = ps)
des$y = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
ctrl = makeMBOControl()
ctrl = setMBOControlInfill(ctrl, opt = "cmaes")
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = TRUE, noisy = FALSE)
proposePoints(opt.state)
```
gives error
```r
Error in cmaesr::cmaes(fn, start.point = start.point, monitor = NULL,  : 
  CMA-ES only works for objective functions with numeric parameters.
```
it would be nice of MBO to allow this and perform rounding instead.
## parego fails:
```r
ps = makeParamSet(
  makeNumericParam("q", lower = -1, upper = 2),
  makeIntegerParam("v", lower = -2, upper = 3)
)
des = generateDesign(n = 7, par.set = ps)
des$y_1 = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
des$y_2 = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
ctrl = makeMBOControl(n.objectives = 2)
ctrl = setMBOControlInfill(ctrl, crit = makeMBOInfillCritEI())
ctrl = setMBOControlMultiObj(ctrl, method = "parego")
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = c(TRUE, TRUE), noisy = FALSE)
proposePoints(opt.state)
x = data.frame(q = 1.7, v = 1)
updateSMBO(opt.state, x = x, y = c(2.19, 2.19))
```
gives error
```r
Error in control$infill.crit$fun(points = x, models = getOptStateModels(opt.state)[[1]],  : 
  Assertion on 'control$y.name' failed: Must have length 1.
```

## similarly, mspot fails:
```r
ps = makeParamSet(
  makeNumericParam("q", lower = -1, upper = 2),
  makeIntegerParam("v", lower = -2, upper = 3)
)
des = generateDesign(n = 7, par.set = ps)
des$y_1 = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
des$y_2 = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
ctrl = makeMBOControl(n.objectives = 2)
ctrl = setMBOControlInfill(ctrl, crit = makeMBOInfillCritEI(), opt = "nsga2")
ctrl = setMBOControlMultiObj(ctrl, method = "mspot")
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = c(TRUE, TRUE), noisy = FALSE)
proposePoints(opt.state)
x = data.frame(q = 1.7, v = 1)
updateSMBO(opt.state, x = x, y = c(2.19, 2.19))
```
with error
```r
Error in control$infill.crit$fun(points = x, models = getOptStateModels(opt.state)[[1]],  : 
  Assertion on 'control$y.name' failed: Must have length 1.
```
Example, adapted from the [tutorial](https://mlrmbo.mlr-org.com/articles/supplementary/human_in_the_loop_MBO.html):
```r
ps = makeParamSet(
  makeNumericParam("q", lower = -1, upper = 2),
  makeIntegerParam("v", lower = -2, upper = 3)
)
des = generateDesign(n = 7, par.set = ps)
des$y = c(1.20, 0.97, 0.91, 3.15, 0.58, 1.12, 0.50)
ctrl = makeMBOControl()
ctrl = setMBOControlInfill(ctrl, crit = makeMBOInfillCritAdaCB())  # !!!!!!!!!!!!
opt.state = initSMBO(par.set = ps, design = des, control = ctrl, minimize = TRUE, noisy = FALSE)
proposePoints(opt.state)
x = data.frame(q = 1.7, v = 1)
updateSMBO(opt.state, x = x, y = 2.19)
```
gives error
```r
Error in control$infill.crit$fun(points = x, models = getOptStateModels(opt.state)[[1]],  : 
  unused argument (designs = getOptStateDesigns(opt.state))
```