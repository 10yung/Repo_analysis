Hey! I've been monitoring this project for a little while, and I'm super excited to see how far it's come. Thanks for all your work so far.

I'm hoping to maybe even start using this at work (although Rust is still a hard sell, yet). I was wondering if you could give a little background on who the maintainers of this project are, what your plans for the project are, how development is sustained, and that kind of context. I'm asking a little ways ahead of when I might need to pitch at work because I'm gonna have to jump through some compliance hoops, and having good stories to tell about each of the libraries I'd recommend would be _super_ helpful.

That said, I understand I'm asking for info which might be considered personal, this is _completely_ optional, and I have no expectations here. I'm asking from a place of preparation and hope ðŸ˜„ 

Thanks!
For my understanding about actor model, i need 1 actor keep looping to do some task it should not hang the system, other actors should still working and do their job
The current version still has alpha dependencies in the manifest file.
Would be great to update them to the released ones.

This MR introduces `Instant` for time tracking in the timer, replacing the before used `SystemTime`. 
Closes #42. 
This PR replaces `log` crate by the `slog` crate. All code was written with a backward compatibility in mind. When `slog::Logger` is not passed to actor system via the `SystemBuilder`, then behavior and log messages format stays the same as was before this PR.

Example of how `slog` can be passed to riker.
```rust
#[macro_use]
extern crate slog;
extern crate sloggers;

use sloggers::Build;
use sloggers::terminal::{TerminalLoggerBuilder, Destination};
use sloggers::types::Severity;

let mut builder = TerminalLoggerBuilder::new();
builder.level(Severity::Debug);
builder.destination(Destination::Stderr);

let logger = builder.build().unwrap();
let sys = SystemBuilder::new()
    .log(logger)
    .create().unwrap();
```
Maybe it makes sense to inform channel subscriber, that subscription has been added to the subscription list? 

Such notification can be useful in the case when subscriber has to be sure that it will be notified on something, it immediately initiated. This will help to avoid race conditions similar to what currently happens in _ActorSystem::shutdown._ I believe that this is quite a common pattern. 

Hello,

this pull request provides the initial implementation for the _ActorSystem::when_terminated_ function, as it was proposed in the issue (#58). 
Code in https://github.com/riker-rs/riker/blob/master/src/kernel/mailbox.rs#L307-L311 is commented out, so Actor::post_start is never called.
Hi.
Thank you for making Riker!

In the "Message Types" section of the tutorial the code for implementing Receiver<Sub> and Receiver<Print> both have _msg: Add ...

The example ran correctly after changing _msg: to Sub and Print, respectively.

I didn't try running it as is...

Thanks.

P.S. I am going to try to use Seed (a WASM web-framework) with Riker, just to experiment and learn. Is there anything you think I should know about using Riker with WASM?

Noob to webdev, Rust, actors, distributed computing, etc. (pretty much a noob to all this tech with Rust being my first language for anything more than dabbling (dabbled with Haskell and Python each for a bit...)).
email is rob.webb.jr@gmail.com




