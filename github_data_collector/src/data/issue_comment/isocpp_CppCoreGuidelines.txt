Hello, long time no sees.
Finally, we completed the translation of "C++ Core Guidelines" to Korean.
It is based on the version of September 2018.
Also, we changed the design of a web site. It is based on mkdocs.

- Links: https://www.cppkorea.org/CppCoreGuidelines/

We'll update the document for 2020. Thanks. :)
Added example to CP.61: Use an async() to spawn a concurrent task
I.2 and R.6 seem to address the same issue,
thus I propose removing R.6 and moving some of its contents into I.2.

Review of a submitted change to clang-tidy, for a check implementing I.2,
revealed conflicting interpretations of whether to warn about non-const
variables in anonymous namespace: Therefor this patch also includes a
suggestion to add the excplicit exception that variables in anonymous
namespace should not be considered "global".
https://reviews.llvm.org/D70265
As discussed in #1498, `narrow<>()` is specified to throw if the narrowing cast loses information, and `narrow_cast<>()` is specified to tolerate loss of information.

Should the GSL also define a narrowing cast that has the precondition that the source value is representable in the destination type?
May I ask a clarifying question regarding the items in Section T (Templates + Concepts), such as [T.13: Prefer the shorthand notation for simple, single-type argument concepts](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rt-shorthand). Is it correct that these examples reflect the proposed syntax in the Concepts TS, which however slightly differs from the syntax ultimately adopted for C++20?  For instance, where the Concepts TS allows a short-hand syntax `void sort(Sortable &)`, C++20 will demand `void sort(Sortable auto &)` to keep the syntactic distinction between the non-template function `sort` that accepts type `Sortable` vs. the constrained template function that constrains the type with which it may be instantiated using the `Sortable` concept.  This is based on reading that [P1141r1](http://open-std.org/JTC1/SC22/WG21/docs/papers/2018/p1141r1.html) reflects what was (will be?) accepted into C++20.

If my understanding is correct, then should we expect future updates/clarifications regarding the relationship between the Concepts TS and C++20 Concepts, or perhaps an update to reflect C++20 concepts?

I did read [FAQ 9](http://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#faq9-do-these-guidelines-propose-new-language-features) which makes it clear that the guidelines reflect C++14 + Concepts TS. Still, readers may read section T out of context when trying to learn concepts.
 
- F.6: If your function may not throw, declare it `noexcept`
Enforcement: Flag throwing `swap`, `move`, destructors, and **default constructors**.
Emphasis mine.
  * C.37: Make destructors `noexcept`
  * C.66: Make move operations `noexcept`
  * C.85: Make `swap` `noexcept`
  * No rule for default constructors.
    - E.16: Destructors, deallocation, and `swap` must never fail
      Same.

Given the close relationship between the moved-from state and default-constructed state, it seems this guideline's missing.
_C.67: A polymorphic class should suppress copying_ is IMHO a bit off for two reasons:

- it doesn't consider exception classes, which *must* be copy constructible

- "suppress copying" may make the reader think they should explicitly disable copying, but that's not necessary if the base class is already non-copyable

So, I suggest rewording the guideline to:

Â  "A polymorphic, non-exception, class should not be copyable"
Throughout the guidelines, the expression "may not" is sometimes used to mean "it's possible that it doesn't", sometimes to mean "must not". In fact, both usages are possible in English, but this ambiguity doesn't seem good for a technical document. See also:

  &lt;https://english.stackexchange.com/questions/56065/must-not-or-may-not-which-is-the-most-correct&gt;

(thanks Paul Smith for providing that link).

I suggest, as a drafting rule, to always avoid "may not".
Rules I.2 and R.6 seem to be one and the same rule. Maybe one of them should be removed?
The GSL section used to have an `owner<T*>` template presented... which is no longer there. Was there a decision to remove it at some point? I kind of liked it.

Anyway, `owner<T*>` is still being used in several places in the guidelines document:

* P.6 exampls.
* I.11 alternative 2
* I.11 enforcement
* I.30 example
* F.22 title(!) and throughout

etc. etc.

So what gives? Has `owner<>` been dropped, or hasn't it?