I have a server that serves a dist/ folder on a GET '/' request. But Negroni panics on any and all POST, PUT, PATCH, or DELETE requests. 

I know this might not be negronis fault, But running this on a docker instance on my local machine works like a charm, while running on a server will return this

`PANIC: runtime error: invalid memory address or nil pointer dereference
goroutine 338 [running]:
github.com/codegangsta/negroni.(*Recovery).ServeHTTP.func1(0x7fb434153028, 0xc00031ef00, 0xc0001100a0)
	/home/user/go/src/github.com/codegangsta/negroni/recovery.go:34 +0xe8
panic(0x6de540, 0x99fc40)
	/usr/local/go/src/runtime/panic.go:522 +0x1b5
github.com/direcotry/directory2/models.(*Pdb).Message(0x9aa960, 0xc0002b3a40, 0x8, 0x2, 0x2, 0x11, 0x0, 0x0, 0xc000099648)
	/home/user/go/src/github.com/direcotry/directory2/models/models.go:53 +0xa4
github.com/dvlcdr/directory2/models.Message(0xc0002b3a40, 0x8, 0x3, 0x73804e, 0x1, 0x738284, 0x4, 0xc0002b3a40)
	/home/user/go/src/github.com/direcotry/directory2/models/models.go:84 +0xd0
github.com/direcotry/directory2/controllers.FetchAllDb(0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0x0, 0x0, 0x0)
	/home/user/go/src/github.com/direcotry/directory2/controllers/controllers.go:122 +0xef
github.com/julienschmidt/httprouter.(*Router).ServeHTTP(0xc000122000, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/julienschmidt/httprouter/router.go:299 +0x6e0
github.com/codegangsta/negroni.Wrap.func1(0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc000319840)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:41 +0x4d
github.com/codegangsta/negroni.HandlerFunc.ServeHTTP(0xc0001101e0, 0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc000319840)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:24 +0x4e
github.com/codegangsta/negroni.middleware.ServeHTTP(0x79f180, 0xc0001101e0, 0xc000110280, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:33 +0x9c
github.com/rs/cors.(*Cors).ServeHTTP(0xc000126000, 0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc000319820)
	/home/user/go/src/github.com/rs/cors/cors.go:252 +0x190
github.com/codegangsta/negroni.middleware.ServeHTTP(0x79e780, 0xc000126000, 0xc000110260, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:33 +0x9c
github.com/codegangsta/negroni.(*Static).ServeHTTP(0xc00011c090, 0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc000319800)
	/home/user/go/src/github.com/codegangsta/negroni/static.go:30 +0x78d
github.com/codegangsta/negroni.middleware.ServeHTTP(0x79e740, 0xc00011c090, 0xc000110240, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:33 +0x9c
github.com/codegangsta/negroni.(*Logger).ServeHTTP(0xc000112098, 0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc0003197e0)
	/home/user/go/src/github.com/codegangsta/negroni/logger.go:27 +0x15c
github.com/codegangsta/negroni.middleware.ServeHTTP(0x79e6e0, 0xc000112098, 0xc000110220, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:33 +0x9c
github.com/codegangsta/negroni.(*Recovery).ServeHTTP(0xc0001100a0, 0x7fb434153028, 0xc00031ef00, 0xc000364d00, 0xc0003197c0)
	/home/user/go/src/github.com/codegangsta/negroni/recovery.go:45 +0x82
github.com/codegangsta/negroni.middleware.ServeHTTP(0x79e720, 0xc0001100a0, 0xc000110200, 0x7fb434153028, 0xc00031ef00, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:33 +0x9c
github.com/codegangsta/negroni.(*Negroni).ServeHTTP(0xc00011c0f0, 0x7a43a0, 0xc00035ca80, 0xc000364d00)
	/home/user/go/src/github.com/codegangsta/negroni/negroni.go:73 +0xdd
net/http.serverHandler.ServeHTTP(0xc0001240d0, 0x7a43a0, 0xc00035ca80, 0xc000364d00)
	/usr/local/go/src/net/http/server.go:2774 +0xa8
net/http.(*conn).serve(0xc0002a9220, 0x7a4a60, 0xc0001ce100)
	/usr/local/go/src/net/http/server.go:1878 +0x851
created by net/http.(*Server).Serve
	/usr/local/go/src/net/http/server.go:2884 +0x2f4`

Is there any chance this could be happening from a lack of memory? Or could anyone point me in a good direction to figuring out the problem?
The docs indicate that when overriding the default `Recovery.Formatter`, it's possible to set response headers. I'm currently attempting to set the `Content-Type` header to `application/json`, however it appears that doesn't stick and reverts to `text/plain; charset=utf-8`.

Example:

```go
package main

import (
	"fmt"
	"net/http"

	"github.com/urfave/negroni"
)

type PanicFormatter struct{}

func (t *PanicFormatter) FormatPanicError(rw http.ResponseWriter, r *http.Request, infos *negroni.PanicInformation) {
	rw.Header().Set("Content-Type", "application/json")
	fmt.Fprintf(rw, `{"error":"%s"}`, infos.RecoveredPanic)
}

func main() {
	mux := http.NewServeMux()
	mux.HandleFunc("/", func(w http.ResponseWriter, req *http.Request) {
		panic("oh no!")
	})

	n := negroni.New()
	recovery := negroni.NewRecovery()
	recovery.Formatter = &PanicFormatter{}
	n.Use(recovery)
	n.UseHandler(mux)

	http.ListenAndServe(":3003", n)
}
```

```txt
$ curl -i localhost:3003
HTTP/1.1 500 Internal Server Error
Date: Fri, 16 Nov 2018 20:32:32 GMT
Content-Length: 18
Content-Type: text/plain; charset=utf-8

{"error":"oh no!"}
```
I am using Timeout middleware with negroni . Sample code can be found here: https://gist.github.com/Vikash082/c3af4fb89728f816beb8204b4737d56d

But when there is panic occurs in my http handlers, negroni Recovery middleware doesn't work which means programs crashes. If I disable my Timeout middleware, program recovers as expected. Is there I need to change in my Timeout middleware to work with Recovery middleware.
`PrintStack` should be set to `false` as default in `negroni.Recovery`.
It should be set willingly to true only in a protected development environment but never in production.
Why does Negroni use both `http.Handler` and `http.HandlerFunc` in its API? It's rather inconsistent.

```
func New(handlers ...Handler) *Negroni
```
compared with the third parameter in
```
type Handler interface {
	ServeHTTP(rw http.ResponseWriter, r *http.Request, next http.HandlerFunc)
}
```

-Addresses:
https://github.com/urfave/negroni/issues/147#issuecomment-249397722
I definitely think this should be implemented for Negroni.

Terminable middleware allows you to add code that runs **AFTER** the response has been fully served.

There is a subtle but crucial difference to adding code after `next(rw, r)`.

It is also related (vaguely) to an issue I highlighted here: https://github.com/urfave/negroni/pull/138#issuecomment-230388334 where in the the recovery middleware, if you were to add a custom error handler, the handler wastes time from client's perspective.

Further Reading:
https://laravel.com/docs/5.3/middleware#terminable-middleware

The Recovery middleware couldn't recover a panic correctly after something was already written into the `ResponseWriter`. So I wrote some tests against this issue and fixed it.
