First off, I want to say that finding this project was very exciting and is functionality that I've been itching for. 

It'd be nice if we could provide this inside notebooks themselves. Here's what I'm envisioning:
```python
# my_notebook.ipynb
## cell
# defaults
MODEL = 'asdsadfasfd'
DATASET = 'asdfasdf.csv'

## cell
%% nbrun some_test_1
MODEL = 'adfasdfasf'
...

## cell
%% nbrun some_test_2
MODEL = 'qwerqwerer'
DATASET = 'qwerwqer.csv'
...

# ....rest of notebook...
```
Then to run:
```
>>> nbrun my_notebook.ipynb results/
Writing to results/some_test_1.pdf.
Writing to results/some_test_2.pdf.
```

So the nbrun script would branch off for each nbrun id it encounters and write that to its own file. Only cells that match the current nbrun branch id would be run. This would actually remove the limitations because it wouldn't require objects to have a literal representation.

One thing that would require thought is if we would need to enforce these cells to exist only at the top of the file. And if not, if we allow branching in the middle or at the end, how would we deal with cloning objects for each branch.

Hey,
thank you very much for 'nbrun'! Everything works fine, except when I use hine_input=True it doesn't have any effect and I get a notebook or html file with visible input cells.
Thanks again,
Stephan