I created a separate stratis file-system for my virtualbox disks. I created tree vmdk for a vm in the root of the mounted stratis fs. In the vm I create a zfs pool from that tree disks. After the reboot of my Fedore 31 host can't mount he stratis fs (for the virtualbox) by UUID. 

I tested the device of this stratis fs and get this result:
```
blkid -p /dev/mapper/stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19
blkid: /dev/mapper/stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19: ambivalent result (probably more filesystems on the device, use wipefs(8) to see more details)
```

So what other filesystems?:
```
wipefs /dev/mapper/stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19
DEVICE                                                                              OFFSET  TYPE       UUID                                 LABEL
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x0     xfs        0262354f-ef64-4d28-85b6-46c6676ffd19 
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x3f000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x3e000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x3c000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x3b000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x36000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x35000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x27000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x26000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x24000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x23000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x7c000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x7b000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x76000 zfs_member                                      
stratis-1-7ac44c27b313400ca1a6a4ca0497d359-thin-fs-0262354fef644d2885b646c6676ffd19 0x75000 zfs_member
```

Somehow the zfs membership is written into the stratis fs. How? If the vmdk is not in the root of the stratis fs but in a folder, there is no problem.

My environment:
OS: Fedora 31
Stratis:
```
yum list installed | grep stratis
stratis-cli.x86_64                                 1.0.4-1.module_f31+6320+bf3c8975       @fedora-modular                             
stratisd.x86_64                                    1.0.5-1.module_f31+6320+bf3c8975       @fedora-modular
```
When should the filesystem extend?

I have a filesystem with comes to the limit of 1 TB
df tells me i'm on 95% of usage and 57 GB left.

stratis fs list
`stratis_pool01  fs_archiv        980.01 GiB   Mar 01 2019 13:10  /stratis/stratis_pool01/fs_archiv        45fa24827f264f24a61028fbb1d3824a
`
df
`/dev/mapper/stratis-1-210eb8dac6cb440993454dac6a885dae-thin-fs-45fa24827f264f24a61028fbb1d3824a 1073217536 1015409172   57808364  95% /mnt/archiv
`

Would it be if it goes to 100% or before?

I'm currently on latest which provided by fedory 31
stratisd-1.0.5-1.module_f31+6320+bf3c8975.x86_64
stratis-cli-1.0.4-1.module_f31+6320+bf3c8975.x86_64


As seen below, the debug log is expressing the uuid as a decimal byte-by-byte representation on multiple lines, rather than the standard hex single-line representation. This is inefficient to read or for any sort of uuid comparison, since a conversion to hex would be required. 

```
INFO stratisd: Dump timer expired, dumping state
DEBUG stratisd: Engine state: 
SimEngine {
    pools: {
        (
            "test_pool",
            SimpleRef(
                Uuid(
                    [
                        232,
                        190,
                        118,
                        78,
                        189,
                        175,
                        73,
                        180,
                        179,
                        149,
                        173,
                        18,
                        144,
                        210,
                        29,
                        255,
                    ],
                ),
            ),
        ): SimPool {
            block_devs: {
                Uuid(
                    [
                        185,
                        195,
                        66,
                        136,
                        180,
                        230,
                        65,
                        56,
                        139,
                        68,
                        190,
                        164,
                        27,
                        252,
                        190,
                        236,
                    ],
                ): SimDev {
                    devnode: "junk",
                    rdm: RefCell {
                        value: {Randomizer 0,
                    },
                    user_info: None,
                    hardware_info: None,
                    initialization_time: 1579119473,
                    dbus_path: MaybeDbusPath(
                        Some(
                            Path(
                                "/org/storage/stratis2/6",
                            ),
                        ),
                    ),
                },
            },
```
We need to extend our existing device discovery framework to identify encrypted devices.

If we think purely of the organization of the data structures returned by ```find_all()``` or an analogous function which is specific to encrypted devices:
* There must be an enumeration for encrypted block devices (not Stratis ones, because that will not be visible). We expect that ```ID_FS_TYPE``` will have value "luks2", I believe.
* Each device presented by the udev enumeration must be examined using libcryptsetup to take a peak at the correct token which must identify the Stratis pool and device UUID. This information is
enough to group the devices by pool UUID. As with the existing code, we ignore the possibility of duplicate Stratis device UUIDs.

An important consideration is that we must handle correctly a situation where some pools are encrypted and some pools are not.

What might conceivably make this trickier is that some devices might be already opened by some outside agencies and thus available as Stratis devices and some, belonging to the same pool, might be still unopened.
If we group it together we can keep track of its invariants better. metadata management for a single device has already been grouped into the metadata module. What we're talking about here is metadata discovery when given a group of devices or metadata update on all the devices belonging to a pool.
Ideally, this would be checked for on both the initial startup path and on the udev-event drive part. For the udev-event driven part, this should be checked both for presence in existing pools, i.e., when a new device shows up but its doppelganger has already been incorporated into the pool and also that it does not introduce duplicate devices into the list of devices for "incomplete" pools.

Note that #748 and this issue intersect, although the scenario actually described in #748 does not mention duplicate Stratis UUIDs, the problem would be the same.
We need a bunch of checks not just on individual blockdev members of a pool, but also on the consistency of the pool as a whole.

One of those checks is the check for duplicate block devices, i.e., two distinct block devices, i.e., able to be distinguished because they correspond to different device nodes, but having the same Stratis pool and device UUID. Another such is the verification that all block devices are openable by the same encryption key.

Where is it best to be doing this check? We don't really do either of them yet; this first is in an implementation that only partially handles the problem in ```StratEngine::block_evaluate```, and the second is still in development. The development places the check for the second in ```Backstore::setup```, see PR #1771. 

There is a pretty strong argument for placing the second in the same place. Even if that decision is made, however, ```find_all``` must be modified so that it returns data structures that at least allow this problem to be visible.

The argument is that these checks are about whole properties of the pool, and may at some time require access to the pool internals. For example, ```block_evaluate``` could be simplified to drop its checks for duplicate UUIDs; then if a new block device is found, it will be added to a group in the ```incomplete_pools``` list and setup will be attempted. At that point, setup will fail due to the duplicate pool UUIDs that it discovers.

Similarly, setup must fail if the block devices are discovered to be variously encrypted. If that is the problem, though, should we perhaps blacklist the pool involved, just as we would blacklist a pool discovered to have duplicate devices?

Supersedes #1705 

