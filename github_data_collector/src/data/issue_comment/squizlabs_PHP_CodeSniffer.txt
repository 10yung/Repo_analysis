I've been trying to work on a solution where a collection of repos all conform to the same PHPCS config, without having to make sure that they each update their `phpcs.xml` individually whenever there is a change. It would be grand if I could run

```
phpcs --config-url https://raw.githubusercontent.com/org/repo/master/phpcs.xml
```

In my CI. Would also be useful for people wanting to do two runs on the one repo, for example:

```
phpcs --config-path ./phpcs/php5compat.xml; phpcs --config-path ./phpcs/php7compat.xml
```

Would mean you could have two (or more) complex config files in the one location without trying to pass them all in as CLI args
Example:

```php
if (PHP_EOL === $a) {}
if (DateTime::ATOM === $a) {}
```

Both, imo, should be considered as yoda conditions and sniff `DisallowYodaConditionsSniff` should catch them.
I don't want/need the PHPCBF hint and "[x]" in reports. Is there a way to disable this?

Currently I have two options to solve this: 
1) Removing all PHPCBF parts with RegEx from the report.
2) Disable one line in one file of PHPCS.

Both works, but a regular option like a new CLI parameter would be the much better way.
Code:

```php
<?php
array_map(
    static fn (array $value): array => array_filter($value),
    []
);
```

The `T_FN` token is missing `parenthesis_opener` and `parenthesis_closer`.
As discussed in issue #2822, this changes the sniff to ignore `while()` constructs without body.

This - partially - undoes the unit tests added for issue #1932, but there are still some remaining covering that issue.

Fixes #2822
The following code
```
if (true) {}
( 1 + 2 ) === 3 ? $a = 1 : $a = 2;
```
return no error.

This because `ignoreTokens` contains `T_CLOSE_CURLY_BRACKET`.
It seems to be to avoid having duplicate error message with
```
$obj->{$var}( $foo,$bar );
```

But `T_CLOSE_CURLY_BRACKET` should not be ignored when it's the end of a function, a control structure or a class.
In the FunctionCallSignatureSniff there is the following code

```
        if ($requiredSpacesAfterOpen === 0 && $tokens[($openBracket + 1)]['code'] === T_WHITESPACE) {
            $error = 'Space after opening parenthesis of function call prohibited';
            ...
        } else if ($requiredSpacesAfterOpen > 0) {
            ...
            if ($spaceAfterOpen !== $requiredSpacesAfterOpen) {
                $error = 'Expected %s spaces after opening bracket; %s found';
                ...
            }
        }//end if
        ...
        if ($spaceBeforeClose !== $requiredSpacesBeforeClose) {
            $error = 'Expected %s spaces before closing bracket; %s found';
```

Depends on the `requiredSpacesAfterOpen` value, the message does not have the same format. And we talked sometimes about `opening parenthesis`, sometimes about `opening bracket`.

I think using the same wording could be a small improvement. Which one do you prefer ?
for example with laravel, I need to exclude some typehint in overwriting funcion but not want to exclude standard for the whole file. If it have feature please suggest me to use.

I got error on overwriting method inside of the class which is extended from framework.
In normal it can be solve by the way as below rule
```
<rule ref="Squiz.Commenting.FunctionComment.TypeHintMissing">
        <exclude-pattern>app/Exceptions/Handler.php</exclude-pattern>
</rule>
```
But
### Question: 

> I need to exclude some specific errors like below without excluding **Squiz.Commenting.FunctionComment** standard with the whole file.

error I got
```
**129 | ERROR | Type hint "Request" missing for $request
     |       | (Squiz.Commenting.FunctionComment.TypeHintMissing)**
```
**Here is function in child class extended parent class from laravel framework**
```
 /**
      * Render
      *
      * @param Request   $request Request.
      * @param Exception $e       Exception.
      * @return Response
      * @throws Exception|InvalidArgumentException Exception.
      */
     public function render($request, Exception $e): Response
     {
         $response = $this->_generateExceptionResponse($request, $e);
         $this->_sendToTg($e, $request, $response);
         if ($this->config['add_cors_headers']) {
             if (!class_exists(CorsService::class)) {
                 throw new InvalidArgumentException(
                     '400001',
                 );
             }
             /**
              * @var CorsService $cors
              */
             $cors = $this->container->make(CorsService::class);
             $cors->addActualRequestHeaders($response, $request);
         }
         return $response;
     }
```

**Parent Class from Laravel Framework**
```
 /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $e
     * @return \Symfony\Component\HttpFoundation\Response
     *
     * @throws \Exception
     */
    public function render($request, Exception $e)
    {
        if (method_exists($e, 'render') && $response = $e->render($request)) {
            return Router::toResponse($request, $response);
        } elseif ($e instanceof Responsable) {
            return $e->toResponse($request);
        }

        $e = $this->prepareException($e);

        if ($e instanceof HttpResponseException) {
            return $e->getResponse();
        } elseif ($e instanceof AuthenticationException) {
            return $this->unauthenticated($request, $e);
        } elseif ($e instanceof ValidationException) {
            return $this->convertValidationExceptionToResponse($e, $request);
        }

        return $request->expectsJson()
                    ? $this->prepareJsonResponse($request, $e)
                    : $this->prepareResponse($request, $e);
    }
```

A number of sniffs contain a `public $error` property to toggle whether the sniff should throw an `error` or a `warning`.

This property has been superseded by the ability to specify `<type>error</type>` for each sniff in a custom ruleset since PHPCS `1.4.1`.

I'd like to suggest removing these `public $error` properties from any sniffs which have them and to remove the code within the `process()` method of those sniffs handling the toggle.

A quick scan yields the following sniffs for which this applies:
* `Generic.ControlStructures.InlineControlStructure`
* `Generic.Formatting.MultipleStatementAlignment`
* `Generic.PHP.ForbiddenFunctions`
* `Generic.PHP.NoSilencedErrors`
* `Generic.Strings.UnnecessaryStringConcat`
* `Squiz.CSS.ForbiddenStyles` (sniff will be removed anyway in 4.0.0)
* `Squiz.PHP.DiscouragedFunctions`
* `Squiz.PHP.ForbiddenFunctions` (inherited)

The [Customizable Sniff Properties](https://github.com/squizlabs/PHP_CodeSniffer/wiki/Customisable-Sniff-Properties) wiki page would also need to be updated for this change.
I'd suggest adding a `Removed in` column (where relevant) to the properties table containing the version nr in which a property was removed.
A `while` control structure without body is perfectly valid PHP but gets flagged by the `Generic.ControlStructures.InlineControlStructures` sniff.

```
$i = 10;
while ($i > 0 && --$i);

// $i is now 0
```
See: https://3v4l.org/RXNqL

As far as I can see, the sniff is intended to find inline control structures *with* a body, but *without* braces and fix those. An inline control structure without a body should be outside the scope of this sniff.

I've got a fix ready for this, but found that a number of existing unit test would start failing (line 42, 43, 226, 228 and 230).

@gsherwood With that in mind, I'd like second opinion on how the sniff should handle `while` structures without body.

As an alternative to the fix I've got prepared, I could create a fix which would maintain the existing behaviour, but would give `while` structures without a body a different error code.

Opinions ?