I want to fetch history  of messages of chat sessions with two ore people.
I am using following way to fetch history of One user, 
```
client.searchHistory({
      with:  jid,
      rsm: {
        max: 100,
        before: true,
      },
    })
```

if I do something like this I cant get any response 

```
sessions.forEach(session => {
client.searchHistory({
      with:  session.jid,
      rsm: {
        max: 100,
        before: true,
      },
    })
})

```

I have tried like this as well

 ```
   sessions.forEach(session => {

      const msgs = this.client.searchHistory({
        with:  session.jid,
        rsm: {
          max: 100,
          before: true,
        },
      })    
      .then(result =>{
           ////
        })
        .catch(error => {
          ///
        });
    });

```

What shall be the best way ?
Hi,
we are using Stanza (and the previous Stanza.io) library and are very happy with it. Thanks for building this great library!

However we could not find a way to upgrade to version 12.x. We tried all of them, from 12.0.0 beta 0 all the way to 12.5.0. Same result. I'd like to mention that we are no XMPP experts. We are connecting a local XMPP Server which is basically used to just send notification events to clients (via pub sub). This server is not under our control. Just the client.

With Version 11.3.7 of stanza, everything is working fine and we are able to connect to the server and receive events. The session:started event is fired and we are able to send a presence event:
![Stanza_11 3 7](https://user-images.githubusercontent.com/36052147/72516854-a54d4600-3852-11ea-8360-04ecb7a58d5d.png)

However when using one of the 12.x versions, it seems that nothing happens after the SASL login. Compared to V11.3.7, the bind feature is an empty object and the bind never happens.
![Stanza_12 5 0](https://user-images.githubusercontent.com/36052147/72517050-fc531b00-3852-11ea-8be1-d2debbcb5d4c.png)

The source code used for capturing the events is in the screen shots. In this example we are using BOSH to connect. But the same thing applies for web sockets.

Sorry if this is just a configuration problem in our code.
Thanks for any help!


When i am trying to connect then getting below data in client

`"_events": {
    "presence": [
      null,
      null,
      null,
      null
    ],
    "session:started": [
      null,
      null
    ],
    "disconnected": [
      null,
      null,
      null
    ],
    "session:bound": [
      null,
      null
    ],
    "message": [
      null,
      null,
      null,
      null,
      null
    ],
    "pubsub:published": [
      null,
      null
    ]
  },`

so may i know it work with electron or not ?
Is there a way for stanza.io to use MAM_1 instead of it's default MAM_2?

_Originally posted by @CricketLaChica in https://github.com/legastero/stanza/issues/154#issuecomment-404310182_
it would be nice if there were better documentation.

eg, if i were to, say, want to implement Chat Markers using stanza.io, as a stanza.io and general xmpp noob, it would be insanely helpful to have an example implementation of that.

as it stands, i have no idea where to even start other than google/stack overflow, which has not been terribly fruitful.

any recommendations on where to start to understand how to use a xep via stanza.io or references to examples?

EDIT: after reading the source, i now think i understand how the chatMarkers setting works. perhaps a more useful sample would be how to implement a xep that isn't implicitly supported by a client setting, such as Message Archive Management. i see the exports in src/protocol/xep0313.ts, but how do i use them?
Any full documentation for the API reference? It is hard to figure out what param or object is needed for each API.
When JID.parse is invoked with recent versions of react-native (i.e. 0.61.4) on android (i.e. Android 9 Pie on Pixel 3 XL) `TypeError` is thrown as part of call to parse -> prepare -> (nodeprep | resourcepre | nameprep) due to the following call:

https://github.com/legastero/stanza/blob/59fd14a7a45d678920d585b64c96dced45e5943b/src/lib/stringprep/index.ts#L154

For some reason that call results into `TypeError`.

I have not checked it on empty project to make sure that it's not caused by some of the libs (and we use different setup with react-native than one mentioned in https://github.com/legastero/stanza/blob/master/docs/React_Native.md), but basically with the following code:

```typescript
String.prototype.normalize = ((normalize) => {
  return function (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string {
    try {
      return normalize.call(this, form);
    } catch (error) {
      console.error(`Failed to normalize string: ${ this }`, error.message, error.stack);
      return this;
    }
  }
})(String.prototype.normalize);
...
// once logging is fully functional, i.e. somewhere in react component render function
'test'.normalize('NFKC');
```

we get the following output in Logcat:

```
ReactNative: console.error: "Failed to normalize string: test", "Type error", "normalize@[native code]..."
```

Monkey-patching String.normalize like this (or potentially just returning original string instead of even trying to call original String.normalize) as a workaround works for our use cases, but probably this should be reported to react-native or otherwise handled differently in stringprep.

```typescript
String.prototype.normalize = ((normalize) => {
  return function (form: "NFC" | "NFD" | "NFKC" | "NFKD"): string {
    try { return normalize.call(this, form); } catch (error) { return this; }
  }
})(String.prototype.normalize);
```
Is it possible to make this module compatible with NativeScript?

Currently I get the following exception when trying to use Stanza on Android with NativeScript
```
System.err: An uncaught Exception occurred on "main" thread.

System.err: Unable to create application com.tns.NativeScriptApplication: com.tns.NativeScriptException: Error calling module function 
System.err: TypeError: Cannot read property 'slice' of undefined

System.err: File: (file:///node_modules\readable-stream\lib\_stream_writable.js:57:80)

System.err: 
System.err: StackTrace: 
System.err:     (file:///node_modules\readable-stream\lib\_stream_writable.js:57:80)
System.err:     at ../node_modules/readable-stream/lib/_stream_writable.js(file:///data/data/com.hue.frontend/files/app/vendor.js:33270:30)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ../node_modules/readable-stream/writable.js(file:///node_modules\readable-stream\writable.js:2:15)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ../node_modules/stream-browserify/index.js(file:///node_modules\stream-browserify\index.js:29:18)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ../node_modules/readable-stream/readable.js(file:///node_modules\readable-stream\readable.js:1:13)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at (file:///node_modules\stanza\module.js:1:0)
System.err:     at ../node_modules/stanza/module.js(file:///data/data/com.hue.frontend/files/app/vendor.js:52019:30)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ./services/xmpp.service.ts(file:///src\services\xmpp.service.ts:1:0)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ../node_modules/ts-loader/index.js?!../node_modules/vue-loader/lib/index.js?!../node_modules/string-replace-loader/index.js?!./components/Chat.vue?vue&type=script&lang=ts&(file:///data/data/com.hue.frontend/files/app/bundle.js:145:80)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ./components/Chat.vue?vue&type=script&lang=ts&(file:///src\components\Chat.vue?837c:1:0)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ./components/Chat.vue(file:///src\components\Chat.vue?ac55:1:0)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ../node_modules/ts-loader/index.js?!../node_modules/vue-loader/lib/index.js?!../node_modules/string-replace-loader/index.js?!./App.vue?vue&type=script&lang=ts&(file:///data/data/com.hue.frontend/files/app/bundle.js:111:77)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ./App.vue?vue&type=script&lang=ts&(file:///src\App.vue?3e62:1:0)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at ./App.vue(file:///src\App.vue?7227:1:0)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at (file:///src\main.native.ts:2:8)
System.err:     at ./main.native.ts(file:///data/data/com.hue.frontend/files/app/bundle.js:814:30)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at fn(file:///src\webpack\bootstrap:120:0)
System.err:     at 0(file:///data/data/com.hue.frontend/files/app/bundle.js:1044:18)
System.err:     at __webpack_require__(file:///src\webpack\bootstrap:753:0)
System.err:     at checkDeferredModules(file:///src\webpack\bootstrap:43:0)
System.err:     at webpackJsonpCallback(file:///src\webpack\bootstrap:30:0)
System.err:     at (file:///data/data/com.hue.frontend/files/app/bundle.js:2:57)
System.err:     at require(:1:266)
System.err: 
System.err: 
System.err: TypeError: Cannot read property 'slice' of undefined
```
While trying to upgrade to 12.4.2 from 11.3.2 I've noticed that now out-of-the box reaction to remote `session-terminate` action in `jingle` is to send explicit `session-terminate` back instead of just sending result and silently ending the session.
I'm not sure if it was an intentional change, so just wanted to mention it.
We were hitting some issues with more recent 11.x versions that we did not have time to dig into till now, had to stay on older version, so I'm not sure at what point this change in behavior got introduced.

It's coming to `ICESession.end(...)` with `silent === true` in reaction to remote `session-terminate` action

https://github.com/legastero/stanza/blob/68b9b5b80bb54a61f5ac064a2251fd7532759478/src/jingle/ICESession.ts#L66

but due to `pc.close()` on the line just above it ends up calling `end()` in `onIceStateChange()`

https://github.com/legastero/stanza/blob/68b9b5b80bb54a61f5ac064a2251fd7532759478/src/jingle/ICESession.ts#L407

as reaction to `pc.iceConnectionState` switching to `closed`

https://github.com/legastero/stanza/blob/68b9b5b80bb54a61f5ac064a2251fd7532759478/src/jingle/ICESession.ts#L45

It seems that this reverse `session-terminate` results into error with condition `service-unavailable` coming back from the client that originated first `session-terminate` because it already removed that session.

Also I've noticed that there is no tag v12.4.x in the repo.

P.S. Thanks a lot for the switch to typescript and plenty of other improvements that went into recent releases.
I'm using a stanza client with the keepalive enable with the next options:

```
client.enableKeepAlive({interval: 20, timeout: 10});
```

But when the connection is lost, it is not working as I would expect. What I'm seeing is:

```
  0 -> Keepalive sent and answer received
  5 -> Connection is lost
 20 -> Keepalive sent
 30 -> Timeout waiting for server answer
101 -> A new connection is established resuming previous XML stream
```

Where the first number is the number of seconds elapsed since the start.

I was expecting to see the session reestablished right after the timeout waiting for the server answer but I have to wait 61 additional seconds and that is a lost of time...