A while back I spent several days debugging a strange issue in my bot (~15k guilds, relies on reactions quite a lot), where all the worker threads would one by one get blocked until the entire bot would crash once they're all blocked. After... too much digging around, I figured out all the threads were getting blocked inside the `EnterAsync` function in `Discord.Net.Rest/Net/Queue/RequestQueueBucket.cs`.

I'm not sure exactly *what* was going wrong, but the while loop never exited even as the rate limit bucket hit its reset time, and it just sat and spun forever. I "solved" the issue by adding a return from the method if the current time is past the reset time, but I'm not sure if this is the *correct* solution, hence the issue rather than a PR. This gets easier to reproduce locally by setting [the min/max thread count to 1](https://docs.microsoft.com/en-us/dotnet/api/system.threading.threadpool.setminthreads?view=netframework-4.8#System_Threading_ThreadPool_SetMinThreads_System_Int32_System_Int32_), and firing off some reaction-based commands (they seem to make it occur faster, unsure if specifically those, though). At default ThreadPool settings, it only seems to happen at a relatively large scale (around the ~15k guilds previously mentioned).

This is the single-line patch I made on my personal fork: https://github.com/xSke/Discord.Net/commit/2aaa5e7ce50f056969e4b000386fc9bc336880a5

I hope someone more well-versed with D.NET internals can help figure out what's actually going on, and solve the issue in the main repository. If it helps, the server was running .NET Core 3.1 on Ubuntu 18.04 inside a Docker container.

# Summary

This is part of the cumulative documentation update featured in the nightly version of the documentation seen on https://docs.stillu.cc.

# What's new?

* Target .NET Standard 2.0 per d199d93ae42120d36c5d856f0664efb61b7fb1a7 for documentation generation
* Update copyright year and package version
* Update `CommandService.CommandExecuted` summary per e8cb03170476bd4b20a18cfff1f3784783649c80
* Fix various invalid crefs
* Fix example text rendering (used to be rendered as code blocks)
+ Add named argument guide by @Joe4evr 
are  there any reported issue for **GetTextChannelsAsync** or **GetChannelsAsync** methods for **Discord.Net.Rest v2.1.1**

because there is an issue when i try to get channels (with both methods), but this issue occured only specific discords which have [Announcement Channels](https://support.discordapp.com/hc/en-us/articles/360032008192-Announcement-Channels-) , in other discords which don't have that channel, can successfully retrive channels.

error detail
```
 ---> System.InvalidOperationException: This property has no value set.
   at Discord.Optional`1.get_Value()
   at Discord.Rest.RestTextChannel.Update(Channel model)
   at Discord.Rest.RestNewsChannel.Create(BaseDiscordClient discord, IGuild guild, Channel model)
   at System.Linq.Enumerable.SelectIListIterator`2.ToArray()
   at System.Collections.Immutable.ImmutableArray.CreateRange[T](IEnumerable`1 items)
   at Discord.Rest.GuildHelper.GetChannelsAsync(IGuild guild, BaseDiscordClient client, RequestOptions options)

```
When my bot wants to "join" a voice channel, Discord sends some temporary login details (session ID and token) to one of the voice servers in what's called a ‚Äúvoice server update‚Äù. How i can create AudioClient (or something, that help me send audio) from this data?

I cannot use the usual methods because I want to transfer this data to another instance of the program and keep accessToken in secret.
Users are copying these samples, because, well, we're providing them as examples. We shouldn't be using ProjectReference to set up the dependencies.
Adding reactions in 2.2.0 is slower than it was in 2.1.1
I tested it with the following code:
```cs
[Command("test")]
public async Task TestCommand(int amount)
{
    for (int i = 0; i < amount; i++)
    {
        var message = await ReplyAsync("test");
        var emotes = new[]
        {
            new Emoji("1Ô∏è‚É£"),
            new Emoji("2Ô∏è‚É£"),
            new Emoji("3Ô∏è‚É£"),
            new Emoji("4Ô∏è‚É£"),
            new Emoji("5Ô∏è‚É£"),
            new Emoji("6Ô∏è‚É£"),
            new Emoji("7Ô∏è‚É£"),
            new Emoji("8Ô∏è‚É£"),
            new Emoji("9Ô∏è‚É£"),
            new Emoji("üîü")
        };
        var stopWatch = new Stopwatch();
        stopWatch.Start();
        await message.AddReactionsAsync(emotes);
        stopWatch.Stop();
        await message.ModifyAsync(x => x.Content = $"{DiscordConfig.Version}: {stopWatch.ElapsedMilliseconds} ms");
        await Task.Delay(5000);
    }
}
```
The result is that adding reactions in 2.2.0 takes about twice as much.

![image](https://user-images.githubusercontent.com/5957412/70926299-27b4d100-202d-11ea-95a6-224a81cc626a.png)

A few months ago every time somebody in a channel with the bot connected to started or stopped to speak, the SpeakingUpdated event on the audioClient was triggered.
But now it only gets triggered the first time a user in a channel starts to speak.
Is there anything I need to do to reset the event trigger or is this a bug with the API?
If the user has a custom status set you can not get any other activity data (Spotify, rich, etc).

Not sure if this is a restriction of the Discord api only giving a single activity, I couldn't find any exact info.

Version: `Discord.Net v2.2.0-dev-20191130.5`

https://github.com/discord-net/Discord.Net/blob/a4846516fbce6cc3f80c04be43667f34048e23c4/src/Discord.Net.WebSocket/Extensions/EntityExtensions.cs#L10
### Hey guys,
i'm struggling since days with this exception.
I'm using Linux with Docker.
Do you have a special configuration of Linux, Docker or IDiscordClient, or what am i missing?

Stats (let me know if you need more):
```
OS: Ubuntu 18.04
Docker Version: 19.03.5
Discord.Net: 2.1.1
```

Dockerfile:
```
FROM mcr.microsoft.com/dotnet/core/aspnet:3.0.1-buster-slim AS base
WORKDIR /app

FROM mcr.microsoft.com/dotnet/core/sdk:3.0-buster AS build
WORKDIR /src
RUN dotnet restore "src/Apps/Bot/Bot.csproj"
COPY . .
WORKDIR "/src/src/Apps/Bot"
RUN dotnet build "Bot.csproj" -c Release -o /app/build

FROM build AS publish
RUN dotnet publish "Bot.csproj" -c Release -o /app/publish

FROM base AS final
WORKDIR /app
COPY --from=publish /app/publish .
ENTRYPOINT ["dotnet", "Bot.dll"]
```

DiscordSocketClient is initialized with default config
`var client = new DiscordSocketClient();`

### What's wrong with my environment?
### Thanks for your help