
It's not uncommon for large rust symbols to have a lot inlined into them. It would be nice to be able to see a histogram of how much each inlined symbol is contributing to large actual symbol.

The addr2line crate supports producing inline call stacks for a particular address.
## Group by

Currently `cargo bloat` support grouping by:

* crate
* full symbol

I think it would be helpful it `cargo bloat` could also group by:

* function without type parameters

I think that's important because I have lots of symbols like:

```
 0.1%   0.3%  9.2KiB         protobuf <protobuf::descriptor::FileOptions as protobuf::core::Message>::merge_from
 0.1%   0.2%  7.7KiB         protobuf <protobuf::descriptor::FileOptions as protobuf::core::Message>::write_to_with_cached_sizes
 0.1%   0.2%  6.9KiB         protobuf <protobuf::descriptor::FileDescriptorProto as protobuf::core::Message>::merge_from
```

It would be useful to sum all `protobuf::core::Message::merge_from` functions and find next largest generic bloated function.

## Filtering

Currenly `cargo bloat` supports filtering by crate.

I might be helpful to:

* filter by regular expression

```
# cargo bloat --filter-re 'FieldDescriptorProto`
```

Find all symbols containing substring `FieldDescriptorProto`, display top 20 of them, display size sum of all symbols, and total size as usual.
It appears like goblin has support for PE files, so could windows support be added?
cargo-bloat only returns the size of the text-section of the binary. It would be more useful to try to figure out the size of a library in the whole binary (or to make it more explicit that it only deals with the text section somehow). 

Also, would it be possible to include per-library how big the debug symbols for a particular library are?