New Edge browser is [officially out](https://support.microsoft.com/fr-fr/help/4501095/download-the-new-microsoft-edge-based-on-chromium) and it is based on Chromium now, offering the Chrome Devtools Protocol - same one as in Chrome or Chromium headless. 

Here are some ressources on this new version: 

* [Edge Devtools on Chromium](https://docs.microsoft.com/en-us/microsoft-edge/devtools-guide-chromium)
* [Edge Devtools Protocol same as Chrome Devtools protocol](https://docs.microsoft.com/en-us/microsoft-edge/devtools-protocol-chromium)
* [puppeteer can be used](https://docs.microsoft.com/en-us/microsoft-edge/puppeteer) 

I already tested a few examples and it works with `crrri` just by replacing `HEADLESS_CHROME` env var or changing the path to browser. Even `perform_with_chrome` works fine.

How do we want to support it ? 
* Just documenting this ? 
* new sets of functions that would be wrapper to default to Edge ? 


We are still in 0.0.x ... 

@RLesur , 

* should we aim 0.1 soon, or even 1.0.0 ? 
* Is CRAN a target ? 
This is now possible to document R6 method using roxygen.
https://roxygen2.r-lib.org/articles/rd.html#r6

We have already documented but it could be an improvement and easier to maintain. 
I hope the help page is organized clearer also.

Just putting this here as an idea for when we have time. 
This seems important to not conflict with other later loop while in `!async` mode like maybe in `wait` function. 

private event loop are used in `chromote` and also will be `pagedown::chrome_print`
https://github.com/rstudio/chromote

See at what point it work the same. 
See what could benefit to one or the other. 

Dig a bit into the synchronous / asynchronous part where later and promises have been modified for 
Is it possible to use the crrri package to generate a PDF of the tables generated using the gt package?
https://r-lib.github.io/fastmap/

https://twitter.com/winston_chang/status/1128713388224200705

* one for multiple functions provided and returning a list
* one for one function and returning a value
That would be passed to `promises::finally` to execute before returning the promise value

```r
promises::then(
    promise,
    onFulfilled = function(value) {
      state$pending <- FALSE
      state$fulfilled <- TRUE
      state$value <- value
    },
    onRejected = function(error) {
      state$pending <- FALSE
      state$fulfilled <- FALSE
      state$reason <- error
    }
  ) %>%
  promises::finally(onFinally = fun)
```

I have thought about that while working on `chrome_execute` thinking that chrome could be closed at the very end with 
```r
invisible(hold(results_available, timeout = total_timeout, onFinally = ~ chrome$close()))
```

Thoughts ? 
It shouldn't be difficult now to create classes inheriting from `CDPRemote` for Opera, Node.js, Safari and Edge.