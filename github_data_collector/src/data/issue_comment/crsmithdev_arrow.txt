`.humanize()` is getting kind of long and could do with refactoring. We'd also like to explore allowing other inputs such as `date` and `timedelta` objects.
## Pull Request Checklist

- [ ] üß™ Added **tests** for changed code.
- [x] üõ†Ô∏è All tests **pass** when run locally (run `tox` or `make test` to find out!).
- [ ] üìö Updated **documentation** for changed code.
- [x] ‚è© Code is **up-to-date** with the `master` branch.

## Description of Changes

Added type annotations to all non test codes.

Used python stub file format to annotate for compatibility with Python 2.

`mypy -p arrow -2 --strict` and `mypy -p arrow --strict` both returns `Success: no issues found in 10 source files` (mypy: 0.750)

Did not test with `pyre` and `pytype` because they both can not handle python 3.8 code.
Python 2 is reaching EOL in 2020 (https://pythonclock.org/).

Me and @jadchaar have chatted about this before but haven't come to a decision yet. We'd hoped that the DST upgrades would be done before the EOL so Python 2.7 users would at least have access to those improvements. However due to being busy we've not had time to work on that.

An important factor in this decision will be how long travis-ci supports 2.7.

dateutil discussion - https://github.com/dateutil/dateutil/issues/653

@hugovk do you have any thoughts or stats on Python 2.7 usage?
## Pull Request Checklist

Thank you for taking the time to improve Arrow! Before submitting your pull request, please check all *appropriate* boxes:

<!-- Check boxes by placing an x in the brackets: [x] -->
- [x] üß™ Added **tests** for changed code.
- [x] üõ†Ô∏è All tests **pass** when run locally (run `tox` or `make test` to find out!).
- [x] üìö Updated **documentation** for changed code.
- [x] ‚è© Code is **up-to-date** with the `master` branch.

If you have *any* questions about your code changes or any of the points above, please submit your questions along with the pull request and we will try our best to help!

## Description of Changes
Added kwarg 'exact' to span, span_range and interval to address issue #498.
When 'exact' is set to True, span returns a span of time starting exactly at the object it is called on,
span_range and interval's timespan start exactly the time specified by 'start' and the final timespan is truncated as not to extend beyond 'end'.

Closes: #498 

<!--
Replace with description of code changes.

If your PR has an associated issue, insert the issue number (e.g. #703) or directly link to the GitHub issue (e.g. https://github.com/crsmithdev/arrow/issues/703).

Closes: #498 
-->

I don't think any number would work in my implementation but I can increase it to any finite number you want (say 2 or 3 punctuation marks). I think one is fine; more than two is probably overkill.

Edit: Maybe allow 3 or 4 due to the use of "...", although I'm not sure how often people use those after dates. I could see people using a date like this: He said, "The date is 1/2/13." So maybe increasing the constraint is actually a good idea, and I can increase it infinitely following the date, just not preceding it.

_Originally posted by @andrewchouman in https://github.com/crsmithdev/arrow/pull/720_

===========================================================

I tend to agree, but the only thing that concerns me is that this worked pre 0.15.0 (I chose 0.13.0 for example):
```shell
venv ‚ùØ python3
Python 3.7.3 (v3.7.3:ef4ec6ed12, Mar 25 2019, 16:52:21)
[Clang 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
>>> import arrow
>>> arrow.__version__
'0.13.0'
>>> arrow.get("This date has too many punctuation marks following it 11.11.2011", "DD.MM.YYYY")
<Arrow [2011-11-11T00:00:00+00:00]>
>>> arrow.get("This date has too many punctuation marks following it (11.11.2011)", "DD.MM.YYYY")
<Arrow [2011-11-11T00:00:00+00:00]>
>>> arrow.get("This date has too many punctuation marks following it (11.11.2011).", "DD.MM.YYYY")
<Arrow [2011-11-11T00:00:00+00:00]>
```

This is definitely an improvement, but for full pre-0.15.0 behavior while still containing improvements, we probably need to add support for any number of punctuation marks. Curious, why would finite numbers work but not infinite (e.g. with the `+` quantifier in regex)?

_Originally posted by @jadchaar in https://github.com/crsmithdev/arrow/pull/720_
## Pull Request Checklist

Thank you for taking the time to improve Arrow! Before submitting your pull request, please check all *appropriate* boxes:

<!-- Check boxes by placing an x in the brackets: [x] -->
- [x] üß™ Added **tests** for changed code.
- [x] üõ†Ô∏è All tests **pass** when run locally (run `tox` or `make test` to find out!).
- [x] üìö Updated **documentation** for changed code.
- [x] ‚è© Code is **up-to-date** with the `master` branch.

If you have *any* questions about your code changes or any of the points above, please submit your questions along with the pull request and we will try our best to help!

## Description of Changes

<!--
Replace with description of code changes.

If your PR has an associated issue, insert the issue number (e.g. #703) or directly link to the GitHub issue (e.g. https://github.com/crsmithdev/arrow/issues/703).

For example, doing the following will automatically close issue #703 when this PR is merged:

Closes: #703
-->

Support for parsing integer timestamps with milliseconds and microseconds was added in https://github.com/crsmithdev/arrow/pull/684, but we need to add similar support to the formatter.
```
>>> t = arrow.get("2019-10-27T02:21:01+03:00")
>>> t
<Arrow [2019-10-27T02:21:01+03:00]>
>>> t.to("Israel")
<Arrow [2019-10-27T01:21:01+03:00]>
```

Note the same tz offset but different hours

Same bug, another appearence:
```
>>> ut = 1572132061
>>> ut == arrow.get(ut).to("Israel").timestamp
False
>>> ut - arrow.get(ut).to("Israel").timestamp
3600
```
Hi,

the ``shift()`` method is nice and seems to work with localized time with some kind of "natural" semantic. However it leads to some results (related to differences between time points).
 ```
>>> t0 = arrow.now().shift(weeks=3)    # The day before the next DST fall transition

>>> t0
<Arrow [2019-10-26T16:33:24.883042+02:00]>

>>> t1 = t0.shift(days=1)

>>> t1
<Arrow [2019-10-27T16:33:24.883042+01:00]>

>>> t1 - t0
datetime.timedelta(1)
```
So far, so good. A DST transition occurs between ``t0`` and ``t1`` (I'm living in Paris) and shifting by one day keeps the same time (16:33) with UTC offset adjusted (+02:00 to +01:00). The difference is one day, expressed as a ``timedelta``.

Now, convert the dates into UTC: 

```
>>> t2 = t0.to('UTC')

>>> t2
<Arrow [2019-10-26T14:33:24.883042+00:00]>

>>> t3 = t1.to('UTC')

>>> t3
<Arrow [2019-10-27T15:33:24.883042+00:00]>

>>> t2 == t0 and t3 == t1
True

>>> t1 - t2
datetime.timedelta(1, 3600)

>>> (t3 - t2) == (t1 - t0)
False

>>> t0 + (t3 - t2) == t1
False
```
The problem is that, while the time points are the same in local time or UTC (which is expected), their difference is no longer the same. And a few expected invariants are no longer true.

As a conclusion, 
1. Differences between time points shall always imply a conversion to UTC, **even if they are in the same time zone**. At least, we would have ``t1 - t0 == t3 - t2 == t3 - t0 == t1 - t2``. This should be clearly explained in the documentation.
2. The documentation should explain that a difference between 2 time points lead to a "naive" delta, even if ``arrow`` enforces time zone aware time points.
3. Time zone aware time delta could be introduced with a clean semantic (to be defined?)...

Best regards,

Antoine
I would like to use `arrow`'s `humanize()` for the bold part of this:

> Task has completed in **10 seconds**. With 1000 subtasks, that is **10 milliseconds** per subtask.

Currently, this seems hard for two reasons. First, from the start time that I stored, I need to compute the `delta` to `now` myself, divide the `delta` by 1000, subtract it from `now`, and then output that. That seems unncessarily complicated.

Second, everything below one second is "a moment" or something like that.

Or have I missed anything?