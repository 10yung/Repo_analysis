* Replace chashmap with dashmap
* Replace fnv with fxhash
* Update some outdated dependencies
* Fix some clippy warnings

Signed-off-by: koushiro <koushiro.cqx@gmail.com>

```
$ cargo tree --no-indent | sed 's/ (\*)//' | sort -u | wc -l
110 => 105
```
add --total option for generating the flame graph. see https://github.com/brendangregg/FlameGraph/pull/14 and https://github.com/jonhoo/inferno/issues/17.

The use case for this option is comparing multiple perf runs directly against one another. Specifying the # of samples to use for the total width means the individual rectangles in each graph can be directly compared to each other rather than being resized differently if one run finished more quickly than another.
Hi, I wanted to experiment with fuzzing in Rust, so I thought that I would start with this crate, since you have suggested that some fuzz tests would be nice (https://github.com/jonhoo/inferno/issues/63).

I simply added `cargo fuzz` and created a single fuzz target for each `Collapse` implemetation. Since the trait is so simple, this should be enough. Is that ok?

We should also define what do you actually consider a bug in the library and what do you consider a "bug" in the input. For example immediately after I started fuzzing `perf`, it crashed, because it fails on an assertion (https://github.com/jonhoo/inferno/blob/master/src/collapse/perf.rs#L173) if the input (file) is empty. For cmd usage this is probably not that much different from a controlled notification about a bad input with a `Result`, but for a library usage a crash like that on an invalid input is probably not something that you want. If I comment out the assert, the fuzzer doesn't seem to find any other crash in `perf`, so maybe the assert is superfluous?

I didn't run the fuzzers for long, they also found one other crash in `dtrace` (related to overflow in subtraction).

Cargo fuzz reguires nightly though, so the fuzz tests would have to be executed in CI using `nightly`.
```console
$ cargo tree --no-indent | sed 's/ (\*)//' | sort -u | wc -l
126
```

My guess is that some of these are unnecessary. Let's see if we can't do something to help improve build times.

This PR adds support for collapsing PHP Xdebug traces. It is 10-20x faster than the PHP version bundled in the original flamegraph repo.

Still a lot of code tidying to do, along with tests, but I wanted to get this PR started.
Closes #23
#99 identified that performance drops significantly when there are many frames in the output (see https://github.com/jonhoo/inferno/pull/99#issuecomment-473726169). We should figure out why that is, and fix it! Maybe it's time to flamegraph inferno ;)
I started to scatch out how a split out parse step as mentioned in #30 could look like.

The dtrace collapse is effectively generic so it's just 'collapse'.

Note 1:

For the start, I'll iron this out for DTrace and then port the result to perf.

Note 2:
At this point, this comes at a performance penalty for the
workflow of pure collapsing. However, the split has undergone
no performance work at this point and we are not measuring
the difference of full flamegraph creation that could now save
a whole set of encoding and decoding stack traces.

[This `if`](https://github.com/jonhoo/inferno/blob/76508029643aba8cadc9b306cdf115469df8bb88/src/collapse/dtrace.rs#L132L134) makes me think that empty lines _within_ a stack (i.e., after a non-empty line and before a count) should _not_ [be skipped](https://github.com/jonhoo/inferno/blob/76508029643aba8cadc9b306cdf115469df8bb88/src/collapse/dtrace.rs#L65L66).