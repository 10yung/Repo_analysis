Thanks for a great package. R really needs a good templating engine. 

If the names of `hash$people`  are unknown, there appears to be now way of accessing the data in it's children.

```
library(whisker)

hash <- list(
  people = list(
    a = list(
      first = "john",
      last = "johnsson"
    ),
    b = list(
      first = "peter",
      last = "petersson"
    ),
    c = list(
      first = "steve",
      last = "stevesson"
    )
  ),
  stuff = c(1:5)
)

template <- "
{{#people}}
<h1>Hello {{first}}</h1>
{{/people}}
"

result <- whisker::whisker.render(template = template, data = hash)
print(HTML(result))
``` 

[Link to stackoverflow](https://stackoverflow.com/questions/59144481/r-getting-whisker-to-loop-over-a-list-with-unknown-names?noredirect=1#comment104516770_59144481).

Hi.

I am just wondering if there are plans to continue the development of whisker? It is a handy package!

I would be happy to help push version 0.3.3 to CRAN, for instance.

Thank you.

Anders.
Hey,

could you consider pushing 0.3-3 to CRAN?

It would be so nice to have `strict = FALSE` available by default without any editing in [johnmyleswhite/ProjectTemplate](https://github.com/johnmyleswhite/ProjectTemplate). See [sql.reader.R#L336](https://github.com/johnmyleswhite/ProjectTemplate/blob/73652e62d4b6eceae16eda61b33764e5e671c5aa/R/sql.reader.R#L336).

Pretty please? ;)

Best regards,
crubb

While _whisker_ supports sections, it  does not appear to support sections with non-empty lists as described in https://mustache.github.io/mustache.5.html:

Template:

```
{{#repo}}
  <b>{{name}}</b>
{{/repo}}
```

Hash:

```
{
  "repo": [
    { "name": "resque" },
    { "name": "hub" },
    { "name": "rip" }
  ]
}
```

Output:

```
<b>resque</b>
<b>hub</b>
<b>rip</b>
```
## Using JSON

This closely follows the mustache documentation by using`jsonlite` to convert the hash to an R object. The R object is a list with a data frame of 3 rows.

``` r
library(jsonlite)
library(whisker)

tmpl <- 
  "{{#repo}}
  <b>{{name}}</b>
  {{/repo}}"

hash <- 
  '{
    "repo": [
      { "name": "resque" },
      { "name": "hub" },
      { "name": "rip" }
    ]
  }'

data <- fromJSON(hash)  # list of data.frame not list of list


whisker.render(tmpl,data)   
```

This does not conform to the specification is not correct as in collapses the `name` column rather than returning three results. According to the specification, I would expect this result:

``` r
c("<b>resque</b>","<b>hub</b>","<b>rip</b>")
```
## Using list-of-lists

Using a list of lists does not work either:

``` r
data <- list( repo = list( name="resque", name="hub", name="rip") )
whisker.render(tmpl,data) 
# [1] "<b>resque</b>"

```

I've been trying to get whisker working with LaTeX (which uses a lot of braces)

At first I thought it wouldn't be an issue since there's proper nesting:

``` r
> template <- 
+ 
+ 'Hello {{{{name}}}}
+ You have just won ${{value}}!
+ 
+ '
> text <- whisker.render(template, data)
> cat(text)
Hello 
You have just won $10000!
```

So I thought, fine, I'll just switch the delimeters:

``` r
> template <- 
+ '
+ {{=<% %>=}}
+ Hello {{<%name%>}}
+ You have just won ${{<%value%>}}!
+ 
+ '
> text <- whisker.render(template, data)
> cat(text)

Hello ~~~~~~~~~~~~~Chris{{
You have just won $}}10000~~~~~~~~~~~~~!
```

Which is a bit weird? Apologies if I'm just doing something incorrectly. 

There is an inconsistency in the whitespace generated by these two templates:

```
str1 <- 'header
{{#query}}
holla
{{/query}}
footer'
str2 <- 'header
{{#obj.query}}
holla
{{/obj.query}}
footer'
```

(the only difference is that the section variable is within a list `obj` in the second version).

This version gives what I would expect:

```
library(whisker)
whisker.render(str1, list(query=TRUE))  # "header\nholla\nfooter"
whisker.render(str1, list(query=FALSE)) # "header\nfooter"
```

While the second version generates extra newlines:

```
library(whisker)
whisker.render(str2, list(obj=list(query=TRUE)))  # "header\n\nholla\n\nfooter"
whisker.render(str2, list(obj=list(query=FALSE))) # "header\n\nfooter"
```

This does not affect the version from CRAN (0.3-2).

Whisker seems to fail when there is a period in the name of the variable.  Considering that R variables quite typically have periods in the name, this is problematic.

```
> whisker.render("{{user.name}}", list(user.name=342))
[1] ""
> whisker.render("{{username}}", list(username=342))
[1] "342"
```

If there is a way around this please let me know.  I imagine it's a quick fix.  Also if this is an intentional design choice that'd be good to know too.  Thanks!

I think it would be great to have the ability to turn on an option which checked to see if parameters existed, and printed a warning / died if missing, e.g. something like

```
 template <- "Hello {{place}}!"
 whisker.render(template, checkvars=TRUE)
```

produces a warning, e.g.

```
  Warning: variable "place" undefined in ....
```

Due to the possibility of nested tags, this is very hard to check externally, so something like this is hard to verify without parsing the structure of the mustache file and comparing to the structure of the R environment:

```
 {{#repo}}
    <b>{{name}}</b>
 {{/repo}}
```

This is an issue as minor typos can lead to missing variables and hard to detect errors in rendered templates.

See also discussion here: http://stackoverflow.com/questions/16595621/error-safe-templating-with-brew-whisker
