Reference: https://www.rabbitmq.com/lazy-queues.html
Where to add: `com.spingo.op_rabbit.Queue.ModeledArgs`
Possible values: 
- `"default"` (default)
- `"lazy"`

There is an awesome RabbiMQ plugin https://github.com/rabbitmq/rabbitmq-delayed-message-exchange. What do you this about addon that implements custom Exchange / Binding for this one?

I have implemented this one on top of op-rabbit in my company so it is pretty easy for me to contribute it.

It looks like explicit `nack`   can be used only synchronously and the only way to use it asynchronously  is by supplying  it as an implicit default RecoveryStrategy for `BoundConsumerDefinition`(i.e. the subscription).

So to consume some item asynchronously  we should roughly use something like  `ack(Future{ body_process_result})` . The doc says that if the future fails then the RecoveryStrategy  is applied(i.e the wanted nack is called). But this leads to https://github.com/SpinGo/op-rabbit/blob/ff9f8a25ef8fe94b348a7db9e88b5cd079b65035/core/src/main/scala/com/spingo/op_rabbit/impl/AsyncAckingRabbitConsumer.scala#L179 being hit which looks like thread blocking.

Are there any plans to improve this?


And a 2nd question: Is there any other approach to use nack asynchronously besides the approach above(also used in  /op-rabbit/core/src/test/scala/com/spingo/op_rabbit/consumerSpec.scala  test) ?


















Hi, would it be possible to release a new version? The last release was 3th of Feb 2018. Thanks
I have this project using `op-rabbit` and I'm trying to send a message directly to a queue but the queue doesn't exist yet. 

I'm using `rabbitControl ! Message.queue(message, queue = "the_queue")` to publish messages but I can't find a way to 1) declare the queue and have it created automatically and 2) use additional parameters such as `ttl`. 

Is it possible to achieve that or do I have to manually create the queue with such properties?
I am using the RecoveryStrategy.limitedRedeliver strategy. I want it to send messages to the DLX i declared which is attached to a queue where failed messages are picked off.
I keep getting this
 val exx: Exchange[Exchange.Direct.type] = Exchange.direct("op.dead")
    val onAbandon: RecoveryStrategy = nack(true)
    val redeliverDelay: FiniteDuration = .05.seconds
    implicit val recoveryStrategy =
      RecoveryStrategy.limitedRedeliver(
        retryCount = 1,
        exchange = exx,
        retryQueueName = retry => "tbd",
        onAbandon = onAbandon,
        redeliverDelay = redeliverDelay
      )
I have it set up as shown above. Is there something I am missing? I do not want a retry queue. I just want it to retry on the same queue, if it fails, I want it sent to the DLX
rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=406, reply-text=PRECONDITION_FAILED - inequivalent arg 'x-dead-letter-exchange' for queue 'tbd' in vhost '/': received none but current is the value 'op.dead' of type 'longstr', class-id=50, method-id=10)
If I use traditional newmotion DefaultConsumer(channel), handleDelivery ... I can read from a remote RabbitMQ, but when I try using op-rabbit, I just can't get it to work.
```
[INFO] [foo-akka.actor.default-dispatcher-7] [akka://foo/user/$a/connection] akka://foo/user/$a/connection connected to amqp://anonymous@{dd.weather.gc.ca:5671}:5671//
[INFO] [foo-op-rabbit.default-channel-dispatcher-6] [akka://foo/user/$a/connection/$a] akka://foo/user/$a/connection/$a connected
[INFO] [foo-akka.actor.default-dispatcher-4] [akka://foo/user/$a/connection/confirmed-publisher-channel] akka://foo/user/$a/connection/confirmed-publisher-channel connected
[INFO] [foo-akka.actor.default-dispatcher-4] [akka://foo/user/$a/connection/$b] akka://foo/user/$a/connection/$b connected
[ERROR] [foo-akka.actor.default-dispatcher-3] [akka://foo/user/$a/subscription-q_anonymous_gsk-1] Connection related error while trying to re-bind a consumer to q_anonymous_gsk. Waiting in anticipating of a new channel.
...
Caused by: com.rabbitmq.client.ShutdownSignalException: channel error; protocol method: #method<channel.close>(reply-code=403, reply-text=ACCESS_REFUSED - access to exchange 'xpublic' in vhost '/' refused for user 'anonymous', class-id=40, method-id=10)
```

These are the parameters that work fine with newmotion, but not with op-rabbit.
```
canada {
  hosts = ["dd.weather.gc.ca"]
  username = "anonymous"
  password = "anonymous"
  port = 5671
  exchange = "xpublic"
  queue = "q_anonymous_gsk"
  routingKey = "v02.post.observations.swob-ml.#"
  requestedHeartbeat = 300
  ssl = true
}
```

If someone can read from this RabbitMQ using op-rabbit, I'd be very interested to know how you did it, because I've been beating myself up for days trying to get the op-rabbit version to work.
Depends on
* akka-rabbitmq (https://github.com/NewMotion/akka-rabbitmq/issues/54) - released
* scoped-fixtures (https://github.com/SpinGo/scoped-fixtures/issues/2)
* "com.timcharper"   %% "acked-streams" needs a scala 2.13 release

I also have a temp fork of op-rabbit with published jars - https://github.com/pjfanning/op-rabbit
I have to read from a RabbitMQ in Canada and publish to an internal RabbitMQ here in the US. I have all the credentials, I'm just trying to figure out what the code would look like, since typical application.conf setups only have one RabbitMQ.  I have to connect to / read from the one in Canada using SSL.