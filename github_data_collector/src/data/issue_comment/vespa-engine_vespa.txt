also refactor from tlsSecretKeys -> several "endpoint certificate" classes
This makes the format from `/applicationmetrics/v1/values` equal to the future `/metrics/v2/values` api.
Add bindings to be able to send requests to /tester/v1 API on tester
containers (not fully implemented yet).

This makes the Cluster Controller use the
vds.datastored.bucket_space.buckets_total, dimension bucketSpace=default, to
determine whether a content node manages zero buckets, and if so, will allow
the node to go permanently down. This is used when a node is retiring, and it
is to be removed from the application.

The change is guarded by the use-bucket-space-metric, default true. If the new
metric doesn't work as expected, we can revert to using the current/old metric
by flipping the flag. The flag can be controlled per application.
@vekterli PR

@hakonhall please review and merge.
Open-source Vespa does not support the `access-control` element in services.xml. The feature is currently only available in the in-house Vespa distribution (Verizon Media).

Spin-off from #6516.
Reverts vespa-engine/vespa#10510

This in now done in [ThreadedRequestHandler](https://github.com/vespa-engine/vespa/blob/master/container-core/src/main/java/com/yahoo/container/jdisc/ThreadedRequestHandler.java) handled for all handlers, not only "/search" #11661  
Search definition snippet:
```
        field latLong type position {
            indexing: attribute
        }
        field allLatLong type array<position> {
            indexing: attribute
        }
```

Doing a document PUT like so works; subsequent GET shows `allLatLong` is there
```
{
    "fields": {
        "allLatLong":  ["N41o40'51;W72o56'19"]
        "latLong": "N41o40'51;W72o56'19"
    }
}
```

Doing a partial document UPDATE like so does not work:
```
{
    "fields": {
        "allLatLong":{
            "assign": ["N41o40'51;W72o56'19"]
        },
        "latLong": {
            "assign":"N41o40'51;W72o56'19"
        }
    },
    "create": true
}
```
The update to `allLatLong` does not take effect

Currently it's not possible to get any rank features from matching over map/array structures.  Consider the following example

```
struct person {
    field first_name type string {}
    field last_name type string {}
    field popularity type int {}
}
field identities type map<string, person> {
    indexing: summary
    struct-field key { indexing: attribute }
    struct-field value.last_name { indexing: attribute }
    struct-field value.popularity {Â indexing: attribute}
}
```

I think we should support the following rank features which is per document

*matches(name)*
```
matches(identities.key)
matches(identities.value.last_name) 
```

For matching/read attribute value features I think we should hook into the foreach feature so that the aggregator can be chosen by the user in case there are multiple matches (e.g when using prefix search over attribute) by introducing new dimensions, today we have 'terms', 'fields', 'attributes'. We could maybe support a map/array field as a dimension which allows iterating over the values. 

```
foreach(identities.key,key,attributeMatch(identities.key,key),">0",max)
foreach(identities.value.popularity,p,attribute(identities,p),">0",max)
```













