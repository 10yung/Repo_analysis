`raw_path` was missing in `TestClient` request's scope, whereas `uvicorn` has `raw_path` in request's scope. This problem makes it impossible to write tests, when parsing raw path is necessary.

I've created this app to prove this:
```
> cat example.py
from starlette.applications import Starlette
from starlette.responses import PlainTextResponse
from starlette.routing import Route
from starlette.testclient import TestClient


async def value(request):
    value = request.path_params['value']
    path = request.scope['path']
    raw_path = request.scope['raw_path']
    return PlainTextResponse(
        f'value: {value}\npath: {path}\nraw_path: {raw_path}\n'
    )


app = Starlette(debug=True, routes=[
    Route('/{value:path}', value),
])


def test_app():
    client = TestClient(app)
    response = client.get('/hel%2Flo')  # /hel/lo
    result = "value: hel/lo\npath: /hel/lo\nraw_path: /hel%2Flo\n"
    assert response.text == result
```

Launch the app with `uvicorn`:

```
> env/bin/uvicorn example:app
```

Test it with `curl`:

```
> curl localhost:8000/hel%2flo
value: hel/lo
path: /hel/lo
raw_path: b'/hel%2flo'
```

Test app with `TestClient`:

```
> env/bin/python -c "import example; example.test_app()"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
  File "/Users/justas/work/tilaajavastuu/starlette_test/example.py", line 28, in test_app
    response = client.get('/hel%2Flo')  # /hel/lo
<...>
  File "/Users/justas/work/tilaajavastuu/starlette_test/example.py", line 14, in value
    raw_path = request.scope['raw_path']
KeyError: 'raw_path'
```

The purpose of this pr is to add the RAW value of a path (route) to the scope.

Recently I tried to get this value and it didn't seem possible. Don't know if I did it the best way possible, but it seems so.

The main reason (at least for me) for having this value available is to aggregate values based on each endpoint in metric systems (Microsoft Application Insights, New Relic, Datadog...).

Please let me know if I need to change something or if this is not desirable!
Thanks!
The following exception is thrown when I use uvicorn to drive my starlette project. After control variates, I am sure this is caused by Gzip Middleware.

```
  File "C:\Users\AberS\Documents\Github\index.py\.venv\lib\site-packages\h11\_writers.py", line 102, in send_eom
    raise LocalProtocolError("Too little data for declared Content-Length") 
h11._util.LocalProtocolError: Too little data for declared Content-Length
```

Hello!

I have opened [this issue about back pressure](https://github.com/tiangolo/fastapi/issues/857) on FastAPI, and @dmontagu agreed that it could be more interesting to discuss it on Starlette instead, so here it is ðŸ™‚ 

I would like to know if thoughts were put in the design of Starlette to prevent, or help prevent system overloading due to lack of back pressure with async. Here is the direct link to the article https://lucumr.pocoo.org/2020/1/1/async-pressure/

I think @dmontagu gave a really good answer already, but maybe you (the authors, maintainers and users of Starlette) would like to share more about this! Thanks!

An alternate implementation of #785

- [x] Refactor lifespan to run as an async generator
- [x] Allow `lifespan_context=...` argument to `Starlette` and `Router`.
- [x] Add `app` argument to the lifespan context function.

End result API would be allowing the application to take a single `async` generator function, that can encapsulate any required startup/shutdown logic.

Taking the example in #785, you'd end up with this kind of pattern...

```python
async def lifespan(app):
    async with db.ConnectionPool() as app.state.pool:
        yield

app = Starlette(routes=..., middleware=..., lifespan=lifespan)
```
I'm trying to request a route (`graphql`) that is being handled by a [GraphQLApp](https://www.starlette.io/graphql/). It works well when I send requests from postman but it fails when going over preflight checks (requesting from my web browser): 

> Access to fetch at 'http://192.168.64.2:30540/graphql' from origin 'http://localhost:8080' has been blocked by CORS policy: Response to preflight request doesn't pass access control check: It does not have HTTP ok status.

I slightly modified the code from **starlette/middleware/cors.py** to have a little bit more information on what is happening. The response content generated by `preflight_response` is `Disallowed CORS method (POST), header (access-control-allow-origin), header (authorization), header (content-type)`.

<details>
  <summary>OPTIONS request details</summary>

```json
{
  "startedDateTime": "2020-01-14T17:33:42.735Z",
  "time": 5.767000009655021,
  "request": {
    "method": "OPTIONS",
    "url": "http://192.168.64.2:30540/graphql",
    "httpVersion": "HTTP/1.1",
    "headers": [
      {
        "name": "Host",
        "value": "192.168.64.2:30540"
      },
      {
        "name": "Connection",
        "value": "keep-alive"
      },
      {
        "name": "Pragma",
        "value": "no-cache"
      },
      {
        "name": "Cache-Control",
        "value": "no-cache"
      },
      {
        "name": "Access-Control-Request-Method",
        "value": "POST"
      },
      {
        "name": "Origin",
        "value": "http://foobar:8080"
      },
      {
        "name": "User-Agent",
        "value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.88 Safari/537.36"
      },
      {
        "name": "Access-Control-Request-Headers",
        "value": "access-control-allow-origin,authorization,content-type"
      },
      {
        "name": "Accept",
        "value": "*/*"
      },
      {
        "name": "Referer",
        "value": "http://foobar:8080/public/index.html"
      },
      {
        "name": "Accept-Encoding",
        "value": "gzip, deflate"
      },
      {
        "name": "Accept-Language",
        "value": "fr,en-US;q=0.9,en;q=0.8"
      }
    ],
    "queryString": [],
    "cookies": [],
    "headersSize": 541,
    "bodySize": 0
  },
  "response": {
    "status": 400,
    "statusText": "Bad Request",
    "httpVersion": "HTTP/1.1",
    "headers": [
      {
        "name": "date",
        "value": "Tue, 14 Jan 2020 17:33:41 GMT"
      },
      {
        "name": "server",
        "value": "uvicorn"
      },
      {
        "name": "access-control-allow-origin",
        "value": "*"
      },
      {
        "name": "access-control-allow-methods",
        "value": "GET"
      },
      {
        "name": "access-control-max-age",
        "value": "600"
      },
      {
        "name": "content-length",
        "value": "49"
      },
      {
        "name": "content-type",
        "value": "text/plain; charset=utf-8"
      }
    ],
    "cookies": [],
    "content": {
      "size": 49,
      "mimeType": "text/plain",
      "compression": 0,
      "text": "Disallowed CORS method, headers, headers, headers"
    },
    "redirectURL": "",
    "headersSize": 239,
    "bodySize": 49,
    "_transferSize": 288
  },
  "cache": {},
  "timings": {
    "blocked": 3.1320000051520767,
    "dns": -1,
    "ssl": -1,
    "connect": -1,
    "send": 0.07699999999999996,
    "wait": 1.541999995244667,
    "receive": 1.0160000092582777,
    "_blocked_queueing": 2.0570000051520765
  }
}
```

</details>

I also have a regular access point (`admin`) that I can request without any problem on both postman and browser. 

My code looks like so: 

```python
graphql_app = GraphQLApp(schema=schema, executor_class=AsyncioExecutor)

routes = [
    Route('/graphql', graphql_app),
    Route('/admin', admin_login_token, methods=["POST"]),
]

middleware = [
    Middleware(TrustedHostMiddleware, allowed_hosts=list(settings.WEB.ALLOWED_HOSTS)),
    Middleware(CORSMiddleware, allow_origins=['*']),
    Middleware(AuthenticationMiddleware, backend=BasicAuthBackend()),
]

app = Starlette(
    debug=True,
    routes=routes,
    middleware=middleware
)
```

I also can cheat a little by allowing all "problematic" headers/methods to my middleware (but I guess if these headers are not allowed by default that must be for a reason): 

```diff
    Middleware(
        CORSMiddleware, 
        allow_origins=['*'],
+       allow_methods=['POST', 'GET'],
+       allow_headers=['access-control-allow-origin', 'authorization', 'content-type'],
    )
```

That's also strange because CORS middleware never complain about these headers on `POST` requests, but only on `OPTIONS` requests. 

Did I do something wrong or is there a problem in starlette?
I'm mentioning this feature because I can imagine wanting it in the future, not because I actually need it right now.

One of the popular features of [Pyramid](https://pyramid.readthedocs.io/en/latest/index.html) is that it offers, in addition to regular url dispatch, the option of "traversal"-based routing. 

> A traversal uses the URL (Universal Resource Locator) to find a resource located in a resource tree, which is a set of nested dictionary-like objects. Traversal is done by using each segment of the path portion of the URL to navigate through the resource tree. You might think of this as looking up files and directories in a file system. Traversal walks down the path until it finds a published resource, analogous to a file system "directory" or "file". The resource found as the result of a traversal becomes the context of the request. Then, the view lookup subsystem is used to find some view code willing to "publish" this resource by generating a response.

For example, with 

```py
def get_root(request):
    return Resource({'a': Resource({'b': Resource({'c': Resource()})})})
```

Navigating to `/a/b/c` will return the innermost resource. Any object providing `__getitem__` can be used in the route lookup, as the nested `Resource`s are being used here.

The Pyramid docs on traversal are extensive:


- [Quick example](https://pyramid.readthedocs.io/en/latest/narr/hellotraversal.html)
- [Much ado about traversal](https://pyramid.readthedocs.io/en/latest/narr/muchadoabouttraversal.html)
- [Traversal details](https://pyramid.readthedocs.io/en/latest/narr/traversal.html)
- [Combining Traversal and URL Dispatch](https://pyramid.readthedocs.io/en/latest/narr/hybrid.html)
- [Resources](https://pyramid.readthedocs.io/en/latest/narr/resources.html)
I could not figure out why {% include "anotherTemplate.html" %" does not work in templates.


```
request = kwargs.get("request", args[idx])
```

should change to 

```
# first find request in kwargs
request = kwargs.get("request", None)
# second find request in args
if request is None and len(args) > 0:
     request = args[idx]
```

exception when use decorator requires

Traceback (most recent call last):
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/uvicorn/protocols/http/httptools_impl.py", line 385, in run_asgi
    result = await app(self.scope, self.receive, self.send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/uvicorn/middleware/proxy_headers.py", line 45, in __call__
    return await self.app(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/fastapi/applications.py", line 140, in __call__
    await super().__call__(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/applications.py", line 134, in __call__
    await self.error_middleware(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/errors.py", line 178, in __call__
    raise exc from None
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/errors.py", line 156, in __call__
    await self.app(scope, receive, _send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/authentication.py", line 48, in __call__
    await self.app(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py", line 25, in __call__
    response = await self.dispatch_func(request, self.call_next)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette_exporter/middleware.py", line 40, in dispatch
    raise e
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette_exporter/middleware.py", line 37, in dispatch
    response = await call_next(request)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py", line 45, in call_next
    task.result()
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/middleware/base.py", line 38, in coro
    await self.app(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/exceptions.py", line 73, in __call__
    raise exc from None
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/exceptions.py", line 62, in __call__
    await self.app(scope, receive, sender)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py", line 590, in __call__
    await route(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py", line 208, in __call__
    await self.app(scope, receive, send)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/routing.py", line 41, in app
    response = await func(request)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/fastapi/routing.py", line 127, in app
    raw_response = await dependant.call(**values)
  File "/data/server/pyenv/py3.7.4/lib/python3.7/site-packages/starlette/authentication.py", line 62, in async_wrapper
    request = kwargs.get("request", args[idx])
IndexError: tuple index out of range
[PEP-492 asynchronous iterators](https://www.python.org/dev/peps/pep-0492/#asynchronous-iterators-and-async-for) have the following signature:

```python
class AsyncIterable:
    def __aiter__(self):
        return self

    async def __anext__(self):
        data = await self.fetch_data()
        if data:
            return data
        else:
            raise StopAsyncIteration
```

For example, the Azure storage python library returns such an asynchronous iterator for blob downloading. I can't pass it to Starlette though; it will execute in the threadpool and crash there:

```
ERROR:    Exception in ASGI application
Traceback (most recent call last):
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/uvicorn/protocols/http/httptools_impl.py", line 385, in run_asgi
    result = await app(self.scope, self.receive, self.send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/uvicorn/middleware/proxy_headers.py", line 45, in __call__
    return await self.app(scope, receive, send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/fastapi/applications.py", line 142, in __call__
    await super().__call__(scope, receive, send)  # pragma: no cover
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/applications.py", line 134, in __call__
    await self.error_middleware(scope, receive, send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/middleware/errors.py", line 178, in __call__
    raise exc from None
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/middleware/errors.py", line 156, in __call__
    await self.app(scope, receive, _send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/exceptions.py", line 73, in __call__
    raise exc from None
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/exceptions.py", line 62, in __call__
    await self.app(scope, receive, sender)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/routing.py", line 590, in __call__
    await route(scope, receive, send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/routing.py", line 208, in __call__
    await self.app(scope, receive, send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/routing.py", line 44, in app
    await response(scope, receive, send)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/responses.py", line 196, in __call__
    async for chunk in self.body_iterator:
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/concurrency.py", line 45, in iterate_in_threadpool
    yield await run_in_threadpool(_next, iterator)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/concurrency.py", line 25, in run_in_threadpool
    return await loop.run_in_executor(None, func, *args)
  File "/home/korijn/.pyenv/versions/3.6.8/lib/python3.6/concurrent/futures/thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/contextvars/__init__.py", line 38, in run
    return callable(*args, **kwargs)
  File "/home/korijn/.local/share/virtualenvs/aiotest--vQHOsY--/home/korijn/.pyenv/shims/python/lib/python3.6/site-packages/starlette/concurrency.py", line 37, in _next
    return next(iterator)
TypeError: '_AsyncChunkIterator' object is not an iterator
```

I have to wrap the iterator in an asynchronous generator function for it to work:

```
    async def chunks_generator():
        async for i in blob.chunks():
            yield i

    return StreamingResponse(chunks_generator())
```