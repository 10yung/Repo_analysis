`getRuntimeDir()` returns the value of `XDG_RUNTIME_DIR` when available. When using `sudo -E` (something that can happen easily on a typical web host, as people running scripts manually need to sudo to the same user that the web server uses, to avoid file permission headaches, and the environment might be required for token checks or language settings or similar), `XDG_RUNTIME_DIR` will point to the temp directory of the original user, so the user which the script is running at won't be able to write the tempdir.

E.g. on a server with `someuser` and `webuser` users, where `someuser` has user ID 1 and `webuser` has user ID 2, when `someuser` executes `sudo -E -u webuser foo.php` and `foo.php` calls `Xdg::getRuntimeDir()`, in the environment of `someuser` `XDG_RUNTIME_DIR` will be `/run/user/1`, and sudo inherits the environment, so `Xdg::getRuntimeDir()` will return that directory, but `/run/user/1` is owned by `someuser` with permission 700, so `foo.php` will fail to write it.

Some kind of sanity check of the current user vs. the user ID in `XDG_RUNTIME_DIR` would be nice.
I'm trying to use [psysh](https://github.com/bobthecow/psysh) which uses `0.1` of this library and each time I run it I get:

    PHP Warning:  rmdir(/var/folders/.../T/php-xdg-runtime-dir-fallback-mschinkel): Directory not empty in phar:///usr/local/bin/psysh/build-vendor/dnoegel/php-xdg-base-dir/src/Xdg.php on line 110
    PHP Stack trace:
    PHP   1. {main}() /usr/local/bin/psysh:0
    PHP   2. Psy\{closure}() /usr/local/bin/psysh:141
    PHP   3. Psy\Shell->run() phar:///usr/local/bin/psysh/src/Psy/functions.php:325
    PHP   4. Psy\Shell->initializeTabCompletion() phar:///usr/local/bin/psysh/src/Psy/Shell.php:247
    PHP   5. Psy\Shell->addTabCompletionMatchers() phar:///usr/local/bin/psysh/src/Psy/Shell.php:990
    PHP   6. Psy\Shell->getTabCompletionMatchers() phar:///usr/local/bin/psysh/src/Psy/Shell.php:224
    PHP   7. Psy\Shell->all() phar:///usr/local/bin/psysh/src/Psy/Shell.php:200
    PHP   8. Psy\Shell->init() phar:///usr/local/bin/psysh/build-vendor/symfony/console/Application.php:641
    PHP   9. Psy\Shell->getDefaultCommands() phar:///usr/local/bin/psysh/build-vendor/symfony/console/Application.php:1163
    PHP  10. Psy\Configuration->getRuntimeDir() phar:///usr/local/bin/psysh/src/Psy/Shell.php:185
    PHP  11. Psy\ConfigPaths::getRuntimeDir() phar:///usr/local/bin/psysh/src/Psy/Configuration.php:348
    PHP  12. XdgBaseDir\Xdg->getRuntimeDir() phar:///usr/local/bin/psysh/src/Psy/ConfigPaths.php:153
    PHP  13. rmdir() phar:///usr/local/bin/psysh/build-vendor/dnoegel/php-xdg-base-dir/src/Xdg.php:110

Looking at your code on line `110` it seems you are doing an `rmdir()` on a directory containing files.  

**Maybe you could replace with [this](https://stackoverflow.com/a/1653776/102699) from StackOverflow?**
I don't like how an "invalid" runtime directory is `unliked` at the moment (https://github.com/dnoegel/php-xdg-base-dir/blob/master/src/Xdg.php#L105). 

Instead I would like to throw an exception like `throw new RuntimeException('Unsecure Runtime dir')`.
See also this example: https://github.com/o11c/rust-xdg/blob/master/src/xdg.rs#L52

`public function getRuntimeDir($strict=true)` could become `public function getRuntimeDir($create = true, $forceSecure = true)`.

Feedback welcome.

Another alternative to PR #6 and #7 including the idea of @bobthecow. 
