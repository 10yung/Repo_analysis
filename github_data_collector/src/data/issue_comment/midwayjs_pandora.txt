version 1.10.6

is it fixed to be 5s or configurable?

O(∩_∩)O谢谢
@czy88840616 @guangwong 
Would be great to have them international.
用pandora启动一个web app，是否会对app 的性能造成影响？具体影响有大概的数字吗，比如是５％，７％？

想问问nodeMetrics是用来做什么场景的？跟alinode的内存溢出排查场景一样吗？
- [x] refactor: remove dead code
- [x] refactor: fix Ineffective parameter type
我拓展了 HttpServerPatcher 和 HttpClientPatcher，让这两个 Hook 都能记录 query、data 和 response。
具体实现可见：
https://github.com/kaolalicai/klg-tracer/blob/master/src/patch/HttpServer.ts
https://github.com/kaolalicai/klg-tracer/blob/master/src/patch/shimmers/http-client/Shimmer.ts

拓展的过程有些小麻烦，主要是上述两个组件的代码结构会有不方便拓展的地方，导致我不能简单复写某些方法，表现有：
1 HttpServerPatcher.shimmer 函数过长，如果要替换其中某段逻辑不方便
2 KlgHttpClientShimmer.wrapRequest 是以成员属性的方式定义的，overwrite 后 super.wrapRequest 会有问题。

除了拓展的问题，我在整理代码的时候发现像
```js
shimmer.wrap(req, 'emit', function wrapRequestEmit (emit) {
        const bindRequestEmit = traceManager.bind(emit)
        return function wrappedRequestEmit (this: IncomingMessage, event) {
          if (event === 'data') {
            // do some thing
          }
          return bindRequestEmit.apply(this, arguments)
        }
      })
```
这类的钩子其实可以直接用事件监听来实现， 如下，而且没问题，测试通过
```js
req.once('data', (data) => {
       // do some thing
})
```

针对上述问题，我按照我的想法把 HttpServer 和 KlgHttpClientShimmer 整理了一遍，勉强做个抽象，发了个 PR，供参考。

HttpServer 大致代码结构：
```js
shimmer
    const {tracer, span} = self.initTracerAndSpan(req, res);
    self.wrapRequest(req, res, tracer, span){
      self.recordQuery(req, res, tracer, span);
      self.recordBodyData(req, res, tracer, span);
      // TODO recordResponse
    }
    self.handleResponse(req, res, tracer, span);   // finish tracer and span
```

KlgHttpClientShimmer 大致代码结构：
```js
httpRequestWrapper
      const {tracer, span} = self.initTracerAndSpan(req, res);
      _request.once('error', (res) => {
        self.handleError(span, res);  // set span error
      });
      
      _request.once('response', (res) => {
        self.wrapRequest(_request, res, tracer, span){
          // TODO this.recordQuery(req, tracer, span);
          // TODO this.recordData(req, tracer, span);
          this.recordResponseWrap(req, res, tracer, span);
        }
        self.handleResponse(_request, res, tracer, span); // finish span
      });
```

+ 添加 start/end local 调用节点功能，对外暴露使用。