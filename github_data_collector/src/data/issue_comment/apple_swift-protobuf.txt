Hi!
Could you add support for swift 5.1?

By the way, how could I disable all checks for swift 4.2 in generated proto files?
I would like to have only latest swift version in generated proto files.

Thanks!
* macOS 10.15.2

* Xcode 11.3 Build version 11C29

* Swift 4.2

* SwiftProtobuf 1.7.0

Camel casing the field names and enum cases when their names start with an underscore followed by a number results invalid identifiers for Swift language.

**Sample proto snippet**
```
syntax = "proto2";
option swift_prefix = "_2world";
message _2Test__Class_chekc_Any_cHANge {
    optional int32 _5while = 1;
    enum _44Enum__Type {
        _2my_type1 = 0;
        _44Enum__Type_2my_type2 = 1;
        _2my_type3 = 2;
    }
    optional _44Enum__Type __2allowed_enums = 2;
}
```
**Snippet from generated code**
```
var 5While: Int32 {                    // Invalid identifier (starts with a digit)
    get {return _5While ?? 0}
    set {_5While = newValue}
}
enum _44Enum__Type: SwiftProtobuf.Enum {
    typealias RawValue = Int
    case 2MyType1 // = 0               // Invalid identifier (starts with a digit)
    case 44Enum_Type2MyType2 // = 1    // Invalid identifier (starts with a digit)
    case 2MyType3 // = 2               // Invalid identifier (starts with a digit)
}
```
I went through the code and found that it can be fixed by updating either  the `splitIdentifier` method or the `sanitize` family of methods. There is also a method to check identifier validity (#138).

Preventing digit from inserting first in the `splitIdentifier` method or appending a leading underscore if a string starts with a digit in `sanitize` method can fix this issue. I would submit a PR for review with test cases if the more appropriate method of the above two for updating is known.

https://github.com/apple/swift-protobuf/blob/32d6b4d7830b124231d9debf3e30a4318370a4cf/Sources/SwiftProtobufPluginLibrary/NamingUtils.swift#L221

https://github.com/apple/swift-protobuf/blob/32d6b4d7830b124231d9debf3e30a4318370a4cf/Sources/SwiftProtobufPluginLibrary/NamingUtils.swift#L387

https://github.com/apple/swift-protobuf/blob/32d6b4d7830b124231d9debf3e30a4318370a4cf/Sources/SwiftProtobufPluginLibrary/SwiftLanguage.swift#L109


I'm using the buffers in an iOS app, and would like to be able to troubleshoot parsing errors. Is there a mechanism to dump info about them?

Thanks!
I'd like to use more strict types that are backed by strings for representing fields, like the `URL` type. 

I realize that if it's not in the protobuf spec it's not supported... but I'm curious if you guys have some solutions / design patterns for this. My thinking is a type for serialization that then gets converted to another type that contains the special fields, but that seems like a lot of extra work mapping the fields from one object to another...  

Any other suggestions for handling this sort of thing?  Thanks!

Currently the `BinaryEncoder` pulls over string data a byte at a time, but it looks like we could fastpath with `withContiguousStorageIfAvailable` and fall back to the loop only if need be.
https://github.com/apple/swift-protobuf/issues/861

See discussion in the ticket. This PR adds a new method in Visitor Protocol. However this PR did not address backward compatibility issue 

We opened this PR a while ago, we currently use this PR in our codebase.

```
  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    let shouldIncludeDefault = visitor.shouldIncludeDefault()
    if !self.text.isEmpty || shouldIncludeDefault {
      try visitor.visitSingularStringField(value: self.text, fieldNumber: 1)
    }
    if self.action != .searchCancelEventActionInvalid || shouldIncludeDefault {
      try visitor.visitSingularEnumField(value: self.action, fieldNumber: 2)
    }
    if self.resultCount != 0  || shouldIncludeDefault {
      try visitor.visitSingularUInt32Field(value: self.resultCount, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
```
I think `ignoreUnknownFields` in `JSONDecodingOptions` default value should be true. when it's false, it would conflict with backward compatibility of proto.
The issue was already described in the past but looks like no PR was uploaded: [https://github.com/apple/swift-protobuf/issues/481#issuecomment-295800326](url)

I know it is unwanted behaviour but in real life scenarios backend teams sometimes coming to the necessity of extending existing enums by adding new cases. This leads to backward incompatibility in the mobile clients using swift-protobuf generated models and when backend encodes enum cases with case names. 

To avoid the issue, an option added to pass unknown enum cases and use first enum case as default case following the best practice in proto programming. Backend teams usually define first enum case as "unknown" or "initial" or any other with the intention that it will be used as a default case, or to indicate the problem.
Messages have `protoMessageName` field. Similar API should be generated for enums, for example `public var protoEnumName`. Of course, this should be part of the `SwiftProtobf.Enum` protocol.
Developing using iOS12, Swift 5, proto3 . I am about to add an extension which can support to output fields with their default values.  I just want to check whether it is already implemented. 

Based on proto doc, it looks like 
```
JSON options
A proto3 JSON implementation may provide the following options:

Emit fields with default values: Fields with default values are omitted by default in proto3 JSON output. An implementation may provide an option to override this behavior and output fields with their default values.
```

I wonder does swift version has option to output fileds with their default values. I found python version has it `MessageToJson(message, including_default_value_fields=False)`

https://developers.google.com/protocol-buffers/docs/reference/python/google.protobuf.json_format-module
