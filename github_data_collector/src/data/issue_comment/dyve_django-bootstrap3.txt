The `__version__` attribute has been removed in 12.0.0 from the bootstrap3 module.
This is backwards incompatible and results in errors for apps using the version info.
Tested with 12.0.0 on Linux:
```
Python 3.7.3 (default, Apr  3 2019, 05:39:12)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import bootstrap3
>>> bootstrap3.__version__
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
AttributeError: module 'bootstrap3' has no attribute '__version__'
```

11.1.0 works fine:
```
Python 3.7.3 (default, Apr  3 2019, 05:39:12)
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
>>> import bootstrap3
>>> bootstrap3.__version__
'11.1.0'
```
If I accidentally remove a field from a form, but still try to render it using `{% bootstrap_field`, I get an error message which doesn't really help me to track down my error:

`bootstrap3.exceptions.BootstrapError: Parameter "field" should contain a valid Django BoundField.`

It would be nice if the error message could be more informative.
When using the `bootstrap_form` template tag, the generated label element does not get its title attribute populated from the `help_text` attribute of the corresponding model field. Whereas, it does work as expected for the `bootstrap_label` template tag.

This seems to be because the call to `render_label` inside the `add_label` method of the `FieldRenderer` class in `renderers.py` does not include a `label_title` parameter. Using the working call to `render_label` as guidance, filling out the parameter like so seems to do the trick:

`label_title=escape(strip_tags(self.field_help))`
In a project I am working on, we generally use a font-awesome icon instead of a mere `x` as the close button for messages. I can also imagine that in some cases you would be better to use a translated string.
Therefore I propose to make it possible to change the content of the close button, and do it in a way that supports a translatable string or html, such that the following two scenarios are supported;
```
BOOTSTRAP3 = {
    'message_close_button': '<i class="fa fa-times-circle"></i>'
}
```
and
```
BOOTSTRAP3 = {
    'message_close_button': _('close')
}
```
Since settings is cached, it should be reloaded during tests when this signal is sent:
https://docs.djangoproject.com/en/1.10/ref/signals/#django.test.signals.setting_changed


bumped into this one while writing a test case, to check the behaviour of placeholders