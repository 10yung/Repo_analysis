
### Description
I used to share some components between react and react native in a few apps. I used [Git recursive merge strategies](https://git-scm.com/book/en/v2/Customizing-Git-Git-Attributes#_merge_strategies) to achieve this. first I write a react component that I use. then in other branch, I make it to work in react native too. later, If I make any changes to one of the branch, I'll make a merge to reflect those changes back to other branches too. I need the same effect in Bit to share component in way that two components get updated by new code but be different by usage. 
is there anything similar in Bit? 
example: 
```

$ git checkout -b react
$ echo 'export default props => <span styles={somestyles}>{props.children}</span>' > StyledText.js
$ git checkout -b react-native
$ echo 'export default props => <Text styles={somestyles}>{props.children}</Text>' > StyledText.js

// later I want some new styles to be applied

$ git checkout  react
$ echo 'export default props => <span styles={someNewstyles}>{props.children}</span>' > StyledText.js
$ git merge react-native
$ git checkout react-native
cat StyledText.js
export default props => <Text styles={someNewstyles}>{props.children}</Text>
```



The version in Bit (bit.dev) for some components is one (0.0.1) increment behind the main version number in the project.

We have recently updated a lot of components in our master project and this has bumped the version number. When you run bit status in our main project you get this:

`
nothing to tag or export (use "bit add <file...>" to track files or directories as components)
`

Now when I go into our new project and update the npm packages to the latest and the run npm install we get issues like this:


```
alexanderkaran@AlexandersMBP2 cc_home_web % npm install
npm WARN deprecated left-pad@1.3.0: use String.prototype.padStart()
npm WARN deprecated core-js@1.2.7: core-js@<2.6.8 is no longer maintained. Please, upgrade to core-js@3 or at least to actual version of core-js@2.
npm ERR! code ETARGET
npm ERR! notarget No matching version found for @bit/climateclever.ui-components.cc-circle-progress-bar@0.0.3.
npm ERR! notarget In most cases you or one of your dependencies are requesting
npm ERR! notarget a package version that doesn't exist.
npm ERR! notarget 
npm ERR! notarget It was specified as a dependency of '@bit/climateclever.action-overview-page-components.action-costs'
npm ERR! notarget 

npm ERR! A complete log of this run can be found in:
npm ERR!     /Users/alexanderkaran/.npm/_logs/2020-01-17T03_39_21_673Z-debug.log
alexanderkaran@AlexandersMBP2 cc_home_web % 
```


Doesn't make sense? I go to cc-circle-progress-bar in bit.dev and see the version number is 0.0.2 but when I go back to the main project and check the bit file it reads this:


```
"climateclever.ui-components/cc-circle-progress-bar@0.0.3": {
        "files": [
            {
                "relativePath": "src/components/CCCircleProgressBar/CCCircleProgressBar.css",
                "test": false,
                "name": "CCCircleProgressBar.css"
            },
            {
                "relativePath": "src/components/CCCircleProgressBar/index.js",
                "test": false,
                "name": "index.js"
            }
        ],
        "mainFile": "src/components/CCCircleProgressBar/index.js",
        "trackDir": "src/components/CCCircleProgressBar",
        "origin": "AUTHORED",
        "exported": true
    },
```


No idea how to fix this one and development has stopped on the other two project as I can not run npm install. Is it possible to bump all version numbers in the main project or force all components to export again?
```
❯ mkdir /tmp/bittest
❯ cd /tmp/bittest
❯ bit init 
❯ mkdir comp
❯ echo "" > comp/index.js
❯ echo "" > comp/file.js
❯ echo "" > comp/file.spec.js

❯ bit add comp
❯ bit show comp     
╔══════════════════╤════════════════════════════════════════════════════╗
║ Id               │ comp                                               ║
╟──────────────────┼────────────────────────────────────────────────────╢
║ Language         │ javascript                                         ║
╟──────────────────┼────────────────────────────────────────────────────╢
║ Main File        │ comp/index.js                                      ║
╟──────────────────┼────────────────────────────────────────────────────╢
║ Dependencies     │                                                    ║
╟──────────────────┼────────────────────────────────────────────────────╢
║ Dev Dependencies │                                                    ║
╟──────────────────┼────────────────────────────────────────────────────╢
║ Files            │ comp/file.js                                       ║
║                  │ comp/index.js                                      ║
║                  │ comp/file.spec.js                                       ║
╚══════════════════╧════════════════════════════════════════════════════╝
```

I expect `file.spec.js` (and `*.test.js`) to be a test file, much like index.js is deteceted to be the main file.

### reference
bit 14.7.2
<!--

Before submitting a new issue, please search past issues (open or closed).  

-->

### Description

I am using bit import bit.envs/compilers/react --compiler using npm but this will not install in my project.


### Specifications

- Bit version: 14.7.2
- Node version:10.15.3
- npm / yarn version:6.4.1
- Platform:
- Bit compiler (include version):
- Bit tester (include version):

### Context and additional information

Following the tutorial i cannot install the react compiler using the commands stated for npm

bit import bit.envs/compilers/react --compiler

Bit build will not work either

Both commands result in :
Command failed: git config --list
'git' is not recognized as an internal or external command,
operable program or batch file.

### Description

I've tagged a few components, one has a dependency on a private component from a different account than the one I'm exporting to. bit shows an error but doesn't specify which of the components is the problematic one.

```
error: unable to export components to bit.frosting because they have dependencies on components in bitsrc.billing.
bit does not allow setting dependencies between components in private collections managed by different owners.

```


### Describe the solution you'd like

in addition to that error, I would like the id of the problematic component so I dont have to go through all my other components to check

### Describe alternatives you've considered

I looked at the source code and found the issue but it would be really nice if bit could just point you in the right direction

### Description

I added component A, with all its files and then added another component (component B) that was actually included in component A, bit gives an error:

```
warning: files already used by component: [component A]
could not track component [component B]: no files to track
```

### Describe the solution you'd like

bit should make B into a component and replace the relevant files in A with a dependency on component B.

### Describe alternatives you've considered

what I did to resolve this is to untrack A, then add B and then add A again.


### Description

I just integrated bit into my project, when I build my components everything is going well and I don't get errors but when I see them on the platform I get the following error in the overview section...

```
Element type is invalid: expected a string (for built-in components) or a class/function 
(for composite components) but got: undefined. You likely forgot to export your component 
from the file it's defined in, or you might have mixed up default and named imports.
```
### Specifications

- Bit version: 14.7.1
- Node version: 12.11.0
- npm / yarn version: 6.11.3/1.17.3
- Platform: MacOS
- Bit compiler (include version): react@1.0.11
- Bit tester (include version): not apply

### Context and additional information

My component:

```javascript
import React from 'react';
import ReactMarkdown from 'react-markdown';
import MarkdownLinkRenderer from '~components/utils/MarkdownLinkRenderer';
import { ReactComponent as helpIcon } from '~assets/icons/info-circular-button.svg';
import { ReactComponent as exclamationIcon } from '~assets/icons/exclamation.svg';
import { ReactComponent as closeIcon } from '~assets/icons/close.svg';
import { ReactComponent as checkIcon } from '~assets/icons/checked.svg';

const iconTypes = {
  help: helpIcon,
  error: exclamationIcon,
  success: checkIcon,
  close: closeIcon,
};

const renderIcon = (type = 'help') =>
  React.createElement(iconTypes[type], { className: 'help-icon' });

class Help extends React.Component {
  constructor(props) {
    super(props);
    this.spanRef = React.createRef();
    this.state = {
      currentTooltipPosition: {},
    };
  }

  componentDidMount() {
    window.addEventListener('scroll', this.handleScroll, false);
  }

  componentWillUnmount() {
    window.removeEventListener('scroll', this.handleScroll, false);
  }

  onMouseHover = () => {
    const { type, right } = this.props;
    if (this.spanRef && this.spanRef.current && type === 'error' && right) {
      const currentPosition = this.spanRef.current.getBoundingClientRect();
      this.setState({
        currentTooltipPosition: {
          top: currentPosition.top + 2,
          left: currentPosition.left + 30,
          position: 'fixed',
        },
      });
    }
  };

  handleScroll = () => {
    const { type, right } = this.props;
    if (this.spanRef && this.spanRef.current && type === 'error' && right) {
      this.setState({
        currentTooltipPosition: {
          display: 'none',
        },
      });
    }
  };

  textToRender = text => {
    return Array.isArray(text) ? (
      text
    ) : (
      <ReactMarkdown source={text} renderers={{ link: MarkdownLinkRenderer }} />
    );
  };

  render() {
    const { props, state, spanRef, onMouseHover, textToRender } = this;
    const { text, modal, type, bottom, right, left, styles } = props;
    const { currentTooltipPosition } = state;
    const spanClassNames = [
      'help-text',
      type === 'error' && 'help-error-text',
      right && 'right',
      bottom && 'bottom',
      left && 'left',
      styles && styles.helpText,
    ].filter(Boolean);

    return (
      <div
        className={`help ${modal ? 'help-modal' : ''}`}
        data-testid={`${modal ? 'wrapped-input-help-modal' : 'wrapped-input-help'}`}
      >
        <div
          ref={spanRef}
          onMouseEnter={onMouseHover}
          className={`help-icon-container ${(styles && styles.helpIcon) || ''}`}
        >
          {renderIcon(type)}
          <span style={currentTooltipPosition} className={spanClassNames.join(' ')}>
            {textToRender(text)}
          </span>
        </div>
      </div>
    );
  }
}

export default Help;

```

### Steps to Reproduce

1. npm install a scss styles file (`npm i @bit/bit.frosting.theme.z-indexes`)
2. import inside a sass file (`@import '~@bit/bit.frosting.theme.z-indexes'`)
3. add sass file to component
4. run bit status

### Expected Behavior

bit should resolve all dependencies

### Screenshots, exceptions and logs
```
missing packages dependencies (use your package manager to make sure all package dependencies are installed): 
          src/components/Theme/floating-container/flavors/flavors.scss -> ~@bit, ~@bit, ~@bit, ~@bit
          src/components/Theme/floating-container/styles.scss -> ~@bit, ~@bit, ~@bit
```
### Specifications

- Bit version: 14.7.1
- Node version: v10.15.3
- npm / yarn version: 1.13.0
- Platform: macos
- Bit compiler (include version): bit.frosting/compilers/react-flow


I am trying to export a component, but I am getting permission error because of dependency on another account:

```
error: unable to export components to bit.frosting because they have dependencies on components in bitsrc.nodejs.
bit does not allow setting dependencies between components in private collections managed by different owners.
see troubleshooting at https://docs.bit.dev/docs/bit-dev#permissions-for-collections
```

This is an important error, but it does not specify which components have the bad dependency and what components come from another scope.  

--> please add specification to the error message, similar to how this is done for `bit status`
Found by @odedre 

### specifications:
bit version: 14.7.1
I am running `bit test`, and the `build` fail, producing this unreadable output:

```
❯ bit test base/button
error: bit failed to build bit.gui/base/button@0.0.6 with the following exception:
Command failed with exit code 2 (ENOENT): /Users/kutner/Documents/Projects/sandbox-playground/.git/bit/components/compilers/react-typescript/bit.envs/3.1.27/components/.dependencies/compilers/typescript/bit.envs/3.1.21/node_modules/typescript/bin/tsc -d
Error: Command failed with exit code 2 (ENOENT): /Users/kutner/Documents/Projects/sandbox-playground/.git/bit/components/compilers/react-typescript/bit.envs/3.1.27/components/.dependencies/compilers/typescript/bit.envs/3.1.21/node_modules/typescript/bin/tsc -d
    at makeError (/Users/kutner/Documents/Projects/sandbox-playground/.git/bit/components/compilers/react-typescript/bit.envs/3.1.27/components/.dependencies/compilers/typescript/bit.envs/3.1.21/node_modules/execa/lib/error.js:59:11)
    at handlePromise (/Users/kutner/Documents/Projects/sandbox-playground/.git/bit/components/compilers/react-typescript/bit.envs/3.1.27/components/.dependencies/compilers/typescript/bit.envs/3.1.21/node_modules/execa/index.js:112:26)
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
From previous event:
    at processImmediate (internal/timers.js:439:21)
From previous event:
    at getBuildResults (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:611:22)
    at /Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:615:32
    at Generator.next (<anonymous>)
From previous event:
    at _runBuild2 (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:621:21)
    at _runBuild (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:470:21)
    at /Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:403:14
    at Generator.next (<anonymous>)
From previous event:
    at _build2 (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:435:18)
    at _build (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:368:18)
    at /Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:248:35
    at Generator.next (<anonymous>)
    at processImmediate (internal/timers.js:439:21)
From previous event:
    at buildComponent (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component-ops/build-component.js:290:28)
    at /Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component/consumer-component.js:1021:44
    at Generator.next (<anonymous>)
From previous event:
    at Component.build (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/consumer/component/consumer-component.js:1032:7)
    at /Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/scope/scope.js:531:27
    at Generator.next (<anonymous>)
From previous event:
    at build (/Users/kutner/.config/yarn/global/node_modules/bit-bin/dist/scope/scope.js:547:23)
    at /Users/kutner/.config/yarn/global/node_modules/p-map-series/index.js:8:26
    at /Users/kutner/.config/yarn/global/node_modules/p-reduce/index.js:16:10
    at processTicksAndRejections (internal/process/task_queues.js:93:5)
```

This is unlike the pretty output from `bit build`:
```
❯ bit build base/button           
⠍⠀ isolating component - base/buttonbutton.spec.tsx:8:1 - error TS2582: Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha`.

8 it('should render', () => {
  ~~

button.spec.tsx:14:1 - error TS2582: Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha`.

14 it('should trigger onClick', () => {
   ~~

button.spec.tsx:25:1 - error TS2582: Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha`.

25 it('should remove loader after onClick has been resolved', async () => {
   ~~

button.spec.tsx:44:1 - error TS2582: Cannot find name 'it'. Do you need to install type definitions for a test runner? Try `npm i @types/jest` or `npm i @types/mocha`.

44 it('should remove loader even when onClick has been rejected', async () => {
   ~~
```

**Worse still**, I don't have a tester defined!
`bit test` should do nothing when tester is undefined

### reference 
  bit version   : 14.7.1
  node version  : v12.12.0
  npm version   : 6.13.4
  yarn version  : 1.19.1
  platform      : darwin