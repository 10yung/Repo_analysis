As a package maintainer, I would like to know which PHP versions are used when installing my package, to be able to take better decisions about increasing the min PHP version of my package (if I see that most of my userbase is installing the package on PHP 7.1, dropping support for PHP 7.1 might not be the best choice for instance).
Given that Packagist already collects download stats, and that Composer reports the PHP version in its user-agent, this is a feature that could be provided AFAICT.
Requires funding support (https://github.com/composer/composer/pull/8453) to be merged into Composer and the composer/composer dep to be updated before this can be merged.

Displaying of funding info in the UI is pretty basic for now. It simply lists all links in the details section. Maybe someone can come up with a nicer way to display this? Maybe a button in that section that is a bit more obvious and then a modal with all the options?

<img width="899" alt="Screenshot_20191129_001636" src="https://user-images.githubusercontent.com/154844/69835140-90cfd280-123f-11ea-8fd2-225bafa1b636.png">

*Requires the addition of a funding text column to the version table prior to deployment.*
Hello there, has I suggested recently on the Symfony Devs Slack, I think it would be very useful to have the possibility to filter packages by framework specific version.

## Why should you add that?
This feature would be very helpful for developers who seek to find a package compatible with a specific version of a framework.   
By example, if someone wants to build a website with Symfony 5 (who has just been released), will find all available packages compatible with this major version.   
This feature will be also really helpful when a new major version of a framework (Symfony) has just been released and developers who want to contribute to make this package compatible with this new major version will be able to find package who need to be upgraded.

## Is keywords can do the job?
Has proposed by someone could be used to filter specific version of Symfony by example.  
However this means each package author need to had the "perfect" keyword in the `composer.json` file to be able to have a filtering system 100% accurate.

## How could you achieve this?
The best way to achieve this goal would be to parse the packages listed in `composer.json` under the `require` and ` require-dev` keys and analyse the version required.  
The parser would also need to check the package type `symfony-bridge`, `symfony-bundle`.   
Let's take a example with the next `composer.json` file from `symfony/monolog-bundle`:
```json
{
    "type": "symfony-bridge",
    "require": {
        "php": ">=5.6",
        "symfony/monolog-bridge": "~3.4 || ~4.0 || ^5.0",
        "symfony/dependency-injection": "~3.4.10 || ^4.0.10 || ^5.0",
        "symfony/config": "~3.4 || ~4.0 || ^5.0",
        "symfony/http-kernel": "~3.4 || ~4.0 || ^5.0",
        "monolog/monolog": "~1.22 || ~2.0"
    },
    "require-dev": {
        "symfony/yaml": "~3.4 || ~4.0 || ^5.0",
        "symfony/console": "~3.4 || ~4.0 || ^5.0",
        "symfony/phpunit-bridge": "^3.4.19 || ^4.0 || ^5.0"
    },
}
```
This package seems to be compatible with the next versions of Symfony: **3.4**, **4.0** and **5.0** due to the dependencies versions listed above but also because the type is **symfony-bridge**.   
So with this information, a user will be able to filter packages by specifying the Symfony version **3.4**, **4.0** or **5.0**.
Current, the installation stats are providing a total number, and a number per release (with evolution charts for both of them).

It would be great to have a similar stats per major version (allowing to answer the question "is Twig 1.x used more or less often than Twig 2.x ?" for instance, which is exactly my current use case). Comparing only the latest patch release of each branch is not enough (most used versions of Twig are not actually the latest patch releases right now, due to being recent)
We've switched all of our repos over to using the webhooks, yet packagist still reports them as (Legacy Auto-Update, Needs Attention).  They all update properly currently, except one, which was set up as some sort of ancient mirror, and doesnt, apparently, fire any of the push hooks at github.

Anyhow when folks unfamiliar with the state of things goes in and try to sort out the one, non-updating repo, they see all the other "needs attention" things, and start mashing buttons and hoping for a combo.

Is there some way we can re-set those? I've tried using the https://packagist.org/trigger-github-sync/ to no avail.

The account in question is all of the repos linked to https://packagist.org/users/Drupal-Infrastructure/packages/

Those error message are only there when I am logged in, and browse to "my packages" so something leads me to believe its pulling that info from a cache somewhere. 
When I try to log in into Packagist and choose the GitHub option, it asks for permission for admin (read-write) access on all webhooks for all organizations I am a member of. That has nothing to do with user identification. I imagine there is some situation where Packagist might want to add its own webhooks to my repos, to learn about version updates or something, but asking for that permission on login, for all my personal and work repositories, looks extremely shady, would make me violate my job contract, and bars anyone with the tiniest spark of security awareness from using the login feature. Please don't do that.

(It also asks for read access to all my organization memberships, which also seems unrelated to login, although maybe it's used for some some group management functionality? Anyway that level of access does not seem problematic to me, but YMMV.)

![packagist github login](https://user-images.githubusercontent.com/145412/52675688-70b36a80-2edc-11e9-84c8-8a78abeb35e2.png)

Currently it's possible to get the downloads by version with `https://packagist.org/packages/[vendor]/[package]/downloads.json`.

The problem is that if the day / month / year is over, you can't get the number of downloads of the last day / month / year.

Would be nice to have the download numbers by a parameter which gives you a year (`2018`), a month (`2019-01`) or a day (`2019-01-22`).
Currently, the rendering of readmes has 2 different paths:

- using the Github rendered readme for github repos, which ensures that we get the same parsing than on Github (as Github is doing it)
- rendering the markdown with `cebe/markdown` for other packages (as we don't have pre-rendered readme for them)

This suggestion is about replacing `cebe/markdown` for the second case.

Nowadays, most non-github repositories on packagist are probably Gitlab ones. And Gitlab's markdown is based on CommonMark (with a few extensions of their similar to the Github ones, see https://docs.gitlab.com/ee/user/markdown.html). And Bitbucket also uses CommonMark (https://confluence.atlassian.com/bitbucketserver/markdown-syntax-guide-776639995.html).
So using a CommonMark parser would probably be better for compatibility of the rendering. But `cebe/markdown` is not such a parser.
Looks like Packagist isn't picking up branch deletions today?

Under webhooks in GitHub I can see several deliveries were made today - for example:

![image](https://user-images.githubusercontent.com/103348/47084915-4a730c00-d215-11e8-9b3d-c277f6366f24.png)

I've made numerous changes to [this repo](https://github.com/kodus/session) today, of which adding tags did correctly generate new versions in Packagist - but several branch removals (all of which show webhook deliveries being made) did not.

I've marked with green here additions I made today, and removals in red:

![image](https://user-images.githubusercontent.com/103348/47085057-be151900-d215-11e8-8603-47e8843774c4.png)

I'll wait before I manually update, in case you want to investigate the data/logs. (Please let me know if I can safely do the manual update?)

It would be very handy if you could specify several parameters at once for the filter query, e.g. something like

`https://packagist.org/explore/?type=contao-bundle~contao-module`

instead of

https://packagist.org/explore/?type=contao-bundle and
https://packagist.org/explore/?type=contao-module