to roll out new `sf`, the next things have to be done

* [ ] compare reverse dependencies against sf released on rcheckserver docker image
* [ ] compare reverse dependencies against sf released on docker image GDAL 3.0.3/PROJ 6.3.0
* [ ] check against PROJ 7 release candidates
* [ ] submit to CRAN
* [ ] write r-spatial blog & sf vignette on WKT2 #1187 #1225 #1234, axis order #1033, transformation pipelines, and datum grids
* [ ] inform twitter


Hi! 

Working with spatial data, I managed to calculate the mean and the max value for each polygon (in this case counties). But I struggle to calculate the median (see code below). Can anyone give me a suggestion about what goes wrong here?

Thanks so much!

```r
library(tidyverse)
library(sf)
rm(list = ls())
so2_82 <- read_sf('EstGermany_82_final.shp')
counties <- read_sf('Germany_1989_v.1.0.shp')

counties <- st_transform(counties, st_crs(so2_82)$epsg)
res <- st_intersection(st_buffer(so2_82,0),
                       st_buffer(counties,0))

res$mid <- ifelse(res$Range == "<2.5", 1.25, 0)
res$mid <- ifelse(res$Range == "2.5-25", 13.75, res$mid)
res$mid <- ifelse(res$Range == "25-100", 62.5, res$mid)
res$mid <- ifelse(res$Range == "100-250", 175, res$mid)
res$mid <- ifelse(res$Range == "250-500", 375, res$mid)
res$mid <- ifelse(res$Range == "500<", 500, res$mid)
res$cutoff_high <- ifelse(res$Range == "<2.5", 2.5, 0)
res$cutoff_high <- ifelse(res$Range == "2.5-25", 25, res$cutoff_high)
res$cutoff_high <- ifelse(res$Range == "25-100", 100, res$cutoff_high)
res$cutoff_high <- ifelse(res$Range == "100-250", 250, res$cutoff_high)
res$cutoff_high <- ifelse(res$Range == "250-500", 500, res$cutoff_high)
res$cutoff_high <- ifelse(res$Range == "500<", 600, res$cutoff_high)

*Compute mean-values for each county*
midvalues82 <- res %>% mutate(size=st_area(geometry),
               values = mid) %>%
  group_by(KREIS_KENN) %>%
  summarize(score_mean = sum(size*values)/sum(size)) 
save(midvalues82, file ='meanSO2_82.RData')

*Compute max-values for each county*
maxvalues82 <- res %>% mutate(size=st_area(geometry),
                         values = cutoff_high) %>%
  group_by(KREIS_KENN) %>%
  summarize(score_max = max(values))
save(maxvalues82, file ='maxSO2_82.RData')

*Compute median-values for each county ???*
median82 <- res %>% mutate(size=st_area(geometry),
                         values = mid) %>%
  group_by(KREIS_KENN) %>%
  summarize(score_median = values[max(size)])
```
Hi,

I have one map with SO2-Pollution and one map with counties of the former GDR that I like to match with 'st_intersection'. That works but in this process some SO2-values are added for counties in Western Germany where originally no SO2-values existed (e.g. Göttingen, Fulda,...). Why does this happen and how could I avoid this problem?

Thanks in advance for your help!

```r
library(tidyverse)
library(sf)
counties <- read_sf('Germany_1989_v.1.0.shp')
so2 <- read_sf('EstGermany_77_final.shp')
ggplot(so2, aes(geometry=geometry, fill=factor(Range) )) + geom_sf()
head(so2)

counties <- st_transform(counties, st_crs(so2)$epsg)

res <- st_intersection(st_buffer(so2,0),
                       st_buffer(counties,0))
```
Small changes applied in order to make `st_sample` to work with unprojected shapes. `a0` parameter (area) is now computing as width*length of the bounding box when `st_is_longlat(x)==TRUE`.

Following #1220
@etiennebr have you had time to look at [Postgis 3](http://blog.cleverelephant.ca/2019/02/proj4-postgis.html) support for PROJ6? Since `sf` is also moving towards using wkt rather than proj4strings, some work is needed on the PostGIS interface side. This work is done in the `SetFromUserInput` branch of sf; I currently switched PostGIS off entirely on travis, to get it pass.
I tried to implement a number of sf -> spatstat conversions, and vice versa. A review by the spatstat team e.g. @rubak would be appreciated. I'm in particular not sure whether the observation windows for the psp objects make sense.

Here is a demo:
```r
suppressPackageStartupMessages(library(spatstat))
suppressPackageStartupMessages(library(sf))

# png("/tmp/spa%03d.png")

p1 = st_point(0:1)
p2 = st_point(1:2)
p3 = st_point(c(-1,2))
p = st_sfc(p1, p2, p3)
as.ppp(p)
# Planar point pattern: 3 points
# window: rectangle = [-1, 1] x [1, 2] units
try(as.ppp(st_set_crs(p, 4326)))
# Error in as.ppp.sfc(st_set_crs(p, 4326)) : 
#   Only projected coordinates may be converted to spatstat class objects

sf = st_sf(geom = p)
try(as.ppp(sf))
# Planar point pattern: 3 points
# window: rectangle = [-1, 1] x [1, 2] units
sf = st_sf(a = 1:3, geom = p)
as.ppp(sf)
# Marked planar point pattern: 3 points
# marks are numeric, of storage type  ‘integer’
# window: rectangle = [-1, 1] x [1, 2] units
sf = st_sf(a = 1:3, b=3:1, geom = p)
as.ppp(sf) # warns
# Marked planar point pattern: 3 points
# marks are numeric, of storage type  ‘integer’
# window: rectangle = [-1, 1] x [1, 2] units
# Warning message:
# In as.ppp.sf(sf) : only first attribute column is used for marks

w = st_as_sfc(st_bbox(st_sfc(p1, p2)))
sf = st_sf(a = 1:3, geom = p)
(p0 = rbind(st_sf(a = 0, geom = w), sf))
# Simple feature collection with 4 features and 1 field
# geometry type:  GEOMETRY
# dimension:      XY
# bbox:           xmin: -1 ymin: 1 xmax: 1 ymax: 2
# epsg (SRID):    NA
# proj4string:    NA
#   a                           geom
# 1 0 POLYGON ((0 1, 1 1, 1 2, 0 ...
# 2 1                    POINT (0 1)
# 3 2                    POINT (1 2)
# 4 3                   POINT (-1 2)
try(as.ppp(p0)) # errors: one point outside window
# Error in `marks<-.ppp`(`*tmp*`, value = value) : 
#   number of rows of data frame != number of points
# In addition: Warning message:
# 1 point was rejected as lying outside the specified window 

w = st_as_sfc(st_bbox(p))
sf = st_sf(a = 1:3, geom = p)
(p0 = rbind(st_sf(a = 0, geom = w), sf))
# Simple feature collection with 4 features and 1 field
# geometry type:  GEOMETRY
# dimension:      XY
# bbox:           xmin: -1 ymin: 1 xmax: 1 ymax: 2
# epsg (SRID):    NA
# proj4string:    NA
#   a                           geom
# 1 0 POLYGON ((-1 1, 1 1, 1 2, -...
# 2 1                    POINT (0 1)
# 3 2                    POINT (1 2)
# 4 3                   POINT (-1 2)
as.ppp(p0)
# Marked planar point pattern: 3 points
# marks are numeric, of storage type  ‘double’
# window: polygonal boundary
# enclosing rectangle: [-1, 1] x [1, 2] units

library(stars)
# Loading required package: abind
tif = system.file("tif/L7_ETMs.tif", package = "stars")
s = adrop(read_stars(tif)[,,,1]) > 70
plot(s)
```
![spa001](https://user-images.githubusercontent.com/520851/71765141-32a6a700-2ef1-11ea-8a13-391615f83f3e.png)

```r
m = as.owin(s)
plot(m)
```
![spa002](https://user-images.githubusercontent.com/520851/71765147-3b977880-2ef1-11ea-8c33-00975791c5f3.png)

```r
table(m$m)

# FALSE  TRUE 
# 39494 83354 

# as.owin.sf, as.owin.sfc_*
nc = st_read(system.file("gpkg/nc.gpkg", package="sf"))
# Reading layer `nc.gpkg' from data source `/home/edzer/R/x86_64-pc-linux-gnu-library/3.6/sf/gpkg/nc.gpkg' using driver `GPKG'
# Simple feature collection with 100 features and 14 fields
# geometry type:  MULTIPOLYGON
# dimension:      XY
# bbox:           xmin: -84.32385 ymin: 33.88199 xmax: -75.45698 ymax: 36.58965
# epsg (SRID):    4267
# proj4string:    +proj=longlat +datum=NAD27 +no_defs
try(as.owin(nc)) # should be projected
# Error in as.owin.sfc_MULTIPOLYGON(st_geometry(W), ...) : 
#   Only projected coordinates may be converted to spatstat class objects
nc = st_transform(nc, 32119)
plot(as.owin(nc), col = 'grey')
```
![spa003](https://user-images.githubusercontent.com/520851/71765152-4ce08500-2ef1-11ea-94e8-b08795bc80cd.png)

```r
plot(as.owin(st_geometry(nc)), col = 'grey')
```
![spa004](https://user-images.githubusercontent.com/520851/71765155-536efc80-2ef1-11ea-8152-4cc373b23792.png)
```r
sq = rbind(c(-1,-1), c(1, -1), c(1,1), c(-1,1), c(-1,-1))
pol = st_polygon(list(0.5 * sq, sq[5:1,] * 0.45)) # w hole
plot(as.owin(pol), col = 'grey')
```
![spa005](https://user-images.githubusercontent.com/520851/71765159-62ee4580-2ef1-11ea-9946-1bc95c7f33a8.png)
```r
plot(as.owin(st_sfc(pol)), col = 'grey')
```
![spa006](https://user-images.githubusercontent.com/520851/71765160-6aadea00-2ef1-11ea-9add-3b488e27eadd.png)
```r
mpol = st_multipolygon(list(
	list(sq, sq[5:1,] * 0.9),
	list(sq * 2, sq[5:1,] * 1.8)))
plot(as.owin(mpol), col = 'grey')
```
![spa007](https://user-images.githubusercontent.com/520851/71765162-78636f80-2ef1-11ea-9d69-3a4036a3aabd.png)
```r
plot(as.owin(st_sfc(mpol)), col = 'grey')
```
![spa008](https://user-images.githubusercontent.com/520851/71765166-7ef1e700-2ef1-11ea-9028-1a09ae4cf2ac.png)
```r
plot(as.owin(st_sfc(pol, mpol)), col = 'grey')
```
![spa009](https://user-images.githubusercontent.com/520851/71765170-87e2b880-2ef1-11ea-97ef-41c0b9fe6cba.png)
```r
plot(as.owin(st_sf(a=1:2, st_sfc(pol, mpol))), col = 'grey')
```
![spa010](https://user-images.githubusercontent.com/520851/71765174-97620180-2ef1-11ea-8271-1a63c3fcd3e0.png)
```r
o = as.owin(st_sf(a=1:2, st_sfc(pol, mpol)))

st_as_sfc(o)[[1]]
# POLYGON ((2 2, -2 2, -2 -2, 2 -2, 2 2), (-1.8 -1.8, -1.8 1.8, 1.8 1.8, 1.8 -1.8, -1.8 -1.8))
st_as_sfc(o)[[2]]
# POLYGON ((1 1, -1 1, -1 -1, 1 -1, 1 1), (-0.9 -0.9, -0.9 0.9, 0.9 0.9, 0.9 -0.9, -0.9 -0.9))
st_as_sfc(o)[[3]]
# POLYGON ((0.5 0.5, -0.5 0.5, -0.5 -0.5, 0.5 -0.5, 0.5 0.5), (-0.45 -0.45, -0.45 0.45, 0.45 0.45, 0.45 -0.45, -0.45 -0.45))

plot(st_as_sfc(o), col = 'blue', main = 'st_as_sfc(o)')
```
![spa011](https://user-images.githubusercontent.com/520851/71765176-a3e65a00-2ef1-11ea-8f4b-ca849787ad6d.png)
```r
plot(st_as_sf(o), col = 'blue', main = 'st_as_sf(o)')
```
![spa012](https://user-images.githubusercontent.com/520851/71765181-ac3e9500-2ef1-11ea-9cbb-5e0795fee4d1.png)
```r
data(nztrees)
qNZ <- quadratcount(nztrees, nx=4, ny=3)
ts = as.tess(qNZ)
plot(st_as_sfc(ts))
```
![spa013](https://user-images.githubusercontent.com/520851/71765186-b3fe3980-2ef1-11ea-8df6-627627e3868e.png)
```r
ls = st_linestring(rbind(c(0,0), c(1,1), c(2,0)))
plot(as.psp(ls))
```
![spa014](https://user-images.githubusercontent.com/520851/71765188-bd87a180-2ef1-11ea-87c4-9d10ae374d57.png)
```r
mls = st_multilinestring(list(rbind(c(0,0), c(1,1), c(2,0)), rbind(c(3,3), c(4,2))))
plot(as.psp(mls))
```
![spa015](https://user-images.githubusercontent.com/520851/71765191-c5dfdc80-2ef1-11ea-9a7d-342731ecccfd.png)
```r
plot(as.psp(st_sfc(ls)))
```
![spa016](https://user-images.githubusercontent.com/520851/71765198-d2fccb80-2ef1-11ea-8e19-0edc1210e63f.png)

```r
plot(as.psp(st_sfc(mls)))
```
![spa017](https://user-images.githubusercontent.com/520851/71765207-df812400-2ef1-11ea-9ea8-af143966ed9a.png)

```r
plot(as.psp(st_sfc(ls, mls)))
```
![spa018](https://user-images.githubusercontent.com/520851/71765212-e6a83200-2ef1-11ea-9b6a-618b461f8733.png)

More https://github.com/r-spatial/sf/issues/1187 fun.

See https://lists.osgeo.org/pipermail/proj/2019-December/009166.html. Even seems to think that the OGRSpatialReference object may be subject to short-term volatility. **rgdal** functions `P6_SRID_show()` and `ogrP4S()` affected. All works fine in PROJ 6.2.1, for EPSG:27700 `+ellps=` and `+units=` omitted in `exportToProj4()`. I tried to check **sf** but don't know which branch I'm checking, there is an error in R check. Hope PRØJ gives us a break in 2020.
This attempts to solve https://github.com/r-spatial/discuss/issues/31 for `sf`, by avoiding changing environment variables on load. Required changes are done on-the-fly upon calls to `st_crs` or `st_transform`, and automatically reverted on.exit. (See comments on last commit)

Hope this helps and makes sense.

PS2: `testthat` test are all passing, but many differences are found on tests comparing with Rout.save files. However, the differences seem similar to those also observed on travis build on `wkt2` branch.
TL;DR:
* current crs objects are hard to move to the post-proj4string world we now live in
* I suggest to have `crs` objects with two fields: `input` for user input / short description, and `wkt` for communicating to/from GDAL
* this still supports specifying CRS by EPSG ID or proj4string, but also with 8 other CRS formats, widening the interoperability dramatically

Currently, `crs` objects have two fields: `epsg` (integer) and `proj4string` (character). Branch `wkt2` added a third, `wkt2` (character) with the WKT-2 representation. This tries to merge the PROJ.4 world view. where CRS are expressed as proj4strings, and the PROJ ( >= 6) world, where proj4strings are considered legacy (if not to be deprecated). As expected, this turned out to be very messy; see #1146. 

Spawning from branch wkt2, I created a branch `SetFromUserInput` which rethinks `crs` objects. In short, in this branch `crs` objects have two `character` fields:
* `input`: the string with which the object was initialised by the user, or the string that characterizes the CRS briefly when an object was read through GDAL; it is meant to be the human-readable version of the CRS (as opposed to WKT).
* `wkt`: the wkt (or wkt2 in GDAL3/PROJ6) description of the CRS, which is meant to be communicate the entire CRS to and from GDAL

Only `input` is ever to be set by users, e.g. as in
```{r}
> st_crs(4326)
Coordinate Reference System:
  User input: EPSG:4326 
  wkt:
GEOGCRS["WGS 84",
    DATUM["World Geodetic System 1984",
        ELLIPSOID["WGS 84",6378137,298.257223563,
            LENGTHUNIT["metre",1]]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["degree",0.0174532925199433]],
    CS[ellipsoidal,2],
        AXIS["geodetic latitude (Lat)",north,
            ORDER[1],
            ANGLEUNIT["degree",0.0174532925199433]],
        AXIS["geodetic longitude (Lon)",east,
            ORDER[2],
            ANGLEUNIT["degree",0.0174532925199433]],
    USAGE[
        SCOPE["unknown"],
        AREA["World"],
        BBOX[-90,-180,90,180]],
    ID["EPSG",4326]]
```
(where 4326 is converted to `EPSG:4326`) and input is passed on to [OGRSpatialReference::SetFromUserInput](https://gdal.org/doxygen/classOGRSpatialReference.html#aec3c6a49533fe457ddc763d699ff8796). This means that not only proj4strings and EPSG IDs can be input, but also WKT(2), OGC urns, PROJJSON and even non-EPSG CRS's (in total 10 formats), e.g.:
```r
> st_crs("urn:ogc:def:crs:EPSG::4326")
Coordinate Reference System:
  User input: urn:ogc:def:crs:EPSG::4326 
  wkt:
GEOGCRS["WGS 84",
    DATUM["World Geodetic System 1984",
        ELLIPSOID["WGS 84",6378137,298.257223563,
            LENGTHUNIT["metre",1]]],
    PRIMEM["Greenwich",0,
        ANGLEUNIT["degree",0.0174532925199433]],
    CS[ellipsoidal,2],
        AXIS["geodetic latitude (Lat)",north,
            ORDER[1],
            ANGLEUNIT["degree",0.0174532925199433]],
        AXIS["geodetic longitude (Lon)",east,
            ORDER[2],
            ANGLEUNIT["degree",0.0174532925199433]],
    USAGE[
        SCOPE["unknown"],
        AREA["World"],
        BBOX[-90,-180,90,180]],
    ID["EPSG",4326]]
```
This broadens the scope of `crs` objects in terms of interoperability, can also work with GDAL 2, and allows everyone to move away from proj4strings on their own pace. For convenience, the `$` method for `crs` objects does a bit more than extracing `input` or `wkt`, but can generate some fields that help backward compatibility:
```r
 > x = st_crs("urn:ogc:def:crs:EPSG::4326")
> x$epsg # now a character:
[1] "4326"
> x$proj4string # generated on-the-fly
[1] "+proj=longlat +datum=WGS84 +no_defs"
```
What messes up backward compatibility to reverse dependencies is stored legacy objects, e.g. in package `tmap`, and possibly data packages such as `bcmaps`. E.g.
```r
> library(bcmaps)
Loading required package: sf
Linking to GEOS 3.8.0, GDAL 3.0.2, PROJ 6.2.1
> bc_bound <- get_layer("bc_bound")
> str(st_crs(bc_bound))
List of 2
 $ epsg       : int 3005
 $ proj4string: chr "+proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +"| __truncated__
 - attr(*, "class")= chr "crs"
> st_crs(bc_bound)
Coordinate Reference System:
  User input: +proj=aea +lat_1=50 +lat_2=58.5 +lat_0=45 +lon_0=-126 +x_0=1000000 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 
  wkt:
BOUNDCRS[
... # long text skipped
]Warning messages:
1: In `$.crs`(x, "input") : old-style crs object found: please update code
2: In `$.crs`(x, "input") : old-style crs object found: please update code
3: In `$.crs`(x, "wkt") : old-style crs object found: please update code
4: In `$.crs`(x, "wkt") : old-style crs object found: please update code
```
 These should ideally have been generated at package load rather than stored, to be robust against changes like this. I might be able to do an auto-conversion + warning for backward compatibility in packages that I control and that use them (sf, lwgeom). 

This is related to #1033, #1146 and #1187. 
It seems that there is a bug on `st_sample` when `type="hexagonal"` is performed over an unprojected polygon:

```r
library(sf)
nc <- st_read(system.file("shape/nc.shp", package = "sf"))[1, ]
nc = st_transform(nc, 4326)
hexsample_4326 = st_sample(nc, size = 50, type = "hexagonal")
```

This returns this error:

```r 
Error in seq_len(nrow(xy)) : 
  argument must be coercible to non-negative integer
In addition: Warning message:
In seq_len(nrow(xy)) : first element used of 'length.out' argument
```

Whereas this works fine:

```r
hexsample_other = st_sample(st_transform(nc, 3857), size = 50, type = "hexagonal")
```

I think the issue comes from this line

https://github.com/r-spatial/sf/blob/b96ffe8061307cbd302d65d868a4d45c9b26f94f/R/sample.R#L101 

as it returns the area on m2, and then
https://github.com/r-spatial/sf/blob/b96ffe8061307cbd302d65d868a4d45c9b26f94f/R/sample.R#L113
comes in meters as well, and finally

https://github.com/r-spatial/sf/blob/b96ffe8061307cbd302d65d868a4d45c9b26f94f/R/sample.R#L180-L186

performs the operations mixing longitude and latitude with meters. 


