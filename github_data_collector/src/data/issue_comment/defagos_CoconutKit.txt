iOS 13 support should be quite straightforward. Testing the demo I still spotted a few issues:

- [ ] `UIStepper` bindings do not work anymore.

I also found other issues not related to iOS 13:

- [ ] Parallax demos are broken.
- [x] Linking with CoconutKit and MAKVONotificationCenter reveals category method conflicts (newly reported by Xcode 11).
- [ ] Using the cursor resizing sliders make the demo crash.
The top and bottom browser insets are incorrect:

- Starting with iOS 11, and depending on `viewfit-cover` (see this [article](https://modelessdesign.com/backdrop/283)), the behavior needs to be adjusted differently. Check with www.apple.com, for example.
- The bottom toolbar covers the content (it does not count in the safe area / layout guides).

Fixing these issues requires some modernization layout work (to deal with the many iOS 11 changes mostly). I already have implementations bits around, but they should be brought together first.
With iOS 12 (at least with beta 4), `UITextField` bindings do not work anymore.
The email validation regex becomes increasingly slow as the length of the string to validate increases (with no _@_ sign). It must probably be replaced / updated.
Sometimes the top layout guide might not be correctly propagated to the child view controller.

After spending too much time investigating this issue (without real success), I stumbled upon the probable cause: before iOS 11, `-addChildViewController:` must be called after the child view controller view has been added to its parent container, so that layout guides are correctly propagated.

The issues seems to disappear with iOS 11 and the new safe area concept. It is probably not so relevant anymore to address it.
Using scrollRectToVisible:animated: seems to cause some problems to adjust scrollview offset with the keyboard. Could this solution be suitable?
Fix for warnings appearing while compiling the framework on Xcode 8 projects with Swift.
Starting with iOS 9, an external keyboard might reduce the software keyboard to it associated input accessory view. In this case the _will hide_ notification is not called, the _will show_ notification is called instead. This was not the case with iOS 8.

When editing a text view located within a scroll view with `avoidingKeyboard = YES`, CoconutKit therefore does not correctly update the insets when an external keyboard is connected. Input is still reduced to the area occupied by the full software keyboard when it was visible.

Hi! 
when I remove several viewController from StackViewController by removeViewControllerAtIndex ,and set animated to YES,I will remove only one VC.
and set animated to NO, I will remove correctly.
is this a bug?
when animated,the stack was been locked,then I can not remove next VC,is this right?
----------update------------
useful log
2013-05-20 15:51:35.883 下厨房菜谱[9987:907] [DEBUG](-[XcfNavigationController removeViewControllerAtIndex:animated:]) - stack after remove (
    "XcfProfileViewController: 0x1da8ab40>",
    "XcfProfileViewController: 0x1da05a10>",
    "XcfDishDetailViewController: 0x1dc4afe0>"
)
2013-05-20 15:51:35.884 下厨房菜谱[9987:907] [DEBUG](-[XcfNavigationController removeViewControllerAtIndex:animated:]) - navigation bar items after remove (
    "UINavigationItem: 0x1da96fd0>",
    "UINavigationItem: 0x1db73290>",
    "UINavigationItem: 0x1dc4e5a0>"
)
2013-05-20 15:51:35.886 下厨房菜谱[9987:907] [DEBUG](-[XcfNavigationController removeViewController:animated:]) - will remove XcfDishDetailViewController: 0x1dc4afe0>
2013-05-20 15:51:35.890 下厨房菜谱[9987:907] [DEBUG](-[HLSAnimationStep addObjectAnimation:forObject:]) - No object to animated
2013-05-20 15:51:35.891 下厨房菜谱[9987:907] [DEBUG](-[HLSAnimationStep addObjectAnimation:forObject:]) - No object to animated
2013-05-20 15:51:35.893 下厨房菜谱[9987:907] [DEBUG](-[HLSAnimationStep addObjectAnimation:forObject:]) - No object to animated
2013-05-20 15:51:35.894 下厨房菜谱[9987:907] [DEBUG](-[HLSAnimationStep addObjectAnimation:forObject:]) - No object to animated
2013-05-20 15:51:35.896 下厨房菜谱[9987:907] [DEBUG](-[HLSUserInterfaceLock lock]) - Acquire UI lock
2013-05-20 15:51:35.897 下厨房菜谱[9987:907] [DEBUG](-[HLSViewController viewWillDisappear:]) - View controller XcfDishDetailViewController: 0x1dc4afe0>: view will disappear, animated = YES
2013-05-20 15:51:35.898 下厨房菜谱[9987:907] Umeng: (logPageView) XcfDishDetailViewController 10 seconds
2013-05-20 15:51:35.899 下厨房菜谱[9987:907] [DEBUG](-[HLSViewController viewWillAppear:]) - View controller XcfProfileViewController: 0x1da05a10>: view will appear, animated = YES
2013-05-20 15:51:35.900 下厨房菜谱[9987:907] [DEBUG](-[HLSViewController viewWillAppear:]) - View controller XcfProfileDishesViewController: 0x1db74c30>: view will appear, animated = YES
2013-05-20 15:51:35.902 下厨房菜谱[9987:907] [DEBUG](-[XcfNavigationController removeViewControllerAtIndex:animated:]) - stack after remove (
    "XcfProfileViewController: 0x1da8ab40>",
    "XcfProfileViewController: 0x1da05a10>",
    "XcfDishDetailViewController: 0x1dc4afe0>"//this VC should be removed,but failed
)
2013-05-20 15:51:35.903 下厨房菜谱[9987:907] [DEBUG](-[XcfNavigationController removeViewControllerAtIndex:animated:]) - navigation bar items after remove (
    "UINavigationItem: 0x1da96fd0>",
    "UINavigationItem: 0x1db73290>"
)

Currently the demos have been written for iPad, but CoconutKit is meant to be used with iPhone applications as well. Make the demo project iPhone friendly so that CoconutKit components can be easily tested on an iPhone as well.
