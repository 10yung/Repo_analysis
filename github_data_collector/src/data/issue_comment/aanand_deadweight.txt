When running `rake cucumber DEADWEIGHT=true` I get the following error `undefined method `empty?' for #<ActionDispatch::Response`

Any suggestions?

running deadweight on 

```
# bootstrap/_print.scss

a[href^="#"]:after,
a[href^="javascript:"]:after {
    content: "";
}
```

gives following error as strip changes `a[href^="javascript:"]:after` to `a[href^="javascript` which is an invalid selector

```
gems/nokogiri-1.6.6.2/lib/nokogiri/css/parser_extras.rb:87:in `on_error': unexpected '"' after 'prefix_match' (Nokogiri::CSS::SyntaxError)
```

This is a set of changes that improve deadweight's performance and adds support for more css.

Normalizing the selectors to minimize the number that needs to be checked.

By making a tree with selectors that imply each other, we can only search a subset of the selectors at a time.
Ex: if you have the two selectors: ".hello" and ".hello.world", then ".hello.world" implies that ".hello" would match. So until you find a ".hello", there is no reason to look for a ".hello.world". This can greatly improve the speed nested styles.

Now supporting many pseudo-classes (Based on nokogiri's supported pseudoclasses, needed to update the Gemfile.lock for nokogiri to handle some of them correctly). Additionnally, we strip the :hover and :valid since logically, if you find the element, that the :hover is also found...

When a rule is not supported, it is now handled correctly. Output wise, it remains a simple "unused" rule. That could be improved in the future to distinguish them.

Deadweight works as expected when I run it as a rake task. However, when I try to run it with rspec, it finds no selectors:

```
$ DEADWEIGHT=true rspec spec/features/surveys_index_spec.rb
No DRb server is running. Running in local process instead ...

found 0 unused selectors out of 0 total
```

Is there some way to make this work? Piggybacking on integration tests seems way better than trying to manually specify every page of my site.

I am using Ubuntu, I did all required configuration, still getting Error while running 'rake deathweight'

Error :-

WARN -- : *\* [Bugsnag] No API key configured, couldn't notify
rake aborted!
EOFError: end of file reached
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/deadweight-0.2.2/lib/deadweight.rb:161:in `fetch'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/deadweight-0.2.2/lib/deadweight.rb:72:in`block in reset!'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/deadweight-0.2.2/lib/deadweight.rb:71:in `each'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/deadweight-0.2.2/lib/deadweight.rb:71:in`reset!'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/deadweight-0.2.2/lib/deadweight.rb:93:in `run'
/home/saurabh/luxola/lib/tasks/deadweight.rake:8:in`block in <top (required)>'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/gems/bugsnag-2.7.1/lib/bugsnag/rake.rb:36:in `block in bugsnag_define_task'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/bin/ruby_executable_hooks:15:in`eval'
/home/saurabh/.rvm/gems/ruby-2.2.0-preview1@luxola/bin/ruby_executable_hooks:15:in `<main>'
Tasks: TOP => deadweight
(See full trace by running task with --trace)

Given the following HTML

``` html
<table class="foo">
  <tr>
    <td>Some Foo data</td>
  </tr>
</table>
```

and the following CSS

``` css
table.foo tbody tr td {
  color: green;
}
```

browsers will insert a virtual `<tbody>` and apply the rule. Deadweight should also insert this element so it acts like browsers do.

How do I debug this?

```
/Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/css/parser_extras.rb:87:in `on_error': unexpected '$' after 'CHILD_SELECTOR' (Nokogiri::CSS::SyntaxError)
    from /Users/benwoodward/.rbenv/versions/2.1.2/lib/ruby/2.1.0/racc/parser.rb:258:in `_racc_do_parse_c'
    from /Users/benwoodward/.rbenv/versions/2.1.2/lib/ruby/2.1.0/racc/parser.rb:258:in `do_parse'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/css/parser_extras.rb:62:in `parse'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/css/parser_extras.rb:79:in `xpath_for'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/css.rb:23:in `xpath_for'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/xml/node.rb:106:in `block in search'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/xml/node.rb:104:in `map'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/nokogiri-1.6.2.1/lib/nokogiri/xml/node.rb:104:in `search'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:40:in `block in analyze'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:33:in `collect'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:33:in `analyze'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:131:in `process!'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:118:in `block in run'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:95:in `each'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight.rb:95:in `run'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight/cli.rb:113:in `process'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight/cli.rb:88:in `execute!'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/lib/deadweight/cli.rb:19:in `execute'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/gems/deadweight-0.2.2/bin/deadweight:4:in `<top (required)>'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/bin/deadweight:23:in `load'
    from /Users/benwoodward/.rbenv/versions/2.1.2/gemsets/global/bin/deadweight:23:in `<main>'
```

It would be nice if you would sent people landing on your page to my Headhunter gem. :+1: :smile: 

I never used this gem before, but I guess that it's not working anymore for newer versions of Rack and/or Rails, see especially my changes in `lib/deadweight/rack/capturing_middleware.rb` (`respond_to :body` doesn't seem to be correct anymore) and in `lib/deadweight/hijack/rails.rb` (`application.css` is no longer under `stylesheets`, but in `assets`, and it needs to be precompiled).

I didn't find a more elegant way to load `application.css` into `DeadWeight` than to do a manual `rake assets:precompile` from within Ruby. It would be nice to use the same source that Rails generates when a `js: true` test is run, but this is done only the first time such a request test is run, so we don't have it at this early stage. Maybe there is a way to trigger the generation manually somehow?

I also refactored the console output: I don't think it's useful to hijack the log and send it to a file. I want to see what's happening with my tests, e.g. how many % already are done, etc.

![screenshot_05_01_14_22_34](https://f.cloud.github.com/assets/1814983/1847512/258b5fca-7651-11e3-8d1f-d860f59f0b8b.png)

It would be nice to prevent the output of `rake assets:precompile` from being displayed, but I didn't find a way to do it.

**As I only use this as a Rails gem, I didn't verify that all other functionality's still working.**

fix for https://github.com/aanand/deadweight/issues/9
although i am running it via the rake task for now

It catches a `Nokogiri::CSS::SyntaxError` and logs the selector in an instance variable
program does not exit on parsing error
