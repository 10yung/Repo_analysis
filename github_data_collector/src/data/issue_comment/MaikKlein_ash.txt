Remaining work:
- [x] Include `VkPipelineExecutableInternalRepresentationKHR`(currently excluded as it generates invalid Rust code)
- [x] Passes `cargo check`
    ```
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES = 49,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES = 50,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES = 51,
    VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES = 52,
    ```

    The above associated types are not generated.
- [x] ~~Decide what to do about breaking API changes making pre-1.2 types unreachable.~~ *type aliases generated**
- [ ] Update non-generated code
- [x] Test new features against a Vulkan 1.2 Driver
- [ ] Test dependent crates(`gfx-hal`, `vk-mem`) [full list](https://crates.io/crates/ash/reverse_dependencies)

Fixes #263
Version 1.2 got released today https://www.khronos.org/news/press/khronos-group-releases-vulkan-1.2

We should try to support it soonish. Might need to update the vk.xml parser again.

- [ ] Update the parser / generator to output 1.2 ffi bindings
- [ ] Expose a 1.2 high level wrapper
- [ ] Add a simple 1.2 example to test some of the new features.
I also wanted to implement VK_AMD_draw_indirect_count at the same time considering it's the same API, but there is no "amd" under `extension`. If everything is fine with this PR, just tell me and I'll do the copy pasting. ;)
In the specification, the parameter `pipelineCache` of `vkCreateGraphicsPipelines` is defined as optional:

> pipelineCache is either VK_NULL_HANDLE, indicating that pipeline caching is disabled; or the handle of a valid pipeline cache object, in which case use of that cache is enabled for the duration of the command.

>         <command successcodes="VK_SUCCESS" errorcodes="VK_ERROR_OUT_OF_HOST_MEMORY,VK_ERROR_OUT_OF_DEVICE_MEMORY,VK_ERROR_INVALID_SHADER_NV">
>             <proto><type>VkResult</type> <name>vkCreateGraphicsPipelines</name></proto>
>             <param><type>VkDevice</type> <name>device</name></param>
>
>             <param optional="true"><type>VkPipelineCache</type> <name>pipelineCache</name></param>
>
>             <param><type>uint32_t</type> <name>createInfoCount</name></param>
>             <param len="createInfoCount">const <type>VkGraphicsPipelineCreateInfo</type>* <name>pCreateInfos</name></param>
>             <param optional="true">const <type>VkAllocationCallbacks</type>* <name>pAllocator</name></param>
>             <param len="createInfoCount"><type>VkPipeline</type>* <name>pPipelines</name></param>
>         </command>

Therefore `pipeline_cache` in `create_graphics_pipelines` should also be an `Option`.
While trying to build the examples on osx I would get the following error:
```
error[E0282]: type annotations needed
    --> /Users/plot/.cargo/registry/src/github.com-1ecc6299db9ec823/cocoa-0.13.0/src/appkit.rs:3418:9
     |
3418 |         msg_send![self, setStringValue:label];
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ consider giving `result` a type
     |
     = note: this error originates in a macro outside of the current crate (in Nightly builds, run with -Z external-macro-backtrace for more info)
```
After making the changes in this PR I was able to build the examples on osx and run the bin.
`instance.get_physical_device_features` exists, but I want to check for extension features - for which you need `vkGetPhysicalDeviceFeatures2`. That one does not seem to be exposed, as there's no get_physical_device_features2`?

I assume it's somehow related to https://github.com/MaikKlein/ash/issues/12 since it's also a "free function" that neither takes an instance nor a device (though I think as seen from the loader it's "instance-scoped", sort of).

Ran into this specifically for https://docs.rs/ash/0.29.0/ash/vk/struct.PipelineMultisampleStateCreateInfoBuilder.html#method.sample_mask -- if I pass a reference to an empty slice, `as_ptr` doesn't necessarily return `NULL`.
Is EntryV1_1 being held back for a reason?  I.e.: this code is missing:

````rust
impl<L> EntryV1_1 for EntryCustom<L> {
    fn fp_v1_1(&self) -> &vk::EntryFnV1_1 {
        &self.entry_fn_1_1
    }
}
````
Is there some other way to enter vulkan 1.1?  All the examples use 1_0 so they aren't giving me any clues.
fixes https://github.com/MaikKlein/ash/issues/223

Quick and dirty implementation for builders inside slices

We replaces all slices with `&'a [Foo]` => `&'a [impl Cast<Foo>]`, and we implement `unsafe impl crate::Cast<Foo> for FooBuilder<'_> {}`.

This allows us to have a slice for both `Foo` and `FooBuilder`.

This is only a preliminary implementation, so that we can talk about it.

Alternatively we might just only use builders for builders without any generics.

tl;dr

You don't have to call build anymore 
```Rust
// new
device.create_graphics_pipelines(.., &[graphic_pipeline_infos], None)
// old
device.create_graphics_pipelines(.., &[graphic_pipeline_infos.build()], None)
```

If you call build as late as possible, you everything is still lifetime checked. But if you don't you can run into some lifetime issues as build just throws away all the lifetime information. 

With this PR you can use builders everywhere and you don't need to bother anymore with calling build manually.
