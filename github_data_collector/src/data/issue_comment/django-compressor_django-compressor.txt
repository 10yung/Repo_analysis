They were replaced by COMPRESS_FILTERS in #900, i would simplify that to only have one version of those settings.
As per the discussion in https://github.com/django-compressor/django-compressor/pull/965
Re: https://github.com/django-compressor/django-compressor/issues/973
Jinja2 added _elif, compress inside an elif tag getting missed in offline compression.
Django 1.10 introduced relative paths for the `extends` tag, for example `{% extends '../base.html' %}`.  These fail to resolve during offline compression and `compress` catches a `TemplateDoesNotExist` exception at line 201 of `management/commands/compress.py`.

The reported path appears to be correct except that it isn't written absolutely (note that the first path starts with `/` while the failing 2nd path does not):

```
# my_app/templates/my_app/_base.html
....

# my_app/templates/my_app/show.html
{% extends './_base.html' %}
....

# compress-command error logging
Error parsing template /home/kdickerson/Code/my_project/my_app/templates/my_app/show.html: home/kdickerson/Code/my_project/my_app/templates/my_app/_base.html
```

It works correctly if I replace the relative path with a relative-to-template-loader-root path: `{% extends 'my_app/_base.html' %}`


I was having issues with offline manifest missing hash keys. Turned out, if {% compress %} was nested in an {% elif %} tag it was not being caught.

I believe this can be rectified by updating compressor.offline.jinja2.Jinja2Parser's get_nodelist function.

https://github.com/django-compressor/django-compressor/blob/c99f0c27003303658ea3e652c8f068bf698363b9/compressor/offline/jinja2.py#L107-L113

Fix for my purposes:
```
    def get_nodelist(self, node):
        body = getattr(node, "body", getattr(node, "nodes", []))

        if isinstance(node, jinja2.nodes.If):
            return body + node.elif_ + node.else_

        return body

```
Specifically: return body **+ node.elif_** + node.else_

Making that change on my source code seemed to fix my issue with it. Not familiar enough with django-compressor to know if there are any issues making this change.

(If relevant, I have Jinja2==2.10.3)
Potentially relevant commit re: Jinja2
https://github.com/pallets/jinja/commit/cde2a54b87876bd02b283db2f52aca3d9272a92c
(is that the right repo?)

I made that edit on a forked repo
https://github.com/nwilson5/django-compressor/commit/44b73b8760e4fa926a49191e6de1040e033d9c51
Let's say you wrote this to create a link preload tag:

```
{% compress js preload %}
  <script ...a.js" />
  <script ...b.js" />
  <script ...c.js" />
{% endcompress %}
```

It will produce this:

`<link rel="preload" href="..." />`

Now, when you want the actual script and you write it without preload attribute, 

```
{% compress js %}
  <script ...a.js" />
  <script ...b.js" />
  <script ...c.js" />
{% endcompress %}
```

It still emits link preload tag.

So,

Expected:
`<script src="shamalamadingdong.js"></script>`

Actual:
`<link rel="preload" href="shamalamadingdong.js" as="script" />`
use default-storage to store file instead of using FileSystemStorage

We will not support python 2.7
Hey all,

I've got a bunch of js files in html tempaltes which I'm compressing as
```
{% compress js %}
    <script src="{% static "dir1/code1.js" %}"></script>
    <script src="{% static "dir2/foo/bar/js/code2.js" %}"></script>
    <script src="{% static "dir2/foo/bar/js/code3.js" %}"></script>
    <script src="{% static "dir2/foo/bar/js/code4.js" %}"></script>
...
{% endcompress %}
```
And this works well. However I'm trying to add nonce-ing as 
```
{% compress js %}
    <script nonce="{{request.csp_nonce}}" src="{% static "dir1/code1.js" %}"></script>
    <script nonce="{{request.csp_nonce}}" src="{% static "dir2/foo/bar/js/code2.js" %}"></script>
    <script nonce="{{request.csp_nonce}}" src="{% static "dir2/foo/bar/js/code3.js" %}"></script>
    <script nonce="{{request.csp_nonce}}" src="{% static "dir2/foo/bar/js/code4.js" %}"></script>
...
{% endcompress %}
```
The string `{{request.csp_nonce}}` seems to get picked up as a jinja variable and I'm getting a `OfflineGenerationError: You have offline compression enabled but key "some hash" is missing from offline manifest.` I've tried adding 
```
COMPRESS_OFFLINE_CONTEXT = {
        'request.csp_nonce': '{{request.csp_nonce}}',
    }
```
to my settings file, but no dice. I've also checked the manifest file and indeed the hash is missing. I'm not sure where it's coming from. Has anyone worked with this combination? Am I missing something obvious?
`compressor` is minifying JS files just fine for me, but not (S)CSS. I am getting a single .CSS file, but it's never minified. I've tried all sorts of settings but none of them seem to produce a minified CSS file.

Relevant snippet from `settings.py`:

```
# SASS
COMPRESS_PRECOMPILERS = (
    ('text/x-sass', 'django_libsass.SassCompiler'),
    ('text/x-scss', 'django_libsass.SassCompiler'),
)

COMPRESS_FILTERS = {
    'css': ['compressor.filters.css_default.CssAbsoluteFilter', 'compressor.filters.cssmin.rCSSMinFilter'],
    'js': ['compressor.filters.jsmin.JSMinFilter']
}

COMPRESS_ENABLED = True
COMPRESS_OFFLINE = True
```


And in my `base.html` I have this:

```
{% compress css %}
        <link type="text/x-scss" href="{% static "stylesheets/bootstrap.scss" %}" rel="stylesheet" media="all">
{% endcompress %}
```
Currently, django-compressor has support for the defer and async keywords in script tags, but the support is not documented at all â€“ I think making it part of the usage examples in the documentation would help a lot.