There is a vulnerability in the moments.js library used by goconvey, which was confirmed [here](https://github.com/moment/moment/issues/4163).

Risk assessment: [CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H](https://www.first.org/cvss/calculator/3.0#CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H) 7.5 (High)

This can be fixed by updating the library to a newer version.
Hello,
I would like to know if there is an option to disable concurrency in goconvey
The title says it all. I couldn't find any documentation on the theming, but the home page says you can use custom and third-party themes.
Convey panics upon test failure, whereas it should report it, without panicking. What might be wrong here, or panic is it's normal behavior ?!

go version go1.13.4 windows/amd64

`Convey("sample test run", t, func() {
    So(1, ShouldEqual,2)
})
`
(some file paths truncated)
>   c:/.../rds_test.go
  Line 42:
  Expected: '2'
  Actual:   '1'
  (Should be equal)
  goroutine 7 [running]:
 infra.TestRds.func1()
        rds_test.go:42 +0x86 github.com/jtolds/gls.(*ContextManager).SetValues.func1(0x0)
       .../vendor/github.com/jtolds/gls/context.go:97 +0x46d
  github.com/jtolds/gls.EnsureGoroutineId.func1()
        .../vendor/github.com/jtolds/gls/gid.go:24 +0x35
  github.com/jtolds/gls._m(0x0, 0xc000004600)
       .../vendor/github.com/jtolds/gls/stack_tags.go:108 +0x38
  github.com/jtolds/gls.github_com_jtolds_gls_markS(0x0, 0xc000004600)
        .../vendor/github.com/jtolds/gls/stack_tags.go:56 +0x3c
  github.com/jtolds/gls.addStackTag(...)
        .../vendor/github.com/jtolds/gls/stack_tags.go:49
  github.com/jtolds/gls.EnsureGoroutineId(0xc00005a690)
        .../github.com/jtolds/gls/gid.go:24 +0xe6
  github.com/jtolds/gls.(*ContextManager).SetValues(0xc0000444b0, 0xc00005a630, 0xc0000045c0)
        .../vendor/github.com/jtolds/gls/context.go:63 +0x152
  sc-infra-testing.TestRds(0xc0000aa100)
        .../rds_test.go:40 +0xae
  testing.tRunner(0xc0000aa100, 0x5dee70)
        .../go_1.13.4/src/testing/testing.go:909 +0xd0
  created by testing.(*T).Run
        .../go_1.13.4/src/testing/testing.go:960 +0x357


Adds StackMode as an optional parameter to Convey, in the same way that FailureMode is implemented.

StackMode can be Error (default - print stack only on errors) or Fail (print stack for failure and errors).

Fixes: Make stacktrace on error optional #566



Hi,

We use Convey a lot and sometimes need to to table driven tests.

I did a TDD workshop recently and we looked at NUnit and pytest which both have nice syntax support for test tables.

In go, the for loop works ok but is not quite so elegant, and often times we've had problems with this especially in large Convey based tests with nested sections.

I wrote down a few ideas and started a proof-of-concept, creating ConveyMany as an add-on function around Convey.

My work so far is here: https://github.com/miketonks/conveymany

Inspiration and reflect tricks borrowed from Ginkgo Table extension: https://github.com/onsi/ginkgo/blob/master/extensions/table/table_entry.go

One main problem I have is the failure mode: when a test fails, it prints out a stack trace as well as the failure report, and I can't see why.  Normally we don't get a stack trace for failures with standard Convey.

Another issue is that when a failure occurs, we don't know which test case failed, so a way to add this to the report is needed.

Additionally, I wondered if you would consider a feature request and help me to integrate this idea properly into goconvey.

Using the standard library, one is able to filter/run (a) specific (sub) test(s) by passing a pattern to the `go test` command - https://blog.golang.org/subtests

e.g. `go test -run=myregexpattern`

Adopting a table driven test style with Convey ([example](https://gist.github.com/mdwhatcott/9265769)), when a test fails, one cannot run that specific test in isolation without commenting out test cases you are not interested in. This is not practical if your test table is huge. Ideally, I shouldn't need to touch the structure of my tests to run them in isolation.

I saw https://godoc.org/github.com/smartystreets/goconvey/convey#FocusConvey, but it's not useful for a table driven style.

Thoughts?
I had the same problem with #564 , after a simple code review, I figured out that using a temp dir to store the resources may be a solution.

Here is my quick and dirty fix. But here're few things should be noticed:

1. Another dependency was added to copy assets directory;
2. Code for clean temp dir was not implemented yet;

Tested in OSX/Ubuntu platform.
Ideally a ShouldExit assertion could be supported that would function like the following:

So(func() { ExitingFunctionCall() }, ShouldExit).  Similar to how ShouldPanic and ShouldPanicWith currently work (from a user perspective)

Asserting for exit codes could be an additional feature as well:
So(func() { ExitingFunctionCall() }, ShouldExitWith, 255)