@p8952 @frohoff @tst2005
At the moment I have no host to test it...

Is it possible to manipulate the host from inside of a bocker container or is there isolation (by cgroup?! haven't used it before...)

Simple unshare with chroot and proc mounted isn't isolated.
```
cgcreate -g "$cgroups:/$uuid"
	: "${BOCKER_CPU_SHARE:=512}" && cgset -r cpu.shares="$BOCKER_CPU_SHARE" "$uuid"
	: "${BOCKER_MEM_LIMIT:=512}" && cgset -r memory.limit_in_bytes="$((BOCKER_MEM_LIMIT * 1000000))" "$uuid"
	cgexec -g "$cgroups:$uuid" \
		ip netns exec netns_"$uuid" \
		unshare -fmuip --mount-proc \
		chroot "$btrfs_path/$uuid" \
		/bin/sh -c "/bin/mount -t proc proc /proc && $cmd" \
		2>&1 | tee "$btrfs_path/$uuid/$uuid.log" || true
	ip link del dev veth0_"$uuid"
	ip netns del netns_"$uuid"
```

If not that executed inside of a Container will reboot the host.
```
echo 1 > /proc/sys/kernel/sysrq
echo b > /proc/sysrq-trigger
```

Old Docker Registry HTTP API is deprecated. Switch to moby's image
downloading shell.
bocker pull does not support public registry, can't pull from there anymore.

The api has switched to v2, and the v1 does not seem to work anymore...

If bridge0 doesn't exist, automatically create it, enable IPv4
forwarding, and setup a minimal MASQUERADE rule so the containers can
access the external network.  Details in the individual commit
messages.

This grows the script by 7 lines (to 124 lines), but allowing most
users to not bother using brctl and iptables is probably worth it ;).

With this change, containers are created monotonically and we can have tens of thousands: I simply changed the 10 network to a /16 and am using modulo to fill in the ip address' third and fourth octet. I then do something similar with the mac address.

I also added a 'cleanup' command that deletes orphaned network namespaces and interfaces.

It looks like bocker run bash works, but there is no way I can get a prompt. Even 'export PS1="$ "' doesn't work. It is not that big of a problem, but I'm afraid this will just be the tip of the iceberg.

I was just exploring data mounts and some thing like this

 `unshare -m -- /bin/sh -c "mount -o bind,noexec,nosuid,nodev /var/bocker/shared '$btrfs_path/$uuid'/var/www/data"` 

seems to work well enough for basic host to container mounts.  

Apart from iptables, socat is also a excellent option for port forwarding with a simple one liner;

`socat TCP-LISTEN:80,fork TCP:10.0.0.2:80`

Ideally `uuidgen` should be used, but in the current implementation this will not work due to interface names being generated based on uuid's.
