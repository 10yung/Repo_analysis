This PR is a workaround of crash which sometimes happens when iOS client tries to connect to the room. In some cases peer and stream objects are NULL (possible because of race condition) in moment then method nicer->IcePeerContextParseTrickleCandidate is calling. 
In cases when skipped ice-candidate is host - all will be OK: connection will be established. But I'm afraid that in cases when we skip srflx candidate it can bring to connection problems. Anyway it is better than crash of the room...

**Description**

After moving to nICEr we can't connect iOS client to the room. It happens not always but in 4 from 5 attempts. When iOS client connects, ErizoJS restarts.

**Steps to reproduce the issue:**
1. Create room 
2. Try to connect iOS client to it (https://github.com/zevarito/Licode-ErizoClientIOS)

**Describe the results you received:**
Room crashes, all participants drops from the room

**Describe the results you expected:**
iOS connected to the room.

**Licode commit/release where the issue is happening**
Happens only if use nICEr.

**Additional details:**
I dig into code a bit and see that crash happens in method **NicerConnection::setRemoteCandidates** in this line:
`UINT4 r = nicer->IcePeerContextParseTrickleCandidate(peer, stream, const_cast<char *>(candidate.c_str()));`
Also I noticed that crash happened when variables **peer** and **stream** are NULL.
**Description**

We were not able to susbcribe to the remote version of local streams because we were marking them as remote. Not sure about the implications of this change yet so I need to investigate further to check if it could affect other features.

[] It needs and includes Unit Tests

**Changes in Client or Server public APIs**

Not needed.

[] It includes documentation for these changes in `/doc`.
**Description**

In our app we allow to limit publishing BW during session. We use **updateConfiguration** method with parameter **maxVideoBW** for it. But after limiting it to lower bandwidth, it can't be restored to higher bandwidth. Instead of it audio bandwidth is going Up. 

**Steps to reproduce the issue:**
1. Simulcast is 2 layers, codecs: VP8, OPUS
2. Connect to room by one publisher with BW = 512kb 
3. Limit BW to 128: `localstream.updateConfiguration({ maxVideoBW: 128 });`
4. Check webrtc://chrome-internals - bitrade droped to 128
5. Limit BW to 512: `localstream.updateConfiguration({ maxVideoBW: 512 });`
6. Check webrtc://chrome-internals: video BW is still 128, audio BW increased. (see attach)

Note: reproduces only with simulcast.
![video](https://user-images.githubusercontent.com/6253301/71515219-dcab8100-28aa-11ea-82b1-e2e2f12306fb.png)
![audio](https://user-images.githubusercontent.com/6253301/71515220-dcab8100-28aa-11ea-806f-19429b64e2ac.png)


**Description**

Queue SDP negotiation messages in ErizoJS to avoid race conditions. It handle interlocks between client and ErizoJS queues.

[] It needs and includes Unit Tests

**Changes in Client or Server public APIs**

Not needed.

[] It includes documentation for these changes in `/doc`.
It doesn't work in the Version 79.0.3945.79 (64-bit) of chrome.

first of all, i know http cannot access the camera in new version chrome. 
i try to use https.
It seems to be caused by using https but not configured wss, I don't know how to configure wss.

details as below:

my computer os is : Ubuntu 16.04 64-bit.
LAN IP is 192.168.1.172

Step1: execute ./scripts/initLicode.sh
and execute ./scripts/initBasicExample.sh

Step2: visit https://192.168.1.172:3004/ and allow it to use camera and microphone.
Step3: click "Test Connection" 
then I see logs in chrome's console:

connection_test.js:35 eyJ0b2tlbklkIjoiNWRmNDk2OWM3NTkzMWUwYzYwZDc2NzMzIiwiaG9zdCI6IjE5Mi4xNjguMS4xNzI6ODA4MCIsInNlY3VyZSI6ZmFsc2UsInNpZ25hdHVyZSI6IlkyRTJPRGRpTlRSa016ZzVZV05rWW1JMU9HSTBaR05rTVdWak9URXhNMlV4TkdFM1pUVXhZUT09In0=
erizo.js:29 INFO:  Requested access to local media
erizo.js:29 DEBUG:  Calling getUserMedia with config Object
erizo.js:29 INFO:  User has granted access to local media.
erizo.js:338 Mixed Content: The page at 'https://192.168.1.172:3004/connection_test.html' was loaded over HTTPS, but attempted to connect to the insecure WebSocket endpoint 'ws://192.168.1.172:8080/socket.io/?EIO=3&transport=websocket'. This request has been blocked; this endpoint must be available over WSS.
b.doOpen @ erizo.js:338
erizo.js:29 INFO:  Error triggering event: access-accepted, error: TypeError: Cannot read property 'onclose' of undefined
erizo.js:29 INFO:  getTracks MediaStreamTrack
erizo.js:29 INFO:  getTracks MediaStreamTrack
![Lark20191208100030](https://user-images.githubusercontent.com/20556297/70383020-9a74db00-19a1-11ea-8ea0-78a786578917.png)
who can help me sovle it ,when I connect to myIP:3001 with the chrome ,it returns the error ,thanks for who knew the answer 
**Description**

This PR adds session version control to start sending bytes from Erizo when MediaStream negotiation has finished.

[] It needs and includes Unit Tests

**Changes in Client or Server public APIs**

Not needed.

[] It includes documentation for these changes in `/doc`.

**Description**
@jcague  I am using Ubuntu 16 OS. Took the code from #1489 commit. I am facing a problem where remote subscription takes handsome time to appear. Some time subscription event comes quite late or sometime after offer sdp; answer sdp takes quite sometime. I am able to compare it with some previous code like commit #1417 and there is not such issue there and subscription is quite quick to appear.

**Steps to reproduce the issue:**
1. Join the room with first participant.
2. Join the room with second participant and switch the browser tab to first participant. And you will see this issue.
3. Even to make it more prominent, you may increase the participants.

**Describe the results you received:**
Subscribed audio/video appears quite late. If participant increases then it may even take more than 30 seconds to appear. 

**Describe the results you expected:**
It should appear on remote in less then 3-4 seconds after successful publishing.

**Additional information you deem important (e.g. issue happens only occasionally):**
It happens 7 times out of 10.

**Licode commit/release where the issue is happening**
Used the commit #1489.

**Additional environment details (Local, AWS, Docker, etc.):**
Tested it on local VM as well as IBM / Liquidweb servers.

Let me know if you need additional information to investigate it?
<!--
This channel is used to report issues. Please, make sure that we do not have 
any duplicates already open. You can ensure this by searching the issue list 
for this repository. If there is a duplicate, please close your issue and add 
a comment to the existing issue instead.

If your report is not an issue but a question or doubt regarding Licode 
documentation, features, roadmap, etc. please, use our Discourse channel in: 
http://discourse.lynckia.com/
-->

**Description**
Sender Bandwidth estimation fails for safari calls because of missing RTCP REMB packets despite goog-remb negotiated over SDP successfully


**Steps to reproduce the issue:**
1.  set log4j.logger.rtp.SenderBandwidthEstimationHandler to TRACE  in log4cxx.prperties 
2. Start one call leg from Chrome and one from Safari
3.  iCheck the logs 
4. Network trace/tcpdump also shoing REMB feed backs are not received.

**Describe the results you received:**
Logs shows REMB feedback packets received from  chrome. but not from safari subscriber stream.

**Describe the results you expected:**
Logs should show the REMB packet received messages with bitrate from both chrome and safari subscriber streams.

**Additional information you deem important (e.g. issue happens only occasionally):**
I also ran  network trace at server to see what all RTCP packets are sent by Safari. Still not receiving any REMB from Safari side despite playing the remote video. This causes sender b/w estimation failure for all safari subscriber streams.

**Licode commit/release where the issue is happening**
latest

**Additional environment details (Local, AWS, Docker, etc.):**
installed on  local server.