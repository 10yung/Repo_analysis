https://github.com/youtube/api-samples/blob/master/python/add_channel_section.py
【 else:
    print 'Added new channel section.  】
The last line  missing quotation marks at this file
We are looking for a solution to embed Youtube 360 videos to WebGL.

We have tried this lib https://github.com/mayognaise/aframe-html-shader ‑ 
but it only supports simple HTML+CSS, not work with youtube player.

Alternatively, we have tried to make a link in our app to the youtube player, and a user can view the youtube 360 video in this way but with an extra step – trigger enter 360 button again in the browser. It is not really a good user experience.

Ideally we look for an Aframe plugin for Youtube like there is one for Vimeo https://github.com/vimeo/aframe-vimeo-component

Or open to other ideas.”
Hey folks, 
missing a coma at the `metrics`parameter of this file.
https://github.com/youtube/api-samples/blob/07263305b59a7c3275bc7e925f9ce6cabf774022/python/yt_analytics_v2.py

```
ids='channel==MINE',
      startDate='2017-01-01',
      endDate='2017-12-31',
      metrics='estimatedMinutesWatched,views,likes,subscribersGained' <HERE>,<HERE>
      dimensions='day',
      sort='day'
```

exec.Command argument URL was the same URL as the reference source code
I am developing an Android app for Amazon Fire Stick devices. I am using Cordova to create the Android wrapper around my web application which is loaded in an iframe. I am using javascript to embed youtube player as shown [here][1].

Below is what my code to embed Youtube looks like:

    var player = new YT.Player('youtube_container', {
	    height: 720,
	    width: 1280,
	    videoId: 'some_video_id',
	    playerVars: {
		    autohide: 1,
		    controls: 0,
		    enablejsapi: 1,
		    rel: 0,
		    showinfo: 0
	    },
	    events: {
		    'onReady': function () {
			    player.seekTo(0, true);
			    player.playVideo();
		    },
	    }
    });

I have used this code to embed youtube videos in my web application and it works without any problem but in Fire Stick devices the video shows up cut off as shown below.
[![Video cut off][2]][2].

The video is supposed to play in the rectangular section. The video does play but only the top left corner seems to be visible.

The strange thing is, it plays fine if I play it in full screen mode. It also plays fine in Fire Tablet devices whether it's full screen or not. Also, in my tests, I have found that the video is positioned correctly in the iframe in some rare occassions.

It seems similar to the issue described [here][3], but no answer is marked correct and it has been 5 years since. I'm hoping someone has fixed this.

Any help will be appreciated. Thank you.

  [1]: https://developers.google.com/youtube/iframe_api_reference
  [2]: https://i.stack.imgur.com/xAjIF.png
  [3]: https://stackoverflow.com/questions/14289848/embedded-youtube-player-getting-cut-off
Clean up script so it actually works with Python 3.x
Main changes: fix `raw_input` calls and print calls without parenthesis
Also some minor refactoring and code cleanup
How do you access things from the community section? Such as comments.

For example. The posts listed here: https://www.youtube.com/user/onemeeeliondollars/community

Accessing video comments is covered nicely. I would now like to do the same for the comments in this section.
Hello!

Is there a **retractMessage**  or **messageRetracted** event? There's a developer who made a Javascript chat using the Youtube LiveChat API to handle messages, but when a user retracts (deletes) a message on YouTube Live Chat, it make it to this custom chat messages.

So I want to contribute by making a pull request of this chat's source to add this feature but I don't find anything on Google.  

If there is a retract message event, then we would be able to get the retracted message ID on the event listener, and filter the displayed messages and if one of them matches, then we remove that message from the chat's view.

I hope to get a solution, thank you.

Cheers!
Hi, I tried to use the javascript MediaUploader.js to upload youtube video to my own account, for some reason, I got this error in onError function:
signinCallback onError data:  {
 "error": {
  "errors": [
   {
    "domain": "global",
    "reason": "required",
    "message": "Required parameter: part",
    "locationType": "parameter",
    "location": "part"
   }
  ],
  "code": 400,
  "message": "Required parameter: part"
 }
}

I passed the tokens and video file to the following function after I successfully signed in with react-native-google-signin, and after I configure the options with the part as snippet and status, I still got the error: "Required parameter: part", any clue what happened?
Thanks for your help!

`var signinCallback = function (tokens, file){

    console.log("signinCallback tokens: ",tokens);

    if(tokens.accessToken) { //tokens.access_token
      console.log("signinCallback tokens.accessToken: ",tokens.accessToken);
      var metadata = {
        snippet: {
          "title": "Test video upload",
          "description":"Description of uploaded video",
          "categoryId": "22",//22
          "tags": ["test tag1", "test tag2"],
        },
        status: {
            "privacyStatus": "private",
            "embeddable": true,
            "license": "youtube"
        }
        };
      var options = {
        url: 'https://www.googleapis.com/upload/youtube/v3/videos',
        file: file,
        token: tokens.accessToken,
        metadata: metadata,
        contentType: 'application/octet-stream', 
        params: {
          part: Object.keys(metadata).join(',')
        },
        onError: function(data) {
          var message = data;
          // Assuming the error is raised by the YouTube API, data will be
          // a JSON string with error.message set. That may not be the
          // only time onError will be raised, though.
          try {
            console.log("signinCallback onError data: ",data);
            if(data!="Not Found"){
                var errorResponse = JSON.parse(data);
                message = errorResponse.error.message;
                console.log("signinCallback onError message: ",message);
                console.log("signinCallback onError errorResponse: ",errorResponse);
            } 
          } finally {
            console.log("signinCallback error.... ");
          }
        }.bind(this),
        onProgress: function(data) {
          var currentTime = Date.now();
          var bytesUploaded = data.loaded;
          var totalBytes = data.total;
          // The times are in millis, so we need to divide by 1000 to get seconds.
          var bytesPerSecond = bytesUploaded / ((currentTime - this.uploadStartTime) / 1000);
          var estimatedSecondsRemaining = (totalBytes - bytesUploaded) / bytesPerSecond;
          var percentageComplete = (bytesUploaded * 100) / totalBytes;
    
        }.bind(this),
        onComplete: function(data) {
          var uploadResponse = JSON.parse(data);
          this.videoId = uploadResponse.id;
          //this.pollForVideoStatus();
        }.bind(this)
      }
       var uploader = new MediaUploader(options);
      uploader.upload();
    }
  };`

I got the MediaUploader source code from here in this repository:
https://github.com/youtube/api-samples/blob/master/javascript/cors_upload.js
