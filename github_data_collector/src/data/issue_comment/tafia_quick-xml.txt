Since building and testing are free on Github (at least for now) this will enable them.
Seems it was missing a "Y" at the end.
I'm working on implementing an xml-rpc client in rust, but I can't get `Value`s to deserialize correctly.

For example, integer values have this format:

```xml
<value><i4>18</i4></value>
```

I have these struct / enum definitions:

```rust
#[derive(Debug, Deserialize, PartialEq, Serialize)]
#[serde(rename = "value")]
struct Value {
    value: Type,
}

#[derive(Debug, Deserialize, PartialEq, Serialize)]
enum Type {
    #[serde(rename = "int", alias = "i4")]
    Integer ( #[serde(rename = "$value")] i32 ),
    #[serde(rename = "boolean")]
    Boolean ( #[serde(rename = "$value")] bool ),
    #[serde(rename = "string")]
    String ( #[serde(rename = "$value")] String ),
    #[serde(rename = "double")]
    Double ( #[serde(rename = "$value")] f64),
    // ...
}
```

However, this expects duplicate `<value>` tags surrounding the `int`, like this: `<value><value><i4>18</i4></value></value>`.

If I add the `transparent` serde attribute to `Value` like this:

```rust
#[derive(Debug, Deserialize, PartialEq, Serialize)]
#[serde(transparent, rename = "value")]
struct Value {
    value: Type,
}
```

It drops **both** `value` tags and only accepts strings like `<i4>18</i4>`, where I think `transparent` should drop only the inner `value` tag.
rust definition:
```
#[derive(Debug, Deserialize, PartialEq)]
struct After {
    #[serde(rename = "$value")]
    body: Option<String>,
}
```
xml fragment:
```
<After><![CDATA[some string]]></After>
```
body field is set to None
PR #183 fixes some of this behavior with the existing interactions of serde and reader, but overall, the implementation needs to be revisited.

Here's the issues I've encountered so far
- Inner enums without rename will fail to deserialize
- Inner enums with `rename` attribute will fail to deserialize unless the rename is `$value`
- `flatten` attribute does not work
- Vector of enums will fail to deserialize, regardless of rename usage
- Nested containers without rename of `$value` will fail to deserialize

I've been trying to make things work "better" in my PR, but the rest of these issues would take a significant overhaul of the code.
`escape::unescape` tries to recognize HTML entities so hard that it simply fails on non-entity character sequence that contains `&` and `;`.
Simple case:
```xml
<a>a&b;</a>
```
causes an error `Xml(EscapeError(UnrecognizedSymbol(2..3, Ok("b"))))`.

Should not it ignore such sequences and leave them as is?
This PR fixes issues with nested struct and enum serialization, where the struct name will be serialized multiple times, or enum name will serialized. Unit variant enums are supported as well.
I have an XML with inner element, I write some code using quick-xml with serde, but It seems I could not serialize/deserialize with same struct, here is the code

```
use serde::{Serialize, Deserialize};
use quick_xml::DeError;
use quick_xml::de::from_str;
use quick_xml::se::to_string;

const XML: &str = r#"<Info><Content>5</Content></Info>"#;

#[derive(Debug, Deserialize, PartialEq, Serialize)]
pub enum Data {
    #[serde(rename = "Info")]
    Info {
        #[serde(rename="Content")]
        content: u8
    }
}

fn main() {
    let data: Result<Data, DeError> = from_str(XML);
    if let Ok(result) = data {
        //It seems from_str success, and I can fetch the value 5
        println!("result is {:?}", result);
        // It outputs "to_string result [Err(Unsupported("serialize_struct_variant"))]"
        println!("to_string result [{:?}]", to_string(&result));
    } else {
        println!("[{:?}]", data.err().unwrap());
    }
}
```
Hi,

the way features work in cargo is that any crate in your dependency tree can enable additional features for its dependencies, and each dependency ("crate") is only compiled once with all features merged; thus they must only add additional "APIs" without breaking what was before.

I.e. enabling the `encoding` feature should provide new structs and functions (or just improve existing ones without changing their signature).

Also the `reader::Decoder` struct is not public and not documented, but `Reader::decoder()` is... I guess either both or none should be public.
Hi!

I want to parse a 3MB XML file with serde. I used serde-xml-rs, and it is painfully slow; I hacked my way through serde-xml-rs's code to make it work with quick-xml instead (the APIs are very similar after all), and that sped it up tremendously (from 1.5s to 0.1s).

But! I don't want to deserialize an entire 3MB XML into a giant struct (which has loads of small heap-allocated vecs inside it), when all I want is to scan for a specific element inside it, and deserialize just that one.

I thought of using quick-xml's events to reach the element I want, then read_to_end() to get the whole element as a big text block, and then use serde-xml-rs to parse the text block as xml; except this approach loses all namespacing/encoding info.

I also thought of implementing some sort of from_element(xmlreader, start_element), which would give a partial Deserializer object, which is my current favorite option.

Thoughts? Any better ways to do this?