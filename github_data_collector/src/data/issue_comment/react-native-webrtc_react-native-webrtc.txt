On latest version of webrtc library, I’m using a RTCView to render my localstream, however when I switch the stream from front to back camera or vice versa, I have to change mirrored to true or false. I can do that, but the result is a second or so to where the previous stream is mirrored, before the camera switches from front to back, or vice versa. Has anyone encountered this issue?

iOS 13
Expo Bare project

#### Expected behavior
onaddstream gets called everytime when remote peer calls addstream and renegotiate
#### Observerd behavior
onaddstream gets called once in just the first time and whenever there is a new addstream and renegotiate it doesnt get called for second time
#### Steps to reproduce the problem
stop/start camera sharing on the web app
#### Platform information

* **React Native version**: 0.61.5
* **Plugin version**:  1.75.2
* **OS**: Android 
* **OS version**: 9 PKQ1.181007.001

My app has a stutter, when I leave the room and then join the room, it finally crashes

#### Expected behavior
no stutter, no crash
#### Observerd behavior

#### Steps to reproduce the problem
leave the room, then join the room
#### Platform information

* **React Native version**: 0.60.6
* **Plugin version**:  1.75.0
* **OS**: <!-- Android / iOS --> iOS
* **OS version**: 12.4.1


![WechatIMG39](https://user-images.githubusercontent.com/13869750/70307242-b06c8980-1843-11ea-8b4c-503fa4e9269a.png)


I needed the way to get video size from RTCView. I made this fork.
This PR fixes https://github.com/react-native-webrtc/react-native-webrtc/issues/679 by adding `onFirstFrame` callback, which fires when first video frame is received. 
Note, however, that audio stream can start playing earlier.
## createOffer() promise does not resolve (or reject) on iOS 13.0

I was testing with iOS 13.0 recently and I noticed that I was having an error connecting to peers. After some debugging, I found that the `createOffer` method is not behaving as expected on iOS 13.0. On iOS 12.2, and below, everything works as expected. 

#### Expected behavior
- Expected `createOffer()` method in RTCPeerConnection to either resolve or reject promise. 

#### Observed behavior
- When calling `createOffer()`, the promise is neither resolved or rejected.

#### Steps to reproduce the problem

On iOS 13.0:
```javascript
import * as WebRTC from 'react-native-webrtc';

const configuration = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
const pc = new WebRTC.RTCPeerConnection(configuration);

pc.createOffer().then(desc => console.log(desc)).catch(err => console.log(err))
// nothing happens
```

on iOS 12.2:
```javascript
import * as WebRTC from 'react-native-webrtc';

const configuration = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
const pc = new WebRTC.RTCPeerConnection(configuration);

pc.createOffer().then(desc => console.log(desc)).catch(err => console.log(err))
// Successfully resolves.
// RTCSessionDescription {sdp: "v=0[...]}
```

#### Platform information

* **React Native version**: 0.61.2
* **Plugin version**: 1.75.0
* **OS**: iOS
* **OS version**: 13.0


#### Expected behavior

When a call is released, the app is still alive

#### Observerd behavior

When i close a webrtc communication, the app crash with this info:

- From the console:
Terminating app due to uncaught exception 'NSInternalInconsistencyException', reason: 'threading violation: expected the main thread'

- From Xcode:
from thread 2. Queue: org.webrtc.RTCDispatcherCaptureSession (serial)
libsystem_kernel.dylib`__pthread_kill:
    0x1bebcfeb4 <+0>:  mov    x16, #0x148
    0x1bebcfeb8 <+4>:  svc    #0x80
->  0x1bebcfebc <+8>:  b.lo   0x1bebcfed8               ; <+36>
    0x1bebcfec0 <+12>: stp    x29, x30, [sp, #-0x10]!
    0x1bebcfec4 <+16>: mov    x29, sp
    0x1bebcfec8 <+20>: bl     0x1bebaef24               ; cerror_nocancel
    0x1bebcfecc <+24>: mov    sp, x29
    0x1bebcfed0 <+28>: ldp    x29, x30, [sp], #0x10
    0x1bebcfed4 <+32>: ret    
    0x1bebcfed8 <+36>: ret    

#### Steps to reproduce the problem

1. Establish a webrtc communication and close it. Everything is OK
2. Establish again a new webrtc communication. After the release, the app crash

#### Platform information

* **React Native version**: 0.59.10
* **Plugin version**: based on #02cf4294831cba3b74da7f6ef0e4dbfed171378e from Master in order to get the dispatch_async pushed few days ago
* **OS**: iOS 
* **OS version**: 13

#### Expected behavior
Video should be displayed in RTCView on iPhone 11 Pro Max - iOS 13.0 simulator.

#### Observerd behavior
Video data seems to be sending over the peer connection but the video is not displayed in the RTCView. The RTCView displays a red view instead.

#### Steps to reproduce the problem
Upgrade to the latest Xcode version 11.0 and attempt to broadcast a video on the latest iPhone 11 Pro Max - iOS 13.0 simulator.

#### Platform information

* **React Native version**: 0.60.4
* **Plugin version**: 1.75.0
* **OS**:  iOS
* **OS version**: 13.0
* **Xcode version**: 11.0


Screen Shot 2019-09-09 at 2 14 36 PM
I am getting only the camera switch but not the remaining.
Here is my code given below

`import React, { Component } from 'react';
import {
AppRegistry,
StyleSheet,
Text,
TouchableHighlight,
View,
TextInput,
Platform,
value
} from 'react-native';
import ListView from "deprecated-react-native-listview";
import io from 'socket.io-client';

const socket = io.connect('https://react-native-webrtc.herokuapp.com', {transports: ['websocket']});

import {
RTCPeerConnection,
RTCIceCandidate,
RTCSessionDescription,
RTCView,
MediaStream,
MediaStreamTrack,
mediaDevices
} from 'react-native-webrtc';
const configuration = {"iceServers": [{"url": "stun:stun.l.google.com:19302"}]};
const pcPeers = {};
let localStream;
const pc = new RTCPeerConnection(configuration);
function getLocalStream(isFront, callback) {

let videoSourceId;

// on android, you don't have to specify sourceId manually, just use facingMode
// uncomment it if you want to specify
if (Platform.OS === 'ios') {
mediaDevices.enumerateDevices().then(sourceInfos => {
console.log("sourceInfos: ", sourceInfos);

  for (const i = 0; i < sourceInfos.length; i++) {
    const sourceInfo = sourceInfos[i];
    if(sourceInfo.kind == "video" && sourceInfo.facing == (isFront ? "front" : "back")) {
      videoSourceId = sourceInfo.id;
    }
  }
});
}
mediaDevices.getUserMedia({
audio: true,
video: {
mandatory: {
minWidth: 640, // Provide your own width, height and frame rate here
minHeight: 360,
minFrameRate: 30,
},
facingMode: (isFront ? "user" : "environment"),
optional: (videoSourceId ? [{sourceId: videoSourceId}] : []),
}
}, function (stream) {
console.log('getUserMedia success', stream);
callback(stream);
}, logError);
}

function join(roomID) {
socket.emit('join', roomID, function(socketIds){
console.log('join', socketIds);
for (const i in socketIds) {
const socketId = socketIds[i];
createPC(socketId, true);
}
});
}

function createPC(socketId, isOffer) {
const pc = new RTCPeerConnection(configuration);
pcPeers[socketId] = pc;

pc.onicecandidate = function (event) {
console.log('onicecandidate', event.candidate);
if (event.candidate) {
socket.emit('exchange', {'to': socketId, 'candidate': event.candidate });
}
};

function createOffer() {
pc.createOffer(function(desc) {
console.log('createOffer', desc);
pc.setLocalDescription(desc, function () {
console.log('setLocalDescription', pc.localDescription);
socket.emit('exchange', {'to': socketId, 'sdp': pc.localDescription });
}, logError);
}, logError);
}

pc.onnegotiationneeded = function() {
console.log('onnegotiationneeded')
if (isOffer) {
createOffer()
}
}

pc.oniceconnectionstatechange = function(event) {
console.log('oniceconnectionstatechange', event.target.iceConnectionState)
if (event.target.iceConnectionState === 'completed') {
setTimeout(() => {
getStats()
}, 1000)
}
if (event.target.iceConnectionState === 'connected') {
createDataChannel();
}
};
pc.onsignalingstatechange = function(event) {
console.log('onsignalingstatechange', event.target.signalingState);
};

pc.onaddstream = function (event) {
console.log('onaddstream', event.stream);
container.setState({info: 'One peer join!'});

const remoteList = container.state.remoteList;
remoteList[socketId] = event.stream.toURL();
container.setState({ remoteList: remoteList });
};
pc.onremovestream = function (event) {
console.log('onremovestream', event.stream);
};

pc.addStream(localStream);
function createDataChannel() {
if (pc.textDataChannel) {
return;
}
const dataChannel = pc.createDataChannel("text");

dataChannel.onerror = function (error) {
  console.log("dataChannel.onerror", error);
};

dataChannel.onmessage = function (event) {
  console.log("dataChannel.onmessage:", event.data);
  container.receiveTextData({user: socketId, message: event.data});
};

dataChannel.onopen = function () {
  console.log('dataChannel.onopen');
  container.setState({textRoomConnected: true});
};

dataChannel.onclose = function () {
  console.log("dataChannel.onclose");
};

pc.textDataChannel = dataChannel;
}
return pc;
}

function exchange(data) {
const fromId = data.from;
let pc;
if (fromId in pcPeers) {
pc = pcPeers[fromId];
} else {
pc = createPC(fromId, false);
}

if (data.sdp) {
console.log('exchange sdp', data);
pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function () {
if (pc.remoteDescription.type == "offer")
pc.createAnswer(function(desc) {
console.log('createAnswer', desc);
pc.setLocalDescription(desc, function () {
console.log('setLocalDescription', pc.localDescription);
socket.emit('exchange', {'to': fromId, 'sdp': pc.localDescription });
}, logError);
}, logError);
}, logError);
} else {
console.log('exchange candidate', data);
pc.addIceCandidate(new RTCIceCandidate(data.candidate));
}
}

function leave(socketId) {
console.log('leave', socketId);
const pc = pcPeers[socketId];
const viewIndex = pc.viewIndex;
pc.close();
delete pcPeers[socketId];

const remoteList = container.state.remoteList;
delete remoteList[socketId]
container.setState({ remoteList: remoteList });
container.setState({info: 'One peer leave!'});
}

socket.on('exchange', function(data){
exchange(data);
});
socket.on('leave', function(socketId){
leave(socketId);
});

socket.on('connect', function(data) {
console.log('connect');
getLocalStream(true, function(stream) {
localStream = stream;
container.setState({selfViewSrc: stream.toURL()});
container.setState({status: 'ready', info: 'Please enter or create room ID'});
});
});

function logError(error) {
console.log("logError", error);
}

function mapHash(hash, func) {
const array = [];
for (const key in hash) {
const obj = hash[key];
array.push(func(obj, key));
}
return array;
}

function getStats() {
const pc = pcPeers[Object.keys(pcPeers)[0]];
if (pc.getRemoteStreams()[0] && pc.getRemoteStreams()[0].getAudioTracks()[0]) {
const track = pc.getRemoteStreams()[0].getAudioTracks()[0];
console.log('track', track);
pc.getStats(track, function(report) {
console.log('getStats report', report);
}, logError);
}
}

let container;

export default class Main extends Component {
constructor(props){
super(props);
this.ds = new ListView.DataSource({rowHasChanged: (r1, r2) => true});
this.state = {
info: 'Initializing',
status: 'init',
roomID: '',
isFront: true,
selfViewSrc: null,
remoteList: {},
textRoomConnected: false,
textRoomData: [],
textRoomValue: '',
}
}
componentDidMount(){
container = this;
}
_press(event) {
// alert(this.state.roomID)
this.refs.roomID.blur(event)
this.setState({ status: 'connect', info: 'Connecting' },()=>{
join(event)
})

}
_switchVideoType() {

const isFront = !this.state.isFront;

this.setState({isFront});
// alert(this.state.isFront)
getLocalStream(isFront, function(stream) {
  if (localStream) {
    for (const id in pcPeers) {
      const pc = pcPeers[id];
      pc && pc.removeStream(localStream);
    }
    localStream.release();
  }
  localStream = stream;
  container.setState({selfViewSrc: stream.toURL()});

  for (const id in pcPeers) {
    const pc = pcPeers[id];
    pc && pc.addStream(localStream);
  }
});
}
receiveTextData(data) {
const textRoomData = this.state.textRoomData.slice();
textRoomData.push(data);
this.setState({textRoomData, textRoomValue: ''});
}
_textRoomPress() {
if (!this.state.textRoomValue) {
return
}
const textRoomData = this.state.textRoomData.slice();
textRoomData.push({user: 'Me', message: this.state.textRoomValue});
for (const key in pcPeers) {
const pc = pcPeers[key];
pc.textDataChannel.send(this.state.textRoomValue);
}
this.setState({textRoomData, textRoomValue: ''});
}
_renderTextRoom() {
return (

<ListView
dataSource={this.ds.cloneWithRows(this.state.textRoomData)}
renderRow={rowData => {${rowData.user}: ${rowData.message}}}
/>
<TextInput
style={styles.sendMessageText}
onChangeText={value => this.setState({textRoomValue: value})}
value={this.state.textRoomValue}
/>

Send


);
}
render() {
return (


{this.state.info}

{this.state.textRoomConnected && this._renderTextRoom()}
<View style={{flexDirection: 'row'}}>

{this.state.isFront ? "Use front camera" : "Use back camera"}


Switch camera


{ this.state.status == 'ready' ?
(
<TextInput
ref='roomID'
autoCorrect={false}
style={styles.textInputRoomID}
onChangeText={(text) => this.setState({ roomID: text })}
value={this.state.roomID}
/>
<TouchableHighlight
onPress={this._press.bind(this, this.state.roomID)}>
Enter room

) : null
}
    {
      mapHash(this.state.remoteList, function(remote, index) {
        return <RTCView key={index} streamURL={remote} style={styles.remoteView}/>
      })
    }
  </View>
);
}
};

const styles = StyleSheet.create({
selfView: {
width: 200,
height: 150,

},
remoteView: {
width: 200,
height: 150,

},
container: {
flex: 1,
justifyContent: 'center',
},
welcome: {
fontSize: 20,
textAlign: 'center',
margin: 10,
},
listViewContainer: {
height: 150,
},
textInputRoomID:{
width: 200,
height: 40,
borderColor: 'gray',
borderWidth: 1
},
switchCamera:{
borderWidth: 1,
borderColor: 'black'
},
sendMessageText:{
width: 200,
height: 30,
borderColor: 'gray',
borderWidth: 1
},
});
`

I am working in the
"react-native":"0.60.4",
"react-native-webrtc": "^1.69.2",
devices is iphone,
IOS version :10.3.3
