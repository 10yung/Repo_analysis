Example to reproduce this, using Premailer 1.11.1:

```ruby
str = <<-FOO
<!DOCTYPE html>
<html>
<head>
  garbage

  <!--
    <style>
      color: red;
    </style>
   -->
</head>
<body>
Testing 12345
</body>
</html>
FOO

p = Premailer.new(str, {:with_html_string => true})
p.to_plain_text()
```

That outputs: `"garbage\n\ncolor: red;\n\n-->\n\nTesting 12345"`. Note how values that were in the head of the html document are now in the plain text output, in a somewhat mangled form. This is counter to what I would expect, namely that generated plain text would ignore and omit any values in the `<head>` of the document.
This PR is a duplicate of #363, but seeing as that one is over a year old, I decided to clean it up a bit and resubmit.

The basic problem here is that with multiple `img` tags on the same line, if the first one doesn't have an `alt` attribute, but a later one does, the regular expression will greedily match everything in between and throw it away.

## Example

Under normal circumstances, the regular expression will convert each `img` tag to whatever it's alt text value is.

```ruby
Premailer.new('<img alt="before"> then <img alt="after">').to_plain_text
=> "before then after"
```

But here where the first one doesn't have any alt text, the entire string matches the regex for a single img tag and the word `'just'` is removed entirely from the output.

```ruby
Premailer.new('<img> just <img alt="after">').to_plain_text
=> "after"
```

The regex change here is the exact same as the one proposed in #363, but maybe having this based on the latest master will help get it merged in.
Added a config option to allow dropping unused CSS styles from the document. The default behavior is to include any unmerged (non-inlined) styles in a style block at the top of the body. However this can result in a huge block of unneeded css that can make your emails very long (causing them to get clipped in the client). This option lets you turn off that behavior.

I added a test that's passing for my change, but there were a lot of tests failing already which I didn't have time to look at. 
This is still WIP, but it reveals the problem. I could use a hand resolving some of the remaining fails.
When using Nokogiri 1.9.1 and Nokogumbo 2.0.1, the following error comes out of some of our templates:

```
      NoMethodError:
        undefined method `create_element' for #<Nokogiri::HTML5::DocumentFragment:0x00564bbaaf74c0>
        Did you mean?  create_external_subset
```

Looking a little into the stack trace we see:

```
from /home/vagrant/.rbenv/versions/2.4.1/lib/ruby/gems/2.4.0/gems/premailer-1.11.1/lib/premailer/adapter/nokogumbo.rb:157:in `write_unmergable_css_rules'
```

Hopefully more data to come...
Run into this issue with `\b` char.

Example:
```
Premailer.new("<!--[if mso]>hello \bworld<![endif]-->", {with_html_string: true}).to_inline_css
```

Output:
```
<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\" \"http://www.w3.org/TR/REC-html40/loose.dtd\">\n" + "<html><body><p>world</p></body></html>\n
```

The comments have been stripped away, and all of the string before `\b` is missing.
This does not happen if the char is not in a comment.
See the spec change for the situation that this fixes.
Dimensions for img in Inline css style doesn't work for outlook 2013/16 on Windows.
Also, dimension attributes (width, height) for img with unit (px) doesn't work.

This pull request will extract the width and height from the inline css and set them to html attributes with no unit.
I get this error:
```
Unable to import module 'main': cannot import name 'etree'
```

Maybe it has something to do with this: https://www.azavea.com/blog/2016/06/27/using-python-lxml-amazon-lambda/
  
As discussed in https://github.com/premailer/premailer/pull/350#discussion_r148658716