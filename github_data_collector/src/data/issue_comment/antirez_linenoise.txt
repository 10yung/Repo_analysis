1. I enabled multiline by linenoiseSetMultiLine(1);
2. My hint list is {"hint1", "hint2", "help"},and what I return in hintcallback function is something like "\r\nhint1 | hint2", which means concat hint list with "|" into a string prepended by a "\r\n".

The question is, when I enter a 'h', my hint show up in the next line(hint1 | hint2 | help) as it should be,but when I go on entering a 'i', my cursor starts from next line, leaving the previous line a single 'h', which is not my wish.I hope the character I entered could be in same line, just like the way I enter words in terminal.

My question is like this(assume my prompt is >):
>h
hint1 | hint2 | help
>hi
hint1 | hint2

Hi,

I noticed that when I use !1 or say !(N) to get the details of Nth command, I see the newline character goes missing. It appears like for eg. 
pwd/home/poomanju, instead of 
pwd
/home/poomanju
Any suggestion or help to resolve this issue?
Refer to #128 
It works for me for a long time, if there is any better solution, please just close this PR.
Minor fix to typos in the readme file.
This change-set provides support for building and installing shared and static libraries.  I used a separate makefile for the new targets because they require GNU make, which is not true of the existing makefile.

If these changes are welcome, is compatibility with non-GNU makes is important (given that the existing makefile is  just used for compiling an example programme) or shall I do away with the separate makefile?
Hi!
Using this patch, the source and the example become fully compliant under -std=c11, yielding zero warnings when using -Wall -Wextra -Wpedantic, which is a requirement for a project I'm working on I may use linenoise for.
Looking forward to your review!
Eugenio

some minor improvements found with a linter
If I run the example, I can paste CR or CR+LF lines:

~~~
$ ./linenoise_example
hello> expr 5 + 2
echo: 'expr 5 + 2'
hello> expr 5 - 2
echo: 'expr 5 - 2'
~~~

but if I try to paste LF lines, I get unexpected result:

~~~
$ ./linenoise_example
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
hello> expr 5 + 2
expr 5 - 2
echo: 'expr 5 + 2
expr 5 - 2'
~~~
I think it would be helpful to abstract away the direct use of stdin/stdout constants into variables (that default to stdin/stdout) such that a pty could be swapped in, allowing for a socket input source.

I think it would also be helpful to allow for an event loop environment via a character reader API (reference http://www.delorie.com/gnu/docs/readline/rlman_41.html).
