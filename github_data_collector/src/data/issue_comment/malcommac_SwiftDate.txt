It would be great to have the same lib written in Kotlin and available for Android.
Rules could be the same for both OS and increase the amount of your users.



While I was testing something I was not sure if `Date().dateAt(.endOfDay)` and `Date().dateAtEndOf(.day)` produced the same result, so I tried comparing them like this

```swift
XCTAssertEqual(Date().dateAt(.endOfDay), Date().dateAtEndOf(.day))
```

Which produced the error

> XCTAssertEqual failed: ("2020-01-04 02:59:59 +0000") is not equal to ("2020-01-04 02:59:59 +0000")

Which seemed odd, using

```swift
XCTAssertEqual(Date().dateAt(.endOfDay).timeIntervalSince1970, Date().dateAtEndOf(.day).timeIntervalSince1970)
```

It shows the problem

> XCTAssertEqual failed: ("1578106799.0") is not equal to ("1578106799.999")

From what I looked trough, they don't use the same implementation, which does not seem like a good idea and can lead to unexpected problems.

(I realise that date comparison should be done using methods proper for that, but these two should not differ)
Hi,

when compiling with Linux I get this error (using version 6.1 and Swift 5):

```
TimeInterval+Formatter.swift:34:38: error: 'DateComponentsFormatter' is unavailable: Not supported in swift-corelibs-foundation
                public var zeroFormattingBehavior: DateComponentsFormatter.ZeroFormattingBehavior?
                                                   ^~~~~~~~~~~~~~~~~~~~~~~
Foundation.DateComponentsFormatter:2:12: note: 'DateComponentsFormatter' has been explicitly marked unavailable here
```

Seems to me that DateComponentsFormatter is not available for Linux (unfortunately, I couldn't find out if it‘s just not there yet or never will be).

Any idea how I can get around this?

`let dateString = "2019-12-30 00:00:00"`
`let dateInCurrentRegion = DateInRegion.init(date, format: "YYYY-MM-dd HH:mm:ss", region: .current)`
When I print it like:
`print(dateInCurrentRegion?.toFormat("YYYY-MM-dd HH:mm:ss"))`

The output is: **2021-12-30 00:00:00**

But I am expecting it to be:  **2019-12-30 00:00:00**
Weekday(```Convenience getter for the date's `weekday` component```) is not equal for date(2017-10-04 00:00:00 +0000) in 
iOS 12.3.1 => 3
iOS 13.3.1 => 4

Issue is reproducing only on devices
The intention of `cachedValues` to me seems to be to cache the deserialised JSON for faster access in subsequent calls.

This only ever seemed to be assigned to, not read from — and this assignment was causing me an EXC_BAD_ACCESS in my app.

This change simply returns the cached value if one is found. This not only prevents the crash in my app, but actually speeds up subsequent relative formatting.

Hi,

I am trying to have the exact date. When I print this `Date().description(with: .current)` it will show in the console this `"Saturday, November 16, 2019 at 1:10:12 AM Pacific Standard Time"` but if I print the following:

```
{abs_date='2019-11-16T09:12:51Z', rep_date='2019-11-16T01:12:51-08:00', region={calendar='gregorian', timezone='America/Los_Angeles', locale='en_US'}
  ▿ date : 2019-11-16 09:12:51 +0000
    - timeIntervalSinceReferenceDate : 595588371.396397
  ▿ region : {calendar='gregorian', timezone='America/Los_Angeles', locale='en_US'}
    ▿ calendar : gregorian (current)
      - identifier : gregorian
      - kind : "current"
      ▿ locale : Optional<Locale>
        ▿ some : en_US (current)
          - identifier : "en_US"
          - kind : "current"
      ▿ timeZone : America/Los_Angeles (current)
        - identifier : "America/Los_Angeles"
        - kind : "current"
        ▿ abbreviation : Optional<String>
          - some : "PST"
        - secondsFromGMT : -28800
        - isDaylightSavingTime : false
      - firstWeekday : 1
      - minimumDaysInFirstWeek : 1
  - customFormatter : nil
```

The data is correct, except the time, it is 1:13 am right now, not 9:13 am.

Please, what is the step to use the date correctly?

Thank you!

A native speaker of `zh-hant` fixed some translations for the relative time format `current`.