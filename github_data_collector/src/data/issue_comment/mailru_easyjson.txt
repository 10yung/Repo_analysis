GOPATH=C:\Users\dgorocho\Go
file located in C:\Users\dgorocho\Go\Src
running command easyjson -all fast.go produces error "Error parsing fast.go: file 'C:\Users\dgorocho\Go\Src\fast.go' is not in GOPATH"

![image](https://user-images.githubusercontent.com/39267894/69624437-57d00c00-104d-11ea-8922-8fb86f08b741.png)

I am reading a JSON response with a field t that is a unix epoch in milliseconds. Currently, my approach is to have a private variable in my response that is timestampMs and then a Time() function which does the conversion. I'd prefer if I could just have a Time field in my struct and tell easyjson to parse time.Time using my custom logic. Is this possible?
for the explanation, please refer to this PR https://github.com/go-redis/redis/pull/693

I have a struct with a _required_ field that is a map.  If an empty map is passed in, the decoder generates code that omits the field (ie. equivalent to `omitempty`).

Is there a way to force empty maps to be generated?
# Issue 

The `go/format` package doesn't sort the imports in the canonical form, like `goimports` does, which causes the autogenerated files by this tool being changed by the `goimports` tool (or failing the CI if `goimports` format is enforced there)

# Proposal

Use more strict `golang.org/x/tools/imports` package for formatting the output, [like `mockery` does, for example](https://github.com/vektra/mockery/blob/e78b021dcbb558a8e7ac1fc5bc757ad7c277bb81/mockery/generator.go#L635-L648), which would format also the imports and still produce a gofmt-compatible output.


Like: 
StreamUnmarshalJSON(reader io.Reader)
StreamMarshalJSON(reader io.Writer)

It may bring significant performance improvement while impl deserialize streamingly.

Thanks.
I have a branch that converts easyjson to be `types` oriented instead of `reflect` oriented.  This removes the need for a Go compiler, allows generating for main, and (my real goal) speeds up generation by about 2x.  It's obviously a non-trivial patchset and changes the public interface of `github.com/mailru/easyjson/gen`.

I would love to work with you all to get it merged, but I want to make sure that the above sounds ok before I go through the work to clean it up the rest of the way.  Interested?
I decided to make some benchmarks to compare few libraries. And results are shocked me.
Решил провести небольшие сравнительные тесты по скорости работы разных библиотек для Golang. Результаты меня, мягко говоря, шокировали. 

Easyjson в результате тестов оказался самый медленный при Marshal, причем даже стандартная библиотека encode/json (в тесте Benchmark_std_*) работает на маршал значительно быстрее (на 50%)
Так же он оказался медленнее старенького ffjson (в случае прегенерации кода и при не использовании вложенных структур, а типов).

### Что я делаю не так??? Может быть в коде что-то не то?

Тесты с пометкой Min - это minified json, у него убраны переносы строк и лишние пробелы. Full - это отформатированный json с отступами и переносами.

## Benchmark results

```
goos: windows
goarch: amd64
pkg: github.com/riftbit/protocol_benches

Benchmark_msgpack_vmihailenco_Marshal-8        	  191079	     31730 ns/op	  164080 B/op	       6 allocs/op
Benchmark_ffjson_Marshal_simple_pooling-8      	   13440	    446057 ns/op	  175394 B/op	       3 allocs/op
Benchmark_jsoniterator_Marshal_fast-8          	   12955	    470166 ns/op	  182647 B/op	       2 allocs/op
Benchmark_ffjson_Marshal_simple-8              	   12889	    464815 ns/op	  182091 B/op	       2 allocs/op
Benchmark_std_Marshal-8                        	   12679	    466598 ns/op	  183459 B/op	       2 allocs/op
Benchmark_jsoniterator_Marshal-8               	   12549	    476452 ns/op	  183039 B/op	       2 allocs/op
Benchmark_ffjson_Marshal_generated-8           	    9835	    596645 ns/op	  434371 B/op	    1502 allocs/op
Benchmark_easyjson_Marshal-8                   	    8823	    675847 ns/op	  174991 B/op	      16 allocs/op
Benchmark_easyjson_Marshal_lexer-8             	    8570	    679581 ns/op	  175119 B/op	      16 allocs/op

Benchmark_msgpack_vmihailenco_Unmarshal-8      	   14190	    428048 ns/op	  217744 B/op	    2914 allocs/op
Benchmark_ffjson_Unmarshal_Min_generated-8     	    8218	    737041 ns/op	  214990 B/op	    1010 allocs/op
Benchmark_ffjson_Unmarshal_Full_generated-8    	    7594	    784303 ns/op	  214991 B/op	    1010 allocs/op
Benchmark_easyjson_Unmarshal_Min-8             	    7406	    816904 ns/op	  320289 B/op	    1146 allocs/op
Benchmark_easyjson_Unmarshal_Min_lexer-8       	    7406	    820686 ns/op	  320289 B/op	    1146 allocs/op
Benchmark_easyjson_Unmarshal_Full-8            	    6184	    958279 ns/op	  320289 B/op	    1146 allocs/op
Benchmark_easyjson_Unmarshal_Full_lexer-8      	    6315	    966588 ns/op	  320289 B/op	    1146 allocs/op
Benchmark_jsoniterator_Unmarshal_Min-8         	    5606	   1061006 ns/op	  613877 B/op	    2816 allocs/op
Benchmark_jsoniterator_Unmarshal_Full-8        	    5308	   1143557 ns/op	  613877 B/op	    2816 allocs/op
Benchmark_jsoniterator_Unmarshal_Full_fast-8   	    5503	   1128289 ns/op	  603566 B/op	    2108 allocs/op
Benchmark_jsoniterator_Unmarshal_Min_fast-8    	    5824	   1071429 ns/op	  603566 B/op	    2108 allocs/op
Benchmark_std_Unmarshal_Min-8                  	    2702	   2174685 ns/op	  349665 B/op	    1659 allocs/op
Benchmark_ffjson_Unmarshal_Min_simple-8        	    2690	   2210781 ns/op	  349665 B/op	    1659 allocs/op
Benchmark_ffjson_Unmarshal_Full_simple-8       	    2271	   2639807 ns/op	  349666 B/op	    1659 allocs/op
Benchmark_std_Unmarshal_Full-8                 	    2238	   2572388 ns/op	  349665 B/op	    1659 allocs/op

PASS
ok  	github.com/riftbit/protocol_benches	174.960s
?   	github.com/riftbit/protocol_benches/structs	[no test files]
?   	github.com/riftbit/protocol_benches/vars	[no test files]
```

### Sources are available in repo (исходники доступны в репе):
https://github.com/riftbit/protocol_benches

### Исходник бенча для easyjson:
https://github.com/riftbit/protocol_benches/blob/master/bench_easyjson_test.go

### Исходник бенча для ffjson:
https://github.com/riftbit/protocol_benches/blob/master/bench_ffjson_test.go

### Исходник бенча для стандартной библиотеки:
https://github.com/riftbit/protocol_benches/blob/master/bench_std_test.go

### Структуры тут:
https://github.com/riftbit/protocol_benches/tree/master/structs

### Переменные откуда берется голый json: 
https://github.com/riftbit/protocol_benches/tree/master/vars
The `chromedp-gen` tool, which makes use of the raw code, always
encounters issues with slow builds. This adds a simple `sync.RWMutex` to
the Go module map package path cache variable that's causing problems.