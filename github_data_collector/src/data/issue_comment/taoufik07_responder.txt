Are there any good methods for to get path(strings including slashes) as an argument of route like the following flask's code?
```python
@app.route('/test/<path:arg>')
def example(arg):
    print(f'path is {arg}')
    ....

# /test/foo/bar => "path is foo/bar"
```

I could only come up with the following solution.
```python
import responder
responder.routes._CONVERTORS["path"] = (str, r".+")

@api.route('/test/{arg:path}')
def example(arg):
    print(f'path is {arg}')
    ....
```
I want to use responder with other async loop such as IoT uses fetching BLE GATT.
I usually use flask but that library is not asyncio friendly.
So flask replace more asyncio friendly library such as responder.
But I faced a problem that is where can I start other fetching main loop?
Responder invoke loop.run_until_comlete in the non-async function.
so I'm not clear to start other fetching method

The followibg is psuedo code.
I want use responder with this server code.
Please share me the way to use responder.
```
class BLEServer:
    async def run(self):
         while self.running:
             #Some fetching code invoking many async functions.

     def get(self, name):
         return self.data_fetched_at_async_run[name]
```


I am trying to split a server into multiple modules and I am running into troubles:

- I did put the example of the OpenAPI Schema Support example into the file rest/demo_api.py

- In order to get it working I had to start the responder server before importing that module.

```
import responder
api = responder.API()
from rest.demo_api import *
api.run()
```
At that point I can call the endpoints but the specs fail as marshmallow cannot properly bind back to the PetSchema class.

So my question is responder designed to split the server into multiple modules ? If yes what is the proper way so people would not run into the issues I am seeing?
Yesterday I updated to responder 2.0.3. In my route, I make use of the api attribute. This worked in the past. But after upgrading to version 2.0.0 it is always None.

I checked the implementation. The `__call__` method of `Route `in `routes.py` creates a new `Request` object without providing an api argument and the default in `models.py` is `None`.

Is this a intentional design change or a bug. Maybe I'm spotting the wrong piece of code. If this is an intentional change, what is the best way to access the api in a Route-class method?

I found a work around by adding my own middleware. 
Responder currently has class based views in order to specify handlers for specific HTTP methods. For example:
```python
@api.route('/')
class ExampleResource:
    def on_get(self, req, res):
        res.text = 'get!'
    def on_post(sef, req, res):
        res.text = f'post! {req.media()}'
```
It would be nice, however, if responder allowed for allowed HTTP methods to be specified via `@api.route()` for function endpoints:
```python
@api.route('/', methods = ['GET'])
def get_only(req, res):
    res.text = 'only a get!'
```
Addresses #274

Note: largely a replay of https://github.com/taoufik07/responder/pull/374 on top of `responder` v2.0.0

The PR adds an __init__ parameter reverse_proxy_route to prefix all routes, using the new Router class.

Notes:

    added make_route function to Router
        api.make_route checks that route's begin with "/"
        if reverse_proxy_path is not set, api.make_route returns the route unchanged

test cases :

    docs_route, openapi_route, static_route all function when reverse_proxy_path is set
    test incorrect reverse_proxy_path (can't have trailing "/")

A few implementation examples here;
https://github.com/graphql-python/graphql-ws

I suppose the already implemented WebSockets support would be a good fit for this.
I'm not sure if this is possible or how to approach it. Happy to contribute an example if someone can point me in the right direction. 
Following the test instructions on https://python-responder.org/en/latest/testing.html#building-and-testing-with-responder, the test takes 20-30 seconds.

If you don't provide a domain name, Responder's version Requests makes the hostname `;` and then tries to resolve it.  Since that's (hopefully!) not a real host, it fails to resolve and the developer has to wait for a timeout. 
For now the tests cover 87% of our code base, it would be cool if we can reach the 100% !

```
Name                              Stmts   Miss  Cover   Missing
---------------------------------------------------------------
responder/__init__.py                 2      0   100%
responder/__main__.py                 3      3     0%   1-4
responder/__version__.py              1      0   100%
responder/api.py                    351     51    85%   94, 166, 173, 191, 199-206, 271, 325, 393, 416-418, 429-431, 469, 476-478, 481, 493, 499, 513-521, 618, 658-661, 688-701, 704-706
responder/app.py                     12     12     0%   1-21
responder/background.py              34      4    88%   28-31
responder/cli.py                     18     14    22%   22-43
responder/core.py                     3      0   100%
responder/ext/__init__.py             1      0   100%
responder/ext/graphql.py             30      2    93%   35, 41
responder/formats.py                 58      2    97%   12, 51
responder/models.py                 200     13    94%   41-42, 53-55, 178-179, 214, 222, 228, 247, 252, 349
responder/routes.py                  51      2    96%   32, 40
responder/statics.py                  5      0   100%
responder/status_codes.py            17      0   100%
responder/templates/__init__.py       1      0   100%
---------------------------------------------------------------
TOTAL                               787    103    87%

```  