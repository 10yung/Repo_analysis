I want to adapt your code to my own project, but in code 
[WindowsCompositionSamples/SampleGallery/Samples/SDK/14393/ThumbnailLighting/ThumbnailLighting.xaml.cs](https://github.com/microsoft/WindowsCompositionSamples/blob/4086e727f08714bec3520ff1a1782c5cc822f650/SampleGallery/Samples/SDK%2014393/ThumbnailLighting/ThumbnailLighting.xaml.cs)
I feel confused about the code:
in **Page_loaded** event there is a call for **UpdateEffectBrush()**;
and then in **UpdateEffectBrush()** there is a call for **SetImageEffect(image)**
and then in **SetImageEffect** first Code:
**CompositionEffectBrush brush = _effectFactory.CreateBrush();**
problem is "_effectFactory" is an object without an instance.
Before this code I did not find any instantiations of this object.
Where did you complete the initialization before **Page_loaded**
Can you answer my confusion, Thank you!


## Issue Type
<!-- Please check one of the following with an “x” to indicate what type of issue you’re submitting-->
[x ] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  

## Current Behavior
I have used this sample: https://github.com/robmikh/VisualCaptureDemo
And the resulting image has some blur. I thought it had something to do with DPI (first tested on Surface Book 2 with 200% dpi). But even after I have set the DPI to 100% the blur is still present.

## Expected Behavior
Captured image is 100% same as source

## Steps to Reproduce (for bugs)
Start this sameple: https://github.com/robmikh/VisualCaptureDemo

##  Your Environment
* SDK #:  1903
* Operating System build # :  Windows 10 1903. Build 18362
* Visual Studio Version # : 16.4.0

<!-- Thanks for taking the time to file an issue. Someone from our team will take a look and get back to you as soon as possible. -->

## Issue Type
<!-- Please check one of the following with an “x” to indicate what type of issue you’re submitting-->
[ ] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  
[ ] Feature Request <!-- Please file a UserVoice request and include the link below https://wpdev.uservoice.com/forums/110705-universal-windows-platform/category/58517-xaml-controls-composition -->  
[ ] Sample request  
[ ] Documentation issue or request  
[*] Other – Please describe:   

## Question

I found it is a little pain to write code about drawing key-frame animation if it have a complex path, say curving, as I need to enter every single geometry point. Is there a specific class that enable devs to define a path which includes geometry data that enable the animation drawing along with those data so that we don't have to hard-code the geometry point one by one.

I did some research about Win2D and Composition and there are several "Path" related classes but I'm not sure whether those are referring the same "Path" as I do since they refer more about drawing the geometry shape.
https://stackoverflow.com/questions/49718377/dropshadow-with-image-blur-uwp

## Issue Type
<!-- Please check one of the following with an “x” to indicate what type of issue you’re submitting-->
[x ] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  

## Current Behavior
The first time I get the visual of a UIElement the size is always 0.  If I get the visual a second time in a separate method call then the size is correct.  And then it is correct on any following calls.  The enclosing method must finish.  Getting the visual twice in the same method doesn't work size is 0.  
 private void Getvisual()
        {
            string logtext = "";
            Visual Vis = ElementCompositionPreview.GetElementVisual(pp);
            logtext += $"[Page pp] Visual Size{Vis.Size.ToString()}" + "\n";
            tt.Text = logtext;
        }
## Expected Behavior
I expect the visual size to be correct the first time I get the visual using ElementCompositionPreview.GetElementVisual(xxx)

## Steps to Reproduce (for bugs)
Run the above method from an event method.  First time size is 0. Second time size is correct. And then always correct?

##  Your Environment
* SDK #:  1809
* Operating System build # :  Windows 10 1809
* Visual Studio Version # : 2019 16.1.6

<!-- Thanks for taking the time to file an issue. Someone from our team will take a look and get back to you as soon as possible. -->

This [article](https://docs.microsoft.com/en-us/windows/apps/desktop/modernize/visual-layer-in-desktop-apps) states "To do hit testing, you need to do bounds calculations by walking the visual tree yourself. " Traversing the visual tree is no problem. But how does one do hit testing on an individual `Visual`? Particularly with complex geometries, there seems to be no way to do it on `Visual`s that are not `UIElement`s  Am I missing something? Thanks!
<!-- Thanks for taking the time to file an issue. Someone from our team will take a look and get back to you as soon as possible. -->

## Issue Type
<!-- Please check one of the following with an “x” to indicate what type of issue you’re submitting-->
[x] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  
[ ] Feature Request <!-- Please file a UserVoice request and include the link below https://wpdev.uservoice.com/forums/110705-universal-windows-platform/category/58517-xaml-controls-composition -->  
[ ] Sample request  
[ ] Documentation issue or request  
[ ] Other – Please describe:   

## Current Behavior
<!-- If filing a bug, describe what happens instead of the expected behavior. Please include a screenshot or gif if applicable. -->
<!-- If suggesting a change/improvement, explain the difference from current behavior -->
I'm using CompositionGeometry (in my specific case lines) to draw some small animated icons within a ListView ItemTemplate.
Everything works great till I click on the items. At that point the app starts to lag till the ListViewItemPresenter pointer animations are fully executed.
This only happens with small shapes, in my case a 18x10px area.

## Expected Behavior
<!-- If filing a bug, tell us what expected/desired behavior is -->
<!-- If suggesting a change/improvement, tell us how it should work -->
The app shouldn't lag.

## Steps to Reproduce (for bugs)
<!-- Provide a link to a live example, or an unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1.  Draw some small geometries within a ListView ItemTemplate (in my case I'm using a 18x10px visual).
2.  Launch the app and click on a item containing a geometry visual.
3.  Notice the lag while pointer animations are being executed.

##  Your Environment
<!-- Provide details on relevant environment version numbers -->
* SDK #:  10.0.18362.0
* Operating System build # :  18362.86
* Visual Studio Version # : 16.0.3

The Visual Layer (composition api) is great framework for UI development, but can have a higher learning curve for new developers. You should consider putting together a series of videos to help newcomers, as was done with UWP:

[https://channel9.msdn.com/Series/Windows-10-development-for-absolute-beginners](https://channel9.msdn.com/Series/Windows-10-development-for-absolute-beginners)
<!-- Thanks for taking the time to file an issue. Someone from our team will take a look and get back to you as soon as possible. -->

## Issue Type
<!-- Please check one of the following with an “x” to indicate what type of issue you’re submitting-->
[ ] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  
[ ] Feature Request <!-- Please file a UserVoice request and include the link below https://wpdev.uservoice.com/forums/110705-universal-windows-platform/category/58517-xaml-controls-composition -->  
[ ] Sample request  
[ ] Documentation issue or request  
[ ] Other – Please describe:   

## UserVoice link
<!-- If requesting new functionality -->

## Current Behavior
<!-- If filing a bug, describe what happens instead of the expected behavior. Please include a screenshot or gif if applicable. -->
<!-- If suggesting a change/improvement, explain the difference from current behavior -->

## Expected Behavior
<!-- If filing a bug, tell us what expected/desired behavior is -->
<!-- If suggesting a change/improvement, tell us how it should work -->

## Steps to Reproduce (for bugs)
<!-- Provide a link to a live example, or an unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1.  
2.  
3.  

##  Your Environment
<!-- Provide details on relevant environment version numbers -->
* SDK #:  
* Operating System build # :  
* Visual Studio Version # : 

## Issue Type
[x] Bug Report <!-- Please search GitHub for a similar issue or PR before submitting -->  

## Current Behavior
MaterialCreator crashes when clicking the "+" button for "Add layer" or "Add light".

The error message is
```
System.NotImplementedException: The method or operation is not implemented.
   at MaterialCreator.LayerControl.LayerControl_obj1_Bindings.ProcessBindings(Object item, Int32 itemIndex, Int32 phase, Int32& nextPhase)
```

## Expected Behavior
Adding a layer or light without a crash

## Steps to Reproduce (for bugs)
<!-- Provide a link to a live example, or an unambiguous set of steps to reproduce this bug. Include code to reproduce, if relevant -->
1.  Clone this repo
2.  Retarget the MaterialCreator solution to the 17763 SDKs
3.  Run the MaterialCreator app
4.  Click the "+" button for "Add layer"

##  Your Environment
<!-- Provide details on relevant environment version numbers -->
* SDK #:  17763
* Operating System build # :  Windows 10 build 17763
* Visual Studio Version # : 15.9 Preview 3
