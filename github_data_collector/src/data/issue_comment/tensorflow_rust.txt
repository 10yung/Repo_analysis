Is there any issues with updating the prebuilt library to tensorflow 1.14 or 1.15 in terms of compatibility? 
OS: `Darwin Kernel Version 19.0.0: Wed Sep 25 20:18:50 PDT 2019; root:xnu-6153.11.26~2/RELEASE_X86_64`.

If add latest version (`0.14.0`) with `features = ["tensorflow_gpu"]` to `Cargo.toml`, most of times I get errors like
```
error: failed to run custom build command for `tensorflow-sys v0.17.0`
process didn't exit successfully: `/Users/oleg/Documents/tensor/target/debug/build/tensorflow-sys-50c9e60f7f8ecb02/build-script-build` (exit code: 101)
--- stdout
libtensorflow-sys/build.rs:119: binary_url = "https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-darwin-x86_64-1.13.1.tar.gz"
libtensorflow-sys/build.rs:123: base_name = "libtensorflow-gpu-darwin-x86_64-1.13.1"
libtensorflow-sys/build.rs:132: file_name = "/Users/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.17.0/target/libtensorflow-gpu-darwin-x86_64-1.13.1.tar.gz"

--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: InvalidInput, error: TarError { desc: "failed to iterate over archive", io: Custom { kind: InvalidInput, error: "invalid gzip header" } } }', src/libcore/result.rs:1165:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
```
or something similar (invalid gzip header, corrupt deflate stream etc). `cargo clean`, removing `./target` and cleaning `~/.cargo` cache don't help, it happens regularly.

But version `0.13.0` isn't available at all
```
error: failed to run custom build command for `tensorflow-sys v0.16.0`
Caused by:
  process didn't exit successfully: `/Users/oleg/Documents/tensor/target/debug/build/tensorflow-sys-ac1a44ddb802a9bd/build-script-build` (exit code: 101)
--- stdout
libtensorflow-sys/build.rs:109: binary_url = "https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-darwin-x86_64-1.13.1.tar.gz"
libtensorflow-sys/build.rs:113: base_name = "libtensorflow-gpu-darwin-x86_64-1.13.1"
libtensorflow-sys/build.rs:122: file_name = "/Users/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.16.0/target/libtensorflow-gpu-darwin-x86_64-1.13.1.tar.gz"
--- stderr
thread 'main' panicked at 'Unexpected response code 404 for https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-darwin-x86_64-1.13.1.tar.gz', /Users/oleg/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.16.0/build.rs:137:13
```

I'm kind of aware you need to build any modules under the contrib namespace and load them with something like `TF_LoadLibrary` but it would be helpful if there was a guide on building one of the contrib modules and loading it as currently users looking to do this are basically on their own
cargo did not build the crate and send the below mentioned messages
error: failed to run custom build command for `tensorflow-sys v0.17.0`

Caused by:
  process didn't exit successfully: `/media/maher/extra/rust/rust_test_code/tensorflow/target/debug/build/tensorflow-sys-417a51948725d608/build-script-build` (exit code: 101)
--- stdout
libtensorflow-sys/build.rs:119: binary_url = "https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-cpu-linux-x86_64-1.13.1.tar.gz"
libtensorflow-sys/build.rs:123: base_name = "libtensorflow-cpu-linux-x86_64-1.13.1"
libtensorflow-sys/build.rs:132: file_name = "/home/maher/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.17.0/target/libtensorflow-cpu-linux-x86_64-1.13.1.tar.gz"

--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Custom { kind: InvalidInput, error: TarError { desc: "failed to unpack `/home/maher/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.17.0/target/libtensorflow-cpu-linux-x86_64-1.13.1/lib/libtensorflow_framework.so`", io: Custom { kind: InvalidInput, error: TarError { desc: "failed to unpack `./lib/libtensorflow_framework.so` into `/home/maher/.cargo/registry/src/github.com-1ecc6299db9ec823/tensorflow-sys-0.17.0/target/libtensorflow-cpu-linux-x86_64-1.13.1/lib/libtensorflow_framework.so`", io: Custom { kind: InvalidInput, error: "corrupt deflate stream" } } } } }', src/libcore/result.rs:1165:5
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.
I'd like to port [some python code](https://github.com/deezer/spleeter/blob/master/spleeter/utils/estimator.py#L23) which is using the [tf.estimator.Estimator](https://www.tensorflow.org/guide/estimator) API.

As I understand this API doesn't have Rust bindings yet.
Please add xor example
if is possible with save/load mode, save data train and test
Is it possible to load the `meta_graph_def: Vec<u8>` object similar to the python API? Ideally looking to be able to get the `tag_set`, `signature_defs` input / output nodes from a saved model similar to the `saved_model_cli` tool 

https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/tools/saved_model_utils.py#L90 

`saved_model_cli show --dir \
/tmp/saved_model_dir --tag_set serve --signature_def serving_default`

This would be useful to not need to apriori identify the input / output nodes in order to use `graph.operation_by_name_required` but instead derive them entirely in rust ? 

I am using Windows 10, and have downloaded all the proper libraries to my knowledge. I have done a ton of searching through google and I am unable to find a solution to this issue. Here is the log: 
```
  Compiling tensorflow-sys v0.16.0
error: failed to run custom build command for `tensorflow-sys v0.16.0`

Caused by:
  process didn't exit successfully: `C:\Users\<USER>\Desktop\PixelGame\target\debug\build\tensorflow-sys-34a07f4d54933726\build-script-build` (exit code: 101)
--- stdout
libtensorflow-sys/build.rs:175: output = "C:\\Users\\<USER>\\Desktop\\PixelGame\\target\\debug\\build\\tensorflow-sys-cfa4ae906321c9db\\out"
libtensorflow-sys/build.rs:177: source = "C:\\Users\\<USER>\\.cargo\\registry\\src\\github.com-1ecc6299db9ec823\\tensorflow-sys-0.16.0\\target/source-v1.13.1"
libtensorflow-sys/build.rs:179: lib_dir = "C:\\Users\\<USER>\\Desktop\\PixelGame\\target\\debug\\build\\tensorflow-sys-cfa4ae906321c9db\\out\\lib-v1.13.1"
libtensorflow-sys/build.rs:183: Creating directory "C:\\Users\\<USER>\\Desktop\\PixelGame\\target\\debug\\build\\tensorflow-sys-cfa4ae906321c9db\\out\\lib-v1.13.1"
libtensorflow-sys/build.rs:187: framework_library_path = "C:\\Users\\<USER>\\Desktop\\PixelGame\\target\\debug\\build\\tensorflow-sys-cfa4ae906321c9db\\out\\lib-v1.13.1\\libtensorflow_framework.so"
libtensorflow-sys/build.rs:189: library_path = "C:\\Users\\<USER>\\Desktop\\PixelGame\\target\\debug\\build\\tensorflow-sys-cfa4ae906321c9db\\out\\lib-v1.13.1\\libtensorflow.so"
libtensorflow-sys/build.rs:275: Executing "bazel" "version"
libtensorflow-sys/build.rs:277: Command "bazel" "version" finished successfully
libtensorflow-sys/build.rs:200: framework_target_path = "tensorflow/libtensorflow_framework.so"
libtensorflow-sys/build.rs:202: target_path = "tensorflow/libtensorflow.so"
libtensorflow-sys/build.rs:259: Executing "bash" "-c" "yes \'\'|./configure"

--- stderr
thread 'main' panicked at 'called `Result::unwrap()` on an `Err` value: Os { code: 2, kind: NotFound, message: "The system cannot find the file specified." }', src\libcore\result.rs:999:5
stack backtrace:
   0: backtrace::backtrace::trace_unsynchronized
             at C:\Users\appveyor\.cargo\registry\src\github.com-1ecc6299db9ec823\backtrace-0.3.29\src\backtrace\mod.rs:66
   1: std::sys_common::backtrace::_print
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\sys_common\backtrace.rs:47
   2: std::sys_common::backtrace::print
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\sys_common\backtrace.rs:36
   3: std::panicking::default_hook::{{closure}}
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:198
   4: std::panicking::default_hook
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:212
   5: std::panicking::rust_panic_with_hook
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:475
   6: std::panicking::continue_panic_fmt
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:382
   7: std::panicking::rust_begin_panic
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:309
   8: core::panicking::panic_fmt
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libcore\panicking.rs:85
   9: core::result::unwrap_failed<std::io::error::Error>
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\src\libcore\macros.rs:18
  10: core::result::Result<std::process::ExitStatus, std::io::error::Error>::unwrap<std::process::ExitStatus,std::io::error::Error>
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\src\libcore\result.rs:800
  11: build_script_build::run<closure>
             at .\build.rs:260
  12: build_script_build::build_from_src
             at .\build.rs:218
  13: build_script_build::main
             at .\build.rs:59
  14: std::rt::lang_start::{{closure}}<()>
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\src\libstd\rt.rs:64
  15: std::rt::lang_start_internal::{{closure}}
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\rt.rs:49
  16: std::panicking::try::do_call<closure,i32>
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:294
  17: panic_unwind::__rust_maybe_catch_panic
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libpanic_unwind\lib.rs:82
  18: std::panicking::try
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panicking.rs:273
  19: std::panic::catch_unwind
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\panic.rs:388
  20: std::rt::lang_start_internal
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\/src\libstd\rt.rs:48
  21: std::rt::lang_start<()>
             at /rustc/0dc9e9c10ca6dc78cba8b9f9b15038c977b10a77\src\libstd\rt.rs:64
  22: main
  23: invoke_main
             at d:\agent\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:78
  24: __scrt_common_main_seh
             at d:\agent\_work\1\s\src\vctools\crt\vcstartup\src\startup\exe_common.inl:288
  25: BaseThreadInitThunk
  26: RtlUserThreadStart
```
Does anyone know why this might happen?
Its only a few targets that require large amounts of memory so its faster to build and crash then to start at --jobs=1 as far as i can tell.