The following example from .readme will not return any results. Are there any plans to update this library so it is compatible with latest versions of backbone???

Thanks,
Justin

```
MyCollection.query({
    $or:[
        {title:"News"},
        {title:"About"}
    ]
});
// Returns all models with the title "News" or "About"

``
```

Please add support for bower.

I admit to not being very familiar with requirejs but I'm running into some issues trying to load up backbone_query. I'm using backbone boilerplate as a base and I'm unable to get Backbone.QueryCollection to be defined. Is there any pointers? 

Very similar to [Query Engine](https://github.com/bevry/query-engine) perhaps we should team up :) What are your thoughts?

Here is a comparison that I've done up:
- [Backbone Query](https://github.com/davidgtonge/backbone_query)
  - good readme documentation
  - runs on node.js and in the browser
  - supports NoSQL queries (similar to MongoDB etc)
- [Query Engine](https://github.com/bevry/query-engine)
  - includes live interactive demo
  - source-code documentation only
  - runs on node.js and in the browser
  - supports NoSQL queries (similar to MongoDB etc)
  - supports filters (applying a filter function to a collection)
  - supports search strings (useful for turning search input fields into useful queries)
  - supports pills for search strings (e.g. `author:ben priority:important`)
  - supports optional live collections (when a model is changed, added or removed, it can automatically be tested against the collections queries, filters, and search string, if it fails, remove it from the collection)
  - supports parent and child collections (when a parent collection has a model removed, it is removed from the child collection too, when a parent collection has a model added or changed, it is retested against the child collection)

First off, this project is awesome.

I have data that looks like this:

```
courses = [
    {
        title: "Biology",
        assignments: [
            {
                done: false,
                due: "2012-03-05T05:00:00.000Z",
             },
            {
                done: false,
                due: "2012-03-05T05:00:00.000Z",
             },
            {
                done: true,
                due: "2012-03-06T05:00:00.000Z",
             }
        ]
    },
    {
        title: "Math",
        assignments: [
            {
                done: true,
                due: "2012-03-05T05:00:00.000Z",
             },
            {
                done: false,
                due: "2012-03-03T05:00:00.000Z",
             },
            {
                done: true,
                due: "2012-03-06T05:00:00.000Z",
             }
        ]
    }

```

So basically a collection of courses which have a list of assignments.

I'm using backbone-relational to model this; courses is a QueryCollection, the individual course model is a RelationalModel, and the individual assignment model is a RelationalModel as well.

The query I want to do is to find all of the assignments (in all courses) that are due within a specific range and are not done.

From the examples (and being somewhat familiar with Mongo -- it's what I use on the server) I think that would look like this:

```
courses.query({
    assignments: {
      $elemMatch: {
        "done": true,
        "date": "2012-03-05T05:00:00.000Z" 
      }
    }
  });
```

(I'm just matching one specific date, not a range, for simplicity purposes).

The problem is that the above query does not return anything. It seems as if it's not applying the $elemMatch criteria to the 'assignments' field of each course.

Any idea why that might be? Feel free to call me names if I'm doing something incredibly dumb here -- my brain is a bit fried from staring at my computer all day ;)

Thanks!
