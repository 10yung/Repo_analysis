
A way to handle longer text. Ability to enable multi-line and choose line a lineBreakMode.
On iOS 11 there are increased warnings related to KVO and the KVO code in DGRunkeeperSwitch.swift doesn't work. I get this assertion failure
[MyTests.TableViewCellTest testOutlets] : failed: caught "NSUnknownKeyException", "[<DGRunkeeperSwitch.DGRunkeeperSwitch 0x7feec8220100> addObserver:<DGRunkeeperSwitch.DGRunkeeperSwitch 0x7feec8220100> forKeyPath:@"selectedBackgroundView.frame" options:1 context:0x0] was sent to an object that is not KVC-compliant for the "selectedBackgroundView" property."

I fixed this problem as follows:

In finishInit I changed to this

selectedBackgroundView.addObserver(self, forKeyPath: "frame", options: .new, context: nil)

In observeValue forKeyPath I changed to this

override open func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) {
        if let view = object as? UIView {
            if keyPath == "frame" && view == selectedBackgroundView {
                titleMaskView.frame = selectedBackgroundView.frame
            }
        }
    }

and

    deinit {
        selectedBackgroundView.removeObserver(self, forKeyPath: "frame")
    }


with swift 4 does not work
This PR closes #45.

With this PR is it possible to do:
```
runkeeperSwitch.setSelectedIndex(-1, animated: true)
```
to unselect all the selected items.

I don't know if this is the best approach, please let me know what do you think. 
Something like this:

<img width="281" alt="screen shot 2017-09-07 at 19 15 51" src="https://user-images.githubusercontent.com/631739/30178499-0b068ad6-9401-11e7-896f-db9ada2aeb41.png">

In order for the control to have a flexible width and work with autolayout. You need to add

runkeeperSwitch2.autoresizingMask = [.flexibleWidth]

This is documented in the example project but not in the README. I can't the only one that missed this first time around.

Happy to make a PR updating the README
Would be great if Carthage was supported. We don't use Cocoapods at my company.
```runkeeperSwitch.addTarget(self, action: #selector(ViewController.switchValueDidChange(sender:)), for: .touchUpInside)```

target-action mechanism will not work because of added UITapGestureRecognizer to control