to avoid where to put those files and decreases build size. already uploaded images for the maps vignette
I am trying to install the package in Manjaro XFCE x86_64. I always received the following error:

```
...
** testing if installed package can be loaded
sh: line 1: 14143 Trace/breakpoint trap   (core dumped) '/usr/lib64/R/bin/R' --no-save --slave 2>&1 < '/tmp/RtmpOFVQUU/file373c6d4c704d'


#
# Fatal error in ../src/platform-linux.cc, line 776
# CHECK_EQ(0, result) failed
#   Expected: 0
#   Found: 22
#

ERROR: loading failed
...
```

I already have the Arch packages `gdal`, `geos`, and `proj`, as well as `udunits`.

<details> <summary><strong>Session Info</strong></summary>

```r
R version 3.5.2 (2018-12-20)
Platform: x86_64-pc-linux-gnu (64-bit)
Running under: Manjaro Linux

Matrix products: default
BLAS: /usr/lib/libopenblasp-r0.3.4.so
LAPACK: /usr/lib/liblapack.so.3.8.0

locale:
 [1] LC_CTYPE=en_PH.UTF-8       LC_NUMERIC=C               LC_TIME=en_PH.UTF-8       
 [4] LC_COLLATE=en_PH.UTF-8     LC_MONETARY=en_PH.UTF-8    LC_MESSAGES=en_PH.UTF-8   
 [7] LC_PAPER=en_PH.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
[10] LC_TELEPHONE=C             LC_MEASUREMENT=en_PH.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_3.5.2 tools_3.5.2    yaml_2.2.0 
```
</details>

There does not seem to be control over the number of digits output when passing a data frame to `geojson_list()`. No matter how many significant digits there are in the `lon` and `lat` columns, the resulting list has at most five digits to the right of the decimal, e.g. -77.11739, 38.94512.

I see from #96 that digits were thought about at some point, but I'm not seeing how this translates into `geojson_list()`. What am I missing?

Thanks.

<details> <summary><strong>Session Info</strong></summary>

```r
> devtools::session_info()
Session info -----------------------------------------------------------------------------------
 setting  value                       
 version  R version 3.4.2 (2017-09-28)
 system   x86_64, darwin15.6.0        
 ui       RStudio (1.1.383)           
 language (EN)                        
 collate  en_US.UTF-8                 
 tz       Europe/Copenhagen           
 date     2018-08-20                  

Packages ---------------------------------------------------------------------------------------
 package      * version    date       source                             
 assertthat     0.2.0      2017-04-11 CRAN (R 3.4.0)                     
 base         * 3.4.2      2017-10-04 local                              
 bindr          0.1.1      2018-03-13 cran (@0.1.1)                      
 bindrcpp     * 0.2.2      2018-03-29 cran (@0.2.2)                      
 citycastgtn  * 0.0.0.9000 <NA>       local                              
 cli            1.0.0      2017-11-05 CRAN (R 3.4.2)                     
 commonmark     1.4        2017-09-01 CRAN (R 3.4.1)                     
 compiler       3.4.2      2017-10-04 local                              
 crayon         1.3.4      2017-09-16 CRAN (R 3.4.1)                     
 curl           3.0        2017-10-06 CRAN (R 3.4.2)                     
 datasets     * 3.4.2      2017-10-04 local                              
 devtools       1.13.4     2017-11-09 CRAN (R 3.4.2)                     
 digest         0.6.15     2018-01-28 cran (@0.6.15)                     
 dplyr          0.7.6      2018-06-29 cran (@0.7.6)                      
 foreign        0.8-69     2017-06-22 CRAN (R 3.4.2)                     
 geojson        0.2.0      2017-11-08 CRAN (R 3.4.2)                     
 geojsonio      0.5.0.9100 2018-03-22 Github (ropensci/geojsonio@5c39fe7)
 glue           1.3.0      2018-07-17 cran (@1.3.0)                      
 graphics     * 3.4.2      2017-10-04 local                              
 grDevices    * 3.4.2      2017-10-04 local                              
 grid           3.4.2      2017-10-04 local                              
 hms            0.3        2016-11-22 CRAN (R 3.4.0)                     
 httr           1.3.1      2017-08-20 CRAN (R 3.4.1)                     
 jqr            1.0.0      2017-09-28 CRAN (R 3.4.2)                     
 jsonlite       1.5        2017-06-01 CRAN (R 3.4.0)                     
 jsonvalidate   1.0.0      2016-06-13 CRAN (R 3.4.0)                     
 lattice        0.20-35    2017-03-25 CRAN (R 3.4.2)                     
 lazyeval       0.2.1      2017-10-29 CRAN (R 3.4.2)                     
 lubridate      1.7.4      2018-04-11 CRAN (R 3.4.4)                     
 magrittr     * 1.5        2014-11-22 CRAN (R 3.4.0)                     
 maptools       0.9-2      2017-03-25 cran (@0.9-2)                      
 memoise        1.1.0      2017-04-21 CRAN (R 3.4.0)                     
 methods      * 3.4.2      2017-10-04 local                              
 pillar         1.1.0      2018-01-14 cran (@1.1.0)                      
 pkgconfig      2.0.1      2017-03-21 CRAN (R 3.4.0)                     
 purrr          0.2.4      2017-10-18 CRAN (R 3.4.2)                     
 R6             2.2.2      2017-06-17 CRAN (R 3.4.0)                     
 Rcpp           0.12.18    2018-07-23 cran (@0.12.18)                    
 readr          1.1.1      2017-05-16 CRAN (R 3.4.0)                     
 rgdal          1.2-18     2018-03-17 cran (@1.2-18)                     
 rgeos          0.3-26     2017-10-31 cran (@0.3-26)                     
 RJSONIO        1.3-0      2014-07-28 CRAN (R 3.4.0)                     
 rlang          0.2.1.9000 2018-07-30 Github (r-lib/rlang@d97e73d)       
 roxygen2       6.0.1      2017-02-06 CRAN (R 3.4.0)                     
 rstudioapi     0.7        2017-09-07 CRAN (R 3.4.1)                     
 sp             1.3-1      2018-06-05 cran (@1.3-1)                      
 stats        * 3.4.2      2017-10-04 local                              
 stringi        1.2.2      2018-05-02 cran (@1.2.2)                      
 stringr        1.3.1      2018-05-10 cran (@1.3.1)                      
 tibble         1.4.2      2018-01-22 CRAN (R 3.4.3)                     
 tidyr          0.8.0      2018-01-29 cran (@0.8.0)                      
 tidyselect     0.2.4      2018-02-26 cran (@0.2.4)                      
 tools          3.4.2      2017-10-04 local                              
 utf8           1.1.3      2018-01-03 cran (@1.1.3)                      
 utils        * 3.4.2      2017-10-04 local                              
 V8             1.5        2017-04-25 CRAN (R 3.4.0)                     
 withr          2.1.2      2018-05-02 Github (jimhester/withr@79d7b0d)   
 xml2           1.2.0      2018-01-24 cran (@1.2.0)                      
 yaml           2.1.19     2018-05-01 cran (@2.1.19)  
```
</details>

arose from https://stackoverflow.com/questions/50240935/removing-brackets-from-ends-of-geojson-in-r

With the `bad.txt` file below, which contains JSON, rgdal fails without a helpful message:

```r
library(rgdal)
rgdal::readOGR("bad.txt", rgdal::ogrListLayers("bad.txt"))
#> Error in rgdal::ogrListLayers("bad.txt") : Cannot open data source
# sf similarly doesn't give a helpful error
sf::st_read("bad.txt")
#> Cannot open data source /Users/sckott/github/ropensci/geojsonio/bad.txt
#> Error in CPL_read_ogr(dsn, layer, as.character(options), quiet, type,  :
#>   Open failed.
```

With `good.txt` it works fine:

```r
rgdal::readOGR("good.txt", rgdal::ogrListLayers("good.txt"))
#> OGR data source with driver: GeoJSON
#> Source: "/Users/sckott/github/ropensci/geojsonio/good.txt", layer: "OGRGeoJSON"
#> with 1 features
#> It has 51 fields
#> An object of class "SpatialPolygonsDataFrame"
#> Slot "data":
#> ...
# sf works fine with good data
sf::st_read("good.txt")
```

Options:

- Use our pkg `geojsonlint` to lint json to attempt to make sure the json is valid geojson
- don't do anything - check on a case by case basis as users report errors? and could document that users should check that their GeoJSON is valid.
- any others?

If we use `geojsonlint`

```r
# good (should all be TRUE, can check to see why hint is not working)
geojsonlint::geojson_hint(as.location('good.txt'))
#> [1] FALSE
geojsonlint::geojson_lint(as.location('good.txt'))
#> [1] TRUE
geojsonlint::geojson_validate(as.location('good.txt'))
#> [1] TRUE

# bad (should all be FALSE)
geojsonlint::geojson_hint(as.location('bad.txt'))
#> [1] FALSE
geojsonlint::geojson_lint(as.location('bad.txt'))
#> [1] FALSE
geojsonlint::geojson_validate(as.location('bad.txt'))
#> [1] FALSE
```

bad
[bad.txt](https://github.com/ropensci/geojsonio/files/1989398/bad.txt)
good
[good.txt](https://github.com/ropensci/geojsonio/files/1989396/good.txt)
#86  is doing for `geojson_json` - need to do for remainder of fxns, should be:

- [ ] `geojson_list`
Not for addressing now, but for GDAL >= 2.2 there is a new flag `RFC7946` to enforce the new geojson standard (including automatic reprojection to WGS84 and enforcing the right-hand rule). [See here](http://www.gdal.org/drv_geojson.html). We could rely on that more heavily.
There may be a way to avoid the round trip to disk in `geojson_rw` for converting `Spatial` objects to `geojson`, but I haven't quite been able to make it work.

The key: you can write to `stdout` with `rgdal::writeOGR`:

``` r
library(rgdal)
cities <- readOGR(system.file("vectors", package = "rgdal")[1], "cities")
writeOGR(cities[1:10,], "/vsistdout/", "cities", driver="GeoJSON")
```

But I can't figure out a way to capture the output. I've tried various combinations of `sink()`, `textConnection()`, and `capture.output()` but it's eluded me so far...
