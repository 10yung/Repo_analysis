my workflow requires me to type in the password and then type in the number '1' to signify that I want a Duo push notification. Is there any easy way to support this?
Using Python 3.6 with Paramiko 2.6.0

I have the following snippet of code:

```
 def _return_ssh_key(self):
    agent_key = paramiko.Agent().get_keys()
    if len(agent_key) == 0:
        print('No SSH keys loaded into SSH agent')
        keyfile = input('Enter full path to SSH key: ')
        try:
            return paramiko.RSAKey.from_private_key_file(keyfile, getpass.getpass('Enter SSH key passphrase: '))
        except paramiko.ssh_exception.SSHException:
            print('Your private key passphrase is incorrect')
    else:
        return agent_key[0]

def another_func()
       remote_channel = self.ssh_client.get_transport().open_channel(
            'direct-tcpip', (devicename, 22), ('127.0.0.1', 0))
        trans = paramiko.Transport(remote_channel)
        trans.start_client()
        self.sshKey = self.sshKey or self._return_ssh_key()
        trans.auth_publickey(username, self.sshKey)
```
This code fails at the line

`trans.auth_publickey(username, self.sshKey)`

With the error:

> Traceback (most recent call last):
> File "paramiko/transport.py", line 2109, in run
> handler(self.auth_handler, m)
> File "paramiko/auth_handler.py", line 298, in _parse_service_accept
> sig = self.private_key.sign_ssh_data(blob)
> File "paramiko/agent.py", line 418, in sign_ssh_data
> raise SSHException("key cannot be used for signing")
> paramiko.ssh_exception.SSHException: key cannot be used for signing

Only when running this threaded, and when I try to connect to more than 3 devices at a time. if I run them serially, it works fine and I can auth to the devices with the same key. This is clearly some threading issue, but I cant determine why its failing only in parallel. Given that it worked threaded when a smaller number of threads, I suspect its some issue connecting to the SSH agent to verify the key? No idea. Any help would be greatly appricated
openssl adds "Bag Attributes" to private keys extracted from pfx, Paramiko fails to parse these keys. These used to work long ago, not sure which paramiko release.
[bagkey.pem.zip](https://github.com/paramiko/paramiko/files/4072647/bagkey.pem.zip)


```sh-session
$ openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365
$ openssl pkcs12 -export -in cert.pem -inkey key.pem -out output.pfx
$ openssl pkcs12 -in output.pfx -nocerts -nodes -out bagkey.pem
```

```python
import paramiko

with open("bagkey.pem") as f:
    key = paramiko.RSAKey.from_private_key(f)
```

```sh-session
$ python keybag.py
Traceback (most recent call last):
  File "keybag.py", line 4, in <module>
    key = paramiko.RSAKey.from_private_key(f)
  File "/private/tmp/venv/lib/python3.7/site-packages/paramiko/pkey.py", line 256, in from_private_key
    key = cls(file_obj=file_obj, password=password)
  File "/private/tmp/venv/lib/python3.7/site-packages/paramiko/rsakey.py", line 52, in __init__
    self._from_private_key(file_obj, password)
  File "/private/tmp/venv/lib/python3.7/site-packages/paramiko/rsakey.py", line 179, in _from_private_key
    data = self._read_private_key("RSA", file_obj, password)
  File "/private/tmp/venv/lib/python3.7/site-packages/paramiko/pkey.py", line 324, in _read_private_key
    raise SSHException("not a valid {} private key file".format(tag))
paramiko.ssh_exception.SSHException: not a valid RSA private key file
```
I could not catch any exception when raising an error because of timeout

try:
        stdin, stdout, stderr = ssh.exec_command(cmd, bufsize=-1, timeout=timeout,)
    except paramiko.PipeTimeout:
        logging.info("*------------------------------- Command Error >>> %s" % cmd)
        return False
    except Exception:
        logging.info("*------------------------------- Command Error >>> %s" % cmd)
        return False
    except socket.timeout as e:
        logging.info("*------------------------------- Command Error >>> %s" % cmd)
        return False
    except paramiko.SSHException:
        logging.info("*------------------------------- Command Error >>> %s" % cmd)
        return False


to recreate bug:
pip install vorta
rm ~/.ssh/.known_hosts.lock
touch ~/.ssh/.known_hosts.lock
vorta -f

Traceback (most recent call last):
  File "/opt/anaconda/anaconda3/bin/vorta", line 10, in <module>
    sys.exit(main())
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/__main__.py", line 40, in main
    app = VortaApp(sys.argv, single_app=True)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/application.py", line 59, in __init__
    self.open_main_window_action()
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/application.py", line 80, in open_main_window_action
    self.main_window = MainWindow(self)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/views/main_window.py", line 37, in __init__
    self.repoTab = RepoTab(self.repoTabSlot)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/views/repo_tab.py", line 55, in __init__
    self.init_ssh()
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/views/repo_tab.py", line 88, in init_ssh
    keys = get_private_keys()
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/vorta/utils.py", line 74, in get_private_keys
    parsed_key = key_format.from_private_key_file(key_file)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/paramiko/pkey.py", line 235, in from_private_key_file
    key = cls(filename=filename, password=password)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/paramiko/rsakey.py", line 55, in __init__
    self._from_private_key_file(filename, password)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/paramiko/rsakey.py", line 175, in _from_private_key_file
    data = self._read_private_key_file("RSA", filename, password)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/paramiko/pkey.py", line 308, in _read_private_key_file
    data = self._read_private_key(tag, f, password)
  File "/opt/anaconda/anaconda3/lib/python3.6/site-packages/paramiko/pkey.py", line 320, in _read_private_key
    m = self.BEGIN_TAG.match(lines[start])
IndexError: list index out of range
Segmentation fault (core dumped)
I'm using open_sftp() to open the file on the remote server and then display the obtained content on the web. The whole process is ok, but when I open the file of about 30M, the web interface will have a long response time. During this period, if I close the web page and reopen the link, there will be: Paramiko. Ssh_exception.SSHException: Server connection dropped, after which OSError will always occur: Socket is closed. Has anyone ever encountered such a problem? I need help. Thank you
The following code:
```
client = paramiko.SSHClient()
client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
client.connect(host['host_226']['hostname'], host['host_226']['port'], host['host_226']['username'], host['host_226']['password'], compress=True, timeout=65536)
sftp_client = client.open_sftp()
class Get_log():
    def __init__(self,url):
        self.url = url
    def get_log(self):
        log = sftp_client.open(self.url,'rb')
        log_list = []
        for line in log:
            try:
                line = line.decode('GBK')
            except UnicodeDecodeError:
                line = line.decode('GB18030')
            log_list.append(line)
        log.close()
        return ''.join(log_list)
```
I noticed a typo in a log message. Please advise if I need to add anything to the changelog or do any other admin.
I am implementing an SSH server that handles custom global requests. Currently, it is not easy to check whether the client wants reply because Paramiko handles the response logic without exposing the info to `ServerInterface`. I want to do check the “want reply” argument and do things accordingly. Could you somehow expose the “want reply” argument to `ServerInterface`?
This method makes it easier and more obvious to use a private keys in a str objects without having to first make a file like object.
- It seems fairly reasonable to be able to pass a timeout to this method (See: https://github.com/paramiko/paramiko/pull/382).