#### Describe your issue

I have mostly copied the 710 example to use SCAF, when I test it with the camel_b.obj (the one also shown in the tutorial page at SCAF section) it works fine, but when I try to use other objects (even very simple ones) it does either of 2 things: 
1) it crashes at line 13 caused by line 10 returning an empty all_bounds array, making so that primary_bound is not valid.
2) crashes at line 41 with "Error: Numerical Issue"



On top of this on certain meshes it works but the output is not what I might expect 
[mesh.zip](https://github.com/libigl/libigl/files/4072091/mesh.zip) 

Any idea on what am I doing wrong?

```
typedef Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> ScafVertices;
typedef Eigen::Matrix<int, Eigen::Dynamic, Eigen::Dynamic, Eigen::RowMajor> ScafFaces;
void SimplicialComplexAugmentation::calculateBijectiveMap(const ScafVertices &vertices, const ScafFaces &faces, ScafVertices &out_vertices, const igl::MappingEnergyType type, const int solver_iterations_count, const float uv_scale)
{
    igl::SCAFData data;
    Eigen::MatrixXd bounds_uv, uv_init;
    Eigen::VectorXd double_areas;
    igl::doublearea(vertices, faces, double_areas);
    std::vector<std::vector<int>> all_bounds;
    igl::boundary_loop(faces, all_bounds);
    // Heuristic primary boundary choice: longest
    auto primary_bound = std::max_element(all_bounds.begin(), all_bounds.end(), [](const std::vector<int> &a, const std::vector<int> &b) { return a.size()<b.size(); });
    Eigen::VectorXi bounds = Eigen::Map<Eigen::VectorXi>(primary_bound->data(), static_cast<Eigen::Index>(primary_bound->size()));
    igl::map_vertices_to_circle(vertices, bounds, bounds_uv);
    bounds_uv *= sqrt(double_areas.sum() / (2 * igl::PI));
    if (all_bounds.size() == 1)
    {
      if (bounds.rows() == vertices.rows()) // case: all vertex on boundary
      {
        uv_init.resize(vertices.rows(), 2);
        for (int i = 0; i < bounds.rows(); i++)
        {
          uv_init.row(bounds(i)) = bounds_uv.row(i);
        }
      }
      else
      {
        igl::harmonic(vertices, faces, bounds, bounds_uv, 1, uv_init);
        if (igl::flipped_triangles(uv_init, faces).size() != 0)
        {
            igl::harmonic(faces, bounds, bounds_uv, 1, uv_init); // fallback uniform laplacian
        }
      }
    }
    else
    {
      // if there is a hole, fill it and erase additional vertices.
      all_bounds.erase(primary_bound);
      Eigen::MatrixXi F_filled;
      igl::topological_hole_fill(faces, bounds, all_bounds, F_filled);
      igl::harmonic(F_filled, bounds, bounds_uv ,1, uv_init);//Numerical error
      uv_init = uv_init.topRows(vertices.rows());
    }
    Eigen::VectorXi boundary_indices; Eigen::MatrixXd boundary_conditions;
    igl::scaf_precompute(vertices, faces, uv_init, data, type, boundary_indices, boundary_conditions, 0);
    igl::scaf_solve(data, std::max<int>(1, solver_iterations_count));
    out_vertices = uv_scale * data.w_uv.topRows(vertices.rows()); //uv
} 
```

...

#### Check all that apply (change to `[x]`)
- [x] Windows
- [ ] Mac OS X
- [ ] Linux
- [ ] I have tried the `dev` branch and the problem persists

See https://libigl.github.io/CONTRIBUTING/#bugreport for more tips.

I am dealing with the task of Picking Faces with "libigl". I have found 708_Picking tutorial very useful, but I realised as well that for big meshes it takes too much time. I stumbled upon this link: https://github.com/libigl/libigl/issues/544?fbclid=IwAR0PaqkQhUvvSf4bx9LxM3y8xrEIFDMRXLoh48FtPpo-gDrAwN4Vak7WmtI . Even though I tried so hard to implement the solution you had suggested (to replace `igl::ray_mesh_intersect`  with `igl::embree::EmbreeIntersector` (using interectRay) for my project), I am unable to make it work. 

Specifically, I installed embree, I created an Embree intersection structure ( igl::embree::EmbreeIntersector ei; ) and I initialized  ( ei.init(V.cast<float>(), F.cast<int>()); ). Then, I tried to replace "igl::unproject_onto_mesh", which is inside the callback function (look at 708_Picking Tutorial code) with the following code (which i found on libigl-examples repository)

////////////////

> win_s = Eigen::Vector3f(x, y, 0);
> Eigen::Vector3f win_d(x, y, 1);
> igl::opengl2::unproject(win_s, s);
> igl::opengl2::unproject(win_d, d);
> 			
> dir = d - s;
> int num_rays_shot;
> ei.intersectRay(s, dir, hits, num_rays_shot);
> 	for (std::vector<igl::Hit >::iterator hit = hits.begin();
> 				hit != hits.end();
> 				hit++)
> 			{
> 				// Change color of hit faces
> 				C(hit->id, 0) = 1;
> 				C(hit->id, 1) = 0.4;
> 				C(hit->id, 2) = 0.4;
> 			}

////////////////
I realised that i should include unproject.h (#include <igl/opengl2/unproject.h>), as i did. I found the library in this link: https://gitlab.ouahpiti.info/faquin/IMAGE/blob/5ace3aa171361046134b991c658656db113c7e66/libigl/include/igl/opengl2/unproject.h . I got the following LNK errors
<img width="787" alt="my_errors" src="https://user-images.githubusercontent.com/59918539/72525500-f9fdba80-386c-11ea-802f-39cfeaa57365.png"> .

Unfortunately, my programming skills in C++ are not so advanced.

If you'd be so kind, I would really appreciate it, if you could give me some help or guidance.
#### Describe your issue
I'm using python-binding, applying principal curvature using the command: 

`v1, v2, k1, k2 = igl.principal_curvature(v, f)
`

but I'm getting the error:

`Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)
`

v are in this format:

`[[  56.09962091  -50.70284252   74.43154099]
 [ -81.66580634   31.11304083  -96.20692408]
 [ -63.04710378   20.05579935  -73.14550082]
 [ -74.68074967  -46.74132945 -125.53300517]
 [ -82.86191115  138.50006684    4.60130311]
 [  73.56470904 -118.43376944  -71.32137773]
 [  -4.92233919 -159.90066014  -27.83674232]
 [ -75.62714176   28.23358687  -78.90299045]
 [ -81.53924671  121.62689731   52.15735424]
 [-119.16738782   84.67573099   64.81959086]
 [ 115.65943449  -56.67805099  -75.6967053 ]
 [ -80.48401851   20.7915225   -68.63223673]
 [-142.29170674 -108.38603014  -36.96969018]
 [  98.64894284   50.12674432   58.67070153]
 [ -28.13477169   83.20510976  107.46559988]
 [-144.66277425   68.30107727   49.66061848]
 [  29.54206082  143.22321321  -55.06127287]
 [   4.90252259   69.73588386 -132.70296423]
 [-102.13321016  -67.17764799 -111.93319288]
 [-166.21385932   13.10544553  -15.81392708]
 [ -38.58577129  144.34755316   28.37260346]
 [  56.31233339  -61.38765368   64.17787867]
 [ -90.93979735    0.38020425  -79.89511472]
 [ -96.76884596   21.71346256  -64.96037686]
...
 [  74.58292415 -124.48759489   -5.62172548]
 [-174.78859069  -11.99712938  -11.00922369]
 [  87.27561955   69.94477948 -108.91576776]
 [ 117.33246385  -69.39698438   16.03177459]
 [ 103.92915334   60.71174874  -89.2834191 ]
 [  11.60050005  104.17767979   85.44092131]
 [  45.99420387  -75.99419561 -145.5603443 ]
 [ -75.78031523    8.32746322  -78.40591649]
`

and f are: 

`[[  0 165 425]
 [  0 836 165]
 [  0 128 836]
 [  0 107 128]
 [  0 542 107]
..
 [  0 425 164]
 [425 120 834]
 [425 165 120]
 [165 726 120]
 [165 836 726]
`

As well if I used the gaussian curvature it prints out the results but with giving `nan` values!!! 

`[       nan 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 3.15422311 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
 6.28318531 6.28318531 6.28318531 3.14159265        nan 6.28318531
 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531 6.28318531
`
 as well the error in the title.

Please any help!
...

#### Check all that apply (change to `[x]`)
- [ ] Windows
- [ ] Mac OS X
- [x] Linux
- [ ] I have tried the `dev` branch and the problem persists

See https://libigl.github.io/CONTRIBUTING/#bugreport for more tips.

This `&& false` somehow appeared... I don't know/recall the origin of it. Current thinking is that it was debris from debugging that got accidentally committed.

#### Check all that apply (change to `[x]`)
- [x] All changes meet [libigl style-guidelines](https://libigl.github.io/style-guidelines/).
- [ ] Adds new .cpp file.
- [ ] Adds corresponding unit test.
- [ ] Adds corresponding python binding.
- [x] This is a minor change.

#### Describe your issue

So it's really neat that libigl includes a sparse QP solver, and overall this active-set implementation is solid. However it has severe performance problems that prevent it from being useful at scale, which I wanted to bring up in case y'all ever consider improving this function.

In particular, `active_set` uses `min_quad_with_fixed` to do the inner iteration solves. That function in turn runs a QR decomposition(*) on the constraints to check whether or not they are indefinite; this QR decomposition happens *every inner iteration*. On the one hand, in theory this is needed (since the active inequality constraints could suddenly become linearly dependent with previously independent inequality constraints) but it absolutely kills performance. Maybe there's a better way to check linear dependence? Or at least some way to tell `active_set` to always assume linear independence of the constraints (i.e. often you can prove this about your problem in advance)?

#### Check all that apply (change to `[x]`)
- [X] Windows
- [X] Mac OS X
- [X] Linux
- [ ] I have tried the `dev` branch and the problem persists

See https://libigl.github.io/CONTRIBUTING/#bugreport for more tips.

(*) Using the poor-performing built-in Eigen QR decomposition, no less.
Fix `error: no match for ‘operator=’` with gcc 7.4.0  when IntegerC is long long int
Got the error while building the new libigl python bindings against libigl dev branch.
Two trailing whitespaces were removed by my text editor. 

#### Check all that apply (change to `[x]`)
- [x] All changes meet [libigl style-guidelines](https://libigl.github.io/style-guidelines/).
- [ ] Adds new .cpp file.
- [ ] Adds corresponding unit test.
- [ ] Adds corresponding python binding.
- [x] This is a minor change.

#### Describe your issue
I'm trying to parametrize a human body 3D mesh, I tried to use the code in the lscm tutorial on an a mesh with 24461 vertices and 48918 of a human body. the boundry_loop function always return an empty object. 
I used the same code on a different object and it worked.

##############
v, f = igl.read_triangle_mesh(os.path.join(root_folder, "data", "camel_b.obj"))
b = np.array([2, 1])

bnd = igl.boundary_loop(f)
b[0] = bnd[0]
b[1] = bnd[int(bnd.size / 2)]

bc = np.array([[0.0, 0.0], [1.0, 0.0]])
_, uv = igl.lscm(v, f, b, bc)

p = plot(v, f, uv=uv, shading={"wireframe": False, "flat": False}, return_plot=True)
############

I can't seem to figure out why it doesn't work on my object 
...

#### Check all that apply (change to `[x]`)
- [ ] Windows
- [ ] Mac OS X
- [x] Linux
- [ ] I have tried the `dev` branch and the problem persists

See https://libigl.github.io/CONTRIBUTING/#bugreport for more tips.

[Describe your changes and what you've already done to test it.]

#### Check all that apply (change to `[x]`)
- [ ] All changes meet [libigl style-guidelines](https://libigl.github.io/style-guidelines/).
- [ ] Adds new .cpp file.
- [ ] Adds corresponding unit test.
- [ ] Adds corresponding python binding.
- [ ] This is a minor change.

#### Describe your issue
Hi everyone,

Pls kindly help I am trying to run Cmake and gave me undelisted error.

Thank you.

Ajayi 


#### Check all that apply (change to `[x]`)
- [ ] Windows
- [ ] Mac OS X
- [X] Linux
- [ ] I have tried the `dev` branch and the problem persists

See https://libigl.github.io/CONTRIBUTING/#bugreport for more tips.

CMake Error at cmake/FindLIBIGL.cmake:36 (include):
  include could not find load file:

    libigl
Call Stack (most recent call first):
  CMakeLists.txt:27 (find_package)


CMake Error at /usr/share/cmake-3.10/Modules/FindBoost.cmake:1286 (file):
  file STRINGS file "/home/cherdsak/boost_1_58_0/boost/version.hpp" cannot be
  read.
Call Stack (most recent call first):
  CMakeLists.txt:29 (find_package)


CMake Warning at /usr/share/cmake-3.10/Modules/FindBoost.cmake:567 (message):
  Imported targets and dependency information not available for Boost version
  0 (all versions older than 1.33)
Call Stack (most recent call first):
  /usr/share/cmake-3.10/Modules/FindBoost.cmake:907 (_Boost_COMPONENT_DEPENDENCIES)
  /usr/share/cmake-3.10/Modules/FindBoost.cmake:1558 (_Boost_MISSING_DEPENDENCIES)
  CMakeLists.txt:29 (find_package)


CMake Warning at /usr/share/cmake-3.10/Modules/FindBoost.cmake:567 (message):
  Imported targets and dependency information not available for Boost version
  0 (all versions older than 1.33)
Call Stack (most recent call first):
  /usr/share/cmake-3.10/Modules/FindBoost.cmake:907 (_Boost_COMPONENT_DEPENDENCIES)
  /usr/share/cmake-3.10/Modules/FindBoost.cmake:1558 (_Boost_MISSING_DEPENDENCIES)
  CMakeLists.txt:29 (find_package)


CMake Error at /usr/share/cmake-3.10/Modules/FindBoost.cmake:1947 (message):
  Unable to find the requested Boost libraries.

  Boost version: 0.0.0

  Boost include path: /home/cherdsak/boost_1_58_0

  Detected version of Boost is too old.  Requested version was 1.58 (or
  newer).
Call Stack (most recent call first):
  CMakeLists.txt:29 (find_package)


-- Configuring incomplete, errors occurred!
See also "/home/cherdsak/Documents/My_Projects/Fall_2017/SDFGenerator/build/CMakeFiles/CMakeOutput.log".
See also "/home/cherdsak/Documents/My_Projects/Fall_2017/SDFGenerator/build/CMakeFiles/CMakeError.log".


#### Check all that apply (change to `[x]`)
- [x] All changes meet [libigl style-guidelines](https://libigl.github.io/style-guidelines/).
- [ ] Adds new .cpp file.
- [ ] Adds corresponding unit test.
- [ ] Adds corresponding python binding.
- [x] This is a minor change.
