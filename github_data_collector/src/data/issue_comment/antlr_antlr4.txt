<!--
Thank you for proposing a contribution to the ANTLR project. In order to accept changes from the outside world, all contributors must "sign" the  [contributors.txt](https://github.com/antlr/antlr4/blob/master/contributors.txt) contributors certificate of origin. It's an unfortunate reality of today's fuzzy and bizarre world of open-source ownership.

Make sure you are already in the contributors.txt file or add a commit to this pull request with the appropriate change. Thanks!
-->

This PR introduces Dart target. It passes all existing test cases.

## Why Dart
IMAO Dart is currently the best language that runs easily on browser, Android, iOS, Windows, Linux and MacOS. Also it supports AOT compilation which surprised me by passing `PerformanceTest.DropLoopEntryBranchInLRRule_4` with ease. This test case takes ages to run with JIT+VM, but with AOT, it finishes within two seconds.

## Acknowledgments
This target's runtime is built from scratch by converting the Java target. However in many places I referred to @tiagomazzutti 's [port](https://github.com/tiagomazzutti/antlr4dart-runtime) which helped a lot. Many thanks to @tiagomazzutti and @thosakwe for previous attempts.

Also thank you @marcospassos for adding the codegen tweaks which makes building this target a lot easier.

## TODO

I will add some documentations if the code looks good.

- [ ] Document releasing procedure
- [ ] Add in `doc/dart-target.md` and `doc/targets.md`
- [ ] Add more information to `doc/creating-a-language-target.md` so it's easier for future targets

Also this is my first open source contribution, so please let me know if anything needs to be fixed!

Fixes #1367  
The `Lexer` class provides the [`setTokenFactory` template function](https://github.com/antlr/antlr4/blob/master/runtime/Cpp/runtime/src/Lexer.h#L98-L101), but its function signature means that its body can't compile. The function is defined as follows:

    template<typename T1>
    void setTokenFactory(TokenFactory<T1> * factory) {
        this->_factory = factory;
    }

where [`this->_factory`](https://github.com/antlr/antlr4/blob/master/runtime/Cpp/runtime/src/Lexer.h#L34) is declared as a [`std::shared_ptr`](https://en.cppreference.com/w/cpp/memory/shared_ptr):

    Ref<TokenFactory<CommonToken>> _factory;

The function can't work because `std::shared_ptr<T>` provides no assignment operator from `T*`, nor does it provide an implicitly converting constructor from `T*` (i.e., its `T*` constructor is marked `explicit`). `Lexer` works with the default `CommonTokenFactory` only because it assigns its `_factory` using `CommonTokenFactory::DEFAULT`, which is a `shared_ptr` of the same type as `_factory`.

I believe `setTokenFactory` on `Lexer`, `Parser`, and `TokenSource` should be changed to the following signature:

    template<typename T1>
    void setTokenFactory(Ref<TokenFactory<T1>> const& factory);

and the implementation of `Lexer::setTokenFactory` should be:

    template<typename T1>
    void setTokenFactory(Ref<TokenFactory<T1>> const& factory) {
        this->_factory = std::static_pointer_cast<TokenFactory<CommonToken>>(factory);
    }

Because of the declared type of `Lexer::_factory`, it's necessary for the `factory` argument here to be convertible to a `std::shared_ptr<TokenFactory<CommonToken>>`.
<!--
Before submitting an issue to ANTLR, please check off these boxes:
 
- [X] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)
- [X] I have done a search of the existing issues to make sure I'm not sending in a duplicate

Please include information about the expected behavior, actual behavior, and the smallest grammar or code that reproduces the behavior. If appropriate, please indicate the code generation targets such as Java, C#, ...  Pointers into offending code regions are also very welcome.
-->

C# Runtime, Nuget package version 4.7.2, ANTLR version `antlr-4.8-complete.jar`

Hello!  I have two grammar files.  One is a lexer grammar (so I can use modes) and the other is a parser grammar.

I have written a custom token, inheriting from `CommonToken`.  I created a token factory, implementing `ITokenFactory`.

I can set the token factory of the lexer just fine, using the below code:

`lexer.TokenFactory = tokenFactory;`

But, I cannot set the parser's Token Factory property, since it is read only.

I would expect to be able to use this code:

`parser.TokenFactory = tokenFactory;`

Is there something I am missing?  I did search for information, and what I found about the Java runtime implies this is possible (in general), but I cannot see how to do it with the C# runtime.

Thanks in advance!

Recently, I try the Python language with Golang runtime with [https://github.com/antlr/grammars-v4/blob/master/python/Java/PythonLexerBase.java](https://github.com/antlr/grammars-v4/blob/master/python/Java/PythonLexerBase.java)

And in line:174, have a logic need to setText("")

```java
    private void emit(int tokenType, int channel, String text) {
        int charIndex = getCharIndex();
        CommonToken token = new CommonToken(_tokenFactorySourcePair, tokenType, channel, charIndex - text.length(), charIndex);
        token.setLine(getLine());
        token.setCharPositionInLine(getCharPositionInLine());
        token.setText(text);   // here <--------

        emit(token);
    }
```

Then, I try in Golang, but I can setText(""), but GetText will failure, and I found in the antlr runtime, here is a different logic with Go [L171](https://github.com/antlr/antlr4/blob/691acdc23f1f093b011ad788282fc722106d3de5/runtime/Go/antlr/token.go#L171): 

```go
func (c *CommonToken) GetText() string {
	if c.text != "" {  <=============== check empty
		return c.text
	}
	input := c.GetInputStream()
	if input == nil {
		return ""
	}
	n := input.Size()
	if c.start < n && c.stop < n {
		return input.GetTextFromInterval(NewInterval(c.start, c.stop))
	}
	return "<EOF>"
}
```

in L172 is a check "", but in other target, It is null check:

here is [JavaScript version](https://github.com/antlr/antlr4/blob/691acdc23f1f093b011ad788282fc722106d3de5/runtime/JavaScript/src/antlr4/Token.js#L118):

```javascript
	get : function() {
		if (this._text !== null) {
			return this._text;
		}
		var input = this.getInputStream();
		if (input === null) {
			return null;
		}
		var n = input.size;
		if (this.start < n && this.stop < n) {
			return input.getText(this.start, this.stop);
		} else {
			return "<EOF>";
		}
	},
```

Python version: [L112](https://github.com/antlr/antlr4/blob/691acdc23f1f093b011ad788282fc722106d3de5/runtime/Python3/src/antlr4/Token.py#L112)

```python
    @property
    def text(self):
        if self._text is not None:
            return self._text
        input = self.getInputStream()
        if input is None:
            return None
        n = input.size
        if self.start < n and self.stop < n:
            return input.getText(self.start, self.stop)
        else:
            return "<EOF>"
```

Others:

 - [Cpp Version](https://github.com/antlr/antlr4/blob/691acdc23f1f093b011ad788282fc722106d3de5/runtime/Cpp/runtime/src/CommonToken.cpp#L78)
 - [C# Version](https://github.com/antlr/antlr4/blob/691acdc23f1f093b011ad788282fc722106d3de5/runtime/CSharp/runtime/CSharp/Antlr4.Runtime/CommonToken.cs#L227)

I think in the go target should keep same logic with others.
Trying out this very simple grammar, based on examples from ANTLR book:
```
% cat CommonLexerRules.g4 
lexer grammar CommonLexerRules;

INT: [0-9]+ ;
ID: [a-zA-Z_]+ ;
NEWLINE: '\r'? '\n' ;
WS : [ \t]+ -> skip ;

FLOAT_LITERAL: (Digits '.' Digits? | '.' Digits) ExponentPart? [fFdD]?
        |       Digits (ExponentPart [fFdD]? | [fFdD])
;

fragment Digits
: [0-9] ([0-9_]* [0-9])?
;

fragment ExponentPart
: [eE] [+-]? Digits
;
% cat LibExpr.g4 
grammar LibExpr;
import CommonLexerRules;

prog:   stat+ ;

stat:   expr NEWLINE            # printExpr
    |   var '=' expr   # assign
    |   NEWLINE                 # blank
    ;
    
expr:   expr op=('*'|'/') expr     # ElementWiseMathOp
    |   expr op=('+'|'-') expr     # ElementWiseMathOp
    |   FLOAT_LITERAL              # float
    |   ID                         # id
    ;
    
var: 'var' name=ID
    ;
```

When I try it with a correct program, the results are fine:
```
% grun LibExpr prog -diagnostics -tree
var some = 5.0
some
(prog (stat (var var some) = (expr 5.0)) (stat \n) (stat (expr some) \n))
````

But when adding trailing integer on the first line, the parser seems to be a bit lost, does not report any errors (or ambiguities; note the `-diagnostics` option), just ignores everything after the first expression:

````
% grun LibExpr prog -diagnostics -tree
var some = 5.0 32
some
(prog (stat (var var some) = (expr 5.0)))
````

I guess if the grammar is wrong, or the program is incorrect, Antlr should return some error. Simply ignoring the input tokens looks like a bug.

Antlr 4.7.2, Mac OS X.

<!--
Before submitting an issue to ANTLR, please check off these boxes:
 
- [X ] I am not submitting a question on how to use ANTLR; instead, go to [antlr4-discussion google group](https://groups.google.com/forum/#!forum/antlr-discussion) or ask at [stackoverflow](http://stackoverflow.com/questions/tagged/antlr4)
- [X ] I have done a search of the existing issues to make sure I'm not sending in a duplicate

Please include information about the expected behavior, actual behavior, and the smallest grammar or code that reproduces the behavior. If appropriate, please indicate the code generation targets such as Java, C#, ...  Pointers into offending code regions are also very welcome.
-->


There's a call to ConsoleWriteLine (format, arg), with the string equal to "config from pred transition=(1220,2,[1204 $],{1:0}?)". Unfortunately, while the corresponding Java code works fine, the C# runtime calls ConsoleWriteLine(...), which calls System.Console.WriteLine(format, arg), where the string is interpreted as a format. Curly braces in C# are interpreted as formatting. In fact, the code between Java, C#, and C++ are all different here--all executing slight variations. (IMO, Java should be source, and C#, C++, etc. completely and automatically generated by tool, never touched by hand, otherwise hands get chopped off.) My temporary solution is to just call System.Console.WriteLine() directly in the C# code, like it is in the Java and C++ code.

https://github.com/antlr/antlr4/blob/master/runtime/Java/src/org/antlr/v4/runtime/atn/ParserATNSimulator.java#L1898
-- if ( debug ) System.out.println("config from pred transition="+c);

https://github.com/antlr/antlr4/blob/master/runtime/CSharp/runtime/CSharp/Antlr4.Runtime/Atn/ParserATNSimulator.cs#L2002
-- if (debug) ConsoleWriteLine("config from pred transition=" + c);

https://github.com/antlr/antlr4/blob/master/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp#L1156
-- #if DEBUG_DFA == 1
--    std::cout << "config from pred transition=" << c << std::endl;
-- #endif



In file https://github.com/antlr/antlr4/blob/master/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp#L1306
and
https://github.com/antlr/antlr4/blob/master/runtime/Cpp/runtime/src/atn/ParserATNSimulator.cpp#L1330

Both calls perform a cast of start and stop indices from "size_t" into "int" for the constructor misc::Interval(size_t, size_t). This code does not compile. The casts are not required because they're already size_t. Please remove the explicit casts in functions ParserATNSimulator::reportAmbiguity() and ParserATNSimulator::reportAttemptingFullContext().

I'm not making a pull request (PR) because it seems a previous request I made is being ignored for whatever reason.
I use the generated file in the project to have the package path. The code can be used, but the generated class file cannot use the grun command. For example: java.lang.NoClassDefFoundError: file name (wrong name: package name)
Is there any good way? Why not filter out the class package
The current guide to build ANTLR for Swift is still up-to-date, although it requires some changes in the docs as some steps do not work and the user have to follow the errors which appear when executing the guide for Swift target step-by-step.

The guide also mentions that it uses Swift Package Manager to generate the XCode Project and since iOS is not supported there, some manual changes are required to make it work under iOS.

I was able to compile it for iOS and even use the Swift 5 to compile the generated project, but that did not work at the end though. After doing all suggested steps the app crashes with `Library not loaded: @rpath/Antlr4.framework` error.

Would it make sense to create a Carthage package for ANTLR? That would simplify life of devs a lot. ANTLR is the only open-source project at the moment which supports Swift target and parsing binary streams, so having an iOS support would be a good addition I think.
https://github.com/antlr/antlr4/blob/master/doc/cpp-target.md has a broken link to [Antlr4 for C++ with CMake: A practical example](http://blorente.me//Antlr-,-C++-and-CMake-Wait-what.html).