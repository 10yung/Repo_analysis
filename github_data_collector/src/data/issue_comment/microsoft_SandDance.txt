Hey, it would be really cool if you can add line graph feature to SandDance. 
I am currently trying to recreate the SandDance app example on https://sanddance.js.org/app/ within a Nuxt.js project.

I was able to figure out most of the functionalities, but I can't seem to find a solution for keeping the selection highlight (coloring of the cubes), when changing the chart type.
At the moment, I use viewer.render to change the displayed graph, when updating the insight.
So, after I select some data inside the graph, it highlights the selected data correctly. Then I click to change the chart type (using viewer.render with an updated insight), and the highlight disappears, but the selection still exists and is the same as before, because onSelectionChange isn't called

How does it work in the SandDance app example on https://sanddance.js.org/app/ to keep the selection highlight, when changing to a different chart type? Maybe I can find a solution, if I understand that.
Created a chart with Years as the Y axis.

2019 was the last number on the Y access, but bar contained 2020.

Filtered out 2020 as a year and the last bar was comprised of 2018 and 2019 data.

![Bug Sandance Years mixed on Bar](https://user-images.githubusercontent.com/35978198/72018922-3d817480-322e-11ea-984c-600f7118e721.PNG)

It should be possible to visualize SandDance visualizations in VR/AR. There are some examples of this in DeckGL here: https://github.com/uber/deck.gl/pull/1351

What might this look like in SandDance? A different view mode?

Thanks!
I am sure some Blazor + SandDance sample project would be very useful.
It is interesting how to use SD in the Blazor projects using Blazor possibilities.

The image says it all:

![image](https://user-images.githubusercontent.com/561862/71646975-33ef8e00-2cbd-11ea-8129-74b29efa5aed.png)

There are 19 items with the the code "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents", but it only goes to 15 on the chart.

Here is the data passed in through the `load` method on the `mounted` callback:

````
[{
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Shine",
        "EventSeriesId": 9
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Well Played Cup",
        "EventSeriesId": 52
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Liga Oficial Playstation",
        "EventSeriesId": 66
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "NA Online Event",
        "EventSeriesId": 73
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "LA Online Event",
        "EventSeriesId": 74
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "EU Online Event",
        "EventSeriesId": 75
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "AO Online event",
        "EventSeriesId": 76
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Red Bull Proving Grounds 2017",
        "EventSeriesId": 89
    }, {
        "AdditionalData": "2017",
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NumbersInEventSeriesDescription",
        "EventSeriesDescription": "Red Bull Proving Grounds 2017",
        "EventSeriesId": 89
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "2Old2Furious",
        "EventSeriesId": 90
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "DreamHack Austin",
        "EventSeriesId": 92
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "KSB",
        "EventSeriesId": 95
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "CPT Online Events 2017",
        "EventSeriesId": 96
    }, {
        "AdditionalData": "2017",
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NumbersInEventSeriesDescription",
        "EventSeriesDescription": "CPT Online Events 2017",
        "EventSeriesId": 96
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Northern Arena Knockout",
        "EventSeriesId": 111
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Gwinnett Brawl",
        "EventSeriesId": 121
    }, {
        "AdditionalData": "3",
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NumbersInEventSeriesDescription",
        "EventSeriesDescription": "Mikado Tenkaichi Budoukai 3",
        "EventSeriesId": 122
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Evolution",
        "EventSeriesId": 125
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "CEO Citrus Clash",
        "EventSeriesId": 131
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Fighting Tuesday",
        "EventSeriesId": 136
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Revival",
        "EventSeriesId": 137
    }, {
        "AdditionalData": null,
        "Code": "Ofl.Reconciliation.Stats.EventSeries.NotAssignedToAnyEvents",
        "EventSeriesDescription": "Cyclops Weeklies",
        "EventSeriesId": 138
    }
]
````
It would be great if we could set a right click handler (or some sort of rendering mechanism) that would allow us to render something when we right click on the mark.

I imagine that 99% of the time this would be for a context menu, but it should be flexible enough to allow for anything to be rendered on right click.

This would take advantage of #159 in that the row and column data, and associated metadata would be passed to this render method.

An example would be the following.  Let's say I have the following object used in the explorer:

````
{
    eventId: 1,
    description: 'some event',
    start: '2019-12-25',
    end: '2019-12-26'
}
````
Along with the associated metadata for the *columns* (it's assumed the keys are related to the properties above):

````
{
    eventId: { adminPageRoot: '/admin/events/' }
}
````

Then, in the render method, all this information could be put together to render a link with the following URL:

/admin/events/1

Which would allow someone right clicking on that mark to be taken to a page related to that specific mark (and it's type).
While this isn't a necessary feature for the data displayed on the screen (or maybe it would), it would form the core for other features in the system that focus around allowing custom rendering of items related to marks on the screen.

There are two potential avenues I see (there may be more) for how to attach data (note, this applies to JSON objects, in that I'm not sure how this would be reflected in flat delimited formats):

## A reserved property in JSON

Something like this:

````
{
    id: 1,
    // Other properties
    __metadata: {
        // Whatever you want.
    }
}
````
Where `__metadata` is a reserved property name and ignored by SandDance when applied to *data rows*.  This wouldn't apply to columns (although the next one would)

## Dedicated wrapper type for data and metadata

The `load` method, instead of taking an array of objects (or a DataView), would take an array of *data-container* objects, with an optional `metadata` property, something like (in TypeScript):

````
interface DataRow {
    data: unknown,
    metadata: unknown
}
````

The interface ðŸ‘† would be specifically for data rows, for columns, wherever those are defined, they would have a specific property on them allowing metadata to be attached to them.

The `load` method would then take a `DataView`, or an array of `DataRow` objects.

---

Note, this is strongly related to #158 in that whatever mechanism is used to define column data (or attach/modify existing column data) would be expanded to include metadata for the column (the referenced issue doesn't have a mechanism for data).

Then, when there are rendering methods exposed that are related to marks on the screen, it would be passed the following:

- The data itself
- The metadata for the row
- The data for the columns
- The metadata for the columns
see [Data Preview  ðŸˆ¸](https://marketplace.visualstudio.com/items?itemName=RandomFractalsInc.vscode-data-preview) vscode extension for example of how to integrate those data formats: https://dev.to/tarasnovak/vscode-data-preview-for-devs-around-the-39mn

You can use or peruse my custom [Data Manager API](https://github.com/RandomFractals/vscode-data-preview/blob/master/src/data.manager.ts) & [src/data.providers](https://github.com/RandomFractals/vscode-data-preview/tree/master/src/data.providers) folder for data loading and saving implementation details to enrich SandDance with more data source type choices ...
Expected:

Clicking on Open Vega Editor popup would open generated chart Vega specification in an online [Vega Editor](https://vega.github.io/editor/#/) in the default browser using `vscode.open` command with encoded vega spec url. See #152 for more info on the latter part.

Alternatively, you can integrate with [Vega Viewer  ðŸ“ˆ](https://marketplace.visualstudio.com/items?itemName=RandomFractalsInc.vscode-vega-viewer) vscode extension for this part and open generated Vega specification in Vega Viewer via `commands.executeCommand('vega.preview', vegaSpecUri)`