Hey,

This is the coolest package in the world. Could we have `build_instructions()` work with a `ggplot` object? (And maybe other useful functions only working with `brickr_obj`)

Currently it crushes somewhere when trying to figure out the object type:

```r
df <- data.frame(trt = c("a", "b", "c"), outcome = c(2.3, 1.9, 3.2))

ggplot(df, aes(trt, outcome)) +
  geom_brick_col(aes(fill = trt)) +
  scale_fill_brick() +
  coord_brick() +
  theme_brick() -> p

build_instructions(p)

# Error in if (type == "mosaic") { : argument is of length zero
```
I could previously create Lego mosaics without apparent issues, but (not sure if it is related to the latest version of the package, its dependencies, or anything else) now `brickr` makes strange colour selection. This happens also following exactly the example code and example files provided in the documentation. To minimise issues, I have run the code in a separate project with packrat and all freshly installed packages. 

Here is the resulting reprex with the resulting image. Suggestions for troubleshooting?

``` r
remotes::install_github("ryantimpe/brickr")
#> Skipping install of 'brickr' from a github remote, the SHA1 (ad3feef6) has not changed since last install.
#>   Use `force = TRUE` to force installation
library("brickr")
#> Loading required package: ggplot2

if(file.exists("demo.png")==FALSE) {
  download.file(url = "http://ryantimpe.com/files/mf_unicorn.PNG",
                destfile = "demo.png")
}

mosaic1 <- png::readPNG("demo.png") %>% 
  image_to_mosaic(img_size = 36) #Length of each side of mosaic in "bricks"

#Plot 2D mosaic
mosaic1 %>% build_mosaic()
```

![](https://i.imgur.com/Da5b1e3.png)

<sup>Created on 2019-11-23 by the [reprex package](https://reprex.tidyverse.org) (v0.3.0)</sup>

<details>

<summary>Session info</summary>

``` r
sessionInfo()
#> R version 3.6.1 (2019-07-05)
#> Platform: x86_64-redhat-linux-gnu (64-bit)
#> Running under: Fedora 30 (Workstation Edition)
#> 
#> Matrix products: default
#> BLAS/LAPACK: /usr/lib64/R/lib/libRblas.so
#> 
#> locale:
#>  [1] LC_CTYPE=en_IE.UTF-8       LC_NUMERIC=C              
#>  [3] LC_TIME=en_DK.UTF-8        LC_COLLATE=en_IE.UTF-8    
#>  [5] LC_MONETARY=en_DK.UTF-8    LC_MESSAGES=en_IE.UTF-8   
#>  [7] LC_PAPER=en_DK.UTF-8       LC_NAME=C                 
#>  [9] LC_ADDRESS=C               LC_TELEPHONE=C            
#> [11] LC_MEASUREMENT=en_DK.UTF-8 LC_IDENTIFICATION=C       
#> 
#> attached base packages:
#> [1] stats     graphics  grDevices utils     datasets  methods   base     
#> 
#> other attached packages:
#> [1] brickr_0.2.0  ggplot2_3.2.1
#> 
#> loaded via a namespace (and not attached):
#>  [1] Rcpp_1.0.3       compiler_3.6.1   pillar_1.4.2     highr_0.8       
#>  [5] remotes_2.1.0    tools_3.6.1      zeallot_0.1.0    digest_0.6.23   
#>  [9] evaluate_0.14    lifecycle_0.1.0  tibble_2.1.3     gtable_0.3.0    
#> [13] pkgconfig_2.0.3  png_0.1-7        rlang_0.4.1      curl_4.2        
#> [17] yaml_2.2.0       xfun_0.11        xml2_1.2.2       httr_1.4.1      
#> [21] withr_2.1.2      stringr_1.4.0    dplyr_0.8.3      knitr_1.26      
#> [25] vctrs_0.2.0      grid_3.6.1       tidyselect_0.2.5 glue_1.3.1      
#> [29] R6_2.4.1         rmarkdown_1.17   farver_2.0.1     purrr_0.3.3     
#> [33] tidyr_1.0.0      magrittr_1.5     ellipsis_0.3.0   backports_1.1.5 
#> [37] scales_1.1.0     htmltools_0.4.0  assertthat_0.2.1 mime_0.7        
#> [41] colorspace_1.4-1 labeling_0.3     stringi_1.4.3    lazyeval_0.2.2  
#> [45] munsell_0.5.0    crayon_1.3.4
```

</details>

Many issues with this:
![image](https://user-images.githubusercontent.com/8763398/67792835-341aa580-fa50-11e9-9a96-b22827af4fc2.png)

Identify background color in image and remove the color. Allow to replace with a solid other color. 
Same as the LEGO Mosaic Maker.
Currently, brick dimensions are a determined by the ggplot-calculated width of a bar. This results in awkwardly-heighted bars, especially with sparse data. 
Allow this to be more flexible, either with a `width_scale` input or changes to coord_brick().
Rectangular plots do not render correctly.
I realize this may be out of your original scope, but I think it would be convenient to have a (wrapper) function to import an image from file.  For the app I allowed for JPEG or PNG files to be imported.  In the case of PNG files, I used the [`magick`](https://cran.r-project.org/web/packages/magick/vignettes/intro.html) to convert the image to JPEG and then simply used `jpeg::readJPEG()` like your earlier prototypes.  You can see how I used this in my import module [here](https://github.com/rpodcast/shinylego/blob/a09089db572654d9ec3beb7566c375bd4d369697/R/mod_upload_graphic.R#L41-L68). Happy to turn this in to a function for the package if you are on board with this idea.
One of my bigger future ideas for [shinyLEGO](https://github.com/rpodcast/shinylego/tree/master/R) is to let the user download a set of instructions they can use to build the mosaic after they select their desired number of steps.  The UI in my current version lets the user view the individual steps.  I created some utility functions and updated existing functions in the backend inspired by your previous posts to facilitate step creation.  Would you be open to me contributing this functionality to `brickr`?  Or did you have that already in the works?  I'm sure I would need to do a bit of refactoring to make it compatible with `brickr`.  Here are links for more info:

* [`generate_steps`](https://github.com/rpodcast/shinylego/blob/a09089db572654d9ec3beb7566c375bd4d369697/R/lego_functions.R#L435-L492): Creates a tidy data frame with the bricks required at a specified number of steps.  This is very much similar to your earlier function.  Uses the `Img_bricks` data frame as input.
* [`step_pieces`](https://github.com/rpodcast/shinylego/blob/a09089db572654d9ec3beb7566c375bd4d369697/R/lego_functions.R#L369-L386): Generate a tidy data frame with pieces required at each step (uses data frame produced by `generate_steps()` as input).  Optionally it can simply have a specific step number and it will only return the pieces needed for that step.
* [`plot_instructions`](https://github.com/rpodcast/shinylego/blob/a09089db572654d9ec3beb7566c375bd4d369697/R/lego_functions.R#L494-L544): Very similar to your previous version, but it takes the output from `generate_steps()` as input and either prints instructions for all steps or for a specified step number.
* [`table_pieces`](https://github.com/rpodcast/shinylego/blob/a09089db572654d9ec3beb7566c375bd4d369697/R/lego_functions.R#L608-L644): Very similar to your earlier version but allows for summarizing a particular step if specified.
 