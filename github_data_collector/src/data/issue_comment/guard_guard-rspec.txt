## Problem

Related to https://github.com/guard/guard-rspec/issues/348, https://github.com/guard/guard-rspec/issues/326 and https://github.com/guard/guard-rspec/issues/348

I was unable have guard detect more that one change because Guard was terminating the runner with `Guard::RSpec has just been fired` every time. I eventually worked out this was due to the `SPEC_OPTS` environment variable having been set in our docker container.

## Possible solutions

First I think we should catch this error and show a warning instead of terminating, since it has been a problem in the past with multiple causes and prevents the use of this library.

To solve this particular cause we could unset the `SPEC_OPS` variable when spawning the new process.

## Error

```
11:44:51 - ERROR - Guard::RSpec cannot open results file: "/home/git/gitlab/tmp/rspec_guard_result". This is likely a bugso please report this at http://github.com/guard/guard-rspec/issues/new along with as muchinformation as possible to reproduce this issue.
11:44:51 - ERROR - Guard::RSpec failed to achieve its <run_on_modifications>, exception was:
> [#] Errno::ENOENT: No such file or directory @ rb_sysopen - /home/git/gitlab/tmp/rspec_guard_result
> [#] /data/cache/bundle-2.5/gems/guard-rspec-4.7.3/lib/guard/rspec/results.rb:11:in `readlines'
```
In my project I keep the specs in the same place as the code, despite my rspec being configured correctly running with guard always produces the error:
```
An error occurred while loading ./spec.
Failure/Error: __send__(method, file)

LoadError:
  cannot load such file -- /home/faissaloo/autodidact_space/spec
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/configuration.rb:2053:in `load'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/configuration.rb:2053:in `load_file_handling_errors'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/configuration.rb:1560:in `block in load_spec_files'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/configuration.rb:1558:in `each'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/configuration.rb:1558:in `load_spec_files'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/runner.rb:98:in `setup'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/runner.rb:86:in `run'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/runner.rb:71:in `run'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/lib/rspec/core/runner.rb:45:in `invoke'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/rspec-core-3.8.2/exe/rspec:4:in `<top (required)>'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/bin/rspec:23:in `load'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/bin/rspec:23:in `<top (required)>'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli/exec.rb:74:in `load'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli/exec.rb:74:in `kernel_load'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli/exec.rb:28:in `run'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli.rb:463:in `exec'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/vendor/thor/lib/thor/command.rb:27:in `run'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/vendor/thor/lib/thor/invocation.rb:126:in `invoke_command'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/vendor/thor/lib/thor.rb:387:in `dispatch'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli.rb:27:in `dispatch'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/vendor/thor/lib/thor/base.rb:466:in `start'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/cli.rb:18:in `start'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/bundler-1.17.2/exe/bundle:30:in `block in <top (required)>'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/2.6.0/bundler/friendly_errors.rb:124:in `with_friendly_errors'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/lib/ruby/gems/2.6.0/gems/bundler-1.17.2/exe/bundle:22:in `<top (required)>'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/bin/bundle:23:in `load'
# /home/faissaloo/.asdf/installs/ruby/2.6.1/bin/bundle:23:in `<main>'
# 
#   Showing full backtrace because every line was filtered out.
#   See docs for RSpec::Configuration#backtrace_exclusion_patterns and
#   RSpec::Configuration#backtrace_inclusion_patterns for more information.
```
There were words glued together with no space between.

This is the original error messsage I got:
> Guard::RSpec cannot open results file: "/Users/viktor/Developer/Ruby/graphql-api/tmp/rspec_guard_result". This is likely a bugso please report this at http://github.com/guard/guard-rspec/issues/new along with as muchinformation as possible to reproduce this issue.
I've been enjoying being able to [run rubocop only on changes in my feature branch](https://medium.com/devnetwork/running-rubocop-only-on-modified-files-a21aed86e06d), and I was wondering if there was a way to run only specs affected by changes in my feature branch ...?

I'm not a fan of spec runs kicking off when I save - I'd like to be able to control when they start, but detect the set of specs that are influenced in my current feature branch ...


The error message is currently like this: "This is likely a bugso please report this at http://github.com/guard/guard-rspec/issues/new along with as muchinformation as possible to reproduce this issue."
My text editor makes use of autosave and I am running a number of tests, hence I often find myself manually cancelling currently running tests in order for Rspec guard to test against my newer changes.
Hello! I'm trying to accomplish something like this for some tests:

`  watch(%r{^app/models/(.+).rb}) { |m| "-P 'spec/features/*#{m[1]}*/*'" }`

If I call straight from my console:

`rspec -P 'spec/features/*#{m[1]}*/*'` it works as expected, but I cannot seem to be able to make this work using guard-rspec.

I also tried it like so:
`  watch(%r{^app/models/(.+).rb}) { |m| "-P #{rspec.spec.call("/features/*#{m[1]}*/*"} }`

All to no avail.

This adds a fix adding long arguments when calling the underlying `rspec` command with the custom formatter.

This supports a wider range of usecases, like using a `.rspec` file.
These long arguments are backwards compatible with their shorter `-f` and
`-r` cousins. Those short arguments did not seem to work well when
specifying long arguments elsewhere.

`rake test:all_versions` passed âœ… 

