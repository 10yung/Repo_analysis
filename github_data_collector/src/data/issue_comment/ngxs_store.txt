## PR Checklist

Please check if your PR fulfills the following requirements:

- [X] The commit message follows our guidelines: https://github.com/ngxs/store/blob/master/CONTRIBUTING.md#commit
- [X] Tests for the changes have been added (for bug fixes / features)
- [X] Docs have been added / updated (for bug fixes / features)

## PR Type

What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->

```
[ ] Bugfix
[X] Feature
[ ] Code style update (formatting, local variables)
[ ] Refactoring (no functional changes, no api changes)
[ ] Build related changes
[ ] CI related changes
[ ] Documentation content changes
[ ] Other... Please describe:
```

## What is the current behavior?

<!-- Please describe the current behavior that you are modifying, or link to a relevant issue. -->

There is no per-state serialization.

Issue Number: N/A

## What is the new behavior?

Per-state serialization offers full control on how states are serialize/deserialize.

## Does this PR introduce a breaking change?

```
[ ] Yes
[X] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->

## Other information

This PR is different from the first one as it leverages the serialize/deserialize functions from the plugin options.
### Relevant Package
<!-- Can you pin-point one or more @ngxs/* packages the are relevant for this feature request? -->
<!-- ✍️edit: --> This feature request is for @ngxs/store


### Description
I have a service which has `Store` injected like this
```
export interface FooStateModel {
     fooData: {
          [key: number]: any
     }
}

@State<FooStateModel>({
     name: 'fooState',
})
export class FooState {
}

export class FooSelector {
     static getFooById(id: number) {
          return createSelector([ FooState ], (state: FooStateModel) => {
                return state.fooData[id];
           });
     }
}

@Injectable()
export class FooService() {
      constructor(private store: Store) {}

      getFoo$(id: number) {
           return this.store.select(FooSelector.getFooById(id));
      }
}
```

### Describe the problem you are trying to solve
Get rid of injected `Store` and use `@Select` only to get an observable of data from state using dynamic selector

### Describe the solution you'd like
```
@Injectable()
export class FooService() {
      @Select()
      getFoo$(id: number) {
           return FooSelector.getFooById(id);
      }
}
```


### Describe alternatives you've considered
**N.A.**

<!--
PLEASE HELP US PROCESS GITHUB ISSUES FASTER BY PROVIDING THE FOLLOWING INFORMATION.

ISSUES MISSING IMPORTANT INFORMATION MAY BE CLOSED WITHOUT INVESTIGATION.
-->

## I'm submitting a...
<!-- Check one of the following options with "x" -->
<pre><code>
[ ] Regression (a behavior that used to work and stopped working in a new release)
[ ] Bug report  <!-- Please search GitHub for a similar issue or PR before submitting -->
[ ] Performance issue
[x ] Feature request
[ ] Documentation issue or request
[ ] Support request => https://github.com/ngxs/store/blob/master/CONTRIBUTING.md
[ ] Other... Please describe:
</code></pre>

## What is the motivation / use case for changing the behavior?
<!-- Describe the motivation or the concrete use case. -->

Currently, the only ActionOption is cancelUncompleted. It would be convenient to have the opposite behavior, i.e. cancelling the new action, when the previous is not completed. CancelUncompleted works like mergeMap. This feature is the equivalent to exhaustMap.  

## Current behavior
<!-- Describe how the issue manifests. -->
<pre><code>
@Action(Login, { cancelUncompleted: true })
  login(ctx: StateContext<AuthStateModel>, { auth }: Login) {
    return this.userServerService.login(auth).pipe(   //<-- multiple logins on server
      tap(token => {
        ctx.setState({
          username: auth.name,
          token
        });
      })
    );
  }
</code></pre>

## Expected behavior
<!-- Describe what the desired behavior would be. -->
<pre><code>
@Action(Login, { cancelNewWhenUncompleted: true })
  login(ctx: StateContext<AuthStateModel>, { auth }: Login) {
    return this.userServerService.login(auth).pipe(
      tap(token => {
        ctx.setState({
          username: auth.name,
          token
        });
      })
    );
  }
</code></pre>

### Description

https://github.com/ngxs-labs/emitter/issues/419#issuecomment-559389777
https://github.com/ngxs/store/issues/773#issuecomment-558316732

### Affected Package
<!-- Can you pin-point one or more @ngxs/* packages as the source of the bug? -->
<!-- ✍️edit: --> The issue is caused by package @ngxs/storage-plugin

### Is this a regression?

<!-- Did this behavior use to work in the previous version? -->
<!-- ✍️--> Idk

### Description

<!-- ✍️--> 
Production build of angular fails with a storage migration.

## 🔬 Minimal Reproduction

<!-- Please create and share minimal reproduction -->
<!-- ✍️--> https://github.com/marcjulian/ngxs-storage-migrations

## 🔥 Exception or Error
<pre><code>ERROR in src/app/store/store.module.ts(15,20): Error during template compile of 'ɵ0'
  Function expressions are not supported in decorators
    Consider changing the function expression into an exported function.
</code></pre>

## Environment

<pre><code>
Libs:
- @angular/core version: 8.2.3
- @ngxs/store version: 3.5.1
<!-- Check whether this is still an issue in the most recent Angular version -->

Browser:
- [ ] Chrome (desktop) version XX
- [ ] Chrome (Android) version XX
- [ ] Chrome (iOS) version XX
- [ ] Firefox version XX
- [ ] Safari (desktop) version XX
- [ ] Safari (iOS) version XX
- [ ] IE version XX
- [ ] Edge version XX
 
For Tooling issues:
- Node version: v10.16.1  <!-- run `node --version` -->
- Platform:  Mac <!-- Mac, Linux, Windows -->

Others:
<!-- Anything else relevant?  Operating system version, IDE, package manager, HTTP server, ... -->
</code></pre>

## PR Checklist

Please check if your PR fulfills the following requirements:

- [X ] The commit message follows our guidelines: https://github.com/ngxs/store/blob/master/CONTRIBUTING.md#commit
- [ X] Tests for the changes have been added (for bug fixes / features)
- [ X] Docs have been added / updated (for bug fixes / features)

## PR Type

What kind of change does this PR introduce?

<!-- Please check the one that applies to this PR using "x". -->

```
[ ] Bugfix
[X] Feature
[ ] Code style update (formatting, local variables)
[ ] Refactoring (no functional changes, no api changes)
[ ] Build related changes
[ ] CI related changes
[ ] Documentation content changes
[ ] Other... Please describe:
```

## What is the current behavior?

There is no per-state serialization.

Issue Number: N/A

## What is the new behavior?

Per-state serialization offers full control on how states are serialize/deserialize.

## Does this PR introduce a breaking change?

```
[ ] Yes
[X] No
```

<!-- If this PR contains a breaking change, please describe the impact and migration path for existing applications below. -->

## Other information

### Affected Package
The issue is caused by package   "@ngxs/store": "^3.5.1",

### Description
If you have a lazy selector and call it with different params. Every time you change the param, the memorized value of the previous call is removed. That's a huge performance impact if you have a preselector that does some complex stuff. 

Here is an example:
https://stackblitz.com/edit/ngxs-lazyselector-issue-fix-uwfgjc

I have a selector `getSpecialAnimalComplex` that uses another select `getSpecialAnimalFn` to fetch the requested animal. So the `getSpecialAnimalFn` is a memorized selector. And everything works fine until you call that memorized function with different parameters.

In the above example, I call it first with `dog`, then again with `dog`  then with `cat` and finally again with `dog`. 
The result is, that the memorized value of the first `dog` is working for the second call. But after I query the selector with `cat` the value for `dog` is gone, and the selector needs recalculating that value.

![](https://i.imgur.com/tZeNcAn.png)

In my real-world application, this is a big performance gap. 

Can we change that to a behavior that doesn't memorize just the latest value?

### Relevant Package
This feature request is for @ngxs/store....


### Description
It should be able to prepopulate the global state (of all state classes) with 1 object. This should be possible either synchronous or asynchronous 
e.g. I would like to read the data via a http request or in case of an "electron" app from the local file system...


### Describe alternatives you've considered
As a workaround I use my own implementation of AsyncStorageEngine (@ngxs-labs/async-storage-plugin). I only implemented the "getItem" Method.
But it feels not right. e.g. on every state change the storage engine methods are called. Also I have to patch the "serialize" Method because certain state data contains objects which are not serializeable.



### Description

I'm on 3.5.1 and it seems that things are still initialized before APP_INITIALIZER.
Not sure if I'm missing something or if I don't completely understand what this issue's resolution should be?

This is my use case:
I need to initialize Ngxs through a library module that either is imported or not in the apps (monorepo structure)
And I couldn’t find a way to initialize it properly (the apps that import it should pass further if production is true or not, since a library shouldn't care about the app's environment directly)
But it seems that the initialization still takes place before APP_INITIALIZER resolves
This is my stackblitz: https://stackblitz.com/edit/ngxs-app-initializer?file=src%2Fapp%2Fstore%2Fstore.module.ts
The console will show:

prev state
next state
APP_INITIALIZER
APP_INITIALIZER Resolved
NGXS Logger shouldn't log anymore (but it does)
payload
prev state
next state
Angular is running in the development mode. Call enableProdMode() to enable the production mode.
but it should have production: true (I pass that hardcoded, since I don't have environments in the stackblitz) and developmentMode should be false. Also, the logger shouldn’t log.

P.S. Because of hmr, you need to reload the right-side browser window every time you make a change (at first I was tempted to think that the problem was resolved because of HMR, I wouldn't get the console logs all the time... but pressing reload shows every time that ngxs initializes before APP_INITIALIZER resolves)


### Describe the solution you'd like

```ts
class DashboardComponent {
   constructor(private loggerPlugin: NgxsLoggerPlugin) {}

   public ngOnInit() {
     this.loggerPlugin.options({ disable: true });
   }
}
```

### Relevant Package
<!-- Can you pin-point one or more @ngxs/* packages the are relevant for this feature request? -->
<!-- ✍️edit: --> This feature request is for @ngxs/storage-plugin


### Description
<!-- ✍️--> The plugin currently uses a global deserializer which calls "JSON.parse" and returns a generic JavaScript object. When the state model is a class (instead of being an interface or a type), the current implementation does not provide a way to convert the generic object into an concrete instance.


### Describe the solution you'd like
<!-- ✍️--> A new options value "serialization" should provide the ability to define a collection of key/deserializer so we can inject our own implementation:

```
NgxsStoragePluginModule.forRoot({
      serialization: [
        {
          key: 'zoo',
          onAfterDeserializer: (state) => {
            // return concrete instance of the model
          }
        }
      ]
    })
```
