<https://github.com/hrbrmstr/hgr/blob/master/inst/xslt/justthetext.xslt> is an XML style sheet that I've put into a ridiculously simple function <https://github.com/hrbrmstr/hgr/blob/master/R/clean.r> in my Mercury Postlight API pkg.

It strips all HTML tags out of a document, leaving just the text. Only mentioning it as it might be something to consider adding (likely after improving) to `tidytext` if an `xslt` dependency is tolerable.
I suggest to add a function to bind BM25 score *(which is based on a probabilistic term weighting model)*. It is useful in some cases as it gives control over:

- Term frequency saturation
- Document/Field length normalization

It is commonly used as a ranking function by search engines. 

I implemented a function `bind_bm25` in the forked repo [HERE](https://github.com/OmaymaS/tidytext/blob/extend/R/bind_bm25.R)

```
# bind_bm25 is given bare names -------------------

bind_bm25 <- function(tbl, term_col, document_col, n_col, k = 1.2, b = 1) {
  bind_bm25_(tbl,
               col_name(substitute(term_col)),
               col_name(substitute(document_col)),
               col_name(substitute(n_col)),
               k = k,
               b = b)
}

# bind_bm25_ is given strings -------------------------

bind_bm25_ <- function(tbl, term_col, document_col, n_col, k = 1.2, b = 1) {
  terms <- tbl[[term_col]]
  documents <- tbl[[document_col]]
  n <- tbl[[n_col]]

  doc_totals <- tapply(n, documents, sum)
  avg_dl <- mean(doc_totals)

  idf <- log(length(doc_totals) / table(terms))

  tbl$tf_bm25 <- ((k+1)*n)/(n+(k*((1-b)+b*(as.numeric(doc_totals[documents])/avg_dl))))
  tbl$idf <- as.numeric(idf[terms])
  tbl$bm25 <- tbl$tf_bm25 * tbl$idf

  tbl
}
```
I think it would be fairly easy to add support for the lsa package to tidytext and broom. See example below.

```r
# Put some docs in a vector
library("dplyr")
doc1 <- c("pets dog cat ferret")
doc2 <- c("sandwiches turkey ham")
doc3 <- c("cat ferret cat bird")
doc4 <- c("turkey beef sandwiches")
myvector <- c(doc1,doc2,doc3,doc4)
mydf <- data_frame(id = 1:4, text = myvector)

# Create a corpus
library("quanteda")
mycorpus <- corpus(mydf, text_field = "text")
mytokens <- tokens(mycorpus)
mydfm <- dfm(mytokens)

# Perform LSA
mytdm <- convert(mydfm, to = "lsa")
mytdm_weighted = lw_logtf(mytdm) * gw_idf(mytdm)
myLSAspace = lsa(mytdm_weighted, dims=2)

# Here's how broom::augment could add 
# factor scores back to the original data frame
factor_scores <- as_data_frame(myLSAspace$dk)
(augmented <- bind_cols(mydf, factor_scores))

# Here's how tidytext:tidy could tidy the factor loadings
library("tidyverse")
# as.data.frame is used to maintain row names until
# rownames_to_column can get them
loadings_tidy <- as.data.frame(myLSAspace$tk) %>%
  rownames_to_column() %>%
  rename(term = rowname) %>%
  gather(factor, loading, # The new variables.
         starts_with("V"), # These go into "loading".
         -term) %>%  # term is not "gathered".
  arrange(factor, desc(loading)) %>% # Sort
  select(factor, term, loading) # Change var order to enhance readablity.

print(loadings_tidy)
```
Of course this can be achieved with tidyr::nest(). Proposing a wrapper to allow tidytext users to operate within the grammar of the package.
Do we want to implement a tidy interface to a stemming algorithm? I am aware of the one in [SnowballC](https://cran.r-project.org/web/packages/SnowballC/index.html), which we are already importing via dependency.
