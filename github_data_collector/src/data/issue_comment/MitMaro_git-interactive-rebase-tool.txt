Using version 1.2.0 i got following behaviour.

<img width="920" alt="before" src="https://user-images.githubusercontent.com/29912612/72336989-0f82b100-36c2-11ea-9da2-e0d905008854.png">
<img width="920" alt="mid" src="https://user-images.githubusercontent.com/29912612/72337001-15789200-36c2-11ea-8b72-4ad865a7dd4c.png">
<img width="920" alt="after" src="https://user-images.githubusercontent.com/29912612/72337019-19a4af80-36c2-11ea-990d-9984c7e42a9b.png">

As you can see color for i.e. bright-black seems to get changed but not reseted.
# Feature Request

Terminal emulators default to either a light background based theme or a dark background based theme. This tool assumes a dark background based terminal, but this isn't true for all terminals. For example the default terminal on Linux Mint:

![girt-white-background](https://user-images.githubusercontent.com/177427/71561915-a828f800-2a57-11ea-8fee-e071620071c4.png)

It is currently possible to modify the colors to ensure that the text is visible on a white terminal, but it should be possible to switch the rebase editor to a light/dark mode that would provide a better set of defaults.

This should also be configurable via an environment variable, so that systems that switch light/dark mode based on the time of day can dynamically change the mode. 

The color configuration should be updated to optionally take two colors per configuration.

Version 1.2.0 is ready to be released. A tasks required to get version 1.2.0 completed:

- [x] Test on Windows
- [x] Test on MacOS
- [x] Test on Linux
- [x] Update CHANGELOG
- [x] Bump Cargo.toml version number
- [x] Tag new release
- [ ] Release on Arch
- [x] Release to Cargo
- [x] Release to Homebrew
- [ ] Release to FreeBSD
- [ ] Release to Chocolatey
- [ ] Release to Scoop
- [ ] Verify release complete

I would nice to have this project available everywhere! I don't have the energy (or knowledge) to provide builds for everywhere the tool could be used. If anyone is willing to create a package I would be grateful!
 
**List taken from [ripgrep](https://github.com/BurntSushi/ripgrep#installation)**

* [x] Debian (.deb)
* [x] Homebrew
* [x] FreeBSD (pkg)
* [ ] Linuxbew
* [ ] MacPorts
* [x] Windows Chocolatey
* [x] Windows Scoop
* [x] Arch Linux (pacman)
* [ ] Gentoo (emerge)
* [ ] Fedora (dnf)
* [ ] openSUSE (zypper)
* [ ] Ubuntu (apt - PPA)
* [ ] OpenBSD (pkg_add)
* [ ] NetBSD (pkgin)

If anyone is willing to help please comment below!
It would be nice if, in addition to the commit information, the commit's diff/patch were shown.


Git supports a git rebase todo file that handles merges that occur during rebase. For example:

```
$ git rebase @~3 -i -r
label onto

# Branch MitMaro/tim/use-try-from
reset onto
pick 08d9e70 Use TryFrom trait now that it is stable
label MitMaro/tim/use-try-from

# Branch MitMaro/tim/basic-break-support
reset onto
merge -C 88cdea0 MitMaro/tim/use-try-from # Merge pull request #104 from MitMaro/tim/use-try-from
label branch-point
pick ac02006 Add basic support for the break instruction
label MitMaro/tim/basic-break-support

reset branch-point # Merge pull request #104 from MitMaro/tim/use-try-from
merge -C c9a6c7f MitMaro/tim/basic-break-support # Merge pull request #105 from MitMaro/tim/basic-break-support
pick 3a46420 Add full support for the break action

# Rebase 371df63..3a46420 onto 371df63 (12 commands)
#
# Commands:
# p, pick <commit> = use commit
# r, reword <commit> = use commit, but edit the commit message
# e, edit <commit> = use commit, but stop for amending
# s, squash <commit> = use commit, but meld into previous commit
# f, fixup <commit> = like "squash", but discard this commit's log message
# x, exec <command> = run command (the rest of the line) using shell
# b, break = stop here (continue rebase later with 'git rebase --continue')
# d, drop <commit> = remove commit
# l, label <label> = label current HEAD with a name
# t, reset <label> = reset HEAD to a label
# m, merge [-C <commit> | -c <commit>] <label> [# <oneline>]
# .       create a merge commit using the original merge commit's
# .       message (or the oneline, if no original merge commit was
# .       specified). Use -c <commit> to reword the commit message.
#
# These lines can be re-ordered; they are executed from top to bottom.
#
# If you remove a line here THAT COMMIT WILL BE LOST.
#
# However, if you remove everything, the rebase will be aborted.
#
# Note that empty commits are commented out
```
Would it be feasible to have exceptional package built for older Debian-based releases like Ubuntu 14.04 trusty? I've got a bunch of legacy setups where I'd like to use this tool but cannot upgrade to newer Ubuntu release =( If I got things right it's only about versions of dependencies not the tool itself.

Thanks in advance.
(I'm not sure where this option would go right since there's no config yet.)

It'd be neat if there was an option to have references to commits in the commit messages rewritten when successfully rebased. For example, let's say we have the following commits:

```
commit 7567b3365d2c2f18379b8305a174c99bc9f634dc (HEAD -> master)
Date:   Sat Sep 8 21:00:25 2018 -0230

    3rd
    
    Refs bcc2868

commit bcc2868f126a0392576c5ac4d4612d7d069444c9
Date:   Sat Sep 8 21:00:03 2018 -0230

    2nd

commit 9aff63810b6b22fa7fc8825791b2491d4e750a88
Date:   Sat Sep 8 20:59:57 2018 -0230

    1st
```

When I rebase the 2nd and 3rd commits it would be useful if the 3rd commit's message could automagically have its reference to `bcc2868` updated to the new hash of the 2nd commit.
It's nice to be able to diff your current tree from what you're rebasing against, and a keybinding like `v` (for `v`iew) to run `git diff` would be helpful.
At least in my case, there's often a bunch of unused screen real estate, and displaying the help menu (or changing the display of the `Actions:` bar at the bottom) would be nice. Sort of like [WordStar](https://en.wikipedia.org/wiki/WordStar#/media/File:Wordstar_Screenshot.png)