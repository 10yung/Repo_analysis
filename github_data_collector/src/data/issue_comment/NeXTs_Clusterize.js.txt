We want to show a list of lots of records and want to be able to filter them. That is why we need to keep the original array of the records (with the raw data) besides the array of HTML strings we provide to clusterize. When filtering, we use the raw data to find out what records should be shown, select those entries from the HTML strings array and send it to clusterize .update()

So basically, we need to versions of our data.

If we had two additional functionalities in clusterize I think we could make that more efficient:

- if we could define a draw callback that is executed for each row before appending it to the DOM, we could use this function to convert the raw data to the HTML string. Therefore we would not have to keep a separate array with the HTML strings besides the raw data, and could use the raw data array in clusterize.
- instead of calling .update() with a filtered array, it would be awesome if there was an .filter() function in clusterize where we can pass an array of row numbers. Clusterize would then redraw with the data it is initialized with currently, but would only show the rows that are listed in the array send to .filter()

I could try to implement some code, but I wanted to make sure that there are no better ways to save memory, and maybe get some directions where to start.
Hi, I wonder if is possible, cause at least is not working for me, to keep the scroll position when adding new rows to the data?

Basically I'm adding and removing elements from the array am using to update clusterized, so when

```
_orders.unshift('<li>new data</li>');
clusterized.update(_orders);
```

if am let say in the middle of the list, the list gets pushed down because of the new element, the problem is that in my use case I can be interacting with a row at that moment and the row gets pushed down

thanks for any help!
Hello there,

I am planing to use your great plugin for my system and I have a following question.s.

1. Is it possible programmatically to search by date, for example, start and end date?
2. Is it possible to programmatically change the color of specific cells?

Regards,
I have been trying to integrate this with my Angular 8 App.
Everything works as expected except for the case when I try to insert HTML with a custom component into the **rows** parameter.

As an example
`var data = ['<app-custom-component>…</app-custom-component>', '<app-custom-component>…</app-custom-component>', …];`
`var clusterize = new Clusterize({
  rows: data,
  scrollId: 'scrollArea',
  contentId: 'contentArea'
});`

In this case,
- The final rendered HTML doesn't translate to the HTML template of the custom component and rather displays the exact same HTML, word by word as loaded into the rows parameter.
- The fate of the DOM events is similar too. The click or hover events are not directly interpreted.

I understand that this might be because of the way Angular compiles Apps but is there still any way of using custom components, instead of directly using the custom component template's HTML in the rows value?
Is there a way?
I tried it, it instantiates but not working as supposed.
It loads first "X" rows_in_block and that's it. 
Best regards.
Im using real time database and listen to every new added item.
My array contains only 2 item, but it re-display an item which is the first item.
How to properly implement prepend() in dynamic content?

```
function someFunction(){

 const reports = [];
	
	const clusterize1 = new Clusterize({
	  scrollId: 'scroll-area1',
	  contentId: 'content-area1'
	});
	
//fetch from db
foreach(){

if(newAddedItem){
reports.push(some  tags);
clusterize1.prepend(reports);
}

}
}
       
```
I'm adding 2,039,224 lines to Clusterize.js but then I cannot scroll past line 1,342,180.  ``getRowsAmount()`` returns the correct number.

Has the ``<ul>`` reached some max height?  It's 33,554,400px high according to the browser.  I find it interesting that it is 32px shy of 2^25.  Those 32px could be an extra 16px top and bottom for borders or margins.  Any ideas?

**Update:**  It does appear to be a height limitation.  If I reduce the ``line-height`` then I can scroll further.  It would be nice if Clusterize.js didn't rely on having a massively tall container.  This was in Chrome, BTW.  May be different in other browsers.
I implemented ads on clusterize infinite scroll. The problem is when adding new data old items gets refreshed and ad slots are gone. How to prevent old items being refreshed when appending new data?.
how to make thead position fixed and not move when scrolling?
Let's say you have a page that is scrollable, with a screen or two (or more) of non-clustered content, followed by a massive list that you want to be clusterized (but not scrollable itself). This makes that work, by taking into account the offsetTop of the clustered content within the scrollable container, so that the correct cluster number is used.

I had this problem with my website, and found the solution in pull request #103 (thanks @vsesh for figuring it out). This version is based on the latest version of the library and has been simplified to only modify one line. Works like a charm on my site. 

Note, no minified version in this pull request.