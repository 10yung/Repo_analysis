I want to use gin  as a http server, may be beego. Is it has ability to customize container.
```go
// Returns allows you to document what responses (errors or regular) can be expected.
// The model parameter is optional ; either pass a struct instance or use nil if not applicable.
func (b *RouteBuilder) Returns(code int, message string, model interface{}) *RouteBuilder {
	err := ResponseError{
		Code:      code,
		Message:   message,
		Model:     model,
		IsDefault: false, // this field is deprecated, use default response instead.
	}
	// lazy init because there is no NewRouteBuilder (yet)
	if b.errorMap == nil {
		b.errorMap = map[int]ResponseError{}
	}
	b.errorMap[code] = err
	return b
}
```

now I can not use code to describe the response header, it can not automatically generate a complete swagger doc.

is there any way I can generate response header spec?
Builds on #381; review that first.

go-restful's Logger interface is from b80aca09 (#188), at which point the interface included both the `Print` and `Fatal` method families.  That interface moved to the log subpackage in 18c1d52a (#192).  And the interface was reduced to just `Print` and `Printf` in a40a6af9 (#194), but the interface is clearly not go-restful-specific.

More recently, [github.com/go-log/log][1] ([godocs][2]) was created as a stand-alone package with a similar interface (it has `Log` and `Logf` instead of `Print` and `Printf`).  Just this morning, go-log grew [a subpackage to convert from `Print`/`Printf` to `Log`/`Logf`][3].  That means we can offload our generic-logger shim to go-log, save a few lines of generic code here (after removing the deprecated code), and automatically benefit from go-logs other implementations (e.g. you can use [`info.New`][4] to plug in a logger based on [glog's `Verbose`][5]).

I've deprecated the old interfaces, but kept them around to facilitate migrations to the new approach.  The only breaking change should be the removal of `log.Logger`, so that folks who are setting that directly (vs. going through one of the two `SetLogger` functions) will get compile-time errors and notice that they have to update their usage.  If we don't mind jumping through a few extra hoops, we could keep `log.Logger` around for now and stage migration with:

Phase 1:

* Replace the public `restful.Logger` with a `restful.SetLogLogger` setter, that takes a go-log (`Log`/`Logf`) interface.
* Calling `restful.SetLogger`, `restful.SetLogLogger`, or `log.SetLogger` will all set `log.Logger`.  We'd need a `Log`/`Logf` -> `Print`/`Printf` shim for `SetLogLogger`.
* Keep importing go-restful/log and using `log.Print` and `log.Printf` where I'm currently using `Logger.Log` and `Logger.Logf`.

Phase 2:

* Drop go-restful/log and the other interfaces deprecated in this commit.
* Replace the removed `log.Logger` global with a new `restful.Logger`.
* Replace the `log.Print` and `log.Printf` calls with `Logger.Log` and `Logger.Logf`.
* Deprecate `SetLogLogger`.

Phase 3:

* Drop `SetLogLogger`.

Alternatively, you could make the global private (`restful.logger`) and keep `SetLogLogger`.  But I expect the go-log `Logger` interface to be stable enough that we don't need to hide it behind a setter, expecially one with as ugly a name as `SetLogLogger`, or `SetLogger2`, or whatever ;).  So my first take at this PR just drops `log.Logger` immediately to set us up for a simpler, two-phase migration (where phase 2 is just "drop all the deprecated stuff").

I also see that there's a [move-log branch][6] (without an associated PR) doing some similar log-subpackage shuffling.  As of d8185d6c, that branch is removing the log subpackage entirely, so maybe my backwards compat concerns are overblown ;).

[1]: https://github.com/go-log/log
[2]: https://godoc.org/github.com/go-log/log
[3]: https://godoc.org/github.com/go-log/log/print#New
[4]: https://godoc.org/github.com/go-log/log/info#New
[5]: https://godoc.org/github.com/golang/glog#Verbose
[6]: https://github.com/emicklei/go-restful/tree/move-log
It needs to import go-restful-swagger12 and the upstream appstats API has changed (NewContext is now unexported newContext). I can fix the former, but I have no idea how to solve the latter.
go-restful has all the information it needs to validate request bodies. It would be great if we could provide that feature to our users to catch malformed requests earlier.

See:
https://github.com/GoogleCloudPlatform/kubernetes/pull/2492

/cc @brendandburns
