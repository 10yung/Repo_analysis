### Null pointer dereferencing / Line 33-54
```c
void restart_register(const char *tag, restart_check_cb ccb, restart_save_cb scb, void *data) {
    // when no more available space to allocate, then it would return nullptr, so cb may be nullptr
    restart_data_cb *cb = calloc(1, sizeof(restart_data_cb));
    if (cb_stack == NULL) {
        cb_stack = cb;
    } else {
        restart_data_cb *finder = cb_stack;
        while (finder->next != NULL) {
            finder = finder->next;
        }
        finder->next = cb;
    }
    // cb is dereferenced below
    safe_strcpy(cb->tag, tag, RESTART_TAG_MAXLEN);
    cb->data = data;
    cb->ccb = *ccb;
    cb->scb = *scb;
}
```
### Memory Leak +  Null pointer dereferencing / Line 68-80
```c
static int restart_check(const char *file) {
    size_t flen = strlen(file);
    const char *ext = ".meta";
    // when no more available space to allocate, then it would return nullptr, so metafile may be nullptr
    char *metafile = calloc(1, flen + strlen(ext) + 1);
    // metafile is dereferenced and modified below
    memcpy(metafile, file, flen);
    memcpy(metafile+flen, ext, strlen(ext));

    FILE *f = fopen(metafile, "r");
    if (f == NULL) {
        fprintf(stderr, "[restart] no metadata save file, starting with a clean cache\n");
        // metafile is never freed in this branch
        return -1;
    }

```
### Memory Leak +  Null pointer dereferencing / Line 205-223
```c
static int restart_save(const char *file) {
    size_t flen = strlen(file);
    const char *ext = ".meta";
    // when no more available space to allocate, then it would return nullptr, so metafile may be nullptr
    char *metafile = calloc(1, flen + strlen(ext) + 1);
    // metafile is dereferenced and modified below
    memcpy(metafile+flen, ext, strlen(ext));
    mode_t oldmask = umask(~(S_IRUSR | S_IWUSR));
    FILE *f = fopen(metafile, "w");
    umask(oldmask);
    if (f == NULL) {
        perror("failed to write metadata file");
        return -1;
        // metafile is never freed in this branch
    }
    restart_data_cb *cb = cb_stack;
    restart_cb_ctx ctx;
    ctx.f = f;
    while (cb != NULL) {
        fprintf(f, "T%s\n", cb->tag);
        if (cb->scb(cb->tag, &ctx, cb->data) != 0) {
            // metafile is never freed in this branch
            return -1;
        }

        cb = cb->next;
    }
```

Hello,

With this Pull Request I'd like to request to add arm64 architecture to the build matrix at TravisCI.

ARM64 is used more and more for servers too and it would be good if Memcached is tested regularly.
I've ran the build and tests both on one of our arm64 machines and at [TravisCI](https://travis-ci.org/martin-g/memcached) and at the moment both are fine!

`amd64` is the default arch at TravisCI so it is preserved!
The header generated comes with $ IDs thus breaking the build.
The probes are set with const address arguments already
which just add the qualifier again.
* Update build instructions.
* Fix compilation issues in tests caused by not passing length of key.
* Fix tests broken by the change to ignore keys that do not have a
prefix ( commit b8ff91831829221d57944eafca28cf6420485061 ).
These lines are exception. Everywhere else return is followed by an immediate semicolon. This change will help future contributors to keep the style consistent.
Compiling with ASAN can help find improper memory management by detecting
leaks, use after frees, double frees, buffer overflows, etc.

It will profile the binary which has an effect on the binary size and
possibly a small impact on performance (although a lot better than valgrind).

We can use this from GCC-4.8 onwards.

To enable, during configure time, run:
./configure --enable-asan

Docs: https://github.com/google/sanitizers/wiki/AddressSanitizer

Limitations (Pulled from Clang docs, but should be similar for GCC):
https://clang.llvm.org/docs/AddressSanitizer.html#limitations
See background in: https://groups.google.com/d/msg/memcached/faWH90ivfE4/l_5Doq3zAgAJ
Signed-off-by: David J. M. Karlsen <david@davidkarlsen.com>

<!-- Reviewable:start -->
---
This change isâ€‚[<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/memcached/memcached/587)
<!-- Reviewable:end -->

See: https://github.com/docker-library/memcached/pull/54 - looks like newer OpenSSL's don't like the test certs.

I'm sure it's fixable in some way. @tharanga - want to pick this up?

related things to fix:
- tls.c: the stderr fprintf's before `exit(EX_USAGE)` calls shouldn't be gated on verbosity.
- in load_server_certificate, any way to add the SSL_error string into error_msg ?
check the token. less optimised than the usual memcmp especially
it goes through the whole buffers but more resilient against possible
attacks.

While at it, constifying a var which should have been.
Fix up tabular output for `memcached-tool ... stats`. Here's a snipped example of the current output:
```
$ ./scripts/memcached-tool localhost stats
#localhost:11211   Field       Value
         accepting_conns           1
               auth_cmds           0
...
        hash_power_level          16
               incr_hits           0
             incr_misses           0
                libevent 2.1.11-stable
          limit_maxbytes    67108864
...
             rusage_user    0.062149
   slab_global_page_pool           0
slab_reassign_busy_deletes           0
slab_reassign_busy_items           0
slab_reassign_chunk_rescues           0
slab_reassign_evictions_nomem           0
slab_reassign_inline_reclaim           0
   slab_reassign_rescues           0
   slab_reassign_running           0
             slabs_moved           0
...
                  uptime         642
                 version      1.5.20
```

And with the fix, the output should look like this, with all those wide fields and values aligned:
```
$ ./scripts/memcached-tool localhost stats
#localhost:11211        Field         Value
              accepting_conns             1
                    auth_cmds             0
                  auth_errors             0
                        bytes             0
                   bytes_read            35
                bytes_written          7615
                   cas_badval             0
                     cas_hits             0
                   cas_misses             0
                    cmd_flush             0
                      cmd_get             0
                     cmd_meta             0
                      cmd_set             0
                    cmd_touch             0
                  conn_yields             0
        connection_structures             3
        crawler_items_checked             0
            crawler_reclaimed             0
             curr_connections             2
                   curr_items             0
                    decr_hits             0
                  decr_misses             0
                  delete_hits             0
                delete_misses             0
              direct_reclaims             0
               evicted_active             0
            evicted_unfetched             0
                    evictions             0
            expired_unfetched             0
                  get_expired             0
                  get_flushed             0
                     get_hits             0
                   get_misses             0
                   hash_bytes        524288
            hash_is_expanding             0
             hash_power_level            16
                    incr_hits             0
                  incr_misses             0
                     libevent 2.1.11-stable
               limit_maxbytes      67108864
          listen_disabled_num             0
             log_watcher_sent             0
          log_watcher_skipped             0
           log_worker_dropped             0
           log_worker_written             0
            lru_bumps_dropped             0
          lru_crawler_running             0
           lru_crawler_starts          1275
       lru_maintainer_juggles           802
            lrutail_reflocked             0
                 malloc_fails             0
              max_connections          1024
                moves_to_cold             0
                moves_to_warm             0
             moves_within_lru             0
                          pid         19013
                 pointer_size            64
                    reclaimed             0
         rejected_connections             0
                 reserved_fds            20
                rusage_system      0.036835
                  rusage_user      0.071995
        slab_global_page_pool             0
   slab_reassign_busy_deletes             0
     slab_reassign_busy_items             0
  slab_reassign_chunk_rescues             0
slab_reassign_evictions_nomem             0
 slab_reassign_inline_reclaim             0
        slab_reassign_rescues             0
        slab_reassign_running             0
                  slabs_moved             0
                      threads             4
                         time    1575486561
   time_in_listen_disabled_us             0
            total_connections             7
                  total_items             0
                   touch_hits             0
                 touch_misses             0
                       uptime           754
                      version        1.5.20
```