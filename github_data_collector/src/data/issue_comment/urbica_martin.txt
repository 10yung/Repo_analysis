Any plans on allowing on-disk caching of tiles ?

So basically:
```
if(!tile_on_disk.exists) {
  run_sql
  save_to_disk
  return tile
}
else {
  return tile_on_disk
}
```
Hello ! Thank you for the superbe work ! 

I am wondering if we could expose only a entire schema instead of exposing one table at a time ?

Thank you
I would like your thoughts on how to generate multi-layer tiles.

My idea is to allow requests like `/{schema_name}.{table_name},{schema_name}.{table_name}/{z}/{x}/{y}.pbf` and use binary concatenation of `ST_AsMVT` statements to produce the tile, see https://postgis.net/docs/ST_AsMVT.html

I believe the only way to do this now is via function source, for example:

```PLpgSQL
CREATE OR REPLACE FUNCTION
  public.assets(z integer, x integer, y integer, query_params json)
RETURNS bytea
AS
$$
-- Prefer z,x,y inputs over z,x,y table columns.
#variable_conflict use_variable
DECLARE
  poles_mvt bytea;
  meters_mvt bytea;
BEGIN
  SELECT INTO poles_mvt
    ST_AsMVT(tile, 'public.poles', 4096, 'geom')
    FROM (
      SELECT
        ST_AsMVTGeom(shape, TileBBox(z, x, y, 3857), 4096, 64, true) AS geom
        ,"pole_number"
      FROM public.switches
      WHERE shape && TileBBox(z, x, y, 3857)
    ) AS tile
    WHERE geom IS NOT NULL;

  SELECT INTO meters_mvt
    ST_AsMVT(tile, 'public.meters', 4096, 'geom')
    FROM (
      SELECT
        ST_AsMVTGeom(shape, TileBBox(z, x, y, 3857), 4096, 64, true) AS geom
        ,"meter_number"
      FROM public.meters
      WHERE shape && TileBBox(z, x, y, 3857)
    ) AS tile
    WHERE geom IS NOT NULL;

  RETURN poles_mvt || meters_mvt;
END
$$
LANGUAGE plpgsql IMMUTABLE STRICT PARALLEL SAFE;
```

I have never developed in Rust, but Martin's codebase is so clean I could probably make these changes and issue a decent PR. What do you think?
The [openmaptiles](https://github.com/openmaptiles/openmaptiles) project also supports postgis-based tile generation - it can generate giant SQL statement (as either prepared statement, query, or function creation) that produces MVT from z,x,y.   Would it be possible to add support for the openmaptiles layer format in martin as well?  See [the postgis server](https://github.com/openmaptiles/openmaptiles-tools#test-tiles) (simple test server for testing purposes)
Running in some internal issue. I'm running a local docker 
`docker run \
  -p 3000:3000 \
  -e DATABASE_URL=postgres://postgres@host.docker.internal/db \
  urbica/martin` 
on my Mac OS. I've added a table with points. I made a website with mapbox GL and followed the directions in the README. The website is running on localhost.

Looks like I am running into a CORS issue and need help to solve.

<img width="1603" alt="Screen Shot 2019-08-26 at 5 11 04 PM" src="https://user-images.githubusercontent.com/4370150/63731693-a3440580-c825-11e9-935a-b8a83e2221bf.png">

Looks like the table is loading but when it fetched the "pbf" files is unreachable.

I'll appreciate the help.

Thanks



Can we store/map raster data using `postgis + martin` to speed up rendering on the client side?

**Edit:** And if it does not, how can that be achieved?
So Actix added SSL a while back (marginal benefit really), and recently HTTP/2; I've confirmed that both work behind nginx (or whichever other reverse proxy you care to use), though it would be nice for dev purposes to be able to run it standalone with HTTP/2, given the noticeable queueing effect incurred by HTTP/1.1 (irrespective of load on the database workers). 

I'll tinker with it over the coming weekend (should be relatively straightforward), would you mind if I submit a PR to that effect?
