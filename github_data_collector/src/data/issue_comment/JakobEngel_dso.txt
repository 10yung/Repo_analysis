Recently, I carefully reviewed your code and found the following code very confusing, could you please explain why you accumulate `E` rather than `EAlpha`:

https://github.com/JakobEngel/dso/blob/ae1d0b3d972367b0a384e587852bedcf5f414e69/src/FullSystem/CoarseInitializer.cpp#L502-L519

During the accumulation of energy from depth estimation, you looped all points and just updated `E` in the loop, and later on use the unchanged `EAlpha` to calculate `alphaEnergy`.
Hi,

Thanks for your contribution. It works wonderful for our use case. However, I need to keep track only of trajectory for short distance( around 100 meter) .

Instruction says to refer IOWrapper/Output3DWrapper.h and IOWrapper/OutputWrapper/SampleOutputWrapper.h  to get data we need. However I haven't figured it all out.

could you please share any insight on how i can get only trajectory information ( nothing else) for short distance.

Thanks,
Madhu.

Greetings, i'm trying to gather rotation in Euler angles by collecting quaternions from `publishCamPose` method and than converting it to Euler.

```
void publishCamPose(FrameShell* frame, CalibHessian* HCalib) override {
    Eigen::Quaterniond quat(frame->camToWorld.rotationMatrix());
    ...

```
```
    struct EulerAngles
    {
        double roll, pitch, yaw;
    };

    struct Quaternion
    {
        double w, x, y, z;
    };

    EulerAngles ToEulerAngles(Quaternion q)
    {
        EulerAngles angles;

        // roll (x-axis rotation)
        double sinr_cosp = +2.0 * (q.w * q.x + q.y * q.z);
        double cosr_cosp = +1.0 - 2.0 * (q.x * q.x + q.y * q.y);
        angles.roll = atan2(sinr_cosp, cosr_cosp);

        // pitch (y-axis rotation)
        double sinp = +2.0 * (q.w * q.y - q.z * q.x);
        if (fabs(sinp) >= 1)
            angles.pitch = copysign(M_PI / 2, sinp); // use 90 degrees if out of range
        else
            angles.pitch = asin(sinp);

        // yaw (z-axis rotation)
        double siny_cosp = +2.0 * (q.w * q.z + q.x * q.y);
        double cosy_cosp = +1.0 - 2.0 * (q.y * q.y + q.z * q.z);
        angles.yaw = atan2(siny_cosp, cosy_cosp);

        return angles;
    }


double quatToAngle(double x, double y, double z, double w)
{
    return 2*asin(std::sqrt(std::pow(x, 2) +
                     std::pow(y, 2) +
                     std::pow(z, 2))) * 180 / M_PI;
}
```

But than plots shows some very strange angles: 

![123](https://user-images.githubusercontent.com/21631804/67283473-68d0af00-f4dc-11e9-9a9d-8dbb4c48e555.png)

It's not normal, cause azimuth from gnss is ok and i've never tried to do a barrel roll

![123_gnss](https://user-images.githubusercontent.com/21631804/67283682-c8c75580-f4dc-11e9-86f5-c00295033a9f.png)

Need some hints, what am i doing wrong? Might it be because of z axis is depth?
@NikolausDemmel @AlexandrGraschenkov @israelshirk @JakobEngel @Yelen719

how to make every frame as a keyframe and exclude all poses in results.txt file
Why is the saved 3D point coordinates so much noise that it is impossible to display the point cloud information completely in software such as meshlab?
@JakobEngel @NikolausDemmel @AlexandrGraschenkov @israelshirk @Yelen719 

I gave 3000+ images as input to DSO algo and got only 500 poses as output in text file. I don't know why this algo missed the 2500 image's poses so I am not sure these 500 poses are of which images !
**how to get the poses for every corresponding images.?**

same problem on TUM dataset and custom dataset.


Thanx in advance.

Regards
@JakobEngel error while type make -j4 ib build directory

![error](https://user-images.githubusercontent.com/38114191/66307507-0ee9ba00-e91e-11e9-80b0-b42633dd8b6c.png)


[ 92%] Built target dso
[ 96%] Linking CXX executable bin/dso_dataset
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFReadDirectory@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFWriteEncodedStrip@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFIsTiled@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFScanlineSize@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFRGBAImageOK@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFClose@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFSetWarningHandler@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFWriteScanline@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFGetField@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFNumberOfStrips@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFReadEncodedTile@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFReadRGBATile@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFClientOpen@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFOpen@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFReadEncodedStrip@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFSetField@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFSetErrorHandler@LIBTIFF_4.0'
/opt/ros/kinetic/lib/x86_64-linux-gnu/libopencv_imgcodecs3.so.3.3.1: undefined reference to `TIFFReadRGBAStrip@LIBTIFF_4.0'
collect2: error: ld returned 1 exit status
CMakeFiles/dso_dataset.dir/build.make:166: recipe for target 'bin/dso_dataset' failed
make[2]: *** [bin/dso_dataset] Error 1
CMakeFiles/Makefile2:67: recipe for target 'CMakeFiles/dso_dataset.dir/all' failed
make[1]: *** [CMakeFiles/dso_dataset.dir/all] Error 2
Makefile:83: recipe for target 'all' failed
make: *** [all] Error 2

Can anyone explain to me the photometric and geometric error injections in the DSO paper. I am unsure about the sampling scheme. It would be very helpful.

Thankyou
```
--- found PANGOLIN, compiling dso_pangolin library.
--- found OpenCV, compiling dso_opencv library.
--- found ziplib (1.1.1), compiling with zip capability.
--- compiling dso_dataset.
-- Configuring done
-- Generating done
-- Build files have been written to: /dso/build
...
[100%] Linking CXX executable bin/dso_dataset
[100%] Built target dso_dataset
```
There is no executable binary after it is finished building