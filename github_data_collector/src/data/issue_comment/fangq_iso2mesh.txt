A quick and dirty fix for cgalmesh part of issue #7 (missing regions in cgalmesh output). Support for non-uint8 images and >256 regions is also included. This is probably just a starting point for complete fix but maybe it helps anyway.
While the included 32bit windows binaries can also be executed on 64bit windows, for creating meshes with large memory demands, native 64bit windows utilities are needed. This was requested previously by users in the mailing list:

https://groups.google.com/forum/?hl=en#!searchin/iso2mesh-users/64bit$20windows

Removing self-intersecting elements is extremely important, however, the current available method, `meshcheckrepair('meshfix')` calls `meshfix` (https://code.google.com/p/meshfix/) made by Marco Attene et al. which can only repair simple surfaces (homologous to a sphere). We need something more general to deal with complex surfaces such as two intersecting spheres.

The previous report can be found here:

http://cgal-discuss.949826.n4.nabble.com/missing-objects-when-meshing-a-3D-image-with-multiple-disconnected-inclusions-td3349283.html

Testing image is included in the above report.

Basically, if there are multiple isoloated inclusions (same or differnt label) inside a background volume of index 0, the surface mesher or 3D mesher may return the mesh of a subset of these inclusions in a more or less random manner.

The mesh simplification algorithm used in CGAL does not ensure the output mesh is self-intersection free. An alternative or update to Surface_mesh_simplification that ensures self-intersection-free would be very useful.

Quite often, cgalsurf (Surface_mesher class in CGAL 3.x) produces an unusually dense node cluster as a result of a focused surface refinement; sometimes, this refinement can result in an infinite loop which eventually exhausts the system memory. This issue was originally reported here:

http://cgal-discuss.949826.n4.nabble.com/Bug-infinite-refinement-for-CGAL-Surface-mesher-td3024338.html#a3028414

A maximum node number count limit was added to iso2mesh to prevent the infinite loop, but still, many users had complained about the sub-optimal mesh quality of the mesh with uneven node distributions. The previous user reports can be found here:

https://groups.google.com/d/msg/iso2mesh-users/Wx_EKVJSVSE/WEbGED42oXAJ
https://groups.google.com/d/msg/iso2mesh-users/aRll2B0BKm0/_CTeiyFMlMwJ
https://groups.google.com/d/msg/iso2mesh-users/UermqCPNY_g/BgHf32g-Pj0J
https://groups.google.com/d/msg/iso2mesh-users/N-kF7Tmoyqk/TnD_ZkKFH2kJ
https://groups.google.com/d/msg/iso2mesh-users/EeBtu_ZUyUY/HzrFVEOl3uYJ

![mesh](https://cloud.githubusercontent.com/assets/226913/8133846/b3fab01a-10f8-11e5-8b79-2f1c2d1e13d5.png)
![mymeshproblem](https://cloud.githubusercontent.com/assets/226913/8133852/bcddb9f2-10f8-11e5-9092-c9b807b15695.jpg)

now these functions are partially working, but the results are not completely verified.

https://github.com/fangq/iso2mesh/blob/master/mesh2vol.m
https://github.com/fangq/iso2mesh/blob/master/mesh2mask.m

Some have examples already, need to do this for the rest
