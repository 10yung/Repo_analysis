TCP Fast Open is supported in [shadowsocks-libev](https://github.com/shadowsocks/shadowsocks-libev). Since it is one of the most popular shadowsocks servers implementation, it would better to be compatible with it.

## TODO

- Network Library Support
    * [ ] Mio: https://github.com/tokio-rs/mio/issues/638
    * [ ] Tokio
    * libc
        - [ ] macOS: https://github.com/rust-lang/libc/issues/1632
        - [ ] Linux, already supported. But using `TCP_FASTOPEN_CONNECT` in Kernel >= 4.11 would be a lot more convenient. https://github.com/rust-lang/libc/issues/1633
        - [x] Windows. All APIs are already supported in `winapi` crate.
            * Missing `TCP_FASTOPEN` definition: https://github.com/retep998/winapi-rs/issues/856
            * Don't know how to use `ConnectEx`, fallback to `connect` temporary
`sslocal` could support a proxy white list, only proxy those requests that target addresses are in the list.

- `sslocal` supports white list (including TCP, UDP)
- Support loading from URLs, such as [gfwlist](https://github.com/gfwlist/gfwlist)

Open for contribution.
您好, 代码中采用 dl.google.com 这个域名来测试访问速度其实是不可行的, 因为 dl.google.com 在中国并没有被屏蔽, 这就直接导致负载均衡算法从整体上效果不怎么样.

所以选择一个好的稳定的被屏蔽的域名是比较重要的, 建议使用 google.com 这个域名或者 youtube.com 等. 但是从一方面来讲, 把域名写死到里面并不太优雅, 可以考虑将其放到配置文件中, 这样可以方便不同地区的人定制使用. 我把代码中的 dl.google.com 更换后, 重新编译后负载均衡算法工作良好, 体验很不错.
Is there any plan to support SSR protocol?
首先，安装vcpkg，然后进行集成
```
git clone https://github.com/Microsoft/vcpkg.git
cd vcpkg
.\bootstrap-vcpkg.bat
.\vcpkg integrate install
```
然后，安装libsodium和openssl的windows静态库
```
vcpkg install openssl:x64-windows-static
vcpkg install libsodium:x64-windows-static
```
设置rust静态链接
```
set RUSTFLAGS=-Ctarget-feature=+crt-static
```
按照shadowsocks-rust的正常安装流程安装
```
cargo build --release
```
这样编译出来就是静态链接的单文件版。
https://github.com/shadowsocks/shadowsocks/wiki/Feature-Comparison-across-Different-Versions
As asked in #151 , currently our load balancing algorithm is simply Round Robin, which is good if all your servers have good qualities, otherwise, when any of your servers down, `sslocal` will still try to connect that broken server.

So I think we need a better server choosing algorithm.

One simple strategy came out of my mind is:

- Ping servers periodically, record their delay
- Choose the server that has the lowest delay

Strictly this is not a Load Balancing algorithm anymore. But .. it is always the best to use the fastest server.
具体算法实现是怎样的?  会检测服务器的可用性吗？
As above.

I believe the timeout defaults to 300 seconds.
If using `shadowsocks-rust` as a library. And one want to keep the process running after terminating the shadowsocks part. Then the shadowsocks sockets are left open and are never properly closed on Windows.

This is likely due to this bug: https://github.com/carllerche/mio/issues/776

I'm not sure if that bug can be solved in itself, thus making `mio` better. Or if there is anything simple one can do here in shadowsocks in order to not trigger the problem. But I want to leave this issue here so it's documented for now at least.