Hi,

Really liking Squirrel and am hoping the development continues but I am wondering if there is a way to compartmentalize the updates.

For example the main application is over 500Mb but inside that application are several unrelated components each of which are only 1Mb.

Can you have the nuspec setup in a way that there are dependencies to other nuspec files each of which download and update independently?

There would be no point running the component without the main application so no shortcut would be required and the components would have to install to a location known to the main application to run.

Thanks
1. Take the 1.6.2 branch of [reactiveui/splat](https://github.com/reactiveui/splat/releases/tag/1.6.2)
2. Take the bare minimum required for Squirrel, change name space
3. Remove NuGet references to Splat
4. Correctly name things
5. Update to VS2019, Update GitVersioning

Tests ran 100% before and after this change.

I started an installation and  try to cancel it - but installation is not stopped.
I thinks there should be a possibility to cancel installation. 

[2590:4550][2020-01-15T11:44:40]e000: Error 0x80070642: Bootstrapper application aborted during EXE progress.
[2590:4550][2020-01-15T11:44:40]e000: Error 0x80070642: Failed to configure per-user EXE package.


**Squirrel version(s)**
1.9.0 trying to upgrade to 1.9.1

**Description**
In this commit: https://github.com/Squirrel/Squirrel.Windows/commit/c1e8987e2a42c7124600a79b7592d67fbd488969#diff-3b1ce2ddd72c8c150c95e50f61b0778e @anaisbetts looks like a version bump also included a change which fixes the SharpCompress dependency version to 0.17.1. I am already ahead of this as was permitted by the 1.9.0 version, which means that I am now in a bit of a funny state as I would have to go backwards on SharpCompress in order to forwards on Squirrel.

Now as this isn't linked to a work item or mentioned in the commit, I wonder if it was accidental while testing something else at the same time as doing the version bump. Is it possible to check, and if so, can 1.9.2 be issued with it rolled back?

Having a search of the issues I see there have been some issues upgrading it in the past, so similarly if it is now a requirement to have 0.17.1 it would be good to know that for certain so I can take positive action to roll that back.

Thank you :-)
I have a solution in TeamCity and a shared folder where the releases are stored and exported. I have automated the release cycle with a powershell script and inside there is the the command
`& $squirrelPath --releasify $PSScriptRoot\$ExePath\$NugetName.$Version.nupkg --releaseDir $ReleaseFolder --no-msi`
Suddenly, it stopped export of "full" and "delta" packages, also it stopped updating the "setup.exe" and it only produces "$name-$version.nupkg" in the shared folder. I didn't change the code, neither the build steps in TeamCity.
Any ideas?
Hi - I am struggling to get the Squirrel updater to work with github.  I am currently getting the error message in the title of this thread.  Can anyone help or point be at a step by step tutorial for setting this up?
**Squirrel version(s)**
1.8.0

**Description**
App does not restart after calling UpgradeManager.RestartApp(), even if I provide the filename to the non-version launcher it does not reopen.  The SquirrelSetup.log is in the version folder and indicates it is trying to find \app-x.y.z\packages\releases instead of \packages\releases so my guess is somehow the updater is running from the version directory instead of the parent.

**Expected behavior**
App closes with no displayed errors, nothing in event log, the old version of the app does not go into the catch() steps.  New version does not open, SquirrelSetup.log is created with an error inside.

**Actual behavior**
New version should launch.

**Additional information**
SquirrelSetup.log attached.  Username and appname have been replaced.  File name was: 
C:\Users\{user}\AppData\Local\{app}\app-1.2.2\SquirrelSetup.log

[SquirrelSetup.log](https://github.com/Squirrel/Squirrel.Windows/files/3851711/SquirrelSetup.log)

I've followed the example here https://github.com/Squirrel/Squirrel.Windows/issues/979 but I'm facing some issues I just can't work out. I've actually put the code provided into a separate SoftwareUpdater project in Visual Studio and provide a callback function from the main application for providing the UI interaction so I can reuse this library with WinForms, WPF or whatever without the updater library needing to know what presentation technology is being used:

`public class SquirrelUpdater : ISoftwareUpdater
{
    private static readonly Logger _logger = LogManager.GetCurrentClassLogger();

    public async Task UpdateAsync(string updateUri, Func<string, PerformSoftwareUpdate> confirmUpdateFunc)
    {
        using (var mgr = new UpdateManager(updateUri))
        {
            // https://github.com/Squirrel/Squirrel.Windows/issues/979
            _logger.Info("Checking for updates...");
            try
            {
                var updateInfo = await mgr.CheckForUpdate();                
                if (updateInfo.ReleasesToApply.Any())
                {
                    var versionCount = updateInfo.ReleasesToApply.Count;
                    _logger.Info($"{versionCount} update(s) found.");

                    var versionWord = versionCount > 1 ? "versions" : "version";
                    var message = new StringBuilder().AppendLine($"App is {versionCount} {versionWord} behind.")
                        .AppendLine("If you choose to update, changes won't take affect until App is restarted.")
                        .AppendLine("Would you like to download and install them?")
                        .ToString();

                    var result = confirmUpdateFunc(message);
                    if (result != PerformSoftwareUpdate.Yes)
                    {
                        _logger.Info("Update declined by user.");
                        return;
                    }

                    _logger.Info("Downloading updates");
                    var updateResult = await mgr.UpdateApp();
                    _logger.Info(
                    $"Download complete. Version {updateResult.Version} will take effect when App is restarted.");
                }
                else
                {
                    _logger.Info("No updates detected.");
                }
            }
            catch (Exception ex)
            {
                _logger.Warn($"There was an issue during the update process! {ex.Message}");
            }
        }
    }
}`

When debugging I found that the `var updateInfo = await mgr.CheckForUpdate();` call got swallowed up and when this happens it's usually something to do with async, my calls are correctly configured as far as I can tell:
`public async Task RunAsync()
{
    // Check for software updates
    var updateUri = ConfigurationManager.AppSettings["UpdateUri"];
    await _softwareUpdater.UpdateAsync(updateUri, message =>
    {
        var result = MessageBox.Show(message, @"App Update Available", MessageBoxButtons.YesNo);
        return result == DialogResult.Yes ? PerformSoftwareUpdate.Yes : PerformSoftwareUpdate.No;
    });

    ConfigureEnvironment();

    // Make simple call to database to ensure it gets created if not present
    var custs = _repository.GetCustomers();

    Application.Run(_mainForm);
}`

If I take out the calls to the update the application runs fine.
Soo, I tried releasifying to see what happens and it installs but I get a stack of errors
[SquirrelSetup.log](https://github.com/Squirrel/Squirrel.Windows/files/3835980/SquirrelSetup.log)

The C:\Users\steve\AppData\Local\ServiceToolbox\packages\ exists so why is it complaining about not being able to write to .betaid? Isn't this stuff supposed to be done by Squirrel?

I'm lost, anyone know what may be going on?



This seems like a great alternative to ClickOnce. I'm just getting started using Squirrel and so far it's been great, but I've found a couple of differences with ClickOnce:

1. The fourth digit of the version number must be left at zero, otherwise, it'll break the NuGet package.
2. Settings won't be automatically copied when an update is made, this must be done programmatically.

I noticed these two just as I was getting started, so I wonder how many other differences there may be that I haven't thought of. I think it would be nice to have a comprehensive list of differences between how ClickOnce and Squirrel work (especially since ClickOnce is mentioned in the tagline), to prevent users like myself from running into trouble when it's already too late.
Closes #1556