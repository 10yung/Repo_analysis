As mentioned, `hie` is working well in (neo)vim now.
Details are in this blog [Vim and Haskell in 2019](marco-lopes.com/articles/Vim-and-Haskell-in-2019/).
Hence, why not replace `ghc-mod`?
I'd like to disable the automatic removal of blank space at the ends of lines in my Haskell code, so I can better control the resultant formatting of the Haddock generated documentation (by forcing line breaks, using two blank spaces at the end of a line).

**Does anyone know which plugin is responsible for removing blank space at the end of lines when writing out the file?**

So, weird noob question.

When I just write Haskell code, which file or line of code is responsible for indenting where clauses and guards, for example?
Hey guys, I'm sorry to bother you, but my Vim is now broken. No other language is now recognised, and many of my commands don't work anymore. And the commands you state don't work either, although most likely I don't event know how to use them, it's not documented.
Also, installation took around 7h of my i7 processor at full power all the time, looping over all possible lts versions, only to fail at installing ghc-mod in all of them, and taking 4gb of my SSD I have no idea where. And now I don't even find an option to uninstall and revert back to my previous vim.

Working on Ubuntu 16.04 in the Windows' Linux Subsystem for Windows 10 last update as of today.
Using this issue as a brainstorming/feedback on caching the Haskell helper binaries.

Installing the helper binaries is currently the big wrinkle in the whole `haskell-vim-now` install process and is tricky to get right with the current approach of using `stack` to dependency solve all of them in one fell swoop.  The helper binaries are also the most time-consuming part of the whole install (especially when we have to download different versions of GHC to build subsets of them).

Was thinking it'd be nice to have CI build all the helper binaries for various OSes and upload them to github releases.  We could then get rid of the complicated & brittle code in `setup_haskell.hs` and replace it with a download and unzip of a zip file with all the needed binaries.

This would cut the install time down considerably - it would probably only take 5-10 minutes total instead of the 20-30 minutes clean install now - and would reduce complexity in the install.  Users may have concerns with installing a bunch of binaries from a zip, but we could point them to the repo/spot where they are generated for further audit.

Something I'm not sure of: if we use Travis to build binaries on a Trusty box for example, can those same linux binaries be run on the other Linux distributions `haskell-vim-now` supports?
I've been unsuccessfully trying to install [vim-stylish-haskell](https://github.com/nbouscal/vim-stylish-haskell) with regard to [Customizing](../blob/master/README.md#customizing) section.

Unfortunately it isn't obviously to me which of three mentioned file I've to use. So I sequentially used all three with the same content below:
```
call plug#begin('~/.vim/plugins-extra')
Plug 'git@github.com:nbouscal/vim-stylish-haskell.git'
call plug#end()
```
It appears to me the `vim` behavior is the same by using `vimrc.local` or `plugins.vim`:
`:PlugInstall` shows only:
`- vim-stylish-haskell: Already installed`

`vimrc.local.pre` seems to be ignored at all.
`:PlugInstall` shows all except `vim-stylish-haskell`:
```
- gitignore: Already installed
- vim-extradite: Already installed
- vimproc.vim: Already installed
- tslime.vim: Already installed
- nerdtree: Already installed
- hlint-refactor-vim: Already installed
- vim-indent-object: Already installed
- vim-haskellConcealPlus: Already installed
- vim-bbye: Already installed
- vim-commentary: Already installed
- vim-fugitive: Already installed
- tagbar: Already installed
- vim-mundo: Already installed
- Align: Already installed
- tabular: Already installed
- ghcmod-vim: Already installed
- neomake: Already installed
- vim-airline: Already installed
- vim-bracketed-paste: Already installed
- vim-indent-guides: Already installed
- vim-easymotion: Already installed
- wombat256.vim: Already installed
- neco-ghc: Already installed
- ctrlp.vim: Already installed
- vim-tmux-navigator: Already installed
- vim-hoogle: Already installed
- supertab: Already installed
- haskell-vim: Already installed
```

Installing helper binaries...
    stack --resolver lts-10.3 install ghc-mod --install-ghc --verbosity warning
Plan construction failed.
"stack --resolver lts-10.3 install ghc-mod --install-ghc --verbosity warning" failed with error 1
*** setup_haskell.hs failed with error 1.
*** Aborting...

A coworker got me hooked on [`fzf`](https://github.com/junegunn/fzf.vim).  Interested in a PR to replace `ctrl+p` with `fzf`?

Another nice bit:  `fzf` can use [`ripgrep`](https://github.com/BurntSushi/ripgrep) as the backing search tool for searching the contents of files and it is super fast.  I've been exclusively using `ripgrep`-powered `fzf` for code searching recently.
The `,y` and `,p` key sequences work, from the _MacVim_ GUI, but not when I run _vim_ from a _tmux_ terminal.

I'm finding that the `,bo` key sequence does _not_ close all other buffers. It simply reports:

> Already only one window.
