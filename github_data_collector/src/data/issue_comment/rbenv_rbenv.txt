_Originally posted by @mislav in https://github.com/rbenv/rbenv/issues/1207#issuecomment-574261566_

I have recently started a new Mac running Catalina with .zsh.  In a new project, `gem install budler` returns:
You don't have write permissions for the /Library/Ruby/Gems/2.6.0 directory.

Please offer any help for this problem or allow me to clarify if you need further information.  Thanks!

I run `gem env home`:
/Library/Ruby/Gems/2.6.0

I run `rbenv global`:
system

I run `rbenv shell`:
rbenv: no shell-specific version configured

I run `rbenv init -`:
export PATH="/Users/theresamarquis/.rbenv/shims:${PATH}"
export RBENV_SHELL=zsh
source '/usr/local/Cellar/rbenv/1.1.2/libexec/../completions/rbenv.zsh'
command rbenv rehash 2>/dev/null
rbenv() {
  local command
  command="${1:-}"
  if [ "$#" -gt 0 ]; then
    shift
  fi

  case "$command" in
  rehash|shell)
    eval "$(rbenv "sh-$command" "$@")";;
  *)
    command rbenv "$command" "$@";;
  esac
}

I run `echo $PATH`:
/Users/theresamarquis/.rbenv/shims:
/Users/theresamarquis/.rbenv/bin:
/Users/theresamarquis/.rbenv/shims:
/Users/theresamarquis/.rbenv/bin:
/usr/local/bin:
/usr/bin:
/bin:
/usr/sbin:
/sbin:
/Applications/Postgres.app/Contents/Versions/latest/bin:
/Users/theresamarquis/.rbenv/bin:
/Users/theresamarquis/.rbenv/shims

I look at /etc/paths:
/usr/local/bin
/usr/bin
/bin
/usr/sbin
/sbin

Running rbenv-doctor with `curl -fsSL https://github.com/rbenv/rbenv-installer/raw/master/bin/rbenv-doctor | bash` returns:
Checking for `rbenv' in PATH: /usr/local/bin/rbenv
Checking for rbenv shims in PATH: OK
Checking `rbenv install' support: /usr/local/bin/rbenv-install (ruby-build 20200115)
Counting installed Ruby versions: 1 versions
Checking RubyGems settings: OK
Auditing installed plugins: OK

 `.zshrc` contains:
source $HOME/.zshenv
export RUBY_CONFIGURE_OPTS="--with-openssl-dir=$(brew --prefix openssl@1.1)"
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

`.zshenv` contains:
export PATH="$HOME/.rbenv/bin:$PATH"
I have setup rbenv according to the documentation on a fresh CentOS 7.7 machine. The result is that the installation does not work (`ruby` is not found regardless of me adding it as local or global). I finally found out that the `shims` directory never makes it to the path and therefore executed

`echo 'export PATH="$HOME/.rbenv/shims:$PATH"' >> ~/.bash_profile`

which made the stuff work. I am unsure whether the installer or `rbenv init` should do this or the documentation is lacking this step.
There might be tools interested in the original path (https://github.com/pyenv/pyenv/pull/1169#issuecomment-535693545).

This was included in https://github.com/rbenv/rbenv/pull/1089, but closed for other reasons.

Do you think it makes sense to provide the original PATH in a separate variable?
Not sure if anyone else has encountered this already with serving ruby 2.5.3 app. I am trying to serve an app that uses ruby 2.5.3. I get the following from terminal

```
$ rails server
Traceback (most recent call last):
	4: from bin/rails:3:in `<main>'
	3: from bin/rails:3:in `load'
	2: from /Users/tiffanylo/CHAYN/SoulMedicine/soulmedicine/bin/spring:8:in `<top (required)>'
	1: from /Users/tiffanylo/.rbenv/versions/2.5.3/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require'
/Users/tiffanylo/.rbenv/versions/2.5.3/lib/ruby/2.5.0/rubygems/core_ext/kernel_require.rb:59:in `require': cannot load such file -- bundler (LoadError)
```

Makes rbenv look for Ruby installations in both ~/.rbenv/versions _as well as_ in `RBENV_SYSTEM_VERSIONS_DIR`, if set. This allows installing Ruby versions in a system-wide manner that's available to all users on the system.
When SHELLOPTS is exported/set when bash starts up, it will use settings
from there.
A common use case might be to export/use it for "xtrace", but that
should not cause errors inside of rbenv/pyenv for things like `[ -n
"$FOO" ]`.

Ref: https://github.com/pyenv/pyenv/pull/1273
Ref: https://github.com/pyenv/pyenv/pull/1237
This PR:

* Buffers the `help` output so that it is printed all at once, rather than a "scrolled" output
* L103 requires a trailing space after a newline, otherwise bash strips newlines when strings are "psuedo-returned" from a function

Prior (unbuffered)
![rbenv-unbuffered](https://user-images.githubusercontent.com/856001/53801839-57aa5080-3f94-11e9-96a4-a4767cdc5bd4.gif)

Buffered
![rbenv-buffered](https://user-images.githubusercontent.com/856001/53801674-e23e8000-3f93-11e9-93e7-3969f4dbfab0.gif)

Just to get the ball rolling. It's a bad convention. I'm not a dev on this project, just a user.

Recent conversation on this topic: https://news.ycombinator.com/item?id=19063727

I successfully just used $RBENV_ROOT to install .rbenv in another location, so I assume it wouldn't be a big deal technically to change it by default to something more sane.
`rbenv-version-file` (which `rbenv-version` uses indirectly by way of `rbenv-version-name` and `rbenv-version-origin`) by default does its file lookup starting from `RBENV_DIR` and works up the hierarchy; falling back to `PWD`. (though, `RBENV_DIR` itself is defaulted to `PWD` by `rbenv`, if not already set in the environment, so in most cases the fallback is a noop)

However, `rbenv-local` explicitly forces the file lookup to only look from `PWD`, ignoring `RBENV_DIR` entirely. This leads to some dissonance in certain scenarios:

Given:

```
$ pwd
/tmp
$ cat /tmp/foo/.ruby-version 
2.5.1
$ export RBENV_DIR=/tmp/foo
$ rbenv version
2.5.1 (set by /tmp/foo/.ruby-version)
$ rbenv local
rbenv: no local version configured for this directory
```

So `rbenv-version` (and thus the rbenv itself when invoking a shim) considers the version to be set by a "local" file in the `RBENV_DIR` hierarchy, but `rbenv-local` reports "no local version set". Further, attempting to `rbenv-local --unset` would be a noop and would not delete the `.ruby-version` file found in `RBENV_DIR`; which is rather confusing. (I would expect `rbenv version` to be determined by the global version file immediately after `rbenv local --unset`; not continue to be determined by a local file.) The same inconsistency pertains to overwriting a local version or even creating one.

I traced through some history as it pertains to this behavior:

- Initially rbenv would read from `PWD` _and up_
- `rbenv-local` would only read/write/delete the file _directly_ in `PWD`
- Later, 07815769aeda3097f43d032fb31f6c89d1a7942f introduced `RBENV_DIR` such that `rbenv-version` would respect a specified directory other than `PWD` (`rbenv-local` still ignored `RBENV_DIR`)
- Later still, 6c1fb9ffd062ff04607d2e0f486067eaf6e48d1e added `PWD` as a fallback for `RBENV_DIR` (`rbenv-local` still ignored `RBENV_DIR`)
- ca252599007375ffbb3522a736a2a7a7d1eeccde prepared `rbenv-version-file` such that `rbenv-local` could leverage it
- then ba072adcb99a5c77df2a93afccdca59a23703696 changed `rbenv-local` to use `rbenv-version-file` for the local file lookup. This commit changed `rbenv-local` behavior to respect files found in the hierarchy, not only immediately in `PWD`. However, it still only uses `PWD` for the lookup.

So it seems that from the very introduction of `RBENV_DIR`, it wasn't respected consistently by rbenv's subcommands. However, each subsequent change reduced the dissonance somewhat. (first adding `PWD` as a fallback for `RBENV_DIR`; and later ensuring `rbenv-local` would look up the directory hierarchy just as `rbenv-version` did)

The only remaining inconsistency is that `rbenv-local` doesn't respect `RBENV_DIR` at all (if set). Is this agreed to be a bug and PR welcomed?
I'm on Ubuntu 18.04 and use Bash.

When I followed step 2 of [Basic Github Checkout in README](https://github.com/rbenv/rbenv/blob/master/README.md#basic-github-checkout), I executed both a step for Bash and for Ubuntu Desktop.

That caused the appearance of `~./bash_profile` which isn't sourced by default in the shell.

So when I executed `rbenv init`, I was advised to append a line to [`~./bash_profile`](https://github.com/rbenv/rbenv/blob/1c772d5ff21bbee52e0c6cdf128c5cffaf8feea8/libexec/rbenv-init#L48) because it existed. That didn't help as the file wasn't sourced.

It looks like quite many users also had such issue - https://github.com/rbenv/rbenv/issues/1067#issuecomment-386901944.

Perhaps, step 2 should clarify that appending a line to `~/.bash_profile` on Ubuntu isn't needed. Also it may be good to improve a detection logic in `rbenv init` to check if `~./bash_profile` is sourced.