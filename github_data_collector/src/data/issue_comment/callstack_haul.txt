<!-- Please provide enough information so that others can review your pull request. -->
<!-- Keep pull requests small and focused on a single change. -->

### Summary

<!-- What existing problem does the pull request solve? Can you solve the issue with a different approach? -->
RAM bundle build time boost using `jest-workers`. Number of workers can be con figured using `--numWorkers` option, e.g.
```
yarn haul ram-bundle --platform ios --dev false  --numWorkers 7
```

### Test plan

Proper test was added to the fixtures 

### To do 
- [ ] Think about limiting workers number
TODO:
- [ ] fix increase in bundle size
- [x] verify `start` server is working
- [x] verify Remote debugging is working
- [x] revert edits to `react_native_clean` fixture
- [x] verify symbolication is working
## Environment

CentOS7
Android Studio AVD
"@haul-bundler/babel-preset-react-native": "^0.15.0",
"@haul-bundler/cli": "^0.15.0",
 "@haul-bundler/preset-0.60": "^0.15.0",
"react": "16.9.0",
"react-native": "0.61.4",

## Description

Have the some code and works well in Windows 10,  but in CentOS, the haul progress is pending forever and did not start compiling bundle (hung on IDLE status) after the "react-native run-android" is successfully executed and the app show up on emulator, but with a red screen saying **"Unable to load script. Please make sure you are either running a Metro server or that your bundle 'index.android.bundle' is packaged correctly for release."**


I have confirm the port 8081 is not occupied and try use other port number still did not work.

![image](https://user-images.githubusercontent.com/2377227/70779678-765d3380-1dbf-11ea-9af4-720425c8539b.png)

![image](https://user-images.githubusercontent.com/2377227/70780754-39de0780-1dc0-11ea-8a23-4c14ee27da7d.png)




### Summary

This is a test fixture for 0.59 in a yarn workspace with proper hoisting. It reproduces an issue we have in jest, but I'd also like to see this real-world scenario covered in CI.

### Test plan

Ran `yarn test` from the root. I get some failures that appear to be due to my Windows environment and are unrelated to the changes. I'd love help figuring that out, as the tests should be passing in 
https://www.npmjs.com/package/jest-worker
## Environment

```
    "@haul-bundler/babel-preset-react-native": "^0.13.2",
    "@haul-bundler/cli": "^0.13.1",
    "@haul-bundler/inspector": "^0.13.0",
    "@haul-bundler/preset-0.60": "^0.13.0",
    "react-native": "^0.61.1",
     Node v10.16.0
```

Config:

```
// since preset-0.61 isn't yet available
import { withPolyfills, makeConfig } from '@haul-bundler/preset-0.60';

const removeRuleByTest = (moduleConfig, test) => {
  const index = moduleConfig.findIndex(rule => {
    if (rule.test) {
      return rule.test.toString() === test.toString();
    }
    return false;
  });
  moduleConfig.splice(index, 1);
};

export default makeConfig({
  bundles: {
    index: platform => ({
      entry: withPolyfills(`./src/index.${platform}.js`),
      transform({ config }) {
        // Remove babel-loader, as it handles both .ts(x) and .js(x) files
        removeRuleByTest(config.module.rules, /\.[jt]sx?$/);

        config.module.rules = [
          {
            exclude: /node_modules(?!.*[\/\\](react|@react-native-community|@haul-bundler))/,
            test: /\.tsx?$/,
            loader: 'ts-loader',
          },
          ...config.module.rules,

          // Re-add the babel-loader, now only for .js(x)
          {
            exclude: /node_modules(?!.*[\/\\](react|@react-native-community|@haul-bundler))/,
            test: /\.jsx?$/,
            loader: require.resolve('babel-loader'),
            options: {
              plugins: [require.resolve('@haul-bundler/core/build/utils/fixRequireIssues')],
            },
          },
          ...config.module.rules,
        ];

        config.resolve.extensions = [
          `.${platform}.ts`,
          '.mobile.ts',
          '.native.ts',
          `.${platform}.tsx`,
          '.mobile.tsx',
          '.native.tsx',
          '.ts',
          '.tsx',
          ...config.resolve.extensions,
        ];
      },
    }),
  },
});
```

## Description

After upgrading to the new haul bundle from a working legacy instance and starting with a fresh config I seemingly can't exclude things from Typescript checks and compilation terminates.  Not sure what I'm missing or am I looking at an outdated config?

```
Traviss-MacBook-Pro:xc **$ yarn ios --haul-inspector
yarn run v1.16.0
$ NODE_OPTIONS=--max_old_space_size=8192 REACT_NATIVE=true NODE_ENV=development yarn haul start --platform ios --eager ios --haul-inspector
[Logs]

done ▶︎ Packager server running on http://localhost:8081
error ▶︎ /Users/**/**/xc/node_modules/@haul-bundler/core/node_modules/webpack/lib/SourceMapDevToolPlugin.js:179
const asset = compilation.getAsset(file).source;


TypeError: compilation.getAsset is not a function
at files.forEach (/Users/**/**/xc/node_modules/@haul-bundler/core/node_modules/webpack/lib/SourceMapDevToolPlugin.js:179:33)
at Array.forEach (<anonymous>)
at compilation.hooks.afterOptimizeChunkAssets.tap (/Users/**/**/xc/node_modules/@haul-bundler/core/node_modules/webpack/lib/SourceMapDevToolPlugin.js:178:12)
at SyncHook.eval [as call] (eval at create (/Users/**/**/xc/node_modules/tapable/lib/HookCodeFactory.js:19:10), <anonymous>:12:1)
at SyncHook.lazyCompileHook (/Users/**/**/xc/node_modules/tapable/lib/Hook.js:154:20)
at hooks.optimizeChunkAssets.callAsync.err (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1313:42)
at AsyncSeriesHook.eval [as callAsync] (eval at create (/Users/**/**/xc/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:9:1)
at AsyncSeriesHook.lazyCompileHook (/Users/**/**/xc/node_modules/tapable/lib/Hook.js:154:20)
at hooks.additionalAssets.callAsync.err (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1309:36)
at AsyncSeriesHook.eval [as callAsync] (eval at create (/Users/**/**/xc/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:9:1)
at AsyncSeriesHook.lazyCompileHook (/Users/**/**/xc/node_modules/tapable/lib/Hook.js:154:20)
at hooks.optimizeTree.callAsync.err (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1305:32)
at AsyncSeriesHook.eval [as callAsync] (eval at create (/Users/**/**/xc/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:9:1)
at AsyncSeriesHook.lazyCompileHook (/Users/**/**/xc/node_modules/tapable/lib/Hook.js:154:20)
at Compilation.seal (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1242:27)
at hooks.make.callAsync.err (/Users/**/**/xc/node_modules/webpack/lib/Compiler.js:546:17)
at _err0 (eval at create (/Users/**/**/xc/node_modules/tapable/lib/HookCodeFactory.js:32:10), <anonymous>:11:1)
at _addModuleChain (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1093:12)
at processModuleDependencies.err (/Users/**/**/xc/node_modules/webpack/lib/Compilation.js:1005:9)
at process._tickCallback (internal/process/next_tick.js:61:11)
```


## Reproducible Demo

## Environment

    "react-native": "0.60.5",
    "@haul-bundler/babel-preset-react-native": "0.13.0",
    "@haul-bundler/cli": "0.13.0",
    "@haul-bundler/core": "0.13.0",
    "@haul-bundler/preset-0.60": "0.13.0",

node --stack_size=5000 --max-old-space-size=8192 "./node_modules/@haul-bundler/cli/bin/haul" "start"

<!-- All necessary envrionmental info that will help triage this -->

## Description


After making changes to the code, the assembly is restarted, but progress is not displayed (always 100%), and a fatal error also falls from memory.

We replace webpack config and loaders.

        {
            context: options.frontDir,
            output: {
                filename: `index.${options.platform}.bundle`
            },
            resolveLoader: {
                alias: {
                    "svg-inline": "svg-inline-loader",
                    "extract-globalize-formatters-loader": require.resolve("../extensions/extract-globalize-formatters-loader")
                }
            },
            resolve: {
                extensions: [
                    '.ts',
                    '.tsx',
                    `.${options.platform}.ts`,
                    '.native.ts',
                    `.${options.platform}.tsx`,
                    '.native.tsx',
                ],
                alias: {
                    "mobile":  path.join(options.srcDir, "mobile"),
                    "src":  path.join(options.srcDir, "web")
                },
            },
           module: {
            rules:[
                {parser: {requireEnsure: false}},
                {
                    test: /\.js$/,
                    exclude: /node_modules(?!.*[\/\\](react|@react-navigation|@react-native-community|@expo|pretty-format|@haul-bundler|metro))/,
                    use: filterEmpty([
                        cacheLoader(options),
                        threadLoader(options),
                        babelLoader(options)
                    ]),
                },
                {
                    test: /\.tsx?$/,
                    include: /node_modules/,
                    use: filterEmpty([
                        cacheLoader(options),
                        threadLoader(options),
                        babelLoader(options),
                        typescriptLoader(options)
                    ]),
                },
                {
                    test: _core.AssetResolver.test,
                    use: {
                        /**
                         * Asset loader enables asset management based on image scale
                         * This needs the AssetResolver plugin in resolver.plugins to work
                         */
                        loader: _core.ASSET_LOADER_PATH,
                        options: {
                            platform: options.platform,
                            root: options.root,
                            bundle: options.bundle,
                            runtime: options.runtime,
                        }
                    }
                }
            ]
        },
            plugins: [
                new IgnoreWarningsPlugin({
                    patterns: [
                        /export '.*'( \((reex|im)ported as '.*'\))? was not found in/,
                        "Conflicting order between"
                    ]
                }),
                new DefinePlugin({
                    "process.env.REACT_NATIVE": true,
                }),
                // new ProvidePlugin({
                //     "Promise": "bluebird",
                // }),
            ],
            stats: {
                children: false,
            }
        },

![image](https://user-images.githubusercontent.com/5614087/65234276-ef106480-dadc-11e9-9561-b0f9141acf54.png)

<!-- Describe your issue in detail. Include screenshots if needed. If this is a regression, let us know. -->
## Environment

node: 10.15.3
pnpm: 2.25.6
react-native: 0.60.5
@haul-bundler/cli: 0.12.0

## Description

While the old haul package used to install just fine with the same pnpm settings, while upgrading to the @haul-bundler/cli package (tried 0.10.0, 0.11.0 and 0.12.0), I get this error while installing...

I don't understand where the 0.11.0 dependency comes from since all the versions I am trying to install are 0.12.0.

```
 ERROR  @haul-bundler/cli > @haul-bundler/core: @haul-bundler/core-legacy@0.12.0 requires a peer of @haul-bundler/core@^0.11.0 but version 0.12.0 was installed.
```

## Reproducible Demo

package.json
```
{
  "name": "packageName",
  "version": "16.32.17",
  "private": false,
  "main": "lib-esm/index.js",
  "module": "lib-esm/index.js",
  "typings": "lib-esm/index.d.ts",
  "scripts": {
    "start": "haul start --dev true --minify false",
    "haul": "node ./node_modules/@haul-bundler/cli/bin/haul.js"
  },
  "dependencies": {
    "react-native-floating-action": "^1.13.0",
    "react-native-fs": "2.14.1",
    "react-native-modal": "6.5.0",
    "react-native-shimmer": "0.5.0",
    "base-64": "^0.1.0",
    "tslib": "^1.9.3",
    "jsc-android": "236355.1.1",
    "@react-native-community/netinfo": "4.1.5",
    "@react-native-community/cli-platform-android": "2.9.0"
  },
  "peerDependencies": {
    "react": ">=16.8.6",
    "react-native": "^0.60.5"
  },
  "devDependencies": {
    "webpack": "^4.30.0",
    "@types/react": "16.8.11",
    "@types/react-native": "0.57.18",
    "@types/webpack-env": "1.13.6",
    "@types/base-64": "^0.1.2",
    "@types/react-native-sqlite-storage": "^3.3.1",
    "@types/chai": "3.4.34",
    "@types/jest": "^24.0.14",
    "@babel/preset-typescript": "^7.3.3",
    "@babel/plugin-proposal-class-properties": "^7.5.5",
    "@babel/plugin-proposal-object-rest-spread": "^7.5.5",
    "@babel/plugin-transform-flow-strip-types": "^7.4.4",
    "@babel/plugin-transform-react-jsx": "^7.3.0",
    "@babel/polyfill": "^7.4.4",
    "@babel/preset-env": "^7.5.5",
    "@babel/register": "^7.5.5",
    "@babel/runtime": "^7.5.5",
    "@babel/cli": "^7.5.5",
    "babel-loader": "^8.0.2",
    "babel-preset-env": "^1.7.0",
    "metro": "^0.53.1",
    "metro-react-native-babel-preset": "^0.55.0",
    "circular-dependency-plugin": "^5.0.2",
    "es6-promise": "^4.2.4",
    "@haul-bundler/cli": "^0.12.0",
    "@haul-bundler/core": "^0.12.0",
    "@haul-bundler/preset-0.60": "^0.12.0",
    "@haul-bundler/babel-preset-react-native": "^0.12.0",
    "react-hot-loader": "^4.3.6",
    "ignore-loader": "^0.1.2",
    "json-loader": "^0.5.7",
    "loader-utils": "^1.1.0",
    "mocha": "4.1.0",
    "mocha-junit-reporter": "1.17.0",
    "raw-loader": "^0.5.1",
    "react": "^16.8.6",
    "react-native": "^0.60.5",
    "react-test-renderer": "^16.8.6",
    "react-transform-hmr": "^1.0.4",
    "reactotron-react-native": "~2.0.0",
    "reactotron-redux": "~2.0.0",
    "scheduler": "^0.14.0",
    "source-map-loader": "^0.2.3",
    "ts-loader": "^4.4.2",
    "copyfiles": "^2.0.0",
    "rimraf": "~2.6.2",
    "typescript": "3.3.3333",
    "lodash": "~4.17.12",
    "schedule": "^0.4.0",
    "ansi-parser": "^3.2.8",
    "genversion": "^2.1.1",
    "chai": "^3.5.0",
    "karma-chai-plugins": "^0.7.0",
    "sinon": "1.17.1",
    "enzyme": "^3.1.0",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.26.2",
    "terser": "^3.17.0",
    "webpack-bundle-analyzer": "^3.0.3"
  }
}
```

## Describe the feature

We've landed [Fast Refresh](https://mobile.twitter.com/reactnative/status/1144629612921720833) on React Native master. You can try it if you build all Metro packages from master and replace them in `node_modules` of RNTester.

## Motivation

It would be nice if Haul could replace `react-hot-loader` or other techniques with Fast Refresh because:

- Fast Refresh doesn't create semantic differences in behavior (so it's safe to always leave on, unlike solutions based on `react-hot-loader` and similar tools)
- Fast Refresh fully supports function components and Hooks, including cases where you add or remove Hooks
- Fast Refresh gracefully recovers from errors

It likely also fixes hot reloading problems with navigation libraries because it's fully integrated with React. (Although I don't have a test case to verify that.)

It would also unify the behavior with mainline React Native.

## But How?

I'd be happy to chat with someone to give an overview of how the new system works. For a 100% match in behavior we might need some new hooks from webpack, but you should be able to get reasonably close today too.
### Current Behavior
Packaging typescript react-native project with haul

running `yarn start --platform ios ` fails with:

```
./node_modules/fsevents/node_modules/node-pre-gyp/lib/unpublish.js                                                                                                                
Module not found: Error: Can't resolve 'aws-sdk' in '/.../node_modules/fsevents/node_modules/node-pre-gyp/lib'                     
               
```

From haul output log:

```txt

 ERROR  found asset that we don't know how to process. /.../node_modules/fsevents/node_modules/node-pre-gyp/lib/util/nw-pre-gyp/index.html

ERROR ./node_modules/fsevents/node_modules/node-pre-gyp/lib/unpublish.js
Module not found: Error: Can't resolve 'aws-sdk' in '/.../node_modules/fsevents/node_modules/node-pre-gyp/lib'
resolve 'aws-sdk' in '/.../node_modules/fsevents/node_modules/node-pre-gyp/lib'
  Parsed request is a module
  using description file: /.../node_modules/fsevents/node_modules/node-pre-gyp/package.json (relative path: ./lib)
    Field 'browser' doesn't contain a valid alias configuration
    resolve as module
```
### Expected Behavior
Expect ios to start

### Haul Configuration (webpack.haul.js)
```js
import { createWebpackConfig } from "haul";

export default {
  webpack: env => {
    const config = createWebpackConfig({
      entry: `./src/index.${env.platform}.tsx`,
    })(env);

    config.module.rules = [
      {
        test: /\.tsx?$/,
        exclude: '/node_modules/',
        use: [
          {
            loader: 'babel-loader',
          },
          {
            loader: 'ts-loader',
          }
        ]
      },
      ...config.module.rules,
    ];

    config.resolve.extensions = [
      '.ts',
      '.tsx',
      `.${env.platform}.ts`,
      '.native.ts',
      `.${env.platform}.tsx`,
      '.native.tsx',
      ...config.resolve.extensions,
    ]

    return config;
  }
};
```
### Your Environment

| software         | version
| ---------------- | -------
| Haul             |  ^1.0.0-rc.10
| react-native     |  ^0.57.5
| node             |  v8.9.4
| npm or yarn      | 1.7.0

package.json with relevant packages:

```json
"dependencies": {
    "react": "16.6.1",
    "react-native": "^0.57.5",
  },
  "devDependencies": {
    "@babel/core": "7.0.0-beta.47",
    "babel-cli": "^6.24.1",
    "babel-core": "^6.26.0",
    "babel-loader": "^7.1.2",
    "babel-preset-es2015": "6.22.0",
    "babel-preset-react-native": "5.0.2",
    "haul": "^1.0.0-rc.10",
    "metro-react-native-babel-preset": "^0.45.0",
    "thread-loader": "1.1.2",
    "ts-loader": "5.2.2",
    "typescript": "2.6.2"
  },
```

