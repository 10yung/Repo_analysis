IE Mobile 11 should technically qualify as dead for almost 6 months now. It was supported as part of Windows Phone 8.x, and that went out of support on July 11, 2017.

The next version of Windows Phone (WP10) used Edge Mobile instead of IE Mobile.
The current defaults includes `Chrome 49` and `Safari 5.1` which as far as I can tell haven't been updated since more than two years. Shouldn't those be filtered by `not dead`?

> Safari for Windows
Apple no longer offers Safari updates for Windows. Safari 5.1.7 for Windows was the last version made for Windows, and it is now outdated.
>
> Published Date: September 24, 2018

https://support.apple.com/en-us/HT204416


Browserslist is an industry-standard config and ecosystem around it to specify what browsers (and Nodejs version) are supported in this project. It has **60M downloads per month**. Large projects use it like **Autoprefixer** (to find what vendor prefixes add to CSS), **Babel** (for JS polyfills in babel-preset-env) and postcss-preset-env (for CSS polyfills). **Create React App** and **Angular CLI** use it by default.

Since this project has a significant effect on the web dev ecosystem, we need a big project of improving security and promoting best practices.

![1434352158136310](https://user-images.githubusercontent.com/19343/71055806-f91a2180-2124-11ea-9691-20cc38c03ad0.jpg)

## Improving Security

Browserslist relies on `caniuse-lite` npm package with Can I Use data. We can’t use `caniuse-db` directly because of its big size. We have a script, which tracks new releases of `caniuse-db`, repack them into a compact format, and release the new `caniuse-lite` version to npm.

Unfortunately, there are a few security concerns about this script. We need to refactor it to avoid using it for malicious package publishing [as we had with ESLint](https://eslint.org/blog/2018/07/postmortem-for-malicious-package-publishes).

- [ ] Move script from Digital Ocean server to GitHub Actions.
- [ ] Split package into `caniuse-lite-json` (with only static JSONs) and `caniuse-lite`. GitHub Actions will have access only to release `caniuse-lite-json`. Unpacking scripts will be released manually.
- [ ] Talk to npm team to add “This project doesn’t have `postinstall` script” settings to prevent publishing packages with scripts.
- [ ] Fix the problem is `caniuse-lite` licensing by keep using non-software license for `caniuse-lite-json` and using MIT for unpacking scripts in `caniuse-lite`.

## Promoting Best Practices

Browserslist was created to prevent developers from supporting popular browsers. It is a common practice of ignoring browsers, which is not popular in your country. For instance, many US developers prefer to avoid UC browsers. However, the UC browser has a market more than Firefox and desktop Safari.

In Browserslist, we are promoting queries like `last 2 version` instead of selecting browsers manually (like it was in babel-preset-env before: `"chrome": "31"`).

We are already promoting browser diversity (check our [interview](https://www.youtube.com/watch?v=F2N-evGOcxc) of Google’s The State of the Web) and [speak](https://github.com/browserslist/browserslist/issues/250) with the local community in Afrika, Asia, and Russia about their browsers.

Unfortunately, a lot of users do not know about this problem, this mission of Browserslist and `.browserslistrc` best practices. We need to educate the community about browsers in different countries and why and how they should help browser diversity.

- [ ] Add `npx browserslist lint` CLI tool to show lint config against the most popular mistakes.
- [ ] Add this lint messages to [browserl.ist](https://browserl.ist/) website.
- [ ] Make an article about Browserslist, browsers in different countries.
- [ ] Make a talk and try to talk about Browserslist at conferences.

## Extra Features

- [ ] Make [browserl.ist](https://browserl.ist/) official.
- [ ] Create `@browserslist/by-feature` npm package to have query like `extend @browserslist/by-feature/modules` to select all browsers with ES modules support.
`require('browserslist')("cover 90% in CN", { mobileToDesktop: true })` gives `and_chr 78` and other 4 items in 4.7.3, but gives `and_chr 4` and other 4 items in 4.8.2.

We're using `@babel/preset-env` and it broke recently after update. I traced and found `browserslist` gives different result before and after. So I come with the line above. `@babel/preset-env` always calls `browserslist` with `mobileToDesktop: true`. 

Honestly I cannot quite understand how `mobileToDesktop` works from `README.md`, but I found several changes regarding `mobileToDesktop` option between 4.7.3 and 4.8.2. Is current result(4.8.2) correct?

Does this have a formal grammar? Although the documentation seems to be thorough, there's too much ambiguity unless you give a CFG for valid "browserlist strings".
As title, I think it should make sense like `last 1 Chrome version`.
I have project setup with Lerna and Yarn Workspaces:
```
packages
packages/a/package.json
packages/a/.browserslistrc
packages/a/...
packages/b/package.json
packages/b/.browserslistrc
packages/b/...
package.json
.browserslistrc
```

In the root `.browserslistrc` file I have browsers list and in each package `.browserslistrc` file I would like to do

```
extends ../../.browserslistrc
```

but I can't. I can only extend from package like here:

```
extends @org/browserslist-config-mycompany
```

However, I don't want to create separate package to only define list of browsers
```BrowserslistError: Unknown browser query `android all`. Maybe you are using old Browserslist or made typo in query.```

I received this error when using the `react-starter-app`, maybe its got to do something with `BrowsersList` itself, hence reporting it here.
In the near future, would a query like `last 2 edge versions` translate to `edge 18, edge 74`?

The way it will work in browserslist would likely have a huge impact on the transition period between **EdgeHTML Edge** (18-) and **Chromium Edge** (74+).

_Note: It will be much more common for this query to come down in the form of `last 2 versions`. The specific example of `last 2 edge versions` was only used to focus the question._
The [browserslist-ga](https://github.com/browserslist/browserslist-ga) looks useful, but not everyone uses Google Analytics. I would like to see an explanation (or just a good example) of the format, so I can create my own `browserslist-stats.json` file based on a custom data source (such as `user-agent` headers in server-side request logs).