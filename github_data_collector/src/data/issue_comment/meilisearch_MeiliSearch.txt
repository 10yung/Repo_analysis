Thanks for this great project.  I've been using the Ruby client to add documents on MeiliSearch 0.8.4 ( installed via curl ) on Ubuntu 18.04. 

I'm inserting documents in batches of 1000:

```
index = client.create_index(name: 'ebooks', schema: book_schema)
index.add_settings( rules )
added = 0
Product.ebook.where.not(title: nil).where.not(author: nil).find_in_batches do |batch|
  documents = batch.map {|p| { id: p.id, title: p.title, author: p.author, clicks: p.outbound_clicks.count } }
  begin
    index.add_documents(documents)
  rescue Net::OpenTimeout, Net::ReadTimeout, Errno::ECONNRESET => e
    puts "Got timeout, sleeping for 5"
    sleep 5
    retry
  end
  added += documents.length
  puts "Added #{added} ebooks"
end
```

After a few hundred thousand document additions, the server stops responding to all queries.  Using the above code, I can kill and restart the server and it resumes adding documents. 

The data directory is ~ 411 MB. 

STracing the process doesn't seem very helpful - this is right up to it crashing: 

```
[pid 24914] lseek(4, 299126784, SEEK_SET) = 299126784
[pid 24914] writev(4, [{iov_base="E\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0mP\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="F\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0pL\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="G\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0\372G\1\0\0\0\0\0"..., iov_len=4096}], 3) = 12288
[pid 24914] lseek(4, 299143168, SEEK_SET) = 299143168
[pid 24914] writev(4, [{iov_base="I\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0/@\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="J\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0\3759\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="K\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0\3223\1\0\0\0\0\0"..., iov_len=4096}], 3) = 12288
[pid 24914] lseek(4, 299163648, SEEK_SET) = 299163648
[pid 24914] writev(4, [{iov_base="N\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0t-\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="O\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0s&\1\0\0\0\0\0"..., iov_len=4096}, {iov_base="P\35\1\0\0\0\0\0\0\0\4\0\1\0\0\0\375\1\0\0\0\0\0\0\1\"\1\0\0\0\0\0"..., iov_len=4096}], 3) = 12288
[pid 24914] pwrite64(4, "`+\1\0\0\0\0\0\0\0\4\0\17\0\0\0\311\34\0\0\0\0\0\0?\265\1\0\0\0\0\0"..., 61440, 313917440) = 61440
[pid 24914] pwrite64(4, "\177P\1\0\0\0\0\0\0\0\4\0\33\0\0\0\302\347\215\227W*\1\0\1\0\2\0\16\0\3\0"..., 110592, 352841728) = 110592
[pid 24914] pwrite64(4, "\nT\1\0\0\0\0\0\0\0\4\0\"\0\0\0\4\324Qb\316}\5\0\1\0\1\0\10\0\1\0"..., 139264, 356556800) = 139264
[pid 24914] lseek(4, 361857024, SEEK_SET) = 361857024
[pid 24914] writev(4, [{iov_base="\30Y\1\0\0\0\0\0\0\0\4\0*\0\0\0\255a\10\205\26\244\5\0\2\0\1\0\7\0\1\0"..., iov_len=172032}, {iov_base="BY\1\0\0\0\0\0\0\0\4\0\36\0\0\0\276\33'\177\7\345\6\0\1\0\r\0S\0\2\0"..., iov_len=122880}], 2) = 294912
[pid 24914] pwrite64(4, "\261Y\1\0\0\0\0\0\0\0\4\0+\0\0\0/R\361\304\326\321\3\0\1\0\23\0R\0\2\0"..., 176128, 362483712) = 176128
[pid 24914] pwrite64(4, "\220h\1\0\0\0\0\0\0\0\4\0T\0\0\0n\0]\315\10C\0\0\2\0\2\0\16\0\3\0"..., 344064, 378077184) = 344064
[pid 24914] pwrite64(4, "\17~\1\0\0\0\0\0\0\0\4\0N\0\0\0^\304\211\377P^\0\0\1\0\1\0\t\0\2\0"..., 319488, 400617472) = 319488
[pid 24914] pwrite64(4, "\1\225\1\0\0\0\0\0\0\0\4\0\275\0\0\0\2\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"..., 774144, 424677376) = 774144
[pid 24914] pwrite64(4, "G\254\1\0\0\0\0\0\0\0\4\0\223\0\0\0/R\361\304\326\321\3\0\1\0\1\0\10\0\3\0"..., 602112, 449081344) = 602112
[pid 24914] pwrite64(4, "\320\321\1\0\0\0\0\0\0\0\4\0\32\2\0\0\240\206\1\0\0\0\0\0\240\362\341\0\201Sx\373"..., 2203648, 488439808) = 2203648
[pid 24914] fdatasync(4)                = 0
[pid 24914] pwrite64(5, "\0\0\0\200\2\0\0\0\0\20\0\0\10\0\1\0\0\0\0\0\0\0\0\0\1\0\0\0\0\0\0\0"..., 120, 32) = 120
[pid 24914] futex(0x7fb94ab5b040, FUTEX_WAKE, 1) = 0
[pid 24914] futex(0x7fb94ab59040, FUTEX_WAIT, 2147508565, NULL
```


Since in all our example we chose the name of the UID ourself we already create a human readable field.

because of that, and because there will probably not be a case where the user needs an infinite number of indexes with random generated uid's, I think the name should simply be specified as unique.
Like in SQL, and most databases.

We thrive for simplicity of use and this double parameter each time we create an index is weird.

@qdequele @Kerollmops 
Tried on latest release : **v.0.8.4**
And current **master**
Both have same behavior.

When doing this search query : 
```
q: 'woman',
      filters: 'title:After',
      attributesToHighlight: ['overview'],
      matches: true
```
this is the response object, where **no highlight is to be found**. Where it should have been `<em>woman</em>`
```
{
    id: '537915',
    title: 'After',
    poster: 'https://image.tmdb.org/t/p/w1280/u3B2YKUjWABcxXZ6Nm9h10hLUbh.jpg',
    overview: 'A young woman falls for a guy with a dark secret and the two embark on a rocky relationship.',
    release_date: 1554944400,
    _formatted: {
      id: '537915',
      title: 'After',
      poster: 'https://image.tmdb.org/t/p/w1280/u3B2YKUjWABcxXZ6Nm9h10hLUbh.jpg',
      overview: 'A young woman falls for a guy with a dark secret and the two embark on a rocky relationship.',
      release_date: 1554944400
    },
    _matchesInfo: { overview: [ { start: 8, length: 5 } ] }
  }
```

While if I remove the matches object, **highlight comes back**
```
q: 'woman',
      filters: 'title:After',
      attributesToHighlight: ['overview'],
```


```
{
    id: '537915',
    title: 'After',
    poster: 'https://image.tmdb.org/t/p/w1280/u3B2YKUjWABcxXZ6Nm9h10hLUbh.jpg',
    overview: 'A young woman falls for a guy with a dark secret and the two embark on a rocky relationship.',
    release_date: 1554944400,
    _formatted: {
      id: '537915',
      title: 'After',
      poster: 'https://image.tmdb.org/t/p/w1280/u3B2YKUjWABcxXZ6Nm9h10hLUbh.jpg',
      overview: 'A young <em>woman</em> falls for a guy with a dark secret and the two embark on a rocky relationship.',
      release_date: 1554944400
    }
  }
```
When adding `attributesToHighlight` to my search query, if no matched query word can be highlighted it will also cancel out the cropping.

```
      q: 'scientist',
      offset: 0,
      limit: 5,
      attributesToRetrieve: ['overview', 'id'],
      attributesToSearchIn: ['overview'],
      attributesToCrop: ['overview'],
      cropLength: 1,
      attributesToHighlight: ['overview']
```
Response : 
```
  res: {
    id: '485811',
    overview: 'After a zombie apocalypse spreads from a London prison, the UK is brought to its knees. The spread of the virus is temporarily contained but, without a cure, it’s only a matter of time before it breaks its boundaries and the biggest problem of all… any zombies with combat skills are now enhanced. With the South East of England quarantined from the rest of the world using fortified borders, intelligence finds that the scientist responsible for the outbreak is alive and well in London. With his recovery being the only hope of a cure, a squad of eight Special Forces soldiers is sent on a suicide mission to the city, now ruled by the undead, with a single task: get him out alive within 72 hours by any means necessary. What emerges is an unlikely pairing on a course to save humanity against ever-rising odds.'
  },
```
There is no `_formatted` key.

Where there should be this : 
```
  res: {
    id: '485811',
    overview: 'After a zombie apocalypse spreads from a London prison, the UK is brought to its knees. The spread of the virus is temporarily contained but, without a cure, it’s only a matter of time before it breaks its boundaries and the biggest problem of all… any zombies with combat skills are now enhanced. With the South East of England quarantined from the rest of the world using fortified borders, intelligence finds that the scientist responsible for the outbreak is alive and well in London. With his recovery being the only hope of a cure, a squad of eight Special Forces soldiers is sent on a suicide mission to the city, now ruled by the undead, with a single task: get him out alive within 72 hours by any means necessary. What emerges is an unlikely pairing on a course to save humanity against ever-rising odds.',
    _formatted: { id: '485811', overview: ' s' }
  },
```



Delete same document multiple times : 

```bash
➜  meili-binaries curl -X DELETE 'http://localhost:7700/indexes/test_uid/documents/456' -i
HTTP/1.1 202 Accepted
content-type: application/json
access-control-allow-origin: *
transfer-encoding: chunked
date: Thu, 09 Jan 2020 14:24:14 GMT

{"updateId":3}%                                                                                                                                                                                                                                                                                                                                                             ➜  meili-binaries curl -X DELETE 'http://localhost:7700/indexes/test_uid/documents/456' -i
HTTP/1.1 202 Accepted
content-type: application/json
access-control-allow-origin: *
transfer-encoding: chunked
date: Thu, 09 Jan 2020 14:24:15 GMT

{"updateId":4}%                                                                                                                                                                                                                                                                                                                                                             ➜  meili-binaries curl -X DELETE 'http://localhost:7700/indexes/test_uid/documents/456' -i
HTTP/1.1 202 Accepted
content-type: application/json
access-control-allow-origin: *
transfer-encoding: chunked
date: Thu, 09 Jan 2020 14:24:16 GMT

{"updateId":5}%
```

And here are the corresponding updates:
```json
[
  {
    "status": "processed",
    "update_id": 3,
    "type": {
      "name": "DocumentsDeletion",
      "number": 1
    },
    "duration": 0.159703019,
    "enqueued_at": "2020-01-09T14:24:14.252783Z",
    "processed_at": "2020-01-09T14:24:14.413378Z"
  },
  {
    "status": "processed",
    "update_id": 4,
    "type": {
      "name": "DocumentsDeletion",
      "number": 1
    },
    "duration": 0.1478404,
    "enqueued_at": "2020-01-09T14:24:15.870880Z",
    "processed_at": "2020-01-09T14:24:16.019153Z"
  },
  {
    "status": "processed",
    "update_id": 5,
    "type": {
      "name": "DocumentsDeletion",
      "number": 1
    },
    "duration": 0.174678452,
    "enqueued_at": "2020-01-09T14:24:16.368783Z",
    "processed_at": "2020-01-09T14:24:16.548821Z"
  }
]
```

Is this good behavior or should the update status point the absence of the deleted document?


At some point, when adding  the query parameter `attributesToRetrieve` on the `GET documents` route, the parameter are corrupted and changed.



The first returned document on the two following requests are different from each other (note: i'm using the moviedataset): 
```bash
curl \
  -X GET 'http://localhost:8082/indexes/test_uid/documents?offset=1&attributesToRetrieve=id' | jq
``` 
has as 3 first results:
_for clarity I only took the first 3 but there are 20 documents in the response_

```json
[
  {
    "id": "25087"
  },
  {
    "id": "81003"
  },
  {
    "id": "31804"
  }
]
```

while this requests: 
```bash
curl \
  -X GET 'http://localhost:8082/indexes/test_uid/documents?offset=1&attributesToRetrieve=id&attributesToRetrieve=title' | jq
```

gives back the 3 following : 
```json
[
  {
    "id": "13342",
    "title": "Fast Times at Ridgemont High",
    "poster": "https://image.tmdb.org/t/p/w1280/9y5rSeO0xH3m5oRJmhBusDkiS0j.jpg",
    "overview": "Follows a group of high school students growing up in southern California, based on the real-life adventures chronicled by Cameron Crowe. Stacy Hamilton and Mark Ratner are looking for a love interest, and are helped along by their older classmates, Linda Barrett and Mike Damone, respectively. The center of the film is held by Jeff Spicoli, a perpetually stoned surfer dude who faces off with the resolute Mr. Hand, who is convinced that everyone is on dope.",
    "release_date": 398048400
  },
  {
    "id": "25087",
    "title": "Bloodsport II",
    "poster": "https://image.tmdb.org/t/p/w1280/xVfSGAbOK4FucTwkYrXJjeBFqv4.jpg",
    "overview": "After thief Alex Cardo gets caught while stealing an ancient katana in East Asia, he soon finds himself imprisoned and beaten up by the crowd there. One of the guards, Demon, feels upset by Alex appearance and tortures him as often as he gets the opportunity. Alex finds a friend and mentor in the jailhouse, Master Sun, who teaches him a superior fighting style called Iron Hand. When a 'best of the best kumite' is to take place, Demon gets an invitation. Now Master Sun and Alex need to find a way to let Alex take part in the kumite too.",
    "release_date": 825638400
  },
  {
    "id": "81003",
    "title": "Kung Fu Panda: Secrets of the Masters",
    "poster": "https://image.tmdb.org/t/p/w1280/kU8szr8xUWdMkVXifAw9r5tsuOT.jpg",
    "overview": "Po and the Furious Five uncover the legend of three of kung fu's greatest heroes: Master Thundering Rhino, Master Storming Ox, and Master Croc.",
    "release_date": 1323648000
  }
]
```

In conclusion: 

When `attributesToRetrieve` has more than one attribute to retrieve, **all parameters are ignored and all attributes are present in the returned documents as well as the offset is back to his default value.**



When making a request with bad query parameters it should throw an error but instead, the parameter is ignored and the request completes normally.

```bash
curl \
  -X GET 'http://localhost:8082/indexes/test_uid/documents?limit=-1000' | jq
```

```bash
curl \
  -X GET 'http://localhost:8082/indexes/test_uid/documents?offset=-1000' | jq
```
 Both requests are successful and both requests have the same response as if no query parameter was given.

It should send back a `400 Bad request` or a `422 Unprocessable Entity`
Hello. I'm not sure of your roadmap so this may could be useless...

I've update `is_cjk` module because seems filter for 'korean' language is missing. Could you check? Seems there are several more cjk unicodes that are not being filtered...
If you've not updated because of your plan, please ignore it.

Thank you.



Based on this [GitHub Action Documentation](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/workflow-syntax-for-github-actions#filter-pattern-cheat-sheet).