How about make minify cache template
how like this https://github.com/jenstornell/tiny-html-minifier
possible?
This is fix for https://github.com/bobthecow/mustache.php/issues/353
Hey,

I think [entity_flags option](https://github.com/bobthecow/mustache.php/wiki#entity_flags) should be `ENT_QUOTES` by default.

Or maybe worth to mention this option in examples or in other visible places.

Otherwise it could lead to XSS in cases like:

```php
$m = new Mustache_Engine;
echo $m->render("<a href='/user/{{id}}'>{{name}}</a>", array(
    'name' => 'User',
    'id' => "1' onmouseover='alert(1)",
));
```

WDYT?
Is it possible to use filters pragma with 1 additional argument of the value of the variable?

Like this:

```php
<?php
$M = new Mustache_Engine;
$M->addHelper('currency', function($Value, $Precision) {
    return number_format($Value, $Precision, ',', '.');
});

$T = <<<TPL
{{%FILTERS}}
SubTotal: {{ subtotal | currency:2 }}
Total: {{ total | currency:2 }}
TPL;

echo $M->render($T, [
    'subtotal' => 1111.2222,
    'total' => 8888.9999
]);

// SubTotal: 1.111,22
// Total: 8.888,99
```

Hi,

I was wondering if it's possible for the mustache loader to load any files in a templates directory instead of having to define exactly which folders. With Gulp/Webpack Handlebars setups it simply finds all .hbs files and gives access to them. 

This kind of behaviour is what I'm thinking with '*': 
return new Mustache_Engine(array(
   'loader' => new Mustache_Loader_FilesystemLoader(get_template_directory() . '/components/&#42;')

This isn't really an issue but I thought it could be a neat feature if it's possible with php.

Cheers.
Log `$level` is documented to accept `int`, but the actual code passes `string` constants. For the record upstream PSR interface declares `mixed`.

Small thing, but static code analysis catches type mismatch for me downstream. :)
Hi!

I am just wondering if you've already thought about FILTERS for templates that would work the same way like for rendering values.

Filter would look like like this: 
`"stripcomments" => function($content) {return preg_replace('/<!--(.*)-->/Uis', '', $content)}`
Solving the  problem of "no anonymous reference for objects"... Example:
```php
$abc = ['foo','bar','baz'];
echo $m->render(  "\n\t 1: <ul>{{#.}}<li>{{.}}</li>{{/.}}</ul>\n",  $abc  );
```
works fine with anonymous reference for array. But when using a "dictionary" like associative array,

```php
$abc = ['a'=>'foo','b'=>'bar','c'=>'baz'];
```
**it is impossible with Mustache**. A workaround  is to use a function that transforms the `$abc` dictionary into keys and vals,
```php
$abc_ugly = [  ['_key'=>'a', '_val'=>'foo'], 
          ['_key'=>'b', '_val'=>'bar'],  ['_key'=>'c', '_val'=>'baz']  ];
echo $m->render(
  "\n\t 2: <ul>{{#.}}<li>{{_key}}={{_val}}</li>{{/.}}</ul>\n",
  $abc_ugly  // ideal will be objs2list($abc) instead $abc_ugly
);
```

Another problem is to transform not the full root-dictionary, but only the object pointed by a *path*, example:

```php
echo $m->render(
  "\n\t 3: xx={{xx}}  <ul>{{#yy}}<li>{{_key}}={{_val}}</li>{{/yy}}</ul>\n",
  objs2list(  ['xx'=>123,'yy'=>$abc],  ['yy']  )
);
```
and, ideal, is to add it as a internal method, to call in standard way `$m->objs2list()`. So, this is the suggestion.

## Suggested helper

```php
/**
 * Transforns objects into array of "_key" and "_val" objects.
 * The object can be pointed by a $path (array of reference-labels). 
 */
function objs2list($obj,$path=NULL) {
  $l = [];
  $flag = ($path && count($path));
  foreach(($flag? arrayPath($obj, $path): $obj) as $k=>$v) 
     $l[] = ['_key'=>$k,'_val'=>$v];
  if ($flag) {
    arrayPath($obj, $path, $l); return $obj;
  } else return $l;
}


/**
 * set/return a nested array value
 *
 * @param array $array the array to modify
 * @param array $path  the path to the value
 * @param mixed $value (optional) value to set
 *
 * @return mixed previous value
 * @see https://stackoverflow.com/a/36042293/287948
 */
function arrayPath(&$array, $path = array(), &$value = null)
{
    $args = func_get_args();
    $ref = &$array;
    foreach ($path as $key) {
        if (!is_array($ref)) {
            $ref = array();
        }
        $ref = &$ref[$key];
    }
    $prev = $ref;
    if (array_key_exists(2, $args)) {
        // value param was passed -> we're setting
        $ref = $value;  // set the value
    }
    return $prev;
}
```
What are the minimum access requirements for the moustache cache?

Files are currently created as 0644, which seems fine but I have had problems in the past with PHP worms getting into cache files (this was with Twig, but I assume the principal is the same) due to PHP files being writeable. 

Sorry - I know this a ramble but I am uncomfortable with having writeable PHP files on my server (even/especially by the web server user) and I wondered what your thoughts are regarding best practice. 
Hi

I currently use an IF block to see if a value's been determined. But in some cases, a distance is determined, but is simply 0. It's hidden. 

How can I make sure Mustache displays this variable when it equals 0? I tried casting it explicitly as a string before passing it, but that doesn't work either. 

What's the work around or where could I look to accept a variable which is 0?

---

Is the following chance acceptable? (haven't created a pull request)
It adds  || $value == "0"
(empty value = 0, so comparing it to string)

```
 private function section%s(Mustache_Context $context, $indent, $value)
        {
            $buffer = \'\';

            if (%s) {
                $source = %s;
                $result = call_user_func($value, $source, %s);
                if (strpos($result, \'{{\') === false) {
                    $buffer .= $result;
                } else {
                    $buffer .= $this->mustache
                        ->loadLambda((string) $result%s)
                        ->renderInternal($context);
                }
            } elseif (!empty($value) || $value == "0" ) {
                $values = $this->isIterable($value) ? $value : array($value);
                foreach ($values as $value) {
                    $context->push($value);
                    %s
                    $context->pop();
                }
            }

            return $buffer;
        }
```
 