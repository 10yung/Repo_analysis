I'm on v2.2.3

I can set a color:
```
http://localhost:8934/blink1/fadeToRGB?rgb=%23FF11FF&time=2.7

{
  "blink1Serials": [
    "20004AE9"
  ],
  "lastColor": "#ff11ff",
  "lastTime": 2.7,
  "lastLedn": 0,
  "cmd": "fadeToRGB"
}
```
When I try to retrieve last color:
```
http://localhost:8934/blink1/lastColor

Cannot GET /blink1/lastColor
```

I have read in issue #316  the API changed to retrieve last color using fadeToRGB endpoint by itself, but it is not accurate, color shows as #000000
```
http://localhost:8934/blink1/fadeToRGB

{
  "blink1Serials": [
    "20004AE9"
  ],
  "lastColor": "#000000",
  "lastTime": 0.1,
  "lastLedn": 0,
  "cmd": "fadeToRGB",
  "status": "bad hex color specified undefined"
}
```
My setup is a DELL laptop with the D5000 Dell docking station. I was expecting the server tickle function to play when I unplug my laptop from the docking station, but that doesn't happen.
#### I discovered this today, after some heavy duty debugging until my head nearly imploded:

If the macOS system language is set to any language with a _comma_ separator (delimiter) 
instead of a _period_ (which is the default in all English languages, as far as I know), adding a new pattern through Blink1Control2 won't work unless you replace _all_ period characters with a comma. 

This can be totally confusing because the comma _already_ separates the different segments of the URL,  but I'm afraid the rabbit hole is far deeper and far more complex üêá

Even if adding the pattern will succeed (and by that I mean that the repeats, timing and rgb hex is "translated" correctly to their respective places in the response text), it is not possible to play the pattern afterwards, because (as you may have guessed by now)...

##  "/pattern/play" is hard coded to understand **periods** instead of commas, and _that's_ what almost made my head implode when I tried to grasp the inner beast of this logic. 

It's kind of like reverse engineering a **catch 22**

## Examples

This will fail :
```
http://localhost:8934/blink1/pattern/add?pname=blink3green&pattern=3,%2300ff00,1.5,%23000000,0.5
```

One theory I have is that the "." is interpreted as a"full stop" (or something else) by OSX, which messes up the resulting pattern that ends up like this: "3,%2300ff00,1,#5%230000,0,5"

This however, works:
```
http://localhost:8934/blink1/pattern/add?pname=blink3green&pattern=3,%2300ff00,1,5,%23000000,0,5
```
But as I mentioned, it's of no use because the pattern won't play correctly unless you implement some clever string replacing, but that's almost impossible to do, due to the complexity of it all, and LOTS of culprits. The "%23" bit being one of them.

Ok, I've done my best in explaining the problem, so I leave it hanging there for the moment. Now you know.

Ta-ta-ta-taaaa  üé∫

Andreas
Homebrew is shipping `blink1`, but it currently fails to build because the recorded commit ID for `v1.98a` is `de6c0a951af253cb4827604ef3ae89b1643efe28` (which was correct as of 2017-11-26). However, now that tag https://github.com/todbot/blink1/tree/v1.98a appears to be commit ID https://github.com/todbot/blink1/commit/6d3922d737c8a767cc4c58d2b99f0a355dd98c0b and thus Homebrew fails (https://github.com/Homebrew/homebrew-core/issues/31779).

Can you confirm that there was an intentional retag?
This project seems really cool and vital to Blink1.  If this is the offical SDK for it, it would be great to see this offer a BSD or MIT style license as well.  The CC-BY-SA is not bad, but there is some ambiguity that might leave people not comfortable using it, and reverting to just using the command line tools and shell exec.
It would be great if there was a setting to match the blink1's and the menu bar icon color.
Currently the "--servertickle" ('D' firmware command) will play the entire programmed color pattern in a loop.  It should be possible to play a sub-pattern, like:
```
blink1-tool --play 1,7,8    # play blue-blue-blue in a loop
blink1-tool -t 3000 --servertickle 1,1,4,5  # after 3 seconds, play green-green-green in a loop
```
This requires both changes to blink1-tool and the blink(1) firmware.

Hello,

I had previous bought one of the blink(1) mk2 devices for testing with an embedded system that I am working on a proof-of-concept for. 

I am utilizing Buildroot ([link](https://buildroot.org/)) for creating my embedded system image, with Linux kernel version 4.4.43-v7, and have attempted to get it working.

I am using the pre-compiled raspberry pi blink1-tool executable (found [here](https://github.com/todbot/blink1#blink1-tool)), but am unable to get the LEDs to trigger. 

I am continually greeted with the "no blink(1) devices found" error. I have used the following command, both with and without "sudo" prefixing it (utilizing the udev rule for the non-sudo user), just to do a quick test:

`(sudo) ./blink1-tool-rpi -t 400 --random 100`

I can see the usb device via "lsusb" (Bus 001 Device 005: ID 27b8:01ed), but it appears that the physical device and application are not linking up.

I have been able to get the blink(1) device working with regular Ubuntu and Raspbian images (I tested this in hopes to glean any information I could, unfortunately this did not get me anywhere). 

If you have an ideas how I would be able to get the blink(1) to function on under an embedded buildroot device that would be greatly appreciated. 

I could be missing a step somewhere along the way, so I would appreciate your thoughts.

Thanks.
You can do cool things with blink(1) using just `blink1-tool`.  Let's document that better.

For instance, here's a customized flashing thing:
https://gist.github.com/todbot/be18f570e4140d6a29e429dbd6826f5f
e.g. both of these should result in blink(1) flashing red for eternity: 
```
blink1-tool --playpattern '0,#ff0000,0.2,0,#000000,0.2,0'
```
```
blink1-tool --rgb FF0000 --blink 0
```

This does break the philosophy of `blink1-tool` always eventually exiting, but we'll allow it in this case.