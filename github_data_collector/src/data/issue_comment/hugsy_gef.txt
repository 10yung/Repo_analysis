## Add dereference support for rust types ##

### Description/Motivation/Screenshots ###
Currently when using gef with rust-gdb derefrencing fails as gef doesn't support Rust types. This patch adds support for Rust types much like the existing support for Golang.
Since certain gef commands use deference (e.g. pcustom), they also fail without this patch.

**Before**
Trying to deference when debugging rust binaries failed.
![image](https://user-images.githubusercontent.com/39744677/72180613-60ca3200-339c-11ea-9e7b-b4a81cbc25a0.png)

**Now**
Works nicely.
![image](https://user-images.githubusercontent.com/39744677/72180409-fca76e00-339b-11ea-8067-66591124e678.png)
### How Has This Been Tested? ###
Against a x86_64 rust binary with rust-gdb.

| Architecture |          Yes/No          | Comments                                  |
| ------------ | :----------------------: | ----------------------------------------- |
| x86-32       | :heavy_multiplication_x: |                                            |
| x86-64       | :heavy_check_mark: |                                           |
| ARM          | :heavy_multiplication_x: |                                           |
| AARCH64      | :heavy_multiplication_x: |                                           |
| MIPS         | :heavy_multiplication_x: |                                           |
| POWERPC      | :heavy_multiplication_x: |                                           |
| SPARC        | :heavy_multiplication_x: |                                          |
| RISC-V       | :heavy_multiplication_x: |                                           |
| `make tests` | :heavy_multiplication_x: |                                           |

### Checklist ###

<!-- N.B.: Your patch won't be reviewed unless fulfilling the following base requirements: -->
<!--- Put an `x` in all the boxes that are complete, or that don't apply -->
- [x] My PR was done against the `dev` branch, not `master`.
- [x] My code follows the code style of this project.
- [x] My change includes a change to the documentation, if required.
- [x] My change adds tests as appropriate.
- [x] I have read and agree to the **CONTRIBUTING** document.

Might be worth a try:
https://blog.travis-ci.com/2019-10-07-multi-cpu-architecture-support

Said to (alpha-)work on arm64, might be extended to arm & powerpc
## Allow Mach-O binaries to be debugged with gef on macOS ##

### Description/Motivation/Screenshots ###
Parts of gef depend on or expects the file being debugged to be an ELF. This PR allows for the correct `current_arch` to be set as well as adding support for getting the memory mappings via `info mach-regions`.

As there have now been a few ctfs with mac pwns (eg [machbook](https://github.com/how2hack/my-ctf-challenges/tree/master/balsnctf-2019/machbook) and [applepie](https://github.com/david942j/ctf-writeups/tree/master/0ctf-quals-2019/applepie)) being able to use gef would be great.

### How Has This Been Tested? ###

| Architecture |          Yes/No          | Comments                                  |
| ------------ | :----------------------: | ----------------------------------------- |
| x86-32       | :heavy_check_mark: |       |
| x86-64       | :heavy_check_mark: |     also on macOS 10.15, gdb 8.3                                      |
| ARM          | :heavy_multiplication_x: |                                           |
| AARCH64      | :heavy_multiplication_x: |                                           |
| MIPS         | :heavy_multiplication_x: |                                           |
| POWERPC      | :heavy_multiplication_x: |                                           |
| SPARC        | :heavy_multiplication_x: |                                           |
| `make tests` | :heavy_multiplication_x: |                                           |

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/hugsy/gef/469)
<!-- Reviewable:end -->

Fixes https://github.com/hugsy/gef/issues/365

`dereference_as_long` was checking if the provided address could be dereferenced and returning either 0 or the address as a long. As @Grazfather said, it's only used in the heap and after a bit of testing I can't see how this is any different or changes the behaviour to just casting it.

Maybe it was used elsewhere and required a valid address or 0 before?

<!-- Reviewable:start -->
---
This change is [<img src="https://reviewable.io/review_button.svg" height="34" align="absmiddle" alt="Reviewable"/>](https://reviewable.io/reviews/hugsy/gef/468)
<!-- Reviewable:end -->

I don't know if I'm missing something, but shouldn't be removed the equal to zero condition otherwise the first empty bin would stop the loop causing the summary to be incomplete?

https://github.com/hugsy/gef/blob/9798a2816d21da5a54b979e19c54446e08414ea9/gef.py#L6565-L6570

In case I can submit a patch to fix that.
Your issue will be closed unless you confirm the following:
  * [X] Did you use the latest version of GEF from `master` branch?
  * [X] Did you read the [documentation](https://gef.readthedocs.org/en/latest/) first?
  * [X] Did you check [closed issues](https://github.com/hugsy/gef/issues)?

### Step 1: Describe your environment

  * Operating System: Debian 10
  * Architecture: x86-64
  * GDB version (including the Python library version): 
GNU gdb (Debian 8.2.1-2) 8.2.1
Python 3.7.3 (default, Apr  3 2019, 05:39:12)

### Step 2: Describe your problem

When I load certain aarch64 binaries with gef, it complains about lack of .gnu_debugdata and then it says most features won't work. I would be OK with that if it actually displayed context correctly, but it doesn't. It then believes all code is x86, and proceeds to dereference x86 registers, which of course fails.

#### Steps to reproduce

  1. Load aarch64 binary without .gnu_debugdata 
  2. Attempt to debug stepping as normal

#### Observed Results
I get the following warning when loading the binary
```
GEF for linux ready, type `gef' to start, `gef config' to configure
76 commands loaded for GDB 8.2.1 using Python engine 3.7
[*] 4 commands could not be loaded, run `gef missing` to know why.
[+] Configuration from '/home/user/.gef.rc' restored
Reading symbols from binary...Reading symbols from .gnu_debugdata for /home/user/binary...(no debugging symbols found)...done.
[!] '.gnu_debugdata for /home/user/binary' not found/readable
[!] Failed to get file debug information, most of gef features will not work
(no debugging symbols found)...done.
gef➤  
```

Which probably confuses gef, since it identifies the code as x86:32:

```
────────────────────────────────────────────────────────────────────────────────────────────────── stack ────
[!] Command 'dereference' failed to execute properly, reason: Unknown register.
────────────────────────────────────────────────────────────────────────────────────────────── registers ────
──────────────────────────────────────────────────────────────────────────────────────────── code:x86:32 ────
   0x6fc195e880 <Object::Init()+168> b      0x6fc195e868 <_ZN10Object4InitEv+144>
   0x6fc195e884 <Object::Start()+0> ldr    x0,  [x0,  #16]
   0x6fc195e888 <Object::Start()+4> cbz    x0,  0x6fc195e898 <_ZN10Object5StartEv+20>
 → 0x6fc195e88c <Object::Start()+8> ldr    x8,  [x0]
   0x6fc195e890 <Object::Start()+12> ldr    x1,  [x8,  #24]
   0x6fc195e894 <Object::Start()+16> br     x1

But gdb detects the architecture correctly:
gef➤  show arch
The target architecture is set automatically (currently aarch64)
```

#### Expected results

As per the warning, I'm not expecting most of gef features to work (although to be honest, I haven't researched why), but I expect the context and registers to be displayed correctly.


Todo:

 - [ ] Remove reference to Python2 compatibility layer
 - [ ] Update unit tests
 - [ ] Update documentation
## Add M68K Architecture ##

### Description/Motivation/Screenshots ###
Implement M68K architecture. Capstone / Keystone / Unicorn does not have special modes for this architecture and it is untested.
`mprotect_asm` is unimplemented because I am unaware of the Linux m68k system call numbers; I am working on supervisor code instead of user code.

Example context screenshot:
![Screenshot_2019-07-12_12-12-36](https://user-images.githubusercontent.com/2096920/61145980-766aa780-a49e-11e9-9b5d-26ce8f7957ce.png)

### How Has This Been Tested? ###

| Architecture | Yes/No                   | Comments               |
|--------------|:------------------------:|------------------------|
| x86-32       | :heavy_multiplication_x: |                        |
| x86-64       | :heavy_multiplication_x: |                        |
| ARM          | :heavy_multiplication_x: |                        |
| AARCH64      | :heavy_multiplication_x: |                        |
| MIPS         | :heavy_multiplication_x: |                        |
| POWERPC      | :heavy_multiplication_x: |                        |
| SPARC        | :heavy_multiplication_x: |                        |
| `make tests` | :heavy_check_mark: |                        |

### Checklist ###

<!-- N.B.: Your patch won't be reviewed unless fulfilling the following base requirements: -->
<!--- Put an `x` in all the boxes that are complete, or that don't apply -->
- [x] If my code is a bug fix it targets master, otherwise it targets dev.
- [x] My code follows the code style of this project.

Mostly copy-pasting here. I don't see significant differences; please correct me if wrong.

- [x] My change includes a change to the documentation, if required.

Unable to find architecture documentation in `docs/`.

- [x] My change adds tests as appropriate.

Unable to find cross-compiling architecture tests in `tests/`.

- [x] I have read and agree to the **CONTRIBUTING** document.

### Step 1: Describe your environment

  * Ubuntu Linux
  * X86-64 cross debugging ARM
  * 7.1

### Step 2: Describe your problem
It appears on the cstool version that I am using, the bytearray type python object passed to cs_disasm in the unicorn-emulate auto-generated python code inside of the disassmble() function is not a valid format for the instructions. I was able to easily fix this myself by changing the following line:
for i in cs.disasm(code,addr):

to

for i in cs.disasm(bytes(code),addr):
#### Steps to reproduce

  Attempt to run unicorn-emulate -n1

#### Observed Results

  * A stack trace from ctypes, of the exception ctyptes.ArgumentError: argument 2:<class 'TypeError'>: wrong type

Additionally, I've noted that memory that claims it's readable, but is in fact NOT readable by gdb/ptrace (which I've discovered is occasionally true for reasons I know not why) causes unicorn-emulate to fail. It's not an ISSUE per se, but a simple enhancement might be to either ignore these memory regions, or zero-fill them
## Fix ida pro sync ##
Some previous commit changing the case of ida commands made ida stop working, because they didnt fix an rpc on the gef.py . This fixes it

### Checklist ###
- [X] If my code is a bug fix it targets master, otherwise it targets dev.
- [X] My code follows the code style of this project.
- [X] My change includes a change to the documentation, if required.
- [X] My change adds tests as appropriate.
- [X] I have read and agree to the **CONTRIBUTING** document.
