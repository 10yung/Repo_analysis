I never see this in my own testing but Sentry crash reports show that some real-world users are getting the following issue. I wonder how I continue to diagnose it.

## TL;DR

Fetch (NetworkFetcher) calls the success closure but the data is apparently not ok.

```swift
           myCache.fetch(URL: url, failure: {error in
                print("Image fetch error \(String(describing: error)) setting image \(url)")
            }, success: {data in
                print("loaded image: \(url)")
                if let image = UIImage(data: data) {
                    self.scrollView.display(image: image)
                } else {
                    // This is where I want to figure out why data is not actually the image data.
                    // Would it make sense to remove this item from the cache here and have it re-download?
                }
            })
```

## Questions / Ideas

- Is Haneke caching the http response for 4XX or 5XX results? Then I might occasionally get a bad result from a sad server into the cache.

- Some users could have a lot of images. Could this be a timing issue where the app gets a memory warning and the `data` is cleared before _my code_ uses it to make a UIImage?


Are there any plans to distribute this library via the Swift Package Manger?

Can you update for swift5.1, thanks
This pull request makes sure, that before a file is written to the disk, the folders in the path it should be written to exists. All the needed intermediate directories are created, so that the data can be written to the file without failing due to a non existing directory.

Some already mentioned in #371 and #245, that after the `removeAll()` method of a cache is called, the folders are deleted, but not recreated directly. So the writes after calling `removeAll()` are failing with an error. 

I currently have an `AuthFetcher` that I use when requesting images that require headers set. 

```swift
import Haneke

class AuthFetcher<T: DataConvertible>: NetworkFetcher<T> {

    private lazy var httpAdditionalHeaders: HTTPHeader = [:]

    override var session: URLSession {
        let configuration = URLSessionConfiguration.default
        configuration.httpAdditionalHeaders = httpAdditionalHeaders
        return URLSession(configuration: configuration)
    }

    init(url: URL, headers: [String: String]) {
        super.init(URL: url)
        self.httpAdditionalHeaders = headers
    }
}

```


Is it possible to attach headers when using the shorter `imageView.hnk_setImageFromURL(url)` syntax?

When using `AuthFetcher` I seem to be losing performance, I suspect it is bypassing the memory cache and going straight to disk as calling `hnk_setImageFromURL` on non auth images is excellent.

```swift
    private var storage: Cache<Data> {
        return Cache<Data>(name: "offline_store")
    }

  func remoteWithAuth(at url: URL, completion: @escaping ((URL) -> ())) {
        storage.fetch(fetcher: AuthFetcher<Haneke.Data>(url: url, headers: oauthSvc.authHeaders))
            .onSuccess { [weak self] stream in
                self?.handleDataStream(stream: stream, url: url, completion: completion)
        }
    }

    private func handleDataStream(stream: Data, url: URL, completion: @escaping ((URL) -> ())) {
        guard let path = URL(string: DiskCache.basePath()) else { return }
        let cached = DiskCache(path: path.absoluteString).path(forKey: url.absoluteString)
        let file = URL(fileURLWithPath: cached)
        
        if !exists(at: cached) {
            try? stream.write(to: file, options: .atomicWrite)
        }
        
        completion(file)
    }

```




please its crach on swift 5 and ios 12 please fix it
Honestly why would you use this framework? You can easily reproduce this logic by using local cache and about 10 lines of code.
This adds support for SwiftPM manifest based dependency managers. Specifically this adds support for installing via [Accio](https://github.com/JamitLabs/Accio) but will probably also work with SwiftPM once it's integrated into Xcode.

Please note that this project is part of Accio's official [integration tests](https://github.com/JamitLabs/Accio/tree/work/1000-frameworks/Demo/Shared/AppDependencies) within the [Demo project](https://github.com/JamitLabs/Accio/tree/work/1000-frameworks/Demo).
When I am trying to integrate updated library which is supporting to swift4.2 version through cocopods, It always fetching 0.10.1 older version of the library instead of the updated version. Could you please release the new version of the framework that is 0.11.1 which is supporting to swift 4.2 version via cocoapods?