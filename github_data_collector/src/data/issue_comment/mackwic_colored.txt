It is showing numbers rather than color. in this case `blue`
![Capture](https://user-images.githubusercontent.com/26684644/62410799-a92b3a00-b61d-11e9-9cd8-6a6adca31970.PNG)

Though i have added control::set_virtual_terminal(true); in my source file.
![Capture](https://user-images.githubusercontent.com/26684644/62410820-ea234e80-b61d-11e9-95dd-24712bdb73aa.PNG)


This change adds escape sequences to mark color codes so that GNU readline counts them properly. I believe this would resolve NerdyPepper/pista#1, but I haven't tried it. 

This change breaks the tests which compare against the "reference implementation" (ansi_term), but all other unit tests pass. For that reason, this PR is a work in progress. I'm not sure if I'll get back around to finishing it, but I wanted to share the progress to this point.

Thanks for your work on this crate!
See title. I don't know if this is already possible using the current possibilities of `const fn`, but setting a color on a constant string is definitely something I would expect to be possible.
I'd expected to be able to push a coloured string into another, but it loses the colour:

```rust
fn main() {
    let mut s = String::with_capacity(5);
    let msg = "blue";
    s.push_str(&msg.blue());

    println!("{}", msg.blue()); // works
    println!("{}", s); // no colour
}
```

Is this supported?
Implements:

``` rust
"hello".palette(23); // 23nth colour of palette
"hello".true_colour(23, 45,  23); // true colour code
"hello".hex_colour("#232332"); // hex colour code
```
