I don't fully understand how cage source mount is meant to work. Some guesses:
a) Given source code and artifact (docker container) are the same, mounting the source will just replace what's in the container
b) I will build my artifact and then run cage build after every change I want reflected in the container
c) I have some kind of a dev mode inside the container to sidestep how the application is served in production

Examples:
a) Will work for statics served via Nginx
b) webpack build process or JAR artifact
c) Run webpack dev mode in container?
Adds crates.io categorization
I want to use ipv4-address field in docker-compose file, and this field is supported by docker-compose.yml version 2. 
However, when I run `cage up`, I got this error:
> services.paas.networks.net: unknown field `ipv4_address`, expected `aliases` at line 28 column 9

Below is my backend.yml:
```
service
  node2: 
    image: "paas/node"
    build: .
    networks: 
      net:
        ipv4_address: 172.24.0.2
  
networks: 
  net:
    ipam:
      config:
        - subnet: 172.24.0.0/24
```

add --service-ports to run command opts and add run opts to test command
Hi there! üëã `cage` looks like a nice tool, and I'm excited to try it out on a project, but I'm hitting  snag.

I created a service within `pods/frontend.yml` that uses [a `build` context](https://docs.docker.com/compose/compose-file/#build) of a git repo URL ([source code](https://github.com/andrewsardone/example-cage-project-with-build-context/blob/82dea513d73bf89d6d2ec54398cbff911225fb55/pods/frontend.yml#L7)). I can run `cargo build` to build the image, and things look good.

**The problem is with running `cage up`.** I see the following error message:

```
‚ùØ cage up
WARNING: docker-compose.yml file validation disabled until valico is updated (from compose_yml::v2::validate)
WARNING: docker-compose.yml file validation disabled until valico is updated (from compose_yml::v2::validate)
ERROR: The Compose file is invalid because:
Service web has neither an image nor a build context specified. At least one must be provided.
Error: error running 'docker-compose -p examplecageprojectwithbuildcontext -f /Users/andrew/source/andrewsardone/example-cage-project-with-build-context/.cage/pods/frontend.yml up -d'
```

Inspecting my **generated docker-compose file** within the `.cage` directory, I see **it's missing a `build` context**:

```
‚ùØ cat /Users/andrew/source/andrewsardone/example-cage-project-with-build-context/.cage/pods/frontend.yml
---
version: "2"
services:
  web:
    environment:
      DATABASE_URL: "postgres://postgres@db:5432/example-cage-project-with-build-context_development"
      GLOBAL_PASSWORD: magic
      PROJECT_NAME: "example-cage-project-with-build-context"
      RACK_ENV: development
      RAILS_ENV: development
      SOME_PASSWORD: secret
    labels:
      io.fdy.cage.pod: frontend
      io.fdy.cage.shell: bash
      io.fdy.cage.srcdir: /usr/src/app
      io.fdy.cage.target: development
      io.fdy.cage.test: bundle exec rake
    ports:
      - "3000:3000" 
```

([Extended description in source code's README](https://github.com/andrewsardone/example-cage-project-with-build-context#cage-build-works)).

---

Is there something I'm missing? Am I using `cage` improperly? If not, any idea of the source of the bug?

Thanks!
Example project:

```
.
‚îî‚îÄ‚îÄ pods
   ‚îú‚îÄ‚îÄ db.yml
```

```
# in pods/db.yml
version: "2.1"
services:
  db:
    healthcheck:
      test: ["CMD", "true"]
```

When I run `cage up` I get:

```
ERROR: The Compose file '/foo/.cage/pods/db.yml' is invalid because:
Unsupported config option for services.db: 'healthcheck'
Error: error running 'docker-compose -p foo -f /foo/.cage/pods/db.yml up -d'
```

Looking at `/foo/.cage/pods/db.yml`, I see that it's configured with `version: "2"`. 

**Expected**: `/foo/.cage/pods/db.yml` should have `version: "2.1"`

My hunch is that cage is creating an empty `compose_yml::v2::File` which gets a default version of `"2"`: https://github.com/emk/compose_yml/blob/b660f32fd4579a7e90526b51e0b97456b0b23c3e/src/v2/file.rs#L102
```yaml
ports:
  - $PORT:80
```

This will fail to print out a status entry for the container with `Error: cannot parse without interpolating environment variables '$PORT:80'`
Should be self-explanatory.
I sometimes want docker-compose to do the interpolation, rather than cage.  For example, I have a local testing script that turns arguments into environment variables to smuggle them through docker into the container, which then has a wrapper script that turns them back into arguments to call the interesting binary inside my container.  Cage eagerly interpolates the environment variables, which is fine when calling `cage up` from the testing script but if I try to do `cage status` or `cage logs` or whatever from another terminal window it tries (and fails) to eagerly interpolate again.

As far as I see there's no workaround for this, but I'd like to see either a cage argument or maybe special syntax to allow deferring the interpolation.

I'm happy to implement this myself with some guidance on what would be accepted :)
This fixes cage to work after emk/compose_yml#12.