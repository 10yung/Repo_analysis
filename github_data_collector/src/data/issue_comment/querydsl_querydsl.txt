There are 2 entity in my project

```java
@Entity
public class Project {
    @Id
    private Long id;

    ......

    @OneToMany
    @JoinTable(name = "pm_project_file_")
    @OrderBy(value = "createdDate DESC")
    private List<FileInfo> files;
}

@Entity
public class FileInfo {
    ... // fileInfo
}
```
I want to query files with querydsl. How can I do this?

I know that can be query by jpql like this 
```
 @Query("select f from Project p, in(p.files) f where p.id=?1 order by f.createdDate desc")
```
but how to query with querydsl?

I do not want to change onetomany to (mappedBy="xxx"),because the FileInfo entity will be used other way 

My English is not good ,sorry.

I'm trying to run the following subquery using the com.querydsl.sql.SQLExpressions class:

```sql

.select(Expressions.stringTemplate("group_concat({0}, ' & ')", QSoilAmendment.soilAmendment.code))
            .from(QTreatmentSoilAmendment.treatmentSoilAmendment)
            .join(QSoilAmendment.soilAmendment).on(QTreatmentSoilAmendment.treatmentSoilAmendment.pk.soilAmendmentId.eq(QSoilAmendment.soilAmendment.soilAmendmentId))
            .where(QTreatmentSoilAmendment.treatmentSoilAmendment.pk.plantingTreatment.treatmentId.eq(QPlantingTreatment.plantingTreatment.treatmentId))
            .as(Expressions.stringPath("soilAmendment")), true),

```

But I am getting the following error:

```
Caused by: org.postgresql.util.PSQLException: ERROR: more than one row returned by a subquery used as an expression
	at org.postgresql.core.v3.QueryExecutorImpl.receiveErrorResponse(QueryExecutorImpl.java:2440)
	at org.postgresql.core.v3.QueryExecutorImpl.processResults(QueryExecutorImpl.java:2183)
	at org.postgresql.core.v3.QueryExecutorImpl.execute(QueryExecutorImpl.java:308)
	at org.postgresql.jdbc.PgStatement.executeInternal(PgStatement.java:441)
	at org.postgresql.jdbc.PgStatement.execute(PgStatement.java:365)
	at org.postgresql.jdbc.PgPreparedStatement.executeWithFlags(PgPreparedStatement.java:150)
	at org.postgresql.jdbc.PgPreparedStatement.executeQuery(PgPreparedStatement.java:113)
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.executeQuery(ProxyPreparedStatement.java:52)
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.executeQuery(HikariProxyPreparedStatement.java)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:60)
```

I understand that the subquery is trying to return more than one row, which is indeed what I want. This exact code has worked for me with MYSQL, but when I try it with a Postgres db I get the error above. 

Any ideas/suggestions?
Subclasses of `AbstractQuery` may override `createQuery()`, but not `createQuery(QueryModifiers, boolean)`. This leads to issues when subclasses want to adjust the rendering method. While overriding `createQuery` covers most use cases, some specific methods use `createQuery(QueryModifiers, boolean)` instead.  As a result, one has to override `fetchCount`, `fetchResults`, `getResultList` , `fetchOne` and `getSingleResult` as well.

As a proof of concept, see how I've extended `AbstractQuery` for it to execute queries on top of [Blaze-Persistence](https://github.com/Blazebit/blaze-persistence) Criteria Builder API in: https://github.com/jwgmeligmeyling/blaze-persistence-querydsl
Kind of a companion to my other PR #2512, this PR makes it more easily to extend QueryDSL.

The `AbstractModule` already exposes its `RoundEnvironment`, but not the `ProcessingEnvironment`. Any `Element` returned from the `RoundEnvironment` is very likely to need processing by the `Types` utils only available through the `ProcessingEnvironment`. Exposing the `ProcessingEnvironment` through `AbstractModule.get(ProcessingEnvironment.class)` provides this flexibility.


hi, just experiencing perf issue on first few runs of querydsl queries, we have spring rest controller fetching one simple select query (1 row) and whole endpoint tooks for the first time e.g. 3sec, for the second time 50ms, is there any cache or warmuping of query parsing or something like that?

version: 4.1.4
one entity:
```
   @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER)
    @JoinColumn(name = "demand_no", referencedColumnName = "demand_no", insertable = false, updatable = false)
    List<Goods> goodsList;
```
query:
```
QueryResults<ProduceDemand> tuples = jpaQueryFactory.selectFrom(qProduceDemand)
                .where(buildPredicate(demandPageQuery))
                .orderBy(qProduceDemand.id.asc())
                .offset(pageable.getOffset())
                .limit(demandPageQuery.getPageSize())
                .fetchResults();
```

Occasionally. What seems to be the problem,thanks
What maven repo is this supposed to be resolved from?

springframework.roo:org.springframework.roo.annotations:jar:1.2.3.RELEASE

And is it still needed going forward?
After update project to spring boot 2.2.2. Querydsl 4.2.1.
Fixes Issue #2264 
I try to run the example. This is what I have done.

```
C:\Users\Guest>cd C:\Users\Guest\git\querydsl\querydsl-examples\

C:\Users\Guest\git\querydsl\querydsl-examples>mvn
[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO]
[INFO] Querydsl - Examples
[INFO] Querydsl example - SQL Spring
[INFO] Querydsl example - SQL Guice
[INFO] Querydsl example - JPA Guice
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO]
[INFO] Querydsl - Examples ................................ SKIPPED
[INFO] Querydsl example - SQL Spring ...................... SKIPPED
[INFO] Querydsl example - SQL Guice ....................... SKIPPED
[INFO] Querydsl example - JPA Guice ....................... SKIPPED
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 0.083 s
[INFO] Finished at: 2019-12-21T10:41:22+01:00
[INFO] Final Memory: 43M/5888M
[INFO] ------------------------------------------------------------------------
[ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format <plugin-prefix>:<goal> or <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: validate, initialize, generate-sources, process-sources, generate-resources, process-resources, compile, process-classes, generate-test-sources, process-test-sources, generate-test-resources, process-test-resources, test-compile, process-test-classes, test, prepare-package, package, pre-integration-test, integration-test, post-integration-test, verify, install, deploy, pre-clean, clean, post-clean, pre-site, site, post-site, site-deploy. -> [Help 1]
[ERROR]
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR]
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/NoGoalSpecifiedException
C:\Users\Guest\git\querydsl\querydsl-examples>
```

The build failed. Please introduce default builds in order to complete "Project Build Require Only One Step" in the best-practice of https://www.planetgeek.ch/wp-content/uploads/2013/06/Clean-Code-V2.2.pdf