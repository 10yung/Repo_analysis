I am running into an issue where pgxpool returns partial rows. I am using pgx v4.1.2

```
<nil> ERR Query args=[0,1679380636000,["otelcol"]] module=pgx pid=268 sql="SELECT ..."                                                                                                                                             <nil> INF Dialing PostgreSQL server host=postgresql module=pgx
63.623616 INF Query args=[0,1679380636000,["otelcol"]] module=pgx pid=271 rowCount=126 sql="SELECT ..." 
<nil> ERR Query args=[0,1679380636000,["otelcol"]] module=pgx pid=271 sql="SELECT ..."
<nil> INF Dialing PostgreSQL server host=postgresql module=pgx
```
I turned on trace, but pgx only print ERR, nothing else.

```go
	poolConfig, err := pgxpool.ParseConfig(dburl)
	if err != nil {
		return nil, err
	}

	poolConfig.ConnConfig.LogLevel = pgx.LogLevelTrace
	poolConfig.ConnConfig.Logger = zerologadapter.NewLogger(zerolog.New(zerolog.NewConsoleWriter()))

	return pgxpool.ConnectConfig(ctx, poolConfig)
```
query code:
```go
	conn, err := pool.Acquire(ctx)
	if err != nil {
		log.Err(err).Msg("error acquire db connection from pool")
		return nil
	}
	defer conn.Release()

	var chunks []string // blobs of the index, note: last one is the time delta
	err = conn.QueryRow(ctx, `SELECT chunks::json FROM header WHERE hid = $1`, hid).Scan(&chunks)
	if err != nil {
		log.Err(err).Msg("select bucket chunks error")
		return nil
	}
	return chunks
```

The only thing I noticed is, every ERR followed by this log file.
```
<nil> INF Dialing PostgreSQL server host=postgresql module=pgx
```

Any pointers on how to debug the error? 


I'm not sure if this issue (assuming it is one) lies here or in pgconn.

The Go standard library expects an `io.EOF` be returned by drivers when there are no more rows to be read (under non-error conditions). The `stdlib` package correctly returns `io.EOF` when no error has occured during reading. If an error is returned during reading, this is then returned to the standard library verbatim.

We are experiencing circumstances where pgx `Rows.Err()` is returning `io.EOF` but the reading of rows _did not complete_. The error is being returned to the standard library at https://github.com/jackc/pgx/blob/69048c281c7cc134b9dd4ed3883e1c639c211d75/stdlib/sql.go#L473
The consequence of this is that from the clients perspective, the row reading _did_ complete, but actually it only got part way through the result set.. this can be quite disasterous.

The circumstances are reproducable, although perhaps a little off-piste: we are sending a `SIGKILL` to a CockroachDB instance (which uses pg protocol).. that is running inside a kubernetes cluster (so dockerised). If a client is busy reading rows whilst this occurs, and happens to be connected to that particular instance, the reading stops short and no error is returned. Unfortunately I don't have an isolated reproduction case for this, I could possibly try and piece something together if wanted.

So, to trace this through a bit further...

- pgx `connRows.Next()` calls pgconn `ResultReader.NextRow()` (https://github.com/jackc/pgx/blob/69048c281c7cc134b9dd4ed3883e1c639c211d75/rows.go#L176)
- pgconn `ResultReader.NextRow()` calls `ResultReader.receiveMessage()` (https://github.com/jackc/pgconn/blob/e7dd01e064b5caf31bd290db23fadd13e60f8cd8/pgconn.go#L1297). If an error is returned by this function `false` is returned by `NextRow()`, stopping any further iteration
- pgconn `ResultReader.receiveMessage()` calls `PgConn.receiveMessage()` (https://github.com/jackc/pgconn/blob/e7dd01e064b5caf31bd290db23fadd13e60f8cd8/pgconn.go#L1364). If this returns an error, this is set into `ResultReader.err` (and this is the error value that is returned to the standard library) via `ResultReader.concludeCommand` (https://github.com/jackc/pgconn/blob/e7dd01e064b5caf31bd290db23fadd13e60f8cd8/pgconn.go#L1370 / https://github.com/jackc/pgconn/blob/e7dd01e064b5caf31bd290db23fadd13e60f8cd8/pgconn.go#L1398)
- Assuming bufferingReceive is false, pgconn `PgConn.receiveMessage()` calls `Frontend.Receive()` - this is implemented by pgproto3 `Frontend`. The error from this call is returned verbatim.
- pgproto3 `Frontend.Receive()` calls `ChunkReader.Next()` (https://github.com/jackc/pgproto3/blob/master/frontend.go#L63-L77)
- The implementation of `ChunkReader.Next()` calls `ChunkReader.appendAtLeast()` (https://github.com/jackc/chunkreader/blob/2c463c0e7d0d0876517f087ce2cce66a46182141/chunkreader.go#L83-L87). That then calls `io.ReadAtLeast()`, which we are seeing return `io.EOF` as an error in circumstances where not all rows have been received. I believe the underlying reader for what we are dealing with in our example is standard library net `TCPConn` wrapped with crypto/tls `Client`.

My understanding of `io.EOF` is that it should be returned on graceful end of input - which perhaps seems a bit odd given we are sending a SIGKILL to the server. `tcpdump` shows a `FIN / ACK` is being sent by the server, which maybe suggests the kernel is slamming to door on the client, the client sees this as graceful? Quite unsure.

Either way, should the libraries not protect against this occurring? There are a couple of things that seemingly could help here.. 

1. I'm not well versed in postgres protocol, but it seems you'd expect a `CommandComplete` to come through, which it clearly won't be in this case. pgconn could check for `io.EOF` and return `io.UnexpectedEOF` if the command did not complete?
1. Alternatively could the `stdlib` package do something similar? If `io.EOF` is returned, return `io.UnexpectedEOF` the the caller.
Given following code:
```go
package main

import (
	"fmt"
	"github.com/jackc/pgx"
)

func main() {
	dsn := "host=db port=5432"
	cfg, _ := pgx.ParseConnectionString(dsn)
	_, err := pgx.Connect(cfg)
	fmt.Println(err)
}
```

expected output is:
```
dial tcp: lookup db: no such host
```

but if `db` directory is present in working directory, we get following output:
```
dial unix db/.s.PGSQL.5432: connect: no such file or directory
```

Bug is caused by `ConnConfig::networkAddresses()` method assuming that if `os.Stat(cc.Host)` returns no error, given host is in fact socket file.

This error can easily occur in Docker environments, where host such as `db` are common for database containers.
We currently use the google/uuid library for our UUIDs. It'd be great if there was support for this, either directly in UUIDArray, or in an `ext/` package like uuid-frs
Provision of adding instrumentation to `pgx/v4/pgxpool`. Right now, when using pgxpool, instrumentation has to be manually added, record errors etc. I glanced through the pgxpool sourcecode, though couldn't find any relevant interfaces or structs where I could plug in instrumentation. I think it would be awesome to have provision of adding it, as any production ready system at a decent scale would make use of monitoring. 

E.g. https://www.elastic.co/guide/en/apm/agent/go/current/instrumenting-source.html#builtin-modules-apmsql
Connecting to PGBouncer, without SSL, and attempting to run any query fails with:

```
ERROR: unsupported pkt type: 80 (SQLSTATE 08P01)
```

I also tried 4.0.0 and it seems that this error is not new. Looks quite similar to #512. I attempted both the `sql.DB` interface and the native `pgx` interface to no avail.

*Versions*:
* PGBouncer 1.11.0
* pgx 4.0.0, 4.1.2
error
 ` can't scan into dest[3]: unknown oid 57409 cannot be scanned into &[]`

sql
```
CREATE TYPE url AS (
	url varchar,
	status int4);

CREATE TABLE public.tiantang_page (
	href varchar NOT NULL,
	status int4 NOT NULL,
	description varchar NOT NULL,
	urls url[] NULL,
);

```
go 
```
rows, err := conn.Query(context.Background(), "select href,status,description,urls from public.tiantang_page ;")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		var row = testData{}
		err = rows.Scan(&row.href,&row.status,&row.description,&row.urls)
		if err != nil {
			log.Fatal(err)
		}
		println("")
	}
```
I want to use pgxpool with sqlx and I am trying to adapt example from [this comment](https://github.com/jackc/pgx/issues/81#issuecomment-296446179) for version v4. But seems like there is no `stdlib.OpenFromConnPool` method now. 

How I can get `sql.DB` from `*pgxpool.Pool` ?

Thank you!
Running copy_from_test.go for CrateDB throws below error
`ERROR: SQLParseException: line 1:30: mismatched input 'from' expecting {'TO', 'WHERE'} (SQLSTATE XX000)`

Please find below table schema and go code taken from copy_from_test.go to test CopyFrom functionality in CrateDB

**CrateDB table schema** 
`create table foo(
		a int2,
		b int4,
		c int8
	);`

**CopyFrom Code**
```
func  CopyFromTest() {

	conn, err := pgx.Connect(context.Background(), "postgres://crate:crate@192.168.53.221:5432/doc")
	if err != nil {
		logger.Fatalf("Unable to establish connection: %v", err)
	}

	inputRows := [][]interface{}{
		{int16(0), int32(1), int64(2)},
		{nil, nil, nil},
	}

	copyCount, err := conn.CopyFrom(context.Background(), pgx.Identifier{"foo"}, []string{"a", "b", "c"}, pgx.CopyFromRows(inputRows))
	if err != nil {
		logger.Errorf("Unexpected error for CopyFrom: %v", err)
	}
	if int(copyCount) != len(inputRows) {
		logger.Errorf("Expected CopyFrom to return %d copied rows, but got %d", len(inputRows), copyCount)
	}
}
```

**Exception** 
`ERROR: SQLParseException: line 1:30: mismatched input 'from' expecting {'TO', 'WHERE'} (SQLSTATE XX000)`

I have the table that contains around 300k rows satisfying this query (when I send it to the db directly):
```sql
SELECT 
	b.id, pri.provider
FROM
	bookings AS b JOIN provider_information AS pri ON b.id = pri.id
WHERE
	pri.provider_info->>'supplier_id' = 'ID'
```

But when I do that via pgx, I retrieve about 3k rows:
```go
config, err := pgxpool.ParseConfig(dbinfo)
if err != nil {
	return nil, err
}
config.ConnConfig.PreferSimpleProtocol = true
config.MaxConns = 80
pool, err := pgxpool.ConnectConfig(context.Background(), config)
if err != nil {
	return nil, err
}

const query = `SELECT 
		b.id, pri.provider_data
	FROM
		bookings AS b JOIN provider_information AS pri ON b.id = pri.id
	WHERE
		pri.provider_info->>'supplier_id' = 'ID'`


rows, err := pool.Query(context.Background(), query)
if err != nil {
	panic(errors.Wrap(err, "query bookings"))
}

for rows.Next() {
	if err := rows.Err(); err != nil {
		log.Println("next row", err)
		continue
	}

	// some code
}
```