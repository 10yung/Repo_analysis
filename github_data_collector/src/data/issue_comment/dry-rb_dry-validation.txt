In complex rules, it may be useful to know whether the key has any failure message already.

```ruby
rule(:foos).each do
  key.success? # => true
  key.failure? # => false
  key.failure('wrong')
  key.success? # => false
  key.failure? # => true
end
```
```ruby
class MyContract < Dry::Validation::Contract
  params do
    required(:hogwarts_house).hash do
      required(:head).filled(:string)
      required(:common_room).hash do
        required(:name).filled(:string)
        required(:location).filled(:string)
      end
    end
  end

  rule('hogwarts_house.head').validate(size?: 1..255)
  rule('hogwarts_house.head').validate(format?: SOME_REGEX)
  rule('hogwarts_house.common_room.location').validate(included_in?: ['tower', 'underground'])
end
```

For `included_in?` and `size?` passing an array of integers/strings not working but it works when just one value passed or with predicates which do not require arrays)
`included_in?`
> `rule('hogwarts_house.common_room.location').validate(included_in?: ['tower', 'underground'])`

`size?`
>`rule('hogwarts_house.head').validate(size?: 1..255)`
ArgumentError (wrong number of arguments (given 256, expected 2))

This predicate is just returning error.
`format?`
>`rule('hogwarts_house.head').validate(format?: SOME_REGEX)`
Dry::Container::Error: Nothing registered with the key :format?
## Examples

```ruby
require 'dry-validation'

class PropsContract < Dry::Validation::Contract
  json do
    required(:contacts).value(:array, min_size?: 1).each do
      hash do
        required(:name).filled(:string)
        required(:email).filled(:string)
        required(:phone).filled(:string)
      end
    end
  end

  rule("contacts[].email").each do
    key.failure("email not valid") unless value.include?('@')
  end
end

c = PropsContract.new

c.(
  contacts: [
    { name: 'Jane', email: 'jane@doe.org', phone: '123' },
    { name: 'John', email: 'oops', phone: '123' }
  ]).errors.to_h.inspect
# {:email=>{1=>["email not valid"]}}
```

## Resources

Refs #603 
## Examples

```ruby
require 'dry-validation'

class PropsContract < Dry::Validation::Contract
  json do
    required(:contacts).value(:array, min_size?: 1).each do
      hash do
        required(:name).filled(:string)
        required(:email).filled(:string)
        required(:phone).filled(:string)
      end
    end
  end

  rule(:contacts).each do |index:|
      key([:email, index]).failure("email not valid")  unless value[:email].include?('@')
  end
end

c = PropsContract.new

c.(
  contacts: [
    { name: 'Jane', email: 'jane@doe.org', phone: '123' },
    { name: 'John', email: 'oops', phone: '123' }
  ]).errors.to_h.inspect
# {:email=>{1=>["email not valid"]}}

```

## Resources

Refs #603 

At the moment validation contract returns nice human-readable errors via translation backend. Being a robot, I do not like it and I'd prefer pure data object/hash to be returned.

Justification: I don't think it is contract responsibility to translate it's errors. When used within API, all the i18n normally happens on the client side, so API can be completely translation-free.

## Examples

    class MyContract < Dry::Validation::Contract
      json do
        required(:name).filled(:string)
        required(:age).filled(:integer)
      end

      rule(:age) do
        key.failure(:too_young, min: 32) if age < 32
      end
    end

    contract = MyContract.new
    errors = MyContract.new(age: 28).errors

    errors.to_h # => {
                       name: [{error: :missing}]
                       age: [{error: :too_young, min: 32}]
                     }

(The above is only example response, I have no strong preference/opinion on how that data should be represented)

## Resources

Discourse "discussion": https://discourse.dry-rb.org/t/dry-validation-and-error-translations/919
This feature will allow contracts to be composed of other contracts, optionally mounted at input paths.

## Example

```ruby
# this contract defines its own params and rules, but also uses the
# schema/rules of CustomerContract, and AddressContract on the input at :address
# via the #contract and #path methods
class OrderContract < ApplicationContract
  params do
    required(:accept_terms).value(:bool)
  end

  rule(:accept_terms).validate(:acceptance)

  contract CustomerContract

  path :address do
    contract AddressContract
  end
end
```

## Implementation

- Initial on branch [composable-contracts](https://github.com/dry-rb/dry-validation/tree/composable-contracts)
  - [x] Create a **:composable** extension
  - [x] implement new #contract feature in the :composable extension
  - [x] Add #path block DSL
  - [ ] Rewrite ResultSet as extension to Result
  - [ ] Rewrite the [contract/call_spec](https://github.com/dry-rb/dry-validation/blob/master/spec/integration/contract/call_spec.rb) integration test using the desired new syntax 
  - [ ] Add an example
  - [ ] Document the changes in docsite

- Future work
  - Decide on exact semantics for merging result values/errors if its unclear
  - Ensure it works wrt: concurrency
  - Figure out if we should integrate with other extensions in the short term
  - Decide on a syntax so contracts can be applied to nested **arrays** of input
  - Decide on a syntax so contracts can be conditionally be applied depending on the input
  - If consensus that the API is good, remove the :composable extension and rewrite contract and result to include the new functionality by default

## Resources

- Discussion on the [dry-rb forum](https://discourse.dry-rb.org/t/thoughts-on-dry-validation-wrt-composing-validations/904/3)
- [Code spike gist](https://gist.github.com/ianwhite/a32fcd439020ea07ed1fe3243152274f)
- [Pasteable in irb example](https://gist.github.com/ianwhite/918c7ba3487e05b2272a42c154e6b6fb)
**Describe the bug**

After calling a `Dry::Validation::Contract` on `errors` the `locale` option return the correct translation instead when using `messages` this option seems ignored 

**To Reproduce**

Giving a simple contract like this one:
```
class MySchema < Dry::Validation::Contract
  config.messages.load_paths << 'my_file.yml'
  params do
    required(:title).filled
  end
end

result = MySchema.call({})
result.errors(locale: :de) -> returns the de version
result.messages(locale: :de) -> returns the de version but it doesn't and returns the en version
```
Here a portion of my error file:
```
en:
  dry_validation:
    errors:
      filled?: "must be filled"


de:
  dry_validation:
    errors:
      filled?: "muss abgefÃ¼llt sein"
```
Here a screenshot from my console:
![image](https://user-images.githubusercontent.com/5493507/65822901-3e018b00-e28f-11e9-83f5-f48fdd1308d1.png)

**Expected behavior**

`result.messages(locale: :de)` returns the correct translation

**Your environment**

- adding compatibility to dry-v > 1.x in [reform](https://github.com/trailblazer/reform/pull/496)

In many REST APIs it's often the case when creating resources, certain fields are required but when updating resources, all fields are optional and only the fields which are provided are updated.

## Examples

For example, the following schema is good for validating user creation.

```ruby
  params do
    required(:name).filled(str?)
    required(:phone_number).filled(:str?)
    optional(:metadata).maybe(:hash?)
    required(:additional_details).filled(:hash?).schema do
      required(:name_km).filled(:str?)
      required(:date_of_birth).value(:date, :filled?)
    end
  end
```

But when updating a user, we need the following schema:

```ruby
  params do
    optional(:name).filled(str?)
    optional(:phone_number).filled(:str?)
    optional(:metadata).maybe(:hash?)
    optional(:additional_details).filled(:hash?).schema do
      optional(:name_km).filled(:str?)
      optional(:date_of_birth).value(:date, :filled?)
    end
  end
```

We don't want to repeat the schema and the rules

My first thought of a possible solution would be something like:

```ruby
  option :resource, optional: true

  params do
    conditionally_required(:name).filled(str?) { resource.present? }
    conditionally_required(:phone_number).filled(:str?) { resource.present? }
    conditionally_required(:metadata).maybe(:hash?) { resource.present? }
    conditionally_required(:additional_details).filled(:hash?) { resource.present? }.schema do
      conditionally_required(:name_km).filled(:str?)  { resource.present? }
      conditionally_required(:date_of_birth).value(:date, :filled?)  { resource.present? }
    end
  end
```

For a PATCH request, the resource could be injected as an external dependency, for a POST request the resource doesn't exist yet so it's not injected.

I'd like to be able to specify a macro in the following manner: `rule(foo: :bar).each` where both `foo` and `bar` are arrays.

## Examples

As an example please have a look at this spec that's currently failing: https://github.com/dry-rb/dry-validation/compare/master...DawidJanczak:macro-on-deeply-nested-rule

## Resources

Discussed with @solnic here: https://discourse.dry-rb.org/t/calling-a-macro-on-a-depply-nested-rule/842