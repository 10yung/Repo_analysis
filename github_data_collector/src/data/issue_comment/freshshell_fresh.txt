I currently have an if block in my freshrc which echos `Static ASDF not requested` if the criteria is met. 

When I run fresh install, this echoes once, when I run fresh update it echoes twice. 

Is this a bug? Echoing something twice doesn't have any side effects, but if it's running commands twice I could see it causing bugs. 
UPDATE: Actually, this seems to be happening with regular `fresh` invocations in the command line now, I'm not sure what is going on other than there seems to be something wrong with my setup.


~~When doing something like the following:~~
```
❯ find tmux -name '*.yml' -exec fresh {} --file=~/.config/tmuxinator/{} ';'
```

~~Either `find` or `fresh` seems to escape its input incorrectly because this happens:~~
```
Add `fresh tmux/config\.yml \-\-file\=\~/\.config/tmuxinator/tmux/config\.yml` to /home/user/.freshrc [Y/n]? ^C
```
~~Dashes, dots, equal signs, and tildes seem to get backslashes added to them. The resulting line won't execute properly as `fresh` needs `--file`, not `\-\-file'.~~

~~I did try quoting the special characters:~~
```
❯ find tmux -name '*.yml' -exec fresh '{} --file=~/.config/tmuxinator/{}' ';'
```
~~But this only seemed to make things worse:~~
```
Add `fresh tmux/config\.yml\ \-\-file\=\~/\.config/tmuxinator/tmux/config\.yml` to /home/user/.freshrc [Y/n]? ^C
```
The FRESH_BIN_PATH env var is much appreciated to allow bin dirs other than $HOME/bin, however, $HOME/bin is hard-coded in fresh_clean sub. Please consider this revision to use previously resolved $FRESH_BIN_PATH.
http://perlcritic.com
Hi, thanks for a great tool. 

I was originally going to raise an issue about customising the location of the .fresh and .freshrc files, but looking at the perl script it looks like I can set these as ENV FRESH_RCFILE and FRESH_PATH.

Can the readme be updated listing what options can be customised?
The install script output and generated example `.freshrc` file should reference `contrib/source-build.sh`. When `$SHELL` is bash we should output something like the following:

```sh
fresh freshshell/fresh bin/fresh --bin

fresh freshshell/fresh contrib/source-build.sh --file=~/.bash_profile
fresh freshshell/fresh contrib/source-build.sh --file=~/.bashrc
```

We should also output a different message if we did not generate a `.freshrc` file that omits mentioning initial setup and only outputs the message about opening a new shell for everything to take effect.
Currently this seems to work for linking a bunch of files into a directory:

`fresh mutt/\* --file=.mutt/`

It would be nice to be able to do the same with bin and avoid naming each individual script in freshrc. 
`fresh bin/\* --bin=bin/`
We currently call `git show $REF:$PATH` which does not match remote branches. It only works with commit refs and local branches names. When the branch has not been check

Do we need to failover to `git show origin/$REF:$PATH` if `git show $REF:$PATH` fails? Seems like the easiest option.

A missing ref currently outputs the following:

```
fatal: Not a valid object name $REF
Error: Could not find "$PATH" source file.
/home/user/.freshrc:1: fresh $REPO $PATH --ref=$REF
```

The first line is from the `git show` call. If we match `origin/$REF` after failing `$REF`, we should not output the `fatal: Not a valid object name` error from the first call. We should probably output both errors if both calls fail.
My `freshrc` contains the following:

```sh
fresh vim/colors --file=~/.vim/colors/
```

This builds `~/.fresh/build/vim-colors` and symlinks it to `~/.vim/colors`. As a result, any new files created in `~/.vim/colors` are silently lost when `fresh` is next ran. We should make these directories read only to prevent accidental loss.

Care should be taken to test the cleanup code for `~/.fresh/build.old`. Automated tests for this part is probably not required unless existing code fails.
My `.freshrc` looks like this:
```bash
fresh symlinked.file
```

I run `fresh` and check `~/.fresh/build/shell.sh` the file it is not included.

Is this intended functionality and, if so, why?