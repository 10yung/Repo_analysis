I'm using synaptic in a third-party product on the client side (basically a our code is being injected to our client's website).

We encountered an issue with a website that uses CSP (Content-Security-Policy) and does not allow 'unsafe-eval'. 
Eval includes all method of executing string through javascript code:
1. eval('var x = 1');
2. new Function('var x = 1');

It seems that the library is using 'new Function' in couple of places.
After further investigation I realized that this code can be refactored to not use 'new Function' but native code.

I can help fixing this issue, I just want to know if there is a "real" reason for using this method rather than an actual code.

Mish is a new novel activation function proposed in this [paper](https://arxiv.org/abs/1908.08681).
It has shown promising results so far and has been adopted in several packages including:

- [TensorFlow-Addons](https://github.com/tensorflow/addons/tree/master/tensorflow_addons/activations)
- [SpaCy (Tok2Vec Layer)](https://github.com/explosion/spaCy)
- [Thinc - SpaCy's official NLP based ML library](https://github.com/explosion/thinc/releases/tag/v7.3.0)
- [Echo AI](https://github.com/digantamisra98/Echo)
- [Eclipse's deeplearning4j](https://github.com/eclipse/deeplearning4j/issues/8417)
- [Hasktorch](https://github.com/hasktorch/hasktorch/blob/e5d4fb1b11663de3e032941f78b9d25c5da06f6d/hasktorch/src/Torch/Typed/Native.hs#L314)
- [CNTKX - Extension of Microsoft's CNTK](https://github.com/delzac/cntkx)
- [FastAI-Dev](https://github.com/fastai/fastai_dev/blob/0f613ba3205990c83de9dba0c8798a9eec5452ce/dev/local/layers.py#L441)
- [Darknet](https://github.com/AlexeyAB/darknet/commit/bf8ea4183dc265ac17f7c9d939dc815269f0a213)
- [Yolov3](https://github.com/ultralytics/yolov3/commit/444a9f7099d4ff1aef12783704e3df9a8c3aa4b3)
- [BeeDNN - Library in C++](https://github.com/edeforas/BeeDNN)
- [Gen-EfficientNet-PyTorch](https://github.com/rwightman/gen-efficientnet-pytorch)
- [dnet](https://github.com/umangjpatel/dnet/blob/master/nn/activations.py)

All benchmarks, analysis and links to official package implementations can be found in this [repository](https://github.com/digantamisra98/Mish) 

It would be nice to have Mish as an option within the activation function group.

This is the comparison of Mish with other conventional activation functions in a SEResNet-50 for CIFAR-10:  (Better accuracy and faster than GELU)
![se50_1](https://user-images.githubusercontent.com/34192716/69002745-0de37980-091b-11ea-87da-ac8d17c79e07.png)
Hello,

How to send an image as an input to make a prediciton ?

For example:
If I want to make a neural network to know if an image is red, how to send the image ?
In this case, it would be a buffer.

Thank you

Hey,

clicking on this want you to install an addon, which looks super fishy and plays sound
Do you have plan to import/export model from/to [ONNX](https://onnx.ai/) standard ?? 

Hi,

In Layer Connection, I don't undestant the line
if(this.type == Layer.connectionType.ALL_TO_ELSE && from == to) 

because from and to are Neuron objects in two differente layers. Maybe the code must be 
          if(this.type == Layer.connectionType.ALL_TO_ELSE && here == there)
??

The original code was:

    if (this.type == Layer.connectionType.ALL_TO_ALL ||
      this.type == Layer.connectionType.ALL_TO_ELSE) {
      for (var here in this.from.list) {
        for (var there in this.to.list) {
          var from = this.from.list[here];
          var to = this.to.list[there];
          if(this.type == Layer.connectionType.ALL_TO_ELSE && from == to)
            continue;
          var connection = from.project(to, weights);
          this.connections[connection.ID] = connection;
          this.size = this.list.push(connection);
        }
      }

Thanks,

Hi. I've been trying to save my network to a file so that i can use it without training it. The "toJSON" doesn't seem to create a file in the directory where my files are. 

I'm doing this in the browser not via node.js.

I'm running the HTML file directly from my pc into chrome. I'm not using a server of any kind.

EDIT: it is now also giving me the error: fromJSON is not a function

I was just about to test synaptic in a node.js app for the first time so I copied down some of the basic code from the intro guide.
Stock code:
function Perceptron(input, hidden, output)
{
	// create the layers
	var inputLayer = new Layer(input);
	var hiddenLayer = new Layer(hidden);
	var outputLayer = new Layer(output);

	// connect the layers
	inputLayer.project(hiddenLayer);
	hiddenLayer.project(outputLayer);

	// set the layers
	this.set({
		input: inputLayer,
		hidden: [hiddenLayer],
		output: outputLayer
	});
}
The app runs successfully, but when the app attempts to make a new perceptron it returns "this.set is not a function"


Currently synaptic use Math.random inside the code like 
https://github.com/cazala/synaptic/blob/master/src/Neuron.js#L60

This means when you create a neural network, it will behave differently when run in different computers / different times

It would be a good idea to (maybe  optionally) specify a seed that get used for all randomness execution.

Currently I can just monkey-patch Math.random for that but this is not ideal.



i try get the iteration and error with this code

```
let errors=[];
        trainer.train(trainingSet, {
            rate: getParametersAnn(tipo,parametros).lr,//0.003
            iterations: 20000,
            error:getParametersAnn(tipo,parametros).error,//0.005
            shuffle: true,
            log: 10,
            cost: synaptic.Trainer.cost.CROSS_ENTROPY,
            schedule: {
                every: 1000,
                do: function(data){
                    console.log('errors',data);
                    errors.push(data.error);
                }
            }
        });
```


 
but never enters, does not show the console
