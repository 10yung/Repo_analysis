I got two ideas on how to do this:

1. This could automatically be applied to `bool?`-type options making all three states reachable
2. This could be enabled by specifying a `no`-value. This would enable `./configure` like `--no-dep`/`--dep=xyz` stuff

I don't have an idea how to apply this to short-options (`--no-s` as negation of `-s` feels slightly off).

Currently you can define a second option to get a similar behavior. Main benefit would be less boilerplate and a shorter help-text.

I am willing to implement this myself if the idea sounds sound to you.
**Describe the bug**
System.InvalidOperationException: Could not automatically determine how to convert string values into System.Guid is thrown when registering Guid- command line options.

**To Reproduce**
Steps to reproduce the behavior:
1. Using this version of the library '2.5.0'
2. Run this code 
`
namespace ConsoleApp1
{
    using System;
    using System.Diagnostics;
    using McMaster.Extensions.CommandLineUtils;

    class Program
    {
        static void Main(string[] args)
        {
            var cmd = new CommandLineApplication();
            var guidOption = cmd
                .Option<Guid>("-g", "A GUID-option", CommandOptionType.SingleValue)
                .IsRequired();

            var expected = Guid.NewGuid().ToString();
            cmd.OnExecute(() =>
            {
                var actual = guidOption.ParsedValue;
                Debug.Assert(expected == actual.ToString());
            });
            cmd.Execute(new []{"-g", expected });
        }
    }
}

`
3. See error "Could not automatically determine how to convert string values into System.Guid"

**Expected behavior**
Specifying command options of the Guid type should work seamlessly.

**Additional context**
I would suggest introducing a generic value parser that would cover most of the CLR standard library types:
`
using System;
    using System.ComponentModel;
    using System.Globalization;
    using McMaster.Extensions.CommandLineUtils.Abstractions;

    public class GenericValueParser : IValueParser {
        private GenericValueParser(Type targetType, TypeConverter converter)
        {
            TargetType = targetType;
            Converter = converter;
        }

        public static GenericValueParser Get<T>()
        {
            var targetType = typeof(T); 
            var converter = TypeDescriptor.GetConverter(targetType);
            return converter.CanConvertFrom(typeof(string)) ? new GenericValueParser(targetType, converter) : null;
        }

        public Type TargetType { get; }
        public TypeConverter Converter { get; }

        public object Parse(string argName, string value, CultureInfo culture)
        {
            return Converter.ConvertFromString(null, culture, value);
        }

    }
`

The originally failing code would be fixed with e.g.
`
namespace ConsoleApp1
{
    using System;
    using System.Diagnostics;
    using McMaster.Extensions.CommandLineUtils;

    class Program
    {
        static void Main(string[] args)
        {
            var cmd = new CommandLineApplication();
            cmd.ValueParsers.Add(GenericValueParser.Get<Guid>());
            var guidOption = cmd
                .Option<Guid>("-g", "A GUID-option", CommandOptionType.SingleValue)
                .IsRequired();

            var expected = Guid.NewGuid().ToString();
            cmd.OnExecute(() =>
            {
                var actual = guidOption.ParsedValue;
                Debug.Assert(expected == actual.ToString());
            });
            cmd.Execute(new []{"-g", expected });
        }
    }
}

`
**Is your feature request related to a problem? Please describe.**
I want to change dotnet-serve's `--tls|-S` flag to be `--https|--tls|-S`, and then just deprecate --tls or hide it from help text. I can't do this because `CommandOption` only supports having one long and one short option name.

**Describe the solution you'd like**
Support more than one long and short name. This is helpful for tools that evolve their usage over time.

**Additional context**
https://github.com/natemcmaster/dotnet-serve/blob/master/src/dotnet-serve/CommandLineOptions.cs#L80-L93
## 2019 Review
2019 was a good year for this library! In the last 12 months, this project...

* Passed **one million downloads** on [NuGet.org](https://www.nuget.org/packages/McMaster.Extensions.CommandLineUtils/)!  🎉 
* Received [41 pull requests](https://github.com/natemcmaster/CommandLineUtils/pulls?utf8=%E2%9C%93&q=is%3Apr+created%3A2019-01-01..2019-12-31+-author%3Anatemcmaster+-author%3Aapp%2Fdependabot-preview+) from external contributors. 👍 
* And released versions 2.3, 2.4, and 2.5 with new features like a proper async implementation, C# 8 support, posix option clustering, and more, plus bug fixes. ✨ 

In the [2019 roadmap](https://github.com/natemcmaster/CommandLineUtils/issues/206), I was feeling burned out and wrote then...

> I won't have as much free time to building new features, so I'm not planning to do a bunch of work. That doesn't mean this library is dead, but it means I'm hoping improvements will be driven by your efforts.

I've been happy to see many community members jumping in to help! **Thank you for your contributions!**

## 2020 Roadmap

In 2020, I plan to continue this project. This project is open for contributions. Consider the issue list the authoritative source of release planning and feature design. 

### 3.0 Release

As of writing, I have one project milestone open -- **Release 3.0** (https://github.com/natemcmaster/CommandLineUtils/milestone/17). As always, feel free to open issues if there is something you'd like addressed. Use https://github.com/natemcmaster/CommandLineUtils/issues/326 to discuss this release further.

### Increasing transparency

To encourage more contribution, I'll be adopting a few practices that should make my plans and work more transparent. I'm hoping increasing the visibility of my work for [this project's watchers](https://github.com/natemcmaster/CommandLineUtils/watchers) will give others more opportunity to chime in. Those primary changes I have in mind are:

* I will use pull requests for all of my own work.
* I will open issues for release planning and scheduling, as well as for feature ideas I'm thinking of doing.

Comments? Concerns? Feel free to discuss.

Happy New Year!
Nate

Release 3.0 planning is now open for discussion.

I think it's time for a new major version. It should be 3.0 because I think there are some breaking changes worth making. Those are:

* remove obsolete API #251 
* rename the 'throwOnUnexpectedArgs' parameter https://github.com/natemcmaster/CommandLineUtils/issues/88
* better support for netcoreapp3.0 in M.Ext.CommandLine.Hosting. https://github.com/natemcmaster/CommandLineUtils/issues/294
* fix ValidationContext for attribute binding https://github.com/natemcmaster/CommandLineUtils/issues/232

Any other breaking changes worth doing now?

I'm also open to doing some new features as well - such as #298  - but I haven't found anything super high priority yet.  Please chime in if there is something you'd like to see addressed.

Is there a recommended way of loading things like sub-commands lazily?
My thinking is that if I'm frequently invoking a CLI tool with many commands, each with many subcommands, it would be preferable to only "load" the sub-commands of the parent command? 

I suppose it could be done with some custom parsing or otherwise not linking the commands and sub-commands together with `app.Command<T>(...)`, but I think that kind-of defeats the purpose of the command/sub-command structure. 

Is there another way that I'm not seeing?

I've spent a bit of time with this library, and so far I really like the builder syntax and the lack of excessive "magic"! Makes it easier to approach. Thank you!

I am interested in having more contributors help me work on this project. There is room for improvement on this library, and I'm not planning to do it myself anytime soon. I don't have much time to work on open source anymore. I recently became a new father and also a new job which requires 2 hours of commuting. As you can imagine, I don't have much free time. If you are interested in helping, please let me know.

Cheers,
Nate
I'm using generic HostBuilder with .NET Core 3.0.

I wish to use Guid/nullable-Guids as Options however but I cannot figure out how to use a custom IValueParser with HostBuilder. I can't see many/any non-standard examples using HostBuilder, maybe someone has done this before?

```
using McMaster.Extensions.CommandLineUtils;
using McMaster.Extensions.CommandLineUtils.Abstractions;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Globalization;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
namespace SubcommandSample
{
    [Command(Name = "cmdlinetest")]
    [VersionOptionFromMember("--version", MemberName = nameof(GetVersion))]
    class Program
    {
        static Task<int> Main(string[] args)
            => new HostBuilder()
            .ConfigureLogging((context, builder) =>
            {
                builder.AddConsole();
            })
            .ConfigureServices((context, services) =>
            {
                services.AddSingleton<MyService>();
            })
            .RunCommandLineApplicationAsync<Program>(args);

        readonly MyService _mySvc;

        public Program(MyService mySvc)
        {
            _mySvc = mySvc;
        }

        [Option(CommandOptionType.SingleOrNoValue)]
        public Guid? id { get; }

        async Task<int> OnExecuteAsync(CommandLineApplication app, CancellationToken cancellationToken = default)
        {
            await Task.Delay(0);
            //question where to put the ValueParsers below so I can parse guids/etc when using HostBuilder??
            //app.Conventions.UseDefaultConventions();
            //app.ValueParsers.AddOrReplace(new MyGuidParser());

            if (id != null)
                Console.WriteLine($"--id is set to {id}");

            Console.WriteLine("hit any key to exit");
            Console.ReadKey();

            return 0;
        }

        static string GetVersion()
            => typeof(Program).Assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>().InformationalVersion;
    }

    class MyGuidParser : IValueParser
    {
        public MyGuidParser() { }

        public Type TargetType { get; } = typeof(Guid?);

        public object Parse(string argName, string value, CultureInfo culture)
        {
            if (string.IsNullOrWhiteSpace(value))
                return null;
            if (!Guid.TryParse(value, out var result))
                throw new FormatException($"Invalid value specified for {argName}. '{value}' is not a valid Guid");
            return result;
        }
    }

    class MyService
    {
        public MyService() { }
    }
}
```
Fixes #302 
It would be useful if CommandLineApplication implemented an ICommandLineApplication interface, so it could be easily mocked, to facilitate unit testing applications that consume this API.

At the moment, you cannot mock CommandLineApplication, and it makes code that consumes it untestable.

Implementing an interface that covers the entire CommandLineApplication class is quite straightforward, and wouldn't cause any breaking changes as far as I know.

I'd be happy to submit a change in a pull request if this sounds reasonable to you.

Please let me know your thoughts on this.  I'm aware that you're considering refactoring the API in the future, but it would be helpful to have this new functionality before then.