Is there a way to have an ActiveNode inherit from a base class that is not Node?

Additional information which could be helpful if relevant to your issue:

### Code example (inline, gist, or repo)

Example:

_app/models/base.rb_

```ruby
class Base
  include OpenApi::DSL
end
```

_app/models/resource.rb_
```ruby
class Resource < Base
  include Neo4j::ActiveNode
  include Neo4j::Timestamps
end
```

When I try this I get an error:

```ruby
`rescue in build_association': undefined method `associations' for Base:Class (Class#parent) (NoMethodError)
```


### Runtime information:

Neo4j database version:  3.5.14 Community Edition
`neo4j` gem version: 9.6.1
`neo4j-core` gem version: 9.0.0 


Fixes #

This pull introduces/changes:
 *  Introduces new datatypes supported by `neo4j-ruby-driver`. New data types are `Neo4j::Driver::Types::Bytes, ActiveSupport::Duration, Neo4j::Driver::Types::Point, Neo4j::Driver::Types::OffsetTime, Neo4j::Driver::Types::LocalTime, ActiveSupport::TimeWithZone, Neo4j::Driver::Types::LocalDateTime`
 * Datatypes such as `String, Date, Time, Float, Hash` are now not converted before storing as they are supported by `neo4j-ruby-driver`.




According to the docs:
> You can define a global or per-model generation methods if you do not want to use the default.

I'd like to know how to do this. 

I am not interested in changing the property name, rather, I'd like to provide a function that generates a shorter id such as https://github.com/peterhellberg/hashids.rb.


Additional information which could be helpful if relevant to your issue:

### Code example (inline, gist, or repo)



### Runtime information:

Neo4j database version: (3.5.14)
`neo4j` gem version:  (9.6.1)
`neo4j-core` gem version: (9.0.0)
Hey guys!

Since I'm not going to be doing any more work for the project, I think it's about time that I handed in my keys to the organization and transferred the neo4jrb.io domain. It was just renewed for another year, which can be my last contribution. I'm not sure who's in charge these days but if we can figure out the most appropriate person to take control of the domain, I'd be happy to transfer ownership. Please let me know.

Chris
This ensures that when given `bolt+routing`, the session manager knows what to do about it. The main bulk of the bolt+routing work is in [this PR](https://github.com/neo4jrb/neo4j-core/pull/335).






Additional information which could be helpful if relevant to your issue:

### Code example (inline, gist, or repo)

Following spec in `spec/e2e/association_proxy_spec.rb` fails,
```
it 'does not fetches duplicate nodes with deep with_associations' do
      Student.create(name: 'Leszek').lessons << science
      Student.create(name: 'Lukasz').lessons << science
      log_queries!

      Student.all.with_associations({lessons: :exams_given}).each do |student|
          student.lessons.each do |lesson|
            expect(lesson.exams_given).to contain_exactly(science_exam, science_exam2) if lesson == science
          end
      end
    end
```

### Runtime information:

Neo4j database version:
`neo4j` gem version: 9.6.0
`neo4j-core` gem version: NA 



When we initialize two nodes with mentioning relationship on both side, It creates two identical relationship between these two nodes. Should it only create one relationship instead?

### Code example (inline, gist, or repo)

```
require 'neo4j'
require 'neo4j/core/cypher_session/adaptors/http'

puts "neo4j-core version: #{Neo4j::Core::VERSION}"
puts "neo4j version: #{Neo4j::VERSION}"
puts "Ruby version: #{RUBY_VERSION}"

neo4j_adaptor = Neo4j::Core::CypherSession::Adaptors::HTTP.new('http://neo4j:mypass@localhost:7474')
Neo4j::ActiveBase.on_establish_session { Neo4j::Core::CypherSession.new(neo4j_adaptor) }
Neo4j::ActiveBase.current_session = Neo4j::Core::CypherSession.new(neo4j_adaptor)

class Teacher
  include Neo4j::ActiveNode

  property :name, type: String
  has_many :in, :students, origin: :teacher
end

class Student
  include Neo4j::ActiveNode

  property :name, type: String
  has_one :out, :teacher, type: :teacher
end

teacher = Teacher.new(name: 'Dronacharya')
student = Student.new(name: 'Arjun', teacher: teacher)
teacher.students = [student]
teacher.save
teacher_reloaded_obj = Teacher.find teacher.id
puts "stundends associated with teacher: #{teacher_reloaded_obj.students.pluck(:uuid)}"
```


### Runtime information
Output:

> neo4j-core version: 9.0.0
> neo4j version: 9.6.0
> Ruby version: 2.5.3
> stundends associated with teacher: ["7aee154e-39ec-461c-93ee-96d7bc25f0fb", "7aee154e-39ec-461c-93ee-96d7bc25f0fb"]

<img width="808" alt="Screenshot 2019-10-13 at 10 18 34 AM" src="https://user-images.githubusercontent.com/9930523/66716529-4956c980-edec-11e9-836f-7efd55c85228.png">




Since the cypher language is now an open standard we might consider supporting any database that will accept a cypher statement.




Additional information which could be helpful if relevant to your issue:

### Code example (inline, gist, or repo)



### Runtime information:

Neo4j database version:
`neo4j` gem version: 
`neo4j-core` gem version: 

