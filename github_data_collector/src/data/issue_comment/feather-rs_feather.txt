With the Legion rewrite, lots of features are now missing. These will have to be converted to the new system API:

- [x] Chunk sending
- [ ] Lighting
- [x] Player movement
- [x] Entity sending
- [ ] Animal entities
- [x] Inventory handling
- [x] Entity equipment
- [x] Block placement and digging
- [ ] Arrow shooting
- [ ] World persistence (server-side logic, not the core code)
- [x] Player animations
- [ ] Item entities
- [ ] Falling blocks
- [ ] Probably more
After the repository was moved to the feather-rs organization, Azure Pipelines has stopped running.
After much thought, I came to a realization that our current architecture is insufficient for future advancements.

There are a few key problems with the current design:
* Event handling is inadequate: we cannot make any guarantees about what happens between when an event is triggered and when it is handled. As a result, it becomes difficult to implement certain features. For example, once we handle item uses, the likely path we would take is to add an `ItemUseEvent` which stores the item type, then create a system to handle the event for each item type. The problem here is that between when the event is triggered and when the handling system runs, the item which was used could be removed or replaced with another item. If the handling system fails to acknowledge this, then it could end up mutating the new item in an undesirable way, such as by removing it.
* There is no way to dynamically schedule systems for running. In the case of commands, for example, creating a system handling `CommandEvent`s for every single command is impractical. Ideally, command handlers with arbitrary resource access could be stored in a map, and the system which handles commands could schedule these handlers to be run in this tick.
* There are many signs that the development of Specs is diminishing. [The primary maintainer recently quit the project, handing it off to the Amethyst organization.](https://users.rust-lang.org/t/specs-parallel-ecs-moved-to-amethyst-organization/33815). However, the Amethyst project is planning to transition from Specs to [Legion](https://github.com/TomGillen/legion), so we cannot expect them to develop Specs in the future.

I propose two key changes to solve this problem:
* Eliminate Specs and transition to Legion as Amethyst is doing. In addition to its more active development push, Legion has superior iteration performance to Specs due to its archetype-based design. Their model also improves cache locality of components. See [this discussion](https://community.amethyst.rs/t/legion-ecs-discussion/965/35) for more information on the benefits of Legion.
* Rather than Legion's system scheduler, which is similar to Specs's, we will use [`tonks`](https://github.com/feather-rs/tonks), a project which I have been working on for the last while. This is an alternative system scheduler which acts as a solution to the first two problems mentioned above. It will support reactive event handling and dynamic scheduling of "oneshot" systems to meet our needs.

Do note that these changes will require a rewrite of all systems in the codebase. The majority of the codebase, however, is infrastructure such as worldgen, networking, and the chunk implementation, so this is not a complete rewrite of Feather.

If anyone was wondering why Feather development has slowed recently, this is why. Once `tonks` is complete, I plan to begin the transition.
Implement block entities, and implement a basic block for testing (e.g. furnace).

Some things to note:
* Block entities will have to be correctly added to `ChunkEntities` so that entity sending and destroying will work correctly.
* A new resource will have to be implemented which maps block positions to block entities at those positions.
* Open question: should block entities have a separate `BlockPositionComponent` or use `PositionComponent` as well?

For sending block entities to clients, the current infrastructure should be sufficient—if the above are implemented, they should be sent as packets without any changes to the entity sending system. (The protocol does allow for sending block entities inside the chunk data packet, but it's not required: we can just send [Update Block Entity](https://wiki.vg/index.php?title=Protocol&diff=14889&oldid=14881#Update_Block_Entity instead.)

Many block entities appear to not be sent to clients, including chests and furnaces.
I noticed that the project depends on the following crypto crates
* `rsa`
* `cfb8`
* `aes`

These crates are not audited and should not be considered secure. Something else should be used instead (e.g. libsodium)


Currently, commands entered by a player will appear in chat as if they were a normal chat message. Correctly handle chat messages prefixed with a "/" and reroute to command handler.

How this will be structured is yet to be seen—a system per command seems somewhat messy.
Implement moving of water and lava. Waterlogged blocks should also be handled.

This also includes creation of cobblestone/stone/obsidian when lava and water interact.
Currently, arrows are shot with a constant velocity. The velocity should scale based on the bow's "pull-back" amount.
![image](https://user-images.githubusercontent.com/24442053/66267999-dbaf1880-e894-11e9-8ba1-ccd9eeca6d9b.png)

On the left is what a bucket of water places. On the right is what a bucket of lava places. Strangely, the right liquid is opaque, gives off light, and still makes lava sounds. I am not using any resource packs.

(Also, liquid physics don't seem to work correctly as reported in this release?)
Many feature additions have left the codebase somehat cluttered and inconsistent at times. Things I would like to change/fix:
* Clarify what code goes in which file, and move systems to be positioned more logically.
* Remove `util::Spawner` in favor of using `LazyUpdate`. This will make entity spawning a lot more obvious in terms of its intent.
* Trigger block update events in `ChunkMap` automatically so they don't have to be remembered to be triggered manually.

This list is probably incomplete.