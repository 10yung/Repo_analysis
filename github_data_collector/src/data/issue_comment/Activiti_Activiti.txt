activiti.version  5.22.0
procDef  xml conver to model , event type node   execution listener missing
I am interested in creating a model using java code, and I'm wondering where I could look in the codebase to find the code that constructs the model. The code that is most useful/necessary is the actual model types (ServiceTask, EventHandler, Gateway, positions, etc, etc) and the code to generate the bpmn xml from this.

I was looking closely at: https://github.com/Activiti/activiti-cloud-modeling-service/blob/develop/activiti-cloud-services-modeling/activiti-cloud-services-modeling-rest/src/main/java/org/activiti/cloud/services/modeling/rest/controller/ModelController.java#L114

And I tried digging through different packages (activiti-cloud-modeling, activiti-cloud-modeling-service, activiti-modeling-app), but cannot seem to find the logic/definitions. Unfortunately, a lot of the naming schemes are unclear to me, and refer to general concepts which I assume have specific meaning in the context of the project (version, core, service, rest, api, api-impl).

So, it would be super helpful if there was a pointer to where this code lives or some documentation on how things are structured/organized!! Where should I look?
Hello,

I am trying to upgrade activiti 6 to activiti 7 (because I am upgrading my spring boot app to 2.1.5 version). It seems that the FormService class got removed in activiti 7. are there any workarounds for this problem ?

Thank you in advance.
When I want to get the result through this method：List<Deployment> list = repositoryService.createDeploymentQuery().list()，And then we're ready to turn it into a json string，but the method have a java.lang.NullPointerException error
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 // lazy loading ///////////////////////////////////////////////////////////////
  
  public Map<String, ResourceEntity> getResources() {
    if (resources == null && id != null) {
      List<ResourceEntity> resourcesList = Context.getCommandContext().getResourceEntityManager().findResourcesByDeploymentId(id);
      resources = new HashMap<String, ResourceEntity>();
      for (ResourceEntity resource : resourcesList) {
        resources.put(resource.getName(), resource);
      }
    }
    return resources;
  }
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

I wonder if there is a good way to resolve this lazy load error。thanks!!!

VerifyDeserializedObjectCommandContextCloseListener processes serialized data within ProcessVariableInstance

So...

Why that logic processes in CommandContextCloseListener.closing() over CommandContext.closeListeners instead of DbSqlSession.determineUpdatedObjects()???

DbSqlSession.determineUpdatedObjects() looks native place to validate dirty entities...
Now i have exception in case i touch some variables in CommandContextCloseListener

java.util.ConcurrentModificationException: null
	at java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)
	at java.util.ArrayList$Itr.next(ArrayList.java:859)
	at org.activiti.engine.impl.interceptor.CommandContext.executeCloseListenersClosed(CommandContext.java:174)


see:
* https://spring.io/blog/2020/01/16/spring-boot-2-1-12-released
* https://spring.io/blog/2019/11/19/spring-cloud-greenwich-sr4-released
when start a procinstance set two variable, in this procinstance the two variable of the record ,EXECUTION_ID_, TASK_ID_,PROC_INST_ID_ are the same, but only the REV_ value is different,
case the flow go to wrong. who can help me. 

version:5.22
Mapped as `loopDataOutputRef` and `outputDataItem` as defined in the BPMN specification
Ref https://github.com/Activiti/Activiti/issues/3041
There exists two attributes which can be used in combination with the <bpmn:multiInstanceLoopCharacteristics/> element:

`outputDataItem`: declares a variable that exists in the scope of the multi-instance activity, whereby the value of it should be collected.
`loopDataOutputRef`: declares a collection which will be available in the process instance as a variable. This collection collects the values of the result variables.

An example could look like this:
```
<multiInstanceLoopCharacteristics isSequential="false">
        <loopCardinality>2</loopCardinality>
        <loopDataOutputRef>meals</loopDataOutputRef>
        <outputDataItem name="meal"/>
      </multiInstanceLoopCharacteristics>
```
Semantic:
Whenever an instance of the specific activity completes, then the value of the variable `meal` declared by the attribute `outputDataItem` will be added to the declared collection `meals` by the attribute `loopDataOutputRef`.
when the table `ACT_HI_VARINST` hundreds of thousands of rows, the `selectHistoricProcessInstancesWithVariablesByQueryCriteriaSql` sql execute very slow;
`selectHistoricProcessInstancesWithVariablesByQueryCriteriaSql`
```
SELECT DISTINCT 
  RES.*,
  DEF.KEY_ AS PROC_DEF_KEY_,
  DEF.NAME_ AS PROC_DEF_NAME_,
  DEF.VERSION_ AS PROC_DEF_VERSION_,
  DEF.DEPLOYMENT_ID_ AS DEPLOYMENT_ID_,
  VAR.ID_ AS VAR_ID_,
  VAR.NAME_ AS VAR_NAME_,
  VAR.VAR_TYPE_ AS VAR_TYPE_,
  VAR.REV_ AS VAR_REV_,
  VAR.PROC_INST_ID_ AS VAR_PROC_INST_ID_,
  VAR.EXECUTION_ID_ AS VAR_EXECUTION_ID_,
  VAR.TASK_ID_ AS VAR_TASK_ID_,
  VAR.BYTEARRAY_ID_ AS VAR_BYTEARRAY_ID_,
  VAR.DOUBLE_ AS VAR_DOUBLE_,
  VAR.TEXT_ AS VAR_TEXT_,
  VAR.TEXT2_ AS VAR_TEXT2_,
  VAR.LAST_UPDATED_TIME_ AS VAR_LAST_UPDATED_TIME_,
  VAR.LONG_ AS VAR_LONG_ 
FROM
  ACT_HI_PROCINST RES 
  LEFT OUTER JOIN ACT_RE_PROCDEF DEF 
    ON RES.PROC_DEF_ID_ = DEF.ID_ 
  LEFT OUTER JOIN ACT_HI_VARINST VAR 
    ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_ 
    AND VAR.TASK_ID_ IS NULL 
WHERE RES.PROC_INST_ID_ = '5031151'
ORDER BY VAR.LAST_UPDATED_TIME_ ASC 
LIMIT 20000 OFFSET 0;
```
then I optimize the sql,replace `LEFT OUTER JOIN` with `INNER JOIN`,execution is 10000 times faster.
![1](https://user-images.githubusercontent.com/7352697/71057120-8cd80600-2196-11ea-8c69-4f7c9a71f2c2.png)
![2](https://user-images.githubusercontent.com/7352697/71057138-a4af8a00-2196-11ea-8b70-a115c14bcb14.png)
Show your source code [HistoricProcessInstance.xml](https://github.com/Activiti/Activiti/blob/develop/activiti-core/activiti-engine/src/main/resources/org/activiti/db/mapping/entity/HistoricProcessInstance.xml)
```
<sql id="selectHistoricProcessInstancesWithVariablesByQueryCriteriaSql">  
    from ${prefix}ACT_HI_PROCINST RES
    left outer join ${prefix}ACT_RE_PROCDEF DEF on RES.PROC_DEF_ID_ = DEF.ID_
    <if test="includeProcessVariables">
      left outer join ${prefix}ACT_HI_VARINST VAR ON RES.PROC_INST_ID_ = VAR.EXECUTION_ID_ and VAR.TASK_ID_ is null
    </if>
    <include refid="commonSelectHistoricProcessInstancesByQueryCriteriaSql"/>
  </sql>
```
![3](https://user-images.githubusercontent.com/7352697/71057160-b6912d00-2196-11ea-9eef-4099e3db6c14.png)

Why `LEFT OUTER JOIN` is not replaced by `INNER JOIN`?

