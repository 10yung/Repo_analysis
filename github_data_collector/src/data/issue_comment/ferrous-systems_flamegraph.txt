Is there a set of things that need to be implemented before the next release? Just asking cause I'm installing via git so I can get features not yet published to cargo i.e. `--bench`

So far I'm really enjoying flamegraph! It's a better solution than what I'd cobbled together on my own. However, I have a bit of a problem:

```
mymachine:busy_work me$ sudo cargo flamegraph
   Compiling busy_work v0.1.0 (/Users/me/Documents/Code/rust/Research and Development/busy_work)
    Finished release [optimized] target(s) in 0.78s

WARNING: building without debuginfo. Enable symbol information by adding the following lines to Cargo.toml:

[profile.release]
debug = true

dtrace: system integrity protection is on, some features will not be available

dtrace: failed to execute /Users/me/Documents/Code/rust/Research: No such file or directory
failed to sample program
```

The project path is `/Users/me/Documents/Code/rust/Research and Development/busy_work` and so it looks like arguments are being supplied wrong here. For good measure I installed the latest according to #61 and I'm still seeing the issue.
It seems the command `perf` (also, `dtrace`) is hard-coded and should be contained in `PATH`.
If `perf` is installed anywhere else, we need to modify `PATH` before running it, which is not a good way and may break other programs.

Related: https://github.com/NixOS/nixpkgs/pull/76313

I'm receiving this error error within an ubuntu container running on a VM (Virtualbox) atop MacOS Mojave (via multiple runs on 0.1.13 and the current git/master version):

```shell
cargo flamegraph --bin=skeleton -- --file=skeleton.toml
```

Then everything runs as expected, but then:

```shell
...
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 0.119 MB perf.data (8 samples) ]
writing flamegraph to "flamegraph.svg"
thread 'main' panicked at 'unable to generate a flamegraph from the collapsed stack data: Io(Custom { kind: InvalidData, error: "No stack counts found" })', src/libcore/result.rs:1165:5
```

Seemingly related to https://github.com/ferrous-systems/flamegraph/issues/16, but this is now within a container on a VM instead. 

Thanks. 
Hey ðŸ‘‹,

I wanted to use `flamegraph` for some tests which seems to have been added in #27 however I think the most recent release was cut before this PR was merged.

Could you release a new verison please?
```bash
perf --version     
perf version 5.3.10
```
```bash
rustc --version      
rustc 1.39.0 (4560ea788 2019-11-04)
```

```bash
[ perf record: Woken up 1 times to write data ]
[ perf record: Captured and wrote 0,066 MB perf.data (5 samples) ]
perf: Segmentation fault
Obtained 12 stack frames.
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x274b87) [0x55d4c0f50b87]
/lib/x86_64-linux-gnu/libc.so.6(+0x4646f) [0x7fb64426b46f]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x2fafbc) [0x55d4c0fd6fbc]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x27d98f) [0x55d4c0f5998f]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x286b43) [0x55d4c0f62b43]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x276fb0) [0x55d4c0f52fb0]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x2821df) [0x55d4c0f5e1df]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x1b5268) [0x55d4c0e91268]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x222fb2) [0x55d4c0efefb2]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x19e313) [0x55d4c0e7a313]
/lib/x86_64-linux-gnu/libc.so.6(__libc_start_main+0xf2) [0x7fb64424c1e2]
/usr/lib/linux-tools/5.3.0-24-generic/perf(+0x19e56d) [0x55d4c0e7a56d]
failed to sample program
```
Hello

Sometimes it happens that I've already gathered the perf.data, or that I want to pass additional options to perf (like tuning the events if I want to see eg. flamegraph of branch misses, not total runtime). In such cases I think it would be nice if `cargo flamegraph` or `flamegraph` could process the already existing data instead of insisting on running the binary again and profiling it once more.

Would it be possible to add some kind of `--existing perf.data` (or whatever the file is for other profilers/systems)?

I know there's inferno and that I can build the graph myself, but using it seems to be a multi-step process. I kind of like the easy-to-use nature of flamegraph.

Thank you
My program work with envionment variables, but it's seems like it cann't find them when I run flamegraph.

so how can i pass all the envionment variables to my program? And I'm working with MacOS.
This option is viable on Haswell or later Intel platforms. It is much
lower overhead while profiling, generates more compact perf data, and is
much quicker to collapse and generate flame graphs.

The downsides is that it has limited stack depth, does not work on major
cloud providers and some others listed at
https://lwn.net/Articles/617097/ and
http://www.brendangregg.com/perf.html

Would you be interested in a change like this?  I'm also happy to make it configurable by env var of flag if you provide some guidance.