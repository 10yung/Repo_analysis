The following code fails, but it shouldn't.

When the arena is built by calling Arena::new and insert, everything is ok.

``` rust
use std::iter::FromIterator;
use generational_arena::Arena;
use serde::{Serialize, Deserialize};

#[derive(Serialize, Deserialize)]
pub struct Struct {
    arena: Arena<usize>
}

pub fn main() {
    let mut vec = vec![0];
    let arena = Arena::from_iter(vec.drain(..));
    let struc = Struct { arena };
    let ser = serde_yaml::to_string(&struc).unwrap();
    let struc: Struct = serde_yaml::from_str(&ser).unwrap();
}
```
- link was dead
- imo, makes more sense to point to the actual presentation at https://www.youtube.com/watch?v=P9u8x13W7UE rather than http://2018.rustconf.com/program.html#closingkeynote which would be the updated link equivalent to the previous.
I'm interested in using this crate in a microcontroller context (it's for a DSP engine, which I've found fits the whole ECS pattern *extremely* well).

It seems the extant `no_std` support needs `alloc` for the purposes of allocating a `Vec`. Would it be possible to use a [heapless::Vec] instead?

[heapless::Vec]: https://docs.rs/heapless/latest/heapless/struct.Vec.html
Hi!
It would be nice to have methods like shrink_to and shrink_to_fit implemented.
As I understand, it is not difficult at all to implement such methods since the under lying data structure is a Vec.

Best regards,
Tage
From the [docs](https://doc.rust-lang.org/nightly/std/num/struct.NonZeroU64.html): [A `NonZeroU64` is] an integer that is known not to equal zero. This enables some memory layout optimization. For example, `Option<NonZeroU64>` is the same size as `u64`.

I replaced `generation: u64` with `NonZeroU64` (initializing it to 1 rather than 0). [This example](https://play.rust-lang.org/?version=stable&mode=debug&edition=2018&gist=764d7db69f547b3bef75164bfb978660) shows that `Index` takes 16 bytes of memory, and `Option<Index>` currently takes 24 bytes, but with this optimization it would take 16 bytes like a plain `Index`.

I run the benchmarks and the results are _almost_ the same. There may be a small regression (but it could also just be a random fluctation) caused by the fact that incrementing a `NonZeroU64` by 1 requires converting it to a `u64` and back. If `NonZeroU64` gets better support in the standard library, that may be optimized further.

Still, memory optimization is significative. I myself may need to store a large amount of `Option<Index>` and I belive it's a rather common use-case, so I think it would be worth it.
Is there any reason to use the `generational-arena` over the `slotmap` crate?

AFAICT the latter existed first and is a superset, featuring a compact hop-representation for faster iteration in the presence of large holes in the collection and secondary maps to implement ECS-style associated data.

The only benefit I see is that `generational-arena` uses zero unsafe code. However, slotmap's usage of unsafe code is justified to use a more compact representation. The LSB of the slotmap generation is the tag indicating the state of the slot, instead of a full 1-byte (or 8-bytes if it gets padded) for the enum discriminate.

crate | size | max reuse per slot
--- | --- | ---
slotmap | `4 + max(size_of::<T>(), 4)` | `2^31`
generational arena | `(1 or 8) + 8 + size_of::<T>()` | `2^64`

I'm pretty sure it is safe to say that a 64-bit generation tag is overkill? But if someone needs more than 31-bits, it would be trivial to tweak `slotmap` to use a type parameter such that its consumers can opt for 63-bits instead. However, this might not be necessary as the slotmap author wants to avoid [hot slots](https://github.com/orlp/slotmap/issues/11)
Hi! Thanks a lot for putting this crate up, this is quite a clever idea (thanks @kyren !).
I have a question: would you be interested in adding variants where Index would be smaller in size?

I'm thinking of games where you might have an upper bound in the number of objects that would ever be in your Arena or how many generation you would get. In those case, it's preferable to have `Index` with a smaller size. For instance:

```rust
struct Index32 {
    index: u32,
    generation: u32
}
```

I guess depending on the use case, `index`or`generation` could be made even smaller. We would also need some additional checks to detect whether the maximum generation or sized was reached.

What do you think?