`pipx` creates virtualenvs by calling out to the terminal using: `run([DEFAULT_PYTHON, "-m", "venv", "--clear", self.root])`. where `DEFAULT_PYTHON` is `sys.executable`.

Is it possible to call out to or expose the embedded python within `PyOxidizer`?

My top level CLI is `pipx` but I imagine maybe I can expose the underlying python as `pipx python`? In which case I can just change my `DEFAULT_PYTHON` and things can work as is?

I know that it's also possible to create virtualenvs with `import venv; venv.create('.venv')` but that would be a lot of code to rewrite.

On Windows by default a console window is opened, how could I hide that window? It seems the recommended way is to run pythonw rather than python. Is there a way to tell pyoxidizer to hide the window?
Still trying to package [Borg Backup](https://github.com/borgbackup/borg/) (currently uses PyInstaller) and seemingly hit a roadblock. Maybe someone spots an issue. Changed config (rest as in the template):

```
[[packaging_rule]]
type = "pip-install-simple"
package = "borgbackup"

[[embedded_python_run]]
mode = "module"
module = "borg.__main__"
```

Error when running binary:

```
Traceback (most recent call last):
  File "borg.archiver", line 41, in <module>
    from .archive import Archive, ArchiveChecker, ArchiveRecreater, Statistics, is_special
  File "borg.archive", line 22, in <module>
    from .cache import ChunkListEntry
  File "borg.cache", line 29, in <module>
    from .crypto.key import PlaintextKey
  File "borg.crypto.key", line 27, in <module>
    from ..platform import SaveFile
  File "borg.platform", line 18, in <module>
    from .posix import process_alive, local_pid_alive
ImportError: cannot import name 'process_alive' from 'posix' (unknown location)
```

While compiling, this line shows up, which should be good?

```
adding embedded built extension module: borg.platform.posix
```

Not sure why it's still not finding the module. The source file is a [pyx](https://github.com/borgbackup/borg/blob/master/src/borg/platform/posix.pyx) and the compiling is done in [`setup.py`](https://github.com/borgbackup/borg/blob/master/setup.py#L99) (in a standard way, I hope). Could those relativ imports be a problem?
If one of the entries in sys_paths contain a built extension, and it is imported, the binary always seg faults. e.g. scandir in repl mode

```gdb
#0  0x00007ffff700cab8 in PyModule_Create2 () from /usr/lib64/libpython3.7m.so.1.0
#1  0x00007ffff7f82503 in PyInit__scandir () from /usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so
#2  0x0000555555803896 in _PyImport_LoadDynamicModuleWithSpec (
    spec=<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>, fp=<optimized out>) at ./Python/importdl.c:159
#3  0x0000555555803327 in _imp_create_dynamic_impl (module=<optimized out>, 
    spec=<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>, file=<optimized out>) at Python/import.c:2170
#4  _imp_create_dynamic (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/import.c.h:289
#5  0x00005555557406eb in _PyMethodDef_RawFastCallDict (method=0x55555a2a0d80 <imp_methods+320>, self=<module at remote 0x7ffff7385dd0>, args=0x7ffff72b74e8, nargs=1, kwargs={})
    at Objects/call.c:530
#6  0x00005555557401b4 in _PyCFunction_FastCallDict (func=<built-in method create_dynamic of module object at remote 0x7ffff7385dd0>, args=0x7ffff72b74e8, nargs=33, kwargs={})
    at Objects/call.c:586
#7  PyCFunction_Call (func=<built-in method create_dynamic of module object at remote 0x7ffff7385dd0>, args=<optimized out>, kwargs={}) at Objects/call.c:791
#8  0x00005555557d73f2 in do_call_core (func=<optimized out>, 
    callargs=(<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>,), kwdict=<optimized out>) at Python/ceval.c:4641
#9  _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff736ae50, for file <frozen importlib._bootstrap>, line 219, in _call_with_frames_removed (f=<built-in method create_dynamic of module object at remote 0x7ffff7385dd0>, args=(<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>,), kwds={}), throwflag=<optimized out>) at Python/ceval.c:3191
#10 0x00005555557da8dd in PyEval_EvalFrameEx (f=<optimized out>, throwflag=0) at Python/ceval.c:547
#11 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=2, kwnames=0x0, kwargs=0x7ffff792bac0, kwcount=0, kwstep=1, 
    defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='_call_with_frames_removed', qualname='_call_with_frames_removed') at Python/ceval.c:3930
#12 0x000055555573feb8 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x21, nargs=0, kwnames=<optimized out>) at Objects/call.c:433
#13 0x00005555557d9b62 in call_function (pp_stack=0x7fffffff9a70, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#14 0x00005555557d7002 in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff792b920, for file <frozen importlib._bootstrap_external>, line 1043, in create_module (self=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, spec=<ModuleSpec(name='_scandir', loader=<...>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>), throwflag=<optimized out>) at Python/ceval.c:3093
#15 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#16 0x00005555557d9b62 in call_function (pp_stack=0x7fffffff9c60, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#17 0x00005555557d6fec in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff739d750, for file <frozen importlib._bootstrap>, line 583, in module_from_spec (spec=<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>, module=None), throwflag=<optimized out>) at Python/ceval.c:3110
#18 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#19 0x00005555557d9b62 in call_function (pp_stack=0x7fffffff9eb0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#20 0x00005555557d708e in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff72b8050, for file <frozen importlib._bootstrap>, line 670, in _load_unlocked (spec=<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>), throwflag=<optimized out>) at Python/ceval.c:3124
#21 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#22 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffa0a0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#23 0x00005555557d708e in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff792e8a0, for file <frozen importlib._bootstrap>, line 967, in _find_and_load_unlocked (name='_scandir', import_=<built-in method __import__ of module object at remote 0x7fff--Type <RET> for more, q to quit, c to continue without paging--
f7fbde30>, path=None, parent='', spec=<ModuleSpec(name='_scandir', loader=<ExtensionFileLoader(name='_scandir', path='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so') at remote 0x7ffff72c2090>, origin='/usr/lib64/python3.7/site-packages/_scandir.cpython-37m-x86_64-linux-gnu.so', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached=None) at remote 0x7ffff72c2190>), throwflag=<optimized out>) at Python/ceval.c:3124
#24 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#25 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffa290, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#26 0x00005555557d708e in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff728e650, for file <frozen importlib._bootstrap>, line 983, in _find_and_load (name='_scandir', import_=<built-in method __import__ of module object at remote 0x7ffff7fbde30>, module=<object at remote 0x7ffff7387060>), throwflag=<optimized out>) at Python/ceval.c:3124
#27 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#28 0x0000555555741aae in object_vacall (callable=<function at remote 0x7ffff739fa70>, vargs=0x7fffffffa3f0) at Objects/call.c:1202
#29 0x0000555555741b80 in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=<optimized out>) at Objects/call.c:1252
#30 0x0000555555802301 in import_find_and_load (abs_name=<optimized out>) at Python/import.c:1648
#31 PyImport_ImportModuleLevelObject (name='_scandir', globals=<optimized out>, locals=<optimized out>, fromlist=None, level=0) at Python/import.c:1760
#32 0x00005555557d59eb in import_name (f=<optimized out>, name='_scandir', fromlist=None, level=0) at Python/ceval.c:4770
#33 _PyEval_EvalFrameDefault (f=Frame 0x7ffff78feda0, for file /usr/lib64/python3.7/site-packages/scandir.py, line 29, in <module> (), throwflag=<optimized out>) at Python/ceval.c:2600
#34 0x00005555557da8dd in PyEval_EvalFrameEx (f=<optimized out>, throwflag=0) at Python/ceval.c:547
#35 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kwnames=0x0, kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, 
    defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930
#36 0x00005555557d0cbf in PyEval_EvalCodeEx (_co=<unknown at remote 0x7ffff7f85400>, globals=<unknown at remote 0x3f5>, locals=0x0, args=0x0, argcount=0, kws=0x0, kwcount=0, defs=0x0, 
    defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959
#37 PyEval_EvalCode (co=<unknown at remote 0x7ffff7f85400>, globals=<unknown at remote 0x3f5>, locals=0x0) at Python/ceval.c:524
#38 0x00005555557ce27d in builtin_exec_impl (module=<optimized out>, source=<code at remote 0x7ffff72b6660>, 
    globals={'__name__': 'scandir', '__doc__': 'scandir, a better directory iterator and faster os.walk(), now in the Python 3.5 stdlib\n\nscandir() is a generator version of os.listdir() that returns an\niterator over files in a directory, and also exposes the extra\ninformation most OSes provide while iterating files in a directory\n(such as type and stat information).\n\nThis module also includes a version of os.walk() that uses scandir()\nto speed it up significantly.\n\nSee README.md or https://github.com/benhoyt/scandir for rationale and\ndocs, or read PEP 471 (https://www.python.org/dev/peps/pep-0471/) for\nmore details on its inclusion into Python 3.5\n\nscandir is released under the new BSD 3-clause license. See\nLICENSE.txt for the full license text.\n', '__package__': '', '__loader__': <SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, '__spec__': <ModuleSpec(name='scandir', loader=<...>, origin='/usr/lib64/python3.7/site-packages/scandir.py', loa...(truncated), 
    locals={'__name__': 'scandir', '__doc__': 'scandir, a better directory iterator and faster os.walk(), now in the Python 3.5 stdlib\n\nscandir() is a generator version of os.listdir() that returns an\niterator over files in a directory, and also exposes the extra\ninformation most OSes provide while iterating files in a directory\n(such as type and stat information).\n\nThis module also includes a version of os.walk() that uses scandir()\nto speed it up significantly.\n\nSee README.md or https://github.com/benhoyt/scandir for rationale and\ndocs, or read PEP 471 (https://www.python.org/dev/peps/pep-0471/) for\nmore details on its inclusion into Python 3.5\n\nscandir is released under the new BSD 3-clause license. See\nLICENSE.txt for the full license text.\n', '__package__': '', '__loader__': <SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, '__spec__': <ModuleSpec(name='scandir', loader=<...>, origin='/usr/lib64/python3.7/site-packages/scandir.py', loa...(truncated)) at Python/bltinmodule.c:1079
#39 builtin_exec (module=<optimized out>, args=<optimized out>, nargs=<optimized out>) at Python/clinic/bltinmodule.c.h:283
#40 0x00005555557406eb in _PyMethodDef_RawFastCallDict (method=0x55555a29d5d0 <builtin_methods+480>, self=<module at remote 0x7ffff7fbde30>, args=0x7ffff7366b08, nargs=2, kwargs={})
    at Objects/call.c:530
#41 0x00005555557401b4 in _PyCFunction_FastCallDict (func=<built-in method exec of module object at remote 0x7ffff7fbde30>, args=0x7ffff7366b08, nargs=33, kwargs={}) at Objects/call.c:586
#42 PyCFunction_Call (func=<built-in method exec of module object at remote 0x7ffff7fbde30>, args=<optimized out>, kwargs={}) at Objects/call.c:791
#43 0x00005555557d73f2 in do_call_core (func=<optimized out>, 
    callargs=(<code at remote 0x7ffff72b6660>, {'__name__': 'scandir', '__doc__': 'scandir, a better directory iterator and faster os.walk(), now in the Python 3.5 stdlib\n\nscandir() is a generator version of os.listdir() that returns an\niterator over files in a directory, and also exposes the extra\ninformation most OSes provide while iterating files in a directory\n(such as type and stat information).\n\nThis module also includes a version of os.walk() that uses scandir()\nto speed it up significantly.\n\nSee README.md or https://github.com/benhoyt/scandir for rationale and\ndocs, or read PEP 471 (https://www.python.org/dev/peps/pep-0471/) for\nmore details on its inclusion into Python 3.5\n\nscandir is released under the new BSD 3-clause license. See\nLICENSE.txt for the full license text.\n', '__package__': '', '__loader__': <SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, '__spec__': <ModuleSpec(name='scandir', loader=<...>, origin='/usr/lib64/python...(truncated), kwdict=<optimized out>) at Python/ceval.c:4641
#44 _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff736a3d0, for file <frozen importlib._bootstrap>, line 219, in _call_with_frames_removed (f=<built-in method exec of module object at remote 0x7ffff7fbde30>, args=(<code at remote 0x7ffff72b6660>, {'__name__': 'scandir', '__doc__': 'scandir, a better directory iterator and faster os.walk(), now in the Python 3.5 stdlib\n\nscandir() is a generator version of os.listdir() that returns an\niterator over files in a directory, and also exposes the extra\ninformation most OSes provide while iterating files in a directory\n(such as type and stat 
\n\nThis module also includes a version of os.walk() that uses scandir()\nto speed it up significantly.\n\nSee README.md or https://github.com/benhoyt/scandir for rationale and\ndocs, or read PEP 471 (https://www.python.org/dev/peps/pep-0471/) for\nmore details on its inclusion into Python 3.5\n\nscandir is released under the new BSD 3-clause license. See\nLICENSE.txt for the full license text.\n', '__package__': '', '__loader__': <SourceFileLoader(n...(truncated), throwflag=<optimized out>) at Python/ceval.c:3191
#45 0x00005555557da8dd in PyEval_EvalFrameEx (f=<optimized out>, throwflag=0) at Python/ceval.c:547
#46 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=3, kwnames=0x0, kwargs=0x7ffff72ae3c8, kwcount=0, kwstep=1, 
    defs=0x0, defcount=0, kwdefs=0x0, closure=0x0, name='_call_with_frames_removed', qualname='_call_with_frames_removed') at Python/ceval.c:3930
#47 0x000055555573feb8 in _PyFunction_FastCallKeywords (func=<optimized out>, stack=0x21, nargs=0, kwnames=<optimized out>) at Objects/call.c:433
#48 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffabd0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#49 0x00005555557d7002 in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff72ae220, for file <frozen importlib._bootstrap_external>, line 728, in exec_module (self=<SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, module=<module at remote 0x7ffff72ad950>, code=<code at remote 0x7ffff72b6660>), throwflag=<optimized out>) at Python/ceval.c:3093
#50 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#51 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffadc0, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#52 0x00005555557d6fec in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff73a3de0, for file <frozen importlib._bootstrap>, line 677, in _load_unlocked (spec=<ModuleSpec(name='scandir', loader=<SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, origin='/usr/lib64/python3.7/site-packages/scandir.py', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached='/usr/lib64/python3.7/site-packages/__pycache__/scandir.cpython-37.pyc', _initializing=True) at remote 0x7ffff7367b10>, module=<module at remote 0x7ffff72ad950>), 
    throwflag=<optimized out>) at Python/ceval.c:3110
#53 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#54 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffb010, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#55 0x00005555557d708e in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff78be120, for file <frozen importlib._bootstrap>, line 967, in _find_and_load_unlocked (name='scandir', import_=<built-in method __import__ of module object at remote 0x7ffff7fbde30>, path=None, parent='', spec=<ModuleSpec(name='scandir', loader=<SourceFileLoader(name='scandir', path='/usr/lib64/python3.7/site-packages/scandir.py') at remote 0x7ffff732b3d0>, origin='/usr/lib64/python3.7/site-packages/scandir.py', loader_state=None, submodule_search_locations=None, _set_fileattr=True, _cached='/usr/lib64/python3.7/site-packages/__pycache__/scandir.cpython-37.pyc', _initializing=True) at remote 0x7ffff7367b10>), throwflag=<optimized out>) at Python/ceval.c:3124
#56 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#57 0x00005555557d9b62 in call_function (pp_stack=0x7fffffffb200, oparg=<optimized out>, kwnames=0x0) at Python/ceval.c:4616
#58 0x00005555557d708e in _PyEval_EvalFrameDefault (
    f=Frame 0x7ffff731a050, for file <frozen importlib._bootstrap>, line 983, in _find_and_load (name='scandir', import_=<built-in method __import__ of module object at remote 0x7ffff7fbde30>, module=<object at remote 0x7ffff7387060>), throwflag=<optimized out>) at Python/ceval.c:3124
#59 0x00005555557403df in function_code_fastcall (co=<optimized out>, args=<optimized out>, nargs=<optimized out>, globals=<optimized out>) at Objects/call.c:283
#60 0x0000555555741aae in object_vacall (callable=<function at remote 0x7ffff739fa70>, vargs=0x7fffffffb360) at Objects/call.c:1202
#61 0x0000555555741b80 in _PyObject_CallMethodIdObjArgs (obj=<optimized out>, name=<optimized out>) at Objects/call.c:1252
#62 0x0000555555802301 in import_find_and_load (abs_name=<optimized out>) at Python/import.c:1648
#63 PyImport_ImportModuleLevelObject (name='scandir', globals=<optimized out>, locals=<optimized out>, fromlist=None, level=0) at Python/import.c:1760
#64 0x00005555557d59eb in import_name (f=<optimized out>, name='scandir', fromlist=None, level=0) at Python/ceval.c:4770
#65 _PyEval_EvalFrameDefault (f=Frame 0x7ffff78baca0, for file <stdin>, line 1, in <module> (), throwflag=<optimized out>) at Python/ceval.c:2600
#66 0x00005555557da8dd in PyEval_EvalFrameEx (f=<optimized out>, throwflag=0) at Python/ceval.c:547
#67 _PyEval_EvalCodeWithName (_co=<optimized out>, globals=<optimized out>, locals=<optimized out>, args=<optimized out>, argcount=0, kwnames=0x0, kwargs=0x0, kwcount=0, kwstep=2, defs=0x0, 
    defcount=0, kwdefs=0x0, closure=0x0, name=0x0, qualname=0x0) at Python/ceval.c:3930
#68 0x00005555557d0cbf in PyEval_EvalCodeEx (_co=<unknown at remote 0x7ffff7f85400>, globals=<unknown at remote 0x3f5>, locals=0x0, args=0x0, argcount=0, kws=0x0, kwcount=0, defs=0x0, 
    defcount=0, kwdefs=0x0, closure=0x0) at Python/ceval.c:3959
#69 PyEval_EvalCode (co=<unknown at remote 0x7ffff7f85400>, globals=<unknown at remote 0x3f5>, locals=0x0) at Python/ceval.c:524
#70 0x000055555581431b in run_mod (mod=<optimized out>, filename=<optimized out>, 
    globals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <type at remote 0x7ffff7882820>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7ffff7fbde30>}, 
    locals={'__name__': '__main__', '__doc__': None, '__package__': None, '__loader__': <type at remote 0x7ffff7882820>, '__spec__': None, '__annotations__': {}, '__builtins__': <module at remote 0x7ffff7fbde30>}, flags=<optimized out>, arena=<optimized out>) at Python/pythonrun.c:1035
#71 PyRun_InteractiveOneObjectEx (fp=<optimized out>, filename=<optimized out>, flags=<optimized out>) at Python/pythonrun.c:256
#72 0x0000555555813afe in PyRun_InteractiveLoopFlags (fp=0x55555a58c6e0, filename_str=<optimized out>, flags=0x7fffffffbad0) at Python/pythonrun.c:120
#73 0x00005555558139f8 in PyRun_AnyFileExFlags (fp=0x55555a58c6e0, filename=0x55555a592ce0 "<stdin>", closeit=0, flags=0x7fffffffbad0) at Python/pythonrun.c:78
#74 0x00005555556f8b54 in pyembed::pyinterp::MainPythonInterpreter::run_repl (self=0x7fffffffc238) at pyembed/src/pyinterp.rs:739
#75 0x00005555556f57a0 in pyembed::pyinterp::MainPythonInterpreter::run (self=0x7fffffffc238) at pyembed/src/pyinterp.rs:525
#76 0x00005555556f67fc in pyembed::pyinterp::MainPythonInterpreter::run_and_handle_error (self=0x7fffffffc238) at pyembed/src/pyinterp.rs:617
#77 0x00005555556f6b47 in pyembed::pyinterp::MainPythonInterpreter::run_as_main (self=0x7fffffffc238) at pyembed/src/pyinterp.rs:654
#78 0x00005555556bb956 in requests_dec1::main () at src/main.rs:19
```

The backtrace is almost the same for `python_run_mode_eval` and I assume for other run modes.

If it can not be fixed, maybe an `ImportError` can be raised instead.
In order to programatically inspect and validate the contents
of the executable from Python code, the internal package list
needs to be exposed.

This also provides the ability for Python code to implement
package listing support in the various frameworks such as
pkg_resources and importlib.metadata's find_distributions.

Related to https://github.com/indygreg/PyOxidizer/issues/140
Related to https://github.com/indygreg/PyOxidizer/issues/141
If nothing else, they are annoying when there are real link error related warnings (dup/undefined syms) hidden among so many warnings about missing .pdb.

If this isnt easy to fix, maybe disable this one warning code (LNK4099)?  

```console
2019-11-27T02:56:43.6788453Z           libpyembed-22b43a942f015ff6.rlib(selectmodule.obj) : warning LNK4099: PDB 'select.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(selectmodule.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\select.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6804188Z           libpyembed-22b43a942f015ff6.rlib(auto_decoder.obj) : warning LNK4099: PDB 'liblzma.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(auto_decoder.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\liblzma.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6805677Z           libpyembed-22b43a942f015ff6.rlib(connection.obj) : warning LNK4099: PDB '_sqlite3.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(connection.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\_sqlite3.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6817575Z           libpyembed-22b43a942f015ff6.rlib(rand_lib.obj) : warning LNK4099: PDB 'ossl_static.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(rand_lib.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\ossl_static.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6817748Z           libpyembed-22b43a942f015ff6.rlib(_math.obj) : warning LNK4099: PDB 'pythoncore.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(_math.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\pythoncore.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6817906Z           libpyembed-22b43a942f015ff6.rlib(xmlparse.obj) : warning LNK4099: PDB 'pyexpat.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(xmlparse.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\pyexpat.pdb'; linking object as if no debug info
2019-11-27T02:56:43.6818249Z           libpyembed-22b43a942f015ff6.rlib(zutil.obj) : warning LNK4099: PDB 'pythoncore.pdb' was not found with 'libpyembed-22b43a942f015ff6.rlib(zutil.obj)' or at 'D:\pyapp\build\target\x86_64-pc-windows-msvc\debug\deps\pythoncore.pdb'; linking object as if no debug info
```

They are included in the win standalone archive, so I guess it might be solvable by adding more paths to the linker.

```bash
> find . -name '*.pdb'
./python/build/core/pythoncore.pdb
./python/build/extensions/_asyncio/_asyncio.pdb
./python/build/extensions/_bz2/_bz2.pdb
./python/build/extensions/_ctypes/_ctypes.pdb
./python/build/extensions/_decimal/_decimal.pdb
./python/build/extensions/_elementtree/_elementtree.pdb
./python/build/extensions/_hashlib/_hashlib.pdb
./python/build/extensions/_lzma/_lzma.pdb
./python/build/extensions/_msi/_msi.pdb
./python/build/extensions/_multiprocessing/_multiprocessing.pdb
./python/build/extensions/_overlapped/_overlapped.pdb
./python/build/extensions/_queue/_queue.pdb
./python/build/extensions/_socket/_socket.pdb
./python/build/extensions/_sqlite3/_sqlite3.pdb
./python/build/extensions/_ssl/_ssl.pdb
./python/build/extensions/pyexpat/pyexpat.pdb
./python/build/extensions/select/select.pdb
./python/build/extensions/unicodedata/unicodedata.pdb
./python/build/extensions/winsound/winsound.pdb
./python/build/lib/liblzma.pdb
./python/build/lib/sqlite3.pdb
```

If I have a syntax error in pyembed code, `cargo install --path pyoxidizer` will happily include it and push it into the generated projects.
I know I can manually check it, but it would be nice if the normal build process checked it.
It would be great if "pre" compiled pyembed objects were included into the generated projects to reduce build times for the generated projects.

CPython:

```
Python 3.7.5 (default, Oct 24 2019, 06:30:32)
Type 'copyright', 'credits' or 'license' for more information
IPython 7.9.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: !ls -1 instawow
__init__.py
__main__.py
__pycache__
_import_wrapper.py
_version.py
cli.py
config.py
exceptions.py
manager.py
matchers.py
migrations
models.py
prompts.py
resolvers.py
utils.py
wa_templates
wa_updater.py

In [2]: from importlib.resources import contents, read_binary

In [3]: read_binary('instawow', '__main__.py')
Out[3]: b"from instawow.cli import main\n\n\nif __name__ == '__main__':\n    main()\n"

In [4]: list(contents('instawow'))
Out[4]:
['migrations',
 'config.py',
 'models.py',
 '_version.py',
 'resolvers.py',
 'wa_updater.py',
 '__init__.py',
 '__pycache__',
 'prompts.py',
 'cli.py',
 'utils.py',
 'exceptions.py',
 'matchers.py',
 '_import_wrapper.py',
 '__main__.py',
 'manager.py',
 'wa_templates']
```

PyOxidizer:

```
>>> from importlib.resources import contents, read_binary
>>> read_binary('instawow', '__main__.py')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "importlib.resources", line 154, in read_binary
  File "importlib.resources", line 91, in open_binary
FileNotFoundError: resource not found
>>> contents('instawow')
['wa_templates/COPYING.WeakAuras-Companion', 'wa_templates/data.lua', 'wa_templates/init.lua', 'wa_templates/WeakAurasCompanion.toc']
```

PyOxidizer also handles `is_resource` differently:

```
>>> from importlib.resources import is_resource
>>> is_resource('instawow', 'foo')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "importlib.resources", line 227, in is_resource
FileNotFoundError: resource not found
```

Compare with the default reader:

```
In [5]: from importlib.resources import is_resource

In [6]: is_resource('instawow', 'foo')
Out[6]: False
```
One small problem with the Windows CI is that %HOME% is empty, resulting in the app building at `/pyapp` which is also odd as it should be a Windows path not a Unix path.

But more interesting is that the Built App job log doesnt emit that always-important "hello, world" . e.g. https://dev.azure.com/gregoryszorc/PyOxidizer/_build/results?buildId=233&view=logs ends with

```console
packaging application into D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug
copying D:/pyapp\build\target\x86_64-pc-windows-msvc\debug\pyapp.exe to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\pyapp.exe
resolving packaging state...
writing license for _bz2 to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.bzip2.txt
writing license for _ctypes to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.libffi.txt
writing license for _hashlib to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.openssl.txt
writing license for _lzma to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.liblzma.txt
writing license for _sqlite3 to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.sqlite.txt
writing license for _ssl to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.openssl.txt
writing license for python to D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug\LICENSE.python.txt
pyapp packaged into D:/pyapp\build\apps\pyapp\x86_64-pc-windows-msvc\debug
##[section]Finishing: Build Oxidized Application (Windows)
```