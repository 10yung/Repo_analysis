
Try to solve the NPE in onCreateView method of Fragments 
I've viewpager with 5 fragments one of the fragment has recyclerView 
private val recyclerView : RecyclerView by bindView(R.id.list)

It works find once it first appears but one I move to other fragment and return to the fragment that has list, the list does not appear and I get 
`recyclerview No adapter attached; skipping layout`
 I switch to regular view.findViewById(). the issue has been resolve. 

it looks bindView does not bind to fragment's view or something 
**Point 1**
Kotterknife behaves in a way that if `DialogFragment.getDialog() != null`, it will use `getDialog().findViewById()` or if a `getDialog() == null` it will attempt `getView().findViewById()`

The FragmentManager calls `getLayoutInflater` before `onCreateView`, and in a DialogFragment `onCreateDialog` is called as part of `getLayoutInflater`, therefore there is no point at which a View will exist when a Dialog doesn't.

So I recommend perhaps removing the fallback as to not confuse developers looking at the source.

**Point 2** 

The view created in `onCreateView` is not set to the dialog until `onActivityCreated`. Therefore if a behaviour of initialising the view state in `onViewCreated` is taken then a crash is guaranteed.

There doesn't seem to be a great way of knowing if `Dialog.setContentView`  or `FragmentonActivityCreated` was called so perhaps this detail should be added to documentation?


--

I'll make a PR later, but wanted to see if this was agreeable or I'm misunderstanding why I was running into issues.
Hi Jake, 

Yesterday you updated kotterknife. For some reason we got Unresolved reference: bindView.

We tried exclude groups for kotlin and support libs(we still using 25.4.0), but problem was still persisted. (Maybe binary compatibility or what)

Can you please try avoid of using snapshot without stable build? from "com.jakewharton:kotterknife:0.1.0-SNAPSHOT" to something like "com.jakewharton:kotterknife:0.1.1" , ... etc?

We did alternative solution for now: Uploaded to artifactory old library with different group name to work with ours builds. Thanks
Hi 
I added sonatype dependency like this
```
repositories {
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots"
    }
}
``` 

and 
`compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'`

to the app gradle.

But I still got `Error:(39, 13) Failed to resolve: com.jakewharton:kotterknife:0.1.0-SNAPSHOT`

Can someone help me with it?
in an app I'm slowly moving over to kotlin in Build.gradle I add in:

``` 
 kapt 'com.jakewharton:butterknife-compiler:8.5.1'
  compile 'com.jakewharton:butterknife:8.5.1'
  compile 'com.jakewharton:kotterknife:0.1.0-SNAPSHOT'
```
When I Build it fails with:

```
Error:Error converting bytecode to dex:
Cause: com.android.dex.DexException: Multiple dex files define Lbutterknife/BuildConfig;
Error:com.android.dex.DexException: Multiple dex files define Lbutterknife/BuildConfig;
Error:	at com.android.dx.merge.DexMerger.readSortableTypes(DexMerger.java:608)
Error:	at com.android.dx.merge.DexMerger.getSortedTypes(DexMerger.java:563)
Error:	at com.android.dx.merge.DexMerger.mergeClassDefs(DexMerger.java:545)
Error:	at com.android.dx.merge.DexMerger.mergeDexes(DexMerger.java:167)
Error:	at com.android.dx.merge.DexMerger.merge(DexMerger.java:194)
Error:	at com.android.builder.dexing.DexArchiveMergerCallable.mergeDexes(DexArchiveMergerCallable.java:66)
Error:	at com.android.builder.dexing.DexArchiveMergerCallable.call(DexArchiveMergerCallable.java:54)
Error:	at com.android.builder.dexing.DexArchiveMergerCallable.call(DexArchiveMergerCallable.java:37)
Error:	at java.util.concurrent.ForkJoinTask$AdaptedCallable.exec(ForkJoinTask.java:1424)
Error:	at java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:289)
Error:	at java.util.concurrent.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1056)
Error:	at java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1692)
Error:	at java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:157)
Error:Execution failed for task ':app:transformDexArchiveWithDexMergerForDebug'.
> com.android.build.api.transform.TransformException: com.android.dex.DexException: Multiple dex files define Lbutterknife/BuildConfig;
```


Imagine, we have an abstract base view-class:

`
```
abstract class CollectionFragment {
    protected val emptyView: View by bindView(R.id.empty_view)

    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {
    ... some base layout ...
    }
}
```
`

then we inherit, and we want to access some view:

`
```
class NewsFragment : CollectionFragment() {
    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {

        val rootView: View? = super.onCreateView(inflater, container, savedInstanceState)

        emptyDataButton.visibility = View.GONE  // hide empty data button

        return rootView

    }
}
```
`

But we get NPE while accessing this 'emptyView':
````
Caused by: kotlin.KotlinNullPointerException
                                                                              at butterknife.ButterKnifeKt$viewFinder$5.invoke(ButterKnife.kt:73)
                                                                              at butterknife.ButterKnifeKt$viewFinder$5.invoke(ButterKnife.kt)
                                                                              at butterknife.ButterKnifeKt$required$1.invoke(ButterKnife.kt:82)
                                                                              at butterknife.ButterKnifeKt$required$1.invoke(ButterKnife.kt)
                                                                              at butterknife.Lazy.getValue(ButterKnife.kt:103)
                                                                              at CollectionFragment.getEmptyDataButton(CollectionFragment.kt:0)
                                                                              at NewsFragment.onCreateView(NewsFragment.kt:50)
                                                                              at android.support.v4.app.Fragment.performCreateView(Fragment.java:2189)
````

When we rollback to classic ButterKnife:

`@BindView(R.id.btn_empty_data) lateinit var emptyDataButton: Button`

everything is OK
- Added an interface `KotterKnife`
- Added binding extension functions for this interface

Any custom class that wants to use KotterKnife just has to implement the 'KotterKnife' 'interface. This avoids polluting extension functions on `Any`. This solves #9, #31, #42.

It would be nice to be able to do something like this:

``` kotlin
class Sample : KotterKnifeTarget {
    override val rootView = something
    val textView = bindView<TextView>(R.id.foo) /* finds the view from rootView */
}
```

The view binding extension methods would be on `KotterKnifeTarget`. This way we could use KotterKnife with [Renderers](https://github.com/pedrovgs/Renderers) or anywhere else.
