https://google.github.io/styleguide/javaguide.html#s3-source-file-structure says

> A source file consists of, in order:
> 
> 1. License or copyright information, if present
> 2. Package statement
> 3. Import statements
> 4. Exactly one top-level class
> 
> Exactly one blank line separates each section that is present.

But google-java-format does not add the blank line between a License section and a package statement.

![image](https://user-images.githubusercontent.com/28604/72165837-2e1d3b00-3396-11ea-9acf-c8266b86a27c.png)

Please have a look at the following two unit tests which should both work, but only the second does:

    @Test
    public void testCharaterRangesFormatWithAnnotation() throws Exception {
      final String text = "package foo; public class Bar {\n" +
        "    @SuppressWarnings(\"unchecked\")\n" +
        "    // some comment      \n" +
        "    public void doSomething(String arg) { System.out.println(\"Hello World\"); } public boolean doSomethingElse(Object obj) { return false; } }";
    
      final String expected = "package foo;\n" +
        "\n" +
        "public class Bar {\n" +
        // START -- this should not be formatted
        "  @SuppressWarnings(\"unchecked\")\n" +
        "    // some comment      \n" +
        "    public void doSomething(String arg) { System.out.println(\"Hello World\"); }\n" +
        // END -- this should not be formatted
        "\n" +
        "  public boolean doSomethingElse(Object obj) {\n" +
        "    return false;\n" +
        "  }\n" +
        "}\n" +
        "";
    
      Collection<Range<Integer>> characterRanges = new ArrayList<>();
      characterRanges.add(Range.open(0, 66));
      characterRanges.add(Range.open(171, 234));
    
      Formatter formatter = new Formatter(JavaFormatterOptions.builder().style(JavaFormatterOptions.Style.GOOGLE).build());
    
      String actual = formatter.formatSource(text, characterRanges);
      Assert.assertEquals("Formatting should change the code", expected, actual);
    }
    
    @Test
    public void testCharaterRangesFormatWithoutAnnotation() throws Exception {
      final String text = "package foo; public class Bar {\n" +
        "    @SuppressWarnings(\"unchecked\")\n" +
        "    // some comment      \n" +
        "    public void doSomething(String arg) { System.out.println(\"Hello World\"); } public boolean doSomethingElse(Object obj) { return false; } }";
      
      final String expected = "package foo;\n" +
        "\n" +
        "public class Bar {\n" +
        "    @SuppressWarnings(\"unchecked\")\n" +
        // START -- this should not be formatted
        "    // some comment      \n" +
        "    public void doSomething(String arg) { System.out.println(\"Hello World\"); }\n" +
        // END -- this should not be formatted
        "\n" +
        "  public boolean doSomethingElse(Object obj) {\n" +
        "    return false;\n" +
        "  }\n" +
        "}\n" +
        "";

      Collection<Range<Integer>> characterRanges = new ArrayList<>();
      characterRanges.add(Range.open(0, 31));
      characterRanges.add(Range.open(171, 234));
    
      Formatter formatter = new Formatter(JavaFormatterOptions.builder().style(JavaFormatterOptions.Style.GOOGLE).build());
    
      String actual = formatter.formatSource(text, characterRanges);
      Assert.assertEquals("Formatting should change the code", expected, actual);
    }

When I run those tests I get this as an result:

    Failures: 
      FormatterTest.testCharaterRangesFormatWithAnnotation:58 Formatting should change the code expected:<...ings("unchecked")
      [  // some comment      
        public void doSomething(String arg) {] System.out.println(...> but was:<...ings("unchecked")
      [// some comment
      public void doSomething(String arg) {
       ] System.out.println(...>
    
    Tests run: 2, Failures: 1, Errors: 0, Skipped: 0

It seems there is an issue when there is an annotation before a comment or a method, it seems the formatter is formatting code outside of the given character range.

Regards,
Fabian
While not Google's style, several other companies and projects prefer longer line length than 100 chars.    My current team evaluated google-java-format, and the most contention issue was the line length being too short.     I feel like the majority of the value of the formatter has been lost over this one point.

For programmers with wider monitors (more and more common these days), the 100 char line limit results in a lot of wasted space.    The main benefits of the shorter line length seem to be for people looking at two pages of code side by side.   However, this is not a frequent activity, and code is normally viewed one page width at a time.    

I don't think the line length that google-java-format uses needs to be general purpose.    I propose 120 as a straw-man.     Popular projects, such as Spring and Netty use 120 chars.    GitHub adds a horizontal scrollbar after 120 too.    I think such projects would be much more amenable to using this formatter if there was a `--long-lines` option, similar to the `--aosp` option.
The annotation is wrong for the Java file, but this is a compiling, small reproducing case.  The following file complains about syntax errors:

```java
package foo;

import groovy.transform.CompileStatic;

/**
 * Created.
 */
import java.util.ArrayList;

/**
 * Created.
 */
@CompileStatic
public class Broken {
    ArrayList<?> list;
}
```
I am running google-java-format on a Windows machine.  When I provide it a file (with the "@<file>" syntax) containing a list of files to format, it will fail to format files that contain a space in the path.  Example:

```
>type files.lst
C:\path\with\a space\Some.java

>java -jar google-java-format.jar @files.lst
Skipping non-Java file: C:\path\with\a
space\Some.java: could not read file: space\Some.java
```

Placing double-quotes around the path does not work, either.

It _does_, however, handle passing in the filenames in the command string, provided they are surrounded by double-quotes, e.g.:

```
>java -jar google-java-format.jar "C:\path\with\a space\Some.java"
```
I created a GitHub action <https://github.com/m273d15/java-format-action> in order to check my code with your standalone jar. I wanted to ask before publishing it in the GitHub marketplace whether this violates your license (or whatever).
I hoped avoiding the name "google" in the actions name should be enough.
# Repro:
1. Load the pom.xml file in IntelliJ
2. Attempt to run tests inside IntelliJ

Observe:
```
Information:java: An exception has occurred in the compiler (1.8.0_181). Please file a bug against the Java compiler via the Java bug reporting page (http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com) for duplicates. Include your program and the following diagnostic in your report. Thank you.
Information:java:   at com.sun.tools.javac.main.Main.compile(Main.java:473)
Information:java:   at com.sun.tools.javac.api.JavacTaskImpl.doCall(JavacTaskImpl.java:129)
Information:java:   at com.sun.tools.javac.api.JavacTaskImpl.call(JavacTaskImpl.java:138)
Information:java:   at org.jetbrains.jps.javac.JavacMain.compile(JavacMain.java:190)
Information:java:   at org.jetbrains.jps.incremental.java.JavaBuilder.compileJava(JavaBuilder.java:459)
Information:java:   at org.jetbrains.jps.incremental.java.JavaBuilder.compile(JavaBuilder.java:329)
Information:java:   at org.jetbrains.jps.incremental.java.JavaBuilder.doBuild(JavaBuilder.java:254)
Information:java:   at org.jetbrains.jps.incremental.java.JavaBuilder.build(JavaBuilder.java:212)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.runModuleLevelBuilders(IncProjectBuilder.java:1328)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.runBuildersForChunk(IncProjectBuilder.java:1008)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.buildTargetsChunk(IncProjectBuilder.java:1075)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunkIfAffected(IncProjectBuilder.java:969)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.buildChunks(IncProjectBuilder.java:798)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.runBuild(IncProjectBuilder.java:380)
Information:java:   at org.jetbrains.jps.incremental.IncProjectBuilder.build(IncProjectBuilder.java:178)
Information:java:   at org.jetbrains.jps.cmdline.BuildRunner.runBuild(BuildRunner.java:139)
Information:java:   at org.jetbrains.jps.cmdline.BuildSession.runBuild(BuildSession.java:302)
Information:java:   at org.jetbrains.jps.cmdline.BuildSession.run(BuildSession.java:135)
Information:java:   at org.jetbrains.jps.cmdline.BuildMain$MyMessageHandler.lambda$channelRead0$0(BuildMain.java:228)
Information:java:   at org.jetbrains.jps.service.impl.SharedThreadPoolImpl.lambda$executeOnPooledThread$0(SharedThreadPoolImpl.java:42)
Information:java:   at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
Information:java:   at java.util.concurrent.FutureTask.run(FutureTask.java:266)
Information:java:   at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
Information:java:   at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
Information:java:   at java.lang.Thread.run(Thread.java:748)
Information:java:   at com.sun.tools.javac.main.Main.compile(Main.java:470)
Information:java:   ... 24 more
Information:java: Errors occurred while compiling module 'google-java-format'
Information:javac 1.8.0_181 was used to compile java sources
Information:2019-11-12 12:08 - Build completed with 4 errors and 1 warning in 2 s 838 ms
Error:java: java.lang.RuntimeException: java.lang.NoSuchMethodError: com.sun.tools.javac.util.JavacMessages.add(Lcom/sun/tools/javac/util/JavacMessages$ResourceBundleHelper;)V
Error:java: Caused by: java.lang.NoSuchMethodError: com.sun.tools.javac.util.JavacMessages.add(Lcom/sun/tools/javac/util/JavacMessages$ResourceBundleHelper;)V
Error:java:     at com.google.errorprone.BaseErrorProneJavaCompiler.setupMessageBundle(BaseErrorProneJavaCompiler.java:202)
Error:java:     at com.google.errorprone.ErrorProneJavacPlugin.init(ErrorProneJavacPlugin.java:40)
```

# System information:

![image](https://user-images.githubusercontent.com/1998689/68663048-aa3a0480-0546-11ea-801b-c0adc93bb806.png)


# Things to note -
1. `mvn install` succeeds in building GJF.
2. The IntelliJ project was created from pom.xml

# Workaround -
1. The problem goes away if I remove the compiler parameters in IntelliJ (bottom of Settings -> Build, Execution, Deployment -> Compiler -> Java Compiler)

Google-java-format-diff expects an executable `google-java-format` ([link](https://github.com/google/google-java-format/blob/master/scripts/google-java-format-diff.py#L101)), but this repository does not contain such file. This PR explains how to create such executable in README.md.
Hi,

seems like I found an indentation bomb. Happend to try to format [OdfManifestSaxHandler.java](http://svn.apache.org/repos/asf/incubator/odf/trunk/odfdom/src/main/java/org/odftoolkit/odfdom/pkg/OdfManifestSaxHandler.java) (Rev: 1869391) and always failed with OutOfMemoryError (tried up to 12G of heap space).
Original file is 6 kB. Output of formatter would be approximately  3 GB. Smaller test case which could be handled would be 

Input:
```/*
class X {
	*//** javadoc *//*
	public void foo(Bar bar) {}

	*//** javadoc *//*
	public void foo(Bar bar) {}

	*//** javadoc *//*
	public void foo(Bar bar) {}

	*//** javadoc *//*
	public void foo(Bar bar) {}
}*/
```

Output (each # represents 100 space characters):
```/*
class X {
	*//** javadoc *//*
                 public void foo(Bar bar) {}

                 *//** javadoc *//*
                                                  public void foo(Bar bar) {}

                                                  *//**
#   * javadoc
#   *//*
##       public void foo(Bar bar) {}

##       *//**
####                 * javadoc
####                 *//*
########                                   	public void foo(Bar bar) {}
########                                   }*/
```
These [outdated links](https://github.com/google/google-java-format/blob/master/core/pom.xml#L89) cause build warnings