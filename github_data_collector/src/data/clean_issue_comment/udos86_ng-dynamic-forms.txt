The purpose of this PR is to allow for the dynamic population of related input values Goals Allow the value of one input to automatically and asynchronously populate the list or options for another input Configuration This PR introduces another configuration attribute on the DynamicFormControlModel The dataProvider attribute contains the following properties Name Description relation Similar to how relations work you provide a rootPath or id to the related control relationid ID of the input control relationrootPath The path to the input control from the form group service The service that will be used to fetch the data on related input control value change Usage Example Configuration cardetailsformts import CarDataProviderService from cardataproviderservicets export function CarDetailsForm DynamicFormControlModel return new DynamicSelectModel id make label Make value options value label Select a Make value chevy label Chevrolet value ford label Ford value toyota label Toyota validators required null errorMessages required label is required new DynamicSelectModel id model label Model value options value label Select a Model dataProvider relation id make service CarDataProviderService relations match MATCHDISABLED when id make value validators required null errorMessages required label is required Create a data provider The data provider must implement one of two service interfaces DynamicFormControlListDataProvider or DynamicFormControlOptionsDataProvider Note The service must return an Observable cardataproviderservicets import Observable of from rxjs Injectable providedIn root export class CarDataProviderService implements DynamicFormControlOptionDataProviderstring fetchOptionsvalue string ObserverDynamicFormOptionConfigstring switch value case chevy return of value silverado label Silverado value traverse label Traverse break case ford return of value f label F value f label f break case toyota return of value tacoma label Tacoma value tundra label Tundra break Note This PR is based off my previous PR This PR adds global message support similar to functionality provided by ngxformly The goals of this PR are as follows Reduce boilerplate by defining all Error Message in a global scope Allow for overriding a global message on a per control basis Support dynamic server side error messages on a per control basis without the need for AsyncValidators Does not replace AsyncValidators Support function rendered messages Example Usage TypeScript appmodulets providers provide DYNAMICGLOBALERRORMESSAGES useValue new Map label string error string error show any undefined message For the moment some additional gymnastics is required in order to get the controls to render the messages See an example of that below formcomponentts errors comes from server call const errors fieldID serverValidationError Your field failed to pass validation find each control and set the errors on them const keys Objectkeyserrors keysforEachkey thisgroupcontrols key setErrorserrors key without the following the errors will not be displayed on the form thisformServicedetectChangesthisformComponent The model definition still requires that we optin to error messages new DynamicInputModel id myInput label My Input value errorMessages optin by creating an empty object The result will be a control which shows the catchall error message received from the server Room for improvements Automatically mark each control for rerender once an error has been detected Have an explicit optin for showing error messages instead of relying on the existence of an errorMessages object on the model Use Cases Given that I am defining multiple forms When I configure the validation rules Then I should not have to repeat the errorMessages for each input in order for the messages to display on the control Given that I am defining a form When I configure the validation rules Then I should be able to process the error via a callback before returning the error message Given that I submit a form to the server When the server returns a response code with validation errors mapped to attribute name Then show the error contextually on the form Add support for showing validation errors hints for DynamicMaterialChipsComponent Im submitting a Check one of the following options with x precode x Bug Regression Feature Request Proposal codepre Im using Check one of the following options with x precode NG Dynamic Forms Version XYZ Basic UI Bootstrap UI Foundation UI Ionic UI Kendo UI x Material NG Bootstrap Prime NG codepre Description Add support for showing validation errors for auto complete chiplist in material DynamicMaterialChipsComponent matformfield appearance modelgetAdditionalappearance legacy color modelgetAdditionalcolor primary floatLabel modelgetAdditionalfloatLabel LABELOPTIONS LABELOPTIONS float auto formGroup group hideRequiredMarker modelgetAdditionalhideRequiredMarker false ngClass getClassgrid control matchiplist matChipList formControlName modelid id id multiple true matchip ngForlet chip of chips let index index selectable false removedonChipRemovedchip index span chip span maticon matChipRemovecancelmaticon matchip input matInput matAutocomplete matAutocomplete matChipInputAddOnBlur modelgetAdditionalmatChipInputAddOnBlur true matChipInputFor matChipList matChipInputSeparatorKeyCodes modelgetAdditionalmatChipInputSeparatorKeyCodes CHIPSOPTIONS separatorKeyCodes placeholder modelplaceholder matChipInputTokenEndonChipInputTokenEndevent bluronBlurevent focusonFocusevent matautocomplete matAutocompletematAutocomplete autoActiveFirstOption modelgetAdditionalautoActiveFirstOption AUTOCOMPLETEOPTIONS autoActiveFirstOption disableRipple modelgetAdditionaldisableRipple RIPPLEOPTIONS RIPPLEOPTIONS disabled false displayWith modelgetAdditionaldisplayWith null optionSelectedonChipSelectedevent matoption ngForlet option of modellist async value option option matoption matautocomplete matchiplist matformfield Above code doesnt have materror to show the validation errors Following changes should fix the issue materror ngForlet message of errorMessages message materror I can raise a PR for the same In coredynamicformcontrolcontainercomponentts on customEvent property definition it is defined that type should be either EventEmitter or undefined But in method onCustomEvent in the same component class there are no checks for undefined which can cause errors on defining custom components Please do not file questions or support requests on the GitHub issues tracker any longer You can get your questions answered using Stack Overflow Thank you Im submitting a Check one of the following options with x precode X Bug Regression Feature Request Proposal codepre Im using Check one of the following options with x precode NG Dynamic Forms Version Basic UI Bootstrap UI Foundation UI Ionic UI Kendo UI Material NG Bootstrap X Prime NG codepre Description I created a dynamicformutilservice that basically transforms a simplified JSON form model into a DynamicFormModel and I use it like this typescript thisformModel thisformUtilServicegetFormModeltableModelformModel thisformGroup thisformServicecreateFormGroupthisformModel Then in the template of my component I have this html form formGroup formGroup dynamicprimengform group formGroup model formModel ngcontainer ngForlet arrayModel of formArrayModels ngtemplate modelId arrayModelid letgroup letindexindex letcontext context button typebutton clickremoveItemcontext indexRemove Itembutton button typebutton clickinsertItemgroupcontext groupindex Add Itembutton ngtemplate ngcontainer dynamicprimengform form The insertItem and removeItem methods work fine but when I click Add Item this happens Peek In DynamicFormControlModel theres a memory leak from this line of code thisdisabledsubscribedisabled thisdisabled disabled as well as in DynamicFormValueControlModel from this line of code thisvaluesubscribevalue thisvalue value This has been causing issues of retaining values after leaving the page and then coming back However even if I create a new model instance theres a memory leak from the old instances The subscription should be moved in a component so it can be unsubscribed from in NgOnDestroy Fixed issue for missing tabIndex implementations for dynamic Material elements The following dynamic Material elements are missing tabIndex implementation checkbox chips datepicker radiogroup select and slide toggle Ive fixed the issue and created a pull request Please do not file questions or support requests on the GitHub issues tracker any longer You can get your questions answered using Stack Overflow Thank you Im submitting a Check one of the following options with x precode x Bug Regression Feature Request Proposal codepre Im using Check one of the following options with x precode NG Dynamic Forms Version XYZ Basic UI Bootstrap UI Foundation UI Ionic UI Kendo UI x Material NG Bootstrap Prime NG codepre Description Describe your issue in detail Relation is not working if I want to make my INPUT dependent to a SELECT with multiple true Example id lenkerfuehrerscheinKlassen type SELECT placeholder F hrerscheinklassen multiple true required true validators required null errorMessages required placeholder ist ein Pflichtfeld options label AM value am label A value a label A value a id lenkerfuehrerscheinComment type INPUT label Kommentar relations match VISIBLE when id lenkerfuehrerscheinKlassen value am 