Bumps lodash from to details summaryCommitssummary ddfd b Bump to v b fce Rebuild lodash and docs be d Bump to v a fe b Rebuild lodash and docs e Bump to v e Rebuild lodash and docs fd a Bump to v e d Rebuild lodash and docs d Update OpenJS references eac Fix minified build Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details General Information Improvement Feature Description What do you think about that idea Create app logic in C so it can be used both by desktopmobile and web browser For browser use emscriptenWASM Use asmdom in browser so we will get native htmlcss Use something similar to for desktopmobile so we will be able to render and use same htmlcss Add custom HTMLCSS tagsstyles etc to create something similar to AngularReactVue For browser use shadow dom or JS scripts or even some existing JS framework Become nextgen web framework after WASM GCDOM Integration Target all platforms browsers and even D appsgames General Information Improvement Feature Description It may be useful Highquality C HTML parser from cobaltfoo project CMake port of it can be found at and Some possible use cases Create something similar to gccx CPX JSX like syntax support We can use C template engine CXTPL and code generation to convert JSX into C see With cobaltfoo html parser create HTML parser with custom tagsJSX syntax With CXXCTP create code generation rule from JSX to HTMlCSS With CXTPL just combine C and HTMLCSS and pass any complex C variables to HTMLCSS without binding This PR aims to provide an easier setup for an asmdom C project removing the imports of extra js files This also means that we have to improve the internals action needed for Other kinds of fixes and perf improvements are also included in this release Hello we would like to feature your project to the Docusaurus users page Are you with me on this Also can you provide your logo More info about this here At the moment asmdom uses only one thread the main one to perform its work This is an experimental PR that aims to improve the performance by dividing the diffing algorithm and the DOM operations in two different threads This is now possible thanks to the support of WebAssembly threads in Chrome previously disabled due to a set of reasons involving spectre and meltdown So we can now use pthreads and emscripten We should firstly change our Makefile to setup the new compilation improve the test suite and runs it directly in the browser since we cannot mock Worker and SharedArrayBuffer in node After that we can develop the new core part and benchmark it to see if it is better than the existing one Here is a list of things that needs to be done update Makefile improve test suite implement a ProducerConsumer pattern test and update benchmarks update examples update documentation I found this after much googling for the possibility of making a website entirely with C and webassembly So far its quite impressive everything I have seen so far I would have done the same way I am trying understand it a bit more I am really interested in pushing to create a full C tooling to do production web apps hopefully being a complete alternative to react and node This project seems to be the only thing Ive seen so far that has taken seemingly a correct step in that direction So I am curious to almost like brainstorm on this Where do you see asmdom going Are you hopeful for comprehensive C web tooling Is such a thing plausible or ideal What missing components do you think are necessary This is potentially an idea for improvement Is there support for the web components standards template custom elements shadow DOM Use asmdom with the h function is a little bit verbose for this reason we have to develop a parser that allows us to write a JSX like syntax in C c include iostream include asmdomhpp int main VNode vnode span translated to VNode vnode asmdomhu span At the moment there is a work in progress command line interface cli called gccx However other ideas and implementations are welcome After that we have reached a good point we have to add a section to asmdom docs that links the right tool to do this If you are using asmdom please let us know who are you how its used and give us a feedback