We should add overloads like EnterBarrierAsync for all blocking methods And also would be nice to rewrite existing tests to use this APIs this may help with racy issues on CI Introduction Once will be merged we will need to improve metrics loading that is implemented in DefaultCollector The basic idea is to collect Current CPU load on the node in Current Memory usage in Using that information AdaptiveLoadBalancingRoutingLogic will calculate availability of each node and will perform smart routing Ideally we should collect more complete list CPU usage by current process CPU total usage on the node machine this will be used for routing Memory usage by current process in bytes Memory total usage on the node machine Memory available on the node machine this with previous one will give total utilization in What we have right now CPU There is no API available in netstandard to collect CPU metrics outofthebox like PerformanceCounters So what we are doing now is using ProcessTotalProcessorTime property to get time dedicated to current process Having total time elapsed we can give some estimation of CPU usage by current process But talking about CPU total usage this approach would require to get all processes info with ProcessGetProcesses which is very time consuming especially when we have to deal with access violation exceptions here when there are lots of processes So total CPU usage is just the same as current process CPU usage now This is more or less fine for routing based on NET process load but not ideal if there are some other heavy processes running on machine Memory Candidate list includes GCGetTotalMemory to get currently allocated managed memory size There is also GCGetGCMemoryInfo that will provide struct with TotalAvailableMemoryBytes property but this method is only available at netstandard and we are targeting PerformanceCouters which are working under Windows and there is Mono implementation There are some other Windowsonly ways to get metrics Process class which provides multiple memoryrelated properties Using PInvoke and working with native API Getting some shell commands output specific for OS Currently we are using the crossplatform sources available for netstandard the Process class First issue Same as for CPU this is quite heavy to get all processes information So current implementation treats MemoryUsage as current process usage which is useful but not ideal for nodes routing Second issue Another issue is understanding the term of used memory and getting available memory info To track unmanaged memory as well as managed ProcessPrivateMemorySize is used instead of GCGetTotalMemory It works well by itself But it is hard to know the upper limit for this value because it is not the allocated physical memory from RAM see documentation Getting available memory is much more tricky and I did not find anything available under NET Core sdk to get this value Ideally would be getting available size of installed physical memory or available part of it in cloud environment So far the ProcessVirtualMemorySize is used but is is just a number of bytes in virtual address space and does not correlate much with really available memory But still it is one of the upper bounds for available memory and can be used to get of memory load relative to other node In my understanding ideally would be loading Available MBytes PerformanceCounter but on all platforms to get available memory and get some way to load installed total available memory This two would allow to get Used Memory on the node and perform routing And provide all different Process properties in addition like WorkingSet PrivateMemorySize and others Maybe there is some other convenient approach The main idea here is that while current used available relation is ProcessPrivateMemorySize ProcessVirtualMemorySize it is always is range of and reflects the memory load So we can compare nodes based on this But value of does not guarantee that there is available memory on the node at all so need some more accurate values for nodes memory capacity calculation Akka Version Akka Component AkkaPersistenceSqlCommon AkkaPersistenceSQLServer Platform Linux Containers SQL generated by Akka for accessing the EventJournal and the SnapshotStore create parameters with different sizes This has an impact on SQL Server specifically but other backends may also be affected SQL Server Generates a query plan based upon the parameters passed so when they are different in size then another query plan is generated rather than using an existing plan In our production environment the insertupdate statement for SnapshotStore created different query plans in the plan cache This makes repeated execution of the statements more expensive as it must search the cache first before generating a new one should it not find a match The main difference between the plans was the the size of the Payload parameter varbinary field being passed The EventJournal queries have a similar problem The AddParameter method within the AkkaPersistenceSqlCommonSnapshotQueryExecutorcs and the AkkaPersistenceSqlCommonJournalQueryExecutorcs does not take a size field so it is using the size of the data passed which causes the problem for MS SQL Server it would be better to take a size field that would be set to the same size as the column However this could have a detrimental effect on implementations for other Databases that do not have query plan caches It looks like it would be possible to override the methods in the AkkaPersistenceSQLServer project but this would mean copying large amounts of code to change a small amount of code Does anyone else have an opinion on the best way to resolve this Im looking for some clarifications regarding contributing says AkkaNET is part of the NET Foundation but the project is not listed on Contributing to NET Foundation projects afaik requires signing a CLA There is but I cant find the followup for that issue PRs dont seem to have a bot for CLA signing Source files list the NET Foundation eg Copyright C NET Foundation does not mention NET Foundation Is the transition to a NET Foundation project an ongoing effort Do contributors need to sign a CLA Akka supports double wildcards in the actor deployment configuration This is documented here its missing in the current docs you can use doublewildcards in the last position to match all child actors and their children recursively someParent The relevant PR for this feature is See for current version of this file It would be great to have this available in AkkaNET too This will allow simplifying configuration from foo dispatcher bar foo dispatcher bar foo dispatcher bar to foo dispatcher bar Working on removing the AkkaConfiguration namespace and migrating everything to the standalone HOCON library in So this will be a binaryincompatible change that will likely require an recompilation of AkkaNET projects but the upshot is that HOCON can now be upgraded and extended independently of AkkaNET itself allowing for things such as MicrosoftExtensionsConfiguration integration without directly touching the ActorSystem or AkkaNET itself This PR will likely take a few iterations and some upgrades to the HOCON library itself This will close and maybe some other related issues The goal of this PR is to port AkkaClusterMetrics into AkkaNET Maybe this will span into several pull requests will see I will keep this in draft state until will have working specs for this that is once this will be ready for final reviewsmerge I will start from implementing the core functions and metric collectors and then will add adaptive load balancing routers AkkaNET beta It appears that enabling serializemessages on while using clustering breaks the actor system with the following error Looks like clustering has some difficulty correctly serializing its messages when turned on Here is a project which reproduces the error ERROR AM Thread akkaPubSubSystemsystemclustercore Swallowing exception during message send Cause NewtonsoftJsonJsonSerializationException Unable to find a constructor to use for type SystemCollectionsImmutableImmutableHashSet SystemType Path Tovalues line position at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewListJsonReader reader JsonArrayContract contract Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateListJsonReader reader Type objectType JsonContract contract JsonProperty member Object existingValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderReadMetadataPropertiesJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue Object newValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderResolvePropertyAndCreatorValuesJsonObjectContract contract JsonProperty containerProperty JsonReader reader Type objectType at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectUsingCreatorWithParametersJsonReader reader JsonObjectContract contract JsonProperty containerProperty ObjectConstructor creator String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewObjectJsonReader reader JsonObjectContract objectContract JsonProperty containerMember JsonProperty containerProperty String id Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderDeserializeJsonReader reader Type objectType Boolean checkAdditionalContent at NewtonsoftJsonJsonSerializerDeserializeInternalJsonReader reader Type objectType at NewtonsoftJsonJsonConvertDeserializeObjectString value Type type JsonSerializerSettings settings at AkkaSerializationNewtonSoftJsonSerializerFromBinaryByte bytes Type type at AkkaSerializationSerializationDeserializeByte bytes Int serializerId String manifest at AkkaActorActorCellSerializeAndDeserializePayloadObject obj at AkkaActorActorCellSerializeAndDeserializeEnvelope envelope at AkkaActorActorCellSendMessageEnvelope message DEBUG AM Thread akkaPubSubSystemsystemclusterEventBusListener Started AkkaClusterClusterReadViewEventBusListener ERROR AM Thread akkaPubSubSystemsystemclustercore Swallowing exception during message send Cause NewtonsoftJsonJsonSerializationException Unable to find a constructor to use for type SystemCollectionsImmutableImmutableHashSet SystemType Path Tovalues line position at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewListJsonReader reader JsonArrayContract contract Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateListJsonReader reader Type objectType JsonContract contract JsonProperty member Object existingValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderReadMetadataPropertiesJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue Object newValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderResolvePropertyAndCreatorValuesJsonObjectContract contract JsonProperty containerProperty JsonReader reader Type objectType at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectUsingCreatorWithParametersJsonReader reader JsonObjectContract contract JsonProperty containerProperty ObjectConstructor creator String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewObjectJsonReader reader JsonObjectContract objectContract JsonProperty containerMember JsonProperty containerProperty String id Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderDeserializeJsonReader reader Type objectType Boolean checkAdditionalContent at NewtonsoftJsonJsonSerializerDeserializeInternalJsonReader reader Type objectType at NewtonsoftJsonJsonConvertDeserializeObjectString value Type type JsonSerializerSettings settings at AkkaSerializationNewtonSoftJsonSerializerFromBinaryByte bytes Type type at AkkaSerializationSerializationDeserializeByte bytes Int serializerId String manifest at AkkaActorActorCellSerializeAndDeserializePayloadObject obj at AkkaActorActorCellSerializeAndDeserializeEnvelope envelope at AkkaActorActorCellSendMessageEnvelope message DEBUG AM Thread akkaPubSubSystemsystemremotewatcher Started AkkaClusterClusterRemoteWatcher DEBUG AM Thread EventStream subscribing akkaPubSubSystemsystemclustercoredaemon to channel AkkaRemoteQuarantinedEvent ERROR AM Thread akkaPubSubSystemsystemclustercore Swallowing exception during message send Cause NewtonsoftJsonJsonSerializationException Unable to find a constructor to use for type SystemCollectionsImmutableImmutableHashSet SystemType Path Tovalues line position at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewListJsonReader reader JsonArrayContract contract Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateListJsonReader reader Type objectType JsonContract contract JsonProperty member Object existingValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderReadMetadataPropertiesJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue Object newValue String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderResolvePropertyAndCreatorValuesJsonObjectContract contract JsonProperty containerProperty JsonReader reader Type objectType at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectUsingCreatorWithParametersJsonReader reader JsonObjectContract contract JsonProperty containerProperty ObjectConstructor creator String id at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateNewObjectJsonReader reader JsonObjectContract objectContract JsonProperty containerMember JsonProperty containerProperty String id Boolean createdFromNonDefaultCreator at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateObjectJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderCreateValueInternalJsonReader reader Type objectType JsonContract contract JsonProperty member JsonContainerContract containerContract JsonProperty containerMember Object existingValue at NewtonsoftJsonSerializationJsonSerializerInternalReaderDeserializeJsonReader reader Type objectType Boolean checkAdditionalContent at NewtonsoftJsonJsonSerializerDeserializeInternalJsonReader reader Type objectType at NewtonsoftJsonJsonConvertDeserializeObjectString value Type type JsonSerializerSettings settings at AkkaSerializationNewtonSoftJsonSerializerFromBinaryByte bytes Type type at AkkaSerializationSerializationDeserializeByte bytes Int serializerId String manifest at AkkaActorActorCellSerializeAndDeserializePayloadObject obj at AkkaActorActorCellSerializeAndDeserializeEnvelope envelope at AkkaActorActorCellSendMessageEnvelope message 