 Expected behavior FormattedNumber should be using the correct region when using currency style Current behavior FormattedNumber is using the default region when using currency style codesandboxio link to reproduce for BUG REPORT Thank you Thank you so much for filing this issue Please provide the detail about your problem When I am running unit tests with latest reactintl version The shallowWithIntl is throwing error TypeError ngetChildContext is not a function But they are working fine with reactintl version Before file an issue please verify it is a bug for reactintl not intljs polyfill and Unicode CLDR Fill in as much of the template below as you can If you leave out information we cant help you as well Expected behavior Please describe the behavior you expected The shallowWithIntl should not throw any error with latest reactintl version Current behavior Please describe what happens instead of your expected behavior When I am running unit tests with latest reactintl version The shallowWithIntl is throwing error TypeError ngetChildContext is not a function codesandboxio link to reproduce for BUG REPORT Please describe steps to reproduce this bug as minimally and precisely as possible include a codesandboxio link to repro this issue Your Environment Please describe your environment information Please describe your OS and browser information if your problem occurs on a specific OS or browser OS MAC Executable Version npm ls reactintl npm ls react npm version node version v OS Version macOS Sierra NAME VERSION For example macOS Sierra Windows Ubuntu Browser Version NAME VERSION For example Chrome Safari Firefox Hi Im maintaining a years old React project that uses reactintl and reactintltranslationsmanager to extract messages to be used on the IntlProvider The problem is that reactintltranslationsmanager is pretty unmantained and Im searching for a better solution I then found the new formatjscli tried it and it seems pretty fast to be honest But I dont know the common workflow of that maybe an official example could help the cli is lacking of the following features that translationsmanager has output the translations on multiple files one per locale the output is not really ready to be consumed by the IntlProvider that needs a Recordstring string to work there is no diffing mechanism in order to avoid accidental overwriting of the already filled translations messages Can someone explain me how should I structure the messages extraction mechanism Thanks in advance Chromium available IntlDisplayNames see see see sample code FormattedDisplayName typeregion valueUS United States intlformatDisplayNameUS type region United States Bumps serializetojs from to details summaryCommitssummary f b eac c fix now a bit saver d b chore better var naming d chore fix tests for node c a d d Merge pull request from commentholfixregexxss d d fix for ghsa fjq xj f f See full diff in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Thank you so much for filing this issue Please provide the detail about your problem Before file an issue please verify it is a bug for reactintl not intljs polyfill and Unicode CLDR Fill in as much of the template below as you can If you leave out information we cant help you as well Expected behavior I expect to import an ES Module and bundle it with WebpackRollupParcel without the need to transpile reactintl itself by Babel Im talking about the provided module field as definied by the spec below pkgmodule will point to a module that has ES module syntax but otherwise only syntax features that the target environments support Wait it just means import and export not other future JavaScript features Yes Babel allows you to disable just module syntax transpilation And Rollup Webpack etc can be configured to target a specific module syntax Rollup outputformat Webpack outputlibraryTarget Todo fix build for pkgmodule to support ES features of target environment including IE Please describe the behavior you expected Current behavior If I import ES Module of reactintl v I have to whitelist it to be transpiled by Babel for any bundlerloader The docs state that custom transpilation is needed This means you should configure your build toolchain to transpile those libraries Please describe what happens instead of your expected behavior Step to reproduce for BUG REPORT Please describe steps to reproduce this bug as minimally and precisely as possible For example minimum live example eg replit jsbincom minimum example code set of steps to reproduce Install webpack v install reactintl v open it in a browser which cant parse ESnext Your Environment Please describe your environment information Please describe your OS and browser information if your problem occurs on a specific OS or browser Executable Version npm ls reactintl V latest npm ls react npm version VERSION node version OS Version Windows VERSION For example macOS Sierra Windows Ubuntu Browser Version IE For example Chrome Safari Firefox Is your feature request related to a problem Please describe Reduce duplicate code Describe the solution youd like Includes many date time pattern in our designs Describe alternatives youve considered Packed instead of HOC Additional context NA As weve shipped v were looking to plan for whats coming The list below is purely for brainstorming will be updated when new feature requests come in New CLI The current babelpluginreactintl requires a build setup while extractingtranslating i n is becoming more standalone Weve also received a few requests for it We have released ICU Date Time Skeleton support ICU Skeleton is quite comprehensive Its very likely well be releasing a separate package and introduce plugins to intlmessageformat as this needs additional CLDR We can also try to propose new APIs to ECMA Now available in reactintl ICU Number Skeleton support Similar to Date Time Skeleton support Now available in reactintl ListFormat FormattedList This is stage and quite ready Now available in reactintl Separate out formatters Right now in order to use a single formatter you need to polyfill IntlPluralRules IntlRelativeTimeFormat and its data intlmessageformat especially will grow bigger as we try to match ICU This might become unsustainable cc pyrocat FEATURE REQUEST Right now reactintl adds a bunch of unneeded components for each usage bc withIntl adds a wrapper as well as a contextConsumer to the component stack The v prerelease is a good moment to bump the minimum react version up to and the library can make use of its own useIntl hook to flatten app component trees I think this is generally worth doing given how many reactintl components tend to get rendered in an app compared to others lots of messages This isnt automatically a performance concern for apps but it could be and is avoidable now weve already mostyl done this work in our fork and id be happy to upstream it if yall are open to it this would purely be an internal optimization no public api changes or lose of features