 en dumping If this is considered reasonable Ill be happy to make the corresponding changes to the formatting code as well Im currently writing a C emulator in Go and using spew to dump out the CPU state whenever I hit an instruction I havent implemented yet or read from write to a part of the address space that I havent emulated yet Currently Im translating the decimal output into hex so I can crossreference with documentation and the ROM disassembly manually but it occurred to me that a small change to the spew library could add the capability to automate this task simply by adding an option to always apply a hex format to every int I can make a PR for this idea but I wanted to first posit the idea in case either a its already possible and Im just too stupid to figure out how or b someone has a compelling reason why this functionality should not be implemented in this library Let me know what you think anyway For test usage the diff will already be included so theres no need to list the len This is pretty similar to except lengthonly and includes tests Hi Ive come across this issue that with the pointer method feature the address is updated to x Demonstration go package main import fmt githubcomdavecghgospewspew type myMap map int int func c myMap String string fmtPrintfpointer changed p n c for k range c fmtPrintlnk return custom string func main spewPrintfv n myMap It gives me go run maingo pointer changed x PANICruntime error invalid memory address or nil pointer dereferencemap With spewConfigDisablePointerMethods true the panic is gone Cant see where it would still be used Just a nitpicky typo fix Hi There is a fix for this panic Hello There is a fix for this issue spewDump output is often interrupted by other stdout And you have to do something like fmtPrintspewSdumpbody I do not see any drawback of this fix If somebody wants to use osStdout heshe can use spewFdump 