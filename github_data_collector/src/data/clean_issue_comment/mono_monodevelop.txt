For OnSetNextStatement convert exceptions into NotSupportedException so that higherlevel code properly handles this case For Stepping just drop log the exception like SoftDebuggerSession does Fixes tions When hovering the mouse cursor over most method invocation expressions the logic returns a null expression to evaluate thereby bypassing evaluation of said expression but when hovering over conditional method invocations the logic failed Since the logic is identical to VS Windows do what VS Windows does in this scenario as well which is to ignore evaluation errors and not show them Fixes This switches the aspx file editing to the old editor an and includes aspx ashx asmx ascx master asax cshtml html htm extensions Fixes Fixes Another possible fix could be moving dialogCloseDialog at the beginning of Create method Here is how this dialog looks like after clicking on Create button Fixes VSTS With this update Light Dark editor themes are updated to match Visual Studio with enhanced colors barring some bug fixes we need to make in the editor The existing Light Dark editor themes are renamed to Legacy Light and Legacy Dark The Visual Studio Light theme is removed now that Light contains the same colors THE FEATURE ITS IN PROGRESS PLEASE DO NOT MERGE This PR adds a new mechanism to create our own keyloop system to sync Gtk and Cocoa world focus chain xRCBhpk dk zXN k hSf Basically right now VS Mac is a Gtk application which recently added a way to include embeded native views based in a hacked gtkquarz window which it has this structure GtkQuarzWindow GtkQuarzView Embeded widgets ProppyPad ToolboxPad Source Editor Pad Under the hood this native views are overlapped on top of Gtk and synchronized with a Gtk view container host GtkNSViewHost In VS Mac is the Gtk application is who captures the keypress events and the CommandManager ensures if the selected view is a native view it tunnels the event to cocoa world making stop the escalation of the event in the Gtk or otherwise it continues the gtk event flow Actually we were doing this tunneling to cocoa in a incomplete way we were only calling to OnKeyDown from the focused view which it doesnt match the same behaviour as pressing a key in a cocoa application which also affects to the tab key navigation Keyloop mechanism and this the reason we were getting some unexpected behaviours in this case To try to fix this I checked a lot of documentation but it seems there are not much information about how this works under the hood or how replicate it and after a lot of tests didnt found any good way to do it more easily thats because I decided to rewrite current implementation to create our own mechanism to calculate this keyloop calculation The current cocoa view structure described above adds more complexity to our implementation first because all the native embeded views shares the same NSWindow GtkQuarzWindow and this means when the NextKeyView is not set in a native view the NSWindow autocalculates the next or previous element and this could be or the correct next view or the first GtkQuarzView or another view from another embeded view and thats because pressing tab in the old implementation press tab was giving us randomly unexpected wrong results Another problem we had was how connect the Gtk focus chain to Cocoa thats means we needed to handle cases when user press tab and next view is a GtkNSViewHost then calculate which is our first candidate for item focus and the same for pressing SHIFTTab focus last item from this embedded view And sorry about the hack but didnt found any idea about how do it in a better way living into a Gtk application Fixes A YXamarin DesignersProperty panekeyboard User is unable to navigate from property filter to the next controls inside property panel window Backport of cc sevoku netonjm when updating breakpoints Fixes Screenshot from Please fix the UI elements async Fixes 