We have an issue using kafkacat C b broker t topic o e and kafkacat C b broker t topic o e If we have just one message in the topic the first command kafkacat C b broker t topic o e doesnt show anything but the second command kafkacat C b broker t topic o e shows the event It seems that only show the events if we specifies the exact number of events in the topic All this issue is related to version I am trying to build the exact infra mentioned here Basically the article is specifically for scaling pods based on the reading the Stackdriver metricsstack drive receives traffic from the Kafka server and scaling happens based on it Everything is working fine until I create a producer deployment and it works fine as expected It is able to connect to the Kafka server but when I run the consumer deployment it is failing with the following error in the container logs Error bootstrap Connect to ipv failed Operation timed out after ms in state CONNECT screenshot I just have one GKE cluster with nodes one Kafka compute engine instance There is no special setup I am just following the above article I dont know what should I debug because producer is working but consumer is not If anyone can help that would be really appreciated Dear Developers I came across that asked to have X override b but I wonder if I have metadatabrokerlist property in configkafkacatconf or in KAFKACATCONFIG why is b still required Is it something fundamental or just doesnt work for me For reference my config look like echo KAFKACATCONFIG metadatabrokerlist cat configkafkacatconf bootstrapservers metadatabrokerlist Thanks in advance Hello everybody I am trying to consume a topic with avro serialization and i keep get this error ERROR Failed to format message in tpcalertesdc at offset AvroSchemaregistry message deserialization REST request failed code errorcode messageHTTP Not Found javaxwsrsNotFoundException HTTP Not Found njavaxwsrsNotFoundException HTTP Not Found n tat orgglassfishjerseyserverServerRuntime runServerRuntimejava terminating Im sure pretty sure my url is good since i get the schema when i try curl Anyone had this before Thank you kafkacat version and librdkafka Running kafkacat kafkacat P b X debugprotocolbrokertopicmsg X messagetimeoutms t test I am unable to trigger the messagetimeoutms value The log mesages I see when I produce a message are as follows fgh PRODUCErdkafkaproducer thrdkafkatestserver kafkatestserver test Produce MessageSet with messages bytes ApiVersion MsgVersion MsgId BaseSeq PIDInvalid uncompressed SENDrdkafkaproducer thrdkafkatestserver kafkatestserver Sent ProduceRequest v bytes CorrId RECVrdkafkaproducer thrdkafkatestserver kafkatestserver Received ProduceResponse v bytes CorrId rtt ms MSGSETrdkafkaproducer thrdkafkatestserver kafkatestserver test MessageSet with messages MsgId BaseSeq delivered Based on this I see the ProduceResponse is rtt ms so greater than the ms timeout so I would expect a Local Message timed out Im aware that the Producer timeout should be set on a per topic basis but through Kafkacat Im unaware of how I can configure this I have also tried adding the configurations to a configuration file and referenced it with F flag But the same outcome Overview Were seeing a strange issue related to DNS resolution with kafkacat running on macOS Mojave and Catalina possibly other versions too havent tried farther back kafkacat is reporting DNS name resolution failures when trying to resolve the advertised hostnames of Kafka brokers despite those DNS names resolving fine from the same host using other tools Heres an example of what this looks like broker hostnames and topic names have been scrubbed in this and future examples kafkacat C b kafkaaexamplecom t mytopic c e ERROR Local Host resolution failure kafkaxyzexamplecom Failed to resolve kafkaxyzexamplecom nodename nor servname provided or not known after ms in state CONNECT In this example kafkaaexamplecom is a seed DNS record CNAME pointing at some arbitrary broker in the cluster different from the one that hosts the topic were trying to consume from kafkaxyzexamplecom is an A record pointing at the broker with ID which is leading the sole partition for mytopic Its the name that broker is advertising in ZooKeeper From what I can tell this only happens on macOS Running the same exact command from the same host in a Docker container or Linux VM yields the expected results and no DNS resolution failure Resolving both hostnames works fine using dig nslookup locally on macOS The fact that kafkacat is able to even find kafkaxyzexamplecom suggests that it was able to resolve kafkaaexamplecom without issue Interestingly directly giving kafkaxyzexamplecom the advertised name of the lead broker to kafkacat like this also yields working results kafkacat C b kafkaxyzexamplecom t mytopic c e where kafkaxyzexamplecom is the advertised name of the lead broker for the sole partition of mytopic message content but if I use a topic that has leaders on more than one broker DNS lookups for all but the first leader the one specified with the b flag will fail in the same way Diagnosis It looks like librdkafka uses the native getaddrinfo to do DNS resolution so I tried tracing the calls to getaddrinfo to confirm that the args looked correct I used dtrace to do this and heres what I found output cleaned up a little bit sudo dtrace n pidtargetgetaddrinfoentry printf getaddrinfos s copyinstrarg copyinstrarg n pidtargetgetaddrinforeturn printf getaddrinfo returned d arg n pidtargetrdgetaddrinfoentry printfrdgetaddrinfonodesvcs defsvcs flags xx familyd socktyped protocold n copyinstrarg copyinstrarg arg arg arg arg n pidtargetrdgetaddrinforeturn printfrdgetaddrinfo returned d n arg c kafkacat C b kafkaaexamplecom t mytopic c e ERROR Local Host resolution failure kafkaxyzexamplecom Failed to resolve kafkaxyzexamplecom nodename nor servname provided or not known after ms in state CONNECT CPU ID FUNCTIONNAME rdgetaddrinfoentry rdgetaddrinfonodesvckafkaaexamplecom defsvc flags x family socktype protocol getaddrinfoentry getaddrinfokafkaaexamplecom getaddrinforeturn getaddrinfo returned rdgetaddrinforeturn rdgetaddrinfo returned rdgetaddrinfoentry rdgetaddrinfonodesvckafkaxyzexamplecom defsvc flags x family socktype protocol getaddrinfoentry getaddrinfokafkaxyzexamplecom getaddrinforeturn getaddrinfo returned rdgetaddrinforeturn rdgetaddrinfo returned Note that Im tracing both entry and exit from rdgetaddrinfo and getaddrinfo itself just because it makes it easier to get at the flags family socktype and protocol attributes which are otherwise tucked away inside the struct addrinfo arg to getaddrinfo Note that the first resolution attempt for kafkaaexamplecom works fine The second attempt for kafkaxyz fails with error code which is EAINONAME matching the error message Weirdly using the exact same getaddrinfo args from a standalone test program on the same system also works just fine Test program excuse my awful C include stdioh include systypesh include syssocketh include netdbh void resolvechar name printfresolving s n name char defsvc int family AFUNSPEC int socktype SOCKSTREAM int protocol int flags AIADDRCONFIG struct addrinfo ais struct addrinfo hints aifamily family aisocktype socktype aiprotocol protocol aiflags flags int r getaddrinfoname defsvc hints ais printfgot return code d n r int mainint argc char argv resolvekafkaaexamplecom resolvekafkaxyzexamplecom return Example output resolving kafkaaexamplecom got return code resolving kafkaxyzexamplecom got return code More Diagnosis Than You Probably Want I spent some time tracing through the getaddrinfo guts on macOS to try to figure out whats going on and found the RESDEBUG environment variable which you can set to trigger lots of debugging messages from the DNS resolver implementation on macOS Heres the log spew for the first resolution the one that works RESDEBUG kafkacat C b kafkaaexamplecom t mytopic c e mdnsaddrinfo node kafkaaexamplecom serv xj mdnssearch wait loop mdns query kafkaaexamplecom type class ifindex ctx x a mdns query kafkaaexamplecom type class ifindex ctx x a set kevent timeout ctx x a x a mdnssearch calling DNSServiceProcessResult mdnsquerycallback ctx x a flags x kDNSServiceFlagsMoreComing is set mdnshostentappendalias x a kafkaaexamplecom mdnshostentappendaddr x a x fbd aa b kafkaaexamplecom type class reply ctx x a mdnsquerycallback sending kevent wakeup mdnsquerycallback ctx x a flags x cleared kDNSServiceFlagsMoreComing flag for ctx x a kafkaaexamplecom type class error ctx x a mdnsquerycallback sending kevent wakeup DNSServiceProcessResult null mdns iscomplete type ctx x a clear more coming complete mdns iscomplete type ctx x a host addr count complete true mdns iscomplete type ctx x a complete ctx x a error completetrue type nsta gotaresponseGOTDATA ctx x a kafkaaexamplecom type class finished processing ctx x a mdns iscomplete type ctx x a clear more coming complete mdns iscomplete type ctx x a incomplete ctx x a error completefalse kafkaaexamplecom type class finished processing ctx x a kafkaaexamplecom type class done ctx x a x a finished mdnssearch loop ctx x a x a mdns iscomplete type ctx x a clear more coming complete mdns iscomplete type ctx x a host addr count complete true mdns iscomplete type ctx x a complete mdnssearch ctx x a complete mdns iscomplete type ctx x a clear more coming complete mdns iscomplete type ctx x a incomplete mdnssearch ctx x a incomplete mdnssearch overall complete mdnssearch exit res and heres what it shows for the second resoultion the one that fails mdnsaddrinfo node kafkaxyzexamplecom serv finished mdnssearch loop ctx x x mdnssearch overall incomplete mdnssearch exit res ERROR Local Host resolution failure kafkaxyzexamplecom Failed to resolve kafkaxyzexamplecom nodename nor servname provided or not known after ms in state CONNECT mdnsaddrinfo node kafkaxyzexamplecom serv finished mdnssearch loop ctx x x mdnssearch overall incomplete mdnssearch exit res Note that it jumps straight from the mdnsaddrinfo line to the finished line The code that generates these messages is here from what I can tell Based on some more poking around with dtrace it looks like the proximate cause of the early return on the second call to getaddrinfo is that the kevent call on line of the abovelinked mdnsmodulec returns a nonzero value consistently on my machine on the second getaddrinfo call As to why that happens or what it suggests about this bug Im pretty out of my depth Wild Speculation To be honest this smells more like a macOS bug in the implementation of getaddrinfo than a bug in kafkacat or librdkafka to me but I figured Id start here I just want this API to be exposed for any cases when you need to set offset for group manually If there are any already working examples it would be nice to see them kafkacat b kafkacpkafka C t testxyzdoesnotexist ERROR Topic testxyzdoesnotexist error Broker Leader not available That creates topic testxyzdoesnotexist which previously did not exist I wouldnt expect kafkacat to create topics when in consumer mode This is running the Docker image confluentinccpkafkacatlatest with kafkacat V kafkacat Apache Kafka producer and consumer tool Copyright c Magnus Edenhill Version debian JSON librdkafka builtinfeaturesgzipsnappysslsaslregexlz saslgssapisaslplainsaslscrampluginssasloauthbearer 