It makes sense to set this for the user if they havent provided it but the fact that someone has provided data as a string does not make the content type textplain I was attempting to use this library to test some Graphql endpoints and unfortunately cant do it because of this Hi great project question I see that theres a possibility to perform async requests my question is is there any plans for this library to support HTTP Or what is the current HTTP status with this library thanks When using a simple khttpget access on Ubuntu with OpenJDK you immediately get a massive warning telling you that WARNING An illegal reflective access operation has occurred WARNING Illegal reflective access by khttprequestsGenericRequest filehomezordidgradlecachesmodules files khttpkhttp c e d b c d aa c e e cfcc khttp jar to field javanetURLhost WARNING Please consider reporting this to the maintainers of khttprequestsGenericRequest WARNING Use illegalaccesswarn to enable warnings of further illegal reflective access operations WARNING All illegal access operations will be denied in a future release Can this be avoided andor fixed Thanks This proposal is about adding a data class FormDataval value Any val type String to khttp and accept it in data as MapString FormData When GenericRequest sees this combination it sets the ContentType header to multipartformdata boundarys and adds the right ContentType to every part in that multipart request body If there are some files to be added to the requests they can be added too but this will be optional Motivation On a previous project of mine we needed to integrate with a system that accepted JSON as long as we send it encoded with multipartformdata setting the respected headers Looking at GenericRequestkt there is almost a way to hack it with khttp by providing data as Map and a files handle that is empty the only thing missing is an ability to provide the ContentType for the parts in the Map of the data Currently I have created a workaround as described here but Id like to see this resolved in the library itself I am certain this needs a little bikeshedding and maybe there is a better idea of how to handle this out there therefore the proposal If there is a consensus on how to resolve this and needs some changes in the library I would also be happy to try providing a pull request Add a gradle dependency to the README file When use GET with body it will alway request as POST I found an issue with cookie extraction on our test environment img width altEvaluate src Upon further investigation we realised the issue has to do with the setcookie header and potentially other headers not being treated in a case insensitive manner I presume the culprit is here and it should be easy to patch happy to provide a PR if thats acceptable Sending a POSTrequest to a site which is then redirecting back to itself results in reposting the request This can result in an endless loop which eventually throws a StackOverflowException At least Redirects should overwrite the request method to GET Please read here Sending a POSTrequest to a site which is then redirecting back to itself results in reposting the request This can result in an endless loop which eventually throws a StackOverflowException At least Redirects should overwrite the request method to GET Please read here It seems like it is impossible to post any sort of XML content via khttppost On doing the following val response post url soapEndpoint headers mapOf AcceptEncoding to gzipdeflate ContentType to textxmlcharsetUTF data getSoapRequest I receive an error from the server saying ContentType cannot be textplain But if you look at my POST invocation above I explicitly set the ContentType to be textxml I suspected that my ContentType header was being overwritten somewhere by the khttp library I investigated into this and I landed up at the following lines of code within the khttprequestsGenericRequest class on line val DEFAULTDATAHEADERS mapOf ContentType to textplain And on line if json null thisdata data if data null mutableHeaders GenericRequestDEFAULTDATAHEADERS So it does seem like your ContentType header always ends up being overwritten in case youre posting XML content