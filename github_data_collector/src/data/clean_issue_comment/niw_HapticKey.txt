Hi I like the app and have been using it for quite some time now about or weeks and I just realised that a Volume control for the Sound Feedback option could be a great addition Thank you so much for the great app Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend I have a feeling that the vibration would feel really nice if every physical keyboard press triggers a vibration Also if we are able to choose the audio sound we can make our physical keys make interesting noises like old school type writer or high precision clickity clack keyboards While debugging the application on MacBook Pro there are reports that haptic feedback is weaker on MacBook Pro Need to investigate how it s weak and what solutions can be taken When updating the application using Check for updates menu by using Sparkle after updating the application binary system asks permission for Accessibility in Privacy settings again even if it s previously approved and the application appears in the list with a checkmark For shortterm solution to workaround this behavior toggle the checkmark and enable HapticKey again from the menu item Currently there are options to trigger haptic feedback All Taps on Touch Bar Esc and F F etc keys The first Isnt ideal as it means you get fedback when you tap the bar even if theres no button there The second Is quite limiting as appspecific Touch Bar buttons do not trigger the haptics Is it possible to add an option for Taps on any Touch Bar buttons This would trigger haptics whenever the user touches a button on the touch bar but not when they tap an empty area of the bar Add new delegate callback that can take CGEvent directly without converting to NSEvent Check if the event is for Touch Bar or not by using undocumented kCGEventFieldTouchContextID before converting NSEvent to reduce eventWithCGEvent call Every mouse event causes the EventTapCallback to be called which over time results in a constant CPU usage I did a basic time profile and found that the main culprit is calling NSEvent eventWithCGEventeventRef which seems extremely slow for something that I assumed would be tollfree There are a few things Im going to try to reduce CPU usage in the callback but I was wondering if you had a preferred approach img width altscreen shot at am src Since flashing screen is a little bit aggressive or confusing because it used for alerting in terms of Accessibility feature on macOS Possible solution could be Displaying a tapped key name in HUD style Shows a indicator around the mouse cursor or text cursor if exists img width altscreen shot at pm src Implements feature discussed in Splits macOS system sound into separate files for updown events Allows user to choose a different sound for updown events or none Customizable volume Live preview when changing sound selection or volume Allows user to addremove their own sound files in Finder The wcls etc listings arent there normally just the two defaults but I wanted to show how custom sound files would be displayed Localizable interface strings Questions And its very common comment in open source world though it would be really appreciate if you can use same coding format as the one used on master Can you elaborate what you mean by this comment Im sure there are other things that could be cleaned up like deleting the old system sound player but I wanted to open this PR for your feedback as I feel like its now feature complete I tried to leave edits to upstream as minimal as possible and keep all of the new functionality as selfcontained as possible