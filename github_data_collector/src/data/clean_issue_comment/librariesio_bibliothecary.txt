On PyPI packages sometimes include requirements in the installrequires section of the setupcfg file Examples from jaraco who is a Tidelift lifter It might be a good idea to fix this in one fell swoop along with How could we do better here Clojure has another manifest format file called depsedn details over here The file format is Extensible Data Notation and there looks like theres a ruby library we can use to read it Basic example deps hiccup mvnversion garden mvnversion Im one of the maintainers of Twine Like some other Python projects we manage many of our test dependencies via our toxini file and Id like the Librariesio page about twine to reflect those test dependencies I suggest bibliothecary follow up on the toxini TODOs mentioned in librariesiolibrariesio librariesiolibrarian and librariesiolibrarian I dont think I can make time to work on a PR for this within the next few weeks but could potentially pair on it at the PyCon sprints in May when obviously things in this file are in fact development dependencies AWS Chalice is a good example which also demonstrates another Python idiom people often use multiple suffixes to distinguish requirements files for various purposes docs dev tools etc should all be counted as development dependencies and likewise for the requirementstxt forms of these files I found this issue when investigating Hypothesis a testing library I maintain librariesio shows runtime and development dependent repositories and Id expect the opposite ratio Docs Example platformio envdefault nodemcuv You MUST inject these options into env section using commonenvdata see below commonenvdata buildflags D VERSION D DEBUG libdepsbuiltin SPI Wire libdepsexternal ArduinoJson envnodemcuv platform espressif framework arduino board nodemcuv Build options buildflags commonenvdatabuildflags DSSIDNAMEHELLO DSSIDPASWORDWORLD Library options libdeps commonenvdatalibdepsbuiltin commonenvdatalibdepsexternal PubSubClient OneWire Serial Monitor options monitorbaud Unit Testing options testignore testdesktop envbluepillf c platform ststm framework arduino board bluepillf c Build options buildflags commonenvdatabuildflags Library options libdeps commonlibdepsexternal Debug options debugtool custom debugserver JLinkGDBServer singlerun if SWD select USB port device STM F C Unit Testing options testignore testdesktop Details Example import ospaths template thisModuleFile string instantiationInfofullPaths truefilename when fileExiststhisModuleFileparentDir srcnimblepkgcommonnim In the git repository the Nimble sources are in a src directory import srcnimblepkgcommon else When the package is installed the src directory disappears import nimblepkgcommon Package version nimbleVersion author Dominik Picheta description Nim package manager license BSD bin nimble srcDir src Dependencies requires nim compilerhead when definednimdistros import distros if detectOsUbuntu foreignDep libssldev else foreignDep openssl task test Run the Nimble tester withDir tests exec nim c r tester Spec Manifest for listing homebrew packages as dependencies Example tap githubbootstrap brew postgresql restartservice true brew rbenv brew rubybuild brew nodenv brew nodebuild Source code Related to Add a docs folder with markdown instructions for adding support for a new package manager manifest file format