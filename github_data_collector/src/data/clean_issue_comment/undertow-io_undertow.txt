 lash Issue fl via could you please review Alternatively the redirect could be handled in but doing that would undo for requests to root context Implemented a new BlockingTimeoutHandler which can be configured with IO timeouts for blocking read and write operations This approach limits the time that may be spent in awaitReadable or awaitWritable to apply to only blocking operations without requiring invasive code change When build benchmarks module without jmhgeneratorannprocess dependency I got Exception in thread main javalangRuntimeException ERROR Unable to find the resource METAINFBenchmarkList at orgopenjdkjmhrunnerAbstractResourceReadergetReadersAbstractResourceReaderjava at orgopenjdkjmhrunnerBenchmarkListfindBenchmarkListjava at orgopenjdkjmhrunnerRunnerinternalRunRunnerjava at orgopenjdkjmhrunnerRunnerrunRunnerjava at orgopenjdkjmhMainmainMainjava This is fix request Hi stuartwdouglas fl via Please review and provide feedback on my first stab at resolving the UNDERTOW Some notes on the code The PR puts all matrix parameters in the path parameter collection and makes no difference between the two p matrix parameters in the following example somep v pathp v An alternative implementation could take into account the fact that these are really two separate parameters perhaps by using the canonical path as a namespace which would give the following two variable names somep somepathp The current PR does not include support for comma separated values I will add that shortly if you think this PR is going anywhere somep v v The resultgetRequestPath returns the canonical path without the matrix parameters and the resultgetRequestURI returns the URI including the matrix parameters Maybe the path should include the parameters as well Not sure whats best thoughts References Matrix URLs as first discussed by Tim Berners Lee Added two new UndertowOptions BLOCKINGREADTIMEOUT The amount of time in milliseconds a single blocking read operation may take before a timeout IOException is thrown Unlike OptionsREADTIMEOUT this only applies to blocking operations which can be helpful to prevent the worker pool from becoming saturated when clients stop responding BLOCKINGWRITETIMEOUT The amount of time in milliseconds a single blocking write operation may take before a timeout IOException is thrown Unlike OptionsWRITETIMEOUT this only applies to blocking operations which can be helpful to prevent the worker pool from becoming saturated when clients stop responding A version of xnioapi containing the fix for XNIO is required for these options to work correctly otherwise erronious timeouts may be reported when channelawaitReadableWritable returns spuriously This commit does not apply the write timeout to ChannelsflushBlocking invocations because that will require either a local utility class to support flushBlocking with a timeout or a backport of XNIO Hi I added a little more security to the Forwarded and ProxyPeerAddress handlers to allow only specific proxies by IP I hope this feature also will be useful for others Moved peer matching logic from IPAddressAccessControlHandler to PeerMatcher Added support for filtering Forwarded headers source peers 