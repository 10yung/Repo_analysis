Hi team The integration between this module and the PSScriptAnalyzer one is a great way of using one tool for multiple purposes and generating one common report for a solution While one does not expect to have full flexibility offered by all the external modules I think some of the basic functionality and flexibility of the external ones could be added to make the usage more robust and avoid workaroundshacks in using this module Expected Behavior It would be great if we would be able to specify the settings used for the PSScriptAnalyzer invocation as the support for it specifies While I am aware that one could resolve this by adding a file named PSScriptAnalyzerSettingspsd in the root of the project I believe that this limits the flexibility provided by that module not being able to use builtin presets or to have the settings file in a different location etc Current Behavior You are currently not able to enable or disable different rules which limits the accuracy and reliability of the generated report Possible Solution I believe we could either add an extra run parameter or a configuration in the settings file that allows you to specify the settings used by the PSScriptAnalyzer rules settings which would then be passed in that modules invocation If this is not provided it should use the current call using the implicit settings Context We have a project where we have set some custom rules for the PSScriptAnalyzer and those settings are not in the root folder rather a settingspsScriptAnalyzerpsd file a folder where we store different configurations for different environments and tools including PSCodeHealth When running the PSCodeHealth checker this uses the default set of rules thus flagging some errors and warnings which are disabled by our original settings Your Environment Module version used Operating System and PowerShell version Windows PowerShell Cheers and thanks for creating this tool Andrei Before submitting a bug report please ensure you Verified this bug is not already reported in an issue Can reproduce in a clean PowerShell session clean powershell NoProfile Describe the Problem Test Coverage is zeroes at the function level while using existing TestResult Steps To Reproduce Go to Click on Scroll down to Error or unexpected behavior Expected behavior A clear and concise description of what you expected to happen Screenshots If applicable add screenshots to help explain your problem Environment Operating system PowerShell version PSCodeHealth version Additional context How has this issue affected you What are you trying to accomplish Providing context helps us come up with a solution that is most useful and prioritize issues Provide a general summary of the issue in the Title above Having the NUnit Results would allow us to use this module to not only generate the HTML report but also the NUnit results we import back into Jenkins Adding a parameter like so InvokePSCodeHealth Path coveralls TestsPath coveralls HtmlReportPath envUSERPROFILE Desktop Reporthtml NUnitPath NUnitResultsxml Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work A NUnit Results file should be created in NUnitPath path Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior An nonstandard object is returned from InvokePSCodeHealth that cannot be easily exported to JSONXML to be used by other services Possible Solution Not obligatory but suggest a fixreason for the bug or ideas how to implement the addition or change In PSCodeHealthPSCodeHealthPrivateMetricsGetFunctionTestCoverageps Line Add a check for the NUnitPath if a path is provided then add OutputFile NUnitPath OutputFormat NUnitXml or Create a more extensive NUnit result file from all the metrics gathered from PCHealthCheck Could use PesterNUnitXmlPath to export just Pester so we dont think its the actual HealthCheck report Your Environment Include as many relevant details about the environment you experienced the bug in Module version used InvokePSCodeHealth throws MethodNotFound when a module that containst PowerShell classes is analyzed powershell Method invocation failed because MicrosoftWindowsPowerShellScriptAnalyzerGenericDiagnosticRecord does not contain a method named opAddition At C Program Files WindowsPowerShell Modules PSCodeHealth Private NewPSCodeHealthReportps char AllScriptAnalyzerResults FunctionHealthRecordScript CategoryInfo InvalidOperation opAdditionString RuntimeException FullyQualifiedErrorId MethodNotFound Environment Windows PowerShell running Windows When counting lines of code in a script or function Id argue that its most valuable to only consider significant lines of code It appears that GetFunctionLinesOfCode is already excluding comments from its total count but I think that blank lines should be excluded as well Have a look here to see this in practice If acceptable Ill submit a PR Not sure what Im doing wrong here but when I run InvokePSCodeHealth against any module I have created I get no results from any of the metrics other than number of files I created a simple test module called HealthModule powershell function GetSomething param Param function GetNothing param Param ExportModuleMember function And then ran I got the same result when running against a couple of production modules with many functions in a psm file This is module version on Windows running PowerShell In looking at your code I see you are relying on comment based help Id recommend using the Platyps module and create external help from a set of markdown documents You can copy and past much of your comment help into the intermediate markdown files and then generate an external xml help document This simplifies the code files In using v InvokePSCodehealth is detecting all functions but it treats them the same Theres nothing wrong with detecting all the functions but they should be identified as private or public ie exported module member That way if in an html report I see a private function with no help Im not concerned about that But I would hope that there are a few lines of comments that explain the function which shouldnt be considered a penalty on function length per our other issue In the PerFunction section added a column indicating if the function is exported or not That would be helpful I also have a question on how you determine what a proper function length is From your blog post I appreciate the notion that sometimes you need to refactor But sometimes a function is long by design For example in a function I tested I get lines of code But if you dont count commented lines or my lines of WriteVerbose or someone might use WriteDebug then Id get a line count of which your analyzer would report as better For that matter if dont count white space my function gets down to lines of actual code that does something I completely understand where you are going with this metric but Im trying to figure out how it is being determined and if that is the best way