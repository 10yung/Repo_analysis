Update the angular cli and rxjs libray Trying to build prod build for web but fails in runtime with following error Uncaught ReferenceError require is not defined at ObjectNLsH main a e e js at c runtimee a ac bea bd a js at Objecto AV main a e e js at c runtimee a ac bea bd a js at ModulezUnb main a e e js at c runtimee a ac bea bd a js at Object main a e e js at c runtimee a ac bea bd a js at t runtimee a ac bea bd a js at Arrayr as push runtimee a ac bea bd a js When I clone and build this repo as is it does run successfully I dont have any require statements in the project except for Conditional Imports in electron service Electron service is the same as this repos service except it has additional conditional require statements One key difference in the two projects if I search require in both dist folders there are no results in original repos build whereas in the project I am building shows result as NLsHfunctiontetexportsrequireelectron Do note I dont have any require statements apart from these if thisisElectron thispath windowrequirepath thisipcRenderer windowrequireelectronipcRenderer thiswebFrame windowrequireelectronwebFrame thisremote windowrequireelectronremote thisapp windowrequireelectronapp windowrequireelectronremoteapp thisfsj windowrequirefsjetpack thischildProcess windowrequirechildprocess thisfs windowrequirefs thisedge windowrequireelectronedgejs angularelectron Im trying to get the screen size on the renderer site I was hoping simply updating the ElectronService like below would do it but screen returns undefined Is this because screen is interpreted as the js window screen or some other reserved screen var How can I add the screen in this service import Injectable from angularcore import ipcRenderer webFrame remote screen from electron import as childProcess from childprocess import as fs from fs Injectable providedIn root export class ElectronService ipcRenderer typeof ipcRenderer webFrame typeof webFrame remote typeof remote screen typeof screen childProcess typeof childProcess fs typeof fs get isElectron boolean return window windowprocess windowprocesstype constructor Conditional imports if thisisElectron thisipcRenderer windowrequireelectronipcRenderer thiswebFrame windowrequireelectronwebFrame thisremote windowrequireelectronremote thisscreen windowrequireelectronscreen thischildProcess windowrequirechildprocess thisfs windowrequirefs I created a themescss file in src with variables bodybackgroundcolor white bodybackgroundimage urlassetsimagesbghexagrayflatpng bodybackgroundposition top left bodybackgroundrepeat repeat sidepanelbackgroundcolor white sidepanelbackgroundimage urlassetsimagesbghexaredflatpng sidepanelbackgroundposition top left sidepanelbackgroundrepeat repeat It works with npm start but once I run electron in prod I get an error file fileassetsimagesbghexagrayflatpng not found How do you make your CSS paths work in prod Hello I was writting a service to loadsave the user configuration in a file and I noticed a strange behavior The config file was read properly when force reloading the application CtrlShiftR but each time I launch the app for the first time npm start the configuration was empty I noticed that the callback of fsread was never hit just after npm start Here is a sample project to reproduce the problem angularelectron fs read problem I modified ElectronService to expose path so I could use pathsep created a basic ConfigService that reproduce the issue and did a test in the AppComponent that loads the config and after seconds verifies the content of the config and writes a new one if its empty The config service javascript import Injectable from angularcore import ElectronService from electronelectronservice Injectable providedIn root export class ConfigService private config any protected fileName string applicationconfigjson protected filePath string protected get filePath string if thisfilePath return thisfilePath const userDataPath thiselectronremoteappgetPathuserData thisfilePath userDataPaththiselectronpathsepthisfileName return thisfilePath constructor private electron ElectronService load consolelogloading config thiselectronfsreadFilethisfilePath encoding utf err data consolelogconfig loaded if err return consoleerrorerr if data return consolewarnapplication configuration file thisfilePath exists but is empty try thissetJSONparsedata catch ex consoleerroran exception occured while parsing configuration file thisfilePath ex setconfig any thisconfig config thissave get return thisconfig private save consolelogsaving config thiselectronfswriteFilethisfilePath JSONstringifythisconfig encoding utf flag w err consolelogconfig saved if err return consoleerrorerr The test procedure in AppComponent javascript configSvcload setTimeout const config configSvcget if config consolelogno config setting default configSvcset foo bar else consoleloggot config config When launching the app for the first time a config file with foobar should be created If you reload the app using the developer tools you should see the config loads properly But if you close the app and relaunch it using npm start youll notice the log config loading in the console but loaded config will never be displayed and a new mock config will be written An even stranger thing is that the Sync version of read doesnt seem to be affected by this behavior Replacing the config service by the following seem to work as expected javascript import Injectable from angularcore import ElectronService from electronelectronservice Injectable providedIn root export class ConfigService private config any protected fileName string applicationconfigjson protected filePath string protected get filePath string if thisfilePath return thisfilePath const userDataPath thiselectronremoteappgetPathuserData thisfilePath userDataPaththiselectronpathsepthisfileName return thisfilePath constructor private electron ElectronService load consolelogloading config try const configStr thiselectronfsreadFileSyncthisfilePath encoding utf consolelogconfig loaded if configStr thissetJSONparseconfigStr catch ex consoleerrorex setconfig any thisconfig config thissave get return thisconfig private save consolelogsaving config thiselectronfswriteFileSyncthisfilePath JSONstringifythisconfig encoding utf flag w consolelogconfig saved I cant really figure where the issue comes from Did I miss something or is it a but of some kind Thanks for your help best regards i always get in electron from isElectron the String renderer from windowprocesstype and in web the type undefined is think this return window windowprocess windowprocesstype should be this return window windowprocess windowprocesstype pr is incomming maybe i can write a test for this Adding favicon to the icon path inside the electron builder config resolves the issue where it tries to use a file that is not ment to be an app icon Eg a small Facebook icon inside the assets folder results in this error while building the app image dist facebook e a d b png must be at least x error Command failed with exit code const ret thisremoteglobalShortcutregisterControlAltT consolelogthiswebFrame thisremoteappfocus TypeScript I try to show the app on the top when I click the shortcutbut it failed I added sqlite native module with TypeORM to my project Here is my new angularwebpackjson file Custom angular webpack configuration const path requirepath moduleexports config options configtarget electronrenderer if optionscustomWebpackConfigtarget configtarget optionscustomWebpackConfigtarget else if optionsfileReplacements forlet fileReplacement of optionsfileReplacements if fileReplacementreplace srcenvironmentsenvironmentts continue let fileReplacementParts fileReplacement with split if dev prod test electronrenderer indexOffileReplacementParts configtarget fileReplacementParts break configexternals typeorm requiretypeorm sqlite requiresqlite reactnativesqlitestorage reactnativesqlitestorage configresolve alias typeorm pathresolvedirname nodemodulestypeormtypeormmodelshim return config I get this warning at compile time Electron Loading non contextaware native modules in the renderer process is deprecated and will stop working at some point in the future please see for more information Any clue on how to prevent this