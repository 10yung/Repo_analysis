 Uncaught in promise abort Build with s ASSERTIONS for more info Promisecatch async instantiateArrayBuffer Decoderjs anonymous Decoderjs Promisecatch async doNativeWasm Decoderjs anonymous Decoderjs getModule Decoderjs Decoder Decoderjs Player Playerjs anonymous testjs Hi all Probable a silly error here but I am getting this error right now with Broadway Playerjs Uncaught TypeError Cannot read property nowValue of undefined Heres my js code DOCTYPE html html head meta charsetutf script src script typetextjavascript srcPlayerjsscript script typetextjavascript srcDecoderjsscript script typetextjavascript srcYUVCanvasjsscript script typetextjavascript function windowWebSocket windowWebSocket windowMozWebSocket var websocket new WebSocketws dumbincrementprotocol const player new Player useWorker true workerFile Decoderjs documentbodyappendChildplayercanvas websocketonopen function h csscolor green websocketonerror function h csscolor red websocketbinaryType arraybuffer websocketaddEventListenermessagefunctionevent playerdecodenew Uint Arrayeventdata consolelogWebSocket message received event buttonclickfunctione epreventDefault websocketsendinputval inputval script head body h WebSockets testh form input typetext buttonSendbutton form divdiv body html Using Broadway JS over a LAN Ive been able to choose higher resolutions and qualitybitrate settings than would be recommended for a web application As such Ive ran into issues overflowing the DecoderstreamBuffer with huge frames Directly increasing MAXSTREAMBUFFERLENGTH in Decoderjs seems to correctly fix the overflow issue as such I was wondering if it would be possible to make it configurable rather than a hardcoded constant The change seems pretty trivial from my understanding of the source code could changing MAXSTREAMBUFFERLENGTH have any weird sideeffects elsewhere in the library Im also asking this because of the other issue Ive raised since its hard to tell as a new user of the library whether those could be related or not Just as with the other issue Id be willing to prepare and submit a PR especially if you can confirm the triviality of the change Hello Ive have a video that after decoding with Broadway JS sometimes results in correct frames sometimes results in a uniformly gray frame My process is Constrained Baseline level video encoded with ffmpeg libx v unpacked into a file per AnnexB specs and streamed through a websocket into a clientside Player object after having split the stream into NALUs Here are the command lines used with ffmpeg h encoding ffmpeg i input cv libx vf formatyuv p flags cgop coder vlc g scthreshold preset veryslow crf movflags faststartemptymoovisml tune fastdecode profilev baseline level outputmp Annex B extraction ffmpeg i outputmp cv copy bsf h mp toannexb outputh Stepping through the code trying to figure out what was going wrong and where Ive noticed that the heightwidth deduced by the Player are wrong the video is x and the Player detects x Most applications I have cant parse the raw Annex B stream but ffprobe can and detects the correct dimensions and both VLC and MediaInfo and ffprobe detect the correct dimensions in the mp file Here is the SPS packet in hex values Annex B start code included C E DC C C C C B E Parsing it by hand Ive gotten those values picwidthinmbsminus so framecropleftoffset framecroprightoffset SubWidthC because If we take framecropleftoffset into account we get the correct value SubWidthC framecropleftoffset framecroprightoffset It is also my possibly wrong understanding that this offset represents a single macroblock according to an SO reply I stumbled upon the macroblock width is SubWidthC and thus means the Decoder is working with the wrong picSizeInMbs and picWidthInMbs values for my video since after checking the source code those values seem to be assigned without checking framecroppingflag and the associated offsets So I have two questions Can this be the cause of my incorrectly decoded frames If that is the case how come some frames come out looking ok they might have errors I havent noticed though Id be interested in preparing and submitting a pull request to correctly factor in left and right offsets when calculating frame size however it is my understanding that the Decoders C code is a fork of an older Android library Should I still submit a patch to this project or should I rather look into submitting a PR to the original Android project and then notify you when you can update this projects fork Also honestly if we go forward with this Ill need assistance with testing on all supported videos and formats so as to make sure I dont introduce a regression just to fix it for my video Edit I think the only place that should require a change would be h bsdDecodeSeqParamSet in srch bsdseqparamsetc the crop flag and offset values seem to be correctly parsed there but just arent calculated back into picWidthInMbs and picHeightInMbs PS References used for SPS parsing and dimension calculations ITU H specs H getting frame height and width from SPS I used VideoTool on MacOS to generate a H file and it can be played by VLC I send each frames compressed H data which is consists of several NALUs to an web client and try to decode the frames by playerdecode but the player doesnt work and canvas stays black and doesnt show any picture I work with raw H instead of MP file thus I use Player directly Is that due to certain parameters for the encoder which is VideoTool in my scenario You can see the demo video isnt really finished because it was a fixed sample number Hey there Ive had a lot of success using your decoder but would love to keep up to date as any improvements are made I saw that an issue was created previously asking for the code to be published to npm Have you given it any more thought Would you be open to me making a pull request to add some tooling around publishing Pause the video playerpause Seek to a specific time playercurrentTime or playerseekTo Hello everyone I have a question just to undestand if what I would achieve have sense or not The idea is to open many broadway player per browser tab but using webGL after instances I receive some warnings from browser and next players crashes Could be reasonable to use one decoder or webGL context per n players Is it something feasible putting hands on broadway implementation Thanks in advance for help Hello mbebenita Could you please help to understand i tried to use the Broadway and it works good almost everywhere but for UCBrowser Android the user is applied your Broadway approach to live streaming and his build of the Broadway is playing there But when I use the vanilla Broadway the error is no native wasm support detected with the cause abortAssertion failed no binaryen method succeeded Build with s ASSERTIONS for more info But as I understand those version is using asmjs as it logs increasing TOTALMEMORY to X to be compliant with the asmjs spec for cases when no wasm available is it possible Can I achieve the same with the fresh version of vanilla Broadway