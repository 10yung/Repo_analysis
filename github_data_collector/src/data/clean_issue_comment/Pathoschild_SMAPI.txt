This is a workinprogress PR to implement performance counters A performance counter monitors the invocation time of events This allows us to Identify which mods cause lags or performance issues Analyze and optimize mod performance Examples To test this PR just compile and run it A few console commands to get started with pc sum Shows the summary help pc Shows the help read this pc has many subcommands pc help concepts Explains the concepts about performance counters collections and sources Performance The performance penalty is pretty low on my T its only ms ms ns per recorded performance counter which probably adds to an overhead of about ms per second While debugging this value might be higher TRACE SMAPI Logged events in ms avg ms event Memory Usage Each event record uses about bytes plus overhead and each PerformanceCounter instance is configured to keep records A Ring Buffer is used to store the structs so we shouldnt be hit by the garbage collector With roughly events from SMAPI and assuming the user has installed mods which would register each and every event the required memory usage without overhead would only be about MB On my SDV installation with about mods including SVE the performance counters use about MB of memory ToDo x Move the hardcoded performancecounter command to SMAPIModsConsoleCommands x Add a monitor command with a configurable threshold to log longrunning event handlers for debugging something like performancecounter monitor DisplayRendering x Refactor the code add documentation once the implementation class structure is stable x Add a performancecounter reset command to zero all performance counters x Make the API private and use InternalsVisibleTo to allow access from SMAPIModsConsoleCommands x Encapsulate the performance counter logic Optionals Monitor IAssetLoader and IAssetEditor Optimize the table view like light gray for values of ms as well as green and red for critical stuff Would be useful for timing critical events like DisplayRendering Consider adding mod pages to smapiio to show more info like GitHub licenses and persite versions SMAPI officially runs on Linux Mac and Windows see player guide I dont plan to port it to mobileconsoles myself but Im happy to provide any help needed if someone familiar with those wants to figure it out Current status platform status Linux fully supported Mac fully supported Windows fully supported Android most mods supported using MartyrPhers fork see downloads source code prototype by ZaneYork see source code last announcement blockers early experimentation by LeonBlade iOS no current plans that I know of PS no current plans that I know of PS Vita no current plans that I know of Switch no current plans that I know of Xbox One early experimentation by dittusch Extend the helperInput API to let mods register key bindings optionally with an ingame UI which lets the user change bindings Add a content API method which lists mods that loaded or edited an asset cs summaryGet a list of mods which loaded or edited the current version of a given assetsummary param nameassetNameThe asset name to checkparam public IEnumerableIModInfo GetModsWhichInterceptedAssetstring assetName Consider adding an event raised when the player collapses Split from Consider adding events raised when the player receives damage from an NPC or hitskills an NPC Split from Consider adding events for dialogue talked to NPC gifted NPC answered dialogue choice Split from Consider adding item events picked up consumed equipped dropped sold trashed boughtsold tool used Split from Consider adding crop events harvested died planted dayupdated Split from 