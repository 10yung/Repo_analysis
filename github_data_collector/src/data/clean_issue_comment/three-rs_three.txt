The Lambert and Phong shaders calculate lighting pervertex This results in poor lighting for meshes with low vertex density There really is no need for this on modern hardware Trying to use point lights with the PBR material results in incorrect lighting Looking at the shader it only makes use of the light direction which is only valid for directional lights As an exercise in evaluating the functionality of this library I tried adding a simple ZKey toggles WireframeShaded draw mode for the animrs example Cue two days of frustration banging into various why is this glitching followed by compiler says no problems Here are a bunch of things that could make this experience easier the next time someone new to this library tries to do this stuff There needs to be something like Inputkeypresseventkeycode Currently to handle a oneoff tap the key an action happens then dont repeat again until you hit the key again ie a toggle action doesnt randomly flicker as keypress keyrelease events are fired repeatedly you need to do something like while winupdate wininputhitthreeKEYESCAPE Handle zkey toggles material if wininputhitthreecontrolsKeyZ wininputkeyshitcontains threecontrolsKeyZ Toggle material now meshsetmaterial Instead of having to call both perhaps just having a single method that does both steps would suffice The standard Rust traits Copy PartialEq Debug need to be implemented on most types in this library If trying to create a demo app that depends on this library as an externseparate crate its currently impossible to store any of the types defined by this crate in a struct eg to wrap together all the viewport handling in a ViewportState object that has a single update method thats exposedcalled from the while windowupdate main event loop For example the following code fails to compile as rustc complains about PartialEq not being implemented for Orbit but you cannot implement PartialEq for that as its in a different crate struct ViewportState orbit threecontrolsOrbit fails with error about PartialEq other state variables youve defined eg wireframe vs solid state impl ViewportState fn update self input threeInput selforbitupdateinput Do other hotkey handling here eg zkey handler Add an Event Handling Example There needs to be an example in the examples folder showing how youd combine singlekeypress events eg for togglingtriggering particular oneoff actions not repeating stepping motions viewport controls eg Orbit FirstPerson andor the axis two separate keys for repeating actions along some scale Apologies if this is covered by an existing issue perhaps or but is there any plan to support rawwindowhandle Or otherwise easily initialize three to render to an existing window I tried to run cargo fmt but that didnt seem to work at all I think thats why almost every file was changed I saw your rustfmt so I figured it was configured the way you guys wanted it The files you should be looking at then are srcwindowrs srcguirs and examplesguirs I broke backwards compatibility because of the Window struct right now for all of the other examples youd have to do WindowguiNoBackendnew to make a new window Im not sure how youd want me to fix that whether youd want me to cfg out everything GUI related or maybe make what is now the window into GuiWindow and then typedef Window as GuiWindowNoBackend Either of these and several other things could preserve backwards compatibility but its up to you guys Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Thanks for all the hard work on this library Right now Im working on a small game and want to use custom shaders for post effects Because of and the documentation I got very basic one running basically a reimplementation of the basic material The only thing Im struggling with right now is defining my own uniforms and passing them to the custom shaders Is there a way to do this with basicpipeline and materialbasicCustom currently or would it be less of a hassle to fork three and modify renderermodrs Im not entirely sure but this might be a duplicate of if that is the case Ill close this issue and would love to chat over there Strange things happening Love three so far btw This is a conflicting proposal with Pros dogfooding wgpu while still relying on gfxhal all the platforms for free run on the Web Cons NONE Really excited to get to use this crate on some projects Do you think it would be possible to add the ability to export the rendered image as a PNG file with transparency This would involve rendering to an image rather than the screen This is useful for debugging screenshots and many other use cases I tried looking around in the documentation and in the issue tracker but couldnt see anywhere that indicated if this was possible or not If it needs to be implemented and you provide some instructions to help get this started I or someone else interested may be able to help out Thanks for such an excellent library Since three provides a way to load gltf files among other formats could it also be possible to saveexport objectsscenes to those formats as well I want to use three to make a program that can load models make specific types of edits and then save the entire scene as a gltf file