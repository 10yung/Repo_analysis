When executioncount does not exist the commands nbcat nbtail or nbhead throw an error So far this has fixed it for me and now those commands work again Related issue Hi I just installed and got this error trying nbcat Traceback most recent call last File Userschernyminiconda envspandasnlpbinnbcat line in module sysexitcat File Userschernyminiconda envspandasnlplibpython sitepackagesclickcorepy line in call return selfmainargs kwargs File Userschernyminiconda envspandasnlplibpython sitepackagesclickcorepy line in main rv selfinvokectx File Userschernyminiconda envspandasnlplibpython sitepackagesclickcorepy line in invoke return ctxinvokeselfcallback ctxparams File Userschernyminiconda envspandasnlplibpython sitepackagesclickcorepy line in invoke return callbackargs kwargs File Userschernyminiconda envspandasnlplibpython sitepackagesclickdecoratorspy line in newfunc return fgetcurrentcontext args kwargs File Userschernyminiconda envspandasnlplibpython sitepackagesnbcommandscatpy line in cat clickecho njoindisplaymergedcells File Userschernyminiconda envspandasnlplibpython sitepackagesnbcommandsterminalpy line in display cell executioncount if cell executioncount is not None else KeyError executioncount Any ideas Python nbcommands Which can contain basic help information Use the parse function from the ansimarkup package to render colored output instead of concatenating escape sequences from the colorama package En passant also used the MarkdownLexer to highlight markdown cells vinayakmehta thanks for handling so quickly I just upgraded nbcommands and I think I might have found one more edge case I hope you dont mind me reporting this here There are some code cells where we want to show the source of the function so we write funcname to show the full source or funcname to show just the signature docstring if I remember correctly This example I think also gave me an error this time being blackInvalidInput Cannot parse funcname I dug into the source and saw that you basically added a regex replacement is that right Would the correct thing to do here be the following I think the order has to be the double before the single python source resub source flagsreM source resub source flagsreM followed by blacksource resub blacksource flagsreM blacksource resub blacksource flagsreM B beforecontextNUM print NUM lines of leading context A aftercontextNUM print NUM lines of trailing context C contextNUM print NUM lines of output context Notebooks store metadata about the kernel and language We could reuse this metadata for syntax highlighting comments etc