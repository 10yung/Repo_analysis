Moving issue from as requested The remaining time estimate is a bit off Looking at the progress circle it looks like the remaining time should be pretty predictable as it seems like each percentage point takes roughly a constant amount of time to process I think perhaps the time estimate should be recalculated after each percentage point with the following formula numberofpercentagepointssofar timeelapsedsofar Ive timed it and converting a video took s for me over a s estimate nothing particularly off but for me the countdown seems to be counting down a little faster than it should Ive just tried converting a video with Gifski and at the point where the app said there were s left after about of the video had been processed already I started a stopwatch and when the app finished the stopwatch was at s Ive gotten a couple of requests for FPS We currently limit it to FPS I do realize it doesnt even usually make sense with FPS for GIF but their usecase is very short clips to upload to Thoughts AVAsset debug info Extension mp Video codec H avc Audio codec nil Duration s Dimension Frame rate File size MB Is readable true Is playable false Is exportable true Has protected content false Track Type Video Codec H avc Duration s Dimensions Natural size Frame rate Is playable false Is decodable false tinademomp zip This PR is attempt to Fixes Custom animator was added and used Unfortunately app crashes when you try to dismiss controller presented with present animator I assume this is because windowcontentViewController being replaced Issuehunt content details summary bIssueHunt Summaryb summary Referenced issues This pull request has been submitted to Use NSViewControllerpresent with custom animator IssueHunt has been backed by the following sponsors Become a sponsor details Issuehunt content I think previewing the gif in the same screen where I tweak the conversion settings is a superior user experience compared to going back and forth between the settingsview and the saveview Especially since there is already a video player present in the settingsview For example there could be a button kbdRender previewkbd or a toggle kbdOriginalkbd kbdPreviewkbd If you select kbdPreviewkbd the original video would be replaced with the gif and a progress indicator that would let me know whenever gifski is busy converting a new preview Tweaking the settings would start the preview conversion from scratch This would make it effortless to tweak the quality and framerate settings Another idea to speed up the preview process how about rendering just the first frame of the gif with the settings applied That should be plenty fast and you would get some perspective into what the final result will look like given the resolution and quality Maybe even let the user scrubselect frames and render them as needed The estimate could be displayed as a range eg MB MB This could be done simply by calculating estimate twice with different assumptions fudge factors Displaying it as a range would communicate to users that its not an actual expected file size and would communicate how imprecise the estimate is so they would be less surprised when its off Fixes When the estimateFileSize function is called it first cancels any ongoing estimations Then it runs the old estimate and show it in gray saying Estimated size Kb Then it starts to actually run the conversion of the Gif in the background and once its done it will save the gif in the gifdata variable for later use and shows the size in green saying File size Kb When pressing the Convert button it first checks if there is gifdata is set If so it will send it to the Conversion screen that will only have to save the data into a file so the conversion will complete almost instantly Issuehunt content details summary bIssueHunt Summaryb summary Referenced issues This pull request has been submitted to Improve file size estimate IssueHunt has been backed by the following sponsors Become a sponsor details Issuehunt content I think it is great to create GIF from a video clip However it will be even useful to create GIF using bunch of photos Say I clicked few photos of an animal in zoo without using Live Photos option then I can use these photos and create GIF and get similar effect Gifski macOS MacBookPro Provide your feedback here Include as many details as possible You can also email me at sindresorhusgmailcom Hello I am missing frames on the end of my gif when I export with gifski Example my gif is frames long when I export it from gifski it loops with only frames I can bring it into After Effects also and see how it is shorter than my original composition Gifski macOS iMac Currently gifski C API takes a callback function a context pointer From Swifts perspective this has to be a plain contextfree function and the context pointer is meaningless unsafe unretained That makes it awkward to use doesnt allow normal closures and is unsafe Can we do better I dont know whats Swift solution to the memory management problem here In the olden days of manual refcounting itd suffice to call an extra context retain before setting up the callbacks context and context release after finishing the operation Rusts approach to this is intoraw and fromraw that leak memory and unleak it later The second part of the problem is allowing normal closures instead of sneaking the context through an unsafe pointer Perhaps closures could be cast to an ObjC block Blocks can be represented as regular pointers The callback function could be just a small function that calls a block and the block would be passed through the context pointer Or can Swift box a closure into a container that can be sent as a single pointer It could work similar to blocks but with native Swift closure