This is not a bug but I thought it was bug and spent much time for this problem The Yarn Editor auto completes and and theres one white space after the linked node title I thought the whitespace will be trimmed so I wrote like this Yarn parser in Unity cannot find my first node because the parser tried to find first I thought it was fatal bug but it was just a silly mistake I dont think Yarn parser should autotrim the white space in node title but it should warn about that Its just adding one line code but I think it will be very useful Edit little spell change Small oversight When using the builtin wait command to wait some time before progressing in the current script the duration is parsed differently depending on your system locale On a German install of Windows a duration of is parsed as because the parser is localeaware and will not interpret a dot as a decimal separator It will only do so with a comma Can be fixed by altering the floatTryParse call in the HandleWaitCommand method in DialogueRunnercs This line if floatTryParsedurationString out var duration false Should be this if floatTryParsedurationString SystemGlobalizationNumberStylesAllowDecimalPoint SystemGlobalizationCultureInfoInvariantCulture out var duration false This will prevent the parser from parsing the duration string according to the current locale which will make it parse dots as decimal separators correctly But there might be a more elegant way Recently noticed a bug that makes some commands not run I have a Yarn script without dialogue that I use to set up a cutscene upon first visit of the scene title Start tags colorID position if not visitedl set visitedl to true createcutscene cutscene playcutscene cutscene endif The first of the two custom commands will spawn a prefab named cutscene that contains everything needed for the cutscene The second one will go to that newly spawned objects PlayableDirector for the Timelinebased cutscene and play it The second command is not executed Ive tracked it down to an error in DispatchCommandToGameObject in DialogueRunnercs At the end of the method the variable wasValidCommand is defined and not used when returning from the method The methodFound boolean to be returned is always returned as true which means that the call will not be passed on to my handler definition that is not in any Component on the target GameObject This code block var wasValidCommand numberOfMethodsFound if startedCoroutine Signal to the Dialogue that execution should wait return true DialogueHandlerExecutionTypePauseExecution else This wasnt a coroutine so no need to wait for it return true DialogueHandlerExecutionTypeContinueExecution Should be this var wasValidCommand numberOfMethodsFound if startedCoroutine Signal to the Dialogue that execution should wait return wasValidCommand DialogueHandlerExecutionTypePauseExecution else This wasnt a coroutine so no need to wait for it return wasValidCommand DialogueHandlerExecutionTypeContinueExecution Importing a yarn file in Unity with a header line without content causes a bug in the parser to break at syntactically valid instructions Examples are title Start tags colorID position parent Test or title Start tags colorID position parent A Test You can make comments with and the player wont see it Removing the parent line or adding content to it like parent Hello First of all thank you for making Yarn open source It is great software and I believe many game developers use it in their games I propose to change the coding style to follow C Coding Conventions and best practices in order to make the code easier to read and maintain for C developers In most cases it would be just fixing spacing moving opening brackets to the new lines and using var when declaring local variables Also why not use for in this case This is a very weird implementation I would be happy to contribute with updated YarnUnity part because I already updated it in my own project I made the issue instead of PR to get your feedback first Thank you Hello everyone Weve just pushed a new markdown document showing our road map for what we think the future of Yarn Spinner should be We really really want your feedback on that so please shout out any concerns issues or thoughts you might have here or in the Slack In a new build when I try to do the taglines command I get an IndexOutOfBounds error Indeed the line number each line gets is not based on the node but on the entire yarn file I based my tests on this yarn file taglinestestyarntxt The error happens in the LineAdder Script around this point var lines nodeInfobodySplitnew string r n n StringSplitOptionsNone ConsoleWriteLineNode lineValuenodeName ConsoleWriteLineGet line number lineValuelineNumber ConsoleWriteLineAll lines length linesLength Get the original line var existingLine lines lineValuelineNumber ConsoleWriteLineExisting Line linesLength Ive added ConsoleWriteLine for debugging purposes and get Node Node Get line number All lines length Existing Line is not printed since the out of bounds happens there Ability to save serialize and restore dialogue from some point before its end Im running the following command and getting the error The node null does not exist YarnSpinnerConsoleexe run d s Sally T sallyyarnlinescsv sally yarnyarnbytes Note Running node Sally Warning Yarn Error The node null does not exist Player Hey Sally Sally Oh Hi Sally You snuck up on me Sally Dont do that Warning Yarn Error The node null does not exist Warning Yarn Error The node null does not exist Options Anything exciting happen on your watch See you later The steps I took Run taglines on the script Run genstrings to create the CSV Compile the program Run the command above It works fine if I just run the script without precompiling it first It looks like the error happens on the condition lines such as if not visitedSallyWatch because it doesnt seem to find the node correctly When I try to use the taglines console command it says skipping file due to compilation errors To debug the problem I had to add stack trace logging to the console tool the given error message was not helpful The program fails when it encounters a custom function of mine I poked around the code a bit more and found this in Maincs Note that were passing in with a null library this means that all function checking will be disabled and missing funcs will not cause a compile error If a func IS missing at runtime THAT will throw an exception We do this because this tool has no idea about any of the custom functions that you might be using Dialogue d new Dialoguenull However the constructor for Dialogue looks like this public DialogueYarnVariableStorage continuity thiscontinuity continuity loader new Loader this library new Library libraryImportLibrary new StandardLibrary It seems like the library is set regardless of constructor input This causes GetFunction to fail during the parser step Im able to hack around this problem for the moment but Im not sure what the proper fix should look like