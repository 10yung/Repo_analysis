 This PR encapsulates Time service internals and documents the service and its API Overview This PR documents migrations and add tooling to test faulttolerance of migration scripts Discussion Is the approach for testing fault tolerance good enough It resulted in some changes in MerkleDB which are quite hacky IMO See Overview Please describe your changes here and list any open questions you might have This is for Exonum Team members only markdownlintdisable MD See markdownlintenable MD Definition of Done There are no TODOs left in the merged code Change is covered by automated tests Benchmark results are attached if applicable The coding guidelines are followed Public API has proper documentation Changelog is updated if needed in case of notable or breaking changes The continuous integration build passes coding guidelines This PR makes public items in core and its upstream dependencies actually merkledb only nonexhaustive Not all items were modified only these which may be extended in the future but anyway that was A LOT For details on nonexhaustive pattern see the corresponding RFC Later when we wont be tied to well be able to replace phantom fieldsvariants with nonexhaustive attribute This PR brings the following goods Rules on transaction persistence are now documented in the runtime module docs tldr you can update the tx logic but you should not put some transaction on the place from where other transaction was removed MethodRemoved variant was added to the CommonError enum it is recommended to always return it from removed methods interfacemethod attribute now supports removed parameter which removes method from the trait so users dont have to implement it and makes attempt to invoke this method return CommonErrorMethodRemoved Which goods arent brought Handy interface for making transactions deprecated It seems that there is no easy way to do it right now and since there is an alternative just write in the docs that method is deprecated and will be removed soon I decided that we can live without this feature in release Anyway if such a functionality will become musthave it shouldnt be a breaking change to introduce it later With this PR the following workflow may be used for updating transactions Create some interface with transactions Within next release fix a bug in method A Within next release write in the docs that method A is deprecated and will be removed in the next release Within next release mark method A as removed in interface and create method B to be used instead PROFIT Initial version for refined HTTP errors Added testendpoint in the explorer API and ServiceApiScopeendpointnew handler for testing If the current implementation is ok then we can replace all endpoints with it WIP Do we need to set a version of the artifact to the source field Should we set a deprecated warning header if we return an error from the deprecated endpoint How can we handle errors not from endpoint level ie if we failed to deserialize query Ive failed to find the place where such errors are converted to the response Dependabot cant resolve your Rust dependency files As a result Dependabot couldnt update your dependencies The error Dependabot encountered was error failed to parse manifest at homedependabotdependabotupdaterdependabottmpdirexonumCargotoml Caused by package exonum v rc homedependabotdependabotupdaterdependabottmpdirexonum specifies that it links to exonumprotobuf but does not have a custom build script If you think the above is an error on Dependabots side please dont hesitate to get in touch well do whatever we can to fix it View the update logs Running Ubuntu and have libprotoc installed Trying to install version and get the following build error paused by process didnt ext successfully in exonumtargetdebugbuildexonum a b c ddfebuildscriptbuild exit code stdout cargoprotosexonumsrcprotoschemaexonum stderr Blockchainproto Unrecognized syntax identifier proto This parser only recognizes proto Thread main panicked at protoc Custom kind Other error StringErrorprotoc protoc How to reconcile this build error 