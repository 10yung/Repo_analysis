DEBUGRESOLVER is used in RubyGems too So we cant enable it only for Bundler What was the enduser problem that led to this PR The problem was not the enduser problem Its a developer problem What was your diagnosis of the problem My diagnosis was RubyGems also uses DEBUGRESOLVER environment variable So we cant use DEBUGRESOLVER environment variable to enable debug mode only for Bundler We can use DEBUGRESOLVERTREE instead of DEBUGRESOLVER only for BundlerResolver But we cant do it for BundlerGemVersionPromoter What is your fix for the problem implemented in this PR My fix adds BUNDLER prefix to DEBUGRESOLVER and DEBUGRESOLVERTREE like other environment variables for Bundler such as BUNDLEREDITOR do Why did you choose this fix out of the possible options I chose this fix because adding prefix is a common way Bundlerd Molinillo and Thor also use this way such as MOLINILLODEBUG and THORSHELL Closes What was the enduser problem that led to this PR The problem was that ruby reached its end of life almost a year ago and we still support it What was your diagnosis of the problem My diagnosis was that we should drop support What is your fix for the problem implemented in this PR My fix is to drop support Why did you choose this fix out of the possible options I chose this fix because its part of our ruby support policy We should migrate our current TravisCI configuration to Github Actions so that we have a single CI system Id like to drop support for ruby maybe in the upcoming release maybe right after I want to make sure everything is good in ruby before the next release Hey I have an offline installation of ruby and required ruby gems where I ran into a problem I am preparing the installation on an online server and then copy all the gems to the offline production server I used bundle package all to create a vendorcache folder containing all the gems I need Unfortunately Bundler itself is missing I am adding Bundler gem to the Gemfile to force it but it did not work for me Is this a bug or is there a way forcing it to save bundler as well in the cache Example project Gemfile source gem bundler Command bundle update bundler Using bundler Warning the lockfile is being updated to Bundler after which you will be unable to return to Bundler Bundle updated bundle package Using bundler Bundle complete Gemfile dependency gem now installed Use bundle info gemname to see where a bundled gem is installed Updating files in vendorcache ls la vendorcache total I prefer if Bundler can help me maintain all ruby dependencies I realize I have to install it myself on the offline server to make bundle install work but I still prefer the simple maintenance of putting bundler into the gemfile What would be the best current option for me In the process of updating GitHub for I discovered that CodeClimate is still configured for bundlerbundler If someone sets up rubygemsbundler on CodeClimate Im not sure if theres a way to tell them a repo has moved or if you just need to set it up again I can update the link This PR is a reintroduction of now that I consider the multiplatform feature usable enough What was the enduser problem that led to this PR The problem was that currently if the gemfile include gems for specific platforms like the default gem tzinfodata platforms mingw mswin x mingw jruby Rails uses bundler will always print a noisy warning but I dont think users are doing anything wrong just running bundle install on it Also unless they run bundle lock addplatform x mingw x mswin x mingw java and commit the resulting lockfile they will continue to get the same warning over and over again What was your diagnosis of the problem My diagnosis is that the fact that some gems will be unused under some platforms is inherent to the multiplatform feature itself so we shouldnt warn about it because its expected Take the following Gemfile for example a simplification of the default Gemfile Rails generators create ruby source gem rails gem tzinfodata platforms jruby If I type that Gemfile it means that Im explicitly opting into the multiplatform feature So the behavior I would want as a user when I run bundle install on it is Resolve and lock the Gemfile for all platforms jruby and whatever platform Im running Install the resolution for the platform that Im currently running That way when the other developers of my team using jruby install the Gemfile they install a predictable deterministic resolution Currently the only way to get that behavior is to run bundle install bundle lock addplatform java But theres no way to do it without getting a warning on the first bundle install which annoys people because it makes you think youre doing something wrong If you only plan to use MRI you shouldnt specify any jrubyspecific gems in your Gemfile and write instead ruby source gem rails If on the other hand you only plan to use jruby then you should not specify any platform option at all and write ruby source gem rails gem tzinfodata So to sum up I think the range of platforms users expect to support can be guessed implicit from the Gemfile and the running platform So we should resolve by default for all those platforms and dont warn about behavior thats most likely expected What is your fix for the problem implemented in this PR My fix is to do the right thing by default and not warn users at all That is Resolve the gemfile and lock it for all platforms present in the Gemfile Install gems for the current platform if requested Why did you choose this fix out of the possible options I chose this fix because I think its better for our users We currently have a specific setting to avoid this warning which I guess we added given the complaints We no longer need that setting nor the warning so I removed both I have a Gemfile that specifically lists a Ruby version engine ie ruby ruby engine jruby engineversion I know this gem however works with nonJRuby and Id like to test it on MRI However when I execute bundle it gives me the error Your Ruby engine is ruby but your Gemfile specified jruby It would be great if theres a switch to control this If you are wondering then why are we specifying JRuby if I know it works on MRI Well we want to avoid people accidentally writing MRI specific gems that might use Cextensions also make sure we are testing each gem with the version of Ruby JRuby we use in our production environment What was the enduser problem that led to this PR The problem was that the current PR template sometimes asks too many questions and the answers are a bit artificial What was your diagnosis of the problem My diagnosis was that experience tell me that some questions are too much and a bit artificial to answer for many PRs What is your fix for the problem implemented in this PR My fix is to still let contributors know what kind of information we find valuable but dont force all questions to be answered