Copypasted from slack ts import React from react import ReactDOM from reactdom import Message from semanticuireact ReactDOMrender Message documentgetElementByIdroot json name fusetest version main indexjs license MIT scripts start tsnode T fuse dependencies fusebox alpha react reactdom semanticuireact tsnode tslib typescript Hey guys here is something to talk though many people were complaining that the output config is way too opinionated here is what I suggest ts Window exposure is a mechanism to expose certain path of the code to window A call will be applied to the bottom of the bundle eg window exposedVariableName FuseBoximportfuseBoxPath Where fuseBoxPath should look like packagemodulePath For example of an exposed config for project path would look like exposedVariableName foobar fuseBoxPath defaultfoomodulets export interface IOutputWindowExposure exposedVariableName string fuseBoxPath string export interface IOutputBundleConfigAdvanced bundle string windowExposure IOutputWindowExposure target bundle name could be a string or an advanced configuration with target and exposed objects export type IOutputBundleConfig string IOutputBundleConfigAdvanced export interface IOutputConfig Root is essential when making custom configuration Thats how we determine relative paths for webIndex indexhtml root string Isolated API works only for one bundle output eg app targetbuildjs And would mean that FuseBox will make an inclosed environment where the API will have access to the outside world window This is usually the case when making WebWorker bundles browser builds for libraries isolatedApi boolean You can customise how development bundles look like Hashes are not available for development Possible variations For one bundle app appjs app appjs windowExposure fuseBoxPath defaultfoo exposedVariableName foobar For two bundles app appjs vendor vendorjs devBundles app IOutputBundleConfig vendor IOutputBundleConfig The same as development and will be copied here unless the field is specified Hashes are supported app apphashjs vendor vendornamejs In addition you can do custom mapping to create additional bundles mapping matching moment target vendormomenthashhs Or with mapping and exposure mapping matching moment target bundle vendormomenthashjs windowExposure fuseBoxPath momentindex exposedVariableName moment prodBundles app IOutputBundleConfig vendor IOutputBundleConfig mapping Array matching string target IOutputBundleConfig cssSplitting boolean So here is an example for a very custom output ts root dist devBundles app appjs vendor vendorjs prodBundles app apphashjs vendor vendorhashjs mapping matching moment target vendorhashmomentjs matching react target bundle vendorhashreactjs that would mean that it wont have access to FuseBox scope and can be reused across projects the only thing you need to do is to shim and avoid bundling it again isolatedApi true windowExposure fuseBoxPath reactindex exposedVariableName React Let me know what you think So what you can do Let go and dont bother FuseBox will preconfigure everything Customise every single bundle No hashes will be appended if not requred Customise exposed variables per bundle Create custom bundles with desired contents and expose those Ive had cache bugs more than a few times Just noticed a new one today I think it would make sense for caching to be cleared between fuse runs unless specified Something like cache true cache enabled true clearOnFuseStart true This would make it so the traditional method of turn it off then back on again would solve any corrupt cache issues It would still give users the option to not clear cache on fuse start if thats what they prefer Im trying to use pluginReplace to change some paths that differ between my dev and prod setups pluginReplace does not seem to be working for scsscss though I know there was an issue with this recently Maybe something similar is happening pluginReplacescss url HERE url url what Im actually trying to do This is the first thing I tried but its a bit of an eyesore const ISDEV true const fuse fusebox plugins ISDEV undefined pluginReplace rootpath devrootpath if ISDEV fuserunDev else fuserunProd Heres my favorite so far const BUILDTYPE prod dev dev const config IPublicConfig entry srcindexts target browser if BUILDTYPE dev configdevServer httpServer port configplugins configplugins concat pluginReplace rootpath fuseboxconfigrunDev else if BUILDTYPE prod fuseboxconfigrunProd What is everyone else is doing Im migrating from v to v The app works fine on the first load but when I edit a file and HMR kicks in the app breaks I have a working dummy project up and running for v where HMR does work Ive been comparing that one to my production app but cannot figure out what makes the latter break on HMR I hope somebody here can point me somewhere Ive included the errors reported by fusebox and chrome below Fusebox provides the following error trace node UnhandledPromiseRejectionWarning TypeError this nodeargumenttype is not a function at ObjectReturnStatement Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectBlockStatement Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectMethodDefinition Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectBlockStatement Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectClassDeclaration Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectProgram Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at Objectgenerate Userssvdevmyprojectwebsitenodemodulesastringdistastringjs at ObjectfastTransform UserssvdevmyprojectwebsitenodemodulesfuseboxtransformfastTransformfastTransformjs at Userssvdevmyprojectwebsitenodemodulesfuseboxpluginscorepluginjsjs at Userssvdevmyprojectwebsitenodemodulesfuseboxinterceptorinterceptorjs at Arraymap anonymous at Objectsync Userssvdevmyprojectwebsitenodemodulesfuseboxinterceptorinterceptorjs at ObjectbundleResolveModule Userssvdevmyprojectwebsitenodemodulesfuseboxmainprocesspluginsjs at fasterThanLight UserssvdevmyprojectwebsitenodemodulesfuseboxFTLFasterThanLightReloadjs at UserssvdevmyprojectwebsitenodemodulesfuseboxFTLFasterThanLightReloadjs at Userssvdevmyprojectwebsitenodemodulesfuseboxinterceptorinterceptorjs node UnhandledPromiseRejectionWarning Unhandled promise rejection This error originated either by throwing inside of an async function without a catch block or by rejecting a promise which was not handled with catch rejection id node DEP DeprecationWarning Unhandled promise rejections are deprecated In the future promise rejections that are not handled will terminate the Nodejs process with a nonzero exit code In chrome I get the error Uncaught SyntaxError Cannot use import statement outside a module at new Function anonymous at e devjs at ArrayforEach anonymous at EventEmitteranonymous e devjs at EventEmitteremit e vendorjs at WebSocketclientonmessage e devjs The fact that tsconfigjson is a somewhat core part of fuse configuration is very easy to miss Ive added it to the docs as best I can but I forsee it still being an issue Any ideas on how to make this more obvious Im thinking it might make sense to have this information displayed when running fuse eg FuseBox next Mode development Entry MyProjectsrcindexts Import Paths MyProjecttsconfigjson this bit Cache pathtocache FTL reload enabled though this could very easily be overlooked as well PIXIjs has its own Buffer class and fusebox is importing its own Buffer polyfill class instead of the PIXI one I am quite sure the problem is somewhere in the fastAstAnalysis file just from looking at these lines I tried to fix the issue myself but not even removing the buffer and Buffer strings from being polyfilled worked Code snippets of the generated vendor files I left some comments in the snippets Snippet from dev vendor file js FuseBoxpkgpixicore functionscope scopefilelibcoreesjs functionexports require module var process requireprocess var buffer requirebufferBuffer should not be imported const req requirepixirunner const req requirepixiutils const req requirepixiconstants const req requirepixisettings const req requirepixiticker const req requirepiximath const req requirepixidisplay var UID var Buffer function Bufferdata static index PIXIs Buffer if static void static true if index void index false thisdata data new Float Array thisglBuffers thisupdateID thisindex index thisstatic static thisid UID thisdisposeRunner new req RunnerdisposeBuffer Bufferprototypeupdate function updatedata thisdata data thisdata thisupdateID Bufferprototypedispose function dispose thisdisposeRunnerrunthis false Bufferprototypedestroy function destroy thisdispose thisdata null Bufferfrom function fromdata if data instanceof Array data new Float Arraydata return new Bufferdata var byteSizeMap var UID var map Float Array Float Array Uint Array Uint Array Int Array Int Array Uint Array Uint Array Uint Array Uint Array var Geometry function Geometrybuffers attributes if buffers void buffers if attributes void attributes thisbuffers buffers thisindexBuffer null thisattributes attributes thisglVertexArrayObjects thisid UID thisinstanced false thisinstanceCount thisdisposeRunner new req RunnerdisposeGeometry thisrefCount GeometryprototypeaddAttribute function addAttributeid buffer size normalized type stride start instance if normalized void normalized false if instance void instance false if buffer throw new ErrorYou must pass a buffer when creating an attribute if bufferdata if buffer instanceof Array buffer new Float Arraybuffer buffer new Bufferbuffer PIXIs Buffer being used var ids idsplit if idslength for var i i idslength i thisaddAttributeids i buffer size normalized type return this var bufferIndex thisbuffersindexOfbuffer if bufferIndex thisbufferspushbuffer bufferIndex thisbufferslength thisattributes id new AttributebufferIndex size normalized type stride start instance thisinstanced thisinstanced instance return this Snippet from prod vendor file js pixicorelibcoreesjs fsxf module exports use strict ObjectdefinePropertyexports esModule value true const buffer fsxr is the Buffer polyfill exportsBuffer buffer Buffer no idea why its being exported here const runner fsxr const utils fsxr const constants fsxr const settings fsxr const ticker fsxr const math fsxr const display fsxr var UID var Buffer function Bufferdata static index PIXIs Buffer if static void static true if index void index false thisdata data new Float Array thisglBuffers thisupdateID thisindex index thisstatic static thisid UID thisdisposeRunner new runner RunnerdisposeBuffer exportsBuffer buffer Buffer wrong Buffer class being exported these methods are a mess changing the prototype methods of the Buffer polyfill buffer Bufferprototypeupdate function updatedata thisdata data thisdata thisupdateID buffer Bufferprototypedispose function dispose thisdisposeRunnerrunthis false buffer Bufferprototypedestroy function destroy thisdispose thisdata null buffer Bufferfrom function fromdata if data instanceof Array data new Float Arraydata return new buffer Bufferdata var byteSizeMap var UID var map Float Array Float Array Uint Array Uint Array Int Array Int Array Uint Array Uint Array Uint Array Uint Array var Geometry function Geometrybuffers attributes if buffers void buffers if attributes void attributes thisbuffers buffers thisindexBuffer null thisattributes attributes thisglVertexArrayObjects thisid UID thisinstanced false thisinstanceCount thisdisposeRunner new runner RunnerdisposeGeometry thisrefCount exportsGeometry Geometry GeometryprototypeaddAttribute function addAttributeid buffer size normalized type stride start instance if normalized void normalized false if instance void instance false if buffer throw new ErrorYou must pass a buffer when creating an attribute if bufferdata if buffer instanceof Array buffer new Float Arraybuffer buffer new buffer Bufferbuffer wrong Buffer class being used var ids idsplit if idslength for var i i idslength i thisaddAttributeids i buffer size normalized type return this var bufferIndex thisbuffersindexOfbuffer if bufferIndex thisbufferspushbuffer bufferIndex thisbufferslength thisattributes id new AttributebufferIndex size normalized type stride start instance thisinstanced thisinstanced instance return this Code section Current error TypeError path must be absolute or specify root to ressendFile at ServerResponsesendFile UserssephCodeChooseHealthinstridestorefrontnodemodulesexpresslibresponsejs at appuse UserssephCodeChooseHealthinstridestorefrontnodemodulesfuseboxdevserverdevServerjs Suggestion Putting a trycatch around these lines and outputting the error as well as the absolute path that was attempted Would make it a lot easier to tell whats wrong with the current supplied path 