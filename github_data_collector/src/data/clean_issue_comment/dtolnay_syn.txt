Minimal example rust use synLitInt use procmacro Span fn main LitIntnew Spancallsite cargo run backtrace text thread main panicked at internal error entered unreachable code homejhprattcargoregistrysrcgithubcom ecc db ec syn srclitrs stack backtrace backtracebacktracelibunwindtrace at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs backtracebacktracetraceunsynchronized at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs stdsyscommonbacktraceprintfmt at srclibstdsyscommonbacktracers stdsyscommonbacktraceprintDisplayBacktrace as corefmtDisplayfmt at srclibstdsyscommonbacktracers corefmtwrite at srclibcorefmtmodrs stdioWritewritefmt at srclibstdiomodrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingbeginpanic at rustc de d fbcc c f cd bc srclibstdpanickingrs synlitvaluetoliteral at homejhprattcargoregistrysrcgithubcom ecc db ec syn srclitrs synlitLitIntnew at homejhprattcargoregistrysrcgithubcom ecc db ec syn srclitrs tmpmain at srcmainrs stdrtlangstartclosure at rustc de d fbcc c f cd bc srclibstdrtrs stdrtlangstartinternalclosure at srclibstdrtrs stdpanickingtrydocall at srclibstdpanickingrs rustmaybecatchpanic at srclibpanicunwindlibrs stdpanickingtry at srclibstdpanickingrs stdpaniccatchunwind at srclibstdpanicrs stdrtlangstartinternal at srclibstdrtrs stdrtlangstart at rustc de d fbcc c f cd bc srclibstdrtrs main libcstartmain start Versions syn procmacro After taking a quick look at litrs it looks like this should work At the minimum it definitely shouldnt reach an unreachable declaration I ran into this in realworld code so its certainly not unheard of to want to do something like this This function is quite usefult for patching error messages like rust let res Visibility synparsestrmaperre the current span is callsite but we have the more fitting place to point to esetspansome e This snippet of code from dtoa fails parsing with syn rust pub trait Floating fn writeW ioWriteself W ioResultusize Giving the error Errorexpected This is valid code in edition edition has made it a hard error heres a playground which compiles successfully with the code and shows the error from syn I have also locally tested defining an identity procmacroattribute which attempts to parse whatever its applied to as an synItem That also fails with the same error message We can get complete AST with full feature for Rust code it contains below fields Is there any way to exclude some of the items from the list ex exclude externCrate Use etc pub enum Item ExternCrateItemExternCrate UseItemUse StaticItemStatic ConstItemConst FnItemFn ModItemMod ForeignModItemForeignMod TypeItemType ExistentialItemExistential StructItemStruct EnumItemEnum UnionItemUnion TraitItemTrait TraitAliasItemTraitAlias ImplItemImpl MacroItemMacro Macro ItemMacro VerbatimItemVerbatim Thanks I ran into a case today where this would have been useful as a wrapper around In I want to get inner span of string literal For eg for this deriveDefaults def FooA enum Foo Ausize B I want to get span of FooA but I get span of FooA instead Is there a way to get the inner span Like what Tokio does This turns into a blue cfg banner that is nicer than our current notes about bbThis type is available if Syn is built with the full featurebb doccfg The link to TokenStream in is broken This is the link Not sure if this is a bug or just me Im using syn version I have tried this multiple ways using synparse on a quote co Co also fails rust let arg parsestrPatco CoexpectPat parse failed Co then push it into the input VecPunctuatedPat Comma for adding an argument to rust let hello async coyieldhelloawait in order to get it to compile without giving me unknown token error I have to destructure a FnArg rust let arg match parsestrFnArgco Co OkFnArgTypedx x panicstring Pat parse failed Co punctpushPatTypearg Im trying to parse a macro call along the lines of foo inside an ItemFn When looking at Stmt I initially guessed this would be an expression and I found the Macro expression type However it turned out to be an Item of type Macro instead As far as I can tell macros can be used either way How does syn decide which to use Should the documentation for Stmt for example talk about this a little bit