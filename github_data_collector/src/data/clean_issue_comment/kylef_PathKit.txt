Hello Thank you for PathKit In this pull request I replaced all internal var with let because all such properties are not mutable To fix compile errors I added new init functions Thanks for useful library While investigating performance problem I found this library converts SwiftString into NSString and its very high cost operation Why this library uses NSString instead of implementing its own logic I added a method which computes the relative path which goes between two paths I added this downstream to yonaskolbXcodeGen but since it seems generally useful I figured Id try to add it back to PathKit This is similar to Pathnamerelativepathfrom in the ruby stdlib and PurePathrelativeto in python Let me know if this is something youd be interested in adding and if theres anything I can do to help Declaration swift Returns the relative path necessary to go from base to self Both paths must be absolute or relative paths throws Throws an error when the path types do not match or when base has so many parent path components that it refers to an unknown parent directory public func relativePathfrom base Path throws Path Examples swift PathabrelativePathfrom Pathac Pathb PathabcdrelativePathfrom Pathab Pathcd PathabrelativePathfrom Pathb Path Changes to normalize One would expect that a path like ab could normalize to b Foundations standardizingPath method only removes redundant parent directory references if the path is absolute so ab normalizes to b but the former case doesnt normalize at all I realized that PathKit already has logic to remove redundant s in its operator so I added a case to normalize that adds up all the path components if the path is relative Itd be awesome if you could support a recursive glob eg somepathswift which would match arbitrary nesting Thanks for PathKit love it I am not interested in maintaining this project anymore I think the problems that I was trying to solve in PathKit should just be solved in the standard library for Swift Often enough I think you might just be better off when avoiding the complexity of introducing a dependency for such convience when you can use FileManager from Foundation If anyone is actively using PathKit or wants to maintain it then please let me know in these comments tldr This is the current support status There are tests being skipped Here here here and here There are tests not being compiled here and here Why is that What is missing How can I help Also maybe what we should have for the tests that are not being compiled is a skip like for the other That way at least they are being visibly skipped Context I am using macOS High Sierra v Using with framework xcproj What So there is this path to an xcodeproj valid I checked and xcproj uses the glob function to find the projectpbxproj in it let pbxprojPaths pathglobpbxproj This only returns one path good with the url being bad I just added Carthage support to PathKit I think the following joining behavior is unnatural let path Pathusrbin Pathswift becomes swift instead of usrbinswift Implemented here I think it is common to build paths with left hand side not ending with and right handing side starting with Hi nice framework its the best replacement for NSURL in Swift Ive seen Have you considered splitting Path into DirectoryPath and FilePath Path has a lot of methods which are only valid for either directories or files but not both By separating the functionality into types we can catch more bugs at compile time Then we could turn Path into a protocol for the functionality that is common to both directories and files 