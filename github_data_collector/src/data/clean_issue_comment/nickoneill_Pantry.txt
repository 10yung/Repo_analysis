This PR enables Pantry to read its legacy storage format plist This is necessary when upgrading from a preswift version of the framework a current version otherwise the storage contents will always be tried to read as JSON which will fail and the unpack method will ultimately return nil although all the data was still there What this PR does is basically first trying to read the old format for downwards compatibility and only if that fails read the storage contents as JSON You dont NEED to merge the PR if you dont want to as I can see this being a rare edge case but I wanted to offer it anyways And I can totally see that reading the legacy format first is a overhead that might be too big for the edge case it solves Also Im open for better approaches to fix this scenario if you have any This is just a quick fix and honestly the first idea I had But it works I needed to explicitly store a bit Int on bit devices but Pantry doesnt support Int by default Including this line seems to work extension Int StorableDefaultType Hopefully theres no reason not to do that it seems to work without error Presumably Int also needs to be added but I didnt explicitly test for that How to prevent iOS from cleaning saved data on low memory Hi Would you please help to let me know if this is plan for macOS platform Or the guide how to make it be work for macOS Thanks I have the following nested model struct Checklist Unboxable let id String let agencyId String let name String var checklistItems ChecklistItem init id String agencyId String name String checklistItems ChecklistItem selfid id selfagencyId agencyId selfname name selfchecklistItems checklistItems initunboxer Unboxer throws id unboxerunboxkey id agencyId unboxerunboxkey agencyId name unboxerunboxkey name checklistItems unboxerunboxkey checklistItems extension Checklist Storable initwarehouse Warehouseable selfid warehousegetid selfagencyId warehousegetagencyId selfname warehousegetname selfchecklistItems warehousegetchecklistItems ChecklistItem func toDictionary String Any return id selfid agencyId selfagencyId name selfname checklistItems selfchecklistItems struct ChecklistItem Unboxable let id String let checklistId String let title String var checked Bool false initid String checklistId String title String checked Bool selfid id selfchecklistId checklistId selftitle title selfchecked checked initunboxer Unboxer throws id unboxerunboxkey id checklistId unboxerunboxkey checklistId title unboxerunboxkey title extension ChecklistItem Storable initwarehouse Warehouseable selfid warehousegetid selfchecklistId warehousegetchecklistId selftitle warehousegettitle checked warehousegetchecked false func toDictionary String Any return id selfid checklistId selfchecklistId title selftitle checked selfchecked checklisttoDictionary produces the following checklist agencyId id checklistItems vacatunerChecklistItemid checklistId title Opa ovac kr m checked false vacatunerChecklistItemid checklistId title Slne n okuliare checked false vacatunerChecklistItemid checklistId title Plavky checked false vacatunerChecklistItemid checklistId title Tepl oble enie na ve er checked false vacatunerChecklistItemid checklistId title Lieky checked false vacatunerChecklistItemid checklistId title Pas checked true name Europa when I call Pantrypack on the checklist instance I stumble upon a crash in JSONWarehouseswift let data try JSONSerializationdatawithJSONObject storableDictionary options prettyPrinted Terminating app due to uncaught exception NSInvalidArgumentException reason Invalid type in JSON write SwiftValue Hello guys Im having a serious problem with Pantry I didnt change anything from what I had before the update its a project that could wait After this update Pantry crashes at every pack call I pack arrays of every type even custom structs that conforms to the Storable protocol and other kind of stuff Before the update everything was working good not now One of the call is simple as Pantrypackself key pantryKeyCurrentUser Here crashes pointing me to this line number of file JSONWarehouse let data try JSONSerializationdatawithJSONObject storableDictionary options prettyPrinted The error is EXCBADINSTRUCTION code EXCI INVOP subcode x Hey Good job on Pantry Ive built a new extension that inherits from Storable Added extensions for default implementations It uses Reflection to generate propertyvalue pairs thats then typecasted to a dictionary Now if you want to add caching behaviour to a Struct simply add Pantryable in an extension Heres a Gist Swift Extensions for Pantry using reflection Default implementation public protocol Pantryable Storable func allProperties throws String Any func toDictionary String AnyObject extension Pantryable public func allProperties throws String Any var result String Any let mirror Mirrorreflecting self guard let style mirrordisplayStyle where style Struct style Class else throw some error throw NSErrordomain comkayakokayako code userInfo nil for labelMaybe valueMaybe in mirrorchildren guard let label labelMaybe else continue result label valueMaybe return result public func toDictionary String AnyObject do let properties try selfallProperties var result String AnyObject for keyvalue in properties if let v value as AnyObject result key v return result catch fatalErrorproperties cant be retrieved It would be nice to have a way to get all the keys or directly keysobjects stored in the warehouses I made an extension of Pantry using the following code swift extension JSONWarehouse static func getAllKeysInCache String var keys ArrayString let cacheDirectory JSONWarehousecacheDirectory do let urls try NSFileManagerdefaultManagercontentsOfDirectoryAtURLcacheDirectory includingPropertiesForKeys options NSDirectoryEnumerationOptionsrawValue for url in urls keysappendurllastPathComponent return keys catch return nil extension MemoryWarehouse static func getAllKeysInCache String return ArrayMemoryWarehouseglobalCachekeys extension Pantry static func getAllKeysInCache String if PantryenableInMemoryModeWithIdentifier nil return MemoryWarehousegetAllKeysInCache else return JSONWarehousegetAllKeysInCache I think it could be useful I am seeing several memory leaks from Pantry Please see the attached screenshots screen shot at pm screen shot at pm My code with Pantry leaks screen shot at pm There are already a lot of objects that can be persisted using NSCoding I think being able to persist them out of the box makes a lot of sense I had to remove StorableDefaultType from NSDate because it conforms to NSCoding and the compiler wouldnt know which packunpack to use 