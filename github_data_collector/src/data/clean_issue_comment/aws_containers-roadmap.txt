Whenever a user utilises the ECS Console to create a new task definition using the JSON representation the ECS console escapes when entered in values of task definitions It is no longer possible to enter valid JSON values containing newlines into the ENV n of a task definition via the console because the form fields are only single line text fields which dont support newlines This has been an issue for many months Creating the task definition with new lines n via the SDK or CLI is working the backslash is not escaped Whenever I tried to introduce a new line within the Environment portion the console escapes the backslash so as result it converts a newline n into n escaping the backslash Which services is this request for This could be Fargate ECS Right now it looks like the image being run is a constant AgentImageName amazonamazonecsagentlatest Itd be useful if this could be changed with an environment variable or something so that its simpler to test and use custom forks of the agent Tell us about your request Support for bluegreen deployments of ECSFargate in AppMesh Which integrations is this request for Fargate ECS Tell us about the problem youre trying to solve What are you trying to do and why is it hard We need to implement bluegreen deployment for our containers running inside AppMesh Recently support has been added in CodeDeploy to perform bluegreen in ECSFargate link This however is based around Load Balancers and Target Groups We would like this support to include AppMesh routing as well Are you currently working around this issue Using custom scripts to perform deployments Please keep this note for the community Community Note Please vote on this issue by adding a reaction to the original issue to help the community and maintainers prioritize this request Please do not leave or me too comments they generate extra noise for issue followers and do not help prioritize the request If you are interested in working on this issue or have submitted a pull request please leave a comment Thank you for keeping this note for the community Tell us about your request Fargate for ECS has FireLens a managed observability experience built around the open source projects Fluentd and Fluent Bit AWS for Fluent Bit provides a lightweight solution for AWS customers to process and ship telemetry data to many destinations We are evaluating ways in which we can make it easy simple and reliable to use AWS for Fluent Bit on EKS Fargate Which services is this request for EKS Fargate Please keep this note for the community Community Note Please vote on this issue by adding a reaction to the original issue to help the community and maintainers prioritize this request Please do not leave or me too comments they generate extra noise for issue followers and do not help prioritize the request If you are interested in working on this issue or have submitted a pull request please leave a comment Thank you for keeping this note for the community Tell us about your request FireLens has been demonstrated to be a fairly reliable log solution That being said FireLens could go farther on Fargate become more managed and provide greater assurances of reliability The Fargate platform has unique challenges because containers are ephemeral Currently the FireLens container is just another container in the Task and when the Task stops is gets a standard second Sigterm to SigKill timeout Furthermore in the unlikely case that FluentdBit goes down all logs would be lost because Fargate containers are ephemeral Ideally AWS could provide two features for FireLens on Fargate to improve reliability Enable a file buffer for the FluentdBit FireLens container and restart the container if it goes down Failures in the FireLens container would not stop a task and logs would be preserved between stops and restarts Build a more robust mechanism than the built in SigtermSigKill timeout for the FireLens container Ideally after a task stops the FireLens container would be given sufficient time to send all logsdata up to a reasonable timeout measured in minutes This might require changes to Fluent Bit That way when your task stops all logsdata would be retrieved Note that providing a hard guaranteepromise around reliability is almost certainly impossible Please keep this note for the community Community Note Please vote on this issue by adding a reaction to the original issue to help the community and maintainers prioritize this request Please do not leave or me too comments they generate extra noise for issue followers and do not help prioritize the request If you are interested in working on this issue or have submitted a pull request please leave a comment Thank you for keeping this note for the community Tell us about your request At the moment users often run side cars or daemons for observability Fluent BitFireLens takes care of logs but then you need a metrics agent and a tracing agent This proliferation of agents adds management overhead We are evaluating turning Fluent Bit into a more general observability solution The community is already working on a Statsd input support This idea is very earlystage please give us your thoughts and let us know if you think it would be valuable Which services is this request for Fargate EKS ECS Please keep this note for the community Community Note Please vote on this issue by adding a reaction to the original issue to help the community and maintainers prioritize this request Please do not leave or me too comments they generate extra noise for issue followers and do not help prioritize the request If you are interested in working on this issue or have submitted a pull request please leave a comment Thank you for keeping this note for the community Tell us about your request Newer versions of Amazon ElasticSearch Service require Sigv auth with valid AWS credentials Fluent Bit has an output plugin for ES but it does not support Sigv auth Many customers have asked for the ability to send logs directly to Amazon ES This applies to FireLens users and EKS users who run Fluent Bit as a daemonset Tell us about your request Support for Kubernetes in Amazon EKS Upstream Release timing Changelog EDIT as ronkorving image caching is available for EC backed ECS Ive updated this request to be specifically for Fargate What do you want us to build Ive deployed scheduled Fargate tasks and been clobbered with a high data transfer fees pulling down the image from ECR Additionally configuring a VPC endpoint for ECR is not for the faint of heart The doc is horrific It would be much more pleasant if there were a hidden is fine resource local to the instance where my containers run which could be used to load my docker images Which services is this request for Fargate and ECR Tell us about the problem youre trying to solve What are you trying to do and why is it hard I shouldnt be charged for pulling a Docker image every time my scheduled Fargate task runs It leaves a bad taste in my mouth In all honesty I feel like Im being ripped off I love Fargate but this is unpleasant On that note the VPC endpoint doc should be better too These are the kinds of usability issues that destroy the whole notion of serverless Fargate being a serverless container orchestrator I really dont want to have to deal with these kinds of details Are you currently working around this issue This was for a personal project I instead just deployed an EC instance running a cron job which is not my preference I would prefer being able to use Docker and the ECSFargate ecosystem I have FARGATESPOT as my default capacity provider for the ECS cluster and all the services However when I run aws ecs deploy it deploys fine but the launch type for the new tasks are just set to FARGATE instead of FARGATESPOT I have bluegreen as my deployment type