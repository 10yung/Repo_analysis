Show error when trying to create gemset for ruby installed by the system Closes This is my first bash pull request tested it on my machine and works I use brew and edit the file from my system to create this patch Let me know if im doing it wrong Cannot create gemsets while the ruby version used is the one installed by the system Possible fix Change the path to usrlocalsharegemsets or change the error messages to Cant create gemsets on a ruby version that is not installed by rbenv This PR merges nrsers work to improve load times as discussed at with some trivial fixes to an iteration error from my own fork Using rbenvgem version on macOS and started to notice running ruby was much slower bash time ruby e puts yo yo real m s user m s sys m s Ran with RBENVDEBUG and noticed calls in the gemsetbash scripts I went into etcrbenvdgemsetbash and commented out all three files bash time ruby e puts yo yo real m s user m s sys m s Which isnt great but I can live with ms The ms start time with the rbenvgemset hooks enabled is quite noticeable to me though Is this a standard amount of delay If not about how much time should I expect the plugin to add Im running Ruby but similar results across the board I have no active gemset Im not in a directory that has a gemset and I have no gemsets for Ruby so it doesnt seem like the hooks should really have to do anything as soon as they can figure that stuff out I toyed around with the hook code a bit it doesnt seems like theres any one superslow operation just a bunch of small ones adding up Maybe I have something in my setup that is considerably slowing down shell spawning causing me to feel a lot more pain from the hook code Anyways the hook code is short and clean and dont totally understand it yet but it seems like it could be optimized considerably I dont see any shortcircuiting It seems like it should be able to quickly figure out if it doesnt need to do anything and bail out Also it looks like there are places where work is duplicated across the various scripts in the hooks execution path like the subshell to rbenvgemset file here then four lines later subshelling rbenvgemset active which looks like one of the first things it does is subshell rbenvgemsetfile Seems like that stuff could be cached in variables or passed as extra arguments to avoid the duplicate effort Subshells arent super cheap its a full process spawn binbash c exit is around ms on my system which really adds up Additionally is there a reason those shells in whichgemsetbash which is the slowest hook on my system btw are spawning rbenvgemset instead of going directly to the libexecrbenvgemset It seems like they probably have enough info available to just directly invoke the endexecutables and skip going through the user interface entry point and all the commands many of which are again subshells I forked the repo and am going to hack in and see if I can get the latency down at least in the case where theres no need to load a gemset because Ive now used the plugin to isolate some gems I use as system utils and its been really useful and wonderful for that thanks Let me know if youre interested in checking out my changes I would like for it to be the default gemset and for all my gems to be there except for a couple of Rubymine debug gems different versions of which will live is different gemsets Something like that is probably doable with an explicit global gemset listed first in rbenvgemset but why create an explicit global gemset when you already have an implicit global gemset with all the gems in it if this is not possible please consider adding it In an setup where rbenv is installed and gems are installed too what are the steps to activate the plugin without reinstalling the gems