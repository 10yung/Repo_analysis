Noticed this while tinkering warning trait objects without an explicit dyn are deprecated srcerrorsrs pub fn fromanyany BoxanyAny Error help use dyn dyn anyAny note warnbaretraitobjects on by default Hi Im exploring Rust as an extension for Ruby for a lot of expensive calculations I made a project that implements a simple financial algorithm in six ways Ruby C Helix ruru FFI They are all implemented with the minimum viable code to allow Ruby to be able to call a Rust function cashflow The benchmark for Helix was surprising and Im curious what is unique about Helix that causes the function calls to return Ruby so slowly in comparison with the other methods As you can see from the numbers below helixs iterations per second when called from Ruby are almost half of ruru C and Ruby for a simple function Warming up ruby method i ms rust helix instance i ms rust helix class i ms rust ffi class i ms rust ruru class i ms c class i ms Calculating iterations per second total iterations time ruby method is in s rust helix instance is in s rust helix class is in s rust ffi class is in s rust ruru class is in s c class is in s However when running a criterion benchmark for the function within the Rust repository the performance is superb Benchmarking cashflow Benchmarking cashflow Warming up for s Benchmarking cashflow Collecting samples in estimated s iterations Benchmarking cashflow Analyzing cashflow time ns ns ns Found outliers among measurements high mild slope ns ns R mean ns ns std dev ps ps median ns ns med abs dev ps ps This is a significant difference between the actual function and whatever Helix is doing to connect Ruby to Rust Obviously with interop theres going to be some performance drop but as you can see the other methods were approximately comparable I want to dig deeper into it because Helix was the best API and usability of all of the methods I tried but I want to know exactly why the performance is inhibited before we implement critical code with it Any ideas Thank you This still doesnt work wycats Id love your help on this Unfortunately broke specs when it was merged so I had to revert it konstin wed love to have you take another go at it Hey guys Ive been playing around with Helix tonight and so far its been an awesome experience thank you Im concerned about using it for a project however because it doesnt appear to be very actively maintained or worked on The last commit was months ago and a number of issues and pull requests have been languishing for a while too Is Helix still going places On my computer i linuxgnu after successfully compiling any helix project when the resulting nativeso file is required I get this error ruby requirerelative invalid symbol in encoding USASCII xA xBF x xBFt xBF xEB xB x xAB x C x x C xBF x xBF x N x xB xC xE x xB r x x xB EncodingError Tested with rust toolchain and toolchain ruby and example Steps taken to reproduce sh helix bootstrap example cd example bundle exec rake build bundle exec ruby libexamplerb final output libexamplerb in require invalid symbol in encoding USASCII xA xB xEF xBFt xBF xE xB x k x x C xB xEF xBFx xCE x xB U xD x xB T xCD x xB xC x x x xCE x xB F xD x xB P xB xEF xBF EncodingError Interestingly the binary string from the error message is different each time you invoke it even with the same file A common pattern in Ruby is to use a hash for temporary structured data Manually implementing such coercions results in fairly mechanical repetitive code that would be ideally produced by a procmacro Does Helix have a discussion community anywhere Im unable to find any references to one on the website Release new libcrubysys Fix Windows builds Bring back encoding checks