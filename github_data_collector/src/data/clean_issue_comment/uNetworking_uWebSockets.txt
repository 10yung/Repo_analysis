Looks like release broke routing This code doesnt work as expected any more I want to serve index statsjson and for all other requests But when I add route all other routes stop working Some PDF or something nice based on the comments in the code You probably shouldnt have to specify all callbacks in a websocket behavior for it not to crash When using TemplatedApppublish it does publish to all as it should but when using WebSocketpublish there should be an ability to make it so it ignores this specific WebSocket when publishing It would be very useful for me in many cases like when a client sends data about his position there is no need to send it back to him just the other clients Hi Im using Websocketsharp in my Unity game as client that is connecting to a uWebsocket backend server We want to enable Permessage Compression for this connection but the problem is that when I enable compression in client the server refuses the request from the client We also reproduced this issue with ws library in node js as backend with its provided example configuration but the problem persists When we set serverMaxWindowBits in ws library to default negotiated value the client can connect to the server properly Now my question is Is there any way that we can control this serverMaxWindowBits in uWebsockets uWebSocket CentOS Node js Thanks Is there any best practice for implementing websockets authorization with uWS In previous versions of the library it was possible to check a bearer token in the reqheaders of the initial HTTP request before upgrading to websockets then respond with status oer whatever Is this still possible somehow currently I am doing the authorization in the ws callback like this ts app ws Options compression CompressOptionsSHAREDCOMPRESSOR maxPayloadLength idleTimeout open ws req consolelogA WebSocket connected via URL reqgetUrl consolelogws reqgetHeaderauthorization const authorization reqgetHeaderauthorization if authorization const token authorizationsplit if token wsuserId getUserIdFromToken ifwsuserId return is not a valid websocket error code wsend Unauthorized Problem is that there are not suitable standard websocket error codes that express missing authorization or similar Also it is not as clean as just doing the authorization before even starting the ws connection I am using dart websockets Dart bool connect channel IOWebSocketChannelconnectwsserverHostserverPort headers user any pingInterval Durationseconds channelsinkaddconnected channelstreamlistenonData printonData return true C void ServerStart wsgetUserData returns one of these struct PerSocketData stdstring userName Simple echo websocket server using multiple threads stdvectorstdthread threadsstdthreadhardwareconcurrency stdtransform threadsbegin threadsend threadsbegin stdthread t return new stdthread Very simple WebSocket echo server uWSApp wsPerSocketData Settings compression uWSSHAREDCOMPRESSOR maxPayloadLength idleTimeout maxBackpressure Handlers open auto ws auto req PerSocketData data PerSocketData wsgetUserData data new PerSocketData datauserName new stdstringreqgetHeaderuser stdcout datauserName se conectou stdendl message auto ws stdstringview message uWSOpCode opCode stdcout message stdendl drain auto ws Check getBufferedAmount here stdcout drain stdendl ping auto ws stdcout ping stdendl pong auto ws stdcout pong stdendl close auto ws int code stdstringview message PerSocketData data PerSocketData wsgetUserData stdcout datauserName desconectado stdendl delete datauserName listen auto token if token stdcout Thread stdthisthreadgetid listening on port stdendl else stdcout Thread stdthisthreadgetid failed to listen on port stdendl run stdforeachthreadsbegin threadsend stdthread t tjoin but ping pong is not working correctly When the client sends ping the event is not called on the server I implemented the CompressorOptions now for the dedicatedcompressor not for the shared one Please check if it fits your requirements By the way The negotiation of permessagedeflate options like maxwindowbits does not need to be changed here as theese are just hints which are currently ignored anyway The actual negotiation of deflateoptions is done inside the zlibprotocol At least in we patched just the deflateInit params and it runs fine in production I also renamed CompressOptions CompressorType in a separate commit to avoid naming confusion But its an incompatible change maybe its just a proposal By the way I added the new option also to the examples as in C all members have to be initialized Whats your plan here for the future Just wait for C where you can initialize specific members only To optimize memory usage when using DEDICATEDCOMPRESSOR it would be nice to make the hardcoded values for deflateInit in configurable Is it worthwhile to write a pullrequest for that I can try to add the options to WebSocketBehavior struct Example Currently we use windowBits memLevel with almost the same compression ratio for simple JSON messages but reduced zlib RAM usage to KB client instead of KB important when having connections Is there a tryWrite method like tryEnd or can there be difference with tryEnd being it wont require size argument when writing but will give backpressure handling capability Example usage js readStreamondata buffer const chunk bufferbufferslicebufferbyteOffset bufferbyteOffset bufferbyteLength lastOffset resgetWriteOffset First try const ok restryWritechunk if ok pause because backpressure readStreampause Save unsent chunk for later resab chunk resabOffset lastOffset Register async handlers for drainage resonWritableoffset const ok restryWriteresabsliceoffset resabOffset if ok readStreamresume return ok readStreamonend resend or are there are alternatives