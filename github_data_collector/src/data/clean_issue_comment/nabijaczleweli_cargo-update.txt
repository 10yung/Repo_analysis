To install on macOS first it was failing because I only had OpenSSL and once I installed OpenSSL via brew it worked fine shell calebjasikCalebsMacBookPro export LDFLAGSLusrlocaloptopenssl lib export CPPFLAGSIusrlocaloptopenssl include calebjasikCalebsMacBookPro cargo install cargoupdate I successfully installed it and ran it just wanted to provide a success story for macOS It wasnt entirely clear from the README why it wasnt working other than OpenSSL being the culprit I think it would be a good idea to always update cargoupdate first when running cargo installupdate all Provide friendly experience for people using rustup override set to modify unset to remove from config list to list existing config Personal expected behavior if the item seted is the default remove the config rather than showing Default features true some deprecated crate like clippy should be removed from config alternative to rustup override unset nonexistant would be useful list all overrides took me some time to figure out the configuration in cargoinstallconfigtoml by reading the source code If this feature is useful though it might introduce breaking change I can propose solution for it sh cargo install git wait for repo to update cargo installupdate ag Updating ionshell from Updating git repository error could not find ionshell in Im not sure what the error is manually running cargo install git force does not throw any error for me Hey there This is likely a bug in my project rather than a bug in cargoupdate but I wanted to ask some advice Currently heres a failing build text note C Users appveyor AppData Local Temp cargoinstallNrnbniSQAEoB release deps liblibgit sysa d d dc dbrlibdiffprintcobjdiffprintctextgitdiffprintcallbacktofilehandle x b undefined reference to impacrtiobfunc C Users appveyor AppData Local Temp cargoinstallNrnbniSQAEoB release deps liblibgit sysa d d dc dbrlibutilcobjutilctextprintf x undefined reference to impacrtiobfunc C Users appveyor AppData Local Temp cargoinstallNrnbniSQAEoB release deps liblibgit sysa d d dc dbrlibutilcobjutilctextprintfconstprop x undefined reference to impacrtiobfunc C Users appveyor AppData Local Temp cargoinstallNrnbniSQAEoB release deps liblibgit sysa d d dc dbrlibutilcobjutilctextprintfconstprop x undefined reference to impacrtiobfunc C Users appveyor AppData Local Temp cargoinstallNrnbniSQAEoB release deps liblibgit sysa d d dc dbrlibcachecobjcachectextprintf x undefined reference to impacrtiobfunc I see that in your appveyoryml you are installing some stuff Are users expected to do that too What stuff should I add specifically Thanks Especially for reproducable CI builds it would be useful to be able to specify the desired version range to installupdate to Currently if I want to get updates within a semver range my only option is to cargo install version force tarpaulin to pick an example Id like to be able to cargo installupdate allownoupdate version tarpaulin and let installupdate handle not reinstalling it if its been cached Design A new version option is added It takes a VersionReq specified in the same format as cargoinstalls version option If version is specified exactly one package must be specified If the installed version is the same as the latest published version within the specified version requirement no action is taken If a later version is available it is installed by providing the version option to cargoinstall Implementation Note I havent seen how cargoinstallupdate is implemented so Im trying to keep this highlevel enough to be applicable Add a new version option This option takes an object of type semverVersionReq For full compatibility with cargoinstall it should be attempted to parse as an exact semverVersion if it doesnt start with one of or This can be decided for or against externally to what cargoinstall does as this is a separate command with different meaning When this version option is present fail early with an error message if more than one package are provided as trailing arguments Rather than determine the latest semver version as the target version first filter the list of available versions on the version requirement provided then select the latest version Proceed normally with the new target version This may require renaming the Latest column to Target or something similar when version is provided Hello On installing i got this error failed to compile cargoupdate v intermediate artifacts can be found at tmpcargoinstallJpEXDBLLIpMP How to fix this rootchip cargo version cargo fa One feature Ive wondered about for awhile would be to have parallel update tasks running I have a very powerful desktop with a core thread R X processor When there are half a dozen packages to be updated a large portion of the update process is spent in a single thread during the final stages of each package Since only one update happens at a time these final stage processes are sequential making the update process very slow compared to what it could be If I could choose to run multiple package updates in parallel then their final sequential stage would run in parallel greatly reducing the time to do the updates My preferred approach would be to naively run the specified number of package updates in parallel allowing the operating system to sort out who gets access to the processor but an approach that you might find more reasonable would be to artificially restrict each package update to a fraction of the processor With cargo installupdate a j we could have update jobs running in parallel On a thread machine each of these jobs could be run with cargo install j to equally divide the processor threads among the update tasks If this were to be implemented it would be nice to have an option or sentinel value to just start all jobs simultaneously so I dont have to count up how many updates need to be done and supply that number to the parameter I see that this was discussed previously in and but as far as I can tell it was never coherently explained why cargoupdate needs to do this differently Synopsis of previous thread and some points of my own The Cargo FAQ is very explicit about when Cargolock is supposed to be checked in It writes It is recommended that all binaries check in their Cargolock The reasons are explained in the link The rebuttal to this point in was nabijaczleweli But this is a library After being pointed out that the crate does contain binaries the followup was nabijaczleweli think of the exec like an example which it basically is and should be While you may see it this way I havent found any evidence that any code anywhere uses cargoupdate as a library On cratesio there are zero crates that depend on cargoupdate On GitHub there are zero Cargotoml manifests that depend on cargoupdate Everybody only uses the binaries In it was pointed out that adding Cargolock does not affect how this crate is used as a library Quoting again from the same Cargo FAQ Users dependent on the library will not inspect the library s Cargolock even if it exists Cargo will use the lockfile for building the binary while crates that depend on the library will ignore the lockfile This means we get all the benefits of shipping a Cargolock with an exclusively binary crate