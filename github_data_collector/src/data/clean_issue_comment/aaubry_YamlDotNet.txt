I am using YamlDotNet to deserialize a yml file into a custom object For certain strings Id like to append some prefix on the result For example my custom class is class Metadata public string Path get set and my YML has path imagejpg and I want to append a given relative path so that when a path value is found it will be modified resulting in myMetadataPath myPrefiximagejpg when deserializing Something like WithAttributeOverride but for values would be ideal But I suspect I should do something with a custom Type converters although documentation at is empty and I couldnt manage to have anything working Any guide on whether this is possible would be much appreciated Cheers My take on implementing Not sure how to add tests for it though PS Merry Christmas Although there is already an attribute YamlMember DataMember does not depend on Yaml and allows one to have consistent serialized field names in YamlDotNet and SystemTextJson Best regards The current interface of IYamlTypeConverter one cannot deserialize a type that contains other types Unlike that interface INodeDeserializer the interface does not receive a nested object deserializer FuncIParser Type object nestedObjectDeserializer This makes it difficult to customize deserialization of custom types Implementing IYamlConvertible is another option but forces one to mix class code with yaml deserialization code and is not possible for types from third party libraries I cant find why when I specify string with leading space in some line it is stored as DoubleQuoted instead of Literal Example csharp class Program static void Mainstring args var serializer new SerializerBuilder WithEventEmittere new LiteralMultilineEventEmittere Build var obj line with leading space nother line ConsoleWriteLineserializerSerializeobj private class LiteralMultilineEventEmitter ChainedEventEmitter public LiteralMultilineEventEmitterIEventEmitter nextEmitter basenextEmitter public override void EmitScalarEventInfo eventInfo IEmitter emitter if eventInfoSourceType typeofstring eventInfoSourceValue is string value valueContains n eventInfoStyle ScalarStyleLiteral baseEmiteventInfo emitter Returns line with leading space nother line While if I change value obj value to csharp var obj line with leading space nother line without space then it is serialized right line with leading space other line Ive debug code to Emitter where I can see that this is expected behavior but I cant find such behavior in documentation More over even if I will try to read this Literal string from YAML it will be deserialized right as expected csharp static void Mainstring args var serializer new SerializerBuilder WithEventEmittere new LiteralMultilineEventEmittere Build var obj line with leading space nother line ConsoleWriteLineserializerSerializeobj var yaml r n line with leading space r n other line var deserializer new DeserializerBuilderBuild var deserializedValue deserializerDeserializestringyaml ConsoleWriteLinedeserializedValue ConsoleWriteLinedeserializedValue obj With output line with leading space other line True TODO before merging Pull Request x Update conditional statements to support all NET Standard NET Core and back to NET Framework if NETSTANDARD NETSTANDARD x Create more tests for serialization Resolve performance build issues Add async around deserialization Not sure there is much async to be done here I have a yaml file yaml Name aaa Age Props texthtml a And I have a class csharp public class YamlData public string Name get set public int Age get set public Dictionarystring string Props get new Dictionarystring string Specially YamlDataProps dictionary has only get accessor For deserializing csharp var deserializerBuilder new DeserializerBuilder IgnoreUnmatchedProperties Build var data deserializerBuilderDeserializeYamlDataFileReadAllTexttestyaml dataProps dictionary count is zero if I put the set on Props property It is well But I can not change the YamlDataProps in code How to resolve these problem This is a request to add support for inline style for sequences and mappings to both Parser and Emitter An example of a flow style block name John Smith age An example of a flow style sequence milk pumpkin pie eggs juice This format can be extremely useful for logging when double quotation mark tax of JSON is inappropriate or in any other cases when singleline representation of data is more preferable Hi Im using your library to generate my I n translations right here I got a Dictionary with an enum as a key and a string as value for my i n here is an example project Id like to make working Is it possible to have a Type converter that will append a comment after the KeyPairValues value I tried to simply make a type converter for my Enum but it does not work it simply breaks the YAML cause its appended after the Key Expected yaml BlaBlaBla Params FirstParamName BlaBla Params FirstParamName SecondParamName Result with only my enum TypeConverter yaml BLABLABLA Params FirstParamName BLABLA Params FirstParamName SecondParamName My BrokenEnumTypeConverter cs public class I nKeyTypeConverter IYamlTypeConverter public bool AcceptsType type type typeofI nKey public object ReadYamlIParser parser Type type string value parserConsumeScalarValue EnumTryParsevalue out I nKey key return key public void WriteYamlIEmitter emitter object value Type type var key I nKeyvalue emitterEmitnew Scalarnull null keyToStringToUpper if typeofI nKeyGetFieldkeyToStringGetCustomAttributetypeofI NParamsAttribute is I NParamsAttribute tmp return emitterEmitnew CommentPrettifyI NParamstmp false Thanks by advance Im updating a node with YamlMapping inside a potentially large Yaml file that has comments I quickly realized that the library is not handling this correctly right now even for a simple readwrite test csharp Fact public void HandlingComments var yamlContent Name your package Package names should contain only lowercase characters name testpackage targetpath target directory which will store compiled SQL files models testpackage Applies to all files under modelsexample example materialized view var input new StringReaderyamlContent var yaml new YamlStream yamlLoadinput var document YamlMappingNodeyamlDocuments RootNode var newYaml new YamlDocumentdocument var yamlStream new YamlStreamnewYaml var buffer new StringBuilder using var writer new StringWriterbuffer yamlStreamSavewriter assignAnchors false var yamlText writerToString AssertEqualyamlContent yamlText I understand the standard is vague on comments however in practice comments are very useful Im not asking for full serialiazation deserializaton support but a basic readupdatewrite flow leveraging the YamlMappingNode directly should work Is it possible 