According to the documentation at there should be a clientMetadata field on the request for the Post Confirmation Lambda Trigger However in the types in there is no clientMetadata field on the corresponding type When I add that field and deploy I see that Im able to access that data when its passed in a request Im down to open a little PR to add this but I wanted to make sure it had the green light from project maintainers first Description of changes Add goreleaser to manage the release of new versions of the project The only problem I found was related with the build part Its injecting default ldflags Were not using those flags so I dont think that we gonna have any problem with that This behaviour can be checked by running this command goreleaser release rmdist snapshot debug go build trimpath ldflagss w X mainversionv SNAPSHOT cade X maincommit cadec de ff a ccc ebfe e b d X maindate T Z X mainbuiltBygoreleaser o Output make release releasing using goreleaser loading config file filegoreleaseryml RUNNING BEFORE HOOKS LOADING ENVIRONMENT VARIABLES pipe skipped errorpublishing is disabled GETTING AND VALIDATING GIT STATE releasing v commit cadec de ff a ccc ebfe e b d pipe skipped errordisabled during snapshot mode PARSING TAG SETTING DEFAULTS LOADING ENVIRONMENT VARIABLES SNAPSHOTING GITHUBGITLABGITEA RELEASES PROJECT NAME BUILDING BINARIES ARCHIVES LINUX PACKAGES WITH NFPM SNAPCRAFT PACKAGES CALCULATING CHECKSUMS SIGNING ARTIFACTS DOCKER IMAGES ARTIFACTORY S BLOB HOMEBREW TAP FORMULA optimistically guessing brew installs double check SCOOP MANIFEST SNAPSHOTING CHECKING DIST rmdist is set cleaning it up WRITING EFFECTIVE CONFIG FILE writing configdistconfigyaml GENERATING CHANGELOG pipe skipped errornot available for snapshots BUILDING BINARIES building binarydistbuildlambdazipwindows cmdbuildlambdazipbuildlambdazipexe building binarydistbuildlambdazipdarwinamd cmdbuildlambdazipbuildlambdazip building binarydistbuildlambdazipdarwin cmdbuildlambdazipbuildlambdazip building binarydistbuildlambdazipwindowsamd cmdbuildlambdazipbuildlambdazipexe building binarydistbuildlambdaziplinuxamd cmdbuildlambdazipbuildlambdazip building binarydistbuildlambdaziplinux cmdbuildlambdazipbuildlambdazip ARCHIVES creating archivedistawslambdagov SNAPSHOT cadewindows zip creating archivedistawslambdagov SNAPSHOT cadelinux targz creating archivedistawslambdagov SNAPSHOT cadedarwin targz creating archivedistawslambdagov SNAPSHOT cadedarwinamd targz creating archivedistawslambdagov SNAPSHOT cadewindowsamd zip creating archivedistawslambdagov SNAPSHOT cadelinuxamd targz LINUX PACKAGES WITH NFPM pipe skipped errorno output formats configured SNAPCRAFT PACKAGES pipe skipped errorno summary nor description were provided CALCULATING CHECKSUMS checksumming fileawslambdagov SNAPSHOT cadelinuxamd targz checksumming fileawslambdagov SNAPSHOT cadedarwin targz checksumming fileawslambdagov SNAPSHOT cadewindows zip checksumming fileawslambdagov SNAPSHOT cadelinux targz checksumming fileawslambdagov SNAPSHOT cadedarwinamd targz checksumming fileawslambdagov SNAPSHOT cadewindowsamd zip SIGNING ARTIFACTS pipe skipped errorartifact signing is disabled DOCKER IMAGES pipe skipped errordocker section is not configured PUBLISHING pipe skipped errorpublishing is disabled release succeeded after s Instructions to install goreleaser By submitting this pull request I confirm that you can use modify copy and redistribute this contribution under the terms of your choice Hi guys Would it be possible to add a line to the header stating which license the file is covered under Thank you Issue if available Description of changes Implement CodePipeline Events from the official documentation Note this includes code from as it is required to implement this properly as noted in By submitting this pull request I confirm that you can use modify copy and redistribute this contribution under the terms of your choice CodePipelineEvent is not implemented correctly yet incorrect use explained in Describe the solution youd like Implemented according to documentation Additional context Depends on a fix to Assuming the approach in is taken Is your feature request related to a problem Please describe CodePipelineEvent seems to be hardcoded as a CodePipelineJob This incorrectly makes CodePipeline event unusable for its actual events CodePipelineEvent documentation CodePipelineEvent Describe the solution youd like I would like to move the current CodePipelineEvent into its own CodePipelineJobEvent as it seems to be seperate then the documented CodePipelineEvents Describe alternatives youve considered Considered just leaving it as is and creating CodePipelineEvent under some new name like ActualCodePipelineEvent but I think this is one of those instances where it would be better to just make the change Additional context Breaking Change described a problem deleting resources on rollback If merged we should reopen which describes a visibility problem on custom resource creation failures Remove DialogAction from LexEvent according to and align tests with LexResponse model Is your feature request related to a problem Please describe Whenever a lambda backed custom resource creation fails githubcomawsawslambdagocfn returns a physicalResourceID to CloudFormation which doesnt exist Then when CloudFormation tries to DELETE nonexistent resource it fails I have to manually skip the deletion of that particular custom resource to delete the Stack Describe the solution youd like Custom CloudFormation Resource should be able to be deleted like other normal Resources even though the CREATE event was not successful Additional context Here My Custom Resource is returning some ID when failed to create img width altScreen Shot at AM src Here AWS Security Group returning nothing when failed to create img width altScreen Shot at AM src Related PR Other language runtimes in Lambda provide XRay Trace information through the XAMZNTRACEID environment variable Recently this trace information also started to be appended to the Cloudwatch logs for each of the invocations as in the below Even though in the other runtimesPython Nodejs etc the trace information provided through the environment variable and through the Cloudwatch logs seems to be consistent this is not the case for the Go Following lambda function can be used to reproduce the issue go package main import context fmt os githubcomawsawslambdagolambda type myEvent struct ID string jsonid func handlerctx contextContext event myEvent string error fmtPrintlnosGetenvXAMZNTRACEID fmtPrintlnctxValuexamzntraceid return Hello nil func main lambdaStarthandler When I run the above lambda function I got the values below Here the values in the rectangle and are consistent as expected However the value provided by the environment variablerectangle does not seem to be correct 