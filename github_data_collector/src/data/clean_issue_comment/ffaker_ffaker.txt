We have an issue when testing the deletion of an account We test for expectpagenotto havecontent childfirstname Even upon a successful request the test fails because the page contains a form with a country list containing Dominica which is also the childfirstname generated by FFakerNamefirstname The failure is of course random and occurs when the randomly generated name matches the country name I didnt track it but making a note here that animals us doesnt work I am using others in place of animal currently I did a run without without plurals of both When Im done with my other stuff Ill try poking it more How is possible to define a minimum and maximum length of user login generated by ruby FFakerInternetSEloginusername Some postcodes generated with FFakerAddressUKpostcode are invalid I noticed since I got some random errors on CI in models with validations from gem For example XX PE You can also check that this is indeed an invalid UK postcode in here Afaik the most uptodate regex is This pr adds the irish variant to the Animal module This includes changes from adding LoremIE that havent been merged yet Hi Im using FFaker to generate fake datas and telephonenumber for phone number validation But I often have errors from FFakerPhoneNumberXXuniqueinternationalmobilephonenumber when I ask for validation I made test on FFakerPhoneNumberAU FFakerPhoneNumberBR FFakerPhoneNumberCU FFakerPhoneNumberDA FFakerPhoneNumberDE Then I tried with FFakerPhoneNumberID and this one works I didnt try the others for now My validator is ruby class User ApplicationRecord beforevalidation formatphonenumber def formatphonenumber telephonenumber TelephoneNumberparsephonenumber if telephonenumbervalid selfphonenumber telephonenumbere number else errorsaddphonenumber Phone number invalid end end Does it something we could improve on FFaker I recently stumbled across this gem and noticed that you are using a custom implementation of FakerStringfromregexp to generate strings from a regular expression This implementation is OK for the basics but is far from comprehensive There is an open issue about one such bug and another open issue thats apparently unresolved The regexp language is vast and complicated solving this problem for all possible regular expressions is far from easy However this library provides a much more complete solution For backwards compatibility you could implement this as module FFaker module String def selffromregexpexp puts Warning FFakerStringfromregexp is deprecated Use exprandomexample exprandomexample end end end There are a couple of potential minor issues we could discuss before dropping in this replacement eg Regexprandomexample could be a refinement instead of a global class extension but more the most part it should be a very simple change Hi I occasionally run into the situation where I need to return a random name that meets some condition ie has a length for autocomplete I was thinking of putting up a PR that changes the name methods to take and optional block and will return the first value that matches a predicate Would this be a welcome feature Seems like this is a problem inherited from Faker but its the only thing preventing me from using this awesome feature Currently the ones it generates usually dont pass the check digit test 