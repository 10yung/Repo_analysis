I want to retry Dial if it fails but only if its reasonable to do so Its reasonable if the connection was refused RabbitMQ has not yet started when my app is starting or if the connection is reset network problem RabbitMQ restart Its unreasonable if the url is invalid ParseURI fails It would help to use Go s new errors The readme says This library supports two most recent Go release series currently and Would therefore a patch using Go s new errors and thus breaking compatibility with Go be accepted once Go is released I am publishing messages to rabbitMQ at a small rate s If I close the connection after the message publishes it is giving me the below error fatal error concurrent map read and map write goroutine running runtimethrow x e d f x usrlocalCellargo libexecsrcruntimepanicgo x fp xc fe sp xc fdf pc x fcc runtimemapaccess x be xc c xc fe e x usrlocalCellargo libexecsrcruntimemapgo x fp xc fe sp xc fe pc x f githubcomstreadwayamqpConnectiondispatchN xc c x a ac xc c f Userspardhasaradhigopkgmodgithubcomstreadwayamqpv edfb d connectiongo x c fp xc fec sp xc fe pc x ed c githubcomstreadwayamqpConnectiondemux xc c x a ac xc c f Userspardhasaradhigopkgmodgithubcomstreadwayamqpv edfb d connectiongo x fp xc fee sp xc fec pc x ecc githubcomstreadwayamqpConnectionreader xc c x xc Userspardhasaradhigopkgmodgithubcomstreadwayamqpv edfb d connectiongo xf fp xc ffc sp xc fee pc x ed runtimegoexit usrlocalCellargo libexecsrcruntimeasmamd s x fp xc ffd sp xc ffc pc x c created by githubcomstreadwayamqpOpen Userspardhasaradhigopkgmodgithubcomstreadwayamqpv edfb d connectiongo x My code func Publishname string body byte channel err connectionChannel defer channelClose commenting out this does not cause any errors but too many channels are left err channelPublish name false false amqpPublishing DeliveryMode amqpPersistent ContentType textplain Body body utilHandlerErrorerr Could not publish message for mq name currently I am using the version of this library and found that QueueInspect does not return a error for me when it doesnt exist and returns an empty amqpQueue struct the implementation fails on a basic connect channel call and queueinspect call to a localhost instance let me know if you are able to replicate this issue Follow up on I made this PR to demonstrate how to create a pool of publishers on connection The example focuses on how the pool can be constructed and used many details are omitted such as Error handling Publish confirm handling Connection redialing etc I can not found document that support connection pool In the web connection pool is necessary that avoid connect and reconnect Hi Is there anyway to add max retry functionality like Laravel tries I think every reject action consumer can add a property if not exist to the message like attemptscount and if exists increment like attemptscount This functionality will be great and can implement on Delivery Reject and Nack I am working on a reconnect function for my companys project What I found is that when I keep publishing large volume of data NotifyClose doesnt receive any error on connection close However if I add a small delay us between each publish NotifyClose works as expected My guess is that large amount of publish are scheduled in the CPU go runtime queue before notify To reproduce the error Spin up a rabbitmq server in docker Run a publisher script to keep sending message to server no delay between each send In the meantime another goroutine is listening on NotifyClose and prints out any error Restart rabbitmq server docker restart Here is what ChannelPuhlish returns write tcp write broken pipe write tcp write broken pipe write tcp write broken pipe write tcp write broken pipe Exception Reason channelconnection is not open Exception Reason channelconnection is not open Exception Reason channelconnection is not open Exception Reason channelconnection is not open Exception Reason channelconnection is not open I want to confirm my assumption and see if adding a small delay us between each publish is a correct and robust solution Thanks for the help in advance I was trying to build hyperledge fabric source code which is in Go and modified it to include amqp in imports Im facing this issue fabric gitelastico make distclean all release docker Building builddockerbinorderer ordererconsensuselasticoconnectiongo cannot find package githubcomstreadwayamqp in any of optgopathsrcgithubcomhyperledgerfabricvendorgithubcomstreadwayamqp vendor tree optgosrcgithubcomstreadwayamqp from GOROOT optgopathsrcgithubcomstreadwayamqp from GOPATH Makefile recipe for target builddockerbinorderer failed make builddockerbinorderer Error Despite GOPATH GOROOT being set and amqp is available in GOPATH it is not running Can someone point me how to solve this issue Hi all Id like to ask how to return message to the end of queue in rabbitmq Example Message gets consumed and creates some record in database Message gets consumed and checks if there is record in database and if yes then it updates the record If there is no record in database message should be returned to the end of queue The Code below did not work for delivery range msg exist check if exist nil yes update err deliveryAckfalse loggerInfoAck error err else no err deliveryRejecttrue err deliveryNackfalse true loggerInfoReject error err Thanks in advance This has been discussed in and but there are a few new things to consider In michaelklishin said Maybe once Go adopts an official package management tool this can be revisited It is not default yet but it exists Go Modules is a thing since GO and although it is still being discussed the semantic versioning is a key part to make it more viable just like it is key for every other package manager out there Without it a mod file looks like this module amqpclient go require githubcomgoogleuuid v githubcomstreadwayamqp v d a a Even without modules release tags can be used by tools like gopkgin to have imports like gopkginyamlv This is not only helpful but also a good practice This project is stable but repositories without x release tags are usually considered unstable Shall we discuss some more 