There is IntPart could you add the same but returning bigInt optimization roundShortest method for effectiveness which had apply in go source code gosourcestrconv When I went to revert TestDecimalRoundCash started failing because the RoundCash function relies on a Decimal with insignificant digits removed To get around this problem I made a new function to remove insignificant digits Cannot create a Decimal from Inf For computing the arbitrary nth root of any number I also go formatted some unrelated bits of code I implemented the shifting nth root algorithm in order to compute an nth root to an arbitrary precision Other methods such as Newtons method are potentially faster but involve some amount of uncertainty as they only give an approximation while shifting nth root gives the precise answer Also a slow method is better than no method P Get error when used with gorm pq encode unknown type for decimalDecimal All nice on commit cd d c e b ef a a b b da b e but broken for the last one a b d f bcbff ffb d e ec a a Also it would be nice if you will add go mod support golang func TestNegZerot testingT negativeZero mathCopysign value decimalNewFromFloatnegativeZero if valueSign tErrorfExpected a negative sign but got v valueSign actual valueFloat actualBits mathFloat bitsactual expectedBits mathFloat bitsnegativeZero if actualBits expectedBits tErrorfExpected bits x but got x expectedBits actualBits FAIL TestNegZero s compactfloattestgo Expected a negative sign but got compactfloattestgo Expected bits but got FAIL Fixed documentation on StringFixedBank which incorrectly called StringFixed instead of StringFixedBank in the documentation I also noticed that the documented output for decimalNewFromFloat StringFixedBank is but the actual output is Im not sure if the documentation or the implementation are incorrect in that case but I modified the documentation to match the current behavior the string breaks for me I am hesitant to open this given that the is already not supported Should FromString variants handle string formatters Maybe strip out characters Hesitant to preemptively submit a PR given i n implications ie comma meaning fractional vs purely formatting in European countries Open to feedback and submit PR for s g filtering if thats reasonable and aligned with the project goals Thanks if i have an table on RDBMS and i need to query it and map to struct looks like this go type Data struct A decimalDecimal B decimalDecimal C decimalDecimal and i dont want to test with actual connection to database so i create SqlRows implementation like this go Scan func inst MockScanner Scansrc interface error for i d range src switch d dtype case int d instdata i int case string d instdata i string case float d instdata i float case float d instdata i float default if scanner ok dsqlScanner ok if err scannerScaninstdata i err nil return err return nil then i create function like this go func MapDatarows sqlSqlRows Data error var out Data err rowsScan outA outB outC return out err So I able to test this function without actual query on database like this go mock NewMockScanner now support int so it doesnt need to be NewMockScannerint or NewMockScannerdecimalNewFromFloat outerr MapDatamock SooutA ShouldEqual decimalNewFromFloat someone might think this is pointless but if someone have to deal with banks project and need to write some tests for function which deal with hundred of fields and all of them have to be mocked this should made a point 