Appveyor builds have been failing across all branches seemingly because of a yaml parsing issue It looks like weve been dependent on a cached version of the PHP installation which was removed recently This PR should allow all Appveyor builds to pass Builds are failing in PHP because of an issue with the build scripts Tests tagged asphp are running in because only the minor version is checked This pull request fixes these issues and simplifies the handling of language version numbers generally Hi Behat iTerm MacOS If I choose any dark iTerm theme eg Tango Dark then path of a failed scenario is invisible unless I select it Screenshot at Screenshot at On light themes everything is okay Screenshot at With this change env placeholders can be used in behatyml For example when using Mink you can write yaml default extensions Behat MinkExtension baseurl envBEHATBASEURL and then use the environment variable BEHATBASEURL to control the Mink setting Hi When I launch behat it cannot access the selenium server because of the proxy on my machine The proxy configuration in the behatyml file is for selenium not for the behat client On my research I found the call to selenium that is done via instaclickphpwebdriverlibWebDriverServiceCurlService By putting curlsetopt curl CURLOPTPROXY it works Is there another way to do it Or is it possible to add it in the configuration of behatyml Either a proxy option or add options to the extraOptions array which is a parameter of the method Thx BeHat uses Symfony components as per the package requirements easy to confirm when checking the composer JSON file Given the latest version of Symfony is already available at the moment and knowing about the other opened issue to say farewell to unsupported versions of Symfony I suggest enabling support for the new version too Edit Please note that I read all the comments on the other issue I just added this one here because the purpose of the other one is to remove support for unsupported versions of Symfony Decouple matters Ive recently found that has a link to a mink repository fork thats archived We should update it to but Ive found that docs arent under this repo Let me know if theres any chance for me to change it or if you need to do the work I maintain this package here and I print out several paths to facilitate debugging of behat Behat when I dived into the code actually trim out absolute paths this breaks references that I have to print out for say urls from file system Can we please not do this or have an option of some sort to not do this This PR can be used to build a scoped PHAR where all classes in vendor namespaces are prefixed with Behat So for example Symfony Component Console Command Command becomes Behat Symfony Component Console Command Command That way if people have Symfony installed in their project as well it wont clash with the version that is bundled with Behat This works fine for the base use case but falls apart at the moment Behat extensions come into the mix because behat extensions are classes that need to use parts of Symfony such as Symfony Component DependencyInjection ContainerBuilder which is not possible inside the PHAR because those classes are prefixed in the PHAR so Behat Symfony Component DependencyInjection ContainerBuilder exists in the PHAR but Symfony Component DependencyInjection ContainerBuilder does not Output when trying to run the scoped PHAR with my behat mailhog extension PHP Fatal error Declaration of rpkamp Behat MailhogExtension ServiceContainer MailhogExtensionconfigureSymfony Component Config Definition Builder ArrayNodeDefinition builder void must be compatible with Behat Testwork ServiceContainer ExtensionconfigureBehat Symfony Component Config Definition Builder ArrayNodeDefinition builder in homeremoncodemailhogmailhogbehatextensionsrcServiceContainerMailhogExtensionphp on line Im not really sure how to solve this in a nice way Creating an abstraction layer between Behat and Symfony might work basically a bridge between Behat and the Symfony version Behat works with but that would force all current extensions to be rewritten in order to be compatible with that abstraction layer which would be a lot of work Another solution would be for extensions to be written differently using the scoped namespace when used in the PHAR than when used outside the PHAR which sounds brittle and puts quite a strain on extension maintainers But maybe there are other solutions that Im missing