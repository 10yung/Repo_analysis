The data path is the preferred way to access WQP data so instead of Many of the newer WQP endpoints do not support the direct and as we move to new hosting solutions we would like to move away from supporting the legacy mappings Add basic functionality examples or a quickstart guide to the README The documentation shows a the data frame is a For some of the larger data pullsthe site and parameter attribute calls can take as much time if not more than the data calls Adding an argument to ignore the attributes would be pretty easy and could save a few of you power users a lot of time r StartDate EndDate sites c qw readNWISqwsiteNumbers sitesparameterCd all startDate StartDateendDate EndDate tzCST CDT qwstartDateTime UTC Not sure if somethings changed or this is a bug thats been around but dataRetrievals looking for a column sampletimedatumcd to match the sampledt and sampletmbut in this dataset its samplestarttimedatumcd to get the reference timezone Happening here I think for sample well need to check for both sampletimedatumcd and samplestarttimedatumcd that ones always been special Quick fix r qw dataRetrievalconvertTZqw tzname samplestarttimedatumcd datetimecols startDateTime tz CST CDT qwstartDateTime CST Similar to NWIS give the users a way to use a single function for any service The Water Quality Portal now has summary services Currently there are station summary services that allow you to see details at the characteristicgroup level where you can query by the various site level parameters For Example here is a huc query for data collected in the last years the summaryYears parameter allows for or all and here is the response type FeatureCollection features type Feature geometry type Point coordinates properties ProviderName STORET OrganizationIdentifier VASWCB OrganizationFormalName VIRGINIA DEPARTMENT OF ENVIRONMENTAL QUALITY MonitoringLocationIdentifier VASWCB ABRB MonitoringLocationName Rt Evergreen Mills Rd MonitoringLocationTypeName RiverStream ResolvedMonitoringLocationTypeName Stream HUCEightDigitCode siteUrl activityCount resultCount StateName Virginia CountyName Loudoun County characteristicGroupResultCount Inorganics Major Nonmetals Microbiological Nutrient Physical type Feature geometry type Point coordinates properties ProviderName STORET OrganizationIdentifier VASWCB OrganizationFormalName VIRGINIA DEPARTMENT OF ENVIRONMENTAL QUALITY MonitoringLocationIdentifier VASWCB ASOR MonitoringLocationName Rt Evergreen Mills Rd MonitoringLocationTypeName RiverStream ResolvedMonitoringLocationTypeName Stream HUCEightDigitCode siteUrl activityCount resultCount StateName Virginia CountyName Loudoun County characteristicGroupResultCount Microbiological Nutrient Physical type Feature geometry type Point coordinates properties ProviderName STORET OrganizationIdentifier VASWCB OrganizationFormalName VIRGINIA DEPARTMENT OF ENVIRONMENTAL QUALITY MonitoringLocationIdentifier VASWCBVAG MonitoringLocationName Evergreen Store MonitoringLocationTypeName Facility Industrial ResolvedMonitoringLocationTypeName Facility HUCEightDigitCode siteUrl activityCount resultCount StateName Virginia CountyName Loudoun County characteristicGroupResultCount Nutrient There are a variety of ways that GETs can end up breaking such as URLS being to long problems escaping characters to firewalls interpreting queries as attacks and blocking them to apache routing getting all confused Many of these problems can be avoided by POSTing a JSON payload instead The syntax is pretty reasonable and is documented in the swaggerdocs and also below you do need to send the headers and include the mimetype in the URL here is an example curl curl X POST header ContentType applicationjson header Accept applicationzip d statecode US countycode US US siteType Lake Reservoir ImpoundmentStream sampleMedia AirWater analyticalmethod string assemblage string bBox string characteristicName string characteristicType string countrycode string countycode string dataProfile string huc string lat string long string mimeType string minactivities string minresults string nldiurl string organization string pCode string project string providers string sampleMedia string siteType string siteid string startDateHi string startDateLo string statecode string subjectTaxonomicName string within string zip string Hello I am the maintainer of the tidyhydat package which does approximately the same thing as dataRetrieval but only for Canadian hydrometric data Because rivers flow across borders Ive been thinking that it would be useful to have a function in tidyhydat that munges the USGS data into WSC formats and vice versa to facilitate combining the data for any crossborder hydrological analysis A lovely side benefit for Canadian users is that our hydrometric data will then integrate seamlessly with tools like EGRET I think I think the API would be two functions wsctousgs and usgstowsc or something like that Im curious if you folks have ever thought about something like this and whether you see enough value in this to share these functions assuming we can get it working properly across the two packages import package and reexported functions I plan to implement this for tidyhydat anyways because it is likely valuable for our purposes but before I went too far down this road I wanted to reach out here whats the best way to get a humanreadable list of WQP characteristicNames I see dataRetrievalpCodeToName but it was updated in I see which is probably the same as pCodeToName is that right It also appears to be NWIS specific but there are characteristic names available through WQP that arent listed here right I see which I expect is more complete but now Im confused about why there are two lists can anybody help me understand is there a dataRetrieval equivalent to the servicescodescharacteristicname query