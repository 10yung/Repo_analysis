 While expression can be compiletime evaluated to true it can make sense to be sure that Foo will always be smaller that Bar This lint catches match statements that binds to only one block and could be rewritten using a simple let statement Lint name MATCHSINGLEBINDING fixes changelog add lint for match with single binding statement fixes Check list Followed lint naming conventions lintnaming Added passing UI tests including committed stderr file cargo test passes locally Executed utildev updatelints Added lint documentation Run utildev fmt lintnaming changelog implement lint that warn about single component path importsuse ident in edition This fixes by requiring a known layout for the key type before linting Edit This fixes too changelog none Right now we have lints that start with unneeded needless unused and redundant I feel like most of these prefixes are trying to express the same so perhaps we could make this more consistent somehow Hi there Whether youve come to make a suggestion for a new lint an improvement to an existing lint or to report a bug or a false positive in Clippy youve come to the right place For bug reports and false positives please include the output of cargo clippy V in the report Thank you for using Clippy Write your comment below this line The below program has typos inside the cfg macro call feeture instead of feature The below program compiles without any errors and clippy also does not print any warnings rust pub fn main if cfgfeetureEXT printlnEXTRA FEATURE ADDED cfgfeetureEXT printlnEXTRA FEATURE ADDED cfg macro seems to be a compiler builtin macro source code not available I found this issue while debugging my Rust code Hello This trait rust pub trait SomeTrait const VAL OptionSelf triggers rust error a const item should never be interior mutable const VAL OptionSelf consider requiring stdoptionOptionSelf to be Copy which is this lint Apparently the corresponding test is this not sure Thing is it doesnt test OptionT and additionally is interior mutability for const Options even such a big deal Im simply trying to figure out if Im implementing a footgun right now if I allow this I dont intent to ever manipulate this const and will only use it for PartialEq and Eq purposes EDIT frozolotl on Discord suggested removing Option from the trait and it should indeed still trigger And it does Note The suggestion to require Copy is not possible in my case Since were going towards issues and simply dont have enough manpower to triage them properly and therefore the issue tracker gets kind of convoluted I thought it would be a good idea to have one tracking issue for all lints In the tracking issue for every lint a list of issues mentioning this lint in its title or in the issue body would be displayed This is what this tool does This tool is behind a feature because it requires reqwest and serde which would otherwise blow up the clippydev build details summaryOutputsummary bash GITHUBTOKEN cargo run features issues issuesforlint all filter absurdextremecomparisons Should absurdextremecomparisons alert for comparison between usize and u approxconstant Clippy doesnt report errorwarnings after cargo check assignoppattern assignoppattern misleading on wrongly implemented assign impl blacklistedname Lint for blacklistedstrings similar to blacklistednames Allow blacklisted names in tests redundantpatternmatching fixit suggestion fails to apply blockinifconditionexpr Merge some lints together blockinifconditionstmt Merge some lints together blockinifconditionstmt false positive in macros boolcomparison boolcomparison should not fire when testing for false needlessbool triggers on cfg comparisons New lint comparing option to Sometrue borrowinteriormutableconst borrowinteriormutableconst interacts poorly with the http crate declareinteriormutableconst and borrowinteriormutableconst need to respect enum variants borrowedbox borrowedbox should not be emitted for mutable boxed trait object x The githubio links dont work for nonmaster releases if the Travis release build failed borrowedbox incorrectly assumes mutable boxed slice allocation wont change borrowedbox gives syntactically invalid suggestion Clippy incorrectly complains about borrowedbox when trait object is boxed boxvec Reword or even allowbydefault boxvec boxedlocal False positive for boxed local with wasmbindgen FN in boxedlocal lint boxedlocal false positive for Sized False positive for boxed local in default Trait method implementation cargocommonmetadata Meta issue for Rust API Guidelines castlossless On bit usize as f recommends f fromusize Reenable castlossless lint by default castpossibletruncation Optionally disable allows unless linked to a justification castptralignment castptralignment is acceptable in a narrow set of contexts Castptralignment false negative in trait method default impl Extend castptralignment lint for pointercast method Extend castptralignment for type alias castsignloss castsignloss value cant be negative if guarded by assert cloneoncopy Disable explimplcloneoncopy when Copy is manually implemented False positive for cloneoncopy when the clone is immediately borrowed Why prefer dereference to clone on Copy types Make cloneoncopy lint machine applicable cloneonrefptr cloneonrefptr and macros cmpowned cmpowned false positives procmacro Ident False positive in cmpowned lint cognitivecomplexity Tracking Issue Split up our UItests into smaller parts Suggestion for new lint Cognitive Complexity Ignore cognitive complexity in macro expanded code Clippy links to master instead of actual version Improve the cognitivecomplexity lint to show what lines are causing the complexity collapsibleif improve collapsible if in complex cases with same expressions False positive on collapsibleif with if let collapsibleif shouldnt warn on else after multiple else if Tracking Issue Split up our UItests into smaller parts Incorrect indentation in suggestion of collapsibleif comparisonchain detect if comparison chain that could be a tuple comparison instead should comparisonchain only trigger for if x y else if x y else debugassertwithmutcall debugassertwithmutcall false positive on immutable method call declareinteriormutableconst declareinteriormutableconst and borrowinteriormutableconst need to respect enum variants deprecatedcfgattr deprecatedcfgattr lint Also lint inner attributes once custominnerattributes is stabilized derivehashxoreq False positive in derivehashxoreq with multiple Eq implementations docmarkdown docmarkdown a bit too eager docmarkdown should ignore things which just contain acronyms offbyone span in docmarkdown warning on single tick false positive docmarkdown should disregard escaped underscores doublecomparisons lint double comparisons doubleneg nonminimalbool lint for meta items dropcopy FP clippydropcopy new called inside drop dropref clippydropref will trigger on mut T as well as T elseifwithoutelse Lint suggestions based on MISRA emptyenum Improve emptyenum lint emptyloop Lint emptyloop lint on nostd enumclikeunportablevariant False positive on enumclikeunportablevariant False positive for Clike enums involving configurationdependent constants vet all lints for bit compat enumglobuse add lint for prevent global import enumvariantnames Incomplete postfix detected for enumvariantnames eqop Use consteval instead of constant for more lints eqop false positive Tracking Issue Split up our UItests into smaller parts erasingop lint useless operands in binary operations evalorderdependence evalorderdependence shouldnt fire for struct initializers exit Stronger macro check for identityop and typecomplexity Warn when forgetting to flush stdout before calling stdprocessexit Create more than lint groups lint on a call to exit in tests Type complexity should not be considered when defining an associated type Feature request flag for nonzero exit status if warnings are present Clean up the error reporting in the cargo clippy code clippy subcommand does not work properly when root directory is an executable Lint generic methods using IntoAsRefAsMut above very modest complexity doesnt work at all on windows msvc targetrust nightly New Lint Avoid too many static code paths Tracking Issue Split up our UItests into smaller parts Lint against impl in block expressions when could be outside of block expression Lint suggestions based on MISRA Cyclomatic Complexity should not count code in debugassert Panic in nightlymsvc cddc a d thread rustc panicked at failed to create span for type arguments error multiple input filenames provided with clippy and last nightly Doesnt work with custom rustc path multiple matching crates for serdederive in test usedunderscorebindingmacro Suggestion for new lint Cognitive Complexity Ignore cognitive complexity in macro expanded code FP clippydropcopy new called inside drop Clippy links to master instead of actual version Make findmap lint be more conservative Improve the cognitivecomplexity lint to show what lines are causing the complexity Clippy leaves cargo running in the background on SIGTERM New lint API complexity New lint Unnecessarily complex types New Lint Explicit ranges with p pn range pat expectfuncall expectfuncall recommends code which is not equivalent explimplcloneoncopy Disable explimplcloneoncopy when Copy is manually implemented explicitcounterloop explicitcounterloop improvement suggestion explicitcounterloop produces incorrect advice explicitintoiterloop Lint suggestions around vector iterations are counterproductive Tracking issue for RFC Clippy explicititerloop explicititerloop should warn T iter Lint suggestions around vector iterations are counterproductive Tracking issue for RFC Clippy explicitwrite Revive suggestion on explicitwrite extendfromslice New lint vecextend vec elem len is slow vecresize should be used instead filtermap lint flatmap into filtermap Make the filtermap lint more specific lint veccloneintoiterstuffcollect to suggest veciterstuffclonedcollect filtermap docs woefully incomplete add a lint for findmap Add utils helper for filtering out typelifetime parameters on generics Make findmap lint be more conservative False positive for unnecessaryfiltermap New lint map to Option followed by flatten filternext add a lint for findmap Improvement Idea the ilternext should also cover skipwhilenext findmap add a lint for findmap Make findmap lint be more conservative floatarithmetic lint long chains of intofloat additionsmultiplications floatcmp Findings from running Clippy on Servo Use consteval instead of constant for more lints Additions to floatcmp check Expand floatcmp to structs with PartialEq floatcmp false positive catching underflow Allow float comparison with zero Should runrustfix tests apply HasPlaceholders suggestions floatcmpconst Should runrustfix tests apply HasPlaceholders suggestions fntonumericcast fntonumericcast incorrect suggestion fntonumericcastwithtruncation fntonumericcast incorrect suggestion forloopoveroption Merge some lints together forloopoverresult Merge some lints together forgetref Tracking Issue Split up our UItests into smaller parts getunwrap False positive getunwrap identityconversion lint identityconversion name is misleading cargo fix identityconversion removes parenthesis with inner expression that needs them identityop Stronger macro check for identityop and typecomplexity Use consteval instead of constant for more lints Merge some lints together identityop warns for bitflag constant Consider excluding Durations associated constants from identityop lint ifletredundantpatternmatching Do not suggest replacing simple if let Some None with methods ifletsomeresult Add suggestion to ifletsomeresult lint ifsamethenelse detect if comparison chain that could be a tuple comparison instead Tracking Issue Split up our UItests into smaller parts FN implicit ifsamethenelse multiple matching crates for serdederive in test usedunderscorebindingmacro ifsamethenelse Should not warn for else if blocks implicithasher clippyimplicithasher shouldnt warn on FromThing for HashMapK V implicitreturn crash uitrivialboundstrivialboundsinconsistentrs indexingslicing Tracking Issue Split up our UItests into smaller parts Improve indexingslicing help message inherenttostring False positive for inherenttostringshadowdisplay inherenttostringshadowdisplay False positive for inherenttostringshadowdisplay inlinealways Warn if nonstandard Clone used in vec integerarithmetic integerarithmetic gives unhelpful warnings for const expressions integerdivision Lint stdpaniccatchunwind useless op on lhs of integer division or modulo intoiteronarray Calling intoiter on an oversized array only triggers intoiteronref intoiteronref Calling intoiter on an oversized array only triggers intoiteronref invalidatomicordering Extend invalidatomicordering lint to memory fence calls invalidregex Unrecognized escape sequence invalidupcastcomparisons invalidupcastcomparisons gives false positive on u to i wrapping cast itemsafterstatements also lint on items after statements in macros largeenumvariant largeenumvariant triggered in errorchain macro has unhelpful help message New lint large ErrE variant as compared with OkT for ResultT E lenwithoutisempty lenwithoutisempty lints if len and isempty are in different impl blocks lenzero Preliminary Results of building rust with clippy lenzero with Range suggests code cannot compile letandreturn Restrict letandreturn if the let binding is large Potential false positive for letandreturn letandreturn mistake letandreturn false positive letandreturn false positive Possible false positive with letandreturn letandreturn false positive letandreturn known problems letunderscoremustuse letunderscoremustuse is triggered when Debug is derived letunitvalue Findings from running Clippy on Servo Letunitvalue false positive when return type is type parameter linkedlist linkedlist false positive logicbug Rename logicbug manualmuladd manualmuladd suggests broken code muladd struggling with long expressions manysinglecharnames manysinglecharnames incorrectly triggered if singlecharbindingnamesthreshold mapentry mapentry false positive when returning before inserting mapentry false positive when map needs to be used while still borrowed by the entry matchbool Perhaps this matchbool case could be considered idiomatic matchrefpats Bikesheds to be done when RfCing clippy Possible suggestion improvements on matchrefpats bad matchrefpats suggestion matchsamearms False positive on matchsamearms matchsamearms suppress when reordering arms Another false positive matchsamearms vs Any False positive with matchonsamearms and macros Tracking Issue Split up our UItests into smaller parts False positive with matchsamearms multiple matching crates for serdederive in test usedunderscorebindingmacro matchwilderrarm matchwilderrarm Err is not wild matchwilderrarm triggers weirdly minmax Use consteval instead of constant for more lints missingconstforfn Wrong suggestion of const fn if member of member implements Drop missingdocsinprivateitems missingdocsinprivateitems does not honor allow statements missinginlineinpublicitems missinginlineinpublicitems and wasmbindgenstart mistypedliteralsuffixes BUG Incorrect mistyped literal suffix on long floats modulenamerepetitions Warn if nonstandard Clone used in vec moduloone Merge some lints together multipleinherentimpl Lint Multiple inherent impls mustusecandidate A allow should take precedence over D deny in CLI mustusecandidate is going mad false positives mutfromref Should the mutfromref lint apply to unsafe functions mutmut multiple matching crates for serdederive in test usedunderscorebindingmacro mutablekeytype False Positive Mutable key type lint is emitted on HashSets containing associated types mutexatomic mutexatomic and CondVar Consider removing mutexatomic needlessbool needlessbool triggers on cfg comparisons needlessborrow needless borrow does not trigger on block trailing expression needlessborrow suggests bad code when referencetoreference is required needlessborrow complains when a type alias with reference is used multiple matching crates for serdederive in test usedunderscorebindingmacro needlessborrow was temporarily moved to nursery in April needlesscontinue Appveyor build is broken Needless continue for match block needlessdoctestmain needlessdoctestmain yields false positive with proc macros needlessdoctestmain vs question mark operator needlesslifetimes Incorrect needlesslifetimes warning for impl Trait based code multiple matching crates for serdederive in test usedunderscorebindingmacro False positive for needlesslifetimes possibly due to async Give corrected code in examples needlesspassbyvalue needlesspassbyvalue and closures Is needlesspassbyvalue behaving properly Unsized rvalues now making this lint inaccurate needlessrangeloop Weird warning for needlessrangeloop Wrong hint about needlessrangeloop needlessrangeloop suggests using iter on a value that do not have iter method needlessrangeloop could suggest using clonefromslice in some cases Improve suggestions for needlessrangeloop Tracking Issue Split up our UItests into smaller parts A problem with needlessrangeloop False Positive needlessrangeloop Structs with nonmatching Index and Iter impls cause bad suggestions needlessrangeloop disregards multiple indexed variables needlessreturn Wrong needlessreturn suggestion with blocks cargo clippy alltargets issues diagnostics for library crate twice negmultiply FN negmultiply x newretnoself False positive in newretnoself if self type carries lifetime annotation newwithoutdefault Merge some lints together newwithoutdefaultderive ignores existing derives The useless attribute lint doesnt put the in the right place newwithoutdefaultderive help is confusing Meta issue for Rust API Guidelines Why newwithoutdefault is shown for structs with private fields newwithoutdefaultderive triggers on types which cannot deriveDefault When derive is already applied to struct suggest extending it not replacing it clippynewwithoutdefaultderive triggers and shouldnt noeffect Lint suggestions based on MISRA noeffect lint should also lint calls to constfn where the result is unused nonasciiliteral A should override W when it appears later on the command line nonminimalbool Lint any and similar nonminimalbool lint for meta items nonminimalbool can produce minimal but not human readable expressions notunsafeptrargderef notunsafeptrargderef false positives opref opref false positive opref false positive with deref coercions when comparing clippydropref will trigger on mut T as well as T optionandthensome Add resultandthenok lint optionmapunitfn Tracking Issue Split up our UItests into smaller parts optionmapunwrapor Merge some lints together Why does Clippy not suggest removing an Optionmap call with an identity optionmapunwraporelse Merge some lints together Why does Clippy not suggest removing an Optionmap call with an identity optionoption allowclippyoptionoption not working when paired with serdedeserializewith optionunwrapused Disable resultunwrapused optionunwrapused in tests Merge some lints together orfuncall False positive for orfuncall orfuncall bad output with vec Suggested code does not compile with orfuncall Truncated message outofboundsindexing outofboundsindexing false positive emptyarrayrs test removed because it ICEs on CI overflowcheckconditional false positive a b b is not really an underflow check panic foounwraporpanic Preliminary Results of building rust with clippy Rustdogme Suggest named parameters for complexlong format calls lint panics allow Possible suggestion improvements on matchrefpats Will not run and panicks on multiple bin sections in Cargotoml without bin flag this could sometimes panic lint Lint for Unnecessary Map DocumentationMarkdown Lints Lint stdpaniccatchunwind Clean up the error reporting in the cargo clippy code Figure out which Common Weakness Enumerations Rust or Clippy eliminates or mitgates Panic when compiling redisrs with clippy Lint unwrap in drop impls dont panic needless borrow does not trigger on block trailing expression Rust API Guideline Function docs include error conditions in Errors section Rust API Guideline Function docs include panic conditions in Panics section Meta issue for Rust API Guidelines Optional lint for functions that panic without mentioning panics in rustdoc Lint usages of tcxhirbody without accompaning tcxbodytables Attempting to run clippy on a single file causes it to crash Clippy fails as subcommand on Windows when rustc installed via installer Add a lint for panic being used Panic in nightlymsvc cddc a d thread rustc panicked at failed to create span for type arguments clippy fails on missing ehpersonality although panicstrategy is defined in custom target Improve indexingslicing help message expectfuncall recommends code which is not equivalent Any pitfalls Lint calls to nomangle functions that dont have inlinenever lint asserttrue false multiple matching crates for serdederive in test usedunderscorebindingmacro Perhaps this matchbool case could be considered idiomatic Lint emptyloop lint on nostd crash uitrivialboundstrivialboundsinconsistentrs Should the mutfromref lint apply to unsafe functions New lint dangerous use of vecsetlen unitcmp special handling of asserteqOptionunwrap RLS crashes on clippyusing rustc nightly eb d bde Lint leaky Drop impls that do nothing but drop items in a loop Should pick up panicformat matchwilderrarm triggers weirdly Extend invalidatomicordering lint to memory fence calls partialeqneimpl partialeqneimpl lint documentation incorrect possiblemissingcomma False positive in possiblemissingcomma precedence Lint suggestions based on MISRA possibly missing a comma here conflicts with rustfmt Lint negation followed by method call A allow should take precedence over D deny in CLI precedence should not warn for unary minus before odd function printliteral False literal with empty format string warning when printing two macros cargo clippy does not process build scripts printwithnewline Print with newline edge cases ptrarg Create more than lint groups Consequences of ptrarg Rust API Guideline Functions minimize assumptions about parameters by using generics Typedefs and ptrarg lint notunsafeptrargderef false positives ptrarg clarify about original type when newtype is just a Vec Option to disable triviallycopypassbyref in public functions questionmark Meta issue for Rust API Guidelines needlessdoctestmain vs question mark operator rangeplusone Do not suggest to use the closed interval syntax rangeplusone help suggestion should not remove braces rangeplusone lint wrongly suggests using RangeInclusive when Range is required and the other way around Do not lint rangeplusone inside implementations of IndexRangeInclusive redundantclone redundantclone in Rc context redundantclosure Add option to disable all linting in external macros Bikesheds to be done when RfCing clippy redundantclosurecall false positive in macros redundantclosure suggests wrong fix when the function being called is not Copy Redundant closure lint recommends invalid code False redundantclosurecall for a closure that has multiple calls redundantclosure should be in the Perf group False positive with redundantclosure and Deref clippyredundantclosure suggestion unnecessarily complicated False positive in redundantclosure when closure values lifetime is constrained False positive with redundantclosure redundantclosurecall redundantclosurecall false positive in macros False redundantclosurecall for a closure that has multiple calls redundantfieldnames FR redundantfieldnames should distinguish between all and some fields matching redundantpattern Do not suggest replacing simple if let Some None with methods redundantpatternmatching fixit suggestion fails to apply redundantpatternmatching Do not suggest replacing simple if let Some None with methods redundantpatternmatching fixit suggestion fails to apply redundantstaticlifetimes Clippy doesnt report errorwarnings after cargo check regexmacro regexmacro false positive replaceconsts Why is replaceconsts enabled by default resultmapunwraporelse resultmapunwraporelse suggestion masks error from result resultunwrapused Disable resultunwrapused optionunwrapused in tests Merge some lints together reverserangeloop Potential improvement to reverserangeloop shadowreuse Clippy doesnt honour allowshadowreuse Lint dangerous uses of shadowing clippy does not warn me of shadowing shadowsame Lint dangerous uses of shadowing clippy does not warn me of shadowing shadowunrelated Bikesheds to be done when RfCing clippy shadowunrelated breaks when intermediary bindings are used Tracking issue for RFC Clippy Lint dangerous uses of shadowing Incorrect message in shadowunrelated clippy does not warn me of shadowing shouldasserteq Extensions to shouldasserteq shouldimplementtrait shouldimplementtrait should include ToOwned FromStr shouldimplementtrait should not be triggered by fromstr with explicit type annotation Meta issue for Rust API Guidelines shouldimplementtrait should not warn async methods shouldimplementtrait triggers for next where the return value has lifetimes similarnames Lint request unnecessary passbyreference singlecharpattern Make SINGLECHARPATTERN check for bounds not self type singlecharpattern doesnt recognize scape sequences Slow suggestion of singlecharpattern Clippy doesnt report errorwarnings after cargo check singlematch Findings from running Clippy on Servo singlematch should suggest plain if when possible Invalid suggestion for singlematch Extend singlematch to handle return Wrong suggestion from singlematch Lint if lets that could be better worded as equality singlematch recongnize Ok or Errbla as FN singlematchelse multiple matching crates for serdederive in test usedunderscorebindingmacro Lint idea Bind ifelse returning bool and then using that binding to conditionally do something singlematchelse false positive singlematchelse Lint if lets that could be better worded as equality FN singlematchelse multiple matching crates for serdederive in test usedunderscorebindingmacro Lint idea Bind ifelse returning bool and then using that binding to conditionally do something singlematchelse false positive strtostring Preliminary Results of building rust with clippy idea Combination of strtostring and needlessclosure new lint for str to String conversion stringadd Merge some lints together stringaddassign Merge some lints together stringlitasbytes stringlitasbytes doesnt work correctly Incorrect suggestion of stringlitasbytes lint stringtostring Lint unnecessary conversion of OsString or CString to String suspiciousarithmeticimpl spurious suspiciousarithmeticimpl suspiciouselseformatting allman style brace formatting triggers suspiciouselseformatting suspiciousmap Improve documentation for suspiciousmap temporarycstringasptr vec asptrasmutptr should have a deny lint todo Allow some way of marking lints as TODO Dont suggest etareducible replacements in UNNECESSARYFOLD lint Suggestion Single if let instead of nested if let if let toomanyarguments toomanyarguments should ignore functions called new Improve toomanyarguments only highlight function arguments instead of entire function toplevelrefarg Suggest changing x to x in toplevelrefarg Wrong code example for the ref on an entire let pattern is discouraged lint Suggestions for toplevelrefarg should not move mut to the righthand side transmuteptrtoptr False positives when using transmute with raw trait object pointers to change trait object lifetimes transmuteptrtoref Suggestion Dont lose trailing semicolons and other contextrelevant stuff transmuteptrtoref suggestion doesnt with some outer expression types extend transmuteptrtoref to detect transmuting newtypes around ptrs False positives when using transmute with raw trait object pointers to change trait object lifetimes trivialregex trivialregex false positive andor incorrect hint for replace Incorrect hints from trivialregex for bytes regexes triviallycopypassbyref False positive with triviallycopypassbyref Option to disable triviallycopypassbyref in public functions typecomplexity Stronger macro check for identityop and typecomplexity Create more than lint groups Type complexity should not be considered when defining an associated type New lint Unnecessarily complex types typerepetitioninbounds False positive with typerepetitioninbounds and generics typerepetitioninbounds should not trigger on macrogenerated code typerepetitioninbounds not always helps unimplemented unnecessary binding in struct lint assigning to fields of an uninitialized struct Warn about Results only used in println False positive with useself and generics clippyunimplemented doesnt detect unimplemented with message shouldimplementtrait should not warn async methods boxedlocal false positive for Sized uninitassumedinit uninitassumedinit lint does not recognize trivial misuse unitarg catch with try block clippyunitarg and clippyunusedunit cargo fix unitarg removes calls to functions with sideeffects unitcmp unitcmp special handling of asserteqOptionunwrap unnecessaryfiltermap False positive for unnecessaryfiltermap unnecessaryfold Dont suggest etareducible replacements in UNNECESSARYFOLD lint Suggest replacing simple loops with specialized folds unnecessaryfold any and all may not always be safe replacements of fold unnecessarymutpassed False positives selecting system allocator have different docs for nightlybetastable channels unnecessaryunwrap unnecessaryunwrap should not trigger if the issome is just part of the conditional unneededfieldpattern unneededfieldpattern unreachable lint panics allow Lint for unconditional unreachable Lint suggestions based on MISRA clippyunimplemented doesnt detect unimplemented with message Suggest using Infallibe in trait implementations with a result type unreadableliteral unreadableliteral is annoying for hex numbers have different docs for nightlybetastable channels unreadableliteral for floatingpoint numbers BUG Incorrect mistyped literal suffix on long floats unusedioamount Clippy errors and says to use Readreadexact inside implementations of Readreadexact that dont directly use the output of Readread unusedlabel Add automatically applicable suggestion to unusedlabel unusedself FP unusedself triggers if only the lifetime of self is used unusedunit catch with try block clippyunitarg and clippyunusedunit usedebug Lint for Debug formatting in Display implementations usedebug lint should not trigger on debug log macro calls useself Tracking Issue Split up our UItests into smaller parts False positive for useself when using an associated type instead of the type itself False positive with useself and generics New Lint Unnameable type in public API useself lint suggests changing code to use outer type parameters breaking build useself lint false positive in macros useself false positive on derive Suggestion does not compile use self with associated types Suggestion does not compile use self with when implementing a trait for a generic type Suggestion does not compile use self with when implementing From conversion for the Boxdyn Trait False positive for useself when using corememtransmute in From impl useself lint fires on code expanded from a macro usedunderscorebinding Fix usedunderscorebinding multiple matching crates for serdederive in test usedunderscorebindingmacro uselessattribute The useless attribute lint doesnt put the in the right place Incorrect suggestion in uselessattribute lint uselessformat FN useless format formatting PathBufdisplay lint unused clippy allow attributes FN uselessformat writefformat FN useless format struct with fmtDisplay and format uselessformat tostring suggested where format could be omitted Extend uselessformat to lint values other than str and String uselessletifseq What about placeholders False positive on uselessletifseq uselessletifseq should not emit a warning if multiple assignments happen Incorrect suggestion by uselessletifseq lint Clippy suggests optimizing volatile operations away Shoudlnt do so uselessletifseq should not warn when variable is set from multiple places Bad suggestion of uselessletifseq when having side effects Suggest binding to a tuple if possible in the uselessletifseq lint uselesstransmute lint idea dangerous transmutes uselesstransmute being raised when its doing multiple casts False positives when using transmute with raw trait object pointers to change trait object lifetimes False positive uselesstransmute uselessvec uselessvec doesnt suggest a necessary vecbox Make VECBOX lint configurable over the size of T whileimmutablecondition whileimmutablecondition false positive with mut pointers whileletloop Preliminary Results of building rust with clippy whileletloop fails to account for lifetimes whileletloop false positive whileletoniterator False positive on whileletoniterator with nested while let Wrong suggestion on whileletoniterator whileletoniterator false positive incorrect suggestion for whileletoniterator Bad whileletoniterator suggestion when pattern is refutable wrongpubselfconvention Suggest using Cow on mixture of static str Strings Create more than lint groups wrongselfconvention wrongselfconvention does not recognize this Self wrongselfconvention fails for libstd RawEntryBuilderMutfromkey wrongselfconvention false positive for async fn into Pin mut self triggers wrongselfconvention zeroprefixedliteral decimal constant error zeroptr zeroptr lint detected for any lazystatic code Lint casting integers to pointers False positives selecting system allocator details Im pretty satisfied with the output Some lint names that are too generic like panic or exit need some extra work though Usage Prints all issues where the specified lint is mentioned either in the title or in the description USAGE clippydev issuesforlint FLAGS OPTIONS name name FLAGS all Create a list for all lints h help Prints help information V version Prints version information OPTIONS filter filter Comma separated list of issue numbers that should be filtered out n name name The name of the lint Your thoughts about having such a tracking issue changelog none Fixes changelog Dont trigger usedebug lint in Debug impl One might have code that looks like this rust fn takesvecvec VecString String vec as you can see they try to move the value out of the Vec but the compiler does not allow this because vec returns String error E cannot move out of index of stdvecVecstdstringString srcmainrs vec move occurs because value has type stdstringString which does not implement the Copy trait because a reference is returned one might be tempted to simply clone it rust fn takesvecvec VecString String vec clone It would be better to write rust fn takesvecvec VecString String vecintoiternextunwrap or rust fn takesvecvec VecString String vecintoiternth unwrap 