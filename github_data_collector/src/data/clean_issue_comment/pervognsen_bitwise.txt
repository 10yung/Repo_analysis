Hi author I subscribed your youtube channel and this repository However I havent seen any activities on this project since last months Can you let me know will you continue on this project The ionionvcprojpy script wasnt working for me I made changes to the prebuild event which allow me to build and debug my ion code The only thing I have to do now after running this script is retarget solution You can see I added packagepathparent and ioncmd to the substitution variables ioncmd assumes that the ion executable is named ion xml PreBuildEvent Command set IONHOMEionhome cd packagepathparent ioncmd flags package Command PreBuildEvent I believe my issues with the script were related to the VS terminal not picking up my IONHOME and also my perhaps nonstandard ion setup where I have an ionbat in my path which points to IONHOMEionexe This solution navigates instead to the directory above packagepath rather than ionhome and uses an absolute path to ion ioncmd I started reading rattlepy and noticed a couple of apparent mistakes Im still getting acquainted with the code and Im using Python which wont run all of rattle so take this with a grain of salt Merge branch addenumtypeinfos This introduces type information for enum types The ion program can now know that a type is an enum and what is its base type and size as well as the values of available constants in the enum see enumitems and numenumitems This allows user programs to print the friendly enumeration constant associated with a value or validate that a value is a legal one The name of the constant is the external C name ie as mangled into the C symbols similarly to how type names are also introspected This guarantees unicity however means that a ion program looking to generate new ion programs would have to reverse the manging somehow The same issue is true for existing type names however Note that this creates a distinction between enum constants and plain constants enum constants are known to the program and can be shared outside This matches my experience of using enumerations in applications Initially I wanted to supply sorted arrays for an enumeration type by ame and value to make lookups more efficient However to do this at compile time would necessitate the ion compiler to evaluate the enum expression Right now the value of the expression is only known to the ion program after the C compiler has done its job So fast lookups subOn for large enumerations will have to be done by hand in the ion program using raw type infos for now ion struct A b B says Unresolved type name B staticassertsizeofA struct B data int The workaround is to rearrange declarations so that B is defined before A With the following struct FooArray x int struct FooWithConstArray array FooArray const func testconstmembers foo FooWithConstArray assertfooarrayx Then when TypeInfo gets written ion generates TypeInfoTYPECONST size sizeofint const align alignofint const base TYPEID TYPEARRAY int the int const is not parsed as a valid type expression Somehow the type entry seems invalid to me as all arrays in C are const So the type info should probably not be generated at all TYPECONST with base TYPEARRAY typetocdecl could be instrumented to assert that a TYPECONST should not be an array See repro at sh ion os osx arch x bugs cc outbugsc o bugself bugself echo rc Expected Processed symbols in packages Generated outbugsc rc Got Processed symbols in packages Generated outbugsc fooDesktopbitwiseionbugssizebugion warning incompatible pointer types passing ullong aka unsigned long long to parameter of type sizet aka unsigned long Wincompatiblepointertypes fetchvalue num numsize fooDesktopbitwiseionbugssizebugh note passing argument to parameter destsizeptr here int fetchvaluevoid destptr sizet destsizeptr warning generated rc I would have expected C apis expressed in terms of sizet to be exposed in ion via usize It appears that on Macos at least sh cc E outbugsc grep E typedef uint ttypedef sizet C typedef unsigned long long uint t typedef long unsigned int sizet Since usize is defined as uint we see that these types differ Im currently a bit behind your schedule so I might have missed some information but are there news about defer statement no needed formatter C output C single header output completion plugins output renaming being added to ion thanks