 an Assembly as the Assembly name isnt always the same as the namespace it was the same in the unit tests thats why it worked there This change requires that projects that has the same namespace as the project name has to have the full namespace passed into the root namespace I have updated the affected unit tests When Im using the constructor of EmbeddedRazorProjectItem its setting the template key to assemblyGetNameName which will not include the namespace So the embedded views arent found and theres no way to override it I believe the issue is in this line There is also an issue that both the RootNamespace and Assembly properties that are exposed in the class have the setter exposed but changing them wont do anything the fullTemplateKey is only set in the constructor Suggested fixes Fix the constructor that takes an assembly so the full namespace is included or require the root namespace to be specified and overriding the full key Either remove the settings on the properties or implement it properly so setting them will change the fullTemplateKey This was my suggestion to make the TemplateRenderer stateless to avoid the issues that caused the failure of Layout to be rendered when using await IncludeAsync I have created a few tests which cover common cases which I frequently use in my projects that leverage Razorlight project which include IncludeAsync Sections Simple case of one nonrequired section Case of nonrequired and required sections Case of section which uses IncludeAsync Case of a nested partial IncludeAsync being used within a template being rendered with IncludeAsync Also I added a new dependency for the Tests project which is Snapper to testing the rendered results easier by using snapshot testing Describe the bug Since upgrading to the latest version of Razorlight official release I was using unofficial before I am experience the issue that sections arent working anymore I keep getting the error The name section does not exist in the current context To Reproduce I am working on a unit test which coverage this breakage Expected behavior Information please complete the following information OS Ubuntu Platform net Core RazorLight version beta Are you using the OFFICIAL RazorLight package Yes Visual Studio version I am using Rider Additional context I had to upgrade from the unofficial package to the official beta because it has net core support before I was using the net core which worked happilly The current RazorLight excellent library thank you supports the Razor language syntax With ASPNET Core an updated language syntax and base library and have been introduced with MicrosoftAspNetCoreRazorLanguage is there any plan to upgrade RazorLight to support this Example of new language feature local functions a Helper replacement div Hello div functions void Hello pHello worldp Is your feature request related to a problem Please describe cshtml files layout pages definitions are enforced to be rooted per site root For file system configuration the basic relative access should be supported Describe the solution youd like Layout Layoutcshtml Above layout statement does not work Additional context A solution proposal TemplateRendererRenderLayoutAsync calls engineHandlerCompileTemplateAsync with a single parameter A second parameter can be added to this call in order to give the relative information from the previousPageLayout Then CompileTemplateAsync function would be able to create relative path This proposal requires significant change on a public API Hence I am not creating a PR After analyzing the open and closed issues for RazorLight they really fall into two categories Wanting to use RazorLight and plain old strings to HTML use case Wanting to use RazorLight in some deployment scenario we didnt think of I think taking PRs to fix the first issue is straight forward but to fix the second issue requires detailed understanding of how NET Core NET Framework links dependencies The FAQ tries to help dummy some of this stuff down but in reality I dont even know all the permutations I doubt Microsoft does either hence why Ive pinned as a key issue for RazorLight Plan is to use Dockerfile to manage the default build pipeline but then create Dockerfile overloads for the various environments we might target Open Questions How should we manage the permutations There is no good way to detect specific verison of NET Framework and Microsoft doesnt seem interested in tackling such detection as the old NET Framework is out of the door Thus the following Dockerfile conventions while robust might be unrealistic to get right net WpfDockerfile net WpfDockerfile net WpfDockerfile net ConsoleDockerfile net ConsoleDockerfile net ConsoleDockerfile A simpler approach might be to simply have netFrameworkWpfDockerfile netFrameworkConsoleDocker etc I am trying to follow this tutorial as i want to inject in my layout file but when i try to add razorLight in my startup file i get this error Reference to type IEngineConfiguration claims it is defined in RazorLight but it could not be found I have an layout file this is the file i want to inject that looks like this headstylesome stylestylehead body div idcontentRenderBodydiv body My template is like this Layout layoutfile table content for table table I have downloaded razorlightMVC and using it in Startup file like this but then i get the error toddams It seems OrchardCMS has defined a build matrix explaining some of the ways they configure things Their scenario is similar in that they support non Razor This might be a rabbit trail but my thought is there are a bunch of different knobs were turning to get RazorLight to work right all for difference reasons