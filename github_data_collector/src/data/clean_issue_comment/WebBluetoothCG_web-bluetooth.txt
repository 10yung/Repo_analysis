The spec currently does not specify how Bluetooth device permissions should be stored There is a note that mentions that an origin can access any service whose UUID was listed in the request device filters and optional services The WebUSB spec has a explicit algorithm for storing granted device permissions so we should probably do the same for Web Bluetooth We have User Activation v model in the HTML spec now Triggered by user activation should now be changed accordingly See the HTML issue mentioned below The current getAvailability is an async API and the given example looks like this js navigatorbluetoothgetAvailabilitythenisAvailable get BLE availability by the promise value navigatorbluetoothaddEventListeneravailabilitychanged e get BLE availability by evalue This looks inconsistent a bit though its working absolutely and a little bit weird with the async attribute take a look at the type of example js navigatorbluetoothonavailabilitychanged e navigatorbluetoothgetAvailabilitythenisAvailable assertequalevalue isAvailable possible to be failed unfortunately Within this inconsistent but correct behavior thats easier to produce a buggy application See the Overall Bluetooth availability section at nd algorithm block it shows up the UA SHOULD hold the status in memory and fires event when it gets changed so the case to get it still be async might be the firsttime fetch But IMO blocking this method is another solution to us util the user type ACCEPT or REJECT An equivalent to watchAdvertisements which fires an event in a Service Worker when an advertisement is received Use case Allow the user agent to detect in the background when a device supported by a previously visited site has come back into range and offer the opportunity for the user to reopen the page to connect to the device This is similar in concept to the Background Sync API This is a subset ofrelated to the request in Would be nice if we could specify which procedures exactly we should do here eg If the Write bit is set in characteristic s properties use the Write Characteristic Value procedure otherwise use the Write without Response procedure I think currently we just let each platform decide which creates differences across platforms and could result in differences across implementations Originally posted by gortuno in A reliable write is distinct from writewithresponse in that it allows writing multiple characteristics as part of a single transaction This will require additional API work to specify how these transactions are begun committed or aborted OS APIs Android BluetoothGattbeginReliableWrite Windows GattReliableWriteTransaction macOS Appears not supported BlueZ Appears not supported It would be great if it does or theres a plan on it First the source code for the BLE Peripheral Simulator is a tremendous resource for anyone investigating Web Bluetooth There is a an approved list of GATT Services When I modified the Android source code to use a custom defined GATT service easy to do by simply specifying your own UUID in the Android code pairing from the web page to the Android app running the GATT sever fails The Web Bluetooth documentation does state If device s advertised Service UUIDs have a nonempty intersection with the set of Service UUIDs add device to result and abort these substeps for pairing Does this mean only services in the approved GATT list are supported If so what is the rational It seems that such a restriction would limit innovation CC reillyeon domenic The default values of BluetoothLEScanOptions should be as if you didnt specify a filter to RequestLEScan