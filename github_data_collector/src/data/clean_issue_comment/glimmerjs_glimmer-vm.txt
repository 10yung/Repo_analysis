Fix for glimmer warning about possible XSS when static styles are used with element modifier applied to the same element stylewarningstestjs added test demonstrating problem templatecompilerts extended condition for trusting static styles attributes and removed duplicate branches allocatesymbolsts my guess is that there was a typo so I fixed it without it tests fail please double check this change Parsing TITLEaVariable a titleTITLE with glimmervmsyntax fails with the following error SyntaxError Unclosed element TITLE The error is thrown on this line I get the same error for SCRIPT and STYLE Is this something expected Based on an idea that krisselden and I had while working on this adds tests that run a number of iterations removing a random node and confirming that the final rehydrated eg client rendered HTML is correct In order to make these tests actionable the infrastructure added here provides a way to replicate specific iterations upon failure The way this works is based on QUnits internal QUnitconfigseed implementation When a QUnit test suite is ran with the seed query param set with no value eg testsindexhtmlhidepassed seed QUnit will choose a random seed and use that seed to choose a randomized test order Then if a failure occurs with the randomized and seeded test run you can run the tests again with exactly that seed value by specifying the seed query param with the failing seed value eg testsindexhtmlhidepassed seedTHEVALUEHERE The implementation here piggie backs on that system to use the QUnits seed value along with a copied version of their hashing function qunitjsqunitsrccoreutilitiesjs L L and seeded randomizer qunitjsqunitsrccoreprocessingqueuejs L L in addition to the iteration being ran to always select a known value to remove This means that given the correct seed and iteration number we can easily replicate specific failure scenarios without manually having to track it down The way youd do this is Run the tests with testsindexhtmlhidepassed seed until a failure occurs Look at the failed tests assertion grab the rerun URL printed in the failed assertion Run the tests again with that set of query params eg testsindexhtmlhidepassed seedSEEDHERE iterationITERATIONHERE Currently includes the changes from but will rebase once that lands After talking with pzuraq what I think is needed to get Glimmer Native list views fully working cleanly is rehydration I wanted to create this issue to kick off the conversation and perhaps I could help out with implementation given direct tasks The issue I need to solve regarding list views is as follows I render a page in nativescript which has a certain glimmer result and state On that page we add a ListView ListView tells us that we need to generate x items so Glimmer Native creates a StackLayout to use as a container then tries to render a template into that stack layout The issue being it was rendered outside of the page element so Glimmer knows nothing about the context or element This prevents tracked properties and misc other things like if blocks from working correctly When the user scrolls instead of creating elements we reuse the elements created and just swap the data attached to the element to be another list item Here is how svelte works as an example They are able to just create a new component and give it a target which correctly provides the right context and binds everything correctly For a glimmer implantation perhaps we could do something like this const wrapper createElementStackLayout as NativeElementNode const nativeElement wrappernativeView const componentTemplate CompilablethistemplateElcomponentargssrc const compiled componentTemplatecompileApplicationcontext const result Applicatonresult result from page rerender const cursor element wrapper nextSibling null as Cursor const component resultaddComponentcompiledTemplate cursor state nativeElementcomponent component return nativeElement If any of my terms are misleading or incorrect I apologize still trying to learn the ins and outs of glimmer It is unclear what this document is describing and what version it belongs to so we might as well delete it Edit Changed entire description since it was no longer relevant This PR resolves by Checking the state of the the tokenizer whenever it hits a MustacheStatement and throws a SyntaxError if the tokenizer is in in an EndTag Quite open to feedback on this approach As well as what the error message should be say exactly for now this is valid syntax hbs div modname div and its parsed like pzuraq is it make sence The perf work we did recently requires us to update to a more recent version of TS and there are failures on the latest TS for some of our typings It would probably be best to update and get the latest features and fix the typing issues When a ConcatStatement has a TextNode as its first part the location information of that TextNode is wrong A specific test for this existed but the location information used in the assertion was wrong weary You can see the issue in this AST Explorer gist The starting locations for the first part in each of those concat statements are different the one that starts with a text node is wrong