Tested with Boost versions and Work in progress x Move from vector of vectors to boostmultiarray x Unify interface clean clean up magic numbers x Precalculate offsets for better performance Backward save compatibility Unit tests for regular and edge cases Any playtested feedback would be appreciated Changes so far the AI will now consider attacking multiple units the preferred strategy now is to avoid collateral damage if possible rather than maximizing enemy damage only the AI will now consider blocking enemy shooters some generic cleanup and refactoring The code is full of temporary hacks and logs and whatnot please do not review it just as far as coding style goes just yet Helps in selecting skills for AI heroes Merging this pull request starts release cycle There is already a release draft for beta merge commit of this PR will be released No new features and refactorings will be accepted until release So this is very dumb fix but I need some confirmation from AI guys before I merge it to develop UPD to clarify what exactly I trying to fix Problem is that VCAI use VisitObj goal to visit hero and when hero become invisible after FoW change its cause crash since apparently VCAIheroMoved used validateObject for enemy heroes Apparently validateObject doesnt remove lockedHeroes goals when ebemt hero is no longer visible Needs some testing to make sure AI logic has not changed Conditions which could trigger for goal not being neither abstract nor elementar or being both at same time are probably most prone to potential errors Need to make sure new VCAIdecomposeGoal conditions will trigger under same circumstances as old ones Branch is good to review now as next commits will rather contain cosmetic changes unless I remind myself something else with high priority that should be fixed Did not plan to make PR but Travis did not put automated build for branch Hopefully this time it will work Goal of this branch is to replace static enemy hero AI value with separate goal designed for visiting special objects and evaluating them using separate fuzzy engine 