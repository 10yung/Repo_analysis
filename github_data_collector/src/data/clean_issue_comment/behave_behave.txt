Using Behave Running any feature file that contains example data containing unicode such as will cause Behave to exist with error UnicodeEncodeError ascii codec cant encode characters in position ordinal not in range The stack trace shows this usrlocalbinbehave in module if name main sysargv resubrscript pyw exe sysargv sysexitmain usrlocallibpython distpackagesbehavemainpy in mainargs config Configurationargs return runbehaveconfig if name main usrlocallibpython distpackagesbehavemainpy in runbehaveconfig runnerclass resetruntime runner runnerclassconfig failed runnerrun except ParserError as e printuParserError s e usrlocallibpython distpackagesbehaverunnerpy in runself with selfpathmanager selfsetuppaths return selfrunwithpaths def runwithpathsself usrlocallibpython distpackagesbehaverunnerpy in runwithpathsself streamopeners selfconfigoutputs selfformatters makeformattersselfconfig streamopeners return selfrunmodel usrlocallibpython distpackagesbehaverunnerpy in runmodelself features formatterurifeaturefilename failed featurerunself if failed failedcount usrlocallibpython distpackagesbehavemodelpy in runself runner continue failed scenariorunrunner if failed failedcount usrlocallibpython distpackagesbehavemodelpy in runself runner for scenario in selfscenarios REQUIRE BUILDSCENARIOS runnercontextsetrootattributeactiveoutline scenariorow failed scenariorunrunner if failed failedcount usrlocallibpython distpackagesbehavemodelpy in runself runner for step in selfallsteps if runsteps if not steprunrunner CASE Failed or undefined step Optionally continueafterfailedstep if enabled usrlocallibpython distpackagesbehavemodelpy in runself runner quiet capture if not quiet for formatter in runnerformatters formattermatchmatch if capture usrlocallibpython distpackagesbehaveformatterprettypy in matchself match selfprintstatement selfprintstepStatusexecuting selfmatcharguments selfmatchlocation selfmonochrome selfstreamflush usrlocallibpython distpackagesbehaveformatterprettypy in printstepself status arguments location proceed selfstreamwritetextformattexttext linelength lentext selfstreamwriteargformattextargoriginal linelength lenargoriginal textstart argend Note This did not occur with Python but does occur with Python I have some problems to confirm The features directory must needs a steps subdirectoryCan I change it to another name pswhen I change the nameif I run the program I will get an error such as cant find the steps path could I design a directory structure like this stepspy featuresfeature enviromentpy file must under the features subdirectory I look forward to your reply thank you very much Im writing a test scenario with a step that requires a table of data However the test is sensitive to whether there is a space at the start of a value or not So frog needs to be treated differently to frog This doesnt work because behave strips whitespace at the start and end So in this case the two frog strings end up the same Column frog frog I appreciate that I can lay this out with quotes added and then strip the quotes off in my step code like this Column frog frog However I was wondering if there is any built in way to handle this with behave that wouldnt require the extra step code In bash it is common to check if an executable has succeded or failed by checking the variable powershell uses LASTEXITCODE windows command line has ErrorLevel Does behave set the Exit Status in any predicatble way so that a script can tell if a test run has failed If it does some explanation of that might be helpful on this page Traceback most recent call last File C Program Files JetBrains PyCharm plugins python helpers pydev pydevdbundle pydevdxmlpy line in framevarstoxml xml vartoxmlv strk evaluatefullvalueevalfullval File C Program Files JetBrains PyCharm plugins python helpers pydev pydevdbundle pydevdxmlpy line in vartoxml elif hasattrv len and not isstringv File C Users Richard PycharmProjects translatortestingframework venv lib sitepackages behave runnerpy line in getattr return selfdict attr KeyError len Unexpected error recovered safely Right now I am using celeryalwayseagerTrue in environmentpy file which is just executing an asynchronous celery task like a function but I got stuck at an API where we are doing some thing like below def activestatusself request pk obj getobjector queryset pk objactive True objsave enddatetime sec deactivestatusapplyasynckwargsobjdict etaenddatetime deactivestatus is a celery task which update the status of object obj back to False after duration specified in enddatetime But right now due to celeryalwasyeagerTrue setting it just picks that task and execute it right away without considering the delay duration I thought there must be some way to configure celery in behave but not sure how it gonna accomplished I didnt found something similar in their docs as well as other available resources If anybody have any idea about the same or something similar that would be really helpful Thanks This all started here Im making a rather large test migration from Aloe to Behave find name feature xargs cat wc l Currently all our tests are inside our apps like so py feature files all in the same folder inside EACH app projectappfeatures initpy sometestfeature someteststepspy stepspy I do not want to make this migration any more painful than it needs to be so my plan is to modify behaverunnerRunner BehaviorDrivenTestRunner to find my tests in the appropriate place Right now there is no way for me to modify the way this works This is the exact reason django exposes testrunner and i was very surprised this was something overlooked in this project Making this modification works great managepy behave behaverunner myprojectrunnerRunner python import os from behaverunner import Runner as BaseRunner loadstepmodules from djangoconf import settings class RunnerBaseRunner def loadstepdefinitionsself extrasteppathsNone steppaths listextrasteppaths or for root dirs in oswalksettingsBASEDIR for dir in dirs if direndswithfeatures fullpath ospathjoinroot dir steppathsappendfullpath loadstepmodulessteppaths hi I see that this is an issue already handled in but Im having difficulties in getting the parameter data Im using behave to validate Cypher coverage for RedisGraph using the openCypher TCK scenarios One of the scenarios is as follows Scenario Outline percentileDisc Given an empty graph And having executed CREATE price price price And parameters are percentile p When executing query MATCH n RETURN percentileDiscnprice percentile AS p Then the result should be p result And no side effects Examples p result Retreving the headings of the table percentile p returns the strings percentile and p where I would expect to have the value of p instead please advise How to write a image to behave report How to write a text to behave report It would be nice to be able keep feature tests inside other markdown formats in order to include further documentation outside the scope of the actual feature test TheRobotFramework and Guage do something similar The simplest way may be to parse markdown files for codeblocks annotated with gherkin formatting and to consider treat codeblock and independent feature file featuresmyfeaturemd My File Some markup outside of the scope of the feature background possibly including a history of design decisions images diagrams etc gherkin Feature showing off behave Scenario run a simple test Given we have behave installed When we implement a test Then behave will test it for us 