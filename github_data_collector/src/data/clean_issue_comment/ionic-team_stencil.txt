Stencil version run npm list stencilcore from a terminalcmd prompt and paste output below stencilcore Im submitting a check one with x x bug report feature request support request Please do not submit support requests here use one of these channels or Current behavior When generating a dist build for a library the collectionmanifest was previously generated at distcollectioncollectionmanifestjson This file doesnt seem to be generated When I use my component library in my app the app doesnt render due to this file not being present Expected behavior When this file generates I can use my library in another project Steps to reproduce Check out the beta branch on Ive tested in other repos too with the same result NOTE Before submitting an issue please consult our docs Stencil version run npm list stencilcore from a terminalcmd prompt and paste output below stencilcore Im submitting a check one with x x bug report feature request support request Please do not submit support requests here use one of these channels or Current behavior Async component initialization and queue management using rAF are causing noticeable flickers when custom components are composed Updates that should be dealt with within a single animation frame now instead will be spread out over multiple frames This deteriorates the app experience bug Describe how the bug manifests Expected behavior Id expect a single render update caused by propstate changes to be completed as a whole I managed to emulate this by either replacing the rAF with a direct call or by disabling initializeNextTick expected Other information A somewhat related problem occurs when combining multiple component libraries I assume that each component library will have its own runtime and scheduler in which case updates will be uncoordinateddecoupled even more NOTE Before submitting an issue please consult our docs Stencil version run npm list stencilcore from a terminalcmd prompt and paste output below stencilcore Im submitting a check one with x x bug report feature request support request Please do not submit support requests here use one of these channels or Current behavior When executing insertBefore on a Stencil element in a polyfilled browsers a NotFoundError occurs as the parentchild relationship between the element and reference node is changed by content in the shadowDOM in other browsers This a primarily an issue for content slotted within a Stencil element The same issue occurs in the removeChild polyfill Expected behavior insertBefore wrapper verifies that the calling node is the parent of the reference node and adjusts accordingly Steps to reproduce In elements that support slotted content mutate its children insert before Our case was a custom select with dynamically rendered options Below is an approximation of the implementation Related code tsx Component tag customselect shadow true styleUrl stylescss export class CustomSelect implements ComponentInterface render return clickelsewhere attrs custominput attrs div classcustomselectdropdown customelementdropdown div classcustomselectoptions slot div div clickelsewhere tsx Component tag customoption shadow true styleUrl stylescss export class CustomOption implements ComponentInterface render return div roleoption attrs div classcustomoptionselection thisselected customicon typecheckmark classcustomoptionselectionicon div div classcustomoptioncontent slot div div html customselect div hidden classreferencenodediv customselect script const newChild documentcreateElementcustomoption const referenceNode documentquerySelectorreferencenode documentquerySelectorcustomselectinsertBeforenewChild referenceNode script Other information The real case occurs in a Ember app where insertBefore is called by glimmer during the template render I would recommend verifying that the calling node is equivalent to the reference nodes parent in the wrapping DOM polyfill where the native insertBefore method is called Jcallthis a c Below is what we implemented in the short term before we import the Stencil code ts function remapInsertBefore void const nativeInsertBefore windowNodeprototypeinsertBefore function wrappedInsertBeforeT extends Nodethis any newChild T refChild Node null T let referenceNode this if refChild refChildparentNode referenceNode refChildparentNode referenceNode refChildparentNode return nativeInsertBeforecallreferenceNode newChild refChild as T windowNodeprototypeinsertBefore wrappedInsertBefore function remapRemoveChild void const nativeRemoveChild windowNodeprototyperemoveChild function wrappedRemoveChildT extends Nodethis any oldChild T T let referenceNode this if oldChildparentNode referenceNode oldChildparentNode referenceNode oldChildparentNode return nativeRemoveChildcallreferenceNode oldChild as T windowNodeprototyperemoveChild wrappedRemoveChild if windowElementprototypeattachShadow remapInsertBefore remapRemoveChild I have added a dependencies boolean property to OutputTargetDocsReadme this allows the developer to disable the dependencies part of the markdown readmemd file If the property is undefined the dependencies will still be rendered Stencil version stencilcore using next Im submitting a x bug report feature request support request Current behavior Hydrate app renderToString causes Eleventy to throw Unexpected identifier let scopeId error when using next flag Expected behavior Without next flag everything is working like previously Steps to reproduce I m basically trying to do what I ve described in our documentation here This works in without the next flag but not anymore when using next compiler The exact error in console is shell Eleventy fatal error more in DEBUG output Error in your Eleventy config file duetdocseleventyjs EleventyConfigError was thrown Unexpected identifier SyntaxError was thrown duetpackagescomponentshydrateindexjs let scopeId SyntaxError Unexpected identifier at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at Modulerequire internalmodulescjsloaderjs at require internalmodulescjshelpersjs at Objectanonymous duetdocseleventyjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs Related code js const hydrate requirepackagescomponentshydrate moduleexports functionconfig configaddTransformhydrate async content outputPath if outputPathendsWithhtml try const results await hydraterenderToStringcontent clientHydrateAnnotations true removeScripts false removeUnusedStyles false return resultshtml catch error return error return content Stencil version stencilcore Im submitting a check one with x x bug report feature request support request Please do not submit support requests here use one of these channels or Current behavior The project consisting of several packages in a lerna environment builds but throws this error in the console in the browser index d f f js TypeError Cannot read property hostElement of undefined at setValue index d f f js at MyComponentset as first index d f f js at new MyComponent mycomponententryjs at initializeComponent index d f f js Expected behavior Compiles AND runs successfully Related Slack conversation Steps to reproduce Repo that reproduces the case Stencil version stencilcore Im submitting a X bug report Current behavior Transpiling a component using stencilcore compilerstenciljs generates invalid code Steps to reproduce check the result code in the console Generated constructor cant run no method thisregisterHost working fine in previous versions thats what we use on Thanks NOTE Before submitting an issue please consult our docs Stencil version run npm list stencilcore from a terminalcmd prompt and paste output below stencilcore Im submitting a check one with x x bug report feature request support request Please do not submit support requests here use one of these channels or Current behavior Describe how the bug manifests I try to run command stencil generate loremipsum but instead of generating folder loremipsum its generated folder ipsum But the tag component and test name are correct though js import Component Host h from stencilcore Component tag loremipsum styleUrl ipsumcss shadow true export class Ipsum render return Host slotslot Host Expected behavior Describe what the behavior would be without the bug It should generate files and the folder with loremipsum Steps to reproduce If you are able to illustrate the bug or feature request with an example please provide steps to reproduce and if possible a demo Run npx stencil generate loremipsum Related code tsx insert any relevant code here Other information List any other information that is relevant to your issue Stack traces related issues suggestions on how to fix Stack Overflow links forum links etc Following up on this tweet I think the CLI could provide some simple hooks to make it easier to integrate and work with other tooling I was hoping to open this up to the community to help design this API so we can follow some of the best practices and ideas out there Throughout the build the CLI receives events from the compiler of when it starts its progress and at the end it the compiler provides the cli with the build results If we were to have hooks fire off when the build starts and finish what would you envision the API should look like Thanks in advance