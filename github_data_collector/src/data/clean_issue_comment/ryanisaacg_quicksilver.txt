Restricting the formats available in image upstream dependency to get images loading in WASM builds This is a PARTIAL FIX TO APPEARS TO WORK FOR PNG BUT NOT JPEG Changed the following line in Cargotoml image version defaultfeatures false features pngcodec jpeg Motivation and Context Images displayed on different native platforms Image display crashes out WASM on Chrome and Firefox Mac and Windows I attempted bumping image but without happiness This is a backport fix so not putting more effort as we look forward to This way gamepad support via gilrs doesnt get included unless Quicksilvers gamepad features is actually enabled Checks Go over all the following points and put an x in all the boxes that apply If youre unsure about any of these dont hesitate to ask Were here to help x I have read CONTRIBUTINGmd I have updated CHANGESmd with BREAKING next to all breaking changes Features that have yet to be reimplemented and are planned x Rendertotexture Surface Text rendering Resize handling A Lyon helper x Blending support Audio support Helpers for planning when to update draw Texture filtering and tiling Features that are yet to be reimplemented and are a maybe Input state caches like Keyboard Mouse Modifiers Direct access to the golem graphics API Documentation Migration guide Examples for each feature how to integrate the features Note how to use mint to convert Quicksilver types into other geometry library types Create a small playable game to demonstrate an endtoend usage of the API x Overhaul the workflow docs like the issue templates PR template CONTRIBUTING etc Update the website Document the async workflow for loading assets using other event sources during the event loop Feedback required x Should the Scalar API be kept eg keep paying the compiletime process for generics to be able to write terse things like Rectanglenewx y width height or require explicitness x Should geometry be split into a separate crate to allow use outside Quicksilver x Should image formats other than PNG be supported outofthebox Theyre not widely used can cause issues and cause binary bloat x How should key repeats be handled See What is the best way to read the window size and offset when using ResizeStrategyFill I use ResizeStrategyFill with a square world size so that my game fills the screen in portrait or landscape aspect ratios This works great for the gameplay elements because the focus is the center of the screen so trimming off the edges doesnt hurt anything However this does not work well for UI elements at the edges of the screen Id like read the screen size so I can position ui elements to stay at the edges in any aspect ratio and reposition the elements if the screen size changes window resize or a phone rotating from portrait to landscape I found Windowscreensize which returns the width and height of the full virtual area which can be scaled to screen units using the projection matrix but I dont see a way to get the screen offset which would also be needed to compute the actual screen size and the location of the edges of the screen There is a Windowscreenoffset function but the access is set to pubcrate Describe the bug The documentation for ButtonStatePressed states that it only gets triggered if they key was pressed in this frame However after a slight delay with the button still being held this events gets spammed like in a text field when pressing a button long enough So this is either an implementation bug or a documentation mistake in which case it would make sense to provide a way to disable key repetition To Reproduce rust use quicksilvergeomVector inputButtonState lifecycleEvent State Window run Result struct App impl State for App fn new ResultSelf OkApp fn event mut self event Event mut Window Result match event EventKey ButtonStatePressed printlnpressed Ok fn main runAppTest Vectornew Defaultdefault Environment and versions please complete the following information Environment Arch Linux under i Rust compiler version nightly c a Quicksilver verison Describe the problem you want to solve A clear and concise description of what the problem is Ex Im always frustrated when Currently theres no way at all to have custom shaders which means that operations that should be fairly simple eg applying a negative filter to the entire screen for an effect are basically impossible Describe the solution youd like What do you think should be changed Once is completed a unified graphics API can be presented to consumers across all platforms which is the best way to expose shaders Without custom shader support or at least runtimeeditable shaders techniques like FXAA arent possible so thats an important consideration It would be nice to give quicksilver some sort of flag to have assets as part of the compiled binary x Images x Fonts Sounds Currently theres no way in quicksilver to do things like left right balancing largely because I personally neglect sound in my own projects The sound API is in sore need of some touchups Load sounds from a binary chunk Play a sound Loop a sound Left right balancing Hold a handle to a playing sound PauseResume the sound Stop the sound Query if that sound is playing 