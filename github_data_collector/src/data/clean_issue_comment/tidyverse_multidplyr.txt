Repeatedly making a copy of a party df making some changes and deleting the object uses an increasing amount of memory on the nodes Shouldnt deleting the object trigger deletion of the objects in the nodes I guess one could start a new cluster within the loop but in my application these are extremely large objects i would like to avoid having to repartition r librarymultidplyr librarydplyr warnconflicts FALSE librarynycflights cluster newcluster flights flights groupbydest partitioncluster printclustercallclustersortsapplyls functionx printformatobjectsizegetx unit auto fori in printpastei i removeflights clustercallclusterprintgc printclustercallclustersortsapplyls functionx printformatobjectsizegetx unit auto flights flights mutatesumtime deptime scheddeptime gc createcluster no longer exists in the code base It is in the documentation r devtoolsinstallgithubhadleymultidplyr Skipping install of multidplyr from a github remote the SHA ac e has not changed since last install Use force TRUE to force installation librarymultidplyr createcluster Error in createcluster could not find function createcluster I would like to wrap multidplyr code into a function since I am applying the parallelised multidplyr code to multiple datasets However this significantly slows the processing speed to a point where the parallelisation of the code is not advantageous anymore in terms of run time Is there a fix for this Am I doing something incorrectly I believe that this may have something to do with the global environment vs local environment to the userdefined function Below is an example to illustrate the effect of wrapping multidplyr functions into a userdefined function in terms of run time Note I understand that for this particular example itself it is not advantageous to use the multidplyr commands vs dplyr since the overhead will outweigh the advantage of parallelising however the issue I want to highlight is the doubling of the run time when wrapping the identical multidplyr code into a user defined function r librarytidyverse librarymultidplyr librarystringr df tibbleindex rep toconcat rep cluster newcluster systemtimeexpr df groupbyindex partitioncluster summariseconcat stringrstrctoconcat collapse collect rmcluster user system elapsed r userdefinedfunc functiondf clusternum cluster newclusterclusternum df df groupbyindex partitioncluster summariseconcat stringrstrctoconcat collapse collect rmcluster returndf systemtimeexpr userdefinedfuncdf clusternum user system elapsed When a dataframe is partitioned by multidplyr I would like to be able to use pivotlonger pivotwider on it My pattern is to take the data and make it long then make it wide by a different variable eg logs on two dates where all the columns are gathered into keyvalue pairs for longer data and then spread by the log date for comparison purposes r datamtcars cl newcluster mtcars partitioncl pivotlongerccylgear collect fails Error in maplglx p object cyl not found mtcars groupbycylgear partitioncl pivotlongerccylgear collect also fails Error in maplglx p object cyl not found I am excited about the potential of this package However I had some difficulties I have a large database rows where each row contains a data frame This is in tibble format and I use map iterations to make calculations When using multidplyr the time is reduced considerably After a long wait I get an error I tried reducing to only rows and the error persists However when testing the same code with only rows slice the calculations are done correctly I enclose the code and errors Code itemstemp itemstemp partitioncluster mutate alfapsych purrrmapdata psychalphadplyrselect dplyrendswithItem alfacoef purrrmapdblalfapsych purrrpluckx total rawalpha alfaordpsych purrrmapdata psychalphapsychpolychoricdplyrselect dplyrendswithItemrho alfaordcoef purrrmapdblalfaordpsych purrrpluckx total rawalpha Error row Error Computation failed Parents callr subprocess failed unable to fork possible reason Recurso no disponible temporalmente unable to fork possible reason Recurso no disponible temporalmente rlanglasterror error message Computation failed class rlangerror backtrace multidplyrpartition cluster dplyrmutate multidplyrshardcalldata mutate enquos error parent message callr subprocess failed unable to fork possible reason Recurso no disponible temporalmente class callrstatuserror error parent message unable to fork possible reason Recurso no disponible temporalmente class callrremoteerror backtrace withCallingHandlers handleSimpleError hsimpleErrormsg call Call rlanglasttrace to see the full backtrace rlanglasttrace basewithVisibleevalquotefseqlhs env env baseevalquotefseqlhs env env baseevalquotefseqlhs env env fseqlhs magrittrfreducevalue functionlist basewithVisiblefunctionlist k value functionlist k value dplyrmutate multidplyrmutatemultidplyrpartydf multidplyrshardcalldata mutate enquos 