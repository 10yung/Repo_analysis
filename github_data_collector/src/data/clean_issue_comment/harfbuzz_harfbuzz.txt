Implemented TODO Drop empty ones comment in Lookupsubset in hbotlayoutcommonh For this added a variant of subsetoffsetarray taking an extra argument passed to serializesubset Added intersects to GPOS PosLookupSubtable and GSUB SubstLookupSubTable to determine which subtables are empty Added an API test testsubsetgposc initially with only one test case to subset GPOS LookupType Pair in RobotoRegular containing two subtables PairPos and PairPos to one subtable PairPos I seem to remember Behdad saying that Harfbuzz will not just be able to shape but also instantiate static instances of variable fonts This will be helpful for me because as a layout engine SILE needs to pass fonts to a PDF generator and the PDF library doesnt support variable fonts I just found the shaping example in the documentation oops but is the instantiator done yet Is it on the radar Im trying to find out the effect of the miscellaneous font size arguments to the hbshape tool hbshape LiberationSansRegularttf LaVAT L a V A T When typesetting this text af fontsize I get correct displacements when multiplied by fontsize Good Now with a font size hbshape fontsize LiberationSansRegularttf LaVAT L a V A T hbshape fontsize LiberationSansRegularttf LaVAT L a V A T These metrics are definitely not proportional to the font size If I understood the harfbuzz basics correctly the metrics are based on the desired font size important for hinting but since the results are integer scaling is required to get accurate precision The helloharfbuzzopentype demo program uses font size and gives advance width for the initial L What magic arguments do I need to supply to hbshape to get the same and as I assume correct values as the demo program I could not find any CFF CFF related tests Afaiu we need CFF and CFF only to get glyph extents during fallback shaping And we have tests only for glyfCBDT and sbix tables I can work on pull request if needed Im trying to understand how to use harfbuzz and I understand the most important function is hbshape As such Im going through the documentation trying to understand what the parameters mean and Ive come across the simple shaping example from This describes how to allocate a buffer set its direction load a font and perform shaping However the example does not work I have installed both harfbuzz and freetype and Im compiling with gcc pkgconfig freetype harfbuzz libs cflags testc o test All is well up until Step Create a face and a font using FreeType for now This is where things start to go wrong It has the following code cpp include hbfth FTNewFaceftlibrary fontpath index face FTSetCharSizeface hbfontt font hbftfontcreateface None of these arguments are defined inside the header file There is FTLibrary which appears to be a typedef but it doesnt actually work The example in the manual should be fixed so that it works The introductory sentence Below is the simplest HarfBuzz shaping example possible doesnt seem correct because the example does not appear to contain everything it needs Ive been working on dlang bindings for harfbuzz bindbcharfbuzz and I gathered some of the experience and difficulties in the process Here is a simplified version of how I generate bindings lets take this sample header as a starting point C typedef enum HBMEMORYMODEDUPLICATE HBMEMORYMODEREADONLY HBMEMORYMODEWRITABLE HBMEMORYMODEREADONLYMAYMAKEWRITABLE hbmemorymodet typedef struct hbblobt hbblobt HBEXTERN hbblobt hbblobcreate const char data unsigned int length hbmemorymodet mode void userdata hbdestroyfunct destroy HBEXTERN hbblobt hbblobcreatefromfile const char filename Use DStep to generate D stubs from headers D enum hbmemorymodet HBMEMORYMODEDUPLICATE HBMEMORYMODEREADONLY HBMEMORYMODEWRITABLE HBMEMORYMODEREADONLYMAYMAKEWRITABLE struct hbblobt hbblobt hbblobcreate constchar data uint length hbmemorymodet mode void userdata hbdestroyfunct destroy hbblobt hbblobcreatefromfile constchar filename Use BindingDynamizer to create dynamic bindings from static bindings D enum hbmemorymodet HBMEMORYMODEDUPLICATE HBMEMORYMODEREADONLY HBMEMORYMODEWRITABLE HBMEMORYMODEREADONLYMAYMAKEWRITABLE struct hbblobt versionBindHBStatic hbblobt hbblobcreate constchar data uint length hbmemorymodet mode void userdata hbdestroyfunct destroy else private alias fphbblobcreate hbblobt function constchar data uint length hbmemorymodet mode void userdata hbdestroyfunct destroy gshared fphbblobcreate hbblobcreate versionBindHBStatic hbblobt hbblobcreatefromfile constchar filename else private alias fphbblobcreatefromfile hbblobt function constchar filename gshared fphbblobcreatefromfile hbblobcreatefromfile Lots of manual editing D enum int Assumed to be int but Im not a C guru HBMEMORYMODEDUPLICATE HBMEMORYMODEREADONLY HBMEMORYMODEWRITABLE HBMEMORYMODEREADONLYMAYMAKEWRITABLE alias hbmemorymodet int C doesnt have typesafe enums anyway struct hbblobt versionBindHBStatic hbblobt hbblobcreate constchar data uint length hbmemorymodet mode void userdata hbdestroyfunct destroy else private alias fphbblobcreate hbblobt function constchar data uint length hbmemorymodet mode void userdata hbdestroyfunct destroy gshared fphbblobcreate hbblobcreate static if hbSupport HBSupportv Somewhere between this appears versionBindHBStatic hbblobt hbblobcreatefromfile constchar filename else private alias fphbblobcreatefromfile hbblobt function constchar filename gshared fphbblobcreatefromfile hbblobcreatefromfile Essentially it looks something like this generatehbbat editing Aside from all the improvements that can be done for DStep to make the process smoother and require less hand editing there are many things that would immensely help for an easier and also higher quality binding on library developers side Proper include instead of abusing preprocessor D among many other languages do not use preprocessor for accessing symbols outside of the file The fact that harfbuzz requires people to include hbh instead of allowing invidual headers to be used is neither replicatable in other languages or necessary nor does it makes sense This makes the process hacky in that I had to use DHBHIN DHBOTHIN and such so libclang doesnt just error out The problem is further enchanced by some headers that do not include all files it uses such as hbshapeplanh not including hbfaceh because it is recursively done so by hbfonth This makes automation of import statements hard to pull off unless they are all marked as public I tried to avoid this so global namespace is not polluted as much Since C has no concept of local includeimport I couldnt decide whether to generate public imports or add private ones by hand Versioning of symbols in machine readable form BindBCHarfBuzz currently supports choosing different versions of the library and Ideally I would want to support choosing any version possible but since there is no machine readable list of addedremoved symbols for every version also no semantic versioning whatsoever which means it is unfeasable to handcraft such capability thus Ive chosen to just support and the latest What I did was to extract exported symbols via dumpbin exports libharfbuzz dll which is also annoying to parse as to easily determine which symbols are introduced between two versions and But this is not even reliable because what symbols gets compiled in changes based on configurations environment I was expecting ABI Laboratory to have all these functionality but reality is often disappointing If header files had easy to parse version comments something like Since BEGIN Since END I could wrap them with static if hbSupport as well I hope you consider this option bit binaries with DirectWrite Uniscribe glue on windows for testing Providing these would allow me to test the dynamic binding better without having to compile harfbuzz myself something I dont want to bother but Im not holding my breath Less macros if possible Some of the macro functions are especially interesting that they cause name collisions with actual functions and screw up the automation but I dont know what could be done here as those are probably made for manual inlining performance I manually converted them and disabled the dynamic lib symbols entirely Maybe an ifdef could enable body of those actual functions inside the headers but not much solution comes to my mind GLib GObject introspection template files tmpl I have no idea what to do here Currently the binding has no support for these because I never use GTKrelated libs I couldnt find proper documentation on how this works and I dont want to torture myself trying to build GLib or HarfBuzz on Windows D actually does have complete GTK bindings so I could hook them up easily At least a bit of documentation could help people like me Tell me if Im missing something Having always explicit enum types Some of the enums are bit flags but not defined to be unsigned int Most all enums are just not explicitly typed and I dont remember if C standard is reliable in this case I cant tell slapping int onto them is the right thing but thats what I did for the time being Knowing library names for different distro platforms Complete speculation I dont know whether same library name is something guaranteed across distros or not I also dont own a Mac to check actual names myself If there is an easy way to learn these let me know Also FreeType Windows builds are named freetypedll but harfbuzz depends on libfreetype dll and I would expect a harfbuzzdll rather than a libharfbuzz dll per Windows naming convention sake Dependency hell This isnt exactly binding related but Windows download of FreeType dll doesnt depend on anything meanwhile the one that comes with HarfBuzz depends on libraries that depends on other libraries that depends on other libraries that depends on libgccssjlj dll seems to be there for error handling I dont know if it is all that hard to support Windows without things like GLib or not but I hope to be able see better native Windows support in the future I think these are all the things that came to my mind I wish library developers could remember that the world doesnt consist of CCPython only That would make us miserable binding creators life easier All that being said Im thankful for the hard work of you developers and Im glad that this library exist In this line if featurestart is HBFEATUREGLOBALEND featureend will have a random value It doesnt seem to affect anything but maybe we should check it anyway Ive wrote a simple script to find unused fonts and actually found some dataaotsclassdef font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmap font otf dataaotscmapcompositionfont otf dataaotscmapsubtableselectionfont otf dataaotscmapsubtableselectionfont otf dataaotscmapsubtableselectionfont otf dataaotscmapsubtableselectionfont otf dataaotscmapsubtableselectionfont otf datainhouse c cbfea a ca d ee bttf datatextrenderingtestsNotoSansKannadaRegularttf datatextrenderingtestsSelawikREADMEmd datatextrenderingtestsSelawikvariablettf datatextrenderingtestsTestCMAPMacTurkishttf datatextrenderingtestsTestGVARComposite ttf datatextrenderingtestsTestGVARCompositeMissingttf datatextrenderingtestsTestShapeAranttf datatextrenderingtestsTestShapeKndaV ttf datatextrenderingtestsTestTRAKOnettf The script itself python usrbinenv python import os IGNORETESTS macostests def checkdir testfiles sortedoslistdirdir tests testfiles f for f in testfiles if fendswithtests usedfonts set for file in testfiles if file in IGNORETESTS continue with opendir tests file r as f for idx test in enumeratefreadsplitlines check for fonts in comments too if teststartswith test test skip empty lines if lentest continue fontfile testsplit fontfile ospathsplitfontfile usedfontsaddfontfile fontfiles setoslistdirdir fonts for font in sortedlistfontfilesdifferenceusedfonts printdir font checkdataaots checkdatainhouse checkdatatextrenderingtests Its not perfect since it checks only tests and not all sources So Ive doublechecked all the listed font via recursive grep Should we remove those files Change in is wrong Calling add on a null object should silently do nothing Callsites should not need to check addset can be called extend to reflect Python naming and should accept any iterator of hbcodepointt not just set Does anyone know if theres a way supported or otherwise to manually add a lookup specified by index ID to the shaping plan Thisll be needed for implementing OpenType justification which embeds lookup IDs in the JSTF table