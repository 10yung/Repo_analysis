See the readme file here or One example ipythonnose Hello this is an autogenerated Pull Request Feedback mailtorepobotmovermeyercomsubjectpypipin Badge Bot Feedback A nosebook Some time ago pypipin shut down This broke the badges for a bunch of repositories including nosebook Thankfully an equivalent service is run by shieldsio This pull request changes the badges to use shieldsio instead Building on jluttines work in this will add some more robust longoverdue jupyter testing including conda support It seems that if I use withnosebook nosetests runs only notebook tests not any normal unit tests it would run without withnosebook Is this how it should be or am I doing something wrong Is it possible to run all tests with a single call to nosetests blocks yamlmagic at least We have finally upgraded our environment to IPython so Im trying nosebook again Now on every notebook I get E ERROR Failure AttributeError kernelspec Traceback most recent call last File Usersgramanacondalibpython sitepackagesnosepluginsmanagerpy line in generate for r in result File Usersgramanacondalibpython sitepackagesnosebookpy line in loadTestsFromFile kernel selfnewKernelnb File Usersgramanacondalibpython sitepackagesnosebookpy line in newKernel kernelnamenbmetadatakernelspecname File Usersgramanacondalibpython sitepackagesIPythonutilsipstructpy line in getattr raise AttributeErrorkey AttributeError kernelspec Ran test in s FAILED errors Make a bunch of notebooks with failing tests and run with nosebook After a few fail you start getting kernel creation failures along the lines of ERROR Failure OSError Errno Too many open files varfolders c h cxqpysvccm xh TtmpImZYO json Traceback most recent call last File Usersgramanacondalibpython sitepackagesnosepluginsmanagerpy line in generate for r in result File Usersgramanacondalibpython sitepackagesnosebook py eggnosebookpy line in loadTestsFromFile manager kernel selfnewKernelnb File Usersgramanacondalibpython sitepackagesnosebook py eggnosebookpy line in newKernel return utilsstartnewkernel File Usersgramanacondalibpython sitepackagesIPythonkerneltestsutilspy line in startnewkernel File Usersgramanacondalibpython sitepackagesIPythonkernelmanagerpy line in startkernel File Usersgramanacondalibpython sitepackagesIPythonkernelconnectpy line in writeconnectionfile File Usersgramanacondalibpython sitepackagesIPythonkernelconnectpy line in writeconnectionfile File Usersgramanacondalibpython tempfilepy line in mkstemp File Usersgramanacondalibpython tempfilepy line in mkstempinner OSError Errno Too many open files varfolders c h cxqpysvccm xh TtmpImZYO json It seems like test failures leak files I tried adding a managershutdownkernel in a finally block in loadTestsFromFile but that was insufficient to fix this nosebook wants to upconvert v and v notebooks to v format which doesnt work if v is not installed It would be nice if it still supported v installations That means falling back on conversion failure to v format using nbworksheets cells instead of nbcells and a few other small changes Im not sure what the issue is I tried to run the new version and it failed as it wanted to convert the notebook format to v which I didnt have So I updated my iPython install and tried again and now I get Usersgramanacondalibpython sitepackagesnosepluginsmanagerpy RuntimeWarning Unable to load plugin nosebook nosebookNosebook cannot import name v From gramster on about this line The startup script is because we have a configpy that gets loaded in our environment and I need to load that in the test environment too it contains just a single import in our case I suggested going with the nosebooklike setup Additionally it seems like accepting a dottednotation module may be more noselike than a path initial configuration would be like bash nosetests withnosebook nosebooksetupscriptssetupenvironment and then i guess scriptssetupenvironment would be loaded in the kernel if importing that module has side effects so be it Borderline YAGNI It may be desirable to implement like scrubs where the argument can be either a string as above a list of strings to import in order somewhat unnecessary a dict of notebook patterns to a string or list 