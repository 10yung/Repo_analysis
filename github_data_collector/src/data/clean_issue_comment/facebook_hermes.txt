Introduces a playground for the Hermes website This is highly based on from tmikov Improvements Editor suggestions do not show up properly Selection highlighting between the input and output editors like Compiler explorer or AST explorer to help understand and debug the engine If some code wrapped in trycatch block fails the exception is not detailed My code looks like this js try catch ex Logex I log error object into database Heres what I can see error jsEngine hermes jsEngine hermes This happens on production React Native build Before turning on Hermes I was getting exact failure position in bundle file json line column sourceURL indexandroidbundle Is there any way to get more detailed exceptions Hello we are the development team of VS Code extension for debugging React Native apps vscodereactnative On debugging a Hermes application React Native v in Google Chrome we tried to watch the contents of Map and Set Javascript objects and faced the problem of crashing of the debugged application The error occurs when we are trying to extend proto object content This behavior is the same for Map and Set objects Trying to extend proto object content of Map Screen Shot at Trying to extend proto object content of Set Screen Shot at Is this an expected behavior For reference the list of known issues with Hermes debugging for React Native Tools extension Hello we are the development team of VS Code extension for debugging React Native apps vscodereactnative Now we are working on React Native Hermes debugger and weve faced the problem related to usage of Chrome DevTools Protocol method callFunctionOn We use vscodechromedebugcore library to communicate with Hermes debugger Some functions of the library eg getNumPropsByEval use Chrome DevTools Protocol method RuntimecallFunctionOn But each call of this method returns the following response resultidsomeId an empty result object We tried to call RuntimecallFunctionOn function with different parameters but the result remained the same Below is the list of the function calls with different arguments that we tried For example in case of usage of getNumPropsByEval method the RuntimecallFunctionOn function is used to evaluate the length of the watched array Below there is an example of the function call thischromeRuntimecallFunctionOn objectId functionDeclaration function return thislength Objectkeysthislength thislength silent true returnByValue true The function should only return a static array Without silent mode thischromeRuntimecallFunctionOn objectId functionDeclaration function return silent false returnByValue true The function should return process variable Doesnt provide objectId prop and without silent mode thischromeRuntimecallFunctionOn functionDeclaration function return process silent false returnByValue true For all cases that are described above the callFunctionOn method returns empty result object RuntimecallFunctionOn method also doesnt return any error messages Could you please tell us if RuntimecallFunctionOn method is implemented in Hermes debugger and if it is how can we use it For reference the list of known issues with Hermes debugging for React Native Tools extension reactnative info command output System OS macOS CPU x IntelR CoreTM i B CPU GHz Memory MB GB Shell binzsh Binaries Node usrlocalbinnode Yarn usrlocalbinyarn npm usrlocalbinnpm Watchman usrlocalbinwatchman SDKs iOS SDK Platforms iOS DriverKit macOS tvOS watchOS Android SDK API Levels Build Tools System Images android Google APIs Intel x Atom android Google APIs Intel x Atom IDEs Android Studio AI Xcode C usrbinxcodebuild npmPackages react reactnative npmGlobalPackages reactnativecli According to ES standard the identifier arguments cannot appear to the left of the assignment operator only in strict mode However when running this testcase blow which is in nonstrict mode hermes throws an expection Why does this happen Is this a feature of hermes revision cf b Test case var NISLFuzzingFunc function arguments printarguments NISLFuzzingFunc Command buildbinhermes w testcasejs Output testcasejs error invalid assignment lefthand side arguments Expected behavior Weve been seeing memory leaks from the mBlobs HashMap in BlobModulejava for some time with JavaScriptCore This is one of the tickets for this We were expecting this to be fixed when we upgraded react native since added the following fix Ie the js blob HostObject destructor is supposed to call remove in BlobModulejava We found that if we enabled the hermes engine we were still getting javaheap out of memory errors Setting breakpoints in BlobModulejava in android studio shows that store is called for both JavaScriptCore and hermes but that remove is only called if use JavaScriptCore Ie the memory leak is fixed but only if use JavaScriptCore react native I want to see if this Circle CI change works correctly We just ran into a strange crash in Production mode and after several hours of debugging it turned out that if we disable Hermes and use JSC the app works fine grafik So basically this code causes the crash export function handleLoadAccount action ActionTypetypeof accountActionsloadAccountRequest Sagavoid try xxxx const initialNavigationAction yield callcheckForInitialURL yield callclientloadAccount accountToLoadwalletCredentials xxxx catch error yield putaccountActionsloadAccountFail error finally yield puttoggleAppLoadingfalse The error that is shown to us comes from this line const initialNavigationAction yield callcheckForInitialURL If we remove it then the app works fine CheckForInitialURL does nothing special export async function checkForInitialURL const url await LinkinggetInitialURL some more code that is not executed because url is null in this case if I switch those lines around const initialNavigationAction yield callcheckForInitialURL yield callclientloadAccount accountToLoadwalletCredentials then the app works As I said it works fine with JSC The app is currently in a private repo but if soemeone from the team would like to give it a try I can provide you with access to it We have a standard buildgradle apply plugin comandroidapplication apply plugin iofabric import comandroidbuildOutputFile The reactgradle file registers a task for each build variant eg bundleDebugJsAndAssets and bundleReleaseJsAndAssets These basically call reactnative bundle with the correct arguments during the Android build cycle By default bundleDebugJsAndAssets is skipped as in debugdev mode we prefer to load the bundle directly from the development server Below you can see all the possible configurations and their defaults If you decide to add a configuration block make sure to add it before the apply from nodemodulesreactnativereactgradle line projectextreact the name of the generated asset file containing your JS bundle bundleAssetName indexandroidbundle the entry file for bundle generation entryFile indexandroidjs bundleCommand rambundle whether to bundle JS and assets in debug mode bundleInDebug false whether to bundle JS and assets in release mode bundleInRelease true whether to bundle JS and assets in another build variant if configured See The configuration property can be in the following formats bundleInproductFlavorbuildType bundleInbuildType bundleInFreeDebug true bundleInPaidRelease true bundleInBeta true whether to disable dev mode in custom build variants by default only disabled in release for example to disable dev mode in the staging build type if configured devDisabledInStaging true The configuration property can be in the following formats devDisabledInproductFlavorbuildType devDisabledInbuildType the root of your project ie where packagejson lives root where to put the JS bundle asset in debug mode jsBundleDirDebug buildDirintermediatesassetsdebug where to put the JS bundle asset in release mode jsBundleDirRelease buildDirintermediatesassetsrelease where to put drawable resources React Native assets eg the ones you use via requireimagepng in debug mode resourcesDirDebug buildDirintermediatesresmergeddebug where to put drawable resources React Native assets eg the ones you use via requireimagepng in release mode resourcesDirRelease buildDirintermediatesresmergedrelease by default the gradle tasks are skipped if none of the JS files or assets change this means that we dont look at files in android or ios to determine whether the tasks are up to date if you have any other folders that you want to ignore for performance reasons gradle indexes the entire tree add them here Alternatively if you have JS files in android for example you might want to remove it from here inputExcludes android ios override which node gets called and with what additional arguments nodeExecutableAndArgs node supply additional arguments to the packager extraPackagerArgs projectextreact entryFile indexjs bundleInDebug false bundleInDevelop true bundleInStaging true bundleInRelease true jsBundleDirDebug buildDirintermediatesassetsdebug jsBundleDirDevelop buildDirintermediatesassetsdevelop jsBundleDirStaging buildDirintermediatesassetsstaging jsBundleDirRelease buildDirintermediatesassetsrelease resourcesDirDebug buildDirintermediatesresmergeddebug resourcesDirDevelop buildDirintermediatesresmergeddevelop resourcesDirStaging buildDirintermediatesresmergedstaging resourcesDirRelease buildDirintermediatesresmergedrelease nodeExecutableAndArgs hasPropertyNODEPATH NODEPATH node devDisabledInDebug false devDisabledInDevelop true devDisabledInStaging true devDisabledInRelease true inputExcludes ios tests extraPackagerArgs minifyfalse enableHermes true apply from nodemodulesreactnativereactgradle apply from nodemodulesreactnativecodepushandroidcodepushgradle apply from nodemodulesreactnativevectoriconsfontsgradle Set this to true to create two separate APKs instead of one An APK that only works on ARM devices An APK that only works on x devices The advantage is the size of the APK is reduced by about MB Upload all the APKs to the Play Store and people will download the correct one based on the CPU architecture of their device def enableSeparateBuildPerCPUArchitecture false Run Proguard to shrink the Java bytecode in release builds def enableProguardInReleaseBuilds false The preferred build flavor of JavaScriptCore For example to use the international variant you can use def jscFlavor orgwebkitandroidjscintl The international variant includes ICU i n library and necessary data allowing to use eg DatetoLocaleString and StringlocaleCompare that give correct results when using with locales other than enUS Note that this variant is about MiB larger per architecture than default def jscFlavor orgwebkitandroidjsc Whether to enable the Hermes VM This should be set on projectextreact and mirrored here If it is not set on projectextreact JavaScript will not be compiled to Hermes Bytecode and the benefits of using Hermes will therefore be sharply reduced def enableHermes projectextreactgetenableHermes false def getTimestamp Long tsLong SystemcurrentTimeMillis L def ts int tsLongtoInteger return ts android compileSdkVersion rootProjectextcompileSdkVersion compileOptions sourceCompatibility JavaVersionVERSION targetCompatibility JavaVersionVERSION defaultConfig applicationId mobileapp minSdkVersion rootProjectextminSdkVersion targetSdkVersion rootProjectexttargetSdkVersion versionCode getTimestamp versionName versionMajorversionMinorversionPatchversionPretag missingDimensionStrategy reactnativecamera general multiDexEnabled true signingConfigs develop if projecthasPropertyMYAPPRELEASESTOREFILE storeFile fileMYAPPRELEASESTOREFILE storePassword MYAPPRELEASESTOREPASSWORD keyAlias MYAPPRELEASEKEYALIAS keyPassword MYAPPRELEASEKEYPASSWORD staging if projecthasPropertyMYAPPRELEASESTOREFILE storeFile fileMYAPPRELEASESTOREFILE storePassword MYAPPRELEASESTOREPASSWORD keyAlias MYAPPRELEASEKEYALIAS keyPassword MYAPPRELEASEKEYPASSWORD release if projecthasPropertyMYAPPRELEASESTOREFILE storeFile fileMYAPPRELEASESTOREFILE storePassword MYAPPRELEASESTOREPASSWORD keyAlias MYAPPRELEASEKEYALIAS keyPassword MYAPPRELEASEKEYPASSWORD splits abi reset enable enableSeparateBuildPerCPUArchitecture universalApk false If true also generate a universal APK include armeabiv a x arm v a x buildTypes debug applicationIdSuffix debug develop minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFileproguardandroidtxt proguardrulespro signingConfig signingConfigsdevelop applicationIdSuffix develop matchingFallbacks release debug staging minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFileproguardandroidtxt proguardrulespro signingConfig signingConfigsstaging applicationIdSuffix staging matchingFallbacks release debug release minifyEnabled enableProguardInReleaseBuilds proguardFiles getDefaultProguardFileproguardandroidtxt proguardrulespro signingConfig signingConfigsrelease flavorDimensions version productFlavors develop applicationId mobileappdevelop staging applicationId mobileappstaging production applicationId mobileapp applicationVariants are eg debug release applicationVariantsall variant variantoutputseach output For each separate APK per architecture set a unique version code as described here def versionCodes armeabiv a x arm v a x def abi outputgetFilterOutputFileABI if abi null null for the universaldebug universalrelease variants outputversionCodeOverride versionCodesgetabi defaultConfigversionCode dexOptions jumboMode true dependencies implementation fileTreedir libs include jar Firebase dependencies implementation comgooglefirebasefirebasecore implementation comgooglefirebasefirebaseanalytics implementation comgooglefirebasefirebasemessaging implementationcomcrashlyticssdkandroidcrashlytics aar transitive true implementation comfacebookreactreactnative From nodemodules if enableHermes def hermesPath nodemoduleshermesengineandroid debugImplementation fileshermesPath hermesdebugaar releaseImplementation fileshermesPath hermesreleaseaar else implementation jscFlavor Run this once to be able to run the application with BUCK puts all compile dependencies into folder libs for BUCK to use task copyDownloadableDepsToLibstype Copy from configurationscompile into libs apply from filenodemodulesreactnativecommunitycliplatformandroidnativemodulesgradle applyNativeModulesAppBuildGradleproject apply plugin comgooglegmsgoogleservices go around a google play services mismatch comgooglegmsgoogleservicesGoogleServicesPluginconfigdisableVersionCheck true Tested on RN with hermes When running the testcases below hermes takes more than ten times execution time of other engines Maybe it is an issue of hermes Version Testcase var NISLFuzzingFunc functionarray from to var counter while to from if array to array to to var NISLParameter true var NISLParameter var NISLParameter NISLFuzzingFuncNISLParameter NISLParameter NISLParameter Command buildreleasebinhermes w testcasejs Execution time V ms spiderMonkey ms chakra ms javascriptCore ms hermes ms const words requirewordswithfrequencyandtranslationandipajson will throw error RangeError Maximum call stack size exceeded js enginehermes The json file size is M while its data structure is very simple Steps to reproduce the bug yarn start start an android emulator yarn android Tested with yarn and nodejs on Mac 