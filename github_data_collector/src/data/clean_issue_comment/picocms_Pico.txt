It would be nice for the landing page for the project to be served using https on Developer Certificate of Origin By contributing to Pico you accept and agree to the following terms and conditions the Developer Certificate of Origin for your present and future contributions submitted to Pico Please refer to the Developer Certificate of Origin section in Picos CONTRIBUTINGmd for details Developer Certificate of Origin Version Copyright C The Linux Foundation and its contributors Letterman Drive Suite D San Francisco CA Everyone is permitted to copy and distribute verbatim copies of this license document but changing it is not allowed Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved Hi this is a Polish translation of readme sample contents and config comments heres the first draft for the Italian translation of the file Developer Certificate of Origin By contributing to Pico you accept and agree to the following terms and conditions the Developer Certificate of Origin for your present and future contributions submitted to Pico Please refer to the Developer Certificate of Origin section in Picos CONTRIBUTINGmd for details Developer Certificate of Origin Version Copyright C The Linux Foundation and its contributors Letterman Drive Suite D San Francisco CA Everyone is permitted to copy and distribute verbatim copies of this license document but changing it is not allowed Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved READMEesmd and contentsamplees It was exactly one year ago that we released Pico Unfortunately Pico isnt ready yet but I think that it might get a nice tradition to release at least something on Christmas Eve Thus Im happy to announce the first justapreview prealpha release of Picos brand new admin plugin Click here to download the preview picoadminpreviewtargz This archive contains a full installation of the current development build of Pico see with all necessary dependencies Navigate to and follow the onscreen instructions to use Pico Admin You can find picoadmins source code at Merry Christmas and a Happy New Year bildschirmfoto am um fullpage picocms smcdougall theshka This issue is intended to collect and discuss ideas about Pico renamed especially on how we can make Picos plugin system more flexible than ever The changes are very substantial and far reaching therefore they cant make it into the soontobereleased Pico The changes break BC therefore they cant make it into Pico but Pico Features planned for Pico can be found in Feedback is appreciated smiley General Move Pico to the picocms Pico namespace and use a PSR autoloader Use PicoDeprecated to also provide all classes in the root namespace using classalias otherwise this would break all existing plugins Implement lazy loading using page objects ie use simple objects instead of page arrays Performance Performance Performance Implement ArrayAccess Not only to maintain BC but also to make the objects data easier to use especially for nonexperienced developers Pico initially loads just a list of all content files pageid and pageurl are available immediately As soon as something else is accessed the files contents are read Depending on what has been accessed Pico processes either the YAML frontmatter or the Markdown contents ie page content wont be deprecated anymore Plugin developers should be able to implement dynamic values with callbacks eg PicoPageaddDynamicValuestring key callable callback This also allows plugin developers to implement lazy loading for custom values Open question Should we still allow regular page arrays in pages array Probably not plugin developers will have to differentiate both cases otherwise what makes the whole feature a pain in the ass for them Thus we need a conversion method otherwise we would break all existing plugins Use ArrayObject or ArrayIterator instead of a regular pages array This allows us to convert page arrays to objects as soon as they are added However PHPs builtin array functions eg arraykeys wont work anymore According to that we must pass a regular array to the onPagesLoaded event for older plugins otherwise we would pretty likely break many of them PicoDeprecated could then iterate through the pages array and convert them appropriately Use event system versioning Implement a lazy page tree as better performing alternative to the regular pages array Performance Performance Performance Rather than always loading the whole page tree a Traversable ArrayAccess object like the pages array see above nothing is loaded by default When accessing the page tree for the first time Pico discovers only pages directly inside content with the second level of lazy loading as elucidated above Pages in subdirectories are accessible through a children key However the contents of directories arent discovered until they are explicitly requested by accessing said children key Most themes build their page menu by iterating over pages on the first level anyway This allows Pico to discover only the pages it needs to know ie just the pages directly inside the content dir and without any sub directory This should heavily improve performance when a Pico instance is supposed to serve hundreds or thousands of pages Even the regular pages array is actually empty in the beginning However by accessing the variable ie by iterating over it or by accessing a key the whole page tree is being loaded what shatters our efforts We should encourage plugintheme developers to use the page tree instead Add Unit Tests Split Picorun into multiple public methods phases but still call them through Picorun init request URL loading contents evaluating contents YAML Markdown page discovery page rendering Twig Use PicoMarkdownParser PicoYamlParser and PicoTemplateEngine instead of Parsedown Symfony Component Yaml Parser and TwigEnvironment as type hints and add appropriate wrapper classes for Parsedown Symfony YAML and Twig allowing one to extendreplace them completely Also see cancelled replace YAMLParsedownTwig ToDo below Drop all remaining prev behavior from PicoDeprecated also remove v behavior with a notable performance impact Upgrade to Symfony YAML x Symfony YAML reaches endoflife this will force us to drop support of PHP and PHP Think about how users can easily install plugins with dependencies when they arent using composer but a prebundled release Allow theme developers to register meta headers and change Twigs default config maybe using a configyml in the themes dir Plugin event system Dont trigger all events on all plugins Let plugins register the events they want to use instead This heavily increases performance with a large number of plugins because methodexists calls are comparatively expensive compared to a simple foreach per event Open question Either introduce a new onSinglePluginLoaded event or a new PicoPluginInterfacegetEvents method The latter breaks BC but with this new approach we must refactor AbstractPicoPluginhandleEvent anyway therefore we probably cant implement it without breaking BC one way or the other We can circumvent this by letting AbstractPicoPlugin and picocms Pico AbstractPlugin differ in functionality ie the first mentioned implements the getEvents method in a BC way by examining a ReflectionClass of the plugin or by letting PicoPluginInterface lack the getEvents method entirely Allow plugins to return false on preliminary events eg onContentLoading to prevent Pico from performing a specific processing step Picorun skips PicoloadFileContent Returning true or null works as with Pico and changes nothing The subsequent event is still triggered onContentLoaded but the payload variable rawContent is empty The event is triggered with special priority on this plugin regardless of the regular processing order so it can set the variable before any other plugin receives the event Example A markdown cache plugin returns false during onMetaParsing and onContentParsing to load both meta data and the parsed contents from its cache Affected Events onContentLoading completely skips on Content events and onContentLoaded on ContentLoading and on ContentLoaded onMetaParsing and onMetaParsed onContentParsing simulates onContentPrepared onContentPrepared and onContentParsed onPagesLoading onSinglePage events will be simulated and onPagesLoaded onSinglePageLoading new event and onSinglePageLoaded onPageRendering and onPageRendered Allow plugins to return false on the onRequestUrl or onRequestFile events to completely skip Picos processing The only remaining event to trigger is onOutput new event that is only triggered when Picos processing is skipped right before Pico returns output Example A static HTML cache plugin returns false during onRequestFile bypasses Picos processing completely and returns the cached contents during onOutput New official plugins Markdown cache Static HTML cache Save rendered output of pages to static HTML files Rely on OS to detect file changes last modification time of md files Add Cache No meta header to prevent pages from being cached Add a event to let plugins register noncontent pages for caching should be triggered right after onConfigLoaded to allow plugins to change their behavior when caching is requested Explicitly allow combining statically cached and dynamic pages Open questions What happens when a page is added ie page navigation changes What happens when a plugin or theme is addedupdatedremoved How to determine all URLs that need to be parsed Markdown files dont necessarily have a relation to pages just think of collections or hidden meta files Ignore files and directories starting with a Allow users to explicitly specify the URL of a page Use this feature to allow Pico to act as a static website generator allow plugins to distinct between static HTML cache and static website generator mode Use Pico with Travis PHPs development server and wget r for our website rather than Jekyll Plugin plugins smile Add a URLs sequence meta header to support alternative URLs like Jekylls Redirect From plugin Search using Lucene Problem How to determine the URL of a found Markdown file Markdown files dont necessarily have a relation to pages just think of collections or hidden meta files Possible solution Use a static HTML cache and search in the HTML files Possible solution Do the exact same things as the static HTML cache see above Multilanguage i n Contents use languagespecific content directories or file extensions Themes use PHP intl and TwigExtensionsExtensionIntl References Performance statistics See Import plugins to import contents of other CMS eg WordPress see Use a HTML to Markdown converter Data Files Support independent meta data files eg contentcatalogyml The files are accessed similar to pages eg datacatalog A data file named after a markdown file eg both contentcatalogyml and contentcatalogmd exist is nonrecursively merged into the pages meta data ie into pagescatalogmeta However the YAML frontmatter takes preference and the data file can still be accessed via datacatalog The same happens for all pages nonrecursive in a directory if theres a data file with the same name as the directory eg collectionyml and collection directory You can enforce recursion for eg collectionsubdir by creating collectionsubdiryml Redirect pages like Jekylls Redirect From plugin Not planned anymore Allow a single plugin to hook into Pico to basically replace YAMLParsedownTwig with something different Rather than hooking into the instantiation of Symfony Component Yaml Parser in PicoparseFileMeta PicoregisterParsedown andor PicoregisterTwig it should be possible to replace the PicoparseFileMeta method the PicoprepareFileContentPicoparseFileContent methods the markdown Twig filter in PicoTwigExtension andor the call of Picotwigrender Otherwise the plugin needs to reimplement the internal structures and workings of the YAML parserParsedownTwig what isnt desirable Im currently not sure about how this interacts with the twig parameter of the onPageRendering event maybe drop the parameter and add a new onTwigRegistered event The plugin needs to be registered explicitly in configconfigphp to work Example quite a stretch Instead of parsing Markdown parse MediaWiki syntax