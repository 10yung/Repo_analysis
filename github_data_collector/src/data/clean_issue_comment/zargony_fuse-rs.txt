ioctlTCGETS on a file opened from a filesystem implemented with fuserc causes filesystem to be unmounted T Z ERROR fuserequest Unknown FUSE opcode T Z INFO fusesession Unmounted tmpm Such ioctl is issued eg by git gui on file gitHEAD for some reason Using Linux kernel version libfuse has fusexmpc so fusers should be examplesxmprs Supposed to just mirror root filesystem using libstds stdfs operations The example is rather crude and not all operations are supported but a simple cargo init cargo run test works on that filesystem PS Only now stumbled upon This patch allows one to provide a different value for setting maxwrite which can be useful for some use cases This patch does change the API of mount and spawnmount Given the existing API I wasnt sure how else to introduce this feature Feedback is welcome Currently the value of maxwrite is hardcoded in This is a bit problematic for my usecase where I want to be able to create file sytems with different maxwrite parameters I have a patch which I will submit as a PR shortly that implements the above However the PR changes the API of mount and spawnmount Given the existing API I wasnt sure how else to introduce this feature Feedback is welcome README RustFUSE does not just provide bindings it is a rewrite of the original FUSE C library to fully take advantage of Rusts architecture Changelog Link libosxfuse on macOS libfuse on all other systems Wheres the truth I supposed it only needed fusermount suid executable not the library Can I crosscompile projects using rustfuse without having C compiler or libraries around Or how else can I use advantages of it being not just the bindings I work a lot with rustfuse under Android however there is a lot of adjustment to make it work several reasons for this Libfuse is mostley unavailable mountpoint must be mount from the FUSE device using libcmount FUSE filesystem can only be mounted from a root process There is some Android kernel specific FUSE operations that are actually very specific to the FAT emulation layer of Android On Android device mountpoint must match the FAT emulation layer for theses reasons a native rust mount feature must be written a removeall of the libfuse depandancy and some OS specific op code to make it work Currently all these features are available into my fork although some rewriting is required to maintain code quality so I wonder if its worth to start a serious PR for the addition of Android support or these too specific changes and low demand make it should stay in a indepandant fork Hi I have only fuse installed and not fuse When I build I have this message error failed to run custom build command for fuse v Caused by process didnt exit successfully codetargetdebugbuildfuse d cdf buildscriptbuild exit code stderr thread main panicked at called Resultunwrap on an Err value Failure command pkgconfig libs cflags fuse fuse output Output status ExitStatusExitStatus stdout stderr Package fuse was not found in the pkgconfig search path nPerhaps you should add the directory containing fusepc nto the PKGCONFIGPATH environment variable nNo package fuse found nPackage fuse was not found in the pkgconfig search path nPerhaps you should add the directory containing fusepc nto the PKGCONFIGPATH environment variable nNo package fuse found n srclibcoreresultrs note run with RUSTBACKTRACE environment variable to display a backtrace But I have installed Fuse from libfuse repository and pkgconfig found it bash root e b f usrlocalincludefuse pkgconfig listall grep fuse fuse fuse Filesystem in Userspace Do I install libfusedev like in If I build with Fuse is this compatible with Fuse This is necessary when an external build system eg Buck is taking care of linking in libfuse and we dont want the Rust compiler to emit any linking arguments Next second step towards a more modern architecture and idiomatic interfaces First step happened in Move FileAttr and FileType to ll module and improve docs Modernized Request and reply types Modernized Filesystem trait use return values Modernized kernel communication based on ioRead and ioRead traits TODO Modernize session handling almost done Use futures for filesystem trait return types use asynctrait Improve replyDirectory and replyXAttr Support async session requires kernel communication to be based on AsyncReadAsyncWrite probably needs IO reactor and tokio dependency 