The example in the docs just uses It either needs to be extended or a different one needs to be provided It should show how to define a custom Completer etc The current implementation of KeyPress only allows Meta to take a char rather than another KeyPress which also has a KeyPressCharchar variant and as such it disallows multi char control sequences On OSX if one wishes to implement CtrlLeft or CtrlRight functionality for a terminal shell the equivalent is MetaLeft and MetaRight as the prior functionality is bound to switching workspaces Would having it take a KeyPress be reasonable I see that things like KeyPressControlLeft exist but this seems less flexible rather than allowing some command modifier taking another KeyPress or multiple of them Maybe Im missing some architectural choice as to why it is this way but I couldnt find anything in the issues or git log that would help me figure out why and have probably overlooked something here In most other shells Ive used cursor keys work up and down when inside the multiline string and only switch history on the first and last lines of that input respectively Is there a configuration that allows that in rustyline I want to extend multiline functionality of the library to have different prompts for different lines like this sql SELECT x FROM y Or this zsh python c quote print hello quote This work two complex things Make prompt a trait rather than string and pass dyn Prompt Break highlighting between lines The questions are Should we move prompt logic to Helper because it might share a tokenizer and other things with a highlighter and other parts of Helper trait What is a good interface for the trait I would go with something like fn getprompt self promptinfo PromptInfo context Context To abstract the line number slice whole buffer and all other things we might add in the future But it seems the current code prefers adding that arguments explicitly on the function signature Is that style important And how to cope with highlighting We can try to parse all the highlighting codes reset the highlighting at the end of a line and reinsert all of them at the start of the next line after prompt We can require a highlighter to close highlight line by line Both have some tradeoffs Im not sure which one to choose Any other hints are also appreciated It would be a really handy feature to add a CmdMultipleVecCmd enumeration for the Cmd enum so that multiple commands could be used in succession for a keybinding The readline library supports a configuration file that initializes the library based on a users defaults in their home director Im assuming this feature is in scope for this project I would love to see tab to switch between autocompleting options something similar to what ZSH does like in this ascinema asciicast I am not quite sure if this feature exists but hidden somewhere or it is not here yet I think its common enough that people use Editor that providing an easy to remember type alias for it makes sense Is it possible to add lines to the history and tell the history they are lines with errors so that the history hinter doesnt use them If this isnt possible yet I think itd be a helpful addition Make possible to return different command depending on input state Try to fix No breaking change but a Cmd enum with CustomAction entry which can return a Cmd looks bad