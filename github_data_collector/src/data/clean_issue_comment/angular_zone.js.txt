 The same idea with In there is some performance concern I used a more simple logic to implement this in this PR every time only need to do a small loop and just reset reference I did some basic benchmark It will only cost ms every time unloadreload all the patches so I think basically no cost With this PR we can run zonejs only inside Angular Elements and dont impact outside of Angular Elements mhevery robwormald please review Thank you fix I think I may find a way to resolve native asyncawait issue The test code below works well ts async function test consolelogtest return async function test consolelogbefore await test Zonecurrentname const result await test should keep zone context test consolelogafter await test result Zonecurrentname async function test consolelogbefore await test Zonecurrentname const result await test should keep zone context test consolelogafter await test result Zonecurrentname consolelogbegin test Zonecurrentforkname testruntest here should be root zone consolelogoutside test Zonecurrentname Zonecurrentforkname test run should be test zone consoleloganother test Zonecurrentname mhevery I will continue to add test cases hope it can work This is a new way to improve root zone performance and reduce monkeypatch impact inspired by mhevery If Zonecurrent is rootZoneZoneroot we will use native delegate with a very small wrap instead of monkey patched version For example After loading zonejs we call some async operations For example in web page we have Angular Elements and Jquery the following code will be the jquery part import zonejsdistzonejs loaded by Angular Elements setTimeout this will use native windowsetTimeout the callback will totally outside of Zone We can use Zonerootrun in other zone to use the native delegate version testZonerun Zonerootrun setTimeout will use native delegate will outside zone Now the monkeypatch method will look like this For example for setTimeout const nativeSetTimeout windowsetTimeout windowsetTimeout function if Zonecurrent Zoneroot return nativeSetTimeoutapplythis arguments this is the native one return patchedSetTimeoutapplythis arguments this is the patched version mhevery robwormald please review thank you fix In IE the pointer event will use the MS version such as pointerup will become MSPointerUp So we need to do the mapping to handle this case let zonetesting can handle mochajasminejest test cases without difference almost when load zonetesting will auto check if using jasmine or mocha and zonetesting will load patch accordingly Expose asyncfakeAsynctickflushdiscardPeriodicTasksflushMicrotasksresetFakeAsyncZone APIs to global so user can use those APIs directly And add clearAllMacrotasks flushAndDiscardPeriodicTasks helper methods add jasminejest mapping in Mocha patch so user can write case in jasmine style and API and can still use Mocha as runner to test support jasmine expect support jasmine spy support jasmine clock add BDD mapping such as beforeAllafterAllfdescribefitpending support jest expect support jest mockFn suport jest TimerMock Refactoring testbuilddoc folder current there are too many testkarmaci file in root folder or in test folder so reorganize the folder Add zonetestingtypingdts it defines all supported jasminemochajest APIs User can still use jasmine or mocha or jest type definition if they dont want to use this zonetesting mix Because this zonetestingtypingdts will have conflict duplicate declaration with jasmine or mocha or jest type definition so maybe we should publish this zonetestingtypingdts to types repo fix Add a help lib to configure root zone It is a monkeypatch to zone some kind of hack And it is a lib need to be loaded by user themselves so zone public API will not be damaged this is not a public api or formal feature of zonejs it will not be included in future tc proposal and it is not by design it is just a helper method to let you customize rootZone for some test and suppose to change in the future please use it on your own risk mhevery please review the idea is ok or not I know it is not correct according to the design of Zone but there a some use cases that user want to do that so with or without this lib user can still monkeypatch Zone to customize root zone so I just provide the helper tool for them thank you fix use new asynchooks to wrap nodejs instead of monkeypatch all native APIs The basic idea is in asynchooks there are hook apis init before after destroy in this PR the API will do those work init init will call ZonescheduleTask to schedule a ZoneTask before before will call ZonebeforeRunTask to create a new ZoneFrame and other work just like ZonerunTask after after will call ZoneafterRunTask to go back to parent ZoneFrame and do other work just like ZonerunTask destroy try to cancelTask if not cancelled Error use processunCaughtException to redirect to ZoneDelegatehandleError this PR still need a lot of work to do so I post the PR here just ask for review mhevery could you review that nodeasynchooksts the whether the idea is ok or not Thank you