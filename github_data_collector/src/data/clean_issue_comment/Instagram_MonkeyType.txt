When I create a venv and install monkeytype like this python m venv tmpvenv tmpvenvbinpip install MonkeyType And then I run monkeytype like this tmpvenvbinmonkeytype run foopy tmpvenvbinmonkeytype apply example Then it fails with this error Traceback most recent call last File tmpvenvbinmonkeytype line in module sysexitentrypointmain File tmpvenvlibpython sitepackagesmonkeytypeclipy line in entrypointmain sysexitmainsysargv sysstdout sysstderr File tmpvenvlibpython sitepackagesmonkeytypeclipy line in main handlerargs stdout stderr File tmpvenvlibpython sitepackagesmonkeytypeclipy line in applystubhandler proc subprocessrunretypeargs checkTrue stderrsubprocessSTDOUT stdoutsubprocessPIPE File usrlibpython subprocesspy line in run with Popenpopenargs kwargs as process File usrlibpython subprocesspy line in init restoresignals startnewsession File usrlibpython subprocesspy line in executechild raise childexceptiontypeerrnonum errmsg errfilename FileNotFoundError Errno No such file or directory retype retype As retype is not in my path It would be very great to run the retype execuable from the venv also as it is installed to the bin directory in the venv I can workaround this issue by activating the venv before but it is a bit inconvenient for me Given the following code python def fooa printa foo a b When it gets annotated by monkeytype the following will be the result python from monkeytypeencoding import DUMMYNAME from typing import List def fooa List DUMMYNAME None printa foo a b This raises ImportError as theres no DUMMYNAME in monkeytypeencoding Im using the latest monkeytype which is MonkeyType Hi carljm thanks for the hints My setup is following shell base C projectsconda info active environment base active env location C Anaconda shell level user config file C Users tfz condarc populated config files C Users tfz condarc conda version condabuild version python version final virtual packages base environment C Anaconda writable channel URLs package cache C Anaconda pkgs C Users tfz conda pkgs C Users tfz AppData Local conda conda pkgs envs directories C Anaconda envs C Users tfz conda envs C Users tfz AppData Local conda conda envs platform win useragent conda requests CPython Windows Windows administrator False netrc file None offline mode False base C projectsconda list monkeytype packages in environment at C Anaconda Name Version Build Channel monkeytype pyh a condaforge The monkeytypesqlite is there but seems to be empty Pls see the attachment monkeytypezip Im very thankful that there are so guys like you who responds so fast Thank you very much in advance If you need more information or when you could give some debug hints I really would like to help Best regards Originally posted by noragen in Some projects EdgeDB in particular avoid importing bare names to avoid conflicts Instead they rely on importing modules and addressing type names with a proper module or subpackage prefix This change provides a importmodules CLI option that changes the default behavior from py from packagesubpackage import SomeType def funcarg SomeType None into py from package import subpackage def funcarg subpackageSomeType None This change leaves imports from toplevel modules alone so for example from typing import List stays as it was This can be further refined if needed Depends on ignore the first three commits please We do a lot of introspection on types from the typing module and that means we have to shim across Python versions ourselves We should see how much of that we can replace with I understand that youve already documented steps to generate stubs for django applications And thats awesome Unfortunately the steps are too complicated and I need to give up using type hints for now cry Currently MonkeyType seems to generate stubs sorted alphabetically I would prefer that it generated stubs sorted in the same order as the source This would allow one to compare the source and stub sidebyside in an editor which would make it easier to compare declaration and source and to find missing stubs I am attempting to generate stubs for mahmoudboltons e bd dbd e e bdb a c d and am getting failures that are curiously nondeterministic I can rerun monkeytype stub module and eventually it will produce stubs rather than errors I am running this on Python built via pyenv on macOS through pytestmonkeytype pytestmonkeytype MonkeyType required installed retype required Any installed click required Any installed typedast required Any installed Actually I had to tweak pytestmonkeytype a bit to get it to work but as this is happening during stubgeneration after tracelogging is collected I dont think that could be the cause Traceback most recent call last File myvenvbinmonkeytype line in module sysexitentrypointmain File myvenvlibpython sitepackagesmonkeytypeclipy line in entrypointmain sysexitmainsysargv sysstdout sysstderr File myvenvlibpython sitepackagesmonkeytypeclipy line in main handlerargs stdout stderr File myvenvlibpython sitepackagesmonkeytypeclipy line in printstubhandler stub getstubargs stdout stderr File myvenvlibpython sitepackagesmonkeytypeclipy line in getstub rewriterrewriter File myvenvlibpython sitepackagesmonkeytypestubspy line in buildmodulestubsfromtraces defn getupdateddefinitionfunc traces rewriter ignoreexistingannotations File myvenvlibpython sitepackagesmonkeytypestubspy line in getupdateddefinition returntype rewriterrewritereturntype File myvenvlibpython sitepackagesmonkeytypetypingpy line in rewrite typ rwrewritetyp File myvenvlibpython sitepackagesmonkeytypetypingpy line in rewrite return rewritertyp File myvenvlibpython sitepackagesmonkeytypetypingpy line in rewriteUnion keytype keytype or eargs AttributeError type object OrderedMultiDict has no attribute args ERROR monkeytypetracing Failed collecting trace Traceback most recent call last File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in call selfhandlereturnframe arg File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in handlereturn lastopcode framefcodecocode frameflasti IndexError index out of range ERROR monkeytypetracing Failed collecting trace Traceback most recent call last File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in call selfhandlereturnframe arg File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in handlereturn lastopcode framefcodecocode frameflasti IndexError index out of range additional same traces ERROR monkeytypetracing Failed collecting trace Traceback most recent call last File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in call selfhandlereturnframe arg File homemaicoIdeaProjectsviaductvenvlibpython sitepackagesmonkeytypetracingpy line in handlereturn lastopcode framefcodecocode frameflasti IndexError index out of range Were running a rather large Flask application which we recently started adding type hints for Id like to use monkeytype Ive attempted to bisect our application however cannot seem to find the root cause of the error Ive tried building a sample to reproduce with a sample application python from flask import Flask Blueprint app Flaskname blueprint Blueprinthello name blueprintrouteinttest def hellotest int str return Hello World appregisterblueprintblueprint apprunhost port debugTrue However that does not seem to run into the issue What would be a good approach to find the root cause of the error in monkeytype Reporting a separate issue for the problem discovered in The exact files to reproduce this issue are forwardrefpy class AA def useaa self aa pass def usebb self bb pass def usecc self cc pass def usedd self dd pass class CC def useaa self aa pass def usebb self bb pass def usecc self cc pass def usedd self dd pass class DD def useaa self aa pass def usebb self bb pass def usecc self cc pass def usedd self dd pass class BB pass And usefwrefpy from forwardref import AA BB if name main aa AA bb BB cc AACC dd AACCDD for inst in aa cc dd instuseaa aa instusebb bb instusecc cc instusedd dd Then using them d work pyann monkeytype totomonkeytype stub forwardref class AA def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None class AACC def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None class AACCDD def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None When calling mypy I get the following d work pyann monkeytype totomypy forwardrefpy forwardrefpyi forwardrefpyi error invalid syntax To fix it I had to change the stub to class AA def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None class CC def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None class DD def useaaself aa AA None def usebbself bb BB None def useccself cc AACC None def useddself dd AACCDD None class BB 