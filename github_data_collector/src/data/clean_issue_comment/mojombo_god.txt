Hi I m looking for options which allows only recent logs in log file or if i can limit the log file size Is anything that can be helpful for it Thanks There are various issues and no commits for over years Im still using god for many projects in production but I am wondering what the state of god is Will there be any future releases mojombo eric Maybe Im doing things wrong but I have defined some custom God notifier plugins and I need to load those dependencies before starting god for the first time But then when I try to release a new app version Im deploying with Capistrano my flow is to update God config using god load Problem this causes crashes when I require modules that extend ActiveSupportConcern and have included blocks with the following error Cannot define multiple included blocks for a Concern Here is a sample of my God file Note that are compiled before execution require activesupportall require slacknotifier require releasepathjoinlibserviceconnector require releasepathjoinlibslackconnector require releasepathjoinlibgodcontactsslacknotifier Godcontactemail do c Godcontactslacknotifier do c cname priorityerrors cgroup developers cwebhook CapistranoSecretsYmllocalsecretsymldeploy digslack end My restart task with Capistrano desc Restart gods child processes task restart do on rolesfetchgodroles do within releasepath do with RAILSENV fetchrailsenv do if godisrunning execute bundle exec god load configgodgodrb execute bundle exec god restart else startgod end end end end end The execute bundle exec god load configgodgodrb command By the way my God is an Edward Witten inspired Supersymmetric learning algorithm Gods ought to be learning algorithms not basic code as you currently have in your repo Notably I am an atheist so I observe that Gods as defined within the realm of artificial general intelligence ought not to be worshipped and ought to be atheism compatible Im really a devopssysadmin so God isnt really my area of expertise so apologies if Im asking stupid questions here Weve just had a situation where a missing dependency means that our Resque scheduler wont start on some machines it throws a terminal exception on startup However god status always says resquescheduler up and so our monitoring hasnt picked this up and we didnt know there was a problem It seems we attempt to restart the scheduler every seconds I wont paste the whole stack trace but the scheduler says this on startup rake aborted cannot load such file tzinfoindexestimezones Tasks TOP resquescheduler See full trace by running task with trace which I assume means the process would have returned a nonzero exit code if that matters Our god config for the scheduler looks like this Godwatch do w wdir RAILSROOT wname resquescheduler wstopsignal QUIT wenv RAILSENVRAILSENV winterval seconds wstart rake resquescheduler werrlog RAILSROOTlogresqueschedulererrorlog wlog RAILSROOTlogresqueschedulerlog wuid DEFAULTRUNASUSER wgid DEFAULTRUNASGROUP wtransitionup restart do on onconditionmemoryusage do c cabove megabytes ctimes end end wtransitioninit true up false start do on onconditionprocessrunning do c crunning true end end determine when process has finished starting wtransition start restart up do on onconditionprocessrunning do c crunning true cinterval seconds end failsafe onconditiontries do c ctimes ctransition start cinterval seconds end end start if process is not running wtransitionup start do on onconditionprocessrunning do c crunning false end end end What strategies can we employ to make god status say something other than up when this sort of thing happens Obviously if the process stops we want to restart it as quickly as possible but if its just continuously restarting wed like to catch that situation in some way Versions in use god version Version ruby version ruby p revision x linux Fixes where god continues to monitor and resurrect a process after executing god stop task name This particular issue occurs when using keepalive a custom stop command using a QUIT signal and a process that does not terminate within the stoptimeout period This commit forces a return after the execution of ensurestop and prevents god from writing a new PID the PID of a process spawned to run the custom stop command and continuing to track the process which was previously killed God resurrects a process after god stop task name is run if the god config for that process uses keepalive a custom stop command using QUIT and does not terminate within the stoptimeout period Reproduction Setup Create a simple script fodderrb that just logs messages fodderrb require logger logger Loggernew homepairfodderoutputlog loggerinfo Start feeding feedingtime true def quitfeeding feedingtime false end SignaltrapQUIT quitfeeding while feedingtime do loggerinfo More fodder sleep end loggerinfo Starting graceful quit sleeptime loggerinfo Sleeping for sleeptimes sleep sleeptime loggerinfo Were finally quitting BYE Create the following simple god config godfodderrb which uses keepalive a custom stop command and an interval godfodderrb Godwatch do w PIDPATH varrungodfodderpid wname fodder wstart ruby homepairfodderfodderrb wstop kill QUIT cat PIDPATH wkeepalive winterval second end Execution Start god with the godfodder config then after a few seconds execute gods stop command god c godfodderrb god stop fodder Output The output from the fodder script outputlog I T INFO Start feeding I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO Starting graceful quit I T INFO Sleeping for s I T INFO Start feeding I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder I T INFO More fodder Output from gods log godlog Oct god Syslog enabled Oct god Loading etcgodgodconfrb Oct god Using pid file directory varrungod Oct god Started on drbunixtmpgod sock Oct god fodder move unmonitored to init Oct god fodder moved unmonitored to init Oct god fodder trigger process is not running ProcessRunning Oct god fodder move init to start Oct god fodder start ruby homepairfodderfodderrb Oct god fodder moved init to start Oct god fodder trigger process is running ProcessRunning Oct god fodder move start to up Oct god fodder registered procexit event for pid Oct god fodder moved start to up Oct god fodder stop kill QUIT cat varrungodfodderpid Oct god fodder ensuring stop Oct god fodder still alive after s sent SIGKILL Oct god fodder move up to unmonitored Oct god fodder deregistered procexit event for pid Oct god fodder moved up to unmonitored Oct god fodder trigger process exited pid exitcode exitsignal threadgroupid ProcessExits Oct god fodder move unmonitored to start Oct god fodder start ruby homepairfodderfodderrb Oct god fodder moved unmonitored to start Oct god fodder trigger process is running ProcessRunning Oct god fodder move start to up Oct god fodder registered procexit event for pid Oct god fodder moved start to up Investigation During initialization god creates a new thread for an EventHandler loop and then registers the processexits condition used in the keepalive method with the EventHandler When a command is sent through the CLI eg god stop fodder a new thread is created This new thread pushes a stop event followed by an unmonitored event onto the god event driver queue The stop event will be processed on the original monitoring thread not the EventHandler loop thread or the CLI command thread and if the stoptimeout time period is reached and the original process is still running a KILL signal will be sent through this original thread This particular stop logic never tries to detach or stop tracking the PID instead god continues to track our PID process At this point the KILL signal triggers the processexits condition on the EventHandler thread which then pushes an event responsible for starting the process back up onto the event queue The original monitoring thread immediately tries to handle that trigger event IF a stopgrace is added to the god config the pause in code execution via sleep in libgodwatchrb after executing the action actually allows one of the thread loops to clean up after itself and clear out our events queue containing the most recently triggered processexits event Once that thread cleans up theres no action for the original monitoring thread to take since our app is registered as unmonitored at this point This particular behavior skirts the problem and allows god to move the process to unmonitored but it does not fix the underlying issue Our application is a JRuby application and something about the way it is configured causes this to occur I can install god in a Ruby Rails app without issue Jruby and Rails however gives me the C extensions error on OSX and CentOS My objective is to automatically start Resque servers in production and I dont like the other options so Im hoping someone can suggest a workaround or configuration option Heres the output It deletes the siteconfrb on each run and the filename is unique as well Mongoplus jeff gem install god Building native extensions This could take a while ERROR Error installing god ERROR Failed to build gem native extension current directory Usersjeffrvmgemsjruby rails godgemsgod extgod Usersjeffrvmrubiesjruby binjruby r siteconf zgo dnrb extconfrb NotImplementedError C extensions are not supported top at Usersjeffrvmrubiesjruby librubystdlibmkmfrb require at orgjrubyRubyKerneljava root at Usersjeffrvmrubiesjruby librubystdlibrubygemscoreextkernelrequirerb top at extconfrb extconf failed exit code Gem files will remain installed in Usersjeffrvmgemsjruby rails godgemsgod for inspection Results logged to Usersjeffrvmgemsjruby rails godextensionsuniversaljava god gemmakeout Some transition diagram issues Im facing 