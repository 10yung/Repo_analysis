Context Steps to Reproduce git clone cd xamarinandroid make jenkins Expected Behavior make should run through without errors Actual Behavior After a while the following error occurs usrbinx w mingw ld cannot find lmincore collect error ld returned exit status homejanusgithubxamarinandroidsrcmonodroidmonodroidcsproj ninja build stopped subcommand failed homejanusgithubxamarinandroidsrcmonodroidmonodroidtargets error MSB The command homejanusandroidtoolchainsdkcmake binninja v exited with code homejanusgithubxamarinandroidsrcmonodroidmonodroidcsproj Done Building Project homejanusgithubxamarinandroidsrcmonodroidmonodroidcsproj default targets FAILED Version Information xamarinandroid version master as of commit fdc f cd ff a df dc d b OS Ubuntu Linux bionic Mono version msbuild version Microsoft R Build Engine version ci for Mono Log File If necessary I can attach the full build log or provide further information Updates our desktop unit test projects to shortform style projects targeting net Any existing AssemblyInfocs files have also been removed from these projects The unused Testcs file which was part of CodeBehind unit tests has also been removed Breaks up the Integrated Regression tests to run across nodes reducing the time taken to run from minutes to x minutes Moves the Integrated Regression tests to a separate Stage to improve readability This also allows us to move the condition to the Stage level instead of each Job Recently we missed apk size increase because the test was not run Context Let check what was added by commit and whether it can be avoided Updates XamarinAndroidBuildTestscsproj to a shortform style project targeting net The XamarinAndroidBuildTestsShared project files have been removed as they only appeared to be referenced by XamarinAndroidBuildTestscsproj The Compile items in that project also no longer need to be explicitly defined so there doesnt seem to be a reason to keep the project around anymore JNIEnv code sometimes tries to map a primitive NET type eg SystemInt to a Java type The mapping call will fail since we have no such mappings in place nor should we which costs between k k ns per call Here are a few stack traces which point to code which requests the mappings W monodroid Failed to map managed type to Java type SystemInt mscorlib Version Cultureneutral PublicKeyToken cec d bea e Module ID d a dd aca d b f ec af W monodroid Called from at AndroidRuntimeJNIEnvTypemapManagedToJava SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetJniName SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvFindClass SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvAssertCompatibleArrayTypes SystemIntPtr sourceArray SystemType destType x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetArray SystemIntPtr arrayptr SystemType elementtype x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetArray SystemIntPtr arrayptr AndroidRuntimeJniHandleOwnership transfer SystemType elementtype x in b a f c e W monodroid at AndroidGraphicsDrawablesDrawablenOnStateChangearrayI SystemIntPtr jnienv SystemIntPtr nativethis SystemIntPtr nativestate x in b a f c e W monodroid Failed to map managed type to Java type SystemInt mscorlib Version Cultureneutral PublicKeyToken cec d bea e Module ID d a dd aca d b f ec af W monodroid Called from at AndroidRuntimeJNIEnvTypemapManagedToJava SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetJniName SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvFindClass SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvAssertCompatibleArrayTypes SystemIntPtr sourceArray SystemType destType x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetArray SystemIntPtr arrayptr SystemType elementtype x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetArray SystemIntPtr arrayptr AndroidRuntimeJniHandleOwnership transfer SystemType elementtype x in b a f c e W monodroid at AndroidGraphicsDrawablesDrawableGetState x in b a f c e W monodroid at XamarinFormsPlatformAndroidBorderDrawableDraw AndroidGraphicsCanvas canvas W monodroid Failed to map managed type to Java type SystemInt mscorlib Version Cultureneutral PublicKeyToken cec d bea e Module ID d a dd aca d b f ec af W monodroid Called from at AndroidRuntimeJNIEnvTypemapManagedToJava SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetJniName SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvFindClass SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvAssertCompatibleArrayTypes SystemIntPtr sourceArray SystemType destType x in b a f c e W monodroid at AndroidRuntimeJNIEnvCopyArray SystemIntPtr src SystemArray dest SystemType elementType x in b a f c e W monodroid at AndroidRuntimeJNIEnvCopyArray SystemIntPtr src SystemArray dest SystemType elementType x in b a f c e W monodroid at AndroidRuntimeJNIEnvCopyArray T SystemIntPtr src T dest x in b a f c e W monodroid at AndroidContentResColorStateListctor SystemInt states SystemInt col W monodroid Failed to map managed type to Java type SystemInt mscorlib Version Cultureneutral PublicKeyToken cec d bea e Module ID d a dd aca d b f ec af W monodroid Called from at AndroidRuntimeJNIEnvTypemapManagedToJava SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvGetJniName SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvFindClass SystemType type x in b a f c e W monodroid at AndroidRuntimeJNIEnvNewArray SystemArray value SystemType elementType x in b a f c e W monodroid at AndroidRuntimeJNIEnvNewArray T T array x in b a f c e W monodroid at AndroidContentResColorStateListctor SystemInt states SystemInt colors x in b a f c e W monodroid at XamarinFormsPlatformAndroidTextColorSwitcherUpdateTextColor AndroidWidgetTextView control XamarinFormsColor color SystemAction T setColor x in acc d d ad c a e W monodroid at XamarinFormsPlatformAndroidFastRenderersButtonRendererUpdateTextColor This creates a new mode for JavaToolTask where if UseDaemonTrue Instead of just running a new javaexe a new JavaDaemonClient class will start a java process that runs javadaemonjar The daemon reads stdin to run a jar files Main method and replies to stdout with the result of running that jar file If JavaDaemonClient is disposed and when the MSBuild node shuts down the java process will exit Some of the gotchas here were We cannot change the working directory of java after the process has started To resolve this we have to create an instance of the daemon for each working directory This should only happen if a solution has multiple XamarinAndroid head projects The classpath of the daemon must include all possible jar files that might be used by the build I used the JavaDaemonClassPath for this There is not currently a way to set java properties with the daemon such as DfileencodingUTF There were two usages of this in CreateMultiDexMainDexClassList and CompileToDalvik I will need to add something to pass these through to the daemon if they are required We need low memory usage for the daemon after a request has completed when it is idle Originally javaexe was using MB of RAM on my PC that has a total of GB of RAM For comparison MSBuildexe is using MB I added a call to Systemgc and used the XXUseG GC switch to get javaexe idling at MB Results I built the XamarinForms project in this repo using MSBUILDNOINPROCNODE The command was git clean dxf tests xabuild tests XamarinFormsPerformanceIntegration Droid XamarinFormsPerformanceIntegrationDroidcsproj r tSignAndroidPackage bl clpperformancesummary pAndroidUseJavaDaemonTrue pAndroidManifestMergermanifestmergerjar Not using daemon ms ManifestMerger calls ms AndroidApkSigner calls ms D calls Time Elapsed Using daemon after daemon is running ms ManifestMerger calls ms AndroidApkSigner calls ms D calls Time Elapsed This seems to save second of build time for these three tasks that run java processes In past iterations before I changed java GC settings I was seeing seconds saving for this app I need to do more investigation there as maybe we can do something to only free up the memory after the entire Build Describe the simplyfied usage with the new targets Since the prepare external dependencies step is only for proprietary dependencies update the wording of the build instructions to let community contributors know that they should skip it make prepareexternaldependencies uses the PrepareExternalGitDependencies step in xaprepare which currently only prepares the monodroid external dependency The Mono dependency listed in external is prepared via a separate DownloadMonoArchive step in xaprepare That step is part of make prepare and does not require running make prepareexternaldependencies