Proof of concept for merging the other repos into this repo while keeping all history See I had some success with the steps described here mkdir rspecmono cd rspecmono git clone gitgithubcomrspecrspecgit git clone gitgithubcomrspecrspeccoregit git clone gitgithubcomrspecrspecexpectationsgit git clone gitgithubcomrspecrspecmocksgit cd rspeccore mkdir rspeccore git mv k rspeccore git rm gitignore git rm document git commit m Moving repo into its own subdirectory cd cd rspecexpectations mkdir rspecexpectations git mv k rspecexpectations git rm gitignore git rm document git rm rspec git rm rubocopyml git rm rubocoprspecbaseyml git rm travisyml git rm yardopts git commit m Moving repo into its own subdirectory cd cd rspecmocks mkdir rspecmocks git mv k rspecmocks git rm gitignore git rm document git rm rspec git rm rubocopyml git rm rubocoprspecbaseyml git rm travisyml git rm yardopts git commit m Moving repo into its own subdirectory cd cd rspec git remote add rspeccore rspeccore git remote add rspecexpectations rspecexpectations git remote add rspecmocks rspecmocks git fetch rspeccore git fetch rspecexpectations git fetch rspecmocks git co b mergerspecrepos git merge allowunrelatedhistories rspeccoremaster git merge allowunrelatedhistories rspecexpectationsmaster git merge allowunrelatedhistories rspecmocksmaster git commit m Import sub repos Update spelling to American version of Behavior Capitalize RSpec to match the rest of documentation Add code ticks to emphasize code portion Hi Im making updates for Open Collective Either you or a supporter signed this repo up for Open Collective This pull request adds backers and sponsors from your Open Collective It adds two badges at the top to show the latest number of backers and sponsors It also adds placeholders so that the avatarlogo of new backerssponsors can automatically be shown without having to update your READMEmd more info See how it looks on this repo You can also add a Donate button to your website and automatically show your backers and sponsors there with our widgets Have a look here PS As with any pull request feel free to comment or suggest changes The only thing required are the placeholders on the README because we believe its important to acknowledge the people in your community that are contributing financially or with code Thank you for your great contribution to the open source community You are awesome And welcome to the open collective community Come chat with us in the opensource channel on great place to ask questions and share best practices with other open source sustainers TLDR I propose that we change our Ruby version support policy for RSpec so that dropping support for old ruby versions is no longer coupled to major version releases Instead I recommend we adopt a policy based around supporting old Ruby versions for N months after the Ruby core team has EOLd it for some reasonable value of N The Current State of Things We currently support versions of MRI In addition we have been strictly interpreting SemVer to mean that the only time we can drop support for an old version of Ruby is when we do a major release As a result we drop support for old versions very very rarely In fact in all my years of involvement with RSpec dating back to I can only think of one version of Ruby weve ever dropped support for we stopped supporting when RSpec was released I think the amount of effort we expend supporting old versions vastly exceeds the utility to our users Why is this a problem Supporting old Ruby versions has a very real maintenance cost Supporting old versions bloats our Travis build matrix costing Travis more resources and slowing down our feedback cycle from our CI builds Our CI build does not consistently pass on old Ruby versions for reasons outside our control For example our CI builds get intermittent segfaults on MRI and REE Dealing with those failures kicking the build etc has a very real maintenance cost Continuing to support old Ruby versions has prevented us from upgrading our dependencies For example we are still on Cucumber x even though Cucumber is out Cucumber does not support ruby starting with Cucumber so we havent been able to upgrade Staying on old versions of dependencies causes us to accumulate excess tech debt In my experience theres often extra work to get my PRs green against the old Ruby versions For example I often accidentally use the newer hash syntax which cannot parse After the CI build finishes I see the failure fix it and force push to address the issue This creates extra work for what should be simple changes Supporting old Ruby versions limits our ability to take advantage of new Ruby features Regarding SemVer The SemVer spec does not specifically document when a library is allowed to drop support for an old version of a language Id argue that its a grey area that were allowed to decide on for our project And even if it did explicitly document it its up to us to decide if we want to strictly follow it IMO the important thing about SemVer is that your project documents the semantics of your versioning and sticks to itnot necessarily that you follow the SemVer spec IMO if we realize that strict adherence to the SemVer spec was inhibiting our ability to serve our users due to extra work it requires it would be wise and appropriate to choose not to follow the spec anymore and decide on our own semantic that we think better serves our users That said I dont believe the SemVer spec requires that we maintain support for old versions of the language until the next major release Coupling Version Drops to Major Releases is a problem While we strive to follow SemVer bumping RSpecs major version is not purely a technical decision Its also a marketing decision The Ruby community has certain expectations around a major release of a project like RSpec containing major new features In addition there are lots of published materials such as my own book that reference RSpecs version number That means that we cant simply rev the major version number more often as a means to drop old ruby versions Besides I think our users appreciate the stability of a major RSpec version line lasting for years Given that major new RSpec versions have historically only happened every years and our recent productivity is if anything less than its been in the past I think that coupling Ruby version support to major releases is problematic We could better serve our users by more productively addressing their issues building new features etc if we were able to drop support for old versions of Ruby between major versions So I believe that beginning with RSpec we should come up with a new Ruby version policy that is not coupled to major releases What should we do instead I propose that we allow ourselves to drop support for old versions of Ruby as part of a minor release eg xy in addition to major releases In addition I think it would be beneficial to have a specific policy about when we will drop old versions so that its not arbitrary based on when we feel like it The Ruby core team announces the support schedule for each version of Ruby and that includes an EOL date I think we should adopt a policy of dropping support for old versions of ruby in the next minor release that comes N months after a version is EOLd for some reasonable value of N such as or Heres a concrete example Ruby was EOLd on If we had adopted this policy for RSpec and chose N we would be dropping support for Ruby in RSpec which is the next minor release since years has elapsed since it was EOLd How would this effect users For users who use RSpec to test applications I do not expect this to have much effect if any on these users This could really only effect users who are running really old versions of Ruby that are months or years past the point where the Ruby core team is supporting it I doubt there are any users who are allowing their Ruby version to remain so far behind while also staying on the latest version of RSpec For users who use RSpec to test gems users who support old versions of Ruby that we no longer support will be effected They wont be able to upgrade RSpec without dropping support for old ruby versions However if we pick a large enough value of N the number of users who are effected by this should be small Questions Thoughts on the idea as a whole If we went with this proposal what value of N should we pick 