Insufficient control flow in certain data structures for some IntelR Processors with IntelR Processor Graphics may allow an unauthenticated user to potentially enable information disclosure via local access Intel Security Advisory Ive smc installed git log head commit a a c b d fa eea b db ad ab e Author St phane Lesimple speed githubspeed net Date Fri Jan chore github add check run on pull requests commit eec e ab e de a dee ca aa b c Author St phane Lesimple speed githubspeed net Date Tue Dec spectremeltdowncheckersh version Spectre and Meltdown mitigation detection tool v on a Xen server xl info egrep releasexenversion release g d eb default xenversion lp lsbrelease rd Description openSUSE Leap Release verifying my cmdline cat proccmdline mdsfull l tfflush and proc cat sysdevicessystemcpuvulnerabilitiesl tf Mitigation PTE Inversion both have l tf mitigation but on exec smc returns CVE aka ForeshadowNG VMM L terminal fault Information from the sys interface Mitigation PTE Inversion This system is a host running a hypervisor YES Mitigation KVM EPT is disabled NA the kvmintel module is not loaded Mitigation L D flush is supported by kernel YES found flushl d in proccpuinfo L D flush enabled UNKNOWN unrecognized mode Hardwarebacked L D flush supported YES performance impact of the mitigation will be greatly reduced HyperThreading SMT is enabled NO STATUS VULNERABLE disable EPT or enable L D flushing to mitigate the vulnerability busyboxs ps command does not have ax option CVE OK your CPU vendor reported your CPU model as not vulnerable ps invalid option a BusyBox v UTC multicall binary Usage ps And busyboxs ps command provides output similar to ax This supports busyboxs ps command Signedoffby Nobuhiro Iwamatsu nobuhiro iwamatsutoshibacojp Hello I would very much like to help on your script When I remove all your shellcheck disable lines I get a bunch of infos and warnings Heres a start Useless cat Consider cmd file or cmd file instead I dont get why you wouldnt do gzip c proccpuinfo devnull base w Please let me know if to continue or not cheers Hi Is the date for correct for this microcode Is it because Im using a KVM CPU The system is running Centos and have microcode el installed CPU microcode is known to cause stability problems NO model x family xf stepping x ucode x cpuid xf CPU microcode is the latest known available version NO latest version is x dated according to local firmwares DB v i This is a virtual machine KVM with the following CPU processor vendorid GenuineIntel cpu family model model name Common KVM processor stepping microcode x cpu MHz cache size KB physical id siblings core id cpu cores apicid initial apicid fpu yes fpuexception yes cpuid level wp yes flags fpu vme de pse tsc msr pae mce cx apic sep mtrr pge mca cmov pat pse clflush mmx fxsr sse sse ht syscall nx lm constanttsc nopl xtopology eagerfpu pni cx x apic hypervisor lahflm bogomips clflush size cachealignment address sizes bits physical bits virtual power management A new way to mess with the SGX secure enclave if you have OS access has been reported and Intel has released microcode that fixes the issue by locking down CPU voltage adjustment What about the Jump Conditional Code JCC Erratum Some pointers Intel Mitigations for Jump Conditional Code Erratum whitepaper pdf Red Hat Intel November Microcode Update Under a corner case condition such a sequence will incorrectly attempt to execute code that does not exist leading to a range of errors from UD Undefined Instruction kernel panic and spurious page faults which may also panic the system Red Hat product security has not ruled out that privilege escalation is possible using this bug Phoronix JCC article collection Great resource with lots of information and tests on the topic The executive summary is that the latest Intel CPU microcodes will fix this erratum at the cost of performance Some of the performance loss can be mitigated by changing the code generator of LLVM and GCC and the assemblers However this comes with a cost for CPUs not affected by this erratum eg AMD See eg this very interesting discussion of the LLVM developers What could spectremeltdownchecker offer Report the affected CPUs and the status of the mitigated microcode levels Show if the kernel was compiled with the conditional jump compiler mitigations to prevent performance loss Please notice that eg the proposed LLVM fix is still in review and not released yet Hi thanks for this awesome script I wanted to report that there appear to be false positives on AWS I tried two different AMIs Amazon Linux AMI and Ubuntu Server LTS Both report a number of vulnerabilities before and after upgrading packages CVE CVE CVE CVE CVE CVE AWS has released a few posts about the status Post CVE CVE CVE is not tagged in AWS post but is mentioned in the Intel release it links to Post CVE CVE CVE CVE I noticed some checks say your CPU vendor reported your CPU model as not vulnerable so it probably makes sense to do something similar for these I think this would help reduce confusion for AWS users Component spectremeltdowncheckernoarch fc fedora Enhancements request While running tools command on a new computer some new observations came to mind Command executed to get the widest coverage of that powerful tool is spectremeltdownchecker v paranoid explain Color codes significances do rely on ones deduction alone as long as it is not documented in manuals pages Due to the use of samenamed colorcoded status such as YES NO for subjects of different nature their significations have to rely then exclusively on use of oolor codes Therefore red green yellowcolored status names may have opposite significations such as bad or good Thus running that command without option nocolor is a requirement in order to get sense to the produced report spectremeltdowncheckerv In red colored characters are certainly inconvenient to read when they cannot be readable at all spectremeltdowncheckerv Due to that fact specifying the use of option nocolor may be required to avoid being dealing with that specific case though it makes at the same time all status significations to be lost Therefore a signification sheme relying on a noncolored code is needed As example a YES whose signification is good would be YES while one whose signification is bad would be YES Existence of option paranoid is well appropriate Its use may modify from green to red characters that would not be if option would not be part of the command Since there is a single redt color produced in report to cover targets resulting from use of that option or without it the natures of those targets cannot be identified as either related to that option or not spectremeltdowncheckerv Addition of a dedicated color code regarding target covered by use of that option would solve that case Such relevant sentence located at the end of the report produced is at the best place to produce the desired effect spectremeltdowncheckerv It would certainly deserve to be separated from the report by at least blank line eventually better a graphical bar and recognized explicitly as such by honouring grammatical conventions in this context a dot at the end of sentence Hello First thanks for the great script I run it on ARM device and believe there are false positive in Variant and it reports Vulnerable in Variant a and Variant My system use kernel But the script reports Vulnerable as below CVE aka Spectre Variant bounds check bypass Kernel has masknospec arm NO STATUS VULNERABLE Kernel source needs to be patched to mitigate the vulnerability How to fix Your kernel is too old to have the mitigation for Variant For ARM the code checks for masknospec in archarm kernelentryS However from these code lines are removed and replaced with arrayindexnospec in archarm kernelsyscallc by commit Thus the script always judges this as positive diff archarm kernelentryS masknospec xscno xscnr x enforce bounds for syscall number archarm kernelsyscallc syscallfn syscalltable arrayindexnospecscno scnr Variant For variant my system already runs armtrustedfirmware with mitigation from ARM But the script reports VULNERABLE as below It believes my system do not have SSBD because currently the code only set cpuidssbd for Intel AMD or Hygon For ARM cpuidssbd is not set and the script always judge as positive I believe SSBD for ARM was added with this patch set CVE aka Variant speculative store bypass Kernel supports disabling speculative store bypass SSB YES found in procselfstatus SSB mitigation is enabled and active NO not vulnerable STATUS VULNERABLE Your CPU doesnt support SSBD 