Hi and thank you for creating this repo Id like to suggest some modifications Fix typo from Shorten examples with the interpret method Use more general naming in the examples with the emailclients method Do not forget about previously explained concepts in the showemployeelist method by making methods do one thing Fix the issue with variable scope introduced in and mentioned in Remove unRuby inheritance from the OCP section Remove not working super method from EmployeeTaxData in order to work it requires name and email parameters Remove redundant super methods from the example with Shape class Hi uohzxela Thanks for your good contents It is really helpful But I have a question about Methods should do one thing Bad def emailclientsclients clientseach do client clientrecord databaselookupclient emailclient if clientrecordactive end end emailclientsclients Good def emailclientsclients clientseach client emailclient end def activeclientsclients clientsselect client activeclientclient end def activeclientclient clientrecord databaselookupclient clientrecordactive end emailclientsactiveclientsclients It seems Good code is more clear but if we use this code we have to loop all clients twice But first Bad code only loops clients once So Bad code is faster than Good code What do you think I think the local variable in the method splitintofirstandlastname is different from the one name Ryan McDermott So it will not affect the outside name variables value DRY is more prevailing than removing duplicate code Method names should say what they do Poorly named methods add to the code reviewers cognitive load at best and mislead the code reviewer at worst Strive to capture the theprecise intent when naming methods In ruby ruby a nil a a a false a a I dont disagree with the sentiment here but Favor functional programming over imperative programming states that Functional languages are cleaner and easier to test The test for the example doesnt change between implementations so doesnt give the reader an indication of why functional style is easier to test ruby require minitestautorun class FunctionalVsImperativeTest MinitestTest def testimperative calculator Imperativenew assertequalcalculatorcalculatetestdata end def testfunctional calculator Functionalnew assertequalcalculatorcalculatetestdata end private def testdata name Uncle Bobby linesofcode name Suzie Q linesofcode name Jimmy Gosling linesofcode name Grace Hopper linesofcode end end class Imperative def calculateprogrammeroutput totaloutput programmeroutputeach do output totaloutput output linesofcode end totaloutput end end class Functional INITIALVALUE def calculateprogrammeroutput programmeroutputsumINITIALVALUE output output linesofcode end end Hi I really like this repo I can see it being immensely useful when working on PR reviews in my company Instead of explaining something I can simply link to a section in this repo Similarly to eg rubystyleguide what do you think about creating a standalone github organization for this repo The full link to this repo would be something like I think this would be really nice and give this repo a nice official touch