Greetings The documentation and issue tracker see seems to imply that HTTP connections should be reused but that doesnt seem to be the case Here is a small app go package main import context fmt log strings githubcomelasticgoelasticsearchv githubcomelasticgoelasticsearchv esapi func main es err elasticsearchNewClientelasticsearchConfig Addresses string Transport httpTransportMaxIdleConns MaxIdleConnsPerHost MaxConnsPerHost IdleConnTimeout timeSecond if err nil panicerr for i i i func logPrintfSaving d n i req esapiIndexRequest Index test DocumentID fmtSprintfd i Body stringsNewReader Refresh true res err reqDocontextBackground es if err nil logPrintlnerr defer func err resBodyClose if err nil logPrintlnerr if resIsError logPrintlnresStatus Before running the app netstat an grep shows tcp LISTEN tcp LISTEN If I then execute netstat an grep awk print sort uniq c while the app is running the number of connections in TIMEWAIT state keeps growing Running it immediately after the app finishes LISTEN TIMEWAIT Reproduced on both linux and MacOS with Elasticsearch go and elasticgoelasticsearch Many thanks damjan Would save a lot of time res err esCount esCountWithIndexidx esCountWithDocumentTypeevent esCountWithIgnoreUnavailabletrue The third parameter will add ignoreunavailabletrue to the request The fasthttp example is not setting the ContentType and fasthttp will assume applicationxwwwformurlencoded and therefore not allowing query parameters When ContentTypeapplicationxwwwformurlencoded URL cannot include querystring parameters after dcd c d d aa ed d f eventcountignoreunavailabletrue Adding dstHeaderSetContentTypeapplicationjson to the copyRequest function will solve this problem Hello unfortunately fasthttp does not support a body when using GET Thats why fasthttp is not working with esSearchWithBody buf Please add an option to switch the search request method to POST Alex I cannot find a way to make a conditional bulk insert I dont know if you support it yet and if not i think it should be a feature if you do support I would like to have a simple example with params aswell document as params because I couldnt find anywhere a way to do it Fyi I would like to do a condition on the field that holds a epoch time and if its newer to insert it and delete the old one not updating just one field but whole doc something like this I am still feeling like its too hard to do what I feel are common things with this client In order to use tokens you have to implement a custom RoundTripper which is pretty deep and awkward within Go especialy if youre a developer who just wants to use elasticsearch and move on implementing a custom RoundTripper or custom Transport is tedious In order to use custom ssl certs you have to modify the TLSClientConfig of the transport This is still pretty deep within nethttp as compared to the abstraction layer elasticsearch client library deeper than Id prefer I was unable to find any solid examples of setting both custom headers for tokens and setting custom CA certs To that end heres what I found works this code requires Go for httpTransportClone package main import cryptox fmt githubcomelasticgoelasticsearchv ioioutil log nethttp os type CustomRoundTripper struct httpRoundTripper Custom funchttpRequest httpResponse error func crt CustomRoundTripper RoundTripreq httpRequest httpResponse error return crtCustomreq func main esurl osArgs token osArgs cafile osArgs transport httpDefaultTransporthttpTransportClone var err error transportTLSClientConfigRootCAs err x SystemCertPool b err ioutilReadFilecafile if err nil logPrintfError reading additional ca certs in path s error s cafile err osExit ok transportTLSClientConfigRootCAsAppendCertsFromPEMb if ok logPrintfNo certs were found in the additional ca cert path s cafile osExit crt CustomRoundTripper Custom funcreq httpRequest httpResponse error reqHeaderSetAuthorization fmtSprintfBearer s token return transportRoundTripreq config elasticsearchConfig Addresses stringesurl Transport crt es err elasticsearchNewClientconfig if err nil logPrintfError creating ES client s err osExit resp err esPing if err nil fmtPrintfError pinging ES s n err osExit fmtPrintfResponse s n resp Could we provide some kind of helper function in this library to help users generate their custom Transport Something like elasticsearchNewClientelasticsearchConfig Transport happyHttpHelper Headers AdditionalCARoots Especially as tokens are becoming more prominent in Elasticsearch API tokens etc it would improve things if we made it less code to achieve this especially if that less code removes areas of Go that I assume people do not commonly travel DIY Transport implementations etc Issue When using an asterisk as part of the index name like someevents to match different indexes like someeventsfoo someeventsbar someevents the url encodes the Sample code esIndexName someevents esResp err cESClientSearch cESClientSearchWithContextctx cESClientSearchWithIndexsomeevents cESClientSearchWithBody buf cESClientSearchWithErrorTrace if err nil Not err defer esRespBodyClose if esRespIsError Its a like Forbidden htmlbodyh Forbiddenh nRequest forbidden by administrative rules nbodyhtml n return fmtErrorfs esRespString And I can see the logs in Elastic like Timestamp GET someevents Asearcherrortracetrue HTTP Expected Timestamp GET someeventssearcherrortracetrue HTTP Root cause Index name gets appended here Request is formed here Path is parsed here Behavior Additional info Version from gomod githubcomelasticgoelasticsearchv v Golang URL Parser pkggodev is live now and successfully serves this repo as Reference Fixes The three methods setURL setAuthorization and setUserAgent are all intended to help update the request header inplace given pointers are used The return value is not usedreferenced anywhere It may be worth removing these unused returns to reduce footprint of these methods Based on the Delete By Query API documentation the slices field may be set to auto The DeleteByQueryRequest struct only allows int as input as does the DeleteByQuery method so there does not currently appear to be a way to set that value using this library