Hi I had some behavior I was not expecting using Task under Windows and git bash on a project that was originally on a Mac System information Windows Task taskwindowsamd zip extracted and added to PATH Problem I was expecting my sh scripts to be able to run in the same way in Task or Git Bash but Task threw an error Example Task File version tasks test cmds testsh testsh usrbinenv bash echo test Note binbash produced the same result Executing from git bash testsh gives the output test Executing from task task test gives the following error task Failed to run task test forkexec D test testsh is not a valid Win application Workaround The workaround I ended up with was to add bash to the command Fixed Task File version tasks test cmds bash testsh Which then gives the correct output test Running the Task with just testsh works directly on a Mac but not under git bash on Windows Is this a bug limitation or is there something I should have set up before System and Task version information Task version SystemVersion macOS B KernelVersion Darwin Description Migrated a make file to Taskfile to execute Terratest but Task fails to download vendors with dep ensure dep seems to think it is in the root directory with Taskfile not honouring the dir flag of a cd to temp gopathsrcgotaskexample folder To reproduce the issue I have created a sample project gotaskexample Steps from testsrc make test make clean task test task clean The MakeFile make PACKAGE gotaskexample GOEXE which go GOPATH CURDIRgopath GOBIN GOPATHbin BASE GOPATHsrcPACKAGE PATH PATHGOBIN export TFDATADIR CURDIRterraform export TFCLIARGSinit getpluginstrue export GOPATH PHONY all Default target all test ifneq wildcard sbinapk Install go if not installed GOEXE apk add update go endif ifneq OSWindowsNT Install all dep if not installed GOBINdep mkdir p GOBIN curl sh endif Prepare the GOPATH BASE GOEXE mkdir p dir ln sf CURDIR init and download vendor dependencies to vendor basevendorinit BASE GOBINdep cd BASE dep init Download vendor dependencies to vendor BASEvendor BASE GOBINdep cd BASE dep ensure PHONY init Initialize tests init BASEvendor PHONY test Run tests test init cd BASE go test v timeout m run TestExamplesComplete PHONY clean Clean up files clean rm rf gopath vendor TFDATADIR terraformtfplan examplescompleteterraformtfstate examplescompleteterraformtfstatebackup The Taskfileyml yml version vars PACKAGE gotaskexample CURDIR sh echo PWD GOPATHVAR sh echo PWDgopath GOEXE sh which go GOBIN GOPATHVARbin BASE GOPATHVARsrcPACKAGE env TFDATADIR terraform TFCLIARGSinit getpluginstrue GOBIN GOBIN GOPATH GOPATHVAR PATH sh echo GOBINPATH tasks goexe desc Is go installed cmds echo You need to install GO status test f GOEXE gobindep desc Download and install Golang Dep cmds mkdir p GOBIN curl sh status test f gopathbindepexeExt base desc Create a symlink to of the current testsrc to BASE deps goexe cmds mkdir p GOPATHVARsrc ln sf CURDIR BASE status test d BASE basevendorinit desc Initialize Dep to create and download Terratest project dependecies of Gopkgtoml does not exists dir BASE deps gobindep cmds dep init status test f BASEGopkgtoml basevendor desc Dep esure downloads all require go dependecies deps base gobindep dir BASE cmds echo export PATHGOBINPATH echo PATHPATH echo export GOPATHGOPATHVAR echo GOPATHGOPATH echo echo PWDPWD echo cd BASE dep ensure init desc Initialize terratest project environment deps basevendor test desc Run tests deps init dir gopathsrcterraformwindowsapplicationcluster cmds go test v timeout m run TestExamplesComplete clean desc Cleans up all files and foders inorder to run terratest cmds rm rf gopath vendor terraform terraformtfplan examplescompleteterraformtfstate examplescompleteterraformtfstatebackup Task output Shell task test mkdir p UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbin task Task goexe is up to date curl sh mkdir p UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrc ln sf UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrc UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrcgotaskexample Total Received Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed k k ARCH amd OS darwin Will install into UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbin Fetching Release Tag v Fetching Fetching Setting executable permissions Moving executable to UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbindep echo export PATHGOBINPATH echo PATHPATH echo export GOPATHUserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopath echo GOPATHGOPATH echo echo PWDPWD echo cd UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrcgotaskexample dep ensure PATHUserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbinoptchefdkbinUserskneufeldchefdkgemruby binoptchefdkembeddedbinoptchefdkbinUserskneufeldchefdkgemruby binoptchefdkembeddedbinoptchefdkembeddedbinusrlocalbinpwshusrlocalbinusrbinbinusrsbinsbinoptchefdkbinUserskneufeldchefdkgemruby binoptchefdkembeddedbinusrlocalbinpwshUserskneufeldDocumentsDevelopmentgoworkspacebinusrlocaloptgolibexecbinoptchefdkgitbinUserskneufeldDocumentsDevelopmentgoworkspacebinusrlocaloptgolibexecbinoptchefdkgitbinoptchefdkgitbin GOPATHUserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopath PWDUserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrcgotaskexample UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrc is not within a known GOPATHsrc task Failed to run task basevendor exit status MAKE output shell make test Total Received Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed ARCH amd OS darwin Will install into UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbin Fetching Release Tag v Fetching Fetching Setting executable permissions Moving executable to UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathbindep cd UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrcgotaskexample dep ensure cd UserskneufeldDocumentsDevelopmentterraformgotaskexampletestsrcgopathsrcgotaskexample go test v timeout m run TestExamplesComplete RUN TestExamplesComplete PAUSE TestExamplesComplete CONT TestExamplesComplete TestExamplesComplete T retrygo terraform init upgradetrue TestExamplesComplete T commandgo Running command terraform with args init upgradetrue TestExamplesComplete T commandgo Upgrading modules TestExamplesComplete T commandgo label in TestExamplesComplete T commandgo TestExamplesComplete T commandgo Initializing the backend TestExamplesComplete T commandgo TestExamplesComplete T commandgo Terraform has been successfully initialized TestExamplesComplete T commandgo TestExamplesComplete T commandgo You may now begin working with Terraform Try running terraform plan to see TestExamplesComplete T commandgo any changes that are required for your infrastructure All Terraform commands TestExamplesComplete T commandgo should now work TestExamplesComplete T commandgo TestExamplesComplete T commandgo If you ever set or change modules or backend configuration for Terraform TestExamplesComplete T commandgo rerun this command to reinitialize your working directory If you forget other TestExamplesComplete T commandgo commands will detect it and remind you to do so if necessary TestExamplesComplete T retrygo terraform get update TestExamplesComplete T commandgo Running command terraform with args get update TestExamplesComplete T commandgo label in TestExamplesComplete T retrygo terraform apply inputfalse lockfalse autoapprove TestExamplesComplete T commandgo Running command terraform with args apply inputfalse lockfalse autoapprove TestExamplesComplete T commandgo TestExamplesComplete T commandgo Apply complete Resources added changed destroyed TestExamplesComplete T commandgo TestExamplesComplete T commandgo Outputs TestExamplesComplete T commandgo TestExamplesComplete T commandgo label TestExamplesComplete T commandgo attributes TestExamplesComplete T commandgo delimiter TestExamplesComplete T commandgo id namespacestagename TestExamplesComplete T commandgo name name TestExamplesComplete T commandgo namespace namespace TestExamplesComplete T commandgo stage stage TestExamplesComplete T commandgo TestExamplesComplete T commandgo label attributes TestExamplesComplete T commandgo label id namespacestagename TestExamplesComplete T commandgo label name name TestExamplesComplete T commandgo label namespace namespace TestExamplesComplete T commandgo label stage stage TestExamplesComplete T commandgo label tags TestExamplesComplete T commandgo Key Value TestExamplesComplete T commandgo Name namespacestagename TestExamplesComplete T commandgo Namespace namespace TestExamplesComplete T commandgo Stage stage TestExamplesComplete T commandgo TestExamplesComplete T retrygo terraform output nocolor json label TestExamplesComplete T commandgo Running command terraform with args output nocolor json label TestExamplesComplete T commandgo attributes delimiteridnamespacestagename namenamenamespacenamespacestagestage TestExamplesComplete T retrygo terraform destroy autoapprove inputfalse lockfalse TestExamplesComplete T commandgo Running command terraform with args destroy autoapprove inputfalse lockfalse TestExamplesComplete T commandgo TestExamplesComplete T commandgo Destroy complete Resources destroyed PASS TestExamplesComplete s PASS ok gotaskexample s Im trying to set up nvm and node using gotask but the gosh the tasks are running in is giving me some trouble You can see the task Im trying to run below where the first command works fine SHELL is zsh in my case and the scripts installs correctly But nvm is installed as a shell function not a binary so the commands which nvm and nvm install node fail to find nvm setup desc setup common tools cmds d nvm curl o SHELL echo nvm installed skipping which nvm nvm install node silent no nvm also adds some things to my zshrc when the install script runs and it requires to set some environment variables in order to immediately use nvm or to restart your terminal to load those vars from zshrc export NVMDIRHOMEnvm s NVMDIRnvmsh NVMDIRnvmsh This loads nvm s NVMDIRbashcompletion NVMDIRbashcompletion This loads nvm bashcompletion Is this possible to do with gotask or am I outside the scope of the application It would be really great to be able to set this task up so that I can install nvm and node npm so that I can install some common tools that we use in one task Would putting these installation commands for nvm and node into a script be a better approach If relevant include the following information Task version Task version OS darwin Example Taskfile showing the issue version vars Repo blah Tag confd Version v FullName Repo Tag Version tasks containerbuild desc This will build OS cmds docker build t FullName silent true Variable interpolation works well but it seems that desc does not support auto generating content I am looking for this to try to make my tasks a little more generic OS or other golang templates should be executed for desc Description In order to make a project dependencies update tools Im interested by the preconditions options It allow me to run the different dependencies managers if the condition are met yaml version silent true tasks default deps composer npm composer preconditions test f composerlock cmds composer update npm preconditions test f packagelockjson cmds npm update But the way this option is working does not fit my needs It fail immediately if one of the task as unmet condition task task test f packagelockjson failed task test f composerlock failed task precondition not met touch composerlock task task test f packagelockjson failed task precondition not met I didnt find any option to solve this issue so I guess it was designed for Would you consider an evolution about this Regards It would be great to be able to set an option to avoid having to call the tasks using the task includenametask syntax when including a taskfile So this example assumes you have files like Taskfileyml commonTaskfileyml The use case for this is when creating a main Taskfile for a repository and importing some common tasks lets say list clean and version right now I need to then call task commonclean etc to run them Instead I would like to be able to do something like this in my main taskfile includes common common flattentrue override false Where the flatten property would define that the tasks from common should be available as if they were present in the main taskfile so task clean would actually call task commonclean This would probably have to throw a conflict error if the clean task exists in both the main taskfile and the common one meaning that anything from an included taskfile that would be flattened out needs to be unique Possibly an override property could be added instead to let the included task take precedence over any task with the same name in the main taskfile This kind of functionality would allow you to add taskfiles as a submodule to a repository create a main taskfile for that repo where you include the submodule taskfiles and still be able to run common tasks with a short syntax without having to point out the subtaskfile Or in other words include other taskfiles as transparent libraries yaml version tasks ehrbase cmds java jar applicationtargetapplication jar log grep m Started EhrBase in tail f log echo EHRbase started and ready to be used results in error task t taskyml ehrbase java jar applicationtargetapplication jar log grep m Started EhrBase tail f log panic unhandled word part syntaxProcSubst goroutine running mvdanccshv expandConfigwordFields xc a xc aa x x xc x x x x UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha expandexpandgo x a mvdanccshv expandFields xc a xc a x x xc e e x da x db xc e a x a c UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha expandexpandgo x b mvdanccshv interpRunnerfields xc d xc a x x xffffffffffffffff xc e x b UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x a mvdanccshv interpRunnercmd xc d x e xc a x b xc b UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x e mvdanccshv interpRunnerstmtSync xc d x e xc a xc a UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x b mvdanccshv interpRunnerstmt xc d x e xc a xc a UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x ce mvdanccshv interpRunnerstmts xc d x e xc a xc b x x UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x mvdanccshv interpRunnerRun xc d x e xc a x f e xc a x xc cc UsersandreycodeandreyGOPATHpkgmodmvdanccshv v alpha interpinterpgo x githubcomgotasktaskv internalexecextRunCommand x e xc a xc e af x c x Usersandreycodeandreytaskinternalexecextexecgo x fd githubcomgotasktaskv ExecutorrunCommand xc a c x e xc a xc x fff fbffb x x x x x Usersandreycodeandreytasktaskgo x e githubcomgotasktaskv ExecutorRunTask xc a c x e xc a x fff fbffb x x xc x fea Usersandreycodeandreytasktaskgo x githubcomgotasktaskv ExecutorRun xc a c x e xc a xc x x x x ad db Usersandreycodeandreytasktaskgo x mainmain Usersandreycodeandreytaskcmdtasktaskgo xb Moreover it is strange that the java process is not started at all in above example The java process starts only if do not try to put it into background or if I add a sleep after the java jar command If relevant include the following information Task version OS Example Taskfile showing the issue Task version Darwin Kernel Version Thu Jun PDT rootxnu RELEASEX x In order to allow shorthand notation for tasks consider allowing a task to be referenced by multiple values For example and equivalent in shell would be sh usrbinenv bash case in dt do dothing dothething perhaps in a Taskfileyml it could be yml tasks dothing cmds aliases dt do dothething Just an idea just putting it out there Feel free to close whenever etc Thanks for your time If relevant include the following information Task version OS Example Taskfile showing the issue It would be nice to see a lint or lint option that you can pass to task so you can check your file against your proposed Styleguide Would be useful for CICD checks as well Now that we have bash zsh autocomplete scripts in this repo we can install them as part of installation with homebrew Ive noticed that we have this formula already Adding lines to the formula will do that for us bashcompletioninstall completionbashtaskbash task zshcompletioninstall completionzshtask task I was just testing this on my machine today Happy to raise a PR for that if its fine Thanks