Integrates and Fixes Tests for now Update the urls for make test There is definitely an issue with processes not shutting down when running tests If you run basic before performance performance will just hang When building using make I had the following errors javac source target srcorgflatlanddripMainjava srcorgflatlanddripSwitchablejava srcorgflatlanddripSwitchableInputStreamjava srcorgflatlanddripSwitchableOutputStreamjava d classes warning options bootstrap class path not set in conjunction with source error Source option is no longer supported Use or later error Target option is no longer supported Use or later make Makefile classesorgflatlanddripMainclass Error If I replace them with I got warning options bootstrap class path not set in conjunction with source warning options source value is obsolete and will be removed in a future release warning options target value is obsolete and will be removed in a future release warning options To suppress warnings about obsolete options use Xlintoptions But we dont need them anymore AFAIK So I just dropped the options Then another warning came up srcdripdaemonc warning implicit declaration of function wait Wimplicitfunctiondeclaration So I fixed that one according to Thank you devs Hi not so much a bug as an enquiry Ive been trying to optimise my startup times and I was trying out drip and I was noticing a slight increase in startup time which I thought was weird Logstash makes using drip easy since all you need specify is the USEDRIP environment variable Upon closer investigation I noticed that a restart was killing all the processes not just the active one basically meaning that drip has to reinitialise once more and spin up the extra jvm which explains the extra delay I think this is to do with systemd killing all processes associated with the logstash services as well as the logstash runtime Curiously this also happens when I kill the active process itself so presumably systemd is monitoring that somehow I suppose this is strictly speaking a logstash issue since its they who supply the USEDRIP feature but I can imagine them saying its not for that running under systemd which is fair enough I suppose Just wondering if you have any thoughts or suggestions as to how I might address this issue I might see if I can figure it out myself Thanks Rob Im trying out drip for a java CLI The dripclient side is a only a UNIX socket sending command args to the server listener which respond to various commands This makes the client part very thin since jar dependencies are packaged on the server Hopefully this setup can be enough for bash auto completion as well However when i run a test between drip and java they seem to perform equally fast But maybe im missing or doing something wrong I have created a supersimple project that demonstrate the clientserver functionality here The tests can be run like this Start the listening side on tmpservsock run drip server Run the drip test for i in do time run drip dripmsg done Run the drip test for i in do time run java javamsg done Heres a sample run Java for i in do time run java javamsg done javamsg echoes real m s user m s sys m s msg echoes real m s user m s sys m s javamsg echoes real m s user m s sys m s javamsg echoes real m s user m s sys m s javamsg echoes real m s user m s sys m s Drip for i in do time run drip dripmsg done dripmsg echoes real m s user m s sys m s dripmsg echoes real m s user m s sys m s dripmsg echoes real m s user m s sys m s dripmsg echoes real m s user m s sys m s dripmsg echoes real m s user m s sys m s Cheers Awesome project Fixes the following compiler warning srcdripdaemonc In function main srcdripdaemonc warning implicit declaration of function wait Wimplicitfunctiondeclaration wait status As in topic Hey guys I was trying to use drip with Scala and fish shell on Mac OS X and it caused me some pain today It seems it keeps creating new processes and never kills those it used before If I ps aux grep c drip now it counts hits for dripdaemon so this is probably the true process count I am using Scala both as REPL and in Intellij Idea latest Ive added those lines to my fishinit files as docs suggested fish set gx JAVAHOME usrlibexecjavahome set gx PATH JAVAHOMEbin PATH set gx JAVACMD drip and everything was nice and speedy but I started to run out of processes I upped my ulimit and launchctls maxprocs limits but I kept getting fork errors and started looking at my ps aux output Heres the command that keeps repeating times now lukaszbialy S PM usrlocalbinCellardrip binlibexecbindripdaemon LibraryJavaJavaVirtualMachinesjdk jdkContentsHomebinjava Xmx M Xms M XbootclasspathausrlocalCellarscala libexeclibjline jarusrlocalCellarscala libexeclibscalacompilerjarusrlocalCellarscala libexeclibscalalibraryjarusrlocalCellarscala libexeclibscalaparsercombinators jarusrlocalCellarscala libexeclibscalareflectjarusrlocalCellarscala libexeclibscalaswing M jarusrlocalCellarscala libexeclibscalaxml jarusrlocalCellarscala libexeclibscalap jar DscalahomeusrlocalCellarscala libexec Dscalausejavacptrue Denvemacs Djavaawtheadlesstrue classpath usrlocalbinCellardrip binlibexecbindripjar orgflatlanddripMain scalatoolsnscMainGenericRunner Userslukaszbialydrip INSERT RANDOM HASH HERE Any ideas am I doing something ridiculously wrong Hello I just tried drip on a Solaris server and it seems it has a dependency on git since Im getting an error drip line git command not found For some reasons I can not install git on my server Is there any way to remove that dependency Currently it does not appear that Drips jar is published to Maven Central This makes it difficult or impossible to work with the Drip classes directly from a Mavenbased project Specifically I need to be able to access the Switched interface in order to acquire a reference to the real file descriptors to be used for stdio See jrubyjruby For the moment I will use reflection If the maintainers of Drip need assistance getting this published I can help you follow the Sonatype OSS instructions Im using Tabula more specifically the commandline version tabulajava to extract data from PDFs I have a bash script which calls tabulajava a total of four times per PDF Its a slow process sec per PDF I have almost K PDFs to process so I was hoping to see some speedup by using drip Unfortunately my script doesnt like drip When I pipe tabulas output to tr translate the script hangs within tr Heres one of those tabula calls which hangs in a pipedto tr export idvaluedrip cp tabula jarwithdependenciesjar technologytabulaCommandLineApp a p filename tr d r n When I say this hangs I mean that it enters but never exits tr ControlC will get me back to the prompt The script works just fine when I avoid drip and call tabula through java export idvaluejava cp tabula jarwithdependenciesjar technologytabulaCommandLineApp a p filename tr d r n Details OS X tabulajava 