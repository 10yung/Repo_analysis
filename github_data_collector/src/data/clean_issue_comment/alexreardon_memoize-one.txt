This fixes the following test ts declare const fn Ta T value T const fn memoizeOnefn ExpectType Tthis unknown a T value T Previously the return type was ts a any value any meaning all type safety was lost Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details We use memoizeone for almost two years with promises just fine but looking at the code now I realized that it maybe is not intended or tested to work with them But maybe all thats missing is an description of fn in the readme The mentioned error handling likely never was triggered since promises fall into an error state instead of throwing an error Bumps mixindeep from to details summaryCommitssummary f c ee fa ensure keys are valid when mixing in values See full diff in compare view details details summaryMaintainer changessummary This version was pushed to npm by doowb a new releaser for mixindeep since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details In one of the projects I work on with quite similar utility to memoizeOne which have some differences But the only key difference the doesnt allow us to use memoizeOne is the fact we can remove the cache I know it might be out of the scope of this project So I understand it would be the reason to reject the PR But personally I find it a useful utility This Names decorated functions simply memoized in the case the input function is anonymous Names decorated functions memoizedfoo in the case the input function has a name of foo Names decorated functions memoizedfoo in the case the input function has a displayName of foo despite having a name of bar It also gives a name to the default export of memoizeone of memoizeOne as it was previously index in every case but the minified version where it was the empty string and will continue to be Upside Makes for debugging these decorated functions much easier in debugging tools and stack traces Downside more checks and more names add to the size of the compiled output Test Plan yarn test Import the main entry from a repl and confirm the export is named memoizeOne It would be good to know some information about cache breaking for debugging purposes The big idea is that it could expose a lot of debug information on the console I am not sure what the api would be but here is some initial thoughts js import memoizeOne trace from memoizeOne const times arg number arg number number arg arg const memoized memoizeOnetimes tracetimes first time call new arguments returning new result tracetimes new arguments match previous arguments returning previous result tracetimes cache bust new arguments do not match previous arguments argument change calculating new result and returning Memoizing a function sets its length property to zero js import memoizeOne from memoizeone f a b c abc memoF memoizeOnef consolelogflength consolelogmemoFlength This is not really a big deal length is a configurable property so if you care about flength you can just set it manually afterwards using ObjectdefiniteProperty Should memoizeOne automatically configure the memoized functions length property Actually the problem is not with typescript the problem is with rollup contains js moduleexports index which should be imported as import as memoizeOne while contains js export default index which should be imported as import memoizeOne Result the code for nodejs jest require one behaviour while the code for webpackuses esm bundle requires another It is not a problem for jsflow as long babel is doing some around magic default imports but typescript is quite strict about it The cjs bundle should match esm bundle and fixing this would introduce a breaking change