 x Simplify nested match expressions x Generate variables for disjunction checking Better symbolic checking of function equality Utilities to verify naturality fmap and monad laws Eg Either and List have different accessor names The fix make tests insensitive to these names When generating a function such as Option A Option A the preferred implementation would be x x Sometimes code such as this is generated scala Warning type A Option B Nonetype Some B B Option C Nonetype Some C A Option C Nonetype Some C has implementations laws need checking a b c a c match d None e b evalue score a b c None score def kleisliOptCompose A B C f A Option B g B Option C A Option C implement It is better to generate code such as x match d d instead of x match d None when d is itself already None This code would have a lower information loss score Examples where curryhowards present heuristics do not generate the expected code scala type P T Option T Option T def fmap A B f A B P A P B implement def flatten A P Option A P A implement 