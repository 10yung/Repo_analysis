 As part of allowing SystemTextJson to be used in VS See for example AB VS insertions are currently failing with problems reported about our new SystemTextJson dependency We are trying to tune our build servers to speed up build times and we are looking for documentation on how Parallel Builds actually work in MSBuild with special focus to C There is not a wiki page and I am not smart enough to chase this in code If I could be given a pointer on where to start I can dig from there There is good discussion on which gives a little background but focuses more on C are there other places that do a more indepth dive Historically we have naively assumed that looking at our dependency graph in a breadthfirst manner would give us a good gauge for optimal coreworker allocation However we do not believe that this accurately depicts what MSBuild does Rather it appears that MSBuild when given a solution file will attempt to crawl the dependency tree in a depthfirst manner It is unclear if this is by design or just an artifact of the current implementation What we are trying to find is a way to determine a rough estimate simply by evaluating the dependency tree without building on the value of adding N cores to an existing build instance Is that even possible I have Visual Studio version and MSBuild version e fe for NET Framework I have a solution with around projects mix of csproj and vcxproj All target net or produces native images All projects are currently using old style csproj Project DefaultTargetsBuild xmlns ToolsVersion ToolsVersion is but I think it is not important to my case Recently I wanted to have a look on new style builds sdk and I converted one small csproj with excellent CsprojToVs This went smooth and there is no problem except I had to set AppendTargetFrameworkToOutputPath to false to adjust OutputPath This csproj has one direct dependency but more than indirect ones My problem is that it takes too long for subsequent builds to complete Even smallest change in my project takes around seconds to build in Visual Studio via rclick Build or CtrlB I installed Project System Tools and by looking into resulting logs I see that biggest offender is GetProjectReferenceTargetFrameworkProperties ms FindReferenceAssembliesForReferences calls ms CopyFilesMarkedCopyLocal calls ms AssignTargetPaths calls ms ResolveAssemblyReferences calls ms GetCopyToOutputDirectoryItems calls ms ResolveProjectReferences calls ms GetProjectReferenceTargetFrameworkProperties calls Build succeeded Warnings Errors Time Elapsed Looking at definition for GetProjectReferenceTargetFrameworkProperties I tried setting SkipGetTargetFrameworkProperties but it did not change situation ProjectReference Include project projectcsproj SkipGetTargetFrameworkPropertiestrue Do I hit some edge case or is it just regular RAR problem mentioned so often in issues here Is there any workaround I do not need multitargetting currently introduced logging execution context details but they do not get captured by the MuxLogger Investigate and decide if the MuxLogger should capture these events or not Should enable to log places where msbuild searches for command line arguments Steps to reproduce I have the following repro solution structure see attachmeent Solution ProjectA DependentProjectsOutputNotCopiedDependency Content Contenttxt Copy if newer ProjectB DependentProjectsOutputNotCopiedReference ProjectReference ProjectA Both projects target NET Framework both are using the new SDKstyled project format Expected behavior When I build ProjectB in such a way that ProjectA is built at the same time eg if ProjectA is not uptodate or by performing Rebuild all the Contenttxt is correctly put into the output folder of ProjectB This should also be the case if ProjectA is not built in this MSBuild run Actual behavior In all cases where ProjectA is not built eg because it is uptodate the Contenttxt is NOT copied to the output folder of ProjectB When I execute ProjectB unit test project it runs into runtime problems because the necessary Contenttxt is not available Environment data MSBuild used by VS OS info Windows I think warnings elevated to errors should have different output compared to errors that are always errors The NuGet team has received numerous complaints from people asking why something they don t consider serious has failed their build and we have to keep repeating that NuGet treats it as a warning and help them understand how their project has opted into warnings as errors I think if the error said Warning As Error NU instead of just Error NU or Error elevated warning NU Error NU elevated warning or something similar customers would more quickly understand that their project configuration has asked for this However I suspect changing the message could cause problems with people who run regex on the build output maybe the VS error list will be affected So I d like input from other teams what might be a good approach plus see if there s any buyin from other teams to do this in a consistent way