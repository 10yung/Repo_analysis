I have problem with very very defragmented files when downloading via DCC I just dont know how much or if responsible is Irssi on my setup Unfortunately I use Windows NTFS and launch irssi via cygwin Please dont judge To ilustrate how fragmented files yellow color are After zooming on middleish cluster All yelow parts are one file aprox gb Getting it via DCC is very fast that I can tell reading from it thats a nightmare When dccing multiple files they interweave freely because why shouldnt they I looked through set options for dcc but it was nothing even remotely helpful It looks like irssi is trying to write as much small chunks of data in as much small packages as possible and filesystem cant help but make it as sparse as it can get Fixes Using the simple Perl script to print some TLS connection details perl use strict use Irssi use vars qwVERSION IRSSI VERSION IRSSI authors JAA name tls sub sigtlshandshakefinished my server tls IrssiprintsprintfNow connected to sd using s serveraddress serverport tlscipher Irssisignaladdlasttls handshake finished sigtlshandshakefinished results in the error Irssi critical irssiblessiobject assertion type xffff failed on connecting to any TLSenabled IRC server when irssi attempts to execute the signal handler The handler is executed anyway but the TLSREC object in the second argument appears to be unusable printing Now connected to hostport using As far as I can tell irssi itself is not affected by this assertion error in any way Trying to initiate an active transfer from an IPv server I get DCC SEND from someone someip port somefiletxt kB DCC cant connect to someip port Checking with Wireshark irssi does not send any packet at all to someip Trying telnet someip immediately works and fills my terminal with binary data Observed with versions and current master Any information on how to debug this further is very welcome I last used XDCC just fine over a year ago with an older version For all incoming messages irssi first emits a server incoming signal This allows for very lowlevel access to the incoming IRC traffic I was looking for an equivalent signal for full control over outgoing messages and came up empty as far as I can tell one would have to individually bind to each relevant signal that could trigger a message to be sent Id like to propose adding a server outgoing signal It would be triggered once for each line just before it is actually sent to the server and have two arguments the SERVERREC and the line to be sent Stopping the signal would also stop the line from being sent The documentation is instructing me to do the following cd srcircproxy I would suggest including the proper path in my system its usrlocalincludeirssisrcirc or even just three dots and a slash As a rather new gnu user this was nontrivial to figure out step two run make returns make no target to make I dont know where to go from here since I am unsure what I would even be compiling by running the command Judging from the instructions this would be an alternative to recompiling and here i am running make Im on freebsd and am using the binary provided and installed by pkg Is my use case supported by this documentation I think not It would be worthy to at least specify the use cases your documentation covers in the documentation itself lest someone do something like compile manually over the top of an installation preconfigured by a package manager which could lead to depdency conflicts and so on for the user thanks is delicious low hanging fruit for tshirt month surprised no one else took it before It would be great if irssi would implement support for so you can fill gaps in the conversation history that happened when you were offline or had other network issues Ive only tested this for hidelevel but I reckon it should work the same for everything else IMO window hidelevel JOINS PARTS should set the absolute value of hidelevel and JOINS PARTS and JOINS PARTS should be used to adddelete levels In the modern world the support for some languages that are righttoleft and mixing them with lefttowrite words and numbers is crucial for a different software At some point this should be supported everywhere including the console I started to gather the information about BiDi support in various console terminals and programs in analogy with true color crusade at New console BiDi specification was recently implemented in libvte by egmontkob Note that with the release of GNOME the support of BiDi is available in Gnome Terminal out of the box which makes testingimplementing it in the other programs such as irssi way easier 