Defining the index type on options is falling back to gist addhstoreindex people info type gin the above example is not creating a type gin index I am using rails and ruby when i installed activerecordpostgreshstore gem i got following error activesupport libactivesupportcoreextmodulealiasingrb in aliasmethod undefined methodsimplifiedtype for class ActiveRecordConnectionAdaptersPostgreSQLColumn NameError from activesupport libactivesupportcoreextmodulealiasingrb inaliasmethodchain rvmgemsruby globalgemsactivesupport libactivesupportcoreextmodulealiasingrb in aliasmethod undefined methodsimplifiedtype for class ActiveRecordConnectionAdaptersPostgreSQLColumn NameError This is Rails Im getting the following error but only when the method is executed via Sidekiq T Z TIDovtw n c WARN undefined method scan for Hash T Z TIDovtw n c WARN Usersmemyappcodemyfitmentgemsruby gemspghstore libpghstorerb in load Its triggered two ways By referencing the HStore field on the model instance By calling save on the model instance The error does not occur in the console This tells me it is some kind of deserialization issue coming from Sidekiq I cant decide whether Sidekiq is doing the serialization of the HStore field wrong or if activerecordpostgreshstore is doing the deserialization wrong The workaround is to call selfreload in the model instance method that is executed via Sidekiqs delay method I fetch record with hstore column and do rowsave It is always issue UPDATE sql is it the default behavior Any way to fix it I have Alert and AlertSub AlertSub hasmany alerts ruby prymain Alertfirstdata Alert Load ms SELECT alerts FROM alerts LIMIT tototata type hash ok ruby prymain Alertselectdataallfirstdata Alert Load ms SELECT data FROM alerts tototata type hash ok ruby prymain Alertselectdata as dallfirstd Alert Load ms SELECT data as d FROM alerts toto tata string not ok class says String ruby prymain AlertSubjoinsalerts alerts is just a hasmany alerts in class AlertSub prymain selectalertsid alertsdata prymain wherealertsubsuserid allfirstdata AlertSub Load ms SELECT alertsid alertscreatedat alertsparam alertsdatahstore FROM alertsubs INNER JOIN alerts ON alertsalertsubid alertsubsid WHERE alertsubsuserid toto tata string not ok It looks like when I use the method select with has or with a join I get back a string instead of a hash for the hstore value In my model I do have the line serialize data ActiveRecordCodersHstore How can I get back a hash event when I use a select The hstore indexes are not saved to schemarb correctly instead of saving an addhstoreindex line it simply creates an addindex line thus the gin index isnt created A related issue is that the addhstoreindex table column type gin doesnt work the AR method addindexoptions doesnt support a type option only name and unique We are running Rails x going to right now isnt an option though its on our roadmap When I embed a value directly into a query as so Bidwheremiscellaneous modelnumberABC SELECT bids FROM bids WHERE miscellaneous modelnumberABC the query works But when I try to interpolate with a it adds an extra set of single quotes which raises an error Bidwheremiscellaneous modelnumber ABC SELECT bids FROM bids WHERE miscellaneous modelnumberABC PGSyntaxError ERROR syntax error at or near ABC What am I missing such as below def change addcolumn contacts userid integer addcolumn contacts data hstore addhstoreindex contacts userid data end I got a syntax error assuming that AR didnt know how to serialize the hash into an hstore query part and saw a few posts saying I needed to add this serialize offerproviders ActiveRecordCodersHstore which I initially avoided because I want to select on rows with my hstore column null As I suspected this does set the hstore to empty as opposed to null How can I get the serialization but not have it save when I dont have any values for the hstore 