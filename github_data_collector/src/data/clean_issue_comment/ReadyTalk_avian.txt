Various identifiers from Avians vmOpCode enum fadd fmul fsub fdiv clash with fadd fmul fsub fdiv declared elsewhere when compiling on a modern Linux system This results in gcc complaining about ambiguity existentially understandable but not helpful in this case Minimum viable patch submitted via PR Various identifiers from Avians vmOpCode enum fadd fmul fsub fdiv clash with fadd fmul fsub fdiv declared elsewhere when compiling on a modern Linux system This patch is a kludge obviously but given that this is not an actively maintained project I chose to make it as small as possible so it doesnt clash with other patches in future Hi I known this project is currently inactive however I am placing this here so others can see I have found a file descriptor leak in the NIO accept call For now I have attached a patch I am not sure this fix is the correct one there where a number of options but this was the leastchanged one fixniofdleakpatchtxt cygwin win openjdk b ojdkbuildwindowsx package extra import javaxjwsWebResult import javaxjwsWebService import javaxxmlwsEndpoint WebService public class HelloWS public void HelloWord Systemoutprintlnhello world public static void mainString args String address Endpointpublishaddress helloService new HelloWS Systemoutprintlnhello world buildwindowsi openjdksrcavian cp buildwindowsi openjdksrctes t extraHelloWS javalangannotationAnnotationFormatError Unexpected end of annotations at sunreflectannotationAnnotationParserparseAnnotations line at javalangClasscreateAnnotationData line at javalangClassannotationData line at javalangClassgetAnnotation line at comsunxmlinternalbindv modelannotationRuntimeInlineAnnotationReadergetClassAnnotation line at comsunxmlinternalbindv modelannotationRuntimeInlineAnnotationReadergetClassAnnotation line at comsunxmlinternalbindv modelimplModelBuildergetTypeInfo line at comsunxmlinternalbindv runtimeJAXBContextImplgetTypeInfoSet line at comsunxmlinternalbindv runtimeJAXBContextImplinit line at comsunxmlinternalbindv runtimeJAXBContextImplinit line at comsunxmlinternalbindv runtimeJAXBContextImplJAXBContextBuilderbuild line at comsunxmlinternalbindv ContextFactorycreateContext line at comsunxmlinternalbindapiJAXBRIContextnewInstance line at comsunxmlinternalbindapiJAXBRIContextnewInstance line at comsunxmlinternalwsdeveloperJAXBContextFactory createJAXBContext line at comsunxmlinternalwsdbglassfishJAXBRIContextFactorynewContext line at comsunxmlinternalwsspidbBindingContextFactorycreate line at comsunxmlinternalwsmodelAbstractSEIModelImpl run line at comsunxmlinternalwsmodelAbstractSEIModelImpl run line at javasecurityAccessControllerdoPrivileged native at comsunxmlinternalwsmodelAbstractSEIModelImplcreateJAXBContext line at comsunxmlinternalwsmodelAbstractSEIModelImplpostProcess line at comsunxmlinternalwsmodelRuntimeModelerbuildRuntimeModel line at comsunxmlinternalwsdbDatabindingImplinit line at comsunxmlinternalwsdbDatabindingProviderImplcreate line at comsunxmlinternalwsdbDatabindingProviderImplcreate line at comsunxmlinternalwsdbDatabindingFactoryImplcreateRuntime line at comsunxmlinternalwsserverEndpointFactorycreateSEIModel line at comsunxmlinternalwsserverEndpointFactorycreate line at comsunxmlinternalwsserverEndpointFactorycreateEndpoint line at comsunxmlinternalwsapiserverWSEndpointcreate line at comsunxmlinternalwsapiserverWSEndpointcreate line at comsunxmlinternalwstransporthttpserverEndpointImplcreateEndpoint line at comsunxmlinternalwstransporthttpserverEndpointImplpublish line at comsunxmlinternalwsspiProviderImplcreateAndPublishEndpoint line at javaxxmlwsEndpointpublish line at extraHelloWSmain line Im hitting a null pointer crash in Avian somewhere in the guts of handling an invokedynamic instruction This is with avian in compile mode It doesnt matter if Avian is compiled with the JDK imagesource or with Avians classpath This was compiled and run on x Ubuntu LTS and another Linuxbased ARM platform The crash details from debugger details summaryCLICK ME Backtrace from lldbsummary text Process stopped thread tid x ffff af libjvmsoanonymous namespacelocaladdDynamict x c invocation x fffe e localMyThread vmGcInvocation at compilecpp name aviandynamic stop reason signal SIGSEGV invalid address fault address x frame x ffff af libjvmsoanonymous namespacelocaladdDynamict x c invocation x fffe e localMyThread vmGcInvocation at compilecpp compileRootstdynamicThunksbody index thunk compileRootstdynamicThunksbody index size tdynamicTable index reinterpretcastvoidthunk rootstinvocationssetBodyElementt index invocation lldb thread backtrace thread tid x ffff af libjvmsoanonymous namespacelocaladdDynamict x c invocation x fffe e localMyThread vmGcInvocation at compilecpp name aviandynamic stop reason signal SIGSEGV invalid address fault address x frame x ffff af libjvmsoanonymous namespacelocaladdDynamict x c invocation x fffe e localMyThread vmGcInvocation at compilecpp frame x ffff b f libjvmsoanonymous namespacelocalcompilet x c initialFrame x ffff de ed initialIp exceptionHandlerStart localMyThread anonymous namespacelocalFrame unsigned int int at compilecpp frame x ffff b e e libjvmsoanonymous namespacelocalcompilet x c context x ffff de localMyThread anonymous namespacelocalContext at compilecpp frame x ffff b e libjvmsoanonymous namespacelocalcompilet x c allocator x d bootContext x method x fffe f a localMyThread avianutilFixedAllocator anonymous namespacelocalBootContext vmGcMethod at compilecpp frame x ffff b bd libjvmsoanonymous namespacelocalMyProcessorinvokeListthis x d e t x c method x fffe f a this x indirectObjectsfalse arguments x ffff de const at compilecpp frame x ffff ad b libjvmsovmProcessorinvokethis x d e t x c method x fffe f a this x at processorh frame x ffff ab f libjvmsovminitClasst x c c x fffe f a at machinecpp frame x ffff b b libjvmsoanonymous namespacelocalcompilet x c allocator x d bootContext x method x fffe f localMyThread avianutilFixedAllocator anonymous namespacelocalBootContext vmGcMethod at compilecpp frame x ffff b c libjvmsoanonymous namespacelocalcompileMethod t x c ip x b clocalMyThread void at compilecpp frame x ffff b f d libjvmsoanonymous namespacelocalcompileMethodt x c localMyThread at compilecpp frame x b frame x ffff b libjvmsoanonymous namespacelocalinvokethread x c method x ffff def arguments x ffff de b localArgumentList at compilecpp frame x ffff b bf libjvmsoanonymous namespacelocalMyProcessorinvokeListthis x d e t x c method x ffff def this x indirectObjectsfalse arguments x ffff de c const at compilecpp frame x ffff ad b libjvmsovmProcessorinvokethis x d e t x c method x ffff def this x at processorh frame x ffff b fda libjvmsoanonymous namespacelocalMyClasspathrunThreadthis x t x c const at classpathopenjdkcpp frame x ffff ae c libjvmsovmrunJavaThreadt x c at machineh frame x ffff ae cff libjvmsovmrunThreadt x c null x at machineh frame x ffff b efe libjvmsovmRun frame x ffff ae b a libjvmsovmrunRawt x c functionlibjvmsovmrunThreadvmThread unsigned long at machineh arguments x vmThread unsigned long unsigned long at machineh frame x ffff ae bda libjvmsovmrunt x c functionlibjvmsovmrunThreadvmThread unsigned long at machineh arguments x vmThread unsigned long unsigned long at machineh frame x ffff ae c libjvmsovmThreadRunnablerunthis x ce at machineh frame x ffff a c libjvmsoanonymous namespacerunr x ce at posixcpp frame x ffff f ba libpthreadso startthread frame x ffff c d libcso clone at cloneS details Probing some variables a bit further details summaryCLICK ME print of the Thread variable in debugger summary text lldb frame variable t error libjvmso x a DWTAGmember size refers to type x bc which extends beyond the bounds of x error libjvmso x DWTAGmember size refers to type x which extends beyond the bounds of x d anonymous namespacelocalMyThread t vmThread vtable x d f m x d parent x d peer x d child x waitNext x state ActiveState criticalLevel systemThread x lock x d javaThread x exception x heapIndex heapOffset protector x ffff de ce classInitStack x ffff de libraryLoadStack x resource x ffff de checkpoint x ffff de f runnable t x c defaultHeap x a cd heap x fffe backupHeap backupHeapIndex flags ip x c stack x ffff de newStack x ffff de d scratch x ffff de continuation x exceptionStackAdjustment exceptionOffset exceptionHandler x tailAddress x virtualCallTarget x virtualCallIndex heapImage x codeImage x thunkTable x d a dynamicTable x trace x ffff de a reference x arch x transition x traceContext x stackLimit referenceFrame x methodLockIsClean true lldb frame variable tmprocessordynamicTable void tmprocessordynamicTable x adf details From that we can see that dynamicTable was set by the rest of the code in addDynamic for the tmprocessor but this doesnt appear to have been copied over to the tdynamicTable field I think it might be a simple case of a missing call to updateDynamicTablet t or something like that That might be understating the problem however Example application that results in this crash That app is the smallest I can make it though smaller examples might exist Changing practically anything in this example app makes the problem disappear Infact using that information Ive managed to make my original app not crash by working around the issue and accessing a class earlier than it normally would This seems to fix the problem for me though the underlying issue is obviously still present Hello I think I found another lambda problem Lets consider this interface java public interface MyFunctionT R R applyT t default V MyFunctionT V andThenMyFunction super R extends V after return t afterapplyapplyt static T MyFunctionT T identity return t t When I try to call this java SystemoutprintlnMyFunctionidentityandThenMyFunctionidentityapply Test The application crashes at this point error memory read failed for x fa x fa in x fa x bd a in testbaseHelloinitV x c d in anonymous namespacelocalinvokevmThread vmGcMethod anonymous namespacelocalArgumentList at Usersterasavianscriptsaviansrccompilecpp x c c in anonymous namespacelocalMyProcessorinvokeListvmThread vmGcMethod vmGcObject bool valisttag at Usersterasavianscriptsaviansrccompilecpp x cc d in anonymous namespacelocalcallIntMethodVvmThread unsigned long at Usersterasavianscriptsaviansrcjnienvcpp x cee ad in vmRun Any idea what is wrong Im getting a ClassCastException on a simple attempt to get annotations of a class Ive attached a zip with code that reproduces the problem The trigger is simple public static void mainString args for Object ann MyCommandclassgetAnnotations SystemoutprintlnanngetClassgetName Running with java works just fine with avian I get a ClassCastException java cp buildclassesjavamain orgabiriMain comsunproxyProxy avian cp buildclassesjavamain orgabiriMain javalangClassCastException B cannot be cast to LjavalangObject at javalangClasscountAnnotations line at javalangClassgetAnnotations line at orgabiriMainmain line running on a macOS with avian installed via homebrew version avianbugzip Using the latest Oracle Java JDK on a Mac make fails due to some assumptions regarding version strings Java version java version java version JavaTM SE Runtime Environment build Java HotSpotTM Bit Server VM build mixed mode Avian repo git revparse HEAD cd df e e ff b c ade f e b eabb make output make compiling buildmacosxx toolstypegeneratormainbuildo compiling buildmacosxx systemposixbuildo compiling buildmacosxx systemposixcrashbuildo compiling buildmacosxx systemposixmemorybuildo compiling buildmacosxx systemposixsignalbuildo compiling buildmacosxx finderbuildo compiling buildmacosxx utilargparserbuildo linking buildmacosxx generator compiling classpath classes javac invalid source release Usage javac options source files use help for a list of possible options make buildmacosxx classpathdep Error i saw that there can be made something with SWT but im not very pratical with it so before starting using Avian i would like to know if can make a GUI program with one of those framework and if there are some problems using one of them Thank you 