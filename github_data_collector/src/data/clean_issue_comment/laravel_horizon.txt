 Horizon Version v Laravel Version v PHP Version Redis Driver Version phpredis Description This issue has been haunting us a long time now Initially we did not know why this was randomly happening Issue later we found out that the reconnecting in general was not working Issue which was fixed by taylor thank you but this only is now working correctly for redis instances that are not password protected In a situation where horizon is running against a redis instances that is password protected and redis is shortly or long unavailable even after redis is back horizon will not recover spitting out NOAUTH errors like this one ERROR NOAUTH Authentication required exception object RedisExceptioncode NOAUTH Authentication required at varwwwvendorlaravelframeworksrcIlluminateRedisConnectionsConnectionphp stacktrace varwwwvendorlaravelframeworksrcIlluminateRedisConnectionsConnectionphp RedislLencommandsmaster varwwwvendorlaravelframeworksrcIlluminateRedisConnectionsPhpRedisConnectionphp Illuminate Redis Connections Connectioncommandllen Array varwwwvendorlaravelframeworksrcIlluminateRedisConnectionsConnectionphp Illuminate Redis Connections PhpRedisConnectioncommandllen Array varwwwvendorlaravelframeworksrcIlluminateRedisConnectionsPhpRedisConnectionphp Illuminate Redis Connections Connectioncallllen Array varwwwvendorlaravelhorizonsrcRedisHorizonCommandQueuephp Illuminate Redis Connections PhpRedisConnectioncallllen Array varwwwvendorlaravelhorizonsrcMasterSupervisorphp Laravel Horizon RedisHorizonCommandQueuependingmasterd be varwwwvendorlaravelhorizonsrcMasterSupervisorphp Laravel Horizon MasterSupervisorprocessPendingCommands varwwwvendorlaravelhorizonsrcMasterSupervisorphp Laravel Horizon MasterSupervisorloop varwwwvendorlaravelhorizonsrcConsoleHorizonCommandphp Laravel Horizon MasterSupervisormonitor internal function Laravel Horizon Console HorizonCommandhandleObjectLaravel Horizon Repositories RedisMasterSupervisorRepository varwwwvendorlaravelframeworksrcIlluminateContainerBoundMethodphp calluserfuncarrayArray Array varwwwvendorlaravelframeworksrcIlluminateContainerUtilphp Illuminate Container BoundMethodIlluminate Container closure varwwwvendorlaravelframeworksrcIlluminateContainerBoundMethodphp Illuminate Container UtilunwrapIfClosureObjectClosure varwwwvendorlaravelframeworksrcIlluminateContainerBoundMethodphp Illuminate Container BoundMethodcallBoundMethodObjectApp Extensions Illuminate Foundation Application Array ObjectClosure varwwwvendorlaravelframeworksrcIlluminateContainerContainerphp Illuminate Container BoundMethodcallObjectApp Extensions Illuminate Foundation Application Array Array NULL varwwwvendorlaravelframeworksrcIlluminateConsoleCommandphp Illuminate Container ContainercallArray varwwwvendorsymfonyconsoleCommandCommandphp Illuminate Console CommandexecuteObjectSymfony Component Console Input ArgvInput ObjectIlluminate Console OutputStyle varwwwvendorlaravelframeworksrcIlluminateConsoleCommandphp Symfony Component Console Command CommandrunObjectSymfony Component Console Input ArgvInput ObjectIlluminate Console OutputStyle varwwwvendorsymfonyconsoleApplicationphp Illuminate Console CommandrunObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput varwwwvendorsymfonyconsoleApplicationphp Symfony Component Console ApplicationdoRunCommandObjectLaravel Horizon Console HorizonCommand ObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput varwwwvendorsymfonyconsoleApplicationphp Symfony Component Console ApplicationdoRunObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput varwwwvendorlaravelframeworksrcIlluminateConsoleApplicationphp Symfony Component Console ApplicationrunObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput varwwwvendorlaravelframeworksrcIlluminateFoundationConsoleKernelphp Illuminate Console ApplicationrunObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput varwwwartisan Illuminate Foundation Console KernelhandleObjectSymfony Component Console Input ArgvInput ObjectSymfony Component Console Output ConsoleOutput main Important This ONLY happens with the phpredis driver predis is not affected Steps To Reproduce Have a fresh or not fresh laravel installation with horizon Have a redis instance that is password protected for example running it from this dockerfile configure your databasephp in laravel accordingly to have correct redis password set FROM redis COPY redisconf usrlocaletcredisredisconf CMD redisserver usrlocaletcredisredisconf where the redisconf looks like this requirepass testpassword Then start horizon let it warm up turn off your redis instance or break the connection between horizon redis somehow turn on redis instance again or enable connection between horizon redis again horizon will continuously spit out errors as specified above NOAUTH Add the ability to purge individual queues with a confirmation Fixes Horizon Version Laravel Version PHP Version Redis Driver Version predisphpredis Database Driver Version Postgres Description Laravel Horizon consuming more connections than workers My setup has workers taking care of approx jobs in an hour and I have connections available for Postgres I believe technicall laravel horizon should only consume max connections if we have workers Please correct if I am wrong However the connections usage go beyond and thus simple halts my application The Jobs include update operations using Eloquent and raw queries mainly INSERT FROM SELECT Overall laravel horizon taking care of approx jobs HOUR and the run time depends on job which varies from second to max minutes Horizon Version v Laravel Version v PHP Version Redis Driver Version predisphpredis or phpredis extension same result Database Driver Version Description After we upgraded from Laravel to Horizon to the resource consumption of our redis server started to grow exponentially sitting at around Gb Horizon Dashboard horizondashboard Redis instance dedicated to horizon redisusage Previous version vs new the release was pushed Nov Screenshot Steps To Reproduce We have no clue of what is causing this behavior but our number of jobs is almost the same as before the only difference is the framework and horizon versions Isnt it nice to be able to remove a job from a queue by its identifier or by its tags consider I have job which manipulate my main image and create multiple versions of each image thumb when an image is replaced and uploaded again I need to be able to remove older job This is how I think it should be when dispatching a job we can give it and identifier or some tags or and there is a builtin laravel functionality which helps us remove the job for example php JobremoveByIdid or php JobremoveByTagtag Horizon Version Laravel Version PHP Version Redis Driver Version phpredis Database Driver Version mysql Description When running Steps To Reproduce Create a job that needs more than seconds and to run and uses a lot of memory I generated unique strings using fakeruniqueregexify for the sake of testing Ill attach the job file Restart horizon Queue the job What happens Despite the memory limit being specified as MB in confighorizonphp the worker threads are started with the option memory which is also ignored and the processes are allowed to consume nearly a whole gigabyte of resident memory without failing Despite the job completing without issue Laravel logs an exception localERROR attempted too many times or run too long The job may have previously timed out exception object Illuminate Queue MaxAttemptsExceededExceptioncode App Jobs SendOrderEmail at workjsongvendorlaravelframeworksrcIlluminateQueueWorkerphp A job that took minute and seconds to complete is displayed in the horizon recent jobs list as having taken seconds Another that took m s displays as s Another that also took m s displays as s Looking at the timing of the exceptions and when the job was completed it seems that Horizon is logging the difference between when the exception was thrown and when the job was completed I thought that perhaps this is more of a laravel issue than a horizon issue But when I work the queue manually with php artisan queuework or php artisan queuework deamon the exception is not thrown and the horizon interface reports time correctly SendOrderEmailphptxt After changing to Horizon we had a lot of jobs failing which didnt fail before so this means our failed jobs table is getting a lot of entries We can easily retry them from the UI however going through pages and finding which failed jobs has been retries and which hasnt is pretty tiresome I would be awesome if we could filter away all the failed jobs which has been completed so we only have a list of the failed jobs we need to handle still Horizon Version Laravel Version PHP Version Redis Driver Version predisphpredis Database Driver Version MariaDB Description See the following job example php namespace App Jobs Media use Illuminate Bus Queueable use Illuminate Contracts Queue ShouldQueue use Illuminate Foundation Bus Dispatchable use Illuminate Queue InteractsWithQueue use Illuminate Queue SerializesModels use Illuminate Support Facades Redis class Import implements ShouldQueue use Dispatchable use InteractsWithQueue use Queueable use SerializesModels public function construct return DateTime public function retryUntil return nowaddMinutes Execute the job public function handle Redisfunnelstaticclasslimit thenfunction Import media logic no job return true function return thisrelease Results in Illuminate Queue MaxAttemptsExceededException App Jobs Media Import has been attempted too many times or run too long The job may have previously timed out in vendorlaravelframeworksrcIlluminateQueueWorkerphp Stack trace vendorlaravelframeworksrcIlluminateQueueWorkerphp Illuminate Queue WorkermaxAttemptsExceededExceptionObjectIlluminate Queue Jobs RedisJob Steps To Reproduce Set retryUntil in job Dispatch job Job fails around seconds Horizon Version v Laravel Version v PHP Version Redis Driver Version predispredisv Description We are deploying horizon onto separate kubernetes pods In some cases one of the pods that starts horizon outputs Horizon started successfully A supervisor with this name is already running and stays in that state for ever It seems like its not trying to boot up a new supervisor again Firstly i can not explain why there is already that name taken as every pod has unique hostname but this is not the issue currently My question is in the SupervisorCommand class the handle method will return but i can not see that horizon in any way considers this and tries to boot up a new supervisor again The state after this is a horizon master instance running without any supervisors is this really by design the testconfig i used is rather straight forward integration supervisor connection redis queue low medium high balance auto minProcesses maxProcesses tries timeout sleep Steps To Reproduce In SupervisorCommand class throw any Exception after the line supervisorensureNoDuplicateSupervisors in the handle method Then run php artisan horizon You should receive the output i mentioned earlier and php artisan horizonlist should output something like this Name PID Supervisors Status workerf fbbfdzdzrw ovz None running There is a great feature that notifies when a job need our attention for Long Wait Detected It would be great there will be also a notification when the Long Wait Detected is resolved