It is unclear how to use pivotlongerspec or buildlongerspec The documentation does not have examples and the vignette doesnt actually use the result to generate a longer table It looks like older versions could be used as input to pivotlonger with a spec argument but that appears to have been removed Can an example please be added to the documentation for pivotlongerspec and also for pivotwiderspec Generally related to as a documentation issue for this function Hi I have some code which uses a fair bit of meta programming so a table of audit measures basically where we have lists of the audit measure function being applied I spotted a neatlooking optimisation to use tidyr to unnest the list Unfortunately when using unnest where the list elements are functions we get errors within the function and presumably unpredictable behaviour Ironically its presumably because internally tidyr is doing exactly what my code is trying to do with the results of the function To demonstrate this I used the tidyr example and converted the films listcolumn to have functions rather than film titles imagine were going to pluck those functions and insert them into a later dplyr query on a table details Brief description of the problem r df tibble character cToothless Dory metadata list list species dragon color black films c rlangexprdata title How to Train Your Dragon rlangexprdata title How to Train Your Dragon rlangexprdata title How to Train Your Dragon The Hidden World list species clownfish color blue films crlangexprdata title Finding Nemo rlangexprdata title Finding Dory tidyrunnestwiderdf metadata tidyrunnestlongerdf films The last command to unnest films results in Error in evaltidyenquovar varenv object films not found details Broken since Also added fixes so that tidyr now tests correctly with dev tibble CC DavisVaughan I cant request a review The DBI interface generates data frames that have integer columns for example when counting the number of records pivotwider generates incorrect repeated output when the valuesfrom is a integer column The resulting data frame has the following value repeated many times A less than satisfying fix is mutaten asnumericn or bigint integer in con dbConnect prefer connectionopen when running interactively RPostgresPostgres without the following and preceding lines bigint become int which is a problem for ggplot bigint integer host localhost port I imagine the great new functions pivotwider and pivotlonger have had a lot of thought which is awesome However for the arguments order of pivotwider I think some extra userfriendliness would improve convenience a lot For pivotwider I would suggest to move the argument idcols to a th place after data namesfrom valuesfrom and valuesfill r current pivotwiderdata idcols NULL namesfrom name namesprefix namessep namesrepair checkunique valuesfrom value valuesfill NULL valuesfn NULL suggested pivotwiderdata namesfrom name valuesfrom value valuesfill NULL idcols NULL namesprefix namessep namesrepair checkunique valuesfn NULL I have two arguments for this Since you softly force users to migrate from spread as this function is now retired which will lead to future removal I guess most users expect the use of pivotwider to be somewhat as fast and easy as spread But pivotwider often requires manual and cumbersome definition of arguments which in my experience is needed in almost all use cases This means it is quite far from a dropin replacement of spread With the suggested order this would be solved immediately r old storms countyear status spreadstatus n current storms countyear status pivotwidernamesfrom status valuesfrom n valuesfill listn suggested storms countyear status pivotwiderstatus n listn For valuesfill I would additionally suggest to make it work more intelligently by picking valuesfrom as a new list name at default so eg pivotwiderstatus n works but thats another discussion You added use cases to the documentation that as users can reasonably expect shows best practises Not a single one of them works with idcols which is now the second argument Instead all examples at least contain the manually set and consequently typed namesfrom and valuesfrom r pasted from fishencounters pivotwidernamesfrom station valuesfrom seen Fill in missing values fishencounters pivotwider namesfrom station valuesfrom seen valuesfill listseen Generate column names from multiple variables usrentincome pivotwidernamesfrom variable valuesfrom cestimate moe Can perform aggregation with valuesfn warpbreaks astibblewarpbreaks cwool tension breaks warpbreaks warpbreaks pivotwider namesfrom wool valuesfrom breaks valuesfn listbreaks mean At best this makes users even wonder how idcols works But in my honest opinion it strongly suggests that a reordering of arguments would improve convenience decrease typing fasten analysis and most importantly help users adapt to pivotwider in a most userfriendly way replace If data is a data frame a named list giving the value to replace NA with for each column If data is a vector a single value used for replacement I believe that if the users puts a single value to replace NAs and inputs a data frame the same replacement value should be applied across all columns If however the user wants a more elaborate replacement pattern a named list can be provided I think the case where you replace NAs across the board is quite common When asking pivotlonger to parse doubles out of column names roundnumber values fail with a lossy cast error r ok tribbleX cm X cm fail tribbleX cm X cm pivotlonger data ok cols startswithX namespattern X d cm namesptypes listname double A tibble x name value dbl dbl pivotlonger data fail cols startswithX namespattern X d cm namesptypes listname double Error Lossy cast from x character to to double Locations Run rlanglasterror to see where the error occurred workaround pivot as character then coerce pivotlonger data fail cols startswithX namespattern X d cm mutatename parsenumbername A tibble x name value dbl dbl Looks like the complaint originates from a comparison inside vctrsveccastdoublecharacter I realize the cast technically is lossy in the sense that c c evaluates to cTRUE FALSE which is why Im opening the issue here instead of in vctrs whether or not this is the intended behavior from veccastdoublecharacter Id hope that pivotlonger would account for float precision when I give it an explicit float prototype fixes To get the names of the list column elements one needs an extra step with mutate To avoid this one could add the argument indicesto like in unnestlonger r df tibble x y listfirst c b second ca b c hoist df y b b indicesto names A tibble x x names b y int chr dbl named list first dbl second dbl In case Im not just missing an obvious preexisting solution it would be nice to be able to specify how resulting columns from pivotwider will be ordered Using the usrentincome example usrentincome pivotwidernamesfrom variable valuesfrom cestimate moe produces the columns estimateincome estimaterent moeincome and moerent In my usecase getting to a doubleheader table I want them to be in the order estimateincome moeincome estimaterent and moerent