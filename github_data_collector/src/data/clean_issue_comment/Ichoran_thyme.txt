Scala contained a bug that failed to outlaw use of default arguments in more than one overloaded alternative when the alternatives involve type parameters Thyme exploits the compiler bug in the following overloads and as such doesnt build under Order handling See order for details of parameters Returns a tuple containing a result from f prints a benchmarking report def porder AB resource Int ThymeResource B f ThymeResource B An Int title String pr String Unit Thymeprinter A val bo ThymeScaledempty val ans orderresourcefbon botitle title prbotoString ans Order handling Packs functions into Resource automatically Args for f are start n data Returns a tuple containing a result from f prints a benchmarking report def porder AB resource Int Bf IntIntB An Int title String pr String Unit Thymeprinter A val bo ThymeScaledempty val ans orderThymeResourceresourceThymeResourceinlinefbo n botitle title prbotoString ans I love Thyme and use it extensively in my private and work projects I would like to use it more in spire However the current situation in spire is less than optimal Thyme is downloaded from the private webserver of non thyme ichibench thyme from In my private and work projects I have an unmanaged testlib project and check in thymejar into git Which is also far from optimal The obvious solution would be to publish Thyme on maven Fixed error privatetmpthymebenchThymescala type mismatch error found Any error required Double error def donedt Double fdone in if dt dt else dt e f if dt s else ms n error And error privatetmpthymebenchThymescala in class Thyme multiple overloaded alternatives of method porder define default arguments error class Thymeval accuracyTarget Double watchLoads Boolean true watchGarbage Boolean true watchMemory Boolean true self error error one error found Using the jar provided with the source jsonbmark scala cp libthymejar Welcome to Scala version Java HotSpotTM Bit Server VM Java Type in expressions to have them evaluated Type help for more information scala init error error while loading root error in opening zip file Failed to initialize compiler object scalaruntime in compiler mirror not found Note that as of scala does not assume use of the java classpath For the old behavior pass usejavacp to scala or if using a Settings object programatically settingsusejavacpvalue true Failed to initialize the REPL due to an unexpected error This is a bug please report it along with the error diagnostics printed below javalangNullPointerException at scalatoolsnscinterpreterExprTypercodeParserapplyRuleExprTyperscala at scalatoolsnscinterpreterExprTypercodeParserstmtsExprTyperscala at scalatoolsnscinterpreterExprTyperanonfunparse applyExprTyperscala at scalatoolsnscinterpreterExprTyperanonfunparse applyExprTyperscala at scalatoolsnscreportersReporterwithIncompleteHandlerReporterscala at scalatoolsnscinterpreterExprTyperclassparseExprTyperscala at scalatoolsnscinterpreterIMainexprTyperparseIMainscala at scalatoolsnscinterpreterIMainparseIMainscala at scalatoolsnscinterpreterIMainanonfunshowCodeIfDebugging applyIMainscala at scalatoolsnscinterpreterIMainanonfunshowCodeIfDebugging applyIMainscala at scalatoolsnscinterpreterIMainbeSilentDuringIMainscala at scalatoolsnscinterpreterIMainshowCodeIfDebuggingIMainscala at scalatoolsnscinterpreterIMainReadEvalPrintcompileAndSaveRunIMainscala at scalatoolsnscinterpreterIMainReadEvalPrintcompileIMainscala at scalatoolsnscinterpreterIMainbindIMainscala at scalatoolsnscinterpreterIMainbindIMainscala at scalatoolsnscinterpreterIMainanonfunquietBind applyIMainscala at scalatoolsnscinterpreterIMainanonfunquietBind applyIMainscala at scalatoolsnscinterpreterIMainbeQuietDuringIMainscala at scalatoolsnscinterpreterIMainquietBindIMainscala at scalatoolsnscinterpreterILoopanonfunprocess anonfunapplymcZsp applymcVspILoopscala at scalatoolsnscinterpreterILoopInitclassrunThunksILoopInitscala at scalatoolsnscinterpreterILooprunThunksILoopscala at scalatoolsnscinterpreterILoopInitclasspostInitializationILoopInitscala at scalatoolsnscinterpreterILooppostInitializationILoopscala at scalatoolsnscinterpreterILoopInitanonfuncreateAsyncListener applymcVspILoopInitscala at scalatoolsnscinterpreterILoopInitanonfuncreateAsyncListener applyILoopInitscala at scalatoolsnscinterpreterILoopInitanonfuncreateAsyncListener applyILoopInitscala at scalatoolsnsciopackageanon callpackagescala at javautilconcurrentFutureTaskSyncinnerRunFutureTaskjava at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava There was a report of a s pbench attempt which turned out not to agree particularly well with most other measurements Some sort of warning is in order as Thyme is not intended to run for that long Something is likely awry I love how complete the analysis of Distribution is but sometimes I just want to export the runtimes to pull into an external tool eg for making a boxplot with R TsvPrinter makes that easy The current reporting assumes that all GC activity takes place during the measured call This assumption is not valid of a concurrentmarksweep or other concurrent garbage collector is used It would be valuable to detect this state of affairs and print warnings andor omit garbage collection times Rarely of the time Thymewarmup will fail to complete No stack trace yet May throw an out of bounds error Example bash scala cp Thymejar Welcome to Scala version Java HotSpotTM Bit Server VM Java Type in expressions to have them evaluated Type help for more information scala val th new ichibenchThyme javalangArrayIndexOutOfBoundsException at ichimathspackageDistributioncomputemDcsppackagescala at ichibenchThymeanonfun applymcDIspThymescala at ichibenchThymeanonfun applyThymescala at ichibenchThymeanonfun applyThymescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionTraversableLikeanonfunmap applyTraversableLikescala at scalacollectionimmutableRangeforeachRangescala at scalacollectionTraversableLikeclassmapTraversableLikescala at scalacollectionAbstractTraversablemapTraversablescala at ichibenchThymeinitThymescala at initconsole at clinitconsole at initconsole at clinitconsole at printconsole at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at scalatoolsnscinterpreterIMainReadEvalPrintcallIMainscala at scalatoolsnscinterpreterIMainRequestloadAndRunIMainscala at scalatoolsnscinterpreterIMainloadAndRunReq IMainscala at scalatoolsnscinterpreterIMaininterpretIMainscala at scalatoolsnscinterpreterIMaininterpretIMainscala at scalatoolsnscinterpreterILoopreallyInterpret ILoopscala at scalatoolsnscinterpreterILoopinterpretStartingWithILoopscala at scalatoolsnscinterpreterILoopcommandILoopscala at scalatoolsnscinterpreterILoopprocessLine ILoopscala at scalatoolsnscinterpreterILoopinnerLoop ILoopscala at scalatoolsnscinterpreterILooploopILoopscala at scalatoolsnscinterpreterILoopanonfunprocess applymcZspILoopscala at scalatoolsnscinterpreterILoopanonfunprocess applyILoopscala at scalatoolsnscinterpreterILoopanonfunprocess applyILoopscala at scalatoolsnscutilScalaClassLoadersavingContextLoaderScalaClassLoaderscala at scalatoolsnscinterpreterILoopprocessILoopscala at scalatoolsnscMainGenericRunnerrunTarget MainGenericRunnerscala at scalatoolsnscMainGenericRunnerprocessMainGenericRunnerscala at scalatoolsnscMainGenericRunnermainMainGenericRunnerscala at scalatoolsnscMainGenericRunnermainMainGenericRunnerscala 