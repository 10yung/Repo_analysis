Updated the RegEx pattern on ConvertToMetadata to resolve and wrap keys starting with integers in single quotes Following up on It looks like PowerShell doesnt like dictionary keys that start with an int and are not wrapped in quotes resulting in the parser breaking when attempting to import metadata containing keys like this Sample to replicate powershell BadKey Value Digging into this and sending over a PR asap I wonder if its intentional that is the latest version on Powershell gallery Any reason First version of this function It imports a Nounpsd file when called from a VerbNoun command and sets variables for the parameters which are configured in the settings file but werent passed on the commandline basically allowing you to create commands which read configuration files from the current working directory The question is should it recurse up the parent directories looking for nounpsd files that might define values that arent already defined As I read the parameter description in the help for ExportConfiguration the DefaultPath parameter is used to copy a configuration file thats distributed with the module to one of the three scopebased locations As such Im not sure Id expect a hashtable to be passed as input But clearly InputObject remains a required parameter value Having an example of your intended use would be helpful If I understood how it was to be used Id submit PR to update the help Thanks Ive been thinking that we could easily add a parameter for the file name defaulted to the current hardcoded Configurationpsd which would allow the file name to be specified The idea would NOT be to let you customize the file names but to support different sets of configurations That way if a module author wanted to switch between multiple named configurations they could just expose the name to their users or users who know youre using Configuration could just posh GetModule YourModule ImportConfiguration Set Special So what should I call the parameter We cant use Name because thats the parameter Im using for the Module name Set has the benefit of starting with a character thats unique among parameters Config ConfigSet Variant It would be nice if you clone a projects git repository and the repository could contain a configuration file for something like a test framework module that could override specific machine wide settings that may need to be tweaked on a case by case basis Doing this at the user level could be difficult because not only would the user need to know which tweaks need to be made to specific projects something contributors may not know easily but a settings schema for the module would need to be able to understand which project you are working on and how to jigger the settings for specific modules I am willing to help with a PR on this but I am creating this issue to start the discussion on whether you think this would be a useful capability I would like to use this module as the settings manager for a module I am working on but being able to specify settings overrides that live in the project repository is a high priority objective for me Thanks Bill Editing this again Now that the NoNewLine switch was removed from the SetContent call in the UpdateMetaData function there is a new line added to the psd each time it is edited My idea for a fix would be to just add a Trim on the value so that it only ends up with a single newline in all cases Even though you can happily test a module as c mypowershell examplepsm with importmodule force c mypowershell examplepsm using importconfiguration will create the error below Youd have to rename the path c example examplepsm I appreciate thats the name scheme youve got to have when putting the module into psmodulePath but for development its a little restrictive Inside my psm with ScriptConfig importconfiguration results in the following error powershell GetModule The specified module N Documents src psschoolgroups was not found Update the Name parameter to point to a valid path and then try again At homeDirectory jbennett Documents WindowsPowerShell Modules Configuration Configurationpsm char ifmi GetModule miModuleBase ListAvailable Where CategoryInfo ResourceUnavailable N Documents src psschoolgroupsString GetModule FileNotFou ndException FullyQualifiedErrorId ModulesModuleNotFoundForGetModuleMicrosoftPowerShellCommandsGetModuleCommand error from line I dont know if this is behaviour worth improving but I couldnt make a workaround if you might be able to suggest one I have projects in a folder its quite nice organizing the powershell ones as prefixed with psmodulename Of course they dont get installed to psmodulepath with that pattern Current behavior Metadata is hardcoded to use Encoding UTF UTF is UTF with BOM Expected behavior Metadata should not change the file encoding of the manifest Eg I have my manifest files in UTF without BOM 