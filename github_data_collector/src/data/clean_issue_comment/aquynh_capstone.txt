Is it possible to convert assembly code into binary code There are many changes since the last time I noticed that Travis CI triggered but is doesnt appear in Checks for pull requests You need to add this setting in your repository Since we migrated our CI and Capstone used our CI setting GitHub Action would help automate sending builds without our help You only need to add the token you can see it at page in the Github repo Settings Secrets Add There you should add a token with a name COVERITYSCANTOKEN Feel free to reach me if you have questions After playing around with test c I cannot seem to get anything show a PRIORXX state What is the difference between this and being unlisted If its supposed to indicate the flag was unaffected by the instruction then wouldnt it appear for all the flags for say mov eax x next branch cstool x df e df e fucompi st v branch which is correct cstool x df e df e fucomip st see also There seems to be an issue with updateflags on some ARM instruction at least for ADC and SBC More precisely Capstone reports updateflags as true when it should be false according to ARM reference manual The following code snippet shows the issue python from capstone import from capstonearm import CODE b x x xa xe adcal r r r b x x xb xe adcsal r r r b x x xc xe sbcal r r r b x x xd xe sbcsal r r r b x x x xe addal r r r b x x x xe addsal r r r b x x x xe subal r r r b x x x xe subsal r r r md CsCSARCHARM CSMODEARM mddetail True for code in CODE for i in mddisasmcode x print updateflags formatimnemonic iopstr iupdateflags Output shell adc r r r updateflags True adcs r r r updateflags True sbc r r r updateflags True sbcs r r r updateflags True add r r r updateflags False adds r r r updateflags True sub r r r updateflags False subs r r r updateflags True Here updateflags is true for ADC and SBC when it should be false generally it should only report true for those instructions with the s suffix Notice that this does not happen with neither ADD nor SUB Hi I found some issues when using the RISCV backend tested with latest code on next branch Change the RISCVCODE example code to define RISCVCODE x x xf x Platform riscv Code x x xf x Disasm x neg t t opcount operands type REG t operands type REG t notice the bad opstr above uint t regsread list of implicit registers read by this insn uint t regsreadcount number of implicit registers read by this insn uint t regswrite list of implicit registers modified by this insn uint t regswritecount number of implicit registers modified by this insn Is not updated correctly by the backend all values are zero but using the details directly csriscv riscv csdetail detail detail can be NULL on data instruction if SKIPDATA option is turned ON if insdetail NULL return riscv insdetailriscv detail insdetail if riscvopcount printf topcount u n riscvopcount for i i riscvopcount i Works as expected Im on the next branch using python bindings I find that the LEA instruction reports that it reads from memory via ioperandsaccess operanddata for operand in ioperands if operandtype X OPMEM data operandsize if operandaccess capstoneCSACREAD operanddata appenddata if operandaccess capstoneCSACWRITE operanddata appenddata One of the failing cases byte code b d Related to issue linking not showing up so It looks like it was fixed at one point but those changes do not still seem to be present Am I missing something Bytes x x xba x e x x are correctly decoded as test edx x ebarip However the both operands are not marked as read It looks like the problem is that the entry for X TEST mr X INSTEST in X MappingInsnOpinc is empty Fill in the entry as follows solves the problem diff git aarchX X MappingInsnOpinc barchX X MappingInsnOpinc index a dd eb ea aarchX X MappingInsnOpinc barchX X MappingInsnOpinc X TEST mr X INSTEST test X EFLAGSRESETOF X EFLAGSMODIFYSF X EFLAGSMODIFYZF X EFLAGSUNDEFINEDAF X EFLAGSMODIFYPF X EFLAGSRESETCF CSACREAD CSACREAD X TEST ri X INSTEST test Is there any particular reason that this entry is empty If not I can create PR to fix the problem