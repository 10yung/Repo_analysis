I have used pod Material and pod MaterialComponents in my project now when i upgraded my xcode version to when i run the app it shows me crash Terminating app due to uncaught exception NSInternalInconsistencyException reason Client error attempting to change layout margins of a private view Why is this so What are the new compatible pods for xcode or iOS version kindly answer it fast im stuck in my project in xcode swift IBOutlet weak var tabBar TabBar var buttons UIButton selftabBarbuttons buttons this line selftabBarbuttons buttons give me this error Value of type TabBar TabItem has no member buttons Hi I found a bug about backbutton on NavigationController How to reproduce pushViewController on ViewControllerA move to ViewControllerB pop on ViewControllerB back to ViewControllerA backbutton is not hidden BUG ViewControllerA is root of navigationControllerviewControllers so I expect backbutton should be hidden But actually backbutton was shown Using Material xx this bug was not shown Is this a new version bug Screenshot Environment Material Xcode Swift Description I am finding that my left view controller is having its content sometimes covered by the notch I am observing this on the iPhone X simulator iOS Steps To Reproduce Open app Go to screen where left menu can be opened Rotate device counterclockwise Open left menu I have doublechecked and yes I have constrained the content of left view controller to the safe area on all sides If the left menu is open and the device is rotated this issue does not occur In fact this will even fix the issue The opposite will also happen where if the device is in landscape and the notch is not covering the left view controller content then rotating back to regular portrait mode and opening the left menu will show a larger inset than normal I briefly attempted to fix the issue by detecting when the orientation changed and calling setNeedsLayout on the left root and right viewControllers but this did not work I assume this also occurs for the right view controller although that is untested Captura de Tela a s Problem is happening with iOS I tested it on iOS and and it worked perfectly Ive added the objc attribute to clearIconButton and visibilityIconButton so that they are available to be set in ObjectiveC I am trying to use Snackbar in my app I have tabBarController containing my viewControllers I have initiated the Snackbar Setup in the following way let homeNavigationController UINavigationController homeNavigationControllernavigationBartitleTextAttributes textAttributes homeNavigationControllernavigationBartintColor ColorswiseMagenta let dashboardController HomeContainerController homeNavigationControllerviewControllers dashboardController let homeSnackBarController AppSnackbarControllerrootViewController homeNavigationController homeSnackBarControllershouldExtend false homeSnackBarControllertabBarItem UITabBarItemtitle Homelocalized image UIImagenamed home tag When I add homeNavigationController as my tabBarController viewcontroller item Everything loads perfectly This is how it looks when I add homeNavigationController directly Expected Output I have a UIPageViewController added inside the HomeContainerController which is not getting added when I use the AppSnackbarController as tabBarController viewController But nothing is getting added as expected This is how it looks when I use AppSnackbarController Output I am getting So there must be something wrong with AppSnackbarController or I am implementing this incorrectly My AppSnackbarController code import UIKit import Material class AppSnackbarController SnackbarController var shouldExtend false open override func prepare superprepare delegate self override func viewWillAppear animated Bool superviewWillAppearanimated if shouldExtend extendViews override func viewWillLayoutSubviews superviewWillLayoutSubviews override func viewDidLayoutSubviews superviewDidLayoutSubviews func extendViews selftabBarControllertabBarisHidden true selfedgesForExtendedLayout UIRectEdgebottom selfextendedLayoutIncludesOpaqueBars true extension AppSnackbarController SnackbarControllerDelegate func snackbarControllersnackbarController SnackbarController willShow snackbar Snackbar printsnackbarController will show func snackbarControllersnackbarController SnackbarController willHide snackbar Snackbar printsnackbarController will hide func snackbarControllersnackbarController SnackbarController didShow snackbar Snackbar printsnackbarController did show func snackbarControllersnackbarController SnackbarController didHide snackbar Snackbar printsnackbarController did hide My HomeContainerController code import UIKit import Material class HomeContainerController UIViewController IBOutlet weak var topContainer UIView IBOutlet weak var pagerContainer UIView let subTitleView UILabel let leftLabel UILabelframe zero leftLabelfont UIFontappSemiBoldFontWithsize leftLabelnumberOfLines leftLabeltranslatesAutoresizingMaskIntoConstraints false leftLabelnumberOfLines leftLabeltextAlignment center leftLabeltextColor ColorssecondaryText return leftLabel let tabBar TabBar var buttons TabItem IBOutlet weak var topView UIView IBOutlet weak var anotherview UIView var topview UIView var v UIView UIView let homePagerController HomeControllerstransitionStyle scroll navigationOrientation horizontal options nil override func viewDidLoad superviewDidLoad Do any additional setup after loading the view initTopPanel override func viewWillAppear animated Bool superviewWillAppearanimated initDate initNavBar override func viewWillDisappear animated Bool superviewWillDisappearanimated selfnavigationControllersetNavigationBarHiddenfalse animated true override func viewWillLayoutSubviews superviewWillLayoutSubviews override func viewDidLayoutSubviews superviewDidLayoutSubviews func initTopPanel DispatchQueuemainasync selfprepareTopViews selfpreparTabViews selfhomePagerControllertabBar selftabBar selfaddChildViewControllerselfhomePagerController selfhomePagerControllerviewtranslatesAutoresizingMaskIntoConstraints false selfpagerContaineraddSubviewselfhomePagerControllerview selfpagerContainerbackgroundColor red NSLayoutConstraintactivate selfhomePagerControllerviewleadingAnchorconstraintequalTo selfpagerContainerleadingAnchor selfhomePagerControllerviewtrailingAnchorconstraintequalTo selfpagerContainertrailingAnchor selfhomePagerControllerviewtopAnchorconstraintequalTo selfpagerContainertopAnchor selfhomePagerControllerviewbottomAnchorconstraintequalTo selfpagerContainerbottomAnchor selfhomePagerControllerdidMovetoParentViewController self TranslatordefaultTranslation for recognizer in selfhomePagerControllergestureRecognizers if recognizer is UITapGestureRecognizer recognizerisEnabled false func initNavBar selfnavigationControllersetNavigationBarHiddentrue animated false if AppshouldToggleNightMode selftoggleNavBarNightMode func initDate let adjustment UserDefaultsstandardintegerforKey UserDefaultKeysIslamicCalenderAdjstment var date Date date CalendarcurrentdatebyAdding day value adjustment to date subTitleViewtext UtilssharedarabicDateInFormattedStringformat d MMMM yyyy date date func prepareTopViews let titleView UILabel let leftLabel UILabelframe zero leftLabelfont UIFontappBoldFontWithsize leftLabelnumberOfLines leftLabeltranslatesAutoresizingMaskIntoConstraints false leftLabelnumberOfLines leftLabeltextAlignment center leftLabeltextColor ColorswiseMagenta return leftLabel titleViewtext Quran Touch let containerView UIStackView containerViewaxis vertical containerViewdistribution fillProportionally containerViewalignment center containerViewaddArrangedSubviewtitleView containerViewaddArrangedSubviewsubTitleView containerViewbackgroundColor red selftopViewaddSubviewcontainerView containerViewtranslatesAutoresizingMaskIntoConstraints false let leftConstraint containerViewleftAnchorconstraintequalTo topViewleftAnchor let rightConstraint containerViewrightAnchorconstraintequalTo topViewrightAnchor let horizontalConstraint containerViewcenterXAnchorconstraintequalTo topViewcenterXAnchor let verticalConstraint containerViewcenterYAnchorconstraintequalTo topViewcenterYAnchor NSLayoutConstraintactivate leftConstraint rightConstraint horizontalConstraint verticalConstraint initBarButtons func initBarButtons let profileButton CircularButton profileButtonsetImageUIImagenamed dashsettingstintwith ColorswiseMagenta for normal profileButtonaddTargetself action selectoropenSettingssender for touchUpInside topViewaddSubviewprofileButton profileButtontranslatesAutoresizingMaskIntoConstraints false let heightConstraint profileButtonheightAnchorconstraintequalToConstant let widthConstraint profileButtonwidthAnchorconstraintequalToConstant let rightConstraint profileButtonrightAnchorconstraintequalTo topViewrightAnchor constant let verticalConstraint profileButtoncenterYAnchorconstraintequalTo topViewcenterYAnchor NSLayoutConstraintactivate heightConstraint widthConstraint rightConstraint verticalConstraint let freePremiumButton UIButton freePremiumButtonsetImageUIImagenamed homefreepremium for normal topViewaddSubviewfreePremiumButton freePremiumButtontranslatesAutoresizingMaskIntoConstraints false let heightConstraint freePremiumButtonheightAnchorconstraintequalToConstant let widthConstraint freePremiumButtonwidthAnchorconstraintequalToConstant let rightConstraint freePremiumButtonleftAnchorconstraintequalTo topViewleftAnchor constant let verticalConstraint freePremiumButtoncenterYAnchorconstraintequalTo topViewcenterYAnchor NSLayoutConstraintactivate heightConstraint widthConstraint rightConstraint verticalConstraint func preparTabViews selfprepareButtons selfprepareTabBar objc func openSettingssender Any let vc ProfileController selfnavigationControllerpushViewControllervc animated true MARK Navigation In a storyboardbased application you will often want to do a little preparation before navigation override func preparefor segue UIStoryboardSegue sender Any Get the new view controller using seguedestination Pass the selected object to the new view controller extension HomeContainerController fileprivate func prepareButtons let btn TabItemtitle Dua titleColor ColorswiseMagenta btn pulseAnimation centerRadialBeyondBounds btn tag let attributes NSAttributedStringKeyfont UIFontappRegularFontWithsize NSAttributedStringKeyforegroundColor ColorssecondaryText let selectedAttributes NSAttributedStringKeyfont UIFontappSemiBoldFontWithsize NSAttributedStringKeyforegroundColor ColorswiseMagenta btn setAttributedTitleNSAttributedStringstring Dashboard attributes attributes for normal btn setAttributedTitleNSAttributedStringstring Dashboard attributes selectedAttributes for selected buttonsappendbtn let btn TabItemtitle Community titleColor ColorswiseMagenta btn tag btn setAttributedTitleNSAttributedStringstring Explore attributes attributes for normal btn setAttributedTitleNSAttributedStringstring Explore attributes selectedAttributes for selected btn pulseAnimation none buttonsappendbtn fileprivate func prepareTabBar tabBardelegate self tabBardividerColor Colorclear tabBarlineColor ColorswiseMagenta tabBarlineAlignment bottom tabBarbackgroundColor Colorclear tabBartabItems buttons tabBartabBarLineStyle custom tabItem in if tabItemtag return tabItemboundswidth return tabItemboundswidth tabBarlineHeight tabBartabBarStyle nonScrollable tabBartabBarCenteringStyle never tabBartabItemsInterimSpace tabBartabBarLineStyle auto tabBarframesizewidth tabBarframesizeheight anotherviewaddSubviewtabBar tabBartranslatesAutoresizingMaskIntoConstraints false let horizontalConstraint tabBarcenterXAnchorconstraintequalTo anotherviewcenterXAnchor constant let verticalConstraint tabBarcenterYAnchorconstraintequalTo anotherviewcenterYAnchor NSLayoutConstraintactivate horizontalConstraint verticalConstraint Change submodule Motion path SourcesFrameworks Frameworks Packageswift target exclude does not work as intended Reason SPM Swift Package Manager does not support submodules and when I checked it I confirmed that when I updated the package the material and motion conflict Currently CocoaPods Carthage and SPM are using Motion so I suggest changing the SourcesFrameworkMotion from the SPM management folder Sources to external