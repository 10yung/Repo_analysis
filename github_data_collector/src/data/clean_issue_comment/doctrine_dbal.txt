 Fill in the relevant information below to help triage your pull request Q A Type improvement BC Break yes Fixed issues none Summary Continuing the work started in this time with a From object Fill in the relevant information below to help triage your pull request Q A Type improvement BC Break no Fixed issues none Summary This fixes the bug raised in and where a JOIN with an empty condition would yield a syntax error in the resulting query Q A Type improvement BC Break yes Fixes In addition to the method signature changes the following changes have been made The implementations of where having and their and and or counterparts have been refactored to reduce code duplication The QueryBuilder tests that call qbexpr but dont use the return value have been cleaned up Fill in the relevant information below to help triage your pull request Q A Type improvement BC Break yes Fixed issues none Summary As suggested by morozov in To get rid of the remaining PHPStan issue we may replace the associative array representing a join in the Query Builder with an object similar to DependencyOrderNode used in This way we will not only help static analyzers understand which properties and of what types a join has but also may help PHP manage memory more efficiently This PR introduces classes which replace the sqlParts nested associative array QueryParts QueryPartFrom QueryPartJoin This is a first draft with both phpunit phpstan happy A few pain points are to be discussed though Bug Report Q A BC Break no Version Summary Doctrine diff fail on some configuration Current behaviour When I make a doctrinediff Doctrine tryes to create index for different Entity mapped with a OneToOne association I have an error An index with name uniq dbdbf was already defined on table societe How to reproduce class Societe var int ORM Columnnameid typeinteger nullablefalse optionsunsignedtrue ORM Id ORM GeneratedValuestrategyIDENTITY private id var VueContrat ORM OneToOnetargetEntityVueContrat ORM JoinColumnnameid referencedColumnNameidsociete private statut var VueConull ORM OneToOnetargetEntityVueCo ORM JoinColumnnameid referencedColumnNameidnullabletrue private statutco You need to have Entity named VueContrat and VueCo That entity are Mysql View Expected behaviour I expect to disable the creation for that views We can reduce the problem using doctrine event listener but I didnt find the right event We can also have a solution if we can set the index name explicitely Q A Type improvement BC Break yes Similarly to some of the schemascoped methods of the AbstractSchemaManager class accept an optional database schema name but some dont This is the intended API A user can list the columns of a table in a specific database schema or explicitly specify one But here they cannot And here as well Q A Type improvement BC Break yes The reasons are Currently some platform supports the database argument and others dont so theres even no clear meaning of the argument at the DBAL level Methods like getListViewsSQL already require the database argument which means that its always available at the Schema Manager level The MySQL platform defaults the database name to the return value of the DATABASE function which makes it inconsistent with the behavior of schema managers instead of defaulting to the database from the configuration it defaults to the database being currently used The database argument name is confusing since some platforms support databases and schemas and the actual meaning of the argument is a schema Making the argument required will help unify the behavior of different platforms and make it more deterministic Q A Type improvement BC Break yes Summary Classes like QueryBuilder ExpressionBuilder and AbstractSchemaManager use funcgetargs in their implementations for dealing with variadic method arguments Those arguments should be defined as such in the method signatures Q A Type bug BC Break no Summary I got problem with doctrine migrations with postresql database There is no column with name version on table migrationversions after research i found that error happiness if searchpath contains escaped schema name eg set searchpath public this patch fix my problem also simplifies the code and use native processing of searchpath from postgres no need to handle user anymore The following classes could not be finalized as is in MysqliConnection because of its getWrappedResourceHandle which is not used anywhere and is not part of any API convention see for a similar feature request x OCI Connection because of its getExecuteMode which is used by OCI Statementexecute It indicates a violation of the ISP principle the statement should be given an object that represents the execution mode not the entire connection Fixed in x OCI Statement because of its static convertPositionalToNamedPlaceholders which is public only because its tested directly which indicates a violation of the SRP It could be extracted to a utility class Fixed in PDOConnection because it has child classes and the createStatement method PDOSqlsrv Connection because of its createStatement PDOStatement because it has child classes 