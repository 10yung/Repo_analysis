Is your feature request related to a problem Please describe In some environments like React Native there is a possibility of using different type of bundles which does not consist only of plan JavaScript One of the example is an Indexed RAM bundle in React Native which is a mix of binary metadata and the JavaScript source code more info here and File RAM bundle which spreads modules into separate files It would be awesome if we could get an option to analyse those bundles more specifically have an option in inject custom logic that allows to analyse them Describe the solution youd like Essentially the solution is to allow to customise parts of the sourcemapexplorer pipeline For example RAM bundles are so different compared to regular plain JS bundles that almost the whole code for iterating over mappings and computing sizes has to be altered and only the visualisation part is usable Describe alternatives youve considered I was thinking about options that would work Allow to customise computeFileSizes provide custom one in the Node API or in other way eg ts exploredummyjs for RAM bundles we cannot use the builtin logic for readingloading codemaps output format html computeFileSizes sourceMapData SourceMapData options ExploreOptions coverageRanges CoverageRange FileSizes custom logic here Hide bundle specific operations like loading source code loading source map getting mappings computing file sizes behind an abstraction and implement this abstraction for plainregular JS bundles for example rough draft ts type SourceAndMapBuffers code Buffer map Buffer interface BundleAnalyzer loadfileTokens Arraystring code string map string options LoadOptions SourceAndMapBuffers computeSizessourceAndMapBuffers SourceAndMapBuffers options ComputeSizeOptions FileSizes class MyBundleAnalyzer implements BundleAnalyzer implement load and computeSizes here explorenew MyBundleAnalyzer passing currently available options would make sourcemapexplorer use builtin PlainJavaScriptBundleAnalyzer Additional context Im open to other suggestionsideas and once we get some agreement which path we should take we will create a PR to add this support cc danvk nikolayborzov Im not sure where to start to investigating why this recursive nested source map of the same chunk sizes is happening so it can be fixed if necessary Is this an artifact of how sourcemapexplorer visualizes the maps or how createreactapp is building etc How can it be fixed This is a new behavior Ive not noticed before and seems messy Any input is appreciated img width altScreen Shot at PM src Has anyone setup this to run as a GH action to show the bundle size in PR I imagine a GH Action to build the app run the analyse and post a comment with link to analyse into PR It could even print a diff in size against Master branch We could even have a badge in README pointing to current analyse of master Try to generate most of test data Thanks for the work on this awesome tool Is your feature request related to a problem Please describe Directories that dont contribute to the size are still shown as a layer in the treemap and this ends up hiding contributing layers when looking at multiple bundles in a single HTML file Describe the solution youd like Directories that arent contributing are combined or theres an option to enable this behavior Describe alternatives youve considered A way to hidecombine these noncontributing layers in the HTML file Additional context img width altScreen Shot at AM src Ive attached a screenshot that shows the HTML of one of our bundles and you can see that webpack src and apps take up layers in the treemap of the HTML before any meaningful content is reached and when looking at an HTML file that is analyzing multiple bundles this makes several more meaningful layers end up being hidden and they have to be clicked on to see the useful info I was wondering what what the major contributors to the size of a JSON file were today and thought it might be nice to visualize with a tree map This would obviously be a big change but there are many things that could reasonably be visualized with tree maps Bundled JavaScript which we do now JSON files Directories on disk ZIP files nikolayborzov thoughts Is your feature request related to a problem Please describe When trying to investigate why specific file takes specific amount of space it would be very helpful to see its compiled contents If I could do so I could make further optimization steps like avoid some patterns or change babel settings or see if it is actually not minimized for some reason or not optmal in some other way And take action based on that information Describe the solution youd like I would like to be able to see compiled and may be original content of file picked in the tree In a popup or sidebar Should automate dependencies update on some extent Just a joke Please excuse my naivet Id assume youd want this as a flag passed in I wasnt sure how to pass that param along Changes While calculating the spans concat the string of each source and then gzip that to get the size I created the snapshots for the tests Im not sure if theyre accurate Please help 