ts const enum TokenMember TYPE VALUE token TokenMemberTYPE Its much better than such as token token I set up a page for a forked repo here The sites supposed to load text on the right side but as you can see theres just a message saying Your browser doesnt currently support JavaScript Its set up to render text from mst files located in distscriptstemplates It works fine on the original site and when Im working on localhost but I get errors when testing the ghpages version And despite what the error message says the rest of the Javascript works fine tooltips switching tabs and saving files are all functioning Compiling mustache templates is literally the only thing that isnt working If it helps heres the block of code related to mustache javascript Variable Setup var quenchoptions basicgulpfile false projname Quench version descrp A Gulp file and project generator author Quench browsersync true css true cssautoprefix true cssdestination diststyles cssminimize false cssprecompile true cssprecompiletype sass csssource srcstyles gulpsass true imagesdestination distimages imagesoptimize true imagessource srcimages js true jscoffeescript false jsconcatenate true jsdestination distscripts jses false eslint false jsminimize true jssource srcscripts usingBS true File Handlers function displayFilefile use strict filehtmlfile hljshighlightBlockfileget function renderFilefile renderOnly use strict var pJSON if renderOnly undefined renderOnly false if renderOnly filewrapperaddClassloading if template filereplace length var template template filereplace text Mustacheparsetemplate pJSON Mustacherendertemplate quenchoptions if renderOnly displayFilepJSON filewrapperremoveClassloading return pJSON else ajax url distscriptstemplates file mst dataType text success function template Save template script attrtype xtmplmustache attrid template filereplace texttemplate appendTobody pJSON Mustacherendertemplate quenchoptions if renderOnly displayFilepJSON filewrapperremoveClassloading return pJSON Id like the p flag to optionally accept a twopart argument where one part is the path to the partial file and where the other part is a name for the partial Renaming partials is currently possible only when using the library programmatically This functionality would allow the CLI to mirror the following programmatic usage js const template div classmmgrnavigationcompetitions competitionList select competitionList div div classmmgrnavigationschedule seasonList select seasonList div const selectPartial select classmmgrselect option classmmgrselectitem valuevaluetextoption select const output Mustacherendertemplate data select selectPartial I would be willing to submit a patch if the maintainers would like to incorporate this functionality Is it possible to get a setter for the escape function There might be a better way Im running into issues with TypeScript Thanks resultselectorjsonpath resultTemplate Value Id DisplayValue Name Am calling an API and it is returning a set of data While fetching the key value pairs If DisplayValueName contains double quotes eg AppWithQuotes or AppWithQuotes the dropdown is displaying the entire key value pair as it is Refer the Link For other cases when double quotes are not present the drop down displays the DisplayValue name alone as expected eg Demo Suppose I have IIFE or just plain Object for that matter defined thusly let data function let somePrivateDummyData id name bobbert toString My name is thisname id name tommy toString My name is thisname somePrivateDummyDataforEachobj objtoStringbindobj a whole bunch of business logic irrelevant to this MVCE return getSelectedData somePrivateDummyDataslice a smorgasboard of other exposed methods irrelevant to this MVCE I wish to get the length of the selected data to pass to the view Doing getSelectedDatalengthgetSelectedData doesnt work This CodePen shows everything that I have tried including that Failing that and failing to find relevant documentation on this particular use case how can we access the length property of an Array the user inputs Im trying to decouple the datahandling logic from the viewhandling logic as much as possible Implemented Pipeline Operator i did use and to understand the problem You can use or js let data variable MyAwesomeVariable pipelineOne functionvalue return valuetoLowerCase pipelineTwo functionvalue return value two txt variable pipelineOne txt variable pipelineOne txt variable pipelineOne pipelineTwo Have some tag to count elements list To insert counts list in html Im new to mustache so please go easy Ive found that thing is used to loop over items in an array and thing is used to check if thing is falsey or an empty array So far so good But how do I check if an array is nonempty I want to achieve a pretty common pattern like this if items ol items li items ol if items items No items here items The if items obviously doesnt work but it does illustrate what I need Given the dual function of thing were it can also check truthyness of nonarray variables afaik if I were to use items there it would spew out as many lists as there are items Is there another notation thats not in the docs or one that Ive totally missed Im sure Im not asking anything totally new surely Question How can I get all partials includes of a template the includes not its contents For example for any partial include aTemplate i should get aTemplate New Feature If it is not posible one feature can be a function that return all partial includes as an array of string Why To fetch by ajax requests only the needed partials of a template 