It would seem that the equal function consumed by assertEquals in the asserts module doesnt verify the deep equality of Map instances Therefore ts assertEquals new Map foo bar new Map bar foo doesnt throw an AssertionError whereas Id certainly expect a test failure Was it an intentional decision to omit Map support or is it an oversight If its the latter Im happy to raise a PR to fix it I was reviewing a PR and i figured out its weird to have pathisWindows I mean it would make more sense to ask for osisWindows no Because in this case iswindow is returning the value in calculation of the context of execution not the path For example i would imagine c foo bar tjsisWindows true mntfoobartjsisWindows false ref Heads up but since denos implementation of HTTP header parsing copies gos textproto implementation its currently susceptible to CVE Basically youll want to remove the header normalization happening here I had to disable two tests in order to upgrade to v globrex filepath pathregex globrex filepath path segments See for where they were removed cc zekth I removed the switch and conditions there was inside of the default to one unique condition using regexp to test if vers is formatted as an http version Refs This is an MVP for supporting TypeScript as part of the std library It is a copy of the typescriptlib in typescriptvendor with and addition to the vendortypescriptjs so that it properly exposes itself globally when loaded in Deno It also requires or later to work properly Fixes It would be nice for deno to support HTTP compression It could be enabled as ts import serve from const s serve compression true ps I think our official package is terrible although the deno is very good