Does this issue relate to a new feature or an existing bug Could be either but I suspect it is a bug What version of Serilog is affected Please list the related NuGet package Serilog SerilogSinksConsole What is the target framework and operating system netCore Please describe the current behavior I have a class that has its own format specifiers These are being ignored when used in the message template Please describe the expected behavior I would expect the same behavior as when using stringFormat ToStringformat and string interpolation If the current behavior is a bug please provide the steps to reproduce the issue and if possible a minimal demo of the problem static void Mainstring args SerilogDebuggingSelfLogEnablemsg DebugWriteLinemsg var logger new LoggerConfiguration WriteToConsoleoutputTemplate TimestampHHmm Levelu MessageNewLine CreateLogger loggerInformationHello World var temperature new Temperature loggerInformationMessageTemplate TemperatureK temperature loggerInformationStringFormat Temperature stringFormat K temperature loggerInformationToStringformat Temperature temperatureToStringK loggerInformationInterpolation Temperature temperatureK Output INF MessageTemplate C INF StringFormat K INF ToStringformat K INF Interpolation K Temperature class taken from using System using SystemGlobalization public class Temperature IFormattable private decimal mTemp public Temperaturedecimal temperature thismTemp temperature public decimal Celsius get return thismTemp public decimal Kelvin get return thismTemp m public decimal Fahrenheit get return MathRounddecimal thismTemp public override string ToString return thisToStringG null public string ToStringstring format return thisToStringformat null public string ToStringstring format IFormatProvider provider Handle null or empty arguments if StringIsNullOrEmptyformat format G Remove any white space and covert to uppercase format formatTrimToUpperInvariant if provider null provider NumberFormatInfoCurrentInfo switch format Convert temperature to Fahrenheit and return string case F return thisFahrenheitToStringN provider F Convert temperature to Kelvin and return string case K return thisKelvinToStringN provider K Return temperature in Celsius case C case G return thisCelsiusToStringN provider C default throw new FormatExceptionStringFormatThe format string is not supported format What issue does this PR address Symbols not published to the NuGetorg symbol server Publishing was disabled early on due to some flakiness in the tooling IIRC Does this PR introduce a breaking change No Please check if the PR fulfills these requirements The commit follows our guidelines Unit Tests for the changes have been added for bug fixes features Other information A few questions before you begin Is this an issue related to the Serilog core project or one of the sinks or community projects This issue list is intended for Serilog core issues If this issue relates to a sink or related project please log on the related repository Please use Gitter chat and Stack Overflow for discussions and questons Nope its Loggercs Does this issue relate to a new feature or an existing bug Bug x New Feature What version of Serilog is affected Please list the related NuGet package All Im using What is the target framework and operating system See target frameworks net standard matrix x netCore x netCore x x x x x All Please describe the current behavior Currently there is no output to the self log when a Logger instance is disposed or when using a disposed instance Please describe the expected behavior When a Logger instance is disposed or maybe just the top level one write that to the self log Alternatively write to the self log when trying to dispose the same instance twice or when trying to use an instance that has been disposed For clarity I accidentally registered my LogLogger instance in my DI container in such a way that the static instance got cleaned up at the end of the request This cause the logs to work on the first request but subsequently has pretty weird behaviour Seq sink would stop App Insights sink would throw null ref exceptions all the time and the console sink kept on truckin on The only messages in the self logs were the null refs in the app insights sink If the current behavior is a bug please provide the steps to reproduce the issue and if possible a minimal demo of the problem Does this issue relate to a new feature or an existing bug x Bug New Feature What version of Serilog is affected Please list the related NuGet package What is the target framework and operating system See target frameworks net standard matrix x netCore netCore x x Please describe the current behavior c LogInformationError RpcError occured boom renders to Error RpcError occured Please describe the expected behavior Error boom occured Relates to I discovered that this is due to IsValidInPropertyName method inside ParsePropertyToken c for var i i propertyNameLength i var c propertyName i if IsValidInPropertyNamec return new TextTokenrawText first I originally used LogContextPushPropertyRpcError boom and everything worked fine I am interested in the question why when parsing a message template knowingly narrow the set of valid characters of property name if the neighboring api Push allows you to add properties with any characters This asymmetry led to an error when I moved the property name inside the format string and began to pass the value of the property in the params I read but I don t understand the motivation First this is no structured data just plain string Dots within property names themselves arent supported by many target sinks so we chose the lowest common denominator here Second I use Console and Kafka sink which both support dots in property names However this talk is not even about the dots The template string does not work if you use any character other than an alphanumeric character or underscore etc What problem do you solve when you talk about lowest common denominator And here I come back to the fact that Push allows you to pass an arbitrary property name and thats cool Therefore as I see it all this concern for the lowest common denominator does not make sense The MinimumLevel override does not consider the SourceContext property defined in a LogEvent Repro csharp LogLogger new LoggerConfiguration MinimumLevelVerbose MinimumLevelOverrideMyContext LogEventLevelInformation WriteToConsole CreateLogger Correct DOES NOT write to sink as expected LogForContextSerilogCoreConstantsSourceContextPropertyName MyContext VerboseIf you see this something is wrong Incorrect DOES WRITE to sink if LogLoggerBindMessageTemplateIf you see this something is wrong propertyValues null out var parsedTemplate out var properties new new LogEventPropertySerilogCoreConstantsSourceContextPropertyName new ScalarValueMyContext var logEvent new LogEventDateTimeOffsetNow LogEventLevelVerbose exception null parsedTemplate properties DOES WRITE to sink but NOT expected LogWritelogEvent Repro full project ReproSerilogMinimumLevelOverridezip Tested Serilog v NET Core app Frameworks set up for structured logging often include a range of contextual properties in log events via LogContextPushProperty or ILoggerBeginScope Not all applications need or want all of these EnrichByRemovingProperty addresses this csharp LogLogger new LoggerConfiguration EnrichByRemovingPropertyTest CreateLogger LogForContextTest InformationHello no Test property appears in the output The enricher will remove Test even if it appears in the message template csharp LogForContextRunning Test testName This is the default behavior because a its cheap and b its safer when the property is questionably something like CreditCardNumber do not do this To check the message template and retain the property when it appears in it an additional flag can be set csharp EnrichByRemovingPropertyTest retainWhenInMessage true The name of this flag could leave room for improvement Does this PR introduce a breaking change No Please check if the PR fulfills these requirements x The commit follows our guidelines x Unit Tests for the changes have been added for bug fixes features Other information CC rocklan What issue does this PR address Does this PR introduce a breaking change No Please check if the PR fulfills these requirements x The commit follows our guidelines x Unit Tests for the changes have been added for bug fixes features Other information This is the beginner of a series of PRs that Im planning to improve and optimize Serilog A improve PerformanceTests is the base to measure if the changes are effective This PR only changes the PerformanceTests to be small and logical PR Changes Upgrade the dotNetcore SDK version to the last version Use the class contractor instead of the Setup for the BenchmarkDotNet tests Add an AlmostRealWorldBenchmark to simulate a more realistic scenario A new PipelineBenchmark to test when all events are ignored by Serilog Improve the AllocationsBaseBenchmark tests and add a new AllocationsBaseBenchmark that ignore all log events Includes call to many log methods overloads with combinations of many typesstructs Run Performance Tests only for the latest framework version And copy the results automatically Run all the unit tests for all compatible frameworks Does this issue relate to a new feature or an existing bug Bug x New Feature What version of Serilog is affected Please list the related NuGet package Please describe the current behavior Currently reaching maximum depth sets all values on that layer to Null Please describe the expected behavior Have an optional flag to serialize final depth as using ScalarValue types eg DestructureToMaximumDepth writeFinalDepthAsScalar true Does this issue relate to a new feature or an existing bug X Bug New Feature What version of Serilog is affected Please list the related NuGet package SerilogAspNetCore What is the target framework and operating system See target frameworks net standard matrix X netCore netCore x x Please describe the current behavior I set a Default MinimumLevel in my Serilog configuration of Debug and override the MinumumLevel of one of my SourceContexts to Verbose If I log directly to a Sink File Sink for example it works as expected with everything except the overridden source being filtered to Debug or higher but Verbose events making it through for the overridden source If I instead put a sublogger between the main logger and the file sink to add a filter or something the Verbose events from the overridden source dont make it through Here is a snippet from my appsettingsjson configuration file Serilog MinimumLevel Default Debug Override System Information Microsoft Information NamespaceBenchmarkTimer Verbose WriteTo Name Logger Args configureLogger Filter Name ByIncludingOnly Args expression StartsWithSourceContext NamespaceBenchmarkTimer WriteTo Name File Args path d pathtologfolder Benchmark Timertxt Please describe the expected behavior All of the events from the parent logger make it through to the sinks configured in the sublogger If the current behavior is a bug please provide the steps to reproduce the issue and if possible a minimal demo of the problem Configure an application as described above Write verbose logs from SourceContext NamespaceBenchmarkTimer The verbose events will not make it to the subloggers configured File Sink Note I did try setting restrictedToMinimumLevel to Verbose on the sublogger which didnt make a difference Im unclear if this is the right repo for this or not Id be happy to move or refile if needed MicrosoftExtensionsConfiguration is a caseinsensitive construct For example configurationGetSectionabc will yield the same as configurationGetSectionABC This allows things like environment variables or command line parameters to participate in config but also be named in a contextually correct fashion eg environment variable ABC In configuring the minimum level and overrides for log sources I think Ive discovered that the JSON configuration values are casesensitive For example this json serilog minimumLevel default Information override microsoft Warning system Warning does not work it still shows informational messages from Microsoft sources Info still shows up though the configuration is set to Warn However this json serilog minimumLevel default Information override Microsoft Warning System Warning does work only warnings show up for the Microsoft sources Only Warn is showing for Microsoft sources The only difference is the capitalization of the source names which indicates the source names here are casesensitive Granted JSON itself is casesensitive but since this is running through the MS configuration stuff it cant really be assumed to be casesensitive especially if someone configures it through the environment SERILOGMINIMUMLEVELOVERRIDEMICROSOFTWarning Where does that comparisonfiltering take place Is that a core Serilog thing I could throw a PR in for that if I know where to start tracking it down