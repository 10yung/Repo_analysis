This should up our code coverage a good bit Enables testing that our ObjectiveC compatibility methods are returning the right objects Having ObjectiveC tests also forces us to get our code comments correct Nice added bonus This branch is the longlived development branch for Valet This PR tries to make Valet more semantic Swift by relying on throws rather than Bool or enum return types Its a bit of a massive change but IMO this API feels a whole lot nicer to use Ill be using this issue to track what well want to do in our next major version x Allow for customizing kSecAttrService on Mac x Remove Xcode Support x Dropping Xcode support x Drop Swift support Consider renaming SecureEnclaveValet per gravisman nonbiometric keychain items are also stored in the Secure Enclave under the hood x Bring SinglePromptSecureEnclaveValet to the tvOS target LocalAuthentication was enabled in tvOS x Get rid of Accessibilitys always and alwaysThisDeviceOnly since these values have been deprecated Move away from discardableResult and towards a throws API Were already letting folk ignore errors Lets enable that in a more idiomatic way Support keychain sharing via App Groups in addition to keychain access groups Update README to include migration steps required to update to Valet If you want us to include more action items in this list please file an issue for the change youd like and link that issue to this one Like apple doc says This bypasses a scenario where the user unlocks the device and then is almost immediately prompted for another fingerprint Some times that scenario is really annoying Since watchOS does not have an XCTest framework we created a mock of the XCTest framework and built a watch app to host run the tests This watch app allows us to manually verify that Valet works as expected on the watch but it doesnt allow us to catch regressions in CI Itd be great for us to improve this situation by running our watch app in CI Since the watch app exits with code after successfully running tests were most of the way there The crux of the remaining challenge is determining how to launch the watch app in the simulator from the command line Ive done some digging and it looks like we may need to rely one some of the following commands xcrun simctl list this command will allow us to determine which sims are on the CI machine and allow us to find the UUIDs of phonewatch pairs xcrun simctl boot uuid this command will boot the sims with the uuids weve found above Well likely need to launch both the phone and watch sims xcrun simctl install uuid pathtophoneapp ANDOR pathtowatchapp this command should install the app on the simulator xcrun simctl launch uuid pathtophoneapp ANDOR pathtowatchapp this command should allow us to launch the apps we installed above Im likely missing a command above as I havent managed to get a script working with the above Protip you can monitor the logs emanating from your simulators by running the command xcrun simctl spawn uuid log stream Note that the phone host app is ValetTouchIDTest and the watch app is Valet watchOS Test Host App Help would be greatly appreciated since Im brand new to commandline simulator manipulation