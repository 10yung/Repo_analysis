MMmmkay over the last hours or so I learned that manual mapping is a nontrivial task thegeneralproblem This is the first iteration of a generic manual mapper for the DynamicInvoke API It has a set of usecases that it works for but it wont be able to load any arbitrary module see future todo list In general any PE you can reflectively load now through Stephen Fewers loader should work here as well You can test it with the following snippets cs namespace MapTest class Program UnmanagedFunctionPointerCallingConventionStdCall public delegate int MessageBoxIntPtr hWnd String text String caption int options UnmanagedFunctionPointerCallingConventionStdCall public delegate int TestFunc static void Mainstring args Mimikatz x SharpSploitExecutionPEPEMANUALMAP ManMap SharpSploitExecutionDynamicInvokeGenericMapModuleToMemoryC Users b f Tools Mimikatz x mimikatzexe SharpSploitExecutionDynamicInvokeGenericCallMappedPEModuleManMapPEINFO ManMapModuleBase Call test DLL by DLLMain SharpSploitExecutionPEPEMANUALMAP ManMap SharpSploitExecutionDynamicInvokeGenericMapModuleToMemoryC Users b f Tools DllTemplate DllTemplate x Release DllTemplatedll SharpSploitExecutionDynamicInvokeGenericCallMappedDLLModuleManMapPEINFO ManMapModuleBase Call test DLL by export Also calls DllMain as part of init SharpSploitExecutionPEPEMANUALMAP ManMap SharpSploitExecutionDynamicInvokeGenericMapModuleToMemoryC Users b f Tools DllTemplate DllTemplate x Release DllTemplatedll object FunctionArgs SharpSploitExecutionDynamicInvokeGenericCallMappedDLLModuleExportManMapPEINFO ManMapModuleBase test typeofTestFunc FunctionArgs User MessageBox This does not work Need to fix in future SharpSploitExecutionPEPEMANUALMAP ManMap SharpSploitExecutionDynamicInvokeGenericMapModuleToMemoryC Windows System user dll object FunctionArgs IntPtrZero Hello Howdy SharpSploitExecutionDynamicInvokeGenericCallMappedDLLModuleExportManMapPEINFO ManMapModuleBase MessageBoxA typeofMessageBox FunctionArgs Sleep while true SystemThreadingThreadSleep Core new functions MapModuleToMemorystring ModulePath MapModuleToMemorybyte ModuleByteArray CallMappedPEModulePEPEMETADATA PEINFO IntPtr ModuleMemoryBase CallMappedDLLModulePEPEMETADATA PEINFO IntPtr ModuleMemoryBase CallMappedDLLModuleExportPEPEMETADATA PEINFO IntPtr ModuleMemoryBase String ExportName Type FunctionDelegateType object Parameters To do at a later date WOW support currently it works for x on x and x on x Implement code to handle TLS callbacks Modify the default security cookie generated by the module Add module entry to RtlInsertInvertedFunctionTableLdrpInvertedFunctionTable to add exception handling outside of known image bases Handle nonstandard DLL entry points For example user does not implement DllMain instead it exposes UserClientDllInitialize which populates the KernelCallbackTable Testing If you want to use the code to test the new functionality you can grab the latest mimikatz version grab and compile the test DLL from HERE This PR is a first stab at providing a Reverse Port Forwarding capability using Sockets Summary of Additions SharpSploitPivoting namespace ReversePortForwarding class AddReversePortForward function adds a single reverse port foward of a given BindPort ForwardAddress and ForwardPort ListReversePortForwards function lists all currently active reverse port forwards DeleteReversePortForward function deletes a single reverse port forward of a given a BindPort FlushReversePortForwards function deletes all currently active reverse port forwards Provides a DInvoke function to manually map a DLL from disk into memory using NtCreateSection NtMapViewOfSection After the DLL is mapped its exports may be used reflectively using GetExportAddress This completely bypasses all usermode API hooks and results in the DLL executing from what appears to be normally mapped memory except that LoadLibrary is never called and the module is not referenced as a loaded module in the PEB Am working on adding Module Overloading to hide DLLs downloaded into memory and allow them to be executed from filebacked memory appearing to be a legitimate signed DLL on disk Hasherezade and I have a PoC working and I am converting it to C Incidentally there are realworld examples of attackers using this technique such as in There currently doesnt appear to be a list of desired features improvements bug fixes etc It is hard to know what is considered inscope for this project and what you might think is best left to other projects If there is a todo list it will be easier for people to contribute 