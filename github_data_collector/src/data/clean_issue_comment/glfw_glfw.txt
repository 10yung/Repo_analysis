I checked for this feature and I saw it was already discussed in the past and there is also an open PR about it There is also one related issue All proposals are intended for custom allocators defined at runtime but it could be nice to be able to just define custom allocators on compilation similar to what other libraries like stb do c ifndef GLFWCALLOC define CGLFWCALLOCsz callocsz endif ifndef CGLFWFREE define CGLFWFREEp freep endif This way custom allocators could be defined by user on library compilation Probably outofscope of GLFW but this approximation is also useful if stblib containing mallocfree is replaced by a custom implementation for example on embedded devices This request is related to raylib issue its a low priority feature Summary The joystick api is not working for the Nintendo Switch Pro Controller on macos Details Macos Mojave D GLFW Steps to Repro Build the glfw tests Plug in the pro controller via USB Run testsjoystickapp Observe joystick responses going haywire buggyprocontrollermacosglfw Note that unplugging and replugging in the controller makes no difference OS Windows GLFW Version preview lwjgl I have a GLFWMouseButtonCallback set on my GLFW canvas and it happily reports PRESS and RELEASE states as I click the mouse If I hold down a mouse button for more than a few seconds though say or more before releasing then no RELEASE is invoked It will eventually get invoked if I move my mouse or use the scroll wheel after releasing the button My expected behavior is that releasing the button will invoke a RELEASE callback regardless of length of time that button is held Hi initially discussed here GLFW version on Ubuntu It is currently not possible to receive character events with modifiers for all characters that were typed in My demo was A user is typing in Ctrl in standard enUS keyboard layout works just fine with key as well as char callback but if you use for example deDE German y keyboard layout then in order to send a Ctrl what the user has to press is CtrlAltGr This is captured by the key callback as CtrlAlt which is not helpful because the user app itself SHOULD NOT reimplement keyboard layout mapping nor do I know what keyboard mapping the user has and more importantly the character callback is not invoked for that neither is the characterwithmodifier callback being invoked for that My request basically is to let the characterwithmods callback know about ALL characters being typed in with all modifiers it also feels like a bug to me that this callback isnt invoked on nonenUS keyboard layouts my testcase deDE so Im not sure it actually is a bug or a feature request ps I didnt find any resource telling me why glfwSetCharModsCallback is being deprecated It seems this is the only function that makes sense for me to use even though its currently not really fully working maybe someone knows where to look at for this decision Many thanks in advance Christian glfwGetCursorPos supposedly returns the position of the cursor relative to the windows position That all works very neatly however on arch linux with KDE Plasma didnt test on other platforms yet when starting to move a window the cursor position returned by glfwGetCursorPos is not relative to the current windows position but rather to the windows position when it was started to being moved Using a callback circumnavigates this issue I notice a change when transitioning from GLFW to GLFW doesnt register all keys when they are pressed almost instantly Before vs all keys were registered by glfwGetKey with no problems Now vs when I use glfwGetKey only the first key pressed is registered and only after the delay of the repeat keys is passed that is when the key starts repeating GLFW register the key When you add more than keys at the same time the problem becomes really apparent I was wondering was something I am missing from the versions changes Or is this bug I am using Linux popOS Here is the code I am working on in case you want to test it yourself Looking at the Windows implementation after MonitorFromWindow has been executed the returned handle may become invalid before GetDpiForMonitor is called It then returns invalid values GetDpiForMonitor can be checked against SOK to detect errors Ideally glfwGetWindowContentScale could return or depending on success but with having to stick to the existing API maybe it could set xscale and yscale to As a workaround user could check that the returned value is sane eg between f and f or something else But this is not ideal I currently am trying to write a small engine using GLFW and encountered this problem Whenever the window gets dragged all Update Callbacks stop happening and after the user lets go of the window an Update is called with a potentially huge time step One way to solve this would be to stop the timer when the window starts being dragged and start the Timer again after it stops I dont think theres a way to generate a callback when the window startsstops moving WindowPosCallback doesnt generate a callback when the user just clicks on the error bar and holds the mouse without moving it but this still stops Updates from happening One could solve this by handling the loop on a second thread but i was surprised that there doesnt seem to be an easy solution to this problem Thanks in advance for any answer Ive noticed that in the Windows port of GLFW the glfwInputFramebufferSize and glfwInputWindowSize are called regardless of the current windows size Also the window widthheight is not store in the win structure This might cause repeated calls to the callback I suggest to change the win windowc code as follows c case WMSIZE const GLFWbool iconified wParam SIZEMINIMIZED const GLFWbool maximized wParam SIZEMAXIMIZED windowwin maximized wParam SIZERESTORED const int width LOWORDlParam const int height HIWORDlParam if glfwwin disabledCursorWindow window updateClipRectwindow if windowwin iconified iconified glfwInputWindowIconifywindow iconified if windowwin maximized maximized glfwInputWindowMaximizewindow maximized if windowwin width width windowwin height height glfwInputFramebufferSizewindow width height glfwInputWindowSizewindow width height if windowmonitor windowwin iconified iconified if iconified releaseMonitorwindow else acquireMonitorwindow fitToMonitorwindow windowwin iconified iconified windowwin maximized maximized windowwin width width windowwin height height return 