Did rewrite connection to work with WebSocket Theres few stuff which could be better Isnt that always a case Anyway Need your input on this one How to update DOM object from within timer or request helje Ive implemented two way communication however it sends empty changes array or it crashes on your asserts Help needed Thanks EnvironmentObject value passed in view hierarchy changed on server callback crashes serwer error warning couldnt get required object pointer substituting NULL Couldnt load self because its value couldnt be evaluated error Execution was interrupted reason EXCBADACCESS code address xfffffffffffffffd Inside guard let box slotpointeevalue as StateValueBox else fatalError EnvironmentObject value is pointing to a different box type To reproduce fetch changes from tag build run Select sign in tab Enter credentials testtestcom test Click continue nothing will happen at first click no clue why wait like seconds and click it second time View will change and serwer will crash I have a State var alert header String message String nil changing its value do not remove view from DOM Further more the call ends with error Error Failed to load resource the server responded with a status of Internal Server Error handle line The value is changed inside onTapGesture selfsignIn See Combine Compatible Package Advantage Current clients remains unaffected Apples Combine is used by default whenever possible No additional dependency is introduced OpenCombine is still available The package now support lower version macOSiOS use opensource Combine Your clients can still use opensource Combine for macOS Catalina if they want No matter which Combine implementation you client choose the package adapt to it automatically This might require a little rework Combine also has the Published though SwiftUI still has the ObservedObject We have something similar I think I called them traits but now that there is some good documentation we could try to replicate this Lots of them from ObservableObject to onTapAction As mentioned in We currently have the issue that visual affecting views do not modify a single div but result in multiple divs So this swift Text paddingall backgroundgreen cornerRadius shadowcolor lightGray radius x y Results in Screen Shot at I think the solution is to have background shadow and the likes return a single Style patching tree node Important Layout nodes like padding or frame are different They need to result in new divs because the ordering matters or maybe they can combine if the ordering would lead to the same result The old swift Text paddingall backgroundgreen cornerRadius Text backgroundgreen cornerRadius paddingall This might be the same or very similar to our SwitchView Inspired by John Sundell working on a nice HTML static site renderer but using his own DSL In the spirit of what StaticCMS does for generating static sites using WebObjectsGETobjects templates we could do a SwiftStaticWebUI which does the same using SwiftUI Views Idea dump This is quite different to what SwiftWebUI itself does and would best be done as a separate project Essentially all the diffing and state handling goes away This would essentially not need Bindings or Combine anymore it would be a oneway flow swift views HTML page Targets of actions would work very different they would need to resolve to statically representable links Just like in StaticCMS I imagine that we would need an OFS Object File System essentially a way to load a file system hierarchy into Swift values which then get rendered by SwiftUI Views Imagine a filesystem folder containing md files they would load into say Markdown objects Then youd have SwiftUI Views like swift struct ArticleView View let article Markdown var body some View which could turn them into HTML The OFS in GETobjects also decouples the objects from the actual store eg it could also be a database vending the markdown objects but still being rendered using the exact same Views Then there would need to be entry points which trigger the html website rendering traversal something like swift SwiftStaticWebUIexpose MainPage about AboutPage Or maybe using some enum instead of strings NavigationLinks could also still work swift NavigationLinkdestination AboutPage some anchor This might need some backmapping of the Views to the URLs Since the Views can also be parameterised eg as the body of a ForEach swift struct CounterPage View let counter Int we need a away to serialise those into the URL like counters html One way to do this could be Codable Which would automagically work for many basic types Not sure whether its worth it but it would at least allow me to replace my own sites driven by StaticCMS with something nonJava more up to date 