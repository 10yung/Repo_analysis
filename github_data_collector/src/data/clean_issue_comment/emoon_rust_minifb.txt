Updates the requirements on time to permit the latest version details summaryRelease notessummary pemSourced from a href releasesaemp blockquote h v h h Additionsh ul licodetimecode codedatecode codeoffsetcode macrosli liToplevel codeparsecode function allowing for type inferenceli licodetimeResult ltT gtcode alias to codetimeResult ltT timeError gtcodeli ul h Deprecatedh pPanicking APIs have been deprecated in favor of the new macrosp h Changesh pMinimum supported Rust version is now changed from This permits a number of crates to upgrade without breaking MSRVp h Bug fixesh pA number of parsing methods used unchecked constructors This was because the values emshouldem have been checked prior They are nowp h Breaking changesh pThe quotstd quot feature has been renamed to quotalloc quot which emdisablesem the standard library This was necessary to bring MSRV down to p blockquote details details summaryCommitssummary ul lia href Show panicking APIs in docsli lia href MSRV of bug fixes move to alloc featureli lia href Add codeResultcode type aliasli lia href Add generic toplevel parse functionli lia href codedatecode macro deprecate panicking methodsli lia href codetimecode codeoffsetcode macrosli lia href Shell for macro cratesli lia href Consume correct number of chars when using paddingli lia href Gate internal method to avoid unused warningli lia href Add function to validate a formatting stringli liAdditional commits viewable in a href viewali ul details br Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Automerge options neverpatchminor and devruntime dependencies Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details Is it possible to set nsview to rawwindowhandle on macos I need it to use wgpu with minifb Seems like you want to calculate a fraction here Looking over the code it only pretty much uses precisetimes and I think we can just use the one from the stdlib instead and reduce one dependency For various reasons my game logic has to be decoupled from rendering It updates much faster than hz and it sometimes rolls back and recomputes game frames as part of network prediction code A simplified version of my game loop looks like this let framelength stdtimeDurationnew let mut timer stdtimeInstantnow while windowisopen windowiskeydownKeyEscape let elapsedtime timerelapsed if elapsedtime framelength canvasclear let ourinput Inputfromwindow window gameupdate ourinput TODO let frameready elapsedtime someruntimedeterminedrefreshrate if frameready graphicsdraw game mut canvas windowupdatewithbuffer canvasbufferunwrap timer stdtimeInstantnow I believe I can just check the refresh rate at application startup and check the timestep against the corresponding display frame length It might be better to check for an explicit signal that vsync is ready Im not sure I think it would be a bad idea to couple my game loop to vsync and that its better to let the game logic run with its own counter I think this might be a good first issue for me to contribute to if theres not currently a way to expose this Let me know if thats something you want The first mobile OS we will support with Orbtk is Ubuntu Touch Ubuntu Touch Apps are based on Qt and there is a official way to implement apps for Ubuntu with Rust and Qt I think the easiest way to support Ubuntu Touch in minifb and OrbTk is to wrap a QtWindow Would you agree with it With the support of mobile OS it would be also necessary to add support for touch gestures Id be willing to implement that Start to fix the redox port work in progress When resizing the window on LinuxX Ubuntu i wm there is lots of flickering It would be nice to fix that The ability to check for nonascii keyslayouts independent would be nice in some cases This crate has now been around for almost years Nov so I guess its time to start moving it towards but before that there is some issues I want to be done before Full screen support WASM support OpenGL support on Linux and Windows Some keys not working on macOS Correct Aspect ratio handling More things Proper scaling without hickups for dynamic sized windows Should it be possible to specific RGB ordering of the buffers Should software support be deprecated Linux only pretty much Also a cleanup of all the remaining issues I would like to have zero issues if possible when hitting More examples of all features Add multithreaded example Add framerate limiting example More suggestions can be added in the comments I will start adding issues I want to fix for the milestone 