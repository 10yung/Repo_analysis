It would be great to have an ability to convert XML data into JSON or at least Dictionary Running the following on Ubuntu via Docker swift let podcastURL URLstring let contents try StringcontentsOf podcastURL encoding utf let xml SWXMLHashparsecontents printcontents print printxmldescription will switch an element name around the when it has a namespace For eg the string contents has itunesimage href while the xml print out gives imageitunes href Note this is only on Linux the same code on macOS gives the correct element name Platform ubuntu Xcode Swift It is difficult to know when to implement XMLElementDeserializable versus XMLIndexerDeserializable From the perspective of someone implementing custom deserialization the indexer is for nodes that have child elements ie a class with properties Element deserialization is almost always for individual nodes ie strings ints dates etc Itd be great to make these consistent This has also been brought up as a point of difficulty and confusion in the library itself See as an example of the confusion see also Hi I am using your project as XML parser And I also want do some mark up on my UI It will be easier if I know the line number But I didnt find any possible method Is that possible to know the line line number of specific XMLIndexer I am dealing with I was wondering if SWXMLHash supports nested nodes of the same type Given the following XML xml xml version encodingUTF nodes node nameDogname node nameLabradorname node node node nameCatname node node nameMousename node nodex And the code swift let xml SWXMLHashparsecontent struct Node XMLIndexerDeserializable let name String let node Node static func deserializenode XMLIndexer throws Node return try Node name node name value node node node value do let nodes Node try xml nodes node value printnodes catch let error printerror This results in the message This node is invalid n This is working with child nodes that are not of type Node Because Swift will be releasing soon Ill also have to release a new and breaking version of SWXMLHash that will be versioned as in keeping with semantic versioning So this seems as good a time as any to elicit feedback regarding improvements suggestions etc particularly related to potential changes in the public API I dont want to go nuts but Im open to improvements Some APIrelated thoughts Ive had or gathered from other issues Choose one way to access attributes See which deprecates the existing attributes collection anyway This also introduces an actual type to encapsulate attributes XMLAttribute such that there would be an extension point for things like type conversion versus hanging extensions off of String Make children properties consistent See which made the children property on XMLElement public because the children property of XMLIndexer didnt return TextElements Consider changing XMLElement and TextElement to be enums This might make accessing them somewhat more straightforward Also suggested in Consider consolidating more of XMLElement etc in XMLIndexer This might make the API more discoverable versus having to call into element first In addition there is the feature request to support XPath at I dont necessarily see this making it in time for as I havent even looked at it yet It looks like NSXMLParser will crash if a byte order mark BOM is present in the filecontent being parsed Ive been able to reproduce the error and I have a repro committed on the bomcrash branch see I can think of a few options for handling it Leave it as is it isnt strictly a bug in SWXMLHash but instead is being thrown by NSXMLParser Im not fond of this idea because this crash has affected at least one app it was privately reported to me Their app on the AppStore was crashing because userprovided I think XML content had BOM content in it It also reflects poorly on this library even though it was not directly caused by code in SWXMLHash Strip BOM bytes from the content before parsing This is doable but Im concerned about blindly stripping out bytes from content Also if performance is at all a concern I wouldnt want to spin all of the XML to strip these characters out and then spin the content again for actual XML parsing Add a config option to strip optionally strip them out This would be a really obscure setting configstripByteOrderMarkBytes true or configstripCrashingCharacters true or something like that Add a more friendly exceptionerror if BOM content is found in the XML It would still likely crash but it would at least tell the developer what is wrong Im open to thoughts or ideas here Id also be curious if anyone else has run into this issue before related to the NSXMLParser Research adding XPath support I suspect that the code could wrap NSXMLDocument to provide this functionality 