Currently function execution seems to block the UI would it be possible to modify function bindings to have their own goroutine like Lorca Or is it possible using channels I tried to modify the basic example for nonblocking function execution using channels but wasnt able to do so Currently Linux users that want to load shared objects from a non system path must use LDLIBRARYPATH which is not ideal if the application is being run on a system that doesnt have the environment variable set ahead of time This can be resolved by using rpath Wl ORIGIN in LDFLAGS however further consideration needs to be taken to decide if this should be added in the go build command similar to how we handle windows console hiding or if it should be included in the cforgo generated bindings Currently Ultralight libraries are versioned inside of ultralightlibs and are used to resolve symbols during the linking phase ex This is less than ideal since the folder is MB to download with most of that data likely being inapplicable to the users OS I think a path forward would be to explore solutions other projects employ to version binary dependencies while not storing them in git as well as discriminating based on the operating system to only download relevant dependencies caveat being GOOS changing Running the example on Mac using the Ultralight prerelease seems to fail with crago Failed to create pipeline state error Error DomainCompilerError Code Function fragmentShader is using language version which is incompatible with this OS UserInfoNSLocalizedDescriptionFunction fragmentShader is using language version which is incompatible with this OS Currently our testing is nonexhaustive and cannot be run consecutively due to Ultralight raising exceptions if we try to open two windows in the same process even after closing all handles to the previous window While the window issue might be upstream other work can be done to test more of the codebase In many places throughout the code we have to type cast to and from cgo types Currently ex were not handling errors during those conversions and will likely lead to panics during edge cases As the title implies Id like to remove all panics in favor of proper error handling wherever possible