I tried this plugin out and it only showed results for opensource libraries None of our own internal dependencies showed up We have our resolvers set like import sbt object Common val resolvers Seq Nexus at Twitter at writes to an s bucket as a maven repo Would you be interested in supporting the s urls This would allow people who are publishing to a private maven repo on s to use your plugin I think I have a pretty good idea of how that should be done but didnt want to do the work if you werent interested in supporting it Thanks I specify version ranges in my dependencies then use sbtlock to generate locksbt files Those define a dependencyOverrides setting with concrete dependency versions that override version ranges tldr libraryDependencies with version ranges and dependencyOverrides with specific versions When invoking dependencyUpdates I see dependency updates based on version ranges instead of version overrides Example pluginssbt addSbtPlugincomtimushevsbt sbtupdates buildsbt libraryDependencies comlihaoyi pprint dependencyOverrides comlihaoyi pprint And then sbt show update info comlihaoyipprint info sbt dependencyUpdates info comlihaoyipprint Right now the output is difficult to parse regex or otherwise through tooling because of the way it formats output when data may be missing Id like the options to produce this report in a CSV andor json format output to the console and or file Thanks Id like to raise a feature request for something similar to what is provided in the versionsmavenplugin for example versionsuselatestreleases versionsuselatestversions Itd be nice to be able to see updates for all a projects dependencies rather than just those explicitly mentioned in the libraryDependencies setting This could be achieved via a setting or a separate task In particular if a library pulled in by one of your projects dependencies has a vulnerability its great to be able to work out if theres a patchupgrade available that would fix it Thats fairly tedious to do by hand this plugin would make that very easy if it were possible I understand its much more complicated than the current behaviour perhaps combining this plugin with sbtdependencygraph would be the easiest way to achieve it Im interested to hear your thoughts on whether you think this would be a useful addition or if you feel it would be better as a separate tool The behaviour change in has a number of downsides for me My projects that target multiple versions often use different library versions with different Scala versions Using sbtupdates versions before I typically run sbt crossScalaVersions to get a perScalaversion update report The new behaviour hides relevant updates from me For example there are no versions of Akka prior to released for Scala but beginning with Akka they stopped building for Scala So a project targeting and has to use different versions of Akka for and With the current logic I wont any updates for Akka because they will never release a version for all of those Scala versions I also see this with the orgscalalangmodules libraries such as scalaxml and scalaparsercombinators that were split out of the Scala standard library in Scala Projects that use these libraries need to depend on these artifacts for and but not for With the new logic I dont see updates for these libraries because they arent released for One possibility for addressing this would be to make an option that enables the old behaviour Right now it shows output like info Found dependency update for chavrusabackend info orgscalalangscalalibrary What it really means to me however is that a new scala version is on maven But thats useless if my dependencies arent published for it Suggestion Dont show dependency update for scalalibrary Instead it should separately say new scala version available and show which libraries have been published for it The library for the new scala may not have the same version as for the current scala There are a few cases I dont know if they can be identified reliably Java libraries dont care about the scala version and are always fine Most scala libraries only care about the scala binary version x is one scala they must be available with the right suffix eg A few are versioned with the full scala version scalalibrary scalareflect etc They typically have no suffix and match by their own artifact version eg for scala Sbt doesnt support Scala yet so it would be nice to check the sbtPlugin setting and dont report info orgscalalangscalalibraryprovided 