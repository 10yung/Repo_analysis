The scheduler in charge should be the leader and the api should reflect this name change Hi just considering using noderesque combined with sidekiq I am having some problems with the integration so I am leaving my feedback here Workers started from noderesque do not show in Sidekiq web Sidekiq when starting new workers add the name of the worker to the set processes noderesque doesnt seem like it does Adding new jobs from noderesque to Sidekiq works fine Stats shown in Sidekiq Web are correctly updated both failed and processed jobs Scheduled jobs from noderesque are not shown in Sidekiq web Scheduled tab Scheduled jobs from noderesque requires a worker from noderesque I add a scheduled job from noderesque using enqueueIn scheduler is also run in this same process Sidekiq worker is started and ready to run jobs all the time After the delay time nothing happens To be able to run this job a worker from noderequest must be started Please it would be highly appreciated to document all these caveats and some others that may exist in the README for future developers I dont think that with current features and caveats between sidekiq and noderesque should be stated that noderesque is API compatible with Sidekiq because it does not Node version Ruby version Sidekiq Version I also checked older versions just in case some fully works Noderesque version This project needs a logo The issue is a part of which appears when we try to enqueue jobs with a difference of less than second at a very highrate The exact issue happens since the enqueue methods convert the millisecond timestamp into seconds thereby rounding off a large portion of the timestamp which then means that conflicts appear if a similar job is scheduled before the first one is picked up by a worker I do not all the intricacies of JS but the following line seems weird to me Is there a reason why the plugin is instantiated to just get name Newing a custom plugin to just get its name breaks error sanity checks in my plugins constructor to make sure required options are not null Are there any problems with it being pluginName PluginRefrencename If so I can create a pull request I would like to know if it is possible to create a job as a class For instance would something like this be possible js class SendNotificationMails extends someBaseJobClass constructor thisattachnotificationmails other settings async run Execute job It would make organizing a lot of background jobs much easier to write everything in classes and just have them register at an initial script