Today we traverse the AST to extract out static styles with a bunch of AST traversal heuristics We could replace a lot of them with the TypeScript typechecker which can infer literal types from the expressions passed into jsxstyle props Related issue Steps to reproduce Pull down the repo Run yarn gatsby develop Open index page Resize the browser Expected behavior Both Image grid and copy section above should turn into a column below px vp width Actual behavior Only the image grid transforms into a column Reference how the mediaQueries are set for image grid Reference how the mediaQueries are set for copy section A minisite for jsxstyle would be a nice way to show off the things you can do with jsxstyle As far as content goes the README provides a decent starting point At the moment modules specified in jsxstyleloader s whitelistedModules config option are not parsed by webpack which means that they need to be written in nodefriendly javascript This is unexpected and can be confusing see It also kinda sucks for folks who use TypeScript since the modules have to be written in plain JS and will therefore be untyped It should be possible and fairly straightforward to compile whitelistedModules with a child compiler In the spirit of zero configuration jsxstyle could provide a few preset media query prefixes based on a sensible set of breakpoints The user would still be able to specify breakpoints in the mediaQueries prop but this would hopefully be the exception rather than the rule Ideally the user would be able to globally override this default media query set as well This would likely be an injected option similar to cacheinjectOptions since a media query provider component makes static analysis impossible across multiple files chenxsan lmk if you have thoughts on this I briefly discussed this with souporserious a few weeks ago and gave it a bit more thought today Simple stateless functional components should be able to be statically analysed and inlined where they re used Should be doable with something that runs before A component like this one jsx const Heading props Block componenth onered twogreen props threeblue thats used like this jsx Heading one two three WowHeading would get turned into this jsx Box displayblock componenth one two threeblueWowBox Pretty straightforward if the component is defined and used in the same file The main unknown right now is what to do about components defined in other files At Smyte we generally have one file per component which means that this feature won t be terribly useful for us unless it works across files For external modules the inlining would need to take place in two steps one to find all exported SFCs and another one to inline them I could use the needAdditionalPass compilation hook to split things up but it would greatly increase compile time Hmmmm When I get a second I ll cook up a proof of concept Wondering if there is a way to make autoprefixing easier on users so jsxstyle works out of the box with CRA in every browser Can we use this in a way that works by default but then turns off if the loader is present somehow I know Glamor RN Web and SC use it Since we ve now got type definitions with nice meaty comments you can see what a CSS property does as you type if you use a compatible editor Neat I think there s more we can do here as far as education and developer experience goes One suggestion runtime advice Things we could do with this feature warn about common CSS mistakes warn about conflicting CSS properties encourage people do an oldschool thing a newer way For example centering an element inside another element warn about flexbugs warn about CSS properties that are below a certain threshold of browser support validate CSS properties at runtime encourage people to use unitless props where they re supported ie catch strings that match dpx and warn if there s a unitless prop on lineHeight that s above some sensible number lineHeight is probably a mistake warn if numeric string values are passed to unitless props see warn if string values ending in px are passed to unitless props The mechanism that provides runtime advice would be minified out in production It would exist purely to help the developer while they re writing styles It wouldn t slow anything down at all perhaps it could run in a web worker Automated advice can oftentimes be quite annoying so it would most likely be an optin thing I d like it to be something that even seasoned frontend people would use though This is something I was thinking about a while ago that I was reminded of while I was migrating the core pieces of jsxstyle to TypeScript jsx MediaQuery queryscreen and minwidth px colorred Block colorblue blue on big screens red on small screens Block MediaQuery Pseudo hover colorred Block colorblue blue normally red on hover Block Pseudo MediaQuery and Pseudo components generate a CSS class with the assigned styles The render method returns a cloned only child with the className added to props Pros Super TypeScriptfriendly Making media query components seems nice at least in my brain Example jsx import MediaQuery from jsxstyle const SmallScreen props MediaQuery queryscreen and your special mq props later on SmallScreen colorblue Block colorred SmallScreen Edit this might make more sense as sigh a HOC jsx import withMediaQuery from jsxstyle const SmallScreen withMediaQueryscreen and your special mq Cons Pseudo feels a bit weird and could get weirder At first glance it seems that it would not be possible to completely extract these components from runtime with jsxstyleloader even if all props were static I think there s a way around this though This could possibly be a separate package as well Hmmm much to think about