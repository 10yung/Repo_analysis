If the folder specified in OutputPath doesnt exist prior to running StartDSCEAscan the scan will run and will fail when attempting to save the output losing all of your data The CmdLet should gracefully check for the existence of the folder before starting any scans or perhaps go ahead and create one if it doesnt already exist PS C Users user Desktop StartDSCEAscan MofFile localhostmof ComputerName COMPUTER OutputPath DSCEA Verbose VERBOSE DSCEA Scan has started VERBOSE Connectivity testing complete VERBOSE Initiating DSCEA scan on COMPUTER VERBOSE Processing Compliance Testing VERBOSE Total Scan Time ExportClixml Could not find a part of the path C Users user Desktop DSCEA results xml At C Program Files WindowsPowerShell Modules DSCEA Functions StartDSCEAscanps char results ExportClixml Path JoinPath Path OutputPath Child CategoryInfo OpenError ExportClixml DirectoryNotFoundException FullyQualifiedErrorId FileOpenFailureMicrosoftPowerShellCommandsExportClixmlCommand Problem A detailed report only contains Noncompliant settings If the report is empty you expect all servers to be compliant But if your scan failed for some reason and you automated the process you will not now weather you are compliant or your scan has errors Solution Include the state of the input file in the report If the XML is empty or has bad data Hi While browsing the code Ive noticed the function RepairDSCEngine which is actually killing all DSC engine host processes And not only that but its being called times in a loop from places which is kind of weird to see without understanding the context Can you guys please add comments to this function explaining why is this actually necessary Also I wonder what happens if there is a periodic DSC config running and you are killing the DSC engine For example I have a web server which is syncing contents from a DFS share every few minutes Depending on the size of the content network bandwidth etc this can take some time Ideally an analyzer would be free from side affects so I just want to make sure I understand how safe is it to kill the DSC engines process what are the potential side effects and in general why is this necessary for i i lt i RepairDSCEngine ComputerName computer ErrorAction SilentlyContinue do processID GetProcess Id dscProcess processID StopProcess Force while processIDProcessName match WmiPrvSE Thanks When running with CIMSession the credentials are not passed to the PSSession which is used to copy the modules The line below doesnt get the credentials so it attempts using the current users credential Pull Requests to Master Ensure pull requests to dev are heavily reviewed tested and scrutinized before approving Run DSCEA through PowerShell Script Analyzer Pester and manual testing completed Update version number in DSCEApsd Update documentation with new release notes link in sidebar pointing to the new page Perform a release on GitHub to get a snapshot of the project added to the releases section with zip file PowerShell gallery upload download zip of master remove unwanted things like docs folder upload to ps gallery If needed rebase dev on master so it shows all changes have been rolled into master as squash merge is likely to be used Pull Requests to Dev Check to see if PowerShell shows any errors when running ImportModule DSCEA Review any lingering issues that might still be open and close them if the new release fixes the issues Update this function with an external call to GetDate instead of using StartDate this is needed for things like OMS where we look to pull in just the most recent scan in a dashboard Review external PowerShell version check script for example Hi Im wondering if there was a reason you chose the casing for functions as you did The two obvious issues I see are the following DSC used instead of Dsc as seen in PSDesiredStateConfiguration module Use of a lower case letter for the first word following DSCEA eg StartDSCEAscan Both of these diverge from the PowerShell Style Guide and the Net Framework Capitalization Conventions Hi Raplh and Keith and sorry for my Funny English During my test I have a little problem with powershell version Not all powershell versions are compatible with DSCEA For example the version does not accept the TestDscConfigurationReferenceConfiguration And DSCEA does not work All configurations are False I could not test the next BUILD but its Ok with the version During my tests I used the same Framework version I have modify the StartDSCEAscan functions I replaced line and by runlist psjobresults WhereObject Major ge and Build gt PSComputername versionerrorlist psjobresults WhereObject Major lt or Major ge and Build le PSComputername And the line WriteWarning The following systems cannot be scanned as they are not running the good Powershell Version Greater Than Please check versionerrorlist for details dscea All its Ok for my environment If you think this is a good solution I let you use with pleasure Regards Thierry This looks like a great addition to DSC Tooling however I have some concerns Judging by the examples it looks like DSCEA assumes all servers share the same MOF file and they only have one MOF In our environment we have on average MOF files partial configurations in some cases per server On top of that each MOF file is unique per server Are there any plans to support this type of DSC usage or should we be creating some tooling around the tooling to generate reports