logarguments option added in Rails or Job arguments are logged by default meaning sensitive job arguments eg tokens passwords PII could be written to logs Avoid this by setting logarguments to false by default in ApplicationJob If you need to reenable logging in a particular job it can be done in that jobs class rb class ApplicationJob ActiveJobBase Disable argument logging selflogarguments false end rb class NoSensitiveArgsJob ApplicationJob Enable argument logging for this job only selflogarguments true end Prefer placing throttles nearer to your vulnerable code as they are less likely to be bypassed due to developer forgetfulness For example Developer protects all API v endpoints authentication from brute force attacks with a throttle in your rack attack initializer Developer introduces API v endpoints that use the same authentication code Userauthenticate as API v but forgets to add a corresponding throttle to the rack attack initializer for the new endpoints API v is vulnerable to brute force attacks If the throttle had instead been placed in Userauthenticate then API v would have been protected from brute force attacks and developer forgetfulness Relevant discussion and ideas for using rack attack throttles outside of the initializer Prefer uncompressed JS files in the project which can later be minified by the asset pipeline or similar These are more friendly to reviewers and makes it harder for vulnerabilities to be slipped in compared to minified JS files Setup service like dependabot to help keep JS dependencies uptodate Consider using yarn or similar tool to help keep track of JS lib versions IPbased throttle keys are often used in rackattack configurations These are not enough to protect against attacks coming from multiple IP addresses Add other protections to mitigate In your rack attack throttles favor identifying routes using Railsapplicationroutesrecognizepathpath rather than trying to sculpt regular expressions to match a path Its already defined in routesrb anyway Helps avoid creating throttle bypasses accidentally when the regular expression doesnt quite match the behaviour of Railsapplicationroutesrecognizepath Eg instead of an api token like ab dlp prefix it with a unique value to your service eg myserviceab dlp This is helpful to reduce false positives if you decide to integrate with a token scanning service such as GitHub provide which relies on regular expressions to find potential matches configinitializerscookiesserializerrb rb Specify a serializer for the signed and encrypted cookie jars Valid options are json marshal and hybrid Railsapplicationconfigactiondispatchcookiesserializer json For example say a user is able to link their profile to a URL of their choice or host HTML on your site including links For these kind of URLs that arent under your control consider Checking URL is safe to access and doesnt You will want to repeat this check at regular intervals to catch URLs that are compromised at a later date Some APIs that can help identify malicious URLs are further suggestions welcome Consider disallowing nonHTTPSTLS URLs or at least display warnings when users seefollow insecure links When a user clicks on a link to a site not under your control consider showing an interstitial that warns the user they are leaving your site and displays the full URL Heres a screengrab of how HackerOne does it the text isnt likely relevant to your use case but is here just to give you an idea IIRC Facebook does something like this too img width altScreen Shot at src Here are the character ranges for a few of the SecureRandom generator methods methodcharacterstotal available characters SecureRandomhex af SecureRandomalphanumeric AZ az better SecureRandomurlsafebase AZ az even better hex generates a token with a limited character set One of the alternatives with a larger character set would increase the complexity of the generated tokens Related issue 