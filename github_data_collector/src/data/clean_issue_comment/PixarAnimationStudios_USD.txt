 Description of Changes usdedit Dont keep a file descriptor open for the temporary usda It is not needed and prevents usdcat from writing to it in Windows Also ensure write permissions when removing the temporary usda otherwise usdedit n will be unable to remove it on Windows Fixes Issues usdedit extras usd tutorials convertingLayerFormats Sphereusd The process cannot access the file because it is being used by another process Error Failed to open file extras usd tutorials convertingLayerFormats Sphereusd exiting Description of Issue When debugging imaging problems via usdview it is useful to print or inspect various scene or imaging paths at different locations in the codebase However it is often difficult to distinguish between the types of paths UsdPrim paths cache paths render index paths by simply observing the value Notably cache paths and render index paths have the exact same value in usdview because its UsdImagingGLEngine member is constructed with an absolute root path as its delegateID It would be useful for a debug environment variable to have usdview construct UsdImagingGLEngine passing in a non absolute root path as its delegate ID could be just something as simple as UsdImagingDelegate That way it becomes easier to distinguish different types of paths by observing their value System Information OS Hardware ubuntu Package Versions usd Build Flags Dynamic build Description of Issue The ifndef define header guard started in codegenTemplatesschemaClassh should have a corresponding endif at the end of the same file Currently that endif is added by usdGenSchemapy The use case is we prefer using pragma once as the header guarding mechanism throughout our codebase It would be useful to be able to make this customisation purely through codegenTemplates System Information OS Hardware ubuntu Package Versions usd Description of Issue A custom prim adapter can insert multiple Rprims for a single UsdPrim This means that the render index path of the Rprims with the potential exception of potentially one of them must differ from the UsdPrims prim path Opening the above scenario in usdview if the user makes a selection on an Rprim whose render index path does not match the UsdPrims prim path the following exception is raised python Traceback most recent call last File volappsusd VP libpythonpxrUsdviewqappControllerpy line in onPrimSelected primGetPath instance File volappsusd VP libpythonpxrUsdviewqselectionDataModelpy line in switchToPrimPath path selfensureValidPrimPathpath File volappsusd VP libpythonpxrUsdviewqselectionDataModelpy line in ensureValidPrimPath reprsdfPath ValueError Path must be a prim path got SdfPathemptyPath The code at these locations suggest that usdview makes assumptions that the render index path of an Rprim must equal its associated UsdPrim path Steps to Reproduce Introduce a new prim type In our example we defined a custom Triangle prim which inherits from Gprim Introduce a new prim adapter which inherits from UsdImagingGprimAdapter which provides imaging for the Triangle prim In Populate insert two or more Rprims with different cache paths and offset the different Rprims in space ie providing different points for different cache paths so they can be selected individually Author a new layer usda def Triangle myTriangle Launch the above layer in usdview and select one of the Rprims whose render index path does not match its UsdPrim path System Information OS Hardware Ubuntu Package Versions usd Build Flags Dynamic build This works around the problem of glew libraries are inconsistently selected between OpenSubdiv and USD OpenSubdiv prioritizes glews and USD prioritizes glew If both are installed on a system hilarity ensues symbols in glew cannot be resolved Building on Windows does not create a pxrTargetscmake file breaking pxrConfigcmake in the root installation directory when choosing a monolithic build Steps to Reproduce Build the current release using the python script py USD buildscripts buildusdpy usdpy buildmonolithic ptex alembic openimageio I get the same result using cmake directly This is on Win MSVC Description of Issue Python cannot import any of the USD packages including pxrUsd pxrTf etc Here is what happens when I try This is the same error as closed issue but its not fixed using any of the steps there Python default Aug GCC Red Hat on linux Type help copyright credits or license for more information import pxrUsd Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrTf Traceback most recent call last File installUSDv libpythonpxrTfinitpy line in module from import tf AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrTrace Traceback most recent call last File installUSDv libpythonpxrTraceinitpy line in module import trace AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrWork Traceback most recent call last File installUSDv libpythonpxrWorkinitpy line in module import work AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrPlug Traceback most recent call last File installUSDv libpythonpxrPluginitpy line in module import plug AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrGf Traceback most recent call last File installUSDv libpythonpxrGfinitpy line in module from pxr import Tf File installUSDv libpythonpxrTfinitpy line in module SetErrorExceptionClassErrorException NameError name SetErrorExceptionClass is not defined Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrVt Traceback most recent call last File installUSDv libpythonpxrVtinitpy line in module import vt AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrAr Traceback most recent call last File installUSDv libpythonpxrArinitpy line in module import ar AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrKind Traceback most recent call last File installUSDv libpythonpxrKindinitpy line in module from import kind AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrSdf Traceback most recent call last File installUSDv libpythonpxrSdfinitpy line in module import sdf AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Warning in TfPyLoadScriptModule at line of sourceUSDpxrbaselibtfpyUtilscpp Import failed for module pxrPcp Traceback most recent call last File installUSDv libpythonpxrPcpinitpy line in module import pcp AttributeError NoneType object has no attribute MFBFULLPACKAGENAME Traceback most recent call last File stdin line in module File installUSDv libpythonpxrUsdinitpy line in module import usd AttributeError NoneType object has no attribute MFBFULLPACKAGENAME quit Steps to Reproduce Download and build glew opensubdiv ptex and tbb from source install to custom directories Install other dependencies using yum Configure and build USD using cmake install to a custom directory Set PYTHONPATH and LDLIBRARYPATH to include installUSDlibpython and installUSDlib respectively Open a python interpreter Type import pxrUsd System Information OS Hardware centos devtoolset for compilers Package Versions v v dev branch on Jan Build Flags BOOSTUSESTATICLIBStrue OpenGLGLPREFERENCEGLVND PYSIDEUSEPYSIDE TRUE CMAKECFLAGS and CMAKECXXFLAGS fPIC Others setting the locations of all of the libraries built from source PYTHONEXECUTABLEusrbinpython PYTHONINCLUDEDIRusrincludepython PYTHONLIBRARY usrlib libpython so Description of Issue The mesh representation used by Hydra to describe a sphere primitive does not align its points with the origin Id submit a pull request for this but I was hoping that you have some sort of script for generatig the mesh description code automatically Steps to Reproduce Open a USD file with a default sphere primitive in usdview Its easiest to see in points drawing mode that the points dont align as one would expect with the axes Looking at the code you can see there are nowhere near enough entries in the mesh attached image shows both usdview and highlights all zero entries in the code SphereMeshOffset Package Versions Log on google drive System Information OS Hardware xcodeselect version OS X El Capitan Description of Issue Currently there is no easy way of deleting a variant set the API only exposes the ability to add Variant sets Steps to Reproduce I could only find method to AddVariantSetUsdVariantSetAddVariantSet and nothing related to DeleteVariantSet although if I add the following line manually on a sublayer delete variantSets modelVariants that does seem to remove the variantSet even though Im left with the following showing up as metadata after the stage is composed variants string modelVariants lo Package Versions USD 