Fixes This is something Ive wanted for a while and have been poking at off and on It ended up being a lot more involved than I had hoped This is because essentially nothing that parses or scans rust seems to handle unmatched brackets at all since they all operate on token trees which must be well formed I even asked wggrammar channel on discord and basically got told that I was going to have to go my own way or use something like treesitter which would only solve half the problem lexing requires taking a C dependency and then either writing a treesitter grammar for rust or vendoring one from one of the text editors I considered the naive solution of just scanning for parensbrackets and ignoring anything else but in practice its pretty annoying its not really okay for the repl to see a and then never send your input since it thinks its invalid so you need to at least lex the input well enough to notice stringscharscomments so thats what I did Unfortunately even just this much is pretty involved as rusts syntax for these is surprisingly tricky Block comments can nest chars are hard to distinguish from lifetimes and it has raw strings That said it works well in practice has lots of comments and pretty good test coverage so hopefully its not too controversial Id also like to improve the repl more in the near future rustyline seems to have support for a few more things that would be useful and its possible we can use syn to handle many of the cases this misses in particular detecting missing semicolons on stuff like let x probably requires syn in order to be robust but for now this patch was already pretty huge so I left it as is Note Ive only tested this manually on macos at the moment but have access to other platforms and will try to get around to it soon Id like easier ways of using local deps Ideally as command line args to the repl but it would probably be nice to improve path deps Heres my proposal Add two new command line flags to the repl local and package evcxr local Determine the name of the crate located in the current working dir error if no crate exists or were in the root of a virtual workspace and start the repl with a path dep for that crate pointing at the cwd evcxr package pkgid evcxr p pkgid mirrors cargo run p Similar but works for workspaces with many crates Do the same but for the crate pointed at by pkgid I believe cargo metadatacargo pkgid can be used to identify these I dont care as much about the use once the repl is open although that would probably be good to support to Maybe localdep name where its local if name is omitted and package if not Then the CLI flags could be implemented in terms of this Id be willing to implement these if theyd be accepted Im not sure what this would look like really but in it would have been nice to be able to attach lldb The ideal situation would be if debugger expr to attach rustlldb set a breakpoint right before evaluating the expr and drop me into the debugger prompt Not sure how doable this is though Another maybe easier option would be for debugger expr to spawn the child process and print out the PID and the function I should set a breakpoint on but then wait for me to hit return or something indicating ive attached the debugger before actually evaluating expr dep reqwest let body reqwestget awaitunwrap text awaitunwrap printlnbody body Errors let body reqwestget awaitunwrap text awaitunwrap only allowed inside async functions and blocks await is only allowed inside async functions and blocks let body reqwestget awaitunwrap only allowed inside async functions and blocks await is only allowed inside async functions and blocks I might have missed a step somewhere but Ive installed rust via rustup I have CARGOHOMEbin directory in my PATH Ive set the CARGOHOME to the cargo folder The rust compiler looks to be installed rustc version rustc e When I try to create a new rust notebook the jupyter logs show Error MessageCompilation failed but no parsable errors were found STDERR nerror no default toolchain configured n nSTDOUT n Ive also run the rustup up commands to try and set the toolchain rustup install stable rustup default stable Thanks Welcome to evcxr For help type help version dep fdlock let file stdfsFilecreatestringslockunwrap let lock fdlockFdLocknewfile Failed to determine type of variable lock rustc suggested type fdlockunixFdLockstdfsFile but thats private Sometimes adding an extern crate will help rustc suggest the correct public type name or you can give an explicit type As shown in the links above the type is not private and works fine in a regular Rust crates I suspect this might be an issue with the mod not being defined as pub or conditional compilation My platform is macOS my rustc version is rustc nightly de d f Its the zmq stuff thats broken Not sure why it suddenly broke since there doesnt appear to have been any relevant changes Perhaps Travis changed some system configuration or something First failure I got was CMake Error at CProgram FilesCMakesharecmake ModulesCMakeMinGWFindMakecmake message shexe was found in your PATH here CProgram FilesGitusrbinshexe For MinGW make to work correctly shexe must NOT be in your path Run cmake from a shell that does not have shexe in your PATH So I added something to the travis config to delete shexe Now I get the following error C Users travis cargo registry src githubcom ecc db ec zeromqsrc vendor src threadcpp error expected catch before except except EXCEPTIONCONTINUEEXECUTION This appears to be this bug So once a newer release of libzmq comes out and gets packaged into a newer version of zeromqsrc we should hopefully be good In the meantime I might need to disable Travis testing of the Jupyter kernel Hi It seems this particular overflow causes the repl to always generate wrong code on subsequent expression text evcxr Welcome to evcxr For help type help u pow thread unnamed panicked at attempt to multiply with overflow rustc ea cb f a c e f srclibcorenummodrs stack backtrace Child process terminated with status exit code A compilation error was found in code we generated Ideally this shouldt happen Type lasterrorjson to see details error linking with cc failed exit code How can I run the jupyter kernel on nightly I tried installing it using a different channel but it wont stick to the one I used Also tried downloading locally the repository and installing from there no success either I often want to sanity check some math or similar and evcxrrepl works wonderfully for this for the most part previously I had been using lldbgdb for this which works about as well as you might imagine Unfortunately if doing bitwise math I often want to see hex output Doing so requires outputting something like formatx expression I want to check each time which is tedious Taking a look at the source it seems somewhat tricky since you dont know the type in advance but one somewhat hacky option would be something like allowing specifying a list of formatting options to try which would be used here or something eg if I set fmt x or whatever then the system would try x followed by for things where evcxrdisplay doesnt apply That said Im flexible and willing to accept something that requires annotating things manually if the above solution is undesirable for some reason