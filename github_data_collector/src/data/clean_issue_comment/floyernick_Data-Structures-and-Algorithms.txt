Why do you add to the boundValue here in the exponential search algorithm After trying a test case where I search for an element that is not in the data slice I get an error panic runtime error index out of range Im not sure why a was added but when I remove it the problem goes away All of my code go package main import fmt func exponentialsearchdata int key int int boundvalue for boundvalue lendata data boundvalue key boundvalue if boundvalue lendata boundvalue lendata return binarysearchdata boundvalue key func binarysearchdata int bound int key int int min max bound for min max mid intmax min if data mid key return mid else if data mid key min mid else if data mid key max mid return func main data int data int keys int for key range keys fmtPrintlnSearching for key if index exponentialsearchdata key index fmtPrintlnPosition index data data index else fmtPrintlnKey key not found Search for an element in an empty slice fmtPrintlnPosition exponentialsearchdata Output shell Searching for Position data Searching for Position data Searching for Position data Searching for Key not found Searching for Position data Searching for Position data Searching for Position data Searching for Key not found Position the block as below go current listhead for currentnext nil if currentnextdata i if currentnextnext nil currentnextnextprev current currentnext currentnextnext return true current currentnext there should no currentnextnextnil condition if currentnextnextnil then currentnext will be the listtail The InsertFirst method is missing an empty list check I copied the check from InsertLast and made the needed changes This fix is the following lines of code if listtail nil listhead data listtail data return the block below has a problem that the previous head can still be referred to go if i listheadprev nil listhead listheadnext return true it should be like this go if i listhead listheadnext listheadprev nil return true There is a possibility of overflow I fix it In BinarySearch there are a code may cause overflow go intmaxIndex minIndex If maxIndex minIndex is greater than max int there occurs overflow and return wrong number We should calcurate like below go intminIndex maxIndexminIndex Ill make a PR Add gitignore