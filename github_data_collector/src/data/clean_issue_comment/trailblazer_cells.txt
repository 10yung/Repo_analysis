I see that someone else has had problems with Cells x not following the standard conventions for naming templates But the solution is opaque We have a large project with a lot of htmlerb templates and htmlerb partials which worked with cells x and dont work with cells x I dont want to go through renaming them because its an unnecessary pain Is there some reason why this change was made and not documented in the upgrade guide If I forked the project made a PR to correct this issue would it be accepted or is there some deep reason why the standard naming convention isnt being followed is published but gem is at img width altscreenshot at src This is for logging cache hit rate for specific cells Looking at caching server hit rate is useless and also inaccurate since rails s cache versioning Cant nest markdown under html Cells per default does not escape HTML However you may run into problems when using Rails helpers Internally those helpers often blindly escape This is not Cells fault but a design flaw in Rails I know this is not a bug but want to provide a option to do html escaping by default Because set html escape for every input data is difficult and will cause security problem if forget Hi I think you got it all wrong Well no quite possibly not everything many things seem nice but this particular part here Logically IMHO escaping or possibly much more correctly transcoding ALWAYS is a matter of protecting against conflicts vs control characters space of a specific protocol raw payload usually raw strings within a specific foreignprotocol container the very moment that the raw string starts needing to be used within that container format protocol that is and not a blink of an eye before Thus its the task and intimate implementation detail knowledge of an OUTER container layer which is to escape transcode adopted raw payload content right when OSI LAYER TRANSITION activity embedding that payload element content into a containing container whichever way that container might be defined be it HTML XML binary format Thus having any signs of escaping whatsoever attached to any supposedly simple payload type whatsoever class CommentCell CellViewModel include Escaped is a protocolextensibilitybreaking what will happen if you are forced to change to a wholly different container spec LAYER VIOLATION and thus WRONG at least from my domainspecifically very unexperienced perhaps this framework is indeed actually doing it right somehow POV Docs part You can suppress escaping manually seems to be a telltale sign for existence of that layer violation one very likely shouldnt be in need of such questionable weaktoggledisabling if handling were properly layerdesigned Ie operation style should actually be something like MyString rawString here myHtmlDomRenderHeaderrawString inherentlyimplicitlyautomatically presented as h gt hereh HTH Hashes can have default values different from nil see So we must not rely on the hash returning nil for missing keys Using this you can find a file name with a custom extension ruby cellsmymailercellrb class MyMailerCell CellViewModel include Partial end erb cellsmymailersomeviewerb render partial viewsmailersharedinkypartial suffix inkyerb formats html html viewsmailersharedinkypartialhtmlinkyerb row columnscolumns columnsEasy emails with Inky templating languagecolumns columnscolumns row cf Hey guys Im having some issue with Airbrake and Cells Gems used airbrake airbrakeruby cells cellshaml cellsrails The problem occurs when there is exception raised within a Cell that doesnt implement a standard show method or view named after the cell Heres the relevant part of the stacktrace cells libcellviewmodelrb in findtemplate cells libcellviewmodelrb in rendertostring cells libcelllayoutrb in rendertostring cells libcellviewmodelrb in render cells libcellviewmodelrb in show cells libcellviewmodelrb in renderstate cells libcellcachingrb in renderstate cells libcellviewmodelrb in call cellsrails libcellrailsrb in call cells libcelllayoutrb in call cells libcellviewmodelrb in tos airbrakeruby libairbrakerubyfiltersthreadfilterrb in sanitizevalue airbrakeruby libairbrakerubyfiltersthreadfilterrb in block in sanitizevalue airbrakeruby libairbrakerubyfiltersthreadfilterrb in map airbrakeruby libairbrakerubyfiltersthreadfilterrb in sanitizevalue airbrakeruby libairbrakerubyfiltersthreadfilterrb in block in fibervariables airbrakeruby libairbrakerubyfiltersthreadfilterrb in map airbrakeruby libairbrakerubyfiltersthreadfilterrb in withobject airbrakeruby libairbrakerubyfiltersthreadfilterrb in fibervariables airbrakeruby libairbrakerubyfiltersthreadfilterrb in call airbrakeruby libairbrakerubyfilterchainrb in block in refine airbrakeruby libairbrakerubyfilterchainrb in each airbrakeruby libairbrakerubyfilterchainrb in refine airbrakeruby libairbrakerubynotifierrb in sendnotice airbrakeruby libairbrakerubynotifierrb in notify airbrake libairbrakerackmiddlewarerb in notifyairbrake airbrake libairbrakerackmiddlewarerb in rescue in call airbrake libairbrakerackmiddlewarerb in call As you can see Airbrake is picking up the exception and it goes all the way down to here value passed to sanitize is the Cell that caused the exception and calling a tos on it makes a call on that cell here Now without that show method implemented on the cell it tries to load the template by the cell name and as it is also missing I get another CellTemplateMissingError exception raised within the Airbrake methods which prevents from reporting the original exception I have tried adding empty show method to my cell and it fixed the problem But is there any way to make the Airbrake and Cells play nicer Im not always using the default show action or view