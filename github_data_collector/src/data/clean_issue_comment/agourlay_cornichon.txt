The test for the Kafka DSL is really flaky which makes the whole projects build red I tried to understand the root issue but made not progress so far Starting scenario write and read arbitrary Strings tofrom topic Starting scenario use cornichon jsonAssertions on the message value failed write and read arbitrary Strings tofrom topic ms Scenario write and read arbitrary Strings tofrom topic failed at step When I reading the last messages from topiccornichon with errors Not enough messages polled expected at least but got seed for the run was replay only this scenario with the command testOnly KafkaExample write and read arbitrary Strings tofrom topic seed Scenario write and read arbitrary Strings tofrom topic main steps Given I put messageI am a plain string with keysuccess to topiccornichon ms When I reading the last messages from topiccornichon ms FAILED Not enough messages polled expected at least but got RandomContext is encapsulating a scalautilRandom which in turn contains javautilRandom Every time the RandomContext is used its internal are mutated under the cover This programming style does not fit at all with the current architecture of the library A couple of places rely on this mutation happening behind the scene which makes things more complicated to understand What we want instead a RandomContext instance is immutable the RandomContext API is referentially transparent RandomContext instances passed explicitly everywhere it is needed Are there any example of tests where events from an event stream are collected asynchronously For example Open stream make one or more api calls to related service terminate event collection provide collected events as part of scenario context For it would be great if we could terminate the stream in the following ways Immediately After a fixed amount of time After the collected items matches a matcher spec Please let us know if this has been discussed anywhere that we might reference If this is possible we might be able to help by creating examples around this for the docs If its not possible but you can envision a solution that fits well within the current framework please let us know and maybe we can help implement support around this Great stuff going on here Thanks for you contribution Actually the release of an ResourceStep is called at the end of the scenario It can make the release process complex if it needs some other information like a special OAuthToken Idea a ResourceStep can collect steps for example lets see I need an admin user that is deleted after the tests This admin user can create projects A scenario could be WithAdminUserroot WithProjectproject When I getprojects Then assert bodypathcountis WithProjectproject When I getprojects Then assert bodypathcountis project is deleted here When I getprojects Then assert bodypathcountis project is deleted here root is deleted here And maybe introduce a way to compose such ResourceStep together val GivenAdminUserAndProject WithAdminUserrootandThenWithProjectproject GivenAdminUserAndProject When I getprojects Then assert bodypathcountis project and root are deleted here This could replace beforeEachScenario and afterEachScenario As a user of test framework I need ability to tag specific scenariofeature So that I can only includeexclude specific scenariosfeatures to test run Acceptance Criteria Scenario A specify tags on scenario and feature level to include or exclude in the test run WHEN I run tests with an option to includeexclude given tags THEN only specified scenarios andor features are running As a test framework user I need to have integrated reporting system So that there is an overview on test run success and its details Acceptance criteria Scenario A test reports json html are created after a test run WHEN I run tests THEN json and html files are created as an output in a project folder AND there is a stack trace for failed tests This is a must for testing framework to generate test reports Im still using scalatest implementation of given framework and would love to change it to the most updated one but I miss reports generation Please review the possibility to integrate with such reporter as allure or any other reporter that proved its reliability on market Thank you When sending or receiving big payloads if the step fails then the output is really really long Maybe it should be a good idea depending on the of lines to cut the display of some assertions Integrating with Scalatest helped a lot at the beginning to bootstrap the library Currently the better way to use cornichon is through cornichontestframework It is more lightweight and offers more controls on the implementation side However it currently lacks a couple of features to be a complete replacement for cornichonscalatest The missing pieces a main runner to be able to run without SBT useful when tests are packaged and run separately generate HTML reports run tests from IDEA requires the creation of plugin I guess integration with other build tools Hi Would be awesome to have an ability to attach a file while calling certain endpoint Example scala Then assert bodypatherrors messageis Using different values is not valid for field color Given values are undefined red It would be nice to be able to have undefined not being resolved as a placeholder but used literally This could probably be done with either another implementation of is called eg isRaw or maybe more flexible by introducing a way to mark undefined in some way eg undefined which would tell is to not evaluate the occurrence and replace it by undefined