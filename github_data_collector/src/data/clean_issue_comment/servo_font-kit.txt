 Does fontkit support being built in Docker using the rustmuslbulider I am trying to produce a fully static binary to be used on an Alpine Linux image I am currently unable to get my application to build when I include fontkit as a dependency Any help you can offer would be greatly appreciated The executable seems to build but it seems to be dynamically linking against libfontconfig and libfreetype here is the output of ldd from the docker image usrlocalbin ldd optimusprime libld so x fe f Error loading shared library libfontconfigso No such file or directory needed by optimusprime Error loading shared library libfreetypeso No such file or directory needed by optimusprime Error relocating optimusprime FTInitFreeType symbol not found Error relocating optimusprime FcObjectSetCreate symbol not found Error relocating optimusprime FcPatternDestroy symbol not found Error relocating optimusprime FTSetCharSize symbol not found Error relocating optimusprime FcPatternGetInteger symbol not found Error relocating optimusprime FcPatternCreate symbol not found Error relocating optimusprime FcInitLoadConfigAndFonts symbol not found Error relocating optimusprime FcPatternAddString symbol not found Error relocating optimusprime FTDoneFace symbol not found Error relocating optimusprime FcObjectSetDestroy symbol not found Error relocating optimusprime FTNewMemoryFace symbol not found Error relocating optimusprime FcPatternGetString symbol not found Error relocating optimusprime FcObjectSetAdd symbol not found Error relocating optimusprime FcFontList symbol not found Error relocating optimusprime FcFontSetDestroy symbol not found pcwalton This is kind of an RFC In general Ive started to prefer pathfindergeometry over euclid because it supports SIMD even on stable Rust and it has less weird conventions column major everywhere But euclid is more commonly used in the ecosystem Currently building a game with amethystrs and any time I attempt to use the lld linker to speed up my iteration I get the following error trying to load fonts Messageunknown variant TTF there are no variants Loading no fonts explicitly and trying to fallback to the system default yields a spew of errors like the following before failing to load any fonts etcfontsfontsconf line invalid attribute translate A small bit of investigation revealed this may be due to the this package or a dependency using a bundled incompatible fontconfig instead of the systems See Title says it all Outlines are a must for readability against noisy backgrounds such as when drawing subtitles on top of video Combined with colors and gradients they also make for very easy fancy effects so theres that use case too As far as I know all the platformspecific APIs support stroking glyph outlines in addition to rendering filled glyphs In CSS the serif sansserif cursive fantasy and monospace keywords when used without quotes have a different meaning than other keywords which are spacejoined into a single string or quoted strings They are generic font families Currently Sourceselectfamilybygenericname allows looking up concrete font families from those keywords but it is dochidden with a FIXME comment about returning multiple families In the specification All five generic font families must always result in at least one matched font face for all CSS implementations However the generics may be composite faces with different typefaces based on such things as the Unicode range of the character the language of the containing element user preferences and system settings among others They are also not guaranteed to always be different from each other User agents may choose the generic font family to use based on the language of the containing element or the Unicode range of the character Based on other uses the spec appears to misuse character to mean Unicode code point But then When text contains characters such as combining marks there s specific handling based on grouping by grapheme cluster So perhaps Sourceselectfamilybygenericname should be unhidden but after some API change Would an input character perhaps a char code point or a str grapheme cluster be useful to any of the backends What about an optional language tag Servo would like to implement CSS on top of fontkit The spec relevant bits below Is very specific about caseinsensitive string comparison for font family names Requires accepting alternative localized family names of any given font Sourceselectfamilybyname looks like the appropriate API for looking up system fonts matching a given family name string Some research is needed to figure out whether the underlying APIs fontconfigCoreTextDirectWrite of the respective default Source for each supported platform behaves as CSS requires on these two points or if can be configured to do so An alternative could be to enumerate all available fonts and their family names and maintain a Rust hash map where keys are normalized with default case fold But I suspect this would have significant startup cost User agents must match these names case insensitively using the Default Caseless Matching algorithm outlined in the Unicode specification UNICODE This algorithm is detailed in section entitled Default Case Algorithms Specifically the algorithm must be applied without normalizing the strings involved and without applying any languagespecific tailorings The case folding method specified by this algorithm uses the case mappings with status field C or F in the CaseFoldingtxt file of the Unicode Character Database UNICODE Implementors should take care to verify that a given caseless string comparison implementation uses this precise algorithm and not assume that a given platform string matching routine follows it as many of these have localespecific behavior or use some level of string normalization UAX On systems containing fonts with multiple localized font family names user agents must match any of these names independent of the underlying system locale or platform API used Some font formats allow fonts to carry multiple localizations of the family name User agents must recognize and correctly match all of these names independent of the underlying platform localization system API used or document encoding img src There are font families like MS Shell Dlg which will not be resolved at the moment cargo run example matchfont MS Shell Dlg Error NotFound Im not sure if its possible to resolve them via winapi but they are defined here Computer HKEYLOCALMACHINE SOFTWARE Microsoft Windows NT CurrentVersion FontSubstitutes WebRender and Raqote dont need any of the font matchingsearching code so it would be nice to have a separate font rendering crate