This PR handles Allows users to resolve bug described in where downstream CacheProviders are populated with cache entries with infinite lifetime causing strange behavior never expiring cache entries Behaviour is unchanged by default Suggestions on how to test this are welcome The adapter added with this PR allows us to use Doctrine Cache as a PSR implementation This will allow us to decouple various Doctrine libraries from Doctrine cache SymfonyHackday Change MemecacheCache to MemcacheCache Notice apcufetch Error at offset of bytes In most modern code this gets converted to an ErrorException As this is a cache and a miss is handled discard the notice silently If the APCu read fails an ENOTICE is emitted most frameworks will handle errors by converting to ErrorException For a cache read fail this is overly drastic as it can be handled as a cache miss Therefore I propose silencing the apcufetch call PhpFileCache is slower in versions in comparison with v This is either missing file warning supression or data serialization Tested under high load conditions The memcache driver has been deprecated under the wrong assumption it is no longer supported on PHP x in The memcache driver is actively maintained on and they are actually working on releasing again on PECL Currently were using this driver on php and it works like a charm This is definitely not a bug but maybe a missing part in the docblockdocumentation I have just been putting in an hour trying to understand a weird behaviour Consider this langphp cache new Memcached cacheaddServerargs args are already defined elsewhere thiscache new MemcachedCache thiscachesetMemcachedcache consider recentlydeployed to reflect that I recently updated my app in production ifrecentlydeployed thiscacheflushAll echo Cache should be empty now PHPEOL echo thiscachecontainssettings Settings still in cache Settings flushed from cache The output was not at all what I expected Cache should be empty now Settings still in cache I now understand that flushAll seems to be an async function when using Memcached and I guess a new thread is started My question Should the docblock in mention that you cant rely on the cache being flushed after the execution of the function for certain implementations of FlushableCache or is this common knowledge The link in Readme file to documentation is broken Ive got a page when I go to 