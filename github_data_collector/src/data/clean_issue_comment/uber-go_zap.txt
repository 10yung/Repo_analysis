Adds an extra public method that returns Option generated from the Config Rationale our project uses zaps config but also performs additional manipulations on the generated options For that we need to access Options generated from the config However the current code layout doesnt allow that Hence a new intermediarybutpublic method Please suggest alternative solutions if this is not acceptable Weve had a few requests on how to change the level of a logger With the current APIs its not possible to reduce the log level eg go from Info to Debug but it is possible to increase the level using WrapCore with a custom filtering core Since its a common request I think we should add an option to make this easy to use I want to make sure increase is part of the API to avoid confusion on whether it can reduce the log level Fixes Id like to create a new subLogger which only logs messages at the WarnLevel instead of the InfoLevel which is desired for the rest of the application I read the other issues about doing so but they implied creating a new zapcore I do not want to create a new zapcore for my sublogger because my loggers core has hooks which should still be used for the sublogger So is there any way to create a sublogger which reuses my existent zapcore but only emits log messages at the WarnLevel go stripeLogger logger WithzapStringsource stripe WithOptionszapWrapCore Help stripeLogger zapNewStdLogstripeLogger This feature can be implemented outside of zap by using WrapCore to decorate a core The decorator can filter out entries similar to your provided snippet Since this should be possible without changing zap we likely wont build this into zap we hooked a custom a core but checkedEntryCaller is undefined then i check the zap code i found the caller is added after all core check log Logger checklvl zapcoreLevel msg string we can invoke runtimeCaller again in out custom corebut i think its not fine how do we solve it thank you below is my custom core check method Originally posted by wanghaoyu in i appreciate zapdesign very much and like to use the hook function we add a hook after error log print we will send the error entry to sentry liba error detect systembut we find we cant get error obj from entry because err obj is important for logger if can be added in the entry Similar to the atomic log level it would be really helpful if you could control the log output stream after the logger is created This is especially useful when building a client library that uses zap but end users might want to do some additional customization like setting log level and output paths add new Option HooksWithFields Its similar with Hooks but let hooks can access fields fully backward compatible A few people have expressed interest in having a TraceLevel added to Zap Some mention of this in and again in This PR addresses that interest by introducing this logging level When logging a zero initialized timeTime struct the output is not consistent go zapLWithtime timeTimeDebugzero time Will output the time T Z because calling UnixNano then Unix nsec is not symetric in this case The correct output would be UTC with the same layout as above see that exhibit the issue Looking at zapTime I was wondering why you dont pass the Time struct in the Interface field instead of converting to an integer Maybe this is to avoid making a new reference to traverse for the GC Hi Im Yevgeny Pats Founder of Fuzzit Continuous fuzzing as a service platform We have a free plan for OSS and I would be happy to contribute a PR if thats interesting The PR will include the following gofuzz fuzzers This is generic step notconnected to fuzzit Continuous Fuzzing of master branch which will generate new corpus and look for new crashes Regression on every PR that will run the fuzzers through all the generated corpus and fixed crashes from previous step This will prevent new or old bugs from crippling into master You can see our basic example fuzzitdevexamplego and you can see an example of in the wild integration googlesyzkaller Let me know if this is something worth working on Cheers Yevgeny 