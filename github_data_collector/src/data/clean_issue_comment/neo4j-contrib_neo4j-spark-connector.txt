 import orgneo jspark neo orgneo jsparkNeo j orgneo jsparkNeo j f b beat String Seq String BeatListbeat onbeat String Seq Nothing ONBEATList crime String Seq String CrimeListid description casenumber point crimeType String Seq String CrimeTypeListprimarytype istype String Seq Nothing ISTYPEList crimesDates String Seq String CrimeDateListparseddate date ondate String Seq Nothing ONDATEList orgapachesparkSparkException Job aborted due to stage failure Task in stage failed times most recent failure Lost task in stage TID localhost executor driver orgneo jdriverv exceptionsClientException The server does not support any of the protocol versions supported by this driver Ensure that you are using driver and server versions that are compatible with one another at orgneo jdriverinternalasyncHandshakeHandlerprotocolNoSupportedByServerErrorHandshakeHandlerjava at orgneo jdriverinternalasyncHandshakeHandlerdecodeHandshakeHandlerjava at orgneo jdriverinternalshadedionettyhandlercodecByteToMessageDecoderdecodeRemovalReentryProtectionByteToMessageDecoderjava at orgneo jdriverinternalshadedionettyhandlercodecReplayingDecodercallDecodeReplayingDecoderjava at orgneo jdriverinternalshadedionettyhandlercodecByteToMessageDecoderchannelReadByteToMessageDecoderjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextfireChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettyhandlertimeoutIdleStateHandlerchannelReadIdleStateHandlerjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextfireChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelDefaultChannelPipelineHeadContextchannelReadDefaultChannelPipelinejava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelDefaultChannelPipelinefireChannelReadDefaultChannelPipelinejava at orgneo jdriverinternalshadedionettychannelnioAbstractNioByteChannelNioByteUnsafereadAbstractNioByteChanneljava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeyNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeysOptimizedNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeysNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLooprunNioEventLoopjava at orgneo jdriverinternalshadedionettyutilconcurrentSingleThreadEventExecutor runSingleThreadEventExecutorjava at orgneo jdriverinternalshadedionettyutilconcurrentFastThreadLocalRunnablerunFastThreadLocalRunnablejava at javalangThreadrunThreadjava Driver stacktrace at orgapachesparkschedulerDAGSchedulerorgapachesparkschedulerDAGSchedulerfailJobAndIndependentStagesDAGSchedulerscala at orgapachesparkschedulerDAGScheduleranonfunabortStage applyDAGSchedulerscala at orgapachesparkschedulerDAGScheduleranonfunabortStage applyDAGSchedulerscala at scalacollectionmutableResizableArrayclassforeachResizableArrayscala at scalacollectionmutableArrayBufferforeachArrayBufferscala at orgapachesparkschedulerDAGSchedulerabortStageDAGSchedulerscala at orgapachesparkschedulerDAGScheduleranonfunhandleTaskSetFailed applyDAGSchedulerscala at orgapachesparkschedulerDAGScheduleranonfunhandleTaskSetFailed applyDAGSchedulerscala at scalaOptionforeachOptionscala at orgapachesparkschedulerDAGSchedulerhandleTaskSetFailedDAGSchedulerscala at orgapachesparkschedulerDAGSchedulerEventProcessLoopdoOnReceiveDAGSchedulerscala at orgapachesparkschedulerDAGSchedulerEventProcessLooponReceiveDAGSchedulerscala at orgapachesparkschedulerDAGSchedulerEventProcessLooponReceiveDAGSchedulerscala at orgapachesparkutilEventLoopanon runEventLoopscala at orgapachesparkschedulerDAGSchedulerrunJobDAGSchedulerscala at orgapachesparkSparkContextrunJobSparkContextscala at orgapachesparkSparkContextrunJobSparkContextscala at orgapachesparkSparkContextrunJobSparkContextscala at orgapachesparkSparkContextrunJobSparkContextscala at orgapachesparkrddRDDanonfunforeachPartition applyRDDscala at orgapachesparkrddRDDanonfunforeachPartition applyRDDscala at orgapachesparkrddRDDOperationScopewithScopeRDDOperationScopescala at orgapachesparkrddRDDOperationScopewithScopeRDDOperationScopescala at orgapachesparkrddRDDwithScopeRDDscala at orgapachesparkrddRDDforeachPartitionRDDscala at orgapachesparksqlDatasetanonfunforeachPartition applymcVspDatasetscala at orgapachesparksqlDatasetanonfunforeachPartition applyDatasetscala at orgapachesparksqlDatasetanonfunforeachPartition applyDatasetscala at orgapachesparksqlDatasetanonfunwithNewRDDExecutionId applyDatasetscala at orgapachesparksqlexecutionSQLExecutionwithNewExecutionIdSQLExecutionscala at orgapachesparksqlDatasetwithNewRDDExecutionIdDatasetscala at orgapachesparksqlDatasetforeachPartitionDatasetscala at orgneo jsparkNeo jDataFramemergeEdgeListNeo jDataFramescala elided Caused by orgneo jdriverv exceptionsClientException The server does not support any of the protocol versions supported by this driver Ensure that you are using driver and server versions that are compatible with one another at orgneo jdriverinternalasyncHandshakeHandlerprotocolNoSupportedByServerErrorHandshakeHandlerjava at orgneo jdriverinternalasyncHandshakeHandlerdecodeHandshakeHandlerjava at orgneo jdriverinternalshadedionettyhandlercodecByteToMessageDecoderdecodeRemovalReentryProtectionByteToMessageDecoderjava at orgneo jdriverinternalshadedionettyhandlercodecReplayingDecodercallDecodeReplayingDecoderjava at orgneo jdriverinternalshadedionettyhandlercodecByteToMessageDecoderchannelReadByteToMessageDecoderjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextfireChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettyhandlertimeoutIdleStateHandlerchannelReadIdleStateHandlerjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextfireChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelDefaultChannelPipelineHeadContextchannelReadDefaultChannelPipelinejava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelAbstractChannelHandlerContextinvokeChannelReadAbstractChannelHandlerContextjava at orgneo jdriverinternalshadedionettychannelDefaultChannelPipelinefireChannelReadDefaultChannelPipelinejava at orgneo jdriverinternalshadedionettychannelnioAbstractNioByteChannelNioByteUnsafereadAbstractNioByteChanneljava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeyNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeysOptimizedNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLoopprocessSelectedKeysNioEventLoopjava at orgneo jdriverinternalshadedionettychannelnioNioEventLooprunNioEventLoopjava at orgneo jdriverinternalshadedionettyutilconcurrentSingleThreadEventExecutor runSingleThreadEventExecutorjava at orgneo jdriverinternalshadedionettyutilconcurrentFastThreadLocalRunnablerunFastThreadLocalRunnablejava Hi Ive been doing a lot of work on a fork of this library for use at my workplace It adds in support for a python interface however this interface changes the scala library API significantly Would it be considered to merge this into a major release Or are the changes to the interface too drastic When changing complex properties such as arrays on a nodeproperty Neo j cant convert the Scala type WrappedArray etc to Neo j Value To Reproduce import orgapachesparksqltypes import orgneo jsparkdataframe val rows scmakeRDDSeqRowMCASHOUTVERIFICATIONSUBMIT MLOGINSUCCESS SeqMCASHOUTVERIFICATIONSUBMIT MLOGINSUCCESS a val schema StructTypeSeq StructFieldsrcname StringType StructFielddstname StringType StructFieldcount IntegerType StructFieldsupport DoubleType StructFieldpath ArrayTypeStringType val df sqlContextcreateDataFramerows schema val rename Mapsrcname name dstname name Neo jDataFramemergeEdgeListsc df ACTION Seqsrcname Path Seqpath count support ACTION Seqdstname rename My neo j conf have dbmsconnectorbolttlslevelREQUIRED but when use Neo jsc have error orgneo jdriverv exceptionsServiceUnava ilableException Connection to the database terminated This can happen due to n etwork instabilities or due to restarts of the database How can I use encrypted client connections with neo jsparkconnector Problem I have an RDDDataFrameDataset representing a Graph and I want to persist it in Neo J efficiently I read somewhere that this connector should suit my needs my Im not sure that is actually the case Or perhaps Im missing something Anyway this connector is based on the neo jjavadriver Following the examples it all happens in the Neo jDataFrame class if Im not mistaken First cause of concern in both createNodes and mergeEdgeList there is a dataFramecount followed by a dataFrameforeachPartition Both are actions and there is no cache of the dataFrame As it is that should trigger the the computation of the same dataframe from the beginning twice Second cause of concern in the dataFrameforeachPartition you basically create a Neo J driver get a session from it and then close both for each record in the dataframe if I read it correctly that is what the execute method does Hence the second cause of concern accordingly to the Neo J documentation a driver is a quite expensive resource to obtain as opposed to a session with is cheap and expendable Also I might be wrong but I dont think a transaction can span over a session so I cant see the benefit of running all that within a transactional context when you open and close the session for each record in the Dataframe Could you please throw some light on the above points Am I missing something pretty obvious Move the current business logic into the Spark DataSource API We should consider with this refactoring if we could start directly with DataSource API V supported from Spark The old datasource api should be removed in spark so the last version is futureproof as an option to avoid the boltdriver creation issue as a bolt driver with pool is not serializable might be much cheaper with http cypher endpoint perhaps even utilize jdbc eg write and read bn nodes and rels to from Neo j 