Original commit message coverage Fix coverage with default arguments In the presence of default arguments the body of the function gets wrapped into another block This caused our trailingrangeafterreturn optimization to not apply because the wrapper block had no source range assigned This CL correctly assignes a source range to that block which allows already present code to handle it correctly Note that this is not a real coverage bug weve just been reporting whitespace as uncovered Were fixing it for consistency Originally reported on githubcombcoec issues Bug v ChangeId Iab f eb e dad d d a fdcd Reviewedon CommitQueue Sigurd Schneider sigurdschromiumorg Reviewedby Toon Verwaest verwaestchromiumorg Reviewedby Jakob Gruber jgruberchromiumorg CrCommitPosition refsheadsmaster Refs PRURL ReviewedBy Micha l Zasso targosprotonmailcom ReviewedBy Colin Ihrig cjihriggmailcom ReviewedBy Jiawen Geng technicalcutegmailcom ReviewedBy Rich Trott rtrottgmailcom Thank you for your pull request Please provide a description above and review the requirements below Bug fixes and new features should include tests and possibly benchmarks Contributors guide Checklist Remove items that do not apply For completed items change to x make j test UNIX or vcbuild test Windows passes x tests andor benchmarks are included x documentation is changed or added x commit message follows commit guidelines Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved Thank you for your pull request Please provide a description above and review the requirements below Bug fixes and new features should include tests and possibly benchmarks Contributors guide NodeJS should allow C users to create contexts whose compiled script can be debugged through the inspector agent Currently this functionality is only available for JavaScript modules through VM module Unfortunately VM creates a context whose global is completely new and hidden v FunctionTemplate C users might already have v FunctionTemplate or v ObjectTemplate from which they create a context The only option now is to call V API directly v ContextNew The created context is not associated with any nodeEnvironment and code executed in that context cannot be debugged in the inspector agent the context is missing debugcontextid as this is provided when the agent is notified by ContextCreated This might actually be an intended behavior The nodeNewContext also create a context and do not report it to any agent agent is a part of nodeEnvironment and nodeNewContext does not access any environments This is a proposal of a new feature to allow mitigate that gap It provides another form of nodeNewContext where nodeEnvironment is accepted as the first parameter instead of v Isolate When such an environment is available it will create a context with a specific v ObjectTemplate and then call v EnvironmentAssignToContext The latter will report the newly created context to the environments inspector agent if one is available and add some embedders properties to allow proper handling of stack traces Without this feature C modules can create v Context and use v ScriptCompiler to compile functions and scripts Those scripts are not reported to the inspector agent and functions has FunctionLocation internal slot set to unknown even when v Source specify resource name line and column offset etc If a context is reported to the inspector agent it receives a debugcontextid If this is available compilation of new scripts and functions in that context will report to the inspector agent which will send the source to the inspector frontend Furthermore the environment that has setup PrepareStackTraceCallback calls for EnvironmentGetCurrentcontext If an exception occurs into a context not assigned to environment stack trace would be ignored even when it is available This feature can be implemented using the following principles Additive do not change any behavior and code of existing NodeJS implementation Minimal do not add large amount of new code Efficient does not require additional variables objects etc to be stored into memory does not require additional processing when the feature is not used Useful it allows access to huge amount of V API C addons can use that API now but with a limitation towards debugging and stack trace generation Checklist Remove items that do not apply For completed items change to x x make j test UNIX or vcbuild test Windows passes tests andor benchmarks are included documentation is changed or added x commit message follows commit guidelines Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved At commit cc f b b d a db a js import Worker isMainThread from workerthreads if isMainThread new Workerfilename else await new Promiser rconsolelog With harmonytoplevelawait node harmonytoplevelawait tmjs node ExperimentalWarning The ESM module loader is experimental internalmodulesesmloaderjs return modulegetNamespace Error cannot get namespace Module has not been instantiated at Loaderimport internalmodulesesmloaderjs Without node tmjs node ExperimentalWarning The ESM module loader is experimental filehomebnoordhuissrcmastertmjs await new Promiser rconsolelog SyntaxError Unexpected reserved word at LoadermoduleStrategy internalmodulesesmtranslatorsjs at async link internalmodulesesmmodulejobjs For comparison plain TLA works with the flag cat tmjs await new Promiser rconsolelog node harmonytoplevelawait tmjs node ExperimentalWarning The ESM module loader is experimental Is your feature request related to a problem Please describe Developer tools may run user code in a child process When invoked in in a terminal processstdout and processstderr will be TTY streams This will not be the case in the child process Describe the solution youd like Itd be great if the developer tool could force TTY to be available in the child process Describe alternatives youve considered Ive tried faking TTY support in the child processes This is somewhat doable but breaks when Nodejs adds new features With AVA weve now removed this behavior hoping for somebody to provide the functionality in a separately loadable package Itd be much better if we could make Nodejs provide its own implementation Previously due to compat reasons close was only emitted if no error This removes the compat behavior in order to properly follow expected streams behavior Not sure why this compat behavior has remained for so long but I believe it should be possible to make fs stream consistent with normal streams in a semvermajor Thank you for your pull request Please provide a description above and review the requirements below Bug fixes and new features should include tests and possibly benchmarks Contributors guide Checklist Remove items that do not apply For completed items change to x x make j test UNIX or vcbuild test Windows passes x tests andor benchmarks are included x documentation is changed or added x commit message follows commit guidelines Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved It would be cool if we would offer a way to let endusers run the benchmarks complet and submit results with some added data so we can compare the results against diffrent cpu and other metrics Change the type of BufferkMaxLength to sizet because upcoming changes in V will allow typed arrays GB on bits platforms Not all platforms handle file reads and writes GB though so keep enforcing the GB typed array limit for IO operations Fixes Refs This test provides missing coverage for wasipathsymlink and wasipathreadlink Checklist x make j test UNIX or vcbuild test Windows passes x tests andor benchmarks are included x commit message follows commit guidelines Thank you for your pull request Please provide a description above and review the requirements below Bug fixes and new features should include tests and possibly benchmarks Contributors guide Checklist Remove items that do not apply For completed items change to x X make j test UNIX or vcbuild test Windows passes tests andor benchmarks are included X documentation is changed or added X commit message follows commit guidelines Developers Certificate of Origin By making a contribution to this project I certify that a The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file or b The contribution is based upon previous work that to the best of my knowledge is covered under an appropriate open source license and I have the right under that license to submit that work with modifications whether created in whole or in part by me under the same open source license unless I am permitted to submit under a different license as indicated in the file or c The contribution was provided directly to me by some other person who certified a b or c and I have not modified it d I understand and agree that this project and the contribution are public and that a record of the contribution including all personal information I submit with it including my signoff is maintained indefinitely and may be redistributed consistent with this project or the open source licenses involved This makes all the parameters of the fsread function except for fd and the callbackwhen not using as a promise optional fixes I still need to add a few testsive done some manual testing but wanted to get this out to start the discussion There is one part which ive commented in the code where i did something to satisfy the linting but i wasnt thrilled with it Maybe having a lint exception here might be better Looking for input on that Im not a typescript user but i wonder if changing the function signature will somehow have a negative effect finish can be emitted after close if destroy is called inside aprefinish handler prefinish has different timing sync vs async depending on whether Writable implements final which can cause problems such as above to occur or not occur I assume prefinish is mostly used internally so its probably not a huge issue