 Bug When alias is specified on a field for a class where aliasgenerator is also defined alias is respected for that class but not any derived classes Output of python c import pydanticutils printpydanticutilsversioninfo python pydantic version pydantic compiled False install path snipsitepackagespydantic python version default Dec Clang clang platform Darwin x i bit optional deps installed typingextensions emailvalidator Example code python from pydantic import BaseModel Field class MyBaseModelBaseModel class Config aliasgenerator lambda x xupper class MyModelMyBaseModel myattribute bool Field aliasmyATTRIBUTE class MyOtherModelMyModel pass Examples py MyModel Traceback most recent call last File stdin line in module File snipsitepackagespydanticmainpy line in init raise validationerror pydanticerrorwrappersValidationError validation error for MyModel myATTRIBUTE field required typevalueerrormissing MyOtherModel Traceback most recent call last File stdin line in module File snipsitepackagespydanticmainpy line in init raise validationerror pydanticerrorwrappersValidationError validation error for MyOtherModel MYATTRIBUTE field required typevalueerrormissing Notice that MyModel requires myATTRIBUTE as expected but MyOtherModel requires MYATTRIBUTE which is from the aliasgenerator console python c import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled False install path Usersandrewvirtualenvsprojectnamelibpython sitepackagespydantic python version default Oct Clang clang platform Darwin x i bit optional deps installed devtools Feature Request Thanks for a great library and for taking the time to read this When pydantic raises validation errors about settings it would be nice if it would include the settings prefix if specified Lets assume a basic set of settings where variables are meant to be specified in the process environment py from pydantic import BaseSettings class SettingsBaseSettings Define basic settings to be overridden by the environment varname str class Config envprefix appprefix If this class is instantiated with no changes to the environment a Python traceback is printed with the following at the end varname field required typevalueerrormissing The actual Validation object appears to be py ValidationError modelSettings errors loc varname msg field required type valueerrormissing It would be nice if instead of specifying only the variable name it also included the envprefix What is most helpful is something like ERROR Set Environment Variable APPPREFIXVARNAME To print a nicer error message I am currently doing the following python from colorama import Fore Style from pydanticerrorwrappers import ValidationError from config import Settings def main try settings Settings except ValidationError as e prefix SettingsConfigenvprefix for error in eerrors if error type valueerrormissing for var in error loc envvar fprefixvarupper message fERROR Set Environment Variable envvar printForeRED message StyleRESETALL else printfForeREDerrorStyleRESETALL exit if name main main Change Summary Luhn algorithm was not complete An important step of this algorithm was missing This PR would solve the problem described in the issue linked below Luhn Algorithm is not working as expected Related issue number Checklist Unit tests for the changes exist Tests pass on CI and coverage remains at Documentation reflects the changes where applicable changes cuencandresmd file added describing change see changesREADMEmd for details Bug Output of python c import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled False install path UsersandreshernandezDesktopgitpydanticpydantic python version default Nov Clang clang platform Darwin x i bit optional deps installed typingextensions emailvalidator devtools py from pydantictypes import PaymentCardNumber cardnumber luhn valid PaymentCardNumbercardnumbervalidateluhncheckdigitcardnumber Throws a LuhnValidationError Traceback most recent call last File stdin line in module File usrlocallibpython sitepackagespydantictypespy line in validateluhncheckdigit raise errorsLuhnValidationError pydanticerrorsLuhnValidationError card number is not luhn valid Bug Output of python c import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled False install path Userslutzpyenvversions envsfastapipy libpython sitepackagespydantic python version default Jan Clang clang platform macOS x i bit optional deps installed typingextensions or if youre using pydantic prior to v manually include OS python version and pydantic version Please read the docs and search through issues to confirm your bug hasnt already been reported Where possible please include a selfcontained code snippet describing your bug According to the OPENAPI Specification and JSON Schema Validation the value of exclusiveMinimum and exclusiveMinimum should be a boolean instead of a number and the minimum and maximum field should be set to represent the lowerupper limit Question Hi I wonder if the behavior below results from a bug or me missing a point A clarification would be appreciated Thanks Output of python c import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled False install path miniconda libpython sitepackagespydantic python version packaged by condaforge default Nov Clang tagsRELEASE final platform macOS x i bit optional deps installed Customize pydantic BaseConfig and define arbitrary class Test py from pydantic import BaseModel validator Field BaseConfig from typing import Union Type BaseConfigarbitrarytypesallowed True class Test pass Defining class A without validator works class ABaseModel view Union Type Test str Test Defining class A with a validator fails class ABaseModel view Union Type Test str Test validatorview def validatecls v return v With the following error ConfigError Traceback most recent call last ipythoninput c cde in module class ABaseModel view Union Type Test str Test validatorview miniconda libpython sitepackagespydanticmainpy in newmcs name bases namespace kwargs if customroottype validatecustomroottypefields vgcheckforunused if configjsonencoders jsonencoder partialcustompydanticencoder configjsonencoders miniconda libpython sitepackagespydanticclassvalidatorspy in checkforunusedself if unusedvalidators fn joinunusedvalidators raise ConfigError fValidators defined with incorrect fields fn noqa Q fuse checkfieldsFalse if youre inheriting from the model and intended this ConfigError Validators defined with incorrect fields validate use checkfieldsFalse if youre inheriting from the model and intended this Setting the default value to FieldTest avoids the ConfigError class ABaseModel view Union Type Test str FieldTest validatorview def validatecls v return v Possible Bug Validator seems to ignore the always parameter on inheritance since pydantic I had a running code that uses inheritance on the models with an enforced field that is used to decide if other optional fields will be checked or not This worked well until I updated to pydantic Further testing shows that the code fails since pydantic So there seem to be some changes from to that leads to this issue Unfortunately I could not find a previous issue or documentation hint that explains this deviating behavior to me If I missed something in the doc please give me a hint and excuse my issue Otherwise I would be thankful if someone could fix this or explain how the intended behavior can be achieved on pydantic Please find an example code and corresponding output below Output of python c import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled False install path pythonpydanticni Wh vY Lib sitepackages pydantic python version tagsv c b a Dec MSC v bit AMD platform Windows SP optional deps installed Here is an example code to reproduce this issue and below that the corresponding output on pydantic and py import typing import pydantic class ApydanticBaseModel mustvalidate bool class Config extra pydanticExtraignore class BpydanticBaseModel valuea typingOptional str None valueb typingOptional str None class Config extra pydanticExtraignore class CB A pydanticvalidatorvaluea valueb alwaysTrue def validateifenforcedcls value values if mustvalidate in values and values mustvalidate if not value raise ValueErrormust be set if mustvalidate is True return value class Config extra pydanticExtraforbid if name main successdata mustvalidate True valuea foo valueb bar faildata mustvalidate True valuea foo try success Cparseobjsuccessdata printsuccessdict fail Cparseobjfaildata printfaildict except pydanticValidationError as exc printexc Output on pydantic This is the intended behavior mustvalidate True valuea foo valueb bar validation error for C valueb must be set if mustvalidate is True typevalueerror Output on pydantic mustvalidate True valuea foo valueb bar mustvalidate True valuea foo valueb None Thank you for your contribution Unless your change is trivial please create an issue to discuss the change before creating a PR See for help on Contributing Change Summary In pydanticfieldspyModelFieldtypeanalysis where the fieldshape field get assign depending on the field type getattrselftype origin None is returning None so the function is getting returned from there without assigning the value to fieldshape variable So I added a check which checks if the origin is None then it checks if the selftype is a native sequence type and based on that it set the value of selfshape Related issue number Fix Checklist x Added Check for Checking if type is a native sequence and set field value based on that Bug Im able to reproduce the bug only when using a container not on the host computer I tested various python x versions official python images all had the same issue Output of python c import pydanticutils printpydanticutilsversioninfo import pydanticutils printpydanticutilsversioninfo pydantic version pydantic compiled True install path usrlocallibpython sitepackagespydantic python version default Oct GCC platform Linux linuxkitx withdebian optional deps installed Where possible please include a selfcontained code snippet describing your bug py import orjson from pydantic import BaseModel class DynamicContextBaseModel lala int class Config jsonloads orjsonloads jsondumps orjsondumps DynamicContextlala json Will raise Traceback most recent call last File stdin line in module File pydanticmainpy line in pydanticmainBaseModeljson TypeError Expected unicode got bytes Thank you for your contribution Unless your change is trivial please create an issue to discuss the change before creating a PR See for help on Contributing Change Summary This is a draft for adding the loc to validators as a parameter That change alone was fairly straight forward but made me realize that that it wasnt enough to actually achieve the goal of knowing the nested loc before flattening errors The issue is that nested modles get instantiated via the BaseModel init method which accepts no loc as essentially all parameters there are considered fields for validation My solution was to create a new classmethod for construction that simply accepts the data and loc information which is then used by both the init method and the validator to construct the model This PR should be seen as a basis for discussion if this is even something samuelcolvin is willing to pursue further If the answer is yes the complete impact needs to be assessed and further TODOs defined to make this a clean and robust change without any breaking changes and minimal to no performance impact So far it is incomplete not optimized and tests have not been updated Related issue number Are there any issues opened that will be resolved by merging this change Checklist Unit tests for the changes exist Tests pass on CI and coverage remains at Documentation reflects the changes where applicable changespull request or issue idgithub usernamemd file added describing change see changesREADMEmd for details 