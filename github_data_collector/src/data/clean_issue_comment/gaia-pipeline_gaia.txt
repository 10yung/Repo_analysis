We should probably release a new version Last release was Feb Its not just good practise it helps keep interested parties following the projectprogress via Watch Releases Going through the documentation examples and the Go SDK I assume the other language SDKs are the same It doesnt seem possible to have a job compute and return some output which you may use as input into the next jobs in your pipeline The only thing a Job can do is take some input Arguments and return an error I assume the design calls for inputs to be known up front What if I need some inputs to a Job in my pipeline whose values are dependent on a previous job This doesnt seem possible right now Is this by design Does this add considerable complexity to something like Gaia In a normal gRPCProtobuf service oriented architecture which Gaia is loosely based around but behaves more like serverless faas you would expect to be able to return some output from your services endpointsfunctionsetc Thoughts Closes Use base encoded pipeline name for virtual env creation as it fails with non ascii chars Refer to issue for more information Steps to reproduce Create new pipeline For Repo use the example repo For Pipeline name give test Output Pipeline creation fails Expected Output Pipeline should be created successfully The source of the issue can be traced to creation of the virtual environment This is a known issue with virtualenv The pipeline also fails with the name that contains followed by one or more characters example testpython We currently check if a pipeline binary needs to be rebuilt again on the worker when an exception is thrown which contains exec format error We need to make sure that this error message is thrown for every supported programming language The python SDK is currently optimized for python which will be not longer supported by We need to upgrade the SDK to support python In all the source code there are a lot of places where pointers are not needed or are declared all over the place When we first create a struct we dont know its memory address so using pointer semantic is pointless pun intended D Something like this go mW mockWhatever These things are confusing and are hard to read This means you will have a cognitive load whenever you see this variable passed around because you have to remember that it will be an address Instead the adds readability Which means it should be used at places where it denotes sharing Like on a return go mW Whatever return mW This is now easy to read you can see that it will return an address Where as this go mW Whatever Long method return mW Here you have to remember that you returned an address after reading a line long method which was doing stuff all over the place Use when its needed And make sure a pointer exists because it need to be a pointer and not for the convenient way of checking for nil upon a db lookup We should use the ok pattern for that Hi I read through the documentation for this feature but couldnt see any support for it but i think it would be useful to have some kind of support for repositories configurations on startup without using the UI When using the docker image it is a somewhat common use case to deploy and then tear down configurations resulting in having to redefine all the repositories containing pipelines manually such as the url language of pipeline etc Having this in a config file and mounting it would be really helpful in this respect 