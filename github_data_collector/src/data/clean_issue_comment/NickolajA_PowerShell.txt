Hello there making use of your great Modern Driver and BIOS Management utilities quite extensively I have a Dell that has the following BIOS flash utility O A exe and no other files Will try and have a look at script myself tomorrow I have Windows LTSB Build installed on a Dell Latitude E When I run InvokeCMApplyDriverPackageps on this machine the packages are detected and downloaded from SCCM however the invocation of pnputil does not work as the command line parameters are different than on newer Windows builds Microsoft PnP Utility Usage pnputilexe f i a d e INF name Examples pnputilexe a a usbcam USBCAMINF Add package specified by USBCAMINF pnputilexe a c drivers inf Add all packages in c drivers pnputilexe i a a usbcam USBCAMINF Add and install driver package pnputilexe e Enumerate all rd party packages pnputilexe d oem inf Delete package oem inf pnputilexe f d oem inf Force delete package oem inf pnputilexe This usage screen In InvokeCMDownloadDriverPackageps when queryingOSImageVersion can sometimes return a build version with a revision such as when comparing with the package in SCCM it will not match and therefore not find the package Please consider having Virtual machine models return in InvokeCMDownloadDriverPackageps Since no drivers are needed it would be nice for the TS to continue when testing the TS in a virtual environment if ComputerSystemType notin Virtual Machine VMware Virtual Platform VirtualBox HVM domU KVM else WriteCMLogEntry Value Virtual machine model No drivers required Severity exit Was looking at the logs and noticed that here in Arizona this happens GetWmiObject Class Win TimeZone SelectObject ExpandProperty Bias Gives us A negative value added to the end of the Time string can not be parsed by the Cmtrace tool so on line I added an Absolute Value Function to the result Time join GetDate Format HHmmssfff math absGetWmiObject Class Win TimeZone SelectObject ExpandProperty Bias I have no idea if this is the right thing to do I just know its the quick fix I had to put in place Im sure you have a better answer Thank you for writing this script Ive been using it for a while now but for some reason a new behavior is present that confuses me TSPackageID TSEnvironmentValueSMSTSPackageID OSImageVersion WebServiceGetCMOSImageVersionForTaskSequenceSecretKey TSPackageID returns Retrieved OS Image version from web service then when it enters the switch for OSName it always returns Determined OS name from version Windows This is not accurate as a Windows image has been applied This triggers Package does not meet computer model and manufacturer criteria Drivers Lenovo X Windows x Empty driver package list detected bailing out Any thoughts in what may cause this to always flag Windows 