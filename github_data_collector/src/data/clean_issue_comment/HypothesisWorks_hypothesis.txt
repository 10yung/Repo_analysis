Hello Some time ago I created an issue and recently got back to the investigations regarding the cause of the observed behavior A took this case oneofnone none booleans That was generating examples while there are only possible cases None True False I found this code in OneOfStrategy that should remove duplicates I assume pruned seen set for s in strategies if s is self continue if s in seen continue seenadds prunedappends But if s in seen doesnt work for stnone In seen set In seenaddstnone In seenaddstnone In seen Out none none And for just which is used in none I assume that just strategy instances can be deduplicated at least in some cases for justNone for example What do you think Could you please share some information about this behavior Ive recently published a hypothesisgeometry package for generating geometric objects like concaveconvex planar contours and I guess it can be helpful to the community what should I do to add it to External Strategies docs section Also as a maintainer of hypothesissqlalchemy package I think it will make given list more consistent if we rename it there to hypothesissqlalchemy I use Hypothesis with great enthusiasm However I have issues with its code completion A minimal environment could be created via bash conda create name testenv python hypothesis jedi mypy A test python file would be python testpy from hypothesis import strategies as st n stintegersmin Using mypy detects erroneous usage bash mypy testpy testpy error Unexpected keyword argument min for integers Found error in file checked source file However jedivim is not able to pick up the definitions Thus neither code completion nor displaying the doc string do work On the other hand PyCharm manages to to so On tweak I tried out was to adapt the python path bash export PYTHONPATHexport PYTHONPATHHOMEminiconda envstestenvlibpython sitepackagesPYTHONPATH This gives completion for stintege but still no docstring detection and still no argument completion Other packages eg requests work flawlessly I would be very glad if I hypothesis would support the IDElike setup that is common to many Vim users Fixes This is designed to prevent problems like in I tried to to add a CI job for Python but it turns out that tox doesnt support patch versions and so I thought the best option was to explicitly drop and and get ahead of the cleanups Were not the only project to be thinking about this eg theres and Ubuntu has shipped Python since their and PyPI stats show low usage much lower than of which we think only a small portion will be affected Ive gotten fromtypeSet Hashable to reliably fail during generation It seems that Hashable generates Decimal objects which is fine However hypothesis fails when trying to hash signaling NaNs Im not too familiar with the inner workings of strategy generation but I think it would be reasonable to turn off signaling NaNs in composite strategies whenever they might need to be hashed sets frozensets the keys of dictionaries etc Heres a minimal example py Python default Sep Clang clang on darwin Type help copyright credits or license for more information import hypothesis hypothesisversion from hypothesisstrategies import decimals sets s setsdecimals sexample DecimalNaN Decimal Decimal DecimalInfinity Decimal sexample Traceback most recent call last File stdin line in module File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in example examplegeneratinginnerfunction File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in examplegeneratinginnerfunction settings File usrlocallibpython sitepackageshypothesiscorepy line in wrappedtest raise theerrorhypothesisfound File usrlocallibpython sitepackageshypothesiscorepy line in wrappedtest staterunengine File usrlocallibpython sitepackageshypothesiscorepy line in runengine runnerrun File usrlocallibpython sitepackageshypothesisinternalconjectureenginepy line in run selfrun File usrlocallibpython sitepackageshypothesisinternalconjectureenginepy line in run selfgeneratenewexamples File usrlocallibpython sitepackageshypothesisinternalconjectureenginepy line in generatenewexamples selftestfunctiondata File usrlocallibpython sitepackageshypothesisinternalconjectureenginepy line in testfunction selfstoppabletestfunctiondata File usrlocallibpython sitepackageshypothesisinternalconjectureenginepy line in stoppabletestfunction selftestfunctiondata File usrlocallibpython sitepackageshypothesiscorepy line in executeonceforengine escalatehypothesisinternalerror File usrlocallibpython sitepackageshypothesiscorepy line in executeonceforengine result selfexecuteoncedata File usrlocallibpython sitepackageshypothesiscorepy line in executeonce result selftestrunnerdata run File usrlocallibpython sitepackageshypothesisexecutorspy line in defaultnewstyleexecutor return functiondata File usrlocallibpython sitepackageshypothesiscorepy line in run args kwargs datadrawselfsearchstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in dodraw return tupledatadrawe for e in selfelementstrategies File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in genexpr return tupledatadrawe for e in selfelementstrategies File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in dodraw result selfpackdatadrawselfmappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternallazypy line in dodraw return datadrawselfwrappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in dodraw result selfpackdatadrawselfmappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in dodraw return tupledatadrawe for e in selfelementstrategies File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in genexpr return tupledatadrawe for e in selfelementstrategies File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternallazypy line in dodraw return datadrawselfwrappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in dodraw result selfpackdatadrawselfmappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternallazypy line in dodraw return datadrawselfwrappedstrategy File usrlocallibpython sitepackageshypothesisinternalconjecturedatapy line in draw return strategydodrawself File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in dodraw datadata filterstrategyfiltered File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in dofiltereddraw return filterstrategydefaultdofiltereddrawdata File usrlocallibpython sitepackageshypothesisstrategiesinternalstrategiespy line in defaultdofiltereddraw if selfconditionvalue File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in lambda keyval not in seen for key seen in zipselfkeys seensets File usrlocallibpython sitepackageshypothesisstrategiesinternalcollectionspy line in genexpr keyval not in seen for key seen in zipselfkeys seensets TypeError Cannot hash a signaling NaN value Thanks for such an awesome library If this is an easy fix Im happy to take it but a quick scan of the relevant code seemed a bit complex Keywordonly arguments are great because assuming you have sensible names they make complicated function signatures readable at the call site without needing to check the definition for eg the order of all the boolean flags This PR Converts all arguements with default values into keywordonly arguments with only a few exceptions minvalue and maxvalue because call sites are still clear with positional arguments alphabet in sttext subdtypestrategy in the Numpy extra and columns in the Pandas extra The first argument in these cases has a clear interpretation so positional is fine extrapandasrangeindices where minsize and maxsize are obvious even by position Adds the deprecatedposargs decorator which inserts a deprecatedposargs argument This ensures that existing code continues to work albeit with deprecation warnings while raising an error if passed too many posargs or if any argument is passed by both name and position Closes Now that Hypothesis is Python only tada there are some useful things we can rely on having available like the ipaddress module This patch Adds a strategy ipaddresses vNone networkNone v may be either or network may be an IPv Network or IPv Network object or string the ergonomics justify handling the cast internally Deprecates hypothesisprovisionalip addrstrings in favor of ipaddressesvmapstr Registers strategies for IPv AddressNetworkInterface by entering them in the globaltypelookup mapping in hypothesisstrategiesinternaltypes Closes Hi folks I maintain an internal tool at my company and have been very happily using hypothesis as part of my test suite Over the past month Ive noticed a significant change in the duration of my test suite a change in duration by a couple orders of magnitude from minutes to hours when I run under a CI profile with maxexamples Ive made an example that doesnt exhibit quite that severe difference but illustrates using a simplified version of my data structures and test strategy and run this example across several versions of Hypothesis It appears that the regressions Im seeing in the performance were introduced in versions and My hope is to make you folks aware of this and move toward figuring out how to improve the situation If theres anything youd like me to try let me know Environment Ubuntu VM on Windows Python pytest Test See the following Gist which includes a description of how I ran the test Results Hypothesis Version Trial Trial Trial Average I see more severe increases using with larger maxexamples but the increase is also easily visible with maxexamples not really visible with maxexamples if you dont want to waste as much time as I did Edit Jan AM PST I must have been very tired writing text Ive cleaned it up and actually finished all of my thoughts Another small but pleasant feature that is much easier now that were Python only grin assuming you want to find bugs of course Replaces 