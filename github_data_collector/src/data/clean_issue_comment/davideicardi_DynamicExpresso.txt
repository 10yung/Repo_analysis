When parsing an expression containing a type of null enum an error occurs I tried to fix it It would be great if the library supported nameof syntax Parsercs contains lines so I tried to split it into three filesclasses Parsercs lines methods that use and change the state of the parser Expressionscs lines methods that create change and use expressions Typescs lines methods that get information about types What do you think about this Accessing a property of an anonymous class fails when going through a dynamic object MicrosoftCSharpRuntimeBinderRuntimeBinderException object does not contain a definition for Foo Test public void GetPropertyofanestedanonymous dynamic dyn new ExpandoObject dynSub new Foo bar var interpreter new InterpreterSetVariabledyn objectdyn AssertAreEqualdynSubFoo interpreterEvaldynSubFoo It works fine when the class is named dynSub new MyClass Foo bar It also works if we introduce an intermediate variable dynamic dyn new ExpandoObject dynSub new Foo bar var interpreter new InterpreterSetVariabledyn dyn interpreterSetVariablesub interpreterEvaldynSub AssertAreEqualdynSubFoo interpreterEvalsubFoo Aslo discussed on stack overflow When trying to access vlues of an array or dictionary inside a dynamic object I get the error DynamicExpressoExceptionsParseException No applicable indexer exists in type Object at index Test public void Getvalueofanestedarray dynamic dyn new ExpandoObject dynSub new int var interpreter new InterpreterSetVariabledyn objectdyn AssertAreEqualdynSub interpreterEvaldynSub This is also mentioned on Stack Overflow I am working with dynamic objects and so far managed the work around for objects but it is difficult to work with dynamically created collections Ex Type dynamicListType typeofListMakeGenericTypeAnotherDynamicInferredType var dynamicList ActivatorCreateInstancedynamicListType Use case string expression objectSource Productions var dynamicWhere interpreterParseAsDelegateFuncdynamicType boolexpression object var result dynamicListWheredynamicWhere What I want Some way for ParseAsDelegate to figure out AnotherDynamicInferredType dynamicListType and dynamicList Ive added the option to use new resource files As my project deals with the Brazilian Portuguese language we need to extend the library so that it is possible to configure which language the exceptions will be displayed if there is a resource for it We do it by implement a Helper and did some overloads onto the main methods from the Parser We also added a new resource with all the translations needed for Brazilian Portuguese Please support C verbatim strings AssertAreEqualHello world targetEvalHello world My expression has integer numbers operating with nullable decimals In this case an expression compatibility problem happens when I parse a simple multiplication x where x is a nullable decimal parameter Then I needed to extend the conversion behavior to enable custom number conversions that can be passed by the developer through parameters After this implementation I solved my problem writing a custom IntegerConverter in my project This custom IntegerConverter converts all numbers to decimal 