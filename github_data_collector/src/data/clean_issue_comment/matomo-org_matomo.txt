When I update matomo from to phpclioptions seems not to be valid with console corearchive sudo u nginx console corearchive forceallwebsites forceallperiods forcedatelastn url phpclioptionsd memorylimit G PHP Fatal error Allowed memory size of bytes exhausted tried to allocate bytes in varwwwmatomolibsZendDbStatementPdophp on line Hello everyone Over the past few days multiple websites of mine are being targeted by automated SQL injection attempts While these attacks are significant in numbers they pose no real threat with proper security Unfortunately these attacks cause something entirely different They fill up the matomo database with garbage and I mean A LOT of garbage Thousands upon thousands of SQL data that I need to delete manually In some cases the attacker is using the same IP address over and over which makes things a bit easier I use the visitor ID with the following SQL command to delete garbage data sql DELETE piwiklogvisit piwikloglinkvisitaction piwiklogconversion FROM piwiklogvisit LEFT JOIN piwikloglinkvisitaction ON piwiklogvisitidvisit piwikloglinkvisitactionidvisit LEFT JOIN piwiklogaction ON piwiklogactionidaction piwikloglinkvisitactionidactionurl LEFT JOIN piwiklogconversion ON piwiklogvisitidvisit piwiklogconversionidvisit WHERE lowerconvhexpiwiklogvisitidvisitor So what do these SQL injection attempts look like Here are two examples where the attacker is attempting to inject URL encoded SQL commands in the campaign parameter utmsource Example utmsource SELECT CASE WHEN D THEN ELSE A SELECT FROM INFORMATIONSCHEMACHARACTERSETS END Example utmsourceonline UNION ALL SELECT NULL CNULL CNULL CNULL CNULL CNULL CNULL CNULL CNULL CNULL Unfortunately these long strings are decoded by matomo and stored as strings in the database thus they also appear in the user interface Im opening this feature request to ask for a better method to deal with such problems maybe a new plugin that allows the admin to type certain keywords like the visitor ID or an IP address and have everything related deleted from the database Thank you hy I am showing Matomo inside an iFrame to my customers Since I upgraded from the auto login does not work anymore HTTP If I copy the iframe url to a new tab the autologin works as expected Best regards nik In matomolog I get ERROR API UTC Uncaught exception in API Piwik NoAccessException Ihre Sitzung ist aufgrund Inaktivit t abgelaufen Bitte melden Sie sich an um fortzufahren in srvwebsitestrackerpiwikcoreAccessphp ERROR API UTC Stack trace ERROR API UTC srvwebsitestrackerpiwikcoreAccessphp Piwik AccessthrowNoAccessExceptionIhre Sitzung is ERROR API UTC srvwebsitestrackerpiwikcorePiwikphp Piwik AccesscheckUserHasSomeViewAccess ERROR API UTC srvwebsitestrackerpiwikpluginsLiveTabAPIphp Piwik PiwikcheckUserHasSomeViewAccess ERROR API UTC internal function Piwik Plugins LiveTab APIgetSettings ERROR API UTC srvwebsitestrackerpiwikcoreAPIProxyphp calluserfuncarrayArray Array ERROR API UTC srvwebsitestrackerpiwikcoreContextphp Piwik API ProxyPiwik API closure ERROR API UTC srvwebsitestrackerpiwikcoreAPIProxyphp Piwik ContextexecuteWithQueryParametersArray ObjectClosure ERROR API UTC srvwebsitestrackerpiwikcoreAPIRequestphp Piwik API Proxycall Piwik Plugins getSettings Array ERROR API UTC srvwebsitestrackerpiwikpluginsAPIControllerphp Piwik API Requestprocess ERROR API UTC internal function Piwik Plugins API Controllerindex ERROR API UTC srvwebsitestrackerpiwikcoreFrontControllerphp calluserfuncarrayArray Array ERROR API UTC srvwebsitestrackerpiwikcoreFrontControllerphp Piwik FrontControllerdoDispatchAPI false Array ERROR API UTC srvwebsitestrackerpiwikcoredispatchphp Piwik FrontControllerdispatch ERROR API UTC srvwebsitestrackerpiwikindexphp requireoncesrvwebsitest ERROR API UTC main this is the same PR as and finally fixes publichtmlpiwik git xdev l piwik Permissions Size User Date Modified Name rwrr k lukas J n piwikjs rwrr k lukas J n piwikoldjs publichtmlpiwik git xdev gzip piwik publichtmlpiwik git xdev l piwik Permissions Size User Date Modified Name rwrr k lukas J n piwikjsgz rwrr k lukas J n piwikoldjsgz related to also related to The last release for yuicompressor is nearly years old Especially for a fast moving language like Javascript this means that it was designed for browsers that have little in common with the ones that exist now Of course after replacing it with a maintained minifier we need to test if all features still work and that the minifier doesnt use any features that are missing in ancient browsers fix We now store tokenauth no longer in the user table but hashed in a new table usertokenauth To not needing to rewrite the entire app re piwiktokenauth basically now storing in the session an extra token auth which is randomly generated when a user logs in This random token is basically just like an nonce and because we need to store it in the session it is stored in plain text in the database base encoded in the session table The plain text storage is not an issue though since it is not really a token auth but more an nonce and it only works if you also have the sessionID And if you have the sessionId you are authenticated anyway Also created so sessionIDs are hashed as well Also removes login and the weakly hashed tokenauth from the cookie To not break BC for existing tokenauths we migrate them automatically Token auths still have same permission and access as the actual user Created which may be interesting in the future We differentiate between system tokens and regular user tokens User auth token is a token created by the user and a user can delete them etc A system auth token is created by the system and not visible to the user Its used in the background when needed This tokens have an expiry date and are invalidateddeleted typically within a few hours or days They were needed because eg when we archive using http when CliMulti cannot be used then we need to issue an HTTP request from CoreArchive and this request has to be authenticated In this case CoreArchive generates a token auth that is valid for say days and it can use this generated token to authenticate the archiving requests We store the tokens hashed as sha Was going to use sha but so far sha seems more proven There is a column in the table storing the algorithm for future migrations Introduces a new page Security where these tokens can be managed plus the password and FA Todo before release Well need to adjust the mobile app before the release to support this new flow of accessing tokens and also to let them enter a token directly Well need to adjust some docsfaqs as we now only show the token after creation only replaces fix This PR will create a column in the conversion table and therefore we need to do it in a Matomo release sgiehl fyi had somehow trouble pushing into the other branch so creating a new one where I will be fixing the tests Fixing custom dimensions test might be easier after merging fix should require bytes for the right part and about byes for the left part Better patch for which was merged last minute This way it always works even when someone calls acquireLock directly instead of execute Pushing this for now into xdev but can also put it into xdev directly but then there might be merge conflicts when merging xdev into xdev fix fix Will update minified JS once PR is approved We will also need to merge 