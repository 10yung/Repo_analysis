Hi multiclusterscheduler was recently partially redesigned as a virtualkubelet provider I propose adding it to the list of available providers in the website and readme rbitia suggested I create this issue Use Cases Given that multiclusterscheduler works at the pod level it can be used as a generalpurpose multicluster scheduler Known adopters currently use it mostly for batch jobs to utilize the resources of multiple clusters Other use cases like global services require integrations with other tools eg for ingress and crosscluster networking This addresses the issue where certain optional APIs are unimplemented by the provider Environment summary Provider eg ACI AWS Fargate na Version eg beta chart in master K s Master Info eg AKS ACS Bare Metal EKS AKS Engine v Install Method eg Helm Chart helm chart Issue Details Kubernetes deprecated extensionsv beta API for Deployment resource type We are referencing that API in our chart and should test and bump to appsv Repo Steps Install current helm chart on v receive error unable to build kubernetes objects from release manifest unable to recognize no matches for kind Deployment in version extensionsv beta I have tried to leverage work from pires and jieyu to have an uptodate virtual kubelet provider for Apache Mesos Work is available at Is there a way to get a repository in the virtualkubelet organization like virtualkubeletmesos I am new to virtualkubelet and invesgating to use virtualkubelet to implement a cluster federation But in the project readme its not recommend to use virtualkubelet to implement kubernetes federation However it should be noted that VK is explicitly not intended to be an alternative to Kubernetes federation Like kubernetes federation v v are too complicated for our use cases In our use cases we only use Deployment Job and Pod we want to implement a kubernetes provider one virtualkubelet per real kubernetes cluster and join these virtualkubelet to master kubernetes cluster and user use master apiserver to submit deploymentjob the master cluster controllermanager will create pods for deployment and scheduler will schedule pod onto node virtualkubelet kubernetes provider kubernetes provider will create pod in the real cluster and sync pod status between master cluster and virtualkubelet cluster I want to know if there some weakness or design decision makes virtualkubelet not suitable for federate kubernetes clusters Our use case is very simple we only use Deployment Job and Pod This adds the DelayGC and DisableGC flags in order to change the behaviour of the VK to customize deletion behaviour in your own implementation of K s controllers Environment summary Provider ACI Version v vkv K s Master Info AKS Install Method Azure Portal Issue Details I have setup a new AKS cluster with Virtual Kubelet enabled Then I perform a load test with the help of JMeter on my pods Together with a HPA I succesfully autoscale pods onto ACI instances However I have noted that the metrics server does not get any metrics from the ACI instance until after minutes After this time the HPA is updated and a new scale out is performed If the load the increases during the minutes waiting time the HPA will not be updated until the next minutes threshold Is there any way I can affect this timing to be less than minutes since I want to be even more resilient to burst of traffic for my pods Repo Steps Setup AKS cluster with Virtual Kubelet Deploy example pod See attached script for the ones I used Run JMeter and perform loadtest Example output when no metrics is found on metricsserver is reststoragego No metrics for pod defaultphpapache ddb d f fjwj HPAyaml apiVersion autoscalingv kind HorizontalPodAutoscaler metadata name phpapache namespace default spec maxReplicas minReplicas scaleTargetRef apiVersion extensionsv beta kind Deployment name phpapache targetCPUUtilizationPercentage phpapacheyaml apiVersion extensionsv beta kind Deployment metadata labels run phpapache name phpapache namespace default spec replicas selector matchLabels run phpapache template metadata labels run phpapache spec containers image k sgcriohpaexample imagePullPolicy Always name phpapache ports containerPort protocol TCP resources limits cpu m requests cpu m nodeSelector type virtualkubelet tolerations key virtualkubeletioprovider operator Equal value azure effect NoSchedule serviceyaml apiVersion v kind Service metadata labels run phpapache name phpapache namespace default spec ports port protocol TCP targetPort selector run phpapache type ClusterIP Any ideas or feedback would be greatly appreciated Thanks for an otherwise awesome product When we call CreatePod if it fails too many times we just silently drop it Instead we should mark the pod as failed and give up Environment summary go version go darwinamd Issue Details Fail to build a new project depending on githubcomvirtualkubeletvirtualkubeletlog with go After i set up the repo and try to build for the first to resolve all the dependencies with go build no error occurs if i run go get githubcomvirtualkubeletvirtualkubeletv first to change the version of virtual kubelet to I think the following lines in gomod is to blame Repo Steps Set up a new go repo and import githubcomvirtualkubeletvirtualkubeletlog do whatever and run go mod init examplecomfoobar go build with go sample code looks like following go package main import context githubcomvirtualkubeletvirtualkubeletlog func main logGcontextTODOInfoi am main 