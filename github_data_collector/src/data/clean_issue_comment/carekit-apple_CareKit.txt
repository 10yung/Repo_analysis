This change addresses a bug in which tasks with a duration of allDay were not properly captured by OCKSchedules eventsfromto method swift let morning CalendarcurrentstartOfDayfor Date let breakfast CalendarcurrentdatebyAdding hour value to morning let lunch CalendarcurrentdatebyAdding hour value to morning let dinner CalendarcurrentdatebyAdding hour value to morning let allDay OCKScheduleElementstart breakfast end nil interval DateComponentsday text Daily duration allDay let schedule OCKSchedulecomposing allDay This should return event It was incorrectly returning let events scheduleeventsfrom lunch to dinner Is there any documentation around how to incorporate CareKit bridge in an existing project to a custom cloud backend perhaps Firebase The WWDC session only talked about thirdparty vendors and did not link to any resources that describe how to build a custom solution Would it be possible to create a slider view as in the pasted picture We could something similar to an OCKButtonLogTaskViewController but instead of the instructions that appear above the cell with the button we could have a slider to log something like pain level This is not an issue but feature request I am not sure where else to ask for a feature request Add functionality that makes it possible to display tasks that are linked with HealthKit and include the completion state in adherence value calculations Hi I just started looking into CareKit and ResearchKit and its pretty awesome what they offer out of the box I think the stable branch should point to bd bda ffd ada edc a though ie the latest commit before starts Otherwise a simple app using the OCKCareCardViewController like below crashes import UIKit import CareKit class ViewController UINavigationController lazy var carePlanStore OCKCarePlanStore let fileManager FileManagerdefault let urls fileManagerurlsfor documentDirectory in userDomainMask let url urls appendingPathComponentcarePlanStore if fileManagerfileExistsatPath urlpath try fileManagercreateDirectoryat url withIntermediateDirectories true attributes nil return OCKCarePlanStorepersistenceDirectoryURL url override func viewDidLoad superviewDidLoad let careCard OCKCareCardViewControllercarePlanStore carePlanStore careCardtitle Care pushViewControllercareCard animated true Were soliciting a proposal for an alternative view for contacts Presently the OCKSimpleContactView is the only option but we would like to add one or two more If you have any ideas for contact views which might include but not be limited to a simplified version or a version with additional capabilities please share your proposal here For reference this is what the current implementation looks like OCKSimpleContactView Were looking for feedback about new types of charts that might be useful additions to CareKit If there is specific type of chart that you would like to see added please comment your proposal here For reference the existing implementations are Line chart Bar chart Scatter plot Address with the latest version from This matches what Swift does for their project to welcome the widest audience possible Improves the health of the project from a GitHub perspective Requires the creation of an email address for anonymous reporting per comments in the ticket and likely legal approval of this particular documents inclusion presumably feasible since Swift was able to do so already In the landscape of its best to be proactive to promote inclusion Many open source projects including Swift have adopted a Code of Conduct to set the tone before something happens Also improves the health of the project per the Insights section on GitHub Matches ResearchKit issue See for the respective PR Bringing OCKCareCardViewController OCKSymptomTrackerViewController OCKInsightsViewController and OCKContactsViewController to storyboards is a highly requested feature see and I would also like to use these in storyboards In order for this to be possible for OCKCareCardViewController and OCKSymptomTrackerViewController an OCKCarePlanStore singleton needs to be provided For OCKInsightsViewController and OCKContactsViewController only an initWithCoder implementation needs to be added OCKCarePlanStore Singleton Because of how storyboards work you cannot supply a care plan store on initialization While a possible alternative is subclassing and overriding initWithCoder you cannot set the store because it is defined as readonly this might be possible in ObjectiveC but you definitely cannot in Swift without terrible hacks CareKit apps only need one care plan store Therefore the developer shouldnt have to create one and manage it themselves making sure they pass it to every class that needs it and not creating duplicates Therefore a singleton care plan store can both make CareKit a faster get started to a useful app and a way to get CareKit in storyboards Implementation Add a singleton to OCKCarePlanStore It should be called something simple like defaultStore and have a default URL for storing the data probably in the Document Directory in the User Domain Mask like in the programming guide Make the store parameter from the view controllers initializers nullable using the singleton store if passed nil Set store in initWithCoder to the singleton Set store in initWithCarePlanStore to the singleton unless the store parameter is not nil You will be able to access the apps care plan store via OCKCarePlanStoredefaultStore or OCKCarePlanStore defaultStore Impact on Existing Code Making the store parameter nullable will keep existing code working while providing an opportunity to remove all care plan store management and being able to use storyboards Internal CareKit code wont need a huge change The only change will be in the initializers of the view controllers If someone wants a custom care plan store they can leverage the existing initializer to do that Alternatives Make the store property of the view controllers readwrite Then if someone wanted to they could subclass the view controller and set the store to their care plan store in initWithCoder This seems a lot easier but avoids the problem Making a singleton also allows less care plan store management 