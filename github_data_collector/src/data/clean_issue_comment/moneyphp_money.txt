I am trying to calculate tax based on percentage which can be Current behavior php tax amount totalAmount amountmultiply tax getAmount totalAmount What I am expecting php tax amount totalAmount amountmultiply tax getAmount totalAmount In short I require exact precision in my decimal how can this be achieved Microoptimization before merging if we could merge this first Should probably relocate the implementation to an external package since its an external dependency The underlying cache package changed a lot since We should probably relocate the implementation to an external package as well since it has an external dependency Hey there Thank you for this library it is really great I got into something really subtle php money MoneyEUR n money MoneyEUR vardumpmoney greaterThanmoney prints These lines works and the result is Is it the expected behaviour or should there be checks while parsing the numeric string representation My moneyphpmoney version is and the php version is but it can be reproduced in prior php versions The allocation docs at still mention the idea of adding the remained to the first value passed Since that is not true anymore The Standard PHP formatter overrides the fractions when using a currency object that has different fractions that what is defined in the icu lib on the operating system Therefore the IntlMoneyFormatter should use the same fraction for the PHP number formatter call as it has detected before Hello everybody currently running the latest version of MoneyPHP I am trying to work with taxes the most complex form of tax value that is in my project is MoneyPHP cant handle it in cents Which means returns Considering this I cannot do productprice taxamount to get the amount Since the taxamount will be not On top of this MoneyPHP doesnt consider the decimals to round numbers Which means no matter the product price the initial numbers are the result and the decimals do not matter How am I suppose to calculate taxes with decimals amountsas tax amounts and then return a proper amount ExampleActual real nonfunctional one Product Price Tax Test Considering MoneyPHP only accepts INT once converted to an int the answer is Which is logical with decimals it would be a float Test Value in Database Still returns because it doesnt take decimals into consideration Since an INT is required Even if I change my price to which returns a result of and more the answer REMAINS no matter what the decimals ARE Once formatted by MoneyPHP returns So how am I suppose to accomplish this sort of calculations I have looked every issue on here regarding taxes decimals and percentage I have looked at Laracasts CodeCourse and Google The only thing left is changing packagethe only thing that was suggested It would be nice if money objects could deserialize themselves from vardump export format