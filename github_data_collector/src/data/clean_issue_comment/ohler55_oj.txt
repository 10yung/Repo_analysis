Hey I was confused how I should use Oj The README is pointing out to use the dump method But using Ojdump is not what I was looking for ruby myhash a b super cool a bsuper cool Ojdumpmyhash a b super cool Ojgeneratemyhash a b super cool I never used JSONgenerate before I wrote this issue My usage in the past was tojson When I would use Ojdump Ive got a bit SmartOS machine which ran into problems when upgrading from to It used to be able to encode Timenowtoi as an integer but it now encodes it as a string ruby require bundlerinline gemfile do source gem oj gem oj end puts OjRailsEncodernewencodet Timenowtoi t The cutoff point seems to be Was this an intentional change When using to stream data that contains references the referenced value must include an ID the i tag before a reference the r tag is used This is problematic when streaming since it isnt known if a streamed value will be referenced or not as the streaming progresses Other encoding solutions solves this problem by giving each value that is streamed an implicit ID which is the values index in the stream Since the receiver reads the values in the same order as they were written their implicit ID is known at the receiver end too Lets assume that the special tag R was used to denote this implicit ID The example in the encoding document oOjBag i x i true me r could then be rewritten as oOjBagx true me R R here means object with index zero in the stream ie the first object If the stream were to reference the true array it would use R assuming that the index denotes the nonencoded values the OjBag instance the x key the true array the true in the true array the me key the reference Were still at Rails so maybe all of this is outdated but still Its documented that bigdecimalasdecimal isnt available for mode rails However if I run it like this ruby Ojoptimizerails Ojdefaultoptions mode rails bigdecimalasdecimal true It does the job Oj dumps BigDecimal as number If I later add bigdecimalasdecimal true explicitely in the dump it works for single number dump but not for Hash ruby OjdumpBigDecimal Ojdumpa BigDecimal a OjdumpBigDecimal bigdecimalasdecimal true Ojdumpa BigDecimal bigdecimalasdecimal true a unexpected Also when I remove running Ojoptimizerails Oj ignores bigdecimalasdecimal and dumps BigDecimal as string Currently it works OK for me just wanted to check whats the expected behavior and if it should be aware when upgrading Rails or Oj Tested with latest Oj Thanks On if you click on a link like Rails you are taken to which is a This works on ohlercom Is there a way to have both working Rails v When using asciionly true on a hash that includes HashWithIndifferentAccess as one of the values Unicode string values of HashWithIndifferentAccess are not escaped However it has something to do with activesupportjsonencoding without it all works well require oj require activesupporthashwithindifferentaccess require activesupportjsonencoding OjdumpActiveSupportHashWithIndifferentAccessnewa asciionly true mode compat a ud e udd e OjdumpaActiveSupportHashWithIndifferentAccessnewa asciionly true mode compat a a Hi I see this issue has come many times but it looks like floating point float deserialization stroke again I still get a similar issue as in macos and also heroku machines aws Ubuntu Ruby although I guess it doesnt matter rb Ojstrictload If need be I can give you any more information that bash has Id be ready to help but C in not where I am the best ruby require activesupportjsonencodingrb require json class Foo def tojson foobar end end puts JSONgenerate Foonew foobar puts JSONgenerateFoonew foobar require oj Ojoptimizerails puts JSONgenerate Foonew foobar puts JSONgenerateFoonew Foo x fecc ad This might be related to but Im not sure I can override asjson but as our API also returns XML we have to override serializablehash so both jsonxml is the same The problem it seems is due to serializablehash getting passed an argument nil while asjson it not and thus is able to my default value for the argument This results in serializablehash choking when merging the hash nil object So this is solvable by doing options but I guess this is a bug Just started implementing Oj so not sure what the expected usage here is Works ruby def asjsonoptions options only id deepmergeoptions superoptions end Does not work ruby def serializablehashoptions options only id deepmergeoptions superoptions end The latter does work without using Oj