In my environment GREETINGSGood MorningGood AfternoonGood Evening After unmarshalling this is what I expected cGreetings Good Morning Good Afternoon Good Evening However viperGetStringSlicegreetings returns Good MorningGood AfternoonGood Evening Seems these should be the same I realize there are other issues related to configs with no extension but I didnt see this one When writing a config with no extension I get this error filename Userskjaynetestconfig requires valid extension It seems to find the config file just fine unless Im missing something Sample Code maingo gonalg package main import fmt githubcommitchellhgohomedir githubcomspf viper func main Find home directory homeDir err homedirDir if err nil fmtPrintlnError Getting Home Directory err return configName config configDir homeDir test configFile configDir configName viperSetConfigTypejson viperAddConfigPathconfigDir viperSetConfigNameconfigName fmtPrintlnconfig name configName fmtPrintlnconfig dir configDir fmtPrintlnconfig file configFile fmtPrintlnread config error viperReadInConfig fmtPrintlnwrite config error viperWriteConfig fmtPrintlnwrite config error viperWriteConfigAsconfigFile Console Output go run maingo gonalg config name config config dir Userskjaynetest config file Userskjaynetestconfig read config error nil write config error filename Userskjaynetestconfig requires valid extension write config error filename Userskjaynetestconfig requires valid extension Im trying to figure out how id log the source of a setting for troubleshooting X is set to Y in the config file A is set to V in an environment variable Thanks Im currently running viper Consider the following yaml config configyaml yaml entries a foo bar b My intention is to unmarshal this into a Config struct of the form go type Entry struct Foo string type Config struct Entries map string Entry Where the expected output when printing would look like map apointer bnil However it appears keys with nil values are lost during the unmarshalling process The following POC demonstrates loading the configyaml file above using viper and yamlv The yamlv is what I would expect go package main import fmt ioioutil log githubcomspf viper gopkginyamlv type Entry struct Foo string type Config struct Entries map string Entry func main viperAddConfigPath viperSetConfigNameconfig if err viperReadInConfig err nil logFatalerr viperConfig Config if err viperUnmarshal viperConfig err nil logFatalerr data err ioutilReadFileconfigyaml if err nil logFatalerr yamlConfig Config if err yamlUnmarshaldata yamlConfig err nil logFatalerr fmtPrintlnAllKeys viperAllKeys fmtPrintlnAllSettings viperAllSettings fmtPrintlnviper config viperConfig fmtPrintlnyamlv config yamlConfig When running the output is AllKeys entriesafoo entriesb AllSettings map entriesmap amap foobar viper config map a xc f yamlv config map a xc f bnil So viper is clearly aware the b key exists given the AllKeys output but it looks to be lost during the call to AllSettings When examining the source this looks to be intended behaviour although the comment is misleading as AllKeys clearly returns keys without a value as shown in the POC above If I comment those lines out then after unmarshalling viper and yamlv give the same output and all vipers tests continue to pass Therefore my questions are Is this still the intended behaviour ie should keys with nil values be ignored during a call to AllSettings If this is intended behaviour could we consider adding a configuration option to allow this behaviour to be ignored In the config presented above the b key is still of importance in the application Im developing despite not having any values associated with it Thanks for a brilliant library Hayden A short example to briefly illustrate the problem golang package main import bytes fmt githubcomspf viper func main dotenvExample byteDATABASEPORT viperSetConfigTypeenv viperReadConfigbytesNewBufferdotenvExample viperBindEnvdatabaseport DATABASEPORT I would expect but got nil fmtPrintlnviperGetdatabaseport A cursory look at the source suggests that the venv variable stores the mapping of key ENVVAR ie databaseport DATABASEPORT A fast way to resolve this would be to search through the venv variable when marshaling dotenv config file and assign the venvs key if the value matches However doing this way introduce an ordering constraint viperBindEnv must happen before viperReadConfig otherwise the venv would not be populated correctly then Any suggestions on whats the best way to move forward on this The suppport introduced for files with no file extension is only partial as trying to save the config file would fail with file name equires valid extensio This adds support to saving such files Im trying to write a tool for which I would let user set defaults or custom CLI arguments through a configuration file or env vars What Ive done so far is something like go package main import errors log strings githubcomspf cobra githubcomspf pflag githubcomspf viper func bindPFlagsHierarchycmd cobraCommand error for c range cmdCommands if err bindPFlagsc err nil return err if err bindPFlagsHierarchyc err nil return err return nil func bindPFlagscmd cobraCommand error prefix cmdName for current cmdParent current nil current currentParent name currentName name stringsReplaceAllname name stringsReplaceAllname prefix name prefix cmdFlagsVisitAllfuncflag pflagFlag name flagName name stringsReplaceAllname name stringsReplaceAllname if err viperBindPFlagprefixname flag err nil logFatalferror binding flag s with prefix s to viper flagName prefix return nil type MainOptions struct type SubOptions struct Info string mapstructureinfo func main mopt MainOptions sopt SubOptions viperAutomaticEnv viperSetEnvKeyReplacerstringsNewReplacer mainCmd cobraCommand Use main PreRunE funccmd cobraCommand args string error if err viperUnmarshalKeymain mopt err nil return nil return nil RunE funccmd cobraCommand args string error logPrintfmopt v mopt return nil subCmd cobraCommand Use sub PreRunE funccmd cobraCommand args string error v viperSubmainsub if v nil return errorsNewno mainsub if err vUnmarshal sopt err nil return nil return nil RunE funccmd cobraCommand args string error logPrintfsopt v sopt return nil subCmd FlagsStringPinfo i shows info mainCmdAddCommandsubCmd bindPFlagsHierarchymainCmd mainCmdExecute What the code does it to walk the command hierarchy and bind pflags to viper so as example the command main sub infosomething should be equivalent to MAINSUB INFOsomething main sub The problem Im facing is that either viperUnmarshalKeymainsub sopt and viperSubmainsub Unmarshal sopt fail note that the Sub variant panics as Sub returns nil Hey there I didnt see any similar question anywhere so Ill ask right here The documentation doesnt help in this case maybe its possible to patch it up with an answer afterwards so other people know as well Ive got a config looking like yaml stuff type A aProp aProp other type B bProp nothing So a simple list of stuff that has only its type in common Based on the type Im using it to initialize a corresponding struct or system Other keys apart from type can match but thats not necessary So make this simple I want to parse this config to a list of vipers so I can pass the vipers to each initializer so in pseudo code go stuff viperSubSlicestuff for v range stuff initStuffv where v is of type viperViper Is there some undocumented way to do this If yes it would be great to add it to the docs If no this is a feature request for something like SubSlice See the example below golang package main import bytes githubcomspf viper log os strings type Config struct AppId string mapstructureappid AppSecret string mapstructureappsecret func main viperSetEnvKeyReplacerstringsNewReplacer viperAutomaticEnv osSetenvPARENTAPPID the correct value from env variable viperSetConfigTypeyaml var exampleYmal byte parent appid wrong value it should be override by env variable appsecret abcdef viperReadConfigbytesNewBufferexampleYmal var config Config viperUnmarshalKeyparent config logPrintfv n config logPrintfv n viperGetparent logPrintfv n viperGetparentappid The nesting value is not loaded from env variable when using viperUnmarshalKey or viperGet with parent key I am using the viper package to read the hcl file to test the terrartest function and need to use GetStringMapString to read the map values form the file Can Someone please help asap I am using the code func TestTerraformDataBrickst testingT CheckForTagst func CheckForTagst testingT v readConfigvalues UsersmanyasinghalgosrcDataBricksrefcloudazuregoldendatabricks result v GetStringMapStringenvironment fmtPrintlnresult func readConfigfilename string path string viperViper error v viperNew vSetConfigNamefilename vAddConfigPathpath vSetConfigTypehcl err vReadInConfig return v err valueshcl file to to pass the values resourcegroupname sharedeaecacentralrg location centralus databricksname testdatabrickssbx sku premium retentiondays diagnosticsettingsstorageAccount eadatalakegen diagnosticsettingsstorageAccountresourceGroupName sharedeaecacentralrg tags environment testing createdby manya The actual output RUN TestTerraformDataBricks map PASS TestTerraformDataBricks s PASS ok commandlinearguments s The Expected output RUN TestTerraformDataBricks Testing PASS TestTerraformDataBricks s PASS ok commandlinearguments s 