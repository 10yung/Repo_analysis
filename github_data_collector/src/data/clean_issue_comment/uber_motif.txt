 extension point for doing custom logging of user interaction with plugin Thank you for contributing to Motif Before pressing the Create Pull Request button please consider the following points Feel free to remove any irrelevant parts that you know are not related to the issue Any HTML comment like this will be stripped when rendering markdown no need to delete them Please give a description about what and why you are contributing even if its trivial Description Fail the compilation when motifScope class has generic type parameters because Motif does not handle these cases And give users a clear message to drop the generic types on Scope classes motifScope public interface ScopeT Please include the issue list numbers or other PR numbers in the description if you are contributing in response to those Related issues Please include a reasonable set of unit tests if you contribute new code or change an existing one Fail the following cases with proper error messages java motifScope interface FooScopeT motifObjects abstract class ObjectsS public abstract T String s The compiler should only allow annotating interfaces with motifDependencies as there is no reason to use an abstract class instead Update test harness to test generated javadocs Ensure that the following behaves as expected java Scope interface FooScope Foo foo motifObjects class Objects Foo fooProviderFoo fooProvider return fooProviderget Main FooScope fooScope new FooScopeImplnew FooScopeImplDependencies Override ProviderFoo fooProvider return new Foo This should not cause a infinite loop fooScopefoo Thanks for using Motif Before you create an issue please consider the following points to help us best diagnose the issue Feel free to remove any irrelevant parts that you know are not related to the issue Any HTML comment like this will be stripped when rendering markdown no need to delete them Please include the library version number including the minor and patch version like in the issue text Library version If you think you found a bug please include a code sample that reproduces the problem A stacktrace alone is ok too but may not contain enough context for us to deduce the issue from Repro steps or stacktrace Just remove an object from scope and build You should see the motif error print outs But there is no way to tell where the object is injected A common and useful pattern is as follows public class FooParentComponent public interface ParentComponent Bar bar This pattern allows every single class that defined to somewhat act as its own scope with a clear api towards the outside world to better support this pattern motifScopes should automatically provide all the interfaces that they implement as bindings motifScope interface Scope extends FooParentComponent motifObjects abstract class Objects abstract Foo foo abstract FooParentComponent fooParentScope scope this declaration could be now be avoided 