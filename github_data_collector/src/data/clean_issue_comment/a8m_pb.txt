Hello I am using a devnull like handle when my application is in quiet mode to hide the progress bar On unix ttymovecursorup returns a string which is output to the handle On windows ttymovecursorup print to the console and return an empty string whatever the handle is making my trick to have a quiet mode totally failing I do not know if the windows code could be fixed easily Otherwise what about introducing a quiet mode Here is what I see GB GB GBs s GB GB GBs GB GB MBs s Instead it would be nice to see something like following GB GB GBs s GB GB GBs GB GB MBs s This leads to lots of noise in logs files in my tools since I am running some progress bars on kubernetes clusters It would be great if ProgressBar would output either nothing or a linebyline progress report without using r when it cannot detect a terminal add nonblocking flush method add setfinish to set behavior when a ProgressBar is finished Keep the current behavior keep the progress bar in line Remove remove the progress bar in selflines reduce selfnlines by Graduate like Remove but print the finished progress bar above the MultiBar wouldnt update anymore Added the possibility to move the progress bar away from the edges of the screen the right margin option doesnt work in the multibar mode Using the pattern in the examples on the website MultiBarlisten will likely hang if an error occurs as the ProgressBarfinish function will never get called Itd be nice if listen would stop blocking if there arent any more progress bars This library suffers from exactly the same problem as this It doesnt flicker though unlike indicatif so thats good I wrote the following module for my project It provide a ProgressFile which wraps a stdfsFile object and adds a progress bar for processing through the file It automatically fetches the size of the file and sets the units to Bytes Its really nifty for programs which process large files Ive found it quite useful and use it everywhere Im wondering if there would be interest in including this in pbr if I contributed it The broadcast writing simple file copying example on the READMEmd no longer compiles This is because Writerbroadcast was never stabilized and removed from Nightly libstd on Mar I think a simple workaround is to change the example as the followings rust extern crate pbr use stdiocopy use pbrProgressBar Units use stdfsFile use stdioWrite fn main let mut file Fileopenusrsharedictwordsunwrap let nbytes filemetadataunwraplen as usize let mut pb ProgressBarnewnbytes as u pbsetunitsUnitsBytes let mut handle Filecreatecopywordsunwrap let mut tee TeeWriternew mut handle mut pb copy mut file mut teeunwrap pbfinishprintdone Tee TSplit Writer writes the same data to two child writers struct TeeWritera T Write a T Write a w a mut T w a mut T impla T T TeeWritera T T where T Write a T Write a fn neww a mut T w a mut T Self Self w w impla T T Write for TeeWritera T T where T Write a T Write a inline fn write mut self buf u stdioResultusize let size selfw writebuf let size selfw writebuf Oksize minsize inline fn flush mut self stdioResult selfw flush selfw flush Or for convenience maybe we can add something like TeeWriter above to this crate I could work on either ideas Please let me know your thoughts Id like to use a progress indicator showing time and thoughput current total bytes Currently the counter box always shows the total rust counter box if selfshowcounter let c t selfcurrent as f selftotal as f prefix prefix match selfunits UnitsDefault format c t UnitsBytes format kbfmtc kbfmtt Maybe a showtotal could be added which switches to another counter format string like 