Hi passing data to the notification center does not work The sample app import rumps rumpsnotifications def notificationcenterinfo printinfo class TestApprumpsApp rumpsclickedTest Notification def testingself sender test test string rumpsnotificationFoo Bar Baz datafoo bar actionbuttonAction otherbuttonDismiss if name main app TestAppTest apprun throws the following exception Python OCBuiltinPythonData fastestEncoding unrecognized selector sent to instance x fa ed e Usersrejsmontsrcrumpstestvenvlibpython sitepackagesrumpsrumpspy UninitializedDeallocWarning leaking an uninitialized object of type NSPlaceholderString nsstring NSStringallocinitWithStringdumped Python version python V Python PIP packages installed Package Version Cython pathtools pip pyobjccore pyobjcframeworkCocoa PyYAML rumps setuptools I want to make status bar app and app GUI also together using rumps and tkinter but these are crashing the app When showing a notification with hasreplybuttonTrue the users reply is now included in the dict passed to the rumpsnotifications handler in the response key Also fixes a crash due to data not always being initialised properly in userNotificationCenterdidActivateNotification I would like to save preferences eg API key Whats the best way to do that The repo switch would need to be turned on at to enable free automated testing of all code changes A simplification of my application is a web server controlled by the Rumps menu I cannot combine Rumps main loop and asyncio or any other similar web server libs event loop In a way that doesnt lock up the Rumps GUI Based on some of the examples below I am not much of a MacOS internals person do you think it would be possible to add some functionality to integrate two event loops in some sort of coroutine with Rumps For more info please look here Its possible to use color icons but is it also possible to change the text color in the menubar Hi Ive added a few lines so the application and menu items could now be initialized more conveniently Here is an example also committed as examplesexampleinitpy import rumps rumpsclickedSwitch next def switchnext switchpreviousmenuitemstate not switchpreviousmenuitemstate rumpsclickedSwitch previous def switchprevious switchnextmenuitemstate not switchnextmenuitemstate def initapp switchnextmenuitemstate True if name main rumpsAppFirst item should be checked onbeforeeventloopinitapprun My intention was to solve my problem around item state initialization However it looks like it could be used for little bit more purposes as I tried to demonstrate in the example above