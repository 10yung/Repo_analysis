Add the ability to do structured json logging via a flag This will allow the logs in kubernetes to easily be parsed into existing logging infrastructure This would help with developers to see if their SealedSecret was generated properly Seeing clear logs is highly beneficial Currently some logs are almost json but not quite Testing out kubeseal Deployed the helmchart Was able to get the cert just fine kubectl create secret generic mysql dryrun fromliteralROOTPASSWORDmyrootpassword namespace wdev o json kubeseal o yaml secretyaml Error updating wdevmysql giving up no key could decrypt secret ROOTPASSWORD Eventv ObjectReferenceKindSealedSecret Namespacewdev Namemysql UID ff d d fb a a e f APIVersionbitnamicomv alpha ResourceVersion FieldPath type Warning reason ErrUnsealFailed Failed to unseal no key could decrypt secret ROOTPASSWORD E controllergo no key could decrypt secret ROOTPASSWORD After deployment the controller shows it could not decrypt the secret Following the concept of scopes I deleted the empty secret and the kubeseal secret made the namespace and switched context to that namespace Then I deployed the kubeseal secret again I got the same error in the logs but this time with the secret populated with the correct data It looks like everything went ok The logs seem to show otherwise so I am a bit confused here kubeseal recoveryunseal recoveryprivatekey masterkey o yaml somesecretyaml fails with error message error invalid configuration no configuration has been provided if you dont have a kubeconfig file Id assume the fix would be similar to that of I actually managed to circumvent the problem by just adding the cert option to the command like this kubeseal recoveryunseal recoveryprivatekey masterkey o yaml cert secretspem somesecretyaml which apparently triggers the fix from the issue linked above so that the command runs successfully also without the kubeconfig file If youre wondering why I needwant to run it like this without the kubeconfig the answer is that Ive created a CLI tool that wraps this command and the command for sealing for ease of use and I want to have tests that verify its able to seal and unseal the secrets correctly The tests are of course using a dummy keypair for this purpose and the tests run in an evironment that doesnt have access to any kubernetes cluster Experienced with kubeseal version v Improve documents about sealedsecretsbitnamicomsealedsecretskeyactive mentioned in Create document in docs with some examples and link to FAQ section in README I will soon open an PR about this I would prefer a way to automatically delete older keys after a set period of timeconfigurable Lets say I rotate my keys every x days After x days mark the older key as active but superseded and then after y daysconfigurable remove the superseded keys that are more than y days old Another option is to mark them inactive instead of deleting and let the admin manage the deletion Hello Im looking for a solution like kubeseal to encryptdecrypt on the fly our kubernetes secrets to allow us to put all of them into a git repository helm chart So I followed the recent Improvements made on the tool like the ability to deploy kubeseal into a single namespace and to configure it to not watch secrets in all namespace flag allnamespacesfalse Now my question is We are sharing a kubernetes cluster we are restricted in namespaces that we owned no admin access on the cluster and we have applications in different namespaces Can we have a kubeseal instance deployed on a dedicated namespace and tell him to manage encryptiondecryption of secrets located in different namespaces not all namespaces but a list of allowed namespaces or Do I need to deploy a kubeseal controller on each namespace and switch between all of them when I want to encrypt a secret because I think not the same encryption key pair is used Thanks you for your reply raw dump from a discussion in the k s channel The user opens the sealed secrets UI and sees a large text box with a skeleton of a k s Secret resource and instructions to paste over it an existing unencrypted secret or an already encrypted secret Then a if the input is an already encrypted secret skip to step c b if the input is an plain old k s unencrypted secret the UI will encrypt it inbrowser via client side version of kubeseal c now the large text field contains a valid encrypted sealed secret the UI now offers a way to further refine it by adding more items keyvalue pairs or updating existing items Updating an existing item will cause the UI client to encrypt that value akin to what raw does The UI wont ever decrypt the value nor in other ways have a privileged channel with the controller other that possibly being a bunch of HTMLJSWASM files served from it Proposal Check the presence of an annotation sealedsecretsbitnamicommanaged true if true then treat the secret as owned by sealedsecret controller even if there is no ownersReference Main use cases A user wants to install something via kustomize eg argocd and cannot remove a secret from the base nor rekind the secret because its against kustomize philosophy A user wants to be resilient against cascade deletes of their unsealed secrets due to the disappearance of the CRD the user somehow to be defined elsewhere removes the ownerReferences to avoid the automatic cascade but then updates of the sealed secrets no longer work A user has a bunch of legacy secrets and wants to replace them with sealed secrets When trying to seal a secret with the kubeseal client like in the follwing kubeseal hangs kubeseal mysecretyml o yaml When I set a timeout with the requesttimeout option I get a more detailed message E roundtrippersgo CancelRequest not implemented by oidcroundTripper E requestgo Unexpected error when reading response body nethttp request canceled ClientTimeout exceeded while reading body error cannot fetch certificate Unexpected error when reading response body Please retry Original error nethttp request canceled ClientTimeout exceeded while reading body using it via kubeseal mysecretyml o yaml cert certfilecert works What am I doing wrong Some details about my setup using release version client controller accessing the certpem via portforwarding the sealedsecretcontroller service and downloading it from v certpem works RBAC is enabled but the used user has full permissions on the resources in the namespace Thanks for your help Hi I have big trouble to understand documentation for x It seems that current wording is perfect for security person but not for average user I hope that my questions will help simplify README or create some sort of FAQ TLDR doc to clear confusion for other users allowing quick start In my case I just wanted a tool that just encrypts secrets and then it can be safely committed to repo It uses some keys to encrypt it its understandable so I made a backup of it to safe location to allow disaster recovery I started using this tool from x and its doing its job great I like it Ive seen x and wanted to upgrade but some parts of it changes automatically Im still not sure what it means to me README is very complicated to understand maybe its just me Normally as a cluster operator you want to know what is going on what can go wrong and what we should do regularly in simple terms Especially if you need to recreate whole cluster in case of some disaster so you basically DONT want automatic changes because some steps to recreate cluster can stop working and it can go very wrong So after migration to x do I need to change my backedup key for encryption change secrets in repo ignore some changes in encrypted secrets in tools that diffs and auto apply yamls with secrets from repo argo CD do all of the above steps are different after waiting default time for automatic rotation do all of the above will change in future updates And bonus question How to modify controller yaml to keep old no automatic behavior just in case to prevent fuckups There is info in README but not in changelog with migration info about arg for controller but there is a risk that I edit yaml wrong my setup explodes and do some changes that I dont want Can you provide small remark about how to apply it in yaml