Describe the bug We have an abstract class with one protected member And another class that inherits from abstract one kotlin abstract class ClassA protected abstract val color String class ClassB ClassA override val color String get TODOnot implemented Expected behaviour We expect color property to be effectively private for final classes And so it is Its inaccessible Dokka generates properties without visibility modifiers Okay I expect property color to be shown in ClassA doc but I dont expect it to be shown in ClassB as its private for this class But it does kotlin val b ClassB printlnbcolor error Screenshots Dokka configuration kotlin tasksdokka outputFormat html outputDirectory buildDirdokka configuration includeNonPublic false skipDeprecated false reportUndocumented true skipEmptyPackages true includes listOfpackagesmd Installation Operating system macOSWindowsLinux Build tool Gradle v Dokka version Requires Once we have working compiler on it should be trivial to port changes to Right now file extensions lives both as extension point and as a property of OutputWriter It is also passed as a parameter to write function of OutputWriter To complete this task make sure that default file extension fro given format is handled by extension point or propose alternative way to get rid of this redundancy KotlinTypeWrapper and TypeReference seems to be holding the same information To complete this task merge them and their usages DokkaConsoleLogger is logging information about warnings count after completed generation To complete this task add similar behavior for all runners and both warnings and exceptions For some reason comments for functions and classes defined on multiple platforms for example in common source set are repeated and rendered without any spaces between them Example kt foo comment receiver receiver comment param bar bar comment fun T TfoobarT creates something that looks like this but should be obraz Requires To complete this task create extension to pageMergerStrategy that takes all pages for functions with the same name from the group and returns them as single page assure that newly created extension is necessarily executed BEFORE default extension for this ep As a reference can be used Note that all functions are on the same page but they are grouped in such a way that no documentation is lost nor repeated Requires To complete this task add extension point named pageMergerStrategy to core extensions Implementations of this extension should have one method tryMerge that takes list of pages and returns list of pages change behavior of PageMerger it should now have list of merger strategies from context and for each group it merges it should apply them one by one feeding output of one strategy to the input of next stopping when some strategy returns list containing only one element move current behavior of PageMerger choosing first page from group and reporting warnings if there are more to newly created default strategy