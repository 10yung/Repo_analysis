I tracked down the reason why Excel was not loading my XlsxWriter spreadsheet Excel was reporting a table error or simply hanging Once I unzipped the xlsx file and looked at the XML I could see that the table had zero rows and was named I changed the Python program to not output tables of zero rows That fixed the issue I believe I also saw this behavior in C some years back My expectations are that XlsxWriter will not emit incompatible Excel XML I suppose the issue is a missing error check for zero rows in XlsxWriter I need to produce a spreadsheet where cells contain long numerical strings representing object IDs If a value is added to the cell as an int precision is lost and the value is shown with scientific notation Eg is stored as and is rendered as E If a value is added to the cell as a str then we avoid the precision problems but Excel displays a warning about a number being stored as text My current workaround is to hack Worksheetassemblexmlfile so that it adds XML like the following ignoredErrors ignoredError sqrefAA numberStoredAsText ignoredError sqrefDD numberStoredAsText ignoredErrors Ive found a difference in how XlsxWriter behaves when inserting charts into hidden columns In XlsxWriter version the chart xoffsets are honoured but starting in version they arent and the charts are drawn on top of each other if the column the charts is being inserted into is hidden I am using Python Here is some code that demonstrates the problem python import xlsxwriter workbook xlsxwriterWorkbookchartxlsx worksheet workbookaddworksheet Write some data to add to plot on the chart data worksheetwritecolumnA data worksheetwritecolumnB data worksheetwritecolumnC data Hide column A worksheetsetcolumn optionshidden True Add a chart chart workbookaddcharttype bar chartaddseriesvalues Sheet B B categories Sheet A A datalabels value True gap chartsettitlename Chart chartsetsizewidth Insert the chart into the worksheet worksheetinsertchartA chart xoffset yoffset chart workbookaddcharttype bar chartaddseriesvalues Sheet C C categories Sheet A A datalabels value True gap chartsettitlename Chart chartsetsizewidth worksheetinsertchartA chart xoffset yoffset workbookclose Attached are the output files generated with XlsxWriter and The behaviour of is the same as chart xlsx chart xlsx I wrote and maintain libraries for writing Xlsx files in different programming languages with more or less the same APIs ExcelWriterXLSX in Perl XlsxWriter in Python and Libxlsxwriter in C Note New features get added to the Perl version first then the Python version and then the C version As such a feature request has to be implemented times with tests and documentation The Perl and Python versions are almost completely feature compatible The C version is somewhat behind the others This document gives a broad overview of features that are planned to be implemented in order Bugs These have the highest priority Note Add user defined types to the write method in XlsxWriter Done Add hyperlinks to images in ExcelWriterXLSX Issue fix it in the Python version and add it to the C version Done Learn the phrygian dominant mode in all keys Fix the issue where duplicate images arent removedmerged In Python Perl and C versions Done Add support for comments to the C version Done Add support for object positioning to the C version Add support for user defined chart data labels This is the most frequently requested feature across all the libraries Learn the altered scale in all keys Implement missing features in the C library Other frequently requested and feasible features in all versions Notes I also wrote a version in Lua and two other Perl versions for older Excel file formats that I no longer actively maintain I wrote and open sourced the first version in January Some avoidable bugs have lower priority While adding text to chart title natively in Excel some string elements could be formatted differently despite general format of the chart title eg while having regular font some letters can be italicbold etc Is this feature somewhere hidden in existing module or taken into consideration for development Please add support for richt text formatting as in writerichstring for cell comments writecomment This is not covered in the current implementation where you can set some basic formatting properties like font size and background color for the entire comment but not for parts of it Use case I would like to highlight certain portions of a long comment by changing formatting properties like bold italic and font color Hi I am trying to put a svg file into the excel file but it seems svgs are not supported I havent found any workaround Excel does support svg so it would be cool to get this feature File C Users xAAdmin AppData Local Programs Python Python lib sitepackages xlsxwriter workbookpy line in getimageproperties s Unknown or unsupported image file format filename xlsxwriterexceptionsUnsupportedImageFormat datasvgDrivesvg Unknown or unsupported image file format This commit adds the optional argument view to Worksheetsetpageviewself viewpageLayout to enable the user to select other page views such as pageBreakPreview This commit does not change the API in any way Two test functions have been added and the documentation was updated Fixes The function Worksheetwritesheetviewself is used to create sheetView elements together with the specified attributes One of these attributes is view which can be set to viewpageLayout with the function Worksheetsetpageviewself This would result in something like xml sheetViews sheetView viewpageLayout workbookViewId sheetViews However there is another view type supported by Microsoft Excel and its competitors which is called pageBreakPreview It would be desirable to be able to choose between viewpageLayout and viewpageBreakLayout by telling Worksheetsetpageviewself which one to use Therefore an optional argument defaulting to viewpageLayout should be added to replace the simple on off mechanism that is currently implemented The Problem I was tracing a bizarre failure distant from the true cause when I discovered at utilitypy def xlrowcoltocellrow col rowabsFalse colabsFalse if row warnRow number d must be row return None etc return colstr rowabs strrow which seems innocent enough dont return anything if nothing can be made of the inputs but later on at worksheetpy we see the following def writemergecellself mergedrange Write the mergeCell element rowmin colmin rowmax colmax mergedrange Convert the merge dimensions to a cell range cell xlrowcoltocellrowmin colmin cell xlrowcoltocellrowmax colmax ref cell cell Its my fault I passed a bad range into worksheetmergerange somehow but now there are two additional problems The first is that the following exception message File lib sitepackages xlsxwriter worksheetpy line in assemblexmlfile selfwritemergecells File lib sitepackages xlsxwriter worksheetpy line in writemergecells selfwritemergecellmergedrange File lib sitepackages xlsxwriter worksheetpy line in writemergecell ref cell cell TypeError unsupported operand types for NoneType and str highlights an incorrect assumption that xlrowcoltocell necessarily returns a string it doesnt always and also by the time the workbook is closing I have zero idea how the offending worksheetmergerange call happened Poking around I find the relevant data structure is the list worksheetmerge which is written at worksheetpy in the definition of mergerange Scanning upward I see that we check the column number of the lowerright corner of the merge range on line before appending to the list but if that check fails no word is passed to client code I expected an exception and the check neglects to test the upperleft corner of the merge range Proposed Solution Let us fail early and often as follows A great many of the API calls are decorated with convertargs collectively defined at the top of worksheetpy Suppose the wrappers were augmented with code to assert nonnegative rowcolumn numbers before delegating to the wrapped method like this at line assert allargs i for i in range All coordinates must be nonnegative got reprlistargs return methodself args kwargs As a result I get an exception pointing me to exactly the place where the actual problem is Im going to live with this patch until the next upgrade This one tiny change would protect virtually the whole API from the scourge of invalid input parameters If you felt like it you could also take care of swapped topbottomleftright onceandonlyonce in the wrappers within convertrangeargs and convertcolumnargs thus probably saving a metric boatload of repetitious code 