Here is a checklist you should tick through before submitting a pull request x Implementation is clean x Code adheres to the existing coding standards eg no curlies for oneline blocks no redundant empty lines between methods or code blocks spaces rather than tabs etc x No ReSharper warnings x There is proper unit test coverage If the code is copied from StackOverflow or a blog or OSS full disclosure is included That includes required license files andor file headers explaining where the code came from with proper attribution x There are very few or no comments because comments shouldnt be needed if you write clean code Xml documentation is addedupdated for the additionchange x Your PR is rebased on top of the latest commits from the dev branch more info below x Link to the issues youre fixing from your PR description Use fixes the issue number Readme is updated if you change an existing feature or add a new one x Run either buildcmd or buildps and ensure there are no test failures Hello now we have spanish translations primero Masculine tercero Masculine But when they come before nouns that are singular and masculine primero and tercero are shortened to primer and tercer respectively For example el primer presidente el tercer cap tulo Need to fix it Hello can you say something about the progress on this The report was published back in February and was answered after years only in March Does this only work for English Given this code using System using SystemGlobalization using SystemThreading using Humanizer namespace SingularAndPlural class Program static void Mainstring args string cultures enUS no noNB sv da fiFI string words School Sack Car Chicken Person GastationMan Skole Sekk Bil Kylling Person BensinstasjonMann Skole Sekk Bil Kylling Person BensinstasjonMann Skola s ck Bil kyckling Person bensinstationMan Skole S k Bil Kylling Person Tankstation Mand Koulu s kki auto kana henkil huoltoasema ihminen ConsoleWriteLine nBegin singular and plural words demo ConsoleWriteLineExample of Humanizer n ConsoleWriteLineCurrent Culture CultureInfoCurrentCultureName ConsoleWriteLineCurrent UICulture CultureInfoCurrentUICultureName foreach string culture in cultures forint i i culturesLengthi string culture cultures i ConsoleWriteLine ConsoleWriteLineSetting CurrentThread Culture to CultureInfo newCulture CultureInfoCreateSpecificCultureculture ThreadCurrentThreadCurrentUICulture newCulture CultureInfo ci ThreadCurrentThreadCurrentCulture CultureInfo ciUi ThreadCurrentThreadCurrentUICulture ConsoleWriteLineCurrentThread Culture ciName ConsoleWriteLineCurrentThread UICulture ciUiName ConsoleWriteLine ConsoleWriteLineEntall t tFlertall foreach string word in words forint y y y ConsoleWriteLinewords iy t t words iy Pluralize ConsoleWriteLine ConsoleWriteLineDateTimeNowAddHours Humanize ConsoleWriteLineDateTimeUtcNowAddHours Humanize ConsoleWriteLineDateTimeNowAddHours Humanizeculture ciUi ConsoleWriteLine ToWords ConsoleWriteLine ToRoman ConsoleWriteLine nEnd demo n ConsoleReadLine Main Program Produces this output Begin singular and plural words demo Example of Humanizer Current Culture nbNO Current UICulture nbNO Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture enUS Entall Flertall School Schools Sack Sacks Car Cars Chicken Chickens Person People Gastation Gastations Man Men yesterday hours ago yesterday three thousand five hundred and one MMXIX Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture nbNO Entall Flertall Skole Skoles Sekk Sekks Bil Bils Kylling Kyllings Person People Bensinstasjon Bensinstasjons Mann Manns i g r timer siden i g r tretusenfemhundreogen MMXIX Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture noNB Entall Flertall Skole Skoles Sekk Sekks Bil Bils Kylling Kyllings Person People Bensinstasjon Bensinstasjons Mann Manns yesterday hours ago yesterday three thousand five hundred and one MMXIX Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture svSE Entall Flertall Skola Skolas s ck s cks Bil Bils kyckling kycklings Person People bensinstation bensinstations Man Men ig r f r timmar sedan ig r tre tusen femhundraett MMXIX Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture daDK Entall Flertall Skole Skoles S k S ks Bil Bils Kylling Kyllings Person People Tankstation Tankstations Mand Mands i g r timer siden i g r three thousand five hundred and one MMXIX Setting CurrentThread Culture to CurrentThread Culture nbNO CurrentThread UICulture fiFI Entall Flertall Koulu Koulus s kki s kkis auto autos kana kanas henkil henkil s huoltoasema huoltoasemas ihminen ihminens eilen tuntia sitten eilen kolmetuhatta viisisataayksi MMXIX End demo Am I to conclude that Pluralize only supports English language or am I missing something here regards Harald In the Readme the documentation implies that default precision is but it is not Upon rereading I think that the docs are not clear on this front I can see how the sentence talking about the default precision referred to the example above it as opposed to default globally Maybe there is a wording change that can make it clear This fixes an issue I saw on SO below Basically you cant seem to get a value like Months Weeks Days Hours from calling the below new TimeSpan Humanize maxUnit TimeUnitMonth This fixes that and tests that therefore broke by changing how we calculate Weeks and Days Also fixes Hi I get this error Nov hypeproxy hypeproxy SystemArgumentException The resource object with key DateHumanizeMultipleMonthsAgo was not found Nov hypeproxy hypeproxy Parameter name resourceKey Nov hypeproxy hypeproxy at HumanizerLocalisationFormattersDefaultFormatterFormatString resourceKey Int number Boolean toWords in d a s src Humanizer Localisation Formatters DefaultFormattercsline Nov hypeproxy hypeproxy at HumanizerDateTimeHumanizeStrategyDateTimeHumanizeAlgorithmsDefaultHumanizeDateTime input DateTime comparisonBase CultureInfo culture in d a s src Humanizer DateTimeHumanizeStrategy DateTimeHumanizeAlgorithmscsline Nov hypeproxy hypeproxy at HumanizerDateTimeHumanizeStrategyDefaultDateTimeHumanizeStrategyHumanizeDateTime input DateTime comparisonBase CultureInfo culture in d a s src Humanizer DateTimeHumanizeStrategy DefaultDateTimeHumanizeStrategycsline Nov hypeproxy hypeproxy at HumanizerDateHumanizeExtensionsHumanizeDateTime input Boolean utcDate Nullable dateToCompareAgainst CultureInfo culture in d a s src Humanizer DateHumanizeExtensionscsline Fixes Add support for the Humanize method to work with other time expressions so that the user can select from the predefined MehdiKhalili onovotny hazzik mexx Could you please review this If the approach is good I can continue updating the documentation and apply your suggestions Thank you Here is a checklist you should tick through before submitting a pull request x Implementation is clean x Code adheres to the existing coding standards eg no curlies for oneline blocks no redundant empty lines between methods or code blocks spaces rather than tabs etc x No ReSharper warnings x There is proper unit test coverage x If the code is copied from StackOverflow or a blog or OSS full disclosure is included That includes required license files andor file headers explaining where the code came from with proper attribution x There are very few or no comments because comments shouldnt be needed if you write clean code Xml documentation is addedupdated for the additionchange x Your PR is rebased on top of the latest commits from the dev branch more info below x Link to the issues youre fixing from your PR description Use fixes the issue number Readme is updated if you change an existing feature or add a new one x Run either buildcmd or buildps and ensure there are no test failures The documentation says In addition a minimum unit of time may be specified to avoid rolling down to a smaller unit For example TimeSpanFromMilliseconds HumanizeminUnit TimeUnitSecond minutes seconds instead of minutes seconds milliseconds When you run it on latest version you get different actual result TimeSpanFromMilliseconds HumanizeminUnit HumanizerLocalisationTimeUnitSecond minutes One scenario is when using ToQuantity which returns a string format is most of the time necessary if it will be displayed to a user One of the common formats is digit grouping or using thousands separator Example secondToQuantity I believe in the above example it would be better understood immediately if the digits are grouped which is done by formatting the string such as n see MSDN document Without native Humanizer support for this I need to implement something like the following to combine the digit grouping and humanizing public static string ReplaceNumberInsideQuantifiedStringint number string input string stringNumber numberToString string text inputToQuantitynumber return numbern textRemove stringNumberLength Anyways ToQuantity is just a sample usage Digit grouping may also be applicable to other Humanizer methods