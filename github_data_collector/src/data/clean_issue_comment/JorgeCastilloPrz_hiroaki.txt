The following code fails when trying to verify a json body that starts with an array serververifysearchcalled jsonBody inlineBody value trimIndent I believe it is because the matcher is attempting to normalize the json into a linked hash map but the map type adapter doesnt know how to convert a standard array into a map The below code shows how the MapTypeAdapterFactory assumes the payload would be an array of arrays but instead is getting an array of objects if peek JsonTokenBEGINARRAY inbeginArray while inhasNext inbeginArray entry array K key keyTypeAdapterreadin V value valueTypeAdapterreadin V replaced mapputkey value if replaced null throw new JsonSyntaxExceptionduplicate key key inendArray inendArray Support for mocking requests forever with a same response The API will look like serverwheneverGET v topheadlines thenRespondForeversuccessjsonBody fileBodyGetNewsjson Whenever the request for topheadlines is called it will always return the same json This will make the API more powerful And also make it closer to what mockito does for class mocking Considerations When it is called again it should maybe reset and do the setup again When the regular thenRespond is called after thenRespondForever it should reset and enqueue only response Consider adding reset functionality for requests Support jUnit extension It is super easy to do the question is how to distribute it A new module with new artifact Or include them together I also dont know what is the best practice Here is how it would look like class MockServerExtension BeforeEachCallback AfterEachCallback lateinit var server MockWebServer override fun beforeEachcontext ExtensionContext server MockWebServer DispatcherRetainerregisterRetainer DispatcherRetainerresetDispatchers serverstart override fun afterEachcontext ExtensionContext servershutdown DispatcherRetainerresetDispatchers serversetDispatcherDispatcherRetainerqueueDispatcher Android Pie has changed the behavior so that the app would crash by default in case non https request was made So this happens on UI tests Tests should disable this feature What is the reason that the public class mentioned in the Readme is inside a package named internal I realized that since we have a lint check that warns imports with internal in them Moving them would be an backward incompatible change but would you considering doing that Perhaps Im not understanding correctly how query parameters should be tested but right now the usage of their verification seems to be working in an unexpected way to me I assumed that it would work as an exact match where it would check for each query parameter and result in an error whenever one is missing or there are some unmatched parameters For example if I verified a call like this kt serververifypathcalled queryParams params param to value param to value Then I would expect it to be successful for pathparam value param value which works correctly and fail for pathparam value also works correctly or for pathparam value param value param value which is not the case Is there something that Im missing which would make it ok to not fail when there is incorrect number of params And if there is then is there a way to make these cases result in failure