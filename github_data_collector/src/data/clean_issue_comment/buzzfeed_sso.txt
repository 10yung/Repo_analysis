 Problem ssoauth is using gomicro to manage variable configuration ssoproxy is still using the original outdated methods and should be updated to also use gomicro Solution Update ssoproxy to use gomicro Notes Some additional tests and documentation still needed hence the current drop in test coverage which is causing the github checks to fail I find some structs are repeat such as UpstreamConfig struct and OptionsConfig struct there are some fields are repeated and I saw the ssoproxy code and find it is superfluous there are other places likes this Do I not understand clearly or it is design bug Hey I have been reading around about the project and it does look very interesting I am trying to understand if it can fit a nonbrowser flow if we wanted to integrate SSO in a CLI application what would the preferredrecommended way to proceed In other words if we want to interact with a server which is behind SSO protection how do we get back from the browser after a successful login the cookies in order to use them in the CLI when making requests against the server Problem We are still calling ValidateGroup directly within ssoproxy but using the optionsvalidator package elsewhere in the same logic path originally partially due to circular imports This makes it increasingly difficult to make sure we were running the right validations at the right time and certain methods were growing in complexity and responsibility Solution Attempt to reunite some of the most problematic portions of code in related to the above High level overview of included changes Moves extendDeadline and withinGracePeriod to be part of the sessions package instead of the providers package In fact a version of extendDeadline already exists in the session package We now use that instead Changes direct calls to ValidateGroup within internalproxyprovidersssogo to optionsvalidator package calls within internalproxyprovidersoauthproxygo Introduces the runValidatorsWithGracePeriod helper method here to help handle cases where we want to check if the auth provider is unavailable instead of explicitly denying authentication Renames the ValidateSessionState method to ValidateSessionToken which seemed to better fit its responsibility Modify tests to explicitly test new logic Notes The perhaps less obvious change is that within the Authenticate method well now only run validators when the refresh or validation period has expired This is instead of running group validations when the refresh or validation period has expired and domainemail validations on all proxied requests Describe the bug Installed docker and dockercompose on my mac following the quick start guide Mac OS Mojave Docker version Client Docker Engine Community Version API version Go version go Git commit a ea Built Wed Nov OSArch darwinamd Experimental false Server Docker Engine Community Engine Version API version minimum version Go version go Git commit a ea Built Wed Nov OSArch linuxamd Experimental false containerd Version v GitCommit b a c af e c db c f fa runc Version rc dev GitCommit e f a c f e d a c b d aa dockerinit Version GitCommit fec Docker compose version dockercompose version build b Im using Google provider Everything works fine except that i get occasional on both the After every refreshing the page gets to to work I see user is no longer in valid groups message whenever the backends throws the error Is your feature request related to a problem Please describe We want to use sso for our internal accesses and also provide access to customer using basic authentication Its great if the tool can support both mechanisms Describe the solution youd like No idea so far Describe alternatives youve considered No idea so far Additional context NA Signedoffby Daniel Sutton danielducksecopsuk Problem Not using latest golang Solution update dockerfile to use golang Notes Other pertinent information Examples a walkthrough of how the solution might work why this solution is optimal compared to other possible solutions or further TODOs beyond this PR Problem The current setup of html sign in and sign out pages causes some extra friction with implementing this change gives us some extra flexibility here Also having ssoproxy first send requests to ssoauth which subsequently renders the sign in page and redirects back results in extra requests and extra complexity for example an extra layer of nested redirects needs to be specified Solution Move the signin and signout HTML pages to be rendered by ssoproxy instead of ssoauth In doing so simplify the flow in part between ssoproxy and ssoauthenticator Notes This is a big change so Im working to add some more detailed descriptions of the changes and going over any TODOs to aid in better understanding them as well as reviewing the PR in general Is your feature request related to a problem Please describe This feature request will solve a problem were currently experiencing when the SSO is used for a crossorigin backend server Suppose you have the following apiexamplecom This is an API server appexamplecom This is a web app that performs crossorigin requests to apiexamplecom Both are placed behind the SSO proxy Thus in order for any requests to be performed to apiexamplecom the user must already be signed into the ssoauth service The issue is when appexamplecom is loaded for the first time the following occurs Request to appexamplecom is sent to ssoproxy the user is not authenticated so is sent to the SSO sign in page After the user signs in successfully they are redirected back to appexamplecom where the HTML page is successfully sent to the browser and the web app begins to render During rendering the web app appexamplecom sends a crossorigin request to apiexamplecom As the user has never loaded apiexamplecom there is no session cookie for that request and is thus redirected to ssoauth This is where the problem occurs ideally what happens is ssoauth sees that the user is already signed in and will redirect them back to apiexamplecom with the session cookie But what occurs is The request to ssoauth is blocked by the browser as the preflight response from apiexamplecom which is performed by ssoauth does not include the appropriate AccessControlAllowOrigin header Describe the solution youd like Theres many possible solutions to this from more general to specific we can Add the ability to configure headers to add to all ssoauth redirects through environment variables Add the ability to configure headers to add to all preflight requests to ssoauth through environment variables Add the ability to configure the AccessControlAllowOrigin for the redirect responses by ssoauth Describe alternatives youve considered All alternatives are also described above The currently workaround is to directly visit apiexamplecom before visiting appexamplecom so the session cookie is set for when appexamplecom sends a request to apiexamplecom Additional context Add any other context or screenshots about the feature request here Problem As a follow up to this removes some redundant logic from the sso authenticator particularly surrounding the AUTHORIZEEMAILDOMAINS and AUTHORIZEEMAILADDRESSES configuration variables Solution AUTHORIZEEMAILADDRESSES was only used for email validation which is already done in the proxy so this has been removed AUTHORIZEEMAILDOMAINS was used in two places email validation which has also been removed and population of the sign in page Rather than needing to pass these domains in as configuration variables or reducing the usefulness of the sign in page sso proxy adds the allowed domains to the SignInPage URL as a query parameter which is then parsed by sso authenticator for use within the sign in page