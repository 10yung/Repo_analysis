Ive been looking at the wiki for loadbalancing and for multiple systems it states Set a less complex scheme with roundrobin DNS The client must send all its requests to the same DNSdiscovered TURN server That scheme supports all use cases But how would this work if client A gets the ip of TURN server B and client C gets the ip of TURN server D their ICE candidates will be different right So how do they connect How would authentication work even if they can agree on a TURN server Hi everybody Does anybody already has a working coturn configuration with Microsoft Direct Access Im currently running a coTurn server with permission to relay audio and video flux through authentication and this relay is working perfectly but not when client are connected over Direct Access Negotiation on port seems good but client is forced to use relay mode Negotiation seems to return usable port on the turn server itself but because this negotiation return IP addresses of the turn server Direct Access is unable to transmit IPv while everything must use domain name Is there any tweak to let coturn returning domain name in reply instead of IP addresses especially for itself added dbdrest interface with remoteauthapi usage option possibility allows to connect to d party server via RESTfull API of that server and fetch secret based on username not sure if needed for now but better remove after review oauth functionality via RESTfull API of d party server but not supported officially docker file updated with debianstretch as well Im not sure about usage of W and w keys and about couple of of other things So suggestions are required I faced with a problem that a client one of the participants in the call may suddenly lose the connection The client uses a mobile network Server Configuration Coturn server v Janus webrtc server v All calls use a TURN server that listens on port and accepts only TLS connections Using the TLS protocol is a necessary measure otherwise the outgoing UDP traffic from the client does not reach the server I suspect that it is blocked by the Internet provider To diagnose the problem I took a tcpdump of the traffic both on the client side and on the server side At the time of the loss of connection Wireshark detects TCP Dup Ack on the outgoing traffic from the client the same thing is observed on the incoming traffic on the server side However no RTP packet from TURN to Janus was lost Based on the dump of the TLS traffic on the server side measured the jitter of the client s network I measured it myself according to the algorithm Calculate the time difference between consecutive packets packet No frametimeepoch packet No frametimeepoch Summarize the difference Amount divided by the number of packages I suspect that the problem is not on the side of the client s mobile network since the jitter only grew to ms at the time of losing the connection while it was when things were okay So it occures to me that yes the network suffers a bit but not to the point of disconnecting the call but still the call gets broken So the techonolgy in some way just reacts unappropriitally to a mild network delay fluctuations At the time of a connection loss the server turn logs have a records TLSTCP socket disconnected clientipaddress closed nd stage user uid realm domain origin local serveripaddress remote clientipaddress reason TLSTCP socket buffer operation error callback Client TCP snapshot of outgoing traffic TCP snapshot of incoming traffic from the server side Summary of RTP traffic from TURN to Janus server Please tell me what could be wrong Hello We found it very beneficial to run the turns server on port for bypassing restrictive firewalls Usually this is easy simply set the listener port to In some cases this port is also used for a webserver which complicates the matter I have implemented a feature that allows coturn to work behind haproxy as a reverse proxy This allows multiplexing https and turns on the same port An example haproxyconf is included In addition you need to add tcpproxyport to your coturn config to start the proxy listener One cannot simply use a normal TCP load balancer as the source ipport seen by coturn will be wrong This affects the core protocol functionality eg mapped address will show the reverse proxy ip Sincerely Bertold Example haproxyconf frontend sslin mode tcp bind ssl crt keyscertpem bind ssl crt keyscertpem tcprequest inspectdelay s acl turn payload hex m sub acl turn payload hex m sub acl turn payload hex m sub acl turn payload hex m sub tcprequest content accept if HTTP tcprequest content accept if turn turn turn turn usebackend https if HTTP usebackend coturn if turn turn turn turn backend https mode http option forwardfor server https cookie A backend coturn mode tcp server coturn sendproxyv As reported by RFC Revealing the specific software version of the agent through the SOFTWARE attribute might allow them to become more vulnerable to attacks against software that is known to contain security holes Implementers SHOULD make usage of the SOFTWARE attribute a configurable option Just add prod to the configuration file to hide software version in Binding Success Response Hey There Ive been using this turn server to relay connections using ICE and TCP but have recently found that mobile users on Safari using Cloudflares mobile VPN are blocked from viewing the webRTC video streams In my coturn server I can see the appropriate logs but I dont see the stream itself ession realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet ALLOCATE processed success session realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet ALLOCATE processed success session realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet BINDING processed success session realm exampledomaincom user incoming packet BINDING processed success session usage realmexampledomaincom username rp rb sp sb session peer usage realmexampledomaincom username rp rb sp sb session closed nd stage user realm exampledomaincom origin local remote reason allocation watchdog determined stale session state session realm exampledomaincom user incoming packet BINDING processed success Currently my turn config is the default configuration with only the realm being my actual domain above for placeholder purposes exampledomaincom I am running the coturn server via sudo turnserver c etcturnserverconf v I am running on Ubuntu as well as using as my current coturn version Startup looks like this log file opened varlogturn log RFC STUNTURN Server Version Coturn dan Eider Max number of open filessockets allowed for this process Due to the open filessockets limitation max supported number of TURN Sessions possible is approximately Show him the instruments Practical Frost TLS supported DTLS supported DTLS supported TURNSTUN ALPN supported Thirdparty authorization oAuth supported GCM AEAD supported OpenSSL compiletime version OpenSSL Sep x f SQLite supported default database location is usrlocalvardbturndb Redis is not supported PostgreSQL is not supported MySQL is not supported MongoDB is not supported Default Net Engine version UDP thread per CPU core Domain name Default realm exampledomaincom ERROR CONFIG ERROR Empty clipassword and so telnet cli interface is disabled Please set a non empty clipassword WARNING cannot find certificate file turnservercertpem WARNING cannot start TLS and DTLS listeners because certificate file is not set properly WARNING cannot find private key file turnserverpkeypem WARNING cannot start TLS and DTLS listeners because private key file is not set properly NO EXPLICIT LISTENER ADDRESSES ARE CONFIGURED Discovering listener addresses Listener address to use Listener address to use Listener address to use Listener address to use Listener address to use Listener address to use Listener address to use Total real addresses discovered NO EXPLICIT RELAY ADDRESSES ARE CONFIGURED Discovering relay addresses Relay address to use Relay address to use Relay address to use Relay address to use Relay address to use Relay address to use Total relay addresses discovered pid file created varrunturnserverpid IO method main listener thread epoll with changelist Wait for relay ports initialization relay initialization relay initialization done relay initialization relay initialization done relay initialization relay initialization done relay initialization relay initialization done relay initialization relay initialization done relay initialization relay initialization done Relay ports initialization done IO method general relay thread epoll with changelist turn server id created IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IPv TCP listener opened on IPv SCTP listener opened on IO method general relay thread epoll with changelist turn server id created IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv TCP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on IPv UDP listener opened on Total General servers IPv TCP listener opened on IO method admin thread epoll with changelist IO method auth thread epoll with changelist IO method auth thread epoll with changelist SQLite DB connection success usrlocalvardbturndb This all looks fairly standard Has anyone navigated around NAT traversal mobilly with cloudflares VPN before Hi will you consider supporting export metrics to Prometheus 