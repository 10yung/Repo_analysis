I want to connect with redis cluster of nodes How can I connect netdebasishgredisreact not found Does it really supports scala Hi I was looking at the API compared to the scalaredis github repository and noticed that this one does not support Binary Keys Just wanted to file this as a feature request Hi This library is great and hoping to put it into full use shortly However I am using behind a Factory pattern to abstract away the cache implementation so we can easily swap in out I was looking at testing without having a local version of redis running Testing this is difficult and I would like to create a MockRedisClient that I can use in my factory maybe that would look something like this scala class MockRedisClientclientRef ActorRef extends RedisClientclientRef val mmap collectionmutableMap String Any override def get A key Stringimplicit timeout Timeout reader Reader A Future Option A val value mmapgetkey FuturesuccessfulvalueasInstanceOf Option A override def setkey String value Stringified exORpx Option SetExpiryOption nxORxx Option SetConditionOption implicit timeout Timeout Future Boolean mmapputkey value Futuresuccessfultrue override def setexkey String expiry Int value Stringifiedimplicit timeout Timeout Future Boolean mmapputkey value Futuresuccessfultrue This is not possible on the get method due to the fact that comredisserializationReader is private to package comredis I was wondering if this was an intended restriction and if this visibility is something you would consider removing so that we could Mock the RedisClient easier Ive tried it on a local copy and is then accessible to to override An alternative is to create a local comredis package and create a MockRedisClient class which is a hacky Hello I would like to add the SCAN command Redis I tried to implement it based on the implementation of the other commands If there is something you dont like let me know ill adopt the code accordingly At the moment SCAN commands are missing Please add them to the library Other than that SUPER project The apply method within the RedisClient object is not threadsafe It uses the threadunsafe Iteratornext method to create a default name This results in name collisions in Akka An example of the Iteratornext method not being threadsafe val i Iterator from val fs Seqfill Futureinext This should print but will likely print something else the last time I tried it was Futuresequencefsforeachvalues printlnvaluestoSetsize Ive included a stacktrace showing the issue appearing in our production environment redisnbnamebugclean Some operation in ResponseHandling is not efficient and those may become bottlenecks when too many command is requested I found following bad operations Queue operation RawReplyremaining for every command responsemaybe lead to array copy 