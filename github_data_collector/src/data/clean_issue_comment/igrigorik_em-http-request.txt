Getting a crash scenario from a without a Location header What appears to happen is that HttpConnectionredirect gets called with nil as a location which creates an empty hostname Stack trace looks like this from varlibgems gemseventmachine libeventmachinerb in run from varlibgems gemseventmachine libeventmachinerb in runmachine from varlibgems gemseventmachine libeventmachinerb in eventcallback from homedorianclientspeopledoriantaylorrbemhttprequestlibemhttphttpconnectionrb in unbind from homedorianclientspeopledoriantaylorrbemhttprequestlibemhttphttpconnectionrb in unbind from varlibgems gemseventmachine libemconnectionrb in reconnect from varlibgems gemseventmachine libeventmachinerb in reconnect varlibgems gemseventmachine libeventmachinerb in connectserver no implicit conversion of nil into String TypeError No checking for Location header in the client No subsequent checking in the connection The result is that an instance like this is created AddressableURI x aaf f a URI which makes host be nil and thus crash with the type error cited above This should be easy enough to patch the only question is what precisely policywise to patch it with Try different scheme instead of http and you still receive same response doctype html nhtml nhead n titleExample Domaintitle n n meta charset utf n m httpzzzexamplecom doctype html nhtml nhead n titleExample Domaintitle n n meta charset utf n m attp examplecom doctype html nhtml nhead n titleExample Domaintitle n n meta charset utf n m This addresses I used focas patch and wrote a basic test Mongrel is no longer supported with by Rack v Remaining test failures EventMachineHttpRequest should set contentlength to on posts with empty bodies FailureError httpresponsestripsplit should expected got nil using EventMachineHttpRequest should report error if connection was closed by server on client keepalive requests FailureError reqcallback fail RuntimeError EventMachineHttpRequest should fail gracefully on an invalid host in Location header FailureError httperrorshould matchunable to resolve server address expected connection closed by server to match unable to resolve server address EventMachineHttpRequest should keep default http port in redirect url that include it FailureError httplasteffectiveurltosshould expected got using EventMachineHttpRequest should keep default https port in redirect url that include it FailureError httplasteffectiveurltosshould expected got using The test suite is currently failing because Mongrel support has officially been removed from Rack Furthermore Mongrel is unmaintained We should migrate away from it and to something maintained eg WEBrick Id be happy to pick this up This relates to Hello as reported in the Debian BTS emhttprequest started to fail the test suite after httpparser was upgraded from to the problem still exists with the most recent version The most important error lines are NoMethodError undefined method continue for nilNilClass libemhttphttpconnectionrb in block in postinit After staring at the code for a long time and using Rubys Tracer it seems httpparser calls messagecomplete more often than in earlier times but your library cannot deal with this I might be completely wrong here especially since I couldnt find any releated change in httpparser Before starting a fairly annoying git bisect session Im asking you to take a look my Ruby knowledge is basically guessing from looking at the code This HTTP client does not seem to perform any validation on the certificate and chain presented by the peer which is bad It means it does not provide any guarantees with respect to authenticity and confidentiality of TLS connections After reading the EventMachine documentation I understand the problem is that EventMachine leaves the actual validation of certificates up to the client Which means that this client should have implemented the sslverifypeer method It is up to user defined code to perform a check on the certificates The return value from this callback is used to accept or deny the peer A return value that is not nil or false triggers acceptance If the peer is not accepted the connection will be subsequently closed I dont know too much about the implementation of either EventMachine or this client but I dont think the implementation of certificate validation is something that should be left up to the client This is something that should in my opinion be implemented in EventMachine That said developers and maintainers do have a responsibility of warning developers that at this time using this client in production is dangerous Developers rightfully and reasonably expect HTTP clients that advertise HTTPS support to properly verify certificates I was thinking about At the very least the documentation and README should reflect that this client does not perform any validation of the certificate Possibly release a new version in which HTTPS support is disabled and the change log explains that validation is absent For the time being allow developers to continue using this client with HTTPS support using some not secure flag Reach out to the community and update vulnerability databases which means we need to request an identifier Especially considering how many projectslibraries still depend on emhttprequest broken with v HttpConnectionOptions Class httpconnectionoptions Change in forces the snihostname EVEN if already provided tls snihostname urihost Simple FIX to retain the snihostname IF already provided tls snihostname urihost Zlib provides automatic gzip detection for you so you dont need to skip over it by hand From inflateInit in the zlib manual also reflected in the ZlibInflatenew documentation Add to windowBits to enable zlib and gzip decoding with automatic header detection or add to decode only the gzip format So you can replace L of EventMachineHttpDecodersGzip with zlib with automatic gzip detection zstream ZlibInflatenew ZlibMAXWBITS And delete the code in GzipHeader to prevent bugs like 