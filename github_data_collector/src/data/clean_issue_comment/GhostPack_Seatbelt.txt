I have added three new functions The first is CheckDeviceGuard which checks the current status of CredentialGuard and its related services I added this function into the system enumeration I also added two functions to ListPowerShellSettings List Events and List Events These functions look for any recent instances of or events and then returns a count of how many were found Even if logging is not enabled there may still be events that could be of interest like commands executed remotely If full is provided as an option these functions will return some information about the events such as the namepath of the script and the account used to execute the commands The functions also collect the full contents of the commandsscript blocks but I commented out the output It can be a lot of text and may be better to grab the contents after triage In place of full scrip block output I experimented with searching the commands for instances of keywords like PSCredential and password to highlight events that may contain logged plaintext passwords When running seatbeltexe all on a machine it consistently errored out when encountering file names that were at the maximum permissible length in windows The following error was thrown Unhandled Exception SystemIOPathTooLongException The specified path file name or both are too long The fully qualified file name must be less than characters and the directory name must be less than characters at SystemIOPathSafeSetStackPointerValueChar buffer Int index Char value at SystemIOPathNormalizePathFastString path Boolean fullCheck at SystemIOFileGetLastAccessTimeUtcString path at SeatbeltProgramListInterestingFiles at SeatbeltProgramMainString args If the program can skip and maybe count how many files are skipped without crashing that would be desirable behavior Alternately handling the unusually long values and parsing them the same would be ideal Using the latest version of Seatbelt and compiled locally Related Thanks Hi there Would it be possible to incorporate support for the connectionsxml file that Oracle SQLDeveloper will drop containing hostnames and credentials Often useful for onward lateral movement I believe it is stored in Users User AppData Roaming SQL Developer System but also often under a subfolder such as Win C Users username AppData Roaming SQL Developer systemXXXXX ojdeveloperdbconnectionXXXXXXX connectionsxml or C users USER AppData Roaming SQL Developer system ojdeveloperdbconnection They can also be decrypted using something similar to this If I figure out how to do it within the code Ill do a PR but thought Id submit this issue so that others can see it also Added Carbon Black Defense and Cylance Protect executable processes to ListInterestingProcesses hashtable Simply added a new condition to IsVirtualMachine so that VMs running on Citrix XenServer are correctly reported as being virtual Added CSFalconContainerexe process Why these changes Similarly to the refactoring in Rubeus and Watson the line programcs class is a bit of a monster here too This is a nightmare to try to read and understand and will be a problem to maintain and add to going forward Whats changed in brief Each check has been moved to a probe class in Probes Added an option ToFile that allows outputting the results to a file Performance improvements around the filesystem scanning Before Completed All Safety Checks in seconds Now Completed All Safety Checks in seconds Merged PR and fixed a null reference exception PR Better handling of exceptions allowing checks to continue rather than fail early Rewritten command line arguments parser The command line isnt case sensitive any more What hasnt changed Any of the PInvoke voodoo The version number still Net this is a pain in the arse for VS tbh Comments While working on the code I noticed that all wasnt running all the available checks as the help text implied this version will run all the available checks if all is selected is this correct If not the ProbePresets AllPresetcs can simply be changed and the original lines uncommitted The probes are in the Probes folder and the Presets full all user system are in the ProbePresets Folder The new version produces a lot more output due to better coping with exceptions Testing Ive tested the changes on machines by piping the output from the original version and new versions and Diffing the output As far as I can see the functionality between the versions is unchanged except for newline differences and the extra output as noted above How to add new probes Every probecheck class needs to implement IProbe and have a ProbeName property to identify the check public class ANewProbe IProbe public static string ProbeName NewProbe public string List All code for the check goes here return the results as a string The program will automatically add the probe to the available probes and call it if required Just need to add the name info to the Infocs class Created a new ListAppLockerSettings function and added it to the system check Example output Seatbeltexe system snip AppLocker Settings AppIDSvc is Running Appx not configured Dll not configured Exe is in Audit Mode FilePathRule Id cc e f b acca NameDefault Rule All files located in the Program Files folder DescriptionAllows members of the Everyone group to run applications that are located in the Program Files folder UserOrGroupSidS ActionAllowConditionsFilePathCondition PathPROGRAMFILES ConditionsFilePathRule FilePathRule Ida c b ca cd d cad b NameDefault Rule All files located in the Windows folder DescriptionAllows members of the Everyone group to run applications that are located in the Windows folder UserOrGroupSidS ActionAllowConditionsFilePathCondition PathWINDIR ConditionsFilePathRule FilePathRule Idfd d a ff c de d NameDefault Rule All files DescriptionAllows members of the local Administrators group to run all applications UserOrGroupSidS ActionAllowConditionsFilePathCondition PathConditionsFilePathRule Msi not configured Script is in Enforce Mode No rules 