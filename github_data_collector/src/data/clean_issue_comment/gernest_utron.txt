Hey Just starting with go and trying to use uton because its look like a little familiar with the little i know I am using the todo application to start out but i cant discover hot to add more controllers I moved the original todo to a todo url and tried to make a new controllermodel for myapp The second controller got a bunch of duplicated declaration errors and no route in the second controller worked how do i get started in this I found the code below in sessiongo and I wonder this because gorillasessions has a method Store Get to retrieve a session with a given name GetSession retrieves session with a given name func ctx Context GetSessionname string sessionsSession error if ctxSessionStore nil return ctxSessionStoreNewctxRequest name return nil errNoStore This is a wonderful project that has grown in leaps and bounds over time as i have watched it for some time and the fact that it was started by a Tanzanian is super awesome I would suggest that a collective be opened here to enable it raise money to make more contributors give more time to work on the project and turn out releases faster the development of utron Ive added in a change to allow the default SimpleView implementation to be replaced by a custom View implementation Because all templates are parsed when NewMVC is called there is no way to have templates that rely on other templates in the views directory This change allows us to define supporting templates and add functions also Example usage utronViewSetViewFactoryfuncviewDir stringutronViewView error return viewNewComplexViewfragments viewDir viewsFuncMap app err utronNewMVCconfig Hi there This PR is to provide caching functionality out of the box a cache package As it stands at the moment the supported stores are Redis Memcache and map local This would allow for using any store interchangeably without having to change code The api is very simple to use and rather complete it allows for the use of tags and it also provides the ability to cache any given type of struct In addition the code is rather extendible if we were to add more stores we would just need to comply with the given interfaces and make the tests pass for the given store I believe the framework could benefit of something like this given to the fact that caching is a major component for any type of application and it keeps the framework lightweight I would say it makes it even more lightweight decreasing calls to the db I appreciate you taking the time to review this PR and I think what you are doing with utron is great Please let me know your thoughts and have a nice day Alejandro All public methods in controllers are mapped to url path by default Maybe will be better if only methods with suffix or prefix Action will mapped by default Some people cant knew that their methods open for public Example this will be parsed to todohome by default Method for routing func t Todo ActionHome todos modelsTodo tHTMLhttpStatusOK this wont be parsed by default Simple public method func t Todo Home todos modelsTodo tHTMLhttpStatusOK if user want to set path manual then he can set func NewTodo controllerController return Todo Routes string getHome Or maybe add some flexible settings for do it default parsing here Utron is missing benchmarks Add a sample booking application with new API Thats all I hope someone hires you and your friends 