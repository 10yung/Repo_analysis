Hi Could you please add NSThread bindings shouldnt be very hard Or is there a guide explaining adding new bindings Thanks This pull request includes Lowlevel CoreFoundation bindings for CFMutableData Implementation of CFMutableData type Implementation of IntoIterator trait for CFData Implementation of Deref DerefMut IntoIterator Extend and FromIterator trait for CFMutableData Tests for CFData and CFMutableData Potential future improvements When invalid CFRange is detected should we return a ResultErr instead of panicking dataIntoIter can be made more efficient Currently dataIntoIter calls CFDataGetBytePtr on every iteration We can instead call CFDataGetBytePtr only once and cache the data pointer for future iterations Not sure if this belongs here It would be awesome to have bindings to the CoreWLAN interface which provides functionality for WLAN and AirDrop Documentation Since macOS I do have access to a MacBook If you guys could provide me a small howto I can try to implement it myself and create a PR This could be useful for the authenticator and notify crates Calling this function twice in a row will crash the program I think the issue is that the implementation is creating a CGDisplayMode by taking a pointer to the display mode returned by CGDisplayCopyAllDisplayModes but the array is freed when the function returns I believe there is a doublefree happening here Adding a CGDisplayModeRetain call might solve the issue Im confused by the macros that this library uses so Im not sure that this is the correct solution however Hey there this is an initial work to make CGImages saveable and it was tested with the code below I didnt see much tests around should I add them with my PR I also put some TODOs on the code because those were questions that I could not answer Let me know if this is useful and I will keep with the work rust use coregraphicsdisplay kCGNullWindowID kCGWindowImageDefault kCGWindowListOptionAll CGDisplay CGPoint CGRect CGSize use coregraphicsimageCGImageDestination use corefoundationstringCFString use corefoundationurlCFURL fn main let position CGPointnew let size CGSizenew let bounds CGRectnew position size let screenshot CGDisplayscreenshot bounds kCGWindowListOptionAll kCGNullWindowID kCGWindowImageDefault unwrap let destination CGImageDestinationwithurl CFURLfrompathscreenshotbmp falseunwrap CFStringnewcommicrosoftbmp None destinationaddimagescreenshot None assertdestinationfinalize Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Elements in CFArray are pointers It should be ok to allow storing raw pointers usize etc in the CFArray but not any Copyable wait milliseconds elapsed thread runlooptestwait milliseconds panicked at assertion failed elapsed elapsed corefoundationsrcrunlooprs note Run with RUSTBACKTRACE for a backtrace test runlooptestwait milliseconds FAILED failures failures runlooptestwait milliseconds We should make it more reliable For example NSApplicationActivationOptions allow a value of default behaviour or a combination of flags NSApplicationActivateAllWindows NSApplicationActivateIgnoringOtherApps but with it being implemented as enum neither is not possible Refs Thoughts on this These crates are frustrating to use in Rust Adapting the Swift APIs would lead to a significantly better UX in the API We could offer the Objective C API in addition to the Swift API for some backwards compatibility though Im unsure if we could keep it as the types are just id aliases now 