Updates comgithubplokhotnyukjsoniterscalajsoniterscalacore comgithubplokhotnyukjsoniterscalajsoniterscalamacros from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId comgithubplokhotnyukjsoniterscala details labels libraryupdate semverpatch Updates comlihaoyiupickle from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId comlihaoyi artifactId upickle details labels libraryupdate semverpatch Hi we discovered an edgecase with akkahttpcirce the other day A working reproductioncase and explanation of the problematic mechanism is here The short version is If you have a null json value in a HttpResponse and try to unmarshal it using something like Unmarshalresponseto Option String youll get an DecodingFailure instead of the expected None value The reason behind this seems to be a fairly hidden feature of akkahttp where it interprets the Option as you trying to handle the DecodingFailure and forwards only the inner type here String to the implementation here circe Circe then tries to decode null as String and correctly fails Im not quite sure what to do about this other than avoid using Option as root type The implicit responsible for this is baked into Unmarshal so its always in scope It should also be noted that it only happens when unmarshalling HttpResponse HttpEntity doesnt seem to have this feature In our case we expected a nullable List so our workaround was to define a custom Decoder that avoids Option altogether but this is no general solution Workaround for nullable lists scala Custom decoder which decodes json arrays as lists but falls back to empty List if the json array is null implicit def decodeNullableList A Decoder Decoder List A DecoderdecodeList A or DecoderdecodeOption List A mapgetOrElseListempty Usage Unmarshalresponseto List String Im not sure if this is something that needs to be addressed with akkahttp directly In any case I hope this helps other poor souls that happen to stumble over this edgecase Cheers Felix Akka HTTP releases are not tied to a particular Akka version ie the x HTTP releases are compatible with the x Akka releases and the user is responsible of providing the actual akkaakkastream version to be used Since this library is mainly tied to a particular akkahttp version it would make sense to mark the other non http related dependencies as provided This way a user wanting to adopt this library would only need to find the version compatible with the akkahttp version he is running without worrying about the other akka transitive dependencies I got server side working but have problems with the client side The akkahttp samples are made with Sprayjson Im trying to replicate the same using Circe and akkahttpcirce Note This is just an early warning Looking into whats the problem precisely so I can expose a repo that showcases it in a few days Hi Is it possible to unmarshall generic types Here Ive reproduced an example that fails to compile due to Error could not find implicit value for parameter um akkahttpscaladslunmarshallingUnmarshaller akkahttpscaladslmodelHttpResponseRequeststhisSomeResponse T val unmarshalled Future SomeResponse T responseflatMapUnmarshalto SomeResponse T full REPL reproduction below See comment import akkaactorActorSystem import akkahttpscaladslHttp import akkahttpscaladslmarshallingMarshal import akkahttpscaladslmodelHttpMethods HttpRequest HttpResponse RequestEntity import akkahttpscaladslunmarshallingUnmarshal import akkastreamActorMaterializer import deheikoseebergerakkahttpcirceFailFastCirceSupport import iocircegenericauto import scalaconcurrentduration import scalaconcurrentAwait Future trait Requests extends FailFastCirceSupport implicit val system ActorSystemtestSystem implicit val ec systemdispatcher implicit val mat ActorMaterializer case class SomeRequestquery String case class SomeData T queryResponse T case class SomeResponse T data SomeData T case class SampleDatahello String def parseContent T SampleData query String val response Future HttpResponse requestContentSomeRequestquery See Comment This line wont compile unless I replace T with an explicit type like SampleData Why Is it be possible to use T somehow val unmarshalled Future SomeResponse T responseflatMapUnmarshalto SomeResponse T val hello Future String for root unmarshalled yield rootdataqueryResponsehello Awaitresult String hello seconds def requestContentrequest SomeRequest Future HttpResponse for request Marshalrequestto RequestEntity response HttpsingleRequestHttpRequest method HttpMethodsPOST uri entity request yield response object OtherRequests extends Requests val query query GetSomething results getSomething hello replaceAll d def getSome parseContent SampleData query OtherRequestsgetSome 