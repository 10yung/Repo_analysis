I am trying to integrate Tink to my Flutter app which also uses Firebase With rc I get this build errors in Android Execution failed for task appcheckDevelopmentDebugDuplicateClasses exception was raised by workers javalangRuntimeException javalangRuntimeException Duplicate class comgoogleprotobufAbstractMessageLite found in modules protobufjavalite jar comgoogleprotobufprotobufjavalite and protobuflite jar comgoogleprotobufprotobuflite Duplicate class comgoogleprotobufAbstractMessageLiteBuilder found in modules protobufjavalite jar comgoogleprotobufprotobufjavalite and protobuflite jar comgoogleprotobufprotobuflite Duplicate class comgoogleprotobufAbstractMessageLiteBuilderLimitedInputStream found in modules protobufjavalite jar comgoogleprotobufprotobufjavalite and protobuflite jar comgoogleprotobufprotobuflite Duplicate class comgoogleprotobufAbstractParser found in modules protobufjavalite jar comgoogleprotobufprotobufjavalite and protobuflite jar comgoogleprotobufprotobuflite Duplicate class comgoogleprotobufAbstractProtobufList found in modules protobufjavalite jar comgoogleprotobufprotobufjavalite and protobuflite jar comgoogleprotobufprotobuflite Duplicate class comgoogleprotobufAny found in modules classesjar comgooglefirebaseprotolitewellknowntypes and protobufjavalite jar comgoogleprotobufprotobufjavalite I have tried various suggestions mentioned in other protobuf related issues here but no solution found so far Issue disappears if I downgrade Tink to version rc so I am using it as a workaround for now Hi Im looking into Hybrid Encryption ECIES I generated a key pair and serialized it I noticed that the value of the public key once b decoded shows an internal type referencing to AES GCM Same for the private key I was wondering if it wouldnt be better to separate the typealgorithm not just ECIES but ECIESGCM from the public key value a point on an elliptic curve ideally ANSI X Were considering using Tink but wed like to progressively integrate it in existing systems so being able to deal with actual publicprivate keys is relatively important to us Any opinion on this Thank you Go AWS integration version rc has the issue in gointegrationawskmsawskmsaeadgo The code doesnt check error before accessing the response from KMS In case of KMS error the program fails with runtime error invalid memory address or nil pointer dereference tinkey command uses ServiceLoader but it didnt initialize keyUri member in KmsClient then it caused NullPointerException from such as withCredentialsProvider method I am trying to verify a JWT I can explicitly specify this signature format in the constructor to EcdsaVerifyJce and then verification works java EcdsaVerifyJce verifyJce new EcdsaVerifyJcepublicKey HashTypeSHA EllipticCurvesEcdsaEncodingIEEEP verifyJceverifyjwsgetSignatureBytes jwsgetSignedContentBytes but EcdsaVerifyJce is in subtle and so direct use is warned against If I use SignaturePemKeysetReader to read the keys then the underlying Keyset has DER uniformly set by convertEcPublicKey and so the following fails java KeysetReader reader SignaturePemKeysetReadernewBuilder addPemexamplePublicKey PemKeyTypeECDSAP SHA build KeysetHandle keysetHandle KeysetHandlereadNoSecretreader PublicKeyVerify verifier keysetHandlegetPrimitivePublicKeyVerifyclass verifierverifyjwsgetSignatureBytes jwsgetSignedContentBytes I havent yet found a way to either customize it or amend the EcdsaEncoding from outside the subtle packages Is there a way to do this The C howto and exampleshelloworldcchelloworld target depend on cccleartextkeytexthandle which does not have public visibility in Bazel As far as I can tell it is not possible for me to follow this example in a Bazel project that depends on Tink without forking Tink or doing bad hacks Is CleartextKeysetHandle supposed to be a public API the example in the go doc is failing due to the use of private key in the verifier it should use the public key instead also updated the example code with the most recent api changes Signedoffby Baha Shaaban bahashaabansecurekeycom Hi devs Seems android example project is obsolete Ive updated it Hi I am trying to use tinkcc library in a cpp application on macOS The cpp application uses openssl library for some cryptographic algorithms When I try to use tinkcc library which internally depends on boringssl I cant use openssl At a time one of the two libraries can be installed in usrlocal with the same name ie openssl Some of the algorithms are not supported by boringssl which is required in the application Could you please provide a solution Thanks in Advance