Very happy new year from the easysteam team to the easyteam and the easystats users May this year be the wisdom year for us with a perfecting and stabilising ecosystem I wish us more awesome features and more outreach blogposts publications tweets and word of mouth so that more users are pulled from the dark side where they are chained by their fear of stats and R and brought to the light side of best practices and honest science We will need all our and your help to defeat the challenges to come Palpatines maniacal laugh resonates Looking forward to the future strengejacke pdwaggoner mattansb IndrajeetPatil humanfactors jacoblong lindeloev Dear easystats friends Im planning some releases in January insight parameters see after implementing plotsi I think that all relevant issues are addressed and features implemented or do you have any suggestions DominiqueMakowski mattansb IndrajeetPatil Two of our packages that are on CRAN are already in task views effectsize parameters We may think of recommending bayestestR for the Bayes task view as well strengejacke DominiqueMakowski Lets open this up here officially I think this paper can be quite short really Here I am preregestering my hypotheses For posteriorbased indices which is all but the BFs the degree by which they are affected by priors looks like this That is weaktoflat priors have close to no effect on the indices but as the priors grow more narrow the indices become reflections of the prior rather than the data or a mix of the prior and the data This is the reverse JeffreysLindleyBartlett paradox For BFs we will get the classic JeffreysLindleyBartlett paradox where moreflat priors result in BFs supporting the null The more the priors do not match the data eg prior centered around but data is centered around the stronger BF will support the null When can then talk about why it is dangerous to treat the posterior based indices as objective and why BFs should only be used when researchers have informative weak or strong priors they want to test That is posterior indices are descriptive of the posterior prior data and not the data alone while BFs are not descriptive of the data posterior they are indicative of the match between data prior Where we might run into trouble is with reviewers asking we suggest priors so we should emphasis that our focus is not on correct prior selection but on correct inference using Bayesian indices As for who should take the helm on this paper My plan is to leave academia post PhD but of course I will be an rdeveloper EVA so firstauthored papers will serve you two better than they will serve me So this is up to you guys Number of functions associated with PCAFA and cluster analysis is increasing in parameters so I thought if it would make sense in the near or far future to move these into an own package This is sort of a question but I do think any answers would be well placed in a wiki or some form of contribution guidelines documentation In short Im actually not sure the best way to set setup easystats in a development environment Theres really two parts to this Not issue for me Firstly should a new user want to help contribute my understanding is that they would need to first install all easystats packages on the dev branch installeasystatsdev function devtoolsinstallgithubceasystatsinsight easystatsbayestestR easystatsperformance easystatsparameters easystatseffectsize easystatscorrelation easystatsestimate easystatssee easystatsreport ref dev upgrade never This isnt documented on the main page and while its certainly not a big issue the instructions in the READMEmd imply to me that youd first devtoolsinstallgithubeasystatseasystats and then call installeasystatsdev but this seems excessive of course I actually should note that I have had a few troubles installing with installeasystatsdev when Ive already had dev packages installed but I havent really had time to debug My confusion For packages that I contribute too or modify I obviously have my own fork of the package I then develop a branch on this and make sure I am regularly updating the other packages to the dev branch To be honest this actually works fine but it does make it hard to scale up to keeping track of developing multiple packages in this expanding and quite large ecosystem Im guessing theres an alternative in which I can fork and then clone every single easystats package but this is of course completely overkill and unmaintainable for my brain I imagine this is what you have setup DominiqueMakowski One issue here is in debugging problems users that users report on the master branches or for creating an isolated environment for developing a package and not ruining my existing install of easystats eg development of insight Ive been thinking about setting up an renv but given the cross dependencies but Im not sure if this is overkill again and Im sure theres a better solution TLDR How do you set up your easystats development environment How isolate production from development I think whatever answers emerge here would be worth documenting a best practice to help contributors come up to speed I landed at this because tonight I landed at a bug in report which effectively was caused by an older development version of parameters and I just reinstalled everything from scratch Best all Im just putting this there but it would be super cool to have some money to organize some kind of workshop to gather ourselves and spread the news and to be able to decently pay some intern or student to contribute there are many areas that could be easily improved in the context of a training such as documentation testing etc and get filthy rich of course If you hear of any grant call to which we could apply do let it know Currently for most of check the print is within the function Ie the printing occurs during function run rather than output printing as there is no specific class nor printing methods for check objects For some check this is a limitation as the function might return stuff or be possibly connected to a plot method Thus I think we might want to create a generic easystatscheck class and all check functions would return a list containing at least a text and a color object Then we could add a print method in insight that would print the text with the right colour This would make thing more flexible an example implementation was added for checkclusterstructure Is there any particular reason why we are not checking package builds on Windows CI services like AppVeyor Currently we only have Travis builds for linux and macOS but it will be good to have the same for Windows platform If you agree I can set up yaml files for repos I was admiring looking at the functions list and I thought it would be funny to do some clusteringnetwork analysis as they do with texts to visualise and summarise the different types and groups of functions Unfortunately I have no idea how to do that 