Based on discussion in it seems we can enable this test It passes locally Lets see if it passes in CI When I try this without docker it works fine But when I use the docker image of the same code the video doesnt connect acandidate udp typ host generation networkid acandidate tcp typ host tcptype passive generation I am getting only one ice candidate with the docker IP and not the host machine IP Any workaround will be highly appreciated Twinme has posted a workaround for the PhysicalSocketServer issue wherein an RTCPeerConnection could end up using more than FDSETSIZE sockets leading to a crash We should try to apply this patch when building Check out for context This would also likely fix and an issue Ive noticed with at least one of the WPT tests RTCConfigurationiceCandidatePoolSizehtml Whoever takes this will need to adapt our CMakeListstxt to apply the patch before building the webrtcorg code RTCSdpType rollback type is not supported by nodewebrtc According to negotiationneeded event shouldnt be fired when signalingState is not stable By receiving offer setting it with localDescription and then calling addTrack you can check negotiationneeded is fired even when signalingState is haveremoteoffer I checked google webrtc native source and it seems it fires negotiationneeded event whenever direction property of RtpTransceiver which does not comply with AddTrack part of Refer to crash issue Thread debugging using libthreaddb enabled Using host libthreaddb library libx linuxgnulibthreaddbso Core was generated by homeyhuworkspacexxxxxnodemoduleselectrondistelectron inspect Program terminated with signal SIGSEGV Segmentation fault x f b f in nodewebrtcRTCDataChannelCleanupInternals from homeyhuworkspacexxxxxxnodemoduleswrtcbuildReleasewrtcnode Current thread is Thread x f ba b LWP gdb bt x f b f in nodewebrtcRTCDataChannelCleanupInternals from homeyhuworkspacexxxxxnodemoduleswrtcbuildReleasewrtcnode x f b b e in nodewebrtcRTCDataChannelOnPeerConnectionClosed from homeyhuworkspacexxxxxnodemoduleswrtcbuildReleasewrtcnode x f b c ec in nodewebrtcRTCPeerConnectionCloseNapiCallbackInfo const from homeyhuworkspacexxxxxnodemoduleswrtcbuildReleasewrtcnode x f b d in NapiObjectWrapnodewebrtcRTCPeerConnectionInstanceMethodCallbackWrappernapienv napicallbackinfo from homeyhuworkspacexxxxxnodemoduleswrtcbuildReleasewrtcnode x c e in x c df a in x ffec f db in x in gdb var pc new RTCPeerConnectionoptions pcondatachannel functionevent var channel eventchannel channelonopen functionevent channelsendHi back after this point we close offer side software and periodically check channelreadyState its always open channelonmessage functionevent consolelogeventdata When I create a peer connection in the browser and send an offer to connect to another peer on the server everything works fine However when I create a peer on server first and send the offer over to the browser ice gathering is never triggered Serverjs let remoteRTCpeer new RTCPeerConnectionconfiguration setup icehandler getUserMediaaudio truevideo true then stream streamgetTracksforEachtrack remoteRTCpeer addTracktrack stream let offer null try offer await remoteRTCpeercreateOffer catch err consoleerrorerror in offer err remoteRTCpeer setLocalDescriptionoffer send offer to browser browserjs set up ice handler create answer from offer and set it as localdescription The offer and answer is created seemingly correct but ice gathering is not being triggered Example of an offer created from the server type offer sdp v o IN IP s t amsidsemantic WMS Ref 