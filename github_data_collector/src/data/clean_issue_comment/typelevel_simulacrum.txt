Updates comgithubgseitzsbtrelease from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId comgithubgseitz artifactId sbtrelease details labels sbtpluginupdate semverpatch Updates orgscalasbtsbt from to Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgscalasbt artifactId sbt details labels libraryupdate semverpatch op annotation causing compilation error on typeclass works perfectly fine Reference project hicoloursimulacrum op Reference build without op with op sbtversion lazy val root project in file settings name simulacrum op organization comprochera version libraryDependencies Seq orgtypelevel simulacrum scalaVersion scalacOptions List unchecked deprecation Ymacroannotations languagehigherKinds languageimplicitConversions Fail with op annotation scala import simulacrum typeclass trait Semigroup A op def appendx A y A A simulacrum opsrcmainscalaOpAnnotationExceptionscala exception during macro expansion error scalareflectmacrosTypecheckException not found type op error at scalareflectmacroscontextsTypersanonfuntypecheck Typersscala error at scalareflectmacroscontextsTypersanonfuntypecheck Typersscala error at scalareflectmacroscontextsTypersdoTypecheck Typersscala error at scalareflectmacroscontextsTypersanonfuntypecheck Typersscala error at scalareflectinternalTreeswrappingIntoTermTreesscala error at scalareflectinternalTreeswrappingIntoTermTreesscala error at scalareflectinternalSymbolTablewrappingIntoTermSymbolTablescala error at scalareflectmacroscontextsTyperstypecheckTypersscala error at scalareflectmacroscontextsTyperstypecheckTypersscala error at scalareflectmacroscontextsContexttypecheckContextscala error at scalareflectmacroscontextsContexttypecheckContextscala error at simulacrumTypeClassMacrosanonfungenerateTypeClass typeclassscala error at simulacrumTypeClassMacrosanonfungenerateTypeClass adaptedtypeclassscala error at scalacollectionimmutableListfilterListscala error at simulacrumTypeClassMacrosfilterSimulacrumAnnotations typeclassscala error at simulacrumTypeClassMacrosanonfungenerateTypeClass typeclassscala error at scalacollectionimmutableListmapListscala error at simulacrumTypeClassMacrosmodify typeclassscala error at simulacrumTypeClassMacrosgenerateTypeClasstypeclassscala error typeclass trait Semigroup A error error one error found error Compile compileIncremental Compilation failed Compile without op scala import simulacrum typeclass trait Semigroup A def appendx A y A A success Total time s completed After playing around a bit with simulacrum i have seen a few weird maybe behaviours typeclass trait TestClass S def test P I a S P I I Works Adding second argument to test typeclass trait TestClass S def test P I a S P I x I I results in type mismatch found S P I required S P Any typeclass trait TestClass S Going back to the first example Lets add a Constraint on P typeclass trait TestClass S def test P Foldable I a S P I I also works So lets add a constraint on I typeclass trait TestClass S def test P Foldable I Eq a S P I I results in found catsEq A which expands to catskernelEq A required catsEq I which expands to catskernelEq I typeclass trait TestClass S Is this the desired behaviour Hi Ive been working on the issue at cats and have found strange behavior of simulacrum Ive implemented a method def foldA G A fga F G A implicit G Applicative G A Monoid A G A for Foldable and its compiled to def foldA G A implicit evmacro D G A G Applicative G A Monoid D typeClassInstancefoldAselfasInstanceOf F G A G A which fails with this error type mismatch found catsMonoid D which expands to catskernelMonoid D required catsMonoid A which expands to catskernelMonoid A typeclass trait Foldable F extends UnorderedFoldable F self Is it a bug or am I doing something wrong Hi If I try and use Simulcrum on the following typeclass trait Functor F self def map A B fa F A f A B F B def widen A B A fa F A F B faasInstanceOf F B def xyz A B ff F A B a A F B I get a compiler error pastie error not found type A def widen A B A fa F A F B faasInstanceOf F B pastie error type arguments CB do not conform to method widens type parameter bounds AB A typeclass trait Functor F self If I rewrite widen not to use a type bound typeclass trait Functor F self def map A B fa F A f A B F B def widen A B fa F A implicit ev A B F B faasInstanceOf F B def xyz A B ff F A B a A F B then I dont get any compilation errors Am I using Simulcrum incorrectly or is this a bug Hi how can define function with varargs b can not be A does works with List A Any idea how to make it works Thanks typeclass trait CanTruthy A self Return true if a is truthy def truthya A b A Boolean object CanTruthy def fromTruthy A f A Boolean CanTruthy A new CanTruthy A def truthya A b A Boolean fa Currently annotating a type with typeclass generates members that dont have explicit return types This conflicts with the WartPublicInference WartRemover rule You can see this issue with the simulacrum library by making adding this wart to buildsbt see diff below This results in a bunch of errors similar to the following srctestscalasimulacrumexamplesexamplesscala wartremoverPublicInference Public member must have an explicit type ascription error typeclass trait Semigroup A error diff diff git abuildsbt bbuildsbt index f d e f abuildsbt bbuildsbt lazy val commonSettings Seq useGpgAgent true wartremoverErrors in Test compile Seq WartExplicitImplicitTypes WartImplicitConversion WartImplicitConversion WartPublicInference SeqCompile Testmap scope scalacOptions in scope compile CrossVersionpartialVersionscalaVersionvalue match See the sibling issue at I will consider scalagen production ready once that issue is closed With scalagen simulacrum should be able to support SNSJSScala Dotty all with one jar Scalagen most likely will not be ready to do this till end of Jan The following scala typeclass trait Local F def lmap spInt Double A self F A f A A F A is specialized and we see nice performance if we call it manually say via scala val arr Array Int Local Array lmaparr f but the specialization is lost if we use the injected ops method scala arrlmapf Checking simulacrums output we see scala trait Local F extends rootscalaAny with rootscalaSerializable def lmap spInt Double A self F A f rootscalaFunction A A F A object Local scalainline def apply F implicit instance Local F Local F instance trait Ops F A type TypeClassType Local F val typeClassInstance TypeClassType def self F A def lmapf rootscalaFunction A A typeClassInstancelmap A self f etc and notice that A in Ops isnt specialized Okay so lets add write it in manually ourselves We write this A as specializedInt Double A and do the same in ToLocalOps scala trait ToLocalOps javalangSuppressWarningsscalaArrayorgwartremoverwartsExplicitImplicitTypes orgwartremoverwartsImplicitConversion implicit def toLocalOps F spInt Double A target F A implicit tc Local F Ops F A type TypeClassType Local F final class anon extends Ops F A type TypeClassType Local F val self target val typeClassInstance TypeClassType tc new anon but when we compile type mismatch error found geotrellisLocal F error required geotrellisLocal F error val typeClassInstance TypeClassType tc error which is very perplexing error tc clearly has the type Local F as we can see from implicit tc Local F Any idea whats happening here