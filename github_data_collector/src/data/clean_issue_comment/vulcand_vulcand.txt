 Allow users to optionally specify the engine with engine engine Defaults to etcd engine to maintain current default behavior but allows memng option I installed v alpha of Vulcand and etcd However when I run them both ubuntu usrsbinetcdetcd name etcd datadir tmpetcds listenclienturls advertiseclienturls listenpeerurls initialadvertisepeerurls initialcluster etcd initialclustertoken tkn initialclusterstate new ubuntu usrsbinvulcandvulcand apiInterface etcd I get Oct ERROR PID servicego Failed to start service invalid character p after toplevel value Service exited with error service start failure invalid character p after toplevel value I believe this is because etcd is returning page not found for whatever URL vulcand is calling which makes me believe its a version mismatch Or am I just doing it wrong This is not really an issue but rather me documenting what has been done I merged githubcomvulcandvulcanddocs using subtree merge preserving history to this repo and reconfigured ReadTheDocs to feed from it This way it will be easier to keep docs in sync with the code and have documentation generated for specific tags I am going to remove the obsolete docs repo to avoid confusion if nobody objects Mailgun will no longer support its fork of We only used it to achieve graceful HTTP server shutdown and now we have that outofthebox in Golang So vulcand project has two options either create its own fork of the repo or absorb pieces that it needs I do not have enough knowledge in what manners features are needed by vulcand so I cannot make this call klizhentas archisgore pquerna what is going to be your opinion on that In our production environment vulcand instances have grown to consume up to Gb of VSZ at rest Lazy frontend initialization PR helped to bring the size down to Gb in most cases But that was not good enough Using v pprofheap API endpoint PR we discovered that more than of that memory is consumed by the RealTime metrics watcher initialized in proxy frontends Since we never actually use data that it collects we just removed it from the code and that brought sizes of our instances down to less than Gb Metrics collector can be useful sometimes so removing it altogether is not an option but a more memory efficient way to use it should be implemented Eg we can provide API to enabledisable it explicitly whenever it is needed That is in fact what I am going to implement Unless somebody has a better idea Speak up The last published release and docker image is more than a year old It seems that since then a lot happened in the repo Which version are new users supposed to use In some UTs under the proxy package NewReaderconnReadString n will return an error EOF Basically theres a premature EOF before n is found I added plenty of debugginglogging statements to both manners and oxytestutils Responders but couldnt figure this out This issue is mainly for me to go nail down whats happening As a side note whenever an OCSPResponse is sent back by the server the server apparently does not call the serverside handler Aka a connection either gives back an OCSP response or the response body but not both I dont know if this is a golang implementation limitation an HTTP spec or a bug in oxy Ill figure this out early next week too Adopted coreos etcd envconfig lib to be used in vulcand Mixed config is possible flags have priority to the env vars Example usage VULCANDAPIINTERFACE VULCANDPORT vulcand logSeverity debug Note ParseCommandLine renamed to ParseRunOptions for the sake of correctness since it parses not only CLI input but also env vars now Addressed in Added additional client certificate tls options for backends Can be used for example when the receiving side upstream performs certificatebased authentication Not sure if it was possible to make it on the middleware level since middleware works with HTTP requests while SSL connection is established on the lower level Also it addresses the Short description and limitations This code assumes that certificates are stored in the same place across the installation and have the same name In my case this assumption holds but it would fail in the general case Im not sure how to make the same trick for the general case probably by adding the ClientCert field to the host node Probably someone asked this question beforeBut I cant find the answer Are you guys planning to support consul for this great product I would be good as you it would be able to penetrate into other platforms and reach audience which uses Consul instead of etcd Thanks Zoran 