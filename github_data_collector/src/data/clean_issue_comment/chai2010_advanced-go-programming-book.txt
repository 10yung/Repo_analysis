 Channel Channel K KC C Channel main Channel Channel K KC C Channel channel happens before send receive send receive Inside of the variadic function func Suma int more int more is a slice of int int Since it is the compiler converts the variadic parameters into a slice of type int But when defining the variadic function it is incorrect to claim more int int int Tyring Sum int causes a stack overflow error Since more is already a slice and compiler tries to create a new slice from int which is an invalid behavior instead it will cause the compiler eat up all the stack until overflow Therefore the correct way to pass a slice into a variadic function is Sum int which unpacks the slice to fit variadic parameters The rd example is also kind of misleading Yes it works but it is not needed to unpack a slice of empty interface when using fmtPrintln golang var a interface abc fmtPrintlna will also print abc because it is an empty interface These two examples are inappropriate to show the feature of variadic parameters interface type and unpack in golang The example only basically show the code works but lack of thoughtful explanation how and why they are work Which are misleading as I explained above Fix Book translated to english Although some code needs to be fixed and request for grammer check int ch qsort Go go run maingo aiqaiqfrank Downloadsadvancedgoprogrammingbookexamplesch qsortv master go run maingo build homeaiqDownloadsadvancedgoprogrammingbookexamplesch qsortv cannot find module for path homeaiqDownloadsadvancedgoprogrammingbookexamplesch qsortv Imgur When GRPC protobuf generates the pbgo file does it necessarily define the message structure as a pointer Is there any way to avoid this P Subscribe P SubscribeTopic clientSubscribe A golang func main x int funcarr int arr fmtPrintlnarr x fmtPrintlnx 