Does NPOCO support MicrosoftDataSqlite Im looking at moving a project to Net Core and to get encryption I may have to switch over to the Microsoft drivers DBFactory module c using NPoco using SystemDataCommon using DBAInternalAPIModels using MicrosoftExtensionsLogging namespace DBAInternalAPIServices public interface IDBFactory IDatabase GetConnection public class DBFactory IDBFactory private readonly string connectionString private DbConnection conn private readonly ILogger p public DBFactoryIMySQLDatabaseSettings setting ILoggerDBFactory logger p logger connectionString settingConnectionString public IDatabase GetConnection conn new MySqlDataMySqlClientMySqlConnectionconnectionString connOpen return new Databaseconn controller init func c public XXXControllerILoggerDDBController logger IDBFactory dbFactory p logger db dbFactoryGetConnection GET HttpGetversionstat public ActionResultStandardResponseInstanceVersionCount GetVersionStat var sql pLogDebugQuery database by sql var data dbFetchInstanceVersionCountsql return Jsonnew statusCode data When many of this type ActionResult called sametimeit crash with INF MicrosoftAspNetCoreRoutingEndpointMiddleware Executed endpoint DBAInternalAPIAreaMySQLControllersMySQLControllerGetVersionStat DBAInternalAPI ERR MicrosoftAspNetCoreServerKestrel Connection id HLRN RMTIDGS Request id HLRN RMTIDGS An unhandled exception was thrown by the application MySqlDataMySqlClientMySqlException x There is already an open DataReader associated with this Connection which must be closed first at MySqlDataMySqlClientInterceptorsExceptionInterceptorThrowException exception at MySqlDataMySqlClientMySqlConnectionThrowException ex at MySqlDataMySqlClientMySqlCommandThrowException ex at MySqlDataMySqlClientMySqlCommandExecuteReaderCommandBehavior behavior at NPocoDatabaseExecuteReaderHelperDbCommand cmd at NPocoDatabaseExecuteDataReaderDbCommand cmd at NPocoDatabaseQueryImp T T instance Expression listExpression Func idFunc Sql SqlMoveNext at SystemCollectionsGenericList ctorIEnumerable collection at SystemLinqEnumerableToList TSource IEnumerable source at DBAInternalAPIAreaMySQLControllersMySQLControllerGetVersionStat in UserspsyduckProjectsSALDBAInternalAPIAreasMySQLControllersMySQLControllercsline at lambdamethodClosure Object Object at MicrosoftAspNetCoreMvcInfrastructureActionMethodExecutorSyncObjectResultExecutorExecuteIActionResultTypeMapper mapper ObjectMethodExecutor executor Object controller Object arguments at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerInvokeActionMethodAsync at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerNextState next Scope scope Object state Boolean isCompleted at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerInvokeNextActionFilterAsync End of stack trace from previous location where exception was thrown at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerRethrowActionExecutedContextSealed context at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerNextState next Scope scope Object state Boolean isCompleted at MicrosoftAspNetCoreMvcInfrastructureControllerActionInvokerInvokeInnerFilterAsync End of stack trace from previous location where exception was thrown at MicrosoftAspNetCoreMvcInfrastructureResourceInvokerInvokeFilterPipelineAsyncgAwaited ResourceInvoker invoker Task lastTask State next Scope scope Object state Boolean isCompleted at MicrosoftAspNetCoreMvcInfrastructureResourceInvokerInvokeAsyncgLogged ResourceInvoker invoker at MicrosoftAspNetCoreRoutingEndpointMiddlewareInvokegAwaitRequestTask Endpoint endpoint Task requestTask ILogger logger at MicrosoftAspNetCoreAuthorizationAuthorizationMiddlewareInvokeHttpContext context at MicrosoftAspNetCoreAuthenticationAuthenticationMiddlewareInvokeHttpContext context at MicrosoftAspNetCoreServerKestrelCoreInternalHttpHttpProtocolProcessRequests TContext IHttpApplication application A NET DateTime value is always mapped to SQL datetime type loosing accuracy at least in the case that the MS SQL type of the value is datetime See DatabaseTypecs lines and For full accuracy it would be necessary to change the target type in the mapping to DbTypeDateTime for DateTime and DateTime type in case that the target database tables corresponding column type is datetime when update or insert a entity if a field is null this field will be ingore when i update i dont want to update or insert nullfield can i except it some database update a null value is error Tried everything I can but couldnt make it through Need it for unit testing Any ideas Any working examples using any mocking framework Thanks When using a poco with a combination of inheritance and a nested class complex mapping NPoco maps incorrect values into properties having the same names Id in my case Tested on SQL Server using NET Core and Npoco versions and To reproduce create a NET Core Console application and replace Programcs with the following code c class Program public abstract class Entity public Guid Id get set public long Version get set public enum ScopeType Full Partial public class Owner public Guid Id get set public ScopeType Scope get set public class OneInherited Entity public OneInherited Manys new ListMany public string Name get set public Referenced Referenced get set public string ReferencedName get set public Owner Owner get set public ListMany Manys get set public class One public One Manys new ListMany public Guid Id get set public long Version get set public string Name get set public Referenced Referenced get set public string ReferencedName get set public Owner Owner get set public ListMany Manys get set public class Referenced Entity public string Name get set public class Many Entity public Guid OneId get set public string Name get set public class EntityMap MapEntity public EntityMap thisnew TypeDefinitiontypeofEntity public EntityMapTypeDefinition t baset Columnsx xColumny yId xColumny yVersionVersionVersionColumnTypeNumber public class OneInheritedMap MapOneInherited public OneInheritedMap thisnew TypeDefinitiontypeofOneInherited public OneInheritedMapTypeDefinition t baset UseMapEntityMap TableNameOnesPrimaryKeyx xId false Columnsx xColumny yName xColumny yReferencedWithNameReferencedNameReferencer rName ReferenceTypeOneToOne xColumny yOwnerComplexMappingOwner xManyy yManysWithNameIdReferencez zOneId public class OneMap MapOne public OneMap thisnew TypeDefinitiontypeofOne public OneMapTypeDefinition t baset TableNameOnesPrimaryKeyx xId false Columnsx xColumny yId xColumny yVersionVersionVersionColumnTypeNumber xColumny yName xColumny yReferencedWithNameReferencedNameReferencer rName ReferenceTypeOneToOne xColumny yOwnerComplexMappingOwner xManyy yManysWithNameIdReferencez zOneId public class ReferencedMap MapReferenced public ReferencedMap thisnew TypeDefinitiontypeofReferenced public ReferencedMapTypeDefinition t baset TableNameReferencedsPrimaryKeyx xId false UseMapEntityMap Columnsx xColumny yName public class ManyMap MapMany public ManyMap thisnew TypeDefinitiontypeofMany public ManyMapTypeDefinition t baset TableNameManysPrimaryKeyx xId false UseMapEntityMap Columnsx xColumny yName xColumny yOneId static void Mainstring args var connectionString ConnectionStringToNpocoDatabaseGoesHere var maps AssemblyGetAssemblytypeofEntityMapGetTypesWheret typeofIMapIsAssignableFromt Selectt ActivatorCreateInstancet as IMapToArray var factory DatabaseFactoryConfigx xUsingDatabase new DatabaseconnectionString DatabaseTypeSqlServer SqlClientFactoryInstance xWithFluentConfigFluentMappingConfigurationConfiguremaps using var db factoryGetDatabase var oneId new GuidA A D ABD F DEFDCC var manyId new Guid BB F FA E A C A FF A C E var manyId new Guid A BF B D F B B var ownerId new Guid C CC F DEA D DD CB var referencedId new GuidB FA E AFAF F F insert test data var referenced new Referenced Id referencedId Name Referenced dbInsertreferenced We just use one of the two Ones when inserting var one new OneInherited Id oneId Name Test ReferencedName referencedName Owner new Owner Id ownerId Scope ScopeTypeFull oneManysAddnew Many Id manyId OneId oneId Name Many oneManysAddnew Many Id manyId OneId oneId Name Many dbInsertone dbInsertBatchoneManys Fetch an inherited One var failing dbQueryOneInherited Includeo oReferenced IncludeManyo oManys Singleo oId oneId Fetch One without base class var succeeding dbQueryOne Includeo oReferenced IncludeManyo oManys Singleo oId oneId ConsoleWriteLineFailing Id failingId ConsoleWriteLineFailing Version failingVersion foreach var many in failingManys ConsoleWriteLineFailing manyId manyId ConsoleWriteLineFailing manyOneId manyOneId ConsoleWriteLineFailing OwnerId failingOwnerId ConsoleWriteLineFailing OwnerScope failingOwnerScope ConsoleWriteLineFailing ReferencedId failingReferencedId ConsoleWriteLine n ConsoleWriteLineSucceeding Id succeedingId ConsoleWriteLineSucceeding Version succeedingVersion foreach var many in succeedingManys ConsoleWriteLineSucceeding manyId manyId ConsoleWriteLineSucceeding manyOneId manyOneId ConsoleWriteLineSucceeding OwnerId succeedingOwnerId ConsoleWriteLineSucceeding OwnerScope succeedingOwnerScope ConsoleWriteLineSucceeding ReferencedId succeedingReferencedId ConsoleWriteLine n ConsoleWriteLinePress ENTER to exit ConsoleReadLine Create a SQL Server database named npoco and run the following sql script to create the tables sql USE npoco GO SET ANSINULLS ON GO SET QUOTEDIDENTIFIER ON GO CREATE TABLE dbo Manys Id uniqueidentifier NOT NULL Version bigint NOT NULL Name nvarchar NOT NULL OneId uniqueidentifier NOT NULL CONSTRAINT PKManys PRIMARY KEY CLUSTERED Id ASC WITH PADINDEX OFF STATISTICSNORECOMPUTE OFF IGNOREDUPKEY OFF ALLOWROWLOCKS ON ALLOWPAGELOCKS ON ON PRIMARY ON PRIMARY GO SET ANSINULLS ON GO SET QUOTEDIDENTIFIER ON GO CREATE TABLE dbo Ones Id uniqueidentifier NOT NULL Version bigint NOT NULL Name nvarchar NOT NULL ReferencedName nvarchar NOT NULL OwnerId uniqueidentifier NULL OwnerScope int NULL CONSTRAINT PKOnes PRIMARY KEY CLUSTERED Id ASC WITH PADINDEX OFF STATISTICSNORECOMPUTE OFF IGNOREDUPKEY OFF ALLOWROWLOCKS ON ALLOWPAGELOCKS ON ON PRIMARY ON PRIMARY GO SET ANSINULLS ON GO SET QUOTEDIDENTIFIER ON GO CREATE TABLE dbo Referenceds Id uniqueidentifier NOT NULL Version bigint NOT NULL Name nvarchar NOT NULL CONSTRAINT PKReferenceds PRIMARY KEY CLUSTERED Id ASC WITH PADINDEX OFF STATISTICSNORECOMPUTE OFF IGNOREDUPKEY OFF ALLOWROWLOCKS ON ALLOWPAGELOCKS ON ON PRIMARY ON PRIMARY GO ALTER TABLE dbo Manys WITH CHECK ADD CONSTRAINT FKManysOnes FOREIGN KEY OneId REFERENCES dbo Ones Id GO ALTER TABLE dbo Manys CHECK CONSTRAINT FKManysOnes GO ALTER TABLE dbo Ones WITH CHECK ADD CONSTRAINT FKOnesReferenceds FOREIGN KEY ReferencedName REFERENCES dbo Referenceds Name GO ALTER TABLE dbo Ones CHECK CONSTRAINT FKOnesReferenceds GO The output when running this application is Failing Id Failing Version Failing manyId a a d abd f defdcc Failing manyOneId a a d abd f defdcc Failing manyId a a d abd f defdcc Failing manyOneId a a d abd f defdcc Failing OwnerId c cc f dea d dd cb Failing OwnerScope Full Failing ReferencedId b fa e afaf f f Succeeding Id a a d abd f defdcc Succeeding Version Succeeding manyId bb f fa e a c a ff a c e Succeeding manyOneId a a d abd f defdcc Succeeding manyId a bf b d f b b Succeeding manyOneId a a d abd f defdcc Succeeding OwnerId c cc f dea d dd cb Succeeding OwnerScope Full Succeeding ReferencedId b fa e afaf f f Press ENTER to exit Hi When DbEnableAutoSelect is set to false then databaseFetchAsync throws the following error SystemInvalidOperationException BeginExecuteReader CommandText property has not been initialized if we dont set to false then works fine Npoco Version Net Core Version Thanks for this great ORM Hi Ive just found out that any changes on version column before deleting an item is not checked So It seems that the concurrency check does not work for deletion Im referring to the method DeleteAsync Is that a bug or a wanted behavior Thanks Enrico