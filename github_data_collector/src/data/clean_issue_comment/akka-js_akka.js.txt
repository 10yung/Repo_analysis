This fix I already published a snapshot version from that branch fixCircuitBreaker SNAPSHOT and tested it against this repro and everything looks fine mliarakos do you mind to doublecheck and validate Thanks again for the report The Akka CircuitBreaker uses javautilfunctionConsumer which is not implemented in Scalajs Ive submitted to add an implementation Once its merged Akkajs will need to update to the latest Scalajs If that takes a while for that PR to be merged and released I can provide a PR to Akkajs with the implementation until a new Scalajs is released The Akka CircuitBreaker should transition from the Closed state to the Open state when a call fails However in Akkajs the CircuitBreaker appears to fail to transition state from Closed to Open with an IllegalStateException To reproduce the issue checkout the akkajscircuitbreaker project The stack trace is javalangIllegalStateException exception in sameThreadExecutionContext at cjlIllegalStateExceptioncjlThrowablefillInStackTracejlThrowableakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at cjlIllegalStateExceptioncjlThrowableinitTjlThrowableZZakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at javalangIllegalStateExceptioninitakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkadispatchExecutionContextssameThreadExecutionContextreportFailureakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplCallbackRunnableexecuteWithValueakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplPromiseKeptPromiseKeptonCompleteakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplPromiseKeptPromiseFailedonCompleteakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkapatternCircuitBreakerStatecallThroughakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkapatternCircuitBreakerClosedinvokeakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at comgithubmliarakosCircuitBreakerSpecfailedCallakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs Caused by javalangIllegalStateException exception in sameThreadExecutionContext at cjlIllegalStateExceptioncjlThrowablefillInStackTracejlThrowableakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at cjlIllegalStateExceptioncjlThrowableinitTjlThrowableZZakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at javalangIllegalStateExceptioninitakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkadispatchExecutionContextssameThreadExecutionContextreportFailureakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplCallbackRunnablerunakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at cLakkadispatchBatchingExecutorBatchcLakkadispatchBatchingExecutorAbstractBatchprocessBatchLakkadispatchBatchingExecutorAbstractBatchVakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkadispatchBatchingExecutorBatchrunakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkadispatchBatchingExecutorexecuteakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkadispatchExecutionContextssameThreadExecutionContextexecuteakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplCallbackRunnableexecuteWithValueakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs Caused by scalascalajsjsJavaScriptException TypeError thiscurrentStateCallMeDirectlyundeqO is not a function at akkapatternCircuitBreakertransitionakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at akkapatternCircuitBreakerClosedcallFailsakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at anonymousakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalascalajsruntimeAnonFunction applyakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at scalaconcurrentimplCallbackRunnablerunakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs at cLakkadispatchBatchingExecutorBatchcLakkadispatchBatchingExecutorAbstractBatchprocessBatchLakkadispatchBatchingExecutorAbstractBatchVakkajscircuitbreakertargetscala akkajscircuitbreakertestfastoptjs more It looks like the underlying issue is that currentStateCallMeDirectly is not defined properly during the state transition The property is initially defined as an IR patch in PatternIrPatch and is changed using the Unsafe macros Hi it seems that TestProbe can only be called times after that it breaks the test I have a unit test like this class DatasetViewTest extends TestKitActorSystemtest with FlatSpecLike with Matchers trait TestContext val controller TestProbe it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext it should in new TestContext Only test could run then it stops with this error error management Test testOnly orgscalajstestcommonRPCCoreClosedException orgscalajsjsenvComJSEnvComClosedException JSCom has been closed I could put val controller TestProbe outsite scope of TestContext as a workaround but some cases I have to redeclare it Thanks Since scalanative is similar to scalajs and currently also works with a single thread this should not be to hard Have you thought about also incorporating akkahttp Any thoughts there is one single test that is somehow failing without any evident reason only with scala in PatternSpec Cannot reproduce locally only happens on Travis CI Any ETA anything one could help with Hi As discussed in the akkajs gitter room heres a space where to discuss possible support for akkapersistence in scalajs The idea is to use localstorage or indexedDb as a backend i have a use case where i need to save mouse event data locally when an app goes offline and then stream them to a backend server once its back online for now i use akkastream to handle buffer and throttling and pouchdb to avoid using low level indexedDb api Check instatiation of actors with default argument Though I will not expect running a HTTP server on Scalajs some data structures from akkahttp like Path and Uri are useful in Scalajs Another usage of akkahttpjs is creating an inmemory mock server to handler fake HTTP requests for testing purpose 