So I need to pass props to the creation of my store so I can use those props to derive the initial store state Which means I have to create the store within the component itself so I have access to its props But that initialises a new store each time its called Is there a way to create a store from within the component without it creating a new store each time Or perhaps a better way to set initial state of the store from a components props thx Recently I have a use case where I need to add event listener in response to state change using subscribe Currently there is no idiomatic way to remove those listeners Currently Im doing it like so but it doesnt feel right js let listener subscribe someState windowremoveEventListenerclick listener listener consolelogsomeState windowaddEventListenerclick listener selector I guess an API similar to Reacts useEffect with cleanup function would do the trick This also applies to setInterval and setTimeout When updating from to I lose the tracking of all actions in the Redux devtools The app works just fine and the store updates correctly when using the app it just doesnt log out the commits any more Using it like ts import create StateCreator from zustand import devtools from zustandmiddleware export const DefaultStoreState DefaultStateGetters lastDataUpdate new Date loading false showDrawer false message null const store StateCreatorDefaultState set get DefaultStoreState export const useStore Store createDefaultStatedevtoolsstore WACHS App Store Any pointers would be appreciated Let me know if you need more detail and I will update this post Cheers thanks Patrik Using immer and redux middlewares i want to replace initial state with new state but as zustand merges with set then it is quite impossible defaultState isLoading false replace state with redux middleware From immer doc case loadUsers OK we return an entirely new state return actionpayload This should replace state entirely but isLoading is still present How to replace entire state or if i return then all old values are still in place Tried different ways immer middleware using immer in redux middleware for set added immer to reducer But was still unable to do it Lets collect some Concurrent React are we ready for it Simpler API currently jsx const useStore api createset set count const count useStorestate statecount const count apigetStatecount const unsub apisubscribecount consolelogcount state statecount apisetState count why not jsx const useStore createset set count const count useStorestate statecount const count useStoregetStatecount const unsub useStoresubscribecount consolelogcount state statecount useStoresetState count vanilla users wouldnt name it useStore jsx const api createset set count const count apigetStatecount it would mean were now api compatible with redux without doing much with a little bit of hacking it could also be made backwards compatible by giving it a iterable property ive done this before with threefibers useModel which returned an array once but then i decided a single value is leaner JeremyRH First of all thanks a lot for this library I very much enjoy its simplicity Im trying to create a finite state machine middleware based on zustand and would love to seek some feedback Is there anything I need to look out for in particular Heres the implementation js const defaultUpdater state data state data const machine stateChart initialData updater defaultUpdater set get api apitransition action data setcurrentState const nextState stateChartstates currentStatestate on action return nextState updatercurrentState data state nextState currentState return transition apitransition state stateChartinitialState initialData And this is example usage js const IDLE idle const ERROR error const LOADING loading const FETCH fetch const FETCHSUCCESS fetchsuccess const FETCHERROR fetcherror const stateChart initialState IDLE states IDLE on FETCH LOADING ERROR on FETCH LOADING LOADING on FETCHSUCCESS IDLE FETCHERROR ERROR const useStore transition createmachinestateChart todos transitionFETCHSUCCESS todos Please review and Im trying to use immer in api setState but unable to overwrite it This doesnt seems to work const immer config set get api configfn setproducefn get api setState fn apisetStateproducefn Hello Is there a technical limitation that would explain why there are no automatic typings of the store Im trying to debug my application to make sure theres no mutation issues Back in redux days I could use a middleware to detect it Does anyone have any insights on how to add middleware to zustand to detect mutation issues