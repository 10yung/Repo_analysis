None What happened pachd failed to start up on an OpenShift environment where pachd does not run as root because the githook server is hardcoded to use port and that port is privileged What you expected to happen Attempted to configure the githook server using the apigitport key in the spec for pachd to but that had no effect name apigitport containerPort protocol TCP There appears to be a missing corresponding environment variable for setting the port How to reproduce it as minimally and precisely as possible Use a privilegelimited k s environment like OpenShift Deploy Pachyderm using our recommendations in particular setting WORKERUSESROOT to false Modify all ports to be above Note that pachd crashes with a permission denied on port for the githook server Anything else we need to know Environment Kubernetes version use kubectl version OpenShift Pachyderm CLI and pachd server version use pachctl version Cloud provider eg aws azure gke or local deployment eg minikube vs dockerized k s on premisies OS eg from etcosrelease Others What happened pachctl now checks the ClusterID of the cluster its communicating with to ensure its not communicating with a different cluster than intended In a few cases Ive now seen the issue where its reporting an unexpected ClusterID when it shouldnt producing errors like this error connecting to pachd connected to the wrong cluster context cluster ID f b a c bc ea bb e a vs reported cluster ID e ac bc a af f a e The dev reset script and and redeploys will appropriately scrub the contexts ClusterID however there appears to be other cases where the ClusterID is not scrubbed Im not sure where yet Workaround If you are currently facing this issue Open your pachyderm config file By default its at pachydermconfigjson but may be overridden via the PACHCONFIG environment variable Remove the clusterid entry in your active contexts config If you change the context while inside the pachctl shell the prompt still shows the old context For example I had aws set as a context and I ran pachctl config set activecontext It seems that the context was switched but the prompt remains aws see the screenshot Also you can preview the list of contexts in from the pachctl shell Screen Shot at PM Screen Shot at PM If this is by design should we mention this a limitation Environment Kubernetes version use kubectl version Pachyderm CLI and pachd server version use pachctl version Cloud provider eg aws azure gke or local deployment eg minikube vs dockerized k s OS eg from etcosrelease Others Right now make doc both generates the docs for pachctl outputting markdown and copies our existing markdown from docsmaster to docs x or whatever the latest release is as part of our release process Wed like change it in a few ways pachctl docs for master should be generated dynamically in netlify That way the only time we have to run make doc should be right before a release reducing the number of people who need to run it To make sure we preserve pachctl docs describing old releases make doc should generate the pachctl docs for master and then copy them into the x latest folder and then remove them from master again as part of our release process Postrelease Netlify will still be responsible for the pachctl docs in master but this way the docs in x are frozen at release time As part of our current release process we need to update nav in the mkdocsversionyaml file with the list of pachctl files manually This should be done automatically by make doc Ideally make doc should run in a docker container so that it works on macOS BSD sed is quite different from GNU sed so etcbuilddoc almost but doesnt quite work on macOS In fact ideally we should be able to do Pachyderm releases from a mac To avoid confusion I think we should rename make doc and make doccustom to make releasedocs and make customreleasedocs so that its clear that it should only have prerelease logic Currently we need to use it to update our pachctl docs between releases which conflicts with other parts our make doc process that expects the repo in which its run to be in a prerelease state Currently the installation instructions dont include instructions for installing terminal completions These instructions are necessary because its not possible to automatically install the completions See the kubectl installation docs for an example docs on how to install completion and ensure the completions are functional in bashzsh Our installation instructions would be almost identical except we offer some utility functionality to help install the completions via the install and path flags for pachctl completion bash and pachctl completion zsh Blocked by which adds zsh completion and changes the completion command line syntax Closes Docs issue What happened While using pachctl shell I typed list file and selected a repository from the list I did not select a branch and then pressed DELETE a few times to go back to the sign after the repo name And then the shell crashed with the following error E portforwardgo error copying from local connection to remote stream tls use of closed connection contextaws list file test panic runtime error invalid memory address or nil pointer dereference signal SIGSEGV segmentation violation code x addr x pc x goroutine running githubcompachydermpachydermsrcservercmdpachctlshellFileCompletion x x xc a x x x x srcservercmdpachctlshellcompletionsgo x githubcompachydermpachydermsrcservercmdpachctlshellshellsuggestor xc a xc x x x x x srcservercmdpachctlshellshellgo x githubcomcbatagopromptCompletionManagerUpdate homejdolinergopkgmodgithubcomcbatagopromptv completiongo githubcomcbatagopromptPromptRun xc c homejdolinergopkgmodgithubcomcbatagopromptv promptgo x a githubcompachydermpachydermsrcservercmdpachctlshellshellrun xc a srcservercmdpachctlshellshellgo x githubcompachydermpachydermsrcservercmdpachctlshellRun srcservercmdpachctlshellshellgo githubcompachydermpachydermsrcservercmdpachctlcmdPachctlCmdfunc x e x x xc c xc cb srcservercmdpachctlcmdcmdgo x githubcompachydermpachydermsrcserverpkgcmdutilRunFixedArgsfunc xc c x e x x srcserverpkgcmdutilcobrago x githubcomspf cobraCommandexecute xc c x e x x xc c x e homejdolinergopkgmodgithubcomspf cobrav b b bfc cbcommandgo x aa githubcomspf cobraCommandExecuteC xc fb x x xc e homejdolinergopkgmodgithubcomspf cobrav b b bfc cbcommandgo x fb githubcomspf cobraCommandExecute homejdolinergopkgmodgithubcomspf cobrav b b bfc cbcommandgo mainmainfunc x x srcservercmdpachctlmaingo x mainmain srcservercmdpachctlmaingo xbc img width altScreen Shot at PM src What you expected to happen To be able to get back to the list of branches without shell crashing How to reproduce it as minimally and precisely as possible Create two repos with a branch Enter the shell Select list from the dropdown Select file Select a repo and press spacebar Because you havent selected a branch you can still select another repo Select another repo Try to delete the second repo by pressing DELETEBACKSPACE Anything else we need to know Environment Kubernetes version use kubectl version Pachyderm CLI and pachd server version use pachctl version Cloud provider eg aws azure gke or local deployment eg minikube vs dockerized k s OS eg from etcosrelease Others None