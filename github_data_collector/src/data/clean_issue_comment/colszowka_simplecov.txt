This should fix the unstability were having in TravisCI with JRuby at the moment I believe this is much more user friendly as opposed to the thinking what is positivenegative like in an unless else or case when else This way people see immediately that the else branch waswasnt hit or the then branch or the body of a loop Specifically I think it also helps with us reporting else branches that arent even defined for ifcase when people see hits for an else branch I think thats easier to figure out than hits for the branch Theres less of a what does mean going on As a side effect also removes some code for checking whats positive thats also rather intricately tied to how branch coverage hands out its IDs which I dont believe we should take for granted forever Old Selection New Selection Shouldnt change within one process As we check the value potentially a lot caching it canwouldshould be nice as opposed to a require that should no op but needs to check and getting a method arity We changed our file format with the release series unfortunately our code still seems to want to read the old file format and then break We gotta be more careful there I dont think we need to be able to read all old versions of files but I think we should rather capture the error and continue without processing the old results easiest to achieve I believe This is my preliminary diagnosis problems goes away when deleting the coverage directory Reported by klyonrad bundle show simplecov Usersusernamervmgemsruby gemssimplecov beta bundle show simplecovhtml Usersusernamervmgemsruby gemssimplecovhtml beta bundle exec rspec specpolicies Run options exclude futuretrue Randomized with seed Time Finished in seconds files took seconds to load examples failures Randomized with seed Traceback most recent call last from Usersusernamervmgemsruby gemssimplecov beta libsimplecovdefaultsrb in block in top required from Usersusernamervmgemsruby gemssimplecov beta libsimplecovrb in runexittasks from Usersusernamervmgemsruby gemssimplecov beta libsimplecovconfigurationrb in block in atexit from Usersusernamervmgemsruby gemssimplecov beta libsimplecovrb in result from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultmergerrb in mergedresult from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultmergerrb in results from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultmergerrb in each from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultmergerrb in block in results from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in fromhash from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in symbolizenamesofcoverageresults from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in eachwithobject from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in each from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in block in symbolizenamesofcoverageresults from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in eachwithobject from Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in each Usersusernamervmgemsruby gemssimplecov beta libsimplecovresultrb in block levels in symbolizenamesofcoverageresults undefined method tosym for Integer NoMethodError Did you mean tos By default SimpleCov also tracks coverage for the run tests spectestfeatures directories which has always confused me as that pretty much only tests are we running all of our tests which sometimes leads to surprising results but thats a different topic We also do the same thing in our own test aka we assert against the specs and all of them are covered I find this to always artificially inflate coverage numbers as of course way more code is executed but thats not what you really want to check for you care about your application code So one of the first things I do in any code base personally is addfilter spec and addfilter features or what not Of course if we did this wed also need a nicer way to remove filtersprofiles again What do you think Would that be a good default YesNoMaybe colszowka deividrodriguez bf Discoveredverified in Basically apparently it can happen that we generate the correct report but override it with an outdated one Discovered running the parallel tests part of the features introduced in currently tagged wip to avoid flakies remove the wip tag if you want to test this out It doesnt happen reliably Might happen times in a row or not at all for runs for me at least I gathered some examples here What you can see there is something like this Coverage report generated for to hometobigithubsimplecovtmparubaprojectcoverage LOC covered Coverage report generated for to hometobigithubsimplecovtmparubaprojectcoverage LOC covered Coverage report generated for to hometobigithubsimplecovtmparubaprojectcoverage LOC covered Coverage report generated for to hometobigithubsimplecovtmparubaprojectcoverage LOC covered Notice that the second too last has the right number of loc and coverage expected in the test and also seems to take everything into account unsure why it says n though guess I could run in parallel but parallel tests only spawned as there are only test files but is seemingly later overridden by an outdated report If possible we should of course find and fix that race condition and then remove the wip tags to always run these tests ruby version simplecov version testunit version Issue I have a project with some ruby scripts for CI purposes and just now Im creating unit tests for my ruby scripts and Im trying to get coverage from it with simplecov but simplecov always gives me LOC covered Heres sample script to reproduce the issue testcalculatorrb ruby require simplecov SimpleCovstart require testunit requirerelative scriptstoolcalculator Test calculator class CalculatorTest TestUnitTestCase def testadd differentnumbers assert sum end def testaddsamenumbers assert sum end end scriptstoolcalculatorrb ruby def sumfirst second nil first second unless secondnil first first end sh Loaded suite testcalculator Started Finished in seconds tests assertions failures errors pendings omissions notifications passed testss assertionss Coverage report generated for Unit Tests to Usersfadeltdprojectrubyscriptscoverage LOC covered It seems that simplecov cant generate coverage for requirerelative when the first directory name has prefix Ive tried renaming my directory to scriptstoolcalculator and it works sh Loaded suite testcalculator Started Finished in seconds tests assertions failures errors pendings omissions notifications passed testss assertionss Coverage report generated for Unit Tests to Usersfadeltdprojectrubyscriptscoverage LOC covered How can I fix this issue without having to rename my directory Thanks JSON serializationparsing works fine for line coverage however for branch coverage the structure we have is that of an array that is the key pointing to values Sadly that breaks when dumping and parsing from JSON ruby irbmain map irbmain if irbmain then else irbmain if irbmain then else irbmain irbmain JSONparse JSONdump map if then else if then else Which needs to be solved via either regexp based parsing or evaling strings currently on my branch which is medium fine as we read our own output but doesnt sound quite great This particula scenario does work when using YAML though ruby irbmain YAMLload YAMLdump map if then else if then else However YAML support was removed way back in I havent been around then so I dont know about the errors caused there and if thats still relevant Right now there is a third problem namely we parse symbolizing keys which creates tons of symbols just to transform them to strings again for evalingparsing Anyhow its a problem Possible solutions with different levels of solving it stop symbolizing keys minimum requirement evaluate storing YAML again instead of JSON store a format that is further away from the original coverage data but that is easier to parse again like using arrays instead of hashes thanks tycooon colszowka input especially on the YAML thing rather welcome I find it a bit odd that simplecov doesnt check its own coverage What do you think about adding that functionality I guess this might be not super straightforward since there also is Cucumber present in the project but maybe its possible to merge the results Or at least having RSpec coverage reported would be a benefit