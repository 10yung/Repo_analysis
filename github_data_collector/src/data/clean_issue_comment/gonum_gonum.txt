This change prevents the compiler from emitting FMA instructions during Drotmg and Drotm which would otherwise cause the arm build to fail Please take a look Updates Checklist API changes have been discussed code is goformated correctly goimports packages with generated code have had code generation run tests pass locally linked to relevant issues Please make sure your commit message summary line and pull request title match the Go convention a oneline summary of the change prefixed by the primary affected package that should complete the sentence This change modifies Gonum to Please take a look check test log since these are currently allowed failures Updates Checklist API changes have been discussed code is goformated correctly goimports packages with generated code have had code generation run tests pass locally linked to relevant issues Please make sure your commit message summary line and pull request title match the Go convention a oneline summary of the change prefixed by the primary affected package that should complete the sentence This change modifies Gonum to Adding the arm architecture to the build matrix shows up a number of issues in our testing These all come down to numerical precision differences between amd and arm some show up in arm as well shows no differences with amd The arm arch will be in allowed failures when is merged which is not ideal so we need to get the failures resolved so it will show up in the build report on PRs This is the list of failure checked indicates Im happy with the fix approach I will add the change sha when is merged x gonumorgv gonumblasblas TestDrotmg tolerance drotm y mismatch RD MedRD BigFlag expected found e x gonumorgv gonumblasgonum TestDrotmg tolerance drotm y mismatch RD MedRD BigFlag expected found e x gonumorgv gonumfourier tolerance ExampleFFTCoefficientstone c a fef df c a bf d c a b a e x gonumorgv gonumgraphlayout bug TestEadesR infinite value b cc a f b ea f cf a dc e x gonumorgv gonumgraphlayout toleranceED TestIsomapR d ec f bfc f e af de d c a gonumorgv gonuminternalasmf tolerance TestGer Test x alignx y a unexpected value at Got Expected d a ecb bbfa fe b ab c e d cf dc aa a e b gonumorgv gonuminternalcmplx tolerance TestSqrt Sqrt i i want i c bd a dd f f bcbcd d dc c c b gonumorgv gonumlapackgonum tolerance TestDlansb got want gonumorgv gonumlapackgonum tolerance TestDlascl unexpected A want gonumorgv gonumlapackgonum tolerance TestDlaln Want i got i gonumorgv gonumlapackgonum tolerance TestDgeev is not right real eigenvector gonumorgv gonummat tolerance TestSymRankOne got want e ded ad a c a e b d ad bb gonumorgv gonummathext tolerance TestMvLgamma got want e debe bfbc b b e ffd dd gonumorgv gonummathextinternalamos tolerance TestZacai c e native e cd a fc acff e c ffde db gonumorgv gonummathextinternalamos tolerance TestZseri c native cd a fc acff e c ffde db gonumorgv gonumoptimize TestBFGS gonumorgv gonumoptimize TestLBFGS gonumorgv gonumoptimize TestNewton x gonumorgv gonumstat tolerance TestROC got e e e e want x gonumorgv gonumstat tolerance ExampleROCweighted x gonumorgv gonumstat tolerance ExampleROCunsorted x gonumorgv gonumstat tolerance ExampleROCequallySpacedCutoffs x gonumorgv gonumstat tolerance ExampleLinearRegression x gonumorgv gonumstatmds toleranceED TestTorgersonScaling cc b ac c ca ac x gonumorgv gonumstat tolerance tolerance TestCovarianceMatrix expected cov found btracey vladimirch sbinet I add a basic instructions for ARM a little step for the big issue I also remove TODO in AMD Please make sure your issue title matches the Go convention a summary of the problem prefixed by proposal and the primary affected package It may be worth discussing the proposal at the Gonum discussion list before filing the proposal issue Background On onnxgo we have poor performance on running some models on arm After profiling we identify that we spend a lot of time on gonum More informations on this issue Proposal Add arm asm instructions Potential impact of proposal Extent of change amount of work to implement who will do the work etc Please make sure your issue title matches the Go convention a summary of the problem prefixed by the primary affected package What are you trying to do Describe the problem you are trying to solve I would like to have a fast moving median filter The fastest implementation I know of is the doubleheap What did you try Please include a link to a minimal reproducer here Nothing How does Gonum not allow you to achieve your goal Moving median is extremely slow without this functionality What version of Go and Gonum are you using Paste the output of go version and if you are installing Gonum from source paste the output of cd go env GOPATHsrcgonumorgv gonum git revparse HEAD Is this feature absent from the current master Yes Are you able to help contribute the feature Can you provide code contributions or information to help Yes Ive written moving median filters in C for the bottleneck python project in the past Id be happy to contribute an implementation This is the basic set of graph set operations that are worth adding Its not clear exactly where these should go though or the design of the API there are two broad possibilities Wrapper types that makes an implicit operation lazy but more expensive in the long term Functions that take a src and dst with other parameters eager but potentially optimisable Both The current HLL implementation is very simple and is there to get the package started To get to feature completeness we should have x Sketch serialisation simple though hash serialisation is a consideration Maximum likelihood cardinality estimation see Maximum likelihood cocardinality estimation ibid and significantly harder Compress maybe This is adding the MulVecTo method to two matrix types which I think that it makes most sense to support natively in linsolve However seeing the function signature in the context of mat it doesnt seem to fit because of the slices so Im wondering whether it should take matVecDense instead This would of course require revisiting linsolve and changing the implementation to be more matlike Just a draft at the moment Please take a look Checklist API changes have been discussed code is goformated correctly goimports packages with generated code have had code generation run tests pass locally linked to relevant issues Please make sure your commit message summary line and pull request title match the Go convention a oneline summary of the change prefixed by the primary affected package that should complete the sentence This change modifies Gonum to There are currently three functions that return a Laplacian The Laplacian type holds an embedded matMatrix however two of the functions return a symmetric Laplacian This makes the API less than friendly for users who want to get the eigenvalues for an undirected graph since they either need to assert the embedded matrix to a matSymmetric or perform a nonsymmetric Eigen decomposition and then convert all the complex values to real values To fix this add SymmetricLaplacian which embeds matSymmetric and return this from NewLaplacian renamed to NewSymmetricLaplacian and NewSymNormLaplacian