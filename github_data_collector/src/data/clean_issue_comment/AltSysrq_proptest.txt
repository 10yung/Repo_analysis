This allows nostd builds to use the rdrand instruction on x to generate a random seed for the random number generators An example invocation to enable it be cargo nightly run example fib features alloc features unstable features hardwarerng nodefaultfeatures rustc version rustc nightly f cargo nightly build features alloc features unstable nodefaultfeatures Compiling proptest v rootproptestproptest warning unused import cratestdfacadeVec proptestsrcarbitraryalloccharrs use cratestdfacadeVec note warnunusedimports on by default warning unused import cratecollectionvec proptestsrcarbitraryalloccharrs use cratecollectionvec warning unused import corehashHash proptestsrcarbitraryalloccollectionsrs use corehashHash warning unused import String proptestsrctestrunnerrunnerrs use cratestdfacadeArc BTreeMap Box String Vec error E conflicting implementations of trait arbitrarytraitsArbitrary for type coreoptionOption proptestsrcarbitrarymacrosrs implbounds cratearbitraryArbitrary for typ first implementation here conflicting implementation for coreoptionOption proptestsrcarbitrarycoreoptionrs arbitraryOption None in this macro invocation error E conflicting implementations of trait arbitrarytraitsArbitrary for type coreresultResult proptestsrcarbitrarymacrosrs implbounds cratearbitraryArbitrary for typ first implementation here conflicting implementation for coreresultResult proptestsrcarbitrarycoreresultrs arbitrary A Arbitrary ResultA SMappedA Self AParameters args staticmapanywithAargs ResultOk in this macro invocation error E conflicting implementations of trait arbitrarytraitsArbitrary for type coreresultResult proptestsrcarbitrarymacrosrs implbounds cratearbitraryArbitrary for typ first implementation here conflicting implementation for coreresultResult proptestsrcarbitrarycoreresultrs arbitrary A Arbitrary Result A SMappedA Self AParameters args staticmapanywithAargs ResultErr in this macro invocation error E conflicting implementations of trait arbitraryfunctorArbitraryF for type coreresultResult proptestsrcarbitraryfunctorrs implA corefmtDebug bounds cratearbitraryfunctorArbitraryF A for typ type Parameters params first implementation here conflicting implementation for coreresultResult proptestsrcarbitrarycoreresultrs lift ResultA ResultOk in this macro invocation error aborting due to previous errors Unable to derive recursive data rs deriveDebug Clone PartialEq cfgattrtest deriveArbitrary pub struct ListBoxOptionList error E overflow evaluating the requirement structurevaluesList as structureinstructionsIMPLARBITRARYFORNumericInstrproptestarbitraryArbitraryParameters srcstructurevaluesrs cfgattrtest deriveArbitrary The primary change is due to rands new error handling With rand the randError type now contains either a boxed Error when std is available or a NonZeroU in nostd cases As a result Ive introduced a new PassThroughExhaustedError type When std is available the implementation creates a randError by boxing a PassThroughExhaustedError while in nostd cases it uses an error code representing the error Fixes hello The rand dependency is outdated Ive tried to update it but proptestsrctestrunnerrngrs is trying to create a randError and the way to do that changed Help appreciated Ive been trying to use proptest but Im having a hard time implementing Strategy for my types I know that we have other features that are explained in the book like propcompose and propflatmap but it would be nice to have some documentation on how to implement an entirely new strategy For example I have found it a little difficult to generate an arbitrary graph since we have to have a new random boolean for each possibly edge My current workaround is to use the aforementioned composition tools rust pub fn arbgraphmaxnodes u impl StrategyValue Graph maxnodespropflatmapbaseprob nodes let edgeprob baseprob baseprob let possibleedges nodes nodes let vecedges Vec possibleedges intoiter map weightededgeprob collect vecedgespropmapmove edges let mut gr Graphnew for i in nodes for j in i nodes if edges i nodes j as usize graddedgei j gr This is less than nice and shrinking doesnt work well Ive looked around the docs and Im pretty lost I thought I would try to look at how some of the included strategies are implemented but almost all of them seem to be done with macros UPDATE I have fixed my issue and eventually figured out what I needed but I still suggest adding at least one example and explanation to the book cc Centril A WIP implementation of the the proc macros discussed in This currently supports A single argument strategy per test This does not support Everything else discussed in That said some feedback is better than none so here we are The changes are better seen than described so take a look at the modified parsedate example located in proptestattributestestshellors rust use proptest prelude propasserteq strategyStrategy stringstringregex use proptestattributesproptest fn parsedates str Optionu u u if slen return None NEW Ignore nonASCII strings so we dont need to deal with Unicode if sisascii return None if s s return None let year s let month s let day s yearparseu okandtheny month parseu ok andthenm dayparseu okmapd y m d fn genvaliddate impl StrategyValue String let expr stringregexexprunwrap fn genallutf impl StrategyValue String let expr PC stringregexexprunwrap propcompose fn genparseddateyear in u month in u day in u u u u year month day proptestgenvaliddate fn parsesallvaliddatess String parsedate sunwrap proptestgenallutf fn doesntcrashs String parsedate s proptestgenparseddate fn parsesdatebacktooriginaldatetuple u u u let y m d datetuple let y m d parsedate format y m dunwrap propasserteq is basically the same as asserteq but doesnt cause a bunch of panic messages to be printed on intermediate test failures Which one to use is largely a matter of taste propasserteqy m d y m d I think that beyond what was described in there might be an opportunity to simplify the propcompose macro with a proc macro Ive check the build times for rustanalyzer with cargo bloat time today and noticed that proptest is the longest to build dependency seconds I havent looked into this deeply but thought that you might want to be aware Time Crate s raideapi s rahir s proptest s syn s clap s syn s lsptypes s racli s regexsyntax s ralspserver s serdederive s regex s rasyntax s serde 