Well first of all your library look awesome and I like samples you wrote that bring a view of how to use your lib I like also also the support of different IDE like VisualStudio ode Codelite but personally I use CLion and also like after cloning a lib like this just do mkdir build cd build cmake make j for quickly test the project but your project doesnt support it Cmake is a very powerful tool for building a project managing dependencies use your lib as dependencies that we can also integrate as git submodule of in our project cross compilation via toolchains or also generate project for other IDE The following generators are available on this platform marks default Unix Makefiles Generates standard UNIX makefiles Green Hills MULTI Generates Green Hills MULTI files experimental workinprogress Ninja Generates buildninja files Watcom WMake Generates Watcom WMake makefiles CodeBlocks Ninja Generates CodeBlocks project files CodeBlocks Unix Makefiles Generates CodeBlocks project files CodeLite Ninja Generates CodeLite project files CodeLite Unix Makefiles Generates CodeLite project files Sublime Text Ninja Generates Sublime Text project files Sublime Text Unix Makefiles Generates Sublime Text project files Kate Ninja Generates Kate project files Kate Unix Makefiles Generates Kate project files Eclipse CDT Ninja Generates Eclipse CDT project files Eclipse CDT Unix Makefiles Generates Eclipse CDT project files I can also found related issues on your project that request also a cmake version of your lib I hope this new request will be solve by the presence of a CMakeListstxt in your repo Hi just wondering if TheForge has any support or plans for any integrated commandline driven benchmarking of your rendering code A setup that could be automated like with your new path tracer test for showing various performance metrics afterwards dumped to the CLI or log file etc Thanks Michael The Forge sounds pretty great but there does not seem to be much in the way of documentation I dont even see simple How to compile or build instructions Which seems like a good place to start The description talks about it being like Legos where you can use the different parts of the system as needed So does that mean it can be built in sections and integrated into other projects piece by piece If so how It would be nice if there was something maybe on the wiki that showed exactly how you can build just the renderer for example or the renderer and lua scripting etc into a librarylibraries to include in other projects I know I could probably dig through the PyBuild file and look at all the source and try to figure it out myself But I think itd be a pretty big step in getting people to try this project out if they could actually get started without having to put in a lot of work Just wondering if this is anywhere on the roadmap As it stands this doesnt seem to work with a fairly standard Hz display and shutter glasses Just noticed that there is a mapping missing in ThirdParty OpenSource gainput lib source gainput keyboard GainputInputDeviceKeyboardWinh The mapping missing is dialect VKADD KeyKpAdd Im attaching a patch with the small fix MissingMappingzip What is the best way to set up rendering to multiple fullscreen monitors using a single GPU adapter in The Forge Do you have an example that uses multimonitor Hi just tested these new transparency sample on Windows Raster Order Groups mode works OK on DX API doing a quick test on Vega of these sample on Macos seems the Raster Order View variant Intel paper is missing on Macos altough Metal supports Raster Order Groups As you probably know Raster Order Groups is an optional feature of Metal but its implemented on Vega Metal driver as it shows areRasterOrderGroupsSupported so are you planning to implement Raster order group support on the transparency sample on Macos would be nice as there arent many if any samples of using Raster Order Groups on Metal also note I opened some time ago an issue requesting exposing Raster order groups in Vulkan so hope eventually its exposed and transparency AOIT mode can be supported also on Vulkan thanks Hi seems just Nvidia added Vulkan HDR support Windows only to his latest dev driver via exts VKEXTswapchaincolorspace VKEXThdrmetadata no pressure just asking about whats the status plans for HDR support in The Forge Right now seems support for HDR TV can be supported on D D D D via new DXGI APIs and on Vulkan using the new extensions supported by NV dev driver no expert on HDR but for DXGI I mean using new HDR and WCG APIs In order to enable HDR and WCG in your app refer to the following APIs IDXGISwapChain SetHDRMetaData sets High Dynamic Range HDR and Wide Color Gamut WCG header metadata DXGIHDRMETADATAHDR structure containing the metadata settings DXGIHDRMETADATATYPE enum identifying the type of header metadata DXGICOLORSPACETYPE defines the colorspace sRGB YCbCr color range gamma settings and other details of the color format thanks