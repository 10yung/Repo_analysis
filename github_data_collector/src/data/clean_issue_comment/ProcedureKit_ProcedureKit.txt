danthorpe Youve built a great framework and people want to use it Unfortunately were eight months on without any updates and as far as I can tell without even any replies to issues or PRs As a maintainer of open source projects myself I fully understand that work life can leave little time for these things but this projects needs updates Add maintainers to help you Alternatively everybody is just going to fork the project and well all be worse off for it I and I am quite sure many others are ready willing and able to pitch in Two of the four links which appear at the top of the readme file lead nowhere This annotated screen capture explains it best img width altScreen Shot at src Hey there Ive been dealing with ProcedureKit conditions for the last few hours and a puzzling behavior came to my attention which Im not sure is right It is implied in multiple parts of the codebase that a condition returning successfalse should stop the procedure its attached to from executing swift procedureaddcondition BlockCondition procedure will cancel instead of executing if this is false return trueOrFalse from or swift operationaddConditionBlockCondition operation will only be executed if this is true return trueOrFalse from the legacy manual The reason for my confusion comes from a procedure where I had two BlockConditions One returns false because I want the procedure to not be executed without any particular error being thrown in a specific execution scenario which is irrelevant for the purpose of this issue and the other returns true because the specific thing it checks for succeeds I initially assumed that in a scenario where one condition returned false and the other returned true the first would prevail much like an implied AND condition That wasnt the case I then tried to use the builtin AndCondition to join the two results together to no avail I decided to inspect the source code of ProcedureKit to investigate if any assumption I was making was wrong and there was it What this seems to imply is that a condition returning successfalse means that the condition itself is to be ignored not the procedure execution This goes against the terminology previously quoted in the documentation and honestly seems a bit counterintuitive to me this is further corroborated by the fact that if I get rid of the condition returning true the procedure doesnt execute It appears that the only proper way to do this is either make the first condition throw an error instead of returning successfalse dealing with the returned error somewhere else in the chain create a custom condition which checks for both things and returns successfalse thus having only one point where successfalse is returned So is the behavior currently implemented the expectedcorrect one If so I think its worth to amend the documentation to make this clear even though I still dont agree with the inconsistency when only one successfalse is present Thanks With Xcode carthage compilation for archiving is broken as ProcedureKitLocation doesnt correctly declare device families supported adding the missing device families tvOS and watchOS fixes the issue Based largely on richardpiazza work in This PR updates the Swift Packageswift file to the tools version format And adds support form missing mobile content product Along with that change the minimum supported platforms are added using platforms and the supported language versions are listed using swiftLanguageVersions Due to now listed the minimum os support files in ProcedureKitCoreDataTests needed to have a available attribute applied making sure the tests where only run on supported platforms Primarily due to the use of NSPersistentContainer Also since some build environments may not understand what an xcdatamodeld file is Ive added the TestEntity class definitions as well as creating the NSManagedObjectModel definition in code This allows the tests to run and pass while using the swift test command These updates were tested with Xcode using swift packages Could relate to danthorpe Theres and issue i havent managed to resolve with the Location target The pointer address passing doesnt work with swift this needs to be addressed before merging the PR maybe you can take a look at this frankly im a bit stuck here internal extension CLLocationManager static func make CLLocationManager fatalErrorFIX THIS var manager CLLocationManager performSelectoronMainThread selectormakenew with manager waitUntilDone true return manager return DispatchQueueonMain CLLocationManager objc static func makenew manager CLLocationManager fatalErrorFIX THIS manager CLLocationManagerinit On Xcode I instantly get a EXCBADACCESS Grouped in a class to allow for easily deinitializing in deinit fileprivate class ProtectedProperties var log ProcedureLog LogChannelsLog var error Error nil var observers AnyObserverProcedure var directDependencies SetOperation var conditions SetCondition The Debugger stops on var log ProcedureLog LogChannelsLog The package file isnt fully defined the mobile product is missing Hi Ive been playing around the Combine framework and mixing it with Operations a bit First thing that stands out is that the errors are properly typed compared to ProcedureKit where all errors are generic and handling them is often difficult due to the amount of type casting and edge cases What do you think about typing the failure type in ProcedureResult and Procedure in particular I havent come up with the proper solution yet the idea I have in mind was to have a separate error type that would unite the auxiliary errors thrown by ProcedureKit such as errors coming from conditions etc and the output error produced by operation itself swift enum ProcedureErrorFailure where Failure Error Error originating from the OutputProcedure or any Procedure that provides the typed Failure type case outputFailure Errors thrown by conditions or internally produced by ProcedureKit case internalProcedureKitError This wont work out of the box apparently without changes across the board For instance OutputProcedure accepts the Output which is wrapped into ProcedureResult down the road so I think the best solution would be to force the consumer to provide the complete ProcedureResultSuccess Failure type This PR updates the Swift Packageswift file to the tools version format Along with that change the minimum supported platforms are added using platforms and the supported language versions are listed using swiftLanguageVersions Due to now listed the minimum os support files in ProcedureKitCoreDataTests needed to have a available attribute applied making sure the tests where only run on supported platforms Primarily due to the use of NSPersistentContainer Also since some build environments may not understand what an xcdatamodeld file is Ive added the TestEntity class definitions as well as creating the NSManagedObjectModel definition in code This allows the tests to run and pass while using the swift test command These updates were tested with Xcode using swift packages Could relate to Seeing errors when I try to access the project documentation at and img width altScreen Shot at PM src 