A new version of MPTCP protocol RFC has been published with some changes to the MPCAPABLE options handling Let tcpdump print the protocol version and adjust parsing of MPCAPABLE options according to RFC Signedoffby Davide Caratti dcarattiredhatcom Please add an option to directly use a user ID and group ID with the Zrelinquishprivileges option With the following commands tcpdump c w outputfile Z tcpdump c w outputfile Z tcpdump c w outputfile Z I would expect the output files to have permissions like this ls la rwr Dec outputfile rwr root Dec outputfile rwr root Dec outputfile Distributions which started building withuser to switch to an unpriviliged user claim that the old behavior of running under root can be restored by passing Z root on the command line However doing so is different from not using withuser as tcpdump still drops privileges and sets supplementary user groups In Linux containers using user namespaces with an incontainer root user mapped to an unprivileged external user calling setgroups is usually denied as it would allow that unprivileged user to leave groups see usernamespaces for details Passing Z root on a withuser build still goes through initgroups and therefore setgroups which will fail in such a container environment This makes tcpdump builds using withuser effectively unusable in such containers Adjust the Z root fallback to skip any privilege dropping and supplementary group setup making it identical to builds not using withuser IOW something similar to T except that it currently wont help decoding say DNS traffic if ports other than are used When outputting with ndovflag IPv addresses have a newline before the IPs while IPv do not Heres an example IP tos x ttl id offset flags none proto UDP length ipv ipv udp sum ok A examplecom IP hlim nextheader UDP payload length ipv ipv udp sum ok This is a pretty minor issue but itd be nice if it was consistent I wasnt sure if this was intentional or which way is preferred so thats why this is an issue instead of a pull request The newline comes from printipc Personally Id prefer a single line of output for easy parsing Forgot to mention tcpdump version and lippcap but it doesnt look like the line in question has changed in newer versions I need to capture packets without the influence of iptables Because I set the DNAT of iptables to cause the inconsistency between the flow IP of in and out when tcpdump grabs packets so I cant analyze the flow correctly As shown below the outlet flow is affected by iptables but the inlet flow is not affected by iptables How can I capture packets without the influence of iptables Flags S seq win options mss sackOKTS val ecr nopwscale length Flags S seq ack win options mss sackOKTS val ecr nopwscale length The following is a discussion about the relationship between tcpdump and iptables for reference Does tcpdump bypass iptables Builds directly on Adds printing of EDNS options and their data with vv Format of EDNS options matches format of TCP options Input data to the EVPCipher must be padded with zeros and data size must be multiple of a blocksize For example in the case of the AES CBC if inl argument of the EVPCipher is len not buffersize then the result outputbuffer will depend on architecture This patch does fix ikev pI test on a ppc le tested on PowerNV L How to reproduce the issue cd tcpdumplibpcap wget tar xzf libpcap targz cd libpcap configure withpcaplinux make cd wget tar xzf tcpdump targz cd tcpdump sudo apt install bison flex export CFLAGSstatic Ifullpathtcpdumplibpcaplibpcap Lfullpathtcpdumplibpcaplibpcap export CPPFLAGSstatic export LDFLAGSstatic configure make make error printespc error static declaration of EVPCIPHERCTXnew follows nonstatic declaration EVPCIPHERCTXnewvoid In file included from printespc usrincludeopensslevph note previous declaration of EVPCIPHERCTXnew was here EVPCIPHERCTX EVPCIPHERCTXnewvoid printespc In function EVPCIPHERCTXnew printespc error dereferencing pointer to incomplete type EVPCIPHERCTX aka struct evpcipherctxst ctx mallocsizeofctx printespc At top level printespc error static declaration of EVPCIPHERCTXfree follows nonstatic declaration EVPCIPHERCTXfreeEVPCIPHERCTX ctx In file included from printespc usrincludeopensslevph note previous declaration of EVPCIPHERCTXfree was here void EVPCIPHERCTXfreeEVPCIPHERCTX c printespc In function espprintdecryptbufferbyikev printespc warning passing argument of memcpy discards const qualifier from pointer target type Wdiscardedqualifiers memcpybuf outputbuffer len In file included from printespc usrincludestringh note expected void restrict but argument is of type const uchar aka const unsigned char extern void memcpy void restrict dest const void restrict src printespc In function espprint printespc warning passing argument of memcpy discards const qualifier from pointer target type Wdiscardedqualifiers memcpyp ivlen outputbuffer len In file included from printespc usrincludestringh note expected void restrict but argument is of type const uchar aka const unsigned char extern void memcpy void restrict dest const void restrict src make Makefile printespo Error Env OpenSSL Version d deb u Debian GNULinux buster kernel amd SMP Debian x GNULinux Relatives issue Relative commit If I try to get the output of a compiled filter program with tcpdump d FILTER without privileges it fails because it tries to attach to an arbitraty interface and lacks the permissions Given this should just be a conversion from input to output the interface is an unrequited thirdparty and tcpdump shouldnt ask for permission to use it