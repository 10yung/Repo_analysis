I have use case where Im trying to create a new model instance for an array of Redis hosts I currently have this executing in a Sidekiq job which relies on threads Im getting varying results of writes to each host For example Ill process jobs and each host will not have the same number of updates Is there any way to accomplish this with Ohm hosts hostseach do host Eventredis Redicnewredishost Eventcreate name Ohm Worldwide Conference end Small collections seem to have the items returned in order by id but larger collections return the items in a seemingly random order Is this intentional If so is there any way to specify a default sort order other than to create a sortedxxx method on the class to wrap the collection Heres a little gist showing the behavior With a small collection items the items are in order by ID Small With a large collection items the items are in a seemingly random order Big Is there a method for last id getting Something like Userlastid more lowcost and lowlevel than current Userallids When I change my model any fields that are still present in Redis cause a NoMethodError eg ruby Deviceallentries Traceback most recent call last from irb from irb in entries NoMethodError undefined method createdat for Device x c attributes memo Is there any way to get Ohm to ignore any fields from Redis that are not in the model or is there some other recommended strategy to handle this Hi all I was curious if anyone thought a method that fetches records by a unique and an array of values would be useful on OhmModel It would look something like Im not a fan of the method name def selffetchwithatt values raise OhmIndexNotFound unless uniquesincludeatt ids nil unique key uniques att synchronize do valuesmap value redisqueueHGET unique value ids rediscommit end return if idsnil fetchids end There is a point in the application Im working on that uses something similar and just wanted to share incase you all might find a generic version of it it useful for everyone Referencing here so the following applies to the model described there And I am still using Ohm I might have a race condition because of network lag on deleting from a list This happens only under heavy load ie multiple web requests per second My app has multiple services running In one of the services messages will be deleted from projects This is the delete method in Project to remove the message first from the list and then the model itself ruby def deletemessagem messagesdeletem delete from list mdelete delete model end After deleting a message I get NoMethod errors from my web processes which try to create a json feed from the messages and expect all attributes to exist I can see that when loading the messages with ruby p Project msgs pmessagestoa create json from msgs array the deleted messages are still inside the array but without any attributes Message x f acf attributesscore memo id So I suspect Ohm got an old list of ids and tried to load the message which failed Nevertheless the empty message is inside the returned array After a few seconds the web requests are recovering and now get the correct data without the deleted message I do not get the error when I just delete the reference from the list and do not delete the corresponding message itself which obviously it not what I want Any ideas why this is happening and what would be the best approach to solve this Thanks Christian Hello all looking to see if we can get connectionpool support ruby timeagentprod Devicealleach d p dcameraid nil nil nil f d f bab nil timeagentprod Devicefindcameraid f d f bab count timeagentprod Devicefindcameraid nilcount Im expecting it to find the devices where cameraid is nil but its not finding anything Any ideas In the tagging example we can find posts having a certain tag with this ruby Postfindtag tagging Now how would someone be able to get the posts matching a tag pretty much reversed logic Im assuming you would need a reference in the Tag model to the Post model but I cant quite figure it in the Ohm way ruby class Tag OhmModel counter total reference posts Post How would you query Tag model after that to find the posts associated Any chance it could be added to the example Thanks a lot Hello Is there any Redis Cluster support planned or tried First of all I mean proper group operations handling via corresponding keys composition and preventing incorrect attempts May be you have some posts with having this triedtested with Ohm or some plans about this Thanks 