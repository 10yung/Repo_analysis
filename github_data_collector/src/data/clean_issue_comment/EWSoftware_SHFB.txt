We are using sandCastle in our product builds but we see below warnings in build logs Type WARNING Pattern Ww Aa Rr Nn exec Warn ResolveReferenceLinksComponent MSDN URL not found for target TSystemXXXXXX So we tried installing the new sandcastlev from the link but now we are seeing the below error on our product builds Running sandcastle exec MRefBuilder v Error Unknown target framework version exec Result exec XslTransform v exec Copyright Microsoft Corporation All Rights Reserved exec Portions Copyright Eric Woodruff All Rights Reserved exec Info Applying XSL transformation ApplyVSDocModelxsl exec Error The input file reflection xml could not be loaded The error is Could not find file reflection xml exec Result Info Applying XSL transformation RemoveExplicitsxsl exec Error The input file reflection xml could not be loaded The error is Could not find file reflection xml exec Info Applying XSL transformation RemoveInstancexsl exec Error The input file reflection xml could not be loaded The error is Could not find file reflection xml exec Info Applying XSL transformation ReflectionToManifestxsl exec Error The input file reflectionxml could not be loaded The error is Could not find file reflectionxml exec Error exec BuildAssemblerCore Each component element must have an id attribute that specifies the components unique ID Could some one please check and let us know the reason for failure Kindly let us know in case of any more details This is a nonbreaking simple set of additions to create a dotnet core based MSBuild task so multitargeted build options can be tested This is to allow dotnet build to work on a Visual Studio solution that references a Sandcastle project see issue I have noticed that the see tags in summaries in the generated help files lack the class names in front of them eg see crefDateTimeUtcNow inside summary tags results in a link with the text UtcNow Screenshot from the documentation Not very descriptive Id like it to be DateTimeUtcNow Is there a setting that controls this or do I have to add an inner text manually to every see element and remember to update it if I rename something If there isnt is there a possibility of adding it Something like show class name as an attribute to see Im using the Visual Studio extension Currently SHFB doesnt seem to take C nullable reference types into account For instance I have this method csharp public static IEnumerableTSource DistinctByTSource TKey this IEnumerableTSource source FuncTSource TKey keySelector IEqualityComparerTKey keyComparer null But the rendered documentation doesnt include the in IEqualityComparerTKey It would be nice to support nullable type references so that signatures can be correctly represented to be fair even the MS documentation doesnt include nullability annotations But it should This is more of a bestpractices question and perhaps an attempt to determine if a better way to do this could be discovered I have a class that is inherited from a class found in a nuget package As per your guidance I created a child documentation project that is not built but is rather configured in the main project as an Additional Reference Links plugin with all the link types set to None As an aside it is NewtonsoftJson and it has sample code blocks that cannot be resolved so I added the code block component and allowed missing souce code filesregions This all works well The best practices question is how to properly reference the path to the nuget package contents to add it as a documentation source for the child SHFB project to consume There are two options that I see to accomplish this right now Option Reference the nuget package path Issues with this is this path may differ based on nuget configuration and secondly is brittle in that updating the package version requires a manual modification In the ChildShfbProjectshfbproj I have an example of using this approach DocumentationSource sourceFileUSERPROFILE nuget packages newtonsoftjson lib net NewtonsoftJsondll xmlns Option Use the build process of the assembly being documented via a post build step to copy these references from the build output to a static known folder and configure that to be the location for the documentation source This is less brittle but still has issuesconcerns If a multitarget project would need to handle the case to only copy dependencies for the SHFB target framework Depends on SHFB and when it processes the child project My assumption is this would be done after assuring the build of the main project documentation sources is complete in which case we can rely on the files being there Visual Studio SDK projects and probably classic projects using PackageReference do not copy the xml files from the nuget lib source folder to the output directory This behavior has been under heavy discussion here While the above three issuesconcerns have workarounds it requires superhuman understanding to maintainunderstand I need to understand the help doc build depends on custom build steps injection of an AfterTarget task copying of output to a static directory referencing the dependency properly as a documentation source This is just yucky and unmaintainable This approach can be seen in the ValueTupleSandcastleDemocsproj file The two Target elements and in the ChildShfbProjectshfbproj where the path to these outputs is referenced This example can be found in the zip I attached to an unrelated issue Possible Alternate Perhaps something kind of like where Tom proposes some integration with the build pipeline of nuget restore It may be possible to determine the package path use that to set a variable perhaps package name and that variable would be available to use as part of the DocumentationSource element This would be brittle in terms of package versions since the packages in SHFB projects dont appear in Visual Studio Nuget manage packages for solution but this is the only path I can see Unless I am missing something Hi Eric Was building a new library using VS and targeting NET Standard is this supported yet or do I need to update something in the config for it See build log details below Thanks Ritchie buildStep stepGenerateReflectionInfo Generating reflection information C Program Files x Microsoft Visual Studio Community MSBuild Current Bin MSBuildexe GenerateRefInfoproj Build started Project quotD Projects gemstone threading src DocGen Help Working GenerateRefInfoproj quot on node default targets PrepareForBuild Creating directory quotobj Debug quot GenerateRefInfo MRefBuilder v Copyright c Microsoft Corporation All Rights Reserved Portions Copyright c Eric Woodruff All Rights Reserved No source code context base path specified Source context information is unavailable Loaded assemblies for reflection and dependency assemblies MRefBuilder error Unresolved assembly reference netstandard netstandard Version Cultureneutral PublicKeyTokencc b ffcd ddd required by gemstonethreading D Projects gemstone threading src DocGen Help Working GenerateRefInfoproj Last step completed in buildStep buildStep stepFailed SHFB Error BE BUILD FAILED Unexpected error detected in last build step See build log for details at SandcastleBuilderUtilsBuildEngineTaskRunnerRunString processFilename String targetFile String arguments at SandcastleBuilderUtilsBuildEngineTaskRunnerRunProjectString projectFile Boolean minimalOutput at SandcastleBuilderUtilsBuildEngineBuildProcessBuild buildStep The change in SHFB version to use the Microsoft Docs cross reference service instead of the MTPS content service has caused build warnings in my project such as the ones below BuildAssembler warning ResolveReferenceLinksComponent Member ID URL not found for target TMicrosoftExpressionInteractivityCoreChangePropertyAction BuildAssembler warning ResolveReferenceLinksComponent Member ID URL not found for target TSystemWindowsInteractivityInvokeCommandAction For example in previous versions of SHFB TMicrosoftExpressionInteractivityCoreChangePropertyAction would link to which redirects to This page has a Were no longer updating this content regularly warning so this might be why its not available through the Microsoft Docs cross reference service even though the content does exist at docsmicrosoftcom under Previous Versions Im not sure what the best solution is but one option might be to make SHFB optionally fallback to the MTPS content service if the content cannot be found via the Microsoft Docs cross reference service If I reference in codeEntityReference a type that could not resolved for linking this reference and qualifyHint is set to true it places only simple name instead a full qualified xml codeEntityReference qualifyHinttrueTCommonICodeVersioncodeEntityReference results in ICodeVersion instead CommonICodeVersion Currently I have a workaround by placing CommonICodeVersion in linkText I have some annoying problem with SHFB in one of my project I link some web references which are using some Visual Studio generates an access classes These classes are excluded from SHFB by API filter because they produce warnings not well documented code One of my classes which servers like a routing table for clients produces several warning because it uses there references see below I have tried to elaborate with Additional Reference Links plugin no luck I dont have an assembly to link I have tried to elaborate with Assembly Binding Redirection plugin no luck I have tried to inject missing links directly into assemblys XML file so far manually with manually triggered build of the SHFB project No luck Any suggestion Does SHFB generated website help files have support for partial searching in the search bar For example I built some help files and there is a class with a function called GetDate I would expect the search to return the result for this if I searched GetDat but it doesnt It does return the expected result if I use the full name GetDate but a partial search is a lot more useful if the programmer doesnt know the full name off the top of their head Apologies if this has already been addressed I had a look through issues and documentation for an answer but I didnt see anything