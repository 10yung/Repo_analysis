Output argument MVAbase and maybe others not assigned during call to runopf Currently when there are multiple generators at the slack bus MATPOWERs power flow considers the first generator at the bus to be the slack generator taking up all of the slack However Im not sure if this convention is documented anywhere and it is probably not the behavior intuitively expected by most users I propose to update MATPOWERs handling of slack allocation among multiple generators at a slack bus in the following way If area participation factors APF column of gen matrix are provided split the slack according to the proportions indicated by the relative participation factors If area participation factors are not provided ie set to the slack will be distributed according to the size of the generator Ie for identical generators it will be distributed evenly This also needs to be mentioned explicitly in the documentation If a user tries to run an OPF with a case that does not define the gencost matrix it would be nice if MATPOWER warned and created a default gencost that used equal linear costs to minimize system active power losses It would also make sense to add an option opfobjective that would allow the user to request loss minimization instead of using gencost even when it is provided There may be other autogenerated objective options that could be useful as well The current psse mpc function handles RAW files only up to v Thanks to Atif Naveed for bringing this to our attention Since some extensions eg togglesoftlims are only relevant for OPF problems and not for simple power flow problems the callbacks need a canonical way to determine the context PF or OPF in which they are being called This is a workinprogress that I wrote some time ago It seems to work fine for distribution systems without PV buses but I know the PV bus handling is not correct For example case solves fine but not case matlab mpopt mpoptionverbose outall pfalg ZG runpfcase mpopt runpfcase mpopt Im putting it up here because it came up recently in the context of someone asking me about MATPOWER and distribution power flow If anyone familiar with PV handling in Zbus Gauss power flow would like to have a look and give me a hand that would be great The current makePTDF function is not suitable for large systems since it computes sensitivities of flows in all branches with respect to injections at all buses which is a very large dense matrix It would be nice for makePTDF to allow the user to specify the option to compute the shift factors for a small subset of buses We could either specify the subset of buses as a bus index vector or specify an nb x vector whose elements sum to zero that specifies a transfer directly The method to implement this feature is discussed in this post to MATPOWERL as well as in this comment in Volunteers to implement this are welcome Current MatPower version includes only branch rate A for OPF and there is no automated way to include rate B or rate C even though they are defined in the MatPower case This branch has the transformer calculations included Run tapsandphasesanalysis or run the example file provided For use the three files apart from the example file must be in same folder or included in path The method of modelling is based on power system sensitivity of regulation criterion line active powers and voltage amplitudes to taps and phases that are to be calculated Newtons method is used to find the zero of the control mismatch vector It is made so that MatPower provided files for the Ybus and the Jacobi matrix are used The function sensittotapsandphases is not optimized for systems with a very large number of transformers because I figured nobody will want to calculate more than a few hundred transformers If the performance is slow or it runs out of memory the function should be adapted so that sparse is used on matrices and that inputting the values into the matrices is done only once and not in a for loop as it is now