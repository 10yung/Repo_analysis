This is really a minor thing In the readme it says A stable v release is expected for March while some concepts are thought through and prototype code refactored Today it is november which is faaaar after march Perhaps it would make sense to update this to reflect what the reality of today is what is the latest version etc Or remove that sentence Usually every bit of config data is visible in the RSOP output But the LCM settings are missing the pull server URI and the RegistrationKey which is in the Meta MOFs so it does exist but not in the RSOP A repo is here The RSOP output for node PreServer yaml Environment Pre Description CoreDC in CSPre Name PreServer PSDscAllowPlainTextPassword true LcmConfig ConfigurationRepositoryWeb Server ConfigurationNames PreServer SoftwarePackages Package Name Password Policy Enforcer Ensure Present Path D Packages PPE PPE msi ProductId EBFC CA E C A PSDscAllowDomainUser true Configurations FilesAndFolders SoftwarePackages WindowsFeatures Role CoreDC WindowsFeatures Name TelnetClient FilesAndFolders Items DestinationPath C Test Frankfurt Type Directory Location Frankfurt NodeName PreServer The metamof with the content that is missing in RSOP TargetNodePreServer GeneratedByrandr GenerationDate GenerationHostRAANDREE instance of MSFTWebDownloadManager as MSFTWebDownloadManager ref SourceInfo ConfigurationRepositoryWeb ServerURL ResourceID ConfigurationRepositoryWeb Server RegistrationKey fbc ef ad aada b e ConfigurationNames PreServer instance of MSFTWebReportManager as MSFTWebReportManager ref SourceInfo ReportServerWeb ServerURL ResourceID ReportServerWeb ReportServerWeb RegistrationKey fbc ef ad aada b e instance of MSFTDSCMetaConfiguration as MSFTDSCMetaConfiguration ref RefreshMode Pull AllowModuleOverwrite True ActionAfterReboot ContinueConfiguration RefreshFrequencyMins RebootNodeIfNeeded True ConfigurationModeFrequencyMins ConfigurationMode ApplyAndMonitor ReportManagers MSFTWebReportManager ref ConfigurationDownloadManagers MSFTWebDownloadManager ref instance of OMIConfigurationDocument Version MinimumCompatibleVersion CompatibleVersionAdditionalProperties MSFTDSCMetaConfigurationStatusRetentionTimeInDays Authorrandr GenerationDate GenerationHostRAANDREE NameRootMetaMOF Is this by design or does something go wrong I have example files that demonstrate this issue at If you have a look at Datumps and once run look at the TableData object The output should return a collection of Windows shares with properties StartupType Name State If you look at the output below it returns objects for the services taken from Tibco FTLyml but for the service taken from Tibco Baseyml it is returning keyvalue pairs the last objects in the YAML below This behaviour only happens if the baseyml file contains one service definition If it has or more the output is perfect StartupType Automatic Name tibJettySvc State Running StartupType Automatic Name tibrealmserver State Running StartupType Automatic Name tibrealmserveras State Running StartupType Automatic Name tibstore State Running Key StartupType Value Automatic Key Name Value Base Service Key State Value Running Following our discussion you thought that this may be a bug that you had spotted but not yet released the fix for If Ive got a structure like below is is possible to say Id want yml psd json or something similar to let me choose which files should be added to the datum structure Nodes Node yml Node json Node psd The main use case here is that Ive got some folders with nodes in them that also contain ARM templates named after the node type along with config data which is what I want and a DSC config Since all the files match in name Datum is grabbing the json file first which isnt much use since its an ARM template If I could set a precedence for what file types it should look for first then that would be great or being able to filter out or in file types would be another useful solution I personally think that any string beginning with a dollar sign should be ran through InvokeExpression That would cover several use cases NodeName envComputerName GetCimInstance Win ComputerSystemName That last two would have to be compiled on the node but serves as an example If you really want a string beginning with a do pecialtring Thoughts find a way to declare how to get the nodes and load their RSOP in the configdata variable So far the best I found is this yaml Variables ConfigurationData AllNodes Path Datum AllNodes Environment Name Datum Path Datum ConfigurationData AllNodes The main goals are to define where to find the Nodes in the hierarchy what path metadata to be loaded property or to not include it Seen when loading a Datum Tree without a defined Data handler The tree seemed to load fine the DatumFileProvider looked fine but the data was actually missing ie DatumAllNodesDEVSRV was empty but existing Validation should be done in NewDatumStructure to make sure everything will work as expected or raise an exception and stop Theres currently no help available Itd be good to add some help and get those QA tests passed Similar to Redirections it would be useful to use variable interpolation in Datum similar to Hiera userdomain That would do a lookup for User and a lookup for Domain and then aggregates them Some Config Data should not or cannot be saved at the correct place of the hierarchy ie a config file or certificate used as a parameter to a Configuration yaml MyResource CN MyCN Certificate blob of file content Managing the certificate inline is not convenient the file should probably be in its own provider or mounted somewhere else in the Datum Tree DatumFilescertificatesMyResourceCert That means the data structure for MyResource should have the certificate file linked to the Certificate key of the config Data like so in a similar pattern that of Secure Datum yaml MyResource CN MyCN Certificate REF Files certificates MyResourceCert Now during a lookup Node MyResource Datum should resource the following hashtable resolving under the hood the file content or following what looks like a redirection PowerShell CN MyCN Certificate blob of file content 