Is it possible to change the license to ASL and or MIT Hi I have been trying to figure out how to include a puml oruml file from another file plantuml file Im using the editorial theme and I have the following directory structure orchid resources assets changlelog pages sampleuml anotheruml wiki includetestmd includetestmd loads the sampleuml as follows loadpagessampleuml raw Here is the sampleuml file under pages startuml include anotheruml enduml IncludeUrl works fine when pointed to URL but include with another uml file keeps giving a plantuml error of not able to include the file I wondered if that is something not supported yet or am I doing something wrong Thanks Screenshot from For example the following KDoc comment kotlin class ExampleApplication Application override val version String override val name String Example Kotlin Application override fun startvararg args String fori in argsfirsttoInt printlni Threadsleep class ExampleApplication Application results in This happens regardless of the used theme I see that Markdown is supported Is reStructuredText supported I have to admit over the years Ive come to fear software where the author talks about their plugin architecture Usually such software is a pain in the butt to use because basic features need magic incantations to enable and the docs are usually structured such that you have to figure it out yourself because the core docs arent supposed to talk about or link to plugin docs Plugins can make sense as a way to engineer a system but from a users perspective they can just be confusing For instance I discovered that in an out of the box Kotlin project with Orchid Kotlin code isnt syntax highlighted The regular tutorialsuser guide didnt seem to mention this so I looked for a plugin but its half way down a list with huge pieces of stock artwork that are unrelated to the plugins themselves so it took a bit of hunting Then I discovered there are two different ways to do syntax highlighting and I have no idea which is better I picked PrismJS because that way I dont have to modify each page and it works But it would have been nice to save the five minutes and have this be configured out of the box when by context the Maven plugin can know its in a Kotlin project Or maybe you could switch to enabling all plugins by default and then let the user disable the ones they dont want if they want to optimise the HTML download time probably most people dont care enhancement enable inter document xref linking with and include tags enhance image support in asciidoc markup pages for orchid why this would enable to use already existing asciidoc content to be included in orchid sites showcase i added a little bit asciidoc to the orchid starter project using those tags solution ideas usage of outfilesuffix attribute with asciidoc or possibility to set attributes in orchid gradle task enable include opt in while processing with asciidoctor correct unsafe mode nice to have copy referenced images to target path Theres a lot of functionality I built custom for Orchid but I would like to start migrating some of that stuff to libraries that could do it better and reduce the maintenance burden of Orchid There are also a handful of Java libraries that would be nice to migrate to purekotlin options that are better for this project Below is a list of the current functionality that I would like to replace ASCII tables Krow Picnic Logging Clog Timber Event Bus custom either find new library or see if I can get similar functionality without an event bus at all CLI A pretty hacky version of the common options kotlinxcli Options Enable usage of delegates instead of annotations for creating options in Kotlin x Bible verse API Eden just implement the API calls directly within the OrchidBible plugin and drop the library entirely DI Guice Koin currently blocked due to lack of multibindings Switch is ideal for improvements to startup performance and simpler API Dev Server NanoHTTPD custom routing framework Ktor also opens possibility of isomorphic deployment Validation API Hibernate Validator is this even that useful should we drop option validation entirely and just leave that up to the plugins when using those options Mocking Mockito Mockk Syndication reader and management tools such as Feedbro do not find Orchids automatically generated AtomRSS feeds since link elements for them are missing from the site pages head I fixed this by adding the following hack to srcorchidresourcestemplateslayoutslayoutBasepeb but a more complete solution should probably take into account if and how feed generation is enabled in configyml link relalternate typeapplicationatomxml title siteaboutsiteName Atom hrefatomxml link relalternate typeapplicationrssxml title siteaboutsiteName RSS hrefrssxml Also perhaps it would be useful to have a clickable icon on the page allowing visitors to add the feeds A common usecase would be to run Nodebased build pipelines for frontend assets The current way to add assets from these pipelines to an Orchid site is to simply run them independently but have the Node pipeline run before Orchid so that Orchid can pick up the outputs and use them There should be a way to have Orchid run these pipelines as part of its own build process Im thinking including something like a PublicationPipeline to the AssetsGenerator which can be configured via configyml There could be pipeline stages for specific types of runners gradle NPM yarn etc and it would be nice if they could emit output assets which get attached to pages automatically so that the user doesnt need to manually set the output files and so it would still work with dynamic hashed filenames Middlemans external pipelines seem to pretty much be the same idea that Im thinking of here for a better understanding of what Im thinking of for this A very common desire and rarely done due to the difficulty of it is to include snippets of code or other things in the documentation sites This new plugin would add a standard way of registering snippets with Orchid that could be embedded anywhere as a TemplateTag Something like this was implemented already for Strikt but that was very adhoc and crafted for that Orchid site This would need to be a more general solution that can be very easily set up and used by anyone Requirements A new plugin OrchidSnippets with ways of creating Snippets As static content files Markdown or otherwise in the snippets resource directory parsed as the text between commentsmarkers in ordinary text files in specified directories such as from unit tests or class declarations Features SnippetsGenerator A generator that produces no pages but indexes site resources and other directories to find available snippets SnippetTag A TemplateTag to display an indexed snippet by its ID inline in arbitrary content SnippetComponent An OrchidComponent to display an indexed snippet by its ID in the list of page components in the sidebar etc This will be included in the OrchidDocs bundle Dependencies Nothing is blocking work from being started on this feature It should be fairly easy to implement and would be a good candidate for someone looking to get started contributing to Orchid as it introduces some of the main concepts around plugin creation and indexing