partial fix for without the documentation update set appropriate version constraints for activerecord add additional constraint for mongoid to help bundler find a resolvable set of gems specify gem has a dependency on Railties in the gemspec Rails version on activerecord needs correct pinning to actually test against r and not r Mongoid specs are timing out at minutes with what appears to be a dependency resolution issue so appraisal wont run locally Outdated documentation in specreadmemd We just upgraded to Ruby and are seeing a deprecation warning from Rolify Usersnateburtrvmgemsruby gemsrolify librolifyrb warning Using the last argument as keyword parameters is deprecated maybe should be added to the call Is there any work planned on this If not Im happy to take a stab at it and open up a PR The line of code above does not take into consideration other models that may be using the role It will allow the system to delete a role that is not technically empty Example Dog and Cat are two models that uses rolify They both have a role named pet One day a Cat loses his pet role via removerole The above line of code will check to see if any other Cat has the pet role If we only had one Cat that would mean the role is now empty so the system then proceeds to delete the pet role This is bad because no one checked Dog who still has a pet role Sorry I do not have time to make a PR to fix this but I just want to note it here so everyone is aware of this bug The resource relation in Role mode template should be marked as optional for rails compatibility Save people from having to look this up I just discovered this repo and it seems like a great functionality that Im looking for It looks like there are a lot of open issues and even pull requests Is this repo still maintained Do you need help Id like to add displayname and description fields to the Role model for clarity when assigning roles in my User management screen Will it break anything in Rolify if I just make a migration adding these fields to the model Lets say I have models course coursequestions A user can be an editor of a course being an editor of a course means you can modify related models like coursequestions I want to find all of the coursequestions a user can modify I should be able to do that with a query like managedcourses Coursewithroleeditor user CourseQuestionjoinscoursemergemanagedcourses But bc withrole is using a select it messes up the ids So instead of selecting the attributes of coursequestion it actually selects the attributes of course and this swapping out the id If I do coursequestions CourseQuestionjoinscoursemergemanagedcourses coursequestionsfirstid This is actually the id of the course not the id coursemodules TLDR Dont use the active record merge method to determine if a users role works on subresources My quick fix is managedcourses Coursewithroleeditor user CourseQuestionjoinscoursewherecourses id managedcoursespluckid Rather than iterate through the entire roles array and then report if there are any values returned we can instead use any with a block that will shortcircuit when the first truthy value is returned This changes the call signature for RoleAdapterfindcached to return boolean rather than an array