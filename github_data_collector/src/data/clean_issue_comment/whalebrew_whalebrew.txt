This change will allow users to list tags of an image available for install It outputs tags with semver compliant tags sorted first then the remaining non semver tags appended An example use case looks like whalebrew list node INSTALLED TAG SIZE alpine MB alpine MB alpine MB alpine MB alpine MB alpine MB alpine MB This mr adds code to pull docker image via the api instead of execing a sub process Also ran go fmt so there are some white space changes The motivation behind this issue would be to eliminate the need to build docker images for repositories that require manual configuration for environment variables volumes etc These things likely dont change between patch minor or even major versions So im proposing a way to distribute a set of default settings based on public image repository name And possibly a way to map an images tag to a built tag in order to version defaults The whalebrewpackages repository could be transformed to a set of skeletons used as defaults that can be overridden by the actual image labels when installing the package The skeletons would just serve as a repository for these defaults A skeleton for awscli might look like Dockerfile FROM scratch LABEL iowhalebrewname aws LABEL iowhalebrewconfigenvironment AWSACCESSKEYID AWSSECRETACCESSKEY AWSSESSIONTOKEN AWSDEFAULTREGION AWSDEFAULTPROFILE AWSCONFIGFILE LABEL iowhalebrewconfigvolumes awsaws On my system after building this image docker says its size is B Essentially using dockerhub and possibly private repos if the image is from there as a store for these settings Add a first version of a script to release Whalebrew Changing all required files creating the tag and pushing The script creates the release from the latest version of the remote master branch It should be safe to run it from any branch It first creates a temporary corktree with all changes in changes the version file generates the CHANGELOG updates the Readme before committing tagging and pushing After everything is done it removes the whole worktree to leave a clean environment Since there is support for homebrew Eventually the script could as well in the future update the homebrew repository Permit the package author to specify a custom gid by providing a iowhalebrewconfigcustomgid label I would like to create a whalebrew package for mongod which starts MongoDB as a daemon I think it would be awesome if I could just run mongodb and whalebrew would start my MongoDB in a detached Docker container As far as I can tell all we need for that is a Docker image called whalebrewmongod from the following Dockerfile Dockerfile FROM mongo EXPOSE CMD mongod And a new config label for whalebrew called iowhalebrewconfigdetach which would set the d flag when running the container What do you guys think Packages should be able to specify a message that is displayed to the user when the package is installed Hey its super exciting to see whalebrew Ive been working on a similar concept that also uses labels to augment runtime and a woirkdir concept and think it would be cool to make my project compatible with whalebrew images In a perfect world we the community could create publish and pull from eachothers images Admittedly dex hardly has a community outside my workplace ATM It also suffers documentation clarity issues and the runtime is a workinprogressI kind of stalled on darwinMacOS X and am worried about overunder architecting some labels but I wanted to reach out nonetheless Do you think sharing thoughtspace solving these issues eg label names and behaviors mount points c worth pursuing If whalebrew enabled docker in docker see and also installed itself in all containers then you could have your tools talk to each other Goal my whalebrew packages can call each other Example when you build with microsoftdotnet you might want to call node or npm to do run frontend tasks Benefits Each tool is downloaded as needed eg docker run downloads what it needs Using official images gives you faster updates and welltested tools Your environment is now composable and updating or adding a tool automatically updates your whole environment You can run complicated tools in any Linux distro eg installing and running dotnet in Arch Linux is a nightmare Let me know what you think or if you think its not possible Thanks Whalebrew on Windows bfirshwhalebrew I checked on cmd and MSYS bash with Docker for Windows PR for Windows syscall exec To change syscallExec to execCommand because syscallExec causes Error on Windows Fix checking args First argument checking hack is not working on Windows I changed it Add batch file support When whalebrew install on Windows generate batch file Batch file passes shell file and args to whalebrew Fix default WHALEBREWINSTALLPATH I have no idea where is good for installpath on Windows Temporally WHALEBREWINSTALLPATH is C whalebrew if on Windows Add install script for Windows Install script will download whalebrewexe and set Path and WHALEBREWINSTALLPATH pathJoin filepathJoin cf Rewrite test for Windows Add MakePackagePath function Because package file name is different on Windows and nix TODO x CI Test for Windows x Best solution for WHALEBREWINSTALLPATH on Windows This is first time to write golang Please check changes Thanks