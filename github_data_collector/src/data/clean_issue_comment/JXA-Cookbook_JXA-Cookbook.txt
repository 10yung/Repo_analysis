My goal is to get an image of currently used text input Heres my code ObjCimportCarbon ObjCimportCocoa var currentSource TISCopyCurrentKeyboardInputSource var iconRef TISGetInputSourcePropertycurrentSource kTISPropertyIconRef var image NSImageallocinitWithIconReficonRef However Im getting an error Ref has incompatible type when I pass iconRef to initWithIconRef Similar code in swift works import Carbon import Cocoa let currentSource TISCopyCurrentKeyboardInputSourcetakeUnretainedValue let iconRef OpaquePointerTISGetInputSourcePropertycurrentSource kTISPropertyIconRef as IconRef let image NSImageiconRef iconRef img width altscreen shot at am src In case of ObjectiveC Id also need to cast TISInputSourceRef currentSource TISCopyCurrentKeyboardInputSource IconRef iconRef IconRefTISGetInputSourcePropertycurrentSource kTISPropertyIconRef NSImage image NSImage alloc initWithIconReficonRef Is it possible that during this IconRef casting something going on behind the scenes Is it possible to achieve the same with JXA Since I upgraded to macOS NSMakeRect now always throws NSInvalidArgumentException with reason NSGetSizeAndAlignment unsupported type encoding spec G at GPointsizeCGSize in CGPointsizeCGSize wat Anybody else run into this Ideas on whats going on Program usrbinenv osascript l JavaScript ObjCimportCocoa function runargv var r NSMakeRect Result osascript Terminating app due to uncaught exception NSInvalidArgumentException reason NSGetSizeAndAlignment unsupported type encoding spec G at GPointsizeCGSize in CGPointsizeCGSize First throw call stack CoreFoundation x fff f exceptionPreprocess libobjcAdylib x fff b fefb objcexceptionthrow CoreFoundation x fff f b bf NSGetSizeAndAlignment CoreFoundation x fff f b a NSGetSizeAndAlignment CoreFoundation x fff f c d NSGetSizeAndAlignment JavaScriptAppleEvents x fff db ba JSOCObjCTypeIterateTypes JavaScriptAppleEvents x fff db ae JSOCObjCTypeIterateStructElements JavaScriptAppleEvents x fff db a JSOCType typeWithObjCType JavaScriptAppleEvents x fff db af JSOCBridgeSupport typeForArgumentInfofallbackObjCType JavaScriptAppleEvents x fff db JSOCBridgeSupport typeForFunctionInfoisBlock JavaScriptAppleEvents x fff db ac JSOCBridgeSupport functionPointerForFunctionWithName JavaScriptAppleEvents x fff db f JSOCFunctionConstructorBlockblockinvoke CoreFoundation x fff f b ec invoking CoreFoundation x fff f b fb NSInvocation invoke JavaScriptCore x fff d cde ZN JSC ObjCCallbackFunctionImpl callEP JSContextP OpaqueJSValuemPKPKS PS JavaScriptCore x fff d c c ZN JSCL objCCallbackFunctionCallAsFunctionEPK OpaqueJSContextP OpaqueJSValueS mPKPKS PS JavaScriptCore x fff d c ec ZN JSC APICallbackFunction callINS ObjCCallbackFunctionEEExPNS ExecStateE JavaScriptCore x fff cf d vmEntryToNative JavaScriptCore x fff b e fe ZN JSC Interpreter executeCallEPNS ExecStateEPNS JSObjectENS CallTypeERKNS CallDataENS JSValueERKNS ArgListE JavaScriptCore x fff ZN JSC profiledCallEPNS ExecStateENS ProfilingReasonENS JSValueENS CallTypeERKNS CallDataES RKNS ArgListE JavaScriptCore x fff b e JSObjectCallAsFunction JavaScriptCore x fff c JSValue callWithArguments JavaScriptAppleEvents x fff db JSOCDollarObjectblockinvoke CoreFoundation x fff f b ec invoking CoreFoundation x fff f b fb NSInvocation invoke JavaScriptCore x fff d cde ZN JSC ObjCCallbackFunctionImpl callEP JSContextP OpaqueJSValuemPKPKS PS JavaScriptCore x fff d c c ZN JSCL objCCallbackFunctionCallAsFunctionEPK OpaqueJSContextP OpaqueJSValueS mPKPKS PS JavaScriptCore x fff d c ec ZN JSC APICallbackFunction callINS ObjCCallbackFunctionEEExPNS ExecStateE JavaScriptCore x fff cf d vmEntryToNative JavaScriptCore x fff b e fe ZN JSC Interpreter executeCallEPNS ExecStateEPNS JSObjectENS CallTypeERKNS CallDataENS JSValueERKNS ArgListE JavaScriptCore x fff ZN JSC profiledCallEPNS ExecStateENS ProfilingReasonENS JSValueENS CallTypeERKNS CallDataES RKNS ArgListE JavaScriptCore x fff b e JSObjectCallAsFunction JavaScriptAppleEvents x fff db fd e GetProperty JavaScriptCore x fff d ZN JSC JSCallbackObjectINS JSDestructibleObjectEE callbackGetterEPNS ExecStateExNS PropertyNameE JavaScriptCore x fff ca llintslowpathgetbyid JavaScriptCore x fff cf a llintentry JavaScriptCore x fff cf c vmEntryToJavaScript JavaScriptCore x fff b e b ZN JSC Interpreter executeCallEPNS ExecStateEPNS JSObjectENS CallTypeERKNS CallDataENS JSValueERKNS ArgListE JavaScriptCore x fff ZN JSC profiledCallEPNS ExecStateENS ProfilingReasonENS JSValueENS CallTypeERKNS CallDataES RKNS ArgListE JavaScriptCore x fff b e JSObjectCallAsFunction JavaScriptCore x fff c JSValue callWithArguments JavaScriptOSA x fff db JSStorageJSProcedures handleEventinContextmodeFlagsresultingResultID CoreFoundation x fff f b ec invoking CoreFoundation x fff f b fb NSInvocation invoke JavaScript x c bc JavaScriptComponent OpenScripting x fff ece da OSAExecuteEvent osascript x c b osascript libdylddylib x fff c d start libcabidylib terminating with uncaught exception of type NSException Abort trap In the cookbook examples using appwindowspushappWindow leads to Error Wrong index I recommend changing the examples to useappWindowmake So the documentation is a little sparse about what is exposed when Library access a Script Library file To use scripts as libraries store them in LibraryScript Libraries Suppose you have a script library named toolboxscpt which contains the following code function logmessage TextEdit ApplicationTextEdit doc TextEditdocuments Logrtf doctext message So I ran a little test on my own es The documented approach function one return true Identifier bindings two function return true var three function return true let four function return true Explicit property creation thisfive function return true function return this six function return true testsh Function declaration of the global environment Implicit propery of the objective global environment Identifier binding on the objective global environment Identifier binding on the declarative global environment Explicit property of the objective global environment via this selfref Explicit property of the objective global environment via anon func I suppose this should have been obvious but I was afraid Apple was doing some jiggerypokery on the backend specifically and exclusively extracting only functiondeclarations from the global environment or something like that Thought this might belong in the Cookbook JXA JavaScript for Automation Script Library exportstest Seems there are some thing missing like setTimeout Is it delay Following the very helpful ObjC example at and testing snippets like these in JXA function use strict ObjCimportCarbon ObjCimportstdio var sourceList TISCreateInputSourceListnull false var currentsource TISCopyCurrentKeyboardInputSource var cfs TISGetInputSourcePropertycurrentsource kTISPropertyInputSourceID var cfn TISGetInputSourcePropertycurrentsource kTISPropertyLocalizedName var sourceCount CFArrayGetCountsourceList return CFArrayGetValueAtIndexsourceList One quickly hits the challenge of how to read an object Ref to CF objects like CFString Does anyone have an insight into how that can be done In Applescript we can evaluate applescript the clipboard as record and get an object with keys to any RTF HTML utf etc data The Javascript view of the StandardAdditionssdef documentation suggests something similar but doesnt I think define the set of accepted type class arguments theClipboard method Return the contents of an application s clipboard Use in a tell block after activating the application theClipboard as type class the type of data desired any the data It might be good if anyone can unlock JXA access to HTML and RTF clipboard contents to have a clipboard section of this Wiki clipbboardInfo returns an array of byte sizes for various types of clipboard data but offers only undefined where one might expect to see the type class names Perhaps ObjC access to NSPasteBoard is the route to take There are tons of resources and existing scripts for AppleScript on the web but not so many for JXA It would be nice to see some examples with equivalent scripts written in both JXA and AppleScript so that newbies could see how the languages map to one another 