 Overview Brings over a few helper classes for XR SDK input on Windows Mixed Reality preparing for the full device manager Add an extension for the Windows SpatialInteractionSourceHandedness enum to allow for easy conversion the the MRTKs enum Add the XR SDK implementation from Rename the XR SDK configuration profile to better fit our name scheme Changes Part of Describe the bug I would like to use any pointer head gaze eye gaze hand rays to target a hologram on HoloLens and then when tapping down I would like to start moving it Ideally I want to reuse the same ManipulationHandler script but while the movement behavior seems to be working well when using hand rays it shows some weird depth movement when having hand rays turned off To reproduce Steps to reproduce the behavior If you use the HandInteractionAllExampleunity scene and start it with the DefaultHololens ConfigurationProfile holograms can be targeted and moved using hand rays In comparison if you switch the profile to EyeTrackingDemoConfigurationProfile you can look and airtap to select a hologram and then while pressing your index finger and thumb together move the hologram The leftrightupdown movement seems ok but when I move my hand to and away from my body the grabbed target moves on an unexpected trajectory Expected behavior I would expect that when I move my hand toward my body that the currently targeted no matter how I targeted it is coming toward me Your setup please complete the following information Unity Version f MRTK Version v Target platform please complete the following information HoloLens In reviewing the Boundary System code i noticed the following in Initialize c if ShowBoundaryWalls GetBoundaryWallVisualization if ShowBoundaryWalls GetBoundaryCeilingVisualization The second if is checking the wrong flag The boundary system reads the profile during initialization If the BoundaryHeight property is changed it should be resizing and repositioning walls and ceiling objects correctly Repro Configure the boundary profile to show walls and the ceiling Enter play mode From code raise the BoundaryHeight from the default to Notice the walls and ceiling are not resizedrepositioned The solution to this is to Not use an autoproperty for BoundaryHeight On set if the height has been changed Reposition the ceiling object Resize the wall objects Reposition the wall objects so they remain grounded on the floor Overview For custom applications it would be very useful to define custom gestures to perform certain actions Being able to add recognized gestures would open up a lot more interactivity in custom applications Expected behavior I expect to be able to add a custom gesture and invoke events when it is recognized I would also expect some tutorials or documentation on how to create custom gestures Actual behavior There is a predefined list of hand gestures that cannot be added upon The recognizer of gestures is blocked by dlls and inaccessible Unity editor version f Mixed Reality Toolkit release version MRTKv Overview This PR is following the issue I posted about the the InteractableRotationTheme behaviour It replaces the usage of world rotation for the start value of the interpolation by local rotation which seems to be more adapted Changes Fixes Verification As a reviewer it is possible to check out this change locally by using the following commands substituting PRID with the ID of this pull request git fetch origin pullPRIDheadnameoflocalbranch git checkout nameoflocalbranch Describe the bug InteractableRotationTheme is using a world rotation for the interpolations start value inheritdoc public override ThemePropertyValue GetPropertyThemeStateProperty property ThemePropertyValue start new ThemePropertyValue startVector hostTransformeulerAngles return start inheritdoc public override void SetValueThemeStateProperty property int index float percentage Vector lerpTarget propertyValues index Vector bool relative Properties ValueBool if relative lerpTarget originalRotation lerpTarget hostTransformlocalRotation QuaternionEulerVector LerppropertyStartValueVector lerpTarget percentage Since the interpolation is setting the local rotation in the SetValue function this induces weird behaviour in some cases for exemple when the parent transform of the rotated object has a rotation different from Vector zero By using hostTransformlocalEulerAngles in the GetProperty function the issue seems to be fixed To reproduce Steps to reproduce the behavior Open the InteractableExamples scene Set a random rotation to the object ModelBucky for example I used Press play and hover the object with your cursor to reach the focus state Your setup please complete the following information Unity Version f MRTK Version Target platform please complete the following information HoloLens HoloLens Describe the problem Design layout is a big challenge in the editor since there is no way to figure out if an element is in a certain range around FoV until build deploy to the device It would be great to have a visual indicator that can communicate the FoV of devices such as HoloLens Describe the solution youd like Visual outline box or actual viewport size in the editor that matches the actual FoV of the target device Hi I want to have access to the depth camera streams with the HoloLens as I was able to do with the HoloLens With the HoloLens I was able to call that method while with the HoloLens I have the exception no capture device available IReadOnlyListMediaFrameSourceGroup allFrameSourceGroups await MediaFrameSourceGroupFindAllAsync I paid attention to activate both the Camera and the perceptionSensorsExperimental Capabilities xml version encodingutf Package xmlnsmp xmlnsuap xmlnsuap xmlnsuap xmlnsuap xmlnsiot xmlnsmobile xmlnsrescap IgnorableNamespacesuap uap uap uap mp mobile iot rescap xmlns Identity NameSciVisHololens PublisherCNDefaultCompany Version mpPhoneIdentity PhoneProductId e bd b b d e d PhonePublisherId Properties DisplayNameSciVisHololensDisplayName PublisherDisplayNameDefaultCompanyPublisherDisplayName LogoAssets StoreLogopngLogo Properties Dependencies TargetDeviceFamily NameWindowsHolographic MinVersion MaxVersionTested Dependencies Resources Resource Languagexgenerate Resources Applications Application IdApp Executabletargetnametokenexe EntryPointSciVisHololensApp uapVisualElements DisplayNameSciVisHololens Square x LogoAssets Square x Logopng Square x LogoAssets Square x Logopng DescriptionSciVisHololens BackgroundColortransparent uapDefaultTile ShortNameSciVisHololens Wide x LogoAssets Wide x Logopng uapSplashScreen ImageAssets SplashScreenpng BackgroundColorFFFFFF uapInitialRotationPreference uapRotation Preferencelandscape uapRotation PreferencelandscapeFlipped uapRotation Preferenceportrait uapRotation PreferenceportraitFlipped uapInitialRotationPreference uapVisualElements Application Applications Capabilities Capability NameinternetClient uap Capability NamespatialPerception iotCapability NamelowLevelDevices rescapCapability NameperceptionSensorsExperimental DeviceCapability Namewebcam DeviceCapability Namemicrophone DeviceCapability Namehumaninterfacedevice Device Idany Function Typeusage Device Device Idany Function Typeusage Device DeviceCapability Capabilities Package My HoloLens is uptodate and I should at least be able to access the default RGB camera I compiled a managed assembly OUTSIDE Unity for the piece of code handling cameras in ARM minimal version I wanted to compile with the version as the doc advices regarding that function but then I have a conflict about systemruntime versions between my managed assembly and Unity I both tried using Unity LTS and Unity last version to generate the IL CPP code compiled using Unity target HoloLens ARM MRTK version v thank you Describe the issue It seems that ARFoundation is compatible with MRTK So I wanted to use the Object Tracker Subsystem to recognize a real object and displays virtual info around it In the documentation of the Object Tracker Susbsystem it is written You will need to then populate the reference object entries with providerspecific assets Refer to the providers documentation for instructions on how to do this So I looked into the MRTK Documentation and found nothing Feature area The documentation is missing information about How to Create a Reference Object Entries in UWP for using ARFoundation Object Tracker Subsystem Existing doc link The only things I found are about iOS and Android But I would like to use the ARFoundation with UWP and HoloLens Additional context Maybe Im wrong and I cant use ARFoundation with HoloLens I did not even try to use the image tracker Maybe this one does not even work If ARFoundation doesnt work with HL sorry to believe that in the first place 