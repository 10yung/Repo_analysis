There are redundant codes for initializing JSONBodyParameters I make it possible to initialize simply from Dictionary Literal Before swift let object foo bar baz let parameters JSONBodyParametersJSONObject object After swift let parameters JSONBodyParameters foo bar baz or swift let parameters foo bar baz as JSONBodyParameters This problem occurred on MultipartFormDataBodyParametersPartdata Data The declaration code was like below struct MyFormRequest Request let baseURL URLstring let method HTTPMethod get let path typealias Response Void private let parts MultipartFormDataBodyParametersPart initimages UIImage throws parts try imagesmap guard let data jpegData else throw AppErrorinvalidSession return data enumeratedmap i data in MultipartFormDataBodyParametersPart data data name images mimeType imagejpeg fileName imagae ijpg var bodyParameters BodyParameters return MultipartFormDataBodyParameters parts parts boundary abcdef func responsefrom object Any urlResponse HTTPURLResponse throws Then call it like below func executeimages UIImage let request MyFormRequestimages images Sessionsendrequest request result in if case success result return retry the request with the same instance Sessionsendrequest request result in it will be never success or failure I noticed this problem occured because of the class MultipartFormDataBodyParameters reads InputStream without rewinding or renewing stream MultipartFormDataBodyParametersswift case bodyRange if bodyPartinputStreamstreamStatus notOpen bodyPartinputStreamopen this line never finished when calling read twice on same instance let readLength bodyPartinputStreamreadoffsetBuffer maxLength availableLength sentLength readLength totalSentLength readLength So I resolved it by changing Request class like below finally struct MyFormRequest Request let baseURL URLstring let method HTTPMethod get let path typealias Response Void private let images Data initimages UIImage throws images try imagesmap guard let data jpegData else throw AppErrorinvalidSession return data Do not create Part instance while initialization var bodyParameters BodyParameters Recreate part instance for each request let parts imagesenumeratedmap i data in MultipartFormDataBodyParametersPart data data name images mimeType imagejpeg fileName imagae ijpg return MultipartFormDataBodyParameters parts parts boundary abcdef func responsefrom object Any urlResponse HTTPURLResponse throws To begin with I think the request instance should not be reuse But in our project we have to reuse it We wrap APIKit with RxSwift When the retryable error network connection error or somethink occurred to retry the request we have to resubscribe the same streamObservable with same request instance I hope this post can help someone Environment APIKit version iOS Xcode E Im trying to update an app that depended on APIKit beta swift to current swift version The app is using progressHandler However beta tag is on develop branch It seems that the branch is not merged into master and latest release tag Currently if user calls Sessionsendrequest without setting the callback queue it will use main thread for processing the callback But APIKit in layered architecture designing should be in the infrastructure layer or persistence layer And on the other side main queue in iOS since it mainly handles UI process is usually considered in the UI layer Therefore its probably not a good idea to let APIKit know about the main queue its a UI world thing which an infrastructure world thing probably should not know And by using main queue which may also be used by any object in the program as the default queue its very easy to cause a deadlock if a user tries to use a semaphore to stop current thread until the response received So my opinion is that in Sessions initializer maybe its better to set the default value of callbackQueue to DispatchQueueglobal or DispatchQueuelabel someLabel Thanks for considering this issue JSONSerializationdata scapes slashes and when used in HTTP body this creates a whole lot of issues We can fix it in buildEntity For example when we have the request with var bodyParameters BodyParameters return JSONBodyParametersJSONObject bodyParam base Witha after call buildEntity we will get a request with body pararam bodyParam base With a Trying to fix Similar case json lang EN countryLiteralCode string mobileNumber string password string deviceId string model string deviceTechInfo model string osVersion string userAgent string deviceOS string I have this json object and I need to put it on body parameters Here below my code swift struct doActivation AllpayAPIRequest typealias Response CommonResult let phone String let password String let countryLiteralCode String initphoneNumber String password String countryLiteralCode String selfphone phoneNumber selfpassword password selfcountryLiteralCode countryLiteralCode var method HTTPMethod return post var path String return v registrationdoActivationOnly var bodyParameters BodyParameters return JSONBodyParametersJSONObject model Constantsmodel mobileNumber phone password password deviceId Constantsdevice countryLiteralCode countryLiteralCode lang Constantslanguppercased deviceTechInfo model string osVersion string userAgent string deviceOS string func responsefrom object Any urlResponse HTTPURLResponse throws CommonResult return try CommonResultobject object But im getting error responseErrorError DomainNSCocoaErrorDomain Code JSON text did not start with array or object and option to allow fragments not set UserInfoNSDebugDescriptionJSON text did not start with array or object and option to allow fragments not set I think its because of format So has APIKIT some solution for this issue Hi I found this exception in Crashlytics crash logs from my production app I can reproduce and paste it bellow But I cannot find how to fix it So I just report this Terminating app due to uncaught exception NSInvalidArgumentException reason propertyForKey only defined for abstract class Define TtCV APIKit MultipartFormDataBodyParameters MultipartInputStream propertyForKey Xcode iOS SDK iPhone Plus iOS simulator swift import UIKit import APIKit protocol HttpBinRequest Request extension HttpBinRequest var baseURL URL return URLstring struct PostRequest HttpBinRequest typealias Response Any var method HTTPMethod return post var path String return post var bodyParameters BodyParameters let p try MultipartFormDataBodyParametersPart value value name name return MultipartFormDataBodyParametersparts p entityType inputStream func responsefrom object Any urlResponse HTTPURLResponse throws Response return object class ViewController UIViewController override func viewDidLoad superviewDidLoad let request PostRequest Sessionsendrequest result in printresult switch result case successlet response printresponse case failurelet error printerror error Hi ishkawa Ive been reading your outstanding project and I have question about your code Could you please answer below questions if its convenience In Sessionswift Line Ive noticed you use a return I dont understand whats the purpose of that Could you explain swift open func cancelRequestsRequest APIKitRequestwith requestType RequestType passingTest test escaping Request Bool in true adaptergetTasks weak self tasks in return tasks filter task in if let request selfrequestForTasktask as Request return testrequest else return false forEach cancel In URLSessionAdapterswift Line Ive noticed you use a allTasksmap is it necessary to map it swift open func getTaskswith handler escaping SessionTask Void urlSessiongetTasksWithCompletionHandler dataTasks uploadTasks downloadTasks in let allTasks dataTasks as URLSessionTask uploadTasks as URLSessionTask downloadTasks as URLSessionTask handlerallTasksmap Thank you in advance Are there any plan to support ReactiveRxSwift for APIKit