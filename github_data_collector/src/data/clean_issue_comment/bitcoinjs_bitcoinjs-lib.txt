 Add doublequote to prettier execution Remove the logging output to devnull This does cause a bit more logging to be outputted Closes Issue It used to be possible to build the lib on Windows but not after the migration to TypeScript and the way prettier is being utilized formatjs npm run prettierjs write devnull There are no devnull on Windows though nul can be used as an alternative at least when running from cmdexe The second issue is with how prettier is called prettierjs prettier srcjs ignorepath prettierignore Windows does not recognice singlequotes as strings it must be doublequote characters This also fails on Windows I presume the piping is just to avoid logging output If this is not a critical thing to avoid I suggest dropping piping the log output and just show it Solution This is a way to output the logging to a nulldevice on Windows formatjswin npm run prettierjs write nul If the exact same thing is run on Linux it will create and overwrite a file named nul Probably not an optimal solution for crossplatform support so this is not a full solution to that issue Here is a fix for the prettier scripts they must be run with escaped doublequotes prettier prettier tssrcts testts ignorepath prettierignore prettierjs prettier srcjs ignorepath prettierignore This will be a place to brainstorm ideas Needs Tagged Hashes maybe make a smaller separate package Taproot builder can we wedge this into the existing Payments API it seems to act similar to p sh and p wsh and the lazyloading should help greatly with performance due to the crypto operations to calculate the tweaked pubkey Segwit v Address generation via the PaymentsTaproot API Schnorr signing module Modify tinysecp k not sure what to do with native JS though Questions When should this be implemented Im guessing we should wait for at least a testnet release of Taproot before spending time on it But at the same time it would help the development of taproot if we can look at taproot with fresh eyes a new perspective and make suggestions based on problems while implementing This is going to be a pretty big change so maybe it should be a major version bump and that way we can reconsider existing API structure when adding Taproot Thoughts and comments welcome How can you Verify a Transaction in a block for example if i receive a transaction lets say in HEX how would i know the transaction is signed by the owner Maybe an example with a hardcodedvalue would be helpful I think Im following as much as I could understood from this reference but it doesnt seems to be working this is my minimal reproducible example Ive got typescript tslintdisable requireregeneratorruntime const default Transport requireledgerhqhwtransportnodehid const default AppBtc requireledgerhqhwappbtc import as bitcoin from bitcoinjslib const MNEMONICS abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about not used but theres no harm since this is what I and ledgerhq used to test anyway const NETWORK bitcoinnetworksregtest const destinationAddress MuhtGHkdxiL BjFAAaYjq Q mwnCoYSebt const segwit true const LOCKTIME const path m function compressPublicKeypk string string return bitcoinECPairfromPublicKeyBufferfrompk hexpublicKeytoStringhex async function main Promisevoid const ecPrivate bitcoinECPairfromPrivateKeyBufferfrom e b fac a a a e c c b a d ea e f d e d hex network NETWORK const ecPublic bitcoinECPairfromPublicKeyecPrivatepublicKey network NETWORK const p wpkh bitcoinpaymentsp wpkh pubkey ecPublicpublicKey network NETWORK const p sh bitcoinpaymentsp sh redeem p wpkh network NETWORK const redeemScript p wpkhoutput as Buffer const inputTxHex e d c aff a a c ce af dca ac f e d d e cccb f ec b a b f b e d efeffffff bcf d cc e e a d fe ffb c fb e f f aef caa e a ecea ce cb a f afeffffff cad d ec bc cf b daa a d f bddad fc a c c ea fa d de e e a e d a edbaff feffffff b b e aba c dcbc c a c db de edc a fd cc f b a e d b f fb ea b fba feffffffafd c b eab aa a e e a dc b df dc b e b c ffd fd ca eaa e dc fdbed f feffffff e f a f f b afafacde fcd a b e c f a afb a eb f cb d c e ed bfc e aece c c fc df e f d f b d f d c d a e aedbc f ce fad ab ba e e bbec d dc c ee db bd d bad a f dd e b c ca d f f f aa de b df cf bd c e d f d fcacb abd dad a abb e c d c b a c c f f dab d cb b ba c fc b bf c e dfe a b c cfb c f cab fcad f fc d c d c e eca b dff c ce d d de f aee bad ef f e a c a bc c dec fee c b fa c db a b d d df fb e d dc ac c b a cbef ab ba f ac b d d b f f b e a ac bea af eeb e b dd a c f c c cd d f e d d ca f cbcc ec b a f d dc a b c fc f eb d a c a c c f a e b f c c e d d b ef cca b ca a dc d f d eb e e a bac c cbacadbe this is the utxo with txid ba c cadf ded d dcdb df b da ea cff when decoded the first outputs is the p shaddress from the MNEMONICS at the path m const txid ba c cadf ded d dcdb df b da ea cff const psbt new bitcoinPsbt network NETWORK psbtaddInput hash txid index nonWitnessUtxo BufferfrominputTxHex hex redeemScript sequence const output address destinationAddress value psbtaddOutputoutput const transport await Transportcreate const btc new AppBtctransport const fromLedger await btcgetWalletPublicKeypath format p sh const ledgerPublicKey compressPublicKeyfromLedgerpublicKey const bitcoinJsPublicKey ecPublicpublicKey as BuffertoStringhex consolelog ledgerPublicKey bitcoinJsPublicKey verifying ledger and bitcoinjslib has the same public key const paths path const tx await psbt as anyCACHETXtoHex const ledgerTx await btcsplitTransactiontx true const ledgerOutputs Buffer await btcserializeTransactionOutputsledgerTx const txInput await btcsplitTransactioninputTxHex segwit const outputScript p sh as bitcoinpaymentsPaymentoutput as Buffer is this correct const inputs txInput outputScript as BuffertoStringhex const signatures await btcsignP SHTransaction inputs paths ledgerOutputstoStringhex LOCKTIME undefined segwit const signer network NETWORK publicKey BufferfromledgerPublicKey hex sign hash Buffer const signature ecPrivatesignhash just for comparison const ledgerSign bitcoinscriptsignaturedecodeBufferfromsignatures hex consolelog hash hashtoStringhex osg signaturetoStringhex lsg ledgerSignsignaturetoStringhex return signature return ledgerSignsignature as unknown as bitcoinECPairInterface psbtsignInput signer const validated psbtvalidateSignaturesOfInput consolelog validated Id expect that this would be validated true just like if the sign method of signer above just return signature instead of ledgerSignsignature main I also asked this question on Stackoverflow hoping to get some help Hello Having this code js const alice ECPairfromWIF cQVWFq CMaFtUPrYat by JQuWDoiSB uzJR nzDmdUBkkY YTM TESTNET const p pkh paymentsp pkh pubkey alicepublicKey network TESTNET const txb new TransactionBuilderTESTNET const txid dce fec ba eb ae c eaa f e cc d ba d fc const vout txbaddInputtxid vout null p pkhoutput txbaddOutput N kuwmUqaYm iifDrrxXQW oW uGX Pf txbsign alice const tx txbbuild consolelogtx tx toHex I get this hexadecimal c f d a bd c c e f a eac ae eb a bec fce d b b d ce a a d d ed a dad d ba f a f a b ebe e ee d abdf ae dc a b f c cbdbc fe cb b f ab d ff f b edd c c aaf f da b b f fcd cff cfb eb ffffffff a a c e f ccc abe d e aaba When I send using blockcypher to the network I get this validation error Error validating transaction Error running script for input referencing dce fec ba eb ae c eaa f e cc d ba d fc at Script was NOT verified successfully If I try to get the address of the WIF private key Im using I get a different address js const alice ECPairfromWIF cQVWFq CMaFtUPrYat by JQuWDoiSB uzJR nzDmdUBkkY YTM TESTNET const address paymentsp pkh pubkey alicepublicKey network TESTNET const publicKey alicepublicKeytoStringhex const privateKey alicetoWIF consolelogalice address address privateKey publicKey address mzWY FWn PYDMPXKW yywRuYKawpqXmZ privateKey cQVWFq CMaFtUPrYat by JQuWDoiSB uzJR nzDmdUBkkY YTM publicKey f b edd c c aaf f da b b f fcd cff cfb eb I dont know if the WIF is the problem to get the validation error I get the type of UTXO or something else Any ideas please Thank you very much UTXOs for N K uf ND fQGxZdBUb whd Ukwi ZEJu bitcoincli testnet listunspent txid dce fec ba eb ae c eaa f e cc d ba d fc vout address N K uf ND fQGxZdBUb whd Ukwi ZEJu redeemScript c a a bceb e b fac ef ff dc cdd scriptPubKey a a f c bd b b bb cdc f d df a amount confirmations spendable true solvable true safe true This will allow people to use arbitrary scripts Bring over TransactionInput from BIP to here Remove from BIP For more information see this Introduction and Live Compiler 