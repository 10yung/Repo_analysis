Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Bumps mixindeep from to details summaryCommitssummary f c ee fa ensure keys are valid when mixing in values See full diff in compare view details details summaryMaintainer changessummary This version was pushed to npm by doowb a new releaser for mixindeep since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED SUPPORT REQUESTSQUESTIONS If you have a support request or question please submit them to StackOverflow using the tags aurelia and aureliaframework or the Aurelia Gitter SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED BUGS Please use this template Blue Spire offers paid support agreements Further information regarding paid support may be obtained by emailing supportbluespirecom The HTML comments below are for your reference and are not displayed when your issue is submitted feel free to leave them Choose one of the two headings delete the other Im submitting a bug report Library Version Please tell us about your environment Operating System Linux LinuxMint Node Version Minimum supported Node version is latest Node x LTS run node v NPM Version Minimum supported NPM version is x run npm v Aurelia CLI OR JSPM OR Webpack AND Version JSPM If using Aurelia CLI run au v in project root If using JSPM run jspm v in project root If using Webpack run webpack help grep webpack Browser all Language TypeScript Current behavior Executing the app and loading views with useViewresourcespanelsdatatablepanelhtml works but running a component test fails Caused by htmlfile not found By changing the path to useViewsrcresourcespanelsdatatablepanelhtml the component can be staged which the leads to a if the app gets started later by serving it with gulp aureliafiletree aureliastockvaluecustomelement aureliakarma conf js aureliacomponent spec ts aureliagulptddoutput Expecteddesired behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem along with a runnable gist if possible To create a runnable gist go to Then click Fork to Public Gist Create your gist then finally click Update Gist Include a link to the gistrun below ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED SUPPORT REQUESTSQUESTIONS If you have a support request or question please submit them to StackOverflow using the tags aurelia and aureliaframework or the Aurelia Gitter SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED BUGS Please use this template Blue Spire offers paid support agreements Further information regarding paid support may be obtained by emailing supportbluespirecom The HTML comments below are for your reference and are not displayed when your issue is submitted feel free to leave them Choose one of the two headings delete the other Im submitting a bug report Library Version Please tell us about your environment Operating System Windows Node Version Minimum supported Node version is latest Node x LTS run node v NPM Version Minimum supported NPM version is x run npm v Aurelia CLI OR JSPM OR Webpack AND Version none If using Aurelia CLI run au v in project root If using JSPM run jspm v in project root If using Webpack run webpack help grep webpack Browser all Language all Current behavior Unable to build with node because gulp is not supported Expecteddesired behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem along with a runnable gist if possible To create a runnable gist go to Then click Fork to Public Gist Create your gist then finally click Update Gist Include a link to the gistrun below It should be possible to build after checkout with node I tried briefly to upgrade to gulp but I think this requires more talented people It is the same reason why I am unable to compile What is the motivation use case for changing the behavior I need to fix ISSUES SUBMITTED THAT DO NOT FOLLOW THIS TEMPLATE WILL BE CLOSED SUPPORT REQUESTSQUESTIONS If you have a support request or question please submit them to StackOverflow using the tags aurelia and aureliaframework or the Aurelia Gitter SUPPORT REQUESTS SUBMITTED HERE WILL BE CLOSED BUGS Please use this template Blue Spire offers paid support agreements Further information regarding paid support may be obtained by emailing supportbluespirecom The HTML comments below are for your reference and are not displayed when your issue is submitted feel free to leave them Choose one of the two headings delete the other Im submitting a feature request Library Version Please tell us about your environment Operating System Windows Node Version NPM Version Aurelia CLI OR JSPM OR Webpack AND Version none Browser all Language TypeScript Current behavior During intial configuration when modules are included the module configuration argument is of type any aureliausepluginmymodule options any It is currently not possible for module authors to improve typings for their module as aureliause is of type FrameworkConfiguration and it is not possible to extend classes with typings in typescript Expecteddesired behavior If the current behavior is a bug please provide the steps to reproduce and if possible a minimal demo of the problem along with a runnable gist if possible To create a runnable gist go to Then click Fork to Public Gist Create your gist then finally click Update Gist Include a link to the gistrun below It would be really neat if the FramworkConfiguration implemented an interface say IFramworkConfiguration for the builder api instead of the FrameworkConfiguration itself The interface should of cause contain all all the propertiesmethods of FramworkConfiguration and the return type for the methods should be changed to IFrameworkConfiguration This change would enable module authors to include typing aided configuration Say for example import IFrameworkConfiguration from aureliaframework import CacheOptions from cacheoptions declare module aureliaframework interface IFrameworkConfiguration pluginplugin aureliaworkboxcachecontrol configureAction options CacheOptions unknown FrameworkConfiguration To make this work with PLATFORMmoduleName in webpack environments its typing definitation should be changed from moduleNamemoduleName string options ModuleNameOptions string moduleNamemoduleName string chunk string string to moduleNameT extends stringmoduleName T options ModuleNameOptions T moduleNameT extends stringmoduleName T chunk string T to specifically tell typescript that the same module name is returned What is the motivation use case for changing the behavior To make for a more robust plugin experience where configuration is typed Im submitting a feature request Library Version v Operating System Windows Node Version v NPM Version v Aurelia CLI Version CLI v Browser all Language ESNext Current behavior Currently there are two options to develop a customattribute in aurelia One to use dynamicOptions and one to not If dynamicOptions is not used I can mark a bindable as primaryProperty but in other way when dynamicOptions is used I cant find a way to specify a primaryProperty And if I use dynamicOptions and also define a bindable the dynamicOptions stops working Expecteddesired behavior I think it will be a good possibility to be able to use both dynamicOptions and bindable primaryProperty true in a component or attribute Because I have some predefined properties that I want to have configurations like primaryProperty on them and also I want to be able to receive dynamic options What is the motivation use case for changing the behavior Being able to have benefits of dynamicOptions and primaryPropert in a place If you use a compose element whos activate function returns a promise within a ViewModel the router complete event seems to fire before the promise is resolved which causes a jumpiness in the navigation If we remove the compose element from the view model everything works fine Is this behavior intended Shouldnt the router wait for the entire view to compose include any composed elements composecompose before considering navigation complete The process looks like this Navigate from page A to Page B RouterIsNavigating true RouterIsNavigating false at this point page A still shows as Page B hasnt fully been composed Page B is fully composed and shown I am trying to setup an app but I am not really happy with the project structure I use aureliacli to build app My which is to have all files like ts less in src folder and after build move it to www so that this folder becomes app web root and contains only website files My root of the project might have so many other configuration files so I do not want to have that mess in the project root I have been able to configure everything as I want and only one thing is not working First let me say what I did in aureliajson platform port index indexhtml baseDir www output wwwscripts build targets port index indexhtml baseDir www output wwwscripts this is places where added www Output for build process mode bundles to www folder baseDir so that web server on au run watch starts in the www folder as root But I have problem that vendorbundlejs at the end generate function aureliaConfigureModuleLoaderwindowdefineSystemJSamdDefine windowrequirewindowrequirejsSystemJSamdRequire SystemJSconfig map text text appbundle wwwscriptsappbundlejs bundles appbundle app apphtmltext exthomehome exthomeindex exthometmplhomehtmltext exthometmplindexhtmltext main unknow unknowhtmltext You can see that it adds www to appbundlejs directory So that when it is loaded it cannot load appbundle If I fix it by hand everything works until the new update of vendorbundle file And there is not way to fix it from configuration as I can see If I delete www in aureliajson then is generates scripts in the other folder not inside www if keep it it adds www to that path I think that baseDir has to be deleted from the path to file So fix have to be applied in aureliacli I tried to find it and make PR but I could not find it is too complicated for me Im submitting a feature request Library Version aureliascript Current behavior If you make a typo or on this case I forgot to add async to a function you get a long but useless stacktrace pointing to inside of aurelia but nowhere in the stack trace does it give me any clue of what view class file is at fault Ive had this issue for years ever since Aurelia was still in beta and its been my biggest problem with aurelia ever since Because despite having developmentLogging enabled Im subjected to tearing my app down and uncommenting it line by line until I find the needle in the haystack Expected Behavior Some general information about origin of the error the file line or a classmethod Im submitting a bug report Library Version aureliabootstrapper aureliafetchclient aureliaframework aureliahistorybrowser aurelialoaderwebpack aurelialoggingconsole aureliapalbrowser aureliapolyfills aureliarouter aureliatemplating aureliatemplatingbinding aureliatemplatingresources aureliatemplatingrouter and aurelialoadernodejs aureliapalnodejs aureliaprotractorplugin aureliatesting aureliatools aureliawebpackplugin rc Please tell us about your environment Operating System Windows Node Version v Minimum supported Node version is latest Node x LTS run node v NPM Version Minimum supported NPM version is x run npm v Aurelia CLI OR JSPM OR Webpack AND Version webpack Browser All Language ESNext Current behavior When injecting a variable into the constructor of appjs it is not initialized on the first screen loaded in the application When navigating to a subsequent screen it becomes available for use in the template tags of all viewModels Expecteddesired behavior A variable initialized in the constructor of appjs should be available to all viewModels within template tags without needing to inject them into each individual viewModel What is the motivation use case for changing the behavior This previously worked with aureliaframework Example Code based on skeletonesnextwebpack after updating dependencies in packagejson constantsjs export const TESTCONST Constant appjs import PLATFORM from aureliapal import as Constants from constants import inject from aureliaframework injectConstants export class App constructorconstants thisconstants constants configureRouterconfig router configtitle Aurelia configmap route welcome name welcome moduleId PLATFORMmoduleNamewelcome nav true title Welcome route users name users moduleId PLATFORMmoduleNameusers nav true title Github Users route childrouter name childrouter moduleId PLATFORMmoduleNamechildrouter nav true title Child Router thisrouter router welcomehtml template section classauanimate h headingh h CONSTANT constantsTESTCONSTh template The above constant does not print in welcomehtml However if I put it inside usershtml it does print on that screen