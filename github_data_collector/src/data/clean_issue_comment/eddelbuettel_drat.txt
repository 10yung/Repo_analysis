This is not really an issue in the sense that its a drat bug that needs fixing but more a report on a problem I ran into as well as others before me and there even exists a notaccepted PR for fixing this among other things Following the hurricaneexposuredata idea I set up a ghpages based drat repository with the following folder structure src contrib datapackage targz PACKAGES PACKAGESgz PACKAGESrds and I use this repository in another package by having the following in its DESCRIPTION Suggests datapackage Additionalrepositories As datapackage does not require compilation and being a data package size is not negligible it does not make sense to add binary sources to the repo Unfortunately under WinMac OS such a setup can cause issues as remotesinstalldeps will fail because utilsinstallpackages throws a warning This can be remedied by doing any of set RREMOTESNOERRORSFROMWARNINGS to true a bit broad as will apply to all deps you pass type sourcespecify contriburl which remotesinstalldeps will forward to utilsinstallpackages not ideal in CI environments add some empty PACKAGES files in the appropriate places below bin the solution in Personally I feel that this should either be mentioned in the docs or that parts of should be reconsidered as it did take some time for me to the to the bottom of this Im happy to look into salvaging this aspect of What do you think eddelbuettel Currently insertPackages silently overwrites an existing targz of the same version This default seems dangerous Would you support an overwrite argument to insertPackages defaulting to FALSE Thank for this super handy package Is there any appetite for a function that removes completely a package from a drat repo It is very possible that I am misunderstanding how drat works and if that is the case I apologize Right now from this issue I learned of pruneRepo So this is great in that I can generate a vector of the package Id like to remove like so pruneReporepopath CdevGitHubreposdrat pkg PACKAGENAME Then as recommend I can use git rm to remove the PACKAGENAMEtargz file But all other elements of the package are left in PACKAGES PACKAGESgz and PACKAGESrds Is there any way to remove those The removeTRUE args of pruneRepo seems set up to remove the targz file but not the other elements Again great package really fills a need Any insight on this would be much appreciated Thanks for this terrifically useful package The branch that drat commits ghpages is hardcoded This is sensible in general but for user or organization Github pages ie usergithubio Github requires those files to be stored in the master branch of a repo named usergithubio Because of the hardcoding it isnt possible to use drat to create a drat repo in such a Github repo What do you think of adding a field in insertPackage for branch name ie insertPackagebranch master Happy to add a PR Similar to setting the working directory back to the curwd in could the same be done after maybe commiting It would really be helpful when supplying relative routes for the repodir and trying to prune or archive after commiting Thank you for the awesome package Barret A package that I am developing is larger than the mb limit of GitHub repositories it contains OpenCV sources I therefore opted to use gitlfs with my drat repository in order to allow this package to be pushed to my drat repository Unfortunately it seems that drat does not download the targz of the package when called from R but rather the text pointer created by gitlfs and pointing toward the actual location of the targz Ive created a simple drat repository here with a call to dratinitRepo and then dratinsertPackagesashimi targz for a locally built package sashimi All is well with installpackagessashimi type source However as is default on nonLinux systems using type both installpackagessashimi type both gives a warning curl The requested URL returned error Not Found Warning in readdcffile tmpf cannot open compressed file varfolderstm dt p s x br k wpqnwx gnTRtmpyPMPgHfile d b d probable reason No such file or directory Warning unable to access index for repository cannot open the connection Not surprising since does not exist It would be useful if drat populated the common binary arms of the repository with an empty PACKAGES file by default to avoid this warning Packrat has some repository management tools that help do this Would you be willing to accept a PR that created skeletons for these paths 