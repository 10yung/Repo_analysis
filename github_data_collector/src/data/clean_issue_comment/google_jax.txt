fixes TODO write a PR message explaining myself add docs fix a circular import consider adding a customgradient convenience wrapper Addresses Also attempting to replace canonicalizedtype with coercetoarray Edit Removing canonicalizedtype inside xlapy introduces errors that i cant fixgiving that up for now cc mattjj TODO Add tests to make sure error is properly caught python import os osenviron XLAFLAGS xlaforcehostplatformdevicecount import jax from jax import lax import jaxnumpy as np jaxsoftpmap def fn x return x def fn c return fn c printN devices jaxlocaldevicecount printjaxversion laxscanfn npzeros xsnpzeros Yields N devices Traceback most recent call last File testpy line in module laxscanfn npzeros xsnpzeros File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in scan linearFalse lenconsts leninflat File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in scanbind numcarrynumcarry linearlinear File homesiegelocallibpython sitepackagesjaxcorepy line in bind return selfimplargs kwargs File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in scanimpl return forilooplaxconstlength length bodyfun init ysinit File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in foriloop lower upper initval File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in whileloop bodynconstslenbodyconsts bodyjaxprbodyjaxpr File homesiegelocallibpython sitepackagesjaxcorepy line in bind return selfimplargs kwargs File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in applyprimitive compiledfun xlaprimitivecallableprim mapargspec args params File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in xlaprimitivecallable builtc primitivecomputationprim backend tupleargs avals params File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in primitivecomputation rulec AxisEnv xlaargs backendbackend params sideeffect on c File homesiegelocallibpython sitepackagesjaxlaxlaxcontrolflowpy line in whilelooptranslationrule mapbodycConstant bodyjaxprliterals y z File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in jaxprsubcomp backendbackend newparams File homesiegelocallibpython sitepackagesjaxinterpreterspxlapy line in pmaptranslationrule outs xlaunshardc newenv shard for shard in shardedouts File homesiegelocallibpython sitepackagesjaxinterpreterspxlapy line in listcomp outs xlaunshardc newenv shard for shard in shardedouts File homesiegelocallibpython sitepackagesjaxinterpreterspxlapy line in xlaunshard return cCrossReplicaSumpadded xlaaxisgroupsaxisenv axisenvnames File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in axisgroups return axisgroupsaxisenvnreps axisenvsizes meshaxes File homesiegelocallibpython sitepackagesjaxinterpretersxlapy line in axisgroups assert not ragged Works fine with vmap Makes shapecheck work on PixelCNN Allows shapecheck of indexing slicing broadcastto reshape random sampling iota and simple cases of split For npsplit and random sampling I used special handling for polymorphic shapes This could probably be changed with more effort There is an issue making this hard python shapecheck n n def negzeroslikex return npzerosxshape breaks findtoptrace in fullpbind returns None here since all arguments are independent of any inputs Therefore the result of zeros is not wrapped in a trace and the npnegative implementation is called with a polymorphic shape instead of the shape rule causing an error This also breaks shape check of nponesxshape npbroadcastto xshape laxiota etc mattjj Any ideas how to fix this The documentation suggests that foriloop goes from lower to upper Is there any reason why we couldnt go opposite direction as well Akin to for i in reversedrange In the autodiff cookbook To implement hessian we could have used jacrevjacrevf or jacrevjacfwdf or any other composition of the two But forwardoverreverse is typically the most efficient Thats because in the inner Jacobian computation were often differentiating a function wide Jacobian maybe like a loss function I believe this should be jacfwdjacrevf or jacrevjacfwdf PS Thanks for the excellent work Hessians are a breeze numpyndarray instances currently return True if you run an isinstance check against jaxnumpyndarray I guess I see how this happens I think Jax doesnt actually use that type so its maybe the actual one from numpy Its a bit of a hassle when youre checking the array provenances though python def testnumpyndarrayisnotinstanceofjaxnumpyndarray assert not isinstancenumpyzeros jaxnumpyndarray Btw whats the preferred way to convert data from Jax to numpy Ive found jaxdeviceget by poking around but I dont think its documented Thanks for the great project Is it possible to run JAX on other GPU architectures other than NVIDIA ex Intel AMD I am trying to write a very simple code for a linear regression problem However I received NotImplementedError Singular value decomposition JVP not implemented for full matrices error while trying to run grad on the mse loss Can someone look into this issue for me preamble import jaxnumpy as np from jax import grad random key randomPRNGKey generate random data n d x randomuniformkey n d dtypenpfloat minval maxval t npsinnppix randomnormalkey n d build mean squared error y t def makemsevectorx t def msevectorw return nplinalgnormnpdotx w t ord return msevector w npzeros epsilon iter The following line throws me SVD error wgradient gradmakemsevectorx tw run gradient descent for in rangeiter w w epsilon wgradient wgradient gradmakemsevectorx tw Implements nplinalgmatrixrank Honestly not sure what sorcery needs to be going on for someone to want to take the gradient through this operation but here we are anyway Related to 