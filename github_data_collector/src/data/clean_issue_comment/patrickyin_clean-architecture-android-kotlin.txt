Hi Patrickyin With current structure when the app has a new activity or a new fragment it takes more time of developer for creating classes modules and creating references between them Usecases in domain layer dont have many useful It cannot do business logic because data from apis are sent to Observers all code logic is being implemented in Observers or Presenters So Im suggesting that we should restructure the project move Presenter and Observer to domain layer remove Usecase from domain layer Presenter will not call UseCase it will call directly Services in data layer data will return to Observer The new structure will reduce classes and references relate to Usecase and UseCaseModule Thanks Duy Because your modules didnt support custom scopes so memory leak is existing Example class GetArticlesListUseCase Inject constructorprivate val articlesRepository ArticlesRepository subscribeScheduler Scheduler postExecutionScheduler Scheduler UseCaseListArticle UnitsubscribeScheduler postExecutionScheduler override fun buildUseCaseSingleparams Unit SingleListArticle articlesRepositoryarticles map itmap Articleittitle itpubDate itlink I added some code at here to check memory leak by Profiler of Android Studio var test ByteArray null init test ByteArray fun test if test null Java memory in MEMORY tab from Profiler increases KB KB KB whenever the app opens the activity which is using GetArticlesListUseCase Would be nice to have fragment implementation Does it violate dependency rule of clean architecture