This issue was first brought up in I am still seeing the issue in NET Core going against a huge WSDL file generated in Salesforce We have tried some of the solutions in the original issue but so far we have not been able to get around it Any ideas This is causing a work stoppage since we cant log into Salesforce Describe the bug Attempting to generate a SOAP client via svcutil fails if the project references a nuget package with a name ending in dll To Reproduce Install a package like DocuSigneSigndll and then attempt to generate a client for this project You will receive the following error Error The specified parameter value DocuSigneSigndll is not valid Parameter name packageName Expected behavior Generate a svc client Screenshots First of all dotnetsvcutil doesnt seem to be compatible with dotnet sdk projects any news on updating it Going back to request the feature that might be useful is feeding wsdl through standard input and getting type definition from standard output This would give some better options to generate types dynamically like you can do with NewWebServiceProxy command in windows powershell For example below shell commands should print type definition cat myServicewsdl dotnetsvcutil or curl dotnetsvcutil Hi I am writing this issue to recommend You to provide comprehensible information about WCF in NET Core Please let me justify why I recommend it with some facts Intro Searching for wcf in net core on google shows the What replaces WCF in Net Core question as first result which has an accepted answer starting with WCF is not supported in NET Core Based on this a developer could suppose that there is no WCF in NET Core Fortunately this is not entirely true Link to this repository dotnetwcf is rather easy to find and the description says that here are clientoriented WCF libraries which I did not understand first what is clientoriented Alright so it seems that I can consume WCF services in NET Core Let us find out how I could not find any developer guide for NET Core in WCF For the NET framework version there are a lot of material though they do not really clearly state that applies only for NET Framework but for NET Core none on docsmicrosoftcom as I saw Configuration opportunities NET Framework you add a service reference to the project and XMLbased configuration will be generated to your appconfig file inside the systemserviceModel tag This is fine and required if you remove this configuration your code wont work For different enviroments test prod you only have to change the XML configuration eg ASPNET webconfig files as transforms NET Core XMLbased configuration does not really exist since in NET Core the place for settings as far as I know is the appsettingsjson file and had no idea how to configure it in configuration files I have found the generated ConnectedServicejson which turned out is only used for the client generation tool Turned out from a github issue not a documentation or guide or so which is sad for me With lack of official documentation about this area I had to google and I have found the article Using WCF With NET Core by Jon Seeley and there he states there is no builtin file configuration opportunities for WCF in NET Core and he constructed a solution for it But he abandoned it when he saw that the NET Core version is a lot worse in terms of performance as fast So now two questions arises in my head How to configure WCF in NET Core with files sure for hello world applications your library works out of the box but if it is not configurable outside of code it is not really usable for applications in production or for anything serious in general Is the performance really that bad And why I was planning to migrate our WCF client code to NET Core until I found out that this can be a lot slower than in NET Framework Now I am stuck will we need to migrate it to gRPC when we want to switch to NET Core Is a gRPC client even compatible with a WCF service Or does it need a gRPC service Of course I found code in the generated Referencecs file for client classes which have several constructors those allow to inject various EndpointConfiguration endpoint addresses and so on but is this the only way to configure it again I repeat I miss documentation so much If yes that means we will have to build our own file config management system sections elements etc and create clients with those settings but all these require a lot of extra code Closing words In my opinion the best place for such documentation and knowledge base would be here in this repository I say that it should be at the beginning of the README because developers are simply lost without information like these And under documentation I do not only mean the answers for my questions but a complete guide to what a WCF has been and what it will be in the future from the client side Looking for advice I also would like to ask advice about our production application currently we have a NET Framework application which has like WCF service reference along with generated client code those are tens of thousands line of code We only use WCF for consuming We have a NuGet package which encapsulates and simplify all these communication and our main business applications use this NuGet package to communicate with the service The services are third party for us so we cannot change their side We configure this NuGet in our ASPNET applications Webconfig file and tests appconfig file all these in NET Framework We want to update our NuGet to NET Standard so our new NET Corebased ASPNET Core services will also be able to use this NuGet So both our legacy and new systems will be able to work on the same NuGet I think this is or will be a relatively common scenario in the future and it would be great if you could give some advice related this question Thank you very much in advance ws federationhttpbinding The problem is related with creating SOAP client that needs ws federationhttpbinding General We need to use ws federationhttpbinding endpoint But I think there is no sopport for this in Net Core It is a part of Net FrameWork and currently supported in NET Will you add this binding Type or is there any alternative solution I use an Azure v Function C to call an external WCF service and to make it work I added a reference to SystemServiceModel This works fine on my local dev machine but after deploying the function to Azure I get the following error Error Unable to load one or more of the requested types Could not load file or assembly SystemServiceModel Version Cultureneutral PublicKeyTokenb a c e The system cannot find the file specified I tried adding the dll as a local copy but this caused another error as above Reference assemblies should not be loaded for execution They can only be loaded in the Reflectiononly loader context The same error occurs when I remove the assembly reference and install nuget package SystemServiceModelPrimitives instead Here are the platform informations MicrosoftNETSdkFunctions NET Framework When executing dotnetsvcutil help the outputDir documentation states that the default should be the current directory However when omitting outputDir the output directory will be new a directory named ServiceReference I do not have ServiceReference defined anywhere in the svc or wsdl Is this correct behavior If so should the documentation be changed As per mconnews request in this issue is used to track WS FederationHttpBinding support CumpsD were in the process of adding support for WSFederation Were waiting on another team to provide an implementation of a WSTrust client which can get the federation token to then communicate with the server Thats then used by WSHttpBinding to communicate with the server I took a look at WS FederationHttpBinding to see how its different than WSFederationHttpBinding and the difference is that it uses WS HttpBinding which we dont have as a specific binding I checked the protocols used by WS HttpBinding and it looks like we probably have most if not all the implementation required to implement it Can you open an issue specifically for WS FederationHttpBinding Imported WCF Reference ignores Enum values When I add a Web Reference to a Core project enum values are not imported I am importing a service with many enums most are not simple zero indexed sequence therefore do not match the WSDL Framework Service Reference uses correct enum values Core or Standard projects Enum values are not set so do not match the WSDL service In a framework project using advanced to add a Web Service results in the same unset enum values Unfortunately the WSDL is not publically accessable and I do not have permission to publish here so edited snippet xssimpleType nameConstantBobTypeEnum xsrestriction basexsstring xsenumeration valueBob xsannotation xsappinfo EnumerationValue EnumerationValue xsappinfo xsannotation xsenumeration xsenumeration valueBobob xsannotation xsappinfo EnumerationValue EnumerationValue xsappinfo xsannotation xsenumeration xsenumeration valueBobobob xsannotation xsappinfo EnumerationValue EnumerationValue xsappinfo xsannotation xsenumeration xsenumeration valueObobobob xsannotation xsappinfo EnumerationValue EnumerationValue xsappinfo xsannotation xsenumeration xsenumeration valueOb xsannotation xsappinfo EnumerationValue EnumerationValue xsappinfo xsannotation xsenumeration xsrestriction xssimpleType Edited example of the correct framework generated reference SystemCodeDomCompilerGeneratedCodeAttributeSystemRuntimeSerialization SystemRuntimeSerializationDataContractAttributeNameConstantBobTypeEnum Namespace public enum ConstantBobTypeEnum int SystemRuntimeSerializationEnumMemberAttribute Bob SystemRuntimeSerializationEnumMemberAttribute Bobob SystemRuntimeSerializationEnumMemberAttribute Bobobob SystemRuntimeSerializationEnumMemberAttribute Obobobob SystemRuntimeSerializationEnumMemberAttribute Ob And last the Referencecs snippet from a new standard project remarks SystemCodeDomCompilerGeneratedCodeAttributeMicrosoftToolsServiceModelSvcutil SystemXmlSerializationXmlTypeAttributeTypeNameBobTypeEnum Namespace public enum BobTypeEnum remarks Bob remarks Bobob remarks Bobobob remarks Obobobob remarks Ob 