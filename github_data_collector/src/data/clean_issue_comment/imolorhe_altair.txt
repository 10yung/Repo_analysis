Describe the bug The request comes to the server like this variables query operationName Server cannot deserialize operationName as it expects a String there but found an object Any particular reason you want to make it an object in some previous version it didnt supply operationName field at all and it worked perfectly To Reproduce Steps to reproduce the behavior Enter any query Click on Send Request See error Expected behavior Request can be deserialized on the server Screenshots Desktop please complete the following information OS macOS Catalina Browser Platform desktop app Version Additional context Same for playground client Enjoy Describe the bug Line numbers overflow query result To Reproduce Steps to reproduce the behavior Open new window Run query Expected behavior Desktop please complete the following information OS macos Platform Chrome extension desktop app Version Version Nice app thanks But please get a new icon Just looking at this thing in my dock gives me a headache Describe the bug CPU Usage in Safari is Very High on MacOS To Reproduce Load up Altair in Safari Submit a Query Watch the CPU Usage Skyrocket Expected behavior I expect the CPU usage to remain normal Desktop please complete the following information OS macOS but also experienced this on previous versions of macOS including Browser Safari but also experienced this on previous versions of Safari Submitting a request to allow customization of the default value of addQueryDepthLimit through applicationproperties etc By default the value is so a user using the ADD QUERY links will get an incomplete query for complex objects Yes the user can change the setting of this in the settings pane but that would require educating the user in most cases It is not easily discoverable Describe the bug Error message appupdateyml not found Notice that i couldnt update Altair via Snap i removed v to got v To Reproduce Steps to reproduce the behavior Launch Altair Expected behavior No error message Screenshots altairissue Desktop please complete the following information OS Ubuntu Version LTS Is your feature request related to a problem Please describe Wed like to standup our own instance of Altair to serve as an editing playground for our various GraphQL environments prdstgdev They each require their own headers tokens and endpoints We also need the ability to deeplink copy pastable URLs so that we can share full queries amongst developers to ease debugging Weve implemented this with GraphQL Playground which wed like to switch to Altair due to the staleness of the GraphQL Playground project like so Its conceptually similar to Copy CURL but the Copy to Share copies a deeplink URL that includes the following typescript type ShareableObj q string query v string variables e string endpoint We opted not to include the headers since those include secret tokens and we leave it up to the developers to communicate which environment the query should be run against In most cases its the default of production Proposed Solution There are some considerations involved with deeplinking For example would we require a backend persistence layer so that we can shorten the URLs Or is it enough to base encode the full query and other necessary settings as part of the URL would result in very large URLs but that may be ok The URL itself At least for the initial implementation were fine with large URLs We currently use lzstring LZStringcompressToEncodedURIComponentstring to compress the URL as much as possible it still results in very long URLs but at least its stateless and doesnt require a backing service Were open to other approaches though but would like to start off with something simple What informationsettings to include When a user clicks to Copy to Share at the very least we need the query and variables but would also like to have the environment and endpoint In order to protect potential secrets the environment doesnt actually need to be the full set of environment variables but rather the id or name of the environment that can be autoselected when navigating to the deeplink if its not there then leaving it on whatever environment the user has is fine What happens when the user navigates to the deeplink The second time When a user navigates to a shared deeplink a new tab is created with the query and variables from the URL The environment is autoselected if the user has an environment with that same name available if not whatever environment the user has selected is fine The endpoint is also entered if included as part of the deeplink As an aside We actually plan to tie the endpoint to the environment so the endpoint will always be endpoint and the various environments defined will provide the endpoint URL We can clear the URL deeplink after instantiation so that when the user refreshes it doesnt recreate the new tab If the user actually navigates to the full deeplink a second time then a new tab would be created What about the API The way we were able to pull this off in GraphQL Playground is by relying on the fact that they expose their redux action creators selectors and reducers So we literally do something like this typescript import store getQuery getVariables getEndpoint newSession editQuery editVariables from graphqlplaygroundreact Creates a deeplinkable URI with the current window settings export const compressUri string const state storegetState const sessionUri ShareableObj q getQuerystate v getVariablesstate e getEndpointstate return lzcompressToEncodedURIComponentJSONstringifysessionUri Creates a new Tab with the given endpoint query variables export const newTab e q v ShareableObj void storedispatchnewSessione true storedispatcheditQueryq storedispatcheditVariablesv We could take the same approach in Altair if youd rather not change much of the internal API would just require exposing the redux store etc on window so that it can be accessed and actions dispatched However if youre open to having this be a fistclass feature in Altair Im happy to explore ideas around how to build this directly into the app Describe alternatives youve considered One alternative is to modify localStorage before the app loads and injecting the necessary state This would obviously be brittle and prone to bugs especially asif the shape of the localStorage changes Hi Screenshot from This is a review I left on the firefox addon page What I meant by multiple docs was like this Prisma Playground feature Screenshot from PS I think addon itself is very convenient idea by the way Describe the bug When launch as Ubuntu app installed via snap you have error ENOENT no such file or directory open snapaltair resourcesappupdateyml To Reproduce Steps to reproduce the behavior On Ubuntu LTS in console run sudo snap install altair Run application via console or GUI Screenshot from 