 Further discussion from Expected Behavior Remove the extra complexity Current Behavior Issue kinds can be weighted to influence the build failure threshold higher than other issues Do we want to maintain this feature The only usecase I see is to have specific rules printed on the console as a reminder to remove them someday Context Providing context helps us come up with a solution that is most useful in the real world Expected Behavior buildupondefaultconfig should be true by default new flag allrules which activates all rules remove failfast introduce new flag maxissues to quickly manipulate the number of allowed issues without having a config file Current Behavior failfast does three things buildupondefaultconfig maxIssues activates all rules Context Align behavior wiht tools like PMD and ESLint It appears that the validation is based off of the default config in the repo The default config contains formatting so any formatting rules placed in a config will not be reported as incorrect config even if you do not have the detektformatting plugin enabled Similarly to this since the default config contains formatting rules but they dont ship with the detekt gradle plugin it is confusing to not have them enabled or reporting Expected Behavior If I run the cli and I have issues at the end of the output I get the numer of issues onces Observed Behavior Im getting this output twice Build failed with weighted issues threshold defined was iogitlabarturboschdetektcliBuildFailure Build failed with weighted issues threshold defined was Steps to Reproduce Run the cli on a project that have issues Context I found this issue testing and then I saw that it was in master too Your Environment Version of detekt used master On the homepage there should be a separate chapter regarding rules that use type and symbol solving and how to configure them in Gradle The existing section are missing some essential information How to configure and use these rules on Android code underneath this todo list Run the detekt main see Mention that this is still experimental and has some peculiarities From the Slack chat kotlin dependencies detektprojectdetektcli detektPluginsprojectdetektformatting val detektAll by tasksregisteringDetektclass description Runs over whole code base without the starting overhead for each module parallel true buildUponDefaultConfig true includekt excluderesources excludebuild excludekts baselinesetfilerootDirconfigdetektbaselinexml classpathsetFromprojectconfigurationsgetByNamedetekt reports xmlenabled false htmlenabled false txtenabled false Adding clli argument and gradle plugin functionality to enable verbose logging On our project we only want to log to console if an error occurs for cleaner logging Swapped default logic to not output unless errors present or verbose flag enabled Expected Behavior Allow to write plugins which can mapilate detekts Detektion result kotlin interface ResultFilter fun filterresult Detektion Detektion Current Behavior The user can suppress findings via baseline file or suppress annotations Context The bug youre experiencing might have already be reported Please search in the issues before creating one Expected Behavior Should not flag these lines as a single line thats too long Observed Behavior Getting an invalid line is too long error Steps to Reproduce Code looks like this if view is MyScreen val pageTracker PageTracker viewTracker val featureToggle getFeatureTogglepageType fragmentManagerlet and it flags the if view line as being too long and underlines the next few lines Context Just running detekt on our app Your Environment Version of detekt used and also tried the latest Version of Gradle used if applicable Operating System and version OSX 