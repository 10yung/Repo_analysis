Today it is possible in Kiba Pro to pass a simple database url string to SQL components SQL Source SQL single record Upsert destination SQL bulk insert upsert destination like this ruby database ENVfetchDATABASEURL For the same reasons the kiba command line is getting deprecated Ill instead encourage to pass live connections here created via a surrounding block ruby Sequelconnectxxx do db KibarunETLMyJobsetupdb db end This will allow automatic connection closing which is a better pattern and also brings more control over how the connection can be tweaked eg extensions Keeping this note as a roadmap item if you read this please do not work on this this is already in the works this issue is here to communicate with Kiba users The patterns of use recommended implementation guidelines have evolved quite a bit since Kiba v was released years ago Im rewriting the documentation from scratch to ensure we have a better newcomer experience and we can encourage the patterns that Ive seen work in production this is a roadmap notice for Kiba users as much as a reminder for myself In years of production use with Kiba Ive had a lot of time to investigate the various patterns of usage on real cases Up to v Kibas way to run jobs was to use bundle exec kiba myscriptetl which involves reading and evaluating the etl file as seen here In the meantime Ive introduced official support for a programmatic API an API that was initially introduced to allow inprocess testing The programmatic API allows everything the command mode supports plus much more and actually encourage better coding practices For instance API mode allows to pass live variables rather than just ENV configuration from command line or JSON configs from files Doing so permits to wrap resources openclose around running a job API mode makes it easier to run testing on an ETL process via minitestrspec directly inprocess which allows stubbingwebmock etc rather than via a command call API mode enforces use of clean modules with explicit loading rather than polluting the toplevel namespace with global methods API mode allows to run jobs from Sidekiq or background job systems from an HTTP call if the job is fast without necessarily waiting for a command line binary to run this supports more dynamic interactions eg a job is created in reaction to an external event received via HTTP or a websocket For all these reasons I plan to deprecate the kiba command in an upcoming version probably v Ideally Id like to provide a new gem that will bring back that functionality as optin to ensure v can be retrofitted easily but that gem will likely not be supported anymore when we reach v To encourage contributions all while securing the codebase from a legal standpoint both for users for myself Im in the process with a lawyer of designing a contributor agreement for kiba kibacommon and kibapro This will be ready shortly I will update this issue once its done Agreeing to the contributor agreement will be required to allow the merge of a PR This supersedes 