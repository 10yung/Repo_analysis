Looking to output human readable JSON like this Tried this approach but I get only generation of JSON objects or arrays allowed using grape for apis and What I see that I have to give always provide serializer name like CompanySerializernewCompanyallserializablehash wondering if it can auto pick serialzier name depending upon resource name or object type like it used to do with active mode serializer and what about using Serializer in in relation like with hasmany Is there a way to add scope to relationship so something like this Serializer ruby class CompanySerializer include FastJsonapiObjectSerializer hasmany employeestemp scope record recordemployeestemp serializer EmployeeSerializer hasmany employeesfulltime scope record recordemployeesfulltime serializer EmployeeSerializer end Given the following models ruby class Company ApplicationRecord hasmany employees end class Employee ApplicationRecord scope temp wheretype temp scope fulltime wheretype fulltime end The following fails with undefined method personpath ruby attribute personpath do obj urlhelperspersonpath obj end attribute editpersonpath do obj objpersonpatheditperson end For polymorphic hasmany relations instead of getting the ids in a batch the code loops over each object to get its type and id In Relationshipidhashfromrecord it was hardcoded to get the id by calling recordid which overrides the idmethodname options passed into the relationship I tried fixing this by only changing the code in Relationship to dynamically call the idmethodname on the object but unfortunately on hasmany relationships the default value for idmethodname would be passed as if the ids would be pulled in a batch for example groupeeids That default works for regular hasmanys where we get the ids all at once but fails for polymorphic ones where it loops over each object So fixing the problem required passing the polymorphic information to computeidmethodname which now defaults to id rather than idmethodnamefromrelationship in the case where the relationship is polymorphic This also fixes a bug where the recordid is not carried over through inheritance Is there any option to show only the content of meta without showing the meta key Currently if we pass meta data it shows as follows data null meta success true Is there any way to show it like data null success true In my app sometimes I want camel case for JS data and sometimes I want underscore data Is it possible to have one serializer class that can be configured at runtime to have different key transforms Just like attribute this PR allows the dev to specify links as follows ruby linkdownload if obj params params params signedurl do obj params params signedurl end I have a user with many heights stature measurements recorded in a Height model but would like to serialize only last height as if it was a hasmany association I tried to create a fake custom hasone association but it does not give me what I was looking for appserializersuserserializerrb ruby class UserSerializer BaseSerializer attributes email hasmany heights hasone lastheight recordtype height do user userheightslast end end appcontrollersuserscontrollerrb ruby options include heights render json UserSerializernewuser options As is I get the error heights is not specified as a relationship on UserSerializer If I uncomment hasmany heights I get though json data id type user attributes email fakeemailcom relationships heights data id type height id type height lastHeight data id type height included id type height attributes value id type height attributes value But I dont want to include in the compound document all recorded heights Expected result json data id type user attributes email fakeemailcom relationships lastHeight data id type height included id type height attributes value When include is used to include related documents compound document and you also have sparse fieldsets you filter returned attributes with the fields parameter the relationships attribute of the root resource remains empty This is rather confusing because this way you have no way how to link the root resources if multiple to their corresponding included related resources Ive identified the issue to come from here It works as expected if that line is commented out Now I see a related issue according to which there is a way to trick work around this you must specify associations in the fields option if you want fastjsonapi to populate the relationships hash appropriately But Im not sure if this is the JSONAPI v compliant way So if this is not considered a bug maybe some documentation improvements should make this clear