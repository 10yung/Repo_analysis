Adds a badge showing the number of people helping this repo on CodeTriage Open Source Helpers What is CodeTriage CodeTriage is an Open Source app that is designed to make contributing to Open Source projects easier It works by sending subscribers a few open issues in their inbox If subscribers get busy there is an algorithm that backs off issue load so they do not get overwhelmed Read more about the CodeTriage project Why am I getting this PR Your project was picked by the human schneems They selected it from the projects submitted to and hand edited the PR How did your project get added to CodeTriage Roughly almost years ago olivecoder added this project to CodeTriage in order to start contributing Since then people have subscribed to help this repo What does adding a badge accomplish Adding a badge invites people to help contribute to your project It also lets developers know that others are invested in the longterm success and maintainability of the project You can see an example of a CodeTriage badge on these popular OSS READMEs Email clients like GMAIL do not render SVG images Email clients like GMAIL do not render SVG images Have a question or comment While I am a bot this PR was manually reviewed and monitored by a human schneems My job is writing commit messages and handling PR logistics If you have any questions you can reply back to this PR and they will be answered by schneems If you do not want a badge right now no worries close the PR you will not hear from me again Thanks for making your project Open Source Any feedback is greatly appreciated I currently get this on git master and nightly of error E no associated item named Inherited found for type syntaxcodemapSpannedsyntaxastVisibilityKind in the current scope homesvenstarocargogitcheckoutsstainless b b f f srcgeneraters vis astVisibilityInherited associated item not found in syntaxcodemapSpannedsyntaxastVisibilityKind error E no associated item named Inherited found for type syntaxcodemapSpannedsyntaxastVisibilityKind in the current scope homesvenstarocargogitcheckoutsstainless b b f f srcgeneraters vis astVisibilityInherited associated item not found in syntaxcodemapSpannedsyntaxastVisibilityKind error E no associated item named Public found for type syntaxcodemapSpannedsyntaxastVisibilityKind in the current scope homesvenstarocargogitcheckoutsstainless b b f f srcgeneraters let superglob cxitemuseglobsp astVisibilityPublic vec cxidentofsuper associated item not found in syntaxcodemapSpannedsyntaxastVisibilityKind Currently using a string with describe describe stainless either results in an error or a panic see I have the following srcmainrs featureplugin cfgattrtest pluginstainless describe stainless describe add it works When I run cargo test I get error internal compiler error unexpected panic note the compiler unexpectedly panicked this is a bug note we would appreciate a bug report note rustc nightly a c fa running on x pcwindowsmsvc note run with RUSTBACKTRACE for a backtrace thread rustc panicked at Diagnostic level Fatal message Failed to parse the name of the describe block got err Diagnostic level Fatal message expected identifier found add NoStyle code None span MultiSpan primaryspans Span lo BytePos hi BytePos ctxt spanlabels children suggestions NoStyle code None span MultiSpan primaryspans Span lo BytePos hi BytePos ctxt spanlabels children suggestions C Users Per cargo registry src githubcom ecc db ec stainless src parsers stack backtrace stdsyncmpscsyncQueuedequeue stdpanickingLocationcolumn stdpanickingLocationcolumn stdpanickingrustpanicwithhook stdpanickingbeginpanicfmt stdpanickingbeginpanicfmt stainlessparseimplparse at C Users Per cargo registry src githubcom ecc db ec stainless src parsers stainlessparseimplparse at C Users Per cargo registry src githubcom ecc db ec stainless src parsers stainlessdescribedescribe at C Users Per cargo registry src githubcom ecc db ec stainless src describers coreopsfunctionFncallfnmut syntaxextbaseExtCtxt syntaxposspanencodingSpan syntaxpossymbolIdent allocvecVecsyntaxtokenstreamTokenTree allocboxedBoxMacResultmut syntaxextbaseExtCtxt syntaxposspanencodingSpan syntaxpossymbolIdent allocvecVecsyntaxtokenstreamTokenTree at C projects rust src libcore ops functionrs syntaxextbaseimplexpandfnmut syntaxextbaseExtCtxt syntaxposspanencodingSpan syntaxpossymbolIdent allocvecVecsyntaxtokenstreamTokenTree allocboxedBoxMacResult at C projects rust src libsyntax ext basers syntaxextexpandMacroExpanderexpandcrate syntaxextexpandMacroExpanderexpandcrate syntaxextexpandMacroExpanderexpandcrate rustcdriverdrivercountnodes rustcdriverdrivercountnodes rustcdriverdrivercompileinput rustcdriverruncompiler rustcdriverprettyUserIdentifiedItem as corefmtDebugfmt rustmaybecatchpanic rustcdriverprofiledump stdsyncmpscsyncQueuedequeue stdsyswindowsthreadThreadnew BaseThreadInitThunk Note that this only happens for a nested describe If I change the code to describe stainless I get a proper error message error expected open delimiter src mainrs describe stainless Stainless version rustc version nightly b A minimal test case follows I put the code in srctestrs and srcmainrs only contains configuration needed for stainless and a mod test declaration rust describe mymodule beforeeach let a mapx errortoken Note the missing semicolon without it everything works fine After running cargo test Im getting the following output error internal compiler error Error constructed but not emitted error internal compiler error unexpected panic note the compiler unexpectedly panicked this is a bug note we would appreciate a bug report note run with RUSTBACKTRACE for a backtrace thread rustc panicked at explicit panic checkoutsrclibrustcerrorsdiagnosticbuilderrs note Some details are omitted run with RUSTBACKTRACEfull for a verbose backtrace stack backtrace stdsysimpbacktracetracingimpunwindbacktrace at checkoutsrclibstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at checkoutsrclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at checkoutsrclibstdsyscommonbacktracers at checkoutsrclibstdpanickingrs stdpanickingdefaulthook at checkoutsrclibstdpanickingrs stdpanickingrustpanicwithhook at checkoutsrclibstdpanickingrs stdpanickingbeginpanic rustcerrorsdiagnosticbuilderDiagnosticBuildera as coreopsDropdrop coreptrdropinplace at checkoutsrclibcoreptrrs coreptrdropinplace at checkoutsrclibcoreptrrs coreresultResultT Eok at checkoutsrclibcoreresultrs stainlessdescribeDescribeState as stainlessparseParsesyntaxposSpan a mut syntaxextbaseExtCtxtb coreoptionOptionsyntaxpossymbolIdentparse at homegeomastercargoregistrysrcgithubcom ecc db ec stainless srcparsers stainlessdescribedescribe at homegeomastercargoregistrysrcgithubcom ecc db ec stainless srcdescribers coreopsFncall at checkoutsrclibcoreopsrs F as syntaxextbaseIdentMacroExpanderexpand at checkoutsrclibsyntaxextbasers syntaxextexpandMacroExpanderexpandinvoc syntaxextexpandMacroExpanderexpand syntaxextexpandMacroExpanderexpandcrate rustcdriverdriverphase configureandexpandclosure rustcdriverdriverphase configureandexpand rustcdriverdrivercompileinput rustcdriverruncompiler Ill be happy to provide any further information if needed eliminate cannot infer type for K So I learned a bit playing with this crate seeing if I could fix issue Heres what I got img width altscreen shot at am src This PR right now just demonstrates a nicer way to surface the error in one place I can apply this same way of surfacing the error across the rest of the crate where we currently have panics The reason it is still panicing is because Parseparse still requires a return value of self and since parseblock failed to return an syntaxastBlock I dont have a value to use for Testblock reem I was hoping to get your opinion on what your preferred way to apply this change would be This is my first time working with syntax extensions and I dont have much experience writing syntax parsers in general Options I see but there certainly could be some Im overlooking Make Testblock an option type make it none when parseblock fails Although Im not sure how Generategenerate should behave when block is None Still panic anytime a parse fails but add this friendlier way of displaying the error beforehand This is really ugly and hacky but easiest to implement and still gives the user the info they need to locate the issue Make Parseparse return an OptionSelf Not really sure about the implications of this one Again parsing and syntax extensions is really not my area of expertise I think I can implement any of the myself but would definitely appreciate a bit of insight beforehand Benchmarks dont currently support beforeeach and aftereach Thats somewhat surprising to users of the crate My issue with just adding it like for tests is that bench takes an argument the benchmarker that you call iter on So with the current setup you could then refer to this argument in the before and after blocks as theyre essentially just copied into the bench scope That to me is even weirder and could potentially produce even more surprises than just not having before and after at all What Im thinking of doing instead is the following rust describe abenchmark setup some setup code bench my benchmark The code you want to run in the actual benchmark teardown Some cleanup code This would then transform into the following code rust bench fn mybenchmarkb mut Bencher some setup code biter The code you want to run in the actual benchmark Some cleanup code This would then mean that we could get rid of the argument to bench and do all the plumbing for you Im not convinced if this is really the right way to do it though as it would require you to have the setup there always even if you just write one benchmark Ill mull it over some more and maybe try implementing it When using stainless to write tests for a library it seems to be necessary to run the tests via cargo test lib see This is now documented but it would be nice to figure out why this is happening and if it is possible to fix it 