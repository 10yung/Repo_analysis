 Which version of Elastic are you using elasticv for Elasticsearch x Please describe the expected behavior I am overriding the JSON decoder with a customer decoder go type JSONIterDecoder struct func d JSONIterDecoder Decodedata byte v interface error return jsoniterUnmarshaldata v And then adding it to the client go return elasticNewSimpleClient elasticSetURLesUrl elasticSetDecoder JSONIterDecoder I am expecting that the new decoder will be used for all processing with the client Please describe the actual behavior The flamegraphs generated from profiling show that v SearchServiceDo is using jsoniter however v AggregationsTerms and v AggregationsTopHits are still using the encodingjson Are there further steps required to ensure that the decoder is replaced globally Which version of Elastic are you using elasticv for Elasticsearch x Please describe the expected behavior The MultiMatch query with empty fields should match the string to search in all eligible fields in documents Please describe the actual behavior If I not set the fields in query the library add double quote in fields array and this behaviour return wrong hits Any steps to reproduce the behavior Not set fields in NewMultiMatchQuery Eg multiMatchQuery NewMultiMatchQuerystringtomatch Which version of Elastic are you using x elasticv for Elasticsearch x elasticv for Elasticsearch x elasticv for Elasticsearch x elasticv for Elasticsearch x elasticv for Elasticsearch x Please describe the expected behavior I have two questions about gomod Has go mod tidy been run Heres git diff result after running go mod tidy for v diff git agomod bgomod index b e ddddc d agomod bgomod module githubcomolivereelasticv go require githubcomVividCortexgohistogram v indirect githubcomawsawssdkgo v githubcomcodahalehdrhistogram v a bb bd indirect githubcomfortytw leaktest v githubcomgolangmock v indirect githubcomgokitkit v indirect githubcomgooglegocmp v githubcomgoogleuuid v githubcomkrpretty v indirect githubcommailrueasyjson v githubcomolivereenv v githubcomopentracingopentracinggo v githubcompkgerrors v githubcomsmartystreetsgoawsauth v c d fdb githubcomsmartystreetsgunit v indirect githubcomuberjaegerclientgo v incompatible githubcomuberjaegerlib v incompatible goopencensusio v googlegolangorgapi v indirect gouberorgatomic v indirect golangorgxsync v c gopkgincheckv v fd indirect Some modules like githubcomolivereenv githubcomuberjaegerclientgolog are only used in recipe In my opinion these modules shouldnt be included in dependencies list of Elastic client One possible solution is to create an empty gomod in recipe directory Another option I can come up with is to move recipe to another repo Whats your thoughts Thank you very much in advance Please describe the actual behavior Any steps to reproduce the behavior na Rollup search is basically Search with a limited subset The REST API spec for rolluprollupsearchjson can be found here I used the version elasticv for Elasticsearch x Please describe the expected behavior When writing data in batches pieces of data are written each time If the amount of data before writing is pieces of data it is expected to be written to es in times pieces of data are successfully written for the first time pieces of data are successfully written for the second time And so on pieces of data are written for the last time and pieces of data can be seen in ES at last Please describe the actual behavior However when I write for the first time the refresh time is s only pieces of data are displayed in ES pieces of data are displayed in es after the second write pieces of data are displayed in es after the third write and so on only pieces of data are displayed in es at the end If I write only one piece of data at a time pieces of data can be displayed in ES I try not to write the three lost data into es and write them in batches again that is pieces of data pieces of data are written in batches each time When the result is written in batches for the first time whats the reason Any steps to reproduce the behavior I tried to use a relatively simple data test and its no problem When I had this problem I found that each data structure was relatively complex and large and each data size was about kb Please use the following questions as a guideline to help me answer your issuequestion without further inquiry Thank you Which version of Elastic are you using elasticv for Elasticsearch x Please describe the expected behavior When the index changes to be readonly write data to es should return an error Please describe the actual behavior With the PUT RESTFUL api the error can be shown with clusterblockexception index XXXXX blocked by FORBIDDEN index readonly allow delete api But with BulkSerivceDo function no error was returned i use v and v they all about it i have to add timer to slow the bulk update bulkRequest selfElasticClientBulk for req range selfBulkChUpdate bulkRequest bulkRequestAddreq if bulkRequestNumberOfActions ExecuteBulkUpdateNums tc timeNewTimer timeMillisecond tcC bulkResponse err bulkRequestDocontextTODO if err nil fmtPrintlnerr if bulkResponse nil fmtPrintlnexpected bulkResponse to be nil got nil break goroutine running runtimethrow xb eba x usrlocalgosrcruntimepanicgo x fp xc f e sp xc f dd pc x a runtimemapiternext xc usrlocalgosrcruntimemapgo x fp xc f e sp xc f e pc x c reflectmapiternext xc usrlocalgosrcruntimemapgo x b fp xc f ea sp xc f e pc x c b reflectValueMapKeys xa xc e x x x f b xc f usrlocalgosrcreflectvaluego x a fp xc f f sp xc f ea pc x a encodingjsonmapEncoderencode xbb xc e xa xc e x xa usrlocalgosrcencodingjsonencodego xff fp xc f sp xc f f pc x fdbbf encodingjsonmapEncoderencodefm xc e xa xc e x xc usrlocalgosrcencodingjsonencodego x fp xc f c sp xc f pc x f encodingjsonencodeStatereflectValue xc e xa xc e x xc usrlocalgosrcencodingjsonencodego x fp xc f f sp xc f c pc x fb b encodingjsoninterfaceEncoder xc e xa e xc b x xc b usrlocalgosrcencodingjsonencodego xac fp xc f sp xc f f pc x fd c encodingjsonmapEncoderencode xbb xc e xa xc e c x xa usrlocalgosrcencodingjsonencodego x fp xc f sp xc f pc x fde encodingjsonmapEncoderencodefm xc e xa xc e c x xc usrlocalgosrcencodingjsonencodego x fp xc f c sp xc f pc x f encodingjsonencodeStatereflectValue xc e xa xc e c x xc usrlocalgosrcencodingjsonencodego x fp xc f sp xc f c pc x fb b encodingjsonencodeStatemarshal xc e xa xc e c xc f x x usrlocalgosrcencodingjsonencodego x b fp xc f sp xc f pc x fab b encodingjsonMarshal xa xc e c xc e c x x x xb e usrlocalgosrcencodingjsonencodego x fp xc f f sp xc f pc x fa e gopkginolivereelastic ev easyjson ed e EncodeGopkgInOlivereElasticV xc c x xa xc e c x xaed e xc e f x x x homewwwsygopkgmodgopkginolivereelasticv v bulkupdaterequesteasyjsongo x fp xc f sp xc f f pc x eacc gopkginolivereelastic ev bulkUpdateRequestCommandDataMarshalJSON x xa xc e c x xaed e xc e f x x x x homewwwsygopkgmodgopkginolivereelasticv v bulkupdaterequesteasyjsongo x fp xc f c sp xc f pc x eae gopkginolivereelastic ev bulkUpdateRequestCommandDataMarshalJSON xc xb e xc x fee a xc xc autogenerated x fp xc f sp xc f c pc x ce b encodingjsonmarshalerEncoder xc xb e xc x x usrlocalgosrcencodingjsonencodego xc fp xc f sp xc f pc x fba encodingjsonencodeStatereflectValue xc xb e xc x x usrlocalgosrcencodingjsonencodego x fp xc f sp xc f pc x fb b encodingjsonencodeStatemarshal xc xb e xc x x x usrlocalgosrcencodingjsonencodego x b fp xc f d sp xc f pc x fab b encodingjsonMarshal xb e xc xb e xc xc c a x f x usrlocalgosrcencodingjsonencodego x fp xc f sp xc f d pc x fa e gopkginolivereelastic ev BulkUpdateRequestSource xc f xc b x x x x homewwwsygopkgmodgopkginolivereelasticv v bulkupdaterequestgo x a fp xc f sp xc f pc x e b gopkginolivereelastic ev BulkServiceestimateSizeInBytes xc f f xc c xc f x homewwwsygopkgmodgopkginolivereelasticv v bulkgo x fp xc f sp xc f pc x e gopkginolivereelastic ev BulkServiceEstimatedSizeInBytes xc f f x homewwwsygopkgmodgopkginolivereelasticv v bulkgo xa fp xc f sp xc f pc x e gopkginolivereelastic ev BulkServicebodyAsString xc f f x x x x homewwwsygopkgmodgopkginolivereelasticv v bulkgo x fp xc f a sp xc f pc x e e gopkginolivereelastic ev BulkServiceDo xc f f xc e xc x xc f x homewwwsygopkgmodgopkginolivereelasticv v bulkgo x e fp xc f e sp xc f a pc x e e toolsUprofilecomponentsEsDataServicebulkUpdate xc homewwwgoprojecttoolsUprofilecomponentsEsgo xf fp xc f fd sp xc f e pc x e e runtimegoexit usrlocalgosrcruntimeasmamd s x fp xc f fe sp xc f fd pc x db created by toolsUprofilecomponentsEsDataServiceOpenBulkUpdate Which version of Elastic are you using elasticv for Elasticsearch x Please describe the expected behavior Bulk request should insert the record with out any error Please describe the actual behavior Bulk request Do function returns error invalid character looking for beginning of value Any steps to reproduce the behavior Code req elasticNewBulkIndexRequestIndextestTypetest Id DocHello fmtPrintfRequest v n req bulkrequest bulkrequestAddreq fmtPrintlnNumber of requestbulkrequestNumberOfActions fmtPrintfv bulkrequest fmtPrintln fmtPrintlngetTypebulkrequest bulkrequest bulkrequestRetrierelasticRetrier resp err bulkrequestDoesDBNetContext if err nil fmtPrintlnError while Bulk dumping batch data in elastic err fmtPrintlnBulk response resp fmtPrintlnNumber of requestbulkrequestNumberOfActions Output Request indexindextestid typetest Hello Number of request client xc f retriernil prettynil humannil errorTracenil filterPath headersmap index typ requests xc pipeline timeout refresh routing waitForActiveShards sizeInBytes sizeInBytesCursor BulkService Error while Bulk dumping batch data in elastic invalid character looking for beginning of value Bulk response nil Number of request Please let me know what could be the issue in the code Which version of Elastic are you using elasticv for Elasticsearch x elasticv for Elasticsearch x Please describe the expected behavior The maxDocsPerValue and executionHint fields do not belong here The Sampler aggregation was broken into different aggs in v and the diversity part was moved to the Diversified Sampler aggregation Any steps to reproduce the behavior For example this go agg elasticNewSamplerAggregationMaxDocsPerValue childAgg elasticNewSumAggregationFieldsomefield aggSubAggregationsubagg childAgg will result in Error Bad Request Unsupported property maxdocspervalue for aggregation agg typeparsingexception The same goes for executionhint Which version of Elastic are you using elasticv for Elasticsearch x x elasticv for Elasticsearch x elasticv for Elasticsearch x elasticv for Elasticsearch x elasticv for Elasticsearch x Please describe the expected behavior In case of any client side error from ES bulk processor shouldnt retry that request Please describe the actual behavior Its retrying forever for all the errors Any steps to reproduce the behavior Generate a very large doc MB it can cause on AWS hosted ES 