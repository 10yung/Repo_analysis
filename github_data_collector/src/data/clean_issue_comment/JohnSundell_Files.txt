Im using the solution to encapsulate the Foundation APIs for Files and Folders selected by the user in NSOpenPanel In that scenario the result of the user input is received as URL instead of String Before creating Files or Folders objects I always need to remove the protocol of the URI file and in the case of files and folders with spaces in the name I need to remove the Percent Encoding Considering that the Domain for this solution is Files and Folders I understand that these tasks could be implemented inside the Solution instead of outside Because of that I added one fix to the Storage Initialization Clean the protocol of the URI in case of file and one fix to the folder evaluation Remove percentage encoding before calling the ObjC method All of these fixes are extensions in the sense that they didnt changed any interface and if the explained cases are not present they will not create any effect Tests are working on local Test Suite FilesTests passed at Executed tests with failures unexpected in seconds Test Suite FilesPackageTestsxctest passed at Executed tests with failures unexpected in seconds Test Suite All tests passed at Executed tests with failures unexpected in seconds Add some small fixes to make the solution more easy to use with URLrelativeString and URLabsoluteString Add Suport to encoded URIs this helps when passing URL parameters with folders and files where the name contains spaces Committer Gustavo Tavares grstavaresgmailcom Your branch is up to date with originmaster Changes to be committed modified SourcesFilesswift This change enables files and folders to be moved to the trash on macOS Since the Swift Package Manager is now integrated into Xcode all of my open source projects will stop supporting CocoaPods Carthage starting with their next major version which for Files will be Theres no set timeline for when Files will be released it might take months or even years but I just want to give all users who depend on Files using either of those two package managers a headsup so that you can plan accordingly This change enables files and folders to be referred to using a path that starts with While this is redundant when using Files since paths are assumed to start at the current folder it s useful when accepting file paths as input and to better conform to system conventions Hey JohnSundell The Files release looks great lots a solid improvements Those improvements however have broken some of the open PRs that myself and others have written Im wondering whether its worth the effort to update my PRs to work with or whether those updates will be for naught Id love to see them merged but dont want to waste any time If those PRs wont ever be merged will you let me and others know so we can close them out Best Clay Hello yes my English is still so bad I recently tried to write a Cloud Document manager in Files and I found that in a particular case the loadModificationDate method might crash my application My guess is that Cloud is downloading or synchronizing files I tried to find the reason and finally found that try fileManagerattributesOfItematPath path is likely to make a mistake because at this time it may not be able to get any attributes at all Or return attributes FileAttributeKeymodificationDate as Date is wrong because it may not have this attribute So I think Files the way to read file attributes should be nil This makes Files more rigorous Just like this func loadModificationDate Date let attributes try fileManagerattributesOfItematPath path return attributes FileAttributeKeymodificationDate as Date Resolves Hi JohnSundell Im enjoying the Files API and Im glad I can help in any way Even if my contributions are just discussion points that lead to potential pull requests from others I have yet another discussion point to raise I hope you dont mind RenameItem Unless I examine the source its not clear here if newName is name only or name extension public func renameto newName String keepExtension Bool true throws Further I currently have a situation where the above API is inconvenient At the moment Im unpacking a pdf file from a CKAsset instance CloudKit After digging through the asset I find a file named asdkfjkajsdkfhaowkheorhjdsf The file is stored in temp dir so I need to also move it I want the file to have a different name including a new pdf extension Perhaps we might want to have something like the following public func renameto newName String throws And maybe we can examine the name to see if it contains a Do you think this is a valid issue and do you have any ideas on this Hi Ive added these new properties to Item These new properties are optional because on some Linux systems may not be available