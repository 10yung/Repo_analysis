 Version alpha Reproduction link Steps to reproduce Module not found Error Cant resolve nsinaimgcnsinacn w h dediewtemz jpg in rootwebsrcsiterenwuvue ERROR in srcsiterenwuvueleijunvuevue typetemplate id fc f scopedtrue langpug nodemodulesvueloaderdisttemplateLoaderjsref nodemodulespugplainloadernodemodulesvueloaderdistref srcsiterenwuvueleijunvuevue typetemplate id fc f scopedtrue langpug Module not found Error Cant resolve nsinaimgcnsinacn w h dediewtemz jpg in rootwebsrcsiterenwuvue srcsiterenwuvueleijunvuevue typetemplate id fc f scopedtrue langpug nodemodulesvueloaderdisttemplateLoaderjsref nodemodulespugplainloadernodemodulesvueloaderdistref srcsiterenwuvueleijunvuevue typetemplate id fc f scopedtrue langpug srcsiterenwuvueleijunvuevue typetemplate id fc f scopedtrue langpug srcsiterenwuvueleijunvue srcsiterenwuvue lazy namespace object nodemodulescoffeeloadernodemodulesvueloaderdistref srcsiterenwuvueroutevuevue typescript langcoffee srcsiterenwuvueroutevuevue typescript langcoffee srcsiterenwuvueroutevue srcsiterenwucoffeeindexcoffee What is expected not require What is actually happening require maybe this file cause error compilersfccjsjs rootwebnodemodulesvuecompilersfcdistcompilersfccjsjs generated by vueissues DO NOT REMOVE What problem does this feature solve That can do something after emit event What does the proposed API look like js const loading reffalse const onClick async doSomething loadingvalue false emit event await Promiseallemitclick doSomething loadingvalue false generated by vueissues DO NOT REMOVE Remove the repeat key in vif when you set key property directly Template html div div vifxxx key div div Before js import openBlock createVNode createBlock createCommentVNode from vue export function render const ctx this return openBlock createBlockdiv null openBlock ctxxxx createBlockdiv this key is redundant key key createCommentVNodevif true After js import openBlock createVNode createBlock createCommentVNode from vue export function render const ctx this return openBlock createBlockdiv null openBlock ctxxxx createBlockdiv key createCommentVNodevif true Issue first reported in vueloader Absolute asset URLs such as those that start with a forwardslash or are even https URLs are currently interpreted as relative URLs and their path is transformed into an import expression by the SFC compiler This PR adds a utility method isRelativeUrl and uses it to differentiate between URLs that need to be imported and thus transformed and those that do not I can also imagine other names for the helper method such as requiresTransform I only started looking into the source yesterday so if the solution presented in this PR does not match with how you would solve this feel free to give pointers and close this We want to support mixinsextends options in TS Include changes Return type of defineComponent new ComponentPublicInstance new ComponentPublicInstance ComponentOptionsWithoutProps ComponentOptionsWithArrayProps ComponentOptionsWithObjectProps Overloads defineComponent and ComponentOptionsWithoutPropsComponentOptionsWithArrayPropsComponentOptionsWithObjectProps and ComponentOptionsBase LegacyOptions add new type variable Mixin which should be defined by defineComponent Breaking changes about h split htype ComponentOptionsWithoutPropsComponentOptionsWithArrayProps because ComponentOptionsWithArrayPropsComponentOptionsWithObjectProps extends ComponentOptionsWithoutProps will be true If the props can not match the ComponentOptionsWithArrayProps it will be match the ComponentOptionsWithoutProps cases with error type props What problem does this feature solve Im using vuereactivity as a low level data service and there are some heavy computing case in my app I want to manually check if a reactive object is being used in computed values so I can do lazy computing when it is not What does the proposed API look like export function isTrackedtarget return targetMaphastarget export function onTracktarget callback when a target is being tracked call callback function generated by vueissues DO NOT REMOVE This PR uses a few code and adds a simple congestion algorithm for better time schedulering before All tasks are executed in nextick If there are timeconsuming tasks UI will be blocked If the lightweight task is blocked it will cause CPU wastes after Add a very simple algorithm to calculate the blocking threshold If there is a timeconsuming task it will not block continuously In most cases no timeconsuming tasks it is unaffected For lightweight tasks the CPU can be occupied continuously Noneed time slicing At present this implementation is just a prototype If it is worth adopting I will continue to commit the code until tests passed and PR merged Thank you This is a type I was really careful not to break anything I hope I havent missed anything Overall this shouldnt affect much but it improves when using Ref on a generic function Im porting my vue composables library to use the new reactivity and because of the nature of the library my functions are quite generic and ran into some issues with the typescript type checking It works using vuevuecomposition but when I use vuereactivity it has some errors and not really readable errors since the typescript type is quite weird to because of the recursive implementation Full method working with plugin Reproduction code ts const f T extends Promiseany TArgs extends Arrayany fn args TArgs T const t RefT as any const a TArgs as any tvalue fna doesnt work because return value is not RefT tvalue fna as UnwrapRefT doesnt work with prev UnwrapRef but works with this PR I dont believe with a recursive approach we will be able to fix this without a cast because Ive raised some time ago but seems to be a design limitation so I dont expect it to change any time soon EDIT Having issues with Portal and inferring the children on h EDIT Still having issues with the portal seems to not be inferred the issue being with refVNodeChildrenTestNode TestElement be able to be converted to RawChildren therefor not be able to match with the overload log Argument of type UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null is not assignable to parameter of type RawChildren Type UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null is not assignable to type VNodeChildrenany any The types returned by pop are incompatible between these types Type string number boolean void UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null UnwrappedObject null undefined is not assignable to type string number boolean void VNodeChildrenany any VNodeany any null undefined Type UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null is not assignable to type string number boolean void VNodeChildrenany any VNodeany any null undefined Type UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null is not assignable to type VNodeChildrenany any The types returned by pop are incompatible between these types Type string number boolean void UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null UnwrappedObject null undefined is not assignable to type string number boolean void VNodeChildrenany any VNodeany any null undefined Type UnwrappedArraystring number boolean void VNodeChildrenTestNode TestElement VNodeTestNode TestElement null is not assignable to type string number boolean void VNodeChildrenany any VNodeany any null undefined EDIT It can be fixed by casting to the correct type ts hPortal target childrenvalue as VNodeChildrenTestNode TestElement What problem does this feature solve It seems like this still needs to be implemented in v because currently it passes slots as components prop instead of its children What does the proposed API look like vue child vbind slots slots child generated by vueissues DO NOT REMOVE 