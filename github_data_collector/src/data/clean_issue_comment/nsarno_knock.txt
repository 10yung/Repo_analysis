Issue Description Im trying to include KnockAuthenticable to my ApplicationController but Im getting an error of Zeitwerk lib Log FailureError require knockauthenticable ZeitwerkNameError expected file Usersdhyegocalotarvmgemsruby giapigemsknock libknockauthenticablerb to define constant Authenticable but didnt Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkloadercallbacksrb in onfileautoloaded Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkkernelrb in block in require Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkkernelrb in tap Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkkernelrb in require appcontrollersapplicationcontrollerrb in top required Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in require Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in block in requirewithbootsnaplfi Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcacheloadedfeaturesindexrb in register Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in requirewithbootsnaplfi Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in require Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkkernelrb in require Usersdhyegocalotarvmgemsruby giapigemsactiontext libactiontextenginerb in block levels in classEngine Usersdhyegocalotarvmgemsruby giapigemsactiontext libactiontextcontentrb in top required Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in require Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in block in requirewithbootsnaplfi Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcacheloadedfeaturesindexrb in register Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in requirewithbootsnaplfi Usersdhyegocalotarvmgemsruby giapigemsbootsnap libbootsnaploadpathcachecoreextkernelrequirerb in require Usersdhyegocalotarvmgemsruby giapigemszeitwerk libzeitwerkkernelrb in require Usersdhyegocalotarvmgemsruby giapigemsactiontext libactiontextenginerb in block levels in classEngine Usersdhyegocalotarvmgemsruby giapigemsrack libracksendfilerb in call Usersdhyegocalotarvmgemsruby giapigemsrackcors librackcorsrb in call Usersdhyegocalotarvmgemsruby giapigemsrailties librailsenginerb in call Usersdhyegocalotarvmgemsruby giapigemsracktest librackmocksessionrb in request Usersdhyegocalotarvmgemsruby giapigemsracktest libracktestrb in processrequest Usersdhyegocalotarvmgemsruby giapigemsracktest libracktestrb in request specrequestsengineerspecrb in block levels in top required specsupportdatabasecleanerrb in block levels in top required Usersdhyegocalotarvmgemsruby giapigemsdatabasecleaner libdatabasecleanergenericbaserb in cleaning Usersdhyegocalotarvmgemsruby giapigemsdatabasecleaner libdatabasecleanerbaserb in cleaning Usersdhyegocalotarvmgemsruby giapigemsdatabasecleaner libdatabasecleanerconfigurationrb in block levels in cleaning Usersdhyegocalotarvmgemsruby giapigemsdatabasecleaner libdatabasecleanerconfigurationrb in cleaning specsupportdatabasecleanerrb in block levels in top required resolves allows gems user to change token lifetime Draft Pull Request for v Feel free to comment with links to issues or changes you believe should be added to this version Changes Update the dependencies Remove the generators Fix deprecation warnings and autoloading As mentioned here it could be useful to have different token lifetimes for different use cases in the same application Im thinking that this config option could optionally be a hash of various time values keyed to whatever makes sense for the business logic of the given application Ive only poked around the source code a little but it seems like the change is relatively straightforward If I have time Ill make a pull request Opening this partially as a gauge of interest in the feature Hi Ive been trying to configure a Rails API app with Knock using Auth following the instructions and I got to a point that I was just getting a Filter chain halted as authenticateuser rendered or redirected Unfortunately theres no logging associated to any of the gems involved in this process so I had to dig in and try to investigate what was exactly happening After some investigation Ive found the actual error was ruby selfclasssenddefinemethod gettername do unless instancevariabledefinedmemoizationvarname current begin KnockAuthTokennewtoken tokenentityforentityclass rescue bindingpry nil end prySecuredController JWTInvalidAudError Invalid audience More digging into why I was getting this error and Ive found that the configuration for auth suggests to set the following in configinitializersknockrb ruby If using Auth uncomment the line below configtokenaudience Railsapplicationcredentialsauth clientid where the auth clientid is clientid associated with the client secret The sample SPA Ive downloaded from the Auth tutorials which has a private link that performs an authenticated call to the API has a different configuration for the audience js auth new auth WebAuth domain AUTHCONFIGdomain clientID AUTHCONFIGclientId redirectUri AUTHCONFIGcallbackUrl audience AUTHCONFIGapiUrl responseType token idtoken scope thisrequestedScopes So when I was making that private authenticated call from the SPA to the Rails API I was getting the following payload in the token ruby iss subauth USERID aud iat exp azpAUTHCLIENTID scopeopenid profile readmessages writemessages From HOMErbenvversions librubygems gemsjwt libjwtrb line JWTdecode but the server settings had the following pryJWT mergedoptions verifyexpirationtrue verifynotbeforetrue verifyissfalse verifyiatfalse verifyjtifalse verifyaudtrue verifysubfalse leeway audAUTHCLIENTID algorithmRS So the aud configured in the server didnt match any of audience contained in payload aud causing the verification to fail and consequently the authentication as well Any thoughts on this Am I missing something here After having the audiences matching I now have the following error happening ruby selfclasssenddefinemethod gettername do unless instancevariabledefinedmemoizationvarname current begin KnockAuthTokennewtoken tokenentityforentityclass rescue bindingpry nil end prySecuredController ActiveRecordRecordNotFound Couldnt find User with idauth USERID Is this expected Is the user expected to already exist in my database and using as id the auth one I was expecting this process to be the one to create the user itself fixes Im having the same problem described in issue This fix would make expected behaviour as the doc suggests This is what doc suggests If youre using a namespaced model Knock wont be able to infer it automatically from the method name Instead you can use authenticatefor directly like this ruby class ApplicationController ActionControllerBase include KnockAuthenticable private def authenticatev user authenticatefor V User end end class SecuredController ApplicationController beforeaction authenticatev user end This gem relies on methodmissing to do the actuall authentication work However authenticatev user defined in ApplicationController will override it and return a nil when lacking a valid token what you really need is a headunauthorized response I could be wrong since Im not familiar with the gem IMO this is a big security issue This also fixes the issue about Cant verify CSRF token authenticity 