Added RUNNINGDIR env variable which exposes the dirname of the makeself executable for startup scripts currently any password supplied using sslpasswd when creating a makeself archive is exposed in the header info block with the build commands problem can be sidestepped by using sslpasssrc and a temporary file instead should probably either rework the build info to dropredact that argument or stop supporting sslpasswd makeselfs header checks if it can use openssls password source flags by checking against ENCRYPT it should check against COMPRESS to see if openssl was used to encrypt the archive here other uses of the ENCRYPT variable are also suspect This came from need to provide additional decryption parameters to GPG which is currently not possible Instead of adding gpgdecryptextra option this commit lets users provide custom commands decompression Example usage makeself compcmd gpg c decompcmd gpg d pinentrymodeloopback tmpsfxsh installer run This use of type is fine and should be converted to a shell function This use is potentially problematic as it relies on type immediately without trying the more standard which Apparently type is in the most recent POSIX shell spec but historically it has not been a part of the POSIX shell Consider the following questions What is the target platform for makeself How should makeself be tested for proper function on the target platforms Which if any assets fixtures andor harnesses are required to test makeself Pursuant to earlier conversations between megastep bracketttc and myself I get the distinct impression that there is a need to specify the functional requirements on makeself The READMEmd proudly and rightfully reports the following astounding accomplishments As of version Makeself has been rewritten and tested on the following platforms Linux all distributions Sun Solaris and above HPUX tested on and i on HPPA RISC SCO OpenUnix and OpenServer IBM AIX L macOS Darwin SGI IRIX FreeBSD UnicOS Cray Cygwin Windows I want more ie a CI test suite that proves the aforementioned assertions at will for any commit within the makeself repository To assemble such a test suite we require at least some of the following an enumeration of supported Operating Systems an enumeration of supported shells possibly conditional on the supported Operating System a mechanism whereby a given supported target can be mocked on a modern platform Ill go first I think that we should target a circa Bourne Shell I think we should use containers to fake an environment for testing What say others When passing to the inner script the rest of the arguments are interpreted as a command to be executed cat pkgtestsh echo Arguments for arg in do echo arg done echo Done makeself pkg runnersh Args tester testsh devnull runnersh onetwo Verifying archive integrity All good Uncompressing Args tester Arguments one Done runnersh eval two not found This allows execution of commands runnersh dummywc l etcpasswd Verifying archive integrity All good Uncompressing Args tester Arguments one Done etcpasswd Relates to I created the self installation package under ubuntu and run it under busybox on target it fails in the md check it looks the head command used a option s that is not supported busybox rootam x amsclientarma sh Verifying archive integrityhead invalid option s BusyBox v CDT multicall binary Usage head OPTIONS FILE sh sh No such file or directory Error in MD checksums d d cd f b e ecf e is different from cd c a d e ae fccfdf Ever since this PR Ive been unable to build my selfextractable archive Im running into this error About to compress KB of data Adding files to archive named outputartifactup tar Cannot update compressed archives Try tar help or tar usage for more information ERROR failed to create temporary archive tmpmkself tar Here is how Im building it XZOPT threads makeselfmakeselfsh needroot complevel tarextra usecompressprogramxz untarextra J outputrelease outputartifactup SelfExtractable Package Title installsh my personal install script Has anyone else seen this behaviour before I was unable to find a workaround Seems no matter what I do my start scripts dont execute when running the generated archive Ive made certain the original script is executable Ive tried setting the startup script to be startupsh and sh startupsh and neither approach works Ive also tried sudo startupsh since Im running as root I either get Permission denied or No such file or directory or Command not found I have even extracted the contents of the archive and then manually ran the startup script and it runs successfully if extracted first Here is sample of directory being used to create archive appinstall abcwar defwar startupsh Then I run makeselfsh appinstall appinstallrun Generic message startupsh Not sure what I am doing wrong Any assistance is appreciated