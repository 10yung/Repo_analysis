The CPU cannot do anything else during iowait So if you include it it will better represent how busy the CPU is why my computer is so sluggish when I copy that large file despite the CPU usage is under After htop the memory information displayed in nonglobal zones shows the physical memory capacity instead of the zones memory cap In zone memory stats should first come from the memorycap kstat and only display physical memory if the zone is uncapped Hotkey s on FreeBSD and derivatives should use truss instead of strace for tracing truss is basesystem utility on BSDs Fixes This is but rebased to be mergable with the current head Hello Im using htop version on DragonFly BSD and I find that htop shows wrong CPU and TIME data Specifically htop is showing CPU and TIME for all processes which I think is wrong Please see the following screenshot for an example Screenshot Please have a look and Im happy to help solve this issue Thank you very much Before this patch the START column is a zerowidth string This also causes subsequent columns to be misaligned with their titles Add two new display options for filtering mode Display all parent processes up to root process Display all children processes for filtered process I imagine a regular use case at least its my main use case where user has multiple commands being executed in different screentmux windows which user would like to monitor without the distractions from kernel tasks and other processes Example how it looks like with the two options enabled CPU MEM TIME Command sbininit splash libsystemdsystemd user tmux bash bash tail f tmpsh bash vi edittxt bash installdirbinhtop usrlibgnometerminalgnometerminalserver bash tmux F Help F Setup F SearchF FilterF SortedF CollapF Nice F Nice F Kill F Quit It has bothered me for quite some time that running htop d does not delay seconds but something much less I finally looked at the code today and see that the delay is clamped to delay ie a minimum of seconds and maximum of seconds Its not clear to me in looking at the code history if theres some design reason for this so I propose this change to the manual page Id be happy to change the code to remove this restriction and revert this proposed change to the manual page but I think that requires a bit more discussion I suggest the following small fix with the following reasoning the conditionals with amtRead in function LinuxProcessListreadCmdlineFile are meant to protect the execution of the for loop and what follows it which is not supposed to be run with amtRead if I understand correctly the command for zombie processes is then set in function LinuxProcessListrecurseProcTree at line after the offending call to LinuxProcessListreadCmdlineFile at line To me this is a quick fix and the setting of command name of processes seems a little bit clumsy ie readCmdlineFile is not just reading but actually setting the command name of a process and classifying it as a kernel thread however I lack the insight as well as experience to write it better Maybe setting the command name of a zombie process should also be moved to readCmdlineFile and the function renamed Please let me know what you think about it This closes issue When you turn on show custom thread names F Display options htop indeed shows the custom thread name but also hides the process namepath This makes the output rather confusing when not in tree mode since its hard to tell what the process is for any programs that use thread names that dont mention the process which is pretty much all of them as far as I can tell It also prevents you from effectively filtering on the process name iotop uses a display format like process thread name eg chromium ThreadPoolForeg would that or some other solution be possible in htop