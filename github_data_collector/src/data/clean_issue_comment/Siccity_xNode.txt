Fixes perhaps This pull request contains an example fix for the issue The node caches update ports method is extended to take dynamic ports into account and this is also invoked whenever a list of dynamic ports is redrawn Theres probably a more efficient way to do it but it gets the job done and fixes any and all issues outlined before Note that Ive not tested it much if only we had a test suite of some sort haha and especially not with lists of dynamic ports without an arraylist backing value I still dont see the point of those and they dont seem to work half the time Please have a look and maybe check it out Im not sure if its exactly what it should be No fancy C features used so this should be as backwardscompatible as necessary Edit Unless dynamicPortList true is supposed to create an imaginary list and using it with an array backing type is supposed to create a list of arrays That would be rather counterintuitive would invalidate this pull request and would prompt me to suggest that the wiki page be edited to make that clearer for new users And sorry about the edits markdown and I dont like each other very much Asis a dynamic port with a backing field of type T or ListT is unable to connect under any nonNone type constraint to a port of type T I find this to be illogical and since type constraints are of the utmost importance at least in my opinions this is something that ought to be fixed For example it is impossible to connect the highlighted output node to the highlighted input node as theyre considered to belong to different types The changes introduced here rectify this by making sure that when two nodes are trying to connect a NodePorts type constraint will be satisfied if the ports value type is an array or list and the constraint is satisfied by the arrays element type This allows us to connect a dynamic float to a static float port without issue no matter which side the array is on In addition inheritance is properly supported within all existing constraint types Base and Derived types used as shown in with appropriate inheritance type constraints NB This implementation looks at element types directly Given issue perhaps a unification of this and a fix for that would be more apt allowing a third course of action setting dynamic port types not to the array type but to the arrays element type I dont know whetherhow that might work but it might be worth considering NB This commit uses modern C features such as local functions Im not too clear on the backwardscompatibility policy of the repo and will edit if necessary When using long nested namespaces and nested classes you can find yourself in ridiculous situations where your tooltips go out of screen With these changes you can use an attribute to remedy this As usual before is to the left after is to the right Additionally hiding values is not necessary you may only rename if you so desire The attribute also supports hiding the value only Usage example for the first image csharp OutputdynamicPortList true public RootAxisLink axes And the dummy linking class itself attribute is applied bool parameter is whether the result should be hidden leave string empty to NOT override tooltip Serializable OverrideTooltipRootAxis link true public class RootAxisLink NB This commit uses modern C features such as null coalescing Im not too clear on the backwardscompatibility policy of the repo and will edit if necessary Im not entirely sure how best to phrase this but Ill do what I can Setting up a dynamic port list of some type plus type constraints then changing the constraintarray type later leads to a disconnect in internal port serialisation New list elements will be given the new typeconstraint I believe but existing dynamic ports built from list items will not be updated to reflect the new changes This is present in the current master version as well as in release I think I believe this to be a crippling issue and suggest addressing it ASAP questions related to that and how best to go about it are in the conclusion of this report Example reproduction setup Ingredients two dummy classes inputs on target node csharp InputtypeConstraint TypeConstraintStrict public float floatInput InputtypeConstraint TypeConstraintStrict dynamicPortList true connectionType ConnectionTypeOverride public Derived derivedInputs outputs on source node csharp OutputtypeConstraint TypeConstraintNone dynamicPortList true connectionType ConnectionTypeOverride public Base baseOutputs OutputtypeConstraint TypeConstraintNone connectionType ConnectionTypeOverride public Base baseOutput We use two nodes source which houses outputs and target where the aforelisted inputs are Type constraints Observing the port data as listed in the nodes Inspector one notices that dynamic ports dont actually inherit type constraints or connection type settings or if they do changing those in the attribute will cause them to not be updated to the new values The nondynamic port is always serialised correctly Note however that the array port port named after the field itself is serialised properly after any changes and only the dynamic fields are not Types Whats even worse when changing the field type of a dynamic port list eg the array of baseOutputs from Base to string existing array elements or rather their dynamic port definitions will not update their underlying type references even though the underlying properties themselves will be of the new type With the aforementioned modification csharp OutputtypeConstraint TypeConstraintNone dynamicPortList true connectionType ConnectionTypeOverride public string baseOutputs we can see the Inspector data mismatch though again we confirm that a nondynamic port will always be serialised properly The existing first entry maintains its old port type even though the field type has changed new entries obey the new restrictions Again note that the array port itself is also serialised properly Result Visually both aspects of this issue can be seen here Even though we explicitly forbid multiple connections to our inputs and give them strict type constraints this can still happen and even though baseOutputs is a string array now its first element still considered to be of type Base has its handle drawn in a different colour and is considered to belong to its former type How do we fix it Ive only been poking at xNode for the last days so I cant consider myself terribly in the know about it Still I see two three lines of thought for fixing this particular issue Make sure any update to the backing fieldattribute reserialises dynamic ports properly Given that the array port is updated accordingly enforcing the same for dynamic ports shouldnt be too difficult Slave all dynamic entries to the array port In other words when checking constraintstypes for dynamic ports refers to their array port This sounds like it could be troublesome in more ways than one but then again I havent yet looked into how dynamic ports are actually accessed and how they store their values Given eliminate two birds with one stone by setting the dynamic port types to the backing arrays element type I dont know whether this would break something else though Id be happy to look into fixing this after I investigate the causes behind which I hope should be trivial to fix after I look into how the dragging stuff actually works but Id appreciate any suggestions as to how would be best to proceed about this multi Node Window treeviewMenu DynamicPortList Do not force index latent rules supportRenameList When I instantiate a graph using Copy the new graph contains all of the nodes but their names are changed ie Original NameClone instead of Original Name How can I avoid this Originally posted by eddieray in ArgumentException Getting control s position in a group with only controls when doing dragPerform Aborting UnityEngineGUILayoutGroupGetNext at CbuildslaveunitybuildRuntimeIMGUIManagedLayoutGroupcs UnityEngineGUILayoutUtilityBeginLayoutArea UnityEngineGUIStyle style SystemType layoutType at CbuildslaveunitybuildRuntimeIMGUIManagedGUILayoutUtilitycs UnityEngineGUILayoutBeginArea Rect screenRect UnityEngineGUIContent content UnityEngineGUIStyle style at CbuildslaveunitybuildRuntimeIMGUIManagedGUILayoutcs Despite the error the new node shows up in the graph and is working Is there something special I need to do when creating a new node in the NodeGraphEditor code for a graph Hi xNode is awesome thank you I was looking at the repository and Ive found that its API is susceptible to change So if a project uses two package that use a specific version of xNode it can cause conflicts It seems probable that any conflict resolution that keeps only one version of xNode would make some of the packages not work Am I right Is there any recommendation to make a library or a package that uses xNode plays well with other libraries or packages that use Xnode So far the only thing I can think of is to edit the xNode scripts in my own package so that the use another namespace it doesnt seem ideal because it makes it harder to update them Is that currently the only way of handling this problem Thank you for your time editing many Graphs i really need to know where i am so i added this simple toolbar with the Graph Title adn a zoom slider You cant implement zoompan inside single nodes cause graph would intercept wheeldrag events and it would zoompan as well