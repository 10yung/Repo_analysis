Issue if available Description of changes Adding my modular powershell in AWS Lambda post By submitting this pull request I confirm that my contribution is made under the terms of the Apache license Issue if available Description of changes NET Core added a new JSON serialization called SystemTextJson This PR creates new Lambda serialization called AmazonLambdaSerializationSystemTextJson that will be based on SystemTextJson Unlike Newtonsofts JSON parser SystemTextJson is built into the framework and is optimized for speed This will released as part of the upcoming Lambda NET Core and will only target NET Core There will not be a NET Standard which would make it available to NET Core Lambda functions because the event packages like AmazonLambdaS would have to take a dependency on the SystemTextJson Nuget package In my anecdotal testing I have seen some good cold start performance improvements using this library For those that are currently trying NET Core on Lambda using the custom runtime feature here are preview versions of the impacted NuGet packages to try out By submitting this pull request I confirm that my contribution is made under the terms of the Apache license Im just getting started with Powershell on Lambda Ive been following the getting started guide here Ive setup my environment and installed all the necessary modules Im trying to publish an extremely basic Powershell script just to learn a bit more about how this works before I start writing real functions My steps Create a new Lambda using the basic template NewAWSPowershellLambda ScriptName JeffTest Template Basic Add a couple simple lines to the script to see how things behave gets bucket test gets bucket writehost test writehost End of test Lambda Publish lambda PublishAWSPowershellLambda ScriptPath JeffTestps Name JeffTest region uswest The publish then fails with the error Error creating Lambda function Unzipped size must be smaller than bytes If I run NewAWSPowershellLambdaPackage and examine the output I have a MB zip file that unzips into MB of files so clearly the commandlet is generating a deployment package that is too large I have not added any additional modules to my test only the default AWSPowerShellNetCore module is being required I notice that this module alone on my workstation is MB uncompressed so it seems like it is too large for this to ever work Am I doing something wrong here Is there a way to reduce the size of the lambda package Im currently using the latest version of AWSPowerShellNetCore Hello Im trying to build out a powershell lambda function but Im getting errors Because I use powershel on my laptop Im trying to use a Docker container for development Heres my setup so far docker run v pwdpathlambdac lambda v HOMEawsc users containeradministrator aws it mcrmicrosoftcompowershell windowsservercore this gets me into a running windows container Then I run InstallModule AWSLambdaPSCore InstallModule AWSToolsInstaller Importmodule AWSToolsInstaller InstallAWSToolsModule Name AWSToolsIdentityManagement GetAWSPowerShellLambdaTemplate NewAWSPowerShellLambda Template Basic dotnetinstallps to get the dotnet exe on the cli Which should get me the AWS powershell tools AWS Powershell Lambda functions and dotnet CLI Next I run NewAWSPowerShellLambda Template Basic And I get a new powershell directory with a basic script Lastly I run PublishAWSPowerShellLambda Name PsHelloWorld ScriptPath Basic Basicps Region useast ProfileName sandbox But I see this error Configuring PowerShell to version Generating C project C Users ContainerAdministrator AppData Local Temp Basic PsHelloWorldcsproj used to create Lambda function bundle Generating C Users ContainerAdministrator AppData Local Temp Basic Bootstrapcs to load PowerShell script and required modules in Lambda environment Generating awslambdatoolsdefaultsjson config file with default values used when publishing project Copying PowerShell script to staging directory Deploying to AWS Lambda Restoring NET Lambda deployment tool Initiate deployment A fatal error occurred The required library hostfxrdll could not be found If this is a selfcontained application that library should exist in C Users ContainerAdministrator dotnet tools store amazonlambdatools amazonlambdatools tools netcoreapp any If this is a frameworkdependent application install the runtime in the global location C Program Files dotnet or use the DOTNETROOT environment variable to specify the runtime location or register the runtime location in HKLM SOFTWARE dotnet Setup InstalledVersions x InstallLocation What am I doing wrong How can I fix this Ive tried to install AWSLambdaPSCore on two different docker containers from the microsoft managed powershell repo nanoserver latest on On latest ubuntu based I get PackageManagement InstallPackage The module AWSLambdaPSCore cannot be installed or updated because the authenticode signature of the file AWSLambdaPSCorepsd is not valid At C program files powershell Modules PowerShellGet PSModulepsm char null PackageManagement InstallPackage PSBoundParameters CategoryInfo InvalidOperation MicrosoftPowerShel u letsInstallPackageInstallPackage InstallPackage Exception FullyQualifiedErrorId InvalidAuthenticodeSignatureValidateAndGetAuthenticodeSignatureMicrosoftPowerShellPackageManagementCmdletsInstallPackage On server nano I get PS C installmodule AWSLambdaPSCore SkipPublisherCheck Verbose VERBOSE Using the provider PowerShellGet for searching packages VERBOSE The Repository parameter was not specified PowerShellGet will use all of the registered repositories VERBOSE Getting the provider object for the PackageManagement Provider NuGet VERBOSE The specified Location is and PackageManagementProvider is NuGet VERBOSE Searching repository for VERBOSE Total package yield for the specified package AWSLambdaPSCore VERBOSE Skipping installed module AWSLambdaPSCore But when I try to run GetAWSPowerShellLambdaTemplate the command isnt found Any suggestions on what I can do Im trying server core now When writing a custom Gateway API Authorizer I consume the event csharp public static TaskAPIGatewayCustomAuthorizerResponse FunctionHandlerAPIGatewayCustomAuthorizerRequest input ILambdaContext context When building the response the response class has csharp var result new APIGatewayCustomAuthorizerResponse Context new APIGatewayCustomAuthorizerContextOutput Banana Yellow If you look at the implementation of APIGatewayCustomAuthorizerContextOutput You can see it implement Dictionary and has no property called Claims When this is eventually passed down to an ASPNET Core Api and you need to extract the claims back out you need to go into the Request Items csharp var proxyRequest RequestHttpContextItems LambdaRequestObject as APIGatewayProxyRequest This contains csharp proxyRequestRequestContextAuthorizer The implementation of Authorizer is This does contain a property called Claims This is super confusinig and I just spent the last few hours trying to figure out why my claims were empty Cant Claims pull the claims from this being the dictionary itself rather than building an entirely new list Bootstrapping an APIGateway request handling lambda and its interoperability with the ASPNET MVC pipeline is a breeze due to the APIGatewayProxyFunction I found it a good pattern to follow with other integrations as well eg SQS APICustomAuthorizer etc since it gives the ability to use ASPNET utilities configuration DI logging seamlessly enables local exploratory testing eg hit an API endpoint and pass integration requests I got this working without much trouble again thanks to the LambdaServer and other extension points in AmazonLambdaAspNetCoreServer Do you think it would be useful to be added in this repo I made a start at I can create a PR if you think its a good idea Is there any plan to support Lambda destinations NET Core LTS has been released Any plans to support it any time soon Thanks Hi Norm I was successfully using your example with NET and the default api URL Then I changed to using a Custom Name for the Websocket API so I could use wssmydomaincom However now I get the error Error posting message to Dj fe IAMCKMA No method found matching route prodconnectionsDj fe IAMCKMA for http method POST The connection is correct in DynamoDB and I cannot see how to debug this The stack trace is at AmazonRuntimeInternalHttpErrorResponseExceptionHandlerHandleExceptionIExecutionContext executionContext HttpErrorResponseException exception at AmazonRuntimeInternalErrorHandlerProcessExceptionIExecutionContext executionContext Exception exception at AmazonRuntimeInternalErrorHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalCallbackHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalEndpointDiscoveryHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalEndpointDiscoveryHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalCredentialsRetrieverInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalRetryHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalRetryHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalCallbackHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalCallbackHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalErrorCallbackHandlerInvokeAsync T IExecutionContext executionContext at AmazonRuntimeInternalMetricsHandlerInvokeAsync T IExecutionContext executionContext at BVWSServerSendMessageFunctionFunctionHandlerAPIGatewayProxyRequest request ILambdaContext context in C Dev SourceControl Development BrookValleyThriftStores BVTagging BVWSServerSendMessage Functioncsline line is await apiClientPostToConnectionAsyncpostConnectionRequest I tried removing the lambda function and readding in the Console because of the note In the AWS CLI and AWS SDKs you can create routes before or after you create integrations Currently the console does not support reuse of integrations so you must create the route first and then create the integration for that route But no change Any suggestions 