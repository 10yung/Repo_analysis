When using OCMVerifyAll with OCMock Im seeing a compiletime error The object in question is an OCMProtocolMock though an OCMClassMock did the same thing Request to provide support for the swift package At WWDC Apple announced Xcode integration with Swift Package Manager It would be great to be able to use it with OCMock Hi Im seeing occasional unit test failures when running tests via xcodebuild These tests all fail with the same error see below I cannot reproduce when running unit tests via the Xcode UI and rerunning the test suite typically yields no errors Xcode Version xcodebuild command OCMock Version xcodebuild workspace workspace scheme unit test scheme sdk appletvsimulator destination platformtvOS SimulatornameApple TVOS clean test exit Additional Context Most of the test classes which exhibit these failures have mocking calls related to NSDictionary such as OCMPartialMock NSMutableDictionary dictionary or OCMClassMock NSDictionary class Error xctest NSDictionaryM ocmockreplacedocmockreplacednew unrecognized selector sent to class x fb e f xctest Terminating app due to uncaught exception NSInvalidArgumentException reason NSDictionaryM ocmockreplacedocmockreplacednew unrecognized selector sent to class x fb e f First throw call stack CoreFoundation x f a a exceptionPreprocess libobjcAdylib x ef c objcexceptionthrow CoreFoundation x f b NSObjectNSObject doesNotRecognizeSelector CoreFoundation x f forwarding CoreFoundation x f ae CFforwardingprep CoreFoundation x f a c invoking CoreFoundation x f a f NSInvocation invoke OCMock x a OCClassMockObject forwardInvocationForClassObject CoreFoundation x f e forwarding CoreFoundation x f ae CFforwardingprep CoreFoundation x f a c invoking CoreFoundation x f a f NSInvocation invoke OCMock x a OCClassMockObject forwardInvocationForClassObject CoreFoundation x f e forwarding CoreFoundation x f ae CFforwardingprep CoreFoundation x f b cd NSPlaceholderDictionary initWithCapacity Foundation x e ec NSKeyedArchiver initWithOutput Foundation x e b NSKeyedArchiverNSKeyedArchiverSecureCodingInitializers initRequiringSecureCoding Foundation x e b ce NSKeyedArchiverNSKeyedArchiverSecureCodingInitializers archivedDataWithRootObjectrequiringSecureCodingerror DTXConnectionServices x ced a withSerializedObject DTXConnectionServices x ced f DTXMessage initWithInvocation DTXConnectionServices x cec ee DTXProxyChannel sendInvocationMessage CoreFoundation x f e forwarding CoreFoundation x f ae CFforwardingprep XCTest x ee dcb XCTRunnerIDESession logDebugMessage XCTest x edb d XCTestDriver logDebugMessage blockinvoke libdispatchdylib x f cb dispatchcallblockandrelease libdispatchdylib x f dispatchclientcallout libdispatchdylib x f dispatchqueueserialdrain libdispatchdylib x f f dispatchqueueinvoke libdispatchdylib x f c dispatchrootqueuedrain libdispatchdylib x f a dispatchworkerthread libsystempthreaddylib x ad dd pthreadwqthread libsystempthreaddylib x ad startwqthread Hello I am using OCMock and trying to create a mock object of type NSData and run the following line id dataMock OCMClassMock NSData class I have the All Exceptions breakpoint set up and whenever I tried to run the test it throws an exception with this stack trace The selector that causes this is issue for me is NSDatas dataWithCPPDatacopy I have found a similar issue that does address the same type of issue that I am seeing here however with a different data type and is addressed in the version of OCMock I am running The main difference between the issue I am seeing and the issue linked is the data type and the selector in the stack trace that throws the exception I am currently using OCMock version and running Xcode on macOS Mojave I have tested this on iOS and Thank you Hi Erik Im working on a branch of OCMock to add additional quality checks to the project ASan TSan UBSan While working on implementing these additional checks when running the unit tests they uncovered some issues TSan Issues The thread sanitizer found tests involving notification mock objects that all failed with the same error when verify is called on the mock you end up with a Thread EXCBADACCESS codeEXCI GPFLT TSan is indicating that there is a memory read error so Im wondering if the notification mock is either in the process of being released or is already released since OCObserverMockObject has the autoRemoveFromCenter concept Test Case OCMockObjectMacroTests testSetsUpNotificationPostingAndNotificationObserving started ThreadSanitizerDEADLYSIGNAL ERROR ThreadSanitizer SEGV on unknown address x pc x c efa bp x ffee d d sp x ffee d d T The signal is caused by a READ memory access Hint address points to the zero page objcretain null libobjcAdylibx x fa Register values rax x rbx x b dfc rcx x c rdx x cbaa rdi x rsi x rbp x ffee d d rsp x ffee d d r x r x r x r x r x b cb r x b de r x b cb r x b fac ThreadSanitizer can not provide additional info SUMMARY ThreadSanitizer SEGV libobjcAdylibx x fa in objcretain ABORTING Test Case OCMockObjectMacroTests testNotificationObservingWithUserInfo started ThreadSanitizerDEADLYSIGNAL ERROR ThreadSanitizer SEGV on unknown address x pc x fa bp x ffeeb a sp x ffeeb a T The signal is caused by a READ memory access Hint address points to the zero page objcretain null libobjcAdylibx x fa Register values rax x rbx x b bf rcx x c rdx x rdi x rsi x rbp x ffeeb a rsp x ffeeb a r x r x r x r x r x b cd r x b be r x b cd r x b eaa ThreadSanitizer can not provide additional info SUMMARY ThreadSanitizer SEGV libobjcAdylibx x fa in objcretain ABORTING Test Case OCObserverMockObjectTest testAcceptsExpectedNotification started ThreadSanitizerDEADLYSIGNAL ERROR ThreadSanitizer SEGV on unknown address x pc x fa bp x ffee fe sp x ffee fe T The signal is caused by a READ memory access Hint address points to the zero page objcretain null libobjcAdylibx x fa Register values rax x rbx x b rcx x c rdx x c ef rdi x rsi x rbp x ffee fe rsp x ffee fe r x r x r x r x r x b d r x b r x b d r x b fa ThreadSanitizer can not provide additional info SUMMARY ThreadSanitizer SEGV libobjcAdylibx x fa in objcretain ABORTING Test Case OCObserverMockObjectTest testAcceptsExpectedNotificationWithSpecifiedObjectAndUserInfo started ThreadSanitizerDEADLYSIGNAL ERROR ThreadSanitizer SEGV on unknown address x pc x f fa bp x ffeefa sp x ffeefa f T The signal is caused by a READ memory access Hint address points to the zero page objcretain null libobjcAdylibx x fa Register values rax x rbx x b c rcx x c rdx x f rdi x rsi x rbp x ffeefa rsp x ffeefa f r x r x r x r x r x b d a r x b r x b d a r x b ea ThreadSanitizer can not provide additional info SUMMARY ThreadSanitizer SEGV libobjcAdylibx x fa in objcretain ABORTING Test Case OCObserverMockObjectTest testChecksNotificationNamesCorrectly started ThreadSanitizerDEADLYSIGNAL ERROR ThreadSanitizer SEGV on unknown address x pc x acfa bp x ffee f sp x ffee f T The signal is caused by a READ memory access Hint address points to the zero page objcretain null libobjcAdylibx x fa Register values rax x rbx x b a rcx x c rdx x c rdi x rsi x rbp x ffee f rsp x ffee f r x r x r x r x r x b d c r x b r x b d c r x b fb ThreadSanitizer can not provide additional info SUMMARY ThreadSanitizer SEGV libobjcAdylibx x fa in objcretain ABORTING UBSan Issue The undefined behavior sanitizer found test that exposed a nullability issue in setupForwarderForSelector in OCPartialMockObject The testStubsMethodImplementation test in OCMockForwardingTargetTests indicates that when the forwarder is being setup the originalMethod is nil so when you pass that to methodgetImplementation that is not allowed since the method parameter is marked explicitly as nonnull Im wondering if you need to return early there or do something similar to a few lines below where you are checking if the type encoding is null img width altscreen shot at am src Id be happy to fix these on my branch where Im adding these checks in but Im unsure of the correct solution Ive noticed that usually when I Cmdclick to learn more about some OCMock methodmacro I get a header with very little comments This issue happens all the time when I stub a mock object and use andReturn with this mock object or use OCMArg with reference to this mock object Example with singleton stubbing id singletonClassMock OCMClassMock Singleton class OCMStubClassMethod singletonClassMock shared andReturnsingletonClassMock dealloc is never called as well as stopMocking Example with OCMArg stubbing OCMStub mock methodWithBlock OCMArg invokeBlockWithArgsmock nil So we have memory leaking here and should manually call stopMocking to prevent unexpected behavior Is there any way to fix this problem Thanks Hi Erik Now that OCMock retains arguments passed to mocks I m unable to test dealloc logic for objects whose references are retained by mocks Is it possible to enable legacy behavior on a permock basis such as adding a method on OCMockObject that skips retention noRetainObjectArgs or releases arguments releaseObjectArgs Happy to contribute if either seems reasonable Thanks Alan When using OCMPartialMock to mock a UIView that has been inserted in the view hierarchy passed to addSubView of some other view then the app crashes in NSInvocation dealloc This can be reproduced with the following test objc voidtestDealloc UIView view UIView alloc initWithFrameCGRectZero UIView view UIView alloc initWithFrameCGRectZero view addSubviewview id viewMock OCMPartialMockview NSLogsilence warning Unused variable viewMock p bridge voidviewMock To test just paste this in iOS ExampleTestsm build with Xcode and run the tests on iPhone s simulator and youll have a crash with the following callstack thread queue comapplemainthread stop reason EXCBADACCESS codeEXCI GPFLT frame x f d d b libobjcAdylibobjcrelease frame x fdb e CoreFoundationcommonremoveAllObjects frame x fc c CoreFoundation NSArrayM dealloc frame x f d b libobjcAdylibobjcobjectsidetablereleasebool frame x f d c libobjcAdylibobjectremoveassocations frame x f cd ea libobjcAdylibobjcdestructInstance frame x f cd libobjcAdylibobjectdispose frame x fce b CoreFoundation NSInvocation dealloc frame x f d b libobjcAdylibobjcobjectsidetablereleasebool frame x fdb e CoreFoundationcommonremoveAllObjects frame x fc c CoreFoundation NSArrayM dealloc frame x f d b libobjcAdylibobjcobjectsidetablereleasebool frame x e fb c iOS ExampleTests OCMockObject dealloc self x b cmdunavailable at OCMockObjectm opt frame x e f e iOS ExampleTests OCClassMockObject dealloc self x b cmdunavailable at OCClassMockObjectm opt frame x e fdda iOS ExampleTests OCPartialMockObject dealloc self x b cmdunavailable at OCPartialMockObjectm opt frame x f d b libobjcAdylibobjcobjectsidetablereleasebool frame x f d d libobjcAdylibanonymous namespaceAutoreleasePoolPagepopvoid frame x b e XCTest XCTestCase invokeTest blockinvoke frame x b f XCTest XCUITestContext performInScope frame x b e ef XCTest XCTestCase invokeTest frame x b f b XCTest XCTestCase performTest blockinvoke frame x b bc b XCTest XCTContext runInContextForTestCaseblock frame x b f c XCTest XCTestCase performTest This used to work with revision but fails with the most recent revision from github Using git bisect Ive found that this was introduced by reland of with compilation fixes this version also fails with the same error when the compilation is fixed The crash happens in OCMockObject dealloc method when sending the release signal to invocations ivar This release the object sidetable used to store the association created by retainObjectArgumentsExcluding so I suspect that the bug is present in that method or maybe the bug was always there bug never visible due to the object cycle this method is trying to prevent 