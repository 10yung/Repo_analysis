This solution can be improved from Onm to On m where n is the size of the big tree t and m is size of the small tree t We can get the size of every subtree of t in On and size of t in Om and then only compare the subtrees of size m in t with t There are at most nm subtrees of size m and each compare costs Om so the total cost is Onm m On Om On m java public static boolean containsTreeTreeNode t TreeNode t if t null return true The empty tree is a subtree of every tree boolean result new boolean Get the size of t int m treeSizeAndMatcht null null Get the size of t and do the match for subtrees of size m int n treeSizeAndMatcht t m result return result private static int treeSizeAndMatchTreeNode r TreeNode r int matchSize boolean result ifr null return int leftSize treeSizeAndMatchr left r matchSize result int rightSize treeSizeAndMatchr right r matchSize result int size leftSize rightSize ifsize matchSize result result matchTreer r return size The same as Q CheckSubtreeQuestionBmatchTree public static boolean matchTreeTreeNode r TreeNode r Fix typo Fix typo Fix typos Hello team I have started implementing the solutions in F Would you be interested in taking ownership to make them available for other contributors The repo is here Thanks Hi I am implementing the solutions in Common Lisp As you may know in Lisp there is no sharp predetermined border between code and data and I think programming in Lisp opens ones mind to the power of computing models Programming in Lisp makes you see concepts from different angle Enough of me advertising lisp for more info please refer to The repo is here Thanks Mahyar No need to separate first column with the rest columns to check if there is zero public class QuestionB public static void mainString args int matrix setZerosmatrix for int i i matrixlength i for int j j matrix length j Systemoutprintmatrix i j Systemoutprintln public static void nullifyRowint matrix int row for int j j matrix length j matrix row j public static void nullifyColumnint matrix int col for int i i matrixlength i matrix i col public static void setZerosint matrix boolean rowHasZero false Check if first row has a zero for int j j matrix length j if matrix j rowHasZero true break Check for zeros in the rest of the array for int i i matrixlength i for int j j matrix length j if matrix i j matrix i matrix j Nullify rows based on values in first column for int i i matrixlength i if matrix i nullifyRowmatrix i Nullify columns based on values in first row for int j j matrix length j if matrix j nullifyColumnmatrix j Nullify first row if rowHasZero nullifyRowmatrix This code was incomplete so I completed it Typo