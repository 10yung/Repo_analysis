Hi When I try to use Google Recaptcha V inside a litelement component I get error saying Uncaught DOMException Blocked a frame with origin from accessing a crossorigin frame While I found some references for React And also some discussions here for Polymer Any guidance to do this for litelements Thanks Hi I try to use litelement in my current project and previous I use that code javascript class HomePageSearch extends HTMLInputElement connectedCallback consolelogworks thisfocus customElementsdefinehomepagesearch HomePageSearch extends input and then in html I can use that component like input ishomepagesearch Its really important for me because in that case I can use that component without any css changes And now I want to convert the code to litelement component But I dont understand how because using that variant javascript import LitElement from litelement class HomePageSearch extends LitElement connectedCallback consolelogworks thisfocus customElementsdefinehomepagesearch HomePageSearch extends input I got the error TypeError Class constructor bo cannot be invoked without new Thank you Browsers Affected Chrome Versions litelement v webcomponents v Description When using the default TypeScript settings in createreactapp it seems that the property decorator isnt creating the accessors correctly Strangle running a delete delete thistext on the property fixes the accessors Workaround To get the accessors working for the moment just run a delete on the property you created in the constructor typescript customElementmyelement export class MyElement extends LitElement property text string constructor super delete this text This will fix the accessors thistext Initial text render TemplateResult return htmlpthistextp Demo Steps to Reproduce Example Create myelement Add a text property to myelement with the property decorator Use the myelement tag in some HTML Select the myelement tag instance Assign a new value to the text property myElementtext some new text Expected Results A property update should trigger update eventsmethods update updated Actual Results The eventsmethods are not triggered on a property update Browsers Affected Check all that apply x Chrome x Firefox Edge Safari Safari IE Versions litelement See Apps and design systems that want to add additional styles to a component should override getStyles Previously they might have tried to override finalize but style gathering has been moved from there Hi I am using LitElement with Typescript ESLint and IONIC in VSCode and my indentation is getting always messed up difficult to make sense of Screenshot below Any way to actually make the alignment more neat If I use prettier things are getting messed up even more It works well for Nodejs but messed up alignment and indentation when using LitElement Screenshot from PS I am using many IONIC components within Lit Element Hence you see ion all over Description LitElementrender returnsTemplateResultvoid which makes it look less type safe for typescript users Source code of litelementts ts Invoked on each update to perform rendering tasks This method must return a lithtml TemplateResult Setting properties inside this method will not trigger the element to update protected render TemplateResultvoid Wondering if its possible to make it an abstract function with only TemplateResult as return type Steps to Reproduce ts render if thisprop return htmlpp Expected Results TypeScript compile error Actual Results Compiles fine on strict mode Versions litelement v Im looking for example of demo showing the usage of Tailwindcss with LitElement At least how should we proceed If you are asking a question rather than filing a bug try one of these instead StackOverflow Polymer Slack Channel Mailing List Instructions For Filing a Bug Description Example Error thrown when calling appendChild on Lit element Setting string property to undefined with reflect true does not remove the attribute EDIT I see this is documented here so my question is why is this so inconsistent For strings numbers undefined tells it not to change but for booleans objects arrays undefined removes the attribute It would make a lot more sense if undefined null both removed the attribute for all cases Live Demo Steps to Reproduce Example Create myelement Append myelement to documentbody Create div Append div to myelement Create myelement with mood set to good via attribute Append myelement to documentbody Set mood to undefined via property See that the mood attribute is still set Expected Results Example No error is throw Expected mood attribute to be removed Actual Results Example Error is thrown Mood attribute is still set to great Browsers Affected Check all that apply x Chrome Firefox Edge Safari Safari IE Versions npm ls will show the version of webcomponentsjs and litelement litelement v webcomponents NA Hello maybe this is not the best place for asking this but there are no other places Im wondering why the LitElement uses bare imports in its source and force us to use Polymer CLI or a bundler or pika I cannot see the point of this design decision I would be glad to learn the reason behind I thought Id share this with you because I remember trying to use this design from Polymer but it was always a mess Finally from Polymer and then LitElement I can get closer from my expectation and I am very satisfied but theres still one caveat First let me show you what I try to do I want to create an object that acts as a plain old object typescript interface Planet name string mass number satellites string const planet Planet name earth mass e satellites moon but also like a custom element In order to do that we can make a new LitElement element typescript customElementplanetelement class PlanetElement extends LitElement property type String public name string public mass number public satellites string render return html h thisnameh I already see problems The properties need a default value if not optional The autocompletion also includes the properties of LitElement To resolve default values have to be pass when the object is created hence in the constructor typescript tsignore customElementplanetelement class PlanetElement extends LitElement property type String public name string public mass number public satellites string constructor name string mass number satellites string super thisname name thismass mass thissatellites satellites render return html h thisnameh and because the constructor cant include parameters the decorator presents an exception which I for now ignore using tsignore To resolve I implement the interface typescript tsignore customElementplanetelement class PlanetElement extends LitElement implements Planet property type String public name string public mass number public satellites string constructor name string mass number satellites string super thisname name thismass mass thissatellites satellites render return html h thisnameh We get somewhere now we can type typescript const myplanet new PlanetElementmy little big planet b it feels more like a plain object myplanetmass myplanetname cool name rerender And it acts like a custom element typescript class SolarSystem extends LitElement private planets PlanetElement render return html thisplanets Thanks to lithtml this works lithtml understands that the array is an array of Planet elements and stamps the appropriate template of each elements But still this is not near perfect for reasons Its still a customElement I expect the object to be a plain old one if for instance I type JSONstringifymyplanet it would include exposed properties of LitElement too We could resolve it by creating this function in the custom element typescript class PlanetElement getPlainObject return Planet name thisname mass thismass satellites thissatellites Now JSONstringifymyplanetgetPlainObject works But it gets even more cumbersome four parts to modify When we need to add a property we have to modify four parts in the interface in the class properties in the constructor and in the getPlainObject Autocompletion For the completion to only propose the properties of the POJO we need explicit specification typescript myplanetthe autocompletion also includes LitElement properties myplanet as Planetthe autocompletion works well now I really wish there were a mechanism to achieve this I wanted to expose this issue I am facing I am sure this is not a pattern everyones think about but I think its worth considering What would you say to someone that tries to seamlessly fusion a plain old JS object and a custom element Any suggestions insights ideas Thanks in advance