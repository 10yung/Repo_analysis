Hey Im using firenvim daily at work I work on a platform which has script fields built in Is it possible for firenvim to recognize if its js html or css syntax in the text field Im editing The text fields in the platform looks exactly like the Write textfield here on github I would love this to work the way I want as I dont want it to trigger on anything else than JS HTML CSS syntax in it How would I configure this Thanks Best J The current renderer is pretty slow and is partially responsible for Firenvims latency problem This is because it uses the DOM which isnt intended for this kind of use Using the DOM made a lot of sense at the beginning of Firenvim because it reduced the amount of things to learn however now that I know most of what you need to know in order to write a Neovim GUI it would make sense to rewrite it with performance in mind The new renderer should Support all current Neovim UI extensions Be easy to maintain Be fast Supporting all current Neovim UI extensions from the start is important because it helps avoid bugs and will create part of the groundwork necessary for new yettocome ui extensions Easy maintenance is important because I have less and less motivation to work on Firenvim I should thus reduce the maintenance burden for myself and make it easy for new contributors to hack on Firenvim Being fast is the whole point of the rewrite and the only reason it would be ok to sacrifice speed is that an UI extension cant be implemented in an efficient way or that it would increase the maintenance burden There are multiple technologies that could satisfy our needs The Canvas D API WebGL WebGPU The canvas API is probably the easiest API to work with but also the slowest but it might be enough to reach fps you cant go higher in a browser An important point is that it has textrendering functions eg fillText this would help a lot during development The WebGL approach would be more complex but provide more control It doesnt provide textrendering functions and thus would probably require to hack something by rendering text with Canvas D first and then caching the glyphs and reusing the pixels in a WebGL context WebGPU isnt out yet but seems to be WebGL but modeled on Vulkan rather than OpenGL It would probably suffer from the same issues we have with WebGL Neovime uses Canvas D Nyaovim says it uses a canvas but I couldnt find the code OniVim uses WebGL Veonim uses WebGL Vv uses Canvas D Overall it seems that even though the Canvas approach seems simpler the more polished UIs chose to use WebGL This might indicate that Canvas D isnt good enough One last thing to keep in mind is that some users probably use canvasdisabling extensions Since Firenvim renders things in its own iframe it might not be affected we need to figure out how these extension work and whether well need to implement a fallback to the DOM renderer or not I can probably use Pavel Fatins excellent typometer to measure how fast the new renderer is compared to the old one Given stability issues for example in might be early for this but as soon as its considered stable I think the default mode should be to use the Firnvim provided web command line overlay by default This would alleviate requests like as well As it is I dont think the feature is even discoverable enough for those that would want it to take advantage of it Clearly those that werent expecting it might want to force the other mode I will probably tweak this on a per site basis or preferably based on the available space but it seems like a sensible default Im trying to use the cmdline firenvim option which makes the overall UI a lot nicer but Im having trouble making it usable In particular it seems to cause the whole UI to choke on autocompletion which works with the normal Neovim command line option Im using deoplete and whenever it activates I get some flicker and then a garbage character in the buffer Demo In se rt The above came from trying to type Insert in the Firenvim mode on this post with completion enabled You cant see the garbage in Githubs rendered version but if you view the source to this post it is there This doesnt seem to work on JIRA comments specifically And might be hard for you to access if you dont have currently already use JIRA Im not familiar with lua but if you dont have access I can try and poke around and maybe with your help or context I can figure out the issue Steps to reproduce Go to a JIRA ticket Make a new comment type out anything Use x to place the text into the comment box Expected Places text into box as usual Actual Page does a very quick refresh and nothing is placed into the box OS Version mac x Browser Version Google Inc Chrome Browser Addon Version Neovim Plugin Version What I tried to do What happened If you try sending a twit or for private messages firenvim doesnt work at all Thunderbird kind of supports webextensions It doesnt have a nativeMessaging API but it could be implemented as an experiment and maybe upstreamed This is my attempts to come up with something that makes Firenvim easier to configure and use on a persite basis without making users initrc files look like spaghetti and while allowing Firenvim to evolve without breaking configs Fixes and fixes or will by the time it comes out of draft mode Ive been using setting the markdown filetype for most sites that I use Firenvim on including ones that are not actually markdown Whatsapp web and Slack for example have bastardized Markdownish syntax that isnt actually Markdown As I use Firenvim on more and more sites Im starting to run into more cases where some unique filetype handling and syntax rules would be useful Off the top of my head my suggestion is to default all Firenvim files to a new filetype firenvim by default unless otherwise requested by the user see for a related improvement and bundle a syntax file for that filetype that uses the buffer name to add persite syntax highlighting I would implement that by first parsing out the domain then checking if a setup function for that domain exists and calling it if it does Besides being able to handle some common cases out of the box this would provide the framework for users to override Firenvims defaults and extend the behavior of vim on a given domain just a bit easier than it is now I think its useful to sandbox the neovim instance started by firenvim to add an additional layer of defense For Windows I only know of Sandboxie which recently announced they are open sourcing it For Linux the following tech is relevant firejail bubblewrap systemdnspawn docker any other software based on containers VMs will likely have too much overhead but Im listing them for completeness Im currently using firejail on my machines so I will try to write a firejail profile that grants readonly access to the neovim initialization files and plugins and readwrite access to the edited file