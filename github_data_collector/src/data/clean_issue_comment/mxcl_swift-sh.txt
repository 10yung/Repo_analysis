A common hack is to use filename to locate resources living alongside the source files When swiftsh moves the script source to its cache this doesnt work anymore Idea Instead of copying the script itself could you still point to the original file in the Packageswift eg targetname main dependencies cows path Usershelgedevscripts sources blubswift I think that would be very useful regardless Im in a situation where I have to create an executable out of a script to distribute it among my coworkers who dont have the development environment set up Im wondering whether this would be helpful in general and whether adding this functionality to swiftsh would be desired Today I researched a way for handling helper scripts for my Mac application I tested all three major players swiftsh Marathon Beak and I like the approach of swiftsh the most Especially the shebang and the idea of editing out into Xcode while working on the script without having to maintain the Xcode project afterwards Unfortunately there have been also two issues which bother me a bit The first one being the management of the Homebrew formula which I described in mxclhomebrewmade The second one is the inability to get the autocompleting in Xcode working Here are the steps Ive performed First I installed the tool from source version bash git clone cd swiftsh swift build c release cp build cp buildreleaseswiftsh ApplicationsXcode appContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbin cp buildreleaseswiftshedit ApplicationsXcode appContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbin Then I created a sample script from the README bash cat EOF script usrbinswift sh import PromiseKit mxcl printPromisevalueHi EOF chmod ux script script PromiseHi So far everything worked smoothly so I tried to edit the script in Xcode using swift sh edit script Xcode opened but no matter which scheme I selected the autocompletion didnt work The script scheme allowed me to run the script and the scriptcompletion scheme behaved very strangely showing errors complaining about script not being mainswift Below are some screenshots showing the problem mxcl I must be missing something Could you please give me a hint regarding what Im doing wrong img width altxcodeschemescript src img width altxcodeschemescriptcompletion src Its possible that Packageswift is rewritten but swiftbuild doesn t rebuild the resulting binary this leads to us always running swiftbuild which delays script execution by ms Also unrelated we should be faster that we currently are when cache is valid and respected worth trying to figure out why that is swift usrbinswift sh import Basic import Utility yields Fatal error Duplicate values for key SwiftPM Most notably with stdin if two are run that generate to the same cache location from eg different terminals at the same time its a race condition Would be another thing that usrbinenv swiftsh would not be able to use so we should perhaps also support this via a symlink of swiftsh to swiftshrunloop or something better We should at least emit a warning if there is a script called eject in the and the command was called with swift sh eject The workaround would be swift sh eject or swift sh eject neither is ideal really were being naughty by having an ambiguous command spec Whatever we should detect if were being called via the shebang and always do the script that way And when copying remove executable bit Strictly should be able to do this too