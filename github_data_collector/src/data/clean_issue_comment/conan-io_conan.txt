I am working on a crossplatform C project exploring if we can use Conan to manage our library dependencies Each library is prebuilt and has the following folder structure MyLib Lib Mac Debug x MyLiba Release x MyLiba Win Debug Win MyLiblib x MyLiblib Release Win MyLiblib x MyLiblib include h We have multiple Xcode and Visual Studio projects not generated using CMake that consume these libraries What is the best way to package these libraries such that I can switch between the DebugRelease or Win X configurations in XcodeVisual Studio without having to run Conan again x Ive read the CONTRIBUTING guide When my package is marked editable and I conan install a package that requires the editable package the lib filename does not get added to cppinfolibs if the editable package uses toolscollectlibsself in def packageinfoself I am using a layout when making the package editable in order to define the libdir since the lib file is generated under SolutionDirConfiguration which is the default location assigned by Visual Studio and one Id prefer not to change This location is not the same as where the recipe puts the lib file which is under the lib folder Layouts file libdirs settingsbuildtype I would expect collectlibs to search the libdir defined in the layout in this case I can easily workaround this by specifying the lib name rather than use the utility function Environment Details include every applicable attribute Windows Version Microsoft Visual Studio Version Conan version Python This feature is very useful mostly for Android as it supports multiple ABIs in the same apkaab Starting with Qt Qt for Android provides a way to build the apps for all Android ABIs in one go and without a multiarchAnyNone in arch settings its impossible to create an Android multilib Qt package for conan Environment Details include every applicable attribute Operating Systemversion Ubuntu Conan version Python version Steps to reproduce Consider the following tree and files ffmpeg conanfilepy variant conanfilepy variantconanfilepy py class MetaConanFile name nano settings os arch compiler version requires ffmpeg defaultoptions ffmpegvariation nano ffmpegconanfilepy shortened py class FfmpegConanConanFile name ffmpeg version settings os compiler buildtype arch options variation standard nano defaultoptions variation standard def requirementsself variation strselfoptionsvariation printfrequirements variation variation Script conan export ffmpeg conan export variant conan graph lock build lockfile variant conan graph buildorder build cascade build outdated cat conanlock conan create build ffmpeg testfolderNone ne lockfile ffmpeg What I would expect to happen Since in the root package variant the ffmpeg variation option is overridden I would expect it to take effect in the lockfile it does and to be applied when conan create is called it isnt The following should be printed requirements variation nano What actually happens requirements variation standard is printed even though I can see the correct value captured in the lockfile In other methods if I print it similarly the correct value is applied When other commands are called conan graph lock and conan graph buildorder I also see the correct value Repro There is one huge feature that I miss in conan or maybe I just did not understand how to achieve this sort of usage In our artifactory we have various of binaries packages however they can only ever be used one at a time because of the need to load the environments in cargo for example you have an ability to do cargo install package and it will jump into cargobin and you can use the binaries without any additional steps I do understand that there is a need for environments to run packages apps but I think it still could be possible to provide a generator that would mimic this simplicity my proposal is as follows Given application named potatoproducer a new generator would be available called lets say appgen after doing conan install g appgen bin potatoproducer It would create a directory binpotatoproducerdir a script binpotatoproducer Script would present itself as the target application in the simplest aproach it could be something as simple as binbash source binpotatoproducerdiractivatesh source binpotatoproducerdiractivaterunsh binpotatoproducer This would allow to install various packages from conan and have them as usable binaries without any hussle of dealing with environments X Ive read the CONTRIBUTING guide Changelog Fix Cleaning LDLIBRARYPATH environment in SCM commands for pyinstaller installations as SSL can fail due to using old SSL stuff from Conan instead from gitsvn Docs Omit It contains mostly a refactor centralizing executions and subprocess stuff not all of it but most of it from production code The only functional change is to introduce the pyinstaller fix in the SCM run method Close tags slow After reading i thought i can now set CONANUSERHOMESHORT to None and override conanfilepy setting shortpathTrue However doing this after already having installed packages with shortpaths true and trying to install the same packages again gives me this error which i do not understand Traceback most recent call last File c venvs py test lib sitepackages conans client commandpy line in run methodargs File c venvs py test lib sitepackages conans client commandpy line in install info selfconaninstallpathargspathorreference File c venvs py test lib sitepackages conans client conanapipy line in wrapper return fapi args kwargs File c venvs py test lib sitepackages conans client conanapipy line in install depsinstallappselfapp File c venvs py test lib sitepackages conans client managerpy line in depsinstall depsgraph graphmanagerloadgraphreforpath createreference graphinfo buildmodes File c venvs py test lib sitepackages conans client graph graphmanagerpy line in loadgraph return selfresolvegraphrootnode graphinfo buildmode checkupdates update remotes File c venvs py test lib sitepackages conans client graph graphmanagerpy line in resolvegraph depsgraph selfloadgraphrootnode checkupdates update File c venvs py test lib sitepackages conans client graph graphmanagerpy line in loadgraph selfrecursebuildrequiresgraph builder checkupdates update buildmode File c venvs py test lib sitepackages conans client graph graphmanagerpy line in recursebuildrequires selfbinaryanalyzerevaluategraphgraph buildmode update remotes nodessubset root File c venvs py test lib sitepackages conans client graph graphbinariespy line in evaluategraph selfevaluatenodenode buildmode update remotes File c venvs py test lib sitepackages conans client graph graphbinariespy line in evaluatenode selfprocessnodenode pref buildmode update remotes File c venvs py test lib sitepackages conans client graph graphbinariespy line in processnode selfevaluatecachepkgnode packagelayout pref metadata remote remotes update File c venvs py test lib sitepackages conans client graph graphbinariespy line in evaluatecachepkg assert nodeprev PREV for s is None s strpref metadatadumps AssertionError PREV for testtesttesttested d a e e cd d e e abdd f is None recipe revision remote conanlocal properties checksums conanmanifesttxt md f a c a e f f d sha d f c fd e c b e aae f conanfilepy md b f bde b e a e sha bf dee e aeb ce packages ed d a e e cd d e e abdd f revision null reciperevision null remote null properties checksums Note that the problem is gone when i delete the cache before installing Hi I am trying to add an artifactory repository in my VM When I run the conan user command I keep getting the error ERROR Codepoint U F at position of com not allowed Remote remote name But this works OK when I run it on windows I assumed somehow files in conan folder might have gotten corrupted so tried using new conan folder but outcome didnt change I also have latest conan installed in VM Any ideas how to fix this Please let me know if you need any more information Environment Details include every applicable attribute Operating Systemversion Mac Catalina Compilerversion Clang builtin Conan version Python version Description Hi I made a repository to reproduce the problem And put all log and description here But basically when i change on conanfilepy the generator to xcode it dont build I tried a lot of things from internetstackoverflow but without success Without the generator it works without problems Logs IncludeAttach if Applicable detailssummaryClick to expand logsummary conanfilepy iosframework Running build The C compiler identification is AppleClang The CXX compiler identification is AppleClang Check for working C compiler ApplicationsXcodeappContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbinclang Check for working C compiler ApplicationsXcodeappContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbinclang broken CMake Error at usrlocalCellarcmake sharecmakeModulesCMakeTestCCompilercmake message The C compiler ApplicationsXcodeappContentsDeveloperToolchainsXcodeDefaultxctoolchainusrbinclang is not able to compile a simple test program It fails with the following output Change Dir UserspauloDeveloperworkspacescppconancmaketestoutbuildCMakeFilesCMakeTmp Run Build Commandsusrbinxcodebuild project CMAKETRYCOMPILExcodeproj build target cmTC configuration Debug hideShellScriptEnvironment User defaults from command line HideShellScriptEnvironment YES Prepare build note Using legacy build system BUILD TARGET cmTC OF PROJECT CMAKETRYCOMPILE WITH CONFIGURATION Debug Check dependencies target specifies product type comappleproducttypetool but theres no such product type for the iphoneos platform BUILD FAILED The following build commands failed Check dependencies failure CMake will not be able to correctly generate this project Call Stack most recent call first CMakeListstxt project Configuring incomplete errors occurred See also UserspauloDeveloperworkspacescppconancmaketestoutbuildCMakeFilesCMakeOutputlog See also UserspauloDeveloperworkspacescppconancmaketestoutbuildCMakeFilesCMakeErrorlog ERROR conanfilepy iosframework Error in build method line cmakeconfigure ConanException Error while executing cd UserspauloDeveloperworkspacescppconancmaketestoutbuild cmake G Xcode DCMAKETOOLCHAINFILEUserspauloconandatadarwintoolchain ezoredstablepackage ab d acfe f c fae ab f e a ac darwintoolchaincmake DCONANINLOCALCACHEOFF DCONANCOMPILERappleclang DCONANCOMPILERVERSION DCONANLIBCXXlibc DBUILDSHAREDLIBSOFF DCMAKEINSTALLPREFIXUserspauloDeveloperworkspacescppconancmaketestoutbuildpackage DCMAKEINSTALLBINDIRbin DCMAKEINSTALLSBINDIRbin DCMAKEINSTALLLIBEXECDIRbin DCMAKEINSTALLLIBDIRlib DCMAKEINSTALLINCLUDEDIRinclude DCMAKEINSTALLOLDINCLUDEDIRinclude DCMAKEINSTALLDATAROOTDIRshare DCONANCMAKEPOSITIONINDEPENDENTCODEON DCMAKEEXPORTNOPACKAGEREGISTRYON DCONANEXPORTED DCMAKEBUILDTYPEDebug DPROJECTCONFIGARCHarmv DPROJECTCONFIGGROUP Wnodev UserspauloDeveloperworkspacescppconancmaketestcmake make build Error details Changelog omit Docs omit This test was failing in Windows due to hardcoded path 