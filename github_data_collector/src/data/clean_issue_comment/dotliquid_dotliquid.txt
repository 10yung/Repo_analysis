 Dotliquid version Expected behavior I cant create a tag with params for example datad date is tag and d parametr Dotliquid version Expected behavior Actual behavior Steps to reproduce the Problem you can add files Dotliquid version Expected behavior Following code assign rate rate Expected Actual behavior Results in Steps to reproduce the Problem you can add files Pull request to fix exists at This is a WIP PR that is not really intended to be merged but I am creating it for discussion Hence it is created as a draft It is a significant breaking change that changes the file system and rendering operations to be asyncbydefault I would like to create some sidebyside benchmarking to understand the perf impact of these changes in various scenarios I found an issue when trying to render a double Steps to reproduce assign double double Expected Actual Ive added a test to the PR and checked other tests The change doesnt seem to be that big but please let me know if should add something to the PR Does dotliquid have any introspectionmetadata statistics on the template Example to prevent users from creating many loops or if statements does dotliquid have the ability to tell me how many loopsif statements a given template has The goal is the prevent spam or malicious templates from taking too much CPU time I would like to refer to this comment Which in short says that there is no way to retrieve errors when template is set as Thread Safe I believe what should happen simply need the following overload for TemplateRender public TemplateRenderResult Render Where result has as minimum Status Output Errors This way template will be perfectly thread safe and will return result with values rather than I have to obtain these values from template itself Dotliquid version Expected behavior cs public class ExpandoModel public int IntProp get set public string StrProp get set public ExpandoObject Props get set private static void RunUsingExpando const string templateString Int IntProp String StrProp Expando PropsKey TemplateNamingConvention new CSharpNamingConvention TemplateRegisterSafeTypetypeofExpandoModel new IntProp StrProp Props var t TemplateParsetemplateString var model new ExpandoModel IntProp StrProp from string prop Props new ExpandoObject var dic IDictionarystring objectmodelProps dicAddKey from expando prop string output tRenderHashFromAnonymousObjectmodel ConsoleWriteLineRunUsingExpando output Expected Output Int String from string prop Expando from expando prop Actual behavior Actual Output Int String from string prop Expando Observations If I replace public ExpandoObject Props get set with public Dictionarystring object Props get set this works Dotliquid version dll v nuget package v Expected behavior Code c var templTxt ExtendedPropsKey Currency var model new CompositeModel ExtendedProps new Dictionarystring object Key Hash hash HashFromAnonymousObjectmodel var rendParams new RenderParametersCultureInfoGetCultureInfofrFr LocalVariables hash ErrorsOutputMode ErrorsOutputModeSuppress string output templRenderrendParams When I run the code I expect output like below because I set culture info for the entire job Instead I get PM And yes without filter I get it rendered correctly but not in specific format It seems that culture info should be propagated to filters I know that I can set filter as ExtendedPropsKey CurrencyfrFr but this is not super good Because the real issue is that I want to write custom filters and have culture info available for them Can custom filter become IContextAware Thanks that overwrite the indexer to get their values With the current implementation of the RespondTo and Send methods in DotLiquidUtilObjectExtensionMethods if you have a Drop derived class that overrides the indexer in DropBase so that it can return arbitrary properties such as those defined in the FrontMatter of a file the current methods arent able to deal with them This prevents being able to sort using those arbitrary properties with the sort filter Fortunately the solution is pretty straight forward just and lines of code respectively as you can see in the PR In the following block below Ive pasted a simple console program that you can use to test how this works with the original code and with the fixed one It tries to sort bu name or length the Markdown files inside a folder In a real situation the fields would be taken from the FrontMatter Hope you can accept the PR generate a new version and update the NuGet package Thanks for your great work on this library Sample code below csharp using System using SystemLinq using SystemIO using DotLiquid namespace TestSort class Program static void Mainstring args DirectoryInfo di new DirectoryInfoC TestFiles var allFiles from file in diEnumerateFilesmd SearchOptionTopDirectoryOnly select new MarkdownFilefileName fileLength Template parser TemplateParse assign sorted allFiles sort length for file in sorted fileName endfor Hash context new HashallFiles string res parserRendercontext ConsoleWriteLineres ConsoleReadLine A sample Drop overriding the indexer from the base class public class MarkdownFile Drop private string fullName private long length public MarkdownFilestring fullName long length thisfullName fullName thislength length public override object this object fieldName get Tries to return a real property form the object if present object res base fieldName if res null switch fieldNameToStringToLowerInvariant case name res fullNameToLowerInvariant break case length res length break default res break return res 