The documentation of clear and clearall are quite similar Public Removes all the requestlocal variables Public Clears all the requestlocal variable stores However clearall is something you almost never want to call it immediately destroys the information that may be in use by other threads It would be nice to document this Maybe something along the lines of clear Removes all the requestlocal variables for the current request This method will clear the local storage for the currently executing request clearall Clears all the requestlocal variable stores This method will clear the local storage for all requests This method should not be called during normal operation as it will destroy the storage of unrelated threads It seems that there is a gem that can deal with Sidekiq but what about ActiveJob A companion library requeststoresidekiq creates a Sidekiq middleware that will ensure the store is cleared after each job is processed for security and consistency with how this is done in Rack Do you have any solution for suckerpunch Thanks Whats a good pattern for storing objects in the RequestStore Im currently investigating server slowness for one of the apps Im working on and one of the main causes could possibly be the incorrect usage of RequestStore Its just a matter of fixing things but Im pretty sure its not a good idea to store references to things such as Controller Request Context getrequestcontextrequest Aside from the controller storing breaks MVC It seems like it can propagate issues beyond the controller lifecycle Being it hard to unit test maybe But Id like to understand whats happening under the hood aside from my app the way thread local storage is used when the app is running on a server such as passenger Below this line I might write things I dont truly understand so please correct me if Im wrong The server is running on passenger and some searching have sent me to I understood the part where if a main thread spawns threads then the children threads cant access TLS from the main thread Just some more context that allowed me to understand thread usage in rails I want to take a step back just to raise the question that is this even a good way to use RequestStore Storing other things like a User object makes sense but storing big things might cause trouble for the ruby GC And does it lead to performance issues high CPU usage from garbage collection on a huge object Thank you so much if you could help Like I said I might not understand everything yet but I really appreciate any input 