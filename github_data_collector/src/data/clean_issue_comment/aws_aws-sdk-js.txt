Confirm by changing to x below to ensure that its a bug x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers x Ive searched for previous similar issues and didnt find any solution Describe the bug The type declarations for SDK functions that receive callbacks are incorrect For instance from SQS receiveMessageparams SQSTypesReceiveMessageRequest callback err AWSError data SQSTypesReceiveMessageResult void RequestSQSTypesReceiveMessageResult AWSError this indicates that err will always be an AWSError whereas we know it could be null when there is no error Is the issue in the browserNodejs Any Typescript code Details of the browserNodejs version This is not version dependent as its a type declaration error SDK version number To Reproduce observed behavior This is a typing error so any code that expects AWSError to potentially be null could have problems Expected behavior Should be receiveMessageparams SQSTypesReceiveMessageRequest callback err AWSError null data SQSTypesReceiveMessageResult null void RequestSQSTypesReceiveMessageResult AWSError Confirm by changing to x below to ensure that its a bug x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers x Ive searched for previous similar issues and didnt find any solution Describe the bug The BucketCannedACL type couldshould list the awsexecread and logdeliverywrite values to match the documentation See Is the issue in the browserNodejs Both TypeScript definitions SDK version number v Confirm by changing to x below x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers Describe the question I am trying to set diferente ACL when I use the putBucketAcl api Regarding documentacion this is how params look like const params Bucket graphqlaws AccessControlPolicy Grants Grantee Type Group URI Permission READ Grantee Type Group URI Permission READACP Grantee Type Group URI Permission WRITE I have check with stackflow and params are correct but when I use the putBucketAclparams api I have the following error MalformedACLError The XML you provided was not wellformed or did not validate against our published schema Any suggestion I have checked millions of times and I don see where I am wrong Thanks Is your feature request related to a problem Please describe When a Request is pageable it would be natural to iterate over those pages using an async generator However there is no builtin way to do this The Request class does offer various pagination helpers and it offers a promise method for use in async code but there are no helpers to facilitate async iteration Describe the solution youd like Example code js const S new AWSS const request S listObjectsV bucketName MyBucket for await const data of requestpages for const object of dataContents Do something with object In this minimal example the existing eachPagecallback method could be used instead But async generators are a standard JavaScript type and can be easily and idiomatically manipulated js import mapMany filter from asyncutils Implementation omitted const S new AWSS const request S listObjectsV bucketName MyBucket const objects mapManyrequestpages data dataContents const filtered filterobjects object objectSize for await const object of filtered Do something with object I used S in the above examples because its simple and ubiquitous but the applications extend to any pageable API The pages method name is a placeholder any number of names would work Describe alternatives youve considered The obvious alternative is not using async iterators The existing helpers could be used to solve the same problems in a callbackoriented style just as the promise method could be replaced with callbackoriented code Another alternative would be writing my own function to turn a Request into an async generator The implementation is not especially complicated However this seems like the sort of lowlevel functionality that would benefit from a standardized welltested implementation at the SDK level In addition a method is likely to read more naturally in code A similar helper could be used to iterate over individual items like the experimental eachItemscallback method x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers x Ive searched for previous similar issues and didnt find any solution Describe the bug Setting ACL publicread when the bucket has Block permissions gives unhelpful error of Access Denied Is the issue in the browserNodejs Nodejs If on Nodejs are you running this on AWS Lambda No To Reproduce observed behavior Set the bucket permissions so it has Block All var uploadParams Bucket examplebucket Key test Body ACL publicread var putObjectPromise await s uploaduploadParamspromise Expected behavior The error message should provide a more helpful relevant message such as Invalid Parameters or Incompatible Parameters Confirm by changing to x below x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers Describe the question Hi AWS teams I have a treatment Nodejs server which produces png tiles for Leaflet maps and then upload them to a S bucket My server has to upload very quickly about images of kb to S bucket Here is one example of tile image My problem it takes a huge time to upload the tiles images about minutes even if the upload is done from an EC server I tried to parallelise my s upload processes in my nodejs app with Promiseall but it doesnt solve anything Is that an S limitation or am i doing things wrong like using the wrong methods s upload Thanks a lot for your help Here is an extract of my code JS const aws requireawssdk const s new awsS httpOptions timeout one more code later await Promiseall filesmapfile s upload Bucket myBucket ACL publicread Key files Path Body filestream ContentType imagepng CacheControl maxage promise then consolelogSuccess catcherr consoleerrorerr thenfunctionresult consolelogupload finished result catcherr consoleerrorerr After updating the module to version we notice an increasement in the API latency from ms to seconds Percentile After rolling back the update the latency normalized We are only using the SDK for S requests img width altScreen Shot at src Confirm by changing to x below to ensure that its a bug x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers x Ive searched for previous similar issues and didnt find any solution Describe the bug It works on all other browsers On IE I am getting code NetworkingError description Network Failure in send functions callback IE is making only GET requests to not valid endpoint Note dots between amazonawscom Is the issue in the browserNodejs Browser Details of the browserNodejs version IE v SDK version number Example v tested also on v To Reproduce observed behavior Standard usage AWSconfigupdate thisuploader new S ManagedUpload params Bucket VALUE Key VALUE Body origFile ContentType VALUE thisuploadersenderr resultData consolelogerr Expected behavior Upload works as expected The check throws an error with a default config when using an access point uri to upload Possibly this is due to something else that should be handled separately but the check above makes the sdk work for me as expected I am sure there is a more official way of referencing the default endpoint value but figure Id illustrate the fix for quick and easy testing fixes Checklist x npm run test passes dts file is updated changelog is added npm run addchange run bundle exec rake docsapi and inspect doclatestindexhtml if documentation is changed run npm run integration if integration test is changed noncode related change markdowngit settings etc I just edited using github quick in all honesty P Confirm by changing to x below to ensure that its a bug x Ive gone though Developer Guide and API reference x Ive checked AWS Forums and StackOverflow for answers x Ive searched for previous similar issues and didnt find any solution Describe the bug Note that when I comment the above code out everything does work as expected So it appears it just needs to actually check if the endpoint is custom rather than whether any endpoint exists at all This code is running for me when I try to upload a stream to an access point I am in no way setting any custom endpoints here When I check what the value of serviceendpoint is it is s amazonawscom which I never set manually at any point I can retrieve data fine through the endpoint without this error so it is only when I try to run s uploadparams js const S new AWSS accessKeyId configgetcompliances SecretID secretAccessKey configgetcompliances SecretKey async function uploadComplianceDocument Key string Body readableStream MetaData string string const params ACL bucketownerfullcontrol Bucket COMPLIANCEBUCKET Key Body MetaData const result await S uploadparams promise catcherr consoleerror ERROR Failed to upload file to S params err throw err return result In this case COMPLIANCEBUCKET is an access point arn which i can upload to without problem using the awssdk cli via something similar to below copied from documentation page aws s api putobject bucket arnawss uswest accesspointprod key myimagejpg body myimagejpg Is the issue in the browserNodejs Nodejs If on Nodejs are you running this on AWS Lambda no Details of the browserNodejs version node v v SDK version number npm list awssdk awssdk To Reproduce observed behavior See code above I am retrieving a stream using https then giving it to s as Body which I have done in past Same instance of S works fine for other operations through the access point Expected behavior Should work Apparent Solution From running tests it would appear this could potentially be fixed by changing the code in the URL above to js if reqserviceoriginalConfigendpoint reqserviceoriginalConfigendpoint s amazonawscom throw AWSutilerrornew Error code InvalidConfiguration message Custom endpoint is not compatible with access point ARN Although this also probably needs to take into account region when creating the S instance 