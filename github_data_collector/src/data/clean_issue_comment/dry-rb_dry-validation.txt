In complex rules it may be useful to know whether the key has any failure message already ruby rulefooseach do keysuccess true keyfailure false keyfailurewrong keysuccess false keyfailure true end ruby class MyContract DryValidationContract params do requiredhogwartshousehash do requiredheadfilledstring requiredcommonroomhash do requirednamefilledstring requiredlocationfilledstring end end end rulehogwartshouseheadvalidatesize rulehogwartshouseheadvalidateformat SOMEREGEX rulehogwartshousecommonroomlocationvalidateincludedin tower underground end For includedin and size passing an array of integersstrings not working but it works when just one value passed or with predicates which do not require arrays includedin rulehogwartshousecommonroomlocationvalidateincludedin tower underground size rulehogwartshouseheadvalidatesize ArgumentError wrong number of arguments given expected This predicate is just returning error format rulehogwartshouseheadvalidateformat SOMEREGEX DryContainerError Nothing registered with the key format Examples ruby require dryvalidation class PropsContract DryValidationContract json do requiredcontactsvaluearray minsize each do hash do requirednamefilledstring requiredemailfilledstring requiredphonefilledstring end end end rulecontacts emaileach do keyfailureemail not valid unless valueinclude end end c PropsContractnew c contacts name Jane email janedoeorg phone name John email oops phone errorstohinspect email email not valid Resources Refs Examples ruby require dryvalidation class PropsContract DryValidationContract json do requiredcontactsvaluearray minsize each do hash do requirednamefilledstring requiredemailfilledstring requiredphonefilledstring end end end rulecontactseach do index key email index failureemail not valid unless value email include end end c PropsContractnew c contacts name Jane email janedoeorg phone name John email oops phone errorstohinspect email email not valid Resources Refs At the moment validation contract returns nice humanreadable errors via translation backend Being a robot I do not like it and Id prefer pure data objecthash to be returned Justification I dont think it is contract responsibility to translate its errors When used within API all the i n normally happens on the client side so API can be completely translationfree Examples class MyContract DryValidationContract json do requirednamefilledstring requiredagefilledinteger end ruleage do keyfailuretooyoung min if age end end contract MyContractnew errors MyContractnewage errors errorstoh name error missing age error tooyoung min The above is only example response I have no strong preferenceopinion on how that data should be represented Resources Discourse discussion This feature will allow contracts to be composed of other contracts optionally mounted at input paths Example ruby this contract defines its own params and rules but also uses the schemarules of CustomerContract and AddressContract on the input at address via the contract and path methods class OrderContract ApplicationContract params do requiredaccepttermsvaluebool end ruleaccepttermsvalidateacceptance contract CustomerContract path address do contract AddressContract end end Implementation Initial on branch composablecontracts x Create a composable extension x implement new contract feature in the composable extension x Add path block DSL Rewrite ResultSet as extension to Result Rewrite the contractcallspec integration test using the desired new syntax Add an example Document the changes in docsite Future work Decide on exact semantics for merging result valueserrors if its unclear Ensure it works wrt concurrency Figure out if we should integrate with other extensions in the short term Decide on a syntax so contracts can be applied to nested arrays of input Decide on a syntax so contracts can be conditionally be applied depending on the input If consensus that the API is good remove the composable extension and rewrite contract and result to include the new functionality by default Resources Discussion on the dryrb forum Code spike gist Pasteable in irb example Describe the bug After calling a DryValidationContract on errors the locale option return the correct translation instead when using messages this option seems ignored To Reproduce Giving a simple contract like this one class MySchema DryValidationContract configmessagesloadpaths myfileyml params do requiredtitlefilled end end result MySchemacall resulterrorslocale de returns the de version resultmessageslocale de returns the de version but it doesnt and returns the en version Here a portion of my error file en dryvalidation errors filled must be filled de dryvalidation errors filled muss abgef llt sein Here a screenshot from my console Expected behavior resultmessageslocale de returns the correct translation Your environment adding compatibility to dryv x in reform In many REST APIs its often the case when creating resources certain fields are required but when updating resources all fields are optional and only the fields which are provided are updated Examples For example the following schema is good for validating user creation ruby params do requirednamefilledstr requiredphonenumberfilledstr optionalmetadatamaybehash requiredadditionaldetailsfilledhashschema do requirednamekmfilledstr requireddateofbirthvaluedate filled end end But when updating a user we need the following schema ruby params do optionalnamefilledstr optionalphonenumberfilledstr optionalmetadatamaybehash optionaladditionaldetailsfilledhashschema do optionalnamekmfilledstr optionaldateofbirthvaluedate filled end end We dont want to repeat the schema and the rules My first thought of a possible solution would be something like ruby option resource optional true params do conditionallyrequirednamefilledstr resourcepresent conditionallyrequiredphonenumberfilledstr resourcepresent conditionallyrequiredmetadatamaybehash resourcepresent conditionallyrequiredadditionaldetailsfilledhash resourcepresent schema do conditionallyrequirednamekmfilledstr resourcepresent conditionallyrequireddateofbirthvaluedate filled resourcepresent end end For a PATCH request the resource could be injected as an external dependency for a POST request the resource doesnt exist yet so its not injected Id like to be able to specify a macro in the following manner rulefoo bareach where both foo and bar are arrays Examples As an example please have a look at this spec thats currently failing Resources Discussed with solnic here 