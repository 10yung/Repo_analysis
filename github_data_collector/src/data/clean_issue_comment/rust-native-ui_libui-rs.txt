I was just wondering if there will be some sort of controlling the window size during the runtime not only when initializing the window and maybe some events so like when the user resizes the window an event gets triggered with a xy of the old window size and xy of the new window size well maybe the events for resizing is kinda useless but it would be nice to have and better window builder because currently we can only set the width height and if it has a menu bar or not maybe add like if the window is resizable or not and if it can go full screen or not and by the way the master docs is a little outdated all new features is not in the master docs its just like the stable one no total difference at all i had to dig a little through the lib sources to figure out what new stuff has been added and how they work Compiler in examples cant find progressbar More then even i cant find it Docs says that iui dont have progressbar at alli cant find anything that contains Progress or something I took this example Compiler errors Using iui v and uisys v When building an UI for an app the has longrunning background processes that need to be monitored I noticed that rundelay calls the ontick callback very aggressively This change would trigger the callback on every delayms milliseconds as advertised without consuming a whole CPU core For inputsrs and inputsgridrs the slider and spinner start at but the code sliderval and spinnerval thinks its Clicking the slider tells the underlying code addsubtract its and changing the spinner to tells the underlying code addsubtract its Currently when creating a window on macOS it shows in the left bottom corner Is there a way to center the window This adds support for uiColorButton and also updates an example to use it The Rgba struct shouldnt be in controlsbasicrs Ive tried putting it into utiltypesrs but couldnt find a way to includeuse that sorry Rust noob here Ive set up CLion with the tada IntelliJ rust plugin tada but Im having issues running the debugger error while loading shared libraries libuiso cannot open shared object file No such file or directory I located libuiso find name libuiso targetdebugbuilduisysf c f b cb outbuildoutlibuiso So I tried setting LDLIBRARYPATH before running CLion LDLIBRARYPATHhomemitchdevpulttargetdebugbuilduisysf c f b cb outbuildout snap run clion However Im still getting error while loading shared libraries thinking Im not super familiar with how shared libraries work so I highly doubt that this issue is specific to libuirs theres just a chance that a libuirser has run into this issue too smile manshrugging When configuring inputs on a webpage I can associate them with a form which has a primary submit button Then when I click enter while any of those inputs are focused then the submit button will automatically be triggered In my case Ive a couple inputs and a submit button Screenshot from Id love to make it so hitting enter while the Entry is focused will cause the submit action smile libui switched from cmake to meson so this project should keep up I decided to create this a tracking issue on thoughs and desired features for that change While switching to meson build system it would be great to have support for the following things or at least keep them in mind The ability to control whether to build a static or dynamic lib Apparently the recommended way of doing that is via buildtime env vars and not via cargo features The ability to embed custom manifests on windows Thoughts Hello I have published a simple macro that allows the definition of IUI user interfaces through a hierarchical declarative DSL Here is the central part of the inputsrs example defined using my macro rust Create the layout and add the controls iui ui let contents HorizontalBox Stretchy let inputgroup GroupInputs let inputvbox VerticalBoxpadded true Compact let slider Slider Compact let spinner Spinbox Compact let sp Spacer Compact let sp HorizontalSeparator Compact let sp Spacer Compact let entry Entry Stretchy let multi MultilineEntry Stretchy let outputgroup GroupOutputs let outputvbox VerticalBox Compact let addlabel Label Compact let sublabel Label Compact let textlabel Label Stretchy let bigtextlabel Label Add the layout to the window windowsetchild ui contents Update the application state when a control changes its value slideronchanged ui val stateborrowmutsliderval val I tried several variations of the syntax before settling on this one Some of my objectives were Reduce boilerplate for the final user as much as possible but keeping the code easy to read for example I could have abbreviated Compact to C and Stretchy to S but it would only save a few bytes and decrease the readability Keep the implementation as simple as possible I managed to do it all with a single macro that is less than lines long and as simple as I could make it Let the programmer omit any part of their UI from the macro if they need to define it dynamically for example you can omit a containers children and add them later through code using the proper append methods This is also why all controls are defined with variable names that are available to use right after the iui macro More information and an explanation of the macro syntax is available in the projects README Im still learning Rust and experimenting with the available libraries and I dont yet know whether I will work with Rust or IUI much in the future Therefore if you like the idea and wish to incorporate it into your project feel free to do so In the meantime users of the stable version can include my crate from GitHub and use this version of the macro to define their interfaces A link from your README would be appreciated