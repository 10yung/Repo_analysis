Per a reminder from deissnerk Hello I have published a CloudEvent to an Azure Service Bus queue To read this event from the Azure Service Bus queue I have an Azure Function v with a ServiceBusTrigger Based on this doco a v Azure Function binds to a service bus message via the MicrosoftAzureServiceBusMessage type So to get the original CloudEvent object I need to deserialize the messageBody byte array messageBody EncodingUTF GetStringmessageBody messageBodyLength cloudEvent JsonConvertDeserializeObjectCloudEventmessageBody I have confirmed the messageBody string is a JSON serialized representation of the CloudEvent object However when I attempt to deserialise with JsonConvertDeserializeObjectCloudEvent I get the following runtime error Unable to find a constructor to use for type CloudNativeCloudEventsCloudEvent A class should either have a default constructor one constructor with arguments or a constructor marked with the JsonConstructor attribute Im new to CloudEvents so I think Im just missing something basic here but I cant find any serialization methods or extensions to help with this scenario Any guidance will be greatly appreciated Would it be possible to get an example of an implementation with Avro and Kafka similar to those given with the different SDKs The documentation describes HTTP related events pretty well I try to understand advanced use cases which are not covered by the docs Id like to standardize all incoming requests of my SAAS service by forcing cloud events everywhere This would include API calls performed by users over the HTTP protocol eg REST RPC The spec in this repo is pretty forward Based on HTTP Protocol Binding nothing prevents such use case If Im correct then a user would send event metadata as HTTP headers and use applicationjson content type for GETPOST requests and applicationoctetstream for binary stuff like file uploads The only restriction I see is the size limit for intermediaries and consumers which is expected to be up to KB this blocks file upload implementation By ignoring this limit the HTTP event received from a user would look like this js const httpEvent specversion type commyserviceapifilesupload source subject upload id A time T Z datacontenttype applicationoctetstream data HTTPRequestObject stream instance req I wonder why Googles implementation of HTTP cloud function doesnt provide the event object It seems like Knative also follows Googles pattern AWS however agrees that a user sends an event object where they attach custom properties js Google exportshelloHttp req res exportshelloEvent event context AWS exportshelloHttp async event If we ignore how cloud functions work today cloud events could also start HTTP event streaming SSE and theres a bunch of other use cases At the moment it seems to me that cloud events are only meant for small background triggers and not as an overall event standard Am I correct I remember a talk almost a year ago where a guy said that an event carries only data for a consumer to create another request to access actual data Maybe this is still true I would appreciate comments on what I wrote above and some more words about the conceptionallevel overview of how the cloud events should be used It would be great for this spec to be more opinionated to eliminate confusion Thank you Per our previous call just a reminder for our SDK doc See jroper clemensv could one of you consider taking care of this one We were about the relation between the partitionKey extension and the kafka binding on the call and there was a great snippet of someone saying that the binding should not require the extension I think that applies on a general level and the primer should suggest that pluginsbindingsprograms whats the lowest common denominator here that work with CloudEvents not require extensions unless absolutely necessary Hi all in my JavaScriptNodejs library for manage CloudEvents here inside extensions Im using an attribute strict that when set to true default is false some additional validations will be done on the new created CloudEvent instance but its possible to validate an instance even later without or with that strict mode this is useful for example during development to better identify badwrong CloudEvent instances Note that when set for example in some important CloudEvent instances I keep that flag into the extensions attribute of the instance so it will be possible to reuse later Do you think it could be a good addition to extensions Tell me if you need more info or contextexamples Regards Sandro Related to there are also a number of cases where the expected parsing is not spelled out today I volunteer the following HTTP binary mode object for consideration http POST HTTP ContentType textxml CEExtension foo CEExtensionKey bar CEExtensionKey baz CESpecVersion CECloudeventsversion v CESource CEType udontknowjack CEID ContentLength much wow xml I believe this should correspond to a JSON object like the following json specversion source type udontknowjack id extension foo cloudeventsversion v contenttype textxml data much wow xml Note that the extension map keys were silently dropped a different definition would be to discard the value foo Additionally the actual data content is actually invalid XML if I recall my XML correctly 