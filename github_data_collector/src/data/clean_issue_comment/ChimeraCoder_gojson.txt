When the JSON is of format interfaceinterfaceinterface gojson has trouble printing out the substructs Protobuf is a general tool for generating and management crosslanguage structures A tool to generate proto from json is useful Here is such a tool written by me Maybe you can reimplement such a tool with golang or mention it in the readme Every exported function in a program should have a doc comment The first sentence should be a summary that starts with the name being declared From effective go PR generated by CodeLingo Install here to drive Continuous Higher Standards Reopening pr with a new branch quoted description from original PR As a proposal to I think this will generate better struct names while avoiding the issue of different structs with the same name overriding each other Let me know what you think The newest released was released in last year but the master code update in few months If we use go we can only use v version of code For example version v func Generateinput ioReader parser Parser structName pkgName string tags string subStruct bool byte error version master func Generateinput ioReader parser Parser structName pkgName string tags string subStruct bool convertFloats bool byte error Master version add parameter convertFloats Nice to see that Im not the only one who wants to generate code from JSON However plain JSONYAML is the only notation that can be used as a source for code generation Id like to propose OpenAPI V generation assume you have the following JSON file json type object properties error type object properties message type string fields type string this JSON file may end up in a go struct like go type Error struct Message string jsonmessage Fields string jsonfields type SomeStruct struct Error Error jsonerror thoughts Im trying to use gojson to generate structs for an array of items which may or may not contain disjunct keys with different subobjects Example lets call this testjson json foo bar baz xx foo bar foo bar yy bar baz In my original input these are one object per line but as gojson can not handle this I have converted the input to an array instead While this format can be well processed using the default settings cat testjson gojson package main type Foo struct Foo struct Bar int jsonbar Baz int jsonbaz Xx struct Foo string jsonfoo jsonxx Yy struct Bar string jsonbar jsonyy jsonfoo theres a problem when trying to use subStruct cat testjson gojson subStruct package main type Foo struct Foo Foosub jsonfoo The substructs just are not printed I would have expected an output similar to what I would get from a nonarray input cat test json foo bar baz xx foo bar cat test json gojson subStruct package main type Foo struct Foo Foosub jsonfoo type Foosub struct Bar int jsonbar Baz int jsonbaz Xx Foosub jsonxx type Foosub struct Foo string jsonfoo where the referenced substructs are also printed in the actual output Add two CLI flags to enhance gojson nosort dont sort fields of generated structs default false see issue omitempty add omitempty into field tag default false As title seems like itll only create a Ref field currently A new method has been created that allows you to flexibly manage the generation of structures Additional options such as omitempty for json tags and package name is in the Options structure Two problems are fixed the presence of empty apostrophes for tags if there are no tags and the possibility to substitute an empty package name is eliminated if the name is empty then the package will not be displayed 