 Thank you for contributing to TiDB Please read TiDBs CONTRIBUTING document BEFORE filing this PR What problem does this PR solve add issue link with summary if exists setval is specialized for sequence function with tableName num as parameter here setvalstring num is voluntary function tested for generated column error So we rename it here cleaning the way for sequence setval function What is changed and how it works just rename setval in error generated column code test Check List REMOVE the items that are not applicable Tests At least one of them must be included Unit test Integration test Release note rename setval func for generated column Feature Request TiDBs EXPLAIN uses the terminology of Tablescan to show that the clustered index is being accessed and IndexScan to show any other index is being accessed Whether or not this is efficient depends on the row estimate if there is any attached range Describe the feature youd like I like the SQL Server terminology of Table Seek and Index Seek for the case that the whole structure is not being read Consider I believe to the user it looked like this is the difference between a Point Get and a Tablescan but the second query is still very efficient TableReader root dataTableScan TableScan cop tablesystaskinst range keep orderfalse statspseudo I would like it to instead say TableReader root dataTableScan TableSeek cop tablesystaskinst range keep orderfalse statspseudo Describe alternatives youve considered It is somewhat fine when you are used to it Teachability Documentation Adoption Migration Strategy A lot of people are conditioned to table scans are bad It is useful to prevent this conversation by calling it a Table seek That makes TiDB slightly easier to teach Performance Questions What version of TiDB are you using mysql select tidbversion G row tidbversion Release Version v beta g c e Git Commit Hash c e ae bca d ccfeff e da Git Branch master UTC Build Time GoVersion go Race Enabled false TiKV Min Version v b ca adaced d b ed Check Table Before Drop false row in set sec Whats the observed and your expected performance respectively I imported the ontime flight statistics database million rows GiB data uncompressed into TiDB It is the same dataset in this blog post The schema contains no secondary indexes mysql SHOW CREATE TABLE ontime G row Table ontime Create Table CREATE TABLE ontime Year year DEFAULT NULL Quarter tinyint DEFAULT NULL Month tinyint DEFAULT NULL DayofMonth tinyint DEFAULT NULL DayOfWeek tinyint DEFAULT NULL FlightDate date DEFAULT NULL UniqueCarrier char DEFAULT NULL AirlineID int DEFAULT NULL Carrier char DEFAULT NULL TailNum varchar DEFAULT NULL FlightNum varchar DEFAULT NULL OriginAirportID int DEFAULT NULL OriginAirportSeqID int DEFAULT NULL OriginCityMarketID int DEFAULT NULL Origin char DEFAULT NULL OriginCityName varchar DEFAULT NULL OriginState char DEFAULT NULL OriginStateFips varchar DEFAULT NULL OriginStateName varchar DEFAULT NULL OriginWac int DEFAULT NULL DestAirportID int DEFAULT NULL DestAirportSeqID int DEFAULT NULL DestCityMarketID int DEFAULT NULL Dest char DEFAULT NULL DestCityName varchar DEFAULT NULL DestState char DEFAULT NULL DestStateFips varchar DEFAULT NULL DestStateName varchar DEFAULT NULL DestWac int DEFAULT NULL CRSDepTime int DEFAULT NULL DepTime int DEFAULT NULL DepDelay int DEFAULT NULL DepDelayMinutes int DEFAULT NULL DepDel int DEFAULT NULL DepartureDelayGroups int DEFAULT NULL DepTimeBlk varchar DEFAULT NULL TaxiOut int DEFAULT NULL WheelsOff int DEFAULT NULL WheelsOn int DEFAULT NULL TaxiIn int DEFAULT NULL CRSArrTime int DEFAULT NULL ArrTime int DEFAULT NULL ArrDelay int DEFAULT NULL ArrDelayMinutes int DEFAULT NULL ArrDel int DEFAULT NULL ArrivalDelayGroups int DEFAULT NULL ArrTimeBlk varchar DEFAULT NULL Cancelled tinyint DEFAULT NULL CancellationCode char DEFAULT NULL Diverted tinyint DEFAULT NULL CRSElapsedTime int DEFAULT NULL ActualElapsedTime int DEFAULT NULL AirTime int DEFAULT NULL Flights int DEFAULT NULL Distance int DEFAULT NULL DistanceGroup tinyint DEFAULT NULL CarrierDelay int DEFAULT NULL WeatherDelay int DEFAULT NULL NASDelay int DEFAULT NULL SecurityDelay int DEFAULT NULL LateAircraftDelay int DEFAULT NULL FirstDepTime varchar DEFAULT NULL TotalAddGTime varchar DEFAULT NULL LongestAddGTime varchar DEFAULT NULL DivAirportLandings varchar DEFAULT NULL DivReachedDest varchar DEFAULT NULL DivActualElapsedTime varchar DEFAULT NULL DivArrDelay varchar DEFAULT NULL DivDistance varchar DEFAULT NULL Div Airport varchar DEFAULT NULL Div AirportID int DEFAULT NULL Div AirportSeqID int DEFAULT NULL Div WheelsOn varchar DEFAULT NULL Div TotalGTime varchar DEFAULT NULL Div LongestGTime varchar DEFAULT NULL Div WheelsOff varchar DEFAULT NULL Div TailNum varchar DEFAULT NULL Div Airport varchar DEFAULT NULL Div AirportID int DEFAULT NULL Div AirportSeqID int DEFAULT NULL Div WheelsOn varchar DEFAULT NULL Div TotalGTime varchar DEFAULT NULL Div LongestGTime varchar DEFAULT NULL Div WheelsOff varchar DEFAULT NULL Div TailNum varchar DEFAULT NULL Div Airport varchar DEFAULT NULL Div AirportID int DEFAULT NULL Div AirportSeqID int DEFAULT NULL Div WheelsOn varchar DEFAULT NULL Div TotalGTime varchar DEFAULT NULL Div LongestGTime varchar DEFAULT NULL Div WheelsOff varchar DEFAULT NULL Div TailNum varchar DEFAULT NULL Div Airport varchar DEFAULT NULL Div AirportID int DEFAULT NULL Div AirportSeqID int DEFAULT NULL Div WheelsOn varchar DEFAULT NULL Div TotalGTime varchar DEFAULT NULL Div LongestGTime varchar DEFAULT NULL Div WheelsOff varchar DEFAULT NULL Div TailNum varchar DEFAULT NULL Div Airport varchar DEFAULT NULL Div AirportID int DEFAULT NULL Div AirportSeqID int DEFAULT NULL Div WheelsOn varchar DEFAULT NULL Div TotalGTime varchar DEFAULT NULL Div LongestGTime varchar DEFAULT NULL Div WheelsOff varchar DEFAULT NULL Div TailNum varchar DEFAULT NULL ENGINEInnoDB DEFAULT CHARSETlatin COLLATElatin bin row in set sec I am a bit surprised by the time difference between these two queries mysql analyze table ontime Query OK rows affected min sec mysql explain analyze select count from ontime id count task operator info execution info memory disk StreamAgg root funcscountColumn Column time s loops rows KB NA TableReader root dataStreamAgg time s loops rows rpc num rpc max ms min ms avg ms p ms p ms proc keys max p Bytes NA StreamAgg cop tikv funcscount Column proc max ms min ms p ms p ms rows iters tasks NA NA TableScan cop tikv tableontime range infinf keep orderfalse proc max ms min ms p ms p ms rows iters tasks NA NA rows in set sec mysql explain analyze select minarrdelay from ontime id count task operator info execution info memory disk StreamAgg root funcsminontimeontimearrdelayColumn time s loops rows Bytes NA TopN root ontimeontimearrdelayasc offset count time s loops rows Bytes NA TableReader root dataTopN time s loops rows rpc num rpc max ms min ms avg ms p ms p ms proc keys max p Bytes NA TopN cop tikv ontimeontimearrdelayasc offset count proc max ms min ms p ms p ms rows iters tasks NA NA Selection cop tikv notisnullontimeontimearrdelay proc max ms min ms p ms p ms rows iters tasks NA NA TableScan cop tikv tableontime range infinf keep orderfalse proc max ms min ms p ms p ms rows iters tasks NA NA rows in set sec Also showing with the cascades planner enabled suboptimally chosing HashAgg but I think the idea behind the minavgdelay plan is better mysql set tidbenablecascadesplanner Query OK rows affected sec mysql explain analyze select count from ontime id count task operator info execution info memory disk HashAgg root funcscountColumn Column time s loops rows PartialConcurrency FinalConcurrency KB NA TableReader root dataHashAgg time s loops rows rpc num rpc max ms min ms avg ms p ms p ms proc keys max p Bytes NA HashAgg cop tikv funcscount Column proc max ms min ms p ms p ms rows iters tasks NA NA TableScan cop tikv tableontime range infinf keep orderfalse statspseudo proc max ms min ms p ms p ms rows iters tasks NA NA rows in set sec mysql explain analyze select minarrdelay from ontime id count task operator info execution info memory disk HashAgg root funcsminColumn Column time s loops rows PartialConcurrency FinalConcurrency KB NA TableReader root dataHashAgg time s loops rows rpc num rpc max ms min ms avg ms p ms p ms proc keys max p Bytes NA HashAgg cop tikv funcsminontimeontimearrdelayColumn proc max ms min ms p ms p ms rows iters tasks NA NA TableScan cop tikv tableontime range infinf keep orderfalse statspseudo proc max ms min ms p ms p ms rows iters tasks NA NA rows in set sec I also observed very high CPU usage in the select minarrdelay query on TiKV My assumption is that TiKV is actually sorting data in the min function What I would expect from it is to use a priority queue where for each region as it is scanning it just retains the min value Have you compared TiDB with other databases If yes whats their difference MySQL can priority queue here but it will still be slower because it does not have parallel query This is not for a real usecase I am researching edgecases where TiDB will perform worse than MySQL I have not tested other variations of queries that benefit from a priority queue such as an ORDER BY unindexed LIMIT small number but I believe this might worth documenting as a difference in optimizerexecution capabilities between TiDB and MySQL similar to Thank you for contributing to TiDB Please read TiDBs CONTRIBUTING document BEFORE filing this PR What problem does this PR solve add issue link with summary if exists add statement pessimistic retry count What is changed and how it works add statement pessimistic retry count Check List REMOVE the items that are not applicable Tests At least one of them must be included No code Related changes Need to cherrypick to the release branch What problem does this PR solve This PR adds Transformation rule TransformAggregateCaseToSelection for What is changed and how it works add a transformation rule TransformAggregateCaseToSelectionThis rule tries to convert Aggcase when to AggSelection Check List Tests Unit test Code changes Has exported functionmethod change Bug Report Please answer these questions before submitting your issue Thanks What did you do table rows of data CREATE TABLE systaskinst INSTID int NOT NULL AUTOINCREMENT COMMENT TASKID int NOT NULL COMMENT PARENTID int DEFAULT NULL COMMENT TASKSEQ varchar COLLATE utf mb generalci NOT NULL COMMENT TASKNAME varchar COLLATE utf mb generalci DEFAULT NULL COMMENT STATUS char COLLATE utf mb generalci NOT NULL DEFAULT N COMMENT TASKPARAM json DEFAULT NULL COMMENT EXECTIME datetime DEFAULT NULL COMMENT FINISHTIME datetime DEFAULT NULL COMMENT COST int DEFAULT NULL COMMENT MSG text COLLATE utf mb generalci DEFAULT NULL COMMENT PRIMARY KEY INSTID KEY INDEXTASKID TASKID KEY INDEXTASKEXECTIME EXECTIME ENGINEInnoDB DEFAULT CHARSETutf mb COLLATEutf mb generalci AUTOINCREMENT explain UPDATE SYSTASKINST SET TASKNAME WHERE INSTID explain UPDATE SYSTASKINST SET TASKNAME WHERE INSTID What did you expect to see They can all use primary key What did you see instead The first can use primary key PointGet root tablesystaskinst handle The other can not TableReader root dataTableScan TableScan cop tablesystaskinst range keep orderfalse statspseudo What version of TiDB are you using tidbserver V or run select tidbversion on TiDB Thank you for contributing to TiDB Please read TiDBs CONTRIBUTING document BEFORE filing this PR What problem does this PR solve add issue link with summary if exists Its a fix for the precommit script It fixes the path for a goword tools What is changed and how it works make goword builds it into toolsbingoword But precommit script tries to find it in PATH only Without the fix bash git commit Checking for files that need gofmt OK Checking for files that need goword githooksprecommit line goword command not found OK with the fix bash git commit Checking for files that need gofmt OK Checking for files that need goword OK of the fail case bash git commit Checking for files that need gofmt OK Checking for files that need goword ERROR Some files may have spelling errors copy and paste the following for where fails this test toolsbingoword ddldbintegrationtestgo Aborting commit Thank you for contributing to TiDB Please read TiDBs CONTRIBUTING document BEFORE filing this PR What problem does this PR solve add issue link with summary if exists Fix wrong behavior when ENUM and SET column meet Aggregation as Cherrypick bf e from to release What is changed and how it works Add firstRow Enum the firstrow executor for ENUM Add firstRow Set the firstrow executor for SET Check List REMOVE the items that are not applicable Tests At least one of them must be included Unit test Manual test add detailed scripts or steps below sql mysql create table ta enuma b Query OK rows affected sec mysql insert into t valuesa b Query OK rows affected sec Records Duplicates Warnings mysql select casta as signed from select a from t group by a t casta as signed rows in set sec mysql create table t f seta b c Query OK rows affected sec mysql insert into t valuesa b abc Query OK rows affected sec mysql select castf as signed from select f from t group by f t castf as signed rows in set sec What problem does this PR solve add issue link with summary if exists Better default configuration What is changed and how it works When the binlog is enabled the txntotalsizelimit value should not be too large See also Check List REMOVE the items that are not applicable Tests At least one of them must be included No code Thank you for contributing to TiDB Please read TiDBs CONTRIBUTING document BEFORE filing this PR What problem does this PR solve add issue link with summary if exists Add metricsummary table to query all summary metrics This table can quickly help User to find abnormal metrics between two different times eg sql query all metric in specified time range select from METRICSUMMARY where time and time order by SUMVALUE desc METRICNAME TIME SUMVALUE AVGVALUE MINVALUE MAXVALUE pdschedulerstorestatus e e pdclusterstatus e e e heapmemusage pdschedulerconfig pdschedulefilter pdcheckereventcount pdbalanceschedulerstatus pdserveretcdstate pdschedulerbalanceleader tidbgcconfig pdregionsyncerstatus goroutinescount qpsideal kvwritesize compare different time range metrics and order by ratio select t sumvalue t sumvalue as ratio t t from metricsummary as t join metricsummary as t where t metricname t metricname and t time and t time and t time and t time order by ratio desc ratio METRICNAME TIME SUMVALUE AVGVALUE MINVALUE MAXVALUE METRICNAME TIME SUMVALUE AVGVALUE MINVALUE MAXVALUE etcdwalfsyncduration etcdwalfsyncduration etcdwalfsyncduration etcdwalfsyncduration parseduration parseduration compileduration compileduration pdclientcmdduration pdclientcmdduration pdclientcmdduration pdclientcmdduration distsqlexecutionduration distsqlexecutionduration tidbcopduration tidbcopduration etcdwalfsyncduration etcdwalfsyncduration compileduration compileduration distsqlexecutionduration distsqlexecutionduration tidbcopduration tidbcopduration parseduration parseduration loadschemaops loadschemaops pdgrpccompletedcommandsduration pdgrpccompletedcommandsduration pdgrpccompletedcommandsduration pdgrpccompletedcommandsduration queryduration queryduration pdschedulerregionheartbeat pdschedulerregionheartbeat qpsideal qpsideal pdclientcmdduration pdclientcmdduration pdhandletransactionsrate pdhandletransactionsrate tidbcopduration tidbcopduration distsqlexecutionduration distsqlexecutionduration gogccpuusage e e gogccpuusage e e What is changed and how it works Check List REMOVE the items that are not applicable Tests At least one of them must be included Manual test add detailed scripts or steps below 