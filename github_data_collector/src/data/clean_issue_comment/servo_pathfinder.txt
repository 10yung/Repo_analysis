The current D support has three main problems Retiling every frame on CPU is too slow for most applications Clipping Bezier curves to a D space is slow and has precision problems Only flat planes are supported Similar to what we did in WebRender we can have a separate layer on top that provides tiled D support That project now exists in its early stages After doing this we can remove the D support from Pathfinder and move it over to the virtex project To avoid regressing any functionality this should not be done until virtex is as easy to use and wellsupported as Pathfinder is The relevant function is PFCanvasFontContextCreateWithFonts which takes a pointer to an array of FKHandleRefs but there is no way to create an FKHandleRef Not sure what could be causing this but Im getting the following error on cargo build It seems to have been introduced in c cd b b e ff f be d d ae error E type annotations needed Usersjavednissarcargoregistrysrcgithubcom ecc db ec metal srclibrs msgsend self release cannot infer type consider giving result a type note this error originates in a macro outside of the current crate in Nightly builds run with Z externalmacrobacktrace for more info This implements GLOW GL on Whatever implementation of the device abstraction It is a very close copy of the GL implementation This abstraction can be used in multiple environments Open GL OpenGL ES and WebGL and avoids targetspecific code The abstraction can be used with wasm unknownunknown websys stdweb and natively I wrote this to enable limited WebGL wasm unknownunknown support This also makes minor changes to shaders so that they work in WebGL and implements an example that works both in web browsers and natively via SDL The attached SVG file causes a panic when loaded in the native demo app Tested on commit d d stresssvgzip zipped so that github would accept the upload Backtrace Oh noez Panic Message index out of bounds the len is but the index is Location renderersrctilesrs Run with RUSTBACKTRACEfull to include source snippets BACKTRACE post panic frames hidden corepanickingpanicboundscheckhf c c cc d ca at srclibcorepanickingrs pathfinderrenderertilesTilergeneratetileshfc b f at unknown source file pathfinderrendererbuilderSceneBuilderbuildpathhce e e b d c at unknown source file rayoniterplumbingProducerfoldwithh fa b f b a at unknown source file rayoniterplumbingbridgeproducerconsumerhelperh dbadf bd d at unknown source file stdpanickingtrydocallh c c ab f be at unknown source file rustmaybecatchpanic at srclibpanicunwindlibrs rayoncorejobStackJobLFR as rayoncorejobJobexecuteh adf b ae ef bc at unknown source file rayoncoreregistryWorkerThreadwaituntilcoldh a f fb at unknown source file rayoncoreregistrymainlooph a d a fb at unknown source file stdpanickingtrydocallhdc fbb at unknown source file rustmaybecatchpanic at srclibpanicunwindlibrs coreopsfunctionFnOncecalloncevtableshimh e e cd b c fd at unknown source file allocboxedBoxF as coreopsfunctionFnOnceAcallonceh b aefb fd at rustc e bb e fc caa a e a ca d srcliballocboxedrs allocboxedBoxF as coreopsfunctionFnOnceAcallonceh f dbcdaa fef at rustc e bb e fc caa a e a ca d srcliballocboxedrs stdsyscommonthreadstartthreadh a c cb d at srclibstdsyscommonthreadrs stdsysunixthreadThreadnewthreadstarth c ae d at srclibstdsysunixthreadrs startthread at unknown source file clone at unknown source file unknown at unknown source file Oh noez Panic Message called Resultunwrap on an Err value RecvError Location srclibcoreresultrs Run with RUSTBACKTRACEfull to include source snippets BACKTRACE post panic frames hidden demomainh b c ae ba at unknown source file stdrtlangstartclosurehc bed e at unknown source file stdrtlangstartinternalclosureh e c c a at srclibstdrtrs stdpanickingtrydocallh ccd dc eaa at srclibstdpanickingrs rustmaybecatchpanic at srclibpanicunwindlibrs stdpanickingtryhc e ee ee f at srclibstdpanickingrs stdpaniccatchunwindh dfc c aee at srclibstdpanicrs stdrtlangstartinternalhea b a afe at srclibstdrtrs main at unknown source file libcstartmain at unknown source file start at unknown source file unknown at unknown source file When opening the following file in the demo app it consumes Gb RAM I had to kill it because it has exhausted both my RAM and swap so I dont know if it will render successfully if given enough memory Rendering the same file with resvg and cairo backend takes only Mb RAM Tested on commit d d bf ba e bcb c ed df e I ran sudo apt install libgtk dev libsdl dev cd demonative RUSTFLAGSC targetcpunative cargo run release bin demo I found that libgtk dev was necessary Also I added bin demo because the instructions from READMEmd result in error cargo run could not determine which binary to run Use the bin option to specify a binary or the defaultrun manifest key The program started then crashed GDB output Starting program homeadDownloadspathfindermastertargetreleasedemo Thread demo received signal SIGILL Illegal instruction gdb bt x db in corecorearchx avx mmsrlvepi x db c in ZN pathfinderrenderer builder LTimplu pathfinderrenderergpudataBuiltObjectGT addfill hb cc b cae Ellvm x db e in pathfinderrendererbuilderimpl pathfinderrenderergpudataBuiltObjectgeneratefillprimitivesforline x daef in pathfinderrenderertilesActiveEdgeprocess x da f in pathfinderrenderertilesprocessactivesegment x da c in pathfinderrenderertilesTilergeneratetiles x d dab in pathfinderrendererbuilderSceneBuilderbuildpath x afa in rayoniterplumbingProducerfoldwith x d c in rayoniterplumbingbridgeproducerconsumerhelper My system doesnt support AVX Its an Ivy Bridge mobile CPU If detection is not yet implemented then dont worry about it If detection is already implemented it may be the VM interfering I have a minimal test put together When creating the FilesystemResourceLoader this panic occurs thread main panicked at No suitable resources directory found C Users adamn cargo git checkouts pathfinderf bd e aa f f ed gpu src resourcesrs note run with RUSTBACKTRACE environment variable to display a backtrace Based on the code for locate this looks in the current directory and all of its parents for a resources directory from which to load shaders textures etc This clearly works well intree but it will be problematic to run all of my tests from within a vendored pathfinder directory as Id prefer to use upstream git revisions in Cargotoml instead of a local checkout I suspect that this search strategy will present an obstacle to publishing to cratesio Not trying to throw stones yall are definitely aware of limitations here Do you have a plan for handling this in the future especially wrt packaging apps which use pathfinder If the resources are small and used by most pathfinder dependents Id perhaps be interested in an option to includebytes the resources Not sure whether thats feasible EDIT On a reread it occurs to me that I forgot to phrase the followup question or should I just implement the trait myself preubuntu with nvidia GT RUSTBACKTRACE RUSTFLAGS quotC targetcpunative quot cargo run bin canvasminimal font color E A b Finishedbfont dev unoptimized debuginfo targets in s font color E A b Runningbfont targetdebugcanvasminimal thread aposmain apos panicked at aposcalled Resultunwrap on an Err value IoOs code kind NotFound message quotNo such file or directory quot apos srclibcoreresultrs stack backtrace stdsysunixbacktracetracingimpunwindbacktrace at srclibstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdsyscommonbacktracers at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingcontinuepanicfmt at srclibstdpanickingrs rustbeginunwind at srclibstdpanickingrs corepanickingpanicfmt at srclibcorepanickingrs coreresultunwrapfailed at rustca f df fbb b f caaad f a f ea csrclibcoremacrosrs coreresultResult ltTE gtunwrap at rustca f df fbb b f caaad f a f ea csrclibcoreresultrs fontkitsourceSourceselectdescriptionsinfamily at homeusercargoregistrysrcgithubcom ecc db ec fontkit srcsourcers fontkitsourceSourceselectbestmatch at homeusercargoregistrysrcgithubcom ecc db ec fontkit srcsourcers pathfindercanvastextCanvasFontContextnew at canvassrctextrs pathfindercanvastextCanvasFontContextfromsystemsource at canvassrctextrs canvasminimalmain at examplescanvasminimalsrcmainrs stdrtlangstartclosure at rustca f df fbb b f caaad f a f ea csrclibstdrtrs stdpanickingtrydocall at srclibstdrtrs at srclibstdpanickingrs rustmaybecatchpanic at srclibpanicunwindlibrs stdrtlangstartinternal at srclibstdpanickingrs at srclibstdpanicrs at srclibstdrtrs stdrtlangstart at rustca f df fbb b f caaad f a f ea csrclibstdrtrs main libcstartmain startpre I was just auditing where we fallback on drawing text in webrender and I found this extremely obscure feature that I disabled years ago and forgot about Basically textcombineupright is used to draw arabic numbers horizontally in vertical text with the specifically interesting property of if the text would overflow the column squish it to fit Simple HTML page demonstrating this datatexthtmlhtmlheadmeta charsetutf headbody stylefontfamily sansserif width divdiv stylewritingmodeverticalrlE BDA E A BDspan styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall spanE BDA E A BDdivdivbodyhtml html head meta charsetutf head body stylefontfamily sansserif width div div stylewritingmodeverticalrl span styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall spanspan styletextcombineuprightall span div div body html textcombineupright Its possible we could implement this natively in WR now in a similar way to gecko wrap everything in a contextframe with a horizontal scale transform to just squish everything Havent tried it since this is a truly niche thing and its not a big deal to fallback on Just thought this would be interesting to toss your way as an interesting text rendering usecase 