New syntax in clojure Also remove a println leftover from debug This makes life easier when dealing with query results as it allows them to be extracted without knowing the types in advance This makes use from clojure easier Returning standard data structures and types instead commented on elsewhere is something that I think is also worth a look I would be interested in helping out with this project so I would be happy to chat sometime Needs a review regarding safetycorrectness I am pretty new to rust JNA Move from using ghpimport to using a travis deploy stage to commit documentation updates Add Jazzy installation and swiftdoc generation to document building script Commit generated documentation to a new branch ghpagesapidocs The existing ghpages branch was incorrectly formatted and it was easier to just create a new branch Remove existing cargodoc script Ensure build phase only executes on the master branch TODO Point GithubPages to ghpagesapidocs branch rather than master This is done directly in settings and so will not form part of this PR It needs to be done once this patch has landed Additionally theres no way to execute a transaction or query I think although I havent looked as hard directly from EDN This doesnt ever unescape stringspecialchars and just assumes theyre the same as without the backslash which is only true for and escapes This document highlights many of the issues and concerns Some work to measure the size of the database when storing history is in For my placessqlite k places k visits it gets around MB larger Its worth noting that disk usage was one of the primary concerns reported by user research for Fenix although its not clear if this size increase relative to places is the kind of thing that would make a dent relative to stuff like caches and the like A very informal poll of some friends of mine found that Fennec typically uses around MB of space app data another MB isnt a trivial increase but doesnt substantially change where we are in terms of app size Some bugs which may help suggested by rnewman Pack the various flag columns into one TINYINT appears to give a benefit which is probably not substantial enough to justify the effort IMO implement something like places urlhash automatically If this could keep strings values out of the aevteavt indices it could have a huge benefit Interning keywords Our test schema didnt use these and Im not sure what the actual use case for them is over dbtyperef to a dbident mykeyword so this doesnt seem like a high priority Store the data canonically in a sql table instead of in datoms This is interesting but seems like a lot of work I think something like sqlites zipvfs extension would likely help as the databases compress well but have not tried it Implementing it ourselves is likely beyond the scope of this effort I took a look at the effort required and it wasnt exactly trivial Additionally whatever we do would need to somehow integrate with sqlcipher I also took a look at bolting compression into sqlcipher before the encryption but the fact that this makes the block output a variable size seemed to make this problematic Other notes Storing strings as fulltext and using the compressuncompress options of FTS did not help since the strings in each column are relatively small Additionally the performance overhead here was substantial even for a very fast compressor LZ Most string data seems to be duplicated times in datoms timelinedtransactions and in the indices idxdatomseavt idxdatomsaevt During RustConf rnewman suggested that ultimately mentat will likely not want to use sqlite and instead want to read datoms chunks directly out of something like RKV These chunks could be compressed more easily This seems out of scope as it would be a massive change to mentat but is worth writing down Additional concerns exist around the fact that this problem may be exacerbated by materialized views perhaps will help or prevent this Figured Id throw up a PR for this old branch Its almost certainly bitrotted but better in a PR than in a branch This adds a lot of boilerplate which could be simplified by macros I was planning on cleaning this up before pushing it but here it is Caveat I havent tested this in versions of rust other than whatever i happen to be using by default right now I did try to make the changes compatible with eg ref noise in matches but that was just to minimize future work and I might not have been thorough here