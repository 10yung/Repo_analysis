Compiling the kernels in the examples directory using xargo rustc manifestpath kernelCargotoml release target nvptx nvidiacuda emitasm I get the following error during the compilation of core error E only SendSync traits can be used as additional traits in a trait object C Users Reiner cargo git checkouts core c e b e anyrs impl fmtDebug for Any Send nonSendSync additional trait error E only SendSync traits can be used as additional traits in a trait object C Users Reiner cargo git checkouts core c e b e anyrs impl AnySend nonSendSync additional trait error aborting due to previous errors Any Idea what I am doing wrong I would wait till the next stdsimd release but at least with its master branch it is already possible to build nvptx on top of it kimockbgator kernel cat Xargotoml dependenciescore git kimockbgator kernel xargo rustc target nvptx nvidiacuda emitasm Compiling kernel v filehomekimockbkernel bdver is not a recognized processor for this target ignoring processor bdver is not a recognized processor for this target ignoring processor bdver is not a recognized processor for this target ignoring processor bdver is not a recognized processor for this target ignoring processor bdver is not a recognized processor for this target ignoring processor bdver is not a recognized processor for this target ignoring processor error E cant find crate for core note the nvptx nvidiacuda target may not be installed error aborting due to previous error error Could not compile kernel What am I doing wrong here It almost seems like xargo isnt picking up the crate URL Open issues etc Currently the alpha channel from the input is not used anywhere but its still sent to the GPU We could either discard the alpha when the input is loaded or actually use the alpha channel and output a grayscale image with alpha The conversion on the CPU is singlethreaded making the comparison unfair This isnt mentioned in the output of the example nor in its section in the readme I noticed that youre manually calling wrapping for arithmetic operations in the PTX kernels Shouldnt overflow wrap around already Note that I also noticed that it appears the intrinsics use signed for these variables for which overflow would be undefined in C although defined as wraparound in RFC for Rust but are defined as using unsigned defined as wraparound in both C and Rust in the CUDA programming manual I filed a ticket in that library about this Feel free to close the ticket if it isnt relevant I dont typically do GPGPU programming and this was the easiest way for me to provide feedback