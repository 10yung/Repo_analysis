The encoders and decoders do base encoding of the binary data The blog post says that this is so that only alphanumeric data is passed to the QR encoder I assume this is because QR has an alphanumeric mode to more efficiently encode alphanumeric data However base encoding doesnt help for this because the QR alphanumeric encoding doesnt encode eg lower case letters only AZ and space I suggest to skip the base step to reduce the data size and improve performance In there are various fountain codes that you could test to see which is more efficient Binary Luby x Mersenne used by current versions of txqr Online Raptor the best according to Wikipedia And also there are other newer algorithms to test Adding this to and associated mobile apps would be useful Hydrus is written in Python BooruNav AnimeBoxes and Nori are on Android Mignori is on iOS you can use FLutter and talk from flutter to golang gomobile Then you eliminate all swift Here is one example there are a few others out there Showing a Camera view to scan the QR code with flutter is quite easy There are ways to increase the data transmission rate of TxQR by using color Currently both JABCode and HiQ have released sources for such items and OpenCV is considering to add them to their repo JABCode HiQ It would be nice if TxQR generates files that are shareable as a GIF APNG andor WebP for image sharing websites like twitter Imgur and more