I notice that sometime between version alpha and some parts of the event loop started reporting physical positions instead of logical ones CursorMovedposition and Touchlocation with differing types this seems okay Conversely MouseScrollDeltaPixelDelta still uses a LogicalPostiion didnt check whether there are others Im actually fine with this either way converting is easy and the types catch any errors it just seems like an oversight being inconsistent Additionally my lib mostly uses physical positions internally to avoid fractional positions or limited GUI scaling and using a physical position here would reduce the number of places the lib needs to track the DPI factor Unable to run window example on Windows Windows Settings Personalization colorsLight cargo run example window Finished dev unoptimized debuginfo targets in s Running target debug examples windowexe thread main panicked at assertion failed left right left right src platformimpl windows darkmoders stack backtrace x ff b a backtracebacktracetraceunsynchronized at C Users VssAdministrator cargo registry src githubcom ecc db ec backtrace src backtrace modrs x ff b a stdsyscommonbacktraceprintfmt at rustc e aae f a ffa a ac f c cf src libstd syscommon backtracers x ff b a stdsyscommonbacktraceprintimplfmt at rustc e aae f a ffa a ac f c cf src libstd syscommon backtracers x ff b ea b corefmtwrite at rustc e aae f a ffa a ac f c cf src libcore fmt modrs x ff b e stdioWritewritefmtstdsyswindowsstdioStderr at rustc e aae f a ffa a ac f c cf src libstd io modrs x ff b c stdsyscommonbacktraceprint at rustc e aae f a ffa a ac f c cf src libstd syscommon backtracers x ff b c stdsyscommonbacktraceprint at rustc e aae f a ffa a ac f c cf src libstd syscommon backtracers x ff b c stdpanickingdefaulthookclosure at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b c c stdpanickingdefaulthook at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b d c stdpanickingrustpanicwithhook at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b ccf stdpanickingcontinuepanicfmt at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b cc stdpanickingbeginpanicfmt at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b dc e winitplatformimplplatformdarkmodesetdarkmodeforwindow at E Projects Rust winit src platformimpl windows darkmoders x ff b dc winitplatformimplplatformdarkmodetrydarkmode at E Projects Rust winit src platformimpl windows darkmoders x ff b ddd winitplatformimplplatformwindowinit at E Projects Rust winit src platformimpl windows windowrs x ff b c winitplatformimplplatformwindowWindownew at E Projects Rust winit src platformimpl windows windowrs x ff b e e winitwindowWindowBuilderbuild at E Projects Rust winit src windowrs x ff b c e windowmain at E Projects Rust winit examples windowrs x ff b a f stdrtlangstartclosure at rustc e aae f a ffa a ac f c cf src libstd rtrs x ff b cb stdrtlangstartinternalclosure at rustc e aae f a ffa a ac f c cf src libstd rtrs x ff b cb stdpanickingtrydocallclosure i at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b faf panicunwindrustmaybecatchpanic at rustc e aae f a ffa a ac f c cf src libpanicunwind librs x ff b d b stdpanickingtry at rustc e aae f a ffa a ac f c cf src libstd panickingrs x ff b d b stdpaniccatchunwind at rustc e aae f a ffa a ac f c cf src libstd panicrs x ff b d b stdrtlangstartinternal at rustc e aae f a ffa a ac f c cf src libstd rtrs x ff b a cb stdrtlangstart at rustc e aae f a ffa a ac f c cf src libstd rtrs x ff b c c main x ff b c invokemain at d agent work s src vctools crt vcstartup src startup execommoninl x ff b c scrtcommonmainseh at d agent work s src vctools crt vcstartup src startup execommoninl x ffa f bd BaseThreadInitThunk x ffa ccce RtlUserThreadStart error process didnt exit successfully target debug examples windowexe exit code Fixing This change requires x dl crate Also I should send actual string in IME Tested on all platforms changed Compilation warnings were addressed cargo fmt has been run on this branch cargo doc builds successfully Added an entry to CHANGELOGmd if knowledge of this change could be valuable to users Updated documentation to reflect any userfacing changes including notes of platformspecific behavior Created or updated an example program if it would help users understand this functionality Updated feature matrix if new features were added or implemented Some video drivers could set display metrics to odd values which can result in extra large scale factors eg winit is sending for k screen on nvidia binary drivers so lets just drop them to prevent clients from using them The value was picked because the DPR for k inch is x Tested on all platforms changed x Compilation warnings were addressed x cargo fmt has been run on this branch x cargo doc builds successfully x Added an entry to CHANGELOGmd if knowledge of this change could be valuable to users Updated documentation to reflect any userfacing changes including notes of platformspecific behavior Created or updated an example program if it would help users understand this functionality Updated feature matrix if new features were added or implemented This PR is more of a proposal The original issue was here as you can see in a log DPR from winit is which is literally insane I see options on how to fix such issues Make winit compute DPI only if a randr value in use otherwise return just all the time Qt is probably doing something similar IIRC Just try to ignore odd values this PR is doing it The proposed change is a breaking change so I guess option should fix some problems right now however I feel like we should also implement at some point to be more native since auto DPI adjustments arent something common for X Right now clippystable branch on winit X Wayland backends produces lines of warningserrors so I think it makes sense to at least take a look on them since most of the time they actually make sense Hi Since it is not possible to create multiple windows on Windows It can be reproduced with multiwindow example The single window example works fine though PS C Users tester Documents GitHub winit ENVRUSTBACKTRACE full PS C Users tester Documents GitHub winit cargo run example multiwindow Finished dev unoptimized debuginfo targets in s Running target debug examples multiwindowexe thread main panicked at already mutably borrowed BorrowError src libcore resultrs stack backtrace x ff b f c backtracebacktracetraceunsynchronized at C Users VssAdministrator cargo registry src githubcom ecc db ec backtrace src backtrace modrs x ff b f c stdsyscommonbacktraceprintfmt at rustc ea cb f a c e f src libstd syscommon backtracers x ff b f c stdsyscommonbacktraceprintimplfmt at rustc ea cb f a c e f src libstd syscommon backtracers x ff b f adfb corefmtwrite at rustc ea cb f a c e f src libcore fmt modrs x ff b f a stdioWritewritefmtstdsyswindowsstdioStderr at rustc ea cb f a c e f src libstd io modrs x ff b f stdsyscommonbacktraceprint at rustc ea cb f a c e f src libstd syscommon backtracers x ff b f stdsyscommonbacktraceprint at rustc ea cb f a c e f src libstd syscommon backtracers x ff b f stdpanickingdefaulthookclosure at rustc ea cb f a c e f src libstd panickingrs x ff b f a stdpanickingdefaulthook at rustc ea cb f a c e f src libstd panickingrs x ff b f b stdpanickingrustpanicwithhook at rustc ea cb f a c e f src libstd panickingrs x ff b f d stdpanickingcontinuepanicfmt at rustc ea cb f a c e f src libstd panickingrs x ff b f c stdpanickingrustbeginpanic at rustc ea cb f a c e f src libstd panickingrs x ff b f corepanickingpanicfmt at rustc ea cb f a c e f src libcore panickingrs x ff b f f coreresultunwrapfailed at rustc ea cb f a c e f src libcore resultrs x ff b f aaf coreresultResultcorecellRefcoreoptionOptionwinitplatformimplplatformeventlooprunnerEventLoopRunner corecellBorrowErrorexpectcorecellRefcoreoptionOptionwinitplatformimplplatformeventlooprunner at rustc ea cb f a c e f src libcore resultrs x ff b ef c corecellRefCellcoreoptionOptionwinitplatformimplplatformeventlooprunnerEventLoopRunnerborrowcoreoptionOptionwinitplatformimplplatformeventlooprunnerEventLoopRunner at rustc ea cb f a c e f src libcore cellrs x ff b ef winitplatformimplplatformeventlooprunnerELRSharedsendevent at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b e b winitplatformimplplatformeventloopSubclassInputsendevent at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b e ec winitplatformimplplatformeventlooppublicwindowcallback at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ffe b a DefSubclassProc x ffe b DefSubclassProc x ffe DispatchMessageW x ffe c DispatchMessageW x ffe a EnumChildWindows x ffe ea KiUserCallbackDispatcher x ffe ed NtUserMessageCall x ffe b GetWindowTextW x ffe GetWindowTextW x ffe DispatchMessageW x ffe c DispatchMessageW x ffe a EnumChildWindows x ffe ea KiUserCallbackDispatcher x ffe ed b NtUserShowWindow x ff b efcf winitplatformimplplatformwindowstateWindowFlagsapplydiff at C Users tester Documents GitHub winit src platformimpl windows windowstaters x ff b e f winitplatformimplplatformwindowstateWindowStatesetwindowflagsclosure at C Users tester Documents GitHub winit src platformimpl windows windowstaters x ff b e f winitplatformimplplatformwindowimplsetvisibleclosure at C Users tester Documents GitHub winit src platformimpl windows windowrs x ff b e a b winitplatformimplplatformeventloopEventLoopThreadExecutorexecuteinthreadclosure at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b e winitplatformimplplatformwindowWindowsetvisible at C Users tester Documents GitHub winit src platformimpl windows windowrs x ff b e ef winitplatformimplplatformwindowinit at C Users tester Documents GitHub winit src platformimpl windows windowrs x ff b e f winitplatformimplplatformwindowWindownew at C Users tester Documents GitHub winit src platformimpl windows windowrs x ff b e winitwindowWindowBuilderbuild at C Users tester Documents GitHub winit src windowrs x ff b e a winitwindowWindownew at C Users tester Documents GitHub winit src windowrs x ff b e b b multiwindowmainclosure at C Users tester Documents GitHub winit examples multiwindowrs x ff b e winitplatformimplplatformeventloopimplrunreturnclosureclosure at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b f allocboxedimplcallmutwiniteventEvent mut winiteventloopControlFlowFnMutwiniteventEvent mut winiteventloopControlFlow at rustc ea cb f a c e f src liballoc boxedrs x ff b efadc winitplatformimplplatformeventlooprunnerimplcalleventhandlerclosure at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b f stdpanicimplcallonceclosure at rustc ea cb f a c e f src libstd panicrs x ff b f e stdpanickingtrydocallstdpanicAssertUnwindSafeclosure at rustc ea cb f a c e f src libstd panickingrs x ff b f bcd panicunwindrustmaybecatchpanic at rustc ea cb f a c e f src libpanicunwind librs x ff b f c stdpanickingtrystdpanicAssertUnwindSafeclosure at rustc ea cb f a c e f src libstd panickingrs x ff b f d stdpaniccatchunwindstdpanicAssertUnwindSafeclosure at rustc ea cb f a c e f src libstd panicrs x ff b efab winitplatformimplplatformeventlooprunnerEventLoopRunnercalleventhandler at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b efa winitplatformimplplatformeventlooprunnerEventLoopRunnerprocessevent at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b ef d b winitplatformimplplatformeventlooprunnerELRSharedsendeventunbuffered at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b ef winitplatformimplplatformeventlooprunnerELRSharedsendevent at C Users tester Documents GitHub winit src platformimpl windows eventloop runnerrs x ff b e b winitplatformimplplatformeventloopSubclassInputsendevent at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b e winitplatformimplplatformeventlooppublicwindowcallback at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ffe b a DefSubclassProc x ffe b DefSubclassProc x ffe DispatchMessageW x ffe f DispatchMessageW x ff b e d winitplatformimplplatformeventloopEventLooprunreturnclosure at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b e e winitplatformimplplatformeventloopEventLooprunclosure at C Users tester Documents GitHub winit src platformimpl windows eventlooprs x ff b e winiteventloopEventLooprunclosure at C Users tester Documents GitHub winit src eventlooprs x ff b e f multiwindowmain at C Users tester Documents GitHub winit examples multiwindowrs x ff b e de stdrtlangstartclosure at rustc ea cb f a c e f src libstd rtrs x ff b f b stdrtlangstartinternalclosure at rustc ea cb f a c e f src libstd rtrs x ff b f b stdpanickingtrydocallclosure i at rustc ea cb f a c e f src libstd panickingrs x ff b f bcd panicunwindrustmaybecatchpanic at rustc ea cb f a c e f src libpanicunwind librs x ff b f f stdpanickingtry at rustc ea cb f a c e f src libstd panickingrs x ff b f f stdpaniccatchunwind at rustc ea cb f a c e f src libstd panicrs x ff b f f stdrtlangstartinternal at rustc ea cb f a c e f src libstd rtrs x ff b e de b stdrtlangstart at rustc ea cb f a c e f src libstd rtrs x ff b e main x ff b f ed invokemain at d agent work s src vctools crt vcstartup src startup execommoninl x ff b f ed scrtcommonmainseh at d agent work s src vctools crt vcstartup src startup execommoninl x ffe BaseThreadInitThunk x ffe e a RtlUserThreadStart error process didnt exit successfully target debug examples multiwindowexe exit code xc STATUSSTACKBUFFEROVERRUN Would it be possible to provide glutin with the initial background color to which a Glutin window can be set The feature can be very useful to handle the perceived performance of startup time where on some platforms due to GPU problems the window starts with an ugly white color then renders Tested on all platforms changed x Compilation warnings were addressed x cargo fmt has been run on this branch cargo doc builds successfully Added an entry to CHANGELOGmd if knowledge of this change could be valuable to users Updated documentation to reflect any userfacing changes including notes of platformspecific behavior Created or updated an example program if it would help users understand this functionality Updated feature matrix if new features were added or implemented Fixes Im wondering if it would make sense to add tab support to this projects scope I think tabs at least Win and OSX are tightly coupled to the concept of windows and it would be a great addition as first class citizen of Winit If interested I can definitely fork and experiment with the idea I know at least on Cocoa tabs are straight forward to implement It seems like on macOS not all modifier changes cause a ModifiersChanged event regardless of focus This has been initially reported to Alacritty in Looking at the output of the event log there seems to be a key event with modifiers LOGO attached without any prior ModifiersChanged event The Window is in full focus at this point and has not had any modifier or focus changes since then The following log contains only the relevant information full log can be found in the issue It has been filtered using grep E event KeyboardInputReceivedCharacterFocusedDeviceEventModifiersChanged glutin event WindowEvent windowid WindowIdId event Focusedtrue glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeSemicolon modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacter glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeSemicolon modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeC modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacterc glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeC modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeL modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacterl glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacter u f glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacter u f glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacter u f glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeBack modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeL modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeV modifiers LOGO issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacterv glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeV modifiers LOGO issynthetic false glutin event DeviceEvent deviceid DeviceIdDeviceId event ModifiersChangedempty glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeLeft modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Released virtualkeycode SomeLeft modifiers empty issynthetic false glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeLWin modifiers LOGO issynthetic false glutin event DeviceEvent deviceid DeviceIdDeviceId event ModifiersChangedLOGO glutin event WindowEvent windowid WindowIdId event KeyboardInput deviceid DeviceIdDeviceId input KeyboardInput scancode state Pressed virtualkeycode SomeW modifiers LOGO issynthetic false glutin event WindowEvent windowid WindowIdId event ReceivedCharacterw There are no synthetic events sent so that shouldnt be an issue either theyre not implemented on macOS anyways afaik What surprised me a bit was that there were only two DeviceEvents since Im used to a lot more on Linux but that might be normal