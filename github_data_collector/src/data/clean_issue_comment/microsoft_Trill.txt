 Consider open sourcing the Kusto Query Language to Trill logic convertermapping library Thoughts opinions comments cybertyche In conjunction with the CRA team who developed Quill consider releasing a Distributed Trill implementation using the CRA platform Requirement Create an analogue to IQueryable or IQbservable for IStreamable That means having a new interface IQStreamable and a provider class IStreamProvider that can build up an expression in LINQ and then evaluate it later The expression is inspectible and manipulable just like other LINQ expressions Requirement Ensure that the provider can stand independently of the engine Not only would this allow someone to implement an engine to the Trill API with different characteristics but it would also allow the API implementation to evolve independently of the API if it needs to Biggest open question Do we precisely mirror the existing IStreamable API or do we instead try to implement API with lessons learned For the most part we are incredibly proud of our API However there are a few places where we would make changes if we could Those places are Making IQStreamable have one type parameter instead of two Consequently also having a groupby syntax that is actually identical to IQueryable instead of GroupApply No longer requiring QueryContainer to register output only input or class Hello Id like to experiment with a Trill lib a little bit and was wondering what is the best approach for use case where there is a single source stream for example trading data like individual trades and many queries for such source stream where first query would be Where that would narrow down trades to individual instruments In a writing queries guide Ive read about multicast that is necessary for such use case but when looking at the source code Ive also found about Publish Im not really familiar with rx so that is a little bit confusing for me when to use Multicast vs Publish what would you suggest Or perhaps its better to create separate streams instead of single one for each Where so then multicast is not necessary Do you know any guidelines lessons learned about that Id love to read more but couldnt find anything in docs Ive also seen mentions about partitioning in the source code is this only related to group operator or something that could also be useful for my use case Ill be setting low batch size maybe less are there any settings that I could tweak for very near realtime queries to get best perf sacrificing throughput but getting lowest latency possible Thanks a lot Support for Apache Arrow which is a crosslanguage development platform for inmemory data It specifies a standardized languageindependent columnar memory format for flat and hierarchical data organized for efficient analytic operations on modern hardware It also provides computational libraries and zerocopy streaming messaging and interprocess communication Apache Arrow is backed by key developers of major open source projects including Calcite Cassandra Drill Hadoop HBase Ibis Impala Kudu Pandas Parquet Phoenix Spark and Storm making it the defacto standard for columnar inmemory analytics Related issues Consider adding support for Apache Beams unified model for defining both batch and streaming dataparallel processing pipelines Consider adding support for SystemThreadingChannels C IAsyncEnumerable