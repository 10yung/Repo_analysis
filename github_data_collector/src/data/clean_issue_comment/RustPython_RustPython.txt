 PyPy uses a totally different approach to object layout than CPython which saves a huge amount of memory on the overhead of objects when there are many objects with the same layout same attributes I havent seen any information about whether there is a slight performance penalty for the added indirection although I believe the PyPy JIT is able to optimize it away Im also not sure if it contributes to making native code extensions more difficult Its a big enough savings to warrant a serious consideration though Details here based on I will rebase this one after merging but basically work is done My plan I had in didnt work out because I failed to account for PyClassRef and RcPyObjectPyClass not being the same size due to the former being a trait object so I went with using raw trait object manipulation cc silmeth C implementation of timing safe compare that I used as reference Summary A quick overview of your suggestion Suggetion from Detailed Explanation Elaborate on your suggestion in all its details Drawbacks Rationale and Alternatives What drawbacks might this solution have Why do you feel it is necessary What other options might there be to solving this problem Unresolved Questions What would you like feedback on for fleshing out your suggestion Add a new snippet asyncbrowser a mini asyncawait executor built on the browser event loop Maybe eventually turn it into a module Combine indexjs and mainjs into one to avoid the page being essentially without content while the wasm payload loads Add rppyExec and rppyExecSingle to the documentation Improve the ci testing for wasm Handle serving the demo and waiting inside python so that you can just build the demo and run pipenv run pytest without having to mess with the npm commands Deduplicate the driver fixture move it to wdriver in conftestpy I created a recipe in condaforge so that you can conda install rustpython c condaforge It works fine but usually we want to compile from source and here it bypasses that since it uses cargo Im quite a novice in Rust how can we compile from source Also the only release in GitHub is but in cratesio it is Maybe you should make a GitHub release