I found a bunch of these in libexpat Rust parsermstartElementHandler stdmemtransmuteintptrt XMLStartElementHandlerNULL as intptrt where XMLStartElementHandler is an OptionFnSig This would be much much cleaner as None assignments Im leaning towards wanting this in the transpiler so that its much cleaner transpiled code out of the box And NULL is generated as a const value so it might be easy enough to examine Hi there Ive read this article about how good C Rust is Its a nice post like it very much I am author of the Bear and scanbuild tools And would like to learn how these tools would be more useful to this project I want to understand the use cases for C Rust I got decided to improve Bear to be working on OSX so a single tool could do better than two Would be happy to implement the link command capture I just need how an entry would look like I am interested to know how you treat the compilation entries Does it matter to keep the full path of the compiler or that is replaced by one of the tools you developed What would be the ideal install process of it Is cmake is more difficult than pip Would cargo be better What would be ideal usage of a compilation database generator tool Is it desired to speed up the process by not call the real compiler But fake the output to make the build system happy Is it desired to generate entries for include files separately Thanks in advance Submitted by Lokathor via email Your need for aligned globals has come up before and the best way to get some aligned static data without making a new struct every single time is to generalize what you did with the SSEMask type rust repralign pub struct Align Tpub T static ssemask u Align u test fn aligned asserteqssemask as const as usize I like this approach we could implement it for a few common aligment values common for SSE values common for cachealigned data and maybe Hey I ran the following command on the rustybox codebase on master bash RUSTBACKTRACE c rust refactor cargo r print select target crate descmatchexpr And got the following error thread main panicked at mismatch between unexpanded and expanded ASTs usrlocalcargoregistrysrcgithubcom ecc db ec c rustrefactor srccollapsemactablers stack backtrace backtracebacktracelibunwindtrace at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs backtracebacktracetraceunsynchronized at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs stdsyscommonbacktraceprintfmt at srclibstdsyscommonbacktracers stdsyscommonbacktraceprintDisplayBacktrace as corefmtDisplayfmt at srclibstdsyscommonbacktracers corefmtwrite at srclibcorefmtmodrs stdioWritewritefmt at srclibstdiomodrs stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdsyscommonbacktraceprint at srclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at srclibstdpanickingrs stdpanickingdefaulthook at srclibstdpanickingrs rustcdriverreportice allocboxedBoxF as coreopsfunctionFnAcall at rustc d e f fe d b e e ab f srcliballocboxedrs procmacrobridgeclientimpl procmacrobridgeBridgeenterclosureclosure at rustc d e f fe d b e e ab f srclibprocmacrobridgeclientrs stdpanickingrustpanicwithhook at srclibstdpanickingrs stdpanickingbeginpanic syntaxastItem as c rustrefactorcollapsemactableCollectMacroscollectmacros c rustrefactorcollapsemactablecollectmacrosseq syntaxastItem as c rustrefactorcollapsemactableCollectMacroscollectmacros c rustrefactorcollapsemactablecollectmacrosseq syntaxastItem as c rustrefactorcollapsemactableCollectMacroscollectmacros c rustrefactorcollapsemactablecollectmacrosseq c rustrefactorcollapsemactablecollectmacroinvocations c rustrefactorcollapseCollapseInfocollect rustcinterfacequeriesimpl rustcinterfaceinterfaceCompilerenter c rustrefactorcommandDriverCommandF as c rustrefactorcommandCommandrun c rustrefactorcommandRefactorStaterun stdthreadlocalLocalKeyTwith scopedtlsScopedKeyTset syntaxwithglobals c rustrefactordriverrunrefactoring stdpanicAssertUnwindSafeF as coreopsfunctionFnOncecallonce stdpanickingtrydocall rustmaybecatchpanic at srclibpanicunwindlibrs rustcdrivercatchfatalerrors c rustrefactorlibmain c rustrefactormain stdrtlangstartclosure stdrtlangstartinternalclosure at srclibstdrtrs stdpanickingtrydocall at srclibstdpanickingrs rustmaybecatchpanic at srclibpanicunwindlibrs stdpanickingtry at srclibstdpanickingrs stdpaniccatchunwind at srclibstdpanicrs stdrtlangstartinternal at srclibstdrtrs main libcstartmain start note Some details are omitted run with RUSTBACKTRACEfull for a verbose backtrace error internal compiler error unexpected panic error Unrecognized option cargo Versions bash c rust refactor version c rustrefactor Im running this all in a docker container on macos using the following Dockerfile Dockerfile FROM rust WORKDIR usrsrc Install deps RUN apt update apt install y buildessential llvm clang libclang dev cmake libssldev pkgconfig python Install required rust nightly version RUN rustup install nightly rustup component add toolchain nightly rustfmt rustup component add toolchain nightly rustcdev Install c rust RUN LLVMCONFIGPATHusrlibllvm binllvmconfig cargo nightly install c rust Install dev tools RUN apt install y vim I just ran c rust refactor linkfuncs cargo rewritemode inplace which is an awesome command but unfortunately it also made some very wrong changes to my sources For example rust My comment assertmycondition became rust if mycondition stdrtbeginpanic assertion failed mycondition appletsapplettablesrs u u which produces an error error E use of unstable library feature libstdsysinternals used by the panic macro appletsapplettablesrs stdrtbeginpanic help add featurelibstdsysinternals to the crate attributes to enable In addition code like rust cfgfeature xzcat appymcappfacepushbbapplet name xzcat main unxz entrypoint unxzmain installloc InstallLocDIRUSRBIN needsuid SUIDSUIDDROP noexec false nofork false usage stdincludestrusagexzcat is deleted completely when the feature flag is not listed as a default This seems like subtly pernicious behavior that the authors of largescale refactoring changes could very easily miss Version of c rust Latest master e ee fe Contents of compilecommandsjson json arguments cc c marchnative stdc O zvalidatec directory sdbsrcrustisutf srczwegner file zvalidatec Contents of zvalidatec Output of c rust transpile compilecommandsjson arni rustisutf srczwegner master c rust transpile compilecommandsjson Transpiling zvalidatec zvalidatec fatal error immintrinh file not found include immintrinh error generated Error while processing sdbsrcrustisutf srczwegnerzvalidatec warning Missing child of node AstNode tag TagIfStmt children Some Some None loc SrcSpan fileid beginline begincolumn endline endcolumn typeid None rvalue LValue macroexpansions extras Exported Clang AST was invalid Check warnings above for unimplemented features sdbsrcrustisutf srczwegnerzvalidatec Wclangast warning Missing child of node AstNode tag TagIfStmt children Some Some None loc SrcSpan fileid beginline begincolumn endline endcolumn typeid None rvalue LValue macroexpansions extras Exported Clang AST was invalid Check warnings above for unimplemented features sdbsrcrustisutf srczwegnerzvalidatec Wclangast warning Missing child of node AstNode tag TagIfStmt children Some Some None loc SrcSpan fileid beginline begincolumn endline endcolumn typeid None rvalue LValue macroexpansions extras Exported Clang AST was invalid Check warnings above for unimplemented features sdbsrcrustisutf srczwegnerzvalidatec Wclangast warning Missing child of node AstNode tag TagIfStmt children Some Some None loc SrcSpan fileid beginline begincolumn endline endcolumn typeid None rvalue LValue macroexpansions extras Exported Clang AST was invalid Check warnings above for unimplemented features sdbsrcrustisutf srczwegnerzvalidatec Wclangast warning Missing child of node AstNode tag TagIfStmt children Some Some None loc SrcSpan fileid beginline begincolumn endline endcolumn typeid None rvalue LValue macroexpansions extras Exported Clang AST was invalid Check warnings above for unimplemented features sdbsrcrustisutf srczwegnerzvalidatec Wclangast error Failed to translate zvalidateutf bad condition type I think reorg is now stable enough to be turned on by default However Id like to get fixed before we do Large codebases eg python nginx trigger this bug after doing reorg c rust current transpiles NULL pointers as as mut T but it would be a bit cleaner and more rusty to instead produce stdptrnullmutT We should be able to easily transpile all translation units in parallel either in separate processes or threads Just needs to be implemented at some point