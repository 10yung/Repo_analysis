Im having trouble running pyspy inside a venv on Windows x Python It errors out with Error Failed to find python version from target process Admin privileges dont help I presume the pythonexe inside venv Scripts is not what pyspy expects so I copied over the actual EXE and DLL from the global Python folder Profiling then works but runs extremely slowly with considerable sampling lag Is this a known unsupported usecase Another argument to stop using usrbinpython that I think is useful to point out to users Using pyspy release binary either musl or gnu panics with the following panic backtrace when adding the native flag to either dump or record a PID running in a different container Without native works fine Works pyspy dump pidOTHER CONTAINER correctly shows Python stacks pyspy dump pidSAME CONTAINER native correctly shows Python native code stacks gdb attach OTHER CONTAINER shows Crash RUSTBACKTRACEfull tpyspy dump pid native Process venv binpython m staticbatchworker topicnamegkeemailshadowtest maxpullmessages maxworkers sendgridsandboxmodetrue usedatadogclienttrue usereciperulesclienttrue useproductservicetrue disablemtbetrue Python v venv binpython thread main panicked at called Optionunwrap on a None value srclibcoreoptionrs stack backtrace x c efa backtracebacktracelibunwindtraceh d cb b at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracelibunwindrs x c efa backtracebacktracetraceunsynchronizedhd f d ec a at cargoregistrysrcgithubcom ecc db ec backtrace srcbacktracemodrs x c efa stdsyscommonbacktraceprintfmth a b c at srclibstdsyscommonbacktracers x c efa stdsyscommonbacktraceprintDisplayBacktrace as corefmtDisplayfmth df d f at srclibstdsyscommonbacktracers x c a f c corefmtwriteh f f eb c at srclibcorefmtmodrs x c ece stdioWritewritefmth d ef at srclibstdiomodrs x c f fee stdsyscommonbacktraceprinth a df fa d af at srclibstdsyscommonbacktracers x c f fee stdsyscommonbacktraceprinth f b e at srclibstdsyscommonbacktracers x c f fee stdpanickingdefaulthookclosureh d a bd dd at srclibstdpanickingrs x c f ce stdpanickingdefaulthookh d a aecb efac at srclibstdpanickingrs x c f eb stdpanickingrustpanicwithhookhbe a d at srclibstdpanickingrs x c f e stdpanickingcontinuepanicfmth d dad accf at srclibstdpanickingrs x c f rustbeginunwind at srclibstdpanickingrs x c a d e corepanickingpanicfmthdeb ab at srclibcorepanickingrs x c a caa corepanickingpanichb daa c c fc at srclibcorepanickingrs x c b e c pyspypythonspyPythonSpygetstacktraceshf ae c c fe x c a ade pyspydumpprinttracesha b ff b d dc x c ce pyspyrunspycommandh e a ee x c ae pyspymainh a b d adcb x c stdrtlangstartclosurehc c c ab aa x c f stdrtlangstartinternalclosureh ea ec c fc e at srclibstdrtrs x c f stdpanickingtrydocallh c dfccc f at srclibstdpanickingrs x c fa a rustmaybecatchpanic at srclibpanicunwindlibrs x c f bcd stdpanickingtryhab b d d at srclibstdpanickingrs x c f bcd stdpaniccatchunwindhd e a bd f at srclibstdpanicrs x c f bcd stdrtlangstartinternalh bdc c d bf at srclibstdrtrs x c d main x f d e libcstartmain x c f c start x unknown Version Details pyspy version pyspy Im running this on Google Container OS instance running on a Google Kubernetes Engine cluster My pyspy process is in a privileged container the toolbox environment and Im trying to dump an unprivileged process in another container These containers are almost certainly using different library versions etc which I know sometimes causes debugging problems gdb output GDB manages to do the right thing but prints warnings warning Expected absolute pathname for libpthread in the inferior but got targetlibx linuxgnulibpthreadso warning Unable to find libthreaddb matching inferiors thread library thread debugging will not be available warning Target and debugger are in different PID namespaces thread lists and other data are likely unreliable Connect to gdbserver inside the container warning Expected absolute pathname for libpthread in the inferior but got targetlibx linuxgnulibpthreadso warning Unable to find libthreaddb matching inferiors thread library thread debugging will not be available It makes the leftheavy view confusing Is it because of the sampling method which just fetches the current line number I know about F but what if I have two classes in the same file with a method with the same name I think this tool is pretty incredible Unfortunately it has worked only sporadically in my current project and Im not sure why it worksdoesnt work My issues resemble some of the errors reported in especially the Failed to merge native and python frames message I am using pyspy version installed using pip on Centos x I am compiling several Cython extensions some of whom call each other and the commandline for the compile stage indicates debugging is enabled gcc pthread Wnounusedresult Wsigncompare DDYNAMICANNOTATIONSENABLED DNDEBUG O g pipe Wall WpDFORTIFYSOURCE fexceptions fstackprotectorstrong paramsspbuffersize grecordgccswitches m mtunegeneric DGNUSOURCE fPIC fwrapv fPIC DCYTHONTRACE Iusrincludepython m c buildlibprojectlossycompressnodebugc o buildtemplinuxx buildlibprojectlossycompressnodebugo I then run the base python script through pyspy VENV binpyspy record o tmp pyspysvg native VENV binpython tmp py exitafterone And the output is Sampling process times a second Press ControlC to exit s behind in sampling results may be inaccurate Try reducing the sampling rate Collected samples errors Stopped sampling because process exitted Wrote flamegraph data to homesg tmp pyspysvg Samples Errors The successful samples are at the very beginning before it hits any Cython extensions and the failed ones all report the following errors using RUSTLOGinfo Collected samples errors T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python Collected samples errors T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python Collected samples errors T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python T Z WARN pyspy Failed to get stack trace from Failed to merge native and python frames Have native and python Note that the difference between native and python stack lengths is always I have compiled using gcc and with the same result I was not successful building straight from the repo using cargo but it does not seem loading unwindptrace is the issue anyway I would love to figure out whats going on and thought a first step might be to figure out what the actual stack frames are before merging and having them printed out would there be an easy way to do this Also I did mention there were a few blissful moments when it worked perfectly but I have no idea what I did to made it work and then it suddenly stopped working again with no obvious change on my part aside from recompilation of the Cython extensions and no software upgrades Any help appreciated Can I create a PR to add chinese READMEmd for many chinese developer On Windows all other checks for the Python version number fail for me I know that pyspy works in general since it is able to analyze a commerical product that has Python embedded It just fails for pure Python On Windows Pythons default installation path is C pythonXY and not C pythonXY Would you object to also covering this case The log T Z INFO pyspypythonspy Trying to get version from path c python pythonexe T Z INFO pyspypythonspy Failed to connect to process retrying Error Failed to find python version from target process T Z INFO pyspypythonspy Got virtual memory maps from pid T Z INFO pyspypythonspy Found libpython binary C WINDOWS SYSTEM python dll T Z INFO pyspypythonspy Getting version from python binary BSS T Z INFO pyspypythonspy Failed to get version from BSS section failed to find version string T Z INFO pyspypythonspy Getting version from libpython BSS T Z INFO pyspypythonspy Failed to get version from libpython BSS section failed to find version string T Z INFO pyspypythonspy Trying to get version from path c python pythonexe T Z INFO pyspypythonspy Failed to connect to process retrying Error Failed to find python version from target process T Z INFO pyspypythonspy Got virtual memory maps from pid T Z INFO pyspypythonspy Found libpython binary C WINDOWS SYSTEM python dll T Z INFO pyspypythonspy Getting version from python binary BSS T Z INFO pyspypythonspy Failed to get version from BSS section failed to find version string T Z INFO pyspypythonspy Getting version from libpython BSS T Z INFO pyspypythonspy Failed to get version from libpython BSS section failed to find version string T Z INFO pyspypythonspy Trying to get version from path c python pythonexe T Z INFO pyspypythonspy Failed to connect to process retrying Error Failed to find python version from target process T Z INFO pyspypythonspy Got virtual memory maps from pid T Z INFO pyspypythonspy Found libpython binary C WINDOWS SYSTEM python dll T Z INFO pyspypythonspy Getting version from python binary BSS T Z INFO pyspypythonspy Failed to get version from BSS section failed to find version string T Z INFO pyspypythonspy Getting version from libpython BSS T Z INFO pyspypythonspy Failed to get version from libpython BSS section failed to find version string T Z INFO pyspypythonspy Trying to get version from path c python pythonexe Error Failed to find python version from target process Because normally each argument ends with one null not seperated by one null Note that the cmdline could have been edited so it might not always be the case The extra space caused by the last null can be seen on the first line of pyspy top Lines too long will break the display making the first line confusing