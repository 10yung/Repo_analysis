When I try to use e option for bundling ES modules I get this indexjs Uncaught SyntaxError Unexpected token This happens because Pax puts some stuff before import statements so JavaScript gets confused The command I launch is sh px e appjs watch distindexjs my app consists of this js import html render from import useState from const getBalance const App const balance useStategetBalance return html h balanceh render html App documentgetElementByIdapp heres my indexhtml html DOCTYPE html html langen head meta charsetUTF meta nameviewport contentwidthdevicewidth initialscale meta httpequivXUACompatible contentieedge titleMoneyTargettitle head body div idappdiv script srcindexjs typemodulescript body html My directory structure appjs dist indexhtml indexjs indexjsmap indexhtml packagejson distindexjs In my file I import svgdraggable This module is just a function which modifies its argument It seems that it executes itself immediately In order to do that it requires the svgjs lib to be loaded first svgdraggable then calls its main function and passes an object exported from svgjs in the argument It works when I bundle it using webpack but when I use pax i get an errror Uncaught ReferenceError SVG is not defined SVG is the argument Ive mentioned Ive bundled it with px E indexjs outputjs and inspected the generated code I dont know if thats the cause of the error but it turns out the svgdraggable code appears first in the bundle It also doesnt receive SVG as an argument Here are my files indexjs import SVG from svgdotjssvgjs import svgdotjssvgdraggablejs const draw SVGaddTobodysize const rect drawrect attr fill f rectdraggable packagejson default stuff dependencies svgdotjssvgjs svgdotjssvgdraggablejs EDIT fixed commas in packagejson When both main and browser are specified in packagejson browser is not correctly resolved when main is a relative path I think this may also fix the issue in Paired with chromy I love the idea of pax but having trouble running it on a project that uses poylmer cargobinpx E srcawningtrackerappjs outputjs px expected module name string literal or bindings at usrhomerandygosrcgithubcomrwestlundawningtrackernodemodulespolymerpolymerlibelementsdommodulejs Polymers DomModule class has a method named import which pax is trying to interpret as a module import Is there a way to work around this Maybe pax could differentiate between import import and import Edit forgot to say pax v Not sure if it was reported here Consider this scenario binbash echo consolelogrequirefoojs barjs echo moduleexports foojs px watch barjs outjs sleep rm foojs echo barjs sleep echo moduleexports foojs sleep node outjs Here I expect node to print but it looks like the bundle just stops receiving updates after the first failure I am using pax v Hi the recently added forbrowser flag doesnt seem to work I am using pax built from git master I am trying to the use portablefetch package I believe that the problem is because that the value for the browser field in portablefetchs packagejson file is a string rather than an object So it seems that it is ignoring the browser field and falling back to main See Some libraries rely on global variables such as processenvNODEENV and slow bundlers solve it differently js var webpack requirewebpack moduleexports plugins new webpackDefinePlugin processenv NODEENV foo const replace requirerolluppluginreplace rollup plugins replace processenvNODEENV foo then or bash NODEENVfoo browserify g envify e mainjs uglifyjs c m buildjs How to do it with Pax Itd be really useful to extract this into a library so other projects which could benefit from JS bundling could use it I gave this a try but the amount of code that may need changing was a little to much to go in blindly at The primary issue is that the bundling logic and CLI are so tightly connected primarily in error handling If we can abstract this out possibly migrating to something like clap whilst were at it then itll help with reuse a lot I have been trying to integrate pax with bazel and first experiments look really promising only issue I ran into if you have files generated by bazel eg a vuetsjsx transformed file bazel puts this into different directory root so a relative import statement of import a from liba would not be found at that path but it might be at bazeloutk sfastbuildlibajs or similar I wounder if it would be possible to add a flag without too much difficult eg searchpaths pathtodir and then in addition to where pax would look originally for a file it will also look for it in the specified paths if not found So for the above import statement it might also look for it also at pathtodirlibajs Does that make sense