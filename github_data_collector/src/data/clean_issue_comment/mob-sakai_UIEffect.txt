Hi First at all UIEffect is a really great plugin for Unity I have UI elements images that needs to affected by lights using SpriteDefaultDiffuse shader When I apply UIEffect the Image component material is replaced with UIEffectmat or variants such as UIEffectBlurDetail but UIEffectmat doesnt seem to handle diffuse closer to SpriteDefault than SpriteDefaultDiffuse Could it be possible to patch UIEffect main shader to make it diffuse Thanks a lot Great job really Frederic France Platform eg Editor mac target ios platform Unity eg UIEffect eg v void Start UIEffect uiEffect gameObjectAddComponentUIEffect uiEffecteffectMode EffectModeSepia Error uiEffecteffectFactor f uiEffecteffectColor Colorwhite uiEffectcolorMode ColorModeFill Error uiEffectcolorFactor f Error Assets AddUiEffectcs error CS Property or indexer UIEffecteffectMode cannot be assigned to it is read only Error Assets AddUiEffectcs error CS Property or indexer UIEffectcolorMode cannot be assigned to it is read only So the effectModecolorMode can only be changed in the inspector Can you help with this issue Much Appreciated Describe the bug Using Advanced Blur and Detail Blur mode on an Android device makes the game really slow Updates takes several seconds To Reproduce Steps to reproduce the behavior Create a basic D UI project Add a Button configure it so it changes color when clicked and released Add UI Effect and UI Shadow to configure a Soft shadow usage Use Detail blur mode and tick Advanced Blur Build and Run on an Android Device See refresh rate when clicking on the button Environment Platform Android Unity f UIEffect v Additional context I was told it was working fine some months ago then an Android update occurred and suddenly the app was awfully slow when run It seems the app was not rebuilt in the meantime Only an Android update was done between the time it was working fine and smooth and now that it is too slow Ive tried building a single project like indicated in the Reproduce section and indeed it is desperately slow with these settings Cannot personally confirm it was working before only was told by a colleague Edit it seems the issue comes from the Advanced Blur option as it is also very slow in Advanced Medium Blur but runs fine in Detail noAdvanced Blur Hello first of all MANY MANY thanks for your excellent work Ive got a project that requires a runtime change of Color mode From Multiply to Add for the UI Effect component Unfortunately theres no setter in the UIEffectcs Ive tried adding on line public ColorMode colorMode get return mColorMode set mColorMode value GetMaterial UpgradeIfNeeded but it did not work properly it showed Add mode in the UI but actually it was still multiply mode assigned Is there a way to do this At least maybe some workaround Since the adoption of Custom Render Pipelines camera stacking UI Layering etc is more in the hands of each developer However the proper way to blend a separately UI render after the fact is to clear a render target to a full clear color black and alpha zeroed render all the UI on it with the preferred color blend mode BUT with the alpha channel always adding to the destination separate alpha blend one one This resulting image can then be combined properly to any other on top Describe the solution youd like The option to use a UIEffect shader with separate alpha blending op option Describe alternatives youve considered Can force it on the current shaders but would probably be better to have official support from the library Probabably behind a define directive Additional context The default alpha blending behavior is that the last element that draws leaves its alpha value burned on the image So if by any chance one of the last elements during UI rendering happens to be very low opacity it will leave that low value on the part of the image that it covers Later on when combining them that low value will wrongly make it low opacity Platform EditorWindows StandaloneWindows Unity UIEffect v Hello I wonder if its possible to get an advanced reveal effect with TMP Right now Im using a reveal effect using the alpha value of the chars vertex colors allowing a typewriter or fade effect per char I would like something like a dissolving effect per char or at least per line To make it per line I thought of dividing each line of text in a different TMPText and applying directly the dissolve effect to each one but thats not optimal for dynamic text and it wont work for individual chars Congratulations for this wonderful component Describe the bug static ListAction sUpdateActions Normal initialization once There are n canvases in the current scene CanvaswillRenderCanvases is called n times To Reproduce Steps to reproduce the behavior Put canvases in the current scene And then look at the effect Environment please complete the following information Platform eg EditorWindowsMac StandaloneWindowsMac iOS Android WebGL Unity eg f UIEffect eg v Additional context Add any other context screenshots or gif animations about the bug here BUG Fix Add bool isRendered variable on EffectPlayer Using bool isRendered exclude multiple calls when void OnWillRenderCanvases is called eg void OnWillRenderCanvases if play ApplicationisPlaying callback null isRendered return isRendered true Timer update Add internal void LateUpdate isRendered false on EffectPlayer Call on UIEffectComponent eg protected override void LateUpdate baseLateUpdate playerLateUpdate 