Describe the bug A clear and concise description of what the bug is I dont seem to be able to write to a new file using exec This works when I use a Docker container action with bash but not using the exec function with JavaScript To Reproduce Steps to reproduce the behavior Create an action and call exececho test idrsa that runs on ubuntulatest It will print out that this was called but when you look in the directory the file is not created Attempt the same thing in the terminal on your computer and it will work Expected behavior A clear and concise description of what you expected to happen I expect a file called idrsa to be generated with the contents of test Additional context Add any other context about the problem here Ive tried all sorts of different combinations of this and it doesnt seem to work I can get touch idrsa to create the file but I cant seem to push information into it Ive tried Is there some additional configuration that is needed to be able to run these types of commands Ive tried fsappendFile but I end up with the same issue too which makes me wonder if this isnt just related to this action execa is what is standardly used for crossplatform standardized execution Im curious what advantages this toolkit package offers us that execa does not already offer On the surface they seem largely interchangeable Resolves Related to Describe the bug As input parameters are passed to the action as environment variables and exec reuses the actions environment by default this means the input parameters will probably be visible to the subprocess If any secrets are being passed via parameters they will be visible too To Reproduce Steps to reproduce the behavior Write a JS action that takes a parameter named foo Have the action make a call like await execexecsh c echo fooINPUTFOO Use action in a workflow that sets a value for the input parameter Expected behavior I would expect execexec to strip input parameters from the environment used to run the subprocess by default If there are cases where it is desirable to pass input parameters to the subprocess this feels like it should be optin Add any other context about the problem here Additional context While writing an action that took a login token for an online service as an input parameter I was trying to be careful not to leak the secret some commands I need to run have the secret passed via command line and others dont need it In retrospect it seems obvious that the secrets would be visible to all subprocesses through the environment variables but it wasnt obvious from the toolkit documentation Describe the bug suggests that addmatcher works from within a Docker container I couldnt find a way to get this to work addmatcher always uses the host filesystem to lookup the file and cant read a file from the Docker container that I could find To Reproduce See Removing the cp on line and use flake matcherjson instead of the full path on line This will result in a file not found error Expected behavior addmatcher to work from within a Docker container Additional context Honestly I can fully understand that addmatcher uses the host filesystem So maybe this is not a bug or unexpected The main thing that is puzzling me a bit is that the comment linked suggests it should work But I couldnt find any example of this and the documentation doesnt talk about this So I am not sure As a result this ticket in the hope one of you can shed some light on this topic If the cp is the expected solution I would love to get some pointers what a good folder is to copy this to Using the workflow folder for this feels a bit ugly Or possibly my solution is just completely bananas and you have a much better solution in mind Tnx Initial commit for the actionsartifact package So far only contains the code for uploading an artifact download will come in a separate PR Adds support for uploading artifacts with new APIs that are independent of the runner nonplugin The original code for uploading artifacts can be found here see This PR largely ports over the C code for uploading artifacts to node and switches over to some recently added APIs This new package will be used for the v versions of actionsuploadartifact and actionsdownloadartifact Been using the structure of actionsglob in this repo as an example For this PR I deliberately did not do tsc and npminstall so there is no lib folder or nodemodules folder Trying to keep it clean and simple for this PR so that it is easy to review Been testing with the following two repos for upload artifact and Future work not part of this PR TESTS all the code in searchts and utilts is a good candidate will be added to a TEST directory just like in all the other packages in this repo All the code related to downloadArtifact and downloadAllArtifacts TODOs can be seen in srcartifactts README with examples will be added after download artifact is working and the package is almost ready to release lib and nodemodules folder just like in actionsglob will be added as we get close to release and everything is tested Search uses our new glob package actionsglob Http calls are made using our new actionshttpclient Much of the work that was done in actionscache was used as a reference in terms of how concurrent chunked uploads are done see Formatting was done by doing prettier write packages srcts so the style should be consistent with the other code in this repo Describe the bug A clear and concise description of what the bug is To Reproduce Steps to reproduce the behavior Go to Click on Scroll down to See error Expected behavior A clear and concise description of what you expected to happen Screenshots If applicable add screenshots to help explain your problem Desktop please complete the following information OS eg iOS Browser eg chrome safari Version eg Smartphone please complete the following information Device eg iPhone OS eg iOS Browser eg stock browser safari Version eg Additional context Add any other context about the problem here Describe the bug Environment variables set in job A cannot be used in dependent job Bs joblevel if conditional These fine grained exclusions of what you can and cannot do across jobs is not articulated in the documentation which uses carteblanche statements like environment variables that are available to all jobs and steps in the workflow and You can use the if conditional to prevent a job from running and you can use any supported context and expression So the bug is either documentation that doesnt document the inclusions or exclusions of the features its describing or the actionscode being unable to support all the constructs across a workflows jobs that are available across a workflows steps To Reproduce Run the following action in a GitHub workflow yaml name Test creating and using workflowlevel ENVs across jobs on push jobs This job sets an environment variable as documented by GitHub env is a map of environment variables that are available to all jobs and steps in the workflow you can also set environment variables for the entire workflow setvariable name Set an environment variable for the entire workflow runson ubuntulatest steps name Sets TESTVAR run echo setenv nameTESTVAR This job uses an environment variable as documented by GitHub jobsjobidif You can use the if conditional to prevent a job from running You can use any supported context and expression usevariable name Use an environment variable to prevent this job from running runson ubuntulatest needs setvariable if envTESTVAR steps name Print TESTVAR run echo TESTVAR References Expected behavior Scenario job setvariable should pass and job usevariable should be skipped Scenario if you change TESTVAR to TESTVAR in job setvariable then job usevariable should run and print to stdout Screenshots Additional context I expect to hear the following from the backend developers ofcourse this wont work because youre trying to use dynamic output from one VM as the input to another VM we only support upfront hardcoded environment variables in the workflow so they can be provided to all VMs on instantiation My response is When the YAMLs dependency graph determines that one VM depends on another VM via the needed variable then you absolutely can harvest the variables as a postaction in all prerequisite VMs and aggregate and pass those variables into the construction step of any dependent VMs Edit shout if theres a more applicable repo this should be filed under I wasnt sure which of the action repos does the yaml parsing and VMgeneration for jobs Regards