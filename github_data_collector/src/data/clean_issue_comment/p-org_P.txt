P does not support iterator over collections We would like to add foreachT x in collectionT This will be very useful and will reduce the programmer overhead Currently the programmer has to write a while loop over the size of the collection It would good to enable separate compilation for P that allows decomposing the implementation into separate P projects Enabling this for C pipeline seems hard and we can ignore it I think enabling it for the P pipeline would be of value and shouldnt be that hard alexreinking Please let us know if you have any thoughts and idea around this To make it easier to write realworld applications in P It would be good to support generics in P as specially for the foreign types shazqadeer working on the initial design shazqadeer There seems to be a lot of interest in enabling shared memory concurrent in P Do you have any thoughts and ideas from your experience applying PP inside Azure pdeligia akashlal I see that PSharp supports shared memory concurrency analysis in some forms Can you point me to relevant documentation and how should we model it in P so that we can analyze it using PSharp with the existing support any ideas The design of the module system and the sendsreceivescreates annotations have been discussed many times Now would be the time to potentially revisit and clean things further if necessary It would be good to brainstorm on this and flush out the design The design of swap and move was done by shazqadeer and there is lots of scope of improvement by taking inspiration from Rust and other frameworks Comments from Shaz With swap we actually have the capability to get arbitrary number of output parameters from functions So I would like to revisit the design of functions as follows If a function returns a value I would like to consider it as a pure function with no side effects If a function does not return a value then it is a procedure with potential side effects Procedures can return values through swap parameters This design will make sure that expressions do not have side effects Shaz thinks that the P design which bundles the event and the payload together is a superior design This needs to be discussed and flushed out Currently all P values in Prt are implemented as PrtValue pointer in other words all values are boxed It would be nice if we can improve the runtime code generation to ensure that only complex types are boxed and other types are implemented as primitive C types I would really like to get this part implemented as thisiscam and I are blocked on it to get the Symbolic Engine ported to the master branch alexreinking will you be able to help out with respect to implementing a pass over the IR this would greatly simplify the Prt and P generated code as well Please let us know what you think Were trying to extend PTester with additional exploration strategies It is handy to use the Clone method on StateImpl to copy the program state for backtracking But it fails to do a deep copy In particular a PrtMachineValue keeps a pointer to the machine that it refers to and this pointer is copied asis in the Clone method Thus the resulting state still has pointers back to the original state This isnt a problem right now for PTester because Clone is only used to make copies of the initial state which likely doesnt have objects of this type I see the following options and Id like to get the opinion of the P team Doing a Clone of an arbitrary StateImpl is too complex and we should stay away from it Ill have to rethink my algorithm then Make PrtMachineValue a dump object with just a scalar index value The StateImpl will keep the mapping from these indices to the machine object This will require a change in the Compiler to do this lookup Change the Clone method of PrtValue to take a StateImpl argument which will be the new state being generated I think option is the cleanest but it needs changes to the compiler 