In case you would like to provision a cluster of dockerized virtual machines on Apache CloudStack there is no corresponding plugin for that right Vendored libvirt wasnt updated for a while Please update to latest It looks like something wrong with metadata disk creation when using libvirt with init section infrakityml Tags customtag kvm customtag singleinstance Init binbash sudo aptget update y sudo aptget install wget curl wget qO sh Properties MetadataStoragePool default Domain Domain Type kvm Memory Unit GiB Value VCPU Value OS Type Arch x Machine pci fx Type hvm Initrd homejohnimagelinuxkitinitrdimg Kernel homejohnimagelinuxkitkernel KernelArgs consolettyS BIOS UseSerial yes RebootTimeout Boot Dev hd Devices Interfaces Type bridge Source Bridge virbr Model Type virtio Serials Type pty Consoles Type pty Target Type serial Name Channels Type unix Target Type virtio Name orgqemuguestagent OnCrash destroy OnPoweroff destroy OnReboot restart infrakit local libvirtdefault provision y infrayml Creating Domain virErrorCode Domain Messageinternal error process exited while connecting to monitor T Z qemusystemx drive filevarliblibvirtimagesinfrakite c metadataformatrawifnoneiddrivesata mediacdromreadonlyon Could not open varliblibvirtimagesinfrakite c metadata Permission denied Couldnt figure out whats going on It looks like metadata disk is copied with root permissions but qemu is running under a different user What do I need first Do I need to write a playbook Im looking to setup something like this infrastructure It looks like currently infrakit supports CLIbased deployment using playbooks Do I get it right So if I somehow create a playbook I would be able to provision a libvirtbased instance If you following the tutorial here you can provision an instance using the provided example file However continuing the example by committing a group fails with an error To reproduce With infrakit started and using the provided groupyml file infrakit local group commit y groupyml logdebugV log Result bash DBUG reading template moduleclicore url fngithubcomdockerinfrakitpkgclitemplateProcessorfunc DBUG rendered moduleclicore view r n A group of workers r n r n Start up plugin start should include manager vanilla simulator and group r n Then commit r n r n infrakit group controller commit y docstutorialgroupyml r n r nkind group r nmetadata r n name workers r nproperties r n Allocation r n Size r n Flavor r n Plugin vanilla r n Properties r n Init r n sudo aptget update y r n sudo aptget install wget curl r n wget qO sh r n Tags r n customtag tutorial r n customtag singleinstance r n customtag bygroup r n r n Instance r n Plugin simulatorcompute r n This section here for the Instance plugin is the same as the example r n for creating a single instance The Tags and Init sections are now r n handled by the Flavor plugin r n Properties r n apiProperty value r n apiProperty value fngithubcomdockerinfrakitpkgclitemplateProcessorfunc DBUG looking up controller backend modulerunscope namegroup fngithubcomdockerinfrakitpkgrunscopefullScopeControllerfunc DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsgroup V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsgroupstateless V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginssimulator V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsvanilla V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsgroup V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsgroupstateless V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginssimulator V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Discovered plugin modulediscoverylocal addressinfrakitpluginsvanilla V fngithubcomdockerinfrakitpkgdiscoverylocaldirPluginDiscoveryList DBUG Client SEND modulerpcclient addrinfrakitpluginsgroup payloadPOST HTTP r nHost h r nContentType applicationjson r n r n jsonrpc method HandshakeHello params id V fngithubcomdockerinfrakitpkgrpcclientclientCall DBUG Client RECEIVE modulerpcclient addrinfrakitpluginsgroup payloadHTTP OK r nContentLength r nContentType textplain charsetutf r nDate Tue Sep GMT r n r n jsonrpc result Objects Controller Name groups ProxyFor Name ProxyFor Group Name groups ProxyFor Stack Name ProxyFor Updatable Name status ProxyFor Name vars ProxyFor id n V fngithubcomdockerinfrakitpkgrpcclientclientCall DBUG Client SEND modulerpcclient addrinfrakitpluginsgroup payloadPOST HTTP r nHost h r nContentType applicationjson r n r n jsonrpc method ControllerCommit params Name group Operation Spec kind group version metadata name workers tags null properties Allocation Size Flavor Plugin vanilla Properties Init sudo aptget update y sudo aptget install wget curl wget qO sh Tags customtag tutorial customtag singleinstance customtag bygroup Instance Plugin simulatorcompute Properties apiProperty value apiProperty value id V fngithubcomdockerinfrakitpkgrpcclientclientCall Error Post nethttp request canceled ClientTimeout exceeded while awaiting headers Comments Outside of a potential regression it seems as though the Group plugin is proxing for a real Controller implementation which does not exist in the tutorial setup I can see some recent Controller implementations but I am not sure which one to use in this case See the InfrakitExamples repository This Cloudformation stack no longer works correctly with the cloudinit failing when you select not to use the image preinstalled image and the AMI not being found when you select to use the preinstalled image This is an especially helpful example so it would be nice to get it working again The tutorialinstructions for getting LinuxKit working are confusing andor out of date The POC video appears to reference a demo playbook which does not exist The docs in the repo dont create a validworking playbook infrakit playbook add linuxkit WARN Cannot build flags modulecliplaybook operationscalegroup url errtemplate function managerCommit not defined fngithubcomdockerinfrakitpkgcliplaybooklist WARN Cannot build flags modulecliplaybook operationscalegroup url errtemplate function managerCommit not defined fngithubcomdockerinfrakitpkgcliplaybooklist found commands cached fileUsersmikeinfrakitplaybookcachelinuxkitinfrakitplaybookslinuxkitindexyml infrakit playbook ls PLAYBOOK URL CACHE linuxkit fileUsersmikebuildinfrakitdocsplaybookslinuxkitindexyml infrakit playbook linuxkit h Manage playbooks Usage infrakit playbook command Available Commands add Add a playbook ls List playbooks rm Remove playbooks update Update a cached playbook Flags q quiet Print rows without column headers Global Flags log int log level default logcaller include caller function default true logdebugV int log debug verbosity level logs all logdebugmatch stringSlice debug mode only select records with any of the kv pairs logdebugmatchexclude True to exclude otherwise only include matches logformat string log format logfmttermjson default term logstack include caller stack logstdout log to stdout Use infrakit playbook command help for more information about a command When launching infrakit local vagrant provision vagrantcentos vmjson I get the following CRIT error executing modulemain cmdinfrakit errPost nethttp request canceled ClientTimeout exceeded while awaiting headers fnmainmain Post nethttp request canceled ClientTimeout exceeded while awaiting headers It seems to be a cosmetic issue but I dont know if infrakit is wanting to keep state on the VM It looks like it failed but if you look at the vagrant globalstatus you see vagrant globalstatus id name provider state directory c ab d default virtualbox running tmpinfrakit So obviously it succeeded Also the vagrant plugin seems happy INFO Vagrant STDOUT default Running tmpvagrantshell vtiee sh INFO Command completed err nil Also I would think there would be a command like infrakit local list or infrakit local vagrant list to see running instances instead we have to check through vagrant Pulled down code yesterday and was trying to get infrakit to launch with the vagrant plugin Launched the plugin and the did a infrakit local vagrant provision vagrantcentos vmjson I then get the error CRIT error executing modulemain cmdinfrakit errProperty Box must be set fnmainmain Property Box must be set After some investigation I see that something in githubcomdockerinfrakitpkgprovidervagrantplugininstanceinstancego must have changed in the method Provision Your expecting properties Box to be a string but actually it is a series of map string interfaces I put some debug code in to see what was going on the first set shows that specProperties is actually the following json Debug specProperties InstancePlugininstancevagrantPropertiesCPUs Memory Boxcentos FlavorPluginflavorvanillaPropertiesSize UserData curl sudo bashsudo service docker start Labelstierdockerenginesprojectinfrakit Debug specProperties type typesAny I then print properties out and its type Debug properties map Flavormap Pluginflavorvanilla Propertiesmap Size UserData curl sudo bash sudo service docker start Labelsmap tierdockerengines projectinfrakit Instancemap Plugininstancevagrant Propertiesmap CPUs Memory Boxcentos Debug properties type map string interface I modified the code in the instance file to what I believe your expecting by putting the following in apkgprovidervagrantplugininstanceinstancego bpkgprovidervagrantplugininstanceinstancego func v vagrantPlugin Provisionspec instanceSpec instanceID error return nil fmtErrorfInvalid instance properties s err properties properties Instance map string interface Properties map string interface if properties Box nil return nil errorsNewProperty Box must be set This temporarily fixes the issue and everything works I suspect the specPropertiesDecode is to pass in only the properties part which is PropertiesCPUs Memory Boxcentos but instead it decodes and returns all of it burying properties deep into a map string interface I am not sure where the proper place to fix this is though as the decode method is pretty straight forward and handles any input The group SPI has a DescribeGroup The group controller then called the instance plugins DescribeInstances Note that the DescribeInstances is hardcoded to propertiestrue Depending on how the instance plugin is implemented this can cause a lot of processing When the group controller does its normal processing to determine the group is of the appropriate size these additional attributes are not even used Therefore most of the group instance communications is asking for additional properties that are never used Note that when the enrollment and ingress controllers retrieve the group members we do need the additional properties Can we somehow update the SPI to expose properties boolean This would reduce the processing done in the instance plugin Note for the terraform provider every DescribeInstances API with propertiestrue results in a CommandExec to terraform show my investigations show that this does not scale Our deployment has groups enrollment controller and ingress controller managing L load balancers this results in dozens of DescribeInstances invocations per minute FWIW Im working on caching the instances to help mitigate this issue however IMO the SPI should expose the properties boolean Thoughts on what should be done to the SPI