Add ability of resolving type hinted scope parameters issue Addresses issue It is currently impossible to use in allowedIncludes AllowedIncluderelationshipname internalName for aliasing relationships AllowedIncludecountnameCount internalNameCount as stated in the docs While aliasing sort with AllowedSortfieldfieldAlias field works fine Example php models QueryBuilderforModelclass allowedIncludes AllowedIncludecountrelationshipCount AllowedIncluderelationshiprelationshipAlias relationship get Trying to use those includes will result in the following error json message Requested includes relationshipCount relationshipAlias are not allowed Allowed includes are Count Count statusCode I believe the issue is located here Because AllowedIncluderelationship and AllowedIncludecountnameCount internalNameCount already return a Collection it never passes in this condition Ive found this test after I tried to use the QueryBuilder on a relationship method in a subresource controller The solution Ive found is to call getQuery on the relationship method before passing it into the builder This way getQuery is called twice and the resulting query is a plain database one instead of an eloquent one Would it be an option to check if the query is a relation one and call getQuery twice First pull request so I hope this is okay Updated the AppendsAttributesToResults concern to add the ability to append to a relationship This should be fixed Hey I found a tpyo in paramaters Allows the allowedIncludesmethod to be a bit more flexible and improves on the Exception language if no includes exist at all for a query Due to legacy reason I have to use an older version of query builder and I was wondering whether it was possible to filter on a nestedassociated property I have a User model which has a one to one relation to a Territory model There is a priority property on Territory and I want to returns Users who are associated to a Territory with a specific priority The User and Territory are in two separate DBs db users and db territories Ive searched all over and kind seem to find a solution using Query Builder and Im about to just implement using DB calls Is filtering on this possible with v of Query Builder Currently any filters that are using associative keys cannot be passed to the scope using the splat operator Scenario suppose I have this scope on my model public function scopePublishedBetweenquery start end return query wherepublishedat Carbonparsestart wherepublishedat Carbonparseend And Ive allowed this scope in my query AllowedFilterscopepublishedbetween Now I pass my date range as an associative array in the request like so let params filter start end When the query builder executes this request I receive this error because the splat operator does not support unpacking associative arrays Symfony Component Debug Exception FatalThrowableError Cannot unpack array with string keys 