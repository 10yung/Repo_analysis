Its not possible to use classnames with typescript because types are not published classnames returns a single string While the DOM API function elementclassListadd expects a rest parameter which can be given by either supplying individual arguments adda b c or array spread add a b c To use classnames with classListadd you will either have to call add multiple times with a single argument to classnames or split the result and applying array spread js addclassnamesa b csplit Internally classnames joins the array of classnames before returning so the array is there What do you think about an option to return the array without joining so those in need of an array does not have to do an unnecessary split I guess this could be placed under classnameslist or something Just wanted to bring up the suggestion in case others face a similar need Tried to look through all issues to see if this was suggested before but couldnt find any Reworked all implementations regular dedupe bind No breaking changes Benchmarks bash node benchmarksrun localstrings x opssec runs sampled npmstrings x opssec runs sampled localdedupestrings x opssec runs sampled npmdedupestrings x opssec runs sampled Fastest is localstrings localobject x opssec runs sampled npmobject x opssec runs sampled localdedupeobject x opssec runs sampled npmdedupeobject x opssec runs sampled Fastest is localobject localstrings object x opssec runs sampled npmstrings object x opssec runs sampled localdedupestrings object x opssec runs sampled npmdedupestrings object x opssec runs sampled Fastest is localstrings object localmix x opssec runs sampled npmmix x opssec runs sampled localdedupemix x opssec runs sampled npmdedupemix x opssec runs sampled Fastest is localmix localarrays x opssec runs sampled npmarrays x opssec runs sampled localdedupearrays x opssec runs sampled npmdedupearrays x opssec runs sampled Fastest is localarrays Main purpose is to define both named and default export which package does dts files size reduced making direct exports where it is possible My hope is that this represents a babystep towards that might be easier to merge since its not a breaking change All of the files remain inplace but the main module indexjs also has an ES Modules version The effect this has is more visible when bundled via Webpack or Rollup but heres the raw size improvement just looking at minified versions of master VS this PR Current Master After this PR Difference b b b I know this seems like a small value But for a module downloaded M times per month thats quite a few bytes over the wire It also helps ensure classnames gets concatenated effectively by Webpack and Rollup which makes the module more likely to be moved into shared code chunks that avoid duplication cc JedWatson Andarist This is a bit weird to explain so please bear with me Edit Ive just realised this probably belongs in typesclassnames In the Typescript definitions the classnamesbind utility accepts a Recordstring string When passing in a map of values like this Typescript can extract a set of keys as a string literal type Currently this is discarded and when using the bound returned function it will allow any random string through Using some generics we can pass these keys down the chain into the returned function like so ts type ClassValueT extends string T T k in T any export default function bindT extends stringstyles RecordT string classes ClassValueT string This means when using the bound function elsewhere we can be sure that the strings being passed actually exist in the map ts const styles foo xxfoo bar yybar const cx cnbindstyles cxfoo bar xxfoo yybar cxfoo true bar false xxfoo cxfoobar TypeError foobar does not exist in cxfoobaz true TypeError foobaz does not exist in I havent submitted a PR because this is pretty fresh and probably needs some input before its ready Like it doesnt reuse any types from indexdts and such so its not super portable Thoughts Fixes like when use typescrit with requirejs and webpack only one can work adidahiya JKillian seansfkelley mradamczyk marvinhagemeister ccapndave this should be enough As follow up to ref IANAL but I think this is ok Pinged the authors anyway x adidahiya JKillian x seansfkelley x mradamczyk x marvinhagemeister ccapndave x bradleyayers x cwmacdon See for benchmark numbers