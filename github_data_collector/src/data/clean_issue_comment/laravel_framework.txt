 Laravel Version PHP Version Database Driver Version None Description One of my class use storagepath so Ive discovered this class cant be tested because of this bug Steps To Reproduce laravel new app cd app php artisan maketest unit HelpersTest sed i sassertTruetrueassertEqualsstoragepathwhatever testsUnitHelpersTestphp vendorbinphpunit Output PHPUnit by Sebastian Bergmann and contributors E Time ms Memory MB There was error Tests Unit HelpersTesttestExample Illuminate Contracts Container BindingResolutionException Target class pathstorage does not exist demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateFoundationhelpersphp demoappvendorlaravelframeworksrcIlluminateFoundationhelpersphp demoapptestsUnitHelpersTestphp Caused by ReflectionException Class pathstorage does not exist demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateContainerContainerphp demoappvendorlaravelframeworksrcIlluminateFoundationhelpersphp demoappvendorlaravelframeworksrcIlluminateFoundationhelpersphp demoapptestsUnitHelpersTestphp Laravel Version PHP Version Database Driver VersionRedis Description now logic to acquire a redis lock need steps setnx and set expire I meet a bug that setnx is sucessed but set expire not this may cause by network or other weird reasons but I think this can fix by atomic operation I fount a pr but it havet be accept Steps To Reproduce breakpoint in try to acquire a redislock wait the breakpoint fire stop the redis server resume the breakpoint and return restore the redis server then you will get a never expires lock Although the probability of its occurrence is very low once it occurs it will cause very serious consequences In a real business scenario I have been experiencing this problem recently Just now I finally discovered the source of the problem I hope to be able to fix it Thank you Please only send a pull request to branches which are currently supported If you are unsure which branch your pull request should be sent to please read Pull requests without a descriptive title thorough description or tests will be closed In addition please describe the benefit to end users the reasons it does not break any existing features how it makes building web applications easier etc Enables Improves multilanguagesupport for people who do not want to use visible language prefixes in their routes Example defining routes like this PHP Routenameengroupfunction Routeget HomeControllerindexnamehome Routegetabout AboutControllerindexnameabout Routegetregister AuthControllerregisternameregister Routenamenlgroupfunction Routeget HomeControllerindexnamehome Routegetover AboutControllerindexnameabout Routegetregistreren AuthControllerregisternameregister Enables us to use the following middleware PHP namespace App Http Middleware use Closure use Illuminate Support Facades URL class SetDefaultLocaleForUrls public function handlerequest Closure next URLdefaultNamePrefixrequestuserlocale return nextrequest Fixes issue Laravel Version PHP Version Description This bug manifested itself when I pointed Laravel Novas File field to a file of GB Nova is unable to download those files The log shows an outofmemory error I investigated the problem and I think it lies with Illuminate Filesystem FilesystemAdapter which uses a fpasstru of the stream This loads the whole file in memory The following would work php responsesetCallbackfunction use path stream thisreadStreampath while feofstream echo freadstream fclosestream Steps To Reproduce Get yourself a large file and point a tinker session to it Storagedownloadlargefilecsvsend With fpassthru you get a Allowed memory size of bytes exhausted tried to allocate bytes With the while loop it just streams data Happy to PR Credits More examples on that page too Laravel Version PHP Version Database Driver Version MySQL Description below is a code snippet that updates account balance for an account when a saving in updated if the transaction fails for any reason the saving update is rolled back but changes are persisted in the AccountBalance Model Steps To Reproduce NOTE saving Model was passed to the method DBbeginTransaction begin transation try update Account balance deduct current saved amount AccountBalancewhereaccountid validatedInputs accountid decrementavailable savingamount AccountBalancewhereaccountid validatedInputs accountid decrementledger savingamount add new loan amount AccountBalancewhereaccountid validatedInputs accountid incrementavailable validatedInputs amount AccountBalancewhereaccountid validatedInputs accountid incrementledger validatedInputs amount perform saving saving tapsavingupdatevalidatedInputs commit transaction DBcommit catch Exception e DBrollBack throw e return responsejson savingsupdated false This PR tries to implement the full support of softdeletes in manytomanyrelationships Related Issues and some questions about that feature on SO or laracasts Some background information was already gatered in Additions New interface SoftDeleteable Used to detect if the pivot model is soft deletable even if the SoftDeletes trait was not used custom implementations Ability to apply scopes and call additional methods on the pivotquery This allows for calls like groupmemberspivotWithTrashedget or really any other methodcall regarding the pivot query Breaking changes Since soft deletes were not supported in belongsToMany and morphToMany relationships nothing should be breaking But there is the possibility that some users have models which use the SoftDeletes trait or implemented something for themselves Since this is my first contribution i thought pointing to x would be on the safer side Todo x Tests All existing and new database tests are passing Documentation Remove the warning about soft deletes when using pivots and mention the SoftDeletableInterface Laravel Version PHP Version Database Driver Version mysql Description After I upgraded my Laravel from v to v third party translation library stopped working In Laravel v firstly are registering Laravel native translator singleton and after that it registering third party libraries singletons but in Laravel v firstly are registered third party libraries singleton named translator and after that it will be overridden by Laravel native translator singleton It could be caused by this changes GrahamCampbell please check it Thanks Steps To Reproduce Use one of the package which extends translations functionality and register translator singleton Im using this library which takes translations from database Laravel Version PHP Version Database Driver Version Redis Description Since Laravel persists the entire session data array at the end every request in the case of concurrent requests any changed session data is very likely to be lost Related issues Proposed fixes Dont save the session in the terminate method This was changed in with this PR But that change doesnt fix this issue Only save data to session that is actually changed Use session locking Check whether session data has changed before saving it Steps To Reproduce In the below example of concurrent requests the change in Request A will be lost overridden when StartSessionsaveSessionrequest is called at the end of Request Bs lifecycle Request A changes session variable Request B no changes to session data Recommendation The only complete solution to this problem is to use session locking A package like this one will work However that basically makes all your AJAX requests synchronous which isnt a great solution for modern SPAs taylorotwell has mentioned some form of locking as a solution to the problem in However I do think we can make other improvements The fact is most AJAX requests in a modern SPA arent modifying session data Nevertheless they persist the session data at the end of their lifecycle This means that a single longrunning request makes the session data unable to be changed reliably After looking at all these related issues and proposed fixes I think something like this PR is the most tenable It basically only persists the session data if it is dirty It probably could be altered to be enableddisable through a config option It doesnt solve the problem if concurrent requests all want to alter the session data but it does solve the use case where most requests are just reading session data The one issue I foresee with this approach is session timeout Laravel Version PHP Version Database Driver Version Postgres Description When I forcefully create an associated model the identifier is set to null I expected to be able to force create associations this way Steps To Reproduce php postcommentsforceCreate body Lipsum Will throw the error ERROR SQLSTATE Not null violation ERROR null value in column postid violates notnull constraint 