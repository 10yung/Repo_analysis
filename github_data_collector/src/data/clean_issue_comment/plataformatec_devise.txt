I have a curious situation where running tests in isolation pass but running them in series the first passes and all the rest after that one fail The test is basically doing as part of its setup loginasuser visit rootpath The tests fail and the browser shows This page isn t working redirected you too many times When looking at the test log I see Started GET signin for at Processing by DeviseSessionsControllernew as HTML Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Started GET signin for at Processing by DeviseSessionsControllernew as HTML User Load ms SELECT users FROM users WHERE usersid ORDER BY usersid ASC LIMIT id LIMIT Redirected to Filter chain halted as requirenoauthentication rendered or redirected Completed Found in ms ActiveRecord ms Yet if I change my webdriver to capybarawebkit this does not happen and all tests pass I should mention that I do have an after each block which is calling Wardentestreset but that does not seem to fix this problem Any ideas what might be causing this weird behavior and only in the context of selenium Environment ruby p Rails devise Environment Ruby Rails Devise Current behavior It is possible to sign in a non persisted model The session doesnt have any model ID to store and the model is therefore not signed in for future requests Furthermore this mistake is not caught by controller tests def mycontrolleraction user Usernewemail params email the order of the two following lines should be inverted However this should not pass controller tests signin user usersave end Controller tests will show it as currentuser it signs in user do expectcontrollercurrentuserto benil post mycontrolleraction params email testtestcom u Userfindbyemailtesttestcom expectcontrollercurrentuserto eq u success when it should fail end This is undesirable because A the user would not be signed in for any future requests such as a redirect and B this mistake is not caught by asserting currentuser in test The test that actually catches the mistake is cumbersome it signs in user do expectcontrollercurrentuserto benil post mycontrolleraction params email testtestcom u Userfindbyemailtesttestcom expectcontrollercurrentuserto eq u success expectsession wardenuseruserkey include uid to be true failure end Expected behavior signin user should do nothing when user is not persisted In particular currentuser should be nil so that controller tests would fail Thank you for maintaining this precious library What would be the way to set different config values based on devise model Lets say we have models Admin User Setting config values in deviserb will be applied in all models How can I set a different config to one of the model I tried like this class Admin ApplicationRecord Include default devise modules Others available are confirmable lockable timeoutable trackable and omniauthable devise databaseauthenticatable registerable recoverable rememberable validatable selfallowunconfirmedaccessfor days end but getting error cant modify frozen class How can I fix this Thanks Current behavior Devisesecurecompare will currently return false if the bytesize of strings differs as the method only operates in constant time when both strings are the same length If the securecompare method is incorrectly used in a place where the strings are not of equal length eg comparing plain text passwords the early return of false could unintentionally leak the fact that the strings are of a different length That in turn could unintentionally leak the length of the correct string Expected behavior Comparing strings with unequal bytesizes with securecompare should raise an exception because this is an incorrect usage of the method and should be considered an exceptional situation This change would ensure that if the method is implemented incorrectly it will fail in a way that catches developers attention rather than unintentionally leaking string string length information AFAIK devise doesnt support omniauthable for multiple models because long time ago omniauth did not support custom pathprefix for each strategy But according to this comment from josevalim omniauth solved that issue at least years ago I implemented a sample rails application that shows how omniauthable can be used for multiple devise models main commit of that app installation instructions I followed this guide to implement omniauth sign in for users and managers in my demo app I will also update if this PR gets approved Will appreciate any ideas how to improve this feature Theoretically we can automatically duplicate all registered providers and set correct pathprefix for them if devise omniauthable is specified in more than model That will reduce amount of configuration required but it wont allow to have separate sets of providers for different models Or we could also add new arg to Deviseomniauth called scopes Default would be to add this strategy to all omniauthable scopes Hi thanks for your great effort to maintain this gem summary Just found out a warning about keyword arguments that will potentially break with future ruby when trying to test devise against Ruby thankfully the prior PR covered most of them examining the test logs that I ran with my forked repo this seems the only one left out why its needed to change DeviseIntegrationTest and DeviseControllerTestCase offers sets of methods that delegate its execution to ActionControllerTestCase As the delegated methods and its delegated one process require keyword arguments we need to pass our hash objects as keyword arguments compatibility Lots of corner cases have been discussed around this issue luckily this patch is perfectly compatible with the current implementation except for the deprecation warnings emitted by the existing codes when being run on Ruby Specifically When keyword arguments or hash object are provided devise helper methods delegate its argument and keyword arguments to ActionControllerTestCaseget post etc for current implementation warnings are emitted with Ruby When no keyword arguments are given with Ruby both implementation current vs new passes its argument with empty hash with Ruby both implementation current vs new passes its argument only the behavior differs from that of older rubies but both new and current implementation shows this behavior change Delegated methods can run without problems in all versions of Ruby the latter case is the only corner case With Ruby we pass over empty hash to ActionControllerTestCase but it does no harm as it is interpreted as empty keyword args with Ruby backup To demonstrate how they compare and for my own peace of mind I created a few delegation test cases emulating current implementation and new implementation as well as cases about how they compare against each other These cases are tested against Ruby upto with similar environment with devise Please feel free to check in case you are interested Hope that helps Hey On this Wiki very useful something is missing for the reset password process devise databaseauthenticatable resetpasswordkeys email yourkeyid Without that we can send reset emails for a user from sub domain on sub domain Bests Pretty much what it says on the tin See here for more information Closes As per this recent blog post is Devise susceptible to the same attack ruby Note the Turkish dotless i in G thub JohnG thubcomtoLowerCase JohnGithubcomtoLowerCase true Essentially Github were doing ruby user getuserfromvalidemailparams email sendresetemailparams email instead of sendresetemailuseremail ref I am not proficient enough to inspect the Devise source myself but figured it would be safer to ask the question than not It would be great if there was a way to make the configparentcontroller a bit more dynamic specifically I would like to see the parent controller behave in a similar fashion to configscopedviews true The advantage of being able to scope parent controller is that we could quite easily streamline our perscope level controller logic and have it trickle down to the various devise controllers Consider something like the following Controller configuration Configure the parent class to the devise controllers resources not listed here will default to DeviseController configscopedparentcontrollers admin AdminsController class AdminsController ApplicationController layout admin beforeaction authenticateadmin end The benefit of this is that we dont have to pollute the ApplicationController with a bunch of custom logic to dynamically set things like the layout based on the scope and then we can nicely encapsulated frontend logins for regular users and backend logins for admins without having to resort to a library like ActiveAdmin