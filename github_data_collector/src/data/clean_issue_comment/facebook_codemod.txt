Im trying to run codemod on my codebase and it is choking with Traceback most recent call last File homeezyanglocalpytorchtmpenvbincodemod line in module sysexitmain File homeezyanglocalpytorchtmpenvlibpython sitepackagescodemodbasepy line in main runinteractiveoptions File homeezyanglocalpytorchtmpenvlibpython sitepackagescodemodbasepy line in runinteractive for patch in suggestions File homeezyanglocalpytorchtmpenvlibpython sitepackagescodemodbasepy line in generatepatches lines listopenpath File homeezyanglocalpytorchtmpenvlibpython codecspy line in decode result consumed selfbufferdecodedata selferrors final UnicodeDecodeError utf codec cant decode byte xe in position invalid continuation byt It would be very nice if it told me what file had the bad encoding Is it possible to add an option to ignore binary files automatically rather than exiting For example sh codemod ignorebinary foo bar Currently the only way to avoid stopping replacement at binary files is to specify all file extensions known to be text files although its a kind of tedious For example I often do this sh codemod extension tsmdjstsxjsxtxtjson foo bar This feature might be related to There is a v in PyPI And there is not a v in so I can not quickly see where v is in the git history Can we get a new tagged release ideally with recent commits for Python test support Id like to submit this into openSUSE package collection WIP at the doctest pass on Python Tumbleweed but emit a few deprecation warnings I typically have to run codemod on several directories in my working repository with the d option I would run it in the root of my working repository but it includes some large irrelevant files that slow codemod down Is there a way to have it obey gitignore This PR also has a small fix for Python compatibility I m using with this search and this string Datenow and it does not match However when using that in codemod it is matched How can I tell codemod to respect the character codemod m d lib extensions js Im trying to use this package on windows Theres no mention of the dependency on curses and fcntl in the readme or in a requirementstxtPipfile I was able to get curses installed from here but theres no fcntl on that page Heres the call Im using thats asking for it codemod extensions rb count sgetdeleteput Traceback most recent call last File C Users CM AppData Local Programs Python Python Scripts codemodscriptpy line in module loadentrypointcodemod consolescripts codemod File C Users CM AppData Local Programs Python Python lib sitepackages pkgresources initpy line in loadentrypoint return getdistributiondistloadentrypointgroup name File C Users CM AppData Local Programs Python Python lib sitepackages pkgresources initpy line in loadentrypoint return epload File C Users CM AppData Local Programs Python Python lib sitepackages pkgresources initpy line in load return selfresolve File C Users CM AppData Local Programs Python Python lib sitepackages pkgresources initpy line in resolve module importselfmodulename fromlist name level File C Users CM AppData Local Programs Python Python lib sitepackages codemod py egg codemod initpy line in module from codemodbase import noqa File C Users CM AppData Local Programs Python Python lib sitepackages codemod py egg codemod basepy line in module import codemodterminalhelper as terminal File C Users CM AppData Local Programs Python Python lib sitepackages codemod py egg codemod terminalhelperpy line in module import fcntl ModuleNotFoundError No module named fcntl Would it be possible to detect windows and use naive terminal handling in that case comma delimited list of directory and file globs to ignore ala gitignore or ack would make this my numberone goto My example is Im in JS currently so I want to be able to exclude things like nodemodules packagelockjson build This mostly only applies to usage as a library although in principle one could hit it with a large multiline regexp It would be really nice if instead of just showing the entire removed block as red and the entire added block as green codemod could show a more concise diff This would be especially useful for codemods that reorder lines for example by moving a line up a few lines right now they show a big unreadable block of red and green but they could just show a single red and a single green line In an ideal world they could even allow diffsplitting like git add p but I dont think thats particularly compatible with the current Patch architecture When making a large mostlystraightforward codemod clicking enter in rapid succession is the only tolerable modus operandi Sometimes I see things that look potentially problematic but my feeble human brain doesnt detect this until my eager pinky has already pressed enter It would be nice to have a b or maybe u shortcut to the previous diff and reevaluate Im not sure how straightforward that would be to implement 