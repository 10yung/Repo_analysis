Attempting to compile WDT against modern versions of Folly results in the following error when linking wdtbin aliased to wdt shell libfolly wdtso undefined reference to follystrlcpychar char const unsigned long It seems that the source files that define follystrlcpy namely langCStringcpp need to be included explicitly It also appears that this problem has already been addressed by a fork of WDT Hi Guys Im trying to build wdt inside a docker here is my dockerfile FROM ubuntulatest RUN aptget update aptget upgrade y aptget install y git RUN git clone RUN aptget install y libgoogleglogdev libboostalldev libdoubleconversiondev libjemallocdev cmake gcc libssldev RUN aptget install y g RUN git clone WORKDIR wdt RUN cmake DBUILDTESTINGon ENV CTESTOUTPUTONFAILURE RUN make test RUN make install I get the following error when building WDT on both Ubuntu xx and Fedora Scanning dependencies of target wdt Building CXX object CMakeFileswdtdirutilWdtFlagscppo Building CXX object CMakeFileswdtdirWdtcppo Linking CXX shared library libwdtso Built target wdt Scanning dependencies of target wdtbin Building CXX object CMakeFileswdtbindirwdtCmdLinecppo Building CXX object CMakeFileswdtbindirutilWdtFlagscppo Building CXX object CMakeFileswdtbindirWdtcppo Linking CXX executable binwdtwdt libfolly wdtso undefined reference to follystrlcpychar char const unsigned long collect error ld returned exit status CMakeFileswdtbindirbuildmake recipe for target binwdtwdt failed make binwdtwdt Error CMakeFilesMakefile recipe for target CMakeFileswdtbindirall failed make CMakeFileswdtbindirall Error Makefile recipe for target all failed make all Error Packages installed on Ubuntu cmake libjemallocdev libgoogleglogdev libboostsystemdev libdoubleconversiondev openssl buildessential libboostalldev libssldev libgtestdev Packages installed on Fedora cmake boostdevel openssl jemalloc glogdevel doubleconversiondevel make automake gcc gccc kerneldevel gtestdevel openssldevel Cmake output The C compiler identification is GNU The CXX compiler identification is GNU Check for working C compiler usrbincc Check for working C compiler usrbincc works Detecting C compiler ABI info Detecting C compiler ABI info done Detecting C compile features Detecting C compile features done Check for working CXX compiler usrbinc Check for working CXX compiler usrbinc works Detecting CXX compiler ABI info Detecting CXX compiler ABI info done Detecting CXX compile features Detecting CXX compile features done Boost version Found the following Boost libraries system filesystem Looking for pthreadh Looking for pthreadh found Looking for pthreadcreate Looking for pthreadcreate not found Looking for pthreadcreate in pthreads Looking for pthreadcreate in pthreads not found Looking for pthreadcreate in pthread Looking for pthreadcreate in pthread found Found Threads TRUE Found OpenSSL usrlibx linuxgnulibcryptoso found version Looking for posixfallocate Looking for posixfallocate found Looking for syncfilerange Looking for syncfilerange found Looking for posixmemalign Looking for posixmemalign found Looking for posixfadvise Looking for posixfadvise found Looking for clockgettime Looking for clockgettime found Looking for memrchr Looking for memrchr found Looking for pthreadatfork Looking for pthreadatfork found Looking for C include linuxsockiosh Looking for C include linuxsockiosh found Performing Test FOLLYUSELIBCPP Performing Test FOLLYUSELIBCPP Failed Performing Test FOLLYHAVEWEAKSYMBOLS Performing Test FOLLYHAVEWEAKSYMBOLS Success Configuring done Generating done Build files have been written to varappwarpclibuildwdtbuild This is a proposed fix for Thanks for very nice tool very useful wdt commandline tool lacks ability to accept data from stdin I suspect that wdt library itself cannot accept input from stdin I do have a case when I need to avoid writing very large intermediate data set to a disk It would be perfect if I can pipe data to wdt stdin I do produce data with high enough speed to saturate network link Seems to be solution would be to include wdt library and use wdt API I have not look on API but pretty sure I will be able to feed wdt library with memory buffers and have them sent over to a remote file From other side it would be much less involved approach if wdt commandline tool can accept data from stdin Please let me know if adding stdin to wdt is feasible And if it will be a PR will it be accepted Having a subset of folly build with wdt makes packaging the library and utils difficult with package managers Is it possible supported to build against a full version of folly Relevant to TITLE WAS Could folly complete be used rather than folly wdt These changes fix TravisCI builds on macOS and partially on Linux The only thing left to do on Linux is This pull request also requires The tests have hardcoded as the loopback address This is all well and good until you run tests in docker without extra sysctl or in TravisCI Linux where ipv is disabled It should probably try if fails to cover those cases