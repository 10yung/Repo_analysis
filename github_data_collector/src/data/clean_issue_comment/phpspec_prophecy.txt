Prophesizing this class will result in could not reflect class Symfony Component Messenger Envelope as it is marked final cc ciaranmcnulty I was working in some exercises using TDD and I needed to write an example like this php rule thisprophesizeMultipleThreeRuleclass ruleconditionArgumentthatfunctionarg return inarrayarg willReturntrue The idea is guarantee that a value is in array php rulecondition returns true Then I implemented an easier way to get to same result php rule thisprophesizeMultipleThreeRuleclass ruleconditionArgumentin willReturntrue And I also I implemented the opposite way when value is not in array php rule thisprophesizeMultipleThreeRuleclass ruleconditionArgumentnotIn willReturnfalse Something in broke PhpSpec functionality I cant look at it right now it may be due to the changes we made to ExactToken Summary When you want to use DateTime object in PHPSpec tests as dummy object then the test fails with the following error message errErrorCall to a member function sub on null The Problem Lets suppose we have two classes Subject and Collaborator and we are writing spec for the former Source code looks like this php php specSubjectSpecphp namespace spec use PhpSpec ObjectBehavior use Subject class SubjectSpec extends ObjectBehavior function itcanhandledatetimedummies DateTime date Collaborator c thisbeConstructedWithc ctakeADatedatewillReturntrue thisdoSomethingdateshouldReturntrue php php srcSubjectphp class Subject private c public function constructCollaborator c thisc c public function doSomething DateTime date return thisctakeADatedate php php srcCollaboratorphp interface Collaborator public function takeADate DateTime date composerjson json name gbuzaspectest authors name G za B za email bghomegmailcom require phpspecphpspec autoload psr src Finally execute the tests vendorbinphpspec run Actual Result Subject it can handle date time dummies exception errErrorCall to a member function sub on null has been thrown specs example broken Expected Result specs example passed Explanation Prophecy uses the DateTimeComparator class from sebastiancomparator package from the ExactValueToken class in order to compare the actual date argument with the argument of the promise object That worked fine before or earlier versions But in methods of the DateTime class are chained like expectedsetTimezonesub Since expected is not a real DateTime object but actually a dummy test double all of the methods will return null by definition Therefore expectedsetTimezone becomes null thats why sub cannot be called on that Since our compared object is not a real DateTime it should not be compared by the DateTimeComparator The condition to support an object is to check the inheritance chain it will be accepted for comparison which is fine when the real DateTime class is extended Hi There is an issue in sebastiancomparator version until version PHP Fatal error Declaration of SebastianBergmann Comparator DOMNodeComparatorassertEqualsexpected actual delta canonicalize false ignoreCase false must be compatible with SebastianBergmann Comparator ObjectComparatorassertEqualsexpected actual delta canonicalize false ignoreCase false array processed Array in homepoldevgitpsrcasvendorsebastiancomparatorsrcDOMNodeComparatorphp on line The issue comes from version of sebastiancomparator See those two files Their signature is different and when installing using composer flag preferlowest it fails That issue has been fixed in version see commit Therefore I propose to raise the minimal version to instead of Link to PR I love prophecy I use this library a lot I have seen strange behavior when trying to mock method like this methodName so I looked in code base and I found that exist a whitelist of reflectable methods I would mock these methods like doRequest from soap extlibrary for example with in the name If this behavior can be changed it would be a great thing if you agree I could make a PR Example php class Test void function test php test thisprophesizeTestclass testtestshouldBeCalled testReveal testreveal testRevealtest Output php Double Test P No calls have been made that match Double Test P test but expected at least one Class in prophecy that contains a whitelist php class ClassMirror public static reflectableMethods array construct destruct sleep wakeup toString call invoke private function reflectClassToNodeReflectionClass class Node ClassNode node foreach classgetMethodsReflectionMethodISPUBLIC as method if strposmethodgetName inarraymethodgetName selfreflectableMethods continue Reproduce with php phpcsfixer rulesnativefunctioninvocation fix allowriskyyes phpcsfixer from Details I am using PHPStorm and using prophecy via PHPUnit cause a lot of warning because on wrong argument when using the reveal return value directly What I end up doing it this PHP prophecy thisprophesizeConnectionclass var Connection connection connection prophecyreveal object new Objectconnection To do this a bit cleaner a and using the phpstormmeta this could be change to PHP prophecy thisprophesizeConnectionclass object new Object prophecyrevealConnectionclass This work but I have a warning because the reveal method doesnt have any argument Adding a file phpstormmetaphp with this would solve that PHP php namespace PHPSTORMMETA STATICMETHODTYPES Prophecy Prophecy ObjectProphecyreveal namespace Prophecy Prophecy class ObjectProphecy public function revealstring class null When in PHP a mocked object get serialized eg php metadataMock thisprophesizeTestclass metadata metadataMockreveal some call to a function which does the following serializemetadata The following exception is thrown Exception Serialization of ReflectionParameter is not allowed Related PHP migration 