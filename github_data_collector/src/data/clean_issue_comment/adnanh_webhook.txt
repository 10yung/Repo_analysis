Following the documentation for implementing a NOT rule I need to check and make sure the headcommit in the payload is NOT null Webhook is not accepting my NOT rule and Id like to know if there is a known issue with using NOT or if anyone has successfully implemented a NOT rule not match type value value null parameter source payload name headcommit When attempting to match a JSON path for initial setup it would be helpful to know where the path failed This change logs the failed parameter node For example if you are trying to match path abde but you failed to include the c node webhook will log an error parameter node not found de to assist in troubleshooting Copy a simple implementation from the Moby project since importing their package would pull in too many dependencies Fixes At the company where I work we maintain our own Linux servers for a number of clients ndash several hundred across multiple servers We currently use FTP to upload changes to sites but Ive long wanted to change this to a more modern workflow I found your project today and did some local testing ndash it seems really powerful and like itll fit our needs perfectly but I had a few questions about how this would work for a shared hosting environment like ours Lets say I have websites on a server each with its own account and domains I want to set up deployment scripts for each of the sites individually so that each webhook can be triggered independent of each other To accomplish this would I need to set up a unified configuration that contains objects like deploysite deploysite and so on or could I set up a configuration on each account individually If unique configurations can be set up for each account would one instance of webhook need to be running for each account or would one service be able to combine all configurations Would each configuration only be accessible from its own domain or would there be a single unified hooks URL that would allow access to all hooks on the server Please forgive me if these are ignorant questions this is a rather new concept to me and Im not directly involved with server management so Im not sure how this sort of thing typically works The hook package API is public although its not meant to be I have some ideas for changing the hook API but I dont want to be concerned about breaking changes We can wait for the prehook feature branch to land before we do this but I wanted to open the discussion Its time I am trying to perform the following scenario read entire payload save the payload to disk in a temporary file execute a command with temporary file name as argument How can I pass the temporary file name as command line argument for the command to execute Ive reached this stage but it doesnt work Ideally I would not like to use a shell script but call jq directly yaml id echo executecommand jq commandworkingdirectory passargumentstocommand source string name passfiletocommand source entirepayload name payload and the output webhook s localhost POST hooksecho webhook d writing env HOOKPAYLOAD file varfoldersc sj fj d s qn sxk mr gnTHOOKPAYLOAD webhook d executing jq usrlocalbinjq with arguments jq and environment HOOKPAYLOADvarfoldersc sj fj d s qn sxk mr gnTHOOKPAYLOAD using as cwd webhook d command output webhook d removing file varfoldersc sj fj d s qn sxk mr gnTHOOKPAYLOAD webhook d finished handling echo Sometimes it might be necessary to extend webhook with custom logic before the hook gets invoked In order to support that in modular case I propose implementing a context provider command support in webhook The context provider command would be executed whenever the hook gets matched It would receive via STDIN a JSON representation of an object with following structure json hookID ID OF THE HOOK THAT GOT MATCHED method METHOD USED TO TRIGGER THE WEBHOOK ie GET POST PATCH PUT body RAW BODY headers HEADER VALUE VALUE query PARAM VALUE host HOST THAT CLIENT REQUESTED URI ROUTE THAT CLIENT REQUESTED remoteAddress IP AND PORT OF THE CLIENT The context provider command is expected to output a valid JSON representation of an object which would be then stored in a special source named context The special source would be usable in all places where one is able to use payload source This would allow users to implement custom payload parsers to extract required fields or inject custom values that can be computed in runtime ie custom signature verification etc and pass them along to webhooks trigger rules etc The working implementation is available at the featurecontextprovidercommand branch Whats missing is documentation and tests Any suggestions or comments moorereason I added a Makefile target rule to print a little help message for the user Here is how it looks like Screenshot I want to suggest an improvement on how the examples are currently organized Instead of having a markdown file with a list of examples this I think it would be better to have different directories each one with the configuration file or different files Then the list of examples included here could be changed to include these files using a tool like markdownmagic or kept as it is If you like the idea I could work on this