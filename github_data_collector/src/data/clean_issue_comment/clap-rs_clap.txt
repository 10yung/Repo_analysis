I have used git subtree merge to merge clapderive into this repo thus making sure we dont lose history of clapderive To check that the repo is merged correctly we compare the hashes The last nonmerge commit here is where as the last commit in clapderive is As you can see they are both the same is the merge commit And then is the commit which integrates both the repos together and sets up CI cc DylanDPC CreepySkeleton Make sure you use the merge option instead of squash when merging this PR Otherwise all this git history would be lost The reason to do this is described well in issue It is also a recommendation of the Rust book itself I have run the tests with no failures cargo test nodefaultfeatures test result ok passed failed ignored measured filtered out cargo test features yaml unstable test result ok passed failed ignored measured filtered out Why Lets say you want to write a CLI program that requires the user to log in with a username and password eg a CLI API for some web service This is perfectly doable with arguments but it may be preferred to prompt the user to supply these when they start the program as follows exampleprogram username beepboop password Successfully logged in Or lets say you have an option that can be dangerous to enable in certain circumstances and you want to ask the user if theyre sure like rm rf does exampleprogram danger Are you sure you want to do the dangerous thing yN Its not hard to write this logic on your own but given that these are rather common usecases it would be convenient to include this functionality within Clap What I propose adding a few simple prompting functions for handling common prompting situations Heres a rough list promptifabsentprompt str Asks the user to supply a value for this argument if they didnt at run time Displays prompt on the line where they type in the first example above the prompts would have been username and password respectively suggestifabsentprompt str default Fn OptionString Like promptifabsent but takes a function that can try to find a sensible default to suggest to the user which can then be chosen by pressing enter without typing Useful when youre not sure the default makes sense eg if its found from an envar or something so you want to run it by the user to make sure ensureifprompt str argid Key val str default YesNoNone and similar ensureifs Asks the user if theyre sure when theyve set vals with a yn prompt The user can select the default option by just pressing enter promptsecretprompt str like promptifabsent but doesnt show what youre typing These can all be gated behind a prompts feature or something to keep the core functionality simple I realise theres been a little pushback on stuff like this in the past a few years ago but I do genuinely think it would be a nice addition A lot of great CLI building tools in other languages include prompting functionality so adding a few convenience methods for it reduces the friction required to port existing things over to Rust Im happy to implement this myself if theres interest Note Im aware of but the changes they suggest are much more significant and have potentially quite wide implications so I consider it a separate matter Id love to see that get added though P Summary Implement serdeSerializeDeserialize for clapApp so it could be deserialized not only from a YAML file but from any other format Motivation Currently yaml supports deserializing only from YAML via Appfromyaml This restricts users to only the one blessed format while the layout of clapApp is pretty simple on its own and can be expressed in many config formats such as JSON TOML plist to name a few Supporting only the chosen one format is kind of inane nowadays when we have serde which handles the differences between formats in a generic way Not to mention a number of YAML is too WTFfull format for config files considerations Some users myself included would happily move to TOML if it was supported outofbox User experience As for users of clap who only interested in YAML nothing would change From user experience side theres no actual difference between rust let yml loadyamlfileyml let app Appfromyaml yml and rust let config stdfsFileopenfileymlexpectNo fileyaml let app App serdeyamlfromreaderconfigunwrap But users interested on other formats like TOML JSON you name it could really make use of this feature Implementation I gave a quick lookover to App and Arg layout and Im fairly certain that Serialize and Deserialize can be simply derived Related issues Serializing to deserializing from JSON kbknapp agreed this feature would be pretty useful use serdeyaml since it provides much more useful error messages Not sure if v xx PRs are still being accepted Please close if thats not the case This PR adds the version message to the VersionDisplay error that is produced The same way that the help message is added to the HelpDisplayed error As of Rust macro changes there is no need to call macrouse extern crate foo to import the macros from crate foo This pull request removes mentions of macrouse from documentation examples tests and benchmarks in favor of importing the macros directly The PR cuts down the number of instances of macrouse from down to one required for importing incrate macros macro changes CreepySkeleton wrote in I think that staying uniform is quite important here lets just go for exclusivebool 