When I try to run cargo nightly test I get a whole slew of errors error E feature has been removed homejoshuacargoregistrysrcgithubcom ecc db ec mutagenplugin srclibrs featurepluginregistrar quote rustcprivate customattribute feature has been removed error E unresolved imports syntaxfold syntaxfold homejoshuacargoregistrysrcgithubcom ecc db ec mutagenplugin srclibrs use syntaxfoldself Folder ExpectOne no fold in the root could not find fold in syntax error cannot find macro quoteexpr in this scope homejoshuacargoregistrysrcgithubcom ecc db ec mutagenplugin srclibrs let mut mutexpression quoteexprselfcx lit error E cannot find type TypeBinding in this scope homejoshuacargoregistrysrcgithubcom ecc db ec mutagenplugin srclibrs fn tybindingsequala TypeBinding b TypeBinding inout bool bool not found in this scope error E cannot find type TypeBinding in this scope homejoshuacargoregistrysrcgithubcom ecc db ec mutagenplugin srclibrs fn tybindingsequala TypeBinding b TypeBinding inout bool bool not found in this scope error aborting due to previous errors Some errors have detailed explanations E E E For more information about an error try rustc explain E error Could not compile mutagenplugin cargo nightly version cargo nightly f rustup run nightly rustc version rustc nightly d f f mutagenplugin version v My code in srcmainrs cfgattrtest featureplugin cfgattrtest pluginmutagenplugin featurecustomattribute cfgtest extern crate mutagen pub mod lex more code follows My code in srclexrs cfgattrtest mutate lots of code I noticed a few comments along the lines of trying to avoid mutating into infinite loops While of course this is good to avoid too many spurious tooweak mutations its kind of theoretically impossible in general The current implementation leaks processes that consume CPU forever Its easy to fix as described in the title I ran into this with the following test case mutate fn finiteloop usize let mut x Sometrue let mut n while xissome if xunwrap REPLACEWITHTRUE here triggers it x Somefalse else x None n n mutate pub fn iflet bool let x Sometrue if let Someb x b else false error expected expression found statement let srctestrs if let Someb x expected expression note variable declaration using let is a statement pub fn counttofive usize let xs vec true false true false true let mut i for x in xs i i compiles normally but with mutate fails with error E stdvecVecbool is not an iterator srctestrs mutate stdvecVecbool is not an iterator help the trait stditerIterator is not implemented for stdvecVecbool note required by mutagenforloop error aborting due to previous error It works only if i explicitly put xsiter mutate pub fn addfivei usize usize i fails to cargo test with error custom attribute panicked srctestrs mutate help message expected expression error aborting due to previous error If you change the plus to a minus it produces instead error E mismatched types srctestrs mutate expected found usize note expected type found type usize error E mismatched types srctestrs mutate help try adding a semicolon expected found usize note expected type found type usize error E cannot apply unary operator to type usize srctestrs mutate cannot apply unary operator note unsigned values cannot be negated error aborting due to previous errors With multiply as the second operation instead error E type mismatch resolving i as mutagenMulDivOutput usize srctestrs mutate expected i found usize error aborting due to previous error f for moth mutagen and mutagenplugin rustc nightly e bf e error E this pattern has fields but the corresponding tuple variant has field homebbigrascargogitcheckoutsmutagen aecd f f pluginsrclibrs TyKindImplTrait ref bounds expected field found error E this pattern has fields but the corresponding tuple variant has field homebbigrascargogitcheckoutsmutagen aecd f f pluginsrclibrs TyKindImplTrait ref abounds TyKindImplTrait ref bbounds expected field found error E this pattern has fields but the corresponding tuple variant has field homebbigrascargogitcheckoutsmutagen aecd f f pluginsrclibrs TyKindImplTrait ref abounds TyKindImplTrait ref bbounds expected field found error aborting due to previous errors mutagen dfc f db f d c a a cfd nightlyx unknownlinuxgnu default rustc nightly e bf e This builds without the cfgattrtest mutate rust enum One Valuef impl One cfgattrtest mutate fn something self f match self OneValuev v error E cannot find value selfmutated in this scope error E type f cannot be dereferenced srcmainrs v error aborting due to previous errors Currently mutagen uses the old unstable quotemacros which are on the way out as rust issue made me aware We probably want to convert mutagen to use the quote crate soonish On a completely fresh project with mutagen as a devdependency grep B mutagen Cargotoml devdependencies mutagen I see the following error when I run anything that attempts to build mutagen RUSTBACKTRACE cargo test Compiling mutagen v error failed to run custom build command for mutagen v process didnt exit successfully homedanielpersonaldevtmptargetdebugbuildmutagen d cc a buildscriptbuild exit code stderr thread main panicked at called Resultunwrap on an Err value Os code kind NotFound message No such file or directory libcoreresultrs stack backtrace stdsysunixbacktracetracingimpunwindbacktrace at libstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at libstdsyscommonbacktracers at libstdsyscommonbacktracers stdpanickingdefaulthookclosure at libstdpanickingrs stdpanickingdefaulthook at libstdpanickingrs stdpanickingrustpanicwithhook at libstdpanickingrs stdpanickingcontinuepanicfmt at libstdpanickingrs rustbeginunwind at libstdpanickingrs corepanickingpanicfmt at libcorepanickingrs coreresultunwrapfailed at checkoutsrclibcoremacrosrs coreresultResultT Eunwrap at checkoutsrclibcoreresultrs buildscriptbuildmain at buildrs stdrtlangstartclosure at checkoutsrclibstdrtrs stdpanickingtrydocall at libstdrtrs at libstdpanickingrs rustmaybecatchpanic at libpanicunwindlibrs stdrtlangstartinternal at libstdpanickingrs at libstdpanicrs at libstdrtrs stdrtlangstart at checkoutsrclibstdrtrs main libcstartmain start This was happening with nightly in the middle of last week which was when I first attempted to use mutagen and on the latest nightly build rustup show Default host x unknownlinuxgnu installed targets for active toolchain wasm unknownunknown x unknownlinuxgnu active toolchain nightlyx unknownlinuxgnu default rustc nightly e bf e If a self arg will be both exchanged and cloned in different mutations the latter mutation will make the former ineffective Solving this requires tracking if self was exchanged and changing the ident accordingly