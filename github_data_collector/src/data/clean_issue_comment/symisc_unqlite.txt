Hi there Im running a performance comparison between several databases using the ioarena benchmarking tool Im running the tool with the following parameters valgrind toolmassif ioarena m sync D unqlite v B set n What I found surprising is that memory usage grows linearly up to MB which seems quite a lot compared with other DB engines run in the same benchmark upscaledb MB sqlite MB rocksdb MB I wrote the unqlite driver for ioarena myself so it might be possible the the problem is in the driver however running valgrind with the leakcheck tool doesnt report any leaks it appears that all the RAM is properly freed when the DB is closed Given that the FAQ states that the DB should also be usable in embedded devices I wonder if such a high memory usage could be due to some bug On the homepage it says threadsafe and fully reentrant but if you look at the compiler flags it seems to indicate that it is not threadsafe by default UNQLITEENABLETHREADS This option controls whether or not code is included in UnQLite to enable it to operate safely in a multithreaded environment The default is not All mutexing code is omitted and it is unsafe to use UnQLite in a multithreaded program When compiled with the UNQLITEENABLETHREADS directive enabled UnQLite can be used in a multithreaded program and it is safe to share the same virtual machine and database handle between two or more threads Could you help me understand the difference Hello I could not find a source of information about when to place strategic commits It appeared to me that unqlite would not commit anything to the file storage until I explicitly commit or close the database Is there some resource talking about ways to avoid a huge commit on closing the database I embedded unqlite into my c application and from my c call back function an exception can be thrown that only c can catch it so on any exception thrown by my c callback function I need away to free all acquired resources by the unqlitecontext I managed to do so by providing a global callback that gives me the context and stack frame and top stack frame and arguments I modified VmByteCodeExec and added calls to global callback xAbortFuncDelegate lxAbortFunc xAbortFunc make c have mapping from ctxaArgspStackpTop to be used to free resources if lxAbortFunc lxAbortFunc sCtx aArg pTos pStack before the original line that calls the embedded c functions registered from c rc pFuncxFunc sCtx intSySetUsed aArg jx value SySetBasePtr aArg to make c free mapping info from ctxaArgspStackpTop after releasing the resource acquired by the unqlitecontext execution if lxAbortFunc lxAbortFunc sCtx aArg pTos pStack after and from my callback function if an exception is thrown I call a c function that free all resources then rethrow the exception VmReleaseCallContextsCtx SySetReleaseaArg while pTos pStack jx MemObjReleasepTos pTos so what I need is a built in way to do the task unqlite is considered to be the nosql counterpart of sqlite There are however some features available within sqlite which I also would like to see in unqlite Feature Request Attach Implementation of a attach method This attach method will take a filepath as argument It will attach the provided filepath to the current database connection This allows to use a single database connection to interact with multple unqlite files Also it might allow JX selection over collections in multiple unqlite files unqlite is considered to be the nosql counterpart of sqlite There are however some features available within sqlite which I also would like to see in unqlite Feature Request Backup Implementation of a backup method This backup method will take a filepath as argument It will take the write lock on the unqlite file so all readers have to wait Then it will copy the entire unqlite to the provided filepath as a backupsnapshot This will allow to create a backup of a unqlite database without shutting down all connections to release the file details reference look at Bug maybe dirty pages not updated cause key fetch error maybe not update pages when overwrite keys value 