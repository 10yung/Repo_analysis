As far as I can tell the OnTransition event fires after OnExit methods have been called and before OnEntry methods have been called It would be really useful esp for debugging logging for example to be able to track Im about to start calling OnExit methods for this transition and Im about to start calling OnEntry methods for this transition It also feels like it ought to be quite easy to add to the API Is this something youd be willing to add andor would accept a PR for I think the answer is currently No But It wouldbe great to have that confirmed Assuming Im right then would it be possible to get this added When a state machine is configured with FiringModeImmediate and a trigger is fired in OnEntry the resulting state is wrong Sample program C using System using Stateless namespace TestStateless class Program enum State S S S enum Trigger T private static StateMachineState Trigger sm new StateMachineState TriggerStateS FiringModeImmediate static void Mainstring args smConfigureStateS PermitTriggerT StateS smConfigureStateS OnEntryOnEntryS PermitTriggerT StateS smConfigureStateS OnEntryOnEntryS PermitTriggerT StateS SystemConsoleWriteLinestate before smState smFireTriggerT SystemConsoleWriteLinestate after smState var k ConsoleReadKey private static void OnEntryS SystemConsoleWriteLineOnEntryS smFireTriggerT private static void OnEntryS SystemConsoleWriteLineOnEntryS Program output with stateless wrong state before S OnEntryS OnEntryS state after S Program output with stateless as expected state before S OnEntryS OnEntryS state after S Feature Request When using methods such as OnTransitionedAsync and OnUnhandledTriggerAsync it would be useful if these returned a Task to make them awaitable This would greatly help when unit testing an asynchronous state machine Note All other async methods in StateMachineAsynccs already return a Task Hi I was doing some prototyping for my work and come across this unexpected behaviour Since its working in the version just fine and occurs since version I assume its a bug I have the full example as well you can get it here Great lib and thanks in advice nobody cared to fix it for a year Hi team I need async external state storage and am willing to do the work and submit a PR for it I basically need a StateMachine constructor that looks something like summary Construct a state machine with async external state storage summary param namestateAccessorA function that will be called to read the current state valueparam param namestateMutatorAn action that will be called to write new state valuesparam public StateMachineFuncTaskTState stateAccessor FuncTState Task stateMutator We would then need two mutually exclusive sets of state storage readerswriters sync and async Async storage access causes a significant ripple effect through the StateMachine helper methods To retain backwards compatibility with the current mix of sync state storage async transition methods in StateMachine I propose creating a separate AsyncStateMachine class that has the above constructor and is async all the way through Before I get too far does anyone have any feedback or strong opinions on this approach Hello since updating to v something in the behaviour of the state machine has changed and a single unit test which worked with stopped passing Here is what I am doing in my unit test Create a statemachine and put it in the state A Fire an Operational trigger which should move it to state B and into substate C through initial transition of state B Before moving to C there is an OnEntry for B which calls a function that should Fire an ActOperationalErrorTrigger trigger and move the machine to state E error I provoke this behavour using Moq library using a callback like this controllermockAsIMOTIONCONTROLLERSetupm mSetExposureDefaultsAndStopCallback machineFireinputControlsTriggersCommonActOperationalErrorTrigger Function Error on Exposure defaultsVerifiable note SetExposureDefaultsAndStop is the function that is called as part of Bs OnEntry What I am seeing instead is that I get an exception saying that No valid leaving transitions are permitted from state Eerror for trigger ActOperationalErrorTrigger Consider ignoring the trigger What I also see upon debugging is that the OnEntry or the contents of the OnEntry seems to be called twice inside state B And executing SetExposureDefaultsAndStop function second time fires the same ActOperationalErrorTrigger another time but since the first firing of ActOperationalErrorTrigger already moved state to Eerror the Eerror state is not prepared to treat the ActOperationalErrorTrigger trigger casuing the above exception I know I can work around by addin additional state configrations for the Eerror state however it seems this will be patching unclear behavour espectially since it was working just fine in version Could you please look into this or at least let me know if some behavouor change is expected by upgrading to from Add note that stateless Targets NET Standard too Furthermore I built stateless with VS no problem I really love this amazing library and appreciate all of the contributors hard work I noticed the release was published to nuget I went to see what changed and found no release notes No biggie so I checked the repo to see what changes were made Ill admit I was surprised to find it appears the release was created from the dev branch its the only branch that has recently changed but even more so theres no way to coordinate the code from to the repo as the commit isnt tagged The build indicator in the readme links to appveyor that shows a lot of builds but no new releases If I switch to the appveyor dev builds I can see multiple builds create a Stateless nupkg Perhaps Ive missed something but right now Im hesitant to upgrade Any thoughts would be appreciated