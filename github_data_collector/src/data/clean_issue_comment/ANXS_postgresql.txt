Im getting this error TASK anxspostgresql PostgreSQL Check binary version fatal appserver FAILED msg Failed to set permissions on the temporary files Ansible needs to create when becoming an unprivileged user rc err chown changing ownership of vartmpansibletmp Operation not permitted nchown changing ownership of vartmpansibletmp AnsiballZcommandpy Operation not permitted n For information on working around this see PLAY RECAP appserver ok changed unreachable failed skipped rescued ignored for this playbook hosts appserver become yes roles role geerlingguynginx role anxspostgresql role anxsmonit and when I check the version psql V psql PostgreSQL Debian pgdg although the version in mainyml was postgresqlversion In this file I havent checked all the others except pg the choosesync var wasnt being specified This copies the logic to render the string from the pg template Docs Just writing to let you know that I have successfully used this role on ubuntu What I observed On a fresh ubuntu install but postgresqlclient manually preinstalled I ended up with two postgresql instances running One was ubuntus and the other was this roles set on port presumably because was taken already I am currently not sure whether the was installed by this role or inadvertently by me This in turn made the binary vs database check always fail However I only noticed this after the role kept telling me that there was a binary vs database version mismatch restart needed So I went into the VM made an apt upgrade and THEN rebooted Before the reboot it was a bin vs DB mismatch after the reboot it was bin vs DB mismatch I ended up manually purging everyting postgresqlrelated and then the role set up everything just like I wanted it to Just letting you know so you can add to works maybe list I will retry with a cleaner and more closely inspected deploy next then move to to try there as well Both of the above pending a successful pgbouncer install so hopefully still today However two possible improvements seem to be suggested with this experience It would be cool if the role could check the actual port the installed instance is using Since theres a default listed in the configs there should be a warning that its already being used An error would be even better since we cant ensure that our instance would be running on the desired port Theres no check that theres an existing postgresql instance running that is not using our repository I am somewhat confident I could add both checks myself make a PR but I would appreciate pointers as to where they would be preferred Please note that I am fresh to Ansible but not to bash ubuntu so pointers should be relatively clear about the ansible part which file place within it PostgreSQL passwordencryption is boolean PostgreSQL passwordencryption is enum md default or scramsha Duplicates PR but retains backward compatibility with versions below Setting the postgresqldefaultauthmethod md on a fresh install tells postgres that the default postgres user requires password authentication without first having set up an initial password before hand This is a order of execution issue where the configuration files are provisioned essentially requiring passwords users are attempting to be created but passwords are not set Ideally the order should be user creation should happen first the configurations applied afterwards locking up the database access Minimum test case for generating issue role ansiblerolepostgres postgresqlversion postgresqldefaultauthmethod md postgresqlusers name postgres pass somegeneratedpassword encrypted yes current work around is to accept the default postgresqldefaultauthmethod peer and after the posgres role has run edit the etcpostgresql mainpghbaconf file from local postgres without password local all postgres peer to local postgres without password local all postgres md in another task Ive got a very simple test setup and Im getting this error TASK ANXSpostgresql PostgreSQL Make sure the PostgreSQL users are present fatal default FAILED censored the output has been hidden due to the fact that nolog true was specified for this result This is on a vagrant debian stretch virtualbox The user and database in vars dont get created Heres the playbook hosts all remoteuser root become yes varsfiles varsyml roles role ANXSpostgresql nolog False And here are the vars postgresqlversion postgresqlport postgresqldatabases name testing owner test postgresqlusers name test I believe that default Ident mapping should be like this diff pgidentconf postgresqlpgident comment root is allowed to login as postgresqladminuser mapname rootas postgresqladminuser systemusername postgresqladminuser systemusername root pgusername postgresqladminuser The old package postgresql postgisscripts is no more available Fix PostGIS on PostgreSQL v as per thbar help out if you can after is merged I was just hit by some surprising behavior due to the Ansible variable precedence rules where the includevars block in tasksmainyml overrode my configuration that I had set in play varsfiles Since includevars is at position in that list there are very few options for overriding the configuration in varsRedHatyml Could the role be reworked to respect configuration set in at least step and onwards For reference a similar issue has been brought up in the past 