 I encountered a syntax error I have a little trouble interpreting it Please explain to me the cause of this error This is the code of error Capture Thank you Hello I heard about Boden on Cppcast and it sounds really cool I love the idea of a pure C library that embraces modern C and provides native UIs for the target environments To me this is the right solution for building UIs in C so all my best wishes and support This issue is a proposal to support a key feature of C that has as far as I know never been well supported in a widely used C GUI framework native C exception handling TLDR My undergraduate honors thesis proposes a mechanism to properly support user code throwing arbitrary exceptions in a C application framework and I believe this work could be easily added to Boden The idea is essentially to have user code dynamically register exception handlers by exception type and have the framework implement a central handler function that matches the caught exception to the correct handler This solution places minimal burden on the app developer Boden is attempting to be a modern C GUI framework and good modern C code often throws exceptions so I think having a great story around exception handling would be really neat The paper can be found here Dynamically Registering C Exception Handlers Centralized Handling of C Exceptions in Application Framework Libraries Unfortunately this was my first academic paper so it is quite rambly Sorry about that You might enjoy simply scanning the code in the Appendix which contains a simple example implementation of this idea I wasnt able to find any information on exception handling in your documentation so I might be mistaken but glancing through the source code I think these ideas could be relevant Boden is slightly less of an easy candidate for this than other C gui frameworks could be because the main application runloop a convenient place to put the exception handling isnt in your code its of course instead in either Apples or Androids code However by placing trycatch wrappers around a few key callback points in the Boden code I think this could still be valuable The goal of the work in the paper is to prevent users from having to repeat their exceptionhandling boilerplate across every one of their callbacks For example a purely customwritten terminal UI application might have code that looks like this c int main while true loop forever until the program exits try auto cmd readuserinputcmd if cmd ACTIONX doxactionreadxinput else if catch const BadInputException e cout Error Got bad input egot expected eexpected endl catch return But for a GUI program where the developer is implementing callbacks to hookup their functionality to GUI actions there is no central place for the developer to put the exception handlers so they may have to repeat that handling logic across many different callbacks which is especially annoying if there are several different types that the developer wants to handle The paper essentially proposes having developers dynamically register exception handlers perexceptiontype with the GUI framework which the framework can then match exceptions against whenever an exception escapes user code The crux of this approach relies on a somewhat weird trick where the GUI frameworks handler repeatedly rethrows the exception in a new tryblock where it can be caught by the users registered dynamic handlers Its essentially taking advantage of this somewhat surprising behavior c try throw Something exception object is allocated here catch From here the exception type is unknown try so we enter a new tryblock to try again to find a good handler throw rethrow the exception the runtime still knows the exceptions type even though code in this block doesnt have access to it catchA e the original exception was of type A catchB e the original exception was of type B catch we still do not know the type of the exception the exception object is deallocated here The only addition is that you repeat this tryrethrowcatch sequence in a loop once for each dynamically registered handler calling their tryhandleexception function which is templated for the correct exception type AAAAAANNNNNYYYYYYYWAY sorry for the long post I just got excited when hearing about Boden in the podcast and wanted to share the ideas in that paper because its rare to find a relevant audience Unfortunately Im not working on C much anymore these days instead Im working almost exclusively in julia and I love it but im happy to chat with you about these ideas andor maybe help you implement them in my spare time if its something youre interested in Cheers All the best Nathan Daly Hi Is there any publicly published roadmap for this framework anywhere that I can look Also I tried to join Bodens Google group but I got a response that the group doesnt exist Thanks android studio is so heavy Be nice if there are some document about command line Hi I just downloaded boden framework to play around with it My question is roughly if I would like to integrate with a mapping library like tangrames or mapbox what is the best way to do it using boden TIA See For now I added the following to my CMakeListstxt as a workaround Based on stringCOMPARE EQUAL ENVBODENIOSDEVELOPMENTTEAM isempty ifisempty pollyfatalerror Environment variable BODENIOSDEVELOPMENTTEAM is empty see details endif set CMAKEXCODEATTRIBUTEDEVELOPMENTTEAM ENVBODENIOSDEVELOPMENTTEAM Based on CMakeListstxt iosconfigureappinfoTARGET Authenticator LAUNCHSCREEN LaunchScreen TARGETEDDEVICES IPHONE IPAD IPHONEORIENTATIONS ALL IPADORIENTATIONS ALL URIROLE Editor URIHANDLERS otpauth totp For now only iOS support but there should be a similar feature on Android No documentation was updated and only manual testing was performed By scanning a QR code with an otpauth url and allowing it to open my app see Please let me know if this is a desired feature I can do more work if needed but couldnt really find any contributor guidelines Im just wondering to whats your plans about some features like UI and animations of itself As Boden evolves will you make improvements to the application look in the future using ui libraries such as Material design I think this would open up an even wider space as other non C languages can then bind to your library to write cross platform UIs