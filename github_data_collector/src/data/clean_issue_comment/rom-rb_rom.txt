When using autostruct and a module definition ROM is not respecting the configured types for an association ruby schemaarticles infer true do associations do belongsto profiles as author foreignkey authorid end end class EntitiesArticle Entity entity itself inherits from ROMStruct attribute author EntitiesProfile end ArticleRepositorynewromfirstauthorclass EntitiesAuthor expect an EntitiesProfile reproduction script Directly mapping to the class via mapto will coerce the author field correctly The intention of this PR is to limit runtime deps matrix only to the latest MRI version because it should be enough to verify that things work with crucial deps from master vs latest released versions Unfortunately I dont know HOW to do it yet This sets up our CI to run against TruffleRuby TODO fix broken specs figure out why bundling takes so long Refs Describe the bug Auto registration error uninitialized constant Lib NameError Traceback Traceback most recent call last from apprb in main from Usersmanrbenvversions libruby forwardablerb in autoregistration from Usersmanrbenvversions librubygems gemsromcore libromsetuprb in autoregistration from Usersmanrbenvversions librubygems gemsromcore libromsetupautoregistrationrb in relations from Usersmanrbenvversions librubygems gemsromcore libromsetupautoregistrationrb in loadentities from Usersmanrbenvversions librubygems gemsromcore libromsetupautoregistrationrb in map from Usersmanrbenvversions librubygems gemsromcore libromsetupautoregistrationrb in block in loadentities Usersmanrbenvversions librubygems gemsdryinflector libdryinflectorrb in constantize uninitialized constant Lib NameError To Reproduce Create file apprb ruby require rom configuration ROMConfigurationnewmemory configurationautoregistrationFileexpandpath lib container ROMcontainerconfiguration Create file librelationsusersrb ruby module Relations class Users ROMRelation memory schemainfer true end end Source Run ruby apprb Expected behavior Auto class registration RelationsUsers Your environment Affects my production application NO Ruby version ruby p revision x darwin OS macOS Describe the bug When using a nested combine and views we get an error thrown in the transproc gem Usersshipmanarbenvversions librubygems gemstransproc libtransprocarraycombinerb in block in groupcandidatesbykeys no implicit conversion of Symbol into Integer TypeError Without using the nested combine the data structure is retrieved correctly although obviously without the child data As far as I can tell the data is pulled from the data source correctly We end up with a hash of data that fails the groupby call in transproc To Reproduce ruby usrbinenv ruby require bundlerinline gemfile do source gem rom gem romsql gem romrepository gem drytypes gem sqlite end module Types include DryTypesdefault nominal end rom ROMcontainersql sqlitememory do c cgateways default createtable productgroups do primarykey id String name end cgateways default createtable products do primarykey id String reference String name end cgateways default createtable groupedproducts do primarykey id Integer productgroupid Integer productid end cgateways default createtable allocations do primarykey id Integer productconfigid String name end cgateways default createtable productconfigs do primarykey id Integer productgroupid end cgateways default useloggerLoggernewstdout crelationproductgroups do schemaproductgroups infer false do attribute id TypesInteger primarykey true attribute name TypesString associations do hasmany products view forproductgroups override true combinekeys id productgroupid end end def forallocationsassoc loaded productgroups joinproductconfigs productgroupid id whereproductconfigs id loadedpluckproductconfigiduniq selectappendproductconfigs id asproductconfigid end end crelationgroupedproducts do schemagroupedproducts infer false do attribute id TypesIntegermetaprimarykey true attribute productgroupid TypesInteger attribute productid TypesString end end crelationproducts do schemaproducts infer false do attribute id TypesIntegermetaprimarykey true attribute reference TypesString attribute name TypesString end def forproductgroupsassoc loaded products joingroupedproducts groupedproducts productid products reference wheregroupedproducts productgroupid loadedpluckiduniq selectappendgroupedproducts productgroupid end end crelationallocations do schemaallocations infer false do attribute id TypesIntegermetaprimarykey true attribute productconfigid TypesInteger attribute name TypesString associations do hasone productgroup view forallocations override true combinekeys productconfigid productconfigid end end end crelationproductconfigs do schemaproductconfigs infer false do attribute id TypesIntegermetaprimarykey true attribute productgroupid TypesInteger end end end romrelations products insert id reference ABC name TV romrelations productgroups insert id name Broadcasters romrelations groupedproducts insert id productgroupid productid ABC romrelations productconfigs insert id productgroupid romrelations allocations insert id productconfigid class AllocationRepo ROMRepository allocations def boom allocationscombineproductgroup productstoa end def ok allocationscombineproductgrouptoa end end repo AllocationReponewrom puts repookinspect puts repoboominspect transproc libtransprocarraycombinerb in block in groupcandidatesbykeys no implicit conversion of Symbol into Integer TypeError Expected behavior No error thrown and a correctly combined dataset Your environment Affects my production application NO Ruby version ruby p revision x darwin OS MacOS Describe the bug After following the repository quick start guide specifically the create subsection I attempted to pass an array of hashes to the exposed create method on the repository All array elements were saved to the datasource but only the first saved element was returned To Reproduce Create a new class that inherits from ROMRepository Add the commands create macro to this class Attempt to save an array of hashes that represent the relation which the ROMRepository defined in step handles Inspect the underlying datasource and return value of create Expected behavior Providing that no elements in the input array violate the underlying datasources constraints all input array elements should be saved in the underlying datasource and the return value of create should be an array whose size is equal to the input array and contain representations of each tuple saved in the underlying datasource Your environment Affects my production application NO Ruby version OS Ubuntu Gemfile source gem rake Web framework gem drysystem gem dryweb gem drywebroda gem puma gem rackcsrf gem rack Database persistence gem pg gem rom gem romsql Application dependencies gem drymatcher gem drymonads gem drystruct gem drytransaction gem drytypes gem dryvalidation gem dryview gem slim group development test do gem prybyebug platform mri end group development do gem rerun end group test do gem capybara gem capybarascreenshot gem databasecleaner gem poltergeist gem rspec gem romfactory end The example described here Creating a record along with associated records raises ROMStructMissingAttribute undefined method for ROMStructProCompany x ffed Did you mean attribute not loaded Usersusernamerbenvversions librubygems gemsromcore libromstructrb in rescue in methodmissing Usersusernamerbenvversions librubygems gemsromcore libromstructrb in methodmissing Usersusernamerbenvversions librubygems gemstransproc libtransprocarraycombinerb in block in addgroupstoelement It tries to use operator on ROMStruct while its not defined on it To Reproduce ruby module MyModule class Companies ROMRelation sql gateway gateway autostruct true schemacompanies infer true as procompanies do associations do hasmany prorolegroups as rolegroups end end end end module MyModule class RoleGroups ROMRelation sql gateway gateway autostruct true schemarolegroups infer true as prorolegroups do associations do belongsto procompany as company end end end end module MyModule class CompanyRepository ROMRepository procompanies def createwithdefaultrolegroupscompany company companydup companyfetchrolegroups each do rg rg createdat Timenow rg updatedat Timenow end createcompany procompaniescombinerolegroupscommandcreate createcompanycallcompany OOPS end end end Expected behavior It should not raise error Environment Affects my production application NO Ruby version OS MacOS Mojave Support sharding for SQL databases Examples TBD Resources Sequel supports sharding Fixes This makes sense in case of adapters where key coercion is not required but when it is we ALWAYS need to use an outputschema because it will handle key coercion even when there are no read types defined This already caused issues in romelasticsearch and romhttp both currently override outputschema Relation option as a workaround