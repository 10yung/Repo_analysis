Does the package also support TPUEstimatorAPI In case do you have any documented examples or getting started Getting the following error when attempting to get inputoutput operations Unhandled exception SystemException Can not convert a String into a Operation at TensorflowGraphasgraphelementlockedObject obj Boolean allowtensor Boolean allowoperation at TensorflowGraphasgraphelementObject obj Boolean allowtensor Boolean allowoperation at TensorflowGraphgetoperationbynameString name at ArRobotVisProgramMainString args in filepathtoprogramcs The issue arises from string inputname input string outputname posoutBiasAdd var inputoperation graphgetoperationbynameinputname var outputoperation graphgetoperationbynameposoutBiasAdd Ive installed the Tensorflow binary and binding packages and have tried various different implementations documented online but cannot seem to get it to work Here is the full code using System using SystemIO using NumSharp using Tensorflow namespace ArRobotVis class Program static void Mainstring args Import trained model pb var graph new Graph string dir filepathtopbmodel string pbFile mymodelpb string outputgraph PathJoindir pbFile graphImportoutputgraph Select InputOutput layers of model string inputname input string outputname posoutBiasAdd var inputoperation graphgetoperationbynameinputname var outputoperation graphgetoperationbynameposoutBiasAdd Use model to predict input image var results withSession NDArraytfSessiongraph sess sessrunoutputoperationoutputs new FeedIteminputoperationoutputs nd results npsqueezeresults Im learning the exampls of Tensorflownet in C as hint info Example runner will download all the required files like training data and model pb files but it was not happened when I run the example Object Detection whats wrong with me where can I find the proper files Any help is great This is needed so that dense layers can be specifically named so that the dense layer variable scope names line up with the pretrained models I dont see the mechanism to do this in the TFNet keras layer so for now Ill just make my own little dense layer This is just a heads up that wo fixing this it may be hard to load some pretrained models I have tried GraphDefParserParseFromFileReadAllBytesmodelpath and tfimportgraphdef It works fine to import pb file but at some reason I want to use graphImport method When I use import method shown as below there is no imported graph Its not imported to default graph either I checked the frozen graph model that has operations also csharp just simple logistic graph var modelpath PathCombinemodelfolder frozengraphlogisticpb var graphdef GraphDefParserParseFromFileReadAllBytesmodelpath tfimportgraphdefgraphdef var graph tfGraph bool check graphImportmodelpath DebugLog check print true foreach var op in graphgetoperations DebugLog opname print nothing DebugLogDone foreach var op in tfgetdefaultgraphgetoperations DebugLog opname print nothing also DebugLogDone I used Tensorflow python to build frozen graph and TensorflowNET to run I tested in Visual Studio Hi Ive tried to reuse a pretrained model but failed Here are the variable and operation definition codes var X tfplaceholdertffloat nameinput var Y tfplaceholdertffloat name output var W tfVariablewinit name weight dtype tffloat var b tfVariablebinit name bias var pred tfaddtfmultiplyX W b namepred var cost tfreducesumtfpowpred Y f f nsamples graphaddtocollectionTensorcost cost var optimizer new TensorflowTrainAdamOptimizerlearningrateminimizecost graphaddtocollectionOperationoptimizer optimizer After train I used saver and successfully got meta file To load the pretrained model I used tftrainimportmetagraph saverrestore graph new Graphasdefault var saver tftrainimportmetagraphmetaFilePath metatFileName meta sess tfSessiongraph saverrestoresess metaFilePath metatFileName var X graphOperationByNameinput var Y graphOperationByNameoutput var W graphOperationByNameweight var b graphOperationByNamebias var pred graphOperationByNamepred var cost graphgetcollectionTensorcost like this variables restored by the method OperationByName are done well But after the line tftrainimportmetagraph and also the count of var cost is I clearly defined the type of cost as Tensor when add it to the collection but after restoring the metamodel the type information is missing I think this is bug Does anyone have an idea about restoring the pretrained model including optimizer information I found that the general type var is a problem when using the loaded tensors var optimizer new TensorflowTrainAdamOptimizerlearningrateminimizecostnameOptimizer Tensor X graphgetoperationbynameinput Tensor Y graphgetoperationbynameoutput Tensor W graphgetoperationbynameweight Tensor b graphgetoperationbynamebias Tensor pred graphgetoperationbynamepred Tensor cost graphgetoperationbynamecost Operation optimizer graphgetoperationbynameoptimizer With specified types all tensors work fine but still I have no idea with the method addtocollection getcollection When you have finished training a model and want to deploy it in production youll often want to modify it to better run in its final environment For example if youre targeting a phone you might want to shrink the file size by quantizing the weights or optimize away batch normalization or other trainingonly features The Graph Transform framework offers a suite of tools for modifying computational graphs and a framework to make it easy to write your own modifications Ive found several places with the code such as ConsoleWriteLineRestoring parameters from savepath This becomes a bit troublesome if Im using TensorFlowNET in a Windows Service May I suggest something like this instead public void DefaultMessageHandlerstring sMessage ConsoleWriteLinesMessage public delegate void OneStringArgDelegatestring sWhat public OneStringDelegate NonDefaultMessageHandler public void MessageHandlerstring sMessage if NonDefaultMessageHandler null DefaultMessageHandlersMessage else NonDefaultMessageHandlersMessage Hi Running following code F EntryPoint let main argv let tf TensorflowBindingtf let x tfconstant let y tfsqrt x let g tfgradients y x use s tfSession let result srun g printf result A result always yields Unhandled exception TensorflowLookupError No gradient defined for operation Sqrt op type Sqrt Analogous python code yields expected result If tfsqrt is replaced with tfsquare for example code above yields expected result Similar issue seems to also be present at least for tfsin and tfcos Was tested with following fsproj file xml Project SdkMicrosoftNETSdk PropertyGroup OutputTypeExeOutputType TargetFrameworknetcoreapp TargetFramework PropertyGroup ItemGroup Compile IncludeProgramfs ItemGroup ItemGroup PackageReference IncludeTensorFlowNET Version PackageReference IncludeSciSharpTensorFlowRedist Version ItemGroup Project def initself modeldir sessionNone if session selfsession session else selfsession tfgetdefaultsession start timetime selfmodel tfsavedmodelloaderloadselfsession serve modeldir selfinputdictselfoutputdictsignaturedeftotensorsselfmodelsignaturedef predictions 