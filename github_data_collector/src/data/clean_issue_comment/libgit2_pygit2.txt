Repositorycreatereference only accepts str and not bytes This is because Repositorycreatereferencedirect in repositoryc uses the s specifier for parsing that argument which only accepts str and implicitly encodes it using UTF I would expect it to accept str or bytes and if you pass bytes it uses exactly what you pass in with no encodingdecoding This is a similar problem to PatchTesttestnocontextlines fails with python on Alpine linux edge on s x Test passes on all other arches so I wonder if this may be a bigendian problem Appears to be introduced with the update FAILURES PatchTesttestnocontextlines self testtestpatchPatchTest testMethodtestnocontextlines def testnocontextlinesself oldblob selfrepo BLOBOLDSHA newblob selfrepo BLOBNEWSHA patch pygit Patchcreatefrom oldblob newblob oldaspathBLOBOLDPATH newaspathBLOBNEWPATH contextlines contextcount len line for line in patchtextsplitlines if linestartswith assert contextcount E AssertionError assert E E testtestpatchpy AssertionError failed passed in s Much to my surprise reading deltaisbinary returns the wrong value if one does not iterate over the patches beforehand Given bash mkdir test cd test touch READMEmd dd ifdevurandom ofdatabin bs K count git init git add READMEmd git commit m initial git add databin git commit m binary this script python import pygit repo pygit Repositorygit diff repodiffHEAD HEAD for delta in diffdeltas printdeltaisbinary for patch in diff pass for delta in diffdeltas printdeltaisbinary prints bash False True I am trying to do something relatively simple which is just add and commit file changes to an existing repository as i would through the command line The one complicating caveat is i am calling the code to do this from inside a submodule however everything seems to be okay until the commit part In the folder above the codesubmodule folder i have another which is the main git repo and which also has a folder of data i wish to monitor and commit changes of The code is python datarepo pygit Repository index datarepoindex indexaddallpathspecs tables Because of the data repo path we are already in that repo local path so all paths relative to that indexwrite tree indexwritetree modifiedtables x for x in datarepostatuskeys if tables in x author pygit SignatureAlice Author aliceauthorstld committer pygit SignatureGitRateWatcher meinternetcom msg fGitRateWatcher commit on datetimedatetimetodaydate modified tables joinmodifiedtables oid datarepocreatecommitrefsheadsmaster author committer msg tree datarepoheadsettargetoid However when I try this i get pygit GitError failed to create commit current tip is not the first parent if i remove the refsheadsmaster part it works but it basically does a rebase and wipes all previous stuff which is no good either What am I missing It would be nice if pygit supported pathlib paths in addition to just strings Im not sure Im using it right but the following code throws gitremotefetch into some sort of infinite loop in case the agent cant find an appropriate key py import pygit class MyCallbackspygit RemoteCallbacks def credentialsself url usernamefromurl allowedtypes printCredentials callback called return pygit KeypairFromAgentusernamefromurl repo pygit Repositoryfoo reporemotes origin fetchcallbacksMyCallbacks printOK Heres an example sh git clone gitsomesshrepository foo Cloning into foo remote Enumerating objects done remote Counting objects done remote Total delta reused delta Receiving objects done python testpy Using my regular ssh agent which has the correct key OK eval sshagent Create a new sshagent with no key and update env variables python testpy Never returns If I uncomment the print statement in the python snippet above I can see that my callback is called over and over Theres one more thing that is odd but might help when I interrupt the script with ctrlc I dont always get the same traceback In the second case bellow it seems that the correct exception pygit GitError callback failed to initialize SSH credentials is raised at some point but just doesnt reach my code sh python testpy C Traceback most recent call last File testpy line in module reporemotes origin fetchcallbacksMyCallbacks File homegregoirelocallibpython sitepackagespygit remotepy line in fetch err Cgitremotefetchselfremote arr fetchopts tobytesmessage KeyboardInterrupt python testpy C From cffi callback function RemoteCallbackscredentialscb at x f e d Traceback most recent call last File homegregoirelocallibpython sitepackagespygit remotepy line in credentialscb ccred getcredentialscredentials url username allowed File homegregoirelocallibpython sitepackagespygit remotepy line in getcredentials if pubkey is None and privkey is None KeyboardInterrupt Traceback most recent call last File testpy line in module reporemotes origin fetchcallbacksMyCallbacks File homegregoirelocallibpython sitepackagespygit remotepy line in fetch checkerrorerr File homegregoirelocallibpython sitepackagespygit errorspy line in checkerror raise GitErrormessage pygit GitError callback failed to initialize SSH credentials If a submodule has been added without the branch option accessing the Submodulebranch property raises a RuntimeError git init Initialized empty Git repository in tmpgregoiretmpR p f ZTwDgit git submodule add pygit branchmaster python c import pygit printpygit Repositorylookupsubmodulepygit branch Traceback most recent call last File string line in module File homegregoirelocallibpython sitepackagespygit submodulepy line in branch return ffistringbranchdecodeutf RuntimeError cannot use string on cdata char NULL It works fine if branch is added to git submodule add git init Initialized empty Git repository in tmpgregoiretmpR p f ZTwDgit git submodule add pygit python c import pygit printpygit Repositorylookupsubmodulepygit branch master Please see Hi there Im using a python and pygit in TravisCI for building and deploying my github pages The python script is used to scan all the commit and find the latest commit time for every file But now I got an error in TravisCI when building just like this python Traceback most recent call last File travisPorcesspy line in module from meta import metadata path File hometravisbuildyindaheng Mydocsmetapy line in module from getDate import data File hometravisbuildyindaheng MydocsgetDatepy line in module for commit in commits KeyError object not found no match for id c b e c d b b dfe d And this error was throw from python repo pygit Repository commitsrepowalkrepoheadtargetGITSORTTOPOLOGICALGITSORTREVERSE lasttreeNone for commit in commitsthrow from here datetimegmtimecommitcommittime datetimestrftimeYmd HMSdate printscanning commit s at scommitmessagedate treecommittree if lasttree is None lasttreetree continue difftreedifftotreelasttree updateDatadatediff lasttreetree This error is only appear in TravisCI it can done its work properly in my Notebook Is this error caused by bugs Or just my improper usage PS The complete python scripts is here Commit e edaa d afcf f f ab dab b d can be found in this repository git upstream shows this commit as being authored at the epoch