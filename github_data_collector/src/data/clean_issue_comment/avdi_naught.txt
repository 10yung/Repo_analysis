Is the user supposed to define their own marshaldump so it can work with Marshal ruby NullObject Naughtbuild c cblackhole fails because marshaldump returns itself and triggers recursive loop failsafe MarshalloadMarshaldumpNullObjectnew NullObjectWithDump Naughtbuild do c cblackhole def marshaldump end end works MarshalloadMarshaldumpNullObjectWithDumpnew This PR updates and services the CI matrix Things done to get to green x can use RSpec It can not install Rubocop Bundler issue which explains that I will have to have the if in the Gemfile x must use an older Rake due to the older RSpec Rubocop tasks in use x jrubyhead has no bundle command so we gem install bundle to give it one x rbx can not be installed by rvm on Travis Removing An alternative strategy could be to run Rubocop on platform as a separate matrix job I am in the process of updating an app to Ruby I found I needed to use ruby NullBeaneater Naughtbuild do config configblackhole end form in place of the shorthand above I dont understand why specifically As requested in Issue Im completely open to name changes I just picked some reasonable names to start with It doesnt mention it in Issue but we need some way to get the actual result or null otherwise all you have is the proxy I chose to go with a method called object Im not thrilled with this name but I also didnt want to pick something that might exist on the wrapped object Could go with something like value as well I also gave it the option to accept a specific type of null object for the default Usage ruby require naught NullProxy firstaddresscountryobject null NullProxy firstabsobject null Naughtbuild do config configdefineexplicitconversions end NullProxy nullfirstabsobjecttoi ruby without configpredicatesreturn false NullObject Naughtbuild do config def coerceother other end end null NullObjectnew null with configpredicatesreturn false NullObject Naughtbuild do config configpredicatesreturn false def coerceother other end end null NullObjectnew null NullObject cant be coerced into Fixnum Im running into really weird behavior when trying to compose combinations of impersonate blackhole and predicatesreturnfalse in the same naught builder Should I not do this For example Id like the behavior that I can impersonate only methods of a class that those methods are chainable and that methods ending in return a boolean I can put together a test case if this is supposed to be supported or I can propose an small warning to the docs unless that warning is there and Im missing it I wanted to be able to do something like this ruby Locals Naughtbuild do c cblackhole def tos callstackjoin end end Seems that this can be refactored further Wrap myvalue and intercept each method call wrapping the return value If ANY call returns nil replace it with a null object ruby SomeConversionFuncmyvaluefoobarbaz null Counterpoint without Demeter violations this wouldnt be needed 