When I try to map files GB or larger on Windows I get errors Code looks like this rust extern crate memmap use memmapMmapOptions use stdfsFile use stdioself Error Write fn main Result Error let path large file let file Fileopenpath let mmap unsafe MmapOptionsnewmap file iostdoutwriteall mmap Ok With a GB file I get Error Os code kind Other message Not enough memory resources are available to process this command With a GB file I get Error Custom kind InvalidData error memory map length overflows usize Works file with a GB file My machine has GB memory and opening the files as memory maps in eg Python works just fine Im new to Rust so perhaps Im missing something obvious It seems like this crate wasnt really well maintained since October Last commit was Apr and last release was memmap v Sep The winapi crate requires winapipcwindowsgnu crates which are pretty heavy MB This blow ups the vendored archives size Which is important for such a widely used crate There are only two ways to fix this Wait for but looks like it will not be fixed anytime soon Use custom bindings we need like methods anyway This patch doesnt make this library less safe since winapi crate doesnt contain any logic We simply copypasting winapi crate definitions This patch doesnt break comparabilityapi since it affects only the internal implementation The only remaining question is portability The winapi crate does a lot of linking magic but Im not sure if we need it at all UPD since all tests are passed looks like we dont need it anyway Currently Im creating my pages using a non cross platform independent API set Im basically using a modified version of this crate where pagesize is exposed for windows and linux Im unsure of how to do this same thing on some of the other platforms memmaprs supports or if its the same as the linux call Would you be interested in a pull request with these calls public and cross platform implemented The Deref implementation of Mmap seems to fulfill the requirements of the StableDeref trait from if I understand things correctly So an implementation for it would be helpful for those who want to put an Mmap together with references into the mapped memory into a struct or similar things It will require an additional crate dependency though maybe optin or optout via feature flag Hi Im implementing a memory allocator in Rust porting the one from Go and one requisite is being able to grow a specific mmaped vector without reallocating for lockless purposes Would be cool if I could use your crate for this so I added this feature to it I made an attempt at implementing the functionality for Windows as well but Ive no Windows box at my office so I havent tested it If you like the feature Ill make a better attempt at documenting and perhaps adding some tests Currently it doesnt seem to be possible to create an anonymous RWX mapping Could we get something like makeexecmut Currently they are on unix at least based on a reading of the source This seems like a kinda surprising footgun especially as memmap is potentially an indirect dependency in a bunch of use cases Creating a shared memory segment between parent and child should probably be an explicit action in MmapOptions This PR should fix issue Should work on unix untested on windows Its useful to be able to map a file PROTREAD and MAPPRIVATE on Linux Later on you can make some pages writeable and write them or use procmem to write them Currently memmap can do this but it takes two steps a mapcopy followed by makereadonly during which theres a short window when the pages are writeable