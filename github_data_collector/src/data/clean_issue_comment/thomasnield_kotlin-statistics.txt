Would be great to see some smoothing algorithms implemented in common module and deployed as a multiplatform library We are working on a multiplatform plotting library and are very interested in the following smoothing algorithms loess glm and gam Our library What do we need these smoothing algorithms for Noticed that I have not done a good job with documenting code I will improve this on the next coming release It would be nice to support ExperimentalUnsignedTypes like UByte very helpful for dealing with images PCA is principal component analysis a linear method of reducing the dimensionality of data other forms of dimensionality reduction could also be considered if PCA is acceptable PCA calculations are dependent upon a matrix library so that might impact crossplatform goals for It would be nice if the valueSelector were in the last parameter position in the binBy methods This would allow the lambda to be created outside of the parentheses This is a breaking change though as changing the existing methods to place this in the last position is a breaks things for obvious reasons However even providing an override with the parameters reordered is a breaking change when named arguments are used fixes As KotlinStatistics continues to grow it might be necessary to start a dedicated Wiki to keep topics organized Much like you can do a sortBy someCollectionOfStuffsortedBy itlum could the fun functions like medianBy also support that I have a large number of pixels and Im looking for the median pixel value by luminance and this would be perfect if I could get xBy As KotlinStatistics continues to grow in functionality less of it is depending on Apache Commons Math It would be great if we got rid of Apache Commons Math as a dependency altogether and help KotlinStatistics go multiplatform and behave more as a standard library I think this should be the goal of KotlinStatistics This will primarily require descriptive statistics and distributions to be implemented from scratch There will also be an emphasis on discrete and continuous probability functionality and integrating it intuitively with the Kotlin language and stdlib Timelinewise I think it would be best to time with a major release of Kotlin and have some muchneeded features implemented Any other thoughts or ideas until then can be discussed here Here is the scope of features I will update here Grouping operators Binning operators Random operators Random distributions Normal Poisson Exponential etc ojAlgo could provide some implementations to port Statistical operators standard deviation variance sum of squares etc Light machine learning Linear Regression Naive Bayes Logistic Regression Kmeans clustering later Random forestsdecision treesboosting later Neural Networks later randomFirst Selects a random element from a Sequence or Collection randomFirstOrNull Selects a random element from a Sequence or Collection or null if there are none randomn int Selects n random elements from a Sequence or Collection randomDistinctn int Selects n distinct random elements from a Sequence or Collection WeightedCoinFlip A truefalse random generator with an assigned probability to true and false rather than WeightedDice A random generator of discrete T values based on their assigned probabilities MapTNumbersample Samples a T value from this map assuming a discrete frequency distribution MapTNumbersamplen Int Samples n T values from this map assuming a discrete frequency distribution 