I refactored some code I added IsPostalCode function but it uses geonames library I added IsIMEI validation function that is mentioned in CONTRIBUTING file It has been tested ParamTagMap already has minstringlength and maxstringlength but they are not included in the readme Seeing how all other possible tags with params are included these should probably be included too Hi is it possible that arguments in example govalidatorValidateMapmapTemplate inputMap are actually reversed shouldnt the first one be the inputMap It took me some time to find out I have a simple struct like go type SpannerSlugger struct Slug string spannerslug validrequired Name string spannername validrequired and a test like ok func TestValidationSlugst testingT ok err govalidatorValidateStruct dbSpannerSlugger assertOKt err assertTruet ok expected ok On SHA f b f f a this works as expected the empty string values result in the test failing cat gomod grep govalidator githubcomasaskevichgovalidator v f b f f a On SHA eaeb it fails silently the test passes without the expected error cat gomod grep govalidator githubcomasaskevichgovalidator v eaeb This seems like a pretty significant regression change as validation that I expect to be performed is no longer being performed Love govalidator Please consider supporting our collective is duckduckgocom correct URL I ask because there so no defined protocol and I think this is a bug when use ValidateStruct function output error inside array is not valid output message panic Items items non zero value required expected Items ImpactedTo non zero value required here code The result of the structure verification is returned and a single error message is returnedValidation stops at one error and returns an error instead of validating all The errors generated by the package include a field name and a path to the field that has failed validating but they are inconsistent with what the contents of those fields are The path always contains the Go struct field names whereas the field will contain the json tag name if a json tag was defined on that field For this reason its hard to use the path when also using json tags since they arent both in the same format Example go type Details struct Email string jsonemail validemail type Person struct Details Details jsondetails If the email is set as gogopherexamplecom the following error will be outputted go govalidatorErrors len govalidatorErrors len govalidatorError Name string len email Err errorserrorString s string len gogopherexamplecom does not validate as email CustomErrorMessageExists bool false Validator string len email Path string len string len Details The Path is Details which is the Go struct field name not the json tag name and the Name is email which is the json tag name 