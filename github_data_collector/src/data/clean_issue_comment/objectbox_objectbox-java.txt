Windows Android Studio RC objectboxVersion classpath comandroidtoolsbuildgradle rc When inserting data the attribute of the entity class is double The value is digits after the decimal point Finally it is displayed in the database as digits after the decimal point Why i used objectboxkotilin in androidx in debug model when i open the browser to see local database i get a toast in my app browser it tips loading schema failedCannot read property name of undefined Errorjava javalangNoClassDefFoundError ioobjectboxgeneratoridsyncIdSyncException ioobjectboxgeneratoridsyncIdSyncException plugin groupIdorgapachemavenpluginsgroupId artifactIdmavencompilerpluginartifactId version version configuration annotationProcessorPaths path groupIdioobjectboxgroupId artifactIdobjectboxprocessorartifactId versionobjectboxVersionversion path annotationProcessorPaths annotationProcessors annotationProcessorioobjectboxprocessorObjectBoxProcessorShimannotationProcessor annotationProcessors compilerArgs argAobjectboxmodelPathprojectbasedirobjectboxmodelsdefaultjsonarg compilerArgs configuration plugin Why do you guys recommend this over GreenDao I feel like its a stepback You should explicitly list the numerous problems I cannot use ToOne and ToMany and such without extensive refactoring in an existing project My POJOs are tied to databinding too ergo I need to refactor at multiple points besides issues with json parsing and internal references Using ToOne and ToMany in my model layer means the model layer is strongcoupled to my database layerA big nono and breaks basic encapsulation principles unlike annotations which are not exposed As others said huge problems with json parsing even if you use custom setters Objectbox WILL need the getters to be the proper type that is you need to use ToOne or ToMany again the lib should not break basic usage over assignable IDs Again a very common use case where you get all your IDs from a remote server Relations should be saved wheter you use your own IDs or not Annotating POJOs and writing a service layer is work but its not comparable to refactor every layer which uses the models Issue Basics ObjectBox version are using the latest version was seeing SIGSEGV on changes to key not found error if updating past RC including Reproducibility always Reproducing the bug Description Encountered this because we accidentally deleted defaultjson from our repo and the build from our CI service was published The CI service does not save any files it generates during a build Our only recourse was to reset UIDs to fix the crashes our users were experiencing but in doing so we found further problems where the DB still crashes if you reset the UIDs We initially thought it was just that we needed to update objectbox but upon doing so first to RC as suggested here and then to we found the app still crashed when first calling ObjectBox We also tried running clean and then rebuild before running the app with the same result Deleting the objectbox directory before using ObjectBox seems to cause the database to regenerate and thus solve the issue Currently we are doing this since we use the db simply to cache images but it would be a huge inconvenience if more important data were being stored Steps After successfully running an app that starts ObjectBox in the main application class delete defaultjson and run again to create a crashing state Follow the instructions here to reset the UIDs for all your entities Run clean and then rebuild Run the app If you are running you will see a SIGSEGV if you run RC or later including you will see ioobjectboxexceptionDbException STD out of range mapat key not found Code boxStore MyObjectBoxbuilder androidContextcontextapplicationContext androidReLinkerReLinkerlog LogdOBJECTBOX it build Logs stackstraces Relevant part of stacktrace running version Caused by ioobjectboxexceptionDbException STD out of range mapat key not found at ioobjectboxBoxStorenativeCreateNative Method at ioobjectboxBoxStoreinitBoxStorejava at ioobjectboxBoxStoreBuilderbuildBoxStoreBuilderjava at comcasenexskedulaserviceObjectBoxinitObjectBoxkt at comcasenexskedulaMainApponCreateMainAppjava at androidappInstrumentationcallApplicationOnCreateInstrumentationjava at androidappActivityThreadhandleBindApplicationActivityThreadjava Entities File defining Entities Entity Uid L data class StudentImageDBModelval studentId String var imageDirectory String null Id var id Long companion object const val IMGDIRECTORY studentImages lateinit var groupedCourseIds ToManyGroupedCourse lateinit var courseIds ToManyCourse functions for saving images to disk Entity Uid L data class GroupedCourseIndex Unique val classroomId String Id var dbId Long Backlink lateinit var images ToManyStudentImageDBModel Entity Uid L data class CourseIndex Unique val courseId String Id var dbId Long Backlink lateinit var images ToManyStudentImageDBModel JSON after UID update note KEEP THIS FILE Check it into a version control system VCS like git note ObjectBox manages crucial IDs for your object model See docs for details note If you have VCS merge conflicts you must resolve them according to ObjectBox docs entities id lastPropertyId name GroupedCourse properties id name classroomId indexId type flags id name dbId type flags relations id lastPropertyId name Course properties id name courseId indexId type flags id name dbId type flags relations id lastPropertyId name StudentImageDBModel properties id name studentId type id name imageDirectory type id name id type flags relations id name groupedCourseIds targetId id name courseIds targetId lastEntityId lastIndexId lastRelationId lastSequenceId modelVersion modelVersionParserMinimum retiredEntityUids retiredIndexUids retiredPropertyUids retiredRelationUids version Misc Known workaround is to programmatically delete objectbox directory before calling MyObjectBoxbuilderandroidContextbuild Issue Basics ObjectBox version Reproducibility always Reproducing the bug Description when I want to convert my object to JSON with gson it returns null for ToOnePomoSubject relation you can see the result in output pomoSubject but actually its not null expected output must be exactly such as PomoSubject Model Map Code ListPomodoro pomodoroList ObjectBoxgetboxForPomodoroclass queryequalPomodoromongoId eagerPomodoropomoSubjectbuildfind Gson gson new GsonBuilderexcludeFieldsWithoutExposeAnnotationcreate gsontoJsonpomodoroList output Entities Entity public class Pomodoro Id public long id SerializedNameid private String mongoId Expose private int pomoDurationMinute Expose private ToOnePomoSubject pomoSubject Entity public class PomoSubject Id public long id Expose private String id mongodb id Expose Unique private String title private int count private long totalTimeMinute output finishTime gregDateJan PMpomoDurationMinute pomoSubjectfinishTime gregDateJan PMpomoDurationMinute pomoSubjectfinishTime gregDateJan PMpomoDurationMinute pomoSubjectfinishTime gregDateJan PMpomoDurationMinute pomoSubject Misc gson gradle minSdkVersion targetSdkVersion When the dependency library is referenced the size of the compiled APK file is much larger It will be nice to support and have this feature in objectbox toothanks Annotation Unique is currently missing ability to mark string unique index casesensitivecaseinsensitive previously this function was proposed in java Entity public class User Id public long id UniquecaseSensitivetrue String username UniquecaseSensitivefalse String email This might as well be replaced by more manual setting of collate java Entity public class User Id public long id UniquecollateCollateTypeBINARY String username or none as BINARY is default UniquecollateCollateTypeNOCASE String email Could this feature be added Is it possible to somehow achieve schema setting UNIQUE email COLLATE NOCASE right now with ObjectBox version or impossible without adding support in the library