Fixes This reverts which was erroneous This may be intentional I wasnt sure so I thought I would file in case its a bug NpgsqlConnection connection make a connection connectionTypeMapperUseNodaTime connectionReloadTypes ReloadTypes will revert back to preUseNodaTime call Steps to reproduce using System using Dapper using Npgsql using NpgsqlLogging namespace NpgsqlQueryLogBug class Program static void Main NpgsqlLogManagerIsParameterLoggingEnabled true NpgsqlLogManagerProvider new ConsoleLoggingProviderNpgsqlLogLevelDebug using var connection new NpgsqlConnectionDATABASEtestPORT USER IDpostgresHOSTlocalhost connectionQueryselect array new array new ConsoleReadLine The issue Actual log Connection opened Executing statements select Parameters SystemInt Expected to see array values in log Currently numbersstring number array or string array parameters cover of my queries Im planning to write some regex to log queries with all parameters replaced in query I understand that its almost impossible to do for all parameter types but for me this would be very helpful Maybe it would be possible to pass custom function to create log entry Further technical details Npgsql version Dapper Hi With below version NPGSQL why it doesnt report exception when we create Return Type of setof refcursor procedures by NpgsqlCommandExecuteNonSqlquery using DBAccess db new DBAccess string sql create or replace function WorkloadBalancing returncursortest n returns setof refcursor as n declare n cur refcursor n begin n open cur for select id uuid name hvtype maxcpurating islicensed from hvpool where id return next cur return n end language plpgsql dbExecuteSqlsql This will be executed successfully without exception it is same with the NpgsqlCommandUseTransaction is True and False is this normal behavior My old codes shows that NPGSQL doesnt allow to do this when the UseTransaction is False right Could anyone please post the correct behavior for this please NPGSQL v PostgresDB Mono x on CentOS Thanks roji As I just mentioned working towards The core functionality Im aiming for here is x Application should be able to give a Hostabc connection string and the driver will connect to each of them inturn and use the first server that works x Application should be able to set ServerTypePrimary to guarantee that a connection to a writable server will be handed out if one is available and error otherwise x Application should be able to set ServerTypeSecondary to guarantee as close as possible that a connection to a readonly server will be handed out whether this is a actually a guarantee or a preferSecondary concept Im not sure yet x Application with connectionstring of HostPG PG ServerTypemaster in the event of PG going down and PG becoming primary should be able to continue working without requiring a hard recyclerestart x ConnectionPool min max pruning etc should be as close to the current behaviour as possible Ive given this a test in a few simple failover scenarios and it seems to reconnect etc however Ive not done any to destruction testing yet Ive ripped out the global state cache ideal that we were discussing in favour of each NpgsqlConnector knowing what type of server its connected to When NpgsqConnection pulls the connector out of the pool it checks it against whether its what it wants and reconnects if it isnt which is much simpler I do have an unsolved problem with this however if a user has connectionpool enabled but not keepalives there will be no point for each connector to have its connected state updated if the server changes from secondary to primary for example and I cant see any mechanism for it to ever be updated unless the connection itself gets reset at some point I guess might fix that We only turn on C nullable reference types for newer TFMs where the BCL is annotated otherwise there are issues eg DebugAssertx null doesnt work Ignore warnings of NRT use for older TFMs Target netstandard in plugins to have at least one TFM where NRTs are enabled Before submitting This repo is for Npgsql ADONET issues only Entity Framework issues belong in NpgsqlEntityFrameworkCorePostgreSQL for EF Core or EntityFramework Npgsql for EF x Steps to reproduce npgsqldappersequentialdatareaderzip Ideally include a complete code listing that we can run to reproduce the issue Alternatively you can provide a projectsolution that we can run The issue Describe what is not working as expected I am using using Dapper with Npgsql and there is a piece of code that breaks going from Npgsql to It may be caused by the DataReader refactoring but I am not sure The attached zip file has two test projects that illustrate the behavior in both versions of Npgsql At any rate I would like to know if this should be considered a bug in Npgsql a bug in Dapper or wrong usage by myself and that I need to find a different way to use DapperNpgsql in this particular case If you are seeing an exception include the full exceptions details message and stack trace TestDataReaderTestDataReaderTestDapperQueryAddOutputParameter Test method TestDataReaderTestDataReaderTestDapperQueryAddOutputParameter threw exception SystemDataDataException Error parsing column prefcurnull SystemInvalidOperationException Invalid attempt to read from column ordinal With CommandBehaviorSequentialAccess you may only read from column ordinal or greater at NpgsqlNpgsqlDataReaderSeekToColumnSequentialInt column Boolean async in C projects npgsql src Npgsql NpgsqlDataReadercsline at NpgsqlNpgsqlDataReaderGetValueInt ordinal in C projects npgsql src Npgsql NpgsqlDataReadercsline at Deserializec b d a fa dda b fIDataReader End of inner exception stack trace at DapperSqlMapperThrowDataExceptionException ex Int index IDataReader reader Object value in C projects dapper Dapper SqlMappercsline at Deserializec b d a fa dda b fIDataReader at DapperSqlMapperQueryImpl T IDbConnection cnn CommandDefinition command Type effectiveTypeMoveNext at SystemCollectionsGenericList AddEnumerableIEnumerable enumerable at SystemLinqEnumerableToList TSource IEnumerable source at DapperSqlMapperQuery T IDbConnection cnn String sql Object param IDbTransaction transaction Boolean buffered Nullable commandTimeout Nullable commandType at TestDataReaderTestDataReaderTestDapperQueryAddOutputParameter Further technical details Npgsql version PostgreSQL version Operating system Windows desktop PostgreSQL docker container Other details about my project setup Im developing WebAPI using Visual Studio When using an async method to connect to the database it throws Could not load file or assembly SystemNetSockets Version on production IIS with NET On my dev environment everything works fine Link to SO question Steps to reproduce Create a new WebAPI project trageting NET Add Npgsql NuGet package Connect to PostgreSQL using async methods in GET endpoint public class ValuesController ApiController GET apivalues public object Get using var conn new NpgsqlConnectionconnectionString var query query using var comm new NpgsqlCommandquery conn await connOpenAsync return await commExecuteScalarAsync Publish project to IIS with NET installed Call the API endpoint The issue Any connection to PostgreSQL throws an exception when using async methods Exception message Could not load file or assembly SystemNetSockets Version Cultureneutral PublicKeyTokenb f f f d a a or one of its dependencies The system cannot find the file specified File name SystemNetSockets Version Cultureneutral PublicKeyTokenb f f f d a a Stack trace NpgsqlNpgsqlConnectord MoveNext at SystemRuntimeCompilerServicesAsyncTaskMethodBuilderStart TStateMachine TStateMachine stateMachine at NpgsqlNpgsqlConnectorConnectAsyncNpgsqlTimeout timeout CancellationToken cancellationToken at NpgsqlNpgsqlConnectord MoveNext Further technical details Npgsql version PostgreSQL version Operating system DEV Windows NET Operating system PROD Windows Server R NET When reading a bit type value I encountered a bug that caused an infinite loop under certain conditions Steps to reproduce cs using var conn new NpgsqlConnectionconnnectionString connOpen using var cmd connCreateCommand cmdCommandText SELECT bit using var reader cmdExecuteReaderCommandBehaviorSequentialAccess readerRead readerGetValue infinite loop The issue BitStringHandler has the cause In case a bit value cuts across a buffer boundary the last byte will never read and result in an infinite loop The bufReadBytesLeft property remains at and the loop cannot be escaped Above example is terrible but our application is facing same problem It reads bit column values and cuts across a buffer boundary depending on the data state If I set CommandBehavior to default it works but we use Dapper and Dappers Query method internally sets CommandBehaviorSequentialAccess link Further technical details Npgsql version PostgreSQL version Operating system Windows 