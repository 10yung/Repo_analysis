 OS macOS Catalina Docker Docker version build a ea Buildctl githubcommobybuildkit Buildkitd v Hi Im creating a PoC for a new buildkit frontend for Maven which download the code and execute the tests It seems that the exportcache option in the buildctl command is crashing the buildkitd container After command enters into the export cache phase it returns the following message exporting cache preparing build cache for export error failed to receive status rpc error code Unavailable desc transport is closing Killing the buildkitd container Command to reproduce buildctl addrdockercontainerbuildkitd build frontendgatewayv opt sourcecodescopemavenfiletest opt context exportcache typelocaldestcache output typelocaldestoutput Using exportcache typeregistry or inline it is obtaining the same error Is it needed something specific in the frontend code to support this option exportcache Thank you so much see A quick fix was done but it would be good to have a secondary fix so leakage wouldnt appear in component level as well Only happens with containerd worker backport of for the v x release full diff containerdcontinuity Add OpenBSD support for fs subpackage containerdcontinuity Support Go Modules containerdcontinuity xattr lost when copying directory containerdcontinuity fs dont convert syscallTimespec to unixTimespec directly doesnt work with gccgo Signedoffby Sebastiaan van Stijn githubgonenl cherry picked from commit e ac a d f e b ea f e e cc Signedoffby Sebastiaan van Stijn githubgonenl Currently there is no way to test that old daemons continue to work with new releases of the gateway frontend eg external dockerfile frontends We have had issues at least times and manual testing is not enough I suggest making a new test script that can take commits Build integrationtests stage for the first and external dockerfile frontendexperimental for the other Merge them together and run the dockerfile integration tests This allows running the old tests with old daemons I dont think there is a way to run new tests as it is hard to detect new features that will not work by design Then there can be additional script that takes some hardcoded positions in the git tree eg stable release tags vs master and runs the first script As old commits might not remain stable for a long time there might be a need to add patches or mark tests that are ignored We could run this script with cron in CI and make sure it is clean before making releases hinshun Opened as requested by thaJeztah in When attempting to docker build with cachefrom the cache for COPY and presumably ADD commands is ignored if the two systems do not both use SELinux For example if you were to build an image on Ubuntu No SELinux and use the image as a cache in CentOS SELinux enabled by default the cache is ignored for COPY commands The same is true viceversa To reproduce I have done the following on Ubuntu with Docker FROM debianstretchslim RUN ls l COPY thisisafile RUN ls l And then echo this is a file thisisafile DOCKERBUILDKIT docker build buildarg BUILDKITINLINECACHE tag invalidcacheubuntu f Dockerfile Push this image to a docker repository somewhere Then on a CentOS machine Or anything with SELinux create the same Dockerfile and run echo this is a file thisisafile docker pull debianstretchslim docker pull invalidcacheubuntu DOCKERBUILDKIT docker build buildarg BUILDKITINLINECACHE cachefrom invalidcacheubuntutag invalidcachecentos f Dockerfile Youll see that the cache isnt used for the COPY command I have assumed this is due to the SELinux permissions if you build the same image on the same machine with SELinux where thisisafile has different security context youll notice the same issue CNI mode should be available even for rootless mode when rootlesskit was launched with netslirp netnsvpnkitlxcusernic containerd worker hadnt been implemented for rootless mode simply because nobody seemed using containerd worker uses containerd worker and plans to support rootless mode Supporting rootless is easy but containerd and buildkitd need to be executed inside same RootlessKit instance I am experiencing deadlocks related to preparing cache mounts Here is a stack trace from one of my build agents This has wedged most of my build agents when they try to lookup a particular cache mount and seems to happen rather easily I have setup my builds to generate stack dumps any time we end up cancelling eg due to timeout the build so I can get more of these pretty easily write the metadata in respExporterResponse to a json file which is defined in export metadatafile buildctl build frontend dockerfilev opt filenameDockerfile local context local dockerfile output typeimagenametest metadatafileindexjson Related Signedoffby genglu gengluglantfincom A bunch of small changes that fix blocking issue for supporting Buildkit on Windows against containerd This doesnt result in working Windows support but the remaining areas of support are hardertosolve relating so far to either container spec generation various aspects of network namespace handling or various LLB commands that refuse to work if they cannot do user id mapping This is to advance but does not complete it