Description I use gogenerate in my source code to invoke mockgen to generate mocked interfaces eg go gogenerate mockgen destinationmocksfoopbgo githubcomxxxxxxpkgxxx Foo But its too annoying that every time I have to write and check the package name githubcomxxxxxxpkgxxx And add the full package name in a source file is kind of duplicated information since golang could parse the file path and get the package name So I add a feature that can use to refer to the current paths package eg go gogenerate mockgen destinationmocksfoopbgo Foo Just a single no more githubcomxxxxxxpkgxxx Release Notes Use to refer to the current paths package in reflect mode This change now makes use of go list to check for package names This tool is module aware and allows for better named imports To test this change I needed to also add a small package to our mod file To keep this import from disappearing from gomod I made use of the tools file strategy Note this change will change the import names in generated code This should not be a breaking change in user code Fixes We should update the docs to include best practices for how to handle advanced mocking scenarios like those mentioned in Requested feature A clear description of the desired feature and an example of how it would be used Benchmarks should be run and have some kind of assertionvalidation during CI Why the feature is needed A clear description of how this feature is not served by existing functionality in gomock To ensure that there are no major performance regressions Optional Proposed solution A clear description of a proposed method for adding this feature to gomock possible option Actual behavior A clear and concise description of what the bug is WARNING DATA RACE Read at x c b by goroutine githubcomgolangmockgomockControllerCallfunc homepowermangopkgmodgithubcomgolangmockv gomockcallgo x c githubcomgolangmockgomockControllerCall homepowermangopkgmodgithubcomgolangmockv gomockcontrollergo xd MY CODE WHICH CALLS SOME METHOD ON MOCK OBJECT Previous write at x c b by goroutine githubcomgolangmockgomockCallReturn homepowermangopkgmodgithubcomgolangmockv gomockcallgo x c MY TEST WHICH CALLS EXPECT Return WARNING DATA RACE Read at x c b by goroutine githubcomgolangmockgomockControllerCall homepowermangopkgmodgithubcomgolangmockv gomockcontrollergo x a MY CODE WHICH CALLS SOME METHOD ON MOCK OBJECT Previous write at x c b by goroutine githubcomgolangmockgomockCallReturn homepowermangopkgmodgithubcomgolangmockv gomockcallgo x MY TEST WHICH CALLS EXPECT Return Expected behavior A clear and concise description of what you expected to happen I expect not to have race conditions in gomock smile To Reproduce Steps to reproduce the behavior From test run some code which uses mocked object in parallel goroutine then try to setup next EXPECTations in main test goroutine Something like this go func Test mockObjEXPECT Return go codeWhichUsesMockObj mockObjEXPECT Return go codeWhichUsesMockObj Actual code which triggers this issue is under NDA but I believe information above should be enough to fix it Additional Information gomock mode reflect or source source gomock version or git ref v latest just installed by go get githubcomgolangmockmockgen golang version go version go linuxamd Triage Notes for the Maintainers Thank you for an opening an issue We are doing our best to get to this Add version flag that shows a version provided by Go modules This strategy works well for module aware invocations of go get and go run which means using GO MODULEon If we ever plan to distribute built binaries it is necessary to amend the strategy with build flags GOPATH mode versioning is unsupported I suggest we add the following bots delete merged branches triage new issues close issues after no response comment on issues which are blank or havent filed out the template If some of these dont seem right or we dont want to add them all at once thats ok with me Add a doc and link it in the readme which contains information about how to contribute to this project It should include any necessary information about CLAs as well docker image golang go version go gomock version all after v gomock work mode reflect mode However in OSX without docker mockgen works well with gomod Very strange If someone uses Return with an interface slice like Returnrets this line mutates the callers slice How it mutates it is semiharmless usually but rather importantly this means tests that share a return slice for convenience can encounter orderdependent behavior and race conditions WARNING DATA RACE Read at x c da f by goroutine githubcomgolangmockgomockCallReturn Usersstevenlgocodepkgmodgithubcomgolangmockv gomockcallgo x gouberorgcadenceinternalcommonmetricsrunTestfunc Usersstevenlgocodesrcgouberorgcadenceinternalcommonmetricsservicewrappertestgo x f testingtRunner usrlocalCellargo libexecsrctestingtestinggo x Previous write at x c da f by goroutine githubcomgolangmockgomockCallReturn Usersstevenlgocodepkgmodgithubcomgolangmockv gomockcallgo x f gouberorgcadenceinternalcommonmetricsrunTestfunc Usersstevenlgocodesrcgouberorgcadenceinternalcommonmetricsservicewrappertestgo x f testingtRunner usrlocalCellargo libexecsrctestingtestinggo x Evidence that it mutates a spreaded slice is pretty simple Anyone free to fix Theres really no reason to abuse the original slice like this I noticed other retsuse while skimming but Im not sure if they have the same issue Itd be good to make sure all instances of argslice mutating are cleaned up