When we call our devices deviceConnectiondiscoverServices it calls the method written at line of combeepizbluetoothgattcoroutinesGattConnectionImplkt gattRequest This method receives a channel ch ReceiveChannelGattResponseE for the request purpose and after a few instructions calls chreveice on this channel Thats when the problem occours The channel throws an error internally the polls fails as the following print shows and the exceution goes all the levels up like when an exception is thrown but this time without any clue of an error being thrown These are the last captured logs DBluetoothAdapter STATEON DBluetoothGatt connect device CEC auto false DBluetoothAdapter isSecureModeEnabled DBluetoothGatt registerApp DBluetoothGatt registerApp UUID ab c c cac c DBluetoothGatt onClientRegistered status clientIf DBluetoothGatt onClientConnectionState status clientIf device CEC DBluetoothGatt onConnectionUpdated Device CEC interval latency timeout status DBluetoothGatt onConnectionUpdated Device CEC interval latency timeout status DBluetoothGatt onConnectionUpdated Device CEC interval latency timeout status DBluetoothGatt discoverServices device CEC DBluetoothGatt onSearchComplete Device CEC Status I tried to capture any thrown exception around the discoverServices call but the cursor never comes back to my code after that chreceive call Hi I found bug with receiving multiple consecutive notifications from same characteristic Im expecting consecutive notifications from my bluetooth device with different values but getting notifications with some duplicated values Firmware on device is not an issue because everything works fine on iOS app I have subscribed on characteristic with connectionopenNotificationSubscriptionnotifyCharacteristic and try to receive values with receiveChannelreceivevalue in while loop and also with receiveChannelconsumeEach and nothing worked properly still getting duplicates Then I dug deeper and noticed that Im alway getting same BluetoothGattCharacteristic object so I put breakpoint on line in and realised that value in BluetoothGattCharacteristic object is changed before its consumed by channel To prove my theory I fork your project and instead of your line launch characteristicChangedChannelsendcharacteristic I have put this val newCharacteristic BluetoothGattCharacteristiccharacteristicuuid characteristicproperties characteristicproperties newCharacteristicvalue characteristicvalue launch characteristicChangedChannelsendnewCharacteristic and everything was fine So Im creating new BluetoothGattCharacteristic object with same value before sending to channel so value doesnt get overwritten Not sure what is the best approach to this but Im sure that its a bug This library can be inspiring as it uses Apples CoreBluetooth API with KotlinNative This can help understanding how the API can be used which is needed to provide a common API Ideally the source and binary compatibility is not broken in the way for existing Android projects should we use a buffered channel in case of missing notification Waiting for version of kotlinxcoroutines Hello I have a weird issue with one of my test phones its Huawei P Smart I dont know how but it looks like cache corrupts somehow and I cant connect one more time after disconnect I can clear the cache with nRF connect app and it works like a charm I want to have this feature too Its hidden in BluetoothGatt class Maybe we could have an additional parameter clearCache false in disconnect close When my ble device disconnects me i get the gatt status BleGattCoroutine throws an exception combeepizbluetoothgattcoroutinesOperationFailedException as expected and then i want to check BLE status with isConnected method In this situatuion i expect false but i get true Is it a bug I am sorry but I cant provide you a minimal sketch right now i do something like try gattconnect Do all preparations turn off ble device for example gattreadCharacteristiccharacteristic catch e Exception if gattisConnected doSomethingWithError i expect that doSomethingWithError will happend This needs a cooperating GattServer GattConnection is not the ideal name for reasons Bluetooth or Ble is missing from its name while its exclusively for Bluetooth General ATTribute Theres Connection in the name but when an instance is originally created the connection is not established yet Theres Connection in the name but theres a disconnect function should Connection be magically dropped from the name of the class when this function is called Of course this is impossible but shows how the name is not an ideal fit Consequently I want this class to be renamed when the first Kotlin compatible version is released with a deprecated typealias on initial prerelease alpha beta or rc for source compatibility Here are a few name ideas BleGatt SuspendBluetoothGatt SuspendBleGatt BluetoothGatt with named import to reference Androids as AndroidBluetoothGatt or alike BluetoothGattIsFun wait maybe not actual fun yet FunBluetoothGatt this could open the discussion of a library renaming Please add a comment to say what you think about each proposition I may append more name ideas but I will keep the numbers stable and if you have other name ideas please write them there too Hi again LouisCAD Would be great if you could spare some time to update the sample android application with examples to read and write characteristics and descriptors and also notifications within the same sample repo 