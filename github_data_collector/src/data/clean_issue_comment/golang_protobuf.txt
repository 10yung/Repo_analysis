We should return structured errors of some form There doesnt need to be a lot of complexity here and its best to start by providing as little information as possible and expand from there but some degree of structure beyond nilnonnil would be good At a minimum all proto module errors should match with errorsIs some common error Im cleaning up cases inside Google that depend on exact error text and is this a proto error is both common and reasonable to ask in tests go if errorsIserr protoError This error was returned by some function in the proto module Possible additional errors to consider initialization check failure missing required fields parse error bad wiretextjson data Do we have one category for all parse errors or specific errors in protoprototextprotojson On a related note we shouldnt return irrelevant detail from protoUnmarshalunknown wire type is confusing invalid proto wire format is better protoregistryNotFound already exists In all cases we should consistently return errors that wrap a sentinel like protoregistryNotFound instead of returning the sentinel directly to permit us to include additional information in the error text add option to render int values as integer values as opposed to string What version of protobuf and what language are you using Protobuf version Go version What did you do I am working with the Google My Business API and I am attempting to retrieve the JSON response of a location After retrieving the JSON I am unmarshaling it as a Location object This Location object contains an attribute field which is an array of Attribute objects Within the attribute object is another array of protobuf Values In my Go code I have a go file containing all of the structs which make up this Location struct In this file I am importing the following import structpb githubcomgolangprotobufptypesstruct And when I define this Attribute struct I define the Values with the following type Attribute struct AttributeId string jsonattributeId ValueType AttributeValueType jsonvalueType Values structpbValue jsonvalues RepeatedEnumValue RepeatedEnumAttributeValue jsonrepeatedEnumValue UrlValues UrlAttributeValue jsonurlValues The JSON that I am receiving from the GMB API contains the following attributes component attributes attributeId paydebitcard valueType BOOL values true attributeId haswheelchairaccessibleelevator valueType BOOL values true attributeId hasserviceinstallation valueType BOOL values true attributeId paycheck valueType BOOL values true attributeId hasdeliverysameday valueType BOOL values true attributeId hasgiftwrapping valueType BOOL values false attributeId requirescashonly valueType BOOL values false attributeId haswheelchairaccessibleentrance valueType BOOL values true attributeId hasservicerepair valueType BOOL values true attributeId wifi valueType ENUM values freewifi attributeId paycreditcardtypesaccepted valueType REPEATEDENUM repeatedEnumValue setValues americanexpress discover mastercard visa The function in which I am receiving this JSON and unmarshaling is func GetStoreaccessToken string response err httpGetfmtSprintfvaccountsvlocationsvaccesstokenv gmbBaseUri accessToken if err nil fmtPrintfThe HTTP request failed with error s n err data ioutilReadAllresponseBody fmtPrintlnstringdata var location Location if err jsonUnmarshaldata location err nil panicerr fmtPrintlnlocationName What did you expect to see If this code was working correctly my function would correctly unmarshal the JSON into a Location object and it would print out the name of the Location as specified in the JSON What did you see instead Instead I am receiving the following error panic json cannot unmarshal bool into Go struct field Attributeattributesvalues of type structpbValue Which fails at the panicerr line when unmarshaling Anything else we should know about your project environment I am running this locally using the GoLand IDE For extensions we currently generate EExtensionField variables of the ExtensionType type This is unfortunate since there thousands of usages where people want to access the extension name or number The new API would require people to do something like go foopbEMyExtensionTypeDescriptorNumber Given how common it is that people want access to descriptor information it seems unfortunate to keep going through the TypeDescriptor method Perhaps we should generate something that implements the ExtensionTypeDescriptor type instead Thus people can directly access the information they want as go foopbEMyExtensionNumber Of course we cant change the type of EMyExtension so this will need a new name perhaps MyExtensionfield If newly generated variable to represent extension fields is an ExtensionTypeDescriptor then perhaps the GetExtension SetExtension HasExtension ClearExtension functions in the proto package should keyed by ExtensionTypeDescriptor instead of ExtensionType The APIv protocgengo is generating code that doesnt work with the current APIv proto package failing with a panic at runtime when passed to a v function panic protobuf tag not enough fields in Messagestate We will have an updated APIv package thats compatible with these messages but that doesnt help the case when someone is using the older package Its okay for new generated code to require newer package versions but compatibility failures need to be detected at compile time or worst case init time not runtime Should there be a way for protobuf reflection to distinguish protoMessage values that are truly invalid Currently we have protoreflectMessageIsValid which indicates that the current Go value is functionally a readonly empty message This implies that the current value has protobuf type information ie Descriptor and Type methods are callable However there are a number of Go types that possess a higher level of invalidness For example the zero value of dynamicpbMessage and ptypesDynamicAny obviously cannot contain protobuf type information since they are both concrete Go types that may may represent any arbitrary protobuf message type The issue today is that a user of protobuf reflection cannot distinguish such messages and risk panicking whenever they call the methods on protoreflectMessage For example protocmpTransform will choke on the zero value of dynamicpbMessage Some possibilities some or all of these may be done regarding truly invalid values Document that calling protoMessageProtoReflect on returns nil Document that calling protoreflectMessageType or protoreflectMessageDescriptor returns nil I define truly invalid as a concrete value that has no sensible protobuf message type associated with it at the present moment This issue is for tracking notable changes that need to appear in the APIv release notes Text unmarshaling does not preserve the sign of floating point Test case in encodingprototextdecodetestgo desc float negative zero inputMessage pb Scalars inputText sfloat wantMessage pb Scalars SFloat float mathCopysign Current tests for encodingprototextprotojson uses test protos under encodingtestprotos We should migrate the tests to use protos under internaltestprotos to be consistent with other features and also expand the scope as much as possible Consider not generating the ExtensionRangeArray method on generated message structs Its no longer used by the implementation and isnt a useful userfacing API