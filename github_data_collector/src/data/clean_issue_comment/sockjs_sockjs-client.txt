I am using sockjsclient in one of my reactnative App WebSocket connection is successful in ANDROID but in iOS I am getting this response entropy origins cookieneeded true websocket true after that xhr and xhrstreaming is getting called and this says Request method POST not supported I am using sockjsclient with stompjs I am not able to understand what is the issue I am sharing my code snippet const SockJS requiresockjsclient var Stomp requirestompjslibstompjsStomp let options transports websocket var sockws new SockJSSOCKETGUESTURL options let sockws StompclientSOCKETGUESTURL let stompClient Stompoversockws sockwson ws event consolelogonmessage sockwsonclose event consolelogonclose sockwsonerror ev consolelogonerror ev sockwsonopen ws ev consolelogonopen stompClientconnect AccessControlAllowOrigin frame consolelogFRAME frame error consolelogERRROR error this code works in android and it goes in success call back and prints result but does not work in iOS it always throws an error and I can see the CORS error in chrome debugger Can somebody help me We are getting a console error SCRIPT Object doesnt support this action from sockjsjs and only in IE which is coming from EventEmitterprototypeemit function from the line var args new Arrayl where Array is undefined Array constructor is not available and this error occurs only happen when navigating away from the page say by clicking the header back I can see EventEmitterprototypeemit is getting called many time but error occurs only when it is getting called from thisunloadRef thiswsonclose selfemitclose ecode ereason within function WebSocketTransport Below is the code from where EventEmitterprototypeemit is getting called and the error occurs This issue is similar to and it is already mentioned in the comments of code but seems like this issue has not been resolved completely for IE Firefox has an interesting bug If a websocket connection is created after onunload it stays alive even when user navigates away from the page In such situation lets lie lets not open the ws connection at all See thisunloadRef utilsunloadAddfunction debugunload selfwsclose thiswsonclose functione debugclose event ecode ereason selfemitclose ecode ereason selfcleanup Our setup is pretty straight forward SockJS with a timeout of seconds handled by StompJS with a reconnect time of second Sometimes our backend takes longer than one second to respond to the info call and StompJS tries to close it to reopen it again and in fact it is just doing it fine by calling the close method in sockJs I know that SockJS acknowledge the close operation because I see the disconnected entry just fine Problem is that it is not really closed InfoReceiver continued going forward And this is how I think I sometimes end up having websocket sessions I attach a log of the relevant part Log entries starting with STOMP is the logging from StompJS log entry like Before connect retry attempt X is just the stompJs callback beforeConnect Rest of logging you can ignore it lognotclosinglog Hello I am connecting to a rd party service that uses SockJS They gave me an https url and I was able to build a very simple application that is able to connect to that service in JS using the SockJS client library However I am trying to connect to it in C and Im not sure that the SockJS library available for c actually works Ive read that any SockJS server is available to connect over wss and when looking in my browser when running my JS application I see a connection to a wss server but I havent been able to find the initial URL By the time the wss url shows up in Chrome it already has a session id on it and looks like this wsshostnamews k p oq websocket so what URL would I use for just an initial websocket connection to this service on Thanks for any help you can provide me with For eventsource when message contains followed by space it throws URI malformed message That pull request fixes that by escaping not followed by any char Is there a way or feature I can use to tell how many websocket connections the client has made to the server I would like to be able to manage these and ensure there should only be one The reason for the question is because Im seeing at the server http logs multiple xhrstreaming calls originating from the same client It does not happen all the time for the most part theres only one connection which is good but there are cases where were seeing multiple connections which we would like to prevent as this could max out server connection resources Chrome allows loading resources from AFAICT and it helps local developments a lot webpackdevserver usually serves resources at also and sometimes on a different port against the main expressegg service for better build performance A possible solution to I need that as that infinite loop is giving a hard time to the load balancer when we have a couple of users having this issue What it does is that for every connection request it stops retrying after unsuccessful requests Its the consumers responsibility then to decide what to do eg retry again Im not fully aware of the internals of this library so Im not too sure if this is fully safe to merge in but it seems to cover the basic use case Hello I have the unfortunate challenge of trying to get an application working in a corporategovernment type environment where all traffic is behind a firewall that decryptsencrypts traffic to the outside world The general way we get around that is that in the browser the browser itself handles the SSL proxy problem but when running node in electron for example we need to manually say hey node use this certificate authority Example httpsglobalAgentoptionsca myListOfCerts This sets it so that all normal XHR calls to the outside world running in nodejs use this trusted list of certs Sockjs however is ignoring the global agent im sure for good reason when making the initial XHR request to the outside world before upgrading to the wss connection This ignores the global ca option and sockjs does not currently provide a way to pass through xhrOptions or whatever we would like to call them so that we can manually set them Id like to propose allowing xhrOptions to be passed in I have forked the project for my own purposes but think it would be a great feature and would be happy to set that PR up if this idea is well received Thanks