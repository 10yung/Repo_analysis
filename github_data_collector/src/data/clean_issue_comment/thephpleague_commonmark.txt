Extensions would really take advantage of an events system instead of walking through the AST one more time after the document has been parsed Events could be triggered for example when a block is about to be parsed a block has been parsed a block is about to be rendered a block has been rendered the document is about to be processed the document has bee processed Listening to events would allow to plug in the parsers and renderers directly while the document is beeing processed In some cases it prevents from going through the document multiple times My current wishlist for v AST stuff split into its own namespace or package Block and inline elements split into their own package to enable sharing with leaguehtmltomarkdown this is probably a duplicate of the AST split above Refactor how data is stored on AST elements maybe use the data array more heavily Separate blockinline element types from instances similar to Symfony forms and reevaluate x Drop PHP support x Parameterreturn types everywhere Twoway XML conversion Review other CommonMark implementations for other improvement ideas x Pass phpstan checks at a higher level See whether streamgenerator inputs make sense Other bigticket items like and We sometimes call AbstractBlock elements on variables which contain Node These are virtually always AbstractBlock elements though See if we need to move some methods between these andor tighten up our type hints Ill gradually refine this list as progress and decisions are made and spin it off into a milestone Just wanted a place to collect my thoughts for now While the AST implementation is working great there are some areas Id like to revisit and see if changes could improve the implementation Remove parsingrelated methods from node types Node types contain some methods which are only used for parsing Markdown input matchesNextLine handleRemainingContents etc Can we somehow move these into their respective parsers Or alternatively do we need to separate node types from node instances similar to how the Symfony Form Component has form types and form objects Implement XML serialization The reference parser supports rendering the AST as XML I would like to have the same functionality in leaguecommonmark This would also be a good test of using the AST for purposes other than rendering it as HTML converting MD XML HTML MD etc However we may need to implement the other changes in this list including the next one Determine whether node types should be referenced by an arbitrary name instead of namespaced class When registering parsers and renderers or checking the type of the node were currently relying on using PHP classes and namespaces For example a paragraph is differentiated from a list by its class of League CommonMark Block Element Paragraph Weve also added the ability for renderers to handle subclasses which relies on the class hierarchy in PHP But in order to implement the XML serialization we need to associate a name like paragraph to this element Id therefore like to investigate whether we can use a system like Symfonys Form Component where each type declares its name ie paragraph and an optional parent type Wed then register each type in the environment like so Update Lets keep using fullynamespaced classes and use a different approach to determine serialized XML node names environmentaddTypeparagraph new League CommonMark Block Type Paragraph This paragraph name would then be used for things like Registering parsersrenderers for each type Determining which renderer to use Naming XML elements in the AST Node type inheritance However Symfony removed the ability to use these alias names and now require the fullyqualified class names Id like to understand why this was done in order to determine whether this idea is good or not Change the namespace from Node to AST Im not sure if I want to do this but I do want to consider it I may add more to this list later Any thoughts or feedback are welcome 