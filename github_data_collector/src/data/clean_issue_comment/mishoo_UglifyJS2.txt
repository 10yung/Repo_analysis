Currently when UglifyJS compresses a given input file that comes with a sourcemap but the sourcemap does not have mappings for all code parts in the input file eg the input file has been generated and some specific codeparts have been generated and are not originating from any sourcefile In that case if mappings before the generated code are collected and the original file location for the generated code is determined after previous mappings for the same line have been recorded UglifyJS just ignores the fact that there is no original location and the previous segment is not terminated This causes the generated code incorrectly to be mapped to the previous segment original source location This change also causes some difference for the pr test which contained a completely misleading sourcemap so while being at it order to adjust for the correct expected sourcemap Ive updated the input sourcemap to actually map properly using the following mappings ts saddMappinggenerated line column original line column source input js const saddMappinggenerated line column original line column source input js require requirebar saddMappinggenerated line column original line column source input js foo saddMappinggenerated line column original line column source input js const saddMappinggenerated line column original line column source input js require requireworld saddMappinggenerated line column original line column source input js hello saddMappinggenerated line column original line column source input js foox saddMappinggenerated line column original line column source input js spread saddMappinggenerated line column original line column source input js fooyhelloz We should also note that this causes saucemaps to be larger than before because the termination segments are added and these are unavoidable if correct sourcemaps need to be generated Recently lwr found that there was something wrong when using uglifyes to uglify a code snippet where there were inline functions accessing variables through more than two level of scopes in comparison with using uglifyjs It seemed like the bug of uglifyes please check it How Do We Reproduce input js function var one var two f function f f function f f two function f two consolelogone two output with uglifyes js function var n o function o o consolelogn o undefined var o output with uglifyjs js function var o n o consolelogn o Bug report Uglify version uglifyes javascript class B constructorone two emptyVal boolVal callback consolelogone two emptyVal boolVal thiscallback callback runAction return thiscallback let A class A constructor configureAction This is the important line let run thisrunConfigureTasks return Promiseresolvesuccess return new class extends B constructor superone two undefined true run runConfigureTasks consolelogconfiguring javascript var uglifyes requireuglifyes const code paste in code from above const ugly uglifyesminifycode consolelogugly A complete parsable JS program exhibiting the issue with UglifyJS alone without third party tools or libraries Ideally the input should be as small as possible Post a link to a gist if necessary Issues without a reproducible test case will be closed JavaScript output or error produced If you run the above youll see the minification result in new lines and comment added for easier reading Note that the command line doesnt have this bug This only occurs when using the API javascript class B constructors o c n r consolelogs o c n thiscallback r runAction return thiscallback let A class constructor configureAction return new class extends B constructor This is a problem this now refers to new class extends B not A superone two void thisrunConfigureTasks Promiseresolvesuccess runConfigureTasks consolelogconfiguring With this change parsing var x raw quoted in say acorn then running frommozillaast then printing it will emit the same output as the input that is the quoted property remains quoted Bug report or feature request Bug Note suboptimal but correct code is not a bug Uglify version uglifyjs V uglifyes JavaScript input A complete parsable JS program exhibiting the issue with UglifyJS alone without third party tools or libraries Ideally the input should be as small as possible Post a link to a gist if necessary Issues without a reproducible test case will be closed javascript function foo const bar barpushfoo return testbar function testbar consolelogbar The uglifyjs CLI command executed or minify options used uglifyjs uglifyJSjs c m o outjs verbose JavaScript output or error produced function fooconst o return opushfoooovoid consolelogo var o oo is not valid in this case Note uglifyjs only supports JavaScript Those wishing to minify ES should transpile first As per the change help shows up if the user fires in uglifyjs without any further arguments For instance the user may fire in uglifyjs just to ensure that the installation went right Feature request Uglify version uglifyjs V uglifyes JavaScript input js Calculatorjs class Calculator evaluatestr op i str strsplit for op of a b a b a b a b while i strindexOfop strsplicei o op str i str i return str The uglifyjs CLI command executed or minify options used uglifyjs Calculatorjs compress JavaScript output js class Calculatorevaluatestropiforop ofstrstrsplit abab abab foristrindexOfopstrsplicei o op str i str i returnstr There is more compact output js class Calculatorevaluatestropistrstrsplit forop of abab abab foristrindexOfopstrsplicei o op str i str i returnstr As of now uglifyes minifies js str strsplit for op of into comma expression and parentheses js forop ofstrstrsplit but straight variant is shorter js strstrsplit forop of Feature request Idea to mangle repetitive object properties Note suboptimal but correct code is not a bug Uglify version uglifyjs V Uglify script Lets assume this default code to test compression js var UglifyJS requireuglifyjs var code see following examples var result UglifyJSminifycode toplevel true mangle properties false toplevel true consolelogresultcode Repetitive object properties access example Lets assume a script which inserts text nodes in the DOM or in a more generic manner a script which gets many times the same property name from same or different objects js var code function var doc new DocumentFragment docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta docappendChildnew Texta documentbodyappendChilddoc In this example the property appendChild is called times The output code is js functionvar enew DocumentFragmenteappendChildnew TextaeappendChildnew TextaeappendChildnew TextaeappendChildnew TextaeappendChildnew TextaeappendChildnew TextaeappendChildnew TextaeappendChildnew TextadocumentbodyappendChilde The length is B As we can see appendChild is repeated many times If we use properties true the output becomes js functionvar enew DocumentFragmenteenew Textaeenew Textaeenew Textaeenew Textaeenew Textaeenew Textaeenew Textaeenew Textadocumentnee The length is B But the code becomes invalid Repetitive object properties access optimization Lets rewrite the code in such a manner than an object property is not accessed with dot but with a function instead docappendChild becomes appendChilddoc js var code function appendChildobj return objappendChildbindobj function var doc new DocumentFragment appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocnew Texta appendChilddocumentbodydoc The output is js function eereturn eappendChildbindevar nennew DocumentFragmentnew Textaennew Textaennew Textaennew Textaennew Textaennew Textaennew Textaennew Textaedocumentbodyn The length is B And more important the code is totally valid objproperty property property property could be written as property property property property obj which could potentially compress to abcde Introducing this method to uglify js The parser could detect repetitive properties access and convert them to functions to enable stronger compression I suggest kind of properties true false none hard soft Where false map to none truemap to hard and have the same current behavior Plus the introduction of soft which tries to convert properties to functions only if resulting size is smaller This technique could save a lot of bytes in classes using long property names Performances This is a simple test of performances on chrome js function appendChildobj return objappendChildbindobj function var doc new DocumentFragment consoletimeperf for let i i e i docappendChildnew TextMathrandomtoString ms appendChilddoc new TextMathrandomtoString ms ms consoletimeEndperf consolelogdocfirstChildwholeTextlength As we can see V keeps really good performances on this pattern PS I present here a generic idea how to optimize objects properties with functions for compression This method would probably requires some adjustments according to the access context call set get js function appendChildCallobj return objappendChildbindobj documentbodyappendChildnew Texta appendChildCalldocumentbodynew Texta OR function appendChildCallobj return objappendChildapplyobj slicecallarguments documentbodyappendChildnew Texta appendChildCalldocumentbody new Texta function appendChildGetobj return objappendChild consolelogdocumentbodyappendChild documentdocumentElementappendChild consolelogappendChildGetdocumentbody appendChildGetdocumentdocumentElement function appendChildSetobj value objappendChild value documentbodyappendChild function consolelogappendChild appendChildSetdocumentbody function consolelogappendChild Bug report or feature request feature req Uglify version uglifyjs V JavaScript input forvar i i i consolelogi The uglifyjs CLI command executed or minify options used uglifyjs filenamejs JavaScript output or error produced forvar i i i consolelogi maybe this is a source code issue and outside the scope of minification just wondering if there wascould be an option to turn and to and Feature request magiccomments to keep classnamesfunction names eg UGLIFYJSKEEPFUNCTIONNAME class User extends Typegoose Why I had problems with Webpacks uglifyjs mangling class names when some libraries depended on constructorname property to work specifically when using Typegoose class User extends Typegoose User becomes aqw so its stored as aqw on mongodb related 