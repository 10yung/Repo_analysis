This builds on and should be merged afterward It fixes and takes the approach of copying indentation from indentationonly lines I can see an argument for eliding indentation from indentationonly lines but it seemed more in the spirit of trims existing whitespace handling philosophy dont mess with it to the extent possible to keep it Id be happy to do it any other way trim calculates the minimum indent of every line after the first and then removes that number of characters from the beginning of every line after the first I encountered this while working on the related minindent is calculated by a routine that ignores indentation spaces and tabs on blank lines lines containing only indentation Consequently the newline that terminates these lines can get trimmed which causes the following line to include spurious leading whitespace Failing example r libraryglue librarytestthat expectidentical trim ta tb t tc a nb n nc In the character vector passed to trim the penultimate line contains only indentation spaces followed by a tab When trim is copying parts of the old string to a new one it skips over the newline that delimits the penultimate and last lines and the whitespace from the penultimate line is included in the last line Previously after a n was encountered while copying minindent number of characters are trimmed from the beginning of lines by seeking i characters ahead in the input string However after setting i minindent i was incremented again right before the while loop continued via str j xx i This caused i to point to the character after the n that terminated the line and so leading indentation on the following line was not recognized as such and so was improperly copied to the output string While working on this I also ran into a few other possible bugs Lines containing only indentation might be shorter than minindent and so could cause the succeeding line to contain spurious leading indentation Currently trim only works properly if theres either no whitespace on the blank line or if there is an amount of whitespace of at least minindent Tabs are not converted to spaces and so output may appear to be improperly indented even after trimming if different lines contain different distributions of leading tab and space characters Let me know if it would be helpful for me to create issues for those possible bugs I didnt create issues because maybe these are features It also occurred to wch and I while working on this that we could probably be smarter about the size of the output string we allocate Since we know that minindent will removed from every line after the first in the minindent calculation pass we could tally newlines and multiply that tally by the size of minindent to determine how much smaller the output string needs to be TODO x Update NEWS New tests fail on my installs Ref Fail record devtoolstest Loading glue Testing glue v OK F W S Context v gluecollapse x color testcolorR failure gluecol works with single quotes double quotes graves gluecolblue foos not identical to asgluebluefoos mismatches x y mfoos m testcolorR failure gluecol works with single quotes double quotes graves gluecolblue foo s not identical to asgluebluefoo s mismatches x y mfoo s m testcolorR failure gluecol works with single quotes double quotes graves gluecolblue foos not identical to asgluebluefoos mismatches x y mfoos m v glue s v quoting v sql testsqlR skip unknown DBI cannot be loaded v trim Results Duration s OK Failed Warnings Skipped This desktop metadata packageDescriptionglue Package glue Title Interpreted String Literals Version AuthorsR personJim Hester email jamesfhestergmailcom role caut cre Description An implementation of interpreted string literals inspired by Pythons Literal String Interpolation and Docstrings and Julias TripleQuoted String Literals Depends R Imports methods Suggests testthat covr magrittr crayon knitr rmarkdown DBI RSQLite Rutils forcats microbenchmark rprintf stringr ggplot dplyr withr License MIT file LICENSE Encoding UTF LazyData true RoxygenNote URL BugReports VignetteBuilder knitr ByteCompile true NeedsCompilation yes Packaged UTC jhester Author Jim Hester aut cre Maintainer Jim Hester jamesfhestergmailcom Repository CRAN DatePublication UTC Built R x w mingw UTC windows File CUsersAlecWDocumentsRwinlibrary glueMetapackagerds sessionInfo R version Platform x w mingw x bit Running under Windows x build Matrix products default locale LCCOLLATEEnglishUnited States LCCTYPEEnglishUnited States LCMONETARYEnglishUnited States LCNUMERICC LCTIMEEnglishUnited States attached base packages stats graphics grDevices utils datasets methods base other attached packages crayon testthat glue RevoUtils RevoUtilsMath loaded via a namespace and not attached compiler assertthat magrittr R cli tools rstudioapi rlang Also on work laptop sesson info etc in Hi Jim I came across a bug wherein certain symbols cannot be escaped in gluecol to print colored output and I wanted to make a note of it I couldnt find any documentation on special escaping practices in glue nor python fstring examples Many thanks for your attention reprex r libraryglue packageDescriptionglue Package glue Title Interpreted String Literals Version AuthorsR personJim Hester email jamesfhestergmailcom role caut cre Description An implementation of interpreted string literals inspired by Pythons Literal String Interpolation and Docstrings and Julias TripleQuoted String Literals Depends R Imports methods Suggests testthat covr magrittr crayon knitr rmarkdown DBI RSQLite Rutils forcats microbenchmark rprintf stringr ggplot dplyr withr License MIT file LICENSE Encoding UTF LazyData true RoxygenNote URL BugReports VignetteBuilder knitr ByteCompile true NeedsCompilation yes Packaged UTC jhester Author Jim Hester aut cre Maintainer Jim Hester jamesfhestergmailcom Repository CRAN DatePublication UTC Built R x w mingw UTC windows File CUsersa DocumentsRwinlibrary glueMetapackagerds sessionInfo R version Platform x w mingw x bit Running under Windows x build Matrix products default locale LCCOLLATEEnglishUnited States LCCTYPEEnglishUnited States LCMONETARYEnglishUnited States LCNUMERICC LCTIMEEnglishUnited States attached base packages stats graphics grDevices utils datasets methods base other attached packages glue crayon datatable janitor purrr assertthat dplyr odbc vroom loaded via a namespace and not attached Rcpp rstudioapi magrittr hms tidyselect bit R rlang stringr blob tools packrat DBI bit tibble snakecase stringi compiler pillar pkgconfig Prints nothing gluecolgreen tests gluecolgreen test s gluecolgreen test s gluecolgreen test s gluecolgreen test s gluecolgreen tests gluecolgreen tests open close Prints as expected gluecolgreen tests gluecolgreen test s gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen tests gluecolgreen test s gluecolgreen tests gluecolgreen tests gluecolgreen tests open close reprex using gluecol docs example r using gluecol example Prints okay exact copy if requirecrayon gluecolblue foo bar gluecolblue whiteongrey bgBlack white gluecolwhiteongrey Roses are red colors Violets are blue colors gluecol can show red cyellow ogreen lcyan oblue rmagenta s and bold bold and underline underline too Does not print adds a single quote to each fstring if requirecrayon gluecolblue foo bar gluecolblue whiteongrey bgBlack white gluecolwhiteongrey Roses are red colors Violets are blue colors gluecol can show red cyellow ogreen lcyan oblue rmagenta s and bold bold and underline underline too Crayon appears to not require escaping for colored output librarycrayon Works as expected catblueHello world n catblueHello world n Is there a particular reason why the transformer argument isnt made available in gluesql and gluedatasql I was hoping to create my own transformer to compose with sqlquotetransformer which adds a suffix ie foo which indicates the contents of foo should be evaluated raw without escaping This can be very unsafe of course but itd sometimes be useful when dynamically building the SQL string from safe chunks I currently do this by wrapping the relevant strings with DBISQL which works fine but having a raw transformer with the foo shorthand would be nice However since the transformer argument isnt exposed this cant be done And actually even if it were exposed I wouldnt be able to compose my transformer with the sqlquotetransformer because it currently isnt exported So the only way I could do this would be by copying the current implementation of gluesql and the sqlquotetransformer and hope theyre never modified So is there a reason why the transformer isnt exposed andor why the sqlquotetransformer isnt exported The other solution would be doing the transformer composition internally but I wouldnt know how to do that without adding a dependency to purrrcompose which goes against the small fast dependency free philosophy of glue Using in gluesql escapes an identifier such as a db name or table name However it should leave already quoted identifiers identq untouched In particular inschemadb tbl should not become dbtbl assuming ANSI quotes r tbl dbplyrinschemamydb mytbl gluegluesqlSELECT from tbl con DBIANSI SQL SELECT from mydbmytbl supCreated on by the reprex package v sup Instead I would have expected gluesql respect the identq and generate SQL SELECT from mydbmytbl Of course ideally what we would actually want is mydbmytbl but I guess this is a problem for dbplyrinschema after all you would expect an identq object to be quoted The following doesnt produce any output x integer glueglueax This can lead to surprising behaviour libraryglue b glueab TRUE a paste a b TRUE a But when I the vector returns integer this is unexpected The a disappears glueab FALSE paste a b FALSE a packageVersionglue Issue If I use a glue template within another glue template then I get the raw template instead of the evaluation of the template I can currently work around the issue by using the third approach described below but it would be nice if evaluation happens recursively Reprex r librarytidyverse template myvartxt df tribblemyvar a b c df mutatefilegluegluetemplate A tibble x myvar file chr glue a atxt b btxt c ctxt df mutatefilegluegluetouch template A tibble x myvar file chr glue a touch myvartxt b touch myvartxt c touch myvartxt df mutatefilegluegluetouch gluegluetemplate A tibble x myvar file chr glue a touch atxt b touch btxt c touch ctxt supCreated on by the reprex package v sup eg r libraryvctrs libraryglue x glueabc veccx x Only bare vectors have shapes supCreated on by the reprex package v sup