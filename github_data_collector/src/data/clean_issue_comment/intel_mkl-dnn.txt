Hello Would it be possible to have some early estimations whether DNNL will support the NNP processors at least the Inference one From that page the only supported devices today are CPU and GPU Ref Summary make test failed for several unit tests Version rlsv c b d fc eb b cea a f d Environment CPU make and model Threads per core Cores per socket Sockets NUMA nodes Vendor ID GenuineIntel CPU family Model Model name IntelR XeonR Platinum CPU GHz OS version uname a Linux iZ vbi phbt xgofpsvomZ ali alios x SMP Mon Oct CST x x x GNULinux Compiler version gcc version gcc GCC Red Hat CMake version cmake version cmake version CMake output log GPU support is disabled Could NOT find Doxygen missing DOXYGENEXECUTABLE Configuring done Generating done Build files have been written to homejingweizhangsrcmkldnnbuildrlsv Steps to reproduce testsgteststestconvolutionforwardu s fp Observed behavior Note Google Test filter GPU Running tests from test suite Global test environment setup tests from ForwardSimpleSmallBlockedAttributesCPUconvolutiontest RUN ForwardSimpleSmallBlockedAttributesCPUconvolutiontestTestConvolution Floating point exception core dumped Expected behavior Test to pass GDB result Program received signal SIGFPE Arithmetic exception x ffff in XbyakutilCpugetNumCores this x ffff dcf ZN mkldnn impl cpu GLOBALN L cpuE levelXbyakutilCoreLevel at homejingweizhangsrcmkldnnsrccpuxbyakxbyakutilh case CoreLevel return numCores level numCores SmtLevel x ffff babc divl x bberip x ffff dcf c ZN mkldnn impl cpu GLOBALN L cpuE Greetings mkldnn developers and contributors We re reaching out because your project is an important part of the open source ecosystem and we d like to invite you to integrate with our fuzzing service OSSFuzz OSSFuzz is a free fuzzing infrastructure you can use to identify security vulnerabilities and stability bugs in your project OSSFuzz will Continuously run at scale all the fuzzers you write Alert you when it finds issues Automatically close issues after they ve been fixed by a commit Many widely used open source projects like OpenSSL FFmpeg LibreOffice and ImageMagick are fuzzing via OSSFuzz which helps them find and remediate critical issues Even though typical integrations can be done in LoC we have a reward program in place which aims to recognize folks who are not just contributing to open source but are also working hard to make it more secure We want to stress that anyone who meets the eligibility criteria and integrates a project with OSSFuzz is eligible for a reward If youre not interested in integrating with OSSFuzz it would be helpful for us to understand why lack of interest lack of time or something else so we can better support projects like yours in the future If we ve missed your question in our FAQ feel free to reply or reach out to us at ossfuzzoutreachgooglegroupscom Thanks Tommy OSSFuzz Team Summary SIMPLEIMPL preprocessor define in cpureducercpp seems fragile Problem statement createreduce ddrv may return nullptr if not mayiuse avx or better However a preprocessor define is used to select jit vs nonjit code path which allows the possibility of creating a jit impl and then not using it or worse not creating a jit impl and calling via nullptr This affects the reducenolock and reduceblock methods Preferred solution Make reducenolock and reduceblock generic by replacing ifdef SIMPLEIMPL with ifdrv existing code to call jit driver else existing SIMPLEIMPL code block Now createreduce ddrv can independently decide whether to return nullptr separation of concerns generic code fewer ugly if blocks opt If you wish to retain SIMPLEIMPL for test compilations just use it once to force createreduce ddrv to return nullptr I do something like this for nonxbyak compiles I am using the mkldnn v I find that function mkldnndeconvolutionforwarddescinit judge the param format must be oihw if my param is iohw format should I must reorder the parma from iohw to oihw before the mkldnndeconvolutionforwarddescinit function Is there any else i can do Is there any demo I can reference del benchdnn matmul stagab wtagab modep m n k total perf minms avgms benchdnn matmul stagab wtagba modep m n k total perf minms avgms del Summary Several of the files have header leaks usage of functions without properly referencingincluding at all or including the right header but not the path to the files Example mkldnnsrccpugemmgemmthreadinghpp is missing the include asserth using assert Version master Environment Ubuntu gcc g Intel Core i K Steps to reproduce Build from source without using specific flags Observed behavior Build fails this also affects mxnet building from source mxnet Expected behavior Successful build As described in README libmkldnnso depends on libgompso when compiled with GCC and depends on libiomp so when compiled with Intel CC Compiler Runtime configuration Compiler Dependency DNNLCPURUNTIMEOMP GCC GNU OpenMP runtime libgompso DNNLCPURUNTIMEOMP Intel CC Compiler Intel OpenMP runtime libiomp so DNNLCPURUNTIMEOMP Clang Intel OpenMP runtime libiomp so DNNLCPURUNTIMETBB any Threading Building Blocks libtbbso DNNLGPURUNTIMEOCL any OpenCL runtime libOpenCLso But libgompso is compiled with STATICTLS and libiomp so is not So it will encounter ImportError dlopen cannot load any more object with static TLS when using several DSOs with STATICTLS So I wonder if there is any way to make libmkldnnso depend on libiomp so when compiled with GCC In addition as far as I know in commit aef b libmkldnnso uses libiomp so if provided Summary Provide a short summary of the issue Sections below provide guidance on what factors are considered important to reproduce an issue primitive create and forward in different thread may lead to core dump the error information mkldnnmkldnncommonmemorytrackinghpp void mkldnnimplmemorytrackingregistrytgetconst keyt void const Assertion size failed Version Report DNNL version and githash Version information is printed to stdout in verbose mode Environment DNNL includes hardwarespecific optimizations and may behave differently on depending on the compiler and build environment Include the following information to help reproduce the issue CPU make and model try lscpu if your lscpu does not list CPU flags try running cat proccpuinfo grep flags sort u intel xeon CPU E V GHz OS version uname a Linux sdw el x SMP Wed Nov UTC x x x GNULinux Compiler version gcc version gcc version GCC CMake version cmake version cmake version rc CMake output log git hash git log formatH Steps to reproduce Please check that the issue is reproducible with the latest revision on master Include all the steps to reproduce the issue You can use verbose mode and benchdnn to validate correctness of all primitives the library supports If this does not work a short CC program or modified unit tests demonstrating the issue will greatly help with the investigation Observed behavior Document behavior you observe For performance defects like performance regressions or a function being slow provide a log including output generated by your application in verbose mode Expected behavior Document behavior you expect how to solve this problem A while ago I was using the binary multiplication primitive using broadcasting for implementing a channelwise multiplication Just multiply two tensors N C H W N C in the same optimized blocked format It still works as it used to work only the performance is now very very bad So Source is the tensor NCHW in nChw c format and Source is a tensor N C also in nChw c format wich should be broadcasted and multiplied together I never changed my code and it used to be very fast For some weird reason it is now the most time consuming primtive in the whole network Very weird thanks DNNL latest master build Environment cpu AMD X os Windows compiler Visual Studio cmake dnnlverboseinfoDNNL v commit f bd ba afc a d d d f ed ddfe dnnlverboseinfoDetected ISA is Intel AVX dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedAcdb af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedAcdb af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedabcdf srcf blockedabcdf dstf blockedabcdf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x nlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpubatchnormalizationbnormjitavx forwardtrainingdataf blockedaBcd bf diffundefundeff flagsmb ic ih iw dnnlverbosecreatecpubatchnormalizationbnormjitavx backwarddatadataf blockedaBcd bf difff blockedaBcd bf flagsmb ic ih iw dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpuconcatsimpleanyundefsrcf blockedaBcd bf srcf blockedaBcd bf srcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf axis x x x x x x x x x x x x x x x dnnlverbosecreatecpupoolingjitavxforwardtrainingsrcf blockedaBcd bf dstf blockedaBcd bf wsundefundeff algpoolingavgexcludepaddingmb ic ih oh kh sh ph iw ow kw sw pw dnnlverbosecreatecpupoolingjitavxbackwarddatasrcf blockedaBcd bf dstf blockedaBcd bf wsundefundeff algpoolingavgexcludepaddingmb ic ih oh kh sh ph iw ow kw sw pw dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpubinaryrefanyundefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinarymul x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpubatchnormalizationbnormjitavx forwardtrainingdataf blockedaBcd bf diffundefundeff flagsmb ic ih iw dnnlverbosecreatecpubatchnormalizationbnormjitavx backwarddatadataf blockedaBcd bf difff blockedaBcd bf flagsmb ic ih iw dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpusumsimpleanyundefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdef dstf blockedAbcde af x x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpuconcatsimpleanyundefsrcf blockedaBcd bf srcf blockedaBcd bf srcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf axis x x x x x x x x x x x x x x x dnnlverbosecreatecpupoolingjitavxforwardtrainingsrcf blockedaBcd bf dstf blockedaBcd bf wsundefundeff algpoolingavgexcludepaddingmb ic ih oh kh sh ph iw ow kw sw pw dnnlverbosecreatecpupoolingjitavxbackwarddatasrcf blockedaBcd bf dstf blockedaBcd bf wsundefundeff algpoolingavgexcludepaddingmb ic ih oh kh sh ph iw ow kw sw pw dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpubinaryrefanyundefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinarymul x x x x x x x x x dnnlverbosecreatecpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverboseexeccpureorderjituniundefsrcf blockedabcdf dstf blockedABcd b af x x x dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpubatchnormalizationbnormjitavx forwardtrainingdataf blockedaBcd bf diffundefundeff flagsmb ic ih iw dnnlverbosecreatecpubatchnormalizationbnormjitavx backwarddatadataf blockedaBcd bf difff blockedaBcd bf flagsmb ic ih iw dnnlverbosecreatecpubinaryjitavx undefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf algbinaryadd x x x x x x x x x dnnlverbosecreatecpusumsimpleanyundefsrcf blockedaBcd bf srcf blockedaBcd bf dstf blockedaBcd bf x x x dnnlverbosecreatecpureordersimpleanyundefsrcf blockedabcdf dstf pblockedABcd b af x x x dnnlverboseexeccpureordersimpleanyundefsrcf blockedabcdf dstf pblockedABcd b af x x x edited by rsdubtso for formatting