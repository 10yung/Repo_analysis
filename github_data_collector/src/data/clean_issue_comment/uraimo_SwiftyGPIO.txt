 Whats in this pull request Adds an usleep invocation right after the readfd buf bufcount MemoryLayoutCCharstride call on readData function on the UARTswift class in order to be able to fully read all the available data on the serial port before returning Is there something you want to discuss For my SwiftyXBee library I am checking whether there is available data on the serial port right before trying to read actual data from it in order to avoid blocking my program in case there is no data available Pretty often I would be getting this crash Fatal error Index out of range file homebuildSwiftOnARMswiftstdlibpubliccoreContiguousArrayBufferswift line when calling uarthasAvailableData immediately followed by uartreadData By trial an error I found out that adding a ms sleep call right after the actual read method would allow all the data to be read so that Arraybuf n at the return of the readData method wouldnt cause me a crash I know it is not the most elegant solution but it does its job Pull Request Checklist x Ive added the default copyright header to every new file x Every new file has been correctly indented no tabs spaces you can use swiftlint x Verify that you only import whats necessary this reduces compilation time x Try to declare the type of every variable and constant not using type inference greatly reduces compilation time x Verify that your code compiles with the currently supported Swift version currently x Youve read the contribution guidelines Board Type Raspberry PI but not applicable Operating System Linux Swift Version I use prebuilt binaries Description sysfs GPIO is deprecated and will be removed in so maybe it is time to update your lib if you are still interested in maintaining it Thanks for your consideration John James k ym Video explaining the interface New GPIO Interface for User Space Bartosz Golaszewski BGDev Httpsgitkernalorgpubscmlibslibgpiodlibgpiodgit An Introduction to chardev GPIO and Libgpiod on the Raspberry PI From the discussion for we discovered that a PiZero with Buster has two UARTs like the Pi Right now the Zero shares all the configuration of the Pi a new enum case should be added easy to so in beta but that need to be documented for x since the splitting of the original value will break user code Board Type RaspberryPi Operating System Raspbian Swift Version Swift Description I want to control three LEDs each connected to a different GPIO port I want to make them dimmable I know there are nonSwift solutions out there such as PiGPIO but I am looking into SwiftyGPIO to complete my project I know this is CPU intensive but are there any options for me with this library Thanks in advance The values returned by readData are not what we would expect single value instead of an array with multiple uint values that have to be used to obtain the actual temperature la SHT Board Type RPi Model B Operating System Ubuntu Mate Swift Version Swift canned Description Attempting to address four SPI slaves using a LS R breakout board Im unclear from the SwiftyGPIO SPI documentation how to do slave select Do I separately set the CS or GPIO pins lowhigh in order to select a slave ie slave select is separate from the SPI library implementation itself Thanks in advance Board Type RaspberryPi B Operating System Ubuntu Mate Swift Version Prebuilt Description Communicating with the ADC analog to digital convertor Im basing my implementation on the approach described here for Arduino Communication with the device is fine i cdetect y reports the board as present at address x Here is my code swift let myData UInt PROBLEM IS HERE i cwriteData command values myData usleep while true true i cwriteByte value let byte i creadByte let byte i creadByte let resData i creadWord command printbyte byte printresData usleep Please list any error message youve receveived during execution When I attempt to do a writeData write I get this error message true I C write failed Inputoutput error Aborted True refers to the result of isReachable Board Type Any Operating System Any Swift Version Any Description Currently the SwiftGPIO interfaces are tight up to concrete classes which heavily depend on Raspberry Pis environment OS and libraries The downside is the code which has integrated SwiftyGPIO gets crash when run on MAC In order to take advanges of XCode and enable debugging capable on MACXCode Id like to add mocks feature into SwiftyGPIO The overall feature will conduct these things Implement mock classes of UARTInterface SPIInterface I CInterface ADCInterface OneWireInterface PWMOutput Mock classes provide extra closures so that developers can provide any simulation logic into any certain function of mock object The concrete object shouldnt be created directly but by help of InstanceCreator InstanceCreate is able to instantiate the actual objects or alternative mock objects depending on things enableMock flag and the current OS if enableMock is true and the OS is MAC then return the mock object otherwise return the actual object Check out this branch for more detail Board Type Specify which kind of ARM board you are using eg RaspberryPi RaspberryPi BBB etc Raspberry Pi B Operating System Which OS are you using eg Ubuntu Mate Raspbian Armbian etc Hypriot Swift Version Which Swift version are you using Did you compile it yourself or did you use prebuilt binaries using prebuilt binaries Description Describe your hardware setup eg board connected to i c sensor and describe briefly the issue specifying the steps needed to reproduce it if necessary I have an LED on the breadboard with a resistor The ground is connected to P the positive is connected to P on a Raspberry Pi B Ive got a project created that compiles The code in mainswift is as follows import Glibc import SwiftyGPIO var gp GPIOname P id gp direction OUT repeat gp value gp value usleep whiletrue I also tried declaring gp like this let gpios SwiftyGPIOGPIOsfor RaspberryPi var gp gpios P Please list any error message youve receveived during execution When gp is declared like this var gp GPIOname P id gp direction OUT Fatal error Unexpectedly found nil while unwrapping an Optional value file homeswiftGPIOTestbuildcheckoutsSwiftyGPIOgit SourcesSwiftyGPIOswift line Current stack trace Illegal instruction core dumped When gp is declared like this let gpios SwiftyGPIOGPIOsfor RaspberryPi var gp gpios P Fatal error Cant open devmem use sudo file homeswiftGPIOTestbuildcheckoutsSwiftyGPIOgit SourcesSwiftyGPIOswift line Current stack trace Illegal instruction core dumped Whats in this pull request Changes how the PWM hardware is controlled in PWMswift to make it possible to drive both channels at the same time and rapidly be able to change the duty cycle pulsing ramps etc on the PWM channels without excess flickering Why a New Request I originally pulled from my forks master instead of the work branch This one uses the work branch so it doesnt accidentally include unrelated changes like my aarch fixes Is there something you want to discuss This PR doesnt attempt to modify the pattern writing behaviors at all and only attempts to clean things up so that when going into pattern writing you get the existing behavior while the simpler PWM control gets the new behavior with a bit of work tracking which mode the PHY is currently in Unfortunately I dont know how successful this change is Pull Request Checklist X Ive added a copyright header to every new file X Every new file has been correctly indented no tabs spaces you can use swiftlint X Verify that you only import whats necessary this reduces compilation time X Try to declare the type of every variable and constant not using type inference greatly reduces compilation time X Verify that your code compiles with the currently supported Swift version currently to support boards with Raspbian dont use any or feature X Youve read the contribution guidelines 