This branch adds a Travis CI file travisyml to automatically verify the build status of cgdb I love cgdb I have previously used it with android gdb etc I was wondering if I can use cgdb with d python m ipdb By default cgdb embeds the build date which makes it impossible to reproduce cgdb Use SOURCEDATEEPOCH when available to make cgdb reproducible Motivation This patch fixes issue I just ran into it when I updated to gdb GDB maybe older ones too but I just noticed it has a problem with the code that produces annotations Inside gdb the following code produces prompt annotation handlelineofinput if fromtty annotationlevel printfunfiltered n post putsunfiltered annotationsuffix printfunfiltered n If gdb is launched without set pagination off the code above produces out of order output which looks like this r nprompt post r n instead of postprompt r n this causes cgdbs parser to barf and garbled text to appear on cgdbs terminal gdb prompt Z Zpost gdb The fix is to launch gdb with set pagination off flag This patch implements this Hello When I use cgdb it always creates a cgdb directory directly under my home directory There is no way to configure where cgdb puts this folder its hardcoded in to the application Many applications follow XDG guidelines putting their configdata directories in locations specified by the XDGCONFIGHOME and XDGDATAHOME environment variables defaulting to config and localshare respectively Other applications use their own environment variables GPG uses GNUPGHOME etc I thought it would be nice if cgdb could do something similar perhaps using the contents of envvar CGDBDIR then defaulting to cgdb in order to not break existing behavior Im working on implementing this myself and found myself wondering if there was any interest to get this feature into cgdb proper Do you have any thoughts Apologies if this is the wrong place to discuss an issue this is my first time trying to push code upstream CONTRIBUTINGmd indicated I should discuss the issues with the active maintainers so I thought I might do that here It seems modern GDBs use color by default CGDB doesnt seem to be interpreting the escape codes and they pollute anything in the debug window This is an annoyance but it really breaks down when trying to open a new file Since the filenames themselves also have escape codes embedded in them cgdb cannot open a file once it has been navigated to I tried set debugwincolor But that didnt seem to change the outcome for me I worked around this by just telling GDB to not use color I put the following in my gdbinit file set style enabled off Is there a more proper way to work with newer GDB Is there a way maybe cgdb can turn off color when invoking gdb rather than globally turn it off I usually only use GDB through CGDB but maybe not all users do and wish to have color when running GDB plain Is there a plan to have CGDB interpret GDBs escape codes Hi Do you have any plan to add the tty window back Imperfect feature is better than nothing This feature is very useful for me and is the only reason I stick to I often open two panes in tmux and run cgdb in both panes to compare different behaviour of two revisions The debug info is printed to tty Then I can compare the output in tty window side by side I could open two more tmux panes in the same window and attach cgdb to running program The problem is that I often need to restart program to reach next checkpoint Without tty window I need to Close two debuggees Launch two debuggees Attach to two debuggees Restore previous breakpoints and run With the tty window I only need to type run in both tty window With tmux synchronizedpanes turned on I only need to type run once cgdbttytmux Thanks Yao I was trying to package from latest git b e a honggyukp build Fix a build error by adding stdc gcc version gcc GCC The compilation fails This related to stdc see I got somewhere by sprinkling ifdef STRICTANSI undef STRICTANSI include stdioh endif But ultimately it failed on adalexercpp Errors like rlinecpp error fdopen was not declared in this scope rlineinput fdopenslavefd r Consider this program include stdioh include unistdh int mainvoid int pid fork if pid putsOops failed else if pid putsHello from child else putsHello from parent return if I open it in cgdb with break set followforkmode child run The first time I get Hello from parent Thread main received signal SIGHUP Hangup If I rerun it it works perfectly and the breakpoint gets hit Can anyone reproduce this