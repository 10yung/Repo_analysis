 Have you read Atoms Code of Conduct By filing an Issue you are expected to comply with it including treating everyone with respect Do you want to ask a question Are you looking for support The Atom message board is the best place for getting support Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description Im using this package separately from Atom for syntax highlighting code snippets in markdown files Ive noticed that when I switched from HighlightjsPrism to Highlights my page rendering performance reduced This appears to be due to the number of span elements Highlights generates In addition to the ones that have class attributes with token names there are also a lot of span elements generated which dont have any class attribute When I tried stripping just the classless span tags the rendering performance was now instant again Steps to Reproduce js const Highlights requirehighlights const highlighter new Highlights const html highlighterhighlightSync fileContents answer scopeName sourceruby consoleloghtml html pre classeditor editorcolors div classline span classsource ruby spananswer nbspspan span classkeyword operator assignment ruby spanspan span span nbspspan span classconstant numeric ruby span span span span div pre Expected behavior That highlighting produces only the tags that are necessary Actual behavior Highlighting produces many span tags that are not needed the script above produces such tags Versions Highlights Have you read Atoms Code of Conduct By filing an Issue you are expected to comply with it including treating everyone with respect Do you want to ask a question Are you looking for support The Atom message board is the best place for getting support Prerequisites x Put an X between the brackets on this line if you have done all of the following Reproduced the problem in Safe Mode Followed all applicable steps in the debugging guide Checked the FAQs on the message board for common solutions Checked that your issue isnt already filed Checked that there is not already an Atom package that provides the described functionality Description Im using highlights as a library outside of Atom It works great except that I noticed that in certain cases it adds trailing span nbspspan at the end of lines This is not a problem visually but when developers are copypasting code into their editors the trailing whitespace will get pasted as well Steps to Reproduce Run the following script js const Highlights requirehighlights const highlighter new Highlights const rubyCode Sequelmigration do change do addcolumn photos imagedata text or jsonb end end let html highlighterhighlightSync fileContents rubyCode scopeName sourceruby consoleloghtml Expected behavior I expect only whitespace to be translated into nbsp Actual behavior Additional trailing nbsp character is added after the or jsonb comment html pre classeditor editorcolors div classlinespan classsource rubyspan classsupport class rubyspanSequelspanspanspan classpunctuation separator method rubyspanspanspanspanmigration nbspspanspan classkeyword control startblock rubyspandospanspanspandiv div classlinespan classsource rubyspan nbsp nbspchange nbspspanspan classkeyword control startblock rubyspandospanspanspandiv div classlinespan classsource rubyspan nbsp nbsp nbsp nbspaddcolumn nbspspanspan classconstant other symbol rubyspan classpunctuation definition constant rubyspanspanspanspanphotosspanspanspan classpunctuation separator object rubyspanspanspanspan nbspspanspan classconstant other symbol rubyspan classpunctuation definition constant rubyspanspanspanspanimagedataspanspanspan classpunctuation separator object rubyspanspanspanspan nbspspanspan classconstant other symbol rubyspan classpunctuation definition constant rubyspanspanspanspantextspanspanspan nbspspanspan classcomment line numbersign rubyspan classpunctuation definition comment rubyspanspanspanspan nbspor nbspjsonbspanspan nbspspanspanspandiv div classlinespan classsource rubyspan nbsp nbspspanspan classkeyword control rubyspanendspanspanspandiv div classlinespan classsource rubyspan classkeyword control rubyspanendspanspanspandiv pre I believe this is because highlights converts empty strings into nbsp we can see there is one extra empty string in the list of tokens js value Sequel scopes Array value scopes Array value migration scopes Array value do scopes Array value change scopes Array value do scopes Array value addcolumn scopes Array value scopes Array value photos scopes Array value scopes Array value scopes Array value scopes Array value imagedata scopes Array value scopes Array value scopes Array value scopes Array value text scopes Array value scopes Array value scopes Array value or jsonb scopes Array value scopes Array value scopes Array value end scopes Array value end scopes Array Reproduces how often Every time Versions Highlights The default class names generated by highlight keyword comment etc dont match those generated by lessc when compiling up a theme We should change the default scopePrefix in highlightsjs to syntax eg if thisscopePrefix null thisscopePrefix syntax This module does not support elm at the moment which means that elm blocks are not highlighted when editing markdown files in Atom However there exists an external languageelm package which works well for highlighting in elm files already Would that be possible to make that package a dependency for highlights I can submit a PR if this idea sounds reasonable The version I get when I npm install highlights is Thats also the latest version listed on the npm page But thats not the latest the latest seems to be And I can in fact get that latest version if I npm install highlights Any idea whats going on here ascii were running into a nasty issue with markymarkdown on Travis markymarkdown is what npm uses to render package READMEs on npmjscom Were trying to upgrade to the newest highlights so that we can pull in syntax highlighting for Typescript and JSX but when I upgrade to the newest highlights tests start hanging infinitely and timing out on Travis Ive managed to bisect this issue to the x to x firstmate upgrade in highlights tests run fine in Node and they run fine locally with Node but Im concerned that Travis might be surfacing an underlying instability that we should be mindful of Looping in revin whos been helping out a ton on the markymarkdown project Any thoughts about next steps If I had to guess Id bet the issue is either the oniguruma or fsplus upgrade in firstmate Fixes My plugin works in Atom but broken with this package In trying to follow the example in the README I found that I was stuck with nullgrammar unless I provided a filePath option scopeName alone wouldnt do as the example suggests Is there something Im missing Or should I make a PR to add this to the docs gulptslint needs TypeScript support for npmjsorg which uses atomhighlights at least used to use according to npmjsorg blog See my comment here Should be straightforward to add I think