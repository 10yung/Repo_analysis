Hey would you consider tagging releases more frequently with a patch number This would help us engage with upstream development indeed with the current release cycle our merged PRs get into releases several months later so we cannot not use them in our projects It would be more of an incentive if we new there could be a patch release including our changes in the next few weeks Also the to migration was difficult for us because of the large number of changes at once Also this may prevent breakages by enabling more rapid feedback from downstream Finally this would enable rolling out features faster to outside users For example we are really excited by the ability to override variable is really cool but we dont know when it will be in a release In our conda packaging for v we had to revert the change introduced in commit which switches from detecting the sysroot at runtime from using the build time value The problem is that we cannot distribute the OS X SDK in a conda package because of license reasons Hence we build things with an old version of the SDK so that it can run with newer ones However with that change cling will look exactly at where the SDK was at build time which prevents distributing a binary of cling on a different machine like we do with conda cc chrisburr I just completed the packaging of cling for condaforge and now we also have a windows package Woot Now I am working on building xeuscling against that version of cling and on windows I am missing the import library PREFIXliblibclinglib while PREFIXbinlibclingdll is present Is there a compilation flag that I should be using to enable the creation of the import library We were able to package cling for condaforge on windows but we are seeing this error message upon startup Windows RegQueryValueExInstallationFolder returned The system cannot find the file specified CLINGWINDOWS Hi i have a problem with stdfuture If I run the following code I get the following error C cling pthread CLING Type C code and press enter to run it Type q to exit cling include iostream cling include future cling int foo cling stdfutureint f stdasync return cling f wait cling return f get cling cling int i foo IncrementalExecutorexecuteFunction symbol emutlsvZSt oncecall unresolved while linking function GLOBALsubIclingmodule IncrementalExecutorexecuteFunction symbol emutlsvZSt oncecallable unresolved while linking function GLOBALsubIclingmodule cling i int cling i foo x f PrintStackTraceSignalHandlervoid homesehrigprojectsxeusclingcudainstallreleasebincling x f x d SignalHandlerint homesehrigprojectsxeusclingcudainstallreleasebincling x d x f a c c b libx linuxgnulibcso x b x f a c c gsignal libx linuxgnulibcso x x f a c c a abort libx linuxgnulibcso x a x f a c e libx linuxgnulibgccsso x x f a d fc x f a d x f a d x f a d c x f a d x f a d d x f a d x a ecc clingIncrementalExecutorexecuteWrapperllvmStringRef clingValue const homesehrigprojectsxeusclingcudainstallreleasebincling x a ecc x b f clingInterpreterEvaluateInternalstdcxx basicstringchar stdchartraitschar stdallocatorchar const clingCompilationOptions clingValue clingTransaction unsigned long homesehrigprojectsxeusclingcudainstallreleasebincling x b f x b clingInterpreterprocessstdcxx basicstringchar stdchartraitschar stdallocatorchar const clingValue clingTransaction bool homesehrigprojectsxeusclingcudainstallreleasebincling x b x f d e clingMetaProcessorprocessllvmStringRef clingInterpreterCompilationResult clingValue bool homesehrigprojectsxeusclingcudainstallreleasebincling x f d e x e eb clingUserInterfacerunInteractivelybool homesehrigprojectsxeusclingcudainstallreleasebincling x e eb x d main homesehrigprojectsxeusclingcudainstallreleasebincling x d x f a c b libcstartmain libx linuxgnulibcso x x start homesehrigprojectsxeusclingcudainstallreleasebincling x Stack dump Program arguments homesehrigprojectsxeusclingcudainstallreleasebincling pthread SIGABRT abort PC x abb m sigcode I found some similar Issues but without a solution or workaround So my question is is there a workaround By the way upgrading the LLVM base to version should solve the problem Hello I find the existing methods for loading thirdparty libraries to be a bit verbose and tightly coupled to the file system I would like to propose a new pragma that allows dependencies to be linked using pkgconfig It would be something like C pragma cling pkgconfiglibname This picks up the include directories lib directories lib names other flags etc in a single pragma Also it doesnt have any hardcoded paths As long as PKGCONFIGPATH is defined in the environment where the pc files are found everything will be found My inspiration for this is how cgo uses comment magic to link dependencies with pkgconfig AxelNaumann Load unload and load anonymous namespace will generate an error bash L testh U testh L testh The error info is bash error use of undeclared identifier test template class infotestint The content of testh is c ifndef test define test namespace templatetypename T class test namespace hello templatetypename T class info template class infotestint endif If we omit the anonymous namespace specifier namespace there will be no error c ifndef test define test templatetypename T class test namespace hello templatetypename T class info template class infotestint endif Hi I was wondering if there has been any thought about proposing to put the project under the LLVM umbrella given the projects reliance on clangs and llvms everchanging apis It would help keep the project in sync with upstream and potentially gain more visibilitycontributors Hi There This project is still using an old implementation of LGTMs automated code review which has now been disabled To continue using automated code review and receive checks on your Pull Requests please install the GitHub App on this repository Thanks The LGTM Team running cling cpt to build on mingw gave me cptpy c Cling Packaging Tool CPT Arguments vector cptpy c cling AMD Sat Oct Thread Model NT Operating System Windows Distribution NA Release Windows Revision Architecture AMD Check availability of required softwares git OK python OK SSL SUPPORTED subprocessCalledProcessError Command REG QUERY HKEYCLASSESROOTVisualStudioDTE returned nonzero exit status Clean up How to solve this to be able to build it on Mingw succesfully Thanks