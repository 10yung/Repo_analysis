When building with Bazel deprecated warnings for CSV Reporter causes builds with warning as errors to fail Similar to INFO From Compiling externalgooglebenchmarksrcbenchmarkcc externalgooglebenchmarksrcbenchmarkcc In function stduniqueptrbenchmarkBenchmarkReporter benchmarkinternalanonymousCreateReporterconst string benchmarkConsoleReporterOutputOptions externalgooglebenchmarksrcbenchmarkcc warning CSVReporter is deprecated The CSV Reporter will be removed in a future release Wdeprecateddeclarations return PtrTypenew CSVReporter In file included from externalgooglebenchmarksrcbenchmarkcc bazeloutk optbinexternalgooglebenchmarkvirtualincludesbenchmarkbenchmarkbenchmarkh note declared here The CSV Reporter will be removed in a future release CSVReporter Currently were getting around this by patching the BUILDbazel file with copts Wnodeprecateddeclarations The diagnosticstest crashes on macOS Catalina My toolchain uses CMake MacPorts LLVM Clang and Ninja Google Benchmark is built in debug mode I have included the stacktrace from LLDB below thread queue comapplemainthread stop reason signal SIGABRT frame x fff fa libsystemkerneldylibpthreadkill frame x fff febc libsystempthreaddylibpthreadkill frame x fff c a c libsystemcdylibabort frame x c e libbenchmark dylibbenchmarkinternalCallAbortHandler frame x ba libbenchmark dylibbenchmarkinternalCheckHandlerCheckHandler frame x b libbenchmark dylibbenchmarkinternalCheckHandlerCheckHandler frame x a f libbenchmark dylibbenchmarkStatePauseTiming frame x diagnosticstesttryinvalidpauseresumebenchmarkState frame x a diagnosticstestBMdiagnostictestbenchmarkState frame x e libbenchmark dylibbenchmarkinternalFunctionBenchmarkRunbenchmarkState frame x bac libbenchmark dylibbenchmarkinternalBenchmarkInstanceRununsigned long long int benchmarkinternalThreadTimer benchmarkinternalThreadManager const frame x a libbenchmark dylibbenchmarkinternalanonymous namespaceRunInThreadbenchmarkinternalBenchmarkInstance const unsigned long long int benchmarkinternalThreadManager frame x d libbenchmark dylibbenchmarkinternalanonymous namespaceBenchmarkRunnerDoNIterations frame x db libbenchmark dylibbenchmarkinternalanonymous namespaceBenchmarkRunnerDoOneRepetitionlong long frame x d b libbenchmark dylibbenchmarkinternalanonymous namespaceBenchmarkRunnerBenchmarkRunnerbenchmarkinternalBenchmarkInstance const std vectorbenchmarkBenchmarkReporterRun std allocatorbenchmarkBenchmarkReporterRun frame x d f libbenchmark dylibbenchmarkinternalanonymous namespaceBenchmarkRunnerBenchmarkRunnerbenchmarkinternalBenchmarkInstance const std vectorbenchmarkBenchmarkReporterRun std allocatorbenchmarkBenchmarkReporterRun frame x cf f libbenchmark dylibbenchmarkinternalRunBenchmarkbenchmarkinternalBenchmarkInstance const std vectorbenchmarkBenchmarkReporterRun std allocatorbenchmarkBenchmarkReporterRun frame x c libbenchmark dylibbenchmarkinternalanonymous namespaceRunBenchmarksstd vectorbenchmarkinternalBenchmarkInstance std allocatorbenchmarkinternalBenchmarkInstance const benchmarkBenchmarkReporter benchmarkBenchmarkReporter frame x bd libbenchmark dylibbenchmarkRunSpecifiedBenchmarksbenchmarkBenchmarkReporter benchmarkBenchmarkReporter frame x b ad libbenchmark dylibbenchmarkRunSpecifiedBenchmarks frame x c c diagnosticstestmain frame x fff fa fd libdylddylibstart frame x fff fa fd libdylddylibstart targetlinklibrariesbenchmark lpthreads NAG Fortran Compiler had the compile flag pthread in Version Using a recent version with cmake ends up having pthread in the linker command which results in the error nagfor Option error Unrecognised option pthread Using lpthreads instead is working fine Closed cmake issue Ive been using Google benchmark with Google test successfully on multiple platforms I build and install Google test then build Google benchmark against the installed test Since switching to benchmark this does not work anymore I get an error that Google test is not found Here is an excerpt from a build on Ubuntu x with cmake How can I help to debug this issue Looking for Google Test sources Looking for Google Test sources in dataDebuggooglebenchmarkrelease googletest CMake Error at CMakeListstxt message Did not find Google Test sources Either pass correct path in GOOGLETESTPATH or enable ALLOWDOWNLOADINGGOOGLETEST or disable BENCHMARKENABLEGTESTTESTS BENCHMARKENABLETESTING CMake Error at dataToolssharecmake ModulesExternalProjectcmake getproperty getproperty could not find TARGET googletest Perhaps it has not yet been created Call Stack most recent call first CMakeListstxt ExternalProjectGetProperty CMake Error at dataToolssharecmake ModulesExternalProjectcmake message External project googletest has no SOURCEDIR Call Stack most recent call first CMakeListstxt ExternalProjectGetProperty Configuring incomplete errors occurred See also dataDebuggooglebenchmarkrelease x thirdpartygoogletestCMakeFilesCMakeOutputlog CMake Error at cmakeGoogleTestcmake message CMake step for googletest failed Call Stack most recent call first CMakeListstxt include Configuring incomplete errors occurred I am facing a build error with PyTorch with a custom path installed gcc The build command fails at CMake Error at thirdpartybenchmarkCMakeListstxt message Failed to determine the source files for the regular expression backend and that is C feature checks Determine the correct regular expression engine to use cxxfeaturecheckSTDREGEX cxxfeaturecheckGNUPOSIXREGEX cxxfeaturecheckPOSIXREGEX ifNOT HAVESTDREGEX AND NOT HAVEGNUPOSIXREGEX AND NOT HAVEPOSIXREGEX messageFATALERROR Failed to determine the source files for the regular expression backend endif However it seems that there is not verbosity for cxx checks Is there any idea on how to narrow the problem Im trying the new environment variable support but environment variables seem to be ignored buildtestdebugarrowbitutilbenchmark benchmarkfilterxxx Failed to match any benchmarks against regex xxx BENCHMARKFILTERxxx buildtestdebugarrowbitutilbenchmark Benchmark Time CPU Iterations UserCounters BitmapReader ns ns bytespersecond Ms etc Im using changeset ff abc d e a b fc Id like to use this library for microbenchmarks but I am concerned about the possibility of this library taking on a dependency on Abseil like Google Test is doing soon On the Abseil website i t is mentioned that many Google OSS projects will be incorporating Abseil Is Google Benchmark planning on adding Abseil soon Currently the number of iterations is determined dynamically like Concretely the number of iterations is at least one not more than e until CPU time is greater than the minimum time or the wallclock time is x minimum time The minimum time is set per benchmark by calling MinTime on the registered benchmark object A method to specify our own MinIterations and MaxIterations would be really helpful I added tests with assembly check into donotoptimizeassemblytestcc I tested successfully with g and clang on my machine Using Intel C ICC the current master as this branch fails rundonotoptimizeassemblytestCHECK Failed runstateassemblytestCHECK Failed runclobbermemoryassemblytestCHECK Failed to also allow registers to be covered Corresponding Issue GCC discussion 