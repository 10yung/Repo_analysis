 Expected Behavior We build offline amis for our servers and wed like to install sensu client in advance We cant unless we have a way to do it without ui or any prompts in silent mode Current Behavior Current installer doesnt support silent installer it always opens the UI Possible Solution Not sure how to add this support Steps to Reproduce for bugs Try to install it silently Context We prebuild the windows images for our servers to expedite deployment of our application We currently have to install sensu manually after the server instance is created Your Environment Include as many relevant details about the environment you experienced the bug in Sensu version used Active Sensu extensions eg WizardVan Operating System and version eg Ubuntu Windows Server Transport and runtime versions eg RabbitMQ on Erlang RabbitMQ Thanks in advance Please release sensu core package for Debian buster Hello what are the required steps to delete checks that are no longer needed Deleting a check and restarting services doesnt seem to work A step by step guide to deleting checks will be very helpful Thank you Provide a general summary of the issue in the Title above I have some sensu clients running sensu version The clients disconnect and reconnect to rabbitmq with a different queue name but do not remove their old queues I understand that I am running a really old version of sensu so has this been fixed in a newer version Expected Behavior If youre looking for help please see for resources If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work The sensu client should have its queue removed after it disconnects or establish connection back to the old queue Their queue names had the same SERVERNAMEVERSION but with a different timestamp Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior The sensu client disconnects from rabbitmq reconnects to rabbitmq and creates a new queue as SERVERNAMEVERSIONTIMESTAMP The sensu client runs fine without problems because it is consuming messages from a different queue while its old queue keeps collecting check request messages rabbitmqctl listqueues test test Possible Solution Not obligatory but suggest a fixreason for the bug or ideas as to the implementation of the addition or change Make the sensu client check for any duplicate queues when it first connects Steps to Reproduce for bugs Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code or configuration to reproduce if relevant Its a bit hard to reproduce I have over k sensu clients Disconnect a sensu client Allow the sensu client to reconnect It creates a new queue for its message while leaving the old queue up Context How has this issue affected you What are you trying to accomplish Providing context eg links to configuration settings or log data helps us come up with a solution that is most useful in the real world I run my RabbitMQ servers on ec instances that will eventually run out of memory start writing to disk fill up quickly and crash the rabbitmqserver service Your Environment Include as many relevant details about the environment you experienced the bug in Sensu version used Active Sensu extensions eg WizardVan Operating System and version eg Ubuntu RHEL Transport and runtime versions eg RabbitMQ on Erlang RabbitMQ on Erlang R B When I hit results for the current status of a check with the api the history of the last few checks can be seen as expected as a list of ints curl client testclientnet check thresholds warning critical name keepalive issued executed output No keepalive sent from client for seconds status type standard history What I would have expected was this checks data would match what is provided with the events api and it mainly is with one notable exception The history array is switched to a list of strings curl id f b b bdb f a c b d client name testclientnet address xxxxxxxxxxxx subscriptions clienttestclientnet redact socket bind port safemode false keepalive version timestamp check thresholds warning critical name keepalive issued executed output No keepalive sent from client for seconds status type standard history totalstatechange occurrences occurrenceswatermark lastok action create timestamp laststatechange silenced false silencedby Expected Behavior The datatypes returned for history from results and events should match Current Behavior As described above different datatypes are shown for check history Steps to Reproduce for bugs hit events for any event with history hit results and look up that same check Context Discovered while writing a go application talking to sensu The json lib failed to unmarshal responses where the same struct was used for both endpoints Your Environment Sensu version used Operating System and version CentOS RabbitMQ version Is there any google chat module to send alerts via sensus google chat handler to more than one room chat room Ex As like in Slack we have multislackhandlerrb handler is there to trigger alerts on multiple channels via subscriptions which we defined Is this same kind of thing Possible with google chat In my case I have created two channels in Sensu sensucore open source edition but I am getting alerts in only one channel after few minutes I am getting alerts on another channel as well but it sends alerts in only one channel at a time How can we get alerts in all the channels on sensu with google hangout handler When sensuclient receives a service stop signal while processing a check it will wait for the check to complete before shutting down However during that completing checks in progress state if a service start signal is issued service still return a message saying that sensuclient is already running even though it is in process of shutting down Expected Behavior sensuclient service should have a state equivalent to in progress of shutting down That way when service start signaled it can wait for the shut down before starting back again Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference from current behavior sensuclient service reports a running state and then proceeds to shut down Steps to Reproduce for bugs Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code or configuration to reproduce if relevant Initiate a long running check in Sensu Issue service sensuclient stop Tail sensuclientlog in a separate window to see that TERM signal is received and its waiting for the check to complete In another separate window issue service sensuclient start Upstart will inform that the service is already running Wait a bit for the long running check to complete Now sensuclient is stopped Your Environment Include as many relevant details about the environment you experienced the bug in Sensu version used Operating System and version eg Ubuntu Ubuntu EDIT I mistakenly thought Upstart was involved its not This is probably just the init script You can replace service sensuclient stopstart with etcinitdsensuclient stopstart and reproduce the same result I found while searching for this issue but since its closed and the last update says about creating a new issue so thats what Im doing here Were running Sensu on prod Windows servers OS is a mixture of Windows R R This has only happened on the R servers so far Its not often that we see the message but it does appear randomly across various different checks Since December it seems to have occurred about times bearing in mind that theres about checks per server and most of those checks run once every minutes Theres no particular server that it seems to happen more on and theres no specific check that seems to be more troublesome Current Behavior I initially thought it was one of the system calls that we being run from within the script that we trigger the check actually runs a script against local install of Perl on the server I tried redirecting all stderr messages from the script to Windows equivalent of devnull nul but the error still appears This leads me to think that the agent is getting the error when its trying to run the actual command Perl in this case Theres not much online as this error doesnt appear to be particularly specific The only good thing is that the agent recognises that it has failed and we get a nonzero return code back which triggers our handler Nothing appears in the Event Log in Windows and the Sensu log just shows the info messages with the check result Not sure whether turning debug logging on would help But whether wed catch it on the same server again is anyones guess timestamp T levelinfomessagereceived check requestcheckalertmessageService id is down additionaltextcommandcoptperl perlbinperlexe coptsensupluginscheckserviceswindowspl nulhandlers snmp namecheckserviceswindowsissued timestamp T levelinfomessagepublishing check resultpayloadclientMYCLIENTcheckalertmessageService id is down additionaltextcommandcoptperl perlbinperlexe coptsensupluginscheckserviceswindowspl nulhandlers snmp namecheckserviceswindowsissued executed duration outputUnexpected error The parameter is incorrect status Not sure what status is its nothing that my script would set so I guess its some error detection in the sensuclient itself Any helpsuggestions would be much appreciated Happy to try something out if itll help get to the bottom of the cause Expected Behavior When failing to connect to Redis or Redis Sentinel instances Sensu will use a backoff mechanism to slow the rate of reconnect attempts Current Behavior Retrying connections to Redis or Redis Sentinel occurs at a fixed interval Possible Solution Implement a backoff mechanism to control reconnect attempts to Redis and Redis Sentinels Steps to Reproduce for bugs Configure sensuserver with a Redis hostname that does not resolve Start Sensu monitor varlogsensusensuserverlog for errors Note that sensuserver consistently attempts to resolve the nonexistent DNS name twice or more per second Context As described in the lack of backoff mechanism can lead to denial of service in cases where a sufficient volume of DNS lookups might overwhelm resolver infrastructure Similarly errors received from Redis after opening the connection may cause Sensu services to drive up the number of connections to the Redis server leading to another denial of service scenario Your Environment Include as many relevant details about the environment you experienced the bug in Sensu version used Sensu Core Operating System and version eg Ubuntu Centos Transport and runtime versions eg RabbitMQ on Erlang RabbitMQ Erlang I installed sensu on a Debian host without IPv addresses I expected everything to work because I noticed Sensu was doing IPv nicely with RabbitMQ but it caused me some time to debug why It wouldnt start I got the following errors timestamp T levelinfomessageconfiguring sensu spawnsettingslimit timestamp T levelwarnmessagetransport connection errorreasontcp connection lost optsensuembeddedlibrubygems gemseventmachine libeventmachinerb in starttcpserver no acceptor port is in use or requires root privileges RuntimeError from optsensuembeddedlibrubygems gemseventmachine libeventmachinerb in startserver from optsensuembeddedlibrubygems gemssensu libsensuclientprocessrb in setupjsonsocket etc etc Expected Behavior I expected Sensu to start nicely without any issues Current Behavior I got the error above Possible Solution I managed to work around this issue by adding the following configuration in clientconf socket bind port httpsocket bind port Steps to Reproduce for bugs Create a IPv only machine Install and configure Sensu Context Sensu in an IPv only environment Your Environment rootdb etcsensuconfd lsbrelease a Distributor ID Debian Description Debian GNULinux stretch Release Codename stretch rootdb etcsensuconfd dpkg l grep sensu ii sensu amd A monitoring framework that aims to be simple malleable and scalable rootdb etcsensuconfd for i in ls do cat i done client name REDACTED address fc environment production subscriptions linux level support ssh socket bind port httpsocket bind port rabbitmq ssl host REDACTED port vhost sensu user REDACTED password REDACTED transport name rabbitmq reconnectonerror true 