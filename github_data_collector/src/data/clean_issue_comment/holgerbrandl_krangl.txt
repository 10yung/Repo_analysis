java should be supported to build test and use krangl Hello When reading a CSV file I was wondering if there was any way I could specify not to peek into the first samples of a column but rather intuit the column type from all the data in the column Is there such functionality possible when reading a CSV file Fred Running on Android I get Error Method name in class kranglExtensions cannot be represented in dex format on Android text is supported by postgresql see Hi I am currently going through the tutorial At the bottom of the page there is a code listing kotlin PC vs PC scatter plotOfprojectiontransposearraywithIndex markMarkTypepoint encodingx value encodingy value encodingtext PCindex render This uses plotOf which isnt in any of the following packages kotlin dependencies compilekotlinstdlibjdk implementationcomgithubholgerbrandl kravis compilecomgithubholgerbrandl krangl v compileorgapachecommons commonsmath compile comgithubchen javaglm compilecomgithubhaifengl smileplot compilecomgithubhaifengl smilemath compilecomgithubhaifengl smiledata compilecomgithubhaifengl smileinterpolation compilecomgithubhaifengl smilenlp compilecomgithubhaifengl smilenetlib Can you please help me to either update the call or to find it Best Marius Hello Holger Brandl Im not working in the data science domain but find your talks about it super interesting While browsing the Internet I came accross this thing that may be interesting for Krangl to leverage The Frictionless Datas Datapackage specification consists of a json file of metadata that accompanies a CSV file that describes column types versions sources and how to validate correctness of the CSVs data This allows for quite a lot of tooling and workflow improvements to CSV files without mucking with the CSV itself I can imagine how you could generate a data class from that JSON and improve the Krangl workflow Example val df someListdeparsepropName See Api would be much more fluent because we would no longer suffer from limited operator overlaoding It also would require user to learn fewer verbs Currently also the vectorized helpers seem more confusing than helpful Now dfaddColumnfoo it bar dffilter it weight gt dfaddColumnwithanz it firstname asStringsmap itcontainsanz With elementwise operations dfaddColumnfoo it bar dffilter it weight dfaddColumnwithanz it firstname scontainsanz However this would not work for aggregation val sumDF dfsummarize meanweight to it weight meanremoveNA true numpersons to nrow Also certain column operations would be harder to implement with a elementwise API such as val sumDF dfaddColumns proportion to it weight it weight sum Maybe the complete vector could be exposed itdf weight 