This fixes issue gpm assumes that the source code repository is always located at a specific level ie when downloading package hostfoobar the repo has to be in the bar directory Although this is true for many project eg hosted on githubcom there are exceptions Here is an example I have a Godeps file with the following content cloudgooglecomgocomputemetadata v When running gpm get it shows the following output Getting package cloudgooglecomgocomputemetadata Setting cloudgooglecomgocomputemetadata to version v But when I switch to the corresponding directory and issue a git status I can see that the repo is on branch master and not on v This is due to the fact that the Git repository is located at cloudgooglecomgo ie one level above the expected one When environment variable GPMGETSERIAL is set dependencies are downloaded sequentially This fixes issue Running go get in parallel for packages that depend on each other sometimes leads to an error Here is an example I have a Godeps file with the following content golangorgxoauth fdf d c db e f ca golangorgxnetcontext b b ec b cf a e c c b d When running gpm get it reports an error Getting package golangorgxoauth Getting package golangorgxnetcontext cd Usersmetmpsrcgolangorgxnet git pull ffonly From new branch master originmaster new branch releasebranchgo originreleasebranchgo new branch releasebranchgo originreleasebranchgo new branch releasebranchgo originreleasebranchgo new branch releasebranchgo originreleasebranchgo There is no tracking information for the current branch Please specify which branch you want to merge with See gitpull for details git pull remote branch If you wish to set tracking information for this branch you can do so with git branch setupstreamtooriginbranch master package golangorgxnetcontext exit status Failed getting package golangorgxoauth Setting golangorgxoauth to version fdf d c db e f ca Setting golangorgxnetcontext to version b b ec b cf a e c c b d When issuing the go getcommands sequentially no error is reported I found gpm and wanted to give it a try It looks like it does not support pinning dependencies based on commits I have this in my Godeps file githubcomalicebobminiredis bb e f b d bf e f cf abe This is what I get cd pathtoworkspacesrcgithubcomalicebobminiredis git pull ffonly You are not currently on a branch Please specify which branch you want to merge with See gitpull for details git pull remote branch package githubcomalicebobminiredis exit status Is this intended Can we make it work We currently use an assert script that somebody wrote and a custom script to execute all tests its kind of messy Id prefer if we had something more polished enter BATS Ill do this at some point if I have the time and the drive if not I welcome anyone who wants to take a crack at doing it We have a case where we need the toplevel pkg of a given Go pkg for use in our application and also one of its subpkgs bc its a CLI It seems gpm produces errors in output because it tries to git checkout the subpkg even though its not a submodule but just a subdirectory in the parent pkg Fortunately gpm seems to still work as the binary gets installed in GOPATHbin however itd be nice if we could avoid or suppress errors in output from gpm to avoid confusion You can see a basic Godeps file here along with the errors from running gpm Also I set GOPATH and GOBIN to a temporary directory for the test above and again the binary was installed along w the pkg Potential workarounds Do not issue vcs checkout commands if its a subpkg and its not a submodule or equivalent Add a comment in the version placeholder to designate no checkout whereby the vcs will not attempt to checkout the subpkg Punt and instruct users to move the subpkg to a Makefile or other build script using go get after a gpm run I dont know if any of these ideas are good but maybe something sparks Something along the lines of bundle outdated that ruby has but for go This would help a lot in terms of keeping up to date with the latest versions when using version constraints in the Godeps file If the path to gpms working directory contains white spaces I see the following errors Setting githubcommattngosqlite to version usrlocalbingpm line cd UserscodewerftCodewerftKunden No such file or directory usrlocalbingpm line cd UserscodewerftCodewerftKunden No such file or directory The working directory in the case above was UserscodewerftCodewerftKunden XYZEntwicklungreactorbackend Does gpm install a dependences gpm file If not what are your thoughts on this feature I realized the other day that if my dependencies also have specific version requirements i need gpm to satisfy those I considered writing a plugin for this but this seems like something that should be core to gpm in my opinion Thoughts 