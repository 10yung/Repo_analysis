Whats in this pull request Provided support for xcode and swift and updated Why merge this pull request Updated the dependency like swiftcheck for supporting xcode and swift joshvera ryanbooker josephlord dtchepak Please review and merge Version Tag Reproducible also on commit ad d c eea cf b a HEAD master originmaster originHEAD Merge afb ce Author Robert Widmann devteamcodafigmailcom Date Sun Apr Environment macOS High Sierra E Description SwiftzSwfith header file is not produced when the framework is archived Steps To Reproduce carthage build archive Expected Result SwiftzSwfith header file is produced when the framework is archived Actual Result SwiftzSwfith header file is not produced when the framework is archived Additional information The file is relatively important since carthage uses it to determine whether a binary artifact is still valid in the build CarthageBuild folder when using cachebuilds See The Cartesian Monoidal Functor Cartesian was in Monoidalswift This commit just renames the file to match the protocol it contains Whats in this pull request The commit merely changes the filename Monoidalswift to Cartesianswift to match the protocol it contains Why merge this pull request It will be more obvious to folks which file to open when looking for the Cartesian protocol Whats worth discussing about this pull request Probably not much What downsides are there to merging this pull request None Description It seems Swiftz specs are not available in main repo of Cocoapods pod search Swiftz Swiftz Swiftz is a Swift library for functional programming pod Swiftz Homepage Source Versions master repo I see that Cocoapods is not mentionned in Readme as setup so I am just wondering if it is supported or not Expected Result Upload missing versions to Cocoapods trunk It would be fantastic to have improved documentation probably some more introductory information for the nonfunctionalist and possibly a Playground Sound familiar Approaching Swiftz from a purely Swift Objective C background a lot of this will seem pretty incomprehensible Approaching it from a Scala background makes it much easier but there are significant syntax differences and features that we just dont see much in Scala For instance I still have no idea what a Lens is I really ought to look into that Because we dont have transformers it doesnt seem like there would be much use for it but it worked so well with SwiftCheck I think it would be a nice thing to just have them lying around What do you think Because exceptions in Swift My bad Should have been using from the getgo Swift has an interesting approach to numeric protocols Its a real helterskelter mix of some that add operations make things integery make things floatingpointy signal access times for collectionsy etc What it doesnt do is actually define a good hierarchy of the values their numeric structures can represent I think we can fix that The NInt et al machinery can be collapsed and reappropriated for arbitrary precision arithmetic somehow GMP OpenSSL CommonCrypto We can define proper numeric type classes and conformances for swift types and get real numeric constraints going for once Radar submitted Radar With and you can show Int String and define the function swift func applya Int String return a that correctly type checks showing unsoundness Commentary It appears swift isnt fully obeying the type constraints provided in where clauses 