DEBUGSTACK only supports stack print Its much better if we can stop at any line of code and investigate Just want to say Ive had a lot of fun with gravity I created an issue about adding http support Im still unsure if this is wanted at this point in the project With feedback Id be happy to refactor this janky pr a bit and implement the rest for an mvp Or you can tell me my code sucks and to go home Ive been testing using a basic flask server and the following gravity script func main var gettests host host path usersjamesalbert host path get gettestsloopfunc request var resp Httpgetrequest Systemprint respHostname Systemprintresp var posttests host path post data pet cat posttestsloopfunc request var resp Httppostrequest Systemprint respHostname Systemprintresp Im not sure if http support is better implemented builtin or through a library but its a generally useful feature I took a stab at handling get requests super ugly just got an mvp going Are there already plans to implement something like this If not with some feedback is this something that can be added to the project Hello there I was writing some examples to test and document the access modifiers and I found that the code below works class TestAccessModifiers public var myvar Im public private var myhiddenvar Im private public func gethidden return myhiddenvar private func getpublic return myvar func putsstr Systemprintstr func main var test TestAccessModifiers testmyvar putsPublic var holds testmyvar works putsGet hidden var from public method testgethiddenworks putsPrivate var holds testmyhiddenvar works and cause error like it should putsGet public var from private method testgetpublicdoesnt works As result from the terminal I get Get public var from private method Im public I donno but I guessing that the keyword private before the keyword func should print the same or almost the same value as in putsPrivate var holds testmyhiddenvar which is RUNTIME ERROR Unable to find myhiddenvar into class TestAccessModifiers Thanks Hello What do you think to add command line arguments to the interpreter gravity gravity myfilegravity arg arg arg And perhaps a class or variable for read it Gravity could be a great candidate for WebAssembly to share code between web and mobile applications With your permission Id like to package this for Homebrew The current WIP is below any help you can provide is appreciated Unfortunatly Im not familiar enough with C to know specifics re the install procedures or how this should be tested class Gravity Formula desc The Gravity Programming Language homepage url sha ac e d eac c f b b b e b ff cf eb fbfe c dependson cmake build def install system make install end test do system false end end Hello there To begin this features requests stepping with my right feet piedi I would like to say Im very enthused entusiasmato with your language So congratulations and thank You for sharing your work Now down to business Finish writing the documentation and enhance how to work with c bindings publishing examples samples and tutorials I really want to create modules for gravity and to do that it would be nice to have a better binding mechanism fully documented I would like to know if you can think about a package manager to the language and name it It would be very nice to have this feature even if the language is new in order to allow the growth of the project and to allow us to interact more with gravity This feature could work integrated with git repositories Organize the website and add in example the roadmap blog and more navbar links on the index page to find easily more about the language eliminating the need to visit githubs issues Express what at the current moment is needed in terms of help to make the lang grow Tutti bene i grazie Python has a module named ctypes the module relays on library named libffi I was trying to implement the same feature for gravity this is an example how to use the library and this is the github page of the library and this is how python uses the library to make native calls to cc methods so if it should be planned to implement similar feature these resources can help By builtin I mean that argument names for all functions should be simply generated from their definitions for example func fx y z would allow positional arguments call f named fy z x and mixed fx Here every name defines exact position of the named argument to mix it with positional arguments In mixed case the positional arguments should be counted from the position number of named argument before it If a name of used named argument does not exist then Gravity should rise an error