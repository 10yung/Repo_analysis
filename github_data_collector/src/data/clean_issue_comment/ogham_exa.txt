Hey thanks for this great ls replacement tool smile In the latest version v exa can be crashed when invoked with the git option in a directory with a broken symbolic link Example bash exa git long produces thread unnamed panicked at called Resultunwrap on an Err value Os code kind NotFound message No such file or directory srclibcoreresultrs stack backtrace unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown unknown startthread clone abort core dumped RUSTBACKTRACE exa long git Previously exa would attempt to get the metadata for stdenvtempdir and if fetching a certain timestamp eg creation time failed it would assume that the OS couldnt produce that stamp for any file Requests to display or sort by that timestamp would misfire the entire program This caused exa to make some sweeping claims that arent true eg that Linux cant produce file creation times The real story is that tmpfs the filesystem usually used for tmp cant but other Linux filesystems can and do The Rust standard library docs even mention that Metadatacreated is backed by statx since Linux Since exa could be asked to list files from several filesystems lets handle metadata on a perfile basis This patch makes Files time methods return an OptionDuration changedtime always returns None on a nonUnix system and prints a hyphen for files without that particular timestamp For example exa lhUd sortcreated tmpexample Cargotoml Cargolock src target Permissions Size User Date Created Name rwrr mrkline tmpexample rwrr k mrkline Jan Cargolock rwrr k mrkline Jan Cargotoml drwxrxrx mrkline Jan src drwxrxrx mrkline Jan target ogham ogham released this on Jul commits to master since this release exa release v I will release more than one version of exa this year mark my words Release If the current date is December year exa will think that the current year is year for the purpose of displaying file modification times so it may choose to use the day and year format instead of the day and time format or vice versa To reproduce set your systems current date to December create a file and run exa l console date Tue Dec PST echo hello hellotxt exa l rwrr jtai Dec hellotxt ls l total rwrr jtai jtai Dec hellotxt Notice that exa displayed the date as Dec instead of the expected Dec even though Dec is the current day Hi I just added a whitespace in order to make the output a bit nicer at least to me Thought it might be worth a PR in case someone else is interested Here are the preview comparisons macOS Terminal terminal iTerm iterm kitty kitty Apparently kitty tries to center nonASCII glyphs in two cells if followed by two whitespaces this leads to a bit weird aligning I believe I came across an issue regarding this lovesegfaultgithubio on source RUSTBACKTRACEfull exa binary header long classify git thread unnamed panicked at called Resultunwrap on an Err value SystemTimeError s srclibcoreresultrs stack backtrace x ed ff b stdsyscommonbacktraceprintDisplayBacktrace as corefmtDisplayfmthd cf a ce x ed eed corefmtwriteh b be x ed fe stdioWritewritefmth b bde e x ed stdpanickingdefaulthookclosureh b be c e x ed stdpanickingrustpanicwithhookhc c d d x ed ffebe stdpanickingcontinuepanicfmth e de f bc x ed rustbeginunwind x ed a corepanickingpanicfmth dcc b f x ed f f coreresultunwrapfailedh cff bbead x ed cd exafsfileFilemodifiedtimehafd d ff f x ed b exaoutputtableTabledisplayh b a cb x ed c c F as scopedthreadpoolFnBoxcallboxhc c dcb x ed f d f stdsyscommonbacktracerustbeginshortbacktracehdde a ef f x ed f dac coreopsfunctionFnOncecalloncevtableshimh ef ccc e x ed fe ce allocboxedBoxF as coreopsfunctionFnOnceAcallonceh ddedd a x ed fece stdsysunixthreadThreadnewthreadstarthac b fab af c x fd b d ef startthread x fd b a f GIclone x unknown zsh abort core dumped RUSTBACKTRACEfull exa binary header long classify git Ive noticed it only happens after hugo minify cf The problem We can t use creation time on some configurations because it checks on the temp directory that can be on tmpfs which doesn t support creation time It will panic if the check is successful but tries to display a file on a filesystem that doesn t support creation time So basically I discovered that my first attempt to tackle this issue was not good at all And this one has the benefit to be simpler Checking on a directory doesn t tell us if supported elsewhere some filesystems like tmpfs don t support created time We want to be able to display a column even if some subfiles or subdirectories don t support it So now if unsupported a time of zero since Epoch is used and displayed as A duration of zero since EPOCH is almost always a bug or a special case so I think it is not a problem that it is sorted first when a sort on eg creation time is used Sample output Running targetdebugexa l created sortcreated drxrxrx root sys drwxrxrx root run drwxrxrx root boot drwxrxrx root dev drxrxrx root proc drwxrwxrwt root tmp drwx root juil lostfound drwxrxrx root juil var drwxrxrx root juil etc drwxrxrx root juil usr drwxrxrx root juil home drwxrx root juil root drwxrxrx root juil opt drwxrxrx root juil mnt drwxrxrx root juil srv lrwxrwxrwx root nov bin usrbin lrwxrwxrwx root nov lib usrlib lrwxrwxrwx root nov sbin usrbin lrwxrwxrwx root nov lib usrlib This is a bad idea tempdir may return a path that does not exist metadata will fail in this case panicking the whole application Please dont assume this wont ever happen and unwrap Ive tested it in a dir with such structure a dir b dir a file c dir a dir d dir I ran exa tree gitignore with different versions of gitignore There are problems exa doesnt exclude directories if theres a backslash at the end of the line IMO this one is the most annoying gits docs say For example a pattern docfrotz matches docfrotz directory but not adocfrotz directory however frotz matches frotz and afrotz that is a directory all paths are relative from the gitignore file and If there is a separator at the end of the pattern then the pattern will only match directories otherwise the pattern can match both files and directories It seems like the backslash at the end is a valid path in gitignore but exa doesnt exclude it gitignore a Output a dir not excluded b a c a subdir not excluded d exa only excludes directories and files if they are at the same level as gitignore Docs say If there is a separator at the beginning or middle or both of the pattern then the pattern is relative to the directory level of the particular gitignore file itself Otherwise the pattern may also match at any level below the gitignore level However exa doesnt exclude files nor dirs inside other dirs gitignore a notice that theres no backslash at the end of the line Output the a dir was properly excluded b a file not excluded c a subdir not excluded d Ive also tested what happens if I put gitignore in a dir and exa takes it into account The behavior is expected the same files areare not excluded but still not correct This issue is related to I use this flag quite often and Id be very happy if a shortened version was added Would it be possible to have an extra option that works in concert with extended so that the values of an extended attribute is shown Right now what I see is sh exa long extended testtxt rwrr kas Sep testtxt usercomment len and I have to do eg sh getfattr n usercomment onlyvalues testtxt Fr kke fr l r to see the comment Would it be possible to have something like sh exa long extended showextendedvalues testtxt rwrr kas Sep testtxt usercomment Fr kke fr l r 