Resolves Proposal for Annotations make it much easier to create a visualizer especially if input for visualizer is class derived from kaitaigenerated class and if will be implemented Right now I want to see if it compiles and also receive some review comments Closes Relates to This is a Work In Progress I expect to rebase to keep this branch uptodate Some of the code generated by kaitai for C was triggering compiler warnings this should fix the unused parameters sign conversions and sign compare ones Given that this code calls a new method kaitaitosigned it strictly depends on being merged as well otherwise this wont work I need to access typeProvider property of LanguageCompiler from trait GenericChecks so I made it public with val I reuse ConsistencyError for throwing if the last element of array doesnt satisfy repeatuntil condition but Im not sure what should be present in the error message Maybe it should throw a special type of Exception deriving from ConsistencyError but I dont know I also add methods blockScopeHeader and blockScopeFooter because in case there are multiple seq fields with repeatuntil I need to redeclare it variable every time with a different type Java doesnt allow redeclaring variables in the same scope so I wrap each check in its own For example these are the generated repeatuntil checks in the test format repeatuntilcomplex java TypeU it firstgetfirstsize if itcount throw new ConsistencyErrorfirst UserTypeInstreamListtypeu NoneList itcount TypeU it secondgetsecondsize if itcount throw new ConsistencyErrorsecond UserTypeInstreamListtypeu NoneList itcount int it thirdgetthirdsize if it throw new ConsistencyErrorthird Int Typefalse it When you want to write enum value you need to call method translatorenumToInt which expects its arguments of type Astexpr So we need a way to convert Identifier to AstexprName I thought that method IdentifiertoAstIdentifier would serve this purpose but it doesnt work and I dont know how it was supposed to work Anyway the conversion had been done as AstexprNameAstidentifieridToStrid However this simple conversion is wrong The Identifier is languageagnostic object but idToStrid converts it to languagedependent name So when you try to call translatortranslate AstexprSubscript AstexprNameAstidentifieridToStrid AstexprNameAstidentifierIdentifierINDEX with id NamedIdentifiersomearray idToStrid will return someArray for Java and the execution will fail when detecting type of the container you try to subscript because there is no field with name someArray actualy the ClassTypeProviderdetermineType method internally creates NamedIdentifierattrName so it fails on constraint az az Hence I felt the need to inject languagespecific code to AST object so I created class AstexprCodeLiteralcode for this purpose The BaseTranslator for it just returns the code itself In the future we may need also specify the DataType of the code literal so that detecting type on it doesnt fail but I havent needed it yet If someone would compile KSY format with readwrite option only without noautoread instancing any usergenerated class with empty parameter list would immediately fail with an exception because autoRead is enabled but there is no io to read from Adding first things for custom scan and simulating terminator byte The output of the new TypeScript target is typescript that uses a class based format instead of a prototypebased one TypeScript allows for autocompletion making it significantly easier to work with the output of complex formats Certain shortcuts were also taken for the time being namely using a type of any instead of the type type for switch types