The StockAnimation from DefaultAnimationsswift listens to the views current transform when preparing for any nonfade animation concatenating the preparations to it but resets the transform to the identity when performing the animation Id expect the animation block to leave the view in the same state it had before prepare was called Bumps excon from to details summaryChangelogsummary Sourced from excons changelog fix for leftover data with interrupted persistent connections Update bundled certificates Fix mistake in proxy connection error handling Raise better proxy connection errors Updated bundled certs Properly redact userpass info from proxy credentials Update bundled certs Add remoteip to datum enabling usage in middleware redirect follower now raises after following too many redirects default fixed stub clearing in tests to avoid race conditions fix yardoc formatting fix creating Proc without a block reducerefine gem file contents update bundled certs readd bundled certs to gem file contents trtable truncated details details summaryCommitssummary d v ccb d fix for leftover data with interrupted persistent connections f de cf v f a v e bbb Merge pull request from jasquatfixresponsestatuscheck fixed response status check when making a request with a valid proxy is set f v c define ProxyConnectionError f a raise on failed proxy connect d ed fe be thorough in unsubscribing to notifications in instrumentation tests Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Bumps rubyzip from to details summaryRelease notessummary Sourced from rubyzips releases v Security Add validateentrysizes option so that callers can trust an entrys reported size when using extract This option defaults to false for backward compatibility in this release but you are strongly encouraged to set it to true It will default to true in rubyzip New Feature Add addstored method to simplify adding entries without compression Tooling Documentation Add more gem metadata links v Do not rewrite zip files opened with openbuffer that have not changed Tooling Documentation Update examplerecursiverb in README Hold CI at trusty for now automatically pick the latest ruby patch version use rbx and hold jruby at v Allow tilde in zip entry names fixes regression in from Support frozen string literals in more files Require pathname explicitly fixes regression in from Tooling Documentation CI updates Bump supported ruby versions and add JRuby failures are no longer ignored reverts part of Add changelog entry that was missing for last release Comment cleanup Since the GitHub release information for is missing I will also include it here NB This release drops support for extracting symlinks because there was no clear way to support this securely See for details Fix CVE Fix NoMethodError undefined method glob Fix handling of stored files ie files not using compression with general purpose bit set Fix close on StringIObacked zip file Add Zipforceentrynamesencoding option Update rubocop apply autofixes and fix regressions caused by said autofixes Save temporary files to temporary directory rather than current directory Tooling Documentation trtable truncated details details summaryChangelogsummary Sourced from rubyzips changelog Security Add validateentrysizes option so that callers can trust an entrys reported size when using extract This option defaults to false for backward compatibility in this release but you are strongly encouraged to set it to true It will default to true in rubyzip New Feature Add addstored method to simplify adding entries without compression Tooling Documentation Add more gem metadata links Do not rewrite zip files opened with openbuffer that have not changed Tooling Documentation Update examplerecursiverb in README Hold CI at trusty for now automatically pick the latest ruby patch version use rbx and hold jruby at Allow tilde in zip entry names fixes regression in from Support frozen string literals in more files Require pathname explicitly fixes regression in from Tooling Documentation CI updates Bump supported ruby versions and add JRuby failures are no longer ignored reverts part of Add changelog entry that was missing for last release Comment cleanup details details summaryCommitssummary e d ea Merge pull request from rubyzipv c e e Bump version to d fe b Merge pull request from rubyzipchecksize cb ae Warn when an entry size is invalid f Default validateentrysizes to false for release f c Validate entry sizes when extracting b fa ci skip Update changelog ca Check expected entry size in addstored test bf Merge pull request from hainesraddstored ecb ZipFileaddstored to add uncompressed files Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details I am trying to apply sort on tableview cells from right to left but not working let sortFunction LinearSortFunctiondirection topToBottom interObjectDelay tablespruceanimate fadeIn sortFunction sortFunction Im currently encountering an issue trying to use Spruce in an app where the animations dont look right when used on a UITableView that includes section headers because the section headers will appear suddenly at the beginning of the animation rather than being faded in with their cells Ideally wed implement a solution like the one that vyax started on in this possibly abandoned PR from If necessary Im happy to take point on updating the PR to merge cleanly with base and add this functionality Looks like the parameters were getting too large for Spruce Decided to try and have it with AnimationOptions instead so that the method length is customized based off of how much you need This way it will be easier to read and add more options in the future like PR Also added in the documentation for the new features Hi First of all I would like to appreciate for provide such a nice cool library Using this we can easily animate views I have built a ReactNative Bridge Wrapper RNSpruce for this library On Android it is working as expected but I am not able to build the same on iOS since their are no ObjectiveC wrappers available We need these wrappers because in ReactNative library we can create bridge only using ObjectiveC classes Can you please share roadmap of when are you planning to provide ObjectiveC wrappers I would have contributed but I dont have depth understanding of creating wrappers Thanks Pranav This code adds two static properties to Spruce providing the option to include section headers of UITableView or UICollectionView in Spruce animations Usage anywhere in app SpruceincludeTableViewSectionHeaders true SpruceincludeCollectionViewSectionHeaders true The default value is false for both properties current behavior Since we are changing the concept of a SortFunction the unit tests have to change with it This means that rather than comparing the timing we would compare the weights returned by the SortFunction However this changes the concept of the unit tests entirely so we also need to add in unit tests for the TimingFunctions as well To make sure that the refactor returns the same values we would also need a combination of unit tests This means the sort function would have to return the same values if we passed the weights into a standard timing function Please do not merge