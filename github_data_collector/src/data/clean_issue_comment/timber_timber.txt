I didn t manage to get a hold of the mess that is now after the base branch update to xfactories So here it is again with the same commits cherrypicked against xfactories Ticket Issue See Solution Added new Twig functions for the relevant Timberget functions Updated the deprecation warnings There s now always two possibilities Instead of Post it can either be getpost or getposts depending on what s at hand The same goes for Term and User I deliberately removed the Attachment function as well as deprecated the Image function without replacement because we can use getpost and getposts The Class Maps will handle returning either a Timber Image or Timber Attachment Impact A more unified way of interacting with Timber s API throughout PHP and Twig Usage Changes New function names Pretty much the same functionality except for handling singular and multiple objects Considerations Should we add Twig functions for the specialcase Timberget functions like Timbergetuserby or Timbergetpostbyslug I think currently we don t have to do that Should we add Twig functions for getting Attachment and Image posts getattachment and getimage If we have them in Twig we should also have them in PHP as Timberget functions Testing Tests are currently breaking We first need to resolve the Considerations about adding a getattachment and a getimage functions so it s easier to update the tests If we just switch to getpost now and then want to add getattachment or getimage later it will be harder to find the test methods that need these functions Now we can still search for Attachment and Image Todo Add Class Map for Attachment and Image class Add testing for comment functions in Twig Resolve todos in code When using date filter in Timber nowdate returns the time in UTC which appears to be my default set timezone checked with datedefaulttimezoneget although my PHP default timezone is set to AmericaLosAngeles checked with php ri date from command line It does not utilize the timezone set in my Wordpress settings in the admin backend When I use datedefaulttimezoneset that doesnt change not expecting it to just stating for reference When I specify the timezone eg nowdategia AmericaLosAngeles it still returns the time in UTC This method as suggested in the Twig docs didnt have any affect php twiggetExtension Twig Extension CoreExtensionclass setTimezoneAmericaLosAngeles Expected behavior ACF Gallery field within a Flexible content template type should return an array of images or ids Actual behavior When looping the flexible content the gallery field is returns a bool value of false Steps to reproduce behavior Create an ACF flexible content field with an ACF image gallery field within one of the content templates Loop the the flexible content field and for that template type return an array of images from the gallery field What version of WordPress PHP and Timber are you using WordPress Timber ACF PRO How did you install Timber for example from GitHub ComposerPackagist WPorg WP Plugins Interface This branch PR is meant to handle compliance with PHPStan Level issues Per szepeviktors comment in we wont be able to do anything about the applyfilters argument count errors due to how WP declares that function but we can get our house in order with declaring properties on various Timber classes Ticket Issue See Solution Add Timbergetpostbyslug and Timbergetpostbytitle Add Timbergetpostby I chose postexists when searching for any post type and getpagebytitle when searching for specific post types as the functions to retrieve a post by post title because they seem to be the most direct and performant ones Impact Closes a gap in what Timbergetpost can t and shouldn t be able to do in Timber Usage Changes Instead of Timbergetpost with a post title or post slug developers should use one of the two new functions Considerations The two functions always run database queries to get post IDs which got me thinking about performance When we use build to create an object could we eventually use wpcacheget and wpcacheadd in the future to create an internal object cache for Timber objects Testing Yes There should be at least basic checks syntax coding style static analysis Expected behavior In a Twig partial we should be able to order terms on a post by their ID in ascending or descending order This is the code were trying to use posttermstaxonomy exampletaxonomy orderby termid order ASC Actual behavior The custom order values that we pass through to the method seem to have no impact on the ordering of the terms returned Steps to reproduce behavior Step Create a custom taxonomy for posts create multiple new items in the taxonomy Step Assign that custom taxonomy to posts so that we can add the terms to a post Step Create a new post add multiple taxonomy terms to the post Step Add the following code to the timber template for the post you will need to change the taxonomy value for termitem in posttermstaxonomy exampletaxonomy orderby termid order ASC termitemname endfor Steo View the page in a web browser change the order value in the above code and observe that it has no impact on the ordering of the output taxonomy terms Could this be causing the problem I tried to debug this and tracked down the following line of code in libPostphp line terms wpgetpostterms thisID taxonomies args query Changing this code to the following fixes the problem terms wpgetpostterms thisID taxonomies args It seems like this is a bug because the full arguements list is not being passed through to the wpgetpostterms function just the query which includes the taxonomy term being queried but no other custom args I may have missed something here or my implementation in the twig file may be incorrect but I dont think it is What version of WordPress PHP and Timber are you using WordPress PHP Timber If the code I found is actually the cause of the problem Im happy to fork the code and create a pull request to fix this Also please note that we cant order the taxonomy term in PHP because in our codebase this code is used in a twig partial that is included in various other twig files Ticket Issue The CoAuthors Plus integration as it currently exists is incompatible with Factories and Class Maps This is an attempt to make them compatible Solution I describe the proposed solution in more detail in the issue writeup but basically what Im doing here is treating guest authors as a special case of the timberuserclassmap filter instead of calling a Factory it applies the filter directly Impact Should be none Usage Changes None other than adding support for class maps in this integration Considerations I may be wrong about everything D Testing Updated tests where it made sense and added a test specifically for dealing with overriding the class instantiated for guest authors NOTE A firststab PR for this is forthcoming but as I call out below I think this deserves its own issue The main issue which User class to instantiate In the Integrations CoAuthorsPlus the authors method hooked onto the timberpostauthors filter determines which class to instantiate php public function authors author post authors array cauthors getcoauthorspostID foreach cauthors as author uid thisgetuseruid author if uid authors new Timber Useruid else authors new CoAuthorsPlusUserauthor return authors protected function getuseruid cauthor if is guest author if isobjectcauthor issetcauthortype cauthortype guestauthor if have have a linked user account global coauthorsplus if coauthorsplusforceguestauthors issetcauthorlinkedaccount emptycauthorlinkedaccount return cauthorlinkedaccount else return null else return cauthorID The logic around whether uid is truthy appears to depend on whether its for a guest author I gather this is just arbitrary data submitted at post creation time not corresponding to a wpusers row whether guest authors are being forced no idea what this means plugin setting etc In other words Im not terribly certain what this code does So my main question is how should this interface with UserFactory and the user class map Im taking a stab at implementing what I think should happen but Id like to get a review specially for this Handling stdClass instances Another concern is that getcoauthors appears to sometimes return instances of stdClass I think these represent guest authors Trouble is stdClass is not supported by UserFactoryfrom in this case it calls frompostobject copypasta will fix which eventually throws an InvalidArgumentException The reasoning here is that at the heart of gchtrs design theres an assumption that the callback to the timberclassclassmap filter eventually gets a WPUser This is a strong guarantee and the entire class map API gets weaker if we throw this away We could add a case to handle stdClass inside the factory but Im hesitant to do that because its a good design and I do not think that Factories should have to know about special stuff like Integrations I think its perfectly reasonable for integrations to know how to bootstrap their own objects that Factories know how to deal with So the approach Im going to take to this is to have Integrations CoAuthorsPlus instantiate CoAuthorsPlusUser objects directly for what I assume are guest authors Linked Authors Apparently linked authors are a thing Appears to have something to do with guest authors and its causing testLinkedGuestAuthor to fail My head is already swimming from all this abstraction Halp Test code that involve adding filters or actions gets noisy because you have to manually remove them at the end of each test or else the hook spills over into other tests This also makes it error prone because its easy to forget to remove the hook Add helper methods to TimberUnitTestCase for temporarily adding filters or actions These methods should store a reference to the params they were passed In tearDown loop through all the stored references of added filtersactions and remove them using the same params