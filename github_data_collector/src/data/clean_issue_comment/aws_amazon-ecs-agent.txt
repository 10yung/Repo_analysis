 Please make sure youve read and understood our contributing guidelines Please provide the following information Summary What does this pull request do EFS auth capability and related model updates ACS model FE model efsAuth capability Implementation details How are the changes implemented Testing How was this tested Note for external contributors make test and make runintegtests can run in a Linux development environment like your laptop go test timeout s agent and scripts runintegtestsps can run in a Windows development environment like your laptop Please ensure unit and integration tests pass on at least one platform before opening the pull request make runfunctionaltests and scripts runfunctionaltestsps must be run on an EC instance with an instance profile allowing it access to AWS resources Running make runfunctionaltests and scripts runfunctionaltestsps may incur charges to your AWS account if youre unable or unwilling to run these tests in your own account we can run the tests and provide test results Also once you open the pull request there will be automatic test checks on the bottom of the pull request please make sure they all pass before you merge it You can use bottest label to rerun the automatic tests multiple times New tests cover the changes yesno yes Description for the changelog Write a short one line summary that describes the changes in this pull request for inclusion in the changelog You can see our changelog entry style here Licensing By submitting this pull request I confirm that my contribution is made under the terms of the Apache license Please make sure youve read and understood our contributing guidelines Please provide the following information Summary We no longer use this script to create test images Implementation details Removing unused script Testing No code change How was this tested Note for external contributors make test and make runintegtests can run in a Linux development environment like your laptop go test timeout s agent and scripts runintegtestsps can run in a Windows development environment like your laptop Please ensure unit and integration tests pass on at least one platform before opening the pull request make runfunctionaltests and scripts runfunctionaltestsps must be run on an EC instance with an instance profile allowing it access to AWS resources Running make runfunctionaltests and scripts runfunctionaltestsps may incur charges to your AWS account if youre unable or unwilling to run these tests in your own account we can run the tests and provide test results Also once you open the pull request there will be automatic test checks on the bottom of the pull request please make sure they all pass before you merge it You can use bottest label to rerun the automatic tests multiple times New tests cover the changes na Description for the changelog Write a short one line summary that describes the changes in this pull request for inclusion in the changelog You can see our changelog entry style here Licensing By submitting this pull request I confirm that my contribution is made under the terms of the Apache license Summary Unhealthy ECS Agent seelog too many open files error results in instance no longer scheduling tasks Description This issue affects the ecsagent and is not existent at least in our environment in After starting an instance and running for a while varies based on container scheduling the ecsagent on the instance will become unhealthy This happens consistently with approximately stable containers running on the instance and approximately unstable containers that die and are rescheduled regularly When this happens the ecsagent docker logs begin showing errors of this nature seelog internal error open logecsagentlog too many open files seelog internal error open logecsagentlog too many open files seelog internal error open logecsagentlog too many open files seelog internal error open logecsagentlog too many open files levelerror time T Z msgunable to setup cgroup root cgroup resource arnawsecsuseast taskdistro fe f c db e f e d setup cgroup unable to create cgroup at ecsdistro fe f c db e f e d cgroup create unable to create controller open procselfmountinfo too many open files cgroupMountPathsysfscgroup cgroupRootecsdistro fe f c db e f e d modulecgroupgo resourceNamecgroup taskARNarnawsecsuseast taskdistro fe f c db e f e d levelerror time T Z msgunable to setup cgroup root cgroup resource arnawsecsuseast taskdistro e d c f e setup cgroup unable to create cgroup at ecsdistro e d c f e cgroup create unable to create controller open procselfmountinfo too many open files cgroupMountPathsysfscgroup cgroupRootecsdistro e d c f e modulecgroupgo resourceNamecgroup taskARNarnawsecsuseast taskdistro e d c f el At this point any new containers that are scheduled to this instance become stuck in the pending state and never transition to running Expected Behavior As is the case for us with I expect the ecsagent to remain healthy and for containers to not become stuck in the pending state Observed Behavior The ecsagent becomes unhealthy and includes seelog errors in the docker logs output Containers on the affected instance become stuck in a pending state Environment Details docker info Containers Running Paused Stopped Images Server Version ce Storage Driver overlay Backing Filesystem extfs Supports dtype true Native Overlay Diff true Logging Driver jsonfile Cgroup Driver cgroupfs Plugins Volume local Network bridge host ipvlan macvlan null overlay Log awslogs fluentd gcplogs gelf journald jsonfile local logentries splunk syslog Swarm inactive Runtimes runc Default Runtime runc Init Binary dockerinit containerd version b a b e eb a d ce b c fb runc version b fe d ee ef f fee b d e init version fec Security Options seccomp Profile default Kernel Version amzn x Operating System Amazon Linux OSType linux Architecture x CPUs Total Memory GiB Name ip ec internal ID SOBI D AHQTFV WQUXISDLV ZUHLGA NKBCK JYNWFLUK Docker Root Dir varlibdocker Debug Mode client false Debug Mode server false Registry Labels Experimental true Insecure Registries Live Restore Enabled false curl ClusterdistroContainerInstanceArnarnawsecsuseast containerinstancedistro ea fe a b ac c c dcVersionAmazon ECS Agent v cacbceb df h df h Filesystem Size Used Avail Use Mounted on devtmpfs G G dev tmpfs G K G devshm tmpfs G M G run tmpfs G G sysfscgroup devnvme n p G G G devnvme n G G G varlibdocker tmpfs G G runuser tmpfs G G runuser cat procsysfsfilemax ulimit Hn ulimit Sn Please make sure youve read and understood our contributing guidelines Please provide the following information Summary What does this pull request do Currently this is how agent works By default the interval for agent to publish metrics to TACS is s and current default poll docker container stats interval is s After agent polls container stats it will send dp to a queue We need at least two dps in the queue to calculate the data sent to TACS Agent does not send the task metrics to TACS if there is no data related to this task TACS uses task metrics to decide which tasks are running on the instance and uses this to calculate reservation data Thus if ECSPOLLMETRICS is enabled and if the interval is gteq s sometimes there will not be enough dp in the queue so that the task metrics will not be sent to TACS even the task exists on the instance The reservation metrics is not accurate under this situation Implementation details How are the changes implemented Update the default poll metrics value to s which is guaranteed to have enough dp Considering the old value is s I want to choose one which is closet to the old value Update the maximum value to s which is the maximum value that is guaranteed to have enough dp Testing How was this tested Note for external contributors make test and make runintegtests can run in a Linux development environment like your laptop go test timeout s agent and scripts runintegtestsps can run in a Windows development environment like your laptop Please ensure unit and integration tests pass on at least one platform before opening the pull request make runfunctionaltests and scripts runfunctionaltestsps must be run on an EC instance with an instance profile allowing it access to AWS resources Running make runfunctionaltests and scripts runfunctionaltestsps may incur charges to your AWS account if youre unable or unwilling to run these tests in your own account we can run the tests and provide test results Also once you open the pull request there will be automatic test checks on the bottom of the pull request please make sure they all pass before you merge it You can use bottest label to rerun the automatic tests multiple times New tests cover the changes yesno Description for the changelog Write a short one line summary that describes the changes in this pull request for inclusion in the changelog You can see our changelog entry style here Licensing By submitting this pull request I confirm that my contribution is made under the terms of the Apache license For urgent operational issues please contact AWS Support directly For potential security issues please do not post it in the Issues Instead please follow the instructions or email AWS security directly at awssecurityamazoncom Please provide the following information Summary Please provide a brief outline of the issue Im attempting to add instances to existing cluster Instances cant join the cluster Description Provide detailed information about this issue AMIs amzn amiecshvm x ebs ami b d b a c d amzn amiecshvm x ebs ami afc a c b Probably related issue Not required for feature requests Expected Behavior Instances can join cluster Observed Behavior In ecs agent logs Ive found following T Z ERROR Unable to register as a container instance with ECS RequestError send request failed caused by Post nethttp request canceled while waiting for connection ClientTimeout exceeded while awaiting headers T Z ERROR Error registering RequestError send request failed After ecs agent update I found following in logs T Z WARN Unable to obtain Outpost ARN from EC Metadata EC MetadataError failed to make EC Metadata request caused by xml version encodingiso DOCTYPE html PUBLIC W CDTD XHTML TransitionalEN html xmlns xmllangen langen head title Not Foundtitle head body h Not Foundh body html Environment Details Examples docker info curl df h Instances are in private subnet with route to NAT Gateway Outbound traffic allowed instances can reach internet Setup was working as intended for some time Supporting Log Snippets Please have a look at for the data we typically require for investigation Please note that GitHub issues are public remove sensitive data from logs before posting If you are not comfortable posting your logs here please let us know and we can provide an alternate method ecslogscollector Before ecs agent update After ecs agent update For urgent operational issues please contact AWS Support directly For potential security issues please do not post it in the Issues Instead please follow the instructions or email AWS security directly at awssecurityamazoncom Please provide the following information Summary This is more a question than an issue I am currently trying to run a Selenium Grid with Chrome and Firefox node in ECS Fargate My container are able to start but all my tests are failing because devshm cannot be set as in an ECS launch type I was wondering if tmpfs and dev shm will be accessible in Fargate at some point If not I would like to understand the why which I believe is related to the architecture of Fargate Description Provide detailed information about this issue Currently for giving access to devshm to my container inside a task I am doing the following in my Cloudformation manifest SeleniumNodeChromeTask Type AWSECSTaskDefinition DependsOn TalpaAccountSeleniumGrid Properties Volumes Name shm ContainerDefinitions MountPoints ContainerPath devshm SourceVolume shm ReadOnly false The volume is mounted correctly but Firefox and Chrome keep failing Here is an error message I got from my Firefox container WARNING failed to open shm Permission denied file buildsworkerworkspacebuildsrcipcchromiumsrcbasesharedmemoryposixcc line Not required for feature requests Expected Behavior I am expecting to be able to setup tmpfs and dev shm for my container and get my headless browsers to work as expected Environment Details Examples docker info curl df h ECS Cluster latest Selenium Grid Docker images yttrium official images For urgent operational issues please contact AWS Support directly For potential security issues please do not post it in the Issues Instead please follow the instructions or email AWS security directly at awssecurityamazoncom Please provide the following information Summary ecsagent will fail to connect when you have a service control policy requiring the use of tls Description Deploy the following service control policy terraform syntax statement sid RequireSecureTransport effect Deny actions resources condition test Bool variable awsSecureTransport values false Youll see the following behavior the AWS Console ecs dashboard will show the agent as not connected no tasks will get scheduled on the host you will see the following connection errors in ecsagentlog img width altScreenShot at PM src Summary When I stop a task ECS doesnt deregister it from load balancer Description I have an ECS service with multiple tasks the service has a loadbalancer configured if I run command like that aws ecs stoptask cluster mycluster task xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx I suddendly receive some responses example siege output siege c HTTP secs bytes GET uri HTTP secs bytes GET uri HTTP secs bytes GET uri HTTP secs bytes GET uri HTTP secs bytes GET uri HTTP secs bytes GET uri this happens for seconds The HealthCheckIntervalSeconds UnhealthyThresholdCount is a longer period so I think that ECS doesnt wait the task deregistration from load balancer before stopping containers This doesnt happen when the service is scaling down Expected Behaviour ECS should deregister task from load balancer before sending sigterm to container Observed Behaviour ECS deregisters task from load balancer after sending sigterm to container Please make sure youve read and understood our contributing guidelines Please provide the following information Summary What does this pull request do Implemented dependency logic so that EFS type volume task resource wait for pause container to be finished TODO Cleanup logic Aggregate plugin required input Functional tests Implementation details How are the changes implemented Testing How was this tested Note for external contributors make test and make runintegtests can run in a Linux development environment like your laptop go test timeout s agent and scripts runintegtestsps can run in a Windows development environment like your laptop Please ensure unit and integration tests pass on at least one platform before opening the pull request make runfunctionaltests and scripts runfunctionaltestsps must be run on an EC instance with an instance profile allowing it access to AWS resources Running make runfunctionaltests and scripts runfunctionaltestsps may incur charges to your AWS account if youre unable or unwilling to run these tests in your own account we can run the tests and provide test results Also once you open the pull request there will be automatic test checks on the bottom of the pull request please make sure they all pass before you merge it You can use bottest label to rerun the automatic tests multiple times New tests cover the changes yesno yes Verified by mock aws vpc mode on agent Some key logs that verified dependency is working as expected T Z DEBUG Task xxxx adding network pause container dependency to resource taskefsshared T Z DEBUG Managed task xxxx cant apply state to resource taskefsshared yet due to unresolved dependencies dependency graph resources dependency on containers not resolved T Z DEBUG Managed task xxxx container internalecspause at desired status RESOURCESPROVISIONED T Z INFO Managed task xxxx transitioned resource taskefsshared to CREATED T Z INFO Managed task xxxx got resource taskefsshared event CREATED Description for the changelog Write a short one line summary that describes the changes in this pull request for inclusion in the changelog You can see our changelog entry style here Licensing By submitting this pull request I confirm that my contribution is made under the terms of the Apache license Signedoffby Vinothkumar Siddharth sidvinamazoncom Please make sure youve read and understood our contributing guidelines Please provide the following information Summary What does this pull request do Fix the config that prevented the environment override from disabling the feature Implementation details How are the changes implemented Testing How was this tested Note for external contributors make test and make runintegtests can run in a Linux development environment like your laptop go test timeout s agent and scripts runintegtestsps can run in a Windows development environment like your laptop Please ensure unit and integration tests pass on at least one platform before opening the pull request make runfunctionaltests and scripts runfunctionaltestsps must be run on an EC instance with an instance profile allowing it access to AWS resources Running make runfunctionaltests and scripts runfunctionaltestsps may incur charges to your AWS account if youre unable or unwilling to run these tests in your own account we can run the tests and provide test results Also once you open the pull request there will be automatic test checks on the bottom of the pull request please make sure they all pass before you merge it You can use bottest label to rerun the automatic tests multiple times New tests cover the changes yesno Yes Description for the changelog Write a short one line summary that describes the changes in this pull request for inclusion in the changelog You can see our changelog entry style here Bug Resolved disabling gMSA feature using environment overrides Licensing By submitting this pull request I confirm that my contribution is made under the terms of the Apache license 