 Dear Boris Id like to know is it possible to make an empty plots for some points Also Id like to know can I colorise the same line plot Eg starting with red colour then the same line will change its colour to black colour or clear colour Like here in photo graph Summary This pull request upgrades BEMSimpleLineGraph to Xcode and fixes issues Fixes Issues This pull request fixes the following issues memory leak issues deprecated implementations in Tests issues storyboard warnings issues missing x AppIcon issue Changes The following changes are included in this pull request BEMSimpleLineGraphViewmh Two storyboards CustomizationTestsm and SimpleLineChartTestsm projectpbxproj and xcschemes to Xcode recommended settings Any swift version for swift Summary Enhancement We can now set the text color for the popup label Changes The following changes are included in this pull request Header and body file change I integrated the line graph and its working great in ObjectiveC but the problem Im having is with spacing on the xAxis If you see the attached screenshot the first label and second one and second last and last one are not evenly spaced Below is the function which I use to setup the graph voidsetupGraphs mindfulGraphenableXAxisLabel YES mindfulGraphalwaysDisplayDots YES mindfulGraphcolorXaxisLabel UIColor lightGrayColor mindfulGraphcolorBackgroundXaxis UIColor clearColor mindfulGraphenableYAxisLabel YES mindfulGraphcolorYaxisLabel UIColor lightGrayColor mindfulGraphcolorBackgroundYaxis UIColor clearColor mindfulGraphenableReferenceYAxisLines YES mindfulGraphcolorReferenceLines UIColor lightGrayColor mindfulGraphenableLeftReferenceAxisFrameLine YES mindfulGraphenableReferenceAxisFrame YES mindfulGraphenablePopUpReport YES neud c b ae cd e bb c e a First of all thank you for creating such awesome graph library Its really easy to use and customize I have xAxisLabel issue while using this library They were not showing at all at first integration I did some debugging and I found the reason In BEMSimpleLineGraphViewm file you created drawXAsis method This was creating xAxisLabels and adding to graph view Btw they were just removed right after added by the following code in this method objc for UILabel l in overlapLabels l removeFromSuperview The reason was fullyContainsLabel was being set NO objc BOOL fullyContainsLabel CGRectContainsRectselfbounds labelframe From debugging what I found is selfboundssize labelframe some value size width some value height This means the bottom edge of label goes beyond the height of graph view Personally I think it makes more sense if we show label as long as it intersects with graph view because we need to show the label even if it is showing partially So I changed the line to objc BOOL intersectsLabel CGRectIntersectsRectselfbounds labelframe And it worked very well Also I was having special requirements that I need to show the yaxis values in formatted string like K and dotvalues being which were not possible by just using formattedString So I defined some delegate methods and used it If you dont mind I may fork your repo and send PR Please let me know your thoughts Summary PanZoom and Variable X Axis many other changes Fixes Issues This pull request fixes the following issues Handles very large numbers of points realistically up to thousands Restore API back to NSInteger for Swift and resolved internal changes Fix test for whitealpha to handle extended Grey space Animation without display dots during left dots off previously Remove prev reference lines if axis turned off Supports bezier curves even when line isnt being drawn TopBottom reference lines were outside box Fix bug with touchLineInputColor doesnt change after initial setting averageLine color picked up from line if not set NoDataLabel color should not default from Line which defaults to white same as background If label isnt used after initially being created ensure its removed from view Avoid possible infinite loop if delegate gives a zero incrementIndex for xaxis Fix onepixel gap between yaxis and graph Remove spurious NSLogs If xaxis background is defaulting to colorBottom then also use alphaBottom to match same for yaxis and colorTop If neither X nor Y reference lines set lines enableRefLines to NO although default might have been previously YES One point is handled by main routines rather than special case Simplified handling of zero points Many BEMNull related bugs If null data and interpolation on then extrapolate for beginningending nulls Ensure all BEMNulls do not crash When Bezier off and Interpolate nulls off properly draws line segments now If interpolation off then bezier line should be interrupted by gaps but not topbottom If data changes to null value ensure corresponding Dot isnt left on chart Changes The following changes are included in this pull request PanZoom Variable X Axis Cubic Bezier Algorithm Many others see below for details New Features Optional userscaling panzoom with doubletap to restore Variable xaxis Adds new delegates lineGraphlocationForPointAtIndex lineGraphlabelOnXAxisForLocation numberOfXAxisLabelsOnLineGraphmaxXValueForLineGraph minXValueForLineGraph Ability to take screen shot bigger or smaller than screen New delegate method to specify yaxis labels Axis at top option Cubic Bezier algorithm for smoother lines Implemented numberOfXAxisLabelsOnLineGraph for indexed xAxis TestBed usable on iPhone and Split View NumberOfPoints entry in TestBed Activity display in TestBed to test didFinish Upwardcompatible API Notes x This pull request makes breaking changes and if so involves the following Public API availability x Internal functionality or behavior All global vars changed to internal properties All MutableArrays to Arrays Use Views to group dots and labels over BEMLine Set size of major views at beginning so all calcs based on those views Moves getting data and calculations of points to new getData method x I have run and ensured that this pull request passes all XCTests Ive just updated an old project to Swift and had to swap to the feature branch to get the benefits of to allow my project to build To expand upon that fix though Id love to see a minor enhancement When it comes to Swift uses of NSUInteger instead of just NSInteger for delegate calls such as NSUIntegernumberOfPointsInLineGraphBEMSimpleLineGraphView graph and CGFloatlineGraphBEMSimpleLineGraphView graph valueForPointAtIndexNSUIntegerindex can cause issues in regards to casting These translate to UInt as youd expect but because Swift is such a strict language using them in a simple way requires casting between UInt and Int and vice versa For example func numberOfPointsinLineGraph graph BEMSimpleLineGraphView UInt return myArraycount The above will show a build error unless you specifically cast myArraycount in IntmyArraycount func numberOfPointsinLineGraph graph BEMSimpleLineGraphView UInt return IntmyArraycount Likewise func lineGraph graph BEMSimpleLineGraphView valueForPointAt index UInt CGFloat let myItem myArray index Code using the item This also fails unless you add an extra line of let index Intindex to make sure youre passing a Int to the array subscript func lineGraph graph BEMSimpleLineGraphView valueForPointAt index UInt CGFloat let index Intindex let myItem myArray index Code using the item I understand why NSUInteger has been used as an array is unlikely to have an index but this sadly does cause extra code issues for Swift users minimal I agree but still Also this is going away from the standards that delegate calls in UITableViewDataSource and UICollectionViewDataSource use where just NSInteger is used Id love to hear what you think and allow this to be considered as it would help a lot with some unnecessary code for Swift users with minimal impact for ObjectiveC users The chart does not show long XAxis when there are more than three points It seems that this only occurs on iPhone and above iPhone iPhone iPhone iPhone Screenshot iPhone Screenshot iPhone Screenshot 