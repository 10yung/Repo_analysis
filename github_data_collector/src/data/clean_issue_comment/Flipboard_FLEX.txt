 Fatal Exception NSInvalidArgumentException CoreFoundation x ce c exceptionPreprocess libobjcAdylib x a f objcexceptionthrow CoreFoundation x d bc NSCache init Foundation x ebc NSString rangeOfStringoptionsrangelocale FLEX x e e FLEXNetworkHistoryTableViewController updateSearchResults blockinvoke FLEXNetworkHistoryTableViewControllerm Foundation x NSBlockPredicate evaluateWithObjectsubstitutionVariables Foundation x a filterObjectsUsingPredicate Foundation x d NSArrayNSPredicateSupport filteredArrayUsingPredicate FLEX x e df c FLEXNetworkHistoryTableViewController updateSearchResults blockinvoke FLEXNetworkHistoryTableViewControllerm FLEX x e c FLEXTableViewController onBackgroundQueuethenOnMainQueue blockinvoke FLEXTableViewControllerm libdispatchdylib x ca dispatchcallblockandrelease libdispatchdylib x d d dispatchclientcallout libdispatchdylib x b c dispatchqueueoverrideinvoke libdispatchdylib x be dispatchrootqueuedrain libdispatchdylib x be d dispatchworkerthread libsystempthreaddylib x ee b pthreadwqthread libsystempthreaddylib x f cd startwqthread There is currently almost no padding between the view backgroundColor preview circle and the info button To fix this Ive shifted the color preview over to the left by half the kContentPadding NSString stdString is a private method which returns stdstring aka cpp basicstringchar std chartraitschar std allocatorchar compressedpairstd basicstringchar std chartraitschar std allocatorchar rep std allocatorchar rep Not sure why but FLEX crashes with EXCBADINSTRUCTION when calling invocation getReturnValuereturnValue img width height src This is happening without the new card style and super broken It would be great if FLEX would have ability to record non fatal errors The Network History doesnt register requests made using NSURLSession The ones made using NSURLConnection do show up This is an issue Ive had for some time using any version of FLEX tried to rollback down to and also tried the very last So I suspect its related iOS but it could also have been happening before I understand FLEXNetworkObserver is working this way All delegate methods from NSURLConnectionDataDelegate and NSURLSessionTaskDelegate of all classes are swizzled The swizzling blocks of NSURLConnectionDataDelegates connectionwillSendRequestredirectResponse and its equivalent is it though NSURLSessionTaskDelegates URLSessiontaskwillPerformHTTPRedirectionnewRequestcompletionHandler are calling blocks which store the request wrapped into a FLEXNetworkTransaction object into FLEXNetworkRecorders networkTransactionsForRequestIdentifiers array Once the request is finished eg URLSessiondataTaskdidReceiveData it is sent to FLEXNetworkRecorder If FLEXNetworkRecorder finds that request in networkTransactionsForRequestIdentifiers it will record it After investigation I noticed that NSURLConnectionDataDelegates connectionwillSendRequestredirectResponse is called NSURLSessionTaskDelegates URLSessiontaskwillPerformHTTPRedirectionnewRequestcompletionHandler is never called Reading its documentation Apple says This method is called only for tasks in default and ephemeral sessions Tasks in background sessions automatically follow redirects But my session is indeed a default one Now I am not entirely sure those methods are equivalent and that I should expect it to be called when a request is sent However I know that NSURLSessions resume should always be called And I see that this method too is swizzled and its swizzling block is also performing the abovementioned step of FLEXNetworkObserver When checking how resume is swizzled I see those comments In iOS resume lives in NSCFLocalSessionTask In iOS resume lives in NSURLSessionTask In iOS resume lives in NSCFURLSessionTask Dat smelly smell After drilling through the iOS ObjC runtime I didnt really find any more interesting classes implementing that resume method details summaryUnsatisfactory resultssummary javascript void DumpObjcMethodsClass clz unsigned int methodCount Method methods classcopyMethodListclz methodCount for unsigned int i i methodCount i Method method methods i if strcmpselgetNamemethodgetNamemethod resume printf ts has method named s of encoding s n classgetNameclz selgetNamemethodgetNamemethod methodgetTypeEncodingmethod freemethods NSCFURLSessionConnection has method named resume of encoding v NSCFURLProxySessionConnection has method named resume of encoding v NSCFURLLocalSessionConnection has method named resume of encoding v NSCFURLLocalStreamTask has method named resume of encoding v NSCFURLSessionTask has method named resume of encoding v NSCFLocalSessionTask has method named resume of encoding v details But after randomly playing with it and trying to force the use of NSCFLocalSessionTask which was the one for iOS tadaa the swizzling block is called and network logs are back in Network History tada So did Apple move the implementation back to NSCFLocalSessionTask Since when iOS x Before Why has noone noticed it Why is URLSessiontaskwillPerformHTTPRedirectionnewRequestcompletionHandler not called Why am I asking so many questions I hope I was clear thanks for any help I have two project both use FLEXbut FLEX cant observe resume method in one of the projects and i found something here here when excute injectIntoNSURLSessionTaskResume i print the class is NSCFURLSessionTask but when i use afnetworking to excute such as a GET method i found the class is NSCFLocalDataTask so i guess the FLEXNetworkObserver not observe resume because it didnt swizzle right methodand after i add code it worked and the strange thing is the other project is normal without any change need help Close This was previously discussed here This solution seems to work of the time so I am assuming that locking and unlocking the zones is no longer needed on arm e It might be a good idea to confirm it however Only applies for apps that have an arm e slice arm apps running on an arm e device are not affected Fixed 