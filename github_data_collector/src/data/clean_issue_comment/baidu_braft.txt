leader log entry commit leader leader commit log entry client leader client ip log entry request done Adjusting heap profiles for in sampling rate Heap version Total MB ae d aa af ccfdc init cfce e fc ddece c afa Centos OnErrorClousre OnErrorClosure raft group AddPeer onconfigurationcommitted raft group A B C raft group C onconfigurationcommitted peer list AB C onconfigurationcommitted peer list ABC butilStatus NodeImpllistpeersstdvectorPeerId peers leader onconfigurationcommitted iterimpl error Originally posted by promoon in example atomic apply blockcounter apply stale read This is the leader and is uptodate Its safe to respond client leaderterm read lease leader follower redirect minority step down leader The Raft protocol is very helpful for distributed state management Can Byzantine Fault Tolerance be added to it please It would make it more secure Since you already have a perfectly working RAFT adding few midifications to the protocol such as those mentioned in the Tangaroa Paper would make it secure MB Fail to open procselfstat Too many open files Fail to open procselffd Too many open files Fail to open procselfstatm Too many open files Fail to open procloadavg Too many open files Fail to open procselfio Too many open files Fail to open procselffd Too many open files Fail to open procselffd Too many open files Fail to open procselffd Too many open files Fail to open procselffd Too many open files Fail to open procselffd Too many open files Fail to close old opensegment or create new opensegment Too many open files Fail to appendentries nappent toappend Timeout when leaving replication group will force exit got errortypeLogError errorcode errortextFail to append entries log Segment close fd Segment close fd snapshot apply bthreadexecutionqueueexecute G snapshot 