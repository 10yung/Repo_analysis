Hi FDroid maintainer here We cant update IPFSDroid to because it contains prebuilt binaries in appsrcmainassets named arm and x My guess is that its free software and comes from but our policy requires it to be built from source to make sure it does not contain any proprietary bits Could you provide some build instructions for goipfs binaries or even better integrate goipfs into IPFSDroid build system Hi What would be the best way to start the translation Thanks It could be possible for people to share IPFS hashes using QR code through phones The downside is that people will be skeptical of such a code not knowing whether it is URL or IPFS A solution is to implement COBRA as custom IPFs barcode since it is unique in color and shape But since COBRA is not in development since it needs updating and standardisation There needs to be client support for such a barcode and I would recommend adding it to ORION Expected behavior I expected a prompt of failed download describing that the download had failed due to lack of usable network connection Actual behavior Clicking the download button on IPFSDroid when network connection is put off leads to a crash How to reproduce Download and Install IPFSDroid from Fdroidorg Put off data connection on your device and launch IPFSdroid On the homepage locate a button that reads DOWNLOAD INIT FULL NODE Click on the button and notice the out come App version V Operating system Android v jellybean I was also able to replicate this issue on Android v Proof of work orgligiipfsdroid EWindowManager androidviewWindowLeaked Activity orgligiipfsdroidMainActivity has leaked window DecorView af f that was originally added here at androidviewViewRootImplinitViewRootImpljava at androidviewWindowManagerGlobaladdViewWindowManagerGlobaljava at androidviewWindowManagerImpladdViewWindowManagerImpljava at androidappDialogshowDialogjava at orgligiipfsdroidIPFSDaemondownloadIPFSDaemonkt at orgligiipfsdroidMainActivityonCreate onClickMainActivitykt at androidviewViewperformClickViewjava at androidviewViewPerformClickrunViewjava at androidosHandlerhandleCallbackHandlerjava at androidosHandlerdispatchMessageHandlerjava at androidosLooperloopLooperjava at androidappActivityThreadmainActivityThreadjava at javalangreflectMethodinvokeNative Method at comandroidinternalosZygoteInitMethodAndArgsCallerrunZygoteInitjava at comandroidinternalosZygoteInitmainZygoteInitjava It seems we have the ability to utilize the local IPFS node for adding content to IPFS and doing an IPFS cat to read out a file from IPFS However in order to access an image file from IPFS this app and its browser UI utilizes the ipfsio IPFS gateway in order to get content Is it possible to execute an IPFS get command the same way an IPFS cat command is now possible perhaps it returns byte data or a File object It would be nice to be able to fetch files without depending on a remote IPFS gateway Let me know if this questions should be in the IPFS Kotlin api repo Hello it would be good to support dwebipfs as it replaced fs some time ago Reference defines standardized URLs ipfs and ipns and URI dweb I think it would be cool if IPFSDroid would also have an exported service or export the existing service that allows starting and stopping of the daemon by other processes via Intents My use case for this would be controlling the daemon based on the wifi I am connected to or other variables via the AutomateTasker apps ligi I would prepare a PR if that sounds okay to you Two recommendations to make things faster Gzip the bins and then unzip during download The downloadFile function in the IPFSDaemon would look like val zipped responseBodysource val source GzipSourcezipped val buffer OkiobufferOkiosinkgetBinaryFile var total L var cnt L do cnt sourcereadbufferbuffer total cnt val size cnt progressDialogsetMessagesize kB while cnt Compile the bins with target android xgo go targetsandroid cmdipfs so you get the additional arm bin which is way faster when applicable most newer devices The node should all by itself not cause that much drain One way to fix this would be to shut down the node automatically when the node is not used currently and it is running on battery power I just tried accessing localhost and was pleased to see it working with ipfsQmfoo but sadly it doesnt work with ipnsipfsio for example 