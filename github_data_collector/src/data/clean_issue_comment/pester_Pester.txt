 General summary of the issue Please provide a descriptive title of the issue in the field Title too Please be aware that Pester version which is shipped with Windows and Windows Server is not supported anymore Please update Pester before submitting a bug report and retest your code under the newest version of Pester Full installation and update guide The first file that is run powershell PSVersionTablePSVersion ModuleName GetChildItem PSScriptRoot psd BaseName if null eq GetModule ListAvailable pester WriteWarning ModuleName Downloading Pester from PSGallery InstallModule Name Pester Repository PSGallery Force SkipPublisherCheck if null eq GetModule ListAvailable PSSharedGoods WriteWarning ModuleName Downloading PSSharedGoods from PSGallery InstallModule Name PSSharedGoods Repository PSGallery Force ImportModule PSSharedGoods Force ImportModule PSScriptRoot PSWriteWordpsd Force result InvokePester Script PSScriptRoot Tests Verbose EnableExit if resultFailedCount gt throw resultFailedCount tests failed And this is the file it crashes on powershell Describe AddWordLine It Given new lines document should hold proper amount of paragraphs WordDocument NewWordDocument AddWordLine WordDocument WordDocument LineColor Red LineType double Supress True AddWordLine WordDocument WordDocument LineColor Blue LineType single LineSize Supress True AddWordLine WordDocument WordDocument LineColor Red LineType triple Supress True AddWordLine WordDocument WordDocument HorizontalBorderPosition top LineColor Blue LineType single LineSize Supress True WordDocumentParagraphsCount Should Be Full error Executing script homevstswork sTestsAddWordLineTestsps Describing AddWordLine WARNING NewWordDocument Document Error Unable to find type XceedWordsNETDocX Exception calling LeaveTestGroup with arguments TestGroups stack corrupted Expected namehint of homevstswork sTestsAddWordLineTestsps Script Found AddWordLine Describe At homevstslocalsharepowershellModulesPester Pesterpsm char pesterLeaveTestGrouptestDescription Script CategoryInfo NotSpecified MethodInvocationException FullyQualifiedErrorId ScriptMethodRuntimeException Describe Your Environment Not relevant but its Azure DevOps LinuxMacOs Probably behaves the same on Windows if type would be missing If you would like to submit a bug report please provide the output of a code provided below If you would like to write about anything else like a feature request feel free to remove a provided template text Operating System Pester version and PowerShell version powershell bugReport p GetModule Name Pester ListAvailable SelectObject First Pester version pVersion pPath PowerShell version PSVersionTablePSVersion OS version SystemEnvironment OSVersionVersionString bugReport bugReport clip If you use Pester from a folder not included in the EnvPSModulePath please change a provided code accordingly Expected Behavior If youre describing a bug tell us what should happen If youre suggesting a changeimprovement tell us how it should work Mainly what the proposed feature is why it is useful and what dependencies if any it has It would also be great if you added one or two examples of realworld usage if you have any I should get an error thats caught and count as Test Failed Current Behavior If describing a bug tell us what happens instead of the expected behavior If suggesting a changeimprovement explain the difference between the current behavior and the suggested behavior Please remember that you can limit Pester output behavior using the Show parameter Pester doesnt catch that error with Tests Failed therefore AzureDevOps reports Success Possible Solution Have a solution in mind Bug fix pull requests are always welcome has detailed instructions on how to contribute If you are proposing a feature lets discuss it here first Context Im trying to test my code against Windows Linux and MacOs on AzureDevOps Due to library issues its only going to work on Windows for now but I would like it to report failure when thing go wrong anyways How has this issue affected you What are you trying to accomplish which may occur with PowerShell Thank you for contributing to Pester Please provide a descriptive title of the pull request in the field Title General summary of the pull request If the failure message contains an escape sequence which can happen with PowerShell and the results are going to be serialized to an Nunit file you may see something like this MethodInvocationException UsersjimtrusrcgithubforksJamesWTruherPesterFunctionsTestResultsps Line xmlWriterWriteElementStringmessage TestResultFailureMessage Exception calling WriteElementString with arguments hexadecimal value x B is an invalid character and the xml file created is partial The escape in the message is not valid for serialization Please describe what your pull request fixes or how it improves Pester If your pull request resolves a reported issue please mention it by using Fix issuenumber on a new line this will close the linked issue automatically when this PR is merged For more info see Closing issues using keywords If your pull request integrates Pester with another system please tell us how the change can be tested Please remember to update the Pester wiki if needed Before you continue please review Contributing to Pester and Development rules technical Our continuous integration system doesnt send any notifications about failed tests Please return to the opened pull request after minutes to check if is everything OK This escapes the escape character char to As the title says I think I want an enhancement but Im not totally sure of the form it should take and Im prepared for people to shoot me down for doing things the wrong way So here goes General summary of the issue Im doing some work with the selenium web testing tools You can clich through my name to see it The selenium web driver can get a page find an element on the page find things aboutwithin the element It can also type into input boxes and click on elements I have a bunch of commands which make for quite a nice DSL all begining Se so I can write SeOpen In FireFox FindSeElement by Name q SeType PowershellSeleniumEnter I have built a command SeShouldHave so I get a consistent behaviour I might write SeShouldHave linkXpath With href match selenium or SeShouldHave By Name cars With choice contains volvo or SeShouldHave URL eq alertTestPage TimeOut SeShouldhave throws an error if the page doesnt have what is meant to but in some places it needs to retry so the last example cant be written as webDriverURL should be alertTestPage It also takes a passthru switch so the first example would be written it Found the search box and did a search seShouldHave by Name q passThru SeType PowershellSeleniumEnter having type if found throw if not found would need to be lines using should elem FindSeElement by Name q elem should not benullOrEmpty SeType element elem keys PowershellSeleniumEnter so So question Whats the view on not using should inside the IT block but using something else which throws an error if the test fails or runs to completion if the test passes Ive got something which works but I dont want to promote a way of using pester which is outside what it is designed to support I have reverse engineered the pester format for delivering an error record so what the IT command sees is very similar when SeShouldHave reports a failure as when should does The only difference is that with should the output process filters out a lot of the script stack trace which with a custom version I get extra lines of stack trace which Id like to eliminate so question Is it possible practical desirable to have either a NoStackTrace option for error output or to customize what gets filtered out In other places I have found that the code being tested throws an error which wasnt anticipated which fails the test as we want it to but in some cases we get a lot off detailed red ink appart from feeling there should be less of it Im not certain what I want here but was wondering if other people had ideas on that subject I am using a command where I am calling one ps dummyps file to another ps file command I am using is startprocess powershell dummyps I need to write the pester unit test to cover this line and I have to mock it but it not happening so please help me to sort this out when I am checking the coverage its showing dummyps line is not covered I have mocked the command like this Mock startprocess where I am doing wrong Should assertions have multiple quirks and pain points here is a notcomplete list Be does too much so it is hard to understand what is happening Enumeration via pipeline complicates a lot of things and Be has special logic to revert this which does not always work It is difficult to apply seperate special behavior for different types of data eg Should BeFalse AllowNull AllowTypeCast FalseStringAsFalse Should BeString CaseSensitive Should BeCollection All like fileps because parameter sets limited to parameter sets per function I researched the various limitations of Should by writing a separate module Assert which has nice functionality but is not used often because people are not aware of it I think it would be wort it to merge the functionality into Pester and fix some of the quirks finally But I am wondering what ways forward I actually have There are few more limitations How to export the Should functions without triggering Verb warning Pester is getting around this by using single word functions at the moment How to ensure backward compatibility probably Should Be has to remain in place while ShouldBe is added Should this change be done in v if it is parallel then we can do it as nonbreaking change Add a summary of the changes how to start and show some examples of the new behavior Add possible painpoints during migration General summary of the issue Mock scope appears to be not intuitive If you define a Mock in an It and think that when the It is gone that the Mock is gone it does not appear to be so Since there doesnt appear to be a way to dispose of the Mock the Mock may be available in every It and its parent Context The Work around is to put non mocked tests in a separate Context or Describe Describe Your Environment Happens in both Win and Server Pester Operating System Pester version and PowerShell version powershell Pester version C Program Files WindowsPowerShell Modules Pester Pesterpsd PowerShell version OS version Microsoft Windows NT If you use Pester from a folder not included in the EnvPSModulePath please change a provided code accordingly Expected Behavior I expected one of two things Either Mocks are no longer available when defined in an it and the it is done A method to dispose of the Mock when done with it Current Behavior Right now Mocks defined in an It override the mocked call in all other its within the same context To test you have to create a second context Not clear from documentation Possible Solution Add a section on scoping to docs on wiki for Mocking barring that add feature so that mocks can be disposed of Context The article published in here has a blurb about this issue Kudos to Jakub Jare for this quote Mock scoping The last set of rules you should keep in mind are the scoping rules that apply to mocks and mock call assertions They complicated our lives already when we tried to assert on a mock call count in the first example and they may produce all kinds of unexpected results if you are not aware of them Mock defined in Describe is available in the whole Describe Mock defined in Context is available in the whole Context Mock defined in It is available in its parent scope That is in whole Context if the It is placed in a Context and in whole describe if the It is placed in a Describe THere is a section about InvokePester but it would be smart to add a section called Scoping that points to it to make the docs better When running in the context of Mock we should collect errors and fail the MockWith or ParameterFilter instead of writing the errors to the parent It block Throw on Legacy Should syntax so the user gets a nice message instead of cannot resolve parameter set Fix Get rid of Total properties in favor of other more obvious names like Count Make Duration the aggregate duration and rename the rest Review container object and its properties when generated from ScriptBlock it looks like the filtered out properties are not filtered out Add new line after summary