 All Submissions x Have you followed the guidelines in our Contributing document x Have you checked to ensure there arent other open Pull Requests for the same updatechange Have you written unit tests Have you written unit tests that cover the negative cases ie if bad data is submitted does the library respond properly This PR is associated with an existing issue OpenAPI uses the equivalent of collectionFormat multi for arrays in querystrings by default style form explode true However the key collectionFormat is no longer allowed and should therefore not be set Allowed fields Defaults Provide a general summary of the issue in the Title above Sorting Im submitting a X bug report feature request support request I confirm that I X used the search to make sure that a similar issue hasnt already been submit Expected Behavior ts format email pattern azAZ azAZ azAZ email string It should create a validator containing the full pattern ts email dataType string required true validators pattern value azAZ azAZ azAZ Current Behavior The pattern is split at and only the first part of the regex is used ts email dataType string required true validators pattern value azAZ Context Environment Version of the library Version of NodeJS v Confirm you were using yarn not npm X Provide a general summary of the issue in the Title above Sorting Im submitting a x bug report x feature request support request I confirm that I used the search to make sure that a similar issue hasnt already been submit Expected Behavior Tell us what should happen When I enable the tsconfig option noUnusedParameters and try to compile the app after routes have been generated I get the following errors srcroutests error TS app is declared but its value is never read export function RegisterRoutesapp expressExpress srcroutests error TS promiseHandler is declared but its value is never read function promiseHandlercontrollerObj any promise any response any next any srcroutests error TS getValidatedArgs is declared but its value is never read function getValidatedArgsargs any request any any AM Found errors Watching for file changes If this is related to swaggerOpenAPI files then please include swaggeryaml that you wish tsoa had generated yaml tsnocheck Current Behavior Tell us what happens instead of the expected behavior I receive multiple compilation errors from typescript and cannot build the application Possible Solution Not obligatory but suggest a fixreason for the bug Adding tsnocheck to the top of the file suppresses this issue Steps to Reproduce Context Environment Version of the library tsoa Version of NodeJS insert that here Confirm you were using yarn not npm x Previously in v x tsoa was able to support string literal type arrays in the query parameter However v is showing breaking changes on this behavior Sorting Im submitting a x bug report feature request support request I confirm that I x used the search to make sure that a similar issue hasnt already been submit Expected Behavior Tell us what should happen If this is related to a TypeScript issue then include the way that you expected to be able to write the code yml route post parameters in query name mode required false schema default type array items type string enum collectionFormat multi Current Behavior Tell us what happens instead of the expected behavior Error Querymode Cant support array refAlias type Possible Solution Not obligatory but suggest a fixreason for the bug Steps to Reproduce Provide a link to a live example or an unambiguous set of steps to reproduce this bug Include code to reproduce if relevant ts type Mode Query mode Mode Context Environment Version of the library v Version of NodeJS v Breaking change v breaking changes Provide a general summary of the issue in the Title above Sorting Im submitting a x bug report feature request support request I confirm that I x used the search to make sure that a similar issue hasnt already been submit Expected Behavior json OptionalNotNullable properties optional type string required type object additionalProperties false If this is related to a TypeScript issue then include the way that you expected to be able to write the code ts interface OptionalNotNullable optional string Current Behavior json OptionalNotNullable properties optional type string nullable true required type object additionalProperties false Possible Solution Dont mark optional properties as nullable true Context Environment Version of the library x Version of NodeJS any x Confirm you were using yarn not npm Detailed Description If we have a representation of the concept see propsal here of null in OpenAPI spec we should not mark any optional properties as nullable true and instead use the explicit TS null Breaking change Yes should be x Provide a general summary of the issue in the Title above This is the v version for the compromise we made in Sorting Im submitting a bug report X feature request support request I confirm that I X used the search to make sure that a similar issue hasnt already been submit Expected Behavior Tell us what should happen If this is related to swaggerOpenAPI files then please include swaggeryaml that you wish tsoa had generated Assuming that the host property was not provided and the basePath is v correct me on this if Im wrong Eoksni jreuschbarco but the desired output would be yaml servers url v Id like to be able to specify relative host which is allowed by specification Current Behavior Currently if I omit host field in the swagger config or use empty host it gets replaced with Using host also doesnt work Possible Solution The solutions were discussed in the v version of this change Detailed Description Provide a detailed description of the change or addition you are proposing We will accept that if someone doesnt specify a host then it should not default since tsoa couldnt possibly know which host to default to It should be relative Breaking change if this is a breaking change then please describe how it breaks the existing libraries inputsoutputs if this is a breaking change then discuss how we can mitigate that Yes this should be part of the v branch Can one specify a return type of binary or file on a model property Sorting Im submitting a bug report x feature request support request I confirm that I x used the search to make sure that a similar issue hasnt already been submit There was but without any real solution Expected Behavior Adding TSOA should not drastically increase the size of my deployed application and it should not add unused dependencies to it Current Behavior Adding TSOA to an empty project causes npm packages to be added with a size of over MB with MB for typescript alone Especially having to include typescript in my deployed productive code is really bad in my opinion Possible Solution I think it would make much sense to split tsoa into package one for the CLI tsoacli and one Runtime package tsoaruntime This way tsoacli could be used as a global or dev dependency and only the needed code is deployed with the productive runtime dependency Runtime would probably just include controller base class decorators and maybe a few other small things Breaking change Depending on the chosen package naming the change might break existing builds andor deployments if they would be updated Possible options are tsoaCLI tsoaruntime would probably not break anything silent update might lead cause possible improvements to be wasted as long as the CLI package stays in the productive dependencies tsoaempty tsoacli tsoaruntime basically the same as above with nicer package name for CLI tsoacli tsoa Runtime would break the build but not the runtime as long as you dont try to actually use CLI features at runtime but this should usually not be the case naming schema would be in line what many other big packages to eg angular babel vue gulp grunt karma aurelia instant win for the runtime fixing the build by adding CLI package to the dev dependencies should be easy tsoacli tsoaruntime deprecate tsoa clear naming would not break anything forces explicit migration I would prefer option or event if they are slightly less comfortable as and feel somewhat dirty to me cc ryonbx Provide a general summary of the issue in the Title above Sorting Im submitting a x bug report feature request support request I confirm that I x used the search to make sure that a similar issue hasnt already been submit Explanation Accompanying issue for the issue raised in this PR It just modifies the tests to demonstrate the desired output Provide a general summary of the issue in the Title above Sorting Im submitting a bug report x feature request support request I confirm that I x used the search to make sure that a similar issue hasnt already been submit There are closed issues none that offer a potential solution afaik Expected Behavior ts Route export class TestController Gettest public async test Headertokens tokens string Promisestring return Hello World could automatically generate yaml name tokens in header required true type array items type string collectionFormat csv yaml name tokens in header required true schema type array items type string style simple Current Behavior It throws Error HeaderinUid Cant support array type in TestControllerControllertest Possible Solution According to the OpenAPI Spec its possible to pass complex data types array and object as a standardized format Some examples from the Spec Assume a parameter named color has one of the following values string blue array blueblackbrown object R G B The following table shows examples of rendering different formats that would give support for query path cookie and header Explode is false default setting for both style empty string array object usable in form color colorblue colorblueblackbrown colorR G B querycookie simple na blue blueblackbrown R G B path header Swagger afaik only supports schema objects in body Arrays should be fine objects without references might work but Im not sure form should be collectionFormat csv in OpenAPI simple should be collectionFormat csv in Context OpenAPI Parameter Object Swagger Parameter Object RFC Detailed Description Ideally we would document and eventually extract arrays and objects from header query and path strings before passing the param to the ValidationService I have not fully fleshed out this idea but Id say its ok to discuss this at least in theory for now Breaking change Not sure Id say since we would not support validating these this is probably safer to do in the context of a major release