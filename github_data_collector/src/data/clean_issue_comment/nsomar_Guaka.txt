Using fastlane maybe The current one is kinda broken Is there a way to escape a flag I wanted to have a command that passes along some arbitrary arguments and flags in a flag to a different script mycommand args flag value but Guaka complains as it doesnt see flag value as a single string Hello Let s say I m writing the git CLI for example purpose I want to handle the version flag for all commands and subcommands For this I will create an inheritablePreRun on the root command git which will process the version flag if it is set Then after a little bit of coding I ll have to write the git submodule commands git submodule update git submodule foreach etc For each of this commands I ll need to read the submodule config file gitmodules To avoid reimplementing the logic of the parsing and error processing command failure etc I ll want to implement an inheritablePreRun on the git submodule command However once I do that the root inheritablePreRun will be ignored thus dropping my handling of the version flag I think inheritablePreRuns should be executed recursively from the root to the current command being executed Any thoughts It would be nice if the tooling guaka create created an Xcode project with a working unit test The current website lacks some of the information about what libraries are part of Guaka This website does a great job at highlighting its component Maybe we can do something similar to it getIntname and getBoolname etc could use overloads instead of unique names to distinguish the types This impacts usage at the call site in the following ways When called nakedly a type annotation may need used to disambiguate the method When the type is able to be inferred the call site avoids adding redundant type information In addition to overloading get methods it seems intuitive to access these via subscript Below is a little playground snippet exploring this idea and showing some call site usage side by side swift struct Flag var value Any struct Flags let flagsDict String Flag initflags String Flag selfflagsDict flags public subscriptname String Flag return flagsDict name public subscriptname String Bool return flagsDict name value as Bool public func getBoolname String Bool return flagsDict name value as Bool func log verbose Bool message String if verbose false printmessage let flags Flagsflags verbose Flagvalue true type inferred subscript let verbose Bool flags verbose logflags verbose log message compared to let verbose flagsgetBoolname verbose logflagsgetBoolname verbose log message Awesome library BTW I think we can come up with a better icon Something like D 