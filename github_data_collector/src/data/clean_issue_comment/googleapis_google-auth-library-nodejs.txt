I am trying to let a user log in to Firebase Auth using the identity from IAP but Im pretty lost on how to do it if its even possible at all To me it just seems ridiculous to have the user log in twice first IAP then Firebase I also made a post on SO about this but so far only one answer about minting my own token which I could do with or without IAP From frankyn on an issue about cold start performance The auth library is using an older version of SignBlob and should be using the newer version of SignBlob A similar issue was hit in Java Hi I have some functionality that currently uses this very old NPM library to programmatically retrieve the client email property assigned to the default service account directly without having to download the credentials JSON file It works fine but this googleautoauth library is very old and has multiple security vulnerabilities reported not to mention that is no longer maintained I would like to migrate this functionality to use the official googleauthlibrary library but I couldnt find in documentation or examples anything close to my use case const rp requirerequestpromisenative const googleAuth requiregoogleautoauth const auth googleAuth function generateTokenForCurrentServiceAccountttlObj host return new Promiseresolve reject A series of calls into googleautoauth follow As of Feb this library does not appear to easily support promises even using utilpromisify so callbacks are used below Get the credentials object for the current service account so we can access the email address authgetCredentialscredErr credentials if credErr loggererrorError in getCredentials step credErr rejectcredErr else authgetProjectIdprjErr projectId if prjErr loggererrorError in getProjectId step prjErr rejectprjErr else authauthorizeRequest method post uri authErr authorizedReqOpts if authErr loggererrorError in authorizeRequest step authErr rejectauthErr else const currentTime moment const currentTimeSeconds currentTimeunix const expirationTimeSeconds currentTimeSeconds ttlObjttlInSeconds Form and send web service request to Google to have a JWT claim set signed by the service account This request has the OAuth token in the header const options method POST uri authorizedReqOptsuri headers Authorization authorizedReqOptsheadersAuthorization contenttype applicationjson body payload JSONstringify iat currentTimeSeconds exp expirationTimeSeconds aud host iss credentialsclientemail sub credentialsclientemail json true loggerdebugSubmitting this request to Google JSONstringifyoptionsbody rpoptionsthenparsedBody Successfully signed token returning it to client const token parsedBodysignedJwt resolve token tokenExpiry expirationTimeSeconds catcherr loggererrorError calling GCP to sign JWT err rejecterr can you please point me in the right direction The release PR is still in a pending state after several hours Is your feature request related to a problem Please describe I want to make a react app talk to an Apollo GraphQL server but Im frustrated with the google oauth setup process because theres no example its unclear from a big picture perspective the user clicks Sign In we get a code We send the code to the server Then what if the offline flow only returns a code how do you get the users email and name and id without making a request to your server Most of the examples use Express with redirects but GraphQL uses post theyre maintained by one random guy they dont explain how to refresh the token access user id on subsequent page views Describe the solution youd like How do you make sure the user doesnt have to sign in over and over and over What happens on subsequent signins Does the user have to reconsent or do we have to send a different button Do you need to check if the user already consented and render different button settings How do you get the idtoken if youre doing offline flow Should I just give up on google and switch to Github or Facebook login Is there a CLIENT AND SERVER fullstack example of how to set this up that is actively maintained by google Also would it be possible to condense all the boilerplate I just want an official well maintained working example developer guide for how to set up a react app and apollo graphql server so the user signs in ONE time and they dont have to resignin hourly Or if offline flow is gonna be a huge mess you guys should drop it stop supporting it and just simplify your docs so devs dont waste multiple days trying and failing and trying and failing to set up singlesignon with their react apps Specifically I want to import a google sign in button react component right now we have to use one guys react component instead of officially maintained google code on my React app when the user clicks it and consents to sign up for the app I get the users code to send to my graphql server along with an id name and email With the idtoken and access code I want to fire a graphql mutation to save the refresh code in the database with the id or access token as authorization header clarify what happens the N infinity times the user revisits the site And I want it all to be published so other people dont have the same headaches I had Describe alternatives youve considered I tried cognito but its super notsecure Auth is a middleman Id use facebook or github and I probably should because Im frustrated with Google Sign In right now Its relatively doable to just make the user click on the button every hour but thats also terrible UX I just want to set up google sign in with react and graphql without days of annoying guesswork s of lines of boilerplate reading random dudes blogs not knowing which of different google documentation pages to use Additional context no nodejs server example only java and python Here Environment details Nodejs version v npm version googleauthlibrary version Steps to reproduce Code is as follows It has been working fine for about a year and now as of this morning the client is no longer returning the picture attribute in the JWT const OAuth Client requiregoogleauthlibrary const client new OAuth Client list of clientids const ticket await clientverifyIdToken idToken token audience allowedClientIds consolelogticketgetPayload OS macOS Nodejs version npm version googleauthlibrary version Im struggling to get a client using a P PEM file and Im wondering if its my fault js const GoogleAuth requiregoogleauthlibraryGoogleAuth const auth new GoogleAuth keyFilename pathtokeyp await authgetClient crashes with below output SyntaxError Unexpected token in JSON at position at JSONparse anonymous at ReadStreamanonymous Usersstephendevplaygissue nodemodulesgoogleauthlibrarybuildsrcauthgoogleauthjs at ReadStreamemit eventsjs at ReadStreamEventEmitteremit domainjs at endReadableNT streamreadablejs at processTicksAndRejections internalprocesstaskqueuesjs The key file is being passed around the googleauthjs file and after a read stream is opened to digest the key file it is parsed as JSON which throws the error The JWT file handles a key file path by checking the mimetype Does it look like Im doing something wrong here See googleapisnodejsgoogleapiscommon Im experiencing different behaviours when trying to perform requests using domain wide delegation which is required for a number of G Suite services eg The following code works correctly on my local machine with a service account JSON key file set and specified by the environment variable GOOGLEAPPLICATIONCREDENTIALS thisauthClient new googleauthGoogleAuth scopes clientOptions subject someusermydomaincom The code correctly makes any subsequent API call using the standard Google API client library as the user specified in clientOptionssubject When the same code is deployed to Google Cloud Run with the same service account the subject is ignored and the code attempts to make the API call with the service accounts identity not that of the expected delegated user Digging deeper it seems that when a key file is provided a JWT is being used which supports setting the subject via client options However when on GCP the instance metadata service provides an Oauth access token and the client options subject field provided in the constructor is ignored Is there a way to set the subject field when running with the injected service account in Cloud Run AppEngine etc The documentation doesnt describe this use case Without this working I will have to provide JSON key file to my Cloud Run app which increases the code complexity and operational complexity Google Auth library 