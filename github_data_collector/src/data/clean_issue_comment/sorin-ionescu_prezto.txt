Bug report from qosmio Im unable to reproduce it and qosmio hasnt yet confirmed or disconfirmed whether this fix works Its a good idea to change the code this way in either case As I mentioned in this stty ixon call may have been added by mistake It doesnt do what the comment suggest and is at least as likely to be harming users as helping them tar caf and tar xaf both should work Description As also mentioned in the completion module enables the completion system but also loads completion functions This means Modules loaded before completion that use complete for their completions will have their definitions cleared Modules loaded after completion will not have their completion functions installed I have a module that uses both because of external completion scripts which causes some completions to be lost Expected behavior To be able to use both complete and completion functions in the same module I believe completion functions of modules loaded later could be included if the collection of fpath elements is a separate step before the execution of the initzsh files so fpath is already finalized when the completion module is loaded However this conflicts with the removal of the entry from fpath if the module fails to load Alternatively the completion module could be separated into two parts one of which would be loaded early and the other compinit late My current workaround is to call compinit again after all modules were loaded but this seems wasteful Actual behavior Either complete or completion functions work Steps to Reproduce Create a module containing both a completion for terraform and a completion function initsh complete o nospace C commands terraform terraform functionsexample compdef example function example arguments foo bar Either include the module before or after the completion module Either the terraform or example completion will not work Versions Prezto commit c dda dfcf f caf e dfe d b ZSH version zsh x ubuntulinuxgnu OS information Ubuntu Description Many commands can generate zsh completions which is very useful Unfortunately running many such commands slows down zsh startup A notable example is pipenv which takes over a second I have seen a number of zsh pluginsmodules use a trick where they only generate the completion function if it does not exist or the command binary is newer I have generalized this mechanism in my own zsh customization module zsh local gendir hgeneratedfunctions fpathgendir fpath Generate a completion function usage gencomp COMMAND ARGS example gencomp kubectl completion zsh function gencomp gencompx Generate a completion function and add an extra line at the bottom of the file usage gencompx LINE COMMAND ARGS example gencompx starthelm helm completion zsh function gencompx local tail shift commands return local genfilegendir if commands ot genfile then genfile tail echo tail genfile fi The gencompx function is used when the completion does not add a call to the function itself otherwise you need to press tab twice the first time The contents of the generatedfunctions directory is not committed to version control obviously Question does in make sense to include this mechanism in prezto itself Id be happy to provide a pull request Apart from that any corrections or suggestions are also very welcome I have not dived into zshprezto too deeply so I might have missed an existing similar feature Please check if a similar issue already exists or has been closed before before opening your issue Description When I enabled syntaxhighlighting module with all highlighters as described here the colours of commands are inverted I got background green and foreground black for example on correct command When I disabled all highlighters everything are working fine UPD root highlighter is the problem When I enabled all except it everything seems to be fine But when I enabled it too colours inverts Expected behavior It should use foreground green and black background colours on correct command foreground red and black background and so on Actual behavior Colours are inverted Steps to Reproduce Install Prezto and reload the shell Enable syntaxhighlighting module at zpreztorc and reload the shell Enable all highlighters at zpreztorc and reload the shell Versions Prezto commit e e aad d ccbabd ffcded f c f ZSH version zsh x debianlinuxgnu OS information Debian GNULinux stretch Please check if a similar issue already exists or has been closed before before opening your issue Description Provide a general description of the bug or feature When using the cloud theme inside a git repo directory and pressing tab to autocomplete a command the first character of the command is repeated setup master lls external command ls lsappinfo lsbom lskq lsm lsmp lsof lsvfs shell function lssitepackages lsvirtualenv alias ls parameter LSCOLORS LSCOLORS Expected behavior I expect to see ls not lls What you expected to happen Steps to Reproduce switch to a directory containing a git repo ls tab Versions Prezto commit ebde b ZSH version zsh x appledarwin OS information macOS Mojave G prezto cloud theme prezto modules environment terminal editor history directory spectrum utility completion prompt git historysubstringsearch Please check if a similar issue already exists or has been closed before before opening your issue Description Provide a general description of the bug or feature When migrating from ohmyzsh I lost my history and didnt initially understand why ohmyzsh uses zshhistory for history see libhistoryzsh Expected behavior By default without configuration I should be able to continue using my existing history file zshhistory What you expected to happen Actual behavior The prezto history modules defaults HISTFILE to zhistory What actually happened Steps to Reproduce Versions Prezto commit d e eecc f e b d cbd bab ZSH version zsh x appledarwin OS information macOS Please check if a similar issue already exists or has been closed before before opening your issue Description Provide a general description of the bug or feature When using the vi keybindings with the editor module ALT left arrow moves to the previous word ALT right arrow doesnt move to the next word but alarms and prints C Occurs in vscode terminal and iterm I have the following bindings bindkey grep forwardword C viforwardword Oc viforwardword C viforwardword C viforwardword Expected behavior ALT right arrow moves to the next word What you expected to happen Actual behavior ALT right arrow doesnt move to the next word but alarms and prints C What actually happened Steps to Reproduce zstyle preztomoduleeditor keybindings vi Then try and navigate forward using ALT right arrow on a command line with multiple words Versions Prezto commit d e eecc f e b d cbd bab ZSH version zsh x appledarwin OS information macOS Hey when I type git co tab Id like to have only branches not tags Is there a way to do that Because is annoying Thank you After installing coreutils via below command brew install coreutils gls and gdircolors are available So if I do below colors and directory dirsfirst is working git diff diff git amodulesutilityinitzsh bmodulesutilityinitzsh index a e c b cf amodulesutilityinitzsh bmodulesutilityinitzsh if zstyle T preztomoduleutility safeops then fi ls if iscallable gdircolors then alias dircolorsgdircolors alias lsaliases ls gls fi if iscallable dircolors then GNU Core Utilities Can you check if coreutils has been installed 