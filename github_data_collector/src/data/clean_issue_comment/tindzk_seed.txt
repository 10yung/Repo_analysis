 Allow generating a separate file for libraries vs application Add an npmDeps setting Support setting bloop JS module kind to commonjs so JSImport works Generate packagejson and webpack config and run webpack this could be a custom target if there were a way to get all transitive dependencies npmDeps For libraries create a file like scalajsbundler does so that npm dependencies can be propagated JVM app should be able to depend on output of linking JS app so seed does it and get the result in its classpath In the Scala community its more than common to see a nice markdownhtml microsite for nice librariestools Since the README is so fleshed out it would make sense as a first step to just produce a site from that markdown It would definitely attract more attention This allows us to drop the Python dependency from the Docker image See also See also I think itd be lovely if we could support code completions and diagnostics in VS Code These are features that are typically supported outofthebox for JSON configuration files but I also think we should go a little bit further than that and support coursier dependency completions This feature alone would make the use of seed for beginners a very enjoyable experience I think theres a case to consider switching from TOML to JSON if we want to ship editor support sooner and have a more lightweight implementation VS Code supports JSONc JSON with comments and provides completionsred squigglies when a JSON schema is provided I have no opinion here I think JSON would be more amenable and intuitive to users especifically those coming from build tools such as npm and the like but TOML is also nice Imagine I was to use seed to teach Scala to beginners Id pick seed because its so simple that I can explain how to declare a module and add a dependency in less than a paragraph It imposes almost no overhead when teaching Scala to a crowd of developers inexperienced with the Scala build tool ecosystem and allows them to focus on whats important learning the language However a big drawback of doing this is that they would have learned to use a build tool thats perhaps really simple for future use cases and doesnt have major adoption in the community I believe this is an important point To address that concern I suggest seed can use generate valid build files out of its build schema Given its simplicity seeds format is a subset of the project settings in all the other build tools and making that generation is relatively straightforward Id suggest supporting sbt and mill at the beginning and then adding support for GradleMaven if theres demand The great thing about this is that people can get started with seed but if they need unsupported features such as packagingreleasing they can generate a valid sbtmill build out of it and continue with their lives Id like to have seed compiled to native Were already doing this in some of the projects in Bloop for example the next version of the CLI will be a Scala library compiled to native and I think it would be really exciting if this project was native which implies less resource usage and snappier UX Heres the list of current dependencies scala libraryDependencies Seq comlihaoyi fansi iogetcoursier coursier bloopCoursierVersion iogetcoursier coursiercache bloopCoursierVersion techsparse tomlscala techsparse pine chepflscala bloopconfig bloopVersion comjoefkelley argyle orgscalaj scalajhttp devzio zio RC iocirce circecore commonsio commonsio comzaxxer nuprocess orgjavawebsocket JavaWebSocket orgslf j slf jsimple alpha iomonix minitest test scalaOrganizationvalue scalareflect scalaVersionvalue It looks like there are quite a lot of them and Im not sure if they are GraalVM friendly But compiling to native should in theory work for any dependency that doesnt depend on JNA For example nuprocess should probably be replaced by This is not a blocker but I think it would be cool smile I think that what needs to happen is for something to pull in and call Ive noticed theres a lot of distinct action going on at various stages where dependencies or settings are being merged As these properties are unique by nature it would make sense to also reflect this in the model classes I really like Seed although I cant use it without however Im not sure I can use it with TOML Especially with and the configuration forms a deep tree and especially with many modules which the README says its designed for it can be very wide too TOML is nice for some things but I cant see it scaling well for me As an example GitLab CI uses TOML for configuring the runner binary but YAML for defining a projects various jobs and their configuration and I think they both make sense The former is basically a few sections of flat config with a bit of nesting The latter is a much more complicated tree of settings You can have many jobs each of which can have many settings each of which might itself need to be defined with subproperties I admit the TOML generated by seed init overwhelmed me more than it might have because some of what it generated may have been unnecessary I found something online to convert TOML to YAML and was much happier with the result So what I started doing is using yaml toml on Ubuntu sudo snap install marshal to translate my config for seed Specifically I ran echo seedbuildyml entr rs yaml toml preservekeyorder seedbuildyml buildtoml seed bloop bloop compile w bloop projects this will run the part in quotes whenever seedbuildyml changes via my shell Fish I didnt get all that far in converting my decentlysized sbt project to seed I stopped mainly due to but here is how the two ways of defining it compare details summaryTOMLsummary toml project scalaVersion scalaJsVersion scalaOptions encoding UTF unchecked deprecation Xfuture testFrameworks minitestrunnerFramework resolvers maven module modulesharedCommon root sharedcommon targets jvm js sources sharedcommonsrcmainscala compilerDeps orgscalamacros paradise full scalaDeps cccoscalareactive reactiverouting comgithubcornermansloth sloth b cdccb comgithubjulientruffaut monoclemacro cats comgithubkrzemin octopus comlihaoyi sourcecode iocirce circecore iocirce circegeneric iocirce circeparser iogithubnafg slickadditionsentity modulesharedCommontest sources sharedcommonsrctestscala scalaDeps iomonix minitest modulevolunteerShared root volunteershared targets jvm js sources notessharedsrcmainscala moduleDeps sharedCommon modulenotesShared root notesshared targets jvm js sources notessharedsrcmainscala moduleDeps volunteerShared moduledoctorsShared root doctorsshared targets jvm js sources doctorssharedsrcmainscala moduleDeps sharedCommon notesShared moduleutil root util targets jvm sources utilsrcmainscala moduleDeps volunteerShared scalaDeps netliftweb liftutil orgscalalangmodules scalaxml modulemodelsCommon root modelscommon targets jvm sources modelscommonsrcmainscala moduleDeps volunteerShared javaDeps orgflywaydb flywaycore scalaDeps comgithubtminglei slickpg comgithubtminglei slickpgcircejson iogithubnafg slickadditions netliftweb liftutil modulejsCommon root jscommon targets js sources jscommonsrcmainscala moduleDeps sharedCommon scalaOptions PscalajssjsDefinedByDefault scalaDeps comgithubjapgollyscalajsreact extmonoclecats iogithubnafgcssdsl bootstrap iogithubnafgscalajsfacades reactselect iogithubnafgscalajsreactutil core details details summaryYAMLsummary yaml project scalaVersion scalaJsVersion scalaOptions encoding UTF unchecked deprecation Xfuture testFrameworks minitestrunnerFramework resolvers maven module SHARED MODULES sharedCommon root sharedcommon targets jvm js sources sharedcommonsrcmainscala compilerDeps orgscalamacros paradise full scalaDeps cccoscalareactive reactiverouting comgithubcornermansloth sloth b cdccb comgithubjulientruffaut monoclemacro cats comgithubkrzemin octopus comlihaoyi sourcecode iocirce circecore iocirce circegeneric iocirce circeparser iogithubnafg slickadditionsentity test sources sharedcommonsrctestscala scalaDeps iomonix minitest volunteerShared root volunteershared targets jvm js sources notessharedsrcmainscala moduleDeps sharedCommon notesShared root notesshared targets jvm js sources notessharedsrcmainscala moduleDeps volunteerShared doctorsShared root doctorsshared targets jvm js sources doctorssharedsrcmainscala moduleDeps sharedCommon notesShared JVM MODULES util root util targets jvm sources utilsrcmainscala moduleDeps volunteerShared scalaDeps netliftweb liftutil orgscalalangmodules scalaxml modelsCommon root modelscommon targets jvm sources modelscommonsrcmainscala moduleDeps volunteerShared javaDeps orgflywaydb flywaycore scalaDeps comgithubtminglei slickpg comgithubtminglei slickpgcircejson iogithubnafg slickadditions netliftweb liftutil JS MODULES jsCommon root jscommon targets js sources jscommonsrcmainscala moduleDeps sharedCommon scalaOptions PscalajssjsDefinedByDefault scalaDeps comgithubjapgollyscalajsreact extmonoclecats iogithubnafgcssdsl bootstrap iogithubnafgscalajsfacades reactselect iogithubnafgscalajsreactutil core details 