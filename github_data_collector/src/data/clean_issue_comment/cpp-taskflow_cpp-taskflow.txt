Describe the bug I am trying to execute a Taskflow using dynamic tasking multiple times but the number of dynamic tasks created varies between executions Essentially I am traversing a tree starting from the root each node is visited as a single task and creates subtasks for all children using tfSubflow The tree is traversed multiple times but it changes after each traversal My code does what it should ie the traversal works however upon using tfExecutorObserver to inspect the execution I get broken data It shows that child nodes are sometimes processed before parent nodes which should be impossible because the parent node creates the task for the child node during its execution Also the names of the tasks are sometimes corrupted I created a small test project illustrating the problem here Is running the same tfTaskflow object with a subflow graph that changes between executions not supported To Reproduce Run the example project here Desktop please complete the following information OS Ubuntu compiling with gcc using v of cpptaskflow This eliminates quite some warnings for MSVC Describe the bug Testcase ParallelForOnIndex fails on Solaris doctest doctest version is doctest run with help for options unittesttaskflowcpp TEST CASE ParallelForOnIndex PositiveFloatingStep unittesttaskflowcpp FATAL ERROR REQUIRE n counter is NOT correct values REQUIRE doctest test cases passed failed skipped doctest assertions passed failed doctest Status FAILURE To Reproduce Steps to reproduce the behavior Compile Test See error Desktop please complete the following information OS SunOS solarisasus omniosr e i pc i i pc Compiler gcc OmniOS il It is no longer possible to run a taskflow with zero workers ie on the thread that calls executorruntaskflow I have a workload where I need to run some of my taskflows on a specific thread the main thread Prior to this commit it was possible by passing the taskflow to an executor with zero workers but now it throws an exception ifworkerssize TFTHROWErrorEXECUTOR no workers to execute the graph Is there another way to run a taskflow on a specific thread that Im not aware of All implementations TBB OpenMP and CppTaskflow exhibits very strange performance profile on the Black Scholes benchmark Problem rounds take about s for TBB and OpenMP and min for CPPTaskflow Ive triplechecked if maybe I was not using release mode or if there was something else and Im at a loss This is the VTune Amplifier summary of all implementations note that all implementation are spending most of their time waiting at a barrier or busy spinning TBB OpenMP CppTaskflow System i XE physical cores logical Overclocked at GHz allcores turbo Problem While TBB uses of my CPU on this benchmark CppTaskflow only uses about of each core Alternative implementation Ive done an alternative implementation in the Nim language OpenMP in my own runtime repo Sequential execution is s s and parallel execution around ms and the output are the same So the current benchmark are about x slower than expected I was thinking that maybe there was some false sharing but it seems like the arrays are padded by x times the cache line size Please describe your feature request Is there any way to support asynchronous task Use case could be a workflow with several tasks which issue requests over network and each task is asynchronously executed Please describe your feature request A clear and concise description of what the problem is Ex Im always frustrated when continous running every minute or second Please describe your feature request I am unsure how to unite taskflow graphs into a main taskflow graph easily when calling functions that themselves have their own taskflow graphs My issue likely comes from a shallow understanding of the nature of taskbased parallelism and lambda functions I am writing a program with a taskflow graph Within that program I would like to call functions from a separate header which themselves have taskflow graphs within their scopes What is the easiest way to include taskflow graphs from within functions into a main taskflow graph To maintain compatibility I would like tasks within called functions to work only with variables in the function scope Here is an example with main calling foo and bar functionscopezip Please describe your feature request It would be nice if cpptaskflow could provide a pkgconfig file to make discovery and consumption of this project easier in noncmake build systems such as autotools make waf meson build etc Reading the research paper I noticed wasnt mentioned Since both approaches are similar it would be interesting to see a comparison 