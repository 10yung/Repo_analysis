Currently cargodeb uses ldd statically which will not work on a nonnative target arch The behavior of this could be emulated as far as Im aware Id be open to help work on this with some guidance on best steps This behaviour is problematic I have a workspace with a lot of lib crates and one binary crate I use cargodeb with the manisfestpath option to pack my binary crate I need to package for several target architectures including amd and arm and some lib crates in my workspace can only compile on some specific architectures Cargodeb tries to compile all the crates of my workspace in any case so the packaging failed I think the cause is here in the code rust Builds a release binary with cargo build release pub fn cargobuildoptions Config target Option str otherflags String verbose bool CDResult let mut cmd Commandnewcargo cmdcurrentdir optionsmanifestdir cmdargbuildargs release all Why dont you use the manifestpath cargo option Why do you add the all option I think my problem would be solved by using the cargo manifestpath option and removing the call to the all option Hi Thanks for the tool it is really easy to run cargo deb and get our deb files out Some like me configured their CI to build deb files and publish them to GitHub Releases statically linked with musl to work anywhere It would be great to extend a READMEWiki with some tutorial where to move next This will really multiply the usefulness of this tool Documentation on DebianUbuntu is long and is optimized to be most generic and apply to all sorts of packages It would be great to write a shorter guide on how to publish your Rust apps to popular distro repos at least DebianUbuntu and maintain them there I am sure with this tool the number of steps is much smaller and you dont need to handcraft so many files manually I dont know if authors of this tool have an experience maintaining Debian packages with cargo deb if yes please share your experience with us Thanks Your crate looks great I look forward into trying it out Im going to package some services and I was thinking about integrating my crate configureme with your crate First Id like to integrate man pages they are already automatically generated from the configuration specification file Second I was thinking about adding debconf support to configureme so it can automatically generate templates and postinst script possibly another binary though Thirdly Id love to support bash completions at some point another thing worth integrating Im not sure how to do all this but I was thinking that cargodeb could set some environment variables eg MANOUTDIR DEBCONFTEMPLATEOUT needs append I think and BASHCOMPLETIONOUTDIR for bash completions What do you think The paths in Cargotoml seem to be handled in an inconsistent way Here is an example from alacritty assets targetreleasealacritty usrbin extraalacrittyinfo usrsharealacritty maintainerscripts extralinuxdebian Note how maintainerscripts and assets use paths that are relative to different locations The issue was mentioned there but it doesnt seem to have been brought over here Is this behaviour expected or is it something that should be fixed I want to package a binary that is being used as a service I have my packageservice located in the project folder under scriptspackageservice Is there any example of how I would go about in cargo deb to get the software service file included installed and enabled Apparently under debian all manpages under usrshameman are gzipped How about a command to gzip assets or a special manpage command Hello mmstick thx for building cargodeb It would be great to have a switch so that adding assets keeps the default behavior Could be named something like additionalassets or so Have a nice day Hello I would like to use cargodeb to replace my bash script I need openssl and someother dev packages as dependencies At the same time I would like to be able to manage my application using systemd status stop start I also have Configtoml which should be put together with the binary Could you please give me some information on how to achieve this using cargodeb thanks In the following example both mybin and mybin will show up as an executable usrbin inside the data archive packagemetadatadeb assets targetreleasemybin usrbin targetreleasemybin usrbin This seems to be fixed by removing the leading 