This requires some explanation IIUC you can specify which runners to run with r but pronto will actually use this to require a certain runner I wrote a rubystandardrb runner see respective PR basically only by subclassing prontorubocop because thats what standard is an opinionated wrapper around rubocop Now of course in that implementation I need to require the rubocop runner which will also load and thus run it and lead to conflicting outputs since the base rubocop configuration is quite different from standard so I could basically copypaste everything from prontorubocop and not require it at all but being all tuned to DRY implementations this really makes me want to tear my hair out TLDR Runners cannot be easily subclassed Bitbucket paginates api response in v and gets only comments if there are more than comments than a duplicate comment gets posted Hi We have a project which have a lot k of data files Those files are updated from time to time but they are not supposed to be evaluated by pronto Weve added a prontoyml and added the directory to be excluded however pronto still gets stuck because it seems to be trying to process all diffs coming from this directory before evaluating the exclude This makes it so that the only way to commit and push new files is to temporarily disable pronto Is there a way to make pronto ignore these files during the diff phase pronto run c develop Traceback most recent call last from rbenvversions binpronto in main from rbenvversions binpronto in load from rbenvversions librubygems gemspronto binpronto in top required from rbenvversions librubygems gemsthor libthorbaserb in start from rbenvversions librubygems gemsthor libthorrb in dispatch from rbenvversions librubygems gemsthor libthorinvocationrb in invokecommand from rbenvversions librubygems gemsthor libthorcommandrb in run from rbenvversions librubygems gemspronto libprontoclirb in run from rbenvversions librubygems gemspronto libprontoclirb in chdir from rbenvversions librubygems gemspronto libprontoclirb in block in run from rbenvversions librubygems gemspronto libprontorb in run from rbenvversions librubygems gemspronto libprontorunnersrb in run from rbenvversions librubygems gemspronto libprontorunnersrb in each from rbenvversions librubygems gemspronto libprontorunnersrb in block in run from rbenvversions librubygems gemsprontobrakeman libprontobrakemanrb in run from rbenvversions librubygems gemspronto libprontorunnerrb in rubypatches from rbenvversions librubygems gemspronto libprontorunnerrb in select from rbenvversions librubygems gemspronto libprontorunnerrb in block in rubypatches from rbenvversions librubygems gemspronto libprontorunnerrb in rubyfile from rbenvversions librubygems gemspronto libprontorunnerrb in rubyexecutable from rbenvversions librubygems gemspronto libprontorunnerrb in open rbenvversions librubygems gemspronto libprontorunnerrb in initialize No such file or directory rbsysopen worktestprojgitworktreesGemfile ErrnoENOENT I guess that ProntoGitPatchnewfilefullpath may return unexpected value for ProntoRunner cd tmp git clone cd pronto bundle git worktree add t echo test Gemfile echo test tGemfile bundle exec ruby Ilib rpronto e ProntoGitRepositorynewdiffunstagedeach p p pnewfilefullpath PathnametmpprontoGemfile bundle exec ruby Ilib rpronto e Dirchdirt ProntoGitRepositorynewdiffunstagedeach p p pnewfilefullpath PathnametmpprontogitworktreesGemfile When I apply the following patch newfilefullpath returns PathnametmptGemfile diff alibprontogitrepositoryrb blibprontogitrepositoryrb def commitsuntilsha end def path Pathnamenewrepopathparent Pathnamenewrepoworkdir end def blamepath lineno Is it possible to run pronto with its runner without path by only being inside a git repository For only the third and last out of three commands works root dc bb fd d ls app bin boot dev etc home lib lib media mnt opt proc root run sbin srv sys tmp usr var root dc bb fd d pronto run app root dc bb fd d cd app root dc bb fd dapp ls Capfile READMEmd catdiff docker dockercomposexxxyml lib postcssconfigjs spec Dockerfile Rakefile config dockercomposeciyml dockercomposeoverrideassetproductionyml localcategoriestxt prodcategoriestxt tmp DockerfileMySQL app configru dockercomposexxxtestyml dockercomposeoverrideyml log public vendor Gemfile babelconfigjs configvolume dockercomposexxxyml dockercomposeproductionyml nodemodules schemagraphql yarnlock Gemfilelock bin db dockercomposexxxtestyml dockercomposeyml packagejson script root dc bb fd dapp pronto run root dc bb fd dapp pronto run app apphelperscorecontrollerhelpersrb W MetricsMethodLength Method has too many lines apphelperscorecontrollerhelpersrb W LayoutEmptyLineBetweenDefs Use empty lines between method definitions apphelperscorecontrollerhelpersrb W StyleGuardClause Use a guard clause return unless tryspreecurrentuser order instead of wrapping the code inside a conditional expression apphelperscorecontrollerhelpersrb W RailsHelperInstanceVariable Do not use instance variables in helpers apphelperscorecontrollerhelpersrb W RailsHelperInstanceVariable Do not use instance variables in helpers apphelperscorecontrollerhelpersrb W RailsHelperInstanceVariable Do not use instance variables in helpers apphelperscorecontrollerhelpersrb W RailsHelperInstanceVariable Do not use instance variables in helpers apphelperscorecontrollerhelpersrb W MetricsCyclomaticComplexity Cyclomatic complexity for setcurrentorder is too high apphelperscorecontrollerhelpersrb W MetricsPerceivedComplexity Perceived complexity for setcurrentorder is too high apphelperscorecontrollerhelpersrb W RailsHelperInstanceVariable Do not use instance variables in helpers I would like to cd into the root of my project directory and execute pronto run without providing a path Further informations root dc bb fd dapp pronto v root dc bb fd dapp rubocop v Thanks for feedback best regards Lukas Synopsis A Message with a commitshanil generate an invalid Gitlab URL resulting in Pronto failing Description We have a CI set up at Gitlab public cloud running Pronto and Rubocop at each push Everything worked fine until a month ago We had the following error bundle exec pronto run f gitlab c remotesoriginstaging bundler failed to load command pronto buildsgoodtermscotonvendorbundleruby binpronto GitlabErrorNotFound Server responded with code message Commit Not Found Request URI buildsgoodtermscotonvendorbundleruby gemsgitlab libgitlabrequestrb in validate buildsgoodtermscotonvendorbundleruby gemsgitlab libgitlabrequestrb in block levels in classRequest buildsgoodtermscotonvendorbundleruby gemsgitlab libgitlabclientcommitsrb in commitcomments buildsgoodtermscotonvendorbundleruby gemspronto libprontogitlabrb in commitcomments buildsgoodtermscotonvendorbundleruby gemspronto libprontoformattercommitformatterrb in block in existingcomments buildsgoodtermscotonvendorbundleruby gemspronto libprontoformattercommitformatterrb in each buildsgoodtermscotonvendorbundleruby gemspronto libprontoformattercommitformatterrb in flatmap buildsgoodtermscotonvendorbundleruby gemspronto libprontoformattercommitformatterrb in existingcomments buildsgoodtermscotonvendorbundleruby gemspronto libprontoformattergitformatterrb in format buildsgoodtermscotonvendorbundleruby gemspronto libprontorb in block in run We were thinking of a configuration issue having two protocols and two domains in the reported URL Then we were looking for something with the project slug or Gitlab changing their APIs And then we noticed a missing commit number in the problematic URL Digging through Pronto we discovered that one of the messages had a nil commitsha ProntoMessage x fbedb d pathGemfilelock linestruct ProntoGitLine lineProntoBundlerAuditGemfileLockScannerLine x fbedb df linenumber patchProntoBundlerAuditGemfileLockScannerPatch x fbedb dc hunknil levelerror msgName nokogiri nVersion nAdvisory CVE nCriticality Unknown nURL Nokogiri Command Injection Vulnerability via NokogiriCSSTokenizerloadfile nSolution Upgrade to runnerProntoBundlerAudit commitshanil We are still digging to see how among all the gems involved see below is responsible for not being able to find a valid commit sha to report and why At least we think Pronto should render a different more specific error message when this happens We are willing to work on a fix please advise on the expected Pronto behavior Using pronto prontobundleraudit prontoflay prontorubocop rubocop rubocopperformance rubocoprails Apparently pronto still uses bitbucket v API for reading and posting comments This API has just been removed it now returns http error code We need to update to v API to keep this behaviour Add support for generating HTML report Issue background Using Gitlab CI to build a docker image where thePRONTOGITLABAPIPRIVATETOKENTOKEN bundle exec pronto run f gitlab c originmaster exitcode command is run in the container that is spun up When the image is built several files are ignored including the READMEmd READMEmd has been added to the prontoyml exclude but is not returned by Dir READMEmd in prontoconfigrbexcludedfiles as the file does not exist However the runner tries to run against the file as it was changed and is raising workingdircacheruby gemspronto libprontorunnerrb in initialize No such file or directory rbsysopen workingdirREADMEmd ErrnoENOENT Contents of prontoyml all exclude spec READMEmd gitlabciyml Have also tried md READMEmd and other wildcard combinations gitlabciyml also doesnt work as it is also ignored Some contents of dockerignore log dockerignore gitignore READMEmd gitlabciyml These work but seem hacky touched empty READMEmd and gitlabciyml into the docker container stop ignoring those files in dockerignore Other suggestions and workarounds welcome I would like to check the difference with the upstream branch using something like pipenv run pronto run f gitlab commitupstreamdevelop exitcode but without creating an upstream in the gitlab docker So there are a method to check the difference with an external branch