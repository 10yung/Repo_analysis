Solution update it Id like to ask whether there will be a release soon We would like to use communication via websocket which is available on master Regards Matthias Please use this template for reporting suspected bugs or requests for help Issue description The router socket cannot receive messages from itself Environment libzmq version commit hash if unreleased OS linux gcc Minimal test code Steps to reproduce the issue routerselfcpp routerself cpp zhelpersh Whats the actual result include assertion message call stack if applicable Compile and run routerselfcpp will get the result below no message is received In routerselfcpp only one socket is used Whats the expected result If use two router socket like routerself cpp will get the expected result I used open in Visual Studio to clone the code to local but I cant build the project Environment libzmq version OS win Issue description In a production environment running Windows Server we have found a shortlived PUSH socket fails to send a single message most of the time In most environments it is reliable and weve had a hard time reproducing but I do have some test code now that shows a problem on both Windows and MacOS Sierra We were using ZMQLINGER set to and ZMQIMMEDIATE was not enabled The socket is created configured the message sent nonblocking and destructed immediately The thread where this happens also ends very shortly after that The context is a singleton and is not destructed while the process is running The message is unreliably delivered to the PULL socket When it is not delivered we observe both cases where no TCP connection is ever made as well as a cases where the server starts the handshake and the client suddenly aborts it with a TCP RST packet as in this Wireshark trace wiresharkzeromq The documentation of ZMQLINGER leads me to believe the message should be delivered despite closing the socket Positive values specify an upper bound for the linger period in milliseconds Pending messages shall not be discarded after a call to zmqclose attempting to terminate the sockets context with zmqterm shall block until either all pending messages have been sent to a peer or the linger period expires after which any pending messages shall be discarded The documentation of ZMQIMMEDIATE makes me wonder if this is expected behavior By default queues will fill on outgoing connections even if the connection has not completed This can lead to lost messages on sockets with roundrobin routing REQ PUSH DEALER If this option is set to messages shall be queued only to completed connections This will cause the socket to block if there are no other connections but will prevent queues from filling on pipes awaiting connection Although the PUSH socket here is only connected to one PULL socket so its not really roundrobin I have not found any documentation on the interaction between ZMQLINGER and ZMQIMMEDIATE Possibly Related Issues Issue may be related in seeing dropped messages even with linger on a shortlived socket JeroMQ Issue seems to have the same TCPlevel behavior we observe Environment libzmq version commit hash if unreleased OS Windows Windows Server MacOS Sierra Compiler Visual Studio clangXcode Minimal test code Steps to reproduce the issue The following test code reproduces the issue on both Windows and MacOS although it fails more often on my Windows machine There are defines to allow you control blocking vs nonblocking enabled ZMQIMMEDIATE having the shortlived socket in a loop or in a thread and optional sleep between each send This code assumes C or higher cpp define BLOCKING define IMMEDIATE define THREADED define SLEEPEACH ms include atomic include cassert include chrono include iostream include memory include thread include vector include zmqh int main using namespace stdchronoliterals using stdchronosteadyclock stdatomicbool stoppedfalse stdatomicsteadyclocktimepoint lastReceivedsteadyclocknow stdatomicunsigned long long messagesReceived ull messagesSent ull constexpr unsigned long long TOTALMESSAGES unsigned long long lastMessage stdnumericlimitsunsigned long longmax stdvectorunsigned long long messageNumbers auto ctx zmqctxnew pull socket reading numbers stdthread receiver auto socket zmqsocketctx ZMQPULL int opt zmqsetsockoptsocket ZMQRCVHWM opt sizeof opt zmqbindsocket tcp char buf while stopped int len zmqrecvsocket buf sizeof buf if len buf len int number stdatoibuf messageNumberspushbacknumber lastMessage number if messagesReceived TOTALMESSAGES stoppedstoretrue lastReceivedstoresteadyclocknow zmqclosesocket time for socket to get ready stdthisthreadsleepfor s int rc for unsigned long long i ull i TOTALMESSAGES rc i ifdef THREADED stdthread t endif ifdef SLEEPEACH stdthisthreadsleepforSLEEPEACH endif auto socket zmqsocketctx ZMQPUSH int opt zmqsetsockoptsocket ZMQSNDTIMEO opt sizeof opt opt zmqsetsockoptsocket ZMQLINGER opt sizeof opt ifdef IMMEDIATE opt zmqsetsockoptsocket ZMQIMMEDIATE opt sizeof opt endif zmqconnectsocket tcp stdstring msg stdtostringi ifdef BLOCKING int blocking else int blocking ZMQNOBLOCK endif rc zmqsendsocket msgcstr msglength blocking if rc stdcerr Send failed zmqerrno zmqstrerrorzmqerrno stdendl assertrc messagesSent zmqclosesocket ifdef THREADED tjoin endif while stopped receiverjoinable if we havent got a new message in seconds assume no more are coming if steadyclocknow lastReceivedload s if stopped stdcerr No message in seconds stopping test early stdendl stoppedstoretrue stdthisthreadsleepfor ms stdcout Sent messagesSentload read messagesReceivedload lost messagesSent messagesReceived assertmessagesReceivedload TOTALMESSAGES zmqtermctx return Whats the actual result include assertion message call stack if applicable Basically nonimmediate and nonsleeping tests drop a few messages often Blocking and immediate never drop in the test case but in the production environment blocking and immediate still drops unless we add something like stdcout after the send then it never drops maybe due to a syscall occurring Using a thread makes the dropping worse but is not necessary to get some drops Adding a ms sleep seems to fix the issue regardless of the other settings Even a ms sleep seems to fix the issue syscall I ran three runs of each of these configurations here are the results for Windows indicates a pass anything lower is a failure with dropped messages Blocking Immediate Threaded Sleep Received Messages out of N N N N Y N N N N N Y N Y N Y N Y Y N N Y Y Y N N N N ms N Y NA NA send always fails N N Y ms N N Y ms Whats the expected result Message is sent reliably every time Issue description Cant build RPM package because of failing tests Environment libzmq version commit hash if unreleased eb eac b b OS CentOS Minimal test code Steps to reproduce the issue Run the following command mkdir p rootrpmbuildSOURCES git archive o rootrpmbuildSOURCESzeromq targz prefixzeromq HEAD yum install y yumutils yumbuilddep y packagingredhatzeromqspec rpmbuild ba packagingredhatzeromqspec with drafts Whats the actual result FAIL teststestradiodish FAIL teststestradiodish exit status Testsuite summary for zeromq TOTAL PASS SKIP XFAIL FAIL XPASS ERROR Whats the expected result All tests pass Additional information Running the test command manually produces the following output time testradiodish teststestradiodishcpp testleaveunjoinedfailsPASS teststestradiodishcpp testjointoolongfailsPASS teststestradiodishcpp testjointwicefailsPASS teststestradiodishcpp testradiobindfailsipv PASS teststestradiodishcpp testradiobindfailsipv PASS teststestradiodishcpp testdishconnectfailsipv PASS teststestradiodishcpp testdishconnectfailsipv PASS teststestradiodishcpp testradiodishtcppollipv PASS teststestradiodishcpp testradiodishtcppollipv PASS teststestradiodishcpp testradiodishudpipv PASS teststestradiodishcpp testradiodishudpipv PASS Alarm clock real m s user m s sys m s Issue description With DEALER clients explicitly setting their ZMQROUTINGID a ROUTER sometimes sees an internally generated routing ID instead of the value set by the clients during handover Environment Centos Tested both libzmq and master at eb eac b b Additional test environments reported in my posting to the mailing list Minimal test code Steps to reproduce the issue Start server serv Start clients clientwrappersh servc c include stdioh include asserth include unistdh include stringh include zmqh define BUFSIZE int main void ctx zmqinit assertzmqctxsetctx ZMQBLOCKY void sock zmqsocketctx ZMQROUTER assertsock int val assertzmqsetsockoptsock ZMQLINGER val sizeofval val assertzmqsetsockoptsock ZMQROUTERMANDATORY val sizeofval assertzmqsetsockoptsock ZMQROUTERHANDOVER val sizeofval assertzmqbindsock tcp printfbound to n while usleep int more for int part more part char buf BUFSIZE memsetbuf sizeofbuf int bytes zmqrecvsock buf BUFSIZE assertbytes sizet morelen sizeofmore assertzmqgetsockoptsock ZMQRCVMORE more morelen First part should be routing id if part printfRAW MSG for int i i bytes i printf hhx buf i printf n printfMSG s n buf clientc c include stdioh include asserth include unistdh include stringh include zmqh int mainint argc char argv assertargc const char tag argv void ctx zmqinit assertzmqctxsetctx ZMQBLOCKY void sock zmqsocketctx ZMQDEALER assertsock int val assertzmqsetsockoptsock ZMQLINGER val sizeofval char routingid snprintfroutingid sizeofroutingid myroutingids tag assertzmqsetsockoptsock ZMQROUTINGID routingid strlenroutingid assertzmqconnectsock tcplocalhost printfsending first n char data x int bytes zmqsendsock data sizeofdata assertbytes sizeofdata sleep printfsending second n bytes zmqsendsock data sizeofdata assertbytes sizeofdata zmqclosesock zmqtermctx clientwrappersh sh binsh for i in seq do client i done sleep for i in seq do client i done wait Whats the actual result include assertion message call stack if applicable Usually the ROUTER sees the routing ID as set by the client eg RAW MSG d f e MSG myroutingid But sometimes it sees a generated routing ID RAW MSG b b MSG Whats the expected result I would expect to see only the routing IDs as set by the clients Please use this template for reporting suspected bugs or requests for help Issue description In using PGMpubsub pattern when the data size has more than some extentfrom hundreds of kb and mb the following problems happen From some point messages are not received anymore in zmqmsgrecv though the packets of messages are monitored to keep being received through Wireshark Each message is composed of parts The first part has fixed size of bytes The last part has variable size Sometimes a part of a message is lost and only a part of a message is received The receiver side of my program makes output in normal case like this first message part of size received second message part of size received first message part of size received second message part of size received first message part of size received second message part of size received But In some abnormal case first message part of size received second message part of size received first message part of size received second message part of size received first message part of size received second message part of size received Environment PCs with Intel CPUs each has differenct specsCPU RAM GPU Each PC is connected to switch hub with Gbps with Category cable libzmq version commit hash if unreleased cppzmq OS Linux Ubuntu Minimal test code Steps to reproduce the issue I append the test project You will see the problems following my instructions below Basically the test program runs in two different mode sender and receiver mode In both mode we give the time argument value in nanoseconds to control sendingreceiving rate For sender mode the arguments given to the program execution is the following TestBasicPublishGroupMessagingprogram name yindicating sender mode total sending count sending rate in nanoseconds For receiver mode the arguments given to the program execution is the following TestBasicPublishGroupMessagingprogram name nindicating receiver mode receiving rate in nanoseconds I have tweaked the relevant setting values such as ZMQRCVSNDHWM ZMQRATE ZMQRCVSNDBUF into the maximum values Whats the actual result include assertion message call stack if applicable For kb kb message size when receiver rate is per nanoseconds and the sender rate is per nanoseconds the first problem happens so frequently For kb kb message size when receiver rate is per nanoseconds and the sender rate is per nanoseconds the first problem happens so rarely For MB MB when receiver rate is per nanoseconds and the sender rate is per or nanoseconds the first problem happens so frequently I debugged zeromq code and it was seen that pgmrecvmsgv in receive method of pgmsockett does not get all packets of a message normally even if all packets had been monitored to be received normally in Wireshark For the second problem it happens in irregular and rare pattern So it is difficult to reproduce this problem But when I run in debug mode with the above message sizes I found that sparsely the data receipt is done in burst pattern I added a breakpoint on send methodnetworkDistributiongetPublishServicetryPublish in TestBasicPublishGroupMessagingcpp in sender side and repeated to resume the code with the breakpoint in sender side and watch what happens in receiver side step by step Sometimes after a message is sent in a sender side receive method of pgmsockett does not get all packets with byte unit sizeonly some parts received composing a message in receiver side Not yet received parts of the previous message are retrieved later together with the following messages in receive method of pgmsockett The second problem is frequently seen in this case How to build the project set the ZMQBASEDIR ZMQUSEDVER variable in CMakeListstxt depending on your environment move to the buildDebug or Release directory execute cmake DCMAKEBUILDTYPEDebug or Release the binary files are produced in the binDebug or Release TestGroupMessagingzip strtok is not threadsafe The uses of strtok in srcwsenginecpp must be replaced by strtokr Please use this template for reporting suspected bugs or requests for help Issue description The official script for Android is outdated it breaks when building for arm The CMakeListstxt does not have clear clue how to build for Android on macOS Environment libzmq version commit hash if unreleased OS Android on macOS Minimal test code Steps to reproduce the issue Install the latest Android Studio x with its bundled NDK r r Run zmq build scripts for Android Whats the actual result include assertion message call stack if applicable Compiler tests wont pass for configure Whats the expected result The project should build and generate Android libs 