Add an implementation of StringSubjectisEqualToString expected which will do diffing in the error message if the strings are not equal Our static dependency analysis tool detected an error on gwtuser used by comgoogletruthtruth Discussed with netdpb it seems that Truth declares unnecessary dependency Required only to build the gwt subartifact dependency groupIdcomgooglegwtgroupId artifactIdgwtuserartifactId scopeprovidedscope dependency Theres no gwt subartifact found under comgoogletruth Would you remove the dependency if not needed The API doc for the constructor says Constructor for use by subclasses If you want to create an instance of this class itself call checkthatactual However the check method it links to and the others I can see are protected so I cant call them either Wed like to use this code from our Kotlin tests can you please include it into Truth We could just add it to one of our internal libraries and use it However seeing as this code is being duplicated on many repos on GitHub it might make sense to include it in Truth Currently a minimal Truth Subject requires four operations a constructor an assertion method and two static methods for accessing the subject assertThat and a subject factory see extension page Would it be possible to autogenerate these methods and possibly accumulate all custom assertThat overloads in a single place to cut down the number or operations the developer has to add to a custom subject and encourage creating custom Subjects even if a single assertion method is needed For instance java AutoSubjectfactoryName employees public final class EmployeeSubject extends Subject private final Employee actual The constructor needs to be public if the class with assertThat might be outside of its package public EmployeeSubjectFailureMetadata failureMetadata NullableDecl Employee subject superfailureMetadata subject thisactual subject Userdefined test assertion SPI below this point public void hasNameString name checknamethatactualnameisEqualToname Will generate these two methods java Userdefined entry point public static EmployeeSubject assertThatNullableDecl Employee employee return assertAboutEMPLOYEESUBJECTFACTORYthatemployee Static method for getting the subject factory for use with assertAbout public static SubjectFactoryEmployeeSubject Employee employees return EMPLOYEESUBJECTFACTORY Boilerplate SubjectFactory for EmployeeSubject private static final SubjectFactoryEmployeeSubject Employee EMPLOYEESUBJECTFACTORY EmployeeSubjectnew As a new user of Truth I cant say if such implementations are common enough so that it makes sense to generate them There are also other considerations Visibility if there are subjects for packageprivate types in several packages the Truth wont be able to produce a single file with all assertions What shall it produce in this case a file per subject or per package Discoverability if Truth produces a single file with all assertions which might not always work it is trivial to import it knowing its name But if it generates multiple files it might be more difficult for the enduser to discover them which suggested generating the factory is likely related This is written in Kotlin and depends on kotlin runtime as a result however is designed to work cleanly from Java and its kotlin origins should not be paritcularly noticeable to the testwriting developer The tests handle single object testing via the Subject and list element comparisons using a Correspondence Field comparisons can be shallow or deep and can respect in the deep case declared equals methods or ignore them It also can handle reference cycles with caveats This is upstreamed from Square Inc and licensed under Apache Addresses Truth doesnt provide an AUTOMATICMODULENAME like comgoogletruth via its manifest PresentModulejava yields java PresentModulejava comgoogletruthtruth path truth jar name truth mode automatic automatic name source FILENAME api packages At least provide a more stable module name via Truths manifest Better provide a compiled module descriptor See also and linked friends RE We have these internally in TruthExhaustiveShortcuts and scattered through the classes in the truth subpackage but we havent published them for external users I believe that they all use Refaster which is available externally I see that weve been slow to publish other Refaster templates but hopefully the Truthspecific ones are both easier and more valuable than average Some types in the TruthJavaDoc are still linked to developersgooglecom URLs which are not accessible for the public Example In the JavaDoc for class LiteProtoTruth and method assertThat the link for parameter type MessageLight points to 