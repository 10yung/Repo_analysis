The diff isnt too clear on what changed so here you go Despite its name Despite its name usecases use cases Turned useFormikContext into a link Added line between text and warning Not sure if the was meant to make the text bold or not View rendered docsapiuseFormikmd Exposes the shouldValidate parameter from setFieldValue and setFieldTouched to useFields helpers object View rendered docsapiuseFieldmd I have a use case where Ive disabled validateOnChange but wanted to run the validations using only setValue in case of a Checkbox as it only calls onChange So Ive added the support for shouldValidate in FieldHelperProps ie setValue and setTouched Fixed Issue in this PR View rendered docsapiuseFieldmd Feature request Current Behavior The current behavior is to send relatively large chunks of information to the reducer For instance when dealing with an array of values the change is sent for the entire array HandleChange computes change when it instead it could be sent to the reducer Dispatch and state is in the same context Desired Behavior The desired behavior is to send smaller messages in order to let the reducer do the work Having dispatch and state in the same React context can if we believe this post impact performance Suggested Solution Send messages such as ARRAYPUSH ARRAYSWAP ARRAYMOVE ARRAYINSERT ARRAYREPLACE ARRAYUNSHIFT ARRAYREMOVE CHECKBOXFLIP That way ArrayHelpers could contain less state Split Formik React context into two parts Who does this impact Who is this for People who have very large forms using FieldArray Removing return values from array helpers could change the API slightly In order to avoid having an impact on people using specific parts of the FieldArray API you could have an alternate version with a slightly different API and a new name Describe alternatives youve considered Using a fork of Formik without regard for backwards compatibility that can be used alongside Formik Additional context Bug report Current Behavior isValid returns true when the form is just rendered ie not dirty as errors object is empty no errors Previous behavior isValid depended on isInitialValid when not dirty hence by default returned false Since isValid is meant to be used to make buttons and stuff disabled now this change has brought a change And provided there are too many instances of isValid in an application making the upgrade would require a lot of effort Suggested solutions Ideally a form should not be valid when rendered as it requires some user interaction at the very least Hence when the form is not dirty it should not be valid solutions Do not deprecate isInitialValid set isValid false when the form in not dirty But the user cannot change this behaviour so we may need something like setIsValid Also I think this deprecation detail should be added in the migrating docs I found out this inconsistency after the tests failed p Your environment PLEASE FILL THIS OUT Software Versions Formik x React TypeScript x Browser All npmYarn Both Operating System MacOS Feature request Current Behavior The helper object returned by useField contains a setTouchedisTouched method That method accepts only the intended isTouched boolean value and does not allow skipping validation while setting it Desired Behavior There is a shouldValidate parameter on formwide setFieldTouchedname isTouched shouldValidate method that allows skipping validation when updating this flag Would be great to have the equivalent shouldValidate parameter on the fieldspecific helper setTouched method Suggested Solution Seems like this would be a straightforward passthrough to add in the helper function here Ie could add the shouldValidate parameter to the arrow function and then passing it to the setFieldTouched method call Who does this impact Who is this for This would be handy for folks who are coding complex form inputs and are converting to use the useField hook Describe alternatives youve considered For now the workaround is to get form object via useFormikContext and use the setFieldTouched method on that Additional context No extra notes to add Thanks for all the amazing work on Formik Documentation Sorry if the format is wrong I just wanted to write my findings regarding the validationSchema prop I have an IBAN form input where I wanted to add a custom validation aka test jsx const schema object iban stringtestname false no message Formik validationSchemaschema In this example the form will submit ignoring the iban test Im not sure this is a bug in yup as using schemaisValid works fine Thanks for making Formik As per comments on here updated the signature of setError to take string instead of Value as param