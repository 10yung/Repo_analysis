 Version Info mybatisspring Problem I wanna register a DefaultEnumTypeHandler when creating bean sqlSessionFactory but if configLocation and configuration are both null the sqlSessionFacotry will rebuild and my settings are invalid Bean register code Bean public SqlSessionFactoryBean sqlSessionFactoryQualifierblogDataSource DataSource dataSource throws Exception SqlSessionFactoryBean factoryBean new SqlSessionFactoryBean factoryBeansetDataSourcedataSource if there is no configLocation or configuration factoryBeansetConfigurationnew orgapacheibatissessionConfiguration SqlSessionFactory factory factoryBeangetObject if null factory throw new ExceptionNo sql session factory found factorygetConfigurationgetTypeHandlerRegistrysetDefaultEnumTypeHandlerAutoEnumTypeHandlerclass return factoryBean Source code Method afterPropertiesSet will be called when getting the bean instance Then it will try to build a sqlSessionFactory Override public void afterPropertiesSet throws Exception notNulldataSource Property dataSource is required notNullsqlSessionFactoryBuilder Property sqlSessionFactoryBuilder is required stateconfiguration null configLocation null configuration null configLocation null Property configuration and configLocation can not specified with together thissqlSessionFactory buildSqlSessionFactory Here is the root cause targetConfiguration will be a new instance of Configuration when configLocation and configuration are both null Then the DefaultEnumTypeHandler will initialize and my settings turn invalid protected SqlSessionFactory buildSqlSessionFactory throws Exception final Configuration targetConfiguration XMLConfigBuilder xmlConfigBuilder null if thisconfiguration null targetConfiguration thisconfiguration if targetConfigurationgetVariables null targetConfigurationsetVariablesthisconfigurationProperties else if thisconfigurationProperties null targetConfigurationgetVariablesputAllthisconfigurationProperties else if thisconfigLocation null xmlConfigBuilder new XMLConfigBuilderthisconfigLocationgetInputStream null thisconfigurationProperties targetConfiguration xmlConfigBuildergetConfiguration else LOGGERdebug Property configuration or configLocation not specified using default MyBatis Configuration Here targetConfiguration new Configuration OptionalofNullablethisconfigurationPropertiesifPresenttargetConfigurationsetVariables Dear contributors Please consider providing an executable test case or an example project As Spring has many ways to setup it is really difficult for us to reproduce the problem just from some snippets Thank you very much for your contribution I recently tried to update spring from RELEASE to RELEASE and got this error WARN main No MyBatis mapper was found in comvividseatsskyboxmappers package Please check your configuration I have this in the configuration bean classorgmybatisspringmapperMapperScannerConfigurer property namebasePackage valuecomvividseatsskyboxmappers property namesqlSessionTemplateBeanName valuemasterSqlSessionTemplate bean Using mybatisspring version I was using SpringManagedTransactionFactory with Oracle to execute stored procedures successfully When I moved from Oracle to postgresql converted the oracle procedures to functions in postgresql its throwing unnamed portal error when I execute a function I extended the SpringManagedTransactionFactory to set autoCommit to false which works on getting result sets but this is not committing any data Tried setting commit directly the procedure and tried with sqlSession commit Both are not working bean idsqlSessionFactory classorgmybatisspringSqlSessionFactoryBean property namedataSource refdataSource property namemapperLocations valueclasspathmappersxml property nametransactionFactory bean classutilBesstManagedFactory bean classorgmybatisspringtransactionSpringManagedTransactionFactory property bean public class BesstManagedTransaction extends SpringManagedTransaction Override public Connection getConnection throws SQLException Connection connection supergetConnection connectionsetAutoCommitfalse return connection This is a design issue which is based on two considerations below Instantiating SqlSessionFactoryBean in a spring context causes MyBatis logging system to be initialized before any other MyBatis code This prevents MyBatis configuration setting to be applied at this time Which prompts more general question if invoking MyBatis logging system before any other MyBatis code was intended by design Consideration is actually a consequence of attempt to step out of implementation patterns for Spring framework extensions SqlSessionFactoryBean is an extension of Spring framework and not MyBatis framework thus usage of apache commons logging with all its drawbacks is prescribed Suggestion use Apache Commons Lgging in mybatisspring components that extend Spring framework Secne DB action sequence and My problems Detail I think after step the datasource SqlSession should not be stored in the thread Code SqlSessionUtilsregisterSessionHolder private static void registerSessionHolderSqlSessionFactory sessionFactory ExecutorType executorType PersistenceExceptionTranslator exceptionTranslator SqlSession session SqlSessionHolder holder if TransactionSynchronizationManagerisSynchronizationActive Environment environment sessionFactorygetConfigurationgetEnvironment if environmentgetTransactionFactory instanceof SpringManagedTransactionFactory if LOGGERisDebugEnabled LOGGERdebugRegistering transaction synchronization for SqlSession session holder new SqlSessionHoldersession executorType exceptionTranslator Key Point If transaction synchronization is active for the current thread sqlsession is binded to the thread I think this logic is wrong TransactionSynchronizationManagerbindResourcesessionFactory holder TransactionSynchronizationManagerregisterSynchronizationnew SqlSessionSynchronizationholder sessionFactory holdersetSynchronizedWithTransactiontrue holderrequested else As I mentioned in the code I think this logic is wrong Binding sqlsession to the thread should have the condition as there is transaction that corresponds to the current sqlsession in this thread Version Spring mybatisspring So I think this is a bug in mybatisspring and I dont know how to fix it See Ive met a problem when I hope my service method shouldnt be wrapped by a transactionBecause theres several http requests and the method took a long time to finish itself and then many threads hold the jdbc connections too long that my connection pool is empty and many CannotGetJdbcConnectionException were be thrown So I marked the method with Transactionalpropagation PropagationNOTSUPPORTED but it dosnt work I checked the SqlSessionTemplate and found that itll invoke SqlSessionUtilsregisterSessionHolder method to bind the SqlSession to TransactionSynchronizationManager if the TransactionFactory is implemented by SpringManagedTransactionFactory It only works well then my transaction propagation behavior is PropagationREQUIRED I bet So I think we should reimplement the SqlSessionTemplate and writer a MybatisTransactionManager to take the place of SqlSessionSynchronization Or if theres a better choice for me Hi Ive met an issue that the db record was updated but related cache still stale in some concurrent cases I dig into the source code find the implement of beforeCommit method in SqlSessionUtilsjava public void beforeCommitboolean readOnly Connection commit or rollback will be handled by ConnectionSynchronization or DataSourceTransactionManager But do cleanup the SqlSession Executor including flushing BATCH statements so they are actually executed SpringManagedTransaction will noop the commit over the jdbc connection TODO This updates nd level caches but the tx may be rolledback later on if TransactionSynchronizationManagerisActualTransactionActive try if LOGGERisDebugEnabled LOGGERdebugTransaction synchronization committing SqlSession thisholdergetSqlSession thisholdergetSqlSessioncommit This line will delete nd level cache catch PersistenceException p if thisholdergetPersistenceExceptionTranslator null DataAccessException translated thisholder getPersistenceExceptionTranslator translateExceptionIfPossiblep if translated null throw translated throw p I guess thisholdergetSqlSessioncommit should not be to executed in beforeCommit since it would delete the cache before db commit and it may cause the issue like I met FaceBook wrote a paper to explain that the right way should be delete the cache after commit So I guess maybe we can move thisholdergetSqlSessioncommit into afterCompletion to solve this problem Dear contributors Please consider providing an executable test case or an example project As Spring has many ways to setup it is really difficult for us to reproduce the problem just from some snippets Thank you very much for your contribution The Mockito is very popular mock library I will consider to use the Mockito instead of the Mockrunner Note The Mockito has been used already on some other projectsmybatis typehandlersjsr 