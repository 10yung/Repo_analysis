 Test pcache Failed sec Starting application hometravisbuildDynamoRIOdrmemorybuilddrmemorydbg testspcache Application hometravisbuildDynamoRIOdrmemorybuilddrmemorydbg testspcache Internal Error DynamoRIO debug check failure hometravisbuildDynamoRIOdrmemorydynamoriocorearcharchc codecommitendpc PAGESIZE vmcodegetexecutableaddrbyte code GENCODERESERVESIZE Error occurred frags version custom build nodynamicoptions logdir hometravisbuildDynamoRIOdrmemorybuilddrmemorydbg logsdynamorio clientlib hometravisbuildDynamoRIOdrmemorybuilddrmemorydbg bin debuglibdrmemorylibso batch callstackstyle x noresultstostderr nocheckuninitialized nocountleaks persistco x ffcb d x f ffcd fa x ffcb x f ffce e x ffcb x f ffce c x ffcb b x f ffce be x ffcb x f ffce b e x ffcb x f ffccc a x ffcb e x f ffcf e x ffcb f x f ffcf fada fuzzthreads on Xenial fails with an unaddr Error UNADDRESSABLE ACCESS beyond heap bounds reading x ebc x ebcc bytes within x ebc x ebcc libcso xf libcso x libcso IOputs xf b c libcso x f c printbuffer x dc fuzzthreads x dc threadmain x a e fuzzthreads xa e libpthreadso startthread xf c a libpthreadso x a buildglibcLK gWLglibc nptlpthreadcreatec libcso clone xf f e libcso xe e Note in thread Note next higher malloc x ebf x ebf Note refers to bytes beyond last valid byte in prior malloc Note prev lower malloc x ebb x ebc Note instruction mov eax ecx Note fuzz input for error is stored in file hometravisbuildDynamoRIOdrmemorybuilddrmemorydbg logsDrMemoryfuzzthreads fuzzfuzzthreads error dat This needs investigation For now Im making Travis green by adding to the wrapper list Upgrading Travis to Xenial ends up with these extra errors DrM unique total unaddressable accesses DrM unique total uninitialized accesses A bunch of unaddress which are all like this Error UNADDRESSABLE ACCESS beyond heap bounds reading x c x c bytes within x c x c libcso xf libcso x libcso getenv xf beefc libcso x defc testinginternalposixGetEnv x aaffb appsuitetests x ffb hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestincludegtestinternalgtestporth testinginternalBoolFromGTestEnv x a c appsuitetests x c hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestportcc staticinitializationanddestruction x aa ab appsuitetests x ab hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestdeathtestcc GLOBALsubIZN testing internal kStackTraceMarkerE x aa e appsuitetests x e hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtesttypedtestcc appsuitetests x bf appsuitetests x fbf Note in thread Note refers to bytes beyond last valid byte in prior malloc Note prev lower malloc x c x c Note instruction mov eax ecx Uninits are all like this Error UNINITIALIZED READ reading register eflags libcso xf libcso x libcso xf b libcso x libcso xf b da libcso x da libcso setlocale xf b libcso x StringTestsstrcasecmpTestTestBody x appsuitetests x a hometravisbuildDynamoRIOdrmemorytestsappsuitestrmemtestscpp testinginternalHandleSehExceptionsInMethodIfSupported x b appsuitetests x d hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testinginternalHandleExceptionsInMethodIfSupported x b appsuitetests x hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testingTestRun x cf appsuitetests x f hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testingTestInfoRun x d fa appsuitetests x fa hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testingTestCaseRun x dcc appsuitetests x cc hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testinginternalUnitTestImplRunAllTests x a d appsuitetests x ad hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testinginternalHandleSehExceptionsInMethodIfSupported x b appsuitetests x e hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testinginternalHandleExceptionsInMethodIfSupported x b a appsuitetests x a hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc testingUnitTestRun x a a appsuitetests x a hometravisbuildDynamoRIOdrmemorytestsappsuitethirdpartygoogletestsrcgtestcc main x beef appsuitetests x ef hometravisbuildDynamoRIOdrmemorythirdpartygoogletestsrcgtestmaincc Note in thread Note instruction jnb xf That line is this ASSERTEQres Ideally these would be investigated For now Im suppressing them Running on win with a VS built app using guardcf I see this DrM Error UNINITIALIZED READ reading x bad ff x bad ff bytes DrM strncnt minkernel crts ucrt src appcrt string strncntcpp DrM acrtLCMapStringAstat minkernel crts ucrt src appcrt locale lcmapstringacpp DrM acrtLCMapStringA minkernel crts ucrt src appcrt locale lcmapstringacpp DrM setSBUpLow minkernel crts ucrt src appcrt mbstring mbctypecpp DrM setmbcpnolock minkernel crts ucrt src appcrt mbstring mbctypecpp DrM setmbcpinternal minkernel crts ucrt src appcrt mbstring mbctypecpp DrM acrtinitializemultibyte minkernel crts ucrt src appcrt mbstring mbctypecpp DrM acrtexecuteinitializers minkernel crts ucrt src appcrt internal sharedinitializationcpp DrM scrtinitializecrt f dd vctools crt vcstartup src utility utilitycpp DrM scrtcommonmainseh f dd vctools crt vcstartup src startup execommoninl DrM KERNEL dllBaseThreadInitThunk DrM Note in thread DrM Note instruction cmp raxrcx x It looks like strnlen and probably has to be suppressed in the same way as a legitimate erroneous access Uf ff f ba cfguardstrncnt x minkernel crts ucrt src appcrt string strncntcpp ff f b bc cmp raxrdx ff f b je cfguardstrncnt x ff f c Branch cfguardstrncnt xb minkernel crts ucrt src appcrt string strncntcpp ff f b ffc inc rax cfguardstrncnt xe minkernel crts ucrt src appcrt string strncntcpp ff f ba c cmp byte ptr raxrcx ff f be f jne cfguardstrncnt x ff f b Branch cfguardstrncnt x minkernel crts ucrt src appcrt string strncntcpp ff f c c ret Branch Similar to I think but for a different version When running Dr Memory I get the following output DrM Dr Memory version DrM Running build Debug SingularityTrainerexe DrM Running on an unsupported operating system version WinVer Rel Build EditionCore Exiting to trigger autogeneration of system call information Rerun with ignorekernel to attempt to continue instead WARNING Running on an unsupported operating system version Attempting to autogenerate system call information drsysfindsysnumlibs C WINDOWS system ntdlldll is readable drsysfindsysnumlibs C WINDOWS system kernelbasedll is readable drsysfindsysnumlibs C WINDOWS system kernel dll is readable drsysfindsysnumlibs C WINDOWS system gdi dll is readable drsysfindsysnumlibs C WINDOWS system imm dll is readable drsysfindsysnumlibs C WINDOWS system user dll is readable drsysfindsysnumlibs C WINDOWS system win udll is readable drsysfindsysnumlibs C WINDOWS system ntdlldll is readable drsysfindsysnumlibs C WINDOWS system kernelbasedll is readable drsysfindsysnumlibs C WINDOWS system kernel dll is readable drsysfindsysnumlibs C WINDOWS system gdi dll is readable drsysfindsysnumlibs C WINDOWS system imm dll is readable drsysfindsysnumlibs C WINDOWS system user dll is readable drsysfindsysnumlibs C WINDOWS system win udll is readable Symbol cache directory is D Programs DrMemory drmemory logs symcache Fetching symbols for C WINDOWS system ntdlldll attempt Ignoring local NTSYMBOLPATH in next attempt Fetching symbols for C WINDOWS system ntdlldll attempt Ignoring local NTSYMBOLPATH in next attempt Failed to fetch symbols for C WINDOWS system ntdlldll error DrM WARNING application exited with abnormal code xc a Is it possible that DrMemory is not compatible with Visual Cs JMC switch Im getting a lot of UNADDRESSABLE ACCESS issues in CheckForDebuggerJustMyCode If thats a limitation I think it should be documented on Dr Memory is failing to report an unaddressable access for a small app with a deref of an uninitialized pointer on Mac On Linux its as expected releasesDrMemoryLinux bin drmemory aout DrM Dr Memory version DrM DrM Error UNADDRESSABLE ACCESS reading x x bytes DrM repair workdrmemorybugssegfaultnoerrorDEBUGMEcpp DrM main workdrmemorybugssegfaultnoerrorDEBUGMEcpp DrM Note in thread DrM Note instruction mov x rax rdx But on Mac the error is not reported The seg fault is to the same address x considering tobetranslated instr mov x rax byte rax SIGSEGV x xl x e a e accessing x signal interrupted app at xsp x ffee dcd in eventthreadexit Somehow its adding low addresses as app segments add new app segment for x x Context in eventbasicblocktag x TAG x L b c mov gs x byte ecx L c xor eax eax eax L f f b f lock cmpxchg ecx rdi byte eax rdi byte eax L f jnz x END x new basic block x dyldosnospinlocklock x wholebb scratch r rdxspill x r rbxspill x fastpath mov gs x byte ecx prop srcsz dstsz checkdef markdef checkunaddr fastpath xor eax eax eax prop srcsz dstsz checkdef markdef checkunaddr fastpath lock cmpxchg ecx rdi byte eax rdi byte eax prop srcsz dstsz checkdef markdef checkunaddr fastpath jnz x prop srcsz dstsz checkdef markdef checkunaddr wholebb scratch r used r used eflused in eventbasicblocktag x translating TAG x L b c mov gs x byte ecx L c xor eax eax eax L f f b f lock cmpxchg ecx rdi byte eax rdi byte eax L f jnz x END x wholebb scratch r rdxspill x r rbxspill x fastpath mov gs x byte ecx prop srcsz dstsz checkdef markdef checkunaddr fastpath xor eax eax eax prop srcsz dstsz checkdef markdef checkunaddr fastpath lock cmpxchg ecx rdi byte eax rdi byte eax prop srcsz dstsz checkdef markdef checkunaddr fastpath jnz x prop srcsz dstsz checkdef markdef checkunaddr wholebb scratch r used r used eflused eventrestorestate raw pc x d f xl pc x tag x translated eflags from x to x restoring perbb rdx to x restoring perbb rbx to x ffee dcc considering tobetranslated instr movzx rdx byte rbx add new app segment for x x The movzx is just a lazy shadow memory init fault However lldb is just a broken debugger it goes into an infinite loop and cant go past the fault making this a pain to debug I tried to build my own lldb with a fix for that but never got it to build in xcodethanks Apple for terrible debugger support drmemory detects any calls to stdcerr as a memory leak for example cpp include iostream using namespace std int main cerr example text return when compiling and running this with drmemory this is the following output drmemory visualstudio aexe Dr Memory version Running aexe example text Error POSSIBLE LEAK bytes replacemalloc d drmemorypackage common allocreplacec libgccsdw dll libstdc dll libstdc dll fu ZSt cerr drMemoryProblemcpp tmainCRTStartup KERNEL dllBaseThreadInitThunk ERRORS FOUND unique total unaddressable accesses unique total uninitialized accesses unique total invalid heap arguments unique total GDI usage errors unique total handle leaks unique total warnings unique total bytes of leaks unique total bytes of possible leaks valgrind on the other hand does not display any errors I am on windows if that helps provide any context Hello Thanks a lot for your work on Drmemory Im using msys mingw and Drmemory reports an error on every variablelength automatic array Example sizet count compute count int myarray count Drmemory reports UNADDRESSABLE ACCESS beyond top of stack My DrMemory failed With this dump Dr Memory version Running D projects trunk iccruntime bin Win Debug NimbusConfigexe debug drdebug Recorded suppressions from user C Program Files x Dr Memory bin suppressdefaulttxt Recorded suppressions from user D projects DrMemorysuppresstxt Application D projects trunk iccruntime bin Win Debug NimbusConfigexe Dr Memory internal crash at PC x bb Please report this at along with the results of running debug drdebug Program aborted xc x x bb x bb x x Base x b Registers eax x ebx x ecx x edx x a esi x edi x ea esp x e c ebp x e c eflags x Jul WinVer RelBuild EditionProfessional nodynamicoptions disasmmask logdir C temp DrMemory dynamorio clientlib C Program Files x Dr Memory bin release drmemorylibdll visualstudio suppress C Program Files x Dr Memory bin suppressdefaulttxt suppress D projects DrMemorysuppresstxt logdir C temp DrMemory symcachedir x e c x bb a x e ac x fa x e d x f c x e x fa b x e f x fd aa x eadc x facad x eb x fdca x eb x f x eb x d a x ebb x d a x ebd x d e x ebf x c b x ec x e a x ec c x a d x ecc x d f 