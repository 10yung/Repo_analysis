Apologies for lines diff Nose has not been maintained for years now and its currently broken Nose is out of the question because it doesnt support our test suite layout That only leaves raw unittest and pytest as alternatives Pytest was chosen mostly because it was easier to get it to work Once again my suggestion is to review each commit separately The first commit is just a simple switch from standalone mock to unittestmock Were testing on python because python doesnt have all that we need in its unittestmock Namely assertcalled is missing I didnt bump the requirement for python to in general because its not dead yet I know puremourning wishes to drop python completely so Im open for discussion The second commit is pretty boring and just replaces nosetoolseq and nosetoolsok with the equivalent hamcrest utilities rd commit is the big one It drops nose and introduces the dependency on pytest The differences include Theres no test yielding functionality Instead pytestmarkparametrize is used patchintroduced arguments are at the front not the back so we cant just catch them with args when we dont care Decorators need to be attached to footest not to functions that used to be yielded Decorators arent allowed to mess with arguments like SharedYcmd so they needed to be rewritten as pytestmarkparametrize calling a pytestfixture WithRetry and ExpectedFailure worked fine without any change Finally pytest complained about two deprecation warnings threadingThreadIsAlive is deprecated in and removed in in favour of threadingThreadisalive Hamcrest deprecated contains and introduced containsexactly Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Gets rid of a few warnings like Wdeprecated Wweakvtables Wsignconversion Wextrasemi Removes unused code Avoids operator on hash maps since not all implementaitons have the operator defined This brings us a little closer to using flat hash maps Removes the deprecated C and removed C stdbinaryfunction Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Pybind can handle being passed either bytes or str so we dont need to convert before calling a C API from python Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Python is finally nice enough to not get in the way of running valgrind with PYMALLOCmalloc The question is what should we run through valgrind Here are the options ycmcoretests which embeds the python interpreter Currently valgrind detects a leak in pybind ycmbenchmarks same comment as the above nose tests I havent tried this but valgrind will detect another leak in pybind Some combination of the above Currently the CI is running only a single benchmark from ycmbenchmarks binary CI is also complaining about a missing libsqlite dev package We probably should fix it even though the tests arent broken Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend Store all settings returned from the Settings function Allow extra conf to supply project directory This is useful at least for java with complex workspaces containing multiple project files For the output in debug info we could change to show all settings but for now lets keep it as it was before TODO Tests for other language server backends Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend The java completer was given the ability to modify the format configuration as a result of an issue in YouCompleteMe Id like to be able to use a similar solution using def Settings kwargs from the ycmextraconf The typescript completer has some thoughts on enabling the other features including loading from tsconfigjson Also moves RestartServer to the base class RFC because Im sure it can be polished more For example the serverstatemutex and serverinfomutex still exist Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend At present after both GoToDefinition and GoToDeclaration does jedis Scriptgotodefinitions which jumps for example from python classmethod def fcls pass f to some builtinspyi And from python somedecorator def f pass f to where somedecorator is defined I understand the second case is useful sometimes though there are when one doesnt care the decorators which I believe is even most cases but I couldnt really think of some practical use case of the first one Notice that jedi has a followimports parameter for gotoassignments which jumps to f in both cases so acts differently and is really useful So could we just switch GoToDeclaration back to gotoassignmentsfollowimportsTrue In particular the if addextraclangflags branch in PrepareFlagsForClang function in file ycmdycmdcompleterscppflagspy Otherwise the result when complete headers is super noisy when somebody uses g rather than clang on macOS Introduce a smartcase option to control query matching behavior When disabled use normal casesensitive matching otherwise retain the existing smart case functionality Set the default to true to maintain compatibility Global option gsmartcase controls this behavior from vim defaulting to Motivation The default smart case behavior may not always be wanted Ive included an example based on some C code that uses a naming convention like so for subsystem foo Register contents are defined like so define FOOCONSTANT Function names are lowercased void foodosomething The default smart case matching can be too noisy with limited utility img width altsmartcaseenabled src With smartcase lowercase completion img width altsmartcasedisabledlower src With smartcase uppercase completion img width altsmartcasedisabledupper src Reviewablestart This change is img src height alignabsmiddle altReviewable Reviewableend 