 What would you like to discuss Is there a way to send a request body in a DELETE request Similar to but specific to a DELETE request This was possible in got like so js goturl method DELETE json true body version But attempting this in got does not transmit a request body js goturl method DELETE responseType json json version I attempted to use json and body via JSONstringify with and without specifying a ContentType applicationjson header Am I doing it wrong I dont see any mention of this change in the v release notes This best I can find about this in any RFC is here A payload within a DELETE request message has no defined semantics sending a payload body on a DELETE request might cause some existing implementations to reject the request which does not seem to expressly forbid it Checklist x I have read the documentation Export the ReadError to align the library interface with the documentation allow library consumers to do instanceof checks on that kind of errors Not sure if you want to cover this with some extra test Just let me know Checklist x I have read the documentation x I have included a pull request description of my changes I have included some tests If its a new feature I have included documentation updates Describe the bug Nodejs version v OS version Linux pc MANJARO SMP PREEMPT Wed Dec UTC x GNULinux gotstream stream emits finish before error in case of ECONNREFUSED The finish event should be used to signal that all data has been writtensent once streamend has been called Actual behavior streampipeline promise is resolved Expected behavior streampipeline should be rejected with ECONNREFUSED Code to reproduce This code js const fs requirefs const util requireutil const stream requirestream const pipeline utilpromisifystreampipeline const got requiregot async function run await pipeline Read small file fscreateReadStreamprocversion Generates ECONNREFUSED gotstreamput runthen consolelogdone catcherr consolelogerr err Prints done It seems that this is because streampipeline considers the data handled if the finish event is received To isolate the issue I wrote another small test js const got requiregot const u gotstreamput uonerror err consolelogerr new Date err uonend consolelogend new Date uonclose consolelogclose new Date uonfinish consolelogfinish new Date const writeSomeMore uwritetest consolelogwriteSomeMore writeSomeMore uend Which prints writeSomeMore true finish T Z err T Z GotError connect ECONNREFUSED at onError nodemodulesgotdistsourcerequestaseventemitterjs at handleRequest nodemodulesgotdistsourcerequestaseventemitterjs at processTicksAndRejections internalprocesstaskqueuesjs at TCPConnectWrapafterConnect as oncomplete netjs name RequestError code ECONNREFUSED Note that if I read devurandom instead of procversion the streampipeline promise is rejected Checklist x I have read the documentation x I have tried my code with the latest version of Nodejs and Got Describe the bug Nodejs version OS version Arch Linux Linux arch When a url given to the gotpost gotget functions is incorrect AND the function is followed with a json this error is thrown TypeError gotpostjson is not a function Actual behavior Error is thrown see above Expected behavior Throw HTTP Error Not found Code to reproduce js function test return gotgetundefined test Checklist x I have read the documentation x I have tried my code with the latest version of Nodejs and Got Describe the bug Nodejs version x and x OS version AWS Lambda Got This might not be caused by Got but occurs when using Got in combination with AWS XRay on AWS Lambda Note Got works fine with the provided snippet I also opened an issue on the awsxraysdknode repository Actual behavior Whenever XRay capture is enabled the lambda doesnt return any response and the actual request is made against Subsequent executions take longer and longer even up to minutes until finally one execution will show a bunch of LAMBDARUNTIMEERROR Expected behavior Get contents of googlecom and return the specified response body ok Code to reproduce js requireawsxraysdkcorecaptureHTTPsGlobalrequirehttps const got requiregot export async function handler await gotget return statusCode body ok Checklist x I have read the documentation x I have tried my code with the latest version of Nodejs and Got Lambda only supports up to Nodejs Describe the bug Using gotpost with both body and cache options causes an exception Nodejs version OS version Fedora got version Actual behavior GotError Cannot read property on of undefined at onError usrsrcnpmfailuresgottestnodemodulesgotdistsourcerequestaseventemitterjs at EventEmitterhandleRequest usrsrcnpmfailuresgottestnodemodulesgotdistsourcerequestaseventemitterjs at destroyer internalstreamspipelinejs at internalstreamspipelinejs at Arraymap anonymous at pipeline internalstreamspipelinejs at internalutiljs at new Promise anonymous at pipeline internalutiljs at EventEmitterhandleRequest usrsrcnpmfailuresgottestnodemodulesgotdistsourcerequestaseventemitterjs at ObjectonceWrapper eventsjs at EventEmitteremit eventsjs name RequestError Expected behavior No exception Unsure if optionscache should do anything in this case or be ignored For my own use that does not matter as the server Im really working with never provides cachable responses to POST requests Really the goal for me is to be able to use a shared base options object and not have to censor the cache option when performing posts Code to reproduce js usrbinenv node use strict const got requiregot async function main await gotpost body cache new Map maincatcherror consoleerrorerror processexit Checklist X I have read the documentation X I have tried my code with the latest version of Nodejs and Got At this moment to be able to correctly define got methods as dependencies we need to import the module into type declaration files typescript import got from got interface Dependencies readonly get typeof gotget with introduced changes we can simply do as so typescript import GotFunctions from got interface Dependencies readonly get GotFunctions Checklist x I have read the documentation x I have included a pull request description of my changes What would you like to discuss Hi we are using got heavily in my company to send several thousand requestss so Im doing some profiling to see in which places our app spends its time the most Ive recently upgraded to Got and Ive seen that the library spends a significant though not alarming percentage of the time in the normalize arguments phase which at the same time calls the aforementioned merge function img width altCaptura de pantalla a las src It looks like this single slice call to clone the array seems to spend quite a lot of time So my question is do we really need to clone the array or could it be just referenced If we need a copy is slice the fastest method I tried in Chrome and it seems that therere faster not so much tbh alternatives Checklist x I have read the documentation If you do gotstreamurl body stream options it may throw Got s stream is not writable when the body json or form option is used even though you dont do write on it Describe the bug Nodejs version OS version gotmergeOptions isnt merging instances of URLSearchParams According to the README is should merge them Actual behavior It looks like later instances of URLSearchParams just overwrite earlier values see code sample Expected behavior It should merge the two URLSearchParams instances Code to reproduce js const got requiregot gotmergeOptions searchParams new URLSearchParams foo searchParams new URLSearchParams bar searchParams URLSearchParams bar Checklist x I have read the documentation x I have tried my code with the latest version of Nodejs and Got I think some code got deleted in mergets got moved Before the move it had code to deal with instances of URLSearchParams After the move its missing the code to handle URLSearchParams 