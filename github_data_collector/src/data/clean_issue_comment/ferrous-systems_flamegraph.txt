Is there a set of things that need to be implemented before the next release Just asking cause Im installing via git so I can get features not yet published to cargo ie bench So far Im really enjoying flamegraph Its a better solution than what Id cobbled together on my own However I have a bit of a problem mymachinebusywork me sudo cargo flamegraph Compiling busywork v UsersmeDocumentsCoderustResearch and Developmentbusywork Finished release optimized targets in s WARNING building without debuginfo Enable symbol information by adding the following lines to Cargotoml profilerelease debug true dtrace system integrity protection is on some features will not be available dtrace failed to execute UsersmeDocumentsCoderustResearch No such file or directory failed to sample program The project path is UsersmeDocumentsCoderustResearch and Developmentbusywork and so it looks like arguments are being supplied wrong here For good measure I installed the latest according to and Im still seeing the issue It seems the command perf also dtrace is hardcoded and should be contained in PATH If perf is installed anywhere else we need to modify PATH before running it which is not a good way and may break other programs Related Im receiving this error error within an ubuntu container running on a VM Virtualbox atop MacOS Mojave via multiple runs on and the current gitmaster version shell cargo flamegraph binskeleton fileskeletontoml Then everything runs as expected but then shell perf record Woken up times to write data perf record Captured and wrote MB perfdata samples writing flamegraph to flamegraphsvg thread main panicked at unable to generate a flamegraph from the collapsed stack data IoCustom kind InvalidData error No stack counts found srclibcoreresultrs Seemingly related to but this is now within a container on a VM instead Thanks Hey I wanted to use flamegraph for some tests which seems to have been added in however I think the most recent release was cut before this PR was merged Could you release a new verison please bash perf version perf version bash rustc version rustc ea bash perf record Woken up times to write data perf record Captured and wrote MB perfdata samples perf Segmentation fault Obtained stack frames usrliblinuxtools genericperf x b x d c f b libx linuxgnulibcso x f x fb b f usrliblinuxtools genericperf x fafbc x d c fd fbc usrliblinuxtools genericperf x d f x d c f f usrliblinuxtools genericperf x b x d c f b usrliblinuxtools genericperf x fb x d c f fb usrliblinuxtools genericperf x df x d c f e df usrliblinuxtools genericperf x b x d c e usrliblinuxtools genericperf x fb x d c efefb usrliblinuxtools genericperf x e x d c e a libx linuxgnulibcso libcstartmain xf x fb c e usrliblinuxtools genericperf x e d x d c e a d failed to sample program Hello Sometimes it happens that Ive already gathered the perfdata or that I want to pass additional options to perf like tuning the events if I want to see eg flamegraph of branch misses not total runtime In such cases I think it would be nice if cargo flamegraph or flamegraph could process the already existing data instead of insisting on running the binary again and profiling it once more Would it be possible to add some kind of existing perfdata or whatever the file is for other profilerssystems I know theres inferno and that I can build the graph myself but using it seems to be a multistep process I kind of like the easytouse nature of flamegraph Thank you My program work with envionment variables but its seems like it cannt find them when I run flamegraph so how can i pass all the envionment variables to my program And Im working with MacOS This option is viable on Haswell or later Intel platforms It is much lower overhead while profiling generates more compact perf data and is much quicker to collapse and generate flame graphs The downsides is that it has limited stack depth does not work on major cloud providers and some others listed at and Would you be interested in a change like this Im also happy to make it configurable by env var of flag if you provide some guidance