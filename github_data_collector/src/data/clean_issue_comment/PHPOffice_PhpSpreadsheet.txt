Summarizing MATCH with a static array should return the position of the found value based on the values submitted Returns NA unless the element searched for is at the end of the array The problem is in Calculationphp line if isarrayfunctionCall foreach args as arg arg FunctionsflattenSingleValuearg unsetarg I believe this code is intended to handle functions where PhpSpreadsheet just passes the call on to PHP without implementing the code on its own eg for atan or acos In the bug report the following code fails flatrate MATCH sheetgetCellA setValueflatrate The expected value is but the actual result is NA The reason for this result is that the parser replaces the braces with calls to the MKMATRIX internal function whose value for functioncall was selfMKMATRIX Since this isnt an array the flattening code is executed and the unintended result occurs The fix is to change the definition for functioncall in that case to CLASS mkMatrix avoiding the flattening However there is also another part to this bug The flattening should be returning the first entry in the array but is in fact returning the last This explains why the bug report specified unless end of the array I confirmed that Excel does use the first item in the array rather than the last eg atan entered into a cell will return atan not atan The problem here is that flattenSingleValue which says in its comments that it is supposed to be returning the first item uses arraypop rather than arrayshift I have changed that as well The same mistake was also present in Cellphp function getCalculatedValue The correct behavior can be verified by entering minverse into an Excel cell Excel flattens the result to and so should PhpSpreadsheet This is x a bugfix a new feature Checklist x Changes are covered by unit tests x Code style is respected x Commit message explains why the change is made see CHANGELOGmd contains a short summary of the change Documentation is updated as necessary Why this change is needed Bugfix as described This is x a bug report a feature request not a usage question ask them on or What is the expected behavior Get the calculated value in the provided testxlsx What is the current behavior error PhpOffice PhpSpreadsheet Calculation Exception bA Invalid cell coordinate A What are the steps to reproduce php php require DIR vendorautoloadphp xlsx PhpOffice PhpSpreadsheet IOFactoryloadtestxlsx xlsxgetSheetByNamebgetCellA getCalculatedValue testxlsx I did not find online how to add entry in the Name Manager with PhpSpreadsheet but the provided file is just sheet a A sheet b A vartest and in Formulas Name Manager I created entry with Name vartest Refers to aA Which versions of PhpSpreadsheet and PHP are affected PHP PhpSpreadsheet This is a bug report x a feature request not a usage question ask them on or What is the expected behavior When a row is manually resized in an Excel file an attribute customHeight is added to the row This attribute should be available when reading an Excel file What is the current behavior Said attribute is not considered during read operation However writer code has the attribute set when applicable What are the steps to reproduce File with rows st row has automatic height nd was manually resized customHeightxlsx NOTE This file was created using LibreOffice Im Linux only right now and hence attribute shows up as customHeighttrue MS Excel generated files have customHeight Which versions of PhpSpreadsheet and PHP are affected Latest phpofficephpspreadsheetsrcPhpSpreadsheetReaderXlsxColumnAndRowAttributesphp readRowAttributes This is X a bug report a feature request not a usage question ask them on or What is the expected behavior Write decimal numbers like on a table What is the current behavior The number is writen like and was formated as string What are the steps to reproduce This error occurs only on countries that use comma as a decimal separator onlu to wtite a xlsx file When the version was writen a decimal problem with a dot as a separator was solved at PhpSpreadsheetWriterXlsxWorksheetphp line but at countries that use a comma like Brazil or some european countries the decimal number comes with a wrong formatation To solve I had to use the version on my composer file To replicate the bug set comma as a decimal separator and dot as thousand separator on your OS Please provide a Minimal Complete and Verifiable example of code that exhibits the issue without relying on an external Excel file or a web server php php require DIR vendorautoloadphp Create new Spreadsheet object spreadsheet new PhpOffice PhpSpreadsheet Spreadsheet add code that show the issue here spreadsheet setCellValue formated as number Other error like this Which versions of PhpSpreadsheet and PHP are affected PhpSpreadsheet This is x a bugfix a new feature Checklist Changes are covered by unit tests No Removed code that was never covered in tests and shouldnt have been there in the first place Nothing to test x Code style is respected x Commit message explains why the change is made see x CHANGELOGmd contains a short summary of the change x Documentation is updated as necessary no not necessary Why this change is needed As noted in there was some test code left in the calculationphp file This would only show up on larger files so it hasnt been prevalent but it should be removed There are no references to the constants being set Even if they were its bad practice to set constants in code Here its in a loop and also in a simple ifelse block This is a bug report a feature request not a usage question ask them on or What is the expected behavior I have an Excel file and insert data to it with phpspreadsheet after inserting and writing the excel file I hope cell width is same between original file and generated file What is the current behavior after inserting and writing the excel file cell width is different with original file this is original file syanaikensachecksheetxlsx this file cell width is px img width altScreen Shot at src this excel file is saved via phpspreadsheet syanaikensachecksheetsendxlsx and this file cell width is px img width altScreen Shot at src I dont understand why it became smaller source this is my part of source code php load file type IOFactoryidentifyfile reader IOFactorycreateReadertype sheet readerloadfile set value activeSheetsetCellValuecell data write file tmp storagepathtmp uniqid put botexcelfilename writer new XlsxWritersheet writersavetmp Which versions of PhpSpreadsheet and PHP are affected See This is x a bug report a feature request not a usage question ask them on or What is the expected behavior The character should be removed from the filter range What is the current behavior The setRange method of the XlsxAutoFilter class expects a filter range format like A E The returned value from thisworksheetXmlautoFilter ref could contain and returning a value like A E Which versions of PhpSpreadsheet and PHP are affected This is x a bug report a feature request not a usage question ask them on or What is the expected behavior The character should be removed from the filter range What is the current behavior The setRange method of the XlsxAutoFilter class expects a filter range format like A E The returned value from thisworksheetXmlautoFilter ref could contain and returning a value like A E Which versions of PhpSpreadsheet and PHP are affected This is x a bug report a feature request not a usage question ask them on or What is the expected behavior A reader should read the data as it is All data should be converted correctly without loss of precision What is the current behavior Numbers are converted losing precision The number for example gets changed to What are the steps to reproduce Please provide a Minimal Complete and Verifiable example of code that exhibits the issue without relying on an external Excel file or a web server php php require DIR vendorautoloadphp Create new Spreadsheet object spreadsheet new PhpOffice PhpSpreadsheet Spreadsheet add code that show the issue here spreadsheet readerloadyourexcelxlsx spreadsheet thisspreadSheetPreparationForWritespreadsheet writer new PhpOffice PhpSpreadsheet Writer Csvspreadsheet writersetSheetIndex writersavesavedascsv Which versions of PhpSpreadsheet and PHP are affected When freeze pane is in use on a worksheet PhpSpreadsheet saves to Xlsx in such a way that the active cell is always set to the top left cell below the freeze pane I find it difficult to understand why You have given users the setSelectedCells function but then choose to ignore it Excel itself does not act in this manner PHPExcel did not act in this manner PhpSpreadsheet when writing to Xls does not act in this manner This is especially emphasized because the one test in FreezePaneTest which would expose the difference is the only test in that member which is not made for both Xls and Xlsx It is really useful to be able to open a spreadsheet anywhere even when it has header rows Rather than create regression problems by changing this behavior all the time I instead introduce a new method setActiveCellAnywhere to WriterXlsxWorksheet to control it via a private variable with the default false being the current behavior When it is set to true the active cell is left as the user intended The documentation is updated to describe the new method New tests are added and the Xlsxonly test is changed to test both Xls and Xlsx This is a bugfix x a new feature Checklist x Changes are covered by unit tests x Code style is respected x Commit message explains why the change is made see CHANGELOGmd contains a short summary of the change x Documentation is updated as necessary Why this change is needed As described above add the ability to open a worksheet anywhere even when freeze pane is used 