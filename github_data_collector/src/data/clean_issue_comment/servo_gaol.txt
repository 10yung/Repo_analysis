Is there any technical reason for gaol to provide its own Command abstraction over using whats available in stdprocessCommand The biggest functional difference I noticed is that the gaol provided Command uses execve to specify the environment on the spawned process while stdprocessCommand uses execvp Despite this difference however stdprocessCommand also allows for the command environment to be set with the env and envs methods Is there any particular barrier preventing gaol from switching wholesale to the std implementation I ask because there are some useful crates eg tokioprocess which directly accept or implement extra traits on top of stdprocessCommand and it would be quite nice to use gaol with these libraries Hello i am wondering if it is possible to isolate an external command using gaol i tryed something like this rust fn handlechild let cmd envargsskip nextexpectcmd let args envargsskip mapv vtostringcollectVec println cmd args ChildSandboxnew profileactivateunwrap stdprocessCommandnew cmd args args stdinStdioinherit stdoutStdioinherit spawn expectcommand failed fn main if envargsskip nextissome envargsskip nextexpect child return handlechild println let sandbox Sandboxnew profile let args envargsskip mapv vtostringcollectVec let res sandboxstart Commandmeunwrap argchild argusrbintrue args args unwrapwait i dont want to give the child the ability to run stdprocessCommandnew cmd thanks for any kind of help Per we may need to go looking for another mechanism if we want to maintain sandboxing on macOS If one takes a relative path the path protection does not work Using the given example Just change the file access to match Fileopen PathBuffrombinsh will show this behavior After spawning a jailed subprocess its current working directory is unchanged so it can actually be outside the subprocess sandbox which I believe means it can access files outside the sandbox This is bad im trying to use gaol to sandbox a fuzzer for ion githubcomredoxosion im new to sandboxing and fuzzing so bear with me anyway heres the full stacktrace pastebin the fun parts are main panicked at assertion failed unshareCLONENEWUSER CLONENEWPID and main panicked at assertion failed libcreadpipefds mut grandchildpid as mut i as mut cvoid memsizeofpidt as sizet memsizeofpidt as ssizet im a little hazy on what a namespace is supposed to be in this context ive seen other threads that say that i need a kernel compiled with certain flags ive seen threads from that reference this same stacktrace but with no solution the crash happens when i call sandboxstartcommand im unable to match the result it just fails the assertions and closes my kernel Linux dirt amd SMP Debian x GNULinux ive also testing this on arch linux with the latest kernel i can grab that too if itll help but im away from that machine i cant reproduce the error on my macbook however Darwin mymacbook Darwin Kernel Version Sun Jun PDT rootxnu RELEASEX x i would just run it on my macbook but aflrs has an issue with mac that hasnt been resolved i may be stuck in an xy problem any help is appreciated glibc switches from using open to openat And now everyone on earth with a seccomp filter gets to update it I have two needs not currently supported by gaol I want to run code in the child process after forking but before the sandbox is in place eg to run prctlPRSETPDEATHSIG and to set up stdio redirection I want to activate the sandbox before exec because I dont control the execed binary I only need this to work on Linux I think these should be supported by providing hooks similar to stdosunixprocessCommandExtbeforeexec Ive named them beforesandbox and beforeexec On Linux a beforeexec hook can call ChildSandboxactivate and do extra setup work after entering the sandbox if desired eg configuring the new namespaces To get this to work I had to fix a number of bugs and other issues In particular to test that ChildSandboxactivate works in beforeexec I had to make it possible to start a glibcbased process in the Linux sandbox which meant adding OperationCreateNewProcesses and whitelisting some more system calls I also had to make substantial fixes the error handling in Linuxs start The Mac support doesnt propagate errors from beforesandboxbeforeexec because I didnt want to try to write that code without being able to test it FYI there is some crates implementing AppContainer appjaillauncherrs and flyingsandboxmonster cc yying 