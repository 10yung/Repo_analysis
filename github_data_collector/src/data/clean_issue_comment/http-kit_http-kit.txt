There is a new delayed Var called defaultclienthttps Using this instead of the standard defaultclient will make your client object behave like URLopenStream which i think is desirable Addresses at the very least on Java error error cause exceed max line via type orghttpkitLineTooLargeException message exceed max line at orghttpkitLineReader readLine LineReaderjava trace orghttpkitLineReader readLine LineReaderjava orghttpkitclientDecoder readHeaders Decoderjava orghttpkitclientDecoder decode Decoderjava orghttpkitclientHttpClient doRead HttpClientjava orghttpkitclientHttpClient run HttpClientjava Id like to propose a feature for parity with cljhttp the ability to ignore certain hosts via the proxyignorehosts variable if set thisll trigger a simple regex to ensure that we dont pass the URL through the proxy Any issues with this It seems fairly straight forward to implement unless Im missing something Im willing to implement just checking if theres a problem before hand Java verison openjdk version OpenJDK Runtime Environment build OpenJDK Bit Server VM build mixed mode sharing Lein version Leiningen on Java OpenJDK Bit Server VM httpkit versions alpha I expect the request to succeed but return status instead it blows up with a Timeout Exception I was trying to find a fix any pointers on best places to start Here is a minimal example ns appcore require orghttpkitclient as http defn options body timeout body body defn createresource requestbody httppost options requestbody defn main args let testresp createresource foo println testresp LibraryJavaJavaVirtualMachinesopenjdk jdkContentsHomebinjava DfileencodingUTF XXOmitStackTraceInFastThrow DclojurecompilepathUserskellieenglishwonderkindapptargetclasses Dappversion SNAPSHOT Dclojuredebugfalse javaagentUserskellieenglishApplicationsIntelliJ IDEA CEappContentslibideartjar UserskellieenglishApplicationsIntelliJ IDEA CEappContentsbin classpath UserskellieenglishwonderkindapptestUserskellieenglishwonderkindappsrcUserskellieenglishwonderkindappdevresourcesUserskellieenglishwonderkindappresourcesUserskellieenglishwonderkindapptargetclassesUserskellieenglishm repositoryorgclojureclojure clojure jarUserskellieenglishm repositoryorgclojurespecalpha specalpha jarUserskellieenglishm repositoryorgclojurecorespecsalpha corespecsalpha jarUserskellieenglishm repositoryhttpkithttpkit httpkit jarUserskellieenglishm repositorynreplnrepl nrepl jarUserskellieenglishm repositoryclojurecompleteclojurecomplete clojurecomplete jar clojuremain i privatevarfoldersdddn rwdy z tr lp vzvh gnTforminit clj Thu Aug CEST clientloop ERROR select exception should not happen javalangIllegalStateException ClientServer mode has not yet been set at javabasesunsecuritysslSSLEngineImplbeginHandshakeSSLEngineImpljava at orghttpkitclientHttpClientfinishConnectHttpClientjava at orghttpkitclientHttpClientrunHttpClientjava at javabasejavalangThreadrunThreadjava Thu Aug CEST clientloop ERROR select exception should not happen javalangIllegalStateException ClientServer mode has not yet been set at javabasesunsecuritysslSSLEngineImplbeginHandshakeSSLEngineImpljava at orghttpkitclientHttpClientfinishConnectHttpClientjava at orghttpkitclientHttpClientrunHttpClientjava at javabasejavalangThreadrunThreadjava opts timeout body foo method post url error error cause idle timeout ms via type orghttpkitclientTimeoutException message idle timeout ms at orghttpkitclientHttpClient clearTimeout HttpClientjava trace orghttpkitclientHttpClient clearTimeout HttpClientjava orghttpkitclientHttpClient run HttpClientjava javalangThread run Threadjava Process finished with exit code Hello I found this PR that is eerily similar but had no resolution for what Im about to ask The problem I am seeing is this error close handler exist and you can see it is thrown here At first it seemed to be random but now Im realizing it may be load related This started happening when I introduced websocket handlers because I wanted a different close handler for websockets I think the problem is possibly around channel reuse or pooling and when I set the close handler function in withchannel it throws because its actually using a channel that already has a handler And more specifically only seems to be an issue with lots of requests which made me think of pooling or reuse Typically one wouldnt need to change the close handler on a case by case basis especially given a typical server setup with handlers however when you introduce websockets it begins to have some validity With that being said IF this is an issue with pooling of channels is there a way to separate those pools between websocket true requests and vice versa Or perhaps there is a more creative solution or configuration Im not aware of Thanks Hi Is there a way to get the current queue depth of the HTTP server the number of requests waiting in queue that we havent started processing The use case is monitoring using this number to respond with Too many requests to pushback clients in case were having issues in a service Also the time a requests waits in queue until it starts getting processed is an interesting number Id like to be able to receive Thanks in advance for any help Been working on the backend too long Now trying to update my senteboot example and running headlong into a dependency issue methinks with httpkit My buildboot file is located here Below is the error Any help would be appreciated Bill clojurelangExceptionInfo clojurelangIFn data file org httpkit serverclj line javalangNoClassDefFoundError clojurelangIFn javalangClassNotFoundException clojurelangIFn clojurecoreloadfn coreclj clojurecoreloadinvokeStatic coreclj clojurecoreload coreclj I might be wrong about this so Im double checking before submitting a fix When successfully reusing a connection from the keepalives cache it doesnt look like the request updates its isConnected and timeoutTs fields like it does after connecting for the first time in the setConnected method This seems like a bug which could cause unwanted consequences in clearTimeout in which we use the wrong timeout as defined in request params and the wrong error message It looks like httpkit automatically sets acceptencoding to gzip deflate and it automatically decompresses the data If say I wanted to download a remote gzipped resource but receive it as gzipped without the automatic decoding how do I go about that Thanks Weve been having some problems dealing with shutdown of httpkit at CircleCI here is a quick and dirty patch that we are testing presently Im opening this PR to get some feedback and share what we are up to I dont have any expectation of this being merged as is Shutdown more gracefully in the presence of HTTP keep alives A two phase approach keep track of the currently keptalive connections in a set so that we can close them when we are shutting down Set a boolean flag true when we are shutting down so that we can use it to force isKeepAlive to false when shutting down Bonus Features Change the error message in RingHandlerjava to be correct when the ExecutorService is being shutdown This error message happens when the server is overloaded and when it is being shutdown Add logging to the empty catch blocks in HttpServerjava