Currently PullImagesTimeout StartContainersTimeout and StopContainersTimeout timeouts are enforced by Awaitready Awaitresult eg When the timeout expires however the Futures body code keeps running even if the TimeoutException has been raised As an example run this code in a Scala REPL scala AwaitreadyFuture Threadsleep printlnBOOM second The result is that the exception is raised and yet BOOM is printed javautilconcurrentTimeoutException Futures timed out after second scalaconcurrentimplPromiseDefaultPromisereadyPromisescala scalaconcurrentimplPromiseDefaultPromisereadyPromisescala scalaconcurrentAwaitanonfunready applypackagescala scalaconcurrentAwaitanonfunready applypackagescala scalaconcurrentBlockContextDefaultBlockContextblockOnBlockContextscala scalaconcurrentAwaitreadypackagescala ammonitesesscmd initcmd sc ammonitesesscmd clinitcmd sc BOOM This means that as we try to stop the containers in afterAll We might still be trying to start them in a separate thread This PR introduces timeout parameters in DockerCommandExecutor methods which propagates down to the implementations of this interface There it replaces Futureapply factory invocation with PerishableFutureapply It also adds PerishableFuture factory which makes sure the body gets interrupted when the timeout expires scala case finiteTimeout FiniteDuration val promise Promise T val futureTask new FutureTask T new Callable T override def call T body override def done Unit promisetryComplete TrygetrecoverWith case CancellationException Failurenew TimeoutException val reaperTask new TimerTask override def run Unit futureTaskcanceltrue promisetryFailurenew TimeoutException timerschedulereaperTask finiteTimeouttoMillis ecexecutefutureTask promisefuture If the passed timeout is DurationInf it just doesnt timeout so it uses standard Future factory scala case Futureapplybody These changes should improve host resources usage and pave the way to more advanced timeouts customization Updated missing config fields in readme DockerExecutor allows to remove containers It would be useful if it also allowed pausingunpausing or starting stopped containers a stopContainer method already exists but it doesnt have a corresponding startContainer One use case for this is testing behaviors triggered when external dependencies are unavailable Im new to Docker so forgive my ignorance but Im struggling to understand what these directions are telling me to do According to this you simply need to set that environment variable for DOCKERHOST and all unit tests should then run just fine but on a fresh install of Docker for Lubuntu it isnt immediately obvious what that value should be set to and the value specified in the readme didnt seem to work for me ie unit tests were failing to connect to postgres Digging into this issue further I eventually got the postgres scalaTests for this repo passing by first configuring systemd as follows I created a file etcsystemdsystemdockerserviceddockerconf in that file I put in order to match the host specified in the readme Service ExecStart ExecStartusrbindockerd H tcp H unixvarrundockersock I then ran systemctl daemonreload systemctl restart docker I then exported the DOCKERHOST to the docker daemon dockerd url I just configured DOCKERHOSTtcp Now unit tests passed It was frustrating that I couldnt find a lot of official Docker documentation backing up my decisions Is it common to have to configure the daemon host like I did Should the readme for dockeritscala maybe clarify some of the docker setup maybe call it prerequisites The following error message is misleading comgithubdockerjavaapiexceptionDockerClientException Could not pull image image operating system windows cannot be used on this platform It seems to happen when the test library times out when pulling a docker image If you do a docker pull imagename manually on your machine or the build server the tests work fine gradle check Download Download Download Download Download Download Configure project Reckoned version milestone ba bf fd ba f cc a b a dd e b e Download Download Task compileTestScala Pruning sources from previous analysis due to incompatible CompileSetup Task test Discovery starting INFO in chqoslogbackclassicLoggerContext default Could NOT find resource logbacktestxml INFO in chqoslogbackclassicLoggerContext default Could NOT find resource logbackgroovy INFO in chqoslogbackclassicLoggerContext default Found resource logbackxml at fileUserssomeusersrciwiwvertximplbuildresourcestestlogbackxml WARN in chqoslogbackclassicLoggerContext default Resource logbackxml occurs multiple times on the classpath WARN in chqoslogbackclassicLoggerContext default Resource logbackxml occurs at fileUserssomeusersrciwiwvertximplbuildresourcestestlogbackxml WARN in chqoslogbackclassicLoggerContext default Resource logbackxml occurs at jarfileUserssomeuserm repositorycomexampleiwcoreschema iwcoreschema jarlogbackxml INFO in chqoslogbackclassicjoranactionConfigurationAction debug attribute not set INFO in chqoslogbackcorejoranactionAppenderAction About to instantiate appender of type chqoslogbackcoreConsoleAppender INFO in chqoslogbackcorejoranactionAppenderAction Naming appender as STDOUT WARN in chqoslogbackcoreConsoleAppender STDOUT This appender no longer admits a layout as a subcomponent set an encoder instead WARN in chqoslogbackcoreConsoleAppender STDOUT To ensure compatibility wrapping your layout in LayoutWrappingEncoder WARN in chqoslogbackcoreConsoleAppender STDOUT See also for details INFO in chqoslogbackclassicjoranactionLoggerAction Setting level of logger comexample to DEBUG INFO in chqoslogbackcorejoranactionAppenderRefAction Attaching appender named STDOUT to Logger comexample INFO in chqoslogbackclassicjoranactionConfigurationAction End of configuration INFO in chqoslogbackclassicjoranJoranConfigurator a e Registering current configuration as safe fallback point Discovery completed in milliseconds Run starting Expected test count is VertxRedlockSpec RedisRateLimiterSpec ScalaTest INFO comexamplevertxsqlVertxSqlSpec Loading DB migration ScalaTest INFO comexampleSchemaSetup Running migrations for dev username dev password VertxSqlSpec ScalaTest INFO comexamplevertxsqlVertxSqlSpec have been applied to database ScalaTest INFO comexamplevertxsqlVertxSqlSpec Loading Test Fixtures Test migrations should Jun PM iovertxextasyncsqlimplMYSQLClientImpl INFO Creating configuration for result in tables milliseconds insertAndReturnKey for client should return keys milliseconds update client name should return true milliseconds update client name that doesnt exist should return false milliseconds Query for Client should return object milliseconds Query for Client should return List milliseconds ScalaTest ERROR comexamplevertxVertxRedlockSpec Futures timed out after seconds javautilconcurrentTimeoutException Futures timed out after seconds at scalaconcurrentimplPromiseDefaultPromisereadyPromisescala at scalaconcurrentimplPromiseDefaultPromisereadyPromisescala at scalaconcurrentAwaitanonfunready packagescala at scalaconcurrentBlockContextDefaultBlockContextblockOnBlockContextscala at scalaconcurrentAwaitreadypackagescala at comwhiskdockerDockerKitstopAllQuietlyDockerKitscala at comwhiskdockerDockerKitstopAllQuietlyDockerKitscala at comexamplevertxVertxRedlockSpecstopAllQuietlyVertxRedlockSepcscala at comwhiskdockerscalatestDockerTestKitafterAllDockerTestKitscala at comwhiskdockerscalatestDockerTestKitafterAllDockerTestKitscala at comexamplevertxVertxRedlockSpecafterAllVertxRedlockSepcscala at orgscalatestBeforeAndAfterAllanonfunrun BeforeAndAfterAllscala at orgscalatestStatusanonfunwithAfterEffect Statusscala at orgscalatestStatusanonfunwithAfterEffect adaptedStatusscala at orgscalatestFailedStatuswhenCompletedStatusscala at orgscalatestStatuswithAfterEffectStatusscala at orgscalatestStatuswithAfterEffectStatusscala at orgscalatestFailedStatuswithAfterEffectStatusscala at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala at comexamplevertxVertxRedlockSpecrunVertxRedlockSepcscala at orgscalatesttoolsSuiteRunnerrunSuiteRunnerscala at javautilconcurrentExecutorsRunnableAdaptercallExecutorsjava at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava comexamplevertxVertxRedlockSpec ABORTED minutes second comgithubdockerjavaapiexceptionDockerClientException Could not pull image image operating system windows cannot be used on this platform at comgithubdockerjavacorecommandPullImageResultCallbackawaitSuccessPullImageResultCallbackjava at comwhiskdockerimpldockerjavaDockerJavaExecutoranonfunpullImage DockerJavaExecutorscala at scalaruntimejava JFunction mcVspapplyJFunction mcVspjava at scalaconcurrentFutureanonfunapply Futurescala at scalautilSuccessanonfunmap Tryscala at scalautilSuccessmapTryscala at scalaconcurrentFutureanonfunmap Futurescala at scalaconcurrentimplPromiseliftedTree Promisescala at scalaconcurrentimplPromiseanonfuntransform Promisescala at scalaconcurrentimplCallbackRunnablerunPromisescala ScalaTest ERROR ctiwvertxRedisRateLimiterSpec Futures timed out after seconds javautilconcurrentTimeoutException Futures timed out after seconds at scalaconcurrentimplPromiseDefaultPromisereadyPromisescala at scalaconcurrentimplPromiseDefaultPromisereadyPromisescala at scalaconcurrentAwaitanonfunready packagescala at scalaconcurrentBlockContextDefaultBlockContextblockOnBlockContextscala at scalaconcurrentAwaitreadypackagescala at comwhiskdockerDockerKitstopAllQuietlyDockerKitscala at comwhiskdockerDockerKitstopAllQuietlyDockerKitscala at comexamplevertxRedisRateLimiterSpecstopAllQuietlyRedisRateLimiterSpecscala at comwhiskdockerscalatestDockerTestKitafterAllDockerTestKitscala at comwhiskdockerscalatestDockerTestKitafterAllDockerTestKitscala at comexamplevertxRedisRateLimiterSpecafterAllRedisRateLimiterSpecscala at orgscalatestBeforeAndAfterAllanonfunrun BeforeAndAfterAllscala at orgscalatestStatusanonfunwithAfterEffect Statusscala at orgscalatestStatusanonfunwithAfterEffect adaptedStatusscala at orgscalatestFailedStatuswhenCompletedStatusscala at orgscalatestStatuswithAfterEffectStatusscala at orgscalatestStatuswithAfterEffectStatusscala at orgscalatestFailedStatuswithAfterEffectStatusscala at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala at orgscalatestBeforeAndAfterAllrunBeforeAndAfterAllscala at comexamplevertxRedisRateLimiterSpecrunRedisRateLimiterSpecscala at orgscalatesttoolsSuiteRunnerrunSuiteRunnerscala at javautilconcurrentExecutorsRunnableAdaptercallExecutorsjava at javautilconcurrentFutureTaskrunFutureTaskjava at javautilconcurrentThreadPoolExecutorrunWorkerThreadPoolExecutorjava at javautilconcurrentThreadPoolExecutorWorkerrunThreadPoolExecutorjava at javalangThreadrunThreadjava comexamplevertxRedisRateLimiterSpec ABORTED minutes second comgithubdockerjavaapiexceptionDockerClientException Could not pull image image operating system windows cannot be used on this platform at comgithubdockerjavacorecommandPullImageResultCallbackawaitSuccessPullImageResultCallbackjava at comwhiskdockerimpldockerjavaDockerJavaExecutoranonfunpullImage DockerJavaExecutorscala at scalaruntimejava JFunction mcVspapplyJFunction mcVspjava at scalaconcurrentFutureanonfunapply Futurescala at scalautilSuccessanonfunmap Tryscala at scalautilSuccessmapTryscala at scalaconcurrentFutureanonfunmap Futurescala at scalaconcurrentimplPromiseliftedTree Promisescala at scalaconcurrentimplPromiseanonfuntransform Promisescala at scalaconcurrentimplCallbackRunnablerunPromisescala Run completed in minutes second Total number of tests run Suites completed aborted Tests succeeded failed canceled ignored pending SUITES ABORTED FAILURE Build failed with an exception What went wrong Execution failed for task test There were failing tests See the report at fileUserssomeusersrciwiwvertximplbuildreportsteststestindexhtml Try Run with stacktrace option to get the stack trace Run with info or debug option to get more log output Get more help at BUILD FAILED in m s actionable tasks executed In our continuous integration environment Ive been seeing errors like the following a lot comexampleiwMigrationSpecs ABORTED seconds milliseconds javalangRuntimeException Cannot run all required containers at comwhiskdockerDockerKitstartAllOrFailDockerKitscala at comwhiskdockerDockerKitstartAllOrFailDockerKitscala at comexampleiwMigrationSpecsstartAllOrFailMigrationSpecsscala at comwhiskdockerscalatestDockerTestKitbeforeAllDockerTestKitscala at comwhiskdockerscalatestDockerTestKitbeforeAllDockerTestKitscala at comexampleiwMigrationSpecsbeforeAllMigrationSpecsscala at orgscalatestBeforeAndAfterAllliftedTree BeforeAndAfterAllscala The test kit Im using is pretty simple too import comwhiskdockerDockerContainer DockerKit DockerReadyChecker import scalaconcurrentAwait import scalaconcurrentduration trait DatabaseDockerContainers extends DockerKit val mariaDBContainer DockerContainermariadb withEnvMYSQLDATABASEdevMYSQLUSERdev MYSQLPASSWORDdev MYSQLROOTPASSWORDdev withPorts None withReadyCheckerDockerReadyCheckerLogLineContainsready for connections val cassandraContainer DockerContainercassandra withPorts None withReadyCheckerDockerReadyCheckerLogLineContainsStarting listening for CQL clients on def containerIPc DockerContainer AwaitresultcgetIpAddresses secondhead abstract override def dockerContainers List DockerContainer mariaDBContainer cassandraContainer superdockerContainers And my Spces is built like so import comwhiskdockerimpldockerjavaDockerKitDockerJava import comwhiskdockerscalatestDockerTestKit import orgflywaydbcoreinternalexceptionFlywaySqlException import orgscalatestFreeSpec Matchers class MigrationSpecs extends FreeSpec with Matchers with DockerTestKit with DatabaseDockerContainers with DockerKitDockerJava MySQL migrations I suspect that DockerKit is failing out too early when waiting for the containers to become alive Im going to turn logging up and see if I can reproduceextract more information Is there any way to expose the internal timeout and make it configurable I was trying to start up a Bind server that exposes on tcp and udp and could not figure out how to make that happen It appears as though that may not be possible given the port mappings that you have which are an Int Option Int which precludes using a string like udp I have been unable to get the same working with the docker spotify client However I did manage to get this working with the dockerjava client Unsure of next steps I could contribute the code I have back it would break compatibility but the issue still remains that I could not get the docker spotify client working I do not think that it will be solved in this version but I open the ticket at least to track the issue for reference Given The DockerReadyChecker can eventually close the Stream that is used by LogLineReceiver Rough workaround is to not use DockerReadyCheckerLogLinesContains along with LogLineReceiver Hi I have a requirement of running a container in privileged mode to be able to test my functionallity I have created PR with a proposal Please consider merging this PR Running from the example for Postgres I am getting a ClassNotFoundException I have tried both Specs and ScalaTest and get the same results Any insights StackTrace info combannotransactionexporterhistoryPostgresServiceSpec ABORTED info javalangRuntimeException javalangClassNotFoundException comsunwsrsextRuntimeDelegateImpl info at javaxwsrsextRuntimeDelegatefindDelegateRuntimeDelegatejava info at javaxwsrsextRuntimeDelegategetInstanceRuntimeDelegatejava info at javaxwsrscoreUriBuildernewInstanceUriBuilderjava info at javaxwsrscoreUriBuilderfromUriUriBuilderjava info at orgglassfishjerseyclientJerseyWebTargetinitJerseyWebTargetjava info at orgglassfishjerseyclientJerseyClienttargetJerseyClientjava info at orgglassfishjerseyclientJerseyClienttargetJerseyClientjava info at comspotifydockerclientDefaultDockerClientresourceDefaultDockerClientjava info at comspotifydockerclientDefaultDockerClientlistImagesDefaultDockerClientjava info at comwhiskdockerimplspotifySpotifyDockerCommandExecutoranonfunlistImages SpotifyDockerCommandExecutorscala TestCode scala import javasqlDriverManager import scalaconcurrentExecutionContext import scalautilTry import comwhiskdocker trait DockerPostgresService extends DockerKit import scalaconcurrentduration import DockerPostgresService def PostgresAdvertisedPort def PostgresExposedPort val PostgresUser nph val PostgresPassword suitup val postgresContainer DockerContainerpostgres withPortsPostgresAdvertisedPort SomePostgresExposedPort withEnvsPOSTGRESUSERPostgresUser sPOSTGRESPASSWORDPostgresPassword withReadyChecker new PostgresReadyCheckerPostgresUser PostgresPassword SomePostgresExposedPort looped second abstract override def dockerContainers List DockerContainer postgresContainer superdockerContainers object DockerPostgresService class PostgresReadyCheckeruser String password String port Option Int None extends DockerReadyChecker override def applycontainer DockerContainerState implicit docker DockerCommandExecutor ec ExecutionContext container getPorts mapports Try ClassforNameorgpostgresqlDriver val url sjdbcpostgresqldockerhostportgetOrElseportsvalueshead OptionDriverManagergetConnectionurl user passwordmapcloseisDefined getOrElsefalse import comwhiskdockerDockerKit import orgscalatestconcurrentScalaFutures import orgscalatesttime import orgscalatestBeforeAndAfterAll Suite import orgslf jLoggerFactory trait DockerTestKit extends BeforeAndAfterAll with ScalaFutures with DockerKit self Suite private lazy val log LoggerFactorygetLoggerthisgetClass def dockerInitPatienceInterval PatienceConfigscaledSpan Seconds scaledSpan Millis def dockerPullImagesPatienceInterval PatienceConfigscaledSpan Seconds scaledSpan Millis override def beforeAll Unit superbeforeAll startAllOrFail override def afterAll Unit stopAllQuietly superafterAll import comspotifydockerclientDefaultDockerClient import comwhiskdockerimplspotifySpotifyDockerFactory import orgscalatesttimeSecond Seconds Span import orgscalatestFlatSpec Matchers class PostgresServiceSpec extends FlatSpec with Matchers with DockerTestKit with DockerPostgresService implicit val pc PatienceConfigSpan Seconds Span Second override implicit val dockerFactory DockerFactory new SpotifyDockerFactory DefaultDockerClientfromEnvbuild postgres node should be ready with log line checker in isContainerReadypostgresContainerfutureValue shouldBe true 