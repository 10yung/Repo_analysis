 Issue Type bPerformance Issueb Any webpage I open fails to render clearly Plz fix this An example is shown below Extension version VS Code version Code f dd dd b d f d ab c df T Z OS version WindowsNT x details summarySystem Infosummary ItemValue CPUsIntelR CoreTM i U CPU GHz x GPU Status dcanvas enabledbrflash d enabledbrflashstage d enabledbrflashstage dbaseline enabledbrgpucompositing enabledbrmetal disabledoffbrmultiplerasterthreads enabledonbrooprasterization disabledoffbrprotectedvideodecode enabledbrrasterization enabledbrskiarenderer disabledoffbrsurfacecontrol disabledoffbrsurfacesynchronization enabledonbrvideodecode enabledbrvizdisplaycompositor enabledonbrvizhittestsurfacelayer disabledoffbrwebgl enabledbrwebgl enabled Load avgundefined Memory System GB GB free Process Argv Screen Readerno VM detailsdetails summaryProcess Infosummary CPU Mem MB PID Process code main sharedprocess window undefined gpuprocess window undefined window Browser Preview VendingMachine Visual Studio Code searchService C Windows System WindowsPowerShell v powershellexe watcherService consolewindowhost Windows internal process extensionHost C Users Powertile AppData Local Programs Microsoft VS Code Codeexe c Users Powertile AppData Local Programs Microsoft VS Code resources app extensions jsonlanguagefeatures server dist jsonServerMain nodeipc clientProcessId C Program Files x Google Chrome Application chromeexe disablebackgroundnetworking disablebackgroundtimerthrottling disablebackgroundingoccludedwindows disablebreakpad disableclientsidephishingdetection disabledefaultapps disabledevshmusage disableextensions disablefeaturessiteperprocess disablehangmonitor disableipcfloodingprotection disablepopupblocking disablepromptonrepost disablerendererbackgrounding disablesync disabletranslate metricsrecordingonly nofirstrun safebrowsingdisableautoupdate enableautomation passwordstorebasic usemockkeychain headless hidescrollbars muteaudio disablegpu aboutblank remotedebuggingport userdatadirC Users POWER AppData Local Temp puppeteerdevprofileg e r utility crashpadhandler window undefined watcher window undefined gpuprocess C Program Files OpenJDK jdk bin java addmodulesALLSYSTEM addopens javabasejavautilALLUNNAMED addopens javabasejavalangALLUNNAMED Declipseapplicationorgeclipsejdtlscoreid DosgibundlesdefaultStartLevel Declipseproductorgeclipsejdtlscoreproduct Dfileencodingutf DwatchParentProcessfalse noverify Xmx G XXUseG GC XXUseStringDeduplication jar c Users Powertile vscode extensions redhatjava server plugins orgeclipseequinoxlauncher v jar configuration c Users Powertile vscode extensions redhatjava server configwin data c Users Powertile AppData Roaming Code User workspaceStorage f e bf adb fe redhatjava jdtws consolewindowhost Windows internal process consolewindowhost Windows internal process window Issue Reporter electroncrashreporter window applicationContextxml SpringPlayground Visual Studio Code watcherService consolewindowhost Windows internal process searchService extensionHost C Program Files OpenJDK jdk bin java addmodulesALLSYSTEM addopens javabasejavautilALLUNNAMED addopens javabasejavalangALLUNNAMED Declipseapplicationorgeclipsejdtlscoreid DosgibundlesdefaultStartLevel Declipseproductorgeclipsejdtlscoreproduct Dfileencodingutf DwatchParentProcessfalse noverify Xmx G XXUseG GC XXUseStringDeduplication jar c Users Powertile vscode extensions redhatjava server plugins orgeclipseequinoxlauncher v jar configuration c Users Powertile vscode extensions redhatjava server configwin data c Users Powertile AppData Roaming Code User workspaceStorage e c c e c b ca redhatjava jdtws consolewindowhost Windows internal process C Windows System WindowsPowerShell v powershellexe consolewindowhost Windows internal process details details summaryWorkspace Infosummary Window applicationContextxml SpringPlayground Visual Studio Code Window Browser Preview VendingMachine Visual Studio Code Folder SpringPlayground files File types class java prefs xml json classpath project Conf files launchjson settingsjson Launch Configs java Folder VendingMachine files File types java class prefs xml classpath project json Conf files launchjson Launch Configs java details generated by issue reporter Observations from There is a test but it doesnt look to be in use I cant quite figure out what it does I want to have at least sanity tests One that tests that the extension can be launched from vscode I have no idea how to do this One that drives the current stable chrome and current chrome canary and verifies we can get a screencast and inspect a node One that tests that the UI shows up Observations from Observations Puppeteer only supports the version of chromium that it is bundled with That means when we pick a version of chrome off of the users system there is no guarantee that puppeteer can control it properly This project only seems to use puppeteer to launch the browser and obtain a CDP connection That shields us from most of the incompatibilities between puppeteer and various versions of chrome but there have been times when old puppeteer cant launch and connect to new chrome and vice versa Recommendation Id recommend switching to something that intentionally supports multiple versions of chrome like lighthouses chromelauncher Or maybe just steal the launcher code from puppeteer and bake it in and then if it ever breaks we can modify it ourselves to support multiple versions I was poking around the code today to figure out how this project works There is a very good chance that I am missing some key info or just wrong but the best way to get answers is to first be wrong Experimental CDP methods are being used being used The best solution would be to not use experimental protocol Stick to the stable methods or use a first party client like puppeteerchromedriver This is unlikely to happen though because most of the CDP methods being used are pretty niche and outside the scope of those projects It would be nice to know when something breaks though Im thinking we could lint the methods used against the current version of the protocol There are some nice dts files in puppeteer and the devtoolsprotocol repo on github Even better would be to run the tests against a variety of chrome versions but the tests seem pretty sparse at the moment Puppeteercore is being used to launch undefined chrome versions Puppeteer only supports the version of chromium that it is bundled with That means when we pick a version of chrome off of the users system there is no guarantee that puppeteer can control it properly This project only seems to use puppeteer to launch the browser and obtain a CDP connection That shields us from most of the incompatibilities between puppeteer and various versions of chrome but there have been times when old puppeteer cant launch and connect to new chrome and vice versa Id recommend switching to something that intentionally supports multiple versions of chrome like lighthouses chromelauncher Or maybe just steal the launcher code from puppeteer and bake it in and then if it ever breaks we can modify it ourselves to support multiple versions Tests There is a test but it doesnt look to be in use I cant quite figure out what it does I want to have at least sanity tests One that tests that the extension can be launched from vscode I have no idea how to do this One that drives the current stable chrome and current chrome canary and verifies we can get a screencast and inspect a node One that tests that the UI shows up I dont know how to change title of menu entry to something like Browser Preview Preview file Sample Nothing happens when we double click on the button The same works properly in a regular browser Overview VS Code added a proposed api to help webviews create uris for local resources The main addition is a toWebviewResource method property on webviews that translates a local file uri into a webview uri ie one that uses the special vscoderesource scheme This api is being added primarily to support running VS Code on the web where the existing vscoderesource scheme will not work Request As a popular user of the VS Code webview API wed appreciate your feedback on this api proposal Does it work as advertised Does the documentation for it make sense Is it missing any functionality Feel free to leave your feedback on this issue or on You can try out the proposed api in VS Code insiders by following these instructions Please let me know if you have any questions about testing it out PS There are no plans at the moment to remove the vscoderesource scheme so your extension should continue to work on desktop VS Code even if it does not adopt this new API I have tried this in my react app but selecting an element does not do anything Its a custom boilerplate is that the issue or is something I have to setup first I find this feature pretty neat My configuration requires me to use ng serve from Angular CLI to start a Webpackbased dev server The same configuration should work with both chrome and browserpreview however preLaunchTask is not started when using browserpreview name Launch type chrome request launch url preLaunchTask serve postDebugTask stopserve skipFiles nodemodules sourceMapPathOverrides webpack webRoot ng webRootprojects webRoot workspaceFolder I switched to dark theme in Windows Google Chrome displays with the dark theme Google Chrome Debugger also displays with the dark theme Will it be possible also for Browser Preview to have a dark theme In the screenshot bellow it can be seen that the address bar is a little to aggressive with the white color Also when refreshing the background is white for a moment A setting somewhere Ill be happy if possible theme 