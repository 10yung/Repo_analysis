Currently Lcobucci JWT Signer Key utilizes a magic sentinel file to decide whether or not to read key content from a file Inline signalling like this can be troublesome and more than a little dangerous at times It can also potentially however unlikely lead to accidentally attempting to read from a file As an alternative I would like to propose perhaps a static secondary constructor fromFile where a user could specifically request a files contents Its not a large change but adds a lot in the way of safety As v final is not yet tagged I hope this breaking change isnt asking too much This issue is related to current version in master branch and current doc for Issuing Tokens Related code is php configuration ConfigurationforSymmetricSigner new Sha new KeymBC v sOKVvbdEitdSBenu nfNfhwkedkJVNabosTw token configcreateBuilder issuedBy getTokenconfiggetSigner configgetSigningKey It make impossible to use Builder simply as service to DI container because I need above that the Configuration service to get Key Signer In use case in app sound as greate flow to get prepared instance of Builder with few systemwide claims and allow to add custom claims and than convert to the token This interface here required to get pair of cooperating services configurator prepared Builder or create custom new envelope object which contains both of them and copyprovide their interface for better integration with simple DI services design I understanding it great for tests and clean design But maybe should be better to refactor Builder and split their internal implementation to ClaimsBuilder and SignBuilder and keep basic Builder with simple interface like in version v My suggest is rename Builder to ClaimsBuilder create SignBuilder create Builder with simple interface for better support use DI design Is my things correct or I am blind at any stage Recently updated and noticed that an ability to set leeway for clock skew was added in Thats great thanks but Id like to ask that the default value is made configurable through a global constant static method The reality is that this package is a fairly deep downstream dependency for a lot of people I could start the process to convince leagueoauth server to support the setting and then start convincing laravelpassport to support it but its just not worth the time Personally Ive just updated my previous composer postinstall patch to avendorlcobuccijwtsrcValidationDataphp bvendorlcobuccijwtsrcValidationDataphp param int currentTime param int leeway public function constructcurrentTime null leeway public function constructcurrentTime null leeway currentTime currentTime time thisleeway int leeway It would be a bit cleaner if instead I could just make a call like Lcobucci JWT ValidationDatasetDefaultLeeway Best Id be interested in helping to stabilize the v code APIs Do you have a roadmap on what is still needing to be completed Currently encoder is concrete class which make this line nonsense Because user can only pass a instance of Lcobucci JWT Parsing Encoder but Lcobucci JWT Parsing Encoder has no constructor which means the only option is passing a instance of new Lcobucci JWT Parsing Encoder so actually the encoder can be eliminated because the encoder always have to be the result of new Lcobucci JWT Parsing Encoder The best solution is using interface instead of class this way user can inject their own Encoder also Actually I have problem with jwt src Parsing EncoderjsonEncode because of the data to be encoded contains binary data the jsonencode will give an error so I want to have my own implementation of Encoder but currently I cant do that because Encoder is not an interface Disclaimer Im not sure if this is still relevant for The current implementation of getClaim does not allow nullvalues php public function getClaimname default null if thishasClaimname return thisclaims name getValue if default null throw new OutOfBoundsExceptionRequested claim is not configured return default Even if you specifically provide the default value php tokengetClaimsub null OutOfBoundsException This could be solved by simply changing this line php if default null to php if funcnumargs As stated in we could be more flexible regarding the format use we generate the iat exp and nbf claims Ocramius gave a nice idea to help users based on the Configuration have a really simple way to get a valid token or null from a raw token string something like php function string tokenData use configuration Token parser configurationgetParser validator configurationgetValidator constraints configurationgetConstraints try token parserparsetokenData catch Lcobucci JWT Exception e return null if validatorvalidatetoken constraints return null return token In order to achieve this we would need to implement but also add the validation constraints in the configuration object As pointed by renatomefi were relying on SPL exceptions and would be really good to have an exception tree for this library in order to simplify things while catching exceptions 