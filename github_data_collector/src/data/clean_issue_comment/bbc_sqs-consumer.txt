Is there a way I can use this package with node version Node v does not support asyncawait I can see the project is moved from callbacks to asyncawait in v This and this pull requests talks about adding support for asyncawait but does not mention much about backward compatibility Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details Description If a consumer is created started and stopped and then another consumer is created and started then that second consumer no longer emits the messagereceived event Expected behaviour The second consumer should emit the messagereceived event upon receiving a message Actual behaviour The second consumer receives the message but does not emit the messagereceived event Steps to reproduce I set up a small repo to demonstrate the bug Requirements are Node and dockercompose bash git clone gitgithubcomTakeScoopsqstestgit git reset d a ea c c fdd ce specify commit for posterity cd sqstest nvm use if you use nvm npm install dockercompose f testdockercomposeyml up d DEBUGsqsconsumer npm run test The second test should get messagereceived event fails The debug output clearly shows that the message was received If you run it by itself using only then it passes Similarly if you comment out the consumerstart on the preceding line then it also passes Operating system Im running macOS Description In consumerdeleteMessageBatch when batch deleting messages individual failures are not checked As per the AWS docs Because the batch request can result in a combination of successful and unsuccessful actions you should check for batch errors even when the call returns an HTTP status code of Expected behaviour The return value of thissqsdeleteMessageBatch in the callback specifies a list of failed IDs which should be validated to be empty If any IDs fail they should either be retried or the error should be surfaced Actual behaviour Individual failures are silent Steps to reproduce Have AWS return a nonempty Failed array comment Please use headings for bugs only else you can delete Description I am trying to use processonSIGINT function some progress for preventing Ctrl c from closing the node process before the consumer finished his process What I figured out is that by doing this processonSIGINT function var listeners processlistenersSIGINT for var i i listenerslength i consoleloglisteners i toString I can see that I have this method killChrome processexit what causes my node process to close right away when I am doing Ctrl c Expected behaviour processonSIGINT function waiting for my work to end and then exit the node process Updated awssdk to latest version and also marked it as a peer dependency so that consuming packages are able to supply their own version of awssdk Description calling consumerisRunning return true even when configured with an invalid sqs url or invalid credentials Behaviour Well this is up for debate I would assume If the desired behaviour is to return true for isRunning then I would suggest updating the documentation to be explicit about the behaviour Steps to reproduce Configure an incorrect queueUrl and you will see that isRunning will return true Is it possible to only delete some of the messages received in a batch I understand that using handleMessage in combination with a batchSize greater than results in them being processed one at a time but handleMessageBatch seems to be all or nothing For example if I had an API that could save multiple messages at a time and return a list of those that were successfully saved could I use that to delete only the successfully saved messages from the queue Adding http keepAlive note to documentation