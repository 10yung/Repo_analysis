 Problem statement On goswagger v if you annotate a struct with swaggertype the indicated type will not be used in generated spec swaggerjson will still have a ref to the structs type instead Old GOPATH dependent versions such as v x used to handle this correctly but my projectteam has otherwise moved to go mod Example code Request data for a ObjectGet swaggerparameters ObjectGet type ObjectGetRequestWrapper struct ID in path ID SpecialNumber jsonid Special validated number string represented as int for use as an object id swaggertype int type SpecialNumber struct Numb string Valid bool Results in operationId ObjectGet parameters ref definitionsSpecialNumber xgoname ID description ID name id in path required true Instead of operationId ObjectGet parameters type integer format int xgoname ID description ID name id in path required true Steps to reproduce generate spec using attached apigo apigozip as source on goswagger v or HEAD of master at time of writing Environment swagger version go version OS macOS Problem statement goswagger generates different specs from the same codebase in repeated runs The reason for this is a swagger annotated type embedding another one Swagger specification None Steps to reproduce Clone Follow the READMEmd Environment swagger version go version OS macOS I havent had a deeper look yet But the generator seems to act on one of the two types in question randomly Since I usually trust the stdlib when it comes to loading the code packages I suspect the bug in question could be caused by getting data from a map since maps are randomly orderer we get different types on different runs Problem statement When using and endpoint that consumes multipartformdata nonfile parameters are not properly obtained After calling rParseMultipartForm rForm is used for runtimeValues when rForm would be empty since all the data is contained in rMultipartForm instead Swagger specification post description Upload file and give it an iD operationId UploadFile consumes multipartformdata parameters name id in formData required true type string format uuid name fileData in formData required true type file responses description OK Steps to reproduce Call endpoint with all required fields id and fileData Get a with id being required even though it was provided Environment swagger version go version OS Debian bullseyesid Draft work to address a number of package import mangling issues Lean on previous preliminary refactoring work from PRs and It seems an important feature Hope goswagger have it replaced deprecated gem install options which are no more supported by gem Trying to address this CI failure Signedoffby Frederic BIDON fredbiyahoocom NO BEHAVIOR CHANGE EXPECTED removed some most redundant code left redundancies that would introduce change in behavior to forthcoming PRs factorized spec loadingvalidatingflattening operations new specgo file regrouped state init function calls reduced the number of global vars and replaced them by functions adapted template repo to initialize from language options with adequate template FuncMap made DefaultLanguage a configurable function moved global golangspecific function to LangueOpts new languagego file testability functionalized a number of hard to test code eg all funcmap entries and introduced unit testing started but did not complete yet the rewriting of unit tests using require instead of nested constructs with assert Signedoffby Frederic BIDON fredbiyahoocom This is a continuation of This spike provides the support for the schema generation of enums go swaggerenum Level type Level string const LEVEL Level ONE LEVEL Level TWO LEVEL Level THREE swaggerenum LevelInt type LevelInt int const LEVELINT LevelInt LEVELINT LevelInt LEVELINT LevelInt swaggermodel type Model struct level Level levelInt LevelInt will be yaml definitions Model type object properties level type string enum ONE TWO THREE levelInt type integer enum I dont understand how to handle oAuth token expirationrefresh when using goswagger generated clients Where does the code to make the request to the refresh endpoint go How do I get the new token data base to store somewhere Problem statement When I generate client including a definition with xgotype in Body the code doesnt compile at The message cannot convert nil to type modelsUser Because structs generated for parameters contain body properties as value not a pointer Swagger specification Specs for client Specs for model Environment swagger version go version OS Ubuntu 