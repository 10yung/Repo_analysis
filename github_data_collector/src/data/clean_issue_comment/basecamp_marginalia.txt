When MarginaliaCommentprependcomment is set to true in a rails app ActiveRecord explain stops showing the explain results in the rails console img width altScreenshot at src Environment Database PostgreSQL Rails Ruby Marginalia When I try to install the gem as is I get the error in the issue title Is anyone else getting the same error Ive looked into this error and it sounds like instead of using ActiveSupportonload actioncontroller do on libmarginaliarailtierb it should be using ActiveSupportonload actioncontrollerbase do Can someone confirm this Ran some benchmarks using derailedbenchmarks for one of our endpoints that does a lot of data loading What I noticed was the line and linestoignore methods were showing up in the samples a bunch I did a before and after perfips test and got a improvement after removing the line component Each test was for minutes so Im fairly confident in the results This PR is just to add a note to the README noting the performance impact of using the line component Problem I noticed the string allocations from the strinclude calls in escapesqlcomment in a stackprof object profile These are unnecessary to allocate on each call since they arent modified Solution Use frozenstringliteral true so that it doesnt allocate these strings on each call Rails now returns an instance of NullPool instead of nil in response to Connectionpool at times and NullPool does not have spec so this method blows up Instead of testing for a nil pool test if the pool responds to spec which should cope with both nil and NullPool instances with full backwards compatibility Also upgrades Travis Ubuntu to as I dont know how to downgrade bundler on This is to make it easier to parse these comments from logs This introduces a change to combine the controller and controllerwithnamespace components by making the controller component rely on controllerpath and manipulate the value that comes back from that The idea for this came from an issue where we wanted the benefits of the controllerwithnamespace component but we already have a bunch of logs with controller Once I looked into how the controller name was being fetched I seen we had the chance to consolidate the two components and remove some of the duplicated functionality The gem now includes the Sidekiq middleware so the example in the wiki might lead someone to duplicate the code in their app potentially overriding any future upstream improvements or fixes I tried forking the wiki but it seems like its not editable by noncommitters 