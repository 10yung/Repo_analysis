 Meta Poltergeist Version Tried both saw issues with both Expected Behavior I am attempting to confirm the correct function of a link with targetblank by switching to the window opened up when clicking the link then checking the currenturl This should return the url opened by clicking the link Actual Behavior In reality I am getting the following error when attempting to switchtowindow FailureError switchtowindownewwindow CapybaraPoltergeistJavascriptError One or more errors were raised in the Javascript code on the page If you dont care about these errors you can ignore them by setting jserrors false in your Poltergeist configuration see documentation for details TypeError Attempting to configurable attribute of unconfigurable property TypeError Attempting to configurable attribute of unconfigurable property at in defineProperty at in fZ at If I attempt the switchtowindow in bindingpry it gives this error code but actually seems to process switching windows since afterwards I can check currenturl and get the correct result and a passing test Since I ran into this with versions and I decided to try to work around this by executing some javascript to reset the links target to self After this workaround when testing the specs involved individually they typically pass However when I run the entire file of specs they fail locally They do pass in our CI process though If this is an error in something in my implementation please let me know Steps to reproduce Here is the code I attempt newwindow windowopenedby rowtoclickclicklink sleep switchtowindownewwindow expectcurrenturlto include anticipatedurl use include in case routing adds path to root url Here is my workaround code before do executescriptlinktoclickeachfunction thisattrtarget self end scenario the user is redirected to the correct path do rowtoclickclicklink sleep wait for event logging expectcurrenturlto include anticipatedurl In case link redirects to more specific path end The Debian package has the same problem The fix introduced by addresses MRI but not JRuby or Rubinius because of incomplete support for the out parameter to Processspawn on those platforms Apparently newer versions of JRuby do support out We should determine which version of JRuby fixed this and from there determine whether we care about older versions of JRuby We should also explore whether the issue is OSspecific When using https the remote debugger page never loads When changing the scheme to http it loads correctly Ive stumbled across a bug where JavaScript enabled specs fail silently due to the use of JavaScripts let assignment operator Using let instead of var will break whatever other code resides in the same script tag as the let keyword Capybarajavascriptdriver poltergeist Capybararegisterdriver poltergeist do app options jserrors true CapybaraPoltergeistDrivernewapp options end This is true despite having jserrors set to be true To reproduce run a spec for a page that has script typetextjavascript var message works fine script versus one that has script typetextjavascript let message fails silently script When using poltergeist and capybarawebkit input idradio nameradio value typeradio stylepositionabsolute left px is considered a visible element although it cannot be seen or interacted with clicked etc Current seleniumwebdriver reports it as nonvisible although the beta version reports it as visible but throws an ElementNotVisible error if you try to click it route thoughts Ive been debugging some sporadic spec failures today where it seems that Poltergeist tries to click the wrong place in the page Therefore it misses the button Im trying to click and my spec fails because the form is never submitted We use web fonts in our project In this case it seems that what is happening is that since Im clicking a button very soon after the page has loaded sometimes Poltergeist computes the click position before the web fonts have loaded but the click itself happens after the web fonts have loaded And the web fonts cause the page to rerender so everything moves around a bit This can cause the click to fall in the wrong place More generally it seems problematic that the page can change between when Poltergeist measures the click position and when it executes the click Ideally there would be some way to freeze the page but I dont know if that is at all possible For now I have managed to work around the issue by checking for documentreadyState complete on each page load This may be the next best thing for Poltergeist to implement if freezing the page is infeasible I had issues with some missing js features in phantomjs so I fixed them by using polyfills loaded through pagedriverbrowserextensions However in one of my tests Im using an iframe and it seems that in that iframe extensions are not loaded because Im having the same issue I had before creating the extensions itself Heya just ran into an issue where I was trying to test an autocomplete field and had to drop down from fillin to nativesendkeys in order for the keyboard events to trigger the autocomplete This raises the question any reason not to use sendkeys internally for fillin Id be happy to make a PR for this set initial cookie before request pagedriversetcookieuserid controller sets cookies userid visit changeuseruserid this passes the right headers were sent back by rails app pageresponseheaders SetCookie matchuserid shouldnot benil this fails userid cookie is still pagedrivercookies userid valueshould 