 import comsksamuelscrimageImage object RscInterpolator extends contextualInterpolator override type Input String override type Output Image override def contextualizeinterpolation StaticInterpolation Seq ContextType val head interpolationliteralshead if interpolationmacroContextclassPathmaptoStringcontainshead Nil else interpolationabortLiteral head Cant find image on classpath def evaluateinterpolation RuntimeInterpolation Output ImagefromResourceinterpolationliteralshead the above code is intended to check at compile time for existence of files on class path however it doesnt compile for unclear reason error UserscrimsonIdeaProjectswmhrandomizermacrossrccomcrimziewmhutilRscInterpolatorscala Symbol type scalareflectmacroswhiteboxContext is missing from the classpath error This symbol is required by value contextualInterpolatorStaticInterpolationmacroContext package commobimeoticketissuerprimitives import contextual object Test val NonEmptyString NonEmptyStringModuleInstance type NonEmptyString NonEmptyStringType sealed abstract class NonEmptyStringModule type Type String def applystring String Option NonEmptyString NonEmptyStringParsercheckstringtoOption object NonEmptyStringModule val Instance NonEmptyStringModule new NonEmptyStringModule type Type String object NonEmptyStringParser extends Verifier NonEmptyString def checkstring String Either Int String NonEmptyString if stringisEmpty Left string must not be empty else RightstringasInstanceOf NonEmptyString implicit class NonEmptyStringContextsc StringContext val n PrefixNonEmptyStringParser sc nfoo This gives me an Error macro has not been expanded nfoo It did work in Scala x Contextual seems to need a rebuild for Scala due to an incompatible change in the reflect ast scalacompiler shouldnt be a compile dependency for a macro library You probably meant to mark it and possibly scalareflect as Provided which is what circe does I really like to use your lib to do syntax checks on SQLHQL queries However my queries are not pure strings but rather interpolated strings with parameters eg scala val id val query qfrom User where id id Would that be possible with contextual Is there any working example for such an interpolated string with arguments So far I could only find the section Embedded Types on but thats only very few information about how this works and the example is unfortunately incomplete A complete example would already help a lot In neither the README nor are there any usage instructions like maven coordinates READMEs website URL is outdated Fortunately one in repo description is up to date so I was able to find it This PR adds support for holes in the binary example This was done in scope of Scala Swarms Scala Center Hackathon The implemented strategy tries to check as much as possible during compile time and only falls back to runtime checks when dynamic parts are used I was unable to avoid adding an Embedder typeclass even though it doesnt seem necessary Is it possible to avoid it Results in a ClassCastException at compile time at the usage site if the StringContextOps is defined in test files This looked promising class SqlInterpolator T BirecursiveT object Expr extends StaticInterpolator T Sql def parses String String T Sql parser T parseExprQuerysleftMapparseError sNot a valid SQL expression parseError along with implicit class SqlStringContextsc StringContext def sqlE T BirecursiveT Prefixnew SqlInterpolator T Expr sc def sqlB T BirecursiveT Prefixnew SqlInterpolator T Blob sc This particular example is attempting to define a String interpolator for a SQL AST defined in fix point style for use with matryoshka but really I think it illustrates the inability to make any kind of generic interpolator using contextual which is unfortunate because this is supported by Scala despite certain weird behaviors surrounding supplying a type parameter This is the error that is generated at compile time with the above example javalangClassNotFoundException quasarsqlSQLSpeclocal SQLSpecqueryinterpolatortype Presumably caused by the macro implementation having trouble accessing the object inside the class Maybe its fundamentally impossible to get this to work in which case I think it should be clearly documented This is the definition of StaticInterpolator not that it matters all that much to demonstrate the above point as a side note this is pretty generic and could be added to contextual itself minus the use of scalaz trait StaticInterpolator A extends Interpolator def parses String String A def contextualizeinterpolation StaticInterpolation interpolationpartsforeach case litLiteral string parsestring match case msg interpolationabortlit msg case case holeHole interpolationaborthole substitutions are not supported Nil A String that would not parse should not have made it past compile time def evaluateinterpolation RuntimeInterpolation A parseinterpolationpartsmkStringvalueOrerrMsg scalasyserrorsSomething terribly wrong happened Failed to parse something at runtime that we checked at compile time Reason errMsg This is either because the parse function of this StaticInterpolator is not pure or could less likely be a bug with StaticInterpolator 