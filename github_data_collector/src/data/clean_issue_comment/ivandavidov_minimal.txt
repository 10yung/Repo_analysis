Sync systemdboot with the latest stable upstream source code and check whether this fixes Take a look at muslcc and decide whether it can be used either in the MLL build process or in the MLL runtime It will be a good exercise to create Slax module for MLL The most recent Slax version is and it supports everything that should allow MLL to be built out of the box assuming there is properly configured module The Slax URL which explains the boot internals is here The corresponding URL in the tutorials should be updated Also the websites should be updated put the new tutorial document as well in order to reflect this change MLL version for Raspberry Pi Start with very minimal components statically linked binaries MITs xv course Ed Kings Linux Namespaces set of articles Done Design and implement proper layer merging in MINCS Dockerfile actions are ignored in MINCS Read the LinuxDeviceDriversDevelopment book Closeimplementcleanup the MLL issues here This ist a RC Shell Script the idear to make a bash Script or a golang Git warpper in Go Note that Groovy depends on JVM Groovy version works with Java and Groovy version is designed to work with Java By default MLL adds the latest stable packages and currently Java is the latest stable Java However the latest stable Groovy package is for version Adding Groovy in MLL at this point will require to add the latest bleeding edge Groovy version From time to time users raise issues that MLL doesnt work properly on real hardware because some devices are not recognized Thats because MLL uses default kernel settings and by default the builtin drivers work with limited set of generic hardware Users should be aware from the very beginning that MLL is mostly an educational operating system which is designed to work fine in virtual environment If it works on real hardware its a bonus but thats not the goal of this project MLL has evolved from statically linked BusyBox environment to dynamically linked BusyBox environment where the GNU C library is used as mediation layer On top of that the most recent MLL version can be used on both legacy BIOS and modern UEFI firmware machines Unfortunately the tutorial doesnt follow the evolution of the project The MLL project desperately needs series of new tutorials which should cover the following Dynamic and static linking BIOS and UEFI boot schemes MLL build process in details for BIOS and UEFI MLL internal structure configurable capabilities overlay bundles etc MLL boot process in details from kernel to shell including the overlay magic xv is a very small UNIXlike operating system which can be built from scratch There is also a teaching book which explains the internals of the xv OS xv can be mentioned in the MLL docs as additional educational resource for the people who are interested to build their own UNIXlike OS This could be mentioned in the website the MLL tutorial document and in the projects readme document since the buildrun steps are really simple The code snippet below shows how simple it is to build and run xv The whole process takes minutes on my machine This is for UbuntuDebian based Linux host machines sudo apt install git make gcc qemu git clone cd xv public make make qemu It would also be very interesting to experiment whether it is possible to boot xv from inside MLL probably by using kexectools or by any other means