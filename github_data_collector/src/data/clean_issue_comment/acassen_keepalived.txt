Describe the bug trackscript doesn t work when running in a container keepalived logs Failed to setclear process event listen errno Connection refused I found one relevant SO topic about the issue with using netlink inside a namespace Keepalived version v Distro please complete the following information Alpine Linux v x Details of any containerisation or hosted service eg AWS Running in a privileged LXC container the host system is SUSE Linux Enterprise Server Configuration file globaldefs enablescriptsecurity scriptuser nobody vrrpversion vrrptrackprocess checknginxproc process nginx quorum forkdelay terminatedelay vrrpinstance viipv interface eth state MASTER virtualrouterid priority trackprocess checknginxproc virtualipaddress dev eth virtualroutes default via dev eth System Log entries Dec test daemoninfo Keepalived Starting Keepalived v Dec test daemoninfo Keepalived WARNING keepalived was build for newer Linux running on Linux default SMP Wed Nov UTC b Dec test daemoninfo Keepalived Command line usrsbinkeepalived dontfork usefileetckeepalivedkeepalivedconf Dec test daemoninfo Keepalived configidmaster Dec test daemoninfo Keepalived Opening file etckeepalivedkeepalivedconf Dec test daemoninfo Keepalived Starting VRRP child process pid Dec test local info Keepalivedvrrp Registering Kernel netlink reflector Dec test local info Keepalivedvrrp Registering Kernel netlink command channel Dec test local info Keepalivedvrrp Opening file etckeepalivedkeepalivedconf Dec test local info Keepalivedvrrp Failed to setclear process event listen errno Connection refused Dec test local info Keepalivedvrrp viipv entering FAULT state Dec test local info Keepalivedvrrp Registering gratuitous ARP shared channel Did keepalived coredump No This adds initial mkosi support to keepalived and will deliver bootable fedora test vm with changes in current git the other distros probably needs some work since I just threw this together in a jiffie and Arch usually has some packaging quirks while Debian is usually far behind other distros etc Basically what needs to be done is Arch pacman S mkosi Debian aptget install y mkosi Fedora dnf install mkosi git clone cd keepalived sudo mkosi and it will built an Fedora image with current git and run it and you should be able to ssh into it as root with the root password CHANGEME If you want to throw away the build simply delete the clone of the repo This setup is a throw away one time use test vm setup of the git repository as in you cannot update or install anything on the image but you can log into it and make local modifications If the intent is to deliver a full blown vm tightly integrated with tests or act as an deliverable for customers to deploy in cloud or on premis or on hardware this needs more work If the intent would be to just use mkosi to check does keepalive build on X distros stuff can be removed you dont need bootable vms for that just the output from mkosi when it generates the image Its just a matter of were to go from here if mkosi built images are considered useful for the project Disclaimer I know I am using sorryserver feature in wrong way but since I spent some time with debugging I want to share my findings and I believe even discussion could be helpful for the project Issue When there is virtual server configuration with sorryserver exactly same like one of realserver service is unable to recover properly during transition from sorry server stage back when twin realserver comes up first Keepalived simply failed to add realserver because of duplicity in IPVS but thinks everything is OK I am using this setup to mitigate complete out of service when backend health checks are implemented incorrectly My solution I can see two minor caveants in my solution When inhibitonfailure is used for real servers it has to be used for sorry server also or same behavior occurs There is very short moment during status transition when no server is present in IPVS structure which may result in dropping some connections in very high load Describe the bug We have Keepalived handling Tarantool in multishard configuration We have shards on a server each could be master or replica and should then set specified IP address on a specified device name Basically we have two vrrpinstance for each shard because master and replica could became MASTER in terms of KA according to Tarantool chard state We use scripts to control the state of a Tarantool shard Here is a typical shard configuration vrrpscript chktntfiledb pri script etckeepalivedscriptschecknsh primary interval timeout fall rise vrrpscript chktntfiledb rpl script etckeepalivedscriptschecknsh connected interval timeout fall rise vrrpinstance TNTFILEDB PRI interface eth state BACKUP nopreempt virtualrouterid priority advertint authentication authtype AH authpass PASS unicastsrcip xxx unicastpeer xxx virtualipaddress xxx dev master trackscript chktntfiledb pri vrrpinstance TNTFILEDB RPL interface eth state BACKUP nopreempt virtualrouterid priority advertint authentication authtype AH authpass PASS unicastsrcip xxx unicastpeer xxx virtualipaddress xxx dev slave trackscript chktntfiledb rpl The opposite side configuration is the same except IP addresses they point one on each other The other shard configuration is equal except port The script content is the fallows binbash usrbinecho lua boxinfostatus usrbinnc w localhost usrbingrep q Since we have shards on the same server we have the above script that uses netcat for one couple of shards and the other couple have bash magic binbash exec devtcplocalhost usrbintimeout usrbinecho e lua boxinfostatus nexit usrbintimeout usrbingrep q All two scripts have timeouts hardcoded into them Both accept two parameters port and the word we expect from Tarantool to determine if it is master or replica What we found is that at some random moment KA will start showing errors in logs T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is already running expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Child PID failed to terminate after kill T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb pri is being timed out expect idle skipping run T ocldfiledb Keepalivedvrrp Track script chktntfiledb rpl is being timed out expect idle skipping run Already running message seems to be reasonable as scripts tend not to end in second interval as well as being timing out Both seems to be peak load related This messages start to appear time to time and then gone after several repetitions without triggering state change But failed to terminate after kill once appeared will keep on repeating in log each interval seconds each second in our case until KA reload or restart More interesting none of this PIDs exist in system at the moment I find KA in that condition etckeepalived ps aux grep E root pts S grep colourauto E Besides Ive seen KA triggering state change on Tarantool failing to respond in timeout and then returning MASTER back again a couple of seconds later without going into failed to terminate after kill condition So this seems to be KA internal error not related to load The worst part of this is once KA failed this way it will loose control over affected instances I have modified checkscript to always return non zero return code and chktntfiledb pri remained in the MASTER state even the corresponding script was returning chktntfiledb pri monitored by the same script switched to the FAULT state Expected behavior KA is not triggered on missing PIDs No false error messages in logs Keepalived version Keepalived v CopyrightC Alexandre Cassen acassengmailcom Built with kernel headers for Linux Running on Linux el x SMP Mon May UTC configure options buildx redhatlinuxgnu hostx redhatlinuxgnu programprefix disabledependencytracking prefixusr execprefixusr bindirusrbin sbindirusrsbin sysconfdiretc datadirusrshare includedirusrinclude libdirusrlib libexecdirusrlibexec localstatedirvar sharedstatedirvarlib mandirusrshareman infodirusrshareinfo disablenftables disablelibiptc disablelibipset disablelibipsetdynamic disablesnmpreplyv forv enabledbus withinitsystemd buildaliasx redhatlinuxgnu hostaliasx redhatlinuxgnu PKGCONFIGPATHusrlib pkgconfigusrsharepkgconfig CFLAGSO g pipe Wall WpDFORTIFYSOURCE fexceptions fstackprotectorstrong paramsspbuffersize grecordgccswitches m mtunegeneric LDFLAGSWlzrelro Config options IPTABLESCMD LVS VRRP VRRPAUTH OLDCHKSUMCOMPAT FIBROUTING DBUS System options PIPE SIGNALFD INOTIFYINIT VSYSLOG EPOLLCREATE IPV ADVANCEDAPI RTAENCAP RTAEXPIRES RTAPREF FRATUNID RTAXCCALGO RTAXQUICKACK FRAOIFNAME IFAFLAGS IPMULTICASTALL NETLINUXIFHCOLLISION LIBIPTCLINUXNETIFHCOLLISION VRRPVMAC IFLALINKNETNSID CNPROC SOCKNONBLOCK SOCKCLOEXEC OPATH GLOBBRACE INET ADDRGENMODE SOMARK SCHEDRT SCHEDRESETONFORK Distro please complete the following information CentOS Linux release Core el x x on ocldfiledb q x Intel Core Processor Broadwell total cores Details of any containerisation or hosted service eg AWS oVirt VM System Log entries Once started to fail to terminate log will became endless Did keepalived coredump Never Additional context This happen only on master and never seen on a replica Even they are both equal oVirt VMs Describe the bug Weve experienced some issues with the automatic security updates of keepalived This happens when installing the keepalived package either via Ubuntu packages having automatic security updates activated or when installing the snap package as recommended iirc which has automatic updates that apparently cant be disabled When the update is triggered it results in a restart of the keepalived daemon not reload which causes a failover we currently do not use nopreempt Whats the recommended way of handling automatic security updates Is there a posibility to configure keepalived in a way that doesnt failover upon restarts To Reproduce Install keepalived and wait for an update Expected behavior The update process should never hardrestart the daemon unless it can be done so without any interuption of services Keepalived version Keepalived v Ubuntu apt package v g b from snap Distro please complete the following information Ubuntu LTS bionic beaver Did keepalived coredump No Describe the bug The following error appears in the logs Error Please add a shebang to script myscriptsh The script has a binsh shebang and file detects them as POSIX shell script ASCII text executable I suppose this is a false positive of the magic library Refrence code section Expected behavior Shebang is correctly recognized Keepalived version v g b worked fine with Distro please complete the following information Name Ubuntu Version Architecture x Did keepalived coredump No Just installed keepalived and tested the SNMPfix Sorry but with the fix from a new issue was possibly added While debugging the mentioned perlscript in again I found that the KEEPALIVEDMIBvirtualServerAddress is somehow a little bit strange snmpwalk v c c public localhost KEEPALIVEDMIBvirtualServerAddress KEEPALIVEDMIBvirtualServerAddress STRING KEEPALIVEDMIBvirtualServerAddress STRING KEEPALIVEDMIBvirtualServerAddress STRING KEEPALIVEDMIBvirtualServerAddress STRING KEEPALIVEDMIBvirtualServerAddress STRING KEEPALIVEDMIBvirtualServerAddress STRING Hello I found an issue in latest beta as of When we build vmac on top of an LACP bond when the bond is set down only the last vmac interfaces go to fault The issue was not reproduced under version ubuntu latest version available over public Ubuntu repos The issue was not reproduced when shutting physical interfaces Setup My machine has physical interface e and e which are part of bond Both physical interfaces as well as bond are up I create vlan subinterfaces bond to bond I then create vmac interfaces with a similar config vrrpinstance state BACKUP interface bond usevmac vrrp virtualrouterid priority advertint preemptdelay authentication authtype PASS authpass a dswd virtualipaddress mcastsrcip and start keepalived rootbzperflab vr homedclabautvrouter keepalived f runconfkeepalivedconf Under version ubuntu I can see that I have indeed IPs on vrrp interfaces rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l I shut bond then I do not have any IP left because all instances went to FAULT state rootbzperflab vr homedclabautvrouter ip link set down dev bond rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l Under latest Beta version I create the same setup physical bond bond vlan keepalived as before At the beginning I have the same result rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l Then if I shut bond I can see that I still have IPs rootbzperflab vr homedclabautvrouter ip link set down dev bond rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l We activated the json output so we can have a better view of the situation rootbzperflab vr homedclabautvrouter vrrprecap Instance Interface Addresses Version Priority Master prio State Last Transition vrrp Master vrrp Master vrrp Master vrrp Master vrrp Master vrrp Master vrrp Master vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault Now if I Set bond up Set down the physical interfaces that are part of the bond then all interfaces do go to fault state rootbzperflab vr homedclabautvrouter ip link set up dev bond rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l rootbzperflab vr homedclabautvrouter ip link set down dev e rootbzperflab vr homedclabautvrouter ip link set down dev e rootbzperflab vr homedclabautvrouter ip a grep vrrp grep inet wc l rootbzperflab vr homedclabautvrouter vrrprecap Instance Interface Addresses Version Priority Master prio State Last Transition vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault vrrp Fault Which limits the scope of the problem in case of hardware failure on the other side switch down cable down etc then the interfaces do go to fault Hi Want to check if there is a docker imageDockerfile for keepalived which is officially supported I could not find one under dockerhub official images If not want to check if there is any plan to add an official keepalived image to dockerhub 