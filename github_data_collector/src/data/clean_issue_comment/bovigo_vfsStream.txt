In this pr I introduced build stages in travis setup To make more clear what is happening Besides that I introduced an environment variable DEPENDENCIES which extends the build matrix with a second axel Since we are building a library that supports a range of versions of its dependencies we should test against that range From now on we are sure that all tests will pass on our lowest and highest dependencies now executed phpstan phpcs phpunit coverage phpunit vfsStreamWrapperdirrewinddir is supposed to return a bool but returns void instead It seems vfsStreamContainerIteratorrewind should be fixed so it returns a bool then the stream wrapper can stay simple and return whatever value that returns Something like this should fix the issue php vfsStreamContainerIterator public function rewind success resetthischildren return success false Following up on I propose we implement a blacklist of characters For example is now blacklisted after But the character is also invalid on macOS and Windows not sure about Linux Are there any other characters that we should disallow in filenames and directory names Install Infection mutation testing to help detect any untested code Add it to the build process The build should probably enforce a minimum Mutation Score Indicator MSI Install psalm Add it to the build process psalm and phpstan used together should ensure quality static analysis since they both focus on different types of issues Since we are a new team within an existing project I would like to define a new github project with issues and notes to make clear what our focus will be Focus of the project I think it is clear for everyone in the team that we are working on a library that is able to mock a file system Currently the project has focused on mocking files and directories Since those are the most important members of a file system Are there any other features we might want to support I dont really have an overview of the supported php file system methods within this library QA From my point of view I would like to add a number of tools and checks to make sure we are delivering a stable library code style check prefer phpstan psaml composerequirechecker infection mutation testing I like to use psaml and phpstan together since they both focus on different types of issues I think it is wise to split the test bench into different parts Currently the unittests and integration tests are kind of mixed in the same directory Which makes it hard to understand what is actually tested Personally I would prefer to use phpunit to do the unittesting and use a tool like behat to test on a functional level Communication Currently we only have github issues to communicate with the team Do we want to start some chat channel Gitter Slack I would like to hear your additions So we can get started as a team instead of being a group of developers that do random contributions to the project From redacted php root vfsStreamsetupphpunit rootchownvfsStreamgetCurrentUser rootchgrpvfsStreamgetCurrentGroup file new vfsStreamFilefileext filechownvfsStreamgetCurrentUser filechgrpvfsStreamgetCurrentGroup filecontentfoobar rootaddChildfile vardumpisreadablefileurl Using version I get the following false Using version xdev I get the following true As I dont have an explanation for this different behaviour right away this must be investigated Feature to test fopen error cases to simulate race conditions on fopen that is when a readable file becomes unreadable on fopen instantly for example to simulate a filesystem failure To test some critical paths I would like to test opening a file that is perfectly readable and a file but then to fail return false on the fopen call Just to simulate a failure case eg the file is deleted between an internalized isfile isreadable check before the line where fopen is called that fopen call could return false which is handled in the code and should but I cant test for that path with vfsstream Looking into the implementation for the streamopen I didnt found any option to simulate such a failure public function openstring file void if isfilepath isreadablefile throw new BadMethodCallExceptionNot a readable file result fopenfile r if false result cant test for this path in code I have been using this to test some CSV code that makes use of SplFileObject for counting the lines in the CSV file I have found that using vfs does not return the same count Tests fails pass dataProvider countVfsDataProvider public function testCountVfsdata expected file vfsStreamurltmpdatacsv fileputcontentsfile data file new SplFileObjectfile r fileseekfilegetSize thisassertEqualsexpected filekey passes dataProvider countVfsDataProvider public function testCountVfsNativedata expected file tmpdatacsv fileputcontentsfile data file new SplFileObjectfile r fileseekfilegetSize thisassertEqualsexpected filekey public function countVfsDataProvider return test header r n r n r n r n test header n n n test header n n test header n n n n n test header n test test n test r n test n n test r n r n Test output There were failures VfsTesttestCountVfs with data set test header Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test header Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test header Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test header Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test Failed asserting that matches expected pathtovfstestphp VfsTesttestCountVfs with data set test Failed asserting that matches expected FAILURES Tests Assertions Failures 