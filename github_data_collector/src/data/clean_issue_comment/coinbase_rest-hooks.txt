Is your feature request related to a problem Please describe Maximize performance Describe the solution youd like Ensure this actually has performance benefits Setup const mySchema new schemaEntitytacos const data for let i i N i datapush id i type fooi normalizedata mySchema Normalization times in milliseconds for runs N entities current loose transformation N entities current loose transformation Additional context Inspiration from We already do loose spreads but since resthooks should only be using normalizr after json parsing cycle detection is probably not needed Motivation Does this solve a bug Enable a new usecase Improve an existing behavior Concrete examples are helpful here Test coverage all the things Solution What is the solution here from a high level What are the key technical decisions and why were they made Waiting on next tsjest release so it supports root level babel configs Currently its bugging out due to having to just read the babel file directly which transforms the path wrong Should keep existing type just change the Params data Entity does not match response bar check key name foo bar Should mark error with status so treated as network error Should link to rest hooks docs Describe the solution youd like Custom manager Shows connection disconnection lifecycles Shows intercepting subunsub actions Shows dispatching receives on message pushes Describe the solution youd like Broken down into two use cases Web React native adapt to work with async middlewares Describe the solution youd like Include multiple methods like reactlightyear simply using the suspense fallback mechanism and not loading any data integration with things like afterjs using something similar to Ideally example code will have been tested Is your feature request related to a problem Please describe A clear and concise description of what the problem is Ex Im always frustrated when Describe the solution youd like A clear and concise description of what you want to happen Describe alternatives youve considered A clear and concise description of any alternative solutions or features youve considered Additional context Add any other context or screenshots about the feature request here Is your feature request related to a problem Please describe Rest Hooks uses memoization to cache certain method calls that arent expected to change for the lifetime of a given class or object Lodashmemoize is not even the best general memoizer but there could be a better specialcase method for our uses Describe the solution youd like Not increase the LOC in actual Rest Hooks ie one line wrapper Have a benchmark to back up claims of good performance As small code add as possible Key on this Sometimes it will be static class and others the instance object Describe alternatives youve considered Since were essentially attaching based on this a simple custom implementation is not out of the question Additional context Stumbled upon recently Though this is a more generalpurpose solution Have some example to implement infinite scroll