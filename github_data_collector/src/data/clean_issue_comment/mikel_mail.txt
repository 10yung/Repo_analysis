Following up on an old PR I encountered the following error after setting ActionMailerBasesmtpsettingsopensslverifymode to peer SSLconnect returned errno stateerror certificate verify failed unable to get local issuer certificate The way to fix this for me is manually setting the smtpsettings cafile but the cafile is an undocumented configuration parameter and thus not really clear to users I have now monkey patched my application with the change from this PR Adding this as a default parameter does not harm the existing behaviour as far as I have found going through code and manual testing In a workaround was introduced for broken dotstuffing in NetSMTP in older Ruby versions However the workaround is applied to all versions of Ruby causing additional leading dots in the email being sent Also this PR fixes a bug in the original workaround We only need to do manual dotstuffing if the last line of the email contains only a dot with no trailing newline The tests imply that we also need to dotstuff all lines with single dots but that is wrong and also causes additional dots in the email being sent Steps to reproduce Mailnew do m mfrom fromexamplecom mto toexamplecom mbody foo n enddeliver Expected body as displayed in email client foo Actual body foo fix a copypaste error in Maillast prior to conversation fix decode example in README Here I am not sure but calling decode on a mailobject gives me Can not decode an entire message try calling decoded on the various fields and body or parts if it is a multipart message Although Id find it pretty cool if decode gives me whatever textbodypart there is after conversation Slightly improved message of NoMethodError in Messagedecode Agreed on further improvements should include choosing a more distinct Error class Fixes Were using v of the mail gem with ruby Some of our users are typoing their names not their email addresses in ways that are causing syntax errors when we try and send the email Here are some examples one that works fine and two different failing examples names have been changed but the typos have been kept the same Working to Joe Bloggs joebloggsexamplecom m Mailnew mto to MailMessage Multipart false Headers To Joe Bloggs joebloggsexamplecom Failure to Joe B loggs joebloggsexamplecom m Mailnew mto to MailMessage Multipart false Headers To Joe Bloggs joebloggsexamplecom Falure to JOE BLOGGS joebloggsexamplecom m Mailnew mto to MailMessage Multipart false Headers To JOE BLOGGS joebloggsexamplecom When we try and send the failures we get the error NetSMTPSyntaxError Syntax error in parameters appvendorruby libruby netsmtprb in checkresponse appvendorruby libruby netsmtprb in getok appvendorruby libruby netsmtprb in mailfrom appvendorruby libruby netsmtprb in sendmessage gemsmail libmailnetworkdeliverymethodssmtpconnectionrb in deliver gemsmail libmailnetworkdeliverymethodssmtprb in block in deliver appvendorruby libruby netsmtprb in start gemsmail libmailnetworkdeliverymethodssmtprb in startsmtpsession gemsmail libmailnetworkdeliverymethodssmtprb in deliver gemsmail libmailmessagerb in deliver Ive tried to find out what the allowed characters in the to are but I havent been able to find it Im wondering if there is something we could do escape the characters I tried CGIescape but it didnt seem to have the effect I wanted JOEBLOGGS C Cjoebloggs examplecom E MailMessage Multipart false Headers To JOEBLOGGS C Cjoebloggs examplecom E Any advice on how we could prevent the errors and allow the emails to be sent correctly would be appreciated A library such as this should ideally not report errors and warnings using Kernelwarn or similar This is because it is difficult for callers to detect when such events occur Intercepting Warningwarn may work However this can get complicated if the caller is a toplevel app that needs to report warnings to a console One way round this would be to report all such events through a utility method That could then be overridden without affecting other code This PR allows the SMTPsettings to be configured via a url eg ruby Maildefaults do deliverymethod smtp url smtpsuser gmailcomapppasswordsmtpgmailcom end The Travisbuilds seemed to fail for reasons unrelated to the code Fixing this failed so I setup separate builds reachable via the at The included smtpdelivery examples for gmail and fastmail were successfully tested Fixes First attempt at a fix In this second attempt I tried to scope down the issue to where the issue appears most probable inline images We do not add a default filename for the nameless attachment rather just ensure that the message part is considered an attachment if it is an inline image