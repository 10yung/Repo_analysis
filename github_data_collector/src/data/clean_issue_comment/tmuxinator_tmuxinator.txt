It would be great if you could specify a command to run in a tmux window directly eg top irssi ssh Currently tmuxinator always creates a window with a shell and then passes the commands Best regards Segaja tmuxinator currently coerces tmuxs version to a float for use when conditionally working around legacy behavior This approach is very brittle and should be replaced by grouping exceptional versions into aliased lists eg NODEFAULTPATH and checking the current version for inclusion in the relevant list tmux has now had at least one official release containing a string in the version number a and theres also currently a prerelease which reports its version as next These two version numbers currently result in unexpected behavior a gets coerced into and next gets coerced into nil The tmux project could also start tagging versions using semver or some other approach which could cause the current strategy to fail in other ways Per the conversation in the Project class tmux helper methods could benefit from a rework eg make tmuxcommand private and possibly inline tmuxoptions and reduce the potential for bugs like to be reintroduced in the future Is your feature request related to a problem Please describe Installing on a fresh macOS Mojave system gives an error involving the stock version of ruby that comes with the operating system It is unclear how to remedy this error from the README Describe the solution youd like At the risk of making the installation docs less OSagnostic it would be great to have an instruction on how to update to a version of ruby that is supported even if this is in the form of something like Mac users should use rbenv to update the stock ruby version I am not familiar with the Ruby ecosystem tried getting a later version of Ruby via rvm only to find that tmuxinator wouldnt start after installation The one hint in the docs around using prewindow specified rbenv which is a different Ruby version management tool Describe alternatives youve considered would be a great solution to this problem though this should be a lower cost solution Running set eu in generated shell commandsscripts will cause them to fail if any individual step fails or the script tries to reference and undefined variable This is desirable because it can help pinpoint wherewhy the script is failing prevent it from having any unintended side effects if it continues to run when it shouldnt and generally makes the scripts more robust As far as I know there are no downsides For future reference this blog post is a great primer on Bash strict mode Is your feature request related to a problem Please describe In jgandt raised the possibility of using other file formats namely the Procfile format to configure a tmuxinator project An open question is there is a demand for a more general plugin API at first go for file parsers and how great that demand would be Personally I have some concerns about going down this route but if sufficient interest exists in the community then maybe its worth the time investment So please comment with or an existing a file format you would be interested in seeing parseable by tmuxinator Wed also be interested in getting a gauge on if people would be willing to contribute in the form of buildingsupporting such a plugin This is just a Q D proof of concept to show the parsing mechanism I have not written tests I have not squashed commits Lots of other stuff was left out so that we can initiate a conversation about the mechanism and architecture Is your feature request related to a problem Please describe I would like to use tmuxinator to launch processes listed in a Procfile Describe the solution youd like As an extension of tmuxinator I would like to be able to launch processes listed in a Procfile I would like to launch each process in a named tmux window or pane It seems a nice extension to tmuxinator based on an industry defined spec the Procfile Describe alternatives youve considered There are theoretically some tools out there to accomplish this but none have the polish nor pedigree of tmuxinator They also dont have the same amount of configuration available I could write a separate utility myself but it seems to fit in tmuxinators wheelhouse In addition it would get more visibility if it was a feature in such a widely used product I could convert my Procfile to a tmuxinator config but then I have to keep the tmuxinator config up to date A conversion to strictly using tmuxinator is not an option as the Procfile is used in production by Heroku Also other members of my team may not leverage tmuxinator They might instead use foreman or overmind Additional context Im happy to take a crack at writing the extension but I figured I should ask if its something you would consider valuable before I put time into it If I do write it I would prefer to have your input on the design I can never remember what layout I want with the current naming using vertical and horizontal For example evenhorizontal creates three vertically oriented panes that span horizontally across the terminal Describe the solution youd like Backwardcompatible new layout naming using the terms rows and columns ie evenhorizontal evencolumns evenvertical evenrows Describe alternatives youve considered Perhaps a command that prints the layouts in ASCII Is your feature request related to a problem Please describe I want to use the different docker host for different projects The projects boot by tmuxinator So that I have to run the export environments command in every windows and every panels I know the command of prewindow but it does not work for new window or panel after tmux ran Describe the solution youd like It is better to add an option like environments It effective for every window and panel even the new window 