 Here is everything you need to know about this upgrade Please take a good look at what changed and the test results before merging this pull request What changed minimagick Repo Changelog details summaryRelease Notessummary h a href blockquoteul liStill pick up ImageMagick over GraphicsMagick if both are installedli ulblockquote pemDoes any of this look wrong a href let us knowaemp details details summaryCommitssummary pa href the full diff on Githuba The new version differs by commitsp ul lia href to codeali lia href prioritize ImageMagick before GraphicsMagickcodeali ul details Depfu Status Depfu will automatically keep this PR conflictfree as long as you dont add any commits to this branch yourself You can also trigger a rebase manually by commenting with depfu rebase detailssummaryAll Depfu comment commandssummary blockquotedl dt depfu rebasedtddRebases against your default branch and redoes this updatedd dt depfu recreatedtddRecreates this PR overwriting any edits that youve made to itdd dt depfu mergedtddMerges this PR once your tests are passing and conflicts are resolveddd dt depfu closedtddCloses this PR and deletes the branchdd dt depfu reopendtddRestores the branch and reopens this PR if its closeddd dt depfu pausedtddIgnores all future updates for this dependency and closes this PRdd dt depfu pause minormajor dtddIgnores all future minormajor updates for this dependency and closes this PRdd dt depfu resumedtddFuture versions of this dependency will create PRs again leaves this PR as isdd dlblockquote details Looks like the time has finally come when we should reconsider how we package this gem Scripting language runtimes such as Python Ruby and Perl are included in macOS for compatibility with legacy software Future versions of macOS won t include scripting language runtimes by default and might require you to install additional packages If your software depends on scripting languages it s recommended that you bundle the runtime within the app In the shortterm I can update our docs to include help installing Ruby on MacOS homebrew will probably be the easiest approach Other options might include a downloadable executable with Ruby binary and gem dependencies baked in using a packaging tool rewrite in Rust and build for multiple platforms something else mroth any thoughts Whatever we do could make up a release I recently moved to a new computer with a fresh install of macOS Mojave and since then Fork hangs on commitamend when lolcommits is enabled The commit happens and the photo taken but that commit process just hangs This didnt happen on my old MacBook with the same version of Mojave I cant figure out whats going on Adding the fork andor stealth flags does nothing img width altScreen Shot at src Video of the issue In the video you see this happening on an iMac I was using that while I waited for a new computer Im also experiencing this on a MBP lolcommits fork git This project is now more than years old and should probably be considered production ready at this point As the project claims to follow semver you should probably consider releasing the next version as to convey the maturity of the project and follow semver rules Sometimes I see a picture and I think where the hell was I sitting back then So would it be possible to add the Geo location to the metadata of the image Im not sure yet how to fetch that location but it would be awesome cool and the possibilities of mapping locations of all the lolcommits afterwards would be awesome Global config is copied into new project directories when they are made Currently in the CLI we have this fun snippet designed to handle the case where you are in a subdirectory of a git repo and want to do a lolcommits command ruby def selfchangedirtorootorrepo debug Walking up dir tree loop do cur Fileexpandpath nxt Fileexpandpath cur if nxt cur warn Repository root not found return end return if VCSInforeporoot Dirchdirnxt end end This is actually invoked as part of the CLI logic and the main library just assumes the PWD is in the correct place Rather instead of manually walking the directory hierarchy upwards we should use the builtin VCS support in both git and hg to determine the proper paths This couldshould be handled transparently in the libbackends library outside of the CLI so things just work when using lolcommits as an API For reference the commands we would probably be utilizing are git revparse showtoplevel git revparse gitdir hg root This will have the added benefit of making lolcommits work with git submodules which store their info somewhere else besides PWDgit but gitdir will find it successfully Currently in liblolcommitsrb we require all external gems and libraries at the root level of the library ruby require minimagick require coreextminimagickutilities require fileutils require git require open require methadone require date require mercurialruby require coreextmercurialrubyshell We should refactor to have only the files that actually use these gem deps require them this is best practice for a project of this size and will aide in future refactors because we can understand where our deps actually come from WIP SAMPLE CODE BROKEN DO NOT MERGE For discussion with matthutchinson at your convenience a slow burn on this makes sense no rush beginning of a patch that refactors the CLI UI of lolcommits to be significantly more modular and easy to understand byusing subcommands Previously there was only one lolcommits command and actions were emulated by a bunch of logic around now different option flags were treated All flags were global so it was unclear what options were compatible with which actions etc Now with subcommands lolcommits help Usage lolcommits OPTIONS SUBCOMMAND ARG Parameters SUBCOMMAND subcommand ARG subcommand arguments Subcommands enable Install lolcommits for current repository disable Uninstall lolcommits for current repository capture Capture image for most recent git commit history Historic archives of captured moments devices Detect and list attached camera devices plugins List or configure lolcommits plugins Options version display version and exit debug debug output default LOLCOMMITSDEBUG h help print help lolcommits capture help Usage lolcommits capture OPTIONS Options device NAME Optional device name see lolcommits devices default LOLCOMMITSDEVICE a animate SECONDS Enable animated GIF capture for duration default LOLCOMMITSANIMATE or w delay SECONDS Delay capture to enable camera warmup default LOLCOMMITSDELAY or fork Fork capture process to background default LOLCOMMITSFORK or false stealth Capture image in stealth mode eg no output default LOLCOMMITSSTEALTH or false h help print help lolcommits plugins help Usage lolcommits plugins OPTIONS SUBCOMMAND ARG Parameters SUBCOMMAND subcommand ARG subcommand arguments Subcommands list List all available plugins config Configure a plugin showconfig show config file Options h help print help lolcommits plugins list list of plugins outputted lolcommits plugins config slack etc Since we havent hit v yet we have a chance to make breaking changes to the UI So on the road to along with the plugin extraction Id like to bring this up for consideration The binlolcommits was one of the messiest areas of the code so this also starts on a refactor and cleanup but trying to confine to the UI changes for now We get a lot for free from using Clamp here such as automatic handling of environment variables linked to option flags with validation of content type This removes quite a bit of boilerplate from the code and I believe makes things more reliable Main purpose of this PR at present is to have a discussion about the UI tradeoffs here If we decide we do want to go down this path some other things well need to discuss This sets the stage for each of the commands to be broken into its own file and isolated that can happen pretty quickly but I didnt want to do it just yet so we could more easily see where the duplication and redundancy was after porting over the CLI Obviously the BDD tests would need to be updated as well This breaks the ability to pass a set of default options to the Installer stub on enable Previously this took advantage of the side effect that all flags were global While we could certainly duplicate the flags for enable I think its worth considering a different approach Im not convinced putting UI flags in the stub is a good idea At a minimum wed probably want to change to installing these options as environment variable sets in the stub instead Rationalize what is going on with changedirtorootorrepo I think there might be a better way to accomplish this but need to look into what the original impetus was Either way it should probably be moved into a library and out of the CLI logic Right now this introduces one small dependency but does not allow us to eliminate the Methadone dependency since we rely on MethadoneCLILogging across the application We can preserve this dependency for logging but perhaps worth thinking about whether something else fits the needs better In any event we also would need to refactor the CLILogging imports better since previously it was Included into global scope in the main bin and all the places we called it sprinkled across the code seem to just rely on it being present PS Out of scope for this initial PR but it makes me realize that it may be worthwhile longer term to refactor and rationalize the API of lolcommits outside of the command line binary It should probably be possible to move all the logic into the library such that the gem could be used from within Ruby with signature such as Lolcommitsactionnamepath options taking a string and a defined Options struct and the CLI code would simply then handle constructing the correct Options and displaying errors that are bubbled back up This is obviously a fairly large project however Lolcommits works with Tower only the fork option doesnt work Is this a known issue