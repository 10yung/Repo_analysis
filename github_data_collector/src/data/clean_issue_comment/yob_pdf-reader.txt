Hi Im working with some tagged PDF and I must extract array from them This arrays are tagged and I think its the only way to parse them properly I mean the rows have different cell size and the arrays could be on different pages So Im wondering if this PDFReader API is able to manage this tagged PDF Thank you for your attention using snippet pPDFReadernewpath ap ppagesmap page pagetextsplit n ap being awesome print a D D F C C A F r C n S R i R a B a d t e Q I s E t n i e i L A N i S a d d E R E S E e e u e R E A u D p a I A N i L i c E C L V m o S H E R e m R I n m O t n N d e D D D B B C E M G P i o I B B l a R v r P l l R g S S n m d G n d F C A t s s t n I s l e I h u n S R R l A A D D o N y t e Q N E d b b t E e C F A N S e i rc x O t H E R E E R s t t l X Y R E A D e M e d I A N E R r S E C L A a n P S H I T a m a R U i u d A r T I M U N n T n P t F T i i n a C i x t s D D N N D o D d t t d d T S t o e S Q d d e e A A D l t l o e e o f S S n r r s a com t D T u t a m i T u m a r E A C a V y i o t a a d F n S r i A r e n T o d e C r t a l A e e T F c d c t R R m o M A m m o p O n r m n d N u i i T a i a P e e C n n e a t s p N M o o a v t i z S n a e u s i d i o C u s l r t m l e e n s r s i v o c t u d v i c t n u s t c c n n f a n c e ce e d zt t e e e u p n s r e s q A r u u l v u t o n e e e w c o w m m m m t a a n o d n e t ua o a d s o a d u p b o q t e a N n o i s r C s n a a s t c e i V n o s Ill sent you the original PDF via mail edit Ive tested against current master dabde b fc c fd b d When a pdf has a lot of really small characters in it reading the PDF can use a huge amount of memory in pagelayoutrb def tos return if runsempty page rowcounttimesmap i colcount runseach do run xpos runx xoffset colmultiplierround ypos rowcount runy rowmultiplierround if ypos rowcount ypos xpos colcount xpos localstringinsertpage ypos runtext xpos end end interestingrowspagemap rstripjoin n end specifically the second line of this method creates a really large array in some cases the dimensions of this array are calculated using internalshowtext in pagetextreceiverrb which is using the average font size of all characters when there are a lot of characters with tiny font sizes as pdfs often have like small symbols etc it means the widths and heights of the rows and columns to create this array will be super small thus resulting in cases of k x k or even more arrays this is such a big array that its crashing our application in these cases EugeneNF has also been working on this Improves PageState and PageTextReceiver so they track additional elements of the graphics state like colorspace color alpha level etc Im not sure if Ill merge this yet but its potentially helpful for improving text extraction For example we could skip text with an alpha value of because its not visible to users The problem occurs in one of the fonts embedded in the PDF To make it easier to reproduce Ive attached just the decoded cmap as a file To reproduce the error from the cmap file PDFReaderCMapnewFilereadpathtoproblemcmap Parsing breaks here CIDSystemInfo It doesnt seem like cmaps suport the begin dictionary operator It should be using the begin keyword as specified in the spec That said we may be able to patch the cmap parsing to support this as an alternative syntax ELPACSummativeSampleSSRGr English pdf problemcmaptxt I notice that some PDFs have extra apparently spurious text in them eg some bank statements presumably the bank puts them into to make it hard to parse them An example is where you have a transparent text run of in one text run and an amount of say in a text run that overlaps the PDF Readers Page text method outputs these two as so it incorrectly looks like the amount is instead of The overlap also occurs when the ends in the column immediately before the If I view the PDF in Evince the spurious text is rendered transparently so the document looks fine unless I select the text for copy and paste In the pasted output the two strings appear with a space between them ie So its not ideal but at least the you can recognise that the amount is and not The PageLayout tos method is doing the hard work of mapping the TextRun objects and rendering them to a string It calls localstringinsert to insert each text at its xpos and ypos xpos and ypos are converted into columns from the raw x and y coords Brainstorming there might be a couple of ways around this I have tried moving the text runs that overlap prior to calling PageLayouts tos method eg at the end of PageLayouts initialize method to ensure that there is least one column between them This fixes the issue I get instead of so it matches how Evince works I did it by grouping the text runs into a hash of y column ary of TextRun and then sorting each ary by its start x column Then I check for overlap by comparing the endx column of one text run against the following text runs x column The disadvantage of doing this is that potentially you could lose text off the right hand side of the page because tos checks that the text run starts within the expected number of columns on the page before inserting it Maybe we could remove that check so the text isnt lost We could add an alternative method to pagetext that returns the TextRun objects directly eg as a hash of ycolumn ary of TextRun or as an Array of ary of TextRun If the TextRun object had methods to return its xcol and endxcol as well as the raw x and endx the caller could figure out for themself where they are located on the page As a side benefit the caller could also see the TextRun attributes like fontsize and width We could even make the TextRun store its font so the user could see which font is applicable which might help with This might also be related to Im using pdfreader v Continuing a conversation from here for more visibility I am looking at prepareregulartoken because it is at the top of my profiles for some of our tests I dont know how much effort has already been put in so I dont know if I should bother poking yet The method looks like a handbuild byteoriented lexer using either StringIOIO tho the constructor seems out of date on that Has any effort been made to benchmark this or optimize it I was thinking a switch to wrapping the IO in a StringScanner instance might allow better lexing performance and fewer objects being made For example all those dups might be able to be thrown away because youd just get the finished token from StringScanner in one fell swoop I can poke at this but Id love to know others have and its been thoroughly explored and maxed out already Hi Team If we want to access bullet color or bullet style in the pdf document there are no existing methods to do so Is there a chance for the new enhancement to access the bullet style It will be helpful for us if we can achieve this Regards Santhoshi I have a PDF I created with prawn and added metadata tags When I open it up in MacOS preview and do a get info my metadata is there it shows it But when I open it up with PDFReader and look at readermetadata I get nil back 