Code from override fun observeowner LifecycleOwner observer Observerin T val observeSinceVersion version val wrapper observerWrappersgetOrElseobserver Observer if isPublish version observeSinceVersion observeronChangedit observerWrappersputIfAbsentobserver wrapper superobserveowner wrapper override fun observeForeverobserver Observerin T val observeSinceVersion version val wrapper observerWrappersgetOrElseobserver Observer if isPublish version observeSinceVersion observeronChangedit observerWrappersputIfAbsentobserver wrapper superobserveForeverwrapper override fun removeObserverobserver Observerin T observerWrappersgetobserverlet superremoveObserverit observerWrappersremoveIfPresentobserver When we call observeForever all looks good and calling removeObserver with same Observer working as expected But if we call observe and later lifecycle move to Destroyed state system call removeObserver with wrapped Observer and we try to find it in observedWrappers among nonwrapped observers Pair instances with weak references to observers just accumulated in array until livedata instance not GCed I dont know clear solution of this problem suppose we can check wrapped and nonwrapped observers both when removing Overload resolution ambiguity all this function match fun T R LiveDataTmapmapper T R LiveDataR createMediatorthis MapExtT Rmapper fun T R SupportMediatorLiveDataTmapmapper T R SupportMediatorLiveDataR createMediatorthis MapExtT R returnMapExt mapperit Shows error on using map extension function chaos in choosing map function No more need to specify explicitly LiveDatas nullability by toKtx or toNullableKtx functions the compiler will do this job There are places where MutableLiveData is required for example in two way data binding It may be better to make MutableLiveDataKtx a subtype of MutableLiveData as these dependencies are hard to change Downside of this will be code duplication and the fact that MutableLiveDataKtx would not be subtype of LiveDataKtx anymore I can make a pull request if you consider this as a good idea