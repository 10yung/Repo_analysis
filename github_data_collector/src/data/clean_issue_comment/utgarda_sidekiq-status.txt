When I call performasync on an encrypted worker it hits the branch in apirb is a print line I added that anonymizes things This caused the value encrypted data to be encrypted and stored in redis When the job is run it appropriately decrypts the data and passes that literal string encrypted data to the method This plugin calls displayargs which then calls down into the base implementation of displayargs Making my jobs that need encryption bypass calling include SidekiqStatusWorker has fixed the issue for me I dont know the middleware stack well enough to know if there is a fix for this or the solution is simply not using status workers but I thought I should file something to help others out Im trying to test some controllers of my application with rspec one of them use background jobs with sidekiq and sidekiqstatus I folowed the guide to enabling testing for inline mode but when i launch tests RedisCannotConnectError exceptions is fired The worker is launched inside a method of my controller with jobid ProductImportWorkerperformasyncfilepath in spechelperrb i added the folowing lines ruby require sidekiqtestinginline require sidekiqstatustestinginline SidekiqTestinginline Folowing the code of my worker class ruby class ProductImportWorker include SidekiqWorker include SidekiqStatusWorker enables job status tracking def performfilepath debug false loggerinfo ProductImportWorker START import from file filepath read all importdata hash from file saved in temp directory unless Fileexistfilepath raise source file not found end importdata Fileopenfilepath r fromfile Marshalloadfromfile moltiplicator importdata size loggerinfo ProductImportWorker START import importdata size products set first sidekiq status percentage end message at Started ActiveRecordBasetransaction do importdataeachwithindex do producthash index if debug sleep else for each product verify if it exists then update it else create a new one internalcode producthashdiginternalcode existingproduct Productfindbyinternalcodeinternalcodetos if existingproduct Update existing product existingproductupdateproducthash else Create a new product Productcreateproducthash end end percentage of completion overall process perc index moltiplicatortoi loggerinfo CREATED product index completion perc update sidekiq status percentage end message at perc Waiting end end Filedeletefilepath if Fileexistfilepath loggerinfo ProductImportWorker FINISH at Finish end end if i comment include SidekiqStatusWorker with all at commands the worker is executed and test pass so the sidekiqtestinginline works Seems that import require sidekiqstatustestinginline doesnt work properly someone has encountered the same problem If you pass a string value in for the class name the Moduleconstdefined will not return true if the constant has not yet been loaded In a Rails environment this can be a bummer due to the lazy loading in Rails To address this we can instead attempt to load the const and if a NameError occurs well just return nil as the original code would have done I ran into this when using the pushbulk feature of Sidekiq Jobs created using that method did not get created properly as status workers if the class name was a string and not yet loaded When I use getall I get an empty hash during my test Am I missing something Pressing the Remove button of completed jobs inside the Statuses tab leads to a This is the HTML element of the generated button html div classactions form actionstatuses methodpost input typehidden namejid valuea b input typehidden nameauthenticitytoken valuePHxU input typehidden namemethod valuedelete input typesubmit classbtn btndanger btnxs valueRemove form div I am mounting the dashboard using RackURLMap but it is mounted as the root and using current versions of everything This has me stumped because it will fail times out of but I cant understand it We are using and we have long running jobs which are not getting their expiration set After a first status redisttl sidekiqstatusid When finished redisttl sidekiqstatusid I am not able to replicate consistently But I have a test case that fails when running multiple times Linking to this issue I have a worker with a method that takes a long time to execute and would like to update the progress status within this method Currently my plan is to pass the job ID to the method and then periodically update it but i cannot work out how to do this I have only managed to retrieve the status but not set it class MyJob ApplicationJob queueas default def performargs total at slowmethodselfproviderjobid end end The other class with the method called in it class OtherClass def slowmethodjobid end Redis is up and running Background process is working normal On web monitor job is visible but statuses empty With simple sidekiqstatus functions from docs Im geting nil empty or false results Problem started when I changed my workstation to new one Please check my SO question about empty status for Sidekiq status in Redis SO detailed question Using Ruby Rails Redis Sidekiq Sidekiqstatus I noticed that I can get all of my jobs into the status reporting interface but mailers sent with deliverlater do not seem to be picked up Is there an easy way to include mailers as well