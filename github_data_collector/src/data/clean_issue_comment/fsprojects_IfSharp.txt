In docker I run docker run p fsprojectsifsharp I try to create a new notebook I NotebookApp Creating new notebook in I NotebookApp Writing notebooksigning key to homeifsharpuserlocalsharejupyternotebooksecret W NotebookApp POST apicontents Permission denied Untitledipynb W NotebookApp Permission denied Untitledipynb W NotebookApp POST apicontents ms referer Thank you for any help Hi I am trying to load a managed DLL that wraps an unmanaged so or dylib on Mac OS If I create a CLI app using dotnet I can get it to work if I copy to DLL and the dylib into the output folder As an FYI I have to rename the so to dylib If I create a simple test script in ifSharp r managedwrapperdll open System open LibraryName let main Librarysomeinitfunction ignore printfn Hello World from F main I get DllNotFoundException even though the DLL and the dylib are in the same folder where I execute jupyter notebook I have tried Putting so and dylib in the same folder setting DYLDLIBRARYPATH Various options from Related information Operating system Mac OS jupyter core jupyternotebook jupyter client jupyter lab dotnet Description This seems to more be an F bug related to a unification error with F anonymous record types possibly a dotnet restriction Repro steps F id name hello UtilTable Expected behavior Table output Actual behavior Error message Type constraint mismatch The type id int name string list is not compatible with type seqid int name string Known workarounds Define it within a module F open System module MUtil let Row columnsseqReflectionPropertyInfo itemA columns Seqmap fun p pGetValueitem Seqmap ConvertToString SeqtoArray let Table itemsseqA propertyNamesseqstring option let properties if propertyNamesIsSome then typeofAGetProperties Seqfilter fun x propertyNamesValue Seqexists fun y xName y SeqtoArray else typeofAGetProperties Columns properties Arraymap fun x xName Rows items Seqmap TestMyRow properties SeqtoArray let DefaultTable items Table items None Then call F id name hello MUtilDefaultTable Related information Operating system Ubuntu Branch Master CoreCLR Description Trying to load Npgsql entity framework on dotnet core over Paket has issues most likely related to dependencies not being loaded Repro steps F load Paketfsx PaketPackage MicrosoftEntityFrameworkCore Npgsql NpgsqlEntityFrameworkCorePostgreSQL load paketloadnetstandard NpgsqlEntityFrameworkCorePostgreSQLfsx open NpgsqlEntityFrameworkCorePostgreSQL open MicrosoftEntityFrameworkCore let opt DbContextOptionsBuilderUseNpgsqlconnectionstringOptions Expected behavior It should generate a DbContextOptions Actual behavior type NpgsqlEntityFrameworkCorePostgreSQLInfrastructureNpgsqlDbContextOptionsBuilder not found in assembly NpgsqlEntityFrameworkCorePostgreSQL Version Cultureneutral PublicKeyToken d b d f fda A possible cause may be a version incompatibility You may need to explicitly reference the correct version of this assembly to allow all referenced components to use the correct version Known workarounds I sadly could not find one Ive tried loading random further libraries but with no success Related information Operating system Ubuntu Branch Master CoreCLR It would be interesting to add IfSharp as a dotnet tool to ease the installation Im not sure if it would be possible but here is the doc for that Description There is some issue loading the correct libraries to use Type Providers on NET Core While this is directly relevant to Type Providers the issue itself is broader and should be solved Repro steps Run the following code The problem can slightly be improved by manually loading some further libraries This still yields the error Known workarounds Not known yet Related information Operating system Ubuntu Server Branch Master NET Core autocompletion fix NET CoreCLR Description The F kernel should support returning the Plotly mime type Supporting this will allow notebooks to be previewed with plotly graphs in a safe way Because this is not currently supported the graphs are rendered using HTML JavaScript which cannot be safely rendered Repro steps See this notebook It includes a Plotly graph but the rendering is all HTML But if you look at a Python notebook You can see with this Python notebook that includes the extra mime type response and that the chart renders Description Is there a way to get masked input data entry from the user of the notebook equivalent to the Python kernal getpass capability import getpass password getpassgetpass Known workarounds Can we and should we enable Jupyter widgets in IF It looks like it is built on top of comm messages A collection of widget examples As mentioned in SOURCEDIRECTORY is the same homenbuser for each notebook process in a docker container Likewise the SystemEnvironmentCurrentDirectory for each notebook is the same Also the directory used for nuget packages is not unique This would mean that different notebooks may get different nuget package versions and may alter the paketdependencies in conflicting ways Both can easily lead to conflicting use of the file system from different notebooks if the current directory is used to store and resolve nuget packages for example depending on the technique used to get nuget packages