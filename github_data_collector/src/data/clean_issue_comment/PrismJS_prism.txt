This adds a new language to Prism which provides functions to create and modify patterns details summary strongMotivationstrong summary Its very simple to create languages with Prism but we provide nothing at all which can be used to extract common pattern parts into variables or to create more complex patterns from simpler ones So what I usually do and advise other people to do is this Not pretty robust or scalable but it gets the job done After I redid I wanted a standardized way for pattern templates or whatever you want to call that The implementation there is fast and simple because it only does string replacements so it has a few downsides The first is that it doesnt check flags so its very easy to get flags wrong which is really hard to debug The second big downside is that it cant deal with backreferences which is quite a big limitation So what I wanted was a way to have pattern templates that are easy to debug and support backreference And because I use it quite often I also wanted a way to create nested patterns details Description Before I describe the new function I will explain important interfaces Flags and Pattern A flags object is an immutable object like so g boolean i boolean m boolean remainingFlags Its a map from each flag to an optional boolean which can be either true the flag is required in the final RegExp false the flag is forbidden in the final RegExp or undefined it may be present or not in the final RegExp doesnt matter A pattern is an immutable object like so source string flags Flags It represents a lightweight version of a RegExp With that out of the way functions are exported from Prismlanguagespatterns patternsource string flags Flags Pattern This function takes the source of a RegExp and optionally flags and returns a new pattern This is just a convenience function to create patterns toRegExppattern string Pattern RegExp Takes a given pattern or string and converts it to a new RegExp object templatepattern string Pattern replacements string Pattern Pattern The templating function More details below nestedpattern string Pattern depth number Pattern The function to created nested patterns where the placeholder self will be recursively replaced with the pattern itself up to a certain depth Note Strings and patterns can be used interchangeably A string will be assumed to be a pattern without flags The template function is the heart of this PR It will handle capturing groups and backreferences in the template pattern and its replacements It will also check that all patterns are valid regular expressions and that the flags of all patterns are compatible Example js var typeKeyword pattern bclassenuminterface bsource i false var string source template s AZ w source typeKeyword string To make the minified version as small and as fast as possible I added support for the compilation constant PrismMIN which will be true in minified files and false or rather undefined otherwise This allowed me to remove all checks from the minified version so only the development version throws errors The minified version will assume that everything works with just kB Points for discussion All in all Im very happy with the result and would really like to see as a part of Prism but there are a few points which Im unsure about and would like to discuss The placeholder pattern Right now I use d because its just text from the RegExps point of view it doesnt use any special RegExp characters and because easy to read You can easily make out placeholders even in long and complex patterns That being said Im not very attached to this and maybe the simpler pattern d would be better Idk I restricted template to use arrays as the replacements map while the underlying implementation can work with anything thats indexable I placed this restriction so that people have to use short placeholders instead of using relatively long names But maybe thats better for readability I mean this thing is pretty readable Maybe instead of a function pattern should be a class and toRegExp should be an instance method Just an idea I had while implementing this Its basically an objectoriented vs functional programming style Since I could put the test for this in any existing category I made a new one and called it lib Im thinking about merging this with core but Im unsure what the best course of action will be so suggestions are very welcome I am building my first NextJS blog But I cant get Prismjs to work for me I am using Typescript just incase this matters I installed the npm package and the types from npmjs I installed the babelpluginprismjs I created a babelrc file that looks like this presets nextbabel plugins prismjs languages javascript css jsx tsx plugins linenumbers theme twilight css true In my component I wrote this import React useEffect useRef from react import Prism from prismjs const Code const codeBlockRef useRefHTMLDivElement nullnull useEffect if typeof document undefined codeBlockRefcurrent null PrismhighlightAllUndercodeBlockRefcurrent return div refcodeBlockRef pre classNamelanguagejavascript code classNamelanguagejavascriptalertit workscode pre div export default Code And I keep getting these errors nodemodulesprismjsthemesprismtwilightcss Module parse failed Unexpected token You may need an appropriate loader to handle this file type currently no loaders are configured to process this file See author Remy Bach code classlanguage pre classlanguage color white When I set css to false in the babelrc file it works but then none of the styles show defeating the purpose All of my research has not pointed me to making any webpack changes Thanks for any help Java ships with JEP which defines a new keyword record JEP This addresses this comment I created a new assets directory for files that are exclusively used by our website not including the top html files It combines img scripts templates stylecss faviconpng and logosvg into one directory The new structure also makes identifying web files easier simplifying some ignore patterns mAAdhaTTah If you think its too much or unnecessary close it I just wanted to put it out there Two minor improvements for the Coy theme It now consistently uses classlanguage Removed the notpre code classlanguage after selector because code element dont have an after pseudoelement Motivation We have many themes that are basically invisible to users Lets change that Description Make it possible to select themes from Prism themes at the very least on the download page Ideally visitors of prismjscom can select themes from Prism themes like any other theme but this will likely necessitate an overhaul of the current theme selector Language Stan is a probabilistic programming language for statistical inference written in C Wikipedia The Stan language is used to specify probabilistic models which get transpiled to C by the Stan compiler The syntax is informed by the corresponding mathematical notation and by C Additional resources Language reference Home page Stan user guide lots of code examples Stan support in highlightjs in case its helpful to refer to This removes temporary arrays in Tokenstringify All these changes make Prismhighlight about faster detailssummaryBenchmarksummary Found cases with files in total Test candidates on highlight Estimated duration m s css stylecss kB local ms smp PrismJSmaster ms smp x csscssextras css stylecss kB local ms smp PrismJSmaster ms smp x javascript componentsjson kB local ms smp PrismJSmaster ms smp x packagelockjson kB local ms smp PrismJSmaster ms smp x scriptsutopiajs kB local ms smp PrismJSmaster ms smp x prismjs kB local ms smp PrismJSmaster ms smp x prismminjs kB local ms smp PrismJSmaster ms smp x json componentsjson kB local ms smp PrismJSmaster ms smp x packagelockjson kB local ms smp PrismJSmaster ms smp x markup downloadhtml kB local ms smp PrismJSmaster ms smp x indexhtml kB local ms smp PrismJSmaster ms smp x markupcssjavascript markup downloadhtml kB local ms smp PrismJSmaster ms smp x indexhtml kB local ms smp PrismJSmaster ms smp x summary best worst avg rel avg rel norm local x x PrismJSmaster x x details As discussed here I also quickly looked for other open theme issue but couldnt find any If there are any I missed please leave a comment