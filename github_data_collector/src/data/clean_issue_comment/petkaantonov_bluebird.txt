Bumps handlebars from to details summaryChangelogsummary Sourced from handlebarss changelog v November th Bugfixes fix add noprototypebuiltins eslintrule and fix all occurences f f d fix add more properties required to be enumerable Chores Build fix use instead of c b f add chai and dirtychai and sinon for cleaner testassertions and spies deprecate old assertionmethods e e ba dad a Security The properties proto defineGetter defineSetter and lookupGetter have been added to the list of properties that must be enumerable If a property by that name is found and not enumerable on its parent it will silently evaluate to undefined This is done in both the compiled template and the lookuphelper This will prevent new RemoteCodeExecution exploits that have been published recently Compatibility notes Due to the securityfixes The semantics of the templates using proto defineGetter defineSetter and lookupGetter in the respect that those expression now return undefined rather than their actual value from the proto The semantics have not changed in cases where the properties are enumerable as in js proto some string The change may be breaking in that respect but we still only increase the patchversion because the incompatible usecases are not intended undocumented and far less important than fixing RemoteCodeExecution exploits on existing systems Commits v November th Bugfixes fix use Stringfield in lookup when checking for constructor d test add fluent API for testing Handlebars c ac c Compatibility notes no incompatibility are to be expected trtable truncated details details summaryCommitssummary c c b v c d Update release notes f f d fix add noprototypebuiltins eslintrule and fix all occurences fix add more properties required to be enumerable ba testchore add chaiexpect and sinon to runtimeenvironment dad test add sinon as global variable to eslint in the specs a test add sinonjs for spies deprecate current assertions e e chore add chai and dirtychai for better test assertions c b f fix use instead of de d v Additional commits viewable in compare view details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details This issue tracker is only for bug reports or feature requests if this is neither please choose appropriate channel from Please answer the questions the best you can What version of bluebird is the issue happening on All versions What platform and version For example Nodejs or Google Chrome All platforms and versions Write description of your issue here stack traces from errors and code that reproduces the issue are helpful Was digging into some memory profiling and noticed that bluebirds coroutine creates a stack trace that is taking up a lot of memory during runtime In our case we are leveraging the babelplugintransformasynctogenerator plugin and have thousands of these error messages generated during runtime from the source code line above This is amounting to dozens of extra megabytes on the JS heap that seem like they can be avoided Can open a PR or otherwise resolve but wanted to check first the reasoning for generating the error stack at this point and if it can be behind a flag or otherwise how to prevent this memory issue The core of this PR simply changes the drainQueue method used by the map method called when its run with a concurrency limit which fetches the next Promise in the array using Arrayshift instead of Arraypop The point of this is to retain the standard behaviour of map and process each entry in the source array in the same order in which it was provided regardless of whether or not a concurrent processing limit has been set providing more consistent and predictable behaviour To ensure the unit tests cover this properly I added an extra item to all typical test inputs effectively changing to and updated the order of the outputs for the final big test to match the order of the provided input Bumps open from to details summaryRelease notessummary Sourced from opens releases v Breaking Rename the package from opn to open See the readme for more info eca d Make the wait option false by default da d Require Nodejs c b Enhancements Add support for Windows apps referenced by their WSL paths b c v Use system xdgopen in Electron apps on Linux d f details details summaryCommitssummary See full diff in compare view details details summaryMaintainer changessummary This version was pushed to npm by sindresorhus a new releaser for open since your current version details br Dependabot compatibility score Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot ignore this patchminormajor version will close this PR and stop Dependabot creating any more for this minormajor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language You can disable automated security fix PRs for this repo from the Security Alerts page details This issue tracker is only for bug reports or feature requests if this is neither please choose appropriate channel from Please answer the questions the best you can What version of bluebird is the issue happening on What platform and version For example Nodejs or Google Chrome Node Did this issue happen with earlier version of bluebird I dont know but looks like yes map with concurrency option ignores elements order Its unexpected behavior mapSeries doesnt solving it because it doesnt have concurrency I can make code donation What version of bluebird is the issue happening on What platform and version For example Nodejs or Google Chrome Node jsdom Did this issue happen with earlier version of bluebird Happens on upgrading from to works fine Upgrading from to broke my tests TypeError Cannot read property length of undefined at windowCleaner nodemodulesjsdomlibjsdombrowserWindowjs at windowCleaner nodemodulesjsdomlibjsdombrowserWindowjs at Windowclose nodemodulesjsdomlibjsdombrowserWindowjs bluebird version Nodejs in bluebird same to If mapper returns a native promise map may continue to call mappers after cancellation main promise This should not happen because concurrency is used all mappers do not have time to start javascript Promiseconfig cancellation true function test let arraysize let count let task Promisemapnew Arrayarraysize async count if count arraysize consolelogall handlers were called return Promisedelay concurrency setTimeout taskcancel let testscount while testscount test The console output all handlers were called all handlers were called This is a heisenbug I can not reproduce it in its pure form without understanding the source code Correct behavior without native promises javascript Promiseconfig cancellation true function test let arraysize let count let task Promisemapnew Arrayarraysize count if count arraysize consolelogall handlers were called return Promisedelay concurrency setTimeout taskcancel let testscount while testscount test onsole is empty in this situation in theory it does not matter which promise is returned by the mapper so this behavior is not obvious to me I use a translator sorry TLDR Were seeing an intermittent segmentation fault with BlueBird in one of our tap based test suites and have a reproduction over here What version of bluebird is the issue happening on and What platform and version For example Nodejs or Google Chrome NodeJS version on MacOS it does not appear to happen on Node Other plaforms not tested Did this issue happen with earlier version of bluebird It does not happen with BlueBird Details One of the tests in our test suite has been failing randomly with a segmentation fault recently We found some time to track it down and it seems like it started happening with BlueBird maybe the asynchooks stuff The segmentation fault doesnt happen on every run if you checkout this repository weve setup a small run until fail reproduction case The code in the repro is significantly stripped down form the code in our actual test suite Its very spooky action at a distance style bug sometimes the test runs fine sometimes it fails with something like the following TAP version Subtest bluebird Subtest new Promise throw ok new Promise throw time ms rununtilfailsh line Segmentation fault We also captured the crash in lldb with a debug build of node lldb r methodstapjs Process launched Usersastormbinnodedebug x TAP version Subtest bluebird Subtest new Promise throw ok new Promise throw time ms Process stopped thread queue comapplemainthread stop reason EXCBADACCESS code address x frame x cb de nodedebugheapinsertheap x d newnode x c lessthannodedebugtimerlessthan at timerc at heapinlh Insert the new node newnodeparent parent child newnode heapnelts Walk up the tree and check at each node if the heap property holds Target nodedebug stopped Full backtrace from same follows thread queue comapplemainthread stop reason EXCBADACCESS code address x frame x cb de nodedebugheapinsertheap x d newnode x c ba lessthannodedebugtimerlessthan at timerc at heapinlh frame x cb b nodedebuguvtimerstarthandle x c b e cbnodedebugnodeanonymous namespaceTimerWrapOnTimeoutuvtimers at timerwrapcc timeout repeat at timerc frame x f af nodedebugnodeanonymous namespaceTimerWrapStartargs x ffeefbfc at timerwrapcc frame x f e nodedebugv internalFunctionCallbackArgumentsCallthis x ffeefbfc e handler x c afc at apiargumentsinlh frame x f aae nodedebugv internalMaybeHandlev internalObject v internalanonymous namespaceHandleApiCallHelperfalseisolate x c functionHandlev internalHeapObject x ffeefbfc f newtargetHandlev internalHeapObject x ffeefbfc e fundataHandlev internalFunctionTemplateInfo x ffeefbfc e receiverHandlev internalObject x ffeefbfc d argsBuiltinArguments x ffeefbfc at builtinsapicc frame x f a nodedebugv internalBuiltinImplHandleApiCallargsBuiltinArguments x ffeefbfca isolate x c at builtinsapicc frame x f c d nodedebugv internalBuiltinHandleApiCallargslength argsobject x ffeefbfcb isolate x c at builtinsapicc frame x e c d frame x e a ab frame x e f frame x e b frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e a ab frame x e f frame x e a ab frame x e a ab frame x e frame x e cfa frame x f bd nodedebugv internalGeneratedCodev internalObject v internalObject v internalObject v internalObject int v internalObjectCallthis x ffeefbfdf args x c e f args x c bea args x c ee f a args args x ffeefbfe at simulatorh frame x eebe nodedebugv internalanonymous namespaceInvokeisolate x c isconstructfalse targetHandlev internalObject x ffeefbfe a receiverHandlev internalObject x ffeefbfe argc args x ffeefbfe newtargetHandlev internalObject x ffeefbfe messagehandlingkReport executiontargetkCallable at executioncc frame x ee nodedebugv internalanonymous namespaceCallInternalisolate x c callableHandlev internalObject x ffeefbfe receiverHandlev internalObject x ffeefbfe argc argv x ffeefbfe messagehandlingkReport targetkCallable at executioncc frame x ee cd nodedebugv internalExecutionCallisolate x c callableHandlev internalObject x ffeefbfe d receiverHandlev internalObject x ffeefbfe c argc argv x ffeefbfe at executioncc frame x nodedebugv FunctionCallthis x contextval x f recvval x c argc argv x ffeefbfe at apicc frame x cbd a nodedebugnodeInternalMakeCallbackenv x ffeefbfe f recvval x c callbackval x argc argv x ffeefbfe asyncContextasyncid triggerasyncid at nodecc frame x b nodedebugnodeAsyncWrapMakeCallbackthis x f f cbval x argc argv x ffeefbfe at asyncwrapcc frame x f c nodedebugnodeanonymous namespaceTimerWrapOnTimeouthandle x f at timerwrapcc frame x cb c f nodedebuguvruntimersloop x at timerc frame x cba nodedebuguvrunloop x modeUVRUNDEFAULT at corec frame x e bbe nodedebugnodeStartisolate x c isolatedata x e argssize execargssize at nodecc frame x dcb nodedebugnodeStarteventloop x argssize execargssize at nodecc frame x dbf f nodedebugnodeStartargc argv x f at nodecc frame x f e nodedebugmainargc argv x ffeefbff at nodemaincc frame x nodedebugstart ERROR in bluebird bluebirdjsreleasepromisejs Module not found Error Cannot resolve module asynchooks in cloudsourcecodenodemodulesbluebird bluebirdjsrelease bluebird bluebirdjsreleasepromisejs