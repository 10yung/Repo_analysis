protobufjs version Actual behavior When generating static code with pbjs there is no way to make function names camelCase Expected behavior There is a way to make function name camelCase too I want to use this library to generate a types from proto files Im using this library as a client but it doesnt have types in it so I want to generate a static code with your library then create types from it with pbts and use it in my client but my proto file using a snakecase for naming a calls proto rpc helloworld HelloWorldRequest returns HelloWorldResponse client correctly work with both clienthelloworld and clienthelloWorld but static code that gets generated only allows to use clienthelloworld Is there a way to do so protobufjs version Assume Im storing my javascript files in DESKTOP PLO T distributed node mypackage Attempt to load apiproto from DESKTOP PLO T distributed node mypackage nodemodules protobufjs google protobuf apiproto using Rootload utilpathresolve calls utilpathnormalize and the path to apiproto changes to DESKTOP PLO Tdistributednodemypackagenodemodulesprotobufjsgoogleprotobufapiproto Note the single forward slash at the beginning of the path instead of two back slashes Exception thrown because the normalized path is not a valid path to apiproto indexjs js var path requirepath var Protobuf requireprotobufjs var sourceDir pathjoinpathdirnamerequireresolveprotobufjs google protobuf var file pathjoinsourceDir apiproto ProtobufloadSyncfiletoJSON Exception packagejson json name test version main indexjs license MIT dependencies protobufjs Exception from running node DESKTOP PLO T distributed node mypackage indexjs DESKTOP PLO T distributed node mypackage nodemodules protobufjs src rootjs throw err Error ENOENT no such file or directory open DESKTOP PLO Tdistributednodemypackagenodemodulesprotobufjsgoogleprotobufapiproto at ObjectopenSync fsjs at ObjectreadFileSync fsjs at fetch DESKTOP PLO T distributed node mypackage nodemodules protobufjs src rootjs at Rootload DESKTOP PLO T distributed node mypackage nodemodules protobufjs src rootjs at RootloadSync DESKTOP PLO T distributed node mypackage nodemodules protobufjs src rootjs at ObjectloadSync DESKTOP PLO T distributed node mypackage nodemodules protobufjs src indexlightjs at Objectanonymous DESKTOP PLO T distributed node mypackage indexjs at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs If you think this is a valid issue and theres no workaround Ill try to find time to make a PR to address it I need to subtract one when trying to get the correct length of the encoded buffer here Why is that By the spec fixed should be unsigned However the current code only considers uint to be unsigned and will force fixed fields to become signed This change causes fixed to also be treated as unsigned package rt message RequestRithmicSystemInfo PBOFFSET is the offset added for each MNM field id required int templateid PBOFFSET MNMTEMPLATEID repeated string usermsg PBOFFSET MNMUSERMSG var payload templateId userMsg RequestRithmicSystemInfo log userMsg array expected is this behaving the way it should protobufjs version Take the following proto file syntax proto message Test Status status enum Status STATUSERROR STATUSOK With the following commands pbjs t staticmodule w es o testjs testproto pbts o testdts testjs The generated dts file will be unusable as it references the type Status buts its definition is missing Using commonjs instead of es yields the same results This issue doesnt occur when Test is defined after Status protobufjs version object is generated instead of Record and Promise instead of Promise in dts files public foorequest barquxIFooReq Promise barquxFooResp It would be great to support lint to pbts as well because there are a lot of typescript eslint errors on the generated typescript file error Interface name must not be prefixed with I typescripteslintinterfacenameprefix warning Device is defined but never used typescripteslintnounusedvars warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany error Interface name must not be prefixed with I typescripteslintinterfacenameprefix warning Network is defined but never used typescripteslintnounusedvars warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany error Interface name must not be prefixed with I typescripteslintinterfacenameprefix warning ProductPrice is defined but never used typescripteslintnounusedvars warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany error Interface name must not be prefixed with I typescripteslintinterfacenameprefix warning ProductTemplateData is defined but never used typescripteslintnounusedvars warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany warning Unexpected any Specify a different type typescripteslintnoexplicitany Currently trying to parse a proto file with such construct results in an error Error illegal token reserved However theres nothing in the Protocol Buffers specification that would suggests that its illegal moreover even Google itself does use it eg in their Chromium Sync protocol fixes issues with using pbts on Windows platforms with modern versions of node I have tried this locally on the project I work on with node and it fixes problems as described here 