Environment Microsoft Windows Version WSL WSL Linux Microsoft Microsoft Fri Nov PST x Code use crosstermResult cursor fn main Result let pos cursorposition println pos Ok Panic thread main panicked at called Resultunwrap on an Err value IoErrorCustom kind Other error The cursor position could not be read within a normal duration srclibcoreresultrs note run with RUSTBACKTRACE environment variable to display a backtrace Steps to Reproduce open terminal by cmd or powershell using WINQ shortcut ssh userlocalhost run the prog Notes if open terminal by bash using WINQ shortcut the prog works if putty to userlocalhost the prog works Priority very low if such environment is not in supported list just close this issue and please mention it in document Added a small set of reasonable trait implementations Debug Copy Clone PartialEq and Eq to all of the commands The largest command is a pair of u so theyre easily copyable Is your feature request related to a problem Please describe Currently the terminalsize function is hardcoded on unix to read the terminal size from stdout However on some applications like broot stdout is redirected to something useful and the UI parts are rendered to the terminal on stdout Describe the solution youd like Either a separate set of stderr methods should be added or the exisiting ones should be modified to prefer stderr if it detects that stdout isnt a terminal Related to Im converting some existing code to crossterm which mixes drawing a progress bar with emitting some messages Is Print always guaranteed to wrap to a new line on all platforms If so could that be documented in the API Describe the bug In AZERTY keyboards Belgian french in this case some common ascii characters are only accessible with the right Alt button pressed In windows no event is generated for these characters To Reproduce Steps to reproduce the behavior Run the eventpollread example on a windowsAZERTY machine and try to get a KeyEvent for any of the above characters OS Windows TerminalShell CMDPowershell In crosstermsrceventsyswindowsparsers there is no differentiation of right or left key pressed let alt statehasstateLEFTALTPRESSED RIGHTALTPRESSED while later in the same file in parsekeyeventrecord function the key code is replaced by the virtualkeycode which no longer corresponds to the right character Rust if modifierscontainsKeyModifiersALT If the ALT key is held down pressing the A key produces ALTA which the system does not treat as a character at all but rather as a system command The pressed command is stored in virtualkeycode let command keyeventvirtualkeycode as u as char if commandisalphabetic character command else return None Here is also an output from the eventpollread example with some debug information src event sys windows parsers characterraw src event sys windows parsers command EventKeyKeyEvent code Char modifiers CONTROL ALT Describe the bug When using sysexit the process ends with an exit code of producing the following error on windows terminals error process didnt exit successfully target debug crosstestexe exit code To Reproduce Steps to reproduce the behavior Create a simple binary application with the following mainrs Rust fn main crosstermterminalexit Compile and run the application on a windows terminal Powershell or cmd See error Expected behavior The process should exit successfully with exit code zero OS Windows TerminalShell CMD Powershell Possible fix The exit code is used on syswindowsrs line Rust pubcrate fn exit stdprocessexit This is probably a misreading of stdprocessexit documentation example where an exit code of is given for demonstration reasons Describe the bug When compiling my project I get a warning from cargo wherever the queue macro is used warning use of deprecated item stderrorErrordescription use the Display impl or tostring To Reproduce Use the queue macro in a project Expected behavior There should be no warning OS Ubuntu TerminalShell NA Is your feature request related to a problem Please describe Itd be nice to have color detection implemented in crossterm Im looking at converting my plain colorizing to using termimad to render Markdown which would basically means porting to crossterm anyways Itd be nice to have something like to control whether color and styling actually makes any sense Describe the solution youd like A way to construct a buffer that drops colors if the backing pipe doesnt support it but with the ability to override it Describe alternatives youve considered in any Didnt see an API for doing this in the docs Having to conditionalize all my style commands based on that would be better done at the bufferoutput level Maybe Im just not seeing the API call I need to use The link Tested terminals on leads to when clicked which s Is your feature request related to a problem Please describe It would be nice to have a function to set the terminal emulators title in a crossplatform fashion Describe the solution youd like It could be something like crosstermterminalsettitletitle str This function would change the windows title from something like cargo run or myapp to something like MyApp indicated by the title parameter Additional context I havent found any crate that would implement this kind of behavior I have found something like this from hunter but it seems to work only on Linux