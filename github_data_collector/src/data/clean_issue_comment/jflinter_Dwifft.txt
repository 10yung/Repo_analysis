Hello thank you for the awesome library We depend on it on one of our libraries and recently we migrated to SPM We currently need to reference master branch or commit fec b which does not work well for library dependecies there are even some issues with SPM Could you please just tag the current master HEAD The patch version is required I am using Dwifft with a custom class and I am not getting the expected result It seems that the issue is because some of the variables of the class are changed In order to avoid that I wanted to exclude these unwated property I hence added the following function but Dwiff nevel calls it How Dwiff test equality between two objects static func lhs Slide rhs Slide Bool return lhsmarkdown rhsmarkdown Hi We have started receiving some Crashlytics crash reports in our production app recently And they all point to some bizarre issue with Dwifft Now the app has k daily active users and the crash happened only times now so it is not terribly common None of the QA teams have been able to reproduce it and neither have I However it happened to three different users The crash always happens when setting new rows for the Dwifft SingleSectionTableViewDiffCalculator We are using the latest version of Dwifft available via Cocoapods Basically this is what we get Fatal Exception NSInternalInconsistencyException attempt to insert row into section but there are only rows in section after the update Part of the stack trace Fatal Exception NSInternalInconsistencyException CoreFoundation x becc ea exceptionPreprocess libobjcAdylib x bde a objcexceptionthrow CoreFoundation x bebd a c CFXNotificationTokenRegistration keyCallbacks Foundation x bf c d NSAssertionHandler handleFailureInMethodobjectfilelineNumberdescription UIKitCore x ec e UITableView endCellAnimationsWithContext UIKitCore x ec b a UITableView endUpdates Dwifft x TableViewDiffCalculatorprocessChangesnewStatediff DwifftUIKitswift Dwifft x cdc specialized AbstractDiffCalculatorsectionedValuessetter AbstractDiffCalculatorswift Dwifft x a specialized SingleSectionTableViewDiffCalculatorrowssetter compilergenerated Dwifft x be SingleSectionTableViewDiffCalculatorrowssetter compilergenerated This is how dwifft is configured private var dataModel AppNotification private var diffCalculator SingleSectionTableViewDiffCalculatorAppNotification override func viewDidLoad diffCalculator SingleSectionTableViewDiffCalculatorAppNotificationtableView selftableView initialRows sectionIndex diffCalculatorinsertionAnimation top diffCalculatordeletionAnimation middle The crash happens when we fetch the data from network prepare and then store it to the dataModel property and then set the selfdiffCalculatorrows selfdataModel Any ideas on what could be the reason for this ing heads and tails before using LCS For example in the case of single insert the algorithm changes from Omn to Omn When the arrays contain entries for example this change reduces the number of comparisons to and the size of the table used by the algorithm from to Great work with Dwifft Thanks for it One challenge with the LCS algorithm is that it is Omn in both CPU and memory consumption Though this isnt a problem in practice when the size of the arrays is moderate it becomes a problem when the arrays are large Anything that can be done to reduce the size of the arrays passed to the LCS algorithm has very beneficial results This approach which Ive used in the past in another language is to essentially trim off the matching prefixes and suffixes from the arrays passing only the middle of the array to the LCS algorithm Of course if there is a change at both the head and tail of the array this optimization has no benefit In the common case though the benefit is huge Based on the guidelines I thought it would be good to discuss the idea before opening a PR Nevertheless it may be easiest to just see the code In my previous implementation I also added change beyond what Ive proposed here to pick an upper bound on mn work factor When that limit is exceeded a reloadData is really the best approach How hard would it be to add a completion handler for the diff function so the values dont have to be equatable A library called Diff does this For example diff old new Bool in return old new This would allow me to pass an array of custom models and only check if certain values are equal Thanks Joe Add watchOS deployment target on podspec Ive researched a lot regards to fix contentOffset after table dataSource has been updated I couldnt find a way to do it with Dwifft When diffCalculatorrow selfdata is invoked with new values in my case new values will be added at front of previous data it changes contentOffset I attempted to use tableViewsetContentOffsetoffset animated false after providing new data to diffCalculator which didnt work Also when new values in this case append to previous data are added while scrolling scroll somehow jumps on and off at some weird position I also noticed when same values were set to diffCalculator it treated there were diff Id appreciate any advices Thanks 