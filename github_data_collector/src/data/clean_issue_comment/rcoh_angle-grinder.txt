Nom removes macros and should make the parser much easier to work on for people unfamiliar with nom This is currently blocked by nomlocate supporting nom agrind should be able to output structured computer readable data in addition to the current human readable output format JSON YAML logfmt I think this would fit best currently with a outputo flag in addition to the query but I could also imagine something like a formatformat operator Im curious what power users of agrind think Just discovered this project which is an awesome idea btw I wonder if it supports yaml and if not then how hard it would be to add that Hi I have the following JSON format dsthost dstport honeycred false localtime logdata PASSWORD USERNAME root logtype nodeid opencanary srchost srcport How would I get agrind to also parse the logdata field TIA There are currently several places in the language where we accept arbitrary expressions In the clause of where In the argument of aggregates sumxyz In the groupby clause of aggregates count by statuscode responsems url The set of arbitrary expressions that can be constructed is growing and itd be great to have those documented separately where they could be linked to within the README so people could have a full understanding of what they could use I am imagining something like the workflow Ultimate Plumber provides nb None of these issues are demands or even requests Its more I am wondering about things I might want to hack on and soliciting feedback on whether you would welcome them or not before I get started Although it would only be a builtin implementation of tail F n filelog agrind so if you dont want this complexity it would be understandable Operators can return Result The expression machinery already supports it The renderer needs to support it as well something like passthrough If a line isnt matched by the pipeline it will be printed asis to stderr