The version of caddy is text DEV NOTICE Registered directive torproxy at end of list Caddy v h wwuGSkUHo RZ oMpeTt J WBB X oIZN dKehcQE Starting arguments usrlocalbincaddy quic conf etccaddyconfdquicconf Config caddyfile gzip proxy headerupstream Host host headerupstream XForwardedProto scheme headerupstream XForwardedPort port headerupstream XForwardedFor remote headerupstream XRealIP remote headerupstream XVictorsTest passed insecureskipverify tls HIDDEN cer HIDDEN key Test HTTP with curl dev it shows that some headers like XForwardedFor or XRealIP cannot be passed to the backend text VictorVictorMactmp curlh http H XVictorsTest test Port Remote Addr Proxy Protocol Addr XForwardedFor Header XRealIP Header XForwardedProto Header https XForwardedPort Header XVictorsTest Header test XVictorsTest Header passed while HTTP and HTTP both work text VictorVictorMactmp curlh http H XVictorsTest test Port Remote Addr a c b c HIDDEN Proxy Protocol Addr XForwardedFor Header a c b c HIDDEN XRealIP Header a c b c HIDDEN XForwardedProto Header https XForwardedPort Header XVictorsTest Header test XVictorsTest Header passed VictorVictorMactmp curlh http H XVictorsTest test Port Remote Addr a c b c HIDDEN Proxy Protocol Addr XForwardedFor Header a c b c HIDDEN XRealIP Header a c b c HIDDEN XForwardedProto Header https XForwardedPort Header XVictorsTest Header test XVictorsTest Header passed Now I have no idea to make a workaround Please confirm if it is a bug or it is just a feature Caddyfile testmencimoe proxy log varlogcaddyaccesslog tls etcsslcaddysslcrt etcsslcaddysslkey Start with log stdout agreetrue confetccaddyCaddyfile rootvartmp quic test HTTP with curl resolve testmencimoe vvvv Added testmencimoe to DNS cache Hostname testmencimoe was found in DNS cache Trying Sent QUIC client Initial ALPN h h method GET h path http test h scheme https h authority testmencimoe h useragent curl h accept Using HTTP Stream ID easy handle x e af GET http test HTTP Host testmencimoe useragent curl accept HTTP altsvc h ma server Caddy contenttype textplain charsetutf xcontenttypeoptions nosniff Internal Server Error Connection to host testmencimoe left intact While HTTP works curl http resolve testmencimoe vvvv Added testmencimoe to DNS cache Hostname testmencimoe was found in DNS cache Trying TCPNODELAY set Connected to testmencimoe port ALPN offering h ALPN offering http successfully set certificate verify locations CAfile etcsslcertscacertificatescrt CApath none TLSv OUT TLS handshake Client hello TLSv IN TLS handshake Server hello TLSv IN TLS handshake Certificate TLSv IN TLS handshake Server key exchange TLSv IN TLS handshake Server finished TLSv OUT TLS handshake Client key exchange TLSv OUT TLS change cipher Change cipher spec TLSv OUT TLS handshake Finished TLSv IN TLS change cipher Change cipher spec TLSv IN TLS handshake Finished SSL connection using TLSv ECDHERSAAES GCMSHA ALPN server accepted to use h Server certificate subject CNmencimoe start date Jan GMT expire date Apr GMT subjectAltName host testmencimoe matched certs mencimoe issuer CUS OLets Encrypt CNLets Encrypt Authority X SSL certificate verify ok Using HTTP server supports multiuse Connection state changed HTTP confirmed Copying HTTP data in stream buffer to connection buffer after upgrade len Using Stream ID easy handle x a b GET http test HTTP Host testmencimoe useragent curl accept Connection state changed MAXCONCURRENTSTREAMS HTTP altsvc h ma contenttype texthtml date Fri Jan GMT location server Caddy server nginx Ubuntu stricttransportsecurity maxage includeSubDomains contentlength html headtitle Moved Permanentlytitlehead body bgcolorwhite centerh Moved Permanentlyh center hrcenternginx Ubuntucenter body html Connection to host testmencimoe left intact Removing the log line solves the problem But logging is working for HTTP Changing the proxy line to a root line also works An error line doesnt involve the problem and give me these error log PANIC http test caddyhttphttpserverresponsewriterwrappergo http responseWriter is not a closeNotifier This PR will fix and I updated the const names in caddyhttpreplacergo which creates a little diff churn The naming was a little inconsistent I couldnt help myself smiley Is httprequesttlsclientcert useful as stringcertRaw I ported the v behavior but it seems like that byte slice should be encoded to printable text Im not sure what its used for Second commit may be offtopic but its trivial Let me know if I need to revert it Im new to Caddy so suggest any changes Theres a lot newchanged in beta expected rollout on or before January Mostly with the Caddyfile These notes are a draft documentation of what has changed I will be writing proper Caddyfile documentation to go on the website between now and then The Caddyfile will continue to be improved and worked on over the next few beta releases The final version of these release notes will be published on the release page when it is tagged The enhancements in this release include the following likelybreaking changes indicated by Path matching is now exact by default not prefix Previously this would proxy all requests within api such as apifoobar reverseproxy api localhost That is now treated as an exact match To get path prefix matching simply append to the path reverseproxy api localhost The prior way of assuming prefix match made exact matching awkwarddifficult Within multiple instances of a directive the Caddyfile adapter internally sorts them in descending order of specificity of their path matcher Consider these two directives reverseproxy api localhost reverseproxy apiv localhost Previously the second proxy would never be used because the first matcher api is a superset of the second one apiv Now the second one will be prioritized if the request is in the apiv path Internally its just as if you wrote the second one first This reordering only occurs if a single path matcher is used Appearance order still takes precedence otherwise The rewrite directive is mutually exclusive with other rewrites Previously all matching rewrites would be evaluated Now only the first matching rewrite will be evaluated Consider these rewrites rewrite docsjson docsjsonindexhtml rewrite docs docsindexhtml The result of the first one is captured by the second one and thus the only rewrite that is actually realized is the second one Now rewrites are mutually exclusive as there should be no reason for more than one rewrite Rewriting signifies the intent to reroute or internally redirect a request which should need only be done once thanks to the power of request matchers in v New route directive evaluates directives in appearance order With the route directive you can evaluate a batch of directives as a single unit in the order you specify Normally directive order is hardcoded into Caddy so that order of appearance in the Caddyfile doesnt matter which makes a correct Caddyfile easier to write But the order of evaluation of HTTP middleware does matter So if you have a specific need to deviate from the hardcoded order you can override the internal ordering on a casebycase basis with the route directive For example this problem can be solved easily and intuitively with an explicit route rewrite titi totopng route fileserver totopng redir Basically a route block evaluates HTTP handlers literally Matcher syntax has changed from matcher and match to simply Before matcher post method POST reverseproxy matchpost localhost After post method POST reverseproxy post localhost This makes matchers easier and more fun Environment variables can be substituted at either adapttime or runtime To substitute environment variables as a preprocessor use VAR syntax APPDOMAIN root SITEROOT OTHERDIRECTIVES fileserver That form will expand environment variables before parsing begins This means environment variables can also expand to multiple tokens To substitute environment variables at runtime continue using the standard Caddy placeholder syntax root envSITEROOT fileserver Notice how the site address is prepended with here this is needed because the Caddyfile adapter doesnt know what envAPPDOMAIN will evaluate to until runtime so it needs a hint to know whether its the scheme domain name port or path of the address in order to construct the underlying JSON config You can use both forms in a Caddyfile The first form is substituted before parsing and the second is propagated into the final JSON and substituted at runtime HTTP route matchers are evaluated sequentially instead of all at once Previously all matchers in a route list would be evaluated at the same time then matching routes would be chained together to form a composite route that handled the request This meant that the route would be decided before any handlers have a chance to modify the request and alter the route This approach was more declarative in its philosophy Now route matchers are evaluated sequentially This means that handlers which modify the request might affect which later routes get matched This approach is more procedural in its philosophy For example consider the following routes json match path foo handle handler A handler B match path bar handle handler C Previously a request to foo would have only matched handlers A and B and could never reach C unless A or B changed the request to bar and then issued a rehandle to start over Now a request to foo could still reach handler C if handlers A or B change the requests path to bar Previously this was impossible without a rehandle because it was already decided which routes matched and which didnt Rehandling was very errorprone though so we got rid of that This new sequential logic may have slightly more cognitive overhead when trying to understand it but it grants more flexibility in how routes are handled especially as far as rewrites are concerned and makes it easier to write correct routes It is still possible to batch routes together under a single match using subroutes New handle directive enables more sophisticated route composition If youre coming from nginx land you are familiar with configs like this location proxypass location bar root Loosely speaking this hypothetical config would serve static files for all requests in bar and would proxy all other requests In Caddy a rough equivalent would be handle reverseproxy handle bar fileserver The handle directive contains any other HTTP directives but only the first matching handle block is evaluated Like rewrite is now handle is mutually exclusive to other handle blocks on the same level By the way you can nest handle and route directives so although they work similar to nginxs location contexts they are not limited to just paths You can use any request matchers including headers IP ranges query strings regular expressions and more New order option replaces handlerorder The handlerorder option let you specify the list of directives in any order you wanted or in appearance order but was hardly useful With route and handle directives this option is not needed anymore Instead theres a new option called order that allows you to specify the order for a single directive For example order phpfastcgi last order redir before rewrite This is especially useful when developing a new directive you wont have to change the Caddy source code redir now comes before rewrite Before rewrites would come before redirects because redirects are terminal handlers which we try to put toward the end of the chain but that is often problematic in practice Using rewrite is like saying I accept this request but I need to transform it internally before I use it However using redir is like saying I reject this request please send it to me differently before I act on it Thus I think it makes sense to put redir first in the chain for example this real use case on the Caddy docs site redir docsjson docsjson rewrite docsjson docsjsonindexhtml rewrite docs docsindexhtml If redirects need to be issued later in the chain one can either use order option described above or use the respond directive to manually issue a redirect respond comes toward the end of the chain system macos caddy version caddy beta I use caddy start to start caddy then use POST load to update the config My config is here json apps http servers clientlocaltestapi listen routes handle handler subroute routes handle handler rewrite uri httpmatcherspathregexpapi handler reverseproxy transport protocol http readbuffersize upstreams dial localhost match pathregexp name api pattern api match host localhost clienttestcom listen routes handle handler subroute routes handle handler rewrite uri httpmatcherspathregexpapi handler reverseproxy transport protocol http readbuffersize upstreams dial localhost match pathregexp name api pattern api handle handler reverseproxy transport protocol http readbuffersize upstreams dial localhost match path match host clienttestcom The no matter what change I do to the config I POST load again caddy will throw error ERROR admin stopping current admin endpoint error shutting down admin server context deadline exceeded Then caddy dead I cant even caddy stop it Proposal Born out of TLS Placeholders text httprequesttlsversion The TLS version name eg tls httprequesttlsciphersuite The TLS cipher suite eg TLSCHACHA POLY SHA httprequesttlsresumed The TLS connection resumed a previous connection eg true httprequesttlsproto The negotiated next protocol eg h httprequesttlsprotomutual The negotiated next protocol was advertised by server eg true httprequesttlsservername The server name requested by client if any httprequesttlsclientcert The client certificate in PEM format httprequesttlsclientfingerprint The SHA checksum of the client certificate httprequesttlsclientissuer The issuer DN string of the client certificate httprequesttlsclientserial The serial number of the client certificate httprequesttlsclientsubject The subject DN string of the client certificate Shorthand Placeholders Shorthand Replaces tlscipher httprequesttlsciphersuite tlsversion httprequesttlsversion tlsclientcert httprequesttlsclientcert tlsclientfingerprint httprequesttlsclientfingerprint tlsclientissuer httprequesttlsclientissuer tlsclientserial httprequesttlsclientserial tlsclientsubject httprequesttlsclientsubject Comments Its not clear to me if I should be using dashes or underscores for these placeholders Should the client placeholders be renamed to peer to match tlsConnectionState Ive renamed several items to be clearer issuer vs idn Im willing to work on a PR once we agree on the details Revisions Use underscores instead of hyphens Changed ie to eg Add underscores instead of mashing words together Removed httprequesttlsclientcertescaped Changed httprequesttlsclientcertraw to httprequesttlsclientcert Removed httprequesttlsclientvalid Note that the httprequesttlsclientfingerprint is a SHA checksum Use lowercase for httprequesttlsversion result Removed Items text httprequesttlsclientcertescaped The client certificate in PEM format urlencoded httprequesttlsclientvalidend The end date of the client certificate eg Jan UTC httprequesttlsclientvaliddays The number of days remaining before the end date of the client certificate httprequesttlsclientvalidstart The start date of client certificate eg Jan UTC As requested in this forum thread I want to be able to use caddy as a reverse caching proxy which makes an service more resilient to outages of the origin server so that if the origin goes down or responds with errors caddy serves old content Specifically I only want http responses to be cached If an origin server responds with http xx I want to serve stale content from the cache Also attaching a corresponding nginxconf which achieves what I want for reference nginxconfgz This adds support for small step certificate authority on the same machine In the case where small step is not configured locally it will provision a local small step configuration This will include the password in plain text this is unavoidable I believe Specifying the calocal is a special case it will use the local small step configuration Caddyfile test sargecom tls ca calocal Some minor nitpicks small step added a dependency on newrelic A random warning is generated by certmagic when attempting to delete expired certificates I use reverseproxy and rewrite handle to proxy admin rest api endpoint localhost as path localhost caddy api then I use the endpoint localhost caddy api to add route for other server and will wait the connection reply forover the step to report save the below content to caddyjson and caddy run config caddyjson then use the last section curl code check this problem json admin disabled false listen localhost enforceorigin false origins apps http servers caddy adminwebui listen localhost routes match path caddyapi handle handler rewrite strippathprefix caddyapi handler reverseproxy upstreams dial localhost terminal true automatichttps disable true exampleserver listen localhost routes handle handler staticresponse body response automatichttps disable true Get the first route from examplesever sh curl i X GET Add Route to examplesever sh Add Route through reverse proxy api if without m timeout param the connection will wait for forever curl i m H ContentType applicationjson d handle handler staticresponse body response X POST Check routes and found the route had been added curl i X GET Add Route through api this is fine curl i H ContentType applicationjson d handle handler staticresponse body response X POST cehck routes and this is fine curl i X GET Del Route from examplesever sh Delete Route through reverse proxy api if without m timeout param the connection will wait for forever curl i m X DELETE Check routes and found the route had been deleted curl i X GET Delete Route through api this is fine curl i X DELETE cehck routes and this is fine curl i X GET Adds support for loading a custom root ca file via the caddyfile tls offcert key load folders protocols min max ciphers list curves list alpn list ca url caroot file 