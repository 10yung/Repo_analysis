Getting libcoffee Uncaught ReferenceError meteorBabelHelpers is not defined seems to be related to and I changed it to fields ObjectkeysBlazeTemplateInstanceprototype blazeComponentMethods ObjectkeysBlazeComponentprototype for i in fieldslength methodName fields i if methodName in blazeComponentMethods continue method BlazeTemplateInstanceprototype methodName do methodName method But it seems like theres some other uses of that loop in there not sure if that will be enough for all cases Is it possible to use template strings inside a blaze component essentially eliminating the need for html files This is just a generate question as I have not tested whether or not it can be done something like js MyComponent extends BlaseComponent template div classMyTemplatesomeVardiv Blaze Components are significantly slower and events are not the problem compared to blaze at least but then what is Perhaps theres a major culprit that would be worth looking at Weekan appears to have loosely adopted this library way back before class extends Sharing this in documentation would be cool Would it possible to try and interface with reactjs since the idea with OOP components is that theyre shareable where reactjs has more popularity Any chance this library and blaze once they are released to NPM can potentially line up against react angular and vue Mainly do you believe the life of blaze is truly over I ask this question because from my experience with BlazeComponents its the one piece to the puzzle that makes blaze fall in the shadows compared to react angular and vue Hi guys mitar Do you think you can give some bestpractise guidance on how to test a BlazeCompoent I love the idea of writing unittests for templates as indicated in How would you do this with BlazeComponents Greetings Will there be an announcement when Blaze is released I see you are working on the new blaze repo and im curious if blazecomponents will be deprecated in favor of Blaze I am not yet completely sure how I would implement this but I am thinking of doing some backwards incompatible changes to Blaze Components In short it is getting rid of a data context instead of replacing it with scope including Component would not pass data context anymore scope of the included component would be empty you can include only with explicit keyword arguments like Component headervalue header becomes a reactive value populated from value inside the scope of the Component components have a known list of arguments they can get with additional metadata is argument required documentation of the argument equality function of those arguments we will not check the typevalue of the argument because I do not want to force evaluation if not necessary so if value is a function and you pass it on it would be great that it is passed on as a function arguments can be marked as constructorlevel argument or renderlevel argument are they passed when component instance is created or are they available once it is rendered other arguments than those specified passed make rendering fail each argument is exposed as a method on the component components can then have public methods which can be called from outside so you can also pass a component itself to child component like Component parentthis and then code inside could run something like thisparentfooBar if fooBar is a method of the parent component this inside a template would be now the component instance itself parentComponent and things like that would not be available anymore component should get parent component explicitly as an argument if it depends on it not sure about children components we will have to have some way to mark public methods because I do not want to have many private methods which I would then have to use in templates like privateHelper or should we do this to me there are two levels of private methods some which are private to component logic and should not be called from a template I use prefix on them and some which are private to templates and should not be called from outside for helpersmethods you can still mix args and kwargs kwargs object at the end will be passed only if it there are really kwargs provided there will be no hash there it will just be an instance of known class functions passed to helpers will not be automatically called but if you use it in a template it will be so value will call value for you if value is a function but fooBar value will get you a function value as the first argument if value is a function What my plan is that I bump this package to and release it And then the above changes will be of this package So the API of a component are arguments you can pass and public methods you can call on the component Events handlers are internal to the component cc stubailo because I think he will like some ideas here Hey My team and I decided to create a documentation for the components created inside our app Im searching for some way to easily do BlazeComponentlistComponents and it would be awesome to have access to variables inside the component and list them Any ideas on how to do this 