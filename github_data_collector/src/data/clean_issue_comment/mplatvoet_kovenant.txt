Hi all I have using kovenant framework with some questions I would like to fetch a table of contents and fetch the content of the table simultaneously then output a mixed list with table content title and content itself But I faced the problems for coding with kovenant For example I have MySubject and MySubjectDetails class class MySubject var id String var name String class MySubjectDetails var id String var name String var data ListString ArrayList and APICalls class part of code is pseudo code object APICalls fun getSubjects PromiseListMySubject Exception val deferred deferredListMySubject Exception API calls return deferredpromise fun getSubjectByIdid String PromiseMySubjectDetail Exception val deferred deferredMySubjectDetail Exception API calls return deferredpromise I may fetch the data like is APICallsgetSubjectsthen subjects val promises subjectsmap APICallsgetSubjectByIditid allpromises then promise PromiseListMySubjectDetail Exception Whats this I will get a result with PromiseListMySubjectDetail Exception type then I cant continue the code I expected it will be a combined list ListMySubjectDetail but it comes up a PromiseListMySubjectDetail Exception object thats confused me How can I do or fix the code Thanks How can you use a deferred promise int he middle of a chain The only way I can see doing it right now is task setup then setup then deffered then promise val result promise throwerror if resultisError throwerror else itget fail Unwrap doesnt seem to exist like is suggested Question The last changes were made months ago Is this library still going to be supported for and beyond Hey there kovenant is a great library I love to use it However there is a small feature I like I wish you can provide is unwrap the return Promise of then For example I have two methods kotlin fun method PromiseString Exception fun method PromiseString Exception current val p PromisePromiseString Exception Exception method then method can it just be val p PromiseString Exception method then method Now I added these extensions in my project to achieve it but I dont know whether it is a good way to do it and it is a little unclear to use thenFlat instead of then kotlin infix fun V R PromiseV ExceptionthenFlatbind V PromiseR Exception PromiseR Exception val deferred deferredR Exceptioncontext success try binditsuccessdeferredresolvefaildeferredreject catch e Exception deferredrejectApiErrore faildeferredreject return deferredpromise so it can be val p PromiseString Exception method thenFlat method Call from this function private fun loginWithFacebookAccessTokenaccessToken AccessToken promiseOnUi mvpViewshowLoggingProgress then loginManagerloginWithFacebookaccessTokenget Call from this side alwaysUi mvpViewhideLoggingProgress successUi mvpViewnavigateToMainScreen failUi error mvpViewshowMessageerrorlocalizedMessage To this function fun loginWithFacebookfbAccessToken AccessToken PromiseUnit Exception ti KOVENANT In Function return task ti KOVENANT In task then ti KOVENANT In then Hi I have a problem in the last function my call is block in the task My application is deploy on a SAMSUNG S MINI API Version And the logcat only show KOVENANT In Function I was trying to chain long processes but it wasnt working All the long processes were returning deferredPromises I thought this was working not too long ago but the update to AndroidStudio seems to have broken something I was seeing pending promises fall through It was something like renewToken then getData successUI broadcast update The broad cast update was happening while getData was pending I have worked around by doing allrenewToken getData successUI It appears though that the then is not working at all Its just falling through I had another case where this was falling through when trying to log out then show login screen when logout was complete Is there any plan to make Kovenant library multiplatform It may be useful to update your Android configuration documentation to state that onTerminate will never be called in production environments Your webpage currently lists the following example kotlin class MyApplication Application override fun onCreate superonCreate Configure Kovenant with standard dispatchers suitable for an Android environment startKovenant override fun onTerminate superonTerminate Dispose of the Kovenant thread pools For quicker shutdown you could use forcetrue which ignores all current scheduled tasks stopKovenant Version nlkomponentskovenantkovenant nlkomponentskovenantkovenantandroid Kotlin Android Studio Build AI built on November JRE release b amd JVM OpenJDK Bit Server VM by JetBrains sro Windows Test Code kotlin val test mutableListOfPromiseInt Exception testaddtask task get alltest success Never called Note that Promiseof get works fine but not task get I can confirm that the inner task has been executed but somehow success is never called I was trying to use this as fallback task for example kotlin task cachegetkey loadFromWebTaskkeyget I would like to catch any Exception in fail block and then rethrow it as WrappedException Code should be look like that task fail error throw WrappedExceptionmessage Something went wrong cause error But instead of providing WrappedException in sequential fail blocks kovenant provides the same error As I can see thats happening because lambdas that are passed to fail are used as callbacks instead of something like map function What are you thoughts on this problem and what can you suggest to overcome this problem