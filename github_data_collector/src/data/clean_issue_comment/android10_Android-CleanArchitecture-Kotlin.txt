 When double tapping one of the movie item and coming back the picture disappear Here is a video of it Fix issue and add support for orientation change to other activity What is the best approach Only expose livedata public class MyViewModel extends ViewModel private MutableLiveDataListUser users new MutableLiveData public void loadUsers Do an asynchronous operation to fetch users userspostValue userList Expose livedata and instance variable userList public class MyViewModel extends ViewModel private MutableLiveDataListUser users new MutableLiveData private ListUser userList Expose already fetched list public ListUser getUserList return userList public void loadUsers Do an asynchronous operation to fetch users thisuserList userList userspostValue userList First of all thank you so much for this awesome repository I have a question about dependency injection You inject MovieDetailsAnimator Inject lateinit var movieDetailsAnimator MovieDetailsAnimator at line MovieDetailsFragmentkt And MovieDetailsAnimator is constructed through class MovieDetailsAnimator Inject constructor Wouldnt it be better if MovieDetailsAnimator was constructed with Singleton annotation Something like Singleton class MovieDetailsAnimator Inject constructor It seems like there is no point on getting a new instance of MovieDetailsAnimator for every fragment Thank you abstract class UseCaseout Type in Params where Type Any abstract suspend fun runparams Params EitherFailure Type operator fun invokeparams Params onResult EitherFailure Type Unit val job asyncCommonPool runparams launchUI onResultjobawait class None Ive somewhat confused with this Does this abstract class use case violate the domain layer Usecase should be dumb and doesnt know the coroutines cmiiw android I heard about the Navigation Component part of the Android Jetpack Is it worth to use it and if yes how could we apply it with this architecture because it slightly change the way we navigate between screens In meanwhile I would love to contribute to this repo and refactor current gradle into KotlinDSL But if theres anyone already refactor it into KotlinDSL might want to do a PR here Any idea that how to use this architecture to be able to observe changes in database or firebase etc Could be modified or create a new use case class Greetings Please implement Paging library Using latest Jetpack