Using we would be able to extract diagnostics data from users in a standardized format This could be utilized to Automatically report errors to a debug server optin Reproduce the error in a testing environment VM Group similar errors automatically Not every enduser is capable of finding reading or interpreting error logs and much less will be able or want to to create detailed bug reports An automated error diagnostics module that pins down crashes and error while also preparing standardized output that can be posted to Github or the Forum would be a nice addition and improve reporting Example output Error detected in module XYZ Description of problem or Error message What happened Where does it happen When did it happen PlatformOperating System Version Output of openage version Activated mods Additional info expected behaviour screenshots logs Hi after the make run command the game seems to start but then it crashes below the error make run Automatic MOC for target libopenage binrun game INFO py launching openage v g ccc c INFO py compiled by AppleClang INFO py running in DEVMODE INFO launching engine with PathUnionDirectoryUsersuaAOE HDopenagecfgroot bcfg DirectoryUsersuaAOE HDopenageassetsroot bassets and fps limit INFO SDL audio subsystems initialized INFO Using audio device default freq format channels samples INFO Initialized SDL video subsystems INFO Compiled with Qt and run with Qt Traceback most recent call last File runpy line in init run main File UsersuaAOE HDopenagebingreleaseOautosanitizenoneopenagemainpy line in main return argsentrypointargs clierror File UsersuaAOE HDopenagebingreleaseOautosanitizenoneopenagegamemainpy line in main return rungameargs root File openagegamemaincpppyx line in openagegamemaincpprungame result rungamecppargscpp File line in pyxpw openage game maincpp rungameobject object object xd File line in openagerungameopenagemainarguments const x File line in openageEngineEngineopenageutilPath const int bool char const xf File line in openageguiGUIGUISDLWindow std basicstringchar std chartraitschar std allocatorchar const std basicstringchar std chartraitschar std allocatorchar const openageguiEngineQMLInfo x d File line in openageshaderProgramlink x File line in openageshaderProgramcheckunsigned int x d File line in openageerrorErrorErroropenagelogmessage const bool bool x File libopenageshaderprogramcpp line in void openageshaderProgramcheckGLenum auto errormsg MSGerr openagecppinterfaceexctranslateCPPException Program validation failed Validation Failed Current draw framebuffer is invalid make run Error So here I am with my first contribution as asked in There is a lot of optimization that must be done but first I need to understand the logic of the code The code dont run because I cant extract properly the special SLP data from an SLP and pass it to determinergbamatrix Thanks in advance for your feedback This adds the version of a config file for the ci from an environment variable to version output of openage for later debugging Python changes the behaviour of resolving DLLs on Windows DLL dependencies for extension modules and DLLs loaded with ctypes on Windows are now resolved more securely Only the system paths the directory containing the DLL or PYD file and directories added with adddlldirectory are searched for loadtime dependencies Specifically PATH and the current working directory are no longer used and modifications to these will no longer have any effect on normal DLL resolution If your application relies on these mechanisms you should check for adddlldirectory and if it exists use it to add your DLLs directory while loading your library Note that Windows users will need to ensure that Windows Update KB has been installed this is also verified by the installer Contributed by Steve Dower in bpo Src Im not entirely sure if this is also an Upstream issue as well for the python dependencies we pull in Judging by and the current idea for a game launcher seems to be a pythonQt crossplatform implementation I felt like playing around with PyQt so I tried to implement heinezen s tiled launcher mockup Functionality is basically nonexistent at the moment except for the Quit button which works marvellously ci adding windows and ubuntu workflows doc adding status badges for mac and win to readmemd For the caching there is still some finetuning needed in the future Im also waiting for an increase of the limit and possibility to cache vcpkginstalleddir of githubactions actionscache and adding vcpkg packages to the virtual env actionsvirtualenvironments and that Qt gets added to the images actionsvirtualenvironments That overall could lower the win build for around minutes The UbuntuCI is not running inside this main repo but just outside for any forks of openage People can make future use of this for prediagnosing clangtidyerrors or clangformatstuff inside their forked repositories This functionality clangtidy and clangformat is not added with this PR though and might come in the future WIN Add caching for vcpkgdir WIN Add clcache to build procedure or extra issue WIN Look into install prefix on x target being program files x Around this function thanks tu MAC Wait for the GiB individual cache limit and cache brewllvm use brew again to install Qt Code Analysis Get clangtidy script to work and let it upload a fixespatch as artifact Code Analysis Get clangformat to work and let it upload a fixespatch as artifact Lockfile Use config for the same system as lockfile so config changes rebuild cache File headers Add header from copyingmd to scripts Set property to run with clcache probably not working with linking setpropertyGLOBAL PROPERTY RULELAUNCHCOMPILE clcache setpropertyGLOBAL PROPERTY RULELAUNCHLINK clcache Might as well start an issue for this I hope thats okay Just downloaded it and started looking at the data files and seems they have changed the graphics format again now it is smx files Havent gotten very far yet just diffed a couple with dhex and it seems like the header is now d so SMPX followed by x x that seems to be constant Then theres two int s it seems that varies in different graphics for the same unit so I assume it is frame numbers Im not sure if they did this with AoEDE but now they actually have a ToolsBuild folder with various tools for modding including a tool DEAssetToolexe for converting SLPs or PSDs to SMPX files which will probably help a lot A fun fact is that they also include AGEgenieutils which I guess indicates that the dat formats havent changed I dont see the source anywhere for it so I assume they havent modified it it being GPL and all They also seem to do the terrain blending and hill stuff in shaders I think they did the same in AoE DE and also the conversion from SMP to RGB But now its getting late just wanted to get this down somewhere List Wwise audio formats for sounds x SMXSMP for sprites x SMXSMP damage masks DDS for terrain files Particle effects JSON config files A bunch of blend masks are now configured by JSON files too 