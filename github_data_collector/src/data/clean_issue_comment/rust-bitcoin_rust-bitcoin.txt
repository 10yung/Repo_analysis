I likely missed some constant uses but this is a start Resolves Tests generated manually in Core I can add more tests and dedup the strings a bunch once approach is agreed upon hashnewtype from bitcoin hashes was not available for the projects using rustbitcoin This PR fixes the issue by reexporting the required set of macros which allows to avoid direct dependency on bitcoinhashes in downstream projects The PR depends on and may be merged only after it the dependency path should be updated in Cargotoml Introduces functions to compute bitcoin hashes for PublicKey and Script which were strangely missed out I know that we do plan to utilize miniscript as much as possible but as an intermediate step I propose to sort out some code duplication issues Right now we had script generation logic in addressPayload which was a duplication of the same code in Script class With this PR I have moved all logic to Builder which seemed to be a more appropriate location added P PK generation logic added test cases sorted out unnecessary usage of HashEngine where hash function of the new hash types can be used instead Id like to take a crack at this as a good first issue Two distinct structs share the same name bitcoinhashesPublicKey and bitcoinutilkeyPublicKey The first one is reexported by the bitcoin crate creating confusion and necessity to use as for importing when both of them are used in the same mod I propose to rename one of the structs to avoid the confusion I have already done it in my local branch renaming bitcoinutilkeyPublicKey into BitcoinPubkey so I can PR this version if you will accept this idea This removes the hex dependecy from the tests I had to leave the hexhash macro because here I needed to use that instead of SigHashfromhex because the latter requires the hex to be in reverse ordering FYI currently even non tests will build hex because of cfganytest feature serde extern crate hex Closes For convenience added links to the CHANGELOGmd and LICENSE that are referenced in READMEmd Fixes The Deserialize impls generated by serdestructimpl and serdestructhumanstringimpl need to be able to handle serialization formats which serialize structs as sequences such as bincode This PR adds visitseq methods to the Visitor types defined by these macros in addition to the existing visitmap methods The implementation is taken directly from the serde docs 