Thanks for this awesome tool I ran into a panic when trying bingrep against binls and the problem was that it was trying to represent the bss section as a range in the binary but as you know that section takes no space in the binary For example capstone could be used Disclaimer IANAL Im trying my best to be correct but I may be wrong FWICS this package depends on metagoblin and thebanintervaltree both of which in turn depend on memrange Since memrange is GPL it effectively requires any derivative work to be licensed GPL as well thebanintervaltree seems to try to do that However both metagoblin and bingrep specify only the MIT license if you wish to continue depending on memrange I believe you need to redistribute both packages as GPL I think you can still license the source files specific to those packages under the MIT license but the combined work must be licensed GPL bingrep doesnt handle ELF files with many sections This is a follow up on To reproduce cat hugefilepleasepy for i in range x printvoid func stri void printint main python hugefilepleasepy hugec clang c ffunctionsections o hostHuge o hugec bingrep hostHuge o ELF REL X littleendian x ephoff x eshoff x bd eflags x eehsize ephentsize ephnum eshentsize eshnum eshstrndx ProgramHeaders SectionHeaders Syms Dyn Syms Dynamic Relas Dynamic Rel Plt Relocations Shdr Relocations Dynamic None Libraries Soname None Interpreter None is true islib false littleendian true entry Readelf correctly handles the extra sections ELF Header Magic f c Class ELF Data s complement little endian Version current OSABI UNIX System V ABI Version Type REL Relocatable file Machine Advanced Micro Devices X Version x Entry point address x Start of program headers bytes into file Start of section headers bytes into file Flags x Size of this header bytes Size of program headers bytes Number of program headers Size of section headers bytes Number of section headers Section header string table index corrupt out of range Section Headers Nr Name Type Address Offset Size EntSize Flags Link Info Align NULL a strtab STRTAB c fd fa text PROGBITS snip When using pager like less or more bingrep works However sometimes when it quits it will panic Here is a result when using bingrep with rustc with pager more Observations This seems to happen for some binaries eg there is no such a panic for binls on my machine Other pager eg view from nvim works fine when used like bingrep pathtotarget view however will hang forever when using wrongly eg bingrep pathtotarget view RUSTBACKTRACE bingrep cargobinrustc more thread main panicked at Cannot print table to standard output Broken pipe os error homehongxucargoregistrysrcgithubcom ecc db ec prettytablers srclibrs stack backtrace stdsysunixbacktracetracingimpunwindbacktrace at checkoutsrclibstdsysunixbacktracetracinggccsrs stdsyscommonbacktraceprint at checkoutsrclibstdsyscommonbacktracers at checkoutsrclibstdsyscommonbacktracers stdpanickingdefaulthookclosure at checkoutsrclibstdpanickingrs stdpanickingdefaulthook at checkoutsrclibstdpanickingrs stdpanickingrustpanicwithhook at checkoutsrclibstdpanickingrs stdpanickingbeginpanic at checkoutsrclibstdpanickingrs stdpanickingbeginpanicfmt at checkoutsrclibstdpanickingrs prettytableTableSliceprinttty bingrepformatelfElfprintclosure bingrepformatelfElfprint bingreprun bingrepmain rustmaybecatchpanic at checkoutsrclibpanicunwindlibrs stdrtlangstart at checkoutsrclibstdpanickingrs at checkoutsrclibstdrtrs libcstartmain start file cargobinrustc homehongxucargobinrustc ELF bit LSB shared object x version SYSV dynamically linked interpreter lib ldlinuxx so for GNULinux not stripped homehongxucargobinrustc version rustc nightly d df Load commands could use some love when it comes to printing their content Should be very straighforward eg this is output currently LCSEGMENT LCSEGMENT LCSEGMENT LCIDDYLIB LCDYLDINFOONLY LCSYMTAB LCDYSYMTAB LCUUID LCVERSIONMINMACOSX LCSOURCEVERSION LCSEGMENTSPLITINFO LCLOADDYLIB LCLOADDYLIB LCLOADDYLIB LCLOADDYLIB LCLOADDYLIB LCLOADDYLIB LCLOADDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCLOADUPWARDDYLIB LCSUBFRAMEWORK LCFUNCTIONSTARTS LCDATAINCODE LCDYLIBCODESIGNDRS LCCODESIGNATURE Would be nice to either summarize the important data in the load command the version the uuid etc or just fully print the values of each more noisy Ill pretty much merge anything that does this in a reasonable manner Prolegomena Hullo So Ive begun adding search functionality and I already find it very useful In particular this is a usecase I find myself having I want to search a binary for a string this string could be a symbol Im looking for or an actual string in the binary or it could be an import or it could be referenced by a relocation I want the search results to display these matches in a semantically meaningful manner There are a number of issues at hand here Its in the beginning stages so Id like to ask for everyone anyones input about what their common usecase for grepping a binary is how theyd like to see this information displayed how theyd like to present the search to the program what theyd expect to be output Again theres a lot going on here so Ill open up with a particular example which addresses the uses I usually have but Id really like to know what other people want Grepping for a static string Im debugginganalyzing a binary I want to see if hello world is somewhere in the binary So I run bingrep merp s hello I want to know a few things at what offsets the string occurred in the binary if any how this offset would be normalized into the virtual address space of the sectionprogram headerwhatever where semantically could we interpret this offset andor vm address wrt what we know about the binaries sectionssegmentsetc It might look something like this Matches for hello x PTLOAD x rodata x Idx Name Type Flags Offset Addr Size Link Entsize Align rodata SHTPROGBITS ALLOC x x x x x x strtab x f Idx Name Type Flags Offset Addr Size Link Entsize Align strtab SHTSTRTAB x x x a x x Which is trying to say that hello was found at offset x in the binary it is normalized to x in the PTLOAD program header for elf to the rodata section in the section headers and here is that section header Similarly it was also found in a strtab section header which normalized is to the offset of x f starting from x Grepping for a symbol Similarly suppose were looking simply for whether puts is called by our binary and if so what are the details of the symbol and if possible where is it called Perhaps using the same api we search for bingrep binary s puts and this returns to us a couple of hits which are semantically quite different Dyn Syms Addr Bind Type Symbol Size Section Other GLOBAL FUNC puts x x Plt Relocations X JUMPSLOT puts Goal What id like in both of these cases if possible is a unified api for querying the contents of a binary for a search string and very importantly an efficient terse but understable presentation of this information I dont want it to be busy I want with similar color coding techniques to highlight the information I need and I want the output to be semantically relevant eg the search string is used against symbol names in the symbol table etc Ideally this is presented finally to the user as some kind of tabular structure or a summary of a group of tabular structures each tailored to the semantic content the string matched against perhaps in different categories like raw string offset vmaddr phdr offset vmaddr shdr symbol dynamic entry symtab entry debugging entry locations etc for any various number of different kinds of matches and categories Implementation Details Im not a big text search aficionado so if anyone wants to help with the actual search string api eg regexes case insensitive etc as well as efficiency concerns that would be great im all ears or in the case of PRs very grateful Conclusion If you have a usecase or an idea of how to present this information usefully Im interested in your feedback The master branch right now contains a very very prototypical implementation invoked via bingrep binary s your string it is case sensitive but also accidentally works with prefixes It currently dumps the regular print then scans the binary and pushes all matches then normalizes the string against the program and section headers Ive started experimented with other semantic output and theres definitely a lot of potential hence this issue Output is like Matches for hello x PTLOAD x rodata x x strtab x f re Id like to do bingrep functionname some binary which will return any matches for the function in the various sections of the binary eg in the dynamic symbol table the strippable symbol table the string table etc Should be easy can copy paste some of the closure color functions until theyre refactored into nicer functions As for exact display can discuss see what works best Current Candidates bingrep no rename binocular bing bg cannot be used without path prefix because of bg for job backgrounding in bashposix so we need to choose a better one im thinking two letters lets jump on the grep shortname bandwagon renaissance were in the middle of Some candidates binocular binlens od ObjDump ng biNGrep ig bInGrep bd BinDump bing BINGrep bgrep Or also any other name P