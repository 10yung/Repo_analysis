In this commit ngxrestangular was changed from using HttpClients request method to the handle method of HttpBackend which bypasses the ability to use Angulars HTTP interceptors I looked around in issues but didnt see a reason why this was done Unfortunately for us ngxrestangulars own interceptors arent good enough for our use case as they dont intercept every request ie anything made with allUrl or oneUrl and you cant abort the request ie in the event that you want to return a cached response Plus extra config is necessary in order to take advantage of other Angular modules that do provide Angular interceptors like the loading bar plugin thats mentioned in I forked the repo and just replaced a couple instances of HttpBackend and changed the handle method to request and plugged the built files into an app that were migrating to ngxrestangular from restangular and all seems to function the same except now we can use native Angular interceptors ngxrestangular interceptors still work though and can just plug in the loading bar mentioned above without having to add custom code since all requests that ngxrestangular makes are going through HttpClient now Heres the fork And the specific commit where Ive changed back to HttpClient This has the ability to fix and perhaps others That said Im not sure why this support was removed when both Angular interceptors and ngxrestangular interceptors appear to work fine so just wanted to get some clarification on that before proposing the change from my fork as a PR Also is there any sort of test suite Ive tested in our app but that probably doesnt touch all of ngxrestangulars surface area I see theres some karma config but no specs Is the demo app the best way to test changes Thanks I noticed on Snyk that this project pulls in typeslodash as a nondev dependency This should be moved to the devDependencies section right We had an issue where we were using lodash x and were getting tricky to debug errors ERROR TypeError Object is not a function As a long shot we upgraded to lodash x and that fixed the error It would be nice if lodash and Angular for that matter were added to the dependencies of this project with the specific versions that are supported at least the minimum versions ie lodash Or at the very least mention that at least lodash x is required in the README Thanks If you have HTTP Interceptors from Angular then this will be ignored from this ngxrestangular So it would be nice if someone could integrate this srcappappmodulets export function RestangularConfigFactoryRestangularProvider RestangularProvidersetBaseUrlenvironmenturl RestangularProvideraddFullRequestInterceptorAuthInterceptor Not working NgModule imports RestangularModuleforRootRestangularConfigFactory HttpClientModule providers provide HTTPINTERCEPTORS useClass AuthInterceptor multi true provide HTTPINTERCEPTORS useClass ErrorInterceptor multi true bootstrap AppComponent export class AppModule Thanks in Advance When i run the Following Command i get this error Message ngcc properties es browser module main firstonly createivyentrypoints Warning Entry point ngxrestangular contains deep imports into CProjektenodemodulescorejsfeaturesobject This is probably not a problem but may cause the compilation of entry points to be out of order Is there any type definition file for this library I think this is insanely necessary since this is an Angular library and given that Angular promotes using typescript i think this is needed With angular Ivy it prevents production build since it contains deep import Getting below error and build fails WARNING in Entry point ngxrestangular contains deep imports into Etestappnodemodulescorejsfeaturesobject I have angular project When i tried to add ngxrestangular its giving me below error ERROR in nodemodulesngxrestangularfesm ngxrestangularjs Module not found Error Cant resolve corejsfeaturesobject I need to use in my application a custom header in response to a getList header is totalElements It is correctly set by the backend but of course in restangular the headers map only cointained the default allowed ones For that reason I added AccessControlExposedHeaders It is correctly returned as per the following response but after this change restangular does not populate the headers map entries AccessControlAllowCredentials true AccessControlAllowOrigin AccessControlExposeHeaders totalelements CacheControl nocache Connection keepalive ContentEncoding gzip ContentType applicationjson charsetutf Date Wed Jul GMT ETag Wd ITA YnKbkbSYtyM pSSIrU koc Expires Pragma nocache totalelements TransferEncoding chunked Vary Origin AcceptEncoding XPoweredBy Express Hey according to spec there must not be any body when the server replies with HTTP And in fact chrome cancels a request when there is data This breaks the handling of restangular in this case ERROR Error Response for getList SHOULD be an array and not an object or something else This can be verified like this with he help of thisrestangularwithConfigRestangularConfigurer RestangularConfigurersetBaseUrl all getList Back then in there was a small fix for handling of No idea if this ever worked but int he current version data is of type Object whenever the server sends no body and the check in the patch fails So my question before any pull request and whatsoever Is this error message required at all Is there any problemside effect with always returning an array when data isnt already one This works properly for me support empty response for getList calls some APIs respond with and empty body if isArraydata data Here some facts about my system although I dont think they make any difference Linux Debian Version Developer Build built on Debian running on Debian bit npm list grep angular angularcore angularforms angularhttp angularlanguageservice angularplatformbrowser angularplatformbrowserdynamic angularrouter angulardevkitcore angulardevkitschematics angulardevkitcore deduped ngxrestangular npm version twttrangular npm ares cldr httpparser icu modules napi nghttp node openssl j tz e unicode uv v node zlib node version v 