Hi Am currently using Timestampable and Blameable in my entities and all working well but when i execute my fixtures all entities created with the correct createdat and updatedat but createdby and updatedby stays null i think because no user is authenticated when executing the fixtures cmd Is there a solution to get the job done Prerequisites We are using Symfony By default with the Symfony all the listeners are not initialized until they are requested from the EventManager Its done by Symfony Bridge Doctrine ContainerAwareEventManager class We have hundreds of doctrine event listeners in an application Current Behaviour AbstractTreeRepositoryconstruct method instantiates all the doctrine event listeners for all the entities registered in a system by calling emgetEventManagergetListeners in this foreach statement As a result when using DoctrineExtensions all the doctrine listeners initialized every time we call getRepositoryCategoryclass and as we are rendering categories in all the pages this code slows down everything Proposed solution Instead of search for the event listener that is an instance of TreeListener at every request this can be configurable per entity manager or done in a container compiletime and handled with the setter method in AbstractTreeRepository Im looking for a way to temporarily disable the Loggable extension so I can improve performance of a bulkloading console command in a Symfony project Any suggestions how to do this at runtime in a command Hi all I have the following configuration gedmolistenertree class Gedmo Tree TreeListener tags name doctrineeventsubscriber connection default priority calls setAnnotationReader annotationreader App EventListener Doctrine resource srcEventListenerDoctrine tags name doctrineeventsubscriber connection default If I enable only one of the two declarations it works But if I left both uncommented Ive got the following error Tree listener was not found on your entity manager it must be hooked into the event manager Did I do anything wrong Changing priority doesnt fix anything Thanks for you help J r my For some reason this PR while saying that it was merged didnt actually make it into the codebase This PR cleans up the OM postFlush detaching the entityobject that was softdeleted See the test for an example of why this is useful An example Actor class that implements the new BlameableActorInterface php php class Actor implements BlameableActorInterface protected RoleStack roleStack Constructor param RoleStack roleStack public function constructRoleStack roleStack thisroleStack roleStack Gets the actorRole return Role public function getActor return thisroleStacktop Added support for a new onremove event listener for the Blameable extension Simply add Gedmo Blameableonremove annotation to the property Hi guys I found a bug and know how to fix it but I want to log it here first I inject Stof DoctrineExtensionsBundle Uploadable UploadableManager into my controller I then use it to upload two files to two entities Upload fails on the second one because libGedmoUploadableUploadableListenerphp uses metadata of the first entity for both getFilePathFieldValue will then complain because the entity does not match the metadata libGedmoUploadableUploadableListenerphp meta omgetClassMetadatagetclassfirst entity config thisgetConfigurationom metaname foreach thisfileInfoObjects as info entity info entity If the entity is in the identity map it means it will be updated We need to force the dirty check here by modifying the path We are actually setting the same value but this will mark the entity as dirty and the onFlush event will be fired even if theres no other change in the entitys fields apart from the file itself if uowisInIdentityMapentity if config filePathField path thisgetFilePathFieldValuemeta config entity uowpropertyChangedentity config filePathField path path else fileName thisgetFileNameFieldValuemeta config entity uowpropertyChangedentity config fileNameField fileName fileName uowscheduleForUpdateentity Easy fix would be to move these two lines inside the foreach loop but it would have a negative impact on performance php meta omgetClassMetadatagetclassfirst entity config thisgetConfigurationom metaname How about a caching mechanism to avoid calling getClassMetadata and getConfiguration php metaByClass configByClass foreach thisfileInfoObjects as info entity info entity changes start here entityClass getclassinfo entity if issetmetaByClass entityClass metaByClass entityClass omgetClassMetadataentityClass configByClass entityClass omgetClassMetadataentityClass meta metaByClass entityClass config configByClass entityClass changes end here If the entity is in the identity map it means it will be updated We need to force the dirty check here by modifying the path We are actually setting the same value but this will mark the entity as dirty and the onFlush event will be fired even if theres no other change in the entitys fields apart from the file itself if uowisInIdentityMapentity if config filePathField path thisgetFilePathFieldValuemeta config entity uowpropertyChangedentity config filePathField path path else fileName thisgetFileNameFieldValuemeta config entity uowpropertyChangedentity config fileNameField fileName fileName uowscheduleForUpdateentity What do you guys think Good enough for a PR Thanks Hello I would like to use these extensions with slim Is anyone able to supply instructions Hello I get started with symfony and install doctrine extensions In the your doc said edit appconfigconfigyml But such file doesnt exist in symfony skeleton project As I understand it I need edit configpackagesdoctrineyaml file And second Into the doc written dir kernelrootdirvendorgedmodoctrineextensionslibGedmoTranslatableEntity But now its need use kernelprojectdir instead kernelrootdir Where can I see entire list of changes