Producing very strange errors in the process Compiling scrpcapi v Usersnikolayvolfgitsubstrateclientrpcapi error Missing returns attribute clientrpcapisrcauthormodrs Submit hexencoded extrinsic for inclusion in block error Missing returns attribute clientrpcapisrcauthormodrs Submit hexencoded extrinsic for inclusion in block where rust rpcname authorsubmitExtrinsic fn submitextrinsica a self extrinsic Bytes FutureResultLta Hash Updates the requirements on futures to permit the latest version details summaryRelease notessummary Sourced from futuress releases Fix signature of LocalSpawn trait breaking change see details details summaryChangelogsummary Sourced from futuress changelog Fix signature of LocalSpawn trait breaking change see Stable release along with stable asyncawait Added asyncawait to default features Changed Spawn trait and FuturesUnorderedpush to take self Moved Spawn and FutureObj out of futurescore and into futurestask Changed case convention for feature names Added executor feature Moved copyintocopybufinto Changed SinkExtsendall to accept a TryStream Removed ThreadPoolrun Changed to use our own definition of ioCursor Removed BufReaderpollseekrelative Changed skip to take a usize rather than u Removed Stream impl for VecDeque Renamed Peekablepeek to pollpeek Added immutable iterators for FuturesUnordered Made ThreadPool optional Renamed oneshotSenderpollcancel to pollcanceled Added some missing Clone implementations Documentation fixes alpha Stabilized the asyncawait feature Made asyncawait feature no longer require std feature Updated procmacro syn and quote to Exposed unstable BiLock Renamed nightly feature to unstable Moved to our own ioEmpty Repeat Sink Made AsyncReadinitializer API unstable Moved the Never type from futurescore to futuresutil Fixed useafterfree on panic in ArcWakewakebyref Added AsyncReadExtchain Added Streamsizehint Added some missing FusedFuture and FusedStream implementations Added a From impl for Mutex Added Mutexgetmut intoinner Reexported TryConcat and TryFilter Lifted Unpin bound and implemented AsyncBufRead for ioTake Lifted Unpin bounds on getpinmut Changed SendAll to flush the Sink when the source Stream is pending Set default threadpool size to one if numcpusget returns zero Removed dependency on rand by using our own PRNG Removed futurescore dependency from futuressink alpha Rewrote join and tryjoin as procedural macros to allow passing expressions Banned manual implementation of TryFuture and TryStream for forward compatibility See for more details trtable truncated details details summaryCommitssummary afd c Stage fc f c fix Local SpawnExt should take self as their base traits e a Merge pull request from taikieci a e Temporarily ignore bufferunorderedworks test on all targets e Update and fix CI config c fa Stage release f ce Change stream bounds of sendall fef Add asyncawait to default features f ccb Make Spawnspawn take self rather than mut self c Revert Move AtomicWaker from futurescore to futurestask Additional commits viewable in compare view details br Dependabot will resolve any conflicts with this PR as long as you dont alter it yourself You can also trigger a rebase manually by commenting dependabot rebase dependabotautomergestart dependabotautomergeend details summaryDependabot commands and optionssummary br You can trigger Dependabot actions by commenting on this PR dependabot rebase will rebase this PR dependabot recreate will recreate this PR overwriting any edits that have been made to it dependabot merge will merge this PR after your CI passes on it dependabot squash and merge will squash and merge this PR after your CI passes on it dependabot cancel merge will cancel a previously requested merge and block automerging dependabot reopen will reopen this PR if it is closed dependabot close will close this PR and stop Dependabot recreating it You can achieve the same result by closing it manually dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version unless you reopen the PR or upgrade to it yourself dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version unless you reopen the PR or upgrade to it yourself dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency unless you reopen the PR or upgrade to it yourself dependabot use these labels will set the current labels as the default for future PRs for this repo and language dependabot use these reviewers will set the current reviewers as the default for future PRs for this repo and language dependabot use these assignees will set the current assignees as the default for future PRs for this repo and language dependabot use this milestone will set the current milestone as the default for future PRs for this repo and language dependabot badge me will comment on this PR with code to add a Dependabot enabled badge to your readme Additionally you can set the following in your Dependabot dashboard Update frequency including time of day and day of week Pull request limits per update run andor open at any time Automerge options neverpatchminor and devruntime dependencies Outofrange updates receive only lockfile updates if desired Security updates receive only security updates if desired details If this is tried in legacy rust not rust rust rpcserver pub trait Foo RPC Metadata type Metadata fn bar self u Resultu You will end with a similar error as follows bash rpcserver error expected To fix it you can do rust rpcserver pub trait Foo RPC Metadata type Metadata fn bar self u Resultu or rpcserver pub trait Foo RPC Metadata type Metadata fn bar self b u Resultu For further information see Seems that the build or one of the tests hangs and breaks the build I need to run a synchronous io inside a jsonrpc method To do this Im creating tokio ThreadPool and constructing future using blocking As I understand RPC trait functions are supposed to return either Result or FutureResult Looking at the code of FutureResult I see that it assumes that returned future is already completed How can I spawn a new future from other tokio pool and what rpc methods function signature should look like if my future signature is FuturesLazy Boxdyn stderrorError Im continuously stumbling upon errors like this into the trait stdconvertFromfuturesLazy closuresrcpipeserverrpcrs self runid id ts futuresfuturePollFn closuresrcpipeserverrpcrs self runid id ts is not implemented for futuresFinished stdboxedBoxdyn stderrorError It would be great to have support for JSONRPC servers running in a subprocess eg spawned by Commandspawn that communicate via stdio This would be especially useful as a counterpart to jsonrpcstdioserver Does the current design of jsonrpccoreclient allow for a server and client different schemas to share the same duplex transport The use case for this would be a language server which has a handful of special methods and notifications that are sent from the server to the client rather than the other way around see for further detail They both also communicate over stdio which is challenging since one has to be careful to not accidentally feed the responses from the client read on stdin back into the server as though it were a request In towerlsp I am currently working around this limitation by manually interleaving the responses produced by the server together with extra notifications intended for the client to read all to stdout This works perfectly for notifications but I cannot easily support sending requests to the client and picking up the responses all while sharing the same stdout and stdin used by the server As such it would be nice if there was some way to have the clienttoserver schema defined in one jsonrpcderiverpc trait the servertoclient schema defined in another jsonrpcderiverpc trait and to instantiate both using the same stdin and stdout handles Transitioning from futures to stdfutureFuture would greatly improve the user experience in the near future especially with asyncawait stabilizing in Rust and stdfutureFuture compatible versions of tokio hyper and tower on the horizon It seems that jsonrpccore is currently the only library in my personal JSONRPC projects that still relies exclusively on futures and it is blocking me from switching over to the new trait completely I understand if this issue will sit on the backburner for the time being until at least tokio is released though I am trying to implement the basic example using derive from the README Since the code snippet only seems to require jsonrpccore and jsonrpcderive I did not include any other dependencies in Cargotoml toml dependencies jsonrpccore jsonrpcderive The compiler however yields an error that a crate named serde is required too error Could not find serde in dependencies or devdependencies in Cargotoml src mainrs rpc Indeed does the rpc macro have a dependency on serde serde is only listed as a devdependency though so it will not propagate into projects consuming the library Adding serde explicitly to my Cargotoml did fix the issue but brought up another missing dependency jsonrpccoreclient which again had to be added manually despite being used by the rpc macro Am I missing something Would it be possible to clarify which dependencies have to be provided manually when using jsonrpcderive