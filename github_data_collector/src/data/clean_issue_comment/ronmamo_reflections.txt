 I was using and with scanners it was working fine but by just changing the version to stared getting the exception for orgreflectionsRflectionException Scanner SubTypeScanner was not configured java Reflections reflections new Reflectionsnew ConfigurationBuilder setUrlsClasspathHelperforPackagemyprojectprefix setScannersnew SubTypesScanner new TypeAnnotationsScanner filterInputsBynew FilterBuilderincludePackagemyprojectprefix reflectionsgetSubTypesOfsomeClass here it throws exception I noticed that when I add a class which extend some class to the package this error goes Same with FieldAnnotationScanner or any other scanner To try please provide an invalid package for reflection creation you will see all these errors coming even after configuring all scanners with reflection I am using version of reflections together with kotlin in unit tests The reflections api is not handling the internal keyword of kotlin correctly This keyword appends the module in which the code resides to the method name comgithubjanphkrereflectionstestReflectiveKotlinTestTestItemgetTimeuitestsdebug This results in a ReflectionsException because every is treated as class delimiter orgreflectionsReflectionsException Cant resolve member named comgithubjanphkrereflectionstestReflectiveKotlinTestTestItemgetTimeuitestsdebug at orgreflectionsutilUtilsgetMembersFromDescriptorsUtilsjava at orgreflectionsReflectionsgetMethodUsageReflectionsjava at comgithubjanphkrereflectionstestReflectiveKotlinTestreflectivetimeUsageforbiddenReflectiveKotlinTestkt at sunreflectNativeMethodAccessorImplinvoke Native Method at sunreflectNativeMethodAccessorImplinvokeNativeMethodAccessorImpljava at sunreflectDelegatingMethodAccessorImplinvokeDelegatingMethodAccessorImpljava at javalangreflectMethodinvokeMethodjava at orgjunitrunnersmodelFrameworkMethod runReflectiveCallFrameworkMethodjava at orgjunitinternalrunnersmodelReflectiveCallablerunReflectiveCallablejava at orgjunitrunnersmodelFrameworkMethodinvokeExplosivelyFrameworkMethodjava at orgjunitinternalrunnersstatementsInvokeMethodevaluateInvokeMethodjava at orgjunitrunnersParentRunnerrunLeafParentRunnerjava at orgjunitrunnersBlockJUnit ClassRunnerrunChildBlockJUnit ClassRunnerjava at orgjunitrunnersBlockJUnit ClassRunnerrunChildBlockJUnit ClassRunnerjava at orgjunitrunnersParentRunner runParentRunnerjava at orgjunitrunnersParentRunner scheduleParentRunnerjava at orgjunitrunnersParentRunnerrunChildrenParentRunnerjava at orgjunitrunnersParentRunneraccess ParentRunnerjava at orgjunitrunnersParentRunner evaluateParentRunnerjava at orgjunitrunnersParentRunnerrunParentRunnerjava at orgjunitrunnerJUnitCorerunJUnitCorejava at comintellijjunit JUnit IdeaTestRunnerstartRunnerWithArgsJUnit IdeaTestRunnerjava at comintellijrtexecutionjunitIdeaTestRunnerRepeaterstartRunnerWithArgsIdeaTestRunnerjava at comintellijrtexecutionjunitJUnitStarterprepareStreamsAndStartJUnitStarterjava at comintellijrtexecutionjunitJUnitStartermainJUnitStarterjava Caused by orgreflectionsReflectionsException Cant resolve member named uitestsdebug for class comgithubjanphkrereflectionstestReflectiveKotlinTestTestItemgetTime at orgreflectionsutilUtilsgetMemberFromDescriptorUtilsjava at orgreflectionsutilUtilsgetMembersFromDescriptorsUtilsjava more This example comes from this short example I build this down to package comgithubjanphkrereflectionstest import orgjunitAssert import orgjunitTest import orgreflectionsReflections import orgreflectionsscannersMemberUsageScanner import orgreflectionsutilClasspathHelper import orgreflectionsutilConfigurationBuilder import orgreflectionsutilFilterBuilder class ReflectiveKotlinTest class TestItem internal fun getTime Long return SystemcurrentTimeMillis Test fun reflectivetimeUsageforbidden val packageName thisclassjavapackagename val reflections ReflectionsConfigurationBuilder setUrlsClasspathHelperforPackagepackageName setScannersMemberUsageScanner filterInputsByFilterBuilderincludePackagepackageName val systemTimeMethod SystemclassjavagetMethodcurrentTimeMillis val methodUsages reflectionsgetMethodUsagesystemTimeMethod ifmethodUsagesisNotEmpty Assertfail My suggestion would be to split off the string at the last dot and use the remaining part as the method name before looking at the class part of the string getMethodsAnnotatedWith does not return methods with metaannotations like getTypesAnnotatedWith Example TargetMETHOD ANNOTATIONTYPE RetentionRUNTIME interface MetaMethod MetaMethod TargetMETHOD RetentionRUNTIME interface AM MetaMethod TargetMETHOD RetentionRUNTIME interface BM class A AM public void inA class B BM public void inB class A AM public void inA public class Annotations public static void mainString args Reflections reflections new Reflections new ConfigurationBuilder forPackagesorgjsondocspringmvcscanner addScannersnew MethodAnnotationsScanner SystemoutprintlnMetaMethods for Method type reflectionsgetMethodsAnnotatedWithMetaMethodclass SystemoutprintlntypegetName SystemoutprintlnAnnotatedMethdos for Method type reflectionsgetMethodsAnnotatedWithAMclass SystemoutprintlntypegetName prints MetaMethods AnnotatedMethdos inA inA expected MetaMethods inA inA inB AnnotatedMethdos inA inA i have some code that works perfectly fine against java classes reflections new Reflectionsnew ConfigurationBuilder setUrlsurls addClassLoaderClassLoadergetSystemClassLoader addClassLoaderClassLoadergetClassLoader addScannersnew MemberUsageScanner new MethodAnnotationsScanner new MethodParameterScanner SetMethod getTestMethods return reflectionsgetMethodsAnnotatedWithIssue but when i run it against a project with groovy classes i run into the ClassNotFoundException This exception is thrown because there is a dot that is left behind in the class name so instead of comsomepackageclassName i have comsomepackageclassName i have narrowed this issue down to the getMemberFromDescriptor method within the orgreflectionsutilUtilsclass lines for some reason the groovy class descriptor has comsomepackageclassNamespockfeature The memberKeylastIndexOf leaves the behind This PR makes finding classes work for Java If none of the ClassLoaders are URLClassLoader use the property javaclasspath to find all classes This might also fix Hello first of all thank you for providing this great library as OpenSource software I tried using getMethodParamNames today but the returned list contains not only the names of the method parameters but also the names of the local variables of that method I wrote up a quick demonstration to show this public void testString testParam String testLocal local public static void mainString args throws Exception final Method method DemoclassgetMethodtest Stringclass Reflections reflections new Reflectionsdenikos new MethodParameterNamesScanner ListString paramNames reflectionsgetMethodParamNamesmethod SystemoutprintlnparamNames The output I get is testParam testLocal Is this a known issue or is it maybe caused by some configu ation issue Given the inclusion of WTFPL I assume the listing of two licenses in the pom is an either or not a combination If that assumption is true this commit adds that clarity using language similar to another dual licensed repo Reference Issue Cant resolve member named for class Because there is an extra value in the memberkey ClassNamelambdamethodName I tried to replicate in tests but it is not java I tried to upgrade javassist it didnt work