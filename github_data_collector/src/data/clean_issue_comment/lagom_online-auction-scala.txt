It seems in the design of this example the separation of operations that mutate the persistent entity and the ones that query the state of it is rather lax Eg placing a bid also return the current price What is the authors take on separating commands and queries CQS when it comes to Lagom persistent entities It seems some CQRS proponents on the internet suggest following this rather strictly eg a command that mutates the state should only result in an acknowledgement not in business data being returned If we were to follow that to query the state either the read side or in the Lagom case also ReadOnlyCommands should be used but not commands that also mutate the state Is Lagom opinionated in the same way or is it considered good practise to return eg the updated state from the command handler I am not sure if this is the issue specifics to my local settings or not But every time I try to deploy the itemsvc or biddingsvc to my Google KBE I am getting this exception Resolve attempt failed Cause sprayjsonDeserializationException Object is missing required member items img width altscreen shot at am src onlineaucitonscalas version of the Search service is not as complete as the java equivalent in onlineauctionjava For starters theres no UI As raised in there was a runtime issue fixed in But exposed another runtime issue curl dkeywordschairmaxPrice currencyUSD X POST H ContentType applicationjson returns nameUndeserializableExceptiondetail error rootcause type parsingexception reason itemStatus query malformed no startobject after query name line col type parsingexception reason itemStatus query malformed no startobject after query name line col status Hi everyone I would like to refactor the user service and add a couple of features Most of it will be inspired by the onlineauctionjava and specificaly from their service descriptor As you can see the java versions is supporting a registration process a login endpoint as well as a Read side support Ill submit several PRs this week in order to make the userservice support those If you have any other suggestions for this service let me know Chris Its necessary to provide the transaction api api and implementation projects in this repository with Scala code following the same endpoints and business rules of the onlineauctionjava repository Is there any reason why transaction api project isnt available yet As reported via Gitter the subscriptions on serachservice are not compliant since the collect operation will ski p some messages causing the usercode branch and the offset branch in the topic consumption to missalign I think the equivalent code is correct in onlineauctionjava Reproduction Start the sample app with a fresh database by running sbt clean runAll Create a user and an item Stop the server sbt test Expected behavior The tests should pass Actual behavior info The Item service info should allow creating items info should return all items for a given user info should should emit auction started event FAILED info ItemUpdated d b b b e c bf b dc f f dda e c da c df atitledescriptionUSDCreated was not an instance of comexampleauctionitemapiAuctionStarted but an instance of comexampleauctionitemapiItemUpdated ItemServiceImplIntegrationTestscala The events created by the test are not isolated in any way Workaround sbt clean test Currently readme lists a set of services and operationsmessages each of them supports Readme should give some context wrt the project the purpose Lagom instructions to import it into an IDE instructions to run it and a high level architecture See This issue can be split into multiple small PRs As an Item owner I want to edit an items description and auction settings before I start the auction I also want to edit the description and title once the auction is already started