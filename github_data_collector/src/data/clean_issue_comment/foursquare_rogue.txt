Add support for position modifier as described here We probably just need to something like class ModifyPushEachPositionClausefieldName String position Int values Traversable extends ModifyClauseModOpsPush override def extendq BasicDBObjectBuilder Unit qpushfieldNameaddeach QueryHelperslistvaluesaddposition positionpop class ModifyPushEachSliceClausefieldName String slice Int position Int values Traversable extends ModifyClauseModOpsPush override def extendq BasicDBObjectBuilder Unit qpushfieldNameaddeach QueryHelperslistvaluesaddslice sliceaddposition positionpop Note for other weary travelers Ive noticed IntelliJs Scala plugin failing to understand Rogue subfield queries Full error Assuming that IntelliJ was correct I almost gave up and assumed that Rogue subfield queries dont work this is at the v beta tag which seems to have a pretty different syntax for subfield queries than what is documented but luckily I noticed that my running sbt compile was finishing successfully Ill file this against IntelliJ or the Scala plugin soon but wanted to leave a note here about it too As highlighted in thread Were querying for the id but have no way to access it anyway when using the selectname Stringsyntax so we could try not querying for it which would require using the mongofinddifferently not via mongosselect Hi Im using the latest version and it seems I found a bug Here is how to reproduce it import netliftwebmongodbrecordBsonRecord import netliftwebrecordfieldEnumField import netliftwebmongodbrecordBsonMetaRecord import netliftwebmongodbrecordMongoRecord import netliftwebmongodbrecordfieldObjectIdPk import netliftwebmongodbrecordfieldBsonRecordField import wwsdbconnectionMongoConfig import netliftwebmongodbrecordMongoMetaRecord import comfoursquarerogueLiftRogue Enum that causes throuble object TestEnum extends Enumeration type TestEnum Value val ONE TWO Value import TestEnum Model classes class NestedDoc extends BsonRecord NestedDoc def meta NestedDoc the same field type as goodField but Rogue converts it to String in queries object thisFieldIsNotAString extends EnumFieldthis TestEnum object NestedDoc extends NestedDoc with BsonMetaRecord NestedDoc class TestDbClass extends MongoRecord TestDbClass with ObjectIdPk TestDbClass override def meta TestDbClass object goodField extends EnumFieldthis TestEnum this field works just fine object badField extends BsonRecordFieldthis NestedDoc object TestDbClass extends TestDbClass with MongoMetaRecord TestDbClass override def mongoIdentifier MongoConfigidentifiervend The app that tests this scenario object TestDbApp extends App def printDocWithFieldsdoc TestDbClass Unit printlndoc printlndocgoodFieldgetgetClass printlndocbadFieldgetthisFieldIsNotAStringgetgetClass MongoConfiginit val doc TestDbClasscreateRecord goodFieldONE badFieldNestedDoccreateRecordthisFieldIsNotAStringONE println n nDoc before Save printDocWithFieldsdoc val docDb docsaveTheRecordget val docId docDbidget println n nDoc after Save printDocWithFieldsdocDb val query TestDbClasswheregoodField eqs ONE andbadFieldsubfieldthisFieldIsNotAString eqs TWO println n nQuery printlnquery printlnGood field type queryasDBObjectgetgoodFieldgetClass printlnBad field type queryasDBObjectgetbadFieldthisFieldIsNotAStringgetClass val docDbRefetch TestDbClassfinddocIdhead println n nDoc fetched with Java driver printDocWithFieldsdocDbRefetch val docDbFetchWithRogue TestDbClasswhereid eqs docId andgoodField eqs ONEfetchhead println n nDoc fetched with Rogue using good field printDocWithFieldsdocDbFetchWithRogue val docDbFetchWithRogueBadField TestDbClasswhereid eqs docId andbadFieldsubfieldthisFieldIsNotAString eqs ONEfetch println n nDoc fetched with Rogue using bad field docDbFetchWithRogueBadField match case expected printDocWithFieldsexpected Desired behavior case List printlnDidnt find the doc Current behavior bug Ive noticed these comments in srctestscalacomfoursquarerogueEndToEndTestscala This behavior is broken because we get a String back from mongo and at that point we only have a DummyField for the subfield and that doesnt know how to convert the String to an Enum However this seems to be a different issue could you confirm Thanks ps I can write a test and submit a pull request if it helps Changes since early betas have not been merged into master is this on purpose Latest Build beta Roguescala lacks a conversion from Calendar to a QueryField It still exists in master branch beta 