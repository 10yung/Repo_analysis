 Id be willing to implement a fix Describe the bug cache didnt use config cacheFolder it save cache at C Users User AppData Local Yarn Berry cache To Reproduce The minimal information needed to reproduce your issue ideally a packagejson with a single dep Note that bugs without minimal reproductions might be closed IMPORTANT We strongly prefer reproductions that use Sherlock Please check our documentation for more information Screenshots If applicable add screenshots to help explain your problem Environment if relevant please complete the following information OS eg OSX Linux Windows Node version eg Yarn version eg rc Additional context Add any other context about the problem here Id be willing to implement a fix Describe the bug Installing yarnpkgcore yarnpkgpnpify etc only installs javascript files There are no typescript definitions in the published packages To Reproduce js repro const promises writeFile requirefs await packageJsonAndInstall devDependencies yarnpkgcore rc typescript await writeFileindexts import Plugin from yarnpkgcore note wrong code on purpose because we expect a compilation failure below const foo Plugin not a plugin await expectyarntsc noImplicitAny indextsrejectsnottoThrow Could not find a declaration file for module yarnpkg core Screenshots Id be willing to implement a fix Describe the bug This code worked in RC but not works in RC const fs requirefs const rc root true extends eslintrecommended fswriteFileSynceslintrcyaml rc fswriteFileSync js await yarnadd eslint await yarneslint js x Id be willing to implement this feature This feature can already be implemented through a plugin Describe the user story As a developer I have a build step in my package but I want to publish a flat package For example my packages typescript sources are in a src subfolder In the published package I dont want there to be a dist or lib folder with the resulting javascript files I want the javascript files to be in the root of the published package See also the angular package format spec On the other hand I dont want to have these javascript files dirty my workspace Our current approach is to have a dist folder which contains the built javascript files the package manifest and any assets which then gets published instead of publishing the workspace folder Describe the solution youd like Id like to be able to use yarn npm publish and yarn pack to publish folders that are not a workspace I can see two ways for this to work at first glance Like in yarn v make the yarn pack and yarn npm publish commands work in any folder regardless of whether its a workspace Add a property to tell yarn that we run packpublish in a workspace it should actually run in a different folder This could be a command parameter but wed have to pass it with every execution which is annoying and errorprone a property in packagejson but then wed be adding custom properties to the packagejson hellip a configuration variable but this folder isnt necessarily the same for every package eg weve currently got repo rootdistscopepackage as output folder Describe the drawbacks of your solution Extra complexity in the packpublish commands Allowing packpublish everywhere is another way for people to make mistakes it changes what happens if you run yarn pack in a subfolder of a package Describe alternatives youve considered Not using yarn eg npm to pack amp publish Making the build output the package folder but that looks messy and it breaks our setup where weve got an indexjs that loads tsnode and then reexports the srcindexts file to allow us to run our workspace packages from source within the workspace Publishing nonflat packages This is actually what we did in our original project setup four years ago and it led to issues with secondary entrypoints in packages scopepackageentrypoint Implement this as a plugin This is the most viable alternative imo but also leads to duplicating a lot of yarn logic x Id be willing to implement a fix if I actually found a root cause Describe the bug As mentioned in As from the latest version of gatsby yarn berry no longer work properly with it yarn build works perfectly but yarn start will result in an error shown below ERROR WEBPACK Generating development JavaScript bundle failed Failed to load config reactapp to extend from Referenced from BaseConfig File cacheappjs failed Building development bundle s To Reproduce Update the gatsby dependency to the latest version by running bash yarn workspace yarnpkggatsby add gatsby Then run the development server bash yarn workspace yarnpkggatsby start We can also reproduce it by creating a new gatsby project bash yarn dlx gatsby new berrygatsby cd berrygatsby yarn start We only covered yarn build in our e e test so it didnt catch that Sherlock js repro const path requirepath await yarndlx gatsby new berrygatsby processchdirpathresolveprocesscwd berrygatsby await yarnbuild await yarndlx startserverandtest yarn start curl s localhost grep h Hi peopleh Screenshots Environment if relevant please complete the following information OS macOS Node version Yarn version rc Additional context Note that its not happening with the current version we used in our website Looks like the problem is with eslintloader or more specifically how gatsby uses it By filtering out the eslintloader rule in webpack config can no longer reproduce the issue I havent looked into the source or diff the versions to find the root cause yet Ill continue try to find it its fun Update Im able to pin point the problem to eslintconfigreactapp Downgrading it to fixes the issue Ill continue to try to find what goes wrong Update Seems like its happening because of eslint actually Especially in this line when it tries to call ModulecreateRequireCWDplaceholderjsrequireeslintconfigreactapp will results in a failure Ill try to create a minimal reproduce steps for eslint Update Since that gatsby bundles eslintconfigreactapp inside the gatsby package so that the user wont have to install that package themselves However requiring the package is handled by eslint which requires from cwd ie the user package root hence the error I have no idea how to fix it now though Im sure that its something happens a lot in other packages too maybe arcanis has an idea Whats the problem this PR addresses These changes are not obviously wrong so much as nonidiomatic How did you fix it By correcting the phrasing to be more idiomatic Id be willing to implement this feature This feature can already be implemented through a plugin Describe the user story When a user is trying to build an electron project using electronbuilder the build fails because Windows cant execute an exe file within a zip archive Describe the solution youd like That Yarn would detect that a dependency has executeable files and automatically unplug said dependency Describe the drawbacks of your solution Yarn would have to do more work at install time Describe alternatives youve considered Opening a PR upstream to add a empty postinstall script just to have yarn unplug it automatically this would only solve the problem for this one dependency Running yarn unplug on the offending packages creates another hurdle for PnP adoptation Additional context Where electronbuilder spawns the package The package that needs to be unplugged Id be willing to implement a fix Describe the bug I think that Sherlock is useless for windows so I will not use it for this issue When the project is located in the folder which is symbolic link and I perform yarn install or yarn add from this folder it creates pnpjs file with incorrect packageLocation for dependencies packageLocation created related to the symbolic link but it should be related to the original location Under linux yarn resolves symbolic links during pnpjs creation but under windows not seems you forgot to do this I think I can fix it if you give me directions where I should look for a code responding for pnpjs generation under windows Here is the script that setup folders structure and reproduce the issue it should be executed with admin permissions because mklink under windows requires elevated permissions create original project location rmdir S Q mkdir project create symbolic link to the project rmdir project mklink D project project init project cd dp project call yarn init call yarn add eslint test call yarn eslint version cd dp pause Id be willing to implement a fix Describe the bug I have a library that depends on rxjs as a peer dependency but it also has tests inside it If I add rxjs as a normal dependency tests run properly If instead I run yarn add peer dev rxjs My tests will complain about Cannot find module rxjs from Note that Im also using typescript and tsjest Ideally the dependency should be available to both peer and dev dependencies To Reproduce js repro const promises readFile requirefs await packageJsonAndInstall devDependencies await yarnadd dev rxjs await yarnadd peer rxjs const pkgJson JSONparseawait readFilepackagejson utf expectpkgJsontoHavePropertypeerDependencies expectpkgJsontoHavePropertydevDependencies expectpkgJsonpeerDependenciestoHavePropertyrxjs expectpkgJsondevDependenciestoHavePropertyrxjs Additional context This is also a bug in yarn v Id be willing to implement a fix Describe the bug See proposalpkgexports Node Documentation Node with the experimentalmodules flag and Node without the flag resolves modules differently than Yarn rc with PNP To Reproduce See this project packagespackagewithexportspackagejson name packagewithexports version exports mainjs subother otherjs Example Expected packagespackagewithexportsmainjs Actual packagespackagewithexportsindexjs requirepackagewithexports Example Expected packagespackagewithexportsotherjs Actual throws error requirepackagewithexportssubother Environment OS Windows Node version Yarn version rc 