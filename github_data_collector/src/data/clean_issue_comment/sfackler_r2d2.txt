Would it be possible to get an even for the HandleEvent trait set via the eventhandler to get notified if all the connections are closed Or perhaps it could just notify on connection close as it would be then easy to get the State of the pool This would be helpful as a way to clean up pools for endpoints that are no longer being used Versions Rust rustc nightly ebd e e and rust in Diesel feature postgres r d Database Postresql Operating System Linux Docker in aws cloud ECS And Manjaro Problem Description Pool creation panic without clear log This is my code let manager ConnectionManagerPgConnectionnewDATABASEURL let pool PoolnewmanagerexpectFailed to create pool But I made a mistake and I open the port of DATABASEURL to the wrong IP or just give it the wrong port It panic and I have no clue to found what was the root cause What is the expected output thread main panicked at Failed to create pool ErrorEXPLICITMESSAGE srclibcoreresultrs where EXPLICITMESSAGE could be something like cannot reach database or connection failed or even better if possible host is up but port is filtered What is the actual output thread main panicked at Failed to create pool ErrorNone srclibcoreresultrs Steps to reproduce Setup your database and do not open port on the server or do not allow the diesel server ip or set the wrong closedport Then start your pool There should be a sec wait more or less on my computer its s Then it panic with the Errornone message Because I did not see information about cassandra on the list so if i want to build like Sql is there a related way The way errors are reported appears to be raceyinconsistent when a connection cannot be obtained from the pool Sometimes you will just get ErrorNone whilst other times you will get an actual error message from the connection manager I assume this is because another thread happens to take the error message before the original thread gets to it I can see why there might be reasons to not want to synchronously establish the connection from the thread that could not find an available connection in the pool eg so that its request could be fullfilled sooner if another connection is returned to the pool more quickly but I think when a connection cannot be established it should behave as though it synchronously attempted to establish the new connection guaranteeing a relationship between failed requests and errors It would also be useful to distinguish failures due to hitting the maxsize on the pool from connection failures at the moment you also IIUC get an ErrorNone if the pool is maxed out Currently Pool does not implement UnwindSafe or RefUnwindSafe This is due to Condvar not implementing it in the standard library That type probably should implement it but Pool shouldnt be UnwindSafe prior to this commit anyway antidoteMutex incorrectly implements UnwindSafe when it should not as it removes the poisoning mechanism that makes Mutex be UnwindSafe in the first place Ultimately prior to this commit PoolM should only be UnwindSafe if M UnwindSafe and MConnection UnwindSafe The need for that bound on MConnection is because we return the connection to the pool on panic even if its in a potentially invalid state This commit adds explicit implementations of UnwindSafe and RefUnwindSafe and also removes the need to bound that on the connection being UnwindSafe by only returning a connection to the pool if it was not dropped during a panic This ensures that we dont end up in a situation where a connection is potentially returned to the pool in a state where isbroken would return true but it is not in an expected state eg having an open transaction It also means that the connection can be expected to be dropped if a panic occurs while it is being used eg ensuring the connection is terminated if there was an open transaction We still need an UnwindSafe bound on the connection manager as we cant guarantee that it will be in a reasonable internal state if a panic occurs in one of its methods Fixes Fixes All types which are Sync should also implement RefUnwindSafe as the former implies the latter Currently the Pool type is not RefUnwindSafe through no fault of its own because it stores a Condvar and Condvar is also incorrectly missing a RefUnwindSafe implementation in the rust standard library However r d could explicitly provide this implementation ing as they might be tainted Currently PooledConnection unconditionally returns the connection to the pool on drop Since a panic could happen at any time we cant assume that the connection will be in a good state if its being dropped as the result of unwinding r d should either check threadpanicking before checking the connection back into the pool or should have a T UnwindSafe constraint on the connection