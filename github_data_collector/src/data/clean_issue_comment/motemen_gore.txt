I have a config module available on GOPATH I verify this by running the following program package main import config fmt func main configNewConfig fmtPrintfOK n When run this prints as expected go run maingo OK However with gore I get an error gore gore version help for help gore import config gore import fmt gore configNewConfig cannot load config malformed module path config missing dot in first path element gore fmtPrintfOK n cannot load config malformed module path config missing dot in first path element gore print package main import githubcomk kubunpp fmt config func gorepxs interface for x range xs ppPrintlnx func main configNewConfig fmtPrintfOK n gore Am I doing something wrong I just updated gore after running into and Ive tried updating gore both with GO MODULEon and without To Reproduce file test go package test var x in shell gore context test go in gore gore x gore t x type cannot get type x gore t int Expected t x show type of x correctly Observed x is loaded to current environment but t x doesnt works Is there a way to easily benchmark existing functions without writing boiler plate BenchmarkFunC like code Like import alias githubcomsomepkg seems like parserParseFile can not process an alias import With all the goodies included so that it could be run straight away gore import githubcomlibpq no errors connect to a postgres database gore errorserrorStringsql unknown driver postgres forgotten import How do I import githubcomlibpq properly Thank you Kind of like in the Python REPL Is there anyway to undo my input or if I import the wrong package how to cancel it gore import fmt gore fmtPrintlnha ha int interface nil gore fmtPrintlnha ha ha int interface nil gore fmtPrintlnha ha ha ha int interface nil gore fmtPrintlnha ha ha ha ha gore gore gore See the above short session and note that the calls to fmtPrintlnha seem to stack and repeat each time fmtPrintln is used is this intended Also note that omitting the semicolon results in int interface nil being printed after the accumulated output from fmtPrintln When asign timeNow to a variable that variable is not fixed and changes every time you print it go t timeNow t timeNow t one value t would print another value t Subt t Subt different from previous evaluation my gore version is and go version is 