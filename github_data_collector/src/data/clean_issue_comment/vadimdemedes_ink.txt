While playing with Suspense with ink I quickly ran into this error The above error occurred in the Suspense component in Suspense created by Main in div created by Box in Box created by Main in Main in App React will try to recreate this component tree from scratch using the error boundary you provided App node UnhandledPromiseRejectionWarning TypeError unhideInstance is not a function Other than the error messages being out of order it has pretty easy to determine the problem TypeError unhideInstance is not a function Im assuming that reactreconciler uses this function with the Suspense component Looking at Adds additional host config methods For mutation mode hideInstance hideTextInstance unhideInstance unhideTextInstance Changes include A test case reproducing the problems Fix that stubs the missing method I want to clear the screen before exiting This is what I tried js apprerenderBox But it doesnt work If I try to print an empty line with apprerenderBox nBox it works but I dont need an empty line Could you please give me a piece of advice Hi First ink is an amazing awesome project and Im so glad it exists Have you considered support for mutating the cursor position Im working on the repl for rickbuttonturbo and need a way to represent the actual cursor Ideally the cursor could exist as a special component that when drawn on the screen moves the cursor to its actual position in the output As a usage suggestion does this make sense jsx import Cursor from ink function Componentprops return spanSome text Cursor span I would love to contribute an implementation of this if you think this is acceptable Hello thanks for making a great library Been using ink for a few months its been a neat environment to develop in One of my applications recently needed the inkquicksearch component but after reading over the original it seemed more straightforward to give it a proper rewrite This new version is written as a function component which uses Inks new primitives and hooks PR is just adding a link to the README so others can make use of it Let me know if theres anything youd like me to tweak What do you think of adding an option maybe passed to render that disables all colored output This could just be a flag that changes the behavior of the Color component that toggles whether this transformChildren method is provided or not The usecase is that some terminals may have limited color support say fe rendering grey text with the same color as the terminal background An easy solution for these users would be to offer a flag that disables colored output Reproducible example js const React requirereact const Box Static render requireink const Message text return Box textWrapwrap text Box const CLI message return Box flexDirectioncolumn Static Message textmessage Static Box const message Lorem ipsum dolor sit amet consectetur adipiscing elit Donec ornare elit sit amet lorem rutrum scelerisque n Vivamus id mauris ac nisi tristique mollis id egestas risus Integer cursus auctor eros ac tempus velit cursus eu n Orci varius natoque penatibus et magnis dis parturient montes nascetur ridiculus mus Etiam luctus ornare sollicitudin n Duis finibus ut enim vitae consequat Curabitur non facilisis erat at suscipit magna Phasellus pellentesque pellentesque n render CLI messagemessage Steps to repro Resize terminal so that wrapping happens Run the example above Expected result Full message string to be rendered Actual result Only the first lines are displayed sometimes when terminal width is too small The interesting thing is that if we remove part from the message component it works as expected Removing textWrapwrap also helps The useInput hook is nice but its always attaching itself to stdin This may cause issues when too many elements are calling it as Node will then print a warning that will glitch the output node warning possible EventEmitter memory leak detected listeners added Use emittersetMaxListeners to increase limit In my case it happens because each row of a table has a useInput registration in order to navigate from left to right but only when the row is selected in the first place A fix that works for me is to simply disable the useInput hook for components that dont need it right now ie rows that arent currently selected Unfortunately since hooks dont work when inside control flows it means the check must be internalised into the hook hence this PR Do you have any recommandation for managing focus for multiple input component My current use case is to be able to display multiple SelectInput and be able to tab thru them The component already have a focus prop but how would I manage the focus when the multiple SelectInput are not within the same react component This issue seems new with the latest version and it crosses two libraries Things that hide the error Remove Color Remove Box Set value to a string of length or greater import React from react import TextInput from inktextinput import render Color Box from ink const Test const val setVal ReactuseState return Box Color green TextInput valueval onChangesetVal mask Color Box renderTest Error is TypeError Cannot read property yogaNode of undefined Same error with Text in place of the TextInput component When an error boundarys getDerivedStateFromError handler is called React will print out a warning to the console like so The above error occurred in the Example component in Example in ErrorBoundary in App React will try to recreate this component tree from scratch using the error boundary you provided Because of this log output it means that when the error boundary component is rendered after the previous component instead of overwriting it I put together a small example that hopefully explains this better tsx import React useState from react import render Box Color useInput from ink See Note the output of this script depends on your terminal width If you have enough space the ErrorBoundary An error occurred Whoops will overwrite the React will try to line entirely Output Hit any key to crash The above error occurred in the Example component in Example in ErrorBoundary in App React will try to recreate this component tree from scratch using the error boundary you proAn error occurred Whoops Expected An error occurred Whoops interface ErrorBoundaryState error Error class ErrorBoundary extends ReactComponent ErrorBoundaryState state as ErrorBoundaryState static getDerivedStateFromErrorerror Error PartialErrorBoundaryState return error render const error thisstate if error return thispropschildren return Box ColorAn error occurred errormessageColor Box const Example ReactFC const shouldError setShouldError useStatefalse useInput setShouldErrortrue if shouldError throw new ErrorWhoops return Box Color greenHit any key to crashColor Box async function run const waitUntilExit render ErrorBoundary Example ErrorBoundary debug processenvDEBUG true await waitUntilExit run You can run this like so sh git checkout npm i npx tsnode srcerrorboundariestsx 