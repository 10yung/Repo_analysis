Adding docs for a new plugin On master UserdatabaseId doesnt exist but on releasenext it does and querying for it causes this error Cannot return null for nonnullable field UserdatabaseId graphql query viewer databaseId Using WPGQL v this query gives an error query MyQuery postswhere categoryName us orderby field AUTHOR nodes title Error is Notice Undefined index order in wwwwpcontentpluginswpgraphqlsrcDataConnectionPostObjectConnectionResolverphp on line The field AUTHOR seems to be the source of the error Any valid setting of that gives the same error This query will work though query MyQuery postswhere categoryName us orderby field AUTHOR order ASC nodes title What does this implementfix Explain your changes This changes the fields terms termNames and termSlugs to only be added to the PostObject Types that have registered taxonomy connections and doesnt define the fields at the Interface level as not all Types will have them Does this close any currently open issues closes What does this implementfix Explain your changes Fix UniformResourceIdentifiable Interface to define field types the same as how theyre implemented elsewhere Does this close any currently open issues closes Interface field ContentNodetermNames expected but Page does not provide it Interface field ContentNodetermSlugs expected but Page does not provide it Interface field ContentNodeterms expected but Page does not provide it Interface field ContentNodetermNames expected but MediaItem does not provide it Interface field ContentNodetermSlugs expected but MediaItem does not provide it Interface field ContentNodeterms expected but MediaItem does not provide it While Im pulling the whole schema Im getting these errors Interface field UniformResourceIdentifiabledatabaseId expects type String but CategorydatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but Categoryid is type ID Interface field UniformResourceIdentifiableuri expects type String but Categoryuri is type String Interface field UniformResourceIdentifiabledatabaseId expects type String but PostdatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but Postid is type ID Interface field UniformResourceIdentifiableuri expects type String but Posturi is type String Interface field UniformResourceIdentifiabledatabaseId expects type String but PagedatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but Pageid is type ID Interface field UniformResourceIdentifiableuri expects type String but Pageuri is type String Interface field UniformResourceIdentifiabledatabaseId expects type String but MediaItemdatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but MediaItemid is type ID Interface field UniformResourceIdentifiableuri expects type String but MediaItemuri is type String Interface field UniformResourceIdentifiabledatabaseId expects type String but PostFormatdatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but PostFormatid is type ID Interface field UniformResourceIdentifiableuri expects type String but PostFormaturi is type String Interface field UniformResourceIdentifiabledatabaseId expects type String but TagdatabaseId is type Int Interface field UniformResourceIdentifiableid expects type String but Tagid is type ID Interface field UniformResourceIdentifiableuri expects type String but Taguri is type String In I can view the admin user publicly from a nonauthed request If I switch to the branch that user is now private and I get Internal server error Cannot return null for nonnullable field UserdatabaseId Release Notes Summary This release focused primarily on adding Interfaces for Post and Term objects Interfaces in GraphQL allow for common fields to be registered and shared across Types Similar to Unions they allow for multiple types to be queried from the same field By having Post Objects posts pages etc and Terms Tags Categories etc implement common interfaces various Types can be queried for from the same entry point So instead of having to query only Posts or only Pages interfaces make it possible to query for Post Objects of any type and have predictable results See below for examples of such queries Breaking Changes updated formatting of URI resolvers across types to be consistent May be a breaking change depending on your current use of uri fields when querying nodes placed many fields of PostObject mutations behind conditionals to only allow inputs on Post Types that support said fields For example a Post Type that doesnt support author wont have an author input on its mutation anymore Or a nonhierarchical Post Type doesnt have a parent input field by default in its mutation anymore Might be a breaking change depending on your use of mutations and fields that a Post Type doesnt support fixed a bug with settings with dashes not properly being mapped to the schema This fix in behavior could cause a breaking change depending on what types of settings you had registered and were querying from the schema Made many fields of Post Object types Post Page etc part of Interfaces instead of the PostObject type itself and the Types now implement the interfaces if the Post Type supports said feature This might cause breaking changes if you were querying for fields on a Post Object Type that the Post Type doesnt actually support For example if you registered a post type without support for author you could have queried for the author on that node and got null Now the author field will not exist on that Type and your query would not work remove get methods from WPObjectType WPUnionType etc in favor of making the typeregistry a public property kidunot this will affect WPGraphQL for WooCommerce Deprecate Typesphp static methods changed parent field to revisionOf field for Types that support revisions If the node is a revision the revisionOf field will return the node that it is a revision of This is applied only to post types that support revisions via the NodeWithRevisions Interface added abstract public function isvalidoffset offset to AbstractConnectionResolver If you extend the AbstractConnectionResolver in your code you will need to have your extending class implement this method It is used for pagination to respect the Relay spec New Features add support for the post format taxonomy thanks aberkow update testing matrix for Travis CI to cover PHP misc updates to documentation Thanks aberkow jacobarriola craigfay better support for respecting the Relay spec for pagination Thanks let RootQuerycontentNodes connection added allowing for lists of Posts of any Post Type to be queried from a single Root entry point All Post Object Types Post Page etc implement the ContentNode interface Most fields defined in PostObjectsphp have been moved into interfaces to be defined Add new RootQueryterms connection to query terms of any Taxonomy type from the root of the graph Add new NodeResolver class that resolves any node Post Term User from a URI This allows for users to pass a URI path of the resource to fetch nodes by Update UserMutationphp to use string definition of types instead of the Types static definitions added pageTemplate field to the Post model layer added uri field to the User model Added the following Interfaces ContentNode ContentTemplate HierarchicalContentNode NodeWithAuthor NodeWithComments NodeWithContentEditor NodeWithExcerpt NodeWithFeaturedImage NodeWithRevisions NodeWithTitle NodeWithTrackbacks TermNode UniformResourceIdentifiable Added the following Enums ContentNodeIdTypeEnum TermNodeIdTypeEnum UserNodeIdTypeEnum added ContentTemplateUnion allowing for templates to be queried for on Post objects added description to various fields missing descriptions deprecated the postTypeby fields They will still work but they wont show in Schema docs and may be removed from the codebase in the future This means that you can no longer query like so postBy slug slug postFields but are encouraged to query by the single entry point with the newly added idType input instead like so post id slug idType SLUG postFields added RootQuerycontentNode field for querying an individual content node from the root of the graph added RootQuerynodeByUri field for querying any node by its resource path added RootQuerytermNode field for querying any type of term node from the root of the graph updated single resource entry points by adding idType inputs Now single resources can be queried for using various types of unique identifiers such as database id slug name uri The type of ID available depends on the type of node Bugfixes Fixed a bug causing use of the graphql function in PHP to break the admin bar throw an exception if WPGraphQL is being used on a server with a PHP version below what WPGraphQL supports Issues Closed Examples of new functionality Posts Were deprecating the postTypeBy entry points and have added a new idType field and enum for single entry points This means queries such as the following will still work but will not show in the Schema documentation and may be formally removed from the codebase at a later date Deprecated Queries postBy slug someslug id title pageBy uri someuri id title These are deprecated in favor of existing single entry points for each post type and the newly added idType field on those entry points New Singular Post Object Queries With the added idType field on the singular post object entry points below is a series of example queries now made possible Query Single Post By Database ID postid idType DATABASEID id title uri slug postId Screen Shot at PM Query Single Post by URI postid test idType URI id title uri slug postId Screen Shot at PM Query Single Post by Global Hashed ID postid cG zdDoxNzM idType ID id title uri slug postId Screen Shot at PM or without specifying idType as the default is the hashed ID postid cG zdDoxNzM id title uri slug Screen Shot at PM Query Post nonhierarchical post type by Slug postid test idType SLUG id title uri slug Screen Shot at PM ContentNodeInterface This release also introduces the ContentNode Interface that is implemented by all Post Object types posts pages custom post types This Interface allows for new types of queries to be executed that span many post types Content Nodes Connection Heres an example of a new query contentNodes nodes typename id title link uri isRevision on Page isFrontPage Screen Shot at PM In the results above we can see that a mix of Posts and Pages have been returned We can also pass arguments to do things like search across multiple post types contentNodeswhere search test nodes typename id title link uri isRevision on Page isFrontPage Screen Shot at PM ContentNode single entry point We can now also fetch single Content post nodes like so contentNodeid cG zdDoxNzM typename id title link uri isRevision on Page isFrontPage Screen Shot at PM But we can fetch single nodes of any Post type by other unique identifiers as well such as the URI contentNodeid test idType URI typename id title link uri isRevision on Page isFrontPage Screen Shot at PM or contentNodeid test idType URI typename id title link uri isRevision on Page isFrontPage Screen Shot at PM This is a SUPER powerful feature as it allows for fragments to be more easily shared and reused across queries and components Terms Prior to this release there wasnt really great ways of fetching singular term objects You could do a query for a connection of terms and limit it to the first and in some cases that worked fine but it wasnt always ideal This release adds better support for fetching individual Term Nodes Example Term Node Queries Instead of only fetching by the hashed global ID we can now fetch by other unique identifiers using the idType field Query Tag by Hashed Global ID tagid cG zdF YWc Mw id name slug tagId Screen Shot at PM Query Tag by Database ID tagid idType DATABASEID id name slug tagId Screen Shot at PM Query Tag by Name tagid Another Test idType NAME id name slug tagId Screen Shot at PM Query Tag by Slug tagid anothertest idType SLUG id name slug tagId Screen Shot at PM Query Tag by URI tagid taganothertest idType URI id name slug tagId uri Screen Shot at PM TermNode Interface This release also introduces the TermNode interface which allows for querying terms across Taxonomy types For example Query TermNodes Connection terms nodes id typename name uri Screen Shot at PM This enables us to do things like search terms across multiple taxonomies and get both Categories and Tags and custom taxonomies back in the same query termswhere search test nodes id typename name uri on Tag tagId on Category categoryId Screen Shot at PM Query Single Terms by Unique Identifiers We can also query single term nodes by various identifiers such as Database ID ID Name Slug or URI Query Single Term Node by hashed ID termNodeid cG zdF YWc Mw typename id name link slug uri Screen Shot at PM Query Single Term Node by Database ID termNodeid idType DATABASEID typename id name link slug uri databaseId img width altScreen Shot at PM src Query Single Term Node by Name termNodeid Another Test idType NAME taxonomy TAG typename id name link slug uri databaseId img width altScreen Shot at PM src Query Single Term Node by Slug termNodeid anothertest idType SLUG taxonomy TAG typename id name link slug uri databaseId img width altScreen Shot at PM src Query Single Term Node by URI termNodeid taganothertest idType URI typename id name link slug uri databaseId img width altScreen Shot at PM src Node By URI Another thing this release provides is a way to get any node by URI across types This comes in handy because in many cases when a URI is provided the type of content it is isnt always known ahead of time By having an entry point for all Types that implement the UniformResourceIdentifiable Interface we can create a main entry point for entire applications Below is an example This is showing many queries at once but this could easily be one query with fragments for each Type controlled by their appropriate component for rendering said type of content page nodeByUriuri about URI post nodeByUriuri test URI tag nodeByUriuri tag bit URI category nodeByUriuri categoryalignment URI user nodeByUriuri authorjasonbahl URI fragment URI on UniformResourceIdentifiable typename on Page pageId on Post postId on Category categoryId on Tag tagId on User userId img width altScreen Shot at PM src query revisions nodes on Post categorieswhere shouldOutputInFlatList true nodes id The response data revisions nodes categories nodes This query will not return categories as Wordpress Core does not support revisions for categories I think we should still return the parent posts categories rather return an empty array of categories Seems like this should be an easy change in the TermObjectConnectionResolver if we replace the source ID with the parent ID for revision post types When reporting a bug please be sure to include the following x A descriptive title x An isolated way to reproduce the behavior example GitHub repository with code isolated to the issue that anyone can clone to observe the problem x What version of WPGraphQL youre using and the platforms youre running it on WPGraphQL OSX Mojave x What other plugins youre using WPGraphQL ACF x The behavior you expect to see and the actual behavior When you open an issue for a feature request please add as much detail as possible x A descriptive title x A description of the problem youre trying to solve including why you think this is a problem x An overview of the suggested solution x If the feature changes current behavior reasons why your solution is better 