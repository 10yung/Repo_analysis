I dont get how is in typescript Can you add concrete examples in typescript for basic I cant use javascript syntax such as var For me await does not work I am calling an api and trying to await for promise resolution The README states nodefibers This implementation of coroutines is unfortunately limited to Nodejs ES generators may be simpler but fibers are more flexible and support a far broader space of design possibilities It would be great if ES generators were this open and flexible and I got intrigued What kind of things can Fibers do that Coroutines cant Thank you Given that this is supposed to be a comparison of code styles its rather important that the examples reflect the idiomaticoptimal style for a given approach This wasnt the case with the original Bluebird example which used virtually no Bluebird utility methods and contained superfluous code In the documentation it says that will include a useable stack trace But it does not for me So I think I am doing it wrongbut I dont know what Im doing wrong To demonstrate I will compare the stacktrace of a vanilla bluebird example with the corresponding stacktrace of the correspoding asyncawait code asyncawait uses bluebird internally so I think its fair First my bluebird code without asyncawait var funcB function return Promiseresolvethenfunction throw new Errorsome err var funcA function return funcB gulptaskaafunctioncb funcAthenfunction cb The stacktrace yields the information funcA funcB exception at first glace Perfect Error Error some err at processImmediate as immediateCallback timersjs From previous event at funcB C projects JSBuildHelper JSBuildHelper tmp tsreq app gulpfilejs at funcA C projects JSBuildHelper JSBuildHelper tmp tsreq app gulpfilejs at Gulpanonymous C projects JSBuildHelper JSBuildHelper tmp tsreq app gulpfilejs at moduleexports C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator lib runTaskjs at GulpOrchestratorrunTask C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at GulpOrchestratorrunStep C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at GulpOrchestratorstart C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at C Users alex AppData Roaming npm nodemodules gulp bin gulpjs at processtickCallback nodejs at FunctionModulerunMain modulejs at startup nodejs at nodejs Now my asyncawait code var funcB asyncfunction throw new Errorsome err var funcA asyncfunction awaitfuncB gulptaskaa functioncb funcAthenfunction cb In the corresponding stacktrace I only see the exception No funcA no funcB For this simple program it is sufficient But I cant use it for other more complex stuff considering how important stacktrances really are Possibly unhandled Error Error some err at catchBlock C projects JSBuildHelper JSBuildHelper nodemodules asyncawait src async fiberManagerjs at runInFiber C projects JSBuildHelper JSBuildHelper nodemodules asyncawait src async fiberManagerjs From previous event at new Promise C projects JSBuildHelper JSBuildHelper nodemodules asyncawait nodemodules bluebird js main promisejs at defer C projects JSBuildHelper JSBuildHelper nodemodules asyncawait src async deferjs at nonIterable C projects JSBuildHelper JSBuildHelper nodemodules asyncawait src async makeAsyncFuncjs at f C projects JSBuildHelper JSBuildHelper nodemodules asyncawait src async makeAsyncFuncjs at Gulpanonymous C projects JSBuildHelper JSBuildHelper tmp tsreq app gulpfilejs at moduleexports C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator lib runTaskjs at GulpOrchestratorrunTask C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at GulpOrchestratorrunStep C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at GulpOrchestratorstart C projects JSBuildHelper JSBuildHelper nodemodules gulp nodemodules orchestrator indexjs at C Users alex AppData Roaming npm nodemodules gulp bin gulpjs at FunctionModulerunMain modulejs at startup nodejs at nodejs Am I doing it wrong or is this really a limitition that I cannot remove 