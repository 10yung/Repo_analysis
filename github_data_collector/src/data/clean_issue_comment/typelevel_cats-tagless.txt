Updates orgtypeleveldisciplinescalatest from RC to RC Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgtypelevel artifactId disciplinescalatest details labels testlibraryupdate semverprerelease Updates orgtypeleveldisciplinescalatest from RC to RC Release NotesChangelog Ill automatically update this PR to resolve conflicts as long as you dont change it yourself If youd like to skip this version you can just close this PR If you have any feedback just mention me in the comments below Have a fantastic day writing Scala details summaryIgnore future updatessummary Add this to your scalastewardconf file to ignore future updates of this dependency updatesignore groupId orgtypelevel artifactId disciplinescalatest details labels testlibraryupdate semverprerelease closes Added instances for ContravariantK Foldable UnorderedFoldable InvariantK Monad Traverse FlatMap Applicative UnorderedTraverse UnorderedFoldable ContravariantMonoidal Apply Alternative ContravariantSemigroupal MonoidK InvariantMonoidal Distributive SemigroupK InvariantSemigroupal Functor Contravariant Semigroupal Invariant FunctorK FunctionK A SemigroupalK Monad Traverse FlatMap Applicative UnorderedTraverse UnorderedFoldable ContravariantMonoidal Apply Alternative MonoidK InvariantMonoidal Distributive InvariantSemigroupal SemigroupK Functor Contravariant Semigroupal Invariant The readme mentions to only use the compiler plugin on how should buildsbt be set up for a project thats crossbuilding and Intellij needs a special plugin to expand macro annotations See I couldnt find enough info about this so we might want to check how simulacrum has implemented it Currently only autoFunctorK and autoInvariantK define fully refined instances in a special fullyRefined object inside the companion object of algebras We have at least three options Generate only fully refined instances No awkward imports everything is in the companion object Its not clear if that would work in all cases needs investigation Add a fullyRefined flag to macro annotations Easy to optin optout for users Easy to distinguish which annotations support fully refined instances More complexity on both implementation and usage sides Automatically decide whether to generate fully refined instances based on the presence of type members Less overhead for algebras without type members Fully automatic no need for special flags No way to optout for users Removing all type members later might cause imports to stop compiling The microsite with tut snippets is great but those are not fullyfledged examples Example scala case class ServerDependencies F foo FooService F bar BarService F other NotTaglessThing Id expect it to generate something like scala def mapK G f F G ServerDependencies G ServerDependenciesfoomapKf barmapKf other 