Since Ruby Bignum and Fixnum have been unified into Integer see Ruby release The use of Fixum generates a warning activerecordconnectionadaptersemmysql adapterrb warning constant Fixnum is deprecated Are there plans to update this I am using the following require emsynchrony require emsynchronymysql require emsynchronyactiverecord I have three activerelation objects in an array EMsynchrony do statuses Userveryfrequent Userfrequent Userinfrequent I then want to iterate through the collections and perform an imap call asynchronously using FiberIterator EMSynchronyFiberIteratornewstatusessize poolsizeeach do i status statuses i statuseach do user imap stuff goes here end end end On the examples on the wiki and on the tests I saw you use other asynchronous IO such as TCP and HTTP But is there an option for imap packed in this gem or another gem Example failing spec rb it permits normal handling of errors do caught nil EMsynchrony do begin EMSynchronyFiberIteratornew each do num raise num here end rescue e caught emessage end EMstop end expectcaughtto eq here end The rescue block is never entered and the only way to catch the exception is with EMerrorhandler or catching it outside of the EM loop Neither approach is composable igrigorik Any ideas for an easy fix I was wondering if there are plans to support Rethinkdb Thanks for the good job For both emsynchrony and I get the same undefined local variable or method currentconnectionid error with activerecord beta Userszdennisrbenvversions librubygems gemsemsynchrony libemsynchronyactiverecordrb in block in connection undefined local variable or method currentconnectionid for ActiveRecordConnectionAdaptersConnectionPool x f d a NameError from Userszdennisrbenvversions librubygems gemsemsynchrony libemsynchronythreadrb in synchronize from Userszdennisrbenvversions librubygems gemsemsynchrony libemsynchronyactiverecordrb in connection from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordconnectionadaptersabstractconnectionpoolrb in retrieveconnection from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordconnectionhandlingrb in retrieveconnection from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordconnectionhandlingrb in connection from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordmigrationrb in connection from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordmigrationrb in block in methodmissing from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordmigrationrb in block in saywithtime from Userszdennisrbenvversions libruby benchmarkrb in measure from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordmigrationrb in saywithtime from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordmigrationrb in methodmissing from Userszdennissourceopensourceprojectsactiverecordimporttestschemagenericschemarb in block in top required from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordschemarb in instanceeval from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordschemarb in define from Userszdennisrbenvversions librubygems gemsactiverecord beta libactiverecordschemarb in define from Userszdennissourceopensourceprojectsactiverecordimporttestschemagenericschemarb in top required from Userszdennisrbenvversions librubygems gemsactivesupport beta libactivesupportdependenciesrb in require from Userszdennisrbenvversions librubygems gemsactivesupport beta libactivesupportdependenciesrb in block in require from Userszdennisrbenvversions librubygems gemsactivesupport beta libactivesupportdependenciesrb in loaddependency from Userszdennisrbenvversions librubygems gemsactivesupport beta libactivesupportdependenciesrb in require from Userszdennissourceopensourceprojectsactiverecordimporttesttesthelperrb in top required from Userszdennissourceopensourceprojectsactiverecordimporttestimporttestrb in require from Userszdennissourceopensourceprojectsactiverecordimporttestimporttestrb in top required from Userszdennisrbenvversions librubygems gemsrake librakeraketestloaderrb in require from Userszdennisrbenvversions librubygems gemsrake librakeraketestloaderrb in block in main from Userszdennisrbenvversions librubygems gemsrake librakeraketestloaderrb in select from Userszdennisrbenvversions librubygems gemsrake librakeraketestloaderrb in main rake aborted I pulled down emsynchrony to add a patch but after bundling and trying to run the test suite ruby segfaulted mysql does that by default since Rails Hello I took and added support for ActiveRecord All ActiveRecord specs are green for stable versions of and Also I reimplemented clearstalecachedconnections for that could help but not so much ActiveRecord users should explicitly release connections or ActiveRecordConnectionAdaptersConnectionManagement middleware could do this and there is nothing to do with it By the way they should do it in threaded environment too Anyway is not working and I cannot figure out why So my opinion we should drop support in favor of better implementation for Currently tests may fail because of broken mysql See with specs or with any of these patches everything works great Its years old now back when mongoid required the official mongo driver now the use moped Any plan on implementing this I know theres emsynchronymoped but its a bit outdated as well Cheers This implementation supports concurrent running transactions We tested it with activerecord but did not test with We are using it in production and it is working well ActiveRecord have already had good connection pooling that uses Threadcurrent for threadaware and fiberaware storage We replaced original MonitorMixin by fiberaware one and thats all Hi all I cant require emsynchronyamqp It complains emsynchronyamqprb in moduleAMQP undefined method client for AMQPModule NoMethodError I have amqp v installed 