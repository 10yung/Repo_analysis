The build is failing due to a problem on streebogrs but I havent changed that This is not optimal yet when processing multiple blocks but it does give a considerable speedup over the non intrinsic version already Measurements were taken on an AMD Ryzen X Core Baseline test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs With asmhashes test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs With Intrinsics test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs test bench bench nsiter MBs This is a very large change which I havent discussed with anyone yet so Im not sure its the right choice for the project But hopefully this is a good starting point for discussion This is mostly a large performance improvement The BLAKE b bench case is improved by about This implementation also detects SIMD support at runtime so the feature flags related to SIMD support are removed The only performance loss is in the bench cases where the caller repeatedly feeds input slices less than one block long The BLAKE s bench case is almost slower Im not sure exactly why but this implementation optimizes for avoiding copies on long runs of input so it might just be that its doing more math up front This performance issue disappears if the inputs are a full block or longer The only API consequence of this change is that the undocumented withparameterblock constructor is no longer supported Callers who need other parameters might prefer to use the blake bsimdblake ssimd APIs directly which expose them in a safer way through a Params object I have a question about the hash memory management but also for other related repositories As it seems RustCrypto use GenericArray andor raw arrays for sensitive data like keys and internal buffers but the memory is not overwrittenzeroed on reset or when the bufferstruct is dropped for most crates right Are there any plans to change this Rust does not yet implement named return value optimisation so fixedresult forces a copy How would you feel about adding a rust fn fixedresultintomut self out mut GenericArrayu SelfOutputSize function to the FixedOutput trait so that the copy can be avoided Im happy to create a PR Background Im implementing the hashbased signature XMSSMT in rust where lots of hashes are computed on on very short inputs These copies have a significant overhead Signedoffby Igor Gnatenko ignatenkobraingmailcom Its maybe worth adding support for blake x eventually Ive no idea if anyone actually uses blake x for anything or how its performance compares with the shake XOFs or blake sb chacha I know ring has its Context trait but digestDigest seems be better to integrate other digest implementation such as openssldigest later Closes 