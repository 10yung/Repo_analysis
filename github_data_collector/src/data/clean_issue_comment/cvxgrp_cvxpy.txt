The main motivation for this PR is to resolve The basics of that change can be confined to cvxpyexpressionsexpressionpyExpression However once the deprecation warning was introduced I thought it best to bring the rest of cvxpy code into compliance the the warnings recommendation There were two ways to do this find offending instances of a b and replace them with matmula b or find offending instances of a b and replace them with a b I opted for the second of these The most important thing to note about this decision is that it means cvxpy cant support python At first I thought that was a big jump we had previously only discussed dropping python but the more I thought about it it seemed like a better idea Here are some key reasons that come to mind The Python Foundation dropped support for python in March of last year Note this happened months before the Python Foundation dropped support for python We dont run continuous integration tests with python so we havent been testing against it for a long time I dont think weve ever built a python wheel or a conda distribution for cvxpy x The only way python users get a hold of cvxpy x is by installing from a source distribution Several unittests already used the operator So we were already on a course to effectively drop support for python This just makes it explicit Perhaps most importantly I think it would be best to mark a big change like this as we shift from cvxpy to cvxpy To help with this Ive done a pretty thorough job of changing not only cvxpy code but also key documentation and build files Merging this PR perhaps with minor modifications would go a long way in setting us up for a clean release of version Our goal is to minimize the function should be Our goal is to maximize the function The XPRESS interface has been minimally maintained since migrating to cvxpy I dont think anyone has tested changes from cvxpys upgrade Per a comment on a community license suitable for running unittests with cvxpy can be installed with pip install xpress I installed XPRESS in this way and ran the full suite of unittests Upon doing this all tests fail The initial cause of this failure is that the function XPRESSapply in xpressconifpy doesnt return anything A correct implementation of XPRESSapply would return the tuple data invdata already defined in that function Pinging merraksh since you mentioned volunteering to get this working again SteveDiamond recently informed me that a trial version of CPLEX is available from pip I ran the current suite of tests against that version of CPLEX and some of the dual variable tests failed Most of the failures were fixed by changing precision of the tests however one test failed by a huge margin Specifically StandardTestSOCPstestsocp solverCPLEX places fails follow this link for the problem definition The cause of the failure is that the dual variable to the final constraint y is reported as zero when it should be about I checked to see if the test was overrestrictive ie maybe some dualoptimal solution has zero dual variable to y but this is not the case The current CPLEX solution fails a stationary Lagrangian check and so it is not dualfeasible The standard portfolio optimization with data from factor model example fails because the OSQP solver reaches the maximum number of iterations The error message also suggests solve with verboseTrue for more information even though the call to probsolve is setting verbose to True The colab notebook can be used to reproduce the error Output OSQP v Operator Splitting QP Solver c Bartolomeo Stellato Goran Banjac University of Oxford Stanford University problem variables n constraints m nnzP nnzA settings linear system solver qdldl epsabs e epsrel e epspriminf e epsdualinf e rho e adaptive sigma e alpha maxiter checktermination on interval scaling on scaledtermination off warm start on polish on timelimit off iter objective pri res dua res rho time e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s status maximum iterations reached number of iterations run time e s optimal rho estimate e SolverError Traceback most recent call last ipythoninput e c de in module Uncomment to solve the problem WARNING this will take many minutes to run probsolveverboseTrue frames usrlocallibpython distpackagescvxpyproblemsproblempy in solveself args kwargs else solvefunc Problemsolve return solvefuncself args kwargs classmethod usrlocallibpython distpackagescvxpyproblemsproblempy in solveself solver warmstart verbose parallel gp qcp kwargs fullchain selfsolvingchainprependselfintermediatechain inversedata selfintermediateinversedata solvinginversedata selfunpackresultssolution fullchain inversedata return selfvalue usrlocallibpython distpackagescvxpyproblemsproblempy in unpackresultsself solution chain inversedata raise errorSolverError Solver s failed chainsolvername Try another solver or solve with verboseTrue for more information selfunpacksolution SolverError Solver OSQP failed Try another solver or solve with verboseTrue for more information This is a tracking issue for making stable Well have at least one more prerelease a before we get there Below is an incomplete outline of the release notes we might publish alongside the stable release New features Disciplined parametrized programming for cone programs Differentiation through cone programs specifically those solved by SCS Enhancements Allow use of the Python builtin sum function in DGP Allow use of cpmax cpmin in DQCP in addition to cpmaximum cpminimum New atoms support function Bug fixes Dual variable recovery Detection of monotone functions for DQCP Breaking changes Incompatible with Python Removed solvers SuperSCS Known issues Problems with many parameters can take a long time to compile It is difficult to tell whether its CyLP issue or cvxpy issue but im using CyLP with cvxpy I got these verbose output I tried the pypi version of cylp as well latest compiled trunk version as of Nov Welcome to the CBC MILP Solver Version Trunk unstable Build Date Mar Revision Number command line ICbcModel solve quit default strategy Continuous objective value is seconds Cgl I fixed tightened bounds strengthened rows substitutions Cgl I fixed tightened bounds strengthened rows substitutions Cgl I processed model has rows columns integer of which binary and elements Cbc I added rows had average density of Cbc I At root node cuts changed objective from to in passes Cbc I Cut generator Probing row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator Gomory row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator Knapsack row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator Clique row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator MixedIntegerRounding row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator FlowCover row cuts average elements column cuts active in seconds new frequency is Cbc I Cut generator TwoMirCuts row cuts average elements column cuts active in seconds new frequency is Cbc I After nodes on tree e best solution best possible seconds Cbc I Search completed best objective e took iterations and nodes seconds Cbc I Strong branching done times iterations fathomed nodes and fixed variables Cbc I Maximum depth variables fixed on reduced cost Cuts at root node changed objective from to Probing was tried times and created cuts of which were active after adding rounds of cuts seconds Gomory was tried times and created cuts of which were active after adding rounds of cuts seconds Knapsack was tried times and created cuts of which were active after adding rounds of cuts seconds Clique was tried times and created cuts of which were active after adding rounds of cuts seconds MixedIntegerRounding was tried times and created cuts of which were active after adding rounds of cuts seconds FlowCover was tried times and created cuts of which were active after adding rounds of cuts seconds TwoMirCuts was tried times and created cuts of which were active after adding rounds of cuts seconds ZeroHalf was tried times and created cuts of which were active after adding rounds of cuts seconds Result Problem proven infeasible No feasible solution found Enumerated nodes Total iterations However cvxpys problem object didnt capture this infeasible probstatus is still optimal prob cvxProblemobjfuncm conslist probsolveverboseTrue solvercvxCBC maximumSeconds I post this issue here to see if someone happen to understand this Result Problem proven infeasible message and make sure cvxpy correctly captures cylps exit code etc Thank you very much my OS is Win bit Python b cvxpy a cylp b from Pypi Describe the bug The underlying issue is with OSQP rather than cvxpy I will post a report there as well To Reproduce import cvxpy as cp import numpy as np Change to below and all will be well Data is here xy npgenfromtxtqregxytxt delimiter range x xy range y xy beta cpVariable obj cpnormy x beta prob cpProblemcpMinimizeobj prob cpProblemcpMinimizeobj probsolveverbose True Fails with OSQP probsolveverbose True solver cpECOS Works Expected behavior Solution expected Output OSQP v Operator Splitting QP Solver c Bartolomeo Stellato Goran Banjac University of Oxford Stanford University problem variables n constraints m nnzP nnzA settings linear system solver qdldl epsabs e epsrel e epspriminf e epsdualinf e rho e adaptive sigma e alpha maxiter checktermination on interval scaling on scaledtermination off warm start on polish on iter objective pri res dua res rho time e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s e e e e e s status maximum iterations reached number of iterations run time e s optimal rho estimate e SolverError Traceback most recent call last ipythoninput d a b d in module prob cpProblemcpMinimizeobj prob cpProblemcpMinimizeobj probsolveverbose True Fails with OSQP probsolveverbose True solver cpECOS Works anaconda libpython sitepackagescvxpyproblemsproblempy in solveself args kwargs else solvefunc Problemsolve return solvefuncself args kwargs classmethod anaconda libpython sitepackagescvxpyproblemsproblempy in solveself solver warmstart verbose parallel gp qcp kwargs fullchain selfsolvingchainprependselfintermediatechain inversedata selfintermediateinversedata solvinginversedata selfunpackresultssolution fullchain inversedata return selfvalue anaconda libpython sitepackagescvxpyproblemsproblempy in unpackresultsself solution chain inversedata raise errorSolverError Solver s failed chainsolvername Try another solver or solve with verboseTrue for more information selfunpacksolution SolverError Solver OSQP failed Try another solver or solve with verboseTrue for more information If applicable include program output If reporting a program crash please include the entire stack trace Version OS macOS CVXPY Version Additional context None Im calling solprobsolvesolversolververboseTrue and getting cvxpyerrorSolverError Solver CVXOPT failed Try another solver or solve with verboseTrue for more information This is not a very helpful message Github user spenrich reported the following issue in the cvxpylayers repository Its actually an issue with CVXPY so Im copying it here Ive quoted the issue verbatim I have the example code below which just constructs an unconstrained quadratic program that is DPP I time both the CVXPY problem and the CVXPYlayer initializations while manually changing the problem dimensionality n On my dualcore MacBook when I run the code with n it is done quickly about ms With n constructing the CVXPY problem takes less than ms but the CVXPYlayer initialization takes around seconds For n it is even longer although I havent yet let it finish running Any idea why this takes so long I am not sure if this is a bug per se or expected behavior Versions CVXPY a CVXPYlayers macOS Catalina import cvxpy as cvx from cvxpylayerstorch import CvxpyLayer import time n Qsqrt cvxParameter n n x cvxVariablen objective cvxsumsquaresQsqrt x printConstructing CVXPY problem end start timetime prob cvxProblemcvxMinimizeobjective assert probisdcp assert probisdpp end timetime printdone f s end start printConstructing differentiable CVXPY layer end start timetime layer CvxpyLayerprob parameters Qsqrt variables x end timetime printdone f s end start 