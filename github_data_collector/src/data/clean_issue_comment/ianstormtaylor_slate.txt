Im seeing some strange behavior involving selecting multiple lines with the keyboard Once a line is selected the arrow keys do not deselect lines Is this intended behavior Whats the current behavior GIF Kapture at codesandbox repro Steps for repro Hit enter several times gif hits enter about times Type shift up arrow until the entire document is selected While still holding shift press down arrow several times Notice the document is not unselected properly Slate Browser Chrome OS Mac Whats the expected behavior Expected behavior for the above steps is that the document unselects similar to undoing the previous selection This will allow a prop change of the placeholder text to rerender Is this adding or improving a feature or fixing a bug Bug Whats the new behavior The appropriate components check in the memoization comparison if two decorator range list items are placeholders and if they are if their text equals Demo How does this change work By checking if decorator ranges are placeholders and if they are make sure the text value is equal The is performed in the memoization checks Have you checked that x The new code matches the existing patterns and styles x The tests pass with yarn test x The linter passes with yarn lint Fix errors with yarn fix x The relevant examples still work Run examples with yarn start Does this fix any issues or need any specific reviewers Fixes Reviewers This change builds on top of PR I can rebase when it is merged since I copied into the commit That PR allows void nodes to have any kind of element in them and the editor events will not respond to them if the void node renders with contentEditablefalse this will treat all its children as not editable unless specified otherwise therefore events within the void node will be treated like they are outside the editor Currently they cannot have inputs or any other content editable areas or the editor event handlers try to interpret them as part of the main editor document when if they are in void nodes with contentEditable turned off they should be treated as isolated islands This behavior could be achieved with the pre x versions therefore some of our projects will have regressions That PR will fix and This PR fixes a bug specific to Firefox where input events within a void nodes prevent inputs from working I included an example of having these isolated void nodes in case its of value for future testing and and to serve as an example Is this adding or improving a feature or fixing a bug Bug Whats the new behavior See the example A void node can be made to be completely isolated How does this change work The previous PR would stop all events on the editor from responding to non editable targets This CR will stop the Firefox specific onBeforeInput event from firing in the same case Have you checked that x The new code matches the existing patterns and styles x The tests pass with yarn test x The linter passes with yarn lint Fix errors with yarn fix x The relevant examples still work Run examples with yarn start Does this fix any issues or need any specific reviewers Fixes the other PR listed above fixes it mostly this makes it work in Firefox to resolve the same issues Reviewers ianstormtaylor Do you want to request a feature or report a bug Feature maybe a bug Currently there is no way to insertBreak after void element The enter key press does nothing and editorinsertBreak method is not called In my attempt to find a workaround for this problem I encountered the following behaviour If void element is selected and enter key is pressed my code manually inserts new empty nonvoid element after the void element and selects it Now that nonvoid element is selected slate editor starts capturing enter key presses again including the one that was just manually intercepted Slate calls insertBreak and the result is new empty nonvoid elements after the void element instead of If you have a question ask it in our Slack channel instead Whats the current behavior Whenever highlighting multiple lines containing listitems and then deleting those the fragment is deleted editordeleteFragment is triggered However there is a single remaining empty listitem with no parent ul or ol element codesandbox repro GIF Repro Kapture at Notice how after deleting the remaining bullet is no longer indented indicating there is no wrapper list element For bugs you must include the following A GIF showing the issue in action A sandbox that minimally reproduces the issue Information about your OS browser Slate version etc If you dont include these theres a very good chance your issue will be closed because its much too hard to figure out exactly what is going wrong and it makes maintenance much harder We need to keep the issues actionable or else maintaining Slate becomes overwhelming Thank you for understanding Slate Browser Chrome OS Mac Whats the expected behavior Expectation is the entire list would be deleted including all listitems wrapper ulol element and no orphaned listitem remains click buttonexecution method onclick main content EditoraddMarkeditortypeboldconsolelogeditor result editorselection is null and editor marks is null and the text entered is not bold when I put the above same code in the onKeyDown method on Editable result editorselection is not null and editormarks is not null and the text entered is bold Why marks becomes null when Editable is focused Reporting a bug Whats the current behavior On the placeholder decorator is not rerendered when the number of children change but the Editorstring stays the same Screen Recording at AM Slate Browser Chrome OS Mac Whats the expected behavior When addingremoving a node the editor should recalculate if the placeholder needs to be visible or not The Getting Started and Walkthroughs links both currently lead to a page The modification in this change should fix them to link to the correct location Is this adding or improving a feature or fixing a bug Fixing a documentation bug Whats the new behavior The Getting Started and Walkthroughs links on the Readme page should now correctly link to the walkthroughs How does this change work Removed the part at the end of the URLs that probably worked at one point but does not because the URL formats have apparently changed Linking to walkthroughs seems to autoredirect to the first walkthrough Have you checked that NA The new code matches the existing patterns and styles NA The tests pass with yarn test NA The linter passes with yarn lint Fix errors with yarn fix NA The relevant examples still work Run examples with yarn start Does this fix any issues or need any specific reviewers Fixes Reviewers Do you want to request a feature or report a bug A bug Whats the current behavior Performance while editing documents with paragraphs that have lots of inline elements becomes really bad really quickly Sandbox used also in the following gifs codesandboxio here just try to type a sentence This following gif shows how slow copy pasting junks of such a document can be slowsingleparagraphlotsofinline Even worse though is typing and deleting single letters via backspace which can take really long The following gif is not ideal as you cant see my key strokes but you should get an idea slowsingleparagraphlotsofinlinetestwriting From what I understand this is due to current normalization performance but I could be wrong Workarounds would also appreciated if anything is known OS Versions etc I am using latest Slate as can be seen in the sandbox and Chromium on recent Manjaro Linux on a highend mobile workstation laptop I saw the same issue on other systems like a Mac as well Whats the expected behavior Interacting with such a document should still be responsive and offer a good user experience Do you want to request a feature or report a bug A bug If you have a question ask it in our Slack channel instead Whats the current behavior If an inline element has padding on the left side the cursor for text selection in front of the node will appear after the padding instead of before the padding inline with padding Here is a sandbox reproduction For bugs you must include the following A GIF showing the issue in action A sandbox that minimally reproduces the issue Information about your OS browser Slate version etc If you dont include these theres a very good chance your issue will be closed because its much too hard to figure out exactly what is going wrong and it makes maintenance much harder We need to keep the issues actionable or else maintaining Slate becomes overwhelming Thank you for understanding Slate Browser Chrome OS Mac Whats the expected behavior The expected behavior is that when text is being inserted as a neighbor to an inline node the cursor will appear outside of the inline node The fastest and most appreciated way to have your issue fixed is to create a pull request with working tested code and we will help get it merged Dont be scared to open a pull request that isnt completed and ask for input Were happy to give direction Also researching how other editors handle this issue is super helpful Slate is solving a pretty complex problem and we cant do it without active contributors so thank you so much for your help 