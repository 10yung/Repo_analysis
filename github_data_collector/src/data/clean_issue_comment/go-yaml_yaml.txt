My main goal is to allow a field of type string to specify that the outer array is normal and the inner array is flow With this FlowMarshaler it will become possible to accomplish that as shown in the test case This is mainly a request and discussion proposal It has been around a year now since v is out Is v not enough stable to mark it as default branch rather than v I just realized this small typo while I was skimming through the documentation I couldve opened an issue but thought itd be a hassle Such struct type Tmp struct nodes Node yamlnodesflow will create such yaml file nodes type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb Is there any way to create yaml file like this nodes type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb type ss cipher aes cfb package main import fmt ioioutil log gopkginyamlv Nginx nginx type Nginx struct Port int yamlPort LogPath string yamlLogPath Path string yamlPath Config type Config struct Name string yamlSiteName Addr string yamlSiteAddr HTTPS bool yamlHttps SiteNginx Nginx yamlNginx func main var setting Config config err ioutilReadFiletestyaml if err nil fmtPrinterr yamlUnmarshalconfig setting data err yamlMarshal setting if err nil logFatalferror v err fmtPrintf m dump ns n n stringdata ioutilWriteFileoutyaml data Raw data SiteName seeta SiteAddr BeiJing Https true Nginx Port LogPath varlognginxnginxlog Path optnginx Output after execution SiteName seeta SiteAddr BeiJing Https true Nginx Port LogPath varlognginxnginxlog Path optnginx the right arrow becomes vertical region regioncomponent region In some scenarios you cannot manually add the yaml tag such as grpcs automatic code generation Such as go Code generated by protocgengo DO NOT EDIT type Metadata struct Name string protobufbytes optnamenameproto jsonnameomitempty work flow yamlgo struct grpc server I have drafted injection of struct info options to make them configurable Are you okay with this approach I have tested marshalingunmarshaling as follows go func MustParseConfigs string Config var cfg Config err yamlUnmarshal bytes cfg if err nil panicfmtErrorfinvalid config w err return cfg func c Config String string b yamlMarshalc yamlWithFieldNameMarshalerFieldNameMarshaler return stringb func FieldNameMarshalerf reflectStructField string return fName golang package main import fmt gopkginyamlv type Yerson struct Provider struct RootURL string yamlrootURL yamlprovider func main var p Yerson err yamlUnmarshal byte r nprovider r n rootURL abc r n p if err nil fmtPrintferr v n err return fmtPrintfv n p The above works correctly but changing v to v causes it to fail with err yaml line mapping values are not allowed in this context This seems to violate YAML section Yaml that contains a merge key that is Unmarshaled into a Node and then Marshaled again has merge where is expected Example func main yamlNode yamlNode contents a err yamlUnmarshal bytecontents yamlNode if err nil panicerr out err yamlMarshalyamlNode if err nil panicerr logPrintfexpected v stringcontents logPrintfactual v stringout Outputs expected a actual merge a Hi there I was just testing the indentation for a custom encoder and I saw different results for lists This is an example test golang import bytes fmt testing gopkginyamlv type Element struct One string yamlone Two string yamltwo type Elements struct S Element yamlelements type Root struct Elements Elements yamlroot func TestSliceIndentt testingT root RootElements Elementone two out err encoderoot if err nil tErrorerr fmtPrintfEncode spaces ns n stringout out err encoderoot if err nil tErrorerr fmtPrintfEncode spaces ns n stringout out err encoderoot if err nil tErrorerr fmtPrintfEncode spaces ns n stringout func encoder Root spaces int byte error var b bytesBuffer e yamlNewEncoder b eSetIndentspaces if err eEncode r err nil return nil err return bBytes nil text Encode spaces root elements one one two two Encode spaces root elements one one two two Encode spaces root elements one one two two All the results are valid yaml but I think the lists should have the format like the spaces result Also the spaces indentation seems strange although I dont know if anyone is using an odd number for indention 