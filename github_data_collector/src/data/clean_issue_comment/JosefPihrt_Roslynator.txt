The latest update with the auto update for the omnisharpjson file breaks the project initialization if the project also includes custom paths for other analyzers It ends up duplicating the json block containing the paths It looks like this RoslynExtensionsOptions enableAnalyzersSupport true locationPaths Usersjdentoncustomanalyzerpath Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslyncommon Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynanalyzers Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynrefactorings Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynfixes EnableAnalyzersSupport true LocationPaths Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslyncommon Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynanalyzers Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynrefactorings Usersjdentonvscodeextensionsjosefpihrtvscoderoslynator roslynfixes Try Orang crossplatform commandline tool from the author of Roslynator Search replace rename and delete directories files and its content using the power of NET regular expressions I met with similar situation like summary on the main part of the class remarks on any additional partials that require separate documentation RCS displayed on the partial class file where only the remarks was there Product and Version Used RoslynatorAnalyzers Steps to Reproduce Create a switch expression Example chsarp public static RGBColor FromRainbowRainbow colorBand colorBand switch RainbowRed new RGBColor xFF x x RainbowOrange new RGBColor xFF x F x RainbowYellow new RGBColor xFF xFF x RainbowGreen new RGBColor x xFF x RainbowBlue new RGBColor x x xFF RainbowIndigo new RGBColor x B x x RainbowViolet new RGBColor x x xD throw new ArgumentExceptionmessage invalid enum value paramName nameofcolorBand Actual Behavior chsarp public static RGBColor FromRainbowRainbow colorBand colorBand switch RainbowRed new RGBColor xFF x x RainbowOrange new RGBColor xFF x F x RainbowYellow new RGBColor xFF xFF x RainbowGreen new RGBColor x xFF x RainbowBlue new RGBColor x x xFF RainbowIndigo new RGBColor x B x x RainbowViolet new RGBColor x x xD throw new ArgumentExceptionmessage invalid enum value paramName nameofcolorBand The case match expression shown with shows a RCS warning It seems to be a false positive due to the new switch expressions in C Expected Behavior No warnings In crossplatform development and probably at all you should not use a hardcoded path For example csharp var path paTh To subfOlder Will not behave as expected on Linux Each path must be by using PathCombine and with awareness about the case In addition identify a line in the text csharp var secondLine textsplit r n Will not run as expected on Linux and will need to use csharp var secondLine textsplitEnvironmentNewLine Is there such an analyzer Is it possible to develop Im new in the Analyzers but know AST and so on so with some general intent or design I believe I can develop myself To complement CS that detects async calls not awaited it could be nice to have an analyzer to detect implicit conversions from async delegates to sync ones csharp async Task FooAsyncTFuncT func await TaskDelay func the async delegate is not awaited Task BarAsyncFuncTask func return FooAsyncfunc implicit conversion to FuncT Its not always easily detectable using Intellisense Product and Version Used Steps to Reproduce get refactorings for a false b Actual Behavior no simplification Expected Behavior simplification a b What is benefice between RoslynatorAnalyzers and Its recommended work with both together Product and Version Used VS Preview Steps to Reproduce Create an csprojClassLibrary in VS and modify to multi targetFrameworks xml Project SdkMicrosoftNETSdk PropertyGroup TargetFrameworksnetstandard net TargetFrameworks PropertyGroup Project Create Class cs at ClassLibrary NewFolderClass cs Add another class Class in the file cs namespace ClassLibrary NewFolder public class Class public class Class Call quick action at Class and choose Extract Class to a new file Actual Behavior Class cs should be created at ClassLibrary NewFolderClass cs Expected Behavior Class cs be created at ClassLibrary ClassLibrary netstandard NewFolderClass cs Calls to ValueTupleCreate can be simplified to just parens Example mBaseTryGetValueValueTupleCreatekey key out value return mBaseRemoveValueTupleCreatekey key Simplified version mBaseTryGetValuekey key out value return mBaseRemovekey key 