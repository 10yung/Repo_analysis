 Meteormethods sampleMethod return test I want to be able to have sampleMethod show up either in the methods list or be able to make it show up in the file under files list Have tried adding tags but it doesnt seem to detect it within the object list Im getting this fun stacktrace when I run codo on travis but the same config works fine on my machine so I presume theres an environmentrelated issue here but I cant guess what it might be any ideas bash codo name imjs Cannot generate documentation Callback must be a function TypeError ERRINVALIDCALLBACK Callback must be a function at maybeCallback fsjs at exists fsjs at moduleexportsCododetectName hometravisbuildyochannahimjsnodemodulescodosrccodocoffee at hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at replenish hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at eachOfLimit hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at eachOf hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at parallel hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at ObjectparallelLimit as parallel hometravisbuildyochannahimjsnodemodulesasyncdistasyncjs at FunctionmoduleexportsCodorun hometravisbuildyochannahimjsnodemodulescodosrccodocoffee at Objectanonymous hometravisbuildyochannahimjsnodemodulescodobincodo at Objectanonymous hometravisbuildyochannahimjsnodemodulescodobincodo at Modulecompile internalmodulescjsloaderjs at Objectexportsrun hometravisbuildyochannahimjsnodemodulescoffeescriptlibcoffeescriptcoffeescriptjs at compileScript hometravisbuildyochannahimjsnodemodulescoffeescriptlibcoffeescriptcommandjs at compilePath hometravisbuildyochannahimjsnodemodulescoffeescriptlibcoffeescriptcommandjs at Objectexportsrun hometravisbuildyochannahimjsnodemodulescoffeescriptlibcoffeescriptcommandjs at Objectanonymous hometravisbuildyochannahimjsnodemodulescoffeescriptbincoffee at Modulecompile internalmodulescjsloaderjs at ObjectModuleextensionsjs internalmodulescjsloaderjs at Moduleload internalmodulescjsloaderjs at tryModuleLoad internalmodulescjsloaderjs at FunctionModuleload internalmodulescjsloaderjs at FunctionModulerunMain internalmodulescjsloaderjs at startup internalbootstrapnodejs at bootstrapNodeJSCore internalbootstrapnodejs The command codo name imjs exited with Link to build results Link to repo codoopts file It looks like you updated the winston version in packagejson but you never tagged a new release could you bump to The older version of winston requires an outdated version of hawk which isnt marked as compatible with modern node engines It causes errors if youre trying to use yarn instead of npm eg you have to pass in ignoreengines It cant find files in parseProject because the path is not used As a workaround I call processchdir path before calling codoCLIgenerate path I had to dig in the source to figure out how to pass arguments that are not options An example from my code coffeescript Loads objects that are visible from any point of view returns a promise option options fetchtextures boolean Whether to fetch textures when theyre not loaded already option options texturesizeratio number Quality of textures specified in ratio of number of pixels option options maxmeshlod number Quality of meshes specified in LoD polycount ratio return Promise loadvisibleobjects options visibleobjects for ob in children when obvisible then ob return fetchobjectsvisibleobjects optionsthenthis Option lines are way too long trip the linter and more importantly theyre difficult to read since the rest of the code now fit in columns I picked a random example with relatively short descriptions there are instances where I need to explain much more In those cases I explain in the function body and then in the parameteroption I say see above or something which is ugly Examples of what Id like codo to support coffeescript option options texturesizeratio number Quality of textures specified in ratio of number of pixels coffeescript option options texturesizeratio number Quality of textures specified in ratio of number of pixels I ran into a bug when trying to run codo with the debug flag it seems the logging library used is not required in at least one file namely here I got this error message by trying parsing my code I have got no idea why it doesnt work not anymore I know its a really bad error description Sorry about that nodemodulescodolibentitiesclasscoffee for i len reflength i len i TypeError Cannot read property length of undefined at ClassmoduleexportsEntitiesClassClasslinkifyValue usrlocallibnodemodulescodolibentitiesclasscoffee at ClassmoduleexportsEntitiesClassClasslinkify usrlocallibnodemodulescodolibentitiesclasscoffee at EnvironmentmoduleexportsEnvironmentlinkify usrlocallibnodemodulescodolibenvironmentcoffee at ObjectmoduleexportsCodoparseProject usrlocallibnodemodulescodolibcodocoffee at CommandmoduleexportsCommandgenerate usrlocallibnodemodulescodolibcommandcoffee at CommandmoduleexportsCommandrun usrlocallibnodemodulescodolibcommandcoffee at FunctionmoduleexportsCommandrun usrlocallibnodemodulescodolibcommandcoffee at Objectanonymous usrlocallibnodemodulescodobincodo at Modulecompile modulejs at ObjectModuleextensionsjs modulejs at Moduleload modulejs at FunctionModuleload modulejs at FunctionModulerunMain modulejs at startup nodejs at nodejs Coffeescript allows multiline strings The codo parser throws an error if the source contains a multiline string with interpolation class Test constructor a b thing a b Gives the error error Cannot parse Coffee file Testcoffee missing The same code passes through the CoffeeScript compiler and coffeelint without error I have quite few markdown files that I am passing as extras Few of these are guides I will like to provide links to specific methods or classes from these guides Currently I am using relative paths that is generated by codo like Stompover mixinStomphtmlover Is there a better way to write this