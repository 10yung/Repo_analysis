Sometimes not only need to map out an array but also need to conditional mapping Reference to NSArrays block traversal method void enumerateObjectsUsingBlock void NSNOESCAPE ObjectType obj NSUInteger idx BOOL stop block Add a skip option for the mapping method NSArray mmmapWithskipid id obj BOOL skipcallback NSMutableArray self NSMutableArray arrayWithCapacityselfcount for id obj in self BOOL skip NO id mapObj callbackobj skip if skip self addObjectmapObj return self copy Refer to this answer When initial value is set to nil and the array consists of single item this item is returned and reduce block is never evaluated There seems to be an issue at I would rather write it as accumulator blockaccumulator object Does this make sense Usage NSLog YESORNOmyBool Compatibility with Carthage would be nice Also updated the version so it can be released as a new pod version I can of course undo that or change the version or whatever This pull request adds generics to all ArraySetDictionary methods and nullability modifiers in a backward compatible way containsString was added in iOS and this may collide with the native implementation It seems that when adding the project in a Podfile it does not get updated getting version Please check Cocoapods started causing me problems so Im trying out Carthage To make projects work with Carthage you dont have a podspec you just create an Xcode project with a shared scheme that builds a dynamic framework iOS only You might want to move some of the files around but you need to make sure xcodebuild will still build it Im not sure but we might need another scheme to build the version for Mac 