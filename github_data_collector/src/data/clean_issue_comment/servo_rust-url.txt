Diesels test suits fail since the release of url Ive narrowed down the failure to the following minimal test case rust let pgurl postgrespostgreslocalhost let mut dburl urlUrlparsepgurlunwrap dburlsetpathdieselfoo println dburl With url this results in postgrespostgreslocalhostdieselfoo being printed while outputs postgrespostgreslocalhostdieselfoo Sounds similar to but I cannot see how this is related Currently the API only allow writing or parsing rust strings which means enforced UTF However the standard does not enforce this Some protocols For eg Bittorrent rely of sending bytes in a GET request These bytes may or may not make a valid UTF string Is it possible to provide methods to URL encodedecode namevalue bytes pair Cargos internal test suite is unfortunately failing after the update to url and one thing weve narrowed down so far is that the behavior of this changed between and rust use urlUrl fn main let mut url Urlparsegitgithubcomfoobarunwrap println urlsetschemehttps On this succeeded but on this is now failing Is this an intended change or perhaps an accidental bug If its intended is there a way we can get this working Errordescription has been documented as softdeprecated since months ago It is going to be harddeprecated soon This PR Moves an implementation of Errordescription into internal ParseError type implementation similar to SyntaxViolation Related PR Enables using postfix operator and try macro with ParseError when the enclosing scope expects an ioError Closes Implements TryFroma str for Url gated behind the tryfrom feature This should make it possible to use this conversion without issuing a breaking change Thanks Having impl TryFrom str for Url would be fantastic because it would allow passing both Url and str to the same API through an impl TryIntoUrl bound Example rust fn makerequestimpl TryIntoUrl Result ParseError rust Pass a literal directly let mut req makerequest Create a url manipulate it then pass it let url Urlparse validateurl url let mut req makerequesturl Caveats The only caveat here is that TryFrom and TryInto were stabilized in Rust and the minimum guaranteed Rust version for url is which means this would likely would require a major version bump Thanks dataurl has a Mime class distinct from the one in and its looking like using dataurl in servo as a replacement for might mean redundantly parsing the mime type into both classes Could dataurl migrate to that mime class or offer a codepath that just skips the mimetype parsing entirely for use by client code that is already parsing its own mime type Just wanted this when i looked at the documentation This makes the library nostdcompatible in a pretty straightforward manner by disabling methods that cant possibly work in a nostd environment like Cow and dynamic string allocation As a second step this could be made allocenabled but that is not needed for my usecase